#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 820D56ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D56EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D56EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D56EC);
		  /* 820D56ECh */ case    0:  		/* lwz R11, <#[R30 + 88]> */
		/* 820D56ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000058) );
		/* 820D56ECh case    0:*/		return 0x820D56F0;
		  /* 820D56F0h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D56F0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D56F0h case    1:*/		return 0x820D56F4;
		  /* 820D56F4h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 820D56F4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D5708;  }
		/* 820D56F4h case    2:*/		return 0x820D56F8;
		  /* 820D56F8h */ case    3:  		/* lis R11, -32255 */
		/* 820D56F8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D56F8h case    3:*/		return 0x820D56FC;
		  /* 820D56FCh */ case    4:  		/* mr R3, R31 */
		/* 820D56FCh case    4:*/		regs.R3 = regs.R31;
		/* 820D56FCh case    4:*/		return 0x820D5700;
		  /* 820D5700h */ case    5:  		/* addi R4, R11, 29552 */
		/* 820D5700h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7370);
		/* 820D5700h case    5:*/		return 0x820D5704;
		  /* 820D5704h */ case    6:  		/* bl -19996 */
		/* 820D5704h case    6:*/		regs.LR = 0x820D5708; return 0x820D08E8;
		/* 820D5704h case    6:*/		return 0x820D5708;
	}
	return 0x820D5708;
} // Block from 820D56ECh-820D5708h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D5708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5708);
		  /* 820D5708h */ case    0:  		/* lwz R11, <#[R30 + 92]> */
		/* 820D5708h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000005C) );
		/* 820D5708h case    0:*/		return 0x820D570C;
		  /* 820D570Ch */ case    1:  		/* lwz R10, <#[R11 + 16]> */
		/* 820D570Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 820D570Ch case    1:*/		return 0x820D5710;
		  /* 820D5710h */ case    2:  		/* cmplwi CR6, R10, 14 */
		/* 820D5710h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000E);
		/* 820D5710h case    2:*/		return 0x820D5714;
		  /* 820D5714h */ case    3:  		/* bc 4, CR6_EQ, 132 */
		/* 820D5714h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D5798;  }
		/* 820D5714h case    3:*/		return 0x820D5718;
		  /* 820D5718h */ case    4:  		/* lwz R29, <#[R11 + 24]> */
		/* 820D5718h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000018) );
		/* 820D5718h case    4:*/		return 0x820D571C;
		  /* 820D571Ch */ case    5:  		/* li R11, 1 */
		/* 820D571Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820D571Ch case    5:*/		return 0x820D5720;
		  /* 820D5720h */ case    6:  		/* lwz R8, <#[R30 + 104]> */
		/* 820D5720h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000068) );
		/* 820D5720h case    6:*/		return 0x820D5724;
		  /* 820D5724h */ case    7:  		/* rlwinm R10, R29, 27, 5, 31 */
		/* 820D5724h case    7:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R29);
		/* 820D5724h case    7:*/		return 0x820D5728;
		  /* 820D5728h */ case    8:  		/* rlwinm R9, R29, 0, 27, 31 */
		/* 820D5728h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R29);
		/* 820D5728h case    8:*/		return 0x820D572C;
		  /* 820D572Ch */ case    9:  		/* addi R7, R10, 65 */
		/* 820D572Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x41);
		/* 820D572Ch case    9:*/		return 0x820D5730;
		  /* 820D5730h */ case   10:  		/* slw R9, R11, R9 */
		/* 820D5730h case   10:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 820D5730h case   10:*/		return 0x820D5734;
		  /* 820D5734h */ case   11:  		/* rlwinm R11, R7, 2, 0, 29 */
		/* 820D5734h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 820D5734h case   11:*/		return 0x820D5738;
		  /* 820D5738h */ case   12:  		/* lwz R8, <#[R8 + 24]> */
		/* 820D5738h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000018) );
		/* 820D5738h case   12:*/		return 0x820D573C;
		  /* 820D573Ch */ case   13:  		/* addic R7, R8, -1 */
		/* 820D573Ch case   13:*/		cpu::op::addic<0>(regs,&regs.R7,regs.R8,0xFFFFFFFF);
		/* 820D573Ch case   13:*/		return 0x820D5740;
		  /* 820D5740h */ case   14:  		/* subfe R30, R7, R8 */
		/* 820D5740h case   14:*/		cpu::op::subfe<0>(regs,&regs.R30,regs.R7,regs.R8);
		/* 820D5740h case   14:*/		return 0x820D5744;
		  /* 820D5744h */ case   15:  		/* lwzx R11, <#[R11 + R31]> */
		/* 820D5744h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 820D5744h case   15:*/		return 0x820D5748;
		  /* 820D5748h */ case   16:  		/* and. R11, R11, R9 */
		/* 820D5748h case   16:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 820D5748h case   16:*/		return 0x820D574C;
		  /* 820D574Ch */ case   17:  		/* bc 12, CR0_EQ, 28 */
		/* 820D574Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x820D5768;  }
		/* 820D574Ch case   17:*/		return 0x820D5750;
		  /* 820D5750h */ case   18:  		/* lis R11, -32255 */
		/* 820D5750h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5750h case   18:*/		return 0x820D5754;
		  /* 820D5754h */ case   19:  		/* mr R5, R29 */
		/* 820D5754h case   19:*/		regs.R5 = regs.R29;
		/* 820D5754h case   19:*/		return 0x820D5758;
		  /* 820D5758h */ case   20:  		/* addi R4, R11, 29504 */
		/* 820D5758h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7340);
		/* 820D5758h case   20:*/		return 0x820D575C;
		  /* 820D575Ch */ case   21:  		/* mr R3, R31 */
		/* 820D575Ch case   21:*/		regs.R3 = regs.R31;
		/* 820D575Ch case   21:*/		return 0x820D5760;
		  /* 820D5760h */ case   22:  		/* bl -20088 */
		/* 820D5760h case   22:*/		regs.LR = 0x820D5764; return 0x820D08E8;
		/* 820D5760h case   22:*/		return 0x820D5764;
		  /* 820D5764h */ case   23:  		/* b 728 */
		/* 820D5764h case   23:*/		return 0x820D5A3C;
		/* 820D5764h case   23:*/		return 0x820D5768;
	}
	return 0x820D5768;
} // Block from 820D5708h-820D5768h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820D5768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5768);
		  /* 820D5768h */ case    0:  		/* addi R11, R31, 260 */
		/* 820D5768h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x104);
		/* 820D5768h case    0:*/		return 0x820D576C;
		  /* 820D576Ch */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820D576Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820D576Ch case    1:*/		return 0x820D5770;
		  /* 820D5770h */ case    2:  		/* li R4, 1 */
		/* 820D5770h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D5770h case    2:*/		return 0x820D5774;
		  /* 820D5774h */ case    3:  		/* mr R3, R31 */
		/* 820D5774h case    3:*/		regs.R3 = regs.R31;
		/* 820D5774h case    3:*/		return 0x820D5778;
		  /* 820D5778h */ case    4:  		/* lwzx R8, <#[R10 + R11]> */
		/* 820D5778h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820D5778h case    4:*/		return 0x820D577C;
		  /* 820D577Ch */ case    5:  		/* or R9, R9, R8 */
		/* 820D577Ch case    5:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 820D577Ch case    5:*/		return 0x820D5780;
		  /* 820D5780h */ case    6:  		/* stwx R9, <#[R10 + R11]> */
		/* 820D5780h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820D5780h case    6:*/		return 0x820D5784;
		  /* 820D5784h */ case    7:  		/* bl -1276 */
		/* 820D5784h case    7:*/		regs.LR = 0x820D5788; return 0x820D5288;
		/* 820D5784h case    7:*/		return 0x820D5788;
		  /* 820D5788h */ case    8:  		/* mr R5, R30 */
		/* 820D5788h case    8:*/		regs.R5 = regs.R30;
		/* 820D5788h case    8:*/		return 0x820D578C;
		  /* 820D578Ch */ case    9:  		/* mr R4, R29 */
		/* 820D578Ch case    9:*/		regs.R4 = regs.R29;
		/* 820D578Ch case    9:*/		return 0x820D5790;
		  /* 820D5790h */ case   10:  		/* bl -439656 */
		/* 820D5790h case   10:*/		regs.LR = 0x820D5794; return 0x8206A228;
		/* 820D5790h case   10:*/		return 0x820D5794;
		  /* 820D5794h */ case   11:  		/* b 680 */
		/* 820D5794h case   11:*/		return 0x820D5A3C;
		/* 820D5794h case   11:*/		return 0x820D5798;
	}
	return 0x820D5798;
} // Block from 820D5768h-820D5798h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D5798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5798);
		  /* 820D5798h */ case    0:  		/* lis R11, -32255 */
		/* 820D5798h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5798h case    0:*/		return 0x820D579C;
		  /* 820D579Ch */ case    1:  		/* addi R4, R11, 29468 */
		/* 820D579Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x731C);
		/* 820D579Ch case    1:*/		return 0x820D57A0;
		  /* 820D57A0h */ case    2:  		/* b 660 */
		/* 820D57A0h case    2:*/		return 0x820D5A34;
		/* 820D57A0h case    2:*/		return 0x820D57A4;
	}
	return 0x820D57A4;
} // Block from 820D5798h-820D57A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D57A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D57A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D57A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D57A4);
		  /* 820D57A4h */ case    0:  		/* lwz R11, <#[R30 + 88]> */
		/* 820D57A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000058) );
		/* 820D57A4h case    0:*/		return 0x820D57A8;
		  /* 820D57A8h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D57A8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D57A8h case    1:*/		return 0x820D57AC;
		  /* 820D57ACh */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 820D57ACh case    2:*/		if ( regs.CR[6].eq ) { return 0x820D57C0;  }
		/* 820D57ACh case    2:*/		return 0x820D57B0;
		  /* 820D57B0h */ case    3:  		/* lis R11, -32255 */
		/* 820D57B0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D57B0h case    3:*/		return 0x820D57B4;
		  /* 820D57B4h */ case    4:  		/* mr R3, R31 */
		/* 820D57B4h case    4:*/		regs.R3 = regs.R31;
		/* 820D57B4h case    4:*/		return 0x820D57B8;
		  /* 820D57B8h */ case    5:  		/* addi R4, R11, 29428 */
		/* 820D57B8h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x72F4);
		/* 820D57B8h case    5:*/		return 0x820D57BC;
		  /* 820D57BCh */ case    6:  		/* bl -20180 */
		/* 820D57BCh case    6:*/		regs.LR = 0x820D57C0; return 0x820D08E8;
		/* 820D57BCh case    6:*/		return 0x820D57C0;
	}
	return 0x820D57C0;
} // Block from 820D57A4h-820D57C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D57C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D57C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D57C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D57C0);
		  /* 820D57C0h */ case    0:  		/* lwz R29, <#[R30 + 92]> */
		/* 820D57C0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x0000005C) );
		/* 820D57C0h case    0:*/		return 0x820D57C4;
		  /* 820D57C4h */ case    1:  		/* lwz R11, <#[R29 + 16]> */
		/* 820D57C4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 820D57C4h case    1:*/		return 0x820D57C8;
		  /* 820D57C8h */ case    2:  		/* cmplwi CR6, R11, 7 */
		/* 820D57C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 820D57C8h case    2:*/		return 0x820D57CC;
		  /* 820D57CCh */ case    3:  		/* bc 4, CR6_EQ, 332 */
		/* 820D57CCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D5918;  }
		/* 820D57CCh case    3:*/		return 0x820D57D0;
		  /* 820D57D0h */ case    4:  		/* li R11, 4 */
		/* 820D57D0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820D57D0h case    4:*/		return 0x820D57D4;
		  /* 820D57D4h */ case    5:  		/* mr R7, R28 */
		/* 820D57D4h case    5:*/		regs.R7 = regs.R28;
		/* 820D57D4h case    5:*/		return 0x820D57D8;
		  /* 820D57D8h */ case    6:  		/* addi R9, R1, 112 */
		/* 820D57D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820D57D8h case    6:*/		return 0x820D57DC;
		  /* 820D57DCh */ case    7:  		/* addi R10, R30, 104 */
		/* 820D57DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x68);
		/* 820D57DCh case    7:*/		return 0x820D57E0;
		  /* 820D57E0h */ case    8:  		/* mtspr CTR, R11 */
		/* 820D57E0h case    8:*/		regs.CTR = regs.R11;
		/* 820D57E0h case    8:*/		return 0x820D57E4;
		  /* 820D57E4h */ case    9:  		/* lwz R8, <#[R10]> */
		/* 820D57E4h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820D57E4h case    9:*/		return 0x820D57E8;
		  /* 820D57E8h */ case   10:  		/* lwz R11, <#[R8 + 16]> */
		/* 820D57E8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000010) );
		/* 820D57E8h case   10:*/		return 0x820D57EC;
		  /* 820D57ECh */ case   11:  		/* cmpwi CR6, R11, 2 */
		/* 820D57ECh case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 820D57ECh case   11:*/		return 0x820D57F0;
		  /* 820D57F0h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 820D57F0h case   12:*/		if ( regs.CR[6].eq ) { return 0x820D57FC;  }
		/* 820D57F0h case   12:*/		return 0x820D57F4;
		  /* 820D57F4h */ case   13:  		/* cmpwi CR6, R11, 4 */
		/* 820D57F4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 820D57F4h case   13:*/		return 0x820D57F8;
		  /* 820D57F8h */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 820D57F8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820D5804;  }
		/* 820D57F8h case   14:*/		return 0x820D57FC;
	}
	return 0x820D57FC;
} // Block from 820D57C0h-820D57FCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 820D57FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D57FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D57FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D57FC);
		  /* 820D57FCh */ case    0:  		/* lwz R11, <#[R8 + 24]> */
		/* 820D57FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000018) );
		/* 820D57FCh case    0:*/		return 0x820D5800;
		  /* 820D5800h */ case    1:  		/* stw R11, <#[R9]> */
		/* 820D5800h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 820D5800h case    1:*/		return 0x820D5804;
	}
	return 0x820D5804;
} // Block from 820D57FCh-820D5804h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D5804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5804);
		  /* 820D5804h */ case    0:  		/* addi R10, R10, 4 */
		/* 820D5804h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820D5804h case    0:*/		return 0x820D5808;
		  /* 820D5808h */ case    1:  		/* addi R9, R9, 4 */
		/* 820D5808h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820D5808h case    1:*/		return 0x820D580C;
		  /* 820D580Ch */ case    2:  		/* bc 16, CR0_LT, -40 */
		/* 820D580Ch case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820D57E4;  }
		/* 820D580Ch case    2:*/		return 0x820D5810;
		  /* 820D5810h */ case    3:  		/* lwz R11, <#[R1 + 112]> */
		/* 820D5810h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820D5810h case    3:*/		return 0x820D5814;
		  /* 820D5814h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 820D5814h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D5814h case    4:*/		return 0x820D5818;
	}
	return 0x820D5818;
} // Block from 820D5804h-820D5818h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D5818h
// Function '?HandleConfig@CUAssembler@D3DXShader@@IAAJPAVCNodeUAsmInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5818);
		  /* 820D5818h */ case    0:  		/* bc 12, CR6_LT, 12 */
		/* 820D5818h case    0:*/		if ( regs.CR[6].lt ) { return 0x820D5824;  }
		/* 820D5818h case    0:*/		return 0x820D581C;
		  /* 820D581Ch */ case    1:  		/* cmpwi CR6, R11, 255 */
		/* 820D581Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x000000FF);
		/* 820D581Ch case    1:*/		return 0x820D5820;
		  /* 820D5820h */ case    2:  		/* bc 4, CR6_GT, 24 */
		/* 820D5820h case    2:*/		if ( !regs.CR[6].gt ) { return 0x820D5838;  }
		/* 820D5820h case    2:*/		return 0x820D5824;
	}
	return 0x820D5824;
} // Block from 820D5818h-820D5824h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D5824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5824);
		  /* 820D5824h */ case    0:  		/* lis R11, -32255 */
		/* 820D5824h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5824h case    0:*/		return 0x820D5828;
		  /* 820D5828h */ case    1:  		/* mr R3, R31 */
		/* 820D5828h case    1:*/		regs.R3 = regs.R31;
		/* 820D5828h case    1:*/		return 0x820D582C;
		  /* 820D582Ch */ case    2:  		/* addi R4, R11, 29360 */
		/* 820D582Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x72B0);
		/* 820D582Ch case    2:*/		return 0x820D5830;
		  /* 820D5830h */ case    3:  		/* bl -20296 */
		/* 820D5830h case    3:*/		regs.LR = 0x820D5834; return 0x820D08E8;
		/* 820D5830h case    3:*/		return 0x820D5834;
		  /* 820D5834h */ case    4:  		/* li R7, 1 */
		/* 820D5834h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820D5834h case    4:*/		return 0x820D5838;
	}
	return 0x820D5838;
} // Block from 820D5824h-820D5838h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D5838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5838);
		  /* 820D5838h */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 820D5838h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820D5838h case    0:*/		return 0x820D583C;
		  /* 820D583Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D583Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D583Ch case    1:*/		return 0x820D5840;
		  /* 820D5840h */ case    2:  		/* bc 12, CR6_LT, 12 */
		/* 820D5840h case    2:*/		if ( regs.CR[6].lt ) { return 0x820D584C;  }
		/* 820D5840h case    2:*/		return 0x820D5844;
		  /* 820D5844h */ case    3:  		/* cmpwi CR6, R11, 255 */
		/* 820D5844h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x000000FF);
		/* 820D5844h case    3:*/		return 0x820D5848;
		  /* 820D5848h */ case    4:  		/* bc 4, CR6_GT, 24 */
		/* 820D5848h case    4:*/		if ( !regs.CR[6].gt ) { return 0x820D5860;  }
		/* 820D5848h case    4:*/		return 0x820D584C;
	}
	return 0x820D584C;
} // Block from 820D5838h-820D584Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D584Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D584C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D584C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D584C);
		  /* 820D584Ch */ case    0:  		/* lis R11, -32255 */
		/* 820D584Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D584Ch case    0:*/		return 0x820D5850;
		  /* 820D5850h */ case    1:  		/* mr R3, R31 */
		/* 820D5850h case    1:*/		regs.R3 = regs.R31;
		/* 820D5850h case    1:*/		return 0x820D5854;
		  /* 820D5854h */ case    2:  		/* addi R4, R11, 29288 */
		/* 820D5854h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7268);
		/* 820D5854h case    2:*/		return 0x820D5858;
		  /* 820D5858h */ case    3:  		/* bl -20336 */
		/* 820D5858h case    3:*/		regs.LR = 0x820D585C; return 0x820D08E8;
		/* 820D5858h case    3:*/		return 0x820D585C;
		  /* 820D585Ch */ case    4:  		/* li R7, 1 */
		/* 820D585Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820D585Ch case    4:*/		return 0x820D5860;
	}
	return 0x820D5860;
} // Block from 820D584Ch-820D5860h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D5860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5860);
		  /* 820D5860h */ case    0:  		/* lwz R11, <#[R1 + 120]> */
		/* 820D5860h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820D5860h case    0:*/		return 0x820D5864;
		  /* 820D5864h */ case    1:  		/* cmpwi CR6, R11, -128 */
		/* 820D5864h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFF80);
		/* 820D5864h case    1:*/		return 0x820D5868;
		  /* 820D5868h */ case    2:  		/* bc 12, CR6_LT, 12 */
		/* 820D5868h case    2:*/		if ( regs.CR[6].lt ) { return 0x820D5874;  }
		/* 820D5868h case    2:*/		return 0x820D586C;
		  /* 820D586Ch */ case    3:  		/* cmpwi CR6, R11, 127 */
		/* 820D586Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000007F);
		/* 820D586Ch case    3:*/		return 0x820D5870;
		  /* 820D5870h */ case    4:  		/* bc 4, CR6_GT, 24 */
		/* 820D5870h case    4:*/		if ( !regs.CR[6].gt ) { return 0x820D5888;  }
		/* 820D5870h case    4:*/		return 0x820D5874;
	}
	return 0x820D5874;
} // Block from 820D5860h-820D5874h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D5874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5874);
		  /* 820D5874h */ case    0:  		/* lis R11, -32255 */
		/* 820D5874h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5874h case    0:*/		return 0x820D5878;
		  /* 820D5878h */ case    1:  		/* mr R3, R31 */
		/* 820D5878h case    1:*/		regs.R3 = regs.R31;
		/* 820D5878h case    1:*/		return 0x820D587C;
		  /* 820D587Ch */ case    2:  		/* addi R4, R11, 29216 */
		/* 820D587Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7220);
		/* 820D587Ch case    2:*/		return 0x820D5880;
		  /* 820D5880h */ case    3:  		/* bl -20376 */
		/* 820D5880h case    3:*/		regs.LR = 0x820D5884; return 0x820D08E8;
		/* 820D5880h case    3:*/		return 0x820D5884;
		  /* 820D5884h */ case    4:  		/* li R7, 1 */
		/* 820D5884h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820D5884h case    4:*/		return 0x820D5888;
	}
	return 0x820D5888;
} // Block from 820D5874h-820D5888h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D5888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5888);
		  /* 820D5888h */ case    0:  		/* lwz R11, <#[R1 + 124]> */
		/* 820D5888h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D5888h case    0:*/		return 0x820D588C;
		  /* 820D588Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D588Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D588Ch case    1:*/		return 0x820D5890;
		  /* 820D5890h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 820D5890h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D58A8;  }
		/* 820D5890h case    2:*/		return 0x820D5894;
		  /* 820D5894h */ case    3:  		/* lis R11, -32255 */
		/* 820D5894h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5894h case    3:*/		return 0x820D5898;
		  /* 820D5898h */ case    4:  		/* mr R3, R31 */
		/* 820D5898h case    4:*/		regs.R3 = regs.R31;
		/* 820D5898h case    4:*/		return 0x820D589C;
		  /* 820D589Ch */ case    5:  		/* addi R4, R11, 29160 */
		/* 820D589Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x71E8);
		/* 820D589Ch case    5:*/		return 0x820D58A0;
		  /* 820D58A0h */ case    6:  		/* bl -20408 */
		/* 820D58A0h case    6:*/		regs.LR = 0x820D58A4; return 0x820D08E8;
		/* 820D58A0h case    6:*/		return 0x820D58A4;
		  /* 820D58A4h */ case    7:  		/* li R7, 1 */
		/* 820D58A4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820D58A4h case    7:*/		return 0x820D58A8;
	}
	return 0x820D58A8;
} // Block from 820D5888h-820D58A8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D58A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D58A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D58A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D58A8);
		  /* 820D58A8h */ case    0:  		/* lwz R30, <#[R29 + 24]> */
		/* 820D58A8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000018) );
		/* 820D58A8h case    0:*/		return 0x820D58AC;
		  /* 820D58ACh */ case    1:  		/* li R11, 1 */
		/* 820D58ACh case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820D58ACh case    1:*/		return 0x820D58B0;
		  /* 820D58B0h */ case    2:  		/* rlwinm R10, R30, 27, 5, 31 */
		/* 820D58B0h case    2:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R30);
		/* 820D58B0h case    2:*/		return 0x820D58B4;
		  /* 820D58B4h */ case    3:  		/* rlwinm R9, R30, 0, 27, 31 */
		/* 820D58B4h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R30);
		/* 820D58B4h case    3:*/		return 0x820D58B8;
		  /* 820D58B8h */ case    4:  		/* addi R8, R10, 64 */
		/* 820D58B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x40);
		/* 820D58B8h case    4:*/		return 0x820D58BC;
		  /* 820D58BCh */ case    5:  		/* slw R9, R11, R9 */
		/* 820D58BCh case    5:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 820D58BCh case    5:*/		return 0x820D58C0;
		  /* 820D58C0h */ case    6:  		/* rlwinm R11, R8, 2, 0, 29 */
		/* 820D58C0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 820D58C0h case    6:*/		return 0x820D58C4;
		  /* 820D58C4h */ case    7:  		/* lwzx R11, <#[R11 + R31]> */
		/* 820D58C4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 820D58C4h case    7:*/		return 0x820D58C8;
		  /* 820D58C8h */ case    8:  		/* and. R11, R11, R9 */
		/* 820D58C8h case    8:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 820D58C8h case    8:*/		return 0x820D58CC;
		  /* 820D58CCh */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 820D58CCh case    9:*/		if ( regs.CR[0].eq ) { return 0x820D58E0;  }
		/* 820D58CCh case    9:*/		return 0x820D58D0;
		  /* 820D58D0h */ case   10:  		/* lis R11, -32255 */
		/* 820D58D0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D58D0h case   10:*/		return 0x820D58D4;
		  /* 820D58D4h */ case   11:  		/* mr R5, R30 */
		/* 820D58D4h case   11:*/		regs.R5 = regs.R30;
		/* 820D58D4h case   11:*/		return 0x820D58D8;
		  /* 820D58D8h */ case   12:  		/* addi R4, R11, 29112 */
		/* 820D58D8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x71B8);
		/* 820D58D8h case   12:*/		return 0x820D58DC;
		  /* 820D58DCh */ case   13:  		/* b -384 */
		/* 820D58DCh case   13:*/		return 0x820D575C;
		/* 820D58DCh case   13:*/		return 0x820D58E0;
	}
	return 0x820D58E0;
} // Block from 820D58A8h-820D58E0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D58E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D58E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D58E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D58E0);
		  /* 820D58E0h */ case    0:  		/* cmpwi CR6, R7, 0 */
		/* 820D58E0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 820D58E0h case    0:*/		return 0x820D58E4;
		  /* 820D58E4h */ case    1:  		/* bc 4, CR6_EQ, 344 */
		/* 820D58E4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820D5A3C;  }
		/* 820D58E4h case    1:*/		return 0x820D58E8;
		  /* 820D58E8h */ case    2:  		/* addi R11, R31, 256 */
		/* 820D58E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x100);
		/* 820D58E8h case    2:*/		return 0x820D58EC;
		  /* 820D58ECh */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820D58ECh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820D58ECh case    3:*/		return 0x820D58F0;
		  /* 820D58F0h */ case    4:  		/* li R4, 1 */
		/* 820D58F0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D58F0h case    4:*/		return 0x820D58F4;
		  /* 820D58F4h */ case    5:  		/* mr R3, R31 */
		/* 820D58F4h case    5:*/		regs.R3 = regs.R31;
		/* 820D58F4h case    5:*/		return 0x820D58F8;
		  /* 820D58F8h */ case    6:  		/* lwzx R8, <#[R10 + R11]> */
		/* 820D58F8h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820D58F8h case    6:*/		return 0x820D58FC;
		  /* 820D58FCh */ case    7:  		/* or R9, R9, R8 */
		/* 820D58FCh case    7:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 820D58FCh case    7:*/		return 0x820D5900;
		  /* 820D5900h */ case    8:  		/* stwx R9, <#[R10 + R11]> */
		/* 820D5900h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820D5900h case    8:*/		return 0x820D5904;
		  /* 820D5904h */ case    9:  		/* bl -1660 */
		/* 820D5904h case    9:*/		regs.LR = 0x820D5908; return 0x820D5288;
		/* 820D5904h case    9:*/		return 0x820D5908;
		  /* 820D5908h */ case   10:  		/* addi R5, R1, 112 */
		/* 820D5908h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 820D5908h case   10:*/		return 0x820D590C;
		  /* 820D590Ch */ case   11:  		/* mr R4, R30 */
		/* 820D590Ch case   11:*/		regs.R4 = regs.R30;
		/* 820D590Ch case   11:*/		return 0x820D5910;
		  /* 820D5910h */ case   12:  		/* bl -433320 */
		/* 820D5910h case   12:*/		regs.LR = 0x820D5914; return 0x8206BC68;
		/* 820D5910h case   12:*/		return 0x820D5914;
		  /* 820D5914h */ case   13:  		/* b 296 */
		/* 820D5914h case   13:*/		return 0x820D5A3C;
		/* 820D5914h case   13:*/		return 0x820D5918;
	}
	return 0x820D5918;
} // Block from 820D58E0h-820D5918h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D5918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5918);
		  /* 820D5918h */ case    0:  		/* lis R11, -32255 */
		/* 820D5918h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5918h case    0:*/		return 0x820D591C;
		  /* 820D591Ch */ case    1:  		/* addi R4, R11, 29072 */
		/* 820D591Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7190);
		/* 820D591Ch case    1:*/		return 0x820D5920;
		  /* 820D5920h */ case    2:  		/* b 276 */
		/* 820D5920h case    2:*/		return 0x820D5A34;
		/* 820D5920h case    2:*/		return 0x820D5924;
	}
	return 0x820D5924;
} // Block from 820D5918h-820D5924h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D5924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5924);
		  /* 820D5924h */ case    0:  		/* lwz R11, <#[R30 + 88]> */
		/* 820D5924h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000058) );
		/* 820D5924h case    0:*/		return 0x820D5928;
		  /* 820D5928h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D5928h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D5928h case    1:*/		return 0x820D592C;
		  /* 820D592Ch */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 820D592Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820D5940;  }
		/* 820D592Ch case    2:*/		return 0x820D5930;
		  /* 820D5930h */ case    3:  		/* lis R11, -32255 */
		/* 820D5930h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5930h case    3:*/		return 0x820D5934;
		  /* 820D5934h */ case    4:  		/* mr R3, R31 */
		/* 820D5934h case    4:*/		regs.R3 = regs.R31;
		/* 820D5934h case    4:*/		return 0x820D5938;
		  /* 820D5938h */ case    5:  		/* addi R4, R11, 29032 */
		/* 820D5938h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7168);
		/* 820D5938h case    5:*/		return 0x820D593C;
		  /* 820D593Ch */ case    6:  		/* bl -20564 */
		/* 820D593Ch case    6:*/		regs.LR = 0x820D5940; return 0x820D08E8;
		/* 820D593Ch case    6:*/		return 0x820D5940;
	}
	return 0x820D5940;
} // Block from 820D5924h-820D5940h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D5940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5940);
		  /* 820D5940h */ case    0:  		/* lwz R26, <#[R30 + 92]> */
		/* 820D5940h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R30 + 0x0000005C) );
		/* 820D5940h case    0:*/		return 0x820D5944;
		  /* 820D5944h */ case    1:  		/* lwz R11, <#[R26 + 16]> */
		/* 820D5944h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 820D5944h case    1:*/		return 0x820D5948;
		  /* 820D5948h */ case    2:  		/* cmplwi CR6, R11, 2 */
		/* 820D5948h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 820D5948h case    2:*/		return 0x820D594C;
		  /* 820D594Ch */ case    3:  		/* bc 4, CR6_EQ, 224 */
		/* 820D594Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D5A2C;  }
		/* 820D594Ch case    3:*/		return 0x820D5950;
		  /* 820D5950h */ case    4:  		/* lis R11, -32255 */
		/* 820D5950h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5950h case    4:*/		return 0x820D5954;
		  /* 820D5954h */ case    5:  		/* addi R29, R1, 128 */
		/* 820D5954h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x80);
		/* 820D5954h case    5:*/		return 0x820D5958;
		  /* 820D5958h */ case    6:  		/* addi R30, R30, 104 */
		/* 820D5958h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x68);
		/* 820D5958h case    6:*/		return 0x820D595C;
		  /* 820D595Ch */ case    7:  		/* li R28, 4 */
		/* 820D595Ch case    7:*/		cpu::op::li<0>(regs,&regs.R28,0x4);
		/* 820D595Ch case    7:*/		return 0x820D5960;
		  /* 820D5960h */ case    8:  		/* addi R27, R11, 28996 */
		/* 820D5960h case    8:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x7144);
		/* 820D5960h case    8:*/		return 0x820D5964;
		  /* 820D5964h */ case    9:  		/* lwz R10, <#[R30]> */
		/* 820D5964h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 820D5964h case    9:*/		return 0x820D5968;
		  /* 820D5968h */ case   10:  		/* lwz R11, <#[R10 + 16]> */
		/* 820D5968h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 820D5968h case   10:*/		return 0x820D596C;
		  /* 820D596Ch */ case   11:  		/* cmpwi CR6, R11, 2 */
		/* 820D596Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 820D596Ch case   11:*/		return 0x820D5970;
		  /* 820D5970h */ case   12:  		/* bc 12, CR6_EQ, 112 */
		/* 820D5970h case   12:*/		if ( regs.CR[6].eq ) { return 0x820D59E0;  }
		/* 820D5970h case   12:*/		return 0x820D5974;
		  /* 820D5974h */ case   13:  		/* cmpwi CR6, R11, 4 */
		/* 820D5974h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 820D5974h case   13:*/		return 0x820D5978;
		  /* 820D5978h */ case   14:  		/* bc 12, CR6_EQ, 104 */
		/* 820D5978h case   14:*/		if ( regs.CR[6].eq ) { return 0x820D59E0;  }
		/* 820D5978h case   14:*/		return 0x820D597C;
		  /* 820D597Ch */ case   15:  		/* cmpwi CR6, R11, 6 */
		/* 820D597Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 820D597Ch case   15:*/		return 0x820D5980;
		  /* 820D5980h */ case   16:  		/* bc 4, CR6_GT, 100 */
		/* 820D5980h case   16:*/		if ( !regs.CR[6].gt ) { return 0x820D59E4;  }
		/* 820D5980h case   16:*/		return 0x820D5984;
		  /* 820D5984h */ case   17:  		/* cmpwi CR6, R11, 10 */
		/* 820D5984h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000A);
		/* 820D5984h case   17:*/		return 0x820D5988;
		  /* 820D5988h */ case   18:  		/* bc 12, CR6_GT, 92 */
		/* 820D5988h case   18:*/		if ( regs.CR[6].gt ) { return 0x820D59E4;  }
		/* 820D5988h case   18:*/		return 0x820D598C;
		  /* 820D598Ch */ case   19:  		/* lfd FR0, <#[R10 + 24]> */
		/* 820D598Ch case   19:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000018) );
		/* 820D598Ch case   19:*/		return 0x820D5990;
		  /* 820D5990h */ case   20:  		/* frsp FR0, FR0 */
		/* 820D5990h case   20:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 820D5990h case   20:*/		return 0x820D5994;
		  /* 820D5994h */ case   21:  		/* stfs FR0, <#[R29]> */
		/* 820D5994h case   21:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820D5994h case   21:*/		return 0x820D5998;
		  /* 820D5998h */ case   22:  		/* addic. R28, R28, -1 */
		/* 820D5998h case   22:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 820D5998h case   22:*/		return 0x820D599C;
		  /* 820D599Ch */ case   23:  		/* addi R30, R30, 4 */
		/* 820D599Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820D599Ch case   23:*/		return 0x820D59A0;
		  /* 820D59A0h */ case   24:  		/* addi R29, R29, 4 */
		/* 820D59A0h case   24:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820D59A0h case   24:*/		return 0x820D59A4;
		  /* 820D59A4h */ case   25:  		/* bc 4, CR0_EQ, -64 */
		/* 820D59A4h case   25:*/		if ( !regs.CR[0].eq ) { return 0x820D5964;  }
		/* 820D59A4h case   25:*/		return 0x820D59A8;
		  /* 820D59A8h */ case   26:  		/* lwz R30, <#[R26 + 24]> */
		/* 820D59A8h case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000018) );
		/* 820D59A8h case   26:*/		return 0x820D59AC;
		  /* 820D59ACh */ case   27:  		/* li R11, 1 */
		/* 820D59ACh case   27:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820D59ACh case   27:*/		return 0x820D59B0;
		  /* 820D59B0h */ case   28:  		/* rlwinm R10, R30, 27, 5, 31 */
		/* 820D59B0h case   28:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R30);
		/* 820D59B0h case   28:*/		return 0x820D59B4;
		  /* 820D59B4h */ case   29:  		/* rlwinm R9, R30, 0, 27, 31 */
		/* 820D59B4h case   29:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R30);
		/* 820D59B4h case   29:*/		return 0x820D59B8;
		  /* 820D59B8h */ case   30:  		/* addi R8, R10, 56 */
		/* 820D59B8h case   30:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x38);
		/* 820D59B8h case   30:*/		return 0x820D59BC;
		  /* 820D59BCh */ case   31:  		/* slw R9, R11, R9 */
		/* 820D59BCh case   31:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 820D59BCh case   31:*/		return 0x820D59C0;
		  /* 820D59C0h */ case   32:  		/* rlwinm R11, R8, 2, 0, 29 */
		/* 820D59C0h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 820D59C0h case   32:*/		return 0x820D59C4;
		  /* 820D59C4h */ case   33:  		/* lwzx R11, <#[R11 + R31]> */
		/* 820D59C4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 820D59C4h case   33:*/		return 0x820D59C8;
		  /* 820D59C8h */ case   34:  		/* and. R11, R11, R9 */
		/* 820D59C8h case   34:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 820D59C8h case   34:*/		return 0x820D59CC;
		  /* 820D59CCh */ case   35:  		/* bc 12, CR0_EQ, 48 */
		/* 820D59CCh case   35:*/		if ( regs.CR[0].eq ) { return 0x820D59FC;  }
		/* 820D59CCh case   35:*/		return 0x820D59D0;
		  /* 820D59D0h */ case   36:  		/* lis R11, -32255 */
		/* 820D59D0h case   36:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D59D0h case   36:*/		return 0x820D59D4;
		  /* 820D59D4h */ case   37:  		/* mr R5, R30 */
		/* 820D59D4h case   37:*/		regs.R5 = regs.R30;
		/* 820D59D4h case   37:*/		return 0x820D59D8;
		  /* 820D59D8h */ case   38:  		/* addi R4, R11, 28948 */
		/* 820D59D8h case   38:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7114);
		/* 820D59D8h case   38:*/		return 0x820D59DC;
		  /* 820D59DCh */ case   39:  		/* b -640 */
		/* 820D59DCh case   39:*/		return 0x820D575C;
		/* 820D59DCh case   39:*/		return 0x820D59E0;
	}
	return 0x820D59E0;
} // Block from 820D5940h-820D59E0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820D59E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D59E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D59E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D59E0);
		  /* 820D59E0h */ case    0:  		/* li R11, 2 */
		/* 820D59E0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820D59E0h case    0:*/		return 0x820D59E4;
	}
	return 0x820D59E4;
} // Block from 820D59E0h-820D59E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D59E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D59E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D59E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D59E4);
		  /* 820D59E4h */ case    0:  		/* cmpwi CR6, R11, 7 */
		/* 820D59E4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 820D59E4h case    0:*/		return 0x820D59E8;
		  /* 820D59E8h */ case    1:  		/* bc 12, CR6_EQ, -92 */
		/* 820D59E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820D598C;  }
		/* 820D59E8h case    1:*/		return 0x820D59EC;
		  /* 820D59ECh */ case    2:  		/* mr R4, R27 */
		/* 820D59ECh case    2:*/		regs.R4 = regs.R27;
		/* 820D59ECh case    2:*/		return 0x820D59F0;
		  /* 820D59F0h */ case    3:  		/* mr R3, R31 */
		/* 820D59F0h case    3:*/		regs.R3 = regs.R31;
		/* 820D59F0h case    3:*/		return 0x820D59F4;
		  /* 820D59F4h */ case    4:  		/* bl -20748 */
		/* 820D59F4h case    4:*/		regs.LR = 0x820D59F8; return 0x820D08E8;
		/* 820D59F4h case    4:*/		return 0x820D59F8;
		  /* 820D59F8h */ case    5:  		/* b -96 */
		/* 820D59F8h case    5:*/		return 0x820D5998;
		/* 820D59F8h case    5:*/		return 0x820D59FC;
	}
	return 0x820D59FC;
} // Block from 820D59E4h-820D59FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D59FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D59FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D59FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D59FC);
		  /* 820D59FCh */ case    0:  		/* addi R11, R31, 224 */
		/* 820D59FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xE0);
		/* 820D59FCh case    0:*/		return 0x820D5A00;
		  /* 820D5A00h */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820D5A00h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820D5A00h case    1:*/		return 0x820D5A04;
		  /* 820D5A04h */ case    2:  		/* li R4, 1 */
		/* 820D5A04h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D5A04h case    2:*/		return 0x820D5A08;
		  /* 820D5A08h */ case    3:  		/* mr R3, R31 */
		/* 820D5A08h case    3:*/		regs.R3 = regs.R31;
		/* 820D5A08h case    3:*/		return 0x820D5A0C;
		  /* 820D5A0Ch */ case    4:  		/* lwzx R8, <#[R10 + R11]> */
		/* 820D5A0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820D5A0Ch case    4:*/		return 0x820D5A10;
		  /* 820D5A10h */ case    5:  		/* or R9, R8, R9 */
		/* 820D5A10h case    5:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 820D5A10h case    5:*/		return 0x820D5A14;
		  /* 820D5A14h */ case    6:  		/* stwx R9, <#[R10 + R11]> */
		/* 820D5A14h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820D5A14h case    6:*/		return 0x820D5A18;
		  /* 820D5A18h */ case    7:  		/* bl -1936 */
		/* 820D5A18h case    7:*/		regs.LR = 0x820D5A1C; return 0x820D5288;
		/* 820D5A18h case    7:*/		return 0x820D5A1C;
		  /* 820D5A1Ch */ case    8:  		/* addi R5, R1, 128 */
		/* 820D5A1Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820D5A1Ch case    8:*/		return 0x820D5A20;
		  /* 820D5A20h */ case    9:  		/* mr R4, R30 */
		/* 820D5A20h case    9:*/		regs.R4 = regs.R30;
		/* 820D5A20h case    9:*/		return 0x820D5A24;
		  /* 820D5A24h */ case   10:  		/* bl -440292 */
		/* 820D5A24h case   10:*/		regs.LR = 0x820D5A28; return 0x8206A240;
		/* 820D5A24h case   10:*/		return 0x820D5A28;
		  /* 820D5A28h */ case   11:  		/* b 20 */
		/* 820D5A28h case   11:*/		return 0x820D5A3C;
		/* 820D5A28h case   11:*/		return 0x820D5A2C;
	}
	return 0x820D5A2C;
} // Block from 820D59FCh-820D5A2Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D5A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5A2C);
		  /* 820D5A2Ch */ case    0:  		/* lis R11, -32255 */
		/* 820D5A2Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5A2Ch case    0:*/		return 0x820D5A30;
		  /* 820D5A30h */ case    1:  		/* addi R4, R11, 28912 */
		/* 820D5A30h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x70F0);
		/* 820D5A30h case    1:*/		return 0x820D5A34;
	}
	return 0x820D5A34;
} // Block from 820D5A2Ch-820D5A34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D5A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5A34);
		  /* 820D5A34h */ case    0:  		/* mr R3, R31 */
		/* 820D5A34h case    0:*/		regs.R3 = regs.R31;
		/* 820D5A34h case    0:*/		return 0x820D5A38;
		  /* 820D5A38h */ case    1:  		/* bl -20816 */
		/* 820D5A38h case    1:*/		regs.LR = 0x820D5A3C; return 0x820D08E8;
		/* 820D5A38h case    1:*/		return 0x820D5A3C;
	}
	return 0x820D5A3C;
} // Block from 820D5A34h-820D5A3Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D5A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5A3C);
		  /* 820D5A3Ch */ case    0:  		/* li R3, 0 */
		/* 820D5A3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D5A3Ch case    0:*/		return 0x820D5A40;
	}
	return 0x820D5A40;
} // Block from 820D5A3Ch-820D5A40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D5A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5A40);
		  /* 820D5A40h */ case    0:  		/* addi R1, R1, 240 */
		/* 820D5A40h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 820D5A40h case    0:*/		return 0x820D5A44;
		  /* 820D5A44h */ case    1:  		/* b -280500 */
		/* 820D5A44h case    1:*/		return 0x82091290;
		/* 820D5A44h case    1:*/		return 0x820D5A48;
	}
	return 0x820D5A48;
} // Block from 820D5A40h-820D5A48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D5A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5A48);
		  /* 820D5A48h */ case    0:  		/* mfspr R12, LR */
		/* 820D5A48h case    0:*/		regs.R12 = regs.LR;
		/* 820D5A48h case    0:*/		return 0x820D5A4C;
		  /* 820D5A4Ch */ case    1:  		/* bl -280592 */
		/* 820D5A4Ch case    1:*/		regs.LR = 0x820D5A50; return 0x8209123C;
		/* 820D5A4Ch case    1:*/		return 0x820D5A50;
		  /* 820D5A50h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 820D5A50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 820D5A50h case    2:*/		return 0x820D5A54;
		  /* 820D5A54h */ case    3:  		/* addi R10, R1, 112 */
		/* 820D5A54h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 820D5A54h case    3:*/		return 0x820D5A58;
		  /* 820D5A58h */ case    4:  		/* li R24, 0 */
		/* 820D5A58h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820D5A58h case    4:*/		return 0x820D5A5C;
		  /* 820D5A5Ch */ case    5:  		/* mr R21, R3 */
		/* 820D5A5Ch case    5:*/		regs.R21 = regs.R3;
		/* 820D5A5Ch case    5:*/		return 0x820D5A60;
		  /* 820D5A60h */ case    6:  		/* stw R24, <#[R3 + 308]> */
		/* 820D5A60h case    6:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000134) );
		/* 820D5A60h case    6:*/		return 0x820D5A64;
		  /* 820D5A64h */ case    7:  		/* mr R27, R4 */
		/* 820D5A64h case    7:*/		regs.R27 = regs.R4;
		/* 820D5A64h case    7:*/		return 0x820D5A68;
		  /* 820D5A68h */ case    8:  		/* lwz R11, <#[R4 + 100]> */
		/* 820D5A68h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000064) );
		/* 820D5A68h case    8:*/		return 0x820D5A6C;
		  /* 820D5A6Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820D5A6Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D5A6Ch case    9:*/		return 0x820D5A70;
		  /* 820D5A70h */ case   10:  		/* std R24, <#[R10]> */
		/* 820D5A70h case   10:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R10 + 0x00000000) );
		/* 820D5A70h case   10:*/		return 0x820D5A74;
		  /* 820D5A74h */ case   11:  		/* stw R24, <#[R10 + 8]> */
		/* 820D5A74h case   11:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x00000008) );
		/* 820D5A74h case   11:*/		return 0x820D5A78;
		  /* 820D5A78h */ case   12:  		/* lwz R10, <#[R1 + 120]> */
		/* 820D5A78h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D5A78h case   12:*/		return 0x820D5A7C;
		  /* 820D5A7Ch */ case   13:  		/* oris R8, R10, 57344 */
		/* 820D5A7Ch case   13:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R10,0xE000);
		/* 820D5A7Ch case   13:*/		return 0x820D5A80;
		  /* 820D5A80h */ case   14:  		/* stw R8, <#[R1 + 120]> */
		/* 820D5A80h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 820D5A80h case   14:*/		return 0x820D5A84;
		  /* 820D5A84h */ case   15:  		/* bc 12, CR6_EQ, 56 */
		/* 820D5A84h case   15:*/		if ( regs.CR[6].eq ) { return 0x820D5ABC;  }
		/* 820D5A84h case   15:*/		return 0x820D5A88;
		  /* 820D5A88h */ case   16:  		/* lwz R11, <#[R11 + 20]> */
		/* 820D5A88h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820D5A88h case   16:*/		return 0x820D5A8C;
		  /* 820D5A8Ch */ case   17:  		/* lis R10, 3328 */
		/* 820D5A8Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xD00);
		/* 820D5A8Ch case   17:*/		return 0x820D5A90;
		  /* 820D5A90h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 820D5A90h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D5A90h case   18:*/		return 0x820D5A94;
		  /* 820D5A94h */ case   19:  		/* li R11, -1 */
		/* 820D5A94h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820D5A94h case   19:*/		return 0x820D5A98;
		  /* 820D5A98h */ case   20:  		/* bc 12, CR6_EQ, 8 */
		/* 820D5A98h case   20:*/		if ( regs.CR[6].eq ) { return 0x820D5AA0;  }
		/* 820D5A98h case   20:*/		return 0x820D5A9C;
		  /* 820D5A9Ch */ case   21:  		/* li R11, 1 */
		/* 820D5A9Ch case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820D5A9Ch case   21:*/		return 0x820D5AA0;
	}
	return 0x820D5AA0;
} // Block from 820D5A48h-820D5AA0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820D5AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5AA0);
		  /* 820D5AA0h */ case    0:  		/* neg R10, R11 */
		/* 820D5AA0h case    0:*/		cpu::op::neg<0>(regs,&regs.R10,regs.R11);
		/* 820D5AA0h case    0:*/		return 0x820D5AA4;
		  /* 820D5AA4h */ case    1:  		/* lwz R9, <#[R1 + 116]> */
		/* 820D5AA4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 820D5AA4h case    1:*/		return 0x820D5AA8;
		  /* 820D5AA8h */ case    2:  		/* andc R11, R10, R11 */
		/* 820D5AA8h case    2:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820D5AA8h case    2:*/		return 0x820D5AAC;
		  /* 820D5AACh */ case    3:  		/* oris R10, R9, 4096 */
		/* 820D5AACh case    3:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x1000);
		/* 820D5AACh case    3:*/		return 0x820D5AB0;
		  /* 820D5AB0h */ case    4:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 820D5AB0h case    4:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 820D5AB0h case    4:*/		return 0x820D5AB4;
		  /* 820D5AB4h */ case    5:  		/* rlwimi R10, R11, 27, 4, 4 */
		/* 820D5AB4h case    5:*/		cpu::op::rlwimi<0,27,4,4>(regs,&regs.R10,regs.R11);
		/* 820D5AB4h case    5:*/		return 0x820D5AB8;
		  /* 820D5AB8h */ case    6:  		/* stw R10, <#[R1 + 116]> */
		/* 820D5AB8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 820D5AB8h case    6:*/		return 0x820D5ABC;
	}
	return 0x820D5ABC;
} // Block from 820D5AA0h-820D5ABCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D5ABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5ABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5ABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5ABC);
		  /* 820D5ABCh */ case    0:  		/* lis R11, -32217 */
		/* 820D5ABCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 820D5ABCh case    0:*/		return 0x820D5AC0;
		  /* 820D5AC0h */ case    1:  		/* li R28, 2 */
		/* 820D5AC0h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x2);
		/* 820D5AC0h case    1:*/		return 0x820D5AC4;
		  /* 820D5AC4h */ case    2:  		/* addi R26, R11, 11384 */
		/* 820D5AC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x2C78);
		/* 820D5AC4h case    2:*/		return 0x820D5AC8;
		  /* 820D5AC8h */ case    3:  		/* lwz R11, <#[R27 + 56]> */
		/* 820D5AC8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000038) );
		/* 820D5AC8h case    3:*/		return 0x820D5ACC;
		  /* 820D5ACCh */ case    4:  		/* addi R10, R11, -3 */
		/* 820D5ACCh case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFD);
		/* 820D5ACCh case    4:*/		return 0x820D5AD0;
		  /* 820D5AD0h */ case    5:  		/* addi R9, R11, -2 */
		/* 820D5AD0h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFE);
		/* 820D5AD0h case    5:*/		return 0x820D5AD4;
		  /* 820D5AD4h */ case    6:  		/* cntlzw R10, R10 */
		/* 820D5AD4h case    6:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 820D5AD4h case    6:*/		return 0x820D5AD8;
		  /* 820D5AD8h */ case    7:  		/* cntlzw R9, R9 */
		/* 820D5AD8h case    7:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 820D5AD8h case    7:*/		return 0x820D5ADC;
		  /* 820D5ADCh */ case    8:  		/* rlwinm R22, R10, 27, 31, 31 */
		/* 820D5ADCh case    8:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R22,regs.R10);
		/* 820D5ADCh case    8:*/		return 0x820D5AE0;
		  /* 820D5AE0h */ case    9:  		/* rlwinm R23, R9, 27, 31, 31 */
		/* 820D5AE0h case    9:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R23,regs.R9);
		/* 820D5AE0h case    9:*/		return 0x820D5AE4;
		  /* 820D5AE4h */ case   10:  		/* cmplwi CR6, R11, 2 */
		/* 820D5AE4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 820D5AE4h case   10:*/		return 0x820D5AE8;
		  /* 820D5AE8h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 820D5AE8h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D5AF4;  }
		/* 820D5AE8h case   11:*/		return 0x820D5AEC;
		  /* 820D5AECh */ case   12:  		/* cmplwi CR6, R11, 4 */
		/* 820D5AECh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 820D5AECh case   12:*/		return 0x820D5AF0;
		  /* 820D5AF0h */ case   13:  		/* bc 4, CR6_EQ, 160 */
		/* 820D5AF0h case   13:*/		if ( !regs.CR[6].eq ) { return 0x820D5B90;  }
		/* 820D5AF0h case   13:*/		return 0x820D5AF4;
	}
	return 0x820D5AF4;
} // Block from 820D5ABCh-820D5AF4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D5AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5AF4);
		  /* 820D5AF4h */ case    0:  		/* lwz R11, <#[R27 + 60]> */
		/* 820D5AF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000003C) );
		/* 820D5AF4h case    0:*/		return 0x820D5AF8;
		  /* 820D5AF8h */ case    1:  		/* cmplwi CR6, R11, 240 */
		/* 820D5AF8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000F0);
		/* 820D5AF8h case    1:*/		return 0x820D5AFC;
		  /* 820D5AFCh */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 820D5AFCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820D5B2C;  }
		/* 820D5AFCh case    2:*/		return 0x820D5B00;
		  /* 820D5B00h */ case    3:  		/* cmplwi CR6, R11, 242 */
		/* 820D5B00h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000F2);
		/* 820D5B00h case    3:*/		return 0x820D5B04;
		  /* 820D5B04h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 820D5B04h case    4:*/		if ( regs.CR[6].eq ) { return 0x820D5B1C;  }
		/* 820D5B04h case    4:*/		return 0x820D5B08;
		  /* 820D5B08h */ case    5:  		/* cmplwi CR6, R11, 244 */
		/* 820D5B08h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000F4);
		/* 820D5B08h case    5:*/		return 0x820D5B0C;
		  /* 820D5B0Ch */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 820D5B0Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x820D5B30;  }
		/* 820D5B0Ch case    6:*/		return 0x820D5B10;
		  /* 820D5B10h */ case    7:  		/* li R10, 29 */
		/* 820D5B10h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1D);
		/* 820D5B10h case    7:*/		return 0x820D5B14;
		  /* 820D5B14h */ case    8:  		/* stw R10, <#[R27 + 60]> */
		/* 820D5B14h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x0000003C) );
		/* 820D5B14h case    8:*/		return 0x820D5B18;
		  /* 820D5B18h */ case    9:  		/* b 8 */
		/* 820D5B18h case    9:*/		return 0x820D5B20;
		/* 820D5B18h case    9:*/		return 0x820D5B1C;
	}
	return 0x820D5B1C;
} // Block from 820D5AF4h-820D5B1Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D5B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5B1C);
		  /* 820D5B1Ch */ case    0:  		/* stw R28, <#[R27 + 60]> */
		/* 820D5B1Ch case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R27 + 0x0000003C) );
		/* 820D5B1Ch case    0:*/		return 0x820D5B20;
	}
	return 0x820D5B20;
} // Block from 820D5B1Ch-820D5B20h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D5B20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5B20);
		  /* 820D5B20h */ case    0:  		/* lwz R11, <#[R27 + 104]> */
		/* 820D5B20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000068) );
		/* 820D5B20h case    0:*/		return 0x820D5B24;
		  /* 820D5B24h */ case    1:  		/* stw R11, <#[R27 + 108]> */
		/* 820D5B24h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000006C) );
		/* 820D5B24h case    1:*/		return 0x820D5B28;
		  /* 820D5B28h */ case    2:  		/* b 8 */
		/* 820D5B28h case    2:*/		return 0x820D5B30;
		/* 820D5B28h case    2:*/		return 0x820D5B2C;
	}
	return 0x820D5B2C;
} // Block from 820D5B20h-820D5B2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D5B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5B2C);
		  /* 820D5B2Ch */ case    0:  		/* li R22, 1 */
		/* 820D5B2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 820D5B2Ch case    0:*/		return 0x820D5B30;
	}
	return 0x820D5B30;
} // Block from 820D5B2Ch-820D5B30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D5B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5B30);
		  /* 820D5B30h */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 820D5B30h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 820D5B30h case    0:*/		return 0x820D5B34;
		  /* 820D5B34h */ case    1:  		/* bc 4, CR0_EQ, 92 */
		/* 820D5B34h case    1:*/		if ( !regs.CR[0].eq ) { return 0x820D5B90;  }
		/* 820D5B34h case    1:*/		return 0x820D5B38;
		  /* 820D5B38h */ case    2:  		/* lwz R11, <#[R27 + 60]> */
		/* 820D5B38h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000003C) );
		/* 820D5B38h case    2:*/		return 0x820D5B3C;
		  /* 820D5B3Ch */ case    3:  		/* addi R10, R26, 52 */
		/* 820D5B3Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0x34);
		/* 820D5B3Ch case    3:*/		return 0x820D5B40;
		  /* 820D5B40h */ case    4:  		/* mr R31, R24 */
		/* 820D5B40h case    4:*/		regs.R31 = regs.R24;
		/* 820D5B40h case    4:*/		return 0x820D5B44;
		  /* 820D5B44h */ case    5:  		/* rlwimi R8, R11, 24, 3, 7 */
		/* 820D5B44h case    5:*/		cpu::op::rlwimi<0,24,3,7>(regs,&regs.R8,regs.R11);
		/* 820D5B44h case    5:*/		return 0x820D5B48;
		  /* 820D5B48h */ case    6:  		/* rlwinm R11, R8, 8, 27, 31 */
		/* 820D5B48h case    6:*/		cpu::op::rlwinm<0,8,27,31>(regs,&regs.R11,regs.R8);
		/* 820D5B48h case    6:*/		return 0x820D5B4C;
		  /* 820D5B4Ch */ case    7:  		/* stw R8, <#[R1 + 120]> */
		/* 820D5B4Ch case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 820D5B4Ch case    7:*/		return 0x820D5B50;
		  /* 820D5B50h */ case    8:  		/* lbzx R30, <#[R11 + R10]> */
		/* 820D5B50h case    8:*/		cpu::mem::load8z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820D5B50h case    8:*/		return 0x820D5B54;
		  /* 820D5B54h */ case    9:  		/* cmplwi CR0, R30, 0 */
		/* 820D5B54h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820D5B54h case    9:*/		return 0x820D5B58;
		  /* 820D5B58h */ case   10:  		/* bc 12, CR0_EQ, 56 */
		/* 820D5B58h case   10:*/		if ( regs.CR[0].eq ) { return 0x820D5B90;  }
		/* 820D5B58h case   10:*/		return 0x820D5B5C;
		  /* 820D5B5Ch */ case   11:  		/* addi R29, R27, 104 */
		/* 820D5B5Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x68);
		/* 820D5B5Ch case   11:*/		return 0x820D5B60;
		  /* 820D5B60h */ case   12:  		/* lwz R6, <#[R29]> */
		/* 820D5B60h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000000) );
		/* 820D5B60h case   12:*/		return 0x820D5B64;
		  /* 820D5B64h */ case   13:  		/* cmplwi CR6, R6, 0 */
		/* 820D5B64h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 820D5B64h case   13:*/		return 0x820D5B68;
		  /* 820D5B68h */ case   14:  		/* bc 12, CR6_EQ, 20 */
		/* 820D5B68h case   14:*/		if ( regs.CR[6].eq ) { return 0x820D5B7C;  }
		/* 820D5B68h case   14:*/		return 0x820D5B6C;
		  /* 820D5B6Ch */ case   15:  		/* mr R5, R31 */
		/* 820D5B6Ch case   15:*/		regs.R5 = regs.R31;
		/* 820D5B6Ch case   15:*/		return 0x820D5B70;
		  /* 820D5B70h */ case   16:  		/* addi R4, R1, 112 */
		/* 820D5B70h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D5B70h case   16:*/		return 0x820D5B74;
		  /* 820D5B74h */ case   17:  		/* mr R3, R21 */
		/* 820D5B74h case   17:*/		regs.R3 = regs.R21;
		/* 820D5B74h case   17:*/		return 0x820D5B78;
		  /* 820D5B78h */ case   18:  		/* bl -6808 */
		/* 820D5B78h case   18:*/		regs.LR = 0x820D5B7C; return 0x820D40E0;
		/* 820D5B78h case   18:*/		return 0x820D5B7C;
	}
	return 0x820D5B7C;
} // Block from 820D5B30h-820D5B7Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 820D5B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5B7C);
		  /* 820D5B7Ch */ case    0:  		/* addi R31, R31, 1 */
		/* 820D5B7Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820D5B7Ch case    0:*/		return 0x820D5B80;
		  /* 820D5B80h */ case    1:  		/* addi R29, R29, 4 */
		/* 820D5B80h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820D5B80h case    1:*/		return 0x820D5B84;
		  /* 820D5B84h */ case    2:  		/* cmplw CR6, R31, R30 */
		/* 820D5B84h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 820D5B84h case    2:*/		return 0x820D5B88;
		  /* 820D5B88h */ case    3:  		/* bc 12, CR6_LT, -40 */
		/* 820D5B88h case    3:*/		if ( regs.CR[6].lt ) { return 0x820D5B60;  }
		/* 820D5B88h case    3:*/		return 0x820D5B8C;
		  /* 820D5B8Ch */ case    4:  		/* lwz R8, <#[R1 + 120]> */
		/* 820D5B8Ch case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 820D5B8Ch case    4:*/		return 0x820D5B90;
	}
	return 0x820D5B90;
} // Block from 820D5B7Ch-820D5B90h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D5B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5B90);
		  /* 820D5B90h */ case    0:  		/* lwz R9, <#[R27 + 56]> */
		/* 820D5B90h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000038) );
		/* 820D5B90h case    0:*/		return 0x820D5B94;
		  /* 820D5B94h */ case    1:  		/* cmplwi CR6, R9, 3 */
		/* 820D5B94h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 820D5B94h case    1:*/		return 0x820D5B98;
		  /* 820D5B98h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 820D5B98h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D5BA4;  }
		/* 820D5B98h case    2:*/		return 0x820D5B9C;
		  /* 820D5B9Ch */ case    3:  		/* cmplwi CR6, R9, 4 */
		/* 820D5B9Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 820D5B9Ch case    3:*/		return 0x820D5BA0;
		  /* 820D5BA0h */ case    4:  		/* bc 4, CR6_EQ, 628 */
		/* 820D5BA0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820D5E14;  }
		/* 820D5BA0h case    4:*/		return 0x820D5BA4;
	}
	return 0x820D5BA4;
} // Block from 820D5B90h-820D5BA4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D5BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5BA4);
		  /* 820D5BA4h */ case    0:  		/* addi R10, R9, -3 */
		/* 820D5BA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0xFFFFFFFD);
		/* 820D5BA4h case    0:*/		return 0x820D5BA8;
		  /* 820D5BA8h */ case    1:  		/* lwz R11, <#[R27 + 64]> */
		/* 820D5BA8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000040) );
		/* 820D5BA8h case    1:*/		return 0x820D5BAC;
		  /* 820D5BACh */ case    2:  		/* subfic R10, R10, 0 */
		/* 820D5BACh case    2:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 820D5BACh case    2:*/		return 0x820D5BB0;
		  /* 820D5BB0h */ case    3:  		/* mr R10, R24 */
		/* 820D5BB0h case    3:*/		regs.R10 = regs.R24;
		/* 820D5BB0h case    3:*/		return 0x820D5BB4;
		  /* 820D5BB4h */ case    4:  		/* subfe R7, R7, R7 */
		/* 820D5BB4h case    4:*/		cpu::op::subfe<0>(regs,&regs.R7,regs.R7,regs.R7);
		/* 820D5BB4h case    4:*/		return 0x820D5BB8;
		  /* 820D5BB8h */ case    5:  		/* cmplwi CR6, R11, 241 */
		/* 820D5BB8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000F1);
		/* 820D5BB8h case    5:*/		return 0x820D5BBC;
		  /* 820D5BBCh */ case    6:  		/* and R29, R7, R28 */
		/* 820D5BBCh case    6:*/		cpu::op::and<0>(regs,&regs.R29,regs.R7,regs.R28);
		/* 820D5BBCh case    6:*/		return 0x820D5BC0;
		  /* 820D5BC0h */ case    7:  		/* addi R7, R29, 26 */
		/* 820D5BC0h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R29,0x1A);
		/* 820D5BC0h case    7:*/		return 0x820D5BC4;
		  /* 820D5BC4h */ case    8:  		/* rlwinm R25, R7, 2, 0, 29 */
		/* 820D5BC4h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R7);
		/* 820D5BC4h case    8:*/		return 0x820D5BC8;
		  /* 820D5BC8h */ case    9:  		/* lwzx R28, <#[R25 + R27]> */
		/* 820D5BC8h case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R25 + regs.R27 + 0x00000000) );
		/* 820D5BC8h case    9:*/		return 0x820D5BCC;
		  /* 820D5BCCh */ case   10:  		/* bc 12, CR6_EQ, 56 */
		/* 820D5BCCh case   10:*/		if ( regs.CR[6].eq ) { return 0x820D5C04;  }
		/* 820D5BCCh case   10:*/		return 0x820D5BD0;
		  /* 820D5BD0h */ case   11:  		/* cmplwi CR6, R11, 243 */
		/* 820D5BD0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000F3);
		/* 820D5BD0h case   11:*/		return 0x820D5BD4;
		  /* 820D5BD4h */ case   12:  		/* bc 12, CR6_EQ, 36 */
		/* 820D5BD4h case   12:*/		if ( regs.CR[6].eq ) { return 0x820D5BF8;  }
		/* 820D5BD4h case   12:*/		return 0x820D5BD8;
		  /* 820D5BD8h */ case   13:  		/* cmplwi CR6, R11, 252 */
		/* 820D5BD8h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000FC);
		/* 820D5BD8h case   13:*/		return 0x820D5BDC;
		  /* 820D5BDCh */ case   14:  		/* bc 12, CR6_EQ, 20 */
		/* 820D5BDCh case   14:*/		if ( regs.CR[6].eq ) { return 0x820D5BF0;  }
		/* 820D5BDCh case   14:*/		return 0x820D5BE0;
		  /* 820D5BE0h */ case   15:  		/* cmplwi CR6, R11, 253 */
		/* 820D5BE0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000FD);
		/* 820D5BE0h case   15:*/		return 0x820D5BE4;
		  /* 820D5BE4h */ case   16:  		/* bc 4, CR6_EQ, 36 */
		/* 820D5BE4h case   16:*/		if ( !regs.CR[6].eq ) { return 0x820D5C08;  }
		/* 820D5BE4h case   16:*/		return 0x820D5BE8;
		  /* 820D5BE8h */ case   17:  		/* li R11, 24 */
		/* 820D5BE8h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x18);
		/* 820D5BE8h case   17:*/		return 0x820D5BEC;
		  /* 820D5BECh */ case   18:  		/* b 16 */
		/* 820D5BECh case   18:*/		return 0x820D5BFC;
		/* 820D5BECh case   18:*/		return 0x820D5BF0;
	}
	return 0x820D5BF0;
} // Block from 820D5BA4h-820D5BF0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820D5BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5BF0);
		  /* 820D5BF0h */ case    0:  		/* li R11, 23 */
		/* 820D5BF0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x17);
		/* 820D5BF0h case    0:*/		return 0x820D5BF4;
		  /* 820D5BF4h */ case    1:  		/* b 8 */
		/* 820D5BF4h case    1:*/		return 0x820D5BFC;
		/* 820D5BF4h case    1:*/		return 0x820D5BF8;
	}
	return 0x820D5BF8;
} // Block from 820D5BF0h-820D5BF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D5BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5BF8);
		  /* 820D5BF8h */ case    0:  		/* li R11, 5 */
		/* 820D5BF8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 820D5BF8h case    0:*/		return 0x820D5BFC;
	}
	return 0x820D5BFC;
} // Block from 820D5BF8h-820D5BFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D5BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5BFC);
		  /* 820D5BFCh */ case    0:  		/* li R10, 1 */
		/* 820D5BFCh case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820D5BFCh case    0:*/		return 0x820D5C00;
		  /* 820D5C00h */ case    1:  		/* b 8 */
		/* 820D5C00h case    1:*/		return 0x820D5C08;
		/* 820D5C00h case    1:*/		return 0x820D5C04;
	}
	return 0x820D5C04;
} // Block from 820D5BFCh-820D5C04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D5C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5C04);
		  /* 820D5C04h */ case    0:  		/* li R23, 1 */
		/* 820D5C04h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 820D5C04h case    0:*/		return 0x820D5C08;
	}
	return 0x820D5C08;
} // Block from 820D5C04h-820D5C08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D5C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5C08);
		  /* 820D5C08h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 820D5C08h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 820D5C08h case    0:*/		return 0x820D5C0C;
		  /* 820D5C0Ch */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 820D5C0Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x820D5C40;  }
		/* 820D5C0Ch case    1:*/		return 0x820D5C10;
		  /* 820D5C10h */ case    2:  		/* lwz R10, <#[R28 + 36]> */
		/* 820D5C10h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000024) );
		/* 820D5C10h case    2:*/		return 0x820D5C14;
		  /* 820D5C14h */ case    3:  		/* rlwinm R7, R10, 0, 30, 31 */
		/* 820D5C14h case    3:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R7,regs.R10);
		/* 820D5C14h case    3:*/		return 0x820D5C18;
		  /* 820D5C18h */ case    4:  		/* mulli R7, R7, 85 */
		/* 820D5C18h case    4:*/		cpu::op::mulli<0>(regs,&regs.R7,regs.R7,0x55);
		/* 820D5C18h case    4:*/		return 0x820D5C1C;
		  /* 820D5C1Ch */ case    5:  		/* cmplw CR6, R10, R7 */
		/* 820D5C1Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 820D5C1Ch case    5:*/		return 0x820D5C20;
		  /* 820D5C20h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 820D5C20h case    6:*/		if ( regs.CR[6].eq ) { return 0x820D5C40;  }
		/* 820D5C20h case    6:*/		return 0x820D5C24;
		  /* 820D5C24h */ case    7:  		/* lis R11, -32255 */
		/* 820D5C24h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5C24h case    7:*/		return 0x820D5C28;
		  /* 820D5C28h */ case    8:  		/* addi R4, R11, 31272 */
		/* 820D5C28h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7A28);
		/* 820D5C28h case    8:*/		return 0x820D5C2C;
		  /* 820D5C2Ch */ case    9:  		/* mr R3, R21 */
		/* 820D5C2Ch case    9:*/		regs.R3 = regs.R21;
		/* 820D5C2Ch case    9:*/		return 0x820D5C30;
		  /* 820D5C30h */ case   10:  		/* bl -21320 */
		/* 820D5C30h case   10:*/		regs.LR = 0x820D5C34; return 0x820D08E8;
		/* 820D5C30h case   10:*/		return 0x820D5C34;
		  /* 820D5C34h */ case   11:  		/* lis R3, -32768 */
		/* 820D5C34h case   11:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820D5C34h case   11:*/		return 0x820D5C38;
		  /* 820D5C38h */ case   12:  		/* ori R3, R3, 16389 */
		/* 820D5C38h case   12:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820D5C38h case   12:*/		return 0x820D5C3C;
		  /* 820D5C3Ch */ case   13:  		/* b 1052 */
		/* 820D5C3Ch case   13:*/		return 0x820D6058;
		/* 820D5C3Ch case   13:*/		return 0x820D5C40;
	}
	return 0x820D5C40;
} // Block from 820D5C08h-820D5C40h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D5C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5C40);
		  /* 820D5C40h */ case    0:  		/* lwz R10, <#[R1 + 112]> */
		/* 820D5C40h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 820D5C40h case    0:*/		return 0x820D5C44;
		  /* 820D5C44h */ case    1:  		/* rlwinm. R7, R23, 0, 24, 31 */
		/* 820D5C44h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R7,regs.R23);
		/* 820D5C44h case    1:*/		return 0x820D5C48;
		  /* 820D5C48h */ case    2:  		/* rlwimi R10, R11, 26, 0, 5 */
		/* 820D5C48h case    2:*/		cpu::op::rlwimi<0,26,0,5>(regs,&regs.R10,regs.R11);
		/* 820D5C48h case    2:*/		return 0x820D5C4C;
		  /* 820D5C4Ch */ case    3:  		/* stw R10, <#[R1 + 112]> */
		/* 820D5C4Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 820D5C4Ch case    3:*/		return 0x820D5C50;
		  /* 820D5C50h */ case    4:  		/* bc 4, CR0_EQ, 456 */
		/* 820D5C50h case    4:*/		if ( !regs.CR[0].eq ) { return 0x820D5E18;  }
		/* 820D5C50h case    4:*/		return 0x820D5C54;
		  /* 820D5C54h */ case    5:  		/* cmplwi CR6, R9, 3 */
		/* 820D5C54h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 820D5C54h case    5:*/		return 0x820D5C58;
		  /* 820D5C58h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 820D5C58h case    6:*/		if ( regs.CR[6].eq ) { return 0x820D5C70;  }
		/* 820D5C58h case    6:*/		return 0x820D5C5C;
		  /* 820D5C5Ch */ case    7:  		/* lwz R9, <#[R27 + 60]> */
		/* 820D5C5Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x0000003C) );
		/* 820D5C5Ch case    7:*/		return 0x820D5C60;
		  /* 820D5C60h */ case    8:  		/* addi R7, R26, 52 */
		/* 820D5C60h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R26,0x34);
		/* 820D5C60h case    8:*/		return 0x820D5C64;
		  /* 820D5C64h */ case    9:  		/* lbzx R9, <#[R9 + R7]> */
		/* 820D5C64h case    9:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 820D5C64h case    9:*/		return 0x820D5C68;
		  /* 820D5C68h */ case   10:  		/* cmplwi CR6, R9, 3 */
		/* 820D5C68h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 820D5C68h case   10:*/		return 0x820D5C6C;
		  /* 820D5C6Ch */ case   11:  		/* bc 4, CR6_LT, 428 */
		/* 820D5C6Ch case   11:*/		if ( !regs.CR[6].lt ) { return 0x820D5E18;  }
		/* 820D5C6Ch case   11:*/		return 0x820D5C70;
	}
	return 0x820D5C70;
} // Block from 820D5C40h-820D5C70h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D5C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5C70);
		  /* 820D5C70h */ case    0:  		/* lbzx R31, <#[R11 + R26]> */
		/* 820D5C70h case    0:*/		cpu::mem::load8z( regs, &regs.R31, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 820D5C70h case    0:*/		return 0x820D5C74;
		  /* 820D5C74h */ case    1:  		/* cmplwi CR0, R31, 0 */
		/* 820D5C74h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 820D5C74h case    1:*/		return 0x820D5C78;
		  /* 820D5C78h */ case    2:  		/* bc 12, CR0_EQ, 416 */
		/* 820D5C78h case    2:*/		if ( regs.CR[0].eq ) { return 0x820D5E18;  }
		/* 820D5C78h case    2:*/		return 0x820D5C7C;
		  /* 820D5C7Ch */ case    3:  		/* lwz R11, <#[R28 + 36]> */
		/* 820D5C7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 820D5C7Ch case    3:*/		return 0x820D5C80;
		  /* 820D5C80h */ case    4:  		/* cmplwi CR6, R31, 1 */
		/* 820D5C80h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 820D5C80h case    4:*/		return 0x820D5C84;
		  /* 820D5C84h */ case    5:  		/* addi R30, R28, 36 */
		/* 820D5C84h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R28,0x24);
		/* 820D5C84h case    5:*/		return 0x820D5C88;
		  /* 820D5C88h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 820D5C88h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820D5CAC;  }
		/* 820D5C88h case    6:*/		return 0x820D5C8C;
		  /* 820D5C8Ch */ case    7:  		/* rlwinm R10, R11, 0, 30, 31 */
		/* 820D5C8Ch case    7:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R11);
		/* 820D5C8Ch case    7:*/		return 0x820D5C90;
		  /* 820D5C90h */ case    8:  		/* mulli R10, R10, 85 */
		/* 820D5C90h case    8:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x55);
		/* 820D5C90h case    8:*/		return 0x820D5C94;
		  /* 820D5C94h */ case    9:  		/* subf R11, R11, R10 */
		/* 820D5C94h case    9:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820D5C94h case    9:*/		return 0x820D5C98;
		  /* 820D5C98h */ case   10:  		/* cntlzw R11, R11 */
		/* 820D5C98h case   10:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 820D5C98h case   10:*/		return 0x820D5C9C;
		  /* 820D5C9Ch */ case   11:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 820D5C9Ch case   11:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 820D5C9Ch case   11:*/		return 0x820D5CA0;
		  /* 820D5CA0h */ case   12:  		/* cmpwi CR6, R11, 0 */
		/* 820D5CA0h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D5CA0h case   12:*/		return 0x820D5CA4;
		  /* 820D5CA4h */ case   13:  		/* bc 4, CR6_EQ, 132 */
		/* 820D5CA4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x820D5D28;  }
		/* 820D5CA4h case   13:*/		return 0x820D5CA8;
		  /* 820D5CA8h */ case   14:  		/* b -132 */
		/* 820D5CA8h case   14:*/		return 0x820D5C24;
		/* 820D5CA8h case   14:*/		return 0x820D5CAC;
	}
	return 0x820D5CAC;
} // Block from 820D5C70h-820D5CACh (15 instructions)

//////////////////////////////////////////////////////
// Block at 820D5CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5CAC);
		  /* 820D5CACh */ case    0:  		/* cmplwi CR6, R31, 2 */
		/* 820D5CACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000002);
		/* 820D5CACh case    0:*/		return 0x820D5CB0;
		  /* 820D5CB0h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 820D5CB0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820D5D04;  }
		/* 820D5CB0h case    1:*/		return 0x820D5CB4;
		  /* 820D5CB4h */ case    2:  		/* cmplwi CR6, R31, 4 */
		/* 820D5CB4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 820D5CB4h case    2:*/		return 0x820D5CB8;
		  /* 820D5CB8h */ case    3:  		/* bc 4, CR6_EQ, 96 */
		/* 820D5CB8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D5D18;  }
		/* 820D5CB8h case    3:*/		return 0x820D5CBC;
		  /* 820D5CBCh */ case    4:  		/* rlwinm R10, R11, 0, 30, 31 */
		/* 820D5CBCh case    4:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R11);
		/* 820D5CBCh case    4:*/		return 0x820D5CC0;
		  /* 820D5CC0h */ case    5:  		/* mulli R10, R10, 85 */
		/* 820D5CC0h case    5:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x55);
		/* 820D5CC0h case    5:*/		return 0x820D5CC4;
		  /* 820D5CC4h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 820D5CC4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D5CC4h case    6:*/		return 0x820D5CC8;
	}
	return 0x820D5CC8;
} // Block from 820D5CACh-820D5CC8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D5CC8h
// Function '?GetBuilder@CUAssembler@D3DXShader@@IAAPAUXMicrocodeBuilder@@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5CC8);
		  /* 820D5CC8h */ case    0:  		/* bc 4, CR6_EQ, 48 */
		/* 820D5CC8h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820D5CF8;  }
		/* 820D5CC8h case    0:*/		return 0x820D5CCC;
		  /* 820D5CCCh */ case    1:  		/* addi R11, R29, 27 */
		/* 820D5CCCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x1B);
		/* 820D5CCCh case    1:*/		return 0x820D5CD0;
		  /* 820D5CD0h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D5CD0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D5CD0h case    2:*/		return 0x820D5CD4;
		  /* 820D5CD4h */ case    3:  		/* lwzx R11, <#[R11 + R27]> */
		/* 820D5CD4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 820D5CD4h case    3:*/		return 0x820D5CD8;
		  /* 820D5CD8h */ case    4:  		/* lwz R11, <#[R11 + 36]> */
		/* 820D5CD8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 820D5CD8h case    4:*/		return 0x820D5CDC;
		  /* 820D5CDCh */ case    5:  		/* rlwinm R10, R11, 0, 30, 31 */
		/* 820D5CDCh case    5:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R11);
		/* 820D5CDCh case    5:*/		return 0x820D5CE0;
		  /* 820D5CE0h */ case    6:  		/* mulli R10, R10, 85 */
		/* 820D5CE0h case    6:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x55);
		/* 820D5CE0h case    6:*/		return 0x820D5CE4;
		  /* 820D5CE4h */ case    7:  		/* subf R11, R11, R10 */
		/* 820D5CE4h case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820D5CE4h case    7:*/		return 0x820D5CE8;
		  /* 820D5CE8h */ case    8:  		/* cntlzw R11, R11 */
		/* 820D5CE8h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 820D5CE8h case    8:*/		return 0x820D5CEC;
		  /* 820D5CECh */ case    9:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 820D5CECh case    9:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 820D5CECh case    9:*/		return 0x820D5CF0;
		  /* 820D5CF0h */ case   10:  		/* cmpwi CR6, R11, 0 */
		/* 820D5CF0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D5CF0h case   10:*/		return 0x820D5CF4;
		  /* 820D5CF4h */ case   11:  		/* bc 4, CR6_EQ, 36 */
		/* 820D5CF4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820D5D18;  }
		/* 820D5CF4h case   11:*/		return 0x820D5CF8;
	}
	return 0x820D5CF8;
} // Block from 820D5CC8h-820D5CF8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D5CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5CF8);
		  /* 820D5CF8h */ case    0:  		/* lis R11, -32255 */
		/* 820D5CF8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5CF8h case    0:*/		return 0x820D5CFC;
		  /* 820D5CFCh */ case    1:  		/* addi R4, R11, 31168 */
		/* 820D5CFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x79C0);
		/* 820D5CFCh case    1:*/		return 0x820D5D00;
		  /* 820D5D00h */ case    2:  		/* b -212 */
		/* 820D5D00h case    2:*/		return 0x820D5C2C;
		/* 820D5D00h case    2:*/		return 0x820D5D04;
	}
	return 0x820D5D04;
} // Block from 820D5CF8h-820D5D04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D5D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5D04);
		  /* 820D5D04h */ case    0:  		/* rlwinm R10, R11, 30, 30, 31 */
		/* 820D5D04h case    0:*/		cpu::op::rlwinm<0,30,30,31>(regs,&regs.R10,regs.R11);
		/* 820D5D04h case    0:*/		return 0x820D5D08;
		  /* 820D5D08h */ case    1:  		/* rlwinm R9, R11, 0, 30, 31 */
		/* 820D5D08h case    1:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R11);
		/* 820D5D08h case    1:*/		return 0x820D5D0C;
		  /* 820D5D0Ch */ case    2:  		/* mulli R10, R10, 84 */
		/* 820D5D0Ch case    2:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x54);
		/* 820D5D0Ch case    2:*/		return 0x820D5D10;
		  /* 820D5D10h */ case    3:  		/* or R10, R10, R9 */
		/* 820D5D10h case    3:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 820D5D10h case    3:*/		return 0x820D5D14;
		  /* 820D5D14h */ case    4:  		/* b -48 */
		/* 820D5D14h case    4:*/		return 0x820D5CE4;
		/* 820D5D14h case    4:*/		return 0x820D5D18;
	}
	return 0x820D5D18;
} // Block from 820D5D04h-820D5D18h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D5D18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5D18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5D18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5D18);
		  /* 820D5D18h */ case    0:  		/* mr R4, R29 */
		/* 820D5D18h case    0:*/		regs.R4 = regs.R29;
		/* 820D5D18h case    0:*/		return 0x820D5D1C;
		  /* 820D5D1Ch */ case    1:  		/* mr R3, R27 */
		/* 820D5D1Ch case    1:*/		regs.R3 = regs.R27;
		/* 820D5D1Ch case    1:*/		return 0x820D5D20;
		  /* 820D5D20h */ case    2:  		/* bl -27728 */
		/* 820D5D20h case    2:*/		regs.LR = 0x820D5D24; return 0x820CF0D0;
		/* 820D5D20h case    2:*/		return 0x820D5D24;
		  /* 820D5D24h */ case    3:  		/* stw R3, <#[R30]> */
		/* 820D5D24h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 820D5D24h case    3:*/		return 0x820D5D28;
	}
	return 0x820D5D28;
} // Block from 820D5D18h-820D5D28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D5D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5D28);
		  /* 820D5D28h */ case    0:  		/* mr R6, R28 */
		/* 820D5D28h case    0:*/		regs.R6 = regs.R28;
		/* 820D5D28h case    0:*/		return 0x820D5D2C;
		  /* 820D5D2Ch */ case    1:  		/* li R5, 2 */
		/* 820D5D2Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D5D2Ch case    1:*/		return 0x820D5D30;
		  /* 820D5D30h */ case    2:  		/* addi R4, R1, 112 */
		/* 820D5D30h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D5D30h case    2:*/		return 0x820D5D34;
		  /* 820D5D34h */ case    3:  		/* mr R3, R21 */
		/* 820D5D34h case    3:*/		regs.R3 = regs.R21;
		/* 820D5D34h case    3:*/		return 0x820D5D38;
		  /* 820D5D38h */ case    4:  		/* bl -7256 */
		/* 820D5D38h case    4:*/		regs.LR = 0x820D5D3C; return 0x820D40E0;
		/* 820D5D38h case    4:*/		return 0x820D5D3C;
		  /* 820D5D3Ch */ case    5:  		/* cmplwi CR6, R31, 4 */
		/* 820D5D3Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 820D5D3Ch case    5:*/		return 0x820D5D40;
		  /* 820D5D40h */ case    6:  		/* bc 4, CR6_EQ, 208 */
		/* 820D5D40h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820D5E10;  }
		/* 820D5D40h case    6:*/		return 0x820D5D44;
		  /* 820D5D44h */ case    7:  		/* lwz R11, <#[R28 + 16]> */
		/* 820D5D44h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 820D5D44h case    7:*/		return 0x820D5D48;
		  /* 820D5D48h */ case    8:  		/* cmplwi CR6, R11, 2 */
		/* 820D5D48h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 820D5D48h case    8:*/		return 0x820D5D4C;
		  /* 820D5D4Ch */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 820D5D4Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x820D5D5C;  }
		/* 820D5D4Ch case    9:*/		return 0x820D5D50;
		  /* 820D5D50h */ case   10:  		/* lis R11, -32255 */
		/* 820D5D50h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5D50h case   10:*/		return 0x820D5D54;
		  /* 820D5D54h */ case   11:  		/* addi R4, R11, 31080 */
		/* 820D5D54h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7968);
		/* 820D5D54h case   11:*/		return 0x820D5D58;
		  /* 820D5D58h */ case   12:  		/* b -300 */
		/* 820D5D58h case   12:*/		return 0x820D5C2C;
		/* 820D5D58h case   12:*/		return 0x820D5D5C;
	}
	return 0x820D5D5C;
} // Block from 820D5D28h-820D5D5Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D5D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5D5C);
		  /* 820D5D5Ch */ case    0:  		/* addi R11, R29, 27 */
		/* 820D5D5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x1B);
		/* 820D5D5Ch case    0:*/		return 0x820D5D60;
		  /* 820D5D60h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D5D60h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D5D60h case    1:*/		return 0x820D5D64;
		  /* 820D5D64h */ case    2:  		/* lwzx R11, <#[R11 + R27]> */
		/* 820D5D64h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 820D5D64h case    2:*/		return 0x820D5D68;
		  /* 820D5D68h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820D5D68h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D5D68h case    3:*/		return 0x820D5D6C;
		  /* 820D5D6Ch */ case    4:  		/* bc 12, CR6_EQ, 152 */
		/* 820D5D6Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x820D5E04;  }
		/* 820D5D6Ch case    4:*/		return 0x820D5D70;
		  /* 820D5D70h */ case    5:  		/* lwz R10, <#[R11 + 16]> */
		/* 820D5D70h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 820D5D70h case    5:*/		return 0x820D5D74;
		  /* 820D5D74h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 820D5D74h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820D5D74h case    6:*/		return 0x820D5D78;
		  /* 820D5D78h */ case    7:  		/* bc 4, CR6_EQ, 140 */
		/* 820D5D78h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820D5E04;  }
		/* 820D5D78h case    7:*/		return 0x820D5D7C;
		  /* 820D5D7Ch */ case    8:  		/* lwz R9, <#[R30]> */
		/* 820D5D7Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 820D5D7Ch case    8:*/		return 0x820D5D80;
	}
	return 0x820D5D80;
} // Block from 820D5D5Ch-820D5D80h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D5D80h
// Function '?HandleNA@CUAssembler@D3DXShader@@IAAJPAVCNodeUAsmInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5D80);
		  /* 820D5D80h */ case    0:  		/* rlwinm R10, R9, 26, 30, 31 */
		/* 820D5D80h case    0:*/		cpu::op::rlwinm<0,26,30,31>(regs,&regs.R10,regs.R9);
		/* 820D5D80h case    0:*/		return 0x820D5D84;
		  /* 820D5D84h */ case    1:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 820D5D84h case    1:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 820D5D84h case    1:*/		return 0x820D5D88;
		  /* 820D5D88h */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 820D5D88h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820D5D88h case    2:*/		return 0x820D5D8C;
		  /* 820D5D8Ch */ case    3:  		/* bc 4, CR6_EQ, 40 */
		/* 820D5D8Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D5DB4;  }
		/* 820D5D8Ch case    3:*/		return 0x820D5D90;
		  /* 820D5D90h */ case    4:  		/* lis R11, -32251 */
		/* 820D5D90h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8205);
		/* 820D5D90h case    4:*/		return 0x820D5D94;
		  /* 820D5D94h */ case    5:  		/* lis R9, -32255 */
		/* 820D5D94h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 820D5D94h case    5:*/		return 0x820D5D98;
		  /* 820D5D98h */ case    6:  		/* addi R11, R11, -16264 */
		/* 820D5D98h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFC078);
		/* 820D5D98h case    6:*/		return 0x820D5D9C;
		  /* 820D5D9Ch */ case    7:  		/* addi R4, R9, 30968 */
		/* 820D5D9Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x78F8);
		/* 820D5D9Ch case    7:*/		return 0x820D5DA0;
		  /* 820D5DA0h */ case    8:  		/* mr R3, R21 */
		/* 820D5DA0h case    8:*/		regs.R3 = regs.R21;
		/* 820D5DA0h case    8:*/		return 0x820D5DA4;
		  /* 820D5DA4h */ case    9:  		/* lbzx R11, <#[R10 + R11]> */
		/* 820D5DA4h case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820D5DA4h case    9:*/		return 0x820D5DA8;
		  /* 820D5DA8h */ case   10:  		/* extsb R5, R11 */
		/* 820D5DA8h case   10:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 820D5DA8h case   10:*/		return 0x820D5DAC;
		  /* 820D5DACh */ case   11:  		/* bl -21700 */
		/* 820D5DACh case   11:*/		regs.LR = 0x820D5DB0; return 0x820D08E8;
		/* 820D5DACh case   11:*/		return 0x820D5DB0;
		  /* 820D5DB0h */ case   12:  		/* b -380 */
		/* 820D5DB0h case   12:*/		return 0x820D5C34;
		/* 820D5DB0h case   12:*/		return 0x820D5DB4;
	}
	return 0x820D5DB4;
} // Block from 820D5D80h-820D5DB4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D5DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5DB4);
		  /* 820D5DB4h */ case    0:  		/* lwzx R10, <#[R25 + R27]> */
		/* 820D5DB4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + regs.R27 + 0x00000000) );
		/* 820D5DB4h case    0:*/		return 0x820D5DB8;
		  /* 820D5DB8h */ case    1:  		/* lwz R9, <#[R11 + 20]> */
		/* 820D5DB8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 820D5DB8h case    1:*/		return 0x820D5DBC;
		  /* 820D5DBCh */ case    2:  		/* lwz R10, <#[R10 + 20]> */
		/* 820D5DBCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820D5DBCh case    2:*/		return 0x820D5DC0;
		  /* 820D5DC0h */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 820D5DC0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820D5DC0h case    3:*/		return 0x820D5DC4;
		  /* 820D5DC4h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 820D5DC4h case    4:*/		if ( regs.CR[6].eq ) { return 0x820D5DD4;  }
		/* 820D5DC4h case    4:*/		return 0x820D5DC8;
		  /* 820D5DC8h */ case    5:  		/* lis R11, -32255 */
		/* 820D5DC8h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5DC8h case    5:*/		return 0x820D5DCC;
		  /* 820D5DCCh */ case    6:  		/* addi R4, R11, 30856 */
		/* 820D5DCCh case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7888);
		/* 820D5DCCh case    6:*/		return 0x820D5DD0;
		  /* 820D5DD0h */ case    7:  		/* b -420 */
		/* 820D5DD0h case    7:*/		return 0x820D5C2C;
		/* 820D5DD0h case    7:*/		return 0x820D5DD4;
	}
	return 0x820D5DD4;
} // Block from 820D5DB4h-820D5DD4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D5DD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5DD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5DD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5DD4);
		  /* 820D5DD4h */ case    0:  		/* lwz R11, <#[R11 + 24]> */
		/* 820D5DD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820D5DD4h case    0:*/		return 0x820D5DD8;
		  /* 820D5DD8h */ case    1:  		/* lwz R9, <#[R1 + 116]> */
		/* 820D5DD8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 820D5DD8h case    1:*/		return 0x820D5DDC;
		  /* 820D5DDCh */ case    2:  		/* lwz R8, <#[R1 + 120]> */
		/* 820D5DDCh case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 820D5DDCh case    2:*/		return 0x820D5DE0;
		  /* 820D5DE0h */ case    3:  		/* mr R7, R11 */
		/* 820D5DE0h case    3:*/		regs.R7 = regs.R11;
		/* 820D5DE0h case    3:*/		return 0x820D5DE4;
		  /* 820D5DE4h */ case    4:  		/* lwz R10, <#[R1 + 112]> */
		/* 820D5DE4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 820D5DE4h case    4:*/		return 0x820D5DE8;
		  /* 820D5DE8h */ case    5:  		/* rlwimi R7, R9, 0, 30, 25 */
		/* 820D5DE8h case    5:*/		cpu::op::rlwimi<0,0,30,25>(regs,&regs.R7,regs.R9);
		/* 820D5DE8h case    5:*/		return 0x820D5DEC;
		  /* 820D5DECh */ case    6:  		/* rlwimi R8, R11, 28, 2, 2 */
		/* 820D5DECh case    6:*/		cpu::op::rlwimi<0,28,2,2>(regs,&regs.R8,regs.R11);
		/* 820D5DECh case    6:*/		return 0x820D5DF0;
		  /* 820D5DF0h */ case    7:  		/* rlwimi R10, R11, 26, 5, 5 */
		/* 820D5DF0h case    7:*/		cpu::op::rlwimi<0,26,5,5>(regs,&regs.R10,regs.R11);
		/* 820D5DF0h case    7:*/		return 0x820D5DF4;
		  /* 820D5DF4h */ case    8:  		/* stw R7, <#[R1 + 116]> */
		/* 820D5DF4h case    8:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000074) );
		/* 820D5DF4h case    8:*/		return 0x820D5DF8;
		  /* 820D5DF8h */ case    9:  		/* stw R8, <#[R1 + 120]> */
		/* 820D5DF8h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 820D5DF8h case    9:*/		return 0x820D5DFC;
		  /* 820D5DFCh */ case   10:  		/* stw R10, <#[R1 + 112]> */
		/* 820D5DFCh case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 820D5DFCh case   10:*/		return 0x820D5E00;
		  /* 820D5E00h */ case   11:  		/* b 24 */
		/* 820D5E00h case   11:*/		return 0x820D5E18;
		/* 820D5E00h case   11:*/		return 0x820D5E04;
	}
	return 0x820D5E04;
} // Block from 820D5DD4h-820D5E04h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D5E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5E04);
		  /* 820D5E04h */ case    0:  		/* lis R11, -32255 */
		/* 820D5E04h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5E04h case    0:*/		return 0x820D5E08;
		  /* 820D5E08h */ case    1:  		/* addi R4, R11, 30768 */
		/* 820D5E08h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7830);
		/* 820D5E08h case    1:*/		return 0x820D5E0C;
		  /* 820D5E0Ch */ case    2:  		/* b -480 */
		/* 820D5E0Ch case    2:*/		return 0x820D5C2C;
		/* 820D5E0Ch case    2:*/		return 0x820D5E10;
	}
	return 0x820D5E10;
} // Block from 820D5E04h-820D5E10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D5E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5E10);
		  /* 820D5E10h */ case    0:  		/* lwz R8, <#[R1 + 120]> */
		/* 820D5E10h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 820D5E10h case    0:*/		return 0x820D5E14;
	}
	return 0x820D5E14;
} // Block from 820D5E10h-820D5E14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D5E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5E14);
		  /* 820D5E14h */ case    0:  		/* lwz R10, <#[R1 + 112]> */
		/* 820D5E14h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 820D5E14h case    0:*/		return 0x820D5E18;
	}
	return 0x820D5E18;
} // Block from 820D5E14h-820D5E18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D5E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5E18);
		  /* 820D5E18h */ case    0:  		/* rlwinm. R11, R23, 0, 24, 31 */
		/* 820D5E18h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R23);
		/* 820D5E18h case    0:*/		return 0x820D5E1C;
		  /* 820D5E1Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 820D5E1Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x820D5E2C;  }
		/* 820D5E1Ch case    1:*/		return 0x820D5E20;
		  /* 820D5E20h */ case    2:  		/* rlwinm R11, R10, 0, 6, 31 */
		/* 820D5E20h case    2:*/		cpu::op::rlwinm<0,0,6,31>(regs,&regs.R11,regs.R10);
		/* 820D5E20h case    2:*/		return 0x820D5E24;
		  /* 820D5E24h */ case    3:  		/* oris R11, R11, 51200 */
		/* 820D5E24h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xC800);
		/* 820D5E24h case    3:*/		return 0x820D5E28;
		  /* 820D5E28h */ case    4:  		/* stw R11, <#[R1 + 112]> */
		/* 820D5E28h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820D5E28h case    4:*/		return 0x820D5E2C;
	}
	return 0x820D5E2C;
} // Block from 820D5E18h-820D5E2Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D5E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5E2C);
		  /* 820D5E2Ch */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 820D5E2Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 820D5E2Ch case    0:*/		return 0x820D5E30;
		  /* 820D5E30h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 820D5E30h case    1:*/		if ( regs.CR[0].eq ) { return 0x820D5E40;  }
		/* 820D5E30h case    1:*/		return 0x820D5E34;
		  /* 820D5E34h */ case    2:  		/* li R11, 1 */
		/* 820D5E34h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820D5E34h case    2:*/		return 0x820D5E38;
		  /* 820D5E38h */ case    3:  		/* rlwimi R8, R11, 25, 3, 7 */
		/* 820D5E38h case    3:*/		cpu::op::rlwimi<0,25,3,7>(regs,&regs.R8,regs.R11);
		/* 820D5E38h case    3:*/		return 0x820D5E3C;
		  /* 820D5E3Ch */ case    4:  		/* stw R8, <#[R1 + 120]> */
		/* 820D5E3Ch case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 820D5E3Ch case    4:*/		return 0x820D5E40;
	}
	return 0x820D5E40;
} // Block from 820D5E2Ch-820D5E40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D5E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5E40);
		  /* 820D5E40h */ case    0:  		/* mr R5, R27 */
		/* 820D5E40h case    0:*/		regs.R5 = regs.R27;
		/* 820D5E40h case    0:*/		return 0x820D5E44;
		  /* 820D5E44h */ case    1:  		/* addi R4, R1, 112 */
		/* 820D5E44h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D5E44h case    1:*/		return 0x820D5E48;
		  /* 820D5E48h */ case    2:  		/* mr R3, R21 */
		/* 820D5E48h case    2:*/		regs.R3 = regs.R21;
		/* 820D5E48h case    2:*/		return 0x820D5E4C;
		  /* 820D5E4Ch */ case    3:  		/* bl -7156 */
		/* 820D5E4Ch case    3:*/		regs.LR = 0x820D5E50; return 0x820D4258;
		/* 820D5E4Ch case    3:*/		return 0x820D5E50;
		  /* 820D5E50h */ case    4:  		/* addi R10, R1, 128 */
		/* 820D5E50h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 820D5E50h case    4:*/		return 0x820D5E54;
		  /* 820D5E54h */ case    5:  		/* addi R11, R1, 128 */
		/* 820D5E54h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 820D5E54h case    5:*/		return 0x820D5E58;
		  /* 820D5E58h */ case    6:  		/* lwz R5, <#[R27 + 56]> */
		/* 820D5E58h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000038) );
		/* 820D5E58h case    6:*/		return 0x820D5E5C;
		  /* 820D5E5Ch */ case    7:  		/* mr R28, R24 */
		/* 820D5E5Ch case    7:*/		regs.R28 = regs.R24;
		/* 820D5E5Ch case    7:*/		return 0x820D5E60;
		  /* 820D5E60h */ case    8:  		/* mr R31, R24 */
		/* 820D5E60h case    8:*/		regs.R31 = regs.R24;
		/* 820D5E60h case    8:*/		return 0x820D5E64;
		  /* 820D5E64h */ case    9:  		/* mr R29, R24 */
		/* 820D5E64h case    9:*/		regs.R29 = regs.R24;
		/* 820D5E64h case    9:*/		return 0x820D5E68;
		  /* 820D5E68h */ case   10:  		/* std R24, <#[R10]> */
		/* 820D5E68h case   10:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R10 + 0x00000000) );
		/* 820D5E68h case   10:*/		return 0x820D5E6C;
		  /* 820D5E6Ch */ case   11:  		/* mr R7, R24 */
		/* 820D5E6Ch case   11:*/		regs.R7 = regs.R24;
		/* 820D5E6Ch case   11:*/		return 0x820D5E70;
		  /* 820D5E70h */ case   12:  		/* stw R24, <#[R10 + 8]> */
		/* 820D5E70h case   12:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x00000008) );
		/* 820D5E70h case   12:*/		return 0x820D5E74;
		  /* 820D5E74h */ case   13:  		/* mr R6, R24 */
		/* 820D5E74h case   13:*/		regs.R6 = regs.R24;
		/* 820D5E74h case   13:*/		return 0x820D5E78;
		  /* 820D5E78h */ case   14:  		/* mr R9, R24 */
		/* 820D5E78h case   14:*/		regs.R9 = regs.R24;
		/* 820D5E78h case   14:*/		return 0x820D5E7C;
		  /* 820D5E7Ch */ case   15:  		/* addi R8, R11, -4 */
		/* 820D5E7Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFC);
		/* 820D5E7Ch case   15:*/		return 0x820D5E80;
		  /* 820D5E80h */ case   16:  		/* cmplwi CR6, R5, 3 */
		/* 820D5E80h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000003);
		/* 820D5E80h case   16:*/		return 0x820D5E84;
		  /* 820D5E84h */ case   17:  		/* bc 4, CR6_EQ, 20 */
		/* 820D5E84h case   17:*/		if ( !regs.CR[6].eq ) { return 0x820D5E98;  }
		/* 820D5E84h case   17:*/		return 0x820D5E88;
		  /* 820D5E88h */ case   18:  		/* cmpwi CR6, R9, 2 */
		/* 820D5E88h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000002);
		/* 820D5E88h case   18:*/		return 0x820D5E8C;
		  /* 820D5E8Ch */ case   19:  		/* bc 4, CR6_EQ, 136 */
		/* 820D5E8Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x820D5F14;  }
		/* 820D5E8Ch case   19:*/		return 0x820D5E90;
		  /* 820D5E90h */ case   20:  		/* lwz R11, <#[R27 + 104]> */
		/* 820D5E90h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000068) );
		/* 820D5E90h case   20:*/		return 0x820D5E94;
		  /* 820D5E94h */ case   21:  		/* b 16 */
		/* 820D5E94h case   21:*/		return 0x820D5EA4;
		/* 820D5E94h case   21:*/		return 0x820D5E98;
	}
	return 0x820D5E98;
} // Block from 820D5E40h-820D5E98h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820D5E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5E98);
		  /* 820D5E98h */ case    0:  		/* addi R11, R9, 26 */
		/* 820D5E98h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x1A);
		/* 820D5E98h case    0:*/		return 0x820D5E9C;
		  /* 820D5E9Ch */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D5E9Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D5E9Ch case    1:*/		return 0x820D5EA0;
		  /* 820D5EA0h */ case    2:  		/* lwzx R11, <#[R11 + R27]> */
		/* 820D5EA0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 820D5EA0h case    2:*/		return 0x820D5EA4;
	}
	return 0x820D5EA4;
} // Block from 820D5E98h-820D5EA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D5EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5EA4);
		  /* 820D5EA4h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 820D5EA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D5EA4h case    0:*/		return 0x820D5EA8;
		  /* 820D5EA8h */ case    1:  		/* bc 12, CR6_EQ, 108 */
		/* 820D5EA8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820D5F14;  }
		/* 820D5EA8h case    1:*/		return 0x820D5EAC;
		  /* 820D5EACh */ case    2:  		/* lwz R10, <#[R11 + 16]> */
		/* 820D5EACh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 820D5EACh case    2:*/		return 0x820D5EB0;
		  /* 820D5EB0h */ case    3:  		/* cmplwi CR6, R10, 2 */
		/* 820D5EB0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 820D5EB0h case    3:*/		return 0x820D5EB4;
		  /* 820D5EB4h */ case    4:  		/* bc 4, CR6_EQ, 96 */
		/* 820D5EB4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820D5F14;  }
		/* 820D5EB4h case    4:*/		return 0x820D5EB8;
		  /* 820D5EB8h */ case    5:  		/* lwz R10, <#[R11 + 20]> */
		/* 820D5EB8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 820D5EB8h case    5:*/		return 0x820D5EBC;
		  /* 820D5EBCh */ case    6:  		/* lis R4, 2816 */
		/* 820D5EBCh case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0xB00);
		/* 820D5EBCh case    6:*/		return 0x820D5EC0;
		  /* 820D5EC0h */ case    7:  		/* cmplw CR6, R10, R4 */
		/* 820D5EC0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 820D5EC0h case    7:*/		return 0x820D5EC4;
		  /* 820D5EC4h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 820D5EC4h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D5EDC;  }
		/* 820D5EC4h case    8:*/		return 0x820D5EC8;
		  /* 820D5EC8h */ case    9:  		/* lis R4, 3072 */
		/* 820D5EC8h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0xC00);
		/* 820D5EC8h case    9:*/		return 0x820D5ECC;
		  /* 820D5ECCh */ case   10:  		/* cmplw CR6, R10, R4 */
		/* 820D5ECCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 820D5ECCh case   10:*/		return 0x820D5ED0;
		  /* 820D5ED0h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 820D5ED0h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D5EDC;  }
		/* 820D5ED0h case   11:*/		return 0x820D5ED4;
		  /* 820D5ED4h */ case   12:  		/* addi R6, R6, 1 */
		/* 820D5ED4h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820D5ED4h case   12:*/		return 0x820D5ED8;
		  /* 820D5ED8h */ case   13:  		/* b 8 */
		/* 820D5ED8h case   13:*/		return 0x820D5EE0;
		/* 820D5ED8h case   13:*/		return 0x820D5EDC;
	}
	return 0x820D5EDC;
} // Block from 820D5EA4h-820D5EDCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D5EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5EDC);
		  /* 820D5EDCh */ case    0:  		/* addi R7, R7, 1 */
		/* 820D5EDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 820D5EDCh case    0:*/		return 0x820D5EE0;
	}
	return 0x820D5EE0;
} // Block from 820D5EDCh-820D5EE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D5EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5EE0);
		  /* 820D5EE0h */ case    0:  		/* lwz R10, <#[R11 + 40]> */
		/* 820D5EE0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 820D5EE0h case    0:*/		return 0x820D5EE4;
		  /* 820D5EE4h */ case    1:  		/* mr R11, R24 */
		/* 820D5EE4h case    1:*/		regs.R11 = regs.R24;
		/* 820D5EE4h case    1:*/		return 0x820D5EE8;
		  /* 820D5EE8h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 820D5EE8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820D5EE8h case    2:*/		return 0x820D5EEC;
		  /* 820D5EECh */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 820D5EECh case    3:*/		if ( regs.CR[6].eq ) { return 0x820D5F0C;  }
		/* 820D5EECh case    3:*/		return 0x820D5EF0;
		  /* 820D5EF0h */ case    4:  		/* lwz R11, <#[R10 + 16]> */
		/* 820D5EF0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 820D5EF0h case    4:*/		return 0x820D5EF4;
		  /* 820D5EF4h */ case    5:  		/* cmplwi CR6, R11, 15 */
		/* 820D5EF4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 820D5EF4h case    5:*/		return 0x820D5EF8;
		  /* 820D5EF8h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 820D5EF8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820D5F04;  }
		/* 820D5EF8h case    6:*/		return 0x820D5EFC;
		  /* 820D5EFCh */ case    7:  		/* addi R31, R31, 1 */
		/* 820D5EFCh case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820D5EFCh case    7:*/		return 0x820D5F00;
		  /* 820D5F00h */ case    8:  		/* b 8 */
		/* 820D5F00h case    8:*/		return 0x820D5F08;
		/* 820D5F00h case    8:*/		return 0x820D5F04;
	}
	return 0x820D5F04;
} // Block from 820D5EE0h-820D5F04h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D5F04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5F04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5F04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5F04);
		  /* 820D5F04h */ case    0:  		/* addi R28, R28, 1 */
		/* 820D5F04h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 820D5F04h case    0:*/		return 0x820D5F08;
	}
	return 0x820D5F08;
} // Block from 820D5F04h-820D5F08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D5F08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5F08);
		  /* 820D5F08h */ case    0:  		/* li R11, 1 */
		/* 820D5F08h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820D5F08h case    0:*/		return 0x820D5F0C;
	}
	return 0x820D5F0C;
} // Block from 820D5F08h-820D5F0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D5F0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5F0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5F0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5F0C);
		  /* 820D5F0Ch */ case    0:  		/* stwu R11, <#[R8 + 4]> */
		/* 820D5F0Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 820D5F0Ch case    0:*/		return 0x820D5F10;
		  /* 820D5F10h */ case    1:  		/* addi R29, R29, 1 */
		/* 820D5F10h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820D5F10h case    1:*/		return 0x820D5F14;
	}
	return 0x820D5F14;
} // Block from 820D5F0Ch-820D5F14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D5F14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5F14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5F14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5F14);
		  /* 820D5F14h */ case    0:  		/* addi R9, R9, 1 */
		/* 820D5F14h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820D5F14h case    0:*/		return 0x820D5F18;
		  /* 820D5F18h */ case    1:  		/* cmpwi CR6, R9, 3 */
		/* 820D5F18h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000003);
		/* 820D5F18h case    1:*/		return 0x820D5F1C;
		  /* 820D5F1Ch */ case    2:  		/* bc 12, CR6_LT, -156 */
		/* 820D5F1Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x820D5E80;  }
		/* 820D5F1Ch case    2:*/		return 0x820D5F20;
		  /* 820D5F20h */ case    3:  		/* cmplwi CR6, R7, 0 */
		/* 820D5F20h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 820D5F20h case    3:*/		return 0x820D5F24;
		  /* 820D5F24h */ case    4:  		/* bc 12, CR6_EQ, 44 */
		/* 820D5F24h case    4:*/		if ( regs.CR[6].eq ) { return 0x820D5F50;  }
		/* 820D5F24h case    4:*/		return 0x820D5F28;
		  /* 820D5F28h */ case    5:  		/* cmplwi CR6, R6, 0 */
		/* 820D5F28h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 820D5F28h case    5:*/		return 0x820D5F2C;
		  /* 820D5F2Ch */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 820D5F2Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x820D5F44;  }
		/* 820D5F2Ch case    6:*/		return 0x820D5F30;
		  /* 820D5F30h */ case    7:  		/* lis R11, -32255 */
		/* 820D5F30h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5F30h case    7:*/		return 0x820D5F34;
		  /* 820D5F34h */ case    8:  		/* mr R3, R21 */
		/* 820D5F34h case    8:*/		regs.R3 = regs.R21;
		/* 820D5F34h case    8:*/		return 0x820D5F38;
		  /* 820D5F38h */ case    9:  		/* addi R4, R11, 30632 */
		/* 820D5F38h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x77A8);
		/* 820D5F38h case    9:*/		return 0x820D5F3C;
		  /* 820D5F3Ch */ case   10:  		/* bl -22100 */
		/* 820D5F3Ch case   10:*/		regs.LR = 0x820D5F40; return 0x820D08E8;
		/* 820D5F3Ch case   10:*/		return 0x820D5F40;
		  /* 820D5F40h */ case   11:  		/* b 16 */
		/* 820D5F40h case   11:*/		return 0x820D5F50;
		/* 820D5F40h case   11:*/		return 0x820D5F44;
	}
	return 0x820D5F44;
} // Block from 820D5F14h-820D5F44h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D5F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5F44);
		  /* 820D5F44h */ case    0:  		/* lwz R11, <#[R1 + 112]> */
		/* 820D5F44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820D5F44h case    0:*/		return 0x820D5F48;
		  /* 820D5F48h */ case    1:  		/* ori R11, R11, 128 */
		/* 820D5F48h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x80);
		/* 820D5F48h case    1:*/		return 0x820D5F4C;
		  /* 820D5F4Ch */ case    2:  		/* stw R11, <#[R1 + 112]> */
		/* 820D5F4Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820D5F4Ch case    2:*/		return 0x820D5F50;
	}
	return 0x820D5F50;
} // Block from 820D5F44h-820D5F50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D5F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5F50);
		  /* 820D5F50h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820D5F50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820D5F50h case    0:*/		return 0x820D5F54;
		  /* 820D5F54h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820D5F54h case    1:*/		if ( regs.CR[6].eq ) { return 0x820D5F70;  }
		/* 820D5F54h case    1:*/		return 0x820D5F58;
		  /* 820D5F58h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 820D5F58h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820D5F58h case    2:*/		return 0x820D5F5C;
		  /* 820D5F5Ch */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 820D5F5Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820D5F70;  }
		/* 820D5F5Ch case    3:*/		return 0x820D5F60;
		  /* 820D5F60h */ case    4:  		/* lis R11, -32255 */
		/* 820D5F60h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5F60h case    4:*/		return 0x820D5F64;
		  /* 820D5F64h */ case    5:  		/* mr R3, R21 */
		/* 820D5F64h case    5:*/		regs.R3 = regs.R21;
		/* 820D5F64h case    5:*/		return 0x820D5F68;
		  /* 820D5F68h */ case    6:  		/* addi R4, R11, 30512 */
		/* 820D5F68h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7730);
		/* 820D5F68h case    6:*/		return 0x820D5F6C;
		  /* 820D5F6Ch */ case    7:  		/* bl -22148 */
		/* 820D5F6Ch case    7:*/		regs.LR = 0x820D5F70; return 0x820D08E8;
		/* 820D5F6Ch case    7:*/		return 0x820D5F70;
	}
	return 0x820D5F70;
} // Block from 820D5F50h-820D5F70h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D5F70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5F70);
		  /* 820D5F70h */ case    0:  		/* lwz R30, <#[R1 + 136]> */
		/* 820D5F70h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000088) );
		/* 820D5F70h case    0:*/		return 0x820D5F74;
		  /* 820D5F74h */ case    1:  		/* cmplwi CR6, R29, 3 */
		/* 820D5F74h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 820D5F74h case    1:*/		return 0x820D5F78;
		  /* 820D5F78h */ case    2:  		/* lwz R31, <#[R1 + 132]> */
		/* 820D5F78h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000084) );
		/* 820D5F78h case    2:*/		return 0x820D5F7C;
		  /* 820D5F7Ch */ case    3:  		/* bc 4, CR6_EQ, 44 */
		/* 820D5F7Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D5FA8;  }
		/* 820D5F7Ch case    3:*/		return 0x820D5F80;
		  /* 820D5F80h */ case    4:  		/* cmplw CR6, R31, R30 */
		/* 820D5F80h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 820D5F80h case    4:*/		return 0x820D5F84;
		  /* 820D5F84h */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 820D5F84h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D5FA8;  }
		/* 820D5F84h case    5:*/		return 0x820D5F88;
		  /* 820D5F88h */ case    6:  		/* cmpwi CR6, R31, -1 */
		/* 820D5F88h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R31,0xFFFFFFFF);
		/* 820D5F88h case    6:*/		return 0x820D5F8C;
		  /* 820D5F8Ch */ case    7:  		/* bc 12, CR6_EQ, 28 */
		/* 820D5F8Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x820D5FA8;  }
		/* 820D5F8Ch case    7:*/		return 0x820D5F90;
		  /* 820D5F90h */ case    8:  		/* cmpwi CR6, R30, -1 */
		/* 820D5F90h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R30,0xFFFFFFFF);
		/* 820D5F90h case    8:*/		return 0x820D5F94;
		  /* 820D5F94h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 820D5F94h case    9:*/		if ( regs.CR[6].eq ) { return 0x820D5FA8;  }
		/* 820D5F94h case    9:*/		return 0x820D5F98;
		  /* 820D5F98h */ case   10:  		/* lis R11, -32255 */
		/* 820D5F98h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D5F98h case   10:*/		return 0x820D5F9C;
		  /* 820D5F9Ch */ case   11:  		/* mr R3, R21 */
		/* 820D5F9Ch case   11:*/		regs.R3 = regs.R21;
		/* 820D5F9Ch case   11:*/		return 0x820D5FA0;
		  /* 820D5FA0h */ case   12:  		/* addi R4, R11, 30376 */
		/* 820D5FA0h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x76A8);
		/* 820D5FA0h case   12:*/		return 0x820D5FA4;
		  /* 820D5FA4h */ case   13:  		/* bl -22204 */
		/* 820D5FA4h case   13:*/		regs.LR = 0x820D5FA8; return 0x820D08E8;
		/* 820D5FA4h case   13:*/		return 0x820D5FA8;
	}
	return 0x820D5FA8;
} // Block from 820D5F70h-820D5FA8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D5FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5FA8);
		  /* 820D5FA8h */ case    0:  		/* lwz R10, <#[R1 + 128]> */
		/* 820D5FA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 820D5FA8h case    0:*/		return 0x820D5FAC;
		  /* 820D5FACh */ case    1:  		/* addic R9, R28, -1 */
		/* 820D5FACh case    1:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R28,0xFFFFFFFF);
		/* 820D5FACh case    1:*/		return 0x820D5FB0;
		  /* 820D5FB0h */ case    2:  		/* lwz R11, <#[R1 + 116]> */
		/* 820D5FB0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820D5FB0h case    2:*/		return 0x820D5FB4;
		  /* 820D5FB4h */ case    3:  		/* cmpwi CR6, R31, -1 */
		/* 820D5FB4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R31,0xFFFFFFFF);
		/* 820D5FB4h case    3:*/		return 0x820D5FB8;
		  /* 820D5FB8h */ case    4:  		/* addi R10, R10, -1 */
		/* 820D5FB8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 820D5FB8h case    4:*/		return 0x820D5FBC;
		  /* 820D5FBCh */ case    5:  		/* subfe R9, R9, R28 */
		/* 820D5FBCh case    5:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R28);
		/* 820D5FBCh case    5:*/		return 0x820D5FC0;
		  /* 820D5FC0h */ case    6:  		/* cntlzw R10, R10 */
		/* 820D5FC0h case    6:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 820D5FC0h case    6:*/		return 0x820D5FC4;
		  /* 820D5FC4h */ case    7:  		/* rlwimi R9, R10, 29, 29, 29 */
		/* 820D5FC4h case    7:*/		cpu::op::rlwimi<0,29,29,29>(regs,&regs.R9,regs.R10);
		/* 820D5FC4h case    7:*/		return 0x820D5FC8;
		  /* 820D5FC8h */ case    8:  		/* rlwimi R11, R9, 29, 0, 0 */
		/* 820D5FC8h case    8:*/		cpu::op::rlwimi<0,29,0,0>(regs,&regs.R11,regs.R9);
		/* 820D5FC8h case    8:*/		return 0x820D5FCC;
		  /* 820D5FCCh */ case    9:  		/* rlwimi R11, R9, 29, 2, 2 */
		/* 820D5FCCh case    9:*/		cpu::op::rlwimi<0,29,2,2>(regs,&regs.R11,regs.R9);
		/* 820D5FCCh case    9:*/		return 0x820D5FD0;
		  /* 820D5FD0h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 820D5FD0h case   10:*/		if ( regs.CR[6].eq ) { return 0x820D5FDC;  }
		/* 820D5FD0h case   10:*/		return 0x820D5FD4;
		  /* 820D5FD4h */ case   11:  		/* mr R10, R31 */
		/* 820D5FD4h case   11:*/		regs.R10 = regs.R31;
		/* 820D5FD4h case   11:*/		return 0x820D5FD8;
		  /* 820D5FD8h */ case   12:  		/* b 16 */
		/* 820D5FD8h case   12:*/		return 0x820D5FE8;
		/* 820D5FD8h case   12:*/		return 0x820D5FDC;
	}
	return 0x820D5FDC;
} // Block from 820D5FA8h-820D5FDCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D5FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5FDC);
		  /* 820D5FDCh */ case    0:  		/* addi R10, R30, -1 */
		/* 820D5FDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFFF);
		/* 820D5FDCh case    0:*/		return 0x820D5FE0;
		  /* 820D5FE0h */ case    1:  		/* cntlzw R10, R10 */
		/* 820D5FE0h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 820D5FE0h case    1:*/		return 0x820D5FE4;
		  /* 820D5FE4h */ case    2:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 820D5FE4h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 820D5FE4h case    2:*/		return 0x820D5FE8;
	}
	return 0x820D5FE8;
} // Block from 820D5FDCh-820D5FE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D5FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D5FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D5FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D5FE8);
		  /* 820D5FE8h */ case    0:  		/* rlwimi R11, R10, 30, 1, 1 */
		/* 820D5FE8h case    0:*/		cpu::op::rlwimi<0,30,1,1>(regs,&regs.R11,regs.R10);
		/* 820D5FE8h case    0:*/		return 0x820D5FEC;
		  /* 820D5FECh */ case    1:  		/* li R4, 1 */
		/* 820D5FECh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D5FECh case    1:*/		return 0x820D5FF0;
		  /* 820D5FF0h */ case    2:  		/* stw R11, <#[R1 + 116]> */
		/* 820D5FF0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820D5FF0h case    2:*/		return 0x820D5FF4;
		  /* 820D5FF4h */ case    3:  		/* mr R3, R21 */
		/* 820D5FF4h case    3:*/		regs.R3 = regs.R21;
		/* 820D5FF4h case    3:*/		return 0x820D5FF8;
		  /* 820D5FF8h */ case    4:  		/* bl -3440 */
		/* 820D5FF8h case    4:*/		regs.LR = 0x820D5FFC; return 0x820D5288;
		/* 820D5FF8h case    4:*/		return 0x820D5FFC;
		  /* 820D5FFCh */ case    5:  		/* addi R4, R1, 112 */
		/* 820D5FFCh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D5FFCh case    5:*/		return 0x820D6000;
		  /* 820D6000h */ case    6:  		/* mr R31, R3 */
		/* 820D6000h case    6:*/		regs.R31 = regs.R3;
		/* 820D6000h case    6:*/		return 0x820D6004;
		  /* 820D6004h */ case    7:  		/* bl -426916 */
		/* 820D6004h case    7:*/		regs.LR = 0x820D6008; return 0x8206DC60;
		/* 820D6004h case    7:*/		return 0x820D6008;
		  /* 820D6008h */ case    8:  		/* lwz R11, <#[R27 + 88]> */
		/* 820D6008h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000058) );
		/* 820D6008h case    8:*/		return 0x820D600C;
		  /* 820D600Ch */ case    9:  		/* mr R30, R3 */
		/* 820D600Ch case    9:*/		regs.R30 = regs.R3;
		/* 820D600Ch case    9:*/		return 0x820D6010;
		  /* 820D6010h */ case   10:  		/* cmpwi CR6, R11, 0 */
		/* 820D6010h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D6010h case   10:*/		return 0x820D6014;
		  /* 820D6014h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 820D6014h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D6028;  }
		/* 820D6014h case   11:*/		return 0x820D6018;
		  /* 820D6018h */ case   12:  		/* mr R4, R3 */
		/* 820D6018h case   12:*/		regs.R4 = regs.R3;
		/* 820D6018h case   12:*/		return 0x820D601C;
		  /* 820D601Ch */ case   13:  		/* li R5, 1 */
		/* 820D601Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D601Ch case   13:*/		return 0x820D6020;
		  /* 820D6020h */ case   14:  		/* mr R3, R31 */
		/* 820D6020h case   14:*/		regs.R3 = regs.R31;
		/* 820D6020h case   14:*/		return 0x820D6024;
		  /* 820D6024h */ case   15:  		/* bl -441804 */
		/* 820D6024h case   15:*/		regs.LR = 0x820D6028; return 0x8206A258;
		/* 820D6024h case   15:*/		return 0x820D6028;
	}
	return 0x820D6028;
} // Block from 820D5FE8h-820D6028h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820D6028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6028);
		  /* 820D6028h */ case    0:  		/* lwz R11, <#[R21 + 332]> */
		/* 820D6028h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000014C) );
		/* 820D6028h case    0:*/		return 0x820D602C;
		  /* 820D602Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D602Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D602Ch case    1:*/		return 0x820D6030;
		  /* 820D6030h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 820D6030h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D6054;  }
		/* 820D6030h case    2:*/		return 0x820D6034;
		  /* 820D6034h */ case    3:  		/* li R9, 0 */
		/* 820D6034h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820D6034h case    3:*/		return 0x820D6038;
		  /* 820D6038h */ case    4:  		/* lwz R7, <#[R27 + 40]> */
		/* 820D6038h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000028) );
		/* 820D6038h case    4:*/		return 0x820D603C;
		  /* 820D603Ch */ case    5:  		/* li R8, -1 */
		/* 820D603Ch case    5:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 820D603Ch case    5:*/		return 0x820D6040;
		  /* 820D6040h */ case    6:  		/* lwz R6, <#[R27 + 32]> */
		/* 820D6040h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000020) );
		/* 820D6040h case    6:*/		return 0x820D6044;
		  /* 820D6044h */ case    7:  		/* mr R5, R30 */
		/* 820D6044h case    7:*/		regs.R5 = regs.R30;
		/* 820D6044h case    7:*/		return 0x820D6048;
		  /* 820D6048h */ case    8:  		/* lwz R3, <#[R21 + 324]> */
		/* 820D6048h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000144) );
		/* 820D6048h case    8:*/		return 0x820D604C;
		  /* 820D604Ch */ case    9:  		/* li R4, 1 */
		/* 820D604Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D604Ch case    9:*/		return 0x820D6050;
		  /* 820D6050h */ case   10:  		/* bl 482056 */
		/* 820D6050h case   10:*/		regs.LR = 0x820D6054; return 0x8214BB58;
		/* 820D6050h case   10:*/		return 0x820D6054;
	}
	return 0x820D6054;
} // Block from 820D6028h-820D6054h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D6054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6054);
		  /* 820D6054h */ case    0:  		/* li R3, 0 */
		/* 820D6054h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D6054h case    0:*/		return 0x820D6058;
	}
	return 0x820D6058;
} // Block from 820D6054h-820D6058h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D6058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6058);
		  /* 820D6058h */ case    0:  		/* addi R1, R1, 240 */
		/* 820D6058h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 820D6058h case    0:*/		return 0x820D605C;
		  /* 820D605Ch */ case    1:  		/* b -282064 */
		/* 820D605Ch case    1:*/		return 0x8209128C;
		/* 820D605Ch case    1:*/		return 0x820D6060;
	}
	return 0x820D6060;
} // Block from 820D6058h-820D6060h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D6060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6060);
		  /* 820D6060h */ case    0:  		/* mfspr R12, LR */
		/* 820D6060h case    0:*/		regs.R12 = regs.LR;
		/* 820D6060h case    0:*/		return 0x820D6064;
		  /* 820D6064h */ case    1:  		/* bl -282124 */
		/* 820D6064h case    1:*/		regs.LR = 0x820D6068; return 0x82091258;
		/* 820D6064h case    1:*/		return 0x820D6068;
		  /* 820D6068h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820D6068h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820D6068h case    2:*/		return 0x820D606C;
		  /* 820D606Ch */ case    3:  		/* li R11, 0 */
		/* 820D606Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820D606Ch case    3:*/		return 0x820D6070;
		  /* 820D6070h */ case    4:  		/* lis R10, -32243 */
		/* 820D6070h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820D);
		/* 820D6070h case    4:*/		return 0x820D6074;
		  /* 820D6074h */ case    5:  		/* stw R11, <#[R3 + 308]> */
		/* 820D6074h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000134) );
		/* 820D6074h case    5:*/		return 0x820D6078;
		  /* 820D6078h */ case    6:  		/* mr R31, R3 */
		/* 820D6078h case    6:*/		regs.R31 = regs.R3;
		/* 820D6078h case    6:*/		return 0x820D607C;
		  /* 820D607Ch */ case    7:  		/* mr R9, R3 */
		/* 820D607Ch case    7:*/		regs.R9 = regs.R3;
		/* 820D607Ch case    7:*/		return 0x820D6080;
		  /* 820D6080h */ case    8:  		/* stb R11, <#[R1 + 96]> */
		/* 820D6080h case    8:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820D6080h case    8:*/		return 0x820D6084;
		  /* 820D6084h */ case    9:  		/* mr R29, R4 */
		/* 820D6084h case    9:*/		regs.R29 = regs.R4;
		/* 820D6084h case    9:*/		return 0x820D6088;
		  /* 820D6088h */ case   10:  		/* mr R3, R4 */
		/* 820D6088h case   10:*/		regs.R3 = regs.R4;
		/* 820D6088h case   10:*/		return 0x820D608C;
		  /* 820D608Ch */ case   11:  		/* addi R8, R10, 2280 */
		/* 820D608Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x8E8);
		/* 820D608Ch case   11:*/		return 0x820D6090;
		  /* 820D6090h */ case   12:  		/* addi R7, R1, 96 */
		/* 820D6090h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820D6090h case   12:*/		return 0x820D6094;
		  /* 820D6094h */ case   13:  		/* addi R6, R1, 100 */
		/* 820D6094h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x64);
		/* 820D6094h case   13:*/		return 0x820D6098;
		  /* 820D6098h */ case   14:  		/* addi R5, R1, 104 */
		/* 820D6098h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x68);
		/* 820D6098h case   14:*/		return 0x820D609C;
		  /* 820D609Ch */ case   15:  		/* addi R4, R1, 112 */
		/* 820D609Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D609Ch case   15:*/		return 0x820D60A0;
		  /* 820D60A0h */ case   16:  		/* bl -27560 */
		/* 820D60A0h case   16:*/		regs.LR = 0x820D60A4; return 0x820CF4F8;
		/* 820D60A0h case   16:*/		return 0x820D60A4;
		  /* 820D60A4h */ case   17:  		/* addi R4, R1, 112 */
		/* 820D60A4h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D60A4h case   17:*/		return 0x820D60A8;
		  /* 820D60A8h */ case   18:  		/* mr R3, R31 */
		/* 820D60A8h case   18:*/		regs.R3 = regs.R31;
		/* 820D60A8h case   18:*/		return 0x820D60AC;
		  /* 820D60ACh */ case   19:  		/* mr R5, R29 */
		/* 820D60ACh case   19:*/		regs.R5 = regs.R29;
		/* 820D60ACh case   19:*/		return 0x820D60B0;
		  /* 820D60B0h */ case   20:  		/* lwz R30, <#[R29 + 60]> */
		/* 820D60B0h case   20:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x0000003C) );
		/* 820D60B0h case   20:*/		return 0x820D60B4;
		  /* 820D60B4h */ case   21:  		/* mr R6, R30 */
		/* 820D60B4h case   21:*/		regs.R6 = regs.R30;
		/* 820D60B4h case   21:*/		return 0x820D60B8;
		  /* 820D60B8h */ case   22:  		/* bl -6336 */
		/* 820D60B8h case   22:*/		regs.LR = 0x820D60BC; return 0x820D47F8;
		/* 820D60B8h case   22:*/		return 0x820D60BC;
		  /* 820D60BCh */ case   23:  		/* cmplwi CR6, R30, 2 */
		/* 820D60BCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000002);
		/* 820D60BCh case   23:*/		return 0x820D60C0;
		  /* 820D60C0h */ case   24:  		/* bc 4, CR6_EQ, 92 */
		/* 820D60C0h case   24:*/		if ( !regs.CR[6].eq ) { return 0x820D611C;  }
		/* 820D60C0h case   24:*/		return 0x820D60C4;
		  /* 820D60C4h */ case   25:  		/* lwz R11, <#[R29 + 108]> */
		/* 820D60C4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000006C) );
		/* 820D60C4h case   25:*/		return 0x820D60C8;
		  /* 820D60C8h */ case   26:  		/* lwz R10, <#[R11 + 16]> */
		/* 820D60C8h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 820D60C8h case   26:*/		return 0x820D60CC;
		  /* 820D60CCh */ case   27:  		/* cmpwi CR6, R10, -1003 */
		/* 820D60CCh case   27:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFC15);
		/* 820D60CCh case   27:*/		return 0x820D60D0;
		  /* 820D60D0h */ case   28:  		/* bc 12, CR6_EQ, 32 */
		/* 820D60D0h case   28:*/		if ( regs.CR[6].eq ) { return 0x820D60F0;  }
		/* 820D60D0h case   28:*/		return 0x820D60D4;
		  /* 820D60D4h */ case   29:  		/* lis R11, -32255 */
		/* 820D60D4h case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D60D4h case   29:*/		return 0x820D60D8;
		  /* 820D60D8h */ case   30:  		/* mr R3, R31 */
		/* 820D60D8h case   30:*/		regs.R3 = regs.R31;
		/* 820D60D8h case   30:*/		return 0x820D60DC;
		  /* 820D60DCh */ case   31:  		/* addi R4, R11, 31428 */
		/* 820D60DCh case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7AC4);
		/* 820D60DCh case   31:*/		return 0x820D60E0;
		  /* 820D60E0h */ case   32:  		/* bl -22520 */
		/* 820D60E0h case   32:*/		regs.LR = 0x820D60E4; return 0x820D08E8;
		/* 820D60E0h case   32:*/		return 0x820D60E4;
		  /* 820D60E4h */ case   33:  		/* lis R3, -32768 */
		/* 820D60E4h case   33:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820D60E4h case   33:*/		return 0x820D60E8;
		  /* 820D60E8h */ case   34:  		/* ori R3, R3, 16389 */
		/* 820D60E8h case   34:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820D60E8h case   34:*/		return 0x820D60EC;
		  /* 820D60ECh */ case   35:  		/* b 244 */
		/* 820D60ECh case   35:*/		return 0x820D61E0;
		/* 820D60ECh case   35:*/		return 0x820D60F0;
	}
	return 0x820D60F0;
} // Block from 820D6060h-820D60F0h (36 instructions)

//////////////////////////////////////////////////////
// Block at 820D60F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D60F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D60F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D60F0);
		  /* 820D60F0h */ case    0:  		/* lwz R11, <#[R11 + 24]> */
		/* 820D60F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820D60F0h case    0:*/		return 0x820D60F4;
		  /* 820D60F4h */ case    1:  		/* li R10, 3 */
		/* 820D60F4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820D60F4h case    1:*/		return 0x820D60F8;
		  /* 820D60F8h */ case    2:  		/* lwz R9, <#[R1 + 112]> */
		/* 820D60F8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000070) );
		/* 820D60F8h case    2:*/		return 0x820D60FC;
		  /* 820D60FCh */ case    3:  		/* subfic R11, R11, 95 */
		/* 820D60FCh case    3:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x5F);
		/* 820D60FCh case    3:*/		return 0x820D6100;
		  /* 820D6100h */ case    4:  		/* divwu R8, R11, R10 */
		/* 820D6100h case    4:*/		cpu::op::divwu<0>(regs,&regs.R8,regs.R11,regs.R10);
		/* 820D6100h case    4:*/		return 0x820D6104;
		  /* 820D6104h */ case    5:  		/* divwu R10, R11, R10 */
		/* 820D6104h case    5:*/		cpu::op::divwu<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 820D6104h case    5:*/		return 0x820D6108;
		  /* 820D6108h */ case    6:  		/* mulli R8, R8, 3 */
		/* 820D6108h case    6:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R8,0x3);
		/* 820D6108h case    6:*/		return 0x820D610C;
		  /* 820D610Ch */ case    7:  		/* subf R11, R8, R11 */
		/* 820D610Ch case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820D610Ch case    7:*/		return 0x820D6110;
		  /* 820D6110h */ case    8:  		/* rlwimi R10, R11, 5, 25, 26 */
		/* 820D6110h case    8:*/		cpu::op::rlwimi<0,5,25,26>(regs,&regs.R10,regs.R11);
		/* 820D6110h case    8:*/		return 0x820D6114;
		  /* 820D6114h */ case    9:  		/* rlwimi R9, R10, 20, 5, 11 */
		/* 820D6114h case    9:*/		cpu::op::rlwimi<0,20,5,11>(regs,&regs.R9,regs.R10);
		/* 820D6114h case    9:*/		return 0x820D6118;
		  /* 820D6118h */ case   10:  		/* stw R9, <#[R1 + 112]> */
		/* 820D6118h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6118h case   10:*/		return 0x820D611C;
	}
	return 0x820D611C;
} // Block from 820D60F0h-820D611Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D611Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D611C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D611C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D611C);
		  /* 820D611Ch */ case    0:  		/* li R4, 1 */
		/* 820D611Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D611Ch case    0:*/		return 0x820D6120;
		  /* 820D6120h */ case    1:  		/* mr R3, R31 */
		/* 820D6120h case    1:*/		regs.R3 = regs.R31;
		/* 820D6120h case    1:*/		return 0x820D6124;
		  /* 820D6124h */ case    2:  		/* bl -3740 */
		/* 820D6124h case    2:*/		regs.LR = 0x820D6128; return 0x820D5288;
		/* 820D6124h case    2:*/		return 0x820D6128;
		  /* 820D6128h */ case    3:  		/* mr R28, R3 */
		/* 820D6128h case    3:*/		regs.R28 = regs.R3;
		/* 820D6128h case    3:*/		return 0x820D612C;
		  /* 820D612Ch */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 820D612Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820D612Ch case    4:*/		return 0x820D6130;
		  /* 820D6130h */ case    5:  		/* bc 4, CR6_EQ, 80 */
		/* 820D6130h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820D6180;  }
		/* 820D6130h case    5:*/		return 0x820D6134;
		  /* 820D6134h */ case    6:  		/* lwz R5, <#[R1 + 104]> */
		/* 820D6134h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000068) );
		/* 820D6134h case    6:*/		return 0x820D6138;
		  /* 820D6138h */ case    7:  		/* cmpwi CR6, R5, -1 */
		/* 820D6138h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R5,0xFFFFFFFF);
		/* 820D6138h case    7:*/		return 0x820D613C;
		  /* 820D613Ch */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 820D613Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x820D614C;  }
		/* 820D613Ch case    8:*/		return 0x820D6140;
		  /* 820D6140h */ case    9:  		/* lis R11, -32255 */
		/* 820D6140h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6140h case    9:*/		return 0x820D6144;
		  /* 820D6144h */ case   10:  		/* addi R4, R11, 22536 */
		/* 820D6144h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5808);
		/* 820D6144h case   10:*/		return 0x820D6148;
		  /* 820D6148h */ case   11:  		/* b 24 */
		/* 820D6148h case   11:*/		return 0x820D6160;
		/* 820D6148h case   11:*/		return 0x820D614C;
	}
	return 0x820D614C;
} // Block from 820D611Ch-820D614Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D614Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D614C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D614C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D614C);
		  /* 820D614Ch */ case    0:  		/* lwz R11, <#[R31 + 72]> */
		/* 820D614Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 820D614Ch case    0:*/		return 0x820D6150;
		  /* 820D6150h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 820D6150h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 820D6150h case    1:*/		return 0x820D6154;
		  /* 820D6154h */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 820D6154h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820D616C;  }
		/* 820D6154h case    2:*/		return 0x820D6158;
		  /* 820D6158h */ case    3:  		/* lis R11, -32255 */
		/* 820D6158h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6158h case    3:*/		return 0x820D615C;
		  /* 820D615Ch */ case    4:  		/* addi R4, R11, 31372 */
		/* 820D615Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7A8C);
		/* 820D615Ch case    4:*/		return 0x820D6160;
	}
	return 0x820D6160;
} // Block from 820D614Ch-820D6160h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D6160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6160);
		  /* 820D6160h */ case    0:  		/* mr R3, R31 */
		/* 820D6160h case    0:*/		regs.R3 = regs.R31;
		/* 820D6160h case    0:*/		return 0x820D6164;
		  /* 820D6164h */ case    1:  		/* bl -22652 */
		/* 820D6164h case    1:*/		regs.LR = 0x820D6168; return 0x820D08E8;
		/* 820D6164h case    1:*/		return 0x820D6168;
		  /* 820D6168h */ case    2:  		/* b 116 */
		/* 820D6168h case    2:*/		return 0x820D61DC;
		/* 820D6168h case    2:*/		return 0x820D616C;
	}
	return 0x820D616C;
} // Block from 820D6160h-820D616Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D616Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D616C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D616C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D616C);
		  /* 820D616Ch */ case    0:  		/* addi R4, R1, 112 */
		/* 820D616Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D616Ch case    0:*/		return 0x820D6170;
		  /* 820D6170h */ case    1:  		/* lwz R6, <#[R1 + 100]> */
		/* 820D6170h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000064) );
		/* 820D6170h case    1:*/		return 0x820D6174;
		  /* 820D6174h */ case    2:  		/* mr R3, R28 */
		/* 820D6174h case    2:*/		regs.R3 = regs.R28;
		/* 820D6174h case    2:*/		return 0x820D6178;
		  /* 820D6178h */ case    3:  		/* bl -427312 */
		/* 820D6178h case    3:*/		regs.LR = 0x820D617C; return 0x8206DC48;
		/* 820D6178h case    3:*/		return 0x820D617C;
		  /* 820D617Ch */ case    4:  		/* b 20 */
		/* 820D617Ch case    4:*/		return 0x820D6190;
		/* 820D617Ch case    4:*/		return 0x820D6180;
	}
	return 0x820D6180;
} // Block from 820D616Ch-820D6180h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D6180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6180);
		  /* 820D6180h */ case    0:  		/* addi R4, R1, 112 */
		/* 820D6180h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D6180h case    0:*/		return 0x820D6184;
		  /* 820D6184h */ case    1:  		/* lwz R5, <#[R1 + 100]> */
		/* 820D6184h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 820D6184h case    1:*/		return 0x820D6188;
		  /* 820D6188h */ case    2:  		/* mr R3, R28 */
		/* 820D6188h case    2:*/		regs.R3 = regs.R28;
		/* 820D6188h case    2:*/		return 0x820D618C;
		  /* 820D618Ch */ case    3:  		/* bl -427356 */
		/* 820D618Ch case    3:*/		regs.LR = 0x820D6190; return 0x8206DC30;
		/* 820D618Ch case    3:*/		return 0x820D6190;
	}
	return 0x820D6190;
} // Block from 820D6180h-820D6190h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D6190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6190);
		  /* 820D6190h */ case    0:  		/* lwz R11, <#[R29 + 88]> */
		/* 820D6190h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000058) );
		/* 820D6190h case    0:*/		return 0x820D6194;
		  /* 820D6194h */ case    1:  		/* mr R30, R3 */
		/* 820D6194h case    1:*/		regs.R30 = regs.R3;
		/* 820D6194h case    1:*/		return 0x820D6198;
		  /* 820D6198h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 820D6198h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D6198h case    2:*/		return 0x820D619C;
		  /* 820D619Ch */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 820D619Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820D61B0;  }
		/* 820D619Ch case    3:*/		return 0x820D61A0;
		  /* 820D61A0h */ case    4:  		/* mr R4, R3 */
		/* 820D61A0h case    4:*/		regs.R4 = regs.R3;
		/* 820D61A0h case    4:*/		return 0x820D61A4;
		  /* 820D61A4h */ case    5:  		/* li R5, 1 */
		/* 820D61A4h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D61A4h case    5:*/		return 0x820D61A8;
		  /* 820D61A8h */ case    6:  		/* mr R3, R28 */
		/* 820D61A8h case    6:*/		regs.R3 = regs.R28;
		/* 820D61A8h case    6:*/		return 0x820D61AC;
		  /* 820D61ACh */ case    7:  		/* bl -442196 */
		/* 820D61ACh case    7:*/		regs.LR = 0x820D61B0; return 0x8206A258;
		/* 820D61ACh case    7:*/		return 0x820D61B0;
	}
	return 0x820D61B0;
} // Block from 820D6190h-820D61B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D61B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D61B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D61B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D61B0);
		  /* 820D61B0h */ case    0:  		/* lwz R11, <#[R31 + 332]> */
		/* 820D61B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000014C) );
		/* 820D61B0h case    0:*/		return 0x820D61B4;
		  /* 820D61B4h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D61B4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D61B4h case    1:*/		return 0x820D61B8;
		  /* 820D61B8h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 820D61B8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D61DC;  }
		/* 820D61B8h case    2:*/		return 0x820D61BC;
		  /* 820D61BCh */ case    3:  		/* li R9, 0 */
		/* 820D61BCh case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820D61BCh case    3:*/		return 0x820D61C0;
		  /* 820D61C0h */ case    4:  		/* lwz R7, <#[R29 + 40]> */
		/* 820D61C0h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000028) );
		/* 820D61C0h case    4:*/		return 0x820D61C4;
		  /* 820D61C4h */ case    5:  		/* li R8, -1 */
		/* 820D61C4h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 820D61C4h case    5:*/		return 0x820D61C8;
		  /* 820D61C8h */ case    6:  		/* lwz R6, <#[R29 + 32]> */
		/* 820D61C8h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000020) );
		/* 820D61C8h case    6:*/		return 0x820D61CC;
		  /* 820D61CCh */ case    7:  		/* mr R5, R30 */
		/* 820D61CCh case    7:*/		regs.R5 = regs.R30;
		/* 820D61CCh case    7:*/		return 0x820D61D0;
		  /* 820D61D0h */ case    8:  		/* lwz R3, <#[R31 + 324]> */
		/* 820D61D0h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000144) );
		/* 820D61D0h case    8:*/		return 0x820D61D4;
		  /* 820D61D4h */ case    9:  		/* li R4, 1 */
		/* 820D61D4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D61D4h case    9:*/		return 0x820D61D8;
		  /* 820D61D8h */ case   10:  		/* bl 481664 */
		/* 820D61D8h case   10:*/		regs.LR = 0x820D61DC; return 0x8214BB58;
		/* 820D61D8h case   10:*/		return 0x820D61DC;
	}
	return 0x820D61DC;
} // Block from 820D61B0h-820D61DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D61DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D61DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D61DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D61DC);
		  /* 820D61DCh */ case    0:  		/* li R3, 0 */
		/* 820D61DCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D61DCh case    0:*/		return 0x820D61E0;
	}
	return 0x820D61E0;
} // Block from 820D61DCh-820D61E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D61E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D61E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D61E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D61E0);
		  /* 820D61E0h */ case    0:  		/* addi R1, R1, 176 */
		/* 820D61E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820D61E0h case    0:*/		return 0x820D61E4;
		  /* 820D61E4h */ case    1:  		/* b -282428 */
		/* 820D61E4h case    1:*/		return 0x820912A8;
		/* 820D61E4h case    1:*/		return 0x820D61E8;
	}
	return 0x820D61E8;
} // Block from 820D61E0h-820D61E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D61E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D61E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D61E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D61E8);
		  /* 820D61E8h */ case    0:  		/* mfspr R12, LR */
		/* 820D61E8h case    0:*/		regs.R12 = regs.LR;
		/* 820D61E8h case    0:*/		return 0x820D61EC;
		  /* 820D61ECh */ case    1:  		/* bl -282516 */
		/* 820D61ECh case    1:*/		regs.LR = 0x820D61F0; return 0x82091258;
		/* 820D61ECh case    1:*/		return 0x820D61F0;
		  /* 820D61F0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 820D61F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 820D61F0h case    2:*/		return 0x820D61F4;
		  /* 820D61F4h */ case    3:  		/* li R11, 0 */
		/* 820D61F4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820D61F4h case    3:*/		return 0x820D61F8;
		  /* 820D61F8h */ case    4:  		/* lis R10, -32243 */
		/* 820D61F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820D);
		/* 820D61F8h case    4:*/		return 0x820D61FC;
		  /* 820D61FCh */ case    5:  		/* stw R11, <#[R3 + 308]> */
		/* 820D61FCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000134) );
		/* 820D61FCh case    5:*/		return 0x820D6200;
		  /* 820D6200h */ case    6:  		/* mr R31, R3 */
		/* 820D6200h case    6:*/		regs.R31 = regs.R3;
		/* 820D6200h case    6:*/		return 0x820D6204;
		  /* 820D6204h */ case    7:  		/* mr R7, R3 */
		/* 820D6204h case    7:*/		regs.R7 = regs.R3;
		/* 820D6204h case    7:*/		return 0x820D6208;
		  /* 820D6208h */ case    8:  		/* stb R11, <#[R1 + 96]> */
		/* 820D6208h case    8:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820D6208h case    8:*/		return 0x820D620C;
		  /* 820D620Ch */ case    9:  		/* mr R30, R4 */
		/* 820D620Ch case    9:*/		regs.R30 = regs.R4;
		/* 820D620Ch case    9:*/		return 0x820D6210;
		  /* 820D6210h */ case   10:  		/* mr R3, R4 */
		/* 820D6210h case   10:*/		regs.R3 = regs.R4;
		/* 820D6210h case   10:*/		return 0x820D6214;
		  /* 820D6214h */ case   11:  		/* addi R6, R10, 2280 */
		/* 820D6214h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x8E8);
		/* 820D6214h case   11:*/		return 0x820D6218;
		  /* 820D6218h */ case   12:  		/* addi R5, R1, 96 */
		/* 820D6218h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 820D6218h case   12:*/		return 0x820D621C;
		  /* 820D621Ch */ case   13:  		/* addi R4, R1, 104 */
		/* 820D621Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x68);
		/* 820D621Ch case   13:*/		return 0x820D6220;
		  /* 820D6220h */ case   14:  		/* bl -26664 */
		/* 820D6220h case   14:*/		regs.LR = 0x820D6224; return 0x820CF9F8;
		/* 820D6220h case   14:*/		return 0x820D6224;
		  /* 820D6224h */ case   15:  		/* li R6, 3 */
		/* 820D6224h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 820D6224h case   15:*/		return 0x820D6228;
		  /* 820D6228h */ case   16:  		/* mr R5, R30 */
		/* 820D6228h case   16:*/		regs.R5 = regs.R30;
		/* 820D6228h case   16:*/		return 0x820D622C;
		  /* 820D622Ch */ case   17:  		/* addi R4, R1, 104 */
		/* 820D622Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x68);
		/* 820D622Ch case   17:*/		return 0x820D6230;
		  /* 820D6230h */ case   18:  		/* mr R3, R31 */
		/* 820D6230h case   18:*/		regs.R3 = regs.R31;
		/* 820D6230h case   18:*/		return 0x820D6234;
		  /* 820D6234h */ case   19:  		/* bl -6716 */
		/* 820D6234h case   19:*/		regs.LR = 0x820D6238; return 0x820D47F8;
		/* 820D6234h case   19:*/		return 0x820D6238;
		  /* 820D6238h */ case   20:  		/* lwz R11, <#[R1 + 104]> */
		/* 820D6238h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 820D6238h case   20:*/		return 0x820D623C;
		  /* 820D623Ch */ case   21:  		/* rlwinm R10, R11, 0, 27, 31 */
		/* 820D623Ch case   21:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R11);
		/* 820D623Ch case   21:*/		return 0x820D6240;
		  /* 820D6240h */ case   22:  		/* cmplwi CR6, R10, 19 */
		/* 820D6240h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000013);
		/* 820D6240h case   22:*/		return 0x820D6244;
		  /* 820D6244h */ case   23:  		/* bc 12, CR6_GT, 60 */
		/* 820D6244h case   23:*/		if ( regs.CR[6].gt ) { return 0x820D6280;  }
		/* 820D6244h case   23:*/		return 0x820D6248;
		  /* 820D6248h */ case   24:  		/* lwz R10, <#[R30 + 108]> */
		/* 820D6248h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000006C) );
		/* 820D6248h case   24:*/		return 0x820D624C;
		  /* 820D624Ch */ case   25:  		/* lwz R9, <#[R10 + 16]> */
		/* 820D624Ch case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 820D624Ch case   25:*/		return 0x820D6250;
		  /* 820D6250h */ case   26:  		/* cmpwi CR6, R9, -1002 */
		/* 820D6250h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFC16);
		/* 820D6250h case   26:*/		return 0x820D6254;
		  /* 820D6254h */ case   27:  		/* bc 12, CR6_EQ, 32 */
		/* 820D6254h case   27:*/		if ( regs.CR[6].eq ) { return 0x820D6274;  }
		/* 820D6254h case   27:*/		return 0x820D6258;
		  /* 820D6258h */ case   28:  		/* lis R11, -32255 */
		/* 820D6258h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6258h case   28:*/		return 0x820D625C;
		  /* 820D625Ch */ case   29:  		/* mr R3, R31 */
		/* 820D625Ch case   29:*/		regs.R3 = regs.R31;
		/* 820D625Ch case   29:*/		return 0x820D6260;
		  /* 820D6260h */ case   30:  		/* addi R4, R11, 31484 */
		/* 820D6260h case   30:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7AFC);
		/* 820D6260h case   30:*/		return 0x820D6264;
		  /* 820D6264h */ case   31:  		/* bl -22908 */
		/* 820D6264h case   31:*/		regs.LR = 0x820D6268; return 0x820D08E8;
		/* 820D6264h case   31:*/		return 0x820D6268;
		  /* 820D6268h */ case   32:  		/* lis R3, -32768 */
		/* 820D6268h case   32:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820D6268h case   32:*/		return 0x820D626C;
		  /* 820D626Ch */ case   33:  		/* ori R3, R3, 16389 */
		/* 820D626Ch case   33:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820D626Ch case   33:*/		return 0x820D6270;
		  /* 820D6270h */ case   34:  		/* b 120 */
		/* 820D6270h case   34:*/		return 0x820D62E8;
		/* 820D6270h case   34:*/		return 0x820D6274;
	}
	return 0x820D6274;
} // Block from 820D61E8h-820D6274h (35 instructions)

//////////////////////////////////////////////////////
// Block at 820D6274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6274);
		  /* 820D6274h */ case    0:  		/* lwz R10, <#[R10 + 24]> */
		/* 820D6274h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 820D6274h case    0:*/		return 0x820D6278;
		  /* 820D6278h */ case    1:  		/* rlwimi R11, R10, 20, 7, 11 */
		/* 820D6278h case    1:*/		cpu::op::rlwimi<0,20,7,11>(regs,&regs.R11,regs.R10);
		/* 820D6278h case    1:*/		return 0x820D627C;
		  /* 820D627Ch */ case    2:  		/* stw R11, <#[R1 + 104]> */
		/* 820D627Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 820D627Ch case    2:*/		return 0x820D6280;
	}
	return 0x820D6280;
} // Block from 820D6274h-820D6280h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D6280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6280);
		  /* 820D6280h */ case    0:  		/* li R4, 1 */
		/* 820D6280h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6280h case    0:*/		return 0x820D6284;
		  /* 820D6284h */ case    1:  		/* mr R3, R31 */
		/* 820D6284h case    1:*/		regs.R3 = regs.R31;
		/* 820D6284h case    1:*/		return 0x820D6288;
		  /* 820D6288h */ case    2:  		/* bl -4096 */
		/* 820D6288h case    2:*/		regs.LR = 0x820D628C; return 0x820D5288;
		/* 820D6288h case    2:*/		return 0x820D628C;
		  /* 820D628Ch */ case    3:  		/* addi R4, R1, 104 */
		/* 820D628Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x68);
		/* 820D628Ch case    3:*/		return 0x820D6290;
		  /* 820D6290h */ case    4:  		/* mr R29, R3 */
		/* 820D6290h case    4:*/		regs.R29 = regs.R3;
		/* 820D6290h case    4:*/		return 0x820D6294;
		  /* 820D6294h */ case    5:  		/* bl -427644 */
		/* 820D6294h case    5:*/		regs.LR = 0x820D6298; return 0x8206DC18;
		/* 820D6294h case    5:*/		return 0x820D6298;
		  /* 820D6298h */ case    6:  		/* lwz R11, <#[R30 + 88]> */
		/* 820D6298h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000058) );
		/* 820D6298h case    6:*/		return 0x820D629C;
		  /* 820D629Ch */ case    7:  		/* mr R28, R3 */
		/* 820D629Ch case    7:*/		regs.R28 = regs.R3;
		/* 820D629Ch case    7:*/		return 0x820D62A0;
		  /* 820D62A0h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 820D62A0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D62A0h case    8:*/		return 0x820D62A4;
		  /* 820D62A4h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 820D62A4h case    9:*/		if ( regs.CR[6].eq ) { return 0x820D62B8;  }
		/* 820D62A4h case    9:*/		return 0x820D62A8;
		  /* 820D62A8h */ case   10:  		/* mr R4, R3 */
		/* 820D62A8h case   10:*/		regs.R4 = regs.R3;
		/* 820D62A8h case   10:*/		return 0x820D62AC;
		  /* 820D62ACh */ case   11:  		/* li R5, 1 */
		/* 820D62ACh case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D62ACh case   11:*/		return 0x820D62B0;
		  /* 820D62B0h */ case   12:  		/* mr R3, R29 */
		/* 820D62B0h case   12:*/		regs.R3 = regs.R29;
		/* 820D62B0h case   12:*/		return 0x820D62B4;
		  /* 820D62B4h */ case   13:  		/* bl -442460 */
		/* 820D62B4h case   13:*/		regs.LR = 0x820D62B8; return 0x8206A258;
		/* 820D62B4h case   13:*/		return 0x820D62B8;
	}
	return 0x820D62B8;
} // Block from 820D6280h-820D62B8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D62B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D62B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D62B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D62B8);
		  /* 820D62B8h */ case    0:  		/* lwz R11, <#[R31 + 332]> */
		/* 820D62B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000014C) );
		/* 820D62B8h case    0:*/		return 0x820D62BC;
		  /* 820D62BCh */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D62BCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D62BCh case    1:*/		return 0x820D62C0;
		  /* 820D62C0h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 820D62C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D62E4;  }
		/* 820D62C0h case    2:*/		return 0x820D62C4;
		  /* 820D62C4h */ case    3:  		/* li R9, 0 */
		/* 820D62C4h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820D62C4h case    3:*/		return 0x820D62C8;
		  /* 820D62C8h */ case    4:  		/* lwz R7, <#[R30 + 40]> */
		/* 820D62C8h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000028) );
		/* 820D62C8h case    4:*/		return 0x820D62CC;
		  /* 820D62CCh */ case    5:  		/* li R8, -1 */
		/* 820D62CCh case    5:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 820D62CCh case    5:*/		return 0x820D62D0;
		  /* 820D62D0h */ case    6:  		/* lwz R6, <#[R30 + 32]> */
		/* 820D62D0h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000020) );
		/* 820D62D0h case    6:*/		return 0x820D62D4;
		  /* 820D62D4h */ case    7:  		/* mr R5, R28 */
		/* 820D62D4h case    7:*/		regs.R5 = regs.R28;
		/* 820D62D4h case    7:*/		return 0x820D62D8;
		  /* 820D62D8h */ case    8:  		/* lwz R3, <#[R31 + 324]> */
		/* 820D62D8h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000144) );
		/* 820D62D8h case    8:*/		return 0x820D62DC;
		  /* 820D62DCh */ case    9:  		/* li R4, 1 */
		/* 820D62DCh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D62DCh case    9:*/		return 0x820D62E0;
		  /* 820D62E0h */ case   10:  		/* bl 481400 */
		/* 820D62E0h case   10:*/		regs.LR = 0x820D62E4; return 0x8214BB58;
		/* 820D62E0h case   10:*/		return 0x820D62E4;
	}
	return 0x820D62E4;
} // Block from 820D62B8h-820D62E4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D62E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D62E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D62E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D62E4);
		  /* 820D62E4h */ case    0:  		/* li R3, 0 */
		/* 820D62E4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D62E4h case    0:*/		return 0x820D62E8;
	}
	return 0x820D62E8;
} // Block from 820D62E4h-820D62E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D62E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D62E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D62E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D62E8);
		  /* 820D62E8h */ case    0:  		/* addi R1, R1, 160 */
		/* 820D62E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820D62E8h case    0:*/		return 0x820D62EC;
		  /* 820D62ECh */ case    1:  		/* b -282692 */
		/* 820D62ECh case    1:*/		return 0x820912A8;
		/* 820D62ECh case    1:*/		return 0x820D62F0;
	}
	return 0x820D62F0;
} // Block from 820D62E8h-820D62F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D62F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D62F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D62F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D62F0);
		  /* 820D62F0h */ case    0:  		/* mfspr R12, LR */
		/* 820D62F0h case    0:*/		regs.R12 = regs.LR;
		/* 820D62F0h case    0:*/		return 0x820D62F4;
		  /* 820D62F4h */ case    1:  		/* bl -282784 */
		/* 820D62F4h case    1:*/		regs.LR = 0x820D62F8; return 0x82091254;
		/* 820D62F4h case    1:*/		return 0x820D62F8;
		  /* 820D62F8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 820D62F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 820D62F8h case    2:*/		return 0x820D62FC;
		  /* 820D62FCh */ case    3:  		/* addi R11, R5, 26 */
		/* 820D62FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x1A);
		/* 820D62FCh case    3:*/		return 0x820D6300;
		  /* 820D6300h */ case    4:  		/* mr R31, R3 */
		/* 820D6300h case    4:*/		regs.R31 = regs.R3;
		/* 820D6300h case    4:*/		return 0x820D6304;
		  /* 820D6304h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D6304h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D6304h case    5:*/		return 0x820D6308;
		  /* 820D6308h */ case    6:  		/* lwzx R11, <#[R11 + R4]> */
		/* 820D6308h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820D6308h case    6:*/		return 0x820D630C;
		  /* 820D630Ch */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 820D630Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 820D630Ch case    7:*/		return 0x820D6310;
		  /* 820D6310h */ case    8:  		/* cmplwi CR6, R10, 18 */
		/* 820D6310h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000012);
		/* 820D6310h case    8:*/		return 0x820D6314;
		  /* 820D6314h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 820D6314h case    9:*/		if ( regs.CR[6].eq ) { return 0x820D6328;  }
		/* 820D6314h case    9:*/		return 0x820D6318;
		  /* 820D6318h */ case   10:  		/* lis R11, -32255 */
		/* 820D6318h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6318h case   10:*/		return 0x820D631C;
		  /* 820D631Ch */ case   11:  		/* addi R4, R11, 31548 */
		/* 820D631Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7B3C);
		/* 820D631Ch case   11:*/		return 0x820D6320;
		  /* 820D6320h */ case   12:  		/* bl -23096 */
		/* 820D6320h case   12:*/		regs.LR = 0x820D6324; return 0x820D08E8;
		/* 820D6320h case   12:*/		return 0x820D6324;
		  /* 820D6324h */ case   13:  		/* b 164 */
		/* 820D6324h case   13:*/		return 0x820D63C8;
		/* 820D6324h case   13:*/		return 0x820D6328;
	}
	return 0x820D6328;
} // Block from 820D62F0h-820D6328h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D6328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6328);
		  /* 820D6328h */ case    0:  		/* li R4, 1 */
		/* 820D6328h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6328h case    0:*/		return 0x820D632C;
		  /* 820D632Ch */ case    1:  		/* lwz R28, <#[R11 + 24]> */
		/* 820D632Ch case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000018) );
		/* 820D632Ch case    1:*/		return 0x820D6330;
		  /* 820D6330h */ case    2:  		/* bl -4264 */
		/* 820D6330h case    2:*/		regs.LR = 0x820D6334; return 0x820D5288;
		/* 820D6330h case    2:*/		return 0x820D6334;
		  /* 820D6334h */ case    3:  		/* bl -427316 */
		/* 820D6334h case    3:*/		regs.LR = 0x820D6338; return 0x8206DE00;
		/* 820D6334h case    3:*/		return 0x820D6338;
		  /* 820D6338h */ case    4:  		/* lwz R11, <#[R31 + 336]> */
		/* 820D6338h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000150) );
		/* 820D6338h case    4:*/		return 0x820D633C;
		  /* 820D633Ch */ case    5:  		/* mr R27, R3 */
		/* 820D633Ch case    5:*/		regs.R27 = regs.R3;
		/* 820D633Ch case    5:*/		return 0x820D6340;
		  /* 820D6340h */ case    6:  		/* b 20 */
		/* 820D6340h case    6:*/		return 0x820D6354;
		/* 820D6340h case    6:*/		return 0x820D6344;
		  /* 820D6344h */ case    7:  		/* lwz R10, <#[R11 + 20]> */
		/* 820D6344h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 820D6344h case    7:*/		return 0x820D6348;
		  /* 820D6348h */ case    8:  		/* cmplw CR6, R10, R28 */
		/* 820D6348h case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 820D6348h case    8:*/		return 0x820D634C;
		  /* 820D634Ch */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 820D634Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x820D635C;  }
		/* 820D634Ch case    9:*/		return 0x820D6350;
		  /* 820D6350h */ case   10:  		/* lwz R11, <#[R11 + 12]> */
		/* 820D6350h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D6350h case   10:*/		return 0x820D6354;
	}
	return 0x820D6354;
} // Block from 820D6328h-820D6354h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D6354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6354);
		  /* 820D6354h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 820D6354h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D6354h case    0:*/		return 0x820D6358;
		  /* 820D6358h */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 820D6358h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820D6344;  }
		/* 820D6358h case    1:*/		return 0x820D635C;
	}
	return 0x820D635C;
} // Block from 820D6354h-820D635Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D635Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D635C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D635C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D635C);
		  /* 820D635Ch */ case    0:  		/* mr R29, R11 */
		/* 820D635Ch case    0:*/		regs.R29 = regs.R11;
		/* 820D635Ch case    0:*/		return 0x820D6360;
		  /* 820D6360h */ case    1:  		/* li R30, -1 */
		/* 820D6360h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0xFFFFFFFF);
		/* 820D6360h case    1:*/		return 0x820D6364;
		  /* 820D6364h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820D6364h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D6364h case    2:*/		return 0x820D6368;
		  /* 820D6368h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 820D6368h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D6380;  }
		/* 820D6368h case    3:*/		return 0x820D636C;
		  /* 820D636Ch */ case    4:  		/* mr R5, R30 */
		/* 820D636Ch case    4:*/		regs.R5 = regs.R30;
		/* 820D636Ch case    4:*/		return 0x820D6370;
		  /* 820D6370h */ case    5:  		/* mr R4, R28 */
		/* 820D6370h case    5:*/		regs.R4 = regs.R28;
		/* 820D6370h case    5:*/		return 0x820D6374;
		  /* 820D6374h */ case    6:  		/* mr R3, R31 */
		/* 820D6374h case    6:*/		regs.R3 = regs.R31;
		/* 820D6374h case    6:*/		return 0x820D6378;
		  /* 820D6378h */ case    7:  		/* bl -25344 */
		/* 820D6378h case    7:*/		regs.LR = 0x820D637C; return 0x820D0078;
		/* 820D6378h case    7:*/		return 0x820D637C;
		  /* 820D637Ch */ case    8:  		/* mr R29, R3 */
		/* 820D637Ch case    8:*/		regs.R29 = regs.R3;
		/* 820D637Ch case    8:*/		return 0x820D6380;
	}
	return 0x820D6380;
} // Block from 820D635Ch-820D6380h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D6380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6380);
		  /* 820D6380h */ case    0:  		/* li R3, 24 */
		/* 820D6380h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x18);
		/* 820D6380h case    0:*/		return 0x820D6384;
		  /* 820D6384h */ case    1:  		/* bl -53596 */
		/* 820D6384h case    1:*/		regs.LR = 0x820D6388; return 0x820C9228;
		/* 820D6384h case    1:*/		return 0x820D6388;
		  /* 820D6388h */ case    2:  		/* or. R31, R3, R3 */
		/* 820D6388h case    2:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820D6388h case    2:*/		return 0x820D638C;
		  /* 820D638Ch */ case    3:  		/* bc 12, CR0_EQ, 40 */
		/* 820D638Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x820D63B4;  }
		/* 820D638Ch case    3:*/		return 0x820D6390;
		  /* 820D6390h */ case    4:  		/* mr R3, R31 */
		/* 820D6390h case    4:*/		regs.R3 = regs.R31;
		/* 820D6390h case    4:*/		return 0x820D6394;
		  /* 820D6394h */ case    5:  		/* bl -53548 */
		/* 820D6394h case    5:*/		regs.LR = 0x820D6398; return 0x820C9268;
		/* 820D6394h case    5:*/		return 0x820D6398;
		  /* 820D6398h */ case    6:  		/* lis R10, -32255 */
		/* 820D6398h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 820D6398h case    6:*/		return 0x820D639C;
		  /* 820D639Ch */ case    7:  		/* stw R30, <#[R31 + 16]> */
		/* 820D639Ch case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 820D639Ch case    7:*/		return 0x820D63A0;
		  /* 820D63A0h */ case    8:  		/* mr R11, R31 */
		/* 820D63A0h case    8:*/		regs.R11 = regs.R31;
		/* 820D63A0h case    8:*/		return 0x820D63A4;
		  /* 820D63A4h */ case    9:  		/* addi R10, R10, 22380 */
		/* 820D63A4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x576C);
		/* 820D63A4h case    9:*/		return 0x820D63A8;
		  /* 820D63A8h */ case   10:  		/* stw R30, <#[R31 + 20]> */
		/* 820D63A8h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 820D63A8h case   10:*/		return 0x820D63AC;
		  /* 820D63ACh */ case   11:  		/* stw R10, <#[R31]> */
		/* 820D63ACh case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820D63ACh case   11:*/		return 0x820D63B0;
		  /* 820D63B0h */ case   12:  		/* b 8 */
		/* 820D63B0h case   12:*/		return 0x820D63B8;
		/* 820D63B0h case   12:*/		return 0x820D63B4;
	}
	return 0x820D63B4;
} // Block from 820D6380h-820D63B4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D63B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D63B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D63B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D63B4);
		  /* 820D63B4h */ case    0:  		/* li R11, 0 */
		/* 820D63B4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820D63B4h case    0:*/		return 0x820D63B8;
	}
	return 0x820D63B8;
} // Block from 820D63B4h-820D63B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D63B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D63B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D63B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D63B8);
		  /* 820D63B8h */ case    0:  		/* stw R27, <#[R11 + 16]> */
		/* 820D63B8h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000010) );
		/* 820D63B8h case    0:*/		return 0x820D63BC;
		  /* 820D63BCh */ case    1:  		/* lwz R10, <#[R29 + 8]> */
		/* 820D63BCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 820D63BCh case    1:*/		return 0x820D63C0;
		  /* 820D63C0h */ case    2:  		/* stw R10, <#[R11 + 12]> */
		/* 820D63C0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D63C0h case    2:*/		return 0x820D63C4;
		  /* 820D63C4h */ case    3:  		/* stw R11, <#[R29 + 8]> */
		/* 820D63C4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 820D63C4h case    3:*/		return 0x820D63C8;
	}
	return 0x820D63C8;
} // Block from 820D63B8h-820D63C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D63C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D63C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D63C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D63C8);
		  /* 820D63C8h */ case    0:  		/* addi R1, R1, 160 */
		/* 820D63C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820D63C8h case    0:*/		return 0x820D63CC;
		  /* 820D63CCh */ case    1:  		/* b -282920 */
		/* 820D63CCh case    1:*/		return 0x820912A4;
		/* 820D63CCh case    1:*/		return 0x820D63D0;
	}
	return 0x820D63D0;
} // Block from 820D63C8h-820D63D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D63D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D63D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D63D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D63D0);
		  /* 820D63D0h */ case    0:  		/* mfspr R12, LR */
		/* 820D63D0h case    0:*/		regs.R12 = regs.LR;
		/* 820D63D0h case    0:*/		return 0x820D63D4;
		  /* 820D63D4h */ case    1:  		/* bl -283020 */
		/* 820D63D4h case    1:*/		regs.LR = 0x820D63D8; return 0x82091248;
		/* 820D63D4h case    1:*/		return 0x820D63D8;
		  /* 820D63D8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820D63D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820D63D8h case    2:*/		return 0x820D63DC;
		  /* 820D63DCh */ case    3:  		/* li R4, 1 */
		/* 820D63DCh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D63DCh case    3:*/		return 0x820D63E0;
		  /* 820D63E0h */ case    4:  		/* lwz R30, <#[R3 + 336]> */
		/* 820D63E0h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000150) );
		/* 820D63E0h case    4:*/		return 0x820D63E4;
		  /* 820D63E4h */ case    5:  		/* mr R29, R3 */
		/* 820D63E4h case    5:*/		regs.R29 = regs.R3;
		/* 820D63E4h case    5:*/		return 0x820D63E8;
		  /* 820D63E8h */ case    6:  		/* bl -4448 */
		/* 820D63E8h case    6:*/		regs.LR = 0x820D63EC; return 0x820D5288;
		/* 820D63E8h case    6:*/		return 0x820D63EC;
		  /* 820D63ECh */ case    7:  		/* bl -427500 */
		/* 820D63ECh case    7:*/		regs.LR = 0x820D63F0; return 0x8206DE00;
		/* 820D63ECh case    7:*/		return 0x820D63F0;
		  /* 820D63F0h */ case    8:  		/* mr R25, R3 */
		/* 820D63F0h case    8:*/		regs.R25 = regs.R3;
		/* 820D63F0h case    8:*/		return 0x820D63F4;
		  /* 820D63F4h */ case    9:  		/* cmplwi CR6, R30, 0 */
		/* 820D63F4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820D63F4h case    9:*/		return 0x820D63F8;
		  /* 820D63F8h */ case   10:  		/* bc 12, CR6_EQ, 148 */
		/* 820D63F8h case   10:*/		if ( regs.CR[6].eq ) { return 0x820D648C;  }
		/* 820D63F8h case   10:*/		return 0x820D63FC;
		  /* 820D63FCh */ case   11:  		/* lis R11, -32255 */
		/* 820D63FCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D63FCh case   11:*/		return 0x820D6400;
		  /* 820D6400h */ case   12:  		/* lis R10, -32255 */
		/* 820D6400h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 820D6400h case   12:*/		return 0x820D6404;
		  /* 820D6404h */ case   13:  		/* addi R27, R11, 31624 */
		/* 820D6404h case   13:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x7B88);
		/* 820D6404h case   13:*/		return 0x820D6408;
		  /* 820D6408h */ case   14:  		/* addi R26, R10, 31584 */
		/* 820D6408h case   14:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x7B60);
		/* 820D6408h case   14:*/		return 0x820D640C;
		  /* 820D640Ch */ case   15:  		/* lwz R11, <#[R30 + 16]> */
		/* 820D640Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 820D640Ch case   15:*/		return 0x820D6410;
		  /* 820D6410h */ case   16:  		/* cmpwi CR6, R11, -1 */
		/* 820D6410h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820D6410h case   16:*/		return 0x820D6414;
		  /* 820D6414h */ case   17:  		/* bc 4, CR6_EQ, 12 */
		/* 820D6414h case   17:*/		if ( !regs.CR[6].eq ) { return 0x820D6420;  }
		/* 820D6414h case   17:*/		return 0x820D6418;
		  /* 820D6418h */ case   18:  		/* mr R4, R26 */
		/* 820D6418h case   18:*/		regs.R4 = regs.R26;
		/* 820D6418h case   18:*/		return 0x820D641C;
		  /* 820D641Ch */ case   19:  		/* b 16 */
		/* 820D641Ch case   19:*/		return 0x820D642C;
		/* 820D641Ch case   19:*/		return 0x820D6420;
	}
	return 0x820D6420;
} // Block from 820D63D0h-820D6420h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820D6420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6420);
		  /* 820D6420h */ case    0:  		/* cmplw CR6, R11, R25 */
		/* 820D6420h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820D6420h case    0:*/		return 0x820D6424;
		  /* 820D6424h */ case    1:  		/* bc 12, CR6_LT, 24 */
		/* 820D6424h case    1:*/		if ( regs.CR[6].lt ) { return 0x820D643C;  }
		/* 820D6424h case    1:*/		return 0x820D6428;
		  /* 820D6428h */ case    2:  		/* mr R4, R27 */
		/* 820D6428h case    2:*/		regs.R4 = regs.R27;
		/* 820D6428h case    2:*/		return 0x820D642C;
	}
	return 0x820D642C;
} // Block from 820D6420h-820D642Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D642Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D642C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D642C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D642C);
		  /* 820D642Ch */ case    0:  		/* mr R3, R29 */
		/* 820D642Ch case    0:*/		regs.R3 = regs.R29;
		/* 820D642Ch case    0:*/		return 0x820D6430;
		  /* 820D6430h */ case    1:  		/* lwz R5, <#[R30 + 20]> */
		/* 820D6430h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000014) );
		/* 820D6430h case    1:*/		return 0x820D6434;
		  /* 820D6434h */ case    2:  		/* bl -23372 */
		/* 820D6434h case    2:*/		regs.LR = 0x820D6438; return 0x820D08E8;
		/* 820D6434h case    2:*/		return 0x820D6438;
		  /* 820D6438h */ case    3:  		/* b 72 */
		/* 820D6438h case    3:*/		return 0x820D6480;
		/* 820D6438h case    3:*/		return 0x820D643C;
	}
	return 0x820D643C;
} // Block from 820D642Ch-820D643Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D643Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D643C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D643C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D643C);
		  /* 820D643Ch */ case    0:  		/* lwz R31, <#[R30 + 8]> */
		/* 820D643Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 820D643Ch case    0:*/		return 0x820D6440;
		  /* 820D6440h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 820D6440h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820D6440h case    1:*/		return 0x820D6444;
		  /* 820D6444h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 820D6444h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D6480;  }
		/* 820D6444h case    2:*/		return 0x820D6448;
		  /* 820D6448h */ case    3:  		/* rlwinm R28, R11, 0, 19, 31 */
		/* 820D6448h case    3:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R28,regs.R11);
		/* 820D6448h case    3:*/		return 0x820D644C;
		  /* 820D644Ch */ case    4:  		/* li R4, 1 */
		/* 820D644Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D644Ch case    4:*/		return 0x820D6450;
		  /* 820D6450h */ case    5:  		/* lwz R24, <#[R31 + 16]> */
		/* 820D6450h case    5:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R31 + 0x00000010) );
		/* 820D6450h case    5:*/		return 0x820D6454;
		  /* 820D6454h */ case    6:  		/* mr R3, R29 */
		/* 820D6454h case    6:*/		regs.R3 = regs.R29;
		/* 820D6454h case    6:*/		return 0x820D6458;
		  /* 820D6458h */ case    7:  		/* bl -4560 */
		/* 820D6458h case    7:*/		regs.LR = 0x820D645C; return 0x820D5288;
		/* 820D6458h case    7:*/		return 0x820D645C;
		  /* 820D645Ch */ case    8:  		/* mr R4, R24 */
		/* 820D645Ch case    8:*/		regs.R4 = regs.R24;
		/* 820D645Ch case    8:*/		return 0x820D6460;
		  /* 820D6460h */ case    9:  		/* bl -442816 */
		/* 820D6460h case    9:*/		regs.LR = 0x820D6464; return 0x8206A2A0;
		/* 820D6460h case    9:*/		return 0x820D6464;
		  /* 820D6464h */ case   10:  		/* lwz R11, <#[R3]> */
		/* 820D6464h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D6464h case   10:*/		return 0x820D6468;
		  /* 820D6468h */ case   11:  		/* rlwinm R11, R11, 0, 0, 18 */
		/* 820D6468h case   11:*/		cpu::op::rlwinm<0,0,0,18>(regs,&regs.R11,regs.R11);
		/* 820D6468h case   11:*/		return 0x820D646C;
		  /* 820D646Ch */ case   12:  		/* or R11, R11, R28 */
		/* 820D646Ch case   12:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 820D646Ch case   12:*/		return 0x820D6470;
		  /* 820D6470h */ case   13:  		/* stw R11, <#[R3]> */
		/* 820D6470h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D6470h case   13:*/		return 0x820D6474;
		  /* 820D6474h */ case   14:  		/* lwz R31, <#[R31 + 12]> */
		/* 820D6474h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D6474h case   14:*/		return 0x820D6478;
		  /* 820D6478h */ case   15:  		/* cmplwi CR6, R31, 0 */
		/* 820D6478h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820D6478h case   15:*/		return 0x820D647C;
		  /* 820D647Ch */ case   16:  		/* bc 4, CR6_EQ, -48 */
		/* 820D647Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x820D644C;  }
		/* 820D647Ch case   16:*/		return 0x820D6480;
	}
	return 0x820D6480;
} // Block from 820D643Ch-820D6480h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820D6480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6480);
		  /* 820D6480h */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 820D6480h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 820D6480h case    0:*/		return 0x820D6484;
		  /* 820D6484h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820D6484h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820D6484h case    1:*/		return 0x820D6488;
	}
	return 0x820D6488;
} // Block from 820D6480h-820D6488h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D6488h
// Function '?HandleALU@CUAssembler@D3DXShader@@IAAJPAVCNodeUAsmInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6488);
		  /* 820D6488h */ case    0:  		/* bc 4, CR6_EQ, -124 */
		/* 820D6488h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820D640C;  }
		/* 820D6488h case    0:*/		return 0x820D648C;
	}
	return 0x820D648C;
} // Block from 820D6488h-820D648Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D648Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D648C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D648C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D648C);
		  /* 820D648Ch */ case    0:  		/* li R11, 0 */
		/* 820D648Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820D648Ch case    0:*/		return 0x820D6490;
		  /* 820D6490h */ case    1:  		/* stw R11, <#[R29 + 336]> */
		/* 820D6490h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000150) );
		/* 820D6490h case    1:*/		return 0x820D6494;
		  /* 820D6494h */ case    2:  		/* addi R1, R1, 176 */
		/* 820D6494h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820D6494h case    2:*/		return 0x820D6498;
		  /* 820D6498h */ case    3:  		/* b -283136 */
		/* 820D6498h case    3:*/		return 0x82091298;
		/* 820D6498h case    3:*/		return 0x820D649C;
		  /* 820D649Ch */ case    4:  		/* nop */
		/* 820D649Ch case    4:*/		cpu::op::nop();
		/* 820D649Ch case    4:*/		return 0x820D64A0;
	}
	return 0x820D64A0;
} // Block from 820D648Ch-820D64A0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D64A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D64A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D64A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D64A0);
		  /* 820D64A0h */ case    0:  		/* mfspr R12, LR */
		/* 820D64A0h case    0:*/		regs.R12 = regs.LR;
		/* 820D64A0h case    0:*/		return 0x820D64A4;
		  /* 820D64A4h */ case    1:  		/* bl -283228 */
		/* 820D64A4h case    1:*/		regs.LR = 0x820D64A8; return 0x82091248;
		/* 820D64A4h case    1:*/		return 0x820D64A8;
		  /* 820D64A8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820D64A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820D64A8h case    2:*/		return 0x820D64AC;
		  /* 820D64ACh */ case    3:  		/* li R4, 1 */
		/* 820D64ACh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D64ACh case    3:*/		return 0x820D64B0;
		  /* 820D64B0h */ case    4:  		/* mr R28, R3 */
		/* 820D64B0h case    4:*/		regs.R28 = regs.R3;
		/* 820D64B0h case    4:*/		return 0x820D64B4;
		  /* 820D64B4h */ case    5:  		/* bl -4652 */
		/* 820D64B4h case    5:*/		regs.LR = 0x820D64B8; return 0x820D5288;
		/* 820D64B4h case    5:*/		return 0x820D64B8;
		  /* 820D64B8h */ case    6:  		/* mr R26, R3 */
		/* 820D64B8h case    6:*/		regs.R26 = regs.R3;
		/* 820D64B8h case    6:*/		return 0x820D64BC;
		  /* 820D64BCh */ case    7:  		/* bl -442956 */
		/* 820D64BCh case    7:*/		regs.LR = 0x820D64C0; return 0x8206A270;
		/* 820D64BCh case    7:*/		return 0x820D64C0;
		  /* 820D64C0h */ case    8:  		/* or. R25, R3, R3 */
		/* 820D64C0h case    8:*/		cpu::op::or<1>(regs,&regs.R25,regs.R3,regs.R3);
		/* 820D64C0h case    8:*/		return 0x820D64C4;
		  /* 820D64C4h */ case    9:  		/* li R30, 0 */
		/* 820D64C4h case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820D64C4h case    9:*/		return 0x820D64C8;
		  /* 820D64C8h */ case   10:  		/* li R31, 0 */
		/* 820D64C8h case   10:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820D64C8h case   10:*/		return 0x820D64CC;
		  /* 820D64CCh */ case   11:  		/* li R29, 0 */
		/* 820D64CCh case   11:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820D64CCh case   11:*/		return 0x820D64D0;
		  /* 820D64D0h */ case   12:  		/* li R27, 0 */
		/* 820D64D0h case   12:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820D64D0h case   12:*/		return 0x820D64D4;
		  /* 820D64D4h */ case   13:  		/* bc 12, CR0_EQ, 168 */
		/* 820D64D4h case   13:*/		if ( regs.CR[0].eq ) { return 0x820D657C;  }
		/* 820D64D4h case   13:*/		return 0x820D64D8;
		  /* 820D64D8h */ case   14:  		/* li R24, 1 */
		/* 820D64D8h case   14:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 820D64D8h case   14:*/		return 0x820D64DC;
		  /* 820D64DCh */ case   15:  		/* addi R5, R1, 96 */
		/* 820D64DCh case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 820D64DCh case   15:*/		return 0x820D64E0;
		  /* 820D64E0h */ case   16:  		/* mr R4, R27 */
		/* 820D64E0h case   16:*/		regs.R4 = regs.R27;
		/* 820D64E0h case   16:*/		return 0x820D64E4;
		  /* 820D64E4h */ case   17:  		/* mr R3, R26 */
		/* 820D64E4h case   17:*/		regs.R3 = regs.R26;
		/* 820D64E4h case   17:*/		return 0x820D64E8;
		  /* 820D64E8h */ case   18:  		/* bl -442904 */
		/* 820D64E8h case   18:*/		regs.LR = 0x820D64EC; return 0x8206A2D0;
		/* 820D64E8h case   18:*/		return 0x820D64EC;
		  /* 820D64ECh */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 820D64ECh case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D64ECh case   19:*/		return 0x820D64F0;
		  /* 820D64F0h */ case   20:  		/* bc 12, CR0_EQ, 168 */
		/* 820D64F0h case   20:*/		if ( regs.CR[0].eq ) { return 0x820D6598;  }
		/* 820D64F0h case   20:*/		return 0x820D64F4;
		  /* 820D64F4h */ case   21:  		/* lwz R11, <#[R1 + 96]> */
		/* 820D64F4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820D64F4h case   21:*/		return 0x820D64F8;
		  /* 820D64F8h */ case   22:  		/* cmpwi CR6, R11, 0 */
		/* 820D64F8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D64F8h case   22:*/		return 0x820D64FC;
		  /* 820D64FCh */ case   23:  		/* bc 4, CR6_EQ, 104 */
		/* 820D64FCh case   23:*/		if ( !regs.CR[6].eq ) { return 0x820D6564;  }
		/* 820D64FCh case   23:*/		return 0x820D6500;
		  /* 820D6500h */ case   24:  		/* lwz R11, <#[R3]> */
		/* 820D6500h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D6500h case   24:*/		return 0x820D6504;
		  /* 820D6504h */ case   25:  		/* rlwinm. R10, R11, 0, 16, 16 */
		/* 820D6504h case   25:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R10,regs.R11);
		/* 820D6504h case   25:*/		return 0x820D6508;
		  /* 820D6508h */ case   26:  		/* bc 12, CR0_EQ, 92 */
		/* 820D6508h case   26:*/		if ( regs.CR[0].eq ) { return 0x820D6564;  }
		/* 820D6508h case   26:*/		return 0x820D650C;
		  /* 820D650Ch */ case   27:  		/* lwz R10, <#[R28 + 72]> */
		/* 820D650Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000048) );
		/* 820D650Ch case   27:*/		return 0x820D6510;
		  /* 820D6510h */ case   28:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 820D6510h case   28:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 820D6510h case   28:*/		return 0x820D6514;
		  /* 820D6514h */ case   29:  		/* cmpwi CR6, R10, 1 */
		/* 820D6514h case   29:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 820D6514h case   29:*/		return 0x820D6518;
		  /* 820D6518h */ case   30:  		/* bc 4, CR6_EQ, 36 */
		/* 820D6518h case   30:*/		if ( !regs.CR[6].eq ) { return 0x820D653C;  }
		/* 820D6518h case   30:*/		return 0x820D651C;
		  /* 820D651Ch */ case   31:  		/* cmplwi CR6, R11, 4 */
		/* 820D651Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 820D651Ch case   31:*/		return 0x820D6520;
		  /* 820D6520h */ case   32:  		/* bc 12, CR6_LT, 36 */
		/* 820D6520h case   32:*/		if ( regs.CR[6].lt ) { return 0x820D6544;  }
		/* 820D6520h case   32:*/		return 0x820D6524;
		  /* 820D6524h */ case   33:  		/* cmplwi CR6, R11, 61 */
		/* 820D6524h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003D);
		/* 820D6524h case   33:*/		return 0x820D6528;
		  /* 820D6528h */ case   34:  		/* bc 4, CR6_EQ, 60 */
		/* 820D6528h case   34:*/		if ( !regs.CR[6].eq ) { return 0x820D6564;  }
		/* 820D6528h case   34:*/		return 0x820D652C;
		  /* 820D652Ch */ case   35:  		/* lwz R11, <#[R28 + 296]> */
		/* 820D652Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000128) );
		/* 820D652Ch case   35:*/		return 0x820D6530;
		  /* 820D6530h */ case   36:  		/* oris R11, R11, 2048 */
		/* 820D6530h case   36:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 820D6530h case   36:*/		return 0x820D6534;
		  /* 820D6534h */ case   37:  		/* stw R11, <#[R28 + 296]> */
		/* 820D6534h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000128) );
		/* 820D6534h case   37:*/		return 0x820D6538;
		  /* 820D6538h */ case   38:  		/* b 44 */
		/* 820D6538h case   38:*/		return 0x820D6564;
		/* 820D6538h case   38:*/		return 0x820D653C;
	}
	return 0x820D653C;
} // Block from 820D64A0h-820D653Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 820D653Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D653C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D653C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D653C);
		  /* 820D653Ch */ case    0:  		/* cmplwi CR6, R11, 15 */
		/* 820D653Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 820D653Ch case    0:*/		return 0x820D6540;
		  /* 820D6540h */ case    1:  		/* bc 12, CR6_GT, 36 */
		/* 820D6540h case    1:*/		if ( regs.CR[6].gt ) { return 0x820D6564;  }
		/* 820D6540h case    1:*/		return 0x820D6544;
	}
	return 0x820D6544;
} // Block from 820D653Ch-820D6544h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D6544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6544);
		  /* 820D6544h */ case    0:  		/* slw R10, R24, R11 */
		/* 820D6544h case    0:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R11);
		/* 820D6544h case    0:*/		return 0x820D6548;
		  /* 820D6548h */ case    1:  		/* and. R9, R10, R31 */
		/* 820D6548h case    1:*/		cpu::op::and<1>(regs,&regs.R9,regs.R10,regs.R31);
		/* 820D6548h case    1:*/		return 0x820D654C;
		  /* 820D654Ch */ case    2:  		/* bc 4, CR0_EQ, 24 */
		/* 820D654Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x820D6564;  }
		/* 820D654Ch case    2:*/		return 0x820D6550;
		  /* 820D6550h */ case    3:  		/* cmpw CR6, R30, R11 */
		/* 820D6550h case    3:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 820D6550h case    3:*/		return 0x820D6554;
		  /* 820D6554h */ case    4:  		/* addi R29, R29, 1 */
		/* 820D6554h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820D6554h case    4:*/		return 0x820D6558;
		  /* 820D6558h */ case    5:  		/* or R31, R10, R31 */
		/* 820D6558h case    5:*/		cpu::op::or<0>(regs,&regs.R31,regs.R10,regs.R31);
		/* 820D6558h case    5:*/		return 0x820D655C;
		  /* 820D655Ch */ case    6:  		/* bc 4, CR6_LT, 8 */
		/* 820D655Ch case    6:*/		if ( !regs.CR[6].lt ) { return 0x820D6564;  }
		/* 820D655Ch case    6:*/		return 0x820D6560;
		  /* 820D6560h */ case    7:  		/* mr R30, R11 */
		/* 820D6560h case    7:*/		regs.R30 = regs.R11;
		/* 820D6560h case    7:*/		return 0x820D6564;
	}
	return 0x820D6564;
} // Block from 820D6544h-820D6564h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D6564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6564);
		  /* 820D6564h */ case    0:  		/* addi R27, R27, 1 */
		/* 820D6564h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 820D6564h case    0:*/		return 0x820D6568;
		  /* 820D6568h */ case    1:  		/* cmplw CR6, R27, R25 */
		/* 820D6568h case    1:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R25);
		/* 820D6568h case    1:*/		return 0x820D656C;
		  /* 820D656Ch */ case    2:  		/* bc 12, CR6_LT, -144 */
		/* 820D656Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x820D64DC;  }
		/* 820D656Ch case    2:*/		return 0x820D6570;
		  /* 820D6570h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 820D6570h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820D6570h case    3:*/		return 0x820D6574;
		  /* 820D6574h */ case    4:  		/* addi R11, R30, 1 */
		/* 820D6574h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x1);
		/* 820D6574h case    4:*/		return 0x820D6578;
		  /* 820D6578h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 820D6578h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820D6580;  }
		/* 820D6578h case    5:*/		return 0x820D657C;
	}
	return 0x820D657C;
} // Block from 820D6564h-820D657Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D657Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D657C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D657C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D657C);
		  /* 820D657Ch */ case    0:  		/* li R11, 0 */
		/* 820D657Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820D657Ch case    0:*/		return 0x820D6580;
	}
	return 0x820D6580;
} // Block from 820D657Ch-820D6580h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D6580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6580);
		  /* 820D6580h */ case    0:  		/* lwz R10, <#[R28 + 72]> */
		/* 820D6580h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000048) );
		/* 820D6580h case    0:*/		return 0x820D6584;
		  /* 820D6584h */ case    1:  		/* cmpwi CR6, R10, 1 */
		/* 820D6584h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 820D6584h case    1:*/		return 0x820D6588;
		  /* 820D6588h */ case    2:  		/* bc 4, CR6_EQ, 36 */
		/* 820D6588h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820D65AC;  }
		/* 820D6588h case    2:*/		return 0x820D658C;
		  /* 820D658Ch */ case    3:  		/* lwz R10, <#[R28 + 296]> */
		/* 820D658Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000128) );
		/* 820D658Ch case    3:*/		return 0x820D6590;
		  /* 820D6590h */ case    4:  		/* rlwimi R10, R11, 28, 1, 3 */
		/* 820D6590h case    4:*/		cpu::op::rlwimi<0,28,1,3>(regs,&regs.R10,regs.R11);
		/* 820D6590h case    4:*/		return 0x820D6594;
		  /* 820D6594h */ case    5:  		/* b 60 */
		/* 820D6594h case    5:*/		return 0x820D65D0;
		/* 820D6594h case    5:*/		return 0x820D6598;
	}
	return 0x820D6598;
} // Block from 820D6580h-820D6598h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D6598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6598);
		  /* 820D6598h */ case    0:  		/* lis R11, -32255 */
		/* 820D6598h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6598h case    0:*/		return 0x820D659C;
		  /* 820D659Ch */ case    1:  		/* mr R3, R28 */
		/* 820D659Ch case    1:*/		regs.R3 = regs.R28;
		/* 820D659Ch case    1:*/		return 0x820D65A0;
		  /* 820D65A0h */ case    2:  		/* addi R4, R11, 31692 */
		/* 820D65A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7BCC);
		/* 820D65A0h case    2:*/		return 0x820D65A4;
		  /* 820D65A4h */ case    3:  		/* bl -23740 */
		/* 820D65A4h case    3:*/		regs.LR = 0x820D65A8; return 0x820D08E8;
		/* 820D65A4h case    3:*/		return 0x820D65A8;
		  /* 820D65A8h */ case    4:  		/* b 44 */
		/* 820D65A8h case    4:*/		return 0x820D65D4;
		/* 820D65A8h case    4:*/		return 0x820D65AC;
	}
	return 0x820D65AC;
} // Block from 820D6598h-820D65ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D65ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D65AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D65AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D65AC);
		  /* 820D65ACh */ case    0:  		/* lwz R10, <#[R28 + 104]> */
		/* 820D65ACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000068) );
		/* 820D65ACh case    0:*/		return 0x820D65B0;
		  /* 820D65B0h */ case    1:  		/* rlwinm. R10, R10, 0, 28, 28 */
		/* 820D65B0h case    1:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R10,regs.R10);
		/* 820D65B0h case    1:*/		return 0x820D65B4;
		  /* 820D65B4h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 820D65B4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820D65BC;  }
		/* 820D65B4h case    2:*/		return 0x820D65B8;
		  /* 820D65B8h */ case    3:  		/* mr R11, R29 */
		/* 820D65B8h case    3:*/		regs.R11 = regs.R29;
		/* 820D65B8h case    3:*/		return 0x820D65BC;
	}
	return 0x820D65BC;
} // Block from 820D65ACh-820D65BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D65BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D65BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D65BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D65BC);
		  /* 820D65BCh */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 820D65BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D65BCh case    0:*/		return 0x820D65C0;
		  /* 820D65C0h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 820D65C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820D65C8;  }
		/* 820D65C0h case    1:*/		return 0x820D65C4;
		  /* 820D65C4h */ case    2:  		/* addi R11, R11, -1 */
		/* 820D65C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820D65C4h case    2:*/		return 0x820D65C8;
	}
	return 0x820D65C8;
} // Block from 820D65BCh-820D65C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D65C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D65C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D65C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D65C8);
		  /* 820D65C8h */ case    0:  		/* lwz R10, <#[R28 + 296]> */
		/* 820D65C8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000128) );
		/* 820D65C8h case    0:*/		return 0x820D65CC;
		  /* 820D65CCh */ case    1:  		/* rlwimi R10, R11, 20, 8, 11 */
		/* 820D65CCh case    1:*/		cpu::op::rlwimi<0,20,8,11>(regs,&regs.R10,regs.R11);
		/* 820D65CCh case    1:*/		return 0x820D65D0;
	}
	return 0x820D65D0;
} // Block from 820D65C8h-820D65D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D65D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D65D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D65D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D65D0);
		  /* 820D65D0h */ case    0:  		/* stw R10, <#[R28 + 296]> */
		/* 820D65D0h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000128) );
		/* 820D65D0h case    0:*/		return 0x820D65D4;
	}
	return 0x820D65D4;
} // Block from 820D65D0h-820D65D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D65D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D65D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D65D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D65D4);
		  /* 820D65D4h */ case    0:  		/* addi R1, R1, 176 */
		/* 820D65D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820D65D4h case    0:*/		return 0x820D65D8;
		  /* 820D65D8h */ case    1:  		/* b -283456 */
		/* 820D65D8h case    1:*/		return 0x82091298;
		/* 820D65D8h case    1:*/		return 0x820D65DC;
		  /* 820D65DCh */ case    2:  		/* nop */
		/* 820D65DCh case    2:*/		cpu::op::nop();
		/* 820D65DCh case    2:*/		return 0x820D65E0;
	}
	return 0x820D65E0;
} // Block from 820D65D4h-820D65E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D65E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D65E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D65E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D65E0);
		  /* 820D65E0h */ case    0:  		/* mfspr R12, LR */
		/* 820D65E0h case    0:*/		regs.R12 = regs.LR;
		/* 820D65E0h case    0:*/		return 0x820D65E4;
		  /* 820D65E4h */ case    1:  		/* bl -283552 */
		/* 820D65E4h case    1:*/		regs.LR = 0x820D65E8; return 0x82091244;
		/* 820D65E4h case    1:*/		return 0x820D65E8;
		  /* 820D65E8h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 820D65E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 820D65E8h case    2:*/		return 0x820D65EC;
		  /* 820D65ECh */ case    3:  		/* addi R11, R1, 120 */
		/* 820D65ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 820D65ECh case    3:*/		return 0x820D65F0;
		  /* 820D65F0h */ case    4:  		/* li R24, 0 */
		/* 820D65F0h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820D65F0h case    4:*/		return 0x820D65F4;
		  /* 820D65F4h */ case    5:  		/* mr R30, R3 */
		/* 820D65F4h case    5:*/		regs.R30 = regs.R3;
		/* 820D65F4h case    5:*/		return 0x820D65F8;
		  /* 820D65F8h */ case    6:  		/* stw R24, <#[R3 + 308]> */
		/* 820D65F8h case    6:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000134) );
		/* 820D65F8h case    6:*/		return 0x820D65FC;
		  /* 820D65FCh */ case    7:  		/* mr R27, R4 */
		/* 820D65FCh case    7:*/		regs.R27 = regs.R4;
		/* 820D65FCh case    7:*/		return 0x820D6600;
		  /* 820D6600h */ case    8:  		/* lwz R10, <#[R4 + 88]> */
		/* 820D6600h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000058) );
		/* 820D6600h case    8:*/		return 0x820D6604;
		  /* 820D6604h */ case    9:  		/* li R26, 1 */
		/* 820D6604h case    9:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 820D6604h case    9:*/		return 0x820D6608;
		  /* 820D6608h */ case   10:  		/* cmpwi CR6, R10, 0 */
		/* 820D6608h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820D6608h case   10:*/		return 0x820D660C;
		  /* 820D660Ch */ case   11:  		/* std R24, <#[R11]> */
		/* 820D660Ch case   11:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R11 + 0x00000000) );
		/* 820D660Ch case   11:*/		return 0x820D6610;
		  /* 820D6610h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 820D6610h case   12:*/		if ( regs.CR[6].eq ) { return 0x820D6620;  }
		/* 820D6610h case   12:*/		return 0x820D6614;
		  /* 820D6614h */ case   13:  		/* lis R11, -32255 */
		/* 820D6614h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6614h case   13:*/		return 0x820D6618;
		  /* 820D6618h */ case   14:  		/* addi R4, R11, 32060 */
		/* 820D6618h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7D3C);
		/* 820D6618h case   14:*/		return 0x820D661C;
		  /* 820D661Ch */ case   15:  		/* bl -23860 */
		/* 820D661Ch case   15:*/		regs.LR = 0x820D6620; return 0x820D08E8;
		/* 820D661Ch case   15:*/		return 0x820D6620;
	}
	return 0x820D6620;
} // Block from 820D65E0h-820D6620h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820D6620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6620);
		  /* 820D6620h */ case    0:  		/* lwz R28, <#[R27 + 100]> */
		/* 820D6620h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000064) );
		/* 820D6620h case    0:*/		return 0x820D6624;
		  /* 820D6624h */ case    1:  		/* lis R23, 3328 */
		/* 820D6624h case    1:*/		cpu::op::lis<0>(regs,&regs.R23,0xD00);
		/* 820D6624h case    1:*/		return 0x820D6628;
		  /* 820D6628h */ case    2:  		/* lwz R31, <#[R27 + 60]> */
		/* 820D6628h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x0000003C) );
		/* 820D6628h case    2:*/		return 0x820D662C;
		  /* 820D662Ch */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 820D662Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820D662Ch case    3:*/		return 0x820D6630;
		  /* 820D6630h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 820D6630h case    4:*/		if ( regs.CR[6].eq ) { return 0x820D6644;  }
		/* 820D6630h case    4:*/		return 0x820D6634;
		  /* 820D6634h */ case    5:  		/* lwz R11, <#[R28 + 20]> */
		/* 820D6634h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 820D6634h case    5:*/		return 0x820D6638;
		  /* 820D6638h */ case    6:  		/* mr R25, R26 */
		/* 820D6638h case    6:*/		regs.R25 = regs.R26;
		/* 820D6638h case    6:*/		return 0x820D663C;
		  /* 820D663Ch */ case    7:  		/* cmplw CR6, R11, R23 */
		/* 820D663Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 820D663Ch case    7:*/		return 0x820D6640;
		  /* 820D6640h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 820D6640h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820D6648;  }
		/* 820D6640h case    8:*/		return 0x820D6644;
	}
	return 0x820D6644;
} // Block from 820D6620h-820D6644h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D6644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6644);
		  /* 820D6644h */ case    0:  		/* mr R25, R24 */
		/* 820D6644h case    0:*/		regs.R25 = regs.R24;
		/* 820D6644h case    0:*/		return 0x820D6648;
	}
	return 0x820D6648;
} // Block from 820D6644h-820D6648h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D6648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6648);
		  /* 820D6648h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 820D6648h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820D6648h case    0:*/		return 0x820D664C;
		  /* 820D664Ch */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 820D664Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820D6688;  }
		/* 820D664Ch case    1:*/		return 0x820D6650;
		  /* 820D6650h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 820D6650h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820D6650h case    2:*/		return 0x820D6654;
		  /* 820D6654h */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 820D6654h case    3:*/		if ( regs.CR[6].eq ) { return 0x820D6678;  }
		/* 820D6654h case    3:*/		return 0x820D6658;
		  /* 820D6658h */ case    4:  		/* cmplwi CR6, R31, 2 */
		/* 820D6658h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000002);
		/* 820D6658h case    4:*/		return 0x820D665C;
		  /* 820D665Ch */ case    5:  		/* bc 4, CR6_GT, 44 */
		/* 820D665Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x820D6688;  }
		/* 820D665Ch case    5:*/		return 0x820D6660;
		  /* 820D6660h */ case    6:  		/* cmplwi CR6, R31, 8 */
		/* 820D6660h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000008);
		/* 820D6660h case    6:*/		return 0x820D6664;
		  /* 820D6664h */ case    7:  		/* bc 12, CR6_EQ, 36 */
		/* 820D6664h case    7:*/		if ( regs.CR[6].eq ) { return 0x820D6688;  }
		/* 820D6664h case    7:*/		return 0x820D6668;
		  /* 820D6668h */ case    8:  		/* cmplwi CR6, R31, 249 */
		/* 820D6668h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x000000F9);
		/* 820D6668h case    8:*/		return 0x820D666C;
		  /* 820D666Ch */ case    9:  		/* bc 4, CR6_GT, 12 */
		/* 820D666Ch case    9:*/		if ( !regs.CR[6].gt ) { return 0x820D6678;  }
		/* 820D666Ch case    9:*/		return 0x820D6670;
		  /* 820D6670h */ case   10:  		/* cmplwi CR6, R31, 251 */
		/* 820D6670h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x000000FB);
		/* 820D6670h case   10:*/		return 0x820D6674;
		  /* 820D6674h */ case   11:  		/* bc 4, CR6_GT, 20 */
		/* 820D6674h case   11:*/		if ( !regs.CR[6].gt ) { return 0x820D6688;  }
		/* 820D6674h case   11:*/		return 0x820D6678;
	}
	return 0x820D6678;
} // Block from 820D6648h-820D6678h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D6678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6678);
		  /* 820D6678h */ case    0:  		/* lis R11, -32255 */
		/* 820D6678h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6678h case    0:*/		return 0x820D667C;
		  /* 820D667Ch */ case    1:  		/* mr R3, R30 */
		/* 820D667Ch case    1:*/		regs.R3 = regs.R30;
		/* 820D667Ch case    1:*/		return 0x820D6680;
		  /* 820D6680h */ case    2:  		/* addi R4, R11, 32020 */
		/* 820D6680h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7D14);
		/* 820D6680h case    2:*/		return 0x820D6684;
		  /* 820D6684h */ case    3:  		/* bl -23964 */
		/* 820D6684h case    3:*/		regs.LR = 0x820D6688; return 0x820D08E8;
		/* 820D6684h case    3:*/		return 0x820D6688;
	}
	return 0x820D6688;
} // Block from 820D6678h-820D6688h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D6688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6688);
		  /* 820D6688h */ case    0:  		/* lwz R11, <#[R1 + 124]> */
		/* 820D6688h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6688h case    0:*/		return 0x820D668C;
		  /* 820D668Ch */ case    1:  		/* li R4, 1 */
		/* 820D668Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D668Ch case    1:*/		return 0x820D6690;
		  /* 820D6690h */ case    2:  		/* mr R3, R30 */
		/* 820D6690h case    2:*/		regs.R3 = regs.R30;
		/* 820D6690h case    2:*/		return 0x820D6694;
		  /* 820D6694h */ case    3:  		/* rlwimi R11, R31, 12, 16, 19 */
		/* 820D6694h case    3:*/		cpu::op::rlwimi<0,12,16,19>(regs,&regs.R11,regs.R31);
		/* 820D6694h case    3:*/		return 0x820D6698;
		  /* 820D6698h */ case    4:  		/* stw R11, <#[R1 + 124]> */
		/* 820D6698h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6698h case    4:*/		return 0x820D669C;
		  /* 820D669Ch */ case    5:  		/* bl -5140 */
		/* 820D669Ch case    5:*/		regs.LR = 0x820D66A0; return 0x820D5288;
		/* 820D669Ch case    5:*/		return 0x820D66A0;
		  /* 820D66A0h */ case    6:  		/* bl -443440 */
		/* 820D66A0h case    6:*/		regs.LR = 0x820D66A4; return 0x8206A270;
		/* 820D66A0h case    6:*/		return 0x820D66A4;
		  /* 820D66A4h */ case    7:  		/* slw R11, R26, R31 */
		/* 820D66A4h case    7:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R26,regs.R31);
		/* 820D66A4h case    7:*/		return 0x820D66A8;
		  /* 820D66A8h */ case    8:  		/* andi. R11, R11, 16404 */
		/* 820D66A8h case    8:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0x4014);
		/* 820D66A8h case    8:*/		return 0x820D66AC;
		  /* 820D66ACh */ case    9:  		/* mr R29, R3 */
		/* 820D66ACh case    9:*/		regs.R29 = regs.R3;
		/* 820D66ACh case    9:*/		return 0x820D66B0;
		  /* 820D66B0h */ case   10:  		/* cmpwi CR0, R11, 0 */
		/* 820D66B0h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 820D66B0h case   10:*/		return 0x820D66B4;
		  /* 820D66B4h */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 820D66B4h case   11:*/		if ( regs.CR[0].eq ) { return 0x820D66BC;  }
		/* 820D66B4h case   11:*/		return 0x820D66B8;
		  /* 820D66B8h */ case   12:  		/* stw R26, <#[R30 + 312]> */
		/* 820D66B8h case   12:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x00000138) );
		/* 820D66B8h case   12:*/		return 0x820D66BC;
	}
	return 0x820D66BC;
} // Block from 820D6688h-820D66BCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D66BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D66BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D66BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D66BC);
		  /* 820D66BCh */ case    0:  		/* cmplwi CR6, R31, 30 */
		/* 820D66BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000001E);
		/* 820D66BCh case    0:*/		return 0x820D66C0;
		  /* 820D66C0h */ case    1:  		/* bc 12, CR6_GT, 948 */
		/* 820D66C0h case    1:*/		if ( regs.CR[6].gt ) { return 0x820D6A74;  }
		/* 820D66C0h case    1:*/		return 0x820D66C4;
		  /* 820D66C4h */ case    2:  		/* bc 12, CR6_EQ, 772 */
		/* 820D66C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D69C8;  }
		/* 820D66C4h case    2:*/		return 0x820D66C8;
		  /* 820D66C8h */ case    3:  		/* addi R11, R31, -1 */
		/* 820D66C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 820D66C8h case    3:*/		return 0x820D66CC;
		  /* 820D66CCh */ case    4:  		/* cmplwi CR6, R11, 13 */
		/* 820D66CCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000D);
		/* 820D66CCh case    4:*/		return 0x820D66D0;
		  /* 820D66D0h */ case    5:  		/* bc 12, CR6_GT, 1184 */
		/* 820D66D0h case    5:*/		if ( regs.CR[6].gt ) { return 0x820D6B70;  }
		/* 820D66D0h case    5:*/		return 0x820D66D4;
		  /* 820D66D4h */ case    6:  		/* lis R12, -32255 */
		/* 820D66D4h case    6:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8201);
		/* 820D66D4h case    6:*/		return 0x820D66D8;
		  /* 820D66D8h */ case    7:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 820D66D8h case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 820D66D8h case    7:*/		return 0x820D66DC;
		  /* 820D66DCh */ case    8:  		/* addi R12, R12, 21912 */
		/* 820D66DCh case    8:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x5598);
		/* 820D66DCh case    8:*/		return 0x820D66E0;
		  /* 820D66E0h */ case    9:  		/* lhzx R0, <#[R12 + R0]> */
		/* 820D66E0h case    9:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 820D66E0h case    9:*/		return 0x820D66E4;
		  /* 820D66E4h */ case   10:  		/* lis R12, -32243 */
		/* 820D66E4h case   10:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF820D);
		/* 820D66E4h case   10:*/		return 0x820D66E8;
		  /* 820D66E8h */ case   11:  		/* addi R12, R12, 26364 */
		/* 820D66E8h case   11:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x66FC);
		/* 820D66E8h case   11:*/		return 0x820D66EC;
		  /* 820D66ECh */ case   12:  		/* ori R0, R0, 0 */
		/* 820D66ECh case   12:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 820D66ECh case   12:*/		return 0x820D66F0;
		  /* 820D66F0h */ case   13:  		/* add R12, R12, R0 */
		/* 820D66F0h case   13:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 820D66F0h case   13:*/		return 0x820D66F4;
		  /* 820D66F4h */ case   14:  		/* mtspr CTR, R12 */
		/* 820D66F4h case   14:*/		regs.CTR = regs.R12;
		/* 820D66F4h case   14:*/		return 0x820D66F8;
		  /* 820D66F8h */ case   15:  		/* bcctr 20, CR0_LT */
		/* 820D66F8h case   15:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D66F8h case   15:*/		return 0x820D66FC;
		  /* 820D66FCh */ case   16:  		/* mr R4, R27 */
		/* 820D66FCh case   16:*/		regs.R4 = regs.R27;
		/* 820D66FCh case   16:*/		return 0x820D6700;
		  /* 820D6700h */ case   17:  		/* mr R3, R30 */
		/* 820D6700h case   17:*/		regs.R3 = regs.R30;
		/* 820D6700h case   17:*/		return 0x820D6704;
		  /* 820D6704h */ case   18:  		/* bl -9932 */
		/* 820D6704h case   18:*/		regs.LR = 0x820D6708; return 0x820D4038;
		/* 820D6704h case   18:*/		return 0x820D6708;
		  /* 820D6708h */ case   19:  		/* lwz R11, <#[R1 + 120]> */
		/* 820D6708h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6708h case   19:*/		return 0x820D670C;
		  /* 820D670Ch */ case   20:  		/* cmplwi CR6, R28, 0 */
		/* 820D670Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820D670Ch case   20:*/		return 0x820D6710;
		  /* 820D6710h */ case   21:  		/* rlwimi R11, R3, 15, 16, 16 */
		/* 820D6710h case   21:*/		cpu::op::rlwimi<0,15,16,16>(regs,&regs.R11,regs.R3);
		/* 820D6710h case   21:*/		return 0x820D6714;
		  /* 820D6714h */ case   22:  		/* rlwimi R11, R29, 0, 20, 31 */
		/* 820D6714h case   22:*/		cpu::op::rlwimi<0,0,20,31>(regs,&regs.R11,regs.R29);
		/* 820D6714h case   22:*/		return 0x820D6718;
		  /* 820D6718h */ case   23:  		/* stw R11, <#[R1 + 120]> */
		/* 820D6718h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6718h case   23:*/		return 0x820D671C;
		  /* 820D671Ch */ case   24:  		/* bc 12, CR6_EQ, 1108 */
		/* 820D671Ch case   24:*/		if ( regs.CR[6].eq ) { return 0x820D6B70;  }
		/* 820D671Ch case   24:*/		return 0x820D6720;
		  /* 820D6720h */ case   25:  		/* lis R12, -1 */
		/* 820D6720h case   25:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFFF);
		/* 820D6720h case   25:*/		return 0x820D6724;
		  /* 820D6724h */ case   26:  		/* li R10, 20480 */
		/* 820D6724h case   26:*/		cpu::op::li<0>(regs,&regs.R10,0x5000);
		/* 820D6724h case   26:*/		return 0x820D6728;
		  /* 820D6728h */ case   27:  		/* ori R12, R12, 23551 */
		/* 820D6728h case   27:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x5BFF);
		/* 820D6728h case   27:*/		return 0x820D672C;
		  /* 820D672Ch */ case   28:  		/* lwz R11, <#[R1 + 124]> */
		/* 820D672Ch case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D672Ch case   28:*/		return 0x820D6730;
		  /* 820D6730h */ case   29:  		/* rlwimi R10, R25, 10, 21, 21 */
		/* 820D6730h case   29:*/		cpu::op::rlwimi<0,10,21,21>(regs,&regs.R10,regs.R25);
		/* 820D6730h case   29:*/		return 0x820D6734;
		  /* 820D6734h */ case   30:  		/* and R11, R11, R12 */
		/* 820D6734h case   30:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 820D6734h case   30:*/		return 0x820D6738;
		  /* 820D6738h */ case   31:  		/* or R11, R10, R11 */
		/* 820D6738h case   31:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820D6738h case   31:*/		return 0x820D673C;
		  /* 820D673Ch */ case   32:  		/* stw R11, <#[R1 + 124]> */
		/* 820D673Ch case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D673Ch case   32:*/		return 0x820D6740;
		  /* 820D6740h */ case   33:  		/* b 1072 */
		/* 820D6740h case   33:*/		return 0x820D6B70;
		/* 820D6740h case   33:*/		return 0x820D6744;
		  /* 820D6744h */ case   34:  		/* mr R4, R27 */
		/* 820D6744h case   34:*/		regs.R4 = regs.R27;
		/* 820D6744h case   34:*/		return 0x820D6748;
		  /* 820D6748h */ case   35:  		/* mr R3, R30 */
		/* 820D6748h case   35:*/		regs.R3 = regs.R30;
		/* 820D6748h case   35:*/		return 0x820D674C;
		  /* 820D674Ch */ case   36:  		/* bl -10004 */
		/* 820D674Ch case   36:*/		regs.LR = 0x820D6750; return 0x820D4038;
		/* 820D674Ch case   36:*/		return 0x820D6750;
		  /* 820D6750h */ case   37:  		/* lwz R11, <#[R1 + 120]> */
		/* 820D6750h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6750h case   37:*/		return 0x820D6754;
		  /* 820D6754h */ case   38:  		/* cmplwi CR6, R28, 0 */
		/* 820D6754h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820D6754h case   38:*/		return 0x820D6758;
		  /* 820D6758h */ case   39:  		/* rlwimi R11, R3, 15, 16, 16 */
		/* 820D6758h case   39:*/		cpu::op::rlwimi<0,15,16,16>(regs,&regs.R11,regs.R3);
		/* 820D6758h case   39:*/		return 0x820D675C;
		  /* 820D675Ch */ case   40:  		/* rlwimi R11, R29, 0, 20, 31 */
		/* 820D675Ch case   40:*/		cpu::op::rlwimi<0,0,20,31>(regs,&regs.R11,regs.R29);
		/* 820D675Ch case   40:*/		return 0x820D6760;
		  /* 820D6760h */ case   41:  		/* stw R11, <#[R1 + 120]> */
		/* 820D6760h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6760h case   41:*/		return 0x820D6764;
		  /* 820D6764h */ case   42:  		/* bc 12, CR6_EQ, 1036 */
		/* 820D6764h case   42:*/		if ( regs.CR[6].eq ) { return 0x820D6B70;  }
		/* 820D6764h case   42:*/		return 0x820D6768;
		  /* 820D6768h */ case   43:  		/* lis R12, -1 */
		/* 820D6768h case   43:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFFF);
		/* 820D6768h case   43:*/		return 0x820D676C;
		  /* 820D676Ch */ case   44:  		/* li R10, 24576 */
		/* 820D676Ch case   44:*/		cpu::op::li<0>(regs,&regs.R10,0x6000);
		/* 820D676Ch case   44:*/		return 0x820D6770;
		  /* 820D6770h */ case   45:  		/* ori R12, R12, 27647 */
		/* 820D6770h case   45:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x6BFF);
		/* 820D6770h case   45:*/		return 0x820D6774;
		  /* 820D6774h */ case   46:  		/* b -72 */
		/* 820D6774h case   46:*/		return 0x820D672C;
		/* 820D6774h case   46:*/		return 0x820D6778;
		  /* 820D6778h */ case   47:  		/* mr R4, R27 */
		/* 820D6778h case   47:*/		regs.R4 = regs.R27;
		/* 820D6778h case   47:*/		return 0x820D677C;
		  /* 820D677Ch */ case   48:  		/* mr R3, R30 */
		/* 820D677Ch case   48:*/		regs.R3 = regs.R30;
		/* 820D677Ch case   48:*/		return 0x820D6780;
		  /* 820D6780h */ case   49:  		/* bl -10056 */
		/* 820D6780h case   49:*/		regs.LR = 0x820D6784; return 0x820D4038;
		/* 820D6780h case   49:*/		return 0x820D6784;
		  /* 820D6784h */ case   50:  		/* lwz R10, <#[R1 + 120]> */
		/* 820D6784h case   50:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6784h case   50:*/		return 0x820D6788;
		  /* 820D6788h */ case   51:  		/* lwz R11, <#[R27 + 104]> */
		/* 820D6788h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000068) );
		/* 820D6788h case   51:*/		return 0x820D678C;
		  /* 820D678Ch */ case   52:  		/* rlwimi R10, R3, 15, 16, 16 */
		/* 820D678Ch case   52:*/		cpu::op::rlwimi<0,15,16,16>(regs,&regs.R10,regs.R3);
		/* 820D678Ch case   52:*/		return 0x820D6790;
		  /* 820D6790h */ case   53:  		/* rlwimi R10, R29, 0, 20, 31 */
		/* 820D6790h case   53:*/		cpu::op::rlwimi<0,0,20,31>(regs,&regs.R10,regs.R29);
		/* 820D6790h case   53:*/		return 0x820D6794;
		  /* 820D6794h */ case   54:  		/* stw R10, <#[R1 + 120]> */
		/* 820D6794h case   54:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6794h case   54:*/		return 0x820D6798;
		  /* 820D6798h */ case   55:  		/* lwz R10, <#[R11 + 16]> */
		/* 820D6798h case   55:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 820D6798h case   55:*/		return 0x820D679C;
		  /* 820D679Ch */ case   56:  		/* cmplwi CR6, R10, 14 */
		/* 820D679Ch case   56:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000E);
		/* 820D679Ch case   56:*/		return 0x820D67A0;
		  /* 820D67A0h */ case   57:  		/* bc 4, CR6_EQ, 48 */
		/* 820D67A0h case   57:*/		if ( !regs.CR[6].eq ) { return 0x820D67D0;  }
		/* 820D67A0h case   57:*/		return 0x820D67A4;
		  /* 820D67A4h */ case   58:  		/* lbz R10, <#[R11 + 27]> */
		/* 820D67A4h case   58:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001B) );
		/* 820D67A4h case   58:*/		return 0x820D67A8;
		  /* 820D67A8h */ case   59:  		/* lwz R9, <#[R1 + 124]> */
		/* 820D67A8h case   59:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D67A8h case   59:*/		return 0x820D67AC;
		  /* 820D67ACh */ case   60:  		/* rlwinm R10, R10, 2, 0, 31 */
		/* 820D67ACh case   60:*/		cpu::op::rlwinm<0,2,0,31>(regs,&regs.R10,regs.R10);
		/* 820D67ACh case   60:*/		return 0x820D67B0;
		  /* 820D67B0h */ case   61:  		/* rlwinm R9, R9, 0, 30, 21 */
		/* 820D67B0h case   61:*/		cpu::op::rlwinm<0,0,30,21>(regs,&regs.R9,regs.R9);
		/* 820D67B0h case   61:*/		return 0x820D67B4;
		  /* 820D67B4h */ case   62:  		/* or R10, R10, R9 */
		/* 820D67B4h case   62:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 820D67B4h case   62:*/		return 0x820D67B8;
		  /* 820D67B8h */ case   63:  		/* stw R10, <#[R1 + 124]> */
		/* 820D67B8h case   63:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D67B8h case   63:*/		return 0x820D67BC;
		  /* 820D67BCh */ case   64:  		/* lwz R11, <#[R11 + 20]> */
		/* 820D67BCh case   64:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820D67BCh case   64:*/		return 0x820D67C0;
		  /* 820D67C0h */ case   65:  		/* cmplw CR6, R11, R23 */
		/* 820D67C0h case   65:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 820D67C0h case   65:*/		return 0x820D67C4;
		  /* 820D67C4h */ case   66:  		/* bc 12, CR6_EQ, 940 */
		/* 820D67C4h case   66:*/		if ( regs.CR[6].eq ) { return 0x820D6B70;  }
		/* 820D67C4h case   66:*/		return 0x820D67C8;
		  /* 820D67C8h */ case   67:  		/* ori R11, R10, 1024 */
		/* 820D67C8h case   67:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R10,0x400);
		/* 820D67C8h case   67:*/		return 0x820D67CC;
		  /* 820D67CCh */ case   68:  		/* b -144 */
		/* 820D67CCh case   68:*/		return 0x820D673C;
		/* 820D67CCh case   68:*/		return 0x820D67D0;
	}
	return 0x820D67D0;
} // Block from 820D66BCh-820D67D0h (69 instructions)

//////////////////////////////////////////////////////
// Block at 820D67D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D67D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D67D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D67D0);
		  /* 820D67D0h */ case    0:  		/* lis R11, -32255 */
		/* 820D67D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D67D0h case    0:*/		return 0x820D67D4;
		  /* 820D67D4h */ case    1:  		/* addi R4, R11, 31980 */
		/* 820D67D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7CEC);
		/* 820D67D4h case    1:*/		return 0x820D67D8;
		  /* 820D67D8h */ case    2:  		/* mr R3, R30 */
		/* 820D67D8h case    2:*/		regs.R3 = regs.R30;
		/* 820D67D8h case    2:*/		return 0x820D67DC;
		  /* 820D67DCh */ case    3:  		/* bl -24308 */
		/* 820D67DCh case    3:*/		regs.LR = 0x820D67E0; return 0x820D08E8;
		/* 820D67DCh case    3:*/		return 0x820D67E0;
		  /* 820D67E0h */ case    4:  		/* b 912 */
		/* 820D67E0h case    4:*/		return 0x820D6B70;
		/* 820D67E0h case    4:*/		return 0x820D67E4;
		  /* 820D67E4h */ case    5:  		/* lwz R11, <#[R27 + 104]> */
		/* 820D67E4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000068) );
		/* 820D67E4h case    5:*/		return 0x820D67E8;
		  /* 820D67E8h */ case    6:  		/* lwz R10, <#[R11 + 16]> */
		/* 820D67E8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 820D67E8h case    6:*/		return 0x820D67EC;
		  /* 820D67ECh */ case    7:  		/* cmplwi CR6, R10, 7 */
		/* 820D67ECh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000007);
		/* 820D67ECh case    7:*/		return 0x820D67F0;
		  /* 820D67F0h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 820D67F0h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D6808;  }
		/* 820D67F0h case    8:*/		return 0x820D67F4;
		  /* 820D67F4h */ case    9:  		/* lis R11, -32255 */
		/* 820D67F4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D67F4h case    9:*/		return 0x820D67F8;
		  /* 820D67F8h */ case   10:  		/* mr R3, R30 */
		/* 820D67F8h case   10:*/		regs.R3 = regs.R30;
		/* 820D67F8h case   10:*/		return 0x820D67FC;
		  /* 820D67FCh */ case   11:  		/* addi R4, R11, 31936 */
		/* 820D67FCh case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7CC0);
		/* 820D67FCh case   11:*/		return 0x820D6800;
		  /* 820D6800h */ case   12:  		/* bl -24344 */
		/* 820D6800h case   12:*/		regs.LR = 0x820D6804; return 0x820D08E8;
		/* 820D6800h case   12:*/		return 0x820D6804;
		  /* 820D6804h */ case   13:  		/* b 20 */
		/* 820D6804h case   13:*/		return 0x820D6818;
		/* 820D6804h case   13:*/		return 0x820D6808;
	}
	return 0x820D6808;
} // Block from 820D67D0h-820D6808h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D6808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6808);
		  /* 820D6808h */ case    0:  		/* lwz R11, <#[R11 + 24]> */
		/* 820D6808h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820D6808h case    0:*/		return 0x820D680C;
		  /* 820D680Ch */ case    1:  		/* lwz R10, <#[R1 + 120]> */
		/* 820D680Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D680Ch case    1:*/		return 0x820D6810;
		  /* 820D6810h */ case    2:  		/* rlwimi R10, R11, 16, 11, 15 */
		/* 820D6810h case    2:*/		cpu::op::rlwimi<0,16,11,15>(regs,&regs.R10,regs.R11);
		/* 820D6810h case    2:*/		return 0x820D6814;
		  /* 820D6814h */ case    3:  		/* stw R10, <#[R1 + 120]> */
		/* 820D6814h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6814h case    3:*/		return 0x820D6818;
	}
	return 0x820D6818;
} // Block from 820D6808h-820D6818h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D6818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6818);
		  /* 820D6818h */ case    0:  		/* li R5, 1 */
		/* 820D6818h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D6818h case    0:*/		return 0x820D681C;
		  /* 820D681Ch */ case    1:  		/* mr R4, R27 */
		/* 820D681Ch case    1:*/		regs.R4 = regs.R27;
		/* 820D681Ch case    1:*/		return 0x820D6820;
		  /* 820D6820h */ case    2:  		/* mr R3, R30 */
		/* 820D6820h case    2:*/		regs.R3 = regs.R30;
		/* 820D6820h case    2:*/		return 0x820D6824;
		  /* 820D6824h */ case    3:  		/* bl -1332 */
		/* 820D6824h case    3:*/		regs.LR = 0x820D6828; return 0x820D62F0;
		/* 820D6824h case    3:*/		return 0x820D6828;
		  /* 820D6828h */ case    4:  		/* lis R11, -32255 */
		/* 820D6828h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6828h case    4:*/		return 0x820D682C;
		  /* 820D682Ch */ case    5:  		/* li R6, 1 */
		/* 820D682Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820D682Ch case    5:*/		return 0x820D6830;
		  /* 820D6830h */ case    6:  		/* addi R5, R11, 31928 */
		/* 820D6830h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x7CB8);
		/* 820D6830h case    6:*/		return 0x820D6834;
		  /* 820D6834h */ case    7:  		/* mr R4, R27 */
		/* 820D6834h case    7:*/		regs.R4 = regs.R27;
		/* 820D6834h case    7:*/		return 0x820D6838;
		  /* 820D6838h */ case    8:  		/* mr R3, R30 */
		/* 820D6838h case    8:*/		regs.R3 = regs.R30;
		/* 820D6838h case    8:*/		return 0x820D683C;
		  /* 820D683Ch */ case    9:  		/* bl -10508 */
		/* 820D683Ch case    9:*/		regs.LR = 0x820D6840; return 0x820D3F30;
		/* 820D683Ch case    9:*/		return 0x820D6840;
		  /* 820D6840h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 820D6840h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D6840h case   10:*/		return 0x820D6844;
		  /* 820D6844h */ case   11:  		/* bc 12, CR0_EQ, 812 */
		/* 820D6844h case   11:*/		if ( regs.CR[0].eq ) { return 0x820D6B70;  }
		/* 820D6844h case   11:*/		return 0x820D6848;
		  /* 820D6848h */ case   12:  		/* addi R4, R1, 112 */
		/* 820D6848h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D6848h case   12:*/		return 0x820D684C;
		  /* 820D684Ch */ case   13:  		/* stw R24, <#[R1 + 112]> */
		/* 820D684Ch case   13:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000070) );
		/* 820D684Ch case   13:*/		return 0x820D6850;
		  /* 820D6850h */ case   14:  		/* bl -29752 */
		/* 820D6850h case   14:*/		regs.LR = 0x820D6854; return 0x820CF418;
		/* 820D6850h case   14:*/		return 0x820D6854;
		  /* 820D6854h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820D6854h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D6854h case   15:*/		return 0x820D6858;
		  /* 820D6858h */ case   16:  		/* bc 12, CR0_LT, 24 */
		/* 820D6858h case   16:*/		if ( regs.CR[0].lt ) { return 0x820D6870;  }
		/* 820D6858h case   16:*/		return 0x820D685C;
		  /* 820D685Ch */ case   17:  		/* lwz R11, <#[R1 + 120]> */
		/* 820D685Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820D685Ch case   17:*/		return 0x820D6860;
		  /* 820D6860h */ case   18:  		/* lwz R10, <#[R1 + 112]> */
		/* 820D6860h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6860h case   18:*/		return 0x820D6864;
		  /* 820D6864h */ case   19:  		/* rlwimi R11, R10, 13, 18, 18 */
		/* 820D6864h case   19:*/		cpu::op::rlwimi<0,13,18,18>(regs,&regs.R11,regs.R10);
		/* 820D6864h case   19:*/		return 0x820D6868;
		  /* 820D6868h */ case   20:  		/* stw R11, <#[R1 + 120]> */
		/* 820D6868h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6868h case   20:*/		return 0x820D686C;
		  /* 820D686Ch */ case   21:  		/* b 772 */
		/* 820D686Ch case   21:*/		return 0x820D6B70;
		/* 820D686Ch case   21:*/		return 0x820D6870;
	}
	return 0x820D6870;
} // Block from 820D6818h-820D6870h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820D6870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6870);
		  /* 820D6870h */ case    0:  		/* lis R11, -32255 */
		/* 820D6870h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6870h case    0:*/		return 0x820D6874;
		  /* 820D6874h */ case    1:  		/* addi R4, R11, 31884 */
		/* 820D6874h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7C8C);
		/* 820D6874h case    1:*/		return 0x820D6878;
		  /* 820D6878h */ case    2:  		/* b -160 */
		/* 820D6878h case    2:*/		return 0x820D67D8;
		/* 820D6878h case    2:*/		return 0x820D687C;
		  /* 820D687Ch */ case    3:  		/* lwz R11, <#[R27 + 104]> */
		/* 820D687Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000068) );
		/* 820D687Ch case    3:*/		return 0x820D6880;
		  /* 820D6880h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 820D6880h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 820D6880h case    4:*/		return 0x820D6884;
		  /* 820D6884h */ case    5:  		/* cmplwi CR6, R10, 7 */
		/* 820D6884h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000007);
		/* 820D6884h case    5:*/		return 0x820D6888;
		  /* 820D6888h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 820D6888h case    6:*/		if ( regs.CR[6].eq ) { return 0x820D68A0;  }
		/* 820D6888h case    6:*/		return 0x820D688C;
		  /* 820D688Ch */ case    7:  		/* lis R11, -32255 */
		/* 820D688Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D688Ch case    7:*/		return 0x820D6890;
		  /* 820D6890h */ case    8:  		/* mr R3, R30 */
		/* 820D6890h case    8:*/		regs.R3 = regs.R30;
		/* 820D6890h case    8:*/		return 0x820D6894;
		  /* 820D6894h */ case    9:  		/* addi R4, R11, 31936 */
		/* 820D6894h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7CC0);
		/* 820D6894h case    9:*/		return 0x820D6898;
		  /* 820D6898h */ case   10:  		/* bl -24496 */
		/* 820D6898h case   10:*/		regs.LR = 0x820D689C; return 0x820D08E8;
		/* 820D6898h case   10:*/		return 0x820D689C;
		  /* 820D689Ch */ case   11:  		/* b 20 */
		/* 820D689Ch case   11:*/		return 0x820D68B0;
		/* 820D689Ch case   11:*/		return 0x820D68A0;
	}
	return 0x820D68A0;
} // Block from 820D6870h-820D68A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D68A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D68A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D68A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D68A0);
		  /* 820D68A0h */ case    0:  		/* lwz R11, <#[R11 + 24]> */
		/* 820D68A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820D68A0h case    0:*/		return 0x820D68A4;
		  /* 820D68A4h */ case    1:  		/* lwz R10, <#[R1 + 120]> */
		/* 820D68A4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D68A4h case    1:*/		return 0x820D68A8;
		  /* 820D68A8h */ case    2:  		/* rlwimi R10, R11, 16, 11, 15 */
		/* 820D68A8h case    2:*/		cpu::op::rlwimi<0,16,11,15>(regs,&regs.R10,regs.R11);
		/* 820D68A8h case    2:*/		return 0x820D68AC;
		  /* 820D68ACh */ case    3:  		/* stw R10, <#[R1 + 120]> */
		/* 820D68ACh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D68ACh case    3:*/		return 0x820D68B0;
	}
	return 0x820D68B0;
} // Block from 820D68A0h-820D68B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D68B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D68B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D68B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D68B0);
		  /* 820D68B0h */ case    0:  		/* li R5, 1 */
		/* 820D68B0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D68B0h case    0:*/		return 0x820D68B4;
		  /* 820D68B4h */ case    1:  		/* mr R4, R27 */
		/* 820D68B4h case    1:*/		regs.R4 = regs.R27;
		/* 820D68B4h case    1:*/		return 0x820D68B8;
		  /* 820D68B8h */ case    2:  		/* mr R3, R30 */
		/* 820D68B8h case    2:*/		regs.R3 = regs.R30;
		/* 820D68B8h case    2:*/		return 0x820D68BC;
		  /* 820D68BCh */ case    3:  		/* bl -1484 */
		/* 820D68BCh case    3:*/		regs.LR = 0x820D68C0; return 0x820D62F0;
		/* 820D68BCh case    3:*/		return 0x820D68C0;
		  /* 820D68C0h */ case    4:  		/* lwz R11, <#[R27 + 100]> */
		/* 820D68C0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000064) );
		/* 820D68C0h case    4:*/		return 0x820D68C4;
		  /* 820D68C4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820D68C4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D68C4h case    5:*/		return 0x820D68C8;
		  /* 820D68C8h */ case    6:  		/* bc 12, CR6_EQ, 680 */
		/* 820D68C8h case    6:*/		if ( regs.CR[6].eq ) { return 0x820D6B70;  }
		/* 820D68C8h case    6:*/		return 0x820D68CC;
		  /* 820D68CCh */ case    7:  		/* lwz R10, <#[R1 + 120]> */
		/* 820D68CCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D68CCh case    7:*/		return 0x820D68D0;
		  /* 820D68D0h */ case    8:  		/* oris R10, R10, 32 */
		/* 820D68D0h case    8:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x20);
		/* 820D68D0h case    8:*/		return 0x820D68D4;
		  /* 820D68D4h */ case    9:  		/* stw R10, <#[R1 + 120]> */
		/* 820D68D4h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D68D4h case    9:*/		return 0x820D68D8;
		  /* 820D68D8h */ case   10:  		/* lwz R11, <#[R11 + 20]> */
		/* 820D68D8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820D68D8h case   10:*/		return 0x820D68DC;
		  /* 820D68DCh */ case   11:  		/* cmplw CR6, R11, R23 */
		/* 820D68DCh case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 820D68DCh case   11:*/		return 0x820D68E0;
		  /* 820D68E0h */ case   12:  		/* bc 12, CR6_EQ, 656 */
		/* 820D68E0h case   12:*/		if ( regs.CR[6].eq ) { return 0x820D6B70;  }
		/* 820D68E0h case   12:*/		return 0x820D68E4;
		  /* 820D68E4h */ case   13:  		/* lwz R11, <#[R1 + 124]> */
		/* 820D68E4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D68E4h case   13:*/		return 0x820D68E8;
		  /* 820D68E8h */ case   14:  		/* ori R11, R11, 1024 */
		/* 820D68E8h case   14:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x400);
		/* 820D68E8h case   14:*/		return 0x820D68EC;
		  /* 820D68ECh */ case   15:  		/* b -432 */
		/* 820D68ECh case   15:*/		return 0x820D673C;
		/* 820D68ECh case   15:*/		return 0x820D68F0;
		  /* 820D68F0h */ case   16:  		/* lis R11, -32255 */
		/* 820D68F0h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D68F0h case   16:*/		return 0x820D68F4;
		  /* 820D68F4h */ case   17:  		/* li R6, 1 */
		/* 820D68F4h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820D68F4h case   17:*/		return 0x820D68F8;
		  /* 820D68F8h */ case   18:  		/* addi R5, R11, 31872 */
		/* 820D68F8h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x7C80);
		/* 820D68F8h case   18:*/		return 0x820D68FC;
		  /* 820D68FCh */ case   19:  		/* mr R4, R27 */
		/* 820D68FCh case   19:*/		regs.R4 = regs.R27;
		/* 820D68FCh case   19:*/		return 0x820D6900;
		  /* 820D6900h */ case   20:  		/* mr R3, R30 */
		/* 820D6900h case   20:*/		regs.R3 = regs.R30;
		/* 820D6900h case   20:*/		return 0x820D6904;
		  /* 820D6904h */ case   21:  		/* bl -10708 */
		/* 820D6904h case   21:*/		regs.LR = 0x820D6908; return 0x820D3F30;
		/* 820D6904h case   21:*/		return 0x820D6908;
		  /* 820D6908h */ case   22:  		/* cmplwi CR0, R3, 0 */
		/* 820D6908h case   22:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D6908h case   22:*/		return 0x820D690C;
		  /* 820D690Ch */ case   23:  		/* bc 12, CR0_EQ, 60 */
		/* 820D690Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x820D6948;  }
		/* 820D690Ch case   23:*/		return 0x820D6910;
		  /* 820D6910h */ case   24:  		/* addi R4, R1, 112 */
		/* 820D6910h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D6910h case   24:*/		return 0x820D6914;
		  /* 820D6914h */ case   25:  		/* stw R24, <#[R1 + 112]> */
		/* 820D6914h case   25:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6914h case   25:*/		return 0x820D6918;
		  /* 820D6918h */ case   26:  		/* bl -29952 */
		/* 820D6918h case   26:*/		regs.LR = 0x820D691C; return 0x820CF418;
		/* 820D6918h case   26:*/		return 0x820D691C;
		  /* 820D691Ch */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 820D691Ch case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D691Ch case   27:*/		return 0x820D6920;
		  /* 820D6920h */ case   28:  		/* bc 12, CR0_LT, 24 */
		/* 820D6920h case   28:*/		if ( regs.CR[0].lt ) { return 0x820D6938;  }
		/* 820D6920h case   28:*/		return 0x820D6924;
		  /* 820D6924h */ case   29:  		/* lwz R11, <#[R1 + 124]> */
		/* 820D6924h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6924h case   29:*/		return 0x820D6928;
		  /* 820D6928h */ case   30:  		/* lwz R10, <#[R1 + 112]> */
		/* 820D6928h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6928h case   30:*/		return 0x820D692C;
		  /* 820D692Ch */ case   31:  		/* rlwimi R11, R10, 1, 30, 30 */
		/* 820D692Ch case   31:*/		cpu::op::rlwimi<0,1,30,30>(regs,&regs.R11,regs.R10);
		/* 820D692Ch case   31:*/		return 0x820D6930;
		  /* 820D6930h */ case   32:  		/* stw R11, <#[R1 + 124]> */
		/* 820D6930h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6930h case   32:*/		return 0x820D6934;
		  /* 820D6934h */ case   33:  		/* b 24 */
		/* 820D6934h case   33:*/		return 0x820D694C;
		/* 820D6934h case   33:*/		return 0x820D6938;
	}
	return 0x820D6938;
} // Block from 820D68B0h-820D6938h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820D6938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6938);
		  /* 820D6938h */ case    0:  		/* lis R11, -32255 */
		/* 820D6938h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6938h case    0:*/		return 0x820D693C;
		  /* 820D693Ch */ case    1:  		/* mr R3, R30 */
		/* 820D693Ch case    1:*/		regs.R3 = regs.R30;
		/* 820D693Ch case    1:*/		return 0x820D6940;
		  /* 820D6940h */ case    2:  		/* addi R4, R11, 31820 */
		/* 820D6940h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7C4C);
		/* 820D6940h case    2:*/		return 0x820D6944;
		  /* 820D6944h */ case    3:  		/* bl -24668 */
		/* 820D6944h case    3:*/		regs.LR = 0x820D6948; return 0x820D08E8;
		/* 820D6944h case    3:*/		return 0x820D6948;
	}
	return 0x820D6948;
} // Block from 820D6938h-820D6948h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D6948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6948);
		  /* 820D6948h */ case    0:  		/* lwz R11, <#[R1 + 124]> */
		/* 820D6948h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6948h case    0:*/		return 0x820D694C;
	}
	return 0x820D694C;
} // Block from 820D6948h-820D694Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D694Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D694C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D694C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D694C);
		  /* 820D694Ch */ case    0:  		/* lwz R10, <#[R27 + 104]> */
		/* 820D694Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000068) );
		/* 820D694Ch case    0:*/		return 0x820D6950;
		  /* 820D6950h */ case    1:  		/* lwz R9, <#[R10 + 16]> */
		/* 820D6950h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 820D6950h case    1:*/		return 0x820D6954;
		  /* 820D6954h */ case    2:  		/* cmplwi CR6, R9, 14 */
		/* 820D6954h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000000E);
		/* 820D6954h case    2:*/		return 0x820D6958;
		  /* 820D6958h */ case    3:  		/* bc 4, CR6_EQ, 52 */
		/* 820D6958h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D698C;  }
		/* 820D6958h case    3:*/		return 0x820D695C;
		  /* 820D695Ch */ case    4:  		/* lbz R9, <#[R10 + 27]> */
		/* 820D695Ch case    4:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000001B) );
		/* 820D695Ch case    4:*/		return 0x820D6960;
		  /* 820D6960h */ case    5:  		/* rlwinm R11, R11, 0, 30, 21 */
		/* 820D6960h case    5:*/		cpu::op::rlwinm<0,0,30,21>(regs,&regs.R11,regs.R11);
		/* 820D6960h case    5:*/		return 0x820D6964;
		  /* 820D6964h */ case    6:  		/* rlwinm R9, R9, 2, 0, 31 */
		/* 820D6964h case    6:*/		cpu::op::rlwinm<0,2,0,31>(regs,&regs.R9,regs.R9);
		/* 820D6964h case    6:*/		return 0x820D6968;
		  /* 820D6968h */ case    7:  		/* or R11, R9, R11 */
		/* 820D6968h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820D6968h case    7:*/		return 0x820D696C;
		  /* 820D696Ch */ case    8:  		/* stw R11, <#[R1 + 124]> */
		/* 820D696Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D696Ch case    8:*/		return 0x820D6970;
		  /* 820D6970h */ case    9:  		/* lwz R10, <#[R10 + 20]> */
		/* 820D6970h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820D6970h case    9:*/		return 0x820D6974;
		  /* 820D6974h */ case   10:  		/* subf R10, R10, R23 */
		/* 820D6974h case   10:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R23);
		/* 820D6974h case   10:*/		return 0x820D6978;
		  /* 820D6978h */ case   11:  		/* addic R9, R10, -1 */
		/* 820D6978h case   11:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 820D6978h case   11:*/		return 0x820D697C;
		  /* 820D697Ch */ case   12:  		/* subfe R10, R9, R10 */
		/* 820D697Ch case   12:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 820D697Ch case   12:*/		return 0x820D6980;
		  /* 820D6980h */ case   13:  		/* rlwimi R11, R10, 10, 21, 21 */
		/* 820D6980h case   13:*/		cpu::op::rlwimi<0,10,21,21>(regs,&regs.R11,regs.R10);
		/* 820D6980h case   13:*/		return 0x820D6984;
		  /* 820D6984h */ case   14:  		/* stw R11, <#[R1 + 124]> */
		/* 820D6984h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6984h case   14:*/		return 0x820D6988;
		  /* 820D6988h */ case   15:  		/* b 20 */
		/* 820D6988h case   15:*/		return 0x820D699C;
		/* 820D6988h case   15:*/		return 0x820D698C;
	}
	return 0x820D698C;
} // Block from 820D694Ch-820D698Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 820D698Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D698C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D698C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D698C);
		  /* 820D698Ch */ case    0:  		/* lis R11, -32255 */
		/* 820D698Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D698Ch case    0:*/		return 0x820D6990;
		  /* 820D6990h */ case    1:  		/* mr R3, R30 */
		/* 820D6990h case    1:*/		regs.R3 = regs.R30;
		/* 820D6990h case    1:*/		return 0x820D6994;
		  /* 820D6994h */ case    2:  		/* addi R4, R11, 31776 */
		/* 820D6994h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7C20);
		/* 820D6994h case    2:*/		return 0x820D6998;
		  /* 820D6998h */ case    3:  		/* bl -24752 */
		/* 820D6998h case    3:*/		regs.LR = 0x820D699C; return 0x820D08E8;
		/* 820D6998h case    3:*/		return 0x820D699C;
	}
	return 0x820D699C;
} // Block from 820D698Ch-820D699Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D699Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D699C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D699C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D699C);
		  /* 820D699Ch */ case    0:  		/* li R5, 1 */
		/* 820D699Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D699Ch case    0:*/		return 0x820D69A0;
		  /* 820D69A0h */ case    1:  		/* mr R4, R27 */
		/* 820D69A0h case    1:*/		regs.R4 = regs.R27;
		/* 820D69A0h case    1:*/		return 0x820D69A4;
		  /* 820D69A4h */ case    2:  		/* mr R3, R30 */
		/* 820D69A4h case    2:*/		regs.R3 = regs.R30;
		/* 820D69A4h case    2:*/		return 0x820D69A8;
		  /* 820D69A8h */ case    3:  		/* bl -1720 */
		/* 820D69A8h case    3:*/		regs.LR = 0x820D69AC; return 0x820D62F0;
		/* 820D69A8h case    3:*/		return 0x820D69AC;
		  /* 820D69ACh */ case    4:  		/* b 452 */
		/* 820D69ACh case    4:*/		return 0x820D6B70;
		/* 820D69ACh case    4:*/		return 0x820D69B0;
		  /* 820D69B0h */ case    5:  		/* mr R5, R27 */
		/* 820D69B0h case    5:*/		regs.R5 = regs.R27;
		/* 820D69B0h case    5:*/		return 0x820D69B4;
		  /* 820D69B4h */ case    6:  		/* addi R4, R1, 120 */
		/* 820D69B4h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x78);
		/* 820D69B4h case    6:*/		return 0x820D69B8;
		  /* 820D69B8h */ case    7:  		/* mr R3, R30 */
		/* 820D69B8h case    7:*/		regs.R3 = regs.R30;
		/* 820D69B8h case    7:*/		return 0x820D69BC;
		  /* 820D69BCh */ case    8:  		/* bl -12036 */
		/* 820D69BCh case    8:*/		regs.LR = 0x820D69C0; return 0x820D3AB8;
		/* 820D69BCh case    8:*/		return 0x820D69C0;
		  /* 820D69C0h */ case    9:  		/* mr R24, R3 */
		/* 820D69C0h case    9:*/		regs.R24 = regs.R3;
		/* 820D69C0h case    9:*/		return 0x820D69C4;
		  /* 820D69C4h */ case   10:  		/* b 420 */
		/* 820D69C4h case   10:*/		return 0x820D6B68;
		/* 820D69C4h case   10:*/		return 0x820D69C8;
	}
	return 0x820D69C8;
} // Block from 820D699Ch-820D69C8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D69C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D69C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D69C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D69C8);
		  /* 820D69C8h */ case    0:  		/* lwz R11, <#[R27 + 104]> */
		/* 820D69C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000068) );
		/* 820D69C8h case    0:*/		return 0x820D69CC;
		  /* 820D69CCh */ case    1:  		/* mr R26, R24 */
		/* 820D69CCh case    1:*/		regs.R26 = regs.R24;
		/* 820D69CCh case    1:*/		return 0x820D69D0;
		  /* 820D69D0h */ case    2:  		/* mr R3, R30 */
		/* 820D69D0h case    2:*/		regs.R3 = regs.R30;
		/* 820D69D0h case    2:*/		return 0x820D69D4;
		  /* 820D69D4h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 820D69D4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 820D69D4h case    3:*/		return 0x820D69D8;
		  /* 820D69D8h */ case    4:  		/* cmplwi CR6, R10, 18 */
		/* 820D69D8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000012);
		/* 820D69D8h case    4:*/		return 0x820D69DC;
		  /* 820D69DCh */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 820D69DCh case    5:*/		if ( regs.CR[6].eq ) { return 0x820D69F0;  }
		/* 820D69DCh case    5:*/		return 0x820D69E0;
		  /* 820D69E0h */ case    6:  		/* lis R11, -32255 */
		/* 820D69E0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D69E0h case    6:*/		return 0x820D69E4;
		  /* 820D69E4h */ case    7:  		/* addi R4, R11, 31728 */
		/* 820D69E4h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7BF0);
		/* 820D69E4h case    7:*/		return 0x820D69E8;
		  /* 820D69E8h */ case    8:  		/* bl -24832 */
		/* 820D69E8h case    8:*/		regs.LR = 0x820D69EC; return 0x820D08E8;
		/* 820D69E8h case    8:*/		return 0x820D69EC;
		  /* 820D69ECh */ case    9:  		/* b 100 */
		/* 820D69ECh case    9:*/		return 0x820D6A50;
		/* 820D69ECh case    9:*/		return 0x820D69F0;
	}
	return 0x820D69F0;
} // Block from 820D69C8h-820D69F0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D69F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D69F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D69F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D69F0);
		  /* 820D69F0h */ case    0:  		/* li R4, 1 */
		/* 820D69F0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D69F0h case    0:*/		return 0x820D69F4;
		  /* 820D69F4h */ case    1:  		/* lwz R31, <#[R11 + 24]> */
		/* 820D69F4h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000018) );
		/* 820D69F4h case    1:*/		return 0x820D69F8;
		  /* 820D69F8h */ case    2:  		/* bl -6000 */
		/* 820D69F8h case    2:*/		regs.LR = 0x820D69FC; return 0x820D5288;
		/* 820D69F8h case    2:*/		return 0x820D69FC;
		  /* 820D69FCh */ case    3:  		/* bl -429052 */
		/* 820D69FCh case    3:*/		regs.LR = 0x820D6A00; return 0x8206DE00;
		/* 820D69FCh case    3:*/		return 0x820D6A00;
		  /* 820D6A00h */ case    4:  		/* lwz R11, <#[R30 + 336]> */
		/* 820D6A00h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000150) );
		/* 820D6A00h case    4:*/		return 0x820D6A04;
		  /* 820D6A04h */ case    5:  		/* mr R5, R3 */
		/* 820D6A04h case    5:*/		regs.R5 = regs.R3;
		/* 820D6A04h case    5:*/		return 0x820D6A08;
		  /* 820D6A08h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820D6A08h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D6A08h case    6:*/		return 0x820D6A0C;
		  /* 820D6A0Ch */ case    7:  		/* bc 12, CR6_EQ, 88 */
		/* 820D6A0Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x820D6A64;  }
		/* 820D6A0Ch case    7:*/		return 0x820D6A10;
		  /* 820D6A10h */ case    8:  		/* lwz R10, <#[R11 + 20]> */
		/* 820D6A10h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 820D6A10h case    8:*/		return 0x820D6A14;
		  /* 820D6A14h */ case    9:  		/* cmplw CR6, R10, R31 */
		/* 820D6A14h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 820D6A14h case    9:*/		return 0x820D6A18;
		  /* 820D6A18h */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 820D6A18h case   10:*/		if ( regs.CR[6].eq ) { return 0x820D6A28;  }
		/* 820D6A18h case   10:*/		return 0x820D6A1C;
		  /* 820D6A1Ch */ case   11:  		/* lwz R11, <#[R11 + 12]> */
		/* 820D6A1Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D6A1Ch case   11:*/		return 0x820D6A20;
		  /* 820D6A20h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 820D6A20h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D6A20h case   12:*/		return 0x820D6A24;
		  /* 820D6A24h */ case   13:  		/* bc 4, CR6_EQ, -20 */
		/* 820D6A24h case   13:*/		if ( !regs.CR[6].eq ) { return 0x820D6A10;  }
		/* 820D6A24h case   13:*/		return 0x820D6A28;
	}
	return 0x820D6A28;
} // Block from 820D69F0h-820D6A28h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D6A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6A28);
		  /* 820D6A28h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 820D6A28h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D6A28h case    0:*/		return 0x820D6A2C;
		  /* 820D6A2Ch */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 820D6A2Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820D6A64;  }
		/* 820D6A2Ch case    1:*/		return 0x820D6A30;
		  /* 820D6A30h */ case    2:  		/* lwz R10, <#[R11 + 16]> */
		/* 820D6A30h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 820D6A30h case    2:*/		return 0x820D6A34;
		  /* 820D6A34h */ case    3:  		/* cmpwi CR6, R10, -1 */
		/* 820D6A34h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820D6A34h case    3:*/		return 0x820D6A38;
		  /* 820D6A38h */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 820D6A38h case    4:*/		if ( regs.CR[6].eq ) { return 0x820D6A5C;  }
		/* 820D6A38h case    4:*/		return 0x820D6A3C;
		  /* 820D6A3Ch */ case    5:  		/* lis R11, -32255 */
		/* 820D6A3Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6A3Ch case    5:*/		return 0x820D6A40;
		  /* 820D6A40h */ case    6:  		/* mr R5, R31 */
		/* 820D6A40h case    6:*/		regs.R5 = regs.R31;
		/* 820D6A40h case    6:*/		return 0x820D6A44;
		  /* 820D6A44h */ case    7:  		/* addi R4, R11, 31708 */
		/* 820D6A44h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7BDC);
		/* 820D6A44h case    7:*/		return 0x820D6A48;
		  /* 820D6A48h */ case    8:  		/* mr R3, R30 */
		/* 820D6A48h case    8:*/		regs.R3 = regs.R30;
		/* 820D6A48h case    8:*/		return 0x820D6A4C;
		  /* 820D6A4Ch */ case    9:  		/* bl -24932 */
		/* 820D6A4Ch case    9:*/		regs.LR = 0x820D6A50; return 0x820D08E8;
		/* 820D6A4Ch case    9:*/		return 0x820D6A50;
	}
	return 0x820D6A50;
} // Block from 820D6A28h-820D6A50h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D6A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6A50);
		  /* 820D6A50h */ case    0:  		/* lis R24, -32768 */
		/* 820D6A50h case    0:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8000);
		/* 820D6A50h case    0:*/		return 0x820D6A54;
		  /* 820D6A54h */ case    1:  		/* ori R24, R24, 16389 */
		/* 820D6A54h case    1:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R24,0x4005);
		/* 820D6A54h case    1:*/		return 0x820D6A58;
		  /* 820D6A58h */ case    2:  		/* b 352 */
		/* 820D6A58h case    2:*/		return 0x820D6BB8;
		/* 820D6A58h case    2:*/		return 0x820D6A5C;
	}
	return 0x820D6A5C;
} // Block from 820D6A50h-820D6A5Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D6A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6A5C);
		  /* 820D6A5Ch */ case    0:  		/* stw R5, <#[R11 + 16]> */
		/* 820D6A5Ch case    0:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 820D6A5Ch case    0:*/		return 0x820D6A60;
		  /* 820D6A60h */ case    1:  		/* b 272 */
		/* 820D6A60h case    1:*/		return 0x820D6B70;
		/* 820D6A60h case    1:*/		return 0x820D6A64;
	}
	return 0x820D6A64;
} // Block from 820D6A5Ch-820D6A64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D6A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6A64);
		  /* 820D6A64h */ case    0:  		/* mr R4, R31 */
		/* 820D6A64h case    0:*/		regs.R4 = regs.R31;
		/* 820D6A64h case    0:*/		return 0x820D6A68;
		  /* 820D6A68h */ case    1:  		/* mr R3, R30 */
		/* 820D6A68h case    1:*/		regs.R3 = regs.R30;
		/* 820D6A68h case    1:*/		return 0x820D6A6C;
		  /* 820D6A6Ch */ case    2:  		/* bl -27124 */
		/* 820D6A6Ch case    2:*/		regs.LR = 0x820D6A70; return 0x820D0078;
		/* 820D6A6Ch case    2:*/		return 0x820D6A70;
		  /* 820D6A70h */ case    3:  		/* b 256 */
		/* 820D6A70h case    3:*/		return 0x820D6B70;
		/* 820D6A70h case    3:*/		return 0x820D6A74;
	}
	return 0x820D6A74;
} // Block from 820D6A64h-820D6A74h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D6A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6A74);
		  /* 820D6A74h */ case    0:  		/* cmplwi CR6, R31, 250 */
		/* 820D6A74h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x000000FA);
		/* 820D6A74h case    0:*/		return 0x820D6A78;
		  /* 820D6A78h */ case    1:  		/* bc 12, CR6_EQ, 80 */
		/* 820D6A78h case    1:*/		if ( regs.CR[6].eq ) { return 0x820D6AC8;  }
		/* 820D6A78h case    1:*/		return 0x820D6A7C;
		  /* 820D6A7Ch */ case    2:  		/* cmplwi CR6, R31, 251 */
		/* 820D6A7Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x000000FB);
		/* 820D6A7Ch case    2:*/		return 0x820D6A80;
		  /* 820D6A80h */ case    3:  		/* bc 4, CR6_EQ, 240 */
		/* 820D6A80h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D6B70;  }
		/* 820D6A80h case    3:*/		return 0x820D6A84;
		  /* 820D6A84h */ case    4:  		/* lwz R11, <#[R1 + 124]> */
		/* 820D6A84h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6A84h case    4:*/		return 0x820D6A88;
		  /* 820D6A88h */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 820D6A88h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820D6A88h case    5:*/		return 0x820D6A8C;
		  /* 820D6A8Ch */ case    6:  		/* rlwinm R11, R11, 0, 19, 16 */
		/* 820D6A8Ch case    6:*/		cpu::op::rlwinm<0,0,19,16>(regs,&regs.R11,regs.R11);
		/* 820D6A8Ch case    6:*/		return 0x820D6A90;
		  /* 820D6A90h */ case    7:  		/* ori R11, R11, 36864 */
		/* 820D6A90h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x9000);
		/* 820D6A90h case    7:*/		return 0x820D6A94;
		  /* 820D6A94h */ case    8:  		/* stw R11, <#[R1 + 124]> */
		/* 820D6A94h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6A94h case    8:*/		return 0x820D6A98;
		  /* 820D6A98h */ case    9:  		/* bc 12, CR6_EQ, 28 */
		/* 820D6A98h case    9:*/		if ( regs.CR[6].eq ) { return 0x820D6AB4;  }
		/* 820D6A98h case    9:*/		return 0x820D6A9C;
		  /* 820D6A9Ch */ case   10:  		/* lwz R10, <#[R1 + 120]> */
		/* 820D6A9Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6A9Ch case   10:*/		return 0x820D6AA0;
	}
	return 0x820D6AA0;
} // Block from 820D6A74h-820D6AA0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D6AA0h
// Function '?HandleVFetch@CUAssembler@D3DXShader@@IAAJPAVCNodeUAsmInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6AA0);
		  /* 820D6AA0h */ case    0:  		/* rlwimi R11, R25, 10, 21, 21 */
		/* 820D6AA0h case    0:*/		cpu::op::rlwimi<0,10,21,21>(regs,&regs.R11,regs.R25);
		/* 820D6AA0h case    0:*/		return 0x820D6AA4;
		  /* 820D6AA4h */ case    1:  		/* ori R10, R10, 16384 */
		/* 820D6AA4h case    1:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4000);
		/* 820D6AA4h case    1:*/		return 0x820D6AA8;
		  /* 820D6AA8h */ case    2:  		/* stw R11, <#[R1 + 124]> */
		/* 820D6AA8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6AA8h case    2:*/		return 0x820D6AAC;
		  /* 820D6AACh */ case    3:  		/* stw R10, <#[R1 + 120]> */
		/* 820D6AACh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6AACh case    3:*/		return 0x820D6AB0;
		  /* 820D6AB0h */ case    4:  		/* b 16 */
		/* 820D6AB0h case    4:*/		return 0x820D6AC0;
		/* 820D6AB0h case    4:*/		return 0x820D6AB4;
	}
	return 0x820D6AB4;
} // Block from 820D6AA0h-820D6AB4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D6AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6AB4);
		  /* 820D6AB4h */ case    0:  		/* lwz R11, <#[R1 + 120]> */
		/* 820D6AB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6AB4h case    0:*/		return 0x820D6AB8;
		  /* 820D6AB8h */ case    1:  		/* ori R11, R11, 8192 */
		/* 820D6AB8h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 820D6AB8h case    1:*/		return 0x820D6ABC;
		  /* 820D6ABCh */ case    2:  		/* stw R11, <#[R1 + 120]> */
		/* 820D6ABCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6ABCh case    2:*/		return 0x820D6AC0;
	}
	return 0x820D6AC0;
} // Block from 820D6AB4h-820D6AC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D6AC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6AC0);
		  /* 820D6AC0h */ case    0:  		/* li R5, 0 */
		/* 820D6AC0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D6AC0h case    0:*/		return 0x820D6AC4;
		  /* 820D6AC4h */ case    1:  		/* b -292 */
		/* 820D6AC4h case    1:*/		return 0x820D69A0;
		/* 820D6AC4h case    1:*/		return 0x820D6AC8;
	}
	return 0x820D6AC8;
} // Block from 820D6AC0h-820D6AC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D6AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6AC8);
		  /* 820D6AC8h */ case    0:  		/* lwz R11, <#[R1 + 124]> */
		/* 820D6AC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6AC8h case    0:*/		return 0x820D6ACC;
		  /* 820D6ACCh */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 820D6ACCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820D6ACCh case    1:*/		return 0x820D6AD0;
		  /* 820D6AD0h */ case    2:  		/* rlwinm R11, R11, 0, 18, 16 */
		/* 820D6AD0h case    2:*/		cpu::op::rlwinm<0,0,18,16>(regs,&regs.R11,regs.R11);
		/* 820D6AD0h case    2:*/		return 0x820D6AD4;
		  /* 820D6AD4h */ case    3:  		/* ori R11, R11, 45056 */
		/* 820D6AD4h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xB000);
		/* 820D6AD4h case    3:*/		return 0x820D6AD8;
		  /* 820D6AD8h */ case    4:  		/* stw R11, <#[R1 + 124]> */
		/* 820D6AD8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6AD8h case    4:*/		return 0x820D6ADC;
		  /* 820D6ADCh */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 820D6ADCh case    5:*/		if ( regs.CR[6].eq ) { return 0x820D6AF8;  }
		/* 820D6ADCh case    5:*/		return 0x820D6AE0;
		  /* 820D6AE0h */ case    6:  		/* lwz R10, <#[R1 + 120]> */
		/* 820D6AE0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6AE0h case    6:*/		return 0x820D6AE4;
		  /* 820D6AE4h */ case    7:  		/* rlwimi R11, R25, 10, 21, 21 */
		/* 820D6AE4h case    7:*/		cpu::op::rlwimi<0,10,21,21>(regs,&regs.R11,regs.R25);
		/* 820D6AE4h case    7:*/		return 0x820D6AE8;
		  /* 820D6AE8h */ case    8:  		/* ori R10, R10, 16384 */
		/* 820D6AE8h case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4000);
		/* 820D6AE8h case    8:*/		return 0x820D6AEC;
		  /* 820D6AECh */ case    9:  		/* stw R11, <#[R1 + 124]> */
		/* 820D6AECh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6AECh case    9:*/		return 0x820D6AF0;
		  /* 820D6AF0h */ case   10:  		/* stw R10, <#[R1 + 120]> */
		/* 820D6AF0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6AF0h case   10:*/		return 0x820D6AF4;
		  /* 820D6AF4h */ case   11:  		/* b 16 */
		/* 820D6AF4h case   11:*/		return 0x820D6B04;
		/* 820D6AF4h case   11:*/		return 0x820D6AF8;
	}
	return 0x820D6AF8;
} // Block from 820D6AC8h-820D6AF8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D6AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6AF8);
		  /* 820D6AF8h */ case    0:  		/* lwz R11, <#[R1 + 120]> */
		/* 820D6AF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6AF8h case    0:*/		return 0x820D6AFC;
		  /* 820D6AFCh */ case    1:  		/* ori R11, R11, 8192 */
		/* 820D6AFCh case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 820D6AFCh case    1:*/		return 0x820D6B00;
		  /* 820D6B00h */ case    2:  		/* stw R11, <#[R1 + 120]> */
		/* 820D6B00h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6B00h case    2:*/		return 0x820D6B04;
	}
	return 0x820D6B04;
} // Block from 820D6AF8h-820D6B04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D6B04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6B04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6B04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6B04);
		  /* 820D6B04h */ case    0:  		/* li R5, 0 */
		/* 820D6B04h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D6B04h case    0:*/		return 0x820D6B08;
		  /* 820D6B08h */ case    1:  		/* mr R4, R27 */
		/* 820D6B08h case    1:*/		regs.R4 = regs.R27;
		/* 820D6B08h case    1:*/		return 0x820D6B0C;
		  /* 820D6B0Ch */ case    2:  		/* mr R3, R30 */
		/* 820D6B0Ch case    2:*/		regs.R3 = regs.R30;
		/* 820D6B0Ch case    2:*/		return 0x820D6B10;
		  /* 820D6B10h */ case    3:  		/* bl -2080 */
		/* 820D6B10h case    3:*/		regs.LR = 0x820D6B14; return 0x820D62F0;
		/* 820D6B10h case    3:*/		return 0x820D6B14;
		  /* 820D6B14h */ case    4:  		/* lis R11, -32255 */
		/* 820D6B14h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6B14h case    4:*/		return 0x820D6B18;
		  /* 820D6B18h */ case    5:  		/* li R6, 1 */
		/* 820D6B18h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820D6B18h case    5:*/		return 0x820D6B1C;
		  /* 820D6B1Ch */ case    6:  		/* addi R5, R11, 31872 */
		/* 820D6B1Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x7C80);
		/* 820D6B1Ch case    6:*/		return 0x820D6B20;
		  /* 820D6B20h */ case    7:  		/* mr R4, R27 */
		/* 820D6B20h case    7:*/		regs.R4 = regs.R27;
		/* 820D6B20h case    7:*/		return 0x820D6B24;
		  /* 820D6B24h */ case    8:  		/* mr R3, R30 */
		/* 820D6B24h case    8:*/		regs.R3 = regs.R30;
		/* 820D6B24h case    8:*/		return 0x820D6B28;
		  /* 820D6B28h */ case    9:  		/* bl -11256 */
		/* 820D6B28h case    9:*/		regs.LR = 0x820D6B2C; return 0x820D3F30;
		/* 820D6B28h case    9:*/		return 0x820D6B2C;
		  /* 820D6B2Ch */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 820D6B2Ch case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D6B2Ch case   10:*/		return 0x820D6B30;
		  /* 820D6B30h */ case   11:  		/* bc 12, CR0_EQ, 64 */
		/* 820D6B30h case   11:*/		if ( regs.CR[0].eq ) { return 0x820D6B70;  }
		/* 820D6B30h case   11:*/		return 0x820D6B34;
		  /* 820D6B34h */ case   12:  		/* addi R4, R1, 112 */
		/* 820D6B34h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D6B34h case   12:*/		return 0x820D6B38;
		  /* 820D6B38h */ case   13:  		/* stw R24, <#[R1 + 112]> */
		/* 820D6B38h case   13:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6B38h case   13:*/		return 0x820D6B3C;
		  /* 820D6B3Ch */ case   14:  		/* bl -30500 */
		/* 820D6B3Ch case   14:*/		regs.LR = 0x820D6B40; return 0x820CF418;
		/* 820D6B3Ch case   14:*/		return 0x820D6B40;
		  /* 820D6B40h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820D6B40h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D6B40h case   15:*/		return 0x820D6B44;
		  /* 820D6B44h */ case   16:  		/* bc 12, CR0_LT, 20 */
		/* 820D6B44h case   16:*/		if ( regs.CR[0].lt ) { return 0x820D6B58;  }
		/* 820D6B44h case   16:*/		return 0x820D6B48;
		  /* 820D6B48h */ case   17:  		/* lwz R11, <#[R1 + 124]> */
		/* 820D6B48h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 820D6B48h case   17:*/		return 0x820D6B4C;
		  /* 820D6B4Ch */ case   18:  		/* lwz R10, <#[R1 + 112]> */
		/* 820D6B4Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6B4Ch case   18:*/		return 0x820D6B50;
		  /* 820D6B50h */ case   19:  		/* rlwimi R11, R10, 1, 30, 30 */
		/* 820D6B50h case   19:*/		cpu::op::rlwimi<0,1,30,30>(regs,&regs.R11,regs.R10);
		/* 820D6B50h case   19:*/		return 0x820D6B54;
		  /* 820D6B54h */ case   20:  		/* b -1048 */
		/* 820D6B54h case   20:*/		return 0x820D673C;
		/* 820D6B54h case   20:*/		return 0x820D6B58;
	}
	return 0x820D6B58;
} // Block from 820D6B04h-820D6B58h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820D6B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6B58);
		  /* 820D6B58h */ case    0:  		/* lis R11, -32255 */
		/* 820D6B58h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6B58h case    0:*/		return 0x820D6B5C;
		  /* 820D6B5Ch */ case    1:  		/* mr R3, R30 */
		/* 820D6B5Ch case    1:*/		regs.R3 = regs.R30;
		/* 820D6B5Ch case    1:*/		return 0x820D6B60;
		  /* 820D6B60h */ case    2:  		/* addi R4, R11, 31820 */
		/* 820D6B60h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7C4C);
		/* 820D6B60h case    2:*/		return 0x820D6B64;
		  /* 820D6B64h */ case    3:  		/* bl -25212 */
		/* 820D6B64h case    3:*/		regs.LR = 0x820D6B68; return 0x820D08E8;
		/* 820D6B64h case    3:*/		return 0x820D6B68;
	}
	return 0x820D6B68;
} // Block from 820D6B58h-820D6B68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D6B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6B68);
		  /* 820D6B68h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 820D6B68h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 820D6B68h case    0:*/		return 0x820D6B6C;
		  /* 820D6B6Ch */ case    1:  		/* bc 12, CR6_LT, 76 */
		/* 820D6B6Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x820D6BB8;  }
		/* 820D6B6Ch case    1:*/		return 0x820D6B70;
	}
	return 0x820D6B70;
} // Block from 820D6B68h-820D6B70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D6B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6B70);
		  /* 820D6B70h */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 820D6B70h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 820D6B70h case    0:*/		return 0x820D6B74;
		  /* 820D6B74h */ case    1:  		/* bc 12, CR0_EQ, 68 */
		/* 820D6B74h case    1:*/		if ( regs.CR[0].eq ) { return 0x820D6BB8;  }
		/* 820D6B74h case    1:*/		return 0x820D6B78;
		  /* 820D6B78h */ case    2:  		/* li R4, 1 */
		/* 820D6B78h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6B78h case    2:*/		return 0x820D6B7C;
		  /* 820D6B7Ch */ case    3:  		/* mr R3, R30 */
		/* 820D6B7Ch case    3:*/		regs.R3 = regs.R30;
		/* 820D6B7Ch case    3:*/		return 0x820D6B80;
		  /* 820D6B80h */ case    4:  		/* bl -6392 */
		/* 820D6B80h case    4:*/		regs.LR = 0x820D6B84; return 0x820D5288;
		/* 820D6B80h case    4:*/		return 0x820D6B84;
		  /* 820D6B84h */ case    5:  		/* addi R4, R1, 120 */
		/* 820D6B84h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x78);
		/* 820D6B84h case    5:*/		return 0x820D6B88;
		  /* 820D6B88h */ case    6:  		/* bl -429472 */
		/* 820D6B88h case    6:*/		regs.LR = 0x820D6B8C; return 0x8206DDE8;
		/* 820D6B88h case    6:*/		return 0x820D6B8C;
		  /* 820D6B8Ch */ case    7:  		/* lwz R11, <#[R30 + 332]> */
		/* 820D6B8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000014C) );
		/* 820D6B8Ch case    7:*/		return 0x820D6B90;
		  /* 820D6B90h */ case    8:  		/* mr R5, R3 */
		/* 820D6B90h case    8:*/		regs.R5 = regs.R3;
		/* 820D6B90h case    8:*/		return 0x820D6B94;
		  /* 820D6B94h */ case    9:  		/* cmpwi CR6, R11, 0 */
		/* 820D6B94h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D6B94h case    9:*/		return 0x820D6B98;
		  /* 820D6B98h */ case   10:  		/* bc 12, CR6_EQ, 32 */
		/* 820D6B98h case   10:*/		if ( regs.CR[6].eq ) { return 0x820D6BB8;  }
		/* 820D6B98h case   10:*/		return 0x820D6B9C;
		  /* 820D6B9Ch */ case   11:  		/* li R9, 0 */
		/* 820D6B9Ch case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820D6B9Ch case   11:*/		return 0x820D6BA0;
		  /* 820D6BA0h */ case   12:  		/* lwz R7, <#[R27 + 40]> */
		/* 820D6BA0h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000028) );
		/* 820D6BA0h case   12:*/		return 0x820D6BA4;
		  /* 820D6BA4h */ case   13:  		/* li R8, -1 */
		/* 820D6BA4h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 820D6BA4h case   13:*/		return 0x820D6BA8;
		  /* 820D6BA8h */ case   14:  		/* lwz R6, <#[R27 + 32]> */
		/* 820D6BA8h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000020) );
		/* 820D6BA8h case   14:*/		return 0x820D6BAC;
		  /* 820D6BACh */ case   15:  		/* li R4, 0 */
		/* 820D6BACh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D6BACh case   15:*/		return 0x820D6BB0;
		  /* 820D6BB0h */ case   16:  		/* lwz R3, <#[R30 + 324]> */
		/* 820D6BB0h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000144) );
		/* 820D6BB0h case   16:*/		return 0x820D6BB4;
		  /* 820D6BB4h */ case   17:  		/* bl 479140 */
		/* 820D6BB4h case   17:*/		regs.LR = 0x820D6BB8; return 0x8214BB58;
		/* 820D6BB4h case   17:*/		return 0x820D6BB8;
	}
	return 0x820D6BB8;
} // Block from 820D6B70h-820D6BB8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820D6BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6BB8);
		  /* 820D6BB8h */ case    0:  		/* mr R3, R24 */
		/* 820D6BB8h case    0:*/		regs.R3 = regs.R24;
		/* 820D6BB8h case    0:*/		return 0x820D6BBC;
		  /* 820D6BBCh */ case    1:  		/* addi R1, R1, 208 */
		/* 820D6BBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 820D6BBCh case    1:*/		return 0x820D6BC0;
		  /* 820D6BC0h */ case    2:  		/* b -284972 */
		/* 820D6BC0h case    2:*/		return 0x82091294;
		/* 820D6BC0h case    2:*/		return 0x820D6BC4;
		  /* 820D6BC4h */ case    3:  		/* nop */
		/* 820D6BC4h case    3:*/		cpu::op::nop();
		/* 820D6BC4h case    3:*/		return 0x820D6BC8;
	}
	return 0x820D6BC8;
} // Block from 820D6BB8h-820D6BC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D6BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6BC8);
		  /* 820D6BC8h */ case    0:  		/* mfspr R12, LR */
		/* 820D6BC8h case    0:*/		regs.R12 = regs.LR;
		/* 820D6BC8h case    0:*/		return 0x820D6BCC;
		  /* 820D6BCCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820D6BCCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D6BCCh case    1:*/		return 0x820D6BD0;
		  /* 820D6BD0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820D6BD0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820D6BD0h case    2:*/		return 0x820D6BD4;
		  /* 820D6BD4h */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 820D6BD4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820D6BD4h case    3:*/		return 0x820D6BD8;
		  /* 820D6BD8h */ case    4:  		/* lwz R11, <#[R3 + 320]> */
		/* 820D6BD8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000140) );
		/* 820D6BD8h case    4:*/		return 0x820D6BDC;
		  /* 820D6BDCh */ case    5:  		/* mr R31, R3 */
		/* 820D6BDCh case    5:*/		regs.R31 = regs.R3;
		/* 820D6BDCh case    5:*/		return 0x820D6BE0;
		  /* 820D6BE0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820D6BE0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D6BE0h case    6:*/		return 0x820D6BE4;
		  /* 820D6BE4h */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 820D6BE4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820D6BF4;  }
		/* 820D6BE4h case    7:*/		return 0x820D6BE8;
		  /* 820D6BE8h */ case    8:  		/* lis R3, -32761 */
		/* 820D6BE8h case    8:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820D6BE8h case    8:*/		return 0x820D6BEC;
		  /* 820D6BECh */ case    9:  		/* ori R3, R3, 14 */
		/* 820D6BECh case    9:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820D6BECh case    9:*/		return 0x820D6BF0;
		  /* 820D6BF0h */ case   10:  		/* b 268 */
		/* 820D6BF0h case   10:*/		return 0x820D6CFC;
		/* 820D6BF0h case   10:*/		return 0x820D6BF4;
	}
	return 0x820D6BF4;
} // Block from 820D6BC8h-820D6BF4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D6BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6BF4);
		  /* 820D6BF4h */ case    0:  		/* mr R3, R31 */
		/* 820D6BF4h case    0:*/		regs.R3 = regs.R31;
		/* 820D6BF4h case    0:*/		return 0x820D6BF8;
		  /* 820D6BF8h */ case    1:  		/* bl -1880 */
		/* 820D6BF8h case    1:*/		regs.LR = 0x820D6BFC; return 0x820D64A0;
		/* 820D6BF8h case    1:*/		return 0x820D6BFC;
		  /* 820D6BFCh */ case    2:  		/* lwz R11, <#[R31 + 104]> */
		/* 820D6BFCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 820D6BFCh case    2:*/		return 0x820D6C00;
		  /* 820D6C00h */ case    3:  		/* rlwinm. R11, R11, 0, 24, 24 */
		/* 820D6C00h case    3:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R11,regs.R11);
		/* 820D6C00h case    3:*/		return 0x820D6C04;
		  /* 820D6C04h */ case    4:  		/* bc 4, CR0_EQ, 88 */
		/* 820D6C04h case    4:*/		if ( !regs.CR[0].eq ) { return 0x820D6C5C;  }
		/* 820D6C04h case    4:*/		return 0x820D6C08;
		  /* 820D6C08h */ case    5:  		/* lwz R11, <#[R31 + 304]> */
		/* 820D6C08h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000130) );
		/* 820D6C08h case    5:*/		return 0x820D6C0C;
		  /* 820D6C0Ch */ case    6:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 820D6C0Ch case    6:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 820D6C0Ch case    6:*/		return 0x820D6C10;
		  /* 820D6C10h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 820D6C10h case    7:*/		if ( regs.CR[0].eq ) { return 0x820D6C24;  }
		/* 820D6C10h case    7:*/		return 0x820D6C14;
		  /* 820D6C14h */ case    8:  		/* lis R11, -32255 */
		/* 820D6C14h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6C14h case    8:*/		return 0x820D6C18;
		  /* 820D6C18h */ case    9:  		/* mr R3, R31 */
		/* 820D6C18h case    9:*/		regs.R3 = regs.R31;
		/* 820D6C18h case    9:*/		return 0x820D6C1C;
		  /* 820D6C1Ch */ case   10:  		/* addi R4, R11, 32392 */
		/* 820D6C1Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7E88);
		/* 820D6C1Ch case   10:*/		return 0x820D6C20;
		  /* 820D6C20h */ case   11:  		/* bl -25400 */
		/* 820D6C20h case   11:*/		regs.LR = 0x820D6C24; return 0x820D08E8;
		/* 820D6C20h case   11:*/		return 0x820D6C24;
	}
	return 0x820D6C24;
} // Block from 820D6BF4h-820D6C24h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D6C24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6C24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6C24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6C24);
		  /* 820D6C24h */ case    0:  		/* lwz R11, <#[R31 + 304]> */
		/* 820D6C24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000130) );
		/* 820D6C24h case    0:*/		return 0x820D6C28;
	}
	return 0x820D6C28;
} // Block from 820D6C24h-820D6C28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D6C28h
// Function '?HandleTFetch@CUAssembler@D3DXShader@@IAAJPAVCNodeUAsmInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6C28);
		  /* 820D6C28h */ case    0:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 820D6C28h case    0:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 820D6C28h case    0:*/		return 0x820D6C2C;
		  /* 820D6C2Ch */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 820D6C2Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x820D6C40;  }
		/* 820D6C2Ch case    1:*/		return 0x820D6C30;
		  /* 820D6C30h */ case    2:  		/* lis R11, -32255 */
		/* 820D6C30h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6C30h case    2:*/		return 0x820D6C34;
		  /* 820D6C34h */ case    3:  		/* mr R3, R31 */
		/* 820D6C34h case    3:*/		regs.R3 = regs.R31;
		/* 820D6C34h case    3:*/		return 0x820D6C38;
		  /* 820D6C38h */ case    4:  		/* addi R4, R11, 32320 */
		/* 820D6C38h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7E40);
		/* 820D6C38h case    4:*/		return 0x820D6C3C;
		  /* 820D6C3Ch */ case    5:  		/* bl -25428 */
		/* 820D6C3Ch case    5:*/		regs.LR = 0x820D6C40; return 0x820D08E8;
		/* 820D6C3Ch case    5:*/		return 0x820D6C40;
	}
	return 0x820D6C40;
} // Block from 820D6C28h-820D6C40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D6C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6C40);
		  /* 820D6C40h */ case    0:  		/* lwz R11, <#[R31 + 304]> */
		/* 820D6C40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000130) );
		/* 820D6C40h case    0:*/		return 0x820D6C44;
		  /* 820D6C44h */ case    1:  		/* rlwinm. R11, R11, 0, 15, 15 */
		/* 820D6C44h case    1:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R11,regs.R11);
		/* 820D6C44h case    1:*/		return 0x820D6C48;
		  /* 820D6C48h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 820D6C48h case    2:*/		if ( regs.CR[0].eq ) { return 0x820D6C5C;  }
		/* 820D6C48h case    2:*/		return 0x820D6C4C;
		  /* 820D6C4Ch */ case    3:  		/* lis R11, -32255 */
		/* 820D6C4Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6C4Ch case    3:*/		return 0x820D6C50;
		  /* 820D6C50h */ case    4:  		/* mr R3, R31 */
		/* 820D6C50h case    4:*/		regs.R3 = regs.R31;
		/* 820D6C50h case    4:*/		return 0x820D6C54;
		  /* 820D6C54h */ case    5:  		/* addi R4, R11, 32248 */
		/* 820D6C54h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7DF8);
		/* 820D6C54h case    5:*/		return 0x820D6C58;
		  /* 820D6C58h */ case    6:  		/* bl -25456 */
		/* 820D6C58h case    6:*/		regs.LR = 0x820D6C5C; return 0x820D08E8;
		/* 820D6C58h case    6:*/		return 0x820D6C5C;
	}
	return 0x820D6C5C;
} // Block from 820D6C40h-820D6C5Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D6C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6C5C);
		  /* 820D6C5Ch */ case    0:  		/* lwz R10, <#[R31 + 304]> */
		/* 820D6C5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000130) );
		/* 820D6C5Ch case    0:*/		return 0x820D6C60;
		  /* 820D6C60h */ case    1:  		/* rlwinm. R11, R10, 0, 18, 18 */
		/* 820D6C60h case    1:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R11,regs.R10);
		/* 820D6C60h case    1:*/		return 0x820D6C64;
		  /* 820D6C64h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 820D6C64h case    2:*/		if ( regs.CR[0].eq ) { return 0x820D6C74;  }
		/* 820D6C64h case    2:*/		return 0x820D6C68;
		  /* 820D6C68h */ case    3:  		/* lwz R9, <#[R31 + 296]> */
		/* 820D6C68h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000128) );
		/* 820D6C68h case    3:*/		return 0x820D6C6C;
		  /* 820D6C6Ch */ case    4:  		/* oris R9, R9, 4 */
		/* 820D6C6Ch case    4:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820D6C6Ch case    4:*/		return 0x820D6C70;
		  /* 820D6C70h */ case    5:  		/* stw R9, <#[R31 + 296]> */
		/* 820D6C70h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000128) );
		/* 820D6C70h case    5:*/		return 0x820D6C74;
	}
	return 0x820D6C74;
} // Block from 820D6C5Ch-820D6C74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D6C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6C74);
		  /* 820D6C74h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 820D6C74h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D6C74h case    0:*/		return 0x820D6C78;
		  /* 820D6C78h */ case    1:  		/* bc 4, CR6_EQ, 80 */
		/* 820D6C78h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820D6CC8;  }
		/* 820D6C78h case    1:*/		return 0x820D6C7C;
		  /* 820D6C7Ch */ case    2:  		/* rlwinm. R11, R10, 0, 26, 26 */
		/* 820D6C7Ch case    2:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R10);
		/* 820D6C7Ch case    2:*/		return 0x820D6C80;
		  /* 820D6C80h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 820D6C80h case    3:*/		if ( regs.CR[0].eq ) { return 0x820D6CA0;  }
		/* 820D6C80h case    3:*/		return 0x820D6C84;
		  /* 820D6C84h */ case    4:  		/* lwz R11, <#[R31 + 296]> */
		/* 820D6C84h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000128) );
		/* 820D6C84h case    4:*/		return 0x820D6C88;
		  /* 820D6C88h */ case    5:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 820D6C88h case    5:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 820D6C88h case    5:*/		return 0x820D6C8C;
		  /* 820D6C8Ch */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 820D6C8Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x820D6CA0;  }
		/* 820D6C8Ch case    6:*/		return 0x820D6C90;
		  /* 820D6C90h */ case    7:  		/* lis R11, -32255 */
		/* 820D6C90h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6C90h case    7:*/		return 0x820D6C94;
		  /* 820D6C94h */ case    8:  		/* mr R3, R31 */
		/* 820D6C94h case    8:*/		regs.R3 = regs.R31;
		/* 820D6C94h case    8:*/		return 0x820D6C98;
		  /* 820D6C98h */ case    9:  		/* addi R4, R11, 32180 */
		/* 820D6C98h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7DB4);
		/* 820D6C98h case    9:*/		return 0x820D6C9C;
		  /* 820D6C9Ch */ case   10:  		/* bl -25524 */
		/* 820D6C9Ch case   10:*/		regs.LR = 0x820D6CA0; return 0x820D08E8;
		/* 820D6C9Ch case   10:*/		return 0x820D6CA0;
	}
	return 0x820D6CA0;
} // Block from 820D6C74h-820D6CA0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D6CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6CA0);
		  /* 820D6CA0h */ case    0:  		/* lwz R11, <#[R31 + 304]> */
		/* 820D6CA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000130) );
		/* 820D6CA0h case    0:*/		return 0x820D6CA4;
		  /* 820D6CA4h */ case    1:  		/* rlwinm. R11, R11, 0, 19, 19 */
		/* 820D6CA4h case    1:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R11);
		/* 820D6CA4h case    1:*/		return 0x820D6CA8;
		  /* 820D6CA8h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 820D6CA8h case    2:*/		if ( regs.CR[0].eq ) { return 0x820D6CC8;  }
		/* 820D6CA8h case    2:*/		return 0x820D6CAC;
		  /* 820D6CACh */ case    3:  		/* lwz R11, <#[R31 + 300]> */
		/* 820D6CACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000012C) );
		/* 820D6CACh case    3:*/		return 0x820D6CB0;
		  /* 820D6CB0h */ case    4:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 820D6CB0h case    4:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 820D6CB0h case    4:*/		return 0x820D6CB4;
		  /* 820D6CB4h */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 820D6CB4h case    5:*/		if ( regs.CR[0].eq ) { return 0x820D6CC8;  }
		/* 820D6CB4h case    5:*/		return 0x820D6CB8;
		  /* 820D6CB8h */ case    6:  		/* lis R11, -32255 */
		/* 820D6CB8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6CB8h case    6:*/		return 0x820D6CBC;
		  /* 820D6CBCh */ case    7:  		/* mr R3, R31 */
		/* 820D6CBCh case    7:*/		regs.R3 = regs.R31;
		/* 820D6CBCh case    7:*/		return 0x820D6CC0;
		  /* 820D6CC0h */ case    8:  		/* addi R4, R11, 32112 */
		/* 820D6CC0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7D70);
		/* 820D6CC0h case    8:*/		return 0x820D6CC4;
		  /* 820D6CC4h */ case    9:  		/* bl -25564 */
		/* 820D6CC4h case    9:*/		regs.LR = 0x820D6CC8; return 0x820D08E8;
		/* 820D6CC4h case    9:*/		return 0x820D6CC8;
	}
	return 0x820D6CC8;
} // Block from 820D6CA0h-820D6CC8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D6CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6CC8);
		  /* 820D6CC8h */ case    0:  		/* lwz R11, <#[R31 + 60]> */
		/* 820D6CC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820D6CC8h case    0:*/		return 0x820D6CCC;
		  /* 820D6CCCh */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D6CCCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D6CCCh case    1:*/		return 0x820D6CD0;
		  /* 820D6CD0h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 820D6CD0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D6CE0;  }
		/* 820D6CD0h case    2:*/		return 0x820D6CD4;
		  /* 820D6CD4h */ case    3:  		/* lis R3, -30602 */
		/* 820D6CD4h case    3:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8876);
		/* 820D6CD4h case    3:*/		return 0x820D6CD8;
		  /* 820D6CD8h */ case    4:  		/* ori R3, R3, 2905 */
		/* 820D6CD8h case    4:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xB59);
		/* 820D6CD8h case    4:*/		return 0x820D6CDC;
		  /* 820D6CDCh */ case    5:  		/* b 32 */
		/* 820D6CDCh case    5:*/		return 0x820D6CFC;
		/* 820D6CDCh case    5:*/		return 0x820D6CE0;
	}
	return 0x820D6CE0;
} // Block from 820D6CC8h-820D6CE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D6CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6CE0);
		  /* 820D6CE0h */ case    0:  		/* li R4, 1 */
		/* 820D6CE0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6CE0h case    0:*/		return 0x820D6CE4;
		  /* 820D6CE4h */ case    1:  		/* mr R3, R31 */
		/* 820D6CE4h case    1:*/		regs.R3 = regs.R31;
		/* 820D6CE4h case    1:*/		return 0x820D6CE8;
		  /* 820D6CE8h */ case    2:  		/* bl -6752 */
		/* 820D6CE8h case    2:*/		regs.LR = 0x820D6CEC; return 0x820D5288;
		/* 820D6CE8h case    2:*/		return 0x820D6CEC;
		  /* 820D6CECh */ case    3:  		/* lwz R5, <#[R31 + 300]> */
		/* 820D6CECh case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000012C) );
		/* 820D6CECh case    3:*/		return 0x820D6CF0;
		  /* 820D6CF0h */ case    4:  		/* lwz R4, <#[R31 + 296]> */
		/* 820D6CF0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000128) );
		/* 820D6CF0h case    4:*/		return 0x820D6CF4;
		  /* 820D6CF4h */ case    5:  		/* bl -454036 */
		/* 820D6CF4h case    5:*/		regs.LR = 0x820D6CF8; return 0x82067F60;
		/* 820D6CF4h case    5:*/		return 0x820D6CF8;
		  /* 820D6CF8h */ case    6:  		/* li R3, 0 */
		/* 820D6CF8h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D6CF8h case    6:*/		return 0x820D6CFC;
	}
	return 0x820D6CFC;
} // Block from 820D6CE0h-820D6CFCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D6CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6CFC);
		  /* 820D6CFCh */ case    0:  		/* addi R1, R1, 112 */
		/* 820D6CFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820D6CFCh case    0:*/		return 0x820D6D00;
		  /* 820D6D00h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820D6D00h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D6D00h case    1:*/		return 0x820D6D04;
		  /* 820D6D04h */ case    2:  		/* mtspr LR, R12 */
		/* 820D6D04h case    2:*/		regs.LR = regs.R12;
		/* 820D6D04h case    2:*/		return 0x820D6D08;
		  /* 820D6D08h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 820D6D08h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820D6D08h case    3:*/		return 0x820D6D0C;
		  /* 820D6D0Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 820D6D0Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820D6D0Ch case    4:*/		return 0x820D6D10;
	}
	return 0x820D6D10;
} // Block from 820D6CFCh-820D6D10h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D6D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6D10);
		  /* 820D6D10h */ case    0:  		/* mfspr R12, LR */
		/* 820D6D10h case    0:*/		regs.R12 = regs.LR;
		/* 820D6D10h case    0:*/		return 0x820D6D14;
		  /* 820D6D14h */ case    1:  		/* bl -285384 */
		/* 820D6D14h case    1:*/		regs.LR = 0x820D6D18; return 0x8209124C;
		/* 820D6D14h case    1:*/		return 0x820D6D18;
		  /* 820D6D18h */ case    2:  		/* stwu R1, <#[R1 - 1264]> */
		/* 820D6D18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFB10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFB10);
		/* 820D6D18h case    2:*/		return 0x820D6D1C;
		  /* 820D6D1Ch */ case    3:  		/* mr R31, R3 */
		/* 820D6D1Ch case    3:*/		regs.R31 = regs.R3;
		/* 820D6D1Ch case    3:*/		return 0x820D6D20;
		  /* 820D6D20h */ case    4:  		/* mr R26, R4 */
		/* 820D6D20h case    4:*/		regs.R26 = regs.R4;
		/* 820D6D20h case    4:*/		return 0x820D6D24;
		  /* 820D6D24h */ case    5:  		/* mr R28, R5 */
		/* 820D6D24h case    5:*/		regs.R28 = regs.R5;
		/* 820D6D24h case    5:*/		return 0x820D6D28;
		  /* 820D6D28h */ case    6:  		/* bl -352 */
		/* 820D6D28h case    6:*/		regs.LR = 0x820D6D2C; return 0x820D6BC8;
		/* 820D6D28h case    6:*/		return 0x820D6D2C;
		  /* 820D6D2Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820D6D2Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D6D2Ch case    7:*/		return 0x820D6D30;
	}
	return 0x820D6D30;
} // Block from 820D6D10h-820D6D30h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D6D30h
// Function '?RecordLabelUse@CUAssembler@D3DXShader@@IAAXPAVCNodeUAsmInstruction@2@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6D30);
		  /* 820D6D30h */ case    0:  		/* bc 12, CR0_LT, 1044 */
		/* 820D6D30h case    0:*/		if ( regs.CR[0].lt ) { return 0x820D7144;  }
		/* 820D6D30h case    0:*/		return 0x820D6D34;
		  /* 820D6D34h */ case    1:  		/* lwz R11, <#[R31 + 104]> */
		/* 820D6D34h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 820D6D34h case    1:*/		return 0x820D6D38;
		  /* 820D6D38h */ case    2:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 820D6D38h case    2:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 820D6D38h case    2:*/		return 0x820D6D3C;
		  /* 820D6D3Ch */ case    3:  		/* bc 12, CR0_EQ, 56 */
		/* 820D6D3Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x820D6D74;  }
		/* 820D6D3Ch case    3:*/		return 0x820D6D40;
		  /* 820D6D40h */ case    4:  		/* lwz R11, <#[R31 + 316]> */
		/* 820D6D40h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000013C) );
		/* 820D6D40h case    4:*/		return 0x820D6D44;
		  /* 820D6D44h */ case    5:  		/* mr R3, R31 */
		/* 820D6D44h case    5:*/		regs.R3 = regs.R31;
		/* 820D6D44h case    5:*/		return 0x820D6D48;
		  /* 820D6D48h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 820D6D48h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D6D48h case    6:*/		return 0x820D6D4C;
		  /* 820D6D4Ch */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 820D6D4Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x820D6D68;  }
		/* 820D6D4Ch case    7:*/		return 0x820D6D50;
		  /* 820D6D50h */ case    8:  		/* lis R11, -32255 */
		/* 820D6D50h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6D50h case    8:*/		return 0x820D6D54;
		  /* 820D6D54h */ case    9:  		/* addi R4, R11, 32640 */
		/* 820D6D54h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7F80);
		/* 820D6D54h case    9:*/		return 0x820D6D58;
		  /* 820D6D58h */ case   10:  		/* bl -25712 */
		/* 820D6D58h case   10:*/		regs.LR = 0x820D6D5C; return 0x820D08E8;
		/* 820D6D58h case   10:*/		return 0x820D6D5C;
		  /* 820D6D5Ch */ case   11:  		/* lis R3, -30602 */
		/* 820D6D5Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8876);
		/* 820D6D5Ch case   11:*/		return 0x820D6D60;
		  /* 820D6D60h */ case   12:  		/* ori R3, R3, 2905 */
		/* 820D6D60h case   12:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xB59);
		/* 820D6D60h case   12:*/		return 0x820D6D64;
		  /* 820D6D64h */ case   13:  		/* b 992 */
		/* 820D6D64h case   13:*/		return 0x820D7144;
		/* 820D6D64h case   13:*/		return 0x820D6D68;
	}
	return 0x820D6D68;
} // Block from 820D6D30h-820D6D68h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D6D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6D68);
		  /* 820D6D68h */ case    0:  		/* li R4, 1 */
		/* 820D6D68h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6D68h case    0:*/		return 0x820D6D6C;
		  /* 820D6D6Ch */ case    1:  		/* bl -6884 */
		/* 820D6D6Ch case    1:*/		regs.LR = 0x820D6D70; return 0x820D5288;
		/* 820D6D6Ch case    1:*/		return 0x820D6D70;
		  /* 820D6D70h */ case    2:  		/* bl -432176 */
		/* 820D6D70h case    2:*/		regs.LR = 0x820D6D74; return 0x8206D540;
		/* 820D6D70h case    2:*/		return 0x820D6D74;
	}
	return 0x820D6D74;
} // Block from 820D6D68h-820D6D74h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D6D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6D74);
		  /* 820D6D74h */ case    0:  		/* lwz R29, <#[R31 + 324]> */
		/* 820D6D74h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000144) );
		/* 820D6D74h case    0:*/		return 0x820D6D78;
		  /* 820D6D78h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 820D6D78h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820D6D78h case    1:*/		return 0x820D6D7C;
		  /* 820D6D7Ch */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 820D6D7Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820D6DA0;  }
		/* 820D6D7Ch case    2:*/		return 0x820D6D80;
		  /* 820D6D80h */ case    3:  		/* mr R3, R29 */
		/* 820D6D80h case    3:*/		regs.R3 = regs.R29;
		/* 820D6D80h case    3:*/		return 0x820D6D84;
		  /* 820D6D84h */ case    4:  		/* bl 1336892 */
		/* 820D6D84h case    4:*/		regs.LR = 0x820D6D88; return 0x8221D3C0;
		/* 820D6D84h case    4:*/		return 0x820D6D88;
		  /* 820D6D88h */ case    5:  		/* mr R30, R3 */
		/* 820D6D88h case    5:*/		regs.R30 = regs.R3;
		/* 820D6D88h case    5:*/		return 0x820D6D8C;
		  /* 820D6D8Ch */ case    6:  		/* li R4, 1 */
		/* 820D6D8Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6D8Ch case    6:*/		return 0x820D6D90;
		  /* 820D6D90h */ case    7:  		/* mr R3, R31 */
		/* 820D6D90h case    7:*/		regs.R3 = regs.R31;
		/* 820D6D90h case    7:*/		return 0x820D6D94;
		  /* 820D6D94h */ case    8:  		/* bl -6924 */
		/* 820D6D94h case    8:*/		regs.LR = 0x820D6D98; return 0x820D5288;
		/* 820D6D94h case    8:*/		return 0x820D6D98;
		  /* 820D6D98h */ case    9:  		/* mr R4, R30 */
		/* 820D6D98h case    9:*/		regs.R4 = regs.R30;
		/* 820D6D98h case    9:*/		return 0x820D6D9C;
		  /* 820D6D9Ch */ case   10:  		/* bl -454172 */
		/* 820D6D9Ch case   10:*/		regs.LR = 0x820D6DA0; return 0x82067F80;
		/* 820D6D9Ch case   10:*/		return 0x820D6DA0;
	}
	return 0x820D6DA0;
} // Block from 820D6D74h-820D6DA0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D6DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6DA0);
		  /* 820D6DA0h */ case    0:  		/* li R4, 1 */
		/* 820D6DA0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6DA0h case    0:*/		return 0x820D6DA4;
		  /* 820D6DA4h */ case    1:  		/* mr R3, R31 */
		/* 820D6DA4h case    1:*/		regs.R3 = regs.R31;
		/* 820D6DA4h case    1:*/		return 0x820D6DA8;
		  /* 820D6DA8h */ case    2:  		/* bl -6944 */
		/* 820D6DA8h case    2:*/		regs.LR = 0x820D6DAC; return 0x820D5288;
		/* 820D6DA8h case    2:*/		return 0x820D6DAC;
		  /* 820D6DACh */ case    3:  		/* bl -430380 */
		/* 820D6DACh case    3:*/		regs.LR = 0x820D6DB0; return 0x8206DC80;
		/* 820D6DACh case    3:*/		return 0x820D6DB0;
		  /* 820D6DB0h */ case    4:  		/* lwz R11, <#[R31 + 332]> */
		/* 820D6DB0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000014C) );
		/* 820D6DB0h case    4:*/		return 0x820D6DB4;
		  /* 820D6DB4h */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 820D6DB4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D6DB4h case    5:*/		return 0x820D6DB8;
		  /* 820D6DB8h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 820D6DB8h case    6:*/		if ( regs.CR[6].eq ) { return 0x820D6DDC;  }
		/* 820D6DB8h case    6:*/		return 0x820D6DBC;
		  /* 820D6DBCh */ case    7:  		/* li R4, 1 */
		/* 820D6DBCh case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6DBCh case    7:*/		return 0x820D6DC0;
		  /* 820D6DC0h */ case    8:  		/* mr R3, R31 */
		/* 820D6DC0h case    8:*/		regs.R3 = regs.R31;
		/* 820D6DC0h case    8:*/		return 0x820D6DC4;
		  /* 820D6DC4h */ case    9:  		/* bl -6972 */
		/* 820D6DC4h case    9:*/		regs.LR = 0x820D6DC8; return 0x820D5288;
		/* 820D6DC4h case    9:*/		return 0x820D6DC8;
		  /* 820D6DC8h */ case   10:  		/* bl -430024 */
		/* 820D6DC8h case   10:*/		regs.LR = 0x820D6DCC; return 0x8206DE00;
		/* 820D6DC8h case   10:*/		return 0x820D6DCC;
		  /* 820D6DCCh */ case   11:  		/* addi R11, R3, 1 */
		/* 820D6DCCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x1);
		/* 820D6DCCh case   11:*/		return 0x820D6DD0;
		  /* 820D6DD0h */ case   12:  		/* lwz R3, <#[R31 + 324]> */
		/* 820D6DD0h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000144) );
		/* 820D6DD0h case   12:*/		return 0x820D6DD4;
		  /* 820D6DD4h */ case   13:  		/* rlwinm R4, R11, 31, 1, 31 */
		/* 820D6DD4h case   13:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R4,regs.R11);
		/* 820D6DD4h case   13:*/		return 0x820D6DD8;
		  /* 820D6DD8h */ case   14:  		/* bl 456608 */
		/* 820D6DD8h case   14:*/		regs.LR = 0x820D6DDC; return 0x82146578;
		/* 820D6DD8h case   14:*/		return 0x820D6DDC;
	}
	return 0x820D6DDC;
} // Block from 820D6DA0h-820D6DDCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 820D6DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6DDC);
		  /* 820D6DDCh */ case    0:  		/* lwz R11, <#[R31 + 332]> */
		/* 820D6DDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000014C) );
		/* 820D6DDCh case    0:*/		return 0x820D6DE0;
		  /* 820D6DE0h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D6DE0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D6DE0h case    1:*/		return 0x820D6DE4;
		  /* 820D6DE4h */ case    2:  		/* bc 12, CR6_EQ, 100 */
		/* 820D6DE4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D6E48;  }
		/* 820D6DE4h case    2:*/		return 0x820D6DE8;
		  /* 820D6DE8h */ case    3:  		/* lwz R5, <#[R28 + 8]> */
		/* 820D6DE8h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000008) );
		/* 820D6DE8h case    3:*/		return 0x820D6DEC;
		  /* 820D6DECh */ case    4:  		/* cmplwi CR6, R5, 0 */
		/* 820D6DECh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820D6DECh case    4:*/		return 0x820D6DF0;
		  /* 820D6DF0h */ case    5:  		/* bc 12, CR6_EQ, 56 */
		/* 820D6DF0h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D6E28;  }
		/* 820D6DF0h case    5:*/		return 0x820D6DF4;
		  /* 820D6DF4h */ case    6:  		/* lis R3, 0 */
		/* 820D6DF4h case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0x0);
		/* 820D6DF4h case    6:*/		return 0x820D6DF8;
		  /* 820D6DF8h */ case    7:  		/* li R8, 260 */
		/* 820D6DF8h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x104);
		/* 820D6DF8h case    7:*/		return 0x820D6DFC;
		  /* 820D6DFCh */ case    8:  		/* addi R7, R1, 672 */
		/* 820D6DFCh case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2A0);
		/* 820D6DFCh case    8:*/		return 0x820D6E00;
		  /* 820D6E00h */ case    9:  		/* li R6, -1 */
		/* 820D6E00h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0xFFFFFFFF);
		/* 820D6E00h case    9:*/		return 0x820D6E04;
		  /* 820D6E04h */ case   10:  		/* li R4, 0 */
		/* 820D6E04h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D6E04h case   10:*/		return 0x820D6E08;
		  /* 820D6E08h */ case   11:  		/* ori R3, R3, 65001 */
		/* 820D6E08h case   11:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xFDE9);
		/* 820D6E08h case   11:*/		return 0x820D6E0C;
		  /* 820D6E0Ch */ case   12:  		/* bl 1640596 */
		/* 820D6E0Ch case   12:*/		regs.LR = 0x820D6E10; return 0x822676A0;
		/* 820D6E0Ch case   12:*/		return 0x820D6E10;
	}
	return 0x820D6E10;
} // Block from 820D6DDCh-820D6E10h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D6E10h
// Function '?FixupLabels@CUAssembler@D3DXShader@@IAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6E10);
		  /* 820D6E10h */ case    0:  		/* li R4, 1 */
		/* 820D6E10h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6E10h case    0:*/		return 0x820D6E14;
		  /* 820D6E14h */ case    1:  		/* mr R3, R31 */
		/* 820D6E14h case    1:*/		regs.R3 = regs.R31;
		/* 820D6E14h case    1:*/		return 0x820D6E18;
		  /* 820D6E18h */ case    2:  		/* bl -7056 */
		/* 820D6E18h case    2:*/		regs.LR = 0x820D6E1C; return 0x820D5288;
		/* 820D6E18h case    2:*/		return 0x820D6E1C;
		  /* 820D6E1Ch */ case    3:  		/* lwz R5, <#[R28 + 8]> */
		/* 820D6E1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000008) );
		/* 820D6E1Ch case    3:*/		return 0x820D6E20;
		  /* 820D6E20h */ case    4:  		/* lwz R4, <#[R28 + 4]> */
		/* 820D6E20h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000004) );
		/* 820D6E20h case    4:*/		return 0x820D6E24;
		  /* 820D6E24h */ case    5:  		/* bl -430508 */
		/* 820D6E24h case    5:*/		regs.LR = 0x820D6E28; return 0x8206DC78;
		/* 820D6E24h case    5:*/		return 0x820D6E28;
	}
	return 0x820D6E28;
} // Block from 820D6E10h-820D6E28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D6E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6E28);
		  /* 820D6E28h */ case    0:  		/* addi R4, R1, 128 */
		/* 820D6E28h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820D6E28h case    0:*/		return 0x820D6E2C;
		  /* 820D6E2Ch */ case    1:  		/* lwz R3, <#[R31 + 324]> */
		/* 820D6E2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000144) );
		/* 820D6E2Ch case    1:*/		return 0x820D6E30;
		  /* 820D6E30h */ case    2:  		/* bl 475880 */
		/* 820D6E30h case    2:*/		regs.LR = 0x820D6E34; return 0x8214B118;
		/* 820D6E30h case    2:*/		return 0x820D6E34;
		  /* 820D6E34h */ case    3:  		/* li R4, 1 */
		/* 820D6E34h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6E34h case    3:*/		return 0x820D6E38;
		  /* 820D6E38h */ case    4:  		/* mr R3, R31 */
		/* 820D6E38h case    4:*/		regs.R3 = regs.R31;
		/* 820D6E38h case    4:*/		return 0x820D6E3C;
		  /* 820D6E3Ch */ case    5:  		/* bl -7092 */
		/* 820D6E3Ch case    5:*/		regs.LR = 0x820D6E40; return 0x820D5288;
		/* 820D6E3Ch case    5:*/		return 0x820D6E40;
		  /* 820D6E40h */ case    6:  		/* addi R4, R1, 128 */
		/* 820D6E40h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820D6E40h case    6:*/		return 0x820D6E44;
		  /* 820D6E44h */ case    7:  		/* bl -445508 */
		/* 820D6E44h case    7:*/		regs.LR = 0x820D6E48; return 0x8206A200;
		/* 820D6E44h case    7:*/		return 0x820D6E48;
	}
	return 0x820D6E48;
} // Block from 820D6E28h-820D6E48h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D6E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6E48);
		  /* 820D6E48h */ case    0:  		/* li R4, 1 */
		/* 820D6E48h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6E48h case    0:*/		return 0x820D6E4C;
		  /* 820D6E4Ch */ case    1:  		/* mr R3, R31 */
		/* 820D6E4Ch case    1:*/		regs.R3 = regs.R31;
		/* 820D6E4Ch case    1:*/		return 0x820D6E50;
		  /* 820D6E50h */ case    2:  		/* bl -7112 */
		/* 820D6E50h case    2:*/		regs.LR = 0x820D6E54; return 0x820D5288;
		/* 820D6E50h case    2:*/		return 0x820D6E54;
		  /* 820D6E54h */ case    3:  		/* bl -430092 */
		/* 820D6E54h case    3:*/		regs.LR = 0x820D6E58; return 0x8206DE48;
		/* 820D6E54h case    3:*/		return 0x820D6E58;
		  /* 820D6E58h */ case    4:  		/* addi R4, R1, 112 */
		/* 820D6E58h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820D6E58h case    4:*/		return 0x820D6E5C;
		  /* 820D6E5Ch */ case    5:  		/* bl -201804 */
		/* 820D6E5Ch case    5:*/		regs.LR = 0x820D6E60; return 0x820A5A10;
		/* 820D6E5Ch case    5:*/		return 0x820D6E60;
		  /* 820D6E60h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820D6E60h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D6E60h case    6:*/		return 0x820D6E64;
		  /* 820D6E64h */ case    7:  		/* bc 12, CR0_LT, 736 */
		/* 820D6E64h case    7:*/		if ( regs.CR[0].lt ) { return 0x820D7144;  }
		/* 820D6E64h case    7:*/		return 0x820D6E68;
		  /* 820D6E68h */ case    8:  		/* li R27, 0 */
		/* 820D6E68h case    8:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820D6E68h case    8:*/		return 0x820D6E6C;
		  /* 820D6E6Ch */ case    9:  		/* li R4, 1 */
		/* 820D6E6Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D6E6Ch case    9:*/		return 0x820D6E70;
		  /* 820D6E70h */ case   10:  		/* stw R27, <#[R1 + 120]> */
		/* 820D6E70h case   10:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000078) );
		/* 820D6E70h case   10:*/		return 0x820D6E74;
		  /* 820D6E74h */ case   11:  		/* mr R3, R31 */
		/* 820D6E74h case   11:*/		regs.R3 = regs.R31;
		/* 820D6E74h case   11:*/		return 0x820D6E78;
		  /* 820D6E78h */ case   12:  		/* bl -7152 */
		/* 820D6E78h case   12:*/		regs.LR = 0x820D6E7C; return 0x820D5288;
		/* 820D6E78h case   12:*/		return 0x820D6E7C;
		  /* 820D6E7Ch */ case   13:  		/* lwz R11, <#[R1 + 112]> */
		/* 820D6E7Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6E7Ch case   13:*/		return 0x820D6E80;
		  /* 820D6E80h */ case   14:  		/* mr R30, R3 */
		/* 820D6E80h case   14:*/		regs.R30 = regs.R3;
		/* 820D6E80h case   14:*/		return 0x820D6E84;
		  /* 820D6E84h */ case   15:  		/* mr R3, R11 */
		/* 820D6E84h case   15:*/		regs.R3 = regs.R11;
		/* 820D6E84h case   15:*/		return 0x820D6E88;
		  /* 820D6E88h */ case   16:  		/* lwz R10, <#[R11]> */
		/* 820D6E88h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820D6E88h case   16:*/		return 0x820D6E8C;
		  /* 820D6E8Ch */ case   17:  		/* lwz R11, <#[R10 + 16]> */
		/* 820D6E8Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 820D6E8Ch case   17:*/		return 0x820D6E90;
		  /* 820D6E90h */ case   18:  		/* mtspr CTR, R11 */
		/* 820D6E90h case   18:*/		regs.CTR = regs.R11;
		/* 820D6E90h case   18:*/		return 0x820D6E94;
		  /* 820D6E94h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 820D6E94h case   19:*/		if ( 1 ) { regs.LR = 0x820D6E98; return (uint32)regs.CTR; }
		/* 820D6E94h case   19:*/		return 0x820D6E98;
		  /* 820D6E98h */ case   20:  		/* lwz R11, <#[R1 + 112]> */
		/* 820D6E98h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6E98h case   20:*/		return 0x820D6E9C;
		  /* 820D6E9Ch */ case   21:  		/* mr R25, R3 */
		/* 820D6E9Ch case   21:*/		regs.R25 = regs.R3;
		/* 820D6E9Ch case   21:*/		return 0x820D6EA0;
		  /* 820D6EA0h */ case   22:  		/* mr R3, R11 */
		/* 820D6EA0h case   22:*/		regs.R3 = regs.R11;
		/* 820D6EA0h case   22:*/		return 0x820D6EA4;
		  /* 820D6EA4h */ case   23:  		/* lwz R10, <#[R11]> */
		/* 820D6EA4h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820D6EA4h case   23:*/		return 0x820D6EA8;
		  /* 820D6EA8h */ case   24:  		/* lwz R11, <#[R10 + 12]> */
		/* 820D6EA8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 820D6EA8h case   24:*/		return 0x820D6EAC;
		  /* 820D6EACh */ case   25:  		/* mtspr CTR, R11 */
		/* 820D6EACh case   25:*/		regs.CTR = regs.R11;
		/* 820D6EACh case   25:*/		return 0x820D6EB0;
		  /* 820D6EB0h */ case   26:  		/* bcctrl 20, CR0_LT */
		/* 820D6EB0h case   26:*/		if ( 1 ) { regs.LR = 0x820D6EB4; return (uint32)regs.CTR; }
		/* 820D6EB0h case   26:*/		return 0x820D6EB4;
		  /* 820D6EB4h */ case   27:  		/* mr R4, R3 */
		/* 820D6EB4h case   27:*/		regs.R4 = regs.R3;
		/* 820D6EB4h case   27:*/		return 0x820D6EB8;
		  /* 820D6EB8h */ case   28:  		/* addi R6, R1, 120 */
		/* 820D6EB8h case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x78);
		/* 820D6EB8h case   28:*/		return 0x820D6EBC;
		  /* 820D6EBCh */ case   29:  		/* mr R5, R25 */
		/* 820D6EBCh case   29:*/		regs.R5 = regs.R25;
		/* 820D6EBCh case   29:*/		return 0x820D6EC0;
		  /* 820D6EC0h */ case   30:  		/* mr R3, R30 */
		/* 820D6EC0h case   30:*/		regs.R3 = regs.R30;
		/* 820D6EC0h case   30:*/		return 0x820D6EC4;
		  /* 820D6EC4h */ case   31:  		/* bl -430652 */
		/* 820D6EC4h case   31:*/		regs.LR = 0x820D6EC8; return 0x8206DC88;
		/* 820D6EC4h case   31:*/		return 0x820D6EC8;
		  /* 820D6EC8h */ case   32:  		/* or. R30, R3, R3 */
		/* 820D6EC8h case   32:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820D6EC8h case   32:*/		return 0x820D6ECC;
		  /* 820D6ECCh */ case   33:  		/* bc 12, CR0_LT, 140 */
		/* 820D6ECCh case   33:*/		if ( regs.CR[0].lt ) { return 0x820D6F58;  }
		/* 820D6ECCh case   33:*/		return 0x820D6ED0;
		  /* 820D6ED0h */ case   34:  		/* cmplwi CR6, R29, 0 */
		/* 820D6ED0h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820D6ED0h case   34:*/		return 0x820D6ED4;
		  /* 820D6ED4h */ case   35:  		/* bc 12, CR6_EQ, 40 */
		/* 820D6ED4h case   35:*/		if ( regs.CR[6].eq ) { return 0x820D6EFC;  }
		/* 820D6ED4h case   35:*/		return 0x820D6ED8;
		  /* 820D6ED8h */ case   36:  		/* lwz R3, <#[R1 + 112]> */
		/* 820D6ED8h case   36:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6ED8h case   36:*/		return 0x820D6EDC;
		  /* 820D6EDCh */ case   37:  		/* lwz R11, <#[R3]> */
		/* 820D6EDCh case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D6EDCh case   37:*/		return 0x820D6EE0;
	}
	return 0x820D6EE0;
} // Block from 820D6E48h-820D6EE0h (38 instructions)

//////////////////////////////////////////////////////
// Block at 820D6EE0h
// Function '?CalculateExportCount@CUAssembler@D3DXShader@@IAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6EE0);
		  /* 820D6EE0h */ case    0:  		/* lwz R11, <#[R11 + 12]> */
		/* 820D6EE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D6EE0h case    0:*/		return 0x820D6EE4;
		  /* 820D6EE4h */ case    1:  		/* mtspr CTR, R11 */
		/* 820D6EE4h case    1:*/		regs.CTR = regs.R11;
		/* 820D6EE4h case    1:*/		return 0x820D6EE8;
		  /* 820D6EE8h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 820D6EE8h case    2:*/		if ( 1 ) { regs.LR = 0x820D6EEC; return (uint32)regs.CTR; }
		/* 820D6EE8h case    2:*/		return 0x820D6EEC;
		  /* 820D6EECh */ case    3:  		/* lis R11, -32235 */
		/* 820D6EECh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8215);
		/* 820D6EECh case    3:*/		return 0x820D6EF0;
		  /* 820D6EF0h */ case    4:  		/* mr R4, R29 */
		/* 820D6EF0h case    4:*/		regs.R4 = regs.R29;
		/* 820D6EF0h case    4:*/		return 0x820D6EF4;
		  /* 820D6EF4h */ case    5:  		/* addi R5, R11, -20088 */
		/* 820D6EF4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB188);
		/* 820D6EF4h case    5:*/		return 0x820D6EF8;
		  /* 820D6EF8h */ case    6:  		/* bl -444672 */
		/* 820D6EF8h case    6:*/		regs.LR = 0x820D6EFC; return 0x8206A5F8;
		/* 820D6EF8h case    6:*/		return 0x820D6EFC;
	}
	return 0x820D6EFC;
} // Block from 820D6EE0h-820D6EFCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D6EFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6EFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6EFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6EFC);
		  /* 820D6EFCh */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 820D6EFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820D6EFCh case    0:*/		return 0x820D6F00;
		  /* 820D6F00h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 820D6F00h case    1:*/		if ( regs.CR[6].eq ) { return 0x820D6F58;  }
		/* 820D6F00h case    1:*/		return 0x820D6F04;
		  /* 820D6F04h */ case    2:  		/* lwz R11, <#[R28]> */
		/* 820D6F04h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 820D6F04h case    2:*/		return 0x820D6F08;
		  /* 820D6F08h */ case    3:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 820D6F08h case    3:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 820D6F08h case    3:*/		return 0x820D6F0C;
		  /* 820D6F0Ch */ case    4:  		/* bc 12, CR0_EQ, 76 */
		/* 820D6F0Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x820D6F58;  }
		/* 820D6F0Ch case    4:*/		return 0x820D6F10;
		  /* 820D6F10h */ case    5:  		/* lis R11, -32243 */
		/* 820D6F10h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF820D);
		/* 820D6F10h case    5:*/		return 0x820D6F14;
		  /* 820D6F14h */ case    6:  		/* lwz R5, <#[R31 + 108]> */
		/* 820D6F14h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000006C) );
		/* 820D6F14h case    6:*/		return 0x820D6F18;
		  /* 820D6F18h */ case    7:  		/* mr R9, R28 */
		/* 820D6F18h case    7:*/		regs.R9 = regs.R28;
		/* 820D6F18h case    7:*/		return 0x820D6F1C;
		  /* 820D6F1Ch */ case    8:  		/* lwz R3, <#[R31 + 56]> */
		/* 820D6F1Ch case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000038) );
		/* 820D6F1Ch case    8:*/		return 0x820D6F20;
		  /* 820D6F20h */ case    9:  		/* addi R8, R11, -3704 */
		/* 820D6F20h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFF188);
		/* 820D6F20h case    9:*/		return 0x820D6F24;
		  /* 820D6F24h */ case   10:  		/* lwz R4, <#[R1 + 112]> */
		/* 820D6F24h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6F24h case   10:*/		return 0x820D6F28;
		  /* 820D6F28h */ case   11:  		/* mr R7, R31 */
		/* 820D6F28h case   11:*/		regs.R7 = regs.R31;
		/* 820D6F28h case   11:*/		return 0x820D6F2C;
		  /* 820D6F2Ch */ case   12:  		/* mr R6, R26 */
		/* 820D6F2Ch case   12:*/		regs.R6 = regs.R26;
		/* 820D6F2Ch case   12:*/		return 0x820D6F30;
		  /* 820D6F30h */ case   13:  		/* bl 507128 */
		/* 820D6F30h case   13:*/		regs.LR = 0x820D6F34; return 0x82152C28;
		/* 820D6F30h case   13:*/		return 0x820D6F34;
		  /* 820D6F34h */ case   14:  		/* or. R30, R3, R3 */
		/* 820D6F34h case   14:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820D6F34h case   14:*/		return 0x820D6F38;
		  /* 820D6F38h */ case   15:  		/* bc 4, CR0_EQ, 32 */
		/* 820D6F38h case   15:*/		if ( !regs.CR[0].eq ) { return 0x820D6F58;  }
		/* 820D6F38h case   15:*/		return 0x820D6F3C;
		  /* 820D6F3Ch */ case   16:  		/* lwz R3, <#[R1 + 112]> */
		/* 820D6F3Ch case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6F3Ch case   16:*/		return 0x820D6F40;
		  /* 820D6F40h */ case   17:  		/* lwz R11, <#[R3]> */
		/* 820D6F40h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D6F40h case   17:*/		return 0x820D6F44;
		  /* 820D6F44h */ case   18:  		/* lwz R11, <#[R11 + 8]> */
		/* 820D6F44h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820D6F44h case   18:*/		return 0x820D6F48;
		  /* 820D6F48h */ case   19:  		/* mtspr CTR, R11 */
		/* 820D6F48h case   19:*/		regs.CTR = regs.R11;
		/* 820D6F48h case   19:*/		return 0x820D6F4C;
		  /* 820D6F4Ch */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 820D6F4Ch case   20:*/		if ( 1 ) { regs.LR = 0x820D6F50; return (uint32)regs.CTR; }
		/* 820D6F4Ch case   20:*/		return 0x820D6F50;
		  /* 820D6F50h */ case   21:  		/* li R3, 0 */
		/* 820D6F50h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D6F50h case   21:*/		return 0x820D6F54;
		  /* 820D6F54h */ case   22:  		/* b 496 */
		/* 820D6F54h case   22:*/		return 0x820D7144;
		/* 820D6F54h case   22:*/		return 0x820D6F58;
	}
	return 0x820D6F58;
} // Block from 820D6EFCh-820D6F58h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820D6F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6F58);
		  /* 820D6F58h */ case    0:  		/* lis R11, -30602 */
		/* 820D6F58h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8876);
		/* 820D6F58h case    0:*/		return 0x820D6F5C;
		  /* 820D6F5Ch */ case    1:  		/* ori R11, R11, 2945 */
		/* 820D6F5Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xB81);
		/* 820D6F5Ch case    1:*/		return 0x820D6F60;
		  /* 820D6F60h */ case    2:  		/* cmplw CR6, R30, R11 */
		/* 820D6F60h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820D6F60h case    2:*/		return 0x820D6F64;
		  /* 820D6F64h */ case    3:  		/* bc 4, CR6_EQ, 28 */
		/* 820D6F64h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D6F80;  }
		/* 820D6F64h case    3:*/		return 0x820D6F68;
		  /* 820D6F68h */ case    4:  		/* lis R11, -32255 */
		/* 820D6F68h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D6F68h case    4:*/		return 0x820D6F6C;
		  /* 820D6F6Ch */ case    5:  		/* mr R3, R31 */
		/* 820D6F6Ch case    5:*/		regs.R3 = regs.R31;
		/* 820D6F6Ch case    5:*/		return 0x820D6F70;
		  /* 820D6F70h */ case    6:  		/* addi R4, R11, 32560 */
		/* 820D6F70h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7F30);
		/* 820D6F70h case    6:*/		return 0x820D6F74;
		  /* 820D6F74h */ case    7:  		/* bl -26252 */
		/* 820D6F74h case    7:*/		regs.LR = 0x820D6F78; return 0x820D08E8;
		/* 820D6F74h case    7:*/		return 0x820D6F78;
		  /* 820D6F78h */ case    8:  		/* lis R30, -32768 */
		/* 820D6F78h case    8:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 820D6F78h case    8:*/		return 0x820D6F7C;
		  /* 820D6F7Ch */ case    9:  		/* ori R30, R30, 16389 */
		/* 820D6F7Ch case    9:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x4005);
		/* 820D6F7Ch case    9:*/		return 0x820D6F80;
	}
	return 0x820D6F80;
} // Block from 820D6F58h-820D6F80h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D6F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6F80);
		  /* 820D6F80h */ case    0:  		/* lwz R3, <#[R1 + 112]> */
		/* 820D6F80h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6F80h case    0:*/		return 0x820D6F84;
		  /* 820D6F84h */ case    1:  		/* cmpwi CR6, R30, 0 */
		/* 820D6F84h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 820D6F84h case    1:*/		return 0x820D6F88;
		  /* 820D6F88h */ case    2:  		/* stw R3, <#[R26]> */
		/* 820D6F88h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 820D6F88h case    2:*/		return 0x820D6F8C;
		  /* 820D6F8Ch */ case    3:  		/* bc 12, CR6_LT, 436 */
		/* 820D6F8Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x820D7140;  }
		/* 820D6F8Ch case    3:*/		return 0x820D6F90;
		  /* 820D6F90h */ case    4:  		/* lwz R11, <#[R31 + 108]> */
		/* 820D6F90h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 820D6F90h case    4:*/		return 0x820D6F94;
		  /* 820D6F94h */ case    5:  		/* rlwinm. R10, R11, 0, 30, 30 */
		/* 820D6F94h case    5:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R11);
		/* 820D6F94h case    5:*/		return 0x820D6F98;
		  /* 820D6F98h */ case    6:  		/* bc 4, CR0_EQ, 424 */
		/* 820D6F98h case    6:*/		if ( !regs.CR[0].eq ) { return 0x820D7140;  }
		/* 820D6F98h case    6:*/		return 0x820D6F9C;
		  /* 820D6F9Ch */ case    7:  		/* mr R29, R27 */
		/* 820D6F9Ch case    7:*/		regs.R29 = regs.R27;
		/* 820D6F9Ch case    7:*/		return 0x820D6FA0;
		  /* 820D6FA0h */ case    8:  		/* stw R27, <#[R1 + 116]> */
		/* 820D6FA0h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000074) );
		/* 820D6FA0h case    8:*/		return 0x820D6FA4;
		  /* 820D6FA4h */ case    9:  		/* cmplwi CR6, R28, 0 */
		/* 820D6FA4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820D6FA4h case    9:*/		return 0x820D6FA8;
		  /* 820D6FA8h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 820D6FA8h case   10:*/		if ( regs.CR[6].eq ) { return 0x820D6FB4;  }
		/* 820D6FA8h case   10:*/		return 0x820D6FAC;
		  /* 820D6FACh */ case   11:  		/* lwz R10, <#[R28 + 16]> */
		/* 820D6FACh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000010) );
		/* 820D6FACh case   11:*/		return 0x820D6FB0;
		  /* 820D6FB0h */ case   12:  		/* rlwinm R29, R10, 10, 15, 21 */
		/* 820D6FB0h case   12:*/		cpu::op::rlwinm<0,10,15,21>(regs,&regs.R29,regs.R10);
		/* 820D6FB0h case   12:*/		return 0x820D6FB4;
	}
	return 0x820D6FB4;
} // Block from 820D6F80h-820D6FB4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D6FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6FB4);
		  /* 820D6FB4h */ case    0:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 820D6FB4h case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 820D6FB4h case    0:*/		return 0x820D6FB8;
		  /* 820D6FB8h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 820D6FB8h case    1:*/		if ( regs.CR[0].eq ) { return 0x820D6FC0;  }
		/* 820D6FB8h case    1:*/		return 0x820D6FBC;
		  /* 820D6FBCh */ case    2:  		/* oris R29, R29, 4 */
		/* 820D6FBCh case    2:*/		cpu::op::oris<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820D6FBCh case    2:*/		return 0x820D6FC0;
	}
	return 0x820D6FC0;
} // Block from 820D6FB4h-820D6FC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D6FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D6FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D6FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D6FC0);
		  /* 820D6FC0h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D6FC0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D6FC0h case    0:*/		return 0x820D6FC4;
		  /* 820D6FC4h */ case    1:  		/* lwz R11, <#[R11 + 16]> */
		/* 820D6FC4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820D6FC4h case    1:*/		return 0x820D6FC8;
		  /* 820D6FC8h */ case    2:  		/* mtspr CTR, R11 */
		/* 820D6FC8h case    2:*/		regs.CTR = regs.R11;
		/* 820D6FC8h case    2:*/		return 0x820D6FCC;
		  /* 820D6FCCh */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 820D6FCCh case    3:*/		if ( 1 ) { regs.LR = 0x820D6FD0; return (uint32)regs.CTR; }
		/* 820D6FCCh case    3:*/		return 0x820D6FD0;
		  /* 820D6FD0h */ case    4:  		/* lwz R11, <#[R1 + 112]> */
		/* 820D6FD0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820D6FD0h case    4:*/		return 0x820D6FD4;
		  /* 820D6FD4h */ case    5:  		/* mr R30, R3 */
		/* 820D6FD4h case    5:*/		regs.R30 = regs.R3;
		/* 820D6FD4h case    5:*/		return 0x820D6FD8;
		  /* 820D6FD8h */ case    6:  		/* mr R3, R11 */
		/* 820D6FD8h case    6:*/		regs.R3 = regs.R11;
		/* 820D6FD8h case    6:*/		return 0x820D6FDC;
		  /* 820D6FDCh */ case    7:  		/* lwz R10, <#[R11]> */
		/* 820D6FDCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820D6FDCh case    7:*/		return 0x820D6FE0;
		  /* 820D6FE0h */ case    8:  		/* lwz R11, <#[R10 + 12]> */
		/* 820D6FE0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 820D6FE0h case    8:*/		return 0x820D6FE4;
		  /* 820D6FE4h */ case    9:  		/* mtspr CTR, R11 */
		/* 820D6FE4h case    9:*/		regs.CTR = regs.R11;
		/* 820D6FE4h case    9:*/		return 0x820D6FE8;
		  /* 820D6FE8h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 820D6FE8h case   10:*/		if ( 1 ) { regs.LR = 0x820D6FEC; return (uint32)regs.CTR; }
		/* 820D6FE8h case   10:*/		return 0x820D6FEC;
		  /* 820D6FECh */ case   11:  		/* lis R11, -32235 */
		/* 820D6FECh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8215);
		/* 820D6FECh case   11:*/		return 0x820D6FF0;
		  /* 820D6FF0h */ case   12:  		/* mr R4, R30 */
		/* 820D6FF0h case   12:*/		regs.R4 = regs.R30;
		/* 820D6FF0h case   12:*/		return 0x820D6FF4;
		  /* 820D6FF4h */ case   13:  		/* mr R5, R29 */
		/* 820D6FF4h case   13:*/		regs.R5 = regs.R29;
		/* 820D6FF4h case   13:*/		return 0x820D6FF8;
		  /* 820D6FF8h */ case   14:  		/* li R6, 0 */
		/* 820D6FF8h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820D6FF8h case   14:*/		return 0x820D6FFC;
		  /* 820D6FFCh */ case   15:  		/* addi R7, R11, -14120 */
		/* 820D6FFCh case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFC8D8);
		/* 820D6FFCh case   15:*/		return 0x820D7000;
		  /* 820D7000h */ case   16:  		/* addi R8, R1, 116 */
		/* 820D7000h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x74);
		/* 820D7000h case   16:*/		return 0x820D7004;
		  /* 820D7004h */ case   17:  		/* bl 1584380 */
		/* 820D7004h case   17:*/		regs.LR = 0x820D7008; return 0x82259D00;
		/* 820D7004h case   17:*/		return 0x820D7008;
		  /* 820D7008h */ case   18:  		/* or. R30, R3, R3 */
		/* 820D7008h case   18:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820D7008h case   18:*/		return 0x820D700C;
		  /* 820D700Ch */ case   19:  		/* bc 12, CR0_LT, 16 */
		/* 820D700Ch case   19:*/		if ( regs.CR[0].lt ) { return 0x820D701C;  }
		/* 820D700Ch case   19:*/		return 0x820D7010;
		  /* 820D7010h */ case   20:  		/* lwz R11, <#[R1 + 116]> */
		/* 820D7010h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820D7010h case   20:*/		return 0x820D7014;
		  /* 820D7014h */ case   21:  		/* cmpwi CR6, R11, 0 */
		/* 820D7014h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7014h case   21:*/		return 0x820D7018;
		  /* 820D7018h */ case   22:  		/* bc 12, CR6_EQ, 296 */
		/* 820D7018h case   22:*/		if ( regs.CR[6].eq ) { return 0x820D7140;  }
		/* 820D7018h case   22:*/		return 0x820D701C;
	}
	return 0x820D701C;
} // Block from 820D6FC0h-820D701Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 820D701Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D701C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D701C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D701C);
		  /* 820D701Ch */ case    0:  		/* lwz R3, <#[R31]> */
		/* 820D701Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 820D701Ch case    0:*/		return 0x820D7020;
	}
	return 0x820D7020;
} // Block from 820D701Ch-820D7020h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7020h
// Function '?HandleFlow@CUAssembler@D3DXShader@@IAAJPAVCNodeUAsmInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7020);
		  /* 820D7020h */ case    0:  		/* addi R4, R31, 16 */
		/* 820D7020h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x10);
		/* 820D7020h case    0:*/		return 0x820D7024;
		  /* 820D7024h */ case    1:  		/* rlwinm R11, R30, 1, 31, 31 */
		/* 820D7024h case    1:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R30);
		/* 820D7024h case    1:*/		return 0x820D7028;
		  /* 820D7028h */ case    2:  		/* sth R27, <#[R1 + 152]> */
		/* 820D7028h case    2:*/		cpu::mem::store16( regs, regs.R27, (uint32)(regs.R1 + 0x00000098) );
		/* 820D7028h case    2:*/		return 0x820D702C;
		  /* 820D702Ch */ case    3:  		/* stw R4, <#[R1 + 148]> */
		/* 820D702Ch case    3:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000094) );
		/* 820D702Ch case    3:*/		return 0x820D7030;
		  /* 820D7030h */ case    4:  		/* cmpwi CR6, R30, 0 */
		/* 820D7030h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 820D7030h case    4:*/		return 0x820D7034;
		  /* 820D7034h */ case    5:  		/* stw R11, <#[R1 + 156]> */
		/* 820D7034h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 820D7034h case    5:*/		return 0x820D7038;
		  /* 820D7038h */ case    6:  		/* lis R10, -32255 */
		/* 820D7038h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 820D7038h case    6:*/		return 0x820D703C;
		  /* 820D703Ch */ case    7:  		/* stw R3, <#[R1 + 144]> */
		/* 820D703Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000090) );
		/* 820D703Ch case    7:*/		return 0x820D7040;
		  /* 820D7040h */ case    8:  		/* bc 4, CR6_LT, 20 */
		/* 820D7040h case    8:*/		if ( !regs.CR[6].lt ) { return 0x820D7054;  }
		/* 820D7040h case    8:*/		return 0x820D7044;
		  /* 820D7044h */ case    9:  		/* cmpwi CR6, R11, 0 */
		/* 820D7044h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7044h case    9:*/		return 0x820D7048;
		  /* 820D7048h */ case   10:  		/* lis R11, -32255 */
		/* 820D7048h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D7048h case   10:*/		return 0x820D704C;
		  /* 820D704Ch */ case   11:  		/* addi R7, R11, 32512 */
		/* 820D704Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x7F00);
		/* 820D704Ch case   11:*/		return 0x820D7050;
		  /* 820D7050h */ case   12:  		/* b 16 */
		/* 820D7050h case   12:*/		return 0x820D7060;
		/* 820D7050h case   12:*/		return 0x820D7054;
	}
	return 0x820D7054;
} // Block from 820D7020h-820D7054h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D7054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7054);
		  /* 820D7054h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 820D7054h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7054h case    0:*/		return 0x820D7058;
		  /* 820D7058h */ case    1:  		/* lis R11, -32255 */
		/* 820D7058h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D7058h case    1:*/		return 0x820D705C;
		  /* 820D705Ch */ case    2:  		/* addi R7, R11, 32460 */
		/* 820D705Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x7ECC);
		/* 820D705Ch case    2:*/		return 0x820D7060;
	}
	return 0x820D7060;
} // Block from 820D7054h-820D7060h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D7060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7060);
		  /* 820D7060h */ case    0:  		/* addi R6, R10, -10432 */
		/* 820D7060h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFD740);
		/* 820D7060h case    0:*/		return 0x820D7064;
		  /* 820D7064h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 820D7064h case    1:*/		if ( regs.CR[6].eq ) { return 0x820D7074;  }
		/* 820D7064h case    1:*/		return 0x820D7068;
		  /* 820D7068h */ case    2:  		/* li R5, 7101 */
		/* 820D7068h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1BBD);
		/* 820D7068h case    2:*/		return 0x820D706C;
		  /* 820D706Ch */ case    3:  		/* bl -196316 */
		/* 820D706Ch case    3:*/		regs.LR = 0x820D7070; return 0x820A7190;
		/* 820D706Ch case    3:*/		return 0x820D7070;
		  /* 820D7070h */ case    4:  		/* b 12 */
		/* 820D7070h case    4:*/		return 0x820D707C;
		/* 820D7070h case    4:*/		return 0x820D7074;
	}
	return 0x820D7074;
} // Block from 820D7060h-820D7074h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D7074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7074);
		  /* 820D7074h */ case    0:  		/* li R5, 7102 */
		/* 820D7074h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1BBE);
		/* 820D7074h case    0:*/		return 0x820D7078;
		  /* 820D7078h */ case    1:  		/* bl -195872 */
		/* 820D7078h case    1:*/		regs.LR = 0x820D707C; return 0x820A7358;
		/* 820D7078h case    1:*/		return 0x820D707C;
	}
	return 0x820D707C;
} // Block from 820D7074h-820D707Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D707Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D707C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D707C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D707C);
		  /* 820D707Ch */ case    0:  		/* lwz R3, <#[R1 + 112]> */
		/* 820D707Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 820D707Ch case    0:*/		return 0x820D7080;
		  /* 820D7080h */ case    1:  		/* lwz R11, <#[R3]> */
		/* 820D7080h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D7080h case    1:*/		return 0x820D7084;
		  /* 820D7084h */ case    2:  		/* lwz R11, <#[R11 + 16]> */
		/* 820D7084h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820D7084h case    2:*/		return 0x820D7088;
		  /* 820D7088h */ case    3:  		/* mtspr CTR, R11 */
		/* 820D7088h case    3:*/		regs.CTR = regs.R11;
		/* 820D7088h case    3:*/		return 0x820D708C;
		  /* 820D708Ch */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 820D708Ch case    4:*/		if ( 1 ) { regs.LR = 0x820D7090; return (uint32)regs.CTR; }
		/* 820D708Ch case    4:*/		return 0x820D7090;
		  /* 820D7090h */ case    5:  		/* lwz R11, <#[R1 + 112]> */
		/* 820D7090h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820D7090h case    5:*/		return 0x820D7094;
		  /* 820D7094h */ case    6:  		/* mr R31, R3 */
		/* 820D7094h case    6:*/		regs.R31 = regs.R3;
		/* 820D7094h case    6:*/		return 0x820D7098;
		  /* 820D7098h */ case    7:  		/* mr R3, R11 */
		/* 820D7098h case    7:*/		regs.R3 = regs.R11;
		/* 820D7098h case    7:*/		return 0x820D709C;
		  /* 820D709Ch */ case    8:  		/* lwz R10, <#[R11]> */
		/* 820D709Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820D709Ch case    8:*/		return 0x820D70A0;
		  /* 820D70A0h */ case    9:  		/* lwz R11, <#[R10 + 12]> */
		/* 820D70A0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 820D70A0h case    9:*/		return 0x820D70A4;
		  /* 820D70A4h */ case   10:  		/* mtspr CTR, R11 */
		/* 820D70A4h case   10:*/		regs.CTR = regs.R11;
		/* 820D70A4h case   10:*/		return 0x820D70A8;
		  /* 820D70A8h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 820D70A8h case   11:*/		if ( 1 ) { regs.LR = 0x820D70AC; return (uint32)regs.CTR; }
		/* 820D70A8h case   11:*/		return 0x820D70AC;
		  /* 820D70ACh */ case   12:  		/* lis R11, -32243 */
		/* 820D70ACh case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF820D);
		/* 820D70ACh case   12:*/		return 0x820D70B0;
		  /* 820D70B0h */ case   13:  		/* mr R4, R31 */
		/* 820D70B0h case   13:*/		regs.R4 = regs.R31;
		/* 820D70B0h case   13:*/		return 0x820D70B4;
		  /* 820D70B4h */ case   14:  		/* mr R5, R29 */
		/* 820D70B4h case   14:*/		regs.R5 = regs.R29;
		/* 820D70B4h case   14:*/		return 0x820D70B8;
		  /* 820D70B8h */ case   15:  		/* li R6, 0 */
		/* 820D70B8h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820D70B8h case   15:*/		return 0x820D70BC;
		  /* 820D70BCh */ case   16:  		/* addi R7, R11, -3288 */
		/* 820D70BCh case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFF328);
		/* 820D70BCh case   16:*/		return 0x820D70C0;
		  /* 820D70C0h */ case   17:  		/* addi R8, R1, 144 */
		/* 820D70C0h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 820D70C0h case   17:*/		return 0x820D70C4;
		  /* 820D70C4h */ case   18:  		/* bl 1584188 */
		/* 820D70C4h case   18:*/		regs.LR = 0x820D70C8; return 0x82259D00;
		/* 820D70C4h case   18:*/		return 0x820D70C8;
		  /* 820D70C8h */ case   19:  		/* lhz R11, <#[R1 + 152]> */
		/* 820D70C8h case   19:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 820D70C8h case   19:*/		return 0x820D70CC;
		  /* 820D70CCh */ case   20:  		/* cmplwi CR0, R11, 0 */
		/* 820D70CCh case   20:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 820D70CCh case   20:*/		return 0x820D70D0;
		  /* 820D70D0h */ case   21:  		/* bc 12, CR0_EQ, 12 */
		/* 820D70D0h case   21:*/		if ( regs.CR[0].eq ) { return 0x820D70DC;  }
		/* 820D70D0h case   21:*/		return 0x820D70D4;
		  /* 820D70D4h */ case   22:  		/* addi R3, R1, 144 */
		/* 820D70D4h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820D70D4h case   22:*/		return 0x820D70D8;
		  /* 820D70D8h */ case   23:  		/* bl -32408 */
		/* 820D70D8h case   23:*/		regs.LR = 0x820D70DC; return 0x820CF240;
		/* 820D70D8h case   23:*/		return 0x820D70DC;
	}
	return 0x820D70DC;
} // Block from 820D707Ch-820D70DCh (24 instructions)

//////////////////////////////////////////////////////
// Block at 820D70DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D70DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D70DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D70DC);
		  /* 820D70DCh */ case    0:  		/* lwz R3, <#[R1 + 112]> */
		/* 820D70DCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 820D70DCh case    0:*/		return 0x820D70E0;
		  /* 820D70E0h */ case    1:  		/* lwz R11, <#[R3]> */
		/* 820D70E0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D70E0h case    1:*/		return 0x820D70E4;
		  /* 820D70E4h */ case    2:  		/* lwz R11, <#[R11 + 16]> */
		/* 820D70E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820D70E4h case    2:*/		return 0x820D70E8;
		  /* 820D70E8h */ case    3:  		/* mtspr CTR, R11 */
		/* 820D70E8h case    3:*/		regs.CTR = regs.R11;
		/* 820D70E8h case    3:*/		return 0x820D70EC;
		  /* 820D70ECh */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 820D70ECh case    4:*/		if ( 1 ) { regs.LR = 0x820D70F0; return (uint32)regs.CTR; }
		/* 820D70ECh case    4:*/		return 0x820D70F0;
		  /* 820D70F0h */ case    5:  		/* lwz R11, <#[R1 + 112]> */
		/* 820D70F0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820D70F0h case    5:*/		return 0x820D70F4;
		  /* 820D70F4h */ case    6:  		/* mr R31, R3 */
		/* 820D70F4h case    6:*/		regs.R31 = regs.R3;
		/* 820D70F4h case    6:*/		return 0x820D70F8;
		  /* 820D70F8h */ case    7:  		/* mr R3, R11 */
		/* 820D70F8h case    7:*/		regs.R3 = regs.R11;
		/* 820D70F8h case    7:*/		return 0x820D70FC;
		  /* 820D70FCh */ case    8:  		/* lwz R10, <#[R11]> */
		/* 820D70FCh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820D70FCh case    8:*/		return 0x820D7100;
		  /* 820D7100h */ case    9:  		/* lwz R11, <#[R10 + 12]> */
		/* 820D7100h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 820D7100h case    9:*/		return 0x820D7104;
		  /* 820D7104h */ case   10:  		/* mtspr CTR, R11 */
		/* 820D7104h case   10:*/		regs.CTR = regs.R11;
		/* 820D7104h case   10:*/		return 0x820D7108;
		  /* 820D7108h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 820D7108h case   11:*/		if ( 1 ) { regs.LR = 0x820D710C; return (uint32)regs.CTR; }
		/* 820D7108h case   11:*/		return 0x820D710C;
		  /* 820D710Ch */ case   12:  		/* lis R11, -32243 */
		/* 820D710Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF820D);
		/* 820D710Ch case   12:*/		return 0x820D7110;
		  /* 820D7110h */ case   13:  		/* mr R4, R31 */
		/* 820D7110h case   13:*/		regs.R4 = regs.R31;
		/* 820D7110h case   13:*/		return 0x820D7114;
		  /* 820D7114h */ case   14:  		/* li R5, 68 */
		/* 820D7114h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x44);
		/* 820D7114h case   14:*/		return 0x820D7118;
		  /* 820D7118h */ case   15:  		/* addi R6, R11, -3288 */
		/* 820D7118h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFF328);
		/* 820D7118h case   15:*/		return 0x820D711C;
		  /* 820D711Ch */ case   16:  		/* addi R7, R1, 144 */
		/* 820D711Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x90);
		/* 820D711Ch case   16:*/		return 0x820D7120;
		  /* 820D7120h */ case   17:  		/* li R8, 0 */
		/* 820D7120h case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820D7120h case   17:*/		return 0x820D7124;
		  /* 820D7124h */ case   18:  		/* li R9, 0 */
		/* 820D7124h case   18:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820D7124h case   18:*/		return 0x820D7128;
		  /* 820D7128h */ case   19:  		/* bl 501672 */
		/* 820D7128h case   19:*/		regs.LR = 0x820D712C; return 0x821518D0;
		/* 820D7128h case   19:*/		return 0x820D712C;
		  /* 820D712Ch */ case   20:  		/* lhz R11, <#[R1 + 152]> */
		/* 820D712Ch case   20:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 820D712Ch case   20:*/		return 0x820D7130;
		  /* 820D7130h */ case   21:  		/* cmplwi CR0, R11, 0 */
		/* 820D7130h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 820D7130h case   21:*/		return 0x820D7134;
		  /* 820D7134h */ case   22:  		/* bc 12, CR0_EQ, 12 */
		/* 820D7134h case   22:*/		if ( regs.CR[0].eq ) { return 0x820D7140;  }
		/* 820D7134h case   22:*/		return 0x820D7138;
		  /* 820D7138h */ case   23:  		/* addi R3, R1, 144 */
		/* 820D7138h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820D7138h case   23:*/		return 0x820D713C;
		  /* 820D713Ch */ case   24:  		/* bl -32508 */
		/* 820D713Ch case   24:*/		regs.LR = 0x820D7140; return 0x820CF240;
		/* 820D713Ch case   24:*/		return 0x820D7140;
	}
	return 0x820D7140;
} // Block from 820D70DCh-820D7140h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820D7140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7140);
		  /* 820D7140h */ case    0:  		/* mr R3, R30 */
		/* 820D7140h case    0:*/		regs.R3 = regs.R30;
		/* 820D7140h case    0:*/		return 0x820D7144;
	}
	return 0x820D7144;
} // Block from 820D7140h-820D7144h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7144);
		  /* 820D7144h */ case    0:  		/* addi R1, R1, 1264 */
		/* 820D7144h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x4F0);
		/* 820D7144h case    0:*/		return 0x820D7148;
		  /* 820D7148h */ case    1:  		/* b -286380 */
		/* 820D7148h case    1:*/		return 0x8209129C;
		/* 820D7148h case    1:*/		return 0x820D714C;
		  /* 820D714Ch */ case    2:  		/* nop */
		/* 820D714Ch case    2:*/		cpu::op::nop();
		/* 820D714Ch case    2:*/		return 0x820D7150;
	}
	return 0x820D7150;
} // Block from 820D7144h-820D7150h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D7150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7150);
		  /* 820D7150h */ case    0:  		/* mfspr R12, LR */
		/* 820D7150h case    0:*/		regs.R12 = regs.LR;
		/* 820D7150h case    0:*/		return 0x820D7154;
		  /* 820D7154h */ case    1:  		/* bl -286456 */
		/* 820D7154h case    1:*/		regs.LR = 0x820D7158; return 0x8209125C;
		/* 820D7154h case    1:*/		return 0x820D7158;
		  /* 820D7158h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820D7158h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820D7158h case    2:*/		return 0x820D715C;
		  /* 820D715Ch */ case    3:  		/* lwz R11, <#[R4 + 88]> */
		/* 820D715Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000058) );
		/* 820D715Ch case    3:*/		return 0x820D7160;
		  /* 820D7160h */ case    4:  		/* lis R10, -32768 */
		/* 820D7160h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 820D7160h case    4:*/		return 0x820D7164;
		  /* 820D7164h */ case    5:  		/* mr R31, R3 */
		/* 820D7164h case    5:*/		regs.R31 = regs.R3;
		/* 820D7164h case    5:*/		return 0x820D7168;
		  /* 820D7168h */ case    6:  		/* li R29, 0 */
		/* 820D7168h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820D7168h case    6:*/		return 0x820D716C;
		  /* 820D716Ch */ case    7:  		/* ori R30, R10, 16389 */
		/* 820D716Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R10,0x4005);
		/* 820D716Ch case    7:*/		return 0x820D7170;
		  /* 820D7170h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 820D7170h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7170h case    8:*/		return 0x820D7174;
		  /* 820D7174h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 820D7174h case    9:*/		if ( regs.CR[6].eq ) { return 0x820D7188;  }
		/* 820D7174h case    9:*/		return 0x820D7178;
		  /* 820D7178h */ case   10:  		/* lis R11, -32254 */
		/* 820D7178h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D7178h case   10:*/		return 0x820D717C;
		  /* 820D717Ch */ case   11:  		/* addi R4, R11, -32624 */
		/* 820D717Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8090);
		/* 820D717Ch case   11:*/		return 0x820D7180;
		  /* 820D7180h */ case   12:  		/* bl -26776 */
		/* 820D7180h case   12:*/		regs.LR = 0x820D7184; return 0x820D08E8;
		/* 820D7180h case   12:*/		return 0x820D7184;
		  /* 820D7184h */ case   13:  		/* mr R29, R30 */
		/* 820D7184h case   13:*/		regs.R29 = regs.R30;
		/* 820D7184h case   13:*/		return 0x820D7188;
	}
	return 0x820D7188;
} // Block from 820D7150h-820D7188h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D7188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7188);
		  /* 820D7188h */ case    0:  		/* lwz R11, <#[R31 + 104]> */
		/* 820D7188h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 820D7188h case    0:*/		return 0x820D718C;
		  /* 820D718Ch */ case    1:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 820D718Ch case    1:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 820D718Ch case    1:*/		return 0x820D7190;
		  /* 820D7190h */ case    2:  		/* bc 4, CR0_EQ, 24 */
		/* 820D7190h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820D71A8;  }
		/* 820D7190h case    2:*/		return 0x820D7194;
		  /* 820D7194h */ case    3:  		/* lis R11, -32254 */
		/* 820D7194h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D7194h case    3:*/		return 0x820D7198;
		  /* 820D7198h */ case    4:  		/* mr R3, R31 */
		/* 820D7198h case    4:*/		regs.R3 = regs.R31;
		/* 820D7198h case    4:*/		return 0x820D719C;
		  /* 820D719Ch */ case    5:  		/* addi R4, R11, -32696 */
		/* 820D719Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8048);
		/* 820D719Ch case    5:*/		return 0x820D71A0;
		  /* 820D71A0h */ case    6:  		/* bl -26808 */
		/* 820D71A0h case    6:*/		regs.LR = 0x820D71A4; return 0x820D08E8;
		/* 820D71A0h case    6:*/		return 0x820D71A4;
		  /* 820D71A4h */ case    7:  		/* mr R29, R30 */
		/* 820D71A4h case    7:*/		regs.R29 = regs.R30;
		/* 820D71A4h case    7:*/		return 0x820D71A8;
	}
	return 0x820D71A8;
} // Block from 820D7188h-820D71A8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D71A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D71A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D71A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D71A8);
		  /* 820D71A8h */ case    0:  		/* lwz R11, <#[R31 + 316]> */
		/* 820D71A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000013C) );
		/* 820D71A8h case    0:*/		return 0x820D71AC;
		  /* 820D71ACh */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D71ACh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D71ACh case    1:*/		return 0x820D71B0;
		  /* 820D71B0h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 820D71B0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D71C8;  }
		/* 820D71B0h case    2:*/		return 0x820D71B4;
		  /* 820D71B4h */ case    3:  		/* lis R11, -32254 */
		/* 820D71B4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D71B4h case    3:*/		return 0x820D71B8;
		  /* 820D71B8h */ case    4:  		/* mr R3, R31 */
		/* 820D71B8h case    4:*/		regs.R3 = regs.R31;
		/* 820D71B8h case    4:*/		return 0x820D71BC;
		  /* 820D71BCh */ case    5:  		/* addi R4, R11, -32748 */
		/* 820D71BCh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8014);
		/* 820D71BCh case    5:*/		return 0x820D71C0;
		  /* 820D71C0h */ case    6:  		/* bl -26840 */
		/* 820D71C0h case    6:*/		regs.LR = 0x820D71C4; return 0x820D08E8;
		/* 820D71C0h case    6:*/		return 0x820D71C4;
		  /* 820D71C4h */ case    7:  		/* mr R29, R30 */
		/* 820D71C4h case    7:*/		regs.R29 = regs.R30;
		/* 820D71C4h case    7:*/		return 0x820D71C8;
	}
	return 0x820D71C8;
} // Block from 820D71A8h-820D71C8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D71C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D71C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D71C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D71C8);
		  /* 820D71C8h */ case    0:  		/* lwz R11, <#[R31 + 80]> */
		/* 820D71C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820D71C8h case    0:*/		return 0x820D71CC;
		  /* 820D71CCh */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D71CCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D71CCh case    1:*/		return 0x820D71D0;
		  /* 820D71D0h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 820D71D0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D71E8;  }
		/* 820D71D0h case    2:*/		return 0x820D71D4;
		  /* 820D71D4h */ case    3:  		/* lis R11, -32255 */
		/* 820D71D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D71D4h case    3:*/		return 0x820D71D8;
		  /* 820D71D8h */ case    4:  		/* mr R3, R31 */
		/* 820D71D8h case    4:*/		regs.R3 = regs.R31;
		/* 820D71D8h case    4:*/		return 0x820D71DC;
		  /* 820D71DCh */ case    5:  		/* addi R4, R11, 32720 */
		/* 820D71DCh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7FD0);
		/* 820D71DCh case    5:*/		return 0x820D71E0;
		  /* 820D71E0h */ case    6:  		/* bl -26872 */
		/* 820D71E0h case    6:*/		regs.LR = 0x820D71E4; return 0x820D08E8;
		/* 820D71E0h case    6:*/		return 0x820D71E4;
		  /* 820D71E4h */ case    7:  		/* mr R29, R30 */
		/* 820D71E4h case    7:*/		regs.R29 = regs.R30;
		/* 820D71E4h case    7:*/		return 0x820D71E8;
	}
	return 0x820D71E8;
} // Block from 820D71C8h-820D71E8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D71E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D71E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D71E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D71E8);
		  /* 820D71E8h */ case    0:  		/* cmpwi CR6, R29, 0 */
		/* 820D71E8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820D71E8h case    0:*/		return 0x820D71EC;
		  /* 820D71ECh */ case    1:  		/* bc 12, CR6_LT, 108 */
		/* 820D71ECh case    1:*/		if ( regs.CR[6].lt ) { return 0x820D7258;  }
		/* 820D71ECh case    1:*/		return 0x820D71F0;
		  /* 820D71F0h */ case    2:  		/* mr R3, R31 */
		/* 820D71F0h case    2:*/		regs.R3 = regs.R31;
		/* 820D71F0h case    2:*/		return 0x820D71F4;
		  /* 820D71F4h */ case    3:  		/* bl -3620 */
		/* 820D71F4h case    3:*/		regs.LR = 0x820D71F8; return 0x820D63D0;
		/* 820D71F4h case    3:*/		return 0x820D71F8;
		  /* 820D71F8h */ case    4:  		/* li R11, 1 */
		/* 820D71F8h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820D71F8h case    4:*/		return 0x820D71FC;
		  /* 820D71FCh */ case    5:  		/* mr R3, R31 */
		/* 820D71FCh case    5:*/		regs.R3 = regs.R31;
		/* 820D71FCh case    5:*/		return 0x820D7200;
		  /* 820D7200h */ case    6:  		/* stw R11, <#[R31 + 316]> */
		/* 820D7200h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000013C) );
		/* 820D7200h case    6:*/		return 0x820D7204;
		  /* 820D7204h */ case    7:  		/* bl -1596 */
		/* 820D7204h case    7:*/		regs.LR = 0x820D7208; return 0x820D6BC8;
		/* 820D7204h case    7:*/		return 0x820D7208;
		  /* 820D7208h */ case    8:  		/* li R4, 1 */
		/* 820D7208h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D7208h case    8:*/		return 0x820D720C;
		  /* 820D720Ch */ case    9:  		/* mr R3, R31 */
		/* 820D720Ch case    9:*/		regs.R3 = regs.R31;
		/* 820D720Ch case    9:*/		return 0x820D7210;
		  /* 820D7210h */ case   10:  		/* bl -8072 */
		/* 820D7210h case   10:*/		regs.LR = 0x820D7214; return 0x820D5288;
		/* 820D7210h case   10:*/		return 0x820D7214;
		  /* 820D7214h */ case   11:  		/* bl -433364 */
		/* 820D7214h case   11:*/		regs.LR = 0x820D7218; return 0x8206D540;
		/* 820D7214h case   11:*/		return 0x820D7218;
		  /* 820D7218h */ case   12:  		/* li R4, 1 */
		/* 820D7218h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D7218h case   12:*/		return 0x820D721C;
		  /* 820D721Ch */ case   13:  		/* mr R3, R31 */
		/* 820D721Ch case   13:*/		regs.R3 = regs.R31;
		/* 820D721Ch case   13:*/		return 0x820D7220;
		  /* 820D7220h */ case   14:  		/* bl -8088 */
		/* 820D7220h case   14:*/		regs.LR = 0x820D7224; return 0x820D5288;
		/* 820D7220h case   14:*/		return 0x820D7224;
		  /* 820D7224h */ case   15:  		/* bl -431140 */
		/* 820D7224h case   15:*/		regs.LR = 0x820D7228; return 0x8206DE00;
		/* 820D7224h case   15:*/		return 0x820D7228;
		  /* 820D7228h */ case   16:  		/* lwz R11, <#[R31 + 324]> */
		/* 820D7228h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000144) );
		/* 820D7228h case   16:*/		return 0x820D722C;
		  /* 820D722Ch */ case   17:  		/* addi R10, R3, 1 */
		/* 820D722Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x1);
		/* 820D722Ch case   17:*/		return 0x820D7230;
		  /* 820D7230h */ case   18:  		/* cmpwi CR6, R11, 0 */
		/* 820D7230h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7230h case   18:*/		return 0x820D7234;
		  /* 820D7234h */ case   19:  		/* rlwinm R4, R10, 31, 1, 31 */
		/* 820D7234h case   19:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R4,regs.R10);
		/* 820D7234h case   19:*/		return 0x820D7238;
		  /* 820D7238h */ case   20:  		/* bc 12, CR6_EQ, 12 */
		/* 820D7238h case   20:*/		if ( regs.CR[6].eq ) { return 0x820D7244;  }
		/* 820D7238h case   20:*/		return 0x820D723C;
		  /* 820D723Ch */ case   21:  		/* mr R3, R11 */
		/* 820D723Ch case   21:*/		regs.R3 = regs.R11;
		/* 820D723Ch case   21:*/		return 0x820D7240;
		  /* 820D7240h */ case   22:  		/* bl 455528 */
		/* 820D7240h case   22:*/		regs.LR = 0x820D7244; return 0x821465A8;
		/* 820D7240h case   22:*/		return 0x820D7244;
	}
	return 0x820D7244;
} // Block from 820D71E8h-820D7244h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820D7244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7244);
		  /* 820D7244h */ case    0:  		/* lwz R11, <#[R31 + 96]> */
		/* 820D7244h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 820D7244h case    0:*/		return 0x820D7248;
		  /* 820D7248h */ case    1:  		/* mr R3, R31 */
		/* 820D7248h case    1:*/		regs.R3 = regs.R31;
		/* 820D7248h case    1:*/		return 0x820D724C;
		  /* 820D724Ch */ case    2:  		/* addi R11, R11, 1 */
		/* 820D724Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820D724Ch case    2:*/		return 0x820D7250;
		  /* 820D7250h */ case    3:  		/* stw R11, <#[R31 + 96]> */
		/* 820D7250h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 820D7250h case    3:*/		return 0x820D7254;
		  /* 820D7254h */ case    4:  		/* bl -29324 */
		/* 820D7254h case    4:*/		regs.LR = 0x820D7258; return 0x820CFFC8;
		/* 820D7254h case    4:*/		return 0x820D7258;
	}
	return 0x820D7258;
} // Block from 820D7244h-820D7258h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D7258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7258);
		  /* 820D7258h */ case    0:  		/* mr R3, R29 */
		/* 820D7258h case    0:*/		regs.R3 = regs.R29;
		/* 820D7258h case    0:*/		return 0x820D725C;
		  /* 820D725Ch */ case    1:  		/* addi R1, R1, 128 */
		/* 820D725Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820D725Ch case    1:*/		return 0x820D7260;
		  /* 820D7260h */ case    2:  		/* b -286644 */
		/* 820D7260h case    2:*/		return 0x820912AC;
		/* 820D7260h case    2:*/		return 0x820D7264;
		  /* 820D7264h */ case    3:  		/* nop */
		/* 820D7264h case    3:*/		cpu::op::nop();
		/* 820D7264h case    3:*/		return 0x820D7268;
	}
	return 0x820D7268;
} // Block from 820D7258h-820D7268h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D7268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7268);
		  /* 820D7268h */ case    0:  		/* mfspr R12, LR */
		/* 820D7268h case    0:*/		regs.R12 = regs.LR;
		/* 820D7268h case    0:*/		return 0x820D726C;
		  /* 820D726Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820D726Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D726Ch case    1:*/		return 0x820D7270;
		  /* 820D7270h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820D7270h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820D7270h case    2:*/		return 0x820D7274;
		  /* 820D7274h */ case    3:  		/* lwz R10, <#[R3 + 80]> */
		/* 820D7274h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000050) );
		/* 820D7274h case    3:*/		return 0x820D7278;
		  /* 820D7278h */ case    4:  		/* li R11, 0 */
		/* 820D7278h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820D7278h case    4:*/		return 0x820D727C;
		  /* 820D727Ch */ case    5:  		/* cmpwi CR6, R10, 0 */
		/* 820D727Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820D727Ch case    5:*/		return 0x820D7280;
		  /* 820D7280h */ case    6:  		/* lwz R10, <#[R4 + 56]> */
		/* 820D7280h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000038) );
		/* 820D7280h case    6:*/		return 0x820D7284;
		  /* 820D7284h */ case    7:  		/* bc 12, CR6_EQ, 100 */
		/* 820D7284h case    7:*/		if ( regs.CR[6].eq ) { return 0x820D72E8;  }
		/* 820D7284h case    7:*/		return 0x820D7288;
		  /* 820D7288h */ case    8:  		/* cmplwi CR6, R10, 6 */
		/* 820D7288h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000006);
		/* 820D7288h case    8:*/		return 0x820D728C;
		  /* 820D728Ch */ case    9:  		/* bc 12, CR6_EQ, 68 */
		/* 820D728Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x820D72D0;  }
		/* 820D728Ch case    9:*/		return 0x820D7290;
		  /* 820D7290h */ case   10:  		/* cmplwi CR6, R10, 7 */
		/* 820D7290h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000007);
		/* 820D7290h case   10:*/		return 0x820D7294;
		  /* 820D7294h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 820D7294h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D72AC;  }
		/* 820D7294h case   11:*/		return 0x820D7298;
		  /* 820D7298h */ case   12:  		/* cmplwi CR6, R10, 8 */
		/* 820D7298h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000008);
		/* 820D7298h case   12:*/		return 0x820D729C;
		  /* 820D729Ch */ case   13:  		/* bc 4, CR6_EQ, 184 */
		/* 820D729Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x820D7354;  }
		/* 820D729Ch case   13:*/		return 0x820D72A0;
		  /* 820D72A0h */ case   14:  		/* lis R11, -32254 */
		/* 820D72A0h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D72A0h case   14:*/		return 0x820D72A4;
		  /* 820D72A4h */ case   15:  		/* addi R4, R11, -32424 */
		/* 820D72A4h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8158);
		/* 820D72A4h case   15:*/		return 0x820D72A8;
		  /* 820D72A8h */ case   16:  		/* b 48 */
		/* 820D72A8h case   16:*/		return 0x820D72D8;
		/* 820D72A8h case   16:*/		return 0x820D72AC;
	}
	return 0x820D72AC;
} // Block from 820D7268h-820D72ACh (17 instructions)

//////////////////////////////////////////////////////
// Block at 820D72ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D72AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D72AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D72AC);
		  /* 820D72ACh */ case    0:  		/* lwz R11, <#[R4 + 60]> */
		/* 820D72ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000003C) );
		/* 820D72ACh case    0:*/		return 0x820D72B0;
		  /* 820D72B0h */ case    1:  		/* cmplwi CR6, R11, 248 */
		/* 820D72B0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000F8);
		/* 820D72B0h case    1:*/		return 0x820D72B4;
		  /* 820D72B4h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 820D72B4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D72C4;  }
		/* 820D72B4h case    2:*/		return 0x820D72B8;
		  /* 820D72B8h */ case    3:  		/* lis R11, -32254 */
		/* 820D72B8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D72B8h case    3:*/		return 0x820D72BC;
		  /* 820D72BCh */ case    4:  		/* addi R4, R11, -32476 */
		/* 820D72BCh case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8124);
		/* 820D72BCh case    4:*/		return 0x820D72C0;
		  /* 820D72C0h */ case    5:  		/* b 24 */
		/* 820D72C0h case    5:*/		return 0x820D72D8;
		/* 820D72C0h case    5:*/		return 0x820D72C4;
	}
	return 0x820D72C4;
} // Block from 820D72ACh-820D72C4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D72C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D72C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D72C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D72C4);
		  /* 820D72C4h */ case    0:  		/* lis R11, -32254 */
		/* 820D72C4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D72C4h case    0:*/		return 0x820D72C8;
		  /* 820D72C8h */ case    1:  		/* addi R4, R11, -32528 */
		/* 820D72C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF80F0);
		/* 820D72C8h case    1:*/		return 0x820D72CC;
		  /* 820D72CCh */ case    2:  		/* b 12 */
		/* 820D72CCh case    2:*/		return 0x820D72D8;
		/* 820D72CCh case    2:*/		return 0x820D72D0;
	}
	return 0x820D72D0;
} // Block from 820D72C4h-820D72D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D72D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D72D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D72D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D72D0);
		  /* 820D72D0h */ case    0:  		/* lis R11, -32254 */
		/* 820D72D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D72D0h case    0:*/		return 0x820D72D4;
		  /* 820D72D4h */ case    1:  		/* addi R4, R11, -32584 */
		/* 820D72D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF80B8);
		/* 820D72D4h case    1:*/		return 0x820D72D8;
	}
	return 0x820D72D8;
} // Block from 820D72D0h-820D72D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D72D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D72D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D72D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D72D8);
		  /* 820D72D8h */ case    0:  		/* bl -27120 */
		/* 820D72D8h case    0:*/		regs.LR = 0x820D72DC; return 0x820D08E8;
		/* 820D72D8h case    0:*/		return 0x820D72DC;
		  /* 820D72DCh */ case    1:  		/* lis R11, -32768 */
		/* 820D72DCh case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 820D72DCh case    1:*/		return 0x820D72E0;
		  /* 820D72E0h */ case    2:  		/* ori R11, R11, 16389 */
		/* 820D72E0h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4005);
		/* 820D72E0h case    2:*/		return 0x820D72E4;
		  /* 820D72E4h */ case    3:  		/* b 112 */
		/* 820D72E4h case    3:*/		return 0x820D7354;
		/* 820D72E4h case    3:*/		return 0x820D72E8;
	}
	return 0x820D72E8;
} // Block from 820D72D8h-820D72E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D72E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D72E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D72E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D72E8);
		  /* 820D72E8h */ case    0:  		/* cmplwi CR6, R10, 8 */
		/* 820D72E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000008);
		/* 820D72E8h case    0:*/		return 0x820D72EC;
		  /* 820D72ECh */ case    1:  		/* bc 12, CR6_GT, 104 */
		/* 820D72ECh case    1:*/		if ( regs.CR[6].gt ) { return 0x820D7354;  }
		/* 820D72ECh case    1:*/		return 0x820D72F0;
		  /* 820D72F0h */ case    2:  		/* mtspr CTR, R10 */
		/* 820D72F0h case    2:*/		regs.CTR = regs.R10;
		/* 820D72F0h case    2:*/		return 0x820D72F4;
		  /* 820D72F4h */ case    3:  		/* cmpwi CR6, R10, 0 */
		/* 820D72F4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820D72F4h case    3:*/		return 0x820D72F8;
		  /* 820D72F8h */ case    4:  		/* bc 12, CR6_EQ, 76 */
		/* 820D72F8h case    4:*/		if ( regs.CR[6].eq ) { return 0x820D7344;  }
		/* 820D72F8h case    4:*/		return 0x820D72FC;
		  /* 820D72FCh */ case    5:  		/* bc 18, CR0_LT, 64 */
		/* 820D72FCh case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x820D733C;  }
		/* 820D72FCh case    5:*/		return 0x820D7300;
		  /* 820D7300h */ case    6:  		/* bc 18, CR0_LT, 28 */
		/* 820D7300h case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x820D731C;  }
		/* 820D7300h case    6:*/		return 0x820D7304;
		  /* 820D7304h */ case    7:  		/* bc 18, CR0_LT, 24 */
		/* 820D7304h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x820D731C;  }
		/* 820D7304h case    7:*/		return 0x820D7308;
		  /* 820D7308h */ case    8:  		/* bc 18, CR0_LT, 20 */
		/* 820D7308h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x820D731C;  }
		/* 820D7308h case    8:*/		return 0x820D730C;
		  /* 820D730Ch */ case    9:  		/* bc 18, CR0_LT, 24 */
		/* 820D730Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x820D7324;  }
		/* 820D730Ch case    9:*/		return 0x820D7310;
		  /* 820D7310h */ case   10:  		/* bc 18, CR0_LT, 36 */
		/* 820D7310h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x820D7334;  }
		/* 820D7310h case   10:*/		return 0x820D7314;
		  /* 820D7314h */ case   11:  		/* bc 18, CR0_LT, 56 */
		/* 820D7314h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x820D734C;  }
		/* 820D7314h case   11:*/		return 0x820D7318;
		  /* 820D7318h */ case   12:  		/* b 20 */
		/* 820D7318h case   12:*/		return 0x820D732C;
		/* 820D7318h case   12:*/		return 0x820D731C;
	}
	return 0x820D731C;
} // Block from 820D72E8h-820D731Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D731Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D731C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D731C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D731C);
		  /* 820D731Ch */ case    0:  		/* bl -6356 */
		/* 820D731Ch case    0:*/		regs.LR = 0x820D7320; return 0x820D5A48;
		/* 820D731Ch case    0:*/		return 0x820D7320;
		  /* 820D7320h */ case    1:  		/* b 48 */
		/* 820D7320h case    1:*/		return 0x820D7350;
		/* 820D7320h case    1:*/		return 0x820D7324;
	}
	return 0x820D7324;
} // Block from 820D731Ch-820D7324h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D7324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7324);
		  /* 820D7324h */ case    0:  		/* bl -3396 */
		/* 820D7324h case    0:*/		regs.LR = 0x820D7328; return 0x820D65E0;
		/* 820D7324h case    0:*/		return 0x820D7328;
		  /* 820D7328h */ case    1:  		/* b 40 */
		/* 820D7328h case    1:*/		return 0x820D7350;
		/* 820D7328h case    1:*/		return 0x820D732C;
	}
	return 0x820D732C;
} // Block from 820D7324h-820D732Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D732Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D732C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D732C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D732C);
		  /* 820D732Ch */ case    0:  		/* bl -476 */
		/* 820D732Ch case    0:*/		regs.LR = 0x820D7330; return 0x820D7150;
		/* 820D732Ch case    0:*/		return 0x820D7330;
		  /* 820D7330h */ case    1:  		/* b 32 */
		/* 820D7330h case    1:*/		return 0x820D7350;
		/* 820D7330h case    1:*/		return 0x820D7334;
	}
	return 0x820D7334;
} // Block from 820D732Ch-820D7334h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D7334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7334);
		  /* 820D7334h */ case    0:  		/* bl -9564 */
		/* 820D7334h case    0:*/		regs.LR = 0x820D7338; return 0x820D4DD8;
		/* 820D7334h case    0:*/		return 0x820D7338;
		  /* 820D7338h */ case    1:  		/* b 24 */
		/* 820D7338h case    1:*/		return 0x820D7350;
		/* 820D7338h case    1:*/		return 0x820D733C;
	}
	return 0x820D733C;
} // Block from 820D7334h-820D733Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D733Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D733C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D733C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D733C);
		  /* 820D733Ch */ case    0:  		/* bl -4828 */
		/* 820D733Ch case    0:*/		regs.LR = 0x820D7340; return 0x820D6060;
		/* 820D733Ch case    0:*/		return 0x820D7340;
		  /* 820D7340h */ case    1:  		/* b 16 */
		/* 820D7340h case    1:*/		return 0x820D7350;
		/* 820D7340h case    1:*/		return 0x820D7344;
	}
	return 0x820D7344;
} // Block from 820D733Ch-820D7344h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D7344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7344);
		  /* 820D7344h */ case    0:  		/* bl -4444 */
		/* 820D7344h case    0:*/		regs.LR = 0x820D7348; return 0x820D61E8;
		/* 820D7344h case    0:*/		return 0x820D7348;
		  /* 820D7348h */ case    1:  		/* b 8 */
		/* 820D7348h case    1:*/		return 0x820D7350;
		/* 820D7348h case    1:*/		return 0x820D734C;
	}
	return 0x820D734C;
} // Block from 820D7344h-820D734Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D734Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D734C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D734C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D734C);
		  /* 820D734Ch */ case    0:  		/* bl -8204 */
		/* 820D734Ch case    0:*/		regs.LR = 0x820D7350; return 0x820D5340;
		/* 820D734Ch case    0:*/		return 0x820D7350;
	}
	return 0x820D7350;
} // Block from 820D734Ch-820D7350h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7350);
		  /* 820D7350h */ case    0:  		/* mr R11, R3 */
		/* 820D7350h case    0:*/		regs.R11 = regs.R3;
		/* 820D7350h case    0:*/		return 0x820D7354;
	}
	return 0x820D7354;
} // Block from 820D7350h-820D7354h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7354);
		  /* 820D7354h */ case    0:  		/* mr R3, R11 */
		/* 820D7354h case    0:*/		regs.R3 = regs.R11;
		/* 820D7354h case    0:*/		return 0x820D7358;
		  /* 820D7358h */ case    1:  		/* addi R1, R1, 112 */
		/* 820D7358h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820D7358h case    1:*/		return 0x820D735C;
		  /* 820D735Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 820D735Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D735Ch case    2:*/		return 0x820D7360;
		  /* 820D7360h */ case    3:  		/* mtspr LR, R12 */
		/* 820D7360h case    3:*/		regs.LR = regs.R12;
		/* 820D7360h case    3:*/		return 0x820D7364;
		  /* 820D7364h */ case    4:  		/* bclr 20, CR0_LT */
		/* 820D7364h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820D7364h case    4:*/		return 0x820D7368;
	}
	return 0x820D7368;
} // Block from 820D7354h-820D7368h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D7368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7368);
		  /* 820D7368h */ case    0:  		/* mfspr R12, LR */
		/* 820D7368h case    0:*/		regs.R12 = regs.LR;
		/* 820D7368h case    0:*/		return 0x820D736C;
		  /* 820D736Ch */ case    1:  		/* bl -287004 */
		/* 820D736Ch case    1:*/		regs.LR = 0x820D7370; return 0x82091250;
		/* 820D736Ch case    1:*/		return 0x820D7370;
		  /* 820D7370h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 820D7370h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 820D7370h case    2:*/		return 0x820D7374;
		  /* 820D7374h */ case    3:  		/* lwz R11, <#[R3 + 64]> */
		/* 820D7374h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000040) );
		/* 820D7374h case    3:*/		return 0x820D7378;
		  /* 820D7378h */ case    4:  		/* mr R29, R3 */
		/* 820D7378h case    4:*/		regs.R29 = regs.R3;
		/* 820D7378h case    4:*/		return 0x820D737C;
		  /* 820D737Ch */ case    5:  		/* mr R30, R5 */
		/* 820D737Ch case    5:*/		regs.R30 = regs.R5;
		/* 820D737Ch case    5:*/		return 0x820D7380;
		  /* 820D7380h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 820D7380h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7380h case    6:*/		return 0x820D7384;
		  /* 820D7384h */ case    7:  		/* bc 4, CR6_EQ, 2292 */
		/* 820D7384h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820D7C78;  }
		/* 820D7384h case    7:*/		return 0x820D7388;
		  /* 820D7388h */ case    8:  		/* li R28, 0 */
		/* 820D7388h case    8:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 820D7388h case    8:*/		return 0x820D738C;
		  /* 820D738Ch */ case    9:  		/* mr R9, R5 */
		/* 820D738Ch case    9:*/		regs.R9 = regs.R5;
		/* 820D738Ch case    9:*/		return 0x820D7390;
		  /* 820D7390h */ case   10:  		/* mr R31, R28 */
		/* 820D7390h case   10:*/		regs.R31 = regs.R28;
		/* 820D7390h case   10:*/		return 0x820D7394;
		  /* 820D7394h */ case   11:  		/* cmplwi CR6, R5, 0 */
		/* 820D7394h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820D7394h case   11:*/		return 0x820D7398;
		  /* 820D7398h */ case   12:  		/* bc 12, CR6_EQ, 68 */
		/* 820D7398h case   12:*/		if ( regs.CR[6].eq ) { return 0x820D73DC;  }
		/* 820D7398h case   12:*/		return 0x820D739C;
		  /* 820D739Ch */ case   13:  		/* rlwinm R10, R5, 2, 0, 29 */
		/* 820D739Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R5);
		/* 820D739Ch case   13:*/		return 0x820D73A0;
		  /* 820D73A0h */ case   14:  		/* addi R11, R1, 128 */
		/* 820D73A0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 820D73A0h case   14:*/		return 0x820D73A4;
		  /* 820D73A4h */ case   15:  		/* add R10, R10, R11 */
		/* 820D73A4h case   15:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820D73A4h case   15:*/		return 0x820D73A8;
		  /* 820D73A8h */ case   16:  		/* lwz R11, <#[R29 + 56]> */
		/* 820D73A8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000038) );
		/* 820D73A8h case   16:*/		return 0x820D73AC;
		  /* 820D73ACh */ case   17:  		/* addi R9, R9, -1 */
		/* 820D73ACh case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 820D73ACh case   17:*/		return 0x820D73B0;
		  /* 820D73B0h */ case   18:  		/* addi R10, R10, -4 */
		/* 820D73B0h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 820D73B0h case   18:*/		return 0x820D73B4;
		  /* 820D73B4h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 820D73B4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D73B4h case   19:*/		return 0x820D73B8;
		  /* 820D73B8h */ case   20:  		/* bc 12, CR6_EQ, 88 */
		/* 820D73B8h case   20:*/		if ( regs.CR[6].eq ) { return 0x820D7410;  }
		/* 820D73B8h case   20:*/		return 0x820D73BC;
		  /* 820D73BCh */ case   21:  		/* lwz R8, <#[R11 + 12]> */
		/* 820D73BCh case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D73BCh case   21:*/		return 0x820D73C0;
		  /* 820D73C0h */ case   22:  		/* cmplwi CR6, R9, 0 */
		/* 820D73C0h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820D73C0h case   22:*/		return 0x820D73C4;
		  /* 820D73C4h */ case   23:  		/* lwz R7, <#[R11 + 8]> */
		/* 820D73C4h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 820D73C4h case   23:*/		return 0x820D73C8;
		  /* 820D73C8h */ case   24:  		/* stw R8, <#[R29 + 56]> */
		/* 820D73C8h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R29 + 0x00000038) );
		/* 820D73C8h case   24:*/		return 0x820D73CC;
		  /* 820D73CCh */ case   25:  		/* stw R7, <#[R10]> */
		/* 820D73CCh case   25:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 820D73CCh case   25:*/		return 0x820D73D0;
		  /* 820D73D0h */ case   26:  		/* stw R28, <#[R11 + 8]> */
		/* 820D73D0h case   26:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 820D73D0h case   26:*/		return 0x820D73D4;
		  /* 820D73D4h */ case   27:  		/* stw R28, <#[R11 + 12]> */
		/* 820D73D4h case   27:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D73D4h case   27:*/		return 0x820D73D8;
		  /* 820D73D8h */ case   28:  		/* bc 4, CR6_EQ, -48 */
		/* 820D73D8h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820D73A8;  }
		/* 820D73D8h case   28:*/		return 0x820D73DC;
	}
	return 0x820D73DC;
} // Block from 820D7368h-820D73DCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 820D73DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D73DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D73DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D73DC);
		  /* 820D73DCh */ case    0:  		/* li R27, 1 */
		/* 820D73DCh case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820D73DCh case    0:*/		return 0x820D73E0;
		  /* 820D73E0h */ case    1:  		/* cmplwi CR6, R4, 98 */
		/* 820D73E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000062);
		/* 820D73E0h case    1:*/		return 0x820D73E4;
		  /* 820D73E4h */ case    2:  		/* bc 12, CR6_GT, 2092 */
		/* 820D73E4h case    2:*/		if ( regs.CR[6].gt ) { return 0x820D7C10;  }
		/* 820D73E4h case    2:*/		return 0x820D73E8;
		  /* 820D73E8h */ case    3:  		/* lis R12, -32255 */
		/* 820D73E8h case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8201);
		/* 820D73E8h case    3:*/		return 0x820D73EC;
		  /* 820D73ECh */ case    4:  		/* rlwinm R0, R4, 1, 0, 30 */
		/* 820D73ECh case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R4);
		/* 820D73ECh case    4:*/		return 0x820D73F0;
		  /* 820D73F0h */ case    5:  		/* addi R12, R12, 21944 */
		/* 820D73F0h case    5:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x55B8);
		/* 820D73F0h case    5:*/		return 0x820D73F4;
		  /* 820D73F4h */ case    6:  		/* lhzx R0, <#[R12 + R0]> */
		/* 820D73F4h case    6:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 820D73F4h case    6:*/		return 0x820D73F8;
		  /* 820D73F8h */ case    7:  		/* lis R12, -32243 */
		/* 820D73F8h case    7:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF820D);
		/* 820D73F8h case    7:*/		return 0x820D73FC;
		  /* 820D73FCh */ case    8:  		/* addi R12, R12, 29712 */
		/* 820D73FCh case    8:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x7410);
		/* 820D73FCh case    8:*/		return 0x820D7400;
		  /* 820D7400h */ case    9:  		/* ori R0, R0, 0 */
		/* 820D7400h case    9:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 820D7400h case    9:*/		return 0x820D7404;
		  /* 820D7404h */ case   10:  		/* add R12, R12, R0 */
		/* 820D7404h case   10:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 820D7404h case   10:*/		return 0x820D7408;
		  /* 820D7408h */ case   11:  		/* mtspr CTR, R12 */
		/* 820D7408h case   11:*/		regs.CTR = regs.R12;
		/* 820D7408h case   11:*/		return 0x820D740C;
		  /* 820D740Ch */ case   12:  		/* bcctr 20, CR0_LT */
		/* 820D740Ch case   12:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D740Ch case   12:*/		return 0x820D7410;
	}
	return 0x820D7410;
} // Block from 820D73DCh-820D7410h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D7410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7410);
		  /* 820D7410h */ case    0:  		/* lis R11, -32255 */
		/* 820D7410h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D7410h case    0:*/		return 0x820D7414;
		  /* 820D7414h */ case    1:  		/* lwz R3, <#[R29]> */
		/* 820D7414h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 820D7414h case    1:*/		return 0x820D7418;
		  /* 820D7418h */ case    2:  		/* li R5, 0 */
		/* 820D7418h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D7418h case    2:*/		return 0x820D741C;
		  /* 820D741Ch */ case    3:  		/* addi R6, R11, -9956 */
		/* 820D741Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFD91C);
		/* 820D741Ch case    3:*/		return 0x820D7420;
		  /* 820D7420h */ case    4:  		/* addi R4, R29, 16 */
		/* 820D7420h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x10);
		/* 820D7420h case    4:*/		return 0x820D7424;
		  /* 820D7424h */ case    5:  		/* bl -197268 */
		/* 820D7424h case    5:*/		regs.LR = 0x820D7428; return 0x820A7190;
		/* 820D7424h case    5:*/		return 0x820D7428;
		  /* 820D7428h */ case    6:  		/* li R11, 1 */
		/* 820D7428h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820D7428h case    6:*/		return 0x820D742C;
		  /* 820D742Ch */ case    7:  		/* stw R11, <#[R29 + 60]> */
		/* 820D742Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000003C) );
		/* 820D742Ch case    7:*/		return 0x820D7430;
		  /* 820D7430h */ case    8:  		/* b 2120 */
		/* 820D7430h case    8:*/		return 0x820D7C78;
		/* 820D7430h case    8:*/		return 0x820D7434;
		  /* 820D7434h */ case    9:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7434h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7434h case    9:*/		return 0x820D7438;
		  /* 820D7438h */ case   10:  		/* b 2008 */
		/* 820D7438h case   10:*/		return 0x820D7C10;
		/* 820D7438h case   10:*/		return 0x820D743C;
		  /* 820D743Ch */ case   11:  		/* lwz R4, <#[R1 + 128]> */
		/* 820D743Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 820D743Ch case   11:*/		return 0x820D7440;
		  /* 820D7440h */ case   12:  		/* lwz R3, <#[R1 + 132]> */
		/* 820D7440h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000084) );
		/* 820D7440h case   12:*/		return 0x820D7444;
		  /* 820D7444h */ case   13:  		/* bl -57532 */
		/* 820D7444h case   13:*/		regs.LR = 0x820D7448; return 0x820C9388;
		/* 820D7444h case   13:*/		return 0x820D7448;
		  /* 820D7448h */ case   14:  		/* mr R31, R3 */
		/* 820D7448h case   14:*/		regs.R31 = regs.R3;
		/* 820D7448h case   14:*/		return 0x820D744C;
		  /* 820D744Ch */ case   15:  		/* b 1988 */
		/* 820D744Ch case   15:*/		return 0x820D7C10;
		/* 820D744Ch case   15:*/		return 0x820D7450;
		  /* 820D7450h */ case   16:  		/* lwz R11, <#[R29 + 136]> */
		/* 820D7450h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000088) );
		/* 820D7450h case   16:*/		return 0x820D7454;
		  /* 820D7454h */ case   17:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7454h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7454h case   17:*/		return 0x820D7458;
		  /* 820D7458h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 820D7458h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D7458h case   18:*/		return 0x820D745C;
		  /* 820D745Ch */ case   19:  		/* bc 12, CR6_EQ, 1972 */
		/* 820D745Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x820D7C10;  }
		/* 820D745Ch case   19:*/		return 0x820D7460;
		  /* 820D7460h */ case   20:  		/* lwz R11, <#[R29 + 80]> */
		/* 820D7460h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000050) );
		/* 820D7460h case   20:*/		return 0x820D7464;
		  /* 820D7464h */ case   21:  		/* cmpwi CR6, R11, 0 */
		/* 820D7464h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7464h case   21:*/		return 0x820D7468;
		  /* 820D7468h */ case   22:  		/* bc 12, CR6_EQ, 24 */
		/* 820D7468h case   22:*/		if ( regs.CR[6].eq ) { return 0x820D7480;  }
		/* 820D7468h case   22:*/		return 0x820D746C;
		  /* 820D746Ch */ case   23:  		/* lis R11, -32254 */
		/* 820D746Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D746Ch case   23:*/		return 0x820D7470;
		  /* 820D7470h */ case   24:  		/* mr R3, R29 */
		/* 820D7470h case   24:*/		regs.R3 = regs.R29;
		/* 820D7470h case   24:*/		return 0x820D7474;
		  /* 820D7474h */ case   25:  		/* addi R4, R11, -32352 */
		/* 820D7474h case   25:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF81A0);
		/* 820D7474h case   25:*/		return 0x820D7478;
		  /* 820D7478h */ case   26:  		/* bl -27536 */
		/* 820D7478h case   26:*/		regs.LR = 0x820D747C; return 0x820D08E8;
		/* 820D7478h case   26:*/		return 0x820D747C;
		  /* 820D747Ch */ case   27:  		/* b 108 */
		/* 820D747Ch case   27:*/		return 0x820D74E8;
		/* 820D747Ch case   27:*/		return 0x820D7480;
	}
	return 0x820D7480;
} // Block from 820D7410h-820D7480h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820D7480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7480);
		  /* 820D7480h */ case    0:  		/* lwz R11, <#[R29 + 92]> */
		/* 820D7480h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000005C) );
		/* 820D7480h case    0:*/		return 0x820D7484;
		  /* 820D7484h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D7484h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7484h case    1:*/		return 0x820D7488;
		  /* 820D7488h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 820D7488h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820D74A4;  }
		/* 820D7488h case    2:*/		return 0x820D748C;
		  /* 820D748Ch */ case    3:  		/* stw R27, <#[R29 + 92]> */
		/* 820D748Ch case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x0000005C) );
		/* 820D748Ch case    3:*/		return 0x820D7490;
		  /* 820D7490h */ case    4:  		/* mr R3, R29 */
		/* 820D7490h case    4:*/		regs.R3 = regs.R29;
		/* 820D7490h case    4:*/		return 0x820D7494;
		  /* 820D7494h */ case    5:  		/* bl -10812 */
		/* 820D7494h case    5:*/		regs.LR = 0x820D7498; return 0x820D4A58;
		/* 820D7494h case    5:*/		return 0x820D7498;
		  /* 820D7498h */ case    6:  		/* lwz R4, <#[R29 + 104]> */
		/* 820D7498h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000068) );
		/* 820D7498h case    6:*/		return 0x820D749C;
		  /* 820D749Ch */ case    7:  		/* lwz R3, <#[R29 + 320]> */
		/* 820D749Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000140) );
		/* 820D749Ch case    7:*/		return 0x820D74A0;
		  /* 820D74A0h */ case    8:  		/* bl -432280 */
		/* 820D74A0h case    8:*/		regs.LR = 0x820D74A4; return 0x8206DC08;
		/* 820D74A0h case    8:*/		return 0x820D74A4;
	}
	return 0x820D74A4;
} // Block from 820D7480h-820D74A4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D74A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D74A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D74A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D74A4);
		  /* 820D74A4h */ case    0:  		/* lwz R3, <#[R29 + 136]> */
		/* 820D74A4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000088) );
		/* 820D74A4h case    0:*/		return 0x820D74A8;
		  /* 820D74A8h */ case    1:  		/* lwz R30, <#[R29 + 320]> */
		/* 820D74A8h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000140) );
		/* 820D74A8h case    1:*/		return 0x820D74AC;
		  /* 820D74ACh */ case    2:  		/* lwz R11, <#[R3]> */
		/* 820D74ACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D74ACh case    2:*/		return 0x820D74B0;
		  /* 820D74B0h */ case    3:  		/* lwz R11, <#[R11 + 16]> */
		/* 820D74B0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820D74B0h case    3:*/		return 0x820D74B4;
		  /* 820D74B4h */ case    4:  		/* mtspr CTR, R11 */
		/* 820D74B4h case    4:*/		regs.CTR = regs.R11;
		/* 820D74B4h case    4:*/		return 0x820D74B8;
		  /* 820D74B8h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 820D74B8h case    5:*/		if ( 1 ) { regs.LR = 0x820D74BC; return (uint32)regs.CTR; }
		/* 820D74B8h case    5:*/		return 0x820D74BC;
		  /* 820D74BCh */ case    6:  		/* lwz R11, <#[R29 + 136]> */
		/* 820D74BCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000088) );
		/* 820D74BCh case    6:*/		return 0x820D74C0;
		  /* 820D74C0h */ case    7:  		/* mr R26, R3 */
		/* 820D74C0h case    7:*/		regs.R26 = regs.R3;
		/* 820D74C0h case    7:*/		return 0x820D74C4;
		  /* 820D74C4h */ case    8:  		/* mr R3, R11 */
		/* 820D74C4h case    8:*/		regs.R3 = regs.R11;
		/* 820D74C4h case    8:*/		return 0x820D74C8;
		  /* 820D74C8h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 820D74C8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820D74C8h case    9:*/		return 0x820D74CC;
		  /* 820D74CCh */ case   10:  		/* lwz R11, <#[R10 + 12]> */
		/* 820D74CCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 820D74CCh case   10:*/		return 0x820D74D0;
		  /* 820D74D0h */ case   11:  		/* mtspr CTR, R11 */
		/* 820D74D0h case   11:*/		regs.CTR = regs.R11;
		/* 820D74D0h case   11:*/		return 0x820D74D4;
		  /* 820D74D4h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 820D74D4h case   12:*/		if ( 1 ) { regs.LR = 0x820D74D8; return (uint32)regs.CTR; }
		/* 820D74D4h case   12:*/		return 0x820D74D8;
		  /* 820D74D8h */ case   13:  		/* mr R4, R3 */
		/* 820D74D8h case   13:*/		regs.R4 = regs.R3;
		/* 820D74D8h case   13:*/		return 0x820D74DC;
		  /* 820D74DCh */ case   14:  		/* mr R5, R26 */
		/* 820D74DCh case   14:*/		regs.R5 = regs.R26;
		/* 820D74DCh case   14:*/		return 0x820D74E0;
		  /* 820D74E0h */ case   15:  		/* mr R3, R30 */
		/* 820D74E0h case   15:*/		regs.R3 = regs.R30;
		/* 820D74E0h case   15:*/		return 0x820D74E4;
		  /* 820D74E4h */ case   16:  		/* bl -432340 */
		/* 820D74E4h case   16:*/		regs.LR = 0x820D74E8; return 0x8206DC10;
		/* 820D74E4h case   16:*/		return 0x820D74E8;
	}
	return 0x820D74E8;
} // Block from 820D74A4h-820D74E8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820D74E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D74E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D74E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D74E8);
		  /* 820D74E8h */ case    0:  		/* lwz R3, <#[R29 + 136]> */
		/* 820D74E8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000088) );
		/* 820D74E8h case    0:*/		return 0x820D74EC;
		  /* 820D74ECh */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 820D74ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820D74ECh case    1:*/		return 0x820D74F0;
		  /* 820D74F0h */ case    2:  		/* bc 12, CR6_EQ, 1824 */
		/* 820D74F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D7C10;  }
		/* 820D74F0h case    2:*/		return 0x820D74F4;
		  /* 820D74F4h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 820D74F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D74F4h case    3:*/		return 0x820D74F8;
		  /* 820D74F8h */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 820D74F8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820D74F8h case    4:*/		return 0x820D74FC;
		  /* 820D74FCh */ case    5:  		/* mtspr CTR, R11 */
		/* 820D74FCh case    5:*/		regs.CTR = regs.R11;
		/* 820D74FCh case    5:*/		return 0x820D7500;
		  /* 820D7500h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 820D7500h case    6:*/		if ( 1 ) { regs.LR = 0x820D7504; return (uint32)regs.CTR; }
		/* 820D7500h case    6:*/		return 0x820D7504;
		  /* 820D7504h */ case    7:  		/* stw R28, <#[R29 + 136]> */
		/* 820D7504h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + 0x00000088) );
		/* 820D7504h case    7:*/		return 0x820D7508;
		  /* 820D7508h */ case    8:  		/* b 1800 */
		/* 820D7508h case    8:*/		return 0x820D7C10;
		/* 820D7508h case    8:*/		return 0x820D750C;
		  /* 820D750Ch */ case    9:  		/* lwz R11, <#[R29 + 292]> */
		/* 820D750Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000124) );
		/* 820D750Ch case    9:*/		return 0x820D7510;
		  /* 820D7510h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 820D7510h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D7510h case   10:*/		return 0x820D7514;
		  /* 820D7514h */ case   11:  		/* bc 4, CR6_EQ, 16 */
		/* 820D7514h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820D7524;  }
		/* 820D7514h case   11:*/		return 0x820D7518;
		  /* 820D7518h */ case   12:  		/* lwz R11, <#[R1 + 128]> */
		/* 820D7518h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7518h case   12:*/		return 0x820D751C;
		  /* 820D751Ch */ case   13:  		/* lwz R11, <#[R11 + 24]> */
		/* 820D751Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820D751Ch case   13:*/		return 0x820D7520;
		  /* 820D7520h */ case   14:  		/* stw R11, <#[R29 + 292]> */
		/* 820D7520h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000124) );
		/* 820D7520h case   14:*/		return 0x820D7524;
	}
	return 0x820D7524;
} // Block from 820D74E8h-820D7524h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820D7524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7524);
		  /* 820D7524h */ case    0:  		/* mr R31, R28 */
		/* 820D7524h case    0:*/		regs.R31 = regs.R28;
		/* 820D7524h case    0:*/		return 0x820D7528;
		  /* 820D7528h */ case    1:  		/* b 1768 */
		/* 820D7528h case    1:*/		return 0x820D7C10;
		/* 820D7528h case    1:*/		return 0x820D752C;
		  /* 820D752Ch */ case    2:  		/* lwz R4, <#[R1 + 128]> */
		/* 820D752Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 820D752Ch case    2:*/		return 0x820D7530;
		  /* 820D7530h */ case    3:  		/* mr R3, R29 */
		/* 820D7530h case    3:*/		regs.R3 = regs.R29;
		/* 820D7530h case    3:*/		return 0x820D7534;
		  /* 820D7534h */ case    4:  		/* mr R31, R4 */
		/* 820D7534h case    4:*/		regs.R31 = regs.R4;
		/* 820D7534h case    4:*/		return 0x820D7538;
		  /* 820D7538h */ case    5:  		/* bl -720 */
		/* 820D7538h case    5:*/		regs.LR = 0x820D753C; return 0x820D7268;
		/* 820D7538h case    5:*/		return 0x820D753C;
		  /* 820D753Ch */ case    6:  		/* b 1748 */
		/* 820D753Ch case    6:*/		return 0x820D7C10;
		/* 820D753Ch case    6:*/		return 0x820D7540;
		  /* 820D7540h */ case    7:  		/* lwz R4, <#[R1 + 128]> */
		/* 820D7540h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7540h case    7:*/		return 0x820D7544;
		  /* 820D7544h */ case    8:  		/* stw R27, <#[R4 + 88]> */
		/* 820D7544h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R4 + 0x00000058) );
		/* 820D7544h case    8:*/		return 0x820D7548;
		  /* 820D7548h */ case    9:  		/* b -24 */
		/* 820D7548h case    9:*/		return 0x820D7530;
		/* 820D7548h case    9:*/		return 0x820D754C;
		  /* 820D754Ch */ case   10:  		/* mr R3, R29 */
		/* 820D754Ch case   10:*/		regs.R3 = regs.R29;
		/* 820D754Ch case   10:*/		return 0x820D7550;
		  /* 820D7550h */ case   11:  		/* lwz R5, <#[R1 + 132]> */
		/* 820D7550h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000084) );
		/* 820D7550h case   11:*/		return 0x820D7554;
		  /* 820D7554h */ case   12:  		/* lwz R4, <#[R1 + 128]> */
		/* 820D7554h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7554h case   12:*/		return 0x820D7558;
		  /* 820D7558h */ case   13:  		/* bl -16168 */
		/* 820D7558h case   13:*/		regs.LR = 0x820D755C; return 0x820D3630;
		/* 820D7558h case   13:*/		return 0x820D755C;
		  /* 820D755Ch */ case   14:  		/* b -276 */
		/* 820D755Ch case   14:*/		return 0x820D7448;
		/* 820D755Ch case   14:*/		return 0x820D7560;
		  /* 820D7560h */ case   15:  		/* lwz R31, <#[R1 + 132]> */
		/* 820D7560h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000084) );
		/* 820D7560h case   15:*/		return 0x820D7564;
		  /* 820D7564h */ case   16:  		/* lwz R11, <#[R1 + 128]> */
		/* 820D7564h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7564h case   16:*/		return 0x820D7568;
		  /* 820D7568h */ case   17:  		/* stw R11, <#[R31 + 100]> */
		/* 820D7568h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000064) );
		/* 820D7568h case   17:*/		return 0x820D756C;
		  /* 820D756Ch */ case   18:  		/* b 1700 */
		/* 820D756Ch case   18:*/		return 0x820D7C10;
		/* 820D756Ch case   18:*/		return 0x820D7570;
		  /* 820D7570h */ case   19:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7570h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7570h case   19:*/		return 0x820D7574;
		  /* 820D7574h */ case   20:  		/* cmplwi CR6, R30, 1 */
		/* 820D7574h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 820D7574h case   20:*/		return 0x820D7578;
		  /* 820D7578h */ case   21:  		/* stw R28, <#[R1 + 128]> */
		/* 820D7578h case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7578h case   21:*/		return 0x820D757C;
		  /* 820D757Ch */ case   22:  		/* bc 4, CR6_GT, 20 */
		/* 820D757Ch case   22:*/		if ( !regs.CR[6].gt ) { return 0x820D7590;  }
		/* 820D757Ch case   22:*/		return 0x820D7580;
		  /* 820D7580h */ case   23:  		/* mr R3, R31 */
		/* 820D7580h case   23:*/		regs.R3 = regs.R31;
		/* 820D7580h case   23:*/		return 0x820D7584;
		  /* 820D7584h */ case   24:  		/* lwz R4, <#[R1 + 132]> */
		/* 820D7584h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 820D7584h case   24:*/		return 0x820D7588;
		  /* 820D7588h */ case   25:  		/* bl 445208 */
		/* 820D7588h case   25:*/		regs.LR = 0x820D758C; return 0x821440A0;
		/* 820D7588h case   25:*/		return 0x820D758C;
		  /* 820D758Ch */ case   26:  		/* stw R28, <#[R1 + 132]> */
		/* 820D758Ch case   26:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000084) );
		/* 820D758Ch case   26:*/		return 0x820D7590;
	}
	return 0x820D7590;
} // Block from 820D7524h-820D7590h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820D7590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7590);
		  /* 820D7590h */ case    0:  		/* cmplwi CR6, R30, 2 */
		/* 820D7590h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000002);
		/* 820D7590h case    0:*/		return 0x820D7594;
		  /* 820D7594h */ case    1:  		/* bc 4, CR6_GT, 1660 */
		/* 820D7594h case    1:*/		if ( !regs.CR[6].gt ) { return 0x820D7C10;  }
		/* 820D7594h case    1:*/		return 0x820D7598;
		  /* 820D7598h */ case    2:  		/* addi R9, R30, -2 */
		/* 820D7598h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0xFFFFFFFE);
		/* 820D7598h case    2:*/		return 0x820D759C;
		  /* 820D759Ch */ case    3:  		/* addi R11, R1, 132 */
		/* 820D759Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x84);
		/* 820D759Ch case    3:*/		return 0x820D75A0;
		  /* 820D75A0h */ case    4:  		/* addi R10, R31, 100 */
		/* 820D75A0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x64);
		/* 820D75A0h case    4:*/		return 0x820D75A4;
		  /* 820D75A4h */ case    5:  		/* mtspr CTR, R9 */
		/* 820D75A4h case    5:*/		regs.CTR = regs.R9;
		/* 820D75A4h case    5:*/		return 0x820D75A8;
		  /* 820D75A8h */ case    6:  		/* lwz R9, <#[R11 + 4]> */
		/* 820D75A8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 820D75A8h case    6:*/		return 0x820D75AC;
		  /* 820D75ACh */ case    7:  		/* stwu R28, <#[R11 + 4]> */
		/* 820D75ACh case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820D75ACh case    7:*/		return 0x820D75B0;
		  /* 820D75B0h */ case    8:  		/* stwu R9, <#[R10 + 4]> */
		/* 820D75B0h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820D75B0h case    8:*/		return 0x820D75B4;
		  /* 820D75B4h */ case    9:  		/* bc 16, CR0_LT, -12 */
		/* 820D75B4h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820D75A8;  }
		/* 820D75B4h case    9:*/		return 0x820D75B8;
		  /* 820D75B8h */ case   10:  		/* b 1624 */
		/* 820D75B8h case   10:*/		return 0x820D7C10;
		/* 820D75B8h case   10:*/		return 0x820D75BC;
		  /* 820D75BCh */ case   11:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D75BCh case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D75BCh case   11:*/		return 0x820D75C0;
		  /* 820D75C0h */ case   12:  		/* cmplwi CR6, R30, 1 */
		/* 820D75C0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 820D75C0h case   12:*/		return 0x820D75C4;
		  /* 820D75C4h */ case   13:  		/* stw R28, <#[R1 + 128]> */
		/* 820D75C4h case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000080) );
		/* 820D75C4h case   13:*/		return 0x820D75C8;
		  /* 820D75C8h */ case   14:  		/* bc 4, CR6_GT, 1608 */
		/* 820D75C8h case   14:*/		if ( !regs.CR[6].gt ) { return 0x820D7C10;  }
		/* 820D75C8h case   14:*/		return 0x820D75CC;
		  /* 820D75CCh */ case   15:  		/* addi R9, R30, -1 */
		/* 820D75CCh case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0xFFFFFFFF);
		/* 820D75CCh case   15:*/		return 0x820D75D0;
		  /* 820D75D0h */ case   16:  		/* addi R11, R1, 128 */
		/* 820D75D0h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 820D75D0h case   16:*/		return 0x820D75D4;
		  /* 820D75D4h */ case   17:  		/* addi R10, R31, 100 */
		/* 820D75D4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x64);
		/* 820D75D4h case   17:*/		return 0x820D75D8;
		  /* 820D75D8h */ case   18:  		/* mtspr CTR, R9 */
		/* 820D75D8h case   18:*/		regs.CTR = regs.R9;
		/* 820D75D8h case   18:*/		return 0x820D75DC;
		  /* 820D75DCh */ case   19:  		/* lwz R9, <#[R11 + 4]> */
		/* 820D75DCh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 820D75DCh case   19:*/		return 0x820D75E0;
		  /* 820D75E0h */ case   20:  		/* stwu R28, <#[R11 + 4]> */
		/* 820D75E0h case   20:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820D75E0h case   20:*/		return 0x820D75E4;
		  /* 820D75E4h */ case   21:  		/* stwu R9, <#[R10 + 4]> */
		/* 820D75E4h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820D75E4h case   21:*/		return 0x820D75E8;
		  /* 820D75E8h */ case   22:  		/* bc 16, CR0_LT, -12 */
		/* 820D75E8h case   22:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820D75DC;  }
		/* 820D75E8h case   22:*/		return 0x820D75EC;
		  /* 820D75ECh */ case   23:  		/* b 1572 */
		/* 820D75ECh case   23:*/		return 0x820D7C10;
		/* 820D75ECh case   23:*/		return 0x820D75F0;
		  /* 820D75F0h */ case   24:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D75F0h case   24:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D75F0h case   24:*/		return 0x820D75F4;
		  /* 820D75F4h */ case   25:  		/* lwz R11, <#[R1 + 132]> */
		/* 820D75F4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820D75F4h case   25:*/		return 0x820D75F8;
		  /* 820D75F8h */ case   26:  		/* stw R11, <#[R31 + 120]> */
		/* 820D75F8h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 820D75F8h case   26:*/		return 0x820D75FC;
		  /* 820D75FCh */ case   27:  		/* b 1556 */
		/* 820D75FCh case   27:*/		return 0x820D7C10;
		/* 820D75FCh case   27:*/		return 0x820D7600;
		  /* 820D7600h */ case   28:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7600h case   28:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7600h case   28:*/		return 0x820D7604;
		  /* 820D7604h */ case   29:  		/* lwz R11, <#[R1 + 132]> */
		/* 820D7604h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820D7604h case   29:*/		return 0x820D7608;
	}
	return 0x820D7608;
} // Block from 820D7590h-820D7608h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820D7608h
// Function '?CalculateProgramControl@CUAssembler@D3DXShader@@QAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7608);
		  /* 820D7608h */ case    0:  		/* stw R11, <#[R31 + 92]> */
		/* 820D7608h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 820D7608h case    0:*/		return 0x820D760C;
		  /* 820D760Ch */ case    1:  		/* b 1540 */
		/* 820D760Ch case    1:*/		return 0x820D7C10;
		/* 820D760Ch case    1:*/		return 0x820D7610;
		  /* 820D7610h */ case    2:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7610h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7610h case    2:*/		return 0x820D7614;
		  /* 820D7614h */ case    3:  		/* lwz R11, <#[R1 + 132]> */
		/* 820D7614h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820D7614h case    3:*/		return 0x820D7618;
		  /* 820D7618h */ case    4:  		/* stw R11, <#[R31 + 104]> */
		/* 820D7618h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 820D7618h case    4:*/		return 0x820D761C;
		  /* 820D761Ch */ case    5:  		/* b 1524 */
		/* 820D761Ch case    5:*/		return 0x820D7C10;
		/* 820D761Ch case    5:*/		return 0x820D7620;
		  /* 820D7620h */ case    6:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7620h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7620h case    6:*/		return 0x820D7624;
		  /* 820D7624h */ case    7:  		/* lwz R11, <#[R1 + 132]> */
		/* 820D7624h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820D7624h case    7:*/		return 0x820D7628;
		  /* 820D7628h */ case    8:  		/* stw R11, <#[R31 + 92]> */
		/* 820D7628h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 820D7628h case    8:*/		return 0x820D762C;
		  /* 820D762Ch */ case    9:  		/* lwz R10, <#[R1 + 136]> */
		/* 820D762Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 820D762Ch case    9:*/		return 0x820D7630;
		  /* 820D7630h */ case   10:  		/* stw R10, <#[R31 + 120]> */
		/* 820D7630h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000078) );
		/* 820D7630h case   10:*/		return 0x820D7634;
		  /* 820D7634h */ case   11:  		/* b 1500 */
		/* 820D7634h case   11:*/		return 0x820D7C10;
		/* 820D7634h case   11:*/		return 0x820D7638;
		  /* 820D7638h */ case   12:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7638h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7638h case   12:*/		return 0x820D763C;
		  /* 820D763Ch */ case   13:  		/* lwz R11, <#[R1 + 132]> */
		/* 820D763Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820D763Ch case   13:*/		return 0x820D7640;
		  /* 820D7640h */ case   14:  		/* stw R11, <#[R31 + 104]> */
		/* 820D7640h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 820D7640h case   14:*/		return 0x820D7644;
		  /* 820D7644h */ case   15:  		/* b -24 */
		/* 820D7644h case   15:*/		return 0x820D762C;
		/* 820D7644h case   15:*/		return 0x820D7648;
		  /* 820D7648h */ case   16:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7648h case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7648h case   16:*/		return 0x820D764C;
		  /* 820D764Ch */ case   17:  		/* lwz R11, <#[R1 + 132]> */
		/* 820D764Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820D764Ch case   17:*/		return 0x820D7650;
		  /* 820D7650h */ case   18:  		/* lwz R10, <#[R1 + 136]> */
		/* 820D7650h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 820D7650h case   18:*/		return 0x820D7654;
		  /* 820D7654h */ case   19:  		/* lwz R9, <#[R1 + 140]> */
		/* 820D7654h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000008C) );
		/* 820D7654h case   19:*/		return 0x820D7658;
		  /* 820D7658h */ case   20:  		/* stw R11, <#[R31 + 104]> */
		/* 820D7658h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 820D7658h case   20:*/		return 0x820D765C;
		  /* 820D765Ch */ case   21:  		/* stw R10, <#[R31 + 108]> */
		/* 820D765Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 820D765Ch case   21:*/		return 0x820D7660;
		  /* 820D7660h */ case   22:  		/* stw R9, <#[R31 + 120]> */
		/* 820D7660h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000078) );
		/* 820D7660h case   22:*/		return 0x820D7664;
		  /* 820D7664h */ case   23:  		/* b 1452 */
		/* 820D7664h case   23:*/		return 0x820D7C10;
		/* 820D7664h case   23:*/		return 0x820D7668;
		  /* 820D7668h */ case   24:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7668h case   24:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7668h case   24:*/		return 0x820D766C;
		  /* 820D766Ch */ case   25:  		/* cmplwi CR6, R30, 1 */
		/* 820D766Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 820D766Ch case   25:*/		return 0x820D7670;
		  /* 820D7670h */ case   26:  		/* stw R28, <#[R1 + 128]> */
		/* 820D7670h case   26:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7670h case   26:*/		return 0x820D7674;
		  /* 820D7674h */ case   27:  		/* bc 4, CR6_GT, 20 */
		/* 820D7674h case   27:*/		if ( !regs.CR[6].gt ) { return 0x820D7688;  }
		/* 820D7674h case   27:*/		return 0x820D7678;
		  /* 820D7678h */ case   28:  		/* mr R3, R31 */
		/* 820D7678h case   28:*/		regs.R3 = regs.R31;
		/* 820D7678h case   28:*/		return 0x820D767C;
		  /* 820D767Ch */ case   29:  		/* lwz R4, <#[R1 + 132]> */
		/* 820D767Ch case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 820D767Ch case   29:*/		return 0x820D7680;
		  /* 820D7680h */ case   30:  		/* bl 444960 */
		/* 820D7680h case   30:*/		regs.LR = 0x820D7684; return 0x821440A0;
		/* 820D7680h case   30:*/		return 0x820D7684;
		  /* 820D7684h */ case   31:  		/* stw R28, <#[R1 + 132]> */
		/* 820D7684h case   31:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000084) );
		/* 820D7684h case   31:*/		return 0x820D7688;
	}
	return 0x820D7688;
} // Block from 820D7608h-820D7688h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820D7688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7688);
		  /* 820D7688h */ case    0:  		/* addi R8, R30, -1 */
		/* 820D7688h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0xFFFFFFFF);
		/* 820D7688h case    0:*/		return 0x820D768C;
		  /* 820D768Ch */ case    1:  		/* li R10, 2 */
		/* 820D768Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820D768Ch case    1:*/		return 0x820D7690;
		  /* 820D7690h */ case    2:  		/* cmplwi CR6, R8, 2 */
		/* 820D7690h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000002);
		/* 820D7690h case    2:*/		return 0x820D7694;
		  /* 820D7694h */ case    3:  		/* bc 4, CR6_GT, 36 */
		/* 820D7694h case    3:*/		if ( !regs.CR[6].gt ) { return 0x820D76B8;  }
		/* 820D7694h case    3:*/		return 0x820D7698;
		  /* 820D7698h */ case    4:  		/* addi R11, R1, 132 */
		/* 820D7698h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x84);
		/* 820D7698h case    4:*/		return 0x820D769C;
		  /* 820D769Ch */ case    5:  		/* addi R9, R31, 100 */
		/* 820D769Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x64);
		/* 820D769Ch case    5:*/		return 0x820D76A0;
		  /* 820D76A0h */ case    6:  		/* lwz R7, <#[R11 + 4]> */
		/* 820D76A0h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 820D76A0h case    6:*/		return 0x820D76A4;
		  /* 820D76A4h */ case    7:  		/* addi R10, R10, 1 */
		/* 820D76A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820D76A4h case    7:*/		return 0x820D76A8;
		  /* 820D76A8h */ case    8:  		/* stwu R28, <#[R11 + 4]> */
		/* 820D76A8h case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820D76A8h case    8:*/		return 0x820D76AC;
		  /* 820D76ACh */ case    9:  		/* cmplw CR6, R10, R8 */
		/* 820D76ACh case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820D76ACh case    9:*/		return 0x820D76B0;
		  /* 820D76B0h */ case   10:  		/* stwu R7, <#[R9 + 4]> */
		/* 820D76B0h case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820D76B0h case   10:*/		return 0x820D76B4;
		  /* 820D76B4h */ case   11:  		/* bc 12, CR6_LT, -20 */
		/* 820D76B4h case   11:*/		if ( regs.CR[6].lt ) { return 0x820D76A0;  }
		/* 820D76B4h case   11:*/		return 0x820D76B8;
	}
	return 0x820D76B8;
} // Block from 820D7688h-820D76B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D76B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D76B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D76B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D76B8);
		  /* 820D76B8h */ case    0:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 820D76B8h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 820D76B8h case    0:*/		return 0x820D76BC;
		  /* 820D76BCh */ case    1:  		/* addi R11, R1, 128 */
		/* 820D76BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 820D76BCh case    1:*/		return 0x820D76C0;
		  /* 820D76C0h */ case    2:  		/* add R11, R10, R11 */
		/* 820D76C0h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820D76C0h case    2:*/		return 0x820D76C4;
		  /* 820D76C4h */ case    3:  		/* addi R10, R11, -4 */
		/* 820D76C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFC);
		/* 820D76C4h case    3:*/		return 0x820D76C8;
		  /* 820D76C8h */ case    4:  		/* lwz R10, <#[R11 - 4]> */
		/* 820D76C8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 820D76C8h case    4:*/		return 0x820D76CC;
		  /* 820D76CCh */ case    5:  		/* stw R28, <#[R11 - 4]> */
		/* 820D76CCh case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 820D76CCh case    5:*/		return 0x820D76D0;
		  /* 820D76D0h */ case    6:  		/* b -160 */
		/* 820D76D0h case    6:*/		return 0x820D7630;
		/* 820D76D0h case    6:*/		return 0x820D76D4;
		  /* 820D76D4h */ case    7:  		/* lwz R11, <#[R1 + 128]> */
		/* 820D76D4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820D76D4h case    7:*/		return 0x820D76D8;
		  /* 820D76D8h */ case    8:  		/* mr R31, R28 */
		/* 820D76D8h case    8:*/		regs.R31 = regs.R28;
		/* 820D76D8h case    8:*/		return 0x820D76DC;
		  /* 820D76DCh */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820D76DCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D76DCh case    9:*/		return 0x820D76E0;
		  /* 820D76E0h */ case   10:  		/* bc 12, CR6_EQ, 1328 */
		/* 820D76E0h case   10:*/		if ( regs.CR[6].eq ) { return 0x820D7C10;  }
		/* 820D76E0h case   10:*/		return 0x820D76E4;
		  /* 820D76E4h */ case   11:  		/* lwz R10, <#[R11 + 12]> */
		/* 820D76E4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D76E4h case   11:*/		return 0x820D76E8;
		  /* 820D76E8h */ case   12:  		/* stw R31, <#[R11 + 12]> */
		/* 820D76E8h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D76E8h case   12:*/		return 0x820D76EC;
		  /* 820D76ECh */ case   13:  		/* mr R31, R11 */
		/* 820D76ECh case   13:*/		regs.R31 = regs.R11;
		/* 820D76ECh case   13:*/		return 0x820D76F0;
		  /* 820D76F0h */ case   14:  		/* mr R11, R10 */
		/* 820D76F0h case   14:*/		regs.R11 = regs.R10;
		/* 820D76F0h case   14:*/		return 0x820D76F4;
		  /* 820D76F4h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 820D76F4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820D76F4h case   15:*/		return 0x820D76F8;
		  /* 820D76F8h */ case   16:  		/* bc 4, CR6_EQ, -20 */
		/* 820D76F8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x820D76E4;  }
		/* 820D76F8h case   16:*/		return 0x820D76FC;
		  /* 820D76FCh */ case   17:  		/* b 1300 */
		/* 820D76FCh case   17:*/		return 0x820D7C10;
		/* 820D76FCh case   17:*/		return 0x820D7700;
		  /* 820D7700h */ case   18:  		/* li R3, 20 */
		/* 820D7700h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 820D7700h case   18:*/		return 0x820D7704;
		  /* 820D7704h */ case   19:  		/* bl -58588 */
		/* 820D7704h case   19:*/		regs.LR = 0x820D7708; return 0x820C9228;
		/* 820D7704h case   19:*/		return 0x820D7708;
		  /* 820D7708h */ case   20:  		/* cmplwi CR0, R3, 0 */
		/* 820D7708h case   20:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D7708h case   20:*/		return 0x820D770C;
		  /* 820D770Ch */ case   21:  		/* bc 12, CR0_EQ, -488 */
		/* 820D770Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x820D7524;  }
		/* 820D770Ch case   21:*/		return 0x820D7710;
		  /* 820D7710h */ case   22:  		/* lwz R4, <#[R1 + 128]> */
		/* 820D7710h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7710h case   22:*/		return 0x820D7714;
		  /* 820D7714h */ case   23:  		/* li R5, 0 */
		/* 820D7714h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D7714h case   23:*/		return 0x820D7718;
		  /* 820D7718h */ case   24:  		/* lis R11, -32254 */
		/* 820D7718h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D7718h case   24:*/		return 0x820D771C;
		  /* 820D771Ch */ case   25:  		/* addi R6, R11, -32360 */
		/* 820D771Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFF8198);
		/* 820D771Ch case   25:*/		return 0x820D7720;
		  /* 820D7720h */ case   26:  		/* bl -58160 */
		/* 820D7720h case   26:*/		regs.LR = 0x820D7724; return 0x820C93F0;
		/* 820D7720h case   26:*/		return 0x820D7724;
		  /* 820D7724h */ case   27:  		/* b -732 */
		/* 820D7724h case   27:*/		return 0x820D7448;
		/* 820D7724h case   27:*/		return 0x820D7728;
		  /* 820D7728h */ case   28:  		/* li R3, 20 */
		/* 820D7728h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 820D7728h case   28:*/		return 0x820D772C;
		  /* 820D772Ch */ case   29:  		/* bl -58628 */
		/* 820D772Ch case   29:*/		regs.LR = 0x820D7730; return 0x820C9228;
		/* 820D772Ch case   29:*/		return 0x820D7730;
		  /* 820D7730h */ case   30:  		/* cmplwi CR0, R3, 0 */
		/* 820D7730h case   30:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D7730h case   30:*/		return 0x820D7734;
		  /* 820D7734h */ case   31:  		/* bc 12, CR0_EQ, -528 */
		/* 820D7734h case   31:*/		if ( regs.CR[0].eq ) { return 0x820D7524;  }
		/* 820D7734h case   31:*/		return 0x820D7738;
		  /* 820D7738h */ case   32:  		/* lwz R5, <#[R1 + 128]> */
		/* 820D7738h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7738h case   32:*/		return 0x820D773C;
		  /* 820D773Ch */ case   33:  		/* lwz R4, <#[R1 + 132]> */
		/* 820D773Ch case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 820D773Ch case   33:*/		return 0x820D7740;
		  /* 820D7740h */ case   34:  		/* b -40 */
		/* 820D7740h case   34:*/		return 0x820D7718;
		/* 820D7740h case   34:*/		return 0x820D7744;
		  /* 820D7744h */ case   35:  		/* lwz R10, <#[R29 + 80]> */
		/* 820D7744h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000050) );
		/* 820D7744h case   35:*/		return 0x820D7748;
		  /* 820D7748h */ case   36:  		/* lwz R11, <#[R1 + 128]> */
		/* 820D7748h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7748h case   36:*/		return 0x820D774C;
		  /* 820D774Ch */ case   37:  		/* cmpwi CR6, R10, 0 */
		/* 820D774Ch case   37:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820D774Ch case   37:*/		return 0x820D7750;
	}
	return 0x820D7750;
} // Block from 820D76B8h-820D7750h (38 instructions)

//////////////////////////////////////////////////////
// Block at 820D7750h
// Function '?GetShaderCode@CUAssembler@D3DXShader@@QAAJPAPAUID3DXBuffer@@PAU_D3DXSHADER_COMPILE_PARAMETERSA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7750);
		  /* 820D7750h */ case    0:  		/* mr R30, R11 */
		/* 820D7750h case    0:*/		regs.R30 = regs.R11;
		/* 820D7750h case    0:*/		return 0x820D7754;
		  /* 820D7754h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 820D7754h case    1:*/		if ( regs.CR[6].eq ) { return 0x820D77A8;  }
		/* 820D7754h case    1:*/		return 0x820D7758;
		  /* 820D7758h */ case    2:  		/* lwz R10, <#[R11 + 4]> */
		/* 820D7758h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820D7758h case    2:*/		return 0x820D775C;
		  /* 820D775Ch */ case    3:  		/* cmpwi CR6, R10, 3 */
		/* 820D775Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 820D775Ch case    3:*/		return 0x820D7760;
		  /* 820D7760h */ case    4:  		/* bc 4, CR6_EQ, 72 */
		/* 820D7760h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820D77A8;  }
		/* 820D7760h case    4:*/		return 0x820D7764;
		  /* 820D7764h */ case    5:  		/* addi R31, R11, 16 */
		/* 820D7764h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x10);
		/* 820D7764h case    5:*/		return 0x820D7768;
		  /* 820D7768h */ case    6:  		/* addi R5, R1, 112 */
		/* 820D7768h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 820D7768h case    6:*/		return 0x820D776C;
		  /* 820D776Ch */ case    7:  		/* addi R4, R1, 120 */
		/* 820D776Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x78);
		/* 820D776Ch case    7:*/		return 0x820D7770;
		  /* 820D7770h */ case    8:  		/* mr R3, R31 */
		/* 820D7770h case    8:*/		regs.R3 = regs.R31;
		/* 820D7770h case    8:*/		return 0x820D7774;
		  /* 820D7774h */ case    9:  		/* bl -37044 */
		/* 820D7774h case    9:*/		regs.LR = 0x820D7778; return 0x820CE6C0;
		/* 820D7774h case    9:*/		return 0x820D7778;
		  /* 820D7778h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820D7778h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D7778h case   10:*/		return 0x820D777C;
		  /* 820D777Ch */ case   11:  		/* bc 4, CR0_EQ, 44 */
		/* 820D777Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x820D77A8;  }
		/* 820D777Ch case   11:*/		return 0x820D7780;
		  /* 820D7780h */ case   12:  		/* lwz R11, <#[R29 + 88]> */
		/* 820D7780h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000058) );
		/* 820D7780h case   12:*/		return 0x820D7784;
		  /* 820D7784h */ case   13:  		/* addi R6, R1, 112 */
		/* 820D7784h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 820D7784h case   13:*/		return 0x820D7788;
		  /* 820D7788h */ case   14:  		/* li R5, 0 */
		/* 820D7788h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D7788h case   14:*/		return 0x820D778C;
		  /* 820D778Ch */ case   15:  		/* lwz R3, <#[R29 + 84]> */
		/* 820D778Ch case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000054) );
		/* 820D778Ch case   15:*/		return 0x820D7790;
		  /* 820D7790h */ case   16:  		/* mr R4, R31 */
		/* 820D7790h case   16:*/		regs.R4 = regs.R31;
		/* 820D7790h case   16:*/		return 0x820D7794;
		  /* 820D7794h */ case   17:  		/* mtspr CTR, R11 */
		/* 820D7794h case   17:*/		regs.CTR = regs.R11;
		/* 820D7794h case   17:*/		return 0x820D7798;
		  /* 820D7798h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 820D7798h case   18:*/		if ( 1 ) { regs.LR = 0x820D779C; return (uint32)regs.CTR; }
		/* 820D7798h case   18:*/		return 0x820D779C;
		  /* 820D779Ch */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820D779Ch case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D779Ch case   19:*/		return 0x820D77A0;
		  /* 820D77A0h */ case   20:  		/* bc 4, CR0_EQ, 8 */
		/* 820D77A0h case   20:*/		if ( !regs.CR[0].eq ) { return 0x820D77A8;  }
		/* 820D77A0h case   20:*/		return 0x820D77A4;
		  /* 820D77A4h */ case   21:  		/* lwz R30, <#[R1 + 112]> */
		/* 820D77A4h case   21:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000070) );
		/* 820D77A4h case   21:*/		return 0x820D77A8;
	}
	return 0x820D77A8;
} // Block from 820D7750h-820D77A8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820D77A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D77A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D77A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D77A8);
		  /* 820D77A8h */ case    0:  		/* li R3, 20 */
		/* 820D77A8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 820D77A8h case    0:*/		return 0x820D77AC;
		  /* 820D77ACh */ case    1:  		/* bl -58756 */
		/* 820D77ACh case    1:*/		regs.LR = 0x820D77B0; return 0x820C9228;
		/* 820D77ACh case    1:*/		return 0x820D77B0;
		  /* 820D77B0h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820D77B0h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D77B0h case    2:*/		return 0x820D77B4;
		  /* 820D77B4h */ case    3:  		/* bc 12, CR0_EQ, -656 */
		/* 820D77B4h case    3:*/		if ( regs.CR[0].eq ) { return 0x820D7524;  }
		/* 820D77B4h case    3:*/		return 0x820D77B8;
		  /* 820D77B8h */ case    4:  		/* lis R11, -32254 */
		/* 820D77B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D77B8h case    4:*/		return 0x820D77BC;
		  /* 820D77BCh */ case    5:  		/* li R5, 0 */
		/* 820D77BCh case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D77BCh case    5:*/		return 0x820D77C0;
		  /* 820D77C0h */ case    6:  		/* addi R6, R11, -32368 */
		/* 820D77C0h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFF8190);
		/* 820D77C0h case    6:*/		return 0x820D77C4;
		  /* 820D77C4h */ case    7:  		/* mr R4, R30 */
		/* 820D77C4h case    7:*/		regs.R4 = regs.R30;
		/* 820D77C4h case    7:*/		return 0x820D77C8;
		  /* 820D77C8h */ case    8:  		/* b -168 */
		/* 820D77C8h case    8:*/		return 0x820D7720;
		/* 820D77C8h case    8:*/		return 0x820D77CC;
		  /* 820D77CCh */ case    9:  		/* li R3, 20 */
		/* 820D77CCh case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 820D77CCh case    9:*/		return 0x820D77D0;
		  /* 820D77D0h */ case   10:  		/* bl -58792 */
		/* 820D77D0h case   10:*/		regs.LR = 0x820D77D4; return 0x820C9228;
		/* 820D77D0h case   10:*/		return 0x820D77D4;
		  /* 820D77D4h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 820D77D4h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D77D4h case   11:*/		return 0x820D77D8;
		  /* 820D77D8h */ case   12:  		/* bc 12, CR0_EQ, -692 */
		/* 820D77D8h case   12:*/		if ( regs.CR[0].eq ) { return 0x820D7524;  }
		/* 820D77D8h case   12:*/		return 0x820D77DC;
		  /* 820D77DCh */ case   13:  		/* lis R11, -32254 */
		/* 820D77DCh case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D77DCh case   13:*/		return 0x820D77E0;
		  /* 820D77E0h */ case   14:  		/* lwz R5, <#[R1 + 132]> */
		/* 820D77E0h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000084) );
		/* 820D77E0h case   14:*/		return 0x820D77E4;
		  /* 820D77E4h */ case   15:  		/* lwz R4, <#[R1 + 128]> */
		/* 820D77E4h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 820D77E4h case   15:*/		return 0x820D77E8;
		  /* 820D77E8h */ case   16:  		/* addi R6, R11, -32368 */
		/* 820D77E8h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFF8190);
		/* 820D77E8h case   16:*/		return 0x820D77EC;
		  /* 820D77ECh */ case   17:  		/* b -204 */
		/* 820D77ECh case   17:*/		return 0x820D7720;
		/* 820D77ECh case   17:*/		return 0x820D77F0;
		  /* 820D77F0h */ case   18:  		/* lwz R11, <#[R29 + 80]> */
		/* 820D77F0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000050) );
		/* 820D77F0h case   18:*/		return 0x820D77F4;
		  /* 820D77F4h */ case   19:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D77F4h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D77F4h case   19:*/		return 0x820D77F8;
		  /* 820D77F8h */ case   20:  		/* cmpwi CR6, R11, 0 */
		/* 820D77F8h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D77F8h case   20:*/		return 0x820D77FC;
		  /* 820D77FCh */ case   21:  		/* bc 12, CR6_EQ, 1044 */
		/* 820D77FCh case   21:*/		if ( regs.CR[6].eq ) { return 0x820D7C10;  }
		/* 820D77FCh case   21:*/		return 0x820D7800;
		  /* 820D7800h */ case   22:  		/* lwz R11, <#[R31 + 4]> */
		/* 820D7800h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 820D7800h case   22:*/		return 0x820D7804;
		  /* 820D7804h */ case   23:  		/* cmpwi CR6, R11, 3 */
		/* 820D7804h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 820D7804h case   23:*/		return 0x820D7808;
		  /* 820D7808h */ case   24:  		/* bc 4, CR6_EQ, 1032 */
		/* 820D7808h case   24:*/		if ( !regs.CR[6].eq ) { return 0x820D7C10;  }
		/* 820D7808h case   24:*/		return 0x820D780C;
		  /* 820D780Ch */ case   25:  		/* lwz R11, <#[R29 + 88]> */
		/* 820D780Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000058) );
		/* 820D780Ch case   25:*/		return 0x820D7810;
		  /* 820D7810h */ case   26:  		/* addi R6, R1, 112 */
		/* 820D7810h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 820D7810h case   26:*/		return 0x820D7814;
		  /* 820D7814h */ case   27:  		/* li R5, 0 */
		/* 820D7814h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D7814h case   27:*/		return 0x820D7818;
		  /* 820D7818h */ case   28:  		/* lwz R3, <#[R29 + 84]> */
		/* 820D7818h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000054) );
		/* 820D7818h case   28:*/		return 0x820D781C;
		  /* 820D781Ch */ case   29:  		/* addi R4, R31, 16 */
		/* 820D781Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x10);
		/* 820D781Ch case   29:*/		return 0x820D7820;
		  /* 820D7820h */ case   30:  		/* mtspr CTR, R11 */
		/* 820D7820h case   30:*/		regs.CTR = regs.R11;
		/* 820D7820h case   30:*/		return 0x820D7824;
		  /* 820D7824h */ case   31:  		/* bcctrl 20, CR0_LT */
		/* 820D7824h case   31:*/		if ( 1 ) { regs.LR = 0x820D7828; return (uint32)regs.CTR; }
		/* 820D7824h case   31:*/		return 0x820D7828;
		  /* 820D7828h */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 820D7828h case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D7828h case   32:*/		return 0x820D782C;
		  /* 820D782Ch */ case   33:  		/* bc 4, CR0_EQ, 996 */
		/* 820D782Ch case   33:*/		if ( !regs.CR[0].eq ) { return 0x820D7C10;  }
		/* 820D782Ch case   33:*/		return 0x820D7830;
		  /* 820D7830h */ case   34:  		/* lwz R31, <#[R1 + 112]> */
		/* 820D7830h case   34:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 820D7830h case   34:*/		return 0x820D7834;
		  /* 820D7834h */ case   35:  		/* b 988 */
		/* 820D7834h case   35:*/		return 0x820D7C10;
		/* 820D7834h case   35:*/		return 0x820D7838;
		  /* 820D7838h */ case   36:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7838h case   36:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7838h case   36:*/		return 0x820D783C;
		  /* 820D783Ch */ case   37:  		/* lwz R11, <#[R31 + 28]> */
		/* 820D783Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 820D783Ch case   37:*/		return 0x820D7840;
		  /* 820D7840h */ case   38:  		/* cmpwi CR6, R11, 0 */
		/* 820D7840h case   38:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7840h case   38:*/		return 0x820D7844;
		  /* 820D7844h */ case   39:  		/* bc 12, CR6_EQ, 44 */
		/* 820D7844h case   39:*/		if ( regs.CR[6].eq ) { return 0x820D7870;  }
		/* 820D7844h case   39:*/		return 0x820D7848;
		  /* 820D7848h */ case   40:  		/* lis R11, -32255 */
		/* 820D7848h case   40:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D7848h case   40:*/		return 0x820D784C;
		  /* 820D784Ch */ case   41:  		/* lwz R3, <#[R29]> */
		/* 820D784Ch case   41:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 820D784Ch case   41:*/		return 0x820D7850;
		  /* 820D7850h */ case   42:  		/* li R5, 2022 */
		/* 820D7850h case   42:*/		cpu::op::li<0>(regs,&regs.R5,0x7E6);
		/* 820D7850h case   42:*/		return 0x820D7854;
		  /* 820D7854h */ case   43:  		/* addi R6, R11, 4680 */
		/* 820D7854h case   43:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1248);
		/* 820D7854h case   43:*/		return 0x820D7858;
		  /* 820D7858h */ case   44:  		/* addi R4, R29, 16 */
		/* 820D7858h case   44:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x10);
		/* 820D7858h case   44:*/		return 0x820D785C;
		  /* 820D785Ch */ case   45:  		/* bl -198348 */
		/* 820D785Ch case   45:*/		regs.LR = 0x820D7860; return 0x820A7190;
		/* 820D785Ch case   45:*/		return 0x820D7860;
		  /* 820D7860h */ case   46:  		/* li R11, 2257 */
		/* 820D7860h case   46:*/		cpu::op::li<0>(regs,&regs.R11,0x8D1);
		/* 820D7860h case   46:*/		return 0x820D7864;
		  /* 820D7864h */ case   47:  		/* stw R27, <#[R29 + 60]> */
		/* 820D7864h case   47:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x0000003C) );
		/* 820D7864h case   47:*/		return 0x820D7868;
		  /* 820D7868h */ case   48:  		/* stw R11, <#[R31 + 32]> */
		/* 820D7868h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 820D7868h case   48:*/		return 0x820D786C;
		  /* 820D786Ch */ case   49:  		/* b 932 */
		/* 820D786Ch case   49:*/		return 0x820D7C10;
		/* 820D786Ch case   49:*/		return 0x820D7870;
	}
	return 0x820D7870;
} // Block from 820D77A8h-820D7870h (50 instructions)

//////////////////////////////////////////////////////
// Block at 820D7870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7870);
		  /* 820D7870h */ case    0:  		/* lwz R11, <#[R1 + 132]> */
		/* 820D7870h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820D7870h case    0:*/		return 0x820D7874;
		  /* 820D7874h */ case    1:  		/* mr R3, R29 */
		/* 820D7874h case    1:*/		regs.R3 = regs.R29;
		/* 820D7874h case    1:*/		return 0x820D7878;
		  /* 820D7878h */ case    2:  		/* addi R4, R11, 16 */
		/* 820D7878h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10);
		/* 820D7878h case    2:*/		return 0x820D787C;
		  /* 820D787Ch */ case    3:  		/* bl -35508 */
		/* 820D787Ch case    3:*/		regs.LR = 0x820D7880; return 0x820CEDC8;
		/* 820D787Ch case    3:*/		return 0x820D7880;
		  /* 820D7880h */ case    4:  		/* stw R3, <#[R31 + 32]> */
		/* 820D7880h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 820D7880h case    4:*/		return 0x820D7884;
		  /* 820D7884h */ case    5:  		/* b 908 */
		/* 820D7884h case    5:*/		return 0x820D7C10;
		/* 820D7884h case    5:*/		return 0x820D7888;
		  /* 820D7888h */ case    6:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7888h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7888h case    6:*/		return 0x820D788C;
		  /* 820D788Ch */ case    7:  		/* lwz R11, <#[R31 + 20]> */
		/* 820D788Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820D788Ch case    7:*/		return 0x820D7890;
		  /* 820D7890h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820D7890h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D7890h case    8:*/		return 0x820D7894;
		  /* 820D7894h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 820D7894h case    9:*/		if ( regs.CR[6].eq ) { return 0x820D78A8;  }
		/* 820D7894h case    9:*/		return 0x820D7898;
		  /* 820D7898h */ case   10:  		/* lis R11, -32255 */
		/* 820D7898h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D7898h case   10:*/		return 0x820D789C;
		  /* 820D789Ch */ case   11:  		/* li R5, 2018 */
		/* 820D789Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x7E2);
		/* 820D789Ch case   11:*/		return 0x820D78A0;
		  /* 820D78A0h */ case   12:  		/* addi R6, R11, 4640 */
		/* 820D78A0h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1220);
		/* 820D78A0h case   12:*/		return 0x820D78A4;
		  /* 820D78A4h */ case   13:  		/* b 320 */
		/* 820D78A4h case   13:*/		return 0x820D79E4;
		/* 820D78A4h case   13:*/		return 0x820D78A8;
	}
	return 0x820D78A8;
} // Block from 820D7870h-820D78A8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D78A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D78A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D78A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D78A8);
		  /* 820D78A8h */ case    0:  		/* lis R11, 3328 */
		/* 820D78A8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xD00);
		/* 820D78A8h case    0:*/		return 0x820D78AC;
		  /* 820D78ACh */ case    1:  		/* stw R11, <#[R31 + 20]> */
		/* 820D78ACh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820D78ACh case    1:*/		return 0x820D78B0;
		  /* 820D78B0h */ case    2:  		/* b 864 */
		/* 820D78B0h case    2:*/		return 0x820D7C10;
		/* 820D78B0h case    2:*/		return 0x820D78B4;
		  /* 820D78B4h */ case    3:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D78B4h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D78B4h case    3:*/		return 0x820D78B8;
		  /* 820D78B8h */ case    4:  		/* lwz R11, <#[R31 + 20]> */
		/* 820D78B8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820D78B8h case    4:*/		return 0x820D78BC;
		  /* 820D78BCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820D78BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D78BCh case    5:*/		return 0x820D78C0;
		  /* 820D78C0h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 820D78C0h case    6:*/		if ( regs.CR[6].eq ) { return 0x820D78D8;  }
		/* 820D78C0h case    6:*/		return 0x820D78C4;
		  /* 820D78C4h */ case    7:  		/* lis R10, 2816 */
		/* 820D78C4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xB00);
		/* 820D78C4h case    7:*/		return 0x820D78C8;
		  /* 820D78C8h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 820D78C8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D78C8h case    8:*/		return 0x820D78CC;
		  /* 820D78CCh */ case    9:  		/* bc 4, CR6_EQ, 836 */
		/* 820D78CCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x820D7C10;  }
		/* 820D78CCh case    9:*/		return 0x820D78D0;
		  /* 820D78D0h */ case   10:  		/* lis R11, 3072 */
		/* 820D78D0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xC00);
		/* 820D78D0h case   10:*/		return 0x820D78D4;
		  /* 820D78D4h */ case   11:  		/* b -40 */
		/* 820D78D4h case   11:*/		return 0x820D78AC;
		/* 820D78D4h case   11:*/		return 0x820D78D8;
	}
	return 0x820D78D8;
} // Block from 820D78A8h-820D78D8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D78D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D78D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D78D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D78D8);
		  /* 820D78D8h */ case    0:  		/* lis R11, 256 */
		/* 820D78D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x100);
		/* 820D78D8h case    0:*/		return 0x820D78DC;
		  /* 820D78DCh */ case    1:  		/* b -48 */
		/* 820D78DCh case    1:*/		return 0x820D78AC;
		/* 820D78DCh case    1:*/		return 0x820D78E0;
		  /* 820D78E0h */ case    2:  		/* lwz R11, <#[R1 + 128]> */
		/* 820D78E0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820D78E0h case    2:*/		return 0x820D78E4;
		  /* 820D78E4h */ case    3:  		/* lwz R31, <#[R1 + 132]> */
		/* 820D78E4h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000084) );
		/* 820D78E4h case    3:*/		return 0x820D78E8;
		  /* 820D78E8h */ case    4:  		/* lwz R11, <#[R11 + 24]> */
		/* 820D78E8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820D78E8h case    4:*/		return 0x820D78EC;
		  /* 820D78ECh */ case    5:  		/* cmplwi CR6, R11, 1 */
		/* 820D78ECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820D78ECh case    5:*/		return 0x820D78F0;
		  /* 820D78F0h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 820D78F0h case    6:*/		if ( regs.CR[6].eq ) { return 0x820D7904;  }
		/* 820D78F0h case    6:*/		return 0x820D78F4;
		  /* 820D78F4h */ case    7:  		/* lis R11, -32255 */
		/* 820D78F4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D78F4h case    7:*/		return 0x820D78F8;
		  /* 820D78F8h */ case    8:  		/* li R5, 2010 */
		/* 820D78F8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x7DA);
		/* 820D78F8h case    8:*/		return 0x820D78FC;
		  /* 820D78FCh */ case    9:  		/* addi R6, R11, 4560 */
		/* 820D78FCh case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x11D0);
		/* 820D78FCh case    9:*/		return 0x820D7900;
		  /* 820D7900h */ case   10:  		/* b 228 */
		/* 820D7900h case   10:*/		return 0x820D79E4;
		/* 820D7900h case   10:*/		return 0x820D7904;
	}
	return 0x820D7904;
} // Block from 820D78D8h-820D7904h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D7904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7904);
		  /* 820D7904h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 820D7904h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820D7904h case    0:*/		return 0x820D7908;
		  /* 820D7908h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820D7908h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D7908h case    1:*/		return 0x820D790C;
		  /* 820D790Ch */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 820D790Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820D7920;  }
		/* 820D790Ch case    2:*/		return 0x820D7910;
		  /* 820D7910h */ case    3:  		/* lis R11, -32255 */
		/* 820D7910h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D7910h case    3:*/		return 0x820D7914;
		  /* 820D7914h */ case    4:  		/* li R5, 2012 */
		/* 820D7914h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x7DC);
		/* 820D7914h case    4:*/		return 0x820D7918;
		  /* 820D7918h */ case    5:  		/* addi R6, R11, 4512 */
		/* 820D7918h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x11A0);
		/* 820D7918h case    5:*/		return 0x820D791C;
		  /* 820D791Ch */ case    6:  		/* b 200 */
		/* 820D791Ch case    6:*/		return 0x820D79E4;
		/* 820D791Ch case    6:*/		return 0x820D7920;
	}
	return 0x820D7920;
} // Block from 820D7904h-820D7920h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D7920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7920);
		  /* 820D7920h */ case    0:  		/* lis R11, 1536 */
		/* 820D7920h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x600);
		/* 820D7920h case    0:*/		return 0x820D7924;
		  /* 820D7924h */ case    1:  		/* b -120 */
		/* 820D7924h case    1:*/		return 0x820D78AC;
		/* 820D7924h case    1:*/		return 0x820D7928;
		  /* 820D7928h */ case    2:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7928h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7928h case    2:*/		return 0x820D792C;
		  /* 820D792Ch */ case    3:  		/* lwz R11, <#[R31 + 28]> */
		/* 820D792Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 820D792Ch case    3:*/		return 0x820D7930;
		  /* 820D7930h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 820D7930h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7930h case    4:*/		return 0x820D7934;
		  /* 820D7934h */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 820D7934h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D7960;  }
		/* 820D7934h case    5:*/		return 0x820D7938;
		  /* 820D7938h */ case    6:  		/* lis R11, -32255 */
		/* 820D7938h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D7938h case    6:*/		return 0x820D793C;
		  /* 820D793Ch */ case    7:  		/* lwz R3, <#[R29]> */
		/* 820D793Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 820D793Ch case    7:*/		return 0x820D7940;
		  /* 820D7940h */ case    8:  		/* li R5, 2022 */
		/* 820D7940h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x7E6);
		/* 820D7940h case    8:*/		return 0x820D7944;
		  /* 820D7944h */ case    9:  		/* addi R6, R11, 4424 */
		/* 820D7944h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1148);
		/* 820D7944h case    9:*/		return 0x820D7948;
		  /* 820D7948h */ case   10:  		/* addi R4, R29, 16 */
		/* 820D7948h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x10);
		/* 820D7948h case   10:*/		return 0x820D794C;
		  /* 820D794Ch */ case   11:  		/* bl -198588 */
		/* 820D794Ch case   11:*/		regs.LR = 0x820D7950; return 0x820A7190;
		/* 820D794Ch case   11:*/		return 0x820D7950;
		  /* 820D7950h */ case   12:  		/* li R11, 228 */
		/* 820D7950h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0xE4);
		/* 820D7950h case   12:*/		return 0x820D7954;
		  /* 820D7954h */ case   13:  		/* stw R27, <#[R29 + 60]> */
		/* 820D7954h case   13:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x0000003C) );
		/* 820D7954h case   13:*/		return 0x820D7958;
		  /* 820D7958h */ case   14:  		/* stw R11, <#[R31 + 36]> */
		/* 820D7958h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 820D7958h case   14:*/		return 0x820D795C;
		  /* 820D795Ch */ case   15:  		/* b 692 */
		/* 820D795Ch case   15:*/		return 0x820D7C10;
		/* 820D795Ch case   15:*/		return 0x820D7960;
	}
	return 0x820D7960;
} // Block from 820D7920h-820D7960h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820D7960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7960);
		  /* 820D7960h */ case    0:  		/* lwz R11, <#[R1 + 132]> */
		/* 820D7960h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820D7960h case    0:*/		return 0x820D7964;
		  /* 820D7964h */ case    1:  		/* mr R3, R29 */
		/* 820D7964h case    1:*/		regs.R3 = regs.R29;
		/* 820D7964h case    1:*/		return 0x820D7968;
		  /* 820D7968h */ case    2:  		/* addi R4, R11, 16 */
		/* 820D7968h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10);
		/* 820D7968h case    2:*/		return 0x820D796C;
		  /* 820D796Ch */ case    3:  		/* bl -35244 */
		/* 820D796Ch case    3:*/		regs.LR = 0x820D7970; return 0x820CEFC0;
		/* 820D796Ch case    3:*/		return 0x820D7970;
		  /* 820D7970h */ case    4:  		/* stw R3, <#[R31 + 36]> */
		/* 820D7970h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 820D7970h case    4:*/		return 0x820D7974;
		  /* 820D7974h */ case    5:  		/* b 668 */
		/* 820D7974h case    5:*/		return 0x820D7C10;
		/* 820D7974h case    5:*/		return 0x820D7978;
		  /* 820D7978h */ case    6:  		/* li R5, 0 */
		/* 820D7978h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D7978h case    6:*/		return 0x820D797C;
		  /* 820D797Ch */ case    7:  		/* lwz R11, <#[R1 + 128]> */
		/* 820D797Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820D797Ch case    7:*/		return 0x820D7980;
		  /* 820D7980h */ case    8:  		/* mr R3, R29 */
		/* 820D7980h case    8:*/		regs.R3 = regs.R29;
		/* 820D7980h case    8:*/		return 0x820D7984;
		  /* 820D7984h */ case    9:  		/* addi R4, R11, 16 */
		/* 820D7984h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10);
		/* 820D7984h case    9:*/		return 0x820D7988;
		  /* 820D7988h */ case   10:  		/* bl -18776 */
		/* 820D7988h case   10:*/		regs.LR = 0x820D798C; return 0x820D3030;
		/* 820D7988h case   10:*/		return 0x820D798C;
		  /* 820D798Ch */ case   11:  		/* b 620 */
		/* 820D798Ch case   11:*/		return 0x820D7BF8;
		/* 820D798Ch case   11:*/		return 0x820D7990;
		  /* 820D7990h */ case   12:  		/* lwz R5, <#[R1 + 132]> */
		/* 820D7990h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000084) );
		/* 820D7990h case   12:*/		return 0x820D7994;
		  /* 820D7994h */ case   13:  		/* b -24 */
		/* 820D7994h case   13:*/		return 0x820D797C;
		/* 820D7994h case   13:*/		return 0x820D7998;
		  /* 820D7998h */ case   14:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7998h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7998h case   14:*/		return 0x820D799C;
		  /* 820D799Ch */ case   15:  		/* lwz R11, <#[R1 + 132]> */
		/* 820D799Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820D799Ch case   15:*/		return 0x820D79A0;
		  /* 820D79A0h */ case   16:  		/* lwz R10, <#[R31 + 24]> */
		/* 820D79A0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820D79A0h case   16:*/		return 0x820D79A4;
		  /* 820D79A4h */ case   17:  		/* lwz R9, <#[R11 + 24]> */
		/* 820D79A4h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000018) );
		/* 820D79A4h case   17:*/		return 0x820D79A8;
		  /* 820D79A8h */ case   18:  		/* lwz R8, <#[R31 + 40]> */
		/* 820D79A8h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000028) );
		/* 820D79A8h case   18:*/		return 0x820D79AC;
		  /* 820D79ACh */ case   19:  		/* add R10, R9, R10 */
		/* 820D79ACh case   19:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 820D79ACh case   19:*/		return 0x820D79B0;
		  /* 820D79B0h */ case   20:  		/* cmplwi CR6, R8, 0 */
		/* 820D79B0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 820D79B0h case   20:*/		return 0x820D79B4;
		  /* 820D79B4h */ case   21:  		/* stw R10, <#[R31 + 24]> */
		/* 820D79B4h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820D79B4h case   21:*/		return 0x820D79B8;
		  /* 820D79B8h */ case   22:  		/* bc 4, CR6_EQ, 20 */
		/* 820D79B8h case   22:*/		if ( !regs.CR[6].eq ) { return 0x820D79CC;  }
		/* 820D79B8h case   22:*/		return 0x820D79BC;
		  /* 820D79BCh */ case   23:  		/* lwz R10, <#[R11 + 40]> */
		/* 820D79BCh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 820D79BCh case   23:*/		return 0x820D79C0;
		  /* 820D79C0h */ case   24:  		/* stw R10, <#[R31 + 40]> */
		/* 820D79C0h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 820D79C0h case   24:*/		return 0x820D79C4;
		  /* 820D79C4h */ case   25:  		/* stw R28, <#[R11 + 40]> */
		/* 820D79C4h case   25:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000028) );
		/* 820D79C4h case   25:*/		return 0x820D79C8;
		  /* 820D79C8h */ case   26:  		/* b 584 */
		/* 820D79C8h case   26:*/		return 0x820D7C10;
		/* 820D79C8h case   26:*/		return 0x820D79CC;
	}
	return 0x820D79CC;
} // Block from 820D7960h-820D79CCh (27 instructions)

//////////////////////////////////////////////////////
// Block at 820D79CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D79CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D79CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D79CC);
		  /* 820D79CCh */ case    0:  		/* lwz R11, <#[R11 + 40]> */
		/* 820D79CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 820D79CCh case    0:*/		return 0x820D79D0;
		  /* 820D79D0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820D79D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D79D0h case    1:*/		return 0x820D79D4;
		  /* 820D79D4h */ case    2:  		/* bc 12, CR6_EQ, 572 */
		/* 820D79D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D7C10;  }
		/* 820D79D4h case    2:*/		return 0x820D79D8;
		  /* 820D79D8h */ case    3:  		/* lis R11, -32255 */
		/* 820D79D8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D79D8h case    3:*/		return 0x820D79DC;
		  /* 820D79DCh */ case    4:  		/* li R5, 2009 */
		/* 820D79DCh case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x7D9);
		/* 820D79DCh case    4:*/		return 0x820D79E0;
		  /* 820D79E0h */ case    5:  		/* addi R6, R11, 4344 */
		/* 820D79E0h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x10F8);
		/* 820D79E0h case    5:*/		return 0x820D79E4;
	}
	return 0x820D79E4;
} // Block from 820D79CCh-820D79E4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D79E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D79E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D79E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D79E4);
		  /* 820D79E4h */ case    0:  		/* addi R4, R29, 16 */
		/* 820D79E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x10);
		/* 820D79E4h case    0:*/		return 0x820D79E8;
		  /* 820D79E8h */ case    1:  		/* lwz R3, <#[R29]> */
		/* 820D79E8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 820D79E8h case    1:*/		return 0x820D79EC;
		  /* 820D79ECh */ case    2:  		/* bl -198748 */
		/* 820D79ECh case    2:*/		regs.LR = 0x820D79F0; return 0x820A7190;
		/* 820D79ECh case    2:*/		return 0x820D79F0;
		  /* 820D79F0h */ case    3:  		/* stw R27, <#[R29 + 60]> */
		/* 820D79F0h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x0000003C) );
		/* 820D79F0h case    3:*/		return 0x820D79F4;
		  /* 820D79F4h */ case    4:  		/* b 540 */
		/* 820D79F4h case    4:*/		return 0x820D7C10;
		/* 820D79F4h case    4:*/		return 0x820D79F8;
		  /* 820D79F8h */ case    5:  		/* li R3, 88 */
		/* 820D79F8h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 820D79F8h case    5:*/		return 0x820D79FC;
		  /* 820D79FCh */ case    6:  		/* bl -59348 */
		/* 820D79FCh case    6:*/		regs.LR = 0x820D7A00; return 0x820C9228;
		/* 820D79FCh case    6:*/		return 0x820D7A00;
		  /* 820D7A00h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 820D7A00h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D7A00h case    7:*/		return 0x820D7A04;
		  /* 820D7A04h */ case    8:  		/* bc 12, CR0_EQ, 508 */
		/* 820D7A04h case    8:*/		if ( regs.CR[0].eq ) { return 0x820D7C00;  }
		/* 820D7A04h case    8:*/		return 0x820D7A08;
		  /* 820D7A08h */ case    9:  		/* lwz R9, <#[R1 + 128]> */
		/* 820D7A08h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7A08h case    9:*/		return 0x820D7A0C;
		  /* 820D7A0Ch */ case   10:  		/* li R7, 0 */
		/* 820D7A0Ch case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820D7A0Ch case   10:*/		return 0x820D7A10;
		  /* 820D7A10h */ case   11:  		/* addi R4, R29, 16 */
		/* 820D7A10h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x10);
		/* 820D7A10h case   11:*/		return 0x820D7A14;
		  /* 820D7A14h */ case   12:  		/* li R5, 0 */
		/* 820D7A14h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D7A14h case   12:*/		return 0x820D7A18;
		  /* 820D7A18h */ case   13:  		/* li R6, 0 */
		/* 820D7A18h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820D7A18h case   13:*/		return 0x820D7A1C;
		  /* 820D7A1Ch */ case   14:  		/* li R8, 0 */
		/* 820D7A1Ch case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820D7A1Ch case   14:*/		return 0x820D7A20;
		  /* 820D7A20h */ case   15:  		/* bl 444568 */
		/* 820D7A20h case   15:*/		regs.LR = 0x820D7A24; return 0x821442B8;
		/* 820D7A20h case   15:*/		return 0x820D7A24;
		  /* 820D7A24h */ case   16:  		/* b 468 */
		/* 820D7A24h case   16:*/		return 0x820D7BF8;
		/* 820D7A24h case   16:*/		return 0x820D7A28;
		  /* 820D7A28h */ case   17:  		/* li R3, 88 */
		/* 820D7A28h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 820D7A28h case   17:*/		return 0x820D7A2C;
		  /* 820D7A2Ch */ case   18:  		/* bl -59396 */
		/* 820D7A2Ch case   18:*/		regs.LR = 0x820D7A30; return 0x820C9228;
		/* 820D7A2Ch case   18:*/		return 0x820D7A30;
		  /* 820D7A30h */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 820D7A30h case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D7A30h case   19:*/		return 0x820D7A34;
		  /* 820D7A34h */ case   20:  		/* bc 12, CR0_EQ, 460 */
		/* 820D7A34h case   20:*/		if ( regs.CR[0].eq ) { return 0x820D7C00;  }
		/* 820D7A34h case   20:*/		return 0x820D7A38;
		  /* 820D7A38h */ case   21:  		/* lwz R11, <#[R1 + 128]> */
		/* 820D7A38h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7A38h case   21:*/		return 0x820D7A3C;
		  /* 820D7A3Ch */ case   22:  		/* li R9, 0 */
		/* 820D7A3Ch case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820D7A3Ch case   22:*/		return 0x820D7A40;
		  /* 820D7A40h */ case   23:  		/* lwz R7, <#[R11 + 24]> */
		/* 820D7A40h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000018) );
		/* 820D7A40h case   23:*/		return 0x820D7A44;
		  /* 820D7A44h */ case   24:  		/* b -52 */
		/* 820D7A44h case   24:*/		return 0x820D7A10;
		/* 820D7A44h case   24:*/		return 0x820D7A48;
		  /* 820D7A48h */ case   25:  		/* li R3, 56 */
		/* 820D7A48h case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x38);
		/* 820D7A48h case   25:*/		return 0x820D7A4C;
		  /* 820D7A4Ch */ case   26:  		/* bl -59428 */
		/* 820D7A4Ch case   26:*/		regs.LR = 0x820D7A50; return 0x820C9228;
		/* 820D7A4Ch case   26:*/		return 0x820D7A50;
		  /* 820D7A50h */ case   27:  		/* cmplwi CR0, R3, 0 */
		/* 820D7A50h case   27:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D7A50h case   27:*/		return 0x820D7A54;
		  /* 820D7A54h */ case   28:  		/* bc 12, CR0_EQ, 20 */
		/* 820D7A54h case   28:*/		if ( regs.CR[0].eq ) { return 0x820D7A68;  }
		/* 820D7A54h case   28:*/		return 0x820D7A58;
		  /* 820D7A58h */ case   29:  		/* addi R4, R29, 16 */
		/* 820D7A58h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x10);
		/* 820D7A58h case   29:*/		return 0x820D7A5C;
		  /* 820D7A5Ch */ case   30:  		/* bl -57868 */
		/* 820D7A5Ch case   30:*/		regs.LR = 0x820D7A60; return 0x820C9850;
		/* 820D7A5Ch case   30:*/		return 0x820D7A60;
		  /* 820D7A60h */ case   31:  		/* mr R31, R3 */
		/* 820D7A60h case   31:*/		regs.R31 = regs.R3;
		/* 820D7A60h case   31:*/		return 0x820D7A64;
		  /* 820D7A64h */ case   32:  		/* b 8 */
		/* 820D7A64h case   32:*/		return 0x820D7A6C;
		/* 820D7A64h case   32:*/		return 0x820D7A68;
	}
	return 0x820D7A68;
} // Block from 820D79E4h-820D7A68h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820D7A68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7A68);
		  /* 820D7A68h */ case    0:  		/* mr R31, R28 */
		/* 820D7A68h case    0:*/		regs.R31 = regs.R28;
		/* 820D7A68h case    0:*/		return 0x820D7A6C;
	}
	return 0x820D7A6C;
} // Block from 820D7A68h-820D7A6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7A6C);
		  /* 820D7A6Ch */ case    0:  		/* mr R4, R31 */
		/* 820D7A6Ch case    0:*/		regs.R4 = regs.R31;
		/* 820D7A6Ch case    0:*/		return 0x820D7A70;
		  /* 820D7A70h */ case    1:  		/* mr R3, R29 */
		/* 820D7A70h case    1:*/		regs.R3 = regs.R29;
		/* 820D7A70h case    1:*/		return 0x820D7A74;
		  /* 820D7A74h */ case    2:  		/* bl -36660 */
		/* 820D7A74h case    2:*/		regs.LR = 0x820D7A78; return 0x820CEB40;
		/* 820D7A74h case    2:*/		return 0x820D7A78;
		  /* 820D7A78h */ case    3:  		/* stw R27, <#[R31 + 24]> */
		/* 820D7A78h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000018) );
		/* 820D7A78h case    3:*/		return 0x820D7A7C;
		  /* 820D7A7Ch */ case    4:  		/* li R11, 2 */
		/* 820D7A7Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820D7A7Ch case    4:*/		return 0x820D7A80;
		  /* 820D7A80h */ case    5:  		/* stw R11, <#[R31 + 16]> */
		/* 820D7A80h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D7A80h case    5:*/		return 0x820D7A84;
		  /* 820D7A84h */ case    6:  		/* b 396 */
		/* 820D7A84h case    6:*/		return 0x820D7C10;
		/* 820D7A84h case    6:*/		return 0x820D7A88;
		  /* 820D7A88h */ case    7:  		/* li R3, 56 */
		/* 820D7A88h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x38);
		/* 820D7A88h case    7:*/		return 0x820D7A8C;
		  /* 820D7A8Ch */ case    8:  		/* bl -59492 */
		/* 820D7A8Ch case    8:*/		regs.LR = 0x820D7A90; return 0x820C9228;
		/* 820D7A8Ch case    8:*/		return 0x820D7A90;
		  /* 820D7A90h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 820D7A90h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D7A90h case    9:*/		return 0x820D7A94;
		  /* 820D7A94h */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 820D7A94h case   10:*/		if ( regs.CR[0].eq ) { return 0x820D7AA8;  }
		/* 820D7A94h case   10:*/		return 0x820D7A98;
		  /* 820D7A98h */ case   11:  		/* addi R4, R29, 16 */
		/* 820D7A98h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x10);
		/* 820D7A98h case   11:*/		return 0x820D7A9C;
		  /* 820D7A9Ch */ case   12:  		/* bl -57932 */
		/* 820D7A9Ch case   12:*/		regs.LR = 0x820D7AA0; return 0x820C9850;
		/* 820D7A9Ch case   12:*/		return 0x820D7AA0;
		  /* 820D7AA0h */ case   13:  		/* mr R31, R3 */
		/* 820D7AA0h case   13:*/		regs.R31 = regs.R3;
		/* 820D7AA0h case   13:*/		return 0x820D7AA4;
		  /* 820D7AA4h */ case   14:  		/* b 8 */
		/* 820D7AA4h case   14:*/		return 0x820D7AAC;
		/* 820D7AA4h case   14:*/		return 0x820D7AA8;
	}
	return 0x820D7AA8;
} // Block from 820D7A6Ch-820D7AA8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820D7AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7AA8);
		  /* 820D7AA8h */ case    0:  		/* mr R31, R28 */
		/* 820D7AA8h case    0:*/		regs.R31 = regs.R28;
		/* 820D7AA8h case    0:*/		return 0x820D7AAC;
	}
	return 0x820D7AAC;
} // Block from 820D7AA8h-820D7AACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7AAC);
		  /* 820D7AACh */ case    0:  		/* mr R4, R31 */
		/* 820D7AACh case    0:*/		regs.R4 = regs.R31;
		/* 820D7AACh case    0:*/		return 0x820D7AB0;
		  /* 820D7AB0h */ case    1:  		/* mr R3, R29 */
		/* 820D7AB0h case    1:*/		regs.R3 = regs.R29;
		/* 820D7AB0h case    1:*/		return 0x820D7AB4;
		  /* 820D7AB4h */ case    2:  		/* bl -36724 */
		/* 820D7AB4h case    2:*/		regs.LR = 0x820D7AB8; return 0x820CEB40;
		/* 820D7AB4h case    2:*/		return 0x820D7AB8;
		  /* 820D7AB8h */ case    3:  		/* stw R28, <#[R31 + 24]> */
		/* 820D7AB8h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000018) );
		/* 820D7AB8h case    3:*/		return 0x820D7ABC;
		  /* 820D7ABCh */ case    4:  		/* b -64 */
		/* 820D7ABCh case    4:*/		return 0x820D7A7C;
		/* 820D7ABCh case    4:*/		return 0x820D7AC0;
		  /* 820D7AC0h */ case    5:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7AC0h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7AC0h case    5:*/		return 0x820D7AC4;
		  /* 820D7AC4h */ case    6:  		/* lwz R11, <#[R31 + 24]> */
		/* 820D7AC4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820D7AC4h case    6:*/		return 0x820D7AC8;
		  /* 820D7AC8h */ case    7:  		/* neg R11, R11 */
		/* 820D7AC8h case    7:*/		cpu::op::neg<0>(regs,&regs.R11,regs.R11);
		/* 820D7AC8h case    7:*/		return 0x820D7ACC;
		  /* 820D7ACCh */ case    8:  		/* stw R11, <#[R31 + 24]> */
		/* 820D7ACCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820D7ACCh case    8:*/		return 0x820D7AD0;
		  /* 820D7AD0h */ case    9:  		/* b 320 */
		/* 820D7AD0h case    9:*/		return 0x820D7C10;
		/* 820D7AD0h case    9:*/		return 0x820D7AD4;
		  /* 820D7AD4h */ case   10:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7AD4h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7AD4h case   10:*/		return 0x820D7AD8;
		  /* 820D7AD8h */ case   11:  		/* li R11, 7 */
		/* 820D7AD8h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 820D7AD8h case   11:*/		return 0x820D7ADC;
		  /* 820D7ADCh */ case   12:  		/* lwz R10, <#[R31 + 24]> */
		/* 820D7ADCh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820D7ADCh case   12:*/		return 0x820D7AE0;
		  /* 820D7AE0h */ case   13:  		/* stw R11, <#[R31 + 16]> */
		/* 820D7AE0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D7AE0h case   13:*/		return 0x820D7AE4;
		  /* 820D7AE4h */ case   14:  		/* mr R11, R10 */
		/* 820D7AE4h case   14:*/		regs.R11 = regs.R10;
		/* 820D7AE4h case   14:*/		return 0x820D7AE8;
		  /* 820D7AE8h */ case   15:  		/* std R10, <#[R1 + 120]> */
		/* 820D7AE8h case   15:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D7AE8h case   15:*/		return 0x820D7AEC;
		  /* 820D7AECh */ case   16:  		/* lfd FR0, <#[R1 + 120]> */
		/* 820D7AECh case   16:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000078) );
		/* 820D7AECh case   16:*/		return 0x820D7AF0;
		  /* 820D7AF0h */ case   17:  		/* fcfid FR0, FR0 */
		/* 820D7AF0h case   17:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 820D7AF0h case   17:*/		return 0x820D7AF4;
		  /* 820D7AF4h */ case   18:  		/* stfd FR0, <#[R31 + 24]> */
		/* 820D7AF4h case   18:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + 0x00000018) );
		/* 820D7AF4h case   18:*/		return 0x820D7AF8;
		  /* 820D7AF8h */ case   19:  		/* b 280 */
		/* 820D7AF8h case   19:*/		return 0x820D7C10;
		/* 820D7AF8h case   19:*/		return 0x820D7AFC;
		  /* 820D7AFCh */ case   20:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7AFCh case   20:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7AFCh case   20:*/		return 0x820D7B00;
		  /* 820D7B00h */ case   21:  		/* li R11, 7 */
		/* 820D7B00h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 820D7B00h case   21:*/		return 0x820D7B04;
		  /* 820D7B04h */ case   22:  		/* lwz R10, <#[R31 + 24]> */
		/* 820D7B04h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820D7B04h case   22:*/		return 0x820D7B08;
		  /* 820D7B08h */ case   23:  		/* stw R11, <#[R31 + 16]> */
		/* 820D7B08h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D7B08h case   23:*/		return 0x820D7B0C;
		  /* 820D7B0Ch */ case   24:  		/* mr R11, R10 */
		/* 820D7B0Ch case   24:*/		regs.R11 = regs.R10;
		/* 820D7B0Ch case   24:*/		return 0x820D7B10;
		  /* 820D7B10h */ case   25:  		/* std R10, <#[R1 + 120]> */
		/* 820D7B10h case   25:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820D7B10h case   25:*/		return 0x820D7B14;
		  /* 820D7B14h */ case   26:  		/* lfd FR0, <#[R1 + 120]> */
		/* 820D7B14h case   26:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000078) );
		/* 820D7B14h case   26:*/		return 0x820D7B18;
		  /* 820D7B18h */ case   27:  		/* fcfid FR0, FR0 */
		/* 820D7B18h case   27:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 820D7B18h case   27:*/		return 0x820D7B1C;
		  /* 820D7B1Ch */ case   28:  		/* fneg FR0, FR0 */
		/* 820D7B1Ch case   28:*/		cpu::op::fneg<0>(regs,&regs.FR0,regs.FR0);
		/* 820D7B1Ch case   28:*/		return 0x820D7B20;
		  /* 820D7B20h */ case   29:  		/* b -44 */
		/* 820D7B20h case   29:*/		return 0x820D7AF4;
		/* 820D7B20h case   29:*/		return 0x820D7B24;
		  /* 820D7B24h */ case   30:  		/* lwz R31, <#[R1 + 128]> */
		/* 820D7B24h case   30:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000080) );
		/* 820D7B24h case   30:*/		return 0x820D7B28;
		  /* 820D7B28h */ case   31:  		/* lfd FR0, <#[R31 + 24]> */
		/* 820D7B28h case   31:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x00000018) );
		/* 820D7B28h case   31:*/		return 0x820D7B2C;
		  /* 820D7B2Ch */ case   32:  		/* frsp FR0, FR0 */
		/* 820D7B2Ch case   32:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 820D7B2Ch case   32:*/		return 0x820D7B30;
		  /* 820D7B30h */ case   33:  		/* stfs FR0, <#[R1 + 112]> */
		/* 820D7B30h case   33:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000070) );
		/* 820D7B30h case   33:*/		return 0x820D7B34;
		  /* 820D7B34h */ case   34:  		/* lwz R11, <#[R1 + 112]> */
		/* 820D7B34h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820D7B34h case   34:*/		return 0x820D7B38;
		  /* 820D7B38h */ case   35:  		/* cmplwi CR6, R11, 0 */
		/* 820D7B38h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D7B38h case   35:*/		return 0x820D7B3C;
		  /* 820D7B3Ch */ case   36:  		/* bc 4, CR6_EQ, 12 */
		/* 820D7B3Ch case   36:*/		if ( !regs.CR[6].eq ) { return 0x820D7B48;  }
		/* 820D7B3Ch case   36:*/		return 0x820D7B40;
		  /* 820D7B40h */ case   37:  		/* lis R11, -32768 */
		/* 820D7B40h case   37:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 820D7B40h case   37:*/		return 0x820D7B44;
		  /* 820D7B44h */ case   38:  		/* b 92 */
		/* 820D7B44h case   38:*/		return 0x820D7BA0;
		/* 820D7B44h case   38:*/		return 0x820D7B48;
	}
	return 0x820D7B48;
} // Block from 820D7AACh-820D7B48h (39 instructions)

//////////////////////////////////////////////////////
// Block at 820D7B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7B48);
		  /* 820D7B48h */ case    0:  		/* lis R10, -32768 */
		/* 820D7B48h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 820D7B48h case    0:*/		return 0x820D7B4C;
		  /* 820D7B4Ch */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820D7B4Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D7B4Ch case    1:*/		return 0x820D7B50;
		  /* 820D7B50h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 820D7B50h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820D7B5C;  }
		/* 820D7B50h case    2:*/		return 0x820D7B54;
		  /* 820D7B54h */ case    3:  		/* stw R28, <#[R1 + 112]> */
		/* 820D7B54h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000070) );
		/* 820D7B54h case    3:*/		return 0x820D7B58;
		  /* 820D7B58h */ case    4:  		/* b 76 */
		/* 820D7B58h case    4:*/		return 0x820D7BA4;
		/* 820D7B58h case    4:*/		return 0x820D7B5C;
	}
	return 0x820D7B5C;
} // Block from 820D7B48h-820D7B5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D7B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7B5C);
		  /* 820D7B5Ch */ case    0:  		/* lis R10, 32640 */
		/* 820D7B5Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7F80);
		/* 820D7B5Ch case    0:*/		return 0x820D7B60;
		  /* 820D7B60h */ case    1:  		/* rlwinm R9, R11, 0, 1, 8 */
		/* 820D7B60h case    1:*/		cpu::op::rlwinm<0,0,1,8>(regs,&regs.R9,regs.R11);
		/* 820D7B60h case    1:*/		return 0x820D7B64;
		  /* 820D7B64h */ case    2:  		/* cmplw CR6, R9, R10 */
		/* 820D7B64h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820D7B64h case    2:*/		return 0x820D7B68;
		  /* 820D7B68h */ case    3:  		/* bc 4, CR6_EQ, 52 */
		/* 820D7B68h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D7B9C;  }
		/* 820D7B68h case    3:*/		return 0x820D7B6C;
		  /* 820D7B6Ch */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D7B6Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D7B6Ch case    4:*/		return 0x820D7B70;
		  /* 820D7B70h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 820D7B70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820D7B7C;  }
		/* 820D7B70h case    5:*/		return 0x820D7B74;
		  /* 820D7B74h */ case    6:  		/* lis R11, -128 */
		/* 820D7B74h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFF80);
		/* 820D7B74h case    6:*/		return 0x820D7B78;
		  /* 820D7B78h */ case    7:  		/* b 40 */
		/* 820D7B78h case    7:*/		return 0x820D7BA0;
		/* 820D7B78h case    7:*/		return 0x820D7B7C;
	}
	return 0x820D7B7C;
} // Block from 820D7B5Ch-820D7B7Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D7B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7B7C);
		  /* 820D7B7Ch */ case    0:  		/* lis R9, -128 */
		/* 820D7B7Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFFF80);
		/* 820D7B7Ch case    0:*/		return 0x820D7B80;
		  /* 820D7B80h */ case    1:  		/* cmplw CR6, R11, R9 */
		/* 820D7B80h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820D7B80h case    1:*/		return 0x820D7B84;
		  /* 820D7B84h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 820D7B84h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D7B94;  }
		/* 820D7B84h case    2:*/		return 0x820D7B88;
		  /* 820D7B88h */ case    3:  		/* lis R10, -64 */
		/* 820D7B88h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFC0);
		/* 820D7B88h case    3:*/		return 0x820D7B8C;
		  /* 820D7B8Ch */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D7B8Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D7B8Ch case    4:*/		return 0x820D7B90;
	}
	return 0x820D7B90;
} // Block from 820D7B7Ch-820D7B90h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D7B90h
// Function '?HandleZPass@CUAssembler@D3DXShader@@IAAJPAVCNodeUAsmInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7B90);
		  /* 820D7B90h */ case    0:  		/* bc 4, CR6_EQ, 12 */
		/* 820D7B90h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820D7B9C;  }
		/* 820D7B90h case    0:*/		return 0x820D7B94;
	}
	return 0x820D7B94;
} // Block from 820D7B90h-820D7B94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7B94);
		  /* 820D7B94h */ case    0:  		/* stw R10, <#[R1 + 112]> */
		/* 820D7B94h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 820D7B94h case    0:*/		return 0x820D7B98;
		  /* 820D7B98h */ case    1:  		/* b 12 */
		/* 820D7B98h case    1:*/		return 0x820D7BA4;
		/* 820D7B98h case    1:*/		return 0x820D7B9C;
	}
	return 0x820D7B9C;
} // Block from 820D7B94h-820D7B9Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D7B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7B9C);
		  /* 820D7B9Ch */ case    0:  		/* xoris R11, R11, 32768 */
		/* 820D7B9Ch case    0:*/		cpu::op::xoris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 820D7B9Ch case    0:*/		return 0x820D7BA0;
	}
	return 0x820D7BA0;
} // Block from 820D7B9Ch-820D7BA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7BA0);
		  /* 820D7BA0h */ case    0:  		/* stw R11, <#[R1 + 112]> */
		/* 820D7BA0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820D7BA0h case    0:*/		return 0x820D7BA4;
	}
	return 0x820D7BA4;
} // Block from 820D7BA0h-820D7BA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7BA4);
		  /* 820D7BA4h */ case    0:  		/* lfs FR0, <#[R1 + 112]> */
		/* 820D7BA4h case    0:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000070) );
		/* 820D7BA4h case    0:*/		return 0x820D7BA8;
		  /* 820D7BA8h */ case    1:  		/* stfd FR0, <#[R31 + 24]> */
		/* 820D7BA8h case    1:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + 0x00000018) );
		/* 820D7BA8h case    1:*/		return 0x820D7BAC;
		  /* 820D7BACh */ case    2:  		/* b 100 */
		/* 820D7BACh case    2:*/		return 0x820D7C10;
		/* 820D7BACh case    2:*/		return 0x820D7BB0;
		  /* 820D7BB0h */ case    3:  		/* li R3, 128 */
		/* 820D7BB0h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x80);
		/* 820D7BB0h case    3:*/		return 0x820D7BB4;
		  /* 820D7BB4h */ case    4:  		/* bl -59788 */
		/* 820D7BB4h case    4:*/		regs.LR = 0x820D7BB8; return 0x820C9228;
		/* 820D7BB4h case    4:*/		return 0x820D7BB8;
		  /* 820D7BB8h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 820D7BB8h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D7BB8h case    5:*/		return 0x820D7BBC;
		  /* 820D7BBCh */ case    6:  		/* bc 12, CR0_EQ, 68 */
		/* 820D7BBCh case    6:*/		if ( regs.CR[0].eq ) { return 0x820D7C00;  }
		/* 820D7BBCh case    6:*/		return 0x820D7BC0;
		  /* 820D7BC0h */ case    7:  		/* addi R4, R29, 16 */
		/* 820D7BC0h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x10);
		/* 820D7BC0h case    7:*/		return 0x820D7BC4;
		  /* 820D7BC4h */ case    8:  		/* lwz R9, <#[R29 + 128]> */
		/* 820D7BC4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000080) );
		/* 820D7BC4h case    8:*/		return 0x820D7BC8;
		  /* 820D7BC8h */ case    9:  		/* lwz R8, <#[R29 + 124]> */
		/* 820D7BC8h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x0000007C) );
		/* 820D7BC8h case    9:*/		return 0x820D7BCC;
		  /* 820D7BCCh */ case   10:  		/* lwz R7, <#[R29 + 120]> */
		/* 820D7BCCh case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000078) );
		/* 820D7BCCh case   10:*/		return 0x820D7BD0;
		  /* 820D7BD0h */ case   11:  		/* lwz R6, <#[R29 + 116]> */
		/* 820D7BD0h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000074) );
		/* 820D7BD0h case   11:*/		return 0x820D7BD4;
		  /* 820D7BD4h */ case   12:  		/* lwz R5, <#[R29 + 112]> */
		/* 820D7BD4h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000070) );
		/* 820D7BD4h case   12:*/		return 0x820D7BD8;
		  /* 820D7BD8h */ case   13:  		/* bl 443368 */
		/* 820D7BD8h case   13:*/		regs.LR = 0x820D7BDC; return 0x82143FC0;
		/* 820D7BD8h case   13:*/		return 0x820D7BDC;
		  /* 820D7BDCh */ case   14:  		/* b 28 */
		/* 820D7BDCh case   14:*/		return 0x820D7BF8;
		/* 820D7BDCh case   14:*/		return 0x820D7BE0;
		  /* 820D7BE0h */ case   15:  		/* li R3, 56 */
		/* 820D7BE0h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x38);
		/* 820D7BE0h case   15:*/		return 0x820D7BE4;
		  /* 820D7BE4h */ case   16:  		/* bl -59836 */
		/* 820D7BE4h case   16:*/		regs.LR = 0x820D7BE8; return 0x820C9228;
		/* 820D7BE4h case   16:*/		return 0x820D7BE8;
		  /* 820D7BE8h */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 820D7BE8h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D7BE8h case   17:*/		return 0x820D7BEC;
		  /* 820D7BECh */ case   18:  		/* bc 12, CR0_EQ, 20 */
		/* 820D7BECh case   18:*/		if ( regs.CR[0].eq ) { return 0x820D7C00;  }
		/* 820D7BECh case   18:*/		return 0x820D7BF0;
		  /* 820D7BF0h */ case   19:  		/* addi R4, R29, 16 */
		/* 820D7BF0h case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x10);
		/* 820D7BF0h case   19:*/		return 0x820D7BF4;
		  /* 820D7BF4h */ case   20:  		/* bl -58276 */
		/* 820D7BF4h case   20:*/		regs.LR = 0x820D7BF8; return 0x820C9850;
		/* 820D7BF4h case   20:*/		return 0x820D7BF8;
	}
	return 0x820D7BF8;
} // Block from 820D7BA4h-820D7BF8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820D7BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7BF8);
		  /* 820D7BF8h */ case    0:  		/* mr R31, R3 */
		/* 820D7BF8h case    0:*/		regs.R31 = regs.R3;
		/* 820D7BF8h case    0:*/		return 0x820D7BFC;
		  /* 820D7BFCh */ case    1:  		/* b 8 */
		/* 820D7BFCh case    1:*/		return 0x820D7C04;
		/* 820D7BFCh case    1:*/		return 0x820D7C00;
	}
	return 0x820D7C00;
} // Block from 820D7BF8h-820D7C00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D7C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7C00);
		  /* 820D7C00h */ case    0:  		/* mr R31, R28 */
		/* 820D7C00h case    0:*/		regs.R31 = regs.R28;
		/* 820D7C00h case    0:*/		return 0x820D7C04;
	}
	return 0x820D7C04;
} // Block from 820D7C00h-820D7C04h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7C04);
		  /* 820D7C04h */ case    0:  		/* mr R4, R31 */
		/* 820D7C04h case    0:*/		regs.R4 = regs.R31;
		/* 820D7C04h case    0:*/		return 0x820D7C08;
		  /* 820D7C08h */ case    1:  		/* mr R3, R29 */
		/* 820D7C08h case    1:*/		regs.R3 = regs.R29;
		/* 820D7C08h case    1:*/		return 0x820D7C0C;
		  /* 820D7C0Ch */ case    2:  		/* bl -37068 */
		/* 820D7C0Ch case    2:*/		regs.LR = 0x820D7C10; return 0x820CEB40;
		/* 820D7C0Ch case    2:*/		return 0x820D7C10;
	}
	return 0x820D7C10;
} // Block from 820D7C04h-820D7C10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D7C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7C10);
		  /* 820D7C10h */ case    0:  		/* lwz R11, <#[R29 + 64]> */
		/* 820D7C10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000040) );
		/* 820D7C10h case    0:*/		return 0x820D7C14;
		  /* 820D7C14h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D7C14h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7C14h case    1:*/		return 0x820D7C18;
		  /* 820D7C18h */ case    2:  		/* bc 4, CR6_EQ, 96 */
		/* 820D7C18h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820D7C78;  }
		/* 820D7C18h case    2:*/		return 0x820D7C1C;
		  /* 820D7C1Ch */ case    3:  		/* li R3, 20 */
		/* 820D7C1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 820D7C1Ch case    3:*/		return 0x820D7C20;
		  /* 820D7C20h */ case    4:  		/* bl -59896 */
		/* 820D7C20h case    4:*/		regs.LR = 0x820D7C24; return 0x820C9228;
		/* 820D7C20h case    4:*/		return 0x820D7C24;
		  /* 820D7C24h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 820D7C24h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D7C24h case    5:*/		return 0x820D7C28;
		  /* 820D7C28h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 820D7C28h case    6:*/		if ( regs.CR[0].eq ) { return 0x820D7C44;  }
		/* 820D7C28h case    6:*/		return 0x820D7C2C;
		  /* 820D7C2Ch */ case    7:  		/* lis R11, -32255 */
		/* 820D7C2Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D7C2Ch case    7:*/		return 0x820D7C30;
		  /* 820D7C30h */ case    8:  		/* lwz R5, <#[R29 + 56]> */
		/* 820D7C30h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000038) );
		/* 820D7C30h case    8:*/		return 0x820D7C34;
		  /* 820D7C34h */ case    9:  		/* mr R4, R31 */
		/* 820D7C34h case    9:*/		regs.R4 = regs.R31;
		/* 820D7C34h case    9:*/		return 0x820D7C38;
		  /* 820D7C38h */ case   10:  		/* addi R6, R11, -10008 */
		/* 820D7C38h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFD8E8);
		/* 820D7C38h case   10:*/		return 0x820D7C3C;
		  /* 820D7C3Ch */ case   11:  		/* bl -59468 */
		/* 820D7C3Ch case   11:*/		regs.LR = 0x820D7C40; return 0x820C93F0;
		/* 820D7C3Ch case   11:*/		return 0x820D7C40;
		  /* 820D7C40h */ case   12:  		/* b 8 */
		/* 820D7C40h case   12:*/		return 0x820D7C48;
		/* 820D7C40h case   12:*/		return 0x820D7C44;
	}
	return 0x820D7C44;
} // Block from 820D7C10h-820D7C44h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D7C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7C44);
		  /* 820D7C44h */ case    0:  		/* mr R3, R28 */
		/* 820D7C44h case    0:*/		regs.R3 = regs.R28;
		/* 820D7C44h case    0:*/		return 0x820D7C48;
	}
	return 0x820D7C48;
} // Block from 820D7C44h-820D7C48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7C48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7C48);
		  /* 820D7C48h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 820D7C48h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820D7C48h case    0:*/		return 0x820D7C4C;
		  /* 820D7C4Ch */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 820D7C4Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820D7C74;  }
		/* 820D7C4Ch case    1:*/		return 0x820D7C50;
		  /* 820D7C50h */ case    2:  		/* lis R11, -32255 */
		/* 820D7C50h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D7C50h case    2:*/		return 0x820D7C54;
		  /* 820D7C54h */ case    3:  		/* lwz R3, <#[R29]> */
		/* 820D7C54h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 820D7C54h case    3:*/		return 0x820D7C58;
		  /* 820D7C58h */ case    4:  		/* li R5, 0 */
		/* 820D7C58h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D7C58h case    4:*/		return 0x820D7C5C;
		  /* 820D7C5Ch */ case    5:  		/* addi R6, R11, -10040 */
		/* 820D7C5Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFD8C8);
		/* 820D7C5Ch case    5:*/		return 0x820D7C60;
		  /* 820D7C60h */ case    6:  		/* addi R4, R29, 16 */
		/* 820D7C60h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x10);
		/* 820D7C60h case    6:*/		return 0x820D7C64;
		  /* 820D7C64h */ case    7:  		/* bl -199380 */
		/* 820D7C64h case    7:*/		regs.LR = 0x820D7C68; return 0x820A7190;
		/* 820D7C64h case    7:*/		return 0x820D7C68;
		  /* 820D7C68h */ case    8:  		/* stw R27, <#[R29 + 64]> */
		/* 820D7C68h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x00000040) );
		/* 820D7C68h case    8:*/		return 0x820D7C6C;
		  /* 820D7C6Ch */ case    9:  		/* stw R27, <#[R29 + 60]> */
		/* 820D7C6Ch case    9:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x0000003C) );
		/* 820D7C6Ch case    9:*/		return 0x820D7C70;
		  /* 820D7C70h */ case   10:  		/* b 8 */
		/* 820D7C70h case   10:*/		return 0x820D7C78;
		/* 820D7C70h case   10:*/		return 0x820D7C74;
	}
	return 0x820D7C74;
} // Block from 820D7C48h-820D7C74h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D7C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7C74);
		  /* 820D7C74h */ case    0:  		/* stw R3, <#[R29 + 56]> */
		/* 820D7C74h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000038) );
		/* 820D7C74h case    0:*/		return 0x820D7C78;
	}
	return 0x820D7C78;
} // Block from 820D7C74h-820D7C78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D7C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7C78);
		  /* 820D7C78h */ case    0:  		/* addi R1, R1, 256 */
		/* 820D7C78h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 820D7C78h case    0:*/		return 0x820D7C7C;
		  /* 820D7C7Ch */ case    1:  		/* b -289244 */
		/* 820D7C7Ch case    1:*/		return 0x820912A0;
		/* 820D7C7Ch case    1:*/		return 0x820D7C80;
	}
	return 0x820D7C80;
} // Block from 820D7C78h-820D7C80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D7C80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7C80);
		  /* 820D7C80h */ case    0:  		/* mfspr R12, LR */
		/* 820D7C80h case    0:*/		regs.R12 = regs.LR;
		/* 820D7C80h case    0:*/		return 0x820D7C84;
		  /* 820D7C84h */ case    1:  		/* bl -289344 */
		/* 820D7C84h case    1:*/		regs.LR = 0x820D7C88; return 0x82091244;
		/* 820D7C84h case    1:*/		return 0x820D7C88;
		  /* 820D7C88h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820D7C88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820D7C88h case    2:*/		return 0x820D7C8C;
		  /* 820D7C8Ch */ case    3:  		/* addi R11, R3, 1032 */
		/* 820D7C8Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x408);
		/* 820D7C8Ch case    3:*/		return 0x820D7C90;
		  /* 820D7C90h */ case    4:  		/* li R25, 0 */
		/* 820D7C90h case    4:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 820D7C90h case    4:*/		return 0x820D7C94;
		  /* 820D7C94h */ case    5:  		/* stw R11, <#[R3 + 20]> */
		/* 820D7C94h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 820D7C94h case    5:*/		return 0x820D7C98;
		  /* 820D7C98h */ case    6:  		/* li R26, -1 */
		/* 820D7C98h case    6:*/		cpu::op::li<0>(regs,&regs.R26,0xFFFFFFFF);
		/* 820D7C98h case    6:*/		return 0x820D7C9C;
		  /* 820D7C9Ch */ case    7:  		/* addi R24, R3, 32 */
		/* 820D7C9Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R3,0x20);
		/* 820D7C9Ch case    7:*/		return 0x820D7CA0;
		  /* 820D7CA0h */ case    8:  		/* stw R25, <#[R3 + 4]> */
		/* 820D7CA0h case    8:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		/* 820D7CA0h case    8:*/		return 0x820D7CA4;
		  /* 820D7CA4h */ case    9:  		/* lis R11, -32255 */
		/* 820D7CA4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D7CA4h case    9:*/		return 0x820D7CA8;
	}
	return 0x820D7CA8;
} // Block from 820D7C80h-820D7CA8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D7CA8h
// Function '?EmitInstruction@CUAssembler@D3DXShader@@IAAJPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7CA8);
		  /* 820D7CA8h */ case    0:  		/* stw R25, <#[R3 + 8]> */
		/* 820D7CA8h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000008) );
		/* 820D7CA8h case    0:*/		return 0x820D7CAC;
		  /* 820D7CACh */ case    1:  		/* lis R10, -32255 */
		/* 820D7CACh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 820D7CACh case    1:*/		return 0x820D7CB0;
		  /* 820D7CB0h */ case    2:  		/* stw R26, <#[R3 + 12]> */
		/* 820D7CB0h case    2:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x0000000C) );
		/* 820D7CB0h case    2:*/		return 0x820D7CB4;
		  /* 820D7CB4h */ case    3:  		/* stw R24, <#[R3 + 16]> */
		/* 820D7CB4h case    3:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000010) );
		/* 820D7CB4h case    3:*/		return 0x820D7CB8;
		  /* 820D7CB8h */ case    4:  		/* mr R31, R3 */
		/* 820D7CB8h case    4:*/		regs.R31 = regs.R3;
		/* 820D7CB8h case    4:*/		return 0x820D7CBC;
		  /* 820D7CBCh */ case    5:  		/* mr R30, R25 */
		/* 820D7CBCh case    5:*/		regs.R30 = regs.R25;
		/* 820D7CBCh case    5:*/		return 0x820D7CC0;
		  /* 820D7CC0h */ case    6:  		/* sth R25, <#[R3 + 32]> */
		/* 820D7CC0h case    6:*/		cpu::mem::store16( regs, regs.R25, (uint32)(regs.R3 + 0x00000020) );
		/* 820D7CC0h case    6:*/		return 0x820D7CC4;
		  /* 820D7CC4h */ case    7:  		/* addi R27, R11, 13840 */
		/* 820D7CC4h case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x3610);
		/* 820D7CC4h case    7:*/		return 0x820D7CC8;
		  /* 820D7CC8h */ case    8:  		/* addi R23, R10, -10392 */
		/* 820D7CC8h case    8:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0xFFFFD768);
		/* 820D7CC8h case    8:*/		return 0x820D7CCC;
		  /* 820D7CCCh */ case    9:  		/* addi R11, R27, 400 */
		/* 820D7CCCh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x190);
		/* 820D7CCCh case    9:*/		return 0x820D7CD0;
		  /* 820D7CD0h */ case   10:  		/* rlwinm R29, R30, 1, 0, 30 */
		/* 820D7CD0h case   10:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R29,regs.R30);
		/* 820D7CD0h case   10:*/		return 0x820D7CD4;
		  /* 820D7CD4h */ case   11:  		/* lhax R11, <#[R29 + R11]> */
		/* 820D7CD4h case   11:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 820D7CD4h case   11:*/		return 0x820D7CD8;
		  /* 820D7CD8h */ case   12:  		/* cmpwi CR0, R11, 0 */
		/* 820D7CD8h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 820D7CD8h case   12:*/		return 0x820D7CDC;
		  /* 820D7CDCh */ case   13:  		/* bc 4, CR0_EQ, 244 */
		/* 820D7CDCh case   13:*/		if ( !regs.CR[0].eq ) { return 0x820D7DD0;  }
		/* 820D7CDCh case   13:*/		return 0x820D7CE0;
		  /* 820D7CE0h */ case   14:  		/* lwz R11, <#[R31 + 12]> */
		/* 820D7CE0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D7CE0h case   14:*/		return 0x820D7CE4;
		  /* 820D7CE4h */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 820D7CE4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7CE4h case   15:*/		return 0x820D7CE8;
		  /* 820D7CE8h */ case   16:  		/* bc 4, CR6_LT, 28 */
		/* 820D7CE8h case   16:*/		if ( !regs.CR[6].lt ) { return 0x820D7D04;  }
		/* 820D7CE8h case   16:*/		return 0x820D7CEC;
		  /* 820D7CECh */ case   17:  		/* lwz R3, <#[R31 + 3032]> */
		/* 820D7CECh case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000BD8) );
		/* 820D7CECh case   17:*/		return 0x820D7CF0;
		  /* 820D7CF0h */ case   18:  		/* bl -12720 */
		/* 820D7CF0h case   18:*/		regs.LR = 0x820D7CF4; return 0x820D4B40;
		/* 820D7CF0h case   18:*/		return 0x820D7CF4;
		  /* 820D7CF4h */ case   19:  		/* stw R3, <#[R31 + 12]> */
		/* 820D7CF4h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D7CF4h case   19:*/		return 0x820D7CF8;
		  /* 820D7CF8h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 820D7CF8h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D7CF8h case   20:*/		return 0x820D7CFC;
		  /* 820D7CFCh */ case   21:  		/* bc 4, CR0_LT, 8 */
		/* 820D7CFCh case   21:*/		if ( !regs.CR[0].lt ) { return 0x820D7D04;  }
		/* 820D7CFCh case   21:*/		return 0x820D7D00;
		  /* 820D7D00h */ case   22:  		/* stw R25, <#[R31 + 12]> */
		/* 820D7D00h case   22:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D7D00h case   22:*/		return 0x820D7D04;
	}
	return 0x820D7D04;
} // Block from 820D7CA8h-820D7D04h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820D7D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7D04);
		  /* 820D7D04h */ case    0:  		/* addi R11, R27, 880 */
		/* 820D7D04h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x370);
		/* 820D7D04h case    0:*/		return 0x820D7D08;
		  /* 820D7D08h */ case    1:  		/* lhax R11, <#[R29 + R11]> */
		/* 820D7D08h case    1:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 820D7D08h case    1:*/		return 0x820D7D0C;
		  /* 820D7D0Ch */ case    2:  		/* cmpwi CR0, R11, 0 */
		/* 820D7D0Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 820D7D0Ch case    2:*/		return 0x820D7D10;
		  /* 820D7D10h */ case    3:  		/* bc 12, CR0_EQ, 128 */
		/* 820D7D10h case    3:*/		if ( regs.CR[0].eq ) { return 0x820D7D90;  }
		/* 820D7D10h case    3:*/		return 0x820D7D14;
		  /* 820D7D14h */ case    4:  		/* lwz R9, <#[R31 + 12]> */
		/* 820D7D14h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D7D14h case    4:*/		return 0x820D7D18;
		  /* 820D7D18h */ case    5:  		/* add. R11, R9, R11 */
		/* 820D7D18h case    5:*/		cpu::op::add<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820D7D18h case    5:*/		return 0x820D7D1C;
		  /* 820D7D1Ch */ case    6:  		/* bc 12, CR0_LT, 116 */
		/* 820D7D1Ch case    6:*/		if ( regs.CR[0].lt ) { return 0x820D7D90;  }
		/* 820D7D1Ch case    6:*/		return 0x820D7D20;
		  /* 820D7D20h */ case    7:  		/* cmpwi CR6, R11, 917 */
		/* 820D7D20h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000395);
		/* 820D7D20h case    7:*/		return 0x820D7D24;
		  /* 820D7D24h */ case    8:  		/* bc 12, CR6_GT, 108 */
		/* 820D7D24h case    8:*/		if ( regs.CR[6].gt ) { return 0x820D7D90;  }
		/* 820D7D24h case    8:*/		return 0x820D7D28;
		  /* 820D7D28h */ case    9:  		/* addi R8, R27, 3584 */
		/* 820D7D28h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R27,0xE00);
		/* 820D7D28h case    9:*/		return 0x820D7D2C;
		  /* 820D7D2Ch */ case   10:  		/* rlwinm R10, R11, 1, 0, 30 */
		/* 820D7D2Ch case   10:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R11);
		/* 820D7D2Ch case   10:*/		return 0x820D7D30;
		  /* 820D7D30h */ case   11:  		/* lhax R11, <#[R10 + R8]> */
		/* 820D7D30h case   11:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820D7D30h case   11:*/		return 0x820D7D34;
		  /* 820D7D34h */ case   12:  		/* cmpw CR6, R11, R9 */
		/* 820D7D34h case   12:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 820D7D34h case   12:*/		return 0x820D7D38;
		  /* 820D7D38h */ case   13:  		/* bc 4, CR6_EQ, 88 */
		/* 820D7D38h case   13:*/		if ( !regs.CR[6].eq ) { return 0x820D7D90;  }
		/* 820D7D38h case   13:*/		return 0x820D7D3C;
		  /* 820D7D3Ch */ case   14:  		/* lwz R11, <#[R31 + 16]> */
		/* 820D7D3Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D7D3Ch case   14:*/		return 0x820D7D40;
		  /* 820D7D40h */ case   15:  		/* addi R9, R31, 1030 */
		/* 820D7D40h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x406);
		/* 820D7D40h case   15:*/		return 0x820D7D44;
		  /* 820D7D44h */ case   16:  		/* cmplw CR6, R11, R9 */
		/* 820D7D44h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820D7D44h case   16:*/		return 0x820D7D48;
		  /* 820D7D48h */ case   17:  		/* bc 4, CR6_LT, 1780 */
		/* 820D7D48h case   17:*/		if ( !regs.CR[6].lt ) { return 0x820D843C;  }
		/* 820D7D48h case   17:*/		return 0x820D7D4C;
		  /* 820D7D4Ch */ case   18:  		/* addi R9, R27, 1744 */
		/* 820D7D4Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0x6D0);
		/* 820D7D4Ch case   18:*/		return 0x820D7D50;
		  /* 820D7D50h */ case   19:  		/* addi R11, R11, 2 */
		/* 820D7D50h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 820D7D50h case   19:*/		return 0x820D7D54;
		  /* 820D7D54h */ case   20:  		/* lhax R30, <#[R10 + R9]> */
		/* 820D7D54h case   20:*/		cpu::mem::load16a( regs, &regs.R30, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820D7D54h case   20:*/		return 0x820D7D58;
		  /* 820D7D58h */ case   21:  		/* stw R11, <#[R31 + 16]> */
		/* 820D7D58h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D7D58h case   21:*/		return 0x820D7D5C;
		  /* 820D7D5Ch */ case   22:  		/* sth R30, <#[R11]> */
		/* 820D7D5Ch case   22:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 820D7D5Ch case   22:*/		return 0x820D7D60;
		  /* 820D7D60h */ case   23:  		/* lwz R10, <#[R31 + 28]> */
		/* 820D7D60h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 820D7D60h case   23:*/		return 0x820D7D64;
		  /* 820D7D64h */ case   24:  		/* lwz R11, <#[R31 + 20]> */
		/* 820D7D64h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820D7D64h case   24:*/		return 0x820D7D68;
		  /* 820D7D68h */ case   25:  		/* addi R11, R11, 4 */
		/* 820D7D68h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820D7D68h case   25:*/		return 0x820D7D6C;
		  /* 820D7D6Ch */ case   26:  		/* stw R11, <#[R31 + 20]> */
		/* 820D7D6Ch case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820D7D6Ch case   26:*/		return 0x820D7D70;
		  /* 820D7D70h */ case   27:  		/* stw R10, <#[R11]> */
		/* 820D7D70h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820D7D70h case   27:*/		return 0x820D7D74;
		  /* 820D7D74h */ case   28:  		/* lwz R11, <#[R31 + 8]> */
		/* 820D7D74h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820D7D74h case   28:*/		return 0x820D7D78;
		  /* 820D7D78h */ case   29:  		/* cmpwi CR6, R11, 0 */
		/* 820D7D78h case   29:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D7D78h case   29:*/		return 0x820D7D7C;
		  /* 820D7D7Ch */ case   30:  		/* stw R26, <#[R31 + 12]> */
		/* 820D7D7Ch case   30:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D7D7Ch case   30:*/		return 0x820D7D80;
		  /* 820D7D80h */ case   31:  		/* bc 4, CR6_GT, -180 */
		/* 820D7D80h case   31:*/		if ( !regs.CR[6].gt ) { return 0x820D7CCC;  }
		/* 820D7D80h case   31:*/		return 0x820D7D84;
		  /* 820D7D84h */ case   32:  		/* addi R11, R11, -1 */
		/* 820D7D84h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820D7D84h case   32:*/		return 0x820D7D88;
		  /* 820D7D88h */ case   33:  		/* stw R11, <#[R31 + 8]> */
		/* 820D7D88h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820D7D88h case   33:*/		return 0x820D7D8C;
		  /* 820D7D8Ch */ case   34:  		/* b -192 */
		/* 820D7D8Ch case   34:*/		return 0x820D7CCC;
		/* 820D7D8Ch case   34:*/		return 0x820D7D90;
	}
	return 0x820D7D90;
} // Block from 820D7D04h-820D7D90h (35 instructions)

//////////////////////////////////////////////////////
// Block at 820D7D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7D90);
		  /* 820D7D90h */ case    0:  		/* addi R11, R27, 1264 */
		/* 820D7D90h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x4F0);
		/* 820D7D90h case    0:*/		return 0x820D7D94;
		  /* 820D7D94h */ case    1:  		/* lhax R11, <#[R29 + R11]> */
		/* 820D7D94h case    1:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 820D7D94h case    1:*/		return 0x820D7D98;
		  /* 820D7D98h */ case    2:  		/* cmpwi CR0, R11, 0 */
		/* 820D7D98h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 820D7D98h case    2:*/		return 0x820D7D9C;
		  /* 820D7D9Ch */ case    3:  		/* bc 12, CR0_EQ, 1484 */
		/* 820D7D9Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x820D8368;  }
		/* 820D7D9Ch case    3:*/		return 0x820D7DA0;
		  /* 820D7DA0h */ case    4:  		/* lwz R10, <#[R31 + 12]> */
		/* 820D7DA0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D7DA0h case    4:*/		return 0x820D7DA4;
		  /* 820D7DA4h */ case    5:  		/* add. R11, R10, R11 */
		/* 820D7DA4h case    5:*/		cpu::op::add<1>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820D7DA4h case    5:*/		return 0x820D7DA8;
	}
	return 0x820D7DA8;
} // Block from 820D7D90h-820D7DA8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D7DA8h
// Function '?Production@CUAssembler@D3DXShader@@IAAXII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7DA8);
		  /* 820D7DA8h */ case    0:  		/* bc 12, CR0_LT, 1472 */
		/* 820D7DA8h case    0:*/		if ( regs.CR[0].lt ) { return 0x820D8368;  }
		/* 820D7DA8h case    0:*/		return 0x820D7DAC;
		  /* 820D7DACh */ case    1:  		/* cmpwi CR6, R11, 917 */
		/* 820D7DACh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000395);
		/* 820D7DACh case    1:*/		return 0x820D7DB0;
		  /* 820D7DB0h */ case    2:  		/* bc 12, CR6_GT, 1464 */
		/* 820D7DB0h case    2:*/		if ( regs.CR[6].gt ) { return 0x820D8368;  }
		/* 820D7DB0h case    2:*/		return 0x820D7DB4;
		  /* 820D7DB4h */ case    3:  		/* addi R9, R27, 3584 */
		/* 820D7DB4h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0xE00);
		/* 820D7DB4h case    3:*/		return 0x820D7DB8;
		  /* 820D7DB8h */ case    4:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 820D7DB8h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 820D7DB8h case    4:*/		return 0x820D7DBC;
		  /* 820D7DBCh */ case    5:  		/* lhax R9, <#[R11 + R9]> */
		/* 820D7DBCh case    5:*/		cpu::mem::load16a( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820D7DBCh case    5:*/		return 0x820D7DC0;
		  /* 820D7DC0h */ case    6:  		/* cmpw CR6, R9, R10 */
		/* 820D7DC0h case    6:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R10);
		/* 820D7DC0h case    6:*/		return 0x820D7DC4;
		  /* 820D7DC4h */ case    7:  		/* bc 4, CR6_EQ, 1444 */
		/* 820D7DC4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820D8368;  }
		/* 820D7DC4h case    7:*/		return 0x820D7DC8;
		  /* 820D7DC8h */ case    8:  		/* addi R10, R27, 1744 */
		/* 820D7DC8h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x6D0);
		/* 820D7DC8h case    8:*/		return 0x820D7DCC;
		  /* 820D7DCCh */ case    9:  		/* lhax R11, <#[R11 + R10]> */
		/* 820D7DCCh case    9:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820D7DCCh case    9:*/		return 0x820D7DD0;
	}
	return 0x820D7DD0;
} // Block from 820D7DA8h-820D7DD0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D7DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D7DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D7DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D7DD0);
		  /* 820D7DD0h */ case    0:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 820D7DD0h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 820D7DD0h case    0:*/		return 0x820D7DD4;
		  /* 820D7DD4h */ case    1:  		/* lwz R10, <#[R31 + 20]> */
		/* 820D7DD4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820D7DD4h case    1:*/		return 0x820D7DD8;
		  /* 820D7DD8h */ case    2:  		/* addi R9, R27, 200 */
		/* 820D7DD8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0xC8);
		/* 820D7DD8h case    2:*/		return 0x820D7DDC;
		  /* 820D7DDCh */ case    3:  		/* addi R11, R11, -1 */
		/* 820D7DDCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820D7DDCh case    3:*/		return 0x820D7DE0;
		  /* 820D7DE0h */ case    4:  		/* cmplwi CR6, R11, 97 */
		/* 820D7DE0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000061);
		/* 820D7DE0h case    4:*/		return 0x820D7DE4;
		  /* 820D7DE4h */ case    5:  		/* lhax R29, <#[R30 + R9]> */
		/* 820D7DE4h case    5:*/		cpu::mem::load16a( regs, &regs.R29, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 820D7DE4h case    5:*/		return 0x820D7DE8;
		  /* 820D7DE8h */ case    6:  		/* rlwinm R28, R29, 2, 0, 29 */
		/* 820D7DE8h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R29);
		/* 820D7DE8h case    6:*/		return 0x820D7DEC;
		  /* 820D7DECh */ case    7:  		/* subf R10, R28, R10 */
		/* 820D7DECh case    7:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R28,regs.R10);
		/* 820D7DECh case    7:*/		return 0x820D7DF0;
		  /* 820D7DF0h */ case    8:  		/* lwz R10, <#[R10 + 4]> */
		/* 820D7DF0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 820D7DF0h case    8:*/		return 0x820D7DF4;
		  /* 820D7DF4h */ case    9:  		/* stw R10, <#[R31 + 24]> */
		/* 820D7DF4h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820D7DF4h case    9:*/		return 0x820D7DF8;
		  /* 820D7DF8h */ case   10:  		/* bc 12, CR6_GT, 1112 */
		/* 820D7DF8h case   10:*/		if ( regs.CR[6].gt ) { return 0x820D8250;  }
		/* 820D7DF8h case   10:*/		return 0x820D7DFC;
		  /* 820D7DFCh */ case   11:  		/* lis R12, -32255 */
		/* 820D7DFCh case   11:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8201);
		/* 820D7DFCh case   11:*/		return 0x820D7E00;
		  /* 820D7E00h */ case   12:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 820D7E00h case   12:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 820D7E00h case   12:*/		return 0x820D7E04;
		  /* 820D7E04h */ case   13:  		/* addi R12, R12, 22144 */
		/* 820D7E04h case   13:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x5680);
		/* 820D7E04h case   13:*/		return 0x820D7E08;
		  /* 820D7E08h */ case   14:  		/* lhzx R0, <#[R12 + R0]> */
		/* 820D7E08h case   14:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 820D7E08h case   14:*/		return 0x820D7E0C;
		  /* 820D7E0Ch */ case   15:  		/* lis R12, -32243 */
		/* 820D7E0Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF820D);
		/* 820D7E0Ch case   15:*/		return 0x820D7E10;
		  /* 820D7E10h */ case   16:  		/* addi R12, R12, 32292 */
		/* 820D7E10h case   16:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x7E24);
		/* 820D7E10h case   16:*/		return 0x820D7E14;
		  /* 820D7E14h */ case   17:  		/* ori R0, R0, 0 */
		/* 820D7E14h case   17:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 820D7E14h case   17:*/		return 0x820D7E18;
		  /* 820D7E18h */ case   18:  		/* add R12, R12, R0 */
		/* 820D7E18h case   18:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 820D7E18h case   18:*/		return 0x820D7E1C;
		  /* 820D7E1Ch */ case   19:  		/* mtspr CTR, R12 */
		/* 820D7E1Ch case   19:*/		regs.CTR = regs.R12;
		/* 820D7E1Ch case   19:*/		return 0x820D7E20;
		  /* 820D7E20h */ case   20:  		/* bcctr 20, CR0_LT */
		/* 820D7E20h case   20:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D7E20h case   20:*/		return 0x820D7E24;
		  /* 820D7E24h */ case   21:  		/* li R4, 0 */
		/* 820D7E24h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D7E24h case   21:*/		return 0x820D7E28;
		  /* 820D7E28h */ case   22:  		/* b 1052 */
		/* 820D7E28h case   22:*/		return 0x820D8244;
		/* 820D7E28h case   22:*/		return 0x820D7E2C;
		  /* 820D7E2Ch */ case   23:  		/* li R5, 1 */
		/* 820D7E2Ch case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7E2Ch case   23:*/		return 0x820D7E30;
		  /* 820D7E30h */ case   24:  		/* li R4, 1 */
		/* 820D7E30h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D7E30h case   24:*/		return 0x820D7E34;
		  /* 820D7E34h */ case   25:  		/* b 1044 */
		/* 820D7E34h case   25:*/		return 0x820D8248;
		/* 820D7E34h case   25:*/		return 0x820D7E38;
		  /* 820D7E38h */ case   26:  		/* li R5, 1 */
		/* 820D7E38h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7E38h case   26:*/		return 0x820D7E3C;
		  /* 820D7E3Ch */ case   27:  		/* li R4, 2 */
		/* 820D7E3Ch case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 820D7E3Ch case   27:*/		return 0x820D7E40;
		  /* 820D7E40h */ case   28:  		/* b 1032 */
		/* 820D7E40h case   28:*/		return 0x820D8248;
		/* 820D7E40h case   28:*/		return 0x820D7E44;
		  /* 820D7E44h */ case   29:  		/* li R5, 2 */
		/* 820D7E44h case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D7E44h case   29:*/		return 0x820D7E48;
		  /* 820D7E48h */ case   30:  		/* li R4, 3 */
		/* 820D7E48h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 820D7E48h case   30:*/		return 0x820D7E4C;
		  /* 820D7E4Ch */ case   31:  		/* b 1020 */
		/* 820D7E4Ch case   31:*/		return 0x820D8248;
		/* 820D7E4Ch case   31:*/		return 0x820D7E50;
		  /* 820D7E50h */ case   32:  		/* li R5, 1 */
		/* 820D7E50h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7E50h case   32:*/		return 0x820D7E54;
		  /* 820D7E54h */ case   33:  		/* li R4, 4 */
		/* 820D7E54h case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 820D7E54h case   33:*/		return 0x820D7E58;
		  /* 820D7E58h */ case   34:  		/* b 1008 */
		/* 820D7E58h case   34:*/		return 0x820D8248;
		/* 820D7E58h case   34:*/		return 0x820D7E5C;
		  /* 820D7E5Ch */ case   35:  		/* li R5, 1 */
		/* 820D7E5Ch case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7E5Ch case   35:*/		return 0x820D7E60;
		  /* 820D7E60h */ case   36:  		/* li R4, 5 */
		/* 820D7E60h case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 820D7E60h case   36:*/		return 0x820D7E64;
		  /* 820D7E64h */ case   37:  		/* b 996 */
		/* 820D7E64h case   37:*/		return 0x820D8248;
		/* 820D7E64h case   37:*/		return 0x820D7E68;
		  /* 820D7E68h */ case   38:  		/* li R5, 1 */
		/* 820D7E68h case   38:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7E68h case   38:*/		return 0x820D7E6C;
		  /* 820D7E6Ch */ case   39:  		/* li R4, 6 */
		/* 820D7E6Ch case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x6);
		/* 820D7E6Ch case   39:*/		return 0x820D7E70;
		  /* 820D7E70h */ case   40:  		/* b 984 */
		/* 820D7E70h case   40:*/		return 0x820D8248;
		/* 820D7E70h case   40:*/		return 0x820D7E74;
		  /* 820D7E74h */ case   41:  		/* li R4, 7 */
		/* 820D7E74h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x7);
		/* 820D7E74h case   41:*/		return 0x820D7E78;
		  /* 820D7E78h */ case   42:  		/* b 972 */
		/* 820D7E78h case   42:*/		return 0x820D8244;
		/* 820D7E78h case   42:*/		return 0x820D7E7C;
		  /* 820D7E7Ch */ case   43:  		/* li R5, 1 */
		/* 820D7E7Ch case   43:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7E7Ch case   43:*/		return 0x820D7E80;
		  /* 820D7E80h */ case   44:  		/* li R4, 8 */
		/* 820D7E80h case   44:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 820D7E80h case   44:*/		return 0x820D7E84;
		  /* 820D7E84h */ case   45:  		/* b 964 */
		/* 820D7E84h case   45:*/		return 0x820D8248;
		/* 820D7E84h case   45:*/		return 0x820D7E88;
		  /* 820D7E88h */ case   46:  		/* li R5, 1 */
		/* 820D7E88h case   46:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7E88h case   46:*/		return 0x820D7E8C;
		  /* 820D7E8Ch */ case   47:  		/* li R4, 9 */
		/* 820D7E8Ch case   47:*/		cpu::op::li<0>(regs,&regs.R4,0x9);
		/* 820D7E8Ch case   47:*/		return 0x820D7E90;
		  /* 820D7E90h */ case   48:  		/* b 952 */
		/* 820D7E90h case   48:*/		return 0x820D8248;
		/* 820D7E90h case   48:*/		return 0x820D7E94;
		  /* 820D7E94h */ case   49:  		/* li R5, 1 */
		/* 820D7E94h case   49:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7E94h case   49:*/		return 0x820D7E98;
		  /* 820D7E98h */ case   50:  		/* li R4, 10 */
		/* 820D7E98h case   50:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 820D7E98h case   50:*/		return 0x820D7E9C;
		  /* 820D7E9Ch */ case   51:  		/* b 940 */
		/* 820D7E9Ch case   51:*/		return 0x820D8248;
		/* 820D7E9Ch case   51:*/		return 0x820D7EA0;
		  /* 820D7EA0h */ case   52:  		/* li R5, 1 */
		/* 820D7EA0h case   52:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7EA0h case   52:*/		return 0x820D7EA4;
		  /* 820D7EA4h */ case   53:  		/* li R4, 11 */
		/* 820D7EA4h case   53:*/		cpu::op::li<0>(regs,&regs.R4,0xB);
		/* 820D7EA4h case   53:*/		return 0x820D7EA8;
		  /* 820D7EA8h */ case   54:  		/* b 928 */
		/* 820D7EA8h case   54:*/		return 0x820D8248;
		/* 820D7EA8h case   54:*/		return 0x820D7EAC;
		  /* 820D7EACh */ case   55:  		/* li R5, 2 */
		/* 820D7EACh case   55:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D7EACh case   55:*/		return 0x820D7EB0;
		  /* 820D7EB0h */ case   56:  		/* li R4, 12 */
		/* 820D7EB0h case   56:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 820D7EB0h case   56:*/		return 0x820D7EB4;
		  /* 820D7EB4h */ case   57:  		/* b 916 */
		/* 820D7EB4h case   57:*/		return 0x820D8248;
		/* 820D7EB4h case   57:*/		return 0x820D7EB8;
		  /* 820D7EB8h */ case   58:  		/* li R5, 1 */
		/* 820D7EB8h case   58:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7EB8h case   58:*/		return 0x820D7EBC;
		  /* 820D7EBCh */ case   59:  		/* li R4, 13 */
		/* 820D7EBCh case   59:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 820D7EBCh case   59:*/		return 0x820D7EC0;
		  /* 820D7EC0h */ case   60:  		/* b 904 */
		/* 820D7EC0h case   60:*/		return 0x820D8248;
		/* 820D7EC0h case   60:*/		return 0x820D7EC4;
		  /* 820D7EC4h */ case   61:  		/* li R5, 2 */
		/* 820D7EC4h case   61:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D7EC4h case   61:*/		return 0x820D7EC8;
		  /* 820D7EC8h */ case   62:  		/* li R4, 14 */
		/* 820D7EC8h case   62:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 820D7EC8h case   62:*/		return 0x820D7ECC;
		  /* 820D7ECCh */ case   63:  		/* b 892 */
		/* 820D7ECCh case   63:*/		return 0x820D8248;
		/* 820D7ECCh case   63:*/		return 0x820D7ED0;
		  /* 820D7ED0h */ case   64:  		/* li R5, 1 */
		/* 820D7ED0h case   64:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7ED0h case   64:*/		return 0x820D7ED4;
		  /* 820D7ED4h */ case   65:  		/* li R4, 15 */
		/* 820D7ED4h case   65:*/		cpu::op::li<0>(regs,&regs.R4,0xF);
		/* 820D7ED4h case   65:*/		return 0x820D7ED8;
		  /* 820D7ED8h */ case   66:  		/* b 880 */
		/* 820D7ED8h case   66:*/		return 0x820D8248;
		/* 820D7ED8h case   66:*/		return 0x820D7EDC;
		  /* 820D7EDCh */ case   67:  		/* li R5, 2 */
		/* 820D7EDCh case   67:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D7EDCh case   67:*/		return 0x820D7EE0;
		  /* 820D7EE0h */ case   68:  		/* li R4, 16 */
		/* 820D7EE0h case   68:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 820D7EE0h case   68:*/		return 0x820D7EE4;
		  /* 820D7EE4h */ case   69:  		/* b 868 */
		/* 820D7EE4h case   69:*/		return 0x820D8248;
		/* 820D7EE4h case   69:*/		return 0x820D7EE8;
		  /* 820D7EE8h */ case   70:  		/* li R5, 3 */
		/* 820D7EE8h case   70:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820D7EE8h case   70:*/		return 0x820D7EEC;
		  /* 820D7EECh */ case   71:  		/* li R4, 17 */
		/* 820D7EECh case   71:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 820D7EECh case   71:*/		return 0x820D7EF0;
		  /* 820D7EF0h */ case   72:  		/* b 856 */
		/* 820D7EF0h case   72:*/		return 0x820D8248;
		/* 820D7EF0h case   72:*/		return 0x820D7EF4;
		  /* 820D7EF4h */ case   73:  		/* li R5, 4 */
		/* 820D7EF4h case   73:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 820D7EF4h case   73:*/		return 0x820D7EF8;
		  /* 820D7EF8h */ case   74:  		/* li R4, 18 */
		/* 820D7EF8h case   74:*/		cpu::op::li<0>(regs,&regs.R4,0x12);
		/* 820D7EF8h case   74:*/		return 0x820D7EFC;
		  /* 820D7EFCh */ case   75:  		/* b 844 */
		/* 820D7EFCh case   75:*/		return 0x820D8248;
		/* 820D7EFCh case   75:*/		return 0x820D7F00;
		  /* 820D7F00h */ case   76:  		/* li R5, 5 */
		/* 820D7F00h case   76:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 820D7F00h case   76:*/		return 0x820D7F04;
		  /* 820D7F04h */ case   77:  		/* li R4, 19 */
		/* 820D7F04h case   77:*/		cpu::op::li<0>(regs,&regs.R4,0x13);
		/* 820D7F04h case   77:*/		return 0x820D7F08;
		  /* 820D7F08h */ case   78:  		/* b 832 */
		/* 820D7F08h case   78:*/		return 0x820D8248;
		/* 820D7F08h case   78:*/		return 0x820D7F0C;
		  /* 820D7F0Ch */ case   79:  		/* li R5, 6 */
		/* 820D7F0Ch case   79:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 820D7F0Ch case   79:*/		return 0x820D7F10;
		  /* 820D7F10h */ case   80:  		/* li R4, 20 */
		/* 820D7F10h case   80:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 820D7F10h case   80:*/		return 0x820D7F14;
		  /* 820D7F14h */ case   81:  		/* b 820 */
		/* 820D7F14h case   81:*/		return 0x820D8248;
		/* 820D7F14h case   81:*/		return 0x820D7F18;
		  /* 820D7F18h */ case   82:  		/* li R5, 6 */
		/* 820D7F18h case   82:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 820D7F18h case   82:*/		return 0x820D7F1C;
		  /* 820D7F1Ch */ case   83:  		/* li R4, 21 */
		/* 820D7F1Ch case   83:*/		cpu::op::li<0>(regs,&regs.R4,0x15);
		/* 820D7F1Ch case   83:*/		return 0x820D7F20;
		  /* 820D7F20h */ case   84:  		/* b 808 */
		/* 820D7F20h case   84:*/		return 0x820D8248;
		/* 820D7F20h case   84:*/		return 0x820D7F24;
		  /* 820D7F24h */ case   85:  		/* li R5, 6 */
		/* 820D7F24h case   85:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 820D7F24h case   85:*/		return 0x820D7F28;
		  /* 820D7F28h */ case   86:  		/* li R4, 22 */
		/* 820D7F28h case   86:*/		cpu::op::li<0>(regs,&regs.R4,0x16);
		/* 820D7F28h case   86:*/		return 0x820D7F2C;
		  /* 820D7F2Ch */ case   87:  		/* b 796 */
		/* 820D7F2Ch case   87:*/		return 0x820D8248;
		/* 820D7F2Ch case   87:*/		return 0x820D7F30;
		  /* 820D7F30h */ case   88:  		/* li R5, 3 */
		/* 820D7F30h case   88:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820D7F30h case   88:*/		return 0x820D7F34;
		  /* 820D7F34h */ case   89:  		/* li R4, 23 */
		/* 820D7F34h case   89:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 820D7F34h case   89:*/		return 0x820D7F38;
		  /* 820D7F38h */ case   90:  		/* b 784 */
		/* 820D7F38h case   90:*/		return 0x820D8248;
		/* 820D7F38h case   90:*/		return 0x820D7F3C;
		  /* 820D7F3Ch */ case   91:  		/* li R5, 2 */
		/* 820D7F3Ch case   91:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D7F3Ch case   91:*/		return 0x820D7F40;
		  /* 820D7F40h */ case   92:  		/* li R4, 24 */
		/* 820D7F40h case   92:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 820D7F40h case   92:*/		return 0x820D7F44;
		  /* 820D7F44h */ case   93:  		/* b 772 */
		/* 820D7F44h case   93:*/		return 0x820D8248;
		/* 820D7F44h case   93:*/		return 0x820D7F48;
		  /* 820D7F48h */ case   94:  		/* li R5, 3 */
		/* 820D7F48h case   94:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820D7F48h case   94:*/		return 0x820D7F4C;
		  /* 820D7F4Ch */ case   95:  		/* li R4, 25 */
		/* 820D7F4Ch case   95:*/		cpu::op::li<0>(regs,&regs.R4,0x19);
		/* 820D7F4Ch case   95:*/		return 0x820D7F50;
		  /* 820D7F50h */ case   96:  		/* b 760 */
		/* 820D7F50h case   96:*/		return 0x820D8248;
		/* 820D7F50h case   96:*/		return 0x820D7F54;
		  /* 820D7F54h */ case   97:  		/* li R5, 2 */
		/* 820D7F54h case   97:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D7F54h case   97:*/		return 0x820D7F58;
		  /* 820D7F58h */ case   98:  		/* li R4, 26 */
		/* 820D7F58h case   98:*/		cpu::op::li<0>(regs,&regs.R4,0x1A);
		/* 820D7F58h case   98:*/		return 0x820D7F5C;
		  /* 820D7F5Ch */ case   99:  		/* b 748 */
		/* 820D7F5Ch case   99:*/		return 0x820D8248;
		/* 820D7F5Ch case   99:*/		return 0x820D7F60;
		  /* 820D7F60h */ case  100:  		/* li R5, 2 */
		/* 820D7F60h case  100:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D7F60h case  100:*/		return 0x820D7F64;
		  /* 820D7F64h */ case  101:  		/* li R4, 27 */
		/* 820D7F64h case  101:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 820D7F64h case  101:*/		return 0x820D7F68;
		  /* 820D7F68h */ case  102:  		/* b 736 */
		/* 820D7F68h case  102:*/		return 0x820D8248;
		/* 820D7F68h case  102:*/		return 0x820D7F6C;
		  /* 820D7F6Ch */ case  103:  		/* li R5, 3 */
		/* 820D7F6Ch case  103:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820D7F6Ch case  103:*/		return 0x820D7F70;
		  /* 820D7F70h */ case  104:  		/* li R4, 29 */
		/* 820D7F70h case  104:*/		cpu::op::li<0>(regs,&regs.R4,0x1D);
		/* 820D7F70h case  104:*/		return 0x820D7F74;
		  /* 820D7F74h */ case  105:  		/* b 724 */
		/* 820D7F74h case  105:*/		return 0x820D8248;
		/* 820D7F74h case  105:*/		return 0x820D7F78;
		  /* 820D7F78h */ case  106:  		/* li R5, 2 */
		/* 820D7F78h case  106:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D7F78h case  106:*/		return 0x820D7F7C;
		  /* 820D7F7Ch */ case  107:  		/* li R4, 28 */
		/* 820D7F7Ch case  107:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 820D7F7Ch case  107:*/		return 0x820D7F80;
		  /* 820D7F80h */ case  108:  		/* b 712 */
		/* 820D7F80h case  108:*/		return 0x820D8248;
		/* 820D7F80h case  108:*/		return 0x820D7F84;
		  /* 820D7F84h */ case  109:  		/* li R5, 3 */
		/* 820D7F84h case  109:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820D7F84h case  109:*/		return 0x820D7F88;
		  /* 820D7F88h */ case  110:  		/* li R4, 30 */
		/* 820D7F88h case  110:*/		cpu::op::li<0>(regs,&regs.R4,0x1E);
		/* 820D7F88h case  110:*/		return 0x820D7F8C;
		  /* 820D7F8Ch */ case  111:  		/* b 700 */
		/* 820D7F8Ch case  111:*/		return 0x820D8248;
		/* 820D7F8Ch case  111:*/		return 0x820D7F90;
		  /* 820D7F90h */ case  112:  		/* li R5, 3 */
		/* 820D7F90h case  112:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820D7F90h case  112:*/		return 0x820D7F94;
		  /* 820D7F94h */ case  113:  		/* li R4, 31 */
		/* 820D7F94h case  113:*/		cpu::op::li<0>(regs,&regs.R4,0x1F);
		/* 820D7F94h case  113:*/		return 0x820D7F98;
		  /* 820D7F98h */ case  114:  		/* b 688 */
		/* 820D7F98h case  114:*/		return 0x820D8248;
		/* 820D7F98h case  114:*/		return 0x820D7F9C;
		  /* 820D7F9Ch */ case  115:  		/* li R5, 4 */
		/* 820D7F9Ch case  115:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 820D7F9Ch case  115:*/		return 0x820D7FA0;
		  /* 820D7FA0h */ case  116:  		/* li R4, 32 */
		/* 820D7FA0h case  116:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820D7FA0h case  116:*/		return 0x820D7FA4;
		  /* 820D7FA4h */ case  117:  		/* b 676 */
		/* 820D7FA4h case  117:*/		return 0x820D8248;
		/* 820D7FA4h case  117:*/		return 0x820D7FA8;
		  /* 820D7FA8h */ case  118:  		/* li R5, 4 */
		/* 820D7FA8h case  118:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 820D7FA8h case  118:*/		return 0x820D7FAC;
		  /* 820D7FACh */ case  119:  		/* li R4, 33 */
		/* 820D7FACh case  119:*/		cpu::op::li<0>(regs,&regs.R4,0x21);
		/* 820D7FACh case  119:*/		return 0x820D7FB0;
		  /* 820D7FB0h */ case  120:  		/* b 664 */
		/* 820D7FB0h case  120:*/		return 0x820D8248;
		/* 820D7FB0h case  120:*/		return 0x820D7FB4;
		  /* 820D7FB4h */ case  121:  		/* li R5, 5 */
		/* 820D7FB4h case  121:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 820D7FB4h case  121:*/		return 0x820D7FB8;
		  /* 820D7FB8h */ case  122:  		/* li R4, 34 */
		/* 820D7FB8h case  122:*/		cpu::op::li<0>(regs,&regs.R4,0x22);
		/* 820D7FB8h case  122:*/		return 0x820D7FBC;
		  /* 820D7FBCh */ case  123:  		/* b 652 */
		/* 820D7FBCh case  123:*/		return 0x820D8248;
		/* 820D7FBCh case  123:*/		return 0x820D7FC0;
		  /* 820D7FC0h */ case  124:  		/* li R5, 1 */
		/* 820D7FC0h case  124:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D7FC0h case  124:*/		return 0x820D7FC4;
		  /* 820D7FC4h */ case  125:  		/* li R4, 35 */
		/* 820D7FC4h case  125:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 820D7FC4h case  125:*/		return 0x820D7FC8;
		  /* 820D7FC8h */ case  126:  		/* b 640 */
		/* 820D7FC8h case  126:*/		return 0x820D8248;
		/* 820D7FC8h case  126:*/		return 0x820D7FCC;
		  /* 820D7FCCh */ case  127:  		/* li R5, 2 */
		/* 820D7FCCh case  127:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D7FCCh case  127:*/		return 0x820D7FD0;
		  /* 820D7FD0h */ case  128:  		/* li R4, 36 */
		/* 820D7FD0h case  128:*/		cpu::op::li<0>(regs,&regs.R4,0x24);
		/* 820D7FD0h case  128:*/		return 0x820D7FD4;
		  /* 820D7FD4h */ case  129:  		/* b 628 */
		/* 820D7FD4h case  129:*/		return 0x820D8248;
		/* 820D7FD4h case  129:*/		return 0x820D7FD8;
		  /* 820D7FD8h */ case  130:  		/* li R5, 2 */
		/* 820D7FD8h case  130:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D7FD8h case  130:*/		return 0x820D7FDC;
		  /* 820D7FDCh */ case  131:  		/* li R4, 37 */
		/* 820D7FDCh case  131:*/		cpu::op::li<0>(regs,&regs.R4,0x25);
		/* 820D7FDCh case  131:*/		return 0x820D7FE0;
		  /* 820D7FE0h */ case  132:  		/* b 616 */
		/* 820D7FE0h case  132:*/		return 0x820D8248;
		/* 820D7FE0h case  132:*/		return 0x820D7FE4;
		  /* 820D7FE4h */ case  133:  		/* li R5, 3 */
		/* 820D7FE4h case  133:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820D7FE4h case  133:*/		return 0x820D7FE8;
		  /* 820D7FE8h */ case  134:  		/* li R4, 38 */
		/* 820D7FE8h case  134:*/		cpu::op::li<0>(regs,&regs.R4,0x26);
		/* 820D7FE8h case  134:*/		return 0x820D7FEC;
		  /* 820D7FECh */ case  135:  		/* b 604 */
		/* 820D7FECh case  135:*/		return 0x820D8248;
		/* 820D7FECh case  135:*/		return 0x820D7FF0;
		  /* 820D7FF0h */ case  136:  		/* li R5, 3 */
		/* 820D7FF0h case  136:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820D7FF0h case  136:*/		return 0x820D7FF4;
		  /* 820D7FF4h */ case  137:  		/* li R4, 39 */
		/* 820D7FF4h case  137:*/		cpu::op::li<0>(regs,&regs.R4,0x27);
		/* 820D7FF4h case  137:*/		return 0x820D7FF8;
		  /* 820D7FF8h */ case  138:  		/* b 592 */
		/* 820D7FF8h case  138:*/		return 0x820D8248;
		/* 820D7FF8h case  138:*/		return 0x820D7FFC;
		  /* 820D7FFCh */ case  139:  		/* li R5, 4 */
		/* 820D7FFCh case  139:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 820D7FFCh case  139:*/		return 0x820D8000;
		  /* 820D8000h */ case  140:  		/* li R4, 40 */
		/* 820D8000h case  140:*/		cpu::op::li<0>(regs,&regs.R4,0x28);
		/* 820D8000h case  140:*/		return 0x820D8004;
		  /* 820D8004h */ case  141:  		/* b 580 */
		/* 820D8004h case  141:*/		return 0x820D8248;
		/* 820D8004h case  141:*/		return 0x820D8008;
		  /* 820D8008h */ case  142:  		/* li R5, 1 */
		/* 820D8008h case  142:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8008h case  142:*/		return 0x820D800C;
		  /* 820D800Ch */ case  143:  		/* li R4, 41 */
		/* 820D800Ch case  143:*/		cpu::op::li<0>(regs,&regs.R4,0x29);
		/* 820D800Ch case  143:*/		return 0x820D8010;
		  /* 820D8010h */ case  144:  		/* b 568 */
		/* 820D8010h case  144:*/		return 0x820D8248;
		/* 820D8010h case  144:*/		return 0x820D8014;
		  /* 820D8014h */ case  145:  		/* li R5, 1 */
		/* 820D8014h case  145:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8014h case  145:*/		return 0x820D8018;
		  /* 820D8018h */ case  146:  		/* li R4, 42 */
		/* 820D8018h case  146:*/		cpu::op::li<0>(regs,&regs.R4,0x2A);
		/* 820D8018h case  146:*/		return 0x820D801C;
		  /* 820D801Ch */ case  147:  		/* b 556 */
		/* 820D801Ch case  147:*/		return 0x820D8248;
		/* 820D801Ch case  147:*/		return 0x820D8020;
		  /* 820D8020h */ case  148:  		/* li R5, 2 */
		/* 820D8020h case  148:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D8020h case  148:*/		return 0x820D8024;
		  /* 820D8024h */ case  149:  		/* li R4, 43 */
		/* 820D8024h case  149:*/		cpu::op::li<0>(regs,&regs.R4,0x2B);
		/* 820D8024h case  149:*/		return 0x820D8028;
		  /* 820D8028h */ case  150:  		/* b 544 */
		/* 820D8028h case  150:*/		return 0x820D8248;
		/* 820D8028h case  150:*/		return 0x820D802C;
		  /* 820D802Ch */ case  151:  		/* li R5, 1 */
		/* 820D802Ch case  151:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D802Ch case  151:*/		return 0x820D8030;
		  /* 820D8030h */ case  152:  		/* li R4, 44 */
		/* 820D8030h case  152:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 820D8030h case  152:*/		return 0x820D8034;
		  /* 820D8034h */ case  153:  		/* b 532 */
		/* 820D8034h case  153:*/		return 0x820D8248;
		/* 820D8034h case  153:*/		return 0x820D8038;
		  /* 820D8038h */ case  154:  		/* li R5, 2 */
		/* 820D8038h case  154:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D8038h case  154:*/		return 0x820D803C;
		  /* 820D803Ch */ case  155:  		/* li R4, 45 */
		/* 820D803Ch case  155:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 820D803Ch case  155:*/		return 0x820D8040;
		  /* 820D8040h */ case  156:  		/* b 520 */
		/* 820D8040h case  156:*/		return 0x820D8248;
		/* 820D8040h case  156:*/		return 0x820D8044;
		  /* 820D8044h */ case  157:  		/* li R5, 1 */
		/* 820D8044h case  157:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8044h case  157:*/		return 0x820D8048;
		  /* 820D8048h */ case  158:  		/* li R4, 46 */
		/* 820D8048h case  158:*/		cpu::op::li<0>(regs,&regs.R4,0x2E);
		/* 820D8048h case  158:*/		return 0x820D804C;
		  /* 820D804Ch */ case  159:  		/* b 508 */
		/* 820D804Ch case  159:*/		return 0x820D8248;
		/* 820D804Ch case  159:*/		return 0x820D8050;
		  /* 820D8050h */ case  160:  		/* li R5, 1 */
		/* 820D8050h case  160:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8050h case  160:*/		return 0x820D8054;
		  /* 820D8054h */ case  161:  		/* li R4, 47 */
		/* 820D8054h case  161:*/		cpu::op::li<0>(regs,&regs.R4,0x2F);
		/* 820D8054h case  161:*/		return 0x820D8058;
		  /* 820D8058h */ case  162:  		/* b 496 */
		/* 820D8058h case  162:*/		return 0x820D8248;
		/* 820D8058h case  162:*/		return 0x820D805C;
		  /* 820D805Ch */ case  163:  		/* li R5, 1 */
		/* 820D805Ch case  163:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D805Ch case  163:*/		return 0x820D8060;
		  /* 820D8060h */ case  164:  		/* li R4, 48 */
		/* 820D8060h case  164:*/		cpu::op::li<0>(regs,&regs.R4,0x30);
		/* 820D8060h case  164:*/		return 0x820D8064;
		  /* 820D8064h */ case  165:  		/* b 484 */
		/* 820D8064h case  165:*/		return 0x820D8248;
		/* 820D8064h case  165:*/		return 0x820D8068;
		  /* 820D8068h */ case  166:  		/* li R5, 1 */
		/* 820D8068h case  166:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8068h case  166:*/		return 0x820D806C;
		  /* 820D806Ch */ case  167:  		/* li R4, 49 */
		/* 820D806Ch case  167:*/		cpu::op::li<0>(regs,&regs.R4,0x31);
		/* 820D806Ch case  167:*/		return 0x820D8070;
		  /* 820D8070h */ case  168:  		/* b 472 */
		/* 820D8070h case  168:*/		return 0x820D8248;
		/* 820D8070h case  168:*/		return 0x820D8074;
		  /* 820D8074h */ case  169:  		/* li R5, 1 */
		/* 820D8074h case  169:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8074h case  169:*/		return 0x820D8078;
		  /* 820D8078h */ case  170:  		/* li R4, 50 */
		/* 820D8078h case  170:*/		cpu::op::li<0>(regs,&regs.R4,0x32);
		/* 820D8078h case  170:*/		return 0x820D807C;
		  /* 820D807Ch */ case  171:  		/* b 460 */
		/* 820D807Ch case  171:*/		return 0x820D8248;
		/* 820D807Ch case  171:*/		return 0x820D8080;
		  /* 820D8080h */ case  172:  		/* li R5, 2 */
		/* 820D8080h case  172:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D8080h case  172:*/		return 0x820D8084;
		  /* 820D8084h */ case  173:  		/* li R4, 51 */
		/* 820D8084h case  173:*/		cpu::op::li<0>(regs,&regs.R4,0x33);
		/* 820D8084h case  173:*/		return 0x820D8088;
		  /* 820D8088h */ case  174:  		/* b 448 */
		/* 820D8088h case  174:*/		return 0x820D8248;
		/* 820D8088h case  174:*/		return 0x820D808C;
		  /* 820D808Ch */ case  175:  		/* li R5, 1 */
		/* 820D808Ch case  175:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D808Ch case  175:*/		return 0x820D8090;
		  /* 820D8090h */ case  176:  		/* li R4, 52 */
		/* 820D8090h case  176:*/		cpu::op::li<0>(regs,&regs.R4,0x34);
		/* 820D8090h case  176:*/		return 0x820D8094;
		  /* 820D8094h */ case  177:  		/* b 436 */
		/* 820D8094h case  177:*/		return 0x820D8248;
		/* 820D8094h case  177:*/		return 0x820D8098;
		  /* 820D8098h */ case  178:  		/* li R5, 1 */
		/* 820D8098h case  178:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8098h case  178:*/		return 0x820D809C;
		  /* 820D809Ch */ case  179:  		/* li R4, 53 */
		/* 820D809Ch case  179:*/		cpu::op::li<0>(regs,&regs.R4,0x35);
		/* 820D809Ch case  179:*/		return 0x820D80A0;
		  /* 820D80A0h */ case  180:  		/* b 424 */
		/* 820D80A0h case  180:*/		return 0x820D8248;
		/* 820D80A0h case  180:*/		return 0x820D80A4;
		  /* 820D80A4h */ case  181:  		/* li R5, 1 */
		/* 820D80A4h case  181:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D80A4h case  181:*/		return 0x820D80A8;
		  /* 820D80A8h */ case  182:  		/* li R4, 54 */
		/* 820D80A8h case  182:*/		cpu::op::li<0>(regs,&regs.R4,0x36);
		/* 820D80A8h case  182:*/		return 0x820D80AC;
		  /* 820D80ACh */ case  183:  		/* b 412 */
		/* 820D80ACh case  183:*/		return 0x820D8248;
		/* 820D80ACh case  183:*/		return 0x820D80B0;
		  /* 820D80B0h */ case  184:  		/* li R5, 2 */
		/* 820D80B0h case  184:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D80B0h case  184:*/		return 0x820D80B4;
		  /* 820D80B4h */ case  185:  		/* li R4, 55 */
		/* 820D80B4h case  185:*/		cpu::op::li<0>(regs,&regs.R4,0x37);
		/* 820D80B4h case  185:*/		return 0x820D80B8;
		  /* 820D80B8h */ case  186:  		/* b 400 */
		/* 820D80B8h case  186:*/		return 0x820D8248;
		/* 820D80B8h case  186:*/		return 0x820D80BC;
		  /* 820D80BCh */ case  187:  		/* li R5, 1 */
		/* 820D80BCh case  187:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D80BCh case  187:*/		return 0x820D80C0;
		  /* 820D80C0h */ case  188:  		/* li R4, 56 */
		/* 820D80C0h case  188:*/		cpu::op::li<0>(regs,&regs.R4,0x38);
		/* 820D80C0h case  188:*/		return 0x820D80C4;
		  /* 820D80C4h */ case  189:  		/* b 388 */
		/* 820D80C4h case  189:*/		return 0x820D8248;
		/* 820D80C4h case  189:*/		return 0x820D80C8;
		  /* 820D80C8h */ case  190:  		/* li R5, 2 */
		/* 820D80C8h case  190:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D80C8h case  190:*/		return 0x820D80CC;
		  /* 820D80CCh */ case  191:  		/* li R4, 57 */
		/* 820D80CCh case  191:*/		cpu::op::li<0>(regs,&regs.R4,0x39);
		/* 820D80CCh case  191:*/		return 0x820D80D0;
		  /* 820D80D0h */ case  192:  		/* b 376 */
		/* 820D80D0h case  192:*/		return 0x820D8248;
		/* 820D80D0h case  192:*/		return 0x820D80D4;
		  /* 820D80D4h */ case  193:  		/* li R5, 1 */
		/* 820D80D4h case  193:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D80D4h case  193:*/		return 0x820D80D8;
		  /* 820D80D8h */ case  194:  		/* li R4, 60 */
		/* 820D80D8h case  194:*/		cpu::op::li<0>(regs,&regs.R4,0x3C);
		/* 820D80D8h case  194:*/		return 0x820D80DC;
		  /* 820D80DCh */ case  195:  		/* b 364 */
		/* 820D80DCh case  195:*/		return 0x820D8248;
		/* 820D80DCh case  195:*/		return 0x820D80E0;
		  /* 820D80E0h */ case  196:  		/* li R5, 2 */
		/* 820D80E0h case  196:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D80E0h case  196:*/		return 0x820D80E4;
		  /* 820D80E4h */ case  197:  		/* li R4, 61 */
		/* 820D80E4h case  197:*/		cpu::op::li<0>(regs,&regs.R4,0x3D);
		/* 820D80E4h case  197:*/		return 0x820D80E8;
		  /* 820D80E8h */ case  198:  		/* b 352 */
		/* 820D80E8h case  198:*/		return 0x820D8248;
		/* 820D80E8h case  198:*/		return 0x820D80EC;
		  /* 820D80ECh */ case  199:  		/* li R5, 1 */
		/* 820D80ECh case  199:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D80ECh case  199:*/		return 0x820D80F0;
		  /* 820D80F0h */ case  200:  		/* li R4, 62 */
		/* 820D80F0h case  200:*/		cpu::op::li<0>(regs,&regs.R4,0x3E);
		/* 820D80F0h case  200:*/		return 0x820D80F4;
		  /* 820D80F4h */ case  201:  		/* b 340 */
		/* 820D80F4h case  201:*/		return 0x820D8248;
		/* 820D80F4h case  201:*/		return 0x820D80F8;
		  /* 820D80F8h */ case  202:  		/* li R5, 2 */
		/* 820D80F8h case  202:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820D80F8h case  202:*/		return 0x820D80FC;
		  /* 820D80FCh */ case  203:  		/* li R4, 63 */
		/* 820D80FCh case  203:*/		cpu::op::li<0>(regs,&regs.R4,0x3F);
		/* 820D80FCh case  203:*/		return 0x820D8100;
		  /* 820D8100h */ case  204:  		/* b 328 */
		/* 820D8100h case  204:*/		return 0x820D8248;
		/* 820D8100h case  204:*/		return 0x820D8104;
		  /* 820D8104h */ case  205:  		/* li R5, 1 */
		/* 820D8104h case  205:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8104h case  205:*/		return 0x820D8108;
		  /* 820D8108h */ case  206:  		/* li R4, 64 */
		/* 820D8108h case  206:*/		cpu::op::li<0>(regs,&regs.R4,0x40);
		/* 820D8108h case  206:*/		return 0x820D810C;
		  /* 820D810Ch */ case  207:  		/* b 316 */
		/* 820D810Ch case  207:*/		return 0x820D8248;
		/* 820D810Ch case  207:*/		return 0x820D8110;
		  /* 820D8110h */ case  208:  		/* li R5, 1 */
		/* 820D8110h case  208:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8110h case  208:*/		return 0x820D8114;
		  /* 820D8114h */ case  209:  		/* li R4, 65 */
		/* 820D8114h case  209:*/		cpu::op::li<0>(regs,&regs.R4,0x41);
		/* 820D8114h case  209:*/		return 0x820D8118;
		  /* 820D8118h */ case  210:  		/* b 304 */
		/* 820D8118h case  210:*/		return 0x820D8248;
		/* 820D8118h case  210:*/		return 0x820D811C;
		  /* 820D811Ch */ case  211:  		/* li R4, 66 */
		/* 820D811Ch case  211:*/		cpu::op::li<0>(regs,&regs.R4,0x42);
		/* 820D811Ch case  211:*/		return 0x820D8120;
		  /* 820D8120h */ case  212:  		/* b 292 */
		/* 820D8120h case  212:*/		return 0x820D8244;
		/* 820D8120h case  212:*/		return 0x820D8124;
		  /* 820D8124h */ case  213:  		/* li R4, 67 */
		/* 820D8124h case  213:*/		cpu::op::li<0>(regs,&regs.R4,0x43);
		/* 820D8124h case  213:*/		return 0x820D8128;
		  /* 820D8128h */ case  214:  		/* b 284 */
		/* 820D8128h case  214:*/		return 0x820D8244;
		/* 820D8128h case  214:*/		return 0x820D812C;
		  /* 820D812Ch */ case  215:  		/* li R5, 1 */
		/* 820D812Ch case  215:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D812Ch case  215:*/		return 0x820D8130;
		  /* 820D8130h */ case  216:  		/* li R4, 68 */
		/* 820D8130h case  216:*/		cpu::op::li<0>(regs,&regs.R4,0x44);
		/* 820D8130h case  216:*/		return 0x820D8134;
		  /* 820D8134h */ case  217:  		/* b 276 */
		/* 820D8134h case  217:*/		return 0x820D8248;
		/* 820D8134h case  217:*/		return 0x820D8138;
		  /* 820D8138h */ case  218:  		/* li R5, 1 */
		/* 820D8138h case  218:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8138h case  218:*/		return 0x820D813C;
		  /* 820D813Ch */ case  219:  		/* li R4, 69 */
		/* 820D813Ch case  219:*/		cpu::op::li<0>(regs,&regs.R4,0x45);
		/* 820D813Ch case  219:*/		return 0x820D8140;
		  /* 820D8140h */ case  220:  		/* b 264 */
		/* 820D8140h case  220:*/		return 0x820D8248;
		/* 820D8140h case  220:*/		return 0x820D8144;
		  /* 820D8144h */ case  221:  		/* li R5, 1 */
		/* 820D8144h case  221:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8144h case  221:*/		return 0x820D8148;
		  /* 820D8148h */ case  222:  		/* li R4, 70 */
		/* 820D8148h case  222:*/		cpu::op::li<0>(regs,&regs.R4,0x46);
		/* 820D8148h case  222:*/		return 0x820D814C;
		  /* 820D814Ch */ case  223:  		/* b 252 */
		/* 820D814Ch case  223:*/		return 0x820D8248;
		/* 820D814Ch case  223:*/		return 0x820D8150;
		  /* 820D8150h */ case  224:  		/* li R5, 1 */
		/* 820D8150h case  224:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8150h case  224:*/		return 0x820D8154;
		  /* 820D8154h */ case  225:  		/* li R4, 71 */
		/* 820D8154h case  225:*/		cpu::op::li<0>(regs,&regs.R4,0x47);
		/* 820D8154h case  225:*/		return 0x820D8158;
		  /* 820D8158h */ case  226:  		/* b 240 */
		/* 820D8158h case  226:*/		return 0x820D8248;
		/* 820D8158h case  226:*/		return 0x820D815C;
		  /* 820D815Ch */ case  227:  		/* li R5, 1 */
		/* 820D815Ch case  227:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D815Ch case  227:*/		return 0x820D8160;
		  /* 820D8160h */ case  228:  		/* li R4, 72 */
		/* 820D8160h case  228:*/		cpu::op::li<0>(regs,&regs.R4,0x48);
		/* 820D8160h case  228:*/		return 0x820D8164;
		  /* 820D8164h */ case  229:  		/* b 228 */
		/* 820D8164h case  229:*/		return 0x820D8248;
		/* 820D8164h case  229:*/		return 0x820D8168;
		  /* 820D8168h */ case  230:  		/* li R5, 1 */
		/* 820D8168h case  230:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8168h case  230:*/		return 0x820D816C;
		  /* 820D816Ch */ case  231:  		/* li R4, 73 */
		/* 820D816Ch case  231:*/		cpu::op::li<0>(regs,&regs.R4,0x49);
		/* 820D816Ch case  231:*/		return 0x820D8170;
		  /* 820D8170h */ case  232:  		/* b 216 */
		/* 820D8170h case  232:*/		return 0x820D8248;
		/* 820D8170h case  232:*/		return 0x820D8174;
		  /* 820D8174h */ case  233:  		/* li R5, 1 */
		/* 820D8174h case  233:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8174h case  233:*/		return 0x820D8178;
		  /* 820D8178h */ case  234:  		/* li R4, 74 */
		/* 820D8178h case  234:*/		cpu::op::li<0>(regs,&regs.R4,0x4A);
		/* 820D8178h case  234:*/		return 0x820D817C;
		  /* 820D817Ch */ case  235:  		/* b 204 */
		/* 820D817Ch case  235:*/		return 0x820D8248;
		/* 820D817Ch case  235:*/		return 0x820D8180;
		  /* 820D8180h */ case  236:  		/* li R5, 1 */
		/* 820D8180h case  236:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D8180h case  236:*/		return 0x820D8184;
		  /* 820D8184h */ case  237:  		/* li R4, 75 */
		/* 820D8184h case  237:*/		cpu::op::li<0>(regs,&regs.R4,0x4B);
		/* 820D8184h case  237:*/		return 0x820D8188;
		  /* 820D8188h */ case  238:  		/* b 192 */
		/* 820D8188h case  238:*/		return 0x820D8248;
		/* 820D8188h case  238:*/		return 0x820D818C;
		  /* 820D818Ch */ case  239:  		/* li R5, 1 */
		/* 820D818Ch case  239:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820D818Ch case  239:*/		return 0x820D8190;
		  /* 820D8190h */ case  240:  		/* li R4, 76 */
		/* 820D8190h case  240:*/		cpu::op::li<0>(regs,&regs.R4,0x4C);
		/* 820D8190h case  240:*/		return 0x820D8194;
		  /* 820D8194h */ case  241:  		/* b 180 */
		/* 820D8194h case  241:*/		return 0x820D8248;
		/* 820D8194h case  241:*/		return 0x820D8198;
		  /* 820D8198h */ case  242:  		/* li R4, 77 */
		/* 820D8198h case  242:*/		cpu::op::li<0>(regs,&regs.R4,0x4D);
		/* 820D8198h case  242:*/		return 0x820D819C;
		  /* 820D819Ch */ case  243:  		/* b 168 */
		/* 820D819Ch case  243:*/		return 0x820D8244;
		/* 820D819Ch case  243:*/		return 0x820D81A0;
		  /* 820D81A0h */ case  244:  		/* li R4, 78 */
		/* 820D81A0h case  244:*/		cpu::op::li<0>(regs,&regs.R4,0x4E);
		/* 820D81A0h case  244:*/		return 0x820D81A4;
		  /* 820D81A4h */ case  245:  		/* b 160 */
		/* 820D81A4h case  245:*/		return 0x820D8244;
		/* 820D81A4h case  245:*/		return 0x820D81A8;
		  /* 820D81A8h */ case  246:  		/* li R4, 79 */
		/* 820D81A8h case  246:*/		cpu::op::li<0>(regs,&regs.R4,0x4F);
		/* 820D81A8h case  246:*/		return 0x820D81AC;
		  /* 820D81ACh */ case  247:  		/* b 152 */
		/* 820D81ACh case  247:*/		return 0x820D8244;
		/* 820D81ACh case  247:*/		return 0x820D81B0;
		  /* 820D81B0h */ case  248:  		/* li R4, 80 */
		/* 820D81B0h case  248:*/		cpu::op::li<0>(regs,&regs.R4,0x50);
		/* 820D81B0h case  248:*/		return 0x820D81B4;
		  /* 820D81B4h */ case  249:  		/* b 144 */
		/* 820D81B4h case  249:*/		return 0x820D8244;
		/* 820D81B4h case  249:*/		return 0x820D81B8;
		  /* 820D81B8h */ case  250:  		/* li R4, 81 */
		/* 820D81B8h case  250:*/		cpu::op::li<0>(regs,&regs.R4,0x51);
		/* 820D81B8h case  250:*/		return 0x820D81BC;
		  /* 820D81BCh */ case  251:  		/* b 136 */
		/* 820D81BCh case  251:*/		return 0x820D8244;
		/* 820D81BCh case  251:*/		return 0x820D81C0;
		  /* 820D81C0h */ case  252:  		/* li R4, 82 */
		/* 820D81C0h case  252:*/		cpu::op::li<0>(regs,&regs.R4,0x52);
		/* 820D81C0h case  252:*/		return 0x820D81C4;
		  /* 820D81C4h */ case  253:  		/* b 128 */
		/* 820D81C4h case  253:*/		return 0x820D8244;
		/* 820D81C4h case  253:*/		return 0x820D81C8;
		  /* 820D81C8h */ case  254:  		/* li R4, 83 */
		/* 820D81C8h case  254:*/		cpu::op::li<0>(regs,&regs.R4,0x53);
		/* 820D81C8h case  254:*/		return 0x820D81CC;
		  /* 820D81CCh */ case  255:  		/* b 120 */
		/* 820D81CCh case  255:*/		return 0x820D8244;
		/* 820D81CCh case  255:*/		return 0x820D81D0;
		  /* 820D81D0h */ case  256:  		/* li R4, 84 */
		/* 820D81D0h case  256:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 820D81D0h case  256:*/		return 0x820D81D4;
		  /* 820D81D4h */ case  257:  		/* b 112 */
		/* 820D81D4h case  257:*/		return 0x820D8244;
		/* 820D81D4h case  257:*/		return 0x820D81D8;
		  /* 820D81D8h */ case  258:  		/* li R4, 85 */
		/* 820D81D8h case  258:*/		cpu::op::li<0>(regs,&regs.R4,0x55);
		/* 820D81D8h case  258:*/		return 0x820D81DC;
		  /* 820D81DCh */ case  259:  		/* b 104 */
		/* 820D81DCh case  259:*/		return 0x820D8244;
		/* 820D81DCh case  259:*/		return 0x820D81E0;
		  /* 820D81E0h */ case  260:  		/* li R4, 87 */
		/* 820D81E0h case  260:*/		cpu::op::li<0>(regs,&regs.R4,0x57);
		/* 820D81E0h case  260:*/		return 0x820D81E4;
		  /* 820D81E4h */ case  261:  		/* b 96 */
		/* 820D81E4h case  261:*/		return 0x820D8244;
		/* 820D81E4h case  261:*/		return 0x820D81E8;
		  /* 820D81E8h */ case  262:  		/* li R4, 89 */
		/* 820D81E8h case  262:*/		cpu::op::li<0>(regs,&regs.R4,0x59);
		/* 820D81E8h case  262:*/		return 0x820D81EC;
		  /* 820D81ECh */ case  263:  		/* b 88 */
		/* 820D81ECh case  263:*/		return 0x820D8244;
		/* 820D81ECh case  263:*/		return 0x820D81F0;
		  /* 820D81F0h */ case  264:  		/* li R4, 91 */
		/* 820D81F0h case  264:*/		cpu::op::li<0>(regs,&regs.R4,0x5B);
		/* 820D81F0h case  264:*/		return 0x820D81F4;
		  /* 820D81F4h */ case  265:  		/* b 80 */
		/* 820D81F4h case  265:*/		return 0x820D8244;
		/* 820D81F4h case  265:*/		return 0x820D81F8;
		  /* 820D81F8h */ case  266:  		/* li R4, 86 */
		/* 820D81F8h case  266:*/		cpu::op::li<0>(regs,&regs.R4,0x56);
		/* 820D81F8h case  266:*/		return 0x820D81FC;
		  /* 820D81FCh */ case  267:  		/* b 72 */
		/* 820D81FCh case  267:*/		return 0x820D8244;
		/* 820D81FCh case  267:*/		return 0x820D8200;
		  /* 820D8200h */ case  268:  		/* li R4, 88 */
		/* 820D8200h case  268:*/		cpu::op::li<0>(regs,&regs.R4,0x58);
		/* 820D8200h case  268:*/		return 0x820D8204;
		  /* 820D8204h */ case  269:  		/* b 64 */
		/* 820D8204h case  269:*/		return 0x820D8244;
		/* 820D8204h case  269:*/		return 0x820D8208;
		  /* 820D8208h */ case  270:  		/* li R4, 92 */
		/* 820D8208h case  270:*/		cpu::op::li<0>(regs,&regs.R4,0x5C);
		/* 820D8208h case  270:*/		return 0x820D820C;
		  /* 820D820Ch */ case  271:  		/* b 56 */
		/* 820D820Ch case  271:*/		return 0x820D8244;
		/* 820D820Ch case  271:*/		return 0x820D8210;
		  /* 820D8210h */ case  272:  		/* li R4, 93 */
		/* 820D8210h case  272:*/		cpu::op::li<0>(regs,&regs.R4,0x5D);
		/* 820D8210h case  272:*/		return 0x820D8214;
		  /* 820D8214h */ case  273:  		/* b 48 */
		/* 820D8214h case  273:*/		return 0x820D8244;
		/* 820D8214h case  273:*/		return 0x820D8218;
		  /* 820D8218h */ case  274:  		/* li R4, 94 */
		/* 820D8218h case  274:*/		cpu::op::li<0>(regs,&regs.R4,0x5E);
		/* 820D8218h case  274:*/		return 0x820D821C;
		  /* 820D821Ch */ case  275:  		/* b 40 */
		/* 820D821Ch case  275:*/		return 0x820D8244;
		/* 820D821Ch case  275:*/		return 0x820D8220;
		  /* 820D8220h */ case  276:  		/* li R4, 95 */
		/* 820D8220h case  276:*/		cpu::op::li<0>(regs,&regs.R4,0x5F);
		/* 820D8220h case  276:*/		return 0x820D8224;
		  /* 820D8224h */ case  277:  		/* b 32 */
		/* 820D8224h case  277:*/		return 0x820D8244;
		/* 820D8224h case  277:*/		return 0x820D8228;
		  /* 820D8228h */ case  278:  		/* li R4, 96 */
		/* 820D8228h case  278:*/		cpu::op::li<0>(regs,&regs.R4,0x60);
		/* 820D8228h case  278:*/		return 0x820D822C;
		  /* 820D822Ch */ case  279:  		/* b 24 */
		/* 820D822Ch case  279:*/		return 0x820D8244;
		/* 820D822Ch case  279:*/		return 0x820D8230;
		  /* 820D8230h */ case  280:  		/* li R4, 97 */
		/* 820D8230h case  280:*/		cpu::op::li<0>(regs,&regs.R4,0x61);
		/* 820D8230h case  280:*/		return 0x820D8234;
		  /* 820D8234h */ case  281:  		/* b 16 */
		/* 820D8234h case  281:*/		return 0x820D8244;
		/* 820D8234h case  281:*/		return 0x820D8238;
		  /* 820D8238h */ case  282:  		/* li R4, 98 */
		/* 820D8238h case  282:*/		cpu::op::li<0>(regs,&regs.R4,0x62);
		/* 820D8238h case  282:*/		return 0x820D823C;
		  /* 820D823Ch */ case  283:  		/* b 8 */
		/* 820D823Ch case  283:*/		return 0x820D8244;
		/* 820D823Ch case  283:*/		return 0x820D8240;
		  /* 820D8240h */ case  284:  		/* li R4, 99 */
		/* 820D8240h case  284:*/		cpu::op::li<0>(regs,&regs.R4,0x63);
		/* 820D8240h case  284:*/		return 0x820D8244;
	}
	return 0x820D8244;
} // Block from 820D7DD0h-820D8244h (285 instructions)

//////////////////////////////////////////////////////
// Block at 820D8244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8244);
		  /* 820D8244h */ case    0:  		/* li R5, 0 */
		/* 820D8244h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D8244h case    0:*/		return 0x820D8248;
	}
	return 0x820D8248;
} // Block from 820D8244h-820D8248h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D8248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8248);
		  /* 820D8248h */ case    0:  		/* lwz R3, <#[R31 + 3032]> */
		/* 820D8248h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000BD8) );
		/* 820D8248h case    0:*/		return 0x820D824C;
		  /* 820D824Ch */ case    1:  		/* bl -3812 */
		/* 820D824Ch case    1:*/		regs.LR = 0x820D8250; return 0x820D7368;
		/* 820D824Ch case    1:*/		return 0x820D8250;
	}
	return 0x820D8250;
} // Block from 820D8248h-820D8250h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D8250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8250);
		  /* 820D8250h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 820D8250h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D8250h case    0:*/		return 0x820D8254;
		  /* 820D8254h */ case    1:  		/* rlwinm R10, R29, 1, 0, 30 */
		/* 820D8254h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R29);
		/* 820D8254h case    1:*/		return 0x820D8258;
		  /* 820D8258h */ case    2:  		/* lwz R9, <#[R31 + 20]> */
		/* 820D8258h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820D8258h case    2:*/		return 0x820D825C;
		  /* 820D825Ch */ case    3:  		/* subf R11, R10, R11 */
		/* 820D825Ch case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820D825Ch case    3:*/		return 0x820D8260;
		  /* 820D8260h */ case    4:  		/* subf R10, R28, R9 */
		/* 820D8260h case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R28,regs.R9);
		/* 820D8260h case    4:*/		return 0x820D8264;
		  /* 820D8264h */ case    5:  		/* stw R11, <#[R31 + 16]> */
		/* 820D8264h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D8264h case    5:*/		return 0x820D8268;
		  /* 820D8268h */ case    6:  		/* lha R11, <#[R11]> */
		/* 820D8268h case    6:*/		cpu::mem::load16a( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820D8268h case    6:*/		return 0x820D826C;
		  /* 820D826Ch */ case    7:  		/* stw R10, <#[R31 + 20]> */
		/* 820D826Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820D826Ch case    7:*/		return 0x820D8270;
		  /* 820D8270h */ case    8:  		/* lhax R10, <#[R30 + R27]> */
		/* 820D8270h case    8:*/		cpu::mem::load16a( regs, &regs.R10, (uint32)(regs.R30 + regs.R27 + 0x00000000) );
		/* 820D8270h case    8:*/		return 0x820D8274;
		  /* 820D8274h */ case    9:  		/* cmpwi CR0, R11, 0 */
		/* 820D8274h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 820D8274h case    9:*/		return 0x820D8278;
		  /* 820D8278h */ case   10:  		/* bc 4, CR0_EQ, 112 */
		/* 820D8278h case   10:*/		if ( !regs.CR[0].eq ) { return 0x820D82E8;  }
		/* 820D8278h case   10:*/		return 0x820D827C;
		  /* 820D827Ch */ case   11:  		/* cmpwi CR6, R10, 0 */
		/* 820D827Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820D827Ch case   11:*/		return 0x820D8280;
		  /* 820D8280h */ case   12:  		/* bc 4, CR6_EQ, 104 */
		/* 820D8280h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820D82E8;  }
		/* 820D8280h case   12:*/		return 0x820D8284;
		  /* 820D8284h */ case   13:  		/* lwz R11, <#[R31 + 16]> */
		/* 820D8284h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D8284h case   13:*/		return 0x820D8288;
		  /* 820D8288h */ case   14:  		/* li R10, 25 */
		/* 820D8288h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x19);
		/* 820D8288h case   14:*/		return 0x820D828C;
		  /* 820D828Ch */ case   15:  		/* li R30, 25 */
		/* 820D828Ch case   15:*/		cpu::op::li<0>(regs,&regs.R30,0x19);
		/* 820D828Ch case   15:*/		return 0x820D8290;
		  /* 820D8290h */ case   16:  		/* addi R11, R11, 2 */
		/* 820D8290h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 820D8290h case   16:*/		return 0x820D8294;
		  /* 820D8294h */ case   17:  		/* stw R11, <#[R31 + 16]> */
		/* 820D8294h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D8294h case   17:*/		return 0x820D8298;
		  /* 820D8298h */ case   18:  		/* sth R10, <#[R11]> */
		/* 820D8298h case   18:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820D8298h case   18:*/		return 0x820D829C;
		  /* 820D829Ch */ case   19:  		/* lwz R10, <#[R31 + 24]> */
		/* 820D829Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820D829Ch case   19:*/		return 0x820D82A0;
		  /* 820D82A0h */ case   20:  		/* lwz R11, <#[R31 + 20]> */
		/* 820D82A0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820D82A0h case   20:*/		return 0x820D82A4;
		  /* 820D82A4h */ case   21:  		/* addi R11, R11, 4 */
		/* 820D82A4h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820D82A4h case   21:*/		return 0x820D82A8;
		  /* 820D82A8h */ case   22:  		/* stw R11, <#[R31 + 20]> */
		/* 820D82A8h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820D82A8h case   22:*/		return 0x820D82AC;
		  /* 820D82ACh */ case   23:  		/* stw R10, <#[R11]> */
		/* 820D82ACh case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820D82ACh case   23:*/		return 0x820D82B0;
		  /* 820D82B0h */ case   24:  		/* lwz R11, <#[R31 + 12]> */
		/* 820D82B0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D82B0h case   24:*/		return 0x820D82B4;
		  /* 820D82B4h */ case   25:  		/* cmpwi CR6, R11, 0 */
		/* 820D82B4h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D82B4h case   25:*/		return 0x820D82B8;
		  /* 820D82B8h */ case   26:  		/* bc 4, CR6_LT, 28 */
		/* 820D82B8h case   26:*/		if ( !regs.CR[6].lt ) { return 0x820D82D4;  }
		/* 820D82B8h case   26:*/		return 0x820D82BC;
		  /* 820D82BCh */ case   27:  		/* lwz R3, <#[R31 + 3032]> */
		/* 820D82BCh case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000BD8) );
		/* 820D82BCh case   27:*/		return 0x820D82C0;
		  /* 820D82C0h */ case   28:  		/* bl -14208 */
		/* 820D82C0h case   28:*/		regs.LR = 0x820D82C4; return 0x820D4B40;
		/* 820D82C0h case   28:*/		return 0x820D82C4;
		  /* 820D82C4h */ case   29:  		/* stw R3, <#[R31 + 12]> */
		/* 820D82C4h case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D82C4h case   29:*/		return 0x820D82C8;
		  /* 820D82C8h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 820D82C8h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D82C8h case   30:*/		return 0x820D82CC;
		  /* 820D82CCh */ case   31:  		/* bc 4, CR0_LT, 8 */
		/* 820D82CCh case   31:*/		if ( !regs.CR[0].lt ) { return 0x820D82D4;  }
		/* 820D82CCh case   31:*/		return 0x820D82D0;
		  /* 820D82D0h */ case   32:  		/* stw R25, <#[R31 + 12]> */
		/* 820D82D0h case   32:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D82D0h case   32:*/		return 0x820D82D4;
	}
	return 0x820D82D4;
} // Block from 820D8250h-820D82D4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820D82D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D82D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D82D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D82D4);
		  /* 820D82D4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 820D82D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D82D4h case    0:*/		return 0x820D82D8;
		  /* 820D82D8h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D82D8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D82D8h case    1:*/		return 0x820D82DC;
		  /* 820D82DCh */ case    2:  		/* bc 4, CR6_EQ, -1552 */
		/* 820D82DCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x820D7CCC;  }
		/* 820D82DCh case    2:*/		return 0x820D82E0;
		  /* 820D82E0h */ case    3:  		/* li R3, 0 */
		/* 820D82E0h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D82E0h case    3:*/		return 0x820D82E4;
		  /* 820D82E4h */ case    4:  		/* b 364 */
		/* 820D82E4h case    4:*/		return 0x820D8450;
		/* 820D82E4h case    4:*/		return 0x820D82E8;
	}
	return 0x820D82E8;
} // Block from 820D82D4h-820D82E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D82E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D82E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D82E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D82E8);
		  /* 820D82E8h */ case    0:  		/* rlwinm R9, R10, 1, 0, 30 */
		/* 820D82E8h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 820D82E8h case    0:*/		return 0x820D82EC;
		  /* 820D82ECh */ case    1:  		/* addi R10, R27, 1648 */
		/* 820D82ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x670);
		/* 820D82ECh case    1:*/		return 0x820D82F0;
		  /* 820D82F0h */ case    2:  		/* lhax R10, <#[R9 + R10]> */
		/* 820D82F0h case    2:*/		cpu::mem::load16a( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820D82F0h case    2:*/		return 0x820D82F4;
		  /* 820D82F4h */ case    3:  		/* cmpwi CR0, R10, 0 */
		/* 820D82F4h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R10,0x00000000);
		/* 820D82F4h case    3:*/		return 0x820D82F8;
		  /* 820D82F8h */ case    4:  		/* bc 12, CR0_EQ, 52 */
		/* 820D82F8h case    4:*/		if ( regs.CR[0].eq ) { return 0x820D832C;  }
		/* 820D82F8h case    4:*/		return 0x820D82FC;
		  /* 820D82FCh */ case    5:  		/* add. R10, R10, R11 */
		/* 820D82FCh case    5:*/		cpu::op::add<1>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820D82FCh case    5:*/		return 0x820D8300;
		  /* 820D8300h */ case    6:  		/* bc 12, CR0_LT, 44 */
		/* 820D8300h case    6:*/		if ( regs.CR[0].lt ) { return 0x820D832C;  }
		/* 820D8300h case    6:*/		return 0x820D8304;
		  /* 820D8304h */ case    7:  		/* cmpwi CR6, R10, 917 */
		/* 820D8304h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000395);
		/* 820D8304h case    7:*/		return 0x820D8308;
		  /* 820D8308h */ case    8:  		/* bc 12, CR6_GT, 36 */
		/* 820D8308h case    8:*/		if ( regs.CR[6].gt ) { return 0x820D832C;  }
		/* 820D8308h case    8:*/		return 0x820D830C;
		  /* 820D830Ch */ case    9:  		/* addi R8, R27, 3584 */
		/* 820D830Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R27,0xE00);
		/* 820D830Ch case    9:*/		return 0x820D8310;
		  /* 820D8310h */ case   10:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 820D8310h case   10:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 820D8310h case   10:*/		return 0x820D8314;
		  /* 820D8314h */ case   11:  		/* lhax R8, <#[R10 + R8]> */
		/* 820D8314h case   11:*/		cpu::mem::load16a( regs, &regs.R8, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820D8314h case   11:*/		return 0x820D8318;
		  /* 820D8318h */ case   12:  		/* cmpw CR6, R8, R11 */
		/* 820D8318h case   12:*/		cpu::op::cmpw<6>(regs,regs.R8,regs.R11);
		/* 820D8318h case   12:*/		return 0x820D831C;
		  /* 820D831Ch */ case   13:  		/* bc 4, CR6_EQ, 16 */
		/* 820D831Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x820D832C;  }
		/* 820D831Ch case   13:*/		return 0x820D8320;
		  /* 820D8320h */ case   14:  		/* addi R11, R27, 1744 */
		/* 820D8320h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x6D0);
		/* 820D8320h case   14:*/		return 0x820D8324;
		  /* 820D8324h */ case   15:  		/* lhax R30, <#[R10 + R11]> */
		/* 820D8324h case   15:*/		cpu::mem::load16a( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820D8324h case   15:*/		return 0x820D8328;
		  /* 820D8328h */ case   16:  		/* b 12 */
		/* 820D8328h case   16:*/		return 0x820D8334;
		/* 820D8328h case   16:*/		return 0x820D832C;
	}
	return 0x820D832C;
} // Block from 820D82E8h-820D832Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 820D832Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D832C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D832C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D832C);
		  /* 820D832Ch */ case    0:  		/* addi R11, R27, 784 */
		/* 820D832Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x310);
		/* 820D832Ch case    0:*/		return 0x820D8330;
		  /* 820D8330h */ case    1:  		/* lhax R30, <#[R9 + R11]> */
		/* 820D8330h case    1:*/		cpu::mem::load16a( regs, &regs.R30, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820D8330h case    1:*/		return 0x820D8334;
	}
	return 0x820D8334;
} // Block from 820D832Ch-820D8334h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D8334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8334);
		  /* 820D8334h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 820D8334h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D8334h case    0:*/		return 0x820D8338;
		  /* 820D8338h */ case    1:  		/* addi R10, R31, 1030 */
		/* 820D8338h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x406);
		/* 820D8338h case    1:*/		return 0x820D833C;
		  /* 820D833Ch */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 820D833Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D833Ch case    2:*/		return 0x820D8340;
		  /* 820D8340h */ case    3:  		/* bc 4, CR6_LT, 252 */
		/* 820D8340h case    3:*/		if ( !regs.CR[6].lt ) { return 0x820D843C;  }
		/* 820D8340h case    3:*/		return 0x820D8344;
		  /* 820D8344h */ case    4:  		/* addi R11, R11, 2 */
		/* 820D8344h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 820D8344h case    4:*/		return 0x820D8348;
		  /* 820D8348h */ case    5:  		/* stw R11, <#[R31 + 16]> */
		/* 820D8348h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D8348h case    5:*/		return 0x820D834C;
		  /* 820D834Ch */ case    6:  		/* sth R30, <#[R11]> */
		/* 820D834Ch case    6:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 820D834Ch case    6:*/		return 0x820D8350;
		  /* 820D8350h */ case    7:  		/* lwz R10, <#[R31 + 24]> */
		/* 820D8350h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820D8350h case    7:*/		return 0x820D8354;
		  /* 820D8354h */ case    8:  		/* lwz R11, <#[R31 + 20]> */
		/* 820D8354h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820D8354h case    8:*/		return 0x820D8358;
		  /* 820D8358h */ case    9:  		/* addi R11, R11, 4 */
		/* 820D8358h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820D8358h case    9:*/		return 0x820D835C;
		  /* 820D835Ch */ case   10:  		/* stw R11, <#[R31 + 20]> */
		/* 820D835Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820D835Ch case   10:*/		return 0x820D8360;
		  /* 820D8360h */ case   11:  		/* stw R10, <#[R11]> */
		/* 820D8360h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820D8360h case   11:*/		return 0x820D8364;
		  /* 820D8364h */ case   12:  		/* b -1688 */
		/* 820D8364h case   12:*/		return 0x820D7CCC;
		/* 820D8364h case   12:*/		return 0x820D8368;
	}
	return 0x820D8368;
} // Block from 820D8334h-820D8368h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D8368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8368);
		  /* 820D8368h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820D8368h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820D8368h case    0:*/		return 0x820D836C;
		  /* 820D836Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D836Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D836Ch case    1:*/		return 0x820D8370;
		  /* 820D8370h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 820D8370h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820D838C;  }
		/* 820D8370h case    2:*/		return 0x820D8374;
		  /* 820D8374h */ case    3:  		/* mr R4, R23 */
		/* 820D8374h case    3:*/		regs.R4 = regs.R23;
		/* 820D8374h case    3:*/		return 0x820D8378;
		  /* 820D8378h */ case    4:  		/* mr R3, R31 */
		/* 820D8378h case    4:*/		regs.R3 = regs.R31;
		/* 820D8378h case    4:*/		return 0x820D837C;
		  /* 820D837Ch */ case    5:  		/* bl -31460 */
		/* 820D837Ch case    5:*/		regs.LR = 0x820D8380; return 0x820D0898;
		/* 820D837Ch case    5:*/		return 0x820D8380;
		  /* 820D8380h */ case    6:  		/* lwz R11, <#[R31 + 4]> */
		/* 820D8380h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 820D8380h case    6:*/		return 0x820D8384;
		  /* 820D8384h */ case    7:  		/* addi R11, R11, 1 */
		/* 820D8384h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820D8384h case    7:*/		return 0x820D8388;
		  /* 820D8388h */ case    8:  		/* stw R11, <#[R31 + 4]> */
		/* 820D8388h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 820D8388h case    8:*/		return 0x820D838C;
	}
	return 0x820D838C;
} // Block from 820D8368h-820D838Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D838Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D838C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D838C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D838C);
		  /* 820D838Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820D838Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820D838Ch case    0:*/		return 0x820D8390;
		  /* 820D8390h */ case    1:  		/* cmpwi CR6, R11, 3 */
		/* 820D8390h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 820D8390h case    1:*/		return 0x820D8394;
		  /* 820D8394h */ case    2:  		/* bc 4, CR6_LT, 148 */
		/* 820D8394h case    2:*/		if ( !regs.CR[6].lt ) { return 0x820D8428;  }
		/* 820D8394h case    2:*/		return 0x820D8398;
		  /* 820D8398h */ case    3:  		/* li R11, 3 */
		/* 820D8398h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 820D8398h case    3:*/		return 0x820D839C;
		  /* 820D839Ch */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 820D839Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820D839Ch case    4:*/		return 0x820D83A0;
		  /* 820D83A0h */ case    5:  		/* lwz R11, <#[R31 + 16]> */
		/* 820D83A0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D83A0h case    5:*/		return 0x820D83A4;
		  /* 820D83A4h */ case    6:  		/* addi R10, R27, 880 */
		/* 820D83A4h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x370);
		/* 820D83A4h case    6:*/		return 0x820D83A8;
		  /* 820D83A8h */ case    7:  		/* lha R9, <#[R11]> */
		/* 820D83A8h case    7:*/		cpu::mem::load16a( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820D83A8h case    7:*/		return 0x820D83AC;
		  /* 820D83ACh */ case    8:  		/* rlwinm R9, R9, 1, 0, 30 */
		/* 820D83ACh case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R9);
		/* 820D83ACh case    8:*/		return 0x820D83B0;
		  /* 820D83B0h */ case    9:  		/* lhax R10, <#[R9 + R10]> */
		/* 820D83B0h case    9:*/		cpu::mem::load16a( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820D83B0h case    9:*/		return 0x820D83B4;
		  /* 820D83B4h */ case   10:  		/* cmpwi CR0, R10, 0 */
		/* 820D83B4h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R10,0x00000000);
		/* 820D83B4h case   10:*/		return 0x820D83B8;
		  /* 820D83B8h */ case   11:  		/* bc 12, CR0_EQ, 40 */
		/* 820D83B8h case   11:*/		if ( regs.CR[0].eq ) { return 0x820D83E0;  }
		/* 820D83B8h case   11:*/		return 0x820D83BC;
		  /* 820D83BCh */ case   12:  		/* addic. R10, R10, 256 */
		/* 820D83BCh case   12:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R10,0x100);
		/* 820D83BCh case   12:*/		return 0x820D83C0;
		  /* 820D83C0h */ case   13:  		/* bc 12, CR0_LT, 32 */
		/* 820D83C0h case   13:*/		if ( regs.CR[0].lt ) { return 0x820D83E0;  }
		/* 820D83C0h case   13:*/		return 0x820D83C4;
		  /* 820D83C4h */ case   14:  		/* cmpwi CR6, R10, 917 */
		/* 820D83C4h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000395);
		/* 820D83C4h case   14:*/		return 0x820D83C8;
		  /* 820D83C8h */ case   15:  		/* bc 12, CR6_GT, 24 */
		/* 820D83C8h case   15:*/		if ( regs.CR[6].gt ) { return 0x820D83E0;  }
		/* 820D83C8h case   15:*/		return 0x820D83CC;
		  /* 820D83CCh */ case   16:  		/* addi R9, R27, 3584 */
		/* 820D83CCh case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0xE00);
		/* 820D83CCh case   16:*/		return 0x820D83D0;
		  /* 820D83D0h */ case   17:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 820D83D0h case   17:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 820D83D0h case   17:*/		return 0x820D83D4;
		  /* 820D83D4h */ case   18:  		/* lhzx R9, <#[R10 + R9]> */
		/* 820D83D4h case   18:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820D83D4h case   18:*/		return 0x820D83D8;
		  /* 820D83D8h */ case   19:  		/* cmplwi CR6, R9, 256 */
		/* 820D83D8h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000100);
		/* 820D83D8h case   19:*/		return 0x820D83DC;
		  /* 820D83DCh */ case   20:  		/* bc 12, CR6_EQ, 36 */
		/* 820D83DCh case   20:*/		if ( regs.CR[6].eq ) { return 0x820D8400;  }
		/* 820D83DCh case   20:*/		return 0x820D83E0;
	}
	return 0x820D83E0;
} // Block from 820D838Ch-820D83E0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820D83E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D83E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D83E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D83E0);
		  /* 820D83E0h */ case    0:  		/* cmplw CR6, R11, R24 */
		/* 820D83E0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 820D83E0h case    0:*/		return 0x820D83E4;
		  /* 820D83E4h */ case    1:  		/* bc 4, CR6_GT, 104 */
		/* 820D83E4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x820D844C;  }
		/* 820D83E4h case    1:*/		return 0x820D83E8;
		  /* 820D83E8h */ case    2:  		/* lwz R10, <#[R31 + 20]> */
		/* 820D83E8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820D83E8h case    2:*/		return 0x820D83EC;
		  /* 820D83ECh */ case    3:  		/* addi R11, R11, -2 */
		/* 820D83ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 820D83ECh case    3:*/		return 0x820D83F0;
		  /* 820D83F0h */ case    4:  		/* addi R10, R10, -4 */
		/* 820D83F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 820D83F0h case    4:*/		return 0x820D83F4;
		  /* 820D83F4h */ case    5:  		/* stw R11, <#[R31 + 16]> */
		/* 820D83F4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D83F4h case    5:*/		return 0x820D83F8;
		  /* 820D83F8h */ case    6:  		/* stw R10, <#[R31 + 20]> */
		/* 820D83F8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820D83F8h case    6:*/		return 0x820D83FC;
		  /* 820D83FCh */ case    7:  		/* b -92 */
		/* 820D83FCh case    7:*/		return 0x820D83A0;
		/* 820D83FCh case    7:*/		return 0x820D8400;
	}
	return 0x820D8400;
} // Block from 820D83E0h-820D8400h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D8400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8400);
		  /* 820D8400h */ case    0:  		/* addi R9, R31, 1030 */
		/* 820D8400h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x406);
		/* 820D8400h case    0:*/		return 0x820D8404;
		  /* 820D8404h */ case    1:  		/* cmplw CR6, R11, R9 */
		/* 820D8404h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820D8404h case    1:*/		return 0x820D8408;
		  /* 820D8408h */ case    2:  		/* bc 4, CR6_LT, 52 */
		/* 820D8408h case    2:*/		if ( !regs.CR[6].lt ) { return 0x820D843C;  }
		/* 820D8408h case    2:*/		return 0x820D840C;
		  /* 820D840Ch */ case    3:  		/* addi R9, R27, 1744 */
		/* 820D840Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0x6D0);
		/* 820D840Ch case    3:*/		return 0x820D8410;
		  /* 820D8410h */ case    4:  		/* addi R11, R11, 2 */
		/* 820D8410h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 820D8410h case    4:*/		return 0x820D8414;
		  /* 820D8414h */ case    5:  		/* lhax R30, <#[R10 + R9]> */
		/* 820D8414h case    5:*/		cpu::mem::load16a( regs, &regs.R30, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820D8414h case    5:*/		return 0x820D8418;
		  /* 820D8418h */ case    6:  		/* stw R11, <#[R31 + 16]> */
		/* 820D8418h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820D8418h case    6:*/		return 0x820D841C;
		  /* 820D841Ch */ case    7:  		/* sth R30, <#[R11]> */
		/* 820D841Ch case    7:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 820D841Ch case    7:*/		return 0x820D8420;
		  /* 820D8420h */ case    8:  		/* lwz R10, <#[R31 + 28]> */
		/* 820D8420h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 820D8420h case    8:*/		return 0x820D8424;
		  /* 820D8424h */ case    9:  		/* b -208 */
		/* 820D8424h case    9:*/		return 0x820D8354;
		/* 820D8424h case    9:*/		return 0x820D8428;
	}
	return 0x820D8428;
} // Block from 820D8400h-820D8428h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D8428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8428);
		  /* 820D8428h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 820D8428h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D8428h case    0:*/		return 0x820D842C;
		  /* 820D842Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D842Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D842Ch case    1:*/		return 0x820D8430;
		  /* 820D8430h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 820D8430h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D844C;  }
		/* 820D8430h case    2:*/		return 0x820D8434;
		  /* 820D8434h */ case    3:  		/* stw R26, <#[R31 + 12]> */
		/* 820D8434h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D8434h case    3:*/		return 0x820D8438;
		  /* 820D8438h */ case    4:  		/* b -1900 */
		/* 820D8438h case    4:*/		return 0x820D7CCC;
		/* 820D8438h case    4:*/		return 0x820D843C;
	}
	return 0x820D843C;
} // Block from 820D8428h-820D843Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D843Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D843C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D843C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D843C);
		  /* 820D843Ch */ case    0:  		/* lis R11, -32255 */
		/* 820D843Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D843Ch case    0:*/		return 0x820D8440;
		  /* 820D8440h */ case    1:  		/* mr R3, R31 */
		/* 820D8440h case    1:*/		regs.R3 = regs.R31;
		/* 820D8440h case    1:*/		return 0x820D8444;
		  /* 820D8444h */ case    2:  		/* addi R4, R11, -9924 */
		/* 820D8444h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFD93C);
		/* 820D8444h case    2:*/		return 0x820D8448;
		  /* 820D8448h */ case    3:  		/* bl -31664 */
		/* 820D8448h case    3:*/		regs.LR = 0x820D844C; return 0x820D0898;
		/* 820D8448h case    3:*/		return 0x820D844C;
	}
	return 0x820D844C;
} // Block from 820D843Ch-820D844Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D844Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D844C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D844C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D844C);
		  /* 820D844Ch */ case    0:  		/* li R3, 1 */
		/* 820D844Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820D844Ch case    0:*/		return 0x820D8450;
	}
	return 0x820D8450;
} // Block from 820D844Ch-820D8450h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D8450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8450);
		  /* 820D8450h */ case    0:  		/* addi R1, R1, 176 */
		/* 820D8450h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820D8450h case    0:*/		return 0x820D8454;
		  /* 820D8454h */ case    1:  		/* b -291264 */
		/* 820D8454h case    1:*/		return 0x82091294;
		/* 820D8454h case    1:*/		return 0x820D8458;
	}
	return 0x820D8458;
} // Block from 820D8450h-820D8458h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D8458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8458);
		  /* 820D8458h */ case    0:  		/* mfspr R12, LR */
		/* 820D8458h case    0:*/		regs.R12 = regs.LR;
		/* 820D8458h case    0:*/		return 0x820D845C;
		  /* 820D845Ch */ case    1:  		/* bl -291344 */
		/* 820D845Ch case    1:*/		regs.LR = 0x820D8460; return 0x8209124C;
		/* 820D845Ch case    1:*/		return 0x820D8460;
		  /* 820D8460h */ case    2:  		/* stwu R1, <#[R1 - 3232]> */
		/* 820D8460h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF360) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF360);
		/* 820D8460h case    2:*/		return 0x820D8464;
		  /* 820D8464h */ case    3:  		/* stw R4, <#[R3 + 4]> */
		/* 820D8464h case    3:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 820D8464h case    3:*/		return 0x820D8468;
		  /* 820D8468h */ case    4:  		/* mr R30, R4 */
		/* 820D8468h case    4:*/		regs.R30 = regs.R4;
		/* 820D8468h case    4:*/		return 0x820D846C;
		  /* 820D846Ch */ case    5:  		/* mr R31, R3 */
		/* 820D846Ch case    5:*/		regs.R31 = regs.R3;
		/* 820D846Ch case    5:*/		return 0x820D8470;
		  /* 820D8470h */ case    6:  		/* li R4, 0 */
		/* 820D8470h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D8470h case    6:*/		return 0x820D8474;
		  /* 820D8474h */ case    7:  		/* mr R3, R30 */
		/* 820D8474h case    7:*/		regs.R3 = regs.R30;
		/* 820D8474h case    7:*/		return 0x820D8478;
		  /* 820D8478h */ case    8:  		/* mr R28, R5 */
		/* 820D8478h case    8:*/		regs.R28 = regs.R5;
		/* 820D8478h case    8:*/		return 0x820D847C;
		  /* 820D847Ch */ case    9:  		/* mr R27, R6 */
		/* 820D847Ch case    9:*/		regs.R27 = regs.R6;
		/* 820D847Ch case    9:*/		return 0x820D8480;
		  /* 820D8480h */ case   10:  		/* mr R29, R7 */
		/* 820D8480h case   10:*/		regs.R29 = regs.R7;
		/* 820D8480h case   10:*/		return 0x820D8484;
		  /* 820D8484h */ case   11:  		/* mr R25, R8 */
		/* 820D8484h case   11:*/		regs.R25 = regs.R8;
		/* 820D8484h case   11:*/		return 0x820D8488;
		  /* 820D8488h */ case   12:  		/* bl -227504 */
		/* 820D8488h case   12:*/		regs.LR = 0x820D848C; return 0x820A0BD8;
		/* 820D8488h case   12:*/		return 0x820D848C;
		  /* 820D848Ch */ case   13:  		/* cmplwi CR6, R29, 0 */
		/* 820D848Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820D848Ch case   13:*/		return 0x820D8490;
		  /* 820D8490h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 820D8490h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820D8498;  }
		/* 820D8490h case   14:*/		return 0x820D8494;
		  /* 820D8494h */ case   15:  		/* addi R29, R30, 24 */
		/* 820D8494h case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x18);
		/* 820D8494h case   15:*/		return 0x820D8498;
	}
	return 0x820D8498;
} // Block from 820D8458h-820D8498h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820D8498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8498);
		  /* 820D8498h */ case    0:  		/* li R30, 0 */
		/* 820D8498h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820D8498h case    0:*/		return 0x820D849C;
		  /* 820D849Ch */ case    1:  		/* stw R29, <#[R31]> */
		/* 820D849Ch case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 820D849Ch case    1:*/		return 0x820D84A0;
		  /* 820D84A0h */ case    2:  		/* li R11, -1 */
		/* 820D84A0h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820D84A0h case    2:*/		return 0x820D84A4;
		  /* 820D84A4h */ case    3:  		/* stw R28, <#[R31 + 108]> */
		/* 820D84A4h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000006C) );
		/* 820D84A4h case    3:*/		return 0x820D84A8;
		  /* 820D84A8h */ case    4:  		/* li R26, 1 */
		/* 820D84A8h case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 820D84A8h case    4:*/		return 0x820D84AC;
		  /* 820D84ACh */ case    5:  		/* stw R30, <#[R31 + 56]> */
		/* 820D84ACh case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000038) );
		/* 820D84ACh case    5:*/		return 0x820D84B0;
		  /* 820D84B0h */ case    6:  		/* stw R30, <#[R31 + 336]> */
		/* 820D84B0h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000150) );
		/* 820D84B0h case    6:*/		return 0x820D84B4;
		  /* 820D84B4h */ case    7:  		/* mr R3, R31 */
		/* 820D84B4h case    7:*/		regs.R3 = regs.R31;
		/* 820D84B4h case    7:*/		return 0x820D84B8;
		  /* 820D84B8h */ case    8:  		/* stb R30, <#[R31 + 8]> */
		/* 820D84B8h case    8:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 820D84B8h case    8:*/		return 0x820D84BC;
		  /* 820D84BCh */ case    9:  		/* stw R30, <#[R31 + 60]> */
		/* 820D84BCh case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000003C) );
		/* 820D84BCh case    9:*/		return 0x820D84C0;
		  /* 820D84C0h */ case   10:  		/* stw R30, <#[R31 + 64]> */
		/* 820D84C0h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000040) );
		/* 820D84C0h case   10:*/		return 0x820D84C4;
		  /* 820D84C4h */ case   11:  		/* stw R30, <#[R31 + 68]> */
		/* 820D84C4h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000044) );
		/* 820D84C4h case   11:*/		return 0x820D84C8;
		  /* 820D84C8h */ case   12:  		/* stw R11, <#[R31 + 72]> */
		/* 820D84C8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 820D84C8h case   12:*/		return 0x820D84CC;
		  /* 820D84CCh */ case   13:  		/* stw R30, <#[R31 + 304]> */
		/* 820D84CCh case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000130) );
		/* 820D84CCh case   13:*/		return 0x820D84D0;
		  /* 820D84D0h */ case   14:  		/* stw R26, <#[R31 + 308]> */
		/* 820D84D0h case   14:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000134) );
		/* 820D84D0h case   14:*/		return 0x820D84D4;
		  /* 820D84D4h */ case   15:  		/* bl -34060 */
		/* 820D84D4h case   15:*/		regs.LR = 0x820D84D8; return 0x820CFFC8;
		/* 820D84D4h case   15:*/		return 0x820D84D8;
		  /* 820D84D8h */ case   16:  		/* rlwinm. R11, R27, 0, 31, 31 */
		/* 820D84D8h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R27);
		/* 820D84D8h case   16:*/		return 0x820D84DC;
		  /* 820D84DCh */ case   17:  		/* stw R30, <#[R31 + 316]> */
		/* 820D84DCh case   17:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000013C) );
		/* 820D84DCh case   17:*/		return 0x820D84E0;
		  /* 820D84E0h */ case   18:  		/* stw R30, <#[R31 + 100]> */
		/* 820D84E0h case   18:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000064) );
		/* 820D84E0h case   18:*/		return 0x820D84E4;
		  /* 820D84E4h */ case   19:  		/* bc 12, CR0_EQ, 16 */
		/* 820D84E4h case   19:*/		if ( regs.CR[0].eq ) { return 0x820D84F4;  }
		/* 820D84E4h case   19:*/		return 0x820D84E8;
		  /* 820D84E8h */ case   20:  		/* stw R26, <#[R31 + 72]> */
		/* 820D84E8h case   20:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000048) );
		/* 820D84E8h case   20:*/		return 0x820D84EC;
		  /* 820D84ECh */ case   21:  		/* stw R26, <#[R31 + 76]> */
		/* 820D84ECh case   21:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000004C) );
		/* 820D84ECh case   21:*/		return 0x820D84F0;
		  /* 820D84F0h */ case   22:  		/* b 12 */
		/* 820D84F0h case   22:*/		return 0x820D84FC;
		/* 820D84F0h case   22:*/		return 0x820D84F4;
	}
	return 0x820D84F4;
} // Block from 820D8498h-820D84F4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820D84F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D84F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D84F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D84F4);
		  /* 820D84F4h */ case    0:  		/* stw R30, <#[R31 + 72]> */
		/* 820D84F4h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000048) );
		/* 820D84F4h case    0:*/		return 0x820D84F8;
		  /* 820D84F8h */ case    1:  		/* stw R30, <#[R31 + 76]> */
		/* 820D84F8h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000004C) );
		/* 820D84F8h case    1:*/		return 0x820D84FC;
	}
	return 0x820D84FC;
} // Block from 820D84F4h-820D84FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D84FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D84FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D84FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D84FC);
		  /* 820D84FCh */ case    0:  		/* rlwinm. R11, R27, 0, 30, 30 */
		/* 820D84FCh case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R27);
		/* 820D84FCh case    0:*/		return 0x820D8500;
		  /* 820D8500h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 820D8500h case    1:*/		if ( regs.CR[0].eq ) { return 0x820D850C;  }
		/* 820D8500h case    1:*/		return 0x820D8504;
		  /* 820D8504h */ case    2:  		/* stw R26, <#[R31 + 80]> */
		/* 820D8504h case    2:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000050) );
		/* 820D8504h case    2:*/		return 0x820D8508;
		  /* 820D8508h */ case    3:  		/* b 8 */
		/* 820D8508h case    3:*/		return 0x820D8510;
		/* 820D8508h case    3:*/		return 0x820D850C;
	}
	return 0x820D850C;
} // Block from 820D84FCh-820D850Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D850Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D850C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D850C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D850C);
		  /* 820D850Ch */ case    0:  		/* stw R30, <#[R31 + 80]> */
		/* 820D850Ch case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000050) );
		/* 820D850Ch case    0:*/		return 0x820D8510;
	}
	return 0x820D8510;
} // Block from 820D850Ch-820D8510h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D8510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8510);
		  /* 820D8510h */ case    0:  		/* lwz R11, <#[R31 + 320]> */
		/* 820D8510h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000140) );
		/* 820D8510h case    0:*/		return 0x820D8514;
		  /* 820D8514h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820D8514h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D8514h case    1:*/		return 0x820D8518;
		  /* 820D8518h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 820D8518h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820D8538;  }
		/* 820D8518h case    2:*/		return 0x820D851C;
		  /* 820D851Ch */ case    3:  		/* bl -441308 */
		/* 820D851Ch case    3:*/		regs.LR = 0x820D8520; return 0x8206C940;
		/* 820D851Ch case    3:*/		return 0x820D8520;
		  /* 820D8520h */ case    4:  		/* stw R3, <#[R31 + 320]> */
		/* 820D8520h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000140) );
		/* 820D8520h case    4:*/		return 0x820D8524;
		  /* 820D8524h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 820D8524h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D8524h case    5:*/		return 0x820D8528;
		  /* 820D8528h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 820D8528h case    6:*/		if ( !regs.CR[0].eq ) { return 0x820D8538;  }
		/* 820D8528h case    6:*/		return 0x820D852C;
		  /* 820D852Ch */ case    7:  		/* lis R3, -32761 */
		/* 820D852Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820D852Ch case    7:*/		return 0x820D8530;
		  /* 820D8530h */ case    8:  		/* ori R3, R3, 14 */
		/* 820D8530h case    8:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820D8530h case    8:*/		return 0x820D8534;
		  /* 820D8534h */ case    9:  		/* b 280 */
		/* 820D8534h case    9:*/		return 0x820D864C;
		/* 820D8534h case    9:*/		return 0x820D8538;
	}
	return 0x820D8538;
} // Block from 820D8510h-820D8538h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D8538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8538);
		  /* 820D8538h */ case    0:  		/* lwz R11, <#[R31 + 76]> */
		/* 820D8538h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 820D8538h case    0:*/		return 0x820D853C;
		  /* 820D853Ch */ case    1:  		/* stw R30, <#[R31 + 92]> */
		/* 820D853Ch case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000005C) );
		/* 820D853Ch case    1:*/		return 0x820D8540;
		  /* 820D8540h */ case    2:  		/* stw R30, <#[R31 + 96]> */
		/* 820D8540h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000060) );
		/* 820D8540h case    2:*/		return 0x820D8544;
		  /* 820D8544h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 820D8544h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D8544h case    3:*/		return 0x820D8548;
		  /* 820D8548h */ case    4:  		/* stw R30, <#[R31 + 104]> */
		/* 820D8548h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000068) );
		/* 820D8548h case    4:*/		return 0x820D854C;
		  /* 820D854Ch */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 820D854Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8558;  }
		/* 820D854Ch case    5:*/		return 0x820D8550;
		  /* 820D8550h */ case    6:  		/* li R11, 4 */
		/* 820D8550h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820D8550h case    6:*/		return 0x820D8554;
		  /* 820D8554h */ case    7:  		/* stw R11, <#[R31 + 104]> */
		/* 820D8554h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 820D8554h case    7:*/		return 0x820D8558;
	}
	return 0x820D8558;
} // Block from 820D8538h-820D8558h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D8558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8558);
		  /* 820D8558h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 820D8558h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 820D8558h case    0:*/		return 0x820D855C;
		  /* 820D855Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 820D855Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820D8570;  }
		/* 820D855Ch case    1:*/		return 0x820D8560;
		  /* 820D8560h */ case    2:  		/* lwz R11, <#[R25]> */
		/* 820D8560h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 820D8560h case    2:*/		return 0x820D8564;
		  /* 820D8564h */ case    3:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 820D8564h case    3:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 820D8564h case    3:*/		return 0x820D8568;
		  /* 820D8568h */ case    4:  		/* mr R11, R26 */
		/* 820D8568h case    4:*/		regs.R11 = regs.R26;
		/* 820D8568h case    4:*/		return 0x820D856C;
		  /* 820D856Ch */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 820D856Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x820D8574;  }
		/* 820D856Ch case    5:*/		return 0x820D8570;
	}
	return 0x820D8570;
} // Block from 820D8558h-820D8570h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D8570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8570);
		  /* 820D8570h */ case    0:  		/* mr R11, R30 */
		/* 820D8570h case    0:*/		regs.R11 = regs.R30;
		/* 820D8570h case    0:*/		return 0x820D8574;
	}
	return 0x820D8574;
} // Block from 820D8570h-820D8574h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D8574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8574);
		  /* 820D8574h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 820D8574h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D8574h case    0:*/		return 0x820D8578;
		  /* 820D8578h */ case    1:  		/* stw R11, <#[R31 + 332]> */
		/* 820D8578h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000014C) );
		/* 820D8578h case    1:*/		return 0x820D857C;
		  /* 820D857Ch */ case    2:  		/* stw R30, <#[R31 + 328]> */
		/* 820D857Ch case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000148) );
		/* 820D857Ch case    2:*/		return 0x820D8580;
		  /* 820D8580h */ case    3:  		/* bc 12, CR6_EQ, 84 */
		/* 820D8580h case    3:*/		if ( regs.CR[6].eq ) { return 0x820D85D4;  }
		/* 820D8580h case    3:*/		return 0x820D8584;
		  /* 820D8584h */ case    4:  		/* lwz R11, <#[R31 + 324]> */
		/* 820D8584h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000144) );
		/* 820D8584h case    4:*/		return 0x820D8588;
		  /* 820D8588h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820D8588h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D8588h case    5:*/		return 0x820D858C;
		  /* 820D858Ch */ case    6:  		/* bc 4, CR6_EQ, 72 */
		/* 820D858Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x820D85D4;  }
		/* 820D858Ch case    6:*/		return 0x820D8590;
		  /* 820D8590h */ case    7:  		/* lwz R3, <#[R25 + 20]> */
		/* 820D8590h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000014) );
		/* 820D8590h case    7:*/		return 0x820D8594;
		  /* 820D8594h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 820D8594h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820D8594h case    8:*/		return 0x820D8598;
		  /* 820D8598h */ case    9:  		/* stw R3, <#[R31 + 324]> */
		/* 820D8598h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000144) );
		/* 820D8598h case    9:*/		return 0x820D859C;
		  /* 820D859Ch */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 820D859Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x820D85A8;  }
		/* 820D859Ch case   10:*/		return 0x820D85A0;
		  /* 820D85A0h */ case   11:  		/* stw R30, <#[R31 + 332]> */
		/* 820D85A0h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000014C) );
		/* 820D85A0h case   11:*/		return 0x820D85A4;
		  /* 820D85A4h */ case   12:  		/* b 48 */
		/* 820D85A4h case   12:*/		return 0x820D85D4;
		/* 820D85A4h case   12:*/		return 0x820D85A8;
	}
	return 0x820D85A8;
} // Block from 820D8574h-820D85A8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D85A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D85A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D85A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D85A8);
		  /* 820D85A8h */ case    0:  		/* bl 1520264 */
		/* 820D85A8h case    0:*/		regs.LR = 0x820D85AC; return 0x8224B830;
		/* 820D85A8h case    0:*/		return 0x820D85AC;
		  /* 820D85ACh */ case    1:  		/* lwz R11, <#[R31 + 72]> */
		/* 820D85ACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 820D85ACh case    1:*/		return 0x820D85B0;
		  /* 820D85B0h */ case    2:  		/* stw R26, <#[R31 + 328]> */
		/* 820D85B0h case    2:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000148) );
		/* 820D85B0h case    2:*/		return 0x820D85B4;
		  /* 820D85B4h */ case    3:  		/* lis R5, -1 */
		/* 820D85B4h case    3:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFFFFFF);
		/* 820D85B4h case    3:*/		return 0x820D85B8;
		  /* 820D85B8h */ case    4:  		/* cmpwi CR6, R11, 1 */
		/* 820D85B8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 820D85B8h case    4:*/		return 0x820D85BC;
		  /* 820D85BCh */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 820D85BCh case    5:*/		if ( regs.CR[6].eq ) { return 0x820D85C4;  }
		/* 820D85BCh case    5:*/		return 0x820D85C0;
		  /* 820D85C0h */ case    6:  		/* lis R5, -2 */
		/* 820D85C0h case    6:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFFFFFE);
		/* 820D85C0h case    6:*/		return 0x820D85C4;
	}
	return 0x820D85C4;
} // Block from 820D85A8h-820D85C4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D85C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D85C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D85C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D85C4);
		  /* 820D85C4h */ case    0:  		/* ori R5, R5, 1021 */
		/* 820D85C4h case    0:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x3FD);
		/* 820D85C4h case    0:*/		return 0x820D85C8;
		  /* 820D85C8h */ case    1:  		/* lwz R3, <#[R31 + 324]> */
		/* 820D85C8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000144) );
		/* 820D85C8h case    1:*/		return 0x820D85CC;
		  /* 820D85CCh */ case    2:  		/* li R4, 0 */
		/* 820D85CCh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D85CCh case    2:*/		return 0x820D85D0;
		  /* 820D85D0h */ case    3:  		/* bl 472448 */
		/* 820D85D0h case    3:*/		regs.LR = 0x820D85D4; return 0x8214BB50;
		/* 820D85D0h case    3:*/		return 0x820D85D4;
	}
	return 0x820D85D4;
} // Block from 820D85C4h-820D85D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D85D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D85D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D85D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D85D4);
		  /* 820D85D4h */ case    0:  		/* li R5, 3036 */
		/* 820D85D4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xBDC);
		/* 820D85D4h case    0:*/		return 0x820D85D8;
		  /* 820D85D8h */ case    1:  		/* li R4, 0 */
		/* 820D85D8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D85D8h case    1:*/		return 0x820D85DC;
		  /* 820D85DCh */ case    2:  		/* addi R3, R1, 128 */
		/* 820D85DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820D85DCh case    2:*/		return 0x820D85E0;
		  /* 820D85E0h */ case    3:  		/* bl -291488 */
		/* 820D85E0h case    3:*/		regs.LR = 0x820D85E4; return 0x82091340;
		/* 820D85E0h case    3:*/		return 0x820D85E4;
		  /* 820D85E4h */ case    4:  		/* stw R31, <#[R1 + 3160]> */
		/* 820D85E4h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000C58) );
		/* 820D85E4h case    4:*/		return 0x820D85E8;
		  /* 820D85E8h */ case    5:  		/* addi R3, R1, 128 */
		/* 820D85E8h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820D85E8h case    5:*/		return 0x820D85EC;
		  /* 820D85ECh */ case    6:  		/* bl -2412 */
		/* 820D85ECh case    6:*/		regs.LR = 0x820D85F0; return 0x820D7C80;
		/* 820D85ECh case    6:*/		return 0x820D85F0;
		  /* 820D85F0h */ case    7:  		/* lwz R3, <#[R31]> */
		/* 820D85F0h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 820D85F0h case    7:*/		return 0x820D85F4;
		  /* 820D85F4h */ case    8:  		/* bl -207060 */
		/* 820D85F4h case    8:*/		regs.LR = 0x820D85F8; return 0x820A5D20;
		/* 820D85F4h case    8:*/		return 0x820D85F8;
		  /* 820D85F8h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 820D85F8h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D85F8h case    9:*/		return 0x820D85FC;
		  /* 820D85FCh */ case   10:  		/* bc 4, CR0_EQ, 44 */
		/* 820D85FCh case   10:*/		if ( !regs.CR[0].eq ) { return 0x820D8628;  }
		/* 820D85FCh case   10:*/		return 0x820D8600;
		  /* 820D8600h */ case   11:  		/* lwz R11, <#[R31 + 312]> */
		/* 820D8600h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000138) );
		/* 820D8600h case   11:*/		return 0x820D8604;
		  /* 820D8604h */ case   12:  		/* cmpwi CR6, R11, 0 */
		/* 820D8604h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D8604h case   12:*/		return 0x820D8608;
		  /* 820D8608h */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 820D8608h case   13:*/		if ( !regs.CR[6].eq ) { return 0x820D8628;  }
		/* 820D8608h case   13:*/		return 0x820D860C;
		  /* 820D860Ch */ case   14:  		/* lwz R11, <#[R31 + 80]> */
		/* 820D860Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820D860Ch case   14:*/		return 0x820D8610;
		  /* 820D8610h */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 820D8610h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D8610h case   15:*/		return 0x820D8614;
		  /* 820D8614h */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 820D8614h case   16:*/		if ( !regs.CR[6].eq ) { return 0x820D8628;  }
		/* 820D8614h case   16:*/		return 0x820D8618;
		  /* 820D8618h */ case   17:  		/* lis R11, -32254 */
		/* 820D8618h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D8618h case   17:*/		return 0x820D861C;
		  /* 820D861Ch */ case   18:  		/* mr R3, R31 */
		/* 820D861Ch case   18:*/		regs.R3 = regs.R31;
		/* 820D861Ch case   18:*/		return 0x820D8620;
		  /* 820D8620h */ case   19:  		/* addi R4, R11, -32296 */
		/* 820D8620h case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF81D8);
		/* 820D8620h case   19:*/		return 0x820D8624;
		  /* 820D8624h */ case   20:  		/* bl -32060 */
		/* 820D8624h case   20:*/		regs.LR = 0x820D8628; return 0x820D08E8;
		/* 820D8624h case   20:*/		return 0x820D8628;
	}
	return 0x820D8628;
} // Block from 820D85D4h-820D8628h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820D8628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8628);
		  /* 820D8628h */ case    0:  		/* mr R3, R31 */
		/* 820D8628h case    0:*/		regs.R3 = regs.R31;
		/* 820D8628h case    0:*/		return 0x820D862C;
		  /* 820D862Ch */ case    1:  		/* bl -8796 */
		/* 820D862Ch case    1:*/		regs.LR = 0x820D8630; return 0x820D63D0;
		/* 820D862Ch case    1:*/		return 0x820D8630;
		  /* 820D8630h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 820D8630h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8630h case    2:*/		return 0x820D8634;
		  /* 820D8634h */ case    3:  		/* bl -207124 */
		/* 820D8634h case    3:*/		regs.LR = 0x820D8638; return 0x820A5D20;
		/* 820D8634h case    3:*/		return 0x820D8638;
		  /* 820D8638h */ case    4:  		/* subfic R11, R3, 0 */
		/* 820D8638h case    4:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R3,0x0);
		/* 820D8638h case    4:*/		return 0x820D863C;
		  /* 820D863Ch */ case    5:  		/* lis R10, -30602 */
		/* 820D863Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8876);
		/* 820D863Ch case    5:*/		return 0x820D8640;
		  /* 820D8640h */ case    6:  		/* subfe R11, R11, R11 */
		/* 820D8640h case    6:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 820D8640h case    6:*/		return 0x820D8644;
		  /* 820D8644h */ case    7:  		/* ori R10, R10, 2905 */
		/* 820D8644h case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xB59);
		/* 820D8644h case    7:*/		return 0x820D8648;
		  /* 820D8648h */ case    8:  		/* and R3, R11, R10 */
		/* 820D8648h case    8:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 820D8648h case    8:*/		return 0x820D864C;
	}
	return 0x820D864C;
} // Block from 820D8628h-820D864Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D864Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D864C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D864C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D864C);
		  /* 820D864Ch */ case    0:  		/* addi R1, R1, 3232 */
		/* 820D864Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xCA0);
		/* 820D864Ch case    0:*/		return 0x820D8650;
		  /* 820D8650h */ case    1:  		/* b -291764 */
		/* 820D8650h case    1:*/		return 0x8209129C;
		/* 820D8650h case    1:*/		return 0x820D8654;
		  /* 820D8654h */ case    2:  		/* nop */
		/* 820D8654h case    2:*/		cpu::op::nop();
		/* 820D8654h case    2:*/		return 0x820D8658;
	}
	return 0x820D8658;
} // Block from 820D864Ch-820D8658h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8658h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8658);
		  /* 820D8658h */ case    0:  		/* mfspr R12, LR */
		/* 820D8658h case    0:*/		regs.R12 = regs.LR;
		/* 820D8658h case    0:*/		return 0x820D865C;
		  /* 820D865Ch */ case    1:  		/* bl -291860 */
		/* 820D865Ch case    1:*/		regs.LR = 0x820D8660; return 0x82091248;
		/* 820D865Ch case    1:*/		return 0x820D8660;
		  /* 820D8660h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 820D8660h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 820D8660h case    2:*/		return 0x820D8664;
		  /* 820D8664h */ case    3:  		/* lis R11, -32255 */
		/* 820D8664h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D8664h case    3:*/		return 0x820D8668;
		  /* 820D8668h */ case    4:  		/* lwz R10, <#[R4 + 8]> */
		/* 820D8668h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 820D8668h case    4:*/		return 0x820D866C;
		  /* 820D866Ch */ case    5:  		/* li R31, 0 */
		/* 820D866Ch case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820D866Ch case    5:*/		return 0x820D8670;
		  /* 820D8670h */ case    6:  		/* addi R9, R11, 6764 */
		/* 820D8670h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1A6C);
		/* 820D8670h case    6:*/		return 0x820D8674;
		  /* 820D8674h */ case    7:  		/* mr R26, R3 */
		/* 820D8674h case    7:*/		regs.R26 = regs.R3;
		/* 820D8674h case    7:*/		return 0x820D8678;
		  /* 820D8678h */ case    8:  		/* mr R25, R5 */
		/* 820D8678h case    8:*/		regs.R25 = regs.R5;
		/* 820D8678h case    8:*/		return 0x820D867C;
		  /* 820D867Ch */ case    9:  		/* mr R27, R6 */
		/* 820D867Ch case    9:*/		regs.R27 = regs.R6;
		/* 820D867Ch case    9:*/		return 0x820D8680;
		  /* 820D8680h */ case   10:  		/* mr R24, R7 */
		/* 820D8680h case   10:*/		regs.R24 = regs.R7;
		/* 820D8680h case   10:*/		return 0x820D8684;
		  /* 820D8684h */ case   11:  		/* mr R28, R8 */
		/* 820D8684h case   11:*/		regs.R28 = regs.R8;
		/* 820D8684h case   11:*/		return 0x820D8688;
		  /* 820D8688h */ case   12:  		/* mr R29, R31 */
		/* 820D8688h case   12:*/		regs.R29 = regs.R31;
		/* 820D8688h case   12:*/		return 0x820D868C;
		  /* 820D868Ch */ case   13:  		/* mr R11, R10 */
		/* 820D868Ch case   13:*/		regs.R11 = regs.R10;
		/* 820D868Ch case   13:*/		return 0x820D8690;
		  /* 820D8690h */ case   14:  		/* lbz R8, <#[R11]> */
		/* 820D8690h case   14:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820D8690h case   14:*/		return 0x820D8694;
		  /* 820D8694h */ case   15:  		/* lbz R7, <#[R9]> */
		/* 820D8694h case   15:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 820D8694h case   15:*/		return 0x820D8698;
		  /* 820D8698h */ case   16:  		/* cmpwi CR0, R8, 0 */
		/* 820D8698h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 820D8698h case   16:*/		return 0x820D869C;
		  /* 820D869Ch */ case   17:  		/* subf R8, R7, R8 */
		/* 820D869Ch case   17:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 820D869Ch case   17:*/		return 0x820D86A0;
		  /* 820D86A0h */ case   18:  		/* bc 12, CR0_EQ, 20 */
		/* 820D86A0h case   18:*/		if ( regs.CR[0].eq ) { return 0x820D86B4;  }
		/* 820D86A0h case   18:*/		return 0x820D86A4;
		  /* 820D86A4h */ case   19:  		/* addi R11, R11, 1 */
		/* 820D86A4h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820D86A4h case   19:*/		return 0x820D86A8;
		  /* 820D86A8h */ case   20:  		/* addi R9, R9, 1 */
		/* 820D86A8h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820D86A8h case   20:*/		return 0x820D86AC;
		  /* 820D86ACh */ case   21:  		/* cmpwi CR6, R8, 0 */
		/* 820D86ACh case   21:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 820D86ACh case   21:*/		return 0x820D86B0;
		  /* 820D86B0h */ case   22:  		/* bc 12, CR6_EQ, -32 */
		/* 820D86B0h case   22:*/		if ( regs.CR[6].eq ) { return 0x820D8690;  }
		/* 820D86B0h case   22:*/		return 0x820D86B4;
	}
	return 0x820D86B4;
} // Block from 820D8658h-820D86B4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820D86B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D86B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D86B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D86B4);
		  /* 820D86B4h */ case    0:  		/* lis R11, -32255 */
		/* 820D86B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820D86B4h case    0:*/		return 0x820D86B8;
		  /* 820D86B8h */ case    1:  		/* addi R11, R11, 6756 */
		/* 820D86B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1A64);
		/* 820D86B8h case    1:*/		return 0x820D86BC;
		  /* 820D86BCh */ case    2:  		/* lbz R9, <#[R10]> */
		/* 820D86BCh case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820D86BCh case    2:*/		return 0x820D86C0;
	}
	return 0x820D86C0;
} // Block from 820D86B4h-820D86C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D86C0h
// Function '?d3dxuasm_parse@CUAssemblerYaccStruct@D3DXShader@@QAAHXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D86C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D86C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D86C0);
		  /* 820D86C0h */ case    0:  		/* lbz R7, <#[R11]> */
		/* 820D86C0h case    0:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 820D86C0h case    0:*/		return 0x820D86C4;
		  /* 820D86C4h */ case    1:  		/* cmpwi CR0, R9, 0 */
		/* 820D86C4h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 820D86C4h case    1:*/		return 0x820D86C8;
		  /* 820D86C8h */ case    2:  		/* subf R9, R7, R9 */
		/* 820D86C8h case    2:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 820D86C8h case    2:*/		return 0x820D86CC;
		  /* 820D86CCh */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 820D86CCh case    3:*/		if ( regs.CR[0].eq ) { return 0x820D86E0;  }
		/* 820D86CCh case    3:*/		return 0x820D86D0;
		  /* 820D86D0h */ case    4:  		/* addi R10, R10, 1 */
		/* 820D86D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820D86D0h case    4:*/		return 0x820D86D4;
		  /* 820D86D4h */ case    5:  		/* addi R11, R11, 1 */
		/* 820D86D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820D86D4h case    5:*/		return 0x820D86D8;
		  /* 820D86D8h */ case    6:  		/* cmpwi CR6, R9, 0 */
		/* 820D86D8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820D86D8h case    6:*/		return 0x820D86DC;
		  /* 820D86DCh */ case    7:  		/* bc 12, CR6_EQ, -32 */
		/* 820D86DCh case    7:*/		if ( regs.CR[6].eq ) { return 0x820D86BC;  }
		/* 820D86DCh case    7:*/		return 0x820D86E0;
	}
	return 0x820D86E0;
} // Block from 820D86C0h-820D86E0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D86E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D86E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D86E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D86E0);
		  /* 820D86E0h */ case    0:  		/* lwz R10, <#[R4]> */
		/* 820D86E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 820D86E0h case    0:*/		return 0x820D86E4;
		  /* 820D86E4h */ case    1:  		/* cntlzw R11, R9 */
		/* 820D86E4h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R9);
		/* 820D86E4h case    1:*/		return 0x820D86E8;
		  /* 820D86E8h */ case    2:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 820D86E8h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 820D86E8h case    2:*/		return 0x820D86EC;
		  /* 820D86ECh */ case    3:  		/* cmpwi CR6, R10, 11 */
		/* 820D86ECh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 820D86ECh case    3:*/		return 0x820D86F0;
		  /* 820D86F0h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 820D86F0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820D86FC;  }
		/* 820D86F0h case    4:*/		return 0x820D86F4;
		  /* 820D86F4h */ case    5:  		/* cmpwi CR6, R8, 0 */
		/* 820D86F4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 820D86F4h case    5:*/		return 0x820D86F8;
		  /* 820D86F8h */ case    6:  		/* bc 12, CR6_EQ, 44 */
		/* 820D86F8h case    6:*/		if ( regs.CR[6].eq ) { return 0x820D8724;  }
		/* 820D86F8h case    6:*/		return 0x820D86FC;
	}
	return 0x820D86FC;
} // Block from 820D86E0h-820D86FCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D86FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D86FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D86FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D86FC);
		  /* 820D86FCh */ case    0:  		/* rlwinm. R10, R11, 0, 24, 31 */
		/* 820D86FCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R11);
		/* 820D86FCh case    0:*/		return 0x820D8700;
		  /* 820D8700h */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 820D8700h case    1:*/		if ( !regs.CR[0].eq ) { return 0x820D8724;  }
		/* 820D8700h case    1:*/		return 0x820D8704;
		  /* 820D8704h */ case    2:  		/* lis R11, -32254 */
		/* 820D8704h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D8704h case    2:*/		return 0x820D8708;
		  /* 820D8708h */ case    3:  		/* li R5, 2001 */
		/* 820D8708h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x7D1);
		/* 820D8708h case    3:*/		return 0x820D870C;
		  /* 820D870Ch */ case    4:  		/* addi R6, R11, -32232 */
		/* 820D870Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFF8218);
		/* 820D870Ch case    4:*/		return 0x820D8710;
		  /* 820D8710h */ case    5:  		/* mr R3, R27 */
		/* 820D8710h case    5:*/		regs.R3 = regs.R27;
		/* 820D8710h case    5:*/		return 0x820D8714;
		  /* 820D8714h */ case    6:  		/* bl -202116 */
		/* 820D8714h case    6:*/		regs.LR = 0x820D8718; return 0x820A7190;
		/* 820D8714h case    6:*/		return 0x820D8718;
		  /* 820D8718h */ case    7:  		/* lis R31, -30602 */
		/* 820D8718h case    7:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8876);
		/* 820D8718h case    7:*/		return 0x820D871C;
		  /* 820D871Ch */ case    8:  		/* ori R31, R31, 2905 */
		/* 820D871Ch case    8:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xB59);
		/* 820D871Ch case    8:*/		return 0x820D8720;
		  /* 820D8720h */ case    9:  		/* b 184 */
		/* 820D8720h case    9:*/		return 0x820D87D8;
		/* 820D8720h case    9:*/		return 0x820D8724;
	}
	return 0x820D8724;
} // Block from 820D86FCh-820D8724h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D8724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8724);
		  /* 820D8724h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 820D8724h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 820D8724h case    0:*/		return 0x820D8728;
		  /* 820D8728h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 820D8728h case    1:*/		if ( regs.CR[0].eq ) { return 0x820D8730;  }
		/* 820D8728h case    1:*/		return 0x820D872C;
		  /* 820D872Ch */ case    2:  		/* li R29, 1 */
		/* 820D872Ch case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 820D872Ch case    2:*/		return 0x820D8730;
	}
	return 0x820D8730;
} // Block from 820D8724h-820D8730h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8730);
		  /* 820D8730h */ case    0:  		/* lis R4, 9345 */
		/* 820D8730h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820D8730h case    0:*/		return 0x820D8734;
		  /* 820D8734h */ case    1:  		/* li R3, 344 */
		/* 820D8734h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x158);
		/* 820D8734h case    1:*/		return 0x820D8738;
		  /* 820D8738h */ case    2:  		/* bl -329016 */
		/* 820D8738h case    2:*/		regs.LR = 0x820D873C; return 0x82088200;
		/* 820D8738h case    2:*/		return 0x820D873C;
		  /* 820D873Ch */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 820D873Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D873Ch case    3:*/		return 0x820D8740;
		  /* 820D8740h */ case    4:  		/* bc 12, CR0_EQ, 52 */
		/* 820D8740h case    4:*/		if ( regs.CR[0].eq ) { return 0x820D8774;  }
		/* 820D8740h case    4:*/		return 0x820D8744;
		  /* 820D8744h */ case    5:  		/* li R11, 1 */
		/* 820D8744h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820D8744h case    5:*/		return 0x820D8748;
		  /* 820D8748h */ case    6:  		/* stw R31, <#[R3]> */
		/* 820D8748h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 820D8748h case    6:*/		return 0x820D874C;
		  /* 820D874Ch */ case    7:  		/* stw R31, <#[R3 + 4]> */
		/* 820D874Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 820D874Ch case    7:*/		return 0x820D8750;
		  /* 820D8750h */ case    8:  		/* mr R30, R3 */
		/* 820D8750h case    8:*/		regs.R30 = regs.R3;
		/* 820D8750h case    8:*/		return 0x820D8754;
		  /* 820D8754h */ case    9:  		/* stw R31, <#[R3 + 108]> */
		/* 820D8754h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x0000006C) );
		/* 820D8754h case    9:*/		return 0x820D8758;
		  /* 820D8758h */ case   10:  		/* stw R31, <#[R3 + 320]> */
		/* 820D8758h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000140) );
		/* 820D8758h case   10:*/		return 0x820D875C;
		  /* 820D875Ch */ case   11:  		/* stw R31, <#[R3 + 324]> */
		/* 820D875Ch case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000144) );
		/* 820D875Ch case   11:*/		return 0x820D8760;
		  /* 820D8760h */ case   12:  		/* stw R31, <#[R3 + 136]> */
		/* 820D8760h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000088) );
		/* 820D8760h case   12:*/		return 0x820D8764;
		  /* 820D8764h */ case   13:  		/* stw R11, <#[R3 + 132]> */
		/* 820D8764h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000084) );
		/* 820D8764h case   13:*/		return 0x820D8768;
		  /* 820D8768h */ case   14:  		/* stw R31, <#[R3 + 84]> */
		/* 820D8768h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000054) );
		/* 820D8768h case   14:*/		return 0x820D876C;
		  /* 820D876Ch */ case   15:  		/* stw R31, <#[R3 + 88]> */
		/* 820D876Ch case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000058) );
		/* 820D876Ch case   15:*/		return 0x820D8770;
		  /* 820D8770h */ case   16:  		/* b 8 */
		/* 820D8770h case   16:*/		return 0x820D8778;
		/* 820D8770h case   16:*/		return 0x820D8774;
	}
	return 0x820D8774;
} // Block from 820D8730h-820D8774h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820D8774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8774);
		  /* 820D8774h */ case    0:  		/* mr R30, R31 */
		/* 820D8774h case    0:*/		regs.R30 = regs.R31;
		/* 820D8774h case    0:*/		return 0x820D8778;
	}
	return 0x820D8778;
} // Block from 820D8774h-820D8778h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D8778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8778);
		  /* 820D8778h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820D8778h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820D8778h case    0:*/		return 0x820D877C;
		  /* 820D877Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820D877Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820D878C;  }
		/* 820D877Ch case    1:*/		return 0x820D8780;
		  /* 820D8780h */ case    2:  		/* lis R31, -32761 */
		/* 820D8780h case    2:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 820D8780h case    2:*/		return 0x820D8784;
		  /* 820D8784h */ case    3:  		/* ori R31, R31, 14 */
		/* 820D8784h case    3:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 820D8784h case    3:*/		return 0x820D8788;
		  /* 820D8788h */ case    4:  		/* b 80 */
		/* 820D8788h case    4:*/		return 0x820D87D8;
		/* 820D8788h case    4:*/		return 0x820D878C;
	}
	return 0x820D878C;
} // Block from 820D8778h-820D878Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D878Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D878C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D878C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D878C);
		  /* 820D878Ch */ case    0:  		/* mr R8, R28 */
		/* 820D878Ch case    0:*/		regs.R8 = regs.R28;
		/* 820D878Ch case    0:*/		return 0x820D8790;
		  /* 820D8790h */ case    1:  		/* mr R7, R27 */
		/* 820D8790h case    1:*/		regs.R7 = regs.R27;
		/* 820D8790h case    1:*/		return 0x820D8794;
		  /* 820D8794h */ case    2:  		/* mr R6, R29 */
		/* 820D8794h case    2:*/		regs.R6 = regs.R29;
		/* 820D8794h case    2:*/		return 0x820D8798;
		  /* 820D8798h */ case    3:  		/* mr R5, R25 */
		/* 820D8798h case    3:*/		regs.R5 = regs.R25;
		/* 820D8798h case    3:*/		return 0x820D879C;
		  /* 820D879Ch */ case    4:  		/* mr R4, R26 */
		/* 820D879Ch case    4:*/		regs.R4 = regs.R26;
		/* 820D879Ch case    4:*/		return 0x820D87A0;
		  /* 820D87A0h */ case    5:  		/* mr R3, R30 */
		/* 820D87A0h case    5:*/		regs.R3 = regs.R30;
		/* 820D87A0h case    5:*/		return 0x820D87A4;
		  /* 820D87A4h */ case    6:  		/* bl -844 */
		/* 820D87A4h case    6:*/		regs.LR = 0x820D87A8; return 0x820D8458;
		/* 820D87A4h case    6:*/		return 0x820D87A8;
		  /* 820D87A8h */ case    7:  		/* or. R31, R3, R3 */
		/* 820D87A8h case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820D87A8h case    7:*/		return 0x820D87AC;
		  /* 820D87ACh */ case    8:  		/* bc 12, CR0_LT, 24 */
		/* 820D87ACh case    8:*/		if ( regs.CR[0].lt ) { return 0x820D87C4;  }
		/* 820D87ACh case    8:*/		return 0x820D87B0;
		  /* 820D87B0h */ case    9:  		/* mr R5, R28 */
		/* 820D87B0h case    9:*/		regs.R5 = regs.R28;
		/* 820D87B0h case    9:*/		return 0x820D87B4;
		  /* 820D87B4h */ case   10:  		/* mr R4, R24 */
		/* 820D87B4h case   10:*/		regs.R4 = regs.R24;
		/* 820D87B4h case   10:*/		return 0x820D87B8;
		  /* 820D87B8h */ case   11:  		/* mr R3, R30 */
		/* 820D87B8h case   11:*/		regs.R3 = regs.R30;
		/* 820D87B8h case   11:*/		return 0x820D87BC;
		  /* 820D87BCh */ case   12:  		/* bl -6828 */
		/* 820D87BCh case   12:*/		regs.LR = 0x820D87C0; return 0x820D6D10;
		/* 820D87BCh case   12:*/		return 0x820D87C0;
		  /* 820D87C0h */ case   13:  		/* mr R31, R3 */
		/* 820D87C0h case   13:*/		regs.R31 = regs.R3;
		/* 820D87C0h case   13:*/		return 0x820D87C4;
	}
	return 0x820D87C4;
} // Block from 820D878Ch-820D87C4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820D87C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D87C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D87C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D87C4);
		  /* 820D87C4h */ case    0:  		/* mr R3, R30 */
		/* 820D87C4h case    0:*/		regs.R3 = regs.R30;
		/* 820D87C4h case    0:*/		return 0x820D87C8;
		  /* 820D87C8h */ case    1:  		/* bl -34528 */
		/* 820D87C8h case    1:*/		regs.LR = 0x820D87CC; return 0x820D00E8;
		/* 820D87C8h case    1:*/		return 0x820D87CC;
		  /* 820D87CCh */ case    2:  		/* lis R4, 9345 */
		/* 820D87CCh case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820D87CCh case    2:*/		return 0x820D87D0;
		  /* 820D87D0h */ case    3:  		/* mr R3, R30 */
		/* 820D87D0h case    3:*/		regs.R3 = regs.R30;
		/* 820D87D0h case    3:*/		return 0x820D87D4;
		  /* 820D87D4h */ case    4:  		/* bl -328860 */
		/* 820D87D4h case    4:*/		regs.LR = 0x820D87D8; return 0x82088338;
		/* 820D87D4h case    4:*/		return 0x820D87D8;
	}
	return 0x820D87D8;
} // Block from 820D87C4h-820D87D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D87D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D87D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D87D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D87D8);
		  /* 820D87D8h */ case    0:  		/* mr R3, R31 */
		/* 820D87D8h case    0:*/		regs.R3 = regs.R31;
		/* 820D87D8h case    0:*/		return 0x820D87DC;
		  /* 820D87DCh */ case    1:  		/* addi R1, R1, 160 */
		/* 820D87DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820D87DCh case    1:*/		return 0x820D87E0;
		  /* 820D87E0h */ case    2:  		/* b -292168 */
		/* 820D87E0h case    2:*/		return 0x82091298;
		/* 820D87E0h case    2:*/		return 0x820D87E4;
		  /* 820D87E4h */ case    3:  		/* nop */
		/* 820D87E4h case    3:*/		cpu::op::nop();
		/* 820D87E4h case    3:*/		return 0x820D87E8;
	}
	return 0x820D87E8;
} // Block from 820D87D8h-820D87E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D87E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D87E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D87E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D87E8);
		  /* 820D87E8h */ case    0:  		/* mfspr R12, LR */
		/* 820D87E8h case    0:*/		regs.R12 = regs.LR;
		/* 820D87E8h case    0:*/		return 0x820D87EC;
		  /* 820D87ECh */ case    1:  		/* bl -292252 */
		/* 820D87ECh case    1:*/		regs.LR = 0x820D87F0; return 0x82091250;
		/* 820D87ECh case    1:*/		return 0x820D87F0;
		  /* 820D87F0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820D87F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820D87F0h case    2:*/		return 0x820D87F4;
		  /* 820D87F4h */ case    3:  		/* mr R29, R3 */
		/* 820D87F4h case    3:*/		regs.R29 = regs.R3;
		/* 820D87F4h case    3:*/		return 0x820D87F8;
		  /* 820D87F8h */ case    4:  		/* mr R27, R4 */
		/* 820D87F8h case    4:*/		regs.R27 = regs.R4;
		/* 820D87F8h case    4:*/		return 0x820D87FC;
		  /* 820D87FCh */ case    5:  		/* lis R4, 9345 */
		/* 820D87FCh case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820D87FCh case    5:*/		return 0x820D8800;
		  /* 820D8800h */ case    6:  		/* li R3, 344 */
		/* 820D8800h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x158);
		/* 820D8800h case    6:*/		return 0x820D8804;
		  /* 820D8804h */ case    7:  		/* mr R26, R5 */
		/* 820D8804h case    7:*/		regs.R26 = regs.R5;
		/* 820D8804h case    7:*/		return 0x820D8808;
		  /* 820D8808h */ case    8:  		/* mr R30, R6 */
		/* 820D8808h case    8:*/		regs.R30 = regs.R6;
		/* 820D8808h case    8:*/		return 0x820D880C;
		  /* 820D880Ch */ case    9:  		/* mr R28, R7 */
		/* 820D880Ch case    9:*/		regs.R28 = regs.R7;
		/* 820D880Ch case    9:*/		return 0x820D8810;
		  /* 820D8810h */ case   10:  		/* bl -329232 */
		/* 820D8810h case   10:*/		regs.LR = 0x820D8814; return 0x82088200;
		/* 820D8810h case   10:*/		return 0x820D8814;
		  /* 820D8814h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 820D8814h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820D8814h case   11:*/		return 0x820D8818;
		  /* 820D8818h */ case   12:  		/* bc 12, CR0_EQ, 56 */
		/* 820D8818h case   12:*/		if ( regs.CR[0].eq ) { return 0x820D8850;  }
		/* 820D8818h case   12:*/		return 0x820D881C;
		  /* 820D881Ch */ case   13:  		/* li R11, 0 */
		/* 820D881Ch case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820D881Ch case   13:*/		return 0x820D8820;
		  /* 820D8820h */ case   14:  		/* li R10, 1 */
		/* 820D8820h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820D8820h case   14:*/		return 0x820D8824;
		  /* 820D8824h */ case   15:  		/* stw R11, <#[R3]> */
		/* 820D8824h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D8824h case   15:*/		return 0x820D8828;
		  /* 820D8828h */ case   16:  		/* mr R31, R3 */
		/* 820D8828h case   16:*/		regs.R31 = regs.R3;
		/* 820D8828h case   16:*/		return 0x820D882C;
		  /* 820D882Ch */ case   17:  		/* stw R11, <#[R3 + 4]> */
		/* 820D882Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 820D882Ch case   17:*/		return 0x820D8830;
		  /* 820D8830h */ case   18:  		/* stw R11, <#[R3 + 108]> */
		/* 820D8830h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 820D8830h case   18:*/		return 0x820D8834;
		  /* 820D8834h */ case   19:  		/* stw R11, <#[R3 + 320]> */
		/* 820D8834h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000140) );
		/* 820D8834h case   19:*/		return 0x820D8838;
		  /* 820D8838h */ case   20:  		/* stw R11, <#[R3 + 324]> */
		/* 820D8838h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000144) );
		/* 820D8838h case   20:*/		return 0x820D883C;
		  /* 820D883Ch */ case   21:  		/* stw R11, <#[R3 + 136]> */
		/* 820D883Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000088) );
		/* 820D883Ch case   21:*/		return 0x820D8840;
		  /* 820D8840h */ case   22:  		/* stw R10, <#[R3 + 132]> */
		/* 820D8840h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000084) );
		/* 820D8840h case   22:*/		return 0x820D8844;
		  /* 820D8844h */ case   23:  		/* stw R11, <#[R3 + 84]> */
		/* 820D8844h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000054) );
		/* 820D8844h case   23:*/		return 0x820D8848;
		  /* 820D8848h */ case   24:  		/* stw R11, <#[R3 + 88]> */
		/* 820D8848h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000058) );
		/* 820D8848h case   24:*/		return 0x820D884C;
		  /* 820D884Ch */ case   25:  		/* b 8 */
		/* 820D884Ch case   25:*/		return 0x820D8854;
		/* 820D884Ch case   25:*/		return 0x820D8850;
	}
	return 0x820D8850;
} // Block from 820D87E8h-820D8850h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820D8850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8850);
		  /* 820D8850h */ case    0:  		/* li R31, 0 */
		/* 820D8850h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820D8850h case    0:*/		return 0x820D8854;
	}
	return 0x820D8854;
} // Block from 820D8850h-820D8854h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D8854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8854);
		  /* 820D8854h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820D8854h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820D8854h case    0:*/		return 0x820D8858;
		  /* 820D8858h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820D8858h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820D8868;  }
		/* 820D8858h case    1:*/		return 0x820D885C;
		  /* 820D885Ch */ case    2:  		/* lis R30, -32761 */
		/* 820D885Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 820D885Ch case    2:*/		return 0x820D8860;
		  /* 820D8860h */ case    3:  		/* ori R30, R30, 14 */
		/* 820D8860h case    3:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 820D8860h case    3:*/		return 0x820D8864;
		  /* 820D8864h */ case    4:  		/* b 116 */
		/* 820D8864h case    4:*/		return 0x820D88D8;
		/* 820D8864h case    4:*/		return 0x820D8868;
	}
	return 0x820D8868;
} // Block from 820D8854h-820D8868h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D8868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8868);
		  /* 820D8868h */ case    0:  		/* stw R28, <#[R31 + 88]> */
		/* 820D8868h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000058) );
		/* 820D8868h case    0:*/		return 0x820D886C;
		  /* 820D886Ch */ case    1:  		/* li R4, 2 */
		/* 820D886Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 820D886Ch case    1:*/		return 0x820D8870;
		  /* 820D8870h */ case    2:  		/* stw R30, <#[R31 + 84]> */
		/* 820D8870h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000054) );
		/* 820D8870h case    2:*/		return 0x820D8874;
		  /* 820D8874h */ case    3:  		/* mr R3, R29 */
		/* 820D8874h case    3:*/		regs.R3 = regs.R29;
		/* 820D8874h case    3:*/		return 0x820D8878;
		  /* 820D8878h */ case    4:  		/* bl -227016 */
		/* 820D8878h case    4:*/		regs.LR = 0x820D887C; return 0x820A11B0;
		/* 820D8878h case    4:*/		return 0x820D887C;
		  /* 820D887Ch */ case    5:  		/* or. R30, R3, R3 */
		/* 820D887Ch case    5:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820D887Ch case    5:*/		return 0x820D8880;
		  /* 820D8880h */ case    6:  		/* bc 12, CR0_LT, 68 */
		/* 820D8880h case    6:*/		if ( regs.CR[0].lt ) { return 0x820D88C4;  }
		/* 820D8880h case    6:*/		return 0x820D8884;
		  /* 820D8884h */ case    7:  		/* li R8, 0 */
		/* 820D8884h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820D8884h case    7:*/		return 0x820D8888;
		  /* 820D8888h */ case    8:  		/* li R7, 0 */
		/* 820D8888h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820D8888h case    8:*/		return 0x820D888C;
		  /* 820D888Ch */ case    9:  		/* li R6, 2 */
		/* 820D888Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 820D888Ch case    9:*/		return 0x820D8890;
		  /* 820D8890h */ case   10:  		/* mr R5, R27 */
		/* 820D8890h case   10:*/		regs.R5 = regs.R27;
		/* 820D8890h case   10:*/		return 0x820D8894;
		  /* 820D8894h */ case   11:  		/* mr R4, R29 */
		/* 820D8894h case   11:*/		regs.R4 = regs.R29;
		/* 820D8894h case   11:*/		return 0x820D8898;
		  /* 820D8898h */ case   12:  		/* mr R3, R31 */
		/* 820D8898h case   12:*/		regs.R3 = regs.R31;
		/* 820D8898h case   12:*/		return 0x820D889C;
		  /* 820D889Ch */ case   13:  		/* bl -1092 */
		/* 820D889Ch case   13:*/		regs.LR = 0x820D88A0; return 0x820D8458;
		/* 820D889Ch case   13:*/		return 0x820D88A0;
		  /* 820D88A0h */ case   14:  		/* or. R30, R3, R3 */
		/* 820D88A0h case   14:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820D88A0h case   14:*/		return 0x820D88A4;
		  /* 820D88A4h */ case   15:  		/* bc 12, CR0_LT, 20 */
		/* 820D88A4h case   15:*/		if ( regs.CR[0].lt ) { return 0x820D88B8;  }
		/* 820D88A4h case   15:*/		return 0x820D88A8;
		  /* 820D88A8h */ case   16:  		/* mr R4, R26 */
		/* 820D88A8h case   16:*/		regs.R4 = regs.R26;
		/* 820D88A8h case   16:*/		return 0x820D88AC;
		  /* 820D88ACh */ case   17:  		/* mr R3, R31 */
		/* 820D88ACh case   17:*/		regs.R3 = regs.R31;
		/* 820D88ACh case   17:*/		return 0x820D88B0;
		  /* 820D88B0h */ case   18:  		/* bl -38640 */
		/* 820D88B0h case   18:*/		regs.LR = 0x820D88B4; return 0x820CF1C0;
		/* 820D88B0h case   18:*/		return 0x820D88B4;
		  /* 820D88B4h */ case   19:  		/* mr R30, R3 */
		/* 820D88B4h case   19:*/		regs.R30 = regs.R3;
		/* 820D88B4h case   19:*/		return 0x820D88B8;
	}
	return 0x820D88B8;
} // Block from 820D8868h-820D88B8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820D88B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D88B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D88B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D88B8);
		  /* 820D88B8h */ case    0:  		/* li R4, 0 */
		/* 820D88B8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D88B8h case    0:*/		return 0x820D88BC;
		  /* 820D88BCh */ case    1:  		/* mr R3, R29 */
		/* 820D88BCh case    1:*/		regs.R3 = regs.R29;
		/* 820D88BCh case    1:*/		return 0x820D88C0;
		  /* 820D88C0h */ case    2:  		/* bl -211608 */
		/* 820D88C0h case    2:*/		regs.LR = 0x820D88C4; return 0x820A4E28;
		/* 820D88C0h case    2:*/		return 0x820D88C4;
	}
	return 0x820D88C4;
} // Block from 820D88B8h-820D88C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D88C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D88C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D88C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D88C4);
		  /* 820D88C4h */ case    0:  		/* mr R3, R31 */
		/* 820D88C4h case    0:*/		regs.R3 = regs.R31;
		/* 820D88C4h case    0:*/		return 0x820D88C8;
		  /* 820D88C8h */ case    1:  		/* bl -34784 */
		/* 820D88C8h case    1:*/		regs.LR = 0x820D88CC; return 0x820D00E8;
		/* 820D88C8h case    1:*/		return 0x820D88CC;
		  /* 820D88CCh */ case    2:  		/* lis R4, 9345 */
		/* 820D88CCh case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820D88CCh case    2:*/		return 0x820D88D0;
		  /* 820D88D0h */ case    3:  		/* mr R3, R31 */
		/* 820D88D0h case    3:*/		regs.R3 = regs.R31;
		/* 820D88D0h case    3:*/		return 0x820D88D4;
		  /* 820D88D4h */ case    4:  		/* bl -329116 */
		/* 820D88D4h case    4:*/		regs.LR = 0x820D88D8; return 0x82088338;
		/* 820D88D4h case    4:*/		return 0x820D88D8;
	}
	return 0x820D88D8;
} // Block from 820D88C4h-820D88D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D88D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D88D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D88D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D88D8);
		  /* 820D88D8h */ case    0:  		/* mr R3, R30 */
		/* 820D88D8h case    0:*/		regs.R3 = regs.R30;
		/* 820D88D8h case    0:*/		return 0x820D88DC;
		  /* 820D88DCh */ case    1:  		/* addi R1, R1, 144 */
		/* 820D88DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820D88DCh case    1:*/		return 0x820D88E0;
		  /* 820D88E0h */ case    2:  		/* b -292416 */
		/* 820D88E0h case    2:*/		return 0x820912A0;
		/* 820D88E0h case    2:*/		return 0x820D88E4;
		  /* 820D88E4h */ case    3:  		/* nop */
		/* 820D88E4h case    3:*/		cpu::op::nop();
		/* 820D88E4h case    3:*/		return 0x820D88E8;
	}
	return 0x820D88E8;
} // Block from 820D88D8h-820D88E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D88E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D88E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D88E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D88E8);
		  /* 820D88E8h */ case    0:  		/* mfspr R12, LR */
		/* 820D88E8h case    0:*/		regs.R12 = regs.LR;
		/* 820D88E8h case    0:*/		return 0x820D88EC;
		  /* 820D88ECh */ case    1:  		/* bl -292496 */
		/* 820D88ECh case    1:*/		regs.LR = 0x820D88F0; return 0x8209125C;
		/* 820D88ECh case    1:*/		return 0x820D88F0;
		  /* 820D88F0h */ case    2:  		/* lwz R10, <#[R3 + 108]> */
		/* 820D88F0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000006C) );
		/* 820D88F0h case    2:*/		return 0x820D88F4;
		  /* 820D88F4h */ case    3:  		/* mr R8, R3 */
		/* 820D88F4h case    3:*/		regs.R8 = regs.R3;
		/* 820D88F4h case    3:*/		return 0x820D88F8;
		  /* 820D88F8h */ case    4:  		/* lwz R5, <#[R3 + 200]> */
		/* 820D88F8h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x000000C8) );
		/* 820D88F8h case    4:*/		return 0x820D88FC;
		  /* 820D88FCh */ case    5:  		/* li R7, 1279 */
		/* 820D88FCh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x4FF);
		/* 820D88FCh case    5:*/		return 0x820D8900;
		  /* 820D8900h */ case    6:  		/* lwz R6, <#[R3 + 112]> */
		/* 820D8900h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000070) );
		/* 820D8900h case    6:*/		return 0x820D8904;
		  /* 820D8904h */ case    7:  		/* rlwinm R4, R10, 0, 10, 8 */
		/* 820D8904h case    7:*/		cpu::op::rlwinm<0,0,10,8>(regs,&regs.R4,regs.R10);
		/* 820D8904h case    7:*/		return 0x820D8908;
		  /* 820D8908h */ case    8:  		/* li R11, 16 */
		/* 820D8908h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 820D8908h case    8:*/		return 0x820D890C;
		  /* 820D890Ch */ case    9:  		/* rlwinm R4, R4, 0, 4, 2 */
		/* 820D890Ch case    9:*/		cpu::op::rlwinm<0,0,4,2>(regs,&regs.R4,regs.R4);
		/* 820D890Ch case    9:*/		return 0x820D8910;
		  /* 820D8910h */ case   10:  		/* rlwimi R6, R7, 18, 6, 13 */
		/* 820D8910h case   10:*/		cpu::op::rlwimi<0,18,6,13>(regs,&regs.R6,regs.R7);
		/* 820D8910h case   10:*/		return 0x820D8914;
		  /* 820D8914h */ case   11:  		/* stw R11, <#[R3 + 40]> */
		/* 820D8914h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 820D8914h case   11:*/		return 0x820D8918;
		  /* 820D8918h */ case   12:  		/* stw R11, <#[R3 + 84]> */
		/* 820D8918h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000054) );
		/* 820D8918h case   12:*/		return 0x820D891C;
		  /* 820D891Ch */ case   13:  		/* li R9, 32 */
		/* 820D891Ch case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x20);
		/* 820D891Ch case   13:*/		return 0x820D8920;
		  /* 820D8920h */ case   14:  		/* stw R11, <#[R3 + 76]> */
		/* 820D8920h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 820D8920h case   14:*/		return 0x820D8924;
		  /* 820D8924h */ case   15:  		/* li R3, 256 */
		/* 820D8924h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x100);
		/* 820D8924h case   15:*/		return 0x820D8928;
		  /* 820D8928h */ case   16:  		/* stw R5, <#[R8 + 268]> */
		/* 820D8928h case   16:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R8 + 0x0000010C) );
		/* 820D8928h case   16:*/		return 0x820D892C;
		  /* 820D892Ch */ case   17:  		/* li R10, 1 */
		/* 820D892Ch case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820D892Ch case   17:*/		return 0x820D8930;
		  /* 820D8930h */ case   18:  		/* li R31, 64 */
		/* 820D8930h case   18:*/		cpu::op::li<0>(regs,&regs.R31,0x40);
		/* 820D8930h case   18:*/		return 0x820D8934;
		  /* 820D8934h */ case   19:  		/* stw R3, <#[R8 + 56]> */
		/* 820D8934h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R8 + 0x00000038) );
		/* 820D8934h case   19:*/		return 0x820D8938;
		  /* 820D8938h */ case   20:  		/* li R5, 255 */
		/* 820D8938h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0xFF);
		/* 820D8938h case   20:*/		return 0x820D893C;
		  /* 820D893Ch */ case   21:  		/* stw R9, <#[R8 + 44]> */
		/* 820D893Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x0000002C) );
		/* 820D893Ch case   21:*/		return 0x820D8940;
		  /* 820D8940h */ case   22:  		/* li R30, 24 */
		/* 820D8940h case   22:*/		cpu::op::li<0>(regs,&regs.R30,0x18);
		/* 820D8940h case   22:*/		return 0x820D8944;
		  /* 820D8944h */ case   23:  		/* stw R10, <#[R8 + 48]> */
		/* 820D8944h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000030) );
		/* 820D8944h case   23:*/		return 0x820D8948;
		  /* 820D8948h */ case   24:  		/* li R29, 4 */
		/* 820D8948h case   24:*/		cpu::op::li<0>(regs,&regs.R29,0x4);
		/* 820D8948h case   24:*/		return 0x820D894C;
		  /* 820D894Ch */ case   25:  		/* stw R31, <#[R8 + 96]> */
		/* 820D894Ch case   25:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R8 + 0x00000060) );
		/* 820D894Ch case   25:*/		return 0x820D8950;
		  /* 820D8950h */ case   26:  		/* ori R4, R4, 513 */
		/* 820D8950h case   26:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x201);
		/* 820D8950h case   26:*/		return 0x820D8954;
		  /* 820D8954h */ case   27:  		/* stw R9, <#[R8 + 64]> */
		/* 820D8954h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000040) );
		/* 820D8954h case   27:*/		return 0x820D8958;
		  /* 820D8958h */ case   28:  		/* rlwimi R6, R7, 18, 2, 4 */
		/* 820D8958h case   28:*/		cpu::op::rlwimi<0,18,2,4>(regs,&regs.R6,regs.R7);
		/* 820D8958h case   28:*/		return 0x820D895C;
		  /* 820D895Ch */ case   29:  		/* stw R5, <#[R8 + 104]> */
		/* 820D895Ch case   29:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R8 + 0x00000068) );
		/* 820D895Ch case   29:*/		return 0x820D8960;
		  /* 820D8960h */ case   30:  		/* stw R10, <#[R8 + 100]> */
		/* 820D8960h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000064) );
		/* 820D8960h case   30:*/		return 0x820D8964;
		  /* 820D8964h */ case   31:  		/* li R3, 0 */
		/* 820D8964h case   31:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D8964h case   31:*/		return 0x820D8968;
		  /* 820D8968h */ case   32:  		/* stw R30, <#[R8 + 88]> */
		/* 820D8968h case   32:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R8 + 0x00000058) );
		/* 820D8968h case   32:*/		return 0x820D896C;
		  /* 820D896Ch */ case   33:  		/* stw R29, <#[R8 + 92]> */
		/* 820D896Ch case   33:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R8 + 0x0000005C) );
		/* 820D896Ch case   33:*/		return 0x820D8970;
		  /* 820D8970h */ case   34:  		/* stw R4, <#[R8 + 108]> */
		/* 820D8970h case   34:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R8 + 0x0000006C) );
		/* 820D8970h case   34:*/		return 0x820D8974;
		  /* 820D8974h */ case   35:  		/* stw R6, <#[R8 + 112]> */
		/* 820D8974h case   35:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R8 + 0x00000070) );
		/* 820D8974h case   35:*/		return 0x820D8978;
		  /* 820D8978h */ case   36:  		/* stw R11, <#[R8 + 68]> */
		/* 820D8978h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000044) );
		/* 820D8978h case   36:*/		return 0x820D897C;
		  /* 820D897Ch */ case   37:  		/* stw R9, <#[R8 + 468]> */
		/* 820D897Ch case   37:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x000001D4) );
		/* 820D897Ch case   37:*/		return 0x820D8980;
		  /* 820D8980h */ case   38:  		/* stw R10, <#[R8 + 344]> */
		/* 820D8980h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000158) );
		/* 820D8980h case   38:*/		return 0x820D8984;
		  /* 820D8984h */ case   39:  		/* b -292568 */
		/* 820D8984h case   39:*/		return 0x820912AC;
		/* 820D8984h case   39:*/		return 0x820D8988;
	}
	return 0x820D8988;
} // Block from 820D88E8h-820D8988h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820D8988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8988);
		  /* 820D8988h */ case    0:  		/* mfspr R12, LR */
		/* 820D8988h case    0:*/		regs.R12 = regs.LR;
		/* 820D8988h case    0:*/		return 0x820D898C;
		  /* 820D898Ch */ case    1:  		/* bl -292716 */
		/* 820D898Ch case    1:*/		regs.LR = 0x820D8990; return 0x82091220;
		/* 820D898Ch case    1:*/		return 0x820D8990;
		  /* 820D8990h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 820D8990h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 820D8990h case    2:*/		return 0x820D8994;
		  /* 820D8994h */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 820D8994h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 820D8994h case    3:*/		return 0x820D8998;
		  /* 820D8998h */ case    4:  		/* mr R31, R3 */
		/* 820D8998h case    4:*/		regs.R31 = regs.R3;
		/* 820D8998h case    4:*/		return 0x820D899C;
		  /* 820D899Ch */ case    5:  		/* li R30, 0 */
		/* 820D899Ch case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820D899Ch case    5:*/		return 0x820D89A0;
		  /* 820D89A0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820D89A0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D89A0h case    6:*/		return 0x820D89A4;
		  /* 820D89A4h */ case    7:  		/* bc 4, CR6_GT, 52 */
		/* 820D89A4h case    7:*/		if ( !regs.CR[6].gt ) { return 0x820D89D8;  }
		/* 820D89A4h case    7:*/		return 0x820D89A8;
		  /* 820D89A8h */ case    8:  		/* li R29, 0 */
		/* 820D89A8h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820D89A8h case    8:*/		return 0x820D89AC;
		  /* 820D89ACh */ case    9:  		/* lwz R11, <#[R31 + 24]> */
		/* 820D89ACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820D89ACh case    9:*/		return 0x820D89B0;
		  /* 820D89B0h */ case   10:  		/* mr R3, R31 */
		/* 820D89B0h case   10:*/		regs.R3 = regs.R31;
		/* 820D89B0h case   10:*/		return 0x820D89B4;
		  /* 820D89B4h */ case   11:  		/* stw R30, <#[R31 + 256]> */
		/* 820D89B4h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 820D89B4h case   11:*/		return 0x820D89B8;
		  /* 820D89B8h */ case   12:  		/* lwzx R11, <#[R11 + R29]> */
		/* 820D89B8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820D89B8h case   12:*/		return 0x820D89BC;
		  /* 820D89BCh */ case   13:  		/* stw R11, <#[R31 + 260]> */
		/* 820D89BCh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820D89BCh case   13:*/		return 0x820D89C0;
		  /* 820D89C0h */ case   14:  		/* bl 50952 */
		/* 820D89C0h case   14:*/		regs.LR = 0x820D89C4; return 0x820E50C8;
		/* 820D89C0h case   14:*/		return 0x820D89C4;
		  /* 820D89C4h */ case   15:  		/* lwz R11, <#[R31 + 12]> */
		/* 820D89C4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D89C4h case   15:*/		return 0x820D89C8;
		  /* 820D89C8h */ case   16:  		/* addi R30, R30, 1 */
		/* 820D89C8h case   16:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820D89C8h case   16:*/		return 0x820D89CC;
		  /* 820D89CCh */ case   17:  		/* addi R29, R29, 4 */
		/* 820D89CCh case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820D89CCh case   17:*/		return 0x820D89D0;
		  /* 820D89D0h */ case   18:  		/* cmplw CR6, R30, R11 */
		/* 820D89D0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820D89D0h case   18:*/		return 0x820D89D4;
		  /* 820D89D4h */ case   19:  		/* bc 12, CR6_LT, -40 */
		/* 820D89D4h case   19:*/		if ( regs.CR[6].lt ) { return 0x820D89AC;  }
		/* 820D89D4h case   19:*/		return 0x820D89D8;
	}
	return 0x820D89D8;
} // Block from 820D8988h-820D89D8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820D89D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D89D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D89D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D89D8);
		  /* 820D89D8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 820D89D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D89D8h case    0:*/		return 0x820D89DC;
		  /* 820D89DCh */ case    1:  		/* li R10, 0 */
		/* 820D89DCh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820D89DCh case    1:*/		return 0x820D89E0;
		  /* 820D89E0h */ case    2:  		/* stw R10, <#[R1 + 80]> */
		/* 820D89E0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 820D89E0h case    2:*/		return 0x820D89E4;
		  /* 820D89E4h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820D89E4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D89E4h case    3:*/		return 0x820D89E8;
		  /* 820D89E8h */ case    4:  		/* bc 4, CR6_GT, 1876 */
		/* 820D89E8h case    4:*/		if ( !regs.CR[6].gt ) { return 0x820D913C;  }
		/* 820D89E8h case    4:*/		return 0x820D89EC;
		  /* 820D89ECh */ case    5:  		/* lis R11, -32768 */
		/* 820D89ECh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 820D89ECh case    5:*/		return 0x820D89F0;
		  /* 820D89F0h */ case    6:  		/* lis R29, 24816 */
		/* 820D89F0h case    6:*/		cpu::op::lis<0>(regs,&regs.R29,0x60F0);
		/* 820D89F0h case    6:*/		return 0x820D89F4;
		  /* 820D89F4h */ case    7:  		/* lis R14, 4336 */
		/* 820D89F4h case    7:*/		cpu::op::lis<0>(regs,&regs.R14,0x10F0);
		/* 820D89F4h case    7:*/		return 0x820D89F8;
		  /* 820D89F8h */ case    8:  		/* lis R15, 4176 */
		/* 820D89F8h case    8:*/		cpu::op::lis<0>(regs,&regs.R15,0x1050);
		/* 820D89F8h case    8:*/		return 0x820D89FC;
		  /* 820D89FCh */ case    9:  		/* lis R30, 1 */
		/* 820D89FCh case    9:*/		cpu::op::lis<0>(regs,&regs.R30,0x1);
		/* 820D89FCh case    9:*/		return 0x820D8A00;
		  /* 820D8A00h */ case   10:  		/* ori R27, R11, 16385 */
		/* 820D8A00h case   10:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R11,0x4001);
		/* 820D8A00h case   10:*/		return 0x820D8A04;
		  /* 820D8A04h */ case   11:  		/* lis R16, 8208 */
		/* 820D8A04h case   11:*/		cpu::op::lis<0>(regs,&regs.R16,0x2010);
		/* 820D8A04h case   11:*/		return 0x820D8A08;
		  /* 820D8A08h */ case   12:  		/* lis R17, 24640 */
		/* 820D8A08h case   12:*/		cpu::op::lis<0>(regs,&regs.R17,0x6040);
		/* 820D8A08h case   12:*/		return 0x820D8A0C;
		  /* 820D8A0Ch */ case   13:  		/* lis R18, 20528 */
		/* 820D8A0Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R18,0x5030);
		/* 820D8A0Ch case   13:*/		return 0x820D8A10;
		  /* 820D8A10h */ case   14:  		/* lis R28, 15 */
		/* 820D8A10h case   14:*/		cpu::op::lis<0>(regs,&regs.R28,0xF);
		/* 820D8A10h case   14:*/		return 0x820D8A14;
		  /* 820D8A14h */ case   15:  		/* lis R19, 24736 */
		/* 820D8A14h case   15:*/		cpu::op::lis<0>(regs,&regs.R19,0x60A0);
		/* 820D8A14h case   15:*/		return 0x820D8A18;
		  /* 820D8A18h */ case   16:  		/* lis R20, 29504 */
		/* 820D8A18h case   16:*/		cpu::op::lis<0>(regs,&regs.R20,0x7340);
		/* 820D8A18h case   16:*/		return 0x820D8A1C;
		  /* 820D8A1Ch */ case   17:  		/* lis R21, 28768 */
		/* 820D8A1Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R21,0x7060);
		/* 820D8A1Ch case   17:*/		return 0x820D8A20;
		  /* 820D8A20h */ case   18:  		/* lis R22, 28688 */
		/* 820D8A20h case   18:*/		cpu::op::lis<0>(regs,&regs.R22,0x7010);
		/* 820D8A20h case   18:*/		return 0x820D8A24;
		  /* 820D8A24h */ case   19:  		/* lis R23, 28880 */
		/* 820D8A24h case   19:*/		cpu::op::lis<0>(regs,&regs.R23,0x70D0);
		/* 820D8A24h case   19:*/		return 0x820D8A28;
		  /* 820D8A28h */ case   20:  		/* lis R24, 29680 */
		/* 820D8A28h case   20:*/		cpu::op::lis<0>(regs,&regs.R24,0x73F0);
		/* 820D8A28h case   20:*/		return 0x820D8A2C;
		  /* 820D8A2Ch */ case   21:  		/* lis R25, 29600 */
		/* 820D8A2Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R25,0x73A0);
		/* 820D8A2Ch case   21:*/		return 0x820D8A30;
		  /* 820D8A30h */ case   22:  		/* lis R26, 29776 */
		/* 820D8A30h case   22:*/		cpu::op::lis<0>(regs,&regs.R26,0x7450);
		/* 820D8A30h case   22:*/		return 0x820D8A34;
		  /* 820D8A34h */ case   23:  		/* lwz R11, <#[R1 + 80]> */
		/* 820D8A34h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820D8A34h case   23:*/		return 0x820D8A38;
		  /* 820D8A38h */ case   24:  		/* lwz R10, <#[R31 + 24]> */
		/* 820D8A38h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820D8A38h case   24:*/		return 0x820D8A3C;
		  /* 820D8A3Ch */ case   25:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 820D8A3Ch case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 820D8A3Ch case   25:*/		return 0x820D8A40;
		  /* 820D8A40h */ case   26:  		/* stw R11, <#[R31 + 256]> */
		/* 820D8A40h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 820D8A40h case   26:*/		return 0x820D8A44;
		  /* 820D8A44h */ case   27:  		/* lwzx R11, <#[R9 + R10]> */
		/* 820D8A44h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820D8A44h case   27:*/		return 0x820D8A48;
		  /* 820D8A48h */ case   28:  		/* stw R11, <#[R31 + 260]> */
		/* 820D8A48h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820D8A48h case   28:*/		return 0x820D8A4C;
		  /* 820D8A4Ch */ case   29:  		/* lwz R11, <#[R11 + 60]> */
		/* 820D8A4Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 820D8A4Ch case   29:*/		return 0x820D8A50;
		  /* 820D8A50h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 820D8A50h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D8A50h case   30:*/		return 0x820D8A54;
		  /* 820D8A54h */ case   31:  		/* bc 12, CR6_EQ, 24 */
		/* 820D8A54h case   31:*/		if ( regs.CR[6].eq ) { return 0x820D8A6C;  }
		/* 820D8A54h case   31:*/		return 0x820D8A58;
		  /* 820D8A58h */ case   32:  		/* lwz R10, <#[R11 + 4]> */
		/* 820D8A58h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820D8A58h case   32:*/		return 0x820D8A5C;
		  /* 820D8A5Ch */ case   33:  		/* cmpwi CR6, R10, 14 */
		/* 820D8A5Ch case   33:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 820D8A5Ch case   33:*/		return 0x820D8A60;
		  /* 820D8A60h */ case   34:  		/* bc 4, CR6_EQ, 12 */
		/* 820D8A60h case   34:*/		if ( !regs.CR[6].eq ) { return 0x820D8A6C;  }
		/* 820D8A60h case   34:*/		return 0x820D8A64;
		  /* 820D8A64h */ case   35:  		/* addi R11, R11, 48 */
		/* 820D8A64h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x30);
		/* 820D8A64h case   35:*/		return 0x820D8A68;
		  /* 820D8A68h */ case   36:  		/* stw R11, <#[R31 + 264]> */
		/* 820D8A68h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000108) );
		/* 820D8A68h case   36:*/		return 0x820D8A6C;
	}
	return 0x820D8A6C;
} // Block from 820D89D8h-820D8A6Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 820D8A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8A6C);
		  /* 820D8A6Ch */ case    0:  		/* mr R3, R31 */
		/* 820D8A6Ch case    0:*/		regs.R3 = regs.R31;
		/* 820D8A6Ch case    0:*/		return 0x820D8A70;
		  /* 820D8A70h */ case    1:  		/* bl 431176 */
		/* 820D8A70h case    1:*/		regs.LR = 0x820D8A74; return 0x82141EB8;
		/* 820D8A70h case    1:*/		return 0x820D8A74;
		  /* 820D8A74h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820D8A74h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D8A74h case    2:*/		return 0x820D8A78;
		  /* 820D8A78h */ case    3:  		/* bc 12, CR0_LT, 1736 */
		/* 820D8A78h case    3:*/		if ( regs.CR[0].lt ) { return 0x820D9140;  }
		/* 820D8A78h case    3:*/		return 0x820D8A7C;
		  /* 820D8A7Ch */ case    4:  		/* lwz R11, <#[R31 + 260]> */
		/* 820D8A7Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820D8A7Ch case    4:*/		return 0x820D8A80;
		  /* 820D8A80h */ case    5:  		/* li R10, 0 */
		/* 820D8A80h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820D8A80h case    5:*/		return 0x820D8A84;
		  /* 820D8A84h */ case    6:  		/* stw R10, <#[R31 + 1820]> */
		/* 820D8A84h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000071C) );
		/* 820D8A84h case    6:*/		return 0x820D8A88;
		  /* 820D8A88h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 820D8A88h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820D8A88h case    7:*/		return 0x820D8A8C;
		  /* 820D8A8Ch */ case    8:  		/* rlwinm R11, R10, 0, 0, 11 */
		/* 820D8A8Ch case    8:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R10);
		/* 820D8A8Ch case    8:*/		return 0x820D8A90;
		  /* 820D8A90h */ case    9:  		/* cmplw CR6, R11, R29 */
		/* 820D8A90h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 820D8A90h case    9:*/		return 0x820D8A94;
		  /* 820D8A94h */ case   10:  		/* bc 12, CR6_GT, 964 */
		/* 820D8A94h case   10:*/		if ( regs.CR[6].gt ) { return 0x820D8E58;  }
		/* 820D8A94h case   10:*/		return 0x820D8A98;
		  /* 820D8A98h */ case   11:  		/* bc 12, CR6_EQ, 936 */
		/* 820D8A98h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D8E40;  }
		/* 820D8A98h case   11:*/		return 0x820D8A9C;
		  /* 820D8A9Ch */ case   12:  		/* lis R9, 8304 */
		/* 820D8A9Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0x2070);
		/* 820D8A9Ch case   12:*/		return 0x820D8AA0;
		  /* 820D8AA0h */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 820D8AA0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820D8AA0h case   13:*/		return 0x820D8AA4;
		  /* 820D8AA4h */ case   14:  		/* bc 12, CR6_GT, 520 */
		/* 820D8AA4h case   14:*/		if ( regs.CR[6].gt ) { return 0x820D8CAC;  }
		/* 820D8AA4h case   14:*/		return 0x820D8AA8;
		  /* 820D8AA8h */ case   15:  		/* bc 12, CR6_EQ, 504 */
		/* 820D8AA8h case   15:*/		if ( regs.CR[6].eq ) { return 0x820D8CA0;  }
		/* 820D8AA8h case   15:*/		return 0x820D8AAC;
		  /* 820D8AACh */ case   16:  		/* cmplw CR6, R11, R14 */
		/* 820D8AACh case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R14);
		/* 820D8AACh case   16:*/		return 0x820D8AB0;
		  /* 820D8AB0h */ case   17:  		/* bc 12, CR6_GT, 292 */
		/* 820D8AB0h case   17:*/		if ( regs.CR[6].gt ) { return 0x820D8BD4;  }
		/* 820D8AB0h case   17:*/		return 0x820D8AB4;
		  /* 820D8AB4h */ case   18:  		/* bc 12, CR6_EQ, 1504 */
		/* 820D8AB4h case   18:*/		if ( regs.CR[6].eq ) { return 0x820D9094;  }
		/* 820D8AB4h case   18:*/		return 0x820D8AB8;
		  /* 820D8AB8h */ case   19:  		/* cmplw CR6, R11, R15 */
		/* 820D8AB8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R15);
		/* 820D8AB8h case   19:*/		return 0x820D8ABC;
		  /* 820D8ABCh */ case   20:  		/* bc 12, CR6_GT, 144 */
		/* 820D8ABCh case   20:*/		if ( regs.CR[6].gt ) { return 0x820D8B4C;  }
		/* 820D8ABCh case   20:*/		return 0x820D8AC0;
		  /* 820D8AC0h */ case   21:  		/* bc 12, CR6_EQ, 124 */
		/* 820D8AC0h case   21:*/		if ( regs.CR[6].eq ) { return 0x820D8B3C;  }
		/* 820D8AC0h case   21:*/		return 0x820D8AC4;
		  /* 820D8AC4h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 820D8AC4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D8AC4h case   22:*/		return 0x820D8AC8;
		  /* 820D8AC8h */ case   23:  		/* bc 12, CR6_EQ, 104 */
		/* 820D8AC8h case   23:*/		if ( regs.CR[6].eq ) { return 0x820D8B30;  }
		/* 820D8AC8h case   23:*/		return 0x820D8ACC;
		  /* 820D8ACCh */ case   24:  		/* lis R10, 4096 */
		/* 820D8ACCh case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 820D8ACCh case   24:*/		return 0x820D8AD0;
		  /* 820D8AD0h */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 820D8AD0h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8AD0h case   25:*/		return 0x820D8AD4;
		  /* 820D8AD4h */ case   26:  		/* bc 12, CR6_EQ, 80 */
		/* 820D8AD4h case   26:*/		if ( regs.CR[6].eq ) { return 0x820D8B24;  }
		/* 820D8AD4h case   26:*/		return 0x820D8AD8;
		  /* 820D8AD8h */ case   27:  		/* lis R10, 4112 */
		/* 820D8AD8h case   27:*/		cpu::op::lis<0>(regs,&regs.R10,0x1010);
		/* 820D8AD8h case   27:*/		return 0x820D8ADC;
		  /* 820D8ADCh */ case   28:  		/* cmplw CR6, R11, R10 */
		/* 820D8ADCh case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8ADCh case   28:*/		return 0x820D8AE0;
		  /* 820D8AE0h */ case   29:  		/* bc 12, CR6_EQ, 56 */
		/* 820D8AE0h case   29:*/		if ( regs.CR[6].eq ) { return 0x820D8B18;  }
		/* 820D8AE0h case   29:*/		return 0x820D8AE4;
		  /* 820D8AE4h */ case   30:  		/* lis R10, 4144 */
		/* 820D8AE4h case   30:*/		cpu::op::lis<0>(regs,&regs.R10,0x1030);
		/* 820D8AE4h case   30:*/		return 0x820D8AE8;
		  /* 820D8AE8h */ case   31:  		/* cmplw CR6, R11, R10 */
		/* 820D8AE8h case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8AE8h case   31:*/		return 0x820D8AEC;
		  /* 820D8AECh */ case   32:  		/* bc 12, CR6_EQ, 28 */
		/* 820D8AECh case   32:*/		if ( regs.CR[6].eq ) { return 0x820D8B08;  }
		/* 820D8AECh case   32:*/		return 0x820D8AF0;
		  /* 820D8AF0h */ case   33:  		/* lis R10, 4160 */
		/* 820D8AF0h case   33:*/		cpu::op::lis<0>(regs,&regs.R10,0x1040);
		/* 820D8AF0h case   33:*/		return 0x820D8AF4;
		  /* 820D8AF4h */ case   34:  		/* cmplw CR6, R11, R10 */
		/* 820D8AF4h case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8AF4h case   34:*/		return 0x820D8AF8;
		  /* 820D8AF8h */ case   35:  		/* bc 4, CR6_EQ, 1716 */
		/* 820D8AF8h case   35:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D8AF8h case   35:*/		return 0x820D8AFC;
		  /* 820D8AFCh */ case   36:  		/* lwz R11, <#[R31]> */
		/* 820D8AFCh case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8AFCh case   36:*/		return 0x820D8B00;
		  /* 820D8B00h */ case   37:  		/* lwz R11, <#[R11 + 136]> */
		/* 820D8B00h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000088) );
		/* 820D8B00h case   37:*/		return 0x820D8B04;
		  /* 820D8B04h */ case   38:  		/* b 1548 */
		/* 820D8B04h case   38:*/		return 0x820D9110;
		/* 820D8B04h case   38:*/		return 0x820D8B08;
	}
	return 0x820D8B08;
} // Block from 820D8A6Ch-820D8B08h (39 instructions)

//////////////////////////////////////////////////////
// Block at 820D8B08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8B08);
		  /* 820D8B08h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8B08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8B08h case    0:*/		return 0x820D8B0C;
		  /* 820D8B0Ch */ case    1:  		/* stw R30, <#[R31 + 1820]> */
		/* 820D8B0Ch case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000071C) );
		/* 820D8B0Ch case    1:*/		return 0x820D8B10;
		  /* 820D8B10h */ case    2:  		/* lwz R11, <#[R11 + 132]> */
		/* 820D8B10h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000084) );
		/* 820D8B10h case    2:*/		return 0x820D8B14;
		  /* 820D8B14h */ case    3:  		/* b 1532 */
		/* 820D8B14h case    3:*/		return 0x820D9110;
		/* 820D8B14h case    3:*/		return 0x820D8B18;
	}
	return 0x820D8B18;
} // Block from 820D8B08h-820D8B18h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D8B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8B18);
		  /* 820D8B18h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8B18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8B18h case    0:*/		return 0x820D8B1C;
		  /* 820D8B1Ch */ case    1:  		/* lwz R11, <#[R11 + 128]> */
		/* 820D8B1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000080) );
		/* 820D8B1Ch case    1:*/		return 0x820D8B20;
		  /* 820D8B20h */ case    2:  		/* b 1520 */
		/* 820D8B20h case    2:*/		return 0x820D9110;
		/* 820D8B20h case    2:*/		return 0x820D8B24;
	}
	return 0x820D8B24;
} // Block from 820D8B18h-820D8B24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8B24);
		  /* 820D8B24h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8B24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8B24h case    0:*/		return 0x820D8B28;
		  /* 820D8B28h */ case    1:  		/* lwz R11, <#[R11 + 124]> */
		/* 820D8B28h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000007C) );
		/* 820D8B28h case    1:*/		return 0x820D8B2C;
		  /* 820D8B2Ch */ case    2:  		/* b 1508 */
		/* 820D8B2Ch case    2:*/		return 0x820D9110;
		/* 820D8B2Ch case    2:*/		return 0x820D8B30;
	}
	return 0x820D8B30;
} // Block from 820D8B24h-820D8B30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8B30);
		  /* 820D8B30h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8B30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8B30h case    0:*/		return 0x820D8B34;
		  /* 820D8B34h */ case    1:  		/* lwz R11, <#[R11 + 120]> */
		/* 820D8B34h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000078) );
		/* 820D8B34h case    1:*/		return 0x820D8B38;
		  /* 820D8B38h */ case    2:  		/* b 1496 */
		/* 820D8B38h case    2:*/		return 0x820D9110;
		/* 820D8B38h case    2:*/		return 0x820D8B3C;
	}
	return 0x820D8B3C;
} // Block from 820D8B30h-820D8B3Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8B3C);
		  /* 820D8B3Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8B3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8B3Ch case    0:*/		return 0x820D8B40;
		  /* 820D8B40h */ case    1:  		/* stw R30, <#[R31 + 1820]> */
		/* 820D8B40h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000071C) );
		/* 820D8B40h case    1:*/		return 0x820D8B44;
		  /* 820D8B44h */ case    2:  		/* lwz R11, <#[R11 + 140]> */
		/* 820D8B44h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000008C) );
		/* 820D8B44h case    2:*/		return 0x820D8B48;
		  /* 820D8B48h */ case    3:  		/* b 1480 */
		/* 820D8B48h case    3:*/		return 0x820D9110;
		/* 820D8B48h case    3:*/		return 0x820D8B4C;
	}
	return 0x820D8B4C;
} // Block from 820D8B3Ch-820D8B4Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D8B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8B4C);
		  /* 820D8B4Ch */ case    0:  		/* lis R10, 4192 */
		/* 820D8B4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x1060);
		/* 820D8B4Ch case    0:*/		return 0x820D8B50;
		  /* 820D8B50h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820D8B50h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8B50h case    1:*/		return 0x820D8B54;
		  /* 820D8B54h */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 820D8B54h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D8BC4;  }
		/* 820D8B54h case    2:*/		return 0x820D8B58;
		  /* 820D8B58h */ case    3:  		/* lis R10, 4208 */
		/* 820D8B58h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x1070);
		/* 820D8B58h case    3:*/		return 0x820D8B5C;
		  /* 820D8B5Ch */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D8B5Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8B5Ch case    4:*/		return 0x820D8B60;
		  /* 820D8B60h */ case    5:  		/* bc 12, CR6_EQ, 84 */
		/* 820D8B60h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8BB4;  }
		/* 820D8B60h case    5:*/		return 0x820D8B64;
		  /* 820D8B64h */ case    6:  		/* lis R10, 4304 */
		/* 820D8B64h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x10D0);
		/* 820D8B64h case    6:*/		return 0x820D8B68;
		  /* 820D8B68h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D8B68h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8B68h case    7:*/		return 0x820D8B6C;
		  /* 820D8B6Ch */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 820D8B6Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x820D8B94;  }
		/* 820D8B6Ch case    8:*/		return 0x820D8B70;
		  /* 820D8B70h */ case    9:  		/* lis R10, 4320 */
		/* 820D8B70h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x10E0);
		/* 820D8B70h case    9:*/		return 0x820D8B74;
		  /* 820D8B74h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D8B74h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8B74h case   10:*/		return 0x820D8B78;
		  /* 820D8B78h */ case   11:  		/* bc 4, CR6_EQ, 1588 */
		/* 820D8B78h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D8B78h case   11:*/		return 0x820D8B7C;
		  /* 820D8B7Ch */ case   12:  		/* lwz R11, <#[R31 + 112]> */
		/* 820D8B7Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 820D8B7Ch case   12:*/		return 0x820D8B80;
		  /* 820D8B80h */ case   13:  		/* rlwinm. R11, R11, 0, 5, 5 */
		/* 820D8B80h case   13:*/		cpu::op::rlwinm<1,0,5,5>(regs,&regs.R11,regs.R11);
		/* 820D8B80h case   13:*/		return 0x820D8B84;
		  /* 820D8B84h */ case   14:  		/* bc 12, CR0_EQ, 40 */
		/* 820D8B84h case   14:*/		if ( regs.CR[0].eq ) { return 0x820D8BAC;  }
		/* 820D8B84h case   14:*/		return 0x820D8B88;
		  /* 820D8B88h */ case   15:  		/* lwz R11, <#[R31]> */
		/* 820D8B88h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8B88h case   15:*/		return 0x820D8B8C;
		  /* 820D8B8Ch */ case   16:  		/* lwz R11, <#[R11 + 228]> */
		/* 820D8B8Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000E4) );
		/* 820D8B8Ch case   16:*/		return 0x820D8B90;
		  /* 820D8B90h */ case   17:  		/* b 1408 */
		/* 820D8B90h case   17:*/		return 0x820D9110;
		/* 820D8B90h case   17:*/		return 0x820D8B94;
	}
	return 0x820D8B94;
} // Block from 820D8B4Ch-820D8B94h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820D8B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8B94);
		  /* 820D8B94h */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 820D8B94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 820D8B94h case    0:*/		return 0x820D8B98;
		  /* 820D8B98h */ case    1:  		/* rlwinm. R11, R11, 0, 5, 5 */
		/* 820D8B98h case    1:*/		cpu::op::rlwinm<1,0,5,5>(regs,&regs.R11,regs.R11);
		/* 820D8B98h case    1:*/		return 0x820D8B9C;
		  /* 820D8B9Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 820D8B9Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x820D8BAC;  }
		/* 820D8B9Ch case    2:*/		return 0x820D8BA0;
		  /* 820D8BA0h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 820D8BA0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8BA0h case    3:*/		return 0x820D8BA4;
		  /* 820D8BA4h */ case    4:  		/* lwz R11, <#[R11 + 224]> */
		/* 820D8BA4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000E0) );
		/* 820D8BA4h case    4:*/		return 0x820D8BA8;
		  /* 820D8BA8h */ case    5:  		/* b 1384 */
		/* 820D8BA8h case    5:*/		return 0x820D9110;
		/* 820D8BA8h case    5:*/		return 0x820D8BAC;
	}
	return 0x820D8BAC;
} // Block from 820D8B94h-820D8BACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D8BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8BAC);
		  /* 820D8BACh */ case    0:  		/* mr R3, R27 */
		/* 820D8BACh case    0:*/		regs.R3 = regs.R27;
		/* 820D8BACh case    0:*/		return 0x820D8BB0;
		  /* 820D8BB0h */ case    1:  		/* b 1388 */
		/* 820D8BB0h case    1:*/		return 0x820D911C;
		/* 820D8BB0h case    1:*/		return 0x820D8BB4;
	}
	return 0x820D8BB4;
} // Block from 820D8BACh-820D8BB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D8BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8BB4);
		  /* 820D8BB4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8BB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8BB4h case    0:*/		return 0x820D8BB8;
		  /* 820D8BB8h */ case    1:  		/* stw R30, <#[R31 + 1820]> */
		/* 820D8BB8h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000071C) );
		/* 820D8BB8h case    1:*/		return 0x820D8BBC;
		  /* 820D8BBCh */ case    2:  		/* lwz R11, <#[R11 + 152]> */
		/* 820D8BBCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000098) );
		/* 820D8BBCh case    2:*/		return 0x820D8BC0;
		  /* 820D8BC0h */ case    3:  		/* b 1360 */
		/* 820D8BC0h case    3:*/		return 0x820D9110;
		/* 820D8BC0h case    3:*/		return 0x820D8BC4;
	}
	return 0x820D8BC4;
} // Block from 820D8BB4h-820D8BC4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D8BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8BC4);
		  /* 820D8BC4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8BC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8BC4h case    0:*/		return 0x820D8BC8;
		  /* 820D8BC8h */ case    1:  		/* stw R30, <#[R31 + 1820]> */
		/* 820D8BC8h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000071C) );
		/* 820D8BC8h case    1:*/		return 0x820D8BCC;
		  /* 820D8BCCh */ case    2:  		/* lwz R11, <#[R11 + 144]> */
		/* 820D8BCCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000090) );
		/* 820D8BCCh case    2:*/		return 0x820D8BD0;
		  /* 820D8BD0h */ case    3:  		/* b 1344 */
		/* 820D8BD0h case    3:*/		return 0x820D9110;
		/* 820D8BD0h case    3:*/		return 0x820D8BD4;
	}
	return 0x820D8BD4;
} // Block from 820D8BC4h-820D8BD4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D8BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8BD4);
		  /* 820D8BD4h */ case    0:  		/* cmplw CR6, R11, R16 */
		/* 820D8BD4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 820D8BD4h case    0:*/		return 0x820D8BD8;
		  /* 820D8BD8h */ case    1:  		/* bc 12, CR6_GT, 104 */
		/* 820D8BD8h case    1:*/		if ( regs.CR[6].gt ) { return 0x820D8C40;  }
		/* 820D8BD8h case    1:*/		return 0x820D8BDC;
		  /* 820D8BDCh */ case    2:  		/* bc 12, CR6_EQ, 948 */
		/* 820D8BDCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820D8F90;  }
		/* 820D8BDCh case    2:*/		return 0x820D8BE0;
		  /* 820D8BE0h */ case    3:  		/* lis R10, 4352 */
		/* 820D8BE0h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x1100);
		/* 820D8BE0h case    3:*/		return 0x820D8BE4;
		  /* 820D8BE4h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D8BE4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8BE4h case    4:*/		return 0x820D8BE8;
		  /* 820D8BE8h */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 820D8BE8h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8C28;  }
		/* 820D8BE8h case    5:*/		return 0x820D8BEC;
		  /* 820D8BECh */ case    6:  		/* lis R10, 4384 */
		/* 820D8BECh case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x1120);
		/* 820D8BECh case    6:*/		return 0x820D8BF0;
		  /* 820D8BF0h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D8BF0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8BF0h case    7:*/		return 0x820D8BF4;
		  /* 820D8BF4h */ case    8:  		/* bc 12, CR6_EQ, -208 */
		/* 820D8BF4h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D8B24;  }
		/* 820D8BF4h case    8:*/		return 0x820D8BF8;
		  /* 820D8BF8h */ case    9:  		/* lis R10, 4400 */
		/* 820D8BF8h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x1130);
		/* 820D8BF8h case    9:*/		return 0x820D8BFC;
		  /* 820D8BFCh */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D8BFCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8BFCh case   10:*/		return 0x820D8C00;
		  /* 820D8C00h */ case   11:  		/* bc 12, CR6_EQ, 1316 */
		/* 820D8C00h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D9124;  }
		/* 820D8C00h case   11:*/		return 0x820D8C04;
		  /* 820D8C04h */ case   12:  		/* lis R10, 4432 */
		/* 820D8C04h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x1150);
		/* 820D8C04h case   12:*/		return 0x820D8C08;
		  /* 820D8C08h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 820D8C08h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8C08h case   13:*/		return 0x820D8C0C;
		  /* 820D8C0Ch */ case   14:  		/* bc 12, CR6_EQ, -232 */
		/* 820D8C0Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x820D8B24;  }
		/* 820D8C0Ch case   14:*/		return 0x820D8C10;
		  /* 820D8C10h */ case   15:  		/* lis R10, 8192 */
		/* 820D8C10h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x2000);
		/* 820D8C10h case   15:*/		return 0x820D8C14;
		  /* 820D8C14h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 820D8C14h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8C14h case   16:*/		return 0x820D8C18;
		  /* 820D8C18h */ case   17:  		/* bc 4, CR6_EQ, 1428 */
		/* 820D8C18h case   17:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D8C18h case   17:*/		return 0x820D8C1C;
		  /* 820D8C1Ch */ case   18:  		/* lwz R11, <#[R31]> */
		/* 820D8C1Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8C1Ch case   18:*/		return 0x820D8C20;
		  /* 820D8C20h */ case   19:  		/* lwz R11, <#[R11 + 156]> */
		/* 820D8C20h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000009C) );
		/* 820D8C20h case   19:*/		return 0x820D8C24;
		  /* 820D8C24h */ case   20:  		/* b 1260 */
		/* 820D8C24h case   20:*/		return 0x820D9110;
		/* 820D8C24h case   20:*/		return 0x820D8C28;
	}
	return 0x820D8C28;
} // Block from 820D8BD4h-820D8C28h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820D8C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8C28);
		  /* 820D8C28h */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 820D8C28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 820D8C28h case    0:*/		return 0x820D8C2C;
		  /* 820D8C2Ch */ case    1:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 820D8C2Ch case    1:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 820D8C2Ch case    1:*/		return 0x820D8C30;
		  /* 820D8C30h */ case    2:  		/* bc 4, CR0_EQ, 1404 */
		/* 820D8C30h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820D91AC;  }
		/* 820D8C30h case    2:*/		return 0x820D8C34;
		  /* 820D8C34h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 820D8C34h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8C34h case    3:*/		return 0x820D8C38;
		  /* 820D8C38h */ case    4:  		/* lwz R11, <#[R11 + 220]> */
		/* 820D8C38h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000DC) );
		/* 820D8C38h case    4:*/		return 0x820D8C3C;
		  /* 820D8C3Ch */ case    5:  		/* b 1236 */
		/* 820D8C3Ch case    5:*/		return 0x820D9110;
		/* 820D8C3Ch case    5:*/		return 0x820D8C40;
	}
	return 0x820D8C40;
} // Block from 820D8C28h-820D8C40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D8C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8C40);
		  /* 820D8C40h */ case    0:  		/* lis R10, 8224 */
		/* 820D8C40h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x2020);
		/* 820D8C40h case    0:*/		return 0x820D8C44;
		  /* 820D8C44h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820D8C44h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8C44h case    1:*/		return 0x820D8C48;
		  /* 820D8C48h */ case    2:  		/* bc 12, CR6_EQ, 76 */
		/* 820D8C48h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D8C94;  }
		/* 820D8C48h case    2:*/		return 0x820D8C4C;
		  /* 820D8C4Ch */ case    3:  		/* lis R10, 8240 */
		/* 820D8C4Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x2030);
		/* 820D8C4Ch case    3:*/		return 0x820D8C50;
		  /* 820D8C50h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D8C50h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8C50h case    4:*/		return 0x820D8C54;
		  /* 820D8C54h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 820D8C54h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8C88;  }
		/* 820D8C54h case    5:*/		return 0x820D8C58;
		  /* 820D8C58h */ case    6:  		/* lis R10, 8256 */
		/* 820D8C58h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x2040);
		/* 820D8C58h case    6:*/		return 0x820D8C5C;
		  /* 820D8C5Ch */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D8C5Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8C5Ch case    7:*/		return 0x820D8C60;
		  /* 820D8C60h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 820D8C60h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D8C7C;  }
		/* 820D8C60h case    8:*/		return 0x820D8C64;
		  /* 820D8C64h */ case    9:  		/* lis R10, 8272 */
		/* 820D8C64h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x2050);
		/* 820D8C64h case    9:*/		return 0x820D8C68;
		  /* 820D8C68h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D8C68h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8C68h case   10:*/		return 0x820D8C6C;
		  /* 820D8C6Ch */ case   11:  		/* bc 4, CR6_EQ, 1344 */
		/* 820D8C6Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D8C6Ch case   11:*/		return 0x820D8C70;
		  /* 820D8C70h */ case   12:  		/* lwz R11, <#[R31]> */
		/* 820D8C70h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8C70h case   12:*/		return 0x820D8C74;
		  /* 820D8C74h */ case   13:  		/* lwz R11, <#[R11 + 176]> */
		/* 820D8C74h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000B0) );
		/* 820D8C74h case   13:*/		return 0x820D8C78;
		  /* 820D8C78h */ case   14:  		/* b 1176 */
		/* 820D8C78h case   14:*/		return 0x820D9110;
		/* 820D8C78h case   14:*/		return 0x820D8C7C;
	}
	return 0x820D8C7C;
} // Block from 820D8C40h-820D8C7Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 820D8C7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8C7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8C7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8C7C);
		  /* 820D8C7Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8C7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8C7Ch case    0:*/		return 0x820D8C80;
		  /* 820D8C80h */ case    1:  		/* lwz R11, <#[R11 + 172]> */
		/* 820D8C80h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000AC) );
		/* 820D8C80h case    1:*/		return 0x820D8C84;
		  /* 820D8C84h */ case    2:  		/* b 1164 */
		/* 820D8C84h case    2:*/		return 0x820D9110;
		/* 820D8C84h case    2:*/		return 0x820D8C88;
	}
	return 0x820D8C88;
} // Block from 820D8C7Ch-820D8C88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8C88);
		  /* 820D8C88h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8C88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8C88h case    0:*/		return 0x820D8C8C;
		  /* 820D8C8Ch */ case    1:  		/* lwz R11, <#[R11 + 168]> */
		/* 820D8C8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000A8) );
		/* 820D8C8Ch case    1:*/		return 0x820D8C90;
		  /* 820D8C90h */ case    2:  		/* b 1152 */
		/* 820D8C90h case    2:*/		return 0x820D9110;
		/* 820D8C90h case    2:*/		return 0x820D8C94;
	}
	return 0x820D8C94;
} // Block from 820D8C88h-820D8C94h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8C94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8C94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8C94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8C94);
		  /* 820D8C94h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8C94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8C94h case    0:*/		return 0x820D8C98;
		  /* 820D8C98h */ case    1:  		/* lwz R11, <#[R11 + 164]> */
		/* 820D8C98h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000A4) );
		/* 820D8C98h case    1:*/		return 0x820D8C9C;
		  /* 820D8C9Ch */ case    2:  		/* b 1140 */
		/* 820D8C9Ch case    2:*/		return 0x820D9110;
		/* 820D8C9Ch case    2:*/		return 0x820D8CA0;
	}
	return 0x820D8CA0;
} // Block from 820D8C94h-820D8CA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8CA0);
		  /* 820D8CA0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8CA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8CA0h case    0:*/		return 0x820D8CA4;
		  /* 820D8CA4h */ case    1:  		/* lwz R11, <#[R11 + 260]> */
		/* 820D8CA4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000104) );
		/* 820D8CA4h case    1:*/		return 0x820D8CA8;
		  /* 820D8CA8h */ case    2:  		/* b 1128 */
		/* 820D8CA8h case    2:*/		return 0x820D9110;
		/* 820D8CA8h case    2:*/		return 0x820D8CAC;
	}
	return 0x820D8CAC;
} // Block from 820D8CA0h-820D8CACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8CAC);
		  /* 820D8CACh */ case    0:  		/* cmplw CR6, R11, R17 */
		/* 820D8CACh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 820D8CACh case    0:*/		return 0x820D8CB0;
		  /* 820D8CB0h */ case    1:  		/* bc 12, CR6_GT, 260 */
		/* 820D8CB0h case    1:*/		if ( regs.CR[6].gt ) { return 0x820D8DB4;  }
		/* 820D8CB0h case    1:*/		return 0x820D8CB4;
		  /* 820D8CB4h */ case    2:  		/* bc 12, CR6_EQ, 328 */
		/* 820D8CB4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D8DFC;  }
		/* 820D8CB4h case    2:*/		return 0x820D8CB8;
		  /* 820D8CB8h */ case    3:  		/* cmplw CR6, R11, R18 */
		/* 820D8CB8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 820D8CB8h case    3:*/		return 0x820D8CBC;
		  /* 820D8CBCh */ case    4:  		/* bc 12, CR6_GT, 176 */
		/* 820D8CBCh case    4:*/		if ( regs.CR[6].gt ) { return 0x820D8D6C;  }
		/* 820D8CBCh case    4:*/		return 0x820D8CC0;
		  /* 820D8CC0h */ case    5:  		/* bc 12, CR6_EQ, 156 */
		/* 820D8CC0h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8D5C;  }
		/* 820D8CC0h case    5:*/		return 0x820D8CC4;
		  /* 820D8CC4h */ case    6:  		/* lis R9, 8320 */
		/* 820D8CC4h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0x2080);
		/* 820D8CC4h case    6:*/		return 0x820D8CC8;
		  /* 820D8CC8h */ case    7:  		/* cmplw CR6, R11, R9 */
		/* 820D8CC8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820D8CC8h case    7:*/		return 0x820D8CCC;
		  /* 820D8CCCh */ case    8:  		/* bc 12, CR6_EQ, 1112 */
		/* 820D8CCCh case    8:*/		if ( regs.CR[6].eq ) { return 0x820D9124;  }
		/* 820D8CCCh case    8:*/		return 0x820D8CD0;
		  /* 820D8CD0h */ case    9:  		/* lis R9, 8336 */
		/* 820D8CD0h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0x2090);
		/* 820D8CD0h case    9:*/		return 0x820D8CD4;
		  /* 820D8CD4h */ case   10:  		/* cmplw CR6, R11, R9 */
		/* 820D8CD4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820D8CD4h case   10:*/		return 0x820D8CD8;
		  /* 820D8CD8h */ case   11:  		/* bc 12, CR6_EQ, -436 */
		/* 820D8CD8h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D8B24;  }
		/* 820D8CD8h case   11:*/		return 0x820D8CDC;
		  /* 820D8CDCh */ case   12:  		/* lis R9, 12288 */
		/* 820D8CDCh case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0x3000);
		/* 820D8CDCh case   12:*/		return 0x820D8CE0;
		  /* 820D8CE0h */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 820D8CE0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820D8CE0h case   13:*/		return 0x820D8CE4;
		  /* 820D8CE4h */ case   14:  		/* bc 12, CR6_EQ, 96 */
		/* 820D8CE4h case   14:*/		if ( regs.CR[6].eq ) { return 0x820D8D44;  }
		/* 820D8CE4h case   14:*/		return 0x820D8CE8;
		  /* 820D8CE8h */ case   15:  		/* lis R9, 20480 */
		/* 820D8CE8h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0x5000);
		/* 820D8CE8h case   15:*/		return 0x820D8CEC;
		  /* 820D8CECh */ case   16:  		/* cmplw CR6, R11, R9 */
		/* 820D8CECh case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820D8CECh case   16:*/		return 0x820D8CF0;
		  /* 820D8CF0h */ case   17:  		/* bc 12, CR6_EQ, 28 */
		/* 820D8CF0h case   17:*/		if ( regs.CR[6].eq ) { return 0x820D8D0C;  }
		/* 820D8CF0h case   17:*/		return 0x820D8CF4;
		  /* 820D8CF4h */ case   18:  		/* lis R10, 20496 */
		/* 820D8CF4h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x5010);
		/* 820D8CF4h case   18:*/		return 0x820D8CF8;
		  /* 820D8CF8h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 820D8CF8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8CF8h case   19:*/		return 0x820D8CFC;
		  /* 820D8CFCh */ case   20:  		/* bc 4, CR6_EQ, 1200 */
		/* 820D8CFCh case   20:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D8CFCh case   20:*/		return 0x820D8D00;
		  /* 820D8D00h */ case   21:  		/* lwz R11, <#[R31]> */
		/* 820D8D00h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8D00h case   21:*/		return 0x820D8D04;
		  /* 820D8D04h */ case   22:  		/* lwz R11, <#[R11 + 184]> */
		/* 820D8D04h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000B8) );
		/* 820D8D04h case   22:*/		return 0x820D8D08;
		  /* 820D8D08h */ case   23:  		/* b 1032 */
		/* 820D8D08h case   23:*/		return 0x820D9110;
		/* 820D8D08h case   23:*/		return 0x820D8D0C;
	}
	return 0x820D8D0C;
} // Block from 820D8CACh-820D8D0Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 820D8D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8D0C);
		  /* 820D8D0Ch */ case    0:  		/* rlwinm R11, R10, 0, 12, 31 */
		/* 820D8D0Ch case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R10);
		/* 820D8D0Ch case    0:*/		return 0x820D8D10;
		  /* 820D8D10h */ case    1:  		/* cmplwi CR6, R11, 3 */
		/* 820D8D10h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 820D8D10h case    1:*/		return 0x820D8D14;
		  /* 820D8D14h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 820D8D14h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D8D30;  }
		/* 820D8D14h case    2:*/		return 0x820D8D18;
		  /* 820D8D18h */ case    3:  		/* cmplwi CR6, R11, 4 */
		/* 820D8D18h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 820D8D18h case    3:*/		return 0x820D8D1C;
		  /* 820D8D1Ch */ case    4:  		/* bc 4, CR6_EQ, 1164 */
		/* 820D8D1Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x820D91A8;  }
		/* 820D8D1Ch case    4:*/		return 0x820D8D20;
		  /* 820D8D20h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 820D8D20h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8D20h case    5:*/		return 0x820D8D24;
		  /* 820D8D24h */ case    6:  		/* stw R28, <#[R31 + 1820]> */
		/* 820D8D24h case    6:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000071C) );
		/* 820D8D24h case    6:*/		return 0x820D8D28;
		  /* 820D8D28h */ case    7:  		/* lwz R11, <#[R11 + 584]> */
		/* 820D8D28h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000248) );
		/* 820D8D28h case    7:*/		return 0x820D8D2C;
		  /* 820D8D2Ch */ case    8:  		/* b 996 */
		/* 820D8D2Ch case    8:*/		return 0x820D9110;
		/* 820D8D2Ch case    8:*/		return 0x820D8D30;
	}
	return 0x820D8D30;
} // Block from 820D8D0Ch-820D8D30h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D8D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8D30);
		  /* 820D8D30h */ case    0:  		/* lwz R10, <#[R31]> */
		/* 820D8D30h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8D30h case    0:*/		return 0x820D8D34;
		  /* 820D8D34h */ case    1:  		/* lis R11, 7 */
		/* 820D8D34h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0x7);
		/* 820D8D34h case    1:*/		return 0x820D8D38;
		  /* 820D8D38h */ case    2:  		/* stw R11, <#[R31 + 1820]> */
		/* 820D8D38h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000071C) );
		/* 820D8D38h case    2:*/		return 0x820D8D3C;
		  /* 820D8D3Ch */ case    3:  		/* lwz R11, <#[R10 + 580]> */
		/* 820D8D3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000244) );
		/* 820D8D3Ch case    3:*/		return 0x820D8D40;
		  /* 820D8D40h */ case    4:  		/* b 976 */
		/* 820D8D40h case    4:*/		return 0x820D9110;
		/* 820D8D40h case    4:*/		return 0x820D8D44;
	}
	return 0x820D8D44;
} // Block from 820D8D30h-820D8D44h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D8D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8D44);
		  /* 820D8D44h */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 820D8D44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 820D8D44h case    0:*/		return 0x820D8D48;
		  /* 820D8D48h */ case    1:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 820D8D48h case    1:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 820D8D48h case    1:*/		return 0x820D8D4C;
		  /* 820D8D4Ch */ case    2:  		/* bc 4, CR0_EQ, 1120 */
		/* 820D8D4Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x820D91AC;  }
		/* 820D8D4Ch case    2:*/		return 0x820D8D50;
		  /* 820D8D50h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 820D8D50h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8D50h case    3:*/		return 0x820D8D54;
		  /* 820D8D54h */ case    4:  		/* lwz R11, <#[R11 + 188]> */
		/* 820D8D54h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000BC) );
		/* 820D8D54h case    4:*/		return 0x820D8D58;
		  /* 820D8D58h */ case    5:  		/* b 952 */
		/* 820D8D58h case    5:*/		return 0x820D9110;
		/* 820D8D58h case    5:*/		return 0x820D8D5C;
	}
	return 0x820D8D5C;
} // Block from 820D8D44h-820D8D5Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D8D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8D5C);
		  /* 820D8D5Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8D5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8D5Ch case    0:*/		return 0x820D8D60;
		  /* 820D8D60h */ case    1:  		/* stw R28, <#[R31 + 1820]> */
		/* 820D8D60h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000071C) );
		/* 820D8D60h case    1:*/		return 0x820D8D64;
		  /* 820D8D64h */ case    2:  		/* lwz R11, <#[R11 + 232]> */
		/* 820D8D64h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000E8) );
		/* 820D8D64h case    2:*/		return 0x820D8D68;
		  /* 820D8D68h */ case    3:  		/* b 936 */
		/* 820D8D68h case    3:*/		return 0x820D9110;
		/* 820D8D68h case    3:*/		return 0x820D8D6C;
	}
	return 0x820D8D6C;
} // Block from 820D8D5Ch-820D8D6Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D8D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8D6C);
		  /* 820D8D6Ch */ case    0:  		/* lis R10, 24576 */
		/* 820D8D6Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x6000);
		/* 820D8D6Ch case    0:*/		return 0x820D8D70;
		  /* 820D8D70h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820D8D70h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8D70h case    1:*/		return 0x820D8D74;
		  /* 820D8D74h */ case    2:  		/* bc 12, CR6_EQ, 204 */
		/* 820D8D74h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D8E40;  }
		/* 820D8D74h case    2:*/		return 0x820D8D78;
		  /* 820D8D78h */ case    3:  		/* lis R10, 24592 */
		/* 820D8D78h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x6010);
		/* 820D8D78h case    3:*/		return 0x820D8D7C;
		  /* 820D8D7Ch */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D8D7Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8D7Ch case    4:*/		return 0x820D8D80;
		  /* 820D8D80h */ case    5:  		/* bc 12, CR6_EQ, 348 */
		/* 820D8D80h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8EDC;  }
		/* 820D8D80h case    5:*/		return 0x820D8D84;
		  /* 820D8D84h */ case    6:  		/* lis R10, 24608 */
		/* 820D8D84h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x6020);
		/* 820D8D84h case    6:*/		return 0x820D8D88;
		  /* 820D8D88h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D8D88h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8D88h case    7:*/		return 0x820D8D8C;
		  /* 820D8D8Ch */ case    8:  		/* bc 12, CR6_EQ, 312 */
		/* 820D8D8Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x820D8EC4;  }
		/* 820D8D8Ch case    8:*/		return 0x820D8D90;
		  /* 820D8D90h */ case    9:  		/* lis R10, 24624 */
		/* 820D8D90h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x6030);
		/* 820D8D90h case    9:*/		return 0x820D8D94;
		  /* 820D8D94h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D8D94h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8D94h case   10:*/		return 0x820D8D98;
		  /* 820D8D98h */ case   11:  		/* bc 4, CR6_EQ, 1044 */
		/* 820D8D98h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D8D98h case   11:*/		return 0x820D8D9C;
		  /* 820D8D9Ch */ case   12:  		/* lwz R11, <#[R31 + 112]> */
		/* 820D8D9Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 820D8D9Ch case   12:*/		return 0x820D8DA0;
		  /* 820D8DA0h */ case   13:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 820D8DA0h case   13:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 820D8DA0h case   13:*/		return 0x820D8DA4;
		  /* 820D8DA4h */ case   14:  		/* bc 4, CR0_EQ, 1032 */
		/* 820D8DA4h case   14:*/		if ( !regs.CR[0].eq ) { return 0x820D91AC;  }
		/* 820D8DA4h case   14:*/		return 0x820D8DA8;
		  /* 820D8DA8h */ case   15:  		/* lwz R11, <#[R31]> */
		/* 820D8DA8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8DA8h case   15:*/		return 0x820D8DAC;
		  /* 820D8DACh */ case   16:  		/* lwz R11, <#[R11 + 272]> */
		/* 820D8DACh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000110) );
		/* 820D8DACh case   16:*/		return 0x820D8DB0;
		  /* 820D8DB0h */ case   17:  		/* b 864 */
		/* 820D8DB0h case   17:*/		return 0x820D9110;
		/* 820D8DB0h case   17:*/		return 0x820D8DB4;
	}
	return 0x820D8DB4;
} // Block from 820D8D6Ch-820D8DB4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820D8DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8DB4);
		  /* 820D8DB4h */ case    0:  		/* cmplw CR6, R11, R19 */
		/* 820D8DB4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 820D8DB4h case    0:*/		return 0x820D8DB8;
		  /* 820D8DB8h */ case    1:  		/* bc 12, CR6_GT, 92 */
		/* 820D8DB8h case    1:*/		if ( regs.CR[6].gt ) { return 0x820D8E14;  }
		/* 820D8DB8h case    1:*/		return 0x820D8DBC;
		  /* 820D8DBCh */ case    2:  		/* bc 12, CR6_EQ, 132 */
		/* 820D8DBCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820D8E40;  }
		/* 820D8DBCh case    2:*/		return 0x820D8DC0;
		  /* 820D8DC0h */ case    3:  		/* lis R10, 24656 */
		/* 820D8DC0h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x6050);
		/* 820D8DC0h case    3:*/		return 0x820D8DC4;
		  /* 820D8DC4h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D8DC4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8DC4h case    4:*/		return 0x820D8DC8;
		  /* 820D8DC8h */ case    5:  		/* bc 12, CR6_EQ, 120 */
		/* 820D8DC8h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8E40;  }
		/* 820D8DC8h case    5:*/		return 0x820D8DCC;
		  /* 820D8DCCh */ case    6:  		/* lis R10, 24672 */
		/* 820D8DCCh case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x6060);
		/* 820D8DCCh case    6:*/		return 0x820D8DD0;
		  /* 820D8DD0h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D8DD0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8DD0h case    7:*/		return 0x820D8DD4;
		  /* 820D8DD4h */ case    8:  		/* bc 12, CR6_EQ, 264 */
		/* 820D8DD4h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D8EDC;  }
		/* 820D8DD4h case    8:*/		return 0x820D8DD8;
		  /* 820D8DD8h */ case    9:  		/* lis R10, 24688 */
		/* 820D8DD8h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x6070);
		/* 820D8DD8h case    9:*/		return 0x820D8DDC;
		  /* 820D8DDCh */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D8DDCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8DDCh case   10:*/		return 0x820D8DE0;
		  /* 820D8DE0h */ case   11:  		/* bc 12, CR6_EQ, 228 */
		/* 820D8DE0h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D8EC4;  }
		/* 820D8DE0h case   11:*/		return 0x820D8DE4;
		  /* 820D8DE4h */ case   12:  		/* lis R10, 24704 */
		/* 820D8DE4h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x6080);
		/* 820D8DE4h case   12:*/		return 0x820D8DE8;
		  /* 820D8DE8h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 820D8DE8h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8DE8h case   13:*/		return 0x820D8DEC;
		  /* 820D8DECh */ case   14:  		/* bc 12, CR6_EQ, -80 */
		/* 820D8DECh case   14:*/		if ( regs.CR[6].eq ) { return 0x820D8D9C;  }
		/* 820D8DECh case   14:*/		return 0x820D8DF0;
		  /* 820D8DF0h */ case   15:  		/* lis R10, 24720 */
		/* 820D8DF0h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x6090);
		/* 820D8DF0h case   15:*/		return 0x820D8DF4;
		  /* 820D8DF4h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 820D8DF4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8DF4h case   16:*/		return 0x820D8DF8;
		  /* 820D8DF8h */ case   17:  		/* bc 4, CR6_EQ, 948 */
		/* 820D8DF8h case   17:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D8DF8h case   17:*/		return 0x820D8DFC;
	}
	return 0x820D8DFC;
} // Block from 820D8DB4h-820D8DFCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 820D8DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8DFC);
		  /* 820D8DFCh */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 820D8DFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 820D8DFCh case    0:*/		return 0x820D8E00;
		  /* 820D8E00h */ case    1:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 820D8E00h case    1:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 820D8E00h case    1:*/		return 0x820D8E04;
		  /* 820D8E04h */ case    2:  		/* bc 12, CR0_EQ, 936 */
		/* 820D8E04h case    2:*/		if ( regs.CR[0].eq ) { return 0x820D91AC;  }
		/* 820D8E04h case    2:*/		return 0x820D8E08;
		  /* 820D8E08h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 820D8E08h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8E08h case    3:*/		return 0x820D8E0C;
		  /* 820D8E0Ch */ case    4:  		/* lwz R11, <#[R11 + 276]> */
		/* 820D8E0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000114) );
		/* 820D8E0Ch case    4:*/		return 0x820D8E10;
		  /* 820D8E10h */ case    5:  		/* b 768 */
		/* 820D8E10h case    5:*/		return 0x820D9110;
		/* 820D8E10h case    5:*/		return 0x820D8E14;
	}
	return 0x820D8E14;
} // Block from 820D8DFCh-820D8E14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D8E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8E14);
		  /* 820D8E14h */ case    0:  		/* lis R10, 24752 */
		/* 820D8E14h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x60B0);
		/* 820D8E14h case    0:*/		return 0x820D8E18;
		  /* 820D8E18h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820D8E18h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8E18h case    1:*/		return 0x820D8E1C;
		  /* 820D8E1Ch */ case    2:  		/* bc 12, CR6_EQ, 192 */
		/* 820D8E1Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820D8EDC;  }
		/* 820D8E1Ch case    2:*/		return 0x820D8E20;
		  /* 820D8E20h */ case    3:  		/* lis R10, 24768 */
		/* 820D8E20h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x60C0);
		/* 820D8E20h case    3:*/		return 0x820D8E24;
		  /* 820D8E24h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D8E24h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8E24h case    4:*/		return 0x820D8E28;
		  /* 820D8E28h */ case    5:  		/* bc 12, CR6_EQ, 156 */
		/* 820D8E28h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8EC4;  }
		/* 820D8E28h case    5:*/		return 0x820D8E2C;
		  /* 820D8E2Ch */ case    6:  		/* lis R10, 24784 */
		/* 820D8E2Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x60D0);
		/* 820D8E2Ch case    6:*/		return 0x820D8E30;
		  /* 820D8E30h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D8E30h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8E30h case    7:*/		return 0x820D8E34;
		  /* 820D8E34h */ case    8:  		/* bc 12, CR6_EQ, -152 */
		/* 820D8E34h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D8D9C;  }
		/* 820D8E34h case    8:*/		return 0x820D8E38;
		  /* 820D8E38h */ case    9:  		/* lis R10, 24800 */
		/* 820D8E38h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x60E0);
		/* 820D8E38h case    9:*/		return 0x820D8E3C;
		  /* 820D8E3Ch */ case   10:  		/* b -72 */
		/* 820D8E3Ch case   10:*/		return 0x820D8DF4;
		/* 820D8E3Ch case   10:*/		return 0x820D8E40;
	}
	return 0x820D8E40;
} // Block from 820D8E14h-820D8E40h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D8E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8E40);
		  /* 820D8E40h */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 820D8E40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 820D8E40h case    0:*/		return 0x820D8E44;
		  /* 820D8E44h */ case    1:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 820D8E44h case    1:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 820D8E44h case    1:*/		return 0x820D8E48;
		  /* 820D8E48h */ case    2:  		/* bc 4, CR0_EQ, 868 */
		/* 820D8E48h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820D91AC;  }
		/* 820D8E48h case    2:*/		return 0x820D8E4C;
		  /* 820D8E4Ch */ case    3:  		/* lwz R11, <#[R31]> */
		/* 820D8E4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8E4Ch case    3:*/		return 0x820D8E50;
		  /* 820D8E50h */ case    4:  		/* lwz R11, <#[R11 + 264]> */
		/* 820D8E50h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000108) );
		/* 820D8E50h case    4:*/		return 0x820D8E54;
		  /* 820D8E54h */ case    5:  		/* b 700 */
		/* 820D8E54h case    5:*/		return 0x820D9110;
		/* 820D8E54h case    5:*/		return 0x820D8E58;
	}
	return 0x820D8E58;
} // Block from 820D8E40h-820D8E58h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D8E58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8E58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8E58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8E58);
		  /* 820D8E58h */ case    0:  		/* cmplw CR6, R11, R20 */
		/* 820D8E58h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 820D8E58h case    0:*/		return 0x820D8E5C;
		  /* 820D8E5Ch */ case    1:  		/* bc 12, CR6_GT, 472 */
		/* 820D8E5Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x820D9034;  }
		/* 820D8E5Ch case    1:*/		return 0x820D8E60;
		  /* 820D8E60h */ case    2:  		/* bc 12, CR6_EQ, 456 */
		/* 820D8E60h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D9028;  }
		/* 820D8E60h case    2:*/		return 0x820D8E64;
		  /* 820D8E64h */ case    3:  		/* cmplw CR6, R11, R21 */
		/* 820D8E64h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 820D8E64h case    3:*/		return 0x820D8E68;
		  /* 820D8E68h */ case    4:  		/* bc 12, CR6_GT, 224 */
		/* 820D8E68h case    4:*/		if ( regs.CR[6].gt ) { return 0x820D8F48;  }
		/* 820D8E68h case    4:*/		return 0x820D8E6C;
		  /* 820D8E6Ch */ case    5:  		/* bc 12, CR6_EQ, 184 */
		/* 820D8E6Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8F24;  }
		/* 820D8E6Ch case    5:*/		return 0x820D8E70;
		  /* 820D8E70h */ case    6:  		/* cmplw CR6, R11, R22 */
		/* 820D8E70h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 820D8E70h case    6:*/		return 0x820D8E74;
		  /* 820D8E74h */ case    7:  		/* bc 12, CR6_GT, 128 */
		/* 820D8E74h case    7:*/		if ( regs.CR[6].gt ) { return 0x820D8EF4;  }
		/* 820D8E74h case    7:*/		return 0x820D8E78;
		  /* 820D8E78h */ case    8:  		/* bc 12, CR6_EQ, 112 */
		/* 820D8E78h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D8EE8;  }
		/* 820D8E78h case    8:*/		return 0x820D8E7C;
		  /* 820D8E7Ch */ case    9:  		/* lis R10, 24832 */
		/* 820D8E7Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x6100);
		/* 820D8E7Ch case    9:*/		return 0x820D8E80;
		  /* 820D8E80h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D8E80h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8E80h case   10:*/		return 0x820D8E84;
		  /* 820D8E84h */ case   11:  		/* bc 12, CR6_EQ, 88 */
		/* 820D8E84h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D8EDC;  }
		/* 820D8E84h case   11:*/		return 0x820D8E88;
		  /* 820D8E88h */ case   12:  		/* lis R10, 24848 */
		/* 820D8E88h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x6110);
		/* 820D8E88h case   12:*/		return 0x820D8E8C;
		  /* 820D8E8Ch */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 820D8E8Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8E8Ch case   13:*/		return 0x820D8E90;
		  /* 820D8E90h */ case   14:  		/* bc 12, CR6_EQ, 52 */
		/* 820D8E90h case   14:*/		if ( regs.CR[6].eq ) { return 0x820D8EC4;  }
		/* 820D8E90h case   14:*/		return 0x820D8E94;
		  /* 820D8E94h */ case   15:  		/* lis R10, 24864 */
		/* 820D8E94h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x6120);
		/* 820D8E94h case   15:*/		return 0x820D8E98;
	}
	return 0x820D8E98;
} // Block from 820D8E58h-820D8E98h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820D8E98h
// Function '?Assemble@CUAssembler@D3DXShader@@QAAJPAVCPreProcessor@2@KKPAVCTErrors@2@PAU_D3DXSHADER_COMPILE_PARAMETERSA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8E98);
		  /* 820D8E98h */ case    0:  		/* cmplw CR6, R11, R10 */
		/* 820D8E98h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8E98h case    0:*/		return 0x820D8E9C;
		  /* 820D8E9Ch */ case    1:  		/* bc 12, CR6_EQ, -256 */
		/* 820D8E9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820D8D9C;  }
		/* 820D8E9Ch case    1:*/		return 0x820D8EA0;
		  /* 820D8EA0h */ case    2:  		/* lis R10, 24880 */
		/* 820D8EA0h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0x6130);
		/* 820D8EA0h case    2:*/		return 0x820D8EA4;
		  /* 820D8EA4h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 820D8EA4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8EA4h case    3:*/		return 0x820D8EA8;
		  /* 820D8EA8h */ case    4:  		/* bc 12, CR6_EQ, -172 */
		/* 820D8EA8h case    4:*/		if ( regs.CR[6].eq ) { return 0x820D8DFC;  }
		/* 820D8EA8h case    4:*/		return 0x820D8EAC;
		  /* 820D8EACh */ case    5:  		/* lis R10, 28672 */
		/* 820D8EACh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x7000);
		/* 820D8EACh case    5:*/		return 0x820D8EB0;
		  /* 820D8EB0h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 820D8EB0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8EB0h case    6:*/		return 0x820D8EB4;
		  /* 820D8EB4h */ case    7:  		/* bc 4, CR6_EQ, 760 */
		/* 820D8EB4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D8EB4h case    7:*/		return 0x820D8EB8;
		  /* 820D8EB8h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 820D8EB8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8EB8h case    8:*/		return 0x820D8EBC;
		  /* 820D8EBCh */ case    9:  		/* lwz R11, <#[R11 + 196]> */
		/* 820D8EBCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000C4) );
		/* 820D8EBCh case    9:*/		return 0x820D8EC0;
		  /* 820D8EC0h */ case   10:  		/* b 592 */
		/* 820D8EC0h case   10:*/		return 0x820D9110;
		/* 820D8EC0h case   10:*/		return 0x820D8EC4;
	}
	return 0x820D8EC4;
} // Block from 820D8E98h-820D8EC4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D8EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8EC4);
		  /* 820D8EC4h */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 820D8EC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 820D8EC4h case    0:*/		return 0x820D8EC8;
		  /* 820D8EC8h */ case    1:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 820D8EC8h case    1:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 820D8EC8h case    1:*/		return 0x820D8ECC;
		  /* 820D8ECCh */ case    2:  		/* bc 4, CR0_EQ, 736 */
		/* 820D8ECCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x820D91AC;  }
		/* 820D8ECCh case    2:*/		return 0x820D8ED0;
		  /* 820D8ED0h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 820D8ED0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8ED0h case    3:*/		return 0x820D8ED4;
		  /* 820D8ED4h */ case    4:  		/* lwz R11, <#[R11 + 268]> */
		/* 820D8ED4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000010C) );
		/* 820D8ED4h case    4:*/		return 0x820D8ED8;
		  /* 820D8ED8h */ case    5:  		/* b 568 */
		/* 820D8ED8h case    5:*/		return 0x820D9110;
		/* 820D8ED8h case    5:*/		return 0x820D8EDC;
	}
	return 0x820D8EDC;
} // Block from 820D8EC4h-820D8EDCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D8EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8EDC);
		  /* 820D8EDCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8EDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8EDCh case    0:*/		return 0x820D8EE0;
		  /* 820D8EE0h */ case    1:  		/* lwz R11, <#[R11 + 280]> */
		/* 820D8EE0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000118) );
		/* 820D8EE0h case    1:*/		return 0x820D8EE4;
		  /* 820D8EE4h */ case    2:  		/* b 556 */
		/* 820D8EE4h case    2:*/		return 0x820D9110;
		/* 820D8EE4h case    2:*/		return 0x820D8EE8;
	}
	return 0x820D8EE8;
} // Block from 820D8EDCh-820D8EE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8EE8);
		  /* 820D8EE8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8EE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8EE8h case    0:*/		return 0x820D8EEC;
		  /* 820D8EECh */ case    1:  		/* lwz R11, <#[R11 + 200]> */
		/* 820D8EECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000C8) );
		/* 820D8EECh case    1:*/		return 0x820D8EF0;
		  /* 820D8EF0h */ case    2:  		/* b 544 */
		/* 820D8EF0h case    2:*/		return 0x820D9110;
		/* 820D8EF0h case    2:*/		return 0x820D8EF4;
	}
	return 0x820D8EF4;
} // Block from 820D8EE8h-820D8EF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8EF4);
		  /* 820D8EF4h */ case    0:  		/* lis R10, 28704 */
		/* 820D8EF4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7020);
		/* 820D8EF4h case    0:*/		return 0x820D8EF8;
		  /* 820D8EF8h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820D8EF8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8EF8h case    1:*/		return 0x820D8EFC;
		  /* 820D8EFCh */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820D8EFCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820D8F3C;  }
		/* 820D8EFCh case    2:*/		return 0x820D8F00;
		  /* 820D8F00h */ case    3:  		/* lis R10, 28720 */
		/* 820D8F00h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7030);
		/* 820D8F00h case    3:*/		return 0x820D8F04;
		  /* 820D8F04h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D8F04h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8F04h case    4:*/		return 0x820D8F08;
		  /* 820D8F08h */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 820D8F08h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8F30;  }
		/* 820D8F08h case    5:*/		return 0x820D8F0C;
		  /* 820D8F0Ch */ case    6:  		/* lis R10, 28736 */
		/* 820D8F0Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7040);
		/* 820D8F0Ch case    6:*/		return 0x820D8F10;
		  /* 820D8F10h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D8F10h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8F10h case    7:*/		return 0x820D8F14;
		  /* 820D8F14h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 820D8F14h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D8F30;  }
		/* 820D8F14h case    8:*/		return 0x820D8F18;
		  /* 820D8F18h */ case    9:  		/* lis R10, 28752 */
		/* 820D8F18h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x7050);
		/* 820D8F18h case    9:*/		return 0x820D8F1C;
		  /* 820D8F1Ch */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D8F1Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8F1Ch case   10:*/		return 0x820D8F20;
		  /* 820D8F20h */ case   11:  		/* bc 4, CR6_EQ, 652 */
		/* 820D8F20h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D8F20h case   11:*/		return 0x820D8F24;
	}
	return 0x820D8F24;
} // Block from 820D8EF4h-820D8F24h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D8F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8F24);
		  /* 820D8F24h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8F24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8F24h case    0:*/		return 0x820D8F28;
		  /* 820D8F28h */ case    1:  		/* lwz R11, <#[R11 + 216]> */
		/* 820D8F28h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000D8) );
		/* 820D8F28h case    1:*/		return 0x820D8F2C;
		  /* 820D8F2Ch */ case    2:  		/* b 484 */
		/* 820D8F2Ch case    2:*/		return 0x820D9110;
		/* 820D8F2Ch case    2:*/		return 0x820D8F30;
	}
	return 0x820D8F30;
} // Block from 820D8F24h-820D8F30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8F30);
		  /* 820D8F30h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8F30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8F30h case    0:*/		return 0x820D8F34;
		  /* 820D8F34h */ case    1:  		/* lwz R11, <#[R11 + 208]> */
		/* 820D8F34h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000D0) );
		/* 820D8F34h case    1:*/		return 0x820D8F38;
		  /* 820D8F38h */ case    2:  		/* b 472 */
		/* 820D8F38h case    2:*/		return 0x820D9110;
		/* 820D8F38h case    2:*/		return 0x820D8F3C;
	}
	return 0x820D8F3C;
} // Block from 820D8F30h-820D8F3Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8F3C);
		  /* 820D8F3Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8F3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8F3Ch case    0:*/		return 0x820D8F40;
		  /* 820D8F40h */ case    1:  		/* lwz R11, <#[R11 + 204]> */
		/* 820D8F40h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000CC) );
		/* 820D8F40h case    1:*/		return 0x820D8F44;
		  /* 820D8F44h */ case    2:  		/* b 460 */
		/* 820D8F44h case    2:*/		return 0x820D9110;
		/* 820D8F44h case    2:*/		return 0x820D8F48;
	}
	return 0x820D8F48;
} // Block from 820D8F3Ch-820D8F48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8F48);
		  /* 820D8F48h */ case    0:  		/* cmplw CR6, R11, R23 */
		/* 820D8F48h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 820D8F48h case    0:*/		return 0x820D8F4C;
		  /* 820D8F4Ch */ case    1:  		/* bc 12, CR6_GT, 124 */
		/* 820D8F4Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x820D8FC8;  }
		/* 820D8F4Ch case    1:*/		return 0x820D8F50;
		  /* 820D8F50h */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 820D8F50h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D8FBC;  }
		/* 820D8F50h case    2:*/		return 0x820D8F54;
		  /* 820D8F54h */ case    3:  		/* lis R10, 28784 */
		/* 820D8F54h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7070);
		/* 820D8F54h case    3:*/		return 0x820D8F58;
		  /* 820D8F58h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D8F58h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8F58h case    4:*/		return 0x820D8F5C;
		  /* 820D8F5Ch */ case    5:  		/* bc 12, CR6_EQ, -56 */
		/* 820D8F5Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8F24;  }
		/* 820D8F5Ch case    5:*/		return 0x820D8F60;
		  /* 820D8F60h */ case    6:  		/* lis R10, 28800 */
		/* 820D8F60h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7080);
		/* 820D8F60h case    6:*/		return 0x820D8F64;
		  /* 820D8F64h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D8F64h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8F64h case    7:*/		return 0x820D8F68;
		  /* 820D8F68h */ case    8:  		/* bc 12, CR6_EQ, 64 */
		/* 820D8F68h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D8FA8;  }
		/* 820D8F68h case    8:*/		return 0x820D8F6C;
		  /* 820D8F6Ch */ case    9:  		/* lis R10, 28816 */
		/* 820D8F6Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x7090);
		/* 820D8F6Ch case    9:*/		return 0x820D8F70;
		  /* 820D8F70h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D8F70h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8F70h case   10:*/		return 0x820D8F74;
		  /* 820D8F74h */ case   11:  		/* bc 12, CR6_EQ, 40 */
		/* 820D8F74h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D8F9C;  }
		/* 820D8F74h case   11:*/		return 0x820D8F78;
		  /* 820D8F78h */ case   12:  		/* lis R10, 28848 */
		/* 820D8F78h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x70B0);
		/* 820D8F78h case   12:*/		return 0x820D8F7C;
		  /* 820D8F7Ch */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 820D8F7Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8F7Ch case   13:*/		return 0x820D8F80;
		  /* 820D8F80h */ case   14:  		/* bc 12, CR6_EQ, -868 */
		/* 820D8F80h case   14:*/		if ( regs.CR[6].eq ) { return 0x820D8C1C;  }
		/* 820D8F80h case   14:*/		return 0x820D8F84;
		  /* 820D8F84h */ case   15:  		/* lis R10, 28864 */
		/* 820D8F84h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x70C0);
		/* 820D8F84h case   15:*/		return 0x820D8F88;
		  /* 820D8F88h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 820D8F88h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8F88h case   16:*/		return 0x820D8F8C;
		  /* 820D8F8Ch */ case   17:  		/* bc 4, CR6_EQ, 544 */
		/* 820D8F8Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D8F8Ch case   17:*/		return 0x820D8F90;
	}
	return 0x820D8F90;
} // Block from 820D8F48h-820D8F90h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820D8F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8F90);
		  /* 820D8F90h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8F90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8F90h case    0:*/		return 0x820D8F94;
		  /* 820D8F94h */ case    1:  		/* lwz R11, <#[R11 + 160]> */
		/* 820D8F94h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000A0) );
		/* 820D8F94h case    1:*/		return 0x820D8F98;
		  /* 820D8F98h */ case    2:  		/* b 376 */
		/* 820D8F98h case    2:*/		return 0x820D9110;
		/* 820D8F98h case    2:*/		return 0x820D8F9C;
	}
	return 0x820D8F9C;
} // Block from 820D8F90h-820D8F9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8F9C);
		  /* 820D8F9Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8F9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8F9Ch case    0:*/		return 0x820D8FA0;
		  /* 820D8FA0h */ case    1:  		/* lwz R11, <#[R11 + 212]> */
		/* 820D8FA0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000D4) );
		/* 820D8FA0h case    1:*/		return 0x820D8FA4;
		  /* 820D8FA4h */ case    2:  		/* b 364 */
		/* 820D8FA4h case    2:*/		return 0x820D9110;
		/* 820D8FA4h case    2:*/		return 0x820D8FA8;
	}
	return 0x820D8FA8;
} // Block from 820D8F9Ch-820D8FA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8FA8);
		  /* 820D8FA8h */ case    0:  		/* lwz R10, <#[R31]> */
		/* 820D8FA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8FA8h case    0:*/		return 0x820D8FAC;
		  /* 820D8FACh */ case    1:  		/* lis R11, 3 */
		/* 820D8FACh case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0x3);
		/* 820D8FACh case    1:*/		return 0x820D8FB0;
		  /* 820D8FB0h */ case    2:  		/* stw R11, <#[R31 + 1820]> */
		/* 820D8FB0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000071C) );
		/* 820D8FB0h case    2:*/		return 0x820D8FB4;
		  /* 820D8FB4h */ case    3:  		/* lwz R11, <#[R10 + 284]> */
		/* 820D8FB4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000011C) );
		/* 820D8FB4h case    3:*/		return 0x820D8FB8;
		  /* 820D8FB8h */ case    4:  		/* b 344 */
		/* 820D8FB8h case    4:*/		return 0x820D9110;
		/* 820D8FB8h case    4:*/		return 0x820D8FBC;
	}
	return 0x820D8FBC;
} // Block from 820D8FA8h-820D8FBCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D8FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8FBC);
		  /* 820D8FBCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8FBCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8FBCh case    0:*/		return 0x820D8FC0;
		  /* 820D8FC0h */ case    1:  		/* lwz R11, <#[R11 + 148]> */
		/* 820D8FC0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000094) );
		/* 820D8FC0h case    1:*/		return 0x820D8FC4;
		  /* 820D8FC4h */ case    2:  		/* b 332 */
		/* 820D8FC4h case    2:*/		return 0x820D9110;
		/* 820D8FC4h case    2:*/		return 0x820D8FC8;
	}
	return 0x820D8FC8;
} // Block from 820D8FBCh-820D8FC8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D8FC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8FC8);
		  /* 820D8FC8h */ case    0:  		/* lis R10, 29440 */
		/* 820D8FC8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7300);
		/* 820D8FC8h case    0:*/		return 0x820D8FCC;
		  /* 820D8FCCh */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820D8FCCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8FCCh case    1:*/		return 0x820D8FD0;
		  /* 820D8FD0h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 820D8FD0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D900C;  }
		/* 820D8FD0h case    2:*/		return 0x820D8FD4;
		  /* 820D8FD4h */ case    3:  		/* lis R10, 29456 */
		/* 820D8FD4h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7310);
		/* 820D8FD4h case    3:*/		return 0x820D8FD8;
		  /* 820D8FD8h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D8FD8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8FD8h case    4:*/		return 0x820D8FDC;
		  /* 820D8FDCh */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 820D8FDCh case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8FF8;  }
		/* 820D8FDCh case    5:*/		return 0x820D8FE0;
		  /* 820D8FE0h */ case    6:  		/* lis R10, 29472 */
		/* 820D8FE0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7320);
		/* 820D8FE0h case    6:*/		return 0x820D8FE4;
		  /* 820D8FE4h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D8FE4h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8FE4h case    7:*/		return 0x820D8FE8;
		  /* 820D8FE8h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 820D8FE8h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D9004;  }
		/* 820D8FE8h case    8:*/		return 0x820D8FEC;
		  /* 820D8FECh */ case    9:  		/* lis R10, 29488 */
		/* 820D8FECh case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x7330);
		/* 820D8FECh case    9:*/		return 0x820D8FF0;
		  /* 820D8FF0h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D8FF0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D8FF0h case   10:*/		return 0x820D8FF4;
		  /* 820D8FF4h */ case   11:  		/* bc 4, CR6_EQ, 440 */
		/* 820D8FF4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D8FF4h case   11:*/		return 0x820D8FF8;
	}
	return 0x820D8FF8;
} // Block from 820D8FC8h-820D8FF8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D8FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D8FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D8FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D8FF8);
		  /* 820D8FF8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D8FF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D8FF8h case    0:*/		return 0x820D8FFC;
		  /* 820D8FFCh */ case    1:  		/* lwz R11, <#[R11 + 296]> */
		/* 820D8FFCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000128) );
		/* 820D8FFCh case    1:*/		return 0x820D9000;
		  /* 820D9000h */ case    2:  		/* b 272 */
		/* 820D9000h case    2:*/		return 0x820D9110;
		/* 820D9000h case    2:*/		return 0x820D9004;
	}
	return 0x820D9004;
} // Block from 820D8FF8h-820D9004h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D9004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9004);
		  /* 820D9004h */ case    0:  		/* li R4, 1 */
		/* 820D9004h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D9004h case    0:*/		return 0x820D9008;
		  /* 820D9008h */ case    1:  		/* b 8 */
		/* 820D9008h case    1:*/		return 0x820D9010;
		/* 820D9008h case    1:*/		return 0x820D900C;
	}
	return 0x820D900C;
} // Block from 820D9004h-820D900Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D900Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D900C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D900C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D900C);
		  /* 820D900Ch */ case    0:  		/* li R4, 0 */
		/* 820D900Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D900Ch case    0:*/		return 0x820D9010;
	}
	return 0x820D9010;
} // Block from 820D900Ch-820D9010h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D9010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9010);
		  /* 820D9010h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D9010h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9010h case    0:*/		return 0x820D9014;
		  /* 820D9014h */ case    1:  		/* mr R3, R31 */
		/* 820D9014h case    1:*/		regs.R3 = regs.R31;
		/* 820D9014h case    1:*/		return 0x820D9018;
		  /* 820D9018h */ case    2:  		/* lwz R11, <#[R11 + 292]> */
		/* 820D9018h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000124) );
		/* 820D9018h case    2:*/		return 0x820D901C;
		  /* 820D901Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 820D901Ch case    3:*/		regs.CTR = regs.R11;
		/* 820D901Ch case    3:*/		return 0x820D9020;
		  /* 820D9020h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 820D9020h case    4:*/		if ( 1 ) { regs.LR = 0x820D9024; return (uint32)regs.CTR; }
		/* 820D9020h case    4:*/		return 0x820D9024;
		  /* 820D9024h */ case    5:  		/* b 248 */
		/* 820D9024h case    5:*/		return 0x820D911C;
		/* 820D9024h case    5:*/		return 0x820D9028;
	}
	return 0x820D9028;
} // Block from 820D9010h-820D9028h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D9028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9028);
		  /* 820D9028h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D9028h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9028h case    0:*/		return 0x820D902C;
		  /* 820D902Ch */ case    1:  		/* lwz R11, <#[R11 + 300]> */
		/* 820D902Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000012C) );
		/* 820D902Ch case    1:*/		return 0x820D9030;
		  /* 820D9030h */ case    2:  		/* b 224 */
		/* 820D9030h case    2:*/		return 0x820D9110;
		/* 820D9030h case    2:*/		return 0x820D9034;
	}
	return 0x820D9034;
} // Block from 820D9028h-820D9034h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D9034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9034);
		  /* 820D9034h */ case    0:  		/* cmplw CR6, R11, R24 */
		/* 820D9034h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 820D9034h case    0:*/		return 0x820D9038;
		  /* 820D9038h */ case    1:  		/* bc 12, CR6_GT, 148 */
		/* 820D9038h case    1:*/		if ( regs.CR[6].gt ) { return 0x820D90CC;  }
		/* 820D9038h case    1:*/		return 0x820D903C;
		  /* 820D903Ch */ case    2:  		/* bc 12, CR6_EQ, -68 */
		/* 820D903Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820D8FF8;  }
		/* 820D903Ch case    2:*/		return 0x820D9040;
		  /* 820D9040h */ case    3:  		/* cmplw CR6, R11, R25 */
		/* 820D9040h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820D9040h case    3:*/		return 0x820D9044;
		  /* 820D9044h */ case    4:  		/* bc 12, CR6_GT, 92 */
		/* 820D9044h case    4:*/		if ( regs.CR[6].gt ) { return 0x820D90A0;  }
		/* 820D9044h case    4:*/		return 0x820D9048;
		  /* 820D9048h */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 820D9048h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D9088;  }
		/* 820D9048h case    5:*/		return 0x820D904C;
		  /* 820D904Ch */ case    6:  		/* lis R10, 29520 */
		/* 820D904Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7350);
		/* 820D904Ch case    6:*/		return 0x820D9050;
		  /* 820D9050h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D9050h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9050h case    7:*/		return 0x820D9054;
		  /* 820D9054h */ case    8:  		/* bc 12, CR6_EQ, 64 */
		/* 820D9054h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D9094;  }
		/* 820D9054h case    8:*/		return 0x820D9058;
		  /* 820D9058h */ case    9:  		/* lis R10, 29536 */
		/* 820D9058h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x7360);
		/* 820D9058h case    9:*/		return 0x820D905C;
		  /* 820D905Ch */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D905Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D905Ch case   10:*/		return 0x820D9060;
		  /* 820D9060h */ case   11:  		/* bc 12, CR6_EQ, 52 */
		/* 820D9060h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D9094;  }
		/* 820D9060h case   11:*/		return 0x820D9064;
		  /* 820D9064h */ case   12:  		/* lis R10, 29552 */
		/* 820D9064h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x7370);
		/* 820D9064h case   12:*/		return 0x820D9068;
		  /* 820D9068h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 820D9068h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9068h case   13:*/		return 0x820D906C;
		  /* 820D906Ch */ case   14:  		/* bc 12, CR6_EQ, 40 */
		/* 820D906Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x820D9094;  }
		/* 820D906Ch case   14:*/		return 0x820D9070;
		  /* 820D9070h */ case   15:  		/* lis R10, 29568 */
		/* 820D9070h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x7380);
		/* 820D9070h case   15:*/		return 0x820D9074;
		  /* 820D9074h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 820D9074h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9074h case   16:*/		return 0x820D9078;
		  /* 820D9078h */ case   17:  		/* bc 12, CR6_EQ, 28 */
		/* 820D9078h case   17:*/		if ( regs.CR[6].eq ) { return 0x820D9094;  }
		/* 820D9078h case   17:*/		return 0x820D907C;
		  /* 820D907Ch */ case   18:  		/* lis R10, 29584 */
		/* 820D907Ch case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x7390);
		/* 820D907Ch case   18:*/		return 0x820D9080;
		  /* 820D9080h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 820D9080h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9080h case   19:*/		return 0x820D9084;
		  /* 820D9084h */ case   20:  		/* bc 4, CR6_EQ, 296 */
		/* 820D9084h case   20:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D9084h case   20:*/		return 0x820D9088;
	}
	return 0x820D9088;
} // Block from 820D9034h-820D9088h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820D9088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9088);
		  /* 820D9088h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D9088h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9088h case    0:*/		return 0x820D908C;
		  /* 820D908Ch */ case    1:  		/* lwz R11, <#[R11 + 288]> */
		/* 820D908Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000120) );
		/* 820D908Ch case    1:*/		return 0x820D9090;
		  /* 820D9090h */ case    2:  		/* b 128 */
		/* 820D9090h case    2:*/		return 0x820D9110;
		/* 820D9090h case    2:*/		return 0x820D9094;
	}
	return 0x820D9094;
} // Block from 820D9088h-820D9094h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D9094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9094);
		  /* 820D9094h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D9094h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9094h case    0:*/		return 0x820D9098;
	}
	return 0x820D9098;
} // Block from 820D9094h-820D9098h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D9098h
// Function '?XAssembleMicrocode@D3DXShader@@YAJPAVCPreProcessor@1@PAUD3DXTOKEN@1@KPAVCTErrors@1@PAPAUID3DXBuffer@@PAU_D3DXSHADER_COMPILE_PARAMETERSA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9098);
		  /* 820D9098h */ case    0:  		/* lwz R11, <#[R11 + 256]> */
		/* 820D9098h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000100) );
		/* 820D9098h case    0:*/		return 0x820D909C;
		  /* 820D909Ch */ case    1:  		/* b 116 */
		/* 820D909Ch case    1:*/		return 0x820D9110;
		/* 820D909Ch case    1:*/		return 0x820D90A0;
	}
	return 0x820D90A0;
} // Block from 820D9098h-820D90A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D90A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D90A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D90A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D90A0);
		  /* 820D90A0h */ case    0:  		/* lis R10, 29616 */
		/* 820D90A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x73B0);
		/* 820D90A0h case    0:*/		return 0x820D90A4;
		  /* 820D90A4h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820D90A4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D90A4h case    1:*/		return 0x820D90A8;
		  /* 820D90A8h */ case    2:  		/* bc 12, CR6_EQ, -32 */
		/* 820D90A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D9088;  }
		/* 820D90A8h case    2:*/		return 0x820D90AC;
		  /* 820D90ACh */ case    3:  		/* lis R10, 29632 */
		/* 820D90ACh case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x73C0);
		/* 820D90ACh case    3:*/		return 0x820D90B0;
		  /* 820D90B0h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D90B0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D90B0h case    4:*/		return 0x820D90B4;
		  /* 820D90B4h */ case    5:  		/* bc 12, CR6_EQ, -44 */
		/* 820D90B4h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D9088;  }
		/* 820D90B4h case    5:*/		return 0x820D90B8;
		  /* 820D90B8h */ case    6:  		/* lis R10, 29648 */
		/* 820D90B8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x73D0);
		/* 820D90B8h case    6:*/		return 0x820D90BC;
		  /* 820D90BCh */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D90BCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D90BCh case    7:*/		return 0x820D90C0;
		  /* 820D90C0h */ case    8:  		/* bc 12, CR6_EQ, -200 */
		/* 820D90C0h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D8FF8;  }
		/* 820D90C0h case    8:*/		return 0x820D90C4;
		  /* 820D90C4h */ case    9:  		/* lis R10, 29664 */
		/* 820D90C4h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x73E0);
		/* 820D90C4h case    9:*/		return 0x820D90C8;
		  /* 820D90C8h */ case   10:  		/* b -216 */
		/* 820D90C8h case   10:*/		return 0x820D8FF0;
		/* 820D90C8h case   10:*/		return 0x820D90CC;
	}
	return 0x820D90CC;
} // Block from 820D90A0h-820D90CCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D90CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D90CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D90CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D90CC);
		  /* 820D90CCh */ case    0:  		/* cmplw CR6, R11, R26 */
		/* 820D90CCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 820D90CCh case    0:*/		return 0x820D90D0;
		  /* 820D90D0h */ case    1:  		/* bc 12, CR6_GT, 144 */
		/* 820D90D0h case    1:*/		if ( regs.CR[6].gt ) { return 0x820D9160;  }
		/* 820D90D0h case    1:*/		return 0x820D90D4;
		  /* 820D90D4h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 820D90D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D9108;  }
		/* 820D90D4h case    2:*/		return 0x820D90D8;
		  /* 820D90D8h */ case    3:  		/* lis R10, 29696 */
		/* 820D90D8h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7400);
		/* 820D90D8h case    3:*/		return 0x820D90DC;
		  /* 820D90DCh */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D90DCh case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D90DCh case    4:*/		return 0x820D90E0;
		  /* 820D90E0h */ case    5:  		/* bc 12, CR6_EQ, -232 */
		/* 820D90E0h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D8FF8;  }
		/* 820D90E0h case    5:*/		return 0x820D90E4;
		  /* 820D90E4h */ case    6:  		/* lis R10, 29712 */
		/* 820D90E4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7410);
		/* 820D90E4h case    6:*/		return 0x820D90E8;
		  /* 820D90E8h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D90E8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D90E8h case    7:*/		return 0x820D90EC;
		  /* 820D90ECh */ case    8:  		/* bc 12, CR6_EQ, 104 */
		/* 820D90ECh case    8:*/		if ( regs.CR[6].eq ) { return 0x820D9154;  }
		/* 820D90ECh case    8:*/		return 0x820D90F0;
		  /* 820D90F0h */ case    9:  		/* lis R10, 29728 */
		/* 820D90F0h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x7420);
		/* 820D90F0h case    9:*/		return 0x820D90F4;
		  /* 820D90F4h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D90F4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D90F4h case   10:*/		return 0x820D90F8;
		  /* 820D90F8h */ case   11:  		/* bc 12, CR6_EQ, 80 */
		/* 820D90F8h case   11:*/		if ( regs.CR[6].eq ) { return 0x820D9148;  }
		/* 820D90F8h case   11:*/		return 0x820D90FC;
		  /* 820D90FCh */ case   12:  		/* lis R10, 29760 */
		/* 820D90FCh case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x7440);
		/* 820D90FCh case   12:*/		return 0x820D9100;
		  /* 820D9100h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 820D9100h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9100h case   13:*/		return 0x820D9104;
		  /* 820D9104h */ case   14:  		/* bc 4, CR6_EQ, 168 */
		/* 820D9104h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D9104h case   14:*/		return 0x820D9108;
	}
	return 0x820D9108;
} // Block from 820D90CCh-820D9108h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820D9108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9108);
		  /* 820D9108h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D9108h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9108h case    0:*/		return 0x820D910C;
		  /* 820D910Ch */ case    1:  		/* lwz R11, <#[R11 + 252]> */
		/* 820D910Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000FC) );
		/* 820D910Ch case    1:*/		return 0x820D9110;
	}
	return 0x820D9110;
} // Block from 820D9108h-820D9110h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D9110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9110);
		  /* 820D9110h */ case    0:  		/* mr R3, R31 */
		/* 820D9110h case    0:*/		regs.R3 = regs.R31;
		/* 820D9110h case    0:*/		return 0x820D9114;
		  /* 820D9114h */ case    1:  		/* mtspr CTR, R11 */
		/* 820D9114h case    1:*/		regs.CTR = regs.R11;
		/* 820D9114h case    1:*/		return 0x820D9118;
		  /* 820D9118h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 820D9118h case    2:*/		if ( 1 ) { regs.LR = 0x820D911C; return (uint32)regs.CTR; }
		/* 820D9118h case    2:*/		return 0x820D911C;
	}
	return 0x820D911C;
} // Block from 820D9110h-820D911Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D911Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D911C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D911C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D911C);
		  /* 820D911Ch */ case    0:  		/* cmpw CR6, R3, R27 */
		/* 820D911Ch case    0:*/		cpu::op::cmpw<6>(regs,regs.R3,regs.R27);
		/* 820D911Ch case    0:*/		return 0x820D9120;
		  /* 820D9120h */ case    1:  		/* bc 12, CR6_EQ, 140 */
		/* 820D9120h case    1:*/		if ( regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D9120h case    1:*/		return 0x820D9124;
	}
	return 0x820D9124;
} // Block from 820D911Ch-820D9124h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D9124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9124);
		  /* 820D9124h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 820D9124h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820D9124h case    0:*/		return 0x820D9128;
		  /* 820D9128h */ case    1:  		/* lwz R10, <#[R31 + 12]> */
		/* 820D9128h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 820D9128h case    1:*/		return 0x820D912C;
		  /* 820D912Ch */ case    2:  		/* addi R11, R11, 1 */
		/* 820D912Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820D912Ch case    2:*/		return 0x820D9130;
		  /* 820D9130h */ case    3:  		/* stw R11, <#[R1 + 80]> */
		/* 820D9130h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820D9130h case    3:*/		return 0x820D9134;
		  /* 820D9134h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D9134h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9134h case    4:*/		return 0x820D9138;
		  /* 820D9138h */ case    5:  		/* bc 12, CR6_LT, -1796 */
		/* 820D9138h case    5:*/		if ( regs.CR[6].lt ) { return 0x820D8A34;  }
		/* 820D9138h case    5:*/		return 0x820D913C;
	}
	return 0x820D913C;
} // Block from 820D9124h-820D913Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D913Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D913C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D913C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D913C);
		  /* 820D913Ch */ case    0:  		/* li R3, 0 */
		/* 820D913Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D913Ch case    0:*/		return 0x820D9140;
	}
	return 0x820D9140;
} // Block from 820D913Ch-820D9140h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D9140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9140);
		  /* 820D9140h */ case    0:  		/* addi R1, R1, 240 */
		/* 820D9140h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 820D9140h case    0:*/		return 0x820D9144;
		  /* 820D9144h */ case    1:  		/* b -294612 */
		/* 820D9144h case    1:*/		return 0x82091270;
		/* 820D9144h case    1:*/		return 0x820D9148;
	}
	return 0x820D9148;
} // Block from 820D9140h-820D9148h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D9148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9148);
		  /* 820D9148h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D9148h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9148h case    0:*/		return 0x820D914C;
		  /* 820D914Ch */ case    1:  		/* lwz R11, <#[R11 + 236]> */
		/* 820D914Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000EC) );
		/* 820D914Ch case    1:*/		return 0x820D9150;
		  /* 820D9150h */ case    2:  		/* b -64 */
		/* 820D9150h case    2:*/		return 0x820D9110;
		/* 820D9150h case    2:*/		return 0x820D9154;
	}
	return 0x820D9154;
} // Block from 820D9148h-820D9154h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D9154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9154);
		  /* 820D9154h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D9154h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9154h case    0:*/		return 0x820D9158;
		  /* 820D9158h */ case    1:  		/* lwz R11, <#[R11 + 244]> */
		/* 820D9158h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000F4) );
		/* 820D9158h case    1:*/		return 0x820D915C;
		  /* 820D915Ch */ case    2:  		/* b -76 */
		/* 820D915Ch case    2:*/		return 0x820D9110;
		/* 820D915Ch case    2:*/		return 0x820D9160;
	}
	return 0x820D9160;
} // Block from 820D9154h-820D9160h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D9160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9160);
		  /* 820D9160h */ case    0:  		/* lis R10, 29792 */
		/* 820D9160h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7460);
		/* 820D9160h case    0:*/		return 0x820D9164;
		  /* 820D9164h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820D9164h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9164h case    1:*/		return 0x820D9168;
		  /* 820D9168h */ case    2:  		/* bc 12, CR6_EQ, -96 */
		/* 820D9168h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D9108;  }
		/* 820D9168h case    2:*/		return 0x820D916C;
		  /* 820D916Ch */ case    3:  		/* lis R10, 29808 */
		/* 820D916Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7470);
		/* 820D916Ch case    3:*/		return 0x820D9170;
		  /* 820D9170h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D9170h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9170h case    4:*/		return 0x820D9174;
		  /* 820D9174h */ case    5:  		/* bc 12, CR6_EQ, -108 */
		/* 820D9174h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D9108;  }
		/* 820D9174h case    5:*/		return 0x820D9178;
		  /* 820D9178h */ case    6:  		/* lis R10, 29856 */
		/* 820D9178h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x74A0);
		/* 820D9178h case    6:*/		return 0x820D917C;
		  /* 820D917Ch */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D917Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D917Ch case    7:*/		return 0x820D9180;
		  /* 820D9180h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 820D9180h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D919C;  }
		/* 820D9180h case    8:*/		return 0x820D9184;
		  /* 820D9184h */ case    9:  		/* lis R10, 29872 */
		/* 820D9184h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x74B0);
		/* 820D9184h case    9:*/		return 0x820D9188;
		  /* 820D9188h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820D9188h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9188h case   10:*/		return 0x820D918C;
		  /* 820D918Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 820D918Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x820D91AC;  }
		/* 820D918Ch case   11:*/		return 0x820D9190;
		  /* 820D9190h */ case   12:  		/* lwz R11, <#[R31]> */
		/* 820D9190h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9190h case   12:*/		return 0x820D9194;
		  /* 820D9194h */ case   13:  		/* lwz R11, <#[R11 + 240]> */
		/* 820D9194h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000F0) );
		/* 820D9194h case   13:*/		return 0x820D9198;
		  /* 820D9198h */ case   14:  		/* b -136 */
		/* 820D9198h case   14:*/		return 0x820D9110;
		/* 820D9198h case   14:*/		return 0x820D919C;
	}
	return 0x820D919C;
} // Block from 820D9160h-820D919Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 820D919Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D919C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D919C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D919C);
		  /* 820D919Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D919Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D919Ch case    0:*/		return 0x820D91A0;
		  /* 820D91A0h */ case    1:  		/* lwz R11, <#[R11 + 248]> */
		/* 820D91A0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000F8) );
		/* 820D91A0h case    1:*/		return 0x820D91A4;
		  /* 820D91A4h */ case    2:  		/* b -148 */
		/* 820D91A4h case    2:*/		return 0x820D9110;
		/* 820D91A4h case    2:*/		return 0x820D91A8;
	}
	return 0x820D91A8;
} // Block from 820D919Ch-820D91A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D91A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D91A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D91A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D91A8);
		  /* 820D91A8h */ case    0:  		/* twi 31, R0, 22 */
		/* 820D91A8h case    0:*/		cpu::op::trap(regs, 0x820D91A8, regs.R0, 0x00000016);
		/* 820D91A8h case    0:*/		return 0x820D91AC;
	}
	return 0x820D91AC;
} // Block from 820D91A8h-820D91ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D91ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D91AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D91AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D91AC);
		  /* 820D91ACh */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 820D91ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 820D91ACh case    0:*/		return 0x820D91B0;
		  /* 820D91B0h */ case    1:  		/* li R5, 4532 */
		/* 820D91B0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x11B4);
		/* 820D91B0h case    1:*/		return 0x820D91B4;
		  /* 820D91B4h */ case    2:  		/* mr R3, R31 */
		/* 820D91B4h case    2:*/		regs.R3 = regs.R31;
		/* 820D91B4h case    2:*/		return 0x820D91B8;
		  /* 820D91B8h */ case    3:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 820D91B8h case    3:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 820D91B8h case    3:*/		return 0x820D91BC;
		  /* 820D91BCh */ case    4:  		/* lwz R11, <#[R31 + 260]> */
		/* 820D91BCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820D91BCh case    4:*/		return 0x820D91C0;
		  /* 820D91C0h */ case    5:  		/* lwz R4, <#[R11 + 60]> */
		/* 820D91C0h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 820D91C0h case    5:*/		return 0x820D91C4;
		  /* 820D91C4h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820D91C4h case    6:*/		if ( regs.CR[0].eq ) { return 0x820D91D4;  }
		/* 820D91C4h case    6:*/		return 0x820D91C8;
		  /* 820D91C8h */ case    7:  		/* lis R10, -32254 */
		/* 820D91C8h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820D91C8h case    7:*/		return 0x820D91CC;
		  /* 820D91CCh */ case    8:  		/* addi R6, R10, -31872 */
		/* 820D91CCh case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF8380);
		/* 820D91CCh case    8:*/		return 0x820D91D0;
		  /* 820D91D0h */ case    9:  		/* b 12 */
		/* 820D91D0h case    9:*/		return 0x820D91DC;
		/* 820D91D0h case    9:*/		return 0x820D91D4;
	}
	return 0x820D91D4;
} // Block from 820D91ACh-820D91D4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D91D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D91D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D91D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D91D4);
		  /* 820D91D4h */ case    0:  		/* lis R10, -32254 */
		/* 820D91D4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820D91D4h case    0:*/		return 0x820D91D8;
		  /* 820D91D8h */ case    1:  		/* addi R6, R10, -31928 */
		/* 820D91D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF8348);
		/* 820D91D8h case    1:*/		return 0x820D91DC;
	}
	return 0x820D91DC;
} // Block from 820D91D4h-820D91DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D91DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D91DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D91DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D91DC);
		  /* 820D91DCh */ case    0:  		/* bl 218452 */
		/* 820D91DCh case    0:*/		regs.LR = 0x820D91E0; return 0x8210E730;
		/* 820D91DCh case    0:*/		return 0x820D91E0;
		  /* 820D91E0h */ case    1:  		/* mr R3, R27 */
		/* 820D91E0h case    1:*/		regs.R3 = regs.R27;
		/* 820D91E0h case    1:*/		return 0x820D91E4;
		  /* 820D91E4h */ case    2:  		/* b -164 */
		/* 820D91E4h case    2:*/		return 0x820D9140;
		/* 820D91E4h case    2:*/		return 0x820D91E8;
	}
	return 0x820D91E8;
} // Block from 820D91DCh-820D91E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D91E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D91E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D91E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D91E8);
		  /* 820D91E8h */ case    0:  		/* mfspr R12, LR */
		/* 820D91E8h case    0:*/		regs.R12 = regs.LR;
		/* 820D91E8h case    0:*/		return 0x820D91EC;
		  /* 820D91ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820D91ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D91ECh case    1:*/		return 0x820D91F0;
		  /* 820D91F0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820D91F0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820D91F0h case    2:*/		return 0x820D91F4;
		  /* 820D91F4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820D91F4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820D91F4h case    3:*/		return 0x820D91F8;
		  /* 820D91F8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 820D91F8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820D91F8h case    4:*/		return 0x820D91FC;
		  /* 820D91FCh */ case    5:  		/* lwz R11, <#[R3 + 348]> */
		/* 820D91FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000015C) );
		/* 820D91FCh case    5:*/		return 0x820D9200;
		  /* 820D9200h */ case    6:  		/* mr R31, R3 */
		/* 820D9200h case    6:*/		regs.R31 = regs.R3;
		/* 820D9200h case    6:*/		return 0x820D9204;
		  /* 820D9204h */ case    7:  		/* mr R30, R4 */
		/* 820D9204h case    7:*/		regs.R30 = regs.R4;
		/* 820D9204h case    7:*/		return 0x820D9208;
		  /* 820D9208h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 820D9208h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D9208h case    8:*/		return 0x820D920C;
		  /* 820D920Ch */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 820D920Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x820D9218;  }
		/* 820D920Ch case    9:*/		return 0x820D9210;
		  /* 820D9210h */ case   10:  		/* li R3, 0 */
		/* 820D9210h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D9210h case   10:*/		return 0x820D9214;
		  /* 820D9214h */ case   11:  		/* b 204 */
		/* 820D9214h case   11:*/		return 0x820D92E0;
		/* 820D9214h case   11:*/		return 0x820D9218;
	}
	return 0x820D9218;
} // Block from 820D91E8h-820D9218h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D9218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9218);
		  /* 820D9218h */ case    0:  		/* lis R4, 512 */
		/* 820D9218h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x200);
		/* 820D9218h case    0:*/		return 0x820D921C;
		  /* 820D921Ch */ case    1:  		/* mr R3, R31 */
		/* 820D921Ch case    1:*/		regs.R3 = regs.R31;
		/* 820D921Ch case    1:*/		return 0x820D9220;
		  /* 820D9220h */ case    2:  		/* ori R4, R4, 31 */
		/* 820D9220h case    2:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1F);
		/* 820D9220h case    2:*/		return 0x820D9224;
		  /* 820D9224h */ case    3:  		/* bl 118476 */
		/* 820D9224h case    3:*/		regs.LR = 0x820D9228; return 0x820F60F0;
		/* 820D9224h case    3:*/		return 0x820D9228;
	}
	return 0x820D9228;
} // Block from 820D9218h-820D9228h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9228h
// Function '?XAssembleMicrocodeBlock@D3DXShader@@YAJPAVCPreProcessor@1@KPAPAVCNode@1@PAXP6AJ2PAUD3DXTOKEN@1@K1@Z@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9228);
		  /* 820D9228h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820D9228h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D9228h case    0:*/		return 0x820D922C;
		  /* 820D922Ch */ case    1:  		/* bc 12, CR0_LT, 180 */
		/* 820D922Ch case    1:*/		if ( regs.CR[0].lt ) { return 0x820D92E0;  }
		/* 820D922Ch case    1:*/		return 0x820D9230;
		  /* 820D9230h */ case    2:  		/* lwz R11, <#[R30 + 60]> */
		/* 820D9230h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820D9230h case    2:*/		return 0x820D9234;
		  /* 820D9234h */ case    3:  		/* lis R10, 32 */
		/* 820D9234h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x20);
		/* 820D9234h case    3:*/		return 0x820D9238;
		  /* 820D9238h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D9238h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9238h case    4:*/		return 0x820D923C;
		  /* 820D923Ch */ case    5:  		/* bc 4, CR6_EQ, 92 */
		/* 820D923Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x820D9298;  }
		/* 820D923Ch case    5:*/		return 0x820D9240;
		  /* 820D9240h */ case    6:  		/* lis R4, -28672 */
		/* 820D9240h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF9000);
		/* 820D9240h case    6:*/		return 0x820D9244;
		  /* 820D9244h */ case    7:  		/* mr R3, R31 */
		/* 820D9244h case    7:*/		regs.R3 = regs.R31;
		/* 820D9244h case    7:*/		return 0x820D9248;
		  /* 820D9248h */ case    8:  		/* bl 106792 */
		/* 820D9248h case    8:*/		regs.LR = 0x820D924C; return 0x820F3370;
		/* 820D9248h case    8:*/		return 0x820D924C;
		  /* 820D924Ch */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820D924Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D924Ch case    9:*/		return 0x820D9250;
		  /* 820D9250h */ case   10:  		/* bc 12, CR0_LT, 144 */
		/* 820D9250h case   10:*/		if ( regs.CR[0].lt ) { return 0x820D92E0;  }
		/* 820D9250h case   10:*/		return 0x820D9254;
		  /* 820D9254h */ case   11:  		/* lwz R11, <#[R31]> */
		/* 820D9254h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9254h case   11:*/		return 0x820D9258;
		  /* 820D9258h */ case   12:  		/* li R10, 16389 */
		/* 820D9258h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x4005);
		/* 820D9258h case   12:*/		return 0x820D925C;
		  /* 820D925Ch */ case   13:  		/* lwz R4, <#[R30 + 12]> */
		/* 820D925Ch case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 820D925Ch case   13:*/		return 0x820D9260;
		  /* 820D9260h */ case   14:  		/* li R6, 0 */
		/* 820D9260h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820D9260h case   14:*/		return 0x820D9264;
		  /* 820D9264h */ case   15:  		/* lis R5, 15 */
		/* 820D9264h case   15:*/		cpu::op::lis<0>(regs,&regs.R5,0xF);
		/* 820D9264h case   15:*/		return 0x820D9268;
		  /* 820D9268h */ case   16:  		/* rlwimi R4, R10, 29, 0, 20 */
		/* 820D9268h case   16:*/		cpu::op::rlwimi<0,29,0,20>(regs,&regs.R4,regs.R10);
		/* 820D9268h case   16:*/		return 0x820D926C;
		  /* 820D926Ch */ case   17:  		/* mr R3, R31 */
		/* 820D926Ch case   17:*/		regs.R3 = regs.R31;
		/* 820D926Ch case   17:*/		return 0x820D9270;
		  /* 820D9270h */ case   18:  		/* lwz R11, <#[R11 + 312]> */
		/* 820D9270h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000138) );
		/* 820D9270h case   18:*/		return 0x820D9274;
		  /* 820D9274h */ case   19:  		/* mtspr CTR, R11 */
		/* 820D9274h case   19:*/		regs.CTR = regs.R11;
		/* 820D9274h case   19:*/		return 0x820D9278;
		  /* 820D9278h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 820D9278h case   20:*/		if ( 1 ) { regs.LR = 0x820D927C; return (uint32)regs.CTR; }
		/* 820D9278h case   20:*/		return 0x820D927C;
		  /* 820D927Ch */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820D927Ch case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D927Ch case   21:*/		return 0x820D9280;
		  /* 820D9280h */ case   22:  		/* bc 12, CR0_LT, 96 */
		/* 820D9280h case   22:*/		if ( regs.CR[0].lt ) { return 0x820D92E0;  }
		/* 820D9280h case   22:*/		return 0x820D9284;
		  /* 820D9284h */ case   23:  		/* mr R3, R31 */
		/* 820D9284h case   23:*/		regs.R3 = regs.R31;
		/* 820D9284h case   23:*/		return 0x820D9288;
		  /* 820D9288h */ case   24:  		/* bl 83584 */
		/* 820D9288h case   24:*/		regs.LR = 0x820D928C; return 0x820ED908;
		/* 820D9288h case   24:*/		return 0x820D928C;
		  /* 820D928Ch */ case   25:  		/* srawi R11, R3, 31 */
		/* 820D928Ch case   25:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820D928Ch case   25:*/		return 0x820D9290;
		  /* 820D9290h */ case   26:  		/* and R3, R11, R3 */
		/* 820D9290h case   26:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820D9290h case   26:*/		return 0x820D9294;
		  /* 820D9294h */ case   27:  		/* b 76 */
		/* 820D9294h case   27:*/		return 0x820D92E0;
		/* 820D9294h case   27:*/		return 0x820D9298;
	}
	return 0x820D9298;
} // Block from 820D9228h-820D9298h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820D9298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9298);
		  /* 820D9298h */ case    0:  		/* lis R10, 64 */
		/* 820D9298h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x40);
		/* 820D9298h case    0:*/		return 0x820D929C;
		  /* 820D929Ch */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820D929Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D929Ch case    1:*/		return 0x820D92A0;
		  /* 820D92A0h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 820D92A0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820D92AC;  }
		/* 820D92A0h case    2:*/		return 0x820D92A4;
		  /* 820D92A4h */ case    3:  		/* lis R4, -24576 */
		/* 820D92A4h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFA000);
		/* 820D92A4h case    3:*/		return 0x820D92A8;
		  /* 820D92A8h */ case    4:  		/* b -100 */
		/* 820D92A8h case    4:*/		return 0x820D9244;
		/* 820D92A8h case    4:*/		return 0x820D92AC;
	}
	return 0x820D92AC;
} // Block from 820D9298h-820D92ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D92ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D92AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D92AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D92AC);
		  /* 820D92ACh */ case    0:  		/* lis R10, 128 */
		/* 820D92ACh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x80);
		/* 820D92ACh case    0:*/		return 0x820D92B0;
		  /* 820D92B0h */ case    1:  		/* mr R3, R31 */
		/* 820D92B0h case    1:*/		regs.R3 = regs.R31;
		/* 820D92B0h case    1:*/		return 0x820D92B4;
		  /* 820D92B4h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 820D92B4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D92B4h case    2:*/		return 0x820D92B8;
		  /* 820D92B8h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 820D92B8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D92C4;  }
		/* 820D92B8h case    3:*/		return 0x820D92BC;
		  /* 820D92BCh */ case    4:  		/* lis R4, -26624 */
		/* 820D92BCh case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF9800);
		/* 820D92BCh case    4:*/		return 0x820D92C0;
		  /* 820D92C0h */ case    5:  		/* b -120 */
		/* 820D92C0h case    5:*/		return 0x820D9248;
		/* 820D92C0h case    5:*/		return 0x820D92C4;
	}
	return 0x820D92C4;
} // Block from 820D92ACh-820D92C4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D92C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D92C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D92C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D92C4);
		  /* 820D92C4h */ case    0:  		/* lis R11, -32254 */
		/* 820D92C4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D92C4h case    0:*/		return 0x820D92C8;
		  /* 820D92C8h */ case    1:  		/* li R5, 4814 */
		/* 820D92C8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x12CE);
		/* 820D92C8h case    1:*/		return 0x820D92CC;
		  /* 820D92CCh */ case    2:  		/* addi R6, R11, -31816 */
		/* 820D92CCh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFF83B8);
		/* 820D92CCh case    2:*/		return 0x820D92D0;
		  /* 820D92D0h */ case    3:  		/* li R4, 0 */
		/* 820D92D0h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D92D0h case    3:*/		return 0x820D92D4;
		  /* 820D92D4h */ case    4:  		/* bl 218204 */
		/* 820D92D4h case    4:*/		regs.LR = 0x820D92D8; return 0x8210E730;
		/* 820D92D4h case    4:*/		return 0x820D92D8;
		  /* 820D92D8h */ case    5:  		/* lis R3, -32768 */
		/* 820D92D8h case    5:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820D92D8h case    5:*/		return 0x820D92DC;
		  /* 820D92DCh */ case    6:  		/* ori R3, R3, 16389 */
		/* 820D92DCh case    6:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820D92DCh case    6:*/		return 0x820D92E0;
	}
	return 0x820D92E0;
} // Block from 820D92C4h-820D92E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D92E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D92E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D92E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D92E0);
		  /* 820D92E0h */ case    0:  		/* addi R1, R1, 112 */
		/* 820D92E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820D92E0h case    0:*/		return 0x820D92E4;
		  /* 820D92E4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820D92E4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D92E4h case    1:*/		return 0x820D92E8;
		  /* 820D92E8h */ case    2:  		/* mtspr LR, R12 */
		/* 820D92E8h case    2:*/		regs.LR = regs.R12;
		/* 820D92E8h case    2:*/		return 0x820D92EC;
		  /* 820D92ECh */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 820D92ECh case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820D92ECh case    3:*/		return 0x820D92F0;
		  /* 820D92F0h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820D92F0h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820D92F0h case    4:*/		return 0x820D92F4;
		  /* 820D92F4h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820D92F4h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820D92F4h case    5:*/		return 0x820D92F8;
	}
	return 0x820D92F8;
} // Block from 820D92E0h-820D92F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D92F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D92F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D92F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D92F8);
		  /* 820D92F8h */ case    0:  		/* mfspr R12, LR */
		/* 820D92F8h case    0:*/		regs.R12 = regs.LR;
		/* 820D92F8h case    0:*/		return 0x820D92FC;
		  /* 820D92FCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820D92FCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D92FCh case    1:*/		return 0x820D9300;
		  /* 820D9300h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820D9300h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820D9300h case    2:*/		return 0x820D9304;
		  /* 820D9304h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820D9304h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820D9304h case    3:*/		return 0x820D9308;
		  /* 820D9308h */ case    4:  		/* lwz R11, <#[R3 + 348]> */
		/* 820D9308h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000015C) );
		/* 820D9308h case    4:*/		return 0x820D930C;
		  /* 820D930Ch */ case    5:  		/* mr R31, R3 */
		/* 820D930Ch case    5:*/		regs.R31 = regs.R3;
		/* 820D930Ch case    5:*/		return 0x820D9310;
		  /* 820D9310h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 820D9310h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D9310h case    6:*/		return 0x820D9314;
		  /* 820D9314h */ case    7:  		/* bc 12, CR6_EQ, 64 */
		/* 820D9314h case    7:*/		if ( regs.CR[6].eq ) { return 0x820D9354;  }
		/* 820D9314h case    7:*/		return 0x820D9318;
		  /* 820D9318h */ case    8:  		/* lwz R11, <#[R3 + 200]> */
		/* 820D9318h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000C8) );
		/* 820D9318h case    8:*/		return 0x820D931C;
		  /* 820D931Ch */ case    9:  		/* rlwinm R4, R11, 0, 1, 31 */
		/* 820D931Ch case    9:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R4,regs.R11);
		/* 820D931Ch case    9:*/		return 0x820D9320;
		  /* 820D9320h */ case   10:  		/* mr R3, R31 */
		/* 820D9320h case   10:*/		regs.R3 = regs.R31;
		/* 820D9320h case   10:*/		return 0x820D9324;
		  /* 820D9324h */ case   11:  		/* bl 106572 */
		/* 820D9324h case   11:*/		regs.LR = 0x820D9328; return 0x820F3370;
		/* 820D9324h case   11:*/		return 0x820D9328;
	}
	return 0x820D9328;
} // Block from 820D92F8h-820D9328h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D9328h
// Function '?InitCaps@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9328);
		  /* 820D9328h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820D9328h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D9328h case    0:*/		return 0x820D932C;
		  /* 820D932Ch */ case    1:  		/* bc 12, CR0_LT, 20 */
		/* 820D932Ch case    1:*/		if ( regs.CR[0].lt ) { return 0x820D9340;  }
		/* 820D932Ch case    1:*/		return 0x820D9330;
		  /* 820D9330h */ case    2:  		/* mr R3, R31 */
		/* 820D9330h case    2:*/		regs.R3 = regs.R31;
		/* 820D9330h case    2:*/		return 0x820D9334;
		  /* 820D9334h */ case    3:  		/* bl 83412 */
		/* 820D9334h case    3:*/		regs.LR = 0x820D9338; return 0x820ED908;
		/* 820D9334h case    3:*/		return 0x820D9338;
		  /* 820D9338h */ case    4:  		/* srawi R11, R3, 31 */
		/* 820D9338h case    4:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820D9338h case    4:*/		return 0x820D933C;
		  /* 820D933Ch */ case    5:  		/* and R3, R11, R3 */
		/* 820D933Ch case    5:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820D933Ch case    5:*/		return 0x820D9340;
	}
	return 0x820D9340;
} // Block from 820D9328h-820D9340h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D9340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9340);
		  /* 820D9340h */ case    0:  		/* addi R1, R1, 96 */
		/* 820D9340h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820D9340h case    0:*/		return 0x820D9344;
		  /* 820D9344h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820D9344h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D9344h case    1:*/		return 0x820D9348;
		  /* 820D9348h */ case    2:  		/* mtspr LR, R12 */
		/* 820D9348h case    2:*/		regs.LR = regs.R12;
		/* 820D9348h case    2:*/		return 0x820D934C;
		  /* 820D934Ch */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 820D934Ch case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820D934Ch case    3:*/		return 0x820D9350;
		  /* 820D9350h */ case    4:  		/* bclr 20, CR0_LT */
		/* 820D9350h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820D9350h case    4:*/		return 0x820D9354;
	}
	return 0x820D9354;
} // Block from 820D9340h-820D9354h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D9354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9354);
		  /* 820D9354h */ case    0:  		/* lwz R4, <#[R31 + 200]> */
		/* 820D9354h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000C8) );
		/* 820D9354h case    0:*/		return 0x820D9358;
		  /* 820D9358h */ case    1:  		/* b -56 */
		/* 820D9358h case    1:*/		return 0x820D9320;
		/* 820D9358h case    1:*/		return 0x820D935C;
		  /* 820D935Ch */ case    2:  		/* nop */
		/* 820D935Ch case    2:*/		cpu::op::nop();
		/* 820D935Ch case    2:*/		return 0x820D9360;
	}
	return 0x820D9360;
} // Block from 820D9354h-820D9360h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D9360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9360);
		  /* 820D9360h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D9360h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9360h case    0:*/		return 0x820D9364;
		  /* 820D9364h */ case    1:  		/* lwz R11, <#[R11 + 380]> */
		/* 820D9364h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000017C) );
		/* 820D9364h case    1:*/		return 0x820D9368;
		  /* 820D9368h */ case    2:  		/* mtspr CTR, R11 */
		/* 820D9368h case    2:*/		regs.CTR = regs.R11;
		/* 820D9368h case    2:*/		return 0x820D936C;
		  /* 820D936Ch */ case    3:  		/* bcctr 20, CR0_LT */
		/* 820D936Ch case    3:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D936Ch case    3:*/		return 0x820D9370;
	}
	return 0x820D9370;
} // Block from 820D9360h-820D9370h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9370);
		  /* 820D9370h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D9370h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9370h case    0:*/		return 0x820D9374;
		  /* 820D9374h */ case    1:  		/* lwz R11, <#[R11 + 376]> */
		/* 820D9374h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000178) );
		/* 820D9374h case    1:*/		return 0x820D9378;
		  /* 820D9378h */ case    2:  		/* mtspr CTR, R11 */
		/* 820D9378h case    2:*/		regs.CTR = regs.R11;
		/* 820D9378h case    2:*/		return 0x820D937C;
		  /* 820D937Ch */ case    3:  		/* bcctr 20, CR0_LT */
		/* 820D937Ch case    3:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D937Ch case    3:*/		return 0x820D9380;
	}
	return 0x820D9380;
} // Block from 820D9370h-820D9380h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9380);
		  /* 820D9380h */ case    0:  		/* mfspr R12, LR */
		/* 820D9380h case    0:*/		regs.R12 = regs.LR;
		/* 820D9380h case    0:*/		return 0x820D9384;
		  /* 820D9384h */ case    1:  		/* bl -295208 */
		/* 820D9384h case    1:*/		regs.LR = 0x820D9388; return 0x8209125C;
		/* 820D9384h case    1:*/		return 0x820D9388;
		  /* 820D9388h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820D9388h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820D9388h case    2:*/		return 0x820D938C;
		  /* 820D938Ch */ case    3:  		/* mr R31, R3 */
		/* 820D938Ch case    3:*/		regs.R31 = regs.R3;
		/* 820D938Ch case    3:*/		return 0x820D9390;
		  /* 820D9390h */ case    4:  		/* mr R30, R4 */
		/* 820D9390h case    4:*/		regs.R30 = regs.R4;
		/* 820D9390h case    4:*/		return 0x820D9394;
		  /* 820D9394h */ case    5:  		/* mr R29, R5 */
		/* 820D9394h case    5:*/		regs.R29 = regs.R5;
		/* 820D9394h case    5:*/		return 0x820D9398;
		  /* 820D9398h */ case    6:  		/* bl 140480 */
		/* 820D9398h case    6:*/		regs.LR = 0x820D939C; return 0x820FB858;
		/* 820D9398h case    6:*/		return 0x820D939C;
		  /* 820D939Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820D939Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D939Ch case    7:*/		return 0x820D93A0;
		  /* 820D93A0h */ case    8:  		/* bc 12, CR0_LT, 36 */
		/* 820D93A0h case    8:*/		if ( regs.CR[0].lt ) { return 0x820D93C4;  }
		/* 820D93A0h case    8:*/		return 0x820D93A4;
		  /* 820D93A4h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 820D93A4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D93A4h case    9:*/		return 0x820D93A8;
		  /* 820D93A8h */ case   10:  		/* li R6, 1 */
		/* 820D93A8h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820D93A8h case   10:*/		return 0x820D93AC;
		  /* 820D93ACh */ case   11:  		/* mr R5, R29 */
		/* 820D93ACh case   11:*/		regs.R5 = regs.R29;
		/* 820D93ACh case   11:*/		return 0x820D93B0;
		  /* 820D93B0h */ case   12:  		/* mr R4, R30 */
		/* 820D93B0h case   12:*/		regs.R4 = regs.R30;
		/* 820D93B0h case   12:*/		return 0x820D93B4;
		  /* 820D93B4h */ case   13:  		/* mr R3, R31 */
		/* 820D93B4h case   13:*/		regs.R3 = regs.R31;
		/* 820D93B4h case   13:*/		return 0x820D93B8;
		  /* 820D93B8h */ case   14:  		/* lwz R11, <#[R11 + 104]> */
		/* 820D93B8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000068) );
		/* 820D93B8h case   14:*/		return 0x820D93BC;
		  /* 820D93BCh */ case   15:  		/* mtspr CTR, R11 */
		/* 820D93BCh case   15:*/		regs.CTR = regs.R11;
		/* 820D93BCh case   15:*/		return 0x820D93C0;
		  /* 820D93C0h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 820D93C0h case   16:*/		if ( 1 ) { regs.LR = 0x820D93C4; return (uint32)regs.CTR; }
		/* 820D93C0h case   16:*/		return 0x820D93C4;
	}
	return 0x820D93C4;
} // Block from 820D9380h-820D93C4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820D93C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D93C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D93C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D93C4);
		  /* 820D93C4h */ case    0:  		/* addi R1, R1, 112 */
		/* 820D93C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820D93C4h case    0:*/		return 0x820D93C8;
	}
	return 0x820D93C8;
} // Block from 820D93C4h-820D93C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D93C8h
// Function '?EmitInstructions@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D93C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D93C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D93C8);
		  /* 820D93C8h */ case    0:  		/* b -295196 */
		/* 820D93C8h case    0:*/		return 0x820912AC;
		/* 820D93C8h case    0:*/		return 0x820D93CC;
		  /* 820D93CCh */ case    1:  		/* nop */
		/* 820D93CCh case    1:*/		cpu::op::nop();
		/* 820D93CCh case    1:*/		return 0x820D93D0;
	}
	return 0x820D93D0;
} // Block from 820D93C8h-820D93D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D93D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D93D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D93D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D93D0);
		  /* 820D93D0h */ case    0:  		/* mfspr R12, LR */
		/* 820D93D0h case    0:*/		regs.R12 = regs.LR;
		/* 820D93D0h case    0:*/		return 0x820D93D4;
		  /* 820D93D4h */ case    1:  		/* bl -295296 */
		/* 820D93D4h case    1:*/		regs.LR = 0x820D93D8; return 0x82091254;
		/* 820D93D4h case    1:*/		return 0x820D93D8;
		  /* 820D93D8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820D93D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820D93D8h case    2:*/		return 0x820D93DC;
		  /* 820D93DCh */ case    3:  		/* lwz R11, <#[R4]> */
		/* 820D93DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 820D93DCh case    3:*/		return 0x820D93E0;
		  /* 820D93E0h */ case    4:  		/* mr R30, R4 */
		/* 820D93E0h case    4:*/		regs.R30 = regs.R4;
		/* 820D93E0h case    4:*/		return 0x820D93E4;
		  /* 820D93E4h */ case    5:  		/* lwz R10, <#[R3]> */
		/* 820D93E4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 820D93E4h case    5:*/		return 0x820D93E8;
		  /* 820D93E8h */ case    6:  		/* mr R31, R3 */
		/* 820D93E8h case    6:*/		regs.R31 = regs.R3;
		/* 820D93E8h case    6:*/		return 0x820D93EC;
		  /* 820D93ECh */ case    7:  		/* lwz R9, <#[R3 + 20]> */
		/* 820D93ECh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 820D93ECh case    7:*/		return 0x820D93F0;
		  /* 820D93F0h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D93F0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D93F0h case    8:*/		return 0x820D93F4;
		  /* 820D93F4h */ case    9:  		/* mr R28, R5 */
		/* 820D93F4h case    9:*/		regs.R28 = regs.R5;
		/* 820D93F4h case    9:*/		return 0x820D93F8;
		  /* 820D93F8h */ case   10:  		/* mr R27, R6 */
		/* 820D93F8h case   10:*/		regs.R27 = regs.R6;
		/* 820D93F8h case   10:*/		return 0x820D93FC;
		  /* 820D93FCh */ case   11:  		/* mr R29, R7 */
		/* 820D93FCh case   11:*/		regs.R29 = regs.R7;
		/* 820D93FCh case   11:*/		return 0x820D9400;
		  /* 820D9400h */ case   12:  		/* lwz R10, <#[R10 + 112]> */
		/* 820D9400h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000070) );
		/* 820D9400h case   12:*/		return 0x820D9404;
		  /* 820D9404h */ case   13:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820D9404h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820D9404h case   13:*/		return 0x820D9408;
		  /* 820D9408h */ case   14:  		/* mtspr CTR, R10 */
		/* 820D9408h case   14:*/		regs.CTR = regs.R10;
		/* 820D9408h case   14:*/		return 0x820D940C;
		  /* 820D940Ch */ case   15:  		/* lwz R4, <#[R11 + 108]> */
		/* 820D940Ch case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000006C) );
		/* 820D940Ch case   15:*/		return 0x820D9410;
		  /* 820D9410h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 820D9410h case   16:*/		if ( 1 ) { regs.LR = 0x820D9414; return (uint32)regs.CTR; }
		/* 820D9410h case   16:*/		return 0x820D9414;
		  /* 820D9414h */ case   17:  		/* cmplwi CR6, R3, 17 */
		/* 820D9414h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000011);
		/* 820D9414h case   17:*/		return 0x820D9418;
		  /* 820D9418h */ case   18:  		/* bc 4, CR6_EQ, 20 */
		/* 820D9418h case   18:*/		if ( !regs.CR[6].eq ) { return 0x820D942C;  }
		/* 820D9418h case   18:*/		return 0x820D941C;
		  /* 820D941Ch */ case   19:  		/* lis R11, 228 */
		/* 820D941Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xE4);
		/* 820D941Ch case   19:*/		return 0x820D9420;
		  /* 820D9420h */ case   20:  		/* li R3, 0 */
		/* 820D9420h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D9420h case   20:*/		return 0x820D9424;
		  /* 820D9424h */ case   21:  		/* stw R11, <#[R29]> */
		/* 820D9424h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820D9424h case   21:*/		return 0x820D9428;
		  /* 820D9428h */ case   22:  		/* b 28 */
		/* 820D9428h case   22:*/		return 0x820D9444;
		/* 820D9428h case   22:*/		return 0x820D942C;
	}
	return 0x820D942C;
} // Block from 820D93D0h-820D942Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 820D942Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D942C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D942C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D942C);
		  /* 820D942Ch */ case    0:  		/* mr R7, R29 */
		/* 820D942Ch case    0:*/		regs.R7 = regs.R29;
		/* 820D942Ch case    0:*/		return 0x820D9430;
		  /* 820D9430h */ case    1:  		/* mr R6, R27 */
		/* 820D9430h case    1:*/		regs.R6 = regs.R27;
		/* 820D9430h case    1:*/		return 0x820D9434;
		  /* 820D9434h */ case    2:  		/* mr R5, R28 */
		/* 820D9434h case    2:*/		regs.R5 = regs.R28;
		/* 820D9434h case    2:*/		return 0x820D9438;
		  /* 820D9438h */ case    3:  		/* mr R4, R30 */
		/* 820D9438h case    3:*/		regs.R4 = regs.R30;
		/* 820D9438h case    3:*/		return 0x820D943C;
		  /* 820D943Ch */ case    4:  		/* mr R3, R31 */
		/* 820D943Ch case    4:*/		regs.R3 = regs.R31;
		/* 820D943Ch case    4:*/		return 0x820D9440;
		  /* 820D9440h */ case    5:  		/* bl 82552 */
		/* 820D9440h case    5:*/		regs.LR = 0x820D9444; return 0x820ED6B8;
		/* 820D9440h case    5:*/		return 0x820D9444;
	}
	return 0x820D9444;
} // Block from 820D942Ch-820D9444h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D9444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9444);
		  /* 820D9444h */ case    0:  		/* addi R1, R1, 128 */
		/* 820D9444h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820D9444h case    0:*/		return 0x820D9448;
		  /* 820D9448h */ case    1:  		/* b -295332 */
		/* 820D9448h case    1:*/		return 0x820912A4;
		/* 820D9448h case    1:*/		return 0x820D944C;
		  /* 820D944Ch */ case    2:  		/* nop */
		/* 820D944Ch case    2:*/		cpu::op::nop();
		/* 820D944Ch case    2:*/		return 0x820D9450;
	}
	return 0x820D9450;
} // Block from 820D9444h-820D9450h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D9450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9450);
		  /* 820D9450h */ case    0:  		/* mfspr R12, LR */
		/* 820D9450h case    0:*/		regs.R12 = regs.LR;
		/* 820D9450h case    0:*/		return 0x820D9454;
		  /* 820D9454h */ case    1:  		/* bl -295416 */
		/* 820D9454h case    1:*/		regs.LR = 0x820D9458; return 0x8209125C;
		/* 820D9454h case    1:*/		return 0x820D9458;
		  /* 820D9458h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820D9458h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820D9458h case    2:*/		return 0x820D945C;
		  /* 820D945Ch */ case    3:  		/* mr R31, R3 */
		/* 820D945Ch case    3:*/		regs.R31 = regs.R3;
		/* 820D945Ch case    3:*/		return 0x820D9460;
		  /* 820D9460h */ case    4:  		/* mr R30, R4 */
		/* 820D9460h case    4:*/		regs.R30 = regs.R4;
		/* 820D9460h case    4:*/		return 0x820D9464;
		  /* 820D9464h */ case    5:  		/* mr R29, R7 */
		/* 820D9464h case    5:*/		regs.R29 = regs.R7;
		/* 820D9464h case    5:*/		return 0x820D9468;
		  /* 820D9468h */ case    6:  		/* bl 80000 */
		/* 820D9468h case    6:*/		regs.LR = 0x820D946C; return 0x820ECCE8;
		/* 820D9468h case    6:*/		return 0x820D946C;
		  /* 820D946Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820D946Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D946Ch case    7:*/		return 0x820D9470;
		  /* 820D9470h */ case    8:  		/* bc 12, CR0_LT, 48 */
		/* 820D9470h case    8:*/		if ( regs.CR[0].lt ) { return 0x820D94A0;  }
		/* 820D9470h case    8:*/		return 0x820D9474;
		  /* 820D9474h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 820D9474h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9474h case    9:*/		return 0x820D9478;
		  /* 820D9478h */ case   10:  		/* mr R3, R31 */
		/* 820D9478h case   10:*/		regs.R3 = regs.R31;
		/* 820D9478h case   10:*/		return 0x820D947C;
		  /* 820D947Ch */ case   11:  		/* lwz R4, <#[R30 + 108]> */
		/* 820D947Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000006C) );
		/* 820D947Ch case   11:*/		return 0x820D9480;
		  /* 820D9480h */ case   12:  		/* lwz R11, <#[R11 + 112]> */
		/* 820D9480h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 820D9480h case   12:*/		return 0x820D9484;
		  /* 820D9484h */ case   13:  		/* mtspr CTR, R11 */
		/* 820D9484h case   13:*/		regs.CTR = regs.R11;
		/* 820D9484h case   13:*/		return 0x820D9488;
		  /* 820D9488h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 820D9488h case   14:*/		if ( 1 ) { regs.LR = 0x820D948C; return (uint32)regs.CTR; }
		/* 820D9488h case   14:*/		return 0x820D948C;
		  /* 820D948Ch */ case   15:  		/* cmplwi CR6, R3, 17 */
		/* 820D948Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000011);
		/* 820D948Ch case   15:*/		return 0x820D9490;
		  /* 820D9490h */ case   16:  		/* bc 4, CR6_EQ, 12 */
		/* 820D9490h case   16:*/		if ( !regs.CR[6].eq ) { return 0x820D949C;  }
		/* 820D9490h case   16:*/		return 0x820D9494;
		  /* 820D9494h */ case   17:  		/* li R11, 1 */
		/* 820D9494h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820D9494h case   17:*/		return 0x820D9498;
		  /* 820D9498h */ case   18:  		/* stw R11, <#[R29]> */
		/* 820D9498h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820D9498h case   18:*/		return 0x820D949C;
	}
	return 0x820D949C;
} // Block from 820D9450h-820D949Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 820D949Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D949C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D949C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D949C);
		  /* 820D949Ch */ case    0:  		/* li R3, 0 */
		/* 820D949Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D949Ch case    0:*/		return 0x820D94A0;
	}
	return 0x820D94A0;
} // Block from 820D949Ch-820D94A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D94A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D94A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D94A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D94A0);
		  /* 820D94A0h */ case    0:  		/* addi R1, R1, 112 */
		/* 820D94A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820D94A0h case    0:*/		return 0x820D94A4;
		  /* 820D94A4h */ case    1:  		/* b -295416 */
		/* 820D94A4h case    1:*/		return 0x820912AC;
		/* 820D94A4h case    1:*/		return 0x820D94A8;
	}
	return 0x820D94A8;
} // Block from 820D94A0h-820D94A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D94A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D94A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D94A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D94A8);
		  /* 820D94A8h */ case    0:  		/* mfspr R12, LR */
		/* 820D94A8h case    0:*/		regs.R12 = regs.LR;
		/* 820D94A8h case    0:*/		return 0x820D94AC;
		  /* 820D94ACh */ case    1:  		/* bl -295528 */
		/* 820D94ACh case    1:*/		regs.LR = 0x820D94B0; return 0x82091244;
		/* 820D94ACh case    1:*/		return 0x820D94B0;
		  /* 820D94B0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 820D94B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 820D94B0h case    2:*/		return 0x820D94B4;
		  /* 820D94B4h */ case    3:  		/* mr R28, R3 */
		/* 820D94B4h case    3:*/		regs.R28 = regs.R3;
		/* 820D94B4h case    3:*/		return 0x820D94B8;
		  /* 820D94B8h */ case    4:  		/* mr R25, R4 */
		/* 820D94B8h case    4:*/		regs.R25 = regs.R4;
		/* 820D94B8h case    4:*/		return 0x820D94BC;
		  /* 820D94BCh */ case    5:  		/* mr R26, R5 */
		/* 820D94BCh case    5:*/		regs.R26 = regs.R5;
		/* 820D94BCh case    5:*/		return 0x820D94C0;
		  /* 820D94C0h */ case    6:  		/* mr R23, R6 */
		/* 820D94C0h case    6:*/		regs.R23 = regs.R6;
		/* 820D94C0h case    6:*/		return 0x820D94C4;
		  /* 820D94C4h */ case    7:  		/* li R24, 0 */
		/* 820D94C4h case    7:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820D94C4h case    7:*/		return 0x820D94C8;
		  /* 820D94C8h */ case    8:  		/* cmpwi CR6, R7, 0 */
		/* 820D94C8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 820D94C8h case    8:*/		return 0x820D94CC;
		  /* 820D94CCh */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 820D94CCh case    9:*/		if ( regs.CR[6].eq ) { return 0x820D94D8;  }
		/* 820D94CCh case    9:*/		return 0x820D94D0;
		  /* 820D94D0h */ case   10:  		/* lis R24, 15 */
		/* 820D94D0h case   10:*/		cpu::op::lis<0>(regs,&regs.R24,0xF);
		/* 820D94D0h case   10:*/		return 0x820D94D4;
		  /* 820D94D4h */ case   11:  		/* b 184 */
		/* 820D94D4h case   11:*/		return 0x820D958C;
		/* 820D94D4h case   11:*/		return 0x820D94D8;
	}
	return 0x820D94D8;
} // Block from 820D94A8h-820D94D8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D94D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D94D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D94D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D94D8);
		  /* 820D94D8h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 820D94D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 820D94D8h case    0:*/		return 0x820D94DC;
		  /* 820D94DCh */ case    1:  		/* lwz R10, <#[R28 + 20]> */
		/* 820D94DCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 820D94DCh case    1:*/		return 0x820D94E0;
		  /* 820D94E0h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D94E0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D94E0h case    2:*/		return 0x820D94E4;
		  /* 820D94E4h */ case    3:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820D94E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820D94E4h case    3:*/		return 0x820D94E8;
		  /* 820D94E8h */ case    4:  		/* lwz R11, <#[R11 + 60]> */
		/* 820D94E8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 820D94E8h case    4:*/		return 0x820D94EC;
		  /* 820D94ECh */ case    5:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 820D94ECh case    5:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 820D94ECh case    5:*/		return 0x820D94F0;
		  /* 820D94F0h */ case    6:  		/* bc 12, CR0_EQ, 8 */
		/* 820D94F0h case    6:*/		if ( regs.CR[0].eq ) { return 0x820D94F8;  }
		/* 820D94F0h case    6:*/		return 0x820D94F4;
		  /* 820D94F4h */ case    7:  		/* lis R24, 16 */
		/* 820D94F4h case    7:*/		cpu::op::lis<0>(regs,&regs.R24,0x10);
		/* 820D94F4h case    7:*/		return 0x820D94F8;
	}
	return 0x820D94F8;
} // Block from 820D94D8h-820D94F8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D94F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D94F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D94F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D94F8);
		  /* 820D94F8h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 820D94F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 820D94F8h case    0:*/		return 0x820D94FC;
		  /* 820D94FCh */ case    1:  		/* bc 12, CR6_EQ, 144 */
		/* 820D94FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x820D958C;  }
		/* 820D94FCh case    1:*/		return 0x820D9500;
		  /* 820D9500h */ case    2:  		/* lis R11, -32254 */
		/* 820D9500h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D9500h case    2:*/		return 0x820D9504;
		  /* 820D9504h */ case    3:  		/* mr R30, R25 */
		/* 820D9504h case    3:*/		regs.R30 = regs.R25;
		/* 820D9504h case    3:*/		return 0x820D9508;
		  /* 820D9508h */ case    4:  		/* mr R29, R26 */
		/* 820D9508h case    4:*/		regs.R29 = regs.R26;
		/* 820D9508h case    4:*/		return 0x820D950C;
		  /* 820D950Ch */ case    5:  		/* addi R27, R11, -31760 */
		/* 820D950Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFF83F0);
		/* 820D950Ch case    5:*/		return 0x820D9510;
		  /* 820D9510h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 820D9510h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820D9510h case    6:*/		return 0x820D9514;
		  /* 820D9514h */ case    7:  		/* li R31, 0 */
		/* 820D9514h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820D9514h case    7:*/		return 0x820D9518;
		  /* 820D9518h */ case    8:  		/* lwz R10, <#[R28 + 20]> */
		/* 820D9518h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 820D9518h case    8:*/		return 0x820D951C;
		  /* 820D951Ch */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D951Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D951Ch case    9:*/		return 0x820D9520;
		  /* 820D9520h */ case   10:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820D9520h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820D9520h case   10:*/		return 0x820D9524;
		  /* 820D9524h */ case   11:  		/* lwz R11, <#[R11 + 16]> */
		/* 820D9524h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820D9524h case   11:*/		return 0x820D9528;
		  /* 820D9528h */ case   12:  		/* cmplwi CR6, R11, 1 */
		/* 820D9528h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820D9528h case   12:*/		return 0x820D952C;
		  /* 820D952Ch */ case   13:  		/* bc 12, CR6_LT, 44 */
		/* 820D952Ch case   13:*/		if ( regs.CR[6].lt ) { return 0x820D9558;  }
		/* 820D952Ch case   13:*/		return 0x820D9530;
		  /* 820D9530h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 820D9530h case   14:*/		if ( regs.CR[6].eq ) { return 0x820D9550;  }
		/* 820D9530h case   14:*/		return 0x820D9534;
		  /* 820D9534h */ case   15:  		/* cmplwi CR6, R11, 3 */
		/* 820D9534h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 820D9534h case   15:*/		return 0x820D9538;
		  /* 820D9538h */ case   16:  		/* bc 12, CR6_LT, 16 */
		/* 820D9538h case   16:*/		if ( regs.CR[6].lt ) { return 0x820D9548;  }
		/* 820D9538h case   16:*/		return 0x820D953C;
		  /* 820D953Ch */ case   17:  		/* bc 4, CR6_EQ, 32 */
		/* 820D953Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x820D955C;  }
		/* 820D953Ch case   17:*/		return 0x820D9540;
		  /* 820D9540h */ case   18:  		/* lis R31, 8 */
		/* 820D9540h case   18:*/		cpu::op::lis<0>(regs,&regs.R31,0x8);
		/* 820D9540h case   18:*/		return 0x820D9544;
		  /* 820D9544h */ case   19:  		/* b 24 */
		/* 820D9544h case   19:*/		return 0x820D955C;
		/* 820D9544h case   19:*/		return 0x820D9548;
	}
	return 0x820D9548;
} // Block from 820D94F8h-820D9548h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820D9548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9548);
		  /* 820D9548h */ case    0:  		/* lis R31, 4 */
		/* 820D9548h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x4);
		/* 820D9548h case    0:*/		return 0x820D954C;
		  /* 820D954Ch */ case    1:  		/* b 16 */
		/* 820D954Ch case    1:*/		return 0x820D955C;
		/* 820D954Ch case    1:*/		return 0x820D9550;
	}
	return 0x820D9550;
} // Block from 820D9548h-820D9550h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D9550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9550);
		  /* 820D9550h */ case    0:  		/* lis R31, 2 */
		/* 820D9550h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x2);
		/* 820D9550h case    0:*/		return 0x820D9554;
		  /* 820D9554h */ case    1:  		/* b 8 */
		/* 820D9554h case    1:*/		return 0x820D955C;
		/* 820D9554h case    1:*/		return 0x820D9558;
	}
	return 0x820D9558;
} // Block from 820D9550h-820D9558h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D9558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9558);
		  /* 820D9558h */ case    0:  		/* lis R31, 1 */
		/* 820D9558h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x1);
		/* 820D9558h case    0:*/		return 0x820D955C;
	}
	return 0x820D955C;
} // Block from 820D9558h-820D955Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D955Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D955C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D955C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D955C);
		  /* 820D955Ch */ case    0:  		/* and. R11, R31, R24 */
		/* 820D955Ch case    0:*/		cpu::op::and<1>(regs,&regs.R11,regs.R31,regs.R24);
		/* 820D955Ch case    0:*/		return 0x820D9560;
		  /* 820D9560h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 820D9560h case    1:*/		if ( regs.CR[0].eq ) { return 0x820D957C;  }
		/* 820D9560h case    1:*/		return 0x820D9564;
		  /* 820D9564h */ case    2:  		/* lwz R11, <#[R28 + 260]> */
		/* 820D9564h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 820D9564h case    2:*/		return 0x820D9568;
		  /* 820D9568h */ case    3:  		/* mr R6, R27 */
		/* 820D9568h case    3:*/		regs.R6 = regs.R27;
		/* 820D9568h case    3:*/		return 0x820D956C;
		  /* 820D956Ch */ case    4:  		/* li R5, 4821 */
		/* 820D956Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x12D5);
		/* 820D956Ch case    4:*/		return 0x820D9570;
		  /* 820D9570h */ case    5:  		/* mr R3, R28 */
		/* 820D9570h case    5:*/		regs.R3 = regs.R28;
		/* 820D9570h case    5:*/		return 0x820D9574;
		  /* 820D9574h */ case    6:  		/* lwz R4, <#[R11 + 60]> */
		/* 820D9574h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 820D9574h case    6:*/		return 0x820D9578;
		  /* 820D9578h */ case    7:  		/* bl 217528 */
		/* 820D9578h case    7:*/		regs.LR = 0x820D957C; return 0x8210E730;
		/* 820D9578h case    7:*/		return 0x820D957C;
	}
	return 0x820D957C;
} // Block from 820D955Ch-820D957Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D957Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D957C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D957C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D957C);
		  /* 820D957Ch */ case    0:  		/* addic. R29, R29, -1 */
		/* 820D957Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 820D957Ch case    0:*/		return 0x820D9580;
		  /* 820D9580h */ case    1:  		/* or R24, R31, R24 */
		/* 820D9580h case    1:*/		cpu::op::or<0>(regs,&regs.R24,regs.R31,regs.R24);
		/* 820D9580h case    1:*/		return 0x820D9584;
		  /* 820D9584h */ case    2:  		/* addi R30, R30, 4 */
		/* 820D9584h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820D9584h case    2:*/		return 0x820D9588;
		  /* 820D9588h */ case    3:  		/* bc 4, CR0_EQ, -120 */
		/* 820D9588h case    3:*/		if ( !regs.CR[0].eq ) { return 0x820D9510;  }
		/* 820D9588h case    3:*/		return 0x820D958C;
	}
	return 0x820D958C;
} // Block from 820D957Ch-820D958Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D958Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D958C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D958C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D958C);
		  /* 820D958Ch */ case    0:  		/* lwz R11, <#[R28 + 112]> */
		/* 820D958Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000070) );
		/* 820D958Ch case    0:*/		return 0x820D9590;
		  /* 820D9590h */ case    1:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 820D9590h case    1:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 820D9590h case    1:*/		return 0x820D9594;
		  /* 820D9594h */ case    2:  		/* bc 4, CR0_EQ, 140 */
		/* 820D9594h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820D9620;  }
		/* 820D9594h case    2:*/		return 0x820D9598;
		  /* 820D9598h */ case    3:  		/* lwz R11, <#[R28 + 204]> */
		/* 820D9598h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x000000CC) );
		/* 820D9598h case    3:*/		return 0x820D959C;
		  /* 820D959Ch */ case    4:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820D959Ch case    4:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820D959Ch case    4:*/		return 0x820D95A0;
		  /* 820D95A0h */ case    5:  		/* bc 4, CR0_EQ, 124 */
		/* 820D95A0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x820D961C;  }
		/* 820D95A0h case    5:*/		return 0x820D95A4;
		  /* 820D95A4h */ case    6:  		/* li R9, 0 */
		/* 820D95A4h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820D95A4h case    6:*/		return 0x820D95A8;
		  /* 820D95A8h */ case    7:  		/* cmplwi CR6, R26, 0 */
		/* 820D95A8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 820D95A8h case    7:*/		return 0x820D95AC;
		  /* 820D95ACh */ case    8:  		/* bc 12, CR6_EQ, 104 */
		/* 820D95ACh case    8:*/		if ( regs.CR[6].eq ) { return 0x820D9614;  }
		/* 820D95ACh case    8:*/		return 0x820D95B0;
		  /* 820D95B0h */ case    9:  		/* lwz R8, <#[R28 + 20]> */
		/* 820D95B0h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000014) );
		/* 820D95B0h case    9:*/		return 0x820D95B4;
		  /* 820D95B4h */ case   10:  		/* mr R10, R25 */
		/* 820D95B4h case   10:*/		regs.R10 = regs.R25;
		/* 820D95B4h case   10:*/		return 0x820D95B8;
		  /* 820D95B8h */ case   11:  		/* lwz R11, <#[R10]> */
		/* 820D95B8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820D95B8h case   11:*/		return 0x820D95BC;
		  /* 820D95BCh */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D95BCh case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D95BCh case   12:*/		return 0x820D95C0;
		  /* 820D95C0h */ case   13:  		/* lwzx R11, <#[R11 + R8]> */
		/* 820D95C0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 820D95C0h case   13:*/		return 0x820D95C4;
		  /* 820D95C4h */ case   14:  		/* lwz R7, <#[R11]> */
		/* 820D95C4h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 820D95C4h case   14:*/		return 0x820D95C8;
		  /* 820D95C8h */ case   15:  		/* rlwinm. R7, R7, 0, 6, 6 */
		/* 820D95C8h case   15:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R7,regs.R7);
		/* 820D95C8h case   15:*/		return 0x820D95CC;
		  /* 820D95CCh */ case   16:  		/* bc 4, CR0_EQ, 56 */
		/* 820D95CCh case   16:*/		if ( !regs.CR[0].eq ) { return 0x820D9604;  }
		/* 820D95CCh case   16:*/		return 0x820D95D0;
		  /* 820D95D0h */ case   17:  		/* lwz R7, <#[R11 + 4]> */
		/* 820D95D0h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 820D95D0h case   17:*/		return 0x820D95D4;
		  /* 820D95D4h */ case   18:  		/* lwz R6, <#[R28 + 16]> */
		/* 820D95D4h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000010) );
		/* 820D95D4h case   18:*/		return 0x820D95D8;
		  /* 820D95D8h */ case   19:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820D95D8h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820D95D8h case   19:*/		return 0x820D95DC;
		  /* 820D95DCh */ case   20:  		/* lwzx R7, <#[R7 + R6]> */
		/* 820D95DCh case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 820D95DCh case   20:*/		return 0x820D95E0;
		  /* 820D95E0h */ case   21:  		/* lwz R7, <#[R7 + 4]> */
		/* 820D95E0h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 820D95E0h case   21:*/		return 0x820D95E4;
		  /* 820D95E4h */ case   22:  		/* rlwinm. R7, R7, 0, 31, 31 */
		/* 820D95E4h case   22:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R7,regs.R7);
		/* 820D95E4h case   22:*/		return 0x820D95E8;
		  /* 820D95E8h */ case   23:  		/* bc 12, CR0_EQ, 44 */
		/* 820D95E8h case   23:*/		if ( regs.CR[0].eq ) { return 0x820D9614;  }
		/* 820D95E8h case   23:*/		return 0x820D95EC;
		  /* 820D95ECh */ case   24:  		/* lwz R7, <#[R11 + 72]> */
		/* 820D95ECh case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000048) );
		/* 820D95ECh case   24:*/		return 0x820D95F0;
		  /* 820D95F0h */ case   25:  		/* cmpwi CR6, R7, -1 */
		/* 820D95F0h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R7,0xFFFFFFFF);
		/* 820D95F0h case   25:*/		return 0x820D95F4;
		  /* 820D95F4h */ case   26:  		/* bc 12, CR6_EQ, 32 */
		/* 820D95F4h case   26:*/		if ( regs.CR[6].eq ) { return 0x820D9614;  }
		/* 820D95F4h case   26:*/		return 0x820D95F8;
		  /* 820D95F8h */ case   27:  		/* lwz R11, <#[R11 + 84]> */
		/* 820D95F8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 820D95F8h case   27:*/		return 0x820D95FC;
		  /* 820D95FCh */ case   28:  		/* cmpwi CR6, R11, -1 */
		/* 820D95FCh case   28:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820D95FCh case   28:*/		return 0x820D9600;
		  /* 820D9600h */ case   29:  		/* bc 4, CR6_EQ, 20 */
		/* 820D9600h case   29:*/		if ( !regs.CR[6].eq ) { return 0x820D9614;  }
		/* 820D9600h case   29:*/		return 0x820D9604;
	}
	return 0x820D9604;
} // Block from 820D958Ch-820D9604h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820D9604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9604);
		  /* 820D9604h */ case    0:  		/* addi R9, R9, 1 */
		/* 820D9604h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820D9604h case    0:*/		return 0x820D9608;
		  /* 820D9608h */ case    1:  		/* addi R10, R10, 4 */
		/* 820D9608h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820D9608h case    1:*/		return 0x820D960C;
		  /* 820D960Ch */ case    2:  		/* cmplw CR6, R9, R26 */
		/* 820D960Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 820D960Ch case    2:*/		return 0x820D9610;
		  /* 820D9610h */ case    3:  		/* bc 12, CR6_LT, -88 */
		/* 820D9610h case    3:*/		if ( regs.CR[6].lt ) { return 0x820D95B8;  }
		/* 820D9610h case    3:*/		return 0x820D9614;
	}
	return 0x820D9614;
} // Block from 820D9604h-820D9614h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9614);
		  /* 820D9614h */ case    0:  		/* cmplw CR6, R9, R26 */
		/* 820D9614h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 820D9614h case    0:*/		return 0x820D9618;
		  /* 820D9618h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 820D9618h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820D9620;  }
		/* 820D9618h case    1:*/		return 0x820D961C;
	}
	return 0x820D961C;
} // Block from 820D9614h-820D961Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D961Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D961C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D961C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D961C);
		  /* 820D961Ch */ case    0:  		/* oris R24, R24, 32 */
		/* 820D961Ch case    0:*/		cpu::op::oris<0>(regs,&regs.R24,regs.R24,0x20);
		/* 820D961Ch case    0:*/		return 0x820D9620;
	}
	return 0x820D9620;
} // Block from 820D961Ch-820D9620h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D9620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9620);
		  /* 820D9620h */ case    0:  		/* lwz R11, <#[R28 + 204]> */
		/* 820D9620h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x000000CC) );
		/* 820D9620h case    0:*/		return 0x820D9624;
		  /* 820D9624h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 820D9624h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 820D9624h case    1:*/		return 0x820D9628;
		  /* 820D9628h */ case    2:  		/* bc 12, CR0_EQ, 76 */
		/* 820D9628h case    2:*/		if ( regs.CR[0].eq ) { return 0x820D9674;  }
		/* 820D9628h case    2:*/		return 0x820D962C;
		  /* 820D962Ch */ case    3:  		/* lwz R11, <#[R28 + 296]> */
		/* 820D962Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000128) );
		/* 820D962Ch case    3:*/		return 0x820D9630;
		  /* 820D9630h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820D9630h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D9630h case    4:*/		return 0x820D9634;
		  /* 820D9634h */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 820D9634h case    5:*/		if ( regs.CR[6].eq ) { return 0x820D9674;  }
		/* 820D9634h case    5:*/		return 0x820D9638;
		  /* 820D9638h */ case    6:  		/* li R11, 0 */
		/* 820D9638h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820D9638h case    6:*/		return 0x820D963C;
		  /* 820D963Ch */ case    7:  		/* cmplwi CR6, R26, 0 */
		/* 820D963Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 820D963Ch case    7:*/		return 0x820D9640;
		  /* 820D9640h */ case    8:  		/* bc 12, CR6_EQ, 52 */
		/* 820D9640h case    8:*/		if ( regs.CR[6].eq ) { return 0x820D9674;  }
		/* 820D9640h case    8:*/		return 0x820D9644;
		  /* 820D9644h */ case    9:  		/* mtspr CTR, R26 */
		/* 820D9644h case    9:*/		regs.CTR = regs.R26;
		/* 820D9644h case    9:*/		return 0x820D9648;
		  /* 820D9648h */ case   10:  		/* addi R10, R25, -4 */
		/* 820D9648h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R25,0xFFFFFFFC);
		/* 820D9648h case   10:*/		return 0x820D964C;
		  /* 820D964Ch */ case   11:  		/* lwz R8, <#[R28 + 300]> */
		/* 820D964Ch case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x0000012C) );
		/* 820D964Ch case   11:*/		return 0x820D9650;
		  /* 820D9650h */ case   12:  		/* lwzu R9, <#[R10 + 4]> */
		/* 820D9650h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820D9650h case   12:*/		return 0x820D9654;
		  /* 820D9654h */ case   13:  		/* mulli R8, R8, 6 */
		/* 820D9654h case   13:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R8,0x6);
		/* 820D9654h case   13:*/		return 0x820D9658;
		  /* 820D9658h */ case   14:  		/* lwz R7, <#[R28 + 296]> */
		/* 820D9658h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x00000128) );
		/* 820D9658h case   14:*/		return 0x820D965C;
		  /* 820D965Ch */ case   15:  		/* add R8, R8, R11 */
		/* 820D965Ch case   15:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 820D965Ch case   15:*/		return 0x820D9660;
		  /* 820D9660h */ case   16:  		/* addi R11, R11, 1 */
		/* 820D9660h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820D9660h case   16:*/		return 0x820D9664;
		  /* 820D9664h */ case   17:  		/* addi R8, R8, -4 */
		/* 820D9664h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFC);
		/* 820D9664h case   17:*/		return 0x820D9668;
		  /* 820D9668h */ case   18:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820D9668h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820D9668h case   18:*/		return 0x820D966C;
		  /* 820D966Ch */ case   19:  		/* stwx R9, <#[R8 + R7]> */
		/* 820D966Ch case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 820D966Ch case   19:*/		return 0x820D9670;
		  /* 820D9670h */ case   20:  		/* bc 16, CR0_LT, -36 */
		/* 820D9670h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820D964C;  }
		/* 820D9670h case   20:*/		return 0x820D9674;
	}
	return 0x820D9674;
} // Block from 820D9620h-820D9674h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820D9674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9674);
		  /* 820D9674h */ case    0:  		/* stw R24, <#[R23]> */
		/* 820D9674h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R23 + 0x00000000) );
		/* 820D9674h case    0:*/		return 0x820D9678;
		  /* 820D9678h */ case    1:  		/* li R3, 0 */
		/* 820D9678h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D9678h case    1:*/		return 0x820D967C;
		  /* 820D967Ch */ case    2:  		/* addi R1, R1, 160 */
		/* 820D967Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820D967Ch case    2:*/		return 0x820D9680;
		  /* 820D9680h */ case    3:  		/* b -295916 */
		/* 820D9680h case    3:*/		return 0x82091294;
		/* 820D9680h case    3:*/		return 0x820D9684;
		  /* 820D9684h */ case    4:  		/* nop */
		/* 820D9684h case    4:*/		cpu::op::nop();
		/* 820D9684h case    4:*/		return 0x820D9688;
	}
	return 0x820D9688;
} // Block from 820D9674h-820D9688h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D9688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9688);
		  /* 820D9688h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D9688h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9688h case    0:*/		return 0x820D968C;
		  /* 820D968Ch */ case    1:  		/* lis R10, -32254 */
		/* 820D968Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820D968Ch case    1:*/		return 0x820D9690;
		  /* 820D9690h */ case    2:  		/* lis R9, -32254 */
		/* 820D9690h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820D9690h case    2:*/		return 0x820D9694;
		  /* 820D9694h */ case    3:  		/* lis R8, -32254 */
		/* 820D9694h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820D9694h case    3:*/		return 0x820D9698;
		  /* 820D9698h */ case    4:  		/* addi R6, R10, -31680 */
		/* 820D9698h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF8440);
		/* 820D9698h case    4:*/		return 0x820D969C;
		  /* 820D969Ch */ case    5:  		/* addi R5, R9, -31700 */
		/* 820D969Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0xFFFF842C);
		/* 820D969Ch case    5:*/		return 0x820D96A0;
		  /* 820D96A0h */ case    6:  		/* lwz R11, <#[R11 + 524]> */
		/* 820D96A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000020C) );
		/* 820D96A0h case    6:*/		return 0x820D96A4;
		  /* 820D96A4h */ case    7:  		/* addi R4, R8, -31716 */
		/* 820D96A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R8,0xFFFF841C);
		/* 820D96A4h case    7:*/		return 0x820D96A8;
		  /* 820D96A8h */ case    8:  		/* mtspr CTR, R11 */
		/* 820D96A8h case    8:*/		regs.CTR = regs.R11;
		/* 820D96A8h case    8:*/		return 0x820D96AC;
		  /* 820D96ACh */ case    9:  		/* bcctr 20, CR0_LT */
		/* 820D96ACh case    9:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D96ACh case    9:*/		return 0x820D96B0;
	}
	return 0x820D96B0;
} // Block from 820D9688h-820D96B0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D96B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D96B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D96B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D96B0);
		  /* 820D96B0h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D96B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D96B0h case    0:*/		return 0x820D96B4;
		  /* 820D96B4h */ case    1:  		/* lis R10, -32254 */
		/* 820D96B4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820D96B4h case    1:*/		return 0x820D96B8;
		  /* 820D96B8h */ case    2:  		/* lis R9, -32254 */
		/* 820D96B8h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820D96B8h case    2:*/		return 0x820D96BC;
		  /* 820D96BCh */ case    3:  		/* lis R8, -32254 */
		/* 820D96BCh case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820D96BCh case    3:*/		return 0x820D96C0;
		  /* 820D96C0h */ case    4:  		/* addi R6, R10, -31620 */
		/* 820D96C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF847C);
		/* 820D96C0h case    4:*/		return 0x820D96C4;
		  /* 820D96C4h */ case    5:  		/* addi R5, R9, -31644 */
		/* 820D96C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0xFFFF8464);
		/* 820D96C4h case    5:*/		return 0x820D96C8;
		  /* 820D96C8h */ case    6:  		/* lwz R11, <#[R11 + 532]> */
		/* 820D96C8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000214) );
		/* 820D96C8h case    6:*/		return 0x820D96CC;
		  /* 820D96CCh */ case    7:  		/* addi R4, R8, -31652 */
		/* 820D96CCh case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R8,0xFFFF845C);
		/* 820D96CCh case    7:*/		return 0x820D96D0;
		  /* 820D96D0h */ case    8:  		/* mtspr CTR, R11 */
		/* 820D96D0h case    8:*/		regs.CTR = regs.R11;
		/* 820D96D0h case    8:*/		return 0x820D96D4;
		  /* 820D96D4h */ case    9:  		/* bcctr 20, CR0_LT */
		/* 820D96D4h case    9:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D96D4h case    9:*/		return 0x820D96D8;
	}
	return 0x820D96D8;
} // Block from 820D96B0h-820D96D8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D96D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D96D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D96D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D96D8);
		  /* 820D96D8h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D96D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D96D8h case    0:*/		return 0x820D96DC;
		  /* 820D96DCh */ case    1:  		/* lis R10, -32254 */
		/* 820D96DCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820D96DCh case    1:*/		return 0x820D96E0;
		  /* 820D96E0h */ case    2:  		/* lis R9, -32254 */
		/* 820D96E0h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820D96E0h case    2:*/		return 0x820D96E4;
		  /* 820D96E4h */ case    3:  		/* lis R8, -32254 */
		/* 820D96E4h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820D96E4h case    3:*/		return 0x820D96E8;
		  /* 820D96E8h */ case    4:  		/* addi R6, R10, -31620 */
		/* 820D96E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF847C);
		/* 820D96E8h case    4:*/		return 0x820D96EC;
		  /* 820D96ECh */ case    5:  		/* addi R5, R9, -31644 */
		/* 820D96ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0xFFFF8464);
		/* 820D96ECh case    5:*/		return 0x820D96F0;
		  /* 820D96F0h */ case    6:  		/* lwz R11, <#[R11 + 536]> */
		/* 820D96F0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000218) );
		/* 820D96F0h case    6:*/		return 0x820D96F4;
		  /* 820D96F4h */ case    7:  		/* addi R4, R8, -31652 */
		/* 820D96F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R8,0xFFFF845C);
		/* 820D96F4h case    7:*/		return 0x820D96F8;
		  /* 820D96F8h */ case    8:  		/* mtspr CTR, R11 */
		/* 820D96F8h case    8:*/		regs.CTR = regs.R11;
		/* 820D96F8h case    8:*/		return 0x820D96FC;
		  /* 820D96FCh */ case    9:  		/* bcctr 20, CR0_LT */
		/* 820D96FCh case    9:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D96FCh case    9:*/		return 0x820D9700;
	}
	return 0x820D9700;
} // Block from 820D96D8h-820D9700h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D9700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9700);
		  /* 820D9700h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D9700h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9700h case    0:*/		return 0x820D9704;
		  /* 820D9704h */ case    1:  		/* lis R10, -32254 */
		/* 820D9704h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820D9704h case    1:*/		return 0x820D9708;
		  /* 820D9708h */ case    2:  		/* lis R9, -32254 */
		/* 820D9708h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820D9708h case    2:*/		return 0x820D970C;
		  /* 820D970Ch */ case    3:  		/* lis R8, -32254 */
		/* 820D970Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820D970Ch case    3:*/		return 0x820D9710;
		  /* 820D9710h */ case    4:  		/* addi R6, R10, -31556 */
		/* 820D9710h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF84BC);
		/* 820D9710h case    4:*/		return 0x820D9714;
		  /* 820D9714h */ case    5:  		/* addi R5, R9, -31576 */
		/* 820D9714h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0xFFFF84A8);
		/* 820D9714h case    5:*/		return 0x820D9718;
		  /* 820D9718h */ case    6:  		/* lwz R11, <#[R11 + 532]> */
		/* 820D9718h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000214) );
		/* 820D9718h case    6:*/		return 0x820D971C;
		  /* 820D971Ch */ case    7:  		/* addi R4, R8, -31592 */
		/* 820D971Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R8,0xFFFF8498);
		/* 820D971Ch case    7:*/		return 0x820D9720;
		  /* 820D9720h */ case    8:  		/* mtspr CTR, R11 */
		/* 820D9720h case    8:*/		regs.CTR = regs.R11;
		/* 820D9720h case    8:*/		return 0x820D9724;
		  /* 820D9724h */ case    9:  		/* bcctr 20, CR0_LT */
		/* 820D9724h case    9:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9724h case    9:*/		return 0x820D9728;
	}
	return 0x820D9728;
} // Block from 820D9700h-820D9728h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D9728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9728);
		  /* 820D9728h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D9728h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9728h case    0:*/		return 0x820D972C;
		  /* 820D972Ch */ case    1:  		/* lis R10, -32254 */
		/* 820D972Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820D972Ch case    1:*/		return 0x820D9730;
		  /* 820D9730h */ case    2:  		/* lis R9, -32254 */
		/* 820D9730h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820D9730h case    2:*/		return 0x820D9734;
		  /* 820D9734h */ case    3:  		/* lis R8, -32254 */
		/* 820D9734h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820D9734h case    3:*/		return 0x820D9738;
		  /* 820D9738h */ case    4:  		/* addi R6, R10, -31556 */
		/* 820D9738h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF84BC);
		/* 820D9738h case    4:*/		return 0x820D973C;
		  /* 820D973Ch */ case    5:  		/* addi R5, R9, -31576 */
		/* 820D973Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0xFFFF84A8);
		/* 820D973Ch case    5:*/		return 0x820D9740;
		  /* 820D9740h */ case    6:  		/* lwz R11, <#[R11 + 536]> */
		/* 820D9740h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000218) );
		/* 820D9740h case    6:*/		return 0x820D9744;
		  /* 820D9744h */ case    7:  		/* addi R4, R8, -31592 */
		/* 820D9744h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R8,0xFFFF8498);
		/* 820D9744h case    7:*/		return 0x820D9748;
		  /* 820D9748h */ case    8:  		/* mtspr CTR, R11 */
		/* 820D9748h case    8:*/		regs.CTR = regs.R11;
		/* 820D9748h case    8:*/		return 0x820D974C;
		  /* 820D974Ch */ case    9:  		/* bcctr 20, CR0_LT */
		/* 820D974Ch case    9:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D974Ch case    9:*/		return 0x820D9750;
	}
	return 0x820D9750;
} // Block from 820D9728h-820D9750h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D9750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9750);
		  /* 820D9750h */ case    0:  		/* mfspr R12, LR */
		/* 820D9750h case    0:*/		regs.R12 = regs.LR;
		/* 820D9750h case    0:*/		return 0x820D9754;
		  /* 820D9754h */ case    1:  		/* bl -296184 */
		/* 820D9754h case    1:*/		regs.LR = 0x820D9758; return 0x8209125C;
		/* 820D9754h case    1:*/		return 0x820D9758;
		  /* 820D9758h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820D9758h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820D9758h case    2:*/		return 0x820D975C;
		  /* 820D975Ch */ case    3:  		/* lwz R11, <#[R3 + 52]> */
		/* 820D975Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000034) );
		/* 820D975Ch case    3:*/		return 0x820D9760;
		  /* 820D9760h */ case    4:  		/* mr R31, R3 */
		/* 820D9760h case    4:*/		regs.R31 = regs.R3;
		/* 820D9760h case    4:*/		return 0x820D9764;
		  /* 820D9764h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820D9764h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D9764h case    5:*/		return 0x820D9768;
		  /* 820D9768h */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 820D9768h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820D9778;  }
		/* 820D9768h case    6:*/		return 0x820D976C;
		  /* 820D976Ch */ case    7:  		/* lis R3, -32768 */
		/* 820D976Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820D976Ch case    7:*/		return 0x820D9770;
		  /* 820D9770h */ case    8:  		/* ori R3, R3, 16385 */
		/* 820D9770h case    8:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4001);
		/* 820D9770h case    8:*/		return 0x820D9774;
		  /* 820D9774h */ case    9:  		/* b 340 */
		/* 820D9774h case    9:*/		return 0x820D98C8;
		/* 820D9774h case    9:*/		return 0x820D9778;
	}
	return 0x820D9778;
} // Block from 820D9750h-820D9778h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D9778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9778);
		  /* 820D9778h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 820D9778h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820D9778h case    0:*/		return 0x820D977C;
		  /* 820D977Ch */ case    1:  		/* lwz R10, <#[R11 + 12]> */
		/* 820D977Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D977Ch case    1:*/		return 0x820D9780;
		  /* 820D9780h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 820D9780h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820D9780h case    2:*/		return 0x820D9784;
		  /* 820D9784h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 820D9784h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820D9790;  }
		/* 820D9784h case    3:*/		return 0x820D9788;
		  /* 820D9788h */ case    4:  		/* li R3, 0 */
		/* 820D9788h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D9788h case    4:*/		return 0x820D978C;
		  /* 820D978Ch */ case    5:  		/* b 316 */
		/* 820D978Ch case    5:*/		return 0x820D98C8;
		/* 820D978Ch case    5:*/		return 0x820D9790;
	}
	return 0x820D9790;
} // Block from 820D9778h-820D9790h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D9790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9790);
		  /* 820D9790h */ case    0:  		/* lwz R11, <#[R11 + 16]> */
		/* 820D9790h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820D9790h case    0:*/		return 0x820D9794;
		  /* 820D9794h */ case    1:  		/* li R29, 0 */
		/* 820D9794h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820D9794h case    1:*/		return 0x820D9798;
		  /* 820D9798h */ case    2:  		/* lwz R10, <#[R31 + 20]> */
		/* 820D9798h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820D9798h case    2:*/		return 0x820D979C;
		  /* 820D979Ch */ case    3:  		/* lwz R11, <#[R11]> */
		/* 820D979Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820D979Ch case    3:*/		return 0x820D97A0;
		  /* 820D97A0h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D97A0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D97A0h case    4:*/		return 0x820D97A4;
		  /* 820D97A4h */ case    5:  		/* lwzx R30, <#[R11 + R10]> */
		/* 820D97A4h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820D97A4h case    5:*/		return 0x820D97A8;
		  /* 820D97A8h */ case    6:  		/* lwz R11, <#[R31 + 260]> */
		/* 820D97A8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820D97A8h case    6:*/		return 0x820D97AC;
		  /* 820D97ACh */ case    7:  		/* lwz R10, <#[R31 + 20]> */
		/* 820D97ACh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820D97ACh case    7:*/		return 0x820D97B0;
		  /* 820D97B0h */ case    8:  		/* lwz R9, <#[R30 + 4]> */
		/* 820D97B0h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 820D97B0h case    8:*/		return 0x820D97B4;
		  /* 820D97B4h */ case    9:  		/* lwz R8, <#[R11 + 12]> */
		/* 820D97B4h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D97B4h case    9:*/		return 0x820D97B8;
		  /* 820D97B8h */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 820D97B8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820D97B8h case   10:*/		return 0x820D97BC;
		  /* 820D97BCh */ case   11:  		/* mullw R8, R8, R29 */
		/* 820D97BCh case   11:*/		cpu::op::mullw<0>(regs,&regs.R8,regs.R8,regs.R29);
		/* 820D97BCh case   11:*/		return 0x820D97C0;
		  /* 820D97C0h */ case   12:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820D97C0h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820D97C0h case   12:*/		return 0x820D97C4;
		  /* 820D97C4h */ case   13:  		/* lwzx R11, <#[R8 + R11]> */
		/* 820D97C4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820D97C4h case   13:*/		return 0x820D97C8;
		  /* 820D97C8h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D97C8h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D97C8h case   14:*/		return 0x820D97CC;
		  /* 820D97CCh */ case   15:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820D97CCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820D97CCh case   15:*/		return 0x820D97D0;
		  /* 820D97D0h */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 820D97D0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820D97D0h case   16:*/		return 0x820D97D4;
		  /* 820D97D4h */ case   17:  		/* cmplw CR6, R10, R9 */
		/* 820D97D4h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820D97D4h case   17:*/		return 0x820D97D8;
		  /* 820D97D8h */ case   18:  		/* bc 4, CR6_EQ, 52 */
		/* 820D97D8h case   18:*/		if ( !regs.CR[6].eq ) { return 0x820D980C;  }
		/* 820D97D8h case   18:*/		return 0x820D97DC;
		  /* 820D97DCh */ case   19:  		/* lwz R10, <#[R11 + 8]> */
		/* 820D97DCh case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 820D97DCh case   19:*/		return 0x820D97E0;
		  /* 820D97E0h */ case   20:  		/* lwz R9, <#[R30 + 8]> */
		/* 820D97E0h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 820D97E0h case   20:*/		return 0x820D97E4;
		  /* 820D97E4h */ case   21:  		/* cmplw CR6, R10, R9 */
		/* 820D97E4h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820D97E4h case   21:*/		return 0x820D97E8;
		  /* 820D97E8h */ case   22:  		/* bc 4, CR6_EQ, 36 */
		/* 820D97E8h case   22:*/		if ( !regs.CR[6].eq ) { return 0x820D980C;  }
		/* 820D97E8h case   22:*/		return 0x820D97EC;
		  /* 820D97ECh */ case   23:  		/* lwz R10, <#[R11 + 12]> */
		/* 820D97ECh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D97ECh case   23:*/		return 0x820D97F0;
		  /* 820D97F0h */ case   24:  		/* lwz R9, <#[R30 + 12]> */
		/* 820D97F0h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000000C) );
		/* 820D97F0h case   24:*/		return 0x820D97F4;
		  /* 820D97F4h */ case   25:  		/* cmplw CR6, R10, R9 */
		/* 820D97F4h case   25:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820D97F4h case   25:*/		return 0x820D97F8;
		  /* 820D97F8h */ case   26:  		/* bc 4, CR6_EQ, 20 */
		/* 820D97F8h case   26:*/		if ( !regs.CR[6].eq ) { return 0x820D980C;  }
		/* 820D97F8h case   26:*/		return 0x820D97FC;
		  /* 820D97FCh */ case   27:  		/* lwz R10, <#[R11 + 16]> */
		/* 820D97FCh case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 820D97FCh case   27:*/		return 0x820D9800;
		  /* 820D9800h */ case   28:  		/* lwz R9, <#[R30 + 16]> */
		/* 820D9800h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 820D9800h case   28:*/		return 0x820D9804;
		  /* 820D9804h */ case   29:  		/* cmplw CR6, R10, R9 */
		/* 820D9804h case   29:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820D9804h case   29:*/		return 0x820D9808;
		  /* 820D9808h */ case   30:  		/* bc 12, CR6_EQ, 172 */
		/* 820D9808h case   30:*/		if ( regs.CR[6].eq ) { return 0x820D98B4;  }
		/* 820D9808h case   30:*/		return 0x820D980C;
	}
	return 0x820D980C;
} // Block from 820D9790h-820D980Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 820D980Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D980C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D980C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D980C);
		  /* 820D980Ch */ case    0:  		/* lwz R10, <#[R11 + 20]> */
		/* 820D980Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 820D980Ch case    0:*/		return 0x820D9810;
		  /* 820D9810h */ case    1:  		/* lwz R8, <#[R31 + 20]> */
		/* 820D9810h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 820D9810h case    1:*/		return 0x820D9814;
		  /* 820D9814h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820D9814h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820D9814h case    2:*/		return 0x820D9818;
		  /* 820D9818h */ case    3:  		/* lwzx R10, <#[R10 + R8]> */
		/* 820D9818h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820D9818h case    3:*/		return 0x820D981C;
		  /* 820D981Ch */ case    4:  		/* lwz R10, <#[R10 + 12]> */
		/* 820D981Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 820D981Ch case    4:*/		return 0x820D9820;
		  /* 820D9820h */ case    5:  		/* rlwinm R10, R10, 0, 21, 31 */
		/* 820D9820h case    5:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R10,regs.R10);
		/* 820D9820h case    5:*/		return 0x820D9824;
		  /* 820D9824h */ case    6:  		/* oris R9, R10, 45056 */
		/* 820D9824h case    6:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R10,0xB000);
		/* 820D9824h case    6:*/		return 0x820D9828;
		  /* 820D9828h */ case    7:  		/* ori R9, R9, 4096 */
		/* 820D9828h case    7:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1000);
		/* 820D9828h case    7:*/		return 0x820D982C;
		  /* 820D982Ch */ case    8:  		/* stw R9, <#[R1 + 80]> */
		/* 820D982Ch case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 820D982Ch case    8:*/		return 0x820D9830;
		  /* 820D9830h */ case    9:  		/* lwz R10, <#[R11 + 20]> */
		/* 820D9830h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 820D9830h case    9:*/		return 0x820D9834;
		  /* 820D9834h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820D9834h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820D9834h case   10:*/		return 0x820D9838;
		  /* 820D9838h */ case   11:  		/* lwzx R10, <#[R10 + R8]> */
		/* 820D9838h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820D9838h case   11:*/		return 0x820D983C;
		  /* 820D983Ch */ case   12:  		/* lwz R10, <#[R10 + 16]> */
		/* 820D983Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 820D983Ch case   12:*/		return 0x820D9840;
		  /* 820D9840h */ case   13:  		/* cmplwi CR6, R10, 1 */
		/* 820D9840h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 820D9840h case   13:*/		return 0x820D9844;
		  /* 820D9844h */ case   14:  		/* bc 12, CR6_LT, 44 */
		/* 820D9844h case   14:*/		if ( regs.CR[6].lt ) { return 0x820D9870;  }
		/* 820D9844h case   14:*/		return 0x820D9848;
		  /* 820D9848h */ case   15:  		/* bc 12, CR6_EQ, 32 */
		/* 820D9848h case   15:*/		if ( regs.CR[6].eq ) { return 0x820D9868;  }
		/* 820D9848h case   15:*/		return 0x820D984C;
		  /* 820D984Ch */ case   16:  		/* cmplwi CR6, R10, 3 */
		/* 820D984Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 820D984Ch case   16:*/		return 0x820D9850;
		  /* 820D9850h */ case   17:  		/* bc 12, CR6_LT, 16 */
		/* 820D9850h case   17:*/		if ( regs.CR[6].lt ) { return 0x820D9860;  }
		/* 820D9850h case   17:*/		return 0x820D9854;
		  /* 820D9854h */ case   18:  		/* bc 4, CR6_EQ, 28 */
		/* 820D9854h case   18:*/		if ( !regs.CR[6].eq ) { return 0x820D9870;  }
		/* 820D9854h case   18:*/		return 0x820D9858;
		  /* 820D9858h */ case   19:  		/* oris R9, R9, 255 */
		/* 820D9858h case   19:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0xFF);
		/* 820D9858h case   19:*/		return 0x820D985C;
		  /* 820D985Ch */ case   20:  		/* b 16 */
		/* 820D985Ch case   20:*/		return 0x820D986C;
		/* 820D985Ch case   20:*/		return 0x820D9860;
	}
	return 0x820D9860;
} // Block from 820D980Ch-820D9860h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820D9860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9860);
		  /* 820D9860h */ case    0:  		/* oris R9, R9, 170 */
		/* 820D9860h case    0:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0xAA);
		/* 820D9860h case    0:*/		return 0x820D9864;
		  /* 820D9864h */ case    1:  		/* b 8 */
		/* 820D9864h case    1:*/		return 0x820D986C;
		/* 820D9864h case    1:*/		return 0x820D9868;
	}
	return 0x820D9868;
} // Block from 820D9860h-820D9868h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D9868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9868);
		  /* 820D9868h */ case    0:  		/* oris R9, R9, 85 */
		/* 820D9868h case    0:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x55);
		/* 820D9868h case    0:*/		return 0x820D986C;
	}
	return 0x820D986C;
} // Block from 820D9868h-820D986Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D986Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D986C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D986C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D986C);
		  /* 820D986Ch */ case    0:  		/* stw R9, <#[R1 + 80]> */
		/* 820D986Ch case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 820D986Ch case    0:*/		return 0x820D9870;
	}
	return 0x820D9870;
} // Block from 820D986Ch-820D9870h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D9870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9870);
		  /* 820D9870h */ case    0:  		/* lwz R11, <#[R11 + 24]> */
		/* 820D9870h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820D9870h case    0:*/		return 0x820D9874;
		  /* 820D9874h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820D9874h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820D9874h case    1:*/		return 0x820D9878;
		  /* 820D9878h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 820D9878h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820D9884;  }
		/* 820D9878h case    2:*/		return 0x820D987C;
		  /* 820D987Ch */ case    3:  		/* oris R11, R9, 3328 */
		/* 820D987Ch case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R9,0xD00);
		/* 820D987Ch case    3:*/		return 0x820D9880;
		  /* 820D9880h */ case    4:  		/* stw R11, <#[R1 + 80]> */
		/* 820D9880h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820D9880h case    4:*/		return 0x820D9884;
	}
	return 0x820D9884;
} // Block from 820D9870h-820D9884h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D9884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9884);
		  /* 820D9884h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D9884h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9884h case    0:*/		return 0x820D9888;
		  /* 820D9888h */ case    1:  		/* addi R6, R1, 80 */
		/* 820D9888h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 820D9888h case    1:*/		return 0x820D988C;
		  /* 820D988Ch */ case    2:  		/* lwz R10, <#[R31 + 260]> */
		/* 820D988Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820D988Ch case    2:*/		return 0x820D9890;
		  /* 820D9890h */ case    3:  		/* mr R3, R31 */
		/* 820D9890h case    3:*/		regs.R3 = regs.R31;
		/* 820D9890h case    3:*/		return 0x820D9894;
		  /* 820D9894h */ case    4:  		/* lwz R11, <#[R11 + 572]> */
		/* 820D9894h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000023C) );
		/* 820D9894h case    4:*/		return 0x820D9898;
		  /* 820D9898h */ case    5:  		/* lwz R10, <#[R10 + 12]> */
		/* 820D9898h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 820D9898h case    5:*/		return 0x820D989C;
		  /* 820D989Ch */ case    6:  		/* mr R5, R10 */
		/* 820D989Ch case    6:*/		regs.R5 = regs.R10;
		/* 820D989Ch case    6:*/		return 0x820D98A0;
		  /* 820D98A0h */ case    7:  		/* mullw R4, R10, R29 */
		/* 820D98A0h case    7:*/		cpu::op::mullw<0>(regs,&regs.R4,regs.R10,regs.R29);
		/* 820D98A0h case    7:*/		return 0x820D98A4;
		  /* 820D98A4h */ case    8:  		/* mtspr CTR, R11 */
		/* 820D98A4h case    8:*/		regs.CTR = regs.R11;
		/* 820D98A4h case    8:*/		return 0x820D98A8;
		  /* 820D98A8h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 820D98A8h case    9:*/		if ( 1 ) { regs.LR = 0x820D98AC; return (uint32)regs.CTR; }
		/* 820D98A8h case    9:*/		return 0x820D98AC;
		  /* 820D98ACh */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820D98ACh case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D98ACh case   10:*/		return 0x820D98B0;
		  /* 820D98B0h */ case   11:  		/* bc 12, CR0_LT, 24 */
		/* 820D98B0h case   11:*/		if ( regs.CR[0].lt ) { return 0x820D98C8;  }
		/* 820D98B0h case   11:*/		return 0x820D98B4;
	}
	return 0x820D98B4;
} // Block from 820D9884h-820D98B4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820D98B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D98B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D98B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D98B4);
		  /* 820D98B4h */ case    0:  		/* addi R29, R29, 1 */
		/* 820D98B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820D98B4h case    0:*/		return 0x820D98B8;
		  /* 820D98B8h */ case    1:  		/* cmplwi CR6, R29, 2 */
		/* 820D98B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000002);
		/* 820D98B8h case    1:*/		return 0x820D98BC;
		  /* 820D98BCh */ case    2:  		/* bc 12, CR6_LT, -276 */
		/* 820D98BCh case    2:*/		if ( regs.CR[6].lt ) { return 0x820D97A8;  }
		/* 820D98BCh case    2:*/		return 0x820D98C0;
		  /* 820D98C0h */ case    3:  		/* mr R3, R31 */
		/* 820D98C0h case    3:*/		regs.R3 = regs.R31;
		/* 820D98C0h case    3:*/		return 0x820D98C4;
		  /* 820D98C4h */ case    4:  		/* bl 123036 */
		/* 820D98C4h case    4:*/		regs.LR = 0x820D98C8; return 0x820F7960;
		/* 820D98C4h case    4:*/		return 0x820D98C8;
	}
	return 0x820D98C8;
} // Block from 820D98B4h-820D98C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D98C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D98C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D98C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D98C8);
		  /* 820D98C8h */ case    0:  		/* addi R1, R1, 128 */
		/* 820D98C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820D98C8h case    0:*/		return 0x820D98CC;
		  /* 820D98CCh */ case    1:  		/* b -296480 */
		/* 820D98CCh case    1:*/		return 0x820912AC;
		/* 820D98CCh case    1:*/		return 0x820D98D0;
	}
	return 0x820D98D0;
} // Block from 820D98C8h-820D98D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D98D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D98D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D98D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D98D0);
		  /* 820D98D0h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D98D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D98D0h case    0:*/		return 0x820D98D4;
		  /* 820D98D4h */ case    1:  		/* li R4, 0 */
		/* 820D98D4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D98D4h case    1:*/		return 0x820D98D8;
		  /* 820D98D8h */ case    2:  		/* lwz R11, <#[R11 + 588]> */
		/* 820D98D8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000024C) );
		/* 820D98D8h case    2:*/		return 0x820D98DC;
		  /* 820D98DCh */ case    3:  		/* mtspr CTR, R11 */
		/* 820D98DCh case    3:*/		regs.CTR = regs.R11;
		/* 820D98DCh case    3:*/		return 0x820D98E0;
		  /* 820D98E0h */ case    4:  		/* bcctr 20, CR0_LT */
		/* 820D98E0h case    4:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D98E0h case    4:*/		return 0x820D98E4;
		  /* 820D98E4h */ case    5:  		/* nop */
		/* 820D98E4h case    5:*/		cpu::op::nop();
		/* 820D98E4h case    5:*/		return 0x820D98E8;
	}
	return 0x820D98E8;
} // Block from 820D98D0h-820D98E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D98E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D98E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D98E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D98E8);
		  /* 820D98E8h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D98E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D98E8h case    0:*/		return 0x820D98EC;
		  /* 820D98ECh */ case    1:  		/* li R4, 0 */
		/* 820D98ECh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D98ECh case    1:*/		return 0x820D98F0;
		  /* 820D98F0h */ case    2:  		/* lwz R11, <#[R11 + 592]> */
		/* 820D98F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000250) );
		/* 820D98F0h case    2:*/		return 0x820D98F4;
		  /* 820D98F4h */ case    3:  		/* mtspr CTR, R11 */
		/* 820D98F4h case    3:*/		regs.CTR = regs.R11;
		/* 820D98F4h case    3:*/		return 0x820D98F8;
		  /* 820D98F8h */ case    4:  		/* bcctr 20, CR0_LT */
		/* 820D98F8h case    4:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D98F8h case    4:*/		return 0x820D98FC;
		  /* 820D98FCh */ case    5:  		/* nop */
		/* 820D98FCh case    5:*/		cpu::op::nop();
		/* 820D98FCh case    5:*/		return 0x820D9900;
	}
	return 0x820D9900;
} // Block from 820D98E8h-820D9900h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D9900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9900);
		  /* 820D9900h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D9900h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9900h case    0:*/		return 0x820D9904;
		  /* 820D9904h */ case    1:  		/* li R4, 1 */
		/* 820D9904h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D9904h case    1:*/		return 0x820D9908;
		  /* 820D9908h */ case    2:  		/* lwz R11, <#[R11 + 588]> */
		/* 820D9908h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000024C) );
		/* 820D9908h case    2:*/		return 0x820D990C;
		  /* 820D990Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 820D990Ch case    3:*/		regs.CTR = regs.R11;
		/* 820D990Ch case    3:*/		return 0x820D9910;
		  /* 820D9910h */ case    4:  		/* bcctr 20, CR0_LT */
		/* 820D9910h case    4:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9910h case    4:*/		return 0x820D9914;
		  /* 820D9914h */ case    5:  		/* nop */
		/* 820D9914h case    5:*/		cpu::op::nop();
		/* 820D9914h case    5:*/		return 0x820D9918;
	}
	return 0x820D9918;
} // Block from 820D9900h-820D9918h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D9918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9918);
		  /* 820D9918h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D9918h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9918h case    0:*/		return 0x820D991C;
		  /* 820D991Ch */ case    1:  		/* li R4, 1 */
		/* 820D991Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D991Ch case    1:*/		return 0x820D9920;
		  /* 820D9920h */ case    2:  		/* lwz R11, <#[R11 + 592]> */
		/* 820D9920h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000250) );
		/* 820D9920h case    2:*/		return 0x820D9924;
		  /* 820D9924h */ case    3:  		/* mtspr CTR, R11 */
		/* 820D9924h case    3:*/		regs.CTR = regs.R11;
		/* 820D9924h case    3:*/		return 0x820D9928;
		  /* 820D9928h */ case    4:  		/* bcctr 20, CR0_LT */
		/* 820D9928h case    4:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9928h case    4:*/		return 0x820D992C;
		  /* 820D992Ch */ case    5:  		/* nop */
		/* 820D992Ch case    5:*/		cpu::op::nop();
		/* 820D992Ch case    5:*/		return 0x820D9930;
	}
	return 0x820D9930;
} // Block from 820D9918h-820D9930h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D9930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9930);
		  /* 820D9930h */ case    0:  		/* mfspr R12, LR */
		/* 820D9930h case    0:*/		regs.R12 = regs.LR;
		/* 820D9930h case    0:*/		return 0x820D9934;
		  /* 820D9934h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820D9934h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D9934h case    1:*/		return 0x820D9938;
		  /* 820D9938h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820D9938h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820D9938h case    2:*/		return 0x820D993C;
		  /* 820D993Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820D993Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820D993Ch case    3:*/		return 0x820D9940;
		  /* 820D9940h */ case    4:  		/* lwz R7, <#[R3 + 260]> */
		/* 820D9940h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000104) );
		/* 820D9940h case    4:*/		return 0x820D9944;
		  /* 820D9944h */ case    5:  		/* mr R31, R3 */
		/* 820D9944h case    5:*/		regs.R31 = regs.R3;
		/* 820D9944h case    5:*/		return 0x820D9948;
		  /* 820D9948h */ case    6:  		/* lwz R11, <#[R3 + 20]> */
		/* 820D9948h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 820D9948h case    6:*/		return 0x820D994C;
		  /* 820D994Ch */ case    7:  		/* lwz R10, <#[R3 + 140]> */
		/* 820D994Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000008C) );
		/* 820D994Ch case    7:*/		return 0x820D9950;
		  /* 820D9950h */ case    8:  		/* lwz R9, <#[R7 + 16]> */
		/* 820D9950h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000010) );
		/* 820D9950h case    8:*/		return 0x820D9954;
		  /* 820D9954h */ case    9:  		/* lwz R9, <#[R9]> */
		/* 820D9954h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 820D9954h case    9:*/		return 0x820D9958;
		  /* 820D9958h */ case   10:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820D9958h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820D9958h case   10:*/		return 0x820D995C;
		  /* 820D995Ch */ case   11:  		/* lwzx R11, <#[R9 + R11]> */
		/* 820D995Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820D995Ch case   11:*/		return 0x820D9960;
		  /* 820D9960h */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 820D9960h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820D9960h case   12:*/		return 0x820D9964;
		  /* 820D9964h */ case   13:  		/* cmplw CR6, R10, R11 */
		/* 820D9964h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820D9964h case   13:*/		return 0x820D9968;
		  /* 820D9968h */ case   14:  		/* bc 4, CR6_EQ, 48 */
		/* 820D9968h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820D9998;  }
		/* 820D9968h case   14:*/		return 0x820D996C;
		  /* 820D996Ch */ case   15:  		/* lwz R11, <#[R3]> */
		/* 820D996Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D996Ch case   15:*/		return 0x820D9970;
		  /* 820D9970h */ case   16:  		/* lwz R11, <#[R11 + 576]> */
		/* 820D9970h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000240) );
		/* 820D9970h case   16:*/		return 0x820D9974;
		  /* 820D9974h */ case   17:  		/* mtspr CTR, R11 */
		/* 820D9974h case   17:*/		regs.CTR = regs.R11;
		/* 820D9974h case   17:*/		return 0x820D9978;
		  /* 820D9978h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 820D9978h case   18:*/		if ( 1 ) { regs.LR = 0x820D997C; return (uint32)regs.CTR; }
		/* 820D9978h case   18:*/		return 0x820D997C;
		  /* 820D997Ch */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820D997Ch case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D997Ch case   19:*/		return 0x820D9980;
		  /* 820D9980h */ case   20:  		/* bc 12, CR0_LT, 396 */
		/* 820D9980h case   20:*/		if ( regs.CR[0].lt ) { return 0x820D9B0C;  }
		/* 820D9980h case   20:*/		return 0x820D9984;
		  /* 820D9984h */ case   21:  		/* li R5, 0 */
		/* 820D9984h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820D9984h case   21:*/		return 0x820D9988;
		  /* 820D9988h */ case   22:  		/* li R4, 46 */
		/* 820D9988h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x2E);
		/* 820D9988h case   22:*/		return 0x820D998C;
		  /* 820D998Ch */ case   23:  		/* mr R3, R31 */
		/* 820D998Ch case   23:*/		regs.R3 = regs.R31;
		/* 820D998Ch case   23:*/		return 0x820D9990;
		  /* 820D9990h */ case   24:  		/* bl 126984 */
		/* 820D9990h case   24:*/		regs.LR = 0x820D9994; return 0x820F8998;
		/* 820D9990h case   24:*/		return 0x820D9994;
		  /* 820D9994h */ case   25:  		/* b 376 */
		/* 820D9994h case   25:*/		return 0x820D9B0C;
		/* 820D9994h case   25:*/		return 0x820D9998;
	}
	return 0x820D9998;
} // Block from 820D9930h-820D9998h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820D9998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9998);
		  /* 820D9998h */ case    0:  		/* lwz R11, <#[R31 + 108]> */
		/* 820D9998h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 820D9998h case    0:*/		return 0x820D999C;
		  /* 820D999Ch */ case    1:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 820D999Ch case    1:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 820D999Ch case    1:*/		return 0x820D99A0;
		  /* 820D99A0h */ case    2:  		/* bc 4, CR0_EQ, 200 */
		/* 820D99A0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820D9A68;  }
		/* 820D99A0h case    2:*/		return 0x820D99A4;
		  /* 820D99A4h */ case    3:  		/* lwz R5, <#[R7 + 12]> */
		/* 820D99A4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + 0x0000000C) );
		/* 820D99A4h case    3:*/		return 0x820D99A8;
		  /* 820D99A8h */ case    4:  		/* li R6, 0 */
		/* 820D99A8h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820D99A8h case    4:*/		return 0x820D99AC;
		  /* 820D99ACh */ case    5:  		/* cmplwi CR6, R5, 0 */
		/* 820D99ACh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820D99ACh case    5:*/		return 0x820D99B0;
		  /* 820D99B0h */ case    6:  		/* bc 12, CR6_EQ, 168 */
		/* 820D99B0h case    6:*/		if ( regs.CR[6].eq ) { return 0x820D9A58;  }
		/* 820D99B0h case    6:*/		return 0x820D99B4;
		  /* 820D99B4h */ case    7:  		/* lwz R8, <#[R31 + 20]> */
		/* 820D99B4h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 820D99B4h case    7:*/		return 0x820D99B8;
		  /* 820D99B8h */ case    8:  		/* li R9, 0 */
		/* 820D99B8h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820D99B8h case    8:*/		return 0x820D99BC;
		  /* 820D99BCh */ case    9:  		/* lwz R11, <#[R31 + 260]> */
		/* 820D99BCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820D99BCh case    9:*/		return 0x820D99C0;
		  /* 820D99C0h */ case   10:  		/* lwz R10, <#[R11 + 8]> */
		/* 820D99C0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 820D99C0h case   10:*/		return 0x820D99C4;
		  /* 820D99C4h */ case   11:  		/* lwz R11, <#[R11 + 16]> */
		/* 820D99C4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820D99C4h case   11:*/		return 0x820D99C8;
		  /* 820D99C8h */ case   12:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820D99C8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820D99C8h case   12:*/		return 0x820D99CC;
		  /* 820D99CCh */ case   13:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820D99CCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820D99CCh case   13:*/		return 0x820D99D0;
		  /* 820D99D0h */ case   14:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820D99D0h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820D99D0h case   14:*/		return 0x820D99D4;
		  /* 820D99D4h */ case   15:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 820D99D4h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 820D99D4h case   15:*/		return 0x820D99D8;
		  /* 820D99D8h */ case   16:  		/* lwzx R11, <#[R10 + R8]> */
		/* 820D99D8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820D99D8h case   16:*/		return 0x820D99DC;
		  /* 820D99DCh */ case   17:  		/* lwzx R10, <#[R4 + R8]> */
		/* 820D99DCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + regs.R8 + 0x00000000) );
		/* 820D99DCh case   17:*/		return 0x820D99E0;
		  /* 820D99E0h */ case   18:  		/* lwz R4, <#[R11 + 4]> */
		/* 820D99E0h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 820D99E0h case   18:*/		return 0x820D99E4;
		  /* 820D99E4h */ case   19:  		/* lwz R3, <#[R10 + 4]> */
		/* 820D99E4h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000004) );
		/* 820D99E4h case   19:*/		return 0x820D99E8;
		  /* 820D99E8h */ case   20:  		/* cmplw CR6, R3, R4 */
		/* 820D99E8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R4);
		/* 820D99E8h case   20:*/		return 0x820D99EC;
		  /* 820D99ECh */ case   21:  		/* bc 4, CR6_EQ, 108 */
		/* 820D99ECh case   21:*/		if ( !regs.CR[6].eq ) { return 0x820D9A58;  }
		/* 820D99ECh case   21:*/		return 0x820D99F0;
		  /* 820D99F0h */ case   22:  		/* lwz R4, <#[R10 + 8]> */
		/* 820D99F0h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000008) );
		/* 820D99F0h case   22:*/		return 0x820D99F4;
		  /* 820D99F4h */ case   23:  		/* lwz R3, <#[R11 + 8]> */
		/* 820D99F4h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 820D99F4h case   23:*/		return 0x820D99F8;
		  /* 820D99F8h */ case   24:  		/* cmplw CR6, R4, R3 */
		/* 820D99F8h case   24:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 820D99F8h case   24:*/		return 0x820D99FC;
		  /* 820D99FCh */ case   25:  		/* bc 4, CR6_EQ, 92 */
		/* 820D99FCh case   25:*/		if ( !regs.CR[6].eq ) { return 0x820D9A58;  }
		/* 820D99FCh case   25:*/		return 0x820D9A00;
		  /* 820D9A00h */ case   26:  		/* lwz R4, <#[R10 + 12]> */
		/* 820D9A00h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x0000000C) );
		/* 820D9A00h case   26:*/		return 0x820D9A04;
		  /* 820D9A04h */ case   27:  		/* lwz R3, <#[R11 + 12]> */
		/* 820D9A04h case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 820D9A04h case   27:*/		return 0x820D9A08;
		  /* 820D9A08h */ case   28:  		/* cmplw CR6, R4, R3 */
		/* 820D9A08h case   28:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 820D9A08h case   28:*/		return 0x820D9A0C;
		  /* 820D9A0Ch */ case   29:  		/* bc 4, CR6_EQ, 76 */
		/* 820D9A0Ch case   29:*/		if ( !regs.CR[6].eq ) { return 0x820D9A58;  }
		/* 820D9A0Ch case   29:*/		return 0x820D9A10;
		  /* 820D9A10h */ case   30:  		/* lwz R4, <#[R10 + 16]> */
		/* 820D9A10h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000010) );
		/* 820D9A10h case   30:*/		return 0x820D9A14;
		  /* 820D9A14h */ case   31:  		/* lwz R3, <#[R11 + 16]> */
		/* 820D9A14h case   31:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000010) );
		/* 820D9A14h case   31:*/		return 0x820D9A18;
		  /* 820D9A18h */ case   32:  		/* cmplw CR6, R4, R3 */
		/* 820D9A18h case   32:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 820D9A18h case   32:*/		return 0x820D9A1C;
		  /* 820D9A1Ch */ case   33:  		/* bc 4, CR6_EQ, 60 */
		/* 820D9A1Ch case   33:*/		if ( !regs.CR[6].eq ) { return 0x820D9A58;  }
		/* 820D9A1Ch case   33:*/		return 0x820D9A20;
		  /* 820D9A20h */ case   34:  		/* lwz R4, <#[R10 + 60]> */
		/* 820D9A20h case   34:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x0000003C) );
		/* 820D9A20h case   34:*/		return 0x820D9A24;
		  /* 820D9A24h */ case   35:  		/* lwz R11, <#[R11 + 60]> */
		/* 820D9A24h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 820D9A24h case   35:*/		return 0x820D9A28;
		  /* 820D9A28h */ case   36:  		/* cmplw CR6, R4, R11 */
		/* 820D9A28h case   36:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 820D9A28h case   36:*/		return 0x820D9A2C;
		  /* 820D9A2Ch */ case   37:  		/* bc 4, CR6_EQ, 44 */
		/* 820D9A2Ch case   37:*/		if ( !regs.CR[6].eq ) { return 0x820D9A58;  }
		/* 820D9A2Ch case   37:*/		return 0x820D9A30;
		  /* 820D9A30h */ case   38:  		/* lwz R11, <#[R31 + 204]> */
		/* 820D9A30h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CC) );
		/* 820D9A30h case   38:*/		return 0x820D9A34;
		  /* 820D9A34h */ case   39:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 820D9A34h case   39:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 820D9A34h case   39:*/		return 0x820D9A38;
		  /* 820D9A38h */ case   40:  		/* bc 12, CR0_EQ, 16 */
		/* 820D9A38h case   40:*/		if ( regs.CR[0].eq ) { return 0x820D9A48;  }
		/* 820D9A38h case   40:*/		return 0x820D9A3C;
		  /* 820D9A3Ch */ case   41:  		/* lwz R11, <#[R10 + 96]> */
		/* 820D9A3Ch case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000060) );
		/* 820D9A3Ch case   41:*/		return 0x820D9A40;
		  /* 820D9A40h */ case   42:  		/* cmplwi CR6, R11, 0 */
		/* 820D9A40h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D9A40h case   42:*/		return 0x820D9A44;
		  /* 820D9A44h */ case   43:  		/* bc 4, CR6_EQ, 20 */
		/* 820D9A44h case   43:*/		if ( !regs.CR[6].eq ) { return 0x820D9A58;  }
		/* 820D9A44h case   43:*/		return 0x820D9A48;
	}
	return 0x820D9A48;
} // Block from 820D9998h-820D9A48h (44 instructions)

//////////////////////////////////////////////////////
// Block at 820D9A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9A48);
		  /* 820D9A48h */ case    0:  		/* addi R6, R6, 1 */
		/* 820D9A48h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820D9A48h case    0:*/		return 0x820D9A4C;
		  /* 820D9A4Ch */ case    1:  		/* addi R9, R9, 4 */
		/* 820D9A4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820D9A4Ch case    1:*/		return 0x820D9A50;
		  /* 820D9A50h */ case    2:  		/* cmplw CR6, R6, R5 */
		/* 820D9A50h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 820D9A50h case    2:*/		return 0x820D9A54;
		  /* 820D9A54h */ case    3:  		/* bc 12, CR6_LT, -152 */
		/* 820D9A54h case    3:*/		if ( regs.CR[6].lt ) { return 0x820D99BC;  }
		/* 820D9A54h case    3:*/		return 0x820D9A58;
	}
	return 0x820D9A58;
} // Block from 820D9A48h-820D9A58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9A58);
		  /* 820D9A58h */ case    0:  		/* cmplw CR6, R6, R5 */
		/* 820D9A58h case    0:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 820D9A58h case    0:*/		return 0x820D9A5C;
		  /* 820D9A5Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 820D9A5Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820D9A68;  }
		/* 820D9A5Ch case    1:*/		return 0x820D9A60;
		  /* 820D9A60h */ case    2:  		/* li R3, 0 */
		/* 820D9A60h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D9A60h case    2:*/		return 0x820D9A64;
		  /* 820D9A64h */ case    3:  		/* b 168 */
		/* 820D9A64h case    3:*/		return 0x820D9B0C;
		/* 820D9A64h case    3:*/		return 0x820D9A68;
	}
	return 0x820D9A68;
} // Block from 820D9A58h-820D9A68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9A68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9A68);
		  /* 820D9A68h */ case    0:  		/* lwz R11, <#[R7 + 12]> */
		/* 820D9A68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000000C) );
		/* 820D9A68h case    0:*/		return 0x820D9A6C;
		  /* 820D9A6Ch */ case    1:  		/* li R6, 0 */
		/* 820D9A6Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820D9A6Ch case    1:*/		return 0x820D9A70;
		  /* 820D9A70h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820D9A70h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820D9A70h case    2:*/		return 0x820D9A74;
		  /* 820D9A74h */ case    3:  		/* bc 4, CR6_GT, 100 */
		/* 820D9A74h case    3:*/		if ( !regs.CR[6].gt ) { return 0x820D9AD8;  }
		/* 820D9A74h case    3:*/		return 0x820D9A78;
		  /* 820D9A78h */ case    4:  		/* li R11, 0 */
		/* 820D9A78h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820D9A78h case    4:*/		return 0x820D9A7C;
		  /* 820D9A7Ch */ case    5:  		/* lwz R10, <#[R31 + 260]> */
		/* 820D9A7Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820D9A7Ch case    5:*/		return 0x820D9A80;
		  /* 820D9A80h */ case    6:  		/* lwz R9, <#[R31 + 20]> */
		/* 820D9A80h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820D9A80h case    6:*/		return 0x820D9A84;
		  /* 820D9A84h */ case    7:  		/* lwz R8, <#[R10 + 16]> */
		/* 820D9A84h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000010) );
		/* 820D9A84h case    7:*/		return 0x820D9A88;
		  /* 820D9A88h */ case    8:  		/* lwzx R8, <#[R8 + R11]> */
		/* 820D9A88h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820D9A88h case    8:*/		return 0x820D9A8C;
		  /* 820D9A8Ch */ case    9:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820D9A8Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820D9A8Ch case    9:*/		return 0x820D9A90;
		  /* 820D9A90h */ case   10:  		/* lwzx R8, <#[R8 + R9]> */
		/* 820D9A90h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820D9A90h case   10:*/		return 0x820D9A94;
		  /* 820D9A94h */ case   11:  		/* lwz R7, <#[R8]> */
		/* 820D9A94h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + 0x00000000) );
		/* 820D9A94h case   11:*/		return 0x820D9A98;
		  /* 820D9A98h */ case   12:  		/* rlwinm. R5, R7, 0, 4, 6 */
		/* 820D9A98h case   12:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R5,regs.R7);
		/* 820D9A98h case   12:*/		return 0x820D9A9C;
		  /* 820D9A9Ch */ case   13:  		/* bc 4, CR0_EQ, 36 */
		/* 820D9A9Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x820D9AC0;  }
		/* 820D9A9Ch case   13:*/		return 0x820D9AA0;
		  /* 820D9AA0h */ case   14:  		/* lwz R10, <#[R10 + 8]> */
		/* 820D9AA0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820D9AA0h case   14:*/		return 0x820D9AA4;
		  /* 820D9AA4h */ case   15:  		/* lwzx R10, <#[R10 + R11]> */
		/* 820D9AA4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820D9AA4h case   15:*/		return 0x820D9AA8;
		  /* 820D9AA8h */ case   16:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820D9AA8h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820D9AA8h case   16:*/		return 0x820D9AAC;
		  /* 820D9AACh */ case   17:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820D9AACh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820D9AACh case   17:*/		return 0x820D9AB0;
		  /* 820D9AB0h */ case   18:  		/* lwz R10, <#[R10]> */
		/* 820D9AB0h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820D9AB0h case   18:*/		return 0x820D9AB4;
		  /* 820D9AB4h */ case   19:  		/* rlwinm R10, R10, 0, 4, 6 */
		/* 820D9AB4h case   19:*/		cpu::op::rlwinm<0,0,4,6>(regs,&regs.R10,regs.R10);
		/* 820D9AB4h case   19:*/		return 0x820D9AB8;
		  /* 820D9AB8h */ case   20:  		/* or R10, R10, R7 */
		/* 820D9AB8h case   20:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 820D9AB8h case   20:*/		return 0x820D9ABC;
		  /* 820D9ABCh */ case   21:  		/* stw R10, <#[R8]> */
		/* 820D9ABCh case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 820D9ABCh case   21:*/		return 0x820D9AC0;
	}
	return 0x820D9AC0;
} // Block from 820D9A68h-820D9AC0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820D9AC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9AC0);
		  /* 820D9AC0h */ case    0:  		/* lwz R7, <#[R31 + 260]> */
		/* 820D9AC0h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000104) );
		/* 820D9AC0h case    0:*/		return 0x820D9AC4;
		  /* 820D9AC4h */ case    1:  		/* addi R6, R6, 1 */
		/* 820D9AC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820D9AC4h case    1:*/		return 0x820D9AC8;
		  /* 820D9AC8h */ case    2:  		/* addi R11, R11, 4 */
		/* 820D9AC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820D9AC8h case    2:*/		return 0x820D9ACC;
		  /* 820D9ACCh */ case    3:  		/* lwz R10, <#[R7 + 12]> */
		/* 820D9ACCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x0000000C) );
		/* 820D9ACCh case    3:*/		return 0x820D9AD0;
		  /* 820D9AD0h */ case    4:  		/* cmplw CR6, R6, R10 */
		/* 820D9AD0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 820D9AD0h case    4:*/		return 0x820D9AD4;
		  /* 820D9AD4h */ case    5:  		/* bc 12, CR6_LT, -88 */
		/* 820D9AD4h case    5:*/		if ( regs.CR[6].lt ) { return 0x820D9A7C;  }
		/* 820D9AD4h case    5:*/		return 0x820D9AD8;
	}
	return 0x820D9AD8;
} // Block from 820D9AC0h-820D9AD8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D9AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9AD8);
		  /* 820D9AD8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820D9AD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9AD8h case    0:*/		return 0x820D9ADC;
		  /* 820D9ADCh */ case    1:  		/* li R6, 0 */
		/* 820D9ADCh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820D9ADCh case    1:*/		return 0x820D9AE0;
		  /* 820D9AE0h */ case    2:  		/* lwz R10, <#[R7]> */
		/* 820D9AE0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 820D9AE0h case    2:*/		return 0x820D9AE4;
		  /* 820D9AE4h */ case    3:  		/* li R4, 0 */
		/* 820D9AE4h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D9AE4h case    3:*/		return 0x820D9AE8;
		  /* 820D9AE8h */ case    4:  		/* mr R3, R31 */
		/* 820D9AE8h case    4:*/		regs.R3 = regs.R31;
		/* 820D9AE8h case    4:*/		return 0x820D9AEC;
		  /* 820D9AECh */ case    5:  		/* rlwinm R5, R10, 0, 12, 31 */
		/* 820D9AECh case    5:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R5,regs.R10);
		/* 820D9AECh case    5:*/		return 0x820D9AF0;
		  /* 820D9AF0h */ case    6:  		/* lwz R11, <#[R11 + 572]> */
		/* 820D9AF0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000023C) );
		/* 820D9AF0h case    6:*/		return 0x820D9AF4;
		  /* 820D9AF4h */ case    7:  		/* mtspr CTR, R11 */
		/* 820D9AF4h case    7:*/		regs.CTR = regs.R11;
		/* 820D9AF4h case    7:*/		return 0x820D9AF8;
		  /* 820D9AF8h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 820D9AF8h case    8:*/		if ( 1 ) { regs.LR = 0x820D9AFC; return (uint32)regs.CTR; }
		/* 820D9AF8h case    8:*/		return 0x820D9AFC;
		  /* 820D9AFCh */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820D9AFCh case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820D9AFCh case    9:*/		return 0x820D9B00;
		  /* 820D9B00h */ case   10:  		/* bc 12, CR0_LT, 12 */
		/* 820D9B00h case   10:*/		if ( regs.CR[0].lt ) { return 0x820D9B0C;  }
		/* 820D9B00h case   10:*/		return 0x820D9B04;
		  /* 820D9B04h */ case   11:  		/* mr R3, R31 */
		/* 820D9B04h case   11:*/		regs.R3 = regs.R31;
		/* 820D9B04h case   11:*/		return 0x820D9B08;
		  /* 820D9B08h */ case   12:  		/* bl 128144 */
		/* 820D9B08h case   12:*/		regs.LR = 0x820D9B0C; return 0x820F8F98;
		/* 820D9B08h case   12:*/		return 0x820D9B0C;
	}
	return 0x820D9B0C;
} // Block from 820D9AD8h-820D9B0Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820D9B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9B0C);
		  /* 820D9B0Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 820D9B0Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820D9B0Ch case    0:*/		return 0x820D9B10;
		  /* 820D9B10h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820D9B10h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D9B10h case    1:*/		return 0x820D9B14;
		  /* 820D9B14h */ case    2:  		/* mtspr LR, R12 */
		/* 820D9B14h case    2:*/		regs.LR = regs.R12;
		/* 820D9B14h case    2:*/		return 0x820D9B18;
		  /* 820D9B18h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 820D9B18h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820D9B18h case    3:*/		return 0x820D9B1C;
		  /* 820D9B1Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 820D9B1Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820D9B1Ch case    4:*/		return 0x820D9B20;
	}
	return 0x820D9B20;
} // Block from 820D9B0Ch-820D9B20h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D9B20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9B20);
		  /* 820D9B20h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D9B20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9B20h case    0:*/		return 0x820D9B24;
		  /* 820D9B24h */ case    1:  		/* mr R7, R6 */
		/* 820D9B24h case    1:*/		regs.R7 = regs.R6;
		/* 820D9B24h case    1:*/		return 0x820D9B28;
		  /* 820D9B28h */ case    2:  		/* mr R6, R5 */
		/* 820D9B28h case    2:*/		regs.R6 = regs.R5;
		/* 820D9B28h case    2:*/		return 0x820D9B2C;
		  /* 820D9B2Ch */ case    3:  		/* mr R5, R4 */
		/* 820D9B2Ch case    3:*/		regs.R5 = regs.R4;
		/* 820D9B2Ch case    3:*/		return 0x820D9B30;
		  /* 820D9B30h */ case    4:  		/* li R4, 1 */
		/* 820D9B30h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820D9B30h case    4:*/		return 0x820D9B34;
		  /* 820D9B34h */ case    5:  		/* lwz R11, <#[R11 + 604]> */
		/* 820D9B34h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000025C) );
		/* 820D9B34h case    5:*/		return 0x820D9B38;
		  /* 820D9B38h */ case    6:  		/* mtspr CTR, R11 */
		/* 820D9B38h case    6:*/		regs.CTR = regs.R11;
		/* 820D9B38h case    6:*/		return 0x820D9B3C;
		  /* 820D9B3Ch */ case    7:  		/* bcctr 20, CR0_LT */
		/* 820D9B3Ch case    7:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9B3Ch case    7:*/		return 0x820D9B40;
	}
	return 0x820D9B40;
} // Block from 820D9B20h-820D9B40h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D9B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9B40);
		  /* 820D9B40h */ case    0:  		/* b 1573312 */
		/* 820D9B40h case    0:*/		return 0x82259D00;
		/* 820D9B40h case    0:*/		return 0x820D9B44;
		  /* 820D9B44h */ case    1:  		/* nop */
		/* 820D9B44h case    1:*/		cpu::op::nop();
		/* 820D9B44h case    1:*/		return 0x820D9B48;
	}
	return 0x820D9B48;
} // Block from 820D9B40h-820D9B48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D9B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9B48);
		  /* 820D9B48h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820D9B48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9B48h case    0:*/		return 0x820D9B4C;
		  /* 820D9B4Ch */ case    1:  		/* mr R7, R6 */
		/* 820D9B4Ch case    1:*/		regs.R7 = regs.R6;
		/* 820D9B4Ch case    1:*/		return 0x820D9B50;
		  /* 820D9B50h */ case    2:  		/* mr R6, R5 */
		/* 820D9B50h case    2:*/		regs.R6 = regs.R5;
		/* 820D9B50h case    2:*/		return 0x820D9B54;
		  /* 820D9B54h */ case    3:  		/* mr R5, R4 */
		/* 820D9B54h case    3:*/		regs.R5 = regs.R4;
		/* 820D9B54h case    3:*/		return 0x820D9B58;
		  /* 820D9B58h */ case    4:  		/* li R4, 0 */
		/* 820D9B58h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820D9B58h case    4:*/		return 0x820D9B5C;
		  /* 820D9B5Ch */ case    5:  		/* lwz R11, <#[R11 + 604]> */
		/* 820D9B5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000025C) );
		/* 820D9B5Ch case    5:*/		return 0x820D9B60;
		  /* 820D9B60h */ case    6:  		/* mtspr CTR, R11 */
		/* 820D9B60h case    6:*/		regs.CTR = regs.R11;
		/* 820D9B60h case    6:*/		return 0x820D9B64;
		  /* 820D9B64h */ case    7:  		/* bcctr 20, CR0_LT */
		/* 820D9B64h case    7:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9B64h case    7:*/		return 0x820D9B68;
		  /* 820D9B68h */ case    8:  		/* lwz R12, <#[R3]> */
		/* 820D9B68h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9B68h case    8:*/		return 0x820D9B6C;
		  /* 820D9B6Ch */ case    9:  		/* lwz R11, <#[R12 + 600]> */
		/* 820D9B6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R12 + 0x00000258) );
		/* 820D9B6Ch case    9:*/		return 0x820D9B70;
		  /* 820D9B70h */ case   10:  		/* mtspr CTR, R11 */
		/* 820D9B70h case   10:*/		regs.CTR = regs.R11;
		/* 820D9B70h case   10:*/		return 0x820D9B74;
		  /* 820D9B74h */ case   11:  		/* bcctr 20, CR0_LT */
		/* 820D9B74h case   11:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9B74h case   11:*/		return 0x820D9B78;
		  /* 820D9B78h */ case   12:  		/* lwz R12, <#[R3]> */
		/* 820D9B78h case   12:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9B78h case   12:*/		return 0x820D9B7C;
		  /* 820D9B7Ch */ case   13:  		/* lwz R11, <#[R12 + 632]> */
		/* 820D9B7Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R12 + 0x00000278) );
		/* 820D9B7Ch case   13:*/		return 0x820D9B80;
		  /* 820D9B80h */ case   14:  		/* mtspr CTR, R11 */
		/* 820D9B80h case   14:*/		regs.CTR = regs.R11;
		/* 820D9B80h case   14:*/		return 0x820D9B84;
		  /* 820D9B84h */ case   15:  		/* bcctr 20, CR0_LT */
		/* 820D9B84h case   15:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9B84h case   15:*/		return 0x820D9B88;
		  /* 820D9B88h */ case   16:  		/* lwz R12, <#[R3]> */
		/* 820D9B88h case   16:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9B88h case   16:*/		return 0x820D9B8C;
		  /* 820D9B8Ch */ case   17:  		/* lwz R11, <#[R12 + 620]> */
		/* 820D9B8Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R12 + 0x0000026C) );
		/* 820D9B8Ch case   17:*/		return 0x820D9B90;
		  /* 820D9B90h */ case   18:  		/* mtspr CTR, R11 */
		/* 820D9B90h case   18:*/		regs.CTR = regs.R11;
		/* 820D9B90h case   18:*/		return 0x820D9B94;
		  /* 820D9B94h */ case   19:  		/* bcctr 20, CR0_LT */
		/* 820D9B94h case   19:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9B94h case   19:*/		return 0x820D9B98;
		  /* 820D9B98h */ case   20:  		/* lwz R12, <#[R3]> */
		/* 820D9B98h case   20:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9B98h case   20:*/		return 0x820D9B9C;
		  /* 820D9B9Ch */ case   21:  		/* lwz R11, <#[R12 + 636]> */
		/* 820D9B9Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R12 + 0x0000027C) );
		/* 820D9B9Ch case   21:*/		return 0x820D9BA0;
		  /* 820D9BA0h */ case   22:  		/* mtspr CTR, R11 */
		/* 820D9BA0h case   22:*/		regs.CTR = regs.R11;
		/* 820D9BA0h case   22:*/		return 0x820D9BA4;
		  /* 820D9BA4h */ case   23:  		/* bcctr 20, CR0_LT */
		/* 820D9BA4h case   23:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9BA4h case   23:*/		return 0x820D9BA8;
		  /* 820D9BA8h */ case   24:  		/* lwz R12, <#[R3]> */
		/* 820D9BA8h case   24:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9BA8h case   24:*/		return 0x820D9BAC;
		  /* 820D9BACh */ case   25:  		/* lwz R11, <#[R12 + 608]> */
		/* 820D9BACh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R12 + 0x00000260) );
		/* 820D9BACh case   25:*/		return 0x820D9BB0;
		  /* 820D9BB0h */ case   26:  		/* mtspr CTR, R11 */
		/* 820D9BB0h case   26:*/		regs.CTR = regs.R11;
		/* 820D9BB0h case   26:*/		return 0x820D9BB4;
		  /* 820D9BB4h */ case   27:  		/* bcctr 20, CR0_LT */
		/* 820D9BB4h case   27:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9BB4h case   27:*/		return 0x820D9BB8;
		  /* 820D9BB8h */ case   28:  		/* lwz R12, <#[R3]> */
		/* 820D9BB8h case   28:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9BB8h case   28:*/		return 0x820D9BBC;
		  /* 820D9BBCh */ case   29:  		/* lwz R11, <#[R12 + 624]> */
		/* 820D9BBCh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R12 + 0x00000270) );
		/* 820D9BBCh case   29:*/		return 0x820D9BC0;
		  /* 820D9BC0h */ case   30:  		/* mtspr CTR, R11 */
		/* 820D9BC0h case   30:*/		regs.CTR = regs.R11;
		/* 820D9BC0h case   30:*/		return 0x820D9BC4;
		  /* 820D9BC4h */ case   31:  		/* bcctr 20, CR0_LT */
		/* 820D9BC4h case   31:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9BC4h case   31:*/		return 0x820D9BC8;
		  /* 820D9BC8h */ case   32:  		/* lwz R12, <#[R3]> */
		/* 820D9BC8h case   32:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9BC8h case   32:*/		return 0x820D9BCC;
		  /* 820D9BCCh */ case   33:  		/* lwz R11, <#[R12 + 640]> */
		/* 820D9BCCh case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R12 + 0x00000280) );
		/* 820D9BCCh case   33:*/		return 0x820D9BD0;
		  /* 820D9BD0h */ case   34:  		/* mtspr CTR, R11 */
		/* 820D9BD0h case   34:*/		regs.CTR = regs.R11;
		/* 820D9BD0h case   34:*/		return 0x820D9BD4;
		  /* 820D9BD4h */ case   35:  		/* bcctr 20, CR0_LT */
		/* 820D9BD4h case   35:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9BD4h case   35:*/		return 0x820D9BD8;
		  /* 820D9BD8h */ case   36:  		/* lwz R12, <#[R3]> */
		/* 820D9BD8h case   36:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9BD8h case   36:*/		return 0x820D9BDC;
		  /* 820D9BDCh */ case   37:  		/* lwz R11, <#[R12 + 612]> */
		/* 820D9BDCh case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R12 + 0x00000264) );
		/* 820D9BDCh case   37:*/		return 0x820D9BE0;
		  /* 820D9BE0h */ case   38:  		/* mtspr CTR, R11 */
		/* 820D9BE0h case   38:*/		regs.CTR = regs.R11;
		/* 820D9BE0h case   38:*/		return 0x820D9BE4;
		  /* 820D9BE4h */ case   39:  		/* bcctr 20, CR0_LT */
		/* 820D9BE4h case   39:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9BE4h case   39:*/		return 0x820D9BE8;
		  /* 820D9BE8h */ case   40:  		/* lwz R12, <#[R3]> */
		/* 820D9BE8h case   40:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9BE8h case   40:*/		return 0x820D9BEC;
		  /* 820D9BECh */ case   41:  		/* lwz R11, <#[R12 + 628]> */
		/* 820D9BECh case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R12 + 0x00000274) );
		/* 820D9BECh case   41:*/		return 0x820D9BF0;
		  /* 820D9BF0h */ case   42:  		/* mtspr CTR, R11 */
		/* 820D9BF0h case   42:*/		regs.CTR = regs.R11;
		/* 820D9BF0h case   42:*/		return 0x820D9BF4;
		  /* 820D9BF4h */ case   43:  		/* bcctr 20, CR0_LT */
		/* 820D9BF4h case   43:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9BF4h case   43:*/		return 0x820D9BF8;
		  /* 820D9BF8h */ case   44:  		/* lwz R12, <#[R3]> */
		/* 820D9BF8h case   44:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R3 + 0x00000000) );
		/* 820D9BF8h case   44:*/		return 0x820D9BFC;
		  /* 820D9BFCh */ case   45:  		/* lwz R11, <#[R12 + 644]> */
		/* 820D9BFCh case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R12 + 0x00000284) );
		/* 820D9BFCh case   45:*/		return 0x820D9C00;
		  /* 820D9C00h */ case   46:  		/* mtspr CTR, R11 */
		/* 820D9C00h case   46:*/		regs.CTR = regs.R11;
		/* 820D9C00h case   46:*/		return 0x820D9C04;
		  /* 820D9C04h */ case   47:  		/* bcctr 20, CR0_LT */
		/* 820D9C04h case   47:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820D9C04h case   47:*/		return 0x820D9C08;
	}
	return 0x820D9C08;
} // Block from 820D9B48h-820D9C08h (48 instructions)

//////////////////////////////////////////////////////
// Block at 820D9C08h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9C08);
		  /* 820D9C08h */ case    0:  		/* mfspr R12, LR */
		/* 820D9C08h case    0:*/		regs.R12 = regs.LR;
		/* 820D9C08h case    0:*/		return 0x820D9C0C;
		  /* 820D9C0Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820D9C0Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D9C0Ch case    1:*/		return 0x820D9C10;
		  /* 820D9C10h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820D9C10h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820D9C10h case    2:*/		return 0x820D9C14;
		  /* 820D9C14h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820D9C14h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820D9C14h case    3:*/		return 0x820D9C18;
		  /* 820D9C18h */ case    4:  		/* mr R31, R3 */
		/* 820D9C18h case    4:*/		regs.R31 = regs.R3;
		/* 820D9C18h case    4:*/		return 0x820D9C1C;
		  /* 820D9C1Ch */ case    5:  		/* lwz R3, <#[R3 + 1532]> */
		/* 820D9C1Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000005FC) );
		/* 820D9C1Ch case    5:*/		return 0x820D9C20;
		  /* 820D9C20h */ case    6:  		/* lis R11, -32254 */
		/* 820D9C20h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820D9C20h case    6:*/		return 0x820D9C24;
		  /* 820D9C24h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 820D9C24h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820D9C24h case    7:*/		return 0x820D9C28;
	}
	return 0x820D9C28;
} // Block from 820D9C08h-820D9C28h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D9C28h
// Function '?EmitObjectDCL@C30SWProgram@D3DXShader@@MAAJPAVCArgument@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9C28);
		  /* 820D9C28h */ case    0:  		/* addi R11, R11, -31528 */
		/* 820D9C28h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFF84D8);
		/* 820D9C28h case    0:*/		return 0x820D9C2C;
		  /* 820D9C2Ch */ case    1:  		/* stw R11, <#[R31]> */
		/* 820D9C2Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820D9C2Ch case    1:*/		return 0x820D9C30;
		  /* 820D9C30h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 820D9C30h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D9C3C;  }
		/* 820D9C30h case    2:*/		return 0x820D9C34;
		  /* 820D9C34h */ case    3:  		/* lis R4, 9345 */
		/* 820D9C34h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820D9C34h case    3:*/		return 0x820D9C38;
		  /* 820D9C38h */ case    4:  		/* bl -334080 */
		/* 820D9C38h case    4:*/		regs.LR = 0x820D9C3C; return 0x82088338;
		/* 820D9C38h case    4:*/		return 0x820D9C3C;
	}
	return 0x820D9C3C;
} // Block from 820D9C28h-820D9C3Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820D9C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9C3C);
		  /* 820D9C3Ch */ case    0:  		/* mr R3, R31 */
		/* 820D9C3Ch case    0:*/		regs.R3 = regs.R31;
		/* 820D9C3Ch case    0:*/		return 0x820D9C40;
		  /* 820D9C40h */ case    1:  		/* bl 129120 */
		/* 820D9C40h case    1:*/		regs.LR = 0x820D9C44; return 0x820F94A0;
		/* 820D9C40h case    1:*/		return 0x820D9C44;
		  /* 820D9C44h */ case    2:  		/* addi R1, R1, 96 */
		/* 820D9C44h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820D9C44h case    2:*/		return 0x820D9C48;
		  /* 820D9C48h */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 820D9C48h case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820D9C48h case    3:*/		return 0x820D9C4C;
		  /* 820D9C4Ch */ case    4:  		/* mtspr LR, R12 */
		/* 820D9C4Ch case    4:*/		regs.LR = regs.R12;
		/* 820D9C4Ch case    4:*/		return 0x820D9C50;
		  /* 820D9C50h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 820D9C50h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820D9C50h case    5:*/		return 0x820D9C54;
		  /* 820D9C54h */ case    6:  		/* bclr 20, CR0_LT */
		/* 820D9C54h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820D9C54h case    6:*/		return 0x820D9C58;
	}
	return 0x820D9C58;
} // Block from 820D9C3Ch-820D9C58h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D9C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9C58);
		  /* 820D9C58h */ case    0:  		/* lis R3, -32768 */
		/* 820D9C58h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820D9C58h case    0:*/		return 0x820D9C5C;
		  /* 820D9C5Ch */ case    1:  		/* ori R3, R3, 16389 */
		/* 820D9C5Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820D9C5Ch case    1:*/		return 0x820D9C60;
		  /* 820D9C60h */ case    2:  		/* bclr 20, CR0_LT */
		/* 820D9C60h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820D9C60h case    2:*/		return 0x820D9C64;
	}
	return 0x820D9C64;
} // Block from 820D9C58h-820D9C64h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D9C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9C64);
		  /* 820D9C64h */ case    0:  		/* nop */
		/* 820D9C64h case    0:*/		cpu::op::nop();
		/* 820D9C64h case    0:*/		return 0x820D9C68;
	}
	return 0x820D9C68;
} // Block from 820D9C64h-820D9C68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D9C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9C68);
		  /* 820D9C68h */ case    0:  		/* mfspr R12, LR */
		/* 820D9C68h case    0:*/		regs.R12 = regs.LR;
		/* 820D9C68h case    0:*/		return 0x820D9C6C;
		  /* 820D9C6Ch */ case    1:  		/* bl -297488 */
		/* 820D9C6Ch case    1:*/		regs.LR = 0x820D9C70; return 0x8209125C;
		/* 820D9C6Ch case    1:*/		return 0x820D9C70;
		  /* 820D9C70h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820D9C70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820D9C70h case    2:*/		return 0x820D9C74;
		  /* 820D9C74h */ case    3:  		/* lwz R10, <#[R3 + 1540]> */
		/* 820D9C74h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000604) );
		/* 820D9C74h case    3:*/		return 0x820D9C78;
		  /* 820D9C78h */ case    4:  		/* mr R31, R3 */
		/* 820D9C78h case    4:*/		regs.R31 = regs.R3;
		/* 820D9C78h case    4:*/		return 0x820D9C7C;
		  /* 820D9C7Ch */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 820D9C7Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820D9C7Ch case    5:*/		return 0x820D9C80;
		  /* 820D9C80h */ case    6:  		/* mr R30, R10 */
		/* 820D9C80h case    6:*/		regs.R30 = regs.R10;
		/* 820D9C80h case    6:*/		return 0x820D9C84;
		  /* 820D9C84h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 820D9C84h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820D9C8C;  }
		/* 820D9C84h case    7:*/		return 0x820D9C88;
		  /* 820D9C88h */ case    8:  		/* li R30, 1024 */
		/* 820D9C88h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x400);
		/* 820D9C88h case    8:*/		return 0x820D9C8C;
	}
	return 0x820D9C8C;
} // Block from 820D9C68h-820D9C8Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D9C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9C8C);
		  /* 820D9C8Ch */ case    0:  		/* lwz R11, <#[R31 + 1536]> */
		/* 820D9C8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000600) );
		/* 820D9C8Ch case    0:*/		return 0x820D9C90;
		  /* 820D9C90h */ case    1:  		/* add R11, R4, R11 */
		/* 820D9C90h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 820D9C90h case    1:*/		return 0x820D9C94;
		  /* 820D9C94h */ case    2:  		/* cmplw CR6, R11, R30 */
		/* 820D9C94h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 820D9C94h case    2:*/		return 0x820D9C98;
		  /* 820D9C98h */ case    3:  		/* bc 4, CR6_GT, 24 */
		/* 820D9C98h case    3:*/		if ( !regs.CR[6].gt ) { return 0x820D9CB0;  }
		/* 820D9C98h case    3:*/		return 0x820D9C9C;
		  /* 820D9C9Ch */ case    4:  		/* lwz R11, <#[R31 + 1536]> */
		/* 820D9C9Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000600) );
		/* 820D9C9Ch case    4:*/		return 0x820D9CA0;
		  /* 820D9CA0h */ case    5:  		/* add R11, R4, R11 */
		/* 820D9CA0h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 820D9CA0h case    5:*/		return 0x820D9CA4;
		  /* 820D9CA4h */ case    6:  		/* rlwinm R30, R30, 1, 0, 30 */
		/* 820D9CA4h case    6:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R30);
		/* 820D9CA4h case    6:*/		return 0x820D9CA8;
		  /* 820D9CA8h */ case    7:  		/* cmplw CR6, R11, R30 */
		/* 820D9CA8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 820D9CA8h case    7:*/		return 0x820D9CAC;
		  /* 820D9CACh */ case    8:  		/* bc 12, CR6_GT, -8 */
		/* 820D9CACh case    8:*/		if ( regs.CR[6].gt ) { return 0x820D9CA4;  }
		/* 820D9CACh case    8:*/		return 0x820D9CB0;
	}
	return 0x820D9CB0;
} // Block from 820D9C8Ch-820D9CB0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D9CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9CB0);
		  /* 820D9CB0h */ case    0:  		/* cmplw CR6, R30, R10 */
		/* 820D9CB0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 820D9CB0h case    0:*/		return 0x820D9CB4;
		  /* 820D9CB4h */ case    1:  		/* bc 12, CR6_EQ, 72 */
		/* 820D9CB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820D9CFC;  }
		/* 820D9CB4h case    1:*/		return 0x820D9CB8;
		  /* 820D9CB8h */ case    2:  		/* lis R4, 9345 */
		/* 820D9CB8h case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820D9CB8h case    2:*/		return 0x820D9CBC;
		  /* 820D9CBCh */ case    3:  		/* mr R3, R30 */
		/* 820D9CBCh case    3:*/		regs.R3 = regs.R30;
		/* 820D9CBCh case    3:*/		return 0x820D9CC0;
		  /* 820D9CC0h */ case    4:  		/* bl -334528 */
		/* 820D9CC0h case    4:*/		regs.LR = 0x820D9CC4; return 0x82088200;
		/* 820D9CC0h case    4:*/		return 0x820D9CC4;
		  /* 820D9CC4h */ case    5:  		/* or. R29, R3, R3 */
		/* 820D9CC4h case    5:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820D9CC4h case    5:*/		return 0x820D9CC8;
		  /* 820D9CC8h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 820D9CC8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x820D9CD8;  }
		/* 820D9CC8h case    6:*/		return 0x820D9CCC;
		  /* 820D9CCCh */ case    7:  		/* lis R3, -32761 */
		/* 820D9CCCh case    7:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820D9CCCh case    7:*/		return 0x820D9CD0;
		  /* 820D9CD0h */ case    8:  		/* ori R3, R3, 14 */
		/* 820D9CD0h case    8:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820D9CD0h case    8:*/		return 0x820D9CD4;
		  /* 820D9CD4h */ case    9:  		/* b 44 */
		/* 820D9CD4h case    9:*/		return 0x820D9D00;
		/* 820D9CD4h case    9:*/		return 0x820D9CD8;
	}
	return 0x820D9CD8;
} // Block from 820D9CB0h-820D9CD8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D9CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9CD8);
		  /* 820D9CD8h */ case    0:  		/* mr R3, R29 */
		/* 820D9CD8h case    0:*/		regs.R3 = regs.R29;
		/* 820D9CD8h case    0:*/		return 0x820D9CDC;
		  /* 820D9CDCh */ case    1:  		/* lwz R5, <#[R31 + 1536]> */
		/* 820D9CDCh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000600) );
		/* 820D9CDCh case    1:*/		return 0x820D9CE0;
		  /* 820D9CE0h */ case    2:  		/* lwz R4, <#[R31 + 1532]> */
		/* 820D9CE0h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000005FC) );
		/* 820D9CE0h case    2:*/		return 0x820D9CE4;
		  /* 820D9CE4h */ case    3:  		/* bl -295732 */
		/* 820D9CE4h case    3:*/		regs.LR = 0x820D9CE8; return 0x820919B0;
		/* 820D9CE4h case    3:*/		return 0x820D9CE8;
		  /* 820D9CE8h */ case    4:  		/* lis R4, 9345 */
		/* 820D9CE8h case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820D9CE8h case    4:*/		return 0x820D9CEC;
		  /* 820D9CECh */ case    5:  		/* lwz R3, <#[R31 + 1532]> */
		/* 820D9CECh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005FC) );
		/* 820D9CECh case    5:*/		return 0x820D9CF0;
		  /* 820D9CF0h */ case    6:  		/* bl -334264 */
		/* 820D9CF0h case    6:*/		regs.LR = 0x820D9CF4; return 0x82088338;
		/* 820D9CF0h case    6:*/		return 0x820D9CF4;
		  /* 820D9CF4h */ case    7:  		/* stw R29, <#[R31 + 1532]> */
		/* 820D9CF4h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x000005FC) );
		/* 820D9CF4h case    7:*/		return 0x820D9CF8;
		  /* 820D9CF8h */ case    8:  		/* stw R30, <#[R31 + 1540]> */
		/* 820D9CF8h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000604) );
		/* 820D9CF8h case    8:*/		return 0x820D9CFC;
	}
	return 0x820D9CFC;
} // Block from 820D9CD8h-820D9CFCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D9CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9CFC);
		  /* 820D9CFCh */ case    0:  		/* li R3, 0 */
		/* 820D9CFCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D9CFCh case    0:*/		return 0x820D9D00;
	}
	return 0x820D9D00;
} // Block from 820D9CFCh-820D9D00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D9D00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9D00);
		  /* 820D9D00h */ case    0:  		/* addi R1, R1, 112 */
		/* 820D9D00h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820D9D00h case    0:*/		return 0x820D9D04;
		  /* 820D9D04h */ case    1:  		/* b -297560 */
		/* 820D9D04h case    1:*/		return 0x820912AC;
		/* 820D9D04h case    1:*/		return 0x820D9D08;
	}
	return 0x820D9D08;
} // Block from 820D9D00h-820D9D08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D9D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9D08);
		  /* 820D9D08h */ case    0:  		/* mfspr R12, LR */
		/* 820D9D08h case    0:*/		regs.R12 = regs.LR;
		/* 820D9D08h case    0:*/		return 0x820D9D0C;
		  /* 820D9D0Ch */ case    1:  		/* bl -297680 */
		/* 820D9D0Ch case    1:*/		regs.LR = 0x820D9D10; return 0x8209123C;
		/* 820D9D0Ch case    1:*/		return 0x820D9D10;
		  /* 820D9D10h */ case    2:  		/* stwu R1, <#[R1 - 336]> */
		/* 820D9D10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEB0);
		/* 820D9D10h case    2:*/		return 0x820D9D14;
		  /* 820D9D14h */ case    3:  		/* mr R30, R3 */
		/* 820D9D14h case    3:*/		regs.R30 = regs.R3;
		/* 820D9D14h case    3:*/		return 0x820D9D18;
		  /* 820D9D18h */ case    4:  		/* mr R25, R4 */
		/* 820D9D18h case    4:*/		regs.R25 = regs.R4;
		/* 820D9D18h case    4:*/		return 0x820D9D1C;
		  /* 820D9D1Ch */ case    5:  		/* mr R21, R5 */
		/* 820D9D1Ch case    5:*/		regs.R21 = regs.R5;
		/* 820D9D1Ch case    5:*/		return 0x820D9D20;
		  /* 820D9D20h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 820D9D20h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 820D9D20h case    6:*/		return 0x820D9D24;
		  /* 820D9D24h */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 820D9D24h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820D9D30;  }
		/* 820D9D24h case    7:*/		return 0x820D9D28;
		  /* 820D9D28h */ case    8:  		/* li R3, 1 */
		/* 820D9D28h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820D9D28h case    8:*/		return 0x820D9D2C;
		  /* 820D9D2Ch */ case    9:  		/* b 692 */
		/* 820D9D2Ch case    9:*/		return 0x820D9FE0;
		/* 820D9D2Ch case    9:*/		return 0x820D9D30;
	}
	return 0x820D9D30;
} // Block from 820D9D08h-820D9D30h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D9D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9D30);
		  /* 820D9D30h */ case    0:  		/* lwz R10, <#[R25]> */
		/* 820D9D30h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 820D9D30h case    0:*/		return 0x820D9D34;
		  /* 820D9D34h */ case    1:  		/* rlwinm. R11, R10, 0, 0, 11 */
		/* 820D9D34h case    1:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R10);
		/* 820D9D34h case    1:*/		return 0x820D9D38;
	}
	return 0x820D9D38;
} // Block from 820D9D30h-820D9D38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D9D38h
// Function '?EmitBeginExportLoop@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9D38);
		  /* 820D9D38h */ case    0:  		/* bc 12, CR0_EQ, 676 */
		/* 820D9D38h case    0:*/		if ( regs.CR[0].eq ) { return 0x820D9FDC;  }
		/* 820D9D38h case    0:*/		return 0x820D9D3C;
		  /* 820D9D3Ch */ case    1:  		/* lis R9, 8304 */
		/* 820D9D3Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0x2070);
		/* 820D9D3Ch case    1:*/		return 0x820D9D40;
		  /* 820D9D40h */ case    2:  		/* cmplw CR6, R11, R9 */
		/* 820D9D40h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820D9D40h case    2:*/		return 0x820D9D44;
		  /* 820D9D44h */ case    3:  		/* bc 12, CR6_EQ, 664 */
		/* 820D9D44h case    3:*/		if ( regs.CR[6].eq ) { return 0x820D9FDC;  }
		/* 820D9D44h case    3:*/		return 0x820D9D48;
	}
	return 0x820D9D48;
} // Block from 820D9D38h-820D9D48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9D48h
// Function '?EmitEndFetchLoop@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9D48);
		  /* 820D9D48h */ case    0:  		/* rlwinm R22, R10, 0, 12, 31 */
		/* 820D9D48h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R22,regs.R10);
		/* 820D9D48h case    0:*/		return 0x820D9D4C;
		  /* 820D9D4Ch */ case    1:  		/* lwz R9, <#[R25 + 4]> */
		/* 820D9D4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000004) );
		/* 820D9D4Ch case    1:*/		return 0x820D9D50;
		  /* 820D9D50h */ case    2:  		/* lis R10, 28752 */
		/* 820D9D50h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0x7050);
		/* 820D9D50h case    2:*/		return 0x820D9D54;
		  /* 820D9D54h */ case    3:  		/* divwu R24, R9, R22 */
		/* 820D9D54h case    3:*/		cpu::op::divwu<0>(regs,&regs.R24,regs.R9,regs.R22);
		/* 820D9D54h case    3:*/		return 0x820D9D58;
	}
	return 0x820D9D58;
} // Block from 820D9D48h-820D9D58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9D58h
// Function '?EmitDCL@C30SWProgram@D3DXShader@@MAAJPAVCArgument@2@PAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9D58);
		  /* 820D9D58h */ case    0:  		/* twi 6, R22, 0 */
		/* 820D9D58h case    0:*/		cpu::op::tw<6>(regs, 0x820D9D58, regs.R22, 0x00000000);
		/* 820D9D58h case    0:*/		return 0x820D9D5C;
		  /* 820D9D5Ch */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820D9D5Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9D5Ch case    1:*/		return 0x820D9D60;
		  /* 820D9D60h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 820D9D60h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D9D7C;  }
		/* 820D9D60h case    2:*/		return 0x820D9D64;
		  /* 820D9D64h */ case    3:  		/* lis R10, 28768 */
		/* 820D9D64h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7060);
		/* 820D9D64h case    3:*/		return 0x820D9D68;
		  /* 820D9D68h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820D9D68h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9D68h case    4:*/		return 0x820D9D6C;
		  /* 820D9D6Ch */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 820D9D6Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x820D9D7C;  }
		/* 820D9D6Ch case    5:*/		return 0x820D9D70;
		  /* 820D9D70h */ case    6:  		/* lis R10, 28784 */
		/* 820D9D70h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7070);
		/* 820D9D70h case    6:*/		return 0x820D9D74;
		  /* 820D9D74h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D9D74h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9D74h case    7:*/		return 0x820D9D78;
		  /* 820D9D78h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 820D9D78h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820D9D80;  }
		/* 820D9D78h case    8:*/		return 0x820D9D7C;
	}
	return 0x820D9D7C;
} // Block from 820D9D58h-820D9D7Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820D9D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9D7C);
		  /* 820D9D7Ch */ case    0:  		/* li R24, 2 */
		/* 820D9D7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x2);
		/* 820D9D7Ch case    0:*/		return 0x820D9D80;
	}
	return 0x820D9D80;
} // Block from 820D9D7Ch-820D9D80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D9D80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9D80);
		  /* 820D9D80h */ case    0:  		/* cmplwi CR6, R24, 1 */
		/* 820D9D80h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000001);
		/* 820D9D80h case    0:*/		return 0x820D9D84;
		  /* 820D9D84h */ case    1:  		/* bc 4, CR6_GT, 600 */
		/* 820D9D84h case    1:*/		if ( !regs.CR[6].gt ) { return 0x820D9FDC;  }
		/* 820D9D84h case    1:*/		return 0x820D9D88;
		  /* 820D9D88h */ case    2:  		/* lwz R11, <#[R30 + 128]> */
		/* 820D9D88h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000080) );
		/* 820D9D88h case    2:*/		return 0x820D9D8C;
		  /* 820D9D8Ch */ case    3:  		/* addi R10, R1, 80 */
		/* 820D9D8Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 820D9D8Ch case    3:*/		return 0x820D9D90;
		  /* 820D9D90h */ case    4:  		/* lwz R9, <#[R30 + 136]> */
		/* 820D9D90h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000088) );
		/* 820D9D90h case    4:*/		return 0x820D9D94;
		  /* 820D9D94h */ case    5:  		/* addi R5, R1, 80 */
		/* 820D9D94h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 820D9D94h case    5:*/		return 0x820D9D98;
		  /* 820D9D98h */ case    6:  		/* lwz R7, <#[R30 + 124]> */
		/* 820D9D98h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x0000007C) );
		/* 820D9D98h case    6:*/		return 0x820D9D9C;
		  /* 820D9D9Ch */ case    7:  		/* rlwinm R6, R11, 2, 0, 29 */
		/* 820D9D9Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R11);
		/* 820D9D9Ch case    7:*/		return 0x820D9DA0;
		  /* 820D9DA0h */ case    8:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820D9DA0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820D9DA0h case    8:*/		return 0x820D9DA4;
		  /* 820D9DA4h */ case    9:  		/* lwz R11, <#[R30 + 148]> */
		/* 820D9DA4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000094) );
		/* 820D9DA4h case    9:*/		return 0x820D9DA8;
	}
	return 0x820D9DA8;
} // Block from 820D9D80h-820D9DA8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D9DA8h
// Function '?SrcSwizzle@C30SWProgram@D3DXShader@@MAAJPAIIKPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9DA8);
		  /* 820D9DA8h */ case    0:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820D9DA8h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820D9DA8h case    0:*/		return 0x820D9DAC;
		  /* 820D9DACh */ case    1:  		/* addi R3, R1, 80 */
		/* 820D9DACh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 820D9DACh case    1:*/		return 0x820D9DB0;
		  /* 820D9DB0h */ case    2:  		/* li R31, 0 */
		/* 820D9DB0h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820D9DB0h case    2:*/		return 0x820D9DB4;
		  /* 820D9DB4h */ case    3:  		/* addi R8, R1, 160 */
		/* 820D9DB4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 820D9DB4h case    3:*/		return 0x820D9DB8;
		  /* 820D9DB8h */ case    4:  		/* stwx R31, <#[R6 + R10]> */
		/* 820D9DB8h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 820D9DB8h case    4:*/		return 0x820D9DBC;
		  /* 820D9DBCh */ case    5:  		/* addi R4, R1, 160 */
		/* 820D9DBCh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820D9DBCh case    5:*/		return 0x820D9DC0;
		  /* 820D9DC0h */ case    6:  		/* rlwinm R29, R11, 2, 0, 29 */
		/* 820D9DC0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R11);
		/* 820D9DC0h case    6:*/		return 0x820D9DC4;
		  /* 820D9DC4h */ case    7:  		/* stwx R31, <#[R9 + R5]> */
		/* 820D9DC4h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R9 + regs.R5 + 0x00000000) );
		/* 820D9DC4h case    7:*/		return 0x820D9DC8;
		  /* 820D9DC8h */ case    8:  		/* addi R28, R1, 160 */
		/* 820D9DC8h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0xA0);
		/* 820D9DC8h case    8:*/		return 0x820D9DCC;
		  /* 820D9DCCh */ case    9:  		/* stwx R31, <#[R7 + R3]> */
		/* 820D9DCCh case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 820D9DCCh case    9:*/		return 0x820D9DD0;
		  /* 820D9DD0h */ case   10:  		/* li R11, 1 */
		/* 820D9DD0h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820D9DD0h case   10:*/		return 0x820D9DD4;
		  /* 820D9DD4h */ case   11:  		/* addi R10, R1, 80 */
		/* 820D9DD4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 820D9DD4h case   11:*/		return 0x820D9DD8;
		  /* 820D9DD8h */ case   12:  		/* addi R5, R1, 160 */
		/* 820D9DD8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820D9DD8h case   12:*/		return 0x820D9DDC;
		  /* 820D9DDCh */ case   13:  		/* stwx R11, <#[R6 + R8]> */
		/* 820D9DDCh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + regs.R8 + 0x00000000) );
		/* 820D9DDCh case   13:*/		return 0x820D9DE0;
		  /* 820D9DE0h */ case   14:  		/* li R3, 3 */
		/* 820D9DE0h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 820D9DE0h case   14:*/		return 0x820D9DE4;
		  /* 820D9DE4h */ case   15:  		/* mr R23, R31 */
		/* 820D9DE4h case   15:*/		regs.R23 = regs.R31;
		/* 820D9DE4h case   15:*/		return 0x820D9DE8;
		  /* 820D9DE8h */ case   16:  		/* stwx R3, <#[R9 + R4]> */
		/* 820D9DE8h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 820D9DE8h case   16:*/		return 0x820D9DEC;
		  /* 820D9DECh */ case   17:  		/* cmplwi CR6, R24, 0 */
		/* 820D9DECh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820D9DECh case   17:*/		return 0x820D9DF0;
		  /* 820D9DF0h */ case   18:  		/* stwx R11, <#[R7 + R28]> */
		/* 820D9DF0h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + regs.R28 + 0x00000000) );
		/* 820D9DF0h case   18:*/		return 0x820D9DF4;
		  /* 820D9DF4h */ case   19:  		/* mr R27, R31 */
		/* 820D9DF4h case   19:*/		regs.R27 = regs.R31;
		/* 820D9DF4h case   19:*/		return 0x820D9DF8;
		  /* 820D9DF8h */ case   20:  		/* stwx R31, <#[R29 + R10]> */
		/* 820D9DF8h case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + regs.R10 + 0x00000000) );
		/* 820D9DF8h case   20:*/		return 0x820D9DFC;
		  /* 820D9DFCh */ case   21:  		/* stwx R11, <#[R29 + R5]> */
		/* 820D9DFCh case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + regs.R5 + 0x00000000) );
		/* 820D9DFCh case   21:*/		return 0x820D9E00;
		  /* 820D9E00h */ case   22:  		/* bc 12, CR6_EQ, 356 */
		/* 820D9E00h case   22:*/		if ( regs.CR[6].eq ) { return 0x820D9F64;  }
		/* 820D9E00h case   22:*/		return 0x820D9E04;
		  /* 820D9E04h */ case   23:  		/* rlwinm R26, R22, 2, 0, 29 */
		/* 820D9E04h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R22);
		/* 820D9E04h case   23:*/		return 0x820D9E08;
		  /* 820D9E08h */ case   24:  		/* mr R28, R31 */
		/* 820D9E08h case   24:*/		regs.R28 = regs.R31;
		/* 820D9E08h case   24:*/		return 0x820D9E0C;
		  /* 820D9E0Ch */ case   25:  		/* lwz R11, <#[R25 + 8]> */
		/* 820D9E0Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 820D9E0Ch case   25:*/		return 0x820D9E10;
		  /* 820D9E10h */ case   26:  		/* lwz R10, <#[R30 + 20]> */
		/* 820D9E10h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 820D9E10h case   26:*/		return 0x820D9E14;
		  /* 820D9E14h */ case   27:  		/* lwz R9, <#[R30 + 16]> */
		/* 820D9E14h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 820D9E14h case   27:*/		return 0x820D9E18;
		  /* 820D9E18h */ case   28:  		/* lwzx R11, <#[R28 + R11]> */
		/* 820D9E18h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 820D9E18h case   28:*/		return 0x820D9E1C;
		  /* 820D9E1Ch */ case   29:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D9E1Ch case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D9E1Ch case   29:*/		return 0x820D9E20;
		  /* 820D9E20h */ case   30:  		/* lwzx R29, <#[R11 + R10]> */
		/* 820D9E20h case   30:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820D9E20h case   30:*/		return 0x820D9E24;
		  /* 820D9E24h */ case   31:  		/* lwz R11, <#[R29 + 4]> */
		/* 820D9E24h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 820D9E24h case   31:*/		return 0x820D9E28;
	}
	return 0x820D9E28;
} // Block from 820D9DA8h-820D9E28h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820D9E28h
// Function '?DestRegister@C30SWProgram@D3DXShader@@MAAJPAVCArgument@2@PAK1PAH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9E28);
		  /* 820D9E28h */ case    0:  		/* lwz R4, <#[R29 + 108]> */
		/* 820D9E28h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000006C) );
		/* 820D9E28h case    0:*/		return 0x820D9E2C;
		  /* 820D9E2Ch */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D9E2Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D9E2Ch case    1:*/		return 0x820D9E30;
		  /* 820D9E30h */ case    2:  		/* cmplwi CR6, R4, 17 */
		/* 820D9E30h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000011);
		/* 820D9E30h case    2:*/		return 0x820D9E34;
		  /* 820D9E34h */ case    3:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820D9E34h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820D9E34h case    3:*/		return 0x820D9E38;
		  /* 820D9E38h */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 820D9E38h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820D9E48;  }
		/* 820D9E38h case    4:*/		return 0x820D9E3C;
		  /* 820D9E3Ch */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 820D9E3Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820D9E3Ch case    5:*/		return 0x820D9E40;
		  /* 820D9E40h */ case    6:  		/* rlwinm. R10, R10, 0, 27, 27 */
		/* 820D9E40h case    6:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R10);
		/* 820D9E40h case    6:*/		return 0x820D9E44;
		  /* 820D9E44h */ case    7:  		/* bc 4, CR0_EQ, 272 */
		/* 820D9E44h case    7:*/		if ( !regs.CR[0].eq ) { return 0x820D9F54;  }
		/* 820D9E44h case    7:*/		return 0x820D9E48;
	}
	return 0x820D9E48;
} // Block from 820D9E28h-820D9E48h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820D9E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9E48);
		  /* 820D9E48h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 820D9E48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820D9E48h case    0:*/		return 0x820D9E4C;
		  /* 820D9E4Ch */ case    1:  		/* rlwinm. R10, R11, 0, 22, 22 */
		/* 820D9E4Ch case    1:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R10,regs.R11);
		/* 820D9E4Ch case    1:*/		return 0x820D9E50;
		  /* 820D9E50h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 820D9E50h case    2:*/		if ( regs.CR[0].eq ) { return 0x820D9E64;  }
		/* 820D9E50h case    2:*/		return 0x820D9E54;
		  /* 820D9E54h */ case    3:  		/* rlwinm. R9, R11, 0, 24, 24 */
		/* 820D9E54h case    3:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R9,regs.R11);
		/* 820D9E54h case    3:*/		return 0x820D9E58;
		  /* 820D9E58h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 820D9E58h case    4:*/		if ( !regs.CR[0].eq ) { return 0x820D9E64;  }
		/* 820D9E58h case    4:*/		return 0x820D9E5C;
		  /* 820D9E5Ch */ case    5:  		/* lwz R5, <#[R30 + 124]> */
		/* 820D9E5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000007C) );
		/* 820D9E5Ch case    5:*/		return 0x820D9E60;
		  /* 820D9E60h */ case    6:  		/* b 76 */
		/* 820D9E60h case    6:*/		return 0x820D9EAC;
		/* 820D9E60h case    6:*/		return 0x820D9E64;
	}
	return 0x820D9E64;
} // Block from 820D9E48h-820D9E64h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820D9E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9E64);
		  /* 820D9E64h */ case    0:  		/* rlwinm. R9, R11, 0, 24, 24 */
		/* 820D9E64h case    0:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R9,regs.R11);
		/* 820D9E64h case    0:*/		return 0x820D9E68;
		  /* 820D9E68h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 820D9E68h case    1:*/		if ( regs.CR[0].eq ) { return 0x820D9E74;  }
		/* 820D9E68h case    1:*/		return 0x820D9E6C;
		  /* 820D9E6Ch */ case    2:  		/* lwz R5, <#[R30 + 148]> */
		/* 820D9E6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000094) );
		/* 820D9E6Ch case    2:*/		return 0x820D9E70;
		  /* 820D9E70h */ case    3:  		/* b 60 */
		/* 820D9E70h case    3:*/		return 0x820D9EAC;
		/* 820D9E70h case    3:*/		return 0x820D9E74;
	}
	return 0x820D9E74;
} // Block from 820D9E64h-820D9E74h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9E74);
		  /* 820D9E74h */ case    0:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 820D9E74h case    0:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 820D9E74h case    0:*/		return 0x820D9E78;
		  /* 820D9E78h */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 820D9E78h case    1:*/		if ( regs.CR[0].eq ) { return 0x820D9EA8;  }
		/* 820D9E78h case    1:*/		return 0x820D9E7C;
		  /* 820D9E7Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 820D9E7Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820D9E7Ch case    2:*/		return 0x820D9E80;
	}
	return 0x820D9E80;
} // Block from 820D9E74h-820D9E80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820D9E80h
// Function '?DestMask@C30SWProgram@D3DXShader@@MAAJPAIIPAKH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9E80);
		  /* 820D9E80h */ case    0:  		/* bc 4, CR6_EQ, 40 */
		/* 820D9E80h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820D9EA8;  }
		/* 820D9E80h case    0:*/		return 0x820D9E84;
		  /* 820D9E84h */ case    1:  		/* lwz R11, <#[R30]> */
		/* 820D9E84h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820D9E84h case    1:*/		return 0x820D9E88;
		  /* 820D9E88h */ case    2:  		/* mr R3, R30 */
		/* 820D9E88h case    2:*/		regs.R3 = regs.R30;
		/* 820D9E88h case    2:*/		return 0x820D9E8C;
		  /* 820D9E8Ch */ case    3:  		/* lwz R11, <#[R11 + 112]> */
		/* 820D9E8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 820D9E8Ch case    3:*/		return 0x820D9E90;
		  /* 820D9E90h */ case    4:  		/* mtspr CTR, R11 */
		/* 820D9E90h case    4:*/		regs.CTR = regs.R11;
		/* 820D9E90h case    4:*/		return 0x820D9E94;
		  /* 820D9E94h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 820D9E94h case    5:*/		if ( 1 ) { regs.LR = 0x820D9E98; return (uint32)regs.CTR; }
		/* 820D9E94h case    5:*/		return 0x820D9E98;
		  /* 820D9E98h */ case    6:  		/* cmplwi CR6, R3, 65535 */
		/* 820D9E98h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000FFFF);
		/* 820D9E98h case    6:*/		return 0x820D9E9C;
		  /* 820D9E9Ch */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 820D9E9Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x820D9EA8;  }
		/* 820D9E9Ch case    7:*/		return 0x820D9EA0;
		  /* 820D9EA0h */ case    8:  		/* lwz R5, <#[R30 + 128]> */
		/* 820D9EA0h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000080) );
		/* 820D9EA0h case    8:*/		return 0x820D9EA4;
		  /* 820D9EA4h */ case    9:  		/* b 8 */
		/* 820D9EA4h case    9:*/		return 0x820D9EAC;
		/* 820D9EA4h case    9:*/		return 0x820D9EA8;
	}
	return 0x820D9EA8;
} // Block from 820D9E80h-820D9EA8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820D9EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9EA8);
		  /* 820D9EA8h */ case    0:  		/* lwz R5, <#[R30 + 136]> */
		/* 820D9EA8h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000088) );
		/* 820D9EA8h case    0:*/		return 0x820D9EAC;
	}
	return 0x820D9EAC;
} // Block from 820D9EA8h-820D9EACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D9EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9EAC);
		  /* 820D9EACh */ case    0:  		/* mr R6, R31 */
		/* 820D9EACh case    0:*/		regs.R6 = regs.R31;
		/* 820D9EACh case    0:*/		return 0x820D9EB0;
		  /* 820D9EB0h */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 820D9EB0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820D9EB0h case    1:*/		return 0x820D9EB4;
		  /* 820D9EB4h */ case    2:  		/* bc 12, CR6_EQ, 92 */
		/* 820D9EB4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820D9F10;  }
		/* 820D9EB4h case    2:*/		return 0x820D9EB8;
		  /* 820D9EB8h */ case    3:  		/* lwz R9, <#[R25 + 8]> */
		/* 820D9EB8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000008) );
		/* 820D9EB8h case    3:*/		return 0x820D9EBC;
		  /* 820D9EBCh */ case    4:  		/* mr R11, R31 */
		/* 820D9EBCh case    4:*/		regs.R11 = regs.R31;
		/* 820D9EBCh case    4:*/		return 0x820D9EC0;
		  /* 820D9EC0h */ case    5:  		/* lwz R8, <#[R30 + 20]> */
		/* 820D9EC0h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 820D9EC0h case    5:*/		return 0x820D9EC4;
		  /* 820D9EC4h */ case    6:  		/* lwz R7, <#[R29 + 4]> */
		/* 820D9EC4h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000004) );
		/* 820D9EC4h case    6:*/		return 0x820D9EC8;
		  /* 820D9EC8h */ case    7:  		/* lwzx R10, <#[R11 + R9]> */
		/* 820D9EC8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820D9EC8h case    7:*/		return 0x820D9ECC;
		  /* 820D9ECCh */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820D9ECCh case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820D9ECCh case    8:*/		return 0x820D9ED0;
		  /* 820D9ED0h */ case    9:  		/* lwzx R10, <#[R10 + R8]> */
		/* 820D9ED0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820D9ED0h case    9:*/		return 0x820D9ED4;
		  /* 820D9ED4h */ case   10:  		/* lwz R4, <#[R10 + 4]> */
		/* 820D9ED4h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000004) );
		/* 820D9ED4h case   10:*/		return 0x820D9ED8;
		  /* 820D9ED8h */ case   11:  		/* cmplw CR6, R7, R4 */
		/* 820D9ED8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R4);
		/* 820D9ED8h case   11:*/		return 0x820D9EDC;
		  /* 820D9EDCh */ case   12:  		/* bc 4, CR6_EQ, 36 */
		/* 820D9EDCh case   12:*/		if ( !regs.CR[6].eq ) { return 0x820D9F00;  }
		/* 820D9EDCh case   12:*/		return 0x820D9EE0;
		  /* 820D9EE0h */ case   13:  		/* lwz R4, <#[R29 + 8]> */
		/* 820D9EE0h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000008) );
		/* 820D9EE0h case   13:*/		return 0x820D9EE4;
		  /* 820D9EE4h */ case   14:  		/* lwz R3, <#[R10 + 8]> */
		/* 820D9EE4h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000008) );
		/* 820D9EE4h case   14:*/		return 0x820D9EE8;
		  /* 820D9EE8h */ case   15:  		/* cmplw CR6, R4, R3 */
		/* 820D9EE8h case   15:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 820D9EE8h case   15:*/		return 0x820D9EEC;
		  /* 820D9EECh */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 820D9EECh case   16:*/		if ( !regs.CR[6].eq ) { return 0x820D9F00;  }
		/* 820D9EECh case   16:*/		return 0x820D9EF0;
		  /* 820D9EF0h */ case   17:  		/* lwz R4, <#[R29 + 12]> */
		/* 820D9EF0h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000000C) );
		/* 820D9EF0h case   17:*/		return 0x820D9EF4;
		  /* 820D9EF4h */ case   18:  		/* lwz R10, <#[R10 + 12]> */
		/* 820D9EF4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 820D9EF4h case   18:*/		return 0x820D9EF8;
		  /* 820D9EF8h */ case   19:  		/* cmplw CR6, R4, R10 */
		/* 820D9EF8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 820D9EF8h case   19:*/		return 0x820D9EFC;
		  /* 820D9EFCh */ case   20:  		/* bc 12, CR6_EQ, 20 */
		/* 820D9EFCh case   20:*/		if ( regs.CR[6].eq ) { return 0x820D9F10;  }
		/* 820D9EFCh case   20:*/		return 0x820D9F00;
	}
	return 0x820D9F00;
} // Block from 820D9EACh-820D9F00h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820D9F00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9F00);
		  /* 820D9F00h */ case    0:  		/* addi R6, R6, 1 */
		/* 820D9F00h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820D9F00h case    0:*/		return 0x820D9F04;
		  /* 820D9F04h */ case    1:  		/* add R11, R26, R11 */
		/* 820D9F04h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 820D9F04h case    1:*/		return 0x820D9F08;
		  /* 820D9F08h */ case    2:  		/* cmplw CR6, R6, R27 */
		/* 820D9F08h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R27);
		/* 820D9F08h case    2:*/		return 0x820D9F0C;
		  /* 820D9F0Ch */ case    3:  		/* bc 12, CR6_LT, -68 */
		/* 820D9F0Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x820D9EC8;  }
		/* 820D9F0Ch case    3:*/		return 0x820D9F10;
	}
	return 0x820D9F10;
} // Block from 820D9F00h-820D9F10h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9F10);
		  /* 820D9F10h */ case    0:  		/* cmplw CR6, R6, R27 */
		/* 820D9F10h case    0:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R27);
		/* 820D9F10h case    0:*/		return 0x820D9F14;
		  /* 820D9F14h */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 820D9F14h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820D9F3C;  }
		/* 820D9F14h case    1:*/		return 0x820D9F18;
		  /* 820D9F18h */ case    2:  		/* rlwinm R11, R5, 2, 0, 29 */
		/* 820D9F18h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R5);
		/* 820D9F18h case    2:*/		return 0x820D9F1C;
		  /* 820D9F1Ch */ case    3:  		/* addi R9, R1, 80 */
		/* 820D9F1Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 820D9F1Ch case    3:*/		return 0x820D9F20;
		  /* 820D9F20h */ case    4:  		/* addi R8, R1, 160 */
		/* 820D9F20h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 820D9F20h case    4:*/		return 0x820D9F24;
		  /* 820D9F24h */ case    5:  		/* lwzx R10, <#[R11 + R9]> */
		/* 820D9F24h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820D9F24h case    5:*/		return 0x820D9F28;
		  /* 820D9F28h */ case    6:  		/* lwzx R8, <#[R11 + R8]> */
		/* 820D9F28h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 820D9F28h case    6:*/		return 0x820D9F2C;
		  /* 820D9F2Ch */ case    7:  		/* addi R10, R10, 1 */
		/* 820D9F2Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820D9F2Ch case    7:*/		return 0x820D9F30;
		  /* 820D9F30h */ case    8:  		/* stwx R10, <#[R11 + R9]> */
		/* 820D9F30h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820D9F30h case    8:*/		return 0x820D9F34;
		  /* 820D9F34h */ case    9:  		/* cmplw CR6, R10, R8 */
		/* 820D9F34h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820D9F34h case    9:*/		return 0x820D9F38;
		  /* 820D9F38h */ case   10:  		/* bc 12, CR6_GT, 176 */
		/* 820D9F38h case   10:*/		if ( regs.CR[6].gt ) { return 0x820D9FE8;  }
		/* 820D9F38h case   10:*/		return 0x820D9F3C;
	}
	return 0x820D9F3C;
} // Block from 820D9F10h-820D9F3Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820D9F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9F3C);
		  /* 820D9F3Ch */ case    0:  		/* lwz R11, <#[R30 + 124]> */
		/* 820D9F3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000007C) );
		/* 820D9F3Ch case    0:*/		return 0x820D9F40;
		  /* 820D9F40h */ case    1:  		/* cmplw CR6, R11, R5 */
		/* 820D9F40h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820D9F40h case    1:*/		return 0x820D9F44;
		  /* 820D9F44h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 820D9F44h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820D9F54;  }
		/* 820D9F44h case    2:*/		return 0x820D9F48;
		  /* 820D9F48h */ case    3:  		/* addi R23, R23, 1 */
		/* 820D9F48h case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 820D9F48h case    3:*/		return 0x820D9F4C;
		  /* 820D9F4Ch */ case    4:  		/* cmplwi CR6, R23, 2 */
		/* 820D9F4Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000002);
		/* 820D9F4Ch case    4:*/		return 0x820D9F50;
		  /* 820D9F50h */ case    5:  		/* bc 12, CR6_GT, 152 */
		/* 820D9F50h case    5:*/		if ( regs.CR[6].gt ) { return 0x820D9FE8;  }
		/* 820D9F50h case    5:*/		return 0x820D9F54;
	}
	return 0x820D9F54;
} // Block from 820D9F3Ch-820D9F54h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820D9F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9F54);
		  /* 820D9F54h */ case    0:  		/* addi R27, R27, 1 */
		/* 820D9F54h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 820D9F54h case    0:*/		return 0x820D9F58;
		  /* 820D9F58h */ case    1:  		/* add R28, R26, R28 */
		/* 820D9F58h case    1:*/		cpu::op::add<0>(regs,&regs.R28,regs.R26,regs.R28);
		/* 820D9F58h case    1:*/		return 0x820D9F5C;
		  /* 820D9F5Ch */ case    2:  		/* cmplw CR6, R27, R24 */
		/* 820D9F5Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R24);
		/* 820D9F5Ch case    2:*/		return 0x820D9F60;
		  /* 820D9F60h */ case    3:  		/* bc 12, CR6_LT, -340 */
		/* 820D9F60h case    3:*/		if ( regs.CR[6].lt ) { return 0x820D9E0C;  }
		/* 820D9F60h case    3:*/		return 0x820D9F64;
	}
	return 0x820D9F64;
} // Block from 820D9F54h-820D9F64h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9F64);
		  /* 820D9F64h */ case    0:  		/* mr R28, R31 */
		/* 820D9F64h case    0:*/		regs.R28 = regs.R31;
		/* 820D9F64h case    0:*/		return 0x820D9F68;
		  /* 820D9F68h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 820D9F68h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820D9F68h case    1:*/		return 0x820D9F6C;
		  /* 820D9F6Ch */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 820D9F6Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820D9FDC;  }
		/* 820D9F6Ch case    2:*/		return 0x820D9F70;
		  /* 820D9F70h */ case    3:  		/* rlwinm R27, R22, 2, 0, 29 */
		/* 820D9F70h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R22);
		/* 820D9F70h case    3:*/		return 0x820D9F74;
		  /* 820D9F74h */ case    4:  		/* lwz R11, <#[R25]> */
		/* 820D9F74h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 820D9F74h case    4:*/		return 0x820D9F78;
		  /* 820D9F78h */ case    5:  		/* lis R10, 24576 */
		/* 820D9F78h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x6000);
		/* 820D9F78h case    5:*/		return 0x820D9F7C;
		  /* 820D9F7Ch */ case    6:  		/* rlwinm R11, R11, 0, 0, 3 */
		/* 820D9F7Ch case    6:*/		cpu::op::rlwinm<0,0,0,3>(regs,&regs.R11,regs.R11);
		/* 820D9F7Ch case    6:*/		return 0x820D9F80;
		  /* 820D9F80h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820D9F80h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9F80h case    7:*/		return 0x820D9F84;
		  /* 820D9F84h */ case    8:  		/* bc 4, CR6_EQ, 72 */
		/* 820D9F84h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820D9FCC;  }
		/* 820D9F84h case    8:*/		return 0x820D9F88;
		  /* 820D9F88h */ case    9:  		/* lwz R11, <#[R25 + 8]> */
		/* 820D9F88h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 820D9F88h case    9:*/		return 0x820D9F8C;
		  /* 820D9F8Ch */ case   10:  		/* mr R3, R30 */
		/* 820D9F8Ch case   10:*/		regs.R3 = regs.R30;
		/* 820D9F8Ch case   10:*/		return 0x820D9F90;
		  /* 820D9F90h */ case   11:  		/* lwz R10, <#[R30 + 20]> */
		/* 820D9F90h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 820D9F90h case   11:*/		return 0x820D9F94;
		  /* 820D9F94h */ case   12:  		/* lwz R9, <#[R30]> */
		/* 820D9F94h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 820D9F94h case   12:*/		return 0x820D9F98;
		  /* 820D9F98h */ case   13:  		/* lwzx R11, <#[R11 + R31]> */
		/* 820D9F98h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 820D9F98h case   13:*/		return 0x820D9F9C;
		  /* 820D9F9Ch */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820D9F9Ch case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820D9F9Ch case   14:*/		return 0x820D9FA0;
		  /* 820D9FA0h */ case   15:  		/* lwz R9, <#[R9 + 112]> */
		/* 820D9FA0h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000070) );
		/* 820D9FA0h case   15:*/		return 0x820D9FA4;
		  /* 820D9FA4h */ case   16:  		/* lwzx R29, <#[R11 + R10]> */
		/* 820D9FA4h case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820D9FA4h case   16:*/		return 0x820D9FA8;
		  /* 820D9FA8h */ case   17:  		/* mtspr CTR, R9 */
		/* 820D9FA8h case   17:*/		regs.CTR = regs.R9;
		/* 820D9FA8h case   17:*/		return 0x820D9FAC;
		  /* 820D9FACh */ case   18:  		/* lwz R4, <#[R29 + 108]> */
		/* 820D9FACh case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000006C) );
		/* 820D9FACh case   18:*/		return 0x820D9FB0;
		  /* 820D9FB0h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 820D9FB0h case   19:*/		if ( 1 ) { regs.LR = 0x820D9FB4; return (uint32)regs.CTR; }
		/* 820D9FB0h case   19:*/		return 0x820D9FB4;
		  /* 820D9FB4h */ case   20:  		/* cmplwi CR6, R3, 18 */
		/* 820D9FB4h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000012);
		/* 820D9FB4h case   20:*/		return 0x820D9FB8;
		  /* 820D9FB8h */ case   21:  		/* bc 4, CR6_EQ, 20 */
		/* 820D9FB8h case   21:*/		if ( !regs.CR[6].eq ) { return 0x820D9FCC;  }
		/* 820D9FB8h case   21:*/		return 0x820D9FBC;
		  /* 820D9FBCh */ case   22:  		/* lwz R11, <#[R29 + 4]> */
		/* 820D9FBCh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 820D9FBCh case   22:*/		return 0x820D9FC0;
		  /* 820D9FC0h */ case   23:  		/* lwz R10, <#[R30 + 128]> */
		/* 820D9FC0h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000080) );
		/* 820D9FC0h case   23:*/		return 0x820D9FC4;
		  /* 820D9FC4h */ case   24:  		/* cmplw CR6, R11, R10 */
		/* 820D9FC4h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820D9FC4h case   24:*/		return 0x820D9FC8;
		  /* 820D9FC8h */ case   25:  		/* bc 12, CR6_EQ, 48 */
		/* 820D9FC8h case   25:*/		if ( regs.CR[6].eq ) { return 0x820D9FF8;  }
		/* 820D9FC8h case   25:*/		return 0x820D9FCC;
	}
	return 0x820D9FCC;
} // Block from 820D9F64h-820D9FCCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 820D9FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9FCC);
		  /* 820D9FCCh */ case    0:  		/* addi R28, R28, 1 */
		/* 820D9FCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 820D9FCCh case    0:*/		return 0x820D9FD0;
		  /* 820D9FD0h */ case    1:  		/* add R31, R31, R27 */
		/* 820D9FD0h case    1:*/		cpu::op::add<0>(regs,&regs.R31,regs.R31,regs.R27);
		/* 820D9FD0h case    1:*/		return 0x820D9FD4;
		  /* 820D9FD4h */ case    2:  		/* cmplw CR6, R28, R24 */
		/* 820D9FD4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R24);
		/* 820D9FD4h case    2:*/		return 0x820D9FD8;
		  /* 820D9FD8h */ case    3:  		/* bc 12, CR6_LT, -100 */
		/* 820D9FD8h case    3:*/		if ( regs.CR[6].lt ) { return 0x820D9F74;  }
		/* 820D9FD8h case    3:*/		return 0x820D9FDC;
	}
	return 0x820D9FDC;
} // Block from 820D9FCCh-820D9FDCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9FDC);
		  /* 820D9FDCh */ case    0:  		/* li R3, 0 */
		/* 820D9FDCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820D9FDCh case    0:*/		return 0x820D9FE0;
	}
	return 0x820D9FE0;
} // Block from 820D9FDCh-820D9FE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820D9FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9FE0);
		  /* 820D9FE0h */ case    0:  		/* addi R1, R1, 336 */
		/* 820D9FE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x150);
		/* 820D9FE0h case    0:*/		return 0x820D9FE4;
		  /* 820D9FE4h */ case    1:  		/* b -298328 */
		/* 820D9FE4h case    1:*/		return 0x8209128C;
		/* 820D9FE4h case    1:*/		return 0x820D9FE8;
	}
	return 0x820D9FE8;
} // Block from 820D9FE0h-820D9FE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820D9FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9FE8);
		  /* 820D9FE8h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 820D9FE8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 820D9FE8h case    0:*/		return 0x820D9FEC;
		  /* 820D9FECh */ case    1:  		/* bc 12, CR6_EQ, -708 */
		/* 820D9FECh case    1:*/		if ( regs.CR[6].eq ) { return 0x820D9D28;  }
		/* 820D9FECh case    1:*/		return 0x820D9FF0;
		  /* 820D9FF0h */ case    2:  		/* stw R27, <#[R21]> */
		/* 820D9FF0h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R21 + 0x00000000) );
		/* 820D9FF0h case    2:*/		return 0x820D9FF4;
		  /* 820D9FF4h */ case    3:  		/* b -716 */
		/* 820D9FF4h case    3:*/		return 0x820D9D28;
		/* 820D9FF4h case    3:*/		return 0x820D9FF8;
	}
	return 0x820D9FF8;
} // Block from 820D9FE8h-820D9FF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820D9FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820D9FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820D9FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820D9FF8);
		  /* 820D9FF8h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 820D9FF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 820D9FF8h case    0:*/		return 0x820D9FFC;
		  /* 820D9FFCh */ case    1:  		/* bc 12, CR6_EQ, -724 */
		/* 820D9FFCh case    1:*/		if ( regs.CR[6].eq ) { return 0x820D9D28;  }
		/* 820D9FFCh case    1:*/		return 0x820DA000;
		  /* 820DA000h */ case    2:  		/* stw R28, <#[R21]> */
		/* 820DA000h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R21 + 0x00000000) );
		/* 820DA000h case    2:*/		return 0x820DA004;
		  /* 820DA004h */ case    3:  		/* b -732 */
		/* 820DA004h case    3:*/		return 0x820D9D28;
		/* 820DA004h case    3:*/		return 0x820DA008;
	}
	return 0x820DA008;
} // Block from 820D9FF8h-820DA008h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA008h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA008);
		  /* 820DA008h */ case    0:  		/* mfspr R12, LR */
		/* 820DA008h case    0:*/		regs.R12 = regs.LR;
		/* 820DA008h case    0:*/		return 0x820DA00C;
		  /* 820DA00Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DA00Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DA00Ch case    1:*/		return 0x820DA010;
		  /* 820DA010h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820DA010h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DA010h case    2:*/		return 0x820DA014;
		  /* 820DA014h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820DA014h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DA014h case    3:*/		return 0x820DA018;
		  /* 820DA018h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DA018h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DA018h case    4:*/		return 0x820DA01C;
		  /* 820DA01Ch */ case    5:  		/* mr R31, R3 */
		/* 820DA01Ch case    5:*/		regs.R31 = regs.R3;
		/* 820DA01Ch case    5:*/		return 0x820DA020;
		  /* 820DA020h */ case    6:  		/* mr R30, R6 */
		/* 820DA020h case    6:*/		regs.R30 = regs.R6;
		/* 820DA020h case    6:*/		return 0x820DA024;
		  /* 820DA024h */ case    7:  		/* bl 128004 */
		/* 820DA024h case    7:*/		regs.LR = 0x820DA028; return 0x820F9428;
		/* 820DA024h case    7:*/		return 0x820DA028;
		  /* 820DA028h */ case    8:  		/* lis R10, -32254 */
		/* 820DA028h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DA028h case    8:*/		return 0x820DA02C;
		  /* 820DA02Ch */ case    9:  		/* li R11, 0 */
		/* 820DA02Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820DA02Ch case    9:*/		return 0x820DA030;
		  /* 820DA030h */ case   10:  		/* addi R10, R10, -31528 */
		/* 820DA030h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFF84D8);
		/* 820DA030h case   10:*/		return 0x820DA034;
		  /* 820DA034h */ case   11:  		/* li R9, 12 */
		/* 820DA034h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0xC);
		/* 820DA034h case   11:*/		return 0x820DA038;
		  /* 820DA038h */ case   12:  		/* stw R11, <#[R31 + 1532]> */
		/* 820DA038h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000005FC) );
		/* 820DA038h case   12:*/		return 0x820DA03C;
		  /* 820DA03Ch */ case   13:  		/* stw R10, <#[R31]> */
		/* 820DA03Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820DA03Ch case   13:*/		return 0x820DA040;
		  /* 820DA040h */ case   14:  		/* addi R3, R31, 508 */
		/* 820DA040h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x1FC);
		/* 820DA040h case   14:*/		return 0x820DA044;
		  /* 820DA044h */ case   15:  		/* stw R11, <#[R31 + 1536]> */
		/* 820DA044h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000600) );
		/* 820DA044h case   15:*/		return 0x820DA048;
		  /* 820DA048h */ case   16:  		/* mr R5, R30 */
		/* 820DA048h case   16:*/		regs.R5 = regs.R30;
		/* 820DA048h case   16:*/		return 0x820DA04C;
		  /* 820DA04Ch */ case   17:  		/* stw R11, <#[R31 + 1540]> */
		/* 820DA04Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000604) );
		/* 820DA04Ch case   17:*/		return 0x820DA050;
		  /* 820DA050h */ case   18:  		/* li R4, 1024 */
		/* 820DA050h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x400);
		/* 820DA050h case   18:*/		return 0x820DA054;
		  /* 820DA054h */ case   19:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DA054h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DA054h case   19:*/		return 0x820DA058;
		  /* 820DA058h */ case   20:  		/* stw R11, <#[R31 + 1676]> */
		/* 820DA058h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000068C) );
		/* 820DA058h case   20:*/		return 0x820DA05C;
		  /* 820DA05Ch */ case   21:  		/* stw R9, <#[R31 + 1816]> */
		/* 820DA05Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000718) );
		/* 820DA05Ch case   21:*/		return 0x820DA060;
	}
	return 0x820DA060;
} // Block from 820DA008h-820DA060h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820DA060h
// Function '?ConstrainPortsArgumentTest@C30Program@D3DXShader@@MAAJPAVCInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA060);
		  /* 820DA060h */ case    0:  		/* stw R11, <#[R31 + 1812]> */
		/* 820DA060h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000714) );
		/* 820DA060h case    0:*/		return 0x820DA064;
		  /* 820DA064h */ case    1:  		/* stw R11, <#[R31 + 1808]> */
		/* 820DA064h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000710) );
		/* 820DA064h case    1:*/		return 0x820DA068;
		  /* 820DA068h */ case    2:  		/* bl -211320 */
		/* 820DA068h case    2:*/		regs.LR = 0x820DA06C; return 0x820A66F0;
		/* 820DA068h case    2:*/		return 0x820DA06C;
		  /* 820DA06Ch */ case    3:  		/* mr R3, R31 */
		/* 820DA06Ch case    3:*/		regs.R3 = regs.R31;
		/* 820DA06Ch case    3:*/		return 0x820DA070;
		  /* 820DA070h */ case    4:  		/* addi R1, R1, 112 */
		/* 820DA070h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DA070h case    4:*/		return 0x820DA074;
		  /* 820DA074h */ case    5:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DA074h case    5:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DA074h case    5:*/		return 0x820DA078;
		  /* 820DA078h */ case    6:  		/* mtspr LR, R12 */
		/* 820DA078h case    6:*/		regs.LR = regs.R12;
		/* 820DA078h case    6:*/		return 0x820DA07C;
		  /* 820DA07Ch */ case    7:  		/* ld R30, <#[R1 - 24]> */
		/* 820DA07Ch case    7:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DA07Ch case    7:*/		return 0x820DA080;
		  /* 820DA080h */ case    8:  		/* ld R31, <#[R1 - 16]> */
		/* 820DA080h case    8:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DA080h case    8:*/		return 0x820DA084;
		  /* 820DA084h */ case    9:  		/* bclr 20, CR0_LT */
		/* 820DA084h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DA084h case    9:*/		return 0x820DA088;
	}
	return 0x820DA088;
} // Block from 820DA060h-820DA088h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DA088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA088);
		  /* 820DA088h */ case    0:  		/* mfspr R12, LR */
		/* 820DA088h case    0:*/		regs.R12 = regs.LR;
		/* 820DA088h case    0:*/		return 0x820DA08C;
		  /* 820DA08Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DA08Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DA08Ch case    1:*/		return 0x820DA090;
		  /* 820DA090h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820DA090h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DA090h case    2:*/		return 0x820DA094;
		  /* 820DA094h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820DA094h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DA094h case    3:*/		return 0x820DA098;
		  /* 820DA098h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DA098h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DA098h case    4:*/		return 0x820DA09C;
		  /* 820DA09Ch */ case    5:  		/* mr R31, R3 */
		/* 820DA09Ch case    5:*/		regs.R31 = regs.R3;
		/* 820DA09Ch case    5:*/		return 0x820DA0A0;
		  /* 820DA0A0h */ case    6:  		/* mr R30, R4 */
		/* 820DA0A0h case    6:*/		regs.R30 = regs.R4;
		/* 820DA0A0h case    6:*/		return 0x820DA0A4;
		  /* 820DA0A4h */ case    7:  		/* bl -1180 */
		/* 820DA0A4h case    7:*/		regs.LR = 0x820DA0A8; return 0x820D9C08;
		/* 820DA0A4h case    7:*/		return 0x820DA0A8;
		  /* 820DA0A8h */ case    8:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 820DA0A8h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 820DA0A8h case    8:*/		return 0x820DA0AC;
		  /* 820DA0ACh */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 820DA0ACh case    9:*/		if ( regs.CR[0].eq ) { return 0x820DA0BC;  }
		/* 820DA0ACh case    9:*/		return 0x820DA0B0;
		  /* 820DA0B0h */ case   10:  		/* lis R4, 9345 */
		/* 820DA0B0h case   10:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820DA0B0h case   10:*/		return 0x820DA0B4;
		  /* 820DA0B4h */ case   11:  		/* mr R3, R31 */
		/* 820DA0B4h case   11:*/		regs.R3 = regs.R31;
		/* 820DA0B4h case   11:*/		return 0x820DA0B8;
		  /* 820DA0B8h */ case   12:  		/* bl -335232 */
		/* 820DA0B8h case   12:*/		regs.LR = 0x820DA0BC; return 0x82088338;
		/* 820DA0B8h case   12:*/		return 0x820DA0BC;
	}
	return 0x820DA0BC;
} // Block from 820DA088h-820DA0BCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DA0BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA0BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA0BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA0BC);
		  /* 820DA0BCh */ case    0:  		/* mr R3, R31 */
		/* 820DA0BCh case    0:*/		regs.R3 = regs.R31;
		/* 820DA0BCh case    0:*/		return 0x820DA0C0;
		  /* 820DA0C0h */ case    1:  		/* addi R1, R1, 112 */
		/* 820DA0C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DA0C0h case    1:*/		return 0x820DA0C4;
		  /* 820DA0C4h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DA0C4h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DA0C4h case    2:*/		return 0x820DA0C8;
		  /* 820DA0C8h */ case    3:  		/* mtspr LR, R12 */
		/* 820DA0C8h case    3:*/		regs.LR = regs.R12;
		/* 820DA0C8h case    3:*/		return 0x820DA0CC;
		  /* 820DA0CCh */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 820DA0CCh case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DA0CCh case    4:*/		return 0x820DA0D0;
		  /* 820DA0D0h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 820DA0D0h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DA0D0h case    5:*/		return 0x820DA0D4;
		  /* 820DA0D4h */ case    6:  		/* bclr 20, CR0_LT */
		/* 820DA0D4h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DA0D4h case    6:*/		return 0x820DA0D8;
	}
	return 0x820DA0D8;
} // Block from 820DA0BCh-820DA0D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DA0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA0D8);
		  /* 820DA0D8h */ case    0:  		/* mfspr R12, LR */
		/* 820DA0D8h case    0:*/		regs.R12 = regs.LR;
		/* 820DA0D8h case    0:*/		return 0x820DA0DC;
		  /* 820DA0DCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DA0DCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DA0DCh case    1:*/		return 0x820DA0E0;
		  /* 820DA0E0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820DA0E0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DA0E0h case    2:*/		return 0x820DA0E4;
		  /* 820DA0E4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820DA0E4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DA0E4h case    3:*/		return 0x820DA0E8;
		  /* 820DA0E8h */ case    4:  		/* std R5, <#[R1 + 32]> */
		/* 820DA0E8h case    4:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 820DA0E8h case    4:*/		return 0x820DA0EC;
		  /* 820DA0ECh */ case    5:  		/* std R6, <#[R1 + 40]> */
		/* 820DA0ECh case    5:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 820DA0ECh case    5:*/		return 0x820DA0F0;
		  /* 820DA0F0h */ case    6:  		/* std R7, <#[R1 + 48]> */
		/* 820DA0F0h case    6:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 820DA0F0h case    6:*/		return 0x820DA0F4;
		  /* 820DA0F4h */ case    7:  		/* std R8, <#[R1 + 56]> */
		/* 820DA0F4h case    7:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 820DA0F4h case    7:*/		return 0x820DA0F8;
		  /* 820DA0F8h */ case    8:  		/* std R9, <#[R1 + 64]> */
		/* 820DA0F8h case    8:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 820DA0F8h case    8:*/		return 0x820DA0FC;
		  /* 820DA0FCh */ case    9:  		/* std R10, <#[R1 + 72]> */
		/* 820DA0FCh case    9:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 820DA0FCh case    9:*/		return 0x820DA100;
		  /* 820DA100h */ case   10:  		/* stwu R1, <#[R1 - 2176]> */
		/* 820DA100h case   10:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF780) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF780);
		/* 820DA100h case   10:*/		return 0x820DA104;
		  /* 820DA104h */ case   11:  		/* stw R4, <#[R1 + 2204]> */
		/* 820DA104h case   11:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000089C) );
		/* 820DA104h case   11:*/		return 0x820DA108;
		  /* 820DA108h */ case   12:  		/* addi R11, R1, 80 */
		/* 820DA108h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 820DA108h case   12:*/		return 0x820DA10C;
		  /* 820DA10Ch */ case   13:  		/* addi R10, R1, 2208 */
		/* 820DA10Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x8A0);
		/* 820DA10Ch case   13:*/		return 0x820DA110;
		  /* 820DA110h */ case   14:  		/* mr R31, R3 */
		/* 820DA110h case   14:*/		regs.R31 = regs.R3;
		/* 820DA110h case   14:*/		return 0x820DA114;
		  /* 820DA114h */ case   15:  		/* mr R5, R4 */
		/* 820DA114h case   15:*/		regs.R5 = regs.R4;
		/* 820DA114h case   15:*/		return 0x820DA118;
		  /* 820DA118h */ case   16:  		/* li R4, 2048 */
		/* 820DA118h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x800);
		/* 820DA118h case   16:*/		return 0x820DA11C;
		  /* 820DA11Ch */ case   17:  		/* addi R3, R1, 96 */
		/* 820DA11Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 820DA11Ch case   17:*/		return 0x820DA120;
		  /* 820DA120h */ case   18:  		/* stw R10, <#[R11]> */
		/* 820DA120h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820DA120h case   18:*/		return 0x820DA124;
		  /* 820DA124h */ case   19:  		/* lwz R6, <#[R1 + 80]> */
		/* 820DA124h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 820DA124h case   19:*/		return 0x820DA128;
	}
	return 0x820DA128;
} // Block from 820DA0D8h-820DA128h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820DA128h
// Function '?EmitPushBranchMask@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA128);
		  /* 820DA128h */ case    0:  		/* bl -242240 */
		/* 820DA128h case    0:*/		regs.LR = 0x820DA12C; return 0x8209EEE8;
		/* 820DA128h case    0:*/		return 0x820DA12C;
		  /* 820DA12Ch */ case    1:  		/* addi R11, R1, 96 */
		/* 820DA12Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 820DA12Ch case    1:*/		return 0x820DA130;
		  /* 820DA130h */ case    2:  		/* li R9, 0 */
		/* 820DA130h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820DA130h case    2:*/		return 0x820DA134;
		  /* 820DA134h */ case    3:  		/* mr R10, R11 */
		/* 820DA134h case    3:*/		regs.R10 = regs.R11;
		/* 820DA134h case    3:*/		return 0x820DA138;
		  /* 820DA138h */ case    4:  		/* stb R9, <#[R1 + 2143]> */
		/* 820DA138h case    4:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R1 + 0x0000085F) );
		/* 820DA138h case    4:*/		return 0x820DA13C;
		  /* 820DA13Ch */ case    5:  		/* lbz R9, <#[R11]> */
		/* 820DA13Ch case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820DA13Ch case    5:*/		return 0x820DA140;
		  /* 820DA140h */ case    6:  		/* addi R11, R11, 1 */
		/* 820DA140h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820DA140h case    6:*/		return 0x820DA144;
		  /* 820DA144h */ case    7:  		/* cmplwi CR6, R9, 0 */
		/* 820DA144h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820DA144h case    7:*/		return 0x820DA148;
		  /* 820DA148h */ case    8:  		/* bc 4, CR6_EQ, -12 */
		/* 820DA148h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820DA13C;  }
		/* 820DA148h case    8:*/		return 0x820DA14C;
		  /* 820DA14Ch */ case    9:  		/* subf R11, R10, R11 */
		/* 820DA14Ch case    9:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820DA14Ch case    9:*/		return 0x820DA150;
	}
	return 0x820DA150;
} // Block from 820DA128h-820DA150h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DA150h
// Function '?EmitPushLoopCounter@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA150);
		  /* 820DA150h */ case    0:  		/* mr R3, R31 */
		/* 820DA150h case    0:*/		regs.R3 = regs.R31;
		/* 820DA150h case    0:*/		return 0x820DA154;
		  /* 820DA154h */ case    1:  		/* addi R11, R11, -1 */
		/* 820DA154h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DA154h case    1:*/		return 0x820DA158;
		  /* 820DA158h */ case    2:  		/* rlwinm R30, R11, 0, 0, 31 */
		/* 820DA158h case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R30,regs.R11);
		/* 820DA158h case    2:*/		return 0x820DA15C;
		  /* 820DA15Ch */ case    3:  		/* mr R4, R30 */
		/* 820DA15Ch case    3:*/		regs.R4 = regs.R30;
		/* 820DA15Ch case    3:*/		return 0x820DA160;
		  /* 820DA160h */ case    4:  		/* bl -1272 */
		/* 820DA160h case    4:*/		regs.LR = 0x820DA164; return 0x820D9C68;
		/* 820DA160h case    4:*/		return 0x820DA164;
		  /* 820DA164h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DA164h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA164h case    5:*/		return 0x820DA168;
		  /* 820DA168h */ case    6:  		/* bc 12, CR0_LT, 44 */
		/* 820DA168h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DA194;  }
		/* 820DA168h case    6:*/		return 0x820DA16C;
		  /* 820DA16Ch */ case    7:  		/* lwz R11, <#[R31 + 1532]> */
		/* 820DA16Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000005FC) );
		/* 820DA16Ch case    7:*/		return 0x820DA170;
		  /* 820DA170h */ case    8:  		/* mr R5, R30 */
		/* 820DA170h case    8:*/		regs.R5 = regs.R30;
		/* 820DA170h case    8:*/		return 0x820DA174;
		  /* 820DA174h */ case    9:  		/* lwz R10, <#[R31 + 1536]> */
		/* 820DA174h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000600) );
		/* 820DA174h case    9:*/		return 0x820DA178;
	}
	return 0x820DA178;
} // Block from 820DA150h-820DA178h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DA178h
// Function '?EmitPopLoopCounter@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA178);
		  /* 820DA178h */ case    0:  		/* addi R4, R1, 96 */
		/* 820DA178h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 820DA178h case    0:*/		return 0x820DA17C;
		  /* 820DA17Ch */ case    1:  		/* add R3, R11, R10 */
		/* 820DA17Ch case    1:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 820DA17Ch case    1:*/		return 0x820DA180;
		  /* 820DA180h */ case    2:  		/* bl -296912 */
		/* 820DA180h case    2:*/		regs.LR = 0x820DA184; return 0x820919B0;
		/* 820DA180h case    2:*/		return 0x820DA184;
		  /* 820DA184h */ case    3:  		/* lwz R11, <#[R31 + 1536]> */
		/* 820DA184h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000600) );
		/* 820DA184h case    3:*/		return 0x820DA188;
		  /* 820DA188h */ case    4:  		/* li R3, 0 */
		/* 820DA188h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DA188h case    4:*/		return 0x820DA18C;
		  /* 820DA18Ch */ case    5:  		/* add R11, R11, R30 */
		/* 820DA18Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 820DA18Ch case    5:*/		return 0x820DA190;
		  /* 820DA190h */ case    6:  		/* stw R11, <#[R31 + 1536]> */
		/* 820DA190h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000600) );
		/* 820DA190h case    6:*/		return 0x820DA194;
	}
	return 0x820DA194;
} // Block from 820DA178h-820DA194h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DA194h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA194( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA194) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA194);
		  /* 820DA194h */ case    0:  		/* addi R1, R1, 2176 */
		/* 820DA194h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x880);
		/* 820DA194h case    0:*/		return 0x820DA198;
		  /* 820DA198h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DA198h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DA198h case    1:*/		return 0x820DA19C;
		  /* 820DA19Ch */ case    2:  		/* mtspr LR, R12 */
		/* 820DA19Ch case    2:*/		regs.LR = regs.R12;
		/* 820DA19Ch case    2:*/		return 0x820DA1A0;
	}
	return 0x820DA1A0;
} // Block from 820DA194h-820DA1A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DA1A0h
// Function '?EmitPushLoopRepeat@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA1A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA1A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA1A0);
		  /* 820DA1A0h */ case    0:  		/* ld R30, <#[R1 - 24]> */
		/* 820DA1A0h case    0:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DA1A0h case    0:*/		return 0x820DA1A4;
		  /* 820DA1A4h */ case    1:  		/* ld R31, <#[R1 - 16]> */
		/* 820DA1A4h case    1:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DA1A4h case    1:*/		return 0x820DA1A8;
		  /* 820DA1A8h */ case    2:  		/* bclr 20, CR0_LT */
		/* 820DA1A8h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DA1A8h case    2:*/		return 0x820DA1AC;
	}
	return 0x820DA1AC;
} // Block from 820DA1A0h-820DA1ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DA1ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA1AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA1AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA1AC);
		  /* 820DA1ACh */ case    0:  		/* nop */
		/* 820DA1ACh case    0:*/		cpu::op::nop();
		/* 820DA1ACh case    0:*/		return 0x820DA1B0;
	}
	return 0x820DA1B0;
} // Block from 820DA1ACh-820DA1B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA1B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA1B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA1B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA1B0);
		  /* 820DA1B0h */ case    0:  		/* mfspr R12, LR */
		/* 820DA1B0h case    0:*/		regs.R12 = regs.LR;
		/* 820DA1B0h case    0:*/		return 0x820DA1B4;
		  /* 820DA1B4h */ case    1:  		/* bl -298840 */
		/* 820DA1B4h case    1:*/		regs.LR = 0x820DA1B8; return 0x8209125C;
		/* 820DA1B4h case    1:*/		return 0x820DA1B8;
		  /* 820DA1B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DA1B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DA1B8h case    2:*/		return 0x820DA1BC;
		  /* 820DA1BCh */ case    3:  		/* lwz R11, <#[R3 + 1544]> */
		/* 820DA1BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000608) );
		/* 820DA1BCh case    3:*/		return 0x820DA1C0;
		  /* 820DA1C0h */ case    4:  		/* mr R31, R3 */
		/* 820DA1C0h case    4:*/		regs.R31 = regs.R3;
		/* 820DA1C0h case    4:*/		return 0x820DA1C4;
		  /* 820DA1C4h */ case    5:  		/* li R30, 0 */
		/* 820DA1C4h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DA1C4h case    5:*/		return 0x820DA1C8;
	}
	return 0x820DA1C8;
} // Block from 820DA1B0h-820DA1C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DA1C8h
// Function '?EmitPopLoopRepeat@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA1C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA1C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA1C8);
		  /* 820DA1C8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 820DA1C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DA1C8h case    0:*/		return 0x820DA1CC;
		  /* 820DA1CCh */ case    1:  		/* bc 4, CR6_GT, 48 */
		/* 820DA1CCh case    1:*/		if ( !regs.CR[6].gt ) { return 0x820DA1FC;  }
		/* 820DA1CCh case    1:*/		return 0x820DA1D0;
		  /* 820DA1D0h */ case    2:  		/* lis R11, -32254 */
		/* 820DA1D0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DA1D0h case    2:*/		return 0x820DA1D4;
		  /* 820DA1D4h */ case    3:  		/* addi R29, R11, -30880 */
		/* 820DA1D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8760);
		/* 820DA1D4h case    3:*/		return 0x820DA1D8;
		  /* 820DA1D8h */ case    4:  		/* mr R4, R29 */
		/* 820DA1D8h case    4:*/		regs.R4 = regs.R29;
		/* 820DA1D8h case    4:*/		return 0x820DA1DC;
		  /* 820DA1DCh */ case    5:  		/* mr R3, R31 */
		/* 820DA1DCh case    5:*/		regs.R3 = regs.R31;
		/* 820DA1DCh case    5:*/		return 0x820DA1E0;
		  /* 820DA1E0h */ case    6:  		/* bl -264 */
		/* 820DA1E0h case    6:*/		regs.LR = 0x820DA1E4; return 0x820DA0D8;
		/* 820DA1E0h case    6:*/		return 0x820DA1E4;
		  /* 820DA1E4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DA1E4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA1E4h case    7:*/		return 0x820DA1E8;
		  /* 820DA1E8h */ case    8:  		/* bc 12, CR0_LT, 24 */
		/* 820DA1E8h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DA200;  }
		/* 820DA1E8h case    8:*/		return 0x820DA1EC;
		  /* 820DA1ECh */ case    9:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DA1ECh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DA1ECh case    9:*/		return 0x820DA1F0;
	}
	return 0x820DA1F0;
} // Block from 820DA1C8h-820DA1F0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DA1F0h
// Function '?EmitENDIF@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA1F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA1F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA1F0);
		  /* 820DA1F0h */ case    0:  		/* addi R30, R30, 1 */
		/* 820DA1F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DA1F0h case    0:*/		return 0x820DA1F4;
		  /* 820DA1F4h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 820DA1F4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DA1F4h case    1:*/		return 0x820DA1F8;
		  /* 820DA1F8h */ case    2:  		/* bc 12, CR6_LT, -32 */
		/* 820DA1F8h case    2:*/		if ( regs.CR[6].lt ) { return 0x820DA1D8;  }
		/* 820DA1F8h case    2:*/		return 0x820DA1FC;
	}
	return 0x820DA1FC;
} // Block from 820DA1F0h-820DA1FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DA1FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA1FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA1FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA1FC);
		  /* 820DA1FCh */ case    0:  		/* li R3, 0 */
		/* 820DA1FCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DA1FCh case    0:*/		return 0x820DA200;
	}
	return 0x820DA200;
} // Block from 820DA1FCh-820DA200h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA200);
		  /* 820DA200h */ case    0:  		/* addi R1, R1, 128 */
		/* 820DA200h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DA200h case    0:*/		return 0x820DA204;
		  /* 820DA204h */ case    1:  		/* b -298840 */
		/* 820DA204h case    1:*/		return 0x820912AC;
		/* 820DA204h case    1:*/		return 0x820DA208;
	}
	return 0x820DA208;
} // Block from 820DA200h-820DA208h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DA208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA208);
		  /* 820DA208h */ case    0:  		/* mfspr R12, LR */
		/* 820DA208h case    0:*/		regs.R12 = regs.LR;
		/* 820DA208h case    0:*/		return 0x820DA20C;
		  /* 820DA20Ch */ case    1:  		/* bl -298956 */
		/* 820DA20Ch case    1:*/		regs.LR = 0x820DA210; return 0x82091240;
		/* 820DA20Ch case    1:*/		return 0x820DA210;
		  /* 820DA210h */ case    2:  		/* stwu R1, <#[R1 - 320]> */
		/* 820DA210h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEC0);
		/* 820DA210h case    2:*/		return 0x820DA214;
		  /* 820DA214h */ case    3:  		/* lwz R11, <#[R3 + 1816]> */
		/* 820DA214h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000718) );
		/* 820DA214h case    3:*/		return 0x820DA218;
		  /* 820DA218h */ case    4:  		/* mr R30, R3 */
		/* 820DA218h case    4:*/		regs.R30 = regs.R3;
		/* 820DA218h case    4:*/		return 0x820DA21C;
		  /* 820DA21Ch */ case    5:  		/* mr R27, R4 */
		/* 820DA21Ch case    5:*/		regs.R27 = regs.R4;
		/* 820DA21Ch case    5:*/		return 0x820DA220;
		  /* 820DA220h */ case    6:  		/* mr R26, R5 */
		/* 820DA220h case    6:*/		regs.R26 = regs.R5;
		/* 820DA220h case    6:*/		return 0x820DA224;
		  /* 820DA224h */ case    7:  		/* mr R25, R6 */
		/* 820DA224h case    7:*/		regs.R25 = regs.R6;
		/* 820DA224h case    7:*/		return 0x820DA228;
		  /* 820DA228h */ case    8:  		/* mr R24, R7 */
		/* 820DA228h case    8:*/		regs.R24 = regs.R7;
		/* 820DA228h case    8:*/		return 0x820DA22C;
		  /* 820DA22Ch */ case    9:  		/* mr R23, R8 */
		/* 820DA22Ch case    9:*/		regs.R23 = regs.R8;
		/* 820DA22Ch case    9:*/		return 0x820DA230;
		  /* 820DA230h */ case   10:  		/* li R31, 0 */
		/* 820DA230h case   10:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820DA230h case   10:*/		return 0x820DA234;
		  /* 820DA234h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 820DA234h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DA234h case   11:*/		return 0x820DA238;
		  /* 820DA238h */ case   12:  		/* bc 4, CR6_GT, 272 */
		/* 820DA238h case   12:*/		if ( !regs.CR[6].gt ) { return 0x820DA348;  }
		/* 820DA238h case   12:*/		return 0x820DA23C;
		  /* 820DA23Ch */ case   13:  		/* lis R9, -32254 */
		/* 820DA23Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DA23Ch case   13:*/		return 0x820DA240;
		  /* 820DA240h */ case   14:  		/* lis R10, -32254 */
		/* 820DA240h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DA240h case   14:*/		return 0x820DA244;
		  /* 820DA244h */ case   15:  		/* lis R11, -32254 */
		/* 820DA244h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DA244h case   15:*/		return 0x820DA248;
		  /* 820DA248h */ case   16:  		/* addi R22, R9, -30852 */
		/* 820DA248h case   16:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R9,0xFFFF877C);
		/* 820DA248h case   16:*/		return 0x820DA24C;
		  /* 820DA24Ch */ case   17:  		/* addi R29, R10, -30860 */
		/* 820DA24Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFF8774);
		/* 820DA24Ch case   17:*/		return 0x820DA250;
		  /* 820DA250h */ case   18:  		/* addi R28, R11, -30872 */
		/* 820DA250h case   18:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFF8768);
		/* 820DA250h case   18:*/		return 0x820DA254;
		  /* 820DA254h */ case   19:  		/* mr R3, R30 */
		/* 820DA254h case   19:*/		regs.R3 = regs.R30;
		/* 820DA254h case   19:*/		return 0x820DA258;
		  /* 820DA258h */ case   20:  		/* bl -168 */
		/* 820DA258h case   20:*/		regs.LR = 0x820DA25C; return 0x820DA1B0;
		/* 820DA258h case   20:*/		return 0x820DA25C;
		  /* 820DA25Ch */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820DA25Ch case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA25Ch case   21:*/		return 0x820DA260;
		  /* 820DA260h */ case   22:  		/* bc 12, CR0_LT, 236 */
		/* 820DA260h case   22:*/		if ( regs.CR[0].lt ) { return 0x820DA34C;  }
		/* 820DA260h case   22:*/		return 0x820DA264;
		  /* 820DA264h */ case   23:  		/* mr R7, R31 */
		/* 820DA264h case   23:*/		regs.R7 = regs.R31;
		/* 820DA264h case   23:*/		return 0x820DA268;
		  /* 820DA268h */ case   24:  		/* mr R6, R31 */
		/* 820DA268h case   24:*/		regs.R6 = regs.R31;
		/* 820DA268h case   24:*/		return 0x820DA26C;
		  /* 820DA26Ch */ case   25:  		/* mr R5, R26 */
		/* 820DA26Ch case   25:*/		regs.R5 = regs.R26;
		/* 820DA26Ch case   25:*/		return 0x820DA270;
		  /* 820DA270h */ case   26:  		/* li R4, 32 */
		/* 820DA270h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA270h case   26:*/		return 0x820DA274;
		  /* 820DA274h */ case   27:  		/* addi R3, R1, 160 */
		/* 820DA274h case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DA274h case   27:*/		return 0x820DA278;
		  /* 820DA278h */ case   28:  		/* bl -228408 */
		/* 820DA278h case   28:*/		regs.LR = 0x820DA27C; return 0x820A2640;
		/* 820DA278h case   28:*/		return 0x820DA27C;
		  /* 820DA27Ch */ case   29:  		/* mr R7, R31 */
		/* 820DA27Ch case   29:*/		regs.R7 = regs.R31;
		/* 820DA27Ch case   29:*/		return 0x820DA280;
		  /* 820DA280h */ case   30:  		/* mr R6, R31 */
		/* 820DA280h case   30:*/		regs.R6 = regs.R31;
		/* 820DA280h case   30:*/		return 0x820DA284;
		  /* 820DA284h */ case   31:  		/* mr R5, R25 */
		/* 820DA284h case   31:*/		regs.R5 = regs.R25;
		/* 820DA284h case   31:*/		return 0x820DA288;
		  /* 820DA288h */ case   32:  		/* li R4, 32 */
		/* 820DA288h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA288h case   32:*/		return 0x820DA28C;
		  /* 820DA28Ch */ case   33:  		/* addi R3, R1, 128 */
		/* 820DA28Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DA28Ch case   33:*/		return 0x820DA290;
		  /* 820DA290h */ case   34:  		/* bl -228432 */
		/* 820DA290h case   34:*/		regs.LR = 0x820DA294; return 0x820A2640;
		/* 820DA290h case   34:*/		return 0x820DA294;
		  /* 820DA294h */ case   35:  		/* mr R4, R28 */
		/* 820DA294h case   35:*/		regs.R4 = regs.R28;
		/* 820DA294h case   35:*/		return 0x820DA298;
		  /* 820DA298h */ case   36:  		/* addi R7, R1, 128 */
		/* 820DA298h case   36:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DA298h case   36:*/		return 0x820DA29C;
		  /* 820DA29Ch */ case   37:  		/* mr R6, R27 */
		/* 820DA29Ch case   37:*/		regs.R6 = regs.R27;
		/* 820DA29Ch case   37:*/		return 0x820DA2A0;
		  /* 820DA2A0h */ case   38:  		/* addi R5, R1, 160 */
		/* 820DA2A0h case   38:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DA2A0h case   38:*/		return 0x820DA2A4;
		  /* 820DA2A4h */ case   39:  		/* mr R3, R30 */
		/* 820DA2A4h case   39:*/		regs.R3 = regs.R30;
		/* 820DA2A4h case   39:*/		return 0x820DA2A8;
		  /* 820DA2A8h */ case   40:  		/* bl -464 */
		/* 820DA2A8h case   40:*/		regs.LR = 0x820DA2AC; return 0x820DA0D8;
		/* 820DA2A8h case   40:*/		return 0x820DA2AC;
		  /* 820DA2ACh */ case   41:  		/* cmpwi CR0, R3, 0 */
		/* 820DA2ACh case   41:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA2ACh case   41:*/		return 0x820DA2B0;
		  /* 820DA2B0h */ case   42:  		/* bc 12, CR0_LT, 156 */
		/* 820DA2B0h case   42:*/		if ( regs.CR[0].lt ) { return 0x820DA34C;  }
		/* 820DA2B0h case   42:*/		return 0x820DA2B4;
		  /* 820DA2B4h */ case   43:  		/* cmplwi CR6, R24, 0 */
		/* 820DA2B4h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820DA2B4h case   43:*/		return 0x820DA2B8;
		  /* 820DA2B8h */ case   44:  		/* bc 12, CR6_EQ, 52 */
		/* 820DA2B8h case   44:*/		if ( regs.CR[6].eq ) { return 0x820DA2EC;  }
		/* 820DA2B8h case   44:*/		return 0x820DA2BC;
		  /* 820DA2BCh */ case   45:  		/* mr R7, R31 */
		/* 820DA2BCh case   45:*/		regs.R7 = regs.R31;
		/* 820DA2BCh case   45:*/		return 0x820DA2C0;
		  /* 820DA2C0h */ case   46:  		/* mr R6, R31 */
		/* 820DA2C0h case   46:*/		regs.R6 = regs.R31;
		/* 820DA2C0h case   46:*/		return 0x820DA2C4;
		  /* 820DA2C4h */ case   47:  		/* mr R5, R24 */
		/* 820DA2C4h case   47:*/		regs.R5 = regs.R24;
		/* 820DA2C4h case   47:*/		return 0x820DA2C8;
		  /* 820DA2C8h */ case   48:  		/* li R4, 32 */
		/* 820DA2C8h case   48:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA2C8h case   48:*/		return 0x820DA2CC;
		  /* 820DA2CCh */ case   49:  		/* addi R3, R1, 192 */
		/* 820DA2CCh case   49:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DA2CCh case   49:*/		return 0x820DA2D0;
		  /* 820DA2D0h */ case   50:  		/* bl -228496 */
		/* 820DA2D0h case   50:*/		regs.LR = 0x820DA2D4; return 0x820A2640;
		/* 820DA2D0h case   50:*/		return 0x820DA2D4;
		  /* 820DA2D4h */ case   51:  		/* mr R4, R29 */
		/* 820DA2D4h case   51:*/		regs.R4 = regs.R29;
		/* 820DA2D4h case   51:*/		return 0x820DA2D8;
		  /* 820DA2D8h */ case   52:  		/* addi R5, R1, 192 */
		/* 820DA2D8h case   52:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820DA2D8h case   52:*/		return 0x820DA2DC;
		  /* 820DA2DCh */ case   53:  		/* mr R3, R30 */
		/* 820DA2DCh case   53:*/		regs.R3 = regs.R30;
		/* 820DA2DCh case   53:*/		return 0x820DA2E0;
		  /* 820DA2E0h */ case   54:  		/* bl -520 */
		/* 820DA2E0h case   54:*/		regs.LR = 0x820DA2E4; return 0x820DA0D8;
		/* 820DA2E0h case   54:*/		return 0x820DA2E4;
		  /* 820DA2E4h */ case   55:  		/* cmpwi CR0, R3, 0 */
		/* 820DA2E4h case   55:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA2E4h case   55:*/		return 0x820DA2E8;
		  /* 820DA2E8h */ case   56:  		/* bc 12, CR0_LT, 100 */
		/* 820DA2E8h case   56:*/		if ( regs.CR[0].lt ) { return 0x820DA34C;  }
		/* 820DA2E8h case   56:*/		return 0x820DA2EC;
	}
	return 0x820DA2EC;
} // Block from 820DA208h-820DA2ECh (57 instructions)

//////////////////////////////////////////////////////
// Block at 820DA2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA2EC);
		  /* 820DA2ECh */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 820DA2ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 820DA2ECh case    0:*/		return 0x820DA2F0;
		  /* 820DA2F0h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 820DA2F0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820DA324;  }
		/* 820DA2F0h case    1:*/		return 0x820DA2F4;
		  /* 820DA2F4h */ case    2:  		/* mr R7, R31 */
		/* 820DA2F4h case    2:*/		regs.R7 = regs.R31;
		/* 820DA2F4h case    2:*/		return 0x820DA2F8;
		  /* 820DA2F8h */ case    3:  		/* mr R6, R31 */
		/* 820DA2F8h case    3:*/		regs.R6 = regs.R31;
		/* 820DA2F8h case    3:*/		return 0x820DA2FC;
		  /* 820DA2FCh */ case    4:  		/* mr R5, R23 */
		/* 820DA2FCh case    4:*/		regs.R5 = regs.R23;
		/* 820DA2FCh case    4:*/		return 0x820DA300;
		  /* 820DA300h */ case    5:  		/* li R4, 32 */
		/* 820DA300h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA300h case    5:*/		return 0x820DA304;
		  /* 820DA304h */ case    6:  		/* addi R3, R1, 192 */
		/* 820DA304h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DA304h case    6:*/		return 0x820DA308;
		  /* 820DA308h */ case    7:  		/* bl -228552 */
		/* 820DA308h case    7:*/		regs.LR = 0x820DA30C; return 0x820A2640;
		/* 820DA308h case    7:*/		return 0x820DA30C;
		  /* 820DA30Ch */ case    8:  		/* mr R4, R29 */
		/* 820DA30Ch case    8:*/		regs.R4 = regs.R29;
		/* 820DA30Ch case    8:*/		return 0x820DA310;
		  /* 820DA310h */ case    9:  		/* addi R5, R1, 192 */
		/* 820DA310h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820DA310h case    9:*/		return 0x820DA314;
		  /* 820DA314h */ case   10:  		/* mr R3, R30 */
		/* 820DA314h case   10:*/		regs.R3 = regs.R30;
		/* 820DA314h case   10:*/		return 0x820DA318;
		  /* 820DA318h */ case   11:  		/* bl -576 */
		/* 820DA318h case   11:*/		regs.LR = 0x820DA31C; return 0x820DA0D8;
		/* 820DA318h case   11:*/		return 0x820DA31C;
		  /* 820DA31Ch */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820DA31Ch case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA31Ch case   12:*/		return 0x820DA320;
		  /* 820DA320h */ case   13:  		/* bc 12, CR0_LT, 44 */
		/* 820DA320h case   13:*/		if ( regs.CR[0].lt ) { return 0x820DA34C;  }
		/* 820DA320h case   13:*/		return 0x820DA324;
	}
	return 0x820DA324;
} // Block from 820DA2ECh-820DA324h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DA324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA324);
		  /* 820DA324h */ case    0:  		/* mr R4, R22 */
		/* 820DA324h case    0:*/		regs.R4 = regs.R22;
		/* 820DA324h case    0:*/		return 0x820DA328;
		  /* 820DA328h */ case    1:  		/* mr R3, R30 */
		/* 820DA328h case    1:*/		regs.R3 = regs.R30;
		/* 820DA328h case    1:*/		return 0x820DA32C;
		  /* 820DA32Ch */ case    2:  		/* bl -596 */
		/* 820DA32Ch case    2:*/		regs.LR = 0x820DA330; return 0x820DA0D8;
		/* 820DA32Ch case    2:*/		return 0x820DA330;
		  /* 820DA330h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820DA330h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA330h case    3:*/		return 0x820DA334;
		  /* 820DA334h */ case    4:  		/* bc 12, CR0_LT, 24 */
		/* 820DA334h case    4:*/		if ( regs.CR[0].lt ) { return 0x820DA34C;  }
		/* 820DA334h case    4:*/		return 0x820DA338;
		  /* 820DA338h */ case    5:  		/* lwz R11, <#[R30 + 1816]> */
		/* 820DA338h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000718) );
		/* 820DA338h case    5:*/		return 0x820DA33C;
		  /* 820DA33Ch */ case    6:  		/* addi R31, R31, 1 */
		/* 820DA33Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820DA33Ch case    6:*/		return 0x820DA340;
		  /* 820DA340h */ case    7:  		/* cmplw CR6, R31, R11 */
		/* 820DA340h case    7:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820DA340h case    7:*/		return 0x820DA344;
		  /* 820DA344h */ case    8:  		/* bc 12, CR6_LT, -240 */
		/* 820DA344h case    8:*/		if ( regs.CR[6].lt ) { return 0x820DA254;  }
		/* 820DA344h case    8:*/		return 0x820DA348;
	}
	return 0x820DA348;
} // Block from 820DA324h-820DA348h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820DA348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA348);
		  /* 820DA348h */ case    0:  		/* li R3, 0 */
		/* 820DA348h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DA348h case    0:*/		return 0x820DA34C;
	}
	return 0x820DA34C;
} // Block from 820DA348h-820DA34Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA34Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA34C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA34C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA34C);
		  /* 820DA34Ch */ case    0:  		/* addi R1, R1, 320 */
		/* 820DA34Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x140);
		/* 820DA34Ch case    0:*/		return 0x820DA350;
		  /* 820DA350h */ case    1:  		/* b -299200 */
		/* 820DA350h case    1:*/		return 0x82091290;
		/* 820DA350h case    1:*/		return 0x820DA354;
		  /* 820DA354h */ case    2:  		/* nop */
		/* 820DA354h case    2:*/		cpu::op::nop();
		/* 820DA354h case    2:*/		return 0x820DA358;
		  /* 820DA358h */ case    3:  		/* mr R10, R4 */
		/* 820DA358h case    3:*/		regs.R10 = regs.R4;
		/* 820DA358h case    3:*/		return 0x820DA35C;
		  /* 820DA35Ch */ case    4:  		/* mr R3, R5 */
		/* 820DA35Ch case    4:*/		regs.R3 = regs.R5;
		/* 820DA35Ch case    4:*/		return 0x820DA360;
		  /* 820DA360h */ case    5:  		/* mr R11, R10 */
		/* 820DA360h case    5:*/		regs.R11 = regs.R10;
		/* 820DA360h case    5:*/		return 0x820DA364;
		  /* 820DA364h */ case    6:  		/* mr R4, R6 */
		/* 820DA364h case    6:*/		regs.R4 = regs.R6;
		/* 820DA364h case    6:*/		return 0x820DA368;
		  /* 820DA368h */ case    7:  		/* rlwimi R11, R10, 12, 21, 23 */
		/* 820DA368h case    7:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R10);
		/* 820DA368h case    7:*/		return 0x820DA36C;
		  /* 820DA36Ch */ case    8:  		/* rlwinm R11, R11, 24, 27, 31 */
		/* 820DA36Ch case    8:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R11,regs.R11);
		/* 820DA36Ch case    8:*/		return 0x820DA370;
	}
	return 0x820DA370;
} // Block from 820DA34Ch-820DA370h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820DA370h
// Function '?EmitLOOP@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA370);
		  /* 820DA370h */ case    0:  		/* cmplwi CR6, R11, 14 */
		/* 820DA370h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000E);
		/* 820DA370h case    0:*/		return 0x820DA374;
		  /* 820DA374h */ case    1:  		/* bc 12, CR6_GT, 136 */
		/* 820DA374h case    1:*/		if ( regs.CR[6].gt ) { return 0x820DA3FC;  }
		/* 820DA374h case    1:*/		return 0x820DA378;
		  /* 820DA378h */ case    2:  		/* bc 12, CR6_EQ, 100 */
		/* 820DA378h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DA3DC;  }
		/* 820DA378h case    2:*/		return 0x820DA37C;
		  /* 820DA37Ch */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 820DA37Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820DA37Ch case    3:*/		return 0x820DA380;
		  /* 820DA380h */ case    4:  		/* bc 4, CR6_GT, 28 */
		/* 820DA380h case    4:*/		if ( !regs.CR[6].gt ) { return 0x820DA39C;  }
		/* 820DA380h case    4:*/		return 0x820DA384;
		  /* 820DA384h */ case    5:  		/* cmplwi CR6, R11, 3 */
		/* 820DA384h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 820DA384h case    5:*/		return 0x820DA388;
	}
	return 0x820DA388;
} // Block from 820DA370h-820DA388h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DA388h
// Function '?EmitENDLOOP@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA388);
		  /* 820DA388h */ case    0:  		/* bc 12, CR6_EQ, 52 */
		/* 820DA388h case    0:*/		if ( regs.CR[6].eq ) { return 0x820DA3BC;  }
		/* 820DA388h case    0:*/		return 0x820DA38C;
		  /* 820DA38Ch */ case    1:  		/* cmplwi CR6, R11, 4 */
		/* 820DA38Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 820DA38Ch case    1:*/		return 0x820DA390;
		  /* 820DA390h */ case    2:  		/* bc 4, CR6_GT, 124 */
		/* 820DA390h case    2:*/		if ( !regs.CR[6].gt ) { return 0x820DA40C;  }
		/* 820DA390h case    2:*/		return 0x820DA394;
		  /* 820DA394h */ case    3:  		/* cmplwi CR6, R11, 6 */
		/* 820DA394h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 820DA394h case    3:*/		return 0x820DA398;
		  /* 820DA398h */ case    4:  		/* bc 12, CR6_GT, 116 */
		/* 820DA398h case    4:*/		if ( regs.CR[6].gt ) { return 0x820DA40C;  }
		/* 820DA398h case    4:*/		return 0x820DA39C;
	}
	return 0x820DA39C;
} // Block from 820DA388h-820DA39Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DA39Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA39C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA39C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA39C);
		  /* 820DA39Ch */ case    0:  		/* lis R9, -32217 */
		/* 820DA39Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 820DA39Ch case    0:*/		return 0x820DA3A0;
	}
	return 0x820DA3A0;
} // Block from 820DA39Ch-820DA3A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA3A0h
// Function '?EmitLOOP_INC@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA3A0);
		  /* 820DA3A0h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DA3A0h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DA3A0h case    0:*/		return 0x820DA3A4;
		  /* 820DA3A4h */ case    1:  		/* addi R9, R9, 13752 */
		/* 820DA3A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x35B8);
		/* 820DA3A4h case    1:*/		return 0x820DA3A8;
		  /* 820DA3A8h */ case    2:  		/* lis R8, -32254 */
		/* 820DA3A8h case    2:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820DA3A8h case    2:*/		return 0x820DA3AC;
		  /* 820DA3ACh */ case    3:  		/* rlwinm R7, R10, 0, 21, 31 */
		/* 820DA3ACh case    3:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R7,regs.R10);
		/* 820DA3ACh case    3:*/		return 0x820DA3B0;
		  /* 820DA3B0h */ case    4:  		/* addi R5, R8, -30784 */
		/* 820DA3B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R8,0xFFFF87C0);
		/* 820DA3B0h case    4:*/		return 0x820DA3B4;
		  /* 820DA3B4h */ case    5:  		/* lwzx R6, <#[R11 + R9]> */
		/* 820DA3B4h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820DA3B4h case    5:*/		return 0x820DA3B8;
	}
	return 0x820DA3B8;
} // Block from 820DA3A0h-820DA3B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DA3B8h
// Function '?EmitENDLOOP_INC@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA3B8);
		  /* 820DA3B8h */ case    0:  		/* b -228728 */
		/* 820DA3B8h case    0:*/		return 0x820A2640;
		/* 820DA3B8h case    0:*/		return 0x820DA3BC;
	}
	return 0x820DA3BC;
} // Block from 820DA3B8h-820DA3BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA3BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA3BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA3BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA3BC);
		  /* 820DA3BCh */ case    0:  		/* lis R9, -32217 */
		/* 820DA3BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 820DA3BCh case    0:*/		return 0x820DA3C0;
		  /* 820DA3C0h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DA3C0h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DA3C0h case    1:*/		return 0x820DA3C4;
		  /* 820DA3C4h */ case    2:  		/* addi R9, R9, 13752 */
		/* 820DA3C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x35B8);
		/* 820DA3C4h case    2:*/		return 0x820DA3C8;
		  /* 820DA3C8h */ case    3:  		/* lis R8, -32254 */
		/* 820DA3C8h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820DA3C8h case    3:*/		return 0x820DA3CC;
		  /* 820DA3CCh */ case    4:  		/* rlwinm R7, R10, 0, 21, 31 */
		/* 820DA3CCh case    4:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R7,regs.R10);
		/* 820DA3CCh case    4:*/		return 0x820DA3D0;
	}
	return 0x820DA3D0;
} // Block from 820DA3BCh-820DA3D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DA3D0h
// Function '?EmitMOV@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA3D0);
		  /* 820DA3D0h */ case    0:  		/* addi R5, R8, -30800 */
		/* 820DA3D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R8,0xFFFF87B0);
		/* 820DA3D0h case    0:*/		return 0x820DA3D4;
		  /* 820DA3D4h */ case    1:  		/* lwzx R6, <#[R11 + R9]> */
		/* 820DA3D4h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820DA3D4h case    1:*/		return 0x820DA3D8;
		  /* 820DA3D8h */ case    2:  		/* b -228760 */
		/* 820DA3D8h case    2:*/		return 0x820A2640;
		/* 820DA3D8h case    2:*/		return 0x820DA3DC;
	}
	return 0x820DA3DC;
} // Block from 820DA3D0h-820DA3DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DA3DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA3DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA3DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA3DC);
		  /* 820DA3DCh */ case    0:  		/* lis R9, -32217 */
		/* 820DA3DCh case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 820DA3DCh case    0:*/		return 0x820DA3E0;
		  /* 820DA3E0h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DA3E0h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DA3E0h case    1:*/		return 0x820DA3E4;
		  /* 820DA3E4h */ case    2:  		/* addi R9, R9, 13752 */
		/* 820DA3E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x35B8);
		/* 820DA3E4h case    2:*/		return 0x820DA3E8;
		  /* 820DA3E8h */ case    3:  		/* lis R8, -32254 */
		/* 820DA3E8h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820DA3E8h case    3:*/		return 0x820DA3EC;
		  /* 820DA3ECh */ case    4:  		/* rlwinm R7, R10, 0, 21, 31 */
		/* 820DA3ECh case    4:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R7,regs.R10);
		/* 820DA3ECh case    4:*/		return 0x820DA3F0;
		  /* 820DA3F0h */ case    5:  		/* addi R5, R8, -30820 */
		/* 820DA3F0h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R8,0xFFFF879C);
		/* 820DA3F0h case    5:*/		return 0x820DA3F4;
		  /* 820DA3F4h */ case    6:  		/* lwzx R6, <#[R11 + R9]> */
		/* 820DA3F4h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820DA3F4h case    6:*/		return 0x820DA3F8;
		  /* 820DA3F8h */ case    7:  		/* b -228792 */
		/* 820DA3F8h case    7:*/		return 0x820A2640;
		/* 820DA3F8h case    7:*/		return 0x820DA3FC;
	}
	return 0x820DA3FC;
} // Block from 820DA3DCh-820DA3FCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 820DA3FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA3FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA3FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA3FC);
		  /* 820DA3FCh */ case    0:  		/* cmplwi CR6, R11, 15 */
		/* 820DA3FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 820DA3FCh case    0:*/		return 0x820DA400;
		  /* 820DA400h */ case    1:  		/* bc 12, CR6_EQ, -100 */
		/* 820DA400h case    1:*/		if ( regs.CR[6].eq ) { return 0x820DA39C;  }
		/* 820DA400h case    1:*/		return 0x820DA404;
		  /* 820DA404h */ case    2:  		/* cmplwi CR6, R11, 19 */
		/* 820DA404h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000013);
		/* 820DA404h case    2:*/		return 0x820DA408;
		  /* 820DA408h */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 820DA408h case    3:*/		if ( regs.CR[6].eq ) { return 0x820DA430;  }
		/* 820DA408h case    3:*/		return 0x820DA40C;
	}
	return 0x820DA40C;
} // Block from 820DA3FCh-820DA40Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA40Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA40C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA40C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA40C);
		  /* 820DA40Ch */ case    0:  		/* lis R9, -32217 */
		/* 820DA40Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 820DA40Ch case    0:*/		return 0x820DA410;
		  /* 820DA410h */ case    1:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 820DA410h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 820DA410h case    1:*/		return 0x820DA414;
		  /* 820DA414h */ case    2:  		/* addi R9, R9, 13752 */
		/* 820DA414h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x35B8);
		/* 820DA414h case    2:*/		return 0x820DA418;
		  /* 820DA418h */ case    3:  		/* rlwinm R11, R10, 0, 21, 31 */
		/* 820DA418h case    3:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R11,regs.R10);
		/* 820DA418h case    3:*/		return 0x820DA41C;
		  /* 820DA41Ch */ case    4:  		/* lis R10, -32254 */
		/* 820DA41Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DA41Ch case    4:*/		return 0x820DA420;
		  /* 820DA420h */ case    5:  		/* add R7, R11, R7 */
		/* 820DA420h case    5:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 820DA420h case    5:*/		return 0x820DA424;
		  /* 820DA424h */ case    6:  		/* addi R5, R10, -30832 */
		/* 820DA424h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF8790);
		/* 820DA424h case    6:*/		return 0x820DA428;
		  /* 820DA428h */ case    7:  		/* lwzx R6, <#[R8 + R9]> */
		/* 820DA428h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820DA428h case    7:*/		return 0x820DA42C;
		  /* 820DA42Ch */ case    8:  		/* b -228844 */
		/* 820DA42Ch case    8:*/		return 0x820A2640;
		/* 820DA42Ch case    8:*/		return 0x820DA430;
	}
	return 0x820DA430;
} // Block from 820DA40Ch-820DA430h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820DA430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA430);
		  /* 820DA430h */ case    0:  		/* lis R10, -32217 */
		/* 820DA430h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 820DA430h case    0:*/		return 0x820DA434;
		  /* 820DA434h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DA434h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DA434h case    1:*/		return 0x820DA438;
		  /* 820DA438h */ case    2:  		/* addi R10, R10, 13752 */
		/* 820DA438h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x35B8);
		/* 820DA438h case    2:*/		return 0x820DA43C;
		  /* 820DA43Ch */ case    3:  		/* lis R9, -32254 */
		/* 820DA43Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DA43Ch case    3:*/		return 0x820DA440;
		  /* 820DA440h */ case    4:  		/* addi R5, R9, -30844 */
		/* 820DA440h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0xFFFF8784);
		/* 820DA440h case    4:*/		return 0x820DA444;
		  /* 820DA444h */ case    5:  		/* lwzx R6, <#[R11 + R10]> */
		/* 820DA444h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820DA444h case    5:*/		return 0x820DA448;
		  /* 820DA448h */ case    6:  		/* b -228872 */
		/* 820DA448h case    6:*/		return 0x820A2640;
		/* 820DA448h case    6:*/		return 0x820DA44C;
		  /* 820DA44Ch */ case    7:  		/* nop */
		/* 820DA44Ch case    7:*/		cpu::op::nop();
		/* 820DA44Ch case    7:*/		return 0x820DA450;
	}
	return 0x820DA450;
} // Block from 820DA430h-820DA450h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820DA450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA450);
		  /* 820DA450h */ case    0:  		/* mfspr R12, LR */
		/* 820DA450h case    0:*/		regs.R12 = regs.LR;
		/* 820DA450h case    0:*/		return 0x820DA454;
		  /* 820DA454h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DA454h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DA454h case    1:*/		return 0x820DA458;
		  /* 820DA458h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820DA458h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DA458h case    2:*/		return 0x820DA45C;
		  /* 820DA45Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820DA45Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DA45Ch case    3:*/		return 0x820DA460;
		  /* 820DA460h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DA460h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DA460h case    4:*/		return 0x820DA464;
		  /* 820DA464h */ case    5:  		/* mr R31, R3 */
		/* 820DA464h case    5:*/		regs.R31 = regs.R3;
		/* 820DA464h case    5:*/		return 0x820DA468;
		  /* 820DA468h */ case    6:  		/* mr R30, R4 */
		/* 820DA468h case    6:*/		regs.R30 = regs.R4;
		/* 820DA468h case    6:*/		return 0x820DA46C;
		  /* 820DA46Ch */ case    7:  		/* bl -700 */
		/* 820DA46Ch case    7:*/		regs.LR = 0x820DA470; return 0x820DA1B0;
		/* 820DA46Ch case    7:*/		return 0x820DA470;
		  /* 820DA470h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DA470h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA470h case    8:*/		return 0x820DA474;
		  /* 820DA474h */ case    9:  		/* bc 12, CR0_LT, 104 */
		/* 820DA474h case    9:*/		if ( regs.CR[0].lt ) { return 0x820DA4DC;  }
		/* 820DA474h case    9:*/		return 0x820DA478;
		  /* 820DA478h */ case   10:  		/* lis R11, -32254 */
		/* 820DA478h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DA478h case   10:*/		return 0x820DA47C;
		  /* 820DA47Ch */ case   11:  		/* mr R3, R31 */
		/* 820DA47Ch case   11:*/		regs.R3 = regs.R31;
		/* 820DA47Ch case   11:*/		return 0x820DA480;
		  /* 820DA480h */ case   12:  		/* addi R4, R11, -30756 */
		/* 820DA480h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF87DC);
		/* 820DA480h case   12:*/		return 0x820DA484;
		  /* 820DA484h */ case   13:  		/* bl -940 */
		/* 820DA484h case   13:*/		regs.LR = 0x820DA488; return 0x820DA0D8;
		/* 820DA484h case   13:*/		return 0x820DA488;
		  /* 820DA488h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820DA488h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA488h case   14:*/		return 0x820DA48C;
		  /* 820DA48Ch */ case   15:  		/* bc 12, CR0_LT, 80 */
		/* 820DA48Ch case   15:*/		if ( regs.CR[0].lt ) { return 0x820DA4DC;  }
		/* 820DA48Ch case   15:*/		return 0x820DA490;
		  /* 820DA490h */ case   16:  		/* lwz R11, <#[R31]> */
		/* 820DA490h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DA490h case   16:*/		return 0x820DA494;
		  /* 820DA494h */ case   17:  		/* lis R10, -32254 */
		/* 820DA494h case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DA494h case   17:*/		return 0x820DA498;
		  /* 820DA498h */ case   18:  		/* rlwinm R8, R30, 13, 31, 31 */
		/* 820DA498h case   18:*/		cpu::op::rlwinm<0,13,31,31>(regs,&regs.R8,regs.R30);
		/* 820DA498h case   18:*/		return 0x820DA49C;
		  /* 820DA49Ch */ case   19:  		/* addi R4, R10, -30764 */
		/* 820DA49Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF87D4);
		/* 820DA49Ch case   19:*/		return 0x820DA4A0;
		  /* 820DA4A0h */ case   20:  		/* rlwinm R7, R30, 14, 31, 31 */
		/* 820DA4A0h case   20:*/		cpu::op::rlwinm<0,14,31,31>(regs,&regs.R7,regs.R30);
		/* 820DA4A0h case   20:*/		return 0x820DA4A4;
		  /* 820DA4A4h */ case   21:  		/* rlwinm R6, R30, 15, 31, 31 */
		/* 820DA4A4h case   21:*/		cpu::op::rlwinm<0,15,31,31>(regs,&regs.R6,regs.R30);
		/* 820DA4A4h case   21:*/		return 0x820DA4A8;
		  /* 820DA4A8h */ case   22:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DA4A8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DA4A8h case   22:*/		return 0x820DA4AC;
		  /* 820DA4ACh */ case   23:  		/* rlwinm R5, R30, 16, 31, 31 */
		/* 820DA4ACh case   23:*/		cpu::op::rlwinm<0,16,31,31>(regs,&regs.R5,regs.R30);
		/* 820DA4ACh case   23:*/		return 0x820DA4B0;
		  /* 820DA4B0h */ case   24:  		/* mr R3, R31 */
		/* 820DA4B0h case   24:*/		regs.R3 = regs.R31;
		/* 820DA4B0h case   24:*/		return 0x820DA4B4;
		  /* 820DA4B4h */ case   25:  		/* mtspr CTR, R11 */
		/* 820DA4B4h case   25:*/		regs.CTR = regs.R11;
		/* 820DA4B4h case   25:*/		return 0x820DA4B8;
		  /* 820DA4B8h */ case   26:  		/* bcctrl 20, CR0_LT */
		/* 820DA4B8h case   26:*/		if ( 1 ) { regs.LR = 0x820DA4BC; return (uint32)regs.CTR; }
		/* 820DA4B8h case   26:*/		return 0x820DA4BC;
		  /* 820DA4BCh */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 820DA4BCh case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA4BCh case   27:*/		return 0x820DA4C0;
		  /* 820DA4C0h */ case   28:  		/* bc 12, CR0_LT, 28 */
		/* 820DA4C0h case   28:*/		if ( regs.CR[0].lt ) { return 0x820DA4DC;  }
		/* 820DA4C0h case   28:*/		return 0x820DA4C4;
		  /* 820DA4C4h */ case   29:  		/* lis R11, -32254 */
		/* 820DA4C4h case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DA4C4h case   29:*/		return 0x820DA4C8;
		  /* 820DA4C8h */ case   30:  		/* mr R3, R31 */
		/* 820DA4C8h case   30:*/		regs.R3 = regs.R31;
		/* 820DA4C8h case   30:*/		return 0x820DA4CC;
		  /* 820DA4CCh */ case   31:  		/* addi R4, R11, -30768 */
		/* 820DA4CCh case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF87D0);
		/* 820DA4CCh case   31:*/		return 0x820DA4D0;
		  /* 820DA4D0h */ case   32:  		/* bl -1016 */
		/* 820DA4D0h case   32:*/		regs.LR = 0x820DA4D4; return 0x820DA0D8;
		/* 820DA4D0h case   32:*/		return 0x820DA4D4;
		  /* 820DA4D4h */ case   33:  		/* srawi R11, R3, 31 */
		/* 820DA4D4h case   33:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820DA4D4h case   33:*/		return 0x820DA4D8;
		  /* 820DA4D8h */ case   34:  		/* and R3, R11, R3 */
		/* 820DA4D8h case   34:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820DA4D8h case   34:*/		return 0x820DA4DC;
	}
	return 0x820DA4DC;
} // Block from 820DA450h-820DA4DCh (35 instructions)

//////////////////////////////////////////////////////
// Block at 820DA4DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA4DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA4DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA4DC);
		  /* 820DA4DCh */ case    0:  		/* addi R1, R1, 128 */
		/* 820DA4DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DA4DCh case    0:*/		return 0x820DA4E0;
		  /* 820DA4E0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DA4E0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DA4E0h case    1:*/		return 0x820DA4E4;
		  /* 820DA4E4h */ case    2:  		/* mtspr LR, R12 */
		/* 820DA4E4h case    2:*/		regs.LR = regs.R12;
		/* 820DA4E4h case    2:*/		return 0x820DA4E8;
		  /* 820DA4E8h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 820DA4E8h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DA4E8h case    3:*/		return 0x820DA4EC;
		  /* 820DA4ECh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820DA4ECh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DA4ECh case    4:*/		return 0x820DA4F0;
		  /* 820DA4F0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820DA4F0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DA4F0h case    5:*/		return 0x820DA4F4;
	}
	return 0x820DA4F4;
} // Block from 820DA4DCh-820DA4F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DA4F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA4F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA4F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA4F4);
		  /* 820DA4F4h */ case    0:  		/* nop */
		/* 820DA4F4h case    0:*/		cpu::op::nop();
		/* 820DA4F4h case    0:*/		return 0x820DA4F8;
	}
	return 0x820DA4F8;
} // Block from 820DA4F4h-820DA4F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA4F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA4F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA4F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA4F8);
		  /* 820DA4F8h */ case    0:  		/* mfspr R12, LR */
		/* 820DA4F8h case    0:*/		regs.R12 = regs.LR;
		/* 820DA4F8h case    0:*/		return 0x820DA4FC;
		  /* 820DA4FCh */ case    1:  		/* bl -299688 */
		/* 820DA4FCh case    1:*/		regs.LR = 0x820DA500; return 0x82091254;
		/* 820DA4FCh case    1:*/		return 0x820DA500;
		  /* 820DA500h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 820DA500h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 820DA500h case    2:*/		return 0x820DA504;
		  /* 820DA504h */ case    3:  		/* lwz R11, <#[R3 + 1812]> */
		/* 820DA504h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000714) );
		/* 820DA504h case    3:*/		return 0x820DA508;
		  /* 820DA508h */ case    4:  		/* mr R31, R3 */
		/* 820DA508h case    4:*/		regs.R31 = regs.R3;
		/* 820DA508h case    4:*/		return 0x820DA50C;
		  /* 820DA50Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820DA50Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DA50Ch case    5:*/		return 0x820DA510;
		  /* 820DA510h */ case    6:  		/* bc 12, CR6_EQ, 156 */
		/* 820DA510h case    6:*/		if ( regs.CR[6].eq ) { return 0x820DA5AC;  }
		/* 820DA510h case    6:*/		return 0x820DA514;
		  /* 820DA514h */ case    7:  		/* lwz R11, <#[R3 + 1816]> */
		/* 820DA514h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000718) );
		/* 820DA514h case    7:*/		return 0x820DA518;
		  /* 820DA518h */ case    8:  		/* li R30, 0 */
		/* 820DA518h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DA518h case    8:*/		return 0x820DA51C;
		  /* 820DA51Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820DA51Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DA51Ch case    9:*/		return 0x820DA520;
		  /* 820DA520h */ case   10:  		/* bc 4, CR6_GT, 140 */
		/* 820DA520h case   10:*/		if ( !regs.CR[6].gt ) { return 0x820DA5AC;  }
		/* 820DA520h case   10:*/		return 0x820DA524;
		  /* 820DA524h */ case   11:  		/* lis R9, -32254 */
		/* 820DA524h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DA524h case   11:*/		return 0x820DA528;
		  /* 820DA528h */ case   12:  		/* lis R10, -32254 */
		/* 820DA528h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DA528h case   12:*/		return 0x820DA52C;
		  /* 820DA52Ch */ case   13:  		/* lis R11, -32254 */
		/* 820DA52Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DA52Ch case   13:*/		return 0x820DA530;
		  /* 820DA530h */ case   14:  		/* addi R27, R9, -30768 */
		/* 820DA530h case   14:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0xFFFF87D0);
		/* 820DA530h case   14:*/		return 0x820DA534;
		  /* 820DA534h */ case   15:  		/* addi R29, R10, -31716 */
		/* 820DA534h case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFF841C);
		/* 820DA534h case   15:*/		return 0x820DA538;
		  /* 820DA538h */ case   16:  		/* addi R28, R11, -30744 */
		/* 820DA538h case   16:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFF87E8);
		/* 820DA538h case   16:*/		return 0x820DA53C;
		  /* 820DA53Ch */ case   17:  		/* mr R3, R31 */
		/* 820DA53Ch case   17:*/		regs.R3 = regs.R31;
		/* 820DA53Ch case   17:*/		return 0x820DA540;
		  /* 820DA540h */ case   18:  		/* bl -912 */
		/* 820DA540h case   18:*/		regs.LR = 0x820DA544; return 0x820DA1B0;
		/* 820DA540h case   18:*/		return 0x820DA544;
		  /* 820DA544h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820DA544h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA544h case   19:*/		return 0x820DA548;
		  /* 820DA548h */ case   20:  		/* bc 12, CR0_LT, 104 */
		/* 820DA548h case   20:*/		if ( regs.CR[0].lt ) { return 0x820DA5B0;  }
		/* 820DA548h case   20:*/		return 0x820DA54C;
		  /* 820DA54Ch */ case   21:  		/* mr R4, R28 */
		/* 820DA54Ch case   21:*/		regs.R4 = regs.R28;
		/* 820DA54Ch case   21:*/		return 0x820DA550;
		  /* 820DA550h */ case   22:  		/* mr R5, R30 */
		/* 820DA550h case   22:*/		regs.R5 = regs.R30;
		/* 820DA550h case   22:*/		return 0x820DA554;
		  /* 820DA554h */ case   23:  		/* mr R3, R31 */
		/* 820DA554h case   23:*/		regs.R3 = regs.R31;
		/* 820DA554h case   23:*/		return 0x820DA558;
		  /* 820DA558h */ case   24:  		/* bl -1152 */
		/* 820DA558h case   24:*/		regs.LR = 0x820DA55C; return 0x820DA0D8;
		/* 820DA558h case   24:*/		return 0x820DA55C;
		  /* 820DA55Ch */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820DA55Ch case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA55Ch case   25:*/		return 0x820DA560;
		  /* 820DA560h */ case   26:  		/* bc 12, CR0_LT, 80 */
		/* 820DA560h case   26:*/		if ( regs.CR[0].lt ) { return 0x820DA5B0;  }
		/* 820DA560h case   26:*/		return 0x820DA564;
		  /* 820DA564h */ case   27:  		/* lwz R11, <#[R31]> */
		/* 820DA564h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DA564h case   27:*/		return 0x820DA568;
		  /* 820DA568h */ case   28:  		/* mr R4, R29 */
		/* 820DA568h case   28:*/		regs.R4 = regs.R29;
		/* 820DA568h case   28:*/		return 0x820DA56C;
		  /* 820DA56Ch */ case   29:  		/* mr R5, R30 */
		/* 820DA56Ch case   29:*/		regs.R5 = regs.R30;
		/* 820DA56Ch case   29:*/		return 0x820DA570;
		  /* 820DA570h */ case   30:  		/* mr R3, R31 */
		/* 820DA570h case   30:*/		regs.R3 = regs.R31;
		/* 820DA570h case   30:*/		return 0x820DA574;
		  /* 820DA574h */ case   31:  		/* lwz R11, <#[R11 + 436]> */
		/* 820DA574h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001B4) );
		/* 820DA574h case   31:*/		return 0x820DA578;
		  /* 820DA578h */ case   32:  		/* mtspr CTR, R11 */
		/* 820DA578h case   32:*/		regs.CTR = regs.R11;
		/* 820DA578h case   32:*/		return 0x820DA57C;
		  /* 820DA57Ch */ case   33:  		/* bcctrl 20, CR0_LT */
		/* 820DA57Ch case   33:*/		if ( 1 ) { regs.LR = 0x820DA580; return (uint32)regs.CTR; }
		/* 820DA57Ch case   33:*/		return 0x820DA580;
		  /* 820DA580h */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 820DA580h case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA580h case   34:*/		return 0x820DA584;
		  /* 820DA584h */ case   35:  		/* bc 12, CR0_LT, 44 */
		/* 820DA584h case   35:*/		if ( regs.CR[0].lt ) { return 0x820DA5B0;  }
		/* 820DA584h case   35:*/		return 0x820DA588;
		  /* 820DA588h */ case   36:  		/* mr R4, R27 */
		/* 820DA588h case   36:*/		regs.R4 = regs.R27;
		/* 820DA588h case   36:*/		return 0x820DA58C;
		  /* 820DA58Ch */ case   37:  		/* mr R3, R31 */
		/* 820DA58Ch case   37:*/		regs.R3 = regs.R31;
		/* 820DA58Ch case   37:*/		return 0x820DA590;
		  /* 820DA590h */ case   38:  		/* bl -1208 */
		/* 820DA590h case   38:*/		regs.LR = 0x820DA594; return 0x820DA0D8;
		/* 820DA590h case   38:*/		return 0x820DA594;
		  /* 820DA594h */ case   39:  		/* cmpwi CR0, R3, 0 */
		/* 820DA594h case   39:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA594h case   39:*/		return 0x820DA598;
		  /* 820DA598h */ case   40:  		/* bc 12, CR0_LT, 24 */
		/* 820DA598h case   40:*/		if ( regs.CR[0].lt ) { return 0x820DA5B0;  }
		/* 820DA598h case   40:*/		return 0x820DA59C;
		  /* 820DA59Ch */ case   41:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DA59Ch case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DA59Ch case   41:*/		return 0x820DA5A0;
		  /* 820DA5A0h */ case   42:  		/* addi R30, R30, 1 */
		/* 820DA5A0h case   42:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DA5A0h case   42:*/		return 0x820DA5A4;
		  /* 820DA5A4h */ case   43:  		/* cmplw CR6, R30, R11 */
		/* 820DA5A4h case   43:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DA5A4h case   43:*/		return 0x820DA5A8;
		  /* 820DA5A8h */ case   44:  		/* bc 12, CR6_LT, -108 */
		/* 820DA5A8h case   44:*/		if ( regs.CR[6].lt ) { return 0x820DA53C;  }
		/* 820DA5A8h case   44:*/		return 0x820DA5AC;
	}
	return 0x820DA5AC;
} // Block from 820DA4F8h-820DA5ACh (45 instructions)

//////////////////////////////////////////////////////
// Block at 820DA5ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA5AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA5AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA5AC);
		  /* 820DA5ACh */ case    0:  		/* li R3, 0 */
		/* 820DA5ACh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DA5ACh case    0:*/		return 0x820DA5B0;
	}
	return 0x820DA5B0;
} // Block from 820DA5ACh-820DA5B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA5B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA5B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA5B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA5B0);
		  /* 820DA5B0h */ case    0:  		/* addi R1, R1, 160 */
		/* 820DA5B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820DA5B0h case    0:*/		return 0x820DA5B4;
		  /* 820DA5B4h */ case    1:  		/* b -299792 */
		/* 820DA5B4h case    1:*/		return 0x820912A4;
		/* 820DA5B4h case    1:*/		return 0x820DA5B8;
	}
	return 0x820DA5B8;
} // Block from 820DA5B0h-820DA5B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DA5B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA5B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA5B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA5B8);
		  /* 820DA5B8h */ case    0:  		/* mfspr R12, LR */
		/* 820DA5B8h case    0:*/		regs.R12 = regs.LR;
		/* 820DA5B8h case    0:*/		return 0x820DA5BC;
		  /* 820DA5BCh */ case    1:  		/* bl -299884 */
		/* 820DA5BCh case    1:*/		regs.LR = 0x820DA5C0; return 0x82091250;
		/* 820DA5BCh case    1:*/		return 0x820DA5C0;
	}
	return 0x820DA5C0;
} // Block from 820DA5B8h-820DA5C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DA5C0h
// Function '?EmitNOP@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA5C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA5C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA5C0);
		  /* 820DA5C0h */ case    0:  		/* stwu R1, <#[R1 - 208]> */
		/* 820DA5C0h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 820DA5C0h case    0:*/		return 0x820DA5C4;
		  /* 820DA5C4h */ case    1:  		/* mr R31, R3 */
		/* 820DA5C4h case    1:*/		regs.R31 = regs.R3;
		/* 820DA5C4h case    1:*/		return 0x820DA5C8;
	}
	return 0x820DA5C8;
} // Block from 820DA5C0h-820DA5C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DA5C8h
// Function '?EmitLTFunction@C30SWProgramCI@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA5C8);
		  /* 820DA5C8h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 820DA5C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 820DA5C8h case    0:*/		return 0x820DA5CC;
		  /* 820DA5CCh */ case    1:  		/* bc 12, CR6_EQ, 224 */
		/* 820DA5CCh case    1:*/		if ( regs.CR[6].eq ) { return 0x820DA6AC;  }
		/* 820DA5CCh case    1:*/		return 0x820DA5D0;
		  /* 820DA5D0h */ case    2:  		/* andis. R11, R4, 85 */
		/* 820DA5D0h case    2:*/		cpu::op::andis<1>(regs,&regs.R11,regs.R4,0x55);
		/* 820DA5D0h case    2:*/		return 0x820DA5D4;
		  /* 820DA5D4h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 820DA5D4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 820DA5D4h case    3:*/		return 0x820DA5D8;
		  /* 820DA5D8h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 820DA5D8h case    4:*/		if ( regs.CR[0].eq ) { return 0x820DA5E4;  }
		/* 820DA5D8h case    4:*/		return 0x820DA5DC;
		  /* 820DA5DCh */ case    5:  		/* li R26, 1 */
		/* 820DA5DCh case    5:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 820DA5DCh case    5:*/		return 0x820DA5E0;
		  /* 820DA5E0h */ case    6:  		/* b 20 */
		/* 820DA5E0h case    6:*/		return 0x820DA5F4;
		/* 820DA5E0h case    6:*/		return 0x820DA5E4;
	}
	return 0x820DA5E4;
} // Block from 820DA5C8h-820DA5E4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DA5E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA5E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA5E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA5E4);
		  /* 820DA5E4h */ case    0:  		/* andis. R11, R4, 170 */
		/* 820DA5E4h case    0:*/		cpu::op::andis<1>(regs,&regs.R11,regs.R4,0xAA);
		/* 820DA5E4h case    0:*/		return 0x820DA5E8;
	}
	return 0x820DA5E8;
} // Block from 820DA5E4h-820DA5E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA5E8h
// Function '?EmitGEFunction@C30SWProgramML@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA5E8);
		  /* 820DA5E8h */ case    0:  		/* cntlzw R11, R11 */
		/* 820DA5E8h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 820DA5E8h case    0:*/		return 0x820DA5EC;
		  /* 820DA5ECh */ case    1:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 820DA5ECh case    1:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 820DA5ECh case    1:*/		return 0x820DA5F0;
		  /* 820DA5F0h */ case    2:  		/* addi R26, R11, 2 */
		/* 820DA5F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x2);
		/* 820DA5F0h case    2:*/		return 0x820DA5F4;
	}
	return 0x820DA5F4;
} // Block from 820DA5E8h-820DA5F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DA5F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA5F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA5F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA5F4);
		  /* 820DA5F4h */ case    0:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DA5F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DA5F4h case    0:*/		return 0x820DA5F8;
		  /* 820DA5F8h */ case    1:  		/* li R30, 0 */
		/* 820DA5F8h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DA5F8h case    1:*/		return 0x820DA5FC;
		  /* 820DA5FCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820DA5FCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DA5FCh case    2:*/		return 0x820DA600;
		  /* 820DA600h */ case    3:  		/* bc 4, CR6_GT, 172 */
		/* 820DA600h case    3:*/		if ( !regs.CR[6].gt ) { return 0x820DA6AC;  }
		/* 820DA600h case    3:*/		return 0x820DA604;
		  /* 820DA604h */ case    4:  		/* lis R9, -32254 */
		/* 820DA604h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DA604h case    4:*/		return 0x820DA608;
	}
	return 0x820DA608;
} // Block from 820DA5F4h-820DA608h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DA608h
// Function '??_9C30SWProgram@D3DXShader@@$BCFI@AA'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA608);
		  /* 820DA608h */ case    0:  		/* lis R10, -32254 */
		/* 820DA608h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DA608h case    0:*/		return 0x820DA60C;
		  /* 820DA60Ch */ case    1:  		/* lis R11, -32254 */
		/* 820DA60Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DA60Ch case    1:*/		return 0x820DA610;
		  /* 820DA610h */ case    2:  		/* addi R27, R9, -30768 */
		/* 820DA610h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0xFFFF87D0);
		/* 820DA610h case    2:*/		return 0x820DA614;
		  /* 820DA614h */ case    3:  		/* addi R29, R10, -30744 */
		/* 820DA614h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFF87E8);
		/* 820DA614h case    3:*/		return 0x820DA618;
	}
	return 0x820DA618;
} // Block from 820DA608h-820DA618h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA618h
// Function '??_9C30SWProgram@D3DXShader@@$BCHI@AA'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA618);
		  /* 820DA618h */ case    0:  		/* addi R28, R11, -30728 */
		/* 820DA618h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFF87F8);
		/* 820DA618h case    0:*/		return 0x820DA61C;
		  /* 820DA61Ch */ case    1:  		/* mr R3, R31 */
		/* 820DA61Ch case    1:*/		regs.R3 = regs.R31;
		/* 820DA61Ch case    1:*/		return 0x820DA620;
		  /* 820DA620h */ case    2:  		/* bl -1136 */
		/* 820DA620h case    2:*/		regs.LR = 0x820DA624; return 0x820DA1B0;
		/* 820DA620h case    2:*/		return 0x820DA624;
		  /* 820DA624h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820DA624h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA624h case    3:*/		return 0x820DA628;
	}
	return 0x820DA628;
} // Block from 820DA618h-820DA628h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA628h
// Function '??_9C30SWProgram@D3DXShader@@$BCGM@AA'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA628);
		  /* 820DA628h */ case    0:  		/* bc 12, CR0_LT, 136 */
		/* 820DA628h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DA6B0;  }
		/* 820DA628h case    0:*/		return 0x820DA62C;
		  /* 820DA62Ch */ case    1:  		/* mr R5, R28 */
		/* 820DA62Ch case    1:*/		regs.R5 = regs.R28;
		/* 820DA62Ch case    1:*/		return 0x820DA630;
		  /* 820DA630h */ case    2:  		/* mr R6, R30 */
		/* 820DA630h case    2:*/		regs.R6 = regs.R30;
		/* 820DA630h case    2:*/		return 0x820DA634;
		  /* 820DA634h */ case    3:  		/* li R4, 32 */
		/* 820DA634h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA634h case    3:*/		return 0x820DA638;
	}
	return 0x820DA638;
} // Block from 820DA628h-820DA638h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA638h
// Function '??_9C30SWProgram@D3DXShader@@$BCHM@AA'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA638);
		  /* 820DA638h */ case    0:  		/* addi R3, R1, 112 */
		/* 820DA638h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 820DA638h case    0:*/		return 0x820DA63C;
		  /* 820DA63Ch */ case    1:  		/* bl -229372 */
		/* 820DA63Ch case    1:*/		regs.LR = 0x820DA640; return 0x820A2640;
		/* 820DA63Ch case    1:*/		return 0x820DA640;
		  /* 820DA640h */ case    2:  		/* mr R4, R29 */
		/* 820DA640h case    2:*/		regs.R4 = regs.R29;
		/* 820DA640h case    2:*/		return 0x820DA644;
		  /* 820DA644h */ case    3:  		/* mr R5, R30 */
		/* 820DA644h case    3:*/		regs.R5 = regs.R30;
		/* 820DA644h case    3:*/		return 0x820DA648;
	}
	return 0x820DA648;
} // Block from 820DA638h-820DA648h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA648h
// Function '??_9C30SWProgram@D3DXShader@@$BCGA@AA'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA648);
		  /* 820DA648h */ case    0:  		/* mr R3, R31 */
		/* 820DA648h case    0:*/		regs.R3 = regs.R31;
		/* 820DA648h case    0:*/		return 0x820DA64C;
		  /* 820DA64Ch */ case    1:  		/* bl -1396 */
		/* 820DA64Ch case    1:*/		regs.LR = 0x820DA650; return 0x820DA0D8;
		/* 820DA64Ch case    1:*/		return 0x820DA650;
		  /* 820DA650h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DA650h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA650h case    2:*/		return 0x820DA654;
		  /* 820DA654h */ case    3:  		/* bc 12, CR0_LT, 92 */
		/* 820DA654h case    3:*/		if ( regs.CR[0].lt ) { return 0x820DA6B0;  }
		/* 820DA654h case    3:*/		return 0x820DA658;
	}
	return 0x820DA658;
} // Block from 820DA648h-820DA658h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA658h
// Function '??_9C30SWProgram@D3DXShader@@$BCHA@AA'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA658);
		  /* 820DA658h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820DA658h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DA658h case    0:*/		return 0x820DA65C;
		  /* 820DA65Ch */ case    1:  		/* mr R8, R26 */
		/* 820DA65Ch case    1:*/		regs.R8 = regs.R26;
		/* 820DA65Ch case    1:*/		return 0x820DA660;
		  /* 820DA660h */ case    2:  		/* mr R7, R26 */
		/* 820DA660h case    2:*/		regs.R7 = regs.R26;
		/* 820DA660h case    2:*/		return 0x820DA664;
		  /* 820DA664h */ case    3:  		/* mr R6, R26 */
		/* 820DA664h case    3:*/		regs.R6 = regs.R26;
		/* 820DA664h case    3:*/		return 0x820DA668;
	}
	return 0x820DA668;
} // Block from 820DA658h-820DA668h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA668h
// Function '??_9C30SWProgram@D3DXShader@@$BCIA@AA'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA668);
		  /* 820DA668h */ case    0:  		/* mr R5, R26 */
		/* 820DA668h case    0:*/		regs.R5 = regs.R26;
		/* 820DA668h case    0:*/		return 0x820DA66C;
		  /* 820DA66Ch */ case    1:  		/* addi R4, R1, 112 */
		/* 820DA66Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820DA66Ch case    1:*/		return 0x820DA670;
		  /* 820DA670h */ case    2:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DA670h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DA670h case    2:*/		return 0x820DA674;
		  /* 820DA674h */ case    3:  		/* mr R3, R31 */
		/* 820DA674h case    3:*/		regs.R3 = regs.R31;
		/* 820DA674h case    3:*/		return 0x820DA678;
	}
	return 0x820DA678;
} // Block from 820DA668h-820DA678h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA678h
// Function '??_9C30SWProgram@D3DXShader@@$BCGE@AA'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA678);
		  /* 820DA678h */ case    0:  		/* mtspr CTR, R11 */
		/* 820DA678h case    0:*/		regs.CTR = regs.R11;
		/* 820DA678h case    0:*/		return 0x820DA67C;
		  /* 820DA67Ch */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 820DA67Ch case    1:*/		if ( 1 ) { regs.LR = 0x820DA680; return (uint32)regs.CTR; }
		/* 820DA67Ch case    1:*/		return 0x820DA680;
		  /* 820DA680h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DA680h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA680h case    2:*/		return 0x820DA684;
		  /* 820DA684h */ case    3:  		/* bc 12, CR0_LT, 44 */
		/* 820DA684h case    3:*/		if ( regs.CR[0].lt ) { return 0x820DA6B0;  }
		/* 820DA684h case    3:*/		return 0x820DA688;
	}
	return 0x820DA688;
} // Block from 820DA678h-820DA688h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA688h
// Function '??_9C30SWProgram@D3DXShader@@$BCHE@AA'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA688);
		  /* 820DA688h */ case    0:  		/* mr R4, R27 */
		/* 820DA688h case    0:*/		regs.R4 = regs.R27;
		/* 820DA688h case    0:*/		return 0x820DA68C;
		  /* 820DA68Ch */ case    1:  		/* mr R3, R31 */
		/* 820DA68Ch case    1:*/		regs.R3 = regs.R31;
		/* 820DA68Ch case    1:*/		return 0x820DA690;
		  /* 820DA690h */ case    2:  		/* bl -1464 */
		/* 820DA690h case    2:*/		regs.LR = 0x820DA694; return 0x820DA0D8;
		/* 820DA690h case    2:*/		return 0x820DA694;
		  /* 820DA694h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820DA694h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA694h case    3:*/		return 0x820DA698;
	}
	return 0x820DA698;
} // Block from 820DA688h-820DA698h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA698h
// Function '??_9C30SWProgram@D3DXShader@@$BCIE@AA'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA698);
		  /* 820DA698h */ case    0:  		/* bc 12, CR0_LT, 24 */
		/* 820DA698h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DA6B0;  }
		/* 820DA698h case    0:*/		return 0x820DA69C;
		  /* 820DA69Ch */ case    1:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DA69Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DA69Ch case    1:*/		return 0x820DA6A0;
		  /* 820DA6A0h */ case    2:  		/* addi R30, R30, 1 */
		/* 820DA6A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DA6A0h case    2:*/		return 0x820DA6A4;
		  /* 820DA6A4h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 820DA6A4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DA6A4h case    3:*/		return 0x820DA6A8;
	}
	return 0x820DA6A8;
} // Block from 820DA698h-820DA6A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA6A8h
// Function '??1C30SWProgram@D3DXShader@@UAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA6A8);
		  /* 820DA6A8h */ case    0:  		/* bc 12, CR6_LT, -140 */
		/* 820DA6A8h case    0:*/		if ( regs.CR[6].lt ) { return 0x820DA61C;  }
		/* 820DA6A8h case    0:*/		return 0x820DA6AC;
	}
	return 0x820DA6AC;
} // Block from 820DA6A8h-820DA6ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA6ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA6AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA6AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA6AC);
		  /* 820DA6ACh */ case    0:  		/* li R3, 0 */
		/* 820DA6ACh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DA6ACh case    0:*/		return 0x820DA6B0;
	}
	return 0x820DA6B0;
} // Block from 820DA6ACh-820DA6B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA6B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA6B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA6B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA6B0);
		  /* 820DA6B0h */ case    0:  		/* addi R1, R1, 208 */
		/* 820DA6B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 820DA6B0h case    0:*/		return 0x820DA6B4;
		  /* 820DA6B4h */ case    1:  		/* b -300052 */
		/* 820DA6B4h case    1:*/		return 0x820912A0;
		/* 820DA6B4h case    1:*/		return 0x820DA6B8;
	}
	return 0x820DA6B8;
} // Block from 820DA6B0h-820DA6B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DA6B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA6B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA6B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA6B8);
		  /* 820DA6B8h */ case    0:  		/* mfspr R12, LR */
		/* 820DA6B8h case    0:*/		regs.R12 = regs.LR;
		/* 820DA6B8h case    0:*/		return 0x820DA6BC;
		  /* 820DA6BCh */ case    1:  		/* bl -300164 */
		/* 820DA6BCh case    1:*/		regs.LR = 0x820DA6C0; return 0x82091238;
		/* 820DA6BCh case    1:*/		return 0x820DA6C0;
		  /* 820DA6C0h */ case    2:  		/* stwu R1, <#[R1 - 368]> */
		/* 820DA6C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 820DA6C0h case    2:*/		return 0x820DA6C4;
		  /* 820DA6C4h */ case    3:  		/* mr R31, R3 */
		/* 820DA6C4h case    3:*/		regs.R31 = regs.R3;
		/* 820DA6C4h case    3:*/		return 0x820DA6C8;
		  /* 820DA6C8h */ case    4:  		/* mr R24, R4 */
		/* 820DA6C8h case    4:*/		regs.R24 = regs.R4;
		/* 820DA6C8h case    4:*/		return 0x820DA6CC;
		  /* 820DA6CCh */ case    5:  		/* mr R23, R5 */
		/* 820DA6CCh case    5:*/		regs.R23 = regs.R5;
		/* 820DA6CCh case    5:*/		return 0x820DA6D0;
		  /* 820DA6D0h */ case    6:  		/* mr R22, R6 */
		/* 820DA6D0h case    6:*/		regs.R22 = regs.R6;
		/* 820DA6D0h case    6:*/		return 0x820DA6D4;
		  /* 820DA6D4h */ case    7:  		/* mr R20, R7 */
		/* 820DA6D4h case    7:*/		regs.R20 = regs.R7;
		/* 820DA6D4h case    7:*/		return 0x820DA6D8;
		  /* 820DA6D8h */ case    8:  		/* mr R21, R8 */
		/* 820DA6D8h case    8:*/		regs.R21 = regs.R8;
		/* 820DA6D8h case    8:*/		return 0x820DA6DC;
		  /* 820DA6DCh */ case    9:  		/* cmplwi CR6, R5, 0 */
		/* 820DA6DCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820DA6DCh case    9:*/		return 0x820DA6E0;
		  /* 820DA6E0h */ case   10:  		/* bc 12, CR6_EQ, 328 */
		/* 820DA6E0h case   10:*/		if ( regs.CR[6].eq ) { return 0x820DA828;  }
		/* 820DA6E0h case   10:*/		return 0x820DA6E4;
		  /* 820DA6E4h */ case   11:  		/* lwz R11, <#[R3 + 1816]> */
		/* 820DA6E4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000718) );
		/* 820DA6E4h case   11:*/		return 0x820DA6E8;
		  /* 820DA6E8h */ case   12:  		/* li R30, 0 */
		/* 820DA6E8h case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DA6E8h case   12:*/		return 0x820DA6EC;
		  /* 820DA6ECh */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 820DA6ECh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DA6ECh case   13:*/		return 0x820DA6F0;
		  /* 820DA6F0h */ case   14:  		/* bc 4, CR6_GT, 312 */
		/* 820DA6F0h case   14:*/		if ( !regs.CR[6].gt ) { return 0x820DA828;  }
		/* 820DA6F0h case   14:*/		return 0x820DA6F4;
		  /* 820DA6F4h */ case   15:  		/* lis R7, -32254 */
		/* 820DA6F4h case   15:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8202);
		/* 820DA6F4h case   15:*/		return 0x820DA6F8;
	}
	return 0x820DA6F8;
} // Block from 820DA6B8h-820DA6F8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820DA6F8h
// Function '?EmitLoadOp@C30SWProgram@D3DXShader@@MAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA6F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA6F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA6F8);
		  /* 820DA6F8h */ case    0:  		/* lis R8, -32254 */
		/* 820DA6F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820DA6F8h case    0:*/		return 0x820DA6FC;
		  /* 820DA6FCh */ case    1:  		/* lis R9, -32254 */
		/* 820DA6FCh case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DA6FCh case    1:*/		return 0x820DA700;
		  /* 820DA700h */ case    2:  		/* lis R10, -32254 */
		/* 820DA700h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DA700h case    2:*/		return 0x820DA704;
		  /* 820DA704h */ case    3:  		/* lis R11, -32254 */
		/* 820DA704h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DA704h case    3:*/		return 0x820DA708;
	}
	return 0x820DA708;
} // Block from 820DA6F8h-820DA708h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DA708h
// Function '?AssureSW@C30SWProgram@D3DXShader@@IAAJI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA708);
		  /* 820DA708h */ case    0:  		/* addi R27, R7, -30768 */
		/* 820DA708h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R7,0xFFFF87D0);
		/* 820DA708h case    0:*/		return 0x820DA70C;
		  /* 820DA70Ch */ case    1:  		/* addi R29, R8, -30692 */
		/* 820DA70Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R8,0xFFFF881C);
		/* 820DA70Ch case    1:*/		return 0x820DA710;
		  /* 820DA710h */ case    2:  		/* addi R26, R9, -30728 */
		/* 820DA710h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R9,0xFFFF87F8);
		/* 820DA710h case    2:*/		return 0x820DA714;
		  /* 820DA714h */ case    3:  		/* addi R25, R10, -30704 */
		/* 820DA714h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0xFFFF8810);
		/* 820DA714h case    3:*/		return 0x820DA718;
		  /* 820DA718h */ case    4:  		/* addi R28, R11, -30716 */
		/* 820DA718h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFF8804);
		/* 820DA718h case    4:*/		return 0x820DA71C;
		  /* 820DA71Ch */ case    5:  		/* mr R3, R31 */
		/* 820DA71Ch case    5:*/		regs.R3 = regs.R31;
		/* 820DA71Ch case    5:*/		return 0x820DA720;
		  /* 820DA720h */ case    6:  		/* bl -1392 */
		/* 820DA720h case    6:*/		regs.LR = 0x820DA724; return 0x820DA1B0;
		/* 820DA720h case    6:*/		return 0x820DA724;
		  /* 820DA724h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DA724h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA724h case    7:*/		return 0x820DA728;
		  /* 820DA728h */ case    8:  		/* bc 12, CR0_LT, 260 */
		/* 820DA728h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DA82C;  }
		/* 820DA728h case    8:*/		return 0x820DA72C;
		  /* 820DA72Ch */ case    9:  		/* mr R5, R28 */
		/* 820DA72Ch case    9:*/		regs.R5 = regs.R28;
		/* 820DA72Ch case    9:*/		return 0x820DA730;
		  /* 820DA730h */ case   10:  		/* mr R6, R30 */
		/* 820DA730h case   10:*/		regs.R6 = regs.R30;
		/* 820DA730h case   10:*/		return 0x820DA734;
		  /* 820DA734h */ case   11:  		/* li R4, 32 */
		/* 820DA734h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA734h case   11:*/		return 0x820DA738;
		  /* 820DA738h */ case   12:  		/* addi R3, R1, 192 */
		/* 820DA738h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DA738h case   12:*/		return 0x820DA73C;
		  /* 820DA73Ch */ case   13:  		/* bl -229628 */
		/* 820DA73Ch case   13:*/		regs.LR = 0x820DA740; return 0x820A2640;
		/* 820DA73Ch case   13:*/		return 0x820DA740;
		  /* 820DA740h */ case   14:  		/* mr R7, R30 */
		/* 820DA740h case   14:*/		regs.R7 = regs.R30;
		/* 820DA740h case   14:*/		return 0x820DA744;
		  /* 820DA744h */ case   15:  		/* mr R6, R30 */
		/* 820DA744h case   15:*/		regs.R6 = regs.R30;
		/* 820DA744h case   15:*/		return 0x820DA748;
		  /* 820DA748h */ case   16:  		/* mr R5, R24 */
		/* 820DA748h case   16:*/		regs.R5 = regs.R24;
		/* 820DA748h case   16:*/		return 0x820DA74C;
		  /* 820DA74Ch */ case   17:  		/* li R4, 32 */
		/* 820DA74Ch case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA74Ch case   17:*/		return 0x820DA750;
		  /* 820DA750h */ case   18:  		/* addi R3, R1, 160 */
		/* 820DA750h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DA750h case   18:*/		return 0x820DA754;
		  /* 820DA754h */ case   19:  		/* bl -229652 */
		/* 820DA754h case   19:*/		regs.LR = 0x820DA758; return 0x820A2640;
		/* 820DA754h case   19:*/		return 0x820DA758;
		  /* 820DA758h */ case   20:  		/* cmpwi CR6, R22, 0 */
		/* 820DA758h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820DA758h case   20:*/		return 0x820DA75C;
		  /* 820DA75Ch */ case   21:  		/* mr R6, R30 */
		/* 820DA75Ch case   21:*/		regs.R6 = regs.R30;
		/* 820DA75Ch case   21:*/		return 0x820DA760;
		  /* 820DA760h */ case   22:  		/* li R4, 32 */
		/* 820DA760h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA760h case   22:*/		return 0x820DA764;
		  /* 820DA764h */ case   23:  		/* addi R3, R1, 128 */
		/* 820DA764h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DA764h case   23:*/		return 0x820DA768;
		  /* 820DA768h */ case   24:  		/* mr R5, R25 */
		/* 820DA768h case   24:*/		regs.R5 = regs.R25;
		/* 820DA768h case   24:*/		return 0x820DA76C;
		  /* 820DA76Ch */ case   25:  		/* bc 4, CR6_EQ, 8 */
		/* 820DA76Ch case   25:*/		if ( !regs.CR[6].eq ) { return 0x820DA774;  }
		/* 820DA76Ch case   25:*/		return 0x820DA770;
		  /* 820DA770h */ case   26:  		/* mr R5, R26 */
		/* 820DA770h case   26:*/		regs.R5 = regs.R26;
		/* 820DA770h case   26:*/		return 0x820DA774;
	}
	return 0x820DA774;
} // Block from 820DA708h-820DA774h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820DA774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA774);
		  /* 820DA774h */ case    0:  		/* bl -229684 */
		/* 820DA774h case    0:*/		regs.LR = 0x820DA778; return 0x820A2640;
		/* 820DA774h case    0:*/		return 0x820DA778;
		  /* 820DA778h */ case    1:  		/* cmpwi CR6, R20, 0 */
		/* 820DA778h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 820DA778h case    1:*/		return 0x820DA77C;
		  /* 820DA77Ch */ case    2:  		/* mr R4, R29 */
		/* 820DA77Ch case    2:*/		regs.R4 = regs.R29;
		/* 820DA77Ch case    2:*/		return 0x820DA780;
		  /* 820DA780h */ case    3:  		/* mr R3, R31 */
		/* 820DA780h case    3:*/		regs.R3 = regs.R31;
		/* 820DA780h case    3:*/		return 0x820DA784;
		  /* 820DA784h */ case    4:  		/* addi R5, R1, 192 */
		/* 820DA784h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820DA784h case    4:*/		return 0x820DA788;
		  /* 820DA788h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 820DA788h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820DA790;  }
		/* 820DA788h case    5:*/		return 0x820DA78C;
		  /* 820DA78Ch */ case    6:  		/* addi R5, R1, 160 */
		/* 820DA78Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DA78Ch case    6:*/		return 0x820DA790;
	}
	return 0x820DA790;
} // Block from 820DA774h-820DA790h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DA790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA790);
		  /* 820DA790h */ case    0:  		/* bl -1720 */
		/* 820DA790h case    0:*/		regs.LR = 0x820DA794; return 0x820DA0D8;
		/* 820DA790h case    0:*/		return 0x820DA794;
		  /* 820DA794h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 820DA794h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820DA794h case    1:*/		return 0x820DA798;
		  /* 820DA798h */ case    2:  		/* bc 12, CR6_LT, 148 */
		/* 820DA798h case    2:*/		if ( regs.CR[6].lt ) { return 0x820DA82C;  }
		/* 820DA798h case    2:*/		return 0x820DA79C;
		  /* 820DA79Ch */ case    3:  		/* cmplwi CR6, R21, 0 */
		/* 820DA79Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 820DA79Ch case    3:*/		return 0x820DA7A0;
		  /* 820DA7A0h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 820DA7A0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820DA7AC;  }
		/* 820DA7A0h case    4:*/		return 0x820DA7A4;
		  /* 820DA7A4h */ case    5:  		/* addi R4, R1, 192 */
		/* 820DA7A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 820DA7A4h case    5:*/		return 0x820DA7A8;
	}
	return 0x820DA7A8;
} // Block from 820DA790h-820DA7A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DA7A8h
// Function '??0C30SWProgram@D3DXShader@@QAA@HHPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA7A8);
		  /* 820DA7A8h */ case    0:  		/* b 32 */
		/* 820DA7A8h case    0:*/		return 0x820DA7C8;
		/* 820DA7A8h case    0:*/		return 0x820DA7AC;
	}
	return 0x820DA7AC;
} // Block from 820DA7A8h-820DA7ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA7ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA7AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA7AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA7AC);
		  /* 820DA7ACh */ case    0:  		/* mr R7, R30 */
		/* 820DA7ACh case    0:*/		regs.R7 = regs.R30;
		/* 820DA7ACh case    0:*/		return 0x820DA7B0;
		  /* 820DA7B0h */ case    1:  		/* mr R6, R30 */
		/* 820DA7B0h case    1:*/		regs.R6 = regs.R30;
		/* 820DA7B0h case    1:*/		return 0x820DA7B4;
		  /* 820DA7B4h */ case    2:  		/* mr R5, R21 */
		/* 820DA7B4h case    2:*/		regs.R5 = regs.R21;
		/* 820DA7B4h case    2:*/		return 0x820DA7B8;
		  /* 820DA7B8h */ case    3:  		/* li R4, 32 */
		/* 820DA7B8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA7B8h case    3:*/		return 0x820DA7BC;
		  /* 820DA7BCh */ case    4:  		/* addi R3, R1, 224 */
		/* 820DA7BCh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820DA7BCh case    4:*/		return 0x820DA7C0;
		  /* 820DA7C0h */ case    5:  		/* bl -229760 */
		/* 820DA7C0h case    5:*/		regs.LR = 0x820DA7C4; return 0x820A2640;
		/* 820DA7C0h case    5:*/		return 0x820DA7C4;
		  /* 820DA7C4h */ case    6:  		/* addi R4, R1, 224 */
		/* 820DA7C4h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xE0);
		/* 820DA7C4h case    6:*/		return 0x820DA7C8;
	}
	return 0x820DA7C8;
} // Block from 820DA7ACh-820DA7C8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DA7C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA7C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA7C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA7C8);
		  /* 820DA7C8h */ case    0:  		/* andis. R11, R23, 3328 */
		/* 820DA7C8h case    0:*/		cpu::op::andis<1>(regs,&regs.R11,regs.R23,0xD00);
		/* 820DA7C8h case    0:*/		return 0x820DA7CC;
		  /* 820DA7CCh */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 820DA7CCh case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 820DA7CCh case    1:*/		return 0x820DA7D0;
		  /* 820DA7D0h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 820DA7D0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DA7D0h case    2:*/		return 0x820DA7D4;
		  /* 820DA7D4h */ case    3:  		/* addi R6, R1, 128 */
		/* 820DA7D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DA7D4h case    3:*/		return 0x820DA7D8;
		  /* 820DA7D8h */ case    4:  		/* mr R3, R31 */
		/* 820DA7D8h case    4:*/		regs.R3 = regs.R31;
		/* 820DA7D8h case    4:*/		return 0x820DA7DC;
		  /* 820DA7DCh */ case    5:  		/* lwz R11, <#[R11 + 400]> */
		/* 820DA7DCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820DA7DCh case    5:*/		return 0x820DA7E0;
		  /* 820DA7E0h */ case    6:  		/* mtspr CTR, R11 */
		/* 820DA7E0h case    6:*/		regs.CTR = regs.R11;
		/* 820DA7E0h case    6:*/		return 0x820DA7E4;
		  /* 820DA7E4h */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 820DA7E4h case    7:*/		if ( regs.CR[0].eq ) { return 0x820DA7F0;  }
		/* 820DA7E4h case    7:*/		return 0x820DA7E8;
		  /* 820DA7E8h */ case    8:  		/* addi R5, R1, 160 */
		/* 820DA7E8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DA7E8h case    8:*/		return 0x820DA7EC;
		  /* 820DA7ECh */ case    9:  		/* b 12 */
		/* 820DA7ECh case    9:*/		return 0x820DA7F8;
		/* 820DA7ECh case    9:*/		return 0x820DA7F0;
	}
	return 0x820DA7F0;
} // Block from 820DA7C8h-820DA7F0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DA7F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA7F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA7F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA7F0);
		  /* 820DA7F0h */ case    0:  		/* mr R5, R4 */
		/* 820DA7F0h case    0:*/		regs.R5 = regs.R4;
		/* 820DA7F0h case    0:*/		return 0x820DA7F4;
		  /* 820DA7F4h */ case    1:  		/* addi R4, R1, 160 */
		/* 820DA7F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820DA7F4h case    1:*/		return 0x820DA7F8;
	}
	return 0x820DA7F8;
} // Block from 820DA7F0h-820DA7F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DA7F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA7F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA7F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA7F8);
		  /* 820DA7F8h */ case    0:  		/* bcctrl 20, CR0_LT */
		/* 820DA7F8h case    0:*/		if ( 1 ) { regs.LR = 0x820DA7FC; return (uint32)regs.CTR; }
		/* 820DA7F8h case    0:*/		return 0x820DA7FC;
		  /* 820DA7FCh */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820DA7FCh case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA7FCh case    1:*/		return 0x820DA800;
		  /* 820DA800h */ case    2:  		/* bc 12, CR0_LT, 44 */
		/* 820DA800h case    2:*/		if ( regs.CR[0].lt ) { return 0x820DA82C;  }
		/* 820DA800h case    2:*/		return 0x820DA804;
		  /* 820DA804h */ case    3:  		/* mr R4, R27 */
		/* 820DA804h case    3:*/		regs.R4 = regs.R27;
		/* 820DA804h case    3:*/		return 0x820DA808;
		  /* 820DA808h */ case    4:  		/* mr R3, R31 */
		/* 820DA808h case    4:*/		regs.R3 = regs.R31;
		/* 820DA808h case    4:*/		return 0x820DA80C;
		  /* 820DA80Ch */ case    5:  		/* bl -1844 */
		/* 820DA80Ch case    5:*/		regs.LR = 0x820DA810; return 0x820DA0D8;
		/* 820DA80Ch case    5:*/		return 0x820DA810;
		  /* 820DA810h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DA810h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA810h case    6:*/		return 0x820DA814;
		  /* 820DA814h */ case    7:  		/* bc 12, CR0_LT, 24 */
		/* 820DA814h case    7:*/		if ( regs.CR[0].lt ) { return 0x820DA82C;  }
		/* 820DA814h case    7:*/		return 0x820DA818;
		  /* 820DA818h */ case    8:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DA818h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DA818h case    8:*/		return 0x820DA81C;
		  /* 820DA81Ch */ case    9:  		/* addi R30, R30, 1 */
		/* 820DA81Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DA81Ch case    9:*/		return 0x820DA820;
		  /* 820DA820h */ case   10:  		/* cmplw CR6, R30, R11 */
		/* 820DA820h case   10:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DA820h case   10:*/		return 0x820DA824;
		  /* 820DA824h */ case   11:  		/* bc 12, CR6_LT, -264 */
		/* 820DA824h case   11:*/		if ( regs.CR[6].lt ) { return 0x820DA71C;  }
		/* 820DA824h case   11:*/		return 0x820DA828;
	}
	return 0x820DA828;
} // Block from 820DA7F8h-820DA828h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DA828h
// Function '??_EC30SWProgram@D3DXShader@@UAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA828);
		  /* 820DA828h */ case    0:  		/* li R3, 0 */
		/* 820DA828h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DA828h case    0:*/		return 0x820DA82C;
	}
	return 0x820DA82C;
} // Block from 820DA828h-820DA82Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA82Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA82C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA82C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA82C);
		  /* 820DA82Ch */ case    0:  		/* addi R1, R1, 368 */
		/* 820DA82Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 820DA82Ch case    0:*/		return 0x820DA830;
		  /* 820DA830h */ case    1:  		/* b -300456 */
		/* 820DA830h case    1:*/		return 0x82091288;
		/* 820DA830h case    1:*/		return 0x820DA834;
		  /* 820DA834h */ case    2:  		/* nop */
		/* 820DA834h case    2:*/		cpu::op::nop();
		/* 820DA834h case    2:*/		return 0x820DA838;
	}
	return 0x820DA838;
} // Block from 820DA82Ch-820DA838h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DA838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA838);
		  /* 820DA838h */ case    0:  		/* mfspr R12, LR */
		/* 820DA838h case    0:*/		regs.R12 = regs.LR;
		/* 820DA838h case    0:*/		return 0x820DA83C;
		  /* 820DA83Ch */ case    1:  		/* bl -300536 */
		/* 820DA83Ch case    1:*/		regs.LR = 0x820DA840; return 0x82091244;
		/* 820DA83Ch case    1:*/		return 0x820DA840;
		  /* 820DA840h */ case    2:  		/* stwu R1, <#[R1 - 304]> */
		/* 820DA840h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFED0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFED0);
		/* 820DA840h case    2:*/		return 0x820DA844;
		  /* 820DA844h */ case    3:  		/* lis R11, 15 */
		/* 820DA844h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xF);
		/* 820DA844h case    3:*/		return 0x820DA848;
		  /* 820DA848h */ case    4:  		/* mr R31, R3 */
		/* 820DA848h case    4:*/		regs.R31 = regs.R3;
		/* 820DA848h case    4:*/		return 0x820DA84C;
		  /* 820DA84Ch */ case    5:  		/* mr R25, R4 */
		/* 820DA84Ch case    5:*/		regs.R25 = regs.R4;
		/* 820DA84Ch case    5:*/		return 0x820DA850;
		  /* 820DA850h */ case    6:  		/* mr R24, R6 */
		/* 820DA850h case    6:*/		regs.R24 = regs.R6;
		/* 820DA850h case    6:*/		return 0x820DA854;
		  /* 820DA854h */ case    7:  		/* mr R23, R7 */
		/* 820DA854h case    7:*/		regs.R23 = regs.R7;
		/* 820DA854h case    7:*/		return 0x820DA858;
		  /* 820DA858h */ case    8:  		/* cmplw CR6, R5, R11 */
		/* 820DA858h case    8:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 820DA858h case    8:*/		return 0x820DA85C;
		  /* 820DA85Ch */ case    9:  		/* bc 12, CR6_EQ, 264 */
		/* 820DA85Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x820DA964;  }
		/* 820DA85Ch case    9:*/		return 0x820DA860;
		  /* 820DA860h */ case   10:  		/* lwz R11, <#[R3 + 1816]> */
		/* 820DA860h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000718) );
		/* 820DA860h case   10:*/		return 0x820DA864;
		  /* 820DA864h */ case   11:  		/* li R30, 0 */
		/* 820DA864h case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DA864h case   11:*/		return 0x820DA868;
		  /* 820DA868h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 820DA868h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DA868h case   12:*/		return 0x820DA86C;
		  /* 820DA86Ch */ case   13:  		/* bc 4, CR6_GT, 248 */
		/* 820DA86Ch case   13:*/		if ( !regs.CR[6].gt ) { return 0x820DA964;  }
		/* 820DA86Ch case   13:*/		return 0x820DA870;
		  /* 820DA870h */ case   14:  		/* lis R8, -32254 */
		/* 820DA870h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820DA870h case   14:*/		return 0x820DA874;
		  /* 820DA874h */ case   15:  		/* lis R9, -32254 */
		/* 820DA874h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DA874h case   15:*/		return 0x820DA878;
	}
	return 0x820DA878;
} // Block from 820DA838h-820DA878h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820DA878h
// Function '?EmitSW@C30SWProgram@D3DXShader@@IAAJPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA878);
		  /* 820DA878h */ case    0:  		/* lis R10, -32254 */
		/* 820DA878h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DA878h case    0:*/		return 0x820DA87C;
		  /* 820DA87Ch */ case    1:  		/* lis R11, -32254 */
		/* 820DA87Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DA87Ch case    1:*/		return 0x820DA880;
		  /* 820DA880h */ case    2:  		/* addi R26, R8, -30768 */
		/* 820DA880h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R8,0xFFFF87D0);
		/* 820DA880h case    2:*/		return 0x820DA884;
		  /* 820DA884h */ case    3:  		/* addi R28, R9, -30684 */
		/* 820DA884h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R9,0xFFFF8824);
		/* 820DA884h case    3:*/		return 0x820DA888;
		  /* 820DA888h */ case    4:  		/* addi R29, R10, -30692 */
		/* 820DA888h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFF881C);
		/* 820DA888h case    4:*/		return 0x820DA88C;
		  /* 820DA88Ch */ case    5:  		/* addi R27, R11, -30716 */
		/* 820DA88Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFF8804);
		/* 820DA88Ch case    5:*/		return 0x820DA890;
		  /* 820DA890h */ case    6:  		/* mr R3, R31 */
		/* 820DA890h case    6:*/		regs.R3 = regs.R31;
		/* 820DA890h case    6:*/		return 0x820DA894;
		  /* 820DA894h */ case    7:  		/* bl -1764 */
		/* 820DA894h case    7:*/		regs.LR = 0x820DA898; return 0x820DA1B0;
		/* 820DA894h case    7:*/		return 0x820DA898;
		  /* 820DA898h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DA898h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA898h case    8:*/		return 0x820DA89C;
		  /* 820DA89Ch */ case    9:  		/* bc 12, CR0_LT, 204 */
		/* 820DA89Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x820DA968;  }
		/* 820DA89Ch case    9:*/		return 0x820DA8A0;
		  /* 820DA8A0h */ case   10:  		/* mr R5, R27 */
		/* 820DA8A0h case   10:*/		regs.R5 = regs.R27;
		/* 820DA8A0h case   10:*/		return 0x820DA8A4;
		  /* 820DA8A4h */ case   11:  		/* mr R6, R30 */
		/* 820DA8A4h case   11:*/		regs.R6 = regs.R30;
		/* 820DA8A4h case   11:*/		return 0x820DA8A8;
		  /* 820DA8A8h */ case   12:  		/* li R4, 32 */
		/* 820DA8A8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA8A8h case   12:*/		return 0x820DA8AC;
		  /* 820DA8ACh */ case   13:  		/* addi R3, R1, 128 */
		/* 820DA8ACh case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DA8ACh case   13:*/		return 0x820DA8B0;
		  /* 820DA8B0h */ case   14:  		/* bl -230000 */
		/* 820DA8B0h case   14:*/		regs.LR = 0x820DA8B4; return 0x820A2640;
		/* 820DA8B0h case   14:*/		return 0x820DA8B4;
		  /* 820DA8B4h */ case   15:  		/* mr R7, R30 */
		/* 820DA8B4h case   15:*/		regs.R7 = regs.R30;
		/* 820DA8B4h case   15:*/		return 0x820DA8B8;
		  /* 820DA8B8h */ case   16:  		/* mr R6, R30 */
		/* 820DA8B8h case   16:*/		regs.R6 = regs.R30;
		/* 820DA8B8h case   16:*/		return 0x820DA8BC;
		  /* 820DA8BCh */ case   17:  		/* mr R5, R25 */
		/* 820DA8BCh case   17:*/		regs.R5 = regs.R25;
		/* 820DA8BCh case   17:*/		return 0x820DA8C0;
		  /* 820DA8C0h */ case   18:  		/* li R4, 32 */
		/* 820DA8C0h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA8C0h case   18:*/		return 0x820DA8C4;
		  /* 820DA8C4h */ case   19:  		/* addi R3, R1, 160 */
		/* 820DA8C4h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DA8C4h case   19:*/		return 0x820DA8C8;
		  /* 820DA8C8h */ case   20:  		/* bl -230024 */
		/* 820DA8C8h case   20:*/		regs.LR = 0x820DA8CC; return 0x820A2640;
		/* 820DA8C8h case   20:*/		return 0x820DA8CC;
		  /* 820DA8CCh */ case   21:  		/* cmpwi CR6, R24, 0 */
		/* 820DA8CCh case   21:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 820DA8CCh case   21:*/		return 0x820DA8D0;
		  /* 820DA8D0h */ case   22:  		/* mr R4, R29 */
		/* 820DA8D0h case   22:*/		regs.R4 = regs.R29;
		/* 820DA8D0h case   22:*/		return 0x820DA8D4;
		  /* 820DA8D4h */ case   23:  		/* mr R3, R31 */
		/* 820DA8D4h case   23:*/		regs.R3 = regs.R31;
		/* 820DA8D4h case   23:*/		return 0x820DA8D8;
		  /* 820DA8D8h */ case   24:  		/* addi R5, R1, 128 */
		/* 820DA8D8h case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DA8D8h case   24:*/		return 0x820DA8DC;
		  /* 820DA8DCh */ case   25:  		/* bc 4, CR6_EQ, 8 */
		/* 820DA8DCh case   25:*/		if ( !regs.CR[6].eq ) { return 0x820DA8E4;  }
		/* 820DA8DCh case   25:*/		return 0x820DA8E0;
		  /* 820DA8E0h */ case   26:  		/* addi R5, R1, 160 */
		/* 820DA8E0h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DA8E0h case   26:*/		return 0x820DA8E4;
	}
	return 0x820DA8E4;
} // Block from 820DA878h-820DA8E4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820DA8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA8E4);
		  /* 820DA8E4h */ case    0:  		/* bl -2060 */
		/* 820DA8E4h case    0:*/		regs.LR = 0x820DA8E8; return 0x820DA0D8;
		/* 820DA8E4h case    0:*/		return 0x820DA8E8;
		  /* 820DA8E8h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 820DA8E8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820DA8E8h case    1:*/		return 0x820DA8EC;
		  /* 820DA8ECh */ case    2:  		/* bc 12, CR6_LT, 124 */
		/* 820DA8ECh case    2:*/		if ( regs.CR[6].lt ) { return 0x820DA968;  }
		/* 820DA8ECh case    2:*/		return 0x820DA8F0;
		  /* 820DA8F0h */ case    3:  		/* cmplwi CR6, R23, 0 */
		/* 820DA8F0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 820DA8F0h case    3:*/		return 0x820DA8F4;
		  /* 820DA8F4h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 820DA8F4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820DA900;  }
		/* 820DA8F4h case    4:*/		return 0x820DA8F8;
		  /* 820DA8F8h */ case    5:  		/* addi R5, R1, 128 */
		/* 820DA8F8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DA8F8h case    5:*/		return 0x820DA8FC;
		  /* 820DA8FCh */ case    6:  		/* b 32 */
		/* 820DA8FCh case    6:*/		return 0x820DA91C;
		/* 820DA8FCh case    6:*/		return 0x820DA900;
	}
	return 0x820DA900;
} // Block from 820DA8E4h-820DA900h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DA900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA900);
		  /* 820DA900h */ case    0:  		/* mr R7, R30 */
		/* 820DA900h case    0:*/		regs.R7 = regs.R30;
		/* 820DA900h case    0:*/		return 0x820DA904;
		  /* 820DA904h */ case    1:  		/* mr R6, R30 */
		/* 820DA904h case    1:*/		regs.R6 = regs.R30;
		/* 820DA904h case    1:*/		return 0x820DA908;
		  /* 820DA908h */ case    2:  		/* mr R5, R23 */
		/* 820DA908h case    2:*/		regs.R5 = regs.R23;
		/* 820DA908h case    2:*/		return 0x820DA90C;
		  /* 820DA90Ch */ case    3:  		/* li R4, 32 */
		/* 820DA90Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA90Ch case    3:*/		return 0x820DA910;
		  /* 820DA910h */ case    4:  		/* addi R3, R1, 192 */
		/* 820DA910h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DA910h case    4:*/		return 0x820DA914;
		  /* 820DA914h */ case    5:  		/* bl -230100 */
		/* 820DA914h case    5:*/		regs.LR = 0x820DA918; return 0x820A2640;
		/* 820DA914h case    5:*/		return 0x820DA918;
		  /* 820DA918h */ case    6:  		/* addi R5, R1, 192 */
		/* 820DA918h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820DA918h case    6:*/		return 0x820DA91C;
	}
	return 0x820DA91C;
} // Block from 820DA900h-820DA91Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DA91Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA91C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA91C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA91C);
		  /* 820DA91Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820DA91Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DA91Ch case    0:*/		return 0x820DA920;
		  /* 820DA920h */ case    1:  		/* mr R6, R28 */
		/* 820DA920h case    1:*/		regs.R6 = regs.R28;
		/* 820DA920h case    1:*/		return 0x820DA924;
		  /* 820DA924h */ case    2:  		/* addi R4, R1, 160 */
		/* 820DA924h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820DA924h case    2:*/		return 0x820DA928;
		  /* 820DA928h */ case    3:  		/* mr R3, R31 */
		/* 820DA928h case    3:*/		regs.R3 = regs.R31;
		/* 820DA928h case    3:*/		return 0x820DA92C;
		  /* 820DA92Ch */ case    4:  		/* lwz R11, <#[R11 + 400]> */
		/* 820DA92Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820DA92Ch case    4:*/		return 0x820DA930;
		  /* 820DA930h */ case    5:  		/* mtspr CTR, R11 */
		/* 820DA930h case    5:*/		regs.CTR = regs.R11;
		/* 820DA930h case    5:*/		return 0x820DA934;
		  /* 820DA934h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 820DA934h case    6:*/		if ( 1 ) { regs.LR = 0x820DA938; return (uint32)regs.CTR; }
		/* 820DA934h case    6:*/		return 0x820DA938;
		  /* 820DA938h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DA938h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA938h case    7:*/		return 0x820DA93C;
		  /* 820DA93Ch */ case    8:  		/* bc 12, CR0_LT, 44 */
		/* 820DA93Ch case    8:*/		if ( regs.CR[0].lt ) { return 0x820DA968;  }
		/* 820DA93Ch case    8:*/		return 0x820DA940;
		  /* 820DA940h */ case    9:  		/* mr R4, R26 */
		/* 820DA940h case    9:*/		regs.R4 = regs.R26;
		/* 820DA940h case    9:*/		return 0x820DA944;
		  /* 820DA944h */ case   10:  		/* mr R3, R31 */
		/* 820DA944h case   10:*/		regs.R3 = regs.R31;
		/* 820DA944h case   10:*/		return 0x820DA948;
		  /* 820DA948h */ case   11:  		/* bl -2160 */
		/* 820DA948h case   11:*/		regs.LR = 0x820DA94C; return 0x820DA0D8;
		/* 820DA948h case   11:*/		return 0x820DA94C;
		  /* 820DA94Ch */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820DA94Ch case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA94Ch case   12:*/		return 0x820DA950;
	}
	return 0x820DA950;
} // Block from 820DA91Ch-820DA950h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DA950h
// Function '?EmitMargin@C30SWProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA950);
		  /* 820DA950h */ case    0:  		/* bc 12, CR0_LT, 24 */
		/* 820DA950h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DA968;  }
		/* 820DA950h case    0:*/		return 0x820DA954;
		  /* 820DA954h */ case    1:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DA954h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DA954h case    1:*/		return 0x820DA958;
		  /* 820DA958h */ case    2:  		/* addi R30, R30, 1 */
		/* 820DA958h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DA958h case    2:*/		return 0x820DA95C;
		  /* 820DA95Ch */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 820DA95Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DA95Ch case    3:*/		return 0x820DA960;
		  /* 820DA960h */ case    4:  		/* bc 12, CR6_LT, -208 */
		/* 820DA960h case    4:*/		if ( regs.CR[6].lt ) { return 0x820DA890;  }
		/* 820DA960h case    4:*/		return 0x820DA964;
	}
	return 0x820DA964;
} // Block from 820DA950h-820DA964h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DA964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA964);
		  /* 820DA964h */ case    0:  		/* li R3, 0 */
		/* 820DA964h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DA964h case    0:*/		return 0x820DA968;
	}
	return 0x820DA968;
} // Block from 820DA964h-820DA968h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DA968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA968);
		  /* 820DA968h */ case    0:  		/* addi R1, R1, 304 */
		/* 820DA968h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x130);
		/* 820DA968h case    0:*/		return 0x820DA96C;
		  /* 820DA96Ch */ case    1:  		/* b -300760 */
		/* 820DA96Ch case    1:*/		return 0x82091294;
		/* 820DA96Ch case    1:*/		return 0x820DA970;
	}
	return 0x820DA970;
} // Block from 820DA968h-820DA970h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DA970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA970);
		  /* 820DA970h */ case    0:  		/* mfspr R12, LR */
		/* 820DA970h case    0:*/		regs.R12 = regs.LR;
		/* 820DA970h case    0:*/		return 0x820DA974;
		  /* 820DA974h */ case    1:  		/* bl -300848 */
		/* 820DA974h case    1:*/		regs.LR = 0x820DA978; return 0x82091244;
		/* 820DA974h case    1:*/		return 0x820DA978;
		  /* 820DA978h */ case    2:  		/* stwu R1, <#[R1 - 320]> */
		/* 820DA978h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEC0);
		/* 820DA978h case    2:*/		return 0x820DA97C;
		  /* 820DA97Ch */ case    3:  		/* lwz R11, <#[R3 + 1812]> */
		/* 820DA97Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000714) );
		/* 820DA97Ch case    3:*/		return 0x820DA980;
		  /* 820DA980h */ case    4:  		/* mr R31, R3 */
		/* 820DA980h case    4:*/		regs.R31 = regs.R3;
		/* 820DA980h case    4:*/		return 0x820DA984;
		  /* 820DA984h */ case    5:  		/* mr R25, R4 */
		/* 820DA984h case    5:*/		regs.R25 = regs.R4;
		/* 820DA984h case    5:*/		return 0x820DA988;
		  /* 820DA988h */ case    6:  		/* mr R24, R5 */
		/* 820DA988h case    6:*/		regs.R24 = regs.R5;
		/* 820DA988h case    6:*/		return 0x820DA98C;
		  /* 820DA98Ch */ case    7:  		/* mr R23, R6 */
		/* 820DA98Ch case    7:*/		regs.R23 = regs.R6;
		/* 820DA98Ch case    7:*/		return 0x820DA990;
		  /* 820DA990h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820DA990h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DA990h case    8:*/		return 0x820DA994;
		  /* 820DA994h */ case    9:  		/* bc 12, CR6_EQ, 284 */
		/* 820DA994h case    9:*/		if ( regs.CR[6].eq ) { return 0x820DAAB0;  }
		/* 820DA994h case    9:*/		return 0x820DA998;
		  /* 820DA998h */ case   10:  		/* lwz R11, <#[R3 + 1816]> */
		/* 820DA998h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000718) );
		/* 820DA998h case   10:*/		return 0x820DA99C;
		  /* 820DA99Ch */ case   11:  		/* li R30, 0 */
		/* 820DA99Ch case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DA99Ch case   11:*/		return 0x820DA9A0;
		  /* 820DA9A0h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 820DA9A0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DA9A0h case   12:*/		return 0x820DA9A4;
		  /* 820DA9A4h */ case   13:  		/* bc 4, CR6_GT, 268 */
		/* 820DA9A4h case   13:*/		if ( !regs.CR[6].gt ) { return 0x820DAAB0;  }
		/* 820DA9A4h case   13:*/		return 0x820DA9A8;
	}
	return 0x820DA9A8;
} // Block from 820DA970h-820DA9A8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DA9A8h
// Function '?EmitDefaultFunction@C30SWProgram@D3DXShader@@IAAJPBD0000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DA9A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DA9A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DA9A8);
		  /* 820DA9A8h */ case    0:  		/* lis R8, -32254 */
		/* 820DA9A8h case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820DA9A8h case    0:*/		return 0x820DA9AC;
		  /* 820DA9ACh */ case    1:  		/* lis R9, -32254 */
		/* 820DA9ACh case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DA9ACh case    1:*/		return 0x820DA9B0;
		  /* 820DA9B0h */ case    2:  		/* lis R10, -32254 */
		/* 820DA9B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DA9B0h case    2:*/		return 0x820DA9B4;
		  /* 820DA9B4h */ case    3:  		/* lis R11, -32254 */
		/* 820DA9B4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DA9B4h case    3:*/		return 0x820DA9B8;
		  /* 820DA9B8h */ case    4:  		/* addi R26, R8, -30768 */
		/* 820DA9B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R8,0xFFFF87D0);
		/* 820DA9B8h case    4:*/		return 0x820DA9BC;
		  /* 820DA9BCh */ case    5:  		/* addi R29, R9, -30692 */
		/* 820DA9BCh case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R9,0xFFFF881C);
		/* 820DA9BCh case    5:*/		return 0x820DA9C0;
		  /* 820DA9C0h */ case    6:  		/* addi R28, R10, -30704 */
		/* 820DA9C0h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFF8810);
		/* 820DA9C0h case    6:*/		return 0x820DA9C4;
		  /* 820DA9C4h */ case    7:  		/* addi R27, R11, -30716 */
		/* 820DA9C4h case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFF8804);
		/* 820DA9C4h case    7:*/		return 0x820DA9C8;
		  /* 820DA9C8h */ case    8:  		/* mr R3, R31 */
		/* 820DA9C8h case    8:*/		regs.R3 = regs.R31;
		/* 820DA9C8h case    8:*/		return 0x820DA9CC;
		  /* 820DA9CCh */ case    9:  		/* bl -2076 */
		/* 820DA9CCh case    9:*/		regs.LR = 0x820DA9D0; return 0x820DA1B0;
		/* 820DA9CCh case    9:*/		return 0x820DA9D0;
		  /* 820DA9D0h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DA9D0h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DA9D0h case   10:*/		return 0x820DA9D4;
		  /* 820DA9D4h */ case   11:  		/* bc 12, CR0_LT, 224 */
		/* 820DA9D4h case   11:*/		if ( regs.CR[0].lt ) { return 0x820DAAB4;  }
		/* 820DA9D4h case   11:*/		return 0x820DA9D8;
		  /* 820DA9D8h */ case   12:  		/* mr R5, R27 */
		/* 820DA9D8h case   12:*/		regs.R5 = regs.R27;
		/* 820DA9D8h case   12:*/		return 0x820DA9DC;
		  /* 820DA9DCh */ case   13:  		/* mr R6, R30 */
		/* 820DA9DCh case   13:*/		regs.R6 = regs.R30;
		/* 820DA9DCh case   13:*/		return 0x820DA9E0;
		  /* 820DA9E0h */ case   14:  		/* li R4, 32 */
		/* 820DA9E0h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA9E0h case   14:*/		return 0x820DA9E4;
		  /* 820DA9E4h */ case   15:  		/* addi R3, R1, 112 */
		/* 820DA9E4h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 820DA9E4h case   15:*/		return 0x820DA9E8;
		  /* 820DA9E8h */ case   16:  		/* bl -230312 */
		/* 820DA9E8h case   16:*/		regs.LR = 0x820DA9EC; return 0x820A2640;
		/* 820DA9E8h case   16:*/		return 0x820DA9EC;
		  /* 820DA9ECh */ case   17:  		/* mr R7, R30 */
		/* 820DA9ECh case   17:*/		regs.R7 = regs.R30;
		/* 820DA9ECh case   17:*/		return 0x820DA9F0;
		  /* 820DA9F0h */ case   18:  		/* mr R6, R30 */
		/* 820DA9F0h case   18:*/		regs.R6 = regs.R30;
		/* 820DA9F0h case   18:*/		return 0x820DA9F4;
		  /* 820DA9F4h */ case   19:  		/* mr R5, R25 */
		/* 820DA9F4h case   19:*/		regs.R5 = regs.R25;
		/* 820DA9F4h case   19:*/		return 0x820DA9F8;
		  /* 820DA9F8h */ case   20:  		/* li R4, 32 */
		/* 820DA9F8h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DA9F8h case   20:*/		return 0x820DA9FC;
		  /* 820DA9FCh */ case   21:  		/* addi R3, R1, 144 */
		/* 820DA9FCh case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820DA9FCh case   21:*/		return 0x820DAA00;
		  /* 820DAA00h */ case   22:  		/* bl -230336 */
		/* 820DAA00h case   22:*/		regs.LR = 0x820DAA04; return 0x820A2640;
		/* 820DAA00h case   22:*/		return 0x820DAA04;
		  /* 820DAA04h */ case   23:  		/* mr R5, R28 */
		/* 820DAA04h case   23:*/		regs.R5 = regs.R28;
		/* 820DAA04h case   23:*/		return 0x820DAA08;
		  /* 820DAA08h */ case   24:  		/* mr R6, R30 */
		/* 820DAA08h case   24:*/		regs.R6 = regs.R30;
		/* 820DAA08h case   24:*/		return 0x820DAA0C;
		  /* 820DAA0Ch */ case   25:  		/* li R4, 32 */
		/* 820DAA0Ch case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DAA0Ch case   25:*/		return 0x820DAA10;
		  /* 820DAA10h */ case   26:  		/* addi R3, R1, 208 */
		/* 820DAA10h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 820DAA10h case   26:*/		return 0x820DAA14;
		  /* 820DAA14h */ case   27:  		/* bl -230356 */
		/* 820DAA14h case   27:*/		regs.LR = 0x820DAA18; return 0x820A2640;
		/* 820DAA14h case   27:*/		return 0x820DAA18;
		  /* 820DAA18h */ case   28:  		/* cmpwi CR6, R24, 0 */
		/* 820DAA18h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 820DAA18h case   28:*/		return 0x820DAA1C;
		  /* 820DAA1Ch */ case   29:  		/* mr R4, R29 */
		/* 820DAA1Ch case   29:*/		regs.R4 = regs.R29;
		/* 820DAA1Ch case   29:*/		return 0x820DAA20;
		  /* 820DAA20h */ case   30:  		/* mr R3, R31 */
		/* 820DAA20h case   30:*/		regs.R3 = regs.R31;
		/* 820DAA20h case   30:*/		return 0x820DAA24;
		  /* 820DAA24h */ case   31:  		/* addi R5, R1, 112 */
		/* 820DAA24h case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 820DAA24h case   31:*/		return 0x820DAA28;
		  /* 820DAA28h */ case   32:  		/* bc 4, CR6_EQ, 8 */
		/* 820DAA28h case   32:*/		if ( !regs.CR[6].eq ) { return 0x820DAA30;  }
		/* 820DAA28h case   32:*/		return 0x820DAA2C;
		  /* 820DAA2Ch */ case   33:  		/* addi R5, R1, 144 */
		/* 820DAA2Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 820DAA2Ch case   33:*/		return 0x820DAA30;
	}
	return 0x820DAA30;
} // Block from 820DA9A8h-820DAA30h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820DAA30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAA30);
		  /* 820DAA30h */ case    0:  		/* bl -2392 */
		/* 820DAA30h case    0:*/		regs.LR = 0x820DAA34; return 0x820DA0D8;
		/* 820DAA30h case    0:*/		return 0x820DAA34;
		  /* 820DAA34h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 820DAA34h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820DAA34h case    1:*/		return 0x820DAA38;
		  /* 820DAA38h */ case    2:  		/* bc 12, CR6_LT, 124 */
		/* 820DAA38h case    2:*/		if ( regs.CR[6].lt ) { return 0x820DAAB4;  }
		/* 820DAA38h case    2:*/		return 0x820DAA3C;
		  /* 820DAA3Ch */ case    3:  		/* cmplwi CR6, R23, 0 */
		/* 820DAA3Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 820DAA3Ch case    3:*/		return 0x820DAA40;
		  /* 820DAA40h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 820DAA40h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820DAA4C;  }
		/* 820DAA40h case    4:*/		return 0x820DAA44;
		  /* 820DAA44h */ case    5:  		/* addi R5, R1, 112 */
		/* 820DAA44h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 820DAA44h case    5:*/		return 0x820DAA48;
		  /* 820DAA48h */ case    6:  		/* b 32 */
		/* 820DAA48h case    6:*/		return 0x820DAA68;
		/* 820DAA48h case    6:*/		return 0x820DAA4C;
	}
	return 0x820DAA4C;
} // Block from 820DAA30h-820DAA4Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DAA4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAA4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAA4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAA4C);
		  /* 820DAA4Ch */ case    0:  		/* mr R7, R30 */
		/* 820DAA4Ch case    0:*/		regs.R7 = regs.R30;
		/* 820DAA4Ch case    0:*/		return 0x820DAA50;
		  /* 820DAA50h */ case    1:  		/* mr R6, R30 */
		/* 820DAA50h case    1:*/		regs.R6 = regs.R30;
		/* 820DAA50h case    1:*/		return 0x820DAA54;
		  /* 820DAA54h */ case    2:  		/* mr R5, R23 */
		/* 820DAA54h case    2:*/		regs.R5 = regs.R23;
		/* 820DAA54h case    2:*/		return 0x820DAA58;
		  /* 820DAA58h */ case    3:  		/* li R4, 32 */
		/* 820DAA58h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DAA58h case    3:*/		return 0x820DAA5C;
		  /* 820DAA5Ch */ case    4:  		/* addi R3, R1, 176 */
		/* 820DAA5Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB0);
		/* 820DAA5Ch case    4:*/		return 0x820DAA60;
		  /* 820DAA60h */ case    5:  		/* bl -230432 */
		/* 820DAA60h case    5:*/		regs.LR = 0x820DAA64; return 0x820A2640;
		/* 820DAA60h case    5:*/		return 0x820DAA64;
		  /* 820DAA64h */ case    6:  		/* addi R5, R1, 176 */
		/* 820DAA64h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 820DAA64h case    6:*/		return 0x820DAA68;
	}
	return 0x820DAA68;
} // Block from 820DAA4Ch-820DAA68h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DAA68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAA68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAA68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAA68);
		  /* 820DAA68h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820DAA68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DAA68h case    0:*/		return 0x820DAA6C;
		  /* 820DAA6Ch */ case    1:  		/* addi R6, R1, 208 */
		/* 820DAA6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD0);
		/* 820DAA6Ch case    1:*/		return 0x820DAA70;
		  /* 820DAA70h */ case    2:  		/* addi R4, R1, 144 */
		/* 820DAA70h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 820DAA70h case    2:*/		return 0x820DAA74;
		  /* 820DAA74h */ case    3:  		/* mr R3, R31 */
		/* 820DAA74h case    3:*/		regs.R3 = regs.R31;
		/* 820DAA74h case    3:*/		return 0x820DAA78;
		  /* 820DAA78h */ case    4:  		/* lwz R11, <#[R11 + 400]> */
		/* 820DAA78h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820DAA78h case    4:*/		return 0x820DAA7C;
		  /* 820DAA7Ch */ case    5:  		/* mtspr CTR, R11 */
		/* 820DAA7Ch case    5:*/		regs.CTR = regs.R11;
		/* 820DAA7Ch case    5:*/		return 0x820DAA80;
		  /* 820DAA80h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 820DAA80h case    6:*/		if ( 1 ) { regs.LR = 0x820DAA84; return (uint32)regs.CTR; }
		/* 820DAA80h case    6:*/		return 0x820DAA84;
		  /* 820DAA84h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DAA84h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAA84h case    7:*/		return 0x820DAA88;
		  /* 820DAA88h */ case    8:  		/* bc 12, CR0_LT, 44 */
		/* 820DAA88h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DAAB4;  }
		/* 820DAA88h case    8:*/		return 0x820DAA8C;
		  /* 820DAA8Ch */ case    9:  		/* mr R4, R26 */
		/* 820DAA8Ch case    9:*/		regs.R4 = regs.R26;
		/* 820DAA8Ch case    9:*/		return 0x820DAA90;
		  /* 820DAA90h */ case   10:  		/* mr R3, R31 */
		/* 820DAA90h case   10:*/		regs.R3 = regs.R31;
		/* 820DAA90h case   10:*/		return 0x820DAA94;
		  /* 820DAA94h */ case   11:  		/* bl -2492 */
		/* 820DAA94h case   11:*/		regs.LR = 0x820DAA98; return 0x820DA0D8;
		/* 820DAA94h case   11:*/		return 0x820DAA98;
		  /* 820DAA98h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820DAA98h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAA98h case   12:*/		return 0x820DAA9C;
		  /* 820DAA9Ch */ case   13:  		/* bc 12, CR0_LT, 24 */
		/* 820DAA9Ch case   13:*/		if ( regs.CR[0].lt ) { return 0x820DAAB4;  }
		/* 820DAA9Ch case   13:*/		return 0x820DAAA0;
		  /* 820DAAA0h */ case   14:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DAAA0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DAAA0h case   14:*/		return 0x820DAAA4;
		  /* 820DAAA4h */ case   15:  		/* addi R30, R30, 1 */
		/* 820DAAA4h case   15:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DAAA4h case   15:*/		return 0x820DAAA8;
		  /* 820DAAA8h */ case   16:  		/* cmplw CR6, R30, R11 */
		/* 820DAAA8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DAAA8h case   16:*/		return 0x820DAAAC;
		  /* 820DAAACh */ case   17:  		/* bc 12, CR6_LT, -228 */
		/* 820DAAACh case   17:*/		if ( regs.CR[6].lt ) { return 0x820DA9C8;  }
		/* 820DAAACh case   17:*/		return 0x820DAAB0;
	}
	return 0x820DAAB0;
} // Block from 820DAA68h-820DAAB0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820DAAB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAAB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAAB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAAB0);
		  /* 820DAAB0h */ case    0:  		/* li R3, 0 */
		/* 820DAAB0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DAAB0h case    0:*/		return 0x820DAAB4;
	}
	return 0x820DAAB4;
} // Block from 820DAAB0h-820DAAB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DAAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAAB4);
		  /* 820DAAB4h */ case    0:  		/* addi R1, R1, 320 */
		/* 820DAAB4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x140);
		/* 820DAAB4h case    0:*/		return 0x820DAAB8;
		  /* 820DAAB8h */ case    1:  		/* b -301092 */
		/* 820DAAB8h case    1:*/		return 0x82091294;
		/* 820DAAB8h case    1:*/		return 0x820DAABC;
		  /* 820DAABCh */ case    2:  		/* nop */
		/* 820DAABCh case    2:*/		cpu::op::nop();
		/* 820DAABCh case    2:*/		return 0x820DAAC0;
	}
	return 0x820DAAC0;
} // Block from 820DAAB4h-820DAAC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DAAC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAAC0);
		  /* 820DAAC0h */ case    0:  		/* mfspr R12, LR */
		/* 820DAAC0h case    0:*/		regs.R12 = regs.LR;
		/* 820DAAC0h case    0:*/		return 0x820DAAC4;
		  /* 820DAAC4h */ case    1:  		/* bl -301164 */
		/* 820DAAC4h case    1:*/		regs.LR = 0x820DAAC8; return 0x82091258;
		/* 820DAAC4h case    1:*/		return 0x820DAAC8;
		  /* 820DAAC8h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 820DAAC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 820DAAC8h case    2:*/		return 0x820DAACC;
		  /* 820DAACCh */ case    3:  		/* mr R31, R3 */
		/* 820DAACCh case    3:*/		regs.R31 = regs.R3;
		/* 820DAACCh case    3:*/		return 0x820DAAD0;
		  /* 820DAAD0h */ case    4:  		/* mr R30, R4 */
		/* 820DAAD0h case    4:*/		regs.R30 = regs.R4;
		/* 820DAAD0h case    4:*/		return 0x820DAAD4;
		  /* 820DAAD4h */ case    5:  		/* mr R29, R5 */
		/* 820DAAD4h case    5:*/		regs.R29 = regs.R5;
		/* 820DAAD4h case    5:*/		return 0x820DAAD8;
		  /* 820DAAD8h */ case    6:  		/* mr R28, R6 */
		/* 820DAAD8h case    6:*/		regs.R28 = regs.R6;
		/* 820DAAD8h case    6:*/		return 0x820DAADC;
		  /* 820DAADCh */ case    7:  		/* bl -2348 */
		/* 820DAADCh case    7:*/		regs.LR = 0x820DAAE0; return 0x820DA1B0;
		/* 820DAADCh case    7:*/		return 0x820DAAE0;
		  /* 820DAAE0h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DAAE0h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAAE0h case    8:*/		return 0x820DAAE4;
		  /* 820DAAE4h */ case    9:  		/* bc 12, CR0_LT, 136 */
		/* 820DAAE4h case    9:*/		if ( regs.CR[0].lt ) { return 0x820DAB6C;  }
		/* 820DAAE4h case    9:*/		return 0x820DAAE8;
		  /* 820DAAE8h */ case   10:  		/* lis R11, -32254 */
		/* 820DAAE8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAAE8h case   10:*/		return 0x820DAAEC;
		  /* 820DAAECh */ case   11:  		/* mr R7, R28 */
		/* 820DAAECh case   11:*/		regs.R7 = regs.R28;
		/* 820DAAECh case   11:*/		return 0x820DAAF0;
		  /* 820DAAF0h */ case   12:  		/* addi R5, R11, -30664 */
		/* 820DAAF0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF8838);
		/* 820DAAF0h case   12:*/		return 0x820DAAF4;
		  /* 820DAAF4h */ case   13:  		/* mr R6, R29 */
		/* 820DAAF4h case   13:*/		regs.R6 = regs.R29;
		/* 820DAAF4h case   13:*/		return 0x820DAAF8;
	}
	return 0x820DAAF8;
} // Block from 820DAAC0h-820DAAF8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DAAF8h
// Function '?GetFormatVarFromRegToken@C30SWProgram@D3DXShader@@IAAXKPADIH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAAF8);
		  /* 820DAAF8h */ case    0:  		/* li R4, 64 */
		/* 820DAAF8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x40);
		/* 820DAAF8h case    0:*/		return 0x820DAAFC;
		  /* 820DAAFCh */ case    1:  		/* addi R3, R1, 112 */
		/* 820DAAFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 820DAAFCh case    1:*/		return 0x820DAB00;
		  /* 820DAB00h */ case    2:  		/* bl -230592 */
		/* 820DAB00h case    2:*/		regs.LR = 0x820DAB04; return 0x820A2640;
		/* 820DAB00h case    2:*/		return 0x820DAB04;
		  /* 820DAB04h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 820DAB04h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DAB04h case    3:*/		return 0x820DAB08;
		  /* 820DAB08h */ case    4:  		/* mr R5, R30 */
		/* 820DAB08h case    4:*/		regs.R5 = regs.R30;
		/* 820DAB08h case    4:*/		return 0x820DAB0C;
		  /* 820DAB0Ch */ case    5:  		/* addi R4, R1, 112 */
		/* 820DAB0Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820DAB0Ch case    5:*/		return 0x820DAB10;
		  /* 820DAB10h */ case    6:  		/* mr R3, R31 */
		/* 820DAB10h case    6:*/		regs.R3 = regs.R31;
		/* 820DAB10h case    6:*/		return 0x820DAB14;
		  /* 820DAB14h */ case    7:  		/* lwz R11, <#[R11 + 440]> */
		/* 820DAB14h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001B8) );
		/* 820DAB14h case    7:*/		return 0x820DAB18;
		  /* 820DAB18h */ case    8:  		/* mtspr CTR, R11 */
		/* 820DAB18h case    8:*/		regs.CTR = regs.R11;
		/* 820DAB18h case    8:*/		return 0x820DAB1C;
		  /* 820DAB1Ch */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 820DAB1Ch case    9:*/		if ( 1 ) { regs.LR = 0x820DAB20; return (uint32)regs.CTR; }
		/* 820DAB1Ch case    9:*/		return 0x820DAB20;
		  /* 820DAB20h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DAB20h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAB20h case   10:*/		return 0x820DAB24;
		  /* 820DAB24h */ case   11:  		/* bc 12, CR0_LT, 72 */
		/* 820DAB24h case   11:*/		if ( regs.CR[0].lt ) { return 0x820DAB6C;  }
		/* 820DAB24h case   11:*/		return 0x820DAB28;
		  /* 820DAB28h */ case   12:  		/* lis R11, -32254 */
		/* 820DAB28h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAB28h case   12:*/		return 0x820DAB2C;
		  /* 820DAB2Ch */ case   13:  		/* mr R3, R31 */
		/* 820DAB2Ch case   13:*/		regs.R3 = regs.R31;
		/* 820DAB2Ch case   13:*/		return 0x820DAB30;
		  /* 820DAB30h */ case   14:  		/* addi R4, R11, -30768 */
		/* 820DAB30h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF87D0);
		/* 820DAB30h case   14:*/		return 0x820DAB34;
		  /* 820DAB34h */ case   15:  		/* bl -2652 */
		/* 820DAB34h case   15:*/		regs.LR = 0x820DAB38; return 0x820DA0D8;
		/* 820DAB34h case   15:*/		return 0x820DAB38;
		  /* 820DAB38h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820DAB38h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAB38h case   16:*/		return 0x820DAB3C;
		  /* 820DAB3Ch */ case   17:  		/* bc 12, CR0_LT, 48 */
		/* 820DAB3Ch case   17:*/		if ( regs.CR[0].lt ) { return 0x820DAB6C;  }
		/* 820DAB3Ch case   17:*/		return 0x820DAB40;
		  /* 820DAB40h */ case   18:  		/* mr R3, R31 */
		/* 820DAB40h case   18:*/		regs.R3 = regs.R31;
		/* 820DAB40h case   18:*/		return 0x820DAB44;
		  /* 820DAB44h */ case   19:  		/* bl -2452 */
		/* 820DAB44h case   19:*/		regs.LR = 0x820DAB48; return 0x820DA1B0;
		/* 820DAB44h case   19:*/		return 0x820DAB48;
		  /* 820DAB48h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 820DAB48h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAB48h case   20:*/		return 0x820DAB4C;
		  /* 820DAB4Ch */ case   21:  		/* bc 12, CR0_LT, 32 */
		/* 820DAB4Ch case   21:*/		if ( regs.CR[0].lt ) { return 0x820DAB6C;  }
		/* 820DAB4Ch case   21:*/		return 0x820DAB50;
		  /* 820DAB50h */ case   22:  		/* lis R11, -32254 */
		/* 820DAB50h case   22:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAB50h case   22:*/		return 0x820DAB54;
		  /* 820DAB54h */ case   23:  		/* mr R5, R28 */
		/* 820DAB54h case   23:*/		regs.R5 = regs.R28;
		/* 820DAB54h case   23:*/		return 0x820DAB58;
		  /* 820DAB58h */ case   24:  		/* addi R4, R11, -30676 */
		/* 820DAB58h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF882C);
		/* 820DAB58h case   24:*/		return 0x820DAB5C;
		  /* 820DAB5Ch */ case   25:  		/* mr R3, R31 */
		/* 820DAB5Ch case   25:*/		regs.R3 = regs.R31;
		/* 820DAB5Ch case   25:*/		return 0x820DAB60;
		  /* 820DAB60h */ case   26:  		/* bl -2696 */
		/* 820DAB60h case   26:*/		regs.LR = 0x820DAB64; return 0x820DA0D8;
		/* 820DAB60h case   26:*/		return 0x820DAB64;
		  /* 820DAB64h */ case   27:  		/* srawi R11, R3, 31 */
		/* 820DAB64h case   27:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820DAB64h case   27:*/		return 0x820DAB68;
		  /* 820DAB68h */ case   28:  		/* and R3, R11, R3 */
		/* 820DAB68h case   28:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820DAB68h case   28:*/		return 0x820DAB6C;
	}
	return 0x820DAB6C;
} // Block from 820DAAF8h-820DAB6Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 820DAB6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAB6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAB6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAB6C);
		  /* 820DAB6Ch */ case    0:  		/* addi R1, R1, 224 */
		/* 820DAB6Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 820DAB6Ch case    0:*/		return 0x820DAB70;
		  /* 820DAB70h */ case    1:  		/* b -301256 */
		/* 820DAB70h case    1:*/		return 0x820912A8;
		/* 820DAB70h case    1:*/		return 0x820DAB74;
		  /* 820DAB74h */ case    2:  		/* nop */
		/* 820DAB74h case    2:*/		cpu::op::nop();
		/* 820DAB74h case    2:*/		return 0x820DAB78;
	}
	return 0x820DAB78;
} // Block from 820DAB6Ch-820DAB78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DAB78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAB78);
		  /* 820DAB78h */ case    0:  		/* mfspr R12, LR */
		/* 820DAB78h case    0:*/		regs.R12 = regs.LR;
		/* 820DAB78h case    0:*/		return 0x820DAB7C;
		  /* 820DAB7Ch */ case    1:  		/* bl -301348 */
		/* 820DAB7Ch case    1:*/		regs.LR = 0x820DAB80; return 0x82091258;
		/* 820DAB7Ch case    1:*/		return 0x820DAB80;
		  /* 820DAB80h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 820DAB80h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 820DAB80h case    2:*/		return 0x820DAB84;
		  /* 820DAB84h */ case    3:  		/* mr R31, R3 */
		/* 820DAB84h case    3:*/		regs.R31 = regs.R3;
		/* 820DAB84h case    3:*/		return 0x820DAB88;
		  /* 820DAB88h */ case    4:  		/* mr R29, R4 */
		/* 820DAB88h case    4:*/		regs.R29 = regs.R4;
		/* 820DAB88h case    4:*/		return 0x820DAB8C;
		  /* 820DAB8Ch */ case    5:  		/* mr R28, R5 */
		/* 820DAB8Ch case    5:*/		regs.R28 = regs.R5;
		/* 820DAB8Ch case    5:*/		return 0x820DAB90;
		  /* 820DAB90h */ case    6:  		/* mr R30, R6 */
		/* 820DAB90h case    6:*/		regs.R30 = regs.R6;
		/* 820DAB90h case    6:*/		return 0x820DAB94;
		  /* 820DAB94h */ case    7:  		/* bl -2532 */
		/* 820DAB94h case    7:*/		regs.LR = 0x820DAB98; return 0x820DA1B0;
		/* 820DAB94h case    7:*/		return 0x820DAB98;
		  /* 820DAB98h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DAB98h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAB98h case    8:*/		return 0x820DAB9C;
		  /* 820DAB9Ch */ case    9:  		/* bc 12, CR0_LT, 160 */
		/* 820DAB9Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x820DAC3C;  }
		/* 820DAB9Ch case    9:*/		return 0x820DABA0;
		  /* 820DABA0h */ case   10:  		/* lis R11, -32254 */
		/* 820DABA0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DABA0h case   10:*/		return 0x820DABA4;
		  /* 820DABA4h */ case   11:  		/* mr R5, R30 */
		/* 820DABA4h case   11:*/		regs.R5 = regs.R30;
		/* 820DABA4h case   11:*/		return 0x820DABA8;
		  /* 820DABA8h */ case   12:  		/* addi R4, R11, -30648 */
		/* 820DABA8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8848);
		/* 820DABA8h case   12:*/		return 0x820DABAC;
		  /* 820DABACh */ case   13:  		/* mr R3, R31 */
		/* 820DABACh case   13:*/		regs.R3 = regs.R31;
		/* 820DABACh case   13:*/		return 0x820DABB0;
		  /* 820DABB0h */ case   14:  		/* bl -2776 */
		/* 820DABB0h case   14:*/		regs.LR = 0x820DABB4; return 0x820DA0D8;
		/* 820DABB0h case   14:*/		return 0x820DABB4;
		  /* 820DABB4h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820DABB4h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DABB4h case   15:*/		return 0x820DABB8;
		  /* 820DABB8h */ case   16:  		/* bc 12, CR0_LT, 132 */
		/* 820DABB8h case   16:*/		if ( regs.CR[0].lt ) { return 0x820DAC3C;  }
		/* 820DABB8h case   16:*/		return 0x820DABBC;
		  /* 820DABBCh */ case   17:  		/* mr R3, R31 */
		/* 820DABBCh case   17:*/		regs.R3 = regs.R31;
		/* 820DABBCh case   17:*/		return 0x820DABC0;
		  /* 820DABC0h */ case   18:  		/* bl -2576 */
		/* 820DABC0h case   18:*/		regs.LR = 0x820DABC4; return 0x820DA1B0;
		/* 820DABC0h case   18:*/		return 0x820DABC4;
		  /* 820DABC4h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820DABC4h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DABC4h case   19:*/		return 0x820DABC8;
		  /* 820DABC8h */ case   20:  		/* bc 12, CR0_LT, 116 */
		/* 820DABC8h case   20:*/		if ( regs.CR[0].lt ) { return 0x820DAC3C;  }
		/* 820DABC8h case   20:*/		return 0x820DABCC;
		  /* 820DABCCh */ case   21:  		/* lis R11, -32254 */
		/* 820DABCCh case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DABCCh case   21:*/		return 0x820DABD0;
		  /* 820DABD0h */ case   22:  		/* mr R5, R29 */
		/* 820DABD0h case   22:*/		regs.R5 = regs.R29;
		/* 820DABD0h case   22:*/		return 0x820DABD4;
		  /* 820DABD4h */ case   23:  		/* addi R4, R11, -30692 */
		/* 820DABD4h case   23:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF881C);
		/* 820DABD4h case   23:*/		return 0x820DABD8;
		  /* 820DABD8h */ case   24:  		/* mr R3, R31 */
		/* 820DABD8h case   24:*/		regs.R3 = regs.R31;
		/* 820DABD8h case   24:*/		return 0x820DABDC;
		  /* 820DABDCh */ case   25:  		/* bl -2820 */
		/* 820DABDCh case   25:*/		regs.LR = 0x820DABE0; return 0x820DA0D8;
		/* 820DABDCh case   25:*/		return 0x820DABE0;
		  /* 820DABE0h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820DABE0h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DABE0h case   26:*/		return 0x820DABE4;
		  /* 820DABE4h */ case   27:  		/* bc 12, CR0_LT, 88 */
		/* 820DABE4h case   27:*/		if ( regs.CR[0].lt ) { return 0x820DAC3C;  }
		/* 820DABE4h case   27:*/		return 0x820DABE8;
		  /* 820DABE8h */ case   28:  		/* lis R11, -32254 */
		/* 820DABE8h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DABE8h case   28:*/		return 0x820DABEC;
		  /* 820DABECh */ case   29:  		/* mr R7, R30 */
		/* 820DABECh case   29:*/		regs.R7 = regs.R30;
		/* 820DABECh case   29:*/		return 0x820DABF0;
	}
	return 0x820DABF0;
} // Block from 820DAB78h-820DABF0h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820DABF0h
// Function '?EmitGenOutMaskSW@C30SWProgram@D3DXShader@@IAAJK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DABF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DABF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DABF0);
		  /* 820DABF0h */ case    0:  		/* addi R5, R11, -30664 */
		/* 820DABF0h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF8838);
		/* 820DABF0h case    0:*/		return 0x820DABF4;
		  /* 820DABF4h */ case    1:  		/* mr R6, R28 */
		/* 820DABF4h case    1:*/		regs.R6 = regs.R28;
		/* 820DABF4h case    1:*/		return 0x820DABF8;
		  /* 820DABF8h */ case    2:  		/* li R4, 64 */
		/* 820DABF8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x40);
		/* 820DABF8h case    2:*/		return 0x820DABFC;
		  /* 820DABFCh */ case    3:  		/* addi R3, R1, 112 */
		/* 820DABFCh case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 820DABFCh case    3:*/		return 0x820DAC00;
		  /* 820DAC00h */ case    4:  		/* bl -230848 */
		/* 820DAC00h case    4:*/		regs.LR = 0x820DAC04; return 0x820A2640;
		/* 820DAC00h case    4:*/		return 0x820DAC04;
		  /* 820DAC04h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 820DAC04h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DAC04h case    5:*/		return 0x820DAC08;
		  /* 820DAC08h */ case    6:  		/* addi R4, R1, 112 */
		/* 820DAC08h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820DAC08h case    6:*/		return 0x820DAC0C;
		  /* 820DAC0Ch */ case    7:  		/* mr R3, R31 */
		/* 820DAC0Ch case    7:*/		regs.R3 = regs.R31;
		/* 820DAC0Ch case    7:*/		return 0x820DAC10;
		  /* 820DAC10h */ case    8:  		/* lwz R11, <#[R11 + 472]> */
		/* 820DAC10h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001D8) );
		/* 820DAC10h case    8:*/		return 0x820DAC14;
		  /* 820DAC14h */ case    9:  		/* mtspr CTR, R11 */
		/* 820DAC14h case    9:*/		regs.CTR = regs.R11;
		/* 820DAC14h case    9:*/		return 0x820DAC18;
		  /* 820DAC18h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 820DAC18h case   10:*/		if ( 1 ) { regs.LR = 0x820DAC1C; return (uint32)regs.CTR; }
		/* 820DAC18h case   10:*/		return 0x820DAC1C;
		  /* 820DAC1Ch */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820DAC1Ch case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAC1Ch case   11:*/		return 0x820DAC20;
		  /* 820DAC20h */ case   12:  		/* bc 12, CR0_LT, 28 */
		/* 820DAC20h case   12:*/		if ( regs.CR[0].lt ) { return 0x820DAC3C;  }
		/* 820DAC20h case   12:*/		return 0x820DAC24;
		  /* 820DAC24h */ case   13:  		/* lis R11, -32254 */
		/* 820DAC24h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAC24h case   13:*/		return 0x820DAC28;
		  /* 820DAC28h */ case   14:  		/* mr R3, R31 */
		/* 820DAC28h case   14:*/		regs.R3 = regs.R31;
		/* 820DAC28h case   14:*/		return 0x820DAC2C;
		  /* 820DAC2Ch */ case   15:  		/* addi R4, R11, -30656 */
		/* 820DAC2Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8840);
		/* 820DAC2Ch case   15:*/		return 0x820DAC30;
		  /* 820DAC30h */ case   16:  		/* bl -2904 */
		/* 820DAC30h case   16:*/		regs.LR = 0x820DAC34; return 0x820DA0D8;
		/* 820DAC30h case   16:*/		return 0x820DAC34;
		  /* 820DAC34h */ case   17:  		/* srawi R11, R3, 31 */
		/* 820DAC34h case   17:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820DAC34h case   17:*/		return 0x820DAC38;
		  /* 820DAC38h */ case   18:  		/* and R3, R11, R3 */
		/* 820DAC38h case   18:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820DAC38h case   18:*/		return 0x820DAC3C;
	}
	return 0x820DAC3C;
} // Block from 820DABF0h-820DAC3Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 820DAC3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAC3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAC3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAC3C);
		  /* 820DAC3Ch */ case    0:  		/* addi R1, R1, 224 */
		/* 820DAC3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 820DAC3Ch case    0:*/		return 0x820DAC40;
		  /* 820DAC40h */ case    1:  		/* b -301464 */
		/* 820DAC40h case    1:*/		return 0x820912A8;
		/* 820DAC40h case    1:*/		return 0x820DAC44;
		  /* 820DAC44h */ case    2:  		/* nop */
		/* 820DAC44h case    2:*/		cpu::op::nop();
		/* 820DAC44h case    2:*/		return 0x820DAC48;
	}
	return 0x820DAC48;
} // Block from 820DAC3Ch-820DAC48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DAC48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAC48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAC48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAC48);
		  /* 820DAC48h */ case    0:  		/* mfspr R12, LR */
		/* 820DAC48h case    0:*/		regs.R12 = regs.LR;
		/* 820DAC48h case    0:*/		return 0x820DAC4C;
		  /* 820DAC4Ch */ case    1:  		/* bl -301556 */
		/* 820DAC4Ch case    1:*/		regs.LR = 0x820DAC50; return 0x82091258;
		/* 820DAC4Ch case    1:*/		return 0x820DAC50;
		  /* 820DAC50h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 820DAC50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 820DAC50h case    2:*/		return 0x820DAC54;
		  /* 820DAC54h */ case    3:  		/* mr R31, R3 */
		/* 820DAC54h case    3:*/		regs.R31 = regs.R3;
		/* 820DAC54h case    3:*/		return 0x820DAC58;
		  /* 820DAC58h */ case    4:  		/* mr R30, R4 */
		/* 820DAC58h case    4:*/		regs.R30 = regs.R4;
		/* 820DAC58h case    4:*/		return 0x820DAC5C;
		  /* 820DAC5Ch */ case    5:  		/* mr R29, R5 */
		/* 820DAC5Ch case    5:*/		regs.R29 = regs.R5;
		/* 820DAC5Ch case    5:*/		return 0x820DAC60;
		  /* 820DAC60h */ case    6:  		/* mr R28, R6 */
		/* 820DAC60h case    6:*/		regs.R28 = regs.R6;
		/* 820DAC60h case    6:*/		return 0x820DAC64;
		  /* 820DAC64h */ case    7:  		/* bl -2740 */
		/* 820DAC64h case    7:*/		regs.LR = 0x820DAC68; return 0x820DA1B0;
		/* 820DAC64h case    7:*/		return 0x820DAC68;
		  /* 820DAC68h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DAC68h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAC68h case    8:*/		return 0x820DAC6C;
		  /* 820DAC6Ch */ case    9:  		/* bc 12, CR0_LT, 84 */
		/* 820DAC6Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x820DACC0;  }
		/* 820DAC6Ch case    9:*/		return 0x820DAC70;
		  /* 820DAC70h */ case   10:  		/* lis R11, -32254 */
		/* 820DAC70h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAC70h case   10:*/		return 0x820DAC74;
		  /* 820DAC74h */ case   11:  		/* mr R7, R30 */
		/* 820DAC74h case   11:*/		regs.R7 = regs.R30;
		/* 820DAC74h case   11:*/		return 0x820DAC78;
		  /* 820DAC78h */ case   12:  		/* addi R4, R11, -30640 */
		/* 820DAC78h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8850);
		/* 820DAC78h case   12:*/		return 0x820DAC7C;
		  /* 820DAC7Ch */ case   13:  		/* mr R6, R28 */
		/* 820DAC7Ch case   13:*/		regs.R6 = regs.R28;
		/* 820DAC7Ch case   13:*/		return 0x820DAC80;
		  /* 820DAC80h */ case   14:  		/* mr R5, R29 */
		/* 820DAC80h case   14:*/		regs.R5 = regs.R29;
		/* 820DAC80h case   14:*/		return 0x820DAC84;
		  /* 820DAC84h */ case   15:  		/* mr R3, R31 */
		/* 820DAC84h case   15:*/		regs.R3 = regs.R31;
		/* 820DAC84h case   15:*/		return 0x820DAC88;
		  /* 820DAC88h */ case   16:  		/* bl -2992 */
		/* 820DAC88h case   16:*/		regs.LR = 0x820DAC8C; return 0x820DA0D8;
		/* 820DAC88h case   16:*/		return 0x820DAC8C;
		  /* 820DAC8Ch */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 820DAC8Ch case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAC8Ch case   17:*/		return 0x820DAC90;
		  /* 820DAC90h */ case   18:  		/* bc 12, CR0_LT, 48 */
		/* 820DAC90h case   18:*/		if ( regs.CR[0].lt ) { return 0x820DACC0;  }
		/* 820DAC90h case   18:*/		return 0x820DAC94;
		  /* 820DAC94h */ case   19:  		/* mr R3, R31 */
		/* 820DAC94h case   19:*/		regs.R3 = regs.R31;
		/* 820DAC94h case   19:*/		return 0x820DAC98;
	}
	return 0x820DAC98;
} // Block from 820DAC48h-820DAC98h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820DAC98h
// Function '?EmitSplatBranchMaskSW@C30SWProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAC98);
		  /* 820DAC98h */ case    0:  		/* bl -2792 */
		/* 820DAC98h case    0:*/		regs.LR = 0x820DAC9C; return 0x820DA1B0;
		/* 820DAC98h case    0:*/		return 0x820DAC9C;
		  /* 820DAC9Ch */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820DAC9Ch case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAC9Ch case    1:*/		return 0x820DACA0;
		  /* 820DACA0h */ case    2:  		/* bc 12, CR0_LT, 32 */
		/* 820DACA0h case    2:*/		if ( regs.CR[0].lt ) { return 0x820DACC0;  }
		/* 820DACA0h case    2:*/		return 0x820DACA4;
		  /* 820DACA4h */ case    3:  		/* lis R11, -32254 */
		/* 820DACA4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DACA4h case    3:*/		return 0x820DACA8;
		  /* 820DACA8h */ case    4:  		/* mr R5, R28 */
		/* 820DACA8h case    4:*/		regs.R5 = regs.R28;
		/* 820DACA8h case    4:*/		return 0x820DACAC;
		  /* 820DACACh */ case    5:  		/* addi R4, R11, -30676 */
		/* 820DACACh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF882C);
		/* 820DACACh case    5:*/		return 0x820DACB0;
		  /* 820DACB0h */ case    6:  		/* mr R3, R31 */
		/* 820DACB0h case    6:*/		regs.R3 = regs.R31;
		/* 820DACB0h case    6:*/		return 0x820DACB4;
		  /* 820DACB4h */ case    7:  		/* bl -3036 */
		/* 820DACB4h case    7:*/		regs.LR = 0x820DACB8; return 0x820DA0D8;
		/* 820DACB4h case    7:*/		return 0x820DACB8;
		  /* 820DACB8h */ case    8:  		/* srawi R11, R3, 31 */
		/* 820DACB8h case    8:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820DACB8h case    8:*/		return 0x820DACBC;
		  /* 820DACBCh */ case    9:  		/* and R3, R11, R3 */
		/* 820DACBCh case    9:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820DACBCh case    9:*/		return 0x820DACC0;
	}
	return 0x820DACC0;
} // Block from 820DAC98h-820DACC0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DACC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DACC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DACC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DACC0);
		  /* 820DACC0h */ case    0:  		/* addi R1, R1, 160 */
		/* 820DACC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820DACC0h case    0:*/		return 0x820DACC4;
		  /* 820DACC4h */ case    1:  		/* b -301596 */
		/* 820DACC4h case    1:*/		return 0x820912A8;
		/* 820DACC4h case    1:*/		return 0x820DACC8;
	}
	return 0x820DACC8;
} // Block from 820DACC0h-820DACC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DACC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DACC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DACC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DACC8);
		  /* 820DACC8h */ case    0:  		/* mfspr R12, LR */
		/* 820DACC8h case    0:*/		regs.R12 = regs.LR;
		/* 820DACC8h case    0:*/		return 0x820DACCC;
		  /* 820DACCCh */ case    1:  		/* bl -301684 */
		/* 820DACCCh case    1:*/		regs.LR = 0x820DACD0; return 0x82091258;
		/* 820DACCCh case    1:*/		return 0x820DACD0;
		  /* 820DACD0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 820DACD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 820DACD0h case    2:*/		return 0x820DACD4;
		  /* 820DACD4h */ case    3:  		/* mr R31, R3 */
		/* 820DACD4h case    3:*/		regs.R31 = regs.R3;
		/* 820DACD4h case    3:*/		return 0x820DACD8;
		  /* 820DACD8h */ case    4:  		/* mr R29, R4 */
		/* 820DACD8h case    4:*/		regs.R29 = regs.R4;
		/* 820DACD8h case    4:*/		return 0x820DACDC;
		  /* 820DACDCh */ case    5:  		/* mr R28, R5 */
		/* 820DACDCh case    5:*/		regs.R28 = regs.R5;
		/* 820DACDCh case    5:*/		return 0x820DACE0;
		  /* 820DACE0h */ case    6:  		/* mr R30, R6 */
		/* 820DACE0h case    6:*/		regs.R30 = regs.R6;
		/* 820DACE0h case    6:*/		return 0x820DACE4;
		  /* 820DACE4h */ case    7:  		/* bl -2868 */
		/* 820DACE4h case    7:*/		regs.LR = 0x820DACE8; return 0x820DA1B0;
		/* 820DACE4h case    7:*/		return 0x820DACE8;
		  /* 820DACE8h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DACE8h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DACE8h case    8:*/		return 0x820DACEC;
		  /* 820DACECh */ case    9:  		/* bc 12, CR0_LT, 84 */
		/* 820DACECh case    9:*/		if ( regs.CR[0].lt ) { return 0x820DAD40;  }
		/* 820DACECh case    9:*/		return 0x820DACF0;
		  /* 820DACF0h */ case   10:  		/* lis R11, -32254 */
		/* 820DACF0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DACF0h case   10:*/		return 0x820DACF4;
		  /* 820DACF4h */ case   11:  		/* mr R5, R30 */
		/* 820DACF4h case   11:*/		regs.R5 = regs.R30;
		/* 820DACF4h case   11:*/		return 0x820DACF8;
		  /* 820DACF8h */ case   12:  		/* addi R4, R11, -30648 */
		/* 820DACF8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8848);
		/* 820DACF8h case   12:*/		return 0x820DACFC;
		  /* 820DACFCh */ case   13:  		/* mr R3, R31 */
		/* 820DACFCh case   13:*/		regs.R3 = regs.R31;
		/* 820DACFCh case   13:*/		return 0x820DAD00;
		  /* 820DAD00h */ case   14:  		/* bl -3112 */
		/* 820DAD00h case   14:*/		regs.LR = 0x820DAD04; return 0x820DA0D8;
		/* 820DAD00h case   14:*/		return 0x820DAD04;
		  /* 820DAD04h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820DAD04h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAD04h case   15:*/		return 0x820DAD08;
		  /* 820DAD08h */ case   16:  		/* bc 12, CR0_LT, 56 */
		/* 820DAD08h case   16:*/		if ( regs.CR[0].lt ) { return 0x820DAD40;  }
		/* 820DAD08h case   16:*/		return 0x820DAD0C;
		  /* 820DAD0Ch */ case   17:  		/* mr R3, R31 */
		/* 820DAD0Ch case   17:*/		regs.R3 = regs.R31;
		/* 820DAD0Ch case   17:*/		return 0x820DAD10;
		  /* 820DAD10h */ case   18:  		/* bl -2912 */
		/* 820DAD10h case   18:*/		regs.LR = 0x820DAD14; return 0x820DA1B0;
		/* 820DAD10h case   18:*/		return 0x820DAD14;
		  /* 820DAD14h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820DAD14h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAD14h case   19:*/		return 0x820DAD18;
		  /* 820DAD18h */ case   20:  		/* bc 12, CR0_LT, 40 */
		/* 820DAD18h case   20:*/		if ( regs.CR[0].lt ) { return 0x820DAD40;  }
		/* 820DAD18h case   20:*/		return 0x820DAD1C;
		  /* 820DAD1Ch */ case   21:  		/* lis R11, -32254 */
		/* 820DAD1Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAD1Ch case   21:*/		return 0x820DAD20;
		  /* 820DAD20h */ case   22:  		/* mr R7, R30 */
		/* 820DAD20h case   22:*/		regs.R7 = regs.R30;
		/* 820DAD20h case   22:*/		return 0x820DAD24;
		  /* 820DAD24h */ case   23:  		/* addi R4, R11, -30624 */
		/* 820DAD24h case   23:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8860);
		/* 820DAD24h case   23:*/		return 0x820DAD28;
		  /* 820DAD28h */ case   24:  		/* mr R6, R28 */
		/* 820DAD28h case   24:*/		regs.R6 = regs.R28;
		/* 820DAD28h case   24:*/		return 0x820DAD2C;
		  /* 820DAD2Ch */ case   25:  		/* mr R5, R29 */
		/* 820DAD2Ch case   25:*/		regs.R5 = regs.R29;
		/* 820DAD2Ch case   25:*/		return 0x820DAD30;
		  /* 820DAD30h */ case   26:  		/* mr R3, R31 */
		/* 820DAD30h case   26:*/		regs.R3 = regs.R31;
		/* 820DAD30h case   26:*/		return 0x820DAD34;
		  /* 820DAD34h */ case   27:  		/* bl -3164 */
		/* 820DAD34h case   27:*/		regs.LR = 0x820DAD38; return 0x820DA0D8;
		/* 820DAD34h case   27:*/		return 0x820DAD38;
		  /* 820DAD38h */ case   28:  		/* srawi R11, R3, 31 */
		/* 820DAD38h case   28:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820DAD38h case   28:*/		return 0x820DAD3C;
		  /* 820DAD3Ch */ case   29:  		/* and R3, R11, R3 */
		/* 820DAD3Ch case   29:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820DAD3Ch case   29:*/		return 0x820DAD40;
	}
	return 0x820DAD40;
} // Block from 820DACC8h-820DAD40h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820DAD40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAD40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAD40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAD40);
		  /* 820DAD40h */ case    0:  		/* addi R1, R1, 160 */
		/* 820DAD40h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820DAD40h case    0:*/		return 0x820DAD44;
		  /* 820DAD44h */ case    1:  		/* b -301724 */
		/* 820DAD44h case    1:*/		return 0x820912A8;
		/* 820DAD44h case    1:*/		return 0x820DAD48;
	}
	return 0x820DAD48;
} // Block from 820DAD40h-820DAD48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DAD48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAD48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAD48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAD48);
		  /* 820DAD48h */ case    0:  		/* mfspr R12, LR */
		/* 820DAD48h case    0:*/		regs.R12 = regs.LR;
		/* 820DAD48h case    0:*/		return 0x820DAD4C;
		  /* 820DAD4Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DAD4Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DAD4Ch case    1:*/		return 0x820DAD50;
		  /* 820DAD50h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820DAD50h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DAD50h case    2:*/		return 0x820DAD54;
		  /* 820DAD54h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820DAD54h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DAD54h case    3:*/		return 0x820DAD58;
	}
	return 0x820DAD58;
} // Block from 820DAD48h-820DAD58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DAD58h
// Function '?EmitReplicatePredicateSW@C30SWProgram@D3DXShader@@IAAJK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAD58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAD58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAD58);
		  /* 820DAD58h */ case    0:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DAD58h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DAD58h case    0:*/		return 0x820DAD5C;
		  /* 820DAD5Ch */ case    1:  		/* lwz R10, <#[R3]> */
		/* 820DAD5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 820DAD5Ch case    1:*/		return 0x820DAD60;
		  /* 820DAD60h */ case    2:  		/* lis R11, -32254 */
		/* 820DAD60h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAD60h case    2:*/		return 0x820DAD64;
		  /* 820DAD64h */ case    3:  		/* lis R9, -32254 */
		/* 820DAD64h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DAD64h case    3:*/		return 0x820DAD68;
		  /* 820DAD68h */ case    4:  		/* addi R30, R11, -31716 */
		/* 820DAD68h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF841C);
		/* 820DAD68h case    4:*/		return 0x820DAD6C;
		  /* 820DAD6Ch */ case    5:  		/* lis R11, -32254 */
		/* 820DAD6Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAD6Ch case    5:*/		return 0x820DAD70;
		  /* 820DAD70h */ case    6:  		/* addi R6, R9, -31680 */
		/* 820DAD70h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0xFFFF8440);
		/* 820DAD70h case    6:*/		return 0x820DAD74;
		  /* 820DAD74h */ case    7:  		/* lwz R10, <#[R10 + 528]> */
		/* 820DAD74h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000210) );
		/* 820DAD74h case    7:*/		return 0x820DAD78;
		  /* 820DAD78h */ case    8:  		/* addi R5, R11, -31700 */
		/* 820DAD78h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF842C);
		/* 820DAD78h case    8:*/		return 0x820DAD7C;
		  /* 820DAD7Ch */ case    9:  		/* mr R4, R30 */
		/* 820DAD7Ch case    9:*/		regs.R4 = regs.R30;
		/* 820DAD7Ch case    9:*/		return 0x820DAD80;
		  /* 820DAD80h */ case   10:  		/* mr R31, R3 */
		/* 820DAD80h case   10:*/		regs.R31 = regs.R3;
		/* 820DAD80h case   10:*/		return 0x820DAD84;
		  /* 820DAD84h */ case   11:  		/* mtspr CTR, R10 */
		/* 820DAD84h case   11:*/		regs.CTR = regs.R10;
		/* 820DAD84h case   11:*/		return 0x820DAD88;
		  /* 820DAD88h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 820DAD88h case   12:*/		if ( 1 ) { regs.LR = 0x820DAD8C; return (uint32)regs.CTR; }
		/* 820DAD88h case   12:*/		return 0x820DAD8C;
		  /* 820DAD8Ch */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DAD8Ch case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAD8Ch case   13:*/		return 0x820DAD90;
		  /* 820DAD90h */ case   14:  		/* bc 12, CR0_LT, 144 */
		/* 820DAD90h case   14:*/		if ( regs.CR[0].lt ) { return 0x820DAE20;  }
		/* 820DAD90h case   14:*/		return 0x820DAD94;
		  /* 820DAD94h */ case   15:  		/* lwz R11, <#[R31 + 1808]> */
		/* 820DAD94h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000710) );
		/* 820DAD94h case   15:*/		return 0x820DAD98;
		  /* 820DAD98h */ case   16:  		/* addi R11, R11, 419 */
		/* 820DAD98h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1A3);
		/* 820DAD98h case   16:*/		return 0x820DAD9C;
		  /* 820DAD9Ch */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DAD9Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DAD9Ch case   17:*/		return 0x820DADA0;
		  /* 820DADA0h */ case   18:  		/* lwzx R11, <#[R11 + R31]> */
		/* 820DADA0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 820DADA0h case   18:*/		return 0x820DADA4;
		  /* 820DADA4h */ case   19:  		/* cmpwi CR6, R11, 2 */
		/* 820DADA4h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 820DADA4h case   19:*/		return 0x820DADA8;
		  /* 820DADA8h */ case   20:  		/* bc 12, CR6_EQ, 144 */
		/* 820DADA8h case   20:*/		if ( regs.CR[6].eq ) { return 0x820DAE38;  }
		/* 820DADA8h case   20:*/		return 0x820DADAC;
		  /* 820DADACh */ case   21:  		/* cmpwi CR6, R11, 3 */
		/* 820DADACh case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 820DADACh case   21:*/		return 0x820DADB0;
		  /* 820DADB0h */ case   22:  		/* bc 12, CR6_EQ, 136 */
		/* 820DADB0h case   22:*/		if ( regs.CR[6].eq ) { return 0x820DAE38;  }
		/* 820DADB0h case   22:*/		return 0x820DADB4;
		  /* 820DADB4h */ case   23:  		/* mr R3, R31 */
		/* 820DADB4h case   23:*/		regs.R3 = regs.R31;
		/* 820DADB4h case   23:*/		return 0x820DADB8;
		  /* 820DADB8h */ case   24:  		/* bl -3080 */
		/* 820DADB8h case   24:*/		regs.LR = 0x820DADBC; return 0x820DA1B0;
		/* 820DADB8h case   24:*/		return 0x820DADBC;
		  /* 820DADBCh */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820DADBCh case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DADBCh case   25:*/		return 0x820DADC0;
		  /* 820DADC0h */ case   26:  		/* bc 12, CR0_LT, 96 */
		/* 820DADC0h case   26:*/		if ( regs.CR[0].lt ) { return 0x820DAE20;  }
		/* 820DADC0h case   26:*/		return 0x820DADC4;
		  /* 820DADC4h */ case   27:  		/* lis R11, -32254 */
		/* 820DADC4h case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DADC4h case   27:*/		return 0x820DADC8;
		  /* 820DADC8h */ case   28:  		/* mr R3, R31 */
		/* 820DADC8h case   28:*/		regs.R3 = regs.R31;
		/* 820DADC8h case   28:*/		return 0x820DADCC;
		  /* 820DADCCh */ case   29:  		/* addi R4, R11, -30584 */
		/* 820DADCCh case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8888);
		/* 820DADCCh case   29:*/		return 0x820DADD0;
		  /* 820DADD0h */ case   30:  		/* bl -3320 */
		/* 820DADD0h case   30:*/		regs.LR = 0x820DADD4; return 0x820DA0D8;
		/* 820DADD0h case   30:*/		return 0x820DADD4;
		  /* 820DADD4h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820DADD4h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DADD4h case   31:*/		return 0x820DADD8;
		  /* 820DADD8h */ case   32:  		/* bc 12, CR0_LT, 72 */
		/* 820DADD8h case   32:*/		if ( regs.CR[0].lt ) { return 0x820DAE20;  }
		/* 820DADD8h case   32:*/		return 0x820DADDC;
		  /* 820DADDCh */ case   33:  		/* lwz R11, <#[R31]> */
		/* 820DADDCh case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DADDCh case   33:*/		return 0x820DADE0;
		  /* 820DADE0h */ case   34:  		/* lis R10, -32254 */
		/* 820DADE0h case   34:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DADE0h case   34:*/		return 0x820DADE4;
		  /* 820DADE4h */ case   35:  		/* mr R4, R30 */
		/* 820DADE4h case   35:*/		regs.R4 = regs.R30;
		/* 820DADE4h case   35:*/		return 0x820DADE8;
		  /* 820DADE8h */ case   36:  		/* addi R5, R10, -30600 */
		/* 820DADE8h case   36:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF8878);
		/* 820DADE8h case   36:*/		return 0x820DADEC;
		  /* 820DADECh */ case   37:  		/* mr R3, R31 */
		/* 820DADECh case   37:*/		regs.R3 = regs.R31;
		/* 820DADECh case   37:*/		return 0x820DADF0;
		  /* 820DADF0h */ case   38:  		/* lwz R11, <#[R11 + 460]> */
		/* 820DADF0h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001CC) );
		/* 820DADF0h case   38:*/		return 0x820DADF4;
		  /* 820DADF4h */ case   39:  		/* mtspr CTR, R11 */
		/* 820DADF4h case   39:*/		regs.CTR = regs.R11;
		/* 820DADF4h case   39:*/		return 0x820DADF8;
		  /* 820DADF8h */ case   40:  		/* bcctrl 20, CR0_LT */
		/* 820DADF8h case   40:*/		if ( 1 ) { regs.LR = 0x820DADFC; return (uint32)regs.CTR; }
		/* 820DADF8h case   40:*/		return 0x820DADFC;
		  /* 820DADFCh */ case   41:  		/* cmpwi CR0, R3, 0 */
		/* 820DADFCh case   41:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DADFCh case   41:*/		return 0x820DAE00;
		  /* 820DAE00h */ case   42:  		/* bc 12, CR0_LT, 32 */
		/* 820DAE00h case   42:*/		if ( regs.CR[0].lt ) { return 0x820DAE20;  }
		/* 820DAE00h case   42:*/		return 0x820DAE04;
		  /* 820DAE04h */ case   43:  		/* lis R11, -32254 */
		/* 820DAE04h case   43:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAE04h case   43:*/		return 0x820DAE08;
		  /* 820DAE08h */ case   44:  		/* addi R4, R11, -30656 */
		/* 820DAE08h case   44:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8840);
		/* 820DAE08h case   44:*/		return 0x820DAE0C;
		  /* 820DAE0Ch */ case   45:  		/* mr R3, R31 */
		/* 820DAE0Ch case   45:*/		regs.R3 = regs.R31;
		/* 820DAE0Ch case   45:*/		return 0x820DAE10;
		  /* 820DAE10h */ case   46:  		/* bl -3384 */
		/* 820DAE10h case   46:*/		regs.LR = 0x820DAE14; return 0x820DA0D8;
		/* 820DAE10h case   46:*/		return 0x820DAE14;
		  /* 820DAE14h */ case   47:  		/* cmpwi CR0, R3, 0 */
		/* 820DAE14h case   47:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAE14h case   47:*/		return 0x820DAE18;
		  /* 820DAE18h */ case   48:  		/* bc 12, CR0_LT, 8 */
		/* 820DAE18h case   48:*/		if ( regs.CR[0].lt ) { return 0x820DAE20;  }
		/* 820DAE18h case   48:*/		return 0x820DAE1C;
		  /* 820DAE1Ch */ case   49:  		/* li R3, 0 */
		/* 820DAE1Ch case   49:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DAE1Ch case   49:*/		return 0x820DAE20;
	}
	return 0x820DAE20;
} // Block from 820DAD58h-820DAE20h (50 instructions)

//////////////////////////////////////////////////////
// Block at 820DAE20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAE20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAE20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAE20);
		  /* 820DAE20h */ case    0:  		/* addi R1, R1, 128 */
		/* 820DAE20h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DAE20h case    0:*/		return 0x820DAE24;
		  /* 820DAE24h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DAE24h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DAE24h case    1:*/		return 0x820DAE28;
		  /* 820DAE28h */ case    2:  		/* mtspr LR, R12 */
		/* 820DAE28h case    2:*/		regs.LR = regs.R12;
		/* 820DAE28h case    2:*/		return 0x820DAE2C;
		  /* 820DAE2Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 820DAE2Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DAE2Ch case    3:*/		return 0x820DAE30;
		  /* 820DAE30h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820DAE30h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DAE30h case    4:*/		return 0x820DAE34;
		  /* 820DAE34h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820DAE34h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DAE34h case    5:*/		return 0x820DAE38;
	}
	return 0x820DAE38;
} // Block from 820DAE20h-820DAE38h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DAE38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAE38);
		  /* 820DAE38h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820DAE38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DAE38h case    0:*/		return 0x820DAE3C;
		  /* 820DAE3Ch */ case    1:  		/* lis R10, -32254 */
		/* 820DAE3Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DAE3Ch case    1:*/		return 0x820DAE40;
		  /* 820DAE40h */ case    2:  		/* mr R3, R31 */
		/* 820DAE40h case    2:*/		regs.R3 = regs.R31;
		/* 820DAE40h case    2:*/		return 0x820DAE44;
		  /* 820DAE44h */ case    3:  		/* addi R4, R10, -30600 */
		/* 820DAE44h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8878);
		/* 820DAE44h case    3:*/		return 0x820DAE48;
		  /* 820DAE48h */ case    4:  		/* lwz R11, <#[R11 + 564]> */
		/* 820DAE48h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000234) );
		/* 820DAE48h case    4:*/		return 0x820DAE4C;
		  /* 820DAE4Ch */ case    5:  		/* mtspr CTR, R11 */
		/* 820DAE4Ch case    5:*/		regs.CTR = regs.R11;
		/* 820DAE4Ch case    5:*/		return 0x820DAE50;
		  /* 820DAE50h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 820DAE50h case    6:*/		if ( 1 ) { regs.LR = 0x820DAE54; return (uint32)regs.CTR; }
		/* 820DAE50h case    6:*/		return 0x820DAE54;
		  /* 820DAE54h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DAE54h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAE54h case    7:*/		return 0x820DAE58;
	}
	return 0x820DAE58;
} // Block from 820DAE38h-820DAE58h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820DAE58h
// Function '?EmitPredSelectSW@C30SWProgram@D3DXShader@@IAAJPBDKHHPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAE58);
		  /* 820DAE58h */ case    0:  		/* bc 12, CR0_LT, -56 */
		/* 820DAE58h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DAE20;  }
		/* 820DAE58h case    0:*/		return 0x820DAE5C;
		  /* 820DAE5Ch */ case    1:  		/* lis R11, -32254 */
		/* 820DAE5Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAE5Ch case    1:*/		return 0x820DAE60;
		  /* 820DAE60h */ case    2:  		/* addi R4, R11, -30604 */
		/* 820DAE60h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 820DAE60h case    2:*/		return 0x820DAE64;
		  /* 820DAE64h */ case    3:  		/* b -88 */
		/* 820DAE64h case    3:*/		return 0x820DAE0C;
		/* 820DAE64h case    3:*/		return 0x820DAE68;
	}
	return 0x820DAE68;
} // Block from 820DAE58h-820DAE68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DAE68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAE68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAE68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAE68);
		  /* 820DAE68h */ case    0:  		/* mfspr R12, LR */
		/* 820DAE68h case    0:*/		regs.R12 = regs.LR;
		/* 820DAE68h case    0:*/		return 0x820DAE6C;
		  /* 820DAE6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DAE6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DAE6Ch case    1:*/		return 0x820DAE70;
		  /* 820DAE70h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820DAE70h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DAE70h case    2:*/		return 0x820DAE74;
		  /* 820DAE74h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820DAE74h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DAE74h case    3:*/		return 0x820DAE78;
		  /* 820DAE78h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DAE78h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DAE78h case    4:*/		return 0x820DAE7C;
		  /* 820DAE7Ch */ case    5:  		/* mr R31, R3 */
		/* 820DAE7Ch case    5:*/		regs.R31 = regs.R3;
		/* 820DAE7Ch case    5:*/		return 0x820DAE80;
		  /* 820DAE80h */ case    6:  		/* mr R30, R4 */
		/* 820DAE80h case    6:*/		regs.R30 = regs.R4;
		/* 820DAE80h case    6:*/		return 0x820DAE84;
		  /* 820DAE84h */ case    7:  		/* bl -3284 */
		/* 820DAE84h case    7:*/		regs.LR = 0x820DAE88; return 0x820DA1B0;
		/* 820DAE84h case    7:*/		return 0x820DAE88;
		  /* 820DAE88h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DAE88h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAE88h case    8:*/		return 0x820DAE8C;
		  /* 820DAE8Ch */ case    9:  		/* bc 12, CR0_LT, 84 */
		/* 820DAE8Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x820DAEE0;  }
		/* 820DAE8Ch case    9:*/		return 0x820DAE90;
		  /* 820DAE90h */ case   10:  		/* lis R11, -32254 */
		/* 820DAE90h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAE90h case   10:*/		return 0x820DAE94;
		  /* 820DAE94h */ case   11:  		/* mr R5, R30 */
		/* 820DAE94h case   11:*/		regs.R5 = regs.R30;
		/* 820DAE94h case   11:*/		return 0x820DAE98;
		  /* 820DAE98h */ case   12:  		/* addi R4, R11, -30692 */
		/* 820DAE98h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF881C);
		/* 820DAE98h case   12:*/		return 0x820DAE9C;
		  /* 820DAE9Ch */ case   13:  		/* mr R3, R31 */
		/* 820DAE9Ch case   13:*/		regs.R3 = regs.R31;
		/* 820DAE9Ch case   13:*/		return 0x820DAEA0;
		  /* 820DAEA0h */ case   14:  		/* bl -3528 */
		/* 820DAEA0h case   14:*/		regs.LR = 0x820DAEA4; return 0x820DA0D8;
		/* 820DAEA0h case   14:*/		return 0x820DAEA4;
		  /* 820DAEA4h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820DAEA4h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAEA4h case   15:*/		return 0x820DAEA8;
		  /* 820DAEA8h */ case   16:  		/* bc 12, CR0_LT, 56 */
		/* 820DAEA8h case   16:*/		if ( regs.CR[0].lt ) { return 0x820DAEE0;  }
		/* 820DAEA8h case   16:*/		return 0x820DAEAC;
		  /* 820DAEACh */ case   17:  		/* lwz R11, <#[R31]> */
		/* 820DAEACh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DAEACh case   17:*/		return 0x820DAEB0;
		  /* 820DAEB0h */ case   18:  		/* mr R3, R31 */
		/* 820DAEB0h case   18:*/		regs.R3 = regs.R31;
		/* 820DAEB0h case   18:*/		return 0x820DAEB4;
		  /* 820DAEB4h */ case   19:  		/* lwz R11, <#[R11 + 392]> */
		/* 820DAEB4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000188) );
		/* 820DAEB4h case   19:*/		return 0x820DAEB8;
		  /* 820DAEB8h */ case   20:  		/* mtspr CTR, R11 */
		/* 820DAEB8h case   20:*/		regs.CTR = regs.R11;
		/* 820DAEB8h case   20:*/		return 0x820DAEBC;
		  /* 820DAEBCh */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 820DAEBCh case   21:*/		if ( 1 ) { regs.LR = 0x820DAEC0; return (uint32)regs.CTR; }
		/* 820DAEBCh case   21:*/		return 0x820DAEC0;
		  /* 820DAEC0h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 820DAEC0h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAEC0h case   22:*/		return 0x820DAEC4;
		  /* 820DAEC4h */ case   23:  		/* bc 12, CR0_LT, 28 */
		/* 820DAEC4h case   23:*/		if ( regs.CR[0].lt ) { return 0x820DAEE0;  }
		/* 820DAEC4h case   23:*/		return 0x820DAEC8;
		  /* 820DAEC8h */ case   24:  		/* lis R11, -32254 */
		/* 820DAEC8h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAEC8h case   24:*/		return 0x820DAECC;
		  /* 820DAECCh */ case   25:  		/* mr R3, R31 */
		/* 820DAECCh case   25:*/		regs.R3 = regs.R31;
		/* 820DAECCh case   25:*/		return 0x820DAED0;
		  /* 820DAED0h */ case   26:  		/* addi R4, R11, -30768 */
		/* 820DAED0h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF87D0);
		/* 820DAED0h case   26:*/		return 0x820DAED4;
		  /* 820DAED4h */ case   27:  		/* bl -3580 */
		/* 820DAED4h case   27:*/		regs.LR = 0x820DAED8; return 0x820DA0D8;
		/* 820DAED4h case   27:*/		return 0x820DAED8;
		  /* 820DAED8h */ case   28:  		/* srawi R11, R3, 31 */
		/* 820DAED8h case   28:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820DAED8h case   28:*/		return 0x820DAEDC;
		  /* 820DAEDCh */ case   29:  		/* and R3, R11, R3 */
		/* 820DAEDCh case   29:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820DAEDCh case   29:*/		return 0x820DAEE0;
	}
	return 0x820DAEE0;
} // Block from 820DAE68h-820DAEE0h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820DAEE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAEE0);
		  /* 820DAEE0h */ case    0:  		/* addi R1, R1, 128 */
		/* 820DAEE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DAEE0h case    0:*/		return 0x820DAEE4;
		  /* 820DAEE4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DAEE4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DAEE4h case    1:*/		return 0x820DAEE8;
		  /* 820DAEE8h */ case    2:  		/* mtspr LR, R12 */
		/* 820DAEE8h case    2:*/		regs.LR = regs.R12;
		/* 820DAEE8h case    2:*/		return 0x820DAEEC;
		  /* 820DAEECh */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 820DAEECh case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DAEECh case    3:*/		return 0x820DAEF0;
		  /* 820DAEF0h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820DAEF0h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DAEF0h case    4:*/		return 0x820DAEF4;
		  /* 820DAEF4h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820DAEF4h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DAEF4h case    5:*/		return 0x820DAEF8;
	}
	return 0x820DAEF8;
} // Block from 820DAEE0h-820DAEF8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DAEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAEF8);
		  /* 820DAEF8h */ case    0:  		/* mfspr R12, LR */
		/* 820DAEF8h case    0:*/		regs.R12 = regs.LR;
		/* 820DAEF8h case    0:*/		return 0x820DAEFC;
		  /* 820DAEFCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DAEFCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DAEFCh case    1:*/		return 0x820DAF00;
		  /* 820DAF00h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820DAF00h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DAF00h case    2:*/		return 0x820DAF04;
		  /* 820DAF04h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820DAF04h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DAF04h case    3:*/		return 0x820DAF08;
		  /* 820DAF08h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DAF08h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DAF08h case    4:*/		return 0x820DAF0C;
		  /* 820DAF0Ch */ case    5:  		/* lwz R11, <#[R3]> */
		/* 820DAF0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820DAF0Ch case    5:*/		return 0x820DAF10;
		  /* 820DAF10h */ case    6:  		/* mr R31, R3 */
		/* 820DAF10h case    6:*/		regs.R31 = regs.R3;
		/* 820DAF10h case    6:*/		return 0x820DAF14;
		  /* 820DAF14h */ case    7:  		/* lwz R11, <#[R11 + 540]> */
		/* 820DAF14h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000021C) );
		/* 820DAF14h case    7:*/		return 0x820DAF18;
		  /* 820DAF18h */ case    8:  		/* mtspr CTR, R11 */
		/* 820DAF18h case    8:*/		regs.CTR = regs.R11;
		/* 820DAF18h case    8:*/		return 0x820DAF1C;
		  /* 820DAF1Ch */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 820DAF1Ch case    9:*/		if ( 1 ) { regs.LR = 0x820DAF20; return (uint32)regs.CTR; }
		/* 820DAF1Ch case    9:*/		return 0x820DAF20;
		  /* 820DAF20h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DAF20h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAF20h case   10:*/		return 0x820DAF24;
		  /* 820DAF24h */ case   11:  		/* bc 12, CR0_LT, 288 */
		/* 820DAF24h case   11:*/		if ( regs.CR[0].lt ) { return 0x820DB044;  }
		/* 820DAF24h case   11:*/		return 0x820DAF28;
		  /* 820DAF28h */ case   12:  		/* lwz R10, <#[R31]> */
		/* 820DAF28h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820DAF28h case   12:*/		return 0x820DAF2C;
		  /* 820DAF2Ch */ case   13:  		/* lis R11, -32254 */
		/* 820DAF2Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAF2Ch case   13:*/		return 0x820DAF30;
		  /* 820DAF30h */ case   14:  		/* li R6, 1 */
		/* 820DAF30h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820DAF30h case   14:*/		return 0x820DAF34;
		  /* 820DAF34h */ case   15:  		/* addi R30, R11, -31716 */
		/* 820DAF34h case   15:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF841C);
		/* 820DAF34h case   15:*/		return 0x820DAF38;
		  /* 820DAF38h */ case   16:  		/* li R5, 1 */
		/* 820DAF38h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820DAF38h case   16:*/		return 0x820DAF3C;
		  /* 820DAF3Ch */ case   17:  		/* mr R4, R30 */
		/* 820DAF3Ch case   17:*/		regs.R4 = regs.R30;
		/* 820DAF3Ch case   17:*/		return 0x820DAF40;
		  /* 820DAF40h */ case   18:  		/* lwz R11, <#[R10 + 568]> */
		/* 820DAF40h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000238) );
		/* 820DAF40h case   18:*/		return 0x820DAF44;
		  /* 820DAF44h */ case   19:  		/* mr R3, R31 */
		/* 820DAF44h case   19:*/		regs.R3 = regs.R31;
		/* 820DAF44h case   19:*/		return 0x820DAF48;
		  /* 820DAF48h */ case   20:  		/* mtspr CTR, R11 */
		/* 820DAF48h case   20:*/		regs.CTR = regs.R11;
		/* 820DAF48h case   20:*/		return 0x820DAF4C;
		  /* 820DAF4Ch */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 820DAF4Ch case   21:*/		if ( 1 ) { regs.LR = 0x820DAF50; return (uint32)regs.CTR; }
		/* 820DAF4Ch case   21:*/		return 0x820DAF50;
		  /* 820DAF50h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 820DAF50h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAF50h case   22:*/		return 0x820DAF54;
		  /* 820DAF54h */ case   23:  		/* bc 12, CR0_LT, 240 */
		/* 820DAF54h case   23:*/		if ( regs.CR[0].lt ) { return 0x820DB044;  }
		/* 820DAF54h case   23:*/		return 0x820DAF58;
		  /* 820DAF58h */ case   24:  		/* lwz R11, <#[R31]> */
		/* 820DAF58h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DAF58h case   24:*/		return 0x820DAF5C;
		  /* 820DAF5Ch */ case   25:  		/* lis R10, -32254 */
		/* 820DAF5Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DAF5Ch case   25:*/		return 0x820DAF60;
		  /* 820DAF60h */ case   26:  		/* mr R4, R30 */
		/* 820DAF60h case   26:*/		regs.R4 = regs.R30;
		/* 820DAF60h case   26:*/		return 0x820DAF64;
		  /* 820DAF64h */ case   27:  		/* addi R5, R10, -30684 */
		/* 820DAF64h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF8824);
		/* 820DAF64h case   27:*/		return 0x820DAF68;
		  /* 820DAF68h */ case   28:  		/* mr R3, R31 */
		/* 820DAF68h case   28:*/		regs.R3 = regs.R31;
		/* 820DAF68h case   28:*/		return 0x820DAF6C;
		  /* 820DAF6Ch */ case   29:  		/* lwz R11, <#[R11 + 488]> */
		/* 820DAF6Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001E8) );
		/* 820DAF6Ch case   29:*/		return 0x820DAF70;
		  /* 820DAF70h */ case   30:  		/* mtspr CTR, R11 */
		/* 820DAF70h case   30:*/		regs.CTR = regs.R11;
		/* 820DAF70h case   30:*/		return 0x820DAF74;
		  /* 820DAF74h */ case   31:  		/* bcctrl 20, CR0_LT */
		/* 820DAF74h case   31:*/		if ( 1 ) { regs.LR = 0x820DAF78; return (uint32)regs.CTR; }
		/* 820DAF74h case   31:*/		return 0x820DAF78;
		  /* 820DAF78h */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 820DAF78h case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAF78h case   32:*/		return 0x820DAF7C;
		  /* 820DAF7Ch */ case   33:  		/* bc 12, CR0_LT, 200 */
		/* 820DAF7Ch case   33:*/		if ( regs.CR[0].lt ) { return 0x820DB044;  }
		/* 820DAF7Ch case   33:*/		return 0x820DAF80;
		  /* 820DAF80h */ case   34:  		/* mr R3, R31 */
		/* 820DAF80h case   34:*/		regs.R3 = regs.R31;
		/* 820DAF80h case   34:*/		return 0x820DAF84;
		  /* 820DAF84h */ case   35:  		/* bl -3540 */
		/* 820DAF84h case   35:*/		regs.LR = 0x820DAF88; return 0x820DA1B0;
		/* 820DAF84h case   35:*/		return 0x820DAF88;
		  /* 820DAF88h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820DAF88h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAF88h case   36:*/		return 0x820DAF8C;
		  /* 820DAF8Ch */ case   37:  		/* bc 12, CR0_LT, 184 */
		/* 820DAF8Ch case   37:*/		if ( regs.CR[0].lt ) { return 0x820DB044;  }
		/* 820DAF8Ch case   37:*/		return 0x820DAF90;
		  /* 820DAF90h */ case   38:  		/* lis R11, -32254 */
		/* 820DAF90h case   38:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAF90h case   38:*/		return 0x820DAF94;
		  /* 820DAF94h */ case   39:  		/* mr R3, R31 */
		/* 820DAF94h case   39:*/		regs.R3 = regs.R31;
		/* 820DAF94h case   39:*/		return 0x820DAF98;
		  /* 820DAF98h */ case   40:  		/* addi R4, R11, -30556 */
		/* 820DAF98h case   40:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88A4);
		/* 820DAF98h case   40:*/		return 0x820DAF9C;
		  /* 820DAF9Ch */ case   41:  		/* bl -3780 */
		/* 820DAF9Ch case   41:*/		regs.LR = 0x820DAFA0; return 0x820DA0D8;
		/* 820DAF9Ch case   41:*/		return 0x820DAFA0;
		  /* 820DAFA0h */ case   42:  		/* cmpwi CR0, R3, 0 */
		/* 820DAFA0h case   42:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAFA0h case   42:*/		return 0x820DAFA4;
		  /* 820DAFA4h */ case   43:  		/* bc 12, CR0_LT, 160 */
		/* 820DAFA4h case   43:*/		if ( regs.CR[0].lt ) { return 0x820DB044;  }
		/* 820DAFA4h case   43:*/		return 0x820DAFA8;
		  /* 820DAFA8h */ case   44:  		/* lwz R11, <#[R31]> */
		/* 820DAFA8h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DAFA8h case   44:*/		return 0x820DAFAC;
		  /* 820DAFACh */ case   45:  		/* mr R3, R31 */
		/* 820DAFACh case   45:*/		regs.R3 = regs.R31;
		/* 820DAFACh case   45:*/		return 0x820DAFB0;
		  /* 820DAFB0h */ case   46:  		/* lwz R11, <#[R11 + 492]> */
		/* 820DAFB0h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001EC) );
		/* 820DAFB0h case   46:*/		return 0x820DAFB4;
		  /* 820DAFB4h */ case   47:  		/* mtspr CTR, R11 */
		/* 820DAFB4h case   47:*/		regs.CTR = regs.R11;
		/* 820DAFB4h case   47:*/		return 0x820DAFB8;
		  /* 820DAFB8h */ case   48:  		/* bcctrl 20, CR0_LT */
		/* 820DAFB8h case   48:*/		if ( 1 ) { regs.LR = 0x820DAFBC; return (uint32)regs.CTR; }
		/* 820DAFB8h case   48:*/		return 0x820DAFBC;
		  /* 820DAFBCh */ case   49:  		/* cmpwi CR0, R3, 0 */
		/* 820DAFBCh case   49:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAFBCh case   49:*/		return 0x820DAFC0;
		  /* 820DAFC0h */ case   50:  		/* bc 12, CR0_LT, 132 */
		/* 820DAFC0h case   50:*/		if ( regs.CR[0].lt ) { return 0x820DB044;  }
		/* 820DAFC0h case   50:*/		return 0x820DAFC4;
		  /* 820DAFC4h */ case   51:  		/* lis R11, -32254 */
		/* 820DAFC4h case   51:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAFC4h case   51:*/		return 0x820DAFC8;
		  /* 820DAFC8h */ case   52:  		/* mr R3, R31 */
		/* 820DAFC8h case   52:*/		regs.R3 = regs.R31;
		/* 820DAFC8h case   52:*/		return 0x820DAFCC;
		  /* 820DAFCCh */ case   53:  		/* addi R4, R11, -30560 */
		/* 820DAFCCh case   53:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88A0);
		/* 820DAFCCh case   53:*/		return 0x820DAFD0;
		  /* 820DAFD0h */ case   54:  		/* bl -3832 */
		/* 820DAFD0h case   54:*/		regs.LR = 0x820DAFD4; return 0x820DA0D8;
		/* 820DAFD0h case   54:*/		return 0x820DAFD4;
		  /* 820DAFD4h */ case   55:  		/* cmpwi CR0, R3, 0 */
		/* 820DAFD4h case   55:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAFD4h case   55:*/		return 0x820DAFD8;
	}
	return 0x820DAFD8;
} // Block from 820DAEF8h-820DAFD8h (56 instructions)

//////////////////////////////////////////////////////
// Block at 820DAFD8h
// Function '?EmitOutMaskSelectSW@C30SWProgram@D3DXShader@@IAAJPBDKHPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DAFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DAFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DAFD8);
		  /* 820DAFD8h */ case    0:  		/* bc 12, CR0_LT, 108 */
		/* 820DAFD8h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DB044;  }
		/* 820DAFD8h case    0:*/		return 0x820DAFDC;
		  /* 820DAFDCh */ case    1:  		/* mr R3, R31 */
		/* 820DAFDCh case    1:*/		regs.R3 = regs.R31;
		/* 820DAFDCh case    1:*/		return 0x820DAFE0;
		  /* 820DAFE0h */ case    2:  		/* bl -3632 */
		/* 820DAFE0h case    2:*/		regs.LR = 0x820DAFE4; return 0x820DA1B0;
		/* 820DAFE0h case    2:*/		return 0x820DAFE4;
		  /* 820DAFE4h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820DAFE4h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAFE4h case    3:*/		return 0x820DAFE8;
		  /* 820DAFE8h */ case    4:  		/* bc 12, CR0_LT, 92 */
		/* 820DAFE8h case    4:*/		if ( regs.CR[0].lt ) { return 0x820DB044;  }
		/* 820DAFE8h case    4:*/		return 0x820DAFEC;
		  /* 820DAFECh */ case    5:  		/* lis R11, -32254 */
		/* 820DAFECh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DAFECh case    5:*/		return 0x820DAFF0;
		  /* 820DAFF0h */ case    6:  		/* mr R3, R31 */
		/* 820DAFF0h case    6:*/		regs.R3 = regs.R31;
		/* 820DAFF0h case    6:*/		return 0x820DAFF4;
		  /* 820DAFF4h */ case    7:  		/* addi R4, R11, -30564 */
		/* 820DAFF4h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF889C);
		/* 820DAFF4h case    7:*/		return 0x820DAFF8;
		  /* 820DAFF8h */ case    8:  		/* bl -3872 */
		/* 820DAFF8h case    8:*/		regs.LR = 0x820DAFFC; return 0x820DA0D8;
		/* 820DAFF8h case    8:*/		return 0x820DAFFC;
		  /* 820DAFFCh */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820DAFFCh case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DAFFCh case    9:*/		return 0x820DB000;
		  /* 820DB000h */ case   10:  		/* bc 12, CR0_LT, 68 */
		/* 820DB000h case   10:*/		if ( regs.CR[0].lt ) { return 0x820DB044;  }
		/* 820DB000h case   10:*/		return 0x820DB004;
		  /* 820DB004h */ case   11:  		/* lwz R11, <#[R31 + 1808]> */
		/* 820DB004h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000710) );
		/* 820DB004h case   11:*/		return 0x820DB008;
		  /* 820DB008h */ case   12:  		/* li R9, 1 */
		/* 820DB008h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 820DB008h case   12:*/		return 0x820DB00C;
		  /* 820DB00Ch */ case   13:  		/* lwz R10, <#[R31 + 1812]> */
		/* 820DB00Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000714) );
		/* 820DB00Ch case   13:*/		return 0x820DB010;
		  /* 820DB010h */ case   14:  		/* mr R3, R31 */
		/* 820DB010h case   14:*/		regs.R3 = regs.R31;
		/* 820DB010h case   14:*/		return 0x820DB014;
		  /* 820DB014h */ case   15:  		/* addi R11, R11, 420 */
		/* 820DB014h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1A4);
		/* 820DB014h case   15:*/		return 0x820DB018;
		  /* 820DB018h */ case   16:  		/* addi R10, R10, 1 */
		/* 820DB018h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820DB018h case   16:*/		return 0x820DB01C;
		  /* 820DB01Ch */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DB01Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DB01Ch case   17:*/		return 0x820DB020;
		  /* 820DB020h */ case   18:  		/* stw R10, <#[R31 + 1812]> */
		/* 820DB020h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000714) );
		/* 820DB020h case   18:*/		return 0x820DB024;
		  /* 820DB024h */ case   19:  		/* stwx R9, <#[R11 + R31]> */
		/* 820DB024h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 820DB024h case   19:*/		return 0x820DB028;
		  /* 820DB028h */ case   20:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DB028h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DB028h case   20:*/		return 0x820DB02C;
		  /* 820DB02Ch */ case   21:  		/* lwz R10, <#[R31 + 1808]> */
		/* 820DB02Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000710) );
		/* 820DB02Ch case   21:*/		return 0x820DB030;
		  /* 820DB030h */ case   22:  		/* addi R10, R10, 1 */
		/* 820DB030h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820DB030h case   22:*/		return 0x820DB034;
		  /* 820DB034h */ case   23:  		/* addi R11, R11, 1 */
		/* 820DB034h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820DB034h case   23:*/		return 0x820DB038;
		  /* 820DB038h */ case   24:  		/* stw R10, <#[R31 + 1808]> */
		/* 820DB038h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000710) );
		/* 820DB038h case   24:*/		return 0x820DB03C;
		  /* 820DB03Ch */ case   25:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DB03Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DB03Ch case   25:*/		return 0x820DB040;
		  /* 820DB040h */ case   26:  		/* bl 117712 */
		/* 820DB040h case   26:*/		regs.LR = 0x820DB044; return 0x820F7C10;
		/* 820DB040h case   26:*/		return 0x820DB044;
	}
	return 0x820DB044;
} // Block from 820DAFD8h-820DB044h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820DB044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB044);
		  /* 820DB044h */ case    0:  		/* addi R1, R1, 128 */
		/* 820DB044h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DB044h case    0:*/		return 0x820DB048;
		  /* 820DB048h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DB048h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DB048h case    1:*/		return 0x820DB04C;
		  /* 820DB04Ch */ case    2:  		/* mtspr LR, R12 */
		/* 820DB04Ch case    2:*/		regs.LR = regs.R12;
		/* 820DB04Ch case    2:*/		return 0x820DB050;
		  /* 820DB050h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 820DB050h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DB050h case    3:*/		return 0x820DB054;
		  /* 820DB054h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820DB054h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DB054h case    4:*/		return 0x820DB058;
		  /* 820DB058h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820DB058h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DB058h case    5:*/		return 0x820DB05C;
	}
	return 0x820DB05C;
} // Block from 820DB044h-820DB05Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DB05Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB05C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB05C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB05C);
		  /* 820DB05Ch */ case    0:  		/* nop */
		/* 820DB05Ch case    0:*/		cpu::op::nop();
		/* 820DB05Ch case    0:*/		return 0x820DB060;
	}
	return 0x820DB060;
} // Block from 820DB05Ch-820DB060h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DB060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB060);
		  /* 820DB060h */ case    0:  		/* mfspr R12, LR */
		/* 820DB060h case    0:*/		regs.R12 = regs.LR;
		/* 820DB060h case    0:*/		return 0x820DB064;
		  /* 820DB064h */ case    1:  		/* bl -302604 */
		/* 820DB064h case    1:*/		regs.LR = 0x820DB068; return 0x82091258;
		/* 820DB064h case    1:*/		return 0x820DB068;
		  /* 820DB068h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 820DB068h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 820DB068h case    2:*/		return 0x820DB06C;
		  /* 820DB06Ch */ case    3:  		/* lwz R11, <#[R3 + 1808]> */
		/* 820DB06Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000710) );
		/* 820DB06Ch case    3:*/		return 0x820DB070;
		  /* 820DB070h */ case    4:  		/* mr R31, R3 */
		/* 820DB070h case    4:*/		regs.R31 = regs.R3;
		/* 820DB070h case    4:*/		return 0x820DB074;
		  /* 820DB074h */ case    5:  		/* addi R11, R11, 419 */
		/* 820DB074h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1A3);
		/* 820DB074h case    5:*/		return 0x820DB078;
		  /* 820DB078h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DB078h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DB078h case    6:*/		return 0x820DB07C;
		  /* 820DB07Ch */ case    7:  		/* lwzx R11, <#[R11 + R3]> */
		/* 820DB07Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 820DB07Ch case    7:*/		return 0x820DB080;
		  /* 820DB080h */ case    8:  		/* cmplwi CR6, R11, 1 */
		/* 820DB080h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820DB080h case    8:*/		return 0x820DB084;
		  /* 820DB084h */ case    9:  		/* bc 12, CR6_LT, 420 */
		/* 820DB084h case    9:*/		if ( regs.CR[6].lt ) { return 0x820DB228;  }
		/* 820DB084h case    9:*/		return 0x820DB088;
		  /* 820DB088h */ case   10:  		/* bc 4, CR6_EQ, 560 */
		/* 820DB088h case   10:*/		if ( !regs.CR[6].eq ) { return 0x820DB2B8;  }
		/* 820DB088h case   10:*/		return 0x820DB08C;
		  /* 820DB08Ch */ case   11:  		/* lwz R11, <#[R3 + 1544]> */
		/* 820DB08Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000608) );
		/* 820DB08Ch case   11:*/		return 0x820DB090;
		  /* 820DB090h */ case   12:  		/* addi R11, R11, -1 */
		/* 820DB090h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DB090h case   12:*/		return 0x820DB094;
		  /* 820DB094h */ case   13:  		/* stw R11, <#[R3 + 1544]> */
		/* 820DB094h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000608) );
		/* 820DB094h case   13:*/		return 0x820DB098;
		  /* 820DB098h */ case   14:  		/* bl -3816 */
		/* 820DB098h case   14:*/		regs.LR = 0x820DB09C; return 0x820DA1B0;
		/* 820DB098h case   14:*/		return 0x820DB09C;
		  /* 820DB09Ch */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820DB09Ch case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB09Ch case   15:*/		return 0x820DB0A0;
		  /* 820DB0A0h */ case   16:  		/* bc 12, CR0_LT, 544 */
		/* 820DB0A0h case   16:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB0A0h case   16:*/		return 0x820DB0A4;
		  /* 820DB0A4h */ case   17:  		/* lis R11, -32254 */
		/* 820DB0A4h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB0A4h case   17:*/		return 0x820DB0A8;
		  /* 820DB0A8h */ case   18:  		/* mr R3, R31 */
		/* 820DB0A8h case   18:*/		regs.R3 = regs.R31;
		/* 820DB0A8h case   18:*/		return 0x820DB0AC;
		  /* 820DB0ACh */ case   19:  		/* addi R4, R11, -30528 */
		/* 820DB0ACh case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88C0);
		/* 820DB0ACh case   19:*/		return 0x820DB0B0;
		  /* 820DB0B0h */ case   20:  		/* bl -4056 */
		/* 820DB0B0h case   20:*/		regs.LR = 0x820DB0B4; return 0x820DA0D8;
		/* 820DB0B0h case   20:*/		return 0x820DB0B4;
		  /* 820DB0B4h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820DB0B4h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB0B4h case   21:*/		return 0x820DB0B8;
		  /* 820DB0B8h */ case   22:  		/* bc 12, CR0_LT, 520 */
		/* 820DB0B8h case   22:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB0B8h case   22:*/		return 0x820DB0BC;
		  /* 820DB0BCh */ case   23:  		/* mr R3, R31 */
		/* 820DB0BCh case   23:*/		regs.R3 = regs.R31;
		/* 820DB0BCh case   23:*/		return 0x820DB0C0;
		  /* 820DB0C0h */ case   24:  		/* bl -3856 */
		/* 820DB0C0h case   24:*/		regs.LR = 0x820DB0C4; return 0x820DA1B0;
		/* 820DB0C0h case   24:*/		return 0x820DB0C4;
		  /* 820DB0C4h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820DB0C4h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB0C4h case   25:*/		return 0x820DB0C8;
		  /* 820DB0C8h */ case   26:  		/* bc 12, CR0_LT, 504 */
		/* 820DB0C8h case   26:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB0C8h case   26:*/		return 0x820DB0CC;
		  /* 820DB0CCh */ case   27:  		/* lis R11, -32254 */
		/* 820DB0CCh case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB0CCh case   27:*/		return 0x820DB0D0;
		  /* 820DB0D0h */ case   28:  		/* mr R3, R31 */
		/* 820DB0D0h case   28:*/		regs.R3 = regs.R31;
		/* 820DB0D0h case   28:*/		return 0x820DB0D4;
		  /* 820DB0D4h */ case   29:  		/* addi R4, R11, -30756 */
		/* 820DB0D4h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF87DC);
		/* 820DB0D4h case   29:*/		return 0x820DB0D8;
		  /* 820DB0D8h */ case   30:  		/* bl -4096 */
		/* 820DB0D8h case   30:*/		regs.LR = 0x820DB0DC; return 0x820DA0D8;
		/* 820DB0D8h case   30:*/		return 0x820DB0DC;
		  /* 820DB0DCh */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820DB0DCh case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB0DCh case   31:*/		return 0x820DB0E0;
		  /* 820DB0E0h */ case   32:  		/* bc 12, CR0_LT, 480 */
		/* 820DB0E0h case   32:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB0E0h case   32:*/		return 0x820DB0E4;
		  /* 820DB0E4h */ case   33:  		/* lis R11, -32254 */
		/* 820DB0E4h case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB0E4h case   33:*/		return 0x820DB0E8;
		  /* 820DB0E8h */ case   34:  		/* lis R10, -32254 */
		/* 820DB0E8h case   34:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DB0E8h case   34:*/		return 0x820DB0EC;
		  /* 820DB0ECh */ case   35:  		/* lis R9, -32254 */
		/* 820DB0ECh case   35:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DB0ECh case   35:*/		return 0x820DB0F0;
		  /* 820DB0F0h */ case   36:  		/* addi R7, R11, -31680 */
		/* 820DB0F0h case   36:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFF8440);
		/* 820DB0F0h case   36:*/		return 0x820DB0F4;
		  /* 820DB0F4h */ case   37:  		/* addi R6, R10, -31700 */
		/* 820DB0F4h case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF842C);
		/* 820DB0F4h case   37:*/		return 0x820DB0F8;
		  /* 820DB0F8h */ case   38:  		/* addi R5, R9, -30540 */
		/* 820DB0F8h case   38:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0xFFFF88B4);
		/* 820DB0F8h case   38:*/		return 0x820DB0FC;
		  /* 820DB0FCh */ case   39:  		/* li R4, 64 */
		/* 820DB0FCh case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x40);
		/* 820DB0FCh case   39:*/		return 0x820DB100;
		  /* 820DB100h */ case   40:  		/* addi R3, R1, 96 */
		/* 820DB100h case   40:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 820DB100h case   40:*/		return 0x820DB104;
		  /* 820DB104h */ case   41:  		/* bl -232132 */
		/* 820DB104h case   41:*/		regs.LR = 0x820DB108; return 0x820A2640;
		/* 820DB104h case   41:*/		return 0x820DB108;
		  /* 820DB108h */ case   42:  		/* lwz R11, <#[R31]> */
		/* 820DB108h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB108h case   42:*/		return 0x820DB10C;
		  /* 820DB10Ch */ case   43:  		/* addi R4, R1, 96 */
		/* 820DB10Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 820DB10Ch case   43:*/		return 0x820DB110;
	}
	return 0x820DB110;
} // Block from 820DB060h-820DB110h (44 instructions)

//////////////////////////////////////////////////////
// Block at 820DB110h
// Function '?EmitBranchMaskSelectSW@C30SWProgram@D3DXShader@@IAAJPBDHPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB110);
		  /* 820DB110h */ case    0:  		/* mr R3, R31 */
		/* 820DB110h case    0:*/		regs.R3 = regs.R31;
		/* 820DB110h case    0:*/		return 0x820DB114;
		  /* 820DB114h */ case    1:  		/* lwz R11, <#[R11 + 472]> */
		/* 820DB114h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001D8) );
		/* 820DB114h case    1:*/		return 0x820DB118;
		  /* 820DB118h */ case    2:  		/* mtspr CTR, R11 */
		/* 820DB118h case    2:*/		regs.CTR = regs.R11;
		/* 820DB118h case    2:*/		return 0x820DB11C;
		  /* 820DB11Ch */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 820DB11Ch case    3:*/		if ( 1 ) { regs.LR = 0x820DB120; return (uint32)regs.CTR; }
		/* 820DB11Ch case    3:*/		return 0x820DB120;
		  /* 820DB120h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820DB120h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB120h case    4:*/		return 0x820DB124;
		  /* 820DB124h */ case    5:  		/* bc 12, CR0_LT, 412 */
		/* 820DB124h case    5:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB124h case    5:*/		return 0x820DB128;
		  /* 820DB128h */ case    6:  		/* lis R11, -32254 */
		/* 820DB128h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB128h case    6:*/		return 0x820DB12C;
		  /* 820DB12Ch */ case    7:  		/* mr R3, R31 */
		/* 820DB12Ch case    7:*/		regs.R3 = regs.R31;
		/* 820DB12Ch case    7:*/		return 0x820DB130;
		  /* 820DB130h */ case    8:  		/* addi R28, R11, -30768 */
		/* 820DB130h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFF87D0);
		/* 820DB130h case    8:*/		return 0x820DB134;
		  /* 820DB134h */ case    9:  		/* mr R4, R28 */
		/* 820DB134h case    9:*/		regs.R4 = regs.R28;
		/* 820DB134h case    9:*/		return 0x820DB138;
		  /* 820DB138h */ case   10:  		/* bl -4192 */
		/* 820DB138h case   10:*/		regs.LR = 0x820DB13C; return 0x820DA0D8;
		/* 820DB138h case   10:*/		return 0x820DB13C;
		  /* 820DB13Ch */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820DB13Ch case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB13Ch case   11:*/		return 0x820DB140;
		  /* 820DB140h */ case   12:  		/* bc 12, CR0_LT, 384 */
		/* 820DB140h case   12:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB140h case   12:*/		return 0x820DB144;
		  /* 820DB144h */ case   13:  		/* mr R3, R31 */
		/* 820DB144h case   13:*/		regs.R3 = regs.R31;
		/* 820DB144h case   13:*/		return 0x820DB148;
		  /* 820DB148h */ case   14:  		/* bl -3992 */
		/* 820DB148h case   14:*/		regs.LR = 0x820DB14C; return 0x820DA1B0;
		/* 820DB148h case   14:*/		return 0x820DB14C;
		  /* 820DB14Ch */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820DB14Ch case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB14Ch case   15:*/		return 0x820DB150;
		  /* 820DB150h */ case   16:  		/* bc 12, CR0_LT, 368 */
		/* 820DB150h case   16:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB150h case   16:*/		return 0x820DB154;
		  /* 820DB154h */ case   17:  		/* lis R11, -32254 */
		/* 820DB154h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB154h case   17:*/		return 0x820DB158;
		  /* 820DB158h */ case   18:  		/* mr R3, R31 */
		/* 820DB158h case   18:*/		regs.R3 = regs.R31;
		/* 820DB158h case   18:*/		return 0x820DB15C;
		  /* 820DB15Ch */ case   19:  		/* addi R4, R11, -30584 */
		/* 820DB15Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8888);
		/* 820DB15Ch case   19:*/		return 0x820DB160;
		  /* 820DB160h */ case   20:  		/* bl -4232 */
		/* 820DB160h case   20:*/		regs.LR = 0x820DB164; return 0x820DA0D8;
		/* 820DB160h case   20:*/		return 0x820DB164;
		  /* 820DB164h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820DB164h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB164h case   21:*/		return 0x820DB168;
		  /* 820DB168h */ case   22:  		/* bc 12, CR0_LT, 344 */
		/* 820DB168h case   22:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB168h case   22:*/		return 0x820DB16C;
		  /* 820DB16Ch */ case   23:  		/* lwz R9, <#[R31]> */
		/* 820DB16Ch case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB16Ch case   23:*/		return 0x820DB170;
		  /* 820DB170h */ case   24:  		/* lis R11, -32254 */
		/* 820DB170h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB170h case   24:*/		return 0x820DB174;
		  /* 820DB174h */ case   25:  		/* lis R10, -32254 */
		/* 820DB174h case   25:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DB174h case   25:*/		return 0x820DB178;
		  /* 820DB178h */ case   26:  		/* addi R30, R11, -31716 */
		/* 820DB178h case   26:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF841C);
		/* 820DB178h case   26:*/		return 0x820DB17C;
		  /* 820DB17Ch */ case   27:  		/* addi R29, R10, -30684 */
		/* 820DB17Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFF8824);
		/* 820DB17Ch case   27:*/		return 0x820DB180;
		  /* 820DB180h */ case   28:  		/* mr R5, R30 */
		/* 820DB180h case   28:*/		regs.R5 = regs.R30;
		/* 820DB180h case   28:*/		return 0x820DB184;
		  /* 820DB184h */ case   29:  		/* lwz R11, <#[R9 + 460]> */
		/* 820DB184h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x000001CC) );
		/* 820DB184h case   29:*/		return 0x820DB188;
		  /* 820DB188h */ case   30:  		/* mr R4, R29 */
		/* 820DB188h case   30:*/		regs.R4 = regs.R29;
		/* 820DB188h case   30:*/		return 0x820DB18C;
		  /* 820DB18Ch */ case   31:  		/* mr R3, R31 */
		/* 820DB18Ch case   31:*/		regs.R3 = regs.R31;
		/* 820DB18Ch case   31:*/		return 0x820DB190;
		  /* 820DB190h */ case   32:  		/* mtspr CTR, R11 */
		/* 820DB190h case   32:*/		regs.CTR = regs.R11;
		/* 820DB190h case   32:*/		return 0x820DB194;
		  /* 820DB194h */ case   33:  		/* bcctrl 20, CR0_LT */
		/* 820DB194h case   33:*/		if ( 1 ) { regs.LR = 0x820DB198; return (uint32)regs.CTR; }
		/* 820DB194h case   33:*/		return 0x820DB198;
		  /* 820DB198h */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 820DB198h case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB198h case   34:*/		return 0x820DB19C;
		  /* 820DB19Ch */ case   35:  		/* bc 12, CR0_LT, 292 */
		/* 820DB19Ch case   35:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB19Ch case   35:*/		return 0x820DB1A0;
		  /* 820DB1A0h */ case   36:  		/* mr R4, R28 */
		/* 820DB1A0h case   36:*/		regs.R4 = regs.R28;
		/* 820DB1A0h case   36:*/		return 0x820DB1A4;
		  /* 820DB1A4h */ case   37:  		/* mr R3, R31 */
		/* 820DB1A4h case   37:*/		regs.R3 = regs.R31;
		/* 820DB1A4h case   37:*/		return 0x820DB1A8;
		  /* 820DB1A8h */ case   38:  		/* bl -4304 */
		/* 820DB1A8h case   38:*/		regs.LR = 0x820DB1AC; return 0x820DA0D8;
		/* 820DB1A8h case   38:*/		return 0x820DB1AC;
		  /* 820DB1ACh */ case   39:  		/* cmpwi CR0, R3, 0 */
		/* 820DB1ACh case   39:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB1ACh case   39:*/		return 0x820DB1B0;
		  /* 820DB1B0h */ case   40:  		/* bc 12, CR0_LT, 272 */
		/* 820DB1B0h case   40:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB1B0h case   40:*/		return 0x820DB1B4;
		  /* 820DB1B4h */ case   41:  		/* lwz R11, <#[R31]> */
		/* 820DB1B4h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB1B4h case   41:*/		return 0x820DB1B8;
		  /* 820DB1B8h */ case   42:  		/* mr R5, R29 */
		/* 820DB1B8h case   42:*/		regs.R5 = regs.R29;
		/* 820DB1B8h case   42:*/		return 0x820DB1BC;
		  /* 820DB1BCh */ case   43:  		/* mr R4, R30 */
		/* 820DB1BCh case   43:*/		regs.R4 = regs.R30;
		/* 820DB1BCh case   43:*/		return 0x820DB1C0;
		  /* 820DB1C0h */ case   44:  		/* mr R3, R31 */
		/* 820DB1C0h case   44:*/		regs.R3 = regs.R31;
		/* 820DB1C0h case   44:*/		return 0x820DB1C4;
		  /* 820DB1C4h */ case   45:  		/* lwz R11, <#[R11 + 488]> */
		/* 820DB1C4h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001E8) );
		/* 820DB1C4h case   45:*/		return 0x820DB1C8;
		  /* 820DB1C8h */ case   46:  		/* mtspr CTR, R11 */
		/* 820DB1C8h case   46:*/		regs.CTR = regs.R11;
		/* 820DB1C8h case   46:*/		return 0x820DB1CC;
		  /* 820DB1CCh */ case   47:  		/* bcctrl 20, CR0_LT */
		/* 820DB1CCh case   47:*/		if ( 1 ) { regs.LR = 0x820DB1D0; return (uint32)regs.CTR; }
		/* 820DB1CCh case   47:*/		return 0x820DB1D0;
		  /* 820DB1D0h */ case   48:  		/* cmpwi CR0, R3, 0 */
		/* 820DB1D0h case   48:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB1D0h case   48:*/		return 0x820DB1D4;
		  /* 820DB1D4h */ case   49:  		/* bc 12, CR0_LT, 236 */
		/* 820DB1D4h case   49:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB1D4h case   49:*/		return 0x820DB1D8;
		  /* 820DB1D8h */ case   50:  		/* mr R3, R31 */
		/* 820DB1D8h case   50:*/		regs.R3 = regs.R31;
		/* 820DB1D8h case   50:*/		return 0x820DB1DC;
		  /* 820DB1DCh */ case   51:  		/* bl -4140 */
		/* 820DB1DCh case   51:*/		regs.LR = 0x820DB1E0; return 0x820DA1B0;
		/* 820DB1DCh case   51:*/		return 0x820DB1E0;
		  /* 820DB1E0h */ case   52:  		/* cmpwi CR0, R3, 0 */
		/* 820DB1E0h case   52:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB1E0h case   52:*/		return 0x820DB1E4;
		  /* 820DB1E4h */ case   53:  		/* bc 12, CR0_LT, 220 */
		/* 820DB1E4h case   53:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB1E4h case   53:*/		return 0x820DB1E8;
		  /* 820DB1E8h */ case   54:  		/* lis R11, -32254 */
		/* 820DB1E8h case   54:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB1E8h case   54:*/		return 0x820DB1EC;
		  /* 820DB1ECh */ case   55:  		/* mr R3, R31 */
		/* 820DB1ECh case   55:*/		regs.R3 = regs.R31;
		/* 820DB1ECh case   55:*/		return 0x820DB1F0;
		  /* 820DB1F0h */ case   56:  		/* addi R4, R11, -30556 */
		/* 820DB1F0h case   56:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88A4);
		/* 820DB1F0h case   56:*/		return 0x820DB1F4;
		  /* 820DB1F4h */ case   57:  		/* bl -4380 */
		/* 820DB1F4h case   57:*/		regs.LR = 0x820DB1F8; return 0x820DA0D8;
		/* 820DB1F4h case   57:*/		return 0x820DB1F8;
		  /* 820DB1F8h */ case   58:  		/* cmpwi CR0, R3, 0 */
		/* 820DB1F8h case   58:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB1F8h case   58:*/		return 0x820DB1FC;
		  /* 820DB1FCh */ case   59:  		/* bc 12, CR0_LT, 196 */
		/* 820DB1FCh case   59:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB1FCh case   59:*/		return 0x820DB200;
		  /* 820DB200h */ case   60:  		/* lwz R11, <#[R31]> */
		/* 820DB200h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB200h case   60:*/		return 0x820DB204;
		  /* 820DB204h */ case   61:  		/* mr R3, R31 */
		/* 820DB204h case   61:*/		regs.R3 = regs.R31;
		/* 820DB204h case   61:*/		return 0x820DB208;
		  /* 820DB208h */ case   62:  		/* lwz R11, <#[R11 + 492]> */
		/* 820DB208h case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001EC) );
		/* 820DB208h case   62:*/		return 0x820DB20C;
		  /* 820DB20Ch */ case   63:  		/* mtspr CTR, R11 */
		/* 820DB20Ch case   63:*/		regs.CTR = regs.R11;
		/* 820DB20Ch case   63:*/		return 0x820DB210;
		  /* 820DB210h */ case   64:  		/* bcctrl 20, CR0_LT */
		/* 820DB210h case   64:*/		if ( 1 ) { regs.LR = 0x820DB214; return (uint32)regs.CTR; }
		/* 820DB210h case   64:*/		return 0x820DB214;
		  /* 820DB214h */ case   65:  		/* cmpwi CR0, R3, 0 */
		/* 820DB214h case   65:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB214h case   65:*/		return 0x820DB218;
		  /* 820DB218h */ case   66:  		/* bc 12, CR0_LT, 168 */
		/* 820DB218h case   66:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB218h case   66:*/		return 0x820DB21C;
		  /* 820DB21Ch */ case   67:  		/* lis R11, -32254 */
		/* 820DB21Ch case   67:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB21Ch case   67:*/		return 0x820DB220;
		  /* 820DB220h */ case   68:  		/* addi R4, R11, -30560 */
		/* 820DB220h case   68:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88A0);
		/* 820DB220h case   68:*/		return 0x820DB224;
		  /* 820DB224h */ case   69:  		/* b 80 */
		/* 820DB224h case   69:*/		return 0x820DB274;
		/* 820DB224h case   69:*/		return 0x820DB228;
	}
	return 0x820DB228;
} // Block from 820DB110h-820DB228h (70 instructions)

//////////////////////////////////////////////////////
// Block at 820DB228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB228);
		  /* 820DB228h */ case    0:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DB228h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DB228h case    0:*/		return 0x820DB22C;
		  /* 820DB22Ch */ case    1:  		/* mr R3, R31 */
		/* 820DB22Ch case    1:*/		regs.R3 = regs.R31;
		/* 820DB22Ch case    1:*/		return 0x820DB230;
		  /* 820DB230h */ case    2:  		/* addi R11, R11, -1 */
		/* 820DB230h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DB230h case    2:*/		return 0x820DB234;
		  /* 820DB234h */ case    3:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DB234h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DB234h case    3:*/		return 0x820DB238;
		  /* 820DB238h */ case    4:  		/* bl -4232 */
		/* 820DB238h case    4:*/		regs.LR = 0x820DB23C; return 0x820DA1B0;
		/* 820DB238h case    4:*/		return 0x820DB23C;
		  /* 820DB23Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DB23Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB23Ch case    5:*/		return 0x820DB240;
		  /* 820DB240h */ case    6:  		/* bc 12, CR0_LT, 128 */
		/* 820DB240h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB240h case    6:*/		return 0x820DB244;
		  /* 820DB244h */ case    7:  		/* lis R11, -32254 */
		/* 820DB244h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB244h case    7:*/		return 0x820DB248;
		  /* 820DB248h */ case    8:  		/* mr R3, R31 */
		/* 820DB248h case    8:*/		regs.R3 = regs.R31;
		/* 820DB248h case    8:*/		return 0x820DB24C;
		  /* 820DB24Ch */ case    9:  		/* addi R4, R11, -30528 */
		/* 820DB24Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88C0);
		/* 820DB24Ch case    9:*/		return 0x820DB250;
		  /* 820DB250h */ case   10:  		/* bl -4472 */
		/* 820DB250h case   10:*/		regs.LR = 0x820DB254; return 0x820DA0D8;
		/* 820DB250h case   10:*/		return 0x820DB254;
		  /* 820DB254h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820DB254h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB254h case   11:*/		return 0x820DB258;
		  /* 820DB258h */ case   12:  		/* bc 12, CR0_LT, 104 */
		/* 820DB258h case   12:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB258h case   12:*/		return 0x820DB25C;
		  /* 820DB25Ch */ case   13:  		/* mr R3, R31 */
		/* 820DB25Ch case   13:*/		regs.R3 = regs.R31;
		/* 820DB25Ch case   13:*/		return 0x820DB260;
	}
	return 0x820DB260;
} // Block from 820DB228h-820DB260h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DB260h
// Function '?EmitPushVector@C30SWProgram@D3DXShader@@MAAJPBD00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB260);
		  /* 820DB260h */ case    0:  		/* bl -4272 */
		/* 820DB260h case    0:*/		regs.LR = 0x820DB264; return 0x820DA1B0;
		/* 820DB260h case    0:*/		return 0x820DB264;
		  /* 820DB264h */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820DB264h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB264h case    1:*/		return 0x820DB268;
		  /* 820DB268h */ case    2:  		/* bc 12, CR0_LT, 88 */
		/* 820DB268h case    2:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB268h case    2:*/		return 0x820DB26C;
		  /* 820DB26Ch */ case    3:  		/* lis R11, -32254 */
		/* 820DB26Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB26Ch case    3:*/		return 0x820DB270;
		  /* 820DB270h */ case    4:  		/* addi R4, R11, -30548 */
		/* 820DB270h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88AC);
		/* 820DB270h case    4:*/		return 0x820DB274;
	}
	return 0x820DB274;
} // Block from 820DB260h-820DB274h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DB274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB274);
		  /* 820DB274h */ case    0:  		/* mr R3, R31 */
		/* 820DB274h case    0:*/		regs.R3 = regs.R31;
		/* 820DB274h case    0:*/		return 0x820DB278;
		  /* 820DB278h */ case    1:  		/* bl -4512 */
		/* 820DB278h case    1:*/		regs.LR = 0x820DB27C; return 0x820DA0D8;
		/* 820DB278h case    1:*/		return 0x820DB27C;
		  /* 820DB27Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DB27Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB27Ch case    2:*/		return 0x820DB280;
		  /* 820DB280h */ case    3:  		/* bc 12, CR0_LT, 64 */
		/* 820DB280h case    3:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB280h case    3:*/		return 0x820DB284;
		  /* 820DB284h */ case    4:  		/* mr R3, R31 */
		/* 820DB284h case    4:*/		regs.R3 = regs.R31;
		/* 820DB284h case    4:*/		return 0x820DB288;
		  /* 820DB288h */ case    5:  		/* bl -4312 */
		/* 820DB288h case    5:*/		regs.LR = 0x820DB28C; return 0x820DA1B0;
		/* 820DB288h case    5:*/		return 0x820DB28C;
		  /* 820DB28Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DB28Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB28Ch case    6:*/		return 0x820DB290;
		  /* 820DB290h */ case    7:  		/* bc 12, CR0_LT, 48 */
		/* 820DB290h case    7:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB290h case    7:*/		return 0x820DB294;
		  /* 820DB294h */ case    8:  		/* lis R11, -32254 */
		/* 820DB294h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB294h case    8:*/		return 0x820DB298;
		  /* 820DB298h */ case    9:  		/* mr R3, R31 */
		/* 820DB298h case    9:*/		regs.R3 = regs.R31;
		/* 820DB298h case    9:*/		return 0x820DB29C;
		  /* 820DB29Ch */ case   10:  		/* addi R4, R11, -30564 */
		/* 820DB29Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF889C);
		/* 820DB29Ch case   10:*/		return 0x820DB2A0;
		  /* 820DB2A0h */ case   11:  		/* bl -4552 */
		/* 820DB2A0h case   11:*/		regs.LR = 0x820DB2A4; return 0x820DA0D8;
		/* 820DB2A0h case   11:*/		return 0x820DB2A4;
		  /* 820DB2A4h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820DB2A4h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB2A4h case   12:*/		return 0x820DB2A8;
		  /* 820DB2A8h */ case   13:  		/* bc 12, CR0_LT, 24 */
		/* 820DB2A8h case   13:*/		if ( regs.CR[0].lt ) { return 0x820DB2C0;  }
		/* 820DB2A8h case   13:*/		return 0x820DB2AC;
		  /* 820DB2ACh */ case   14:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DB2ACh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DB2ACh case   14:*/		return 0x820DB2B0;
		  /* 820DB2B0h */ case   15:  		/* addi R11, R11, 1 */
		/* 820DB2B0h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820DB2B0h case   15:*/		return 0x820DB2B4;
		  /* 820DB2B4h */ case   16:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DB2B4h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DB2B4h case   16:*/		return 0x820DB2B8;
	}
	return 0x820DB2B8;
} // Block from 820DB274h-820DB2B8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820DB2B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB2B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB2B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB2B8);
		  /* 820DB2B8h */ case    0:  		/* mr R3, R31 */
		/* 820DB2B8h case    0:*/		regs.R3 = regs.R31;
		/* 820DB2B8h case    0:*/		return 0x820DB2BC;
		  /* 820DB2BCh */ case    1:  		/* bl 117828 */
		/* 820DB2BCh case    1:*/		regs.LR = 0x820DB2C0; return 0x820F7F00;
		/* 820DB2BCh case    1:*/		return 0x820DB2C0;
	}
	return 0x820DB2C0;
} // Block from 820DB2B8h-820DB2C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DB2C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB2C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB2C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB2C0);
		  /* 820DB2C0h */ case    0:  		/* addi R1, R1, 208 */
		/* 820DB2C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 820DB2C0h case    0:*/		return 0x820DB2C4;
		  /* 820DB2C4h */ case    1:  		/* b -303132 */
		/* 820DB2C4h case    1:*/		return 0x820912A8;
		/* 820DB2C4h case    1:*/		return 0x820DB2C8;
	}
	return 0x820DB2C8;
} // Block from 820DB2C0h-820DB2C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DB2C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB2C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB2C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB2C8);
		  /* 820DB2C8h */ case    0:  		/* mfspr R12, LR */
		/* 820DB2C8h case    0:*/		regs.R12 = regs.LR;
		/* 820DB2C8h case    0:*/		return 0x820DB2CC;
		  /* 820DB2CCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DB2CCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DB2CCh case    1:*/		return 0x820DB2D0;
		  /* 820DB2D0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820DB2D0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DB2D0h case    2:*/		return 0x820DB2D4;
		  /* 820DB2D4h */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DB2D4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DB2D4h case    3:*/		return 0x820DB2D8;
		  /* 820DB2D8h */ case    4:  		/* lwz R11, <#[R3 + 1808]> */
		/* 820DB2D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000710) );
		/* 820DB2D8h case    4:*/		return 0x820DB2DC;
		  /* 820DB2DCh */ case    5:  		/* mr R31, R3 */
		/* 820DB2DCh case    5:*/		regs.R31 = regs.R3;
		/* 820DB2DCh case    5:*/		return 0x820DB2E0;
		  /* 820DB2E0h */ case    6:  		/* addi R11, R11, 419 */
		/* 820DB2E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1A3);
		/* 820DB2E0h case    6:*/		return 0x820DB2E4;
		  /* 820DB2E4h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DB2E4h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DB2E4h case    7:*/		return 0x820DB2E8;
		  /* 820DB2E8h */ case    8:  		/* lwzx R11, <#[R11 + R3]> */
		/* 820DB2E8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 820DB2E8h case    8:*/		return 0x820DB2EC;
		  /* 820DB2ECh */ case    9:  		/* cmplwi CR6, R11, 1 */
		/* 820DB2ECh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820DB2ECh case    9:*/		return 0x820DB2F0;
		  /* 820DB2F0h */ case   10:  		/* bc 12, CR6_LT, 136 */
		/* 820DB2F0h case   10:*/		if ( regs.CR[6].lt ) { return 0x820DB378;  }
		/* 820DB2F0h case   10:*/		return 0x820DB2F4;
		  /* 820DB2F4h */ case   11:  		/* bc 4, CR6_EQ, 92 */
		/* 820DB2F4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820DB350;  }
		/* 820DB2F4h case   11:*/		return 0x820DB2F8;
		  /* 820DB2F8h */ case   12:  		/* lwz R11, <#[R3 + 1812]> */
		/* 820DB2F8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000714) );
		/* 820DB2F8h case   12:*/		return 0x820DB2FC;
		  /* 820DB2FCh */ case   13:  		/* addi R10, R11, -1 */
		/* 820DB2FCh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 820DB2FCh case   13:*/		return 0x820DB300;
		  /* 820DB300h */ case   14:  		/* lwz R11, <#[R3 + 1544]> */
		/* 820DB300h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000608) );
		/* 820DB300h case   14:*/		return 0x820DB304;
		  /* 820DB304h */ case   15:  		/* addi R11, R11, -1 */
		/* 820DB304h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DB304h case   15:*/		return 0x820DB308;
		  /* 820DB308h */ case   16:  		/* stw R10, <#[R3 + 1812]> */
		/* 820DB308h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000714) );
		/* 820DB308h case   16:*/		return 0x820DB30C;
		  /* 820DB30Ch */ case   17:  		/* stw R11, <#[R3 + 1544]> */
		/* 820DB30Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000608) );
		/* 820DB30Ch case   17:*/		return 0x820DB310;
		  /* 820DB310h */ case   18:  		/* bl -4448 */
		/* 820DB310h case   18:*/		regs.LR = 0x820DB314; return 0x820DA1B0;
		/* 820DB310h case   18:*/		return 0x820DB314;
		  /* 820DB314h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820DB314h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB314h case   19:*/		return 0x820DB318;
	}
	return 0x820DB318;
} // Block from 820DB2C8h-820DB318h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820DB318h
// Function '?EmitPopVector@C30SWProgram@D3DXShader@@MAAJPBD00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB318);
		  /* 820DB318h */ case    0:  		/* bc 12, CR0_LT, 76 */
		/* 820DB318h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DB364;  }
		/* 820DB318h case    0:*/		return 0x820DB31C;
		  /* 820DB31Ch */ case    1:  		/* lis R11, -32254 */
		/* 820DB31Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB31Ch case    1:*/		return 0x820DB320;
		  /* 820DB320h */ case    2:  		/* mr R3, R31 */
		/* 820DB320h case    2:*/		regs.R3 = regs.R31;
		/* 820DB320h case    2:*/		return 0x820DB324;
		  /* 820DB324h */ case    3:  		/* addi R4, R11, -30524 */
		/* 820DB324h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88C4);
		/* 820DB324h case    3:*/		return 0x820DB328;
		  /* 820DB328h */ case    4:  		/* bl -4688 */
		/* 820DB328h case    4:*/		regs.LR = 0x820DB32C; return 0x820DA0D8;
		/* 820DB328h case    4:*/		return 0x820DB32C;
		  /* 820DB32Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DB32Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB32Ch case    5:*/		return 0x820DB330;
		  /* 820DB330h */ case    6:  		/* bc 12, CR0_LT, 52 */
		/* 820DB330h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DB364;  }
		/* 820DB330h case    6:*/		return 0x820DB334;
		  /* 820DB334h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 820DB334h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB334h case    7:*/		return 0x820DB338;
		  /* 820DB338h */ case    8:  		/* mr R3, R31 */
		/* 820DB338h case    8:*/		regs.R3 = regs.R31;
		/* 820DB338h case    8:*/		return 0x820DB33C;
		  /* 820DB33Ch */ case    9:  		/* lwz R11, <#[R11 + 544]> */
		/* 820DB33Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000220) );
		/* 820DB33Ch case    9:*/		return 0x820DB340;
		  /* 820DB340h */ case   10:  		/* mtspr CTR, R11 */
		/* 820DB340h case   10:*/		regs.CTR = regs.R11;
		/* 820DB340h case   10:*/		return 0x820DB344;
		  /* 820DB344h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 820DB344h case   11:*/		if ( 1 ) { regs.LR = 0x820DB348; return (uint32)regs.CTR; }
		/* 820DB344h case   11:*/		return 0x820DB348;
		  /* 820DB348h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820DB348h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB348h case   12:*/		return 0x820DB34C;
		  /* 820DB34Ch */ case   13:  		/* bc 12, CR0_LT, 24 */
		/* 820DB34Ch case   13:*/		if ( regs.CR[0].lt ) { return 0x820DB364;  }
		/* 820DB34Ch case   13:*/		return 0x820DB350;
	}
	return 0x820DB350;
} // Block from 820DB318h-820DB350h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DB350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB350);
		  /* 820DB350h */ case    0:  		/* lwz R11, <#[R31 + 1808]> */
		/* 820DB350h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000710) );
		/* 820DB350h case    0:*/		return 0x820DB354;
		  /* 820DB354h */ case    1:  		/* mr R3, R31 */
		/* 820DB354h case    1:*/		regs.R3 = regs.R31;
		/* 820DB354h case    1:*/		return 0x820DB358;
		  /* 820DB358h */ case    2:  		/* addi R11, R11, -1 */
		/* 820DB358h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DB358h case    2:*/		return 0x820DB35C;
		  /* 820DB35Ch */ case    3:  		/* stw R11, <#[R31 + 1808]> */
		/* 820DB35Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000710) );
		/* 820DB35Ch case    3:*/		return 0x820DB360;
		  /* 820DB360h */ case    4:  		/* bl 117768 */
		/* 820DB360h case    4:*/		regs.LR = 0x820DB364; return 0x820F7F68;
		/* 820DB360h case    4:*/		return 0x820DB364;
	}
	return 0x820DB364;
} // Block from 820DB350h-820DB364h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DB364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB364);
		  /* 820DB364h */ case    0:  		/* addi R1, R1, 112 */
		/* 820DB364h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DB364h case    0:*/		return 0x820DB368;
		  /* 820DB368h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DB368h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DB368h case    1:*/		return 0x820DB36C;
		  /* 820DB36Ch */ case    2:  		/* mtspr LR, R12 */
		/* 820DB36Ch case    2:*/		regs.LR = regs.R12;
		/* 820DB36Ch case    2:*/		return 0x820DB370;
		  /* 820DB370h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 820DB370h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DB370h case    3:*/		return 0x820DB374;
		  /* 820DB374h */ case    4:  		/* bclr 20, CR0_LT */
		/* 820DB374h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DB374h case    4:*/		return 0x820DB378;
	}
	return 0x820DB378;
} // Block from 820DB364h-820DB378h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DB378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB378);
		  /* 820DB378h */ case    0:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DB378h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DB378h case    0:*/		return 0x820DB37C;
		  /* 820DB37Ch */ case    1:  		/* mr R3, R31 */
		/* 820DB37Ch case    1:*/		regs.R3 = regs.R31;
		/* 820DB37Ch case    1:*/		return 0x820DB380;
		  /* 820DB380h */ case    2:  		/* addi R11, R11, -1 */
		/* 820DB380h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DB380h case    2:*/		return 0x820DB384;
		  /* 820DB384h */ case    3:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DB384h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DB384h case    3:*/		return 0x820DB388;
		  /* 820DB388h */ case    4:  		/* bl -4568 */
		/* 820DB388h case    4:*/		regs.LR = 0x820DB38C; return 0x820DA1B0;
		/* 820DB388h case    4:*/		return 0x820DB38C;
		  /* 820DB38Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DB38Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB38Ch case    5:*/		return 0x820DB390;
		  /* 820DB390h */ case    6:  		/* bc 12, CR0_LT, -44 */
		/* 820DB390h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DB364;  }
		/* 820DB390h case    6:*/		return 0x820DB394;
		  /* 820DB394h */ case    7:  		/* lis R11, -32254 */
		/* 820DB394h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB394h case    7:*/		return 0x820DB398;
		  /* 820DB398h */ case    8:  		/* mr R3, R31 */
		/* 820DB398h case    8:*/		regs.R3 = regs.R31;
		/* 820DB398h case    8:*/		return 0x820DB39C;
		  /* 820DB39Ch */ case    9:  		/* addi R4, R11, -30524 */
		/* 820DB39Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88C4);
		/* 820DB39Ch case    9:*/		return 0x820DB3A0;
		  /* 820DB3A0h */ case   10:  		/* bl -4808 */
		/* 820DB3A0h case   10:*/		regs.LR = 0x820DB3A4; return 0x820DA0D8;
		/* 820DB3A0h case   10:*/		return 0x820DB3A4;
		  /* 820DB3A4h */ case   11:  		/* b -92 */
		/* 820DB3A4h case   11:*/		return 0x820DB348;
		/* 820DB3A4h case   11:*/		return 0x820DB3A8;
	}
	return 0x820DB3A8;
} // Block from 820DB378h-820DB3A8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DB3A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB3A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB3A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB3A8);
		  /* 820DB3A8h */ case    0:  		/* mfspr R12, LR */
		/* 820DB3A8h case    0:*/		regs.R12 = regs.LR;
		/* 820DB3A8h case    0:*/		return 0x820DB3AC;
		  /* 820DB3ACh */ case    1:  		/* bl -303440 */
		/* 820DB3ACh case    1:*/		regs.LR = 0x820DB3B0; return 0x8209125C;
		/* 820DB3ACh case    1:*/		return 0x820DB3B0;
		  /* 820DB3B0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DB3B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DB3B0h case    2:*/		return 0x820DB3B4;
		  /* 820DB3B4h */ case    3:  		/* lwz R10, <#[R3 + 1812]> */
		/* 820DB3B4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000714) );
		/* 820DB3B4h case    3:*/		return 0x820DB3B8;
		  /* 820DB3B8h */ case    4:  		/* lis R11, -32254 */
		/* 820DB3B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB3B8h case    4:*/		return 0x820DB3BC;
		  /* 820DB3BCh */ case    5:  		/* lwz R9, <#[R3]> */
		/* 820DB3BCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 820DB3BCh case    5:*/		return 0x820DB3C0;
		  /* 820DB3C0h */ case    6:  		/* mr R29, R4 */
		/* 820DB3C0h case    6:*/		regs.R29 = regs.R4;
		/* 820DB3C0h case    6:*/		return 0x820DB3C4;
		  /* 820DB3C4h */ case    7:  		/* addi R10, R10, -1 */
		/* 820DB3C4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 820DB3C4h case    7:*/		return 0x820DB3C8;
		  /* 820DB3C8h */ case    8:  		/* addi R30, R11, -30684 */
		/* 820DB3C8h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF8824);
		/* 820DB3C8h case    8:*/		return 0x820DB3CC;
		  /* 820DB3CCh */ case    9:  		/* stw R10, <#[R3 + 1812]> */
		/* 820DB3CCh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000714) );
		/* 820DB3CCh case    9:*/		return 0x820DB3D0;
		  /* 820DB3D0h */ case   10:  		/* mr R31, R3 */
		/* 820DB3D0h case   10:*/		regs.R31 = regs.R3;
		/* 820DB3D0h case   10:*/		return 0x820DB3D4;
		  /* 820DB3D4h */ case   11:  		/* mr R4, R30 */
		/* 820DB3D4h case   11:*/		regs.R4 = regs.R30;
		/* 820DB3D4h case   11:*/		return 0x820DB3D8;
		  /* 820DB3D8h */ case   12:  		/* lwz R11, <#[R9 + 564]> */
		/* 820DB3D8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000234) );
		/* 820DB3D8h case   12:*/		return 0x820DB3DC;
		  /* 820DB3DCh */ case   13:  		/* mtspr CTR, R11 */
		/* 820DB3DCh case   13:*/		regs.CTR = regs.R11;
		/* 820DB3DCh case   13:*/		return 0x820DB3E0;
		  /* 820DB3E0h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 820DB3E0h case   14:*/		if ( 1 ) { regs.LR = 0x820DB3E4; return (uint32)regs.CTR; }
		/* 820DB3E0h case   14:*/		return 0x820DB3E4;
		  /* 820DB3E4h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820DB3E4h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB3E4h case   15:*/		return 0x820DB3E8;
	}
	return 0x820DB3E8;
} // Block from 820DB3A8h-820DB3E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820DB3E8h
// Function '?EmitPushInteger@C30SWProgram@D3DXShader@@MAAJPBD00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB3E8);
		  /* 820DB3E8h */ case    0:  		/* bc 12, CR0_LT, 224 */
		/* 820DB3E8h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DB4C8;  }
		/* 820DB3E8h case    0:*/		return 0x820DB3EC;
		  /* 820DB3ECh */ case    1:  		/* lwz R11, <#[R31]> */
		/* 820DB3ECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB3ECh case    1:*/		return 0x820DB3F0;
		  /* 820DB3F0h */ case    2:  		/* lis R10, -32254 */
		/* 820DB3F0h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DB3F0h case    2:*/		return 0x820DB3F4;
		  /* 820DB3F4h */ case    3:  		/* mr R5, R30 */
		/* 820DB3F4h case    3:*/		regs.R5 = regs.R30;
		/* 820DB3F4h case    3:*/		return 0x820DB3F8;
		  /* 820DB3F8h */ case    4:  		/* addi R4, R10, -31716 */
		/* 820DB3F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF841C);
		/* 820DB3F8h case    4:*/		return 0x820DB3FC;
		  /* 820DB3FCh */ case    5:  		/* mr R3, R31 */
		/* 820DB3FCh case    5:*/		regs.R3 = regs.R31;
		/* 820DB3FCh case    5:*/		return 0x820DB400;
		  /* 820DB400h */ case    6:  		/* lwz R11, <#[R11 + 488]> */
		/* 820DB400h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001E8) );
		/* 820DB400h case    6:*/		return 0x820DB404;
		  /* 820DB404h */ case    7:  		/* mtspr CTR, R11 */
		/* 820DB404h case    7:*/		regs.CTR = regs.R11;
		/* 820DB404h case    7:*/		return 0x820DB408;
		  /* 820DB408h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 820DB408h case    8:*/		if ( 1 ) { regs.LR = 0x820DB40C; return (uint32)regs.CTR; }
		/* 820DB408h case    8:*/		return 0x820DB40C;
		  /* 820DB40Ch */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820DB40Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB40Ch case    9:*/		return 0x820DB410;
		  /* 820DB410h */ case   10:  		/* bc 12, CR0_LT, 184 */
		/* 820DB410h case   10:*/		if ( regs.CR[0].lt ) { return 0x820DB4C8;  }
		/* 820DB410h case   10:*/		return 0x820DB414;
		  /* 820DB414h */ case   11:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DB414h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DB414h case   11:*/		return 0x820DB418;
		  /* 820DB418h */ case   12:  		/* mr R3, R31 */
		/* 820DB418h case   12:*/		regs.R3 = regs.R31;
		/* 820DB418h case   12:*/		return 0x820DB41C;
		  /* 820DB41Ch */ case   13:  		/* addi R11, R11, -1 */
		/* 820DB41Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DB41Ch case   13:*/		return 0x820DB420;
		  /* 820DB420h */ case   14:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DB420h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DB420h case   14:*/		return 0x820DB424;
		  /* 820DB424h */ case   15:  		/* bl -4724 */
		/* 820DB424h case   15:*/		regs.LR = 0x820DB428; return 0x820DA1B0;
		/* 820DB424h case   15:*/		return 0x820DB428;
		  /* 820DB428h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820DB428h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB428h case   16:*/		return 0x820DB42C;
		  /* 820DB42Ch */ case   17:  		/* bc 12, CR0_LT, 156 */
		/* 820DB42Ch case   17:*/		if ( regs.CR[0].lt ) { return 0x820DB4C8;  }
		/* 820DB42Ch case   17:*/		return 0x820DB430;
		  /* 820DB430h */ case   18:  		/* lis R11, -32254 */
		/* 820DB430h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB430h case   18:*/		return 0x820DB434;
		  /* 820DB434h */ case   19:  		/* mr R3, R31 */
		/* 820DB434h case   19:*/		regs.R3 = regs.R31;
		/* 820DB434h case   19:*/		return 0x820DB438;
		  /* 820DB438h */ case   20:  		/* addi R4, R11, -30524 */
		/* 820DB438h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88C4);
		/* 820DB438h case   20:*/		return 0x820DB43C;
		  /* 820DB43Ch */ case   21:  		/* bl -4964 */
		/* 820DB43Ch case   21:*/		regs.LR = 0x820DB440; return 0x820DA0D8;
		/* 820DB43Ch case   21:*/		return 0x820DB440;
		  /* 820DB440h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 820DB440h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB440h case   22:*/		return 0x820DB444;
		  /* 820DB444h */ case   23:  		/* bc 12, CR0_LT, 132 */
		/* 820DB444h case   23:*/		if ( regs.CR[0].lt ) { return 0x820DB4C8;  }
		/* 820DB444h case   23:*/		return 0x820DB448;
		  /* 820DB448h */ case   24:  		/* cmpwi CR6, R29, 0 */
		/* 820DB448h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820DB448h case   24:*/		return 0x820DB44C;
		  /* 820DB44Ch */ case   25:  		/* bc 12, CR6_EQ, 32 */
		/* 820DB44Ch case   25:*/		if ( regs.CR[6].eq ) { return 0x820DB46C;  }
		/* 820DB44Ch case   25:*/		return 0x820DB450;
		  /* 820DB450h */ case   26:  		/* lwz R11, <#[R31]> */
		/* 820DB450h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB450h case   26:*/		return 0x820DB454;
		  /* 820DB454h */ case   27:  		/* mr R3, R31 */
		/* 820DB454h case   27:*/		regs.R3 = regs.R31;
		/* 820DB454h case   27:*/		return 0x820DB458;
		  /* 820DB458h */ case   28:  		/* lwz R11, <#[R11 + 552]> */
		/* 820DB458h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000228) );
		/* 820DB458h case   28:*/		return 0x820DB45C;
		  /* 820DB45Ch */ case   29:  		/* mtspr CTR, R11 */
		/* 820DB45Ch case   29:*/		regs.CTR = regs.R11;
		/* 820DB45Ch case   29:*/		return 0x820DB460;
		  /* 820DB460h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 820DB460h case   30:*/		if ( 1 ) { regs.LR = 0x820DB464; return (uint32)regs.CTR; }
		/* 820DB460h case   30:*/		return 0x820DB464;
		  /* 820DB464h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820DB464h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB464h case   31:*/		return 0x820DB468;
	}
	return 0x820DB468;
} // Block from 820DB3E8h-820DB468h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820DB468h
// Function '?EmitPopInteger@C30SWProgram@D3DXShader@@MAAJPBD00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB468);
		  /* 820DB468h */ case    0:  		/* bc 12, CR0_LT, 96 */
		/* 820DB468h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DB4C8;  }
		/* 820DB468h case    0:*/		return 0x820DB46C;
	}
	return 0x820DB46C;
} // Block from 820DB468h-820DB46Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DB46Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB46C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB46C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB46C);
		  /* 820DB46Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820DB46Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB46Ch case    0:*/		return 0x820DB470;
		  /* 820DB470h */ case    1:  		/* mr R3, R31 */
		/* 820DB470h case    1:*/		regs.R3 = regs.R31;
		/* 820DB470h case    1:*/		return 0x820DB474;
		  /* 820DB474h */ case    2:  		/* lwz R11, <#[R11 + 560]> */
		/* 820DB474h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000230) );
		/* 820DB474h case    2:*/		return 0x820DB478;
		  /* 820DB478h */ case    3:  		/* mtspr CTR, R11 */
		/* 820DB478h case    3:*/		regs.CTR = regs.R11;
		/* 820DB478h case    3:*/		return 0x820DB47C;
		  /* 820DB47Ch */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 820DB47Ch case    4:*/		if ( 1 ) { regs.LR = 0x820DB480; return (uint32)regs.CTR; }
		/* 820DB47Ch case    4:*/		return 0x820DB480;
		  /* 820DB480h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DB480h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB480h case    5:*/		return 0x820DB484;
		  /* 820DB484h */ case    6:  		/* bc 12, CR0_LT, 68 */
		/* 820DB484h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DB4C8;  }
		/* 820DB484h case    6:*/		return 0x820DB488;
		  /* 820DB488h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 820DB488h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB488h case    7:*/		return 0x820DB48C;
		  /* 820DB48Ch */ case    8:  		/* mr R3, R31 */
		/* 820DB48Ch case    8:*/		regs.R3 = regs.R31;
		/* 820DB48Ch case    8:*/		return 0x820DB490;
		  /* 820DB490h */ case    9:  		/* lwz R11, <#[R11 + 544]> */
		/* 820DB490h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000220) );
		/* 820DB490h case    9:*/		return 0x820DB494;
		  /* 820DB494h */ case   10:  		/* mtspr CTR, R11 */
		/* 820DB494h case   10:*/		regs.CTR = regs.R11;
		/* 820DB494h case   10:*/		return 0x820DB498;
		  /* 820DB498h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 820DB498h case   11:*/		if ( 1 ) { regs.LR = 0x820DB49C; return (uint32)regs.CTR; }
		/* 820DB498h case   11:*/		return 0x820DB49C;
		  /* 820DB49Ch */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820DB49Ch case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB49Ch case   12:*/		return 0x820DB4A0;
		  /* 820DB4A0h */ case   13:  		/* bc 12, CR0_LT, 40 */
		/* 820DB4A0h case   13:*/		if ( regs.CR[0].lt ) { return 0x820DB4C8;  }
		/* 820DB4A0h case   13:*/		return 0x820DB4A4;
		  /* 820DB4A4h */ case   14:  		/* lwz R11, <#[R31 + 1808]> */
		/* 820DB4A4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000710) );
		/* 820DB4A4h case   14:*/		return 0x820DB4A8;
		  /* 820DB4A8h */ case   15:  		/* cmpwi CR6, R29, 0 */
		/* 820DB4A8h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820DB4A8h case   15:*/		return 0x820DB4AC;
		  /* 820DB4ACh */ case   16:  		/* mr R3, R31 */
		/* 820DB4ACh case   16:*/		regs.R3 = regs.R31;
		/* 820DB4ACh case   16:*/		return 0x820DB4B0;
		  /* 820DB4B0h */ case   17:  		/* addi R11, R11, -1 */
		/* 820DB4B0h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DB4B0h case   17:*/		return 0x820DB4B4;
		  /* 820DB4B4h */ case   18:  		/* stw R11, <#[R31 + 1808]> */
		/* 820DB4B4h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000710) );
		/* 820DB4B4h case   18:*/		return 0x820DB4B8;
		  /* 820DB4B8h */ case   19:  		/* bc 12, CR6_EQ, 12 */
		/* 820DB4B8h case   19:*/		if ( regs.CR[6].eq ) { return 0x820DB4C4;  }
		/* 820DB4B8h case   19:*/		return 0x820DB4BC;
		  /* 820DB4BCh */ case   20:  		/* bl 112044 */
		/* 820DB4BCh case   20:*/		regs.LR = 0x820DB4C0; return 0x820F6A68;
		/* 820DB4BCh case   20:*/		return 0x820DB4C0;
		  /* 820DB4C0h */ case   21:  		/* b 8 */
		/* 820DB4C0h case   21:*/		return 0x820DB4C8;
		/* 820DB4C0h case   21:*/		return 0x820DB4C4;
	}
	return 0x820DB4C4;
} // Block from 820DB46Ch-820DB4C4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820DB4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB4C4);
		  /* 820DB4C4h */ case    0:  		/* bl 111932 */
		/* 820DB4C4h case    0:*/		regs.LR = 0x820DB4C8; return 0x820F6A00;
		/* 820DB4C4h case    0:*/		return 0x820DB4C8;
	}
	return 0x820DB4C8;
} // Block from 820DB4C4h-820DB4C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DB4C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB4C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB4C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB4C8);
		  /* 820DB4C8h */ case    0:  		/* addi R1, R1, 128 */
		/* 820DB4C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DB4C8h case    0:*/		return 0x820DB4CC;
		  /* 820DB4CCh */ case    1:  		/* b -303648 */
		/* 820DB4CCh case    1:*/		return 0x820912AC;
		/* 820DB4CCh case    1:*/		return 0x820DB4D0;
	}
	return 0x820DB4D0;
} // Block from 820DB4C8h-820DB4D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DB4D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB4D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB4D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB4D0);
		  /* 820DB4D0h */ case    0:  		/* mfspr R12, LR */
		/* 820DB4D0h case    0:*/		regs.R12 = regs.LR;
		/* 820DB4D0h case    0:*/		return 0x820DB4D4;
		  /* 820DB4D4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DB4D4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DB4D4h case    1:*/		return 0x820DB4D8;
		  /* 820DB4D8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820DB4D8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DB4D8h case    2:*/		return 0x820DB4DC;
		  /* 820DB4DCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820DB4DCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DB4DCh case    3:*/		return 0x820DB4E0;
		  /* 820DB4E0h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DB4E0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DB4E0h case    4:*/		return 0x820DB4E4;
		  /* 820DB4E4h */ case    5:  		/* lwz R10, <#[R3]> */
		/* 820DB4E4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 820DB4E4h case    5:*/		return 0x820DB4E8;
	}
	return 0x820DB4E8;
} // Block from 820DB4D0h-820DB4E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DB4E8h
// Function '?EmitPopBranchMask@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB4E8);
		  /* 820DB4E8h */ case    0:  		/* lis R11, -32254 */
		/* 820DB4E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB4E8h case    0:*/		return 0x820DB4EC;
		  /* 820DB4ECh */ case    1:  		/* li R6, 0 */
		/* 820DB4ECh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820DB4ECh case    1:*/		return 0x820DB4F0;
		  /* 820DB4F0h */ case    2:  		/* addi R30, R11, -30600 */
		/* 820DB4F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF8878);
		/* 820DB4F0h case    2:*/		return 0x820DB4F4;
		  /* 820DB4F4h */ case    3:  		/* li R5, 0 */
		/* 820DB4F4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820DB4F4h case    3:*/		return 0x820DB4F8;
		  /* 820DB4F8h */ case    4:  		/* mr R4, R30 */
		/* 820DB4F8h case    4:*/		regs.R4 = regs.R30;
		/* 820DB4F8h case    4:*/		return 0x820DB4FC;
		  /* 820DB4FCh */ case    5:  		/* lwz R11, <#[R10 + 568]> */
		/* 820DB4FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000238) );
		/* 820DB4FCh case    5:*/		return 0x820DB500;
		  /* 820DB500h */ case    6:  		/* mr R31, R3 */
		/* 820DB500h case    6:*/		regs.R31 = regs.R3;
		/* 820DB500h case    6:*/		return 0x820DB504;
		  /* 820DB504h */ case    7:  		/* mtspr CTR, R11 */
		/* 820DB504h case    7:*/		regs.CTR = regs.R11;
		/* 820DB504h case    7:*/		return 0x820DB508;
		  /* 820DB508h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 820DB508h case    8:*/		if ( 1 ) { regs.LR = 0x820DB50C; return (uint32)regs.CTR; }
		/* 820DB508h case    8:*/		return 0x820DB50C;
		  /* 820DB50Ch */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820DB50Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB50Ch case    9:*/		return 0x820DB510;
		  /* 820DB510h */ case   10:  		/* bc 12, CR0_LT, 116 */
		/* 820DB510h case   10:*/		if ( regs.CR[0].lt ) { return 0x820DB584;  }
		/* 820DB510h case   10:*/		return 0x820DB514;
		  /* 820DB514h */ case   11:  		/* mr R3, R31 */
		/* 820DB514h case   11:*/		regs.R3 = regs.R31;
		/* 820DB514h case   11:*/		return 0x820DB518;
		  /* 820DB518h */ case   12:  		/* bl -4968 */
		/* 820DB518h case   12:*/		regs.LR = 0x820DB51C; return 0x820DA1B0;
		/* 820DB518h case   12:*/		return 0x820DB51C;
		  /* 820DB51Ch */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DB51Ch case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB51Ch case   13:*/		return 0x820DB520;
		  /* 820DB520h */ case   14:  		/* bc 12, CR0_LT, 100 */
		/* 820DB520h case   14:*/		if ( regs.CR[0].lt ) { return 0x820DB584;  }
		/* 820DB520h case   14:*/		return 0x820DB524;
		  /* 820DB524h */ case   15:  		/* lis R11, -32254 */
		/* 820DB524h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB524h case   15:*/		return 0x820DB528;
		  /* 820DB528h */ case   16:  		/* mr R3, R31 */
		/* 820DB528h case   16:*/		regs.R3 = regs.R31;
		/* 820DB528h case   16:*/		return 0x820DB52C;
		  /* 820DB52Ch */ case   17:  		/* addi R4, R11, -30584 */
		/* 820DB52Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8888);
		/* 820DB52Ch case   17:*/		return 0x820DB530;
		  /* 820DB530h */ case   18:  		/* bl -5208 */
		/* 820DB530h case   18:*/		regs.LR = 0x820DB534; return 0x820DA0D8;
		/* 820DB530h case   18:*/		return 0x820DB534;
		  /* 820DB534h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820DB534h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB534h case   19:*/		return 0x820DB538;
		  /* 820DB538h */ case   20:  		/* bc 12, CR0_LT, 76 */
		/* 820DB538h case   20:*/		if ( regs.CR[0].lt ) { return 0x820DB584;  }
		/* 820DB538h case   20:*/		return 0x820DB53C;
		  /* 820DB53Ch */ case   21:  		/* lwz R11, <#[R31]> */
		/* 820DB53Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB53Ch case   21:*/		return 0x820DB540;
		  /* 820DB540h */ case   22:  		/* lis R10, -32254 */
		/* 820DB540h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DB540h case   22:*/		return 0x820DB544;
		  /* 820DB544h */ case   23:  		/* mr R5, R30 */
		/* 820DB544h case   23:*/		regs.R5 = regs.R30;
		/* 820DB544h case   23:*/		return 0x820DB548;
		  /* 820DB548h */ case   24:  		/* addi R4, R10, -31716 */
		/* 820DB548h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF841C);
		/* 820DB548h case   24:*/		return 0x820DB54C;
		  /* 820DB54Ch */ case   25:  		/* mr R3, R31 */
		/* 820DB54Ch case   25:*/		regs.R3 = regs.R31;
		/* 820DB54Ch case   25:*/		return 0x820DB550;
		  /* 820DB550h */ case   26:  		/* lwz R11, <#[R11 + 460]> */
		/* 820DB550h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001CC) );
		/* 820DB550h case   26:*/		return 0x820DB554;
		  /* 820DB554h */ case   27:  		/* mtspr CTR, R11 */
		/* 820DB554h case   27:*/		regs.CTR = regs.R11;
		/* 820DB554h case   27:*/		return 0x820DB558;
		  /* 820DB558h */ case   28:  		/* bcctrl 20, CR0_LT */
		/* 820DB558h case   28:*/		if ( 1 ) { regs.LR = 0x820DB55C; return (uint32)regs.CTR; }
		/* 820DB558h case   28:*/		return 0x820DB55C;
		  /* 820DB55Ch */ case   29:  		/* cmpwi CR0, R3, 0 */
		/* 820DB55Ch case   29:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB55Ch case   29:*/		return 0x820DB560;
		  /* 820DB560h */ case   30:  		/* bc 12, CR0_LT, 36 */
		/* 820DB560h case   30:*/		if ( regs.CR[0].lt ) { return 0x820DB584;  }
		/* 820DB560h case   30:*/		return 0x820DB564;
		  /* 820DB564h */ case   31:  		/* lis R11, -32254 */
		/* 820DB564h case   31:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB564h case   31:*/		return 0x820DB568;
		  /* 820DB568h */ case   32:  		/* mr R3, R31 */
		/* 820DB568h case   32:*/		regs.R3 = regs.R31;
		/* 820DB568h case   32:*/		return 0x820DB56C;
		  /* 820DB56Ch */ case   33:  		/* addi R4, R11, -30656 */
		/* 820DB56Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8840);
		/* 820DB56Ch case   33:*/		return 0x820DB570;
		  /* 820DB570h */ case   34:  		/* bl -5272 */
		/* 820DB570h case   34:*/		regs.LR = 0x820DB574; return 0x820DA0D8;
		/* 820DB570h case   34:*/		return 0x820DB574;
		  /* 820DB574h */ case   35:  		/* cmpwi CR0, R3, 0 */
		/* 820DB574h case   35:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB574h case   35:*/		return 0x820DB578;
		  /* 820DB578h */ case   36:  		/* bc 12, CR0_LT, 12 */
		/* 820DB578h case   36:*/		if ( regs.CR[0].lt ) { return 0x820DB584;  }
		/* 820DB578h case   36:*/		return 0x820DB57C;
		  /* 820DB57Ch */ case   37:  		/* mr R3, R31 */
		/* 820DB57Ch case   37:*/		regs.R3 = regs.R31;
		/* 820DB57Ch case   37:*/		return 0x820DB580;
		  /* 820DB580h */ case   38:  		/* bl 111952 */
		/* 820DB580h case   38:*/		regs.LR = 0x820DB584; return 0x820F6AD0;
		/* 820DB580h case   38:*/		return 0x820DB584;
	}
	return 0x820DB584;
} // Block from 820DB4E8h-820DB584h (39 instructions)

//////////////////////////////////////////////////////
// Block at 820DB584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB584);
		  /* 820DB584h */ case    0:  		/* addi R1, R1, 128 */
		/* 820DB584h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DB584h case    0:*/		return 0x820DB588;
		  /* 820DB588h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DB588h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DB588h case    1:*/		return 0x820DB58C;
		  /* 820DB58Ch */ case    2:  		/* mtspr LR, R12 */
		/* 820DB58Ch case    2:*/		regs.LR = regs.R12;
		/* 820DB58Ch case    2:*/		return 0x820DB590;
		  /* 820DB590h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 820DB590h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820DB590h case    3:*/		return 0x820DB594;
		  /* 820DB594h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820DB594h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DB594h case    4:*/		return 0x820DB598;
		  /* 820DB598h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820DB598h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DB598h case    5:*/		return 0x820DB59C;
	}
	return 0x820DB59C;
} // Block from 820DB584h-820DB59Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DB59Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB59C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB59C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB59C);
		  /* 820DB59Ch */ case    0:  		/* nop */
		/* 820DB59Ch case    0:*/		cpu::op::nop();
		/* 820DB59Ch case    0:*/		return 0x820DB5A0;
	}
	return 0x820DB5A0;
} // Block from 820DB59Ch-820DB5A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DB5A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB5A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB5A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB5A0);
		  /* 820DB5A0h */ case    0:  		/* mfspr R12, LR */
		/* 820DB5A0h case    0:*/		regs.R12 = regs.LR;
		/* 820DB5A0h case    0:*/		return 0x820DB5A4;
		  /* 820DB5A4h */ case    1:  		/* bl -303960 */
		/* 820DB5A4h case    1:*/		regs.LR = 0x820DB5A8; return 0x8209124C;
		/* 820DB5A4h case    1:*/		return 0x820DB5A8;
		  /* 820DB5A8h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 820DB5A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 820DB5A8h case    2:*/		return 0x820DB5AC;
		  /* 820DB5ACh */ case    3:  		/* mr R31, R3 */
		/* 820DB5ACh case    3:*/		regs.R31 = regs.R3;
		/* 820DB5ACh case    3:*/		return 0x820DB5B0;
		  /* 820DB5B0h */ case    4:  		/* mr R25, R5 */
		/* 820DB5B0h case    4:*/		regs.R25 = regs.R5;
		/* 820DB5B0h case    4:*/		return 0x820DB5B4;
		  /* 820DB5B4h */ case    5:  		/* mr R29, R6 */
		/* 820DB5B4h case    5:*/		regs.R29 = regs.R6;
		/* 820DB5B4h case    5:*/		return 0x820DB5B8;
		  /* 820DB5B8h */ case    6:  		/* mr R28, R7 */
		/* 820DB5B8h case    6:*/		regs.R28 = regs.R7;
		/* 820DB5B8h case    6:*/		return 0x820DB5BC;
		  /* 820DB5BCh */ case    7:  		/* cmpwi CR6, R4, 0 */
		/* 820DB5BCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 820DB5BCh case    7:*/		return 0x820DB5C0;
		  /* 820DB5C0h */ case    8:  		/* lis R30, 29600 */
		/* 820DB5C0h case    8:*/		cpu::op::lis<0>(regs,&regs.R30,0x73A0);
		/* 820DB5C0h case    8:*/		return 0x820DB5C4;
		  /* 820DB5C4h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 820DB5C4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x820DB5CC;  }
		/* 820DB5C4h case    9:*/		return 0x820DB5C8;
		  /* 820DB5C8h */ case   10:  		/* lis R30, 29584 */
		/* 820DB5C8h case   10:*/		cpu::op::lis<0>(regs,&regs.R30,0x7390);
		/* 820DB5C8h case   10:*/		return 0x820DB5CC;
	}
	return 0x820DB5CC;
} // Block from 820DB5A0h-820DB5CCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820DB5CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB5CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB5CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB5CC);
		  /* 820DB5CCh */ case    0:  		/* lis R11, -32254 */
		/* 820DB5CCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB5CCh case    0:*/		return 0x820DB5D0;
		  /* 820DB5D0h */ case    1:  		/* li R4, 32 */
		/* 820DB5D0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DB5D0h case    1:*/		return 0x820DB5D4;
		  /* 820DB5D4h */ case    2:  		/* addi R27, R11, -30716 */
		/* 820DB5D4h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFF8804);
		/* 820DB5D4h case    2:*/		return 0x820DB5D8;
		  /* 820DB5D8h */ case    3:  		/* addi R3, R1, 128 */
		/* 820DB5D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DB5D8h case    3:*/		return 0x820DB5DC;
		  /* 820DB5DCh */ case    4:  		/* mr R5, R27 */
		/* 820DB5DCh case    4:*/		regs.R5 = regs.R27;
		/* 820DB5DCh case    4:*/		return 0x820DB5E0;
		  /* 820DB5E0h */ case    5:  		/* bl -216816 */
		/* 820DB5E0h case    5:*/		regs.LR = 0x820DB5E4; return 0x820A66F0;
		/* 820DB5E0h case    5:*/		return 0x820DB5E4;
		  /* 820DB5E4h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 820DB5E4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB5E4h case    6:*/		return 0x820DB5E8;
		  /* 820DB5E8h */ case    7:  		/* mr R7, R28 */
		/* 820DB5E8h case    7:*/		regs.R7 = regs.R28;
		/* 820DB5E8h case    7:*/		return 0x820DB5EC;
		  /* 820DB5ECh */ case    8:  		/* mr R6, R29 */
		/* 820DB5ECh case    8:*/		regs.R6 = regs.R29;
		/* 820DB5ECh case    8:*/		return 0x820DB5F0;
		  /* 820DB5F0h */ case    9:  		/* addi R5, R1, 128 */
		/* 820DB5F0h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DB5F0h case    9:*/		return 0x820DB5F4;
		  /* 820DB5F4h */ case   10:  		/* mr R4, R30 */
		/* 820DB5F4h case   10:*/		regs.R4 = regs.R30;
		/* 820DB5F4h case   10:*/		return 0x820DB5F8;
		  /* 820DB5F8h */ case   11:  		/* lwz R11, <#[R11 + 484]> */
		/* 820DB5F8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001E4) );
		/* 820DB5F8h case   11:*/		return 0x820DB5FC;
		  /* 820DB5FCh */ case   12:  		/* mr R3, R31 */
		/* 820DB5FCh case   12:*/		regs.R3 = regs.R31;
		/* 820DB5FCh case   12:*/		return 0x820DB600;
		  /* 820DB600h */ case   13:  		/* mtspr CTR, R11 */
		/* 820DB600h case   13:*/		regs.CTR = regs.R11;
		/* 820DB600h case   13:*/		return 0x820DB604;
		  /* 820DB604h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 820DB604h case   14:*/		if ( 1 ) { regs.LR = 0x820DB608; return (uint32)regs.CTR; }
		/* 820DB604h case   14:*/		return 0x820DB608;
	}
	return 0x820DB608;
} // Block from 820DB5CCh-820DB608h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820DB608h
// Function '?EmitZeroVector@C30SWProgram@D3DXShader@@MAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB608);
		  /* 820DB608h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820DB608h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB608h case    0:*/		return 0x820DB60C;
		  /* 820DB60Ch */ case    1:  		/* bc 12, CR0_LT, 320 */
		/* 820DB60Ch case    1:*/		if ( regs.CR[0].lt ) { return 0x820DB74C;  }
		/* 820DB60Ch case    1:*/		return 0x820DB610;
		  /* 820DB610h */ case    2:  		/* mr R3, R31 */
		/* 820DB610h case    2:*/		regs.R3 = regs.R31;
		/* 820DB610h case    2:*/		return 0x820DB614;
		  /* 820DB614h */ case    3:  		/* bl -5220 */
		/* 820DB614h case    3:*/		regs.LR = 0x820DB618; return 0x820DA1B0;
		/* 820DB614h case    3:*/		return 0x820DB618;
		  /* 820DB618h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820DB618h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB618h case    4:*/		return 0x820DB61C;
		  /* 820DB61Ch */ case    5:  		/* bc 12, CR0_LT, 304 */
		/* 820DB61Ch case    5:*/		if ( regs.CR[0].lt ) { return 0x820DB74C;  }
		/* 820DB61Ch case    5:*/		return 0x820DB620;
		  /* 820DB620h */ case    6:  		/* lis R11, -32254 */
		/* 820DB620h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB620h case    6:*/		return 0x820DB624;
		  /* 820DB624h */ case    7:  		/* mr R3, R31 */
		/* 820DB624h case    7:*/		regs.R3 = regs.R31;
		/* 820DB624h case    7:*/		return 0x820DB628;
		  /* 820DB628h */ case    8:  		/* addi R4, R11, -30508 */
		/* 820DB628h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88D4);
		/* 820DB628h case    8:*/		return 0x820DB62C;
		  /* 820DB62Ch */ case    9:  		/* bl -5460 */
		/* 820DB62Ch case    9:*/		regs.LR = 0x820DB630; return 0x820DA0D8;
		/* 820DB62Ch case    9:*/		return 0x820DB630;
		  /* 820DB630h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DB630h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB630h case   10:*/		return 0x820DB634;
		  /* 820DB634h */ case   11:  		/* bc 12, CR0_LT, 280 */
		/* 820DB634h case   11:*/		if ( regs.CR[0].lt ) { return 0x820DB74C;  }
		/* 820DB634h case   11:*/		return 0x820DB638;
		  /* 820DB638h */ case   12:  		/* lwz R11, <#[R31]> */
		/* 820DB638h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB638h case   12:*/		return 0x820DB63C;
		  /* 820DB63Ch */ case   13:  		/* lis R10, -32254 */
		/* 820DB63Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DB63Ch case   13:*/		return 0x820DB640;
		  /* 820DB640h */ case   14:  		/* li R8, 3 */
		/* 820DB640h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820DB640h case   14:*/		return 0x820DB644;
		  /* 820DB644h */ case   15:  		/* addi R4, R10, -30764 */
		/* 820DB644h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF87D4);
		/* 820DB644h case   15:*/		return 0x820DB648;
		  /* 820DB648h */ case   16:  		/* li R7, 3 */
		/* 820DB648h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 820DB648h case   16:*/		return 0x820DB64C;
		  /* 820DB64Ch */ case   17:  		/* li R6, 3 */
		/* 820DB64Ch case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 820DB64Ch case   17:*/		return 0x820DB650;
		  /* 820DB650h */ case   18:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DB650h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DB650h case   18:*/		return 0x820DB654;
		  /* 820DB654h */ case   19:  		/* li R5, 3 */
		/* 820DB654h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820DB654h case   19:*/		return 0x820DB658;
		  /* 820DB658h */ case   20:  		/* mr R3, R31 */
		/* 820DB658h case   20:*/		regs.R3 = regs.R31;
		/* 820DB658h case   20:*/		return 0x820DB65C;
		  /* 820DB65Ch */ case   21:  		/* mtspr CTR, R11 */
		/* 820DB65Ch case   21:*/		regs.CTR = regs.R11;
		/* 820DB65Ch case   21:*/		return 0x820DB660;
		  /* 820DB660h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 820DB660h case   22:*/		if ( 1 ) { regs.LR = 0x820DB664; return (uint32)regs.CTR; }
		/* 820DB660h case   22:*/		return 0x820DB664;
		  /* 820DB664h */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 820DB664h case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB664h case   23:*/		return 0x820DB668;
		  /* 820DB668h */ case   24:  		/* bc 12, CR0_LT, 228 */
		/* 820DB668h case   24:*/		if ( regs.CR[0].lt ) { return 0x820DB74C;  }
		/* 820DB668h case   24:*/		return 0x820DB66C;
		  /* 820DB66Ch */ case   25:  		/* lis R11, -32254 */
		/* 820DB66Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB66Ch case   25:*/		return 0x820DB670;
		  /* 820DB670h */ case   26:  		/* mr R3, R31 */
		/* 820DB670h case   26:*/		regs.R3 = regs.R31;
		/* 820DB670h case   26:*/		return 0x820DB674;
		  /* 820DB674h */ case   27:  		/* addi R26, R11, -30768 */
		/* 820DB674h case   27:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFF87D0);
		/* 820DB674h case   27:*/		return 0x820DB678;
		  /* 820DB678h */ case   28:  		/* mr R4, R26 */
		/* 820DB678h case   28:*/		regs.R4 = regs.R26;
		/* 820DB678h case   28:*/		return 0x820DB67C;
		  /* 820DB67Ch */ case   29:  		/* bl -5540 */
		/* 820DB67Ch case   29:*/		regs.LR = 0x820DB680; return 0x820DA0D8;
		/* 820DB67Ch case   29:*/		return 0x820DB680;
		  /* 820DB680h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 820DB680h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB680h case   30:*/		return 0x820DB684;
		  /* 820DB684h */ case   31:  		/* bc 12, CR0_LT, 200 */
		/* 820DB684h case   31:*/		if ( regs.CR[0].lt ) { return 0x820DB74C;  }
		/* 820DB684h case   31:*/		return 0x820DB688;
		  /* 820DB688h */ case   32:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DB688h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DB688h case   32:*/		return 0x820DB68C;
		  /* 820DB68Ch */ case   33:  		/* li R30, 0 */
		/* 820DB68Ch case   33:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DB68Ch case   33:*/		return 0x820DB690;
		  /* 820DB690h */ case   34:  		/* cmplwi CR6, R11, 0 */
		/* 820DB690h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DB690h case   34:*/		return 0x820DB694;
		  /* 820DB694h */ case   35:  		/* bc 4, CR6_GT, 180 */
		/* 820DB694h case   35:*/		if ( !regs.CR[6].gt ) { return 0x820DB748;  }
		/* 820DB694h case   35:*/		return 0x820DB698;
	}
	return 0x820DB698;
} // Block from 820DB608h-820DB698h (36 instructions)

//////////////////////////////////////////////////////
// Block at 820DB698h
// Function '?EmitANDIF@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB698);
		  /* 820DB698h */ case    0:  		/* lis R10, -32254 */
		/* 820DB698h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DB698h case    0:*/		return 0x820DB69C;
		  /* 820DB69Ch */ case    1:  		/* lis R11, -32254 */
		/* 820DB69Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB69Ch case    1:*/		return 0x820DB6A0;
		  /* 820DB6A0h */ case    2:  		/* addi R28, R10, -30516 */
		/* 820DB6A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFF88CC);
		/* 820DB6A0h case    2:*/		return 0x820DB6A4;
		  /* 820DB6A4h */ case    3:  		/* addi R29, R11, -30692 */
		/* 820DB6A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF881C);
		/* 820DB6A4h case    3:*/		return 0x820DB6A8;
		  /* 820DB6A8h */ case    4:  		/* mr R3, R31 */
		/* 820DB6A8h case    4:*/		regs.R3 = regs.R31;
		/* 820DB6A8h case    4:*/		return 0x820DB6AC;
		  /* 820DB6ACh */ case    5:  		/* bl -5372 */
		/* 820DB6ACh case    5:*/		regs.LR = 0x820DB6B0; return 0x820DA1B0;
		/* 820DB6ACh case    5:*/		return 0x820DB6B0;
		  /* 820DB6B0h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DB6B0h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB6B0h case    6:*/		return 0x820DB6B4;
		  /* 820DB6B4h */ case    7:  		/* bc 12, CR0_LT, 152 */
		/* 820DB6B4h case    7:*/		if ( regs.CR[0].lt ) { return 0x820DB74C;  }
		/* 820DB6B4h case    7:*/		return 0x820DB6B8;
		  /* 820DB6B8h */ case    8:  		/* mr R7, R30 */
		/* 820DB6B8h case    8:*/		regs.R7 = regs.R30;
		/* 820DB6B8h case    8:*/		return 0x820DB6BC;
		  /* 820DB6BCh */ case    9:  		/* mr R6, R30 */
		/* 820DB6BCh case    9:*/		regs.R6 = regs.R30;
		/* 820DB6BCh case    9:*/		return 0x820DB6C0;
		  /* 820DB6C0h */ case   10:  		/* mr R5, R25 */
		/* 820DB6C0h case   10:*/		regs.R5 = regs.R25;
		/* 820DB6C0h case   10:*/		return 0x820DB6C4;
		  /* 820DB6C4h */ case   11:  		/* li R4, 32 */
		/* 820DB6C4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DB6C4h case   11:*/		return 0x820DB6C8;
		  /* 820DB6C8h */ case   12:  		/* addi R3, R1, 160 */
		/* 820DB6C8h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DB6C8h case   12:*/		return 0x820DB6CC;
		  /* 820DB6CCh */ case   13:  		/* bl -233612 */
		/* 820DB6CCh case   13:*/		regs.LR = 0x820DB6D0; return 0x820A2640;
		/* 820DB6CCh case   13:*/		return 0x820DB6D0;
		  /* 820DB6D0h */ case   14:  		/* mr R5, R27 */
		/* 820DB6D0h case   14:*/		regs.R5 = regs.R27;
		/* 820DB6D0h case   14:*/		return 0x820DB6D4;
		  /* 820DB6D4h */ case   15:  		/* mr R6, R30 */
		/* 820DB6D4h case   15:*/		regs.R6 = regs.R30;
		/* 820DB6D4h case   15:*/		return 0x820DB6D8;
		  /* 820DB6D8h */ case   16:  		/* li R4, 32 */
		/* 820DB6D8h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DB6D8h case   16:*/		return 0x820DB6DC;
		  /* 820DB6DCh */ case   17:  		/* addi R3, R1, 128 */
		/* 820DB6DCh case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DB6DCh case   17:*/		return 0x820DB6E0;
		  /* 820DB6E0h */ case   18:  		/* bl -233632 */
		/* 820DB6E0h case   18:*/		regs.LR = 0x820DB6E4; return 0x820A2640;
		/* 820DB6E0h case   18:*/		return 0x820DB6E4;
		  /* 820DB6E4h */ case   19:  		/* mr R4, R29 */
		/* 820DB6E4h case   19:*/		regs.R4 = regs.R29;
		/* 820DB6E4h case   19:*/		return 0x820DB6E8;
		  /* 820DB6E8h */ case   20:  		/* addi R5, R1, 160 */
		/* 820DB6E8h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DB6E8h case   20:*/		return 0x820DB6EC;
		  /* 820DB6ECh */ case   21:  		/* mr R3, R31 */
		/* 820DB6ECh case   21:*/		regs.R3 = regs.R31;
		/* 820DB6ECh case   21:*/		return 0x820DB6F0;
		  /* 820DB6F0h */ case   22:  		/* bl -5656 */
		/* 820DB6F0h case   22:*/		regs.LR = 0x820DB6F4; return 0x820DA0D8;
		/* 820DB6F0h case   22:*/		return 0x820DB6F4;
		  /* 820DB6F4h */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 820DB6F4h case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB6F4h case   23:*/		return 0x820DB6F8;
		  /* 820DB6F8h */ case   24:  		/* bc 12, CR0_LT, 84 */
		/* 820DB6F8h case   24:*/		if ( regs.CR[0].lt ) { return 0x820DB74C;  }
		/* 820DB6F8h case   24:*/		return 0x820DB6FC;
		  /* 820DB6FCh */ case   25:  		/* lwz R11, <#[R31]> */
		/* 820DB6FCh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB6FCh case   25:*/		return 0x820DB700;
		  /* 820DB700h */ case   26:  		/* mr R5, R28 */
		/* 820DB700h case   26:*/		regs.R5 = regs.R28;
		/* 820DB700h case   26:*/		return 0x820DB704;
		  /* 820DB704h */ case   27:  		/* addi R6, R1, 128 */
		/* 820DB704h case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DB704h case   27:*/		return 0x820DB708;
		  /* 820DB708h */ case   28:  		/* addi R4, R1, 128 */
		/* 820DB708h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820DB708h case   28:*/		return 0x820DB70C;
		  /* 820DB70Ch */ case   29:  		/* mr R3, R31 */
		/* 820DB70Ch case   29:*/		regs.R3 = regs.R31;
		/* 820DB70Ch case   29:*/		return 0x820DB710;
		  /* 820DB710h */ case   30:  		/* lwz R11, <#[R11 + 400]> */
		/* 820DB710h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820DB710h case   30:*/		return 0x820DB714;
		  /* 820DB714h */ case   31:  		/* mtspr CTR, R11 */
		/* 820DB714h case   31:*/		regs.CTR = regs.R11;
		/* 820DB714h case   31:*/		return 0x820DB718;
		  /* 820DB718h */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 820DB718h case   32:*/		if ( 1 ) { regs.LR = 0x820DB71C; return (uint32)regs.CTR; }
		/* 820DB718h case   32:*/		return 0x820DB71C;
		  /* 820DB71Ch */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 820DB71Ch case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB71Ch case   33:*/		return 0x820DB720;
		  /* 820DB720h */ case   34:  		/* bc 12, CR0_LT, 44 */
		/* 820DB720h case   34:*/		if ( regs.CR[0].lt ) { return 0x820DB74C;  }
		/* 820DB720h case   34:*/		return 0x820DB724;
		  /* 820DB724h */ case   35:  		/* mr R4, R26 */
		/* 820DB724h case   35:*/		regs.R4 = regs.R26;
		/* 820DB724h case   35:*/		return 0x820DB728;
		  /* 820DB728h */ case   36:  		/* mr R3, R31 */
		/* 820DB728h case   36:*/		regs.R3 = regs.R31;
		/* 820DB728h case   36:*/		return 0x820DB72C;
		  /* 820DB72Ch */ case   37:  		/* bl -5716 */
		/* 820DB72Ch case   37:*/		regs.LR = 0x820DB730; return 0x820DA0D8;
		/* 820DB72Ch case   37:*/		return 0x820DB730;
		  /* 820DB730h */ case   38:  		/* cmpwi CR0, R3, 0 */
		/* 820DB730h case   38:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB730h case   38:*/		return 0x820DB734;
		  /* 820DB734h */ case   39:  		/* bc 12, CR0_LT, 24 */
		/* 820DB734h case   39:*/		if ( regs.CR[0].lt ) { return 0x820DB74C;  }
		/* 820DB734h case   39:*/		return 0x820DB738;
		  /* 820DB738h */ case   40:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DB738h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DB738h case   40:*/		return 0x820DB73C;
		  /* 820DB73Ch */ case   41:  		/* addi R30, R30, 1 */
		/* 820DB73Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DB73Ch case   41:*/		return 0x820DB740;
		  /* 820DB740h */ case   42:  		/* cmplw CR6, R30, R11 */
		/* 820DB740h case   42:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DB740h case   42:*/		return 0x820DB744;
		  /* 820DB744h */ case   43:  		/* bc 12, CR6_LT, -156 */
		/* 820DB744h case   43:*/		if ( regs.CR[6].lt ) { return 0x820DB6A8;  }
		/* 820DB744h case   43:*/		return 0x820DB748;
	}
	return 0x820DB748;
} // Block from 820DB698h-820DB748h (44 instructions)

//////////////////////////////////////////////////////
// Block at 820DB748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB748);
		  /* 820DB748h */ case    0:  		/* li R3, 0 */
		/* 820DB748h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DB748h case    0:*/		return 0x820DB74C;
	}
	return 0x820DB74C;
} // Block from 820DB748h-820DB74Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DB74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB74C);
		  /* 820DB74Ch */ case    0:  		/* addi R1, R1, 256 */
		/* 820DB74Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 820DB74Ch case    0:*/		return 0x820DB750;
		  /* 820DB750h */ case    1:  		/* b -304308 */
		/* 820DB750h case    1:*/		return 0x8209129C;
		/* 820DB750h case    1:*/		return 0x820DB754;
		  /* 820DB754h */ case    2:  		/* nop */
		/* 820DB754h case    2:*/		cpu::op::nop();
		/* 820DB754h case    2:*/		return 0x820DB758;
	}
	return 0x820DB758;
} // Block from 820DB74Ch-820DB758h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DB758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB758);
		  /* 820DB758h */ case    0:  		/* mfspr R12, LR */
		/* 820DB758h case    0:*/		regs.R12 = regs.LR;
		/* 820DB758h case    0:*/		return 0x820DB75C;
		  /* 820DB75Ch */ case    1:  		/* bl -304424 */
		/* 820DB75Ch case    1:*/		regs.LR = 0x820DB760; return 0x82091234;
		/* 820DB75Ch case    1:*/		return 0x820DB760;
		  /* 820DB760h */ case    2:  		/* stwu R1, <#[R1 - 400]> */
		/* 820DB760h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 820DB760h case    2:*/		return 0x820DB764;
		  /* 820DB764h */ case    3:  		/* mr R31, R3 */
		/* 820DB764h case    3:*/		regs.R31 = regs.R3;
		/* 820DB764h case    3:*/		return 0x820DB768;
		  /* 820DB768h */ case    4:  		/* mr R19, R4 */
		/* 820DB768h case    4:*/		regs.R19 = regs.R4;
		/* 820DB768h case    4:*/		return 0x820DB76C;
		  /* 820DB76Ch */ case    5:  		/* mr R20, R5 */
		/* 820DB76Ch case    5:*/		regs.R20 = regs.R5;
		/* 820DB76Ch case    5:*/		return 0x820DB770;
		  /* 820DB770h */ case    6:  		/* mr R21, R6 */
		/* 820DB770h case    6:*/		regs.R21 = regs.R6;
		/* 820DB770h case    6:*/		return 0x820DB774;
		  /* 820DB774h */ case    7:  		/* bl -5572 */
		/* 820DB774h case    7:*/		regs.LR = 0x820DB778; return 0x820DA1B0;
		/* 820DB774h case    7:*/		return 0x820DB778;
		  /* 820DB778h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DB778h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB778h case    8:*/		return 0x820DB77C;
		  /* 820DB77Ch */ case    9:  		/* bc 12, CR0_LT, 1100 */
		/* 820DB77Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB77Ch case    9:*/		return 0x820DB780;
		  /* 820DB780h */ case   10:  		/* lis R11, -32254 */
		/* 820DB780h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB780h case   10:*/		return 0x820DB784;
		  /* 820DB784h */ case   11:  		/* mr R3, R31 */
		/* 820DB784h case   11:*/		regs.R3 = regs.R31;
		/* 820DB784h case   11:*/		return 0x820DB788;
		  /* 820DB788h */ case   12:  		/* addi R24, R11, -30508 */
		/* 820DB788h case   12:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFF88D4);
		/* 820DB788h case   12:*/		return 0x820DB78C;
		  /* 820DB78Ch */ case   13:  		/* mr R4, R24 */
		/* 820DB78Ch case   13:*/		regs.R4 = regs.R24;
		/* 820DB78Ch case   13:*/		return 0x820DB790;
		  /* 820DB790h */ case   14:  		/* bl -5816 */
		/* 820DB790h case   14:*/		regs.LR = 0x820DB794; return 0x820DA0D8;
		/* 820DB790h case   14:*/		return 0x820DB794;
		  /* 820DB794h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820DB794h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB794h case   15:*/		return 0x820DB798;
		  /* 820DB798h */ case   16:  		/* bc 12, CR0_LT, 1072 */
		/* 820DB798h case   16:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB798h case   16:*/		return 0x820DB79C;
		  /* 820DB79Ch */ case   17:  		/* lwz R10, <#[R31]> */
		/* 820DB79Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB79Ch case   17:*/		return 0x820DB7A0;
		  /* 820DB7A0h */ case   18:  		/* lis R11, -32254 */
		/* 820DB7A0h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB7A0h case   18:*/		return 0x820DB7A4;
		  /* 820DB7A4h */ case   19:  		/* li R8, 0 */
		/* 820DB7A4h case   19:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820DB7A4h case   19:*/		return 0x820DB7A8;
		  /* 820DB7A8h */ case   20:  		/* addi R25, R11, -30764 */
		/* 820DB7A8h case   20:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFF87D4);
		/* 820DB7A8h case   20:*/		return 0x820DB7AC;
		  /* 820DB7ACh */ case   21:  		/* li R7, 0 */
		/* 820DB7ACh case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DB7ACh case   21:*/		return 0x820DB7B0;
		  /* 820DB7B0h */ case   22:  		/* mr R4, R25 */
		/* 820DB7B0h case   22:*/		regs.R4 = regs.R25;
		/* 820DB7B0h case   22:*/		return 0x820DB7B4;
		  /* 820DB7B4h */ case   23:  		/* lwz R11, <#[R10 + 388]> */
		/* 820DB7B4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000184) );
		/* 820DB7B4h case   23:*/		return 0x820DB7B8;
		  /* 820DB7B8h */ case   24:  		/* li R6, 0 */
		/* 820DB7B8h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820DB7B8h case   24:*/		return 0x820DB7BC;
		  /* 820DB7BCh */ case   25:  		/* li R5, 3 */
		/* 820DB7BCh case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820DB7BCh case   25:*/		return 0x820DB7C0;
		  /* 820DB7C0h */ case   26:  		/* mr R3, R31 */
		/* 820DB7C0h case   26:*/		regs.R3 = regs.R31;
		/* 820DB7C0h case   26:*/		return 0x820DB7C4;
		  /* 820DB7C4h */ case   27:  		/* mtspr CTR, R11 */
		/* 820DB7C4h case   27:*/		regs.CTR = regs.R11;
		/* 820DB7C4h case   27:*/		return 0x820DB7C8;
		  /* 820DB7C8h */ case   28:  		/* bcctrl 20, CR0_LT */
		/* 820DB7C8h case   28:*/		if ( 1 ) { regs.LR = 0x820DB7CC; return (uint32)regs.CTR; }
		/* 820DB7C8h case   28:*/		return 0x820DB7CC;
		  /* 820DB7CCh */ case   29:  		/* cmpwi CR0, R3, 0 */
		/* 820DB7CCh case   29:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB7CCh case   29:*/		return 0x820DB7D0;
		  /* 820DB7D0h */ case   30:  		/* bc 12, CR0_LT, 1016 */
		/* 820DB7D0h case   30:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB7D0h case   30:*/		return 0x820DB7D4;
		  /* 820DB7D4h */ case   31:  		/* lis R11, -32254 */
		/* 820DB7D4h case   31:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB7D4h case   31:*/		return 0x820DB7D8;
		  /* 820DB7D8h */ case   32:  		/* mr R3, R31 */
		/* 820DB7D8h case   32:*/		regs.R3 = regs.R31;
		/* 820DB7D8h case   32:*/		return 0x820DB7DC;
		  /* 820DB7DCh */ case   33:  		/* addi R22, R11, -30768 */
		/* 820DB7DCh case   33:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0xFFFF87D0);
		/* 820DB7DCh case   33:*/		return 0x820DB7E0;
		  /* 820DB7E0h */ case   34:  		/* mr R4, R22 */
		/* 820DB7E0h case   34:*/		regs.R4 = regs.R22;
		/* 820DB7E0h case   34:*/		return 0x820DB7E4;
		  /* 820DB7E4h */ case   35:  		/* bl -5900 */
		/* 820DB7E4h case   35:*/		regs.LR = 0x820DB7E8; return 0x820DA0D8;
		/* 820DB7E4h case   35:*/		return 0x820DB7E8;
		  /* 820DB7E8h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820DB7E8h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB7E8h case   36:*/		return 0x820DB7EC;
		  /* 820DB7ECh */ case   37:  		/* bc 12, CR0_LT, 988 */
		/* 820DB7ECh case   37:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB7ECh case   37:*/		return 0x820DB7F0;
		  /* 820DB7F0h */ case   38:  		/* mr R3, R31 */
		/* 820DB7F0h case   38:*/		regs.R3 = regs.R31;
		/* 820DB7F0h case   38:*/		return 0x820DB7F4;
		  /* 820DB7F4h */ case   39:  		/* bl -5700 */
		/* 820DB7F4h case   39:*/		regs.LR = 0x820DB7F8; return 0x820DA1B0;
		/* 820DB7F4h case   39:*/		return 0x820DB7F8;
		  /* 820DB7F8h */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 820DB7F8h case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB7F8h case   40:*/		return 0x820DB7FC;
		  /* 820DB7FCh */ case   41:  		/* bc 12, CR0_LT, 972 */
		/* 820DB7FCh case   41:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB7FCh case   41:*/		return 0x820DB800;
	}
	return 0x820DB800;
} // Block from 820DB758h-820DB800h (42 instructions)

//////////////////////////////////////////////////////
// Block at 820DB800h
// Function '?EmitANDELSE@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB800);
		  /* 820DB800h */ case    0:  		/* lis R11, -32254 */
		/* 820DB800h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB800h case    0:*/		return 0x820DB804;
		  /* 820DB804h */ case    1:  		/* mr R3, R31 */
		/* 820DB804h case    1:*/		regs.R3 = regs.R31;
		/* 820DB804h case    1:*/		return 0x820DB808;
		  /* 820DB808h */ case    2:  		/* addi R26, R11, -30468 */
		/* 820DB808h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFF88FC);
		/* 820DB808h case    2:*/		return 0x820DB80C;
		  /* 820DB80Ch */ case    3:  		/* mr R4, R26 */
		/* 820DB80Ch case    3:*/		regs.R4 = regs.R26;
		/* 820DB80Ch case    3:*/		return 0x820DB810;
		  /* 820DB810h */ case    4:  		/* bl -5944 */
		/* 820DB810h case    4:*/		regs.LR = 0x820DB814; return 0x820DA0D8;
		/* 820DB810h case    4:*/		return 0x820DB814;
		  /* 820DB814h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DB814h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB814h case    5:*/		return 0x820DB818;
		  /* 820DB818h */ case    6:  		/* bc 12, CR0_LT, 944 */
		/* 820DB818h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB818h case    6:*/		return 0x820DB81C;
		  /* 820DB81Ch */ case    7:  		/* lwz R11, <#[R31]> */
		/* 820DB81Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB81Ch case    7:*/		return 0x820DB820;
		  /* 820DB820h */ case    8:  		/* mr R4, R25 */
		/* 820DB820h case    8:*/		regs.R4 = regs.R25;
		/* 820DB820h case    8:*/		return 0x820DB824;
		  /* 820DB824h */ case    9:  		/* li R8, 0 */
		/* 820DB824h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820DB824h case    9:*/		return 0x820DB828;
		  /* 820DB828h */ case   10:  		/* li R7, 0 */
		/* 820DB828h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DB828h case   10:*/		return 0x820DB82C;
		  /* 820DB82Ch */ case   11:  		/* li R6, 1 */
		/* 820DB82Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820DB82Ch case   11:*/		return 0x820DB830;
		  /* 820DB830h */ case   12:  		/* li R5, 0 */
		/* 820DB830h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820DB830h case   12:*/		return 0x820DB834;
		  /* 820DB834h */ case   13:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DB834h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DB834h case   13:*/		return 0x820DB838;
		  /* 820DB838h */ case   14:  		/* mr R3, R31 */
		/* 820DB838h case   14:*/		regs.R3 = regs.R31;
		/* 820DB838h case   14:*/		return 0x820DB83C;
		  /* 820DB83Ch */ case   15:  		/* mtspr CTR, R11 */
		/* 820DB83Ch case   15:*/		regs.CTR = regs.R11;
		/* 820DB83Ch case   15:*/		return 0x820DB840;
		  /* 820DB840h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 820DB840h case   16:*/		if ( 1 ) { regs.LR = 0x820DB844; return (uint32)regs.CTR; }
		/* 820DB840h case   16:*/		return 0x820DB844;
		  /* 820DB844h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 820DB844h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB844h case   17:*/		return 0x820DB848;
		  /* 820DB848h */ case   18:  		/* bc 12, CR0_LT, 896 */
		/* 820DB848h case   18:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB848h case   18:*/		return 0x820DB84C;
		  /* 820DB84Ch */ case   19:  		/* mr R4, R22 */
		/* 820DB84Ch case   19:*/		regs.R4 = regs.R22;
		/* 820DB84Ch case   19:*/		return 0x820DB850;
		  /* 820DB850h */ case   20:  		/* mr R3, R31 */
		/* 820DB850h case   20:*/		regs.R3 = regs.R31;
		/* 820DB850h case   20:*/		return 0x820DB854;
		  /* 820DB854h */ case   21:  		/* bl -6012 */
		/* 820DB854h case   21:*/		regs.LR = 0x820DB858; return 0x820DA0D8;
		/* 820DB854h case   21:*/		return 0x820DB858;
		  /* 820DB858h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 820DB858h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB858h case   22:*/		return 0x820DB85C;
		  /* 820DB85Ch */ case   23:  		/* bc 12, CR0_LT, 876 */
		/* 820DB85Ch case   23:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB85Ch case   23:*/		return 0x820DB860;
		  /* 820DB860h */ case   24:  		/* lwz R7, <#[R31 + 1816]> */
		/* 820DB860h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000718) );
		/* 820DB860h case   24:*/		return 0x820DB864;
		  /* 820DB864h */ case   25:  		/* lis R8, -32254 */
		/* 820DB864h case   25:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820DB864h case   25:*/		return 0x820DB868;
		  /* 820DB868h */ case   26:  		/* lis R9, -32254 */
		/* 820DB868h case   26:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DB868h case   26:*/		return 0x820DB86C;
		  /* 820DB86Ch */ case   27:  		/* lis R10, -32254 */
		/* 820DB86Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DB86Ch case   27:*/		return 0x820DB870;
		  /* 820DB870h */ case   28:  		/* lis R11, -32254 */
		/* 820DB870h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DB870h case   28:*/		return 0x820DB874;
		  /* 820DB874h */ case   29:  		/* li R30, 0 */
		/* 820DB874h case   29:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DB874h case   29:*/		return 0x820DB878;
		  /* 820DB878h */ case   30:  		/* addi R28, R8, -30516 */
		/* 820DB878h case   30:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R8,0xFFFF88CC);
		/* 820DB878h case   30:*/		return 0x820DB87C;
		  /* 820DB87Ch */ case   31:  		/* cmplwi CR6, R7, 0 */
		/* 820DB87Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 820DB87Ch case   31:*/		return 0x820DB880;
		  /* 820DB880h */ case   32:  		/* addi R27, R9, -30476 */
		/* 820DB880h case   32:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0xFFFF88F4);
		/* 820DB880h case   32:*/		return 0x820DB884;
		  /* 820DB884h */ case   33:  		/* addi R29, R10, -30692 */
		/* 820DB884h case   33:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFF881C);
		/* 820DB884h case   33:*/		return 0x820DB888;
		  /* 820DB888h */ case   34:  		/* addi R23, R11, -30488 */
		/* 820DB888h case   34:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0xFFFF88E8);
		/* 820DB888h case   34:*/		return 0x820DB88C;
		  /* 820DB88Ch */ case   35:  		/* bc 4, CR6_GT, 164 */
		/* 820DB88Ch case   35:*/		if ( !regs.CR[6].gt ) { return 0x820DB930;  }
		/* 820DB88Ch case   35:*/		return 0x820DB890;
		  /* 820DB890h */ case   36:  		/* mr R3, R31 */
		/* 820DB890h case   36:*/		regs.R3 = regs.R31;
		/* 820DB890h case   36:*/		return 0x820DB894;
		  /* 820DB894h */ case   37:  		/* bl -5860 */
		/* 820DB894h case   37:*/		regs.LR = 0x820DB898; return 0x820DA1B0;
		/* 820DB894h case   37:*/		return 0x820DB898;
		  /* 820DB898h */ case   38:  		/* cmpwi CR0, R3, 0 */
		/* 820DB898h case   38:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB898h case   38:*/		return 0x820DB89C;
		  /* 820DB89Ch */ case   39:  		/* bc 12, CR0_LT, 812 */
		/* 820DB89Ch case   39:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB89Ch case   39:*/		return 0x820DB8A0;
		  /* 820DB8A0h */ case   40:  		/* mr R7, R30 */
		/* 820DB8A0h case   40:*/		regs.R7 = regs.R30;
		/* 820DB8A0h case   40:*/		return 0x820DB8A4;
		  /* 820DB8A4h */ case   41:  		/* mr R6, R30 */
		/* 820DB8A4h case   41:*/		regs.R6 = regs.R30;
		/* 820DB8A4h case   41:*/		return 0x820DB8A8;
		  /* 820DB8A8h */ case   42:  		/* mr R5, R21 */
		/* 820DB8A8h case   42:*/		regs.R5 = regs.R21;
		/* 820DB8A8h case   42:*/		return 0x820DB8AC;
		  /* 820DB8ACh */ case   43:  		/* li R4, 32 */
		/* 820DB8ACh case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DB8ACh case   43:*/		return 0x820DB8B0;
		  /* 820DB8B0h */ case   44:  		/* addi R3, R1, 128 */
		/* 820DB8B0h case   44:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DB8B0h case   44:*/		return 0x820DB8B4;
		  /* 820DB8B4h */ case   45:  		/* bl -234100 */
		/* 820DB8B4h case   45:*/		regs.LR = 0x820DB8B8; return 0x820A2640;
		/* 820DB8B4h case   45:*/		return 0x820DB8B8;
		  /* 820DB8B8h */ case   46:  		/* mr R5, R23 */
		/* 820DB8B8h case   46:*/		regs.R5 = regs.R23;
		/* 820DB8B8h case   46:*/		return 0x820DB8BC;
		  /* 820DB8BCh */ case   47:  		/* mr R6, R30 */
		/* 820DB8BCh case   47:*/		regs.R6 = regs.R30;
		/* 820DB8BCh case   47:*/		return 0x820DB8C0;
		  /* 820DB8C0h */ case   48:  		/* li R4, 32 */
		/* 820DB8C0h case   48:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DB8C0h case   48:*/		return 0x820DB8C4;
		  /* 820DB8C4h */ case   49:  		/* addi R3, R1, 160 */
		/* 820DB8C4h case   49:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DB8C4h case   49:*/		return 0x820DB8C8;
		  /* 820DB8C8h */ case   50:  		/* bl -234120 */
		/* 820DB8C8h case   50:*/		regs.LR = 0x820DB8CC; return 0x820A2640;
		/* 820DB8C8h case   50:*/		return 0x820DB8CC;
		  /* 820DB8CCh */ case   51:  		/* mr R4, R29 */
		/* 820DB8CCh case   51:*/		regs.R4 = regs.R29;
		/* 820DB8CCh case   51:*/		return 0x820DB8D0;
		  /* 820DB8D0h */ case   52:  		/* addi R5, R1, 160 */
		/* 820DB8D0h case   52:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DB8D0h case   52:*/		return 0x820DB8D4;
		  /* 820DB8D4h */ case   53:  		/* mr R3, R31 */
		/* 820DB8D4h case   53:*/		regs.R3 = regs.R31;
		/* 820DB8D4h case   53:*/		return 0x820DB8D8;
		  /* 820DB8D8h */ case   54:  		/* bl -6144 */
		/* 820DB8D8h case   54:*/		regs.LR = 0x820DB8DC; return 0x820DA0D8;
		/* 820DB8D8h case   54:*/		return 0x820DB8DC;
		  /* 820DB8DCh */ case   55:  		/* cmpwi CR0, R3, 0 */
		/* 820DB8DCh case   55:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB8DCh case   55:*/		return 0x820DB8E0;
		  /* 820DB8E0h */ case   56:  		/* bc 12, CR0_LT, 744 */
		/* 820DB8E0h case   56:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB8E0h case   56:*/		return 0x820DB8E4;
		  /* 820DB8E4h */ case   57:  		/* lwz R11, <#[R31]> */
		/* 820DB8E4h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB8E4h case   57:*/		return 0x820DB8E8;
		  /* 820DB8E8h */ case   58:  		/* mr R6, R27 */
		/* 820DB8E8h case   58:*/		regs.R6 = regs.R27;
		/* 820DB8E8h case   58:*/		return 0x820DB8EC;
		  /* 820DB8ECh */ case   59:  		/* mr R4, R28 */
		/* 820DB8ECh case   59:*/		regs.R4 = regs.R28;
		/* 820DB8ECh case   59:*/		return 0x820DB8F0;
		  /* 820DB8F0h */ case   60:  		/* addi R5, R1, 128 */
		/* 820DB8F0h case   60:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DB8F0h case   60:*/		return 0x820DB8F4;
		  /* 820DB8F4h */ case   61:  		/* mr R3, R31 */
		/* 820DB8F4h case   61:*/		regs.R3 = regs.R31;
		/* 820DB8F4h case   61:*/		return 0x820DB8F8;
		  /* 820DB8F8h */ case   62:  		/* lwz R11, <#[R11 + 400]> */
		/* 820DB8F8h case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820DB8F8h case   62:*/		return 0x820DB8FC;
		  /* 820DB8FCh */ case   63:  		/* mtspr CTR, R11 */
		/* 820DB8FCh case   63:*/		regs.CTR = regs.R11;
		/* 820DB8FCh case   63:*/		return 0x820DB900;
		  /* 820DB900h */ case   64:  		/* bcctrl 20, CR0_LT */
		/* 820DB900h case   64:*/		if ( 1 ) { regs.LR = 0x820DB904; return (uint32)regs.CTR; }
		/* 820DB900h case   64:*/		return 0x820DB904;
		  /* 820DB904h */ case   65:  		/* cmpwi CR0, R3, 0 */
		/* 820DB904h case   65:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB904h case   65:*/		return 0x820DB908;
		  /* 820DB908h */ case   66:  		/* bc 12, CR0_LT, 704 */
		/* 820DB908h case   66:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB908h case   66:*/		return 0x820DB90C;
		  /* 820DB90Ch */ case   67:  		/* mr R4, R22 */
		/* 820DB90Ch case   67:*/		regs.R4 = regs.R22;
		/* 820DB90Ch case   67:*/		return 0x820DB910;
		  /* 820DB910h */ case   68:  		/* mr R3, R31 */
		/* 820DB910h case   68:*/		regs.R3 = regs.R31;
		/* 820DB910h case   68:*/		return 0x820DB914;
		  /* 820DB914h */ case   69:  		/* bl -6204 */
		/* 820DB914h case   69:*/		regs.LR = 0x820DB918; return 0x820DA0D8;
		/* 820DB914h case   69:*/		return 0x820DB918;
		  /* 820DB918h */ case   70:  		/* cmpwi CR0, R3, 0 */
		/* 820DB918h case   70:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB918h case   70:*/		return 0x820DB91C;
		  /* 820DB91Ch */ case   71:  		/* bc 12, CR0_LT, 684 */
		/* 820DB91Ch case   71:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB91Ch case   71:*/		return 0x820DB920;
		  /* 820DB920h */ case   72:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DB920h case   72:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DB920h case   72:*/		return 0x820DB924;
		  /* 820DB924h */ case   73:  		/* addi R30, R30, 1 */
		/* 820DB924h case   73:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DB924h case   73:*/		return 0x820DB928;
		  /* 820DB928h */ case   74:  		/* cmplw CR6, R30, R11 */
		/* 820DB928h case   74:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DB928h case   74:*/		return 0x820DB92C;
		  /* 820DB92Ch */ case   75:  		/* bc 12, CR6_LT, -156 */
		/* 820DB92Ch case   75:*/		if ( regs.CR[6].lt ) { return 0x820DB890;  }
		/* 820DB92Ch case   75:*/		return 0x820DB930;
	}
	return 0x820DB930;
} // Block from 820DB800h-820DB930h (76 instructions)

//////////////////////////////////////////////////////
// Block at 820DB930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DB930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DB930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DB930);
		  /* 820DB930h */ case    0:  		/* mr R3, R31 */
		/* 820DB930h case    0:*/		regs.R3 = regs.R31;
		/* 820DB930h case    0:*/		return 0x820DB934;
		  /* 820DB934h */ case    1:  		/* bl -6020 */
		/* 820DB934h case    1:*/		regs.LR = 0x820DB938; return 0x820DA1B0;
		/* 820DB934h case    1:*/		return 0x820DB938;
		  /* 820DB938h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DB938h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB938h case    2:*/		return 0x820DB93C;
		  /* 820DB93Ch */ case    3:  		/* bc 12, CR0_LT, 652 */
		/* 820DB93Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB93Ch case    3:*/		return 0x820DB940;
		  /* 820DB940h */ case    4:  		/* mr R4, R24 */
		/* 820DB940h case    4:*/		regs.R4 = regs.R24;
		/* 820DB940h case    4:*/		return 0x820DB944;
		  /* 820DB944h */ case    5:  		/* mr R3, R31 */
		/* 820DB944h case    5:*/		regs.R3 = regs.R31;
		/* 820DB944h case    5:*/		return 0x820DB948;
		  /* 820DB948h */ case    6:  		/* bl -6256 */
		/* 820DB948h case    6:*/		regs.LR = 0x820DB94C; return 0x820DA0D8;
		/* 820DB948h case    6:*/		return 0x820DB94C;
		  /* 820DB94Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DB94Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB94Ch case    7:*/		return 0x820DB950;
		  /* 820DB950h */ case    8:  		/* bc 12, CR0_LT, 632 */
		/* 820DB950h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB950h case    8:*/		return 0x820DB954;
		  /* 820DB954h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 820DB954h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB954h case    9:*/		return 0x820DB958;
		  /* 820DB958h */ case   10:  		/* mr R4, R25 */
		/* 820DB958h case   10:*/		regs.R4 = regs.R25;
		/* 820DB958h case   10:*/		return 0x820DB95C;
		  /* 820DB95Ch */ case   11:  		/* li R8, 0 */
		/* 820DB95Ch case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820DB95Ch case   11:*/		return 0x820DB960;
		  /* 820DB960h */ case   12:  		/* li R7, 3 */
		/* 820DB960h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 820DB960h case   12:*/		return 0x820DB964;
		  /* 820DB964h */ case   13:  		/* li R6, 0 */
		/* 820DB964h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820DB964h case   13:*/		return 0x820DB968;
		  /* 820DB968h */ case   14:  		/* li R5, 0 */
		/* 820DB968h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820DB968h case   14:*/		return 0x820DB96C;
		  /* 820DB96Ch */ case   15:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DB96Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DB96Ch case   15:*/		return 0x820DB970;
		  /* 820DB970h */ case   16:  		/* mr R3, R31 */
		/* 820DB970h case   16:*/		regs.R3 = regs.R31;
		/* 820DB970h case   16:*/		return 0x820DB974;
		  /* 820DB974h */ case   17:  		/* mtspr CTR, R11 */
		/* 820DB974h case   17:*/		regs.CTR = regs.R11;
		/* 820DB974h case   17:*/		return 0x820DB978;
		  /* 820DB978h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 820DB978h case   18:*/		if ( 1 ) { regs.LR = 0x820DB97C; return (uint32)regs.CTR; }
		/* 820DB978h case   18:*/		return 0x820DB97C;
		  /* 820DB97Ch */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820DB97Ch case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB97Ch case   19:*/		return 0x820DB980;
		  /* 820DB980h */ case   20:  		/* bc 12, CR0_LT, 584 */
		/* 820DB980h case   20:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB980h case   20:*/		return 0x820DB984;
		  /* 820DB984h */ case   21:  		/* mr R4, R22 */
		/* 820DB984h case   21:*/		regs.R4 = regs.R22;
		/* 820DB984h case   21:*/		return 0x820DB988;
		  /* 820DB988h */ case   22:  		/* mr R3, R31 */
		/* 820DB988h case   22:*/		regs.R3 = regs.R31;
		/* 820DB988h case   22:*/		return 0x820DB98C;
		  /* 820DB98Ch */ case   23:  		/* bl -6324 */
		/* 820DB98Ch case   23:*/		regs.LR = 0x820DB990; return 0x820DA0D8;
		/* 820DB98Ch case   23:*/		return 0x820DB990;
		  /* 820DB990h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820DB990h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB990h case   24:*/		return 0x820DB994;
		  /* 820DB994h */ case   25:  		/* bc 12, CR0_LT, 564 */
		/* 820DB994h case   25:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB994h case   25:*/		return 0x820DB998;
		  /* 820DB998h */ case   26:  		/* mr R3, R31 */
		/* 820DB998h case   26:*/		regs.R3 = regs.R31;
		/* 820DB998h case   26:*/		return 0x820DB99C;
		  /* 820DB99Ch */ case   27:  		/* bl -6124 */
		/* 820DB99Ch case   27:*/		regs.LR = 0x820DB9A0; return 0x820DA1B0;
		/* 820DB99Ch case   27:*/		return 0x820DB9A0;
		  /* 820DB9A0h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 820DB9A0h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB9A0h case   28:*/		return 0x820DB9A4;
		  /* 820DB9A4h */ case   29:  		/* bc 12, CR0_LT, 548 */
		/* 820DB9A4h case   29:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB9A4h case   29:*/		return 0x820DB9A8;
		  /* 820DB9A8h */ case   30:  		/* mr R4, R26 */
		/* 820DB9A8h case   30:*/		regs.R4 = regs.R26;
		/* 820DB9A8h case   30:*/		return 0x820DB9AC;
		  /* 820DB9ACh */ case   31:  		/* mr R3, R31 */
		/* 820DB9ACh case   31:*/		regs.R3 = regs.R31;
		/* 820DB9ACh case   31:*/		return 0x820DB9B0;
		  /* 820DB9B0h */ case   32:  		/* bl -6360 */
		/* 820DB9B0h case   32:*/		regs.LR = 0x820DB9B4; return 0x820DA0D8;
		/* 820DB9B0h case   32:*/		return 0x820DB9B4;
		  /* 820DB9B4h */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 820DB9B4h case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB9B4h case   33:*/		return 0x820DB9B8;
		  /* 820DB9B8h */ case   34:  		/* bc 12, CR0_LT, 528 */
		/* 820DB9B8h case   34:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB9B8h case   34:*/		return 0x820DB9BC;
		  /* 820DB9BCh */ case   35:  		/* lwz R11, <#[R31]> */
		/* 820DB9BCh case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DB9BCh case   35:*/		return 0x820DB9C0;
		  /* 820DB9C0h */ case   36:  		/* mr R4, R25 */
		/* 820DB9C0h case   36:*/		regs.R4 = regs.R25;
		/* 820DB9C0h case   36:*/		return 0x820DB9C4;
		  /* 820DB9C4h */ case   37:  		/* li R8, 0 */
		/* 820DB9C4h case   37:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820DB9C4h case   37:*/		return 0x820DB9C8;
		  /* 820DB9C8h */ case   38:  		/* li R7, 0 */
		/* 820DB9C8h case   38:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DB9C8h case   38:*/		return 0x820DB9CC;
		  /* 820DB9CCh */ case   39:  		/* li R6, 1 */
		/* 820DB9CCh case   39:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820DB9CCh case   39:*/		return 0x820DB9D0;
		  /* 820DB9D0h */ case   40:  		/* li R5, 0 */
		/* 820DB9D0h case   40:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820DB9D0h case   40:*/		return 0x820DB9D4;
		  /* 820DB9D4h */ case   41:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DB9D4h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DB9D4h case   41:*/		return 0x820DB9D8;
		  /* 820DB9D8h */ case   42:  		/* mr R3, R31 */
		/* 820DB9D8h case   42:*/		regs.R3 = regs.R31;
		/* 820DB9D8h case   42:*/		return 0x820DB9DC;
		  /* 820DB9DCh */ case   43:  		/* mtspr CTR, R11 */
		/* 820DB9DCh case   43:*/		regs.CTR = regs.R11;
		/* 820DB9DCh case   43:*/		return 0x820DB9E0;
		  /* 820DB9E0h */ case   44:  		/* bcctrl 20, CR0_LT */
		/* 820DB9E0h case   44:*/		if ( 1 ) { regs.LR = 0x820DB9E4; return (uint32)regs.CTR; }
		/* 820DB9E0h case   44:*/		return 0x820DB9E4;
		  /* 820DB9E4h */ case   45:  		/* cmpwi CR0, R3, 0 */
		/* 820DB9E4h case   45:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB9E4h case   45:*/		return 0x820DB9E8;
		  /* 820DB9E8h */ case   46:  		/* bc 12, CR0_LT, 480 */
		/* 820DB9E8h case   46:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB9E8h case   46:*/		return 0x820DB9EC;
		  /* 820DB9ECh */ case   47:  		/* mr R4, R22 */
		/* 820DB9ECh case   47:*/		regs.R4 = regs.R22;
		/* 820DB9ECh case   47:*/		return 0x820DB9F0;
		  /* 820DB9F0h */ case   48:  		/* mr R3, R31 */
		/* 820DB9F0h case   48:*/		regs.R3 = regs.R31;
		/* 820DB9F0h case   48:*/		return 0x820DB9F4;
		  /* 820DB9F4h */ case   49:  		/* bl -6428 */
		/* 820DB9F4h case   49:*/		regs.LR = 0x820DB9F8; return 0x820DA0D8;
		/* 820DB9F4h case   49:*/		return 0x820DB9F8;
		  /* 820DB9F8h */ case   50:  		/* cmpwi CR0, R3, 0 */
		/* 820DB9F8h case   50:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DB9F8h case   50:*/		return 0x820DB9FC;
		  /* 820DB9FCh */ case   51:  		/* bc 12, CR0_LT, 460 */
		/* 820DB9FCh case   51:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DB9FCh case   51:*/		return 0x820DBA00;
		  /* 820DBA00h */ case   52:  		/* lis R11, -32254 */
		/* 820DBA00h case   52:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DBA00h case   52:*/		return 0x820DBA04;
		  /* 820DBA04h */ case   53:  		/* li R5, 7 */
		/* 820DBA04h case   53:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 820DBA04h case   53:*/		return 0x820DBA08;
		  /* 820DBA08h */ case   54:  		/* addi R4, R11, -30496 */
		/* 820DBA08h case   54:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88E0);
		/* 820DBA08h case   54:*/		return 0x820DBA0C;
		  /* 820DBA0Ch */ case   55:  		/* mr R3, R20 */
		/* 820DBA0Ch case   55:*/		regs.R3 = regs.R20;
		/* 820DBA0Ch case   55:*/		return 0x820DBA10;
		  /* 820DBA10h */ case   56:  		/* bl -300704 */
		/* 820DBA10h case   56:*/		regs.LR = 0x820DBA14; return 0x82092370;
		/* 820DBA10h case   56:*/		return 0x820DBA14;
		  /* 820DBA14h */ case   57:  		/* cmpwi CR0, R3, 0 */
		/* 820DBA14h case   57:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBA14h case   57:*/		return 0x820DBA18;
		  /* 820DBA18h */ case   58:  		/* li R4, 32 */
		/* 820DBA18h case   58:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBA18h case   58:*/		return 0x820DBA1C;
		  /* 820DBA1Ch */ case   59:  		/* addi R3, R1, 224 */
		/* 820DBA1Ch case   59:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820DBA1Ch case   59:*/		return 0x820DBA20;
		  /* 820DBA20h */ case   60:  		/* bc 12, CR0_EQ, 16 */
		/* 820DBA20h case   60:*/		if ( regs.CR[0].eq ) { return 0x820DBA30;  }
		/* 820DBA20h case   60:*/		return 0x820DBA24;
		  /* 820DBA24h */ case   61:  		/* lis R11, -32254 */
		/* 820DBA24h case   61:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DBA24h case   61:*/		return 0x820DBA28;
		  /* 820DBA28h */ case   62:  		/* addi R5, R11, -30704 */
		/* 820DBA28h case   62:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF8810);
		/* 820DBA28h case   62:*/		return 0x820DBA2C;
		  /* 820DBA2Ch */ case   63:  		/* b 12 */
		/* 820DBA2Ch case   63:*/		return 0x820DBA38;
		/* 820DBA2Ch case   63:*/		return 0x820DBA30;
	}
	return 0x820DBA30;
} // Block from 820DB930h-820DBA30h (64 instructions)

//////////////////////////////////////////////////////
// Block at 820DBA30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBA30);
		  /* 820DBA30h */ case    0:  		/* lis R11, -32254 */
		/* 820DBA30h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DBA30h case    0:*/		return 0x820DBA34;
		  /* 820DBA34h */ case    1:  		/* addi R5, R11, -30716 */
		/* 820DBA34h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF8804);
		/* 820DBA34h case    1:*/		return 0x820DBA38;
	}
	return 0x820DBA38;
} // Block from 820DBA30h-820DBA38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DBA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBA38);
		  /* 820DBA38h */ case    0:  		/* bl -217928 */
		/* 820DBA38h case    0:*/		regs.LR = 0x820DBA3C; return 0x820A66F0;
		/* 820DBA38h case    0:*/		return 0x820DBA3C;
		  /* 820DBA3Ch */ case    1:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DBA3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DBA3Ch case    1:*/		return 0x820DBA40;
		  /* 820DBA40h */ case    2:  		/* li R30, 0 */
		/* 820DBA40h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DBA40h case    2:*/		return 0x820DBA44;
		  /* 820DBA44h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820DBA44h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DBA44h case    3:*/		return 0x820DBA48;
		  /* 820DBA48h */ case    4:  		/* bc 12, CR6_EQ, 164 */
		/* 820DBA48h case    4:*/		if ( regs.CR[6].eq ) { return 0x820DBAEC;  }
		/* 820DBA48h case    4:*/		return 0x820DBA4C;
		  /* 820DBA4Ch */ case    5:  		/* mr R3, R31 */
		/* 820DBA4Ch case    5:*/		regs.R3 = regs.R31;
		/* 820DBA4Ch case    5:*/		return 0x820DBA50;
		  /* 820DBA50h */ case    6:  		/* bl -6304 */
		/* 820DBA50h case    6:*/		regs.LR = 0x820DBA54; return 0x820DA1B0;
		/* 820DBA50h case    6:*/		return 0x820DBA54;
		  /* 820DBA54h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DBA54h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBA54h case    7:*/		return 0x820DBA58;
		  /* 820DBA58h */ case    8:  		/* bc 12, CR0_LT, 368 */
		/* 820DBA58h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DBA58h case    8:*/		return 0x820DBA5C;
		  /* 820DBA5Ch */ case    9:  		/* mr R7, R30 */
		/* 820DBA5Ch case    9:*/		regs.R7 = regs.R30;
		/* 820DBA5Ch case    9:*/		return 0x820DBA60;
		  /* 820DBA60h */ case   10:  		/* mr R6, R30 */
		/* 820DBA60h case   10:*/		regs.R6 = regs.R30;
		/* 820DBA60h case   10:*/		return 0x820DBA64;
		  /* 820DBA64h */ case   11:  		/* mr R5, R21 */
		/* 820DBA64h case   11:*/		regs.R5 = regs.R21;
		/* 820DBA64h case   11:*/		return 0x820DBA68;
	}
	return 0x820DBA68;
} // Block from 820DBA38h-820DBA68h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DBA68h
// Function '?EmitANDENDIF@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBA68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBA68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBA68);
		  /* 820DBA68h */ case    0:  		/* li R4, 32 */
		/* 820DBA68h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBA68h case    0:*/		return 0x820DBA6C;
		  /* 820DBA6Ch */ case    1:  		/* addi R3, R1, 128 */
		/* 820DBA6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DBA6Ch case    1:*/		return 0x820DBA70;
		  /* 820DBA70h */ case    2:  		/* bl -234544 */
		/* 820DBA70h case    2:*/		regs.LR = 0x820DBA74; return 0x820A2640;
		/* 820DBA70h case    2:*/		return 0x820DBA74;
		  /* 820DBA74h */ case    3:  		/* mr R6, R30 */
		/* 820DBA74h case    3:*/		regs.R6 = regs.R30;
		/* 820DBA74h case    3:*/		return 0x820DBA78;
		  /* 820DBA78h */ case    4:  		/* addi R5, R1, 224 */
		/* 820DBA78h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 820DBA78h case    4:*/		return 0x820DBA7C;
		  /* 820DBA7Ch */ case    5:  		/* li R4, 32 */
		/* 820DBA7Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBA7Ch case    5:*/		return 0x820DBA80;
		  /* 820DBA80h */ case    6:  		/* addi R3, R1, 192 */
		/* 820DBA80h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DBA80h case    6:*/		return 0x820DBA84;
		  /* 820DBA84h */ case    7:  		/* bl -234564 */
		/* 820DBA84h case    7:*/		regs.LR = 0x820DBA88; return 0x820A2640;
		/* 820DBA84h case    7:*/		return 0x820DBA88;
		  /* 820DBA88h */ case    8:  		/* mr R4, R29 */
		/* 820DBA88h case    8:*/		regs.R4 = regs.R29;
		/* 820DBA88h case    8:*/		return 0x820DBA8C;
		  /* 820DBA8Ch */ case    9:  		/* addi R5, R1, 192 */
		/* 820DBA8Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820DBA8Ch case    9:*/		return 0x820DBA90;
		  /* 820DBA90h */ case   10:  		/* mr R3, R31 */
		/* 820DBA90h case   10:*/		regs.R3 = regs.R31;
		/* 820DBA90h case   10:*/		return 0x820DBA94;
		  /* 820DBA94h */ case   11:  		/* bl -6588 */
		/* 820DBA94h case   11:*/		regs.LR = 0x820DBA98; return 0x820DA0D8;
		/* 820DBA94h case   11:*/		return 0x820DBA98;
		  /* 820DBA98h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820DBA98h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBA98h case   12:*/		return 0x820DBA9C;
		  /* 820DBA9Ch */ case   13:  		/* bc 12, CR0_LT, 300 */
		/* 820DBA9Ch case   13:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DBA9Ch case   13:*/		return 0x820DBAA0;
		  /* 820DBAA0h */ case   14:  		/* lwz R11, <#[R31]> */
		/* 820DBAA0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DBAA0h case   14:*/		return 0x820DBAA4;
		  /* 820DBAA4h */ case   15:  		/* mr R6, R27 */
		/* 820DBAA4h case   15:*/		regs.R6 = regs.R27;
		/* 820DBAA4h case   15:*/		return 0x820DBAA8;
		  /* 820DBAA8h */ case   16:  		/* mr R4, R28 */
		/* 820DBAA8h case   16:*/		regs.R4 = regs.R28;
		/* 820DBAA8h case   16:*/		return 0x820DBAAC;
		  /* 820DBAACh */ case   17:  		/* addi R5, R1, 128 */
		/* 820DBAACh case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DBAACh case   17:*/		return 0x820DBAB0;
		  /* 820DBAB0h */ case   18:  		/* mr R3, R31 */
		/* 820DBAB0h case   18:*/		regs.R3 = regs.R31;
		/* 820DBAB0h case   18:*/		return 0x820DBAB4;
		  /* 820DBAB4h */ case   19:  		/* lwz R11, <#[R11 + 400]> */
		/* 820DBAB4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820DBAB4h case   19:*/		return 0x820DBAB8;
		  /* 820DBAB8h */ case   20:  		/* mtspr CTR, R11 */
		/* 820DBAB8h case   20:*/		regs.CTR = regs.R11;
		/* 820DBAB8h case   20:*/		return 0x820DBABC;
		  /* 820DBABCh */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 820DBABCh case   21:*/		if ( 1 ) { regs.LR = 0x820DBAC0; return (uint32)regs.CTR; }
		/* 820DBABCh case   21:*/		return 0x820DBAC0;
		  /* 820DBAC0h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 820DBAC0h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBAC0h case   22:*/		return 0x820DBAC4;
		  /* 820DBAC4h */ case   23:  		/* bc 12, CR0_LT, 260 */
		/* 820DBAC4h case   23:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DBAC4h case   23:*/		return 0x820DBAC8;
		  /* 820DBAC8h */ case   24:  		/* mr R4, R22 */
		/* 820DBAC8h case   24:*/		regs.R4 = regs.R22;
		/* 820DBAC8h case   24:*/		return 0x820DBACC;
		  /* 820DBACCh */ case   25:  		/* mr R3, R31 */
		/* 820DBACCh case   25:*/		regs.R3 = regs.R31;
		/* 820DBACCh case   25:*/		return 0x820DBAD0;
		  /* 820DBAD0h */ case   26:  		/* bl -6648 */
		/* 820DBAD0h case   26:*/		regs.LR = 0x820DBAD4; return 0x820DA0D8;
		/* 820DBAD0h case   26:*/		return 0x820DBAD4;
		  /* 820DBAD4h */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 820DBAD4h case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBAD4h case   27:*/		return 0x820DBAD8;
		  /* 820DBAD8h */ case   28:  		/* bc 12, CR0_LT, 240 */
		/* 820DBAD8h case   28:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DBAD8h case   28:*/		return 0x820DBADC;
		  /* 820DBADCh */ case   29:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DBADCh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DBADCh case   29:*/		return 0x820DBAE0;
		  /* 820DBAE0h */ case   30:  		/* addi R30, R30, 1 */
		/* 820DBAE0h case   30:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DBAE0h case   30:*/		return 0x820DBAE4;
		  /* 820DBAE4h */ case   31:  		/* cmplw CR6, R30, R11 */
		/* 820DBAE4h case   31:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DBAE4h case   31:*/		return 0x820DBAE8;
		  /* 820DBAE8h */ case   32:  		/* bc 12, CR6_LT, -156 */
		/* 820DBAE8h case   32:*/		if ( regs.CR[6].lt ) { return 0x820DBA4C;  }
		/* 820DBAE8h case   32:*/		return 0x820DBAEC;
	}
	return 0x820DBAEC;
} // Block from 820DBA68h-820DBAECh (33 instructions)

//////////////////////////////////////////////////////
// Block at 820DBAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBAEC);
		  /* 820DBAECh */ case    0:  		/* li R30, 0 */
		/* 820DBAECh case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DBAECh case    0:*/		return 0x820DBAF0;
		  /* 820DBAF0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DBAF0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DBAF0h case    1:*/		return 0x820DBAF4;
		  /* 820DBAF4h */ case    2:  		/* bc 12, CR6_EQ, 208 */
		/* 820DBAF4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DBBC4;  }
		/* 820DBAF4h case    2:*/		return 0x820DBAF8;
		  /* 820DBAF8h */ case    3:  		/* mr R3, R31 */
		/* 820DBAF8h case    3:*/		regs.R3 = regs.R31;
		/* 820DBAF8h case    3:*/		return 0x820DBAFC;
		  /* 820DBAFCh */ case    4:  		/* bl -6476 */
		/* 820DBAFCh case    4:*/		regs.LR = 0x820DBB00; return 0x820DA1B0;
		/* 820DBAFCh case    4:*/		return 0x820DBB00;
		  /* 820DBB00h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DBB00h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBB00h case    5:*/		return 0x820DBB04;
		  /* 820DBB04h */ case    6:  		/* bc 12, CR0_LT, 196 */
		/* 820DBB04h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DBB04h case    6:*/		return 0x820DBB08;
		  /* 820DBB08h */ case    7:  		/* mr R7, R30 */
		/* 820DBB08h case    7:*/		regs.R7 = regs.R30;
		/* 820DBB08h case    7:*/		return 0x820DBB0C;
		  /* 820DBB0Ch */ case    8:  		/* mr R6, R30 */
		/* 820DBB0Ch case    8:*/		regs.R6 = regs.R30;
		/* 820DBB0Ch case    8:*/		return 0x820DBB10;
		  /* 820DBB10h */ case    9:  		/* mr R5, R19 */
		/* 820DBB10h case    9:*/		regs.R5 = regs.R19;
		/* 820DBB10h case    9:*/		return 0x820DBB14;
		  /* 820DBB14h */ case   10:  		/* li R4, 32 */
		/* 820DBB14h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBB14h case   10:*/		return 0x820DBB18;
		  /* 820DBB18h */ case   11:  		/* addi R3, R1, 256 */
		/* 820DBB18h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 820DBB18h case   11:*/		return 0x820DBB1C;
		  /* 820DBB1Ch */ case   12:  		/* bl -234716 */
		/* 820DBB1Ch case   12:*/		regs.LR = 0x820DBB20; return 0x820A2640;
		/* 820DBB1Ch case   12:*/		return 0x820DBB20;
		  /* 820DBB20h */ case   13:  		/* mr R7, R30 */
		/* 820DBB20h case   13:*/		regs.R7 = regs.R30;
		/* 820DBB20h case   13:*/		return 0x820DBB24;
		  /* 820DBB24h */ case   14:  		/* mr R6, R30 */
		/* 820DBB24h case   14:*/		regs.R6 = regs.R30;
		/* 820DBB24h case   14:*/		return 0x820DBB28;
		  /* 820DBB28h */ case   15:  		/* mr R5, R20 */
		/* 820DBB28h case   15:*/		regs.R5 = regs.R20;
		/* 820DBB28h case   15:*/		return 0x820DBB2C;
		  /* 820DBB2Ch */ case   16:  		/* li R4, 32 */
		/* 820DBB2Ch case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBB2Ch case   16:*/		return 0x820DBB30;
		  /* 820DBB30h */ case   17:  		/* addi R3, R1, 128 */
		/* 820DBB30h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DBB30h case   17:*/		return 0x820DBB34;
		  /* 820DBB34h */ case   18:  		/* bl -234740 */
		/* 820DBB34h case   18:*/		regs.LR = 0x820DBB38; return 0x820A2640;
		/* 820DBB34h case   18:*/		return 0x820DBB38;
		  /* 820DBB38h */ case   19:  		/* mr R6, R30 */
		/* 820DBB38h case   19:*/		regs.R6 = regs.R30;
		/* 820DBB38h case   19:*/		return 0x820DBB3C;
		  /* 820DBB3Ch */ case   20:  		/* addi R5, R1, 224 */
		/* 820DBB3Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 820DBB3Ch case   20:*/		return 0x820DBB40;
		  /* 820DBB40h */ case   21:  		/* li R4, 32 */
		/* 820DBB40h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBB40h case   21:*/		return 0x820DBB44;
		  /* 820DBB44h */ case   22:  		/* addi R3, R1, 192 */
		/* 820DBB44h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DBB44h case   22:*/		return 0x820DBB48;
	}
	return 0x820DBB48;
} // Block from 820DBAECh-820DBB48h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820DBB48h
// Function '?EmitGeneralENDLOOP@C30SWProgram@D3DXShader@@MAAJH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBB48);
		  /* 820DBB48h */ case    0:  		/* bl -234760 */
		/* 820DBB48h case    0:*/		regs.LR = 0x820DBB4C; return 0x820A2640;
		/* 820DBB48h case    0:*/		return 0x820DBB4C;
		  /* 820DBB4Ch */ case    1:  		/* mr R5, R23 */
		/* 820DBB4Ch case    1:*/		regs.R5 = regs.R23;
		/* 820DBB4Ch case    1:*/		return 0x820DBB50;
		  /* 820DBB50h */ case    2:  		/* mr R6, R30 */
		/* 820DBB50h case    2:*/		regs.R6 = regs.R30;
		/* 820DBB50h case    2:*/		return 0x820DBB54;
		  /* 820DBB54h */ case    3:  		/* li R4, 32 */
		/* 820DBB54h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBB54h case    3:*/		return 0x820DBB58;
		  /* 820DBB58h */ case    4:  		/* addi R3, R1, 160 */
		/* 820DBB58h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DBB58h case    4:*/		return 0x820DBB5C;
		  /* 820DBB5Ch */ case    5:  		/* bl -234780 */
		/* 820DBB5Ch case    5:*/		regs.LR = 0x820DBB60; return 0x820A2640;
		/* 820DBB5Ch case    5:*/		return 0x820DBB60;
		  /* 820DBB60h */ case    6:  		/* mr R4, R29 */
		/* 820DBB60h case    6:*/		regs.R4 = regs.R29;
		/* 820DBB60h case    6:*/		return 0x820DBB64;
		  /* 820DBB64h */ case    7:  		/* addi R5, R1, 256 */
		/* 820DBB64h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 820DBB64h case    7:*/		return 0x820DBB68;
		  /* 820DBB68h */ case    8:  		/* mr R3, R31 */
		/* 820DBB68h case    8:*/		regs.R3 = regs.R31;
		/* 820DBB68h case    8:*/		return 0x820DBB6C;
		  /* 820DBB6Ch */ case    9:  		/* bl -6804 */
		/* 820DBB6Ch case    9:*/		regs.LR = 0x820DBB70; return 0x820DA0D8;
		/* 820DBB6Ch case    9:*/		return 0x820DBB70;
		  /* 820DBB70h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DBB70h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBB70h case   10:*/		return 0x820DBB74;
		  /* 820DBB74h */ case   11:  		/* bc 12, CR0_LT, 84 */
		/* 820DBB74h case   11:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DBB74h case   11:*/		return 0x820DBB78;
		  /* 820DBB78h */ case   12:  		/* lwz R11, <#[R31]> */
		/* 820DBB78h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DBB78h case   12:*/		return 0x820DBB7C;
		  /* 820DBB7Ch */ case   13:  		/* addi R6, R1, 160 */
		/* 820DBB7Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DBB7Ch case   13:*/		return 0x820DBB80;
		  /* 820DBB80h */ case   14:  		/* addi R5, R1, 192 */
		/* 820DBB80h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820DBB80h case   14:*/		return 0x820DBB84;
		  /* 820DBB84h */ case   15:  		/* addi R4, R1, 128 */
		/* 820DBB84h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820DBB84h case   15:*/		return 0x820DBB88;
		  /* 820DBB88h */ case   16:  		/* mr R3, R31 */
		/* 820DBB88h case   16:*/		regs.R3 = regs.R31;
		/* 820DBB88h case   16:*/		return 0x820DBB8C;
		  /* 820DBB8Ch */ case   17:  		/* lwz R11, <#[R11 + 520]> */
		/* 820DBB8Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000208) );
		/* 820DBB8Ch case   17:*/		return 0x820DBB90;
		  /* 820DBB90h */ case   18:  		/* mtspr CTR, R11 */
		/* 820DBB90h case   18:*/		regs.CTR = regs.R11;
		/* 820DBB90h case   18:*/		return 0x820DBB94;
		  /* 820DBB94h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 820DBB94h case   19:*/		if ( 1 ) { regs.LR = 0x820DBB98; return (uint32)regs.CTR; }
		/* 820DBB94h case   19:*/		return 0x820DBB98;
		  /* 820DBB98h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 820DBB98h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBB98h case   20:*/		return 0x820DBB9C;
		  /* 820DBB9Ch */ case   21:  		/* bc 12, CR0_LT, 44 */
		/* 820DBB9Ch case   21:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DBB9Ch case   21:*/		return 0x820DBBA0;
		  /* 820DBBA0h */ case   22:  		/* mr R4, R22 */
		/* 820DBBA0h case   22:*/		regs.R4 = regs.R22;
		/* 820DBBA0h case   22:*/		return 0x820DBBA4;
		  /* 820DBBA4h */ case   23:  		/* mr R3, R31 */
		/* 820DBBA4h case   23:*/		regs.R3 = regs.R31;
		/* 820DBBA4h case   23:*/		return 0x820DBBA8;
		  /* 820DBBA8h */ case   24:  		/* bl -6864 */
		/* 820DBBA8h case   24:*/		regs.LR = 0x820DBBAC; return 0x820DA0D8;
		/* 820DBBA8h case   24:*/		return 0x820DBBAC;
		  /* 820DBBACh */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820DBBACh case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBBACh case   25:*/		return 0x820DBBB0;
		  /* 820DBBB0h */ case   26:  		/* bc 12, CR0_LT, 24 */
		/* 820DBBB0h case   26:*/		if ( regs.CR[0].lt ) { return 0x820DBBC8;  }
		/* 820DBBB0h case   26:*/		return 0x820DBBB4;
		  /* 820DBBB4h */ case   27:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DBBB4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DBBB4h case   27:*/		return 0x820DBBB8;
		  /* 820DBBB8h */ case   28:  		/* addi R30, R30, 1 */
		/* 820DBBB8h case   28:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DBBB8h case   28:*/		return 0x820DBBBC;
		  /* 820DBBBCh */ case   29:  		/* cmplw CR6, R30, R11 */
		/* 820DBBBCh case   29:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DBBBCh case   29:*/		return 0x820DBBC0;
		  /* 820DBBC0h */ case   30:  		/* bc 12, CR6_LT, -200 */
		/* 820DBBC0h case   30:*/		if ( regs.CR[6].lt ) { return 0x820DBAF8;  }
		/* 820DBBC0h case   30:*/		return 0x820DBBC4;
	}
	return 0x820DBBC4;
} // Block from 820DBB48h-820DBBC4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820DBBC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBBC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBBC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBBC4);
		  /* 820DBBC4h */ case    0:  		/* li R3, 0 */
		/* 820DBBC4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DBBC4h case    0:*/		return 0x820DBBC8;
	}
	return 0x820DBBC8;
} // Block from 820DBBC4h-820DBBC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DBBC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBBC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBBC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBBC8);
		  /* 820DBBC8h */ case    0:  		/* addi R1, R1, 400 */
		/* 820DBBC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x190);
		/* 820DBBC8h case    0:*/		return 0x820DBBCC;
		  /* 820DBBCCh */ case    1:  		/* b -305480 */
		/* 820DBBCCh case    1:*/		return 0x82091284;
		/* 820DBBCCh case    1:*/		return 0x820DBBD0;
	}
	return 0x820DBBD0;
} // Block from 820DBBC8h-820DBBD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DBBD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBBD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBBD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBBD0);
		  /* 820DBBD0h */ case    0:  		/* mfspr R12, LR */
		/* 820DBBD0h case    0:*/		regs.R12 = regs.LR;
		/* 820DBBD0h case    0:*/		return 0x820DBBD4;
		  /* 820DBBD4h */ case    1:  		/* bl -305572 */
		/* 820DBBD4h case    1:*/		regs.LR = 0x820DBBD8; return 0x82091230;
		/* 820DBBD4h case    1:*/		return 0x820DBBD8;
		  /* 820DBBD8h */ case    2:  		/* stwu R1, <#[R1 - 384]> */
		/* 820DBBD8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 820DBBD8h case    2:*/		return 0x820DBBDC;
		  /* 820DBBDCh */ case    3:  		/* mr R31, R3 */
		/* 820DBBDCh case    3:*/		regs.R31 = regs.R3;
		/* 820DBBDCh case    3:*/		return 0x820DBBE0;
		  /* 820DBBE0h */ case    4:  		/* mr R18, R4 */
		/* 820DBBE0h case    4:*/		regs.R18 = regs.R4;
		/* 820DBBE0h case    4:*/		return 0x820DBBE4;
		  /* 820DBBE4h */ case    5:  		/* mr R27, R5 */
		/* 820DBBE4h case    5:*/		regs.R27 = regs.R5;
		/* 820DBBE4h case    5:*/		return 0x820DBBE8;
		  /* 820DBBE8h */ case    6:  		/* bl -6712 */
		/* 820DBBE8h case    6:*/		regs.LR = 0x820DBBEC; return 0x820DA1B0;
		/* 820DBBE8h case    6:*/		return 0x820DBBEC;
		  /* 820DBBECh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DBBECh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBBECh case    7:*/		return 0x820DBBF0;
		  /* 820DBBF0h */ case    8:  		/* bc 12, CR0_LT, 3584 */
		/* 820DBBF0h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBBF0h case    8:*/		return 0x820DBBF4;
		  /* 820DBBF4h */ case    9:  		/* lis R11, -32254 */
		/* 820DBBF4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DBBF4h case    9:*/		return 0x820DBBF8;
		  /* 820DBBF8h */ case   10:  		/* mr R3, R31 */
		/* 820DBBF8h case   10:*/		regs.R3 = regs.R31;
		/* 820DBBF8h case   10:*/		return 0x820DBBFC;
		  /* 820DBBFCh */ case   11:  		/* addi R20, R11, -30508 */
		/* 820DBBFCh case   11:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R11,0xFFFF88D4);
		/* 820DBBFCh case   11:*/		return 0x820DBC00;
		  /* 820DBC00h */ case   12:  		/* mr R4, R20 */
		/* 820DBC00h case   12:*/		regs.R4 = regs.R20;
		/* 820DBC00h case   12:*/		return 0x820DBC04;
		  /* 820DBC04h */ case   13:  		/* bl -6956 */
		/* 820DBC04h case   13:*/		regs.LR = 0x820DBC08; return 0x820DA0D8;
		/* 820DBC04h case   13:*/		return 0x820DBC08;
		  /* 820DBC08h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820DBC08h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBC08h case   14:*/		return 0x820DBC0C;
		  /* 820DBC0Ch */ case   15:  		/* bc 12, CR0_LT, 3556 */
		/* 820DBC0Ch case   15:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBC0Ch case   15:*/		return 0x820DBC10;
		  /* 820DBC10h */ case   16:  		/* lwz R10, <#[R31]> */
		/* 820DBC10h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820DBC10h case   16:*/		return 0x820DBC14;
		  /* 820DBC14h */ case   17:  		/* lis R11, -32254 */
		/* 820DBC14h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DBC14h case   17:*/		return 0x820DBC18;
		  /* 820DBC18h */ case   18:  		/* li R8, 3 */
		/* 820DBC18h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820DBC18h case   18:*/		return 0x820DBC1C;
		  /* 820DBC1Ch */ case   19:  		/* addi R19, R11, -30764 */
		/* 820DBC1Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0xFFFF87D4);
		/* 820DBC1Ch case   19:*/		return 0x820DBC20;
		  /* 820DBC20h */ case   20:  		/* li R7, 3 */
		/* 820DBC20h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 820DBC20h case   20:*/		return 0x820DBC24;
		  /* 820DBC24h */ case   21:  		/* mr R4, R19 */
		/* 820DBC24h case   21:*/		regs.R4 = regs.R19;
		/* 820DBC24h case   21:*/		return 0x820DBC28;
		  /* 820DBC28h */ case   22:  		/* lwz R11, <#[R10 + 388]> */
		/* 820DBC28h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000184) );
		/* 820DBC28h case   22:*/		return 0x820DBC2C;
		  /* 820DBC2Ch */ case   23:  		/* li R6, 3 */
		/* 820DBC2Ch case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 820DBC2Ch case   23:*/		return 0x820DBC30;
		  /* 820DBC30h */ case   24:  		/* li R5, 3 */
		/* 820DBC30h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820DBC30h case   24:*/		return 0x820DBC34;
		  /* 820DBC34h */ case   25:  		/* mr R3, R31 */
		/* 820DBC34h case   25:*/		regs.R3 = regs.R31;
		/* 820DBC34h case   25:*/		return 0x820DBC38;
		  /* 820DBC38h */ case   26:  		/* mtspr CTR, R11 */
		/* 820DBC38h case   26:*/		regs.CTR = regs.R11;
		/* 820DBC38h case   26:*/		return 0x820DBC3C;
		  /* 820DBC3Ch */ case   27:  		/* bcctrl 20, CR0_LT */
		/* 820DBC3Ch case   27:*/		if ( 1 ) { regs.LR = 0x820DBC40; return (uint32)regs.CTR; }
		/* 820DBC3Ch case   27:*/		return 0x820DBC40;
		  /* 820DBC40h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 820DBC40h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBC40h case   28:*/		return 0x820DBC44;
		  /* 820DBC44h */ case   29:  		/* bc 12, CR0_LT, 3500 */
		/* 820DBC44h case   29:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBC44h case   29:*/		return 0x820DBC48;
		  /* 820DBC48h */ case   30:  		/* lis R11, -32254 */
		/* 820DBC48h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DBC48h case   30:*/		return 0x820DBC4C;
		  /* 820DBC4Ch */ case   31:  		/* mr R3, R31 */
		/* 820DBC4Ch case   31:*/		regs.R3 = regs.R31;
		/* 820DBC4Ch case   31:*/		return 0x820DBC50;
		  /* 820DBC50h */ case   32:  		/* addi R24, R11, -30768 */
		/* 820DBC50h case   32:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFF87D0);
		/* 820DBC50h case   32:*/		return 0x820DBC54;
		  /* 820DBC54h */ case   33:  		/* mr R4, R24 */
		/* 820DBC54h case   33:*/		regs.R4 = regs.R24;
		/* 820DBC54h case   33:*/		return 0x820DBC58;
		  /* 820DBC58h */ case   34:  		/* bl -7040 */
		/* 820DBC58h case   34:*/		regs.LR = 0x820DBC5C; return 0x820DA0D8;
		/* 820DBC58h case   34:*/		return 0x820DBC5C;
		  /* 820DBC5Ch */ case   35:  		/* cmpwi CR0, R3, 0 */
		/* 820DBC5Ch case   35:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBC5Ch case   35:*/		return 0x820DBC60;
		  /* 820DBC60h */ case   36:  		/* bc 12, CR0_LT, 3472 */
		/* 820DBC60h case   36:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBC60h case   36:*/		return 0x820DBC64;
		  /* 820DBC64h */ case   37:  		/* lwz R9, <#[R31 + 1816]> */
		/* 820DBC64h case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000718) );
		/* 820DBC64h case   37:*/		return 0x820DBC68;
		  /* 820DBC68h */ case   38:  		/* lis R10, -32254 */
		/* 820DBC68h case   38:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DBC68h case   38:*/		return 0x820DBC6C;
		  /* 820DBC6Ch */ case   39:  		/* lis R11, -32254 */
		/* 820DBC6Ch case   39:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DBC6Ch case   39:*/		return 0x820DBC70;
	}
	return 0x820DBC70;
} // Block from 820DBBD0h-820DBC70h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820DBC70h
// Function '?EmitBREAK@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBC70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBC70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBC70);
		  /* 820DBC70h */ case    0:  		/* li R30, 0 */
		/* 820DBC70h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DBC70h case    0:*/		return 0x820DBC74;
		  /* 820DBC74h */ case    1:  		/* addi R25, R10, -30692 */
		/* 820DBC74h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0xFFFF881C);
		/* 820DBC74h case    1:*/		return 0x820DBC78;
		  /* 820DBC78h */ case    2:  		/* addi R26, R11, -30704 */
		/* 820DBC78h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFF8810);
		/* 820DBC78h case    2:*/		return 0x820DBC7C;
		  /* 820DBC7Ch */ case    3:  		/* cmplwi CR6, R9, 0 */
		/* 820DBC7Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820DBC7Ch case    3:*/		return 0x820DBC80;
		  /* 820DBC80h */ case    4:  		/* bc 4, CR6_GT, 172 */
		/* 820DBC80h case    4:*/		if ( !regs.CR[6].gt ) { return 0x820DBD2C;  }
		/* 820DBC80h case    4:*/		return 0x820DBC84;
		  /* 820DBC84h */ case    5:  		/* mr R3, R31 */
		/* 820DBC84h case    5:*/		regs.R3 = regs.R31;
		/* 820DBC84h case    5:*/		return 0x820DBC88;
		  /* 820DBC88h */ case    6:  		/* bl -6872 */
		/* 820DBC88h case    6:*/		regs.LR = 0x820DBC8C; return 0x820DA1B0;
		/* 820DBC88h case    6:*/		return 0x820DBC8C;
		  /* 820DBC8Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DBC8Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBC8Ch case    7:*/		return 0x820DBC90;
		  /* 820DBC90h */ case    8:  		/* bc 12, CR0_LT, 3424 */
		/* 820DBC90h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBC90h case    8:*/		return 0x820DBC94;
		  /* 820DBC94h */ case    9:  		/* mr R7, R30 */
		/* 820DBC94h case    9:*/		regs.R7 = regs.R30;
		/* 820DBC94h case    9:*/		return 0x820DBC98;
		  /* 820DBC98h */ case   10:  		/* mr R6, R30 */
		/* 820DBC98h case   10:*/		regs.R6 = regs.R30;
		/* 820DBC98h case   10:*/		return 0x820DBC9C;
		  /* 820DBC9Ch */ case   11:  		/* mr R5, R27 */
		/* 820DBC9Ch case   11:*/		regs.R5 = regs.R27;
		/* 820DBC9Ch case   11:*/		return 0x820DBCA0;
		  /* 820DBCA0h */ case   12:  		/* li R4, 32 */
		/* 820DBCA0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBCA0h case   12:*/		return 0x820DBCA4;
		  /* 820DBCA4h */ case   13:  		/* addi R3, R1, 192 */
		/* 820DBCA4h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DBCA4h case   13:*/		return 0x820DBCA8;
		  /* 820DBCA8h */ case   14:  		/* bl -235112 */
		/* 820DBCA8h case   14:*/		regs.LR = 0x820DBCAC; return 0x820A2640;
		/* 820DBCA8h case   14:*/		return 0x820DBCAC;
		  /* 820DBCACh */ case   15:  		/* mr R5, R26 */
		/* 820DBCACh case   15:*/		regs.R5 = regs.R26;
		/* 820DBCACh case   15:*/		return 0x820DBCB0;
		  /* 820DBCB0h */ case   16:  		/* mr R6, R30 */
		/* 820DBCB0h case   16:*/		regs.R6 = regs.R30;
		/* 820DBCB0h case   16:*/		return 0x820DBCB4;
		  /* 820DBCB4h */ case   17:  		/* li R4, 32 */
		/* 820DBCB4h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBCB4h case   17:*/		return 0x820DBCB8;
		  /* 820DBCB8h */ case   18:  		/* addi R3, R1, 128 */
		/* 820DBCB8h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DBCB8h case   18:*/		return 0x820DBCBC;
		  /* 820DBCBCh */ case   19:  		/* bl -235132 */
		/* 820DBCBCh case   19:*/		regs.LR = 0x820DBCC0; return 0x820A2640;
		/* 820DBCBCh case   19:*/		return 0x820DBCC0;
		  /* 820DBCC0h */ case   20:  		/* mr R4, R25 */
		/* 820DBCC0h case   20:*/		regs.R4 = regs.R25;
		/* 820DBCC0h case   20:*/		return 0x820DBCC4;
		  /* 820DBCC4h */ case   21:  		/* addi R5, R1, 128 */
		/* 820DBCC4h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DBCC4h case   21:*/		return 0x820DBCC8;
		  /* 820DBCC8h */ case   22:  		/* mr R3, R31 */
		/* 820DBCC8h case   22:*/		regs.R3 = regs.R31;
		/* 820DBCC8h case   22:*/		return 0x820DBCCC;
		  /* 820DBCCCh */ case   23:  		/* bl -7156 */
		/* 820DBCCCh case   23:*/		regs.LR = 0x820DBCD0; return 0x820DA0D8;
		/* 820DBCCCh case   23:*/		return 0x820DBCD0;
		  /* 820DBCD0h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820DBCD0h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBCD0h case   24:*/		return 0x820DBCD4;
		  /* 820DBCD4h */ case   25:  		/* bc 12, CR0_LT, 3356 */
		/* 820DBCD4h case   25:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBCD4h case   25:*/		return 0x820DBCD8;
		  /* 820DBCD8h */ case   26:  		/* lwz R11, <#[R31]> */
		/* 820DBCD8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DBCD8h case   26:*/		return 0x820DBCDC;
		  /* 820DBCDCh */ case   27:  		/* li R8, 3 */
		/* 820DBCDCh case   27:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820DBCDCh case   27:*/		return 0x820DBCE0;
		  /* 820DBCE0h */ case   28:  		/* li R7, 3 */
		/* 820DBCE0h case   28:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 820DBCE0h case   28:*/		return 0x820DBCE4;
		  /* 820DBCE4h */ case   29:  		/* li R6, 3 */
		/* 820DBCE4h case   29:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 820DBCE4h case   29:*/		return 0x820DBCE8;
		  /* 820DBCE8h */ case   30:  		/* li R5, 3 */
		/* 820DBCE8h case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820DBCE8h case   30:*/		return 0x820DBCEC;
		  /* 820DBCECh */ case   31:  		/* addi R4, R1, 192 */
		/* 820DBCECh case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 820DBCECh case   31:*/		return 0x820DBCF0;
		  /* 820DBCF0h */ case   32:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DBCF0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DBCF0h case   32:*/		return 0x820DBCF4;
		  /* 820DBCF4h */ case   33:  		/* mr R3, R31 */
		/* 820DBCF4h case   33:*/		regs.R3 = regs.R31;
		/* 820DBCF4h case   33:*/		return 0x820DBCF8;
		  /* 820DBCF8h */ case   34:  		/* mtspr CTR, R11 */
		/* 820DBCF8h case   34:*/		regs.CTR = regs.R11;
		/* 820DBCF8h case   34:*/		return 0x820DBCFC;
		  /* 820DBCFCh */ case   35:  		/* bcctrl 20, CR0_LT */
		/* 820DBCFCh case   35:*/		if ( 1 ) { regs.LR = 0x820DBD00; return (uint32)regs.CTR; }
		/* 820DBCFCh case   35:*/		return 0x820DBD00;
		  /* 820DBD00h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820DBD00h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBD00h case   36:*/		return 0x820DBD04;
		  /* 820DBD04h */ case   37:  		/* bc 12, CR0_LT, 3308 */
		/* 820DBD04h case   37:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBD04h case   37:*/		return 0x820DBD08;
		  /* 820DBD08h */ case   38:  		/* mr R4, R24 */
		/* 820DBD08h case   38:*/		regs.R4 = regs.R24;
		/* 820DBD08h case   38:*/		return 0x820DBD0C;
		  /* 820DBD0Ch */ case   39:  		/* mr R3, R31 */
		/* 820DBD0Ch case   39:*/		regs.R3 = regs.R31;
		/* 820DBD0Ch case   39:*/		return 0x820DBD10;
		  /* 820DBD10h */ case   40:  		/* bl -7224 */
		/* 820DBD10h case   40:*/		regs.LR = 0x820DBD14; return 0x820DA0D8;
		/* 820DBD10h case   40:*/		return 0x820DBD14;
		  /* 820DBD14h */ case   41:  		/* cmpwi CR0, R3, 0 */
		/* 820DBD14h case   41:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBD14h case   41:*/		return 0x820DBD18;
		  /* 820DBD18h */ case   42:  		/* bc 12, CR0_LT, 3288 */
		/* 820DBD18h case   42:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBD18h case   42:*/		return 0x820DBD1C;
		  /* 820DBD1Ch */ case   43:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DBD1Ch case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DBD1Ch case   43:*/		return 0x820DBD20;
		  /* 820DBD20h */ case   44:  		/* addi R30, R30, 1 */
		/* 820DBD20h case   44:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DBD20h case   44:*/		return 0x820DBD24;
		  /* 820DBD24h */ case   45:  		/* cmplw CR6, R30, R11 */
		/* 820DBD24h case   45:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DBD24h case   45:*/		return 0x820DBD28;
		  /* 820DBD28h */ case   46:  		/* bc 12, CR6_LT, -164 */
		/* 820DBD28h case   46:*/		if ( regs.CR[6].lt ) { return 0x820DBC84;  }
		/* 820DBD28h case   46:*/		return 0x820DBD2C;
	}
	return 0x820DBD2C;
} // Block from 820DBC70h-820DBD2Ch (47 instructions)

//////////////////////////////////////////////////////
// Block at 820DBD2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBD2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBD2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBD2C);
		  /* 820DBD2Ch */ case    0:  		/* mr R3, R31 */
		/* 820DBD2Ch case    0:*/		regs.R3 = regs.R31;
		/* 820DBD2Ch case    0:*/		return 0x820DBD30;
		  /* 820DBD30h */ case    1:  		/* bl -7040 */
		/* 820DBD30h case    1:*/		regs.LR = 0x820DBD34; return 0x820DA1B0;
		/* 820DBD30h case    1:*/		return 0x820DBD34;
		  /* 820DBD34h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DBD34h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBD34h case    2:*/		return 0x820DBD38;
		  /* 820DBD38h */ case    3:  		/* bc 12, CR0_LT, 3256 */
		/* 820DBD38h case    3:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBD38h case    3:*/		return 0x820DBD3C;
		  /* 820DBD3Ch */ case    4:  		/* mr R4, R20 */
		/* 820DBD3Ch case    4:*/		regs.R4 = regs.R20;
		/* 820DBD3Ch case    4:*/		return 0x820DBD40;
	}
	return 0x820DBD40;
} // Block from 820DBD2Ch-820DBD40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DBD40h
// Function '?EmitSetCompFunction@C30SWProgram@D3DXShader@@UAAJHPBD00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBD40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBD40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBD40);
		  /* 820DBD40h */ case    0:  		/* mr R3, R31 */
		/* 820DBD40h case    0:*/		regs.R3 = regs.R31;
		/* 820DBD40h case    0:*/		return 0x820DBD44;
		  /* 820DBD44h */ case    1:  		/* bl -7276 */
		/* 820DBD44h case    1:*/		regs.LR = 0x820DBD48; return 0x820DA0D8;
		/* 820DBD44h case    1:*/		return 0x820DBD48;
		  /* 820DBD48h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DBD48h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBD48h case    2:*/		return 0x820DBD4C;
		  /* 820DBD4Ch */ case    3:  		/* bc 12, CR0_LT, 3236 */
		/* 820DBD4Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBD4Ch case    3:*/		return 0x820DBD50;
		  /* 820DBD50h */ case    4:  		/* lwz R10, <#[R31]> */
		/* 820DBD50h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820DBD50h case    4:*/		return 0x820DBD54;
		  /* 820DBD54h */ case    5:  		/* lis R11, -32254 */
		/* 820DBD54h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DBD54h case    5:*/		return 0x820DBD58;
		  /* 820DBD58h */ case    6:  		/* li R5, 7 */
		/* 820DBD58h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 820DBD58h case    6:*/		return 0x820DBD5C;
		  /* 820DBD5Ch */ case    7:  		/* addi R21, R11, -30516 */
		/* 820DBD5Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0xFFFF88CC);
		/* 820DBD5Ch case    7:*/		return 0x820DBD60;
		  /* 820DBD60h */ case    8:  		/* mr R3, R31 */
		/* 820DBD60h case    8:*/		regs.R3 = regs.R31;
		/* 820DBD60h case    8:*/		return 0x820DBD64;
		  /* 820DBD64h */ case    9:  		/* mr R4, R21 */
		/* 820DBD64h case    9:*/		regs.R4 = regs.R21;
		/* 820DBD64h case    9:*/		return 0x820DBD68;
		  /* 820DBD68h */ case   10:  		/* lwz R11, <#[R10 + 412]> */
		/* 820DBD68h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000019C) );
		/* 820DBD68h case   10:*/		return 0x820DBD6C;
		  /* 820DBD6Ch */ case   11:  		/* mtspr CTR, R11 */
		/* 820DBD6Ch case   11:*/		regs.CTR = regs.R11;
		/* 820DBD6Ch case   11:*/		return 0x820DBD70;
		  /* 820DBD70h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 820DBD70h case   12:*/		if ( 1 ) { regs.LR = 0x820DBD74; return (uint32)regs.CTR; }
		/* 820DBD70h case   12:*/		return 0x820DBD74;
		  /* 820DBD74h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DBD74h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBD74h case   13:*/		return 0x820DBD78;
		  /* 820DBD78h */ case   14:  		/* bc 12, CR0_LT, 3192 */
		/* 820DBD78h case   14:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBD78h case   14:*/		return 0x820DBD7C;
		  /* 820DBD7Ch */ case   15:  		/* mr R4, R24 */
		/* 820DBD7Ch case   15:*/		regs.R4 = regs.R24;
		/* 820DBD7Ch case   15:*/		return 0x820DBD80;
		  /* 820DBD80h */ case   16:  		/* mr R3, R31 */
		/* 820DBD80h case   16:*/		regs.R3 = regs.R31;
		/* 820DBD80h case   16:*/		return 0x820DBD84;
		  /* 820DBD84h */ case   17:  		/* bl -7340 */
		/* 820DBD84h case   17:*/		regs.LR = 0x820DBD88; return 0x820DA0D8;
		/* 820DBD84h case   17:*/		return 0x820DBD88;
		  /* 820DBD88h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 820DBD88h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBD88h case   18:*/		return 0x820DBD8C;
		  /* 820DBD8Ch */ case   19:  		/* bc 12, CR0_LT, 3172 */
		/* 820DBD8Ch case   19:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBD8Ch case   19:*/		return 0x820DBD90;
		  /* 820DBD90h */ case   20:  		/* lwz R10, <#[R31 + 1816]> */
		/* 820DBD90h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000718) );
		/* 820DBD90h case   20:*/		return 0x820DBD94;
		  /* 820DBD94h */ case   21:  		/* lis R11, -32254 */
		/* 820DBD94h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DBD94h case   21:*/		return 0x820DBD98;
		  /* 820DBD98h */ case   22:  		/* li R30, 0 */
		/* 820DBD98h case   22:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DBD98h case   22:*/		return 0x820DBD9C;
		  /* 820DBD9Ch */ case   23:  		/* cmplwi CR6, R10, 0 */
		/* 820DBD9Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820DBD9Ch case   23:*/		return 0x820DBDA0;
		  /* 820DBDA0h */ case   24:  		/* addi R22, R11, -30488 */
		/* 820DBDA0h case   24:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0xFFFF88E8);
		/* 820DBDA0h case   24:*/		return 0x820DBDA4;
		  /* 820DBDA4h */ case   25:  		/* bc 4, CR6_GT, 172 */
		/* 820DBDA4h case   25:*/		if ( !regs.CR[6].gt ) { return 0x820DBE50;  }
		/* 820DBDA4h case   25:*/		return 0x820DBDA8;
		  /* 820DBDA8h */ case   26:  		/* mr R3, R31 */
		/* 820DBDA8h case   26:*/		regs.R3 = regs.R31;
		/* 820DBDA8h case   26:*/		return 0x820DBDAC;
		  /* 820DBDACh */ case   27:  		/* bl -7164 */
		/* 820DBDACh case   27:*/		regs.LR = 0x820DBDB0; return 0x820DA1B0;
		/* 820DBDACh case   27:*/		return 0x820DBDB0;
		  /* 820DBDB0h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 820DBDB0h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBDB0h case   28:*/		return 0x820DBDB4;
		  /* 820DBDB4h */ case   29:  		/* bc 12, CR0_LT, 3132 */
		/* 820DBDB4h case   29:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBDB4h case   29:*/		return 0x820DBDB8;
		  /* 820DBDB8h */ case   30:  		/* mr R7, R30 */
		/* 820DBDB8h case   30:*/		regs.R7 = regs.R30;
		/* 820DBDB8h case   30:*/		return 0x820DBDBC;
		  /* 820DBDBCh */ case   31:  		/* mr R6, R30 */
		/* 820DBDBCh case   31:*/		regs.R6 = regs.R30;
		/* 820DBDBCh case   31:*/		return 0x820DBDC0;
		  /* 820DBDC0h */ case   32:  		/* mr R5, R27 */
		/* 820DBDC0h case   32:*/		regs.R5 = regs.R27;
		/* 820DBDC0h case   32:*/		return 0x820DBDC4;
		  /* 820DBDC4h */ case   33:  		/* li R4, 32 */
		/* 820DBDC4h case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBDC4h case   33:*/		return 0x820DBDC8;
		  /* 820DBDC8h */ case   34:  		/* addi R3, R1, 192 */
		/* 820DBDC8h case   34:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DBDC8h case   34:*/		return 0x820DBDCC;
		  /* 820DBDCCh */ case   35:  		/* bl -235404 */
		/* 820DBDCCh case   35:*/		regs.LR = 0x820DBDD0; return 0x820A2640;
		/* 820DBDCCh case   35:*/		return 0x820DBDD0;
		  /* 820DBDD0h */ case   36:  		/* mr R5, R22 */
		/* 820DBDD0h case   36:*/		regs.R5 = regs.R22;
		/* 820DBDD0h case   36:*/		return 0x820DBDD4;
		  /* 820DBDD4h */ case   37:  		/* mr R6, R30 */
		/* 820DBDD4h case   37:*/		regs.R6 = regs.R30;
		/* 820DBDD4h case   37:*/		return 0x820DBDD8;
		  /* 820DBDD8h */ case   38:  		/* li R4, 32 */
		/* 820DBDD8h case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBDD8h case   38:*/		return 0x820DBDDC;
		  /* 820DBDDCh */ case   39:  		/* addi R3, R1, 128 */
		/* 820DBDDCh case   39:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DBDDCh case   39:*/		return 0x820DBDE0;
		  /* 820DBDE0h */ case   40:  		/* bl -235424 */
		/* 820DBDE0h case   40:*/		regs.LR = 0x820DBDE4; return 0x820A2640;
		/* 820DBDE0h case   40:*/		return 0x820DBDE4;
		  /* 820DBDE4h */ case   41:  		/* mr R4, R25 */
		/* 820DBDE4h case   41:*/		regs.R4 = regs.R25;
		/* 820DBDE4h case   41:*/		return 0x820DBDE8;
		  /* 820DBDE8h */ case   42:  		/* addi R5, R1, 128 */
		/* 820DBDE8h case   42:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DBDE8h case   42:*/		return 0x820DBDEC;
		  /* 820DBDECh */ case   43:  		/* mr R3, R31 */
		/* 820DBDECh case   43:*/		regs.R3 = regs.R31;
		/* 820DBDECh case   43:*/		return 0x820DBDF0;
		  /* 820DBDF0h */ case   44:  		/* bl -7448 */
		/* 820DBDF0h case   44:*/		regs.LR = 0x820DBDF4; return 0x820DA0D8;
		/* 820DBDF0h case   44:*/		return 0x820DBDF4;
		  /* 820DBDF4h */ case   45:  		/* cmpwi CR0, R3, 0 */
		/* 820DBDF4h case   45:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBDF4h case   45:*/		return 0x820DBDF8;
		  /* 820DBDF8h */ case   46:  		/* bc 12, CR0_LT, 3064 */
		/* 820DBDF8h case   46:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBDF8h case   46:*/		return 0x820DBDFC;
		  /* 820DBDFCh */ case   47:  		/* lwz R11, <#[R31]> */
		/* 820DBDFCh case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DBDFCh case   47:*/		return 0x820DBE00;
		  /* 820DBE00h */ case   48:  		/* li R8, 1 */
		/* 820DBE00h case   48:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820DBE00h case   48:*/		return 0x820DBE04;
		  /* 820DBE04h */ case   49:  		/* li R7, 1 */
		/* 820DBE04h case   49:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820DBE04h case   49:*/		return 0x820DBE08;
		  /* 820DBE08h */ case   50:  		/* li R6, 1 */
		/* 820DBE08h case   50:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820DBE08h case   50:*/		return 0x820DBE0C;
		  /* 820DBE0Ch */ case   51:  		/* li R5, 1 */
		/* 820DBE0Ch case   51:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820DBE0Ch case   51:*/		return 0x820DBE10;
		  /* 820DBE10h */ case   52:  		/* addi R4, R1, 192 */
		/* 820DBE10h case   52:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 820DBE10h case   52:*/		return 0x820DBE14;
		  /* 820DBE14h */ case   53:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DBE14h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DBE14h case   53:*/		return 0x820DBE18;
		  /* 820DBE18h */ case   54:  		/* mr R3, R31 */
		/* 820DBE18h case   54:*/		regs.R3 = regs.R31;
		/* 820DBE18h case   54:*/		return 0x820DBE1C;
		  /* 820DBE1Ch */ case   55:  		/* mtspr CTR, R11 */
		/* 820DBE1Ch case   55:*/		regs.CTR = regs.R11;
		/* 820DBE1Ch case   55:*/		return 0x820DBE20;
		  /* 820DBE20h */ case   56:  		/* bcctrl 20, CR0_LT */
		/* 820DBE20h case   56:*/		if ( 1 ) { regs.LR = 0x820DBE24; return (uint32)regs.CTR; }
		/* 820DBE20h case   56:*/		return 0x820DBE24;
		  /* 820DBE24h */ case   57:  		/* cmpwi CR0, R3, 0 */
		/* 820DBE24h case   57:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBE24h case   57:*/		return 0x820DBE28;
		  /* 820DBE28h */ case   58:  		/* bc 12, CR0_LT, 3016 */
		/* 820DBE28h case   58:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBE28h case   58:*/		return 0x820DBE2C;
		  /* 820DBE2Ch */ case   59:  		/* mr R4, R24 */
		/* 820DBE2Ch case   59:*/		regs.R4 = regs.R24;
		/* 820DBE2Ch case   59:*/		return 0x820DBE30;
		  /* 820DBE30h */ case   60:  		/* mr R3, R31 */
		/* 820DBE30h case   60:*/		regs.R3 = regs.R31;
		/* 820DBE30h case   60:*/		return 0x820DBE34;
		  /* 820DBE34h */ case   61:  		/* bl -7516 */
		/* 820DBE34h case   61:*/		regs.LR = 0x820DBE38; return 0x820DA0D8;
		/* 820DBE34h case   61:*/		return 0x820DBE38;
		  /* 820DBE38h */ case   62:  		/* cmpwi CR0, R3, 0 */
		/* 820DBE38h case   62:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBE38h case   62:*/		return 0x820DBE3C;
		  /* 820DBE3Ch */ case   63:  		/* bc 12, CR0_LT, 2996 */
		/* 820DBE3Ch case   63:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBE3Ch case   63:*/		return 0x820DBE40;
		  /* 820DBE40h */ case   64:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DBE40h case   64:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DBE40h case   64:*/		return 0x820DBE44;
		  /* 820DBE44h */ case   65:  		/* addi R30, R30, 1 */
		/* 820DBE44h case   65:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DBE44h case   65:*/		return 0x820DBE48;
		  /* 820DBE48h */ case   66:  		/* cmplw CR6, R30, R11 */
		/* 820DBE48h case   66:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DBE48h case   66:*/		return 0x820DBE4C;
		  /* 820DBE4Ch */ case   67:  		/* bc 12, CR6_LT, -164 */
		/* 820DBE4Ch case   67:*/		if ( regs.CR[6].lt ) { return 0x820DBDA8;  }
		/* 820DBE4Ch case   67:*/		return 0x820DBE50;
	}
	return 0x820DBE50;
} // Block from 820DBD40h-820DBE50h (68 instructions)

//////////////////////////////////////////////////////
// Block at 820DBE50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBE50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBE50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBE50);
		  /* 820DBE50h */ case    0:  		/* mr R3, R31 */
		/* 820DBE50h case    0:*/		regs.R3 = regs.R31;
		/* 820DBE50h case    0:*/		return 0x820DBE54;
		  /* 820DBE54h */ case    1:  		/* bl -7332 */
		/* 820DBE54h case    1:*/		regs.LR = 0x820DBE58; return 0x820DA1B0;
		/* 820DBE54h case    1:*/		return 0x820DBE58;
		  /* 820DBE58h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DBE58h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBE58h case    2:*/		return 0x820DBE5C;
		  /* 820DBE5Ch */ case    3:  		/* bc 12, CR0_LT, 2964 */
		/* 820DBE5Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBE5Ch case    3:*/		return 0x820DBE60;
		  /* 820DBE60h */ case    4:  		/* mr R4, R20 */
		/* 820DBE60h case    4:*/		regs.R4 = regs.R20;
		/* 820DBE60h case    4:*/		return 0x820DBE64;
		  /* 820DBE64h */ case    5:  		/* mr R3, R31 */
		/* 820DBE64h case    5:*/		regs.R3 = regs.R31;
		/* 820DBE64h case    5:*/		return 0x820DBE68;
		  /* 820DBE68h */ case    6:  		/* bl -7568 */
		/* 820DBE68h case    6:*/		regs.LR = 0x820DBE6C; return 0x820DA0D8;
		/* 820DBE68h case    6:*/		return 0x820DBE6C;
		  /* 820DBE6Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DBE6Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBE6Ch case    7:*/		return 0x820DBE70;
		  /* 820DBE70h */ case    8:  		/* bc 12, CR0_LT, 2944 */
		/* 820DBE70h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBE70h case    8:*/		return 0x820DBE74;
		  /* 820DBE74h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 820DBE74h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DBE74h case    9:*/		return 0x820DBE78;
		  /* 820DBE78h */ case   10:  		/* mr R4, R21 */
		/* 820DBE78h case   10:*/		regs.R4 = regs.R21;
		/* 820DBE78h case   10:*/		return 0x820DBE7C;
		  /* 820DBE7Ch */ case   11:  		/* li R5, 0 */
		/* 820DBE7Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820DBE7Ch case   11:*/		return 0x820DBE80;
		  /* 820DBE80h */ case   12:  		/* mr R3, R31 */
		/* 820DBE80h case   12:*/		regs.R3 = regs.R31;
		/* 820DBE80h case   12:*/		return 0x820DBE84;
		  /* 820DBE84h */ case   13:  		/* lwz R11, <#[R11 + 408]> */
		/* 820DBE84h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000198) );
		/* 820DBE84h case   13:*/		return 0x820DBE88;
		  /* 820DBE88h */ case   14:  		/* mtspr CTR, R11 */
		/* 820DBE88h case   14:*/		regs.CTR = regs.R11;
		/* 820DBE88h case   14:*/		return 0x820DBE8C;
		  /* 820DBE8Ch */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 820DBE8Ch case   15:*/		if ( 1 ) { regs.LR = 0x820DBE90; return (uint32)regs.CTR; }
		/* 820DBE8Ch case   15:*/		return 0x820DBE90;
		  /* 820DBE90h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820DBE90h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBE90h case   16:*/		return 0x820DBE94;
		  /* 820DBE94h */ case   17:  		/* bc 12, CR0_LT, 2908 */
		/* 820DBE94h case   17:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBE94h case   17:*/		return 0x820DBE98;
		  /* 820DBE98h */ case   18:  		/* mr R4, R24 */
		/* 820DBE98h case   18:*/		regs.R4 = regs.R24;
		/* 820DBE98h case   18:*/		return 0x820DBE9C;
		  /* 820DBE9Ch */ case   19:  		/* mr R3, R31 */
		/* 820DBE9Ch case   19:*/		regs.R3 = regs.R31;
		/* 820DBE9Ch case   19:*/		return 0x820DBEA0;
		  /* 820DBEA0h */ case   20:  		/* bl -7624 */
		/* 820DBEA0h case   20:*/		regs.LR = 0x820DBEA4; return 0x820DA0D8;
		/* 820DBEA0h case   20:*/		return 0x820DBEA4;
		  /* 820DBEA4h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820DBEA4h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBEA4h case   21:*/		return 0x820DBEA8;
		  /* 820DBEA8h */ case   22:  		/* bc 12, CR0_LT, 2888 */
		/* 820DBEA8h case   22:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBEA8h case   22:*/		return 0x820DBEAC;
		  /* 820DBEACh */ case   23:  		/* mr R3, R31 */
		/* 820DBEACh case   23:*/		regs.R3 = regs.R31;
		/* 820DBEACh case   23:*/		return 0x820DBEB0;
		  /* 820DBEB0h */ case   24:  		/* bl -7424 */
		/* 820DBEB0h case   24:*/		regs.LR = 0x820DBEB4; return 0x820DA1B0;
		/* 820DBEB0h case   24:*/		return 0x820DBEB4;
		  /* 820DBEB4h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820DBEB4h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBEB4h case   25:*/		return 0x820DBEB8;
		  /* 820DBEB8h */ case   26:  		/* bc 12, CR0_LT, 2872 */
		/* 820DBEB8h case   26:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBEB8h case   26:*/		return 0x820DBEBC;
		  /* 820DBEBCh */ case   27:  		/* lis R11, -32254 */
		/* 820DBEBCh case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DBEBCh case   27:*/		return 0x820DBEC0;
		  /* 820DBEC0h */ case   28:  		/* mr R3, R31 */
		/* 820DBEC0h case   28:*/		regs.R3 = regs.R31;
		/* 820DBEC0h case   28:*/		return 0x820DBEC4;
		  /* 820DBEC4h */ case   29:  		/* addi R28, R11, -30468 */
		/* 820DBEC4h case   29:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFF88FC);
		/* 820DBEC4h case   29:*/		return 0x820DBEC8;
		  /* 820DBEC8h */ case   30:  		/* mr R4, R28 */
		/* 820DBEC8h case   30:*/		regs.R4 = regs.R28;
		/* 820DBEC8h case   30:*/		return 0x820DBECC;
		  /* 820DBECCh */ case   31:  		/* bl -7668 */
		/* 820DBECCh case   31:*/		regs.LR = 0x820DBED0; return 0x820DA0D8;
		/* 820DBECCh case   31:*/		return 0x820DBED0;
		  /* 820DBED0h */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 820DBED0h case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBED0h case   32:*/		return 0x820DBED4;
		  /* 820DBED4h */ case   33:  		/* bc 12, CR0_LT, 2844 */
		/* 820DBED4h case   33:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBED4h case   33:*/		return 0x820DBED8;
		  /* 820DBED8h */ case   34:  		/* lwz R11, <#[R31]> */
		/* 820DBED8h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DBED8h case   34:*/		return 0x820DBEDC;
		  /* 820DBEDCh */ case   35:  		/* lis R10, -32254 */
		/* 820DBEDCh case   35:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DBEDCh case   35:*/		return 0x820DBEE0;
		  /* 820DBEE0h */ case   36:  		/* li R8, 0 */
		/* 820DBEE0h case   36:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820DBEE0h case   36:*/		return 0x820DBEE4;
		  /* 820DBEE4h */ case   37:  		/* addi R4, R10, -30436 */
		/* 820DBEE4h case   37:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF891C);
		/* 820DBEE4h case   37:*/		return 0x820DBEE8;
		  /* 820DBEE8h */ case   38:  		/* li R7, 0 */
		/* 820DBEE8h case   38:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DBEE8h case   38:*/		return 0x820DBEEC;
		  /* 820DBEECh */ case   39:  		/* li R6, 0 */
		/* 820DBEECh case   39:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820DBEECh case   39:*/		return 0x820DBEF0;
		  /* 820DBEF0h */ case   40:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DBEF0h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DBEF0h case   40:*/		return 0x820DBEF4;
		  /* 820DBEF4h */ case   41:  		/* li R5, 0 */
		/* 820DBEF4h case   41:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820DBEF4h case   41:*/		return 0x820DBEF8;
	}
	return 0x820DBEF8;
} // Block from 820DBE50h-820DBEF8h (42 instructions)

//////////////////////////////////////////////////////
// Block at 820DBEF8h
// Function '?EmitDSTFunction@C30SWProgram@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBEF8);
		  /* 820DBEF8h */ case    0:  		/* mr R3, R31 */
		/* 820DBEF8h case    0:*/		regs.R3 = regs.R31;
		/* 820DBEF8h case    0:*/		return 0x820DBEFC;
		  /* 820DBEFCh */ case    1:  		/* mtspr CTR, R11 */
		/* 820DBEFCh case    1:*/		regs.CTR = regs.R11;
		/* 820DBEFCh case    1:*/		return 0x820DBF00;
		  /* 820DBF00h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 820DBF00h case    2:*/		if ( 1 ) { regs.LR = 0x820DBF04; return (uint32)regs.CTR; }
		/* 820DBF00h case    2:*/		return 0x820DBF04;
		  /* 820DBF04h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820DBF04h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBF04h case    3:*/		return 0x820DBF08;
		  /* 820DBF08h */ case    4:  		/* bc 12, CR0_LT, 2792 */
		/* 820DBF08h case    4:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBF08h case    4:*/		return 0x820DBF0C;
		  /* 820DBF0Ch */ case    5:  		/* mr R4, R24 */
		/* 820DBF0Ch case    5:*/		regs.R4 = regs.R24;
		/* 820DBF0Ch case    5:*/		return 0x820DBF10;
		  /* 820DBF10h */ case    6:  		/* mr R3, R31 */
		/* 820DBF10h case    6:*/		regs.R3 = regs.R31;
		/* 820DBF10h case    6:*/		return 0x820DBF14;
		  /* 820DBF14h */ case    7:  		/* bl -7740 */
		/* 820DBF14h case    7:*/		regs.LR = 0x820DBF18; return 0x820DA0D8;
		/* 820DBF14h case    7:*/		return 0x820DBF18;
		  /* 820DBF18h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DBF18h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBF18h case    8:*/		return 0x820DBF1C;
		  /* 820DBF1Ch */ case    9:  		/* bc 12, CR0_LT, 2772 */
		/* 820DBF1Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBF1Ch case    9:*/		return 0x820DBF20;
		  /* 820DBF20h */ case   10:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DBF20h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DBF20h case   10:*/		return 0x820DBF24;
		  /* 820DBF24h */ case   11:  		/* li R30, 0 */
		/* 820DBF24h case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DBF24h case   11:*/		return 0x820DBF28;
		  /* 820DBF28h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 820DBF28h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DBF28h case   12:*/		return 0x820DBF2C;
		  /* 820DBF2Ch */ case   13:  		/* bc 4, CR6_GT, 136 */
		/* 820DBF2Ch case   13:*/		if ( !regs.CR[6].gt ) { return 0x820DBFB4;  }
		/* 820DBF2Ch case   13:*/		return 0x820DBF30;
		  /* 820DBF30h */ case   14:  		/* mr R3, R31 */
		/* 820DBF30h case   14:*/		regs.R3 = regs.R31;
		/* 820DBF30h case   14:*/		return 0x820DBF34;
		  /* 820DBF34h */ case   15:  		/* bl -7556 */
		/* 820DBF34h case   15:*/		regs.LR = 0x820DBF38; return 0x820DA1B0;
		/* 820DBF34h case   15:*/		return 0x820DBF38;
		  /* 820DBF38h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820DBF38h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBF38h case   16:*/		return 0x820DBF3C;
		  /* 820DBF3Ch */ case   17:  		/* bc 12, CR0_LT, 2740 */
		/* 820DBF3Ch case   17:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBF3Ch case   17:*/		return 0x820DBF40;
		  /* 820DBF40h */ case   18:  		/* mr R5, R26 */
		/* 820DBF40h case   18:*/		regs.R5 = regs.R26;
		/* 820DBF40h case   18:*/		return 0x820DBF44;
		  /* 820DBF44h */ case   19:  		/* mr R6, R30 */
		/* 820DBF44h case   19:*/		regs.R6 = regs.R30;
		/* 820DBF44h case   19:*/		return 0x820DBF48;
		  /* 820DBF48h */ case   20:  		/* li R4, 32 */
		/* 820DBF48h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DBF48h case   20:*/		return 0x820DBF4C;
		  /* 820DBF4Ch */ case   21:  		/* addi R3, R1, 128 */
		/* 820DBF4Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DBF4Ch case   21:*/		return 0x820DBF50;
		  /* 820DBF50h */ case   22:  		/* bl -235792 */
		/* 820DBF50h case   22:*/		regs.LR = 0x820DBF54; return 0x820A2640;
		/* 820DBF50h case   22:*/		return 0x820DBF54;
		  /* 820DBF54h */ case   23:  		/* mr R4, R25 */
		/* 820DBF54h case   23:*/		regs.R4 = regs.R25;
		/* 820DBF54h case   23:*/		return 0x820DBF58;
		  /* 820DBF58h */ case   24:  		/* addi R5, R1, 128 */
		/* 820DBF58h case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DBF58h case   24:*/		return 0x820DBF5C;
		  /* 820DBF5Ch */ case   25:  		/* mr R3, R31 */
		/* 820DBF5Ch case   25:*/		regs.R3 = regs.R31;
		/* 820DBF5Ch case   25:*/		return 0x820DBF60;
		  /* 820DBF60h */ case   26:  		/* bl -7816 */
		/* 820DBF60h case   26:*/		regs.LR = 0x820DBF64; return 0x820DA0D8;
		/* 820DBF60h case   26:*/		return 0x820DBF64;
		  /* 820DBF64h */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 820DBF64h case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBF64h case   27:*/		return 0x820DBF68;
		  /* 820DBF68h */ case   28:  		/* bc 12, CR0_LT, 2696 */
		/* 820DBF68h case   28:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBF68h case   28:*/		return 0x820DBF6C;
		  /* 820DBF6Ch */ case   29:  		/* lwz R11, <#[R31]> */
		/* 820DBF6Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DBF6Ch case   29:*/		return 0x820DBF70;
		  /* 820DBF70h */ case   30:  		/* mr R5, R21 */
		/* 820DBF70h case   30:*/		regs.R5 = regs.R21;
		/* 820DBF70h case   30:*/		return 0x820DBF74;
		  /* 820DBF74h */ case   31:  		/* addi R4, R1, 128 */
		/* 820DBF74h case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820DBF74h case   31:*/		return 0x820DBF78;
		  /* 820DBF78h */ case   32:  		/* mr R3, R31 */
		/* 820DBF78h case   32:*/		regs.R3 = regs.R31;
		/* 820DBF78h case   32:*/		return 0x820DBF7C;
		  /* 820DBF7Ch */ case   33:  		/* lwz R11, <#[R11 + 496]> */
		/* 820DBF7Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001F0) );
		/* 820DBF7Ch case   33:*/		return 0x820DBF80;
		  /* 820DBF80h */ case   34:  		/* mtspr CTR, R11 */
		/* 820DBF80h case   34:*/		regs.CTR = regs.R11;
		/* 820DBF80h case   34:*/		return 0x820DBF84;
		  /* 820DBF84h */ case   35:  		/* bcctrl 20, CR0_LT */
		/* 820DBF84h case   35:*/		if ( 1 ) { regs.LR = 0x820DBF88; return (uint32)regs.CTR; }
		/* 820DBF84h case   35:*/		return 0x820DBF88;
		  /* 820DBF88h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820DBF88h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBF88h case   36:*/		return 0x820DBF8C;
		  /* 820DBF8Ch */ case   37:  		/* bc 12, CR0_LT, 2660 */
		/* 820DBF8Ch case   37:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBF8Ch case   37:*/		return 0x820DBF90;
		  /* 820DBF90h */ case   38:  		/* mr R4, R24 */
		/* 820DBF90h case   38:*/		regs.R4 = regs.R24;
		/* 820DBF90h case   38:*/		return 0x820DBF94;
		  /* 820DBF94h */ case   39:  		/* mr R3, R31 */
		/* 820DBF94h case   39:*/		regs.R3 = regs.R31;
		/* 820DBF94h case   39:*/		return 0x820DBF98;
		  /* 820DBF98h */ case   40:  		/* bl -7872 */
		/* 820DBF98h case   40:*/		regs.LR = 0x820DBF9C; return 0x820DA0D8;
		/* 820DBF98h case   40:*/		return 0x820DBF9C;
		  /* 820DBF9Ch */ case   41:  		/* cmpwi CR0, R3, 0 */
		/* 820DBF9Ch case   41:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBF9Ch case   41:*/		return 0x820DBFA0;
		  /* 820DBFA0h */ case   42:  		/* bc 12, CR0_LT, 2640 */
		/* 820DBFA0h case   42:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBFA0h case   42:*/		return 0x820DBFA4;
		  /* 820DBFA4h */ case   43:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DBFA4h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DBFA4h case   43:*/		return 0x820DBFA8;
		  /* 820DBFA8h */ case   44:  		/* addi R30, R30, 1 */
		/* 820DBFA8h case   44:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DBFA8h case   44:*/		return 0x820DBFAC;
		  /* 820DBFACh */ case   45:  		/* cmplw CR6, R30, R11 */
		/* 820DBFACh case   45:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DBFACh case   45:*/		return 0x820DBFB0;
		  /* 820DBFB0h */ case   46:  		/* bc 12, CR6_LT, -128 */
		/* 820DBFB0h case   46:*/		if ( regs.CR[6].lt ) { return 0x820DBF30;  }
		/* 820DBFB0h case   46:*/		return 0x820DBFB4;
	}
	return 0x820DBFB4;
} // Block from 820DBEF8h-820DBFB4h (47 instructions)

//////////////////////////////////////////////////////
// Block at 820DBFB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DBFB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DBFB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DBFB4);
		  /* 820DBFB4h */ case    0:  		/* mr R3, R31 */
		/* 820DBFB4h case    0:*/		regs.R3 = regs.R31;
		/* 820DBFB4h case    0:*/		return 0x820DBFB8;
		  /* 820DBFB8h */ case    1:  		/* bl -7688 */
		/* 820DBFB8h case    1:*/		regs.LR = 0x820DBFBC; return 0x820DA1B0;
		/* 820DBFB8h case    1:*/		return 0x820DBFBC;
		  /* 820DBFBCh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DBFBCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBFBCh case    2:*/		return 0x820DBFC0;
		  /* 820DBFC0h */ case    3:  		/* bc 12, CR0_LT, 2608 */
		/* 820DBFC0h case    3:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBFC0h case    3:*/		return 0x820DBFC4;
		  /* 820DBFC4h */ case    4:  		/* mr R4, R20 */
		/* 820DBFC4h case    4:*/		regs.R4 = regs.R20;
		/* 820DBFC4h case    4:*/		return 0x820DBFC8;
		  /* 820DBFC8h */ case    5:  		/* mr R3, R31 */
		/* 820DBFC8h case    5:*/		regs.R3 = regs.R31;
		/* 820DBFC8h case    5:*/		return 0x820DBFCC;
		  /* 820DBFCCh */ case    6:  		/* bl -7924 */
		/* 820DBFCCh case    6:*/		regs.LR = 0x820DBFD0; return 0x820DA0D8;
		/* 820DBFCCh case    6:*/		return 0x820DBFD0;
		  /* 820DBFD0h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DBFD0h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBFD0h case    7:*/		return 0x820DBFD4;
		  /* 820DBFD4h */ case    8:  		/* bc 12, CR0_LT, 2588 */
		/* 820DBFD4h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DBFD4h case    8:*/		return 0x820DBFD8;
		  /* 820DBFD8h */ case    9:  		/* lwz R10, <#[R31]> */
		/* 820DBFD8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820DBFD8h case    9:*/		return 0x820DBFDC;
		  /* 820DBFDCh */ case   10:  		/* lis R11, -32254 */
		/* 820DBFDCh case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DBFDCh case   10:*/		return 0x820DBFE0;
		  /* 820DBFE0h */ case   11:  		/* mr R4, R21 */
		/* 820DBFE0h case   11:*/		regs.R4 = regs.R21;
		/* 820DBFE0h case   11:*/		return 0x820DBFE4;
		  /* 820DBFE4h */ case   12:  		/* addi R23, R11, -30476 */
		/* 820DBFE4h case   12:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0xFFFF88F4);
		/* 820DBFE4h case   12:*/		return 0x820DBFE8;
		  /* 820DBFE8h */ case   13:  		/* mr R3, R31 */
		/* 820DBFE8h case   13:*/		regs.R3 = regs.R31;
		/* 820DBFE8h case   13:*/		return 0x820DBFEC;
		  /* 820DBFECh */ case   14:  		/* mr R5, R23 */
		/* 820DBFECh case   14:*/		regs.R5 = regs.R23;
		/* 820DBFECh case   14:*/		return 0x820DBFF0;
		  /* 820DBFF0h */ case   15:  		/* lwz R11, <#[R10 + 468]> */
		/* 820DBFF0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000001D4) );
		/* 820DBFF0h case   15:*/		return 0x820DBFF4;
		  /* 820DBFF4h */ case   16:  		/* mtspr CTR, R11 */
		/* 820DBFF4h case   16:*/		regs.CTR = regs.R11;
		/* 820DBFF4h case   16:*/		return 0x820DBFF8;
		  /* 820DBFF8h */ case   17:  		/* bcctrl 20, CR0_LT */
		/* 820DBFF8h case   17:*/		if ( 1 ) { regs.LR = 0x820DBFFC; return (uint32)regs.CTR; }
		/* 820DBFF8h case   17:*/		return 0x820DBFFC;
		  /* 820DBFFCh */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 820DBFFCh case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DBFFCh case   18:*/		return 0x820DC000;
		  /* 820DC000h */ case   19:  		/* bc 12, CR0_LT, 2544 */
		/* 820DC000h case   19:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC000h case   19:*/		return 0x820DC004;
		  /* 820DC004h */ case   20:  		/* mr R4, R24 */
		/* 820DC004h case   20:*/		regs.R4 = regs.R24;
		/* 820DC004h case   20:*/		return 0x820DC008;
		  /* 820DC008h */ case   21:  		/* mr R3, R31 */
		/* 820DC008h case   21:*/		regs.R3 = regs.R31;
		/* 820DC008h case   21:*/		return 0x820DC00C;
		  /* 820DC00Ch */ case   22:  		/* bl -7988 */
		/* 820DC00Ch case   22:*/		regs.LR = 0x820DC010; return 0x820DA0D8;
		/* 820DC00Ch case   22:*/		return 0x820DC010;
		  /* 820DC010h */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 820DC010h case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC010h case   23:*/		return 0x820DC014;
		  /* 820DC014h */ case   24:  		/* bc 12, CR0_LT, 2524 */
		/* 820DC014h case   24:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC014h case   24:*/		return 0x820DC018;
		  /* 820DC018h */ case   25:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC018h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC018h case   25:*/		return 0x820DC01C;
		  /* 820DC01Ch */ case   26:  		/* li R30, 0 */
		/* 820DC01Ch case   26:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC01Ch case   26:*/		return 0x820DC020;
		  /* 820DC020h */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 820DC020h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC020h case   27:*/		return 0x820DC024;
		  /* 820DC024h */ case   28:  		/* bc 12, CR6_EQ, 132 */
		/* 820DC024h case   28:*/		if ( regs.CR[6].eq ) { return 0x820DC0A8;  }
		/* 820DC024h case   28:*/		return 0x820DC028;
		  /* 820DC028h */ case   29:  		/* mr R3, R31 */
		/* 820DC028h case   29:*/		regs.R3 = regs.R31;
		/* 820DC028h case   29:*/		return 0x820DC02C;
		  /* 820DC02Ch */ case   30:  		/* bl -7804 */
		/* 820DC02Ch case   30:*/		regs.LR = 0x820DC030; return 0x820DA1B0;
		/* 820DC02Ch case   30:*/		return 0x820DC030;
		  /* 820DC030h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820DC030h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC030h case   31:*/		return 0x820DC034;
		  /* 820DC034h */ case   32:  		/* bc 12, CR0_LT, 2492 */
		/* 820DC034h case   32:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC034h case   32:*/		return 0x820DC038;
		  /* 820DC038h */ case   33:  		/* mr R5, R22 */
		/* 820DC038h case   33:*/		regs.R5 = regs.R22;
		/* 820DC038h case   33:*/		return 0x820DC03C;
		  /* 820DC03Ch */ case   34:  		/* mr R6, R30 */
		/* 820DC03Ch case   34:*/		regs.R6 = regs.R30;
		/* 820DC03Ch case   34:*/		return 0x820DC040;
		  /* 820DC040h */ case   35:  		/* li R4, 32 */
		/* 820DC040h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC040h case   35:*/		return 0x820DC044;
		  /* 820DC044h */ case   36:  		/* addi R3, R1, 128 */
		/* 820DC044h case   36:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC044h case   36:*/		return 0x820DC048;
		  /* 820DC048h */ case   37:  		/* bl -236040 */
		/* 820DC048h case   37:*/		regs.LR = 0x820DC04C; return 0x820A2640;
		/* 820DC048h case   37:*/		return 0x820DC04C;
		  /* 820DC04Ch */ case   38:  		/* mr R4, R25 */
		/* 820DC04Ch case   38:*/		regs.R4 = regs.R25;
		/* 820DC04Ch case   38:*/		return 0x820DC050;
		  /* 820DC050h */ case   39:  		/* addi R5, R1, 128 */
		/* 820DC050h case   39:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC050h case   39:*/		return 0x820DC054;
		  /* 820DC054h */ case   40:  		/* mr R3, R31 */
		/* 820DC054h case   40:*/		regs.R3 = regs.R31;
		/* 820DC054h case   40:*/		return 0x820DC058;
		  /* 820DC058h */ case   41:  		/* bl -8064 */
		/* 820DC058h case   41:*/		regs.LR = 0x820DC05C; return 0x820DA0D8;
		/* 820DC058h case   41:*/		return 0x820DC05C;
		  /* 820DC05Ch */ case   42:  		/* cmpwi CR0, R3, 0 */
		/* 820DC05Ch case   42:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC05Ch case   42:*/		return 0x820DC060;
		  /* 820DC060h */ case   43:  		/* bc 12, CR0_LT, 2448 */
		/* 820DC060h case   43:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC060h case   43:*/		return 0x820DC064;
		  /* 820DC064h */ case   44:  		/* lwz R11, <#[R31]> */
		/* 820DC064h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC064h case   44:*/		return 0x820DC068;
		  /* 820DC068h */ case   45:  		/* addi R4, R1, 128 */
		/* 820DC068h case   45:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820DC068h case   45:*/		return 0x820DC06C;
		  /* 820DC06Ch */ case   46:  		/* mr R3, R31 */
		/* 820DC06Ch case   46:*/		regs.R3 = regs.R31;
		/* 820DC06Ch case   46:*/		return 0x820DC070;
		  /* 820DC070h */ case   47:  		/* lwz R11, <#[R11 + 504]> */
		/* 820DC070h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001F8) );
		/* 820DC070h case   47:*/		return 0x820DC074;
		  /* 820DC074h */ case   48:  		/* mtspr CTR, R11 */
		/* 820DC074h case   48:*/		regs.CTR = regs.R11;
		/* 820DC074h case   48:*/		return 0x820DC078;
		  /* 820DC078h */ case   49:  		/* bcctrl 20, CR0_LT */
		/* 820DC078h case   49:*/		if ( 1 ) { regs.LR = 0x820DC07C; return (uint32)regs.CTR; }
		/* 820DC078h case   49:*/		return 0x820DC07C;
		  /* 820DC07Ch */ case   50:  		/* cmpwi CR0, R3, 0 */
		/* 820DC07Ch case   50:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC07Ch case   50:*/		return 0x820DC080;
		  /* 820DC080h */ case   51:  		/* bc 12, CR0_LT, 2416 */
		/* 820DC080h case   51:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC080h case   51:*/		return 0x820DC084;
		  /* 820DC084h */ case   52:  		/* mr R4, R24 */
		/* 820DC084h case   52:*/		regs.R4 = regs.R24;
		/* 820DC084h case   52:*/		return 0x820DC088;
		  /* 820DC088h */ case   53:  		/* mr R3, R31 */
		/* 820DC088h case   53:*/		regs.R3 = regs.R31;
		/* 820DC088h case   53:*/		return 0x820DC08C;
		  /* 820DC08Ch */ case   54:  		/* bl -8116 */
		/* 820DC08Ch case   54:*/		regs.LR = 0x820DC090; return 0x820DA0D8;
		/* 820DC08Ch case   54:*/		return 0x820DC090;
		  /* 820DC090h */ case   55:  		/* cmpwi CR0, R3, 0 */
		/* 820DC090h case   55:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC090h case   55:*/		return 0x820DC094;
		  /* 820DC094h */ case   56:  		/* bc 12, CR0_LT, 2396 */
		/* 820DC094h case   56:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC094h case   56:*/		return 0x820DC098;
		  /* 820DC098h */ case   57:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC098h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC098h case   57:*/		return 0x820DC09C;
		  /* 820DC09Ch */ case   58:  		/* addi R30, R30, 1 */
		/* 820DC09Ch case   58:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC09Ch case   58:*/		return 0x820DC0A0;
		  /* 820DC0A0h */ case   59:  		/* cmplw CR6, R30, R11 */
		/* 820DC0A0h case   59:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC0A0h case   59:*/		return 0x820DC0A4;
		  /* 820DC0A4h */ case   60:  		/* bc 12, CR6_LT, -124 */
		/* 820DC0A4h case   60:*/		if ( regs.CR[6].lt ) { return 0x820DC028;  }
		/* 820DC0A4h case   60:*/		return 0x820DC0A8;
	}
	return 0x820DC0A8;
} // Block from 820DBFB4h-820DC0A8h (61 instructions)

//////////////////////////////////////////////////////
// Block at 820DC0A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC0A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC0A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC0A8);
		  /* 820DC0A8h */ case    0:  		/* li R30, 0 */
		/* 820DC0A8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC0A8h case    0:*/		return 0x820DC0AC;
		  /* 820DC0ACh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DC0ACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC0ACh case    1:*/		return 0x820DC0B0;
		  /* 820DC0B0h */ case    2:  		/* bc 12, CR6_EQ, 136 */
		/* 820DC0B0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DC138;  }
		/* 820DC0B0h case    2:*/		return 0x820DC0B4;
		  /* 820DC0B4h */ case    3:  		/* mr R3, R31 */
		/* 820DC0B4h case    3:*/		regs.R3 = regs.R31;
		/* 820DC0B4h case    3:*/		return 0x820DC0B8;
		  /* 820DC0B8h */ case    4:  		/* bl -7944 */
		/* 820DC0B8h case    4:*/		regs.LR = 0x820DC0BC; return 0x820DA1B0;
		/* 820DC0B8h case    4:*/		return 0x820DC0BC;
		  /* 820DC0BCh */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DC0BCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC0BCh case    5:*/		return 0x820DC0C0;
		  /* 820DC0C0h */ case    6:  		/* bc 12, CR0_LT, 2352 */
		/* 820DC0C0h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC0C0h case    6:*/		return 0x820DC0C4;
		  /* 820DC0C4h */ case    7:  		/* mr R5, R26 */
		/* 820DC0C4h case    7:*/		regs.R5 = regs.R26;
		/* 820DC0C4h case    7:*/		return 0x820DC0C8;
		  /* 820DC0C8h */ case    8:  		/* mr R6, R30 */
		/* 820DC0C8h case    8:*/		regs.R6 = regs.R30;
		/* 820DC0C8h case    8:*/		return 0x820DC0CC;
		  /* 820DC0CCh */ case    9:  		/* li R4, 32 */
		/* 820DC0CCh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC0CCh case    9:*/		return 0x820DC0D0;
		  /* 820DC0D0h */ case   10:  		/* addi R3, R1, 128 */
		/* 820DC0D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC0D0h case   10:*/		return 0x820DC0D4;
		  /* 820DC0D4h */ case   11:  		/* bl -236180 */
		/* 820DC0D4h case   11:*/		regs.LR = 0x820DC0D8; return 0x820A2640;
		/* 820DC0D4h case   11:*/		return 0x820DC0D8;
		  /* 820DC0D8h */ case   12:  		/* mr R4, R25 */
		/* 820DC0D8h case   12:*/		regs.R4 = regs.R25;
		/* 820DC0D8h case   12:*/		return 0x820DC0DC;
		  /* 820DC0DCh */ case   13:  		/* addi R5, R1, 128 */
		/* 820DC0DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC0DCh case   13:*/		return 0x820DC0E0;
		  /* 820DC0E0h */ case   14:  		/* mr R3, R31 */
		/* 820DC0E0h case   14:*/		regs.R3 = regs.R31;
		/* 820DC0E0h case   14:*/		return 0x820DC0E4;
		  /* 820DC0E4h */ case   15:  		/* bl -8204 */
		/* 820DC0E4h case   15:*/		regs.LR = 0x820DC0E8; return 0x820DA0D8;
		/* 820DC0E4h case   15:*/		return 0x820DC0E8;
		  /* 820DC0E8h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820DC0E8h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC0E8h case   16:*/		return 0x820DC0EC;
		  /* 820DC0ECh */ case   17:  		/* bc 12, CR0_LT, 2308 */
		/* 820DC0ECh case   17:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC0ECh case   17:*/		return 0x820DC0F0;
		  /* 820DC0F0h */ case   18:  		/* lwz R11, <#[R31]> */
		/* 820DC0F0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC0F0h case   18:*/		return 0x820DC0F4;
		  /* 820DC0F4h */ case   19:  		/* mr R5, R21 */
		/* 820DC0F4h case   19:*/		regs.R5 = regs.R21;
		/* 820DC0F4h case   19:*/		return 0x820DC0F8;
		  /* 820DC0F8h */ case   20:  		/* addi R4, R1, 128 */
		/* 820DC0F8h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820DC0F8h case   20:*/		return 0x820DC0FC;
		  /* 820DC0FCh */ case   21:  		/* mr R3, R31 */
		/* 820DC0FCh case   21:*/		regs.R3 = regs.R31;
		/* 820DC0FCh case   21:*/		return 0x820DC100;
		  /* 820DC100h */ case   22:  		/* lwz R11, <#[R11 + 500]> */
		/* 820DC100h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001F4) );
		/* 820DC100h case   22:*/		return 0x820DC104;
		  /* 820DC104h */ case   23:  		/* mtspr CTR, R11 */
		/* 820DC104h case   23:*/		regs.CTR = regs.R11;
		/* 820DC104h case   23:*/		return 0x820DC108;
		  /* 820DC108h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 820DC108h case   24:*/		if ( 1 ) { regs.LR = 0x820DC10C; return (uint32)regs.CTR; }
		/* 820DC108h case   24:*/		return 0x820DC10C;
		  /* 820DC10Ch */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820DC10Ch case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC10Ch case   25:*/		return 0x820DC110;
		  /* 820DC110h */ case   26:  		/* bc 12, CR0_LT, 2272 */
		/* 820DC110h case   26:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC110h case   26:*/		return 0x820DC114;
		  /* 820DC114h */ case   27:  		/* mr R4, R24 */
		/* 820DC114h case   27:*/		regs.R4 = regs.R24;
		/* 820DC114h case   27:*/		return 0x820DC118;
		  /* 820DC118h */ case   28:  		/* mr R3, R31 */
		/* 820DC118h case   28:*/		regs.R3 = regs.R31;
		/* 820DC118h case   28:*/		return 0x820DC11C;
		  /* 820DC11Ch */ case   29:  		/* bl -8260 */
		/* 820DC11Ch case   29:*/		regs.LR = 0x820DC120; return 0x820DA0D8;
		/* 820DC11Ch case   29:*/		return 0x820DC120;
		  /* 820DC120h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 820DC120h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC120h case   30:*/		return 0x820DC124;
		  /* 820DC124h */ case   31:  		/* bc 12, CR0_LT, 2252 */
		/* 820DC124h case   31:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC124h case   31:*/		return 0x820DC128;
		  /* 820DC128h */ case   32:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC128h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC128h case   32:*/		return 0x820DC12C;
		  /* 820DC12Ch */ case   33:  		/* addi R30, R30, 1 */
		/* 820DC12Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC12Ch case   33:*/		return 0x820DC130;
		  /* 820DC130h */ case   34:  		/* cmplw CR6, R30, R11 */
		/* 820DC130h case   34:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC130h case   34:*/		return 0x820DC134;
		  /* 820DC134h */ case   35:  		/* bc 12, CR6_LT, -128 */
		/* 820DC134h case   35:*/		if ( regs.CR[6].lt ) { return 0x820DC0B4;  }
		/* 820DC134h case   35:*/		return 0x820DC138;
	}
	return 0x820DC138;
} // Block from 820DC0A8h-820DC138h (36 instructions)

//////////////////////////////////////////////////////
// Block at 820DC138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC138);
		  /* 820DC138h */ case    0:  		/* li R30, 0 */
		/* 820DC138h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC138h case    0:*/		return 0x820DC13C;
		  /* 820DC13Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DC13Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC13Ch case    1:*/		return 0x820DC140;
		  /* 820DC140h */ case    2:  		/* bc 12, CR6_EQ, 156 */
		/* 820DC140h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DC1DC;  }
		/* 820DC140h case    2:*/		return 0x820DC144;
		  /* 820DC144h */ case    3:  		/* mr R3, R31 */
		/* 820DC144h case    3:*/		regs.R3 = regs.R31;
		/* 820DC144h case    3:*/		return 0x820DC148;
		  /* 820DC148h */ case    4:  		/* bl -8088 */
		/* 820DC148h case    4:*/		regs.LR = 0x820DC14C; return 0x820DA1B0;
		/* 820DC148h case    4:*/		return 0x820DC14C;
		  /* 820DC14Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DC14Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC14Ch case    5:*/		return 0x820DC150;
		  /* 820DC150h */ case    6:  		/* bc 12, CR0_LT, 2208 */
		/* 820DC150h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC150h case    6:*/		return 0x820DC154;
		  /* 820DC154h */ case    7:  		/* mr R5, R26 */
		/* 820DC154h case    7:*/		regs.R5 = regs.R26;
		/* 820DC154h case    7:*/		return 0x820DC158;
		  /* 820DC158h */ case    8:  		/* mr R6, R30 */
		/* 820DC158h case    8:*/		regs.R6 = regs.R30;
		/* 820DC158h case    8:*/		return 0x820DC15C;
		  /* 820DC15Ch */ case    9:  		/* li R4, 32 */
		/* 820DC15Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC15Ch case    9:*/		return 0x820DC160;
		  /* 820DC160h */ case   10:  		/* addi R3, R1, 160 */
		/* 820DC160h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DC160h case   10:*/		return 0x820DC164;
		  /* 820DC164h */ case   11:  		/* bl -236324 */
		/* 820DC164h case   11:*/		regs.LR = 0x820DC168; return 0x820A2640;
		/* 820DC164h case   11:*/		return 0x820DC168;
		  /* 820DC168h */ case   12:  		/* mr R5, R22 */
		/* 820DC168h case   12:*/		regs.R5 = regs.R22;
		/* 820DC168h case   12:*/		return 0x820DC16C;
		  /* 820DC16Ch */ case   13:  		/* mr R6, R30 */
		/* 820DC16Ch case   13:*/		regs.R6 = regs.R30;
		/* 820DC16Ch case   13:*/		return 0x820DC170;
		  /* 820DC170h */ case   14:  		/* li R4, 32 */
		/* 820DC170h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC170h case   14:*/		return 0x820DC174;
		  /* 820DC174h */ case   15:  		/* addi R3, R1, 128 */
		/* 820DC174h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC174h case   15:*/		return 0x820DC178;
		  /* 820DC178h */ case   16:  		/* bl -236344 */
		/* 820DC178h case   16:*/		regs.LR = 0x820DC17C; return 0x820A2640;
		/* 820DC178h case   16:*/		return 0x820DC17C;
		  /* 820DC17Ch */ case   17:  		/* mr R4, R25 */
		/* 820DC17Ch case   17:*/		regs.R4 = regs.R25;
		/* 820DC17Ch case   17:*/		return 0x820DC180;
		  /* 820DC180h */ case   18:  		/* addi R5, R1, 128 */
		/* 820DC180h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC180h case   18:*/		return 0x820DC184;
		  /* 820DC184h */ case   19:  		/* mr R3, R31 */
		/* 820DC184h case   19:*/		regs.R3 = regs.R31;
		/* 820DC184h case   19:*/		return 0x820DC188;
		  /* 820DC188h */ case   20:  		/* bl -8368 */
		/* 820DC188h case   20:*/		regs.LR = 0x820DC18C; return 0x820DA0D8;
		/* 820DC188h case   20:*/		return 0x820DC18C;
		  /* 820DC18Ch */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820DC18Ch case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC18Ch case   21:*/		return 0x820DC190;
		  /* 820DC190h */ case   22:  		/* bc 12, CR0_LT, 2144 */
		/* 820DC190h case   22:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC190h case   22:*/		return 0x820DC194;
		  /* 820DC194h */ case   23:  		/* lwz R11, <#[R31]> */
		/* 820DC194h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC194h case   23:*/		return 0x820DC198;
		  /* 820DC198h */ case   24:  		/* addi R5, R1, 128 */
		/* 820DC198h case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC198h case   24:*/		return 0x820DC19C;
		  /* 820DC19Ch */ case   25:  		/* addi R4, R1, 160 */
		/* 820DC19Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820DC19Ch case   25:*/		return 0x820DC1A0;
		  /* 820DC1A0h */ case   26:  		/* mr R3, R31 */
		/* 820DC1A0h case   26:*/		regs.R3 = regs.R31;
		/* 820DC1A0h case   26:*/		return 0x820DC1A4;
		  /* 820DC1A4h */ case   27:  		/* lwz R11, <#[R11 + 516]> */
		/* 820DC1A4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000204) );
		/* 820DC1A4h case   27:*/		return 0x820DC1A8;
		  /* 820DC1A8h */ case   28:  		/* mtspr CTR, R11 */
		/* 820DC1A8h case   28:*/		regs.CTR = regs.R11;
		/* 820DC1A8h case   28:*/		return 0x820DC1AC;
		  /* 820DC1ACh */ case   29:  		/* bcctrl 20, CR0_LT */
		/* 820DC1ACh case   29:*/		if ( 1 ) { regs.LR = 0x820DC1B0; return (uint32)regs.CTR; }
		/* 820DC1ACh case   29:*/		return 0x820DC1B0;
		  /* 820DC1B0h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 820DC1B0h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC1B0h case   30:*/		return 0x820DC1B4;
		  /* 820DC1B4h */ case   31:  		/* bc 12, CR0_LT, 2108 */
		/* 820DC1B4h case   31:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC1B4h case   31:*/		return 0x820DC1B8;
		  /* 820DC1B8h */ case   32:  		/* mr R4, R24 */
		/* 820DC1B8h case   32:*/		regs.R4 = regs.R24;
		/* 820DC1B8h case   32:*/		return 0x820DC1BC;
		  /* 820DC1BCh */ case   33:  		/* mr R3, R31 */
		/* 820DC1BCh case   33:*/		regs.R3 = regs.R31;
		/* 820DC1BCh case   33:*/		return 0x820DC1C0;
		  /* 820DC1C0h */ case   34:  		/* bl -8424 */
		/* 820DC1C0h case   34:*/		regs.LR = 0x820DC1C4; return 0x820DA0D8;
		/* 820DC1C0h case   34:*/		return 0x820DC1C4;
		  /* 820DC1C4h */ case   35:  		/* cmpwi CR0, R3, 0 */
		/* 820DC1C4h case   35:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC1C4h case   35:*/		return 0x820DC1C8;
		  /* 820DC1C8h */ case   36:  		/* bc 12, CR0_LT, 2088 */
		/* 820DC1C8h case   36:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC1C8h case   36:*/		return 0x820DC1CC;
		  /* 820DC1CCh */ case   37:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC1CCh case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC1CCh case   37:*/		return 0x820DC1D0;
		  /* 820DC1D0h */ case   38:  		/* addi R30, R30, 1 */
		/* 820DC1D0h case   38:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC1D0h case   38:*/		return 0x820DC1D4;
		  /* 820DC1D4h */ case   39:  		/* cmplw CR6, R30, R11 */
		/* 820DC1D4h case   39:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC1D4h case   39:*/		return 0x820DC1D8;
		  /* 820DC1D8h */ case   40:  		/* bc 12, CR6_LT, -148 */
		/* 820DC1D8h case   40:*/		if ( regs.CR[6].lt ) { return 0x820DC144;  }
		/* 820DC1D8h case   40:*/		return 0x820DC1DC;
	}
	return 0x820DC1DC;
} // Block from 820DC138h-820DC1DCh (41 instructions)

//////////////////////////////////////////////////////
// Block at 820DC1DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC1DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC1DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC1DC);
		  /* 820DC1DCh */ case    0:  		/* li R30, 0 */
		/* 820DC1DCh case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC1DCh case    0:*/		return 0x820DC1E0;
		  /* 820DC1E0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DC1E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC1E0h case    1:*/		return 0x820DC1E4;
		  /* 820DC1E4h */ case    2:  		/* bc 12, CR6_EQ, 132 */
		/* 820DC1E4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DC268;  }
		/* 820DC1E4h case    2:*/		return 0x820DC1E8;
		  /* 820DC1E8h */ case    3:  		/* mr R3, R31 */
		/* 820DC1E8h case    3:*/		regs.R3 = regs.R31;
		/* 820DC1E8h case    3:*/		return 0x820DC1EC;
		  /* 820DC1ECh */ case    4:  		/* bl -8252 */
		/* 820DC1ECh case    4:*/		regs.LR = 0x820DC1F0; return 0x820DA1B0;
		/* 820DC1ECh case    4:*/		return 0x820DC1F0;
		  /* 820DC1F0h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DC1F0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC1F0h case    5:*/		return 0x820DC1F4;
		  /* 820DC1F4h */ case    6:  		/* bc 12, CR0_LT, 2044 */
		/* 820DC1F4h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC1F4h case    6:*/		return 0x820DC1F8;
		  /* 820DC1F8h */ case    7:  		/* mr R5, R22 */
		/* 820DC1F8h case    7:*/		regs.R5 = regs.R22;
		/* 820DC1F8h case    7:*/		return 0x820DC1FC;
		  /* 820DC1FCh */ case    8:  		/* mr R6, R30 */
		/* 820DC1FCh case    8:*/		regs.R6 = regs.R30;
		/* 820DC1FCh case    8:*/		return 0x820DC200;
		  /* 820DC200h */ case    9:  		/* li R4, 32 */
		/* 820DC200h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC200h case    9:*/		return 0x820DC204;
		  /* 820DC204h */ case   10:  		/* addi R3, R1, 128 */
		/* 820DC204h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC204h case   10:*/		return 0x820DC208;
		  /* 820DC208h */ case   11:  		/* bl -236488 */
		/* 820DC208h case   11:*/		regs.LR = 0x820DC20C; return 0x820A2640;
		/* 820DC208h case   11:*/		return 0x820DC20C;
		  /* 820DC20Ch */ case   12:  		/* mr R4, R25 */
		/* 820DC20Ch case   12:*/		regs.R4 = regs.R25;
		/* 820DC20Ch case   12:*/		return 0x820DC210;
		  /* 820DC210h */ case   13:  		/* addi R5, R1, 128 */
		/* 820DC210h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC210h case   13:*/		return 0x820DC214;
		  /* 820DC214h */ case   14:  		/* mr R3, R31 */
		/* 820DC214h case   14:*/		regs.R3 = regs.R31;
		/* 820DC214h case   14:*/		return 0x820DC218;
		  /* 820DC218h */ case   15:  		/* bl -8512 */
		/* 820DC218h case   15:*/		regs.LR = 0x820DC21C; return 0x820DA0D8;
		/* 820DC218h case   15:*/		return 0x820DC21C;
		  /* 820DC21Ch */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820DC21Ch case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC21Ch case   16:*/		return 0x820DC220;
		  /* 820DC220h */ case   17:  		/* bc 12, CR0_LT, 2000 */
		/* 820DC220h case   17:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC220h case   17:*/		return 0x820DC224;
		  /* 820DC224h */ case   18:  		/* lwz R11, <#[R31]> */
		/* 820DC224h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC224h case   18:*/		return 0x820DC228;
		  /* 820DC228h */ case   19:  		/* addi R4, R1, 128 */
		/* 820DC228h case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820DC228h case   19:*/		return 0x820DC22C;
		  /* 820DC22Ch */ case   20:  		/* mr R3, R31 */
		/* 820DC22Ch case   20:*/		regs.R3 = regs.R31;
		/* 820DC22Ch case   20:*/		return 0x820DC230;
		  /* 820DC230h */ case   21:  		/* lwz R11, <#[R11 + 508]> */
		/* 820DC230h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001FC) );
		/* 820DC230h case   21:*/		return 0x820DC234;
		  /* 820DC234h */ case   22:  		/* mtspr CTR, R11 */
		/* 820DC234h case   22:*/		regs.CTR = regs.R11;
		/* 820DC234h case   22:*/		return 0x820DC238;
		  /* 820DC238h */ case   23:  		/* bcctrl 20, CR0_LT */
		/* 820DC238h case   23:*/		if ( 1 ) { regs.LR = 0x820DC23C; return (uint32)regs.CTR; }
		/* 820DC238h case   23:*/		return 0x820DC23C;
		  /* 820DC23Ch */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820DC23Ch case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC23Ch case   24:*/		return 0x820DC240;
		  /* 820DC240h */ case   25:  		/* bc 12, CR0_LT, 1968 */
		/* 820DC240h case   25:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC240h case   25:*/		return 0x820DC244;
		  /* 820DC244h */ case   26:  		/* mr R4, R24 */
		/* 820DC244h case   26:*/		regs.R4 = regs.R24;
		/* 820DC244h case   26:*/		return 0x820DC248;
		  /* 820DC248h */ case   27:  		/* mr R3, R31 */
		/* 820DC248h case   27:*/		regs.R3 = regs.R31;
		/* 820DC248h case   27:*/		return 0x820DC24C;
		  /* 820DC24Ch */ case   28:  		/* bl -8564 */
		/* 820DC24Ch case   28:*/		regs.LR = 0x820DC250; return 0x820DA0D8;
		/* 820DC24Ch case   28:*/		return 0x820DC250;
		  /* 820DC250h */ case   29:  		/* cmpwi CR0, R3, 0 */
		/* 820DC250h case   29:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC250h case   29:*/		return 0x820DC254;
		  /* 820DC254h */ case   30:  		/* bc 12, CR0_LT, 1948 */
		/* 820DC254h case   30:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC254h case   30:*/		return 0x820DC258;
		  /* 820DC258h */ case   31:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC258h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC258h case   31:*/		return 0x820DC25C;
		  /* 820DC25Ch */ case   32:  		/* addi R30, R30, 1 */
		/* 820DC25Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC25Ch case   32:*/		return 0x820DC260;
		  /* 820DC260h */ case   33:  		/* cmplw CR6, R30, R11 */
		/* 820DC260h case   33:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC260h case   33:*/		return 0x820DC264;
		  /* 820DC264h */ case   34:  		/* bc 12, CR6_LT, -124 */
		/* 820DC264h case   34:*/		if ( regs.CR[6].lt ) { return 0x820DC1E8;  }
		/* 820DC264h case   34:*/		return 0x820DC268;
	}
	return 0x820DC268;
} // Block from 820DC1DCh-820DC268h (35 instructions)

//////////////////////////////////////////////////////
// Block at 820DC268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC268);
		  /* 820DC268h */ case    0:  		/* mr R3, R31 */
		/* 820DC268h case    0:*/		regs.R3 = regs.R31;
		/* 820DC268h case    0:*/		return 0x820DC26C;
		  /* 820DC26Ch */ case    1:  		/* bl -8380 */
		/* 820DC26Ch case    1:*/		regs.LR = 0x820DC270; return 0x820DA1B0;
		/* 820DC26Ch case    1:*/		return 0x820DC270;
		  /* 820DC270h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DC270h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC270h case    2:*/		return 0x820DC274;
		  /* 820DC274h */ case    3:  		/* bc 12, CR0_LT, 1916 */
		/* 820DC274h case    3:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC274h case    3:*/		return 0x820DC278;
		  /* 820DC278h */ case    4:  		/* mr R4, R20 */
		/* 820DC278h case    4:*/		regs.R4 = regs.R20;
		/* 820DC278h case    4:*/		return 0x820DC27C;
		  /* 820DC27Ch */ case    5:  		/* mr R3, R31 */
		/* 820DC27Ch case    5:*/		regs.R3 = regs.R31;
		/* 820DC27Ch case    5:*/		return 0x820DC280;
		  /* 820DC280h */ case    6:  		/* bl -8616 */
		/* 820DC280h case    6:*/		regs.LR = 0x820DC284; return 0x820DA0D8;
		/* 820DC280h case    6:*/		return 0x820DC284;
		  /* 820DC284h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DC284h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC284h case    7:*/		return 0x820DC288;
		  /* 820DC288h */ case    8:  		/* bc 12, CR0_LT, 1896 */
		/* 820DC288h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC288h case    8:*/		return 0x820DC28C;
		  /* 820DC28Ch */ case    9:  		/* lwz R11, <#[R31]> */
		/* 820DC28Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC28Ch case    9:*/		return 0x820DC290;
		  /* 820DC290h */ case   10:  		/* mr R3, R31 */
		/* 820DC290h case   10:*/		regs.R3 = regs.R31;
		/* 820DC290h case   10:*/		return 0x820DC294;
		  /* 820DC294h */ case   11:  		/* lwz R11, <#[R11 + 392]> */
		/* 820DC294h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000188) );
		/* 820DC294h case   11:*/		return 0x820DC298;
		  /* 820DC298h */ case   12:  		/* mtspr CTR, R11 */
		/* 820DC298h case   12:*/		regs.CTR = regs.R11;
		/* 820DC298h case   12:*/		return 0x820DC29C;
		  /* 820DC29Ch */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 820DC29Ch case   13:*/		if ( 1 ) { regs.LR = 0x820DC2A0; return (uint32)regs.CTR; }
		/* 820DC29Ch case   13:*/		return 0x820DC2A0;
		  /* 820DC2A0h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820DC2A0h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC2A0h case   14:*/		return 0x820DC2A4;
		  /* 820DC2A4h */ case   15:  		/* bc 12, CR0_LT, 1868 */
		/* 820DC2A4h case   15:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC2A4h case   15:*/		return 0x820DC2A8;
		  /* 820DC2A8h */ case   16:  		/* mr R4, R24 */
		/* 820DC2A8h case   16:*/		regs.R4 = regs.R24;
		/* 820DC2A8h case   16:*/		return 0x820DC2AC;
		  /* 820DC2ACh */ case   17:  		/* mr R3, R31 */
		/* 820DC2ACh case   17:*/		regs.R3 = regs.R31;
		/* 820DC2ACh case   17:*/		return 0x820DC2B0;
		  /* 820DC2B0h */ case   18:  		/* bl -8664 */
		/* 820DC2B0h case   18:*/		regs.LR = 0x820DC2B4; return 0x820DA0D8;
		/* 820DC2B0h case   18:*/		return 0x820DC2B4;
		  /* 820DC2B4h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820DC2B4h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC2B4h case   19:*/		return 0x820DC2B8;
		  /* 820DC2B8h */ case   20:  		/* bc 12, CR0_LT, 1848 */
		/* 820DC2B8h case   20:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC2B8h case   20:*/		return 0x820DC2BC;
		  /* 820DC2BCh */ case   21:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC2BCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC2BCh case   21:*/		return 0x820DC2C0;
		  /* 820DC2C0h */ case   22:  		/* li R30, 0 */
		/* 820DC2C0h case   22:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC2C0h case   22:*/		return 0x820DC2C4;
		  /* 820DC2C4h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 820DC2C4h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC2C4h case   23:*/		return 0x820DC2C8;
		  /* 820DC2C8h */ case   24:  		/* bc 4, CR6_GT, 172 */
		/* 820DC2C8h case   24:*/		if ( !regs.CR[6].gt ) { return 0x820DC374;  }
		/* 820DC2C8h case   24:*/		return 0x820DC2CC;
		  /* 820DC2CCh */ case   25:  		/* mr R3, R31 */
		/* 820DC2CCh case   25:*/		regs.R3 = regs.R31;
		/* 820DC2CCh case   25:*/		return 0x820DC2D0;
		  /* 820DC2D0h */ case   26:  		/* bl -8480 */
		/* 820DC2D0h case   26:*/		regs.LR = 0x820DC2D4; return 0x820DA1B0;
		/* 820DC2D0h case   26:*/		return 0x820DC2D4;
		  /* 820DC2D4h */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 820DC2D4h case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC2D4h case   27:*/		return 0x820DC2D8;
		  /* 820DC2D8h */ case   28:  		/* bc 12, CR0_LT, 1816 */
		/* 820DC2D8h case   28:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC2D8h case   28:*/		return 0x820DC2DC;
		  /* 820DC2DCh */ case   29:  		/* mr R7, R30 */
		/* 820DC2DCh case   29:*/		regs.R7 = regs.R30;
		/* 820DC2DCh case   29:*/		return 0x820DC2E0;
		  /* 820DC2E0h */ case   30:  		/* mr R6, R30 */
		/* 820DC2E0h case   30:*/		regs.R6 = regs.R30;
		/* 820DC2E0h case   30:*/		return 0x820DC2E4;
		  /* 820DC2E4h */ case   31:  		/* mr R5, R27 */
		/* 820DC2E4h case   31:*/		regs.R5 = regs.R27;
		/* 820DC2E4h case   31:*/		return 0x820DC2E8;
		  /* 820DC2E8h */ case   32:  		/* li R4, 32 */
		/* 820DC2E8h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC2E8h case   32:*/		return 0x820DC2EC;
		  /* 820DC2ECh */ case   33:  		/* addi R3, R1, 192 */
		/* 820DC2ECh case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DC2ECh case   33:*/		return 0x820DC2F0;
		  /* 820DC2F0h */ case   34:  		/* bl -236720 */
		/* 820DC2F0h case   34:*/		regs.LR = 0x820DC2F4; return 0x820A2640;
		/* 820DC2F0h case   34:*/		return 0x820DC2F4;
		  /* 820DC2F4h */ case   35:  		/* mr R5, R26 */
		/* 820DC2F4h case   35:*/		regs.R5 = regs.R26;
		/* 820DC2F4h case   35:*/		return 0x820DC2F8;
		  /* 820DC2F8h */ case   36:  		/* mr R6, R30 */
		/* 820DC2F8h case   36:*/		regs.R6 = regs.R30;
		/* 820DC2F8h case   36:*/		return 0x820DC2FC;
		  /* 820DC2FCh */ case   37:  		/* li R4, 32 */
		/* 820DC2FCh case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC2FCh case   37:*/		return 0x820DC300;
		  /* 820DC300h */ case   38:  		/* addi R3, R1, 128 */
		/* 820DC300h case   38:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC300h case   38:*/		return 0x820DC304;
		  /* 820DC304h */ case   39:  		/* bl -236740 */
		/* 820DC304h case   39:*/		regs.LR = 0x820DC308; return 0x820A2640;
		/* 820DC304h case   39:*/		return 0x820DC308;
		  /* 820DC308h */ case   40:  		/* mr R4, R25 */
		/* 820DC308h case   40:*/		regs.R4 = regs.R25;
		/* 820DC308h case   40:*/		return 0x820DC30C;
		  /* 820DC30Ch */ case   41:  		/* addi R5, R1, 128 */
		/* 820DC30Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC30Ch case   41:*/		return 0x820DC310;
		  /* 820DC310h */ case   42:  		/* mr R3, R31 */
		/* 820DC310h case   42:*/		regs.R3 = regs.R31;
		/* 820DC310h case   42:*/		return 0x820DC314;
		  /* 820DC314h */ case   43:  		/* bl -8764 */
		/* 820DC314h case   43:*/		regs.LR = 0x820DC318; return 0x820DA0D8;
		/* 820DC314h case   43:*/		return 0x820DC318;
		  /* 820DC318h */ case   44:  		/* cmpwi CR0, R3, 0 */
		/* 820DC318h case   44:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC318h case   44:*/		return 0x820DC31C;
		  /* 820DC31Ch */ case   45:  		/* bc 12, CR0_LT, 1748 */
		/* 820DC31Ch case   45:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC31Ch case   45:*/		return 0x820DC320;
		  /* 820DC320h */ case   46:  		/* lwz R11, <#[R31]> */
		/* 820DC320h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC320h case   46:*/		return 0x820DC324;
		  /* 820DC324h */ case   47:  		/* li R8, 1 */
		/* 820DC324h case   47:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820DC324h case   47:*/		return 0x820DC328;
		  /* 820DC328h */ case   48:  		/* li R7, 1 */
		/* 820DC328h case   48:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820DC328h case   48:*/		return 0x820DC32C;
		  /* 820DC32Ch */ case   49:  		/* li R6, 1 */
		/* 820DC32Ch case   49:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820DC32Ch case   49:*/		return 0x820DC330;
		  /* 820DC330h */ case   50:  		/* li R5, 1 */
		/* 820DC330h case   50:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820DC330h case   50:*/		return 0x820DC334;
		  /* 820DC334h */ case   51:  		/* addi R4, R1, 192 */
		/* 820DC334h case   51:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 820DC334h case   51:*/		return 0x820DC338;
		  /* 820DC338h */ case   52:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DC338h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DC338h case   52:*/		return 0x820DC33C;
		  /* 820DC33Ch */ case   53:  		/* mr R3, R31 */
		/* 820DC33Ch case   53:*/		regs.R3 = regs.R31;
		/* 820DC33Ch case   53:*/		return 0x820DC340;
		  /* 820DC340h */ case   54:  		/* mtspr CTR, R11 */
		/* 820DC340h case   54:*/		regs.CTR = regs.R11;
		/* 820DC340h case   54:*/		return 0x820DC344;
		  /* 820DC344h */ case   55:  		/* bcctrl 20, CR0_LT */
		/* 820DC344h case   55:*/		if ( 1 ) { regs.LR = 0x820DC348; return (uint32)regs.CTR; }
		/* 820DC344h case   55:*/		return 0x820DC348;
		  /* 820DC348h */ case   56:  		/* cmpwi CR0, R3, 0 */
		/* 820DC348h case   56:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC348h case   56:*/		return 0x820DC34C;
		  /* 820DC34Ch */ case   57:  		/* bc 12, CR0_LT, 1700 */
		/* 820DC34Ch case   57:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC34Ch case   57:*/		return 0x820DC350;
		  /* 820DC350h */ case   58:  		/* mr R4, R24 */
		/* 820DC350h case   58:*/		regs.R4 = regs.R24;
		/* 820DC350h case   58:*/		return 0x820DC354;
		  /* 820DC354h */ case   59:  		/* mr R3, R31 */
		/* 820DC354h case   59:*/		regs.R3 = regs.R31;
		/* 820DC354h case   59:*/		return 0x820DC358;
		  /* 820DC358h */ case   60:  		/* bl -8832 */
		/* 820DC358h case   60:*/		regs.LR = 0x820DC35C; return 0x820DA0D8;
		/* 820DC358h case   60:*/		return 0x820DC35C;
		  /* 820DC35Ch */ case   61:  		/* cmpwi CR0, R3, 0 */
		/* 820DC35Ch case   61:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC35Ch case   61:*/		return 0x820DC360;
		  /* 820DC360h */ case   62:  		/* bc 12, CR0_LT, 1680 */
		/* 820DC360h case   62:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC360h case   62:*/		return 0x820DC364;
		  /* 820DC364h */ case   63:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC364h case   63:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC364h case   63:*/		return 0x820DC368;
		  /* 820DC368h */ case   64:  		/* addi R30, R30, 1 */
		/* 820DC368h case   64:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC368h case   64:*/		return 0x820DC36C;
		  /* 820DC36Ch */ case   65:  		/* cmplw CR6, R30, R11 */
		/* 820DC36Ch case   65:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC36Ch case   65:*/		return 0x820DC370;
	}
	return 0x820DC370;
} // Block from 820DC268h-820DC370h (66 instructions)

//////////////////////////////////////////////////////
// Block at 820DC370h
// Function '?EmitLITFunction@C30SWProgram@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC370);
		  /* 820DC370h */ case    0:  		/* bc 12, CR6_LT, -164 */
		/* 820DC370h case    0:*/		if ( regs.CR[6].lt ) { return 0x820DC2CC;  }
		/* 820DC370h case    0:*/		return 0x820DC374;
	}
	return 0x820DC374;
} // Block from 820DC370h-820DC374h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DC374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC374);
		  /* 820DC374h */ case    0:  		/* mr R5, R26 */
		/* 820DC374h case    0:*/		regs.R5 = regs.R26;
		/* 820DC374h case    0:*/		return 0x820DC378;
		  /* 820DC378h */ case    1:  		/* li R4, 32 */
		/* 820DC378h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC378h case    1:*/		return 0x820DC37C;
		  /* 820DC37Ch */ case    2:  		/* addi R3, R1, 128 */
		/* 820DC37Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC37Ch case    2:*/		return 0x820DC380;
		  /* 820DC380h */ case    3:  		/* bl -220304 */
		/* 820DC380h case    3:*/		regs.LR = 0x820DC384; return 0x820A66F0;
		/* 820DC380h case    3:*/		return 0x820DC384;
		  /* 820DC384h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 820DC384h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC384h case    4:*/		return 0x820DC388;
		  /* 820DC388h */ case    5:  		/* mr R6, R21 */
		/* 820DC388h case    5:*/		regs.R6 = regs.R21;
		/* 820DC388h case    5:*/		return 0x820DC38C;
		  /* 820DC38Ch */ case    6:  		/* addi R7, R1, 128 */
		/* 820DC38Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DC38Ch case    6:*/		return 0x820DC390;
		  /* 820DC390h */ case    7:  		/* addi R5, R1, 128 */
		/* 820DC390h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC390h case    7:*/		return 0x820DC394;
		  /* 820DC394h */ case    8:  		/* lis R4, 29600 */
		/* 820DC394h case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0x73A0);
		/* 820DC394h case    8:*/		return 0x820DC398;
		  /* 820DC398h */ case    9:  		/* lwz R11, <#[R11 + 484]> */
		/* 820DC398h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001E4) );
		/* 820DC398h case    9:*/		return 0x820DC39C;
		  /* 820DC39Ch */ case   10:  		/* mr R3, R31 */
		/* 820DC39Ch case   10:*/		regs.R3 = regs.R31;
		/* 820DC39Ch case   10:*/		return 0x820DC3A0;
		  /* 820DC3A0h */ case   11:  		/* mtspr CTR, R11 */
		/* 820DC3A0h case   11:*/		regs.CTR = regs.R11;
		/* 820DC3A0h case   11:*/		return 0x820DC3A4;
		  /* 820DC3A4h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 820DC3A4h case   12:*/		if ( 1 ) { regs.LR = 0x820DC3A8; return (uint32)regs.CTR; }
		/* 820DC3A4h case   12:*/		return 0x820DC3A8;
		  /* 820DC3A8h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DC3A8h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC3A8h case   13:*/		return 0x820DC3AC;
		  /* 820DC3ACh */ case   14:  		/* bc 12, CR0_LT, 1604 */
		/* 820DC3ACh case   14:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC3ACh case   14:*/		return 0x820DC3B0;
		  /* 820DC3B0h */ case   15:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC3B0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC3B0h case   15:*/		return 0x820DC3B4;
		  /* 820DC3B4h */ case   16:  		/* lis R10, -32254 */
		/* 820DC3B4h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DC3B4h case   16:*/		return 0x820DC3B8;
		  /* 820DC3B8h */ case   17:  		/* li R30, 0 */
		/* 820DC3B8h case   17:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC3B8h case   17:*/		return 0x820DC3BC;
		  /* 820DC3BCh */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 820DC3BCh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC3BCh case   18:*/		return 0x820DC3C0;
		  /* 820DC3C0h */ case   19:  		/* addi R29, R10, -30716 */
		/* 820DC3C0h case   19:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFF8804);
		/* 820DC3C0h case   19:*/		return 0x820DC3C4;
		  /* 820DC3C4h */ case   20:  		/* bc 12, CR6_EQ, 160 */
		/* 820DC3C4h case   20:*/		if ( regs.CR[6].eq ) { return 0x820DC464;  }
		/* 820DC3C4h case   20:*/		return 0x820DC3C8;
		  /* 820DC3C8h */ case   21:  		/* mr R3, R31 */
		/* 820DC3C8h case   21:*/		regs.R3 = regs.R31;
		/* 820DC3C8h case   21:*/		return 0x820DC3CC;
		  /* 820DC3CCh */ case   22:  		/* bl -8732 */
		/* 820DC3CCh case   22:*/		regs.LR = 0x820DC3D0; return 0x820DA1B0;
		/* 820DC3CCh case   22:*/		return 0x820DC3D0;
		  /* 820DC3D0h */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 820DC3D0h case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC3D0h case   23:*/		return 0x820DC3D4;
		  /* 820DC3D4h */ case   24:  		/* bc 12, CR0_LT, 1564 */
		/* 820DC3D4h case   24:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC3D4h case   24:*/		return 0x820DC3D8;
		  /* 820DC3D8h */ case   25:  		/* mr R7, R30 */
		/* 820DC3D8h case   25:*/		regs.R7 = regs.R30;
		/* 820DC3D8h case   25:*/		return 0x820DC3DC;
		  /* 820DC3DCh */ case   26:  		/* mr R6, R30 */
		/* 820DC3DCh case   26:*/		regs.R6 = regs.R30;
		/* 820DC3DCh case   26:*/		return 0x820DC3E0;
		  /* 820DC3E0h */ case   27:  		/* mr R5, R27 */
		/* 820DC3E0h case   27:*/		regs.R5 = regs.R27;
		/* 820DC3E0h case   27:*/		return 0x820DC3E4;
		  /* 820DC3E4h */ case   28:  		/* li R4, 32 */
		/* 820DC3E4h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC3E4h case   28:*/		return 0x820DC3E8;
		  /* 820DC3E8h */ case   29:  		/* addi R3, R1, 192 */
		/* 820DC3E8h case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DC3E8h case   29:*/		return 0x820DC3EC;
		  /* 820DC3ECh */ case   30:  		/* bl -236972 */
		/* 820DC3ECh case   30:*/		regs.LR = 0x820DC3F0; return 0x820A2640;
		/* 820DC3ECh case   30:*/		return 0x820DC3F0;
		  /* 820DC3F0h */ case   31:  		/* mr R5, R29 */
		/* 820DC3F0h case   31:*/		regs.R5 = regs.R29;
		/* 820DC3F0h case   31:*/		return 0x820DC3F4;
		  /* 820DC3F4h */ case   32:  		/* mr R6, R30 */
		/* 820DC3F4h case   32:*/		regs.R6 = regs.R30;
		/* 820DC3F4h case   32:*/		return 0x820DC3F8;
		  /* 820DC3F8h */ case   33:  		/* li R4, 32 */
		/* 820DC3F8h case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC3F8h case   33:*/		return 0x820DC3FC;
		  /* 820DC3FCh */ case   34:  		/* addi R3, R1, 160 */
		/* 820DC3FCh case   34:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DC3FCh case   34:*/		return 0x820DC400;
		  /* 820DC400h */ case   35:  		/* bl -236992 */
		/* 820DC400h case   35:*/		regs.LR = 0x820DC404; return 0x820A2640;
		/* 820DC400h case   35:*/		return 0x820DC404;
		  /* 820DC404h */ case   36:  		/* mr R4, R25 */
		/* 820DC404h case   36:*/		regs.R4 = regs.R25;
		/* 820DC404h case   36:*/		return 0x820DC408;
		  /* 820DC408h */ case   37:  		/* addi R5, R1, 160 */
		/* 820DC408h case   37:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DC408h case   37:*/		return 0x820DC40C;
		  /* 820DC40Ch */ case   38:  		/* mr R3, R31 */
		/* 820DC40Ch case   38:*/		regs.R3 = regs.R31;
		/* 820DC40Ch case   38:*/		return 0x820DC410;
		  /* 820DC410h */ case   39:  		/* bl -9016 */
		/* 820DC410h case   39:*/		regs.LR = 0x820DC414; return 0x820DA0D8;
		/* 820DC410h case   39:*/		return 0x820DC414;
		  /* 820DC414h */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 820DC414h case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC414h case   40:*/		return 0x820DC418;
		  /* 820DC418h */ case   41:  		/* bc 12, CR0_LT, 1496 */
		/* 820DC418h case   41:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC418h case   41:*/		return 0x820DC41C;
		  /* 820DC41Ch */ case   42:  		/* lwz R11, <#[R31]> */
		/* 820DC41Ch case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC41Ch case   42:*/		return 0x820DC420;
		  /* 820DC420h */ case   43:  		/* li R5, 1 */
		/* 820DC420h case   43:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820DC420h case   43:*/		return 0x820DC424;
		  /* 820DC424h */ case   44:  		/* addi R4, R1, 192 */
		/* 820DC424h case   44:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 820DC424h case   44:*/		return 0x820DC428;
		  /* 820DC428h */ case   45:  		/* mr R3, R31 */
		/* 820DC428h case   45:*/		regs.R3 = regs.R31;
		/* 820DC428h case   45:*/		return 0x820DC42C;
		  /* 820DC42Ch */ case   46:  		/* lwz R11, <#[R11 + 476]> */
		/* 820DC42Ch case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001DC) );
		/* 820DC42Ch case   46:*/		return 0x820DC430;
		  /* 820DC430h */ case   47:  		/* mtspr CTR, R11 */
		/* 820DC430h case   47:*/		regs.CTR = regs.R11;
		/* 820DC430h case   47:*/		return 0x820DC434;
		  /* 820DC434h */ case   48:  		/* bcctrl 20, CR0_LT */
		/* 820DC434h case   48:*/		if ( 1 ) { regs.LR = 0x820DC438; return (uint32)regs.CTR; }
		/* 820DC434h case   48:*/		return 0x820DC438;
		  /* 820DC438h */ case   49:  		/* cmpwi CR0, R3, 0 */
		/* 820DC438h case   49:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC438h case   49:*/		return 0x820DC43C;
		  /* 820DC43Ch */ case   50:  		/* bc 12, CR0_LT, 1460 */
		/* 820DC43Ch case   50:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC43Ch case   50:*/		return 0x820DC440;
		  /* 820DC440h */ case   51:  		/* mr R4, R24 */
		/* 820DC440h case   51:*/		regs.R4 = regs.R24;
		/* 820DC440h case   51:*/		return 0x820DC444;
		  /* 820DC444h */ case   52:  		/* mr R3, R31 */
		/* 820DC444h case   52:*/		regs.R3 = regs.R31;
		/* 820DC444h case   52:*/		return 0x820DC448;
		  /* 820DC448h */ case   53:  		/* bl -9072 */
		/* 820DC448h case   53:*/		regs.LR = 0x820DC44C; return 0x820DA0D8;
		/* 820DC448h case   53:*/		return 0x820DC44C;
		  /* 820DC44Ch */ case   54:  		/* cmpwi CR0, R3, 0 */
		/* 820DC44Ch case   54:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC44Ch case   54:*/		return 0x820DC450;
		  /* 820DC450h */ case   55:  		/* bc 12, CR0_LT, 1440 */
		/* 820DC450h case   55:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC450h case   55:*/		return 0x820DC454;
		  /* 820DC454h */ case   56:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC454h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC454h case   56:*/		return 0x820DC458;
		  /* 820DC458h */ case   57:  		/* addi R30, R30, 1 */
		/* 820DC458h case   57:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC458h case   57:*/		return 0x820DC45C;
		  /* 820DC45Ch */ case   58:  		/* cmplw CR6, R30, R11 */
		/* 820DC45Ch case   58:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC45Ch case   58:*/		return 0x820DC460;
		  /* 820DC460h */ case   59:  		/* bc 12, CR6_LT, -152 */
		/* 820DC460h case   59:*/		if ( regs.CR[6].lt ) { return 0x820DC3C8;  }
		/* 820DC460h case   59:*/		return 0x820DC464;
	}
	return 0x820DC464;
} // Block from 820DC374h-820DC464h (60 instructions)

//////////////////////////////////////////////////////
// Block at 820DC464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC464);
		  /* 820DC464h */ case    0:  		/* li R30, 0 */
		/* 820DC464h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC464h case    0:*/		return 0x820DC468;
		  /* 820DC468h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DC468h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC468h case    1:*/		return 0x820DC46C;
		  /* 820DC46Ch */ case    2:  		/* bc 12, CR6_EQ, 160 */
		/* 820DC46Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820DC50C;  }
		/* 820DC46Ch case    2:*/		return 0x820DC470;
		  /* 820DC470h */ case    3:  		/* mr R3, R31 */
		/* 820DC470h case    3:*/		regs.R3 = regs.R31;
		/* 820DC470h case    3:*/		return 0x820DC474;
		  /* 820DC474h */ case    4:  		/* bl -8900 */
		/* 820DC474h case    4:*/		regs.LR = 0x820DC478; return 0x820DA1B0;
		/* 820DC474h case    4:*/		return 0x820DC478;
		  /* 820DC478h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DC478h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC478h case    5:*/		return 0x820DC47C;
		  /* 820DC47Ch */ case    6:  		/* bc 12, CR0_LT, 1396 */
		/* 820DC47Ch case    6:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC47Ch case    6:*/		return 0x820DC480;
		  /* 820DC480h */ case    7:  		/* mr R5, R26 */
		/* 820DC480h case    7:*/		regs.R5 = regs.R26;
		/* 820DC480h case    7:*/		return 0x820DC484;
		  /* 820DC484h */ case    8:  		/* mr R6, R30 */
		/* 820DC484h case    8:*/		regs.R6 = regs.R30;
		/* 820DC484h case    8:*/		return 0x820DC488;
		  /* 820DC488h */ case    9:  		/* li R4, 32 */
		/* 820DC488h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC488h case    9:*/		return 0x820DC48C;
		  /* 820DC48Ch */ case   10:  		/* addi R3, R1, 160 */
		/* 820DC48Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DC48Ch case   10:*/		return 0x820DC490;
		  /* 820DC490h */ case   11:  		/* bl -237136 */
		/* 820DC490h case   11:*/		regs.LR = 0x820DC494; return 0x820A2640;
		/* 820DC490h case   11:*/		return 0x820DC494;
		  /* 820DC494h */ case   12:  		/* mr R5, R22 */
		/* 820DC494h case   12:*/		regs.R5 = regs.R22;
		/* 820DC494h case   12:*/		return 0x820DC498;
		  /* 820DC498h */ case   13:  		/* mr R6, R30 */
		/* 820DC498h case   13:*/		regs.R6 = regs.R30;
		/* 820DC498h case   13:*/		return 0x820DC49C;
		  /* 820DC49Ch */ case   14:  		/* li R4, 32 */
		/* 820DC49Ch case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC49Ch case   14:*/		return 0x820DC4A0;
		  /* 820DC4A0h */ case   15:  		/* addi R3, R1, 128 */
		/* 820DC4A0h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC4A0h case   15:*/		return 0x820DC4A4;
		  /* 820DC4A4h */ case   16:  		/* bl -237156 */
		/* 820DC4A4h case   16:*/		regs.LR = 0x820DC4A8; return 0x820A2640;
		/* 820DC4A4h case   16:*/		return 0x820DC4A8;
		  /* 820DC4A8h */ case   17:  		/* mr R4, R25 */
		/* 820DC4A8h case   17:*/		regs.R4 = regs.R25;
		/* 820DC4A8h case   17:*/		return 0x820DC4AC;
		  /* 820DC4ACh */ case   18:  		/* addi R5, R1, 128 */
		/* 820DC4ACh case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC4ACh case   18:*/		return 0x820DC4B0;
		  /* 820DC4B0h */ case   19:  		/* mr R3, R31 */
		/* 820DC4B0h case   19:*/		regs.R3 = regs.R31;
		/* 820DC4B0h case   19:*/		return 0x820DC4B4;
		  /* 820DC4B4h */ case   20:  		/* bl -9180 */
		/* 820DC4B4h case   20:*/		regs.LR = 0x820DC4B8; return 0x820DA0D8;
		/* 820DC4B4h case   20:*/		return 0x820DC4B8;
		  /* 820DC4B8h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820DC4B8h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC4B8h case   21:*/		return 0x820DC4BC;
		  /* 820DC4BCh */ case   22:  		/* bc 12, CR0_LT, 1332 */
		/* 820DC4BCh case   22:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC4BCh case   22:*/		return 0x820DC4C0;
		  /* 820DC4C0h */ case   23:  		/* lwz R11, <#[R31]> */
		/* 820DC4C0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC4C0h case   23:*/		return 0x820DC4C4;
		  /* 820DC4C4h */ case   24:  		/* mr R4, R21 */
		/* 820DC4C4h case   24:*/		regs.R4 = regs.R21;
		/* 820DC4C4h case   24:*/		return 0x820DC4C8;
		  /* 820DC4C8h */ case   25:  		/* addi R6, R1, 160 */
		/* 820DC4C8h case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DC4C8h case   25:*/		return 0x820DC4CC;
		  /* 820DC4CCh */ case   26:  		/* addi R5, R1, 128 */
		/* 820DC4CCh case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC4CCh case   26:*/		return 0x820DC4D0;
		  /* 820DC4D0h */ case   27:  		/* mr R3, R31 */
		/* 820DC4D0h case   27:*/		regs.R3 = regs.R31;
		/* 820DC4D0h case   27:*/		return 0x820DC4D4;
		  /* 820DC4D4h */ case   28:  		/* lwz R11, <#[R11 + 400]> */
		/* 820DC4D4h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820DC4D4h case   28:*/		return 0x820DC4D8;
		  /* 820DC4D8h */ case   29:  		/* mtspr CTR, R11 */
		/* 820DC4D8h case   29:*/		regs.CTR = regs.R11;
		/* 820DC4D8h case   29:*/		return 0x820DC4DC;
		  /* 820DC4DCh */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 820DC4DCh case   30:*/		if ( 1 ) { regs.LR = 0x820DC4E0; return (uint32)regs.CTR; }
		/* 820DC4DCh case   30:*/		return 0x820DC4E0;
		  /* 820DC4E0h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820DC4E0h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC4E0h case   31:*/		return 0x820DC4E4;
		  /* 820DC4E4h */ case   32:  		/* bc 12, CR0_LT, 1292 */
		/* 820DC4E4h case   32:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC4E4h case   32:*/		return 0x820DC4E8;
		  /* 820DC4E8h */ case   33:  		/* mr R4, R24 */
		/* 820DC4E8h case   33:*/		regs.R4 = regs.R24;
		/* 820DC4E8h case   33:*/		return 0x820DC4EC;
		  /* 820DC4ECh */ case   34:  		/* mr R3, R31 */
		/* 820DC4ECh case   34:*/		regs.R3 = regs.R31;
		/* 820DC4ECh case   34:*/		return 0x820DC4F0;
		  /* 820DC4F0h */ case   35:  		/* bl -9240 */
		/* 820DC4F0h case   35:*/		regs.LR = 0x820DC4F4; return 0x820DA0D8;
		/* 820DC4F0h case   35:*/		return 0x820DC4F4;
		  /* 820DC4F4h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820DC4F4h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC4F4h case   36:*/		return 0x820DC4F8;
		  /* 820DC4F8h */ case   37:  		/* bc 12, CR0_LT, 1272 */
		/* 820DC4F8h case   37:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC4F8h case   37:*/		return 0x820DC4FC;
		  /* 820DC4FCh */ case   38:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC4FCh case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC4FCh case   38:*/		return 0x820DC500;
		  /* 820DC500h */ case   39:  		/* addi R30, R30, 1 */
		/* 820DC500h case   39:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC500h case   39:*/		return 0x820DC504;
		  /* 820DC504h */ case   40:  		/* cmplw CR6, R30, R11 */
		/* 820DC504h case   40:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC504h case   40:*/		return 0x820DC508;
		  /* 820DC508h */ case   41:  		/* bc 12, CR6_LT, -152 */
		/* 820DC508h case   41:*/		if ( regs.CR[6].lt ) { return 0x820DC470;  }
		/* 820DC508h case   41:*/		return 0x820DC50C;
	}
	return 0x820DC50C;
} // Block from 820DC464h-820DC50Ch (42 instructions)

//////////////////////////////////////////////////////
// Block at 820DC50Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC50C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC50C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC50C);
		  /* 820DC50Ch */ case    0:  		/* mr R3, R31 */
		/* 820DC50Ch case    0:*/		regs.R3 = regs.R31;
		/* 820DC50Ch case    0:*/		return 0x820DC510;
		  /* 820DC510h */ case    1:  		/* bl -9056 */
		/* 820DC510h case    1:*/		regs.LR = 0x820DC514; return 0x820DA1B0;
		/* 820DC510h case    1:*/		return 0x820DC514;
		  /* 820DC514h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DC514h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC514h case    2:*/		return 0x820DC518;
		  /* 820DC518h */ case    3:  		/* bc 12, CR0_LT, 1240 */
		/* 820DC518h case    3:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC518h case    3:*/		return 0x820DC51C;
		  /* 820DC51Ch */ case    4:  		/* mr R4, R28 */
		/* 820DC51Ch case    4:*/		regs.R4 = regs.R28;
		/* 820DC51Ch case    4:*/		return 0x820DC520;
		  /* 820DC520h */ case    5:  		/* mr R3, R31 */
		/* 820DC520h case    5:*/		regs.R3 = regs.R31;
		/* 820DC520h case    5:*/		return 0x820DC524;
		  /* 820DC524h */ case    6:  		/* bl -9292 */
		/* 820DC524h case    6:*/		regs.LR = 0x820DC528; return 0x820DA0D8;
		/* 820DC524h case    6:*/		return 0x820DC528;
		  /* 820DC528h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DC528h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC528h case    7:*/		return 0x820DC52C;
		  /* 820DC52Ch */ case    8:  		/* bc 12, CR0_LT, 1220 */
		/* 820DC52Ch case    8:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC52Ch case    8:*/		return 0x820DC530;
		  /* 820DC530h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 820DC530h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC530h case    9:*/		return 0x820DC534;
		  /* 820DC534h */ case   10:  		/* mr R4, R19 */
		/* 820DC534h case   10:*/		regs.R4 = regs.R19;
		/* 820DC534h case   10:*/		return 0x820DC538;
		  /* 820DC538h */ case   11:  		/* li R8, 0 */
		/* 820DC538h case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820DC538h case   11:*/		return 0x820DC53C;
		  /* 820DC53Ch */ case   12:  		/* li R7, 0 */
		/* 820DC53Ch case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DC53Ch case   12:*/		return 0x820DC540;
		  /* 820DC540h */ case   13:  		/* li R6, 1 */
		/* 820DC540h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820DC540h case   13:*/		return 0x820DC544;
		  /* 820DC544h */ case   14:  		/* li R5, 0 */
		/* 820DC544h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820DC544h case   14:*/		return 0x820DC548;
		  /* 820DC548h */ case   15:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DC548h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DC548h case   15:*/		return 0x820DC54C;
		  /* 820DC54Ch */ case   16:  		/* mr R3, R31 */
		/* 820DC54Ch case   16:*/		regs.R3 = regs.R31;
		/* 820DC54Ch case   16:*/		return 0x820DC550;
		  /* 820DC550h */ case   17:  		/* mtspr CTR, R11 */
		/* 820DC550h case   17:*/		regs.CTR = regs.R11;
		/* 820DC550h case   17:*/		return 0x820DC554;
		  /* 820DC554h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 820DC554h case   18:*/		if ( 1 ) { regs.LR = 0x820DC558; return (uint32)regs.CTR; }
		/* 820DC554h case   18:*/		return 0x820DC558;
		  /* 820DC558h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820DC558h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC558h case   19:*/		return 0x820DC55C;
		  /* 820DC55Ch */ case   20:  		/* bc 12, CR0_LT, 1172 */
		/* 820DC55Ch case   20:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC55Ch case   20:*/		return 0x820DC560;
		  /* 820DC560h */ case   21:  		/* mr R4, R24 */
		/* 820DC560h case   21:*/		regs.R4 = regs.R24;
		/* 820DC560h case   21:*/		return 0x820DC564;
		  /* 820DC564h */ case   22:  		/* mr R3, R31 */
		/* 820DC564h case   22:*/		regs.R3 = regs.R31;
		/* 820DC564h case   22:*/		return 0x820DC568;
		  /* 820DC568h */ case   23:  		/* bl -9360 */
		/* 820DC568h case   23:*/		regs.LR = 0x820DC56C; return 0x820DA0D8;
		/* 820DC568h case   23:*/		return 0x820DC56C;
		  /* 820DC56Ch */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820DC56Ch case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC56Ch case   24:*/		return 0x820DC570;
		  /* 820DC570h */ case   25:  		/* bc 12, CR0_LT, 1152 */
		/* 820DC570h case   25:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC570h case   25:*/		return 0x820DC574;
		  /* 820DC574h */ case   26:  		/* mr R3, R31 */
		/* 820DC574h case   26:*/		regs.R3 = regs.R31;
		/* 820DC574h case   26:*/		return 0x820DC578;
		  /* 820DC578h */ case   27:  		/* bl -9160 */
		/* 820DC578h case   27:*/		regs.LR = 0x820DC57C; return 0x820DA1B0;
		/* 820DC578h case   27:*/		return 0x820DC57C;
		  /* 820DC57Ch */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 820DC57Ch case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC57Ch case   28:*/		return 0x820DC580;
		  /* 820DC580h */ case   29:  		/* bc 12, CR0_LT, 1136 */
		/* 820DC580h case   29:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC580h case   29:*/		return 0x820DC584;
		  /* 820DC584h */ case   30:  		/* lis R11, -32254 */
		/* 820DC584h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DC584h case   30:*/		return 0x820DC588;
		  /* 820DC588h */ case   31:  		/* mr R3, R31 */
		/* 820DC588h case   31:*/		regs.R3 = regs.R31;
		/* 820DC588h case   31:*/		return 0x820DC58C;
		  /* 820DC58Ch */ case   32:  		/* addi R4, R11, -30448 */
		/* 820DC58Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8910);
		/* 820DC58Ch case   32:*/		return 0x820DC590;
		  /* 820DC590h */ case   33:  		/* bl -9400 */
		/* 820DC590h case   33:*/		regs.LR = 0x820DC594; return 0x820DA0D8;
		/* 820DC590h case   33:*/		return 0x820DC594;
		  /* 820DC594h */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 820DC594h case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC594h case   34:*/		return 0x820DC598;
		  /* 820DC598h */ case   35:  		/* bc 12, CR0_LT, 1112 */
		/* 820DC598h case   35:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC598h case   35:*/		return 0x820DC59C;
		  /* 820DC59Ch */ case   36:  		/* lwz R11, <#[R31]> */
		/* 820DC59Ch case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC59Ch case   36:*/		return 0x820DC5A0;
		  /* 820DC5A0h */ case   37:  		/* mr R4, R19 */
		/* 820DC5A0h case   37:*/		regs.R4 = regs.R19;
		/* 820DC5A0h case   37:*/		return 0x820DC5A4;
		  /* 820DC5A4h */ case   38:  		/* li R8, 3 */
		/* 820DC5A4h case   38:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820DC5A4h case   38:*/		return 0x820DC5A8;
		  /* 820DC5A8h */ case   39:  		/* li R7, 3 */
		/* 820DC5A8h case   39:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 820DC5A8h case   39:*/		return 0x820DC5AC;
		  /* 820DC5ACh */ case   40:  		/* li R6, 3 */
		/* 820DC5ACh case   40:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 820DC5ACh case   40:*/		return 0x820DC5B0;
		  /* 820DC5B0h */ case   41:  		/* li R5, 3 */
		/* 820DC5B0h case   41:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820DC5B0h case   41:*/		return 0x820DC5B4;
		  /* 820DC5B4h */ case   42:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DC5B4h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DC5B4h case   42:*/		return 0x820DC5B8;
		  /* 820DC5B8h */ case   43:  		/* mr R3, R31 */
		/* 820DC5B8h case   43:*/		regs.R3 = regs.R31;
		/* 820DC5B8h case   43:*/		return 0x820DC5BC;
		  /* 820DC5BCh */ case   44:  		/* mtspr CTR, R11 */
		/* 820DC5BCh case   44:*/		regs.CTR = regs.R11;
		/* 820DC5BCh case   44:*/		return 0x820DC5C0;
		  /* 820DC5C0h */ case   45:  		/* bcctrl 20, CR0_LT */
		/* 820DC5C0h case   45:*/		if ( 1 ) { regs.LR = 0x820DC5C4; return (uint32)regs.CTR; }
		/* 820DC5C0h case   45:*/		return 0x820DC5C4;
		  /* 820DC5C4h */ case   46:  		/* cmpwi CR0, R3, 0 */
		/* 820DC5C4h case   46:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC5C4h case   46:*/		return 0x820DC5C8;
		  /* 820DC5C8h */ case   47:  		/* bc 12, CR0_LT, 1064 */
		/* 820DC5C8h case   47:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC5C8h case   47:*/		return 0x820DC5CC;
		  /* 820DC5CCh */ case   48:  		/* mr R4, R24 */
		/* 820DC5CCh case   48:*/		regs.R4 = regs.R24;
		/* 820DC5CCh case   48:*/		return 0x820DC5D0;
		  /* 820DC5D0h */ case   49:  		/* mr R3, R31 */
		/* 820DC5D0h case   49:*/		regs.R3 = regs.R31;
		/* 820DC5D0h case   49:*/		return 0x820DC5D4;
		  /* 820DC5D4h */ case   50:  		/* bl -9468 */
		/* 820DC5D4h case   50:*/		regs.LR = 0x820DC5D8; return 0x820DA0D8;
		/* 820DC5D4h case   50:*/		return 0x820DC5D8;
		  /* 820DC5D8h */ case   51:  		/* cmpwi CR0, R3, 0 */
		/* 820DC5D8h case   51:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC5D8h case   51:*/		return 0x820DC5DC;
		  /* 820DC5DCh */ case   52:  		/* bc 12, CR0_LT, 1044 */
		/* 820DC5DCh case   52:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC5DCh case   52:*/		return 0x820DC5E0;
		  /* 820DC5E0h */ case   53:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC5E0h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC5E0h case   53:*/		return 0x820DC5E4;
		  /* 820DC5E4h */ case   54:  		/* li R30, 0 */
		/* 820DC5E4h case   54:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC5E4h case   54:*/		return 0x820DC5E8;
		  /* 820DC5E8h */ case   55:  		/* cmplwi CR6, R11, 0 */
		/* 820DC5E8h case   55:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC5E8h case   55:*/		return 0x820DC5EC;
		  /* 820DC5ECh */ case   56:  		/* bc 4, CR6_GT, 168 */
		/* 820DC5ECh case   56:*/		if ( !regs.CR[6].gt ) { return 0x820DC694;  }
		/* 820DC5ECh case   56:*/		return 0x820DC5F0;
		  /* 820DC5F0h */ case   57:  		/* mr R3, R31 */
		/* 820DC5F0h case   57:*/		regs.R3 = regs.R31;
		/* 820DC5F0h case   57:*/		return 0x820DC5F4;
		  /* 820DC5F4h */ case   58:  		/* bl -9284 */
		/* 820DC5F4h case   58:*/		regs.LR = 0x820DC5F8; return 0x820DA1B0;
		/* 820DC5F4h case   58:*/		return 0x820DC5F8;
		  /* 820DC5F8h */ case   59:  		/* cmpwi CR0, R3, 0 */
		/* 820DC5F8h case   59:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC5F8h case   59:*/		return 0x820DC5FC;
		  /* 820DC5FCh */ case   60:  		/* bc 12, CR0_LT, 1012 */
		/* 820DC5FCh case   60:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC5FCh case   60:*/		return 0x820DC600;
		  /* 820DC600h */ case   61:  		/* mr R5, R29 */
		/* 820DC600h case   61:*/		regs.R5 = regs.R29;
		/* 820DC600h case   61:*/		return 0x820DC604;
		  /* 820DC604h */ case   62:  		/* mr R6, R30 */
		/* 820DC604h case   62:*/		regs.R6 = regs.R30;
		/* 820DC604h case   62:*/		return 0x820DC608;
		  /* 820DC608h */ case   63:  		/* li R4, 32 */
		/* 820DC608h case   63:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC608h case   63:*/		return 0x820DC60C;
		  /* 820DC60Ch */ case   64:  		/* addi R3, R1, 160 */
		/* 820DC60Ch case   64:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DC60Ch case   64:*/		return 0x820DC610;
		  /* 820DC610h */ case   65:  		/* bl -237520 */
		/* 820DC610h case   65:*/		regs.LR = 0x820DC614; return 0x820A2640;
		/* 820DC610h case   65:*/		return 0x820DC614;
		  /* 820DC614h */ case   66:  		/* mr R5, R26 */
		/* 820DC614h case   66:*/		regs.R5 = regs.R26;
		/* 820DC614h case   66:*/		return 0x820DC618;
		  /* 820DC618h */ case   67:  		/* mr R6, R30 */
		/* 820DC618h case   67:*/		regs.R6 = regs.R30;
		/* 820DC618h case   67:*/		return 0x820DC61C;
		  /* 820DC61Ch */ case   68:  		/* li R4, 32 */
		/* 820DC61Ch case   68:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC61Ch case   68:*/		return 0x820DC620;
		  /* 820DC620h */ case   69:  		/* addi R3, R1, 128 */
		/* 820DC620h case   69:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC620h case   69:*/		return 0x820DC624;
		  /* 820DC624h */ case   70:  		/* bl -237540 */
		/* 820DC624h case   70:*/		regs.LR = 0x820DC628; return 0x820A2640;
		/* 820DC624h case   70:*/		return 0x820DC628;
		  /* 820DC628h */ case   71:  		/* mr R4, R25 */
		/* 820DC628h case   71:*/		regs.R4 = regs.R25;
		/* 820DC628h case   71:*/		return 0x820DC62C;
		  /* 820DC62Ch */ case   72:  		/* addi R5, R1, 128 */
		/* 820DC62Ch case   72:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC62Ch case   72:*/		return 0x820DC630;
		  /* 820DC630h */ case   73:  		/* mr R3, R31 */
		/* 820DC630h case   73:*/		regs.R3 = regs.R31;
		/* 820DC630h case   73:*/		return 0x820DC634;
		  /* 820DC634h */ case   74:  		/* bl -9564 */
		/* 820DC634h case   74:*/		regs.LR = 0x820DC638; return 0x820DA0D8;
		/* 820DC634h case   74:*/		return 0x820DC638;
		  /* 820DC638h */ case   75:  		/* cmpwi CR0, R3, 0 */
		/* 820DC638h case   75:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC638h case   75:*/		return 0x820DC63C;
		  /* 820DC63Ch */ case   76:  		/* bc 12, CR0_LT, 948 */
		/* 820DC63Ch case   76:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC63Ch case   76:*/		return 0x820DC640;
		  /* 820DC640h */ case   77:  		/* lwz R11, <#[R31]> */
		/* 820DC640h case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC640h case   77:*/		return 0x820DC644;
		  /* 820DC644h */ case   78:  		/* li R8, 1 */
		/* 820DC644h case   78:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820DC644h case   78:*/		return 0x820DC648;
		  /* 820DC648h */ case   79:  		/* li R7, 1 */
		/* 820DC648h case   79:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820DC648h case   79:*/		return 0x820DC64C;
		  /* 820DC64Ch */ case   80:  		/* li R6, 1 */
		/* 820DC64Ch case   80:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820DC64Ch case   80:*/		return 0x820DC650;
		  /* 820DC650h */ case   81:  		/* li R5, 1 */
		/* 820DC650h case   81:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820DC650h case   81:*/		return 0x820DC654;
		  /* 820DC654h */ case   82:  		/* addi R4, R1, 160 */
		/* 820DC654h case   82:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820DC654h case   82:*/		return 0x820DC658;
		  /* 820DC658h */ case   83:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DC658h case   83:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DC658h case   83:*/		return 0x820DC65C;
		  /* 820DC65Ch */ case   84:  		/* mr R3, R31 */
		/* 820DC65Ch case   84:*/		regs.R3 = regs.R31;
		/* 820DC65Ch case   84:*/		return 0x820DC660;
		  /* 820DC660h */ case   85:  		/* mtspr CTR, R11 */
		/* 820DC660h case   85:*/		regs.CTR = regs.R11;
		/* 820DC660h case   85:*/		return 0x820DC664;
		  /* 820DC664h */ case   86:  		/* bcctrl 20, CR0_LT */
		/* 820DC664h case   86:*/		if ( 1 ) { regs.LR = 0x820DC668; return (uint32)regs.CTR; }
		/* 820DC664h case   86:*/		return 0x820DC668;
		  /* 820DC668h */ case   87:  		/* cmpwi CR0, R3, 0 */
		/* 820DC668h case   87:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC668h case   87:*/		return 0x820DC66C;
		  /* 820DC66Ch */ case   88:  		/* bc 12, CR0_LT, 900 */
		/* 820DC66Ch case   88:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC66Ch case   88:*/		return 0x820DC670;
		  /* 820DC670h */ case   89:  		/* mr R4, R24 */
		/* 820DC670h case   89:*/		regs.R4 = regs.R24;
		/* 820DC670h case   89:*/		return 0x820DC674;
		  /* 820DC674h */ case   90:  		/* mr R3, R31 */
		/* 820DC674h case   90:*/		regs.R3 = regs.R31;
		/* 820DC674h case   90:*/		return 0x820DC678;
		  /* 820DC678h */ case   91:  		/* bl -9632 */
		/* 820DC678h case   91:*/		regs.LR = 0x820DC67C; return 0x820DA0D8;
		/* 820DC678h case   91:*/		return 0x820DC67C;
		  /* 820DC67Ch */ case   92:  		/* cmpwi CR0, R3, 0 */
		/* 820DC67Ch case   92:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC67Ch case   92:*/		return 0x820DC680;
		  /* 820DC680h */ case   93:  		/* bc 12, CR0_LT, 880 */
		/* 820DC680h case   93:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC680h case   93:*/		return 0x820DC684;
		  /* 820DC684h */ case   94:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC684h case   94:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC684h case   94:*/		return 0x820DC688;
		  /* 820DC688h */ case   95:  		/* addi R30, R30, 1 */
		/* 820DC688h case   95:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC688h case   95:*/		return 0x820DC68C;
		  /* 820DC68Ch */ case   96:  		/* cmplw CR6, R30, R11 */
		/* 820DC68Ch case   96:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC68Ch case   96:*/		return 0x820DC690;
		  /* 820DC690h */ case   97:  		/* bc 12, CR6_LT, -160 */
		/* 820DC690h case   97:*/		if ( regs.CR[6].lt ) { return 0x820DC5F0;  }
		/* 820DC690h case   97:*/		return 0x820DC694;
	}
	return 0x820DC694;
} // Block from 820DC50Ch-820DC694h (98 instructions)

//////////////////////////////////////////////////////
// Block at 820DC694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC694);
		  /* 820DC694h */ case    0:  		/* mr R5, R26 */
		/* 820DC694h case    0:*/		regs.R5 = regs.R26;
		/* 820DC694h case    0:*/		return 0x820DC698;
		  /* 820DC698h */ case    1:  		/* li R4, 32 */
		/* 820DC698h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC698h case    1:*/		return 0x820DC69C;
		  /* 820DC69Ch */ case    2:  		/* addi R3, R1, 128 */
		/* 820DC69Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC69Ch case    2:*/		return 0x820DC6A0;
		  /* 820DC6A0h */ case    3:  		/* bl -221104 */
		/* 820DC6A0h case    3:*/		regs.LR = 0x820DC6A4; return 0x820A66F0;
		/* 820DC6A0h case    3:*/		return 0x820DC6A4;
		  /* 820DC6A4h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 820DC6A4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC6A4h case    4:*/		return 0x820DC6A8;
		  /* 820DC6A8h */ case    5:  		/* mr R6, R21 */
		/* 820DC6A8h case    5:*/		regs.R6 = regs.R21;
		/* 820DC6A8h case    5:*/		return 0x820DC6AC;
		  /* 820DC6ACh */ case    6:  		/* addi R7, R1, 128 */
		/* 820DC6ACh case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DC6ACh case    6:*/		return 0x820DC6B0;
		  /* 820DC6B0h */ case    7:  		/* addi R5, R1, 128 */
		/* 820DC6B0h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC6B0h case    7:*/		return 0x820DC6B4;
		  /* 820DC6B4h */ case    8:  		/* lis R4, 29600 */
		/* 820DC6B4h case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0x73A0);
		/* 820DC6B4h case    8:*/		return 0x820DC6B8;
		  /* 820DC6B8h */ case    9:  		/* lwz R11, <#[R11 + 484]> */
		/* 820DC6B8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001E4) );
		/* 820DC6B8h case    9:*/		return 0x820DC6BC;
		  /* 820DC6BCh */ case   10:  		/* mr R3, R31 */
		/* 820DC6BCh case   10:*/		regs.R3 = regs.R31;
		/* 820DC6BCh case   10:*/		return 0x820DC6C0;
		  /* 820DC6C0h */ case   11:  		/* mtspr CTR, R11 */
		/* 820DC6C0h case   11:*/		regs.CTR = regs.R11;
		/* 820DC6C0h case   11:*/		return 0x820DC6C4;
		  /* 820DC6C4h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 820DC6C4h case   12:*/		if ( 1 ) { regs.LR = 0x820DC6C8; return (uint32)regs.CTR; }
		/* 820DC6C4h case   12:*/		return 0x820DC6C8;
		  /* 820DC6C8h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DC6C8h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC6C8h case   13:*/		return 0x820DC6CC;
		  /* 820DC6CCh */ case   14:  		/* bc 12, CR0_LT, 804 */
		/* 820DC6CCh case   14:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC6CCh case   14:*/		return 0x820DC6D0;
		  /* 820DC6D0h */ case   15:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC6D0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC6D0h case   15:*/		return 0x820DC6D4;
		  /* 820DC6D4h */ case   16:  		/* li R30, 0 */
		/* 820DC6D4h case   16:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC6D4h case   16:*/		return 0x820DC6D8;
		  /* 820DC6D8h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 820DC6D8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC6D8h case   17:*/		return 0x820DC6DC;
		  /* 820DC6DCh */ case   18:  		/* bc 12, CR6_EQ, 160 */
		/* 820DC6DCh case   18:*/		if ( regs.CR[6].eq ) { return 0x820DC77C;  }
		/* 820DC6DCh case   18:*/		return 0x820DC6E0;
		  /* 820DC6E0h */ case   19:  		/* mr R3, R31 */
		/* 820DC6E0h case   19:*/		regs.R3 = regs.R31;
		/* 820DC6E0h case   19:*/		return 0x820DC6E4;
		  /* 820DC6E4h */ case   20:  		/* bl -9524 */
		/* 820DC6E4h case   20:*/		regs.LR = 0x820DC6E8; return 0x820DA1B0;
		/* 820DC6E4h case   20:*/		return 0x820DC6E8;
		  /* 820DC6E8h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820DC6E8h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC6E8h case   21:*/		return 0x820DC6EC;
		  /* 820DC6ECh */ case   22:  		/* bc 12, CR0_LT, 772 */
		/* 820DC6ECh case   22:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC6ECh case   22:*/		return 0x820DC6F0;
		  /* 820DC6F0h */ case   23:  		/* mr R5, R26 */
		/* 820DC6F0h case   23:*/		regs.R5 = regs.R26;
		/* 820DC6F0h case   23:*/		return 0x820DC6F4;
		  /* 820DC6F4h */ case   24:  		/* mr R6, R30 */
		/* 820DC6F4h case   24:*/		regs.R6 = regs.R30;
		/* 820DC6F4h case   24:*/		return 0x820DC6F8;
		  /* 820DC6F8h */ case   25:  		/* li R4, 32 */
		/* 820DC6F8h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC6F8h case   25:*/		return 0x820DC6FC;
		  /* 820DC6FCh */ case   26:  		/* addi R3, R1, 160 */
		/* 820DC6FCh case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DC6FCh case   26:*/		return 0x820DC700;
		  /* 820DC700h */ case   27:  		/* bl -237760 */
		/* 820DC700h case   27:*/		regs.LR = 0x820DC704; return 0x820A2640;
		/* 820DC700h case   27:*/		return 0x820DC704;
		  /* 820DC704h */ case   28:  		/* mr R5, R22 */
		/* 820DC704h case   28:*/		regs.R5 = regs.R22;
		/* 820DC704h case   28:*/		return 0x820DC708;
		  /* 820DC708h */ case   29:  		/* mr R6, R30 */
		/* 820DC708h case   29:*/		regs.R6 = regs.R30;
		/* 820DC708h case   29:*/		return 0x820DC70C;
		  /* 820DC70Ch */ case   30:  		/* li R4, 32 */
		/* 820DC70Ch case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC70Ch case   30:*/		return 0x820DC710;
		  /* 820DC710h */ case   31:  		/* addi R3, R1, 128 */
		/* 820DC710h case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC710h case   31:*/		return 0x820DC714;
		  /* 820DC714h */ case   32:  		/* bl -237780 */
		/* 820DC714h case   32:*/		regs.LR = 0x820DC718; return 0x820A2640;
		/* 820DC714h case   32:*/		return 0x820DC718;
		  /* 820DC718h */ case   33:  		/* mr R4, R25 */
		/* 820DC718h case   33:*/		regs.R4 = regs.R25;
		/* 820DC718h case   33:*/		return 0x820DC71C;
		  /* 820DC71Ch */ case   34:  		/* addi R5, R1, 128 */
		/* 820DC71Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC71Ch case   34:*/		return 0x820DC720;
		  /* 820DC720h */ case   35:  		/* mr R3, R31 */
		/* 820DC720h case   35:*/		regs.R3 = regs.R31;
		/* 820DC720h case   35:*/		return 0x820DC724;
		  /* 820DC724h */ case   36:  		/* bl -9804 */
		/* 820DC724h case   36:*/		regs.LR = 0x820DC728; return 0x820DA0D8;
		/* 820DC724h case   36:*/		return 0x820DC728;
		  /* 820DC728h */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 820DC728h case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC728h case   37:*/		return 0x820DC72C;
		  /* 820DC72Ch */ case   38:  		/* bc 12, CR0_LT, 708 */
		/* 820DC72Ch case   38:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC72Ch case   38:*/		return 0x820DC730;
		  /* 820DC730h */ case   39:  		/* lwz R11, <#[R31]> */
		/* 820DC730h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC730h case   39:*/		return 0x820DC734;
		  /* 820DC734h */ case   40:  		/* mr R4, R21 */
		/* 820DC734h case   40:*/		regs.R4 = regs.R21;
		/* 820DC734h case   40:*/		return 0x820DC738;
		  /* 820DC738h */ case   41:  		/* addi R6, R1, 160 */
		/* 820DC738h case   41:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DC738h case   41:*/		return 0x820DC73C;
		  /* 820DC73Ch */ case   42:  		/* addi R5, R1, 128 */
		/* 820DC73Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC73Ch case   42:*/		return 0x820DC740;
		  /* 820DC740h */ case   43:  		/* mr R3, R31 */
		/* 820DC740h case   43:*/		regs.R3 = regs.R31;
		/* 820DC740h case   43:*/		return 0x820DC744;
		  /* 820DC744h */ case   44:  		/* lwz R11, <#[R11 + 400]> */
		/* 820DC744h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820DC744h case   44:*/		return 0x820DC748;
		  /* 820DC748h */ case   45:  		/* mtspr CTR, R11 */
		/* 820DC748h case   45:*/		regs.CTR = regs.R11;
		/* 820DC748h case   45:*/		return 0x820DC74C;
		  /* 820DC74Ch */ case   46:  		/* bcctrl 20, CR0_LT */
		/* 820DC74Ch case   46:*/		if ( 1 ) { regs.LR = 0x820DC750; return (uint32)regs.CTR; }
		/* 820DC74Ch case   46:*/		return 0x820DC750;
		  /* 820DC750h */ case   47:  		/* cmpwi CR0, R3, 0 */
		/* 820DC750h case   47:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC750h case   47:*/		return 0x820DC754;
		  /* 820DC754h */ case   48:  		/* bc 12, CR0_LT, 668 */
		/* 820DC754h case   48:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC754h case   48:*/		return 0x820DC758;
		  /* 820DC758h */ case   49:  		/* mr R4, R24 */
		/* 820DC758h case   49:*/		regs.R4 = regs.R24;
		/* 820DC758h case   49:*/		return 0x820DC75C;
		  /* 820DC75Ch */ case   50:  		/* mr R3, R31 */
		/* 820DC75Ch case   50:*/		regs.R3 = regs.R31;
		/* 820DC75Ch case   50:*/		return 0x820DC760;
		  /* 820DC760h */ case   51:  		/* bl -9864 */
		/* 820DC760h case   51:*/		regs.LR = 0x820DC764; return 0x820DA0D8;
		/* 820DC760h case   51:*/		return 0x820DC764;
		  /* 820DC764h */ case   52:  		/* cmpwi CR0, R3, 0 */
		/* 820DC764h case   52:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC764h case   52:*/		return 0x820DC768;
		  /* 820DC768h */ case   53:  		/* bc 12, CR0_LT, 648 */
		/* 820DC768h case   53:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC768h case   53:*/		return 0x820DC76C;
		  /* 820DC76Ch */ case   54:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC76Ch case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC76Ch case   54:*/		return 0x820DC770;
		  /* 820DC770h */ case   55:  		/* addi R30, R30, 1 */
		/* 820DC770h case   55:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC770h case   55:*/		return 0x820DC774;
		  /* 820DC774h */ case   56:  		/* cmplw CR6, R30, R11 */
		/* 820DC774h case   56:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC774h case   56:*/		return 0x820DC778;
		  /* 820DC778h */ case   57:  		/* bc 12, CR6_LT, -152 */
		/* 820DC778h case   57:*/		if ( regs.CR[6].lt ) { return 0x820DC6E0;  }
		/* 820DC778h case   57:*/		return 0x820DC77C;
	}
	return 0x820DC77C;
} // Block from 820DC694h-820DC77Ch (58 instructions)

//////////////////////////////////////////////////////
// Block at 820DC77Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC77C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC77C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC77C);
		  /* 820DC77Ch */ case    0:  		/* li R30, 0 */
		/* 820DC77Ch case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC77Ch case    0:*/		return 0x820DC780;
		  /* 820DC780h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DC780h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC780h case    1:*/		return 0x820DC784;
		  /* 820DC784h */ case    2:  		/* bc 12, CR6_EQ, 160 */
		/* 820DC784h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DC824;  }
		/* 820DC784h case    2:*/		return 0x820DC788;
		  /* 820DC788h */ case    3:  		/* mr R3, R31 */
		/* 820DC788h case    3:*/		regs.R3 = regs.R31;
		/* 820DC788h case    3:*/		return 0x820DC78C;
		  /* 820DC78Ch */ case    4:  		/* bl -9692 */
		/* 820DC78Ch case    4:*/		regs.LR = 0x820DC790; return 0x820DA1B0;
		/* 820DC78Ch case    4:*/		return 0x820DC790;
		  /* 820DC790h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DC790h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC790h case    5:*/		return 0x820DC794;
		  /* 820DC794h */ case    6:  		/* bc 12, CR0_LT, 604 */
		/* 820DC794h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC794h case    6:*/		return 0x820DC798;
		  /* 820DC798h */ case    7:  		/* mr R5, R29 */
		/* 820DC798h case    7:*/		regs.R5 = regs.R29;
		/* 820DC798h case    7:*/		return 0x820DC79C;
		  /* 820DC79Ch */ case    8:  		/* mr R6, R30 */
		/* 820DC79Ch case    8:*/		regs.R6 = regs.R30;
		/* 820DC79Ch case    8:*/		return 0x820DC7A0;
		  /* 820DC7A0h */ case    9:  		/* li R4, 32 */
		/* 820DC7A0h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC7A0h case    9:*/		return 0x820DC7A4;
		  /* 820DC7A4h */ case   10:  		/* addi R3, R1, 160 */
		/* 820DC7A4h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DC7A4h case   10:*/		return 0x820DC7A8;
		  /* 820DC7A8h */ case   11:  		/* bl -237928 */
		/* 820DC7A8h case   11:*/		regs.LR = 0x820DC7AC; return 0x820A2640;
		/* 820DC7A8h case   11:*/		return 0x820DC7AC;
		  /* 820DC7ACh */ case   12:  		/* mr R5, R26 */
		/* 820DC7ACh case   12:*/		regs.R5 = regs.R26;
		/* 820DC7ACh case   12:*/		return 0x820DC7B0;
		  /* 820DC7B0h */ case   13:  		/* mr R6, R30 */
		/* 820DC7B0h case   13:*/		regs.R6 = regs.R30;
		/* 820DC7B0h case   13:*/		return 0x820DC7B4;
		  /* 820DC7B4h */ case   14:  		/* li R4, 32 */
		/* 820DC7B4h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC7B4h case   14:*/		return 0x820DC7B8;
		  /* 820DC7B8h */ case   15:  		/* addi R3, R1, 128 */
		/* 820DC7B8h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC7B8h case   15:*/		return 0x820DC7BC;
		  /* 820DC7BCh */ case   16:  		/* bl -237948 */
		/* 820DC7BCh case   16:*/		regs.LR = 0x820DC7C0; return 0x820A2640;
		/* 820DC7BCh case   16:*/		return 0x820DC7C0;
		  /* 820DC7C0h */ case   17:  		/* mr R4, R25 */
		/* 820DC7C0h case   17:*/		regs.R4 = regs.R25;
		/* 820DC7C0h case   17:*/		return 0x820DC7C4;
		  /* 820DC7C4h */ case   18:  		/* addi R5, R1, 160 */
		/* 820DC7C4h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DC7C4h case   18:*/		return 0x820DC7C8;
		  /* 820DC7C8h */ case   19:  		/* mr R3, R31 */
		/* 820DC7C8h case   19:*/		regs.R3 = regs.R31;
		/* 820DC7C8h case   19:*/		return 0x820DC7CC;
		  /* 820DC7CCh */ case   20:  		/* bl -9972 */
		/* 820DC7CCh case   20:*/		regs.LR = 0x820DC7D0; return 0x820DA0D8;
		/* 820DC7CCh case   20:*/		return 0x820DC7D0;
		  /* 820DC7D0h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820DC7D0h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC7D0h case   21:*/		return 0x820DC7D4;
		  /* 820DC7D4h */ case   22:  		/* bc 12, CR0_LT, 540 */
		/* 820DC7D4h case   22:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC7D4h case   22:*/		return 0x820DC7D8;
		  /* 820DC7D8h */ case   23:  		/* lwz R11, <#[R31]> */
		/* 820DC7D8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC7D8h case   23:*/		return 0x820DC7DC;
		  /* 820DC7DCh */ case   24:  		/* mr R4, R21 */
		/* 820DC7DCh case   24:*/		regs.R4 = regs.R21;
		/* 820DC7DCh case   24:*/		return 0x820DC7E0;
		  /* 820DC7E0h */ case   25:  		/* addi R6, R1, 128 */
		/* 820DC7E0h case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DC7E0h case   25:*/		return 0x820DC7E4;
		  /* 820DC7E4h */ case   26:  		/* addi R5, R1, 160 */
		/* 820DC7E4h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DC7E4h case   26:*/		return 0x820DC7E8;
		  /* 820DC7E8h */ case   27:  		/* mr R3, R31 */
		/* 820DC7E8h case   27:*/		regs.R3 = regs.R31;
		/* 820DC7E8h case   27:*/		return 0x820DC7EC;
		  /* 820DC7ECh */ case   28:  		/* lwz R11, <#[R11 + 400]> */
		/* 820DC7ECh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820DC7ECh case   28:*/		return 0x820DC7F0;
		  /* 820DC7F0h */ case   29:  		/* mtspr CTR, R11 */
		/* 820DC7F0h case   29:*/		regs.CTR = regs.R11;
		/* 820DC7F0h case   29:*/		return 0x820DC7F4;
		  /* 820DC7F4h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 820DC7F4h case   30:*/		if ( 1 ) { regs.LR = 0x820DC7F8; return (uint32)regs.CTR; }
		/* 820DC7F4h case   30:*/		return 0x820DC7F8;
		  /* 820DC7F8h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820DC7F8h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC7F8h case   31:*/		return 0x820DC7FC;
		  /* 820DC7FCh */ case   32:  		/* bc 12, CR0_LT, 500 */
		/* 820DC7FCh case   32:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC7FCh case   32:*/		return 0x820DC800;
		  /* 820DC800h */ case   33:  		/* mr R4, R24 */
		/* 820DC800h case   33:*/		regs.R4 = regs.R24;
		/* 820DC800h case   33:*/		return 0x820DC804;
		  /* 820DC804h */ case   34:  		/* mr R3, R31 */
		/* 820DC804h case   34:*/		regs.R3 = regs.R31;
		/* 820DC804h case   34:*/		return 0x820DC808;
		  /* 820DC808h */ case   35:  		/* bl -10032 */
		/* 820DC808h case   35:*/		regs.LR = 0x820DC80C; return 0x820DA0D8;
		/* 820DC808h case   35:*/		return 0x820DC80C;
		  /* 820DC80Ch */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820DC80Ch case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC80Ch case   36:*/		return 0x820DC810;
		  /* 820DC810h */ case   37:  		/* bc 12, CR0_LT, 480 */
		/* 820DC810h case   37:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC810h case   37:*/		return 0x820DC814;
		  /* 820DC814h */ case   38:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC814h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC814h case   38:*/		return 0x820DC818;
		  /* 820DC818h */ case   39:  		/* addi R30, R30, 1 */
		/* 820DC818h case   39:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC818h case   39:*/		return 0x820DC81C;
		  /* 820DC81Ch */ case   40:  		/* cmplw CR6, R30, R11 */
		/* 820DC81Ch case   40:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC81Ch case   40:*/		return 0x820DC820;
		  /* 820DC820h */ case   41:  		/* bc 12, CR6_LT, -152 */
		/* 820DC820h case   41:*/		if ( regs.CR[6].lt ) { return 0x820DC788;  }
		/* 820DC820h case   41:*/		return 0x820DC824;
	}
	return 0x820DC824;
} // Block from 820DC77Ch-820DC824h (42 instructions)

//////////////////////////////////////////////////////
// Block at 820DC824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC824);
		  /* 820DC824h */ case    0:  		/* mr R3, R31 */
		/* 820DC824h case    0:*/		regs.R3 = regs.R31;
		/* 820DC824h case    0:*/		return 0x820DC828;
		  /* 820DC828h */ case    1:  		/* bl -9848 */
		/* 820DC828h case    1:*/		regs.LR = 0x820DC82C; return 0x820DA1B0;
		/* 820DC828h case    1:*/		return 0x820DC82C;
		  /* 820DC82Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DC82Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC82Ch case    2:*/		return 0x820DC830;
		  /* 820DC830h */ case    3:  		/* bc 12, CR0_LT, 448 */
		/* 820DC830h case    3:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC830h case    3:*/		return 0x820DC834;
		  /* 820DC834h */ case    4:  		/* mr R4, R20 */
		/* 820DC834h case    4:*/		regs.R4 = regs.R20;
		/* 820DC834h case    4:*/		return 0x820DC838;
		  /* 820DC838h */ case    5:  		/* mr R3, R31 */
		/* 820DC838h case    5:*/		regs.R3 = regs.R31;
		/* 820DC838h case    5:*/		return 0x820DC83C;
		  /* 820DC83Ch */ case    6:  		/* bl -10084 */
		/* 820DC83Ch case    6:*/		regs.LR = 0x820DC840; return 0x820DA0D8;
		/* 820DC83Ch case    6:*/		return 0x820DC840;
		  /* 820DC840h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DC840h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC840h case    7:*/		return 0x820DC844;
		  /* 820DC844h */ case    8:  		/* bc 12, CR0_LT, 428 */
		/* 820DC844h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC844h case    8:*/		return 0x820DC848;
		  /* 820DC848h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 820DC848h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC848h case    9:*/		return 0x820DC84C;
		  /* 820DC84Ch */ case   10:  		/* mr R4, R19 */
		/* 820DC84Ch case   10:*/		regs.R4 = regs.R19;
		/* 820DC84Ch case   10:*/		return 0x820DC850;
		  /* 820DC850h */ case   11:  		/* li R8, 0 */
		/* 820DC850h case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820DC850h case   11:*/		return 0x820DC854;
		  /* 820DC854h */ case   12:  		/* li R7, 1 */
		/* 820DC854h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820DC854h case   12:*/		return 0x820DC858;
		  /* 820DC858h */ case   13:  		/* li R6, 1 */
		/* 820DC858h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820DC858h case   13:*/		return 0x820DC85C;
		  /* 820DC85Ch */ case   14:  		/* li R5, 0 */
		/* 820DC85Ch case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820DC85Ch case   14:*/		return 0x820DC860;
		  /* 820DC860h */ case   15:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DC860h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DC860h case   15:*/		return 0x820DC864;
		  /* 820DC864h */ case   16:  		/* mr R3, R31 */
		/* 820DC864h case   16:*/		regs.R3 = regs.R31;
		/* 820DC864h case   16:*/		return 0x820DC868;
		  /* 820DC868h */ case   17:  		/* mtspr CTR, R11 */
		/* 820DC868h case   17:*/		regs.CTR = regs.R11;
		/* 820DC868h case   17:*/		return 0x820DC86C;
		  /* 820DC86Ch */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 820DC86Ch case   18:*/		if ( 1 ) { regs.LR = 0x820DC870; return (uint32)regs.CTR; }
		/* 820DC86Ch case   18:*/		return 0x820DC870;
		  /* 820DC870h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820DC870h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC870h case   19:*/		return 0x820DC874;
		  /* 820DC874h */ case   20:  		/* bc 12, CR0_LT, 380 */
		/* 820DC874h case   20:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC874h case   20:*/		return 0x820DC878;
		  /* 820DC878h */ case   21:  		/* mr R4, R24 */
		/* 820DC878h case   21:*/		regs.R4 = regs.R24;
		/* 820DC878h case   21:*/		return 0x820DC87C;
		  /* 820DC87Ch */ case   22:  		/* mr R3, R31 */
		/* 820DC87Ch case   22:*/		regs.R3 = regs.R31;
		/* 820DC87Ch case   22:*/		return 0x820DC880;
		  /* 820DC880h */ case   23:  		/* bl -10152 */
		/* 820DC880h case   23:*/		regs.LR = 0x820DC884; return 0x820DA0D8;
		/* 820DC880h case   23:*/		return 0x820DC884;
		  /* 820DC884h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820DC884h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC884h case   24:*/		return 0x820DC888;
		  /* 820DC888h */ case   25:  		/* bc 12, CR0_LT, 360 */
		/* 820DC888h case   25:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC888h case   25:*/		return 0x820DC88C;
		  /* 820DC88Ch */ case   26:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC88Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC88Ch case   26:*/		return 0x820DC890;
		  /* 820DC890h */ case   27:  		/* li R30, 0 */
		/* 820DC890h case   27:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC890h case   27:*/		return 0x820DC894;
		  /* 820DC894h */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 820DC894h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC894h case   28:*/		return 0x820DC898;
		  /* 820DC898h */ case   29:  		/* bc 12, CR6_EQ, 160 */
		/* 820DC898h case   29:*/		if ( regs.CR[6].eq ) { return 0x820DC938;  }
		/* 820DC898h case   29:*/		return 0x820DC89C;
		  /* 820DC89Ch */ case   30:  		/* mr R3, R31 */
		/* 820DC89Ch case   30:*/		regs.R3 = regs.R31;
		/* 820DC89Ch case   30:*/		return 0x820DC8A0;
		  /* 820DC8A0h */ case   31:  		/* bl -9968 */
		/* 820DC8A0h case   31:*/		regs.LR = 0x820DC8A4; return 0x820DA1B0;
		/* 820DC8A0h case   31:*/		return 0x820DC8A4;
		  /* 820DC8A4h */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 820DC8A4h case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC8A4h case   32:*/		return 0x820DC8A8;
		  /* 820DC8A8h */ case   33:  		/* bc 12, CR0_LT, 328 */
		/* 820DC8A8h case   33:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC8A8h case   33:*/		return 0x820DC8AC;
		  /* 820DC8ACh */ case   34:  		/* mr R5, R29 */
		/* 820DC8ACh case   34:*/		regs.R5 = regs.R29;
		/* 820DC8ACh case   34:*/		return 0x820DC8B0;
		  /* 820DC8B0h */ case   35:  		/* mr R6, R30 */
		/* 820DC8B0h case   35:*/		regs.R6 = regs.R30;
		/* 820DC8B0h case   35:*/		return 0x820DC8B4;
		  /* 820DC8B4h */ case   36:  		/* li R4, 32 */
		/* 820DC8B4h case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC8B4h case   36:*/		return 0x820DC8B8;
		  /* 820DC8B8h */ case   37:  		/* addi R3, R1, 160 */
		/* 820DC8B8h case   37:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DC8B8h case   37:*/		return 0x820DC8BC;
		  /* 820DC8BCh */ case   38:  		/* bl -238204 */
		/* 820DC8BCh case   38:*/		regs.LR = 0x820DC8C0; return 0x820A2640;
		/* 820DC8BCh case   38:*/		return 0x820DC8C0;
		  /* 820DC8C0h */ case   39:  		/* mr R5, R22 */
		/* 820DC8C0h case   39:*/		regs.R5 = regs.R22;
		/* 820DC8C0h case   39:*/		return 0x820DC8C4;
		  /* 820DC8C4h */ case   40:  		/* mr R6, R30 */
		/* 820DC8C4h case   40:*/		regs.R6 = regs.R30;
		/* 820DC8C4h case   40:*/		return 0x820DC8C8;
		  /* 820DC8C8h */ case   41:  		/* li R4, 32 */
		/* 820DC8C8h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC8C8h case   41:*/		return 0x820DC8CC;
		  /* 820DC8CCh */ case   42:  		/* addi R3, R1, 128 */
		/* 820DC8CCh case   42:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC8CCh case   42:*/		return 0x820DC8D0;
		  /* 820DC8D0h */ case   43:  		/* bl -238224 */
		/* 820DC8D0h case   43:*/		regs.LR = 0x820DC8D4; return 0x820A2640;
		/* 820DC8D0h case   43:*/		return 0x820DC8D4;
		  /* 820DC8D4h */ case   44:  		/* mr R4, R25 */
		/* 820DC8D4h case   44:*/		regs.R4 = regs.R25;
		/* 820DC8D4h case   44:*/		return 0x820DC8D8;
		  /* 820DC8D8h */ case   45:  		/* addi R5, R1, 128 */
		/* 820DC8D8h case   45:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC8D8h case   45:*/		return 0x820DC8DC;
		  /* 820DC8DCh */ case   46:  		/* mr R3, R31 */
		/* 820DC8DCh case   46:*/		regs.R3 = regs.R31;
		/* 820DC8DCh case   46:*/		return 0x820DC8E0;
		  /* 820DC8E0h */ case   47:  		/* bl -10248 */
		/* 820DC8E0h case   47:*/		regs.LR = 0x820DC8E4; return 0x820DA0D8;
		/* 820DC8E0h case   47:*/		return 0x820DC8E4;
		  /* 820DC8E4h */ case   48:  		/* cmpwi CR0, R3, 0 */
		/* 820DC8E4h case   48:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC8E4h case   48:*/		return 0x820DC8E8;
		  /* 820DC8E8h */ case   49:  		/* bc 12, CR0_LT, 264 */
		/* 820DC8E8h case   49:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC8E8h case   49:*/		return 0x820DC8EC;
		  /* 820DC8ECh */ case   50:  		/* lwz R11, <#[R31]> */
		/* 820DC8ECh case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC8ECh case   50:*/		return 0x820DC8F0;
		  /* 820DC8F0h */ case   51:  		/* mr R6, R23 */
		/* 820DC8F0h case   51:*/		regs.R6 = regs.R23;
		/* 820DC8F0h case   51:*/		return 0x820DC8F4;
		  /* 820DC8F4h */ case   52:  		/* addi R5, R1, 160 */
		/* 820DC8F4h case   52:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DC8F4h case   52:*/		return 0x820DC8F8;
		  /* 820DC8F8h */ case   53:  		/* addi R4, R1, 128 */
		/* 820DC8F8h case   53:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820DC8F8h case   53:*/		return 0x820DC8FC;
		  /* 820DC8FCh */ case   54:  		/* mr R3, R31 */
		/* 820DC8FCh case   54:*/		regs.R3 = regs.R31;
		/* 820DC8FCh case   54:*/		return 0x820DC900;
		  /* 820DC900h */ case   55:  		/* lwz R11, <#[R11 + 400]> */
		/* 820DC900h case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820DC900h case   55:*/		return 0x820DC904;
		  /* 820DC904h */ case   56:  		/* mtspr CTR, R11 */
		/* 820DC904h case   56:*/		regs.CTR = regs.R11;
		/* 820DC904h case   56:*/		return 0x820DC908;
		  /* 820DC908h */ case   57:  		/* bcctrl 20, CR0_LT */
		/* 820DC908h case   57:*/		if ( 1 ) { regs.LR = 0x820DC90C; return (uint32)regs.CTR; }
		/* 820DC908h case   57:*/		return 0x820DC90C;
		  /* 820DC90Ch */ case   58:  		/* cmpwi CR0, R3, 0 */
		/* 820DC90Ch case   58:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC90Ch case   58:*/		return 0x820DC910;
		  /* 820DC910h */ case   59:  		/* bc 12, CR0_LT, 224 */
		/* 820DC910h case   59:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC910h case   59:*/		return 0x820DC914;
		  /* 820DC914h */ case   60:  		/* mr R4, R24 */
		/* 820DC914h case   60:*/		regs.R4 = regs.R24;
		/* 820DC914h case   60:*/		return 0x820DC918;
		  /* 820DC918h */ case   61:  		/* mr R3, R31 */
		/* 820DC918h case   61:*/		regs.R3 = regs.R31;
		/* 820DC918h case   61:*/		return 0x820DC91C;
		  /* 820DC91Ch */ case   62:  		/* bl -10308 */
		/* 820DC91Ch case   62:*/		regs.LR = 0x820DC920; return 0x820DA0D8;
		/* 820DC91Ch case   62:*/		return 0x820DC920;
		  /* 820DC920h */ case   63:  		/* cmpwi CR0, R3, 0 */
		/* 820DC920h case   63:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC920h case   63:*/		return 0x820DC924;
		  /* 820DC924h */ case   64:  		/* bc 12, CR0_LT, 204 */
		/* 820DC924h case   64:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC924h case   64:*/		return 0x820DC928;
		  /* 820DC928h */ case   65:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC928h case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC928h case   65:*/		return 0x820DC92C;
		  /* 820DC92Ch */ case   66:  		/* addi R30, R30, 1 */
		/* 820DC92Ch case   66:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC92Ch case   66:*/		return 0x820DC930;
		  /* 820DC930h */ case   67:  		/* cmplw CR6, R30, R11 */
		/* 820DC930h case   67:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC930h case   67:*/		return 0x820DC934;
		  /* 820DC934h */ case   68:  		/* bc 12, CR6_LT, -152 */
		/* 820DC934h case   68:*/		if ( regs.CR[6].lt ) { return 0x820DC89C;  }
		/* 820DC934h case   68:*/		return 0x820DC938;
	}
	return 0x820DC938;
} // Block from 820DC824h-820DC938h (69 instructions)

//////////////////////////////////////////////////////
// Block at 820DC938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC938);
		  /* 820DC938h */ case    0:  		/* li R30, 0 */
		/* 820DC938h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DC938h case    0:*/		return 0x820DC93C;
		  /* 820DC93Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DC93Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DC93Ch case    1:*/		return 0x820DC940;
		  /* 820DC940h */ case    2:  		/* bc 12, CR6_EQ, 172 */
		/* 820DC940h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DC9EC;  }
		/* 820DC940h case    2:*/		return 0x820DC944;
		  /* 820DC944h */ case    3:  		/* lis R11, -32254 */
		/* 820DC944h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DC944h case    3:*/		return 0x820DC948;
		  /* 820DC948h */ case    4:  		/* addi R29, R11, -30456 */
		/* 820DC948h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8908);
		/* 820DC948h case    4:*/		return 0x820DC94C;
		  /* 820DC94Ch */ case    5:  		/* mr R3, R31 */
		/* 820DC94Ch case    5:*/		regs.R3 = regs.R31;
		/* 820DC94Ch case    5:*/		return 0x820DC950;
		  /* 820DC950h */ case    6:  		/* bl -10144 */
		/* 820DC950h case    6:*/		regs.LR = 0x820DC954; return 0x820DA1B0;
		/* 820DC950h case    6:*/		return 0x820DC954;
		  /* 820DC954h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DC954h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC954h case    7:*/		return 0x820DC958;
		  /* 820DC958h */ case    8:  		/* bc 12, CR0_LT, 152 */
		/* 820DC958h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC958h case    8:*/		return 0x820DC95C;
		  /* 820DC95Ch */ case    9:  		/* mr R7, R30 */
		/* 820DC95Ch case    9:*/		regs.R7 = regs.R30;
		/* 820DC95Ch case    9:*/		return 0x820DC960;
		  /* 820DC960h */ case   10:  		/* mr R6, R30 */
		/* 820DC960h case   10:*/		regs.R6 = regs.R30;
		/* 820DC960h case   10:*/		return 0x820DC964;
		  /* 820DC964h */ case   11:  		/* mr R5, R18 */
		/* 820DC964h case   11:*/		regs.R5 = regs.R18;
		/* 820DC964h case   11:*/		return 0x820DC968;
		  /* 820DC968h */ case   12:  		/* li R4, 32 */
		/* 820DC968h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC968h case   12:*/		return 0x820DC96C;
		  /* 820DC96Ch */ case   13:  		/* addi R3, R1, 224 */
		/* 820DC96Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820DC96Ch case   13:*/		return 0x820DC970;
		  /* 820DC970h */ case   14:  		/* bl -238384 */
		/* 820DC970h case   14:*/		regs.LR = 0x820DC974; return 0x820A2640;
		/* 820DC970h case   14:*/		return 0x820DC974;
		  /* 820DC974h */ case   15:  		/* mr R5, R22 */
		/* 820DC974h case   15:*/		regs.R5 = regs.R22;
		/* 820DC974h case   15:*/		return 0x820DC978;
		  /* 820DC978h */ case   16:  		/* mr R6, R30 */
		/* 820DC978h case   16:*/		regs.R6 = regs.R30;
		/* 820DC978h case   16:*/		return 0x820DC97C;
		  /* 820DC97Ch */ case   17:  		/* li R4, 32 */
		/* 820DC97Ch case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DC97Ch case   17:*/		return 0x820DC980;
		  /* 820DC980h */ case   18:  		/* addi R3, R1, 128 */
		/* 820DC980h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DC980h case   18:*/		return 0x820DC984;
		  /* 820DC984h */ case   19:  		/* bl -238404 */
		/* 820DC984h case   19:*/		regs.LR = 0x820DC988; return 0x820A2640;
		/* 820DC984h case   19:*/		return 0x820DC988;
		  /* 820DC988h */ case   20:  		/* mr R4, R25 */
		/* 820DC988h case   20:*/		regs.R4 = regs.R25;
		/* 820DC988h case   20:*/		return 0x820DC98C;
		  /* 820DC98Ch */ case   21:  		/* addi R5, R1, 224 */
		/* 820DC98Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 820DC98Ch case   21:*/		return 0x820DC990;
		  /* 820DC990h */ case   22:  		/* mr R3, R31 */
		/* 820DC990h case   22:*/		regs.R3 = regs.R31;
		/* 820DC990h case   22:*/		return 0x820DC994;
		  /* 820DC994h */ case   23:  		/* bl -10428 */
		/* 820DC994h case   23:*/		regs.LR = 0x820DC998; return 0x820DA0D8;
		/* 820DC994h case   23:*/		return 0x820DC998;
		  /* 820DC998h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820DC998h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC998h case   24:*/		return 0x820DC99C;
		  /* 820DC99Ch */ case   25:  		/* bc 12, CR0_LT, 84 */
		/* 820DC99Ch case   25:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC99Ch case   25:*/		return 0x820DC9A0;
		  /* 820DC9A0h */ case   26:  		/* lwz R11, <#[R31]> */
		/* 820DC9A0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DC9A0h case   26:*/		return 0x820DC9A4;
		  /* 820DC9A4h */ case   27:  		/* mr R6, R21 */
		/* 820DC9A4h case   27:*/		regs.R6 = regs.R21;
		/* 820DC9A4h case   27:*/		return 0x820DC9A8;
		  /* 820DC9A8h */ case   28:  		/* mr R4, R29 */
		/* 820DC9A8h case   28:*/		regs.R4 = regs.R29;
		/* 820DC9A8h case   28:*/		return 0x820DC9AC;
		  /* 820DC9ACh */ case   29:  		/* addi R5, R1, 128 */
		/* 820DC9ACh case   29:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DC9ACh case   29:*/		return 0x820DC9B0;
		  /* 820DC9B0h */ case   30:  		/* mr R3, R31 */
		/* 820DC9B0h case   30:*/		regs.R3 = regs.R31;
		/* 820DC9B0h case   30:*/		return 0x820DC9B4;
		  /* 820DC9B4h */ case   31:  		/* lwz R11, <#[R11 + 400]> */
		/* 820DC9B4h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820DC9B4h case   31:*/		return 0x820DC9B8;
		  /* 820DC9B8h */ case   32:  		/* mtspr CTR, R11 */
		/* 820DC9B8h case   32:*/		regs.CTR = regs.R11;
		/* 820DC9B8h case   32:*/		return 0x820DC9BC;
		  /* 820DC9BCh */ case   33:  		/* bcctrl 20, CR0_LT */
		/* 820DC9BCh case   33:*/		if ( 1 ) { regs.LR = 0x820DC9C0; return (uint32)regs.CTR; }
		/* 820DC9BCh case   33:*/		return 0x820DC9C0;
		  /* 820DC9C0h */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 820DC9C0h case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC9C0h case   34:*/		return 0x820DC9C4;
		  /* 820DC9C4h */ case   35:  		/* bc 12, CR0_LT, 44 */
		/* 820DC9C4h case   35:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC9C4h case   35:*/		return 0x820DC9C8;
		  /* 820DC9C8h */ case   36:  		/* mr R4, R24 */
		/* 820DC9C8h case   36:*/		regs.R4 = regs.R24;
		/* 820DC9C8h case   36:*/		return 0x820DC9CC;
		  /* 820DC9CCh */ case   37:  		/* mr R3, R31 */
		/* 820DC9CCh case   37:*/		regs.R3 = regs.R31;
		/* 820DC9CCh case   37:*/		return 0x820DC9D0;
		  /* 820DC9D0h */ case   38:  		/* bl -10488 */
		/* 820DC9D0h case   38:*/		regs.LR = 0x820DC9D4; return 0x820DA0D8;
		/* 820DC9D0h case   38:*/		return 0x820DC9D4;
		  /* 820DC9D4h */ case   39:  		/* cmpwi CR0, R3, 0 */
		/* 820DC9D4h case   39:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DC9D4h case   39:*/		return 0x820DC9D8;
		  /* 820DC9D8h */ case   40:  		/* bc 12, CR0_LT, 24 */
		/* 820DC9D8h case   40:*/		if ( regs.CR[0].lt ) { return 0x820DC9F0;  }
		/* 820DC9D8h case   40:*/		return 0x820DC9DC;
		  /* 820DC9DCh */ case   41:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DC9DCh case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DC9DCh case   41:*/		return 0x820DC9E0;
		  /* 820DC9E0h */ case   42:  		/* addi R30, R30, 1 */
		/* 820DC9E0h case   42:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DC9E0h case   42:*/		return 0x820DC9E4;
		  /* 820DC9E4h */ case   43:  		/* cmplw CR6, R30, R11 */
		/* 820DC9E4h case   43:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DC9E4h case   43:*/		return 0x820DC9E8;
		  /* 820DC9E8h */ case   44:  		/* bc 12, CR6_LT, -156 */
		/* 820DC9E8h case   44:*/		if ( regs.CR[6].lt ) { return 0x820DC94C;  }
		/* 820DC9E8h case   44:*/		return 0x820DC9EC;
	}
	return 0x820DC9EC;
} // Block from 820DC938h-820DC9ECh (45 instructions)

//////////////////////////////////////////////////////
// Block at 820DC9ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC9EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC9EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC9EC);
		  /* 820DC9ECh */ case    0:  		/* li R3, 0 */
		/* 820DC9ECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DC9ECh case    0:*/		return 0x820DC9F0;
	}
	return 0x820DC9F0;
} // Block from 820DC9ECh-820DC9F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DC9F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC9F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC9F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC9F0);
		  /* 820DC9F0h */ case    0:  		/* addi R1, R1, 384 */
		/* 820DC9F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 820DC9F0h case    0:*/		return 0x820DC9F4;
		  /* 820DC9F4h */ case    1:  		/* b -309108 */
		/* 820DC9F4h case    1:*/		return 0x82091280;
		/* 820DC9F4h case    1:*/		return 0x820DC9F8;
	}
	return 0x820DC9F8;
} // Block from 820DC9F0h-820DC9F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DC9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DC9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DC9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DC9F8);
		  /* 820DC9F8h */ case    0:  		/* mfspr R12, LR */
		/* 820DC9F8h case    0:*/		regs.R12 = regs.LR;
		/* 820DC9F8h case    0:*/		return 0x820DC9FC;
		  /* 820DC9FCh */ case    1:  		/* bl -309172 */
		/* 820DC9FCh case    1:*/		regs.LR = 0x820DCA00; return 0x82091248;
		/* 820DC9FCh case    1:*/		return 0x820DCA00;
		  /* 820DCA00h */ case    2:  		/* stwu R1, <#[R1 - 400]> */
		/* 820DCA00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 820DCA00h case    2:*/		return 0x820DCA04;
		  /* 820DCA04h */ case    3:  		/* lis R11, -32254 */
		/* 820DCA04h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCA04h case    3:*/		return 0x820DCA08;
		  /* 820DCA08h */ case    4:  		/* mr R25, R5 */
		/* 820DCA08h case    4:*/		regs.R25 = regs.R5;
		/* 820DCA08h case    4:*/		return 0x820DCA0C;
		  /* 820DCA0Ch */ case    5:  		/* addi R31, R11, -30428 */
		/* 820DCA0Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFF8924);
		/* 820DCA0Ch case    5:*/		return 0x820DCA10;
		  /* 820DCA10h */ case    6:  		/* mr R30, R3 */
		/* 820DCA10h case    6:*/		regs.R30 = regs.R3;
		/* 820DCA10h case    6:*/		return 0x820DCA14;
		  /* 820DCA14h */ case    7:  		/* mr R24, R4 */
		/* 820DCA14h case    7:*/		regs.R24 = regs.R4;
		/* 820DCA14h case    7:*/		return 0x820DCA18;
		  /* 820DCA18h */ case    8:  		/* li R5, 7 */
		/* 820DCA18h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 820DCA18h case    8:*/		return 0x820DCA1C;
		  /* 820DCA1Ch */ case    9:  		/* mr R3, R25 */
		/* 820DCA1Ch case    9:*/		regs.R3 = regs.R25;
		/* 820DCA1Ch case    9:*/		return 0x820DCA20;
		  /* 820DCA20h */ case   10:  		/* mr R4, R31 */
		/* 820DCA20h case   10:*/		regs.R4 = regs.R31;
		/* 820DCA20h case   10:*/		return 0x820DCA24;
		  /* 820DCA24h */ case   11:  		/* mr R28, R6 */
		/* 820DCA24h case   11:*/		regs.R28 = regs.R6;
		/* 820DCA24h case   11:*/		return 0x820DCA28;
		  /* 820DCA28h */ case   12:  		/* mr R27, R7 */
		/* 820DCA28h case   12:*/		regs.R27 = regs.R7;
		/* 820DCA28h case   12:*/		return 0x820DCA2C;
		  /* 820DCA2Ch */ case   13:  		/* bl -304828 */
		/* 820DCA2Ch case   13:*/		regs.LR = 0x820DCA30; return 0x82092370;
		/* 820DCA2Ch case   13:*/		return 0x820DCA30;
		  /* 820DCA30h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820DCA30h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCA30h case   14:*/		return 0x820DCA34;
		  /* 820DCA34h */ case   15:  		/* bc 12, CR0_EQ, 40 */
		/* 820DCA34h case   15:*/		if ( regs.CR[0].eq ) { return 0x820DCA5C;  }
		/* 820DCA34h case   15:*/		return 0x820DCA38;
		  /* 820DCA38h */ case   16:  		/* mr R4, R31 */
		/* 820DCA38h case   16:*/		regs.R4 = regs.R31;
		/* 820DCA38h case   16:*/		return 0x820DCA3C;
		  /* 820DCA3Ch */ case   17:  		/* li R5, 7 */
		/* 820DCA3Ch case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 820DCA3Ch case   17:*/		return 0x820DCA40;
		  /* 820DCA40h */ case   18:  		/* mr R3, R28 */
		/* 820DCA40h case   18:*/		regs.R3 = regs.R28;
		/* 820DCA40h case   18:*/		return 0x820DCA44;
		  /* 820DCA44h */ case   19:  		/* bl -304852 */
		/* 820DCA44h case   19:*/		regs.LR = 0x820DCA48; return 0x82092370;
		/* 820DCA44h case   19:*/		return 0x820DCA48;
		  /* 820DCA48h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 820DCA48h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCA48h case   20:*/		return 0x820DCA4C;
		  /* 820DCA4Ch */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 820DCA4Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x820DCA5C;  }
		/* 820DCA4Ch case   21:*/		return 0x820DCA50;
		  /* 820DCA50h */ case   22:  		/* lis R11, -32254 */
		/* 820DCA50h case   22:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCA50h case   22:*/		return 0x820DCA54;
		  /* 820DCA54h */ case   23:  		/* addi R5, R11, -30488 */
		/* 820DCA54h case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF88E8);
		/* 820DCA54h case   23:*/		return 0x820DCA58;
		  /* 820DCA58h */ case   24:  		/* b 80 */
		/* 820DCA58h case   24:*/		return 0x820DCAA8;
		/* 820DCA58h case   24:*/		return 0x820DCA5C;
	}
	return 0x820DCA5C;
} // Block from 820DC9F8h-820DCA5Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 820DCA5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCA5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCA5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCA5C);
		  /* 820DCA5Ch */ case    0:  		/* lis R11, -32254 */
		/* 820DCA5Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCA5Ch case    0:*/		return 0x820DCA60;
		  /* 820DCA60h */ case    1:  		/* li R5, 7 */
		/* 820DCA60h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 820DCA60h case    1:*/		return 0x820DCA64;
		  /* 820DCA64h */ case    2:  		/* addi R31, R11, -30496 */
		/* 820DCA64h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFF88E0);
		/* 820DCA64h case    2:*/		return 0x820DCA68;
		  /* 820DCA68h */ case    3:  		/* mr R3, R25 */
		/* 820DCA68h case    3:*/		regs.R3 = regs.R25;
		/* 820DCA68h case    3:*/		return 0x820DCA6C;
		  /* 820DCA6Ch */ case    4:  		/* mr R4, R31 */
		/* 820DCA6Ch case    4:*/		regs.R4 = regs.R31;
		/* 820DCA6Ch case    4:*/		return 0x820DCA70;
		  /* 820DCA70h */ case    5:  		/* bl -304896 */
		/* 820DCA70h case    5:*/		regs.LR = 0x820DCA74; return 0x82092370;
		/* 820DCA70h case    5:*/		return 0x820DCA74;
		  /* 820DCA74h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DCA74h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCA74h case    6:*/		return 0x820DCA78;
		  /* 820DCA78h */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 820DCA78h case    7:*/		if ( regs.CR[0].eq ) { return 0x820DCAA0;  }
		/* 820DCA78h case    7:*/		return 0x820DCA7C;
		  /* 820DCA7Ch */ case    8:  		/* mr R4, R31 */
		/* 820DCA7Ch case    8:*/		regs.R4 = regs.R31;
		/* 820DCA7Ch case    8:*/		return 0x820DCA80;
		  /* 820DCA80h */ case    9:  		/* li R5, 7 */
		/* 820DCA80h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 820DCA80h case    9:*/		return 0x820DCA84;
		  /* 820DCA84h */ case   10:  		/* mr R3, R28 */
		/* 820DCA84h case   10:*/		regs.R3 = regs.R28;
		/* 820DCA84h case   10:*/		return 0x820DCA88;
		  /* 820DCA88h */ case   11:  		/* bl -304920 */
		/* 820DCA88h case   11:*/		regs.LR = 0x820DCA8C; return 0x82092370;
		/* 820DCA88h case   11:*/		return 0x820DCA8C;
		  /* 820DCA8Ch */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820DCA8Ch case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCA8Ch case   12:*/		return 0x820DCA90;
		  /* 820DCA90h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 820DCA90h case   13:*/		if ( regs.CR[0].eq ) { return 0x820DCAA0;  }
		/* 820DCA90h case   13:*/		return 0x820DCA94;
		  /* 820DCA94h */ case   14:  		/* lis R11, -32254 */
		/* 820DCA94h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCA94h case   14:*/		return 0x820DCA98;
		  /* 820DCA98h */ case   15:  		/* addi R5, R11, -30704 */
		/* 820DCA98h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF8810);
		/* 820DCA98h case   15:*/		return 0x820DCA9C;
		  /* 820DCA9Ch */ case   16:  		/* b 12 */
		/* 820DCA9Ch case   16:*/		return 0x820DCAA8;
		/* 820DCA9Ch case   16:*/		return 0x820DCAA0;
	}
	return 0x820DCAA0;
} // Block from 820DCA5Ch-820DCAA0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820DCAA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCAA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCAA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCAA0);
		  /* 820DCAA0h */ case    0:  		/* lis R11, -32254 */
		/* 820DCAA0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCAA0h case    0:*/		return 0x820DCAA4;
		  /* 820DCAA4h */ case    1:  		/* addi R5, R11, -30716 */
		/* 820DCAA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF8804);
		/* 820DCAA4h case    1:*/		return 0x820DCAA8;
	}
	return 0x820DCAA8;
} // Block from 820DCAA0h-820DCAA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DCAA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCAA8);
		  /* 820DCAA8h */ case    0:  		/* li R4, 32 */
		/* 820DCAA8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DCAA8h case    0:*/		return 0x820DCAAC;
		  /* 820DCAACh */ case    1:  		/* addi R3, R1, 128 */
		/* 820DCAACh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DCAACh case    1:*/		return 0x820DCAB0;
		  /* 820DCAB0h */ case    2:  		/* bl -222144 */
		/* 820DCAB0h case    2:*/		regs.LR = 0x820DCAB4; return 0x820A66F0;
		/* 820DCAB0h case    2:*/		return 0x820DCAB4;
		  /* 820DCAB4h */ case    3:  		/* lis R11, -32254 */
		/* 820DCAB4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCAB4h case    3:*/		return 0x820DCAB8;
		  /* 820DCAB8h */ case    4:  		/* lis R10, -32254 */
		/* 820DCAB8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DCAB8h case    4:*/		return 0x820DCABC;
		  /* 820DCABCh */ case    5:  		/* addi R26, R11, -30768 */
		/* 820DCABCh case    5:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFF87D0);
		/* 820DCABCh case    5:*/		return 0x820DCAC0;
		  /* 820DCAC0h */ case    6:  		/* li R31, 0 */
		/* 820DCAC0h case    6:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820DCAC0h case    6:*/		return 0x820DCAC4;
		  /* 820DCAC4h */ case    7:  		/* addi R29, R10, -30692 */
		/* 820DCAC4h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFF881C);
		/* 820DCAC4h case    7:*/		return 0x820DCAC8;
		  /* 820DCAC8h */ case    8:  		/* lwz R11, <#[R30 + 1816]> */
		/* 820DCAC8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000718) );
		/* 820DCAC8h case    8:*/		return 0x820DCACC;
		  /* 820DCACCh */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820DCACCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DCACCh case    9:*/		return 0x820DCAD0;
		  /* 820DCAD0h */ case   10:  		/* bc 12, CR6_EQ, 184 */
		/* 820DCAD0h case   10:*/		if ( regs.CR[6].eq ) { return 0x820DCB88;  }
		/* 820DCAD0h case   10:*/		return 0x820DCAD4;
		  /* 820DCAD4h */ case   11:  		/* mr R3, R30 */
		/* 820DCAD4h case   11:*/		regs.R3 = regs.R30;
		/* 820DCAD4h case   11:*/		return 0x820DCAD8;
		  /* 820DCAD8h */ case   12:  		/* bl -10536 */
		/* 820DCAD8h case   12:*/		regs.LR = 0x820DCADC; return 0x820DA1B0;
		/* 820DCAD8h case   12:*/		return 0x820DCADC;
		  /* 820DCADCh */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DCADCh case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCADCh case   13:*/		return 0x820DCAE0;
		  /* 820DCAE0h */ case   14:  		/* bc 12, CR0_LT, 392 */
		/* 820DCAE0h case   14:*/		if ( regs.CR[0].lt ) { return 0x820DCC68;  }
		/* 820DCAE0h case   14:*/		return 0x820DCAE4;
		  /* 820DCAE4h */ case   15:  		/* mr R7, R31 */
		/* 820DCAE4h case   15:*/		regs.R7 = regs.R31;
		/* 820DCAE4h case   15:*/		return 0x820DCAE8;
		  /* 820DCAE8h */ case   16:  		/* mr R6, R31 */
		/* 820DCAE8h case   16:*/		regs.R6 = regs.R31;
		/* 820DCAE8h case   16:*/		return 0x820DCAEC;
		  /* 820DCAECh */ case   17:  		/* mr R5, R28 */
		/* 820DCAECh case   17:*/		regs.R5 = regs.R28;
		/* 820DCAECh case   17:*/		return 0x820DCAF0;
		  /* 820DCAF0h */ case   18:  		/* li R4, 32 */
		/* 820DCAF0h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DCAF0h case   18:*/		return 0x820DCAF4;
		  /* 820DCAF4h */ case   19:  		/* addi R3, R1, 192 */
		/* 820DCAF4h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DCAF4h case   19:*/		return 0x820DCAF8;
		  /* 820DCAF8h */ case   20:  		/* bl -238776 */
		/* 820DCAF8h case   20:*/		regs.LR = 0x820DCAFC; return 0x820A2640;
		/* 820DCAF8h case   20:*/		return 0x820DCAFC;
		  /* 820DCAFCh */ case   21:  		/* mr R7, R31 */
		/* 820DCAFCh case   21:*/		regs.R7 = regs.R31;
		/* 820DCAFCh case   21:*/		return 0x820DCB00;
		  /* 820DCB00h */ case   22:  		/* mr R6, R31 */
		/* 820DCB00h case   22:*/		regs.R6 = regs.R31;
		/* 820DCB00h case   22:*/		return 0x820DCB04;
		  /* 820DCB04h */ case   23:  		/* mr R5, R27 */
		/* 820DCB04h case   23:*/		regs.R5 = regs.R27;
		/* 820DCB04h case   23:*/		return 0x820DCB08;
		  /* 820DCB08h */ case   24:  		/* li R4, 32 */
		/* 820DCB08h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DCB08h case   24:*/		return 0x820DCB0C;
		  /* 820DCB0Ch */ case   25:  		/* addi R3, R1, 224 */
		/* 820DCB0Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820DCB0Ch case   25:*/		return 0x820DCB10;
		  /* 820DCB10h */ case   26:  		/* bl -238800 */
		/* 820DCB10h case   26:*/		regs.LR = 0x820DCB14; return 0x820A2640;
		/* 820DCB10h case   26:*/		return 0x820DCB14;
		  /* 820DCB14h */ case   27:  		/* mr R6, R31 */
		/* 820DCB14h case   27:*/		regs.R6 = regs.R31;
		/* 820DCB14h case   27:*/		return 0x820DCB18;
		  /* 820DCB18h */ case   28:  		/* addi R5, R1, 128 */
		/* 820DCB18h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DCB18h case   28:*/		return 0x820DCB1C;
		  /* 820DCB1Ch */ case   29:  		/* li R4, 32 */
		/* 820DCB1Ch case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DCB1Ch case   29:*/		return 0x820DCB20;
		  /* 820DCB20h */ case   30:  		/* addi R3, R1, 160 */
		/* 820DCB20h case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DCB20h case   30:*/		return 0x820DCB24;
		  /* 820DCB24h */ case   31:  		/* bl -238820 */
		/* 820DCB24h case   31:*/		regs.LR = 0x820DCB28; return 0x820A2640;
		/* 820DCB24h case   31:*/		return 0x820DCB28;
		  /* 820DCB28h */ case   32:  		/* mr R4, R29 */
		/* 820DCB28h case   32:*/		regs.R4 = regs.R29;
		/* 820DCB28h case   32:*/		return 0x820DCB2C;
		  /* 820DCB2Ch */ case   33:  		/* addi R5, R1, 160 */
		/* 820DCB2Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DCB2Ch case   33:*/		return 0x820DCB30;
		  /* 820DCB30h */ case   34:  		/* mr R3, R30 */
		/* 820DCB30h case   34:*/		regs.R3 = regs.R30;
		/* 820DCB30h case   34:*/		return 0x820DCB34;
		  /* 820DCB34h */ case   35:  		/* bl -10844 */
		/* 820DCB34h case   35:*/		regs.LR = 0x820DCB38; return 0x820DA0D8;
		/* 820DCB34h case   35:*/		return 0x820DCB38;
		  /* 820DCB38h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820DCB38h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCB38h case   36:*/		return 0x820DCB3C;
		  /* 820DCB3Ch */ case   37:  		/* bc 12, CR0_LT, 300 */
		/* 820DCB3Ch case   37:*/		if ( regs.CR[0].lt ) { return 0x820DCC68;  }
		/* 820DCB3Ch case   37:*/		return 0x820DCB40;
		  /* 820DCB40h */ case   38:  		/* lwz R11, <#[R30]> */
		/* 820DCB40h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820DCB40h case   38:*/		return 0x820DCB44;
		  /* 820DCB44h */ case   39:  		/* addi R5, R1, 192 */
		/* 820DCB44h case   39:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820DCB44h case   39:*/		return 0x820DCB48;
		  /* 820DCB48h */ case   40:  		/* addi R4, R1, 224 */
		/* 820DCB48h case   40:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xE0);
		/* 820DCB48h case   40:*/		return 0x820DCB4C;
		  /* 820DCB4Ch */ case   41:  		/* mr R3, R30 */
		/* 820DCB4Ch case   41:*/		regs.R3 = regs.R30;
		/* 820DCB4Ch case   41:*/		return 0x820DCB50;
		  /* 820DCB50h */ case   42:  		/* lwz R11, <#[R11 + 512]> */
		/* 820DCB50h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000200) );
		/* 820DCB50h case   42:*/		return 0x820DCB54;
		  /* 820DCB54h */ case   43:  		/* mtspr CTR, R11 */
		/* 820DCB54h case   43:*/		regs.CTR = regs.R11;
		/* 820DCB54h case   43:*/		return 0x820DCB58;
		  /* 820DCB58h */ case   44:  		/* bcctrl 20, CR0_LT */
		/* 820DCB58h case   44:*/		if ( 1 ) { regs.LR = 0x820DCB5C; return (uint32)regs.CTR; }
		/* 820DCB58h case   44:*/		return 0x820DCB5C;
		  /* 820DCB5Ch */ case   45:  		/* cmpwi CR0, R3, 0 */
		/* 820DCB5Ch case   45:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCB5Ch case   45:*/		return 0x820DCB60;
		  /* 820DCB60h */ case   46:  		/* bc 12, CR0_LT, 264 */
		/* 820DCB60h case   46:*/		if ( regs.CR[0].lt ) { return 0x820DCC68;  }
		/* 820DCB60h case   46:*/		return 0x820DCB64;
		  /* 820DCB64h */ case   47:  		/* mr R4, R26 */
		/* 820DCB64h case   47:*/		regs.R4 = regs.R26;
		/* 820DCB64h case   47:*/		return 0x820DCB68;
		  /* 820DCB68h */ case   48:  		/* mr R3, R30 */
		/* 820DCB68h case   48:*/		regs.R3 = regs.R30;
		/* 820DCB68h case   48:*/		return 0x820DCB6C;
		  /* 820DCB6Ch */ case   49:  		/* bl -10900 */
		/* 820DCB6Ch case   49:*/		regs.LR = 0x820DCB70; return 0x820DA0D8;
		/* 820DCB6Ch case   49:*/		return 0x820DCB70;
		  /* 820DCB70h */ case   50:  		/* cmpwi CR0, R3, 0 */
		/* 820DCB70h case   50:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCB70h case   50:*/		return 0x820DCB74;
		  /* 820DCB74h */ case   51:  		/* bc 12, CR0_LT, 244 */
		/* 820DCB74h case   51:*/		if ( regs.CR[0].lt ) { return 0x820DCC68;  }
		/* 820DCB74h case   51:*/		return 0x820DCB78;
		  /* 820DCB78h */ case   52:  		/* lwz R11, <#[R30 + 1816]> */
		/* 820DCB78h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000718) );
		/* 820DCB78h case   52:*/		return 0x820DCB7C;
		  /* 820DCB7Ch */ case   53:  		/* addi R31, R31, 1 */
		/* 820DCB7Ch case   53:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820DCB7Ch case   53:*/		return 0x820DCB80;
		  /* 820DCB80h */ case   54:  		/* cmplw CR6, R31, R11 */
		/* 820DCB80h case   54:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820DCB80h case   54:*/		return 0x820DCB84;
		  /* 820DCB84h */ case   55:  		/* bc 12, CR6_LT, -176 */
		/* 820DCB84h case   55:*/		if ( regs.CR[6].lt ) { return 0x820DCAD4;  }
		/* 820DCB84h case   55:*/		return 0x820DCB88;
	}
	return 0x820DCB88;
} // Block from 820DCAA8h-820DCB88h (56 instructions)

//////////////////////////////////////////////////////
// Block at 820DCB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCB88);
		  /* 820DCB88h */ case    0:  		/* li R31, 0 */
		/* 820DCB88h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820DCB88h case    0:*/		return 0x820DCB8C;
		  /* 820DCB8Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DCB8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DCB8Ch case    1:*/		return 0x820DCB90;
		  /* 820DCB90h */ case    2:  		/* bc 12, CR6_EQ, 212 */
		/* 820DCB90h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DCC64;  }
		/* 820DCB90h case    2:*/		return 0x820DCB94;
		  /* 820DCB94h */ case    3:  		/* mr R3, R30 */
		/* 820DCB94h case    3:*/		regs.R3 = regs.R30;
		/* 820DCB94h case    3:*/		return 0x820DCB98;
		  /* 820DCB98h */ case    4:  		/* bl -10728 */
		/* 820DCB98h case    4:*/		regs.LR = 0x820DCB9C; return 0x820DA1B0;
		/* 820DCB98h case    4:*/		return 0x820DCB9C;
		  /* 820DCB9Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DCB9Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCB9Ch case    5:*/		return 0x820DCBA0;
		  /* 820DCBA0h */ case    6:  		/* bc 12, CR0_LT, 200 */
		/* 820DCBA0h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DCC68;  }
		/* 820DCBA0h case    6:*/		return 0x820DCBA4;
		  /* 820DCBA4h */ case    7:  		/* mr R7, R31 */
		/* 820DCBA4h case    7:*/		regs.R7 = regs.R31;
		/* 820DCBA4h case    7:*/		return 0x820DCBA8;
		  /* 820DCBA8h */ case    8:  		/* mr R6, R31 */
		/* 820DCBA8h case    8:*/		regs.R6 = regs.R31;
		/* 820DCBA8h case    8:*/		return 0x820DCBAC;
		  /* 820DCBACh */ case    9:  		/* mr R5, R25 */
		/* 820DCBACh case    9:*/		regs.R5 = regs.R25;
		/* 820DCBACh case    9:*/		return 0x820DCBB0;
		  /* 820DCBB0h */ case   10:  		/* li R4, 32 */
		/* 820DCBB0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DCBB0h case   10:*/		return 0x820DCBB4;
		  /* 820DCBB4h */ case   11:  		/* addi R3, R1, 288 */
		/* 820DCBB4h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x120);
		/* 820DCBB4h case   11:*/		return 0x820DCBB8;
		  /* 820DCBB8h */ case   12:  		/* bl -238968 */
		/* 820DCBB8h case   12:*/		regs.LR = 0x820DCBBC; return 0x820A2640;
		/* 820DCBB8h case   12:*/		return 0x820DCBBC;
		  /* 820DCBBCh */ case   13:  		/* mr R7, R31 */
		/* 820DCBBCh case   13:*/		regs.R7 = regs.R31;
		/* 820DCBBCh case   13:*/		return 0x820DCBC0;
		  /* 820DCBC0h */ case   14:  		/* mr R6, R31 */
		/* 820DCBC0h case   14:*/		regs.R6 = regs.R31;
		/* 820DCBC0h case   14:*/		return 0x820DCBC4;
		  /* 820DCBC4h */ case   15:  		/* mr R5, R28 */
		/* 820DCBC4h case   15:*/		regs.R5 = regs.R28;
		/* 820DCBC4h case   15:*/		return 0x820DCBC8;
		  /* 820DCBC8h */ case   16:  		/* li R4, 32 */
		/* 820DCBC8h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DCBC8h case   16:*/		return 0x820DCBCC;
		  /* 820DCBCCh */ case   17:  		/* addi R3, R1, 192 */
		/* 820DCBCCh case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DCBCCh case   17:*/		return 0x820DCBD0;
		  /* 820DCBD0h */ case   18:  		/* bl -238992 */
		/* 820DCBD0h case   18:*/		regs.LR = 0x820DCBD4; return 0x820A2640;
		/* 820DCBD0h case   18:*/		return 0x820DCBD4;
		  /* 820DCBD4h */ case   19:  		/* mr R7, R31 */
		/* 820DCBD4h case   19:*/		regs.R7 = regs.R31;
		/* 820DCBD4h case   19:*/		return 0x820DCBD8;
		  /* 820DCBD8h */ case   20:  		/* mr R6, R31 */
		/* 820DCBD8h case   20:*/		regs.R6 = regs.R31;
		/* 820DCBD8h case   20:*/		return 0x820DCBDC;
		  /* 820DCBDCh */ case   21:  		/* mr R5, R24 */
		/* 820DCBDCh case   21:*/		regs.R5 = regs.R24;
		/* 820DCBDCh case   21:*/		return 0x820DCBE0;
		  /* 820DCBE0h */ case   22:  		/* li R4, 32 */
		/* 820DCBE0h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DCBE0h case   22:*/		return 0x820DCBE4;
		  /* 820DCBE4h */ case   23:  		/* addi R3, R1, 256 */
		/* 820DCBE4h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 820DCBE4h case   23:*/		return 0x820DCBE8;
		  /* 820DCBE8h */ case   24:  		/* bl -239016 */
		/* 820DCBE8h case   24:*/		regs.LR = 0x820DCBEC; return 0x820A2640;
		/* 820DCBE8h case   24:*/		return 0x820DCBEC;
		  /* 820DCBECh */ case   25:  		/* mr R6, R31 */
		/* 820DCBECh case   25:*/		regs.R6 = regs.R31;
		/* 820DCBECh case   25:*/		return 0x820DCBF0;
		  /* 820DCBF0h */ case   26:  		/* addi R5, R1, 128 */
		/* 820DCBF0h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DCBF0h case   26:*/		return 0x820DCBF4;
		  /* 820DCBF4h */ case   27:  		/* li R4, 32 */
		/* 820DCBF4h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DCBF4h case   27:*/		return 0x820DCBF8;
		  /* 820DCBF8h */ case   28:  		/* addi R3, R1, 160 */
		/* 820DCBF8h case   28:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DCBF8h case   28:*/		return 0x820DCBFC;
		  /* 820DCBFCh */ case   29:  		/* bl -239036 */
		/* 820DCBFCh case   29:*/		regs.LR = 0x820DCC00; return 0x820A2640;
		/* 820DCBFCh case   29:*/		return 0x820DCC00;
		  /* 820DCC00h */ case   30:  		/* mr R4, R29 */
		/* 820DCC00h case   30:*/		regs.R4 = regs.R29;
		/* 820DCC00h case   30:*/		return 0x820DCC04;
		  /* 820DCC04h */ case   31:  		/* addi R5, R1, 256 */
		/* 820DCC04h case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 820DCC04h case   31:*/		return 0x820DCC08;
		  /* 820DCC08h */ case   32:  		/* mr R3, R30 */
		/* 820DCC08h case   32:*/		regs.R3 = regs.R30;
		/* 820DCC08h case   32:*/		return 0x820DCC0C;
		  /* 820DCC0Ch */ case   33:  		/* bl -11060 */
		/* 820DCC0Ch case   33:*/		regs.LR = 0x820DCC10; return 0x820DA0D8;
		/* 820DCC0Ch case   33:*/		return 0x820DCC10;
		  /* 820DCC10h */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 820DCC10h case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCC10h case   34:*/		return 0x820DCC14;
		  /* 820DCC14h */ case   35:  		/* bc 12, CR0_LT, 84 */
		/* 820DCC14h case   35:*/		if ( regs.CR[0].lt ) { return 0x820DCC68;  }
		/* 820DCC14h case   35:*/		return 0x820DCC18;
		  /* 820DCC18h */ case   36:  		/* lwz R11, <#[R30]> */
		/* 820DCC18h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820DCC18h case   36:*/		return 0x820DCC1C;
		  /* 820DCC1Ch */ case   37:  		/* addi R6, R1, 192 */
		/* 820DCC1Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820DCC1Ch case   37:*/		return 0x820DCC20;
		  /* 820DCC20h */ case   38:  		/* addi R5, R1, 288 */
		/* 820DCC20h case   38:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 820DCC20h case   38:*/		return 0x820DCC24;
		  /* 820DCC24h */ case   39:  		/* addi R4, R1, 160 */
		/* 820DCC24h case   39:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820DCC24h case   39:*/		return 0x820DCC28;
		  /* 820DCC28h */ case   40:  		/* mr R3, R30 */
		/* 820DCC28h case   40:*/		regs.R3 = regs.R30;
		/* 820DCC28h case   40:*/		return 0x820DCC2C;
		  /* 820DCC2Ch */ case   41:  		/* lwz R11, <#[R11 + 520]> */
		/* 820DCC2Ch case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000208) );
		/* 820DCC2Ch case   41:*/		return 0x820DCC30;
		  /* 820DCC30h */ case   42:  		/* mtspr CTR, R11 */
		/* 820DCC30h case   42:*/		regs.CTR = regs.R11;
		/* 820DCC30h case   42:*/		return 0x820DCC34;
		  /* 820DCC34h */ case   43:  		/* bcctrl 20, CR0_LT */
		/* 820DCC34h case   43:*/		if ( 1 ) { regs.LR = 0x820DCC38; return (uint32)regs.CTR; }
		/* 820DCC34h case   43:*/		return 0x820DCC38;
		  /* 820DCC38h */ case   44:  		/* cmpwi CR0, R3, 0 */
		/* 820DCC38h case   44:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCC38h case   44:*/		return 0x820DCC3C;
		  /* 820DCC3Ch */ case   45:  		/* bc 12, CR0_LT, 44 */
		/* 820DCC3Ch case   45:*/		if ( regs.CR[0].lt ) { return 0x820DCC68;  }
		/* 820DCC3Ch case   45:*/		return 0x820DCC40;
		  /* 820DCC40h */ case   46:  		/* mr R4, R26 */
		/* 820DCC40h case   46:*/		regs.R4 = regs.R26;
		/* 820DCC40h case   46:*/		return 0x820DCC44;
		  /* 820DCC44h */ case   47:  		/* mr R3, R30 */
		/* 820DCC44h case   47:*/		regs.R3 = regs.R30;
		/* 820DCC44h case   47:*/		return 0x820DCC48;
		  /* 820DCC48h */ case   48:  		/* bl -11120 */
		/* 820DCC48h case   48:*/		regs.LR = 0x820DCC4C; return 0x820DA0D8;
		/* 820DCC48h case   48:*/		return 0x820DCC4C;
		  /* 820DCC4Ch */ case   49:  		/* cmpwi CR0, R3, 0 */
		/* 820DCC4Ch case   49:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCC4Ch case   49:*/		return 0x820DCC50;
		  /* 820DCC50h */ case   50:  		/* bc 12, CR0_LT, 24 */
		/* 820DCC50h case   50:*/		if ( regs.CR[0].lt ) { return 0x820DCC68;  }
		/* 820DCC50h case   50:*/		return 0x820DCC54;
		  /* 820DCC54h */ case   51:  		/* lwz R11, <#[R30 + 1816]> */
		/* 820DCC54h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000718) );
		/* 820DCC54h case   51:*/		return 0x820DCC58;
		  /* 820DCC58h */ case   52:  		/* addi R31, R31, 1 */
		/* 820DCC58h case   52:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820DCC58h case   52:*/		return 0x820DCC5C;
		  /* 820DCC5Ch */ case   53:  		/* cmplw CR6, R31, R11 */
		/* 820DCC5Ch case   53:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820DCC5Ch case   53:*/		return 0x820DCC60;
		  /* 820DCC60h */ case   54:  		/* bc 12, CR6_LT, -204 */
		/* 820DCC60h case   54:*/		if ( regs.CR[6].lt ) { return 0x820DCB94;  }
		/* 820DCC60h case   54:*/		return 0x820DCC64;
	}
	return 0x820DCC64;
} // Block from 820DCB88h-820DCC64h (55 instructions)

//////////////////////////////////////////////////////
// Block at 820DCC64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCC64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCC64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCC64);
		  /* 820DCC64h */ case    0:  		/* li R3, 0 */
		/* 820DCC64h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DCC64h case    0:*/		return 0x820DCC68;
	}
	return 0x820DCC68;
} // Block from 820DCC64h-820DCC68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DCC68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCC68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCC68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCC68);
		  /* 820DCC68h */ case    0:  		/* addi R1, R1, 400 */
		/* 820DCC68h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x190);
		/* 820DCC68h case    0:*/		return 0x820DCC6C;
		  /* 820DCC6Ch */ case    1:  		/* b -309716 */
		/* 820DCC6Ch case    1:*/		return 0x82091298;
		/* 820DCC6Ch case    1:*/		return 0x820DCC70;
	}
	return 0x820DCC70;
} // Block from 820DCC68h-820DCC70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DCC70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCC70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCC70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCC70);
		  /* 820DCC70h */ case    0:  		/* mfspr R12, LR */
		/* 820DCC70h case    0:*/		regs.R12 = regs.LR;
		/* 820DCC70h case    0:*/		return 0x820DCC74;
		  /* 820DCC74h */ case    1:  		/* bl -309796 */
		/* 820DCC74h case    1:*/		regs.LR = 0x820DCC78; return 0x82091250;
		/* 820DCC74h case    1:*/		return 0x820DCC78;
		  /* 820DCC78h */ case    2:  		/* stwu R1, <#[R1 - 288]> */
		/* 820DCC78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 820DCC78h case    2:*/		return 0x820DCC7C;
		  /* 820DCC7Ch */ case    3:  		/* li R11, 5 */
		/* 820DCC7Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 820DCC7Ch case    3:*/		return 0x820DCC80;
		  /* 820DCC80h */ case    4:  		/* mr R27, R4 */
		/* 820DCC80h case    4:*/		regs.R27 = regs.R4;
		/* 820DCC80h case    4:*/		return 0x820DCC84;
		  /* 820DCC84h */ case    5:  		/* mr R26, R5 */
		/* 820DCC84h case    5:*/		regs.R26 = regs.R5;
		/* 820DCC84h case    5:*/		return 0x820DCC88;
		  /* 820DCC88h */ case    6:  		/* li R7, 0 */
		/* 820DCC88h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DCC88h case    6:*/		return 0x820DCC8C;
		  /* 820DCC8Ch */ case    7:  		/* rlwimi R4, R11, 29, 0, 20 */
		/* 820DCC8Ch case    7:*/		cpu::op::rlwimi<0,29,0,20>(regs,&regs.R4,regs.R11);
		/* 820DCC8Ch case    7:*/		return 0x820DCC90;
		  /* 820DCC90h */ case    8:  		/* li R6, 64 */
		/* 820DCC90h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x40);
		/* 820DCC90h case    8:*/		return 0x820DCC94;
		  /* 820DCC94h */ case    9:  		/* addi R5, R1, 160 */
		/* 820DCC94h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DCC94h case    9:*/		return 0x820DCC98;
		  /* 820DCC98h */ case   10:  		/* mr R31, R3 */
		/* 820DCC98h case   10:*/		regs.R31 = regs.R3;
		/* 820DCC98h case   10:*/		return 0x820DCC9C;
		  /* 820DCC9Ch */ case   11:  		/* bl -10564 */
		/* 820DCC9Ch case   11:*/		regs.LR = 0x820DCCA0; return 0x820DA358;
		/* 820DCC9Ch case   11:*/		return 0x820DCCA0;
		  /* 820DCCA0h */ case   12:  		/* li R7, 0 */
		/* 820DCCA0h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DCCA0h case   12:*/		return 0x820DCCA4;
		  /* 820DCCA4h */ case   13:  		/* li R6, 0 */
		/* 820DCCA4h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820DCCA4h case   13:*/		return 0x820DCCA8;
		  /* 820DCCA8h */ case   14:  		/* addi R5, R1, 160 */
		/* 820DCCA8h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DCCA8h case   14:*/		return 0x820DCCAC;
		  /* 820DCCACh */ case   15:  		/* li R4, 32 */
		/* 820DCCACh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DCCACh case   15:*/		return 0x820DCCB0;
		  /* 820DCCB0h */ case   16:  		/* addi R3, R1, 128 */
		/* 820DCCB0h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DCCB0h case   16:*/		return 0x820DCCB4;
		  /* 820DCCB4h */ case   17:  		/* bl -239220 */
		/* 820DCCB4h case   17:*/		regs.LR = 0x820DCCB8; return 0x820A2640;
		/* 820DCCB4h case   17:*/		return 0x820DCCB8;
		  /* 820DCCB8h */ case   18:  		/* lis R11, -32254 */
		/* 820DCCB8h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCCB8h case   18:*/		return 0x820DCCBC;
		  /* 820DCCBCh */ case   19:  		/* li R30, 0 */
		/* 820DCCBCh case   19:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DCCBCh case   19:*/		return 0x820DCCC0;
		  /* 820DCCC0h */ case   20:  		/* mr R29, R26 */
		/* 820DCCC0h case   20:*/		regs.R29 = regs.R26;
		/* 820DCCC0h case   20:*/		return 0x820DCCC4;
		  /* 820DCCC4h */ case   21:  		/* addi R28, R11, -30420 */
		/* 820DCCC4h case   21:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFF892C);
		/* 820DCCC4h case   21:*/		return 0x820DCCC8;
		  /* 820DCCC8h */ case   22:  		/* mr R3, R31 */
		/* 820DCCC8h case   22:*/		regs.R3 = regs.R31;
		/* 820DCCC8h case   22:*/		return 0x820DCCCC;
		  /* 820DCCCCh */ case   23:  		/* bl -11036 */
		/* 820DCCCCh case   23:*/		regs.LR = 0x820DCCD0; return 0x820DA1B0;
		/* 820DCCCCh case   23:*/		return 0x820DCCD0;
		  /* 820DCCD0h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820DCCD0h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCCD0h case   24:*/		return 0x820DCCD4;
		  /* 820DCCD4h */ case   25:  		/* bc 12, CR0_LT, 76 */
		/* 820DCCD4h case   25:*/		if ( regs.CR[0].lt ) { return 0x820DCD20;  }
		/* 820DCCD4h case   25:*/		return 0x820DCCD8;
		  /* 820DCCD8h */ case   26:  		/* lfs FR1, <#[R29]> */
		/* 820DCCD8h case   26:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R29 + 0x00000000) );
		/* 820DCCD8h case   26:*/		return 0x820DCCDC;
		  /* 820DCCDCh */ case   27:  		/* mr R4, R28 */
		/* 820DCCDCh case   27:*/		regs.R4 = regs.R28;
		/* 820DCCDCh case   27:*/		return 0x820DCCE0;
		  /* 820DCCE0h */ case   28:  		/* stfd FR1, <#[R1 + 48]> */
		/* 820DCCE0h case   28:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000030) );
		/* 820DCCE0h case   28:*/		return 0x820DCCE4;
		  /* 820DCCE4h */ case   29:  		/* ld R7, <#[R1 + 48]> */
		/* 820DCCE4h case   29:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 820DCCE4h case   29:*/		return 0x820DCCE8;
		  /* 820DCCE8h */ case   30:  		/* mr R6, R30 */
		/* 820DCCE8h case   30:*/		regs.R6 = regs.R30;
		/* 820DCCE8h case   30:*/		return 0x820DCCEC;
		  /* 820DCCECh */ case   31:  		/* addi R5, R1, 128 */
		/* 820DCCECh case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DCCECh case   31:*/		return 0x820DCCF0;
		  /* 820DCCF0h */ case   32:  		/* mr R3, R31 */
		/* 820DCCF0h case   32:*/		regs.R3 = regs.R31;
		/* 820DCCF0h case   32:*/		return 0x820DCCF4;
		  /* 820DCCF4h */ case   33:  		/* bl -11292 */
		/* 820DCCF4h case   33:*/		regs.LR = 0x820DCCF8; return 0x820DA0D8;
		/* 820DCCF4h case   33:*/		return 0x820DCCF8;
		  /* 820DCCF8h */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 820DCCF8h case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DCCF8h case   34:*/		return 0x820DCCFC;
		  /* 820DCCFCh */ case   35:  		/* bc 12, CR0_LT, 36 */
		/* 820DCCFCh case   35:*/		if ( regs.CR[0].lt ) { return 0x820DCD20;  }
		/* 820DCCFCh case   35:*/		return 0x820DCD00;
		  /* 820DCD00h */ case   36:  		/* addi R30, R30, 1 */
		/* 820DCD00h case   36:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DCD00h case   36:*/		return 0x820DCD04;
		  /* 820DCD04h */ case   37:  		/* addi R29, R29, 4 */
		/* 820DCD04h case   37:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820DCD04h case   37:*/		return 0x820DCD08;
		  /* 820DCD08h */ case   38:  		/* cmplwi CR6, R30, 4 */
		/* 820DCD08h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 820DCD08h case   38:*/		return 0x820DCD0C;
		  /* 820DCD0Ch */ case   39:  		/* bc 12, CR6_LT, -68 */
		/* 820DCD0Ch case   39:*/		if ( regs.CR[6].lt ) { return 0x820DCCC8;  }
		/* 820DCD0Ch case   39:*/		return 0x820DCD10;
		  /* 820DCD10h */ case   40:  		/* mr R5, R26 */
		/* 820DCD10h case   40:*/		regs.R5 = regs.R26;
		/* 820DCD10h case   40:*/		return 0x820DCD14;
		  /* 820DCD14h */ case   41:  		/* mr R4, R27 */
		/* 820DCD14h case   41:*/		regs.R4 = regs.R27;
		/* 820DCD14h case   41:*/		return 0x820DCD18;
		  /* 820DCD18h */ case   42:  		/* mr R3, R31 */
		/* 820DCD18h case   42:*/		regs.R3 = regs.R31;
		/* 820DCD18h case   42:*/		return 0x820DCD1C;
		  /* 820DCD1Ch */ case   43:  		/* bl 104916 */
		/* 820DCD1Ch case   43:*/		regs.LR = 0x820DCD20; return 0x820F66F0;
		/* 820DCD1Ch case   43:*/		return 0x820DCD20;
	}
	return 0x820DCD20;
} // Block from 820DCC70h-820DCD20h (44 instructions)

//////////////////////////////////////////////////////
// Block at 820DCD20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCD20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCD20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCD20);
		  /* 820DCD20h */ case    0:  		/* addi R1, R1, 288 */
		/* 820DCD20h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 820DCD20h case    0:*/		return 0x820DCD24;
		  /* 820DCD24h */ case    1:  		/* b -309892 */
		/* 820DCD24h case    1:*/		return 0x820912A0;
		/* 820DCD24h case    1:*/		return 0x820DCD28;
	}
	return 0x820DCD28;
} // Block from 820DCD20h-820DCD28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DCD28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCD28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCD28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCD28);
		  /* 820DCD28h */ case    0:  		/* mfspr R12, LR */
		/* 820DCD28h case    0:*/		regs.R12 = regs.LR;
		/* 820DCD28h case    0:*/		return 0x820DCD2C;
		  /* 820DCD2Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DCD2Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCD2Ch case    1:*/		return 0x820DCD30;
		  /* 820DCD30h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820DCD30h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820DCD30h case    2:*/		return 0x820DCD34;
		  /* 820DCD34h */ case    3:  		/* mr R10, R4 */
		/* 820DCD34h case    3:*/		regs.R10 = regs.R4;
		/* 820DCD34h case    3:*/		return 0x820DCD38;
		  /* 820DCD38h */ case    4:  		/* mr R11, R5 */
		/* 820DCD38h case    4:*/		regs.R11 = regs.R5;
		/* 820DCD38h case    4:*/		return 0x820DCD3C;
		  /* 820DCD3Ch */ case    5:  		/* cmplw CR6, R5, R6 */
		/* 820DCD3Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R6);
		/* 820DCD3Ch case    5:*/		return 0x820DCD40;
		  /* 820DCD40h */ case    6:  		/* bc 4, CR6_EQ, 112 */
		/* 820DCD40h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820DCDB0;  }
		/* 820DCD40h case    6:*/		return 0x820DCD44;
		  /* 820DCD44h */ case    7:  		/* cmplw CR6, R5, R7 */
		/* 820DCD44h case    7:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R7);
		/* 820DCD44h case    7:*/		return 0x820DCD48;
		  /* 820DCD48h */ case    8:  		/* bc 4, CR6_EQ, 104 */
		/* 820DCD48h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820DCDB0;  }
		/* 820DCD48h case    8:*/		return 0x820DCD4C;
		  /* 820DCD4Ch */ case    9:  		/* cmplw CR6, R5, R8 */
		/* 820DCD4Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R8);
		/* 820DCD4Ch case    9:*/		return 0x820DCD50;
		  /* 820DCD50h */ case   10:  		/* bc 4, CR6_EQ, 96 */
		/* 820DCD50h case   10:*/		if ( !regs.CR[6].eq ) { return 0x820DCDB0;  }
		/* 820DCD50h case   10:*/		return 0x820DCD54;
		  /* 820DCD54h */ case   11:  		/* cmplwi CR6, R5, 1 */
		/* 820DCD54h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000001);
		/* 820DCD54h case   11:*/		return 0x820DCD58;
		  /* 820DCD58h */ case   12:  		/* bc 12, CR6_LT, 68 */
		/* 820DCD58h case   12:*/		if ( regs.CR[6].lt ) { return 0x820DCD9C;  }
		/* 820DCD58h case   12:*/		return 0x820DCD5C;
		  /* 820DCD5Ch */ case   13:  		/* bc 12, CR6_EQ, 52 */
		/* 820DCD5Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x820DCD90;  }
		/* 820DCD5Ch case   13:*/		return 0x820DCD60;
		  /* 820DCD60h */ case   14:  		/* cmplwi CR6, R5, 3 */
		/* 820DCD60h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000003);
		/* 820DCD60h case   14:*/		return 0x820DCD64;
		  /* 820DCD64h */ case   15:  		/* bc 12, CR6_LT, 32 */
		/* 820DCD64h case   15:*/		if ( regs.CR[6].lt ) { return 0x820DCD84;  }
		/* 820DCD64h case   15:*/		return 0x820DCD68;
		  /* 820DCD68h */ case   16:  		/* bc 12, CR6_EQ, 16 */
		/* 820DCD68h case   16:*/		if ( regs.CR[6].eq ) { return 0x820DCD78;  }
		/* 820DCD68h case   16:*/		return 0x820DCD6C;
		  /* 820DCD6Ch */ case   17:  		/* lis R3, -32768 */
		/* 820DCD6Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820DCD6Ch case   17:*/		return 0x820DCD70;
		  /* 820DCD70h */ case   18:  		/* ori R3, R3, 16389 */
		/* 820DCD70h case   18:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820DCD70h case   18:*/		return 0x820DCD74;
		  /* 820DCD74h */ case   19:  		/* b 120 */
		/* 820DCD74h case   19:*/		return 0x820DCDEC;
		/* 820DCD74h case   19:*/		return 0x820DCD78;
	}
	return 0x820DCD78;
} // Block from 820DCD28h-820DCD78h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820DCD78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCD78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCD78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCD78);
		  /* 820DCD78h */ case    0:  		/* lis R11, -32254 */
		/* 820DCD78h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCD78h case    0:*/		return 0x820DCD7C;
		  /* 820DCD7Ch */ case    1:  		/* addi R4, R11, -30332 */
		/* 820DCD7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8984);
		/* 820DCD7Ch case    1:*/		return 0x820DCD80;
		  /* 820DCD80h */ case    2:  		/* b 36 */
		/* 820DCD80h case    2:*/		return 0x820DCDA4;
		/* 820DCD80h case    2:*/		return 0x820DCD84;
	}
	return 0x820DCD84;
} // Block from 820DCD78h-820DCD84h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DCD84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCD84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCD84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCD84);
		  /* 820DCD84h */ case    0:  		/* lis R11, -32254 */
		/* 820DCD84h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCD84h case    0:*/		return 0x820DCD88;
		  /* 820DCD88h */ case    1:  		/* addi R4, R11, -30348 */
		/* 820DCD88h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8974);
		/* 820DCD88h case    1:*/		return 0x820DCD8C;
		  /* 820DCD8Ch */ case    2:  		/* b 24 */
		/* 820DCD8Ch case    2:*/		return 0x820DCDA4;
		/* 820DCD8Ch case    2:*/		return 0x820DCD90;
	}
	return 0x820DCD90;
} // Block from 820DCD84h-820DCD90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DCD90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCD90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCD90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCD90);
		  /* 820DCD90h */ case    0:  		/* lis R11, -32254 */
		/* 820DCD90h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCD90h case    0:*/		return 0x820DCD94;
		  /* 820DCD94h */ case    1:  		/* addi R4, R11, -30364 */
		/* 820DCD94h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8964);
		/* 820DCD94h case    1:*/		return 0x820DCD98;
		  /* 820DCD98h */ case    2:  		/* b 12 */
		/* 820DCD98h case    2:*/		return 0x820DCDA4;
		/* 820DCD98h case    2:*/		return 0x820DCD9C;
	}
	return 0x820DCD9C;
} // Block from 820DCD90h-820DCD9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DCD9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCD9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCD9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCD9C);
		  /* 820DCD9Ch */ case    0:  		/* lis R11, -32254 */
		/* 820DCD9Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCD9Ch case    0:*/		return 0x820DCDA0;
		  /* 820DCDA0h */ case    1:  		/* addi R4, R11, -30380 */
		/* 820DCDA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8954);
		/* 820DCDA0h case    1:*/		return 0x820DCDA4;
	}
	return 0x820DCDA4;
} // Block from 820DCD9Ch-820DCDA4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DCDA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCDA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCDA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCDA4);
		  /* 820DCDA4h */ case    0:  		/* mr R5, R10 */
		/* 820DCDA4h case    0:*/		regs.R5 = regs.R10;
		/* 820DCDA4h case    0:*/		return 0x820DCDA8;
		  /* 820DCDA8h */ case    1:  		/* bl -11472 */
		/* 820DCDA8h case    1:*/		regs.LR = 0x820DCDAC; return 0x820DA0D8;
		/* 820DCDA8h case    1:*/		return 0x820DCDAC;
		  /* 820DCDACh */ case    2:  		/* b 64 */
		/* 820DCDACh case    2:*/		return 0x820DCDEC;
		/* 820DCDACh case    2:*/		return 0x820DCDB0;
	}
	return 0x820DCDB0;
} // Block from 820DCDA4h-820DCDB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DCDB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCDB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCDB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCDB0);
		  /* 820DCDB0h */ case    0:  		/* or R9, R11, R6 */
		/* 820DCDB0h case    0:*/		cpu::op::or<0>(regs,&regs.R9,regs.R11,regs.R6);
		/* 820DCDB0h case    0:*/		return 0x820DCDB4;
		  /* 820DCDB4h */ case    1:  		/* lis R5, -32254 */
		/* 820DCDB4h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8202);
		/* 820DCDB4h case    1:*/		return 0x820DCDB8;
		  /* 820DCDB8h */ case    2:  		/* or R9, R9, R7 */
		/* 820DCDB8h case    2:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 820DCDB8h case    2:*/		return 0x820DCDBC;
		  /* 820DCDBCh */ case    3:  		/* addi R4, R5, -30400 */
		/* 820DCDBCh case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R5,0xFFFF8940);
		/* 820DCDBCh case    3:*/		return 0x820DCDC0;
		  /* 820DCDC0h */ case    4:  		/* or R9, R9, R8 */
		/* 820DCDC0h case    4:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 820DCDC0h case    4:*/		return 0x820DCDC4;
		  /* 820DCDC4h */ case    5:  		/* mr R5, R10 */
		/* 820DCDC4h case    5:*/		regs.R5 = regs.R10;
		/* 820DCDC4h case    5:*/		return 0x820DCDC8;
		  /* 820DCDC8h */ case    6:  		/* rlwinm R10, R9, 0, 0, 29 */
		/* 820DCDC8h case    6:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R10,regs.R9);
		/* 820DCDC8h case    6:*/		return 0x820DCDCC;
		  /* 820DCDCCh */ case    7:  		/* or R11, R10, R11 */
		/* 820DCDCCh case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820DCDCCh case    7:*/		return 0x820DCDD0;
		  /* 820DCDD0h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DCDD0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DCDD0h case    8:*/		return 0x820DCDD4;
		  /* 820DCDD4h */ case    9:  		/* or R11, R11, R6 */
		/* 820DCDD4h case    9:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 820DCDD4h case    9:*/		return 0x820DCDD8;
		  /* 820DCDD8h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DCDD8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DCDD8h case   10:*/		return 0x820DCDDC;
		  /* 820DCDDCh */ case   11:  		/* or R11, R11, R7 */
		/* 820DCDDCh case   11:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 820DCDDCh case   11:*/		return 0x820DCDE0;
		  /* 820DCDE0h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DCDE0h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DCDE0h case   12:*/		return 0x820DCDE4;
		  /* 820DCDE4h */ case   13:  		/* or R6, R11, R8 */
		/* 820DCDE4h case   13:*/		cpu::op::or<0>(regs,&regs.R6,regs.R11,regs.R8);
		/* 820DCDE4h case   13:*/		return 0x820DCDE8;
		  /* 820DCDE8h */ case   14:  		/* bl -11536 */
		/* 820DCDE8h case   14:*/		regs.LR = 0x820DCDEC; return 0x820DA0D8;
		/* 820DCDE8h case   14:*/		return 0x820DCDEC;
	}
	return 0x820DCDEC;
} // Block from 820DCDB0h-820DCDECh (15 instructions)

//////////////////////////////////////////////////////
// Block at 820DCDECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCDEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCDEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCDEC);
		  /* 820DCDECh */ case    0:  		/* addi R1, R1, 144 */
		/* 820DCDECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820DCDECh case    0:*/		return 0x820DCDF0;
		  /* 820DCDF0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DCDF0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCDF0h case    1:*/		return 0x820DCDF4;
		  /* 820DCDF4h */ case    2:  		/* mtspr LR, R12 */
		/* 820DCDF4h case    2:*/		regs.LR = regs.R12;
		/* 820DCDF4h case    2:*/		return 0x820DCDF8;
		  /* 820DCDF8h */ case    3:  		/* bclr 20, CR0_LT */
		/* 820DCDF8h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DCDF8h case    3:*/		return 0x820DCDFC;
	}
	return 0x820DCDFC;
} // Block from 820DCDECh-820DCDFCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DCDFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCDFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCDFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCDFC);
		  /* 820DCDFCh */ case    0:  		/* nop */
		/* 820DCDFCh case    0:*/		cpu::op::nop();
		/* 820DCDFCh case    0:*/		return 0x820DCE00;
	}
	return 0x820DCE00;
} // Block from 820DCDFCh-820DCE00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DCE00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCE00);
		  /* 820DCE00h */ case    0:  		/* mfspr R12, LR */
		/* 820DCE00h case    0:*/		regs.R12 = regs.LR;
		/* 820DCE00h case    0:*/		return 0x820DCE04;
		  /* 820DCE04h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DCE04h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCE04h case    1:*/		return 0x820DCE08;
		  /* 820DCE08h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DCE08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DCE08h case    2:*/		return 0x820DCE0C;
		  /* 820DCE0Ch */ case    3:  		/* mr R11, R4 */
		/* 820DCE0Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DCE0Ch case    3:*/		return 0x820DCE10;
		  /* 820DCE10h */ case    4:  		/* lis R10, -32254 */
		/* 820DCE10h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DCE10h case    4:*/		return 0x820DCE14;
		  /* 820DCE14h */ case    5:  		/* mr R6, R5 */
		/* 820DCE14h case    5:*/		regs.R6 = regs.R5;
		/* 820DCE14h case    5:*/		return 0x820DCE18;
		  /* 820DCE18h */ case    6:  		/* addi R4, R10, -30316 */
		/* 820DCE18h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8994);
		/* 820DCE18h case    6:*/		return 0x820DCE1C;
		  /* 820DCE1Ch */ case    7:  		/* mr R5, R11 */
		/* 820DCE1Ch case    7:*/		regs.R5 = regs.R11;
		/* 820DCE1Ch case    7:*/		return 0x820DCE20;
		  /* 820DCE20h */ case    8:  		/* bl -11592 */
		/* 820DCE20h case    8:*/		regs.LR = 0x820DCE24; return 0x820DA0D8;
		/* 820DCE20h case    8:*/		return 0x820DCE24;
		  /* 820DCE24h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DCE24h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DCE24h case    9:*/		return 0x820DCE28;
		  /* 820DCE28h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DCE28h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCE28h case   10:*/		return 0x820DCE2C;
		  /* 820DCE2Ch */ case   11:  		/* mtspr LR, R12 */
		/* 820DCE2Ch case   11:*/		regs.LR = regs.R12;
		/* 820DCE2Ch case   11:*/		return 0x820DCE30;
		  /* 820DCE30h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DCE30h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DCE30h case   12:*/		return 0x820DCE34;
	}
	return 0x820DCE34;
} // Block from 820DCE00h-820DCE34h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DCE34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCE34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCE34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCE34);
		  /* 820DCE34h */ case    0:  		/* nop */
		/* 820DCE34h case    0:*/		cpu::op::nop();
		/* 820DCE34h case    0:*/		return 0x820DCE38;
	}
	return 0x820DCE38;
} // Block from 820DCE34h-820DCE38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DCE38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCE38);
		  /* 820DCE38h */ case    0:  		/* mfspr R12, LR */
		/* 820DCE38h case    0:*/		regs.R12 = regs.LR;
		/* 820DCE38h case    0:*/		return 0x820DCE3C;
		  /* 820DCE3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DCE3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCE3Ch case    1:*/		return 0x820DCE40;
		  /* 820DCE40h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DCE40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DCE40h case    2:*/		return 0x820DCE44;
		  /* 820DCE44h */ case    3:  		/* mr R11, R4 */
		/* 820DCE44h case    3:*/		regs.R11 = regs.R4;
		/* 820DCE44h case    3:*/		return 0x820DCE48;
		  /* 820DCE48h */ case    4:  		/* lis R10, -32254 */
		/* 820DCE48h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DCE48h case    4:*/		return 0x820DCE4C;
		  /* 820DCE4Ch */ case    5:  		/* mr R6, R5 */
		/* 820DCE4Ch case    5:*/		regs.R6 = regs.R5;
		/* 820DCE4Ch case    5:*/		return 0x820DCE50;
		  /* 820DCE50h */ case    6:  		/* addi R4, R10, -30300 */
		/* 820DCE50h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF89A4);
		/* 820DCE50h case    6:*/		return 0x820DCE54;
		  /* 820DCE54h */ case    7:  		/* mr R5, R11 */
		/* 820DCE54h case    7:*/		regs.R5 = regs.R11;
		/* 820DCE54h case    7:*/		return 0x820DCE58;
		  /* 820DCE58h */ case    8:  		/* bl -11648 */
		/* 820DCE58h case    8:*/		regs.LR = 0x820DCE5C; return 0x820DA0D8;
		/* 820DCE58h case    8:*/		return 0x820DCE5C;
		  /* 820DCE5Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DCE5Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DCE5Ch case    9:*/		return 0x820DCE60;
		  /* 820DCE60h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DCE60h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCE60h case   10:*/		return 0x820DCE64;
		  /* 820DCE64h */ case   11:  		/* mtspr LR, R12 */
		/* 820DCE64h case   11:*/		regs.LR = regs.R12;
		/* 820DCE64h case   11:*/		return 0x820DCE68;
		  /* 820DCE68h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DCE68h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DCE68h case   12:*/		return 0x820DCE6C;
	}
	return 0x820DCE6C;
} // Block from 820DCE38h-820DCE6Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DCE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCE6C);
		  /* 820DCE6Ch */ case    0:  		/* nop */
		/* 820DCE6Ch case    0:*/		cpu::op::nop();
		/* 820DCE6Ch case    0:*/		return 0x820DCE70;
	}
	return 0x820DCE70;
} // Block from 820DCE6Ch-820DCE70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DCE70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCE70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCE70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCE70);
		  /* 820DCE70h */ case    0:  		/* mfspr R12, LR */
		/* 820DCE70h case    0:*/		regs.R12 = regs.LR;
		/* 820DCE70h case    0:*/		return 0x820DCE74;
		  /* 820DCE74h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DCE74h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCE74h case    1:*/		return 0x820DCE78;
		  /* 820DCE78h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DCE78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DCE78h case    2:*/		return 0x820DCE7C;
		  /* 820DCE7Ch */ case    3:  		/* mr R11, R4 */
		/* 820DCE7Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DCE7Ch case    3:*/		return 0x820DCE80;
		  /* 820DCE80h */ case    4:  		/* lis R10, -32254 */
		/* 820DCE80h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DCE80h case    4:*/		return 0x820DCE84;
		  /* 820DCE84h */ case    5:  		/* mr R6, R5 */
		/* 820DCE84h case    5:*/		regs.R6 = regs.R5;
		/* 820DCE84h case    5:*/		return 0x820DCE88;
		  /* 820DCE88h */ case    6:  		/* addi R4, R10, -30284 */
		/* 820DCE88h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF89B4);
		/* 820DCE88h case    6:*/		return 0x820DCE8C;
		  /* 820DCE8Ch */ case    7:  		/* mr R5, R11 */
		/* 820DCE8Ch case    7:*/		regs.R5 = regs.R11;
		/* 820DCE8Ch case    7:*/		return 0x820DCE90;
		  /* 820DCE90h */ case    8:  		/* bl -11704 */
		/* 820DCE90h case    8:*/		regs.LR = 0x820DCE94; return 0x820DA0D8;
		/* 820DCE90h case    8:*/		return 0x820DCE94;
		  /* 820DCE94h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DCE94h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DCE94h case    9:*/		return 0x820DCE98;
		  /* 820DCE98h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DCE98h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCE98h case   10:*/		return 0x820DCE9C;
		  /* 820DCE9Ch */ case   11:  		/* mtspr LR, R12 */
		/* 820DCE9Ch case   11:*/		regs.LR = regs.R12;
		/* 820DCE9Ch case   11:*/		return 0x820DCEA0;
		  /* 820DCEA0h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DCEA0h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DCEA0h case   12:*/		return 0x820DCEA4;
	}
	return 0x820DCEA4;
} // Block from 820DCE70h-820DCEA4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DCEA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCEA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCEA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCEA4);
		  /* 820DCEA4h */ case    0:  		/* nop */
		/* 820DCEA4h case    0:*/		cpu::op::nop();
		/* 820DCEA4h case    0:*/		return 0x820DCEA8;
	}
	return 0x820DCEA8;
} // Block from 820DCEA4h-820DCEA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DCEA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCEA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCEA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCEA8);
		  /* 820DCEA8h */ case    0:  		/* mfspr R12, LR */
		/* 820DCEA8h case    0:*/		regs.R12 = regs.LR;
		/* 820DCEA8h case    0:*/		return 0x820DCEAC;
		  /* 820DCEACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DCEACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCEACh case    1:*/		return 0x820DCEB0;
		  /* 820DCEB0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DCEB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DCEB0h case    2:*/		return 0x820DCEB4;
		  /* 820DCEB4h */ case    3:  		/* mr R11, R4 */
		/* 820DCEB4h case    3:*/		regs.R11 = regs.R4;
		/* 820DCEB4h case    3:*/		return 0x820DCEB8;
		  /* 820DCEB8h */ case    4:  		/* lis R10, -32254 */
		/* 820DCEB8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DCEB8h case    4:*/		return 0x820DCEBC;
		  /* 820DCEBCh */ case    5:  		/* mr R6, R5 */
		/* 820DCEBCh case    5:*/		regs.R6 = regs.R5;
		/* 820DCEBCh case    5:*/		return 0x820DCEC0;
		  /* 820DCEC0h */ case    6:  		/* addi R4, R10, -30268 */
		/* 820DCEC0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF89C4);
		/* 820DCEC0h case    6:*/		return 0x820DCEC4;
		  /* 820DCEC4h */ case    7:  		/* mr R5, R11 */
		/* 820DCEC4h case    7:*/		regs.R5 = regs.R11;
		/* 820DCEC4h case    7:*/		return 0x820DCEC8;
		  /* 820DCEC8h */ case    8:  		/* bl -11760 */
		/* 820DCEC8h case    8:*/		regs.LR = 0x820DCECC; return 0x820DA0D8;
		/* 820DCEC8h case    8:*/		return 0x820DCECC;
		  /* 820DCECCh */ case    9:  		/* addi R1, R1, 128 */
		/* 820DCECCh case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DCECCh case    9:*/		return 0x820DCED0;
		  /* 820DCED0h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DCED0h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCED0h case   10:*/		return 0x820DCED4;
		  /* 820DCED4h */ case   11:  		/* mtspr LR, R12 */
		/* 820DCED4h case   11:*/		regs.LR = regs.R12;
		/* 820DCED4h case   11:*/		return 0x820DCED8;
		  /* 820DCED8h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DCED8h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DCED8h case   12:*/		return 0x820DCEDC;
	}
	return 0x820DCEDC;
} // Block from 820DCEA8h-820DCEDCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DCEDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCEDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCEDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCEDC);
		  /* 820DCEDCh */ case    0:  		/* nop */
		/* 820DCEDCh case    0:*/		cpu::op::nop();
		/* 820DCEDCh case    0:*/		return 0x820DCEE0;
	}
	return 0x820DCEE0;
} // Block from 820DCEDCh-820DCEE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DCEE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCEE0);
		  /* 820DCEE0h */ case    0:  		/* mfspr R12, LR */
		/* 820DCEE0h case    0:*/		regs.R12 = regs.LR;
		/* 820DCEE0h case    0:*/		return 0x820DCEE4;
		  /* 820DCEE4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DCEE4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCEE4h case    1:*/		return 0x820DCEE8;
		  /* 820DCEE8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DCEE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DCEE8h case    2:*/		return 0x820DCEEC;
		  /* 820DCEECh */ case    3:  		/* lis R11, -32254 */
		/* 820DCEECh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCEECh case    3:*/		return 0x820DCEF0;
		  /* 820DCEF0h */ case    4:  		/* addi R4, R11, -30252 */
		/* 820DCEF0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF89D4);
		/* 820DCEF0h case    4:*/		return 0x820DCEF4;
		  /* 820DCEF4h */ case    5:  		/* bl -11804 */
		/* 820DCEF4h case    5:*/		regs.LR = 0x820DCEF8; return 0x820DA0D8;
		/* 820DCEF4h case    5:*/		return 0x820DCEF8;
		  /* 820DCEF8h */ case    6:  		/* addi R1, R1, 112 */
		/* 820DCEF8h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DCEF8h case    6:*/		return 0x820DCEFC;
		  /* 820DCEFCh */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DCEFCh case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCEFCh case    7:*/		return 0x820DCF00;
		  /* 820DCF00h */ case    8:  		/* mtspr LR, R12 */
		/* 820DCF00h case    8:*/		regs.LR = regs.R12;
		/* 820DCF00h case    8:*/		return 0x820DCF04;
		  /* 820DCF04h */ case    9:  		/* bclr 20, CR0_LT */
		/* 820DCF04h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DCF04h case    9:*/		return 0x820DCF08;
	}
	return 0x820DCF08;
} // Block from 820DCEE0h-820DCF08h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DCF08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCF08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCF08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCF08);
		  /* 820DCF08h */ case    0:  		/* mfspr R12, LR */
		/* 820DCF08h case    0:*/		regs.R12 = regs.LR;
		/* 820DCF08h case    0:*/		return 0x820DCF0C;
		  /* 820DCF0Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DCF0Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCF0Ch case    1:*/		return 0x820DCF10;
		  /* 820DCF10h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DCF10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DCF10h case    2:*/		return 0x820DCF14;
		  /* 820DCF14h */ case    3:  		/* lis R11, -32254 */
		/* 820DCF14h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCF14h case    3:*/		return 0x820DCF18;
		  /* 820DCF18h */ case    4:  		/* addi R4, R11, -30236 */
		/* 820DCF18h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF89E4);
		/* 820DCF18h case    4:*/		return 0x820DCF1C;
		  /* 820DCF1Ch */ case    5:  		/* bl -11844 */
		/* 820DCF1Ch case    5:*/		regs.LR = 0x820DCF20; return 0x820DA0D8;
		/* 820DCF1Ch case    5:*/		return 0x820DCF20;
		  /* 820DCF20h */ case    6:  		/* addi R1, R1, 112 */
		/* 820DCF20h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DCF20h case    6:*/		return 0x820DCF24;
		  /* 820DCF24h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DCF24h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCF24h case    7:*/		return 0x820DCF28;
		  /* 820DCF28h */ case    8:  		/* mtspr LR, R12 */
		/* 820DCF28h case    8:*/		regs.LR = regs.R12;
		/* 820DCF28h case    8:*/		return 0x820DCF2C;
		  /* 820DCF2Ch */ case    9:  		/* bclr 20, CR0_LT */
		/* 820DCF2Ch case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DCF2Ch case    9:*/		return 0x820DCF30;
	}
	return 0x820DCF30;
} // Block from 820DCF08h-820DCF30h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DCF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCF30);
		  /* 820DCF30h */ case    0:  		/* mfspr R12, LR */
		/* 820DCF30h case    0:*/		regs.R12 = regs.LR;
		/* 820DCF30h case    0:*/		return 0x820DCF34;
		  /* 820DCF34h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DCF34h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCF34h case    1:*/		return 0x820DCF38;
		  /* 820DCF38h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DCF38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DCF38h case    2:*/		return 0x820DCF3C;
		  /* 820DCF3Ch */ case    3:  		/* mr R11, R4 */
		/* 820DCF3Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DCF3Ch case    3:*/		return 0x820DCF40;
		  /* 820DCF40h */ case    4:  		/* lis R10, -32254 */
		/* 820DCF40h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DCF40h case    4:*/		return 0x820DCF44;
		  /* 820DCF44h */ case    5:  		/* mr R7, R6 */
		/* 820DCF44h case    5:*/		regs.R7 = regs.R6;
		/* 820DCF44h case    5:*/		return 0x820DCF48;
		  /* 820DCF48h */ case    6:  		/* mr R6, R5 */
		/* 820DCF48h case    6:*/		regs.R6 = regs.R5;
		/* 820DCF48h case    6:*/		return 0x820DCF4C;
		  /* 820DCF4Ch */ case    7:  		/* addi R4, R10, -30220 */
		/* 820DCF4Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF89F4);
		/* 820DCF4Ch case    7:*/		return 0x820DCF50;
		  /* 820DCF50h */ case    8:  		/* mr R5, R11 */
		/* 820DCF50h case    8:*/		regs.R5 = regs.R11;
		/* 820DCF50h case    8:*/		return 0x820DCF54;
		  /* 820DCF54h */ case    9:  		/* bl -11900 */
		/* 820DCF54h case    9:*/		regs.LR = 0x820DCF58; return 0x820DA0D8;
		/* 820DCF54h case    9:*/		return 0x820DCF58;
		  /* 820DCF58h */ case   10:  		/* addi R1, R1, 128 */
		/* 820DCF58h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DCF58h case   10:*/		return 0x820DCF5C;
		  /* 820DCF5Ch */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DCF5Ch case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCF5Ch case   11:*/		return 0x820DCF60;
		  /* 820DCF60h */ case   12:  		/* mtspr LR, R12 */
		/* 820DCF60h case   12:*/		regs.LR = regs.R12;
		/* 820DCF60h case   12:*/		return 0x820DCF64;
		  /* 820DCF64h */ case   13:  		/* bclr 20, CR0_LT */
		/* 820DCF64h case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DCF64h case   13:*/		return 0x820DCF68;
	}
	return 0x820DCF68;
} // Block from 820DCF30h-820DCF68h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DCF68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCF68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCF68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCF68);
		  /* 820DCF68h */ case    0:  		/* mfspr R12, LR */
		/* 820DCF68h case    0:*/		regs.R12 = regs.LR;
		/* 820DCF68h case    0:*/		return 0x820DCF6C;
		  /* 820DCF6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DCF6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCF6Ch case    1:*/		return 0x820DCF70;
		  /* 820DCF70h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DCF70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DCF70h case    2:*/		return 0x820DCF74;
		  /* 820DCF74h */ case    3:  		/* lis R11, -32254 */
		/* 820DCF74h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DCF74h case    3:*/		return 0x820DCF78;
		  /* 820DCF78h */ case    4:  		/* mr R5, R4 */
		/* 820DCF78h case    4:*/		regs.R5 = regs.R4;
		/* 820DCF78h case    4:*/		return 0x820DCF7C;
		  /* 820DCF7Ch */ case    5:  		/* addi R4, R11, -30200 */
		/* 820DCF7Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8A08);
		/* 820DCF7Ch case    5:*/		return 0x820DCF80;
		  /* 820DCF80h */ case    6:  		/* bl -11944 */
		/* 820DCF80h case    6:*/		regs.LR = 0x820DCF84; return 0x820DA0D8;
		/* 820DCF80h case    6:*/		return 0x820DCF84;
		  /* 820DCF84h */ case    7:  		/* addi R1, R1, 112 */
		/* 820DCF84h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DCF84h case    7:*/		return 0x820DCF88;
		  /* 820DCF88h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DCF88h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCF88h case    8:*/		return 0x820DCF8C;
		  /* 820DCF8Ch */ case    9:  		/* mtspr LR, R12 */
		/* 820DCF8Ch case    9:*/		regs.LR = regs.R12;
		/* 820DCF8Ch case    9:*/		return 0x820DCF90;
		  /* 820DCF90h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820DCF90h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DCF90h case   10:*/		return 0x820DCF94;
	}
	return 0x820DCF94;
} // Block from 820DCF68h-820DCF94h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820DCF94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCF94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCF94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCF94);
		  /* 820DCF94h */ case    0:  		/* nop */
		/* 820DCF94h case    0:*/		cpu::op::nop();
		/* 820DCF94h case    0:*/		return 0x820DCF98;
	}
	return 0x820DCF98;
} // Block from 820DCF94h-820DCF98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DCF98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCF98);
		  /* 820DCF98h */ case    0:  		/* mfspr R12, LR */
		/* 820DCF98h case    0:*/		regs.R12 = regs.LR;
		/* 820DCF98h case    0:*/		return 0x820DCF9C;
		  /* 820DCF9Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DCF9Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCF9Ch case    1:*/		return 0x820DCFA0;
		  /* 820DCFA0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DCFA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DCFA0h case    2:*/		return 0x820DCFA4;
		  /* 820DCFA4h */ case    3:  		/* mr R11, R4 */
		/* 820DCFA4h case    3:*/		regs.R11 = regs.R4;
		/* 820DCFA4h case    3:*/		return 0x820DCFA8;
		  /* 820DCFA8h */ case    4:  		/* lis R10, -32254 */
		/* 820DCFA8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DCFA8h case    4:*/		return 0x820DCFAC;
		  /* 820DCFACh */ case    5:  		/* mr R6, R5 */
		/* 820DCFACh case    5:*/		regs.R6 = regs.R5;
		/* 820DCFACh case    5:*/		return 0x820DCFB0;
		  /* 820DCFB0h */ case    6:  		/* addi R4, R10, -30188 */
		/* 820DCFB0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8A14);
		/* 820DCFB0h case    6:*/		return 0x820DCFB4;
		  /* 820DCFB4h */ case    7:  		/* mr R5, R11 */
		/* 820DCFB4h case    7:*/		regs.R5 = regs.R11;
		/* 820DCFB4h case    7:*/		return 0x820DCFB8;
		  /* 820DCFB8h */ case    8:  		/* bl -12000 */
		/* 820DCFB8h case    8:*/		regs.LR = 0x820DCFBC; return 0x820DA0D8;
		/* 820DCFB8h case    8:*/		return 0x820DCFBC;
		  /* 820DCFBCh */ case    9:  		/* addi R1, R1, 128 */
		/* 820DCFBCh case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DCFBCh case    9:*/		return 0x820DCFC0;
		  /* 820DCFC0h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DCFC0h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCFC0h case   10:*/		return 0x820DCFC4;
		  /* 820DCFC4h */ case   11:  		/* mtspr LR, R12 */
		/* 820DCFC4h case   11:*/		regs.LR = regs.R12;
		/* 820DCFC4h case   11:*/		return 0x820DCFC8;
		  /* 820DCFC8h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DCFC8h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DCFC8h case   12:*/		return 0x820DCFCC;
	}
	return 0x820DCFCC;
} // Block from 820DCF98h-820DCFCCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DCFCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCFCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCFCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCFCC);
		  /* 820DCFCCh */ case    0:  		/* nop */
		/* 820DCFCCh case    0:*/		cpu::op::nop();
		/* 820DCFCCh case    0:*/		return 0x820DCFD0;
	}
	return 0x820DCFD0;
} // Block from 820DCFCCh-820DCFD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DCFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DCFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DCFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DCFD0);
		  /* 820DCFD0h */ case    0:  		/* mfspr R12, LR */
		/* 820DCFD0h case    0:*/		regs.R12 = regs.LR;
		/* 820DCFD0h case    0:*/		return 0x820DCFD4;
		  /* 820DCFD4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DCFD4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCFD4h case    1:*/		return 0x820DCFD8;
		  /* 820DCFD8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DCFD8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DCFD8h case    2:*/		return 0x820DCFDC;
		  /* 820DCFDCh */ case    3:  		/* mr R11, R4 */
		/* 820DCFDCh case    3:*/		regs.R11 = regs.R4;
		/* 820DCFDCh case    3:*/		return 0x820DCFE0;
		  /* 820DCFE0h */ case    4:  		/* lis R10, -32254 */
		/* 820DCFE0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DCFE0h case    4:*/		return 0x820DCFE4;
		  /* 820DCFE4h */ case    5:  		/* mr R6, R5 */
		/* 820DCFE4h case    5:*/		regs.R6 = regs.R5;
		/* 820DCFE4h case    5:*/		return 0x820DCFE8;
		  /* 820DCFE8h */ case    6:  		/* addi R4, R10, -30172 */
		/* 820DCFE8h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8A24);
		/* 820DCFE8h case    6:*/		return 0x820DCFEC;
		  /* 820DCFECh */ case    7:  		/* mr R5, R11 */
		/* 820DCFECh case    7:*/		regs.R5 = regs.R11;
		/* 820DCFECh case    7:*/		return 0x820DCFF0;
		  /* 820DCFF0h */ case    8:  		/* bl -12056 */
		/* 820DCFF0h case    8:*/		regs.LR = 0x820DCFF4; return 0x820DA0D8;
		/* 820DCFF0h case    8:*/		return 0x820DCFF4;
		  /* 820DCFF4h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DCFF4h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DCFF4h case    9:*/		return 0x820DCFF8;
		  /* 820DCFF8h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DCFF8h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DCFF8h case   10:*/		return 0x820DCFFC;
		  /* 820DCFFCh */ case   11:  		/* mtspr LR, R12 */
		/* 820DCFFCh case   11:*/		regs.LR = regs.R12;
		/* 820DCFFCh case   11:*/		return 0x820DD000;
		  /* 820DD000h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DD000h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD000h case   12:*/		return 0x820DD004;
	}
	return 0x820DD004;
} // Block from 820DCFD0h-820DD004h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DD004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD004);
		  /* 820DD004h */ case    0:  		/* nop */
		/* 820DD004h case    0:*/		cpu::op::nop();
		/* 820DD004h case    0:*/		return 0x820DD008;
	}
	return 0x820DD008;
} // Block from 820DD004h-820DD008h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD008);
		  /* 820DD008h */ case    0:  		/* mfspr R12, LR */
		/* 820DD008h case    0:*/		regs.R12 = regs.LR;
		/* 820DD008h case    0:*/		return 0x820DD00C;
		  /* 820DD00Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD00Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD00Ch case    1:*/		return 0x820DD010;
		  /* 820DD010h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DD010h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DD010h case    2:*/		return 0x820DD014;
		  /* 820DD014h */ case    3:  		/* mr R11, R4 */
		/* 820DD014h case    3:*/		regs.R11 = regs.R4;
		/* 820DD014h case    3:*/		return 0x820DD018;
		  /* 820DD018h */ case    4:  		/* lis R10, -32254 */
		/* 820DD018h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD018h case    4:*/		return 0x820DD01C;
		  /* 820DD01Ch */ case    5:  		/* mr R6, R5 */
		/* 820DD01Ch case    5:*/		regs.R6 = regs.R5;
		/* 820DD01Ch case    5:*/		return 0x820DD020;
		  /* 820DD020h */ case    6:  		/* addi R4, R10, -30152 */
		/* 820DD020h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8A38);
		/* 820DD020h case    6:*/		return 0x820DD024;
		  /* 820DD024h */ case    7:  		/* mr R5, R11 */
		/* 820DD024h case    7:*/		regs.R5 = regs.R11;
		/* 820DD024h case    7:*/		return 0x820DD028;
		  /* 820DD028h */ case    8:  		/* bl -12112 */
		/* 820DD028h case    8:*/		regs.LR = 0x820DD02C; return 0x820DA0D8;
		/* 820DD028h case    8:*/		return 0x820DD02C;
		  /* 820DD02Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DD02Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DD02Ch case    9:*/		return 0x820DD030;
		  /* 820DD030h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD030h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD030h case   10:*/		return 0x820DD034;
		  /* 820DD034h */ case   11:  		/* mtspr LR, R12 */
		/* 820DD034h case   11:*/		regs.LR = regs.R12;
		/* 820DD034h case   11:*/		return 0x820DD038;
		  /* 820DD038h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DD038h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD038h case   12:*/		return 0x820DD03C;
	}
	return 0x820DD03C;
} // Block from 820DD008h-820DD03Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DD03Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD03C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD03C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD03C);
		  /* 820DD03Ch */ case    0:  		/* nop */
		/* 820DD03Ch case    0:*/		cpu::op::nop();
		/* 820DD03Ch case    0:*/		return 0x820DD040;
	}
	return 0x820DD040;
} // Block from 820DD03Ch-820DD040h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD040);
		  /* 820DD040h */ case    0:  		/* mfspr R12, LR */
		/* 820DD040h case    0:*/		regs.R12 = regs.LR;
		/* 820DD040h case    0:*/		return 0x820DD044;
		  /* 820DD044h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD044h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD044h case    1:*/		return 0x820DD048;
		  /* 820DD048h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DD048h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DD048h case    2:*/		return 0x820DD04C;
		  /* 820DD04Ch */ case    3:  		/* mr R11, R4 */
		/* 820DD04Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DD04Ch case    3:*/		return 0x820DD050;
		  /* 820DD050h */ case    4:  		/* lis R10, -32254 */
		/* 820DD050h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD050h case    4:*/		return 0x820DD054;
		  /* 820DD054h */ case    5:  		/* mr R6, R5 */
		/* 820DD054h case    5:*/		regs.R6 = regs.R5;
		/* 820DD054h case    5:*/		return 0x820DD058;
		  /* 820DD058h */ case    6:  		/* addi R4, R10, -30136 */
		/* 820DD058h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8A48);
		/* 820DD058h case    6:*/		return 0x820DD05C;
		  /* 820DD05Ch */ case    7:  		/* mr R5, R11 */
		/* 820DD05Ch case    7:*/		regs.R5 = regs.R11;
		/* 820DD05Ch case    7:*/		return 0x820DD060;
		  /* 820DD060h */ case    8:  		/* bl -12168 */
		/* 820DD060h case    8:*/		regs.LR = 0x820DD064; return 0x820DA0D8;
		/* 820DD060h case    8:*/		return 0x820DD064;
		  /* 820DD064h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DD064h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DD064h case    9:*/		return 0x820DD068;
		  /* 820DD068h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD068h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD068h case   10:*/		return 0x820DD06C;
		  /* 820DD06Ch */ case   11:  		/* mtspr LR, R12 */
		/* 820DD06Ch case   11:*/		regs.LR = regs.R12;
		/* 820DD06Ch case   11:*/		return 0x820DD070;
		  /* 820DD070h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DD070h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD070h case   12:*/		return 0x820DD074;
	}
	return 0x820DD074;
} // Block from 820DD040h-820DD074h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DD074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD074);
		  /* 820DD074h */ case    0:  		/* nop */
		/* 820DD074h case    0:*/		cpu::op::nop();
		/* 820DD074h case    0:*/		return 0x820DD078;
	}
	return 0x820DD078;
} // Block from 820DD074h-820DD078h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD078);
		  /* 820DD078h */ case    0:  		/* mfspr R12, LR */
		/* 820DD078h case    0:*/		regs.R12 = regs.LR;
		/* 820DD078h case    0:*/		return 0x820DD07C;
		  /* 820DD07Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD07Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD07Ch case    1:*/		return 0x820DD080;
		  /* 820DD080h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DD080h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DD080h case    2:*/		return 0x820DD084;
		  /* 820DD084h */ case    3:  		/* mr R11, R4 */
		/* 820DD084h case    3:*/		regs.R11 = regs.R4;
		/* 820DD084h case    3:*/		return 0x820DD088;
		  /* 820DD088h */ case    4:  		/* lis R10, -32254 */
		/* 820DD088h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD088h case    4:*/		return 0x820DD08C;
		  /* 820DD08Ch */ case    5:  		/* mr R6, R5 */
		/* 820DD08Ch case    5:*/		regs.R6 = regs.R5;
		/* 820DD08Ch case    5:*/		return 0x820DD090;
		  /* 820DD090h */ case    6:  		/* addi R4, R10, -30064 */
		/* 820DD090h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8A90);
		/* 820DD090h case    6:*/		return 0x820DD094;
		  /* 820DD094h */ case    7:  		/* mr R5, R11 */
		/* 820DD094h case    7:*/		regs.R5 = regs.R11;
		/* 820DD094h case    7:*/		return 0x820DD098;
		  /* 820DD098h */ case    8:  		/* bl -12224 */
		/* 820DD098h case    8:*/		regs.LR = 0x820DD09C; return 0x820DA0D8;
		/* 820DD098h case    8:*/		return 0x820DD09C;
		  /* 820DD09Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DD09Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DD09Ch case    9:*/		return 0x820DD0A0;
		  /* 820DD0A0h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD0A0h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD0A0h case   10:*/		return 0x820DD0A4;
		  /* 820DD0A4h */ case   11:  		/* mtspr LR, R12 */
		/* 820DD0A4h case   11:*/		regs.LR = regs.R12;
		/* 820DD0A4h case   11:*/		return 0x820DD0A8;
		  /* 820DD0A8h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DD0A8h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD0A8h case   12:*/		return 0x820DD0AC;
	}
	return 0x820DD0AC;
} // Block from 820DD078h-820DD0ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DD0ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD0AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD0AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD0AC);
		  /* 820DD0ACh */ case    0:  		/* nop */
		/* 820DD0ACh case    0:*/		cpu::op::nop();
		/* 820DD0ACh case    0:*/		return 0x820DD0B0;
	}
	return 0x820DD0B0;
} // Block from 820DD0ACh-820DD0B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD0B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD0B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD0B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD0B0);
		  /* 820DD0B0h */ case    0:  		/* mfspr R12, LR */
		/* 820DD0B0h case    0:*/		regs.R12 = regs.LR;
		/* 820DD0B0h case    0:*/		return 0x820DD0B4;
		  /* 820DD0B4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD0B4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD0B4h case    1:*/		return 0x820DD0B8;
		  /* 820DD0B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DD0B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DD0B8h case    2:*/		return 0x820DD0BC;
		  /* 820DD0BCh */ case    3:  		/* lis R11, -32254 */
		/* 820DD0BCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD0BCh case    3:*/		return 0x820DD0C0;
		  /* 820DD0C0h */ case    4:  		/* mr R6, R4 */
		/* 820DD0C0h case    4:*/		regs.R6 = regs.R4;
		/* 820DD0C0h case    4:*/		return 0x820DD0C4;
		  /* 820DD0C4h */ case    5:  		/* addi R4, R11, -30028 */
		/* 820DD0C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8AB4);
		/* 820DD0C4h case    5:*/		return 0x820DD0C8;
		  /* 820DD0C8h */ case    6:  		/* bl -12272 */
		/* 820DD0C8h case    6:*/		regs.LR = 0x820DD0CC; return 0x820DA0D8;
		/* 820DD0C8h case    6:*/		return 0x820DD0CC;
		  /* 820DD0CCh */ case    7:  		/* addi R1, R1, 128 */
		/* 820DD0CCh case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DD0CCh case    7:*/		return 0x820DD0D0;
		  /* 820DD0D0h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD0D0h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD0D0h case    8:*/		return 0x820DD0D4;
		  /* 820DD0D4h */ case    9:  		/* mtspr LR, R12 */
		/* 820DD0D4h case    9:*/		regs.LR = regs.R12;
		/* 820DD0D4h case    9:*/		return 0x820DD0D8;
		  /* 820DD0D8h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820DD0D8h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD0D8h case   10:*/		return 0x820DD0DC;
	}
	return 0x820DD0DC;
} // Block from 820DD0B0h-820DD0DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820DD0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD0DC);
		  /* 820DD0DCh */ case    0:  		/* nop */
		/* 820DD0DCh case    0:*/		cpu::op::nop();
		/* 820DD0DCh case    0:*/		return 0x820DD0E0;
	}
	return 0x820DD0E0;
} // Block from 820DD0DCh-820DD0E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD0E0);
		  /* 820DD0E0h */ case    0:  		/* mfspr R12, LR */
		/* 820DD0E0h case    0:*/		regs.R12 = regs.LR;
		/* 820DD0E0h case    0:*/		return 0x820DD0E4;
		  /* 820DD0E4h */ case    1:  		/* bl -310920 */
		/* 820DD0E4h case    1:*/		regs.LR = 0x820DD0E8; return 0x8209125C;
		/* 820DD0E4h case    1:*/		return 0x820DD0E8;
		  /* 820DD0E8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820DD0E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820DD0E8h case    2:*/		return 0x820DD0EC;
		  /* 820DD0ECh */ case    3:  		/* mr R31, R3 */
		/* 820DD0ECh case    3:*/		regs.R31 = regs.R3;
		/* 820DD0ECh case    3:*/		return 0x820DD0F0;
		  /* 820DD0F0h */ case    4:  		/* mr R30, R4 */
		/* 820DD0F0h case    4:*/		regs.R30 = regs.R4;
		/* 820DD0F0h case    4:*/		return 0x820DD0F4;
		  /* 820DD0F4h */ case    5:  		/* mr R29, R5 */
		/* 820DD0F4h case    5:*/		regs.R29 = regs.R5;
		/* 820DD0F4h case    5:*/		return 0x820DD0F8;
		  /* 820DD0F8h */ case    6:  		/* bl -12104 */
		/* 820DD0F8h case    6:*/		regs.LR = 0x820DD0FC; return 0x820DA1B0;
		/* 820DD0F8h case    6:*/		return 0x820DD0FC;
		  /* 820DD0FCh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DD0FCh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD0FCh case    7:*/		return 0x820DD100;
		  /* 820DD100h */ case    8:  		/* bc 12, CR0_LT, 164 */
		/* 820DD100h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DD1A4;  }
		/* 820DD100h case    8:*/		return 0x820DD104;
		  /* 820DD104h */ case    9:  		/* lis R11, -32254 */
		/* 820DD104h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD104h case    9:*/		return 0x820DD108;
		  /* 820DD108h */ case   10:  		/* mr R5, R30 */
		/* 820DD108h case   10:*/		regs.R5 = regs.R30;
		/* 820DD108h case   10:*/		return 0x820DD10C;
		  /* 820DD10Ch */ case   11:  		/* addi R4, R11, -29896 */
		/* 820DD10Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8B38);
		/* 820DD10Ch case   11:*/		return 0x820DD110;
		  /* 820DD110h */ case   12:  		/* mr R3, R31 */
		/* 820DD110h case   12:*/		regs.R3 = regs.R31;
		/* 820DD110h case   12:*/		return 0x820DD114;
		  /* 820DD114h */ case   13:  		/* bl -12348 */
		/* 820DD114h case   13:*/		regs.LR = 0x820DD118; return 0x820DA0D8;
		/* 820DD114h case   13:*/		return 0x820DD118;
		  /* 820DD118h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820DD118h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD118h case   14:*/		return 0x820DD11C;
		  /* 820DD11Ch */ case   15:  		/* bc 12, CR0_LT, 136 */
		/* 820DD11Ch case   15:*/		if ( regs.CR[0].lt ) { return 0x820DD1A4;  }
		/* 820DD11Ch case   15:*/		return 0x820DD120;
		  /* 820DD120h */ case   16:  		/* mr R3, R31 */
		/* 820DD120h case   16:*/		regs.R3 = regs.R31;
		/* 820DD120h case   16:*/		return 0x820DD124;
		  /* 820DD124h */ case   17:  		/* bl -12148 */
		/* 820DD124h case   17:*/		regs.LR = 0x820DD128; return 0x820DA1B0;
		/* 820DD124h case   17:*/		return 0x820DD128;
		  /* 820DD128h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 820DD128h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD128h case   18:*/		return 0x820DD12C;
		  /* 820DD12Ch */ case   19:  		/* bc 12, CR0_LT, 120 */
		/* 820DD12Ch case   19:*/		if ( regs.CR[0].lt ) { return 0x820DD1A4;  }
		/* 820DD12Ch case   19:*/		return 0x820DD130;
		  /* 820DD130h */ case   20:  		/* lis R11, -32254 */
		/* 820DD130h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD130h case   20:*/		return 0x820DD134;
		  /* 820DD134h */ case   21:  		/* mr R5, R30 */
		/* 820DD134h case   21:*/		regs.R5 = regs.R30;
		/* 820DD134h case   21:*/		return 0x820DD138;
		  /* 820DD138h */ case   22:  		/* addi R4, R11, -29936 */
		/* 820DD138h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8B10);
		/* 820DD138h case   22:*/		return 0x820DD13C;
		  /* 820DD13Ch */ case   23:  		/* mr R3, R31 */
		/* 820DD13Ch case   23:*/		regs.R3 = regs.R31;
		/* 820DD13Ch case   23:*/		return 0x820DD140;
		  /* 820DD140h */ case   24:  		/* bl -12392 */
		/* 820DD140h case   24:*/		regs.LR = 0x820DD144; return 0x820DA0D8;
		/* 820DD140h case   24:*/		return 0x820DD144;
		  /* 820DD144h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820DD144h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD144h case   25:*/		return 0x820DD148;
		  /* 820DD148h */ case   26:  		/* bc 12, CR0_LT, 92 */
		/* 820DD148h case   26:*/		if ( regs.CR[0].lt ) { return 0x820DD1A4;  }
		/* 820DD148h case   26:*/		return 0x820DD14C;
		  /* 820DD14Ch */ case   27:  		/* mr R3, R31 */
		/* 820DD14Ch case   27:*/		regs.R3 = regs.R31;
		/* 820DD14Ch case   27:*/		return 0x820DD150;
		  /* 820DD150h */ case   28:  		/* bl -12192 */
		/* 820DD150h case   28:*/		regs.LR = 0x820DD154; return 0x820DA1B0;
		/* 820DD150h case   28:*/		return 0x820DD154;
		  /* 820DD154h */ case   29:  		/* cmpwi CR0, R3, 0 */
		/* 820DD154h case   29:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD154h case   29:*/		return 0x820DD158;
		  /* 820DD158h */ case   30:  		/* bc 12, CR0_LT, 76 */
		/* 820DD158h case   30:*/		if ( regs.CR[0].lt ) { return 0x820DD1A4;  }
		/* 820DD158h case   30:*/		return 0x820DD15C;
		  /* 820DD15Ch */ case   31:  		/* lis R11, -32254 */
		/* 820DD15Ch case   31:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD15Ch case   31:*/		return 0x820DD160;
		  /* 820DD160h */ case   32:  		/* mr R5, R30 */
		/* 820DD160h case   32:*/		regs.R5 = regs.R30;
		/* 820DD160h case   32:*/		return 0x820DD164;
		  /* 820DD164h */ case   33:  		/* addi R4, R11, -29964 */
		/* 820DD164h case   33:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8AF4);
		/* 820DD164h case   33:*/		return 0x820DD168;
		  /* 820DD168h */ case   34:  		/* mr R3, R31 */
		/* 820DD168h case   34:*/		regs.R3 = regs.R31;
		/* 820DD168h case   34:*/		return 0x820DD16C;
		  /* 820DD16Ch */ case   35:  		/* bl -12436 */
		/* 820DD16Ch case   35:*/		regs.LR = 0x820DD170; return 0x820DA0D8;
		/* 820DD16Ch case   35:*/		return 0x820DD170;
		  /* 820DD170h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820DD170h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD170h case   36:*/		return 0x820DD174;
		  /* 820DD174h */ case   37:  		/* bc 12, CR0_LT, 48 */
		/* 820DD174h case   37:*/		if ( regs.CR[0].lt ) { return 0x820DD1A4;  }
		/* 820DD174h case   37:*/		return 0x820DD178;
		  /* 820DD178h */ case   38:  		/* mr R3, R31 */
		/* 820DD178h case   38:*/		regs.R3 = regs.R31;
		/* 820DD178h case   38:*/		return 0x820DD17C;
		  /* 820DD17Ch */ case   39:  		/* bl -12236 */
		/* 820DD17Ch case   39:*/		regs.LR = 0x820DD180; return 0x820DA1B0;
		/* 820DD17Ch case   39:*/		return 0x820DD180;
		  /* 820DD180h */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 820DD180h case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD180h case   40:*/		return 0x820DD184;
		  /* 820DD184h */ case   41:  		/* bc 12, CR0_LT, 32 */
		/* 820DD184h case   41:*/		if ( regs.CR[0].lt ) { return 0x820DD1A4;  }
		/* 820DD184h case   41:*/		return 0x820DD188;
		  /* 820DD188h */ case   42:  		/* lis R11, -32254 */
		/* 820DD188h case   42:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD188h case   42:*/		return 0x820DD18C;
		  /* 820DD18Ch */ case   43:  		/* mr R5, R29 */
		/* 820DD18Ch case   43:*/		regs.R5 = regs.R29;
		/* 820DD18Ch case   43:*/		return 0x820DD190;
		  /* 820DD190h */ case   44:  		/* addi R4, R11, -30008 */
		/* 820DD190h case   44:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8AC8);
		/* 820DD190h case   44:*/		return 0x820DD194;
		  /* 820DD194h */ case   45:  		/* mr R3, R31 */
		/* 820DD194h case   45:*/		regs.R3 = regs.R31;
		/* 820DD194h case   45:*/		return 0x820DD198;
	}
	return 0x820DD198;
} // Block from 820DD0E0h-820DD198h (46 instructions)

//////////////////////////////////////////////////////
// Block at 820DD198h
// Function '?EmitLRPFunction@C30SWProgram@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD198);
		  /* 820DD198h */ case    0:  		/* bl -12480 */
		/* 820DD198h case    0:*/		regs.LR = 0x820DD19C; return 0x820DA0D8;
		/* 820DD198h case    0:*/		return 0x820DD19C;
		  /* 820DD19Ch */ case    1:  		/* srawi R11, R3, 31 */
		/* 820DD19Ch case    1:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820DD19Ch case    1:*/		return 0x820DD1A0;
		  /* 820DD1A0h */ case    2:  		/* and R3, R11, R3 */
		/* 820DD1A0h case    2:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820DD1A0h case    2:*/		return 0x820DD1A4;
	}
	return 0x820DD1A4;
} // Block from 820DD198h-820DD1A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DD1A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD1A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD1A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD1A4);
		  /* 820DD1A4h */ case    0:  		/* addi R1, R1, 144 */
		/* 820DD1A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820DD1A4h case    0:*/		return 0x820DD1A8;
		  /* 820DD1A8h */ case    1:  		/* b -311036 */
		/* 820DD1A8h case    1:*/		return 0x820912AC;
		/* 820DD1A8h case    1:*/		return 0x820DD1AC;
		  /* 820DD1ACh */ case    2:  		/* nop */
		/* 820DD1ACh case    2:*/		cpu::op::nop();
		/* 820DD1ACh case    2:*/		return 0x820DD1B0;
	}
	return 0x820DD1B0;
} // Block from 820DD1A4h-820DD1B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DD1B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD1B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD1B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD1B0);
		  /* 820DD1B0h */ case    0:  		/* mfspr R12, LR */
		/* 820DD1B0h case    0:*/		regs.R12 = regs.LR;
		/* 820DD1B0h case    0:*/		return 0x820DD1B4;
		  /* 820DD1B4h */ case    1:  		/* bl -311128 */
		/* 820DD1B4h case    1:*/		regs.LR = 0x820DD1B8; return 0x8209125C;
		/* 820DD1B4h case    1:*/		return 0x820DD1B8;
		  /* 820DD1B8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820DD1B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820DD1B8h case    2:*/		return 0x820DD1BC;
		  /* 820DD1BCh */ case    3:  		/* mr R31, R3 */
		/* 820DD1BCh case    3:*/		regs.R31 = regs.R3;
		/* 820DD1BCh case    3:*/		return 0x820DD1C0;
		  /* 820DD1C0h */ case    4:  		/* mr R30, R4 */
		/* 820DD1C0h case    4:*/		regs.R30 = regs.R4;
		/* 820DD1C0h case    4:*/		return 0x820DD1C4;
		  /* 820DD1C4h */ case    5:  		/* mr R29, R5 */
		/* 820DD1C4h case    5:*/		regs.R29 = regs.R5;
		/* 820DD1C4h case    5:*/		return 0x820DD1C8;
		  /* 820DD1C8h */ case    6:  		/* bl -12312 */
		/* 820DD1C8h case    6:*/		regs.LR = 0x820DD1CC; return 0x820DA1B0;
		/* 820DD1C8h case    6:*/		return 0x820DD1CC;
		  /* 820DD1CCh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DD1CCh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD1CCh case    7:*/		return 0x820DD1D0;
		  /* 820DD1D0h */ case    8:  		/* bc 12, CR0_LT, 256 */
		/* 820DD1D0h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DD2D0;  }
		/* 820DD1D0h case    8:*/		return 0x820DD1D4;
		  /* 820DD1D4h */ case    9:  		/* lis R11, -32254 */
		/* 820DD1D4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD1D4h case    9:*/		return 0x820DD1D8;
		  /* 820DD1D8h */ case   10:  		/* mr R5, R30 */
		/* 820DD1D8h case   10:*/		regs.R5 = regs.R30;
		/* 820DD1D8h case   10:*/		return 0x820DD1DC;
		  /* 820DD1DCh */ case   11:  		/* addi R4, R11, -29684 */
		/* 820DD1DCh case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8C0C);
		/* 820DD1DCh case   11:*/		return 0x820DD1E0;
		  /* 820DD1E0h */ case   12:  		/* mr R3, R31 */
		/* 820DD1E0h case   12:*/		regs.R3 = regs.R31;
		/* 820DD1E0h case   12:*/		return 0x820DD1E4;
		  /* 820DD1E4h */ case   13:  		/* bl -12556 */
		/* 820DD1E4h case   13:*/		regs.LR = 0x820DD1E8; return 0x820DA0D8;
		/* 820DD1E4h case   13:*/		return 0x820DD1E8;
		  /* 820DD1E8h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820DD1E8h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD1E8h case   14:*/		return 0x820DD1EC;
		  /* 820DD1ECh */ case   15:  		/* bc 12, CR0_LT, 228 */
		/* 820DD1ECh case   15:*/		if ( regs.CR[0].lt ) { return 0x820DD2D0;  }
		/* 820DD1ECh case   15:*/		return 0x820DD1F0;
		  /* 820DD1F0h */ case   16:  		/* mr R3, R31 */
		/* 820DD1F0h case   16:*/		regs.R3 = regs.R31;
		/* 820DD1F0h case   16:*/		return 0x820DD1F4;
		  /* 820DD1F4h */ case   17:  		/* bl -12356 */
		/* 820DD1F4h case   17:*/		regs.LR = 0x820DD1F8; return 0x820DA1B0;
		/* 820DD1F4h case   17:*/		return 0x820DD1F8;
		  /* 820DD1F8h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 820DD1F8h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD1F8h case   18:*/		return 0x820DD1FC;
		  /* 820DD1FCh */ case   19:  		/* bc 12, CR0_LT, 212 */
		/* 820DD1FCh case   19:*/		if ( regs.CR[0].lt ) { return 0x820DD2D0;  }
		/* 820DD1FCh case   19:*/		return 0x820DD200;
		  /* 820DD200h */ case   20:  		/* lis R11, -32254 */
		/* 820DD200h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD200h case   20:*/		return 0x820DD204;
		  /* 820DD204h */ case   21:  		/* mr R6, R29 */
		/* 820DD204h case   21:*/		regs.R6 = regs.R29;
		/* 820DD204h case   21:*/		return 0x820DD208;
		  /* 820DD208h */ case   22:  		/* addi R4, R11, -29724 */
		/* 820DD208h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8BE4);
		/* 820DD208h case   22:*/		return 0x820DD20C;
		  /* 820DD20Ch */ case   23:  		/* mr R5, R29 */
		/* 820DD20Ch case   23:*/		regs.R5 = regs.R29;
		/* 820DD20Ch case   23:*/		return 0x820DD210;
		  /* 820DD210h */ case   24:  		/* mr R3, R31 */
		/* 820DD210h case   24:*/		regs.R3 = regs.R31;
		/* 820DD210h case   24:*/		return 0x820DD214;
		  /* 820DD214h */ case   25:  		/* bl -12604 */
		/* 820DD214h case   25:*/		regs.LR = 0x820DD218; return 0x820DA0D8;
		/* 820DD214h case   25:*/		return 0x820DD218;
		  /* 820DD218h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820DD218h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD218h case   26:*/		return 0x820DD21C;
		  /* 820DD21Ch */ case   27:  		/* bc 12, CR0_LT, 180 */
		/* 820DD21Ch case   27:*/		if ( regs.CR[0].lt ) { return 0x820DD2D0;  }
		/* 820DD21Ch case   27:*/		return 0x820DD220;
		  /* 820DD220h */ case   28:  		/* mr R3, R31 */
		/* 820DD220h case   28:*/		regs.R3 = regs.R31;
		/* 820DD220h case   28:*/		return 0x820DD224;
		  /* 820DD224h */ case   29:  		/* bl -12404 */
		/* 820DD224h case   29:*/		regs.LR = 0x820DD228; return 0x820DA1B0;
		/* 820DD224h case   29:*/		return 0x820DD228;
		  /* 820DD228h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 820DD228h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD228h case   30:*/		return 0x820DD22C;
		  /* 820DD22Ch */ case   31:  		/* bc 12, CR0_LT, 164 */
		/* 820DD22Ch case   31:*/		if ( regs.CR[0].lt ) { return 0x820DD2D0;  }
		/* 820DD22Ch case   31:*/		return 0x820DD230;
		  /* 820DD230h */ case   32:  		/* lis R11, -32254 */
		/* 820DD230h case   32:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD230h case   32:*/		return 0x820DD234;
		  /* 820DD234h */ case   33:  		/* mr R5, R30 */
		/* 820DD234h case   33:*/		regs.R5 = regs.R30;
		/* 820DD234h case   33:*/		return 0x820DD238;
		  /* 820DD238h */ case   34:  		/* addi R4, R11, -29760 */
		/* 820DD238h case   34:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8BC0);
		/* 820DD238h case   34:*/		return 0x820DD23C;
		  /* 820DD23Ch */ case   35:  		/* mr R3, R31 */
		/* 820DD23Ch case   35:*/		regs.R3 = regs.R31;
		/* 820DD23Ch case   35:*/		return 0x820DD240;
		  /* 820DD240h */ case   36:  		/* bl -12648 */
		/* 820DD240h case   36:*/		regs.LR = 0x820DD244; return 0x820DA0D8;
		/* 820DD240h case   36:*/		return 0x820DD244;
		  /* 820DD244h */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 820DD244h case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD244h case   37:*/		return 0x820DD248;
		  /* 820DD248h */ case   38:  		/* bc 12, CR0_LT, 136 */
		/* 820DD248h case   38:*/		if ( regs.CR[0].lt ) { return 0x820DD2D0;  }
		/* 820DD248h case   38:*/		return 0x820DD24C;
		  /* 820DD24Ch */ case   39:  		/* mr R3, R31 */
		/* 820DD24Ch case   39:*/		regs.R3 = regs.R31;
		/* 820DD24Ch case   39:*/		return 0x820DD250;
		  /* 820DD250h */ case   40:  		/* bl -12448 */
		/* 820DD250h case   40:*/		regs.LR = 0x820DD254; return 0x820DA1B0;
		/* 820DD250h case   40:*/		return 0x820DD254;
		  /* 820DD254h */ case   41:  		/* cmpwi CR0, R3, 0 */
		/* 820DD254h case   41:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD254h case   41:*/		return 0x820DD258;
		  /* 820DD258h */ case   42:  		/* bc 12, CR0_LT, 120 */
		/* 820DD258h case   42:*/		if ( regs.CR[0].lt ) { return 0x820DD2D0;  }
		/* 820DD258h case   42:*/		return 0x820DD25C;
		  /* 820DD25Ch */ case   43:  		/* lis R11, -32254 */
		/* 820DD25Ch case   43:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD25Ch case   43:*/		return 0x820DD260;
		  /* 820DD260h */ case   44:  		/* mr R5, R30 */
		/* 820DD260h case   44:*/		regs.R5 = regs.R30;
		/* 820DD260h case   44:*/		return 0x820DD264;
		  /* 820DD264h */ case   45:  		/* addi R4, R11, -29796 */
		/* 820DD264h case   45:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8B9C);
		/* 820DD264h case   45:*/		return 0x820DD268;
		  /* 820DD268h */ case   46:  		/* mr R3, R31 */
		/* 820DD268h case   46:*/		regs.R3 = regs.R31;
		/* 820DD268h case   46:*/		return 0x820DD26C;
		  /* 820DD26Ch */ case   47:  		/* bl -12692 */
		/* 820DD26Ch case   47:*/		regs.LR = 0x820DD270; return 0x820DA0D8;
		/* 820DD26Ch case   47:*/		return 0x820DD270;
		  /* 820DD270h */ case   48:  		/* cmpwi CR0, R3, 0 */
		/* 820DD270h case   48:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD270h case   48:*/		return 0x820DD274;
		  /* 820DD274h */ case   49:  		/* bc 12, CR0_LT, 92 */
		/* 820DD274h case   49:*/		if ( regs.CR[0].lt ) { return 0x820DD2D0;  }
		/* 820DD274h case   49:*/		return 0x820DD278;
		  /* 820DD278h */ case   50:  		/* mr R3, R31 */
		/* 820DD278h case   50:*/		regs.R3 = regs.R31;
		/* 820DD278h case   50:*/		return 0x820DD27C;
		  /* 820DD27Ch */ case   51:  		/* bl -12492 */
		/* 820DD27Ch case   51:*/		regs.LR = 0x820DD280; return 0x820DA1B0;
		/* 820DD27Ch case   51:*/		return 0x820DD280;
		  /* 820DD280h */ case   52:  		/* cmpwi CR0, R3, 0 */
		/* 820DD280h case   52:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD280h case   52:*/		return 0x820DD284;
		  /* 820DD284h */ case   53:  		/* bc 12, CR0_LT, 76 */
		/* 820DD284h case   53:*/		if ( regs.CR[0].lt ) { return 0x820DD2D0;  }
		/* 820DD284h case   53:*/		return 0x820DD288;
		  /* 820DD288h */ case   54:  		/* lis R11, -32254 */
		/* 820DD288h case   54:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD288h case   54:*/		return 0x820DD28C;
		  /* 820DD28Ch */ case   55:  		/* mr R5, R30 */
		/* 820DD28Ch case   55:*/		regs.R5 = regs.R30;
		/* 820DD28Ch case   55:*/		return 0x820DD290;
		  /* 820DD290h */ case   56:  		/* addi R4, R11, -29832 */
		/* 820DD290h case   56:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8B78);
		/* 820DD290h case   56:*/		return 0x820DD294;
		  /* 820DD294h */ case   57:  		/* mr R3, R31 */
		/* 820DD294h case   57:*/		regs.R3 = regs.R31;
		/* 820DD294h case   57:*/		return 0x820DD298;
		  /* 820DD298h */ case   58:  		/* bl -12736 */
		/* 820DD298h case   58:*/		regs.LR = 0x820DD29C; return 0x820DA0D8;
		/* 820DD298h case   58:*/		return 0x820DD29C;
		  /* 820DD29Ch */ case   59:  		/* cmpwi CR0, R3, 0 */
		/* 820DD29Ch case   59:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD29Ch case   59:*/		return 0x820DD2A0;
		  /* 820DD2A0h */ case   60:  		/* bc 12, CR0_LT, 48 */
		/* 820DD2A0h case   60:*/		if ( regs.CR[0].lt ) { return 0x820DD2D0;  }
		/* 820DD2A0h case   60:*/		return 0x820DD2A4;
		  /* 820DD2A4h */ case   61:  		/* mr R3, R31 */
		/* 820DD2A4h case   61:*/		regs.R3 = regs.R31;
		/* 820DD2A4h case   61:*/		return 0x820DD2A8;
		  /* 820DD2A8h */ case   62:  		/* bl -12536 */
		/* 820DD2A8h case   62:*/		regs.LR = 0x820DD2AC; return 0x820DA1B0;
		/* 820DD2A8h case   62:*/		return 0x820DD2AC;
		  /* 820DD2ACh */ case   63:  		/* cmpwi CR0, R3, 0 */
		/* 820DD2ACh case   63:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD2ACh case   63:*/		return 0x820DD2B0;
		  /* 820DD2B0h */ case   64:  		/* bc 12, CR0_LT, 32 */
		/* 820DD2B0h case   64:*/		if ( regs.CR[0].lt ) { return 0x820DD2D0;  }
		/* 820DD2B0h case   64:*/		return 0x820DD2B4;
		  /* 820DD2B4h */ case   65:  		/* lis R11, -32254 */
		/* 820DD2B4h case   65:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD2B4h case   65:*/		return 0x820DD2B8;
		  /* 820DD2B8h */ case   66:  		/* mr R5, R30 */
		/* 820DD2B8h case   66:*/		regs.R5 = regs.R30;
		/* 820DD2B8h case   66:*/		return 0x820DD2BC;
		  /* 820DD2BCh */ case   67:  		/* addi R4, R11, -29868 */
		/* 820DD2BCh case   67:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8B54);
		/* 820DD2BCh case   67:*/		return 0x820DD2C0;
		  /* 820DD2C0h */ case   68:  		/* mr R3, R31 */
		/* 820DD2C0h case   68:*/		regs.R3 = regs.R31;
		/* 820DD2C0h case   68:*/		return 0x820DD2C4;
		  /* 820DD2C4h */ case   69:  		/* bl -12780 */
		/* 820DD2C4h case   69:*/		regs.LR = 0x820DD2C8; return 0x820DA0D8;
		/* 820DD2C4h case   69:*/		return 0x820DD2C8;
		  /* 820DD2C8h */ case   70:  		/* srawi R11, R3, 31 */
		/* 820DD2C8h case   70:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820DD2C8h case   70:*/		return 0x820DD2CC;
		  /* 820DD2CCh */ case   71:  		/* and R3, R11, R3 */
		/* 820DD2CCh case   71:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820DD2CCh case   71:*/		return 0x820DD2D0;
	}
	return 0x820DD2D0;
} // Block from 820DD1B0h-820DD2D0h (72 instructions)

//////////////////////////////////////////////////////
// Block at 820DD2D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD2D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD2D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD2D0);
		  /* 820DD2D0h */ case    0:  		/* addi R1, R1, 144 */
		/* 820DD2D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820DD2D0h case    0:*/		return 0x820DD2D4;
		  /* 820DD2D4h */ case    1:  		/* b -311336 */
		/* 820DD2D4h case    1:*/		return 0x820912AC;
		/* 820DD2D4h case    1:*/		return 0x820DD2D8;
	}
	return 0x820DD2D8;
} // Block from 820DD2D0h-820DD2D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DD2D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD2D8);
		  /* 820DD2D8h */ case    0:  		/* mfspr R12, LR */
		/* 820DD2D8h case    0:*/		regs.R12 = regs.LR;
		/* 820DD2D8h case    0:*/		return 0x820DD2DC;
		  /* 820DD2DCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD2DCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD2DCh case    1:*/		return 0x820DD2E0;
		  /* 820DD2E0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DD2E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DD2E0h case    2:*/		return 0x820DD2E4;
		  /* 820DD2E4h */ case    3:  		/* neg R10, R5 */
		/* 820DD2E4h case    3:*/		cpu::op::neg<0>(regs,&regs.R10,regs.R5);
		/* 820DD2E4h case    3:*/		return 0x820DD2E8;
		  /* 820DD2E8h */ case    4:  		/* mr R6, R4 */
		/* 820DD2E8h case    4:*/		regs.R6 = regs.R4;
		/* 820DD2E8h case    4:*/		return 0x820DD2EC;
		  /* 820DD2ECh */ case    5:  		/* lis R9, -32254 */
		/* 820DD2ECh case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DD2ECh case    5:*/		return 0x820DD2F0;
		  /* 820DD2F0h */ case    6:  		/* mr R11, R4 */
		/* 820DD2F0h case    6:*/		regs.R11 = regs.R4;
		/* 820DD2F0h case    6:*/		return 0x820DD2F4;
		  /* 820DD2F4h */ case    7:  		/* addi R4, R9, -29600 */
		/* 820DD2F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFF8C60);
		/* 820DD2F4h case    7:*/		return 0x820DD2F8;
		  /* 820DD2F8h */ case    8:  		/* rlwinm R7, R10, 2, 28, 29 */
		/* 820DD2F8h case    8:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R7,regs.R10);
		/* 820DD2F8h case    8:*/		return 0x820DD2FC;
		  /* 820DD2FCh */ case    9:  		/* mr R5, R6 */
		/* 820DD2FCh case    9:*/		regs.R5 = regs.R6;
		/* 820DD2FCh case    9:*/		return 0x820DD300;
		  /* 820DD300h */ case   10:  		/* bl -12840 */
		/* 820DD300h case   10:*/		regs.LR = 0x820DD304; return 0x820DA0D8;
		/* 820DD300h case   10:*/		return 0x820DD304;
		  /* 820DD304h */ case   11:  		/* addi R1, R1, 128 */
		/* 820DD304h case   11:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DD304h case   11:*/		return 0x820DD308;
		  /* 820DD308h */ case   12:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD308h case   12:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD308h case   12:*/		return 0x820DD30C;
		  /* 820DD30Ch */ case   13:  		/* mtspr LR, R12 */
		/* 820DD30Ch case   13:*/		regs.LR = regs.R12;
		/* 820DD30Ch case   13:*/		return 0x820DD310;
		  /* 820DD310h */ case   14:  		/* bclr 20, CR0_LT */
		/* 820DD310h case   14:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD310h case   14:*/		return 0x820DD314;
	}
	return 0x820DD314;
} // Block from 820DD2D8h-820DD314h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820DD314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD314);
		  /* 820DD314h */ case    0:  		/* nop */
		/* 820DD314h case    0:*/		cpu::op::nop();
		/* 820DD314h case    0:*/		return 0x820DD318;
	}
	return 0x820DD318;
} // Block from 820DD314h-820DD318h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD318);
		  /* 820DD318h */ case    0:  		/* mfspr R12, LR */
		/* 820DD318h case    0:*/		regs.R12 = regs.LR;
		/* 820DD318h case    0:*/		return 0x820DD31C;
		  /* 820DD31Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD31Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD31Ch case    1:*/		return 0x820DD320;
		  /* 820DD320h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DD320h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DD320h case    2:*/		return 0x820DD324;
		  /* 820DD324h */ case    3:  		/* mr R11, R4 */
		/* 820DD324h case    3:*/		regs.R11 = regs.R4;
		/* 820DD324h case    3:*/		return 0x820DD328;
		  /* 820DD328h */ case    4:  		/* lis R10, -32254 */
		/* 820DD328h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD328h case    4:*/		return 0x820DD32C;
		  /* 820DD32Ch */ case    5:  		/* mr R6, R5 */
		/* 820DD32Ch case    5:*/		regs.R6 = regs.R5;
		/* 820DD32Ch case    5:*/		return 0x820DD330;
		  /* 820DD330h */ case    6:  		/* addi R4, R10, -29576 */
		/* 820DD330h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8C78);
		/* 820DD330h case    6:*/		return 0x820DD334;
		  /* 820DD334h */ case    7:  		/* mr R5, R11 */
		/* 820DD334h case    7:*/		regs.R5 = regs.R11;
		/* 820DD334h case    7:*/		return 0x820DD338;
		  /* 820DD338h */ case    8:  		/* bl -12896 */
		/* 820DD338h case    8:*/		regs.LR = 0x820DD33C; return 0x820DA0D8;
		/* 820DD338h case    8:*/		return 0x820DD33C;
		  /* 820DD33Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DD33Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DD33Ch case    9:*/		return 0x820DD340;
		  /* 820DD340h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD340h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD340h case   10:*/		return 0x820DD344;
		  /* 820DD344h */ case   11:  		/* mtspr LR, R12 */
		/* 820DD344h case   11:*/		regs.LR = regs.R12;
		/* 820DD344h case   11:*/		return 0x820DD348;
		  /* 820DD348h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DD348h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD348h case   12:*/		return 0x820DD34C;
	}
	return 0x820DD34C;
} // Block from 820DD318h-820DD34Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DD34Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD34C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD34C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD34C);
		  /* 820DD34Ch */ case    0:  		/* nop */
		/* 820DD34Ch case    0:*/		cpu::op::nop();
		/* 820DD34Ch case    0:*/		return 0x820DD350;
	}
	return 0x820DD350;
} // Block from 820DD34Ch-820DD350h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD350);
		  /* 820DD350h */ case    0:  		/* mfspr R12, LR */
		/* 820DD350h case    0:*/		regs.R12 = regs.LR;
		/* 820DD350h case    0:*/		return 0x820DD354;
		  /* 820DD354h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD354h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD354h case    1:*/		return 0x820DD358;
		  /* 820DD358h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DD358h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DD358h case    2:*/		return 0x820DD35C;
		  /* 820DD35Ch */ case    3:  		/* mr R11, R4 */
		/* 820DD35Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DD35Ch case    3:*/		return 0x820DD360;
		  /* 820DD360h */ case    4:  		/* lis R10, -32254 */
		/* 820DD360h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD360h case    4:*/		return 0x820DD364;
		  /* 820DD364h */ case    5:  		/* mr R6, R5 */
		/* 820DD364h case    5:*/		regs.R6 = regs.R5;
		/* 820DD364h case    5:*/		return 0x820DD368;
		  /* 820DD368h */ case    6:  		/* addi R4, R10, -29556 */
		/* 820DD368h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8C8C);
		/* 820DD368h case    6:*/		return 0x820DD36C;
		  /* 820DD36Ch */ case    7:  		/* mr R5, R11 */
		/* 820DD36Ch case    7:*/		regs.R5 = regs.R11;
		/* 820DD36Ch case    7:*/		return 0x820DD370;
		  /* 820DD370h */ case    8:  		/* bl -12952 */
		/* 820DD370h case    8:*/		regs.LR = 0x820DD374; return 0x820DA0D8;
		/* 820DD370h case    8:*/		return 0x820DD374;
		  /* 820DD374h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DD374h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DD374h case    9:*/		return 0x820DD378;
		  /* 820DD378h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD378h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD378h case   10:*/		return 0x820DD37C;
		  /* 820DD37Ch */ case   11:  		/* mtspr LR, R12 */
		/* 820DD37Ch case   11:*/		regs.LR = regs.R12;
		/* 820DD37Ch case   11:*/		return 0x820DD380;
		  /* 820DD380h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DD380h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD380h case   12:*/		return 0x820DD384;
	}
	return 0x820DD384;
} // Block from 820DD350h-820DD384h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DD384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD384);
		  /* 820DD384h */ case    0:  		/* nop */
		/* 820DD384h case    0:*/		cpu::op::nop();
		/* 820DD384h case    0:*/		return 0x820DD388;
	}
	return 0x820DD388;
} // Block from 820DD384h-820DD388h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD388);
		  /* 820DD388h */ case    0:  		/* mfspr R12, LR */
		/* 820DD388h case    0:*/		regs.R12 = regs.LR;
		/* 820DD388h case    0:*/		return 0x820DD38C;
		  /* 820DD38Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD38Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD38Ch case    1:*/		return 0x820DD390;
		  /* 820DD390h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DD390h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DD390h case    2:*/		return 0x820DD394;
		  /* 820DD394h */ case    3:  		/* lis R11, -32254 */
		/* 820DD394h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD394h case    3:*/		return 0x820DD398;
		  /* 820DD398h */ case    4:  		/* mr R5, R4 */
		/* 820DD398h case    4:*/		regs.R5 = regs.R4;
		/* 820DD398h case    4:*/		return 0x820DD39C;
		  /* 820DD39Ch */ case    5:  		/* addi R4, R11, -29536 */
		/* 820DD39Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8CA0);
		/* 820DD39Ch case    5:*/		return 0x820DD3A0;
		  /* 820DD3A0h */ case    6:  		/* bl -13000 */
		/* 820DD3A0h case    6:*/		regs.LR = 0x820DD3A4; return 0x820DA0D8;
		/* 820DD3A0h case    6:*/		return 0x820DD3A4;
		  /* 820DD3A4h */ case    7:  		/* addi R1, R1, 112 */
		/* 820DD3A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DD3A4h case    7:*/		return 0x820DD3A8;
		  /* 820DD3A8h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD3A8h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD3A8h case    8:*/		return 0x820DD3AC;
		  /* 820DD3ACh */ case    9:  		/* mtspr LR, R12 */
		/* 820DD3ACh case    9:*/		regs.LR = regs.R12;
		/* 820DD3ACh case    9:*/		return 0x820DD3B0;
		  /* 820DD3B0h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820DD3B0h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD3B0h case   10:*/		return 0x820DD3B4;
	}
	return 0x820DD3B4;
} // Block from 820DD388h-820DD3B4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820DD3B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD3B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD3B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD3B4);
		  /* 820DD3B4h */ case    0:  		/* nop */
		/* 820DD3B4h case    0:*/		cpu::op::nop();
		/* 820DD3B4h case    0:*/		return 0x820DD3B8;
	}
	return 0x820DD3B8;
} // Block from 820DD3B4h-820DD3B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD3B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD3B8);
		  /* 820DD3B8h */ case    0:  		/* mfspr R12, LR */
		/* 820DD3B8h case    0:*/		regs.R12 = regs.LR;
		/* 820DD3B8h case    0:*/		return 0x820DD3BC;
		  /* 820DD3BCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD3BCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD3BCh case    1:*/		return 0x820DD3C0;
		  /* 820DD3C0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DD3C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DD3C0h case    2:*/		return 0x820DD3C4;
		  /* 820DD3C4h */ case    3:  		/* lis R11, -32254 */
		/* 820DD3C4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD3C4h case    3:*/		return 0x820DD3C8;
		  /* 820DD3C8h */ case    4:  		/* mr R5, R4 */
		/* 820DD3C8h case    4:*/		regs.R5 = regs.R4;
		/* 820DD3C8h case    4:*/		return 0x820DD3CC;
		  /* 820DD3CCh */ case    5:  		/* addi R4, R11, -29520 */
		/* 820DD3CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8CB0);
		/* 820DD3CCh case    5:*/		return 0x820DD3D0;
		  /* 820DD3D0h */ case    6:  		/* bl -13048 */
		/* 820DD3D0h case    6:*/		regs.LR = 0x820DD3D4; return 0x820DA0D8;
		/* 820DD3D0h case    6:*/		return 0x820DD3D4;
		  /* 820DD3D4h */ case    7:  		/* addi R1, R1, 112 */
		/* 820DD3D4h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DD3D4h case    7:*/		return 0x820DD3D8;
		  /* 820DD3D8h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD3D8h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD3D8h case    8:*/		return 0x820DD3DC;
		  /* 820DD3DCh */ case    9:  		/* mtspr LR, R12 */
		/* 820DD3DCh case    9:*/		regs.LR = regs.R12;
		/* 820DD3DCh case    9:*/		return 0x820DD3E0;
		  /* 820DD3E0h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820DD3E0h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD3E0h case   10:*/		return 0x820DD3E4;
	}
	return 0x820DD3E4;
} // Block from 820DD3B8h-820DD3E4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820DD3E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD3E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD3E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD3E4);
		  /* 820DD3E4h */ case    0:  		/* nop */
		/* 820DD3E4h case    0:*/		cpu::op::nop();
		/* 820DD3E4h case    0:*/		return 0x820DD3E8;
	}
	return 0x820DD3E8;
} // Block from 820DD3E4h-820DD3E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD3E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD3E8);
		  /* 820DD3E8h */ case    0:  		/* mfspr R12, LR */
		/* 820DD3E8h case    0:*/		regs.R12 = regs.LR;
		/* 820DD3E8h case    0:*/		return 0x820DD3EC;
		  /* 820DD3ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD3ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD3ECh case    1:*/		return 0x820DD3F0;
		  /* 820DD3F0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DD3F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DD3F0h case    2:*/		return 0x820DD3F4;
		  /* 820DD3F4h */ case    3:  		/* mr R11, R4 */
		/* 820DD3F4h case    3:*/		regs.R11 = regs.R4;
		/* 820DD3F4h case    3:*/		return 0x820DD3F8;
		  /* 820DD3F8h */ case    4:  		/* lis R10, -32254 */
		/* 820DD3F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD3F8h case    4:*/		return 0x820DD3FC;
		  /* 820DD3FCh */ case    5:  		/* mr R6, R5 */
		/* 820DD3FCh case    5:*/		regs.R6 = regs.R5;
		/* 820DD3FCh case    5:*/		return 0x820DD400;
		  /* 820DD400h */ case    6:  		/* addi R4, R10, -29504 */
		/* 820DD400h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8CC0);
		/* 820DD400h case    6:*/		return 0x820DD404;
		  /* 820DD404h */ case    7:  		/* mr R5, R11 */
		/* 820DD404h case    7:*/		regs.R5 = regs.R11;
		/* 820DD404h case    7:*/		return 0x820DD408;
		  /* 820DD408h */ case    8:  		/* bl -13104 */
		/* 820DD408h case    8:*/		regs.LR = 0x820DD40C; return 0x820DA0D8;
		/* 820DD408h case    8:*/		return 0x820DD40C;
		  /* 820DD40Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DD40Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DD40Ch case    9:*/		return 0x820DD410;
	}
	return 0x820DD410;
} // Block from 820DD3E8h-820DD410h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DD410h
// Function '?EmitDEF@C30SWProgramCI@D3DXShader@@MAAJIPAM@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD410);
		  /* 820DD410h */ case    0:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD410h case    0:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD410h case    0:*/		return 0x820DD414;
		  /* 820DD414h */ case    1:  		/* mtspr LR, R12 */
		/* 820DD414h case    1:*/		regs.LR = regs.R12;
		/* 820DD414h case    1:*/		return 0x820DD418;
		  /* 820DD418h */ case    2:  		/* bclr 20, CR0_LT */
		/* 820DD418h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD418h case    2:*/		return 0x820DD41C;
	}
	return 0x820DD41C;
} // Block from 820DD410h-820DD41Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DD41Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD41C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD41C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD41C);
		  /* 820DD41Ch */ case    0:  		/* nop */
		/* 820DD41Ch case    0:*/		cpu::op::nop();
		/* 820DD41Ch case    0:*/		return 0x820DD420;
	}
	return 0x820DD420;
} // Block from 820DD41Ch-820DD420h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD420);
		  /* 820DD420h */ case    0:  		/* mfspr R12, LR */
		/* 820DD420h case    0:*/		regs.R12 = regs.LR;
		/* 820DD420h case    0:*/		return 0x820DD424;
		  /* 820DD424h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD424h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD424h case    1:*/		return 0x820DD428;
		  /* 820DD428h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DD428h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DD428h case    2:*/		return 0x820DD42C;
		  /* 820DD42Ch */ case    3:  		/* mr R11, R4 */
		/* 820DD42Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DD42Ch case    3:*/		return 0x820DD430;
		  /* 820DD430h */ case    4:  		/* lis R10, -32254 */
		/* 820DD430h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD430h case    4:*/		return 0x820DD434;
		  /* 820DD434h */ case    5:  		/* mr R6, R5 */
		/* 820DD434h case    5:*/		regs.R6 = regs.R5;
		/* 820DD434h case    5:*/		return 0x820DD438;
		  /* 820DD438h */ case    6:  		/* addi R4, R10, -29484 */
		/* 820DD438h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8CD4);
		/* 820DD438h case    6:*/		return 0x820DD43C;
		  /* 820DD43Ch */ case    7:  		/* mr R5, R11 */
		/* 820DD43Ch case    7:*/		regs.R5 = regs.R11;
		/* 820DD43Ch case    7:*/		return 0x820DD440;
		  /* 820DD440h */ case    8:  		/* bl -13160 */
		/* 820DD440h case    8:*/		regs.LR = 0x820DD444; return 0x820DA0D8;
		/* 820DD440h case    8:*/		return 0x820DD444;
		  /* 820DD444h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DD444h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DD444h case    9:*/		return 0x820DD448;
		  /* 820DD448h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD448h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD448h case   10:*/		return 0x820DD44C;
		  /* 820DD44Ch */ case   11:  		/* mtspr LR, R12 */
		/* 820DD44Ch case   11:*/		regs.LR = regs.R12;
		/* 820DD44Ch case   11:*/		return 0x820DD450;
		  /* 820DD450h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DD450h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD450h case   12:*/		return 0x820DD454;
	}
	return 0x820DD454;
} // Block from 820DD420h-820DD454h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DD454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD454);
		  /* 820DD454h */ case    0:  		/* nop */
		/* 820DD454h case    0:*/		cpu::op::nop();
		/* 820DD454h case    0:*/		return 0x820DD458;
	}
	return 0x820DD458;
} // Block from 820DD454h-820DD458h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD458);
		  /* 820DD458h */ case    0:  		/* mfspr R12, LR */
		/* 820DD458h case    0:*/		regs.R12 = regs.LR;
		/* 820DD458h case    0:*/		return 0x820DD45C;
		  /* 820DD45Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD45Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD45Ch case    1:*/		return 0x820DD460;
		  /* 820DD460h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DD460h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DD460h case    2:*/		return 0x820DD464;
		  /* 820DD464h */ case    3:  		/* mr R11, R4 */
		/* 820DD464h case    3:*/		regs.R11 = regs.R4;
		/* 820DD464h case    3:*/		return 0x820DD468;
		  /* 820DD468h */ case    4:  		/* lis R10, -32254 */
		/* 820DD468h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD468h case    4:*/		return 0x820DD46C;
		  /* 820DD46Ch */ case    5:  		/* mr R7, R6 */
		/* 820DD46Ch case    5:*/		regs.R7 = regs.R6;
		/* 820DD46Ch case    5:*/		return 0x820DD470;
		  /* 820DD470h */ case    6:  		/* mr R6, R5 */
		/* 820DD470h case    6:*/		regs.R6 = regs.R5;
		/* 820DD470h case    6:*/		return 0x820DD474;
		  /* 820DD474h */ case    7:  		/* addi R4, R10, -29464 */
		/* 820DD474h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8CE8);
		/* 820DD474h case    7:*/		return 0x820DD478;
		  /* 820DD478h */ case    8:  		/* mr R5, R11 */
		/* 820DD478h case    8:*/		regs.R5 = regs.R11;
		/* 820DD478h case    8:*/		return 0x820DD47C;
		  /* 820DD47Ch */ case    9:  		/* bl -13220 */
		/* 820DD47Ch case    9:*/		regs.LR = 0x820DD480; return 0x820DA0D8;
		/* 820DD47Ch case    9:*/		return 0x820DD480;
		  /* 820DD480h */ case   10:  		/* addi R1, R1, 128 */
		/* 820DD480h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DD480h case   10:*/		return 0x820DD484;
		  /* 820DD484h */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD484h case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD484h case   11:*/		return 0x820DD488;
		  /* 820DD488h */ case   12:  		/* mtspr LR, R12 */
		/* 820DD488h case   12:*/		regs.LR = regs.R12;
		/* 820DD488h case   12:*/		return 0x820DD48C;
		  /* 820DD48Ch */ case   13:  		/* bclr 20, CR0_LT */
		/* 820DD48Ch case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD48Ch case   13:*/		return 0x820DD490;
	}
	return 0x820DD490;
} // Block from 820DD458h-820DD490h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DD490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD490);
		  /* 820DD490h */ case    0:  		/* mfspr R12, LR */
		/* 820DD490h case    0:*/		regs.R12 = regs.LR;
		/* 820DD490h case    0:*/		return 0x820DD494;
		  /* 820DD494h */ case    1:  		/* bl -311904 */
		/* 820DD494h case    1:*/		regs.LR = 0x820DD498; return 0x82091234;
		/* 820DD494h case    1:*/		return 0x820DD498;
		  /* 820DD498h */ case    2:  		/* stwu R1, <#[R1 - 336]> */
		/* 820DD498h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEB0);
		/* 820DD498h case    2:*/		return 0x820DD49C;
		  /* 820DD49Ch */ case    3:  		/* lwz R11, <#[R3 + 1816]> */
		/* 820DD49Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000718) );
		/* 820DD49Ch case    3:*/		return 0x820DD4A0;
		  /* 820DD4A0h */ case    4:  		/* mr R31, R3 */
		/* 820DD4A0h case    4:*/		regs.R31 = regs.R3;
		/* 820DD4A0h case    4:*/		return 0x820DD4A4;
		  /* 820DD4A4h */ case    5:  		/* mr R29, R4 */
		/* 820DD4A4h case    5:*/		regs.R29 = regs.R4;
		/* 820DD4A4h case    5:*/		return 0x820DD4A8;
		  /* 820DD4A8h */ case    6:  		/* mr R21, R5 */
		/* 820DD4A8h case    6:*/		regs.R21 = regs.R5;
		/* 820DD4A8h case    6:*/		return 0x820DD4AC;
		  /* 820DD4ACh */ case    7:  		/* mr R23, R6 */
		/* 820DD4ACh case    7:*/		regs.R23 = regs.R6;
		/* 820DD4ACh case    7:*/		return 0x820DD4B0;
		  /* 820DD4B0h */ case    8:  		/* mr R22, R7 */
		/* 820DD4B0h case    8:*/		regs.R22 = regs.R7;
		/* 820DD4B0h case    8:*/		return 0x820DD4B4;
		  /* 820DD4B4h */ case    9:  		/* lis R20, 29760 */
		/* 820DD4B4h case    9:*/		cpu::op::lis<0>(regs,&regs.R20,0x7440);
		/* 820DD4B4h case    9:*/		return 0x820DD4B8;
		  /* 820DD4B8h */ case   10:  		/* lis R19, 29616 */
		/* 820DD4B8h case   10:*/		cpu::op::lis<0>(regs,&regs.R19,0x73B0);
		/* 820DD4B8h case   10:*/		return 0x820DD4BC;
		  /* 820DD4BCh */ case   11:  		/* li R30, 0 */
		/* 820DD4BCh case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DD4BCh case   11:*/		return 0x820DD4C0;
		  /* 820DD4C0h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 820DD4C0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DD4C0h case   12:*/		return 0x820DD4C4;
		  /* 820DD4C4h */ case   13:  		/* bc 12, CR6_EQ, 276 */
		/* 820DD4C4h case   13:*/		if ( regs.CR[6].eq ) { return 0x820DD5D8;  }
		/* 820DD4C4h case   13:*/		return 0x820DD4C8;
	}
	return 0x820DD4C8;
} // Block from 820DD490h-820DD4C8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DD4C8h
// Function '?EmitSwizzleOp@C30SWProgramCI@D3DXShader@@MAAJPBDIIII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD4C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD4C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD4C8);
		  /* 820DD4C8h */ case    0:  		/* lis R7, -32254 */
		/* 820DD4C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8202);
		/* 820DD4C8h case    0:*/		return 0x820DD4CC;
		  /* 820DD4CCh */ case    1:  		/* lis R8, -32254 */
		/* 820DD4CCh case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820DD4CCh case    1:*/		return 0x820DD4D0;
		  /* 820DD4D0h */ case    2:  		/* lis R9, -32254 */
		/* 820DD4D0h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DD4D0h case    2:*/		return 0x820DD4D4;
		  /* 820DD4D4h */ case    3:  		/* lis R10, -32254 */
		/* 820DD4D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD4D4h case    3:*/		return 0x820DD4D8;
		  /* 820DD4D8h */ case    4:  		/* lis R11, -32254 */
		/* 820DD4D8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD4D8h case    4:*/		return 0x820DD4DC;
		  /* 820DD4DCh */ case    5:  		/* addi R28, R7, -29380 */
		/* 820DD4DCh case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R7,0xFFFF8D3C);
		/* 820DD4DCh case    5:*/		return 0x820DD4E0;
		  /* 820DD4E0h */ case    6:  		/* addi R27, R8, -29392 */
		/* 820DD4E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R8,0xFFFF8D30);
		/* 820DD4E0h case    6:*/		return 0x820DD4E4;
		  /* 820DD4E4h */ case    7:  		/* addi R26, R9, -29404 */
		/* 820DD4E4h case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R9,0xFFFF8D24);
		/* 820DD4E4h case    7:*/		return 0x820DD4E8;
		  /* 820DD4E8h */ case    8:  		/* addi R25, R10, -29416 */
		/* 820DD4E8h case    8:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0xFFFF8D18);
		/* 820DD4E8h case    8:*/		return 0x820DD4EC;
		  /* 820DD4ECh */ case    9:  		/* addi R24, R11, -30692 */
		/* 820DD4ECh case    9:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFF881C);
		/* 820DD4ECh case    9:*/		return 0x820DD4F0;
		  /* 820DD4F0h */ case   10:  		/* mr R7, R30 */
		/* 820DD4F0h case   10:*/		regs.R7 = regs.R30;
		/* 820DD4F0h case   10:*/		return 0x820DD4F4;
		  /* 820DD4F4h */ case   11:  		/* mr R6, R30 */
		/* 820DD4F4h case   11:*/		regs.R6 = regs.R30;
		/* 820DD4F4h case   11:*/		return 0x820DD4F8;
		  /* 820DD4F8h */ case   12:  		/* mr R5, R23 */
		/* 820DD4F8h case   12:*/		regs.R5 = regs.R23;
		/* 820DD4F8h case   12:*/		return 0x820DD4FC;
		  /* 820DD4FCh */ case   13:  		/* li R4, 32 */
		/* 820DD4FCh case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DD4FCh case   13:*/		return 0x820DD500;
		  /* 820DD500h */ case   14:  		/* addi R3, R1, 192 */
		/* 820DD500h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DD500h case   14:*/		return 0x820DD504;
		  /* 820DD504h */ case   15:  		/* bl -241348 */
		/* 820DD504h case   15:*/		regs.LR = 0x820DD508; return 0x820A2640;
		/* 820DD504h case   15:*/		return 0x820DD508;
		  /* 820DD508h */ case   16:  		/* mr R7, R30 */
		/* 820DD508h case   16:*/		regs.R7 = regs.R30;
		/* 820DD508h case   16:*/		return 0x820DD50C;
		  /* 820DD50Ch */ case   17:  		/* mr R6, R30 */
		/* 820DD50Ch case   17:*/		regs.R6 = regs.R30;
		/* 820DD50Ch case   17:*/		return 0x820DD510;
		  /* 820DD510h */ case   18:  		/* mr R5, R22 */
		/* 820DD510h case   18:*/		regs.R5 = regs.R22;
		/* 820DD510h case   18:*/		return 0x820DD514;
		  /* 820DD514h */ case   19:  		/* li R4, 32 */
		/* 820DD514h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DD514h case   19:*/		return 0x820DD518;
		  /* 820DD518h */ case   20:  		/* addi R3, R1, 160 */
		/* 820DD518h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DD518h case   20:*/		return 0x820DD51C;
		  /* 820DD51Ch */ case   21:  		/* bl -241372 */
		/* 820DD51Ch case   21:*/		regs.LR = 0x820DD520; return 0x820A2640;
		/* 820DD51Ch case   21:*/		return 0x820DD520;
		  /* 820DD520h */ case   22:  		/* mr R7, R30 */
		/* 820DD520h case   22:*/		regs.R7 = regs.R30;
		/* 820DD520h case   22:*/		return 0x820DD524;
		  /* 820DD524h */ case   23:  		/* mr R6, R30 */
		/* 820DD524h case   23:*/		regs.R6 = regs.R30;
		/* 820DD524h case   23:*/		return 0x820DD528;
		  /* 820DD528h */ case   24:  		/* mr R5, R21 */
		/* 820DD528h case   24:*/		regs.R5 = regs.R21;
		/* 820DD528h case   24:*/		return 0x820DD52C;
		  /* 820DD52Ch */ case   25:  		/* li R4, 32 */
		/* 820DD52Ch case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DD52Ch case   25:*/		return 0x820DD530;
		  /* 820DD530h */ case   26:  		/* addi R3, R1, 128 */
		/* 820DD530h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DD530h case   26:*/		return 0x820DD534;
		  /* 820DD534h */ case   27:  		/* bl -241396 */
		/* 820DD534h case   27:*/		regs.LR = 0x820DD538; return 0x820A2640;
		/* 820DD534h case   27:*/		return 0x820DD538;
		  /* 820DD538h */ case   28:  		/* mr R3, R31 */
		/* 820DD538h case   28:*/		regs.R3 = regs.R31;
		/* 820DD538h case   28:*/		return 0x820DD53C;
		  /* 820DD53Ch */ case   29:  		/* bl -13196 */
		/* 820DD53Ch case   29:*/		regs.LR = 0x820DD540; return 0x820DA1B0;
		/* 820DD53Ch case   29:*/		return 0x820DD540;
		  /* 820DD540h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 820DD540h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD540h case   30:*/		return 0x820DD544;
		  /* 820DD544h */ case   31:  		/* bc 12, CR0_LT, 276 */
		/* 820DD544h case   31:*/		if ( regs.CR[0].lt ) { return 0x820DD658;  }
		/* 820DD544h case   31:*/		return 0x820DD548;
		  /* 820DD548h */ case   32:  		/* mr R4, R24 */
		/* 820DD548h case   32:*/		regs.R4 = regs.R24;
		/* 820DD548h case   32:*/		return 0x820DD54C;
		  /* 820DD54Ch */ case   33:  		/* addi R5, R1, 128 */
		/* 820DD54Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DD54Ch case   33:*/		return 0x820DD550;
		  /* 820DD550h */ case   34:  		/* mr R3, R31 */
		/* 820DD550h case   34:*/		regs.R3 = regs.R31;
		/* 820DD550h case   34:*/		return 0x820DD554;
		  /* 820DD554h */ case   35:  		/* bl -13436 */
		/* 820DD554h case   35:*/		regs.LR = 0x820DD558; return 0x820DA0D8;
		/* 820DD554h case   35:*/		return 0x820DD558;
		  /* 820DD558h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820DD558h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD558h case   36:*/		return 0x820DD55C;
		  /* 820DD55Ch */ case   37:  		/* bc 12, CR0_LT, 252 */
		/* 820DD55Ch case   37:*/		if ( regs.CR[0].lt ) { return 0x820DD658;  }
		/* 820DD55Ch case   37:*/		return 0x820DD560;
		  /* 820DD560h */ case   38:  		/* cmplw CR6, R29, R20 */
		/* 820DD560h case   38:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R20);
		/* 820DD560h case   38:*/		return 0x820DD564;
		  /* 820DD564h */ case   39:  		/* bc 12, CR6_GT, 252 */
		/* 820DD564h case   39:*/		if ( regs.CR[6].gt ) { return 0x820DD660;  }
		/* 820DD564h case   39:*/		return 0x820DD568;
		  /* 820DD568h */ case   40:  		/* bc 12, CR6_EQ, 48 */
		/* 820DD568h case   40:*/		if ( regs.CR[6].eq ) { return 0x820DD598;  }
		/* 820DD568h case   40:*/		return 0x820DD56C;
		  /* 820DD56Ch */ case   41:  		/* lis R11, 29584 */
		/* 820DD56Ch case   41:*/		cpu::op::lis<0>(regs,&regs.R11,0x7390);
		/* 820DD56Ch case   41:*/		return 0x820DD570;
		  /* 820DD570h */ case   42:  		/* cmplw CR6, R29, R11 */
		/* 820DD570h case   42:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820DD570h case   42:*/		return 0x820DD574;
		  /* 820DD574h */ case   43:  		/* bc 12, CR6_EQ, 272 */
		/* 820DD574h case   43:*/		if ( regs.CR[6].eq ) { return 0x820DD684;  }
		/* 820DD574h case   43:*/		return 0x820DD578;
		  /* 820DD578h */ case   44:  		/* lis R11, 29600 */
		/* 820DD578h case   44:*/		cpu::op::lis<0>(regs,&regs.R11,0x73A0);
		/* 820DD578h case   44:*/		return 0x820DD57C;
		  /* 820DD57Ch */ case   45:  		/* cmplw CR6, R29, R11 */
		/* 820DD57Ch case   45:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820DD57Ch case   45:*/		return 0x820DD580;
		  /* 820DD580h */ case   46:  		/* bc 12, CR6_EQ, 268 */
		/* 820DD580h case   46:*/		if ( regs.CR[6].eq ) { return 0x820DD68C;  }
		/* 820DD580h case   46:*/		return 0x820DD584;
		  /* 820DD584h */ case   47:  		/* cmplw CR6, R29, R19 */
		/* 820DD584h case   47:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R19);
		/* 820DD584h case   47:*/		return 0x820DD588;
		  /* 820DD588h */ case   48:  		/* bc 12, CR6_EQ, 16 */
		/* 820DD588h case   48:*/		if ( regs.CR[6].eq ) { return 0x820DD598;  }
		/* 820DD588h case   48:*/		return 0x820DD58C;
		  /* 820DD58Ch */ case   49:  		/* lis R11, 29632 */
		/* 820DD58Ch case   49:*/		cpu::op::lis<0>(regs,&regs.R11,0x73C0);
		/* 820DD58Ch case   49:*/		return 0x820DD590;
		  /* 820DD590h */ case   50:  		/* cmplw CR6, R29, R11 */
		/* 820DD590h case   50:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820DD590h case   50:*/		return 0x820DD594;
		  /* 820DD594h */ case   51:  		/* bc 4, CR6_EQ, 256 */
		/* 820DD594h case   51:*/		if ( !regs.CR[6].eq ) { return 0x820DD694;  }
		/* 820DD594h case   51:*/		return 0x820DD598;
	}
	return 0x820DD598;
} // Block from 820DD4C8h-820DD598h (52 instructions)

//////////////////////////////////////////////////////
// Block at 820DD598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD598);
		  /* 820DD598h */ case    0:  		/* mr R4, R27 */
		/* 820DD598h case    0:*/		regs.R4 = regs.R27;
		/* 820DD598h case    0:*/		return 0x820DD59C;
		  /* 820DD59Ch */ case    1:  		/* mr R3, R31 */
		/* 820DD59Ch case    1:*/		regs.R3 = regs.R31;
		/* 820DD59Ch case    1:*/		return 0x820DD5A0;
	}
	return 0x820DD5A0;
} // Block from 820DD598h-820DD5A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DD5A0h
// Function '?EmitAndOp@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD5A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD5A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD5A0);
		  /* 820DD5A0h */ case    0:  		/* bl -13512 */
		/* 820DD5A0h case    0:*/		regs.LR = 0x820DD5A4; return 0x820DA0D8;
		/* 820DD5A0h case    0:*/		return 0x820DD5A4;
		  /* 820DD5A4h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 820DD5A4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820DD5A4h case    1:*/		return 0x820DD5A8;
		  /* 820DD5A8h */ case    2:  		/* bc 12, CR6_LT, 176 */
		/* 820DD5A8h case    2:*/		if ( regs.CR[6].lt ) { return 0x820DD658;  }
		/* 820DD5A8h case    2:*/		return 0x820DD5AC;
		  /* 820DD5ACh */ case    3:  		/* mr R4, R28 */
		/* 820DD5ACh case    3:*/		regs.R4 = regs.R28;
		/* 820DD5ACh case    3:*/		return 0x820DD5B0;
		  /* 820DD5B0h */ case    4:  		/* addi R6, R1, 160 */
		/* 820DD5B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DD5B0h case    4:*/		return 0x820DD5B4;
		  /* 820DD5B4h */ case    5:  		/* addi R5, R1, 192 */
		/* 820DD5B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820DD5B4h case    5:*/		return 0x820DD5B8;
		  /* 820DD5B8h */ case    6:  		/* mr R3, R31 */
		/* 820DD5B8h case    6:*/		regs.R3 = regs.R31;
		/* 820DD5B8h case    6:*/		return 0x820DD5BC;
		  /* 820DD5BCh */ case    7:  		/* bl -13540 */
		/* 820DD5BCh case    7:*/		regs.LR = 0x820DD5C0; return 0x820DA0D8;
		/* 820DD5BCh case    7:*/		return 0x820DD5C0;
		  /* 820DD5C0h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DD5C0h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD5C0h case    8:*/		return 0x820DD5C4;
		  /* 820DD5C4h */ case    9:  		/* bc 12, CR0_LT, 148 */
		/* 820DD5C4h case    9:*/		if ( regs.CR[0].lt ) { return 0x820DD658;  }
		/* 820DD5C4h case    9:*/		return 0x820DD5C8;
		  /* 820DD5C8h */ case   10:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DD5C8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DD5C8h case   10:*/		return 0x820DD5CC;
		  /* 820DD5CCh */ case   11:  		/* addi R30, R30, 1 */
		/* 820DD5CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DD5CCh case   11:*/		return 0x820DD5D0;
		  /* 820DD5D0h */ case   12:  		/* cmplw CR6, R30, R11 */
		/* 820DD5D0h case   12:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DD5D0h case   12:*/		return 0x820DD5D4;
		  /* 820DD5D4h */ case   13:  		/* bc 12, CR6_LT, -228 */
		/* 820DD5D4h case   13:*/		if ( regs.CR[6].lt ) { return 0x820DD4F0;  }
		/* 820DD5D4h case   13:*/		return 0x820DD5D8;
	}
	return 0x820DD5D8;
} // Block from 820DD5A0h-820DD5D8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DD5D8h
// Function '?EmitAndCOp@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD5D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD5D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD5D8);
		  /* 820DD5D8h */ case    0:  		/* cmplw CR6, R29, R19 */
		/* 820DD5D8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R19);
		/* 820DD5D8h case    0:*/		return 0x820DD5DC;
		  /* 820DD5DCh */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 820DD5DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x820DD5E8;  }
		/* 820DD5DCh case    1:*/		return 0x820DD5E0;
		  /* 820DD5E0h */ case    2:  		/* cmplw CR6, R29, R20 */
		/* 820DD5E0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R20);
		/* 820DD5E0h case    2:*/		return 0x820DD5E4;
		  /* 820DD5E4h */ case    3:  		/* bc 4, CR6_EQ, 112 */
		/* 820DD5E4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820DD654;  }
		/* 820DD5E4h case    3:*/		return 0x820DD5E8;
	}
	return 0x820DD5E8;
} // Block from 820DD5D8h-820DD5E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DD5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD5E8);
		  /* 820DD5E8h */ case    0:  		/* li R30, 0 */
		/* 820DD5E8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DD5E8h case    0:*/		return 0x820DD5EC;
		  /* 820DD5ECh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DD5ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DD5ECh case    1:*/		return 0x820DD5F0;
		  /* 820DD5F0h */ case    2:  		/* bc 12, CR6_EQ, 100 */
		/* 820DD5F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DD654;  }
		/* 820DD5F0h case    2:*/		return 0x820DD5F4;
		  /* 820DD5F4h */ case    3:  		/* lis R11, -32254 */
		/* 820DD5F4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD5F4h case    3:*/		return 0x820DD5F8;
		  /* 820DD5F8h */ case    4:  		/* addi R29, R11, -29440 */
		/* 820DD5F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8D00);
		/* 820DD5F8h case    4:*/		return 0x820DD5FC;
		  /* 820DD5FCh */ case    5:  		/* mr R7, R30 */
		/* 820DD5FCh case    5:*/		regs.R7 = regs.R30;
		/* 820DD5FCh case    5:*/		return 0x820DD600;
		  /* 820DD600h */ case    6:  		/* mr R6, R30 */
		/* 820DD600h case    6:*/		regs.R6 = regs.R30;
		/* 820DD600h case    6:*/		return 0x820DD604;
		  /* 820DD604h */ case    7:  		/* mr R5, R21 */
		/* 820DD604h case    7:*/		regs.R5 = regs.R21;
		/* 820DD604h case    7:*/		return 0x820DD608;
		  /* 820DD608h */ case    8:  		/* li R4, 32 */
		/* 820DD608h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DD608h case    8:*/		return 0x820DD60C;
		  /* 820DD60Ch */ case    9:  		/* addi R3, R1, 128 */
		/* 820DD60Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DD60Ch case    9:*/		return 0x820DD610;
	}
	return 0x820DD610;
} // Block from 820DD5E8h-820DD610h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DD610h
// Function '?EmitOrOp@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD610);
		  /* 820DD610h */ case    0:  		/* bl -241616 */
		/* 820DD610h case    0:*/		regs.LR = 0x820DD614; return 0x820A2640;
		/* 820DD610h case    0:*/		return 0x820DD614;
		  /* 820DD614h */ case    1:  		/* mr R3, R31 */
		/* 820DD614h case    1:*/		regs.R3 = regs.R31;
		/* 820DD614h case    1:*/		return 0x820DD618;
		  /* 820DD618h */ case    2:  		/* bl -13416 */
		/* 820DD618h case    2:*/		regs.LR = 0x820DD61C; return 0x820DA1B0;
		/* 820DD618h case    2:*/		return 0x820DD61C;
		  /* 820DD61Ch */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820DD61Ch case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD61Ch case    3:*/		return 0x820DD620;
		  /* 820DD620h */ case    4:  		/* bc 12, CR0_LT, 56 */
		/* 820DD620h case    4:*/		if ( regs.CR[0].lt ) { return 0x820DD658;  }
		/* 820DD620h case    4:*/		return 0x820DD624;
		  /* 820DD624h */ case    5:  		/* mr R4, R29 */
		/* 820DD624h case    5:*/		regs.R4 = regs.R29;
		/* 820DD624h case    5:*/		return 0x820DD628;
		  /* 820DD628h */ case    6:  		/* addi R7, R1, 128 */
		/* 820DD628h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DD628h case    6:*/		return 0x820DD62C;
		  /* 820DD62Ch */ case    7:  		/* addi R6, R1, 128 */
		/* 820DD62Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DD62Ch case    7:*/		return 0x820DD630;
		  /* 820DD630h */ case    8:  		/* addi R5, R1, 128 */
		/* 820DD630h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DD630h case    8:*/		return 0x820DD634;
		  /* 820DD634h */ case    9:  		/* mr R3, R31 */
		/* 820DD634h case    9:*/		regs.R3 = regs.R31;
		/* 820DD634h case    9:*/		return 0x820DD638;
		  /* 820DD638h */ case   10:  		/* bl -13664 */
		/* 820DD638h case   10:*/		regs.LR = 0x820DD63C; return 0x820DA0D8;
		/* 820DD638h case   10:*/		return 0x820DD63C;
		  /* 820DD63Ch */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820DD63Ch case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD63Ch case   11:*/		return 0x820DD640;
		  /* 820DD640h */ case   12:  		/* bc 12, CR0_LT, 24 */
		/* 820DD640h case   12:*/		if ( regs.CR[0].lt ) { return 0x820DD658;  }
		/* 820DD640h case   12:*/		return 0x820DD644;
		  /* 820DD644h */ case   13:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DD644h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DD644h case   13:*/		return 0x820DD648;
	}
	return 0x820DD648;
} // Block from 820DD610h-820DD648h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DD648h
// Function '?EmitXorOp@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD648);
		  /* 820DD648h */ case    0:  		/* addi R30, R30, 1 */
		/* 820DD648h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DD648h case    0:*/		return 0x820DD64C;
		  /* 820DD64Ch */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 820DD64Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DD64Ch case    1:*/		return 0x820DD650;
		  /* 820DD650h */ case    2:  		/* bc 12, CR6_LT, -84 */
		/* 820DD650h case    2:*/		if ( regs.CR[6].lt ) { return 0x820DD5FC;  }
		/* 820DD650h case    2:*/		return 0x820DD654;
	}
	return 0x820DD654;
} // Block from 820DD648h-820DD654h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DD654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD654);
		  /* 820DD654h */ case    0:  		/* li R3, 0 */
		/* 820DD654h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DD654h case    0:*/		return 0x820DD658;
	}
	return 0x820DD658;
} // Block from 820DD654h-820DD658h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD658);
		  /* 820DD658h */ case    0:  		/* addi R1, R1, 336 */
		/* 820DD658h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x150);
		/* 820DD658h case    0:*/		return 0x820DD65C;
		  /* 820DD65Ch */ case    1:  		/* b -312280 */
		/* 820DD65Ch case    1:*/		return 0x82091284;
		/* 820DD65Ch case    1:*/		return 0x820DD660;
	}
	return 0x820DD660;
} // Block from 820DD658h-820DD660h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DD660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD660);
		  /* 820DD660h */ case    0:  		/* lis R11, 29776 */
		/* 820DD660h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x7450);
		/* 820DD660h case    0:*/		return 0x820DD664;
		  /* 820DD664h */ case    1:  		/* cmplw CR6, R29, R11 */
		/* 820DD664h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820DD664h case    1:*/		return 0x820DD668;
		  /* 820DD668h */ case    2:  		/* bc 12, CR6_EQ, -208 */
		/* 820DD668h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DD598;  }
		/* 820DD668h case    2:*/		return 0x820DD66C;
		  /* 820DD66Ch */ case    3:  		/* lis R11, 29792 */
		/* 820DD66Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0x7460);
		/* 820DD66Ch case    3:*/		return 0x820DD670;
		  /* 820DD670h */ case    4:  		/* cmplw CR6, R29, R11 */
		/* 820DD670h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820DD670h case    4:*/		return 0x820DD674;
		  /* 820DD674h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 820DD674h case    5:*/		if ( regs.CR[6].eq ) { return 0x820DD68C;  }
		/* 820DD674h case    5:*/		return 0x820DD678;
		  /* 820DD678h */ case    6:  		/* lis R11, 29808 */
		/* 820DD678h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0x7470);
		/* 820DD678h case    6:*/		return 0x820DD67C;
		  /* 820DD67Ch */ case    7:  		/* cmplw CR6, R29, R11 */
		/* 820DD67Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820DD67Ch case    7:*/		return 0x820DD680;
	}
	return 0x820DD680;
} // Block from 820DD660h-820DD680h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820DD680h
// Function '?EmitZeroOp@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD680);
		  /* 820DD680h */ case    0:  		/* bc 4, CR6_EQ, 20 */
		/* 820DD680h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820DD694;  }
		/* 820DD680h case    0:*/		return 0x820DD684;
	}
	return 0x820DD684;
} // Block from 820DD680h-820DD684h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD684);
		  /* 820DD684h */ case    0:  		/* mr R4, R25 */
		/* 820DD684h case    0:*/		regs.R4 = regs.R25;
		/* 820DD684h case    0:*/		return 0x820DD688;
		  /* 820DD688h */ case    1:  		/* b -236 */
		/* 820DD688h case    1:*/		return 0x820DD59C;
		/* 820DD688h case    1:*/		return 0x820DD68C;
	}
	return 0x820DD68C;
} // Block from 820DD684h-820DD68Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DD68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD68C);
		  /* 820DD68Ch */ case    0:  		/* mr R4, R26 */
		/* 820DD68Ch case    0:*/		regs.R4 = regs.R26;
		/* 820DD68Ch case    0:*/		return 0x820DD690;
		  /* 820DD690h */ case    1:  		/* b -244 */
		/* 820DD690h case    1:*/		return 0x820DD59C;
		/* 820DD690h case    1:*/		return 0x820DD694;
	}
	return 0x820DD694;
} // Block from 820DD68Ch-820DD694h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DD694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD694);
		  /* 820DD694h */ case    0:  		/* lis R3, -32768 */
		/* 820DD694h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820DD694h case    0:*/		return 0x820DD698;
		  /* 820DD698h */ case    1:  		/* ori R3, R3, 16389 */
		/* 820DD698h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820DD698h case    1:*/		return 0x820DD69C;
		  /* 820DD69Ch */ case    2:  		/* b -68 */
		/* 820DD69Ch case    2:*/		return 0x820DD658;
		/* 820DD69Ch case    2:*/		return 0x820DD6A0;
	}
	return 0x820DD6A0;
} // Block from 820DD694h-820DD6A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DD6A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD6A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD6A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD6A0);
		  /* 820DD6A0h */ case    0:  		/* mfspr R12, LR */
		/* 820DD6A0h case    0:*/		regs.R12 = regs.LR;
		/* 820DD6A0h case    0:*/		return 0x820DD6A4;
		  /* 820DD6A4h */ case    1:  		/* bl -312392 */
		/* 820DD6A4h case    1:*/		regs.LR = 0x820DD6A8; return 0x8209125C;
		/* 820DD6A4h case    1:*/		return 0x820DD6A8;
	}
	return 0x820DD6A8;
} // Block from 820DD6A0h-820DD6A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DD6A8h
// Function '?EmitTrueIntOp@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD6A8);
		  /* 820DD6A8h */ case    0:  		/* stwu R1, <#[R1 - 144]> */
		/* 820DD6A8h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820DD6A8h case    0:*/		return 0x820DD6AC;
		  /* 820DD6ACh */ case    1:  		/* mr R31, R3 */
		/* 820DD6ACh case    1:*/		regs.R31 = regs.R3;
		/* 820DD6ACh case    1:*/		return 0x820DD6B0;
		  /* 820DD6B0h */ case    2:  		/* mr R30, R4 */
		/* 820DD6B0h case    2:*/		regs.R30 = regs.R4;
		/* 820DD6B0h case    2:*/		return 0x820DD6B4;
		  /* 820DD6B4h */ case    3:  		/* mr R29, R5 */
		/* 820DD6B4h case    3:*/		regs.R29 = regs.R5;
		/* 820DD6B4h case    3:*/		return 0x820DD6B8;
		  /* 820DD6B8h */ case    4:  		/* bl -13576 */
		/* 820DD6B8h case    4:*/		regs.LR = 0x820DD6BC; return 0x820DA1B0;
		/* 820DD6B8h case    4:*/		return 0x820DD6BC;
		  /* 820DD6BCh */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DD6BCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD6BCh case    5:*/		return 0x820DD6C0;
		  /* 820DD6C0h */ case    6:  		/* bc 12, CR0_LT, 28 */
		/* 820DD6C0h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DD6DC;  }
		/* 820DD6C0h case    6:*/		return 0x820DD6C4;
		  /* 820DD6C4h */ case    7:  		/* lis R11, -32254 */
		/* 820DD6C4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD6C4h case    7:*/		return 0x820DD6C8;
		  /* 820DD6C8h */ case    8:  		/* mr R6, R29 */
		/* 820DD6C8h case    8:*/		regs.R6 = regs.R29;
		/* 820DD6C8h case    8:*/		return 0x820DD6CC;
		  /* 820DD6CCh */ case    9:  		/* addi R4, R11, -29368 */
		/* 820DD6CCh case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8D48);
		/* 820DD6CCh case    9:*/		return 0x820DD6D0;
	}
	return 0x820DD6D0;
} // Block from 820DD6A8h-820DD6D0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DD6D0h
// Function '?EmitSelectOp@C30SWProgramCI@D3DXShader@@MAAJPBD00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD6D0);
		  /* 820DD6D0h */ case    0:  		/* mr R5, R30 */
		/* 820DD6D0h case    0:*/		regs.R5 = regs.R30;
		/* 820DD6D0h case    0:*/		return 0x820DD6D4;
		  /* 820DD6D4h */ case    1:  		/* mr R3, R31 */
		/* 820DD6D4h case    1:*/		regs.R3 = regs.R31;
		/* 820DD6D4h case    1:*/		return 0x820DD6D8;
		  /* 820DD6D8h */ case    2:  		/* bl -13824 */
		/* 820DD6D8h case    2:*/		regs.LR = 0x820DD6DC; return 0x820DA0D8;
		/* 820DD6D8h case    2:*/		return 0x820DD6DC;
	}
	return 0x820DD6DC;
} // Block from 820DD6D0h-820DD6DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DD6DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD6DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD6DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD6DC);
		  /* 820DD6DCh */ case    0:  		/* addi R1, R1, 144 */
		/* 820DD6DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820DD6DCh case    0:*/		return 0x820DD6E0;
		  /* 820DD6E0h */ case    1:  		/* b -312372 */
		/* 820DD6E0h case    1:*/		return 0x820912AC;
		/* 820DD6E0h case    1:*/		return 0x820DD6E4;
		  /* 820DD6E4h */ case    2:  		/* nop */
		/* 820DD6E4h case    2:*/		cpu::op::nop();
		/* 820DD6E4h case    2:*/		return 0x820DD6E8;
	}
	return 0x820DD6E8;
} // Block from 820DD6DCh-820DD6E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DD6E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD6E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD6E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD6E8);
		  /* 820DD6E8h */ case    0:  		/* mfspr R12, LR */
		/* 820DD6E8h case    0:*/		regs.R12 = regs.LR;
		/* 820DD6E8h case    0:*/		return 0x820DD6EC;
		  /* 820DD6ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DD6ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD6ECh case    1:*/		return 0x820DD6F0;
		  /* 820DD6F0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DD6F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DD6F0h case    2:*/		return 0x820DD6F4;
		  /* 820DD6F4h */ case    3:  		/* lis R11, -32254 */
		/* 820DD6F4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD6F4h case    3:*/		return 0x820DD6F8;
		  /* 820DD6F8h */ case    4:  		/* addi R4, R11, -29328 */
		/* 820DD6F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8D70);
		/* 820DD6F8h case    4:*/		return 0x820DD6FC;
		  /* 820DD6FCh */ case    5:  		/* bl -13860 */
		/* 820DD6FCh case    5:*/		regs.LR = 0x820DD700; return 0x820DA0D8;
		/* 820DD6FCh case    5:*/		return 0x820DD700;
		  /* 820DD700h */ case    6:  		/* addi R1, R1, 112 */
		/* 820DD700h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DD700h case    6:*/		return 0x820DD704;
		  /* 820DD704h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DD704h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DD704h case    7:*/		return 0x820DD708;
	}
	return 0x820DD708;
} // Block from 820DD6E8h-820DD708h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820DD708h
// Function '?EmitRoundOp@C30SWProgramCI@D3DXShader@@MAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD708);
		  /* 820DD708h */ case    0:  		/* mtspr LR, R12 */
		/* 820DD708h case    0:*/		regs.LR = regs.R12;
		/* 820DD708h case    0:*/		return 0x820DD70C;
		  /* 820DD70Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 820DD70Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DD70Ch case    1:*/		return 0x820DD710;
	}
	return 0x820DD710;
} // Block from 820DD708h-820DD710h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DD710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD710);
		  /* 820DD710h */ case    0:  		/* mfspr R12, LR */
		/* 820DD710h case    0:*/		regs.R12 = regs.LR;
		/* 820DD710h case    0:*/		return 0x820DD714;
		  /* 820DD714h */ case    1:  		/* bl -312520 */
		/* 820DD714h case    1:*/		regs.LR = 0x820DD718; return 0x8209124C;
		/* 820DD714h case    1:*/		return 0x820DD718;
		  /* 820DD718h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 820DD718h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 820DD718h case    2:*/		return 0x820DD71C;
		  /* 820DD71Ch */ case    3:  		/* mr R31, R3 */
		/* 820DD71Ch case    3:*/		regs.R31 = regs.R3;
		/* 820DD71Ch case    3:*/		return 0x820DD720;
		  /* 820DD720h */ case    4:  		/* mr R26, R4 */
		/* 820DD720h case    4:*/		regs.R26 = regs.R4;
		/* 820DD720h case    4:*/		return 0x820DD724;
		  /* 820DD724h */ case    5:  		/* mr R25, R5 */
		/* 820DD724h case    5:*/		regs.R25 = regs.R5;
		/* 820DD724h case    5:*/		return 0x820DD728;
		  /* 820DD728h */ case    6:  		/* bl -13688 */
		/* 820DD728h case    6:*/		regs.LR = 0x820DD72C; return 0x820DA1B0;
		/* 820DD728h case    6:*/		return 0x820DD72C;
		  /* 820DD72Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DD72Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD72Ch case    7:*/		return 0x820DD730;
		  /* 820DD730h */ case    8:  		/* bc 12, CR0_LT, 320 */
		/* 820DD730h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DD870;  }
		/* 820DD730h case    8:*/		return 0x820DD734;
		  /* 820DD734h */ case    9:  		/* lis R11, -32254 */
		/* 820DD734h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD734h case    9:*/		return 0x820DD738;
	}
	return 0x820DD738;
} // Block from 820DD710h-820DD738h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DD738h
// Function '?EmitConvertUIntToFloatOp@C30SWProgramCI@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD738);
		  /* 820DD738h */ case    0:  		/* mr R3, R31 */
		/* 820DD738h case    0:*/		regs.R3 = regs.R31;
		/* 820DD738h case    0:*/		return 0x820DD73C;
		  /* 820DD73Ch */ case    1:  		/* addi R4, R11, -30508 */
		/* 820DD73Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88D4);
		/* 820DD73Ch case    1:*/		return 0x820DD740;
		  /* 820DD740h */ case    2:  		/* bl -13928 */
		/* 820DD740h case    2:*/		regs.LR = 0x820DD744; return 0x820DA0D8;
		/* 820DD740h case    2:*/		return 0x820DD744;
		  /* 820DD744h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820DD744h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD744h case    3:*/		return 0x820DD748;
		  /* 820DD748h */ case    4:  		/* bc 12, CR0_LT, 296 */
		/* 820DD748h case    4:*/		if ( regs.CR[0].lt ) { return 0x820DD870;  }
		/* 820DD748h case    4:*/		return 0x820DD74C;
		  /* 820DD74Ch */ case    5:  		/* lwz R11, <#[R31]> */
		/* 820DD74Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DD74Ch case    5:*/		return 0x820DD750;
		  /* 820DD750h */ case    6:  		/* lis R10, -32254 */
		/* 820DD750h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD750h case    6:*/		return 0x820DD754;
		  /* 820DD754h */ case    7:  		/* li R8, 0 */
		/* 820DD754h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820DD754h case    7:*/		return 0x820DD758;
		  /* 820DD758h */ case    8:  		/* addi R4, R10, -30436 */
		/* 820DD758h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF891C);
		/* 820DD758h case    8:*/		return 0x820DD75C;
		  /* 820DD75Ch */ case    9:  		/* li R7, 0 */
		/* 820DD75Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DD75Ch case    9:*/		return 0x820DD760;
		  /* 820DD760h */ case   10:  		/* li R6, 0 */
		/* 820DD760h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820DD760h case   10:*/		return 0x820DD764;
		  /* 820DD764h */ case   11:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DD764h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DD764h case   11:*/		return 0x820DD768;
		  /* 820DD768h */ case   12:  		/* li R5, 0 */
		/* 820DD768h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820DD768h case   12:*/		return 0x820DD76C;
		  /* 820DD76Ch */ case   13:  		/* mr R3, R31 */
		/* 820DD76Ch case   13:*/		regs.R3 = regs.R31;
		/* 820DD76Ch case   13:*/		return 0x820DD770;
	}
	return 0x820DD770;
} // Block from 820DD738h-820DD770h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DD770h
// Function '?EmitConvertFloatToUIntOp@C30SWProgramCI@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD770);
		  /* 820DD770h */ case    0:  		/* mtspr CTR, R11 */
		/* 820DD770h case    0:*/		regs.CTR = regs.R11;
		/* 820DD770h case    0:*/		return 0x820DD774;
		  /* 820DD774h */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 820DD774h case    1:*/		if ( 1 ) { regs.LR = 0x820DD778; return (uint32)regs.CTR; }
		/* 820DD774h case    1:*/		return 0x820DD778;
		  /* 820DD778h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DD778h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD778h case    2:*/		return 0x820DD77C;
		  /* 820DD77Ch */ case    3:  		/* bc 12, CR0_LT, 244 */
		/* 820DD77Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x820DD870;  }
		/* 820DD77Ch case    3:*/		return 0x820DD780;
		  /* 820DD780h */ case    4:  		/* lis R11, -32254 */
		/* 820DD780h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD780h case    4:*/		return 0x820DD784;
		  /* 820DD784h */ case    5:  		/* mr R3, R31 */
		/* 820DD784h case    5:*/		regs.R3 = regs.R31;
		/* 820DD784h case    5:*/		return 0x820DD788;
		  /* 820DD788h */ case    6:  		/* addi R27, R11, -30768 */
		/* 820DD788h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFF87D0);
		/* 820DD788h case    6:*/		return 0x820DD78C;
		  /* 820DD78Ch */ case    7:  		/* mr R4, R27 */
		/* 820DD78Ch case    7:*/		regs.R4 = regs.R27;
		/* 820DD78Ch case    7:*/		return 0x820DD790;
		  /* 820DD790h */ case    8:  		/* bl -14008 */
		/* 820DD790h case    8:*/		regs.LR = 0x820DD794; return 0x820DA0D8;
		/* 820DD790h case    8:*/		return 0x820DD794;
		  /* 820DD794h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820DD794h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD794h case    9:*/		return 0x820DD798;
		  /* 820DD798h */ case   10:  		/* bc 12, CR0_LT, 216 */
		/* 820DD798h case   10:*/		if ( regs.CR[0].lt ) { return 0x820DD870;  }
		/* 820DD798h case   10:*/		return 0x820DD79C;
		  /* 820DD79Ch */ case   11:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DD79Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DD79Ch case   11:*/		return 0x820DD7A0;
		  /* 820DD7A0h */ case   12:  		/* li R30, 0 */
		/* 820DD7A0h case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DD7A0h case   12:*/		return 0x820DD7A4;
		  /* 820DD7A4h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 820DD7A4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DD7A4h case   13:*/		return 0x820DD7A8;
	}
	return 0x820DD7A8;
} // Block from 820DD770h-820DD7A8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DD7A8h
// Function '?EmitConvertIntToFloatOp@C30SWProgramCI@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD7A8);
		  /* 820DD7A8h */ case    0:  		/* bc 4, CR6_GT, 196 */
		/* 820DD7A8h case    0:*/		if ( !regs.CR[6].gt ) { return 0x820DD86C;  }
		/* 820DD7A8h case    0:*/		return 0x820DD7AC;
		  /* 820DD7ACh */ case    1:  		/* lis R10, -32254 */
		/* 820DD7ACh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD7ACh case    1:*/		return 0x820DD7B0;
		  /* 820DD7B0h */ case    2:  		/* lis R11, -32254 */
		/* 820DD7B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD7B0h case    2:*/		return 0x820DD7B4;
		  /* 820DD7B4h */ case    3:  		/* addi R29, R10, -30516 */
		/* 820DD7B4h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFF88CC);
		/* 820DD7B4h case    3:*/		return 0x820DD7B8;
		  /* 820DD7B8h */ case    4:  		/* addi R28, R11, -30692 */
		/* 820DD7B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFF881C);
		/* 820DD7B8h case    4:*/		return 0x820DD7BC;
		  /* 820DD7BCh */ case    5:  		/* mr R3, R31 */
		/* 820DD7BCh case    5:*/		regs.R3 = regs.R31;
		/* 820DD7BCh case    5:*/		return 0x820DD7C0;
		  /* 820DD7C0h */ case    6:  		/* bl -13840 */
		/* 820DD7C0h case    6:*/		regs.LR = 0x820DD7C4; return 0x820DA1B0;
		/* 820DD7C0h case    6:*/		return 0x820DD7C4;
		  /* 820DD7C4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DD7C4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD7C4h case    7:*/		return 0x820DD7C8;
		  /* 820DD7C8h */ case    8:  		/* bc 12, CR0_LT, 168 */
		/* 820DD7C8h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DD870;  }
		/* 820DD7C8h case    8:*/		return 0x820DD7CC;
		  /* 820DD7CCh */ case    9:  		/* mr R7, R30 */
		/* 820DD7CCh case    9:*/		regs.R7 = regs.R30;
		/* 820DD7CCh case    9:*/		return 0x820DD7D0;
		  /* 820DD7D0h */ case   10:  		/* mr R6, R30 */
		/* 820DD7D0h case   10:*/		regs.R6 = regs.R30;
		/* 820DD7D0h case   10:*/		return 0x820DD7D4;
		  /* 820DD7D4h */ case   11:  		/* mr R5, R26 */
		/* 820DD7D4h case   11:*/		regs.R5 = regs.R26;
		/* 820DD7D4h case   11:*/		return 0x820DD7D8;
		  /* 820DD7D8h */ case   12:  		/* li R4, 32 */
		/* 820DD7D8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DD7D8h case   12:*/		return 0x820DD7DC;
		  /* 820DD7DCh */ case   13:  		/* addi R3, R1, 128 */
		/* 820DD7DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DD7DCh case   13:*/		return 0x820DD7E0;
	}
	return 0x820DD7E0;
} // Block from 820DD7A8h-820DD7E0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DD7E0h
// Function '?EmitConvertFloatToIntOp@C30SWProgramCI@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD7E0);
		  /* 820DD7E0h */ case    0:  		/* bl -242080 */
		/* 820DD7E0h case    0:*/		regs.LR = 0x820DD7E4; return 0x820A2640;
		/* 820DD7E0h case    0:*/		return 0x820DD7E4;
		  /* 820DD7E4h */ case    1:  		/* mr R7, R30 */
		/* 820DD7E4h case    1:*/		regs.R7 = regs.R30;
		/* 820DD7E4h case    1:*/		return 0x820DD7E8;
		  /* 820DD7E8h */ case    2:  		/* mr R6, R30 */
		/* 820DD7E8h case    2:*/		regs.R6 = regs.R30;
		/* 820DD7E8h case    2:*/		return 0x820DD7EC;
		  /* 820DD7ECh */ case    3:  		/* mr R5, R25 */
		/* 820DD7ECh case    3:*/		regs.R5 = regs.R25;
		/* 820DD7ECh case    3:*/		return 0x820DD7F0;
		  /* 820DD7F0h */ case    4:  		/* li R4, 32 */
		/* 820DD7F0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DD7F0h case    4:*/		return 0x820DD7F4;
		  /* 820DD7F4h */ case    5:  		/* addi R3, R1, 160 */
		/* 820DD7F4h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DD7F4h case    5:*/		return 0x820DD7F8;
		  /* 820DD7F8h */ case    6:  		/* bl -242104 */
		/* 820DD7F8h case    6:*/		regs.LR = 0x820DD7FC; return 0x820A2640;
		/* 820DD7F8h case    6:*/		return 0x820DD7FC;
		  /* 820DD7FCh */ case    7:  		/* mr R3, R31 */
		/* 820DD7FCh case    7:*/		regs.R3 = regs.R31;
		/* 820DD7FCh case    7:*/		return 0x820DD800;
		  /* 820DD800h */ case    8:  		/* bl -13904 */
		/* 820DD800h case    8:*/		regs.LR = 0x820DD804; return 0x820DA1B0;
		/* 820DD800h case    8:*/		return 0x820DD804;
		  /* 820DD804h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820DD804h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD804h case    9:*/		return 0x820DD808;
		  /* 820DD808h */ case   10:  		/* bc 12, CR0_LT, 104 */
		/* 820DD808h case   10:*/		if ( regs.CR[0].lt ) { return 0x820DD870;  }
		/* 820DD808h case   10:*/		return 0x820DD80C;
		  /* 820DD80Ch */ case   11:  		/* mr R4, R28 */
		/* 820DD80Ch case   11:*/		regs.R4 = regs.R28;
		/* 820DD80Ch case   11:*/		return 0x820DD810;
		  /* 820DD810h */ case   12:  		/* addi R5, R1, 128 */
		/* 820DD810h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DD810h case   12:*/		return 0x820DD814;
		  /* 820DD814h */ case   13:  		/* mr R3, R31 */
		/* 820DD814h case   13:*/		regs.R3 = regs.R31;
		/* 820DD814h case   13:*/		return 0x820DD818;
	}
	return 0x820DD818;
} // Block from 820DD7E0h-820DD818h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DD818h
// Function '?EmitPackShortOp@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD818);
		  /* 820DD818h */ case    0:  		/* bl -14144 */
		/* 820DD818h case    0:*/		regs.LR = 0x820DD81C; return 0x820DA0D8;
		/* 820DD818h case    0:*/		return 0x820DD81C;
		  /* 820DD81Ch */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820DD81Ch case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD81Ch case    1:*/		return 0x820DD820;
		  /* 820DD820h */ case    2:  		/* bc 12, CR0_LT, 80 */
		/* 820DD820h case    2:*/		if ( regs.CR[0].lt ) { return 0x820DD870;  }
		/* 820DD820h case    2:*/		return 0x820DD824;
		  /* 820DD824h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 820DD824h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DD824h case    3:*/		return 0x820DD828;
		  /* 820DD828h */ case    4:  		/* mr R5, R29 */
		/* 820DD828h case    4:*/		regs.R5 = regs.R29;
		/* 820DD828h case    4:*/		return 0x820DD82C;
		  /* 820DD82Ch */ case    5:  		/* addi R4, R1, 160 */
		/* 820DD82Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820DD82Ch case    5:*/		return 0x820DD830;
		  /* 820DD830h */ case    6:  		/* mr R3, R31 */
		/* 820DD830h case    6:*/		regs.R3 = regs.R31;
		/* 820DD830h case    6:*/		return 0x820DD834;
		  /* 820DD834h */ case    7:  		/* lwz R11, <#[R11 + 468]> */
		/* 820DD834h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001D4) );
		/* 820DD834h case    7:*/		return 0x820DD838;
		  /* 820DD838h */ case    8:  		/* mtspr CTR, R11 */
		/* 820DD838h case    8:*/		regs.CTR = regs.R11;
		/* 820DD838h case    8:*/		return 0x820DD83C;
		  /* 820DD83Ch */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 820DD83Ch case    9:*/		if ( 1 ) { regs.LR = 0x820DD840; return (uint32)regs.CTR; }
		/* 820DD83Ch case    9:*/		return 0x820DD840;
		  /* 820DD840h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DD840h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD840h case   10:*/		return 0x820DD844;
		  /* 820DD844h */ case   11:  		/* bc 12, CR0_LT, 44 */
		/* 820DD844h case   11:*/		if ( regs.CR[0].lt ) { return 0x820DD870;  }
		/* 820DD844h case   11:*/		return 0x820DD848;
		  /* 820DD848h */ case   12:  		/* mr R4, R27 */
		/* 820DD848h case   12:*/		regs.R4 = regs.R27;
		/* 820DD848h case   12:*/		return 0x820DD84C;
		  /* 820DD84Ch */ case   13:  		/* mr R3, R31 */
		/* 820DD84Ch case   13:*/		regs.R3 = regs.R31;
		/* 820DD84Ch case   13:*/		return 0x820DD850;
	}
	return 0x820DD850;
} // Block from 820DD818h-820DD850h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DD850h
// Function '?EmitSplatByteOp@C30SWProgramCI@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD850);
		  /* 820DD850h */ case    0:  		/* bl -14200 */
		/* 820DD850h case    0:*/		regs.LR = 0x820DD854; return 0x820DA0D8;
		/* 820DD850h case    0:*/		return 0x820DD854;
		  /* 820DD854h */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820DD854h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD854h case    1:*/		return 0x820DD858;
		  /* 820DD858h */ case    2:  		/* bc 12, CR0_LT, 24 */
		/* 820DD858h case    2:*/		if ( regs.CR[0].lt ) { return 0x820DD870;  }
		/* 820DD858h case    2:*/		return 0x820DD85C;
		  /* 820DD85Ch */ case    3:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DD85Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DD85Ch case    3:*/		return 0x820DD860;
		  /* 820DD860h */ case    4:  		/* addi R30, R30, 1 */
		/* 820DD860h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DD860h case    4:*/		return 0x820DD864;
		  /* 820DD864h */ case    5:  		/* cmplw CR6, R30, R11 */
		/* 820DD864h case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DD864h case    5:*/		return 0x820DD868;
		  /* 820DD868h */ case    6:  		/* bc 12, CR6_LT, -172 */
		/* 820DD868h case    6:*/		if ( regs.CR[6].lt ) { return 0x820DD7BC;  }
		/* 820DD868h case    6:*/		return 0x820DD86C;
	}
	return 0x820DD86C;
} // Block from 820DD850h-820DD86Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DD86Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD86C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD86C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD86C);
		  /* 820DD86Ch */ case    0:  		/* li R3, 0 */
		/* 820DD86Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DD86Ch case    0:*/		return 0x820DD870;
	}
	return 0x820DD870;
} // Block from 820DD86Ch-820DD870h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DD870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD870);
		  /* 820DD870h */ case    0:  		/* addi R1, R1, 256 */
		/* 820DD870h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 820DD870h case    0:*/		return 0x820DD874;
		  /* 820DD874h */ case    1:  		/* b -312792 */
		/* 820DD874h case    1:*/		return 0x8209129C;
		/* 820DD874h case    1:*/		return 0x820DD878;
	}
	return 0x820DD878;
} // Block from 820DD870h-820DD878h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DD878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD878);
		  /* 820DD878h */ case    0:  		/* mfspr R12, LR */
		/* 820DD878h case    0:*/		regs.R12 = regs.LR;
		/* 820DD878h case    0:*/		return 0x820DD87C;
		  /* 820DD87Ch */ case    1:  		/* bl -312892 */
		/* 820DD87Ch case    1:*/		regs.LR = 0x820DD880; return 0x82091240;
		/* 820DD87Ch case    1:*/		return 0x820DD880;
		  /* 820DD880h */ case    2:  		/* stwu R1, <#[R1 - 384]> */
		/* 820DD880h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 820DD880h case    2:*/		return 0x820DD884;
		  /* 820DD884h */ case    3:  		/* mr R31, R3 */
		/* 820DD884h case    3:*/		regs.R31 = regs.R3;
		/* 820DD884h case    3:*/		return 0x820DD888;
	}
	return 0x820DD888;
} // Block from 820DD878h-820DD888h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DD888h
// Function '?EmitLoadOp@C30SWProgramCI@D3DXShader@@MAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD888);
		  /* 820DD888h */ case    0:  		/* mr R22, R4 */
		/* 820DD888h case    0:*/		regs.R22 = regs.R4;
		/* 820DD888h case    0:*/		return 0x820DD88C;
		  /* 820DD88Ch */ case    1:  		/* mr R24, R5 */
		/* 820DD88Ch case    1:*/		regs.R24 = regs.R5;
		/* 820DD88Ch case    1:*/		return 0x820DD890;
		  /* 820DD890h */ case    2:  		/* bl -14048 */
		/* 820DD890h case    2:*/		regs.LR = 0x820DD894; return 0x820DA1B0;
		/* 820DD890h case    2:*/		return 0x820DD894;
		  /* 820DD894h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820DD894h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD894h case    3:*/		return 0x820DD898;
		  /* 820DD898h */ case    4:  		/* bc 12, CR0_LT, 1224 */
		/* 820DD898h case    4:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DD898h case    4:*/		return 0x820DD89C;
		  /* 820DD89Ch */ case    5:  		/* lis R11, -32254 */
		/* 820DD89Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD89Ch case    5:*/		return 0x820DD8A0;
		  /* 820DD8A0h */ case    6:  		/* mr R3, R31 */
		/* 820DD8A0h case    6:*/		regs.R3 = regs.R31;
		/* 820DD8A0h case    6:*/		return 0x820DD8A4;
		  /* 820DD8A4h */ case    7:  		/* addi R4, R11, -30508 */
		/* 820DD8A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88D4);
		/* 820DD8A4h case    7:*/		return 0x820DD8A8;
		  /* 820DD8A8h */ case    8:  		/* bl -14288 */
		/* 820DD8A8h case    8:*/		regs.LR = 0x820DD8AC; return 0x820DA0D8;
		/* 820DD8A8h case    8:*/		return 0x820DD8AC;
		  /* 820DD8ACh */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820DD8ACh case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD8ACh case    9:*/		return 0x820DD8B0;
		  /* 820DD8B0h */ case   10:  		/* bc 12, CR0_LT, 1200 */
		/* 820DD8B0h case   10:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DD8B0h case   10:*/		return 0x820DD8B4;
		  /* 820DD8B4h */ case   11:  		/* lwz R11, <#[R31]> */
		/* 820DD8B4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DD8B4h case   11:*/		return 0x820DD8B8;
	}
	return 0x820DD8B8;
} // Block from 820DD888h-820DD8B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DD8B8h
// Function '?EmitStoreOp@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD8B8);
		  /* 820DD8B8h */ case    0:  		/* lis R10, -32254 */
		/* 820DD8B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD8B8h case    0:*/		return 0x820DD8BC;
		  /* 820DD8BCh */ case    1:  		/* li R8, 3 */
		/* 820DD8BCh case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820DD8BCh case    1:*/		return 0x820DD8C0;
		  /* 820DD8C0h */ case    2:  		/* addi R4, R10, -30764 */
		/* 820DD8C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF87D4);
		/* 820DD8C0h case    2:*/		return 0x820DD8C4;
		  /* 820DD8C4h */ case    3:  		/* li R7, 3 */
		/* 820DD8C4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 820DD8C4h case    3:*/		return 0x820DD8C8;
		  /* 820DD8C8h */ case    4:  		/* li R6, 3 */
		/* 820DD8C8h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 820DD8C8h case    4:*/		return 0x820DD8CC;
		  /* 820DD8CCh */ case    5:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DD8CCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DD8CCh case    5:*/		return 0x820DD8D0;
		  /* 820DD8D0h */ case    6:  		/* li R5, 3 */
		/* 820DD8D0h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820DD8D0h case    6:*/		return 0x820DD8D4;
		  /* 820DD8D4h */ case    7:  		/* mr R3, R31 */
		/* 820DD8D4h case    7:*/		regs.R3 = regs.R31;
		/* 820DD8D4h case    7:*/		return 0x820DD8D8;
		  /* 820DD8D8h */ case    8:  		/* mtspr CTR, R11 */
		/* 820DD8D8h case    8:*/		regs.CTR = regs.R11;
		/* 820DD8D8h case    8:*/		return 0x820DD8DC;
		  /* 820DD8DCh */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 820DD8DCh case    9:*/		if ( 1 ) { regs.LR = 0x820DD8E0; return (uint32)regs.CTR; }
		/* 820DD8DCh case    9:*/		return 0x820DD8E0;
		  /* 820DD8E0h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DD8E0h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD8E0h case   10:*/		return 0x820DD8E4;
		  /* 820DD8E4h */ case   11:  		/* bc 12, CR0_LT, 1148 */
		/* 820DD8E4h case   11:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DD8E4h case   11:*/		return 0x820DD8E8;
	}
	return 0x820DD8E8;
} // Block from 820DD8B8h-820DD8E8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DD8E8h
// Function '?EmitLoadFloat4SW@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD8E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD8E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD8E8);
		  /* 820DD8E8h */ case    0:  		/* lis R11, -32254 */
		/* 820DD8E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD8E8h case    0:*/		return 0x820DD8EC;
		  /* 820DD8ECh */ case    1:  		/* mr R3, R31 */
		/* 820DD8ECh case    1:*/		regs.R3 = regs.R31;
		/* 820DD8ECh case    1:*/		return 0x820DD8F0;
		  /* 820DD8F0h */ case    2:  		/* addi R4, R11, -30768 */
		/* 820DD8F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF87D0);
		/* 820DD8F0h case    2:*/		return 0x820DD8F4;
		  /* 820DD8F4h */ case    3:  		/* bl -14364 */
		/* 820DD8F4h case    3:*/		regs.LR = 0x820DD8F8; return 0x820DA0D8;
		/* 820DD8F4h case    3:*/		return 0x820DD8F8;
		  /* 820DD8F8h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820DD8F8h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD8F8h case    4:*/		return 0x820DD8FC;
		  /* 820DD8FCh */ case    5:  		/* bc 12, CR0_LT, 1124 */
		/* 820DD8FCh case    5:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DD8FCh case    5:*/		return 0x820DD900;
		  /* 820DD900h */ case    6:  		/* lis R11, -32254 */
		/* 820DD900h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DD900h case    6:*/		return 0x820DD904;
		  /* 820DD904h */ case    7:  		/* lis R10, -32254 */
		/* 820DD904h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD904h case    7:*/		return 0x820DD908;
		  /* 820DD908h */ case    8:  		/* addi R23, R11, -29172 */
		/* 820DD908h case    8:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0xFFFF8E0C);
		/* 820DD908h case    8:*/		return 0x820DD90C;
		  /* 820DD90Ch */ case    9:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DD90Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DD90Ch case    9:*/		return 0x820DD910;
		  /* 820DD910h */ case   10:  		/* li R30, 0 */
		/* 820DD910h case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DD910h case   10:*/		return 0x820DD914;
		  /* 820DD914h */ case   11:  		/* addi R25, R10, -30704 */
		/* 820DD914h case   11:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0xFFFF8810);
		/* 820DD914h case   11:*/		return 0x820DD918;
		  /* 820DD918h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 820DD918h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DD918h case   12:*/		return 0x820DD91C;
		  /* 820DD91Ch */ case   13:  		/* bc 12, CR6_EQ, 108 */
		/* 820DD91Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x820DD988;  }
		/* 820DD91Ch case   13:*/		return 0x820DD920;
		  /* 820DD920h */ case   14:  		/* mr R3, R31 */
		/* 820DD920h case   14:*/		regs.R3 = regs.R31;
		/* 820DD920h case   14:*/		return 0x820DD924;
		  /* 820DD924h */ case   15:  		/* bl -14196 */
		/* 820DD924h case   15:*/		regs.LR = 0x820DD928; return 0x820DA1B0;
		/* 820DD924h case   15:*/		return 0x820DD928;
		  /* 820DD928h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820DD928h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD928h case   16:*/		return 0x820DD92C;
		  /* 820DD92Ch */ case   17:  		/* bc 12, CR0_LT, 1076 */
		/* 820DD92Ch case   17:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DD92Ch case   17:*/		return 0x820DD930;
		  /* 820DD930h */ case   18:  		/* mr R7, R30 */
		/* 820DD930h case   18:*/		regs.R7 = regs.R30;
		/* 820DD930h case   18:*/		return 0x820DD934;
		  /* 820DD934h */ case   19:  		/* mr R6, R30 */
		/* 820DD934h case   19:*/		regs.R6 = regs.R30;
		/* 820DD934h case   19:*/		return 0x820DD938;
		  /* 820DD938h */ case   20:  		/* mr R5, R24 */
		/* 820DD938h case   20:*/		regs.R5 = regs.R24;
		/* 820DD938h case   20:*/		return 0x820DD93C;
		  /* 820DD93Ch */ case   21:  		/* li R4, 32 */
		/* 820DD93Ch case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DD93Ch case   21:*/		return 0x820DD940;
		  /* 820DD940h */ case   22:  		/* addi R3, R1, 192 */
		/* 820DD940h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DD940h case   22:*/		return 0x820DD944;
		  /* 820DD944h */ case   23:  		/* bl -242436 */
		/* 820DD944h case   23:*/		regs.LR = 0x820DD948; return 0x820A2640;
		/* 820DD944h case   23:*/		return 0x820DD948;
		  /* 820DD948h */ case   24:  		/* mr R5, R25 */
		/* 820DD948h case   24:*/		regs.R5 = regs.R25;
		/* 820DD948h case   24:*/		return 0x820DD94C;
		  /* 820DD94Ch */ case   25:  		/* mr R6, R30 */
		/* 820DD94Ch case   25:*/		regs.R6 = regs.R30;
		/* 820DD94Ch case   25:*/		return 0x820DD950;
		  /* 820DD950h */ case   26:  		/* li R4, 32 */
		/* 820DD950h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DD950h case   26:*/		return 0x820DD954;
		  /* 820DD954h */ case   27:  		/* addi R3, R1, 128 */
		/* 820DD954h case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DD954h case   27:*/		return 0x820DD958;
		  /* 820DD958h */ case   28:  		/* bl -242456 */
		/* 820DD958h case   28:*/		regs.LR = 0x820DD95C; return 0x820A2640;
		/* 820DD958h case   28:*/		return 0x820DD95C;
		  /* 820DD95Ch */ case   29:  		/* mr R4, R23 */
		/* 820DD95Ch case   29:*/		regs.R4 = regs.R23;
		/* 820DD95Ch case   29:*/		return 0x820DD960;
		  /* 820DD960h */ case   30:  		/* addi R6, R1, 192 */
		/* 820DD960h case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820DD960h case   30:*/		return 0x820DD964;
		  /* 820DD964h */ case   31:  		/* addi R5, R1, 128 */
		/* 820DD964h case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DD964h case   31:*/		return 0x820DD968;
		  /* 820DD968h */ case   32:  		/* mr R3, R31 */
		/* 820DD968h case   32:*/		regs.R3 = regs.R31;
		/* 820DD968h case   32:*/		return 0x820DD96C;
		  /* 820DD96Ch */ case   33:  		/* bl -14484 */
		/* 820DD96Ch case   33:*/		regs.LR = 0x820DD970; return 0x820DA0D8;
		/* 820DD96Ch case   33:*/		return 0x820DD970;
		  /* 820DD970h */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 820DD970h case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD970h case   34:*/		return 0x820DD974;
		  /* 820DD974h */ case   35:  		/* bc 12, CR0_LT, 1004 */
		/* 820DD974h case   35:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DD974h case   35:*/		return 0x820DD978;
		  /* 820DD978h */ case   36:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DD978h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DD978h case   36:*/		return 0x820DD97C;
		  /* 820DD97Ch */ case   37:  		/* addi R30, R30, 1 */
		/* 820DD97Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DD97Ch case   37:*/		return 0x820DD980;
		  /* 820DD980h */ case   38:  		/* cmplw CR6, R30, R11 */
		/* 820DD980h case   38:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DD980h case   38:*/		return 0x820DD984;
		  /* 820DD984h */ case   39:  		/* bc 12, CR6_LT, -100 */
		/* 820DD984h case   39:*/		if ( regs.CR[6].lt ) { return 0x820DD920;  }
		/* 820DD984h case   39:*/		return 0x820DD988;
	}
	return 0x820DD988;
} // Block from 820DD8E8h-820DD988h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820DD988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD988);
		  /* 820DD988h */ case    0:  		/* lis R8, -32254 */
		/* 820DD988h case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820DD988h case    0:*/		return 0x820DD98C;
		  /* 820DD98Ch */ case    1:  		/* lis R9, -32254 */
		/* 820DD98Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DD98Ch case    1:*/		return 0x820DD990;
		  /* 820DD990h */ case    2:  		/* lis R10, -32254 */
		/* 820DD990h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DD990h case    2:*/		return 0x820DD994;
		  /* 820DD994h */ case    3:  		/* li R30, 0 */
		/* 820DD994h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DD994h case    3:*/		return 0x820DD998;
		  /* 820DD998h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820DD998h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DD998h case    4:*/		return 0x820DD99C;
		  /* 820DD99Ch */ case    5:  		/* addi R29, R8, -29204 */
		/* 820DD99Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R8,0xFFFF8DEC);
		/* 820DD99Ch case    5:*/		return 0x820DD9A0;
		  /* 820DD9A0h */ case    6:  		/* addi R28, R9, -30516 */
		/* 820DD9A0h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R9,0xFFFF88CC);
		/* 820DD9A0h case    6:*/		return 0x820DD9A4;
		  /* 820DD9A4h */ case    7:  		/* addi R26, R10, -30488 */
		/* 820DD9A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFF88E8);
		/* 820DD9A4h case    7:*/		return 0x820DD9A8;
		  /* 820DD9A8h */ case    8:  		/* bc 12, CR6_EQ, 136 */
		/* 820DD9A8h case    8:*/		if ( regs.CR[6].eq ) { return 0x820DDA30;  }
		/* 820DD9A8h case    8:*/		return 0x820DD9AC;
		  /* 820DD9ACh */ case    9:  		/* mr R3, R31 */
		/* 820DD9ACh case    9:*/		regs.R3 = regs.R31;
		/* 820DD9ACh case    9:*/		return 0x820DD9B0;
		  /* 820DD9B0h */ case   10:  		/* bl -14336 */
		/* 820DD9B0h case   10:*/		regs.LR = 0x820DD9B4; return 0x820DA1B0;
		/* 820DD9B0h case   10:*/		return 0x820DD9B4;
		  /* 820DD9B4h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820DD9B4h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DD9B4h case   11:*/		return 0x820DD9B8;
	}
	return 0x820DD9B8;
} // Block from 820DD988h-820DD9B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DD9B8h
// Function '?EmitStoreFloat4SW@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DD9B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DD9B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DD9B8);
		  /* 820DD9B8h */ case    0:  		/* bc 12, CR0_LT, 936 */
		/* 820DD9B8h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DD9B8h case    0:*/		return 0x820DD9BC;
		  /* 820DD9BCh */ case    1:  		/* mr R7, R30 */
		/* 820DD9BCh case    1:*/		regs.R7 = regs.R30;
		/* 820DD9BCh case    1:*/		return 0x820DD9C0;
		  /* 820DD9C0h */ case    2:  		/* mr R6, R30 */
		/* 820DD9C0h case    2:*/		regs.R6 = regs.R30;
		/* 820DD9C0h case    2:*/		return 0x820DD9C4;
		  /* 820DD9C4h */ case    3:  		/* mr R5, R24 */
		/* 820DD9C4h case    3:*/		regs.R5 = regs.R24;
		/* 820DD9C4h case    3:*/		return 0x820DD9C8;
		  /* 820DD9C8h */ case    4:  		/* li R4, 32 */
		/* 820DD9C8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DD9C8h case    4:*/		return 0x820DD9CC;
		  /* 820DD9CCh */ case    5:  		/* addi R3, R1, 192 */
		/* 820DD9CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DD9CCh case    5:*/		return 0x820DD9D0;
		  /* 820DD9D0h */ case    6:  		/* bl -242576 */
		/* 820DD9D0h case    6:*/		regs.LR = 0x820DD9D4; return 0x820A2640;
		/* 820DD9D0h case    6:*/		return 0x820DD9D4;
		  /* 820DD9D4h */ case    7:  		/* mr R5, R25 */
		/* 820DD9D4h case    7:*/		regs.R5 = regs.R25;
		/* 820DD9D4h case    7:*/		return 0x820DD9D8;
		  /* 820DD9D8h */ case    8:  		/* mr R6, R30 */
		/* 820DD9D8h case    8:*/		regs.R6 = regs.R30;
		/* 820DD9D8h case    8:*/		return 0x820DD9DC;
		  /* 820DD9DCh */ case    9:  		/* li R4, 32 */
		/* 820DD9DCh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DD9DCh case    9:*/		return 0x820DD9E0;
		  /* 820DD9E0h */ case   10:  		/* addi R3, R1, 128 */
		/* 820DD9E0h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DD9E0h case   10:*/		return 0x820DD9E4;
		  /* 820DD9E4h */ case   11:  		/* bl -242596 */
		/* 820DD9E4h case   11:*/		regs.LR = 0x820DD9E8; return 0x820A2640;
		/* 820DD9E4h case   11:*/		return 0x820DD9E8;
		  /* 820DD9E8h */ case   12:  		/* mr R5, R26 */
		/* 820DD9E8h case   12:*/		regs.R5 = regs.R26;
		/* 820DD9E8h case   12:*/		return 0x820DD9EC;
		  /* 820DD9ECh */ case   13:  		/* mr R6, R30 */
		/* 820DD9ECh case   13:*/		regs.R6 = regs.R30;
		/* 820DD9ECh case   13:*/		return 0x820DD9F0;
		  /* 820DD9F0h */ case   14:  		/* li R4, 32 */
		/* 820DD9F0h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DD9F0h case   14:*/		return 0x820DD9F4;
		  /* 820DD9F4h */ case   15:  		/* addi R3, R1, 160 */
		/* 820DD9F4h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DD9F4h case   15:*/		return 0x820DD9F8;
		  /* 820DD9F8h */ case   16:  		/* bl -242616 */
		/* 820DD9F8h case   16:*/		regs.LR = 0x820DD9FC; return 0x820A2640;
		/* 820DD9F8h case   16:*/		return 0x820DD9FC;
		  /* 820DD9FCh */ case   17:  		/* mr R8, R28 */
		/* 820DD9FCh case   17:*/		regs.R8 = regs.R28;
		/* 820DD9FCh case   17:*/		return 0x820DDA00;
		  /* 820DDA00h */ case   18:  		/* mr R4, R29 */
		/* 820DDA00h case   18:*/		regs.R4 = regs.R29;
		/* 820DDA00h case   18:*/		return 0x820DDA04;
		  /* 820DDA04h */ case   19:  		/* addi R7, R1, 128 */
		/* 820DDA04h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DDA04h case   19:*/		return 0x820DDA08;
		  /* 820DDA08h */ case   20:  		/* addi R6, R1, 192 */
		/* 820DDA08h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820DDA08h case   20:*/		return 0x820DDA0C;
		  /* 820DDA0Ch */ case   21:  		/* addi R5, R1, 160 */
		/* 820DDA0Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DDA0Ch case   21:*/		return 0x820DDA10;
		  /* 820DDA10h */ case   22:  		/* mr R3, R31 */
		/* 820DDA10h case   22:*/		regs.R3 = regs.R31;
		/* 820DDA10h case   22:*/		return 0x820DDA14;
		  /* 820DDA14h */ case   23:  		/* bl -14652 */
		/* 820DDA14h case   23:*/		regs.LR = 0x820DDA18; return 0x820DA0D8;
		/* 820DDA14h case   23:*/		return 0x820DDA18;
		  /* 820DDA18h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820DDA18h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDA18h case   24:*/		return 0x820DDA1C;
		  /* 820DDA1Ch */ case   25:  		/* bc 12, CR0_LT, 836 */
		/* 820DDA1Ch case   25:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDA1Ch case   25:*/		return 0x820DDA20;
		  /* 820DDA20h */ case   26:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DDA20h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DDA20h case   26:*/		return 0x820DDA24;
		  /* 820DDA24h */ case   27:  		/* addi R30, R30, 1 */
		/* 820DDA24h case   27:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DDA24h case   27:*/		return 0x820DDA28;
		  /* 820DDA28h */ case   28:  		/* cmplw CR6, R30, R11 */
		/* 820DDA28h case   28:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DDA28h case   28:*/		return 0x820DDA2C;
		  /* 820DDA2Ch */ case   29:  		/* bc 12, CR6_LT, -128 */
		/* 820DDA2Ch case   29:*/		if ( regs.CR[6].lt ) { return 0x820DD9AC;  }
		/* 820DDA2Ch case   29:*/		return 0x820DDA30;
	}
	return 0x820DDA30;
} // Block from 820DD9B8h-820DDA30h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820DDA30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDA30);
		  /* 820DDA30h */ case    0:  		/* lis R10, -32254 */
		/* 820DDA30h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DDA30h case    0:*/		return 0x820DDA34;
		  /* 820DDA34h */ case    1:  		/* li R30, 0 */
		/* 820DDA34h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DDA34h case    1:*/		return 0x820DDA38;
		  /* 820DDA38h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820DDA38h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DDA38h case    2:*/		return 0x820DDA3C;
		  /* 820DDA3Ch */ case    3:  		/* addi R27, R10, -29236 */
		/* 820DDA3Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFF8DCC);
		/* 820DDA3Ch case    3:*/		return 0x820DDA40;
		  /* 820DDA40h */ case    4:  		/* bc 12, CR6_EQ, 112 */
		/* 820DDA40h case    4:*/		if ( regs.CR[6].eq ) { return 0x820DDAB0;  }
		/* 820DDA40h case    4:*/		return 0x820DDA44;
		  /* 820DDA44h */ case    5:  		/* mr R3, R31 */
		/* 820DDA44h case    5:*/		regs.R3 = regs.R31;
		/* 820DDA44h case    5:*/		return 0x820DDA48;
		  /* 820DDA48h */ case    6:  		/* bl -14488 */
		/* 820DDA48h case    6:*/		regs.LR = 0x820DDA4C; return 0x820DA1B0;
		/* 820DDA48h case    6:*/		return 0x820DDA4C;
		  /* 820DDA4Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DDA4Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDA4Ch case    7:*/		return 0x820DDA50;
		  /* 820DDA50h */ case    8:  		/* bc 12, CR0_LT, 784 */
		/* 820DDA50h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDA50h case    8:*/		return 0x820DDA54;
		  /* 820DDA54h */ case    9:  		/* mr R5, R25 */
		/* 820DDA54h case    9:*/		regs.R5 = regs.R25;
		/* 820DDA54h case    9:*/		return 0x820DDA58;
		  /* 820DDA58h */ case   10:  		/* mr R6, R30 */
		/* 820DDA58h case   10:*/		regs.R6 = regs.R30;
		/* 820DDA58h case   10:*/		return 0x820DDA5C;
		  /* 820DDA5Ch */ case   11:  		/* li R4, 32 */
		/* 820DDA5Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDA5Ch case   11:*/		return 0x820DDA60;
		  /* 820DDA60h */ case   12:  		/* addi R3, R1, 128 */
		/* 820DDA60h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DDA60h case   12:*/		return 0x820DDA64;
		  /* 820DDA64h */ case   13:  		/* bl -242724 */
		/* 820DDA64h case   13:*/		regs.LR = 0x820DDA68; return 0x820A2640;
		/* 820DDA64h case   13:*/		return 0x820DDA68;
		  /* 820DDA68h */ case   14:  		/* mr R5, R26 */
		/* 820DDA68h case   14:*/		regs.R5 = regs.R26;
		/* 820DDA68h case   14:*/		return 0x820DDA6C;
		  /* 820DDA6Ch */ case   15:  		/* mr R6, R30 */
		/* 820DDA6Ch case   15:*/		regs.R6 = regs.R30;
		/* 820DDA6Ch case   15:*/		return 0x820DDA70;
		  /* 820DDA70h */ case   16:  		/* li R4, 32 */
		/* 820DDA70h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDA70h case   16:*/		return 0x820DDA74;
		  /* 820DDA74h */ case   17:  		/* addi R3, R1, 160 */
		/* 820DDA74h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DDA74h case   17:*/		return 0x820DDA78;
		  /* 820DDA78h */ case   18:  		/* bl -242744 */
		/* 820DDA78h case   18:*/		regs.LR = 0x820DDA7C; return 0x820A2640;
		/* 820DDA78h case   18:*/		return 0x820DDA7C;
		  /* 820DDA7Ch */ case   19:  		/* mr R4, R27 */
		/* 820DDA7Ch case   19:*/		regs.R4 = regs.R27;
		/* 820DDA7Ch case   19:*/		return 0x820DDA80;
		  /* 820DDA80h */ case   20:  		/* addi R8, R1, 128 */
		/* 820DDA80h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820DDA80h case   20:*/		return 0x820DDA84;
		  /* 820DDA84h */ case   21:  		/* addi R7, R1, 160 */
		/* 820DDA84h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820DDA84h case   21:*/		return 0x820DDA88;
		  /* 820DDA88h */ case   22:  		/* addi R6, R1, 128 */
		/* 820DDA88h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DDA88h case   22:*/		return 0x820DDA8C;
		  /* 820DDA8Ch */ case   23:  		/* addi R5, R1, 128 */
		/* 820DDA8Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DDA8Ch case   23:*/		return 0x820DDA90;
		  /* 820DDA90h */ case   24:  		/* mr R3, R31 */
		/* 820DDA90h case   24:*/		regs.R3 = regs.R31;
		/* 820DDA90h case   24:*/		return 0x820DDA94;
		  /* 820DDA94h */ case   25:  		/* bl -14780 */
		/* 820DDA94h case   25:*/		regs.LR = 0x820DDA98; return 0x820DA0D8;
		/* 820DDA94h case   25:*/		return 0x820DDA98;
		  /* 820DDA98h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820DDA98h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDA98h case   26:*/		return 0x820DDA9C;
		  /* 820DDA9Ch */ case   27:  		/* bc 12, CR0_LT, 708 */
		/* 820DDA9Ch case   27:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDA9Ch case   27:*/		return 0x820DDAA0;
		  /* 820DDAA0h */ case   28:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DDAA0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DDAA0h case   28:*/		return 0x820DDAA4;
		  /* 820DDAA4h */ case   29:  		/* addi R30, R30, 1 */
		/* 820DDAA4h case   29:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DDAA4h case   29:*/		return 0x820DDAA8;
		  /* 820DDAA8h */ case   30:  		/* cmplw CR6, R30, R11 */
		/* 820DDAA8h case   30:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DDAA8h case   30:*/		return 0x820DDAAC;
		  /* 820DDAACh */ case   31:  		/* bc 12, CR6_LT, -104 */
		/* 820DDAACh case   31:*/		if ( regs.CR[6].lt ) { return 0x820DDA44;  }
		/* 820DDAACh case   31:*/		return 0x820DDAB0;
	}
	return 0x820DDAB0;
} // Block from 820DDA30h-820DDAB0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820DDAB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDAB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDAB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDAB0);
		  /* 820DDAB0h */ case    0:  		/* li R30, 0 */
		/* 820DDAB0h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DDAB0h case    0:*/		return 0x820DDAB4;
		  /* 820DDAB4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DDAB4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DDAB4h case    1:*/		return 0x820DDAB8;
		  /* 820DDAB8h */ case    2:  		/* bc 12, CR6_EQ, 136 */
		/* 820DDAB8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DDB40;  }
		/* 820DDAB8h case    2:*/		return 0x820DDABC;
		  /* 820DDABCh */ case    3:  		/* mr R3, R31 */
		/* 820DDABCh case    3:*/		regs.R3 = regs.R31;
		/* 820DDABCh case    3:*/		return 0x820DDAC0;
		  /* 820DDAC0h */ case    4:  		/* bl -14608 */
		/* 820DDAC0h case    4:*/		regs.LR = 0x820DDAC4; return 0x820DA1B0;
		/* 820DDAC0h case    4:*/		return 0x820DDAC4;
		  /* 820DDAC4h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DDAC4h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDAC4h case    5:*/		return 0x820DDAC8;
		  /* 820DDAC8h */ case    6:  		/* bc 12, CR0_LT, 664 */
		/* 820DDAC8h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDAC8h case    6:*/		return 0x820DDACC;
		  /* 820DDACCh */ case    7:  		/* mr R7, R30 */
		/* 820DDACCh case    7:*/		regs.R7 = regs.R30;
		/* 820DDACCh case    7:*/		return 0x820DDAD0;
		  /* 820DDAD0h */ case    8:  		/* mr R6, R30 */
		/* 820DDAD0h case    8:*/		regs.R6 = regs.R30;
		/* 820DDAD0h case    8:*/		return 0x820DDAD4;
		  /* 820DDAD4h */ case    9:  		/* mr R5, R24 */
		/* 820DDAD4h case    9:*/		regs.R5 = regs.R24;
		/* 820DDAD4h case    9:*/		return 0x820DDAD8;
		  /* 820DDAD8h */ case   10:  		/* li R4, 32 */
		/* 820DDAD8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDAD8h case   10:*/		return 0x820DDADC;
		  /* 820DDADCh */ case   11:  		/* addi R3, R1, 192 */
		/* 820DDADCh case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DDADCh case   11:*/		return 0x820DDAE0;
	}
	return 0x820DDAE0;
} // Block from 820DDAB0h-820DDAE0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DDAE0h
// Function '?EmitStoreQWordOp@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDAE0);
		  /* 820DDAE0h */ case    0:  		/* bl -242848 */
		/* 820DDAE0h case    0:*/		regs.LR = 0x820DDAE4; return 0x820A2640;
		/* 820DDAE0h case    0:*/		return 0x820DDAE4;
		  /* 820DDAE4h */ case    1:  		/* mr R5, R25 */
		/* 820DDAE4h case    1:*/		regs.R5 = regs.R25;
		/* 820DDAE4h case    1:*/		return 0x820DDAE8;
		  /* 820DDAE8h */ case    2:  		/* mr R6, R30 */
		/* 820DDAE8h case    2:*/		regs.R6 = regs.R30;
		/* 820DDAE8h case    2:*/		return 0x820DDAEC;
		  /* 820DDAECh */ case    3:  		/* li R4, 32 */
		/* 820DDAECh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDAECh case    3:*/		return 0x820DDAF0;
		  /* 820DDAF0h */ case    4:  		/* addi R3, R1, 128 */
		/* 820DDAF0h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DDAF0h case    4:*/		return 0x820DDAF4;
		  /* 820DDAF4h */ case    5:  		/* bl -242868 */
		/* 820DDAF4h case    5:*/		regs.LR = 0x820DDAF8; return 0x820A2640;
		/* 820DDAF4h case    5:*/		return 0x820DDAF8;
		  /* 820DDAF8h */ case    6:  		/* mr R5, R26 */
		/* 820DDAF8h case    6:*/		regs.R5 = regs.R26;
		/* 820DDAF8h case    6:*/		return 0x820DDAFC;
		  /* 820DDAFCh */ case    7:  		/* mr R6, R30 */
		/* 820DDAFCh case    7:*/		regs.R6 = regs.R30;
		/* 820DDAFCh case    7:*/		return 0x820DDB00;
		  /* 820DDB00h */ case    8:  		/* li R4, 32 */
		/* 820DDB00h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDB00h case    8:*/		return 0x820DDB04;
		  /* 820DDB04h */ case    9:  		/* addi R3, R1, 160 */
		/* 820DDB04h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DDB04h case    9:*/		return 0x820DDB08;
		  /* 820DDB08h */ case   10:  		/* bl -242888 */
		/* 820DDB08h case   10:*/		regs.LR = 0x820DDB0C; return 0x820A2640;
		/* 820DDB08h case   10:*/		return 0x820DDB0C;
		  /* 820DDB0Ch */ case   11:  		/* mr R8, R28 */
		/* 820DDB0Ch case   11:*/		regs.R8 = regs.R28;
		/* 820DDB0Ch case   11:*/		return 0x820DDB10;
		  /* 820DDB10h */ case   12:  		/* mr R4, R29 */
		/* 820DDB10h case   12:*/		regs.R4 = regs.R29;
		/* 820DDB10h case   12:*/		return 0x820DDB14;
		  /* 820DDB14h */ case   13:  		/* addi R7, R1, 128 */
		/* 820DDB14h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DDB14h case   13:*/		return 0x820DDB18;
		  /* 820DDB18h */ case   14:  		/* addi R6, R1, 192 */
		/* 820DDB18h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820DDB18h case   14:*/		return 0x820DDB1C;
		  /* 820DDB1Ch */ case   15:  		/* addi R5, R1, 160 */
		/* 820DDB1Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DDB1Ch case   15:*/		return 0x820DDB20;
		  /* 820DDB20h */ case   16:  		/* mr R3, R31 */
		/* 820DDB20h case   16:*/		regs.R3 = regs.R31;
		/* 820DDB20h case   16:*/		return 0x820DDB24;
		  /* 820DDB24h */ case   17:  		/* bl -14924 */
		/* 820DDB24h case   17:*/		regs.LR = 0x820DDB28; return 0x820DA0D8;
		/* 820DDB24h case   17:*/		return 0x820DDB28;
		  /* 820DDB28h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 820DDB28h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDB28h case   18:*/		return 0x820DDB2C;
		  /* 820DDB2Ch */ case   19:  		/* bc 12, CR0_LT, 564 */
		/* 820DDB2Ch case   19:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDB2Ch case   19:*/		return 0x820DDB30;
		  /* 820DDB30h */ case   20:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DDB30h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DDB30h case   20:*/		return 0x820DDB34;
		  /* 820DDB34h */ case   21:  		/* addi R30, R30, 1 */
		/* 820DDB34h case   21:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DDB34h case   21:*/		return 0x820DDB38;
		  /* 820DDB38h */ case   22:  		/* cmplw CR6, R30, R11 */
		/* 820DDB38h case   22:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DDB38h case   22:*/		return 0x820DDB3C;
		  /* 820DDB3Ch */ case   23:  		/* bc 12, CR6_LT, -128 */
		/* 820DDB3Ch case   23:*/		if ( regs.CR[6].lt ) { return 0x820DDABC;  }
		/* 820DDB3Ch case   23:*/		return 0x820DDB40;
	}
	return 0x820DDB40;
} // Block from 820DDAE0h-820DDB40h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820DDB40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDB40);
		  /* 820DDB40h */ case    0:  		/* li R30, 0 */
		/* 820DDB40h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DDB40h case    0:*/		return 0x820DDB44;
		  /* 820DDB44h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DDB44h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DDB44h case    1:*/		return 0x820DDB48;
	}
	return 0x820DDB48;
} // Block from 820DDB40h-820DDB48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DDB48h
// Function '?EmitRotateRightOp@C30SWProgramCI@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDB48);
		  /* 820DDB48h */ case    0:  		/* bc 12, CR6_EQ, 112 */
		/* 820DDB48h case    0:*/		if ( regs.CR[6].eq ) { return 0x820DDBB8;  }
		/* 820DDB48h case    0:*/		return 0x820DDB4C;
		  /* 820DDB4Ch */ case    1:  		/* mr R3, R31 */
		/* 820DDB4Ch case    1:*/		regs.R3 = regs.R31;
		/* 820DDB4Ch case    1:*/		return 0x820DDB50;
		  /* 820DDB50h */ case    2:  		/* bl -14752 */
		/* 820DDB50h case    2:*/		regs.LR = 0x820DDB54; return 0x820DA1B0;
		/* 820DDB50h case    2:*/		return 0x820DDB54;
		  /* 820DDB54h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820DDB54h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDB54h case    3:*/		return 0x820DDB58;
		  /* 820DDB58h */ case    4:  		/* bc 12, CR0_LT, 520 */
		/* 820DDB58h case    4:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDB58h case    4:*/		return 0x820DDB5C;
		  /* 820DDB5Ch */ case    5:  		/* mr R5, R25 */
		/* 820DDB5Ch case    5:*/		regs.R5 = regs.R25;
		/* 820DDB5Ch case    5:*/		return 0x820DDB60;
		  /* 820DDB60h */ case    6:  		/* mr R6, R30 */
		/* 820DDB60h case    6:*/		regs.R6 = regs.R30;
		/* 820DDB60h case    6:*/		return 0x820DDB64;
		  /* 820DDB64h */ case    7:  		/* li R4, 32 */
		/* 820DDB64h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDB64h case    7:*/		return 0x820DDB68;
		  /* 820DDB68h */ case    8:  		/* addi R3, R1, 128 */
		/* 820DDB68h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DDB68h case    8:*/		return 0x820DDB6C;
		  /* 820DDB6Ch */ case    9:  		/* bl -242988 */
		/* 820DDB6Ch case    9:*/		regs.LR = 0x820DDB70; return 0x820A2640;
		/* 820DDB6Ch case    9:*/		return 0x820DDB70;
		  /* 820DDB70h */ case   10:  		/* mr R5, R26 */
		/* 820DDB70h case   10:*/		regs.R5 = regs.R26;
		/* 820DDB70h case   10:*/		return 0x820DDB74;
		  /* 820DDB74h */ case   11:  		/* mr R6, R30 */
		/* 820DDB74h case   11:*/		regs.R6 = regs.R30;
		/* 820DDB74h case   11:*/		return 0x820DDB78;
		  /* 820DDB78h */ case   12:  		/* li R4, 32 */
		/* 820DDB78h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDB78h case   12:*/		return 0x820DDB7C;
		  /* 820DDB7Ch */ case   13:  		/* addi R3, R1, 160 */
		/* 820DDB7Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DDB7Ch case   13:*/		return 0x820DDB80;
		  /* 820DDB80h */ case   14:  		/* bl -243008 */
		/* 820DDB80h case   14:*/		regs.LR = 0x820DDB84; return 0x820A2640;
		/* 820DDB80h case   14:*/		return 0x820DDB84;
		  /* 820DDB84h */ case   15:  		/* mr R4, R27 */
		/* 820DDB84h case   15:*/		regs.R4 = regs.R27;
		/* 820DDB84h case   15:*/		return 0x820DDB88;
	}
	return 0x820DDB88;
} // Block from 820DDB48h-820DDB88h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820DDB88h
// Function '?EmitMinimizeOp@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDB88);
		  /* 820DDB88h */ case    0:  		/* addi R8, R1, 128 */
		/* 820DDB88h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820DDB88h case    0:*/		return 0x820DDB8C;
		  /* 820DDB8Ch */ case    1:  		/* addi R7, R1, 160 */
		/* 820DDB8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820DDB8Ch case    1:*/		return 0x820DDB90;
		  /* 820DDB90h */ case    2:  		/* addi R6, R1, 128 */
		/* 820DDB90h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DDB90h case    2:*/		return 0x820DDB94;
		  /* 820DDB94h */ case    3:  		/* addi R5, R1, 128 */
		/* 820DDB94h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DDB94h case    3:*/		return 0x820DDB98;
		  /* 820DDB98h */ case    4:  		/* mr R3, R31 */
		/* 820DDB98h case    4:*/		regs.R3 = regs.R31;
		/* 820DDB98h case    4:*/		return 0x820DDB9C;
		  /* 820DDB9Ch */ case    5:  		/* bl -15044 */
		/* 820DDB9Ch case    5:*/		regs.LR = 0x820DDBA0; return 0x820DA0D8;
		/* 820DDB9Ch case    5:*/		return 0x820DDBA0;
		  /* 820DDBA0h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DDBA0h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDBA0h case    6:*/		return 0x820DDBA4;
		  /* 820DDBA4h */ case    7:  		/* bc 12, CR0_LT, 444 */
		/* 820DDBA4h case    7:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDBA4h case    7:*/		return 0x820DDBA8;
		  /* 820DDBA8h */ case    8:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DDBA8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DDBA8h case    8:*/		return 0x820DDBAC;
		  /* 820DDBACh */ case    9:  		/* addi R30, R30, 1 */
		/* 820DDBACh case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DDBACh case    9:*/		return 0x820DDBB0;
		  /* 820DDBB0h */ case   10:  		/* cmplw CR6, R30, R11 */
		/* 820DDBB0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DDBB0h case   10:*/		return 0x820DDBB4;
		  /* 820DDBB4h */ case   11:  		/* bc 12, CR6_LT, -104 */
		/* 820DDBB4h case   11:*/		if ( regs.CR[6].lt ) { return 0x820DDB4C;  }
		/* 820DDBB4h case   11:*/		return 0x820DDBB8;
	}
	return 0x820DDBB8;
} // Block from 820DDB88h-820DDBB8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DDBB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDBB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDBB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDBB8);
		  /* 820DDBB8h */ case    0:  		/* li R30, 0 */
		/* 820DDBB8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DDBB8h case    0:*/		return 0x820DDBBC;
		  /* 820DDBBCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DDBBCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DDBBCh case    1:*/		return 0x820DDBC0;
	}
	return 0x820DDBC0;
} // Block from 820DDBB8h-820DDBC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DDBC0h
// Function '?EmitMaximizeOp@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDBC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDBC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDBC0);
		  /* 820DDBC0h */ case    0:  		/* bc 12, CR6_EQ, 116 */
		/* 820DDBC0h case    0:*/		if ( regs.CR[6].eq ) { return 0x820DDC34;  }
		/* 820DDBC0h case    0:*/		return 0x820DDBC4;
		  /* 820DDBC4h */ case    1:  		/* lis R11, -32254 */
		/* 820DDBC4h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DDBC4h case    1:*/		return 0x820DDBC8;
		  /* 820DDBC8h */ case    2:  		/* addi R29, R11, -29264 */
		/* 820DDBC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8DB0);
		/* 820DDBC8h case    2:*/		return 0x820DDBCC;
		  /* 820DDBCCh */ case    3:  		/* mr R3, R31 */
		/* 820DDBCCh case    3:*/		regs.R3 = regs.R31;
		/* 820DDBCCh case    3:*/		return 0x820DDBD0;
		  /* 820DDBD0h */ case    4:  		/* bl -14880 */
		/* 820DDBD0h case    4:*/		regs.LR = 0x820DDBD4; return 0x820DA1B0;
		/* 820DDBD0h case    4:*/		return 0x820DDBD4;
		  /* 820DDBD4h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DDBD4h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDBD4h case    5:*/		return 0x820DDBD8;
		  /* 820DDBD8h */ case    6:  		/* bc 12, CR0_LT, 392 */
		/* 820DDBD8h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDBD8h case    6:*/		return 0x820DDBDC;
		  /* 820DDBDCh */ case    7:  		/* mr R5, R25 */
		/* 820DDBDCh case    7:*/		regs.R5 = regs.R25;
		/* 820DDBDCh case    7:*/		return 0x820DDBE0;
		  /* 820DDBE0h */ case    8:  		/* mr R6, R30 */
		/* 820DDBE0h case    8:*/		regs.R6 = regs.R30;
		/* 820DDBE0h case    8:*/		return 0x820DDBE4;
		  /* 820DDBE4h */ case    9:  		/* li R4, 32 */
		/* 820DDBE4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDBE4h case    9:*/		return 0x820DDBE8;
		  /* 820DDBE8h */ case   10:  		/* addi R3, R1, 128 */
		/* 820DDBE8h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DDBE8h case   10:*/		return 0x820DDBEC;
		  /* 820DDBECh */ case   11:  		/* bl -243116 */
		/* 820DDBECh case   11:*/		regs.LR = 0x820DDBF0; return 0x820A2640;
		/* 820DDBECh case   11:*/		return 0x820DDBF0;
		  /* 820DDBF0h */ case   12:  		/* mr R5, R26 */
		/* 820DDBF0h case   12:*/		regs.R5 = regs.R26;
		/* 820DDBF0h case   12:*/		return 0x820DDBF4;
		  /* 820DDBF4h */ case   13:  		/* mr R6, R30 */
		/* 820DDBF4h case   13:*/		regs.R6 = regs.R30;
		/* 820DDBF4h case   13:*/		return 0x820DDBF8;
	}
	return 0x820DDBF8;
} // Block from 820DDBC0h-820DDBF8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DDBF8h
// Function '?EmitLogEstOp@C30SWProgramCI@D3DXShader@@MAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDBF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDBF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDBF8);
		  /* 820DDBF8h */ case    0:  		/* li R4, 32 */
		/* 820DDBF8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDBF8h case    0:*/		return 0x820DDBFC;
		  /* 820DDBFCh */ case    1:  		/* addi R3, R1, 160 */
		/* 820DDBFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DDBFCh case    1:*/		return 0x820DDC00;
		  /* 820DDC00h */ case    2:  		/* bl -243136 */
		/* 820DDC00h case    2:*/		regs.LR = 0x820DDC04; return 0x820A2640;
		/* 820DDC00h case    2:*/		return 0x820DDC04;
		  /* 820DDC04h */ case    3:  		/* mr R4, R29 */
		/* 820DDC04h case    3:*/		regs.R4 = regs.R29;
		/* 820DDC04h case    3:*/		return 0x820DDC08;
		  /* 820DDC08h */ case    4:  		/* addi R7, R1, 128 */
		/* 820DDC08h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DDC08h case    4:*/		return 0x820DDC0C;
		  /* 820DDC0Ch */ case    5:  		/* addi R6, R1, 128 */
		/* 820DDC0Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DDC0Ch case    5:*/		return 0x820DDC10;
		  /* 820DDC10h */ case    6:  		/* addi R5, R1, 160 */
		/* 820DDC10h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DDC10h case    6:*/		return 0x820DDC14;
		  /* 820DDC14h */ case    7:  		/* mr R3, R31 */
		/* 820DDC14h case    7:*/		regs.R3 = regs.R31;
		/* 820DDC14h case    7:*/		return 0x820DDC18;
		  /* 820DDC18h */ case    8:  		/* bl -15168 */
		/* 820DDC18h case    8:*/		regs.LR = 0x820DDC1C; return 0x820DA0D8;
		/* 820DDC18h case    8:*/		return 0x820DDC1C;
		  /* 820DDC1Ch */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820DDC1Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDC1Ch case    9:*/		return 0x820DDC20;
		  /* 820DDC20h */ case   10:  		/* bc 12, CR0_LT, 320 */
		/* 820DDC20h case   10:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDC20h case   10:*/		return 0x820DDC24;
		  /* 820DDC24h */ case   11:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DDC24h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DDC24h case   11:*/		return 0x820DDC28;
	}
	return 0x820DDC28;
} // Block from 820DDBF8h-820DDC28h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DDC28h
// Function '?EmitExpEstOp@C30SWProgramCI@D3DXShader@@MAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDC28);
		  /* 820DDC28h */ case    0:  		/* addi R30, R30, 1 */
		/* 820DDC28h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DDC28h case    0:*/		return 0x820DDC2C;
		  /* 820DDC2Ch */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 820DDC2Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DDC2Ch case    1:*/		return 0x820DDC30;
		  /* 820DDC30h */ case    2:  		/* bc 12, CR6_LT, -100 */
		/* 820DDC30h case    2:*/		if ( regs.CR[6].lt ) { return 0x820DDBCC;  }
		/* 820DDC30h case    2:*/		return 0x820DDC34;
	}
	return 0x820DDC34;
} // Block from 820DDC28h-820DDC34h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DDC34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDC34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDC34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDC34);
		  /* 820DDC34h */ case    0:  		/* lis R10, -32254 */
		/* 820DDC34h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DDC34h case    0:*/		return 0x820DDC38;
		  /* 820DDC38h */ case    1:  		/* li R30, 0 */
		/* 820DDC38h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DDC38h case    1:*/		return 0x820DDC3C;
		  /* 820DDC3Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820DDC3Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DDC3Ch case    2:*/		return 0x820DDC40;
		  /* 820DDC40h */ case    3:  		/* addi R28, R10, -30716 */
		/* 820DDC40h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFF8804);
		/* 820DDC40h case    3:*/		return 0x820DDC44;
		  /* 820DDC44h */ case    4:  		/* bc 12, CR6_EQ, 108 */
		/* 820DDC44h case    4:*/		if ( regs.CR[6].eq ) { return 0x820DDCB0;  }
		/* 820DDC44h case    4:*/		return 0x820DDC48;
		  /* 820DDC48h */ case    5:  		/* mr R3, R31 */
		/* 820DDC48h case    5:*/		regs.R3 = regs.R31;
		/* 820DDC48h case    5:*/		return 0x820DDC4C;
		  /* 820DDC4Ch */ case    6:  		/* bl -15004 */
		/* 820DDC4Ch case    6:*/		regs.LR = 0x820DDC50; return 0x820DA1B0;
		/* 820DDC4Ch case    6:*/		return 0x820DDC50;
		  /* 820DDC50h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DDC50h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDC50h case    7:*/		return 0x820DDC54;
		  /* 820DDC54h */ case    8:  		/* bc 12, CR0_LT, 268 */
		/* 820DDC54h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDC54h case    8:*/		return 0x820DDC58;
	}
	return 0x820DDC58;
} // Block from 820DDC34h-820DDC58h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820DDC58h
// Function '?EmitSubtractOp@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDC58);
		  /* 820DDC58h */ case    0:  		/* mr R7, R30 */
		/* 820DDC58h case    0:*/		regs.R7 = regs.R30;
		/* 820DDC58h case    0:*/		return 0x820DDC5C;
		  /* 820DDC5Ch */ case    1:  		/* mr R6, R30 */
		/* 820DDC5Ch case    1:*/		regs.R6 = regs.R30;
		/* 820DDC5Ch case    1:*/		return 0x820DDC60;
		  /* 820DDC60h */ case    2:  		/* mr R5, R24 */
		/* 820DDC60h case    2:*/		regs.R5 = regs.R24;
		/* 820DDC60h case    2:*/		return 0x820DDC64;
		  /* 820DDC64h */ case    3:  		/* li R4, 32 */
		/* 820DDC64h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDC64h case    3:*/		return 0x820DDC68;
		  /* 820DDC68h */ case    4:  		/* addi R3, R1, 192 */
		/* 820DDC68h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DDC68h case    4:*/		return 0x820DDC6C;
		  /* 820DDC6Ch */ case    5:  		/* bl -243244 */
		/* 820DDC6Ch case    5:*/		regs.LR = 0x820DDC70; return 0x820A2640;
		/* 820DDC6Ch case    5:*/		return 0x820DDC70;
		  /* 820DDC70h */ case    6:  		/* mr R5, R28 */
		/* 820DDC70h case    6:*/		regs.R5 = regs.R28;
		/* 820DDC70h case    6:*/		return 0x820DDC74;
		  /* 820DDC74h */ case    7:  		/* mr R6, R30 */
		/* 820DDC74h case    7:*/		regs.R6 = regs.R30;
		/* 820DDC74h case    7:*/		return 0x820DDC78;
		  /* 820DDC78h */ case    8:  		/* li R4, 32 */
		/* 820DDC78h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDC78h case    8:*/		return 0x820DDC7C;
		  /* 820DDC7Ch */ case    9:  		/* addi R3, R1, 224 */
		/* 820DDC7Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820DDC7Ch case    9:*/		return 0x820DDC80;
		  /* 820DDC80h */ case   10:  		/* bl -243264 */
		/* 820DDC80h case   10:*/		regs.LR = 0x820DDC84; return 0x820A2640;
		/* 820DDC80h case   10:*/		return 0x820DDC84;
		  /* 820DDC84h */ case   11:  		/* mr R4, R23 */
		/* 820DDC84h case   11:*/		regs.R4 = regs.R23;
		/* 820DDC84h case   11:*/		return 0x820DDC88;
		  /* 820DDC88h */ case   12:  		/* addi R6, R1, 192 */
		/* 820DDC88h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820DDC88h case   12:*/		return 0x820DDC8C;
		  /* 820DDC8Ch */ case   13:  		/* addi R5, R1, 224 */
		/* 820DDC8Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 820DDC8Ch case   13:*/		return 0x820DDC90;
	}
	return 0x820DDC90;
} // Block from 820DDC58h-820DDC90h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DDC90h
// Function '?EmitMultiplyOp@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDC90);
		  /* 820DDC90h */ case    0:  		/* mr R3, R31 */
		/* 820DDC90h case    0:*/		regs.R3 = regs.R31;
		/* 820DDC90h case    0:*/		return 0x820DDC94;
		  /* 820DDC94h */ case    1:  		/* bl -15292 */
		/* 820DDC94h case    1:*/		regs.LR = 0x820DDC98; return 0x820DA0D8;
		/* 820DDC94h case    1:*/		return 0x820DDC98;
		  /* 820DDC98h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DDC98h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDC98h case    2:*/		return 0x820DDC9C;
		  /* 820DDC9Ch */ case    3:  		/* bc 12, CR0_LT, 196 */
		/* 820DDC9Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDC9Ch case    3:*/		return 0x820DDCA0;
		  /* 820DDCA0h */ case    4:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DDCA0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DDCA0h case    4:*/		return 0x820DDCA4;
		  /* 820DDCA4h */ case    5:  		/* addi R30, R30, 1 */
		/* 820DDCA4h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DDCA4h case    5:*/		return 0x820DDCA8;
		  /* 820DDCA8h */ case    6:  		/* cmplw CR6, R30, R11 */
		/* 820DDCA8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DDCA8h case    6:*/		return 0x820DDCAC;
		  /* 820DDCACh */ case    7:  		/* bc 12, CR6_LT, -100 */
		/* 820DDCACh case    7:*/		if ( regs.CR[6].lt ) { return 0x820DDC48;  }
		/* 820DDCACh case    7:*/		return 0x820DDCB0;
	}
	return 0x820DDCB0;
} // Block from 820DDC90h-820DDCB0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820DDCB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDCB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDCB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDCB0);
		  /* 820DDCB0h */ case    0:  		/* li R30, 0 */
		/* 820DDCB0h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DDCB0h case    0:*/		return 0x820DDCB4;
		  /* 820DDCB4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DDCB4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DDCB4h case    1:*/		return 0x820DDCB8;
		  /* 820DDCB8h */ case    2:  		/* bc 12, CR6_EQ, 164 */
		/* 820DDCB8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DDD5C;  }
		/* 820DDCB8h case    2:*/		return 0x820DDCBC;
		  /* 820DDCBCh */ case    3:  		/* lis R11, -32254 */
		/* 820DDCBCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DDCBCh case    3:*/		return 0x820DDCC0;
		  /* 820DDCC0h */ case    4:  		/* addi R29, R11, -29292 */
		/* 820DDCC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8D94);
		/* 820DDCC0h case    4:*/		return 0x820DDCC4;
		  /* 820DDCC4h */ case    5:  		/* mr R3, R31 */
		/* 820DDCC4h case    5:*/		regs.R3 = regs.R31;
		/* 820DDCC4h case    5:*/		return 0x820DDCC8;
	}
	return 0x820DDCC8;
} // Block from 820DDCB0h-820DDCC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DDCC8h
// Function '?EmitMultiplyAddOp@C30SWProgramCI@D3DXShader@@MAAJPBD00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDCC8);
		  /* 820DDCC8h */ case    0:  		/* bl -15128 */
		/* 820DDCC8h case    0:*/		regs.LR = 0x820DDCCC; return 0x820DA1B0;
		/* 820DDCC8h case    0:*/		return 0x820DDCCC;
		  /* 820DDCCCh */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820DDCCCh case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDCCCh case    1:*/		return 0x820DDCD0;
		  /* 820DDCD0h */ case    2:  		/* bc 12, CR0_LT, 144 */
		/* 820DDCD0h case    2:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDCD0h case    2:*/		return 0x820DDCD4;
		  /* 820DDCD4h */ case    3:  		/* mr R7, R30 */
		/* 820DDCD4h case    3:*/		regs.R7 = regs.R30;
		/* 820DDCD4h case    3:*/		return 0x820DDCD8;
		  /* 820DDCD8h */ case    4:  		/* mr R6, R30 */
		/* 820DDCD8h case    4:*/		regs.R6 = regs.R30;
		/* 820DDCD8h case    4:*/		return 0x820DDCDC;
		  /* 820DDCDCh */ case    5:  		/* mr R5, R22 */
		/* 820DDCDCh case    5:*/		regs.R5 = regs.R22;
		/* 820DDCDCh case    5:*/		return 0x820DDCE0;
		  /* 820DDCE0h */ case    6:  		/* li R4, 32 */
		/* 820DDCE0h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDCE0h case    6:*/		return 0x820DDCE4;
		  /* 820DDCE4h */ case    7:  		/* addi R3, R1, 256 */
		/* 820DDCE4h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 820DDCE4h case    7:*/		return 0x820DDCE8;
		  /* 820DDCE8h */ case    8:  		/* bl -243368 */
		/* 820DDCE8h case    8:*/		regs.LR = 0x820DDCEC; return 0x820A2640;
		/* 820DDCE8h case    8:*/		return 0x820DDCEC;
		  /* 820DDCECh */ case    9:  		/* mr R5, R28 */
		/* 820DDCECh case    9:*/		regs.R5 = regs.R28;
		/* 820DDCECh case    9:*/		return 0x820DDCF0;
		  /* 820DDCF0h */ case   10:  		/* mr R6, R30 */
		/* 820DDCF0h case   10:*/		regs.R6 = regs.R30;
		/* 820DDCF0h case   10:*/		return 0x820DDCF4;
		  /* 820DDCF4h */ case   11:  		/* li R4, 32 */
		/* 820DDCF4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDCF4h case   11:*/		return 0x820DDCF8;
		  /* 820DDCF8h */ case   12:  		/* addi R3, R1, 224 */
		/* 820DDCF8h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820DDCF8h case   12:*/		return 0x820DDCFC;
		  /* 820DDCFCh */ case   13:  		/* bl -243388 */
		/* 820DDCFCh case   13:*/		regs.LR = 0x820DDD00; return 0x820A2640;
		/* 820DDCFCh case   13:*/		return 0x820DDD00;
	}
	return 0x820DDD00;
} // Block from 820DDCC8h-820DDD00h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DDD00h
// Function '?EmitComparisonSW@C30SWProgramCI@D3DXShader@@MAAJKPBD00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDD00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDD00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDD00);
		  /* 820DDD00h */ case    0:  		/* mr R5, R25 */
		/* 820DDD00h case    0:*/		regs.R5 = regs.R25;
		/* 820DDD00h case    0:*/		return 0x820DDD04;
		  /* 820DDD04h */ case    1:  		/* mr R6, R30 */
		/* 820DDD04h case    1:*/		regs.R6 = regs.R30;
		/* 820DDD04h case    1:*/		return 0x820DDD08;
		  /* 820DDD08h */ case    2:  		/* li R4, 32 */
		/* 820DDD08h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDD08h case    2:*/		return 0x820DDD0C;
		  /* 820DDD0Ch */ case    3:  		/* addi R3, R1, 128 */
		/* 820DDD0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DDD0Ch case    3:*/		return 0x820DDD10;
		  /* 820DDD10h */ case    4:  		/* bl -243408 */
		/* 820DDD10h case    4:*/		regs.LR = 0x820DDD14; return 0x820A2640;
		/* 820DDD10h case    4:*/		return 0x820DDD14;
		  /* 820DDD14h */ case    5:  		/* mr R5, R26 */
		/* 820DDD14h case    5:*/		regs.R5 = regs.R26;
		/* 820DDD14h case    5:*/		return 0x820DDD18;
		  /* 820DDD18h */ case    6:  		/* mr R6, R30 */
		/* 820DDD18h case    6:*/		regs.R6 = regs.R30;
		/* 820DDD18h case    6:*/		return 0x820DDD1C;
		  /* 820DDD1Ch */ case    7:  		/* li R4, 32 */
		/* 820DDD1Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDD1Ch case    7:*/		return 0x820DDD20;
		  /* 820DDD20h */ case    8:  		/* addi R3, R1, 160 */
		/* 820DDD20h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DDD20h case    8:*/		return 0x820DDD24;
		  /* 820DDD24h */ case    9:  		/* bl -243428 */
		/* 820DDD24h case    9:*/		regs.LR = 0x820DDD28; return 0x820A2640;
		/* 820DDD24h case    9:*/		return 0x820DDD28;
		  /* 820DDD28h */ case   10:  		/* mr R4, R29 */
		/* 820DDD28h case   10:*/		regs.R4 = regs.R29;
		/* 820DDD28h case   10:*/		return 0x820DDD2C;
		  /* 820DDD2Ch */ case   11:  		/* addi R8, R1, 128 */
		/* 820DDD2Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820DDD2Ch case   11:*/		return 0x820DDD30;
		  /* 820DDD30h */ case   12:  		/* addi R7, R1, 128 */
		/* 820DDD30h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DDD30h case   12:*/		return 0x820DDD34;
		  /* 820DDD34h */ case   13:  		/* addi R6, R1, 224 */
		/* 820DDD34h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xE0);
		/* 820DDD34h case   13:*/		return 0x820DDD38;
		  /* 820DDD38h */ case   14:  		/* addi R5, R1, 256 */
		/* 820DDD38h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 820DDD38h case   14:*/		return 0x820DDD3C;
		  /* 820DDD3Ch */ case   15:  		/* mr R3, R31 */
		/* 820DDD3Ch case   15:*/		regs.R3 = regs.R31;
		/* 820DDD3Ch case   15:*/		return 0x820DDD40;
		  /* 820DDD40h */ case   16:  		/* bl -15464 */
		/* 820DDD40h case   16:*/		regs.LR = 0x820DDD44; return 0x820DA0D8;
		/* 820DDD40h case   16:*/		return 0x820DDD44;
		  /* 820DDD44h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 820DDD44h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDD44h case   17:*/		return 0x820DDD48;
		  /* 820DDD48h */ case   18:  		/* bc 12, CR0_LT, 24 */
		/* 820DDD48h case   18:*/		if ( regs.CR[0].lt ) { return 0x820DDD60;  }
		/* 820DDD48h case   18:*/		return 0x820DDD4C;
		  /* 820DDD4Ch */ case   19:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DDD4Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DDD4Ch case   19:*/		return 0x820DDD50;
		  /* 820DDD50h */ case   20:  		/* addi R30, R30, 1 */
		/* 820DDD50h case   20:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DDD50h case   20:*/		return 0x820DDD54;
		  /* 820DDD54h */ case   21:  		/* cmplw CR6, R30, R11 */
		/* 820DDD54h case   21:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DDD54h case   21:*/		return 0x820DDD58;
		  /* 820DDD58h */ case   22:  		/* bc 12, CR6_LT, -148 */
		/* 820DDD58h case   22:*/		if ( regs.CR[6].lt ) { return 0x820DDCC4;  }
		/* 820DDD58h case   22:*/		return 0x820DDD5C;
	}
	return 0x820DDD5C;
} // Block from 820DDD00h-820DDD5Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 820DDD5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDD5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDD5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDD5C);
		  /* 820DDD5Ch */ case    0:  		/* li R3, 0 */
		/* 820DDD5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DDD5Ch case    0:*/		return 0x820DDD60;
	}
	return 0x820DDD60;
} // Block from 820DDD5Ch-820DDD60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DDD60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDD60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDD60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDD60);
		  /* 820DDD60h */ case    0:  		/* addi R1, R1, 384 */
		/* 820DDD60h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 820DDD60h case    0:*/		return 0x820DDD64;
		  /* 820DDD64h */ case    1:  		/* b -314068 */
		/* 820DDD64h case    1:*/		return 0x82091290;
		/* 820DDD64h case    1:*/		return 0x820DDD68;
	}
	return 0x820DDD68;
} // Block from 820DDD60h-820DDD68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DDD68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDD68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDD68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDD68);
		  /* 820DDD68h */ case    0:  		/* mfspr R12, LR */
		/* 820DDD68h case    0:*/		regs.R12 = regs.LR;
		/* 820DDD68h case    0:*/		return 0x820DDD6C;
		  /* 820DDD6Ch */ case    1:  		/* bl -314140 */
		/* 820DDD6Ch case    1:*/		regs.LR = 0x820DDD70; return 0x82091250;
		/* 820DDD6Ch case    1:*/		return 0x820DDD70;
		  /* 820DDD70h */ case    2:  		/* stwu R1, <#[R1 - 288]> */
		/* 820DDD70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 820DDD70h case    2:*/		return 0x820DDD74;
		  /* 820DDD74h */ case    3:  		/* lis R11, -32254 */
		/* 820DDD74h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DDD74h case    3:*/		return 0x820DDD78;
		  /* 820DDD78h */ case    4:  		/* mr R30, R3 */
		/* 820DDD78h case    4:*/		regs.R30 = regs.R3;
		/* 820DDD78h case    4:*/		return 0x820DDD7C;
		  /* 820DDD7Ch */ case    5:  		/* addi R27, R11, -30704 */
		/* 820DDD7Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFF8810);
		/* 820DDD7Ch case    5:*/		return 0x820DDD80;
		  /* 820DDD80h */ case    6:  		/* lwz R11, <#[R3 + 1816]> */
		/* 820DDD80h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000718) );
		/* 820DDD80h case    6:*/		return 0x820DDD84;
		  /* 820DDD84h */ case    7:  		/* mr R26, R4 */
		/* 820DDD84h case    7:*/		regs.R26 = regs.R4;
		/* 820DDD84h case    7:*/		return 0x820DDD88;
		  /* 820DDD88h */ case    8:  		/* mr R28, R5 */
		/* 820DDD88h case    8:*/		regs.R28 = regs.R5;
		/* 820DDD88h case    8:*/		return 0x820DDD8C;
		  /* 820DDD8Ch */ case    9:  		/* li R31, 0 */
		/* 820DDD8Ch case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820DDD8Ch case    9:*/		return 0x820DDD90;
		  /* 820DDD90h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 820DDD90h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DDD90h case   10:*/		return 0x820DDD94;
		  /* 820DDD94h */ case   11:  		/* bc 12, CR6_EQ, 116 */
		/* 820DDD94h case   11:*/		if ( regs.CR[6].eq ) { return 0x820DDE08;  }
		/* 820DDD94h case   11:*/		return 0x820DDD98;
		  /* 820DDD98h */ case   12:  		/* lis R11, -32254 */
		/* 820DDD98h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DDD98h case   12:*/		return 0x820DDD9C;
		  /* 820DDD9Ch */ case   13:  		/* addi R29, R11, -29124 */
		/* 820DDD9Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8E3C);
		/* 820DDD9Ch case   13:*/		return 0x820DDDA0;
		  /* 820DDDA0h */ case   14:  		/* mr R3, R30 */
		/* 820DDDA0h case   14:*/		regs.R3 = regs.R30;
		/* 820DDDA0h case   14:*/		return 0x820DDDA4;
		  /* 820DDDA4h */ case   15:  		/* bl -15348 */
		/* 820DDDA4h case   15:*/		regs.LR = 0x820DDDA8; return 0x820DA1B0;
		/* 820DDDA4h case   15:*/		return 0x820DDDA8;
		  /* 820DDDA8h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820DDDA8h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDDA8h case   16:*/		return 0x820DDDAC;
		  /* 820DDDACh */ case   17:  		/* bc 12, CR0_LT, 248 */
		/* 820DDDACh case   17:*/		if ( regs.CR[0].lt ) { return 0x820DDEA4;  }
		/* 820DDDACh case   17:*/		return 0x820DDDB0;
		  /* 820DDDB0h */ case   18:  		/* mr R7, R31 */
		/* 820DDDB0h case   18:*/		regs.R7 = regs.R31;
		/* 820DDDB0h case   18:*/		return 0x820DDDB4;
		  /* 820DDDB4h */ case   19:  		/* mr R6, R31 */
		/* 820DDDB4h case   19:*/		regs.R6 = regs.R31;
		/* 820DDDB4h case   19:*/		return 0x820DDDB8;
		  /* 820DDDB8h */ case   20:  		/* mr R5, R28 */
		/* 820DDDB8h case   20:*/		regs.R5 = regs.R28;
		/* 820DDDB8h case   20:*/		return 0x820DDDBC;
		  /* 820DDDBCh */ case   21:  		/* li R4, 32 */
		/* 820DDDBCh case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDDBCh case   21:*/		return 0x820DDDC0;
		  /* 820DDDC0h */ case   22:  		/* addi R3, R1, 160 */
		/* 820DDDC0h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DDDC0h case   22:*/		return 0x820DDDC4;
		  /* 820DDDC4h */ case   23:  		/* bl -243588 */
		/* 820DDDC4h case   23:*/		regs.LR = 0x820DDDC8; return 0x820A2640;
		/* 820DDDC4h case   23:*/		return 0x820DDDC8;
		  /* 820DDDC8h */ case   24:  		/* mr R5, R27 */
		/* 820DDDC8h case   24:*/		regs.R5 = regs.R27;
		/* 820DDDC8h case   24:*/		return 0x820DDDCC;
		  /* 820DDDCCh */ case   25:  		/* mr R6, R31 */
		/* 820DDDCCh case   25:*/		regs.R6 = regs.R31;
		/* 820DDDCCh case   25:*/		return 0x820DDDD0;
		  /* 820DDDD0h */ case   26:  		/* li R4, 32 */
		/* 820DDDD0h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDDD0h case   26:*/		return 0x820DDDD4;
		  /* 820DDDD4h */ case   27:  		/* addi R3, R1, 128 */
		/* 820DDDD4h case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DDDD4h case   27:*/		return 0x820DDDD8;
		  /* 820DDDD8h */ case   28:  		/* bl -243608 */
		/* 820DDDD8h case   28:*/		regs.LR = 0x820DDDDC; return 0x820A2640;
		/* 820DDDD8h case   28:*/		return 0x820DDDDC;
		  /* 820DDDDCh */ case   29:  		/* mr R4, R29 */
		/* 820DDDDCh case   29:*/		regs.R4 = regs.R29;
		/* 820DDDDCh case   29:*/		return 0x820DDDE0;
		  /* 820DDDE0h */ case   30:  		/* addi R6, R1, 160 */
		/* 820DDDE0h case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DDDE0h case   30:*/		return 0x820DDDE4;
		  /* 820DDDE4h */ case   31:  		/* addi R5, R1, 128 */
		/* 820DDDE4h case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DDDE4h case   31:*/		return 0x820DDDE8;
		  /* 820DDDE8h */ case   32:  		/* mr R3, R30 */
		/* 820DDDE8h case   32:*/		regs.R3 = regs.R30;
		/* 820DDDE8h case   32:*/		return 0x820DDDEC;
		  /* 820DDDECh */ case   33:  		/* bl -15636 */
		/* 820DDDECh case   33:*/		regs.LR = 0x820DDDF0; return 0x820DA0D8;
		/* 820DDDECh case   33:*/		return 0x820DDDF0;
		  /* 820DDDF0h */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 820DDDF0h case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDDF0h case   34:*/		return 0x820DDDF4;
		  /* 820DDDF4h */ case   35:  		/* bc 12, CR0_LT, 176 */
		/* 820DDDF4h case   35:*/		if ( regs.CR[0].lt ) { return 0x820DDEA4;  }
		/* 820DDDF4h case   35:*/		return 0x820DDDF8;
		  /* 820DDDF8h */ case   36:  		/* lwz R11, <#[R30 + 1816]> */
		/* 820DDDF8h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000718) );
		/* 820DDDF8h case   36:*/		return 0x820DDDFC;
		  /* 820DDDFCh */ case   37:  		/* addi R31, R31, 1 */
		/* 820DDDFCh case   37:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820DDDFCh case   37:*/		return 0x820DDE00;
		  /* 820DDE00h */ case   38:  		/* cmplw CR6, R31, R11 */
		/* 820DDE00h case   38:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820DDE00h case   38:*/		return 0x820DDE04;
		  /* 820DDE04h */ case   39:  		/* bc 12, CR6_LT, -100 */
		/* 820DDE04h case   39:*/		if ( regs.CR[6].lt ) { return 0x820DDDA0;  }
		/* 820DDE04h case   39:*/		return 0x820DDE08;
	}
	return 0x820DDE08;
} // Block from 820DDD68h-820DDE08h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820DDE08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDE08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDE08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDE08);
		  /* 820DDE08h */ case    0:  		/* li R31, 0 */
		/* 820DDE08h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820DDE08h case    0:*/		return 0x820DDE0C;
		  /* 820DDE0Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DDE0Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DDE0Ch case    1:*/		return 0x820DDE10;
		  /* 820DDE10h */ case    2:  		/* bc 12, CR6_EQ, 144 */
		/* 820DDE10h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DDEA0;  }
		/* 820DDE10h case    2:*/		return 0x820DDE14;
		  /* 820DDE14h */ case    3:  		/* lis R11, -32254 */
		/* 820DDE14h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DDE14h case    3:*/		return 0x820DDE18;
		  /* 820DDE18h */ case    4:  		/* addi R29, R11, -29152 */
		/* 820DDE18h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8E20);
		/* 820DDE18h case    4:*/		return 0x820DDE1C;
		  /* 820DDE1Ch */ case    5:  		/* mr R3, R30 */
		/* 820DDE1Ch case    5:*/		regs.R3 = regs.R30;
		/* 820DDE1Ch case    5:*/		return 0x820DDE20;
		  /* 820DDE20h */ case    6:  		/* bl -15472 */
		/* 820DDE20h case    6:*/		regs.LR = 0x820DDE24; return 0x820DA1B0;
		/* 820DDE20h case    6:*/		return 0x820DDE24;
		  /* 820DDE24h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DDE24h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDE24h case    7:*/		return 0x820DDE28;
		  /* 820DDE28h */ case    8:  		/* bc 12, CR0_LT, 124 */
		/* 820DDE28h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DDEA4;  }
		/* 820DDE28h case    8:*/		return 0x820DDE2C;
		  /* 820DDE2Ch */ case    9:  		/* mr R7, R31 */
		/* 820DDE2Ch case    9:*/		regs.R7 = regs.R31;
		/* 820DDE2Ch case    9:*/		return 0x820DDE30;
		  /* 820DDE30h */ case   10:  		/* mr R6, R31 */
		/* 820DDE30h case   10:*/		regs.R6 = regs.R31;
		/* 820DDE30h case   10:*/		return 0x820DDE34;
		  /* 820DDE34h */ case   11:  		/* mr R5, R26 */
		/* 820DDE34h case   11:*/		regs.R5 = regs.R26;
		/* 820DDE34h case   11:*/		return 0x820DDE38;
		  /* 820DDE38h */ case   12:  		/* li R4, 32 */
		/* 820DDE38h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDE38h case   12:*/		return 0x820DDE3C;
		  /* 820DDE3Ch */ case   13:  		/* addi R3, R1, 192 */
		/* 820DDE3Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DDE3Ch case   13:*/		return 0x820DDE40;
		  /* 820DDE40h */ case   14:  		/* bl -243712 */
		/* 820DDE40h case   14:*/		regs.LR = 0x820DDE44; return 0x820A2640;
		/* 820DDE40h case   14:*/		return 0x820DDE44;
		  /* 820DDE44h */ case   15:  		/* mr R7, R31 */
		/* 820DDE44h case   15:*/		regs.R7 = regs.R31;
		/* 820DDE44h case   15:*/		return 0x820DDE48;
		  /* 820DDE48h */ case   16:  		/* mr R6, R31 */
		/* 820DDE48h case   16:*/		regs.R6 = regs.R31;
		/* 820DDE48h case   16:*/		return 0x820DDE4C;
		  /* 820DDE4Ch */ case   17:  		/* mr R5, R28 */
		/* 820DDE4Ch case   17:*/		regs.R5 = regs.R28;
		/* 820DDE4Ch case   17:*/		return 0x820DDE50;
		  /* 820DDE50h */ case   18:  		/* li R4, 32 */
		/* 820DDE50h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDE50h case   18:*/		return 0x820DDE54;
		  /* 820DDE54h */ case   19:  		/* addi R3, R1, 160 */
		/* 820DDE54h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DDE54h case   19:*/		return 0x820DDE58;
		  /* 820DDE58h */ case   20:  		/* bl -243736 */
		/* 820DDE58h case   20:*/		regs.LR = 0x820DDE5C; return 0x820A2640;
		/* 820DDE58h case   20:*/		return 0x820DDE5C;
		  /* 820DDE5Ch */ case   21:  		/* mr R5, R27 */
		/* 820DDE5Ch case   21:*/		regs.R5 = regs.R27;
		/* 820DDE5Ch case   21:*/		return 0x820DDE60;
		  /* 820DDE60h */ case   22:  		/* mr R6, R31 */
		/* 820DDE60h case   22:*/		regs.R6 = regs.R31;
		/* 820DDE60h case   22:*/		return 0x820DDE64;
		  /* 820DDE64h */ case   23:  		/* li R4, 32 */
		/* 820DDE64h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDE64h case   23:*/		return 0x820DDE68;
		  /* 820DDE68h */ case   24:  		/* addi R3, R1, 128 */
		/* 820DDE68h case   24:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DDE68h case   24:*/		return 0x820DDE6C;
		  /* 820DDE6Ch */ case   25:  		/* bl -243756 */
		/* 820DDE6Ch case   25:*/		regs.LR = 0x820DDE70; return 0x820A2640;
		/* 820DDE6Ch case   25:*/		return 0x820DDE70;
		  /* 820DDE70h */ case   26:  		/* mr R4, R29 */
		/* 820DDE70h case   26:*/		regs.R4 = regs.R29;
		/* 820DDE70h case   26:*/		return 0x820DDE74;
		  /* 820DDE74h */ case   27:  		/* addi R7, R1, 128 */
		/* 820DDE74h case   27:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DDE74h case   27:*/		return 0x820DDE78;
		  /* 820DDE78h */ case   28:  		/* addi R6, R1, 160 */
		/* 820DDE78h case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DDE78h case   28:*/		return 0x820DDE7C;
		  /* 820DDE7Ch */ case   29:  		/* addi R5, R1, 192 */
		/* 820DDE7Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820DDE7Ch case   29:*/		return 0x820DDE80;
		  /* 820DDE80h */ case   30:  		/* mr R3, R30 */
		/* 820DDE80h case   30:*/		regs.R3 = regs.R30;
		/* 820DDE80h case   30:*/		return 0x820DDE84;
		  /* 820DDE84h */ case   31:  		/* bl -15788 */
		/* 820DDE84h case   31:*/		regs.LR = 0x820DDE88; return 0x820DA0D8;
		/* 820DDE84h case   31:*/		return 0x820DDE88;
		  /* 820DDE88h */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 820DDE88h case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDE88h case   32:*/		return 0x820DDE8C;
		  /* 820DDE8Ch */ case   33:  		/* bc 12, CR0_LT, 24 */
		/* 820DDE8Ch case   33:*/		if ( regs.CR[0].lt ) { return 0x820DDEA4;  }
		/* 820DDE8Ch case   33:*/		return 0x820DDE90;
		  /* 820DDE90h */ case   34:  		/* lwz R11, <#[R30 + 1816]> */
		/* 820DDE90h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000718) );
		/* 820DDE90h case   34:*/		return 0x820DDE94;
		  /* 820DDE94h */ case   35:  		/* addi R31, R31, 1 */
		/* 820DDE94h case   35:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820DDE94h case   35:*/		return 0x820DDE98;
		  /* 820DDE98h */ case   36:  		/* cmplw CR6, R31, R11 */
		/* 820DDE98h case   36:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820DDE98h case   36:*/		return 0x820DDE9C;
		  /* 820DDE9Ch */ case   37:  		/* bc 12, CR6_LT, -128 */
		/* 820DDE9Ch case   37:*/		if ( regs.CR[6].lt ) { return 0x820DDE1C;  }
		/* 820DDE9Ch case   37:*/		return 0x820DDEA0;
	}
	return 0x820DDEA0;
} // Block from 820DDE08h-820DDEA0h (38 instructions)

//////////////////////////////////////////////////////
// Block at 820DDEA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDEA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDEA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDEA0);
		  /* 820DDEA0h */ case    0:  		/* li R3, 0 */
		/* 820DDEA0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DDEA0h case    0:*/		return 0x820DDEA4;
	}
	return 0x820DDEA4;
} // Block from 820DDEA0h-820DDEA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DDEA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDEA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDEA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDEA4);
		  /* 820DDEA4h */ case    0:  		/* addi R1, R1, 288 */
		/* 820DDEA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 820DDEA4h case    0:*/		return 0x820DDEA8;
		  /* 820DDEA8h */ case    1:  		/* b -314376 */
		/* 820DDEA8h case    1:*/		return 0x820912A0;
		/* 820DDEA8h case    1:*/		return 0x820DDEAC;
		  /* 820DDEACh */ case    2:  		/* nop */
		/* 820DDEACh case    2:*/		cpu::op::nop();
		/* 820DDEACh case    2:*/		return 0x820DDEB0;
	}
	return 0x820DDEB0;
} // Block from 820DDEA4h-820DDEB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DDEB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDEB0);
		  /* 820DDEB0h */ case    0:  		/* mfspr R12, LR */
		/* 820DDEB0h case    0:*/		regs.R12 = regs.LR;
		/* 820DDEB0h case    0:*/		return 0x820DDEB4;
		  /* 820DDEB4h */ case    1:  		/* bl -314476 */
		/* 820DDEB4h case    1:*/		regs.LR = 0x820DDEB8; return 0x82091248;
		/* 820DDEB4h case    1:*/		return 0x820DDEB8;
		  /* 820DDEB8h */ case    2:  		/* stwu R1, <#[R1 - 368]> */
		/* 820DDEB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 820DDEB8h case    2:*/		return 0x820DDEBC;
		  /* 820DDEBCh */ case    3:  		/* mr R31, R3 */
		/* 820DDEBCh case    3:*/		regs.R31 = regs.R3;
		/* 820DDEBCh case    3:*/		return 0x820DDEC0;
		  /* 820DDEC0h */ case    4:  		/* mr R24, R4 */
		/* 820DDEC0h case    4:*/		regs.R24 = regs.R4;
		/* 820DDEC0h case    4:*/		return 0x820DDEC4;
		  /* 820DDEC4h */ case    5:  		/* mr R28, R5 */
		/* 820DDEC4h case    5:*/		regs.R28 = regs.R5;
		/* 820DDEC4h case    5:*/		return 0x820DDEC8;
		  /* 820DDEC8h */ case    6:  		/* bl -15640 */
		/* 820DDEC8h case    6:*/		regs.LR = 0x820DDECC; return 0x820DA1B0;
		/* 820DDEC8h case    6:*/		return 0x820DDECC;
		  /* 820DDECCh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DDECCh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDECCh case    7:*/		return 0x820DDED0;
		  /* 820DDED0h */ case    8:  		/* bc 12, CR0_LT, 836 */
		/* 820DDED0h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DDED0h case    8:*/		return 0x820DDED4;
		  /* 820DDED4h */ case    9:  		/* lis R11, -32254 */
		/* 820DDED4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DDED4h case    9:*/		return 0x820DDED8;
		  /* 820DDED8h */ case   10:  		/* mr R3, R31 */
		/* 820DDED8h case   10:*/		regs.R3 = regs.R31;
		/* 820DDED8h case   10:*/		return 0x820DDEDC;
		  /* 820DDEDCh */ case   11:  		/* addi R4, R11, -29052 */
		/* 820DDEDCh case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8E84);
		/* 820DDEDCh case   11:*/		return 0x820DDEE0;
		  /* 820DDEE0h */ case   12:  		/* bl -15880 */
		/* 820DDEE0h case   12:*/		regs.LR = 0x820DDEE4; return 0x820DA0D8;
		/* 820DDEE0h case   12:*/		return 0x820DDEE4;
		  /* 820DDEE4h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DDEE4h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDEE4h case   13:*/		return 0x820DDEE8;
		  /* 820DDEE8h */ case   14:  		/* bc 12, CR0_LT, 812 */
		/* 820DDEE8h case   14:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DDEE8h case   14:*/		return 0x820DDEEC;
		  /* 820DDEECh */ case   15:  		/* mr R3, R31 */
		/* 820DDEECh case   15:*/		regs.R3 = regs.R31;
		/* 820DDEECh case   15:*/		return 0x820DDEF0;
		  /* 820DDEF0h */ case   16:  		/* bl -15680 */
		/* 820DDEF0h case   16:*/		regs.LR = 0x820DDEF4; return 0x820DA1B0;
		/* 820DDEF0h case   16:*/		return 0x820DDEF4;
		  /* 820DDEF4h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 820DDEF4h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDEF4h case   17:*/		return 0x820DDEF8;
		  /* 820DDEF8h */ case   18:  		/* bc 12, CR0_LT, 796 */
		/* 820DDEF8h case   18:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DDEF8h case   18:*/		return 0x820DDEFC;
		  /* 820DDEFCh */ case   19:  		/* lis R11, -32254 */
		/* 820DDEFCh case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DDEFCh case   19:*/		return 0x820DDF00;
		  /* 820DDF00h */ case   20:  		/* mr R3, R31 */
		/* 820DDF00h case   20:*/		regs.R3 = regs.R31;
		/* 820DDF00h case   20:*/		return 0x820DDF04;
		  /* 820DDF04h */ case   21:  		/* addi R4, R11, -30508 */
		/* 820DDF04h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88D4);
		/* 820DDF04h case   21:*/		return 0x820DDF08;
		  /* 820DDF08h */ case   22:  		/* bl -15920 */
		/* 820DDF08h case   22:*/		regs.LR = 0x820DDF0C; return 0x820DA0D8;
		/* 820DDF08h case   22:*/		return 0x820DDF0C;
		  /* 820DDF0Ch */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 820DDF0Ch case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDF0Ch case   23:*/		return 0x820DDF10;
	}
	return 0x820DDF10;
} // Block from 820DDEB0h-820DDF10h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820DDF10h
// Function '?EmitRIntEqualSW@C30SWProgramCI@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDF10);
		  /* 820DDF10h */ case    0:  		/* bc 12, CR0_LT, 772 */
		/* 820DDF10h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DDF10h case    0:*/		return 0x820DDF14;
		  /* 820DDF14h */ case    1:  		/* lwz R10, <#[R31]> */
		/* 820DDF14h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820DDF14h case    1:*/		return 0x820DDF18;
		  /* 820DDF18h */ case    2:  		/* lis R11, -32254 */
		/* 820DDF18h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DDF18h case    2:*/		return 0x820DDF1C;
		  /* 820DDF1Ch */ case    3:  		/* li R5, 1 */
		/* 820DDF1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820DDF1Ch case    3:*/		return 0x820DDF20;
		  /* 820DDF20h */ case    4:  		/* addi R25, R11, -30516 */
		/* 820DDF20h case    4:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFF88CC);
		/* 820DDF20h case    4:*/		return 0x820DDF24;
		  /* 820DDF24h */ case    5:  		/* mr R3, R31 */
		/* 820DDF24h case    5:*/		regs.R3 = regs.R31;
		/* 820DDF24h case    5:*/		return 0x820DDF28;
		  /* 820DDF28h */ case    6:  		/* mr R4, R25 */
		/* 820DDF28h case    6:*/		regs.R4 = regs.R25;
		/* 820DDF28h case    6:*/		return 0x820DDF2C;
		  /* 820DDF2Ch */ case    7:  		/* lwz R11, <#[R10 + 408]> */
		/* 820DDF2Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000198) );
		/* 820DDF2Ch case    7:*/		return 0x820DDF30;
		  /* 820DDF30h */ case    8:  		/* mtspr CTR, R11 */
		/* 820DDF30h case    8:*/		regs.CTR = regs.R11;
		/* 820DDF30h case    8:*/		return 0x820DDF34;
		  /* 820DDF34h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 820DDF34h case    9:*/		if ( 1 ) { regs.LR = 0x820DDF38; return (uint32)regs.CTR; }
		/* 820DDF34h case    9:*/		return 0x820DDF38;
		  /* 820DDF38h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DDF38h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDF38h case   10:*/		return 0x820DDF3C;
		  /* 820DDF3Ch */ case   11:  		/* bc 12, CR0_LT, 728 */
		/* 820DDF3Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DDF3Ch case   11:*/		return 0x820DDF40;
		  /* 820DDF40h */ case   12:  		/* lis R11, -32254 */
		/* 820DDF40h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DDF40h case   12:*/		return 0x820DDF44;
		  /* 820DDF44h */ case   13:  		/* mr R3, R31 */
		/* 820DDF44h case   13:*/		regs.R3 = regs.R31;
		/* 820DDF44h case   13:*/		return 0x820DDF48;
		  /* 820DDF48h */ case   14:  		/* addi R4, R11, -30768 */
		/* 820DDF48h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF87D0);
		/* 820DDF48h case   14:*/		return 0x820DDF4C;
		  /* 820DDF4Ch */ case   15:  		/* bl -15988 */
		/* 820DDF4Ch case   15:*/		regs.LR = 0x820DDF50; return 0x820DA0D8;
		/* 820DDF4Ch case   15:*/		return 0x820DDF50;
		  /* 820DDF50h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820DDF50h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDF50h case   16:*/		return 0x820DDF54;
		  /* 820DDF54h */ case   17:  		/* bc 12, CR0_LT, 704 */
		/* 820DDF54h case   17:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DDF54h case   17:*/		return 0x820DDF58;
	}
	return 0x820DDF58;
} // Block from 820DDF10h-820DDF58h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820DDF58h
// Function '?EmitRIntComparisonAnyFalseOp@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDF58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDF58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDF58);
		  /* 820DDF58h */ case    0:  		/* lis R11, -32254 */
		/* 820DDF58h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DDF58h case    0:*/		return 0x820DDF5C;
		  /* 820DDF5Ch */ case    1:  		/* li R30, 0 */
		/* 820DDF5Ch case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DDF5Ch case    1:*/		return 0x820DDF60;
		  /* 820DDF60h */ case    2:  		/* addi R26, R11, -30704 */
		/* 820DDF60h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFF8810);
		/* 820DDF60h case    2:*/		return 0x820DDF64;
		  /* 820DDF64h */ case    3:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DDF64h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DDF64h case    3:*/		return 0x820DDF68;
		  /* 820DDF68h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820DDF68h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DDF68h case    4:*/		return 0x820DDF6C;
		  /* 820DDF6Ch */ case    5:  		/* bc 12, CR6_EQ, 116 */
		/* 820DDF6Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x820DDFE0;  }
		/* 820DDF6Ch case    5:*/		return 0x820DDF70;
		  /* 820DDF70h */ case    6:  		/* lis R11, -32254 */
		/* 820DDF70h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DDF70h case    6:*/		return 0x820DDF74;
		  /* 820DDF74h */ case    7:  		/* addi R29, R11, -29076 */
		/* 820DDF74h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8E6C);
		/* 820DDF74h case    7:*/		return 0x820DDF78;
		  /* 820DDF78h */ case    8:  		/* mr R3, R31 */
		/* 820DDF78h case    8:*/		regs.R3 = regs.R31;
		/* 820DDF78h case    8:*/		return 0x820DDF7C;
		  /* 820DDF7Ch */ case    9:  		/* bl -15820 */
		/* 820DDF7Ch case    9:*/		regs.LR = 0x820DDF80; return 0x820DA1B0;
		/* 820DDF7Ch case    9:*/		return 0x820DDF80;
	}
	return 0x820DDF80;
} // Block from 820DDF58h-820DDF80h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DDF80h
// Function '?EmitNEGFunction@C30SWProgramCI@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDF80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDF80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDF80);
		  /* 820DDF80h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820DDF80h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDF80h case    0:*/		return 0x820DDF84;
		  /* 820DDF84h */ case    1:  		/* bc 12, CR0_LT, 656 */
		/* 820DDF84h case    1:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DDF84h case    1:*/		return 0x820DDF88;
		  /* 820DDF88h */ case    2:  		/* mr R7, R30 */
		/* 820DDF88h case    2:*/		regs.R7 = regs.R30;
		/* 820DDF88h case    2:*/		return 0x820DDF8C;
		  /* 820DDF8Ch */ case    3:  		/* mr R6, R30 */
		/* 820DDF8Ch case    3:*/		regs.R6 = regs.R30;
		/* 820DDF8Ch case    3:*/		return 0x820DDF90;
		  /* 820DDF90h */ case    4:  		/* mr R5, R28 */
		/* 820DDF90h case    4:*/		regs.R5 = regs.R28;
		/* 820DDF90h case    4:*/		return 0x820DDF94;
		  /* 820DDF94h */ case    5:  		/* li R4, 32 */
		/* 820DDF94h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDF94h case    5:*/		return 0x820DDF98;
		  /* 820DDF98h */ case    6:  		/* addi R3, R1, 192 */
		/* 820DDF98h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DDF98h case    6:*/		return 0x820DDF9C;
		  /* 820DDF9Ch */ case    7:  		/* bl -244060 */
		/* 820DDF9Ch case    7:*/		regs.LR = 0x820DDFA0; return 0x820A2640;
		/* 820DDF9Ch case    7:*/		return 0x820DDFA0;
		  /* 820DDFA0h */ case    8:  		/* mr R5, R26 */
		/* 820DDFA0h case    8:*/		regs.R5 = regs.R26;
		/* 820DDFA0h case    8:*/		return 0x820DDFA4;
		  /* 820DDFA4h */ case    9:  		/* mr R6, R30 */
		/* 820DDFA4h case    9:*/		regs.R6 = regs.R30;
		/* 820DDFA4h case    9:*/		return 0x820DDFA8;
		  /* 820DDFA8h */ case   10:  		/* li R4, 32 */
		/* 820DDFA8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DDFA8h case   10:*/		return 0x820DDFAC;
		  /* 820DDFACh */ case   11:  		/* addi R3, R1, 128 */
		/* 820DDFACh case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DDFACh case   11:*/		return 0x820DDFB0;
		  /* 820DDFB0h */ case   12:  		/* bl -244080 */
		/* 820DDFB0h case   12:*/		regs.LR = 0x820DDFB4; return 0x820A2640;
		/* 820DDFB0h case   12:*/		return 0x820DDFB4;
		  /* 820DDFB4h */ case   13:  		/* mr R4, R29 */
		/* 820DDFB4h case   13:*/		regs.R4 = regs.R29;
		/* 820DDFB4h case   13:*/		return 0x820DDFB8;
		  /* 820DDFB8h */ case   14:  		/* addi R6, R1, 192 */
		/* 820DDFB8h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820DDFB8h case   14:*/		return 0x820DDFBC;
		  /* 820DDFBCh */ case   15:  		/* addi R5, R1, 128 */
		/* 820DDFBCh case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DDFBCh case   15:*/		return 0x820DDFC0;
		  /* 820DDFC0h */ case   16:  		/* mr R3, R31 */
		/* 820DDFC0h case   16:*/		regs.R3 = regs.R31;
		/* 820DDFC0h case   16:*/		return 0x820DDFC4;
		  /* 820DDFC4h */ case   17:  		/* bl -16108 */
		/* 820DDFC4h case   17:*/		regs.LR = 0x820DDFC8; return 0x820DA0D8;
		/* 820DDFC4h case   17:*/		return 0x820DDFC8;
		  /* 820DDFC8h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 820DDFC8h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DDFC8h case   18:*/		return 0x820DDFCC;
		  /* 820DDFCCh */ case   19:  		/* bc 12, CR0_LT, 584 */
		/* 820DDFCCh case   19:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DDFCCh case   19:*/		return 0x820DDFD0;
		  /* 820DDFD0h */ case   20:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DDFD0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DDFD0h case   20:*/		return 0x820DDFD4;
		  /* 820DDFD4h */ case   21:  		/* addi R30, R30, 1 */
		/* 820DDFD4h case   21:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DDFD4h case   21:*/		return 0x820DDFD8;
		  /* 820DDFD8h */ case   22:  		/* cmplw CR6, R30, R11 */
		/* 820DDFD8h case   22:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DDFD8h case   22:*/		return 0x820DDFDC;
		  /* 820DDFDCh */ case   23:  		/* bc 12, CR6_LT, -100 */
		/* 820DDFDCh case   23:*/		if ( regs.CR[6].lt ) { return 0x820DDF78;  }
		/* 820DDFDCh case   23:*/		return 0x820DDFE0;
	}
	return 0x820DDFE0;
} // Block from 820DDF80h-820DDFE0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820DDFE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DDFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DDFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DDFE0);
		  /* 820DDFE0h */ case    0:  		/* lis R9, -32254 */
		/* 820DDFE0h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DDFE0h case    0:*/		return 0x820DDFE4;
		  /* 820DDFE4h */ case    1:  		/* lis R10, -32254 */
		/* 820DDFE4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DDFE4h case    1:*/		return 0x820DDFE8;
		  /* 820DDFE8h */ case    2:  		/* li R30, 0 */
		/* 820DDFE8h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DDFE8h case    2:*/		return 0x820DDFEC;
		  /* 820DDFECh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820DDFECh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DDFECh case    3:*/		return 0x820DDFF0;
		  /* 820DDFF0h */ case    4:  		/* addi R29, R9, -29104 */
		/* 820DDFF0h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R9,0xFFFF8E50);
		/* 820DDFF0h case    4:*/		return 0x820DDFF4;
		  /* 820DDFF4h */ case    5:  		/* addi R27, R10, -30488 */
		/* 820DDFF4h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFF88E8);
		/* 820DDFF4h case    5:*/		return 0x820DDFF8;
		  /* 820DDFF8h */ case    6:  		/* bc 12, CR6_EQ, 112 */
		/* 820DDFF8h case    6:*/		if ( regs.CR[6].eq ) { return 0x820DE068;  }
		/* 820DDFF8h case    6:*/		return 0x820DDFFC;
		  /* 820DDFFCh */ case    7:  		/* mr R3, R31 */
		/* 820DDFFCh case    7:*/		regs.R3 = regs.R31;
		/* 820DDFFCh case    7:*/		return 0x820DE000;
		  /* 820DE000h */ case    8:  		/* bl -15952 */
		/* 820DE000h case    8:*/		regs.LR = 0x820DE004; return 0x820DA1B0;
		/* 820DE000h case    8:*/		return 0x820DE004;
		  /* 820DE004h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820DE004h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE004h case    9:*/		return 0x820DE008;
		  /* 820DE008h */ case   10:  		/* bc 12, CR0_LT, 524 */
		/* 820DE008h case   10:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DE008h case   10:*/		return 0x820DE00C;
		  /* 820DE00Ch */ case   11:  		/* mr R7, R30 */
		/* 820DE00Ch case   11:*/		regs.R7 = regs.R30;
		/* 820DE00Ch case   11:*/		return 0x820DE010;
		  /* 820DE010h */ case   12:  		/* mr R6, R30 */
		/* 820DE010h case   12:*/		regs.R6 = regs.R30;
		/* 820DE010h case   12:*/		return 0x820DE014;
		  /* 820DE014h */ case   13:  		/* mr R5, R28 */
		/* 820DE014h case   13:*/		regs.R5 = regs.R28;
		/* 820DE014h case   13:*/		return 0x820DE018;
		  /* 820DE018h */ case   14:  		/* li R4, 32 */
		/* 820DE018h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE018h case   14:*/		return 0x820DE01C;
		  /* 820DE01Ch */ case   15:  		/* addi R3, R1, 192 */
		/* 820DE01Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DE01Ch case   15:*/		return 0x820DE020;
		  /* 820DE020h */ case   16:  		/* bl -244192 */
		/* 820DE020h case   16:*/		regs.LR = 0x820DE024; return 0x820A2640;
		/* 820DE020h case   16:*/		return 0x820DE024;
		  /* 820DE024h */ case   17:  		/* mr R5, R27 */
		/* 820DE024h case   17:*/		regs.R5 = regs.R27;
		/* 820DE024h case   17:*/		return 0x820DE028;
		  /* 820DE028h */ case   18:  		/* mr R6, R30 */
		/* 820DE028h case   18:*/		regs.R6 = regs.R30;
		/* 820DE028h case   18:*/		return 0x820DE02C;
		  /* 820DE02Ch */ case   19:  		/* li R4, 32 */
		/* 820DE02Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE02Ch case   19:*/		return 0x820DE030;
		  /* 820DE030h */ case   20:  		/* addi R3, R1, 224 */
		/* 820DE030h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820DE030h case   20:*/		return 0x820DE034;
		  /* 820DE034h */ case   21:  		/* bl -244212 */
		/* 820DE034h case   21:*/		regs.LR = 0x820DE038; return 0x820A2640;
		/* 820DE034h case   21:*/		return 0x820DE038;
		  /* 820DE038h */ case   22:  		/* mr R7, R25 */
		/* 820DE038h case   22:*/		regs.R7 = regs.R25;
		/* 820DE038h case   22:*/		return 0x820DE03C;
		  /* 820DE03Ch */ case   23:  		/* mr R4, R29 */
		/* 820DE03Ch case   23:*/		regs.R4 = regs.R29;
		/* 820DE03Ch case   23:*/		return 0x820DE040;
		  /* 820DE040h */ case   24:  		/* addi R6, R1, 192 */
		/* 820DE040h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820DE040h case   24:*/		return 0x820DE044;
		  /* 820DE044h */ case   25:  		/* addi R5, R1, 224 */
		/* 820DE044h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 820DE044h case   25:*/		return 0x820DE048;
		  /* 820DE048h */ case   26:  		/* mr R3, R31 */
		/* 820DE048h case   26:*/		regs.R3 = regs.R31;
		/* 820DE048h case   26:*/		return 0x820DE04C;
		  /* 820DE04Ch */ case   27:  		/* bl -16244 */
		/* 820DE04Ch case   27:*/		regs.LR = 0x820DE050; return 0x820DA0D8;
		/* 820DE04Ch case   27:*/		return 0x820DE050;
		  /* 820DE050h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 820DE050h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE050h case   28:*/		return 0x820DE054;
		  /* 820DE054h */ case   29:  		/* bc 12, CR0_LT, 448 */
		/* 820DE054h case   29:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DE054h case   29:*/		return 0x820DE058;
		  /* 820DE058h */ case   30:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE058h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE058h case   30:*/		return 0x820DE05C;
		  /* 820DE05Ch */ case   31:  		/* addi R30, R30, 1 */
		/* 820DE05Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE05Ch case   31:*/		return 0x820DE060;
		  /* 820DE060h */ case   32:  		/* cmplw CR6, R30, R11 */
		/* 820DE060h case   32:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE060h case   32:*/		return 0x820DE064;
		  /* 820DE064h */ case   33:  		/* bc 12, CR6_LT, -104 */
		/* 820DE064h case   33:*/		if ( regs.CR[6].lt ) { return 0x820DDFFC;  }
		/* 820DE064h case   33:*/		return 0x820DE068;
	}
	return 0x820DE068;
} // Block from 820DDFE0h-820DE068h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820DE068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE068);
		  /* 820DE068h */ case    0:  		/* lis R10, -32254 */
		/* 820DE068h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DE068h case    0:*/		return 0x820DE06C;
		  /* 820DE06Ch */ case    1:  		/* li R30, 0 */
		/* 820DE06Ch case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE06Ch case    1:*/		return 0x820DE070;
		  /* 820DE070h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820DE070h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE070h case    2:*/		return 0x820DE074;
		  /* 820DE074h */ case    3:  		/* addi R28, R10, -30716 */
		/* 820DE074h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFF8804);
		/* 820DE074h case    3:*/		return 0x820DE078;
		  /* 820DE078h */ case    4:  		/* bc 12, CR6_EQ, 108 */
		/* 820DE078h case    4:*/		if ( regs.CR[6].eq ) { return 0x820DE0E4;  }
		/* 820DE078h case    4:*/		return 0x820DE07C;
		  /* 820DE07Ch */ case    5:  		/* mr R3, R31 */
		/* 820DE07Ch case    5:*/		regs.R3 = regs.R31;
		/* 820DE07Ch case    5:*/		return 0x820DE080;
		  /* 820DE080h */ case    6:  		/* bl -16080 */
		/* 820DE080h case    6:*/		regs.LR = 0x820DE084; return 0x820DA1B0;
		/* 820DE080h case    6:*/		return 0x820DE084;
		  /* 820DE084h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DE084h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE084h case    7:*/		return 0x820DE088;
		  /* 820DE088h */ case    8:  		/* bc 12, CR0_LT, 396 */
		/* 820DE088h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DE088h case    8:*/		return 0x820DE08C;
		  /* 820DE08Ch */ case    9:  		/* mr R5, R28 */
		/* 820DE08Ch case    9:*/		regs.R5 = regs.R28;
		/* 820DE08Ch case    9:*/		return 0x820DE090;
		  /* 820DE090h */ case   10:  		/* mr R6, R30 */
		/* 820DE090h case   10:*/		regs.R6 = regs.R30;
		/* 820DE090h case   10:*/		return 0x820DE094;
		  /* 820DE094h */ case   11:  		/* li R4, 32 */
		/* 820DE094h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE094h case   11:*/		return 0x820DE098;
		  /* 820DE098h */ case   12:  		/* addi R3, R1, 160 */
		/* 820DE098h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DE098h case   12:*/		return 0x820DE09C;
		  /* 820DE09Ch */ case   13:  		/* bl -244316 */
		/* 820DE09Ch case   13:*/		regs.LR = 0x820DE0A0; return 0x820A2640;
		/* 820DE09Ch case   13:*/		return 0x820DE0A0;
		  /* 820DE0A0h */ case   14:  		/* mr R5, R26 */
		/* 820DE0A0h case   14:*/		regs.R5 = regs.R26;
		/* 820DE0A0h case   14:*/		return 0x820DE0A4;
		  /* 820DE0A4h */ case   15:  		/* mr R6, R30 */
		/* 820DE0A4h case   15:*/		regs.R6 = regs.R30;
		/* 820DE0A4h case   15:*/		return 0x820DE0A8;
		  /* 820DE0A8h */ case   16:  		/* li R4, 32 */
		/* 820DE0A8h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE0A8h case   16:*/		return 0x820DE0AC;
		  /* 820DE0ACh */ case   17:  		/* addi R3, R1, 128 */
		/* 820DE0ACh case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DE0ACh case   17:*/		return 0x820DE0B0;
		  /* 820DE0B0h */ case   18:  		/* bl -244336 */
		/* 820DE0B0h case   18:*/		regs.LR = 0x820DE0B4; return 0x820A2640;
		/* 820DE0B0h case   18:*/		return 0x820DE0B4;
		  /* 820DE0B4h */ case   19:  		/* mr R4, R29 */
		/* 820DE0B4h case   19:*/		regs.R4 = regs.R29;
		/* 820DE0B4h case   19:*/		return 0x820DE0B8;
		  /* 820DE0B8h */ case   20:  		/* addi R7, R1, 128 */
		/* 820DE0B8h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DE0B8h case   20:*/		return 0x820DE0BC;
		  /* 820DE0BCh */ case   21:  		/* addi R6, R1, 128 */
		/* 820DE0BCh case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DE0BCh case   21:*/		return 0x820DE0C0;
		  /* 820DE0C0h */ case   22:  		/* addi R5, R1, 160 */
		/* 820DE0C0h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DE0C0h case   22:*/		return 0x820DE0C4;
		  /* 820DE0C4h */ case   23:  		/* mr R3, R31 */
		/* 820DE0C4h case   23:*/		regs.R3 = regs.R31;
		/* 820DE0C4h case   23:*/		return 0x820DE0C8;
		  /* 820DE0C8h */ case   24:  		/* bl -16368 */
		/* 820DE0C8h case   24:*/		regs.LR = 0x820DE0CC; return 0x820DA0D8;
		/* 820DE0C8h case   24:*/		return 0x820DE0CC;
		  /* 820DE0CCh */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820DE0CCh case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE0CCh case   25:*/		return 0x820DE0D0;
		  /* 820DE0D0h */ case   26:  		/* bc 12, CR0_LT, 324 */
		/* 820DE0D0h case   26:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DE0D0h case   26:*/		return 0x820DE0D4;
		  /* 820DE0D4h */ case   27:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE0D4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE0D4h case   27:*/		return 0x820DE0D8;
		  /* 820DE0D8h */ case   28:  		/* addi R30, R30, 1 */
		/* 820DE0D8h case   28:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE0D8h case   28:*/		return 0x820DE0DC;
		  /* 820DE0DCh */ case   29:  		/* cmplw CR6, R30, R11 */
		/* 820DE0DCh case   29:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE0DCh case   29:*/		return 0x820DE0E0;
		  /* 820DE0E0h */ case   30:  		/* bc 12, CR6_LT, -100 */
		/* 820DE0E0h case   30:*/		if ( regs.CR[6].lt ) { return 0x820DE07C;  }
		/* 820DE0E0h case   30:*/		return 0x820DE0E4;
	}
	return 0x820DE0E4;
} // Block from 820DE068h-820DE0E4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820DE0E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE0E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE0E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE0E4);
		  /* 820DE0E4h */ case    0:  		/* li R30, 0 */
		/* 820DE0E4h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE0E4h case    0:*/		return 0x820DE0E8;
	}
	return 0x820DE0E8;
} // Block from 820DE0E4h-820DE0E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DE0E8h
// Function '?EmitRCPFunction@C30SWProgramCI@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE0E8);
		  /* 820DE0E8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 820DE0E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE0E8h case    0:*/		return 0x820DE0EC;
		  /* 820DE0ECh */ case    1:  		/* bc 12, CR6_EQ, 140 */
		/* 820DE0ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x820DE178;  }
		/* 820DE0ECh case    1:*/		return 0x820DE0F0;
		  /* 820DE0F0h */ case    2:  		/* lis R11, -32254 */
		/* 820DE0F0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE0F0h case    2:*/		return 0x820DE0F4;
		  /* 820DE0F4h */ case    3:  		/* addi R29, R11, -29204 */
		/* 820DE0F4h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8DEC);
		/* 820DE0F4h case    3:*/		return 0x820DE0F8;
		  /* 820DE0F8h */ case    4:  		/* mr R3, R31 */
		/* 820DE0F8h case    4:*/		regs.R3 = regs.R31;
		/* 820DE0F8h case    4:*/		return 0x820DE0FC;
		  /* 820DE0FCh */ case    5:  		/* bl -16204 */
		/* 820DE0FCh case    5:*/		regs.LR = 0x820DE100; return 0x820DA1B0;
		/* 820DE0FCh case    5:*/		return 0x820DE100;
		  /* 820DE100h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DE100h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE100h case    6:*/		return 0x820DE104;
		  /* 820DE104h */ case    7:  		/* bc 12, CR0_LT, 272 */
		/* 820DE104h case    7:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DE104h case    7:*/		return 0x820DE108;
		  /* 820DE108h */ case    8:  		/* mr R5, R28 */
		/* 820DE108h case    8:*/		regs.R5 = regs.R28;
		/* 820DE108h case    8:*/		return 0x820DE10C;
		  /* 820DE10Ch */ case    9:  		/* mr R6, R30 */
		/* 820DE10Ch case    9:*/		regs.R6 = regs.R30;
		/* 820DE10Ch case    9:*/		return 0x820DE110;
		  /* 820DE110h */ case   10:  		/* li R4, 32 */
		/* 820DE110h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE110h case   10:*/		return 0x820DE114;
		  /* 820DE114h */ case   11:  		/* addi R3, R1, 160 */
		/* 820DE114h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DE114h case   11:*/		return 0x820DE118;
		  /* 820DE118h */ case   12:  		/* bl -244440 */
		/* 820DE118h case   12:*/		regs.LR = 0x820DE11C; return 0x820A2640;
		/* 820DE118h case   12:*/		return 0x820DE11C;
		  /* 820DE11Ch */ case   13:  		/* mr R5, R26 */
		/* 820DE11Ch case   13:*/		regs.R5 = regs.R26;
		/* 820DE11Ch case   13:*/		return 0x820DE120;
		  /* 820DE120h */ case   14:  		/* mr R6, R30 */
		/* 820DE120h case   14:*/		regs.R6 = regs.R30;
		/* 820DE120h case   14:*/		return 0x820DE124;
		  /* 820DE124h */ case   15:  		/* li R4, 32 */
		/* 820DE124h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE124h case   15:*/		return 0x820DE128;
		  /* 820DE128h */ case   16:  		/* addi R3, R1, 128 */
		/* 820DE128h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DE128h case   16:*/		return 0x820DE12C;
		  /* 820DE12Ch */ case   17:  		/* bl -244460 */
		/* 820DE12Ch case   17:*/		regs.LR = 0x820DE130; return 0x820A2640;
		/* 820DE12Ch case   17:*/		return 0x820DE130;
		  /* 820DE130h */ case   18:  		/* mr R5, R27 */
		/* 820DE130h case   18:*/		regs.R5 = regs.R27;
		/* 820DE130h case   18:*/		return 0x820DE134;
		  /* 820DE134h */ case   19:  		/* mr R6, R30 */
		/* 820DE134h case   19:*/		regs.R6 = regs.R30;
		/* 820DE134h case   19:*/		return 0x820DE138;
		  /* 820DE138h */ case   20:  		/* li R4, 32 */
		/* 820DE138h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE138h case   20:*/		return 0x820DE13C;
		  /* 820DE13Ch */ case   21:  		/* addi R3, R1, 224 */
		/* 820DE13Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820DE13Ch case   21:*/		return 0x820DE140;
		  /* 820DE140h */ case   22:  		/* bl -244480 */
		/* 820DE140h case   22:*/		regs.LR = 0x820DE144; return 0x820A2640;
		/* 820DE140h case   22:*/		return 0x820DE144;
		  /* 820DE144h */ case   23:  		/* mr R8, R25 */
		/* 820DE144h case   23:*/		regs.R8 = regs.R25;
		/* 820DE144h case   23:*/		return 0x820DE148;
		  /* 820DE148h */ case   24:  		/* mr R4, R29 */
		/* 820DE148h case   24:*/		regs.R4 = regs.R29;
		/* 820DE148h case   24:*/		return 0x820DE14C;
		  /* 820DE14Ch */ case   25:  		/* addi R7, R1, 160 */
		/* 820DE14Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820DE14Ch case   25:*/		return 0x820DE150;
		  /* 820DE150h */ case   26:  		/* addi R6, R1, 224 */
		/* 820DE150h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xE0);
		/* 820DE150h case   26:*/		return 0x820DE154;
		  /* 820DE154h */ case   27:  		/* addi R5, R1, 160 */
		/* 820DE154h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DE154h case   27:*/		return 0x820DE158;
		  /* 820DE158h */ case   28:  		/* mr R3, R31 */
		/* 820DE158h case   28:*/		regs.R3 = regs.R31;
		/* 820DE158h case   28:*/		return 0x820DE15C;
		  /* 820DE15Ch */ case   29:  		/* bl -16516 */
		/* 820DE15Ch case   29:*/		regs.LR = 0x820DE160; return 0x820DA0D8;
		/* 820DE15Ch case   29:*/		return 0x820DE160;
		  /* 820DE160h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 820DE160h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE160h case   30:*/		return 0x820DE164;
		  /* 820DE164h */ case   31:  		/* bc 12, CR0_LT, 176 */
		/* 820DE164h case   31:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DE164h case   31:*/		return 0x820DE168;
		  /* 820DE168h */ case   32:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE168h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE168h case   32:*/		return 0x820DE16C;
		  /* 820DE16Ch */ case   33:  		/* addi R30, R30, 1 */
		/* 820DE16Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE16Ch case   33:*/		return 0x820DE170;
		  /* 820DE170h */ case   34:  		/* cmplw CR6, R30, R11 */
		/* 820DE170h case   34:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE170h case   34:*/		return 0x820DE174;
		  /* 820DE174h */ case   35:  		/* bc 12, CR6_LT, -124 */
		/* 820DE174h case   35:*/		if ( regs.CR[6].lt ) { return 0x820DE0F8;  }
		/* 820DE174h case   35:*/		return 0x820DE178;
	}
	return 0x820DE178;
} // Block from 820DE0E8h-820DE178h (36 instructions)

//////////////////////////////////////////////////////
// Block at 820DE178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE178);
		  /* 820DE178h */ case    0:  		/* li R30, 0 */
		/* 820DE178h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE178h case    0:*/		return 0x820DE17C;
		  /* 820DE17Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DE17Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE17Ch case    1:*/		return 0x820DE180;
		  /* 820DE180h */ case    2:  		/* bc 12, CR6_EQ, 144 */
		/* 820DE180h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DE210;  }
		/* 820DE180h case    2:*/		return 0x820DE184;
		  /* 820DE184h */ case    3:  		/* lis R11, -32254 */
		/* 820DE184h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE184h case    3:*/		return 0x820DE188;
		  /* 820DE188h */ case    4:  		/* addi R29, R11, -29236 */
		/* 820DE188h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8DCC);
		/* 820DE188h case    4:*/		return 0x820DE18C;
		  /* 820DE18Ch */ case    5:  		/* mr R3, R31 */
		/* 820DE18Ch case    5:*/		regs.R3 = regs.R31;
		/* 820DE18Ch case    5:*/		return 0x820DE190;
		  /* 820DE190h */ case    6:  		/* bl -16352 */
		/* 820DE190h case    6:*/		regs.LR = 0x820DE194; return 0x820DA1B0;
		/* 820DE190h case    6:*/		return 0x820DE194;
		  /* 820DE194h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DE194h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE194h case    7:*/		return 0x820DE198;
		  /* 820DE198h */ case    8:  		/* bc 12, CR0_LT, 124 */
		/* 820DE198h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DE198h case    8:*/		return 0x820DE19C;
		  /* 820DE19Ch */ case    9:  		/* mr R7, R30 */
		/* 820DE19Ch case    9:*/		regs.R7 = regs.R30;
		/* 820DE19Ch case    9:*/		return 0x820DE1A0;
		  /* 820DE1A0h */ case   10:  		/* mr R6, R30 */
		/* 820DE1A0h case   10:*/		regs.R6 = regs.R30;
		/* 820DE1A0h case   10:*/		return 0x820DE1A4;
		  /* 820DE1A4h */ case   11:  		/* mr R5, R24 */
		/* 820DE1A4h case   11:*/		regs.R5 = regs.R24;
		/* 820DE1A4h case   11:*/		return 0x820DE1A8;
		  /* 820DE1A8h */ case   12:  		/* li R4, 32 */
		/* 820DE1A8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE1A8h case   12:*/		return 0x820DE1AC;
		  /* 820DE1ACh */ case   13:  		/* addi R3, R1, 256 */
		/* 820DE1ACh case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 820DE1ACh case   13:*/		return 0x820DE1B0;
		  /* 820DE1B0h */ case   14:  		/* bl -244592 */
		/* 820DE1B0h case   14:*/		regs.LR = 0x820DE1B4; return 0x820A2640;
		/* 820DE1B0h case   14:*/		return 0x820DE1B4;
		  /* 820DE1B4h */ case   15:  		/* mr R5, R28 */
		/* 820DE1B4h case   15:*/		regs.R5 = regs.R28;
		/* 820DE1B4h case   15:*/		return 0x820DE1B8;
		  /* 820DE1B8h */ case   16:  		/* mr R6, R30 */
		/* 820DE1B8h case   16:*/		regs.R6 = regs.R30;
		/* 820DE1B8h case   16:*/		return 0x820DE1BC;
		  /* 820DE1BCh */ case   17:  		/* li R4, 32 */
		/* 820DE1BCh case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE1BCh case   17:*/		return 0x820DE1C0;
		  /* 820DE1C0h */ case   18:  		/* addi R3, R1, 160 */
		/* 820DE1C0h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DE1C0h case   18:*/		return 0x820DE1C4;
		  /* 820DE1C4h */ case   19:  		/* bl -244612 */
		/* 820DE1C4h case   19:*/		regs.LR = 0x820DE1C8; return 0x820A2640;
		/* 820DE1C4h case   19:*/		return 0x820DE1C8;
		  /* 820DE1C8h */ case   20:  		/* mr R5, R26 */
		/* 820DE1C8h case   20:*/		regs.R5 = regs.R26;
		/* 820DE1C8h case   20:*/		return 0x820DE1CC;
		  /* 820DE1CCh */ case   21:  		/* mr R6, R30 */
		/* 820DE1CCh case   21:*/		regs.R6 = regs.R30;
		/* 820DE1CCh case   21:*/		return 0x820DE1D0;
		  /* 820DE1D0h */ case   22:  		/* li R4, 32 */
		/* 820DE1D0h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE1D0h case   22:*/		return 0x820DE1D4;
		  /* 820DE1D4h */ case   23:  		/* addi R3, R1, 128 */
		/* 820DE1D4h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DE1D4h case   23:*/		return 0x820DE1D8;
		  /* 820DE1D8h */ case   24:  		/* bl -244632 */
		/* 820DE1D8h case   24:*/		regs.LR = 0x820DE1DC; return 0x820A2640;
		/* 820DE1D8h case   24:*/		return 0x820DE1DC;
		  /* 820DE1DCh */ case   25:  		/* mr R4, R29 */
		/* 820DE1DCh case   25:*/		regs.R4 = regs.R29;
		/* 820DE1DCh case   25:*/		return 0x820DE1E0;
		  /* 820DE1E0h */ case   26:  		/* addi R8, R1, 128 */
		/* 820DE1E0h case   26:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820DE1E0h case   26:*/		return 0x820DE1E4;
		  /* 820DE1E4h */ case   27:  		/* addi R7, R1, 160 */
		/* 820DE1E4h case   27:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820DE1E4h case   27:*/		return 0x820DE1E8;
		  /* 820DE1E8h */ case   28:  		/* addi R6, R1, 128 */
		/* 820DE1E8h case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DE1E8h case   28:*/		return 0x820DE1EC;
		  /* 820DE1ECh */ case   29:  		/* addi R5, R1, 256 */
		/* 820DE1ECh case   29:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 820DE1ECh case   29:*/		return 0x820DE1F0;
		  /* 820DE1F0h */ case   30:  		/* mr R3, R31 */
		/* 820DE1F0h case   30:*/		regs.R3 = regs.R31;
		/* 820DE1F0h case   30:*/		return 0x820DE1F4;
		  /* 820DE1F4h */ case   31:  		/* bl -16668 */
		/* 820DE1F4h case   31:*/		regs.LR = 0x820DE1F8; return 0x820DA0D8;
		/* 820DE1F4h case   31:*/		return 0x820DE1F8;
		  /* 820DE1F8h */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 820DE1F8h case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE1F8h case   32:*/		return 0x820DE1FC;
		  /* 820DE1FCh */ case   33:  		/* bc 12, CR0_LT, 24 */
		/* 820DE1FCh case   33:*/		if ( regs.CR[0].lt ) { return 0x820DE214;  }
		/* 820DE1FCh case   33:*/		return 0x820DE200;
		  /* 820DE200h */ case   34:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE200h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE200h case   34:*/		return 0x820DE204;
		  /* 820DE204h */ case   35:  		/* addi R30, R30, 1 */
		/* 820DE204h case   35:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE204h case   35:*/		return 0x820DE208;
		  /* 820DE208h */ case   36:  		/* cmplw CR6, R30, R11 */
		/* 820DE208h case   36:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE208h case   36:*/		return 0x820DE20C;
		  /* 820DE20Ch */ case   37:  		/* bc 12, CR6_LT, -128 */
		/* 820DE20Ch case   37:*/		if ( regs.CR[6].lt ) { return 0x820DE18C;  }
		/* 820DE20Ch case   37:*/		return 0x820DE210;
	}
	return 0x820DE210;
} // Block from 820DE178h-820DE210h (38 instructions)

//////////////////////////////////////////////////////
// Block at 820DE210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE210);
		  /* 820DE210h */ case    0:  		/* li R3, 0 */
		/* 820DE210h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DE210h case    0:*/		return 0x820DE214;
	}
	return 0x820DE214;
} // Block from 820DE210h-820DE214h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DE214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE214);
		  /* 820DE214h */ case    0:  		/* addi R1, R1, 368 */
		/* 820DE214h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 820DE214h case    0:*/		return 0x820DE218;
		  /* 820DE218h */ case    1:  		/* b -315264 */
		/* 820DE218h case    1:*/		return 0x82091298;
		/* 820DE218h case    1:*/		return 0x820DE21C;
		  /* 820DE21Ch */ case    2:  		/* nop */
		/* 820DE21Ch case    2:*/		cpu::op::nop();
		/* 820DE21Ch case    2:*/		return 0x820DE220;
	}
	return 0x820DE220;
} // Block from 820DE214h-820DE220h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DE220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE220);
		  /* 820DE220h */ case    0:  		/* mfspr R12, LR */
		/* 820DE220h case    0:*/		regs.R12 = regs.LR;
		/* 820DE220h case    0:*/		return 0x820DE224;
		  /* 820DE224h */ case    1:  		/* bl -315352 */
		/* 820DE224h case    1:*/		regs.LR = 0x820DE228; return 0x8209124C;
		/* 820DE224h case    1:*/		return 0x820DE228;
		  /* 820DE228h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 820DE228h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 820DE228h case    2:*/		return 0x820DE22C;
		  /* 820DE22Ch */ case    3:  		/* mr R31, R3 */
		/* 820DE22Ch case    3:*/		regs.R31 = regs.R3;
		/* 820DE22Ch case    3:*/		return 0x820DE230;
		  /* 820DE230h */ case    4:  		/* mr R26, R4 */
		/* 820DE230h case    4:*/		regs.R26 = regs.R4;
		/* 820DE230h case    4:*/		return 0x820DE234;
		  /* 820DE234h */ case    5:  		/* mr R25, R5 */
		/* 820DE234h case    5:*/		regs.R25 = regs.R5;
		/* 820DE234h case    5:*/		return 0x820DE238;
		  /* 820DE238h */ case    6:  		/* bl -16520 */
		/* 820DE238h case    6:*/		regs.LR = 0x820DE23C; return 0x820DA1B0;
		/* 820DE238h case    6:*/		return 0x820DE23C;
		  /* 820DE23Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DE23Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE23Ch case    7:*/		return 0x820DE240;
		  /* 820DE240h */ case    8:  		/* bc 12, CR0_LT, 320 */
		/* 820DE240h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DE380;  }
		/* 820DE240h case    8:*/		return 0x820DE244;
		  /* 820DE244h */ case    9:  		/* lis R11, -32254 */
		/* 820DE244h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE244h case    9:*/		return 0x820DE248;
		  /* 820DE248h */ case   10:  		/* mr R3, R31 */
		/* 820DE248h case   10:*/		regs.R3 = regs.R31;
		/* 820DE248h case   10:*/		return 0x820DE24C;
		  /* 820DE24Ch */ case   11:  		/* addi R4, R11, -30508 */
		/* 820DE24Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88D4);
		/* 820DE24Ch case   11:*/		return 0x820DE250;
		  /* 820DE250h */ case   12:  		/* bl -16760 */
		/* 820DE250h case   12:*/		regs.LR = 0x820DE254; return 0x820DA0D8;
		/* 820DE250h case   12:*/		return 0x820DE254;
		  /* 820DE254h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DE254h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE254h case   13:*/		return 0x820DE258;
		  /* 820DE258h */ case   14:  		/* bc 12, CR0_LT, 296 */
		/* 820DE258h case   14:*/		if ( regs.CR[0].lt ) { return 0x820DE380;  }
		/* 820DE258h case   14:*/		return 0x820DE25C;
		  /* 820DE25Ch */ case   15:  		/* lwz R11, <#[R31]> */
		/* 820DE25Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DE25Ch case   15:*/		return 0x820DE260;
		  /* 820DE260h */ case   16:  		/* lis R10, -32254 */
		/* 820DE260h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DE260h case   16:*/		return 0x820DE264;
		  /* 820DE264h */ case   17:  		/* li R8, 1 */
		/* 820DE264h case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820DE264h case   17:*/		return 0x820DE268;
		  /* 820DE268h */ case   18:  		/* addi R4, R10, -30436 */
		/* 820DE268h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF891C);
		/* 820DE268h case   18:*/		return 0x820DE26C;
		  /* 820DE26Ch */ case   19:  		/* li R7, 1 */
		/* 820DE26Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820DE26Ch case   19:*/		return 0x820DE270;
		  /* 820DE270h */ case   20:  		/* li R6, 1 */
		/* 820DE270h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820DE270h case   20:*/		return 0x820DE274;
		  /* 820DE274h */ case   21:  		/* lwz R11, <#[R11 + 388]> */
		/* 820DE274h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820DE274h case   21:*/		return 0x820DE278;
		  /* 820DE278h */ case   22:  		/* li R5, 1 */
		/* 820DE278h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820DE278h case   22:*/		return 0x820DE27C;
		  /* 820DE27Ch */ case   23:  		/* mr R3, R31 */
		/* 820DE27Ch case   23:*/		regs.R3 = regs.R31;
		/* 820DE27Ch case   23:*/		return 0x820DE280;
		  /* 820DE280h */ case   24:  		/* mtspr CTR, R11 */
		/* 820DE280h case   24:*/		regs.CTR = regs.R11;
		/* 820DE280h case   24:*/		return 0x820DE284;
		  /* 820DE284h */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 820DE284h case   25:*/		if ( 1 ) { regs.LR = 0x820DE288; return (uint32)regs.CTR; }
		/* 820DE284h case   25:*/		return 0x820DE288;
		  /* 820DE288h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820DE288h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE288h case   26:*/		return 0x820DE28C;
		  /* 820DE28Ch */ case   27:  		/* bc 12, CR0_LT, 244 */
		/* 820DE28Ch case   27:*/		if ( regs.CR[0].lt ) { return 0x820DE380;  }
		/* 820DE28Ch case   27:*/		return 0x820DE290;
		  /* 820DE290h */ case   28:  		/* lis R11, -32254 */
		/* 820DE290h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE290h case   28:*/		return 0x820DE294;
		  /* 820DE294h */ case   29:  		/* mr R3, R31 */
		/* 820DE294h case   29:*/		regs.R3 = regs.R31;
		/* 820DE294h case   29:*/		return 0x820DE298;
		  /* 820DE298h */ case   30:  		/* addi R27, R11, -30768 */
		/* 820DE298h case   30:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFF87D0);
		/* 820DE298h case   30:*/		return 0x820DE29C;
		  /* 820DE29Ch */ case   31:  		/* mr R4, R27 */
		/* 820DE29Ch case   31:*/		regs.R4 = regs.R27;
		/* 820DE29Ch case   31:*/		return 0x820DE2A0;
		  /* 820DE2A0h */ case   32:  		/* bl -16840 */
		/* 820DE2A0h case   32:*/		regs.LR = 0x820DE2A4; return 0x820DA0D8;
		/* 820DE2A0h case   32:*/		return 0x820DE2A4;
		  /* 820DE2A4h */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 820DE2A4h case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE2A4h case   33:*/		return 0x820DE2A8;
		  /* 820DE2A8h */ case   34:  		/* bc 12, CR0_LT, 216 */
		/* 820DE2A8h case   34:*/		if ( regs.CR[0].lt ) { return 0x820DE380;  }
		/* 820DE2A8h case   34:*/		return 0x820DE2AC;
		  /* 820DE2ACh */ case   35:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE2ACh case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE2ACh case   35:*/		return 0x820DE2B0;
		  /* 820DE2B0h */ case   36:  		/* li R30, 0 */
		/* 820DE2B0h case   36:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE2B0h case   36:*/		return 0x820DE2B4;
		  /* 820DE2B4h */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 820DE2B4h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE2B4h case   37:*/		return 0x820DE2B8;
		  /* 820DE2B8h */ case   38:  		/* bc 4, CR6_GT, 196 */
		/* 820DE2B8h case   38:*/		if ( !regs.CR[6].gt ) { return 0x820DE37C;  }
		/* 820DE2B8h case   38:*/		return 0x820DE2BC;
		  /* 820DE2BCh */ case   39:  		/* lis R10, -32254 */
		/* 820DE2BCh case   39:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DE2BCh case   39:*/		return 0x820DE2C0;
		  /* 820DE2C0h */ case   40:  		/* lis R11, -32254 */
		/* 820DE2C0h case   40:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE2C0h case   40:*/		return 0x820DE2C4;
		  /* 820DE2C4h */ case   41:  		/* addi R29, R10, -30516 */
		/* 820DE2C4h case   41:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFF88CC);
		/* 820DE2C4h case   41:*/		return 0x820DE2C8;
		  /* 820DE2C8h */ case   42:  		/* addi R28, R11, -30692 */
		/* 820DE2C8h case   42:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFF881C);
		/* 820DE2C8h case   42:*/		return 0x820DE2CC;
		  /* 820DE2CCh */ case   43:  		/* mr R3, R31 */
		/* 820DE2CCh case   43:*/		regs.R3 = regs.R31;
		/* 820DE2CCh case   43:*/		return 0x820DE2D0;
		  /* 820DE2D0h */ case   44:  		/* bl -16672 */
		/* 820DE2D0h case   44:*/		regs.LR = 0x820DE2D4; return 0x820DA1B0;
		/* 820DE2D0h case   44:*/		return 0x820DE2D4;
		  /* 820DE2D4h */ case   45:  		/* cmpwi CR0, R3, 0 */
		/* 820DE2D4h case   45:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE2D4h case   45:*/		return 0x820DE2D8;
		  /* 820DE2D8h */ case   46:  		/* bc 12, CR0_LT, 168 */
		/* 820DE2D8h case   46:*/		if ( regs.CR[0].lt ) { return 0x820DE380;  }
		/* 820DE2D8h case   46:*/		return 0x820DE2DC;
		  /* 820DE2DCh */ case   47:  		/* mr R7, R30 */
		/* 820DE2DCh case   47:*/		regs.R7 = regs.R30;
		/* 820DE2DCh case   47:*/		return 0x820DE2E0;
		  /* 820DE2E0h */ case   48:  		/* mr R6, R30 */
		/* 820DE2E0h case   48:*/		regs.R6 = regs.R30;
		/* 820DE2E0h case   48:*/		return 0x820DE2E4;
		  /* 820DE2E4h */ case   49:  		/* mr R5, R26 */
		/* 820DE2E4h case   49:*/		regs.R5 = regs.R26;
		/* 820DE2E4h case   49:*/		return 0x820DE2E8;
		  /* 820DE2E8h */ case   50:  		/* li R4, 32 */
		/* 820DE2E8h case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE2E8h case   50:*/		return 0x820DE2EC;
		  /* 820DE2ECh */ case   51:  		/* addi R3, R1, 128 */
		/* 820DE2ECh case   51:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DE2ECh case   51:*/		return 0x820DE2F0;
		  /* 820DE2F0h */ case   52:  		/* bl -244912 */
		/* 820DE2F0h case   52:*/		regs.LR = 0x820DE2F4; return 0x820A2640;
		/* 820DE2F0h case   52:*/		return 0x820DE2F4;
		  /* 820DE2F4h */ case   53:  		/* mr R7, R30 */
		/* 820DE2F4h case   53:*/		regs.R7 = regs.R30;
		/* 820DE2F4h case   53:*/		return 0x820DE2F8;
		  /* 820DE2F8h */ case   54:  		/* mr R6, R30 */
		/* 820DE2F8h case   54:*/		regs.R6 = regs.R30;
		/* 820DE2F8h case   54:*/		return 0x820DE2FC;
		  /* 820DE2FCh */ case   55:  		/* mr R5, R25 */
		/* 820DE2FCh case   55:*/		regs.R5 = regs.R25;
		/* 820DE2FCh case   55:*/		return 0x820DE300;
		  /* 820DE300h */ case   56:  		/* li R4, 32 */
		/* 820DE300h case   56:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE300h case   56:*/		return 0x820DE304;
		  /* 820DE304h */ case   57:  		/* addi R3, R1, 160 */
		/* 820DE304h case   57:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DE304h case   57:*/		return 0x820DE308;
		  /* 820DE308h */ case   58:  		/* bl -244936 */
		/* 820DE308h case   58:*/		regs.LR = 0x820DE30C; return 0x820A2640;
		/* 820DE308h case   58:*/		return 0x820DE30C;
		  /* 820DE30Ch */ case   59:  		/* mr R3, R31 */
		/* 820DE30Ch case   59:*/		regs.R3 = regs.R31;
		/* 820DE30Ch case   59:*/		return 0x820DE310;
		  /* 820DE310h */ case   60:  		/* bl -16736 */
		/* 820DE310h case   60:*/		regs.LR = 0x820DE314; return 0x820DA1B0;
		/* 820DE310h case   60:*/		return 0x820DE314;
		  /* 820DE314h */ case   61:  		/* cmpwi CR0, R3, 0 */
		/* 820DE314h case   61:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE314h case   61:*/		return 0x820DE318;
		  /* 820DE318h */ case   62:  		/* bc 12, CR0_LT, 104 */
		/* 820DE318h case   62:*/		if ( regs.CR[0].lt ) { return 0x820DE380;  }
		/* 820DE318h case   62:*/		return 0x820DE31C;
		  /* 820DE31Ch */ case   63:  		/* mr R4, R28 */
		/* 820DE31Ch case   63:*/		regs.R4 = regs.R28;
		/* 820DE31Ch case   63:*/		return 0x820DE320;
		  /* 820DE320h */ case   64:  		/* addi R5, R1, 128 */
		/* 820DE320h case   64:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DE320h case   64:*/		return 0x820DE324;
		  /* 820DE324h */ case   65:  		/* mr R3, R31 */
		/* 820DE324h case   65:*/		regs.R3 = regs.R31;
		/* 820DE324h case   65:*/		return 0x820DE328;
		  /* 820DE328h */ case   66:  		/* bl -16976 */
		/* 820DE328h case   66:*/		regs.LR = 0x820DE32C; return 0x820DA0D8;
		/* 820DE328h case   66:*/		return 0x820DE32C;
		  /* 820DE32Ch */ case   67:  		/* cmpwi CR0, R3, 0 */
		/* 820DE32Ch case   67:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE32Ch case   67:*/		return 0x820DE330;
		  /* 820DE330h */ case   68:  		/* bc 12, CR0_LT, 80 */
		/* 820DE330h case   68:*/		if ( regs.CR[0].lt ) { return 0x820DE380;  }
		/* 820DE330h case   68:*/		return 0x820DE334;
		  /* 820DE334h */ case   69:  		/* lwz R11, <#[R31]> */
		/* 820DE334h case   69:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DE334h case   69:*/		return 0x820DE338;
		  /* 820DE338h */ case   70:  		/* mr R5, R29 */
		/* 820DE338h case   70:*/		regs.R5 = regs.R29;
		/* 820DE338h case   70:*/		return 0x820DE33C;
		  /* 820DE33Ch */ case   71:  		/* addi R4, R1, 160 */
		/* 820DE33Ch case   71:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820DE33Ch case   71:*/		return 0x820DE340;
		  /* 820DE340h */ case   72:  		/* mr R3, R31 */
		/* 820DE340h case   72:*/		regs.R3 = regs.R31;
		/* 820DE340h case   72:*/		return 0x820DE344;
		  /* 820DE344h */ case   73:  		/* lwz R11, <#[R11 + 456]> */
		/* 820DE344h case   73:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001C8) );
		/* 820DE344h case   73:*/		return 0x820DE348;
		  /* 820DE348h */ case   74:  		/* mtspr CTR, R11 */
		/* 820DE348h case   74:*/		regs.CTR = regs.R11;
		/* 820DE348h case   74:*/		return 0x820DE34C;
		  /* 820DE34Ch */ case   75:  		/* bcctrl 20, CR0_LT */
		/* 820DE34Ch case   75:*/		if ( 1 ) { regs.LR = 0x820DE350; return (uint32)regs.CTR; }
		/* 820DE34Ch case   75:*/		return 0x820DE350;
		  /* 820DE350h */ case   76:  		/* cmpwi CR0, R3, 0 */
		/* 820DE350h case   76:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE350h case   76:*/		return 0x820DE354;
		  /* 820DE354h */ case   77:  		/* bc 12, CR0_LT, 44 */
		/* 820DE354h case   77:*/		if ( regs.CR[0].lt ) { return 0x820DE380;  }
		/* 820DE354h case   77:*/		return 0x820DE358;
		  /* 820DE358h */ case   78:  		/* mr R4, R27 */
		/* 820DE358h case   78:*/		regs.R4 = regs.R27;
		/* 820DE358h case   78:*/		return 0x820DE35C;
		  /* 820DE35Ch */ case   79:  		/* mr R3, R31 */
		/* 820DE35Ch case   79:*/		regs.R3 = regs.R31;
		/* 820DE35Ch case   79:*/		return 0x820DE360;
		  /* 820DE360h */ case   80:  		/* bl -17032 */
		/* 820DE360h case   80:*/		regs.LR = 0x820DE364; return 0x820DA0D8;
		/* 820DE360h case   80:*/		return 0x820DE364;
		  /* 820DE364h */ case   81:  		/* cmpwi CR0, R3, 0 */
		/* 820DE364h case   81:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE364h case   81:*/		return 0x820DE368;
		  /* 820DE368h */ case   82:  		/* bc 12, CR0_LT, 24 */
		/* 820DE368h case   82:*/		if ( regs.CR[0].lt ) { return 0x820DE380;  }
		/* 820DE368h case   82:*/		return 0x820DE36C;
		  /* 820DE36Ch */ case   83:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE36Ch case   83:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE36Ch case   83:*/		return 0x820DE370;
		  /* 820DE370h */ case   84:  		/* addi R30, R30, 1 */
		/* 820DE370h case   84:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE370h case   84:*/		return 0x820DE374;
		  /* 820DE374h */ case   85:  		/* cmplw CR6, R30, R11 */
		/* 820DE374h case   85:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE374h case   85:*/		return 0x820DE378;
		  /* 820DE378h */ case   86:  		/* bc 12, CR6_LT, -172 */
		/* 820DE378h case   86:*/		if ( regs.CR[6].lt ) { return 0x820DE2CC;  }
		/* 820DE378h case   86:*/		return 0x820DE37C;
	}
	return 0x820DE37C;
} // Block from 820DE220h-820DE37Ch (87 instructions)

//////////////////////////////////////////////////////
// Block at 820DE37Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE37C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE37C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE37C);
		  /* 820DE37Ch */ case    0:  		/* li R3, 0 */
		/* 820DE37Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DE37Ch case    0:*/		return 0x820DE380;
	}
	return 0x820DE380;
} // Block from 820DE37Ch-820DE380h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DE380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE380);
		  /* 820DE380h */ case    0:  		/* addi R1, R1, 256 */
		/* 820DE380h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 820DE380h case    0:*/		return 0x820DE384;
		  /* 820DE384h */ case    1:  		/* b -315624 */
		/* 820DE384h case    1:*/		return 0x8209129C;
		/* 820DE384h case    1:*/		return 0x820DE388;
	}
	return 0x820DE388;
} // Block from 820DE380h-820DE388h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DE388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE388);
		  /* 820DE388h */ case    0:  		/* mfspr R12, LR */
		/* 820DE388h case    0:*/		regs.R12 = regs.LR;
		/* 820DE388h case    0:*/		return 0x820DE38C;
		  /* 820DE38Ch */ case    1:  		/* bl -315728 */
		/* 820DE38Ch case    1:*/		regs.LR = 0x820DE390; return 0x8209123C;
		/* 820DE38Ch case    1:*/		return 0x820DE390;
		  /* 820DE390h */ case    2:  		/* stwu R1, <#[R1 - 416]> */
		/* 820DE390h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 820DE390h case    2:*/		return 0x820DE394;
		  /* 820DE394h */ case    3:  		/* mr R31, R3 */
		/* 820DE394h case    3:*/		regs.R31 = regs.R3;
		/* 820DE394h case    3:*/		return 0x820DE398;
		  /* 820DE398h */ case    4:  		/* mr R21, R4 */
		/* 820DE398h case    4:*/		regs.R21 = regs.R4;
		/* 820DE398h case    4:*/		return 0x820DE39C;
		  /* 820DE39Ch */ case    5:  		/* mr R22, R5 */
		/* 820DE39Ch case    5:*/		regs.R22 = regs.R5;
		/* 820DE39Ch case    5:*/		return 0x820DE3A0;
		  /* 820DE3A0h */ case    6:  		/* bl -16880 */
		/* 820DE3A0h case    6:*/		regs.LR = 0x820DE3A4; return 0x820DA1B0;
		/* 820DE3A0h case    6:*/		return 0x820DE3A4;
		  /* 820DE3A4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DE3A4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE3A4h case    7:*/		return 0x820DE3A8;
		  /* 820DE3A8h */ case    8:  		/* bc 12, CR0_LT, 1484 */
		/* 820DE3A8h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE3A8h case    8:*/		return 0x820DE3AC;
		  /* 820DE3ACh */ case    9:  		/* lis R11, -32254 */
		/* 820DE3ACh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE3ACh case    9:*/		return 0x820DE3B0;
		  /* 820DE3B0h */ case   10:  		/* mr R3, R31 */
		/* 820DE3B0h case   10:*/		regs.R3 = regs.R31;
		/* 820DE3B0h case   10:*/		return 0x820DE3B4;
		  /* 820DE3B4h */ case   11:  		/* addi R4, R11, -29052 */
		/* 820DE3B4h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8E84);
		/* 820DE3B4h case   11:*/		return 0x820DE3B8;
		  /* 820DE3B8h */ case   12:  		/* bl -17120 */
		/* 820DE3B8h case   12:*/		regs.LR = 0x820DE3BC; return 0x820DA0D8;
		/* 820DE3B8h case   12:*/		return 0x820DE3BC;
		  /* 820DE3BCh */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DE3BCh case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE3BCh case   13:*/		return 0x820DE3C0;
		  /* 820DE3C0h */ case   14:  		/* bc 12, CR0_LT, 1460 */
		/* 820DE3C0h case   14:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE3C0h case   14:*/		return 0x820DE3C4;
		  /* 820DE3C4h */ case   15:  		/* lwz R9, <#[R31 + 1816]> */
		/* 820DE3C4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE3C4h case   15:*/		return 0x820DE3C8;
		  /* 820DE3C8h */ case   16:  		/* lis R11, -32254 */
		/* 820DE3C8h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE3C8h case   16:*/		return 0x820DE3CC;
		  /* 820DE3CCh */ case   17:  		/* lis R10, -32254 */
		/* 820DE3CCh case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DE3CCh case   17:*/		return 0x820DE3D0;
		  /* 820DE3D0h */ case   18:  		/* li R30, 0 */
		/* 820DE3D0h case   18:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE3D0h case   18:*/		return 0x820DE3D4;
		  /* 820DE3D4h */ case   19:  		/* addi R26, R11, -28984 */
		/* 820DE3D4h case   19:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFF8EC8);
		/* 820DE3D4h case   19:*/		return 0x820DE3D8;
		  /* 820DE3D8h */ case   20:  		/* addi R25, R10, -30704 */
		/* 820DE3D8h case   20:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0xFFFF8810);
		/* 820DE3D8h case   20:*/		return 0x820DE3DC;
		  /* 820DE3DCh */ case   21:  		/* cmplwi CR6, R9, 0 */
		/* 820DE3DCh case   21:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820DE3DCh case   21:*/		return 0x820DE3E0;
		  /* 820DE3E0h */ case   22:  		/* bc 4, CR6_GT, 112 */
		/* 820DE3E0h case   22:*/		if ( !regs.CR[6].gt ) { return 0x820DE450;  }
		/* 820DE3E0h case   22:*/		return 0x820DE3E4;
		  /* 820DE3E4h */ case   23:  		/* mr R3, R31 */
		/* 820DE3E4h case   23:*/		regs.R3 = regs.R31;
		/* 820DE3E4h case   23:*/		return 0x820DE3E8;
		  /* 820DE3E8h */ case   24:  		/* bl -16952 */
		/* 820DE3E8h case   24:*/		regs.LR = 0x820DE3EC; return 0x820DA1B0;
		/* 820DE3E8h case   24:*/		return 0x820DE3EC;
		  /* 820DE3ECh */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820DE3ECh case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE3ECh case   25:*/		return 0x820DE3F0;
		  /* 820DE3F0h */ case   26:  		/* bc 12, CR0_LT, 1412 */
		/* 820DE3F0h case   26:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE3F0h case   26:*/		return 0x820DE3F4;
		  /* 820DE3F4h */ case   27:  		/* mr R7, R30 */
		/* 820DE3F4h case   27:*/		regs.R7 = regs.R30;
		/* 820DE3F4h case   27:*/		return 0x820DE3F8;
		  /* 820DE3F8h */ case   28:  		/* mr R6, R30 */
		/* 820DE3F8h case   28:*/		regs.R6 = regs.R30;
		/* 820DE3F8h case   28:*/		return 0x820DE3FC;
		  /* 820DE3FCh */ case   29:  		/* mr R5, R22 */
		/* 820DE3FCh case   29:*/		regs.R5 = regs.R22;
		/* 820DE3FCh case   29:*/		return 0x820DE400;
		  /* 820DE400h */ case   30:  		/* li R4, 32 */
		/* 820DE400h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE400h case   30:*/		return 0x820DE404;
		  /* 820DE404h */ case   31:  		/* addi R3, R1, 192 */
		/* 820DE404h case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DE404h case   31:*/		return 0x820DE408;
		  /* 820DE408h */ case   32:  		/* bl -245192 */
		/* 820DE408h case   32:*/		regs.LR = 0x820DE40C; return 0x820A2640;
		/* 820DE408h case   32:*/		return 0x820DE40C;
		  /* 820DE40Ch */ case   33:  		/* mr R5, R25 */
		/* 820DE40Ch case   33:*/		regs.R5 = regs.R25;
		/* 820DE40Ch case   33:*/		return 0x820DE410;
		  /* 820DE410h */ case   34:  		/* mr R6, R30 */
		/* 820DE410h case   34:*/		regs.R6 = regs.R30;
		/* 820DE410h case   34:*/		return 0x820DE414;
		  /* 820DE414h */ case   35:  		/* li R4, 32 */
		/* 820DE414h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE414h case   35:*/		return 0x820DE418;
		  /* 820DE418h */ case   36:  		/* addi R3, R1, 128 */
		/* 820DE418h case   36:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DE418h case   36:*/		return 0x820DE41C;
		  /* 820DE41Ch */ case   37:  		/* bl -245212 */
		/* 820DE41Ch case   37:*/		regs.LR = 0x820DE420; return 0x820A2640;
		/* 820DE41Ch case   37:*/		return 0x820DE420;
		  /* 820DE420h */ case   38:  		/* mr R4, R26 */
		/* 820DE420h case   38:*/		regs.R4 = regs.R26;
		/* 820DE420h case   38:*/		return 0x820DE424;
		  /* 820DE424h */ case   39:  		/* addi R7, R1, 192 */
		/* 820DE424h case   39:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC0);
		/* 820DE424h case   39:*/		return 0x820DE428;
		  /* 820DE428h */ case   40:  		/* addi R6, R1, 192 */
		/* 820DE428h case   40:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820DE428h case   40:*/		return 0x820DE42C;
		  /* 820DE42Ch */ case   41:  		/* addi R5, R1, 128 */
		/* 820DE42Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DE42Ch case   41:*/		return 0x820DE430;
		  /* 820DE430h */ case   42:  		/* mr R3, R31 */
		/* 820DE430h case   42:*/		regs.R3 = regs.R31;
		/* 820DE430h case   42:*/		return 0x820DE434;
		  /* 820DE434h */ case   43:  		/* bl -17244 */
		/* 820DE434h case   43:*/		regs.LR = 0x820DE438; return 0x820DA0D8;
		/* 820DE434h case   43:*/		return 0x820DE438;
		  /* 820DE438h */ case   44:  		/* cmpwi CR0, R3, 0 */
		/* 820DE438h case   44:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE438h case   44:*/		return 0x820DE43C;
		  /* 820DE43Ch */ case   45:  		/* bc 12, CR0_LT, 1336 */
		/* 820DE43Ch case   45:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE43Ch case   45:*/		return 0x820DE440;
		  /* 820DE440h */ case   46:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE440h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE440h case   46:*/		return 0x820DE444;
		  /* 820DE444h */ case   47:  		/* addi R30, R30, 1 */
		/* 820DE444h case   47:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE444h case   47:*/		return 0x820DE448;
		  /* 820DE448h */ case   48:  		/* cmplw CR6, R30, R11 */
		/* 820DE448h case   48:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE448h case   48:*/		return 0x820DE44C;
		  /* 820DE44Ch */ case   49:  		/* bc 12, CR6_LT, -104 */
		/* 820DE44Ch case   49:*/		if ( regs.CR[6].lt ) { return 0x820DE3E4;  }
		/* 820DE44Ch case   49:*/		return 0x820DE450;
	}
	return 0x820DE450;
} // Block from 820DE388h-820DE450h (50 instructions)

//////////////////////////////////////////////////////
// Block at 820DE450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE450);
		  /* 820DE450h */ case    0:  		/* mr R3, R31 */
		/* 820DE450h case    0:*/		regs.R3 = regs.R31;
		/* 820DE450h case    0:*/		return 0x820DE454;
		  /* 820DE454h */ case    1:  		/* bl -17060 */
		/* 820DE454h case    1:*/		regs.LR = 0x820DE458; return 0x820DA1B0;
		/* 820DE454h case    1:*/		return 0x820DE458;
		  /* 820DE458h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DE458h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE458h case    2:*/		return 0x820DE45C;
		  /* 820DE45Ch */ case    3:  		/* bc 12, CR0_LT, 1304 */
		/* 820DE45Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE45Ch case    3:*/		return 0x820DE460;
		  /* 820DE460h */ case    4:  		/* lis R11, -32254 */
		/* 820DE460h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE460h case    4:*/		return 0x820DE464;
		  /* 820DE464h */ case    5:  		/* mr R3, R31 */
		/* 820DE464h case    5:*/		regs.R3 = regs.R31;
		/* 820DE464h case    5:*/		return 0x820DE468;
		  /* 820DE468h */ case    6:  		/* addi R4, R11, -30508 */
		/* 820DE468h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88D4);
		/* 820DE468h case    6:*/		return 0x820DE46C;
		  /* 820DE46Ch */ case    7:  		/* bl -17300 */
		/* 820DE46Ch case    7:*/		regs.LR = 0x820DE470; return 0x820DA0D8;
		/* 820DE46Ch case    7:*/		return 0x820DE470;
		  /* 820DE470h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DE470h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE470h case    8:*/		return 0x820DE474;
		  /* 820DE474h */ case    9:  		/* bc 12, CR0_LT, 1280 */
		/* 820DE474h case    9:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE474h case    9:*/		return 0x820DE478;
		  /* 820DE478h */ case   10:  		/* lwz R10, <#[R31]> */
		/* 820DE478h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820DE478h case   10:*/		return 0x820DE47C;
		  /* 820DE47Ch */ case   11:  		/* lis R11, -32254 */
		/* 820DE47Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE47Ch case   11:*/		return 0x820DE480;
		  /* 820DE480h */ case   12:  		/* li R5, 1 */
		/* 820DE480h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820DE480h case   12:*/		return 0x820DE484;
		  /* 820DE484h */ case   13:  		/* addi R23, R11, -30516 */
		/* 820DE484h case   13:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0xFFFF88CC);
		/* 820DE484h case   13:*/		return 0x820DE488;
		  /* 820DE488h */ case   14:  		/* mr R3, R31 */
		/* 820DE488h case   14:*/		regs.R3 = regs.R31;
		/* 820DE488h case   14:*/		return 0x820DE48C;
		  /* 820DE48Ch */ case   15:  		/* mr R4, R23 */
		/* 820DE48Ch case   15:*/		regs.R4 = regs.R23;
		/* 820DE48Ch case   15:*/		return 0x820DE490;
		  /* 820DE490h */ case   16:  		/* lwz R11, <#[R10 + 408]> */
		/* 820DE490h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000198) );
		/* 820DE490h case   16:*/		return 0x820DE494;
		  /* 820DE494h */ case   17:  		/* mtspr CTR, R11 */
		/* 820DE494h case   17:*/		regs.CTR = regs.R11;
		/* 820DE494h case   17:*/		return 0x820DE498;
		  /* 820DE498h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 820DE498h case   18:*/		if ( 1 ) { regs.LR = 0x820DE49C; return (uint32)regs.CTR; }
		/* 820DE498h case   18:*/		return 0x820DE49C;
		  /* 820DE49Ch */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820DE49Ch case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE49Ch case   19:*/		return 0x820DE4A0;
		  /* 820DE4A0h */ case   20:  		/* bc 12, CR0_LT, 1236 */
		/* 820DE4A0h case   20:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE4A0h case   20:*/		return 0x820DE4A4;
		  /* 820DE4A4h */ case   21:  		/* lis R11, -32254 */
		/* 820DE4A4h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE4A4h case   21:*/		return 0x820DE4A8;
		  /* 820DE4A8h */ case   22:  		/* mr R3, R31 */
		/* 820DE4A8h case   22:*/		regs.R3 = regs.R31;
		/* 820DE4A8h case   22:*/		return 0x820DE4AC;
		  /* 820DE4ACh */ case   23:  		/* addi R4, R11, -30768 */
		/* 820DE4ACh case   23:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF87D0);
		/* 820DE4ACh case   23:*/		return 0x820DE4B0;
		  /* 820DE4B0h */ case   24:  		/* bl -17368 */
		/* 820DE4B0h case   24:*/		regs.LR = 0x820DE4B4; return 0x820DA0D8;
		/* 820DE4B0h case   24:*/		return 0x820DE4B4;
		  /* 820DE4B4h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820DE4B4h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE4B4h case   25:*/		return 0x820DE4B8;
		  /* 820DE4B8h */ case   26:  		/* bc 12, CR0_LT, 1212 */
		/* 820DE4B8h case   26:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE4B8h case   26:*/		return 0x820DE4BC;
		  /* 820DE4BCh */ case   27:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE4BCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE4BCh case   27:*/		return 0x820DE4C0;
		  /* 820DE4C0h */ case   28:  		/* lis R10, -32254 */
		/* 820DE4C0h case   28:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DE4C0h case   28:*/		return 0x820DE4C4;
		  /* 820DE4C4h */ case   29:  		/* li R30, 0 */
		/* 820DE4C4h case   29:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE4C4h case   29:*/		return 0x820DE4C8;
		  /* 820DE4C8h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 820DE4C8h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE4C8h case   30:*/		return 0x820DE4CC;
		  /* 820DE4CCh */ case   31:  		/* addi R24, R10, -30488 */
		/* 820DE4CCh case   31:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0xFFFF88E8);
		/* 820DE4CCh case   31:*/		return 0x820DE4D0;
		  /* 820DE4D0h */ case   32:  		/* bc 12, CR6_EQ, 112 */
		/* 820DE4D0h case   32:*/		if ( regs.CR[6].eq ) { return 0x820DE540;  }
		/* 820DE4D0h case   32:*/		return 0x820DE4D4;
		  /* 820DE4D4h */ case   33:  		/* lis R11, -32254 */
		/* 820DE4D4h case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE4D4h case   33:*/		return 0x820DE4D8;
		  /* 820DE4D8h */ case   34:  		/* addi R29, R11, -29076 */
		/* 820DE4D8h case   34:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8E6C);
		/* 820DE4D8h case   34:*/		return 0x820DE4DC;
		  /* 820DE4DCh */ case   35:  		/* mr R3, R31 */
		/* 820DE4DCh case   35:*/		regs.R3 = regs.R31;
		/* 820DE4DCh case   35:*/		return 0x820DE4E0;
		  /* 820DE4E0h */ case   36:  		/* bl -17200 */
		/* 820DE4E0h case   36:*/		regs.LR = 0x820DE4E4; return 0x820DA1B0;
		/* 820DE4E0h case   36:*/		return 0x820DE4E4;
		  /* 820DE4E4h */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 820DE4E4h case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE4E4h case   37:*/		return 0x820DE4E8;
		  /* 820DE4E8h */ case   38:  		/* bc 12, CR0_LT, 1164 */
		/* 820DE4E8h case   38:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE4E8h case   38:*/		return 0x820DE4EC;
		  /* 820DE4ECh */ case   39:  		/* mr R5, R25 */
		/* 820DE4ECh case   39:*/		regs.R5 = regs.R25;
		/* 820DE4ECh case   39:*/		return 0x820DE4F0;
		  /* 820DE4F0h */ case   40:  		/* mr R6, R30 */
		/* 820DE4F0h case   40:*/		regs.R6 = regs.R30;
		/* 820DE4F0h case   40:*/		return 0x820DE4F4;
		  /* 820DE4F4h */ case   41:  		/* li R4, 32 */
		/* 820DE4F4h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE4F4h case   41:*/		return 0x820DE4F8;
		  /* 820DE4F8h */ case   42:  		/* addi R3, R1, 128 */
		/* 820DE4F8h case   42:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DE4F8h case   42:*/		return 0x820DE4FC;
		  /* 820DE4FCh */ case   43:  		/* bl -245436 */
		/* 820DE4FCh case   43:*/		regs.LR = 0x820DE500; return 0x820A2640;
		/* 820DE4FCh case   43:*/		return 0x820DE500;
		  /* 820DE500h */ case   44:  		/* mr R5, R24 */
		/* 820DE500h case   44:*/		regs.R5 = regs.R24;
		/* 820DE500h case   44:*/		return 0x820DE504;
		  /* 820DE504h */ case   45:  		/* mr R6, R30 */
		/* 820DE504h case   45:*/		regs.R6 = regs.R30;
		/* 820DE504h case   45:*/		return 0x820DE508;
		  /* 820DE508h */ case   46:  		/* li R4, 32 */
		/* 820DE508h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE508h case   46:*/		return 0x820DE50C;
		  /* 820DE50Ch */ case   47:  		/* addi R3, R1, 160 */
		/* 820DE50Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DE50Ch case   47:*/		return 0x820DE510;
		  /* 820DE510h */ case   48:  		/* bl -245456 */
		/* 820DE510h case   48:*/		regs.LR = 0x820DE514; return 0x820A2640;
		/* 820DE510h case   48:*/		return 0x820DE514;
		  /* 820DE514h */ case   49:  		/* mr R4, R29 */
		/* 820DE514h case   49:*/		regs.R4 = regs.R29;
		/* 820DE514h case   49:*/		return 0x820DE518;
		  /* 820DE518h */ case   50:  		/* addi R6, R1, 128 */
		/* 820DE518h case   50:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DE518h case   50:*/		return 0x820DE51C;
		  /* 820DE51Ch */ case   51:  		/* addi R5, R1, 160 */
		/* 820DE51Ch case   51:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DE51Ch case   51:*/		return 0x820DE520;
		  /* 820DE520h */ case   52:  		/* mr R3, R31 */
		/* 820DE520h case   52:*/		regs.R3 = regs.R31;
		/* 820DE520h case   52:*/		return 0x820DE524;
		  /* 820DE524h */ case   53:  		/* bl -17484 */
		/* 820DE524h case   53:*/		regs.LR = 0x820DE528; return 0x820DA0D8;
		/* 820DE524h case   53:*/		return 0x820DE528;
		  /* 820DE528h */ case   54:  		/* cmpwi CR0, R3, 0 */
		/* 820DE528h case   54:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE528h case   54:*/		return 0x820DE52C;
		  /* 820DE52Ch */ case   55:  		/* bc 12, CR0_LT, 1096 */
		/* 820DE52Ch case   55:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE52Ch case   55:*/		return 0x820DE530;
		  /* 820DE530h */ case   56:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE530h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE530h case   56:*/		return 0x820DE534;
		  /* 820DE534h */ case   57:  		/* addi R30, R30, 1 */
		/* 820DE534h case   57:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE534h case   57:*/		return 0x820DE538;
		  /* 820DE538h */ case   58:  		/* cmplw CR6, R30, R11 */
		/* 820DE538h case   58:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE538h case   58:*/		return 0x820DE53C;
		  /* 820DE53Ch */ case   59:  		/* bc 12, CR6_LT, -96 */
		/* 820DE53Ch case   59:*/		if ( regs.CR[6].lt ) { return 0x820DE4DC;  }
		/* 820DE53Ch case   59:*/		return 0x820DE540;
	}
	return 0x820DE540;
} // Block from 820DE450h-820DE540h (60 instructions)

//////////////////////////////////////////////////////
// Block at 820DE540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE540);
		  /* 820DE540h */ case    0:  		/* lis R9, -32254 */
		/* 820DE540h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DE540h case    0:*/		return 0x820DE544;
		  /* 820DE544h */ case    1:  		/* lis R10, -32254 */
		/* 820DE544h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DE544h case    1:*/		return 0x820DE548;
		  /* 820DE548h */ case    2:  		/* li R30, 0 */
		/* 820DE548h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE548h case    2:*/		return 0x820DE54C;
		  /* 820DE54Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820DE54Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE54Ch case    3:*/		return 0x820DE550;
		  /* 820DE550h */ case    4:  		/* addi R27, R9, -29104 */
		/* 820DE550h case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0xFFFF8E50);
		/* 820DE550h case    4:*/		return 0x820DE554;
		  /* 820DE554h */ case    5:  		/* addi R28, R10, -28996 */
		/* 820DE554h case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFF8EBC);
		/* 820DE554h case    5:*/		return 0x820DE558;
		  /* 820DE558h */ case    6:  		/* bc 12, CR6_EQ, 108 */
		/* 820DE558h case    6:*/		if ( regs.CR[6].eq ) { return 0x820DE5C4;  }
		/* 820DE558h case    6:*/		return 0x820DE55C;
		  /* 820DE55Ch */ case    7:  		/* mr R3, R31 */
		/* 820DE55Ch case    7:*/		regs.R3 = regs.R31;
		/* 820DE55Ch case    7:*/		return 0x820DE560;
		  /* 820DE560h */ case    8:  		/* bl -17328 */
		/* 820DE560h case    8:*/		regs.LR = 0x820DE564; return 0x820DA1B0;
		/* 820DE560h case    8:*/		return 0x820DE564;
		  /* 820DE564h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820DE564h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE564h case    9:*/		return 0x820DE568;
		  /* 820DE568h */ case   10:  		/* bc 12, CR0_LT, 1036 */
		/* 820DE568h case   10:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE568h case   10:*/		return 0x820DE56C;
		  /* 820DE56Ch */ case   11:  		/* mr R5, R24 */
		/* 820DE56Ch case   11:*/		regs.R5 = regs.R24;
		/* 820DE56Ch case   11:*/		return 0x820DE570;
		  /* 820DE570h */ case   12:  		/* mr R6, R30 */
		/* 820DE570h case   12:*/		regs.R6 = regs.R30;
		/* 820DE570h case   12:*/		return 0x820DE574;
		  /* 820DE574h */ case   13:  		/* li R4, 32 */
		/* 820DE574h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE574h case   13:*/		return 0x820DE578;
		  /* 820DE578h */ case   14:  		/* addi R3, R1, 160 */
		/* 820DE578h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DE578h case   14:*/		return 0x820DE57C;
		  /* 820DE57Ch */ case   15:  		/* bl -245564 */
		/* 820DE57Ch case   15:*/		regs.LR = 0x820DE580; return 0x820A2640;
		/* 820DE57Ch case   15:*/		return 0x820DE580;
		  /* 820DE580h */ case   16:  		/* mr R5, R28 */
		/* 820DE580h case   16:*/		regs.R5 = regs.R28;
		/* 820DE580h case   16:*/		return 0x820DE584;
		  /* 820DE584h */ case   17:  		/* mr R6, R30 */
		/* 820DE584h case   17:*/		regs.R6 = regs.R30;
		/* 820DE584h case   17:*/		return 0x820DE588;
		  /* 820DE588h */ case   18:  		/* li R4, 32 */
		/* 820DE588h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE588h case   18:*/		return 0x820DE58C;
		  /* 820DE58Ch */ case   19:  		/* addi R3, R1, 224 */
		/* 820DE58Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820DE58Ch case   19:*/		return 0x820DE590;
		  /* 820DE590h */ case   20:  		/* bl -245584 */
		/* 820DE590h case   20:*/		regs.LR = 0x820DE594; return 0x820A2640;
		/* 820DE590h case   20:*/		return 0x820DE594;
		  /* 820DE594h */ case   21:  		/* mr R4, R27 */
		/* 820DE594h case   21:*/		regs.R4 = regs.R27;
		/* 820DE594h case   21:*/		return 0x820DE598;
		  /* 820DE598h */ case   22:  		/* addi R7, R1, 160 */
		/* 820DE598h case   22:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820DE598h case   22:*/		return 0x820DE59C;
		  /* 820DE59Ch */ case   23:  		/* addi R6, R1, 160 */
		/* 820DE59Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DE59Ch case   23:*/		return 0x820DE5A0;
		  /* 820DE5A0h */ case   24:  		/* addi R5, R1, 224 */
		/* 820DE5A0h case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 820DE5A0h case   24:*/		return 0x820DE5A4;
		  /* 820DE5A4h */ case   25:  		/* mr R3, R31 */
		/* 820DE5A4h case   25:*/		regs.R3 = regs.R31;
		/* 820DE5A4h case   25:*/		return 0x820DE5A8;
		  /* 820DE5A8h */ case   26:  		/* bl -17616 */
		/* 820DE5A8h case   26:*/		regs.LR = 0x820DE5AC; return 0x820DA0D8;
		/* 820DE5A8h case   26:*/		return 0x820DE5AC;
		  /* 820DE5ACh */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 820DE5ACh case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE5ACh case   27:*/		return 0x820DE5B0;
		  /* 820DE5B0h */ case   28:  		/* bc 12, CR0_LT, 964 */
		/* 820DE5B0h case   28:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE5B0h case   28:*/		return 0x820DE5B4;
		  /* 820DE5B4h */ case   29:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE5B4h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE5B4h case   29:*/		return 0x820DE5B8;
		  /* 820DE5B8h */ case   30:  		/* addi R30, R30, 1 */
		/* 820DE5B8h case   30:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE5B8h case   30:*/		return 0x820DE5BC;
		  /* 820DE5BCh */ case   31:  		/* cmplw CR6, R30, R11 */
		/* 820DE5BCh case   31:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE5BCh case   31:*/		return 0x820DE5C0;
		  /* 820DE5C0h */ case   32:  		/* bc 12, CR6_LT, -100 */
		/* 820DE5C0h case   32:*/		if ( regs.CR[6].lt ) { return 0x820DE55C;  }
		/* 820DE5C0h case   32:*/		return 0x820DE5C4;
	}
	return 0x820DE5C4;
} // Block from 820DE540h-820DE5C4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820DE5C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE5C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE5C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE5C4);
		  /* 820DE5C4h */ case    0:  		/* li R30, 0 */
		/* 820DE5C4h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE5C4h case    0:*/		return 0x820DE5C8;
		  /* 820DE5C8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DE5C8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE5C8h case    1:*/		return 0x820DE5CC;
		  /* 820DE5CCh */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 820DE5CCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820DE624;  }
		/* 820DE5CCh case    2:*/		return 0x820DE5D0;
		  /* 820DE5D0h */ case    3:  		/* mr R3, R31 */
		/* 820DE5D0h case    3:*/		regs.R3 = regs.R31;
		/* 820DE5D0h case    3:*/		return 0x820DE5D4;
		  /* 820DE5D4h */ case    4:  		/* bl -17444 */
		/* 820DE5D4h case    4:*/		regs.LR = 0x820DE5D8; return 0x820DA1B0;
		/* 820DE5D4h case    4:*/		return 0x820DE5D8;
	}
	return 0x820DE5D8;
} // Block from 820DE5C4h-820DE5D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DE5D8h
// Function '?EmitFRCFunction@C30SWProgramCI@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE5D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE5D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE5D8);
		  /* 820DE5D8h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820DE5D8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE5D8h case    0:*/		return 0x820DE5DC;
		  /* 820DE5DCh */ case    1:  		/* bc 12, CR0_LT, 920 */
		/* 820DE5DCh case    1:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE5DCh case    1:*/		return 0x820DE5E0;
		  /* 820DE5E0h */ case    2:  		/* mr R5, R25 */
		/* 820DE5E0h case    2:*/		regs.R5 = regs.R25;
		/* 820DE5E0h case    2:*/		return 0x820DE5E4;
		  /* 820DE5E4h */ case    3:  		/* mr R6, R30 */
		/* 820DE5E4h case    3:*/		regs.R6 = regs.R30;
		/* 820DE5E4h case    3:*/		return 0x820DE5E8;
		  /* 820DE5E8h */ case    4:  		/* li R4, 32 */
		/* 820DE5E8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE5E8h case    4:*/		return 0x820DE5EC;
		  /* 820DE5ECh */ case    5:  		/* addi R3, R1, 128 */
		/* 820DE5ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DE5ECh case    5:*/		return 0x820DE5F0;
		  /* 820DE5F0h */ case    6:  		/* bl -245680 */
		/* 820DE5F0h case    6:*/		regs.LR = 0x820DE5F4; return 0x820A2640;
		/* 820DE5F0h case    6:*/		return 0x820DE5F4;
		  /* 820DE5F4h */ case    7:  		/* mr R7, R23 */
		/* 820DE5F4h case    7:*/		regs.R7 = regs.R23;
		/* 820DE5F4h case    7:*/		return 0x820DE5F8;
		  /* 820DE5F8h */ case    8:  		/* mr R4, R27 */
		/* 820DE5F8h case    8:*/		regs.R4 = regs.R27;
		/* 820DE5F8h case    8:*/		return 0x820DE5FC;
		  /* 820DE5FCh */ case    9:  		/* addi R6, R1, 128 */
		/* 820DE5FCh case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DE5FCh case    9:*/		return 0x820DE600;
		  /* 820DE600h */ case   10:  		/* addi R5, R1, 128 */
		/* 820DE600h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DE600h case   10:*/		return 0x820DE604;
		  /* 820DE604h */ case   11:  		/* mr R3, R31 */
		/* 820DE604h case   11:*/		regs.R3 = regs.R31;
		/* 820DE604h case   11:*/		return 0x820DE608;
		  /* 820DE608h */ case   12:  		/* bl -17712 */
		/* 820DE608h case   12:*/		regs.LR = 0x820DE60C; return 0x820DA0D8;
		/* 820DE608h case   12:*/		return 0x820DE60C;
		  /* 820DE60Ch */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DE60Ch case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE60Ch case   13:*/		return 0x820DE610;
		  /* 820DE610h */ case   14:  		/* bc 12, CR0_LT, 868 */
		/* 820DE610h case   14:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE610h case   14:*/		return 0x820DE614;
		  /* 820DE614h */ case   15:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE614h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE614h case   15:*/		return 0x820DE618;
		  /* 820DE618h */ case   16:  		/* addi R30, R30, 1 */
		/* 820DE618h case   16:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE618h case   16:*/		return 0x820DE61C;
		  /* 820DE61Ch */ case   17:  		/* cmplw CR6, R30, R11 */
		/* 820DE61Ch case   17:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE61Ch case   17:*/		return 0x820DE620;
		  /* 820DE620h */ case   18:  		/* bc 12, CR6_LT, -80 */
		/* 820DE620h case   18:*/		if ( regs.CR[6].lt ) { return 0x820DE5D0;  }
		/* 820DE620h case   18:*/		return 0x820DE624;
	}
	return 0x820DE624;
} // Block from 820DE5D8h-820DE624h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820DE624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE624);
		  /* 820DE624h */ case    0:  		/* li R30, 0 */
		/* 820DE624h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE624h case    0:*/		return 0x820DE628;
		  /* 820DE628h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DE628h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE628h case    1:*/		return 0x820DE62C;
		  /* 820DE62Ch */ case    2:  		/* bc 12, CR6_EQ, 120 */
		/* 820DE62Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820DE6A4;  }
		/* 820DE62Ch case    2:*/		return 0x820DE630;
		  /* 820DE630h */ case    3:  		/* lis R11, -32254 */
		/* 820DE630h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE630h case    3:*/		return 0x820DE634;
		  /* 820DE634h */ case    4:  		/* addi R29, R11, -29204 */
		/* 820DE634h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8DEC);
		/* 820DE634h case    4:*/		return 0x820DE638;
		  /* 820DE638h */ case    5:  		/* mr R3, R31 */
		/* 820DE638h case    5:*/		regs.R3 = regs.R31;
		/* 820DE638h case    5:*/		return 0x820DE63C;
		  /* 820DE63Ch */ case    6:  		/* bl -17548 */
		/* 820DE63Ch case    6:*/		regs.LR = 0x820DE640; return 0x820DA1B0;
		/* 820DE63Ch case    6:*/		return 0x820DE640;
		  /* 820DE640h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DE640h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE640h case    7:*/		return 0x820DE644;
		  /* 820DE644h */ case    8:  		/* bc 12, CR0_LT, 816 */
		/* 820DE644h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE644h case    8:*/		return 0x820DE648;
		  /* 820DE648h */ case    9:  		/* mr R5, R25 */
		/* 820DE648h case    9:*/		regs.R5 = regs.R25;
		/* 820DE648h case    9:*/		return 0x820DE64C;
		  /* 820DE64Ch */ case   10:  		/* mr R6, R30 */
		/* 820DE64Ch case   10:*/		regs.R6 = regs.R30;
		/* 820DE64Ch case   10:*/		return 0x820DE650;
		  /* 820DE650h */ case   11:  		/* li R4, 32 */
		/* 820DE650h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE650h case   11:*/		return 0x820DE654;
		  /* 820DE654h */ case   12:  		/* addi R3, R1, 128 */
		/* 820DE654h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DE654h case   12:*/		return 0x820DE658;
		  /* 820DE658h */ case   13:  		/* bl -245784 */
		/* 820DE658h case   13:*/		regs.LR = 0x820DE65C; return 0x820A2640;
		/* 820DE658h case   13:*/		return 0x820DE65C;
		  /* 820DE65Ch */ case   14:  		/* mr R5, R28 */
		/* 820DE65Ch case   14:*/		regs.R5 = regs.R28;
		/* 820DE65Ch case   14:*/		return 0x820DE660;
		  /* 820DE660h */ case   15:  		/* mr R6, R30 */
		/* 820DE660h case   15:*/		regs.R6 = regs.R30;
		/* 820DE660h case   15:*/		return 0x820DE664;
		  /* 820DE664h */ case   16:  		/* li R4, 32 */
		/* 820DE664h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE664h case   16:*/		return 0x820DE668;
		  /* 820DE668h */ case   17:  		/* addi R3, R1, 224 */
		/* 820DE668h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820DE668h case   17:*/		return 0x820DE66C;
		  /* 820DE66Ch */ case   18:  		/* bl -245804 */
		/* 820DE66Ch case   18:*/		regs.LR = 0x820DE670; return 0x820A2640;
		/* 820DE66Ch case   18:*/		return 0x820DE670;
		  /* 820DE670h */ case   19:  		/* mr R8, R23 */
		/* 820DE670h case   19:*/		regs.R8 = regs.R23;
		/* 820DE670h case   19:*/		return 0x820DE674;
		  /* 820DE674h */ case   20:  		/* mr R4, R29 */
		/* 820DE674h case   20:*/		regs.R4 = regs.R29;
		/* 820DE674h case   20:*/		return 0x820DE678;
		  /* 820DE678h */ case   21:  		/* addi R7, R1, 224 */
		/* 820DE678h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xE0);
		/* 820DE678h case   21:*/		return 0x820DE67C;
		  /* 820DE67Ch */ case   22:  		/* addi R6, R1, 128 */
		/* 820DE67Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DE67Ch case   22:*/		return 0x820DE680;
		  /* 820DE680h */ case   23:  		/* addi R5, R1, 224 */
		/* 820DE680h case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 820DE680h case   23:*/		return 0x820DE684;
		  /* 820DE684h */ case   24:  		/* mr R3, R31 */
		/* 820DE684h case   24:*/		regs.R3 = regs.R31;
		/* 820DE684h case   24:*/		return 0x820DE688;
		  /* 820DE688h */ case   25:  		/* bl -17840 */
		/* 820DE688h case   25:*/		regs.LR = 0x820DE68C; return 0x820DA0D8;
		/* 820DE688h case   25:*/		return 0x820DE68C;
		  /* 820DE68Ch */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820DE68Ch case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE68Ch case   26:*/		return 0x820DE690;
		  /* 820DE690h */ case   27:  		/* bc 12, CR0_LT, 740 */
		/* 820DE690h case   27:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE690h case   27:*/		return 0x820DE694;
		  /* 820DE694h */ case   28:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE694h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE694h case   28:*/		return 0x820DE698;
		  /* 820DE698h */ case   29:  		/* addi R30, R30, 1 */
		/* 820DE698h case   29:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE698h case   29:*/		return 0x820DE69C;
		  /* 820DE69Ch */ case   30:  		/* cmplw CR6, R30, R11 */
		/* 820DE69Ch case   30:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE69Ch case   30:*/		return 0x820DE6A0;
		  /* 820DE6A0h */ case   31:  		/* bc 12, CR6_LT, -104 */
		/* 820DE6A0h case   31:*/		if ( regs.CR[6].lt ) { return 0x820DE638;  }
		/* 820DE6A0h case   31:*/		return 0x820DE6A4;
	}
	return 0x820DE6A4;
} // Block from 820DE624h-820DE6A4h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820DE6A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE6A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE6A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE6A4);
		  /* 820DE6A4h */ case    0:  		/* li R30, 0 */
		/* 820DE6A4h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE6A4h case    0:*/		return 0x820DE6A8;
		  /* 820DE6A8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DE6A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE6A8h case    1:*/		return 0x820DE6AC;
		  /* 820DE6ACh */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 820DE6ACh case    2:*/		if ( regs.CR[6].eq ) { return 0x820DE71C;  }
		/* 820DE6ACh case    2:*/		return 0x820DE6B0;
		  /* 820DE6B0h */ case    3:  		/* mr R3, R31 */
		/* 820DE6B0h case    3:*/		regs.R3 = regs.R31;
		/* 820DE6B0h case    3:*/		return 0x820DE6B4;
		  /* 820DE6B4h */ case    4:  		/* bl -17668 */
		/* 820DE6B4h case    4:*/		regs.LR = 0x820DE6B8; return 0x820DA1B0;
		/* 820DE6B4h case    4:*/		return 0x820DE6B8;
		  /* 820DE6B8h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DE6B8h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE6B8h case    5:*/		return 0x820DE6BC;
		  /* 820DE6BCh */ case    6:  		/* bc 12, CR0_LT, 696 */
		/* 820DE6BCh case    6:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE6BCh case    6:*/		return 0x820DE6C0;
		  /* 820DE6C0h */ case    7:  		/* mr R7, R30 */
		/* 820DE6C0h case    7:*/		regs.R7 = regs.R30;
		/* 820DE6C0h case    7:*/		return 0x820DE6C4;
		  /* 820DE6C4h */ case    8:  		/* mr R6, R30 */
		/* 820DE6C4h case    8:*/		regs.R6 = regs.R30;
		/* 820DE6C4h case    8:*/		return 0x820DE6C8;
		  /* 820DE6C8h */ case    9:  		/* mr R5, R22 */
		/* 820DE6C8h case    9:*/		regs.R5 = regs.R22;
		/* 820DE6C8h case    9:*/		return 0x820DE6CC;
		  /* 820DE6CCh */ case   10:  		/* li R4, 32 */
		/* 820DE6CCh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE6CCh case   10:*/		return 0x820DE6D0;
		  /* 820DE6D0h */ case   11:  		/* addi R3, R1, 192 */
		/* 820DE6D0h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DE6D0h case   11:*/		return 0x820DE6D4;
		  /* 820DE6D4h */ case   12:  		/* bl -245908 */
		/* 820DE6D4h case   12:*/		regs.LR = 0x820DE6D8; return 0x820A2640;
		/* 820DE6D4h case   12:*/		return 0x820DE6D8;
		  /* 820DE6D8h */ case   13:  		/* mr R5, R25 */
		/* 820DE6D8h case   13:*/		regs.R5 = regs.R25;
		/* 820DE6D8h case   13:*/		return 0x820DE6DC;
		  /* 820DE6DCh */ case   14:  		/* mr R6, R30 */
		/* 820DE6DCh case   14:*/		regs.R6 = regs.R30;
		/* 820DE6DCh case   14:*/		return 0x820DE6E0;
		  /* 820DE6E0h */ case   15:  		/* li R4, 32 */
		/* 820DE6E0h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE6E0h case   15:*/		return 0x820DE6E4;
		  /* 820DE6E4h */ case   16:  		/* addi R3, R1, 128 */
		/* 820DE6E4h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DE6E4h case   16:*/		return 0x820DE6E8;
		  /* 820DE6E8h */ case   17:  		/* bl -245928 */
		/* 820DE6E8h case   17:*/		regs.LR = 0x820DE6EC; return 0x820A2640;
		/* 820DE6E8h case   17:*/		return 0x820DE6EC;
		  /* 820DE6ECh */ case   18:  		/* mr R4, R26 */
		/* 820DE6ECh case   18:*/		regs.R4 = regs.R26;
		/* 820DE6ECh case   18:*/		return 0x820DE6F0;
		  /* 820DE6F0h */ case   19:  		/* addi R7, R1, 192 */
		/* 820DE6F0h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC0);
		/* 820DE6F0h case   19:*/		return 0x820DE6F4;
		  /* 820DE6F4h */ case   20:  		/* addi R6, R1, 192 */
		/* 820DE6F4h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820DE6F4h case   20:*/		return 0x820DE6F8;
		  /* 820DE6F8h */ case   21:  		/* addi R5, R1, 128 */
		/* 820DE6F8h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DE6F8h case   21:*/		return 0x820DE6FC;
		  /* 820DE6FCh */ case   22:  		/* mr R3, R31 */
		/* 820DE6FCh case   22:*/		regs.R3 = regs.R31;
		/* 820DE6FCh case   22:*/		return 0x820DE700;
		  /* 820DE700h */ case   23:  		/* bl -17960 */
		/* 820DE700h case   23:*/		regs.LR = 0x820DE704; return 0x820DA0D8;
		/* 820DE700h case   23:*/		return 0x820DE704;
		  /* 820DE704h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820DE704h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE704h case   24:*/		return 0x820DE708;
		  /* 820DE708h */ case   25:  		/* bc 12, CR0_LT, 620 */
		/* 820DE708h case   25:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE708h case   25:*/		return 0x820DE70C;
		  /* 820DE70Ch */ case   26:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE70Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE70Ch case   26:*/		return 0x820DE710;
		  /* 820DE710h */ case   27:  		/* addi R30, R30, 1 */
		/* 820DE710h case   27:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE710h case   27:*/		return 0x820DE714;
		  /* 820DE714h */ case   28:  		/* cmplw CR6, R30, R11 */
		/* 820DE714h case   28:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE714h case   28:*/		return 0x820DE718;
		  /* 820DE718h */ case   29:  		/* bc 12, CR6_LT, -104 */
		/* 820DE718h case   29:*/		if ( regs.CR[6].lt ) { return 0x820DE6B0;  }
		/* 820DE718h case   29:*/		return 0x820DE71C;
	}
	return 0x820DE71C;
} // Block from 820DE6A4h-820DE71Ch (30 instructions)

//////////////////////////////////////////////////////
// Block at 820DE71Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE71C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE71C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE71C);
		  /* 820DE71Ch */ case    0:  		/* mr R3, R31 */
		/* 820DE71Ch case    0:*/		regs.R3 = regs.R31;
		/* 820DE71Ch case    0:*/		return 0x820DE720;
	}
	return 0x820DE720;
} // Block from 820DE71Ch-820DE720h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DE720h
// Function '?EmitRSQFunction@C30SWProgramCI@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE720);
		  /* 820DE720h */ case    0:  		/* bl -17776 */
		/* 820DE720h case    0:*/		regs.LR = 0x820DE724; return 0x820DA1B0;
		/* 820DE720h case    0:*/		return 0x820DE724;
		  /* 820DE724h */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820DE724h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE724h case    1:*/		return 0x820DE728;
		  /* 820DE728h */ case    2:  		/* bc 12, CR0_LT, 588 */
		/* 820DE728h case    2:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE728h case    2:*/		return 0x820DE72C;
		  /* 820DE72Ch */ case    3:  		/* lis R11, -32254 */
		/* 820DE72Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE72Ch case    3:*/		return 0x820DE730;
		  /* 820DE730h */ case    4:  		/* mr R3, R31 */
		/* 820DE730h case    4:*/		regs.R3 = regs.R31;
		/* 820DE730h case    4:*/		return 0x820DE734;
		  /* 820DE734h */ case    5:  		/* addi R4, R11, -29024 */
		/* 820DE734h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8EA0);
		/* 820DE734h case    5:*/		return 0x820DE738;
		  /* 820DE738h */ case    6:  		/* bl -18016 */
		/* 820DE738h case    6:*/		regs.LR = 0x820DE73C; return 0x820DA0D8;
		/* 820DE738h case    6:*/		return 0x820DE73C;
		  /* 820DE73Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DE73Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE73Ch case    7:*/		return 0x820DE740;
		  /* 820DE740h */ case    8:  		/* bc 12, CR0_LT, 564 */
		/* 820DE740h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE740h case    8:*/		return 0x820DE744;
		  /* 820DE744h */ case    9:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE744h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE744h case    9:*/		return 0x820DE748;
		  /* 820DE748h */ case   10:  		/* li R30, 0 */
		/* 820DE748h case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE748h case   10:*/		return 0x820DE74C;
		  /* 820DE74Ch */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 820DE74Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE74Ch case   11:*/		return 0x820DE750;
		  /* 820DE750h */ case   12:  		/* bc 12, CR6_EQ, 120 */
		/* 820DE750h case   12:*/		if ( regs.CR[6].eq ) { return 0x820DE7C8;  }
		/* 820DE750h case   12:*/		return 0x820DE754;
		  /* 820DE754h */ case   13:  		/* lis R11, -32254 */
		/* 820DE754h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE754h case   13:*/		return 0x820DE758;
		  /* 820DE758h */ case   14:  		/* addi R29, R11, -29236 */
		/* 820DE758h case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8DCC);
		/* 820DE758h case   14:*/		return 0x820DE75C;
		  /* 820DE75Ch */ case   15:  		/* mr R3, R31 */
		/* 820DE75Ch case   15:*/		regs.R3 = regs.R31;
		/* 820DE75Ch case   15:*/		return 0x820DE760;
		  /* 820DE760h */ case   16:  		/* bl -17840 */
		/* 820DE760h case   16:*/		regs.LR = 0x820DE764; return 0x820DA1B0;
		/* 820DE760h case   16:*/		return 0x820DE764;
		  /* 820DE764h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 820DE764h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE764h case   17:*/		return 0x820DE768;
		  /* 820DE768h */ case   18:  		/* bc 12, CR0_LT, 524 */
		/* 820DE768h case   18:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE768h case   18:*/		return 0x820DE76C;
		  /* 820DE76Ch */ case   19:  		/* mr R5, R24 */
		/* 820DE76Ch case   19:*/		regs.R5 = regs.R24;
		/* 820DE76Ch case   19:*/		return 0x820DE770;
		  /* 820DE770h */ case   20:  		/* mr R6, R30 */
		/* 820DE770h case   20:*/		regs.R6 = regs.R30;
		/* 820DE770h case   20:*/		return 0x820DE774;
		  /* 820DE774h */ case   21:  		/* li R4, 32 */
		/* 820DE774h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE774h case   21:*/		return 0x820DE778;
		  /* 820DE778h */ case   22:  		/* addi R3, R1, 160 */
		/* 820DE778h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DE778h case   22:*/		return 0x820DE77C;
		  /* 820DE77Ch */ case   23:  		/* bl -246076 */
		/* 820DE77Ch case   23:*/		regs.LR = 0x820DE780; return 0x820A2640;
		/* 820DE77Ch case   23:*/		return 0x820DE780;
		  /* 820DE780h */ case   24:  		/* mr R5, R28 */
		/* 820DE780h case   24:*/		regs.R5 = regs.R28;
		/* 820DE780h case   24:*/		return 0x820DE784;
		  /* 820DE784h */ case   25:  		/* mr R6, R30 */
		/* 820DE784h case   25:*/		regs.R6 = regs.R30;
		/* 820DE784h case   25:*/		return 0x820DE788;
		  /* 820DE788h */ case   26:  		/* li R4, 32 */
		/* 820DE788h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE788h case   26:*/		return 0x820DE78C;
		  /* 820DE78Ch */ case   27:  		/* addi R3, R1, 224 */
		/* 820DE78Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820DE78Ch case   27:*/		return 0x820DE790;
		  /* 820DE790h */ case   28:  		/* bl -246096 */
		/* 820DE790h case   28:*/		regs.LR = 0x820DE794; return 0x820A2640;
		/* 820DE790h case   28:*/		return 0x820DE794;
		  /* 820DE794h */ case   29:  		/* mr R4, R29 */
		/* 820DE794h case   29:*/		regs.R4 = regs.R29;
		/* 820DE794h case   29:*/		return 0x820DE798;
		  /* 820DE798h */ case   30:  		/* addi R8, R1, 160 */
		/* 820DE798h case   30:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 820DE798h case   30:*/		return 0x820DE79C;
		  /* 820DE79Ch */ case   31:  		/* addi R7, R1, 224 */
		/* 820DE79Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xE0);
		/* 820DE79Ch case   31:*/		return 0x820DE7A0;
		  /* 820DE7A0h */ case   32:  		/* addi R6, R1, 160 */
		/* 820DE7A0h case   32:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DE7A0h case   32:*/		return 0x820DE7A4;
		  /* 820DE7A4h */ case   33:  		/* addi R5, R1, 160 */
		/* 820DE7A4h case   33:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DE7A4h case   33:*/		return 0x820DE7A8;
		  /* 820DE7A8h */ case   34:  		/* mr R3, R31 */
		/* 820DE7A8h case   34:*/		regs.R3 = regs.R31;
		/* 820DE7A8h case   34:*/		return 0x820DE7AC;
		  /* 820DE7ACh */ case   35:  		/* bl -18132 */
		/* 820DE7ACh case   35:*/		regs.LR = 0x820DE7B0; return 0x820DA0D8;
		/* 820DE7ACh case   35:*/		return 0x820DE7B0;
		  /* 820DE7B0h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820DE7B0h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE7B0h case   36:*/		return 0x820DE7B4;
		  /* 820DE7B4h */ case   37:  		/* bc 12, CR0_LT, 448 */
		/* 820DE7B4h case   37:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE7B4h case   37:*/		return 0x820DE7B8;
		  /* 820DE7B8h */ case   38:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE7B8h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE7B8h case   38:*/		return 0x820DE7BC;
		  /* 820DE7BCh */ case   39:  		/* addi R30, R30, 1 */
		/* 820DE7BCh case   39:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE7BCh case   39:*/		return 0x820DE7C0;
		  /* 820DE7C0h */ case   40:  		/* cmplw CR6, R30, R11 */
		/* 820DE7C0h case   40:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE7C0h case   40:*/		return 0x820DE7C4;
		  /* 820DE7C4h */ case   41:  		/* bc 12, CR6_LT, -104 */
		/* 820DE7C4h case   41:*/		if ( regs.CR[6].lt ) { return 0x820DE75C;  }
		/* 820DE7C4h case   41:*/		return 0x820DE7C8;
	}
	return 0x820DE7C8;
} // Block from 820DE720h-820DE7C8h (42 instructions)

//////////////////////////////////////////////////////
// Block at 820DE7C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE7C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE7C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE7C8);
		  /* 820DE7C8h */ case    0:  		/* li R30, 0 */
		/* 820DE7C8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE7C8h case    0:*/		return 0x820DE7CC;
		  /* 820DE7CCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DE7CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE7CCh case    1:*/		return 0x820DE7D0;
		  /* 820DE7D0h */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 820DE7D0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DE840;  }
		/* 820DE7D0h case    2:*/		return 0x820DE7D4;
		  /* 820DE7D4h */ case    3:  		/* mr R3, R31 */
		/* 820DE7D4h case    3:*/		regs.R3 = regs.R31;
		/* 820DE7D4h case    3:*/		return 0x820DE7D8;
		  /* 820DE7D8h */ case    4:  		/* bl -17960 */
		/* 820DE7D8h case    4:*/		regs.LR = 0x820DE7DC; return 0x820DA1B0;
		/* 820DE7D8h case    4:*/		return 0x820DE7DC;
		  /* 820DE7DCh */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DE7DCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE7DCh case    5:*/		return 0x820DE7E0;
		  /* 820DE7E0h */ case    6:  		/* bc 12, CR0_LT, 404 */
		/* 820DE7E0h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE7E0h case    6:*/		return 0x820DE7E4;
		  /* 820DE7E4h */ case    7:  		/* mr R7, R30 */
		/* 820DE7E4h case    7:*/		regs.R7 = regs.R30;
		/* 820DE7E4h case    7:*/		return 0x820DE7E8;
		  /* 820DE7E8h */ case    8:  		/* mr R6, R30 */
		/* 820DE7E8h case    8:*/		regs.R6 = regs.R30;
		/* 820DE7E8h case    8:*/		return 0x820DE7EC;
		  /* 820DE7ECh */ case    9:  		/* mr R5, R22 */
		/* 820DE7ECh case    9:*/		regs.R5 = regs.R22;
		/* 820DE7ECh case    9:*/		return 0x820DE7F0;
		  /* 820DE7F0h */ case   10:  		/* li R4, 32 */
		/* 820DE7F0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE7F0h case   10:*/		return 0x820DE7F4;
		  /* 820DE7F4h */ case   11:  		/* addi R3, R1, 192 */
		/* 820DE7F4h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DE7F4h case   11:*/		return 0x820DE7F8;
		  /* 820DE7F8h */ case   12:  		/* bl -246200 */
		/* 820DE7F8h case   12:*/		regs.LR = 0x820DE7FC; return 0x820A2640;
		/* 820DE7F8h case   12:*/		return 0x820DE7FC;
		  /* 820DE7FCh */ case   13:  		/* mr R5, R24 */
		/* 820DE7FCh case   13:*/		regs.R5 = regs.R24;
		/* 820DE7FCh case   13:*/		return 0x820DE800;
		  /* 820DE800h */ case   14:  		/* mr R6, R30 */
		/* 820DE800h case   14:*/		regs.R6 = regs.R30;
		/* 820DE800h case   14:*/		return 0x820DE804;
		  /* 820DE804h */ case   15:  		/* li R4, 32 */
		/* 820DE804h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE804h case   15:*/		return 0x820DE808;
		  /* 820DE808h */ case   16:  		/* addi R3, R1, 160 */
		/* 820DE808h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DE808h case   16:*/		return 0x820DE80C;
		  /* 820DE80Ch */ case   17:  		/* bl -246220 */
		/* 820DE80Ch case   17:*/		regs.LR = 0x820DE810; return 0x820A2640;
		/* 820DE80Ch case   17:*/		return 0x820DE810;
		  /* 820DE810h */ case   18:  		/* mr R4, R27 */
		/* 820DE810h case   18:*/		regs.R4 = regs.R27;
		/* 820DE810h case   18:*/		return 0x820DE814;
		  /* 820DE814h */ case   19:  		/* addi R7, R1, 160 */
		/* 820DE814h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820DE814h case   19:*/		return 0x820DE818;
		  /* 820DE818h */ case   20:  		/* addi R6, R1, 192 */
		/* 820DE818h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820DE818h case   20:*/		return 0x820DE81C;
		  /* 820DE81Ch */ case   21:  		/* addi R5, R1, 160 */
		/* 820DE81Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DE81Ch case   21:*/		return 0x820DE820;
		  /* 820DE820h */ case   22:  		/* mr R3, R31 */
		/* 820DE820h case   22:*/		regs.R3 = regs.R31;
		/* 820DE820h case   22:*/		return 0x820DE824;
		  /* 820DE824h */ case   23:  		/* bl -18252 */
		/* 820DE824h case   23:*/		regs.LR = 0x820DE828; return 0x820DA0D8;
		/* 820DE824h case   23:*/		return 0x820DE828;
		  /* 820DE828h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820DE828h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE828h case   24:*/		return 0x820DE82C;
		  /* 820DE82Ch */ case   25:  		/* bc 12, CR0_LT, 328 */
		/* 820DE82Ch case   25:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE82Ch case   25:*/		return 0x820DE830;
		  /* 820DE830h */ case   26:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE830h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE830h case   26:*/		return 0x820DE834;
		  /* 820DE834h */ case   27:  		/* addi R30, R30, 1 */
		/* 820DE834h case   27:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE834h case   27:*/		return 0x820DE838;
		  /* 820DE838h */ case   28:  		/* cmplw CR6, R30, R11 */
		/* 820DE838h case   28:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE838h case   28:*/		return 0x820DE83C;
		  /* 820DE83Ch */ case   29:  		/* bc 12, CR6_LT, -104 */
		/* 820DE83Ch case   29:*/		if ( regs.CR[6].lt ) { return 0x820DE7D4;  }
		/* 820DE83Ch case   29:*/		return 0x820DE840;
	}
	return 0x820DE840;
} // Block from 820DE7C8h-820DE840h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820DE840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE840);
		  /* 820DE840h */ case    0:  		/* lis R10, -32254 */
		/* 820DE840h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DE840h case    0:*/		return 0x820DE844;
		  /* 820DE844h */ case    1:  		/* li R30, 0 */
		/* 820DE844h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE844h case    1:*/		return 0x820DE848;
		  /* 820DE848h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820DE848h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE848h case    2:*/		return 0x820DE84C;
		  /* 820DE84Ch */ case    3:  		/* addi R28, R10, -30716 */
		/* 820DE84Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFF8804);
		/* 820DE84Ch case    3:*/		return 0x820DE850;
		  /* 820DE850h */ case    4:  		/* bc 12, CR6_EQ, 116 */
		/* 820DE850h case    4:*/		if ( regs.CR[6].eq ) { return 0x820DE8C4;  }
		/* 820DE850h case    4:*/		return 0x820DE854;
		  /* 820DE854h */ case    5:  		/* lis R11, -32254 */
		/* 820DE854h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE854h case    5:*/		return 0x820DE858;
		  /* 820DE858h */ case    6:  		/* addi R29, R11, -29264 */
		/* 820DE858h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8DB0);
		/* 820DE858h case    6:*/		return 0x820DE85C;
		  /* 820DE85Ch */ case    7:  		/* mr R3, R31 */
		/* 820DE85Ch case    7:*/		regs.R3 = regs.R31;
		/* 820DE85Ch case    7:*/		return 0x820DE860;
		  /* 820DE860h */ case    8:  		/* bl -18096 */
		/* 820DE860h case    8:*/		regs.LR = 0x820DE864; return 0x820DA1B0;
		/* 820DE860h case    8:*/		return 0x820DE864;
		  /* 820DE864h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820DE864h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE864h case    9:*/		return 0x820DE868;
		  /* 820DE868h */ case   10:  		/* bc 12, CR0_LT, 268 */
		/* 820DE868h case   10:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE868h case   10:*/		return 0x820DE86C;
		  /* 820DE86Ch */ case   11:  		/* mr R5, R28 */
		/* 820DE86Ch case   11:*/		regs.R5 = regs.R28;
		/* 820DE86Ch case   11:*/		return 0x820DE870;
		  /* 820DE870h */ case   12:  		/* mr R6, R30 */
		/* 820DE870h case   12:*/		regs.R6 = regs.R30;
		/* 820DE870h case   12:*/		return 0x820DE874;
		  /* 820DE874h */ case   13:  		/* li R4, 32 */
		/* 820DE874h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE874h case   13:*/		return 0x820DE878;
		  /* 820DE878h */ case   14:  		/* addi R3, R1, 256 */
		/* 820DE878h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 820DE878h case   14:*/		return 0x820DE87C;
		  /* 820DE87Ch */ case   15:  		/* bl -246332 */
		/* 820DE87Ch case   15:*/		regs.LR = 0x820DE880; return 0x820A2640;
		/* 820DE87Ch case   15:*/		return 0x820DE880;
		  /* 820DE880h */ case   16:  		/* mr R5, R25 */
		/* 820DE880h case   16:*/		regs.R5 = regs.R25;
		/* 820DE880h case   16:*/		return 0x820DE884;
		  /* 820DE884h */ case   17:  		/* mr R6, R30 */
		/* 820DE884h case   17:*/		regs.R6 = regs.R30;
		/* 820DE884h case   17:*/		return 0x820DE888;
		  /* 820DE888h */ case   18:  		/* li R4, 32 */
		/* 820DE888h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE888h case   18:*/		return 0x820DE88C;
		  /* 820DE88Ch */ case   19:  		/* addi R3, R1, 128 */
		/* 820DE88Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DE88Ch case   19:*/		return 0x820DE890;
		  /* 820DE890h */ case   20:  		/* bl -246352 */
		/* 820DE890h case   20:*/		regs.LR = 0x820DE894; return 0x820A2640;
		/* 820DE890h case   20:*/		return 0x820DE894;
		  /* 820DE894h */ case   21:  		/* mr R7, R23 */
		/* 820DE894h case   21:*/		regs.R7 = regs.R23;
		/* 820DE894h case   21:*/		return 0x820DE898;
		  /* 820DE898h */ case   22:  		/* mr R4, R29 */
		/* 820DE898h case   22:*/		regs.R4 = regs.R29;
		/* 820DE898h case   22:*/		return 0x820DE89C;
		  /* 820DE89Ch */ case   23:  		/* addi R6, R1, 128 */
		/* 820DE89Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820DE89Ch case   23:*/		return 0x820DE8A0;
		  /* 820DE8A0h */ case   24:  		/* addi R5, R1, 256 */
		/* 820DE8A0h case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 820DE8A0h case   24:*/		return 0x820DE8A4;
		  /* 820DE8A4h */ case   25:  		/* mr R3, R31 */
		/* 820DE8A4h case   25:*/		regs.R3 = regs.R31;
		/* 820DE8A4h case   25:*/		return 0x820DE8A8;
		  /* 820DE8A8h */ case   26:  		/* bl -18384 */
		/* 820DE8A8h case   26:*/		regs.LR = 0x820DE8AC; return 0x820DA0D8;
		/* 820DE8A8h case   26:*/		return 0x820DE8AC;
		  /* 820DE8ACh */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 820DE8ACh case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE8ACh case   27:*/		return 0x820DE8B0;
		  /* 820DE8B0h */ case   28:  		/* bc 12, CR0_LT, 196 */
		/* 820DE8B0h case   28:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE8B0h case   28:*/		return 0x820DE8B4;
		  /* 820DE8B4h */ case   29:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE8B4h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE8B4h case   29:*/		return 0x820DE8B8;
		  /* 820DE8B8h */ case   30:  		/* addi R30, R30, 1 */
		/* 820DE8B8h case   30:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE8B8h case   30:*/		return 0x820DE8BC;
		  /* 820DE8BCh */ case   31:  		/* cmplw CR6, R30, R11 */
		/* 820DE8BCh case   31:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE8BCh case   31:*/		return 0x820DE8C0;
		  /* 820DE8C0h */ case   32:  		/* bc 12, CR6_LT, -100 */
		/* 820DE8C0h case   32:*/		if ( regs.CR[6].lt ) { return 0x820DE85C;  }
		/* 820DE8C0h case   32:*/		return 0x820DE8C4;
	}
	return 0x820DE8C4;
} // Block from 820DE840h-820DE8C4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820DE8C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE8C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE8C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE8C4);
		  /* 820DE8C4h */ case    0:  		/* li R30, 0 */
		/* 820DE8C4h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DE8C4h case    0:*/		return 0x820DE8C8;
		  /* 820DE8C8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DE8C8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DE8C8h case    1:*/		return 0x820DE8CC;
		  /* 820DE8CCh */ case    2:  		/* bc 12, CR6_EQ, 164 */
		/* 820DE8CCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820DE970;  }
		/* 820DE8CCh case    2:*/		return 0x820DE8D0;
		  /* 820DE8D0h */ case    3:  		/* lis R11, -32254 */
		/* 820DE8D0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE8D0h case    3:*/		return 0x820DE8D4;
		  /* 820DE8D4h */ case    4:  		/* addi R29, R11, -29292 */
		/* 820DE8D4h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8D94);
		/* 820DE8D4h case    4:*/		return 0x820DE8D8;
		  /* 820DE8D8h */ case    5:  		/* mr R3, R31 */
		/* 820DE8D8h case    5:*/		regs.R3 = regs.R31;
		/* 820DE8D8h case    5:*/		return 0x820DE8DC;
		  /* 820DE8DCh */ case    6:  		/* bl -18220 */
		/* 820DE8DCh case    6:*/		regs.LR = 0x820DE8E0; return 0x820DA1B0;
		/* 820DE8DCh case    6:*/		return 0x820DE8E0;
		  /* 820DE8E0h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DE8E0h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE8E0h case    7:*/		return 0x820DE8E4;
		  /* 820DE8E4h */ case    8:  		/* bc 12, CR0_LT, 144 */
		/* 820DE8E4h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE8E4h case    8:*/		return 0x820DE8E8;
		  /* 820DE8E8h */ case    9:  		/* mr R7, R30 */
		/* 820DE8E8h case    9:*/		regs.R7 = regs.R30;
		/* 820DE8E8h case    9:*/		return 0x820DE8EC;
		  /* 820DE8ECh */ case   10:  		/* mr R6, R30 */
		/* 820DE8ECh case   10:*/		regs.R6 = regs.R30;
		/* 820DE8ECh case   10:*/		return 0x820DE8F0;
		  /* 820DE8F0h */ case   11:  		/* mr R5, R21 */
		/* 820DE8F0h case   11:*/		regs.R5 = regs.R21;
		/* 820DE8F0h case   11:*/		return 0x820DE8F4;
		  /* 820DE8F4h */ case   12:  		/* li R4, 32 */
		/* 820DE8F4h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE8F4h case   12:*/		return 0x820DE8F8;
		  /* 820DE8F8h */ case   13:  		/* addi R3, R1, 288 */
		/* 820DE8F8h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x120);
		/* 820DE8F8h case   13:*/		return 0x820DE8FC;
		  /* 820DE8FCh */ case   14:  		/* bl -246460 */
		/* 820DE8FCh case   14:*/		regs.LR = 0x820DE900; return 0x820A2640;
		/* 820DE8FCh case   14:*/		return 0x820DE900;
		  /* 820DE900h */ case   15:  		/* mr R5, R28 */
		/* 820DE900h case   15:*/		regs.R5 = regs.R28;
		/* 820DE900h case   15:*/		return 0x820DE904;
		  /* 820DE904h */ case   16:  		/* mr R6, R30 */
		/* 820DE904h case   16:*/		regs.R6 = regs.R30;
		/* 820DE904h case   16:*/		return 0x820DE908;
		  /* 820DE908h */ case   17:  		/* li R4, 32 */
		/* 820DE908h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE908h case   17:*/		return 0x820DE90C;
		  /* 820DE90Ch */ case   18:  		/* addi R3, R1, 256 */
		/* 820DE90Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 820DE90Ch case   18:*/		return 0x820DE910;
		  /* 820DE910h */ case   19:  		/* bl -246480 */
		/* 820DE910h case   19:*/		regs.LR = 0x820DE914; return 0x820A2640;
		/* 820DE910h case   19:*/		return 0x820DE914;
		  /* 820DE914h */ case   20:  		/* mr R5, R25 */
		/* 820DE914h case   20:*/		regs.R5 = regs.R25;
		/* 820DE914h case   20:*/		return 0x820DE918;
		  /* 820DE918h */ case   21:  		/* mr R6, R30 */
		/* 820DE918h case   21:*/		regs.R6 = regs.R30;
		/* 820DE918h case   21:*/		return 0x820DE91C;
		  /* 820DE91Ch */ case   22:  		/* li R4, 32 */
		/* 820DE91Ch case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE91Ch case   22:*/		return 0x820DE920;
		  /* 820DE920h */ case   23:  		/* addi R3, R1, 128 */
		/* 820DE920h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DE920h case   23:*/		return 0x820DE924;
		  /* 820DE924h */ case   24:  		/* bl -246500 */
		/* 820DE924h case   24:*/		regs.LR = 0x820DE928; return 0x820A2640;
		/* 820DE924h case   24:*/		return 0x820DE928;
		  /* 820DE928h */ case   25:  		/* mr R5, R24 */
		/* 820DE928h case   25:*/		regs.R5 = regs.R24;
		/* 820DE928h case   25:*/		return 0x820DE92C;
		  /* 820DE92Ch */ case   26:  		/* mr R6, R30 */
		/* 820DE92Ch case   26:*/		regs.R6 = regs.R30;
		/* 820DE92Ch case   26:*/		return 0x820DE930;
		  /* 820DE930h */ case   27:  		/* li R4, 32 */
		/* 820DE930h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE930h case   27:*/		return 0x820DE934;
		  /* 820DE934h */ case   28:  		/* addi R3, R1, 160 */
		/* 820DE934h case   28:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DE934h case   28:*/		return 0x820DE938;
		  /* 820DE938h */ case   29:  		/* bl -246520 */
		/* 820DE938h case   29:*/		regs.LR = 0x820DE93C; return 0x820A2640;
		/* 820DE938h case   29:*/		return 0x820DE93C;
		  /* 820DE93Ch */ case   30:  		/* mr R4, R29 */
		/* 820DE93Ch case   30:*/		regs.R4 = regs.R29;
		/* 820DE93Ch case   30:*/		return 0x820DE940;
		  /* 820DE940h */ case   31:  		/* addi R8, R1, 256 */
		/* 820DE940h case   31:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x100);
		/* 820DE940h case   31:*/		return 0x820DE944;
		  /* 820DE944h */ case   32:  		/* addi R7, R1, 128 */
		/* 820DE944h case   32:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DE944h case   32:*/		return 0x820DE948;
		  /* 820DE948h */ case   33:  		/* addi R6, R1, 160 */
		/* 820DE948h case   33:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DE948h case   33:*/		return 0x820DE94C;
		  /* 820DE94Ch */ case   34:  		/* addi R5, R1, 288 */
		/* 820DE94Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 820DE94Ch case   34:*/		return 0x820DE950;
		  /* 820DE950h */ case   35:  		/* mr R3, R31 */
		/* 820DE950h case   35:*/		regs.R3 = regs.R31;
		/* 820DE950h case   35:*/		return 0x820DE954;
		  /* 820DE954h */ case   36:  		/* bl -18556 */
		/* 820DE954h case   36:*/		regs.LR = 0x820DE958; return 0x820DA0D8;
		/* 820DE954h case   36:*/		return 0x820DE958;
		  /* 820DE958h */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 820DE958h case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE958h case   37:*/		return 0x820DE95C;
		  /* 820DE95Ch */ case   38:  		/* bc 12, CR0_LT, 24 */
		/* 820DE95Ch case   38:*/		if ( regs.CR[0].lt ) { return 0x820DE974;  }
		/* 820DE95Ch case   38:*/		return 0x820DE960;
		  /* 820DE960h */ case   39:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DE960h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DE960h case   39:*/		return 0x820DE964;
		  /* 820DE964h */ case   40:  		/* addi R30, R30, 1 */
		/* 820DE964h case   40:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DE964h case   40:*/		return 0x820DE968;
		  /* 820DE968h */ case   41:  		/* cmplw CR6, R30, R11 */
		/* 820DE968h case   41:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DE968h case   41:*/		return 0x820DE96C;
		  /* 820DE96Ch */ case   42:  		/* bc 12, CR6_LT, -148 */
		/* 820DE96Ch case   42:*/		if ( regs.CR[6].lt ) { return 0x820DE8D8;  }
		/* 820DE96Ch case   42:*/		return 0x820DE970;
	}
	return 0x820DE970;
} // Block from 820DE8C4h-820DE970h (43 instructions)

//////////////////////////////////////////////////////
// Block at 820DE970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE970);
		  /* 820DE970h */ case    0:  		/* li R3, 0 */
		/* 820DE970h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DE970h case    0:*/		return 0x820DE974;
	}
	return 0x820DE974;
} // Block from 820DE970h-820DE974h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DE974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE974);
		  /* 820DE974h */ case    0:  		/* addi R1, R1, 416 */
		/* 820DE974h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 820DE974h case    0:*/		return 0x820DE978;
		  /* 820DE978h */ case    1:  		/* b -317164 */
		/* 820DE978h case    1:*/		return 0x8209128C;
		/* 820DE978h case    1:*/		return 0x820DE97C;
		  /* 820DE97Ch */ case    2:  		/* nop */
		/* 820DE97Ch case    2:*/		cpu::op::nop();
		/* 820DE97Ch case    2:*/		return 0x820DE980;
	}
	return 0x820DE980;
} // Block from 820DE974h-820DE980h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DE980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DE980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DE980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DE980);
		  /* 820DE980h */ case    0:  		/* mfspr R12, LR */
		/* 820DE980h case    0:*/		regs.R12 = regs.LR;
		/* 820DE980h case    0:*/		return 0x820DE984;
		  /* 820DE984h */ case    1:  		/* bl -317224 */
		/* 820DE984h case    1:*/		regs.LR = 0x820DE988; return 0x8209125C;
		/* 820DE984h case    1:*/		return 0x820DE988;
		  /* 820DE988h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 820DE988h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 820DE988h case    2:*/		return 0x820DE98C;
		  /* 820DE98Ch */ case    3:  		/* mr R30, R3 */
		/* 820DE98Ch case    3:*/		regs.R30 = regs.R3;
		/* 820DE98Ch case    3:*/		return 0x820DE990;
		  /* 820DE990h */ case    4:  		/* mr R29, R4 */
		/* 820DE990h case    4:*/		regs.R29 = regs.R4;
		/* 820DE990h case    4:*/		return 0x820DE994;
		  /* 820DE994h */ case    5:  		/* mr R31, R5 */
		/* 820DE994h case    5:*/		regs.R31 = regs.R5;
		/* 820DE994h case    5:*/		return 0x820DE998;
		  /* 820DE998h */ case    6:  		/* bl -18408 */
		/* 820DE998h case    6:*/		regs.LR = 0x820DE99C; return 0x820DA1B0;
		/* 820DE998h case    6:*/		return 0x820DE99C;
		  /* 820DE99Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DE99Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DE99Ch case    7:*/		return 0x820DE9A0;
		  /* 820DE9A0h */ case    8:  		/* bc 12, CR0_LT, 152 */
		/* 820DE9A0h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DEA38;  }
		/* 820DE9A0h case    8:*/		return 0x820DE9A4;
		  /* 820DE9A4h */ case    9:  		/* li R11, 5 */
		/* 820DE9A4h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 820DE9A4h case    9:*/		return 0x820DE9A8;
		  /* 820DE9A8h */ case   10:  		/* mr R4, R29 */
		/* 820DE9A8h case   10:*/		regs.R4 = regs.R29;
		/* 820DE9A8h case   10:*/		return 0x820DE9AC;
		  /* 820DE9ACh */ case   11:  		/* li R7, 0 */
		/* 820DE9ACh case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DE9ACh case   11:*/		return 0x820DE9B0;
		  /* 820DE9B0h */ case   12:  		/* rlwimi R4, R11, 29, 0, 20 */
		/* 820DE9B0h case   12:*/		cpu::op::rlwimi<0,29,0,20>(regs,&regs.R4,regs.R11);
		/* 820DE9B0h case   12:*/		return 0x820DE9B4;
		  /* 820DE9B4h */ case   13:  		/* li R6, 64 */
		/* 820DE9B4h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x40);
		/* 820DE9B4h case   13:*/		return 0x820DE9B8;
		  /* 820DE9B8h */ case   14:  		/* addi R5, R1, 176 */
		/* 820DE9B8h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 820DE9B8h case   14:*/		return 0x820DE9BC;
		  /* 820DE9BCh */ case   15:  		/* mr R3, R30 */
		/* 820DE9BCh case   15:*/		regs.R3 = regs.R30;
		/* 820DE9BCh case   15:*/		return 0x820DE9C0;
		  /* 820DE9C0h */ case   16:  		/* bl -18024 */
		/* 820DE9C0h case   16:*/		regs.LR = 0x820DE9C4; return 0x820DA358;
		/* 820DE9C0h case   16:*/		return 0x820DE9C4;
		  /* 820DE9C4h */ case   17:  		/* li R7, 0 */
		/* 820DE9C4h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DE9C4h case   17:*/		return 0x820DE9C8;
		  /* 820DE9C8h */ case   18:  		/* li R6, 0 */
		/* 820DE9C8h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820DE9C8h case   18:*/		return 0x820DE9CC;
		  /* 820DE9CCh */ case   19:  		/* addi R5, R1, 176 */
		/* 820DE9CCh case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 820DE9CCh case   19:*/		return 0x820DE9D0;
		  /* 820DE9D0h */ case   20:  		/* li R4, 32 */
		/* 820DE9D0h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DE9D0h case   20:*/		return 0x820DE9D4;
		  /* 820DE9D4h */ case   21:  		/* addi R3, R1, 144 */
		/* 820DE9D4h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820DE9D4h case   21:*/		return 0x820DE9D8;
		  /* 820DE9D8h */ case   22:  		/* bl -246680 */
		/* 820DE9D8h case   22:*/		regs.LR = 0x820DE9DC; return 0x820A2640;
		/* 820DE9D8h case   22:*/		return 0x820DE9DC;
		  /* 820DE9DCh */ case   23:  		/* lfs FR4, <#[R31 + 12]> */
		/* 820DE9DCh case   23:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R31 + 0x0000000C) );
		/* 820DE9DCh case   23:*/		return 0x820DE9E0;
		  /* 820DE9E0h */ case   24:  		/* lfs FR3, <#[R31 + 8]> */
		/* 820DE9E0h case   24:*/		cpu::mem::load32f( regs, &regs.FR3, (uint32)(regs.R31 + 0x00000008) );
		/* 820DE9E0h case   24:*/		return 0x820DE9E4;
		  /* 820DE9E4h */ case   25:  		/* lis R11, -32254 */
		/* 820DE9E4h case   25:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DE9E4h case   25:*/		return 0x820DE9E8;
		  /* 820DE9E8h */ case   26:  		/* lfs FR2, <#[R31 + 4]> */
		/* 820DE9E8h case   26:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R31 + 0x00000004) );
		/* 820DE9E8h case   26:*/		return 0x820DE9EC;
		  /* 820DE9ECh */ case   27:  		/* addi R5, R1, 144 */
		/* 820DE9ECh case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 820DE9ECh case   27:*/		return 0x820DE9F0;
		  /* 820DE9F0h */ case   28:  		/* lfs FR1, <#[R31]> */
		/* 820DE9F0h case   28:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 820DE9F0h case   28:*/		return 0x820DE9F4;
		  /* 820DE9F4h */ case   29:  		/* addi R4, R11, -28956 */
		/* 820DE9F4h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8EE4);
		/* 820DE9F4h case   29:*/		return 0x820DE9F8;
		  /* 820DE9F8h */ case   30:  		/* stfd FR4, <#[R1 + 64]> */
		/* 820DE9F8h case   30:*/		cpu::mem::store64f( regs, regs.FR4, (uint32)(regs.R1 + 0x00000040) );
		/* 820DE9F8h case   30:*/		return 0x820DE9FC;
		  /* 820DE9FCh */ case   31:  		/* ld R9, <#[R1 + 64]> */
		/* 820DE9FCh case   31:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 820DE9FCh case   31:*/		return 0x820DEA00;
		  /* 820DEA00h */ case   32:  		/* stfd FR3, <#[R1 + 56]> */
		/* 820DEA00h case   32:*/		cpu::mem::store64f( regs, regs.FR3, (uint32)(regs.R1 + 0x00000038) );
		/* 820DEA00h case   32:*/		return 0x820DEA04;
		  /* 820DEA04h */ case   33:  		/* ld R8, <#[R1 + 56]> */
		/* 820DEA04h case   33:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 820DEA04h case   33:*/		return 0x820DEA08;
		  /* 820DEA08h */ case   34:  		/* stfd FR2, <#[R1 + 48]> */
		/* 820DEA08h case   34:*/		cpu::mem::store64f( regs, regs.FR2, (uint32)(regs.R1 + 0x00000030) );
		/* 820DEA08h case   34:*/		return 0x820DEA0C;
		  /* 820DEA0Ch */ case   35:  		/* ld R7, <#[R1 + 48]> */
		/* 820DEA0Ch case   35:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 820DEA0Ch case   35:*/		return 0x820DEA10;
		  /* 820DEA10h */ case   36:  		/* stfd FR1, <#[R1 + 40]> */
		/* 820DEA10h case   36:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000028) );
		/* 820DEA10h case   36:*/		return 0x820DEA14;
		  /* 820DEA14h */ case   37:  		/* ld R6, <#[R1 + 40]> */
		/* 820DEA14h case   37:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 820DEA14h case   37:*/		return 0x820DEA18;
		  /* 820DEA18h */ case   38:  		/* mr R3, R30 */
		/* 820DEA18h case   38:*/		regs.R3 = regs.R30;
		/* 820DEA18h case   38:*/		return 0x820DEA1C;
		  /* 820DEA1Ch */ case   39:  		/* bl -18756 */
		/* 820DEA1Ch case   39:*/		regs.LR = 0x820DEA20; return 0x820DA0D8;
		/* 820DEA1Ch case   39:*/		return 0x820DEA20;
		  /* 820DEA20h */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 820DEA20h case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DEA20h case   40:*/		return 0x820DEA24;
		  /* 820DEA24h */ case   41:  		/* bc 12, CR0_LT, 20 */
		/* 820DEA24h case   41:*/		if ( regs.CR[0].lt ) { return 0x820DEA38;  }
		/* 820DEA24h case   41:*/		return 0x820DEA28;
		  /* 820DEA28h */ case   42:  		/* mr R5, R31 */
		/* 820DEA28h case   42:*/		regs.R5 = regs.R31;
		/* 820DEA28h case   42:*/		return 0x820DEA2C;
		  /* 820DEA2Ch */ case   43:  		/* mr R4, R29 */
		/* 820DEA2Ch case   43:*/		regs.R4 = regs.R29;
		/* 820DEA2Ch case   43:*/		return 0x820DEA30;
		  /* 820DEA30h */ case   44:  		/* mr R3, R30 */
		/* 820DEA30h case   44:*/		regs.R3 = regs.R30;
		/* 820DEA30h case   44:*/		return 0x820DEA34;
		  /* 820DEA34h */ case   45:  		/* bl 97468 */
		/* 820DEA34h case   45:*/		regs.LR = 0x820DEA38; return 0x820F66F0;
		/* 820DEA34h case   45:*/		return 0x820DEA38;
	}
	return 0x820DEA38;
} // Block from 820DE980h-820DEA38h (46 instructions)

//////////////////////////////////////////////////////
// Block at 820DEA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEA38);
		  /* 820DEA38h */ case    0:  		/* addi R1, R1, 272 */
		/* 820DEA38h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 820DEA38h case    0:*/		return 0x820DEA3C;
		  /* 820DEA3Ch */ case    1:  		/* b -317328 */
		/* 820DEA3Ch case    1:*/		return 0x820912AC;
		/* 820DEA3Ch case    1:*/		return 0x820DEA40;
	}
	return 0x820DEA40;
} // Block from 820DEA38h-820DEA40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DEA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEA40);
		  /* 820DEA40h */ case    0:  		/* mfspr R12, LR */
		/* 820DEA40h case    0:*/		regs.R12 = regs.LR;
		/* 820DEA40h case    0:*/		return 0x820DEA44;
		  /* 820DEA44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEA44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEA44h case    1:*/		return 0x820DEA48;
		  /* 820DEA48h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820DEA48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820DEA48h case    2:*/		return 0x820DEA4C;
		  /* 820DEA4Ch */ case    3:  		/* mr R11, R4 */
		/* 820DEA4Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DEA4Ch case    3:*/		return 0x820DEA50;
		  /* 820DEA50h */ case    4:  		/* mr R9, R8 */
		/* 820DEA50h case    4:*/		regs.R9 = regs.R8;
		/* 820DEA50h case    4:*/		return 0x820DEA54;
		  /* 820DEA54h */ case    5:  		/* cmplw CR6, R5, R6 */
		/* 820DEA54h case    5:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R6);
		/* 820DEA54h case    5:*/		return 0x820DEA58;
		  /* 820DEA58h */ case    6:  		/* bc 4, CR6_EQ, 112 */
		/* 820DEA58h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820DEAC8;  }
		/* 820DEA58h case    6:*/		return 0x820DEA5C;
		  /* 820DEA5Ch */ case    7:  		/* cmplw CR6, R5, R7 */
		/* 820DEA5Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R7);
		/* 820DEA5Ch case    7:*/		return 0x820DEA60;
		  /* 820DEA60h */ case    8:  		/* bc 4, CR6_EQ, 104 */
		/* 820DEA60h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820DEAC8;  }
		/* 820DEA60h case    8:*/		return 0x820DEA64;
		  /* 820DEA64h */ case    9:  		/* cmplw CR6, R5, R8 */
		/* 820DEA64h case    9:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R8);
		/* 820DEA64h case    9:*/		return 0x820DEA68;
		  /* 820DEA68h */ case   10:  		/* bc 4, CR6_EQ, 96 */
		/* 820DEA68h case   10:*/		if ( !regs.CR[6].eq ) { return 0x820DEAC8;  }
		/* 820DEA68h case   10:*/		return 0x820DEA6C;
		  /* 820DEA6Ch */ case   11:  		/* cmplwi CR6, R5, 1 */
		/* 820DEA6Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000001);
		/* 820DEA6Ch case   11:*/		return 0x820DEA70;
		  /* 820DEA70h */ case   12:  		/* bc 12, CR6_LT, 68 */
		/* 820DEA70h case   12:*/		if ( regs.CR[6].lt ) { return 0x820DEAB4;  }
		/* 820DEA70h case   12:*/		return 0x820DEA74;
		  /* 820DEA74h */ case   13:  		/* bc 12, CR6_EQ, 52 */
		/* 820DEA74h case   13:*/		if ( regs.CR[6].eq ) { return 0x820DEAA8;  }
		/* 820DEA74h case   13:*/		return 0x820DEA78;
		  /* 820DEA78h */ case   14:  		/* cmplwi CR6, R5, 3 */
		/* 820DEA78h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000003);
		/* 820DEA78h case   14:*/		return 0x820DEA7C;
		  /* 820DEA7Ch */ case   15:  		/* bc 12, CR6_LT, 32 */
		/* 820DEA7Ch case   15:*/		if ( regs.CR[6].lt ) { return 0x820DEA9C;  }
		/* 820DEA7Ch case   15:*/		return 0x820DEA80;
		  /* 820DEA80h */ case   16:  		/* bc 12, CR6_EQ, 16 */
		/* 820DEA80h case   16:*/		if ( regs.CR[6].eq ) { return 0x820DEA90;  }
		/* 820DEA80h case   16:*/		return 0x820DEA84;
		  /* 820DEA84h */ case   17:  		/* lis R3, -32768 */
		/* 820DEA84h case   17:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820DEA84h case   17:*/		return 0x820DEA88;
		  /* 820DEA88h */ case   18:  		/* ori R3, R3, 16389 */
		/* 820DEA88h case   18:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820DEA88h case   18:*/		return 0x820DEA8C;
		  /* 820DEA8Ch */ case   19:  		/* b 88 */
		/* 820DEA8Ch case   19:*/		return 0x820DEAE4;
		/* 820DEA8Ch case   19:*/		return 0x820DEA90;
	}
	return 0x820DEA90;
} // Block from 820DEA40h-820DEA90h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820DEA90h
// Function '?EmitABSFunction@C30SWProgramCI@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEA90);
		  /* 820DEA90h */ case    0:  		/* lis R10, -32254 */
		/* 820DEA90h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEA90h case    0:*/		return 0x820DEA94;
		  /* 820DEA94h */ case    1:  		/* addi R4, R10, -28824 */
		/* 820DEA94h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8F68);
		/* 820DEA94h case    1:*/		return 0x820DEA98;
		  /* 820DEA98h */ case    2:  		/* b 36 */
		/* 820DEA98h case    2:*/		return 0x820DEABC;
		/* 820DEA98h case    2:*/		return 0x820DEA9C;
	}
	return 0x820DEA9C;
} // Block from 820DEA90h-820DEA9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DEA9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEA9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEA9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEA9C);
		  /* 820DEA9Ch */ case    0:  		/* lis R10, -32254 */
		/* 820DEA9Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEA9Ch case    0:*/		return 0x820DEAA0;
		  /* 820DEAA0h */ case    1:  		/* addi R4, R10, -28844 */
		/* 820DEAA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8F54);
		/* 820DEAA0h case    1:*/		return 0x820DEAA4;
		  /* 820DEAA4h */ case    2:  		/* b 24 */
		/* 820DEAA4h case    2:*/		return 0x820DEABC;
		/* 820DEAA4h case    2:*/		return 0x820DEAA8;
	}
	return 0x820DEAA8;
} // Block from 820DEA9Ch-820DEAA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DEAA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEAA8);
		  /* 820DEAA8h */ case    0:  		/* lis R10, -32254 */
		/* 820DEAA8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEAA8h case    0:*/		return 0x820DEAAC;
		  /* 820DEAACh */ case    1:  		/* addi R4, R10, -28864 */
		/* 820DEAACh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8F40);
		/* 820DEAACh case    1:*/		return 0x820DEAB0;
		  /* 820DEAB0h */ case    2:  		/* b 12 */
		/* 820DEAB0h case    2:*/		return 0x820DEABC;
		/* 820DEAB0h case    2:*/		return 0x820DEAB4;
	}
	return 0x820DEAB4;
} // Block from 820DEAA8h-820DEAB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DEAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEAB4);
		  /* 820DEAB4h */ case    0:  		/* lis R10, -32254 */
		/* 820DEAB4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEAB4h case    0:*/		return 0x820DEAB8;
		  /* 820DEAB8h */ case    1:  		/* addi R4, R10, -28884 */
		/* 820DEAB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8F2C);
		/* 820DEAB8h case    1:*/		return 0x820DEABC;
	}
	return 0x820DEABC;
} // Block from 820DEAB4h-820DEABCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DEABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEABC);
		  /* 820DEABCh */ case    0:  		/* mr R5, R11 */
		/* 820DEABCh case    0:*/		regs.R5 = regs.R11;
		/* 820DEABCh case    0:*/		return 0x820DEAC0;
		  /* 820DEAC0h */ case    1:  		/* bl -18920 */
		/* 820DEAC0h case    1:*/		regs.LR = 0x820DEAC4; return 0x820DA0D8;
		/* 820DEAC0h case    1:*/		return 0x820DEAC4;
		  /* 820DEAC4h */ case    2:  		/* b 32 */
		/* 820DEAC4h case    2:*/		return 0x820DEAE4;
		/* 820DEAC4h case    2:*/		return 0x820DEAC8;
	}
	return 0x820DEAC8;
} // Block from 820DEABCh-820DEAC8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DEAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEAC8);
		  /* 820DEAC8h */ case    0:  		/* mr R8, R7 */
		/* 820DEAC8h case    0:*/		regs.R8 = regs.R7;
		/* 820DEAC8h case    0:*/		return 0x820DEACC;
		  /* 820DEACCh */ case    1:  		/* lis R10, -32254 */
		/* 820DEACCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEACCh case    1:*/		return 0x820DEAD0;
		  /* 820DEAD0h */ case    2:  		/* mr R7, R6 */
		/* 820DEAD0h case    2:*/		regs.R7 = regs.R6;
		/* 820DEAD0h case    2:*/		return 0x820DEAD4;
		  /* 820DEAD4h */ case    3:  		/* mr R6, R5 */
		/* 820DEAD4h case    3:*/		regs.R6 = regs.R5;
		/* 820DEAD4h case    3:*/		return 0x820DEAD8;
		  /* 820DEAD8h */ case    4:  		/* addi R4, R10, -28920 */
		/* 820DEAD8h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8F08);
		/* 820DEAD8h case    4:*/		return 0x820DEADC;
		  /* 820DEADCh */ case    5:  		/* mr R5, R11 */
		/* 820DEADCh case    5:*/		regs.R5 = regs.R11;
		/* 820DEADCh case    5:*/		return 0x820DEAE0;
		  /* 820DEAE0h */ case    6:  		/* bl -18952 */
		/* 820DEAE0h case    6:*/		regs.LR = 0x820DEAE4; return 0x820DA0D8;
		/* 820DEAE0h case    6:*/		return 0x820DEAE4;
	}
	return 0x820DEAE4;
} // Block from 820DEAC8h-820DEAE4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DEAE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEAE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEAE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEAE4);
		  /* 820DEAE4h */ case    0:  		/* addi R1, R1, 144 */
		/* 820DEAE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820DEAE4h case    0:*/		return 0x820DEAE8;
		  /* 820DEAE8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEAE8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEAE8h case    1:*/		return 0x820DEAEC;
		  /* 820DEAECh */ case    2:  		/* mtspr LR, R12 */
		/* 820DEAECh case    2:*/		regs.LR = regs.R12;
		/* 820DEAECh case    2:*/		return 0x820DEAF0;
		  /* 820DEAF0h */ case    3:  		/* bclr 20, CR0_LT */
		/* 820DEAF0h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEAF0h case    3:*/		return 0x820DEAF4;
	}
	return 0x820DEAF4;
} // Block from 820DEAE4h-820DEAF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DEAF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEAF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEAF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEAF4);
		  /* 820DEAF4h */ case    0:  		/* nop */
		/* 820DEAF4h case    0:*/		cpu::op::nop();
		/* 820DEAF4h case    0:*/		return 0x820DEAF8;
	}
	return 0x820DEAF8;
} // Block from 820DEAF4h-820DEAF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEAF8);
		  /* 820DEAF8h */ case    0:  		/* mfspr R12, LR */
		/* 820DEAF8h case    0:*/		regs.R12 = regs.LR;
		/* 820DEAF8h case    0:*/		return 0x820DEAFC;
		  /* 820DEAFCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEAFCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEAFCh case    1:*/		return 0x820DEB00;
		  /* 820DEB00h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DEB00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DEB00h case    2:*/		return 0x820DEB04;
		  /* 820DEB04h */ case    3:  		/* mr R11, R4 */
		/* 820DEB04h case    3:*/		regs.R11 = regs.R4;
		/* 820DEB04h case    3:*/		return 0x820DEB08;
		  /* 820DEB08h */ case    4:  		/* lis R10, -32254 */
		/* 820DEB08h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEB08h case    4:*/		return 0x820DEB0C;
		  /* 820DEB0Ch */ case    5:  		/* mr R6, R5 */
		/* 820DEB0Ch case    5:*/		regs.R6 = regs.R5;
		/* 820DEB0Ch case    5:*/		return 0x820DEB10;
		  /* 820DEB10h */ case    6:  		/* addi R4, R10, -28804 */
		/* 820DEB10h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8F7C);
		/* 820DEB10h case    6:*/		return 0x820DEB14;
		  /* 820DEB14h */ case    7:  		/* mr R5, R11 */
		/* 820DEB14h case    7:*/		regs.R5 = regs.R11;
		/* 820DEB14h case    7:*/		return 0x820DEB18;
		  /* 820DEB18h */ case    8:  		/* bl -19008 */
		/* 820DEB18h case    8:*/		regs.LR = 0x820DEB1C; return 0x820DA0D8;
		/* 820DEB18h case    8:*/		return 0x820DEB1C;
		  /* 820DEB1Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DEB1Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DEB1Ch case    9:*/		return 0x820DEB20;
		  /* 820DEB20h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEB20h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEB20h case   10:*/		return 0x820DEB24;
		  /* 820DEB24h */ case   11:  		/* mtspr LR, R12 */
		/* 820DEB24h case   11:*/		regs.LR = regs.R12;
		/* 820DEB24h case   11:*/		return 0x820DEB28;
		  /* 820DEB28h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DEB28h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEB28h case   12:*/		return 0x820DEB2C;
	}
	return 0x820DEB2C;
} // Block from 820DEAF8h-820DEB2Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DEB2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEB2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEB2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEB2C);
		  /* 820DEB2Ch */ case    0:  		/* nop */
		/* 820DEB2Ch case    0:*/		cpu::op::nop();
		/* 820DEB2Ch case    0:*/		return 0x820DEB30;
	}
	return 0x820DEB30;
} // Block from 820DEB2Ch-820DEB30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEB30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEB30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEB30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEB30);
		  /* 820DEB30h */ case    0:  		/* mfspr R12, LR */
		/* 820DEB30h case    0:*/		regs.R12 = regs.LR;
		/* 820DEB30h case    0:*/		return 0x820DEB34;
		  /* 820DEB34h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEB34h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEB34h case    1:*/		return 0x820DEB38;
		  /* 820DEB38h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DEB38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DEB38h case    2:*/		return 0x820DEB3C;
		  /* 820DEB3Ch */ case    3:  		/* mr R11, R4 */
		/* 820DEB3Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DEB3Ch case    3:*/		return 0x820DEB40;
		  /* 820DEB40h */ case    4:  		/* lis R10, -32254 */
		/* 820DEB40h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEB40h case    4:*/		return 0x820DEB44;
		  /* 820DEB44h */ case    5:  		/* mr R6, R5 */
		/* 820DEB44h case    5:*/		regs.R6 = regs.R5;
		/* 820DEB44h case    5:*/		return 0x820DEB48;
		  /* 820DEB48h */ case    6:  		/* addi R4, R10, -28780 */
		/* 820DEB48h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8F94);
		/* 820DEB48h case    6:*/		return 0x820DEB4C;
		  /* 820DEB4Ch */ case    7:  		/* mr R5, R11 */
		/* 820DEB4Ch case    7:*/		regs.R5 = regs.R11;
		/* 820DEB4Ch case    7:*/		return 0x820DEB50;
		  /* 820DEB50h */ case    8:  		/* bl -19064 */
		/* 820DEB50h case    8:*/		regs.LR = 0x820DEB54; return 0x820DA0D8;
		/* 820DEB50h case    8:*/		return 0x820DEB54;
		  /* 820DEB54h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DEB54h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DEB54h case    9:*/		return 0x820DEB58;
		  /* 820DEB58h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEB58h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEB58h case   10:*/		return 0x820DEB5C;
		  /* 820DEB5Ch */ case   11:  		/* mtspr LR, R12 */
		/* 820DEB5Ch case   11:*/		regs.LR = regs.R12;
		/* 820DEB5Ch case   11:*/		return 0x820DEB60;
		  /* 820DEB60h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DEB60h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEB60h case   12:*/		return 0x820DEB64;
	}
	return 0x820DEB64;
} // Block from 820DEB30h-820DEB64h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DEB64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEB64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEB64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEB64);
		  /* 820DEB64h */ case    0:  		/* nop */
		/* 820DEB64h case    0:*/		cpu::op::nop();
		/* 820DEB64h case    0:*/		return 0x820DEB68;
	}
	return 0x820DEB68;
} // Block from 820DEB64h-820DEB68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEB68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEB68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEB68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEB68);
		  /* 820DEB68h */ case    0:  		/* mfspr R12, LR */
		/* 820DEB68h case    0:*/		regs.R12 = regs.LR;
		/* 820DEB68h case    0:*/		return 0x820DEB6C;
		  /* 820DEB6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEB6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEB6Ch case    1:*/		return 0x820DEB70;
		  /* 820DEB70h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DEB70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DEB70h case    2:*/		return 0x820DEB74;
		  /* 820DEB74h */ case    3:  		/* mr R11, R4 */
		/* 820DEB74h case    3:*/		regs.R11 = regs.R4;
		/* 820DEB74h case    3:*/		return 0x820DEB78;
		  /* 820DEB78h */ case    4:  		/* lis R10, -32254 */
		/* 820DEB78h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEB78h case    4:*/		return 0x820DEB7C;
		  /* 820DEB7Ch */ case    5:  		/* mr R6, R5 */
		/* 820DEB7Ch case    5:*/		regs.R6 = regs.R5;
		/* 820DEB7Ch case    5:*/		return 0x820DEB80;
		  /* 820DEB80h */ case    6:  		/* addi R4, R10, -28756 */
		/* 820DEB80h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8FAC);
		/* 820DEB80h case    6:*/		return 0x820DEB84;
		  /* 820DEB84h */ case    7:  		/* mr R5, R11 */
		/* 820DEB84h case    7:*/		regs.R5 = regs.R11;
		/* 820DEB84h case    7:*/		return 0x820DEB88;
		  /* 820DEB88h */ case    8:  		/* bl -19120 */
		/* 820DEB88h case    8:*/		regs.LR = 0x820DEB8C; return 0x820DA0D8;
		/* 820DEB88h case    8:*/		return 0x820DEB8C;
		  /* 820DEB8Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DEB8Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DEB8Ch case    9:*/		return 0x820DEB90;
		  /* 820DEB90h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEB90h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEB90h case   10:*/		return 0x820DEB94;
		  /* 820DEB94h */ case   11:  		/* mtspr LR, R12 */
		/* 820DEB94h case   11:*/		regs.LR = regs.R12;
		/* 820DEB94h case   11:*/		return 0x820DEB98;
		  /* 820DEB98h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DEB98h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEB98h case   12:*/		return 0x820DEB9C;
	}
	return 0x820DEB9C;
} // Block from 820DEB68h-820DEB9Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DEB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEB9C);
		  /* 820DEB9Ch */ case    0:  		/* nop */
		/* 820DEB9Ch case    0:*/		cpu::op::nop();
		/* 820DEB9Ch case    0:*/		return 0x820DEBA0;
	}
	return 0x820DEBA0;
} // Block from 820DEB9Ch-820DEBA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEBA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEBA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEBA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEBA0);
		  /* 820DEBA0h */ case    0:  		/* mfspr R12, LR */
		/* 820DEBA0h case    0:*/		regs.R12 = regs.LR;
		/* 820DEBA0h case    0:*/		return 0x820DEBA4;
		  /* 820DEBA4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEBA4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEBA4h case    1:*/		return 0x820DEBA8;
		  /* 820DEBA8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DEBA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DEBA8h case    2:*/		return 0x820DEBAC;
		  /* 820DEBACh */ case    3:  		/* mr R11, R4 */
		/* 820DEBACh case    3:*/		regs.R11 = regs.R4;
		/* 820DEBACh case    3:*/		return 0x820DEBB0;
		  /* 820DEBB0h */ case    4:  		/* lis R10, -32254 */
		/* 820DEBB0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEBB0h case    4:*/		return 0x820DEBB4;
		  /* 820DEBB4h */ case    5:  		/* mr R6, R5 */
		/* 820DEBB4h case    5:*/		regs.R6 = regs.R5;
		/* 820DEBB4h case    5:*/		return 0x820DEBB8;
		  /* 820DEBB8h */ case    6:  		/* addi R4, R10, -28732 */
		/* 820DEBB8h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8FC4);
		/* 820DEBB8h case    6:*/		return 0x820DEBBC;
		  /* 820DEBBCh */ case    7:  		/* mr R5, R11 */
		/* 820DEBBCh case    7:*/		regs.R5 = regs.R11;
		/* 820DEBBCh case    7:*/		return 0x820DEBC0;
		  /* 820DEBC0h */ case    8:  		/* bl -19176 */
		/* 820DEBC0h case    8:*/		regs.LR = 0x820DEBC4; return 0x820DA0D8;
		/* 820DEBC0h case    8:*/		return 0x820DEBC4;
		  /* 820DEBC4h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DEBC4h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DEBC4h case    9:*/		return 0x820DEBC8;
		  /* 820DEBC8h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEBC8h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEBC8h case   10:*/		return 0x820DEBCC;
		  /* 820DEBCCh */ case   11:  		/* mtspr LR, R12 */
		/* 820DEBCCh case   11:*/		regs.LR = regs.R12;
		/* 820DEBCCh case   11:*/		return 0x820DEBD0;
		  /* 820DEBD0h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DEBD0h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEBD0h case   12:*/		return 0x820DEBD4;
	}
	return 0x820DEBD4;
} // Block from 820DEBA0h-820DEBD4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DEBD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEBD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEBD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEBD4);
		  /* 820DEBD4h */ case    0:  		/* nop */
		/* 820DEBD4h case    0:*/		cpu::op::nop();
		/* 820DEBD4h case    0:*/		return 0x820DEBD8;
	}
	return 0x820DEBD8;
} // Block from 820DEBD4h-820DEBD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEBD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEBD8);
		  /* 820DEBD8h */ case    0:  		/* mfspr R12, LR */
		/* 820DEBD8h case    0:*/		regs.R12 = regs.LR;
		/* 820DEBD8h case    0:*/		return 0x820DEBDC;
		  /* 820DEBDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEBDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEBDCh case    1:*/		return 0x820DEBE0;
		  /* 820DEBE0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DEBE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DEBE0h case    2:*/		return 0x820DEBE4;
		  /* 820DEBE4h */ case    3:  		/* lis R11, -32254 */
		/* 820DEBE4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DEBE4h case    3:*/		return 0x820DEBE8;
		  /* 820DEBE8h */ case    4:  		/* addi R4, R11, -28708 */
		/* 820DEBE8h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8FDC);
		/* 820DEBE8h case    4:*/		return 0x820DEBEC;
		  /* 820DEBECh */ case    5:  		/* bl -19220 */
		/* 820DEBECh case    5:*/		regs.LR = 0x820DEBF0; return 0x820DA0D8;
		/* 820DEBECh case    5:*/		return 0x820DEBF0;
		  /* 820DEBF0h */ case    6:  		/* addi R1, R1, 112 */
		/* 820DEBF0h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DEBF0h case    6:*/		return 0x820DEBF4;
		  /* 820DEBF4h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEBF4h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEBF4h case    7:*/		return 0x820DEBF8;
	}
	return 0x820DEBF8;
} // Block from 820DEBD8h-820DEBF8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820DEBF8h
// Function '?EmitNRMFunction@C30SWProgramCI@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEBF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEBF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEBF8);
		  /* 820DEBF8h */ case    0:  		/* mtspr LR, R12 */
		/* 820DEBF8h case    0:*/		regs.LR = regs.R12;
		/* 820DEBF8h case    0:*/		return 0x820DEBFC;
		  /* 820DEBFCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 820DEBFCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEBFCh case    1:*/		return 0x820DEC00;
	}
	return 0x820DEC00;
} // Block from 820DEBF8h-820DEC00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DEC00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEC00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEC00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEC00);
		  /* 820DEC00h */ case    0:  		/* mfspr R12, LR */
		/* 820DEC00h case    0:*/		regs.R12 = regs.LR;
		/* 820DEC00h case    0:*/		return 0x820DEC04;
		  /* 820DEC04h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEC04h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEC04h case    1:*/		return 0x820DEC08;
		  /* 820DEC08h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DEC08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DEC08h case    2:*/		return 0x820DEC0C;
		  /* 820DEC0Ch */ case    3:  		/* lis R11, -32254 */
		/* 820DEC0Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DEC0Ch case    3:*/		return 0x820DEC10;
		  /* 820DEC10h */ case    4:  		/* addi R4, R11, -28692 */
		/* 820DEC10h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8FEC);
		/* 820DEC10h case    4:*/		return 0x820DEC14;
		  /* 820DEC14h */ case    5:  		/* bl -19260 */
		/* 820DEC14h case    5:*/		regs.LR = 0x820DEC18; return 0x820DA0D8;
		/* 820DEC14h case    5:*/		return 0x820DEC18;
		  /* 820DEC18h */ case    6:  		/* addi R1, R1, 112 */
		/* 820DEC18h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DEC18h case    6:*/		return 0x820DEC1C;
		  /* 820DEC1Ch */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEC1Ch case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEC1Ch case    7:*/		return 0x820DEC20;
		  /* 820DEC20h */ case    8:  		/* mtspr LR, R12 */
		/* 820DEC20h case    8:*/		regs.LR = regs.R12;
		/* 820DEC20h case    8:*/		return 0x820DEC24;
		  /* 820DEC24h */ case    9:  		/* bclr 20, CR0_LT */
		/* 820DEC24h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEC24h case    9:*/		return 0x820DEC28;
	}
	return 0x820DEC28;
} // Block from 820DEC00h-820DEC28h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DEC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEC28);
		  /* 820DEC28h */ case    0:  		/* mfspr R12, LR */
		/* 820DEC28h case    0:*/		regs.R12 = regs.LR;
		/* 820DEC28h case    0:*/		return 0x820DEC2C;
		  /* 820DEC2Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEC2Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEC2Ch case    1:*/		return 0x820DEC30;
		  /* 820DEC30h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DEC30h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DEC30h case    2:*/		return 0x820DEC34;
		  /* 820DEC34h */ case    3:  		/* mr R11, R4 */
		/* 820DEC34h case    3:*/		regs.R11 = regs.R4;
		/* 820DEC34h case    3:*/		return 0x820DEC38;
		  /* 820DEC38h */ case    4:  		/* lis R10, -32254 */
		/* 820DEC38h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEC38h case    4:*/		return 0x820DEC3C;
		  /* 820DEC3Ch */ case    5:  		/* mr R7, R6 */
		/* 820DEC3Ch case    5:*/		regs.R7 = regs.R6;
		/* 820DEC3Ch case    5:*/		return 0x820DEC40;
		  /* 820DEC40h */ case    6:  		/* mr R6, R5 */
		/* 820DEC40h case    6:*/		regs.R6 = regs.R5;
		/* 820DEC40h case    6:*/		return 0x820DEC44;
		  /* 820DEC44h */ case    7:  		/* addi R4, R10, -28672 */
		/* 820DEC44h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9000);
		/* 820DEC44h case    7:*/		return 0x820DEC48;
		  /* 820DEC48h */ case    8:  		/* mr R5, R11 */
		/* 820DEC48h case    8:*/		regs.R5 = regs.R11;
		/* 820DEC48h case    8:*/		return 0x820DEC4C;
		  /* 820DEC4Ch */ case    9:  		/* bl -19316 */
		/* 820DEC4Ch case    9:*/		regs.LR = 0x820DEC50; return 0x820DA0D8;
		/* 820DEC4Ch case    9:*/		return 0x820DEC50;
		  /* 820DEC50h */ case   10:  		/* addi R1, R1, 128 */
		/* 820DEC50h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DEC50h case   10:*/		return 0x820DEC54;
		  /* 820DEC54h */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEC54h case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEC54h case   11:*/		return 0x820DEC58;
		  /* 820DEC58h */ case   12:  		/* mtspr LR, R12 */
		/* 820DEC58h case   12:*/		regs.LR = regs.R12;
		/* 820DEC58h case   12:*/		return 0x820DEC5C;
		  /* 820DEC5Ch */ case   13:  		/* bclr 20, CR0_LT */
		/* 820DEC5Ch case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEC5Ch case   13:*/		return 0x820DEC60;
	}
	return 0x820DEC60;
} // Block from 820DEC28h-820DEC60h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DEC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEC60);
		  /* 820DEC60h */ case    0:  		/* mfspr R12, LR */
		/* 820DEC60h case    0:*/		regs.R12 = regs.LR;
		/* 820DEC60h case    0:*/		return 0x820DEC64;
		  /* 820DEC64h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEC64h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEC64h case    1:*/		return 0x820DEC68;
		  /* 820DEC68h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DEC68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DEC68h case    2:*/		return 0x820DEC6C;
		  /* 820DEC6Ch */ case    3:  		/* lis R11, -32254 */
		/* 820DEC6Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DEC6Ch case    3:*/		return 0x820DEC70;
		  /* 820DEC70h */ case    4:  		/* mr R5, R4 */
		/* 820DEC70h case    4:*/		regs.R5 = regs.R4;
		/* 820DEC70h case    4:*/		return 0x820DEC74;
		  /* 820DEC74h */ case    5:  		/* addi R4, R11, -28644 */
		/* 820DEC74h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF901C);
		/* 820DEC74h case    5:*/		return 0x820DEC78;
		  /* 820DEC78h */ case    6:  		/* bl -19360 */
		/* 820DEC78h case    6:*/		regs.LR = 0x820DEC7C; return 0x820DA0D8;
		/* 820DEC78h case    6:*/		return 0x820DEC7C;
		  /* 820DEC7Ch */ case    7:  		/* addi R1, R1, 112 */
		/* 820DEC7Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DEC7Ch case    7:*/		return 0x820DEC80;
		  /* 820DEC80h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEC80h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEC80h case    8:*/		return 0x820DEC84;
		  /* 820DEC84h */ case    9:  		/* mtspr LR, R12 */
		/* 820DEC84h case    9:*/		regs.LR = regs.R12;
		/* 820DEC84h case    9:*/		return 0x820DEC88;
		  /* 820DEC88h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820DEC88h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEC88h case   10:*/		return 0x820DEC8C;
	}
	return 0x820DEC8C;
} // Block from 820DEC60h-820DEC8Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820DEC8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEC8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEC8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEC8C);
		  /* 820DEC8Ch */ case    0:  		/* nop */
		/* 820DEC8Ch case    0:*/		cpu::op::nop();
		/* 820DEC8Ch case    0:*/		return 0x820DEC90;
	}
	return 0x820DEC90;
} // Block from 820DEC8Ch-820DEC90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEC90);
		  /* 820DEC90h */ case    0:  		/* mfspr R12, LR */
		/* 820DEC90h case    0:*/		regs.R12 = regs.LR;
		/* 820DEC90h case    0:*/		return 0x820DEC94;
		  /* 820DEC94h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEC94h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEC94h case    1:*/		return 0x820DEC98;
		  /* 820DEC98h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DEC98h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DEC98h case    2:*/		return 0x820DEC9C;
		  /* 820DEC9Ch */ case    3:  		/* mr R11, R4 */
		/* 820DEC9Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DEC9Ch case    3:*/		return 0x820DECA0;
		  /* 820DECA0h */ case    4:  		/* lis R10, -32254 */
		/* 820DECA0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DECA0h case    4:*/		return 0x820DECA4;
		  /* 820DECA4h */ case    5:  		/* mr R6, R5 */
		/* 820DECA4h case    5:*/		regs.R6 = regs.R5;
		/* 820DECA4h case    5:*/		return 0x820DECA8;
		  /* 820DECA8h */ case    6:  		/* addi R4, R10, -28624 */
		/* 820DECA8h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9030);
		/* 820DECA8h case    6:*/		return 0x820DECAC;
		  /* 820DECACh */ case    7:  		/* mr R5, R11 */
		/* 820DECACh case    7:*/		regs.R5 = regs.R11;
		/* 820DECACh case    7:*/		return 0x820DECB0;
		  /* 820DECB0h */ case    8:  		/* bl -19416 */
		/* 820DECB0h case    8:*/		regs.LR = 0x820DECB4; return 0x820DA0D8;
		/* 820DECB0h case    8:*/		return 0x820DECB4;
		  /* 820DECB4h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DECB4h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DECB4h case    9:*/		return 0x820DECB8;
		  /* 820DECB8h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DECB8h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DECB8h case   10:*/		return 0x820DECBC;
		  /* 820DECBCh */ case   11:  		/* mtspr LR, R12 */
		/* 820DECBCh case   11:*/		regs.LR = regs.R12;
		/* 820DECBCh case   11:*/		return 0x820DECC0;
		  /* 820DECC0h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DECC0h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DECC0h case   12:*/		return 0x820DECC4;
	}
	return 0x820DECC4;
} // Block from 820DEC90h-820DECC4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DECC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DECC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DECC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DECC4);
		  /* 820DECC4h */ case    0:  		/* nop */
		/* 820DECC4h case    0:*/		cpu::op::nop();
		/* 820DECC4h case    0:*/		return 0x820DECC8;
	}
	return 0x820DECC8;
} // Block from 820DECC4h-820DECC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DECC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DECC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DECC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DECC8);
		  /* 820DECC8h */ case    0:  		/* mfspr R12, LR */
		/* 820DECC8h case    0:*/		regs.R12 = regs.LR;
		/* 820DECC8h case    0:*/		return 0x820DECCC;
		  /* 820DECCCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DECCCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DECCCh case    1:*/		return 0x820DECD0;
		  /* 820DECD0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DECD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DECD0h case    2:*/		return 0x820DECD4;
		  /* 820DECD4h */ case    3:  		/* mr R11, R4 */
		/* 820DECD4h case    3:*/		regs.R11 = regs.R4;
		/* 820DECD4h case    3:*/		return 0x820DECD8;
		  /* 820DECD8h */ case    4:  		/* lis R10, -32254 */
		/* 820DECD8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DECD8h case    4:*/		return 0x820DECDC;
		  /* 820DECDCh */ case    5:  		/* mr R6, R5 */
		/* 820DECDCh case    5:*/		regs.R6 = regs.R5;
		/* 820DECDCh case    5:*/		return 0x820DECE0;
		  /* 820DECE0h */ case    6:  		/* addi R4, R10, -28588 */
		/* 820DECE0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9054);
		/* 820DECE0h case    6:*/		return 0x820DECE4;
		  /* 820DECE4h */ case    7:  		/* mr R5, R11 */
		/* 820DECE4h case    7:*/		regs.R5 = regs.R11;
		/* 820DECE4h case    7:*/		return 0x820DECE8;
		  /* 820DECE8h */ case    8:  		/* bl -19472 */
		/* 820DECE8h case    8:*/		regs.LR = 0x820DECEC; return 0x820DA0D8;
		/* 820DECE8h case    8:*/		return 0x820DECEC;
		  /* 820DECECh */ case    9:  		/* addi R1, R1, 128 */
		/* 820DECECh case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DECECh case    9:*/		return 0x820DECF0;
		  /* 820DECF0h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DECF0h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DECF0h case   10:*/		return 0x820DECF4;
		  /* 820DECF4h */ case   11:  		/* mtspr LR, R12 */
		/* 820DECF4h case   11:*/		regs.LR = regs.R12;
		/* 820DECF4h case   11:*/		return 0x820DECF8;
		  /* 820DECF8h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DECF8h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DECF8h case   12:*/		return 0x820DECFC;
	}
	return 0x820DECFC;
} // Block from 820DECC8h-820DECFCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DECFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DECFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DECFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DECFC);
		  /* 820DECFCh */ case    0:  		/* nop */
		/* 820DECFCh case    0:*/		cpu::op::nop();
		/* 820DECFCh case    0:*/		return 0x820DED00;
	}
	return 0x820DED00;
} // Block from 820DECFCh-820DED00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DED00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DED00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DED00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DED00);
		  /* 820DED00h */ case    0:  		/* mfspr R12, LR */
		/* 820DED00h case    0:*/		regs.R12 = regs.LR;
		/* 820DED00h case    0:*/		return 0x820DED04;
		  /* 820DED04h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DED04h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DED04h case    1:*/		return 0x820DED08;
		  /* 820DED08h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DED08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DED08h case    2:*/		return 0x820DED0C;
		  /* 820DED0Ch */ case    3:  		/* mr R11, R4 */
		/* 820DED0Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DED0Ch case    3:*/		return 0x820DED10;
		  /* 820DED10h */ case    4:  		/* lis R10, -32254 */
		/* 820DED10h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DED10h case    4:*/		return 0x820DED14;
		  /* 820DED14h */ case    5:  		/* mr R6, R5 */
		/* 820DED14h case    5:*/		regs.R6 = regs.R5;
		/* 820DED14h case    5:*/		return 0x820DED18;
		  /* 820DED18h */ case    6:  		/* addi R4, R10, -28552 */
		/* 820DED18h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9078);
		/* 820DED18h case    6:*/		return 0x820DED1C;
		  /* 820DED1Ch */ case    7:  		/* mr R5, R11 */
		/* 820DED1Ch case    7:*/		regs.R5 = regs.R11;
		/* 820DED1Ch case    7:*/		return 0x820DED20;
		  /* 820DED20h */ case    8:  		/* bl -19528 */
		/* 820DED20h case    8:*/		regs.LR = 0x820DED24; return 0x820DA0D8;
		/* 820DED20h case    8:*/		return 0x820DED24;
		  /* 820DED24h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DED24h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DED24h case    9:*/		return 0x820DED28;
		  /* 820DED28h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DED28h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DED28h case   10:*/		return 0x820DED2C;
		  /* 820DED2Ch */ case   11:  		/* mtspr LR, R12 */
		/* 820DED2Ch case   11:*/		regs.LR = regs.R12;
		/* 820DED2Ch case   11:*/		return 0x820DED30;
		  /* 820DED30h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DED30h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DED30h case   12:*/		return 0x820DED34;
	}
	return 0x820DED34;
} // Block from 820DED00h-820DED34h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DED34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DED34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DED34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DED34);
		  /* 820DED34h */ case    0:  		/* nop */
		/* 820DED34h case    0:*/		cpu::op::nop();
		/* 820DED34h case    0:*/		return 0x820DED38;
	}
	return 0x820DED38;
} // Block from 820DED34h-820DED38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DED38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DED38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DED38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DED38);
		  /* 820DED38h */ case    0:  		/* mfspr R12, LR */
		/* 820DED38h case    0:*/		regs.R12 = regs.LR;
		/* 820DED38h case    0:*/		return 0x820DED3C;
		  /* 820DED3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DED3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DED3Ch case    1:*/		return 0x820DED40;
		  /* 820DED40h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DED40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DED40h case    2:*/		return 0x820DED44;
		  /* 820DED44h */ case    3:  		/* mr R11, R4 */
		/* 820DED44h case    3:*/		regs.R11 = regs.R4;
		/* 820DED44h case    3:*/		return 0x820DED48;
		  /* 820DED48h */ case    4:  		/* lis R10, -32254 */
		/* 820DED48h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DED48h case    4:*/		return 0x820DED4C;
		  /* 820DED4Ch */ case    5:  		/* mr R6, R5 */
		/* 820DED4Ch case    5:*/		regs.R6 = regs.R5;
		/* 820DED4Ch case    5:*/		return 0x820DED50;
		  /* 820DED50h */ case    6:  		/* addi R4, R10, -28516 */
		/* 820DED50h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF909C);
		/* 820DED50h case    6:*/		return 0x820DED54;
		  /* 820DED54h */ case    7:  		/* mr R5, R11 */
		/* 820DED54h case    7:*/		regs.R5 = regs.R11;
		/* 820DED54h case    7:*/		return 0x820DED58;
		  /* 820DED58h */ case    8:  		/* bl -19584 */
		/* 820DED58h case    8:*/		regs.LR = 0x820DED5C; return 0x820DA0D8;
		/* 820DED58h case    8:*/		return 0x820DED5C;
		  /* 820DED5Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DED5Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DED5Ch case    9:*/		return 0x820DED60;
		  /* 820DED60h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DED60h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DED60h case   10:*/		return 0x820DED64;
		  /* 820DED64h */ case   11:  		/* mtspr LR, R12 */
		/* 820DED64h case   11:*/		regs.LR = regs.R12;
		/* 820DED64h case   11:*/		return 0x820DED68;
		  /* 820DED68h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DED68h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DED68h case   12:*/		return 0x820DED6C;
	}
	return 0x820DED6C;
} // Block from 820DED38h-820DED6Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DED6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DED6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DED6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DED6C);
		  /* 820DED6Ch */ case    0:  		/* nop */
		/* 820DED6Ch case    0:*/		cpu::op::nop();
		/* 820DED6Ch case    0:*/		return 0x820DED70;
	}
	return 0x820DED70;
} // Block from 820DED6Ch-820DED70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DED70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DED70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DED70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DED70);
		  /* 820DED70h */ case    0:  		/* mfspr R12, LR */
		/* 820DED70h case    0:*/		regs.R12 = regs.LR;
		/* 820DED70h case    0:*/		return 0x820DED74;
		  /* 820DED74h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DED74h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DED74h case    1:*/		return 0x820DED78;
		  /* 820DED78h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DED78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DED78h case    2:*/		return 0x820DED7C;
		  /* 820DED7Ch */ case    3:  		/* mr R11, R4 */
		/* 820DED7Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DED7Ch case    3:*/		return 0x820DED80;
		  /* 820DED80h */ case    4:  		/* lis R10, -32254 */
		/* 820DED80h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DED80h case    4:*/		return 0x820DED84;
		  /* 820DED84h */ case    5:  		/* mr R6, R5 */
		/* 820DED84h case    5:*/		regs.R6 = regs.R5;
		/* 820DED84h case    5:*/		return 0x820DED88;
		  /* 820DED88h */ case    6:  		/* addi R4, R10, -30116 */
		/* 820DED88h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8A5C);
		/* 820DED88h case    6:*/		return 0x820DED8C;
		  /* 820DED8Ch */ case    7:  		/* mr R5, R11 */
		/* 820DED8Ch case    7:*/		regs.R5 = regs.R11;
		/* 820DED8Ch case    7:*/		return 0x820DED90;
		  /* 820DED90h */ case    8:  		/* bl -19640 */
		/* 820DED90h case    8:*/		regs.LR = 0x820DED94; return 0x820DA0D8;
		/* 820DED90h case    8:*/		return 0x820DED94;
		  /* 820DED94h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DED94h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DED94h case    9:*/		return 0x820DED98;
		  /* 820DED98h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DED98h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DED98h case   10:*/		return 0x820DED9C;
		  /* 820DED9Ch */ case   11:  		/* mtspr LR, R12 */
		/* 820DED9Ch case   11:*/		regs.LR = regs.R12;
		/* 820DED9Ch case   11:*/		return 0x820DEDA0;
		  /* 820DEDA0h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DEDA0h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEDA0h case   12:*/		return 0x820DEDA4;
	}
	return 0x820DEDA4;
} // Block from 820DED70h-820DEDA4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DEDA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEDA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEDA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEDA4);
		  /* 820DEDA4h */ case    0:  		/* nop */
		/* 820DEDA4h case    0:*/		cpu::op::nop();
		/* 820DEDA4h case    0:*/		return 0x820DEDA8;
	}
	return 0x820DEDA8;
} // Block from 820DEDA4h-820DEDA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEDA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEDA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEDA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEDA8);
		  /* 820DEDA8h */ case    0:  		/* mfspr R12, LR */
		/* 820DEDA8h case    0:*/		regs.R12 = regs.LR;
		/* 820DEDA8h case    0:*/		return 0x820DEDAC;
		  /* 820DEDACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEDACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEDACh case    1:*/		return 0x820DEDB0;
		  /* 820DEDB0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DEDB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DEDB0h case    2:*/		return 0x820DEDB4;
		  /* 820DEDB4h */ case    3:  		/* lis R11, -32254 */
		/* 820DEDB4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DEDB4h case    3:*/		return 0x820DEDB8;
		  /* 820DEDB8h */ case    4:  		/* mr R5, R4 */
		/* 820DEDB8h case    4:*/		regs.R5 = regs.R4;
		/* 820DEDB8h case    4:*/		return 0x820DEDBC;
		  /* 820DEDBCh */ case    5:  		/* addi R4, R11, -30096 */
		/* 820DEDBCh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8A70);
		/* 820DEDBCh case    5:*/		return 0x820DEDC0;
		  /* 820DEDC0h */ case    6:  		/* bl -19688 */
		/* 820DEDC0h case    6:*/		regs.LR = 0x820DEDC4; return 0x820DA0D8;
		/* 820DEDC0h case    6:*/		return 0x820DEDC4;
		  /* 820DEDC4h */ case    7:  		/* addi R1, R1, 112 */
		/* 820DEDC4h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DEDC4h case    7:*/		return 0x820DEDC8;
		  /* 820DEDC8h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEDC8h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEDC8h case    8:*/		return 0x820DEDCC;
		  /* 820DEDCCh */ case    9:  		/* mtspr LR, R12 */
		/* 820DEDCCh case    9:*/		regs.LR = regs.R12;
		/* 820DEDCCh case    9:*/		return 0x820DEDD0;
		  /* 820DEDD0h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820DEDD0h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEDD0h case   10:*/		return 0x820DEDD4;
	}
	return 0x820DEDD4;
} // Block from 820DEDA8h-820DEDD4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820DEDD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEDD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEDD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEDD4);
		  /* 820DEDD4h */ case    0:  		/* nop */
		/* 820DEDD4h case    0:*/		cpu::op::nop();
		/* 820DEDD4h case    0:*/		return 0x820DEDD8;
	}
	return 0x820DEDD8;
} // Block from 820DEDD4h-820DEDD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEDD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEDD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEDD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEDD8);
		  /* 820DEDD8h */ case    0:  		/* mfspr R12, LR */
		/* 820DEDD8h case    0:*/		regs.R12 = regs.LR;
		/* 820DEDD8h case    0:*/		return 0x820DEDDC;
		  /* 820DEDDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEDDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEDDCh case    1:*/		return 0x820DEDE0;
		  /* 820DEDE0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DEDE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DEDE0h case    2:*/		return 0x820DEDE4;
		  /* 820DEDE4h */ case    3:  		/* lis R11, -32254 */
		/* 820DEDE4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DEDE4h case    3:*/		return 0x820DEDE8;
		  /* 820DEDE8h */ case    4:  		/* mr R5, R4 */
		/* 820DEDE8h case    4:*/		regs.R5 = regs.R4;
		/* 820DEDE8h case    4:*/		return 0x820DEDEC;
		  /* 820DEDECh */ case    5:  		/* addi R4, R11, -30080 */
		/* 820DEDECh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8A80);
		/* 820DEDECh case    5:*/		return 0x820DEDF0;
		  /* 820DEDF0h */ case    6:  		/* bl -19736 */
		/* 820DEDF0h case    6:*/		regs.LR = 0x820DEDF4; return 0x820DA0D8;
		/* 820DEDF0h case    6:*/		return 0x820DEDF4;
		  /* 820DEDF4h */ case    7:  		/* addi R1, R1, 112 */
		/* 820DEDF4h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DEDF4h case    7:*/		return 0x820DEDF8;
		  /* 820DEDF8h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEDF8h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEDF8h case    8:*/		return 0x820DEDFC;
		  /* 820DEDFCh */ case    9:  		/* mtspr LR, R12 */
		/* 820DEDFCh case    9:*/		regs.LR = regs.R12;
		/* 820DEDFCh case    9:*/		return 0x820DEE00;
		  /* 820DEE00h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820DEE00h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEE00h case   10:*/		return 0x820DEE04;
	}
	return 0x820DEE04;
} // Block from 820DEDD8h-820DEE04h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820DEE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEE04);
		  /* 820DEE04h */ case    0:  		/* nop */
		/* 820DEE04h case    0:*/		cpu::op::nop();
		/* 820DEE04h case    0:*/		return 0x820DEE08;
	}
	return 0x820DEE08;
} // Block from 820DEE04h-820DEE08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEE08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEE08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEE08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEE08);
		  /* 820DEE08h */ case    0:  		/* mfspr R12, LR */
		/* 820DEE08h case    0:*/		regs.R12 = regs.LR;
		/* 820DEE08h case    0:*/		return 0x820DEE0C;
		  /* 820DEE0Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEE0Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEE0Ch case    1:*/		return 0x820DEE10;
		  /* 820DEE10h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DEE10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DEE10h case    2:*/		return 0x820DEE14;
		  /* 820DEE14h */ case    3:  		/* mr R11, R4 */
		/* 820DEE14h case    3:*/		regs.R11 = regs.R4;
		/* 820DEE14h case    3:*/		return 0x820DEE18;
		  /* 820DEE18h */ case    4:  		/* lis R10, -32254 */
		/* 820DEE18h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEE18h case    4:*/		return 0x820DEE1C;
		  /* 820DEE1Ch */ case    5:  		/* mr R6, R5 */
		/* 820DEE1Ch case    5:*/		regs.R6 = regs.R5;
		/* 820DEE1Ch case    5:*/		return 0x820DEE20;
		  /* 820DEE20h */ case    6:  		/* addi R4, R10, -28480 */
		/* 820DEE20h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF90C0);
		/* 820DEE20h case    6:*/		return 0x820DEE24;
		  /* 820DEE24h */ case    7:  		/* mr R5, R11 */
		/* 820DEE24h case    7:*/		regs.R5 = regs.R11;
		/* 820DEE24h case    7:*/		return 0x820DEE28;
		  /* 820DEE28h */ case    8:  		/* bl -19792 */
		/* 820DEE28h case    8:*/		regs.LR = 0x820DEE2C; return 0x820DA0D8;
		/* 820DEE28h case    8:*/		return 0x820DEE2C;
		  /* 820DEE2Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DEE2Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DEE2Ch case    9:*/		return 0x820DEE30;
		  /* 820DEE30h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEE30h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEE30h case   10:*/		return 0x820DEE34;
		  /* 820DEE34h */ case   11:  		/* mtspr LR, R12 */
		/* 820DEE34h case   11:*/		regs.LR = regs.R12;
		/* 820DEE34h case   11:*/		return 0x820DEE38;
		  /* 820DEE38h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DEE38h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEE38h case   12:*/		return 0x820DEE3C;
	}
	return 0x820DEE3C;
} // Block from 820DEE08h-820DEE3Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DEE3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEE3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEE3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEE3C);
		  /* 820DEE3Ch */ case    0:  		/* nop */
		/* 820DEE3Ch case    0:*/		cpu::op::nop();
		/* 820DEE3Ch case    0:*/		return 0x820DEE40;
	}
	return 0x820DEE40;
} // Block from 820DEE3Ch-820DEE40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEE40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEE40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEE40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEE40);
		  /* 820DEE40h */ case    0:  		/* mfspr R12, LR */
		/* 820DEE40h case    0:*/		regs.R12 = regs.LR;
		/* 820DEE40h case    0:*/		return 0x820DEE44;
		  /* 820DEE44h */ case    1:  		/* bl -318440 */
		/* 820DEE44h case    1:*/		regs.LR = 0x820DEE48; return 0x8209125C;
		/* 820DEE44h case    1:*/		return 0x820DEE48;
		  /* 820DEE48h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820DEE48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820DEE48h case    2:*/		return 0x820DEE4C;
		  /* 820DEE4Ch */ case    3:  		/* mr R31, R3 */
		/* 820DEE4Ch case    3:*/		regs.R31 = regs.R3;
		/* 820DEE4Ch case    3:*/		return 0x820DEE50;
		  /* 820DEE50h */ case    4:  		/* mr R30, R4 */
		/* 820DEE50h case    4:*/		regs.R30 = regs.R4;
		/* 820DEE50h case    4:*/		return 0x820DEE54;
		  /* 820DEE54h */ case    5:  		/* mr R29, R5 */
		/* 820DEE54h case    5:*/		regs.R29 = regs.R5;
		/* 820DEE54h case    5:*/		return 0x820DEE58;
		  /* 820DEE58h */ case    6:  		/* bl -19624 */
		/* 820DEE58h case    6:*/		regs.LR = 0x820DEE5C; return 0x820DA1B0;
		/* 820DEE58h case    6:*/		return 0x820DEE5C;
		  /* 820DEE5Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DEE5Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DEE5Ch case    7:*/		return 0x820DEE60;
		  /* 820DEE60h */ case    8:  		/* bc 12, CR0_LT, 28 */
		/* 820DEE60h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DEE7C;  }
		/* 820DEE60h case    8:*/		return 0x820DEE64;
		  /* 820DEE64h */ case    9:  		/* lis R11, -32254 */
		/* 820DEE64h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DEE64h case    9:*/		return 0x820DEE68;
		  /* 820DEE68h */ case   10:  		/* mr R6, R30 */
		/* 820DEE68h case   10:*/		regs.R6 = regs.R30;
		/* 820DEE68h case   10:*/		return 0x820DEE6C;
		  /* 820DEE6Ch */ case   11:  		/* addi R4, R11, -28440 */
		/* 820DEE6Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF90E8);
		/* 820DEE6Ch case   11:*/		return 0x820DEE70;
		  /* 820DEE70h */ case   12:  		/* mr R5, R29 */
		/* 820DEE70h case   12:*/		regs.R5 = regs.R29;
		/* 820DEE70h case   12:*/		return 0x820DEE74;
		  /* 820DEE74h */ case   13:  		/* mr R3, R31 */
		/* 820DEE74h case   13:*/		regs.R3 = regs.R31;
		/* 820DEE74h case   13:*/		return 0x820DEE78;
		  /* 820DEE78h */ case   14:  		/* bl -19872 */
		/* 820DEE78h case   14:*/		regs.LR = 0x820DEE7C; return 0x820DA0D8;
		/* 820DEE78h case   14:*/		return 0x820DEE7C;
	}
	return 0x820DEE7C;
} // Block from 820DEE40h-820DEE7Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 820DEE7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEE7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEE7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEE7C);
		  /* 820DEE7Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 820DEE7Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820DEE7Ch case    0:*/		return 0x820DEE80;
		  /* 820DEE80h */ case    1:  		/* b -318420 */
		/* 820DEE80h case    1:*/		return 0x820912AC;
		/* 820DEE80h case    1:*/		return 0x820DEE84;
		  /* 820DEE84h */ case    2:  		/* nop */
		/* 820DEE84h case    2:*/		cpu::op::nop();
		/* 820DEE84h case    2:*/		return 0x820DEE88;
	}
	return 0x820DEE88;
} // Block from 820DEE7Ch-820DEE88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DEE88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEE88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEE88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEE88);
		  /* 820DEE88h */ case    0:  		/* mfspr R12, LR */
		/* 820DEE88h case    0:*/		regs.R12 = regs.LR;
		/* 820DEE88h case    0:*/		return 0x820DEE8C;
		  /* 820DEE8Ch */ case    1:  		/* bl -318512 */
		/* 820DEE8Ch case    1:*/		regs.LR = 0x820DEE90; return 0x8209125C;
		/* 820DEE8Ch case    1:*/		return 0x820DEE90;
		  /* 820DEE90h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820DEE90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820DEE90h case    2:*/		return 0x820DEE94;
		  /* 820DEE94h */ case    3:  		/* mr R31, R3 */
		/* 820DEE94h case    3:*/		regs.R31 = regs.R3;
		/* 820DEE94h case    3:*/		return 0x820DEE98;
		  /* 820DEE98h */ case    4:  		/* mr R30, R4 */
		/* 820DEE98h case    4:*/		regs.R30 = regs.R4;
		/* 820DEE98h case    4:*/		return 0x820DEE9C;
		  /* 820DEE9Ch */ case    5:  		/* mr R29, R5 */
		/* 820DEE9Ch case    5:*/		regs.R29 = regs.R5;
		/* 820DEE9Ch case    5:*/		return 0x820DEEA0;
		  /* 820DEEA0h */ case    6:  		/* bl -19696 */
		/* 820DEEA0h case    6:*/		regs.LR = 0x820DEEA4; return 0x820DA1B0;
		/* 820DEEA0h case    6:*/		return 0x820DEEA4;
		  /* 820DEEA4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DEEA4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DEEA4h case    7:*/		return 0x820DEEA8;
		  /* 820DEEA8h */ case    8:  		/* bc 12, CR0_LT, 28 */
		/* 820DEEA8h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DEEC4;  }
		/* 820DEEA8h case    8:*/		return 0x820DEEAC;
		  /* 820DEEACh */ case    9:  		/* lis R11, -32254 */
		/* 820DEEACh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DEEACh case    9:*/		return 0x820DEEB0;
		  /* 820DEEB0h */ case   10:  		/* mr R6, R29 */
		/* 820DEEB0h case   10:*/		regs.R6 = regs.R29;
		/* 820DEEB0h case   10:*/		return 0x820DEEB4;
		  /* 820DEEB4h */ case   11:  		/* addi R4, R11, -28404 */
		/* 820DEEB4h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF910C);
		/* 820DEEB4h case   11:*/		return 0x820DEEB8;
		  /* 820DEEB8h */ case   12:  		/* mr R5, R30 */
		/* 820DEEB8h case   12:*/		regs.R5 = regs.R30;
		/* 820DEEB8h case   12:*/		return 0x820DEEBC;
		  /* 820DEEBCh */ case   13:  		/* mr R3, R31 */
		/* 820DEEBCh case   13:*/		regs.R3 = regs.R31;
		/* 820DEEBCh case   13:*/		return 0x820DEEC0;
		  /* 820DEEC0h */ case   14:  		/* bl -19944 */
		/* 820DEEC0h case   14:*/		regs.LR = 0x820DEEC4; return 0x820DA0D8;
		/* 820DEEC0h case   14:*/		return 0x820DEEC4;
	}
	return 0x820DEEC4;
} // Block from 820DEE88h-820DEEC4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820DEEC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEEC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEEC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEEC4);
		  /* 820DEEC4h */ case    0:  		/* addi R1, R1, 144 */
		/* 820DEEC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820DEEC4h case    0:*/		return 0x820DEEC8;
		  /* 820DEEC8h */ case    1:  		/* b -318492 */
		/* 820DEEC8h case    1:*/		return 0x820912AC;
		/* 820DEEC8h case    1:*/		return 0x820DEECC;
		  /* 820DEECCh */ case    2:  		/* nop */
		/* 820DEECCh case    2:*/		cpu::op::nop();
		/* 820DEECCh case    2:*/		return 0x820DEED0;
	}
	return 0x820DEED0;
} // Block from 820DEEC4h-820DEED0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DEED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEED0);
		  /* 820DEED0h */ case    0:  		/* mfspr R12, LR */
		/* 820DEED0h case    0:*/		regs.R12 = regs.LR;
		/* 820DEED0h case    0:*/		return 0x820DEED4;
		  /* 820DEED4h */ case    1:  		/* bl -318584 */
		/* 820DEED4h case    1:*/		regs.LR = 0x820DEED8; return 0x8209125C;
		/* 820DEED4h case    1:*/		return 0x820DEED8;
		  /* 820DEED8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820DEED8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820DEED8h case    2:*/		return 0x820DEEDC;
		  /* 820DEEDCh */ case    3:  		/* lis R11, -32254 */
		/* 820DEEDCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DEEDCh case    3:*/		return 0x820DEEE0;
		  /* 820DEEE0h */ case    4:  		/* mr R30, R4 */
		/* 820DEEE0h case    4:*/		regs.R30 = regs.R4;
		/* 820DEEE0h case    4:*/		return 0x820DEEE4;
		  /* 820DEEE4h */ case    5:  		/* mr R6, R4 */
		/* 820DEEE4h case    5:*/		regs.R6 = regs.R4;
		/* 820DEEE4h case    5:*/		return 0x820DEEE8;
		  /* 820DEEE8h */ case    6:  		/* addi R4, R11, -29624 */
		/* 820DEEE8h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8C48);
		/* 820DEEE8h case    6:*/		return 0x820DEEEC;
		  /* 820DEEECh */ case    7:  		/* mr R31, R3 */
		/* 820DEEECh case    7:*/		regs.R31 = regs.R3;
		/* 820DEEECh case    7:*/		return 0x820DEEF0;
		  /* 820DEEF0h */ case    8:  		/* mr R29, R5 */
		/* 820DEEF0h case    8:*/		regs.R29 = regs.R5;
		/* 820DEEF0h case    8:*/		return 0x820DEEF4;
		  /* 820DEEF4h */ case    9:  		/* bl -19996 */
		/* 820DEEF4h case    9:*/		regs.LR = 0x820DEEF8; return 0x820DA0D8;
		/* 820DEEF4h case    9:*/		return 0x820DEEF8;
		  /* 820DEEF8h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DEEF8h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DEEF8h case   10:*/		return 0x820DEEFC;
		  /* 820DEEFCh */ case   11:  		/* bc 12, CR0_LT, 52 */
		/* 820DEEFCh case   11:*/		if ( regs.CR[0].lt ) { return 0x820DEF30;  }
		/* 820DEEFCh case   11:*/		return 0x820DEF00;
		  /* 820DEF00h */ case   12:  		/* mr R3, R31 */
		/* 820DEF00h case   12:*/		regs.R3 = regs.R31;
		/* 820DEF00h case   12:*/		return 0x820DEF04;
		  /* 820DEF04h */ case   13:  		/* bl -19796 */
		/* 820DEF04h case   13:*/		regs.LR = 0x820DEF08; return 0x820DA1B0;
		/* 820DEF04h case   13:*/		return 0x820DEF08;
		  /* 820DEF08h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820DEF08h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DEF08h case   14:*/		return 0x820DEF0C;
		  /* 820DEF0Ch */ case   15:  		/* bc 12, CR0_LT, 36 */
		/* 820DEF0Ch case   15:*/		if ( regs.CR[0].lt ) { return 0x820DEF30;  }
		/* 820DEF0Ch case   15:*/		return 0x820DEF10;
		  /* 820DEF10h */ case   16:  		/* lis R11, -32254 */
		/* 820DEF10h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DEF10h case   16:*/		return 0x820DEF14;
		  /* 820DEF14h */ case   17:  		/* mr R6, R30 */
		/* 820DEF14h case   17:*/		regs.R6 = regs.R30;
		/* 820DEF14h case   17:*/		return 0x820DEF18;
		  /* 820DEF18h */ case   18:  		/* addi R4, R11, -29644 */
		/* 820DEF18h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8C34);
		/* 820DEF18h case   18:*/		return 0x820DEF1C;
		  /* 820DEF1Ch */ case   19:  		/* mr R5, R29 */
		/* 820DEF1Ch case   19:*/		regs.R5 = regs.R29;
		/* 820DEF1Ch case   19:*/		return 0x820DEF20;
		  /* 820DEF20h */ case   20:  		/* mr R3, R31 */
		/* 820DEF20h case   20:*/		regs.R3 = regs.R31;
		/* 820DEF20h case   20:*/		return 0x820DEF24;
		  /* 820DEF24h */ case   21:  		/* bl -20044 */
		/* 820DEF24h case   21:*/		regs.LR = 0x820DEF28; return 0x820DA0D8;
		/* 820DEF24h case   21:*/		return 0x820DEF28;
		  /* 820DEF28h */ case   22:  		/* srawi R11, R3, 31 */
		/* 820DEF28h case   22:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820DEF28h case   22:*/		return 0x820DEF2C;
		  /* 820DEF2Ch */ case   23:  		/* and R3, R11, R3 */
		/* 820DEF2Ch case   23:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820DEF2Ch case   23:*/		return 0x820DEF30;
	}
	return 0x820DEF30;
} // Block from 820DEED0h-820DEF30h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820DEF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEF30);
		  /* 820DEF30h */ case    0:  		/* addi R1, R1, 144 */
		/* 820DEF30h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820DEF30h case    0:*/		return 0x820DEF34;
		  /* 820DEF34h */ case    1:  		/* b -318600 */
		/* 820DEF34h case    1:*/		return 0x820912AC;
		/* 820DEF34h case    1:*/		return 0x820DEF38;
	}
	return 0x820DEF38;
} // Block from 820DEF30h-820DEF38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DEF38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEF38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEF38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEF38);
		  /* 820DEF38h */ case    0:  		/* mfspr R12, LR */
		/* 820DEF38h case    0:*/		regs.R12 = regs.LR;
		/* 820DEF38h case    0:*/		return 0x820DEF3C;
		  /* 820DEF3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEF3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEF3Ch case    1:*/		return 0x820DEF40;
		  /* 820DEF40h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DEF40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DEF40h case    2:*/		return 0x820DEF44;
		  /* 820DEF44h */ case    3:  		/* lis R11, -32254 */
		/* 820DEF44h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DEF44h case    3:*/		return 0x820DEF48;
		  /* 820DEF48h */ case    4:  		/* mr R5, R4 */
		/* 820DEF48h case    4:*/		regs.R5 = regs.R4;
		/* 820DEF48h case    4:*/		return 0x820DEF4C;
		  /* 820DEF4Ch */ case    5:  		/* addi R4, R11, -30044 */
		/* 820DEF4Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8AA4);
		/* 820DEF4Ch case    5:*/		return 0x820DEF50;
		  /* 820DEF50h */ case    6:  		/* bl -20088 */
		/* 820DEF50h case    6:*/		regs.LR = 0x820DEF54; return 0x820DA0D8;
		/* 820DEF50h case    6:*/		return 0x820DEF54;
		  /* 820DEF54h */ case    7:  		/* addi R1, R1, 112 */
		/* 820DEF54h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DEF54h case    7:*/		return 0x820DEF58;
		  /* 820DEF58h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEF58h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEF58h case    8:*/		return 0x820DEF5C;
		  /* 820DEF5Ch */ case    9:  		/* mtspr LR, R12 */
		/* 820DEF5Ch case    9:*/		regs.LR = regs.R12;
		/* 820DEF5Ch case    9:*/		return 0x820DEF60;
		  /* 820DEF60h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820DEF60h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEF60h case   10:*/		return 0x820DEF64;
	}
	return 0x820DEF64;
} // Block from 820DEF38h-820DEF64h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820DEF64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEF64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEF64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEF64);
		  /* 820DEF64h */ case    0:  		/* nop */
		/* 820DEF64h case    0:*/		cpu::op::nop();
		/* 820DEF64h case    0:*/		return 0x820DEF68;
	}
	return 0x820DEF68;
} // Block from 820DEF64h-820DEF68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEF68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEF68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEF68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEF68);
		  /* 820DEF68h */ case    0:  		/* mfspr R12, LR */
		/* 820DEF68h case    0:*/		regs.R12 = regs.LR;
		/* 820DEF68h case    0:*/		return 0x820DEF6C;
		  /* 820DEF6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEF6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEF6Ch case    1:*/		return 0x820DEF70;
		  /* 820DEF70h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DEF70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DEF70h case    2:*/		return 0x820DEF74;
		  /* 820DEF74h */ case    3:  		/* mr R11, R4 */
		/* 820DEF74h case    3:*/		regs.R11 = regs.R4;
		/* 820DEF74h case    3:*/		return 0x820DEF78;
		  /* 820DEF78h */ case    4:  		/* lis R10, -32254 */
		/* 820DEF78h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEF78h case    4:*/		return 0x820DEF7C;
		  /* 820DEF7Ch */ case    5:  		/* mr R6, R5 */
		/* 820DEF7Ch case    5:*/		regs.R6 = regs.R5;
		/* 820DEF7Ch case    5:*/		return 0x820DEF80;
		  /* 820DEF80h */ case    6:  		/* addi R4, R10, -28368 */
		/* 820DEF80h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9130);
		/* 820DEF80h case    6:*/		return 0x820DEF84;
		  /* 820DEF84h */ case    7:  		/* mr R5, R11 */
		/* 820DEF84h case    7:*/		regs.R5 = regs.R11;
		/* 820DEF84h case    7:*/		return 0x820DEF88;
		  /* 820DEF88h */ case    8:  		/* bl -20144 */
		/* 820DEF88h case    8:*/		regs.LR = 0x820DEF8C; return 0x820DA0D8;
		/* 820DEF88h case    8:*/		return 0x820DEF8C;
		  /* 820DEF8Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DEF8Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DEF8Ch case    9:*/		return 0x820DEF90;
		  /* 820DEF90h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEF90h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEF90h case   10:*/		return 0x820DEF94;
		  /* 820DEF94h */ case   11:  		/* mtspr LR, R12 */
		/* 820DEF94h case   11:*/		regs.LR = regs.R12;
		/* 820DEF94h case   11:*/		return 0x820DEF98;
		  /* 820DEF98h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DEF98h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEF98h case   12:*/		return 0x820DEF9C;
	}
	return 0x820DEF9C;
} // Block from 820DEF68h-820DEF9Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DEF9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEF9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEF9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEF9C);
		  /* 820DEF9Ch */ case    0:  		/* nop */
		/* 820DEF9Ch case    0:*/		cpu::op::nop();
		/* 820DEF9Ch case    0:*/		return 0x820DEFA0;
	}
	return 0x820DEFA0;
} // Block from 820DEF9Ch-820DEFA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEFA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEFA0);
		  /* 820DEFA0h */ case    0:  		/* mfspr R12, LR */
		/* 820DEFA0h case    0:*/		regs.R12 = regs.LR;
		/* 820DEFA0h case    0:*/		return 0x820DEFA4;
		  /* 820DEFA4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEFA4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEFA4h case    1:*/		return 0x820DEFA8;
		  /* 820DEFA8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DEFA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DEFA8h case    2:*/		return 0x820DEFAC;
		  /* 820DEFACh */ case    3:  		/* neg R10, R5 */
		/* 820DEFACh case    3:*/		cpu::op::neg<0>(regs,&regs.R10,regs.R5);
		/* 820DEFACh case    3:*/		return 0x820DEFB0;
		  /* 820DEFB0h */ case    4:  		/* mr R6, R4 */
		/* 820DEFB0h case    4:*/		regs.R6 = regs.R4;
		/* 820DEFB0h case    4:*/		return 0x820DEFB4;
		  /* 820DEFB4h */ case    5:  		/* lis R9, -32254 */
		/* 820DEFB4h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DEFB4h case    5:*/		return 0x820DEFB8;
		  /* 820DEFB8h */ case    6:  		/* mr R11, R4 */
		/* 820DEFB8h case    6:*/		regs.R11 = regs.R4;
		/* 820DEFB8h case    6:*/		return 0x820DEFBC;
		  /* 820DEFBCh */ case    7:  		/* addi R4, R9, -29600 */
		/* 820DEFBCh case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFF8C60);
		/* 820DEFBCh case    7:*/		return 0x820DEFC0;
		  /* 820DEFC0h */ case    8:  		/* rlwinm R7, R10, 0, 28, 31 */
		/* 820DEFC0h case    8:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R10);
		/* 820DEFC0h case    8:*/		return 0x820DEFC4;
		  /* 820DEFC4h */ case    9:  		/* mr R5, R6 */
		/* 820DEFC4h case    9:*/		regs.R5 = regs.R6;
		/* 820DEFC4h case    9:*/		return 0x820DEFC8;
		  /* 820DEFC8h */ case   10:  		/* bl -20208 */
		/* 820DEFC8h case   10:*/		regs.LR = 0x820DEFCC; return 0x820DA0D8;
		/* 820DEFC8h case   10:*/		return 0x820DEFCC;
		  /* 820DEFCCh */ case   11:  		/* addi R1, R1, 128 */
		/* 820DEFCCh case   11:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DEFCCh case   11:*/		return 0x820DEFD0;
		  /* 820DEFD0h */ case   12:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DEFD0h case   12:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEFD0h case   12:*/		return 0x820DEFD4;
		  /* 820DEFD4h */ case   13:  		/* mtspr LR, R12 */
		/* 820DEFD4h case   13:*/		regs.LR = regs.R12;
		/* 820DEFD4h case   13:*/		return 0x820DEFD8;
		  /* 820DEFD8h */ case   14:  		/* bclr 20, CR0_LT */
		/* 820DEFD8h case   14:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DEFD8h case   14:*/		return 0x820DEFDC;
	}
	return 0x820DEFDC;
} // Block from 820DEFA0h-820DEFDCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 820DEFDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEFDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEFDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEFDC);
		  /* 820DEFDCh */ case    0:  		/* nop */
		/* 820DEFDCh case    0:*/		cpu::op::nop();
		/* 820DEFDCh case    0:*/		return 0x820DEFE0;
	}
	return 0x820DEFE0;
} // Block from 820DEFDCh-820DEFE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DEFE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DEFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DEFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DEFE0);
		  /* 820DEFE0h */ case    0:  		/* mfspr R12, LR */
		/* 820DEFE0h case    0:*/		regs.R12 = regs.LR;
		/* 820DEFE0h case    0:*/		return 0x820DEFE4;
		  /* 820DEFE4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DEFE4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DEFE4h case    1:*/		return 0x820DEFE8;
		  /* 820DEFE8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DEFE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DEFE8h case    2:*/		return 0x820DEFEC;
		  /* 820DEFECh */ case    3:  		/* mr R11, R4 */
		/* 820DEFECh case    3:*/		regs.R11 = regs.R4;
		/* 820DEFECh case    3:*/		return 0x820DEFF0;
		  /* 820DEFF0h */ case    4:  		/* lis R10, -32254 */
		/* 820DEFF0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DEFF0h case    4:*/		return 0x820DEFF4;
		  /* 820DEFF4h */ case    5:  		/* mr R6, R5 */
		/* 820DEFF4h case    5:*/		regs.R6 = regs.R5;
		/* 820DEFF4h case    5:*/		return 0x820DEFF8;
		  /* 820DEFF8h */ case    6:  		/* addi R4, R10, -28340 */
		/* 820DEFF8h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF914C);
		/* 820DEFF8h case    6:*/		return 0x820DEFFC;
		  /* 820DEFFCh */ case    7:  		/* mr R5, R11 */
		/* 820DEFFCh case    7:*/		regs.R5 = regs.R11;
		/* 820DEFFCh case    7:*/		return 0x820DF000;
		  /* 820DF000h */ case    8:  		/* bl -20264 */
		/* 820DF000h case    8:*/		regs.LR = 0x820DF004; return 0x820DA0D8;
		/* 820DF000h case    8:*/		return 0x820DF004;
		  /* 820DF004h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DF004h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DF004h case    9:*/		return 0x820DF008;
		  /* 820DF008h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DF008h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF008h case   10:*/		return 0x820DF00C;
		  /* 820DF00Ch */ case   11:  		/* mtspr LR, R12 */
		/* 820DF00Ch case   11:*/		regs.LR = regs.R12;
		/* 820DF00Ch case   11:*/		return 0x820DF010;
		  /* 820DF010h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DF010h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DF010h case   12:*/		return 0x820DF014;
	}
	return 0x820DF014;
} // Block from 820DEFE0h-820DF014h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DF014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF014);
		  /* 820DF014h */ case    0:  		/* nop */
		/* 820DF014h case    0:*/		cpu::op::nop();
		/* 820DF014h case    0:*/		return 0x820DF018;
	}
	return 0x820DF018;
} // Block from 820DF014h-820DF018h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DF018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF018);
		  /* 820DF018h */ case    0:  		/* mfspr R12, LR */
		/* 820DF018h case    0:*/		regs.R12 = regs.LR;
		/* 820DF018h case    0:*/		return 0x820DF01C;
		  /* 820DF01Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DF01Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF01Ch case    1:*/		return 0x820DF020;
		  /* 820DF020h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DF020h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DF020h case    2:*/		return 0x820DF024;
		  /* 820DF024h */ case    3:  		/* mr R11, R4 */
		/* 820DF024h case    3:*/		regs.R11 = regs.R4;
		/* 820DF024h case    3:*/		return 0x820DF028;
		  /* 820DF028h */ case    4:  		/* lis R10, -32254 */
		/* 820DF028h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DF028h case    4:*/		return 0x820DF02C;
		  /* 820DF02Ch */ case    5:  		/* mr R6, R5 */
		/* 820DF02Ch case    5:*/		regs.R6 = regs.R5;
		/* 820DF02Ch case    5:*/		return 0x820DF030;
		  /* 820DF030h */ case    6:  		/* addi R4, R10, -28312 */
		/* 820DF030h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9168);
		/* 820DF030h case    6:*/		return 0x820DF034;
		  /* 820DF034h */ case    7:  		/* mr R5, R11 */
		/* 820DF034h case    7:*/		regs.R5 = regs.R11;
		/* 820DF034h case    7:*/		return 0x820DF038;
		  /* 820DF038h */ case    8:  		/* bl -20320 */
		/* 820DF038h case    8:*/		regs.LR = 0x820DF03C; return 0x820DA0D8;
		/* 820DF038h case    8:*/		return 0x820DF03C;
		  /* 820DF03Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DF03Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DF03Ch case    9:*/		return 0x820DF040;
		  /* 820DF040h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DF040h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF040h case   10:*/		return 0x820DF044;
		  /* 820DF044h */ case   11:  		/* mtspr LR, R12 */
		/* 820DF044h case   11:*/		regs.LR = regs.R12;
		/* 820DF044h case   11:*/		return 0x820DF048;
		  /* 820DF048h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DF048h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DF048h case   12:*/		return 0x820DF04C;
	}
	return 0x820DF04C;
} // Block from 820DF018h-820DF04Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DF04Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF04C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF04C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF04C);
		  /* 820DF04Ch */ case    0:  		/* nop */
		/* 820DF04Ch case    0:*/		cpu::op::nop();
		/* 820DF04Ch case    0:*/		return 0x820DF050;
	}
	return 0x820DF050;
} // Block from 820DF04Ch-820DF050h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DF050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF050);
		  /* 820DF050h */ case    0:  		/* mfspr R12, LR */
		/* 820DF050h case    0:*/		regs.R12 = regs.LR;
		/* 820DF050h case    0:*/		return 0x820DF054;
		  /* 820DF054h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DF054h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF054h case    1:*/		return 0x820DF058;
		  /* 820DF058h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DF058h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DF058h case    2:*/		return 0x820DF05C;
		  /* 820DF05Ch */ case    3:  		/* lis R11, -32254 */
		/* 820DF05Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF05Ch case    3:*/		return 0x820DF060;
		  /* 820DF060h */ case    4:  		/* mr R5, R4 */
		/* 820DF060h case    4:*/		regs.R5 = regs.R4;
		/* 820DF060h case    4:*/		return 0x820DF064;
		  /* 820DF064h */ case    5:  		/* addi R4, R11, -28284 */
		/* 820DF064h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9184);
		/* 820DF064h case    5:*/		return 0x820DF068;
		  /* 820DF068h */ case    6:  		/* bl -20368 */
		/* 820DF068h case    6:*/		regs.LR = 0x820DF06C; return 0x820DA0D8;
		/* 820DF068h case    6:*/		return 0x820DF06C;
		  /* 820DF06Ch */ case    7:  		/* addi R1, R1, 112 */
		/* 820DF06Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DF06Ch case    7:*/		return 0x820DF070;
		  /* 820DF070h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DF070h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF070h case    8:*/		return 0x820DF074;
		  /* 820DF074h */ case    9:  		/* mtspr LR, R12 */
		/* 820DF074h case    9:*/		regs.LR = regs.R12;
		/* 820DF074h case    9:*/		return 0x820DF078;
		  /* 820DF078h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820DF078h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DF078h case   10:*/		return 0x820DF07C;
	}
	return 0x820DF07C;
} // Block from 820DF050h-820DF07Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820DF07Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF07C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF07C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF07C);
		  /* 820DF07Ch */ case    0:  		/* nop */
		/* 820DF07Ch case    0:*/		cpu::op::nop();
		/* 820DF07Ch case    0:*/		return 0x820DF080;
	}
	return 0x820DF080;
} // Block from 820DF07Ch-820DF080h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DF080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF080);
		  /* 820DF080h */ case    0:  		/* mfspr R12, LR */
		/* 820DF080h case    0:*/		regs.R12 = regs.LR;
		/* 820DF080h case    0:*/		return 0x820DF084;
		  /* 820DF084h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DF084h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF084h case    1:*/		return 0x820DF088;
		  /* 820DF088h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DF088h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DF088h case    2:*/		return 0x820DF08C;
		  /* 820DF08Ch */ case    3:  		/* lis R11, -32254 */
		/* 820DF08Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF08Ch case    3:*/		return 0x820DF090;
		  /* 820DF090h */ case    4:  		/* mr R5, R4 */
		/* 820DF090h case    4:*/		regs.R5 = regs.R4;
		/* 820DF090h case    4:*/		return 0x820DF094;
		  /* 820DF094h */ case    5:  		/* addi R4, R11, -28264 */
		/* 820DF094h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9198);
		/* 820DF094h case    5:*/		return 0x820DF098;
		  /* 820DF098h */ case    6:  		/* bl -20416 */
		/* 820DF098h case    6:*/		regs.LR = 0x820DF09C; return 0x820DA0D8;
		/* 820DF098h case    6:*/		return 0x820DF09C;
		  /* 820DF09Ch */ case    7:  		/* addi R1, R1, 112 */
		/* 820DF09Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DF09Ch case    7:*/		return 0x820DF0A0;
		  /* 820DF0A0h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DF0A0h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF0A0h case    8:*/		return 0x820DF0A4;
		  /* 820DF0A4h */ case    9:  		/* mtspr LR, R12 */
		/* 820DF0A4h case    9:*/		regs.LR = regs.R12;
		/* 820DF0A4h case    9:*/		return 0x820DF0A8;
		  /* 820DF0A8h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820DF0A8h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DF0A8h case   10:*/		return 0x820DF0AC;
	}
	return 0x820DF0AC;
} // Block from 820DF080h-820DF0ACh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820DF0ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF0AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF0AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF0AC);
		  /* 820DF0ACh */ case    0:  		/* nop */
		/* 820DF0ACh case    0:*/		cpu::op::nop();
		/* 820DF0ACh case    0:*/		return 0x820DF0B0;
	}
	return 0x820DF0B0;
} // Block from 820DF0ACh-820DF0B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DF0B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF0B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF0B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF0B0);
		  /* 820DF0B0h */ case    0:  		/* mfspr R12, LR */
		/* 820DF0B0h case    0:*/		regs.R12 = regs.LR;
		/* 820DF0B0h case    0:*/		return 0x820DF0B4;
		  /* 820DF0B4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DF0B4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF0B4h case    1:*/		return 0x820DF0B8;
		  /* 820DF0B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DF0B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DF0B8h case    2:*/		return 0x820DF0BC;
		  /* 820DF0BCh */ case    3:  		/* mr R11, R4 */
		/* 820DF0BCh case    3:*/		regs.R11 = regs.R4;
		/* 820DF0BCh case    3:*/		return 0x820DF0C0;
		  /* 820DF0C0h */ case    4:  		/* lis R10, -32254 */
		/* 820DF0C0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DF0C0h case    4:*/		return 0x820DF0C4;
		  /* 820DF0C4h */ case    5:  		/* mr R6, R5 */
		/* 820DF0C4h case    5:*/		regs.R6 = regs.R5;
		/* 820DF0C4h case    5:*/		return 0x820DF0C8;
		  /* 820DF0C8h */ case    6:  		/* addi R4, R10, -28244 */
		/* 820DF0C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF91AC);
		/* 820DF0C8h case    6:*/		return 0x820DF0CC;
		  /* 820DF0CCh */ case    7:  		/* mr R5, R11 */
		/* 820DF0CCh case    7:*/		regs.R5 = regs.R11;
		/* 820DF0CCh case    7:*/		return 0x820DF0D0;
		  /* 820DF0D0h */ case    8:  		/* bl -20472 */
		/* 820DF0D0h case    8:*/		regs.LR = 0x820DF0D4; return 0x820DA0D8;
		/* 820DF0D0h case    8:*/		return 0x820DF0D4;
		  /* 820DF0D4h */ case    9:  		/* addi R1, R1, 128 */
		/* 820DF0D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DF0D4h case    9:*/		return 0x820DF0D8;
		  /* 820DF0D8h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DF0D8h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF0D8h case   10:*/		return 0x820DF0DC;
		  /* 820DF0DCh */ case   11:  		/* mtspr LR, R12 */
		/* 820DF0DCh case   11:*/		regs.LR = regs.R12;
		/* 820DF0DCh case   11:*/		return 0x820DF0E0;
		  /* 820DF0E0h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DF0E0h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DF0E0h case   12:*/		return 0x820DF0E4;
	}
	return 0x820DF0E4;
} // Block from 820DF0B0h-820DF0E4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DF0E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF0E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF0E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF0E4);
		  /* 820DF0E4h */ case    0:  		/* nop */
		/* 820DF0E4h case    0:*/		cpu::op::nop();
		/* 820DF0E4h case    0:*/		return 0x820DF0E8;
	}
	return 0x820DF0E8;
} // Block from 820DF0E4h-820DF0E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DF0E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF0E8);
		  /* 820DF0E8h */ case    0:  		/* mfspr R12, LR */
		/* 820DF0E8h case    0:*/		regs.R12 = regs.LR;
		/* 820DF0E8h case    0:*/		return 0x820DF0EC;
		  /* 820DF0ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DF0ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF0ECh case    1:*/		return 0x820DF0F0;
		  /* 820DF0F0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DF0F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DF0F0h case    2:*/		return 0x820DF0F4;
		  /* 820DF0F4h */ case    3:  		/* mr R11, R4 */
		/* 820DF0F4h case    3:*/		regs.R11 = regs.R4;
		/* 820DF0F4h case    3:*/		return 0x820DF0F8;
		  /* 820DF0F8h */ case    4:  		/* lis R10, -32254 */
		/* 820DF0F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DF0F8h case    4:*/		return 0x820DF0FC;
		  /* 820DF0FCh */ case    5:  		/* mr R6, R5 */
		/* 820DF0FCh case    5:*/		regs.R6 = regs.R5;
		/* 820DF0FCh case    5:*/		return 0x820DF100;
		  /* 820DF100h */ case    6:  		/* addi R4, R10, -28216 */
		/* 820DF100h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF91C8);
		/* 820DF100h case    6:*/		return 0x820DF104;
		  /* 820DF104h */ case    7:  		/* mr R5, R11 */
		/* 820DF104h case    7:*/		regs.R5 = regs.R11;
		/* 820DF104h case    7:*/		return 0x820DF108;
		  /* 820DF108h */ case    8:  		/* bl -20528 */
		/* 820DF108h case    8:*/		regs.LR = 0x820DF10C; return 0x820DA0D8;
		/* 820DF108h case    8:*/		return 0x820DF10C;
		  /* 820DF10Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 820DF10Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DF10Ch case    9:*/		return 0x820DF110;
		  /* 820DF110h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DF110h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF110h case   10:*/		return 0x820DF114;
		  /* 820DF114h */ case   11:  		/* mtspr LR, R12 */
		/* 820DF114h case   11:*/		regs.LR = regs.R12;
		/* 820DF114h case   11:*/		return 0x820DF118;
		  /* 820DF118h */ case   12:  		/* bclr 20, CR0_LT */
		/* 820DF118h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DF118h case   12:*/		return 0x820DF11C;
	}
	return 0x820DF11C;
} // Block from 820DF0E8h-820DF11Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DF11Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF11C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF11C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF11C);
		  /* 820DF11Ch */ case    0:  		/* nop */
		/* 820DF11Ch case    0:*/		cpu::op::nop();
		/* 820DF11Ch case    0:*/		return 0x820DF120;
	}
	return 0x820DF120;
} // Block from 820DF11Ch-820DF120h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DF120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF120);
		  /* 820DF120h */ case    0:  		/* mfspr R12, LR */
		/* 820DF120h case    0:*/		regs.R12 = regs.LR;
		/* 820DF120h case    0:*/		return 0x820DF124;
		  /* 820DF124h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DF124h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF124h case    1:*/		return 0x820DF128;
		  /* 820DF128h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DF128h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DF128h case    2:*/		return 0x820DF12C;
		  /* 820DF12Ch */ case    3:  		/* mr R11, R4 */
		/* 820DF12Ch case    3:*/		regs.R11 = regs.R4;
		/* 820DF12Ch case    3:*/		return 0x820DF130;
		  /* 820DF130h */ case    4:  		/* lis R10, -32254 */
		/* 820DF130h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DF130h case    4:*/		return 0x820DF134;
		  /* 820DF134h */ case    5:  		/* mr R7, R6 */
		/* 820DF134h case    5:*/		regs.R7 = regs.R6;
		/* 820DF134h case    5:*/		return 0x820DF138;
		  /* 820DF138h */ case    6:  		/* mr R6, R5 */
		/* 820DF138h case    6:*/		regs.R6 = regs.R5;
		/* 820DF138h case    6:*/		return 0x820DF13C;
		  /* 820DF13Ch */ case    7:  		/* addi R4, R10, -28188 */
		/* 820DF13Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF91E4);
		/* 820DF13Ch case    7:*/		return 0x820DF140;
		  /* 820DF140h */ case    8:  		/* mr R5, R11 */
		/* 820DF140h case    8:*/		regs.R5 = regs.R11;
		/* 820DF140h case    8:*/		return 0x820DF144;
		  /* 820DF144h */ case    9:  		/* bl -20588 */
		/* 820DF144h case    9:*/		regs.LR = 0x820DF148; return 0x820DA0D8;
		/* 820DF144h case    9:*/		return 0x820DF148;
		  /* 820DF148h */ case   10:  		/* addi R1, R1, 128 */
		/* 820DF148h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DF148h case   10:*/		return 0x820DF14C;
		  /* 820DF14Ch */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DF14Ch case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF14Ch case   11:*/		return 0x820DF150;
		  /* 820DF150h */ case   12:  		/* mtspr LR, R12 */
		/* 820DF150h case   12:*/		regs.LR = regs.R12;
		/* 820DF150h case   12:*/		return 0x820DF154;
		  /* 820DF154h */ case   13:  		/* bclr 20, CR0_LT */
		/* 820DF154h case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DF154h case   13:*/		return 0x820DF158;
	}
	return 0x820DF158;
} // Block from 820DF120h-820DF158h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF158);
		  /* 820DF158h */ case    0:  		/* mfspr R12, LR */
		/* 820DF158h case    0:*/		regs.R12 = regs.LR;
		/* 820DF158h case    0:*/		return 0x820DF15C;
		  /* 820DF15Ch */ case    1:  		/* bl -319272 */
		/* 820DF15Ch case    1:*/		regs.LR = 0x820DF160; return 0x82091234;
		/* 820DF15Ch case    1:*/		return 0x820DF160;
		  /* 820DF160h */ case    2:  		/* stwu R1, <#[R1 - 336]> */
		/* 820DF160h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEB0);
		/* 820DF160h case    2:*/		return 0x820DF164;
		  /* 820DF164h */ case    3:  		/* lwz R11, <#[R3 + 1816]> */
		/* 820DF164h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000718) );
		/* 820DF164h case    3:*/		return 0x820DF168;
		  /* 820DF168h */ case    4:  		/* mr R31, R3 */
		/* 820DF168h case    4:*/		regs.R31 = regs.R3;
		/* 820DF168h case    4:*/		return 0x820DF16C;
		  /* 820DF16Ch */ case    5:  		/* mr R23, R4 */
		/* 820DF16Ch case    5:*/		regs.R23 = regs.R4;
		/* 820DF16Ch case    5:*/		return 0x820DF170;
		  /* 820DF170h */ case    6:  		/* mr R21, R5 */
		/* 820DF170h case    6:*/		regs.R21 = regs.R5;
		/* 820DF170h case    6:*/		return 0x820DF174;
		  /* 820DF174h */ case    7:  		/* mr R20, R6 */
		/* 820DF174h case    7:*/		regs.R20 = regs.R6;
		/* 820DF174h case    7:*/		return 0x820DF178;
		  /* 820DF178h */ case    8:  		/* mr R19, R7 */
		/* 820DF178h case    8:*/		regs.R19 = regs.R7;
		/* 820DF178h case    8:*/		return 0x820DF17C;
		  /* 820DF17Ch */ case    9:  		/* li R30, 0 */
		/* 820DF17Ch case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DF17Ch case    9:*/		return 0x820DF180;
		  /* 820DF180h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 820DF180h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DF180h case   10:*/		return 0x820DF184;
		  /* 820DF184h */ case   11:  		/* bc 4, CR6_GT, 292 */
		/* 820DF184h case   11:*/		if ( !regs.CR[6].gt ) { return 0x820DF2A8;  }
		/* 820DF184h case   11:*/		return 0x820DF188;
		  /* 820DF188h */ case   12:  		/* lis R6, -32254 */
		/* 820DF188h case   12:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8202);
		/* 820DF188h case   12:*/		return 0x820DF18C;
		  /* 820DF18Ch */ case   13:  		/* lis R7, -32254 */
		/* 820DF18Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8202);
		/* 820DF18Ch case   13:*/		return 0x820DF190;
		  /* 820DF190h */ case   14:  		/* lis R8, -32254 */
		/* 820DF190h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820DF190h case   14:*/		return 0x820DF194;
		  /* 820DF194h */ case   15:  		/* lis R9, -32254 */
		/* 820DF194h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820DF194h case   15:*/		return 0x820DF198;
		  /* 820DF198h */ case   16:  		/* lis R10, -32254 */
		/* 820DF198h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DF198h case   16:*/		return 0x820DF19C;
		  /* 820DF19Ch */ case   17:  		/* lis R11, -32254 */
		/* 820DF19Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF19Ch case   17:*/		return 0x820DF1A0;
		  /* 820DF1A0h */ case   18:  		/* lis R22, 29760 */
		/* 820DF1A0h case   18:*/		cpu::op::lis<0>(regs,&regs.R22,0x7440);
		/* 820DF1A0h case   18:*/		return 0x820DF1A4;
		  /* 820DF1A4h */ case   19:  		/* addi R29, R6, -29380 */
		/* 820DF1A4h case   19:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R6,0xFFFF8D3C);
		/* 820DF1A4h case   19:*/		return 0x820DF1A8;
		  /* 820DF1A8h */ case   20:  		/* addi R28, R7, -28096 */
		/* 820DF1A8h case   20:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R7,0xFFFF9240);
		/* 820DF1A8h case   20:*/		return 0x820DF1AC;
		  /* 820DF1ACh */ case   21:  		/* addi R27, R8, -28116 */
		/* 820DF1ACh case   21:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R8,0xFFFF922C);
		/* 820DF1ACh case   21:*/		return 0x820DF1B0;
		  /* 820DF1B0h */ case   22:  		/* addi R26, R9, -28132 */
		/* 820DF1B0h case   22:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R9,0xFFFF921C);
		/* 820DF1B0h case   22:*/		return 0x820DF1B4;
		  /* 820DF1B4h */ case   23:  		/* addi R25, R10, -28156 */
		/* 820DF1B4h case   23:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0xFFFF9204);
		/* 820DF1B4h case   23:*/		return 0x820DF1B8;
		  /* 820DF1B8h */ case   24:  		/* addi R24, R11, -30692 */
		/* 820DF1B8h case   24:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFF881C);
		/* 820DF1B8h case   24:*/		return 0x820DF1BC;
		  /* 820DF1BCh */ case   25:  		/* mr R7, R30 */
		/* 820DF1BCh case   25:*/		regs.R7 = regs.R30;
		/* 820DF1BCh case   25:*/		return 0x820DF1C0;
		  /* 820DF1C0h */ case   26:  		/* mr R6, R30 */
		/* 820DF1C0h case   26:*/		regs.R6 = regs.R30;
		/* 820DF1C0h case   26:*/		return 0x820DF1C4;
		  /* 820DF1C4h */ case   27:  		/* mr R5, R20 */
		/* 820DF1C4h case   27:*/		regs.R5 = regs.R20;
		/* 820DF1C4h case   27:*/		return 0x820DF1C8;
		  /* 820DF1C8h */ case   28:  		/* li R4, 32 */
		/* 820DF1C8h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DF1C8h case   28:*/		return 0x820DF1CC;
		  /* 820DF1CCh */ case   29:  		/* addi R3, R1, 192 */
		/* 820DF1CCh case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DF1CCh case   29:*/		return 0x820DF1D0;
		  /* 820DF1D0h */ case   30:  		/* bl -248720 */
		/* 820DF1D0h case   30:*/		regs.LR = 0x820DF1D4; return 0x820A2640;
		/* 820DF1D0h case   30:*/		return 0x820DF1D4;
		  /* 820DF1D4h */ case   31:  		/* mr R7, R30 */
		/* 820DF1D4h case   31:*/		regs.R7 = regs.R30;
		/* 820DF1D4h case   31:*/		return 0x820DF1D8;
		  /* 820DF1D8h */ case   32:  		/* mr R6, R30 */
		/* 820DF1D8h case   32:*/		regs.R6 = regs.R30;
		/* 820DF1D8h case   32:*/		return 0x820DF1DC;
		  /* 820DF1DCh */ case   33:  		/* mr R5, R19 */
		/* 820DF1DCh case   33:*/		regs.R5 = regs.R19;
		/* 820DF1DCh case   33:*/		return 0x820DF1E0;
		  /* 820DF1E0h */ case   34:  		/* li R4, 32 */
		/* 820DF1E0h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DF1E0h case   34:*/		return 0x820DF1E4;
		  /* 820DF1E4h */ case   35:  		/* addi R3, R1, 160 */
		/* 820DF1E4h case   35:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DF1E4h case   35:*/		return 0x820DF1E8;
		  /* 820DF1E8h */ case   36:  		/* bl -248744 */
		/* 820DF1E8h case   36:*/		regs.LR = 0x820DF1EC; return 0x820A2640;
		/* 820DF1E8h case   36:*/		return 0x820DF1EC;
		  /* 820DF1ECh */ case   37:  		/* mr R7, R30 */
		/* 820DF1ECh case   37:*/		regs.R7 = regs.R30;
		/* 820DF1ECh case   37:*/		return 0x820DF1F0;
	}
	return 0x820DF1F0;
} // Block from 820DF158h-820DF1F0h (38 instructions)

//////////////////////////////////////////////////////
// Block at 820DF1F0h
// Function '?EmitDEF@C30SWProgramML@D3DXShader@@MAAJIPAM@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF1F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF1F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF1F0);
		  /* 820DF1F0h */ case    0:  		/* mr R6, R30 */
		/* 820DF1F0h case    0:*/		regs.R6 = regs.R30;
		/* 820DF1F0h case    0:*/		return 0x820DF1F4;
		  /* 820DF1F4h */ case    1:  		/* mr R5, R21 */
		/* 820DF1F4h case    1:*/		regs.R5 = regs.R21;
		/* 820DF1F4h case    1:*/		return 0x820DF1F8;
		  /* 820DF1F8h */ case    2:  		/* li R4, 32 */
		/* 820DF1F8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DF1F8h case    2:*/		return 0x820DF1FC;
		  /* 820DF1FCh */ case    3:  		/* addi R3, R1, 128 */
		/* 820DF1FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DF1FCh case    3:*/		return 0x820DF200;
		  /* 820DF200h */ case    4:  		/* bl -248768 */
		/* 820DF200h case    4:*/		regs.LR = 0x820DF204; return 0x820A2640;
		/* 820DF200h case    4:*/		return 0x820DF204;
		  /* 820DF204h */ case    5:  		/* mr R3, R31 */
		/* 820DF204h case    5:*/		regs.R3 = regs.R31;
		/* 820DF204h case    5:*/		return 0x820DF208;
		  /* 820DF208h */ case    6:  		/* bl -20568 */
		/* 820DF208h case    6:*/		regs.LR = 0x820DF20C; return 0x820DA1B0;
		/* 820DF208h case    6:*/		return 0x820DF20C;
		  /* 820DF20Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DF20Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF20Ch case    7:*/		return 0x820DF210;
		  /* 820DF210h */ case    8:  		/* bc 12, CR0_LT, 156 */
		/* 820DF210h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DF2AC;  }
		/* 820DF210h case    8:*/		return 0x820DF214;
		  /* 820DF214h */ case    9:  		/* mr R4, R24 */
		/* 820DF214h case    9:*/		regs.R4 = regs.R24;
		/* 820DF214h case    9:*/		return 0x820DF218;
		  /* 820DF218h */ case   10:  		/* addi R5, R1, 128 */
		/* 820DF218h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DF218h case   10:*/		return 0x820DF21C;
		  /* 820DF21Ch */ case   11:  		/* mr R3, R31 */
		/* 820DF21Ch case   11:*/		regs.R3 = regs.R31;
		/* 820DF21Ch case   11:*/		return 0x820DF220;
		  /* 820DF220h */ case   12:  		/* bl -20808 */
		/* 820DF220h case   12:*/		regs.LR = 0x820DF224; return 0x820DA0D8;
		/* 820DF220h case   12:*/		return 0x820DF224;
		  /* 820DF224h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DF224h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF224h case   13:*/		return 0x820DF228;
		  /* 820DF228h */ case   14:  		/* bc 12, CR0_LT, 132 */
		/* 820DF228h case   14:*/		if ( regs.CR[0].lt ) { return 0x820DF2AC;  }
		/* 820DF228h case   14:*/		return 0x820DF22C;
		  /* 820DF22Ch */ case   15:  		/* cmplw CR6, R23, R22 */
		/* 820DF22Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R22);
		/* 820DF22Ch case   15:*/		return 0x820DF230;
		  /* 820DF230h */ case   16:  		/* bc 12, CR6_GT, 140 */
		/* 820DF230h case   16:*/		if ( regs.CR[6].gt ) { return 0x820DF2BC;  }
		/* 820DF230h case   16:*/		return 0x820DF234;
		  /* 820DF234h */ case   17:  		/* bc 12, CR6_EQ, 128 */
		/* 820DF234h case   17:*/		if ( regs.CR[6].eq ) { return 0x820DF2B4;  }
		/* 820DF234h case   17:*/		return 0x820DF238;
		  /* 820DF238h */ case   18:  		/* lis R11, 29584 */
		/* 820DF238h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0x7390);
		/* 820DF238h case   18:*/		return 0x820DF23C;
		  /* 820DF23Ch */ case   19:  		/* cmplw CR6, R23, R11 */
		/* 820DF23Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 820DF23Ch case   19:*/		return 0x820DF240;
		  /* 820DF240h */ case   20:  		/* bc 12, CR6_EQ, 160 */
		/* 820DF240h case   20:*/		if ( regs.CR[6].eq ) { return 0x820DF2E0;  }
		/* 820DF240h case   20:*/		return 0x820DF244;
		  /* 820DF244h */ case   21:  		/* lis R11, 29600 */
		/* 820DF244h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0x73A0);
		/* 820DF244h case   21:*/		return 0x820DF248;
		  /* 820DF248h */ case   22:  		/* cmplw CR6, R23, R11 */
		/* 820DF248h case   22:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 820DF248h case   22:*/		return 0x820DF24C;
		  /* 820DF24Ch */ case   23:  		/* bc 12, CR6_EQ, 156 */
		/* 820DF24Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x820DF2E8;  }
		/* 820DF24Ch case   23:*/		return 0x820DF250;
		  /* 820DF250h */ case   24:  		/* lis R11, 29616 */
		/* 820DF250h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0x73B0);
		/* 820DF250h case   24:*/		return 0x820DF254;
		  /* 820DF254h */ case   25:  		/* cmplw CR6, R23, R11 */
		/* 820DF254h case   25:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 820DF254h case   25:*/		return 0x820DF258;
		  /* 820DF258h */ case   26:  		/* bc 12, CR6_EQ, 92 */
		/* 820DF258h case   26:*/		if ( regs.CR[6].eq ) { return 0x820DF2B4;  }
		/* 820DF258h case   26:*/		return 0x820DF25C;
		  /* 820DF25Ch */ case   27:  		/* lis R11, 29632 */
		/* 820DF25Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0x73C0);
		/* 820DF25Ch case   27:*/		return 0x820DF260;
		  /* 820DF260h */ case   28:  		/* cmplw CR6, R23, R11 */
		/* 820DF260h case   28:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 820DF260h case   28:*/		return 0x820DF264;
		  /* 820DF264h */ case   29:  		/* bc 4, CR6_EQ, 140 */
		/* 820DF264h case   29:*/		if ( !regs.CR[6].eq ) { return 0x820DF2F0;  }
		/* 820DF264h case   29:*/		return 0x820DF268;
		  /* 820DF268h */ case   30:  		/* mr R4, R28 */
		/* 820DF268h case   30:*/		regs.R4 = regs.R28;
		/* 820DF268h case   30:*/		return 0x820DF26C;
		  /* 820DF26Ch */ case   31:  		/* mr R3, R31 */
		/* 820DF26Ch case   31:*/		regs.R3 = regs.R31;
		/* 820DF26Ch case   31:*/		return 0x820DF270;
		  /* 820DF270h */ case   32:  		/* bl -20888 */
		/* 820DF270h case   32:*/		regs.LR = 0x820DF274; return 0x820DA0D8;
		/* 820DF270h case   32:*/		return 0x820DF274;
		  /* 820DF274h */ case   33:  		/* cmpwi CR6, R3, 0 */
		/* 820DF274h case   33:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820DF274h case   33:*/		return 0x820DF278;
		  /* 820DF278h */ case   34:  		/* bc 12, CR6_LT, 52 */
		/* 820DF278h case   34:*/		if ( regs.CR[6].lt ) { return 0x820DF2AC;  }
		/* 820DF278h case   34:*/		return 0x820DF27C;
		  /* 820DF27Ch */ case   35:  		/* mr R4, R29 */
		/* 820DF27Ch case   35:*/		regs.R4 = regs.R29;
		/* 820DF27Ch case   35:*/		return 0x820DF280;
		  /* 820DF280h */ case   36:  		/* addi R6, R1, 160 */
		/* 820DF280h case   36:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DF280h case   36:*/		return 0x820DF284;
		  /* 820DF284h */ case   37:  		/* addi R5, R1, 192 */
		/* 820DF284h case   37:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820DF284h case   37:*/		return 0x820DF288;
		  /* 820DF288h */ case   38:  		/* mr R3, R31 */
		/* 820DF288h case   38:*/		regs.R3 = regs.R31;
		/* 820DF288h case   38:*/		return 0x820DF28C;
		  /* 820DF28Ch */ case   39:  		/* bl -20916 */
		/* 820DF28Ch case   39:*/		regs.LR = 0x820DF290; return 0x820DA0D8;
		/* 820DF28Ch case   39:*/		return 0x820DF290;
		  /* 820DF290h */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 820DF290h case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF290h case   40:*/		return 0x820DF294;
		  /* 820DF294h */ case   41:  		/* bc 12, CR0_LT, 24 */
		/* 820DF294h case   41:*/		if ( regs.CR[0].lt ) { return 0x820DF2AC;  }
		/* 820DF294h case   41:*/		return 0x820DF298;
		  /* 820DF298h */ case   42:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820DF298h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820DF298h case   42:*/		return 0x820DF29C;
		  /* 820DF29Ch */ case   43:  		/* addi R30, R30, 1 */
		/* 820DF29Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DF29Ch case   43:*/		return 0x820DF2A0;
		  /* 820DF2A0h */ case   44:  		/* cmplw CR6, R30, R11 */
		/* 820DF2A0h case   44:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820DF2A0h case   44:*/		return 0x820DF2A4;
		  /* 820DF2A4h */ case   45:  		/* bc 12, CR6_LT, -232 */
		/* 820DF2A4h case   45:*/		if ( regs.CR[6].lt ) { return 0x820DF1BC;  }
		/* 820DF2A4h case   45:*/		return 0x820DF2A8;
	}
	return 0x820DF2A8;
} // Block from 820DF1F0h-820DF2A8h (46 instructions)

//////////////////////////////////////////////////////
// Block at 820DF2A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF2A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF2A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF2A8);
		  /* 820DF2A8h */ case    0:  		/* li R3, 0 */
		/* 820DF2A8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DF2A8h case    0:*/		return 0x820DF2AC;
	}
	return 0x820DF2AC;
} // Block from 820DF2A8h-820DF2ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DF2ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF2AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF2AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF2AC);
		  /* 820DF2ACh */ case    0:  		/* addi R1, R1, 336 */
		/* 820DF2ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x150);
		/* 820DF2ACh case    0:*/		return 0x820DF2B0;
	}
	return 0x820DF2B0;
} // Block from 820DF2ACh-820DF2B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DF2B0h
// Function '?EmitSwizzleOp@C30SWProgramML@D3DXShader@@MAAJPBDIIII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF2B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF2B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF2B0);
		  /* 820DF2B0h */ case    0:  		/* b -319532 */
		/* 820DF2B0h case    0:*/		return 0x82091284;
		/* 820DF2B0h case    0:*/		return 0x820DF2B4;
	}
	return 0x820DF2B4;
} // Block from 820DF2B0h-820DF2B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DF2B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF2B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF2B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF2B4);
		  /* 820DF2B4h */ case    0:  		/* mr R4, R27 */
		/* 820DF2B4h case    0:*/		regs.R4 = regs.R27;
		/* 820DF2B4h case    0:*/		return 0x820DF2B8;
		  /* 820DF2B8h */ case    1:  		/* b -76 */
		/* 820DF2B8h case    1:*/		return 0x820DF26C;
		/* 820DF2B8h case    1:*/		return 0x820DF2BC;
	}
	return 0x820DF2BC;
} // Block from 820DF2B4h-820DF2BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DF2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF2BC);
		  /* 820DF2BCh */ case    0:  		/* lis R11, 29776 */
		/* 820DF2BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x7450);
		/* 820DF2BCh case    0:*/		return 0x820DF2C0;
		  /* 820DF2C0h */ case    1:  		/* cmplw CR6, R23, R11 */
		/* 820DF2C0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 820DF2C0h case    1:*/		return 0x820DF2C4;
		  /* 820DF2C4h */ case    2:  		/* bc 12, CR6_EQ, -92 */
		/* 820DF2C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DF268;  }
		/* 820DF2C4h case    2:*/		return 0x820DF2C8;
		  /* 820DF2C8h */ case    3:  		/* lis R11, 29792 */
		/* 820DF2C8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0x7460);
		/* 820DF2C8h case    3:*/		return 0x820DF2CC;
		  /* 820DF2CCh */ case    4:  		/* cmplw CR6, R23, R11 */
		/* 820DF2CCh case    4:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 820DF2CCh case    4:*/		return 0x820DF2D0;
		  /* 820DF2D0h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 820DF2D0h case    5:*/		if ( regs.CR[6].eq ) { return 0x820DF2E8;  }
		/* 820DF2D0h case    5:*/		return 0x820DF2D4;
		  /* 820DF2D4h */ case    6:  		/* lis R11, 29808 */
		/* 820DF2D4h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0x7470);
		/* 820DF2D4h case    6:*/		return 0x820DF2D8;
		  /* 820DF2D8h */ case    7:  		/* cmplw CR6, R23, R11 */
		/* 820DF2D8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 820DF2D8h case    7:*/		return 0x820DF2DC;
		  /* 820DF2DCh */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 820DF2DCh case    8:*/		if ( !regs.CR[6].eq ) { return 0x820DF2F0;  }
		/* 820DF2DCh case    8:*/		return 0x820DF2E0;
	}
	return 0x820DF2E0;
} // Block from 820DF2BCh-820DF2E0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820DF2E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF2E0);
		  /* 820DF2E0h */ case    0:  		/* mr R4, R25 */
		/* 820DF2E0h case    0:*/		regs.R4 = regs.R25;
		/* 820DF2E0h case    0:*/		return 0x820DF2E4;
		  /* 820DF2E4h */ case    1:  		/* b -120 */
		/* 820DF2E4h case    1:*/		return 0x820DF26C;
		/* 820DF2E4h case    1:*/		return 0x820DF2E8;
	}
	return 0x820DF2E8;
} // Block from 820DF2E0h-820DF2E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DF2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF2E8);
		  /* 820DF2E8h */ case    0:  		/* mr R4, R26 */
		/* 820DF2E8h case    0:*/		regs.R4 = regs.R26;
		/* 820DF2E8h case    0:*/		return 0x820DF2EC;
		  /* 820DF2ECh */ case    1:  		/* b -128 */
		/* 820DF2ECh case    1:*/		return 0x820DF26C;
		/* 820DF2ECh case    1:*/		return 0x820DF2F0;
	}
	return 0x820DF2F0;
} // Block from 820DF2E8h-820DF2F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DF2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF2F0);
		  /* 820DF2F0h */ case    0:  		/* lis R3, -32768 */
		/* 820DF2F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820DF2F0h case    0:*/		return 0x820DF2F4;
		  /* 820DF2F4h */ case    1:  		/* ori R3, R3, 16389 */
		/* 820DF2F4h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820DF2F4h case    1:*/		return 0x820DF2F8;
		  /* 820DF2F8h */ case    2:  		/* b -76 */
		/* 820DF2F8h case    2:*/		return 0x820DF2AC;
		/* 820DF2F8h case    2:*/		return 0x820DF2FC;
		  /* 820DF2FCh */ case    3:  		/* nop */
		/* 820DF2FCh case    3:*/		cpu::op::nop();
		/* 820DF2FCh case    3:*/		return 0x820DF300;
	}
	return 0x820DF300;
} // Block from 820DF2F0h-820DF300h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DF300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF300);
		  /* 820DF300h */ case    0:  		/* mfspr R12, LR */
		/* 820DF300h case    0:*/		regs.R12 = regs.LR;
		/* 820DF300h case    0:*/		return 0x820DF304;
		  /* 820DF304h */ case    1:  		/* bl -319656 */
		/* 820DF304h case    1:*/		regs.LR = 0x820DF308; return 0x8209125C;
		/* 820DF304h case    1:*/		return 0x820DF308;
		  /* 820DF308h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820DF308h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820DF308h case    2:*/		return 0x820DF30C;
		  /* 820DF30Ch */ case    3:  		/* mr R31, R3 */
		/* 820DF30Ch case    3:*/		regs.R31 = regs.R3;
		/* 820DF30Ch case    3:*/		return 0x820DF310;
		  /* 820DF310h */ case    4:  		/* mr R30, R4 */
		/* 820DF310h case    4:*/		regs.R30 = regs.R4;
		/* 820DF310h case    4:*/		return 0x820DF314;
		  /* 820DF314h */ case    5:  		/* mr R29, R5 */
		/* 820DF314h case    5:*/		regs.R29 = regs.R5;
		/* 820DF314h case    5:*/		return 0x820DF318;
		  /* 820DF318h */ case    6:  		/* bl -20840 */
		/* 820DF318h case    6:*/		regs.LR = 0x820DF31C; return 0x820DA1B0;
		/* 820DF318h case    6:*/		return 0x820DF31C;
		  /* 820DF31Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DF31Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF31Ch case    7:*/		return 0x820DF320;
		  /* 820DF320h */ case    8:  		/* bc 12, CR0_LT, 28 */
		/* 820DF320h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DF33C;  }
		/* 820DF320h case    8:*/		return 0x820DF324;
		  /* 820DF324h */ case    9:  		/* lis R11, -32254 */
		/* 820DF324h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF324h case    9:*/		return 0x820DF328;
		  /* 820DF328h */ case   10:  		/* mr R6, R29 */
		/* 820DF328h case   10:*/		regs.R6 = regs.R29;
		/* 820DF328h case   10:*/		return 0x820DF32C;
		  /* 820DF32Ch */ case   11:  		/* addi R4, R11, -28080 */
		/* 820DF32Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9250);
		/* 820DF32Ch case   11:*/		return 0x820DF330;
		  /* 820DF330h */ case   12:  		/* mr R5, R30 */
		/* 820DF330h case   12:*/		regs.R5 = regs.R30;
		/* 820DF330h case   12:*/		return 0x820DF334;
		  /* 820DF334h */ case   13:  		/* mr R3, R31 */
		/* 820DF334h case   13:*/		regs.R3 = regs.R31;
		/* 820DF334h case   13:*/		return 0x820DF338;
		  /* 820DF338h */ case   14:  		/* bl -21088 */
		/* 820DF338h case   14:*/		regs.LR = 0x820DF33C; return 0x820DA0D8;
		/* 820DF338h case   14:*/		return 0x820DF33C;
	}
	return 0x820DF33C;
} // Block from 820DF300h-820DF33Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 820DF33Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF33C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF33C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF33C);
		  /* 820DF33Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 820DF33Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820DF33Ch case    0:*/		return 0x820DF340;
		  /* 820DF340h */ case    1:  		/* b -319636 */
		/* 820DF340h case    1:*/		return 0x820912AC;
		/* 820DF340h case    1:*/		return 0x820DF344;
		  /* 820DF344h */ case    2:  		/* nop */
		/* 820DF344h case    2:*/		cpu::op::nop();
		/* 820DF344h case    2:*/		return 0x820DF348;
	}
	return 0x820DF348;
} // Block from 820DF33Ch-820DF348h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DF348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF348);
		  /* 820DF348h */ case    0:  		/* mfspr R12, LR */
		/* 820DF348h case    0:*/		regs.R12 = regs.LR;
		/* 820DF348h case    0:*/		return 0x820DF34C;
		  /* 820DF34Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DF34Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF34Ch case    1:*/		return 0x820DF350;
		  /* 820DF350h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DF350h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DF350h case    2:*/		return 0x820DF354;
		  /* 820DF354h */ case    3:  		/* lis R11, -32254 */
		/* 820DF354h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF354h case    3:*/		return 0x820DF358;
		  /* 820DF358h */ case    4:  		/* addi R4, R11, -28032 */
		/* 820DF358h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9280);
		/* 820DF358h case    4:*/		return 0x820DF35C;
		  /* 820DF35Ch */ case    5:  		/* bl -21124 */
		/* 820DF35Ch case    5:*/		regs.LR = 0x820DF360; return 0x820DA0D8;
		/* 820DF35Ch case    5:*/		return 0x820DF360;
		  /* 820DF360h */ case    6:  		/* addi R1, R1, 112 */
		/* 820DF360h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DF360h case    6:*/		return 0x820DF364;
		  /* 820DF364h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DF364h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF364h case    7:*/		return 0x820DF368;
	}
	return 0x820DF368;
} // Block from 820DF348h-820DF368h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820DF368h
// Function '?EmitAndOp@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF368);
		  /* 820DF368h */ case    0:  		/* mtspr LR, R12 */
		/* 820DF368h case    0:*/		regs.LR = regs.R12;
		/* 820DF368h case    0:*/		return 0x820DF36C;
		  /* 820DF36Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 820DF36Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DF36Ch case    1:*/		return 0x820DF370;
	}
	return 0x820DF370;
} // Block from 820DF368h-820DF370h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DF370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF370);
		  /* 820DF370h */ case    0:  		/* mfspr R12, LR */
		/* 820DF370h case    0:*/		regs.R12 = regs.LR;
		/* 820DF370h case    0:*/		return 0x820DF374;
		  /* 820DF374h */ case    1:  		/* bl -319780 */
		/* 820DF374h case    1:*/		regs.LR = 0x820DF378; return 0x82091250;
		/* 820DF374h case    1:*/		return 0x820DF378;
		  /* 820DF378h */ case    2:  		/* stwu R1, <#[R1 - 288]> */
		/* 820DF378h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 820DF378h case    2:*/		return 0x820DF37C;
		  /* 820DF37Ch */ case    3:  		/* lis R11, -32254 */
		/* 820DF37Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF37Ch case    3:*/		return 0x820DF380;
		  /* 820DF380h */ case    4:  		/* mr R30, R3 */
		/* 820DF380h case    4:*/		regs.R30 = regs.R3;
		/* 820DF380h case    4:*/		return 0x820DF384;
		  /* 820DF384h */ case    5:  		/* addi R27, R11, -30704 */
		/* 820DF384h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFF8810);
		/* 820DF384h case    5:*/		return 0x820DF388;
		  /* 820DF388h */ case    6:  		/* lwz R11, <#[R3 + 1816]> */
		/* 820DF388h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000718) );
		/* 820DF388h case    6:*/		return 0x820DF38C;
		  /* 820DF38Ch */ case    7:  		/* mr R26, R4 */
		/* 820DF38Ch case    7:*/		regs.R26 = regs.R4;
		/* 820DF38Ch case    7:*/		return 0x820DF390;
		  /* 820DF390h */ case    8:  		/* mr R28, R5 */
		/* 820DF390h case    8:*/		regs.R28 = regs.R5;
		/* 820DF390h case    8:*/		return 0x820DF394;
		  /* 820DF394h */ case    9:  		/* li R31, 0 */
		/* 820DF394h case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820DF394h case    9:*/		return 0x820DF398;
		  /* 820DF398h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 820DF398h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DF398h case   10:*/		return 0x820DF39C;
		  /* 820DF39Ch */ case   11:  		/* bc 12, CR6_EQ, 116 */
		/* 820DF39Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x820DF410;  }
		/* 820DF39Ch case   11:*/		return 0x820DF3A0;
	}
	return 0x820DF3A0;
} // Block from 820DF370h-820DF3A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DF3A0h
// Function '?EmitAndCOp@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF3A0);
		  /* 820DF3A0h */ case    0:  		/* lis R11, -32254 */
		/* 820DF3A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF3A0h case    0:*/		return 0x820DF3A4;
		  /* 820DF3A4h */ case    1:  		/* addi R29, R11, -27960 */
		/* 820DF3A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF92C8);
		/* 820DF3A4h case    1:*/		return 0x820DF3A8;
		  /* 820DF3A8h */ case    2:  		/* mr R3, R30 */
		/* 820DF3A8h case    2:*/		regs.R3 = regs.R30;
		/* 820DF3A8h case    2:*/		return 0x820DF3AC;
		  /* 820DF3ACh */ case    3:  		/* bl -20988 */
		/* 820DF3ACh case    3:*/		regs.LR = 0x820DF3B0; return 0x820DA1B0;
		/* 820DF3ACh case    3:*/		return 0x820DF3B0;
		  /* 820DF3B0h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820DF3B0h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF3B0h case    4:*/		return 0x820DF3B4;
		  /* 820DF3B4h */ case    5:  		/* bc 12, CR0_LT, 248 */
		/* 820DF3B4h case    5:*/		if ( regs.CR[0].lt ) { return 0x820DF4AC;  }
		/* 820DF3B4h case    5:*/		return 0x820DF3B8;
		  /* 820DF3B8h */ case    6:  		/* mr R7, R31 */
		/* 820DF3B8h case    6:*/		regs.R7 = regs.R31;
		/* 820DF3B8h case    6:*/		return 0x820DF3BC;
		  /* 820DF3BCh */ case    7:  		/* mr R6, R31 */
		/* 820DF3BCh case    7:*/		regs.R6 = regs.R31;
		/* 820DF3BCh case    7:*/		return 0x820DF3C0;
		  /* 820DF3C0h */ case    8:  		/* mr R5, R28 */
		/* 820DF3C0h case    8:*/		regs.R5 = regs.R28;
		/* 820DF3C0h case    8:*/		return 0x820DF3C4;
		  /* 820DF3C4h */ case    9:  		/* li R4, 32 */
		/* 820DF3C4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DF3C4h case    9:*/		return 0x820DF3C8;
		  /* 820DF3C8h */ case   10:  		/* addi R3, R1, 160 */
		/* 820DF3C8h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DF3C8h case   10:*/		return 0x820DF3CC;
		  /* 820DF3CCh */ case   11:  		/* bl -249228 */
		/* 820DF3CCh case   11:*/		regs.LR = 0x820DF3D0; return 0x820A2640;
		/* 820DF3CCh case   11:*/		return 0x820DF3D0;
		  /* 820DF3D0h */ case   12:  		/* mr R5, R27 */
		/* 820DF3D0h case   12:*/		regs.R5 = regs.R27;
		/* 820DF3D0h case   12:*/		return 0x820DF3D4;
		  /* 820DF3D4h */ case   13:  		/* mr R6, R31 */
		/* 820DF3D4h case   13:*/		regs.R6 = regs.R31;
		/* 820DF3D4h case   13:*/		return 0x820DF3D8;
	}
	return 0x820DF3D8;
} // Block from 820DF3A0h-820DF3D8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF3D8h
// Function '?EmitOrOp@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF3D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF3D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF3D8);
		  /* 820DF3D8h */ case    0:  		/* li R4, 32 */
		/* 820DF3D8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DF3D8h case    0:*/		return 0x820DF3DC;
		  /* 820DF3DCh */ case    1:  		/* addi R3, R1, 128 */
		/* 820DF3DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DF3DCh case    1:*/		return 0x820DF3E0;
		  /* 820DF3E0h */ case    2:  		/* bl -249248 */
		/* 820DF3E0h case    2:*/		regs.LR = 0x820DF3E4; return 0x820A2640;
		/* 820DF3E0h case    2:*/		return 0x820DF3E4;
		  /* 820DF3E4h */ case    3:  		/* mr R4, R29 */
		/* 820DF3E4h case    3:*/		regs.R4 = regs.R29;
		/* 820DF3E4h case    3:*/		return 0x820DF3E8;
		  /* 820DF3E8h */ case    4:  		/* addi R6, R1, 160 */
		/* 820DF3E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DF3E8h case    4:*/		return 0x820DF3EC;
		  /* 820DF3ECh */ case    5:  		/* addi R5, R1, 128 */
		/* 820DF3ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DF3ECh case    5:*/		return 0x820DF3F0;
		  /* 820DF3F0h */ case    6:  		/* mr R3, R30 */
		/* 820DF3F0h case    6:*/		regs.R3 = regs.R30;
		/* 820DF3F0h case    6:*/		return 0x820DF3F4;
		  /* 820DF3F4h */ case    7:  		/* bl -21276 */
		/* 820DF3F4h case    7:*/		regs.LR = 0x820DF3F8; return 0x820DA0D8;
		/* 820DF3F4h case    7:*/		return 0x820DF3F8;
		  /* 820DF3F8h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DF3F8h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF3F8h case    8:*/		return 0x820DF3FC;
		  /* 820DF3FCh */ case    9:  		/* bc 12, CR0_LT, 176 */
		/* 820DF3FCh case    9:*/		if ( regs.CR[0].lt ) { return 0x820DF4AC;  }
		/* 820DF3FCh case    9:*/		return 0x820DF400;
		  /* 820DF400h */ case   10:  		/* lwz R11, <#[R30 + 1816]> */
		/* 820DF400h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000718) );
		/* 820DF400h case   10:*/		return 0x820DF404;
		  /* 820DF404h */ case   11:  		/* addi R31, R31, 1 */
		/* 820DF404h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820DF404h case   11:*/		return 0x820DF408;
		  /* 820DF408h */ case   12:  		/* cmplw CR6, R31, R11 */
		/* 820DF408h case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820DF408h case   12:*/		return 0x820DF40C;
		  /* 820DF40Ch */ case   13:  		/* bc 12, CR6_LT, -100 */
		/* 820DF40Ch case   13:*/		if ( regs.CR[6].lt ) { return 0x820DF3A8;  }
		/* 820DF40Ch case   13:*/		return 0x820DF410;
	}
	return 0x820DF410;
} // Block from 820DF3D8h-820DF410h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF410h
// Function '?EmitXorOp@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF410);
		  /* 820DF410h */ case    0:  		/* li R31, 0 */
		/* 820DF410h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820DF410h case    0:*/		return 0x820DF414;
		  /* 820DF414h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820DF414h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DF414h case    1:*/		return 0x820DF418;
		  /* 820DF418h */ case    2:  		/* bc 12, CR6_EQ, 144 */
		/* 820DF418h case    2:*/		if ( regs.CR[6].eq ) { return 0x820DF4A8;  }
		/* 820DF418h case    2:*/		return 0x820DF41C;
		  /* 820DF41Ch */ case    3:  		/* lis R11, -32254 */
		/* 820DF41Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF41Ch case    3:*/		return 0x820DF420;
		  /* 820DF420h */ case    4:  		/* addi R29, R11, -27996 */
		/* 820DF420h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF92A4);
		/* 820DF420h case    4:*/		return 0x820DF424;
		  /* 820DF424h */ case    5:  		/* mr R3, R30 */
		/* 820DF424h case    5:*/		regs.R3 = regs.R30;
		/* 820DF424h case    5:*/		return 0x820DF428;
		  /* 820DF428h */ case    6:  		/* bl -21112 */
		/* 820DF428h case    6:*/		regs.LR = 0x820DF42C; return 0x820DA1B0;
		/* 820DF428h case    6:*/		return 0x820DF42C;
		  /* 820DF42Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DF42Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF42Ch case    7:*/		return 0x820DF430;
		  /* 820DF430h */ case    8:  		/* bc 12, CR0_LT, 124 */
		/* 820DF430h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DF4AC;  }
		/* 820DF430h case    8:*/		return 0x820DF434;
		  /* 820DF434h */ case    9:  		/* mr R7, R31 */
		/* 820DF434h case    9:*/		regs.R7 = regs.R31;
		/* 820DF434h case    9:*/		return 0x820DF438;
		  /* 820DF438h */ case   10:  		/* mr R6, R31 */
		/* 820DF438h case   10:*/		regs.R6 = regs.R31;
		/* 820DF438h case   10:*/		return 0x820DF43C;
		  /* 820DF43Ch */ case   11:  		/* mr R5, R26 */
		/* 820DF43Ch case   11:*/		regs.R5 = regs.R26;
		/* 820DF43Ch case   11:*/		return 0x820DF440;
		  /* 820DF440h */ case   12:  		/* li R4, 32 */
		/* 820DF440h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DF440h case   12:*/		return 0x820DF444;
		  /* 820DF444h */ case   13:  		/* addi R3, R1, 192 */
		/* 820DF444h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820DF444h case   13:*/		return 0x820DF448;
	}
	return 0x820DF448;
} // Block from 820DF410h-820DF448h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF448h
// Function '?EmitZeroOp@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF448);
		  /* 820DF448h */ case    0:  		/* bl -249352 */
		/* 820DF448h case    0:*/		regs.LR = 0x820DF44C; return 0x820A2640;
		/* 820DF448h case    0:*/		return 0x820DF44C;
		  /* 820DF44Ch */ case    1:  		/* mr R7, R31 */
		/* 820DF44Ch case    1:*/		regs.R7 = regs.R31;
		/* 820DF44Ch case    1:*/		return 0x820DF450;
		  /* 820DF450h */ case    2:  		/* mr R6, R31 */
		/* 820DF450h case    2:*/		regs.R6 = regs.R31;
		/* 820DF450h case    2:*/		return 0x820DF454;
		  /* 820DF454h */ case    3:  		/* mr R5, R28 */
		/* 820DF454h case    3:*/		regs.R5 = regs.R28;
		/* 820DF454h case    3:*/		return 0x820DF458;
		  /* 820DF458h */ case    4:  		/* li R4, 32 */
		/* 820DF458h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DF458h case    4:*/		return 0x820DF45C;
		  /* 820DF45Ch */ case    5:  		/* addi R3, R1, 160 */
		/* 820DF45Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 820DF45Ch case    5:*/		return 0x820DF460;
		  /* 820DF460h */ case    6:  		/* bl -249376 */
		/* 820DF460h case    6:*/		regs.LR = 0x820DF464; return 0x820A2640;
		/* 820DF460h case    6:*/		return 0x820DF464;
		  /* 820DF464h */ case    7:  		/* mr R5, R27 */
		/* 820DF464h case    7:*/		regs.R5 = regs.R27;
		/* 820DF464h case    7:*/		return 0x820DF468;
		  /* 820DF468h */ case    8:  		/* mr R6, R31 */
		/* 820DF468h case    8:*/		regs.R6 = regs.R31;
		/* 820DF468h case    8:*/		return 0x820DF46C;
		  /* 820DF46Ch */ case    9:  		/* li R4, 32 */
		/* 820DF46Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DF46Ch case    9:*/		return 0x820DF470;
	}
	return 0x820DF470;
} // Block from 820DF448h-820DF470h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DF470h
// Function '?EmitTrueIntOp@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF470);
		  /* 820DF470h */ case    0:  		/* addi R3, R1, 128 */
		/* 820DF470h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DF470h case    0:*/		return 0x820DF474;
		  /* 820DF474h */ case    1:  		/* bl -249396 */
		/* 820DF474h case    1:*/		regs.LR = 0x820DF478; return 0x820A2640;
		/* 820DF474h case    1:*/		return 0x820DF478;
		  /* 820DF478h */ case    2:  		/* mr R4, R29 */
		/* 820DF478h case    2:*/		regs.R4 = regs.R29;
		/* 820DF478h case    2:*/		return 0x820DF47C;
		  /* 820DF47Ch */ case    3:  		/* addi R7, R1, 128 */
		/* 820DF47Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820DF47Ch case    3:*/		return 0x820DF480;
		  /* 820DF480h */ case    4:  		/* addi R6, R1, 160 */
		/* 820DF480h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820DF480h case    4:*/		return 0x820DF484;
		  /* 820DF484h */ case    5:  		/* addi R5, R1, 192 */
		/* 820DF484h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820DF484h case    5:*/		return 0x820DF488;
		  /* 820DF488h */ case    6:  		/* mr R3, R30 */
		/* 820DF488h case    6:*/		regs.R3 = regs.R30;
		/* 820DF488h case    6:*/		return 0x820DF48C;
		  /* 820DF48Ch */ case    7:  		/* bl -21428 */
		/* 820DF48Ch case    7:*/		regs.LR = 0x820DF490; return 0x820DA0D8;
		/* 820DF48Ch case    7:*/		return 0x820DF490;
		  /* 820DF490h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DF490h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF490h case    8:*/		return 0x820DF494;
		  /* 820DF494h */ case    9:  		/* bc 12, CR0_LT, 24 */
		/* 820DF494h case    9:*/		if ( regs.CR[0].lt ) { return 0x820DF4AC;  }
		/* 820DF494h case    9:*/		return 0x820DF498;
	}
	return 0x820DF498;
} // Block from 820DF470h-820DF498h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DF498h
// Function '?EmitSelectOp@C30SWProgramML@D3DXShader@@MAAJPBD00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF498);
		  /* 820DF498h */ case    0:  		/* lwz R11, <#[R30 + 1816]> */
		/* 820DF498h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000718) );
		/* 820DF498h case    0:*/		return 0x820DF49C;
		  /* 820DF49Ch */ case    1:  		/* addi R31, R31, 1 */
		/* 820DF49Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820DF49Ch case    1:*/		return 0x820DF4A0;
		  /* 820DF4A0h */ case    2:  		/* cmplw CR6, R31, R11 */
		/* 820DF4A0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820DF4A0h case    2:*/		return 0x820DF4A4;
		  /* 820DF4A4h */ case    3:  		/* bc 12, CR6_LT, -128 */
		/* 820DF4A4h case    3:*/		if ( regs.CR[6].lt ) { return 0x820DF424;  }
		/* 820DF4A4h case    3:*/		return 0x820DF4A8;
	}
	return 0x820DF4A8;
} // Block from 820DF498h-820DF4A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DF4A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF4A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF4A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF4A8);
		  /* 820DF4A8h */ case    0:  		/* li R3, 0 */
		/* 820DF4A8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DF4A8h case    0:*/		return 0x820DF4AC;
	}
	return 0x820DF4AC;
} // Block from 820DF4A8h-820DF4ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DF4ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF4AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF4AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF4AC);
		  /* 820DF4ACh */ case    0:  		/* addi R1, R1, 288 */
		/* 820DF4ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 820DF4ACh case    0:*/		return 0x820DF4B0;
		  /* 820DF4B0h */ case    1:  		/* b -320016 */
		/* 820DF4B0h case    1:*/		return 0x820912A0;
		/* 820DF4B0h case    1:*/		return 0x820DF4B4;
		  /* 820DF4B4h */ case    2:  		/* nop */
		/* 820DF4B4h case    2:*/		cpu::op::nop();
		/* 820DF4B4h case    2:*/		return 0x820DF4B8;
	}
	return 0x820DF4B8;
} // Block from 820DF4ACh-820DF4B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DF4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF4B8);
		  /* 820DF4B8h */ case    0:  		/* mfspr R12, LR */
		/* 820DF4B8h case    0:*/		regs.R12 = regs.LR;
		/* 820DF4B8h case    0:*/		return 0x820DF4BC;
		  /* 820DF4BCh */ case    1:  		/* bl -320100 */
		/* 820DF4BCh case    1:*/		regs.LR = 0x820DF4C0; return 0x82091258;
		/* 820DF4BCh case    1:*/		return 0x820DF4C0;
		  /* 820DF4C0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 820DF4C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 820DF4C0h case    2:*/		return 0x820DF4C4;
		  /* 820DF4C4h */ case    3:  		/* mr R31, R3 */
		/* 820DF4C4h case    3:*/		regs.R31 = regs.R3;
		/* 820DF4C4h case    3:*/		return 0x820DF4C8;
		  /* 820DF4C8h */ case    4:  		/* mr R29, R4 */
		/* 820DF4C8h case    4:*/		regs.R29 = regs.R4;
		/* 820DF4C8h case    4:*/		return 0x820DF4CC;
		  /* 820DF4CCh */ case    5:  		/* bl -21276 */
		/* 820DF4CCh case    5:*/		regs.LR = 0x820DF4D0; return 0x820DA1B0;
		/* 820DF4CCh case    5:*/		return 0x820DF4D0;
	}
	return 0x820DF4D0;
} // Block from 820DF4B8h-820DF4D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DF4D0h
// Function '?EmitRoundOp@C30SWProgramML@D3DXShader@@MAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF4D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF4D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF4D0);
		  /* 820DF4D0h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820DF4D0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF4D0h case    0:*/		return 0x820DF4D4;
		  /* 820DF4D4h */ case    1:  		/* bc 12, CR0_LT, 596 */
		/* 820DF4D4h case    1:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF4D4h case    1:*/		return 0x820DF4D8;
		  /* 820DF4D8h */ case    2:  		/* lis R11, -32254 */
		/* 820DF4D8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF4D8h case    2:*/		return 0x820DF4DC;
		  /* 820DF4DCh */ case    3:  		/* mr R3, R31 */
		/* 820DF4DCh case    3:*/		regs.R3 = regs.R31;
		/* 820DF4DCh case    3:*/		return 0x820DF4E0;
		  /* 820DF4E0h */ case    4:  		/* addi R4, R11, -27748 */
		/* 820DF4E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF939C);
		/* 820DF4E0h case    4:*/		return 0x820DF4E4;
		  /* 820DF4E4h */ case    5:  		/* bl -21516 */
		/* 820DF4E4h case    5:*/		regs.LR = 0x820DF4E8; return 0x820DA0D8;
		/* 820DF4E4h case    5:*/		return 0x820DF4E8;
		  /* 820DF4E8h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DF4E8h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF4E8h case    6:*/		return 0x820DF4EC;
		  /* 820DF4ECh */ case    7:  		/* bc 12, CR0_LT, 572 */
		/* 820DF4ECh case    7:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF4ECh case    7:*/		return 0x820DF4F0;
		  /* 820DF4F0h */ case    8:  		/* mr R3, R31 */
		/* 820DF4F0h case    8:*/		regs.R3 = regs.R31;
		/* 820DF4F0h case    8:*/		return 0x820DF4F4;
		  /* 820DF4F4h */ case    9:  		/* bl -21316 */
		/* 820DF4F4h case    9:*/		regs.LR = 0x820DF4F8; return 0x820DA1B0;
		/* 820DF4F4h case    9:*/		return 0x820DF4F8;
		  /* 820DF4F8h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DF4F8h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF4F8h case   10:*/		return 0x820DF4FC;
		  /* 820DF4FCh */ case   11:  		/* bc 12, CR0_LT, 556 */
		/* 820DF4FCh case   11:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF4FCh case   11:*/		return 0x820DF500;
	}
	return 0x820DF500;
} // Block from 820DF4D0h-820DF500h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DF500h
// Function '?EmitConvertUIntToFloatOp@C30SWProgramML@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF500);
		  /* 820DF500h */ case    0:  		/* lis R11, -32254 */
		/* 820DF500h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF500h case    0:*/		return 0x820DF504;
		  /* 820DF504h */ case    1:  		/* mr R3, R31 */
		/* 820DF504h case    1:*/		regs.R3 = regs.R31;
		/* 820DF504h case    1:*/		return 0x820DF508;
		  /* 820DF508h */ case    2:  		/* addi R4, R11, -27764 */
		/* 820DF508h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF938C);
		/* 820DF508h case    2:*/		return 0x820DF50C;
		  /* 820DF50Ch */ case    3:  		/* bl -21556 */
		/* 820DF50Ch case    3:*/		regs.LR = 0x820DF510; return 0x820DA0D8;
		/* 820DF50Ch case    3:*/		return 0x820DF510;
		  /* 820DF510h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820DF510h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF510h case    4:*/		return 0x820DF514;
		  /* 820DF514h */ case    5:  		/* bc 12, CR0_LT, 532 */
		/* 820DF514h case    5:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF514h case    5:*/		return 0x820DF518;
		  /* 820DF518h */ case    6:  		/* mr R3, R31 */
		/* 820DF518h case    6:*/		regs.R3 = regs.R31;
		/* 820DF518h case    6:*/		return 0x820DF51C;
		  /* 820DF51Ch */ case    7:  		/* bl -21356 */
		/* 820DF51Ch case    7:*/		regs.LR = 0x820DF520; return 0x820DA1B0;
		/* 820DF51Ch case    7:*/		return 0x820DF520;
		  /* 820DF520h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DF520h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF520h case    8:*/		return 0x820DF524;
		  /* 820DF524h */ case    9:  		/* bc 12, CR0_LT, 516 */
		/* 820DF524h case    9:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF524h case    9:*/		return 0x820DF528;
		  /* 820DF528h */ case   10:  		/* lis R11, -32254 */
		/* 820DF528h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF528h case   10:*/		return 0x820DF52C;
		  /* 820DF52Ch */ case   11:  		/* mr R3, R31 */
		/* 820DF52Ch case   11:*/		regs.R3 = regs.R31;
		/* 820DF52Ch case   11:*/		return 0x820DF530;
		  /* 820DF530h */ case   12:  		/* addi R4, R11, -27776 */
		/* 820DF530h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9380);
		/* 820DF530h case   12:*/		return 0x820DF534;
		  /* 820DF534h */ case   13:  		/* bl -21596 */
		/* 820DF534h case   13:*/		regs.LR = 0x820DF538; return 0x820DA0D8;
		/* 820DF534h case   13:*/		return 0x820DF538;
	}
	return 0x820DF538;
} // Block from 820DF500h-820DF538h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF538h
// Function '?EmitConvertFloatToUIntOp@C30SWProgramML@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF538);
		  /* 820DF538h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820DF538h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF538h case    0:*/		return 0x820DF53C;
		  /* 820DF53Ch */ case    1:  		/* bc 12, CR0_LT, 492 */
		/* 820DF53Ch case    1:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF53Ch case    1:*/		return 0x820DF540;
		  /* 820DF540h */ case    2:  		/* mr R3, R31 */
		/* 820DF540h case    2:*/		regs.R3 = regs.R31;
		/* 820DF540h case    2:*/		return 0x820DF544;
		  /* 820DF544h */ case    3:  		/* bl -21396 */
		/* 820DF544h case    3:*/		regs.LR = 0x820DF548; return 0x820DA1B0;
		/* 820DF544h case    3:*/		return 0x820DF548;
		  /* 820DF548h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820DF548h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF548h case    4:*/		return 0x820DF54C;
		  /* 820DF54Ch */ case    5:  		/* bc 12, CR0_LT, 476 */
		/* 820DF54Ch case    5:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF54Ch case    5:*/		return 0x820DF550;
		  /* 820DF550h */ case    6:  		/* lis R11, -32254 */
		/* 820DF550h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF550h case    6:*/		return 0x820DF554;
		  /* 820DF554h */ case    7:  		/* addi R5, R31, 508 */
		/* 820DF554h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x1FC);
		/* 820DF554h case    7:*/		return 0x820DF558;
		  /* 820DF558h */ case    8:  		/* addi R4, R11, -27820 */
		/* 820DF558h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9354);
		/* 820DF558h case    8:*/		return 0x820DF55C;
		  /* 820DF55Ch */ case    9:  		/* mr R3, R31 */
		/* 820DF55Ch case    9:*/		regs.R3 = regs.R31;
		/* 820DF55Ch case    9:*/		return 0x820DF560;
		  /* 820DF560h */ case   10:  		/* bl -21640 */
		/* 820DF560h case   10:*/		regs.LR = 0x820DF564; return 0x820DA0D8;
		/* 820DF560h case   10:*/		return 0x820DF564;
		  /* 820DF564h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820DF564h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF564h case   11:*/		return 0x820DF568;
		  /* 820DF568h */ case   12:  		/* bc 12, CR0_LT, 448 */
		/* 820DF568h case   12:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF568h case   12:*/		return 0x820DF56C;
		  /* 820DF56Ch */ case   13:  		/* mr R3, R31 */
		/* 820DF56Ch case   13:*/		regs.R3 = regs.R31;
		/* 820DF56Ch case   13:*/		return 0x820DF570;
	}
	return 0x820DF570;
} // Block from 820DF538h-820DF570h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF570h
// Function '?EmitConvertIntToFloatOp@C30SWProgramML@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF570);
		  /* 820DF570h */ case    0:  		/* bl -21440 */
		/* 820DF570h case    0:*/		regs.LR = 0x820DF574; return 0x820DA1B0;
		/* 820DF570h case    0:*/		return 0x820DF574;
		  /* 820DF574h */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820DF574h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF574h case    1:*/		return 0x820DF578;
		  /* 820DF578h */ case    2:  		/* bc 12, CR0_LT, 432 */
		/* 820DF578h case    2:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF578h case    2:*/		return 0x820DF57C;
		  /* 820DF57Ch */ case    3:  		/* lis R11, -32254 */
		/* 820DF57Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF57Ch case    3:*/		return 0x820DF580;
		  /* 820DF580h */ case    4:  		/* mr R3, R31 */
		/* 820DF580h case    4:*/		regs.R3 = regs.R31;
		/* 820DF580h case    4:*/		return 0x820DF584;
		  /* 820DF584h */ case    5:  		/* addi R4, R11, -30564 */
		/* 820DF584h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF889C);
		/* 820DF584h case    5:*/		return 0x820DF588;
		  /* 820DF588h */ case    6:  		/* bl -21680 */
		/* 820DF588h case    6:*/		regs.LR = 0x820DF58C; return 0x820DA0D8;
		/* 820DF588h case    6:*/		return 0x820DF58C;
		  /* 820DF58Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DF58Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF58Ch case    7:*/		return 0x820DF590;
		  /* 820DF590h */ case    8:  		/* bc 12, CR0_LT, 408 */
		/* 820DF590h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF590h case    8:*/		return 0x820DF594;
		  /* 820DF594h */ case    9:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DF594h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DF594h case    9:*/		return 0x820DF598;
		  /* 820DF598h */ case   10:  		/* mr R3, R31 */
		/* 820DF598h case   10:*/		regs.R3 = regs.R31;
		/* 820DF598h case   10:*/		return 0x820DF59C;
		  /* 820DF59Ch */ case   11:  		/* addi R11, R11, 1 */
		/* 820DF59Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820DF59Ch case   11:*/		return 0x820DF5A0;
		  /* 820DF5A0h */ case   12:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DF5A0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DF5A0h case   12:*/		return 0x820DF5A4;
		  /* 820DF5A4h */ case   13:  		/* bl -21492 */
		/* 820DF5A4h case   13:*/		regs.LR = 0x820DF5A8; return 0x820DA1B0;
		/* 820DF5A4h case   13:*/		return 0x820DF5A8;
	}
	return 0x820DF5A8;
} // Block from 820DF570h-820DF5A8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF5A8h
// Function '?EmitConvertFloatToIntOp@C30SWProgramML@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF5A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF5A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF5A8);
		  /* 820DF5A8h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820DF5A8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF5A8h case    0:*/		return 0x820DF5AC;
		  /* 820DF5ACh */ case    1:  		/* bc 12, CR0_LT, 380 */
		/* 820DF5ACh case    1:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF5ACh case    1:*/		return 0x820DF5B0;
		  /* 820DF5B0h */ case    2:  		/* lis R11, -32254 */
		/* 820DF5B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF5B0h case    2:*/		return 0x820DF5B4;
		  /* 820DF5B4h */ case    3:  		/* mr R3, R31 */
		/* 820DF5B4h case    3:*/		regs.R3 = regs.R31;
		/* 820DF5B4h case    3:*/		return 0x820DF5B8;
		  /* 820DF5B8h */ case    4:  		/* addi R4, R11, -27840 */
		/* 820DF5B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9340);
		/* 820DF5B8h case    4:*/		return 0x820DF5BC;
		  /* 820DF5BCh */ case    5:  		/* bl -21732 */
		/* 820DF5BCh case    5:*/		regs.LR = 0x820DF5C0; return 0x820DA0D8;
		/* 820DF5BCh case    5:*/		return 0x820DF5C0;
		  /* 820DF5C0h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DF5C0h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF5C0h case    6:*/		return 0x820DF5C4;
		  /* 820DF5C4h */ case    7:  		/* bc 12, CR0_LT, 356 */
		/* 820DF5C4h case    7:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF5C4h case    7:*/		return 0x820DF5C8;
		  /* 820DF5C8h */ case    8:  		/* mr R3, R31 */
		/* 820DF5C8h case    8:*/		regs.R3 = regs.R31;
		/* 820DF5C8h case    8:*/		return 0x820DF5CC;
		  /* 820DF5CCh */ case    9:  		/* bl -21532 */
		/* 820DF5CCh case    9:*/		regs.LR = 0x820DF5D0; return 0x820DA1B0;
		/* 820DF5CCh case    9:*/		return 0x820DF5D0;
		  /* 820DF5D0h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DF5D0h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF5D0h case   10:*/		return 0x820DF5D4;
		  /* 820DF5D4h */ case   11:  		/* bc 12, CR0_LT, 340 */
		/* 820DF5D4h case   11:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF5D4h case   11:*/		return 0x820DF5D8;
		  /* 820DF5D8h */ case   12:  		/* lis R11, -32254 */
		/* 820DF5D8h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF5D8h case   12:*/		return 0x820DF5DC;
		  /* 820DF5DCh */ case   13:  		/* mr R3, R31 */
		/* 820DF5DCh case   13:*/		regs.R3 = regs.R31;
		/* 820DF5DCh case   13:*/		return 0x820DF5E0;
	}
	return 0x820DF5E0;
} // Block from 820DF5A8h-820DF5E0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF5E0h
// Function '?EmitUnpackHiShortOp@C30SWProgramML@D3DXShader@@MAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF5E0);
		  /* 820DF5E0h */ case    0:  		/* addi R4, R11, -27860 */
		/* 820DF5E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF932C);
		/* 820DF5E0h case    0:*/		return 0x820DF5E4;
		  /* 820DF5E4h */ case    1:  		/* bl -21772 */
		/* 820DF5E4h case    1:*/		regs.LR = 0x820DF5E8; return 0x820DA0D8;
		/* 820DF5E4h case    1:*/		return 0x820DF5E8;
		  /* 820DF5E8h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DF5E8h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF5E8h case    2:*/		return 0x820DF5EC;
		  /* 820DF5ECh */ case    3:  		/* bc 12, CR0_LT, 316 */
		/* 820DF5ECh case    3:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF5ECh case    3:*/		return 0x820DF5F0;
		  /* 820DF5F0h */ case    4:  		/* mr R3, R31 */
		/* 820DF5F0h case    4:*/		regs.R3 = regs.R31;
		/* 820DF5F0h case    4:*/		return 0x820DF5F4;
		  /* 820DF5F4h */ case    5:  		/* bl -21572 */
		/* 820DF5F4h case    5:*/		regs.LR = 0x820DF5F8; return 0x820DA1B0;
		/* 820DF5F4h case    5:*/		return 0x820DF5F8;
		  /* 820DF5F8h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DF5F8h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF5F8h case    6:*/		return 0x820DF5FC;
		  /* 820DF5FCh */ case    7:  		/* bc 12, CR0_LT, 300 */
		/* 820DF5FCh case    7:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF5FCh case    7:*/		return 0x820DF600;
		  /* 820DF600h */ case    8:  		/* lis R11, -32254 */
		/* 820DF600h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF600h case    8:*/		return 0x820DF604;
		  /* 820DF604h */ case    9:  		/* mr R3, R31 */
		/* 820DF604h case    9:*/		regs.R3 = regs.R31;
		/* 820DF604h case    9:*/		return 0x820DF608;
		  /* 820DF608h */ case   10:  		/* addi R4, R11, -27884 */
		/* 820DF608h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9314);
		/* 820DF608h case   10:*/		return 0x820DF60C;
		  /* 820DF60Ch */ case   11:  		/* bl -21812 */
		/* 820DF60Ch case   11:*/		regs.LR = 0x820DF610; return 0x820DA0D8;
		/* 820DF60Ch case   11:*/		return 0x820DF610;
	}
	return 0x820DF610;
} // Block from 820DF5E0h-820DF610h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DF610h
// Function '?EmitUnpackLoShortOp@C30SWProgramML@D3DXShader@@MAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF610);
		  /* 820DF610h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820DF610h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF610h case    0:*/		return 0x820DF614;
		  /* 820DF614h */ case    1:  		/* bc 12, CR0_LT, 276 */
		/* 820DF614h case    1:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF614h case    1:*/		return 0x820DF618;
		  /* 820DF618h */ case    2:  		/* mr R3, R31 */
		/* 820DF618h case    2:*/		regs.R3 = regs.R31;
		/* 820DF618h case    2:*/		return 0x820DF61C;
		  /* 820DF61Ch */ case    3:  		/* bl -21612 */
		/* 820DF61Ch case    3:*/		regs.LR = 0x820DF620; return 0x820DA1B0;
		/* 820DF61Ch case    3:*/		return 0x820DF620;
		  /* 820DF620h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820DF620h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF620h case    4:*/		return 0x820DF624;
		  /* 820DF624h */ case    5:  		/* bc 12, CR0_LT, 260 */
		/* 820DF624h case    5:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF624h case    5:*/		return 0x820DF628;
		  /* 820DF628h */ case    6:  		/* lis R11, -32254 */
		/* 820DF628h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF628h case    6:*/		return 0x820DF62C;
		  /* 820DF62Ch */ case    7:  		/* mr R3, R31 */
		/* 820DF62Ch case    7:*/		regs.R3 = regs.R31;
		/* 820DF62Ch case    7:*/		return 0x820DF630;
		  /* 820DF630h */ case    8:  		/* addi R4, R11, -27904 */
		/* 820DF630h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9300);
		/* 820DF630h case    8:*/		return 0x820DF634;
		  /* 820DF634h */ case    9:  		/* bl -21852 */
		/* 820DF634h case    9:*/		regs.LR = 0x820DF638; return 0x820DA0D8;
		/* 820DF634h case    9:*/		return 0x820DF638;
		  /* 820DF638h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DF638h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF638h case   10:*/		return 0x820DF63C;
		  /* 820DF63Ch */ case   11:  		/* bc 12, CR0_LT, 236 */
		/* 820DF63Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF63Ch case   11:*/		return 0x820DF640;
	}
	return 0x820DF640;
} // Block from 820DF610h-820DF640h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DF640h
// Function '?EmitStoreOp@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF640);
		  /* 820DF640h */ case    0:  		/* mr R3, R31 */
		/* 820DF640h case    0:*/		regs.R3 = regs.R31;
		/* 820DF640h case    0:*/		return 0x820DF644;
		  /* 820DF644h */ case    1:  		/* bl -21652 */
		/* 820DF644h case    1:*/		regs.LR = 0x820DF648; return 0x820DA1B0;
		/* 820DF644h case    1:*/		return 0x820DF648;
		  /* 820DF648h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DF648h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF648h case    2:*/		return 0x820DF64C;
		  /* 820DF64Ch */ case    3:  		/* bc 12, CR0_LT, 220 */
		/* 820DF64Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF64Ch case    3:*/		return 0x820DF650;
		  /* 820DF650h */ case    4:  		/* lis R11, -32254 */
		/* 820DF650h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF650h case    4:*/		return 0x820DF654;
		  /* 820DF654h */ case    5:  		/* mr R3, R31 */
		/* 820DF654h case    5:*/		regs.R3 = regs.R31;
		/* 820DF654h case    5:*/		return 0x820DF658;
		  /* 820DF658h */ case    6:  		/* addi R4, R11, -27932 */
		/* 820DF658h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF92E4);
		/* 820DF658h case    6:*/		return 0x820DF65C;
		  /* 820DF65Ch */ case    7:  		/* bl -21892 */
		/* 820DF65Ch case    7:*/		regs.LR = 0x820DF660; return 0x820DA0D8;
		/* 820DF65Ch case    7:*/		return 0x820DF660;
		  /* 820DF660h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DF660h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF660h case    8:*/		return 0x820DF664;
		  /* 820DF664h */ case    9:  		/* bc 12, CR0_LT, 196 */
		/* 820DF664h case    9:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF664h case    9:*/		return 0x820DF668;
		  /* 820DF668h */ case   10:  		/* addi R4, R1, 112 */
		/* 820DF668h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820DF668h case   10:*/		return 0x820DF66C;
		  /* 820DF66Ch */ case   11:  		/* mr R3, R31 */
		/* 820DF66Ch case   11:*/		regs.R3 = regs.R31;
		/* 820DF66Ch case   11:*/		return 0x820DF670;
		  /* 820DF670h */ case   12:  		/* bl 108056 */
		/* 820DF670h case   12:*/		regs.LR = 0x820DF674; return 0x820F9C88;
		/* 820DF670h case   12:*/		return 0x820DF674;
		  /* 820DF674h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DF674h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF674h case   13:*/		return 0x820DF678;
	}
	return 0x820DF678;
} // Block from 820DF640h-820DF678h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF678h
// Function '?EmitLoadFloat4SW@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF678);
		  /* 820DF678h */ case    0:  		/* bc 12, CR0_LT, 176 */
		/* 820DF678h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF678h case    0:*/		return 0x820DF67C;
		  /* 820DF67Ch */ case    1:  		/* lwz R11, <#[R31]> */
		/* 820DF67Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DF67Ch case    1:*/		return 0x820DF680;
		  /* 820DF680h */ case    2:  		/* mr R3, R31 */
		/* 820DF680h case    2:*/		regs.R3 = regs.R31;
		/* 820DF680h case    2:*/		return 0x820DF684;
		  /* 820DF684h */ case    3:  		/* lwz R11, <#[R11 + 384]> */
		/* 820DF684h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000180) );
		/* 820DF684h case    3:*/		return 0x820DF688;
		  /* 820DF688h */ case    4:  		/* mtspr CTR, R11 */
		/* 820DF688h case    4:*/		regs.CTR = regs.R11;
		/* 820DF688h case    4:*/		return 0x820DF68C;
		  /* 820DF68Ch */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 820DF68Ch case    5:*/		if ( 1 ) { regs.LR = 0x820DF690; return (uint32)regs.CTR; }
		/* 820DF68Ch case    5:*/		return 0x820DF690;
		  /* 820DF690h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DF690h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF690h case    6:*/		return 0x820DF694;
		  /* 820DF694h */ case    7:  		/* bc 12, CR0_LT, 148 */
		/* 820DF694h case    7:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF694h case    7:*/		return 0x820DF698;
		  /* 820DF698h */ case    8:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DF698h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DF698h case    8:*/		return 0x820DF69C;
		  /* 820DF69Ch */ case    9:  		/* lis R10, -32254 */
		/* 820DF69Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DF69Ch case    9:*/		return 0x820DF6A0;
		  /* 820DF6A0h */ case   10:  		/* mr R3, R31 */
		/* 820DF6A0h case   10:*/		regs.R3 = regs.R31;
		/* 820DF6A0h case   10:*/		return 0x820DF6A4;
		  /* 820DF6A4h */ case   11:  		/* addi R11, R11, -1 */
		/* 820DF6A4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DF6A4h case   11:*/		return 0x820DF6A8;
		  /* 820DF6A8h */ case   12:  		/* addi R4, R10, -30528 */
		/* 820DF6A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF88C0);
		/* 820DF6A8h case   12:*/		return 0x820DF6AC;
		  /* 820DF6ACh */ case   13:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DF6ACh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DF6ACh case   13:*/		return 0x820DF6B0;
		  /* 820DF6B0h */ case   14:  		/* bl -21976 */
		/* 820DF6B0h case   14:*/		regs.LR = 0x820DF6B4; return 0x820DA0D8;
		/* 820DF6B0h case   14:*/		return 0x820DF6B4;
		  /* 820DF6B4h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820DF6B4h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF6B4h case   15:*/		return 0x820DF6B8;
		  /* 820DF6B8h */ case   16:  		/* bc 12, CR0_LT, 112 */
		/* 820DF6B8h case   16:*/		if ( regs.CR[0].lt ) { return 0x820DF728;  }
		/* 820DF6B8h case   16:*/		return 0x820DF6BC;
		  /* 820DF6BCh */ case   17:  		/* lwz R3, <#[R1 + 112]> */
		/* 820DF6BCh case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 820DF6BCh case   17:*/		return 0x820DF6C0;
	}
	return 0x820DF6C0;
} // Block from 820DF678h-820DF6C0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820DF6C0h
// Function '?EmitStoreFloat4SW@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF6C0);
		  /* 820DF6C0h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 820DF6C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820DF6C0h case    0:*/		return 0x820DF6C4;
		  /* 820DF6C4h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820DF6C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820DF6E0;  }
		/* 820DF6C4h case    1:*/		return 0x820DF6C8;
		  /* 820DF6C8h */ case    2:  		/* lwz R11, <#[R3]> */
		/* 820DF6C8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820DF6C8h case    2:*/		return 0x820DF6CC;
		  /* 820DF6CCh */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 820DF6CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820DF6CCh case    3:*/		return 0x820DF6D0;
		  /* 820DF6D0h */ case    4:  		/* mtspr CTR, R11 */
		/* 820DF6D0h case    4:*/		regs.CTR = regs.R11;
		/* 820DF6D0h case    4:*/		return 0x820DF6D4;
		  /* 820DF6D4h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 820DF6D4h case    5:*/		if ( 1 ) { regs.LR = 0x820DF6D8; return (uint32)regs.CTR; }
		/* 820DF6D4h case    5:*/		return 0x820DF6D8;
		  /* 820DF6D8h */ case    6:  		/* li R11, 0 */
		/* 820DF6D8h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820DF6D8h case    6:*/		return 0x820DF6DC;
		  /* 820DF6DCh */ case    7:  		/* stw R11, <#[R1 + 112]> */
		/* 820DF6DCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820DF6DCh case    7:*/		return 0x820DF6E0;
	}
	return 0x820DF6E0;
} // Block from 820DF6C0h-820DF6E0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820DF6E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF6E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF6E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF6E0);
		  /* 820DF6E0h */ case    0:  		/* addi R4, R1, 116 */
		/* 820DF6E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x74);
		/* 820DF6E0h case    0:*/		return 0x820DF6E4;
		  /* 820DF6E4h */ case    1:  		/* lwz R3, <#[R31 + 1536]> */
		/* 820DF6E4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000600) );
		/* 820DF6E4h case    1:*/		return 0x820DF6E8;
		  /* 820DF6E8h */ case    2:  		/* bl -236760 */
		/* 820DF6E8h case    2:*/		regs.LR = 0x820DF6EC; return 0x820A5A10;
		/* 820DF6E8h case    2:*/		return 0x820DF6EC;
		  /* 820DF6ECh */ case    3:  		/* or. R30, R3, R3 */
		/* 820DF6ECh case    3:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820DF6ECh case    3:*/		return 0x820DF6F0;
		  /* 820DF6F0h */ case    4:  		/* bc 12, CR0_LT, 52 */
		/* 820DF6F0h case    4:*/		if ( regs.CR[0].lt ) { return 0x820DF724;  }
		/* 820DF6F0h case    4:*/		return 0x820DF6F4;
		  /* 820DF6F4h */ case    5:  		/* lwz R3, <#[R1 + 116]> */
		/* 820DF6F4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000074) );
		/* 820DF6F4h case    5:*/		return 0x820DF6F8;
		  /* 820DF6F8h */ case    6:  		/* lwz R28, <#[R31 + 1536]> */
		/* 820DF6F8h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000600) );
		/* 820DF6F8h case    6:*/		return 0x820DF6FC;
		  /* 820DF6FCh */ case    7:  		/* lwz R31, <#[R31 + 1532]> */
		/* 820DF6FCh case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x000005FC) );
		/* 820DF6FCh case    7:*/		return 0x820DF700;
		  /* 820DF700h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 820DF700h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820DF700h case    8:*/		return 0x820DF704;
		  /* 820DF704h */ case    9:  		/* lwz R11, <#[R11 + 12]> */
		/* 820DF704h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820DF704h case    9:*/		return 0x820DF708;
	}
	return 0x820DF708;
} // Block from 820DF6E0h-820DF708h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DF708h
// Function '?EmitRotateRightOp@C30SWProgramML@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF708);
		  /* 820DF708h */ case    0:  		/* mtspr CTR, R11 */
		/* 820DF708h case    0:*/		regs.CTR = regs.R11;
		/* 820DF708h case    0:*/		return 0x820DF70C;
		  /* 820DF70Ch */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 820DF70Ch case    1:*/		if ( 1 ) { regs.LR = 0x820DF710; return (uint32)regs.CTR; }
		/* 820DF70Ch case    1:*/		return 0x820DF710;
		  /* 820DF710h */ case    2:  		/* mr R4, R31 */
		/* 820DF710h case    2:*/		regs.R4 = regs.R31;
		/* 820DF710h case    2:*/		return 0x820DF714;
		  /* 820DF714h */ case    3:  		/* mr R5, R28 */
		/* 820DF714h case    3:*/		regs.R5 = regs.R28;
		/* 820DF714h case    3:*/		return 0x820DF718;
		  /* 820DF718h */ case    4:  		/* bl -318824 */
		/* 820DF718h case    4:*/		regs.LR = 0x820DF71C; return 0x820919B0;
		/* 820DF718h case    4:*/		return 0x820DF71C;
		  /* 820DF71Ch */ case    5:  		/* lwz R11, <#[R1 + 116]> */
		/* 820DF71Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820DF71Ch case    5:*/		return 0x820DF720;
		  /* 820DF720h */ case    6:  		/* stw R11, <#[R29]> */
		/* 820DF720h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820DF720h case    6:*/		return 0x820DF724;
	}
	return 0x820DF724;
} // Block from 820DF708h-820DF724h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820DF724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF724);
		  /* 820DF724h */ case    0:  		/* mr R3, R30 */
		/* 820DF724h case    0:*/		regs.R3 = regs.R30;
		/* 820DF724h case    0:*/		return 0x820DF728;
	}
	return 0x820DF728;
} // Block from 820DF724h-820DF728h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DF728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF728);
		  /* 820DF728h */ case    0:  		/* addi R1, R1, 160 */
		/* 820DF728h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820DF728h case    0:*/		return 0x820DF72C;
		  /* 820DF72Ch */ case    1:  		/* b -320644 */
		/* 820DF72Ch case    1:*/		return 0x820912A8;
		/* 820DF72Ch case    1:*/		return 0x820DF730;
	}
	return 0x820DF730;
} // Block from 820DF728h-820DF730h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DF730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF730);
		  /* 820DF730h */ case    0:  		/* mfspr R12, LR */
		/* 820DF730h case    0:*/		regs.R12 = regs.LR;
		/* 820DF730h case    0:*/		return 0x820DF734;
		  /* 820DF734h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DF734h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF734h case    1:*/		return 0x820DF738;
		  /* 820DF738h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820DF738h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DF738h case    2:*/		return 0x820DF73C;
		  /* 820DF73Ch */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 820DF73Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820DF73Ch case    3:*/		return 0x820DF740;
	}
	return 0x820DF740;
} // Block from 820DF730h-820DF740h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DF740h
// Function '?EmitRotateRightOctetOp@C30SWProgramML@D3DXShader@@MAAJPBDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF740);
		  /* 820DF740h */ case    0:  		/* lwz R11, <#[R3 + 1544]> */
		/* 820DF740h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000608) );
		/* 820DF740h case    0:*/		return 0x820DF744;
		  /* 820DF744h */ case    1:  		/* mr R31, R3 */
		/* 820DF744h case    1:*/		regs.R31 = regs.R3;
		/* 820DF744h case    1:*/		return 0x820DF748;
		  /* 820DF748h */ case    2:  		/* addi R11, R11, -1 */
		/* 820DF748h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DF748h case    2:*/		return 0x820DF74C;
		  /* 820DF74Ch */ case    3:  		/* stw R11, <#[R3 + 1544]> */
		/* 820DF74Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000608) );
		/* 820DF74Ch case    3:*/		return 0x820DF750;
		  /* 820DF750h */ case    4:  		/* bl -21920 */
		/* 820DF750h case    4:*/		regs.LR = 0x820DF754; return 0x820DA1B0;
		/* 820DF750h case    4:*/		return 0x820DF754;
		  /* 820DF754h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DF754h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF754h case    5:*/		return 0x820DF758;
		  /* 820DF758h */ case    6:  		/* bc 12, CR0_LT, 28 */
		/* 820DF758h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DF774;  }
		/* 820DF758h case    6:*/		return 0x820DF75C;
		  /* 820DF75Ch */ case    7:  		/* lis R11, -32254 */
		/* 820DF75Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF75Ch case    7:*/		return 0x820DF760;
		  /* 820DF760h */ case    8:  		/* mr R3, R31 */
		/* 820DF760h case    8:*/		regs.R3 = regs.R31;
		/* 820DF760h case    8:*/		return 0x820DF764;
		  /* 820DF764h */ case    9:  		/* addi R4, R11, -30524 */
		/* 820DF764h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88C4);
		/* 820DF764h case    9:*/		return 0x820DF768;
		  /* 820DF768h */ case   10:  		/* bl -22160 */
		/* 820DF768h case   10:*/		regs.LR = 0x820DF76C; return 0x820DA0D8;
		/* 820DF768h case   10:*/		return 0x820DF76C;
		  /* 820DF76Ch */ case   11:  		/* srawi R11, R3, 31 */
		/* 820DF76Ch case   11:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820DF76Ch case   11:*/		return 0x820DF770;
		  /* 820DF770h */ case   12:  		/* and R3, R11, R3 */
		/* 820DF770h case   12:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820DF770h case   12:*/		return 0x820DF774;
	}
	return 0x820DF774;
} // Block from 820DF740h-820DF774h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DF774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF774);
		  /* 820DF774h */ case    0:  		/* addi R1, R1, 112 */
		/* 820DF774h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820DF774h case    0:*/		return 0x820DF778;
		  /* 820DF778h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DF778h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF778h case    1:*/		return 0x820DF77C;
		  /* 820DF77Ch */ case    2:  		/* mtspr LR, R12 */
		/* 820DF77Ch case    2:*/		regs.LR = regs.R12;
		/* 820DF77Ch case    2:*/		return 0x820DF780;
	}
	return 0x820DF780;
} // Block from 820DF774h-820DF780h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DF780h
// Function '?EmitMinimizeOp@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF780);
		  /* 820DF780h */ case    0:  		/* ld R31, <#[R1 - 16]> */
		/* 820DF780h case    0:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DF780h case    0:*/		return 0x820DF784;
		  /* 820DF784h */ case    1:  		/* bclr 20, CR0_LT */
		/* 820DF784h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DF784h case    1:*/		return 0x820DF788;
	}
	return 0x820DF788;
} // Block from 820DF780h-820DF788h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DF788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF788);
		  /* 820DF788h */ case    0:  		/* mfspr R12, LR */
		/* 820DF788h case    0:*/		regs.R12 = regs.LR;
		/* 820DF788h case    0:*/		return 0x820DF78C;
		  /* 820DF78Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DF78Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF78Ch case    1:*/		return 0x820DF790;
		  /* 820DF790h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820DF790h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DF790h case    2:*/		return 0x820DF794;
		  /* 820DF794h */ case    3:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DF794h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DF794h case    3:*/		return 0x820DF798;
		  /* 820DF798h */ case    4:  		/* lis R11, -32254 */
		/* 820DF798h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF798h case    4:*/		return 0x820DF79C;
		  /* 820DF79Ch */ case    5:  		/* mr R31, R3 */
		/* 820DF79Ch case    5:*/		regs.R31 = regs.R3;
		/* 820DF79Ch case    5:*/		return 0x820DF7A0;
		  /* 820DF7A0h */ case    6:  		/* addi R4, R11, -30604 */
		/* 820DF7A0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 820DF7A0h case    6:*/		return 0x820DF7A4;
		  /* 820DF7A4h */ case    7:  		/* bl -22220 */
		/* 820DF7A4h case    7:*/		regs.LR = 0x820DF7A8; return 0x820DA0D8;
		/* 820DF7A4h case    7:*/		return 0x820DF7A8;
		  /* 820DF7A8h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DF7A8h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF7A8h case    8:*/		return 0x820DF7AC;
		  /* 820DF7ACh */ case    9:  		/* bc 12, CR0_LT, 104 */
		/* 820DF7ACh case    9:*/		if ( regs.CR[0].lt ) { return 0x820DF814;  }
		/* 820DF7ACh case    9:*/		return 0x820DF7B0;
		  /* 820DF7B0h */ case   10:  		/* mr R3, R31 */
		/* 820DF7B0h case   10:*/		regs.R3 = regs.R31;
		/* 820DF7B0h case   10:*/		return 0x820DF7B4;
		  /* 820DF7B4h */ case   11:  		/* bl -22020 */
		/* 820DF7B4h case   11:*/		regs.LR = 0x820DF7B8; return 0x820DA1B0;
		/* 820DF7B4h case   11:*/		return 0x820DF7B8;
	}
	return 0x820DF7B8;
} // Block from 820DF788h-820DF7B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820DF7B8h
// Function '?EmitMaximizeOp@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF7B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF7B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF7B8);
		  /* 820DF7B8h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820DF7B8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF7B8h case    0:*/		return 0x820DF7BC;
		  /* 820DF7BCh */ case    1:  		/* bc 12, CR0_LT, 88 */
		/* 820DF7BCh case    1:*/		if ( regs.CR[0].lt ) { return 0x820DF814;  }
		/* 820DF7BCh case    1:*/		return 0x820DF7C0;
		  /* 820DF7C0h */ case    2:  		/* lis R11, -32254 */
		/* 820DF7C0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF7C0h case    2:*/		return 0x820DF7C4;
		  /* 820DF7C4h */ case    3:  		/* lwz R5, <#[R31 + 1816]> */
		/* 820DF7C4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000718) );
		/* 820DF7C4h case    3:*/		return 0x820DF7C8;
		  /* 820DF7C8h */ case    4:  		/* mr R3, R31 */
		/* 820DF7C8h case    4:*/		regs.R3 = regs.R31;
		/* 820DF7C8h case    4:*/		return 0x820DF7CC;
		  /* 820DF7CCh */ case    5:  		/* addi R4, R11, -27720 */
		/* 820DF7CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF93B8);
		/* 820DF7CCh case    5:*/		return 0x820DF7D0;
		  /* 820DF7D0h */ case    6:  		/* bl -22264 */
		/* 820DF7D0h case    6:*/		regs.LR = 0x820DF7D4; return 0x820DA0D8;
		/* 820DF7D0h case    6:*/		return 0x820DF7D4;
		  /* 820DF7D4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DF7D4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF7D4h case    7:*/		return 0x820DF7D8;
		  /* 820DF7D8h */ case    8:  		/* bc 12, CR0_LT, 60 */
		/* 820DF7D8h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DF814;  }
		/* 820DF7D8h case    8:*/		return 0x820DF7DC;
		  /* 820DF7DCh */ case    9:  		/* mr R3, R31 */
		/* 820DF7DCh case    9:*/		regs.R3 = regs.R31;
		/* 820DF7DCh case    9:*/		return 0x820DF7E0;
		  /* 820DF7E0h */ case   10:  		/* bl -22064 */
		/* 820DF7E0h case   10:*/		regs.LR = 0x820DF7E4; return 0x820DA1B0;
		/* 820DF7E0h case   10:*/		return 0x820DF7E4;
		  /* 820DF7E4h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820DF7E4h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF7E4h case   11:*/		return 0x820DF7E8;
		  /* 820DF7E8h */ case   12:  		/* bc 12, CR0_LT, 44 */
		/* 820DF7E8h case   12:*/		if ( regs.CR[0].lt ) { return 0x820DF814;  }
		/* 820DF7E8h case   12:*/		return 0x820DF7EC;
		  /* 820DF7ECh */ case   13:  		/* lis R11, -32254 */
		/* 820DF7ECh case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF7ECh case   13:*/		return 0x820DF7F0;
	}
	return 0x820DF7F0;
} // Block from 820DF7B8h-820DF7F0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF7F0h
// Function '?EmitLogEstOp@C30SWProgramML@D3DXShader@@MAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF7F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF7F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF7F0);
		  /* 820DF7F0h */ case    0:  		/* mr R3, R31 */
		/* 820DF7F0h case    0:*/		regs.R3 = regs.R31;
		/* 820DF7F0h case    0:*/		return 0x820DF7F4;
		  /* 820DF7F4h */ case    1:  		/* addi R4, R11, -30564 */
		/* 820DF7F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF889C);
		/* 820DF7F4h case    1:*/		return 0x820DF7F8;
		  /* 820DF7F8h */ case    2:  		/* bl -22304 */
		/* 820DF7F8h case    2:*/		regs.LR = 0x820DF7FC; return 0x820DA0D8;
		/* 820DF7F8h case    2:*/		return 0x820DF7FC;
		  /* 820DF7FCh */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820DF7FCh case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF7FCh case    3:*/		return 0x820DF800;
		  /* 820DF800h */ case    4:  		/* bc 12, CR0_LT, 20 */
		/* 820DF800h case    4:*/		if ( regs.CR[0].lt ) { return 0x820DF814;  }
		/* 820DF800h case    4:*/		return 0x820DF804;
		  /* 820DF804h */ case    5:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DF804h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DF804h case    5:*/		return 0x820DF808;
		  /* 820DF808h */ case    6:  		/* li R3, 0 */
		/* 820DF808h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DF808h case    6:*/		return 0x820DF80C;
		  /* 820DF80Ch */ case    7:  		/* addi R11, R11, 1 */
		/* 820DF80Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820DF80Ch case    7:*/		return 0x820DF810;
		  /* 820DF810h */ case    8:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DF810h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DF810h case    8:*/		return 0x820DF814;
	}
	return 0x820DF814;
} // Block from 820DF7F0h-820DF814h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820DF814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF814);
		  /* 820DF814h */ case    0:  		/* addi R1, R1, 128 */
		/* 820DF814h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DF814h case    0:*/		return 0x820DF818;
		  /* 820DF818h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DF818h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF818h case    1:*/		return 0x820DF81C;
		  /* 820DF81Ch */ case    2:  		/* mtspr LR, R12 */
		/* 820DF81Ch case    2:*/		regs.LR = regs.R12;
		/* 820DF81Ch case    2:*/		return 0x820DF820;
	}
	return 0x820DF820;
} // Block from 820DF814h-820DF820h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DF820h
// Function '?EmitExpEstOp@C30SWProgramML@D3DXShader@@MAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF820);
		  /* 820DF820h */ case    0:  		/* ld R31, <#[R1 - 16]> */
		/* 820DF820h case    0:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DF820h case    0:*/		return 0x820DF824;
		  /* 820DF824h */ case    1:  		/* bclr 20, CR0_LT */
		/* 820DF824h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DF824h case    1:*/		return 0x820DF828;
	}
	return 0x820DF828;
} // Block from 820DF820h-820DF828h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DF828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF828);
		  /* 820DF828h */ case    0:  		/* mfspr R12, LR */
		/* 820DF828h case    0:*/		regs.R12 = regs.LR;
		/* 820DF828h case    0:*/		return 0x820DF82C;
		  /* 820DF82Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820DF82Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF82Ch case    1:*/		return 0x820DF830;
		  /* 820DF830h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820DF830h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DF830h case    2:*/		return 0x820DF834;
		  /* 820DF834h */ case    3:  		/* stwu R1, <#[R1 - 128]> */
		/* 820DF834h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820DF834h case    3:*/		return 0x820DF838;
		  /* 820DF838h */ case    4:  		/* mr R31, R3 */
		/* 820DF838h case    4:*/		regs.R31 = regs.R3;
		/* 820DF838h case    4:*/		return 0x820DF83C;
		  /* 820DF83Ch */ case    5:  		/* bl -22156 */
		/* 820DF83Ch case    5:*/		regs.LR = 0x820DF840; return 0x820DA1B0;
		/* 820DF83Ch case    5:*/		return 0x820DF840;
		  /* 820DF840h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DF840h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF840h case    6:*/		return 0x820DF844;
		  /* 820DF844h */ case    7:  		/* bc 12, CR0_LT, 88 */
		/* 820DF844h case    7:*/		if ( regs.CR[0].lt ) { return 0x820DF89C;  }
		/* 820DF844h case    7:*/		return 0x820DF848;
		  /* 820DF848h */ case    8:  		/* lis R11, -32254 */
		/* 820DF848h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF848h case    8:*/		return 0x820DF84C;
		  /* 820DF84Ch */ case    9:  		/* lwz R5, <#[R31 + 1816]> */
		/* 820DF84Ch case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000718) );
		/* 820DF84Ch case    9:*/		return 0x820DF850;
	}
	return 0x820DF850;
} // Block from 820DF828h-820DF850h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DF850h
// Function '?EmitSubtractOp@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF850);
		  /* 820DF850h */ case    0:  		/* mr R3, R31 */
		/* 820DF850h case    0:*/		regs.R3 = regs.R31;
		/* 820DF850h case    0:*/		return 0x820DF854;
		  /* 820DF854h */ case    1:  		/* addi R4, R11, -27648 */
		/* 820DF854h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9400);
		/* 820DF854h case    1:*/		return 0x820DF858;
		  /* 820DF858h */ case    2:  		/* bl -22400 */
		/* 820DF858h case    2:*/		regs.LR = 0x820DF85C; return 0x820DA0D8;
		/* 820DF858h case    2:*/		return 0x820DF85C;
		  /* 820DF85Ch */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820DF85Ch case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF85Ch case    3:*/		return 0x820DF860;
		  /* 820DF860h */ case    4:  		/* bc 12, CR0_LT, 60 */
		/* 820DF860h case    4:*/		if ( regs.CR[0].lt ) { return 0x820DF89C;  }
		/* 820DF860h case    4:*/		return 0x820DF864;
		  /* 820DF864h */ case    5:  		/* mr R3, R31 */
		/* 820DF864h case    5:*/		regs.R3 = regs.R31;
		/* 820DF864h case    5:*/		return 0x820DF868;
		  /* 820DF868h */ case    6:  		/* bl -22200 */
		/* 820DF868h case    6:*/		regs.LR = 0x820DF86C; return 0x820DA1B0;
		/* 820DF868h case    6:*/		return 0x820DF86C;
		  /* 820DF86Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820DF86Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF86Ch case    7:*/		return 0x820DF870;
		  /* 820DF870h */ case    8:  		/* bc 12, CR0_LT, 44 */
		/* 820DF870h case    8:*/		if ( regs.CR[0].lt ) { return 0x820DF89C;  }
		/* 820DF870h case    8:*/		return 0x820DF874;
		  /* 820DF874h */ case    9:  		/* lis R11, -32254 */
		/* 820DF874h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DF874h case    9:*/		return 0x820DF878;
		  /* 820DF878h */ case   10:  		/* mr R3, R31 */
		/* 820DF878h case   10:*/		regs.R3 = regs.R31;
		/* 820DF878h case   10:*/		return 0x820DF87C;
		  /* 820DF87Ch */ case   11:  		/* addi R4, R11, -30564 */
		/* 820DF87Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF889C);
		/* 820DF87Ch case   11:*/		return 0x820DF880;
		  /* 820DF880h */ case   12:  		/* bl -22440 */
		/* 820DF880h case   12:*/		regs.LR = 0x820DF884; return 0x820DA0D8;
		/* 820DF880h case   12:*/		return 0x820DF884;
		  /* 820DF884h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820DF884h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF884h case   13:*/		return 0x820DF888;
	}
	return 0x820DF888;
} // Block from 820DF850h-820DF888h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF888h
// Function '?EmitMultiplyOp@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF888);
		  /* 820DF888h */ case    0:  		/* bc 12, CR0_LT, 20 */
		/* 820DF888h case    0:*/		if ( regs.CR[0].lt ) { return 0x820DF89C;  }
		/* 820DF888h case    0:*/		return 0x820DF88C;
		  /* 820DF88Ch */ case    1:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DF88Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DF88Ch case    1:*/		return 0x820DF890;
		  /* 820DF890h */ case    2:  		/* li R3, 0 */
		/* 820DF890h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DF890h case    2:*/		return 0x820DF894;
		  /* 820DF894h */ case    3:  		/* addi R11, R11, 1 */
		/* 820DF894h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820DF894h case    3:*/		return 0x820DF898;
		  /* 820DF898h */ case    4:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DF898h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DF898h case    4:*/		return 0x820DF89C;
	}
	return 0x820DF89C;
} // Block from 820DF888h-820DF89Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DF89Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF89C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF89C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF89C);
		  /* 820DF89Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 820DF89Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820DF89Ch case    0:*/		return 0x820DF8A0;
		  /* 820DF8A0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820DF8A0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820DF8A0h case    1:*/		return 0x820DF8A4;
		  /* 820DF8A4h */ case    2:  		/* mtspr LR, R12 */
		/* 820DF8A4h case    2:*/		regs.LR = regs.R12;
		/* 820DF8A4h case    2:*/		return 0x820DF8A8;
		  /* 820DF8A8h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 820DF8A8h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820DF8A8h case    3:*/		return 0x820DF8AC;
		  /* 820DF8ACh */ case    4:  		/* bclr 20, CR0_LT */
		/* 820DF8ACh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820DF8ACh case    4:*/		return 0x820DF8B0;
	}
	return 0x820DF8B0;
} // Block from 820DF89Ch-820DF8B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DF8B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF8B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF8B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF8B0);
		  /* 820DF8B0h */ case    0:  		/* mfspr R12, LR */
		/* 820DF8B0h case    0:*/		regs.R12 = regs.LR;
		/* 820DF8B0h case    0:*/		return 0x820DF8B4;
		  /* 820DF8B4h */ case    1:  		/* bl -321128 */
		/* 820DF8B4h case    1:*/		regs.LR = 0x820DF8B8; return 0x8209124C;
		/* 820DF8B4h case    1:*/		return 0x820DF8B8;
		  /* 820DF8B8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820DF8B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820DF8B8h case    2:*/		return 0x820DF8BC;
		  /* 820DF8BCh */ case    3:  		/* li R11, -1 */
		/* 820DF8BCh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820DF8BCh case    3:*/		return 0x820DF8C0;
	}
	return 0x820DF8C0;
} // Block from 820DF8B0h-820DF8C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DF8C0h
// Function '?EmitMultiplyAddOp@C30SWProgramML@D3DXShader@@MAAJPBD00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF8C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF8C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF8C0);
		  /* 820DF8C0h */ case    0:  		/* mr R31, R3 */
		/* 820DF8C0h case    0:*/		regs.R31 = regs.R3;
		/* 820DF8C0h case    0:*/		return 0x820DF8C4;
		  /* 820DF8C4h */ case    1:  		/* mr R27, R4 */
		/* 820DF8C4h case    1:*/		regs.R27 = regs.R4;
		/* 820DF8C4h case    1:*/		return 0x820DF8C8;
		  /* 820DF8C8h */ case    2:  		/* li R26, 0 */
		/* 820DF8C8h case    2:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 820DF8C8h case    2:*/		return 0x820DF8CC;
		  /* 820DF8CCh */ case    3:  		/* mr R28, R11 */
		/* 820DF8CCh case    3:*/		regs.R28 = regs.R11;
		/* 820DF8CCh case    3:*/		return 0x820DF8D0;
		  /* 820DF8D0h */ case    4:  		/* mr R25, R11 */
		/* 820DF8D0h case    4:*/		regs.R25 = regs.R11;
		/* 820DF8D0h case    4:*/		return 0x820DF8D4;
		  /* 820DF8D4h */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 820DF8D4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 820DF8D4h case    5:*/		return 0x820DF8D8;
		  /* 820DF8D8h */ case    6:  		/* bc 12, CR6_EQ, 284 */
		/* 820DF8D8h case    6:*/		if ( regs.CR[6].eq ) { return 0x820DF9F4;  }
		/* 820DF8D8h case    6:*/		return 0x820DF8DC;
		  /* 820DF8DCh */ case    7:  		/* mr R29, R5 */
		/* 820DF8DCh case    7:*/		regs.R29 = regs.R5;
		/* 820DF8DCh case    7:*/		return 0x820DF8E0;
		  /* 820DF8E0h */ case    8:  		/* lwz R11, <#[R29]> */
		/* 820DF8E0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820DF8E0h case    8:*/		return 0x820DF8E4;
		  /* 820DF8E4h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820DF8E4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DF8E4h case    9:*/		return 0x820DF8E8;
		  /* 820DF8E8h */ case   10:  		/* bc 12, CR6_EQ, 252 */
		/* 820DF8E8h case   10:*/		if ( regs.CR[6].eq ) { return 0x820DF9E4;  }
		/* 820DF8E8h case   10:*/		return 0x820DF8EC;
		  /* 820DF8ECh */ case   11:  		/* lwz R10, <#[R31]> */
		/* 820DF8ECh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820DF8ECh case   11:*/		return 0x820DF8F0;
		  /* 820DF8F0h */ case   12:  		/* mr R3, R31 */
		/* 820DF8F0h case   12:*/		regs.R3 = regs.R31;
		/* 820DF8F0h case   12:*/		return 0x820DF8F4;
		  /* 820DF8F4h */ case   13:  		/* lwz R4, <#[R11 + 108]> */
		/* 820DF8F4h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000006C) );
		/* 820DF8F4h case   13:*/		return 0x820DF8F8;
	}
	return 0x820DF8F8;
} // Block from 820DF8C0h-820DF8F8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820DF8F8h
// Function '?EmitComparisonSW@C30SWProgramML@D3DXShader@@MAAJKPBD00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF8F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF8F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF8F8);
		  /* 820DF8F8h */ case    0:  		/* lwz R11, <#[R10 + 112]> */
		/* 820DF8F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000070) );
		/* 820DF8F8h case    0:*/		return 0x820DF8FC;
		  /* 820DF8FCh */ case    1:  		/* mtspr CTR, R11 */
		/* 820DF8FCh case    1:*/		regs.CTR = regs.R11;
		/* 820DF8FCh case    1:*/		return 0x820DF900;
		  /* 820DF900h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 820DF900h case    2:*/		if ( 1 ) { regs.LR = 0x820DF904; return (uint32)regs.CTR; }
		/* 820DF900h case    2:*/		return 0x820DF904;
		  /* 820DF904h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 820DF904h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DF904h case    3:*/		return 0x820DF908;
		  /* 820DF908h */ case    4:  		/* mr R30, R3 */
		/* 820DF908h case    4:*/		regs.R30 = regs.R3;
		/* 820DF908h case    4:*/		return 0x820DF90C;
		  /* 820DF90Ch */ case    5:  		/* lwz R10, <#[R29]> */
		/* 820DF90Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 820DF90Ch case    5:*/		return 0x820DF910;
		  /* 820DF910h */ case    6:  		/* mr R3, R31 */
		/* 820DF910h case    6:*/		regs.R3 = regs.R31;
		/* 820DF910h case    6:*/		return 0x820DF914;
		  /* 820DF914h */ case    7:  		/* lwz R11, <#[R11 + 116]> */
		/* 820DF914h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 820DF914h case    7:*/		return 0x820DF918;
		  /* 820DF918h */ case    8:  		/* lwz R4, <#[R10 + 108]> */
		/* 820DF918h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x0000006C) );
		/* 820DF918h case    8:*/		return 0x820DF91C;
		  /* 820DF91Ch */ case    9:  		/* mtspr CTR, R11 */
		/* 820DF91Ch case    9:*/		regs.CTR = regs.R11;
		/* 820DF91Ch case    9:*/		return 0x820DF920;
		  /* 820DF920h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 820DF920h case   10:*/		if ( 1 ) { regs.LR = 0x820DF924; return (uint32)regs.CTR; }
		/* 820DF920h case   10:*/		return 0x820DF924;
		  /* 820DF924h */ case   11:  		/* cmplwi CR6, R30, 18 */
		/* 820DF924h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000012);
		/* 820DF924h case   11:*/		return 0x820DF928;
		  /* 820DF928h */ case   12:  		/* bc 12, CR6_GT, 476 */
		/* 820DF928h case   12:*/		if ( regs.CR[6].gt ) { return 0x820DFB04;  }
		/* 820DF928h case   12:*/		return 0x820DF92C;
		  /* 820DF92Ch */ case   13:  		/* lis R12, -32254 */
		/* 820DF92Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8202);
		/* 820DF92Ch case   13:*/		return 0x820DF930;
		  /* 820DF930h */ case   14:  		/* addi R12, R12, -31992 */
		/* 820DF930h case   14:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF8308);
		/* 820DF930h case   14:*/		return 0x820DF934;
		  /* 820DF934h */ case   15:  		/* lbzx R0, <#[R12 + R30]> */
		/* 820DF934h case   15:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R30 + 0x00000000) );
		/* 820DF934h case   15:*/		return 0x820DF938;
		  /* 820DF938h */ case   16:  		/* rlwinm R0, R0, 2, 0, 29 */
		/* 820DF938h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R0,regs.R0);
		/* 820DF938h case   16:*/		return 0x820DF93C;
		  /* 820DF93Ch */ case   17:  		/* lis R12, -32242 */
		/* 820DF93Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF820E);
		/* 820DF93Ch case   17:*/		return 0x820DF940;
		  /* 820DF940h */ case   18:  		/* ori R0, R0, 0 */
		/* 820DF940h case   18:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 820DF940h case   18:*/		return 0x820DF944;
		  /* 820DF944h */ case   19:  		/* addi R12, R12, -1708 */
		/* 820DF944h case   19:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFF954);
		/* 820DF944h case   19:*/		return 0x820DF948;
		  /* 820DF948h */ case   20:  		/* add R12, R12, R0 */
		/* 820DF948h case   20:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 820DF948h case   20:*/		return 0x820DF94C;
		  /* 820DF94Ch */ case   21:  		/* mtspr CTR, R12 */
		/* 820DF94Ch case   21:*/		regs.CTR = regs.R12;
		/* 820DF94Ch case   21:*/		return 0x820DF950;
		  /* 820DF950h */ case   22:  		/* bcctr 20, CR0_LT */
		/* 820DF950h case   22:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820DF950h case   22:*/		return 0x820DF954;
		  /* 820DF954h */ case   23:  		/* li R11, 0 */
		/* 820DF954h case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820DF954h case   23:*/		return 0x820DF958;
		  /* 820DF958h */ case   24:  		/* b 112 */
		/* 820DF958h case   24:*/		return 0x820DF9C8;
		/* 820DF958h case   24:*/		return 0x820DF95C;
		  /* 820DF95Ch */ case   25:  		/* li R11, 1 */
		/* 820DF95Ch case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820DF95Ch case   25:*/		return 0x820DF960;
		  /* 820DF960h */ case   26:  		/* b 104 */
		/* 820DF960h case   26:*/		return 0x820DF9C8;
		/* 820DF960h case   26:*/		return 0x820DF964;
		  /* 820DF964h */ case   27:  		/* li R11, 2 */
		/* 820DF964h case   27:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820DF964h case   27:*/		return 0x820DF968;
		  /* 820DF968h */ case   28:  		/* b 96 */
		/* 820DF968h case   28:*/		return 0x820DF9C8;
		/* 820DF968h case   28:*/		return 0x820DF96C;
		  /* 820DF96Ch */ case   29:  		/* li R11, 3 */
		/* 820DF96Ch case   29:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 820DF96Ch case   29:*/		return 0x820DF970;
		  /* 820DF970h */ case   30:  		/* b 88 */
		/* 820DF970h case   30:*/		return 0x820DF9C8;
		/* 820DF970h case   30:*/		return 0x820DF974;
		  /* 820DF974h */ case   31:  		/* li R11, 4 */
		/* 820DF974h case   31:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820DF974h case   31:*/		return 0x820DF978;
		  /* 820DF978h */ case   32:  		/* b 80 */
		/* 820DF978h case   32:*/		return 0x820DF9C8;
		/* 820DF978h case   32:*/		return 0x820DF97C;
		  /* 820DF97Ch */ case   33:  		/* li R11, 5 */
		/* 820DF97Ch case   33:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 820DF97Ch case   33:*/		return 0x820DF980;
		  /* 820DF980h */ case   34:  		/* b 72 */
		/* 820DF980h case   34:*/		return 0x820DF9C8;
		/* 820DF980h case   34:*/		return 0x820DF984;
		  /* 820DF984h */ case   35:  		/* li R11, 6 */
		/* 820DF984h case   35:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 820DF984h case   35:*/		return 0x820DF988;
		  /* 820DF988h */ case   36:  		/* b 64 */
		/* 820DF988h case   36:*/		return 0x820DF9C8;
		/* 820DF988h case   36:*/		return 0x820DF98C;
		  /* 820DF98Ch */ case   37:  		/* li R11, 7 */
		/* 820DF98Ch case   37:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 820DF98Ch case   37:*/		return 0x820DF990;
		  /* 820DF990h */ case   38:  		/* b 56 */
		/* 820DF990h case   38:*/		return 0x820DF9C8;
		/* 820DF990h case   38:*/		return 0x820DF994;
		  /* 820DF994h */ case   39:  		/* li R11, 8 */
		/* 820DF994h case   39:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 820DF994h case   39:*/		return 0x820DF998;
		  /* 820DF998h */ case   40:  		/* b 48 */
		/* 820DF998h case   40:*/		return 0x820DF9C8;
		/* 820DF998h case   40:*/		return 0x820DF99C;
		  /* 820DF99Ch */ case   41:  		/* li R11, 9 */
		/* 820DF99Ch case   41:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 820DF99Ch case   41:*/		return 0x820DF9A0;
		  /* 820DF9A0h */ case   42:  		/* b 40 */
		/* 820DF9A0h case   42:*/		return 0x820DF9C8;
		/* 820DF9A0h case   42:*/		return 0x820DF9A4;
		  /* 820DF9A4h */ case   43:  		/* li R11, 10 */
		/* 820DF9A4h case   43:*/		cpu::op::li<0>(regs,&regs.R11,0xA);
		/* 820DF9A4h case   43:*/		return 0x820DF9A8;
		  /* 820DF9A8h */ case   44:  		/* b 32 */
		/* 820DF9A8h case   44:*/		return 0x820DF9C8;
		/* 820DF9A8h case   44:*/		return 0x820DF9AC;
		  /* 820DF9ACh */ case   45:  		/* li R11, 11 */
		/* 820DF9ACh case   45:*/		cpu::op::li<0>(regs,&regs.R11,0xB);
		/* 820DF9ACh case   45:*/		return 0x820DF9B0;
		  /* 820DF9B0h */ case   46:  		/* b 24 */
		/* 820DF9B0h case   46:*/		return 0x820DF9C8;
		/* 820DF9B0h case   46:*/		return 0x820DF9B4;
		  /* 820DF9B4h */ case   47:  		/* li R11, 12 */
		/* 820DF9B4h case   47:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 820DF9B4h case   47:*/		return 0x820DF9B8;
		  /* 820DF9B8h */ case   48:  		/* b 16 */
		/* 820DF9B8h case   48:*/		return 0x820DF9C8;
		/* 820DF9B8h case   48:*/		return 0x820DF9BC;
		  /* 820DF9BCh */ case   49:  		/* li R11, 13 */
		/* 820DF9BCh case   49:*/		cpu::op::li<0>(regs,&regs.R11,0xD);
		/* 820DF9BCh case   49:*/		return 0x820DF9C0;
		  /* 820DF9C0h */ case   50:  		/* b 8 */
		/* 820DF9C0h case   50:*/		return 0x820DF9C8;
		/* 820DF9C0h case   50:*/		return 0x820DF9C4;
		  /* 820DF9C4h */ case   51:  		/* lis R11, -32768 */
		/* 820DF9C4h case   51:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 820DF9C4h case   51:*/		return 0x820DF9C8;
	}
	return 0x820DF9C8;
} // Block from 820DF8F8h-820DF9C8h (52 instructions)

//////////////////////////////////////////////////////
// Block at 820DF9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF9C8);
		  /* 820DF9C8h */ case    0:  		/* cmplw CR6, R11, R28 */
		/* 820DF9C8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 820DF9C8h case    0:*/		return 0x820DF9CC;
		  /* 820DF9CCh */ case    1:  		/* bc 12, CR6_LT, 16 */
		/* 820DF9CCh case    1:*/		if ( regs.CR[6].lt ) { return 0x820DF9DC;  }
		/* 820DF9CCh case    1:*/		return 0x820DF9D0;
		  /* 820DF9D0h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 820DF9D0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820DF9E4;  }
		/* 820DF9D0h case    2:*/		return 0x820DF9D4;
		  /* 820DF9D4h */ case    3:  		/* cmplw CR6, R3, R25 */
		/* 820DF9D4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R25);
		/* 820DF9D4h case    3:*/		return 0x820DF9D8;
		  /* 820DF9D8h */ case    4:  		/* bc 4, CR6_LT, 12 */
		/* 820DF9D8h case    4:*/		if ( !regs.CR[6].lt ) { return 0x820DF9E4;  }
		/* 820DF9D8h case    4:*/		return 0x820DF9DC;
	}
	return 0x820DF9DC;
} // Block from 820DF9C8h-820DF9DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820DF9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF9DC);
		  /* 820DF9DCh */ case    0:  		/* mr R28, R11 */
		/* 820DF9DCh case    0:*/		regs.R28 = regs.R11;
		/* 820DF9DCh case    0:*/		return 0x820DF9E0;
		  /* 820DF9E0h */ case    1:  		/* mr R25, R3 */
		/* 820DF9E0h case    1:*/		regs.R25 = regs.R3;
		/* 820DF9E0h case    1:*/		return 0x820DF9E4;
	}
	return 0x820DF9E4;
} // Block from 820DF9DCh-820DF9E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DF9E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF9E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF9E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF9E4);
		  /* 820DF9E4h */ case    0:  		/* addi R26, R26, 1 */
		/* 820DF9E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 820DF9E4h case    0:*/		return 0x820DF9E8;
		  /* 820DF9E8h */ case    1:  		/* addi R29, R29, 4 */
		/* 820DF9E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820DF9E8h case    1:*/		return 0x820DF9EC;
		  /* 820DF9ECh */ case    2:  		/* cmplw CR6, R26, R27 */
		/* 820DF9ECh case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R27);
		/* 820DF9ECh case    2:*/		return 0x820DF9F0;
		  /* 820DF9F0h */ case    3:  		/* bc 12, CR6_LT, -272 */
		/* 820DF9F0h case    3:*/		if ( regs.CR[6].lt ) { return 0x820DF8E0;  }
		/* 820DF9F0h case    3:*/		return 0x820DF9F4;
	}
	return 0x820DF9F4;
} // Block from 820DF9E4h-820DF9F4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DF9F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DF9F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DF9F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DF9F4);
		  /* 820DF9F4h */ case    0:  		/* mr R3, R31 */
		/* 820DF9F4h case    0:*/		regs.R3 = regs.R31;
		/* 820DF9F4h case    0:*/		return 0x820DF9F8;
		  /* 820DF9F8h */ case    1:  		/* bl -22600 */
		/* 820DF9F8h case    1:*/		regs.LR = 0x820DF9FC; return 0x820DA1B0;
		/* 820DF9F8h case    1:*/		return 0x820DF9FC;
		  /* 820DF9FCh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DF9FCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DF9FCh case    2:*/		return 0x820DFA00;
		  /* 820DFA00h */ case    3:  		/* bc 12, CR0_LT, 244 */
		/* 820DFA00h case    3:*/		if ( regs.CR[0].lt ) { return 0x820DFAF4;  }
		/* 820DFA00h case    3:*/		return 0x820DFA04;
		  /* 820DFA04h */ case    4:  		/* lis R11, -32254 */
		/* 820DFA04h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFA04h case    4:*/		return 0x820DFA08;
		  /* 820DFA08h */ case    5:  		/* lis R10, -32254 */
		/* 820DFA08h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DFA08h case    5:*/		return 0x820DFA0C;
		  /* 820DFA0Ch */ case    6:  		/* addi R5, R11, -27292 */
		/* 820DFA0Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9564);
		/* 820DFA0Ch case    6:*/		return 0x820DFA10;
		  /* 820DFA10h */ case    7:  		/* addi R4, R10, -27356 */
		/* 820DFA10h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9524);
		/* 820DFA10h case    7:*/		return 0x820DFA14;
		  /* 820DFA14h */ case    8:  		/* mr R3, R31 */
		/* 820DFA14h case    8:*/		regs.R3 = regs.R31;
		/* 820DFA14h case    8:*/		return 0x820DFA18;
		  /* 820DFA18h */ case    9:  		/* bl -22848 */
		/* 820DFA18h case    9:*/		regs.LR = 0x820DFA1C; return 0x820DA0D8;
		/* 820DFA18h case    9:*/		return 0x820DFA1C;
		  /* 820DFA1Ch */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DFA1Ch case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFA1Ch case   10:*/		return 0x820DFA20;
		  /* 820DFA20h */ case   11:  		/* bc 12, CR0_LT, 212 */
		/* 820DFA20h case   11:*/		if ( regs.CR[0].lt ) { return 0x820DFAF4;  }
		/* 820DFA20h case   11:*/		return 0x820DFA24;
		  /* 820DFA24h */ case   12:  		/* mr R3, R31 */
		/* 820DFA24h case   12:*/		regs.R3 = regs.R31;
		/* 820DFA24h case   12:*/		return 0x820DFA28;
		  /* 820DFA28h */ case   13:  		/* bl -22648 */
		/* 820DFA28h case   13:*/		regs.LR = 0x820DFA2C; return 0x820DA1B0;
		/* 820DFA28h case   13:*/		return 0x820DFA2C;
		  /* 820DFA2Ch */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820DFA2Ch case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFA2Ch case   14:*/		return 0x820DFA30;
		  /* 820DFA30h */ case   15:  		/* bc 12, CR0_LT, 196 */
		/* 820DFA30h case   15:*/		if ( regs.CR[0].lt ) { return 0x820DFAF4;  }
		/* 820DFA30h case   15:*/		return 0x820DFA34;
		  /* 820DFA34h */ case   16:  		/* lis R11, -32254 */
		/* 820DFA34h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFA34h case   16:*/		return 0x820DFA38;
		  /* 820DFA38h */ case   17:  		/* mr R3, R31 */
		/* 820DFA38h case   17:*/		regs.R3 = regs.R31;
		/* 820DFA38h case   17:*/		return 0x820DFA3C;
		  /* 820DFA3Ch */ case   18:  		/* addi R4, R11, -30564 */
		/* 820DFA3Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF889C);
		/* 820DFA3Ch case   18:*/		return 0x820DFA40;
		  /* 820DFA40h */ case   19:  		/* bl -22888 */
		/* 820DFA40h case   19:*/		regs.LR = 0x820DFA44; return 0x820DA0D8;
		/* 820DFA40h case   19:*/		return 0x820DFA44;
		  /* 820DFA44h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 820DFA44h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFA44h case   20:*/		return 0x820DFA48;
		  /* 820DFA48h */ case   21:  		/* bc 12, CR0_LT, 172 */
		/* 820DFA48h case   21:*/		if ( regs.CR[0].lt ) { return 0x820DFAF4;  }
		/* 820DFA48h case   21:*/		return 0x820DFA4C;
		  /* 820DFA4Ch */ case   22:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DFA4Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFA4Ch case   22:*/		return 0x820DFA50;
		  /* 820DFA50h */ case   23:  		/* mr R3, R31 */
		/* 820DFA50h case   23:*/		regs.R3 = regs.R31;
		/* 820DFA50h case   23:*/		return 0x820DFA54;
		  /* 820DFA54h */ case   24:  		/* addi R11, R11, 1 */
		/* 820DFA54h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820DFA54h case   24:*/		return 0x820DFA58;
		  /* 820DFA58h */ case   25:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DFA58h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFA58h case   25:*/		return 0x820DFA5C;
		  /* 820DFA5Ch */ case   26:  		/* bl -22700 */
		/* 820DFA5Ch case   26:*/		regs.LR = 0x820DFA60; return 0x820DA1B0;
		/* 820DFA5Ch case   26:*/		return 0x820DFA60;
		  /* 820DFA60h */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 820DFA60h case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFA60h case   27:*/		return 0x820DFA64;
		  /* 820DFA64h */ case   28:  		/* bc 12, CR0_LT, 144 */
		/* 820DFA64h case   28:*/		if ( regs.CR[0].lt ) { return 0x820DFAF4;  }
		/* 820DFA64h case   28:*/		return 0x820DFA68;
		  /* 820DFA68h */ case   29:  		/* lis R11, -32254 */
		/* 820DFA68h case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFA68h case   29:*/		return 0x820DFA6C;
		  /* 820DFA6Ch */ case   30:  		/* mr R3, R31 */
		/* 820DFA6Ch case   30:*/		regs.R3 = regs.R31;
		/* 820DFA6Ch case   30:*/		return 0x820DFA70;
		  /* 820DFA70h */ case   31:  		/* addi R4, R11, -27432 */
		/* 820DFA70h case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF94D8);
		/* 820DFA70h case   31:*/		return 0x820DFA74;
		  /* 820DFA74h */ case   32:  		/* bl -22940 */
		/* 820DFA74h case   32:*/		regs.LR = 0x820DFA78; return 0x820DA0D8;
		/* 820DFA74h case   32:*/		return 0x820DFA78;
		  /* 820DFA78h */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 820DFA78h case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFA78h case   33:*/		return 0x820DFA7C;
		  /* 820DFA7Ch */ case   34:  		/* bc 12, CR0_LT, 120 */
		/* 820DFA7Ch case   34:*/		if ( regs.CR[0].lt ) { return 0x820DFAF4;  }
		/* 820DFA7Ch case   34:*/		return 0x820DFA80;
		  /* 820DFA80h */ case   35:  		/* mr R3, R31 */
		/* 820DFA80h case   35:*/		regs.R3 = regs.R31;
		/* 820DFA80h case   35:*/		return 0x820DFA84;
		  /* 820DFA84h */ case   36:  		/* bl -22740 */
		/* 820DFA84h case   36:*/		regs.LR = 0x820DFA88; return 0x820DA1B0;
		/* 820DFA84h case   36:*/		return 0x820DFA88;
		  /* 820DFA88h */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 820DFA88h case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFA88h case   37:*/		return 0x820DFA8C;
		  /* 820DFA8Ch */ case   38:  		/* bc 12, CR0_LT, 104 */
		/* 820DFA8Ch case   38:*/		if ( regs.CR[0].lt ) { return 0x820DFAF4;  }
		/* 820DFA8Ch case   38:*/		return 0x820DFA90;
		  /* 820DFA90h */ case   39:  		/* lis R11, -32254 */
		/* 820DFA90h case   39:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFA90h case   39:*/		return 0x820DFA94;
		  /* 820DFA94h */ case   40:  		/* lwz R5, <#[R31 + 1816]> */
		/* 820DFA94h case   40:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000718) );
		/* 820DFA94h case   40:*/		return 0x820DFA98;
		  /* 820DFA98h */ case   41:  		/* mr R3, R31 */
		/* 820DFA98h case   41:*/		regs.R3 = regs.R31;
		/* 820DFA98h case   41:*/		return 0x820DFA9C;
		  /* 820DFA9Ch */ case   42:  		/* addi R4, R11, -27552 */
		/* 820DFA9Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9460);
		/* 820DFA9Ch case   42:*/		return 0x820DFAA0;
	}
	return 0x820DFAA0;
} // Block from 820DF9F4h-820DFAA0h (43 instructions)

//////////////////////////////////////////////////////
// Block at 820DFAA0h
// Function '?EmitRIntEqualSW@C30SWProgramML@D3DXShader@@MAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFAA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFAA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFAA0);
		  /* 820DFAA0h */ case    0:  		/* bl -22984 */
		/* 820DFAA0h case    0:*/		regs.LR = 0x820DFAA4; return 0x820DA0D8;
		/* 820DFAA0h case    0:*/		return 0x820DFAA4;
		  /* 820DFAA4h */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820DFAA4h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFAA4h case    1:*/		return 0x820DFAA8;
		  /* 820DFAA8h */ case    2:  		/* bc 12, CR0_LT, 76 */
		/* 820DFAA8h case    2:*/		if ( regs.CR[0].lt ) { return 0x820DFAF4;  }
		/* 820DFAA8h case    2:*/		return 0x820DFAAC;
		  /* 820DFAACh */ case    3:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DFAACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFAACh case    3:*/		return 0x820DFAB0;
		  /* 820DFAB0h */ case    4:  		/* mr R3, R31 */
		/* 820DFAB0h case    4:*/		regs.R3 = regs.R31;
		/* 820DFAB0h case    4:*/		return 0x820DFAB4;
		  /* 820DFAB4h */ case    5:  		/* addi R11, R11, -1 */
		/* 820DFAB4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DFAB4h case    5:*/		return 0x820DFAB8;
		  /* 820DFAB8h */ case    6:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DFAB8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFAB8h case    6:*/		return 0x820DFABC;
		  /* 820DFABCh */ case    7:  		/* bl -22796 */
		/* 820DFABCh case    7:*/		regs.LR = 0x820DFAC0; return 0x820DA1B0;
		/* 820DFABCh case    7:*/		return 0x820DFAC0;
		  /* 820DFAC0h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DFAC0h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFAC0h case    8:*/		return 0x820DFAC4;
		  /* 820DFAC4h */ case    9:  		/* bc 12, CR0_LT, 48 */
		/* 820DFAC4h case    9:*/		if ( regs.CR[0].lt ) { return 0x820DFAF4;  }
		/* 820DFAC4h case    9:*/		return 0x820DFAC8;
		  /* 820DFAC8h */ case   10:  		/* lis R11, -32254 */
		/* 820DFAC8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFAC8h case   10:*/		return 0x820DFACC;
		  /* 820DFACCh */ case   11:  		/* mr R3, R31 */
		/* 820DFACCh case   11:*/		regs.R3 = regs.R31;
		/* 820DFACCh case   11:*/		return 0x820DFAD0;
		  /* 820DFAD0h */ case   12:  		/* addi R4, R11, -30524 */
		/* 820DFAD0h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88C4);
		/* 820DFAD0h case   12:*/		return 0x820DFAD4;
		  /* 820DFAD4h */ case   13:  		/* bl -23036 */
		/* 820DFAD4h case   13:*/		regs.LR = 0x820DFAD8; return 0x820DA0D8;
		/* 820DFAD4h case   13:*/		return 0x820DFAD8;
		  /* 820DFAD8h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820DFAD8h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFAD8h case   14:*/		return 0x820DFADC;
		  /* 820DFADCh */ case   15:  		/* bc 12, CR0_LT, 24 */
		/* 820DFADCh case   15:*/		if ( regs.CR[0].lt ) { return 0x820DFAF4;  }
		/* 820DFADCh case   15:*/		return 0x820DFAE0;
		  /* 820DFAE0h */ case   16:  		/* lwz R11, <#[R31]> */
		/* 820DFAE0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DFAE0h case   16:*/		return 0x820DFAE4;
		  /* 820DFAE4h */ case   17:  		/* mr R3, R31 */
		/* 820DFAE4h case   17:*/		regs.R3 = regs.R31;
		/* 820DFAE4h case   17:*/		return 0x820DFAE8;
	}
	return 0x820DFAE8;
} // Block from 820DFAA0h-820DFAE8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820DFAE8h
// Function '?EmitRIntComparisonAnyFalseOp@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFAE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFAE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFAE8);
		  /* 820DFAE8h */ case    0:  		/* lwz R11, <#[R11 + 376]> */
		/* 820DFAE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000178) );
		/* 820DFAE8h case    0:*/		return 0x820DFAEC;
		  /* 820DFAECh */ case    1:  		/* mtspr CTR, R11 */
		/* 820DFAECh case    1:*/		regs.CTR = regs.R11;
		/* 820DFAECh case    1:*/		return 0x820DFAF0;
		  /* 820DFAF0h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 820DFAF0h case    2:*/		if ( 1 ) { regs.LR = 0x820DFAF4; return (uint32)regs.CTR; }
		/* 820DFAF0h case    2:*/		return 0x820DFAF4;
	}
	return 0x820DFAF4;
} // Block from 820DFAE8h-820DFAF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DFAF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFAF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFAF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFAF4);
		  /* 820DFAF4h */ case    0:  		/* addi R1, R1, 176 */
		/* 820DFAF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820DFAF4h case    0:*/		return 0x820DFAF8;
		  /* 820DFAF8h */ case    1:  		/* b -321628 */
		/* 820DFAF8h case    1:*/		return 0x8209129C;
		/* 820DFAF8h case    1:*/		return 0x820DFAFC;
		  /* 820DFAFCh */ case    2:  		/* li R3, 1 */
		/* 820DFAFCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820DFAFCh case    2:*/		return 0x820DFB00;
		  /* 820DFB00h */ case    3:  		/* b -12 */
		/* 820DFB00h case    3:*/		return 0x820DFAF4;
		/* 820DFB00h case    3:*/		return 0x820DFB04;
	}
	return 0x820DFB04;
} // Block from 820DFAF4h-820DFB04h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DFB04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFB04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFB04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFB04);
		  /* 820DFB04h */ case    0:  		/* lis R3, -32768 */
		/* 820DFB04h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820DFB04h case    0:*/		return 0x820DFB08;
		  /* 820DFB08h */ case    1:  		/* ori R3, R3, 16389 */
		/* 820DFB08h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820DFB08h case    1:*/		return 0x820DFB0C;
		  /* 820DFB0Ch */ case    2:  		/* b -24 */
		/* 820DFB0Ch case    2:*/		return 0x820DFAF4;
		/* 820DFB0Ch case    2:*/		return 0x820DFB10;
	}
	return 0x820DFB10;
} // Block from 820DFB04h-820DFB10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DFB10h
// Function '?EmitFRCFunction@C30SWProgramML@D3DXShader@@UAAJPBD000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFB10);
		  /* 820DFB10h */ case    0:  		/* mfspr R12, LR */
		/* 820DFB10h case    0:*/		regs.R12 = regs.LR;
		/* 820DFB10h case    0:*/		return 0x820DFB14;
		  /* 820DFB14h */ case    1:  		/* bl -321728 */
		/* 820DFB14h case    1:*/		regs.LR = 0x820DFB18; return 0x82091254;
		/* 820DFB14h case    1:*/		return 0x820DFB18;
		  /* 820DFB18h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 820DFB18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 820DFB18h case    2:*/		return 0x820DFB1C;
		  /* 820DFB1Ch */ case    3:  		/* lwz R11, <#[R3 + 1676]> */
		/* 820DFB1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000068C) );
		/* 820DFB1Ch case    3:*/		return 0x820DFB20;
		  /* 820DFB20h */ case    4:  		/* mr R31, R3 */
		/* 820DFB20h case    4:*/		regs.R31 = regs.R3;
		/* 820DFB20h case    4:*/		return 0x820DFB24;
		  /* 820DFB24h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820DFB24h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820DFB24h case    5:*/		return 0x820DFB28;
		  /* 820DFB28h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 820DFB28h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820DFB34;  }
		/* 820DFB28h case    6:*/		return 0x820DFB2C;
		  /* 820DFB2Ch */ case    7:  		/* li R3, 0 */
		/* 820DFB2Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820DFB2Ch case    7:*/		return 0x820DFB30;
		  /* 820DFB30h */ case    8:  		/* b 436 */
		/* 820DFB30h case    8:*/		return 0x820DFCE4;
		/* 820DFB30h case    8:*/		return 0x820DFB34;
	}
	return 0x820DFB34;
} // Block from 820DFB10h-820DFB34h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820DFB34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFB34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFB34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFB34);
		  /* 820DFB34h */ case    0:  		/* mr R3, R31 */
		/* 820DFB34h case    0:*/		regs.R3 = regs.R31;
		/* 820DFB34h case    0:*/		return 0x820DFB38;
		  /* 820DFB38h */ case    1:  		/* bl -22920 */
		/* 820DFB38h case    1:*/		regs.LR = 0x820DFB3C; return 0x820DA1B0;
		/* 820DFB38h case    1:*/		return 0x820DFB3C;
		  /* 820DFB3Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DFB3Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFB3Ch case    2:*/		return 0x820DFB40;
		  /* 820DFB40h */ case    3:  		/* bc 12, CR0_LT, 420 */
		/* 820DFB40h case    3:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFB40h case    3:*/		return 0x820DFB44;
		  /* 820DFB44h */ case    4:  		/* lis R11, -32254 */
		/* 820DFB44h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFB44h case    4:*/		return 0x820DFB48;
		  /* 820DFB48h */ case    5:  		/* mr R3, R31 */
		/* 820DFB48h case    5:*/		regs.R3 = regs.R31;
		/* 820DFB48h case    5:*/		return 0x820DFB4C;
		  /* 820DFB4Ch */ case    6:  		/* addi R4, R11, -27048 */
		/* 820DFB4Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9658);
		/* 820DFB4Ch case    6:*/		return 0x820DFB50;
		  /* 820DFB50h */ case    7:  		/* bl -23160 */
		/* 820DFB50h case    7:*/		regs.LR = 0x820DFB54; return 0x820DA0D8;
		/* 820DFB50h case    7:*/		return 0x820DFB54;
		  /* 820DFB54h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820DFB54h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFB54h case    8:*/		return 0x820DFB58;
		  /* 820DFB58h */ case    9:  		/* bc 12, CR0_LT, 396 */
		/* 820DFB58h case    9:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFB58h case    9:*/		return 0x820DFB5C;
		  /* 820DFB5Ch */ case   10:  		/* mr R3, R31 */
		/* 820DFB5Ch case   10:*/		regs.R3 = regs.R31;
		/* 820DFB5Ch case   10:*/		return 0x820DFB60;
		  /* 820DFB60h */ case   11:  		/* bl -22960 */
		/* 820DFB60h case   11:*/		regs.LR = 0x820DFB64; return 0x820DA1B0;
		/* 820DFB60h case   11:*/		return 0x820DFB64;
		  /* 820DFB64h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820DFB64h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFB64h case   12:*/		return 0x820DFB68;
		  /* 820DFB68h */ case   13:  		/* bc 12, CR0_LT, 380 */
		/* 820DFB68h case   13:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFB68h case   13:*/		return 0x820DFB6C;
		  /* 820DFB6Ch */ case   14:  		/* lis R11, -32254 */
		/* 820DFB6Ch case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFB6Ch case   14:*/		return 0x820DFB70;
		  /* 820DFB70h */ case   15:  		/* mr R3, R31 */
		/* 820DFB70h case   15:*/		regs.R3 = regs.R31;
		/* 820DFB70h case   15:*/		return 0x820DFB74;
		  /* 820DFB74h */ case   16:  		/* addi R30, R11, -30564 */
		/* 820DFB74h case   16:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF889C);
		/* 820DFB74h case   16:*/		return 0x820DFB78;
		  /* 820DFB78h */ case   17:  		/* mr R4, R30 */
		/* 820DFB78h case   17:*/		regs.R4 = regs.R30;
		/* 820DFB78h case   17:*/		return 0x820DFB7C;
		  /* 820DFB7Ch */ case   18:  		/* bl -23204 */
		/* 820DFB7Ch case   18:*/		regs.LR = 0x820DFB80; return 0x820DA0D8;
		/* 820DFB7Ch case   18:*/		return 0x820DFB80;
		  /* 820DFB80h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820DFB80h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFB80h case   19:*/		return 0x820DFB84;
		  /* 820DFB84h */ case   20:  		/* bc 12, CR0_LT, 352 */
		/* 820DFB84h case   20:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFB84h case   20:*/		return 0x820DFB88;
		  /* 820DFB88h */ case   21:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DFB88h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFB88h case   21:*/		return 0x820DFB8C;
		  /* 820DFB8Ch */ case   22:  		/* mr R3, R31 */
		/* 820DFB8Ch case   22:*/		regs.R3 = regs.R31;
		/* 820DFB8Ch case   22:*/		return 0x820DFB90;
		  /* 820DFB90h */ case   23:  		/* addi R11, R11, 1 */
		/* 820DFB90h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820DFB90h case   23:*/		return 0x820DFB94;
		  /* 820DFB94h */ case   24:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DFB94h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFB94h case   24:*/		return 0x820DFB98;
		  /* 820DFB98h */ case   25:  		/* bl -23016 */
		/* 820DFB98h case   25:*/		regs.LR = 0x820DFB9C; return 0x820DA1B0;
		/* 820DFB98h case   25:*/		return 0x820DFB9C;
		  /* 820DFB9Ch */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820DFB9Ch case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFB9Ch case   26:*/		return 0x820DFBA0;
		  /* 820DFBA0h */ case   27:  		/* bc 12, CR0_LT, 324 */
		/* 820DFBA0h case   27:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFBA0h case   27:*/		return 0x820DFBA4;
		  /* 820DFBA4h */ case   28:  		/* lis R11, -32254 */
		/* 820DFBA4h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFBA4h case   28:*/		return 0x820DFBA8;
		  /* 820DFBA8h */ case   29:  		/* mr R3, R31 */
		/* 820DFBA8h case   29:*/		regs.R3 = regs.R31;
		/* 820DFBA8h case   29:*/		return 0x820DFBAC;
		  /* 820DFBACh */ case   30:  		/* addi R4, R11, -27120 */
		/* 820DFBACh case   30:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9610);
		/* 820DFBACh case   30:*/		return 0x820DFBB0;
		  /* 820DFBB0h */ case   31:  		/* bl -23256 */
		/* 820DFBB0h case   31:*/		regs.LR = 0x820DFBB4; return 0x820DA0D8;
		/* 820DFBB0h case   31:*/		return 0x820DFBB4;
		  /* 820DFBB4h */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 820DFBB4h case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFBB4h case   32:*/		return 0x820DFBB8;
		  /* 820DFBB8h */ case   33:  		/* bc 12, CR0_LT, 300 */
		/* 820DFBB8h case   33:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFBB8h case   33:*/		return 0x820DFBBC;
		  /* 820DFBBCh */ case   34:  		/* mr R3, R31 */
		/* 820DFBBCh case   34:*/		regs.R3 = regs.R31;
		/* 820DFBBCh case   34:*/		return 0x820DFBC0;
		  /* 820DFBC0h */ case   35:  		/* bl -23056 */
		/* 820DFBC0h case   35:*/		regs.LR = 0x820DFBC4; return 0x820DA1B0;
		/* 820DFBC0h case   35:*/		return 0x820DFBC4;
		  /* 820DFBC4h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820DFBC4h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFBC4h case   36:*/		return 0x820DFBC8;
		  /* 820DFBC8h */ case   37:  		/* bc 12, CR0_LT, 284 */
		/* 820DFBC8h case   37:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFBC8h case   37:*/		return 0x820DFBCC;
		  /* 820DFBCCh */ case   38:  		/* mr R4, R30 */
		/* 820DFBCCh case   38:*/		regs.R4 = regs.R30;
		/* 820DFBCCh case   38:*/		return 0x820DFBD0;
		  /* 820DFBD0h */ case   39:  		/* mr R3, R31 */
		/* 820DFBD0h case   39:*/		regs.R3 = regs.R31;
		/* 820DFBD0h case   39:*/		return 0x820DFBD4;
		  /* 820DFBD4h */ case   40:  		/* bl -23292 */
		/* 820DFBD4h case   40:*/		regs.LR = 0x820DFBD8; return 0x820DA0D8;
		/* 820DFBD4h case   40:*/		return 0x820DFBD8;
		  /* 820DFBD8h */ case   41:  		/* cmpwi CR0, R3, 0 */
		/* 820DFBD8h case   41:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFBD8h case   41:*/		return 0x820DFBDC;
		  /* 820DFBDCh */ case   42:  		/* bc 12, CR0_LT, 264 */
		/* 820DFBDCh case   42:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFBDCh case   42:*/		return 0x820DFBE0;
		  /* 820DFBE0h */ case   43:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DFBE0h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFBE0h case   43:*/		return 0x820DFBE4;
		  /* 820DFBE4h */ case   44:  		/* li R27, 0 */
		/* 820DFBE4h case   44:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820DFBE4h case   44:*/		return 0x820DFBE8;
		  /* 820DFBE8h */ case   45:  		/* lwz R10, <#[R31 + 1676]> */
		/* 820DFBE8h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000068C) );
		/* 820DFBE8h case   45:*/		return 0x820DFBEC;
		  /* 820DFBECh */ case   46:  		/* addi R11, R11, 1 */
		/* 820DFBECh case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820DFBECh case   46:*/		return 0x820DFBF0;
		  /* 820DFBF0h */ case   47:  		/* cmplwi CR6, R10, 0 */
		/* 820DFBF0h case   47:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820DFBF0h case   47:*/		return 0x820DFBF4;
		  /* 820DFBF4h */ case   48:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DFBF4h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFBF4h case   48:*/		return 0x820DFBF8;
		  /* 820DFBF8h */ case   49:  		/* bc 4, CR6_GT, 132 */
		/* 820DFBF8h case   49:*/		if ( !regs.CR[6].gt ) { return 0x820DFC7C;  }
		/* 820DFBF8h case   49:*/		return 0x820DFBFC;
		  /* 820DFBFCh */ case   50:  		/* lis R11, -32254 */
		/* 820DFBFCh case   50:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFBFCh case   50:*/		return 0x820DFC00;
		  /* 820DFC00h */ case   51:  		/* lis R10, -32254 */
		/* 820DFC00h case   51:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820DFC00h case   51:*/		return 0x820DFC04;
		  /* 820DFC04h */ case   52:  		/* addi R30, R31, 1548 */
		/* 820DFC04h case   52:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x60C);
		/* 820DFC04h case   52:*/		return 0x820DFC08;
		  /* 820DFC08h */ case   53:  		/* addi R29, R11, -27208 */
		/* 820DFC08h case   53:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF95B8);
		/* 820DFC08h case   53:*/		return 0x820DFC0C;
		  /* 820DFC0Ch */ case   54:  		/* addi R28, R10, -27272 */
		/* 820DFC0Ch case   54:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFF9578);
		/* 820DFC0Ch case   54:*/		return 0x820DFC10;
		  /* 820DFC10h */ case   55:  		/* mr R3, R31 */
		/* 820DFC10h case   55:*/		regs.R3 = regs.R31;
		/* 820DFC10h case   55:*/		return 0x820DFC14;
		  /* 820DFC14h */ case   56:  		/* bl -23140 */
		/* 820DFC14h case   56:*/		regs.LR = 0x820DFC18; return 0x820DA1B0;
		/* 820DFC14h case   56:*/		return 0x820DFC18;
		  /* 820DFC18h */ case   57:  		/* cmpwi CR0, R3, 0 */
		/* 820DFC18h case   57:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFC18h case   57:*/		return 0x820DFC1C;
		  /* 820DFC1Ch */ case   58:  		/* bc 12, CR0_LT, 200 */
		/* 820DFC1Ch case   58:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFC1Ch case   58:*/		return 0x820DFC20;
		  /* 820DFC20h */ case   59:  		/* mr R4, R28 */
		/* 820DFC20h case   59:*/		regs.R4 = regs.R28;
		/* 820DFC20h case   59:*/		return 0x820DFC24;
		  /* 820DFC24h */ case   60:  		/* lwz R5, <#[R30]> */
		/* 820DFC24h case   60:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 820DFC24h case   60:*/		return 0x820DFC28;
		  /* 820DFC28h */ case   61:  		/* mr R3, R31 */
		/* 820DFC28h case   61:*/		regs.R3 = regs.R31;
		/* 820DFC28h case   61:*/		return 0x820DFC2C;
		  /* 820DFC2Ch */ case   62:  		/* lwz R6, <#[R30 + 4]> */
		/* 820DFC2Ch case   62:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 820DFC2Ch case   62:*/		return 0x820DFC30;
		  /* 820DFC30h */ case   63:  		/* bl -23384 */
		/* 820DFC30h case   63:*/		regs.LR = 0x820DFC34; return 0x820DA0D8;
		/* 820DFC30h case   63:*/		return 0x820DFC34;
		  /* 820DFC34h */ case   64:  		/* cmpwi CR0, R3, 0 */
		/* 820DFC34h case   64:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFC34h case   64:*/		return 0x820DFC38;
		  /* 820DFC38h */ case   65:  		/* bc 12, CR0_LT, 172 */
		/* 820DFC38h case   65:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFC38h case   65:*/		return 0x820DFC3C;
		  /* 820DFC3Ch */ case   66:  		/* mr R3, R31 */
		/* 820DFC3Ch case   66:*/		regs.R3 = regs.R31;
		/* 820DFC3Ch case   66:*/		return 0x820DFC40;
		  /* 820DFC40h */ case   67:  		/* bl -23184 */
		/* 820DFC40h case   67:*/		regs.LR = 0x820DFC44; return 0x820DA1B0;
		/* 820DFC40h case   67:*/		return 0x820DFC44;
		  /* 820DFC44h */ case   68:  		/* cmpwi CR0, R3, 0 */
		/* 820DFC44h case   68:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFC44h case   68:*/		return 0x820DFC48;
		  /* 820DFC48h */ case   69:  		/* bc 12, CR0_LT, 156 */
		/* 820DFC48h case   69:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFC48h case   69:*/		return 0x820DFC4C;
		  /* 820DFC4Ch */ case   70:  		/* mr R4, R29 */
		/* 820DFC4Ch case   70:*/		regs.R4 = regs.R29;
		/* 820DFC4Ch case   70:*/		return 0x820DFC50;
		  /* 820DFC50h */ case   71:  		/* lwz R5, <#[R30]> */
		/* 820DFC50h case   71:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 820DFC50h case   71:*/		return 0x820DFC54;
		  /* 820DFC54h */ case   72:  		/* mr R3, R31 */
		/* 820DFC54h case   72:*/		regs.R3 = regs.R31;
		/* 820DFC54h case   72:*/		return 0x820DFC58;
	}
	return 0x820DFC58;
} // Block from 820DFB34h-820DFC58h (73 instructions)

//////////////////////////////////////////////////////
// Block at 820DFC58h
// Function '?GenerateCode@C30SWProgram@D3DXShader@@UAAJPAPAUID3DXBuffer@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFC58);
		  /* 820DFC58h */ case    0:  		/* lwz R6, <#[R30 + 4]> */
		/* 820DFC58h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 820DFC58h case    0:*/		return 0x820DFC5C;
		  /* 820DFC5Ch */ case    1:  		/* bl -23428 */
		/* 820DFC5Ch case    1:*/		regs.LR = 0x820DFC60; return 0x820DA0D8;
		/* 820DFC5Ch case    1:*/		return 0x820DFC60;
		  /* 820DFC60h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820DFC60h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFC60h case    2:*/		return 0x820DFC64;
		  /* 820DFC64h */ case    3:  		/* bc 12, CR0_LT, 128 */
		/* 820DFC64h case    3:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFC64h case    3:*/		return 0x820DFC68;
		  /* 820DFC68h */ case    4:  		/* lwz R11, <#[R31 + 1676]> */
		/* 820DFC68h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000068C) );
		/* 820DFC68h case    4:*/		return 0x820DFC6C;
		  /* 820DFC6Ch */ case    5:  		/* addi R27, R27, 1 */
		/* 820DFC6Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 820DFC6Ch case    5:*/		return 0x820DFC70;
		  /* 820DFC70h */ case    6:  		/* addi R30, R30, 8 */
		/* 820DFC70h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 820DFC70h case    6:*/		return 0x820DFC74;
		  /* 820DFC74h */ case    7:  		/* cmplw CR6, R27, R11 */
		/* 820DFC74h case    7:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 820DFC74h case    7:*/		return 0x820DFC78;
		  /* 820DFC78h */ case    8:  		/* bc 12, CR6_LT, -104 */
		/* 820DFC78h case    8:*/		if ( regs.CR[6].lt ) { return 0x820DFC10;  }
		/* 820DFC78h case    8:*/		return 0x820DFC7C;
	}
	return 0x820DFC7C;
} // Block from 820DFC58h-820DFC7Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820DFC7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFC7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFC7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFC7C);
		  /* 820DFC7Ch */ case    0:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DFC7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFC7Ch case    0:*/		return 0x820DFC80;
		  /* 820DFC80h */ case    1:  		/* mr R3, R31 */
		/* 820DFC80h case    1:*/		regs.R3 = regs.R31;
		/* 820DFC80h case    1:*/		return 0x820DFC84;
		  /* 820DFC84h */ case    2:  		/* addi R11, R11, -1 */
		/* 820DFC84h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DFC84h case    2:*/		return 0x820DFC88;
		  /* 820DFC88h */ case    3:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DFC88h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFC88h case    3:*/		return 0x820DFC8C;
		  /* 820DFC8Ch */ case    4:  		/* bl -23260 */
		/* 820DFC8Ch case    4:*/		regs.LR = 0x820DFC90; return 0x820DA1B0;
		/* 820DFC8Ch case    4:*/		return 0x820DFC90;
		  /* 820DFC90h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820DFC90h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFC90h case    5:*/		return 0x820DFC94;
		  /* 820DFC94h */ case    6:  		/* bc 12, CR0_LT, 80 */
		/* 820DFC94h case    6:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFC94h case    6:*/		return 0x820DFC98;
		  /* 820DFC98h */ case    7:  		/* lis R11, -32254 */
		/* 820DFC98h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFC98h case    7:*/		return 0x820DFC9C;
		  /* 820DFC9Ch */ case    8:  		/* mr R3, R31 */
		/* 820DFC9Ch case    8:*/		regs.R3 = regs.R31;
		/* 820DFC9Ch case    8:*/		return 0x820DFCA0;
		  /* 820DFCA0h */ case    9:  		/* addi R4, R11, -30528 */
		/* 820DFCA0h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88C0);
		/* 820DFCA0h case    9:*/		return 0x820DFCA4;
		  /* 820DFCA4h */ case   10:  		/* bl -23500 */
		/* 820DFCA4h case   10:*/		regs.LR = 0x820DFCA8; return 0x820DA0D8;
		/* 820DFCA4h case   10:*/		return 0x820DFCA8;
		  /* 820DFCA8h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820DFCA8h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFCA8h case   11:*/		return 0x820DFCAC;
		  /* 820DFCACh */ case   12:  		/* bc 12, CR0_LT, 56 */
		/* 820DFCACh case   12:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFCACh case   12:*/		return 0x820DFCB0;
		  /* 820DFCB0h */ case   13:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820DFCB0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFCB0h case   13:*/		return 0x820DFCB4;
		  /* 820DFCB4h */ case   14:  		/* mr R3, R31 */
		/* 820DFCB4h case   14:*/		regs.R3 = regs.R31;
		/* 820DFCB4h case   14:*/		return 0x820DFCB8;
		  /* 820DFCB8h */ case   15:  		/* addi R11, R11, -1 */
		/* 820DFCB8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820DFCB8h case   15:*/		return 0x820DFCBC;
		  /* 820DFCBCh */ case   16:  		/* stw R11, <#[R31 + 1544]> */
		/* 820DFCBCh case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820DFCBCh case   16:*/		return 0x820DFCC0;
		  /* 820DFCC0h */ case   17:  		/* bl -23312 */
		/* 820DFCC0h case   17:*/		regs.LR = 0x820DFCC4; return 0x820DA1B0;
		/* 820DFCC0h case   17:*/		return 0x820DFCC4;
		  /* 820DFCC4h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 820DFCC4h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFCC4h case   18:*/		return 0x820DFCC8;
		  /* 820DFCC8h */ case   19:  		/* bc 12, CR0_LT, 28 */
		/* 820DFCC8h case   19:*/		if ( regs.CR[0].lt ) { return 0x820DFCE4;  }
		/* 820DFCC8h case   19:*/		return 0x820DFCCC;
		  /* 820DFCCCh */ case   20:  		/* lis R11, -32254 */
		/* 820DFCCCh case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFCCCh case   20:*/		return 0x820DFCD0;
		  /* 820DFCD0h */ case   21:  		/* mr R3, R31 */
		/* 820DFCD0h case   21:*/		regs.R3 = regs.R31;
		/* 820DFCD0h case   21:*/		return 0x820DFCD4;
		  /* 820DFCD4h */ case   22:  		/* addi R4, R11, -30524 */
		/* 820DFCD4h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88C4);
		/* 820DFCD4h case   22:*/		return 0x820DFCD8;
		  /* 820DFCD8h */ case   23:  		/* bl -23552 */
		/* 820DFCD8h case   23:*/		regs.LR = 0x820DFCDC; return 0x820DA0D8;
		/* 820DFCD8h case   23:*/		return 0x820DFCDC;
		  /* 820DFCDCh */ case   24:  		/* srawi R11, R3, 31 */
		/* 820DFCDCh case   24:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820DFCDCh case   24:*/		return 0x820DFCE0;
		  /* 820DFCE0h */ case   25:  		/* and R3, R11, R3 */
		/* 820DFCE0h case   25:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820DFCE0h case   25:*/		return 0x820DFCE4;
	}
	return 0x820DFCE4;
} // Block from 820DFC7Ch-820DFCE4h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820DFCE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFCE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFCE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFCE4);
		  /* 820DFCE4h */ case    0:  		/* addi R1, R1, 160 */
		/* 820DFCE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820DFCE4h case    0:*/		return 0x820DFCE8;
		  /* 820DFCE8h */ case    1:  		/* b -322116 */
		/* 820DFCE8h case    1:*/		return 0x820912A4;
		/* 820DFCE8h case    1:*/		return 0x820DFCEC;
		  /* 820DFCECh */ case    2:  		/* nop */
		/* 820DFCECh case    2:*/		cpu::op::nop();
		/* 820DFCECh case    2:*/		return 0x820DFCF0;
	}
	return 0x820DFCF0;
} // Block from 820DFCE4h-820DFCF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DFCF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFCF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFCF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFCF0);
		  /* 820DFCF0h */ case    0:  		/* mfspr R12, LR */
		/* 820DFCF0h case    0:*/		regs.R12 = regs.LR;
		/* 820DFCF0h case    0:*/		return 0x820DFCF4;
		  /* 820DFCF4h */ case    1:  		/* bl -322212 */
		/* 820DFCF4h case    1:*/		regs.LR = 0x820DFCF8; return 0x82091250;
		/* 820DFCF4h case    1:*/		return 0x820DFCF8;
		  /* 820DFCF8h */ case    2:  		/* stwu R1, <#[R1 - 288]> */
		/* 820DFCF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 820DFCF8h case    2:*/		return 0x820DFCFC;
		  /* 820DFCFCh */ case    3:  		/* li R11, 15 */
		/* 820DFCFCh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0xF);
		/* 820DFCFCh case    3:*/		return 0x820DFD00;
		  /* 820DFD00h */ case    4:  		/* mr R27, R4 */
		/* 820DFD00h case    4:*/		regs.R27 = regs.R4;
		/* 820DFD00h case    4:*/		return 0x820DFD04;
		  /* 820DFD04h */ case    5:  		/* mr R26, R5 */
		/* 820DFD04h case    5:*/		regs.R26 = regs.R5;
		/* 820DFD04h case    5:*/		return 0x820DFD08;
		  /* 820DFD08h */ case    6:  		/* li R7, 0 */
		/* 820DFD08h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DFD08h case    6:*/		return 0x820DFD0C;
		  /* 820DFD0Ch */ case    7:  		/* rlwimi R4, R11, 28, 0, 20 */
		/* 820DFD0Ch case    7:*/		cpu::op::rlwimi<0,28,0,20>(regs,&regs.R4,regs.R11);
		/* 820DFD0Ch case    7:*/		return 0x820DFD10;
		  /* 820DFD10h */ case    8:  		/* li R6, 64 */
		/* 820DFD10h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x40);
		/* 820DFD10h case    8:*/		return 0x820DFD14;
		  /* 820DFD14h */ case    9:  		/* addi R5, R1, 160 */
		/* 820DFD14h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DFD14h case    9:*/		return 0x820DFD18;
		  /* 820DFD18h */ case   10:  		/* mr R31, R3 */
		/* 820DFD18h case   10:*/		regs.R31 = regs.R3;
		/* 820DFD18h case   10:*/		return 0x820DFD1C;
		  /* 820DFD1Ch */ case   11:  		/* bl -22980 */
		/* 820DFD1Ch case   11:*/		regs.LR = 0x820DFD20; return 0x820DA358;
		/* 820DFD1Ch case   11:*/		return 0x820DFD20;
		  /* 820DFD20h */ case   12:  		/* li R7, 0 */
		/* 820DFD20h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820DFD20h case   12:*/		return 0x820DFD24;
		  /* 820DFD24h */ case   13:  		/* li R6, 0 */
		/* 820DFD24h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820DFD24h case   13:*/		return 0x820DFD28;
		  /* 820DFD28h */ case   14:  		/* addi R5, R1, 160 */
		/* 820DFD28h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820DFD28h case   14:*/		return 0x820DFD2C;
		  /* 820DFD2Ch */ case   15:  		/* li R4, 32 */
		/* 820DFD2Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820DFD2Ch case   15:*/		return 0x820DFD30;
		  /* 820DFD30h */ case   16:  		/* addi R3, R1, 128 */
		/* 820DFD30h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820DFD30h case   16:*/		return 0x820DFD34;
		  /* 820DFD34h */ case   17:  		/* bl -251636 */
		/* 820DFD34h case   17:*/		regs.LR = 0x820DFD38; return 0x820A2640;
		/* 820DFD34h case   17:*/		return 0x820DFD38;
		  /* 820DFD38h */ case   18:  		/* lis R11, -32254 */
		/* 820DFD38h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820DFD38h case   18:*/		return 0x820DFD3C;
		  /* 820DFD3Ch */ case   19:  		/* li R30, 0 */
		/* 820DFD3Ch case   19:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DFD3Ch case   19:*/		return 0x820DFD40;
		  /* 820DFD40h */ case   20:  		/* mr R29, R26 */
		/* 820DFD40h case   20:*/		regs.R29 = regs.R26;
		/* 820DFD40h case   20:*/		return 0x820DFD44;
		  /* 820DFD44h */ case   21:  		/* addi R28, R11, -27020 */
		/* 820DFD44h case   21:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFF9674);
		/* 820DFD44h case   21:*/		return 0x820DFD48;
		  /* 820DFD48h */ case   22:  		/* mr R3, R31 */
		/* 820DFD48h case   22:*/		regs.R3 = regs.R31;
		/* 820DFD48h case   22:*/		return 0x820DFD4C;
		  /* 820DFD4Ch */ case   23:  		/* bl -23452 */
		/* 820DFD4Ch case   23:*/		regs.LR = 0x820DFD50; return 0x820DA1B0;
		/* 820DFD4Ch case   23:*/		return 0x820DFD50;
		  /* 820DFD50h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820DFD50h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFD50h case   24:*/		return 0x820DFD54;
		  /* 820DFD54h */ case   25:  		/* bc 12, CR0_LT, 68 */
		/* 820DFD54h case   25:*/		if ( regs.CR[0].lt ) { return 0x820DFD98;  }
		/* 820DFD54h case   25:*/		return 0x820DFD58;
		  /* 820DFD58h */ case   26:  		/* mr R4, R28 */
		/* 820DFD58h case   26:*/		regs.R4 = regs.R28;
		/* 820DFD58h case   26:*/		return 0x820DFD5C;
		  /* 820DFD5Ch */ case   27:  		/* lwz R7, <#[R29]> */
		/* 820DFD5Ch case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000000) );
		/* 820DFD5Ch case   27:*/		return 0x820DFD60;
		  /* 820DFD60h */ case   28:  		/* mr R6, R30 */
		/* 820DFD60h case   28:*/		regs.R6 = regs.R30;
		/* 820DFD60h case   28:*/		return 0x820DFD64;
		  /* 820DFD64h */ case   29:  		/* addi R5, R1, 128 */
		/* 820DFD64h case   29:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820DFD64h case   29:*/		return 0x820DFD68;
		  /* 820DFD68h */ case   30:  		/* mr R3, R31 */
		/* 820DFD68h case   30:*/		regs.R3 = regs.R31;
		/* 820DFD68h case   30:*/		return 0x820DFD6C;
		  /* 820DFD6Ch */ case   31:  		/* bl -23700 */
		/* 820DFD6Ch case   31:*/		regs.LR = 0x820DFD70; return 0x820DA0D8;
		/* 820DFD6Ch case   31:*/		return 0x820DFD70;
		  /* 820DFD70h */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 820DFD70h case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFD70h case   32:*/		return 0x820DFD74;
		  /* 820DFD74h */ case   33:  		/* bc 12, CR0_LT, 36 */
		/* 820DFD74h case   33:*/		if ( regs.CR[0].lt ) { return 0x820DFD98;  }
		/* 820DFD74h case   33:*/		return 0x820DFD78;
		  /* 820DFD78h */ case   34:  		/* addi R30, R30, 1 */
		/* 820DFD78h case   34:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820DFD78h case   34:*/		return 0x820DFD7C;
		  /* 820DFD7Ch */ case   35:  		/* addi R29, R29, 4 */
		/* 820DFD7Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820DFD7Ch case   35:*/		return 0x820DFD80;
		  /* 820DFD80h */ case   36:  		/* cmplwi CR6, R30, 4 */
		/* 820DFD80h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 820DFD80h case   36:*/		return 0x820DFD84;
		  /* 820DFD84h */ case   37:  		/* bc 12, CR6_LT, -60 */
		/* 820DFD84h case   37:*/		if ( regs.CR[6].lt ) { return 0x820DFD48;  }
		/* 820DFD84h case   37:*/		return 0x820DFD88;
		  /* 820DFD88h */ case   38:  		/* mr R5, R26 */
		/* 820DFD88h case   38:*/		regs.R5 = regs.R26;
		/* 820DFD88h case   38:*/		return 0x820DFD8C;
		  /* 820DFD8Ch */ case   39:  		/* mr R4, R27 */
		/* 820DFD8Ch case   39:*/		regs.R4 = regs.R27;
		/* 820DFD8Ch case   39:*/		return 0x820DFD90;
		  /* 820DFD90h */ case   40:  		/* mr R3, R31 */
		/* 820DFD90h case   40:*/		regs.R3 = regs.R31;
		/* 820DFD90h case   40:*/		return 0x820DFD94;
		  /* 820DFD94h */ case   41:  		/* bl 92924 */
		/* 820DFD94h case   41:*/		regs.LR = 0x820DFD98; return 0x820F6890;
		/* 820DFD94h case   41:*/		return 0x820DFD98;
	}
	return 0x820DFD98;
} // Block from 820DFCF0h-820DFD98h (42 instructions)

//////////////////////////////////////////////////////
// Block at 820DFD98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFD98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFD98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFD98);
		  /* 820DFD98h */ case    0:  		/* addi R1, R1, 288 */
		/* 820DFD98h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 820DFD98h case    0:*/		return 0x820DFD9C;
		  /* 820DFD9Ch */ case    1:  		/* b -322300 */
		/* 820DFD9Ch case    1:*/		return 0x820912A0;
		/* 820DFD9Ch case    1:*/		return 0x820DFDA0;
	}
	return 0x820DFDA0;
} // Block from 820DFD98h-820DFDA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820DFDA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFDA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFDA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFDA0);
		  /* 820DFDA0h */ case    0:  		/* mfspr R12, LR */
		/* 820DFDA0h case    0:*/		regs.R12 = regs.LR;
		/* 820DFDA0h case    0:*/		return 0x820DFDA4;
		  /* 820DFDA4h */ case    1:  		/* bl -322392 */
		/* 820DFDA4h case    1:*/		regs.LR = 0x820DFDA8; return 0x8209124C;
		/* 820DFDA4h case    1:*/		return 0x820DFDA8;
		  /* 820DFDA8h */ case    2:  		/* stwu R1, <#[R1 - 336]> */
		/* 820DFDA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEB0);
		/* 820DFDA8h case    2:*/		return 0x820DFDAC;
		  /* 820DFDACh */ case    3:  		/* lwz R11, <#[R3]> */
		/* 820DFDACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820DFDACh case    3:*/		return 0x820DFDB0;
		  /* 820DFDB0h */ case    4:  		/* mr R29, R4 */
		/* 820DFDB0h case    4:*/		regs.R29 = regs.R4;
		/* 820DFDB0h case    4:*/		return 0x820DFDB4;
		  /* 820DFDB4h */ case    5:  		/* lwz R4, <#[R4 + 108]> */
		/* 820DFDB4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000006C) );
		/* 820DFDB4h case    5:*/		return 0x820DFDB8;
		  /* 820DFDB8h */ case    6:  		/* mr R31, R3 */
		/* 820DFDB8h case    6:*/		regs.R31 = regs.R3;
		/* 820DFDB8h case    6:*/		return 0x820DFDBC;
		  /* 820DFDBCh */ case    7:  		/* mr R25, R6 */
		/* 820DFDBCh case    7:*/		regs.R25 = regs.R6;
		/* 820DFDBCh case    7:*/		return 0x820DFDC0;
		  /* 820DFDC0h */ case    8:  		/* lwz R11, <#[R11 + 112]> */
		/* 820DFDC0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 820DFDC0h case    8:*/		return 0x820DFDC4;
		  /* 820DFDC4h */ case    9:  		/* mtspr CTR, R11 */
		/* 820DFDC4h case    9:*/		regs.CTR = regs.R11;
		/* 820DFDC4h case    9:*/		return 0x820DFDC8;
		  /* 820DFDC8h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 820DFDC8h case   10:*/		if ( 1 ) { regs.LR = 0x820DFDCC; return (uint32)regs.CTR; }
		/* 820DFDC8h case   10:*/		return 0x820DFDCC;
		  /* 820DFDCCh */ case   11:  		/* lwz R11, <#[R31]> */
		/* 820DFDCCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DFDCCh case   11:*/		return 0x820DFDD0;
		  /* 820DFDD0h */ case   12:  		/* mr R30, R3 */
		/* 820DFDD0h case   12:*/		regs.R30 = regs.R3;
		/* 820DFDD0h case   12:*/		return 0x820DFDD4;
		  /* 820DFDD4h */ case   13:  		/* mr R3, R31 */
		/* 820DFDD4h case   13:*/		regs.R3 = regs.R31;
		/* 820DFDD4h case   13:*/		return 0x820DFDD8;
		  /* 820DFDD8h */ case   14:  		/* lwz R4, <#[R29 + 108]> */
		/* 820DFDD8h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000006C) );
		/* 820DFDD8h case   14:*/		return 0x820DFDDC;
		  /* 820DFDDCh */ case   15:  		/* lwz R11, <#[R11 + 116]> */
		/* 820DFDDCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 820DFDDCh case   15:*/		return 0x820DFDE0;
		  /* 820DFDE0h */ case   16:  		/* mtspr CTR, R11 */
		/* 820DFDE0h case   16:*/		regs.CTR = regs.R11;
		/* 820DFDE0h case   16:*/		return 0x820DFDE4;
		  /* 820DFDE4h */ case   17:  		/* bcctrl 20, CR0_LT */
		/* 820DFDE4h case   17:*/		if ( 1 ) { regs.LR = 0x820DFDE8; return (uint32)regs.CTR; }
		/* 820DFDE4h case   17:*/		return 0x820DFDE8;
		  /* 820DFDE8h */ case   18:  		/* lwz R11, <#[R31 + 348]> */
		/* 820DFDE8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000015C) );
		/* 820DFDE8h case   18:*/		return 0x820DFDEC;
		  /* 820DFDECh */ case   19:  		/* mr R26, R3 */
		/* 820DFDECh case   19:*/		regs.R26 = regs.R3;
		/* 820DFDECh case   19:*/		return 0x820DFDF0;
		  /* 820DFDF0h */ case   20:  		/* cmpwi CR6, R11, 0 */
		/* 820DFDF0h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820DFDF0h case   20:*/		return 0x820DFDF4;
		  /* 820DFDF4h */ case   21:  		/* bc 4, CR6_EQ, 1144 */
		/* 820DFDF4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x820E026C;  }
		/* 820DFDF4h case   21:*/		return 0x820DFDF8;
		  /* 820DFDF8h */ case   22:  		/* cmplwi CR6, R30, 18 */
		/* 820DFDF8h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000012);
		/* 820DFDF8h case   22:*/		return 0x820DFDFC;
		  /* 820DFDFCh */ case   23:  		/* stw R11, <#[R1 + 116]> */
		/* 820DFDFCh case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820DFDFCh case   23:*/		return 0x820DFE00;
		  /* 820DFE00h */ case   24:  		/* bc 12, CR6_GT, 1652 */
		/* 820DFE00h case   24:*/		if ( regs.CR[6].gt ) { return 0x820E0474;  }
		/* 820DFE00h case   24:*/		return 0x820DFE04;
		  /* 820DFE04h */ case   25:  		/* lis R12, -32254 */
		/* 820DFE04h case   25:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8202);
		/* 820DFE04h case   25:*/		return 0x820DFE08;
		  /* 820DFE08h */ case   26:  		/* rlwinm R0, R30, 1, 0, 30 */
		/* 820DFE08h case   26:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R30);
		/* 820DFE08h case   26:*/		return 0x820DFE0C;
		  /* 820DFE0Ch */ case   27:  		/* addi R12, R12, -31968 */
		/* 820DFE0Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF8320);
		/* 820DFE0Ch case   27:*/		return 0x820DFE10;
		  /* 820DFE10h */ case   28:  		/* lhzx R0, <#[R12 + R0]> */
		/* 820DFE10h case   28:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 820DFE10h case   28:*/		return 0x820DFE14;
		  /* 820DFE14h */ case   29:  		/* lis R12, -32242 */
		/* 820DFE14h case   29:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF820E);
		/* 820DFE14h case   29:*/		return 0x820DFE18;
		  /* 820DFE18h */ case   30:  		/* addi R12, R12, -468 */
		/* 820DFE18h case   30:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFFE2C);
		/* 820DFE18h case   30:*/		return 0x820DFE1C;
		  /* 820DFE1Ch */ case   31:  		/* ori R0, R0, 0 */
		/* 820DFE1Ch case   31:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 820DFE1Ch case   31:*/		return 0x820DFE20;
		  /* 820DFE20h */ case   32:  		/* add R12, R12, R0 */
		/* 820DFE20h case   32:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 820DFE20h case   32:*/		return 0x820DFE24;
		  /* 820DFE24h */ case   33:  		/* mtspr CTR, R12 */
		/* 820DFE24h case   33:*/		regs.CTR = regs.R12;
		/* 820DFE24h case   33:*/		return 0x820DFE28;
		  /* 820DFE28h */ case   34:  		/* bcctr 20, CR0_LT */
		/* 820DFE28h case   34:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820DFE28h case   34:*/		return 0x820DFE2C;
		  /* 820DFE2Ch */ case   35:  		/* li R30, 0 */
		/* 820DFE2Ch case   35:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820DFE2Ch case   35:*/		return 0x820DFE30;
		  /* 820DFE30h */ case   36:  		/* b 120 */
		/* 820DFE30h case   36:*/		return 0x820DFEA8;
		/* 820DFE30h case   36:*/		return 0x820DFE34;
		  /* 820DFE34h */ case   37:  		/* li R30, 1 */
		/* 820DFE34h case   37:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 820DFE34h case   37:*/		return 0x820DFE38;
		  /* 820DFE38h */ case   38:  		/* b 112 */
		/* 820DFE38h case   38:*/		return 0x820DFEA8;
		/* 820DFE38h case   38:*/		return 0x820DFE3C;
		  /* 820DFE3Ch */ case   39:  		/* li R30, 2 */
		/* 820DFE3Ch case   39:*/		cpu::op::li<0>(regs,&regs.R30,0x2);
		/* 820DFE3Ch case   39:*/		return 0x820DFE40;
		  /* 820DFE40h */ case   40:  		/* b 104 */
		/* 820DFE40h case   40:*/		return 0x820DFEA8;
		/* 820DFE40h case   40:*/		return 0x820DFE44;
		  /* 820DFE44h */ case   41:  		/* li R30, 3 */
		/* 820DFE44h case   41:*/		cpu::op::li<0>(regs,&regs.R30,0x3);
		/* 820DFE44h case   41:*/		return 0x820DFE48;
		  /* 820DFE48h */ case   42:  		/* b 96 */
		/* 820DFE48h case   42:*/		return 0x820DFEA8;
		/* 820DFE48h case   42:*/		return 0x820DFE4C;
		  /* 820DFE4Ch */ case   43:  		/* li R30, 4 */
		/* 820DFE4Ch case   43:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 820DFE4Ch case   43:*/		return 0x820DFE50;
		  /* 820DFE50h */ case   44:  		/* b 88 */
		/* 820DFE50h case   44:*/		return 0x820DFEA8;
		/* 820DFE50h case   44:*/		return 0x820DFE54;
		  /* 820DFE54h */ case   45:  		/* li R30, 5 */
		/* 820DFE54h case   45:*/		cpu::op::li<0>(regs,&regs.R30,0x5);
		/* 820DFE54h case   45:*/		return 0x820DFE58;
		  /* 820DFE58h */ case   46:  		/* b 80 */
		/* 820DFE58h case   46:*/		return 0x820DFEA8;
		/* 820DFE58h case   46:*/		return 0x820DFE5C;
		  /* 820DFE5Ch */ case   47:  		/* li R30, 6 */
		/* 820DFE5Ch case   47:*/		cpu::op::li<0>(regs,&regs.R30,0x6);
		/* 820DFE5Ch case   47:*/		return 0x820DFE60;
		  /* 820DFE60h */ case   48:  		/* b 72 */
		/* 820DFE60h case   48:*/		return 0x820DFEA8;
		/* 820DFE60h case   48:*/		return 0x820DFE64;
		  /* 820DFE64h */ case   49:  		/* li R30, 7 */
		/* 820DFE64h case   49:*/		cpu::op::li<0>(regs,&regs.R30,0x7);
		/* 820DFE64h case   49:*/		return 0x820DFE68;
		  /* 820DFE68h */ case   50:  		/* b 64 */
		/* 820DFE68h case   50:*/		return 0x820DFEA8;
		/* 820DFE68h case   50:*/		return 0x820DFE6C;
		  /* 820DFE6Ch */ case   51:  		/* li R30, 8 */
		/* 820DFE6Ch case   51:*/		cpu::op::li<0>(regs,&regs.R30,0x8);
		/* 820DFE6Ch case   51:*/		return 0x820DFE70;
		  /* 820DFE70h */ case   52:  		/* b 56 */
		/* 820DFE70h case   52:*/		return 0x820DFEA8;
		/* 820DFE70h case   52:*/		return 0x820DFE74;
		  /* 820DFE74h */ case   53:  		/* li R30, 9 */
		/* 820DFE74h case   53:*/		cpu::op::li<0>(regs,&regs.R30,0x9);
		/* 820DFE74h case   53:*/		return 0x820DFE78;
		  /* 820DFE78h */ case   54:  		/* b 48 */
		/* 820DFE78h case   54:*/		return 0x820DFEA8;
		/* 820DFE78h case   54:*/		return 0x820DFE7C;
		  /* 820DFE7Ch */ case   55:  		/* li R30, 10 */
		/* 820DFE7Ch case   55:*/		cpu::op::li<0>(regs,&regs.R30,0xA);
		/* 820DFE7Ch case   55:*/		return 0x820DFE80;
		  /* 820DFE80h */ case   56:  		/* b 40 */
		/* 820DFE80h case   56:*/		return 0x820DFEA8;
		/* 820DFE80h case   56:*/		return 0x820DFE84;
		  /* 820DFE84h */ case   57:  		/* li R30, 11 */
		/* 820DFE84h case   57:*/		cpu::op::li<0>(regs,&regs.R30,0xB);
		/* 820DFE84h case   57:*/		return 0x820DFE88;
		  /* 820DFE88h */ case   58:  		/* b 32 */
		/* 820DFE88h case   58:*/		return 0x820DFEA8;
		/* 820DFE88h case   58:*/		return 0x820DFE8C;
		  /* 820DFE8Ch */ case   59:  		/* li R30, 12 */
		/* 820DFE8Ch case   59:*/		cpu::op::li<0>(regs,&regs.R30,0xC);
		/* 820DFE8Ch case   59:*/		return 0x820DFE90;
		  /* 820DFE90h */ case   60:  		/* b 24 */
		/* 820DFE90h case   60:*/		return 0x820DFEA8;
		/* 820DFE90h case   60:*/		return 0x820DFE94;
		  /* 820DFE94h */ case   61:  		/* li R30, 13 */
		/* 820DFE94h case   61:*/		cpu::op::li<0>(regs,&regs.R30,0xD);
		/* 820DFE94h case   61:*/		return 0x820DFE98;
		  /* 820DFE98h */ case   62:  		/* b 16 */
		/* 820DFE98h case   62:*/		return 0x820DFEA8;
		/* 820DFE98h case   62:*/		return 0x820DFE9C;
		  /* 820DFE9Ch */ case   63:  		/* li R11, 1 */
		/* 820DFE9Ch case   63:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820DFE9Ch case   63:*/		return 0x820DFEA0;
		  /* 820DFEA0h */ case   64:  		/* stw R11, <#[R1 + 116]> */
		/* 820DFEA0h case   64:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820DFEA0h case   64:*/		return 0x820DFEA4;
		  /* 820DFEA4h */ case   65:  		/* lis R30, -32768 */
		/* 820DFEA4h case   65:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 820DFEA4h case   65:*/		return 0x820DFEA8;
	}
	return 0x820DFEA8;
} // Block from 820DFDA0h-820DFEA8h (66 instructions)

//////////////////////////////////////////////////////
// Block at 820DFEA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFEA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFEA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFEA8);
		  /* 820DFEA8h */ case    0:  		/* lwz R10, <#[R29 + 4]> */
		/* 820DFEA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 820DFEA8h case    0:*/		return 0x820DFEAC;
		  /* 820DFEACh */ case    1:  		/* addi R6, R1, 120 */
		/* 820DFEACh case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x78);
		/* 820DFEACh case    1:*/		return 0x820DFEB0;
		  /* 820DFEB0h */ case    2:  		/* lwz R9, <#[R31 + 16]> */
		/* 820DFEB0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 820DFEB0h case    2:*/		return 0x820DFEB4;
		  /* 820DFEB4h */ case    3:  		/* addi R5, R1, 124 */
		/* 820DFEB4h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x7C);
		/* 820DFEB4h case    3:*/		return 0x820DFEB8;
		  /* 820DFEB8h */ case    4:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820DFEB8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820DFEB8h case    4:*/		return 0x820DFEBC;
		  /* 820DFEBCh */ case    5:  		/* mr R4, R29 */
		/* 820DFEBCh case    5:*/		regs.R4 = regs.R29;
		/* 820DFEBCh case    5:*/		return 0x820DFEC0;
		  /* 820DFEC0h */ case    6:  		/* lwzx R27, <#[R9 + R10]> */
		/* 820DFEC0h case    6:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820DFEC0h case    6:*/		return 0x820DFEC4;
		  /* 820DFEC4h */ case    7:  		/* lwz R10, <#[R27 + 4]> */
		/* 820DFEC4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000004) );
		/* 820DFEC4h case    7:*/		return 0x820DFEC8;
		  /* 820DFEC8h */ case    8:  		/* rlwinm. R10, R10, 0, 27, 27 */
		/* 820DFEC8h case    8:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R10);
		/* 820DFEC8h case    8:*/		return 0x820DFECC;
		  /* 820DFECCh */ case    9:  		/* bc 12, CR0_EQ, 56 */
		/* 820DFECCh case    9:*/		if ( regs.CR[0].eq ) { return 0x820DFF04;  }
		/* 820DFECCh case    9:*/		return 0x820DFED0;
	}
	return 0x820DFED0;
} // Block from 820DFEA8h-820DFED0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820DFED0h
// Function '?EmitEndGenericLoop@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFED0);
		  /* 820DFED0h */ case    0:  		/* lwz R10, <#[R31 + 112]> */
		/* 820DFED0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000070) );
		/* 820DFED0h case    0:*/		return 0x820DFED4;
		  /* 820DFED4h */ case    1:  		/* mr R3, R31 */
		/* 820DFED4h case    1:*/		regs.R3 = regs.R31;
		/* 820DFED4h case    1:*/		return 0x820DFED8;
		  /* 820DFED8h */ case    2:  		/* lwz R9, <#[R31]> */
		/* 820DFED8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 820DFED8h case    2:*/		return 0x820DFEDC;
		  /* 820DFEDCh */ case    3:  		/* rlwinm R10, R10, 7, 0, 24 */
		/* 820DFEDCh case    3:*/		cpu::op::rlwinm<0,7,0,24>(regs,&regs.R10,regs.R10);
		/* 820DFEDCh case    3:*/		return 0x820DFEE0;
		  /* 820DFEE0h */ case    4:  		/* srawi R10, R10, 31 */
		/* 820DFEE0h case    4:*/		cpu::op::srawi<0,31>(regs,&regs.R10,regs.R10);
		/* 820DFEE0h case    4:*/		return 0x820DFEE4;
		  /* 820DFEE4h */ case    5:  		/* or R11, R10, R11 */
		/* 820DFEE4h case    5:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820DFEE4h case    5:*/		return 0x820DFEE8;
		  /* 820DFEE8h */ case    6:  		/* lwz R10, <#[R9 + 348]> */
		/* 820DFEE8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x0000015C) );
		/* 820DFEE8h case    6:*/		return 0x820DFEEC;
		  /* 820DFEECh */ case    7:  		/* stw R11, <#[R1 + 116]> */
		/* 820DFEECh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820DFEECh case    7:*/		return 0x820DFEF0;
		  /* 820DFEF0h */ case    8:  		/* mtspr CTR, R10 */
		/* 820DFEF0h case    8:*/		regs.CTR = regs.R10;
		/* 820DFEF0h case    8:*/		return 0x820DFEF4;
		  /* 820DFEF4h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 820DFEF4h case    9:*/		if ( 1 ) { regs.LR = 0x820DFEF8; return (uint32)regs.CTR; }
		/* 820DFEF4h case    9:*/		return 0x820DFEF8;
		  /* 820DFEF8h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820DFEF8h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFEF8h case   10:*/		return 0x820DFEFC;
		  /* 820DFEFCh */ case   11:  		/* bc 4, CR0_LT, 48 */
		/* 820DFEFCh case   11:*/		if ( !regs.CR[0].lt ) { return 0x820DFF2C;  }
		/* 820DFEFCh case   11:*/		return 0x820DFF00;
		  /* 820DFF00h */ case   12:  		/* b 880 */
		/* 820DFF00h case   12:*/		return 0x820E0270;
		/* 820DFF00h case   12:*/		return 0x820DFF04;
	}
	return 0x820DFF04;
} // Block from 820DFED0h-820DFF04h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820DFF04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFF04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFF04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFF04);
		  /* 820DFF04h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820DFF04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DFF04h case    0:*/		return 0x820DFF08;
		  /* 820DFF08h */ case    1:  		/* addi R7, R1, 116 */
		/* 820DFF08h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x74);
		/* 820DFF08h case    1:*/		return 0x820DFF0C;
		  /* 820DFF0Ch */ case    2:  		/* mr R3, R31 */
		/* 820DFF0Ch case    2:*/		regs.R3 = regs.R31;
		/* 820DFF0Ch case    2:*/		return 0x820DFF10;
		  /* 820DFF10h */ case    3:  		/* lwz R11, <#[R11 + 344]> */
		/* 820DFF10h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000158) );
		/* 820DFF10h case    3:*/		return 0x820DFF14;
		  /* 820DFF14h */ case    4:  		/* mtspr CTR, R11 */
		/* 820DFF14h case    4:*/		regs.CTR = regs.R11;
		/* 820DFF14h case    4:*/		return 0x820DFF18;
		  /* 820DFF18h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 820DFF18h case    5:*/		if ( 1 ) { regs.LR = 0x820DFF1C; return (uint32)regs.CTR; }
		/* 820DFF18h case    5:*/		return 0x820DFF1C;
		  /* 820DFF1Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820DFF1Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820DFF1Ch case    6:*/		return 0x820DFF20;
		  /* 820DFF20h */ case    7:  		/* bc 12, CR0_LT, 848 */
		/* 820DFF20h case    7:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820DFF20h case    7:*/		return 0x820DFF24;
		  /* 820DFF24h */ case    8:  		/* li R11, 0 */
		/* 820DFF24h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820DFF24h case    8:*/		return 0x820DFF28;
	}
	return 0x820DFF28;
} // Block from 820DFF04h-820DFF28h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820DFF28h
// Function '?EmitBeginShaderLoop@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFF28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFF28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFF28);
		  /* 820DFF28h */ case    0:  		/* stw R11, <#[R1 + 116]> */
		/* 820DFF28h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820DFF28h case    0:*/		return 0x820DFF2C;
	}
	return 0x820DFF2C;
} // Block from 820DFF28h-820DFF2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820DFF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFF2C);
		  /* 820DFF2Ch */ case    0:  		/* addi R10, R1, 160 */
		/* 820DFF2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 820DFF2Ch case    0:*/		return 0x820DFF30;
		  /* 820DFF30h */ case    1:  		/* lwz R8, <#[R31 + 8]> */
		/* 820DFF30h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 820DFF30h case    1:*/		return 0x820DFF34;
		  /* 820DFF34h */ case    2:  		/* li R28, -1 */
		/* 820DFF34h case    2:*/		cpu::op::li<0>(regs,&regs.R28,0xFFFFFFFF);
		/* 820DFF34h case    2:*/		return 0x820DFF38;
		  /* 820DFF38h */ case    3:  		/* li R5, 0 */
		/* 820DFF38h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820DFF38h case    3:*/		return 0x820DFF3C;
		  /* 820DFF3Ch */ case    4:  		/* mr R11, R28 */
		/* 820DFF3Ch case    4:*/		regs.R11 = regs.R28;
		/* 820DFF3Ch case    4:*/		return 0x820DFF40;
		  /* 820DFF40h */ case    5:  		/* li R9, 0 */
		/* 820DFF40h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820DFF40h case    5:*/		return 0x820DFF44;
		  /* 820DFF44h */ case    6:  		/* stw R28, <#[R10]> */
		/* 820DFF44h case    6:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + 0x00000000) );
		/* 820DFF44h case    6:*/		return 0x820DFF48;
		  /* 820DFF48h */ case    7:  		/* cmplwi CR6, R8, 0 */
		/* 820DFF48h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 820DFF48h case    7:*/		return 0x820DFF4C;
		  /* 820DFF4Ch */ case    8:  		/* stw R28, <#[R10 + 4]> */
		/* 820DFF4Ch case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + 0x00000004) );
		/* 820DFF4Ch case    8:*/		return 0x820DFF50;
		  /* 820DFF50h */ case    9:  		/* stw R28, <#[R10 + 8]> */
		/* 820DFF50h case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + 0x00000008) );
		/* 820DFF50h case    9:*/		return 0x820DFF54;
		  /* 820DFF54h */ case   10:  		/* stw R28, <#[R10 + 12]> */
		/* 820DFF54h case   10:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + 0x0000000C) );
		/* 820DFF54h case   10:*/		return 0x820DFF58;
		  /* 820DFF58h */ case   11:  		/* bc 4, CR6_GT, 100 */
		/* 820DFF58h case   11:*/		if ( !regs.CR[6].gt ) { return 0x820DFFBC;  }
		/* 820DFF58h case   11:*/		return 0x820DFF5C;
		  /* 820DFF5Ch */ case   12:  		/* lwz R8, <#[R31 + 20]> */
		/* 820DFF5Ch case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 820DFF5Ch case   12:*/		return 0x820DFF60;
		  /* 820DFF60h */ case   13:  		/* li R10, 0 */
		/* 820DFF60h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820DFF60h case   13:*/		return 0x820DFF64;
		  /* 820DFF64h */ case   14:  		/* lwz R7, <#[R29 + 4]> */
		/* 820DFF64h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000004) );
		/* 820DFF64h case   14:*/		return 0x820DFF68;
		  /* 820DFF68h */ case   15:  		/* lwz R6, <#[R31 + 8]> */
		/* 820DFF68h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000008) );
		/* 820DFF68h case   15:*/		return 0x820DFF6C;
		  /* 820DFF6Ch */ case   16:  		/* lwzx R11, <#[R10 + R8]> */
		/* 820DFF6Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820DFF6Ch case   16:*/		return 0x820DFF70;
		  /* 820DFF70h */ case   17:  		/* lwz R4, <#[R11 + 4]> */
		/* 820DFF70h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 820DFF70h case   17:*/		return 0x820DFF74;
		  /* 820DFF74h */ case   18:  		/* cmplw CR6, R7, R4 */
		/* 820DFF74h case   18:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R4);
		/* 820DFF74h case   18:*/		return 0x820DFF78;
		  /* 820DFF78h */ case   19:  		/* bc 4, CR6_EQ, 52 */
		/* 820DFF78h case   19:*/		if ( !regs.CR[6].eq ) { return 0x820DFFAC;  }
		/* 820DFF78h case   19:*/		return 0x820DFF7C;
		  /* 820DFF7Ch */ case   20:  		/* lwz R4, <#[R29 + 8]> */
		/* 820DFF7Ch case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000008) );
		/* 820DFF7Ch case   20:*/		return 0x820DFF80;
		  /* 820DFF80h */ case   21:  		/* lwz R3, <#[R11 + 8]> */
		/* 820DFF80h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 820DFF80h case   21:*/		return 0x820DFF84;
		  /* 820DFF84h */ case   22:  		/* cmplw CR6, R4, R3 */
		/* 820DFF84h case   22:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 820DFF84h case   22:*/		return 0x820DFF88;
		  /* 820DFF88h */ case   23:  		/* bc 4, CR6_EQ, 36 */
		/* 820DFF88h case   23:*/		if ( !regs.CR[6].eq ) { return 0x820DFFAC;  }
		/* 820DFF88h case   23:*/		return 0x820DFF8C;
		  /* 820DFF8Ch */ case   24:  		/* lwz R4, <#[R29 + 12]> */
		/* 820DFF8Ch case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000000C) );
		/* 820DFF8Ch case   24:*/		return 0x820DFF90;
		  /* 820DFF90h */ case   25:  		/* lwz R3, <#[R11 + 12]> */
		/* 820DFF90h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 820DFF90h case   25:*/		return 0x820DFF94;
		  /* 820DFF94h */ case   26:  		/* cmplw CR6, R4, R3 */
		/* 820DFF94h case   26:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 820DFF94h case   26:*/		return 0x820DFF98;
		  /* 820DFF98h */ case   27:  		/* bc 4, CR6_EQ, 20 */
		/* 820DFF98h case   27:*/		if ( !regs.CR[6].eq ) { return 0x820DFFAC;  }
		/* 820DFF98h case   27:*/		return 0x820DFF9C;
		  /* 820DFF9Ch */ case   28:  		/* lwz R11, <#[R11 + 16]> */
		/* 820DFF9Ch case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820DFF9Ch case   28:*/		return 0x820DFFA0;
		  /* 820DFFA0h */ case   29:  		/* addi R4, R1, 160 */
		/* 820DFFA0h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820DFFA0h case   29:*/		return 0x820DFFA4;
		  /* 820DFFA4h */ case   30:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820DFFA4h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820DFFA4h case   30:*/		return 0x820DFFA8;
		  /* 820DFFA8h */ case   31:  		/* stwx R9, <#[R11 + R4]> */
		/* 820DFFA8h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820DFFA8h case   31:*/		return 0x820DFFAC;
	}
	return 0x820DFFAC;
} // Block from 820DFF2Ch-820DFFACh (32 instructions)

//////////////////////////////////////////////////////
// Block at 820DFFACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFFAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFFAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFFAC);
		  /* 820DFFACh */ case    0:  		/* addi R9, R9, 1 */
		/* 820DFFACh case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820DFFACh case    0:*/		return 0x820DFFB0;
		  /* 820DFFB0h */ case    1:  		/* addi R10, R10, 4 */
		/* 820DFFB0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820DFFB0h case    1:*/		return 0x820DFFB4;
		  /* 820DFFB4h */ case    2:  		/* cmplw CR6, R9, R6 */
		/* 820DFFB4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 820DFFB4h case    2:*/		return 0x820DFFB8;
		  /* 820DFFB8h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 820DFFB8h case    3:*/		if ( regs.CR[6].lt ) { return 0x820DFF6C;  }
		/* 820DFFB8h case    3:*/		return 0x820DFFBC;
	}
	return 0x820DFFBC;
} // Block from 820DFFACh-820DFFBCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820DFFBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFFBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFFBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFFBC);
		  /* 820DFFBCh */ case    0:  		/* li R11, 4 */
		/* 820DFFBCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820DFFBCh case    0:*/		return 0x820DFFC0;
		  /* 820DFFC0h */ case    1:  		/* addi R10, R1, 156 */
		/* 820DFFC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 820DFFC0h case    1:*/		return 0x820DFFC4;
		  /* 820DFFC4h */ case    2:  		/* addi R9, R1, 160 */
		/* 820DFFC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 820DFFC4h case    2:*/		return 0x820DFFC8;
	}
	return 0x820DFFC8;
} // Block from 820DFFBCh-820DFFC8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820DFFC8h
// Function '?EmitBeginStreamLoop@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFFC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFFC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFFC8);
		  /* 820DFFC8h */ case    0:  		/* mtspr CTR, R11 */
		/* 820DFFC8h case    0:*/		regs.CTR = regs.R11;
		/* 820DFFC8h case    0:*/		return 0x820DFFCC;
		  /* 820DFFCCh */ case    1:  		/* lwz R11, <#[R9]> */
		/* 820DFFCCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 820DFFCCh case    1:*/		return 0x820DFFD0;
		  /* 820DFFD0h */ case    2:  		/* cmpwi CR6, R11, -1 */
		/* 820DFFD0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820DFFD0h case    2:*/		return 0x820DFFD4;
		  /* 820DFFD4h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 820DFFD4h case    3:*/		if ( regs.CR[6].eq ) { return 0x820DFFE0;  }
		/* 820DFFD4h case    3:*/		return 0x820DFFD8;
		  /* 820DFFD8h */ case    4:  		/* stwu R11, <#[R10 + 4]> */
		/* 820DFFD8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820DFFD8h case    4:*/		return 0x820DFFDC;
		  /* 820DFFDCh */ case    5:  		/* addi R5, R5, 1 */
		/* 820DFFDCh case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820DFFDCh case    5:*/		return 0x820DFFE0;
	}
	return 0x820DFFE0;
} // Block from 820DFFC8h-820DFFE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820DFFE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820DFFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820DFFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820DFFE0);
		  /* 820DFFE0h */ case    0:  		/* addi R9, R9, 4 */
		/* 820DFFE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820DFFE0h case    0:*/		return 0x820DFFE4;
		  /* 820DFFE4h */ case    1:  		/* bc 16, CR0_LT, -24 */
		/* 820DFFE4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820DFFCC;  }
		/* 820DFFE4h case    1:*/		return 0x820DFFE8;
		  /* 820DFFE8h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 820DFFE8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820DFFE8h case    2:*/		return 0x820DFFEC;
		  /* 820DFFECh */ case    3:  		/* addi R6, R1, 112 */
		/* 820DFFECh case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 820DFFECh case    3:*/		return 0x820DFFF0;
		  /* 820DFFF0h */ case    4:  		/* addi R4, R1, 160 */
		/* 820DFFF0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820DFFF0h case    4:*/		return 0x820DFFF4;
		  /* 820DFFF4h */ case    5:  		/* lwz R7, <#[R1 + 116]> */
		/* 820DFFF4h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000074) );
		/* 820DFFF4h case    5:*/		return 0x820DFFF8;
		  /* 820DFFF8h */ case    6:  		/* mr R3, R31 */
		/* 820DFFF8h case    6:*/		regs.R3 = regs.R31;
		/* 820DFFF8h case    6:*/		return 0x820DFFFC;
		  /* 820DFFFCh */ case    7:  		/* lwz R11, <#[R11 + 324]> */
		/* 820DFFFCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000144) );
		/* 820DFFFCh case    7:*/		return 0x820E0000;
		  /* 820E0000h */ case    8:  		/* mtspr CTR, R11 */
		/* 820E0000h case    8:*/		regs.CTR = regs.R11;
		/* 820E0000h case    8:*/		return 0x820E0004;
		  /* 820E0004h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 820E0004h case    9:*/		if ( 1 ) { regs.LR = 0x820E0008; return (uint32)regs.CTR; }
		/* 820E0004h case    9:*/		return 0x820E0008;
		  /* 820E0008h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820E0008h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0008h case   10:*/		return 0x820E000C;
		  /* 820E000Ch */ case   11:  		/* bc 12, CR0_LT, 612 */
		/* 820E000Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E000Ch case   11:*/		return 0x820E0010;
		  /* 820E0010h */ case   12:  		/* lwz R11, <#[R31]> */
		/* 820E0010h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E0010h case   12:*/		return 0x820E0014;
		  /* 820E0014h */ case   13:  		/* li R5, 0 */
		/* 820E0014h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E0014h case   13:*/		return 0x820E0018;
		  /* 820E0018h */ case   14:  		/* li R4, 4 */
		/* 820E0018h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 820E0018h case   14:*/		return 0x820E001C;
		  /* 820E001Ch */ case   15:  		/* mr R3, R31 */
		/* 820E001Ch case   15:*/		regs.R3 = regs.R31;
		/* 820E001Ch case   15:*/		return 0x820E0020;
		  /* 820E0020h */ case   16:  		/* lwz R11, <#[R11 + 108]> */
		/* 820E0020h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006C) );
		/* 820E0020h case   16:*/		return 0x820E0024;
		  /* 820E0024h */ case   17:  		/* mtspr CTR, R11 */
		/* 820E0024h case   17:*/		regs.CTR = regs.R11;
		/* 820E0024h case   17:*/		return 0x820E0028;
		  /* 820E0028h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 820E0028h case   18:*/		if ( 1 ) { regs.LR = 0x820E002C; return (uint32)regs.CTR; }
		/* 820E0028h case   18:*/		return 0x820E002C;
		  /* 820E002Ch */ case   19:  		/* rlwinm R11, R30, 0, 1, 31 */
		/* 820E002Ch case   19:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R11,regs.R30);
		/* 820E002Ch case   19:*/		return 0x820E0030;
		  /* 820E0030h */ case   20:  		/* cmplw CR6, R11, R3 */
		/* 820E0030h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R3);
		/* 820E0030h case   20:*/		return 0x820E0034;
		  /* 820E0034h */ case   21:  		/* lwz R11, <#[R1 + 112]> */
		/* 820E0034h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820E0034h case   21:*/		return 0x820E0038;
		  /* 820E0038h */ case   22:  		/* bc 4, CR6_EQ, 8 */
		/* 820E0038h case   22:*/		if ( !regs.CR[6].eq ) { return 0x820E0040;  }
		/* 820E0038h case   22:*/		return 0x820E003C;
		  /* 820E003Ch */ case   23:  		/* oris R11, R11, 15 */
		/* 820E003Ch case   23:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xF);
		/* 820E003Ch case   23:*/		return 0x820E0040;
	}
	return 0x820E0040;
} // Block from 820DFFE0h-820E0040h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E0040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0040);
		  /* 820E0040h */ case    0:  		/* lwz R10, <#[R31 + 112]> */
		/* 820E0040h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000070) );
		/* 820E0040h case    0:*/		return 0x820E0044;
		  /* 820E0044h */ case    1:  		/* rlwinm R11, R11, 0, 12, 10 */
		/* 820E0044h case    1:*/		cpu::op::rlwinm<0,0,12,10>(regs,&regs.R11,regs.R11);
		/* 820E0044h case    1:*/		return 0x820E0048;
		  /* 820E0048h */ case    2:  		/* rlwinm. R10, R10, 0, 7, 7 */
		/* 820E0048h case    2:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R10,regs.R10);
		/* 820E0048h case    2:*/		return 0x820E004C;
		  /* 820E004Ch */ case    3:  		/* stw R11, <#[R1 + 112]> */
		/* 820E004Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820E004Ch case    3:*/		return 0x820E0050;
	}
	return 0x820E0050;
} // Block from 820E0040h-820E0050h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E0050h
// Function '?EmitBeginFetchLoop@C30SWProgram@D3DXShader@@MAAJIPAPAVCArgument@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0050);
		  /* 820E0050h */ case    0:  		/* bc 4, CR0_EQ, 36 */
		/* 820E0050h case    0:*/		if ( !regs.CR[0].eq ) { return 0x820E0074;  }
		/* 820E0050h case    0:*/		return 0x820E0054;
		  /* 820E0054h */ case    1:  		/* lwz R10, <#[R31 + 204]> */
		/* 820E0054h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000000CC) );
		/* 820E0054h case    1:*/		return 0x820E0058;
		  /* 820E0058h */ case    2:  		/* rlwinm. R10, R10, 0, 26, 26 */
		/* 820E0058h case    2:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R10);
		/* 820E0058h case    2:*/		return 0x820E005C;
		  /* 820E005Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 820E005Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x820E006C;  }
		/* 820E005Ch case    3:*/		return 0x820E0060;
		  /* 820E0060h */ case    4:  		/* lwz R10, <#[R29]> */
		/* 820E0060h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 820E0060h case    4:*/		return 0x820E0064;
		  /* 820E0064h */ case    5:  		/* rlwinm. R10, R10, 0, 6, 6 */
		/* 820E0064h case    5:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R10,regs.R10);
		/* 820E0064h case    5:*/		return 0x820E0068;
		  /* 820E0068h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 820E0068h case    6:*/		if ( regs.CR[0].eq ) { return 0x820E0074;  }
		/* 820E0068h case    6:*/		return 0x820E006C;
	}
	return 0x820E006C;
} // Block from 820E0050h-820E006Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E006Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E006C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E006C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E006C);
		  /* 820E006Ch */ case    0:  		/* oris R11, R11, 32 */
		/* 820E006Ch case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x20);
		/* 820E006Ch case    0:*/		return 0x820E0070;
		  /* 820E0070h */ case    1:  		/* stw R11, <#[R1 + 112]> */
		/* 820E0070h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820E0070h case    1:*/		return 0x820E0074;
	}
	return 0x820E0074;
} // Block from 820E006Ch-820E0074h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E0074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0074);
		  /* 820E0074h */ case    0:  		/* lwz R11, <#[R1 + 120]> */
		/* 820E0074h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E0074h case    0:*/		return 0x820E0078;
		  /* 820E0078h */ case    1:  		/* lis R10, -128 */
		/* 820E0078h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFF80);
		/* 820E0078h case    1:*/		return 0x820E007C;
		  /* 820E007Ch */ case    2:  		/* lwz R7, <#[R1 + 124]> */
		/* 820E007Ch case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E007Ch case    2:*/		return 0x820E0080;
		  /* 820E0080h */ case    3:  		/* lis R9, -32217 */
		/* 820E0080h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 820E0080h case    3:*/		return 0x820E0084;
		  /* 820E0084h */ case    4:  		/* rlwimi R10, R11, 20, 9, 11 */
		/* 820E0084h case    4:*/		cpu::op::rlwimi<0,20,9,11>(regs,&regs.R10,regs.R11);
		/* 820E0084h case    4:*/		return 0x820E0088;
		  /* 820E0088h */ case    5:  		/* rlwinm R8, R11, 0, 27, 28 */
		/* 820E0088h case    5:*/		cpu::op::rlwinm<0,0,27,28>(regs,&regs.R8,regs.R11);
		/* 820E0088h case    5:*/		return 0x820E008C;
		  /* 820E008Ch */ case    6:  		/* rlwinm R11, R7, 0, 21, 31 */
		/* 820E008Ch case    6:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R11,regs.R7);
		/* 820E008Ch case    6:*/		return 0x820E0090;
		  /* 820E0090h */ case    7:  		/* or R10, R10, R8 */
		/* 820E0090h case    7:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 820E0090h case    7:*/		return 0x820E0094;
		  /* 820E0094h */ case    8:  		/* addi R9, R9, 13752 */
		/* 820E0094h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x35B8);
		/* 820E0094h case    8:*/		return 0x820E0098;
		  /* 820E0098h */ case    9:  		/* rlwinm R10, R10, 8, 0, 23 */
		/* 820E0098h case    9:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R10);
		/* 820E0098h case    9:*/		return 0x820E009C;
		  /* 820E009Ch */ case   10:  		/* lis R8, -32254 */
		/* 820E009Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820E009Ch case   10:*/		return 0x820E00A0;
		  /* 820E00A0h */ case   11:  		/* or R11, R10, R11 */
		/* 820E00A0h case   11:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820E00A0h case   11:*/		return 0x820E00A4;
		  /* 820E00A4h */ case   12:  		/* addi R5, R8, -26676 */
		/* 820E00A4h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R8,0xFFFF97CC);
		/* 820E00A4h case   12:*/		return 0x820E00A8;
		  /* 820E00A8h */ case   13:  		/* mr R10, R11 */
		/* 820E00A8h case   13:*/		regs.R10 = regs.R11;
		/* 820E00A8h case   13:*/		return 0x820E00AC;
		  /* 820E00ACh */ case   14:  		/* li R4, 32 */
		/* 820E00ACh case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E00ACh case   14:*/		return 0x820E00B0;
		  /* 820E00B0h */ case   15:  		/* rlwimi R10, R11, 12, 21, 23 */
		/* 820E00B0h case   15:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R10,regs.R11);
		/* 820E00B0h case   15:*/		return 0x820E00B4;
		  /* 820E00B4h */ case   16:  		/* addi R3, R1, 176 */
		/* 820E00B4h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB0);
		/* 820E00B4h case   16:*/		return 0x820E00B8;
		  /* 820E00B8h */ case   17:  		/* rlwinm R11, R10, 26, 25, 29 */
		/* 820E00B8h case   17:*/		cpu::op::rlwinm<0,26,25,29>(regs,&regs.R11,regs.R10);
		/* 820E00B8h case   17:*/		return 0x820E00BC;
		  /* 820E00BCh */ case   18:  		/* lwzx R6, <#[R11 + R9]> */
		/* 820E00BCh case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E00BCh case   18:*/		return 0x820E00C0;
		  /* 820E00C0h */ case   19:  		/* bl -252544 */
		/* 820E00C0h case   19:*/		regs.LR = 0x820E00C4; return 0x820A2640;
		/* 820E00C0h case   19:*/		return 0x820E00C4;
		  /* 820E00C4h */ case   20:  		/* lwz R11, <#[R27 + 4]> */
		/* 820E00C4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 820E00C4h case   20:*/		return 0x820E00C8;
		  /* 820E00C8h */ case   21:  		/* cmpwi CR6, R25, 0 */
		/* 820E00C8h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 820E00C8h case   21:*/		return 0x820E00CC;
		  /* 820E00CCh */ case   22:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 820E00CCh case   22:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 820E00CCh case   22:*/		return 0x820E00D0;
		  /* 820E00D0h */ case   23:  		/* bc 12, CR0_EQ, 424 */
		/* 820E00D0h case   23:*/		if ( regs.CR[0].eq ) { return 0x820E0278;  }
		/* 820E00D0h case   23:*/		return 0x820E00D4;
		  /* 820E00D4h */ case   24:  		/* bc 12, CR6_EQ, 424 */
		/* 820E00D4h case   24:*/		if ( regs.CR[6].eq ) { return 0x820E027C;  }
		/* 820E00D4h case   24:*/		return 0x820E00D8;
		  /* 820E00D8h */ case   25:  		/* lwz R11, <#[R31 + 1676]> */
		/* 820E00D8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000068C) );
		/* 820E00D8h case   25:*/		return 0x820E00DC;
		  /* 820E00DCh */ case   26:  		/* mr R3, R31 */
		/* 820E00DCh case   26:*/		regs.R3 = regs.R31;
		/* 820E00DCh case   26:*/		return 0x820E00E0;
		  /* 820E00E0h */ case   27:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 820E00E0h case   27:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 820E00E0h case   27:*/		return 0x820E00E4;
		  /* 820E00E4h */ case   28:  		/* add R11, R11, R31 */
		/* 820E00E4h case   28:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 820E00E4h case   28:*/		return 0x820E00E8;
		  /* 820E00E8h */ case   29:  		/* stw R26, <#[R11 + 1548]> */
		/* 820E00E8h case   29:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x0000060C) );
		/* 820E00E8h case   29:*/		return 0x820E00EC;
		  /* 820E00ECh */ case   30:  		/* lwz R11, <#[R31 + 1676]> */
		/* 820E00ECh case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000068C) );
		/* 820E00ECh case   30:*/		return 0x820E00F0;
		  /* 820E00F0h */ case   31:  		/* addi R11, R11, 194 */
		/* 820E00F0h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC2);
		/* 820E00F0h case   31:*/		return 0x820E00F4;
		  /* 820E00F4h */ case   32:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 820E00F4h case   32:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 820E00F4h case   32:*/		return 0x820E00F8;
		  /* 820E00F8h */ case   33:  		/* stwx R30, <#[R11 + R31]> */
		/* 820E00F8h case   33:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 820E00F8h case   33:*/		return 0x820E00FC;
		  /* 820E00FCh */ case   34:  		/* lwz R11, <#[R31 + 1676]> */
		/* 820E00FCh case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000068C) );
		/* 820E00FCh case   34:*/		return 0x820E0100;
		  /* 820E0100h */ case   35:  		/* addi R11, R11, 1 */
		/* 820E0100h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E0100h case   35:*/		return 0x820E0104;
		  /* 820E0104h */ case   36:  		/* stw R11, <#[R31 + 1676]> */
		/* 820E0104h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000068C) );
		/* 820E0104h case   36:*/		return 0x820E0108;
		  /* 820E0108h */ case   37:  		/* bl -24408 */
		/* 820E0108h case   37:*/		regs.LR = 0x820E010C; return 0x820DA1B0;
		/* 820E0108h case   37:*/		return 0x820E010C;
		  /* 820E010Ch */ case   38:  		/* cmpwi CR0, R3, 0 */
		/* 820E010Ch case   38:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E010Ch case   38:*/		return 0x820E0110;
		  /* 820E0110h */ case   39:  		/* bc 12, CR0_LT, 352 */
		/* 820E0110h case   39:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E0110h case   39:*/		return 0x820E0114;
		  /* 820E0114h */ case   40:  		/* lis R11, -32254 */
		/* 820E0114h case   40:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E0114h case   40:*/		return 0x820E0118;
		  /* 820E0118h */ case   41:  		/* mr R6, R30 */
		/* 820E0118h case   41:*/		regs.R6 = regs.R30;
		/* 820E0118h case   41:*/		return 0x820E011C;
		  /* 820E011Ch */ case   42:  		/* addi R4, R11, -26736 */
		/* 820E011Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9790);
		/* 820E011Ch case   42:*/		return 0x820E0120;
		  /* 820E0120h */ case   43:  		/* mr R5, R26 */
		/* 820E0120h case   43:*/		regs.R5 = regs.R26;
		/* 820E0120h case   43:*/		return 0x820E0124;
		  /* 820E0124h */ case   44:  		/* mr R3, R31 */
		/* 820E0124h case   44:*/		regs.R3 = regs.R31;
		/* 820E0124h case   44:*/		return 0x820E0128;
		  /* 820E0128h */ case   45:  		/* bl -24656 */
		/* 820E0128h case   45:*/		regs.LR = 0x820E012C; return 0x820DA0D8;
		/* 820E0128h case   45:*/		return 0x820E012C;
		  /* 820E012Ch */ case   46:  		/* cmpwi CR0, R3, 0 */
		/* 820E012Ch case   46:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E012Ch case   46:*/		return 0x820E0130;
		  /* 820E0130h */ case   47:  		/* bc 12, CR0_LT, 320 */
		/* 820E0130h case   47:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E0130h case   47:*/		return 0x820E0134;
		  /* 820E0134h */ case   48:  		/* mr R3, R31 */
		/* 820E0134h case   48:*/		regs.R3 = regs.R31;
		/* 820E0134h case   48:*/		return 0x820E0138;
		  /* 820E0138h */ case   49:  		/* bl -24456 */
		/* 820E0138h case   49:*/		regs.LR = 0x820E013C; return 0x820DA1B0;
		/* 820E0138h case   49:*/		return 0x820E013C;
		  /* 820E013Ch */ case   50:  		/* cmpwi CR0, R3, 0 */
		/* 820E013Ch case   50:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E013Ch case   50:*/		return 0x820E0140;
		  /* 820E0140h */ case   51:  		/* bc 12, CR0_LT, 304 */
		/* 820E0140h case   51:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E0140h case   51:*/		return 0x820E0144;
		  /* 820E0144h */ case   52:  		/* lis R11, -32254 */
		/* 820E0144h case   52:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E0144h case   52:*/		return 0x820E0148;
		  /* 820E0148h */ case   53:  		/* mr R6, R30 */
		/* 820E0148h case   53:*/		regs.R6 = regs.R30;
		/* 820E0148h case   53:*/		return 0x820E014C;
		  /* 820E014Ch */ case   54:  		/* addi R4, R11, -26824 */
		/* 820E014Ch case   54:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9738);
		/* 820E014Ch case   54:*/		return 0x820E0150;
		  /* 820E0150h */ case   55:  		/* mr R5, R26 */
		/* 820E0150h case   55:*/		regs.R5 = regs.R26;
		/* 820E0150h case   55:*/		return 0x820E0154;
		  /* 820E0154h */ case   56:  		/* mr R3, R31 */
		/* 820E0154h case   56:*/		regs.R3 = regs.R31;
		/* 820E0154h case   56:*/		return 0x820E0158;
		  /* 820E0158h */ case   57:  		/* bl -24704 */
		/* 820E0158h case   57:*/		regs.LR = 0x820E015C; return 0x820DA0D8;
		/* 820E0158h case   57:*/		return 0x820E015C;
		  /* 820E015Ch */ case   58:  		/* cmpwi CR0, R3, 0 */
		/* 820E015Ch case   58:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E015Ch case   58:*/		return 0x820E0160;
		  /* 820E0160h */ case   59:  		/* bc 12, CR0_LT, 272 */
		/* 820E0160h case   59:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E0160h case   59:*/		return 0x820E0164;
		  /* 820E0164h */ case   60:  		/* lwz R11, <#[R1 + 112]> */
		/* 820E0164h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820E0164h case   60:*/		return 0x820E0168;
		  /* 820E0168h */ case   61:  		/* lis R30, 15 */
		/* 820E0168h case   61:*/		cpu::op::lis<0>(regs,&regs.R30,0xF);
		/* 820E0168h case   61:*/		return 0x820E016C;
		  /* 820E016Ch */ case   62:  		/* li R4, 32 */
		/* 820E016Ch case   62:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E016Ch case   62:*/		return 0x820E0170;
		  /* 820E0170h */ case   63:  		/* rlwinm R11, R11, 0, 12, 15 */
		/* 820E0170h case   63:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R11,regs.R11);
		/* 820E0170h case   63:*/		return 0x820E0174;
		  /* 820E0174h */ case   64:  		/* addi R3, R1, 240 */
		/* 820E0174h case   64:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xF0);
		/* 820E0174h case   64:*/		return 0x820E0178;
		  /* 820E0178h */ case   65:  		/* cmplw CR6, R11, R30 */
		/* 820E0178h case   65:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 820E0178h case   65:*/		return 0x820E017C;
		  /* 820E017Ch */ case   66:  		/* bc 4, CR6_EQ, 16 */
		/* 820E017Ch case   66:*/		if ( !regs.CR[6].eq ) { return 0x820E018C;  }
		/* 820E017Ch case   66:*/		return 0x820E0180;
		  /* 820E0180h */ case   67:  		/* addi R5, R1, 176 */
		/* 820E0180h case   67:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 820E0180h case   67:*/		return 0x820E0184;
		  /* 820E0184h */ case   68:  		/* bl -236180 */
		/* 820E0184h case   68:*/		regs.LR = 0x820E0188; return 0x820A66F0;
		/* 820E0184h case   68:*/		return 0x820E0188;
		  /* 820E0188h */ case   69:  		/* b 36 */
		/* 820E0188h case   69:*/		return 0x820E01AC;
		/* 820E0188h case   69:*/		return 0x820E018C;
	}
	return 0x820E018C;
} // Block from 820E0074h-820E018Ch (70 instructions)

//////////////////////////////////////////////////////
// Block at 820E018Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E018C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E018C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E018C);
		  /* 820E018Ch */ case    0:  		/* lis R11, -32254 */
		/* 820E018Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E018Ch case    0:*/		return 0x820E0190;
		  /* 820E0190h */ case    1:  		/* addi R5, R11, -26836 */
		/* 820E0190h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF972C);
		/* 820E0190h case    1:*/		return 0x820E0194;
		  /* 820E0194h */ case    2:  		/* bl -236196 */
		/* 820E0194h case    2:*/		regs.LR = 0x820E0198; return 0x820A66F0;
		/* 820E0194h case    2:*/		return 0x820E0198;
		  /* 820E0198h */ case    3:  		/* mr R3, R31 */
		/* 820E0198h case    3:*/		regs.R3 = regs.R31;
		/* 820E0198h case    3:*/		return 0x820E019C;
		  /* 820E019Ch */ case    4:  		/* lwz R4, <#[R1 + 112]> */
		/* 820E019Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000070) );
		/* 820E019Ch case    4:*/		return 0x820E01A0;
		  /* 820E01A0h */ case    5:  		/* bl -23888 */
		/* 820E01A0h case    5:*/		regs.LR = 0x820E01A4; return 0x820DA450;
		/* 820E01A0h case    5:*/		return 0x820E01A4;
		  /* 820E01A4h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820E01A4h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E01A4h case    6:*/		return 0x820E01A8;
		  /* 820E01A8h */ case    7:  		/* bc 12, CR0_LT, 200 */
		/* 820E01A8h case    7:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E01A8h case    7:*/		return 0x820E01AC;
	}
	return 0x820E01AC;
} // Block from 820E018Ch-820E01ACh (8 instructions)

