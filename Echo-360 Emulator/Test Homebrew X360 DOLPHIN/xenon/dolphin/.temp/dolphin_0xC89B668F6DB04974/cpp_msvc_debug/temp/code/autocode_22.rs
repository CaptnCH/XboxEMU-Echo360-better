#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 82140A38h
// Function '?VSMatchDOT@CVSProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140A38);
		  /* 82140A38h */ case    0:  		/* li R9, 0 */
		/* 82140A38h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140A38h case    0:*/		return 0x82140A3C;
		  /* 82140A3Ch */ case    1:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140A3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140A3Ch case    1:*/		return 0x82140A40;
		  /* 82140A40h */ case    2:  		/* li R8, 0 */
		/* 82140A40h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140A40h case    2:*/		return 0x82140A44;
		  /* 82140A44h */ case    3:  		/* addi R7, R1, 120 */
		/* 82140A44h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x78);
		/* 82140A44h case    3:*/		return 0x82140A48;
		  /* 82140A48h */ case    4:  		/* stw R30, <#[R1 + 108]> */
		/* 82140A48h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140A48h case    4:*/		return 0x82140A4C;
		  /* 82140A4Ch */ case    5:  		/* li R6, 1 */
		/* 82140A4Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82140A4Ch case    5:*/		return 0x82140A50;
		  /* 82140A50h */ case    6:  		/* stw R30, <#[R1 + 100]> */
		/* 82140A50h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82140A50h case    6:*/		return 0x82140A54;
		  /* 82140A54h */ case    7:  		/* li R4, 1 */
		/* 82140A54h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82140A54h case    7:*/		return 0x82140A58;
		  /* 82140A58h */ case    8:  		/* mr R3, R31 */
		/* 82140A58h case    8:*/		regs.R3 = regs.R31;
		/* 82140A58h case    8:*/		return 0x82140A5C;
		  /* 82140A5Ch */ case    9:  		/* lwz R11, <#[R11 + 16]> */
		/* 82140A5Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82140A5Ch case    9:*/		return 0x82140A60;
		  /* 82140A60h */ case   10:  		/* add R5, R11, R29 */
		/* 82140A60h case   10:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R29);
		/* 82140A60h case   10:*/		return 0x82140A64;
		  /* 82140A64h */ case   11:  		/* bl -304900 */
		/* 82140A64h case   11:*/		regs.LR = 0x82140A68; return 0x820F6360;
		/* 82140A64h case   11:*/		return 0x82140A68;
		  /* 82140A68h */ case   12:  		/* b 68 */
		/* 82140A68h case   12:*/		return 0x82140AAC;
		/* 82140A68h case   12:*/		return 0x82140A6C;
	}
	return 0x82140A6C;
} // Block from 82140A38h-82140A6Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82140A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140A6C);
		  /* 82140A6Ch */ case    0:  		/* stw R30, <#[R1 + 84]> */
		/* 82140A6Ch case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82140A6Ch case    0:*/		return 0x82140A70;
		  /* 82140A70h */ case    1:  		/* li R10, 1 */
		/* 82140A70h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82140A70h case    1:*/		return 0x82140A74;
		  /* 82140A74h */ case    2:  		/* lwz R7, <#[R31 + 260]> */
		/* 82140A74h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000104) );
		/* 82140A74h case    2:*/		return 0x82140A78;
		  /* 82140A78h */ case    3:  		/* li R9, 0 */
		/* 82140A78h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140A78h case    3:*/		return 0x82140A7C;
		  /* 82140A7Ch */ case    4:  		/* li R8, 0 */
		/* 82140A7Ch case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140A7Ch case    4:*/		return 0x82140A80;
		  /* 82140A80h */ case    5:  		/* stw R30, <#[R1 + 108]> */
		/* 82140A80h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140A80h case    5:*/		return 0x82140A84;
		  /* 82140A84h */ case    6:  		/* li R6, 1 */
		/* 82140A84h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82140A84h case    6:*/		return 0x82140A88;
		  /* 82140A88h */ case    7:  		/* stw R30, <#[R1 + 100]> */
		/* 82140A88h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82140A88h case    7:*/		return 0x82140A8C;
		  /* 82140A8Ch */ case    8:  		/* li R4, 78 */
		/* 82140A8Ch case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x4E);
		/* 82140A8Ch case    8:*/		return 0x82140A90;
		  /* 82140A90h */ case    9:  		/* stw R30, <#[R1 + 92]> */
		/* 82140A90h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140A90h case    9:*/		return 0x82140A94;
		  /* 82140A94h */ case   10:  		/* mr R3, R31 */
		/* 82140A94h case   10:*/		regs.R3 = regs.R31;
		/* 82140A94h case   10:*/		return 0x82140A98;
		  /* 82140A98h */ case   11:  		/* lwz R5, <#[R7 + 16]> */
		/* 82140A98h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + 0x00000010) );
		/* 82140A98h case   11:*/		return 0x82140A9C;
		  /* 82140A9Ch */ case   12:  		/* lwz R11, <#[R7 + 8]> */
		/* 82140A9Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 82140A9Ch case   12:*/		return 0x82140AA0;
		  /* 82140AA0h */ case   13:  		/* add R5, R5, R29 */
		/* 82140AA0h case   13:*/		cpu::op::add<0>(regs,&regs.R5,regs.R5,regs.R29);
		/* 82140AA0h case   13:*/		return 0x82140AA4;
		  /* 82140AA4h */ case   14:  		/* add R7, R11, R29 */
		/* 82140AA4h case   14:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R29);
		/* 82140AA4h case   14:*/		return 0x82140AA8;
		  /* 82140AA8h */ case   15:  		/* bl -304968 */
		/* 82140AA8h case   15:*/		regs.LR = 0x82140AAC; return 0x820F6360;
		/* 82140AA8h case   15:*/		return 0x82140AAC;
	}
	return 0x82140AAC;
} // Block from 82140A6Ch-82140AACh (16 instructions)

//////////////////////////////////////////////////////
// Block at 82140AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140AAC);
		  /* 82140AACh */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 82140AACh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140AACh case    0:*/		return 0x82140AB0;
		  /* 82140AB0h */ case    1:  		/* bc 12, CR0_LT, 32 */
		/* 82140AB0h case    1:*/		if ( regs.CR[0].lt ) { return 0x82140AD0;  }
		/* 82140AB0h case    1:*/		return 0x82140AB4;
		  /* 82140AB4h */ case    2:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140AB4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140AB4h case    2:*/		return 0x82140AB8;
		  /* 82140AB8h */ case    3:  		/* addi R28, R28, 1 */
		/* 82140AB8h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82140AB8h case    3:*/		return 0x82140ABC;
		  /* 82140ABCh */ case    4:  		/* addi R29, R29, 4 */
		/* 82140ABCh case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82140ABCh case    4:*/		return 0x82140AC0;
		  /* 82140AC0h */ case    5:  		/* lwz R11, <#[R11 + 12]> */
		/* 82140AC0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82140AC0h case    5:*/		return 0x82140AC4;
		  /* 82140AC4h */ case    6:  		/* cmplw CR6, R28, R11 */
		/* 82140AC4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82140AC4h case    6:*/		return 0x82140AC8;
		  /* 82140AC8h */ case    7:  		/* bc 12, CR6_LT, -384 */
		/* 82140AC8h case    7:*/		if ( regs.CR[6].lt ) { return 0x82140948;  }
		/* 82140AC8h case    7:*/		return 0x82140ACC;
	}
	return 0x82140ACC;
} // Block from 82140AACh-82140ACCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 82140ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140ACC);
		  /* 82140ACCh */ case    0:  		/* li R3, 0 */
		/* 82140ACCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82140ACCh case    0:*/		return 0x82140AD0;
	}
	return 0x82140AD0;
} // Block from 82140ACCh-82140AD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82140AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140AD0);
		  /* 82140AD0h */ case    0:  		/* addi R1, R1, 176 */
		/* 82140AD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82140AD0h case    0:*/		return 0x82140AD4;
		  /* 82140AD4h */ case    1:  		/* b -718896 */
		/* 82140AD4h case    1:*/		return 0x820912A4;
		/* 82140AD4h case    1:*/		return 0x82140AD8;
	}
	return 0x82140AD8;
} // Block from 82140AD0h-82140AD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82140AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140AD8);
		  /* 82140AD8h */ case    0:  		/* mfspr R12, LR */
		/* 82140AD8h case    0:*/		regs.R12 = regs.LR;
		/* 82140AD8h case    0:*/		return 0x82140ADC;
		  /* 82140ADCh */ case    1:  		/* bl -718984 */
		/* 82140ADCh case    1:*/		regs.LR = 0x82140AE0; return 0x82091254;
		/* 82140ADCh case    1:*/		return 0x82140AE0;
		  /* 82140AE0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82140AE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82140AE0h case    2:*/		return 0x82140AE4;
		  /* 82140AE4h */ case    3:  		/* lwz R8, <#[R3 + 260]> */
		/* 82140AE4h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000104) );
		/* 82140AE4h case    3:*/		return 0x82140AE8;
		  /* 82140AE8h */ case    4:  		/* li R30, 0 */
		/* 82140AE8h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82140AE8h case    4:*/		return 0x82140AEC;
		  /* 82140AECh */ case    5:  		/* mr R31, R3 */
		/* 82140AECh case    5:*/		regs.R31 = regs.R3;
		/* 82140AECh case    5:*/		return 0x82140AF0;
		  /* 82140AF0h */ case    6:  		/* mr R10, R30 */
		/* 82140AF0h case    6:*/		regs.R10 = regs.R30;
		/* 82140AF0h case    6:*/		return 0x82140AF4;
		  /* 82140AF4h */ case    7:  		/* lwz R9, <#[R8 + 12]> */
		/* 82140AF4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x0000000C) );
		/* 82140AF4h case    7:*/		return 0x82140AF8;
		  /* 82140AF8h */ case    8:  		/* cmplwi CR6, R9, 0 */
		/* 82140AF8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82140AF8h case    8:*/		return 0x82140AFC;
		  /* 82140AFCh */ case    9:  		/* bc 12, CR6_EQ, 56 */
		/* 82140AFCh case    9:*/		if ( regs.CR[6].eq ) { return 0x82140B34;  }
		/* 82140AFCh case    9:*/		return 0x82140B00;
		  /* 82140B00h */ case   10:  		/* lwz R7, <#[R3 + 20]> */
		/* 82140B00h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 82140B00h case   10:*/		return 0x82140B04;
		  /* 82140B04h */ case   11:  		/* mr R11, R30 */
		/* 82140B04h case   11:*/		regs.R11 = regs.R30;
		/* 82140B04h case   11:*/		return 0x82140B08;
		  /* 82140B08h */ case   12:  		/* lwz R6, <#[R8 + 16]> */
		/* 82140B08h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000010) );
		/* 82140B08h case   12:*/		return 0x82140B0C;
		  /* 82140B0Ch */ case   13:  		/* lwzx R6, <#[R6 + R11]> */
		/* 82140B0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 82140B0Ch case   13:*/		return 0x82140B10;
		  /* 82140B10h */ case   14:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 82140B10h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 82140B10h case   14:*/		return 0x82140B14;
		  /* 82140B14h */ case   15:  		/* lwzx R6, <#[R6 + R7]> */
		/* 82140B14h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 82140B14h case   15:*/		return 0x82140B18;
		  /* 82140B18h */ case   16:  		/* lwz R6, <#[R6]> */
		/* 82140B18h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000000) );
		/* 82140B18h case   16:*/		return 0x82140B1C;
		  /* 82140B1Ch */ case   17:  		/* rlwinm. R6, R6, 0, 6, 6 */
		/* 82140B1Ch case   17:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R6,regs.R6);
		/* 82140B1Ch case   17:*/		return 0x82140B20;
		  /* 82140B20h */ case   18:  		/* bc 12, CR0_EQ, 20 */
		/* 82140B20h case   18:*/		if ( regs.CR[0].eq ) { return 0x82140B34;  }
		/* 82140B20h case   18:*/		return 0x82140B24;
		  /* 82140B24h */ case   19:  		/* addi R10, R10, 1 */
		/* 82140B24h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82140B24h case   19:*/		return 0x82140B28;
		  /* 82140B28h */ case   20:  		/* addi R11, R11, 4 */
		/* 82140B28h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82140B28h case   20:*/		return 0x82140B2C;
		  /* 82140B2Ch */ case   21:  		/* cmplw CR6, R10, R9 */
		/* 82140B2Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82140B2Ch case   21:*/		return 0x82140B30;
		  /* 82140B30h */ case   22:  		/* bc 12, CR6_LT, -40 */
		/* 82140B30h case   22:*/		if ( regs.CR[6].lt ) { return 0x82140B08;  }
		/* 82140B30h case   22:*/		return 0x82140B34;
	}
	return 0x82140B34;
} // Block from 82140AD8h-82140B34h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82140B34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140B34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140B34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140B34);
		  /* 82140B34h */ case    0:  		/* cmplw CR6, R10, R9 */
		/* 82140B34h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82140B34h case    0:*/		return 0x82140B38;
		  /* 82140B38h */ case    1:  		/* bc 4, CR6_LT, 48 */
		/* 82140B38h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82140B68;  }
		/* 82140B38h case    1:*/		return 0x82140B3C;
		  /* 82140B3Ch */ case    2:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140B3Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140B3Ch case    2:*/		return 0x82140B40;
		  /* 82140B40h */ case    3:  		/* li R4, 15 */
		/* 82140B40h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xF);
		/* 82140B40h case    3:*/		return 0x82140B44;
		  /* 82140B44h */ case    4:  		/* li R9, 0 */
		/* 82140B44h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140B44h case    4:*/		return 0x82140B48;
		  /* 82140B48h */ case    5:  		/* lwz R8, <#[R11 + 4]> */
		/* 82140B48h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 82140B48h case    5:*/		return 0x82140B4C;
		  /* 82140B4Ch */ case    6:  		/* li R10, 0 */
		/* 82140B4Ch case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82140B4Ch case    6:*/		return 0x82140B50;
		  /* 82140B50h */ case    7:  		/* lwz R7, <#[R11 + 12]> */
		/* 82140B50h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000000C) );
		/* 82140B50h case    7:*/		return 0x82140B54;
		  /* 82140B54h */ case    8:  		/* mr R3, R31 */
		/* 82140B54h case    8:*/		regs.R3 = regs.R31;
		/* 82140B54h case    8:*/		return 0x82140B58;
		  /* 82140B58h */ case    9:  		/* lwz R6, <#[R11 + 8]> */
		/* 82140B58h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 82140B58h case    9:*/		return 0x82140B5C;
		  /* 82140B5Ch */ case   10:  		/* lwz R5, <#[R11 + 16]> */
		/* 82140B5Ch case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 82140B5Ch case   10:*/		return 0x82140B60;
		  /* 82140B60h */ case   11:  		/* bl -295080 */
		/* 82140B60h case   11:*/		regs.LR = 0x82140B64; return 0x820F8AB8;
		/* 82140B60h case   11:*/		return 0x82140B64;
		  /* 82140B64h */ case   12:  		/* b 620 */
		/* 82140B64h case   12:*/		return 0x82140DD0;
		/* 82140B64h case   12:*/		return 0x82140B68;
	}
	return 0x82140B68;
} // Block from 82140B34h-82140B68h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82140B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140B68);
		  /* 82140B68h */ case    0:  		/* lhz R11, <#[R31 + 202]> */
		/* 82140B68h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 82140B68h case    0:*/		return 0x82140B6C;
		  /* 82140B6Ch */ case    1:  		/* cmplwi CR6, R11, 512 */
		/* 82140B6Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 82140B6Ch case    1:*/		return 0x82140B70;
		  /* 82140B70h */ case    2:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140B70h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140B70h case    2:*/		return 0x82140B74;
		  /* 82140B74h */ case    3:  		/* bc 12, CR6_LT, 12 */
		/* 82140B74h case    3:*/		if ( regs.CR[6].lt ) { return 0x82140B80;  }
		/* 82140B74h case    3:*/		return 0x82140B78;
		  /* 82140B78h */ case    4:  		/* li R4, 79 */
		/* 82140B78h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x4F);
		/* 82140B78h case    4:*/		return 0x82140B7C;
		  /* 82140B7Ch */ case    5:  		/* b -56 */
		/* 82140B7Ch case    5:*/		return 0x82140B44;
		/* 82140B7Ch case    5:*/		return 0x82140B80;
	}
	return 0x82140B80;
} // Block from 82140B68h-82140B80h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82140B80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140B80);
		  /* 82140B80h */ case    0:  		/* lwz R10, <#[R11 + 12]> */
		/* 82140B80h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82140B80h case    0:*/		return 0x82140B84;
		  /* 82140B84h */ case    1:  		/* mr R27, R30 */
		/* 82140B84h case    1:*/		regs.R27 = regs.R30;
		/* 82140B84h case    1:*/		return 0x82140B88;
		  /* 82140B88h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 82140B88h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82140B88h case    2:*/		return 0x82140B8C;
		  /* 82140B8Ch */ case    3:  		/* cmplw CR6, R10, R11 */
		/* 82140B8Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82140B8Ch case    3:*/		return 0x82140B90;
		  /* 82140B90h */ case    4:  		/* bc 4, CR6_GT, 232 */
		/* 82140B90h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82140C78;  }
		/* 82140B90h case    4:*/		return 0x82140B94;
		  /* 82140B94h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 82140B94h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82140B94h case    5:*/		return 0x82140B98;
		  /* 82140B98h */ case    6:  		/* li R8, 0 */
		/* 82140B98h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140B98h case    6:*/		return 0x82140B9C;
		  /* 82140B9Ch */ case    7:  		/* li R7, 0 */
		/* 82140B9Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82140B9Ch case    7:*/		return 0x82140BA0;
		  /* 82140BA0h */ case    8:  		/* lwz R4, <#[R31 + 256]> */
		/* 82140BA0h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000100) );
		/* 82140BA0h case    8:*/		return 0x82140BA4;
		  /* 82140BA4h */ case    9:  		/* li R6, 4 */
		/* 82140BA4h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82140BA4h case    9:*/		return 0x82140BA8;
		  /* 82140BA8h */ case   10:  		/* addi R5, R1, 112 */
		/* 82140BA8h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 82140BA8h case   10:*/		return 0x82140BAC;
		  /* 82140BACh */ case   11:  		/* mr R3, R31 */
		/* 82140BACh case   11:*/		regs.R3 = regs.R31;
		/* 82140BACh case   11:*/		return 0x82140BB0;
		  /* 82140BB0h */ case   12:  		/* lwz R11, <#[R11 + 340]> */
		/* 82140BB0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 82140BB0h case   12:*/		return 0x82140BB4;
		  /* 82140BB4h */ case   13:  		/* mtspr CTR, R11 */
		/* 82140BB4h case   13:*/		regs.CTR = regs.R11;
		/* 82140BB4h case   13:*/		return 0x82140BB8;
		  /* 82140BB8h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82140BB8h case   14:*/		if ( 1 ) { regs.LR = 0x82140BBC; return (uint32)regs.CTR; }
		/* 82140BB8h case   14:*/		return 0x82140BBC;
		  /* 82140BBCh */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 82140BBCh case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140BBCh case   15:*/		return 0x82140BC0;
		  /* 82140BC0h */ case   16:  		/* bc 12, CR0_LT, 528 */
		/* 82140BC0h case   16:*/		if ( regs.CR[0].lt ) { return 0x82140DD0;  }
		/* 82140BC0h case   16:*/		return 0x82140BC4;
		  /* 82140BC4h */ case   17:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140BC4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140BC4h case   17:*/		return 0x82140BC8;
		  /* 82140BC8h */ case   18:  		/* li R10, 1 */
		/* 82140BC8h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82140BC8h case   18:*/		return 0x82140BCC;
		  /* 82140BCCh */ case   19:  		/* li R9, 0 */
		/* 82140BCCh case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140BCCh case   19:*/		return 0x82140BD0;
		  /* 82140BD0h */ case   20:  		/* stw R30, <#[R1 + 108]> */
		/* 82140BD0h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140BD0h case   20:*/		return 0x82140BD4;
		  /* 82140BD4h */ case   21:  		/* li R8, 0 */
		/* 82140BD4h case   21:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140BD4h case   21:*/		return 0x82140BD8;
		  /* 82140BD8h */ case   22:  		/* stw R30, <#[R1 + 100]> */
		/* 82140BD8h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82140BD8h case   22:*/		return 0x82140BDC;
		  /* 82140BDCh */ case   23:  		/* li R6, 1 */
		/* 82140BDCh case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82140BDCh case   23:*/		return 0x82140BE0;
		  /* 82140BE0h */ case   24:  		/* stw R30, <#[R1 + 92]> */
		/* 82140BE0h case   24:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140BE0h case   24:*/		return 0x82140BE4;
		  /* 82140BE4h */ case   25:  		/* addi R5, R1, 120 */
		/* 82140BE4h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x78);
		/* 82140BE4h case   25:*/		return 0x82140BE8;
		  /* 82140BE8h */ case   26:  		/* stw R30, <#[R1 + 84]> */
		/* 82140BE8h case   26:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82140BE8h case   26:*/		return 0x82140BEC;
		  /* 82140BECh */ case   27:  		/* li R4, 79 */
		/* 82140BECh case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x4F);
		/* 82140BECh case   27:*/		return 0x82140BF0;
		  /* 82140BF0h */ case   28:  		/* lwz R7, <#[R11 + 8]> */
		/* 82140BF0h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 82140BF0h case   28:*/		return 0x82140BF4;
		  /* 82140BF4h */ case   29:  		/* mr R3, R31 */
		/* 82140BF4h case   29:*/		regs.R3 = regs.R31;
		/* 82140BF4h case   29:*/		return 0x82140BF8;
		  /* 82140BF8h */ case   30:  		/* bl -305304 */
		/* 82140BF8h case   30:*/		regs.LR = 0x82140BFC; return 0x820F6360;
		/* 82140BF8h case   30:*/		return 0x82140BFC;
		  /* 82140BFCh */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 82140BFCh case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140BFCh case   31:*/		return 0x82140C00;
		  /* 82140C00h */ case   32:  		/* bc 12, CR0_LT, 464 */
		/* 82140C00h case   32:*/		if ( regs.CR[0].lt ) { return 0x82140DD0;  }
		/* 82140C00h case   32:*/		return 0x82140C04;
		  /* 82140C04h */ case   33:  		/* lwz R10, <#[R31 + 260]> */
		/* 82140C04h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 82140C04h case   33:*/		return 0x82140C08;
		  /* 82140C08h */ case   34:  		/* mr R11, R30 */
		/* 82140C08h case   34:*/		regs.R11 = regs.R30;
		/* 82140C08h case   34:*/		return 0x82140C0C;
		  /* 82140C0Ch */ case   35:  		/* lwz R9, <#[R10 + 12]> */
		/* 82140C0Ch case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 82140C0Ch case   35:*/		return 0x82140C10;
		  /* 82140C10h */ case   36:  		/* cmplwi CR6, R9, 0 */
		/* 82140C10h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82140C10h case   36:*/		return 0x82140C14;
		  /* 82140C14h */ case   37:  		/* bc 4, CR6_GT, 32 */
		/* 82140C14h case   37:*/		if ( !regs.CR[6].gt ) { return 0x82140C34;  }
		/* 82140C14h case   37:*/		return 0x82140C18;
		  /* 82140C18h */ case   38:  		/* addi R9, R1, 108 */
		/* 82140C18h case   38:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x6C);
		/* 82140C18h case   38:*/		return 0x82140C1C;
		  /* 82140C1Ch */ case   39:  		/* lwz R8, <#[R1 + 120]> */
		/* 82140C1Ch case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 82140C1Ch case   39:*/		return 0x82140C20;
		  /* 82140C20h */ case   40:  		/* addi R11, R11, 1 */
		/* 82140C20h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82140C20h case   40:*/		return 0x82140C24;
		  /* 82140C24h */ case   41:  		/* stwu R8, <#[R9 + 4]> */
		/* 82140C24h case   41:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 82140C24h case   41:*/		return 0x82140C28;
		  /* 82140C28h */ case   42:  		/* lwz R8, <#[R10 + 12]> */
		/* 82140C28h case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x0000000C) );
		/* 82140C28h case   42:*/		return 0x82140C2C;
		  /* 82140C2Ch */ case   43:  		/* cmplw CR6, R11, R8 */
		/* 82140C2Ch case   43:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 82140C2Ch case   43:*/		return 0x82140C30;
		  /* 82140C30h */ case   44:  		/* bc 12, CR6_LT, -20 */
		/* 82140C30h case   44:*/		if ( regs.CR[6].lt ) { return 0x82140C1C;  }
		/* 82140C30h case   44:*/		return 0x82140C34;
	}
	return 0x82140C34;
} // Block from 82140B80h-82140C34h (45 instructions)

//////////////////////////////////////////////////////
// Block at 82140C34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140C34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140C34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140C34);
		  /* 82140C34h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140C34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140C34h case    0:*/		return 0x82140C38;
		  /* 82140C38h */ case    1:  		/* li R9, 0 */
		/* 82140C38h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140C38h case    1:*/		return 0x82140C3C;
		  /* 82140C3Ch */ case    2:  		/* li R8, 0 */
		/* 82140C3Ch case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140C3Ch case    2:*/		return 0x82140C40;
		  /* 82140C40h */ case    3:  		/* stw R30, <#[R1 + 108]> */
		/* 82140C40h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140C40h case    3:*/		return 0x82140C44;
		  /* 82140C44h */ case    4:  		/* addi R7, R1, 112 */
		/* 82140C44h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 82140C44h case    4:*/		return 0x82140C48;
		  /* 82140C48h */ case    5:  		/* stw R30, <#[R1 + 100]> */
		/* 82140C48h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82140C48h case    5:*/		return 0x82140C4C;
		  /* 82140C4Ch */ case    6:  		/* li R4, 1 */
		/* 82140C4Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82140C4Ch case    6:*/		return 0x82140C50;
		  /* 82140C50h */ case    7:  		/* stw R30, <#[R1 + 92]> */
		/* 82140C50h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140C50h case    7:*/		return 0x82140C54;
		  /* 82140C54h */ case    8:  		/* mr R3, R31 */
		/* 82140C54h case    8:*/		regs.R3 = regs.R31;
		/* 82140C54h case    8:*/		return 0x82140C58;
		  /* 82140C58h */ case    9:  		/* stw R30, <#[R1 + 84]> */
		/* 82140C58h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82140C58h case    9:*/		return 0x82140C5C;
		  /* 82140C5Ch */ case   10:  		/* lwz R6, <#[R11 + 12]> */
		/* 82140C5Ch case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 82140C5Ch case   10:*/		return 0x82140C60;
		  /* 82140C60h */ case   11:  		/* lwz R5, <#[R11 + 16]> */
		/* 82140C60h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 82140C60h case   11:*/		return 0x82140C64;
		  /* 82140C64h */ case   12:  		/* mr R10, R6 */
		/* 82140C64h case   12:*/		regs.R10 = regs.R6;
		/* 82140C64h case   12:*/		return 0x82140C68;
		  /* 82140C68h */ case   13:  		/* bl -305416 */
		/* 82140C68h case   13:*/		regs.LR = 0x82140C6C; return 0x820F6360;
		/* 82140C68h case   13:*/		return 0x82140C6C;
		  /* 82140C6Ch */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 82140C6Ch case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140C6Ch case   14:*/		return 0x82140C70;
		  /* 82140C70h */ case   15:  		/* bc 4, CR0_LT, 348 */
		/* 82140C70h case   15:*/		if ( !regs.CR[0].lt ) { return 0x82140DCC;  }
		/* 82140C70h case   15:*/		return 0x82140C74;
		  /* 82140C74h */ case   16:  		/* b 348 */
		/* 82140C74h case   16:*/		return 0x82140DD0;
		/* 82140C74h case   16:*/		return 0x82140C78;
	}
	return 0x82140C78;
} // Block from 82140C34h-82140C78h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82140C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140C78);
		  /* 82140C78h */ case    0:  		/* mr R28, R30 */
		/* 82140C78h case    0:*/		regs.R28 = regs.R30;
		/* 82140C78h case    0:*/		return 0x82140C7C;
		  /* 82140C7Ch */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 82140C7Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82140C7Ch case    1:*/		return 0x82140C80;
		  /* 82140C80h */ case    2:  		/* bc 12, CR6_EQ, 332 */
		/* 82140C80h case    2:*/		if ( regs.CR[6].eq ) { return 0x82140DCC;  }
		/* 82140C80h case    2:*/		return 0x82140C84;
		  /* 82140C84h */ case    3:  		/* mr R29, R30 */
		/* 82140C84h case    3:*/		regs.R29 = regs.R30;
		/* 82140C84h case    3:*/		return 0x82140C88;
		  /* 82140C88h */ case    4:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140C88h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140C88h case    4:*/		return 0x82140C8C;
		  /* 82140C8Ch */ case    5:  		/* lwz R10, <#[R31 + 20]> */
		/* 82140C8Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82140C8Ch case    5:*/		return 0x82140C90;
		  /* 82140C90h */ case    6:  		/* lwz R11, <#[R11 + 16]> */
		/* 82140C90h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82140C90h case    6:*/		return 0x82140C94;
		  /* 82140C94h */ case    7:  		/* lwzx R11, <#[R11 + R29]> */
		/* 82140C94h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82140C94h case    7:*/		return 0x82140C98;
		  /* 82140C98h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82140C98h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82140C98h case    8:*/		return 0x82140C9C;
		  /* 82140C9Ch */ case    9:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82140C9Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82140C9Ch case    9:*/		return 0x82140CA0;
		  /* 82140CA0h */ case   10:  		/* lwz R11, <#[R11 + 16]> */
		/* 82140CA0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82140CA0h case   10:*/		return 0x82140CA4;
		  /* 82140CA4h */ case   11:  		/* cmplwi CR6, R11, 2 */
		/* 82140CA4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82140CA4h case   11:*/		return 0x82140CA8;
		  /* 82140CA8h */ case   12:  		/* bc 4, CR6_EQ, 72 */
		/* 82140CA8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82140CF0;  }
		/* 82140CA8h case   12:*/		return 0x82140CAC;
		  /* 82140CACh */ case   13:  		/* lwz R7, <#[R31 + 260]> */
		/* 82140CACh case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000104) );
		/* 82140CACh case   13:*/		return 0x82140CB0;
		  /* 82140CB0h */ case   14:  		/* li R10, 1 */
		/* 82140CB0h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82140CB0h case   14:*/		return 0x82140CB4;
		  /* 82140CB4h */ case   15:  		/* li R9, 0 */
		/* 82140CB4h case   15:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140CB4h case   15:*/		return 0x82140CB8;
		  /* 82140CB8h */ case   16:  		/* stw R30, <#[R1 + 108]> */
		/* 82140CB8h case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140CB8h case   16:*/		return 0x82140CBC;
		  /* 82140CBCh */ case   17:  		/* li R8, 0 */
		/* 82140CBCh case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140CBCh case   17:*/		return 0x82140CC0;
		  /* 82140CC0h */ case   18:  		/* stw R30, <#[R1 + 100]> */
		/* 82140CC0h case   18:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82140CC0h case   18:*/		return 0x82140CC4;
		  /* 82140CC4h */ case   19:  		/* li R6, 1 */
		/* 82140CC4h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82140CC4h case   19:*/		return 0x82140CC8;
		  /* 82140CC8h */ case   20:  		/* stw R30, <#[R1 + 92]> */
		/* 82140CC8h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140CC8h case   20:*/		return 0x82140CCC;
		  /* 82140CCCh */ case   21:  		/* li R4, 79 */
		/* 82140CCCh case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x4F);
		/* 82140CCCh case   21:*/		return 0x82140CD0;
		  /* 82140CD0h */ case   22:  		/* stw R30, <#[R1 + 84]> */
		/* 82140CD0h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82140CD0h case   22:*/		return 0x82140CD4;
		  /* 82140CD4h */ case   23:  		/* lwz R5, <#[R7 + 16]> */
		/* 82140CD4h case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + 0x00000010) );
		/* 82140CD4h case   23:*/		return 0x82140CD8;
		  /* 82140CD8h */ case   24:  		/* mr R3, R31 */
		/* 82140CD8h case   24:*/		regs.R3 = regs.R31;
		/* 82140CD8h case   24:*/		return 0x82140CDC;
		  /* 82140CDCh */ case   25:  		/* lwz R11, <#[R7 + 8]> */
		/* 82140CDCh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 82140CDCh case   25:*/		return 0x82140CE0;
		  /* 82140CE0h */ case   26:  		/* add R5, R5, R29 */
		/* 82140CE0h case   26:*/		cpu::op::add<0>(regs,&regs.R5,regs.R5,regs.R29);
		/* 82140CE0h case   26:*/		return 0x82140CE4;
		  /* 82140CE4h */ case   27:  		/* add R7, R11, R29 */
		/* 82140CE4h case   27:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R29);
		/* 82140CE4h case   27:*/		return 0x82140CE8;
		  /* 82140CE8h */ case   28:  		/* bl -305544 */
		/* 82140CE8h case   28:*/		regs.LR = 0x82140CEC; return 0x820F6360;
		/* 82140CE8h case   28:*/		return 0x82140CEC;
		  /* 82140CECh */ case   29:  		/* b 192 */
		/* 82140CECh case   29:*/		return 0x82140DAC;
		/* 82140CECh case   29:*/		return 0x82140CF0;
	}
	return 0x82140CF0;
} // Block from 82140C78h-82140CF0h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82140CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140CF0);
		  /* 82140CF0h */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 82140CF0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 82140CF0h case    0:*/		return 0x82140CF4;
		  /* 82140CF4h */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 82140CF4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82140D2C;  }
		/* 82140CF4h case    1:*/		return 0x82140CF8;
		  /* 82140CF8h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82140CF8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82140CF8h case    2:*/		return 0x82140CFC;
		  /* 82140CFCh */ case    3:  		/* li R8, 0 */
		/* 82140CFCh case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140CFCh case    3:*/		return 0x82140D00;
		  /* 82140D00h */ case    4:  		/* li R7, 0 */
		/* 82140D00h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82140D00h case    4:*/		return 0x82140D04;
		  /* 82140D04h */ case    5:  		/* lwz R4, <#[R31 + 256]> */
		/* 82140D04h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000100) );
		/* 82140D04h case    5:*/		return 0x82140D08;
		  /* 82140D08h */ case    6:  		/* li R6, 4 */
		/* 82140D08h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82140D08h case    6:*/		return 0x82140D0C;
		  /* 82140D0Ch */ case    7:  		/* addi R5, R1, 112 */
		/* 82140D0Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 82140D0Ch case    7:*/		return 0x82140D10;
		  /* 82140D10h */ case    8:  		/* mr R3, R31 */
		/* 82140D10h case    8:*/		regs.R3 = regs.R31;
		/* 82140D10h case    8:*/		return 0x82140D14;
		  /* 82140D14h */ case    9:  		/* lwz R11, <#[R11 + 340]> */
		/* 82140D14h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000154) );
		/* 82140D14h case    9:*/		return 0x82140D18;
		  /* 82140D18h */ case   10:  		/* mtspr CTR, R11 */
		/* 82140D18h case   10:*/		regs.CTR = regs.R11;
		/* 82140D18h case   10:*/		return 0x82140D1C;
		  /* 82140D1Ch */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 82140D1Ch case   11:*/		if ( 1 ) { regs.LR = 0x82140D20; return (uint32)regs.CTR; }
		/* 82140D1Ch case   11:*/		return 0x82140D20;
		  /* 82140D20h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 82140D20h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140D20h case   12:*/		return 0x82140D24;
		  /* 82140D24h */ case   13:  		/* bc 12, CR0_LT, 172 */
		/* 82140D24h case   13:*/		if ( regs.CR[0].lt ) { return 0x82140DD0;  }
		/* 82140D24h case   13:*/		return 0x82140D28;
		  /* 82140D28h */ case   14:  		/* li R27, 1 */
		/* 82140D28h case   14:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82140D28h case   14:*/		return 0x82140D2C;
	}
	return 0x82140D2C;
} // Block from 82140CF0h-82140D2Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82140D2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140D2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140D2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140D2C);
		  /* 82140D2Ch */ case    0:  		/* stw R30, <#[R1 + 84]> */
		/* 82140D2Ch case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82140D2Ch case    0:*/		return 0x82140D30;
		  /* 82140D30h */ case    1:  		/* li R10, 1 */
		/* 82140D30h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82140D30h case    1:*/		return 0x82140D34;
		  /* 82140D34h */ case    2:  		/* stw R30, <#[R1 + 108]> */
		/* 82140D34h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140D34h case    2:*/		return 0x82140D38;
		  /* 82140D38h */ case    3:  		/* li R9, 0 */
		/* 82140D38h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140D38h case    3:*/		return 0x82140D3C;
		  /* 82140D3Ch */ case    4:  		/* stw R30, <#[R1 + 100]> */
		/* 82140D3Ch case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82140D3Ch case    4:*/		return 0x82140D40;
		  /* 82140D40h */ case    5:  		/* li R8, 0 */
		/* 82140D40h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140D40h case    5:*/		return 0x82140D44;
		  /* 82140D44h */ case    6:  		/* stw R30, <#[R1 + 92]> */
		/* 82140D44h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140D44h case    6:*/		return 0x82140D48;
		  /* 82140D48h */ case    7:  		/* li R6, 1 */
		/* 82140D48h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82140D48h case    7:*/		return 0x82140D4C;
		  /* 82140D4Ch */ case    8:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140D4Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140D4Ch case    8:*/		return 0x82140D50;
		  /* 82140D50h */ case    9:  		/* addi R5, R1, 120 */
		/* 82140D50h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x78);
		/* 82140D50h case    9:*/		return 0x82140D54;
		  /* 82140D54h */ case   10:  		/* li R4, 79 */
		/* 82140D54h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x4F);
		/* 82140D54h case   10:*/		return 0x82140D58;
		  /* 82140D58h */ case   11:  		/* mr R3, R31 */
		/* 82140D58h case   11:*/		regs.R3 = regs.R31;
		/* 82140D58h case   11:*/		return 0x82140D5C;
		  /* 82140D5Ch */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 82140D5Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82140D5Ch case   12:*/		return 0x82140D60;
		  /* 82140D60h */ case   13:  		/* add R7, R11, R29 */
		/* 82140D60h case   13:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R29);
		/* 82140D60h case   13:*/		return 0x82140D64;
		  /* 82140D64h */ case   14:  		/* bl -305668 */
		/* 82140D64h case   14:*/		regs.LR = 0x82140D68; return 0x820F6360;
		/* 82140D64h case   14:*/		return 0x82140D68;
		  /* 82140D68h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 82140D68h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140D68h case   15:*/		return 0x82140D6C;
		  /* 82140D6Ch */ case   16:  		/* bc 12, CR0_LT, 100 */
		/* 82140D6Ch case   16:*/		if ( regs.CR[0].lt ) { return 0x82140DD0;  }
		/* 82140D6Ch case   16:*/		return 0x82140D70;
		  /* 82140D70h */ case   17:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140D70h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140D70h case   17:*/		return 0x82140D74;
		  /* 82140D74h */ case   18:  		/* li R10, 1 */
		/* 82140D74h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82140D74h case   18:*/		return 0x82140D78;
		  /* 82140D78h */ case   19:  		/* li R9, 0 */
		/* 82140D78h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82140D78h case   19:*/		return 0x82140D7C;
		  /* 82140D7Ch */ case   20:  		/* stw R30, <#[R1 + 84]> */
		/* 82140D7Ch case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82140D7Ch case   20:*/		return 0x82140D80;
		  /* 82140D80h */ case   21:  		/* li R8, 0 */
		/* 82140D80h case   21:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82140D80h case   21:*/		return 0x82140D84;
		  /* 82140D84h */ case   22:  		/* stw R30, <#[R1 + 108]> */
		/* 82140D84h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82140D84h case   22:*/		return 0x82140D88;
		  /* 82140D88h */ case   23:  		/* addi R7, R1, 120 */
		/* 82140D88h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x78);
		/* 82140D88h case   23:*/		return 0x82140D8C;
		  /* 82140D8Ch */ case   24:  		/* stw R30, <#[R1 + 100]> */
		/* 82140D8Ch case   24:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82140D8Ch case   24:*/		return 0x82140D90;
		  /* 82140D90h */ case   25:  		/* li R6, 1 */
		/* 82140D90h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82140D90h case   25:*/		return 0x82140D94;
		  /* 82140D94h */ case   26:  		/* stw R30, <#[R1 + 92]> */
		/* 82140D94h case   26:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82140D94h case   26:*/		return 0x82140D98;
		  /* 82140D98h */ case   27:  		/* lwz R11, <#[R11 + 16]> */
		/* 82140D98h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82140D98h case   27:*/		return 0x82140D9C;
		  /* 82140D9Ch */ case   28:  		/* li R4, 1 */
		/* 82140D9Ch case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82140D9Ch case   28:*/		return 0x82140DA0;
		  /* 82140DA0h */ case   29:  		/* mr R3, R31 */
		/* 82140DA0h case   29:*/		regs.R3 = regs.R31;
		/* 82140DA0h case   29:*/		return 0x82140DA4;
		  /* 82140DA4h */ case   30:  		/* add R5, R11, R29 */
		/* 82140DA4h case   30:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R29);
		/* 82140DA4h case   30:*/		return 0x82140DA8;
		  /* 82140DA8h */ case   31:  		/* bl -305736 */
		/* 82140DA8h case   31:*/		regs.LR = 0x82140DAC; return 0x820F6360;
		/* 82140DA8h case   31:*/		return 0x82140DAC;
	}
	return 0x82140DAC;
} // Block from 82140D2Ch-82140DACh (32 instructions)

//////////////////////////////////////////////////////
// Block at 82140DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140DAC);
		  /* 82140DACh */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 82140DACh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140DACh case    0:*/		return 0x82140DB0;
		  /* 82140DB0h */ case    1:  		/* bc 12, CR0_LT, 32 */
		/* 82140DB0h case    1:*/		if ( regs.CR[0].lt ) { return 0x82140DD0;  }
		/* 82140DB0h case    1:*/		return 0x82140DB4;
		  /* 82140DB4h */ case    2:  		/* lwz R11, <#[R31 + 260]> */
		/* 82140DB4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82140DB4h case    2:*/		return 0x82140DB8;
		  /* 82140DB8h */ case    3:  		/* addi R28, R28, 1 */
		/* 82140DB8h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82140DB8h case    3:*/		return 0x82140DBC;
		  /* 82140DBCh */ case    4:  		/* addi R29, R29, 4 */
		/* 82140DBCh case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82140DBCh case    4:*/		return 0x82140DC0;
		  /* 82140DC0h */ case    5:  		/* lwz R11, <#[R11 + 12]> */
		/* 82140DC0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82140DC0h case    5:*/		return 0x82140DC4;
		  /* 82140DC4h */ case    6:  		/* cmplw CR6, R28, R11 */
		/* 82140DC4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82140DC4h case    6:*/		return 0x82140DC8;
		  /* 82140DC8h */ case    7:  		/* bc 12, CR6_LT, -320 */
		/* 82140DC8h case    7:*/		if ( regs.CR[6].lt ) { return 0x82140C88;  }
		/* 82140DC8h case    7:*/		return 0x82140DCC;
	}
	return 0x82140DCC;
} // Block from 82140DACh-82140DCCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 82140DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140DCC);
		  /* 82140DCCh */ case    0:  		/* li R3, 0 */
		/* 82140DCCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82140DCCh case    0:*/		return 0x82140DD0;
	}
	return 0x82140DD0;
} // Block from 82140DCCh-82140DD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82140DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140DD0);
		  /* 82140DD0h */ case    0:  		/* addi R1, R1, 176 */
		/* 82140DD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82140DD0h case    0:*/		return 0x82140DD4;
		  /* 82140DD4h */ case    1:  		/* b -719664 */
		/* 82140DD4h case    1:*/		return 0x820912A4;
		/* 82140DD4h case    1:*/		return 0x82140DD8;
	}
	return 0x82140DD8;
} // Block from 82140DD0h-82140DD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82140DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140DD8);
		  /* 82140DD8h */ case    0:  		/* mfspr R12, LR */
		/* 82140DD8h case    0:*/		regs.R12 = regs.LR;
		/* 82140DD8h case    0:*/		return 0x82140DDC;
		  /* 82140DDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82140DDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82140DDCh case    1:*/		return 0x82140DE0;
		  /* 82140DE0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82140DE0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82140DE0h case    2:*/		return 0x82140DE4;
		  /* 82140DE4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82140DE4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82140DE4h case    3:*/		return 0x82140DE8;
		  /* 82140DE8h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 82140DE8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82140DE8h case    4:*/		return 0x82140DEC;
		  /* 82140DECh */ case    5:  		/* lwz R11, <#[R3 + 20]> */
		/* 82140DECh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82140DECh case    5:*/		return 0x82140DF0;
		  /* 82140DF0h */ case    6:  		/* rlwinm R10, R4, 2, 0, 29 */
		/* 82140DF0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R4);
		/* 82140DF0h case    6:*/		return 0x82140DF4;
		  /* 82140DF4h */ case    7:  		/* lhz R9, <#[R3 + 202]> */
		/* 82140DF4h case    7:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R3 + 0x000000CA) );
		/* 82140DF4h case    7:*/		return 0x82140DF8;
		  /* 82140DF8h */ case    8:  		/* mr R31, R3 */
		/* 82140DF8h case    8:*/		regs.R31 = regs.R3;
		/* 82140DF8h case    8:*/		return 0x82140DFC;
		  /* 82140DFCh */ case    9:  		/* stw R4, <#[R1 + 156]> */
		/* 82140DFCh case    9:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000009C) );
		/* 82140DFCh case    9:*/		return 0x82140E00;
		  /* 82140E00h */ case   10:  		/* cmplwi CR6, R9, 256 */
		/* 82140E00h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000100);
		/* 82140E00h case   10:*/		return 0x82140E04;
		  /* 82140E04h */ case   11:  		/* lwzx R30, <#[R10 + R11]> */
		/* 82140E04h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82140E04h case   11:*/		return 0x82140E08;
		  /* 82140E08h */ case   12:  		/* bc 12, CR6_GT, 40 */
		/* 82140E08h case   12:*/		if ( regs.CR[6].gt ) { return 0x82140E30;  }
		/* 82140E08h case   12:*/		return 0x82140E0C;
		  /* 82140E0Ch */ case   13:  		/* lwz R11, <#[R3 + 260]> */
		/* 82140E0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 82140E0Ch case   13:*/		return 0x82140E10;
		  /* 82140E10h */ case   14:  		/* lis R10, -32254 */
		/* 82140E10h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 82140E10h case   14:*/		return 0x82140E14;
		  /* 82140E14h */ case   15:  		/* li R5, 4511 */
		/* 82140E14h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x119F);
		/* 82140E14h case   15:*/		return 0x82140E18;
		  /* 82140E18h */ case   16:  		/* addi R6, R10, -14504 */
		/* 82140E18h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFC758);
		/* 82140E18h case   16:*/		return 0x82140E1C;
		  /* 82140E1Ch */ case   17:  		/* lwz R4, <#[R11 + 60]> */
		/* 82140E1Ch case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 82140E1Ch case   17:*/		return 0x82140E20;
		  /* 82140E20h */ case   18:  		/* bl -206576 */
		/* 82140E20h case   18:*/		regs.LR = 0x82140E24; return 0x8210E730;
		/* 82140E20h case   18:*/		return 0x82140E24;
		  /* 82140E24h */ case   19:  		/* lis R3, -32768 */
		/* 82140E24h case   19:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82140E24h case   19:*/		return 0x82140E28;
		  /* 82140E28h */ case   20:  		/* ori R3, R3, 16385 */
		/* 82140E28h case   20:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4001);
		/* 82140E28h case   20:*/		return 0x82140E2C;
		  /* 82140E2Ch */ case   21:  		/* b 292 */
		/* 82140E2Ch case   21:*/		return 0x82140F50;
		/* 82140E2Ch case   21:*/		return 0x82140E30;
	}
	return 0x82140E30;
} // Block from 82140DD8h-82140E30h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82140E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140E30);
		  /* 82140E30h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 82140E30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82140E30h case    0:*/		return 0x82140E34;
		  /* 82140E34h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 82140E34h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82140E34h case    1:*/		return 0x82140E38;
		  /* 82140E38h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 82140E38h case    2:*/		if ( regs.CR[6].eq ) { return 0x82140E54;  }
		/* 82140E38h case    2:*/		return 0x82140E3C;
		  /* 82140E3Ch */ case    3:  		/* mr R4, R11 */
		/* 82140E3Ch case    3:*/		regs.R4 = regs.R11;
		/* 82140E3Ch case    3:*/		return 0x82140E40;
		  /* 82140E40h */ case    4:  		/* mr R3, R31 */
		/* 82140E40h case    4:*/		regs.R3 = regs.R31;
		/* 82140E40h case    4:*/		return 0x82140E44;
		  /* 82140E44h */ case    5:  		/* bl -108 */
		/* 82140E44h case    5:*/		regs.LR = 0x82140E48; return 0x82140DD8;
		/* 82140E44h case    5:*/		return 0x82140E48;
		  /* 82140E48h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82140E48h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140E48h case    6:*/		return 0x82140E4C;
		  /* 82140E4Ch */ case    7:  		/* bc 12, CR0_LT, 260 */
		/* 82140E4Ch case    7:*/		if ( regs.CR[0].lt ) { return 0x82140F50;  }
		/* 82140E4Ch case    7:*/		return 0x82140E50;
		  /* 82140E50h */ case    8:  		/* lwz R4, <#[R1 + 156]> */
		/* 82140E50h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000009C) );
		/* 82140E50h case    8:*/		return 0x82140E54;
	}
	return 0x82140E54;
} // Block from 82140E30h-82140E54h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82140E54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140E54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140E54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140E54);
		  /* 82140E54h */ case    0:  		/* lwz R11, <#[R31 + 316]> */
		/* 82140E54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000013C) );
		/* 82140E54h case    0:*/		return 0x82140E58;
		  /* 82140E58h */ case    1:  		/* cmplw CR6, R11, R4 */
		/* 82140E58h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 82140E58h case    1:*/		return 0x82140E5C;
		  /* 82140E5Ch */ case    2:  		/* bc 12, CR6_EQ, 240 */
		/* 82140E5Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82140F4C;  }
		/* 82140E5Ch case    2:*/		return 0x82140E60;
		  /* 82140E60h */ case    3:  		/* li R4, 1 */
		/* 82140E60h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82140E60h case    3:*/		return 0x82140E64;
		  /* 82140E64h */ case    4:  		/* mr R3, R31 */
		/* 82140E64h case    4:*/		regs.R3 = regs.R31;
		/* 82140E64h case    4:*/		return 0x82140E68;
		  /* 82140E68h */ case    5:  		/* bl -306552 */
		/* 82140E68h case    5:*/		regs.LR = 0x82140E6C; return 0x820F60F0;
		/* 82140E68h case    5:*/		return 0x82140E6C;
		  /* 82140E6Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82140E6Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140E6Ch case    6:*/		return 0x82140E70;
		  /* 82140E70h */ case    7:  		/* bc 12, CR0_LT, 224 */
		/* 82140E70h case    7:*/		if ( regs.CR[0].lt ) { return 0x82140F50;  }
		/* 82140E70h case    7:*/		return 0x82140E74;
		  /* 82140E74h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 82140E74h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82140E74h case    8:*/		return 0x82140E78;
		  /* 82140E78h */ case    9:  		/* li R6, 0 */
		/* 82140E78h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82140E78h case    9:*/		return 0x82140E7C;
		  /* 82140E7Ch */ case   10:  		/* lis R5, 1 */
		/* 82140E7Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R5,0x1);
		/* 82140E7Ch case   10:*/		return 0x82140E80;
		  /* 82140E80h */ case   11:  		/* lis R4, -20480 */
		/* 82140E80h case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB000);
		/* 82140E80h case   11:*/		return 0x82140E84;
		  /* 82140E84h */ case   12:  		/* mr R3, R31 */
		/* 82140E84h case   12:*/		regs.R3 = regs.R31;
		/* 82140E84h case   12:*/		return 0x82140E88;
		  /* 82140E88h */ case   13:  		/* lwz R11, <#[R11 + 312]> */
		/* 82140E88h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000138) );
		/* 82140E88h case   13:*/		return 0x82140E8C;
		  /* 82140E8Ch */ case   14:  		/* mtspr CTR, R11 */
		/* 82140E8Ch case   14:*/		regs.CTR = regs.R11;
		/* 82140E8Ch case   14:*/		return 0x82140E90;
		  /* 82140E90h */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 82140E90h case   15:*/		if ( 1 ) { regs.LR = 0x82140E94; return (uint32)regs.CTR; }
		/* 82140E90h case   15:*/		return 0x82140E94;
		  /* 82140E94h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 82140E94h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140E94h case   16:*/		return 0x82140E98;
		  /* 82140E98h */ case   17:  		/* bc 12, CR0_LT, 184 */
		/* 82140E98h case   17:*/		if ( regs.CR[0].lt ) { return 0x82140F50;  }
		/* 82140E98h case   17:*/		return 0x82140E9C;
		  /* 82140E9Ch */ case   18:  		/* lwz R11, <#[R31]> */
		/* 82140E9Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82140E9Ch case   18:*/		return 0x82140EA0;
		  /* 82140EA0h */ case   19:  		/* addi R6, R1, 80 */
		/* 82140EA0h case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82140EA0h case   19:*/		return 0x82140EA4;
		  /* 82140EA4h */ case   20:  		/* addi R5, R1, 88 */
		/* 82140EA4h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 82140EA4h case   20:*/		return 0x82140EA8;
		  /* 82140EA8h */ case   21:  		/* mr R4, R30 */
		/* 82140EA8h case   21:*/		regs.R4 = regs.R30;
		/* 82140EA8h case   21:*/		return 0x82140EAC;
		  /* 82140EACh */ case   22:  		/* mr R3, R31 */
		/* 82140EACh case   22:*/		regs.R3 = regs.R31;
		/* 82140EACh case   22:*/		return 0x82140EB0;
		  /* 82140EB0h */ case   23:  		/* lwz R11, <#[R11 + 328]> */
		/* 82140EB0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000148) );
		/* 82140EB0h case   23:*/		return 0x82140EB4;
		  /* 82140EB4h */ case   24:  		/* mtspr CTR, R11 */
		/* 82140EB4h case   24:*/		regs.CTR = regs.R11;
		/* 82140EB4h case   24:*/		return 0x82140EB8;
		  /* 82140EB8h */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 82140EB8h case   25:*/		if ( 1 ) { regs.LR = 0x82140EBC; return (uint32)regs.CTR; }
		/* 82140EB8h case   25:*/		return 0x82140EBC;
		  /* 82140EBCh */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 82140EBCh case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140EBCh case   26:*/		return 0x82140EC0;
		  /* 82140EC0h */ case   27:  		/* bc 12, CR0_LT, 144 */
		/* 82140EC0h case   27:*/		if ( regs.CR[0].lt ) { return 0x82140F50;  }
		/* 82140EC0h case   27:*/		return 0x82140EC4;
		  /* 82140EC4h */ case   28:  		/* lwz R11, <#[R31]> */
		/* 82140EC4h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82140EC4h case   28:*/		return 0x82140EC8;
		  /* 82140EC8h */ case   29:  		/* addi R7, R1, 84 */
		/* 82140EC8h case   29:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 82140EC8h case   29:*/		return 0x82140ECC;
		  /* 82140ECCh */ case   30:  		/* lis R6, 1 */
		/* 82140ECCh case   30:*/		cpu::op::lis<0>(regs,&regs.R6,0x1);
		/* 82140ECCh case   30:*/		return 0x82140ED0;
		  /* 82140ED0h */ case   31:  		/* li R5, 1 */
		/* 82140ED0h case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82140ED0h case   31:*/		return 0x82140ED4;
		  /* 82140ED4h */ case   32:  		/* addi R4, R1, 156 */
		/* 82140ED4h case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x9C);
		/* 82140ED4h case   32:*/		return 0x82140ED8;
		  /* 82140ED8h */ case   33:  		/* mr R3, R31 */
		/* 82140ED8h case   33:*/		regs.R3 = regs.R31;
		/* 82140ED8h case   33:*/		return 0x82140EDC;
		  /* 82140EDCh */ case   34:  		/* lwz R11, <#[R11 + 332]> */
		/* 82140EDCh case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 82140EDCh case   34:*/		return 0x82140EE0;
		  /* 82140EE0h */ case   35:  		/* mtspr CTR, R11 */
		/* 82140EE0h case   35:*/		regs.CTR = regs.R11;
		/* 82140EE0h case   35:*/		return 0x82140EE4;
		  /* 82140EE4h */ case   36:  		/* bcctrl 20, CR0_LT */
		/* 82140EE4h case   36:*/		if ( 1 ) { regs.LR = 0x82140EE8; return (uint32)regs.CTR; }
		/* 82140EE4h case   36:*/		return 0x82140EE8;
		  /* 82140EE8h */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 82140EE8h case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140EE8h case   37:*/		return 0x82140EEC;
		  /* 82140EECh */ case   38:  		/* bc 12, CR0_LT, 100 */
		/* 82140EECh case   38:*/		if ( regs.CR[0].lt ) { return 0x82140F50;  }
		/* 82140EECh case   38:*/		return 0x82140EF0;
		  /* 82140EF0h */ case   39:  		/* lwz R11, <#[R31]> */
		/* 82140EF0h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82140EF0h case   39:*/		return 0x82140EF4;
		  /* 82140EF4h */ case   40:  		/* mr R3, R31 */
		/* 82140EF4h case   40:*/		regs.R3 = regs.R31;
		/* 82140EF4h case   40:*/		return 0x82140EF8;
		  /* 82140EF8h */ case   41:  		/* lwz R6, <#[R1 + 80]> */
		/* 82140EF8h case   41:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 82140EF8h case   41:*/		return 0x82140EFC;
		  /* 82140EFCh */ case   42:  		/* lwz R5, <#[R1 + 84]> */
		/* 82140EFCh case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 82140EFCh case   42:*/		return 0x82140F00;
		  /* 82140F00h */ case   43:  		/* lwz R4, <#[R1 + 88]> */
		/* 82140F00h case   43:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 82140F00h case   43:*/		return 0x82140F04;
		  /* 82140F04h */ case   44:  		/* lwz R11, <#[R11 + 316]> */
		/* 82140F04h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000013C) );
		/* 82140F04h case   44:*/		return 0x82140F08;
	}
	return 0x82140F08;
} // Block from 82140E54h-82140F08h (45 instructions)

//////////////////////////////////////////////////////
// Block at 82140F08h
// Function '?VSEmitFRC@CVSProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140F08);
		  /* 82140F08h */ case    0:  		/* mtspr CTR, R11 */
		/* 82140F08h case    0:*/		regs.CTR = regs.R11;
		/* 82140F08h case    0:*/		return 0x82140F0C;
		  /* 82140F0Ch */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 82140F0Ch case    1:*/		if ( 1 ) { regs.LR = 0x82140F10; return (uint32)regs.CTR; }
		/* 82140F0Ch case    1:*/		return 0x82140F10;
		  /* 82140F10h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82140F10h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140F10h case    2:*/		return 0x82140F14;
		  /* 82140F14h */ case    3:  		/* bc 12, CR0_LT, 60 */
		/* 82140F14h case    3:*/		if ( regs.CR[0].lt ) { return 0x82140F50;  }
		/* 82140F14h case    3:*/		return 0x82140F18;
		  /* 82140F18h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 82140F18h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82140F18h case    4:*/		return 0x82140F1C;
		  /* 82140F1Ch */ case    5:  		/* mr R3, R31 */
		/* 82140F1Ch case    5:*/		regs.R3 = regs.R31;
		/* 82140F1Ch case    5:*/		return 0x82140F20;
		  /* 82140F20h */ case    6:  		/* lwz R11, <#[R11 + 308]> */
		/* 82140F20h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000134) );
		/* 82140F20h case    6:*/		return 0x82140F24;
		  /* 82140F24h */ case    7:  		/* mtspr CTR, R11 */
		/* 82140F24h case    7:*/		regs.CTR = regs.R11;
		/* 82140F24h case    7:*/		return 0x82140F28;
		  /* 82140F28h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 82140F28h case    8:*/		if ( 1 ) { regs.LR = 0x82140F2C; return (uint32)regs.CTR; }
		/* 82140F28h case    8:*/		return 0x82140F2C;
		  /* 82140F2Ch */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 82140F2Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140F2Ch case    9:*/		return 0x82140F30;
		  /* 82140F30h */ case   10:  		/* bc 12, CR0_LT, 32 */
		/* 82140F30h case   10:*/		if ( regs.CR[0].lt ) { return 0x82140F50;  }
		/* 82140F30h case   10:*/		return 0x82140F34;
		  /* 82140F34h */ case   11:  		/* mr R3, R31 */
		/* 82140F34h case   11:*/		regs.R3 = regs.R31;
		/* 82140F34h case   11:*/		return 0x82140F38;
		  /* 82140F38h */ case   12:  		/* bl -341552 */
		/* 82140F38h case   12:*/		regs.LR = 0x82140F3C; return 0x820ED908;
		/* 82140F38h case   12:*/		return 0x82140F3C;
		  /* 82140F3Ch */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82140F3Ch case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82140F3Ch case   13:*/		return 0x82140F40;
		  /* 82140F40h */ case   14:  		/* bc 12, CR0_LT, 16 */
		/* 82140F40h case   14:*/		if ( regs.CR[0].lt ) { return 0x82140F50;  }
		/* 82140F40h case   14:*/		return 0x82140F44;
		  /* 82140F44h */ case   15:  		/* lwz R11, <#[R1 + 156]> */
		/* 82140F44h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 82140F44h case   15:*/		return 0x82140F48;
		  /* 82140F48h */ case   16:  		/* stw R11, <#[R31 + 316]> */
		/* 82140F48h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000013C) );
		/* 82140F48h case   16:*/		return 0x82140F4C;
	}
	return 0x82140F4C;
} // Block from 82140F08h-82140F4Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 82140F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140F4C);
		  /* 82140F4Ch */ case    0:  		/* li R3, 0 */
		/* 82140F4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82140F4Ch case    0:*/		return 0x82140F50;
	}
	return 0x82140F50;
} // Block from 82140F4Ch-82140F50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82140F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140F50);
		  /* 82140F50h */ case    0:  		/* addi R1, R1, 128 */
		/* 82140F50h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82140F50h case    0:*/		return 0x82140F54;
		  /* 82140F54h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82140F54h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82140F54h case    1:*/		return 0x82140F58;
		  /* 82140F58h */ case    2:  		/* mtspr LR, R12 */
		/* 82140F58h case    2:*/		regs.LR = regs.R12;
		/* 82140F58h case    2:*/		return 0x82140F5C;
		  /* 82140F5Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82140F5Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82140F5Ch case    3:*/		return 0x82140F60;
		  /* 82140F60h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82140F60h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82140F60h case    4:*/		return 0x82140F64;
		  /* 82140F64h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82140F64h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82140F64h case    5:*/		return 0x82140F68;
	}
	return 0x82140F68;
} // Block from 82140F50h-82140F68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82140F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140F68);
		  /* 82140F68h */ case    0:  		/* mfspr R12, LR */
		/* 82140F68h case    0:*/		regs.R12 = regs.LR;
		/* 82140F68h case    0:*/		return 0x82140F6C;
		  /* 82140F6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82140F6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82140F6Ch case    1:*/		return 0x82140F70;
		  /* 82140F70h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82140F70h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82140F70h case    2:*/		return 0x82140F74;
		  /* 82140F74h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82140F74h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82140F74h case    3:*/		return 0x82140F78;
		  /* 82140F78h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82140F78h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82140F78h case    4:*/		return 0x82140F7C;
		  /* 82140F7Ch */ case    5:  		/* lis R11, -32253 */
		/* 82140F7Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82140F7Ch case    5:*/		return 0x82140F80;
		  /* 82140F80h */ case    6:  		/* mr R31, R3 */
		/* 82140F80h case    6:*/		regs.R31 = regs.R3;
		/* 82140F80h case    6:*/		return 0x82140F84;
		  /* 82140F84h */ case    7:  		/* addi R11, R11, 23864 */
		/* 82140F84h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5D38);
		/* 82140F84h case    7:*/		return 0x82140F88;
		  /* 82140F88h */ case    8:  		/* mr R30, R4 */
		/* 82140F88h case    8:*/		regs.R30 = regs.R4;
		/* 82140F88h case    8:*/		return 0x82140F8C;
		  /* 82140F8Ch */ case    9:  		/* stw R11, <#[R3]> */
		/* 82140F8Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82140F8Ch case    9:*/		return 0x82140F90;
		  /* 82140F90h */ case   10:  		/* bl -340624 */
		/* 82140F90h case   10:*/		regs.LR = 0x82140F94; return 0x820EDD00;
		/* 82140F90h case   10:*/		return 0x82140F94;
		  /* 82140F94h */ case   11:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 82140F94h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 82140F94h case   11:*/		return 0x82140F98;
		  /* 82140F98h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 82140F98h case   12:*/		if ( regs.CR[0].eq ) { return 0x82140FA8;  }
		/* 82140F98h case   12:*/		return 0x82140F9C;
		  /* 82140F9Ch */ case   13:  		/* lis R4, 9345 */
		/* 82140F9Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82140F9Ch case   13:*/		return 0x82140FA0;
		  /* 82140FA0h */ case   14:  		/* mr R3, R31 */
		/* 82140FA0h case   14:*/		regs.R3 = regs.R31;
		/* 82140FA0h case   14:*/		return 0x82140FA4;
		  /* 82140FA4h */ case   15:  		/* bl -756844 */
		/* 82140FA4h case   15:*/		regs.LR = 0x82140FA8; return 0x82088338;
		/* 82140FA4h case   15:*/		return 0x82140FA8;
	}
	return 0x82140FA8;
} // Block from 82140F68h-82140FA8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82140FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140FA8);
		  /* 82140FA8h */ case    0:  		/* mr R3, R31 */
		/* 82140FA8h case    0:*/		regs.R3 = regs.R31;
		/* 82140FA8h case    0:*/		return 0x82140FAC;
		  /* 82140FACh */ case    1:  		/* addi R1, R1, 112 */
		/* 82140FACh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82140FACh case    1:*/		return 0x82140FB0;
		  /* 82140FB0h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82140FB0h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82140FB0h case    2:*/		return 0x82140FB4;
		  /* 82140FB4h */ case    3:  		/* mtspr LR, R12 */
		/* 82140FB4h case    3:*/		regs.LR = regs.R12;
		/* 82140FB4h case    3:*/		return 0x82140FB8;
		  /* 82140FB8h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 82140FB8h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82140FB8h case    4:*/		return 0x82140FBC;
		  /* 82140FBCh */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 82140FBCh case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82140FBCh case    5:*/		return 0x82140FC0;
		  /* 82140FC0h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82140FC0h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82140FC0h case    6:*/		return 0x82140FC4;
	}
	return 0x82140FC4;
} // Block from 82140FA8h-82140FC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82140FC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140FC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140FC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140FC4);
		  /* 82140FC4h */ case    0:  		/* nop */
		/* 82140FC4h case    0:*/		cpu::op::nop();
		/* 82140FC4h case    0:*/		return 0x82140FC8;
	}
	return 0x82140FC8;
} // Block from 82140FC4h-82140FC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82140FC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82140FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82140FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82140FC8);
		  /* 82140FC8h */ case    0:  		/* mfspr R12, LR */
		/* 82140FC8h case    0:*/		regs.R12 = regs.LR;
		/* 82140FC8h case    0:*/		return 0x82140FCC;
		  /* 82140FCCh */ case    1:  		/* bl -720300 */
		/* 82140FCCh case    1:*/		regs.LR = 0x82140FD0; return 0x82091220;
		/* 82140FCCh case    1:*/		return 0x82140FD0;
		  /* 82140FD0h */ case    2:  		/* stwu R1, <#[R1 - 288]> */
		/* 82140FD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 82140FD0h case    2:*/		return 0x82140FD4;
		  /* 82140FD4h */ case    3:  		/* lwz R23, <#[R3 + 260]> */
		/* 82140FD4h case    3:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R3 + 0x00000104) );
		/* 82140FD4h case    3:*/		return 0x82140FD8;
		  /* 82140FD8h */ case    4:  		/* mr R20, R3 */
		/* 82140FD8h case    4:*/		regs.R20 = regs.R3;
		/* 82140FD8h case    4:*/		return 0x82140FDC;
		  /* 82140FDCh */ case    5:  		/* lwz R11, <#[R23]> */
		/* 82140FDCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 82140FDCh case    5:*/		return 0x82140FE0;
		  /* 82140FE0h */ case    6:  		/* rlwinm. R27, R11, 0, 12, 31 */
		/* 82140FE0h case    6:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R27,regs.R11);
		/* 82140FE0h case    6:*/		return 0x82140FE4;
		  /* 82140FE4h */ case    7:  		/* bc 12, CR0_EQ, 1312 */
		/* 82140FE4h case    7:*/		if ( regs.CR[0].eq ) { return 0x82141504;  }
		/* 82140FE4h case    7:*/		return 0x82140FE8;
		  /* 82140FE8h */ case    8:  		/* lwz R11, <#[R23 + 4]> */
		/* 82140FE8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 82140FE8h case    8:*/		return 0x82140FEC;
		  /* 82140FECh */ case    9:  		/* li R17, 0 */
		/* 82140FECh case    9:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 82140FECh case    9:*/		return 0x82140FF0;
		  /* 82140FF0h */ case   10:  		/* twi 6, R27, 0 */
		/* 82140FF0h case   10:*/		cpu::op::tw<6>(regs, 0x82140FF0, regs.R27, 0x00000000);
		/* 82140FF0h case   10:*/		return 0x82140FF4;
		  /* 82140FF4h */ case   11:  		/* divwu. R15, R11, R27 */
		/* 82140FF4h case   11:*/		cpu::op::divwu<1>(regs,&regs.R15,regs.R11,regs.R27);
		/* 82140FF4h case   11:*/		return 0x82140FF8;
		  /* 82140FF8h */ case   12:  		/* bc 12, CR0_EQ, 1292 */
		/* 82140FF8h case   12:*/		if ( regs.CR[0].eq ) { return 0x82141504;  }
		/* 82140FF8h case   12:*/		return 0x82140FFC;
		  /* 82140FFCh */ case   13:  		/* lis R11, -32256 */
		/* 82140FFCh case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82140FFCh case   13:*/		return 0x82141000;
		  /* 82141000h */ case   14:  		/* li R22, 0 */
		/* 82141000h case   14:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82141000h case   14:*/		return 0x82141004;
		  /* 82141004h */ case   15:  		/* li R24, 0 */
		/* 82141004h case   15:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82141004h case   15:*/		return 0x82141008;
		  /* 82141008h */ case   16:  		/* rlwinm R16, R27, 2, 0, 29 */
		/* 82141008h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R16,regs.R27);
		/* 82141008h case   16:*/		return 0x8214100C;
		  /* 8214100Ch */ case   17:  		/* li R21, -1 */
		/* 8214100Ch case   17:*/		cpu::op::li<0>(regs,&regs.R21,0xFFFFFFFF);
		/* 8214100Ch case   17:*/		return 0x82141010;
		  /* 82141010h */ case   18:  		/* lfd FR0, <#[R11 + 1848]> */
		/* 82141010h case   18:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000738) );
		/* 82141010h case   18:*/		return 0x82141014;
		  /* 82141014h */ case   19:  		/* li R26, -1 */
		/* 82141014h case   19:*/		cpu::op::li<0>(regs,&regs.R26,0xFFFFFFFF);
		/* 82141014h case   19:*/		return 0x82141018;
		  /* 82141018h */ case   20:  		/* lis R18, 4096 */
		/* 82141018h case   20:*/		cpu::op::lis<0>(regs,&regs.R18,0x1000);
		/* 82141018h case   20:*/		return 0x8214101C;
		  /* 8214101Ch */ case   21:  		/* addi R11, R1, 96 */
		/* 8214101Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8214101Ch case   21:*/		return 0x82141020;
		  /* 82141020h */ case   22:  		/* stw R26, <#[R1 + 80]> */
		/* 82141020h case   22:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000050) );
		/* 82141020h case   22:*/		return 0x82141024;
		  /* 82141024h */ case   23:  		/* li R14, 0 */
		/* 82141024h case   23:*/		cpu::op::li<0>(regs,&regs.R14,0x0);
		/* 82141024h case   23:*/		return 0x82141028;
		  /* 82141028h */ case   24:  		/* stw R26, <#[R1 + 92]> */
		/* 82141028h case   24:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x0000005C) );
		/* 82141028h case   24:*/		return 0x8214102C;
		  /* 8214102Ch */ case   25:  		/* mr R29, R26 */
		/* 8214102Ch case   25:*/		regs.R29 = regs.R26;
		/* 8214102Ch case   25:*/		return 0x82141030;
		  /* 82141030h */ case   26:  		/* mr R19, R14 */
		/* 82141030h case   26:*/		regs.R19 = regs.R14;
		/* 82141030h case   26:*/		return 0x82141034;
		  /* 82141034h */ case   27:  		/* stw R14, <#[R1 + 88]> */
		/* 82141034h case   27:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000058) );
		/* 82141034h case   27:*/		return 0x82141038;
		  /* 82141038h */ case   28:  		/* mr R31, R14 */
		/* 82141038h case   28:*/		regs.R31 = regs.R14;
		/* 82141038h case   28:*/		return 0x8214103C;
		  /* 8214103Ch */ case   29:  		/* stw R14, <#[R1 + 84]> */
		/* 8214103Ch case   29:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000054) );
		/* 8214103Ch case   29:*/		return 0x82141040;
		  /* 82141040h */ case   30:  		/* std R21, <#[R11]> */
		/* 82141040h case   30:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 82141040h case   30:*/		return 0x82141044;
		  /* 82141044h */ case   31:  		/* mr R25, R14 */
		/* 82141044h case   31:*/		regs.R25 = regs.R14;
		/* 82141044h case   31:*/		return 0x82141048;
		  /* 82141048h */ case   32:  		/* std R21, <#[R11 + 8]> */
		/* 82141048h case   32:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000008) );
		/* 82141048h case   32:*/		return 0x8214104C;
		  /* 8214104Ch */ case   33:  		/* mr R28, R26 */
		/* 8214104Ch case   33:*/		regs.R28 = regs.R26;
		/* 8214104Ch case   33:*/		return 0x82141050;
		  /* 82141050h */ case   34:  		/* cmplwi CR6, R27, 0 */
		/* 82141050h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82141050h case   34:*/		return 0x82141054;
		  /* 82141054h */ case   35:  		/* bc 12, CR6_EQ, 504 */
		/* 82141054h case   35:*/		if ( regs.CR[6].eq ) { return 0x8214124C;  }
		/* 82141054h case   35:*/		return 0x82141058;
		  /* 82141058h */ case   36:  		/* lwz R9, <#[R23 + 8]> */
		/* 82141058h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000008) );
		/* 82141058h case   36:*/		return 0x8214105C;
		  /* 8214105Ch */ case   37:  		/* addi R11, R1, 112 */
		/* 8214105Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 8214105Ch case   37:*/		return 0x82141060;
		  /* 82141060h */ case   38:  		/* addi R10, R1, 96 */
		/* 82141060h case   38:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 82141060h case   38:*/		return 0x82141064;
		  /* 82141064h */ case   39:  		/* lwz R4, <#[R20 + 20]> */
		/* 82141064h case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R20 + 0x00000014) );
		/* 82141064h case   39:*/		return 0x82141068;
		  /* 82141068h */ case   40:  		/* addi R8, R11, -4 */
		/* 82141068h case   40:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFC);
		/* 82141068h case   40:*/		return 0x8214106C;
		  /* 8214106Ch */ case   41:  		/* addi R7, R10, -4 */
		/* 8214106Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFFC);
		/* 8214106Ch case   41:*/		return 0x82141070;
		  /* 82141070h */ case   42:  		/* add R5, R9, R24 */
		/* 82141070h case   42:*/		cpu::op::add<0>(regs,&regs.R5,regs.R9,regs.R24);
		/* 82141070h case   42:*/		return 0x82141074;
		  /* 82141074h */ case   43:  		/* mr R3, R27 */
		/* 82141074h case   43:*/		regs.R3 = regs.R27;
		/* 82141074h case   43:*/		return 0x82141078;
		  /* 82141078h */ case   44:  		/* lwz R11, <#[R5]> */
		/* 82141078h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82141078h case   44:*/		return 0x8214107C;
		  /* 8214107Ch */ case   45:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8214107Ch case   45:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8214107Ch case   45:*/		return 0x82141080;
		  /* 82141080h */ case   46:  		/* lwzx R10, <#[R10 + R4]> */
		/* 82141080h case   46:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82141080h case   46:*/		return 0x82141084;
		  /* 82141084h */ case   47:  		/* lwz R9, <#[R10 + 16]> */
		/* 82141084h case   47:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 82141084h case   47:*/		return 0x82141088;
		  /* 82141088h */ case   48:  		/* cmplwi CR6, R9, 1 */
		/* 82141088h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 82141088h case   48:*/		return 0x8214108C;
		  /* 8214108Ch */ case   49:  		/* bc 12, CR6_LT, 380 */
		/* 8214108Ch case   49:*/		if ( regs.CR[6].lt ) { return 0x82141208;  }
		/* 8214108Ch case   49:*/		return 0x82141090;
		  /* 82141090h */ case   50:  		/* bc 12, CR6_EQ, 320 */
		/* 82141090h case   50:*/		if ( regs.CR[6].eq ) { return 0x821411D0;  }
		/* 82141090h case   50:*/		return 0x82141094;
		  /* 82141094h */ case   51:  		/* cmplwi CR6, R9, 3 */
		/* 82141094h case   51:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 82141094h case   51:*/		return 0x82141098;
		  /* 82141098h */ case   52:  		/* bc 12, CR6_LT, 168 */
		/* 82141098h case   52:*/		if ( regs.CR[6].lt ) { return 0x82141140;  }
		/* 82141098h case   52:*/		return 0x8214109C;
		  /* 8214109Ch */ case   53:  		/* bc 4, CR6_EQ, 412 */
		/* 8214109Ch case   53:*/		if ( !regs.CR[6].eq ) { return 0x82141238;  }
		/* 8214109Ch case   53:*/		return 0x821410A0;
		  /* 821410A0h */ case   54:  		/* cmpwi CR6, R28, -1 */
		/* 821410A0h case   54:*/		cpu::op::cmpwi<6>(regs,regs.R28,0xFFFFFFFF);
		/* 821410A0h case   54:*/		return 0x821410A4;
		  /* 821410A4h */ case   55:  		/* bc 4, CR6_EQ, 404 */
		/* 821410A4h case   55:*/		if ( !regs.CR[6].eq ) { return 0x82141238;  }
		/* 821410A4h case   55:*/		return 0x821410A8;
		  /* 821410A8h */ case   56:  		/* lwz R10, <#[R10 + 72]> */
		/* 821410A8h case   56:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000048) );
		/* 821410A8h case   56:*/		return 0x821410AC;
		  /* 821410ACh */ case   57:  		/* mr R28, R11 */
		/* 821410ACh case   57:*/		regs.R28 = regs.R11;
		/* 821410ACh case   57:*/		return 0x821410B0;
		  /* 821410B0h */ case   58:  		/* stw R11, <#[R8 + 4]> */
		/* 821410B0h case   58:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 821410B0h case   58:*/		return 0x821410B4;
		  /* 821410B4h */ case   59:  		/* stw R26, <#[R7 + 4]> */
		/* 821410B4h case   59:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R7 + 0x00000004) );
		/* 821410B4h case   59:*/		return 0x821410B8;
		  /* 821410B8h */ case   60:  		/* cmpwi CR6, R10, -1 */
		/* 821410B8h case   60:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 821410B8h case   60:*/		return 0x821410BC;
		  /* 821410BCh */ case   61:  		/* bc 12, CR6_EQ, 120 */
		/* 821410BCh case   61:*/		if ( regs.CR[6].eq ) { return 0x82141134;  }
		/* 821410BCh case   61:*/		return 0x821410C0;
		  /* 821410C0h */ case   62:  		/* lwz R11, <#[R20 + 24]> */
		/* 821410C0h case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000018) );
		/* 821410C0h case   62:*/		return 0x821410C4;
		  /* 821410C4h */ case   63:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821410C4h case   63:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821410C4h case   63:*/		return 0x821410C8;
		  /* 821410C8h */ case   64:  		/* lwzx R30, <#[R10 + R11]> */
		/* 821410C8h case   64:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821410C8h case   64:*/		return 0x821410CC;
		  /* 821410CCh */ case   65:  		/* lwz R11, <#[R30]> */
		/* 821410CCh case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821410CCh case   65:*/		return 0x821410D0;
		  /* 821410D0h */ case   66:  		/* stw R30, <#[R1 + 84]> */
		/* 821410D0h case   66:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 821410D0h case   66:*/		return 0x821410D4;
		  /* 821410D4h */ case   67:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 821410D4h case   67:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 821410D4h case   67:*/		return 0x821410D8;
		  /* 821410D8h */ case   68:  		/* cmplw CR6, R10, R18 */
		/* 821410D8h case   68:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R18);
		/* 821410D8h case   68:*/		return 0x821410DC;
		  /* 821410DCh */ case   69:  		/* bc 4, CR6_EQ, 80 */
		/* 821410DCh case   69:*/		if ( !regs.CR[6].eq ) { return 0x8214112C;  }
		/* 821410DCh case   69:*/		return 0x821410E0;
		  /* 821410E0h */ case   70:  		/* rlwinm. R6, R11, 0, 12, 31 */
		/* 821410E0h case   70:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R6,regs.R11);
		/* 821410E0h case   70:*/		return 0x821410E4;
		  /* 821410E4h */ case   71:  		/* li R10, 0 */
		/* 821410E4h case   71:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821410E4h case   71:*/		return 0x821410E8;
		  /* 821410E8h */ case   72:  		/* bc 12, CR0_EQ, 76 */
		/* 821410E8h case   72:*/		if ( regs.CR[0].eq ) { return 0x82141134;  }
		/* 821410E8h case   72:*/		return 0x821410EC;
		  /* 821410ECh */ case   73:  		/* lwz R9, <#[R30 + 16]> */
		/* 821410ECh case   73:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 821410ECh case   73:*/		return 0x821410F0;
		  /* 821410F0h */ case   74:  		/* li R11, 0 */
		/* 821410F0h case   74:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821410F0h case   74:*/		return 0x821410F4;
		  /* 821410F4h */ case   75:  		/* lwzx R29, <#[R9 + R11]> */
		/* 821410F4h case   75:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821410F4h case   75:*/		return 0x821410F8;
		  /* 821410F8h */ case   76:  		/* cmplw CR6, R29, R28 */
		/* 821410F8h case   76:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 821410F8h case   76:*/		return 0x821410FC;
		  /* 821410FCh */ case   77:  		/* bc 12, CR6_EQ, 28 */
		/* 821410FCh case   77:*/		if ( regs.CR[6].eq ) { return 0x82141118;  }
		/* 821410FCh case   77:*/		return 0x82141100;
		  /* 82141100h */ case   78:  		/* addi R10, R10, 1 */
		/* 82141100h case   78:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82141100h case   78:*/		return 0x82141104;
		  /* 82141104h */ case   79:  		/* addi R11, R11, 4 */
		/* 82141104h case   79:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82141104h case   79:*/		return 0x82141108;
		  /* 82141108h */ case   80:  		/* cmplw CR6, R10, R6 */
		/* 82141108h case   80:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 82141108h case   80:*/		return 0x8214110C;
		  /* 8214110Ch */ case   81:  		/* bc 12, CR6_LT, -24 */
		/* 8214110Ch case   81:*/		if ( regs.CR[6].lt ) { return 0x821410F4;  }
		/* 8214110Ch case   81:*/		return 0x82141110;
		  /* 82141110h */ case   82:  		/* lwz R29, <#[R1 + 80]> */
		/* 82141110h case   82:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82141110h case   82:*/		return 0x82141114;
		  /* 82141114h */ case   83:  		/* b 32 */
		/* 82141114h case   83:*/		return 0x82141134;
		/* 82141114h case   83:*/		return 0x82141118;
	}
	return 0x82141118;
} // Block from 82140FC8h-82141118h (84 instructions)

//////////////////////////////////////////////////////
// Block at 82141118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141118);
		  /* 82141118h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 82141118h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82141118h case    0:*/		return 0x8214111C;
		  /* 8214111Ch */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8214111Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8214111Ch case    1:*/		return 0x82141120;
		  /* 82141120h */ case    2:  		/* lwz R29, <#[R1 + 80]> */
		/* 82141120h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82141120h case    2:*/		return 0x82141124;
		  /* 82141124h */ case    3:  		/* lwzx R28, <#[R10 + R11]> */
		/* 82141124h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82141124h case    3:*/		return 0x82141128;
		  /* 82141128h */ case    4:  		/* b 12 */
		/* 82141128h case    4:*/		return 0x82141134;
		/* 82141128h case    4:*/		return 0x8214112C;
	}
	return 0x8214112C;
} // Block from 82141118h-8214112Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214112Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214112C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214112C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214112C);
		  /* 8214112Ch */ case    0:  		/* li R11, 0 */
		/* 8214112Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214112Ch case    0:*/		return 0x82141130;
		  /* 82141130h */ case    1:  		/* stw R11, <#[R1 + 84]> */
		/* 82141130h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82141130h case    1:*/		return 0x82141134;
	}
	return 0x82141134;
} // Block from 8214112Ch-82141134h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82141134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141134);
		  /* 82141134h */ case    0:  		/* addi R7, R7, 4 */
		/* 82141134h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 82141134h case    0:*/		return 0x82141138;
		  /* 82141138h */ case    1:  		/* addi R8, R8, 4 */
		/* 82141138h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82141138h case    1:*/		return 0x8214113C;
		  /* 8214113Ch */ case    2:  		/* b 248 */
		/* 8214113Ch case    2:*/		return 0x82141234;
		/* 8214113Ch case    2:*/		return 0x82141140;
	}
	return 0x82141140;
} // Block from 82141134h-82141140h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82141140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141140);
		  /* 82141140h */ case    0:  		/* cmpwi CR6, R29, -1 */
		/* 82141140h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 82141140h case    0:*/		return 0x82141144;
		  /* 82141144h */ case    1:  		/* bc 4, CR6_EQ, 244 */
		/* 82141144h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82141238;  }
		/* 82141144h case    1:*/		return 0x82141148;
		  /* 82141148h */ case    2:  		/* lwz R10, <#[R10 + 72]> */
		/* 82141148h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000048) );
		/* 82141148h case    2:*/		return 0x8214114C;
		  /* 8214114Ch */ case    3:  		/* mr R29, R11 */
		/* 8214114Ch case    3:*/		regs.R29 = regs.R11;
		/* 8214114Ch case    3:*/		return 0x82141150;
		  /* 82141150h */ case    4:  		/* stw R11, <#[R8 + 4]> */
		/* 82141150h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 82141150h case    4:*/		return 0x82141154;
		  /* 82141154h */ case    5:  		/* stw R11, <#[R1 + 80]> */
		/* 82141154h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82141154h case    5:*/		return 0x82141158;
		  /* 82141158h */ case    6:  		/* cmpwi CR6, R10, -1 */
		/* 82141158h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82141158h case    6:*/		return 0x8214115C;
		  /* 8214115Ch */ case    7:  		/* stw R26, <#[R7 + 4]> */
		/* 8214115Ch case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R7 + 0x00000004) );
		/* 8214115Ch case    7:*/		return 0x82141160;
		  /* 82141160h */ case    8:  		/* bc 12, CR6_EQ, -44 */
		/* 82141160h case    8:*/		if ( regs.CR[6].eq ) { return 0x82141134;  }
		/* 82141160h case    8:*/		return 0x82141164;
		  /* 82141164h */ case    9:  		/* lwz R11, <#[R20 + 24]> */
		/* 82141164h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000018) );
		/* 82141164h case    9:*/		return 0x82141168;
		  /* 82141168h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82141168h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82141168h case   10:*/		return 0x8214116C;
		  /* 8214116Ch */ case   11:  		/* lwzx R14, <#[R10 + R11]> */
		/* 8214116Ch case   11:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8214116Ch case   11:*/		return 0x82141170;
		  /* 82141170h */ case   12:  		/* lwz R11, <#[R14]> */
		/* 82141170h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 82141170h case   12:*/		return 0x82141174;
		  /* 82141174h */ case   13:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 82141174h case   13:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 82141174h case   13:*/		return 0x82141178;
		  /* 82141178h */ case   14:  		/* cmplw CR6, R10, R18 */
		/* 82141178h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R18);
		/* 82141178h case   14:*/		return 0x8214117C;
		  /* 8214117Ch */ case   15:  		/* bc 4, CR6_EQ, 76 */
		/* 8214117Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x821411C8;  }
		/* 8214117Ch case   15:*/		return 0x82141180;
		  /* 82141180h */ case   16:  		/* rlwinm. R6, R11, 0, 12, 31 */
		/* 82141180h case   16:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R6,regs.R11);
		/* 82141180h case   16:*/		return 0x82141184;
		  /* 82141184h */ case   17:  		/* li R10, 0 */
		/* 82141184h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82141184h case   17:*/		return 0x82141188;
		  /* 82141188h */ case   18:  		/* bc 12, CR0_EQ, -84 */
		/* 82141188h case   18:*/		if ( regs.CR[0].eq ) { return 0x82141134;  }
		/* 82141188h case   18:*/		return 0x8214118C;
		  /* 8214118Ch */ case   19:  		/* lwz R9, <#[R14 + 16]> */
		/* 8214118Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R14 + 0x00000010) );
		/* 8214118Ch case   19:*/		return 0x82141190;
		  /* 82141190h */ case   20:  		/* li R11, 0 */
		/* 82141190h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82141190h case   20:*/		return 0x82141194;
		  /* 82141194h */ case   21:  		/* lwzx R30, <#[R9 + R11]> */
		/* 82141194h case   21:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82141194h case   21:*/		return 0x82141198;
		  /* 82141198h */ case   22:  		/* cmplw CR6, R30, R29 */
		/* 82141198h case   22:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 82141198h case   22:*/		return 0x8214119C;
		  /* 8214119Ch */ case   23:  		/* bc 12, CR6_EQ, 24 */
		/* 8214119Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x821411B4;  }
		/* 8214119Ch case   23:*/		return 0x821411A0;
		  /* 821411A0h */ case   24:  		/* addi R10, R10, 1 */
		/* 821411A0h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821411A0h case   24:*/		return 0x821411A4;
		  /* 821411A4h */ case   25:  		/* addi R11, R11, 4 */
		/* 821411A4h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821411A4h case   25:*/		return 0x821411A8;
		  /* 821411A8h */ case   26:  		/* cmplw CR6, R10, R6 */
		/* 821411A8h case   26:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 821411A8h case   26:*/		return 0x821411AC;
		  /* 821411ACh */ case   27:  		/* bc 12, CR6_LT, -24 */
		/* 821411ACh case   27:*/		if ( regs.CR[6].lt ) { return 0x82141194;  }
		/* 821411ACh case   27:*/		return 0x821411B0;
		  /* 821411B0h */ case   28:  		/* b -124 */
		/* 821411B0h case   28:*/		return 0x82141134;
		/* 821411B0h case   28:*/		return 0x821411B4;
	}
	return 0x821411B4;
} // Block from 82141140h-821411B4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821411B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821411B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821411B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821411B4);
		  /* 821411B4h */ case    0:  		/* lwz R11, <#[R14 + 8]> */
		/* 821411B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 821411B4h case    0:*/		return 0x821411B8;
		  /* 821411B8h */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821411B8h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821411B8h case    1:*/		return 0x821411BC;
		  /* 821411BCh */ case    2:  		/* lwzx R29, <#[R10 + R11]> */
		/* 821411BCh case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821411BCh case    2:*/		return 0x821411C0;
		  /* 821411C0h */ case    3:  		/* stw R29, <#[R1 + 80]> */
		/* 821411C0h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821411C0h case    3:*/		return 0x821411C4;
		  /* 821411C4h */ case    4:  		/* b -144 */
		/* 821411C4h case    4:*/		return 0x82141134;
		/* 821411C4h case    4:*/		return 0x821411C8;
	}
	return 0x821411C8;
} // Block from 821411B4h-821411C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821411C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821411C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821411C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821411C8);
		  /* 821411C8h */ case    0:  		/* li R14, 0 */
		/* 821411C8h case    0:*/		cpu::op::li<0>(regs,&regs.R14,0x0);
		/* 821411C8h case    0:*/		return 0x821411CC;
		  /* 821411CCh */ case    1:  		/* b -152 */
		/* 821411CCh case    1:*/		return 0x82141134;
		/* 821411CCh case    1:*/		return 0x821411D0;
	}
	return 0x821411D0;
} // Block from 821411C8h-821411D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821411D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821411D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821411D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821411D0);
		  /* 821411D0h */ case    0:  		/* lwz R9, <#[R10 + 72]> */
		/* 821411D0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000048) );
		/* 821411D0h case    0:*/		return 0x821411D4;
		  /* 821411D4h */ case    1:  		/* cmpwi CR6, R9, -1 */
		/* 821411D4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 821411D4h case    1:*/		return 0x821411D8;
		  /* 821411D8h */ case    2:  		/* bc 12, CR6_EQ, 96 */
		/* 821411D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82141238;  }
		/* 821411D8h case    2:*/		return 0x821411DC;
		  /* 821411DCh */ case    3:  		/* cmplwi CR6, R25, 0 */
		/* 821411DCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821411DCh case    3:*/		return 0x821411E0;
		  /* 821411E0h */ case    4:  		/* bc 4, CR6_EQ, 88 */
		/* 821411E0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82141238;  }
		/* 821411E0h case    4:*/		return 0x821411E4;
		  /* 821411E4h */ case    5:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 821411E4h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 821411E4h case    5:*/		return 0x821411E8;
		  /* 821411E8h */ case    6:  		/* lwz R9, <#[R20 + 24]> */
		/* 821411E8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000018) );
		/* 821411E8h case    6:*/		return 0x821411EC;
		  /* 821411ECh */ case    7:  		/* stw R11, <#[R8 + 4]> */
		/* 821411ECh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 821411ECh case    7:*/		return 0x821411F0;
		  /* 821411F0h */ case    8:  		/* addi R8, R8, 4 */
		/* 821411F0h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821411F0h case    8:*/		return 0x821411F4;
		  /* 821411F4h */ case    9:  		/* rlwinm R6, R10, 2, 0, 29 */
		/* 821411F4h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R10);
		/* 821411F4h case    9:*/		return 0x821411F8;
		  /* 821411F8h */ case   10:  		/* stw R10, <#[R7 + 4]> */
		/* 821411F8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000004) );
		/* 821411F8h case   10:*/		return 0x821411FC;
		  /* 821411FCh */ case   11:  		/* addi R7, R7, 4 */
		/* 821411FCh case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 821411FCh case   11:*/		return 0x82141200;
		  /* 82141200h */ case   12:  		/* lwzx R25, <#[R9 + R6]> */
		/* 82141200h case   12:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 82141200h case   12:*/		return 0x82141204;
		  /* 82141204h */ case   13:  		/* b 48 */
		/* 82141204h case   13:*/		return 0x82141234;
		/* 82141204h case   13:*/		return 0x82141208;
	}
	return 0x82141208;
} // Block from 821411D0h-82141208h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82141208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141208);
		  /* 82141208h */ case    0:  		/* lwz R9, <#[R10 + 72]> */
		/* 82141208h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000048) );
		/* 82141208h case    0:*/		return 0x8214120C;
		  /* 8214120Ch */ case    1:  		/* cmpwi CR6, R9, -1 */
		/* 8214120Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8214120Ch case    1:*/		return 0x82141210;
		  /* 82141210h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 82141210h case    2:*/		if ( regs.CR[6].eq ) { return 0x82141238;  }
		/* 82141210h case    2:*/		return 0x82141214;
		  /* 82141214h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 82141214h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82141214h case    3:*/		return 0x82141218;
		  /* 82141218h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 82141218h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82141238;  }
		/* 82141218h case    4:*/		return 0x8214121C;
		  /* 8214121Ch */ case    5:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 8214121Ch case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 8214121Ch case    5:*/		return 0x82141220;
		  /* 82141220h */ case    6:  		/* lwz R9, <#[R20 + 24]> */
		/* 82141220h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000018) );
		/* 82141220h case    6:*/		return 0x82141224;
		  /* 82141224h */ case    7:  		/* stwu R11, <#[R8 + 4]> */
		/* 82141224h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 82141224h case    7:*/		return 0x82141228;
		  /* 82141228h */ case    8:  		/* rlwinm R6, R10, 2, 0, 29 */
		/* 82141228h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R10);
		/* 82141228h case    8:*/		return 0x8214122C;
		  /* 8214122Ch */ case    9:  		/* stwu R10, <#[R7 + 4]> */
		/* 8214122Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000004) );
		regs.R7 = (uint32)(regs.R7 + 0x00000004);
		/* 8214122Ch case    9:*/		return 0x82141230;
		  /* 82141230h */ case   10:  		/* lwzx R31, <#[R6 + R9]> */
		/* 82141230h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R6 + regs.R9 + 0x00000000) );
		/* 82141230h case   10:*/		return 0x82141234;
	}
	return 0x82141234;
} // Block from 82141208h-82141234h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82141234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141234);
		  /* 82141234h */ case    0:  		/* addi R19, R19, 1 */
		/* 82141234h case    0:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x1);
		/* 82141234h case    0:*/		return 0x82141238;
	}
	return 0x82141238;
} // Block from 82141234h-82141238h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82141238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141238);
		  /* 82141238h */ case    0:  		/* addic. R3, R3, -1 */
		/* 82141238h case    0:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0xFFFFFFFF);
		/* 82141238h case    0:*/		return 0x8214123C;
		  /* 8214123Ch */ case    1:  		/* addi R5, R5, 4 */
		/* 8214123Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 8214123Ch case    1:*/		return 0x82141240;
		  /* 82141240h */ case    2:  		/* bc 4, CR0_EQ, -456 */
		/* 82141240h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82141078;  }
		/* 82141240h case    2:*/		return 0x82141244;
		  /* 82141244h */ case    3:  		/* stw R14, <#[R1 + 88]> */
		/* 82141244h case    3:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000058) );
		/* 82141244h case    3:*/		return 0x82141248;
		  /* 82141248h */ case    4:  		/* stw R28, <#[R1 + 92]> */
		/* 82141248h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000005C) );
		/* 82141248h case    4:*/		return 0x8214124C;
	}
	return 0x8214124C;
} // Block from 82141238h-8214124Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214124Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214124C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214124C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214124C);
		  /* 8214124Ch */ case    0:  		/* cmplw CR6, R19, R27 */
		/* 8214124Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R27);
		/* 8214124Ch case    0:*/		return 0x82141250;
		  /* 82141250h */ case    1:  		/* bc 4, CR6_EQ, 672 */
		/* 82141250h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821414F0;  }
		/* 82141250h case    1:*/		return 0x82141254;
		  /* 82141254h */ case    2:  		/* cmplwi CR6, R19, 1 */
		/* 82141254h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000001);
		/* 82141254h case    2:*/		return 0x82141258;
		  /* 82141258h */ case    3:  		/* bc 4, CR6_GT, 664 */
		/* 82141258h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821414F0;  }
		/* 82141258h case    3:*/		return 0x8214125C;
		  /* 8214125Ch */ case    4:  		/* li R10, 0 */
		/* 8214125Ch case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8214125Ch case    4:*/		return 0x82141260;
		  /* 82141260h */ case    5:  		/* cmplwi CR6, R25, 0 */
		/* 82141260h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82141260h case    5:*/		return 0x82141264;
		  /* 82141264h */ case    6:  		/* bc 12, CR6_EQ, 156 */
		/* 82141264h case    6:*/		if ( regs.CR[6].eq ) { return 0x82141300;  }
		/* 82141264h case    6:*/		return 0x82141268;
		  /* 82141268h */ case    7:  		/* lis R11, 8272 */
		/* 82141268h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0x2050);
		/* 82141268h case    7:*/		return 0x8214126C;
		  /* 8214126Ch */ case    8:  		/* lwz R9, <#[R25]> */
		/* 8214126Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000000) );
		/* 8214126Ch case    8:*/		return 0x82141270;
		  /* 82141270h */ case    9:  		/* ori R11, R11, 1 */
		/* 82141270h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82141270h case    9:*/		return 0x82141274;
		  /* 82141274h */ case   10:  		/* cmplw CR6, R9, R11 */
		/* 82141274h case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82141274h case   10:*/		return 0x82141278;
		  /* 82141278h */ case   11:  		/* bc 4, CR6_EQ, 132 */
		/* 82141278h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821412FC;  }
		/* 82141278h case   11:*/		return 0x8214127C;
		  /* 8214127Ch */ case   12:  		/* cmpwi CR6, R29, -1 */
		/* 8214127Ch case   12:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 8214127Ch case   12:*/		return 0x82141280;
		  /* 82141280h */ case   13:  		/* bc 12, CR6_EQ, 36 */
		/* 82141280h case   13:*/		if ( regs.CR[6].eq ) { return 0x821412A4;  }
		/* 82141280h case   13:*/		return 0x82141284;
		  /* 82141284h */ case   14:  		/* lwz R11, <#[R25 + 8]> */
		/* 82141284h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 82141284h case   14:*/		return 0x82141288;
		  /* 82141288h */ case   15:  		/* lwz R9, <#[R11]> */
		/* 82141288h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82141288h case   15:*/		return 0x8214128C;
		  /* 8214128Ch */ case   16:  		/* cmplw CR6, R29, R9 */
		/* 8214128Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R9);
		/* 8214128Ch case   16:*/		return 0x82141290;
		  /* 82141290h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 82141290h case   17:*/		if ( regs.CR[6].eq ) { return 0x821412A4;  }
		/* 82141290h case   17:*/		return 0x82141294;
		  /* 82141294h */ case   18:  		/* lwz R11, <#[R11 + 4]> */
		/* 82141294h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82141294h case   18:*/		return 0x82141298;
		  /* 82141298h */ case   19:  		/* cmplw CR6, R29, R11 */
		/* 82141298h case   19:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82141298h case   19:*/		return 0x8214129C;
		  /* 8214129Ch */ case   20:  		/* bc 12, CR6_EQ, 8 */
		/* 8214129Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x821412A4;  }
		/* 8214129Ch case   20:*/		return 0x821412A0;
		  /* 821412A0h */ case   21:  		/* li R10, 1 */
		/* 821412A0h case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821412A0h case   21:*/		return 0x821412A4;
	}
	return 0x821412A4;
} // Block from 8214124Ch-821412A4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821412A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821412A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821412A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821412A4);
		  /* 821412A4h */ case    0:  		/* cmpwi CR6, R28, -1 */
		/* 821412A4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0xFFFFFFFF);
		/* 821412A4h case    0:*/		return 0x821412A8;
		  /* 821412A8h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 821412A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82141300;  }
		/* 821412A8h case    1:*/		return 0x821412AC;
		  /* 821412ACh */ case    2:  		/* lwz R11, <#[R25 + 8]> */
		/* 821412ACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821412ACh case    2:*/		return 0x821412B0;
		  /* 821412B0h */ case    3:  		/* lwz R9, <#[R11]> */
		/* 821412B0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821412B0h case    3:*/		return 0x821412B4;
		  /* 821412B4h */ case    4:  		/* cmplw CR6, R28, R9 */
		/* 821412B4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R9);
		/* 821412B4h case    4:*/		return 0x821412B8;
		  /* 821412B8h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821412B8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821412CC;  }
		/* 821412B8h case    5:*/		return 0x821412BC;
		  /* 821412BCh */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 821412BCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821412BCh case    6:*/		return 0x821412C0;
		  /* 821412C0h */ case    7:  		/* cmplw CR6, R28, R11 */
		/* 821412C0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821412C0h case    7:*/		return 0x821412C4;
		  /* 821412C4h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 821412C4h case    8:*/		if ( regs.CR[6].eq ) { return 0x821412CC;  }
		/* 821412C4h case    8:*/		return 0x821412C8;
		  /* 821412C8h */ case    9:  		/* li R10, 1 */
		/* 821412C8h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821412C8h case    9:*/		return 0x821412CC;
	}
	return 0x821412CC;
} // Block from 821412A4h-821412CCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821412CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821412CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821412CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821412CC);
		  /* 821412CCh */ case    0:  		/* cmpwi CR6, R29, -1 */
		/* 821412CCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 821412CCh case    0:*/		return 0x821412D0;
		  /* 821412D0h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 821412D0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82141300;  }
		/* 821412D0h case    1:*/		return 0x821412D4;
		  /* 821412D4h */ case    2:  		/* lwz R11, <#[R25 + 8]> */
		/* 821412D4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821412D4h case    2:*/		return 0x821412D8;
		  /* 821412D8h */ case    3:  		/* cmplw CR6, R28, R29 */
		/* 821412D8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R29);
		/* 821412D8h case    3:*/		return 0x821412DC;
		  /* 821412DCh */ case    4:  		/* lwz R9, <#[R11]> */
		/* 821412DCh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821412DCh case    4:*/		return 0x821412E0;
		  /* 821412E0h */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 821412E0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821412E0h case    5:*/		return 0x821412E4;
		  /* 821412E4h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 821412E4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821412F4;  }
		/* 821412E4h case    6:*/		return 0x821412E8;
		  /* 821412E8h */ case    7:  		/* cmplw CR6, R9, R11 */
		/* 821412E8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821412E8h case    7:*/		return 0x821412EC;
		  /* 821412ECh */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 821412ECh case    8:*/		if ( !regs.CR[6].eq ) { return 0x82141300;  }
		/* 821412ECh case    8:*/		return 0x821412F0;
		  /* 821412F0h */ case    9:  		/* b 12 */
		/* 821412F0h case    9:*/		return 0x821412FC;
		/* 821412F0h case    9:*/		return 0x821412F4;
	}
	return 0x821412F4;
} // Block from 821412CCh-821412F4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821412F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821412F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821412F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821412F4);
		  /* 821412F4h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821412F4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821412F4h case    0:*/		return 0x821412F8;
		  /* 821412F8h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821412F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82141300;  }
		/* 821412F8h case    1:*/		return 0x821412FC;
	}
	return 0x821412FC;
} // Block from 821412F4h-821412FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821412FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821412FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821412FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821412FC);
		  /* 821412FCh */ case    0:  		/* li R10, 1 */
		/* 821412FCh case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821412FCh case    0:*/		return 0x82141300;
	}
	return 0x82141300;
} // Block from 821412FCh-82141300h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82141300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141300);
		  /* 82141300h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82141300h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82141300h case    0:*/		return 0x82141304;
		  /* 82141304h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 82141304h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214135C;  }
		/* 82141304h case    1:*/		return 0x82141308;
	}
	return 0x82141308;
} // Block from 82141300h-82141308h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82141308h
// Function '?VSEmitEXP@CVSProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141308);
		  /* 82141308h */ case    0:  		/* lis R11, 4096 */
		/* 82141308h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x1000);
		/* 82141308h case    0:*/		return 0x8214130C;
		  /* 8214130Ch */ case    1:  		/* lwz R9, <#[R31]> */
		/* 8214130Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8214130Ch case    1:*/		return 0x82141310;
		  /* 82141310h */ case    2:  		/* ori R11, R11, 1 */
		/* 82141310h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82141310h case    2:*/		return 0x82141314;
		  /* 82141314h */ case    3:  		/* cmplw CR6, R9, R11 */
		/* 82141314h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82141314h case    3:*/		return 0x82141318;
		  /* 82141318h */ case    4:  		/* bc 4, CR6_EQ, 472 */
		/* 82141318h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821414F0;  }
		/* 82141318h case    4:*/		return 0x8214131C;
		  /* 8214131Ch */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214131Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214131Ch case    5:*/		return 0x82141320;
		  /* 82141320h */ case    6:  		/* lwz R9, <#[R20 + 20]> */
		/* 82141320h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000014) );
		/* 82141320h case    6:*/		return 0x82141324;
		  /* 82141324h */ case    7:  		/* lwz R8, <#[R20 + 16]> */
		/* 82141324h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R20 + 0x00000010) );
		/* 82141324h case    7:*/		return 0x82141328;
		  /* 82141328h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 82141328h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82141328h case    8:*/		return 0x8214132C;
		  /* 8214132Ch */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8214132Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8214132Ch case    9:*/		return 0x82141330;
		  /* 82141330h */ case   10:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82141330h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82141330h case   10:*/		return 0x82141334;
		  /* 82141334h */ case   11:  		/* lwz R9, <#[R11 + 4]> */
		/* 82141334h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82141334h case   11:*/		return 0x82141338;
		  /* 82141338h */ case   12:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82141338h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82141338h case   12:*/		return 0x8214133C;
		  /* 8214133Ch */ case   13:  		/* lwzx R9, <#[R9 + R8]> */
		/* 8214133Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8214133Ch case   13:*/		return 0x82141340;
		  /* 82141340h */ case   14:  		/* lwz R9, <#[R9 + 4]> */
		/* 82141340h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 82141340h case   14:*/		return 0x82141344;
		  /* 82141344h */ case   15:  		/* rlwinm. R9, R9, 0, 23, 23 */
		/* 82141344h case   15:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R9,regs.R9);
		/* 82141344h case   15:*/		return 0x82141348;
		  /* 82141348h */ case   16:  		/* bc 12, CR0_EQ, 16 */
		/* 82141348h case   16:*/		if ( regs.CR[0].eq ) { return 0x82141358;  }
		/* 82141348h case   16:*/		return 0x8214134C;
		  /* 8214134Ch */ case   17:  		/* lfd FR13, <#[R11 + 32]> */
		/* 8214134Ch case   17:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000020) );
		/* 8214134Ch case   17:*/		return 0x82141350;
		  /* 82141350h */ case   18:  		/* fcmpu CR6, FR13, FR0 */
		/* 82141350h case   18:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 82141350h case   18:*/		return 0x82141354;
		  /* 82141354h */ case   19:  		/* bc 12, CR6_EQ, 8 */
		/* 82141354h case   19:*/		if ( regs.CR[6].eq ) { return 0x8214135C;  }
		/* 82141354h case   19:*/		return 0x82141358;
	}
	return 0x82141358;
} // Block from 82141308h-82141358h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82141358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141358);
		  /* 82141358h */ case    0:  		/* li R10, 1 */
		/* 82141358h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82141358h case    0:*/		return 0x8214135C;
	}
	return 0x8214135C;
} // Block from 82141358h-8214135Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214135Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214135C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214135C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214135C);
		  /* 8214135Ch */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 8214135Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8214135Ch case    0:*/		return 0x82141360;
		  /* 82141360h */ case    1:  		/* bc 4, CR6_EQ, 400 */
		/* 82141360h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821414F0;  }
		/* 82141360h case    1:*/		return 0x82141364;
		  /* 82141364h */ case    2:  		/* li R30, 0 */
		/* 82141364h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82141364h case    2:*/		return 0x82141368;
		  /* 82141368h */ case    3:  		/* cmplwi CR6, R19, 0 */
		/* 82141368h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82141368h case    3:*/		return 0x8214136C;
		  /* 8214136Ch */ case    4:  		/* bc 12, CR6_EQ, 388 */
		/* 8214136Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821414F0;  }
		/* 8214136Ch case    4:*/		return 0x82141370;
		  /* 82141370h */ case    5:  		/* addi R29, R1, 96 */
		/* 82141370h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x60);
		/* 82141370h case    5:*/		return 0x82141374;
		  /* 82141374h */ case    6:  		/* lwz R3, <#[R29]> */
		/* 82141374h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 82141374h case    6:*/		return 0x82141378;
		  /* 82141378h */ case    7:  		/* cmpwi CR6, R3, -1 */
		/* 82141378h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82141378h case    7:*/		return 0x8214137C;
		  /* 8214137Ch */ case    8:  		/* bc 12, CR6_EQ, 324 */
		/* 8214137Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821414C0;  }
		/* 8214137Ch case    8:*/		return 0x82141380;
		  /* 82141380h */ case    9:  		/* li R4, 1 */
		/* 82141380h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82141380h case    9:*/		return 0x82141384;
		  /* 82141384h */ case   10:  		/* mr R28, R27 */
		/* 82141384h case   10:*/		regs.R28 = regs.R27;
		/* 82141384h case   10:*/		return 0x82141388;
		  /* 82141388h */ case   11:  		/* li R7, 0 */
		/* 82141388h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82141388h case   11:*/		return 0x8214138C;
		  /* 8214138Ch */ case   12:  		/* cmplwi CR6, R27, 0 */
		/* 8214138Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8214138Ch case   12:*/		return 0x82141390;
		  /* 82141390h */ case   13:  		/* bc 12, CR6_EQ, 164 */
		/* 82141390h case   13:*/		if ( regs.CR[6].eq ) { return 0x82141434;  }
		/* 82141390h case   13:*/		return 0x82141394;
		  /* 82141394h */ case   14:  		/* lwz R9, <#[R23 + 8]> */
		/* 82141394h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000008) );
		/* 82141394h case   14:*/		return 0x82141398;
		  /* 82141398h */ case   15:  		/* mtspr CTR, R27 */
		/* 82141398h case   15:*/		regs.CTR = regs.R27;
		/* 82141398h case   15:*/		return 0x8214139C;
		  /* 8214139Ch */ case   16:  		/* lwz R8, <#[R20 + 20]> */
		/* 8214139Ch case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R20 + 0x00000014) );
		/* 8214139Ch case   16:*/		return 0x821413A0;
		  /* 821413A0h */ case   17:  		/* lwz R10, <#[R20 + 256]> */
		/* 821413A0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000100) );
		/* 821413A0h case   17:*/		return 0x821413A4;
		  /* 821413A4h */ case   18:  		/* add R11, R22, R7 */
		/* 821413A4h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R22,regs.R7);
		/* 821413A4h case   18:*/		return 0x821413A8;
		  /* 821413A8h */ case   19:  		/* cmplwi CR6, R14, 0 */
		/* 821413A8h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821413A8h case   19:*/		return 0x821413AC;
		  /* 821413ACh */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821413ACh case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821413ACh case   20:*/		return 0x821413B0;
		  /* 821413B0h */ case   21:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821413B0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821413B0h case   21:*/		return 0x821413B4;
		  /* 821413B4h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821413B4h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821413B4h case   22:*/		return 0x821413B8;
		  /* 821413B8h */ case   23:  		/* lwzx R11, <#[R11 + R8]> */
		/* 821413B8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821413B8h case   23:*/		return 0x821413BC;
		  /* 821413BCh */ case   24:  		/* lwz R6, <#[R11 + 80]> */
		/* 821413BCh case   24:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000050) );
		/* 821413BCh case   24:*/		return 0x821413C0;
		  /* 821413C0h */ case   25:  		/* lwz R5, <#[R11 + 76]> */
		/* 821413C0h case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000004C) );
		/* 821413C0h case   25:*/		return 0x821413C4;
		  /* 821413C4h */ case   26:  		/* subfc R6, R10, R6 */
		/* 821413C4h case   26:*/		cpu::op::subfc<0>(regs,&regs.R6,regs.R10,regs.R6);
		/* 821413C4h case   26:*/		return 0x821413C8;
		  /* 821413C8h */ case   27:  		/* addze R31, R10 */
		/* 821413C8h case   27:*/		cpu::op::addze<0>(regs,&regs.R31,regs.R10);
		/* 821413C8h case   27:*/		return 0x821413CC;
		  /* 821413CCh */ case   28:  		/* subfc R14, R5, R3 */
		/* 821413CCh case   28:*/		cpu::op::subfc<0>(regs,&regs.R14,regs.R5,regs.R3);
		/* 821413CCh case   28:*/		return 0x821413D0;
		  /* 821413D0h */ case   29:  		/* subf R6, R31, R10 */
		/* 821413D0h case   29:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R31,regs.R10);
		/* 821413D0h case   29:*/		return 0x821413D4;
		  /* 821413D4h */ case   30:  		/* addze R31, R5 */
		/* 821413D4h case   30:*/		cpu::op::addze<0>(regs,&regs.R31,regs.R5);
		/* 821413D4h case   30:*/		return 0x821413D8;
		  /* 821413D8h */ case   31:  		/* and R6, R6, R4 */
		/* 821413D8h case   31:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R4);
		/* 821413D8h case   31:*/		return 0x821413DC;
		  /* 821413DCh */ case   32:  		/* subf R5, R31, R5 */
		/* 821413DCh case   32:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R31,regs.R5);
		/* 821413DCh case   32:*/		return 0x821413E0;
		  /* 821413E0h */ case   33:  		/* and R4, R5, R6 */
		/* 821413E0h case   33:*/		cpu::op::and<0>(regs,&regs.R4,regs.R5,regs.R6);
		/* 821413E0h case   33:*/		return 0x821413E4;
		  /* 821413E4h */ case   34:  		/* bc 4, CR6_EQ, 16 */
		/* 821413E4h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821413F4;  }
		/* 821413E4h case   34:*/		return 0x821413E8;
		  /* 821413E8h */ case   35:  		/* lwz R6, <#[R11 + 16]> */
		/* 821413E8h case   35:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000010) );
		/* 821413E8h case   35:*/		return 0x821413EC;
		  /* 821413ECh */ case   36:  		/* cmplwi CR6, R6, 2 */
		/* 821413ECh case   36:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000002);
		/* 821413ECh case   36:*/		return 0x821413F0;
		  /* 821413F0h */ case   37:  		/* bc 12, CR6_EQ, 28 */
		/* 821413F0h case   37:*/		if ( regs.CR[6].eq ) { return 0x8214140C;  }
		/* 821413F0h case   37:*/		return 0x821413F4;
	}
	return 0x821413F4;
} // Block from 8214135Ch-821413F4h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821413F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821413F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821413F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821413F4);
		  /* 821413F4h */ case    0:  		/* lwz R6, <#[R1 + 84]> */
		/* 821413F4h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 821413F4h case    0:*/		return 0x821413F8;
		  /* 821413F8h */ case    1:  		/* cmplwi CR6, R6, 0 */
		/* 821413F8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821413F8h case    1:*/		return 0x821413FC;
		  /* 821413FCh */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 821413FCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82141414;  }
		/* 821413FCh case    2:*/		return 0x82141400;
		  /* 82141400h */ case    3:  		/* lwz R6, <#[R11 + 16]> */
		/* 82141400h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000010) );
		/* 82141400h case    3:*/		return 0x82141404;
		  /* 82141404h */ case    4:  		/* cmplwi CR6, R6, 3 */
		/* 82141404h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000003);
		/* 82141404h case    4:*/		return 0x82141408;
		  /* 82141408h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 82141408h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82141414;  }
		/* 82141408h case    5:*/		return 0x8214140C;
	}
	return 0x8214140C;
} // Block from 821413F4h-8214140Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214140Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214140C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214140C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214140C);
		  /* 8214140Ch */ case    0:  		/* addi R28, R28, -1 */
		/* 8214140Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 8214140Ch case    0:*/		return 0x82141410;
		  /* 82141410h */ case    1:  		/* b 24 */
		/* 82141410h case    1:*/		return 0x82141428;
		/* 82141410h case    1:*/		return 0x82141414;
	}
	return 0x82141414;
} // Block from 8214140Ch-82141414h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82141414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141414);
		  /* 82141414h */ case    0:  		/* lwz R11, <#[R11 + 84]> */
		/* 82141414h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82141414h case    0:*/		return 0x82141418;
		  /* 82141418h */ case    1:  		/* subfc R11, R3, R11 */
		/* 82141418h case    1:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82141418h case    1:*/		return 0x8214141C;
		  /* 8214141Ch */ case    2:  		/* addze R6, R3 */
		/* 8214141Ch case    2:*/		cpu::op::addze<0>(regs,&regs.R6,regs.R3);
		/* 8214141Ch case    2:*/		return 0x82141420;
		  /* 82141420h */ case    3:  		/* subf R11, R6, R3 */
		/* 82141420h case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R6,regs.R3);
		/* 82141420h case    3:*/		return 0x82141424;
		  /* 82141424h */ case    4:  		/* and R4, R11, R4 */
		/* 82141424h case    4:*/		cpu::op::and<0>(regs,&regs.R4,regs.R11,regs.R4);
		/* 82141424h case    4:*/		return 0x82141428;
	}
	return 0x82141428;
} // Block from 82141414h-82141428h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82141428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141428);
		  /* 82141428h */ case    0:  		/* lwz R14, <#[R1 + 88]> */
		/* 82141428h case    0:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000058) );
		/* 82141428h case    0:*/		return 0x8214142C;
		  /* 8214142Ch */ case    1:  		/* addi R7, R7, 1 */
		/* 8214142Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 8214142Ch case    1:*/		return 0x82141430;
		  /* 82141430h */ case    2:  		/* bc 16, CR0_LT, -140 */
		/* 82141430h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821413A4;  }
		/* 82141430h case    2:*/		return 0x82141434;
	}
	return 0x82141434;
} // Block from 82141428h-82141434h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82141434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141434);
		  /* 82141434h */ case    0:  		/* addi R31, R1, 96 */
		/* 82141434h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x60);
		/* 82141434h case    0:*/		return 0x82141438;
		  /* 82141438h */ case    1:  		/* mtspr CTR, R19 */
		/* 82141438h case    1:*/		regs.CTR = regs.R19;
		/* 82141438h case    1:*/		return 0x8214143C;
		  /* 8214143Ch */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8214143Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214143Ch case    2:*/		return 0x82141440;
		  /* 82141440h */ case    3:  		/* cmpwi CR6, R11, -1 */
		/* 82141440h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82141440h case    3:*/		return 0x82141444;
		  /* 82141444h */ case    4:  		/* bc 12, CR6_EQ, 108 */
		/* 82141444h case    4:*/		if ( regs.CR[6].eq ) { return 0x821414B0;  }
		/* 82141444h case    4:*/		return 0x82141448;
		  /* 82141448h */ case    5:  		/* lwz R10, <#[R20 + 24]> */
		/* 82141448h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000018) );
		/* 82141448h case    5:*/		return 0x8214144C;
		  /* 8214144Ch */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8214144Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8214144Ch case    6:*/		return 0x82141450;
		  /* 82141450h */ case    7:  		/* li R6, 0 */
		/* 82141450h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82141450h case    7:*/		return 0x82141454;
		  /* 82141454h */ case    8:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82141454h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82141454h case    8:*/		return 0x82141458;
		  /* 82141458h */ case    9:  		/* lwz R5, <#[R11 + 4]> */
		/* 82141458h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 82141458h case    9:*/		return 0x8214145C;
		  /* 8214145Ch */ case   10:  		/* cmplwi CR6, R5, 0 */
		/* 8214145Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8214145Ch case   10:*/		return 0x82141460;
		  /* 82141460h */ case   11:  		/* bc 12, CR6_EQ, 80 */
		/* 82141460h case   11:*/		if ( regs.CR[6].eq ) { return 0x821414B0;  }
		/* 82141460h case   11:*/		return 0x82141464;
		  /* 82141464h */ case   12:  		/* lwz R8, <#[R11 + 8]> */
		/* 82141464h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82141464h case   12:*/		return 0x82141468;
		  /* 82141468h */ case   13:  		/* li R11, 0 */
		/* 82141468h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82141468h case   13:*/		return 0x8214146C;
		  /* 8214146Ch */ case   14:  		/* lwz R7, <#[R20 + 20]> */
		/* 8214146Ch case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R20 + 0x00000014) );
		/* 8214146Ch case   14:*/		return 0x82141470;
		  /* 82141470h */ case   15:  		/* lwzx R10, <#[R11 + R8]> */
		/* 82141470h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82141470h case   15:*/		return 0x82141474;
		  /* 82141474h */ case   16:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82141474h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82141474h case   16:*/		return 0x82141478;
		  /* 82141478h */ case   17:  		/* lwzx R10, <#[R10 + R7]> */
		/* 82141478h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82141478h case   17:*/		return 0x8214147C;
		  /* 8214147Ch */ case   18:  		/* lwz R9, <#[R10 + 72]> */
		/* 8214147Ch case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000048) );
		/* 8214147Ch case   18:*/		return 0x82141480;
		  /* 82141480h */ case   19:  		/* cmplw CR6, R9, R3 */
		/* 82141480h case   19:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R3);
		/* 82141480h case   19:*/		return 0x82141484;
		  /* 82141484h */ case   20:  		/* bc 4, CR6_GT, 12 */
		/* 82141484h case   20:*/		if ( !regs.CR[6].gt ) { return 0x82141490;  }
		/* 82141484h case   20:*/		return 0x82141488;
		  /* 82141488h */ case   21:  		/* cmpwi CR6, R9, -1 */
		/* 82141488h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 82141488h case   21:*/		return 0x8214148C;
		  /* 8214148Ch */ case   22:  		/* bc 4, CR6_EQ, 16 */
		/* 8214148Ch case   22:*/		if ( !regs.CR[6].eq ) { return 0x8214149C;  }
		/* 8214148Ch case   22:*/		return 0x82141490;
	}
	return 0x82141490;
} // Block from 82141434h-82141490h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82141490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141490);
		  /* 82141490h */ case    0:  		/* lwz R10, <#[R10 + 80]> */
		/* 82141490h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000050) );
		/* 82141490h case    0:*/		return 0x82141494;
		  /* 82141494h */ case    1:  		/* cmplw CR6, R10, R3 */
		/* 82141494h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R3);
		/* 82141494h case    1:*/		return 0x82141498;
		  /* 82141498h */ case    2:  		/* bc 4, CR6_LT, 8 */
		/* 82141498h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821414A0;  }
		/* 82141498h case    2:*/		return 0x8214149C;
	}
	return 0x8214149C;
} // Block from 82141490h-8214149Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214149Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214149C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214149C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214149C);
		  /* 8214149Ch */ case    0:  		/* li R4, 0 */
		/* 8214149Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214149Ch case    0:*/		return 0x821414A0;
	}
	return 0x821414A0;
} // Block from 8214149Ch-821414A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821414A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821414A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821414A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821414A0);
		  /* 821414A0h */ case    0:  		/* addi R6, R6, 1 */
		/* 821414A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821414A0h case    0:*/		return 0x821414A4;
		  /* 821414A4h */ case    1:  		/* addi R11, R11, 4 */
		/* 821414A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821414A4h case    1:*/		return 0x821414A8;
		  /* 821414A8h */ case    2:  		/* cmplw CR6, R6, R5 */
		/* 821414A8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 821414A8h case    2:*/		return 0x821414AC;
		  /* 821414ACh */ case    3:  		/* bc 12, CR6_LT, -60 */
		/* 821414ACh case    3:*/		if ( regs.CR[6].lt ) { return 0x82141470;  }
		/* 821414ACh case    3:*/		return 0x821414B0;
	}
	return 0x821414B0;
} // Block from 821414A0h-821414B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821414B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821414B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821414B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821414B0);
		  /* 821414B0h */ case    0:  		/* addi R31, R31, 4 */
		/* 821414B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821414B0h case    0:*/		return 0x821414B4;
		  /* 821414B4h */ case    1:  		/* bc 16, CR0_LT, -120 */
		/* 821414B4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8214143C;  }
		/* 821414B4h case    1:*/		return 0x821414B8;
		  /* 821414B8h */ case    2:  		/* cmpwi CR6, R4, 0 */
		/* 821414B8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 821414B8h case    2:*/		return 0x821414BC;
		  /* 821414BCh */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 821414BCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821414D4;  }
		/* 821414BCh case    3:*/		return 0x821414C0;
	}
	return 0x821414C0;
} // Block from 821414B0h-821414C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821414C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821414C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821414C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821414C0);
		  /* 821414C0h */ case    0:  		/* addi R30, R30, 1 */
		/* 821414C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821414C0h case    0:*/		return 0x821414C4;
		  /* 821414C4h */ case    1:  		/* addi R29, R29, 4 */
		/* 821414C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821414C4h case    1:*/		return 0x821414C8;
		  /* 821414C8h */ case    2:  		/* cmplw CR6, R30, R19 */
		/* 821414C8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R19);
		/* 821414C8h case    2:*/		return 0x821414CC;
		  /* 821414CCh */ case    3:  		/* bc 12, CR6_LT, -344 */
		/* 821414CCh case    3:*/		if ( regs.CR[6].lt ) { return 0x82141374;  }
		/* 821414CCh case    3:*/		return 0x821414D0;
		  /* 821414D0h */ case    4:  		/* b 32 */
		/* 821414D0h case    4:*/		return 0x821414F0;
		/* 821414D0h case    4:*/		return 0x821414D4;
	}
	return 0x821414D4;
} // Block from 821414C0h-821414D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821414D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821414D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821414D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821414D4);
		  /* 821414D4h */ case    0:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 821414D4h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 821414D4h case    0:*/		return 0x821414D8;
		  /* 821414D8h */ case    1:  		/* addi R10, R1, 96 */
		/* 821414D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 821414D8h case    1:*/		return 0x821414DC;
		  /* 821414DCh */ case    2:  		/* lwzx R30, <#[R11 + R10]> */
		/* 821414DCh case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821414DCh case    2:*/		return 0x821414E0;
		  /* 821414E0h */ case    3:  		/* cmpwi CR6, R30, -1 */
		/* 821414E0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R30,0xFFFFFFFF);
		/* 821414E0h case    3:*/		return 0x821414E4;
		  /* 821414E4h */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 821414E4h case    4:*/		if ( regs.CR[6].eq ) { return 0x821414F0;  }
		/* 821414E4h case    4:*/		return 0x821414E8;
		  /* 821414E8h */ case    5:  		/* cmplwi CR6, R28, 2 */
		/* 821414E8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000002);
		/* 821414E8h case    5:*/		return 0x821414EC;
		  /* 821414ECh */ case    6:  		/* bc 4, CR6_LT, 36 */
		/* 821414ECh case    6:*/		if ( !regs.CR[6].lt ) { return 0x82141510;  }
		/* 821414ECh case    6:*/		return 0x821414F0;
	}
	return 0x821414F0;
} // Block from 821414D4h-821414F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821414F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821414F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821414F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821414F0);
		  /* 821414F0h */ case    0:  		/* addi R17, R17, 1 */
		/* 821414F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x1);
		/* 821414F0h case    0:*/		return 0x821414F4;
		  /* 821414F4h */ case    1:  		/* add R22, R22, R27 */
		/* 821414F4h case    1:*/		cpu::op::add<0>(regs,&regs.R22,regs.R22,regs.R27);
		/* 821414F4h case    1:*/		return 0x821414F8;
		  /* 821414F8h */ case    2:  		/* add R24, R16, R24 */
		/* 821414F8h case    2:*/		cpu::op::add<0>(regs,&regs.R24,regs.R16,regs.R24);
		/* 821414F8h case    2:*/		return 0x821414FC;
		  /* 821414FCh */ case    3:  		/* cmplw CR6, R17, R15 */
		/* 821414FCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R15);
		/* 821414FCh case    3:*/		return 0x82141500;
		  /* 82141500h */ case    4:  		/* bc 12, CR6_LT, -1252 */
		/* 82141500h case    4:*/		if ( regs.CR[6].lt ) { return 0x8214101C;  }
		/* 82141500h case    4:*/		return 0x82141504;
	}
	return 0x82141504;
} // Block from 821414F0h-82141504h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82141504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141504);
		  /* 82141504h */ case    0:  		/* li R3, 1 */
		/* 82141504h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82141504h case    0:*/		return 0x82141508;
		  /* 82141508h */ case    1:  		/* addi R1, R1, 288 */
		/* 82141508h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 82141508h case    1:*/		return 0x8214150C;
		  /* 8214150Ch */ case    2:  		/* b -721564 */
		/* 8214150Ch case    2:*/		return 0x82091270;
		/* 8214150Ch case    2:*/		return 0x82141510;
	}
	return 0x82141510;
} // Block from 82141504h-82141510h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82141510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141510);
		  /* 82141510h */ case    0:  		/* li R3, 116 */
		/* 82141510h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82141510h case    0:*/		return 0x82141514;
		  /* 82141514h */ case    1:  		/* bl -282492 */
		/* 82141514h case    1:*/		regs.LR = 0x82141518; return 0x820FC598;
		/* 82141514h case    1:*/		return 0x82141518;
		  /* 82141518h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82141518h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82141518h case    2:*/		return 0x8214151C;
		  /* 8214151Ch */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 8214151Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82141530;  }
		/* 8214151Ch case    3:*/		return 0x82141520;
		  /* 82141520h */ case    4:  		/* bl -284288 */
		/* 82141520h case    4:*/		regs.LR = 0x82141524; return 0x820FBEA0;
		/* 82141520h case    4:*/		return 0x82141524;
		  /* 82141524h */ case    5:  		/* mr R29, R3 */
		/* 82141524h case    5:*/		regs.R29 = regs.R3;
		/* 82141524h case    5:*/		return 0x82141528;
		  /* 82141528h */ case    6:  		/* li R27, 0 */
		/* 82141528h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82141528h case    6:*/		return 0x8214152C;
		  /* 8214152Ch */ case    7:  		/* b 12 */
		/* 8214152Ch case    7:*/		return 0x82141538;
		/* 8214152Ch case    7:*/		return 0x82141530;
	}
	return 0x82141530;
} // Block from 82141510h-82141530h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82141530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141530);
		  /* 82141530h */ case    0:  		/* li R27, 0 */
		/* 82141530h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82141530h case    0:*/		return 0x82141534;
		  /* 82141534h */ case    1:  		/* mr R29, R27 */
		/* 82141534h case    1:*/		regs.R29 = regs.R27;
		/* 82141534h case    1:*/		return 0x82141538;
	}
	return 0x82141538;
} // Block from 82141530h-82141538h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82141538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141538);
		  /* 82141538h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82141538h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82141538h case    0:*/		return 0x8214153C;
		  /* 8214153Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8214153Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214154C;  }
		/* 8214153Ch case    1:*/		return 0x82141540;
		  /* 82141540h */ case    2:  		/* lis R3, -32761 */
		/* 82141540h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82141540h case    2:*/		return 0x82141544;
		  /* 82141544h */ case    3:  		/* ori R3, R3, 14 */
		/* 82141544h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 82141544h case    3:*/		return 0x82141548;
		  /* 82141548h */ case    4:  		/* b -64 */
		/* 82141548h case    4:*/		return 0x82141508;
		/* 82141548h case    4:*/		return 0x8214154C;
	}
	return 0x8214154C;
} // Block from 82141538h-8214154Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214154Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214154C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214154C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214154C);
		  /* 8214154Ch */ case    0:  		/* li R11, 1801 */
		/* 8214154Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x709);
		/* 8214154Ch case    0:*/		return 0x82141550;
		  /* 82141550h */ case    1:  		/* mr R4, R28 */
		/* 82141550h case    1:*/		regs.R4 = regs.R28;
		/* 82141550h case    1:*/		return 0x82141554;
		  /* 82141554h */ case    2:  		/* li R7, 0 */
		/* 82141554h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82141554h case    2:*/		return 0x82141558;
		  /* 82141558h */ case    3:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 82141558h case    3:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 82141558h case    3:*/		return 0x8214155C;
		  /* 8214155Ch */ case    4:  		/* mr R6, R28 */
		/* 8214155Ch case    4:*/		regs.R6 = regs.R28;
		/* 8214155Ch case    4:*/		return 0x82141560;
		  /* 82141560h */ case    5:  		/* rlwinm R5, R28, 1, 0, 30 */
		/* 82141560h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R28);
		/* 82141560h case    5:*/		return 0x82141564;
		  /* 82141564h */ case    6:  		/* mr R3, R29 */
		/* 82141564h case    6:*/		regs.R3 = regs.R29;
		/* 82141564h case    6:*/		return 0x82141568;
		  /* 82141568h */ case    7:  		/* bl -282424 */
		/* 82141568h case    7:*/		regs.LR = 0x8214156C; return 0x820FC630;
		/* 82141568h case    7:*/		return 0x8214156C;
		  /* 8214156Ch */ case    8:  		/* or. R31, R3, R3 */
		/* 8214156Ch case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8214156Ch case    8:*/		return 0x82141570;
		  /* 82141570h */ case    9:  		/* mr R3, R29 */
		/* 82141570h case    9:*/		regs.R3 = regs.R29;
		/* 82141570h case    9:*/		return 0x82141574;
		  /* 82141574h */ case   10:  		/* bc 4, CR0_LT, 24 */
		/* 82141574h case   10:*/		if ( !regs.CR[0].lt ) { return 0x8214158C;  }
		/* 82141574h case   10:*/		return 0x82141578;
		  /* 82141578h */ case   11:  		/* bl 900680 */
		/* 82141578h case   11:*/		regs.LR = 0x8214157C; return 0x8221D3C0;
		/* 82141578h case   11:*/		return 0x8214157C;
		  /* 8214157Ch */ case   12:  		/* mr R3, R29 */
		/* 8214157Ch case   12:*/		regs.R3 = regs.R29;
		/* 8214157Ch case   12:*/		return 0x82141580;
		  /* 82141580h */ case   13:  		/* bl -282512 */
		/* 82141580h case   13:*/		regs.LR = 0x82141584; return 0x820FC5F0;
		/* 82141580h case   13:*/		return 0x82141584;
		  /* 82141584h */ case   14:  		/* mr R3, R31 */
		/* 82141584h case   14:*/		regs.R3 = regs.R31;
		/* 82141584h case   14:*/		return 0x82141588;
		  /* 82141588h */ case   15:  		/* b -128 */
		/* 82141588h case   15:*/		return 0x82141508;
		/* 82141588h case   15:*/		return 0x8214158C;
	}
	return 0x8214158C;
} // Block from 8214154Ch-8214158Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214158Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214158C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214158C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214158C);
		  /* 8214158Ch */ case    0:  		/* lwz R4, <#[R20 + 260]> */
		/* 8214158Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R20 + 0x00000104) );
		/* 8214158Ch case    0:*/		return 0x82141590;
		  /* 82141590h */ case    1:  		/* bl -284320 */
		/* 82141590h case    1:*/		regs.LR = 0x82141594; return 0x820FBEF0;
		/* 82141590h case    1:*/		return 0x82141594;
		  /* 82141594h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82141594h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141594h case    2:*/		return 0x82141598;
		  /* 82141598h */ case    3:  		/* bc 4, CR0_LT, 16 */
		/* 82141598h case    3:*/		if ( !regs.CR[0].lt ) { return 0x821415A8;  }
		/* 82141598h case    3:*/		return 0x8214159C;
		  /* 8214159Ch */ case    4:  		/* mr R31, R3 */
		/* 8214159Ch case    4:*/		regs.R31 = regs.R3;
		/* 8214159Ch case    4:*/		return 0x821415A0;
		  /* 821415A0h */ case    5:  		/* mr R3, R29 */
		/* 821415A0h case    5:*/		regs.R3 = regs.R29;
		/* 821415A0h case    5:*/		return 0x821415A4;
		  /* 821415A4h */ case    6:  		/* b -44 */
		/* 821415A4h case    6:*/		return 0x82141578;
		/* 821415A4h case    6:*/		return 0x821415A8;
	}
	return 0x821415A8;
} // Block from 8214158Ch-821415A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821415A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821415A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821415A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821415A8);
		  /* 821415A8h */ case    0:  		/* lwz R3, <#[R1 + 80]> */
		/* 821415A8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 821415A8h case    0:*/		return 0x821415AC;
		  /* 821415ACh */ case    1:  		/* mr R9, R27 */
		/* 821415ACh case    1:*/		regs.R9 = regs.R27;
		/* 821415ACh case    1:*/		return 0x821415B0;
		  /* 821415B0h */ case    2:  		/* lwz R31, <#[R1 + 92]> */
		/* 821415B0h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 821415B0h case    2:*/		return 0x821415B4;
		  /* 821415B4h */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 821415B4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821415B4h case    3:*/		return 0x821415B8;
		  /* 821415B8h */ case    4:  		/* bc 12, CR6_EQ, 136 */
		/* 821415B8h case    4:*/		if ( regs.CR[6].eq ) { return 0x82141640;  }
		/* 821415B8h case    4:*/		return 0x821415BC;
		  /* 821415BCh */ case    5:  		/* mr R11, R27 */
		/* 821415BCh case    5:*/		regs.R11 = regs.R27;
		/* 821415BCh case    5:*/		return 0x821415C0;
		  /* 821415C0h */ case    6:  		/* rlwinm R10, R28, 2, 0, 29 */
		/* 821415C0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R28);
		/* 821415C0h case    6:*/		return 0x821415C4;
		  /* 821415C4h */ case    7:  		/* cmplwi CR6, R25, 0 */
		/* 821415C4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821415C4h case    7:*/		return 0x821415C8;
		  /* 821415C8h */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 821415C8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821415F0;  }
		/* 821415C8h case    8:*/		return 0x821415CC;
		  /* 821415CCh */ case    9:  		/* lwz R8, <#[R25 + 8]> */
		/* 821415CCh case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x00000008) );
		/* 821415CCh case    9:*/		return 0x821415D0;
		  /* 821415D0h */ case   10:  		/* lwz R7, <#[R29 + 8]> */
		/* 821415D0h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 821415D0h case   10:*/		return 0x821415D4;
		  /* 821415D4h */ case   11:  		/* lwz R8, <#[R8]> */
		/* 821415D4h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 821415D4h case   11:*/		return 0x821415D8;
		  /* 821415D8h */ case   12:  		/* stwx R8, <#[R11 + R7]> */
		/* 821415D8h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 821415D8h case   12:*/		return 0x821415DC;
		  /* 821415DCh */ case   13:  		/* lwz R8, <#[R25 + 8]> */
		/* 821415DCh case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x00000008) );
		/* 821415DCh case   13:*/		return 0x821415E0;
		  /* 821415E0h */ case   14:  		/* lwz R7, <#[R29 + 8]> */
		/* 821415E0h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 821415E0h case   14:*/		return 0x821415E4;
		  /* 821415E4h */ case   15:  		/* lwz R8, <#[R8 + 4]> */
		/* 821415E4h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 821415E4h case   15:*/		return 0x821415E8;
		  /* 821415E8h */ case   16:  		/* stwx R8, <#[R10 + R7]> */
		/* 821415E8h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 821415E8h case   16:*/		return 0x821415EC;
		  /* 821415ECh */ case   17:  		/* b 64 */
		/* 821415ECh case   17:*/		return 0x8214162C;
		/* 821415ECh case   17:*/		return 0x821415F0;
	}
	return 0x821415F0;
} // Block from 821415A8h-821415F0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821415F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821415F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821415F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821415F0);
		  /* 821415F0h */ case    0:  		/* cmpwi CR6, R31, -1 */
		/* 821415F0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0xFFFFFFFF);
		/* 821415F0h case    0:*/		return 0x821415F4;
		  /* 821415F4h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 821415F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82141614;  }
		/* 821415F4h case    1:*/		return 0x821415F8;
		  /* 821415F8h */ case    2:  		/* cmpwi CR6, R3, -1 */
		/* 821415F8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 821415F8h case    2:*/		return 0x821415FC;
		  /* 821415FCh */ case    3:  		/* bc 12, CR6_EQ, 648 */
		/* 821415FCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82141884;  }
		/* 821415FCh case    3:*/		return 0x82141600;
		  /* 82141600h */ case    4:  		/* lwz R8, <#[R29 + 8]> */
		/* 82141600h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000008) );
		/* 82141600h case    4:*/		return 0x82141604;
		  /* 82141604h */ case    5:  		/* stwx R3, <#[R11 + R8]> */
		/* 82141604h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82141604h case    5:*/		return 0x82141608;
		  /* 82141608h */ case    6:  		/* lwz R8, <#[R29 + 8]> */
		/* 82141608h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000008) );
		/* 82141608h case    6:*/		return 0x8214160C;
		  /* 8214160Ch */ case    7:  		/* stwx R3, <#[R10 + R8]> */
		/* 8214160Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8214160Ch case    7:*/		return 0x82141610;
		  /* 82141610h */ case    8:  		/* b 28 */
		/* 82141610h case    8:*/		return 0x8214162C;
		/* 82141610h case    8:*/		return 0x82141614;
	}
	return 0x82141614;
} // Block from 821415F0h-82141614h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82141614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141614);
		  /* 82141614h */ case    0:  		/* cmpwi CR6, R3, -1 */
		/* 82141614h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82141614h case    0:*/		return 0x82141618;
		  /* 82141618h */ case    1:  		/* bc 4, CR6_EQ, 620 */
		/* 82141618h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82141884;  }
		/* 82141618h case    1:*/		return 0x8214161C;
		  /* 8214161Ch */ case    2:  		/* lwz R8, <#[R29 + 8]> */
		/* 8214161Ch case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000008) );
		/* 8214161Ch case    2:*/		return 0x82141620;
		  /* 82141620h */ case    3:  		/* stwx R31, <#[R11 + R8]> */
		/* 82141620h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82141620h case    3:*/		return 0x82141624;
		  /* 82141624h */ case    4:  		/* lwz R8, <#[R29 + 8]> */
		/* 82141624h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000008) );
		/* 82141624h case    4:*/		return 0x82141628;
		  /* 82141628h */ case    5:  		/* stwx R31, <#[R10 + R8]> */
		/* 82141628h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 82141628h case    5:*/		return 0x8214162C;
	}
	return 0x8214162C;
} // Block from 82141614h-8214162Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214162Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214162C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214162C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214162C);
		  /* 8214162Ch */ case    0:  		/* addi R9, R9, 1 */
		/* 8214162Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8214162Ch case    0:*/		return 0x82141630;
		  /* 82141630h */ case    1:  		/* addi R11, R11, 4 */
		/* 82141630h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82141630h case    1:*/		return 0x82141634;
		  /* 82141634h */ case    2:  		/* addi R10, R10, 4 */
		/* 82141634h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82141634h case    2:*/		return 0x82141638;
		  /* 82141638h */ case    3:  		/* cmplw CR6, R9, R28 */
		/* 82141638h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R28);
		/* 82141638h case    3:*/		return 0x8214163C;
		  /* 8214163Ch */ case    4:  		/* bc 12, CR6_LT, -120 */
		/* 8214163Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x821415C4;  }
		/* 8214163Ch case    4:*/		return 0x82141640;
	}
	return 0x82141640;
} // Block from 8214162Ch-82141640h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82141640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141640);
		  /* 82141640h */ case    0:  		/* lwz R4, <#[R1 + 84]> */
		/* 82141640h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 82141640h case    0:*/		return 0x82141644;
		  /* 82141644h */ case    1:  		/* mr R8, R27 */
		/* 82141644h case    1:*/		regs.R8 = regs.R27;
		/* 82141644h case    1:*/		return 0x82141648;
	}
	return 0x82141648;
} // Block from 82141640h-82141648h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82141648h
// Function '?VSEmitLOG@CVSProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141648);
		  /* 82141648h */ case    0:  		/* mr R6, R27 */
		/* 82141648h case    0:*/		regs.R6 = regs.R27;
		/* 82141648h case    0:*/		return 0x8214164C;
		  /* 8214164Ch */ case    1:  		/* mr R7, R27 */
		/* 8214164Ch case    1:*/		regs.R7 = regs.R27;
		/* 8214164Ch case    1:*/		return 0x82141650;
		  /* 82141650h */ case    2:  		/* addi R10, R1, 112 */
		/* 82141650h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 82141650h case    2:*/		return 0x82141654;
		  /* 82141654h */ case    3:  		/* lwz R11, <#[R10]> */
		/* 82141654h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82141654h case    3:*/		return 0x82141658;
		  /* 82141658h */ case    4:  		/* cmplwi CR6, R14, 0 */
		/* 82141658h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 82141658h case    4:*/		return 0x8214165C;
		  /* 8214165Ch */ case    5:  		/* lwz R9, <#[R20 + 20]> */
		/* 8214165Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000014) );
		/* 8214165Ch case    5:*/		return 0x82141660;
		  /* 82141660h */ case    6:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82141660h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82141660h case    6:*/		return 0x82141664;
		  /* 82141664h */ case    7:  		/* lwzx R9, <#[R5 + R9]> */
		/* 82141664h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + regs.R9 + 0x00000000) );
		/* 82141664h case    7:*/		return 0x82141668;
		  /* 82141668h */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 82141668h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82141678;  }
		/* 82141668h case    8:*/		return 0x8214166C;
		  /* 8214166Ch */ case    9:  		/* lwz R5, <#[R9 + 16]> */
		/* 8214166Ch case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000010) );
		/* 8214166Ch case    9:*/		return 0x82141670;
		  /* 82141670h */ case   10:  		/* cmplwi CR6, R5, 2 */
		/* 82141670h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000002);
		/* 82141670h case   10:*/		return 0x82141674;
		  /* 82141674h */ case   11:  		/* bc 12, CR6_EQ, 40 */
		/* 82141674h case   11:*/		if ( regs.CR[6].eq ) { return 0x8214169C;  }
		/* 82141674h case   11:*/		return 0x82141678;
	}
	return 0x82141678;
} // Block from 82141648h-82141678h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82141678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141678);
		  /* 82141678h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 82141678h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82141678h case    0:*/		return 0x8214167C;
		  /* 8214167Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8214167Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214168C;  }
		/* 8214167Ch case    1:*/		return 0x82141680;
		  /* 82141680h */ case    2:  		/* lwz R9, <#[R9 + 16]> */
		/* 82141680h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 82141680h case    2:*/		return 0x82141684;
		  /* 82141684h */ case    3:  		/* cmplwi CR6, R9, 3 */
		/* 82141684h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 82141684h case    3:*/		return 0x82141688;
		  /* 82141688h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 82141688h case    4:*/		if ( regs.CR[6].eq ) { return 0x8214169C;  }
		/* 82141688h case    4:*/		return 0x8214168C;
	}
	return 0x8214168C;
} // Block from 82141678h-8214168Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214168Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214168C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214168C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214168C);
		  /* 8214168Ch */ case    0:  		/* lwz R9, <#[R29 + 16]> */
		/* 8214168Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000010) );
		/* 8214168Ch case    0:*/		return 0x82141690;
		  /* 82141690h */ case    1:  		/* addi R8, R8, 1 */
		/* 82141690h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82141690h case    1:*/		return 0x82141694;
		  /* 82141694h */ case    2:  		/* stwx R11, <#[R9 + R7]> */
		/* 82141694h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 82141694h case    2:*/		return 0x82141698;
		  /* 82141698h */ case    3:  		/* addi R7, R7, 4 */
		/* 82141698h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 82141698h case    3:*/		return 0x8214169C;
	}
	return 0x8214169C;
} // Block from 8214168Ch-8214169Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214169Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214169C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214169C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214169C);
		  /* 8214169Ch */ case    0:  		/* cmplw CR6, R8, R28 */
		/* 8214169Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R28);
		/* 8214169Ch case    0:*/		return 0x821416A0;
		  /* 821416A0h */ case    1:  		/* bc 12, CR6_GT, 520 */
		/* 821416A0h case    1:*/		if ( regs.CR[6].gt ) { return 0x821418A8;  }
		/* 821416A0h case    1:*/		return 0x821416A4;
		  /* 821416A4h */ case    2:  		/* addi R6, R6, 1 */
		/* 821416A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821416A4h case    2:*/		return 0x821416A8;
		  /* 821416A8h */ case    3:  		/* addi R10, R10, 4 */
		/* 821416A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821416A8h case    3:*/		return 0x821416AC;
		  /* 821416ACh */ case    4:  		/* cmplw CR6, R6, R19 */
		/* 821416ACh case    4:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R19);
		/* 821416ACh case    4:*/		return 0x821416B0;
		  /* 821416B0h */ case    5:  		/* bc 12, CR6_LT, -92 */
		/* 821416B0h case    5:*/		if ( regs.CR[6].lt ) { return 0x82141654;  }
		/* 821416B0h case    5:*/		return 0x821416B4;
		  /* 821416B4h */ case    6:  		/* lwz R10, <#[R29 + 12]> */
		/* 821416B4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 821416B4h case    6:*/		return 0x821416B8;
		  /* 821416B8h */ case    7:  		/* mr R5, R27 */
		/* 821416B8h case    7:*/		regs.R5 = regs.R27;
		/* 821416B8h case    7:*/		return 0x821416BC;
		  /* 821416BCh */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 821416BCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821416BCh case    8:*/		return 0x821416C0;
		  /* 821416C0h */ case    9:  		/* bc 12, CR6_EQ, 156 */
		/* 821416C0h case    9:*/		if ( regs.CR[6].eq ) { return 0x8214175C;  }
		/* 821416C0h case    9:*/		return 0x821416C4;
		  /* 821416C4h */ case   10:  		/* mr R9, R27 */
		/* 821416C4h case   10:*/		regs.R9 = regs.R27;
		/* 821416C4h case   10:*/		return 0x821416C8;
		  /* 821416C8h */ case   11:  		/* li R6, 1 */
		/* 821416C8h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821416C8h case   11:*/		return 0x821416CC;
		  /* 821416CCh */ case   12:  		/* mr R7, R6 */
		/* 821416CCh case   12:*/		regs.R7 = regs.R6;
		/* 821416CCh case   12:*/		return 0x821416D0;
		  /* 821416D0h */ case   13:  		/* cmplw CR6, R6, R10 */
		/* 821416D0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 821416D0h case   13:*/		return 0x821416D4;
		  /* 821416D4h */ case   14:  		/* bc 4, CR6_LT, 116 */
		/* 821416D4h case   14:*/		if ( !regs.CR[6].lt ) { return 0x82141748;  }
		/* 821416D4h case   14:*/		return 0x821416D8;
		  /* 821416D8h */ case   15:  		/* addi R11, R9, 4 */
		/* 821416D8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x4);
		/* 821416D8h case   15:*/		return 0x821416DC;
		  /* 821416DCh */ case   16:  		/* lwz R10, <#[R29 + 16]> */
		/* 821416DCh case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 821416DCh case   16:*/		return 0x821416E0;
		  /* 821416E0h */ case   17:  		/* lwz R8, <#[R20 + 20]> */
		/* 821416E0h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R20 + 0x00000014) );
		/* 821416E0h case   17:*/		return 0x821416E4;
		  /* 821416E4h */ case   18:  		/* lwzx R28, <#[R9 + R10]> */
		/* 821416E4h case   18:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821416E4h case   18:*/		return 0x821416E8;
		  /* 821416E8h */ case   19:  		/* lwzx R10, <#[R11 + R10]> */
		/* 821416E8h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821416E8h case   19:*/		return 0x821416EC;
		  /* 821416ECh */ case   20:  		/* rlwinm R28, R28, 2, 0, 29 */
		/* 821416ECh case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R28);
		/* 821416ECh case   20:*/		return 0x821416F0;
		  /* 821416F0h */ case   21:  		/* rlwinm R26, R10, 2, 0, 29 */
		/* 821416F0h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R10);
		/* 821416F0h case   21:*/		return 0x821416F4;
		  /* 821416F4h */ case   22:  		/* lwzx R10, <#[R28 + R8]> */
		/* 821416F4h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + regs.R8 + 0x00000000) );
		/* 821416F4h case   22:*/		return 0x821416F8;
		  /* 821416F8h */ case   23:  		/* lwzx R8, <#[R26 + R8]> */
		/* 821416F8h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + regs.R8 + 0x00000000) );
		/* 821416F8h case   23:*/		return 0x821416FC;
		  /* 821416FCh */ case   24:  		/* lwz R28, <#[R10 + 16]> */
		/* 821416FCh case   24:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + 0x00000010) );
		/* 821416FCh case   24:*/		return 0x82141700;
		  /* 82141700h */ case   25:  		/* lwz R26, <#[R8 + 16]> */
		/* 82141700h case   25:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R8 + 0x00000010) );
		/* 82141700h case   25:*/		return 0x82141704;
		  /* 82141704h */ case   26:  		/* cmplw CR6, R28, R26 */
		/* 82141704h case   26:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R26);
		/* 82141704h case   26:*/		return 0x82141708;
		  /* 82141708h */ case   27:  		/* bc 4, CR6_GT, 28 */
		/* 82141708h case   27:*/		if ( !regs.CR[6].gt ) { return 0x82141724;  }
		/* 82141708h case   27:*/		return 0x8214170C;
		  /* 8214170Ch */ case   28:  		/* lwz R28, <#[R29 + 16]> */
		/* 8214170Ch case   28:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000010) );
		/* 8214170Ch case   28:*/		return 0x82141710;
		  /* 82141710h */ case   29:  		/* lwzx R26, <#[R9 + R28]> */
		/* 82141710h case   29:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R9 + regs.R28 + 0x00000000) );
		/* 82141710h case   29:*/		return 0x82141714;
		  /* 82141714h */ case   30:  		/* lwzx R25, <#[R11 + R28]> */
		/* 82141714h case   30:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82141714h case   30:*/		return 0x82141718;
		  /* 82141718h */ case   31:  		/* stwx R26, <#[R11 + R28]> */
		/* 82141718h case   31:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82141718h case   31:*/		return 0x8214171C;
		  /* 8214171Ch */ case   32:  		/* lwz R28, <#[R29 + 16]> */
		/* 8214171Ch case   32:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000010) );
		/* 8214171Ch case   32:*/		return 0x82141720;
		  /* 82141720h */ case   33:  		/* stwx R25, <#[R9 + R28]> */
		/* 82141720h case   33:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R9 + regs.R28 + 0x00000000) );
		/* 82141720h case   33:*/		return 0x82141724;
	}
	return 0x82141724;
} // Block from 8214169Ch-82141724h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82141724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141724);
		  /* 82141724h */ case    0:  		/* lwz R10, <#[R10 + 16]> */
		/* 82141724h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82141724h case    0:*/		return 0x82141728;
		  /* 82141728h */ case    1:  		/* lwz R8, <#[R8 + 16]> */
		/* 82141728h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 82141728h case    1:*/		return 0x8214172C;
		  /* 8214172Ch */ case    2:  		/* cmplw CR6, R10, R8 */
		/* 8214172Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8214172Ch case    2:*/		return 0x82141730;
		  /* 82141730h */ case    3:  		/* bc 12, CR6_EQ, 384 */
		/* 82141730h case    3:*/		if ( regs.CR[6].eq ) { return 0x821418B0;  }
		/* 82141730h case    3:*/		return 0x82141734;
		  /* 82141734h */ case    4:  		/* lwz R10, <#[R29 + 12]> */
		/* 82141734h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 82141734h case    4:*/		return 0x82141738;
		  /* 82141738h */ case    5:  		/* addi R7, R7, 1 */
		/* 82141738h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82141738h case    5:*/		return 0x8214173C;
		  /* 8214173Ch */ case    6:  		/* addi R11, R11, 4 */
		/* 8214173Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8214173Ch case    6:*/		return 0x82141740;
		  /* 82141740h */ case    7:  		/* cmplw CR6, R7, R10 */
		/* 82141740h case    7:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R10);
		/* 82141740h case    7:*/		return 0x82141744;
		  /* 82141744h */ case    8:  		/* bc 12, CR6_LT, -104 */
		/* 82141744h case    8:*/		if ( regs.CR[6].lt ) { return 0x821416DC;  }
		/* 82141744h case    8:*/		return 0x82141748;
	}
	return 0x82141748;
} // Block from 82141724h-82141748h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82141748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141748);
		  /* 82141748h */ case    0:  		/* addi R5, R5, 1 */
		/* 82141748h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 82141748h case    0:*/		return 0x8214174C;
		  /* 8214174Ch */ case    1:  		/* addi R6, R6, 1 */
		/* 8214174Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 8214174Ch case    1:*/		return 0x82141750;
		  /* 82141750h */ case    2:  		/* addi R9, R9, 4 */
		/* 82141750h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82141750h case    2:*/		return 0x82141754;
		  /* 82141754h */ case    3:  		/* cmplw CR6, R5, R10 */
		/* 82141754h case    3:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R10);
		/* 82141754h case    3:*/		return 0x82141758;
		  /* 82141758h */ case    4:  		/* bc 12, CR6_LT, -140 */
		/* 82141758h case    4:*/		if ( regs.CR[6].lt ) { return 0x821416CC;  }
		/* 82141758h case    4:*/		return 0x8214175C;
	}
	return 0x8214175C;
} // Block from 82141748h-8214175Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214175Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214175C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214175C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214175C);
		  /* 8214175Ch */ case    0:  		/* addi R10, R1, 96 */
		/* 8214175Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8214175Ch case    0:*/		return 0x82141760;
		  /* 82141760h */ case    1:  		/* mtspr CTR, R19 */
		/* 82141760h case    1:*/		regs.CTR = regs.R19;
		/* 82141760h case    1:*/		return 0x82141764;
		  /* 82141764h */ case    2:  		/* lwz R11, <#[R10]> */
		/* 82141764h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82141764h case    2:*/		return 0x82141768;
		  /* 82141768h */ case    3:  		/* cmpwi CR6, R11, -1 */
		/* 82141768h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82141768h case    3:*/		return 0x8214176C;
		  /* 8214176Ch */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 8214176Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82141780;  }
		/* 8214176Ch case    4:*/		return 0x82141770;
		  /* 82141770h */ case    5:  		/* lwz R9, <#[R20 + 24]> */
		/* 82141770h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000018) );
		/* 82141770h case    5:*/		return 0x82141774;
		  /* 82141774h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82141774h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82141774h case    6:*/		return 0x82141778;
		  /* 82141778h */ case    7:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82141778h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82141778h case    7:*/		return 0x8214177C;
		  /* 8214177Ch */ case    8:  		/* stw R27, <#[R11]> */
		/* 8214177Ch case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 8214177Ch case    8:*/		return 0x82141780;
	}
	return 0x82141780;
} // Block from 8214175Ch-82141780h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82141780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141780);
		  /* 82141780h */ case    0:  		/* addi R10, R10, 4 */
		/* 82141780h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82141780h case    0:*/		return 0x82141784;
		  /* 82141784h */ case    1:  		/* bc 16, CR0_LT, -32 */
		/* 82141784h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82141764;  }
		/* 82141784h case    1:*/		return 0x82141788;
		  /* 82141788h */ case    2:  		/* lis R11, 4096 */
		/* 82141788h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x1000);
		/* 82141788h case    2:*/		return 0x8214178C;
		  /* 8214178Ch */ case    3:  		/* cmplwi CR6, R14, 0 */
		/* 8214178Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 8214178Ch case    3:*/		return 0x82141790;
		  /* 82141790h */ case    4:  		/* ori R10, R11, 2 */
		/* 82141790h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R11,0x2);
		/* 82141790h case    4:*/		return 0x82141794;
		  /* 82141794h */ case    5:  		/* bc 12, CR6_EQ, 92 */
		/* 82141794h case    5:*/		if ( regs.CR[6].eq ) { return 0x821417F0;  }
		/* 82141794h case    5:*/		return 0x82141798;
		  /* 82141798h */ case    6:  		/* lis R9, 4096 */
		/* 82141798h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0x1000);
		/* 82141798h case    6:*/		return 0x8214179C;
		  /* 8214179Ch */ case    7:  		/* lwz R11, <#[R14]> */
		/* 8214179Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 8214179Ch case    7:*/		return 0x821417A0;
		  /* 821417A0h */ case    8:  		/* ori R9, R9, 1 */
		/* 821417A0h case    8:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821417A0h case    8:*/		return 0x821417A4;
		  /* 821417A4h */ case    9:  		/* cmplw CR6, R11, R9 */
		/* 821417A4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821417A4h case    9:*/		return 0x821417A8;
		  /* 821417A8h */ case   10:  		/* bc 12, CR6_EQ, 68 */
		/* 821417A8h case   10:*/		if ( regs.CR[6].eq ) { return 0x821417EC;  }
		/* 821417A8h case   10:*/		return 0x821417AC;
		  /* 821417ACh */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 821417ACh case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821417ACh case   11:*/		return 0x821417B0;
		  /* 821417B0h */ case   12:  		/* bc 4, CR6_EQ, 64 */
		/* 821417B0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821417F0;  }
		/* 821417B0h case   12:*/		return 0x821417B4;
		  /* 821417B4h */ case   13:  		/* lwz R11, <#[R14 + 8]> */
		/* 821417B4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 821417B4h case   13:*/		return 0x821417B8;
		  /* 821417B8h */ case   14:  		/* lwz R9, <#[R11]> */
		/* 821417B8h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821417B8h case   14:*/		return 0x821417BC;
		  /* 821417BCh */ case   15:  		/* cmplw CR6, R9, R3 */
		/* 821417BCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R3);
		/* 821417BCh case   15:*/		return 0x821417C0;
		  /* 821417C0h */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 821417C0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821417D4;  }
		/* 821417C0h case   16:*/		return 0x821417C4;
		  /* 821417C4h */ case   17:  		/* lwz R9, <#[R11 + 4]> */
		/* 821417C4h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821417C4h case   17:*/		return 0x821417C8;
		  /* 821417C8h */ case   18:  		/* cmplw CR6, R9, R31 */
		/* 821417C8h case   18:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 821417C8h case   18:*/		return 0x821417CC;
		  /* 821417CCh */ case   19:  		/* bc 4, CR6_EQ, 8 */
		/* 821417CCh case   19:*/		if ( !regs.CR[6].eq ) { return 0x821417D4;  }
		/* 821417CCh case   19:*/		return 0x821417D0;
		  /* 821417D0h */ case   20:  		/* stw R27, <#[R14]> */
		/* 821417D0h case   20:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R14 + 0x00000000) );
		/* 821417D0h case   20:*/		return 0x821417D4;
	}
	return 0x821417D4;
} // Block from 82141780h-821417D4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821417D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821417D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821417D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821417D4);
		  /* 821417D4h */ case    0:  		/* lwz R9, <#[R11 + 4]> */
		/* 821417D4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821417D4h case    0:*/		return 0x821417D8;
		  /* 821417D8h */ case    1:  		/* cmplw CR6, R9, R3 */
		/* 821417D8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R3);
		/* 821417D8h case    1:*/		return 0x821417DC;
		  /* 821417DCh */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 821417DCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821417F0;  }
		/* 821417DCh case    2:*/		return 0x821417E0;
		  /* 821417E0h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 821417E0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821417E0h case    3:*/		return 0x821417E4;
		  /* 821417E4h */ case    4:  		/* cmplw CR6, R11, R31 */
		/* 821417E4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821417E4h case    4:*/		return 0x821417E8;
		  /* 821417E8h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 821417E8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821417F0;  }
		/* 821417E8h case    5:*/		return 0x821417EC;
	}
	return 0x821417EC;
} // Block from 821417D4h-821417ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821417ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821417EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821417EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821417EC);
		  /* 821417ECh */ case    0:  		/* stw R27, <#[R14]> */
		/* 821417ECh case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R14 + 0x00000000) );
		/* 821417ECh case    0:*/		return 0x821417F0;
	}
	return 0x821417F0;
} // Block from 821417ECh-821417F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821417F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821417F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821417F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821417F0);
		  /* 821417F0h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821417F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821417F0h case    0:*/		return 0x821417F4;
		  /* 821417F4h */ case    1:  		/* bc 12, CR6_EQ, 92 */
		/* 821417F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82141850;  }
		/* 821417F4h case    1:*/		return 0x821417F8;
		  /* 821417F8h */ case    2:  		/* lis R9, 4096 */
		/* 821417F8h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0x1000);
		/* 821417F8h case    2:*/		return 0x821417FC;
		  /* 821417FCh */ case    3:  		/* lwz R11, <#[R4]> */
		/* 821417FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821417FCh case    3:*/		return 0x82141800;
		  /* 82141800h */ case    4:  		/* ori R9, R9, 1 */
		/* 82141800h case    4:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82141800h case    4:*/		return 0x82141804;
		  /* 82141804h */ case    5:  		/* cmplw CR6, R11, R9 */
		/* 82141804h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82141804h case    5:*/		return 0x82141808;
		  /* 82141808h */ case    6:  		/* bc 12, CR6_EQ, 68 */
		/* 82141808h case    6:*/		if ( regs.CR[6].eq ) { return 0x8214184C;  }
		/* 82141808h case    6:*/		return 0x8214180C;
		  /* 8214180Ch */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8214180Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214180Ch case    7:*/		return 0x82141810;
		  /* 82141810h */ case    8:  		/* bc 4, CR6_EQ, 64 */
		/* 82141810h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82141850;  }
		/* 82141810h case    8:*/		return 0x82141814;
		  /* 82141814h */ case    9:  		/* lwz R11, <#[R4 + 8]> */
		/* 82141814h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82141814h case    9:*/		return 0x82141818;
		  /* 82141818h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 82141818h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82141818h case   10:*/		return 0x8214181C;
		  /* 8214181Ch */ case   11:  		/* cmplw CR6, R10, R3 */
		/* 8214181Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R3);
		/* 8214181Ch case   11:*/		return 0x82141820;
		  /* 82141820h */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 82141820h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82141834;  }
		/* 82141820h case   12:*/		return 0x82141824;
		  /* 82141824h */ case   13:  		/* lwz R10, <#[R11 + 4]> */
		/* 82141824h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82141824h case   13:*/		return 0x82141828;
		  /* 82141828h */ case   14:  		/* cmplw CR6, R10, R31 */
		/* 82141828h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 82141828h case   14:*/		return 0x8214182C;
		  /* 8214182Ch */ case   15:  		/* bc 4, CR6_EQ, 8 */
		/* 8214182Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x82141834;  }
		/* 8214182Ch case   15:*/		return 0x82141830;
		  /* 82141830h */ case   16:  		/* stw R27, <#[R4]> */
		/* 82141830h case   16:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R4 + 0x00000000) );
		/* 82141830h case   16:*/		return 0x82141834;
	}
	return 0x82141834;
} // Block from 821417F0h-82141834h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82141834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141834);
		  /* 82141834h */ case    0:  		/* lwz R10, <#[R11 + 4]> */
		/* 82141834h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82141834h case    0:*/		return 0x82141838;
		  /* 82141838h */ case    1:  		/* cmplw CR6, R10, R3 */
		/* 82141838h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R3);
		/* 82141838h case    1:*/		return 0x8214183C;
		  /* 8214183Ch */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 8214183Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82141850;  }
		/* 8214183Ch case    2:*/		return 0x82141840;
		  /* 82141840h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 82141840h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82141840h case    3:*/		return 0x82141844;
		  /* 82141844h */ case    4:  		/* cmplw CR6, R11, R31 */
		/* 82141844h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 82141844h case    4:*/		return 0x82141848;
		  /* 82141848h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82141848h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82141850;  }
		/* 82141848h case    5:*/		return 0x8214184C;
	}
	return 0x8214184C;
} // Block from 82141834h-8214184Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214184Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214184C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214184C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214184C);
		  /* 8214184Ch */ case    0:  		/* stw R27, <#[R4]> */
		/* 8214184Ch case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R4 + 0x00000000) );
		/* 8214184Ch case    0:*/		return 0x82141850;
	}
	return 0x82141850;
} // Block from 8214184Ch-82141850h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82141850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141850);
		  /* 82141850h */ case    0:  		/* lwz R11, <#[R20 + 24]> */
		/* 82141850h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000018) );
		/* 82141850h case    0:*/		return 0x82141854;
		  /* 82141854h */ case    1:  		/* rlwinm R31, R30, 2, 0, 29 */
		/* 82141854h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R30);
		/* 82141854h case    1:*/		return 0x82141858;
		  /* 82141858h */ case    2:  		/* lwzx R30, <#[R11 + R31]> */
		/* 82141858h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82141858h case    2:*/		return 0x8214185C;
		  /* 8214185Ch */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 8214185Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8214185Ch case    3:*/		return 0x82141860;
		  /* 82141860h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 82141860h case    4:*/		if ( regs.CR[6].eq ) { return 0x82141874;  }
		/* 82141860h case    4:*/		return 0x82141864;
		  /* 82141864h */ case    5:  		/* mr R3, R30 */
		/* 82141864h case    5:*/		regs.R3 = regs.R30;
		/* 82141864h case    5:*/		return 0x82141868;
		  /* 82141868h */ case    6:  		/* bl 899928 */
		/* 82141868h case    6:*/		regs.LR = 0x8214186C; return 0x8221D3C0;
		/* 82141868h case    6:*/		return 0x8214186C;
		  /* 8214186Ch */ case    7:  		/* mr R3, R30 */
		/* 8214186Ch case    7:*/		regs.R3 = regs.R30;
		/* 8214186Ch case    7:*/		return 0x82141870;
		  /* 82141870h */ case    8:  		/* bl -283264 */
		/* 82141870h case    8:*/		regs.LR = 0x82141874; return 0x820FC5F0;
		/* 82141870h case    8:*/		return 0x82141874;
	}
	return 0x82141874;
} // Block from 82141850h-82141874h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82141874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141874);
		  /* 82141874h */ case    0:  		/* lwz R11, <#[R20 + 24]> */
		/* 82141874h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000018) );
		/* 82141874h case    0:*/		return 0x82141878;
		  /* 82141878h */ case    1:  		/* li R3, 0 */
		/* 82141878h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82141878h case    1:*/		return 0x8214187C;
		  /* 8214187Ch */ case    2:  		/* stwx R29, <#[R11 + R31]> */
		/* 8214187Ch case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8214187Ch case    2:*/		return 0x82141880;
		  /* 82141880h */ case    3:  		/* b -888 */
		/* 82141880h case    3:*/		return 0x82141508;
		/* 82141880h case    3:*/		return 0x82141884;
	}
	return 0x82141884;
} // Block from 82141874h-82141884h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82141884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141884);
		  /* 82141884h */ case    0:  		/* li R5, 4825 */
		/* 82141884h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x12D9);
		/* 82141884h case    0:*/		return 0x82141888;
		  /* 82141888h */ case    1:  		/* lwz R11, <#[R20 + 260]> */
		/* 82141888h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000104) );
		/* 82141888h case    1:*/		return 0x8214188C;
		  /* 8214188Ch */ case    2:  		/* lis R10, -32253 */
		/* 8214188Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214188Ch case    2:*/		return 0x82141890;
		  /* 82141890h */ case    3:  		/* mr R3, R20 */
		/* 82141890h case    3:*/		regs.R3 = regs.R20;
		/* 82141890h case    3:*/		return 0x82141894;
		  /* 82141894h */ case    4:  		/* addi R6, R10, 24332 */
		/* 82141894h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x5F0C);
		/* 82141894h case    4:*/		return 0x82141898;
		  /* 82141898h */ case    5:  		/* lwz R4, <#[R11 + 60]> */
		/* 82141898h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 82141898h case    5:*/		return 0x8214189C;
		  /* 8214189Ch */ case    6:  		/* bl -209260 */
		/* 8214189Ch case    6:*/		regs.LR = 0x821418A0; return 0x8210E730;
		/* 8214189Ch case    6:*/		return 0x821418A0;
		  /* 821418A0h */ case    7:  		/* li R31, 1 */
		/* 821418A0h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821418A0h case    7:*/		return 0x821418A4;
		  /* 821418A4h */ case    8:  		/* b -772 */
		/* 821418A4h case    8:*/		return 0x821415A0;
		/* 821418A4h case    8:*/		return 0x821418A8;
	}
	return 0x821418A8;
} // Block from 82141884h-821418A8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821418A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821418A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821418A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821418A8);
		  /* 821418A8h */ case    0:  		/* li R5, 4826 */
		/* 821418A8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x12DA);
		/* 821418A8h case    0:*/		return 0x821418AC;
		  /* 821418ACh */ case    1:  		/* b -36 */
		/* 821418ACh case    1:*/		return 0x82141888;
		/* 821418ACh case    1:*/		return 0x821418B0;
	}
	return 0x821418B0;
} // Block from 821418A8h-821418B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821418B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821418B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821418B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821418B0);
		  /* 821418B0h */ case    0:  		/* lwz R11, <#[R20 + 260]> */
		/* 821418B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000104) );
		/* 821418B0h case    0:*/		return 0x821418B4;
		  /* 821418B4h */ case    1:  		/* lis R10, -32254 */
		/* 821418B4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 821418B4h case    1:*/		return 0x821418B8;
		  /* 821418B8h */ case    2:  		/* li R5, 4827 */
		/* 821418B8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x12DB);
		/* 821418B8h case    2:*/		return 0x821418BC;
		  /* 821418BCh */ case    3:  		/* addi R6, R10, -18344 */
		/* 821418BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFB858);
		/* 821418BCh case    3:*/		return 0x821418C0;
		  /* 821418C0h */ case    4:  		/* mr R3, R20 */
		/* 821418C0h case    4:*/		regs.R3 = regs.R20;
		/* 821418C0h case    4:*/		return 0x821418C4;
		  /* 821418C4h */ case    5:  		/* lwz R4, <#[R11 + 60]> */
		/* 821418C4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 821418C4h case    5:*/		return 0x821418C8;
		  /* 821418C8h */ case    6:  		/* bl -209304 */
		/* 821418C8h case    6:*/		regs.LR = 0x821418CC; return 0x8210E730;
		/* 821418C8h case    6:*/		return 0x821418CC;
		  /* 821418CCh */ case    7:  		/* lis R31, -32768 */
		/* 821418CCh case    7:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 821418CCh case    7:*/		return 0x821418D0;
		  /* 821418D0h */ case    8:  		/* ori R31, R31, 16389 */
		/* 821418D0h case    8:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 821418D0h case    8:*/		return 0x821418D4;
		  /* 821418D4h */ case    9:  		/* b -820 */
		/* 821418D4h case    9:*/		return 0x821415A0;
		/* 821418D4h case    9:*/		return 0x821418D8;
	}
	return 0x821418D8;
} // Block from 821418B0h-821418D8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821418D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821418D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821418D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821418D8);
		  /* 821418D8h */ case    0:  		/* mfspr R12, LR */
		/* 821418D8h case    0:*/		regs.R12 = regs.LR;
		/* 821418D8h case    0:*/		return 0x821418DC;
		  /* 821418DCh */ case    1:  		/* bl -722576 */
		/* 821418DCh case    1:*/		regs.LR = 0x821418E0; return 0x8209124C;
		/* 821418DCh case    1:*/		return 0x821418E0;
		  /* 821418E0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821418E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821418E0h case    2:*/		return 0x821418E4;
		  /* 821418E4h */ case    3:  		/* lwz R11, <#[R3 + 92]> */
		/* 821418E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000005C) );
		/* 821418E4h case    3:*/		return 0x821418E8;
		  /* 821418E8h */ case    4:  		/* mr R31, R3 */
		/* 821418E8h case    4:*/		regs.R31 = regs.R3;
		/* 821418E8h case    4:*/		return 0x821418EC;
		  /* 821418ECh */ case    5:  		/* li R25, 0 */
		/* 821418ECh case    5:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821418ECh case    5:*/		return 0x821418F0;
		  /* 821418F0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821418F0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821418F0h case    6:*/		return 0x821418F4;
		  /* 821418F4h */ case    7:  		/* bc 12, CR6_EQ, 140 */
		/* 821418F4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82141980;  }
		/* 821418F4h case    7:*/		return 0x821418F8;
		  /* 821418F8h */ case    8:  		/* lwz R11, <#[R3 + 12]> */
		/* 821418F8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821418F8h case    8:*/		return 0x821418FC;
		  /* 821418FCh */ case    9:  		/* mr R30, R25 */
		/* 821418FCh case    9:*/		regs.R30 = regs.R25;
		/* 821418FCh case    9:*/		return 0x82141900;
		  /* 82141900h */ case   10:  		/* stw R25, <#[R3 + 256]> */
		/* 82141900h case   10:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000100) );
		/* 82141900h case   10:*/		return 0x82141904;
		  /* 82141904h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82141904h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82141904h case   11:*/		return 0x82141908;
		  /* 82141908h */ case   12:  		/* bc 4, CR6_GT, 120 */
		/* 82141908h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82141980;  }
		/* 82141908h case   12:*/		return 0x8214190C;
		  /* 8214190Ch */ case   13:  		/* lwz R11, <#[R31 + 256]> */
		/* 8214190Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 8214190Ch case   13:*/		return 0x82141910;
		  /* 82141910h */ case   14:  		/* lis R10, 8320 */
		/* 82141910h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0x2080);
		/* 82141910h case   14:*/		return 0x82141914;
		  /* 82141914h */ case   15:  		/* lwz R9, <#[R31 + 24]> */
		/* 82141914h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 82141914h case   15:*/		return 0x82141918;
		  /* 82141918h */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82141918h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82141918h case   16:*/		return 0x8214191C;
		  /* 8214191Ch */ case   17:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8214191Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8214191Ch case   17:*/		return 0x82141920;
		  /* 82141920h */ case   18:  		/* stw R11, <#[R31 + 260]> */
		/* 82141920h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82141920h case   18:*/		return 0x82141924;
		  /* 82141924h */ case   19:  		/* lwz R11, <#[R11]> */
		/* 82141924h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82141924h case   19:*/		return 0x82141928;
		  /* 82141928h */ case   20:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82141928h case   20:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82141928h case   20:*/		return 0x8214192C;
		  /* 8214192Ch */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 8214192Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214192Ch case   21:*/		return 0x82141930;
		  /* 82141930h */ case   22:  		/* bc 4, CR6_EQ, 36 */
		/* 82141930h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82141954;  }
		/* 82141930h case   22:*/		return 0x82141934;
		  /* 82141934h */ case   23:  		/* mr R3, R31 */
		/* 82141934h case   23:*/		regs.R3 = regs.R31;
		/* 82141934h case   23:*/		return 0x82141938;
		  /* 82141938h */ case   24:  		/* bl -380344 */
		/* 82141938h case   24:*/		regs.LR = 0x8214193C; return 0x820E4B80;
		/* 82141938h case   24:*/		return 0x8214193C;
		  /* 8214193Ch */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 8214193Ch case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214193Ch case   25:*/		return 0x82141940;
		  /* 82141940h */ case   26:  		/* bc 12, CR0_LT, 792 */
		/* 82141940h case   26:*/		if ( regs.CR[0].lt ) { return 0x82141C58;  }
		/* 82141940h case   26:*/		return 0x82141944;
		  /* 82141944h */ case   27:  		/* addi R11, R3, 0 */
		/* 82141944h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x0);
		/* 82141944h case   27:*/		return 0x82141948;
	}
	return 0x82141948;
} // Block from 821418D8h-82141948h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82141948h
// Function '?EmitSrc@C30Program@D3DXShader@@MAAJKKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141948);
		  /* 82141948h */ case    0:  		/* cntlzw R11, R11 */
		/* 82141948h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82141948h case    0:*/		return 0x8214194C;
		  /* 8214194Ch */ case    1:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8214194Ch case    1:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8214194Ch case    1:*/		return 0x82141950;
		  /* 82141950h */ case    2:  		/* or R30, R11, R30 */
		/* 82141950h case    2:*/		cpu::op::or<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 82141950h case    2:*/		return 0x82141954;
	}
	return 0x82141954;
} // Block from 82141948h-82141954h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82141954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141954);
		  /* 82141954h */ case    0:  		/* lwz R11, <#[R31 + 256]> */
		/* 82141954h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 82141954h case    0:*/		return 0x82141958;
		  /* 82141958h */ case    1:  		/* addi R11, R11, 1 */
		/* 82141958h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82141958h case    1:*/		return 0x8214195C;
		  /* 8214195Ch */ case    2:  		/* stw R11, <#[R31 + 256]> */
		/* 8214195Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 8214195Ch case    2:*/		return 0x82141960;
		  /* 82141960h */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82141960h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82141960h case    3:*/		return 0x82141964;
		  /* 82141964h */ case    4:  		/* lwz R10, <#[R31 + 12]> */
		/* 82141964h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82141964h case    4:*/		return 0x82141968;
		  /* 82141968h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 82141968h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82141968h case    5:*/		return 0x8214196C;
		  /* 8214196Ch */ case    6:  		/* bc 12, CR6_LT, -96 */
		/* 8214196Ch case    6:*/		if ( regs.CR[6].lt ) { return 0x8214190C;  }
		/* 8214196Ch case    6:*/		return 0x82141970;
		  /* 82141970h */ case    7:  		/* cmpwi CR6, R30, 0 */
		/* 82141970h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 82141970h case    7:*/		return 0x82141974;
		  /* 82141974h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 82141974h case    8:*/		if ( regs.CR[6].eq ) { return 0x82141980;  }
		/* 82141974h case    8:*/		return 0x82141978;
		  /* 82141978h */ case    9:  		/* mr R3, R31 */
		/* 82141978h case    9:*/		regs.R3 = regs.R31;
		/* 82141978h case    9:*/		return 0x8214197C;
		  /* 8214197Ch */ case   10:  		/* bl -381340 */
		/* 8214197Ch case   10:*/		regs.LR = 0x82141980; return 0x820E47E0;
		/* 8214197Ch case   10:*/		return 0x82141980;
	}
	return 0x82141980;
} // Block from 82141954h-82141980h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82141980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141980);
		  /* 82141980h */ case    0:  		/* lwz R11, <#[R31 + 204]> */
		/* 82141980h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CC) );
		/* 82141980h case    0:*/		return 0x82141984;
		  /* 82141984h */ case    1:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 82141984h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 82141984h case    1:*/		return 0x82141988;
		  /* 82141988h */ case    2:  		/* bc 4, CR0_EQ, 320 */
		/* 82141988h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82141AC8;  }
		/* 82141988h case    2:*/		return 0x8214198C;
		  /* 8214198Ch */ case    3:  		/* lwz R11, <#[R31 + 12]> */
		/* 8214198Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214198Ch case    3:*/		return 0x82141990;
		  /* 82141990h */ case    4:  		/* mr R30, R25 */
		/* 82141990h case    4:*/		regs.R30 = regs.R25;
		/* 82141990h case    4:*/		return 0x82141994;
		  /* 82141994h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82141994h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82141994h case    5:*/		return 0x82141998;
		  /* 82141998h */ case    6:  		/* bc 4, CR6_GT, 68 */
		/* 82141998h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821419DC;  }
		/* 82141998h case    6:*/		return 0x8214199C;
		  /* 8214199Ch */ case    7:  		/* mr R29, R25 */
		/* 8214199Ch case    7:*/		regs.R29 = regs.R25;
		/* 8214199Ch case    7:*/		return 0x821419A0;
		  /* 821419A0h */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 821419A0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821419A0h case    8:*/		return 0x821419A4;
		  /* 821419A4h */ case    9:  		/* mr R3, R31 */
		/* 821419A4h case    9:*/		regs.R3 = regs.R31;
		/* 821419A4h case    9:*/		return 0x821419A8;
		  /* 821419A8h */ case   10:  		/* stw R30, <#[R31 + 256]> */
		/* 821419A8h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 821419A8h case   10:*/		return 0x821419AC;
		  /* 821419ACh */ case   11:  		/* lwzx R11, <#[R29 + R11]> */
		/* 821419ACh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 821419ACh case   11:*/		return 0x821419B0;
		  /* 821419B0h */ case   12:  		/* stw R11, <#[R31 + 260]> */
		/* 821419B0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 821419B0h case   12:*/		return 0x821419B4;
		  /* 821419B4h */ case   13:  		/* bl -2540 */
		/* 821419B4h case   13:*/		regs.LR = 0x821419B8; return 0x82140FC8;
		/* 821419B4h case   13:*/		return 0x821419B8;
		  /* 821419B8h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 821419B8h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821419B8h case   14:*/		return 0x821419BC;
		  /* 821419BCh */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 821419BCh case   15:*/		if ( !regs.CR[0].eq ) { return 0x821419C8;  }
		/* 821419BCh case   15:*/		return 0x821419C0;
		  /* 821419C0h */ case   16:  		/* mr R3, R31 */
		/* 821419C0h case   16:*/		regs.R3 = regs.R31;
		/* 821419C0h case   16:*/		return 0x821419C4;
		  /* 821419C4h */ case   17:  		/* bl -381412 */
		/* 821419C4h case   17:*/		regs.LR = 0x821419C8; return 0x820E47E0;
		/* 821419C4h case   17:*/		return 0x821419C8;
	}
	return 0x821419C8;
} // Block from 82141980h-821419C8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821419C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821419C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821419C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821419C8);
		  /* 821419C8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821419C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821419C8h case    0:*/		return 0x821419CC;
		  /* 821419CCh */ case    1:  		/* addi R30, R30, 1 */
		/* 821419CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821419CCh case    1:*/		return 0x821419D0;
		  /* 821419D0h */ case    2:  		/* addi R29, R29, 4 */
		/* 821419D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821419D0h case    2:*/		return 0x821419D4;
		  /* 821419D4h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 821419D4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821419D4h case    3:*/		return 0x821419D8;
		  /* 821419D8h */ case    4:  		/* bc 12, CR6_LT, -56 */
		/* 821419D8h case    4:*/		if ( regs.CR[6].lt ) { return 0x821419A0;  }
		/* 821419D8h case    4:*/		return 0x821419DC;
	}
	return 0x821419DC;
} // Block from 821419C8h-821419DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821419DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821419DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821419DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821419DC);
		  /* 821419DCh */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821419DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821419DCh case    0:*/		return 0x821419E0;
		  /* 821419E0h */ case    1:  		/* mr R30, R25 */
		/* 821419E0h case    1:*/		regs.R30 = regs.R25;
		/* 821419E0h case    1:*/		return 0x821419E4;
		  /* 821419E4h */ case    2:  		/* lis R28, 20480 */
		/* 821419E4h case    2:*/		cpu::op::lis<0>(regs,&regs.R28,0x5000);
		/* 821419E4h case    2:*/		return 0x821419E8;
		  /* 821419E8h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821419E8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821419E8h case    3:*/		return 0x821419EC;
		  /* 821419ECh */ case    4:  		/* bc 4, CR6_GT, 76 */
		/* 821419ECh case    4:*/		if ( !regs.CR[6].gt ) { return 0x82141A38;  }
		/* 821419ECh case    4:*/		return 0x821419F0;
		  /* 821419F0h */ case    5:  		/* mr R29, R25 */
		/* 821419F0h case    5:*/		regs.R29 = regs.R25;
		/* 821419F0h case    5:*/		return 0x821419F4;
		  /* 821419F4h */ case    6:  		/* lwz R11, <#[R31 + 24]> */
		/* 821419F4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821419F4h case    6:*/		return 0x821419F8;
		  /* 821419F8h */ case    7:  		/* stw R30, <#[R31 + 256]> */
		/* 821419F8h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 821419F8h case    7:*/		return 0x821419FC;
		  /* 821419FCh */ case    8:  		/* lwzx R11, <#[R29 + R11]> */
		/* 821419FCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 821419FCh case    8:*/		return 0x82141A00;
		  /* 82141A00h */ case    9:  		/* stw R11, <#[R31 + 260]> */
		/* 82141A00h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82141A00h case    9:*/		return 0x82141A04;
		  /* 82141A04h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 82141A04h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82141A04h case   10:*/		return 0x82141A08;
		  /* 82141A08h */ case   11:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82141A08h case   11:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82141A08h case   11:*/		return 0x82141A0C;
		  /* 82141A0Ch */ case   12:  		/* cmplw CR6, R11, R28 */
		/* 82141A0Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 82141A0Ch case   12:*/		return 0x82141A10;
	}
	return 0x82141A10;
} // Block from 821419DCh-82141A10h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82141A10h
// Function '??_ECVSProgram@D3DXShader@@UAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141A10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141A10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141A10);
		  /* 82141A10h */ case    0:  		/* bc 4, CR6_EQ, 20 */
		/* 82141A10h case    0:*/		if ( !regs.CR[6].eq ) { return 0x82141A24;  }
		/* 82141A10h case    0:*/		return 0x82141A14;
		  /* 82141A14h */ case    1:  		/* mr R3, R31 */
		/* 82141A14h case    1:*/		regs.R3 = regs.R31;
		/* 82141A14h case    1:*/		return 0x82141A18;
		  /* 82141A18h */ case    2:  		/* bl -6992 */
		/* 82141A18h case    2:*/		regs.LR = 0x82141A1C; return 0x8213FEC8;
		/* 82141A18h case    2:*/		return 0x82141A1C;
		  /* 82141A1Ch */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82141A1Ch case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141A1Ch case    3:*/		return 0x82141A20;
		  /* 82141A20h */ case    4:  		/* bc 12, CR0_LT, 568 */
		/* 82141A20h case    4:*/		if ( regs.CR[0].lt ) { return 0x82141C58;  }
		/* 82141A20h case    4:*/		return 0x82141A24;
	}
	return 0x82141A24;
} // Block from 82141A10h-82141A24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82141A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141A24);
		  /* 82141A24h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82141A24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82141A24h case    0:*/		return 0x82141A28;
		  /* 82141A28h */ case    1:  		/* addi R30, R30, 1 */
		/* 82141A28h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82141A28h case    1:*/		return 0x82141A2C;
		  /* 82141A2Ch */ case    2:  		/* addi R29, R29, 4 */
		/* 82141A2Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82141A2Ch case    2:*/		return 0x82141A30;
		  /* 82141A30h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 82141A30h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82141A30h case    3:*/		return 0x82141A34;
		  /* 82141A34h */ case    4:  		/* bc 12, CR6_LT, -64 */
		/* 82141A34h case    4:*/		if ( regs.CR[6].lt ) { return 0x821419F4;  }
		/* 82141A34h case    4:*/		return 0x82141A38;
	}
	return 0x82141A38;
} // Block from 82141A24h-82141A38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82141A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141A38);
		  /* 82141A38h */ case    0:  		/* mr R3, R31 */
		/* 82141A38h case    0:*/		regs.R3 = regs.R31;
		/* 82141A38h case    0:*/		return 0x82141A3C;
		  /* 82141A3Ch */ case    1:  		/* bl -381532 */
		/* 82141A3Ch case    1:*/		regs.LR = 0x82141A40; return 0x820E47E0;
		/* 82141A3Ch case    1:*/		return 0x82141A40;
		  /* 82141A40h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 82141A40h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82141A40h case    2:*/		return 0x82141A44;
		  /* 82141A44h */ case    3:  		/* mr R30, R25 */
		/* 82141A44h case    3:*/		regs.R30 = regs.R25;
		/* 82141A44h case    3:*/		return 0x82141A48;
		  /* 82141A48h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82141A48h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82141A48h case    4:*/		return 0x82141A4C;
		  /* 82141A4Ch */ case    5:  		/* bc 4, CR6_GT, 124 */
		/* 82141A4Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x82141AC8;  }
		/* 82141A4Ch case    5:*/		return 0x82141A50;
		  /* 82141A50h */ case    6:  		/* mr R29, R25 */
		/* 82141A50h case    6:*/		regs.R29 = regs.R25;
		/* 82141A50h case    6:*/		return 0x82141A54;
		  /* 82141A54h */ case    7:  		/* lwz R11, <#[R31 + 24]> */
		/* 82141A54h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82141A54h case    7:*/		return 0x82141A58;
		  /* 82141A58h */ case    8:  		/* lis R10, 4144 */
		/* 82141A58h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0x1030);
		/* 82141A58h case    8:*/		return 0x82141A5C;
		  /* 82141A5Ch */ case    9:  		/* stw R30, <#[R31 + 256]> */
		/* 82141A5Ch case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 82141A5Ch case    9:*/		return 0x82141A60;
		  /* 82141A60h */ case   10:  		/* lwzx R11, <#[R29 + R11]> */
		/* 82141A60h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82141A60h case   10:*/		return 0x82141A64;
		  /* 82141A64h */ case   11:  		/* stw R11, <#[R31 + 260]> */
		/* 82141A64h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82141A64h case   11:*/		return 0x82141A68;
		  /* 82141A68h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 82141A68h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82141A68h case   12:*/		return 0x82141A6C;
		  /* 82141A6Ch */ case   13:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82141A6Ch case   13:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82141A6Ch case   13:*/		return 0x82141A70;
	}
	return 0x82141A70;
} // Block from 82141A38h-82141A70h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82141A70h
// Function '?VSMatchDST@CVSProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141A70);
		  /* 82141A70h */ case    0:  		/* cmplw CR6, R11, R10 */
		/* 82141A70h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82141A70h case    0:*/		return 0x82141A74;
		  /* 82141A74h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 82141A74h case    1:*/		if ( regs.CR[6].eq ) { return 0x82141AA4;  }
		/* 82141A74h case    1:*/		return 0x82141A78;
		  /* 82141A78h */ case    2:  		/* lis R10, 4176 */
		/* 82141A78h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0x1050);
		/* 82141A78h case    2:*/		return 0x82141A7C;
		  /* 82141A7Ch */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82141A7Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82141A7Ch case    3:*/		return 0x82141A80;
		  /* 82141A80h */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 82141A80h case    4:*/		if ( regs.CR[6].eq ) { return 0x82141AA4;  }
		/* 82141A80h case    4:*/		return 0x82141A84;
		  /* 82141A84h */ case    5:  		/* lis R10, 4192 */
		/* 82141A84h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x1060);
		/* 82141A84h case    5:*/		return 0x82141A88;
		  /* 82141A88h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 82141A88h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82141A88h case    6:*/		return 0x82141A8C;
		  /* 82141A8Ch */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82141A8Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82141AA4;  }
		/* 82141A8Ch case    7:*/		return 0x82141A90;
		  /* 82141A90h */ case    8:  		/* lis R10, 4208 */
		/* 82141A90h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0x1070);
		/* 82141A90h case    8:*/		return 0x82141A94;
		  /* 82141A94h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 82141A94h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82141A94h case    9:*/		return 0x82141A98;
		  /* 82141A98h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 82141A98h case   10:*/		if ( regs.CR[6].eq ) { return 0x82141AA4;  }
		/* 82141A98h case   10:*/		return 0x82141A9C;
		  /* 82141A9Ch */ case   11:  		/* cmplw CR6, R11, R28 */
		/* 82141A9Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 82141A9Ch case   11:*/		return 0x82141AA0;
		  /* 82141AA0h */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 82141AA0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82141AB4;  }
		/* 82141AA0h case   12:*/		return 0x82141AA4;
	}
	return 0x82141AA4;
} // Block from 82141A70h-82141AA4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82141AA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141AA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141AA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141AA4);
		  /* 82141AA4h */ case    0:  		/* mr R3, R31 */
		/* 82141AA4h case    0:*/		regs.R3 = regs.R31;
		/* 82141AA4h case    0:*/		return 0x82141AA8;
		  /* 82141AA8h */ case    1:  		/* bl -374472 */
		/* 82141AA8h case    1:*/		regs.LR = 0x82141AAC; return 0x820E63E0;
		/* 82141AA8h case    1:*/		return 0x82141AAC;
		  /* 82141AACh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82141AACh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141AACh case    2:*/		return 0x82141AB0;
		  /* 82141AB0h */ case    3:  		/* bc 12, CR0_LT, 424 */
		/* 82141AB0h case    3:*/		if ( regs.CR[0].lt ) { return 0x82141C58;  }
		/* 82141AB0h case    3:*/		return 0x82141AB4;
	}
	return 0x82141AB4;
} // Block from 82141AA4h-82141AB4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82141AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141AB4);
		  /* 82141AB4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82141AB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82141AB4h case    0:*/		return 0x82141AB8;
		  /* 82141AB8h */ case    1:  		/* addi R30, R30, 1 */
		/* 82141AB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82141AB8h case    1:*/		return 0x82141ABC;
		  /* 82141ABCh */ case    2:  		/* addi R29, R29, 4 */
		/* 82141ABCh case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82141ABCh case    2:*/		return 0x82141AC0;
		  /* 82141AC0h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 82141AC0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82141AC0h case    3:*/		return 0x82141AC4;
		  /* 82141AC4h */ case    4:  		/* bc 12, CR6_LT, -112 */
		/* 82141AC4h case    4:*/		if ( regs.CR[6].lt ) { return 0x82141A54;  }
		/* 82141AC4h case    4:*/		return 0x82141AC8;
	}
	return 0x82141AC8;
} // Block from 82141AB4h-82141AC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82141AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141AC8);
		  /* 82141AC8h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 82141AC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82141AC8h case    0:*/		return 0x82141ACC;
		  /* 82141ACCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82141ACCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82141ACCh case    1:*/		return 0x82141AD0;
		  /* 82141AD0h */ case    2:  		/* bc 12, CR6_EQ, 336 */
		/* 82141AD0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82141C20;  }
		/* 82141AD0h case    2:*/		return 0x82141AD4;
		  /* 82141AD4h */ case    3:  		/* mr R26, R25 */
		/* 82141AD4h case    3:*/		regs.R26 = regs.R25;
		/* 82141AD4h case    3:*/		return 0x82141AD8;
		  /* 82141AD8h */ case    4:  		/* cmplwi CR6, R26, 16 */
		/* 82141AD8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000010);
		/* 82141AD8h case    4:*/		return 0x82141ADC;
		  /* 82141ADCh */ case    5:  		/* bc 4, CR6_LT, 148 */
		/* 82141ADCh case    5:*/		if ( !regs.CR[6].lt ) { return 0x82141B70;  }
		/* 82141ADCh case    5:*/		return 0x82141AE0;
		  /* 82141AE0h */ case    6:  		/* lwz R28, <#[R31 + 12]> */
		/* 82141AE0h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 82141AE0h case    6:*/		return 0x82141AE4;
		  /* 82141AE4h */ case    7:  		/* li R27, 1 */
		/* 82141AE4h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82141AE4h case    7:*/		return 0x82141AE8;
		  /* 82141AE8h */ case    8:  		/* mr R30, R25 */
		/* 82141AE8h case    8:*/		regs.R30 = regs.R25;
		/* 82141AE8h case    8:*/		return 0x82141AEC;
		  /* 82141AECh */ case    9:  		/* cmplwi CR6, R28, 0 */
		/* 82141AECh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82141AECh case    9:*/		return 0x82141AF0;
		  /* 82141AF0h */ case   10:  		/* bc 12, CR6_EQ, 92 */
		/* 82141AF0h case   10:*/		if ( regs.CR[6].eq ) { return 0x82141B4C;  }
		/* 82141AF0h case   10:*/		return 0x82141AF4;
		  /* 82141AF4h */ case   11:  		/* mr R29, R25 */
		/* 82141AF4h case   11:*/		regs.R29 = regs.R25;
		/* 82141AF4h case   11:*/		return 0x82141AF8;
		  /* 82141AF8h */ case   12:  		/* lwz R11, <#[R31 + 24]> */
		/* 82141AF8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82141AF8h case   12:*/		return 0x82141AFC;
		  /* 82141AFCh */ case   13:  		/* mr R3, R31 */
		/* 82141AFCh case   13:*/		regs.R3 = regs.R31;
		/* 82141AFCh case   13:*/		return 0x82141B00;
		  /* 82141B00h */ case   14:  		/* lwzx R11, <#[R29 + R11]> */
		/* 82141B00h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82141B00h case   14:*/		return 0x82141B04;
		  /* 82141B04h */ case   15:  		/* stw R11, <#[R31 + 260]> */
		/* 82141B04h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82141B04h case   15:*/		return 0x82141B08;
		  /* 82141B08h */ case   16:  		/* bl -379216 */
		/* 82141B08h case   16:*/		regs.LR = 0x82141B0C; return 0x820E51B8;
		/* 82141B08h case   16:*/		return 0x82141B0C;
		  /* 82141B0Ch */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 82141B0Ch case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141B0Ch case   17:*/		return 0x82141B10;
		  /* 82141B10h */ case   18:  		/* bc 12, CR0_LT, 328 */
		/* 82141B10h case   18:*/		if ( regs.CR[0].lt ) { return 0x82141C58;  }
		/* 82141B10h case   18:*/		return 0x82141B14;
		  /* 82141B14h */ case   19:  		/* subfic R11, R3, 0 */
		/* 82141B14h case   19:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R3,0x0);
		/* 82141B14h case   19:*/		return 0x82141B18;
		  /* 82141B18h */ case   20:  		/* lwz R4, <#[R31 + 260]> */
		/* 82141B18h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 82141B18h case   20:*/		return 0x82141B1C;
		  /* 82141B1Ch */ case   21:  		/* mr R3, R31 */
		/* 82141B1Ch case   21:*/		regs.R3 = regs.R31;
		/* 82141B1Ch case   21:*/		return 0x82141B20;
		  /* 82141B20h */ case   22:  		/* subfe R11, R11, R11 */
		/* 82141B20h case   22:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82141B20h case   22:*/		return 0x82141B24;
		  /* 82141B24h */ case   23:  		/* and R27, R11, R27 */
		/* 82141B24h case   23:*/		cpu::op::and<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 82141B24h case   23:*/		return 0x82141B28;
		  /* 82141B28h */ case   24:  		/* bl -280256 */
		/* 82141B28h case   24:*/		regs.LR = 0x82141B2C; return 0x820FD468;
		/* 82141B28h case   24:*/		return 0x82141B2C;
		  /* 82141B2Ch */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 82141B2Ch case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141B2Ch case   25:*/		return 0x82141B30;
		  /* 82141B30h */ case   26:  		/* bc 12, CR0_LT, 296 */
		/* 82141B30h case   26:*/		if ( regs.CR[0].lt ) { return 0x82141C58;  }
		/* 82141B30h case   26:*/		return 0x82141B34;
		  /* 82141B34h */ case   27:  		/* lwz R11, <#[R31 + 260]> */
		/* 82141B34h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82141B34h case   27:*/		return 0x82141B38;
		  /* 82141B38h */ case   28:  		/* addi R30, R30, 1 */
		/* 82141B38h case   28:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82141B38h case   28:*/		return 0x82141B3C;
		  /* 82141B3Ch */ case   29:  		/* addi R29, R29, 4 */
		/* 82141B3Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82141B3Ch case   29:*/		return 0x82141B40;
		  /* 82141B40h */ case   30:  		/* cmplw CR6, R30, R28 */
		/* 82141B40h case   30:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 82141B40h case   30:*/		return 0x82141B44;
		  /* 82141B44h */ case   31:  		/* stw R25, <#[R11]> */
		/* 82141B44h case   31:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000000) );
		/* 82141B44h case   31:*/		return 0x82141B48;
		  /* 82141B48h */ case   32:  		/* bc 12, CR6_LT, -80 */
		/* 82141B48h case   32:*/		if ( regs.CR[6].lt ) { return 0x82141AF8;  }
		/* 82141B48h case   32:*/		return 0x82141B4C;
	}
	return 0x82141B4C;
} // Block from 82141AC8h-82141B4Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 82141B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141B4C);
		  /* 82141B4Ch */ case    0:  		/* mr R3, R31 */
		/* 82141B4Ch case    0:*/		regs.R3 = regs.R31;
		/* 82141B4Ch case    0:*/		return 0x82141B50;
		  /* 82141B50h */ case    1:  		/* bl -261872 */
		/* 82141B50h case    1:*/		regs.LR = 0x82141B54; return 0x82101C60;
		/* 82141B50h case    1:*/		return 0x82141B54;
		  /* 82141B54h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82141B54h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141B54h case    2:*/		return 0x82141B58;
		  /* 82141B58h */ case    3:  		/* bc 12, CR0_LT, 256 */
		/* 82141B58h case    3:*/		if ( regs.CR[0].lt ) { return 0x82141C58;  }
		/* 82141B58h case    3:*/		return 0x82141B5C;
		  /* 82141B5Ch */ case    4:  		/* addi R26, R26, 1 */
		/* 82141B5Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82141B5Ch case    4:*/		return 0x82141B60;
		  /* 82141B60h */ case    5:  		/* cmpwi CR6, R27, 0 */
		/* 82141B60h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 82141B60h case    5:*/		return 0x82141B64;
		  /* 82141B64h */ case    6:  		/* bc 12, CR6_EQ, -140 */
		/* 82141B64h case    6:*/		if ( regs.CR[6].eq ) { return 0x82141AD8;  }
		/* 82141B64h case    6:*/		return 0x82141B68;
		  /* 82141B68h */ case    7:  		/* cmplwi CR6, R26, 16 */
		/* 82141B68h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000010);
		/* 82141B68h case    7:*/		return 0x82141B6C;
		  /* 82141B6Ch */ case    8:  		/* bc 12, CR6_LT, 180 */
		/* 82141B6Ch case    8:*/		if ( regs.CR[6].lt ) { return 0x82141C20;  }
		/* 82141B6Ch case    8:*/		return 0x82141B70;
	}
	return 0x82141B70;
} // Block from 82141B4Ch-82141B70h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82141B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141B70);
		  /* 82141B70h */ case    0:  		/* lwz R28, <#[R31 + 12]> */
		/* 82141B70h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 82141B70h case    0:*/		return 0x82141B74;
		  /* 82141B74h */ case    1:  		/* li R26, 1 */
		/* 82141B74h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82141B74h case    1:*/		return 0x82141B78;
		  /* 82141B78h */ case    2:  		/* mr R30, R25 */
		/* 82141B78h case    2:*/		regs.R30 = regs.R25;
		/* 82141B78h case    2:*/		return 0x82141B7C;
		  /* 82141B7Ch */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 82141B7Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82141B7Ch case    3:*/		return 0x82141B80;
		  /* 82141B80h */ case    4:  		/* bc 12, CR6_EQ, 124 */
		/* 82141B80h case    4:*/		if ( regs.CR[6].eq ) { return 0x82141BFC;  }
		/* 82141B80h case    4:*/		return 0x82141B84;
		  /* 82141B84h */ case    5:  		/* lis R11, -32254 */
		/* 82141B84h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82141B84h case    5:*/		return 0x82141B88;
		  /* 82141B88h */ case    6:  		/* mr R29, R25 */
		/* 82141B88h case    6:*/		regs.R29 = regs.R25;
		/* 82141B88h case    6:*/		return 0x82141B8C;
		  /* 82141B8Ch */ case    7:  		/* addi R27, R11, -14540 */
		/* 82141B8Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFC734);
		/* 82141B8Ch case    7:*/		return 0x82141B90;
		  /* 82141B90h */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 82141B90h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82141B90h case    8:*/		return 0x82141B94;
		  /* 82141B94h */ case    9:  		/* mr R3, R31 */
		/* 82141B94h case    9:*/		regs.R3 = regs.R31;
		/* 82141B94h case    9:*/		return 0x82141B98;
		  /* 82141B98h */ case   10:  		/* lwzx R11, <#[R29 + R11]> */
		/* 82141B98h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82141B98h case   10:*/		return 0x82141B9C;
		  /* 82141B9Ch */ case   11:  		/* stw R11, <#[R31 + 260]> */
		/* 82141B9Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82141B9Ch case   11:*/		return 0x82141BA0;
		  /* 82141BA0h */ case   12:  		/* bl -379368 */
		/* 82141BA0h case   12:*/		regs.LR = 0x82141BA4; return 0x820E51B8;
		/* 82141BA0h case   12:*/		return 0x82141BA4;
		  /* 82141BA4h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82141BA4h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141BA4h case   13:*/		return 0x82141BA8;
		  /* 82141BA8h */ case   14:  		/* bc 12, CR0_LT, 176 */
		/* 82141BA8h case   14:*/		if ( regs.CR[0].lt ) { return 0x82141C58;  }
		/* 82141BA8h case   14:*/		return 0x82141BAC;
		  /* 82141BACh */ case   15:  		/* cmpwi CR6, R3, 0 */
		/* 82141BACh case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82141BACh case   15:*/		return 0x82141BB0;
		  /* 82141BB0h */ case   16:  		/* bc 4, CR6_EQ, 32 */
		/* 82141BB0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82141BD0;  }
		/* 82141BB0h case   16:*/		return 0x82141BB4;
		  /* 82141BB4h */ case   17:  		/* lwz R11, <#[R31 + 260]> */
		/* 82141BB4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82141BB4h case   17:*/		return 0x82141BB8;
		  /* 82141BB8h */ case   18:  		/* mr R6, R27 */
		/* 82141BB8h case   18:*/		regs.R6 = regs.R27;
		/* 82141BB8h case   18:*/		return 0x82141BBC;
		  /* 82141BBCh */ case   19:  		/* li R5, 4553 */
		/* 82141BBCh case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x11C9);
		/* 82141BBCh case   19:*/		return 0x82141BC0;
		  /* 82141BC0h */ case   20:  		/* mr R3, R31 */
		/* 82141BC0h case   20:*/		regs.R3 = regs.R31;
		/* 82141BC0h case   20:*/		return 0x82141BC4;
		  /* 82141BC4h */ case   21:  		/* lwz R4, <#[R11 + 60]> */
		/* 82141BC4h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 82141BC4h case   21:*/		return 0x82141BC8;
		  /* 82141BC8h */ case   22:  		/* bl -210072 */
		/* 82141BC8h case   22:*/		regs.LR = 0x82141BCC; return 0x8210E730;
		/* 82141BC8h case   22:*/		return 0x82141BCC;
		  /* 82141BCCh */ case   23:  		/* mr R26, R25 */
		/* 82141BCCh case   23:*/		regs.R26 = regs.R25;
		/* 82141BCCh case   23:*/		return 0x82141BD0;
	}
	return 0x82141BD0;
} // Block from 82141B70h-82141BD0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82141BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141BD0);
		  /* 82141BD0h */ case    0:  		/* mr R3, R31 */
		/* 82141BD0h case    0:*/		regs.R3 = regs.R31;
		/* 82141BD0h case    0:*/		return 0x82141BD4;
		  /* 82141BD4h */ case    1:  		/* lwz R4, <#[R31 + 260]> */
		/* 82141BD4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 82141BD4h case    1:*/		return 0x82141BD8;
		  /* 82141BD8h */ case    2:  		/* bl -280432 */
		/* 82141BD8h case    2:*/		regs.LR = 0x82141BDC; return 0x820FD468;
		/* 82141BD8h case    2:*/		return 0x82141BDC;
		  /* 82141BDCh */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82141BDCh case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141BDCh case    3:*/		return 0x82141BE0;
		  /* 82141BE0h */ case    4:  		/* bc 12, CR0_LT, 120 */
		/* 82141BE0h case    4:*/		if ( regs.CR[0].lt ) { return 0x82141C58;  }
		/* 82141BE0h case    4:*/		return 0x82141BE4;
		  /* 82141BE4h */ case    5:  		/* lwz R11, <#[R31 + 260]> */
		/* 82141BE4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82141BE4h case    5:*/		return 0x82141BE8;
		  /* 82141BE8h */ case    6:  		/* addi R30, R30, 1 */
		/* 82141BE8h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82141BE8h case    6:*/		return 0x82141BEC;
		  /* 82141BECh */ case    7:  		/* addi R29, R29, 4 */
		/* 82141BECh case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82141BECh case    7:*/		return 0x82141BF0;
		  /* 82141BF0h */ case    8:  		/* cmplw CR6, R30, R28 */
		/* 82141BF0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 82141BF0h case    8:*/		return 0x82141BF4;
		  /* 82141BF4h */ case    9:  		/* stw R25, <#[R11]> */
		/* 82141BF4h case    9:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000000) );
		/* 82141BF4h case    9:*/		return 0x82141BF8;
		  /* 82141BF8h */ case   10:  		/* bc 12, CR6_LT, -104 */
		/* 82141BF8h case   10:*/		if ( regs.CR[6].lt ) { return 0x82141B90;  }
		/* 82141BF8h case   10:*/		return 0x82141BFC;
	}
	return 0x82141BFC;
} // Block from 82141BD0h-82141BFCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82141BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141BFC);
		  /* 82141BFCh */ case    0:  		/* mr R3, R31 */
		/* 82141BFCh case    0:*/		regs.R3 = regs.R31;
		/* 82141BFCh case    0:*/		return 0x82141C00;
		  /* 82141C00h */ case    1:  		/* bl -262048 */
		/* 82141C00h case    1:*/		regs.LR = 0x82141C04; return 0x82101C60;
		/* 82141C00h case    1:*/		return 0x82141C04;
		  /* 82141C04h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82141C04h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141C04h case    2:*/		return 0x82141C08;
		  /* 82141C08h */ case    3:  		/* bc 12, CR0_LT, 80 */
		/* 82141C08h case    3:*/		if ( regs.CR[0].lt ) { return 0x82141C58;  }
		/* 82141C08h case    3:*/		return 0x82141C0C;
		  /* 82141C0Ch */ case    4:  		/* cmpwi CR6, R26, 0 */
		/* 82141C0Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82141C0Ch case    4:*/		return 0x82141C10;
		  /* 82141C10h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 82141C10h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82141C20;  }
		/* 82141C10h case    5:*/		return 0x82141C14;
		  /* 82141C14h */ case    6:  		/* lis R3, -32768 */
		/* 82141C14h case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82141C14h case    6:*/		return 0x82141C18;
		  /* 82141C18h */ case    7:  		/* ori R3, R3, 16389 */
		/* 82141C18h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82141C18h case    7:*/		return 0x82141C1C;
		  /* 82141C1Ch */ case    8:  		/* b 60 */
		/* 82141C1Ch case    8:*/		return 0x82141C58;
		/* 82141C1Ch case    8:*/		return 0x82141C20;
	}
	return 0x82141C20;
} // Block from 82141BFCh-82141C20h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82141C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141C20);
		  /* 82141C20h */ case    0:  		/* lwz R11, <#[R31 + 96]> */
		/* 82141C20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 82141C20h case    0:*/		return 0x82141C24;
		  /* 82141C24h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82141C24h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82141C24h case    1:*/		return 0x82141C28;
		  /* 82141C28h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 82141C28h case    2:*/		if ( regs.CR[6].eq ) { return 0x82141C54;  }
		/* 82141C28h case    2:*/		return 0x82141C2C;
		  /* 82141C2Ch */ case    3:  		/* mr R3, R31 */
		/* 82141C2Ch case    3:*/		regs.R3 = regs.R31;
		/* 82141C2Ch case    3:*/		return 0x82141C30;
		  /* 82141C30h */ case    4:  		/* bl -330248 */
		/* 82141C30h case    4:*/		regs.LR = 0x82141C34; return 0x820F1228;
		/* 82141C30h case    4:*/		return 0x82141C34;
		  /* 82141C34h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82141C34h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141C34h case    5:*/		return 0x82141C38;
		  /* 82141C38h */ case    6:  		/* bc 12, CR0_LT, 32 */
		/* 82141C38h case    6:*/		if ( regs.CR[0].lt ) { return 0x82141C58;  }
		/* 82141C38h case    6:*/		return 0x82141C3C;
		  /* 82141C3Ch */ case    7:  		/* mr R3, R31 */
		/* 82141C3Ch case    7:*/		regs.R3 = regs.R31;
		/* 82141C3Ch case    7:*/		return 0x82141C40;
		  /* 82141C40h */ case    8:  		/* bl -382048 */
		/* 82141C40h case    8:*/		regs.LR = 0x82141C44; return 0x820E47E0;
		/* 82141C40h case    8:*/		return 0x82141C44;
		  /* 82141C44h */ case    9:  		/* mr R3, R31 */
		/* 82141C44h case    9:*/		regs.R3 = regs.R31;
		/* 82141C44h case    9:*/		return 0x82141C48;
		  /* 82141C48h */ case   10:  		/* bl -227992 */
		/* 82141C48h case   10:*/		regs.LR = 0x82141C4C; return 0x8210A1B0;
		/* 82141C48h case   10:*/		return 0x82141C4C;
		  /* 82141C4Ch */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 82141C4Ch case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141C4Ch case   11:*/		return 0x82141C50;
		  /* 82141C50h */ case   12:  		/* bc 12, CR0_LT, 8 */
		/* 82141C50h case   12:*/		if ( regs.CR[0].lt ) { return 0x82141C58;  }
		/* 82141C50h case   12:*/		return 0x82141C54;
	}
	return 0x82141C54;
} // Block from 82141C20h-82141C54h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82141C54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141C54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141C54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141C54);
		  /* 82141C54h */ case    0:  		/* mr R3, R25 */
		/* 82141C54h case    0:*/		regs.R3 = regs.R25;
		/* 82141C54h case    0:*/		return 0x82141C58;
	}
	return 0x82141C58;
} // Block from 82141C54h-82141C58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82141C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141C58);
		  /* 82141C58h */ case    0:  		/* addi R1, R1, 144 */
		/* 82141C58h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82141C58h case    0:*/		return 0x82141C5C;
		  /* 82141C5Ch */ case    1:  		/* b -723392 */
		/* 82141C5Ch case    1:*/		return 0x8209129C;
		/* 82141C5Ch case    1:*/		return 0x82141C60;
	}
	return 0x82141C60;
} // Block from 82141C58h-82141C60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82141C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141C60);
		  /* 82141C60h */ case    0:  		/* mfspr R12, LR */
		/* 82141C60h case    0:*/		regs.R12 = regs.LR;
		/* 82141C60h case    0:*/		return 0x82141C64;
		  /* 82141C64h */ case    1:  		/* bl -723492 */
		/* 82141C64h case    1:*/		regs.LR = 0x82141C68; return 0x82091240;
		/* 82141C64h case    1:*/		return 0x82141C68;
		  /* 82141C68h */ case    2:  		/* stwu R1, <#[R1 - 320]> */
		/* 82141C68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEC0);
		/* 82141C68h case    2:*/		return 0x82141C6C;
		  /* 82141C6Ch */ case    3:  		/* mr R31, R3 */
		/* 82141C6Ch case    3:*/		regs.R31 = regs.R3;
		/* 82141C6Ch case    3:*/		return 0x82141C70;
		  /* 82141C70h */ case    4:  		/* mr R26, R4 */
		/* 82141C70h case    4:*/		regs.R26 = regs.R4;
		/* 82141C70h case    4:*/		return 0x82141C74;
		  /* 82141C74h */ case    5:  		/* mr R22, R5 */
		/* 82141C74h case    5:*/		regs.R22 = regs.R5;
		/* 82141C74h case    5:*/		return 0x82141C78;
		  /* 82141C78h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 82141C78h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82141C78h case    6:*/		return 0x82141C7C;
		  /* 82141C7Ch */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 82141C7Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82141C88;  }
		/* 82141C7Ch case    7:*/		return 0x82141C80;
		  /* 82141C80h */ case    8:  		/* li R3, 1 */
		/* 82141C80h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82141C80h case    8:*/		return 0x82141C84;
		  /* 82141C84h */ case    9:  		/* b 540 */
		/* 82141C84h case    9:*/		return 0x82141EA0;
		/* 82141C84h case    9:*/		return 0x82141C88;
	}
	return 0x82141C88;
} // Block from 82141C60h-82141C88h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82141C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141C88);
		  /* 82141C88h */ case    0:  		/* lwz R10, <#[R26]> */
		/* 82141C88h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82141C88h case    0:*/		return 0x82141C8C;
		  /* 82141C8Ch */ case    1:  		/* rlwinm. R11, R10, 0, 0, 11 */
		/* 82141C8Ch case    1:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R10);
		/* 82141C8Ch case    1:*/		return 0x82141C90;
		  /* 82141C90h */ case    2:  		/* bc 12, CR0_EQ, 524 */
		/* 82141C90h case    2:*/		if ( regs.CR[0].eq ) { return 0x82141E9C;  }
		/* 82141C90h case    2:*/		return 0x82141C94;
		  /* 82141C94h */ case    3:  		/* lis R9, 8304 */
		/* 82141C94h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0x2070);
		/* 82141C94h case    3:*/		return 0x82141C98;
		  /* 82141C98h */ case    4:  		/* cmplw CR6, R11, R9 */
		/* 82141C98h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82141C98h case    4:*/		return 0x82141C9C;
		  /* 82141C9Ch */ case    5:  		/* bc 12, CR6_EQ, 512 */
		/* 82141C9Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82141E9C;  }
		/* 82141C9Ch case    5:*/		return 0x82141CA0;
		  /* 82141CA0h */ case    6:  		/* lwz R9, <#[R26 + 4]> */
		/* 82141CA0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000004) );
		/* 82141CA0h case    6:*/		return 0x82141CA4;
		  /* 82141CA4h */ case    7:  		/* rlwinm R10, R10, 0, 12, 31 */
		/* 82141CA4h case    7:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R10);
		/* 82141CA4h case    7:*/		return 0x82141CA8;
		  /* 82141CA8h */ case    8:  		/* lis R8, 28752 */
		/* 82141CA8h case    8:*/		cpu::op::lis<0>(regs,&regs.R8,0x7050);
		/* 82141CA8h case    8:*/		return 0x82141CAC;
		  /* 82141CACh */ case    9:  		/* divwu R24, R9, R10 */
		/* 82141CACh case    9:*/		cpu::op::divwu<0>(regs,&regs.R24,regs.R9,regs.R10);
		/* 82141CACh case    9:*/		return 0x82141CB0;
		  /* 82141CB0h */ case   10:  		/* twi 6, R10, 0 */
		/* 82141CB0h case   10:*/		cpu::op::tw<6>(regs, 0x82141CB0, regs.R10, 0x00000000);
		/* 82141CB0h case   10:*/		return 0x82141CB4;
		  /* 82141CB4h */ case   11:  		/* cmplw CR6, R11, R8 */
		/* 82141CB4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 82141CB4h case   11:*/		return 0x82141CB8;
		  /* 82141CB8h */ case   12:  		/* bc 12, CR6_EQ, 28 */
		/* 82141CB8h case   12:*/		if ( regs.CR[6].eq ) { return 0x82141CD4;  }
		/* 82141CB8h case   12:*/		return 0x82141CBC;
		  /* 82141CBCh */ case   13:  		/* lis R9, 28768 */
		/* 82141CBCh case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0x7060);
		/* 82141CBCh case   13:*/		return 0x82141CC0;
		  /* 82141CC0h */ case   14:  		/* cmplw CR6, R11, R9 */
		/* 82141CC0h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82141CC0h case   14:*/		return 0x82141CC4;
		  /* 82141CC4h */ case   15:  		/* bc 12, CR6_EQ, 16 */
		/* 82141CC4h case   15:*/		if ( regs.CR[6].eq ) { return 0x82141CD4;  }
		/* 82141CC4h case   15:*/		return 0x82141CC8;
		  /* 82141CC8h */ case   16:  		/* lis R9, 28784 */
		/* 82141CC8h case   16:*/		cpu::op::lis<0>(regs,&regs.R9,0x7070);
		/* 82141CC8h case   16:*/		return 0x82141CCC;
		  /* 82141CCCh */ case   17:  		/* cmplw CR6, R11, R9 */
		/* 82141CCCh case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82141CCCh case   17:*/		return 0x82141CD0;
		  /* 82141CD0h */ case   18:  		/* bc 4, CR6_EQ, 8 */
		/* 82141CD0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82141CD8;  }
		/* 82141CD0h case   18:*/		return 0x82141CD4;
	}
	return 0x82141CD4;
} // Block from 82141C88h-82141CD4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82141CD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141CD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141CD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141CD4);
		  /* 82141CD4h */ case    0:  		/* li R24, 2 */
		/* 82141CD4h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x2);
		/* 82141CD4h case    0:*/		return 0x82141CD8;
	}
	return 0x82141CD8;
} // Block from 82141CD4h-82141CD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82141CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141CD8);
		  /* 82141CD8h */ case    0:  		/* cmplwi CR6, R24, 1 */
		/* 82141CD8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000001);
		/* 82141CD8h case    0:*/		return 0x82141CDC;
		  /* 82141CDCh */ case    1:  		/* bc 4, CR6_GT, 448 */
		/* 82141CDCh case    1:*/		if ( !regs.CR[6].gt ) { return 0x82141E9C;  }
		/* 82141CDCh case    1:*/		return 0x82141CE0;
		  /* 82141CE0h */ case    2:  		/* lwz R11, <#[R31 + 128]> */
		/* 82141CE0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 82141CE0h case    2:*/		return 0x82141CE4;
		  /* 82141CE4h */ case    3:  		/* addi R9, R1, 80 */
		/* 82141CE4h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 82141CE4h case    3:*/		return 0x82141CE8;
		  /* 82141CE8h */ case    4:  		/* lwz R8, <#[R31 + 136]> */
		/* 82141CE8h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000088) );
		/* 82141CE8h case    4:*/		return 0x82141CEC;
		  /* 82141CECh */ case    5:  		/* li R28, 0 */
		/* 82141CECh case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82141CECh case    5:*/		return 0x82141CF0;
		  /* 82141CF0h */ case    6:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82141CF0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82141CF0h case    6:*/		return 0x82141CF4;
		  /* 82141CF4h */ case    7:  		/* lwz R6, <#[R31 + 124]> */
		/* 82141CF4h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000007C) );
		/* 82141CF4h case    7:*/		return 0x82141CF8;
		  /* 82141CF8h */ case    8:  		/* addi R7, R1, 160 */
		/* 82141CF8h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 82141CF8h case    8:*/		return 0x82141CFC;
		  /* 82141CFCh */ case    9:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82141CFCh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82141CFCh case    9:*/		return 0x82141D00;
		  /* 82141D00h */ case   10:  		/* addi R4, R1, 80 */
		/* 82141D00h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82141D00h case   10:*/		return 0x82141D04;
		  /* 82141D04h */ case   11:  		/* addi R3, R1, 160 */
		/* 82141D04h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 82141D04h case   11:*/		return 0x82141D08;
		  /* 82141D08h */ case   12:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 82141D08h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 82141D08h case   12:*/		return 0x82141D0C;
		  /* 82141D0Ch */ case   13:  		/* stwx R28, <#[R5 + R9]> */
		/* 82141D0Ch case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R5 + regs.R9 + 0x00000000) );
		/* 82141D0Ch case   13:*/		return 0x82141D10;
		  /* 82141D10h */ case   14:  		/* addi R30, R1, 80 */
		/* 82141D10h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x50);
		/* 82141D10h case   14:*/		return 0x82141D14;
		  /* 82141D14h */ case   15:  		/* addi R27, R1, 160 */
		/* 82141D14h case   15:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R1,0xA0);
		/* 82141D14h case   15:*/		return 0x82141D18;
		  /* 82141D18h */ case   16:  		/* li R11, 1 */
		/* 82141D18h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82141D18h case   16:*/		return 0x82141D1C;
		  /* 82141D1Ch */ case   17:  		/* stwx R28, <#[R8 + R4]> */
		/* 82141D1Ch case   17:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82141D1Ch case   17:*/		return 0x82141D20;
		  /* 82141D20h */ case   18:  		/* li R9, 3 */
		/* 82141D20h case   18:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 82141D20h case   18:*/		return 0x82141D24;
		  /* 82141D24h */ case   19:  		/* stwx R11, <#[R5 + R7]> */
		/* 82141D24h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 82141D24h case   19:*/		return 0x82141D28;
		  /* 82141D28h */ case   20:  		/* mr R23, R28 */
		/* 82141D28h case   20:*/		regs.R23 = regs.R28;
		/* 82141D28h case   20:*/		return 0x82141D2C;
		  /* 82141D2Ch */ case   21:  		/* stwx R9, <#[R8 + R3]> */
		/* 82141D2Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82141D2Ch case   21:*/		return 0x82141D30;
		  /* 82141D30h */ case   22:  		/* mr R29, R28 */
		/* 82141D30h case   22:*/		regs.R29 = regs.R28;
		/* 82141D30h case   22:*/		return 0x82141D34;
		  /* 82141D34h */ case   23:  		/* stwx R28, <#[R6 + R30]> */
		/* 82141D34h case   23:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R6 + regs.R30 + 0x00000000) );
		/* 82141D34h case   23:*/		return 0x82141D38;
		  /* 82141D38h */ case   24:  		/* cmplwi CR6, R24, 0 */
		/* 82141D38h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82141D38h case   24:*/		return 0x82141D3C;
		  /* 82141D3Ch */ case   25:  		/* stwx R11, <#[R6 + R27]> */
		/* 82141D3Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + regs.R27 + 0x00000000) );
		/* 82141D3Ch case   25:*/		return 0x82141D40;
		  /* 82141D40h */ case   26:  		/* bc 12, CR6_EQ, 348 */
		/* 82141D40h case   26:*/		if ( regs.CR[6].eq ) { return 0x82141E9C;  }
		/* 82141D40h case   26:*/		return 0x82141D44;
		  /* 82141D44h */ case   27:  		/* rlwinm R25, R10, 2, 0, 29 */
		/* 82141D44h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R10);
		/* 82141D44h case   27:*/		return 0x82141D48;
		  /* 82141D48h */ case   28:  		/* mr R27, R28 */
		/* 82141D48h case   28:*/		regs.R27 = regs.R28;
		/* 82141D48h case   28:*/		return 0x82141D4C;
		  /* 82141D4Ch */ case   29:  		/* lwz R11, <#[R26 + 8]> */
		/* 82141D4Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 82141D4Ch case   29:*/		return 0x82141D50;
		  /* 82141D50h */ case   30:  		/* lwz R10, <#[R31 + 20]> */
		/* 82141D50h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82141D50h case   30:*/		return 0x82141D54;
		  /* 82141D54h */ case   31:  		/* lwz R9, <#[R31 + 16]> */
		/* 82141D54h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82141D54h case   31:*/		return 0x82141D58;
		  /* 82141D58h */ case   32:  		/* lwzx R11, <#[R27 + R11]> */
		/* 82141D58h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 82141D58h case   32:*/		return 0x82141D5C;
		  /* 82141D5Ch */ case   33:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82141D5Ch case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82141D5Ch case   33:*/		return 0x82141D60;
		  /* 82141D60h */ case   34:  		/* lwzx R30, <#[R11 + R10]> */
		/* 82141D60h case   34:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82141D60h case   34:*/		return 0x82141D64;
		  /* 82141D64h */ case   35:  		/* lwz R11, <#[R30 + 4]> */
		/* 82141D64h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82141D64h case   35:*/		return 0x82141D68;
		  /* 82141D68h */ case   36:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82141D68h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82141D68h case   36:*/		return 0x82141D6C;
		  /* 82141D6Ch */ case   37:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82141D6Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82141D6Ch case   37:*/		return 0x82141D70;
		  /* 82141D70h */ case   38:  		/* lwz R11, <#[R11 + 4]> */
		/* 82141D70h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82141D70h case   38:*/		return 0x82141D74;
		  /* 82141D74h */ case   39:  		/* rlwinm. R10, R11, 0, 22, 22 */
		/* 82141D74h case   39:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R10,regs.R11);
		/* 82141D74h case   39:*/		return 0x82141D78;
		  /* 82141D78h */ case   40:  		/* bc 12, CR0_EQ, 20 */
		/* 82141D78h case   40:*/		if ( regs.CR[0].eq ) { return 0x82141D8C;  }
		/* 82141D78h case   40:*/		return 0x82141D7C;
		  /* 82141D7Ch */ case   41:  		/* rlwinm. R9, R11, 0, 24, 24 */
		/* 82141D7Ch case   41:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R9,regs.R11);
		/* 82141D7Ch case   41:*/		return 0x82141D80;
		  /* 82141D80h */ case   42:  		/* bc 4, CR0_EQ, 12 */
		/* 82141D80h case   42:*/		if ( !regs.CR[0].eq ) { return 0x82141D8C;  }
		/* 82141D80h case   42:*/		return 0x82141D84;
		  /* 82141D84h */ case   43:  		/* lwz R5, <#[R31 + 124]> */
		/* 82141D84h case   43:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000007C) );
		/* 82141D84h case   43:*/		return 0x82141D88;
		  /* 82141D88h */ case   44:  		/* b 80 */
		/* 82141D88h case   44:*/		return 0x82141DD8;
		/* 82141D88h case   44:*/		return 0x82141D8C;
	}
	return 0x82141D8C;
} // Block from 82141CD8h-82141D8Ch (45 instructions)

//////////////////////////////////////////////////////
// Block at 82141D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141D8C);
		  /* 82141D8Ch */ case    0:  		/* rlwinm. R9, R11, 0, 24, 24 */
		/* 82141D8Ch case    0:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R9,regs.R11);
		/* 82141D8Ch case    0:*/		return 0x82141D90;
		  /* 82141D90h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 82141D90h case    1:*/		if ( regs.CR[0].eq ) { return 0x82141D9C;  }
		/* 82141D90h case    1:*/		return 0x82141D94;
		  /* 82141D94h */ case    2:  		/* lwz R5, <#[R31 + 148]> */
		/* 82141D94h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000094) );
		/* 82141D94h case    2:*/		return 0x82141D98;
		  /* 82141D98h */ case    3:  		/* b 64 */
		/* 82141D98h case    3:*/		return 0x82141DD8;
		/* 82141D98h case    3:*/		return 0x82141D9C;
	}
	return 0x82141D9C;
} // Block from 82141D8Ch-82141D9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82141D9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141D9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141D9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141D9C);
		  /* 82141D9Ch */ case    0:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82141D9Ch case    0:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82141D9Ch case    0:*/		return 0x82141DA0;
		  /* 82141DA0h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 82141DA0h case    1:*/		if ( regs.CR[0].eq ) { return 0x82141DD4;  }
		/* 82141DA0h case    1:*/		return 0x82141DA4;
		  /* 82141DA4h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 82141DA4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82141DA4h case    2:*/		return 0x82141DA8;
		  /* 82141DA8h */ case    3:  		/* bc 4, CR6_EQ, 44 */
		/* 82141DA8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82141DD4;  }
		/* 82141DA8h case    3:*/		return 0x82141DAC;
		  /* 82141DACh */ case    4:  		/* lwz R11, <#[R31]> */
		/* 82141DACh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82141DACh case    4:*/		return 0x82141DB0;
		  /* 82141DB0h */ case    5:  		/* mr R3, R31 */
		/* 82141DB0h case    5:*/		regs.R3 = regs.R31;
		/* 82141DB0h case    5:*/		return 0x82141DB4;
		  /* 82141DB4h */ case    6:  		/* lwz R4, <#[R30 + 108]> */
		/* 82141DB4h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000006C) );
		/* 82141DB4h case    6:*/		return 0x82141DB8;
		  /* 82141DB8h */ case    7:  		/* lwz R11, <#[R11 + 112]> */
		/* 82141DB8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 82141DB8h case    7:*/		return 0x82141DBC;
		  /* 82141DBCh */ case    8:  		/* mtspr CTR, R11 */
		/* 82141DBCh case    8:*/		regs.CTR = regs.R11;
		/* 82141DBCh case    8:*/		return 0x82141DC0;
		  /* 82141DC0h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82141DC0h case    9:*/		if ( 1 ) { regs.LR = 0x82141DC4; return (uint32)regs.CTR; }
		/* 82141DC0h case    9:*/		return 0x82141DC4;
		  /* 82141DC4h */ case   10:  		/* cmplwi CR6, R3, 65535 */
		/* 82141DC4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000FFFF);
		/* 82141DC4h case   10:*/		return 0x82141DC8;
		  /* 82141DC8h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 82141DC8h case   11:*/		if ( regs.CR[6].eq ) { return 0x82141DD4;  }
		/* 82141DC8h case   11:*/		return 0x82141DCC;
		  /* 82141DCCh */ case   12:  		/* lwz R5, <#[R31 + 128]> */
		/* 82141DCCh case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000080) );
		/* 82141DCCh case   12:*/		return 0x82141DD0;
		  /* 82141DD0h */ case   13:  		/* b 8 */
		/* 82141DD0h case   13:*/		return 0x82141DD8;
		/* 82141DD0h case   13:*/		return 0x82141DD4;
	}
	return 0x82141DD4;
} // Block from 82141D9Ch-82141DD4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82141DD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141DD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141DD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141DD4);
		  /* 82141DD4h */ case    0:  		/* lwz R5, <#[R31 + 136]> */
		/* 82141DD4h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000088) );
		/* 82141DD4h case    0:*/		return 0x82141DD8;
	}
	return 0x82141DD8;
} // Block from 82141DD4h-82141DD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82141DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141DD8);
		  /* 82141DD8h */ case    0:  		/* mr R6, R28 */
		/* 82141DD8h case    0:*/		regs.R6 = regs.R28;
		/* 82141DD8h case    0:*/		return 0x82141DDC;
		  /* 82141DDCh */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 82141DDCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82141DDCh case    1:*/		return 0x82141DE0;
		  /* 82141DE0h */ case    2:  		/* bc 12, CR6_EQ, 92 */
		/* 82141DE0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82141E3C;  }
		/* 82141DE0h case    2:*/		return 0x82141DE4;
		  /* 82141DE4h */ case    3:  		/* lwz R9, <#[R26 + 8]> */
		/* 82141DE4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000008) );
		/* 82141DE4h case    3:*/		return 0x82141DE8;
		  /* 82141DE8h */ case    4:  		/* mr R11, R28 */
		/* 82141DE8h case    4:*/		regs.R11 = regs.R28;
		/* 82141DE8h case    4:*/		return 0x82141DEC;
		  /* 82141DECh */ case    5:  		/* lwz R8, <#[R31 + 20]> */
		/* 82141DECh case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82141DECh case    5:*/		return 0x82141DF0;
		  /* 82141DF0h */ case    6:  		/* lwz R7, <#[R30 + 4]> */
		/* 82141DF0h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000004) );
		/* 82141DF0h case    6:*/		return 0x82141DF4;
		  /* 82141DF4h */ case    7:  		/* lwzx R10, <#[R11 + R9]> */
		/* 82141DF4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82141DF4h case    7:*/		return 0x82141DF8;
		  /* 82141DF8h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82141DF8h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82141DF8h case    8:*/		return 0x82141DFC;
		  /* 82141DFCh */ case    9:  		/* lwzx R10, <#[R10 + R8]> */
		/* 82141DFCh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 82141DFCh case    9:*/		return 0x82141E00;
		  /* 82141E00h */ case   10:  		/* lwz R4, <#[R10 + 4]> */
		/* 82141E00h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000004) );
		/* 82141E00h case   10:*/		return 0x82141E04;
		  /* 82141E04h */ case   11:  		/* cmplw CR6, R7, R4 */
		/* 82141E04h case   11:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R4);
		/* 82141E04h case   11:*/		return 0x82141E08;
		  /* 82141E08h */ case   12:  		/* bc 4, CR6_EQ, 36 */
		/* 82141E08h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82141E2C;  }
		/* 82141E08h case   12:*/		return 0x82141E0C;
		  /* 82141E0Ch */ case   13:  		/* lwz R4, <#[R30 + 8]> */
		/* 82141E0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 82141E0Ch case   13:*/		return 0x82141E10;
		  /* 82141E10h */ case   14:  		/* lwz R3, <#[R10 + 8]> */
		/* 82141E10h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000008) );
		/* 82141E10h case   14:*/		return 0x82141E14;
		  /* 82141E14h */ case   15:  		/* cmplw CR6, R4, R3 */
		/* 82141E14h case   15:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 82141E14h case   15:*/		return 0x82141E18;
		  /* 82141E18h */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 82141E18h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82141E2C;  }
		/* 82141E18h case   16:*/		return 0x82141E1C;
		  /* 82141E1Ch */ case   17:  		/* lwz R4, <#[R30 + 12]> */
		/* 82141E1Ch case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 82141E1Ch case   17:*/		return 0x82141E20;
		  /* 82141E20h */ case   18:  		/* lwz R10, <#[R10 + 12]> */
		/* 82141E20h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 82141E20h case   18:*/		return 0x82141E24;
		  /* 82141E24h */ case   19:  		/* cmplw CR6, R4, R10 */
		/* 82141E24h case   19:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 82141E24h case   19:*/		return 0x82141E28;
		  /* 82141E28h */ case   20:  		/* bc 12, CR6_EQ, 20 */
		/* 82141E28h case   20:*/		if ( regs.CR[6].eq ) { return 0x82141E3C;  }
		/* 82141E28h case   20:*/		return 0x82141E2C;
	}
	return 0x82141E2C;
} // Block from 82141DD8h-82141E2Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82141E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141E2C);
		  /* 82141E2Ch */ case    0:  		/* addi R6, R6, 1 */
		/* 82141E2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82141E2Ch case    0:*/		return 0x82141E30;
		  /* 82141E30h */ case    1:  		/* add R11, R25, R11 */
		/* 82141E30h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 82141E30h case    1:*/		return 0x82141E34;
		  /* 82141E34h */ case    2:  		/* cmplw CR6, R6, R29 */
		/* 82141E34h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R29);
		/* 82141E34h case    2:*/		return 0x82141E38;
		  /* 82141E38h */ case    3:  		/* bc 12, CR6_LT, -68 */
		/* 82141E38h case    3:*/		if ( regs.CR[6].lt ) { return 0x82141DF4;  }
		/* 82141E38h case    3:*/		return 0x82141E3C;
	}
	return 0x82141E3C;
} // Block from 82141E2Ch-82141E3Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82141E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141E3C);
		  /* 82141E3Ch */ case    0:  		/* cmplw CR6, R6, R29 */
		/* 82141E3Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R29);
		/* 82141E3Ch case    0:*/		return 0x82141E40;
		  /* 82141E40h */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 82141E40h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82141E68;  }
		/* 82141E40h case    1:*/		return 0x82141E44;
		  /* 82141E44h */ case    2:  		/* rlwinm R11, R5, 2, 0, 29 */
		/* 82141E44h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R5);
		/* 82141E44h case    2:*/		return 0x82141E48;
		  /* 82141E48h */ case    3:  		/* addi R9, R1, 80 */
		/* 82141E48h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 82141E48h case    3:*/		return 0x82141E4C;
		  /* 82141E4Ch */ case    4:  		/* addi R8, R1, 160 */
		/* 82141E4Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 82141E4Ch case    4:*/		return 0x82141E50;
		  /* 82141E50h */ case    5:  		/* lwzx R10, <#[R11 + R9]> */
		/* 82141E50h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82141E50h case    5:*/		return 0x82141E54;
		  /* 82141E54h */ case    6:  		/* lwzx R8, <#[R11 + R8]> */
		/* 82141E54h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82141E54h case    6:*/		return 0x82141E58;
		  /* 82141E58h */ case    7:  		/* addi R10, R10, 1 */
		/* 82141E58h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82141E58h case    7:*/		return 0x82141E5C;
		  /* 82141E5Ch */ case    8:  		/* stwx R10, <#[R11 + R9]> */
		/* 82141E5Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82141E5Ch case    8:*/		return 0x82141E60;
		  /* 82141E60h */ case    9:  		/* cmplw CR6, R10, R8 */
		/* 82141E60h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 82141E60h case    9:*/		return 0x82141E64;
		  /* 82141E64h */ case   10:  		/* bc 12, CR6_GT, 68 */
		/* 82141E64h case   10:*/		if ( regs.CR[6].gt ) { return 0x82141EA8;  }
		/* 82141E64h case   10:*/		return 0x82141E68;
	}
	return 0x82141E68;
} // Block from 82141E3Ch-82141E68h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82141E68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141E68);
		  /* 82141E68h */ case    0:  		/* lhz R11, <#[R31 + 202]> */
		/* 82141E68h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CA) );
		/* 82141E68h case    0:*/		return 0x82141E6C;
		  /* 82141E6Ch */ case    1:  		/* cmplwi CR6, R11, 512 */
		/* 82141E6Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 82141E6Ch case    1:*/		return 0x82141E70;
		  /* 82141E70h */ case    2:  		/* bc 12, CR6_LT, 28 */
		/* 82141E70h case    2:*/		if ( regs.CR[6].lt ) { return 0x82141E8C;  }
		/* 82141E70h case    2:*/		return 0x82141E74;
		  /* 82141E74h */ case    3:  		/* lwz R11, <#[R31 + 124]> */
		/* 82141E74h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 82141E74h case    3:*/		return 0x82141E78;
		  /* 82141E78h */ case    4:  		/* cmplw CR6, R11, R5 */
		/* 82141E78h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 82141E78h case    4:*/		return 0x82141E7C;
		  /* 82141E7Ch */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 82141E7Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82141E8C;  }
		/* 82141E7Ch case    5:*/		return 0x82141E80;
		  /* 82141E80h */ case    6:  		/* addi R23, R23, 1 */
		/* 82141E80h case    6:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82141E80h case    6:*/		return 0x82141E84;
		  /* 82141E84h */ case    7:  		/* cmplwi CR6, R23, 2 */
		/* 82141E84h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000002);
		/* 82141E84h case    7:*/		return 0x82141E88;
		  /* 82141E88h */ case    8:  		/* bc 12, CR6_GT, 32 */
		/* 82141E88h case    8:*/		if ( regs.CR[6].gt ) { return 0x82141EA8;  }
		/* 82141E88h case    8:*/		return 0x82141E8C;
	}
	return 0x82141E8C;
} // Block from 82141E68h-82141E8Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82141E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141E8C);
		  /* 82141E8Ch */ case    0:  		/* addi R29, R29, 1 */
		/* 82141E8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82141E8Ch case    0:*/		return 0x82141E90;
		  /* 82141E90h */ case    1:  		/* add R27, R25, R27 */
		/* 82141E90h case    1:*/		cpu::op::add<0>(regs,&regs.R27,regs.R25,regs.R27);
		/* 82141E90h case    1:*/		return 0x82141E94;
		  /* 82141E94h */ case    2:  		/* cmplw CR6, R29, R24 */
		/* 82141E94h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R24);
		/* 82141E94h case    2:*/		return 0x82141E98;
		  /* 82141E98h */ case    3:  		/* bc 12, CR6_LT, -332 */
		/* 82141E98h case    3:*/		if ( regs.CR[6].lt ) { return 0x82141D4C;  }
		/* 82141E98h case    3:*/		return 0x82141E9C;
	}
	return 0x82141E9C;
} // Block from 82141E8Ch-82141E9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82141E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141E9C);
		  /* 82141E9Ch */ case    0:  		/* li R3, 0 */
		/* 82141E9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82141E9Ch case    0:*/		return 0x82141EA0;
	}
	return 0x82141EA0;
} // Block from 82141E9Ch-82141EA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82141EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141EA0);
		  /* 82141EA0h */ case    0:  		/* addi R1, R1, 320 */
		/* 82141EA0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x140);
		/* 82141EA0h case    0:*/		return 0x82141EA4;
		  /* 82141EA4h */ case    1:  		/* b -723988 */
		/* 82141EA4h case    1:*/		return 0x82091290;
		/* 82141EA4h case    1:*/		return 0x82141EA8;
	}
	return 0x82141EA8;
} // Block from 82141EA0h-82141EA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82141EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141EA8);
		  /* 82141EA8h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 82141EA8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82141EA8h case    0:*/		return 0x82141EAC;
		  /* 82141EACh */ case    1:  		/* bc 12, CR6_EQ, -556 */
		/* 82141EACh case    1:*/		if ( regs.CR[6].eq ) { return 0x82141C80;  }
		/* 82141EACh case    1:*/		return 0x82141EB0;
		  /* 82141EB0h */ case    2:  		/* stw R29, <#[R22]> */
		/* 82141EB0h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R22 + 0x00000000) );
		/* 82141EB0h case    2:*/		return 0x82141EB4;
		  /* 82141EB4h */ case    3:  		/* b -564 */
		/* 82141EB4h case    3:*/		return 0x82141C80;
		/* 82141EB4h case    3:*/		return 0x82141EB8;
	}
	return 0x82141EB8;
} // Block from 82141EA8h-82141EB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82141EB8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141EB8);
		  /* 82141EB8h */ case    0:  		/* mfspr R12, LR */
		/* 82141EB8h case    0:*/		regs.R12 = regs.LR;
		/* 82141EB8h case    0:*/		return 0x82141EBC;
		  /* 82141EBCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82141EBCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82141EBCh case    1:*/		return 0x82141EC0;
		  /* 82141EC0h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82141EC0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82141EC0h case    2:*/		return 0x82141EC4;
		  /* 82141EC4h */ case    3:  		/* lhz R11, <#[R3 + 202]> */
		/* 82141EC4h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CA) );
		/* 82141EC4h case    3:*/		return 0x82141EC8;
		  /* 82141EC8h */ case    4:  		/* cmplwi CR6, R11, 512 */
		/* 82141EC8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 82141EC8h case    4:*/		return 0x82141ECC;
		  /* 82141ECCh */ case    5:  		/* bc 4, CR6_LT, 104 */
		/* 82141ECCh case    5:*/		if ( !regs.CR[6].lt ) { return 0x82141F34;  }
		/* 82141ECCh case    5:*/		return 0x82141ED0;
		  /* 82141ED0h */ case    6:  		/* lwz R8, <#[R3 + 260]> */
		/* 82141ED0h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000104) );
		/* 82141ED0h case    6:*/		return 0x82141ED4;
		  /* 82141ED4h */ case    7:  		/* lwz R11, <#[R8]> */
		/* 82141ED4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 82141ED4h case    7:*/		return 0x82141ED8;
		  /* 82141ED8h */ case    8:  		/* rlwinm. R11, R11, 0, 0, 11 */
		/* 82141ED8h case    8:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82141ED8h case    8:*/		return 0x82141EDC;
		  /* 82141EDCh */ case    9:  		/* bc 12, CR0_EQ, 88 */
		/* 82141EDCh case    9:*/		if ( regs.CR[0].eq ) { return 0x82141F34;  }
		/* 82141EDCh case    9:*/		return 0x82141EE0;
		  /* 82141EE0h */ case   10:  		/* lwz R7, <#[R8 + 4]> */
		/* 82141EE0h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + 0x00000004) );
		/* 82141EE0h case   10:*/		return 0x82141EE4;
		  /* 82141EE4h */ case   11:  		/* li R10, 0 */
		/* 82141EE4h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82141EE4h case   11:*/		return 0x82141EE8;
		  /* 82141EE8h */ case   12:  		/* cmplwi CR6, R7, 0 */
		/* 82141EE8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82141EE8h case   12:*/		return 0x82141EEC;
		  /* 82141EECh */ case   13:  		/* bc 12, CR6_EQ, 72 */
		/* 82141EECh case   13:*/		if ( regs.CR[6].eq ) { return 0x82141F34;  }
		/* 82141EECh case   13:*/		return 0x82141EF0;
		  /* 82141EF0h */ case   14:  		/* lwz R9, <#[R3 + 20]> */
		/* 82141EF0h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 82141EF0h case   14:*/		return 0x82141EF4;
		  /* 82141EF4h */ case   15:  		/* li R11, 0 */
		/* 82141EF4h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82141EF4h case   15:*/		return 0x82141EF8;
		  /* 82141EF8h */ case   16:  		/* lwz R6, <#[R8 + 8]> */
		/* 82141EF8h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000008) );
		/* 82141EF8h case   16:*/		return 0x82141EFC;
		  /* 82141EFCh */ case   17:  		/* lwzx R6, <#[R6 + R11]> */
		/* 82141EFCh case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 82141EFCh case   17:*/		return 0x82141F00;
		  /* 82141F00h */ case   18:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 82141F00h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 82141F00h case   18:*/		return 0x82141F04;
		  /* 82141F04h */ case   19:  		/* lwzx R6, <#[R6 + R9]> */
		/* 82141F04h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R9 + 0x00000000) );
		/* 82141F04h case   19:*/		return 0x82141F08;
		  /* 82141F08h */ case   20:  		/* lwz R4, <#[R6 + 8]> */
		/* 82141F08h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R6 + 0x00000008) );
		/* 82141F08h case   20:*/		return 0x82141F0C;
		  /* 82141F0Ch */ case   21:  		/* cmpwi CR6, R4, -1 */
		/* 82141F0Ch case   21:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 82141F0Ch case   21:*/		return 0x82141F10;
		  /* 82141F10h */ case   22:  		/* bc 4, CR6_EQ, 24 */
		/* 82141F10h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82141F28;  }
		/* 82141F10h case   22:*/		return 0x82141F14;
		  /* 82141F14h */ case   23:  		/* addi R10, R10, 1 */
		/* 82141F14h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82141F14h case   23:*/		return 0x82141F18;
		  /* 82141F18h */ case   24:  		/* addi R11, R11, 4 */
		/* 82141F18h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82141F18h case   24:*/		return 0x82141F1C;
		  /* 82141F1Ch */ case   25:  		/* cmplw CR6, R10, R7 */
		/* 82141F1Ch case   25:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 82141F1Ch case   25:*/		return 0x82141F20;
		  /* 82141F20h */ case   26:  		/* bc 12, CR6_LT, -40 */
		/* 82141F20h case   26:*/		if ( regs.CR[6].lt ) { return 0x82141EF8;  }
		/* 82141F20h case   26:*/		return 0x82141F24;
		  /* 82141F24h */ case   27:  		/* b 16 */
		/* 82141F24h case   27:*/		return 0x82141F34;
		/* 82141F24h case   27:*/		return 0x82141F28;
	}
	return 0x82141F28;
} // Block from 82141EB8h-82141F28h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82141F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141F28);
		  /* 82141F28h */ case    0:  		/* bl -4432 */
		/* 82141F28h case    0:*/		regs.LR = 0x82141F2C; return 0x82140DD8;
		/* 82141F28h case    0:*/		return 0x82141F2C;
		  /* 82141F2Ch */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 82141F2Ch case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82141F2Ch case    1:*/		return 0x82141F30;
		  /* 82141F30h */ case    2:  		/* bc 12, CR0_LT, 8 */
		/* 82141F30h case    2:*/		if ( regs.CR[0].lt ) { return 0x82141F38;  }
		/* 82141F30h case    2:*/		return 0x82141F34;
	}
	return 0x82141F34;
} // Block from 82141F28h-82141F34h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82141F34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141F34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141F34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141F34);
		  /* 82141F34h */ case    0:  		/* li R3, 0 */
		/* 82141F34h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82141F34h case    0:*/		return 0x82141F38;
	}
	return 0x82141F38;
} // Block from 82141F34h-82141F38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82141F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141F38);
		  /* 82141F38h */ case    0:  		/* addi R1, R1, 96 */
		/* 82141F38h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82141F38h case    0:*/		return 0x82141F3C;
		  /* 82141F3Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82141F3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82141F3Ch case    1:*/		return 0x82141F40;
		  /* 82141F40h */ case    2:  		/* mtspr LR, R12 */
		/* 82141F40h case    2:*/		regs.LR = regs.R12;
		/* 82141F40h case    2:*/		return 0x82141F44;
		  /* 82141F44h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82141F44h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82141F44h case    3:*/		return 0x82141F48;
	}
	return 0x82141F48;
} // Block from 82141F38h-82141F48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82141F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141F48);
		  /* 82141F48h */ case    0:  		/* mfspr R12, LR */
		/* 82141F48h case    0:*/		regs.R12 = regs.LR;
		/* 82141F48h case    0:*/		return 0x82141F4C;
		  /* 82141F4Ch */ case    1:  		/* bl -724236 */
		/* 82141F4Ch case    1:*/		regs.LR = 0x82141F50; return 0x82091240;
		/* 82141F4Ch case    1:*/		return 0x82141F50;
		  /* 82141F50h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82141F50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82141F50h case    2:*/		return 0x82141F54;
		  /* 82141F54h */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 82141F54h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82141F54h case    3:*/		return 0x82141F58;
		  /* 82141F58h */ case    4:  		/* mr R31, R3 */
		/* 82141F58h case    4:*/		regs.R31 = regs.R3;
		/* 82141F58h case    4:*/		return 0x82141F5C;
		  /* 82141F5Ch */ case    5:  		/* li R30, 0 */
		/* 82141F5Ch case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82141F5Ch case    5:*/		return 0x82141F60;
		  /* 82141F60h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82141F60h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82141F60h case    6:*/		return 0x82141F64;
		  /* 82141F64h */ case    7:  		/* bc 4, CR6_GT, 52 */
		/* 82141F64h case    7:*/		if ( !regs.CR[6].gt ) { return 0x82141F98;  }
		/* 82141F64h case    7:*/		return 0x82141F68;
		  /* 82141F68h */ case    8:  		/* li R29, 0 */
		/* 82141F68h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82141F68h case    8:*/		return 0x82141F6C;
		  /* 82141F6Ch */ case    9:  		/* lwz R11, <#[R31 + 24]> */
		/* 82141F6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82141F6Ch case    9:*/		return 0x82141F70;
		  /* 82141F70h */ case   10:  		/* mr R3, R31 */
		/* 82141F70h case   10:*/		regs.R3 = regs.R31;
		/* 82141F70h case   10:*/		return 0x82141F74;
		  /* 82141F74h */ case   11:  		/* stw R30, <#[R31 + 256]> */
		/* 82141F74h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 82141F74h case   11:*/		return 0x82141F78;
		  /* 82141F78h */ case   12:  		/* lwzx R11, <#[R11 + R29]> */
		/* 82141F78h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82141F78h case   12:*/		return 0x82141F7C;
		  /* 82141F7Ch */ case   13:  		/* stw R11, <#[R31 + 260]> */
		/* 82141F7Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82141F7Ch case   13:*/		return 0x82141F80;
		  /* 82141F80h */ case   14:  		/* bl -380600 */
		/* 82141F80h case   14:*/		regs.LR = 0x82141F84; return 0x820E50C8;
		/* 82141F80h case   14:*/		return 0x82141F84;
		  /* 82141F84h */ case   15:  		/* lwz R11, <#[R31 + 12]> */
		/* 82141F84h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82141F84h case   15:*/		return 0x82141F88;
		  /* 82141F88h */ case   16:  		/* addi R30, R30, 1 */
		/* 82141F88h case   16:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82141F88h case   16:*/		return 0x82141F8C;
		  /* 82141F8Ch */ case   17:  		/* addi R29, R29, 4 */
		/* 82141F8Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82141F8Ch case   17:*/		return 0x82141F90;
		  /* 82141F90h */ case   18:  		/* cmplw CR6, R30, R11 */
		/* 82141F90h case   18:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82141F90h case   18:*/		return 0x82141F94;
		  /* 82141F94h */ case   19:  		/* bc 12, CR6_LT, -40 */
		/* 82141F94h case   19:*/		if ( regs.CR[6].lt ) { return 0x82141F6C;  }
		/* 82141F94h case   19:*/		return 0x82141F98;
	}
	return 0x82141F98;
} // Block from 82141F48h-82141F98h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82141F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82141F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82141F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82141F98);
		  /* 82141F98h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82141F98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82141F98h case    0:*/		return 0x82141F9C;
		  /* 82141F9Ch */ case    1:  		/* li R30, 0 */
		/* 82141F9Ch case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82141F9Ch case    1:*/		return 0x82141FA0;
		  /* 82141FA0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82141FA0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82141FA0h case    2:*/		return 0x82141FA4;
		  /* 82141FA4h */ case    3:  		/* bc 4, CR6_GT, 1344 */
		/* 82141FA4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821424E4;  }
		/* 82141FA4h case    3:*/		return 0x82141FA8;
		  /* 82141FA8h */ case    4:  		/* lis R11, -32768 */
		/* 82141FA8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 82141FA8h case    4:*/		return 0x82141FAC;
		  /* 82141FACh */ case    5:  		/* lis R28, 28768 */
		/* 82141FACh case    5:*/		cpu::op::lis<0>(regs,&regs.R28,0x7060);
		/* 82141FACh case    5:*/		return 0x82141FB0;
		  /* 82141FB0h */ case    6:  		/* lis R22, 8240 */
		/* 82141FB0h case    6:*/		cpu::op::lis<0>(regs,&regs.R22,0x2030);
		/* 82141FB0h case    6:*/		return 0x82141FB4;
		  /* 82141FB4h */ case    7:  		/* lis R23, 4208 */
		/* 82141FB4h case    7:*/		cpu::op::lis<0>(regs,&regs.R23,0x1070);
		/* 82141FB4h case    7:*/		return 0x82141FB8;
		  /* 82141FB8h */ case    8:  		/* lis R24, 20528 */
		/* 82141FB8h case    8:*/		cpu::op::lis<0>(regs,&regs.R24,0x5030);
		/* 82141FB8h case    8:*/		return 0x82141FBC;
		  /* 82141FBCh */ case    9:  		/* lis R25, 29600 */
		/* 82141FBCh case    9:*/		cpu::op::lis<0>(regs,&regs.R25,0x73A0);
		/* 82141FBCh case    9:*/		return 0x82141FC0;
		  /* 82141FC0h */ case   10:  		/* lis R26, 29488 */
		/* 82141FC0h case   10:*/		cpu::op::lis<0>(regs,&regs.R26,0x7330);
		/* 82141FC0h case   10:*/		return 0x82141FC4;
		  /* 82141FC4h */ case   11:  		/* lis R27, 29728 */
		/* 82141FC4h case   11:*/		cpu::op::lis<0>(regs,&regs.R27,0x7420);
		/* 82141FC4h case   11:*/		return 0x82141FC8;
		  /* 82141FC8h */ case   12:  		/* ori R29, R11, 16385 */
		/* 82141FC8h case   12:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R11,0x4001);
		/* 82141FC8h case   12:*/		return 0x82141FCC;
		  /* 82141FCCh */ case   13:  		/* stw R30, <#[R31 + 256]> */
		/* 82141FCCh case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000100) );
		/* 82141FCCh case   13:*/		return 0x82141FD0;
		  /* 82141FD0h */ case   14:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 82141FD0h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 82141FD0h case   14:*/		return 0x82141FD4;
		  /* 82141FD4h */ case   15:  		/* lwz R10, <#[R31 + 24]> */
		/* 82141FD4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82141FD4h case   15:*/		return 0x82141FD8;
		  /* 82141FD8h */ case   16:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82141FD8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82141FD8h case   16:*/		return 0x82141FDC;
		  /* 82141FDCh */ case   17:  		/* stw R11, <#[R31 + 260]> */
		/* 82141FDCh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82141FDCh case   17:*/		return 0x82141FE0;
		  /* 82141FE0h */ case   18:  		/* lwz R11, <#[R11 + 60]> */
		/* 82141FE0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 82141FE0h case   18:*/		return 0x82141FE4;
		  /* 82141FE4h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 82141FE4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82141FE4h case   19:*/		return 0x82141FE8;
		  /* 82141FE8h */ case   20:  		/* bc 12, CR6_EQ, 24 */
		/* 82141FE8h case   20:*/		if ( regs.CR[6].eq ) { return 0x82142000;  }
		/* 82141FE8h case   20:*/		return 0x82141FEC;
		  /* 82141FECh */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 82141FECh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82141FECh case   21:*/		return 0x82141FF0;
		  /* 82141FF0h */ case   22:  		/* cmpwi CR6, R10, 14 */
		/* 82141FF0h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 82141FF0h case   22:*/		return 0x82141FF4;
		  /* 82141FF4h */ case   23:  		/* bc 4, CR6_EQ, 12 */
		/* 82141FF4h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82142000;  }
		/* 82141FF4h case   23:*/		return 0x82141FF8;
		  /* 82141FF8h */ case   24:  		/* addi R11, R11, 48 */
		/* 82141FF8h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x30);
		/* 82141FF8h case   24:*/		return 0x82141FFC;
		  /* 82141FFCh */ case   25:  		/* stw R11, <#[R31 + 264]> */
		/* 82141FFCh case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000108) );
		/* 82141FFCh case   25:*/		return 0x82142000;
	}
	return 0x82142000;
} // Block from 82141F98h-82142000h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82142000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142000);
		  /* 82142000h */ case    0:  		/* mr R3, R31 */
		/* 82142000h case    0:*/		regs.R3 = regs.R31;
		/* 82142000h case    0:*/		return 0x82142004;
		  /* 82142004h */ case    1:  		/* bl -332 */
		/* 82142004h case    1:*/		regs.LR = 0x82142008; return 0x82141EB8;
		/* 82142004h case    1:*/		return 0x82142008;
		  /* 82142008h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82142008h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82142008h case    2:*/		return 0x8214200C;
		  /* 8214200Ch */ case    3:  		/* bc 12, CR0_LT, 1244 */
		/* 8214200Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x821424E8;  }
		/* 8214200Ch case    3:*/		return 0x82142010;
		  /* 82142010h */ case    4:  		/* lwz R11, <#[R31 + 260]> */
		/* 82142010h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 82142010h case    4:*/		return 0x82142014;
		  /* 82142014h */ case    5:  		/* lwz R11, <#[R11]> */
		/* 82142014h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82142014h case    5:*/		return 0x82142018;
		  /* 82142018h */ case    6:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82142018h case    6:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82142018h case    6:*/		return 0x8214201C;
		  /* 8214201Ch */ case    7:  		/* cmplw CR6, R11, R28 */
		/* 8214201Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8214201Ch case    7:*/		return 0x82142020;
		  /* 82142020h */ case    8:  		/* bc 12, CR6_GT, 640 */
		/* 82142020h case    8:*/		if ( regs.CR[6].gt ) { return 0x821422A0;  }
		/* 82142020h case    8:*/		return 0x82142024;
		  /* 82142024h */ case    9:  		/* bc 12, CR6_EQ, 576 */
		/* 82142024h case    9:*/		if ( regs.CR[6].eq ) { return 0x82142264;  }
		/* 82142024h case    9:*/		return 0x82142028;
		  /* 82142028h */ case   10:  		/* cmplw CR6, R11, R22 */
		/* 82142028h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 82142028h case   10:*/		return 0x8214202C;
		  /* 8214202Ch */ case   11:  		/* bc 12, CR6_GT, 328 */
		/* 8214202Ch case   11:*/		if ( regs.CR[6].gt ) { return 0x82142174;  }
		/* 8214202Ch case   11:*/		return 0x82142030;
		  /* 82142030h */ case   12:  		/* bc 12, CR6_EQ, 312 */
		/* 82142030h case   12:*/		if ( regs.CR[6].eq ) { return 0x82142168;  }
		/* 82142030h case   12:*/		return 0x82142034;
		  /* 82142034h */ case   13:  		/* cmplw CR6, R11, R23 */
		/* 82142034h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 82142034h case   13:*/		return 0x82142038;
		  /* 82142038h */ case   14:  		/* bc 12, CR6_GT, 184 */
		/* 82142038h case   14:*/		if ( regs.CR[6].gt ) { return 0x821420F0;  }
		/* 82142038h case   14:*/		return 0x8214203C;
		  /* 8214203Ch */ case   15:  		/* bc 12, CR6_EQ, 168 */
		/* 8214203Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821420E4;  }
		/* 8214203Ch case   15:*/		return 0x82142040;
		  /* 82142040h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82142040h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82142040h case   16:*/		return 0x82142044;
		  /* 82142044h */ case   17:  		/* bc 12, CR6_EQ, 148 */
		/* 82142044h case   17:*/		if ( regs.CR[6].eq ) { return 0x821420D8;  }
		/* 82142044h case   17:*/		return 0x82142048;
		  /* 82142048h */ case   18:  		/* lis R10, 4096 */
		/* 82142048h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 82142048h case   18:*/		return 0x8214204C;
		  /* 8214204Ch */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 8214204Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214204Ch case   19:*/		return 0x82142050;
		  /* 82142050h */ case   20:  		/* bc 12, CR6_EQ, 124 */
		/* 82142050h case   20:*/		if ( regs.CR[6].eq ) { return 0x821420CC;  }
		/* 82142050h case   20:*/		return 0x82142054;
		  /* 82142054h */ case   21:  		/* lis R10, 4112 */
		/* 82142054h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x1010);
		/* 82142054h case   21:*/		return 0x82142058;
		  /* 82142058h */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 82142058h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142058h case   22:*/		return 0x8214205C;
		  /* 8214205Ch */ case   23:  		/* bc 12, CR6_EQ, 100 */
		/* 8214205Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x821420C0;  }
		/* 8214205Ch case   23:*/		return 0x82142060;
		  /* 82142060h */ case   24:  		/* lis R10, 4144 */
		/* 82142060h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0x1030);
		/* 82142060h case   24:*/		return 0x82142064;
		  /* 82142064h */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 82142064h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142064h case   25:*/		return 0x82142068;
		  /* 82142068h */ case   26:  		/* bc 12, CR6_EQ, 76 */
		/* 82142068h case   26:*/		if ( regs.CR[6].eq ) { return 0x821420B4;  }
		/* 82142068h case   26:*/		return 0x8214206C;
		  /* 8214206Ch */ case   27:  		/* lis R10, 4160 */
		/* 8214206Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R10,0x1040);
		/* 8214206Ch case   27:*/		return 0x82142070;
		  /* 82142070h */ case   28:  		/* cmplw CR6, R11, R10 */
		/* 82142070h case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142070h case   28:*/		return 0x82142074;
		  /* 82142074h */ case   29:  		/* bc 12, CR6_EQ, 52 */
		/* 82142074h case   29:*/		if ( regs.CR[6].eq ) { return 0x821420A8;  }
		/* 82142074h case   29:*/		return 0x82142078;
		  /* 82142078h */ case   30:  		/* lis R10, 4176 */
		/* 82142078h case   30:*/		cpu::op::lis<0>(regs,&regs.R10,0x1050);
		/* 82142078h case   30:*/		return 0x8214207C;
		  /* 8214207Ch */ case   31:  		/* cmplw CR6, R11, R10 */
		/* 8214207Ch case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214207Ch case   31:*/		return 0x82142080;
		  /* 82142080h */ case   32:  		/* bc 12, CR6_EQ, 28 */
		/* 82142080h case   32:*/		if ( regs.CR[6].eq ) { return 0x8214209C;  }
		/* 82142080h case   32:*/		return 0x82142084;
		  /* 82142084h */ case   33:  		/* lis R10, 4192 */
		/* 82142084h case   33:*/		cpu::op::lis<0>(regs,&regs.R10,0x1060);
		/* 82142084h case   33:*/		return 0x82142088;
		  /* 82142088h */ case   34:  		/* cmplw CR6, R11, R10 */
		/* 82142088h case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142088h case   34:*/		return 0x8214208C;
		  /* 8214208Ch */ case   35:  		/* bc 4, CR6_EQ, 1124 */
		/* 8214208Ch case   35:*/		if ( !regs.CR[6].eq ) { return 0x821424F0;  }
		/* 8214208Ch case   35:*/		return 0x82142090;
		  /* 82142090h */ case   36:  		/* mr R3, R31 */
		/* 82142090h case   36:*/		regs.R3 = regs.R31;
		/* 82142090h case   36:*/		return 0x82142094;
		  /* 82142094h */ case   37:  		/* bl -5564 */
		/* 82142094h case   37:*/		regs.LR = 0x82142098; return 0x82140AD8;
		/* 82142094h case   37:*/		return 0x82142098;
		  /* 82142098h */ case   38:  		/* b 1076 */
		/* 82142098h case   38:*/		return 0x821424CC;
		/* 82142098h case   38:*/		return 0x8214209C;
	}
	return 0x8214209C;
} // Block from 82142000h-8214209Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 8214209Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214209C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214209C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214209C);
		  /* 8214209Ch */ case    0:  		/* mr R3, R31 */
		/* 8214209Ch case    0:*/		regs.R3 = regs.R31;
		/* 8214209Ch case    0:*/		return 0x821420A0;
		  /* 821420A0h */ case    1:  		/* bl -6408 */
		/* 821420A0h case    1:*/		regs.LR = 0x821420A4; return 0x82140798;
		/* 821420A0h case    1:*/		return 0x821420A4;
		  /* 821420A4h */ case    2:  		/* b 1064 */
		/* 821420A4h case    2:*/		return 0x821424CC;
		/* 821420A4h case    2:*/		return 0x821420A8;
	}
	return 0x821420A8;
} // Block from 8214209Ch-821420A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821420A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821420A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821420A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821420A8);
		  /* 821420A8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821420A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821420A8h case    0:*/		return 0x821420AC;
		  /* 821420ACh */ case    1:  		/* lwz R11, <#[R11 + 136]> */
		/* 821420ACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000088) );
		/* 821420ACh case    1:*/		return 0x821420B0;
		  /* 821420B0h */ case    2:  		/* b 1032 */
		/* 821420B0h case    2:*/		return 0x821424B8;
		/* 821420B0h case    2:*/		return 0x821420B4;
	}
	return 0x821420B4;
} // Block from 821420A8h-821420B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821420B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821420B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821420B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821420B4);
		  /* 821420B4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821420B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821420B4h case    0:*/		return 0x821420B8;
		  /* 821420B8h */ case    1:  		/* lwz R11, <#[R11 + 132]> */
		/* 821420B8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000084) );
		/* 821420B8h case    1:*/		return 0x821420BC;
		  /* 821420BCh */ case    2:  		/* b 1020 */
		/* 821420BCh case    2:*/		return 0x821424B8;
		/* 821420BCh case    2:*/		return 0x821420C0;
	}
	return 0x821420C0;
} // Block from 821420B4h-821420C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821420C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821420C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821420C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821420C0);
		  /* 821420C0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821420C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821420C0h case    0:*/		return 0x821420C4;
		  /* 821420C4h */ case    1:  		/* lwz R11, <#[R11 + 128]> */
		/* 821420C4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000080) );
		/* 821420C4h case    1:*/		return 0x821420C8;
		  /* 821420C8h */ case    2:  		/* b 1008 */
		/* 821420C8h case    2:*/		return 0x821424B8;
		/* 821420C8h case    2:*/		return 0x821420CC;
	}
	return 0x821420CC;
} // Block from 821420C0h-821420CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821420CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821420CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821420CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821420CC);
		  /* 821420CCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821420CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821420CCh case    0:*/		return 0x821420D0;
		  /* 821420D0h */ case    1:  		/* lwz R11, <#[R11 + 124]> */
		/* 821420D0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000007C) );
		/* 821420D0h case    1:*/		return 0x821420D4;
		  /* 821420D4h */ case    2:  		/* b 996 */
		/* 821420D4h case    2:*/		return 0x821424B8;
		/* 821420D4h case    2:*/		return 0x821420D8;
	}
	return 0x821420D8;
} // Block from 821420CCh-821420D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821420D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821420D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821420D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821420D8);
		  /* 821420D8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821420D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821420D8h case    0:*/		return 0x821420DC;
		  /* 821420DCh */ case    1:  		/* lwz R11, <#[R11 + 120]> */
		/* 821420DCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000078) );
		/* 821420DCh case    1:*/		return 0x821420E0;
		  /* 821420E0h */ case    2:  		/* b 984 */
		/* 821420E0h case    2:*/		return 0x821424B8;
		/* 821420E0h case    2:*/		return 0x821420E4;
	}
	return 0x821420E4;
} // Block from 821420D8h-821420E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821420E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821420E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821420E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821420E4);
		  /* 821420E4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821420E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821420E4h case    0:*/		return 0x821420E8;
		  /* 821420E8h */ case    1:  		/* lwz R11, <#[R11 + 152]> */
		/* 821420E8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000098) );
		/* 821420E8h case    1:*/		return 0x821420EC;
		  /* 821420ECh */ case    2:  		/* b 972 */
		/* 821420ECh case    2:*/		return 0x821424B8;
		/* 821420ECh case    2:*/		return 0x821420F0;
	}
	return 0x821420F0;
} // Block from 821420E4h-821420F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821420F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821420F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821420F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821420F0);
		  /* 821420F0h */ case    0:  		/* lis R10, 4336 */
		/* 821420F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x10F0);
		/* 821420F0h case    0:*/		return 0x821420F4;
		  /* 821420F4h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 821420F4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821420F4h case    1:*/		return 0x821420F8;
		  /* 821420F8h */ case    2:  		/* bc 12, CR6_EQ, 700 */
		/* 821420F8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821423B4;  }
		/* 821420F8h case    2:*/		return 0x821420FC;
		  /* 821420FCh */ case    3:  		/* lis R10, 4384 */
		/* 821420FCh case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x1120);
		/* 821420FCh case    3:*/		return 0x82142100;
		  /* 82142100h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82142100h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142100h case    4:*/		return 0x82142104;
		  /* 82142104h */ case    5:  		/* bc 12, CR6_EQ, -56 */
		/* 82142104h case    5:*/		if ( regs.CR[6].eq ) { return 0x821420CC;  }
		/* 82142104h case    5:*/		return 0x82142108;
		  /* 82142108h */ case    6:  		/* lis R10, 4400 */
		/* 82142108h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x1130);
		/* 82142108h case    6:*/		return 0x8214210C;
		  /* 8214210Ch */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8214210Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214210Ch case    7:*/		return 0x82142110;
		  /* 82142110h */ case    8:  		/* bc 12, CR6_EQ, 964 */
		/* 82142110h case    8:*/		if ( regs.CR[6].eq ) { return 0x821424D4;  }
		/* 82142110h case    8:*/		return 0x82142114;
		  /* 82142114h */ case    9:  		/* lis R10, 4432 */
		/* 82142114h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x1150);
		/* 82142114h case    9:*/		return 0x82142118;
		  /* 82142118h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 82142118h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142118h case   10:*/		return 0x8214211C;
		  /* 8214211Ch */ case   11:  		/* bc 12, CR6_EQ, -80 */
		/* 8214211Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821420CC;  }
		/* 8214211Ch case   11:*/		return 0x82142120;
		  /* 82142120h */ case   12:  		/* lis R10, 8192 */
		/* 82142120h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x2000);
		/* 82142120h case   12:*/		return 0x82142124;
		  /* 82142124h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 82142124h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142124h case   13:*/		return 0x82142128;
		  /* 82142128h */ case   14:  		/* bc 12, CR6_EQ, 52 */
		/* 82142128h case   14:*/		if ( regs.CR[6].eq ) { return 0x8214215C;  }
		/* 82142128h case   14:*/		return 0x8214212C;
		  /* 8214212Ch */ case   15:  		/* lis R10, 8208 */
		/* 8214212Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x2010);
		/* 8214212Ch case   15:*/		return 0x82142130;
		  /* 82142130h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 82142130h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142130h case   16:*/		return 0x82142134;
		  /* 82142134h */ case   17:  		/* bc 12, CR6_EQ, 28 */
		/* 82142134h case   17:*/		if ( regs.CR[6].eq ) { return 0x82142150;  }
		/* 82142134h case   17:*/		return 0x82142138;
		  /* 82142138h */ case   18:  		/* lis R10, 8224 */
		/* 82142138h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x2020);
		/* 82142138h case   18:*/		return 0x8214213C;
		  /* 8214213Ch */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 8214213Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214213Ch case   19:*/		return 0x82142140;
		  /* 82142140h */ case   20:  		/* bc 4, CR6_EQ, 944 */
		/* 82142140h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821424F0;  }
		/* 82142140h case   20:*/		return 0x82142144;
		  /* 82142144h */ case   21:  		/* lwz R11, <#[R31]> */
		/* 82142144h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142144h case   21:*/		return 0x82142148;
		  /* 82142148h */ case   22:  		/* lwz R11, <#[R11 + 164]> */
		/* 82142148h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000A4) );
		/* 82142148h case   22:*/		return 0x8214214C;
		  /* 8214214Ch */ case   23:  		/* b 876 */
		/* 8214214Ch case   23:*/		return 0x821424B8;
		/* 8214214Ch case   23:*/		return 0x82142150;
	}
	return 0x82142150;
} // Block from 821420F0h-82142150h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82142150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142150);
		  /* 82142150h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142150h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142150h case    0:*/		return 0x82142154;
		  /* 82142154h */ case    1:  		/* lwz R11, <#[R11 + 160]> */
		/* 82142154h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000A0) );
		/* 82142154h case    1:*/		return 0x82142158;
		  /* 82142158h */ case    2:  		/* b 864 */
		/* 82142158h case    2:*/		return 0x821424B8;
		/* 82142158h case    2:*/		return 0x8214215C;
	}
	return 0x8214215C;
} // Block from 82142150h-8214215Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214215Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214215C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214215C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214215C);
		  /* 8214215Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8214215Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214215Ch case    0:*/		return 0x82142160;
		  /* 82142160h */ case    1:  		/* lwz R11, <#[R11 + 156]> */
		/* 82142160h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000009C) );
		/* 82142160h case    1:*/		return 0x82142164;
		  /* 82142164h */ case    2:  		/* b 852 */
		/* 82142164h case    2:*/		return 0x821424B8;
		/* 82142164h case    2:*/		return 0x82142168;
	}
	return 0x82142168;
} // Block from 8214215Ch-82142168h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142168);
		  /* 82142168h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142168h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142168h case    0:*/		return 0x8214216C;
		  /* 8214216Ch */ case    1:  		/* lwz R11, <#[R11 + 168]> */
		/* 8214216Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000A8) );
		/* 8214216Ch case    1:*/		return 0x82142170;
		  /* 82142170h */ case    2:  		/* b 840 */
		/* 82142170h case    2:*/		return 0x821424B8;
		/* 82142170h case    2:*/		return 0x82142174;
	}
	return 0x82142174;
} // Block from 82142168h-82142174h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142174);
		  /* 82142174h */ case    0:  		/* cmplw CR6, R11, R24 */
		/* 82142174h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 82142174h case    0:*/		return 0x82142178;
		  /* 82142178h */ case    1:  		/* bc 12, CR6_GT, 164 */
		/* 82142178h case    1:*/		if ( regs.CR[6].gt ) { return 0x8214221C;  }
		/* 82142178h case    1:*/		return 0x8214217C;
		  /* 8214217Ch */ case    2:  		/* bc 12, CR6_EQ, 148 */
		/* 8214217Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82142210;  }
		/* 8214217Ch case    2:*/		return 0x82142180;
		  /* 82142180h */ case    3:  		/* lis R10, 8256 */
		/* 82142180h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x2040);
		/* 82142180h case    3:*/		return 0x82142184;
		  /* 82142184h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82142184h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142184h case    4:*/		return 0x82142188;
		  /* 82142188h */ case    5:  		/* bc 12, CR6_EQ, 124 */
		/* 82142188h case    5:*/		if ( regs.CR[6].eq ) { return 0x82142204;  }
		/* 82142188h case    5:*/		return 0x8214218C;
		  /* 8214218Ch */ case    6:  		/* lis R10, 8272 */
		/* 8214218Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x2050);
		/* 8214218Ch case    6:*/		return 0x82142190;
		  /* 82142190h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 82142190h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142190h case    7:*/		return 0x82142194;
		  /* 82142194h */ case    8:  		/* bc 12, CR6_EQ, 100 */
		/* 82142194h case    8:*/		if ( regs.CR[6].eq ) { return 0x821421F8;  }
		/* 82142194h case    8:*/		return 0x82142198;
		  /* 82142198h */ case    9:  		/* lis R10, 8304 */
		/* 82142198h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x2070);
		/* 82142198h case    9:*/		return 0x8214219C;
		  /* 8214219Ch */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8214219Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214219Ch case   10:*/		return 0x821421A0;
		  /* 821421A0h */ case   11:  		/* bc 12, CR6_EQ, 76 */
		/* 821421A0h case   11:*/		if ( regs.CR[6].eq ) { return 0x821421EC;  }
		/* 821421A0h case   11:*/		return 0x821421A4;
		  /* 821421A4h */ case   12:  		/* lis R10, 8320 */
		/* 821421A4h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x2080);
		/* 821421A4h case   12:*/		return 0x821421A8;
		  /* 821421A8h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 821421A8h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821421A8h case   13:*/		return 0x821421AC;
		  /* 821421ACh */ case   14:  		/* bc 12, CR6_EQ, 808 */
		/* 821421ACh case   14:*/		if ( regs.CR[6].eq ) { return 0x821424D4;  }
		/* 821421ACh case   14:*/		return 0x821421B0;
		  /* 821421B0h */ case   15:  		/* lis R10, 8336 */
		/* 821421B0h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x2090);
		/* 821421B0h case   15:*/		return 0x821421B4;
		  /* 821421B4h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 821421B4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821421B4h case   16:*/		return 0x821421B8;
		  /* 821421B8h */ case   17:  		/* bc 12, CR6_EQ, -236 */
		/* 821421B8h case   17:*/		if ( regs.CR[6].eq ) { return 0x821420CC;  }
		/* 821421B8h case   17:*/		return 0x821421BC;
		  /* 821421BCh */ case   18:  		/* lis R10, 20480 */
		/* 821421BCh case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 821421BCh case   18:*/		return 0x821421C0;
		  /* 821421C0h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 821421C0h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821421C0h case   19:*/		return 0x821421C4;
		  /* 821421C4h */ case   20:  		/* bc 12, CR6_EQ, 28 */
		/* 821421C4h case   20:*/		if ( regs.CR[6].eq ) { return 0x821421E0;  }
		/* 821421C4h case   20:*/		return 0x821421C8;
		  /* 821421C8h */ case   21:  		/* lis R10, 20496 */
		/* 821421C8h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x5010);
		/* 821421C8h case   21:*/		return 0x821421CC;
		  /* 821421CCh */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 821421CCh case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821421CCh case   22:*/		return 0x821421D0;
		  /* 821421D0h */ case   23:  		/* bc 4, CR6_EQ, 800 */
		/* 821421D0h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821424F0;  }
		/* 821421D0h case   23:*/		return 0x821421D4;
		  /* 821421D4h */ case   24:  		/* lwz R11, <#[R31]> */
		/* 821421D4h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821421D4h case   24:*/		return 0x821421D8;
		  /* 821421D8h */ case   25:  		/* lwz R11, <#[R11 + 184]> */
		/* 821421D8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000B8) );
		/* 821421D8h case   25:*/		return 0x821421DC;
		  /* 821421DCh */ case   26:  		/* b 732 */
		/* 821421DCh case   26:*/		return 0x821424B8;
		/* 821421DCh case   26:*/		return 0x821421E0;
	}
	return 0x821421E0;
} // Block from 82142174h-821421E0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821421E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821421E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821421E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821421E0);
		  /* 821421E0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821421E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821421E0h case    0:*/		return 0x821421E4;
		  /* 821421E4h */ case    1:  		/* lwz R11, <#[R11 + 180]> */
		/* 821421E4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000B4) );
		/* 821421E4h case    1:*/		return 0x821421E8;
		  /* 821421E8h */ case    2:  		/* b 720 */
		/* 821421E8h case    2:*/		return 0x821424B8;
		/* 821421E8h case    2:*/		return 0x821421EC;
	}
	return 0x821421EC;
} // Block from 821421E0h-821421ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821421ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821421EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821421EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821421EC);
		  /* 821421ECh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821421ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821421ECh case    0:*/		return 0x821421F0;
		  /* 821421F0h */ case    1:  		/* lwz R11, <#[R11 + 260]> */
		/* 821421F0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000104) );
		/* 821421F0h case    1:*/		return 0x821421F4;
		  /* 821421F4h */ case    2:  		/* b 708 */
		/* 821421F4h case    2:*/		return 0x821424B8;
		/* 821421F4h case    2:*/		return 0x821421F8;
	}
	return 0x821421F8;
} // Block from 821421ECh-821421F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821421F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821421F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821421F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821421F8);
		  /* 821421F8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821421F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821421F8h case    0:*/		return 0x821421FC;
		  /* 821421FCh */ case    1:  		/* lwz R11, <#[R11 + 176]> */
		/* 821421FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000B0) );
		/* 821421FCh case    1:*/		return 0x82142200;
		  /* 82142200h */ case    2:  		/* b 696 */
		/* 82142200h case    2:*/		return 0x821424B8;
		/* 82142200h case    2:*/		return 0x82142204;
	}
	return 0x82142204;
} // Block from 821421F8h-82142204h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142204);
		  /* 82142204h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142204h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142204h case    0:*/		return 0x82142208;
		  /* 82142208h */ case    1:  		/* lwz R11, <#[R11 + 172]> */
		/* 82142208h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000AC) );
		/* 82142208h case    1:*/		return 0x8214220C;
		  /* 8214220Ch */ case    2:  		/* b 684 */
		/* 8214220Ch case    2:*/		return 0x821424B8;
		/* 8214220Ch case    2:*/		return 0x82142210;
	}
	return 0x82142210;
} // Block from 82142204h-82142210h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142210);
		  /* 82142210h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142210h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142210h case    0:*/		return 0x82142214;
		  /* 82142214h */ case    1:  		/* lwz R11, <#[R11 + 232]> */
		/* 82142214h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000E8) );
		/* 82142214h case    1:*/		return 0x82142218;
		  /* 82142218h */ case    2:  		/* b 672 */
		/* 82142218h case    2:*/		return 0x821424B8;
		/* 82142218h case    2:*/		return 0x8214221C;
	}
	return 0x8214221C;
} // Block from 82142210h-8214221Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214221Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214221C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214221C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214221C);
		  /* 8214221Ch */ case    0:  		/* lis R10, 28672 */
		/* 8214221Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7000);
		/* 8214221Ch case    0:*/		return 0x82142220;
		  /* 82142220h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 82142220h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142220h case    1:*/		return 0x82142224;
		  /* 82142224h */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 82142224h case    2:*/		if ( regs.CR[6].eq ) { return 0x82142294;  }
		/* 82142224h case    2:*/		return 0x82142228;
		  /* 82142228h */ case    3:  		/* lis R10, 28688 */
		/* 82142228h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7010);
		/* 82142228h case    3:*/		return 0x8214222C;
		  /* 8214222Ch */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8214222Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214222Ch case    4:*/		return 0x82142230;
		  /* 82142230h */ case    5:  		/* bc 12, CR6_EQ, 88 */
		/* 82142230h case    5:*/		if ( regs.CR[6].eq ) { return 0x82142288;  }
		/* 82142230h case    5:*/		return 0x82142234;
		  /* 82142234h */ case    6:  		/* lis R10, 28704 */
		/* 82142234h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7020);
		/* 82142234h case    6:*/		return 0x82142238;
		  /* 82142238h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 82142238h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142238h case    7:*/		return 0x8214223C;
		  /* 8214223Ch */ case    8:  		/* bc 12, CR6_EQ, 64 */
		/* 8214223Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8214227C;  }
		/* 8214223Ch case    8:*/		return 0x82142240;
		  /* 82142240h */ case    9:  		/* lis R10, 28720 */
		/* 82142240h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x7030);
		/* 82142240h case    9:*/		return 0x82142244;
		  /* 82142244h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 82142244h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142244h case   10:*/		return 0x82142248;
		  /* 82142248h */ case   11:  		/* bc 12, CR6_EQ, 40 */
		/* 82142248h case   11:*/		if ( regs.CR[6].eq ) { return 0x82142270;  }
		/* 82142248h case   11:*/		return 0x8214224C;
		  /* 8214224Ch */ case   12:  		/* lis R10, 28736 */
		/* 8214224Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x7040);
		/* 8214224Ch case   12:*/		return 0x82142250;
		  /* 82142250h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 82142250h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142250h case   13:*/		return 0x82142254;
		  /* 82142254h */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 82142254h case   14:*/		if ( regs.CR[6].eq ) { return 0x82142270;  }
		/* 82142254h case   14:*/		return 0x82142258;
		  /* 82142258h */ case   15:  		/* lis R10, 28752 */
		/* 82142258h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x7050);
		/* 82142258h case   15:*/		return 0x8214225C;
		  /* 8214225Ch */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8214225Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214225Ch case   16:*/		return 0x82142260;
		  /* 82142260h */ case   17:  		/* bc 4, CR6_EQ, 656 */
		/* 82142260h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821424F0;  }
		/* 82142260h case   17:*/		return 0x82142264;
	}
	return 0x82142264;
} // Block from 8214221Ch-82142264h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82142264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142264);
		  /* 82142264h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142264h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142264h case    0:*/		return 0x82142268;
		  /* 82142268h */ case    1:  		/* lwz R11, <#[R11 + 216]> */
		/* 82142268h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000D8) );
		/* 82142268h case    1:*/		return 0x8214226C;
		  /* 8214226Ch */ case    2:  		/* b 588 */
		/* 8214226Ch case    2:*/		return 0x821424B8;
		/* 8214226Ch case    2:*/		return 0x82142270;
	}
	return 0x82142270;
} // Block from 82142264h-82142270h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142270);
		  /* 82142270h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142270h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142270h case    0:*/		return 0x82142274;
		  /* 82142274h */ case    1:  		/* lwz R11, <#[R11 + 208]> */
		/* 82142274h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000D0) );
		/* 82142274h case    1:*/		return 0x82142278;
		  /* 82142278h */ case    2:  		/* b 576 */
		/* 82142278h case    2:*/		return 0x821424B8;
		/* 82142278h case    2:*/		return 0x8214227C;
	}
	return 0x8214227C;
} // Block from 82142270h-8214227Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214227Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214227C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214227C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214227C);
		  /* 8214227Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8214227Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214227Ch case    0:*/		return 0x82142280;
		  /* 82142280h */ case    1:  		/* lwz R11, <#[R11 + 204]> */
		/* 82142280h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000CC) );
		/* 82142280h case    1:*/		return 0x82142284;
		  /* 82142284h */ case    2:  		/* b 564 */
		/* 82142284h case    2:*/		return 0x821424B8;
		/* 82142284h case    2:*/		return 0x82142288;
	}
	return 0x82142288;
} // Block from 8214227Ch-82142288h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142288);
		  /* 82142288h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142288h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142288h case    0:*/		return 0x8214228C;
		  /* 8214228Ch */ case    1:  		/* lwz R11, <#[R11 + 200]> */
		/* 8214228Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000C8) );
		/* 8214228Ch case    1:*/		return 0x82142290;
		  /* 82142290h */ case    2:  		/* b 552 */
		/* 82142290h case    2:*/		return 0x821424B8;
		/* 82142290h case    2:*/		return 0x82142294;
	}
	return 0x82142294;
} // Block from 82142288h-82142294h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142294);
		  /* 82142294h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142294h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142294h case    0:*/		return 0x82142298;
		  /* 82142298h */ case    1:  		/* lwz R11, <#[R11 + 196]> */
		/* 82142298h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000C4) );
		/* 82142298h case    1:*/		return 0x8214229C;
		  /* 8214229Ch */ case    2:  		/* b 540 */
		/* 8214229Ch case    2:*/		return 0x821424B8;
		/* 8214229Ch case    2:*/		return 0x821422A0;
	}
	return 0x821422A0;
} // Block from 82142294h-821422A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821422A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821422A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821422A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821422A0);
		  /* 821422A0h */ case    0:  		/* cmplw CR6, R11, R25 */
		/* 821422A0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821422A0h case    0:*/		return 0x821422A4;
		  /* 821422A4h */ case    1:  		/* bc 12, CR6_GT, 296 */
		/* 821422A4h case    1:*/		if ( regs.CR[6].gt ) { return 0x821423CC;  }
		/* 821422A4h case    1:*/		return 0x821422A8;
		  /* 821422A8h */ case    2:  		/* bc 12, CR6_EQ, 256 */
		/* 821422A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821423A8;  }
		/* 821422A8h case    2:*/		return 0x821422AC;
		  /* 821422ACh */ case    3:  		/* cmplw CR6, R11, R26 */
		/* 821422ACh case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821422ACh case    3:*/		return 0x821422B0;
		  /* 821422B0h */ case    4:  		/* bc 12, CR6_GT, 176 */
		/* 821422B0h case    4:*/		if ( regs.CR[6].gt ) { return 0x82142360;  }
		/* 821422B0h case    4:*/		return 0x821422B4;
		  /* 821422B4h */ case    5:  		/* bc 12, CR6_EQ, 96 */
		/* 821422B4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82142314;  }
		/* 821422B4h case    5:*/		return 0x821422B8;
		  /* 821422B8h */ case    6:  		/* lis R10, 28784 */
		/* 821422B8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7070);
		/* 821422B8h case    6:*/		return 0x821422BC;
		  /* 821422BCh */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 821422BCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821422BCh case    7:*/		return 0x821422C0;
		  /* 821422C0h */ case    8:  		/* bc 12, CR6_EQ, -92 */
		/* 821422C0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82142264;  }
		/* 821422C0h case    8:*/		return 0x821422C4;
		  /* 821422C4h */ case    9:  		/* lis R10, 28816 */
		/* 821422C4h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x7090);
		/* 821422C4h case    9:*/		return 0x821422C8;
		  /* 821422C8h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821422C8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821422C8h case   10:*/		return 0x821422CC;
		  /* 821422CCh */ case   11:  		/* bc 12, CR6_EQ, 136 */
		/* 821422CCh case   11:*/		if ( regs.CR[6].eq ) { return 0x82142354;  }
		/* 821422CCh case   11:*/		return 0x821422D0;
		  /* 821422D0h */ case   12:  		/* lis R10, 28880 */
		/* 821422D0h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x70D0);
		/* 821422D0h case   12:*/		return 0x821422D4;
		  /* 821422D4h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 821422D4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821422D4h case   13:*/		return 0x821422D8;
		  /* 821422D8h */ case   14:  		/* bc 12, CR6_EQ, 112 */
		/* 821422D8h case   14:*/		if ( regs.CR[6].eq ) { return 0x82142348;  }
		/* 821422D8h case   14:*/		return 0x821422DC;
		  /* 821422DCh */ case   15:  		/* lis R10, 28928 */
		/* 821422DCh case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x7100);
		/* 821422DCh case   15:*/		return 0x821422E0;
		  /* 821422E0h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 821422E0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821422E0h case   16:*/		return 0x821422E4;
		  /* 821422E4h */ case   17:  		/* bc 12, CR6_EQ, 88 */
		/* 821422E4h case   17:*/		if ( regs.CR[6].eq ) { return 0x8214233C;  }
		/* 821422E4h case   17:*/		return 0x821422E8;
		  /* 821422E8h */ case   18:  		/* lis R10, 29440 */
		/* 821422E8h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x7300);
		/* 821422E8h case   18:*/		return 0x821422EC;
		  /* 821422ECh */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 821422ECh case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821422ECh case   19:*/		return 0x821422F0;
		  /* 821422F0h */ case   20:  		/* bc 12, CR6_EQ, 48 */
		/* 821422F0h case   20:*/		if ( regs.CR[6].eq ) { return 0x82142320;  }
		/* 821422F0h case   20:*/		return 0x821422F4;
		  /* 821422F4h */ case   21:  		/* lis R10, 29456 */
		/* 821422F4h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x7310);
		/* 821422F4h case   21:*/		return 0x821422F8;
		  /* 821422F8h */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 821422F8h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821422F8h case   22:*/		return 0x821422FC;
		  /* 821422FCh */ case   23:  		/* bc 12, CR6_EQ, 24 */
		/* 821422FCh case   23:*/		if ( regs.CR[6].eq ) { return 0x82142314;  }
		/* 821422FCh case   23:*/		return 0x82142300;
		  /* 82142300h */ case   24:  		/* lis R10, 29472 */
		/* 82142300h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0x7320);
		/* 82142300h case   24:*/		return 0x82142304;
		  /* 82142304h */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 82142304h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142304h case   25:*/		return 0x82142308;
		  /* 82142308h */ case   26:  		/* bc 4, CR6_EQ, 488 */
		/* 82142308h case   26:*/		if ( !regs.CR[6].eq ) { return 0x821424F0;  }
		/* 82142308h case   26:*/		return 0x8214230C;
		  /* 8214230Ch */ case   27:  		/* li R4, 1 */
		/* 8214230Ch case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214230Ch case   27:*/		return 0x82142310;
		  /* 82142310h */ case   28:  		/* b 20 */
		/* 82142310h case   28:*/		return 0x82142324;
		/* 82142310h case   28:*/		return 0x82142314;
	}
	return 0x82142314;
} // Block from 821422A0h-82142314h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82142314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142314);
		  /* 82142314h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142314h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142314h case    0:*/		return 0x82142318;
		  /* 82142318h */ case    1:  		/* lwz R11, <#[R11 + 296]> */
		/* 82142318h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000128) );
		/* 82142318h case    1:*/		return 0x8214231C;
		  /* 8214231Ch */ case    2:  		/* b 412 */
		/* 8214231Ch case    2:*/		return 0x821424B8;
		/* 8214231Ch case    2:*/		return 0x82142320;
	}
	return 0x82142320;
} // Block from 82142314h-82142320h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142320);
		  /* 82142320h */ case    0:  		/* li R4, 0 */
		/* 82142320h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82142320h case    0:*/		return 0x82142324;
	}
	return 0x82142324;
} // Block from 82142320h-82142324h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82142324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142324);
		  /* 82142324h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142324h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142324h case    0:*/		return 0x82142328;
		  /* 82142328h */ case    1:  		/* mr R3, R31 */
		/* 82142328h case    1:*/		regs.R3 = regs.R31;
		/* 82142328h case    1:*/		return 0x8214232C;
		  /* 8214232Ch */ case    2:  		/* lwz R11, <#[R11 + 292]> */
		/* 8214232Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000124) );
		/* 8214232Ch case    2:*/		return 0x82142330;
		  /* 82142330h */ case    3:  		/* mtspr CTR, R11 */
		/* 82142330h case    3:*/		regs.CTR = regs.R11;
		/* 82142330h case    3:*/		return 0x82142334;
		  /* 82142334h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82142334h case    4:*/		if ( 1 ) { regs.LR = 0x82142338; return (uint32)regs.CTR; }
		/* 82142334h case    4:*/		return 0x82142338;
		  /* 82142338h */ case    5:  		/* b 404 */
		/* 82142338h case    5:*/		return 0x821424CC;
		/* 82142338h case    5:*/		return 0x8214233C;
	}
	return 0x8214233C;
} // Block from 82142324h-8214233Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214233Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214233C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214233C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214233C);
		  /* 8214233Ch */ case    0:  		/* mr R3, R31 */
		/* 8214233Ch case    0:*/		regs.R3 = regs.R31;
		/* 8214233Ch case    0:*/		return 0x82142340;
		  /* 82142340h */ case    1:  		/* bl -8104 */
		/* 82142340h case    1:*/		regs.LR = 0x82142344; return 0x82140398;
		/* 82142340h case    1:*/		return 0x82142344;
		  /* 82142344h */ case    2:  		/* b 392 */
		/* 82142344h case    2:*/		return 0x821424CC;
		/* 82142344h case    2:*/		return 0x82142348;
	}
	return 0x82142348;
} // Block from 8214233Ch-82142348h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142348);
		  /* 82142348h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142348h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142348h case    0:*/		return 0x8214234C;
		  /* 8214234Ch */ case    1:  		/* lwz R11, <#[R11 + 148]> */
		/* 8214234Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000094) );
		/* 8214234Ch case    1:*/		return 0x82142350;
		  /* 82142350h */ case    2:  		/* b 360 */
		/* 82142350h case    2:*/		return 0x821424B8;
		/* 82142350h case    2:*/		return 0x82142354;
	}
	return 0x82142354;
} // Block from 82142348h-82142354h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142354);
		  /* 82142354h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142354h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142354h case    0:*/		return 0x82142358;
		  /* 82142358h */ case    1:  		/* lwz R11, <#[R11 + 212]> */
		/* 82142358h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000D4) );
		/* 82142358h case    1:*/		return 0x8214235C;
		  /* 8214235Ch */ case    2:  		/* b 348 */
		/* 8214235Ch case    2:*/		return 0x821424B8;
		/* 8214235Ch case    2:*/		return 0x82142360;
	}
	return 0x82142360;
} // Block from 82142354h-82142360h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142360);
		  /* 82142360h */ case    0:  		/* lis R10, 29504 */
		/* 82142360h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7340);
		/* 82142360h case    0:*/		return 0x82142364;
		  /* 82142364h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 82142364h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142364h case    1:*/		return 0x82142368;
		  /* 82142368h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 82142368h case    2:*/		if ( regs.CR[6].eq ) { return 0x821423C0;  }
		/* 82142368h case    2:*/		return 0x8214236C;
		  /* 8214236Ch */ case    3:  		/* lis R10, 29520 */
		/* 8214236Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7350);
		/* 8214236Ch case    3:*/		return 0x82142370;
		  /* 82142370h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82142370h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142370h case    4:*/		return 0x82142374;
		  /* 82142374h */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 82142374h case    5:*/		if ( regs.CR[6].eq ) { return 0x821423B4;  }
		/* 82142374h case    5:*/		return 0x82142378;
		  /* 82142378h */ case    6:  		/* lis R10, 29536 */
		/* 82142378h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7360);
		/* 82142378h case    6:*/		return 0x8214237C;
		  /* 8214237Ch */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8214237Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214237Ch case    7:*/		return 0x82142380;
	}
	return 0x82142380;
} // Block from 82142360h-82142380h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82142380h
// Function '?PatternMatch@CVSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142380);
		  /* 82142380h */ case    0:  		/* bc 12, CR6_EQ, 52 */
		/* 82142380h case    0:*/		if ( regs.CR[6].eq ) { return 0x821423B4;  }
		/* 82142380h case    0:*/		return 0x82142384;
		  /* 82142384h */ case    1:  		/* lis R10, 29552 */
		/* 82142384h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x7370);
		/* 82142384h case    1:*/		return 0x82142388;
		  /* 82142388h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 82142388h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142388h case    2:*/		return 0x8214238C;
		  /* 8214238Ch */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 8214238Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821423B4;  }
		/* 8214238Ch case    3:*/		return 0x82142390;
		  /* 82142390h */ case    4:  		/* lis R10, 29568 */
		/* 82142390h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0x7380);
		/* 82142390h case    4:*/		return 0x82142394;
		  /* 82142394h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 82142394h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142394h case    5:*/		return 0x82142398;
		  /* 82142398h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 82142398h case    6:*/		if ( regs.CR[6].eq ) { return 0x821423B4;  }
		/* 82142398h case    6:*/		return 0x8214239C;
		  /* 8214239Ch */ case    7:  		/* lis R10, 29584 */
		/* 8214239Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0x7390);
		/* 8214239Ch case    7:*/		return 0x821423A0;
		  /* 821423A0h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 821423A0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821423A0h case    8:*/		return 0x821423A4;
		  /* 821423A4h */ case    9:  		/* bc 4, CR6_EQ, 332 */
		/* 821423A4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821424F0;  }
		/* 821423A4h case    9:*/		return 0x821423A8;
	}
	return 0x821423A8;
} // Block from 82142380h-821423A8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821423A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821423A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821423A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821423A8);
		  /* 821423A8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821423A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821423A8h case    0:*/		return 0x821423AC;
		  /* 821423ACh */ case    1:  		/* lwz R11, <#[R11 + 288]> */
		/* 821423ACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000120) );
		/* 821423ACh case    1:*/		return 0x821423B0;
		  /* 821423B0h */ case    2:  		/* b 264 */
		/* 821423B0h case    2:*/		return 0x821424B8;
		/* 821423B0h case    2:*/		return 0x821423B4;
	}
	return 0x821423B4;
} // Block from 821423A8h-821423B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821423B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821423B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821423B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821423B4);
		  /* 821423B4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821423B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821423B4h case    0:*/		return 0x821423B8;
		  /* 821423B8h */ case    1:  		/* lwz R11, <#[R11 + 256]> */
		/* 821423B8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000100) );
		/* 821423B8h case    1:*/		return 0x821423BC;
		  /* 821423BCh */ case    2:  		/* b 252 */
		/* 821423BCh case    2:*/		return 0x821424B8;
		/* 821423BCh case    2:*/		return 0x821423C0;
	}
	return 0x821423C0;
} // Block from 821423B4h-821423C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821423C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821423C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821423C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821423C0);
		  /* 821423C0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821423C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821423C0h case    0:*/		return 0x821423C4;
		  /* 821423C4h */ case    1:  		/* lwz R11, <#[R11 + 300]> */
		/* 821423C4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000012C) );
		/* 821423C4h case    1:*/		return 0x821423C8;
		  /* 821423C8h */ case    2:  		/* b 240 */
		/* 821423C8h case    2:*/		return 0x821424B8;
		/* 821423C8h case    2:*/		return 0x821423CC;
	}
	return 0x821423CC;
} // Block from 821423C0h-821423CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821423CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821423CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821423CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821423CC);
		  /* 821423CCh */ case    0:  		/* cmplw CR6, R11, R27 */
		/* 821423CCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 821423CCh case    0:*/		return 0x821423D0;
		  /* 821423D0h */ case    1:  		/* bc 12, CR6_GT, 116 */
		/* 821423D0h case    1:*/		if ( regs.CR[6].gt ) { return 0x82142444;  }
		/* 821423D0h case    1:*/		return 0x821423D4;
		  /* 821423D4h */ case    2:  		/* bc 12, CR6_EQ, 100 */
		/* 821423D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82142438;  }
		/* 821423D4h case    2:*/		return 0x821423D8;
		  /* 821423D8h */ case    3:  		/* lis R10, 29616 */
		/* 821423D8h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x73B0);
		/* 821423D8h case    3:*/		return 0x821423DC;
		  /* 821423DCh */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 821423DCh case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821423DCh case    4:*/		return 0x821423E0;
		  /* 821423E0h */ case    5:  		/* bc 12, CR6_EQ, -56 */
		/* 821423E0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821423A8;  }
		/* 821423E0h case    5:*/		return 0x821423E4;
		  /* 821423E4h */ case    6:  		/* lis R10, 29632 */
		/* 821423E4h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x73C0);
		/* 821423E4h case    6:*/		return 0x821423E8;
		  /* 821423E8h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 821423E8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821423E8h case    7:*/		return 0x821423EC;
		  /* 821423ECh */ case    8:  		/* bc 12, CR6_EQ, -68 */
		/* 821423ECh case    8:*/		if ( regs.CR[6].eq ) { return 0x821423A8;  }
		/* 821423ECh case    8:*/		return 0x821423F0;
		  /* 821423F0h */ case    9:  		/* lis R10, 29648 */
		/* 821423F0h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x73D0);
		/* 821423F0h case    9:*/		return 0x821423F4;
		  /* 821423F4h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821423F4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821423F4h case   10:*/		return 0x821423F8;
		  /* 821423F8h */ case   11:  		/* bc 12, CR6_EQ, -228 */
		/* 821423F8h case   11:*/		if ( regs.CR[6].eq ) { return 0x82142314;  }
		/* 821423F8h case   11:*/		return 0x821423FC;
		  /* 821423FCh */ case   12:  		/* lis R10, 29664 */
		/* 821423FCh case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x73E0);
		/* 821423FCh case   12:*/		return 0x82142400;
		  /* 82142400h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 82142400h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142400h case   13:*/		return 0x82142404;
		  /* 82142404h */ case   14:  		/* bc 12, CR6_EQ, -240 */
		/* 82142404h case   14:*/		if ( regs.CR[6].eq ) { return 0x82142314;  }
		/* 82142404h case   14:*/		return 0x82142408;
		  /* 82142408h */ case   15:  		/* lis R10, 29680 */
		/* 82142408h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x73F0);
		/* 82142408h case   15:*/		return 0x8214240C;
		  /* 8214240Ch */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 8214240Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214240Ch case   16:*/		return 0x82142410;
		  /* 82142410h */ case   17:  		/* bc 12, CR6_EQ, -252 */
		/* 82142410h case   17:*/		if ( regs.CR[6].eq ) { return 0x82142314;  }
		/* 82142410h case   17:*/		return 0x82142414;
		  /* 82142414h */ case   18:  		/* lis R10, 29696 */
		/* 82142414h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x7400);
		/* 82142414h case   18:*/		return 0x82142418;
		  /* 82142418h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 82142418h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142418h case   19:*/		return 0x8214241C;
		  /* 8214241Ch */ case   20:  		/* bc 12, CR6_EQ, -264 */
		/* 8214241Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x82142314;  }
		/* 8214241Ch case   20:*/		return 0x82142420;
		  /* 82142420h */ case   21:  		/* lis R10, 29712 */
		/* 82142420h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x7410);
		/* 82142420h case   21:*/		return 0x82142424;
		  /* 82142424h */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 82142424h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142424h case   22:*/		return 0x82142428;
		  /* 82142428h */ case   23:  		/* bc 4, CR6_EQ, 200 */
		/* 82142428h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821424F0;  }
		/* 82142428h case   23:*/		return 0x8214242C;
		  /* 8214242Ch */ case   24:  		/* lwz R11, <#[R31]> */
		/* 8214242Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214242Ch case   24:*/		return 0x82142430;
		  /* 82142430h */ case   25:  		/* lwz R11, <#[R11 + 244]> */
		/* 82142430h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000F4) );
		/* 82142430h case   25:*/		return 0x82142434;
		  /* 82142434h */ case   26:  		/* b 132 */
		/* 82142434h case   26:*/		return 0x821424B8;
		/* 82142434h case   26:*/		return 0x82142438;
	}
	return 0x82142438;
} // Block from 821423CCh-82142438h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82142438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142438);
		  /* 82142438h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142438h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142438h case    0:*/		return 0x8214243C;
		  /* 8214243Ch */ case    1:  		/* lwz R11, <#[R11 + 236]> */
		/* 8214243Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000EC) );
		/* 8214243Ch case    1:*/		return 0x82142440;
		  /* 82142440h */ case    2:  		/* b 120 */
		/* 82142440h case    2:*/		return 0x821424B8;
		/* 82142440h case    2:*/		return 0x82142444;
	}
	return 0x82142444;
} // Block from 82142438h-82142444h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142444);
		  /* 82142444h */ case    0:  		/* lis R10, 29760 */
		/* 82142444h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7440);
		/* 82142444h case    0:*/		return 0x82142448;
		  /* 82142448h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 82142448h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142448h case    1:*/		return 0x8214244C;
		  /* 8214244Ch */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 8214244Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821424A4;  }
		/* 8214244Ch case    2:*/		return 0x82142450;
		  /* 82142450h */ case    3:  		/* lis R10, 29776 */
		/* 82142450h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7450);
		/* 82142450h case    3:*/		return 0x82142454;
		  /* 82142454h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82142454h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142454h case    4:*/		return 0x82142458;
		  /* 82142458h */ case    5:  		/* bc 12, CR6_EQ, 76 */
		/* 82142458h case    5:*/		if ( regs.CR[6].eq ) { return 0x821424A4;  }
		/* 82142458h case    5:*/		return 0x8214245C;
		  /* 8214245Ch */ case    6:  		/* lis R10, 29792 */
		/* 8214245Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7460);
		/* 8214245Ch case    6:*/		return 0x82142460;
		  /* 82142460h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 82142460h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142460h case    7:*/		return 0x82142464;
		  /* 82142464h */ case    8:  		/* bc 12, CR6_EQ, 64 */
		/* 82142464h case    8:*/		if ( regs.CR[6].eq ) { return 0x821424A4;  }
		/* 82142464h case    8:*/		return 0x82142468;
		  /* 82142468h */ case    9:  		/* lis R10, 29808 */
		/* 82142468h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x7470);
		/* 82142468h case    9:*/		return 0x8214246C;
		  /* 8214246Ch */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 8214246Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214246Ch case   10:*/		return 0x82142470;
		  /* 82142470h */ case   11:  		/* bc 12, CR6_EQ, 52 */
		/* 82142470h case   11:*/		if ( regs.CR[6].eq ) { return 0x821424A4;  }
		/* 82142470h case   11:*/		return 0x82142474;
		  /* 82142474h */ case   12:  		/* lis R10, 29856 */
		/* 82142474h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x74A0);
		/* 82142474h case   12:*/		return 0x82142478;
		  /* 82142478h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 82142478h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142478h case   13:*/		return 0x8214247C;
		  /* 8214247Ch */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 8214247Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x82142498;  }
		/* 8214247Ch case   14:*/		return 0x82142480;
		  /* 82142480h */ case   15:  		/* lis R10, 29872 */
		/* 82142480h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0x74B0);
		/* 82142480h case   15:*/		return 0x82142484;
		  /* 82142484h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 82142484h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142484h case   16:*/		return 0x82142488;
		  /* 82142488h */ case   17:  		/* bc 4, CR6_EQ, 104 */
		/* 82142488h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821424F0;  }
		/* 82142488h case   17:*/		return 0x8214248C;
		  /* 8214248Ch */ case   18:  		/* lwz R11, <#[R31]> */
		/* 8214248Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214248Ch case   18:*/		return 0x82142490;
		  /* 82142490h */ case   19:  		/* lwz R11, <#[R11 + 240]> */
		/* 82142490h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000F0) );
		/* 82142490h case   19:*/		return 0x82142494;
		  /* 82142494h */ case   20:  		/* b 36 */
		/* 82142494h case   20:*/		return 0x821424B8;
		/* 82142494h case   20:*/		return 0x82142498;
	}
	return 0x82142498;
} // Block from 82142444h-82142498h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82142498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142498);
		  /* 82142498h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142498h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142498h case    0:*/		return 0x8214249C;
		  /* 8214249Ch */ case    1:  		/* lwz R11, <#[R11 + 248]> */
		/* 8214249Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000F8) );
		/* 8214249Ch case    1:*/		return 0x821424A0;
		  /* 821424A0h */ case    2:  		/* b 24 */
		/* 821424A0h case    2:*/		return 0x821424B8;
		/* 821424A0h case    2:*/		return 0x821424A4;
	}
	return 0x821424A4;
} // Block from 82142498h-821424A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821424A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821424A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821424A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821424A4);
		  /* 821424A4h */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 821424A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 821424A4h case    0:*/		return 0x821424A8;
		  /* 821424A8h */ case    1:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 821424A8h case    1:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 821424A8h case    1:*/		return 0x821424AC;
		  /* 821424ACh */ case    2:  		/* bc 12, CR0_EQ, 28 */
		/* 821424ACh case    2:*/		if ( regs.CR[0].eq ) { return 0x821424C8;  }
		/* 821424ACh case    2:*/		return 0x821424B0;
		  /* 821424B0h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 821424B0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821424B0h case    3:*/		return 0x821424B4;
		  /* 821424B4h */ case    4:  		/* lwz R11, <#[R11 + 252]> */
		/* 821424B4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000FC) );
		/* 821424B4h case    4:*/		return 0x821424B8;
	}
	return 0x821424B8;
} // Block from 821424A4h-821424B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821424B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821424B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821424B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821424B8);
		  /* 821424B8h */ case    0:  		/* mr R3, R31 */
		/* 821424B8h case    0:*/		regs.R3 = regs.R31;
		/* 821424B8h case    0:*/		return 0x821424BC;
		  /* 821424BCh */ case    1:  		/* mtspr CTR, R11 */
		/* 821424BCh case    1:*/		regs.CTR = regs.R11;
		/* 821424BCh case    1:*/		return 0x821424C0;
		  /* 821424C0h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 821424C0h case    2:*/		if ( 1 ) { regs.LR = 0x821424C4; return (uint32)regs.CTR; }
		/* 821424C0h case    2:*/		return 0x821424C4;
		  /* 821424C4h */ case    3:  		/* b 8 */
		/* 821424C4h case    3:*/		return 0x821424CC;
		/* 821424C4h case    3:*/		return 0x821424C8;
	}
	return 0x821424C8;
} // Block from 821424B8h-821424C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821424C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821424C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821424C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821424C8);
		  /* 821424C8h */ case    0:  		/* mr R3, R29 */
		/* 821424C8h case    0:*/		regs.R3 = regs.R29;
		/* 821424C8h case    0:*/		return 0x821424CC;
	}
	return 0x821424CC;
} // Block from 821424C8h-821424CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821424CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821424CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821424CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821424CC);
		  /* 821424CCh */ case    0:  		/* cmpw CR6, R3, R29 */
		/* 821424CCh case    0:*/		cpu::op::cmpw<6>(regs,regs.R3,regs.R29);
		/* 821424CCh case    0:*/		return 0x821424D0;
		  /* 821424D0h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 821424D0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821424F0;  }
		/* 821424D0h case    1:*/		return 0x821424D4;
	}
	return 0x821424D4;
} // Block from 821424CCh-821424D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821424D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821424D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821424D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821424D4);
		  /* 821424D4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821424D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821424D4h case    0:*/		return 0x821424D8;
		  /* 821424D8h */ case    1:  		/* addi R30, R30, 1 */
		/* 821424D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821424D8h case    1:*/		return 0x821424DC;
		  /* 821424DCh */ case    2:  		/* cmplw CR6, R30, R11 */
		/* 821424DCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821424DCh case    2:*/		return 0x821424E0;
		  /* 821424E0h */ case    3:  		/* bc 12, CR6_LT, -1300 */
		/* 821424E0h case    3:*/		if ( regs.CR[6].lt ) { return 0x82141FCC;  }
		/* 821424E0h case    3:*/		return 0x821424E4;
	}
	return 0x821424E4;
} // Block from 821424D4h-821424E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821424E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821424E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821424E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821424E4);
		  /* 821424E4h */ case    0:  		/* li R3, 0 */
		/* 821424E4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821424E4h case    0:*/		return 0x821424E8;
	}
	return 0x821424E8;
} // Block from 821424E4h-821424E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821424E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821424E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821424E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821424E8);
		  /* 821424E8h */ case    0:  		/* addi R1, R1, 176 */
		/* 821424E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821424E8h case    0:*/		return 0x821424EC;
		  /* 821424ECh */ case    1:  		/* b -725596 */
		/* 821424ECh case    1:*/		return 0x82091290;
		/* 821424ECh case    1:*/		return 0x821424F0;
	}
	return 0x821424F0;
} // Block from 821424E8h-821424F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821424F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821424F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821424F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821424F0);
		  /* 821424F0h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 821424F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 821424F0h case    0:*/		return 0x821424F4;
		  /* 821424F4h */ case    1:  		/* lis R10, -32254 */
		/* 821424F4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 821424F4h case    1:*/		return 0x821424F8;
		  /* 821424F8h */ case    2:  		/* li R5, 4532 */
		/* 821424F8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11B4);
		/* 821424F8h case    2:*/		return 0x821424FC;
		  /* 821424FCh */ case    3:  		/* addi R6, R10, -31872 */
		/* 821424FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF8380);
		/* 821424FCh case    3:*/		return 0x82142500;
		  /* 82142500h */ case    4:  		/* mr R3, R31 */
		/* 82142500h case    4:*/		regs.R3 = regs.R31;
		/* 82142500h case    4:*/		return 0x82142504;
		  /* 82142504h */ case    5:  		/* lwz R4, <#[R11 + 60]> */
		/* 82142504h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 82142504h case    5:*/		return 0x82142508;
		  /* 82142508h */ case    6:  		/* bl -212440 */
		/* 82142508h case    6:*/		regs.LR = 0x8214250C; return 0x8210E730;
		/* 82142508h case    6:*/		return 0x8214250C;
		  /* 8214250Ch */ case    7:  		/* mr R3, R29 */
		/* 8214250Ch case    7:*/		regs.R3 = regs.R29;
		/* 8214250Ch case    7:*/		return 0x82142510;
		  /* 82142510h */ case    8:  		/* b -40 */
		/* 82142510h case    8:*/		return 0x821424E8;
		/* 82142510h case    8:*/		return 0x82142514;
		  /* 82142514h */ case    9:  		/* nop */
		/* 82142514h case    9:*/		cpu::op::nop();
		/* 82142514h case    9:*/		return 0x82142518;
	}
	return 0x82142518;
} // Block from 821424F0h-82142518h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82142518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142518);
		  /* 82142518h */ case    0:  		/* mfspr R12, LR */
		/* 82142518h case    0:*/		regs.R12 = regs.LR;
		/* 82142518h case    0:*/		return 0x8214251C;
		  /* 8214251Ch */ case    1:  		/* bl -725712 */
		/* 8214251Ch case    1:*/		regs.LR = 0x82142520; return 0x8209124C;
		/* 8214251Ch case    1:*/		return 0x82142520;
		  /* 82142520h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82142520h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82142520h case    2:*/		return 0x82142524;
		  /* 82142524h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 82142524h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82142524h case    3:*/		return 0x82142528;
		  /* 82142528h */ case    4:  		/* mr R26, R4 */
		/* 82142528h case    4:*/		regs.R26 = regs.R4;
		/* 82142528h case    4:*/		return 0x8214252C;
		  /* 8214252Ch */ case    5:  		/* lwz R4, <#[R4 + 108]> */
		/* 8214252Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000006C) );
		/* 8214252Ch case    5:*/		return 0x82142530;
		  /* 82142530h */ case    6:  		/* mr R31, R3 */
		/* 82142530h case    6:*/		regs.R31 = regs.R3;
		/* 82142530h case    6:*/		return 0x82142534;
		  /* 82142534h */ case    7:  		/* mr R25, R5 */
		/* 82142534h case    7:*/		regs.R25 = regs.R5;
		/* 82142534h case    7:*/		return 0x82142538;
		  /* 82142538h */ case    8:  		/* lwz R11, <#[R11 + 112]> */
		/* 82142538h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 82142538h case    8:*/		return 0x8214253C;
		  /* 8214253Ch */ case    9:  		/* mtspr CTR, R11 */
		/* 8214253Ch case    9:*/		regs.CTR = regs.R11;
		/* 8214253Ch case    9:*/		return 0x82142540;
		  /* 82142540h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 82142540h case   10:*/		if ( 1 ) { regs.LR = 0x82142544; return (uint32)regs.CTR; }
		/* 82142540h case   10:*/		return 0x82142544;
		  /* 82142544h */ case   11:  		/* lwz R11, <#[R31]> */
		/* 82142544h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142544h case   11:*/		return 0x82142548;
		  /* 82142548h */ case   12:  		/* mr R30, R3 */
		/* 82142548h case   12:*/		regs.R30 = regs.R3;
		/* 82142548h case   12:*/		return 0x8214254C;
		  /* 8214254Ch */ case   13:  		/* mr R3, R31 */
		/* 8214254Ch case   13:*/		regs.R3 = regs.R31;
		/* 8214254Ch case   13:*/		return 0x82142550;
		  /* 82142550h */ case   14:  		/* lwz R4, <#[R26 + 108]> */
		/* 82142550h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x0000006C) );
		/* 82142550h case   14:*/		return 0x82142554;
		  /* 82142554h */ case   15:  		/* lwz R11, <#[R11 + 116]> */
		/* 82142554h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 82142554h case   15:*/		return 0x82142558;
		  /* 82142558h */ case   16:  		/* mtspr CTR, R11 */
		/* 82142558h case   16:*/		regs.CTR = regs.R11;
		/* 82142558h case   16:*/		return 0x8214255C;
		  /* 8214255Ch */ case   17:  		/* bcctrl 20, CR0_LT */
		/* 8214255Ch case   17:*/		if ( 1 ) { regs.LR = 0x82142560; return (uint32)regs.CTR; }
		/* 8214255Ch case   17:*/		return 0x82142560;
		  /* 82142560h */ case   18:  		/* lwz R11, <#[R31 + 348]> */
		/* 82142560h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000015C) );
		/* 82142560h case   18:*/		return 0x82142564;
		  /* 82142564h */ case   19:  		/* mr R29, R3 */
		/* 82142564h case   19:*/		regs.R29 = regs.R3;
		/* 82142564h case   19:*/		return 0x82142568;
		  /* 82142568h */ case   20:  		/* cmpwi CR6, R11, 0 */
		/* 82142568h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82142568h case   20:*/		return 0x8214256C;
		  /* 8214256Ch */ case   21:  		/* bc 12, CR6_EQ, 360 */
		/* 8214256Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x821426D4;  }
		/* 8214256Ch case   21:*/		return 0x82142570;
		  /* 82142570h */ case   22:  		/* lwz R11, <#[R26 + 108]> */
		/* 82142570h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000006C) );
		/* 82142570h case   22:*/		return 0x82142574;
		  /* 82142574h */ case   23:  		/* cmpwi CR6, R11, -1 */
		/* 82142574h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82142574h case   23:*/		return 0x82142578;
		  /* 82142578h */ case   24:  		/* bc 4, CR6_EQ, 12 */
		/* 82142578h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82142584;  }
		/* 82142578h case   24:*/		return 0x8214257C;
		  /* 8214257Ch */ case   25:  		/* li R3, 0 */
		/* 8214257Ch case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214257Ch case   25:*/		return 0x82142580;
		  /* 82142580h */ case   26:  		/* b 936 */
		/* 82142580h case   26:*/		return 0x82142928;
		/* 82142580h case   26:*/		return 0x82142584;
	}
	return 0x82142584;
} // Block from 82142518h-82142584h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82142584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142584);
		  /* 82142584h */ case    0:  		/* cmplwi CR6, R30, 65535 */
		/* 82142584h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000FFFF);
		/* 82142584h case    0:*/		return 0x82142588;
		  /* 82142588h */ case    1:  		/* bc 12, CR6_EQ, 312 */
		/* 82142588h case    1:*/		if ( regs.CR[6].eq ) { return 0x821426C0;  }
		/* 82142588h case    1:*/		return 0x8214258C;
		  /* 8214258Ch */ case    2:  		/* mr R4, R30 */
		/* 8214258Ch case    2:*/		regs.R4 = regs.R30;
		/* 8214258Ch case    2:*/		return 0x82142590;
		  /* 82142590h */ case    3:  		/* mr R3, R31 */
		/* 82142590h case    3:*/		regs.R3 = regs.R31;
		/* 82142590h case    3:*/		return 0x82142594;
		  /* 82142594h */ case    4:  		/* bl -329748 */
		/* 82142594h case    4:*/		regs.LR = 0x82142598; return 0x820F1D80;
		/* 82142594h case    4:*/		return 0x82142598;
		  /* 82142598h */ case    5:  		/* mr R11, R3 */
		/* 82142598h case    5:*/		regs.R11 = regs.R3;
		/* 82142598h case    5:*/		return 0x8214259C;
		  /* 8214259Ch */ case    6:  		/* lis R10, -32254 */
		/* 8214259Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 8214259Ch case    6:*/		return 0x821425A0;
		  /* 821425A0h */ case    7:  		/* mr R7, R29 */
		/* 821425A0h case    7:*/		regs.R7 = regs.R29;
		/* 821425A0h case    7:*/		return 0x821425A4;
		  /* 821425A4h */ case    8:  		/* addi R5, R10, -14428 */
		/* 821425A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFC7A4);
		/* 821425A4h case    8:*/		return 0x821425A8;
		  /* 821425A8h */ case    9:  		/* li R4, 32 */
		/* 821425A8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 821425A8h case    9:*/		return 0x821425AC;
		  /* 821425ACh */ case   10:  		/* addi R3, R1, 96 */
		/* 821425ACh case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821425ACh case   10:*/		return 0x821425B0;
		  /* 821425B0h */ case   11:  		/* lwz R6, <#[R11]> */
		/* 821425B0h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821425B0h case   11:*/		return 0x821425B4;
		  /* 821425B4h */ case   12:  		/* bl -655220 */
		/* 821425B4h case   12:*/		regs.LR = 0x821425B8; return 0x820A2640;
		/* 821425B4h case   12:*/		return 0x821425B8;
		  /* 821425B8h */ case   13:  		/* li R11, 0 */
		/* 821425B8h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821425B8h case   13:*/		return 0x821425BC;
		  /* 821425BCh */ case   14:  		/* addi R27, R31, 472 */
		/* 821425BCh case   14:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R31,0x1D8);
		/* 821425BCh case   14:*/		return 0x821425C0;
		  /* 821425C0h */ case   15:  		/* lwz R5, <#[R26 + 12]> */
		/* 821425C0h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 821425C0h case   15:*/		return 0x821425C4;
		  /* 821425C4h */ case   16:  		/* stb R11, <#[R1 + 127]> */
		/* 821425C4h case   16:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x0000007F) );
		/* 821425C4h case   16:*/		return 0x821425C8;
		  /* 821425C8h */ case   17:  		/* li R6, 1 */
		/* 821425C8h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821425C8h case   17:*/		return 0x821425CC;
		  /* 821425CCh */ case   18:  		/* addi R4, R1, 96 */
		/* 821425CCh case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 821425CCh case   18:*/		return 0x821425D0;
		  /* 821425D0h */ case   19:  		/* mr R3, R27 */
		/* 821425D0h case   19:*/		regs.R3 = regs.R27;
		/* 821425D0h case   19:*/		return 0x821425D4;
		  /* 821425D4h */ case   20:  		/* bl -626780 */
		/* 821425D4h case   20:*/		regs.LR = 0x821425D8; return 0x820A9578;
		/* 821425D4h case   20:*/		return 0x821425D8;
		  /* 821425D8h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 821425D8h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821425D8h case   21:*/		return 0x821425DC;
		  /* 821425DCh */ case   22:  		/* bc 12, CR0_LT, 844 */
		/* 821425DCh case   22:*/		if ( regs.CR[0].lt ) { return 0x82142928;  }
		/* 821425DCh case   22:*/		return 0x821425E0;
		  /* 821425E0h */ case   23:  		/* lwz R11, <#[R31 + 500]> */
		/* 821425E0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000001F4) );
		/* 821425E0h case   23:*/		return 0x821425E4;
		  /* 821425E4h */ case   24:  		/* lwz R10, <#[R31 + 204]> */
		/* 821425E4h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000000CC) );
		/* 821425E4h case   24:*/		return 0x821425E8;
		  /* 821425E8h */ case   25:  		/* addi R11, R11, 1 */
		/* 821425E8h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821425E8h case   25:*/		return 0x821425EC;
		  /* 821425ECh */ case   26:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821425ECh case   26:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821425ECh case   26:*/		return 0x821425F0;
		  /* 821425F0h */ case   27:  		/* stw R11, <#[R31 + 500]> */
		/* 821425F0h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000001F4) );
		/* 821425F0h case   27:*/		return 0x821425F4;
		  /* 821425F4h */ case   28:  		/* bc 12, CR0_EQ, 204 */
		/* 821425F4h case   28:*/		if ( regs.CR[0].eq ) { return 0x821426C0;  }
		/* 821425F4h case   28:*/		return 0x821425F8;
		  /* 821425F8h */ case   29:  		/* lwz R11, <#[R26 + 96]> */
		/* 821425F8h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000060) );
		/* 821425F8h case   29:*/		return 0x821425FC;
		  /* 821425FCh */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 821425FCh case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821425FCh case   30:*/		return 0x82142600;
		  /* 82142600h */ case   31:  		/* bc 12, CR6_EQ, 192 */
		/* 82142600h case   31:*/		if ( regs.CR[6].eq ) { return 0x821426C0;  }
		/* 82142600h case   31:*/		return 0x82142604;
		  /* 82142604h */ case   32:  		/* lwz R10, <#[R11 + 4]> */
		/* 82142604h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82142604h case   32:*/		return 0x82142608;
		  /* 82142608h */ case   33:  		/* cmpwi CR6, R10, 6 */
		/* 82142608h case   33:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 82142608h case   33:*/		return 0x8214260C;
		  /* 8214260Ch */ case   34:  		/* bc 4, CR6_EQ, 180 */
		/* 8214260Ch case   34:*/		if ( !regs.CR[6].eq ) { return 0x821426C0;  }
		/* 8214260Ch case   34:*/		return 0x82142610;
		  /* 82142610h */ case   35:  		/* lwz R28, <#[R11 + 20]> */
		/* 82142610h case   35:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000014) );
		/* 82142610h case   35:*/		return 0x82142614;
		  /* 82142614h */ case   36:  		/* lwz R11, <#[R28 + 4]> */
		/* 82142614h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82142614h case   36:*/		return 0x82142618;
		  /* 82142618h */ case   37:  		/* cmpwi CR6, R11, 3 */
		/* 82142618h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82142618h case   37:*/		return 0x8214261C;
		  /* 8214261Ch */ case   38:  		/* bc 4, CR6_EQ, 164 */
		/* 8214261Ch case   38:*/		if ( !regs.CR[6].eq ) { return 0x821426C0;  }
		/* 8214261Ch case   38:*/		return 0x82142620;
		  /* 82142620h */ case   39:  		/* lwz R11, <#[R28 + 24]> */
		/* 82142620h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 82142620h case   39:*/		return 0x82142624;
		  /* 82142624h */ case   40:  		/* mr R10, R11 */
		/* 82142624h case   40:*/		regs.R10 = regs.R11;
		/* 82142624h case   40:*/		return 0x82142628;
		  /* 82142628h */ case   41:  		/* lbz R9, <#[R11]> */
		/* 82142628h case   41:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82142628h case   41:*/		return 0x8214262C;
		  /* 8214262Ch */ case   42:  		/* addi R11, R11, 1 */
		/* 8214262Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214262Ch case   42:*/		return 0x82142630;
		  /* 82142630h */ case   43:  		/* cmplwi CR6, R9, 0 */
		/* 82142630h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82142630h case   43:*/		return 0x82142634;
		  /* 82142634h */ case   44:  		/* bc 4, CR6_EQ, -12 */
		/* 82142634h case   44:*/		if ( !regs.CR[6].eq ) { return 0x82142628;  }
		/* 82142634h case   44:*/		return 0x82142638;
		  /* 82142638h */ case   45:  		/* subf R11, R10, R11 */
		/* 82142638h case   45:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82142638h case   45:*/		return 0x8214263C;
		  /* 8214263Ch */ case   46:  		/* lis R4, 9345 */
		/* 8214263Ch case   46:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8214263Ch case   46:*/		return 0x82142640;
		  /* 82142640h */ case   47:  		/* addi R11, R11, -1 */
		/* 82142640h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82142640h case   47:*/		return 0x82142644;
		  /* 82142644h */ case   48:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82142644h case   48:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82142644h case   48:*/		return 0x82142648;
		  /* 82142648h */ case   49:  		/* addi R29, R11, 3 */
		/* 82142648h case   49:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x3);
		/* 82142648h case   49:*/		return 0x8214264C;
		  /* 8214264Ch */ case   50:  		/* mr R3, R29 */
		/* 8214264Ch case   50:*/		regs.R3 = regs.R29;
		/* 8214264Ch case   50:*/		return 0x82142650;
		  /* 82142650h */ case   51:  		/* bl -762960 */
		/* 82142650h case   51:*/		regs.LR = 0x82142654; return 0x82088200;
		/* 82142650h case   51:*/		return 0x82142654;
		  /* 82142654h */ case   52:  		/* or. R30, R3, R3 */
		/* 82142654h case   52:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82142654h case   52:*/		return 0x82142658;
		  /* 82142658h */ case   53:  		/* bc 4, CR0_EQ, 16 */
		/* 82142658h case   53:*/		if ( !regs.CR[0].eq ) { return 0x82142668;  }
		/* 82142658h case   53:*/		return 0x8214265C;
		  /* 8214265Ch */ case   54:  		/* lis R3, -32761 */
		/* 8214265Ch case   54:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8214265Ch case   54:*/		return 0x82142660;
		  /* 82142660h */ case   55:  		/* ori R3, R3, 14 */
		/* 82142660h case   55:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 82142660h case   55:*/		return 0x82142664;
		  /* 82142664h */ case   56:  		/* b 708 */
		/* 82142664h case   56:*/		return 0x82142928;
		/* 82142664h case   56:*/		return 0x82142668;
	}
	return 0x82142668;
} // Block from 82142584h-82142668h (57 instructions)

//////////////////////////////////////////////////////
// Block at 82142668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142668);
		  /* 82142668h */ case    0:  		/* lis R11, -32254 */
		/* 82142668h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82142668h case    0:*/		return 0x8214266C;
		  /* 8214266Ch */ case    1:  		/* lwz R6, <#[R28 + 24]> */
		/* 8214266Ch case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000018) );
		/* 8214266Ch case    1:*/		return 0x82142670;
		  /* 82142670h */ case    2:  		/* mr R4, R29 */
		/* 82142670h case    2:*/		regs.R4 = regs.R29;
		/* 82142670h case    2:*/		return 0x82142674;
		  /* 82142674h */ case    3:  		/* addi R5, R11, -14444 */
		/* 82142674h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC794);
		/* 82142674h case    3:*/		return 0x82142678;
		  /* 82142678h */ case    4:  		/* mr R3, R30 */
		/* 82142678h case    4:*/		regs.R3 = regs.R30;
		/* 82142678h case    4:*/		return 0x8214267C;
		  /* 8214267Ch */ case    5:  		/* bl -655420 */
		/* 8214267Ch case    5:*/		regs.LR = 0x82142680; return 0x820A2640;
		/* 8214267Ch case    5:*/		return 0x82142680;
		  /* 82142680h */ case    6:  		/* li R6, 1 */
		/* 82142680h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82142680h case    6:*/		return 0x82142684;
		  /* 82142684h */ case    7:  		/* mr R4, R30 */
		/* 82142684h case    7:*/		regs.R4 = regs.R30;
		/* 82142684h case    7:*/		return 0x82142688;
		  /* 82142688h */ case    8:  		/* lwz R5, <#[R26 + 12]> */
		/* 82142688h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 82142688h case    8:*/		return 0x8214268C;
		  /* 8214268Ch */ case    9:  		/* mr R3, R27 */
		/* 8214268Ch case    9:*/		regs.R3 = regs.R27;
		/* 8214268Ch case    9:*/		return 0x82142690;
		  /* 82142690h */ case   10:  		/* bl -626968 */
		/* 82142690h case   10:*/		regs.LR = 0x82142694; return 0x820A9578;
		/* 82142690h case   10:*/		return 0x82142694;
		  /* 82142694h */ case   11:  		/* mr R29, R3 */
		/* 82142694h case   11:*/		regs.R29 = regs.R3;
		/* 82142694h case   11:*/		return 0x82142698;
		  /* 82142698h */ case   12:  		/* lis R4, 9345 */
		/* 82142698h case   12:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82142698h case   12:*/		return 0x8214269C;
		  /* 8214269Ch */ case   13:  		/* mr R3, R30 */
		/* 8214269Ch case   13:*/		regs.R3 = regs.R30;
		/* 8214269Ch case   13:*/		return 0x821426A0;
		  /* 821426A0h */ case   14:  		/* bl -762728 */
		/* 821426A0h case   14:*/		regs.LR = 0x821426A4; return 0x82088338;
		/* 821426A0h case   14:*/		return 0x821426A4;
		  /* 821426A4h */ case   15:  		/* cmpwi CR6, R29, 0 */
		/* 821426A4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 821426A4h case   15:*/		return 0x821426A8;
		  /* 821426A8h */ case   16:  		/* bc 4, CR6_LT, 12 */
		/* 821426A8h case   16:*/		if ( !regs.CR[6].lt ) { return 0x821426B4;  }
		/* 821426A8h case   16:*/		return 0x821426AC;
		  /* 821426ACh */ case   17:  		/* mr R3, R29 */
		/* 821426ACh case   17:*/		regs.R3 = regs.R29;
		/* 821426ACh case   17:*/		return 0x821426B0;
		  /* 821426B0h */ case   18:  		/* b 632 */
		/* 821426B0h case   18:*/		return 0x82142928;
		/* 821426B0h case   18:*/		return 0x821426B4;
	}
	return 0x821426B4;
} // Block from 82142668h-821426B4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821426B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821426B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821426B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821426B4);
		  /* 821426B4h */ case    0:  		/* lwz R11, <#[R31 + 500]> */
		/* 821426B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000001F4) );
		/* 821426B4h case    0:*/		return 0x821426B8;
		  /* 821426B8h */ case    1:  		/* addi R11, R11, 1 */
		/* 821426B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821426B8h case    1:*/		return 0x821426BC;
		  /* 821426BCh */ case    2:  		/* stw R11, <#[R31 + 500]> */
		/* 821426BCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000001F4) );
		/* 821426BCh case    2:*/		return 0x821426C0;
	}
	return 0x821426C0;
} // Block from 821426B4h-821426C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821426C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821426C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821426C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821426C0);
		  /* 821426C0h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821426C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821426C0h case    0:*/		return 0x821426C4;
		  /* 821426C4h */ case    1:  		/* bc 12, CR6_EQ, -328 */
		/* 821426C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214257C;  }
		/* 821426C4h case    1:*/		return 0x821426C8;
		  /* 821426C8h */ case    2:  		/* lwz R11, <#[R26 + 108]> */
		/* 821426C8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000006C) );
		/* 821426C8h case    2:*/		return 0x821426CC;
		  /* 821426CCh */ case    3:  		/* stw R11, <#[R25]> */
		/* 821426CCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821426CCh case    3:*/		return 0x821426D0;
		  /* 821426D0h */ case    4:  		/* b -340 */
		/* 821426D0h case    4:*/		return 0x8214257C;
		/* 821426D0h case    4:*/		return 0x821426D4;
	}
	return 0x821426D4;
} // Block from 821426C0h-821426D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821426D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821426D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821426D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821426D4);
		  /* 821426D4h */ case    0:  		/* cmplwi CR6, R30, 14 */
		/* 821426D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000000E);
		/* 821426D4h case    0:*/		return 0x821426D8;
		  /* 821426D8h */ case    1:  		/* bc 12, CR6_GT, 584 */
		/* 821426D8h case    1:*/		if ( regs.CR[6].gt ) { return 0x82142920;  }
		/* 821426D8h case    1:*/		return 0x821426DC;
		  /* 821426DCh */ case    2:  		/* lis R12, -32253 */
		/* 821426DCh case    2:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 821426DCh case    2:*/		return 0x821426E0;
		  /* 821426E0h */ case    3:  		/* addi R12, R12, 24368 */
		/* 821426E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x5F30);
		/* 821426E0h case    3:*/		return 0x821426E4;
		  /* 821426E4h */ case    4:  		/* lbzx R0, <#[R12 + R30]> */
		/* 821426E4h case    4:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R30 + 0x00000000) );
		/* 821426E4h case    4:*/		return 0x821426E8;
		  /* 821426E8h */ case    5:  		/* rlwinm R0, R0, 2, 0, 29 */
		/* 821426E8h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R0,regs.R0);
		/* 821426E8h case    5:*/		return 0x821426EC;
		  /* 821426ECh */ case    6:  		/* lis R12, -32236 */
		/* 821426ECh case    6:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8214);
		/* 821426ECh case    6:*/		return 0x821426F0;
		  /* 821426F0h */ case    7:  		/* ori R0, R0, 0 */
		/* 821426F0h case    7:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821426F0h case    7:*/		return 0x821426F4;
		  /* 821426F4h */ case    8:  		/* addi R12, R12, 9988 */
		/* 821426F4h case    8:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x2704);
		/* 821426F4h case    8:*/		return 0x821426F8;
		  /* 821426F8h */ case    9:  		/* add R12, R12, R0 */
		/* 821426F8h case    9:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 821426F8h case    9:*/		return 0x821426FC;
		  /* 821426FCh */ case   10:  		/* mtspr CTR, R12 */
		/* 821426FCh case   10:*/		regs.CTR = regs.R12;
		/* 821426FCh case   10:*/		return 0x82142700;
		  /* 82142700h */ case   11:  		/* bcctr 20, CR0_LT */
		/* 82142700h case   11:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82142700h case   11:*/		return 0x82142704;
		  /* 82142704h */ case   12:  		/* li R11, 0 */
		/* 82142704h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82142704h case   12:*/		return 0x82142708;
	}
	return 0x82142708;
} // Block from 821426D4h-82142708h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82142708h
// Function '?ViolatesPortConstraints@CVSProgram@D3DXShader@@MAAHPAVCInstruction@2@PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142708);
		  /* 82142708h */ case    0:  		/* cmplwi CR6, R29, 15 */
		/* 82142708h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000F);
		/* 82142708h case    0:*/		return 0x8214270C;
		  /* 8214270Ch */ case    1:  		/* bc 12, CR6_GT, 532 */
		/* 8214270Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x82142920;  }
		/* 8214270Ch case    1:*/		return 0x82142710;
		  /* 82142710h */ case    2:  		/* lis R10, -32768 */
		/* 82142710h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 82142710h case    2:*/		return 0x82142714;
		  /* 82142714h */ case    3:  		/* li R4, 31 */
		/* 82142714h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1F);
		/* 82142714h case    3:*/		return 0x82142718;
		  /* 82142718h */ case    4:  		/* rlwimi R10, R29, 16, 1, 15 */
		/* 82142718h case    4:*/		cpu::op::rlwimi<0,16,1,15>(regs,&regs.R10,regs.R29);
		/* 82142718h case    4:*/		return 0x8214271C;
		  /* 8214271Ch */ case    5:  		/* mr R3, R31 */
		/* 8214271Ch case    5:*/		regs.R3 = regs.R31;
		/* 8214271Ch case    5:*/		return 0x82142720;
		  /* 82142720h */ case    6:  		/* or R30, R10, R11 */
		/* 82142720h case    6:*/		cpu::op::or<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 82142720h case    6:*/		return 0x82142724;
		  /* 82142724h */ case    7:  		/* bl -312884 */
		/* 82142724h case    7:*/		regs.LR = 0x82142728; return 0x820F60F0;
		/* 82142724h case    7:*/		return 0x82142728;
		  /* 82142728h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82142728h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82142728h case    8:*/		return 0x8214272C;
		  /* 8214272Ch */ case    9:  		/* bc 12, CR0_LT, 508 */
		/* 8214272Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x82142928;  }
		/* 8214272Ch case    9:*/		return 0x82142730;
		  /* 82142730h */ case   10:  		/* mr R4, R30 */
		/* 82142730h case   10:*/		regs.R4 = regs.R30;
		/* 82142730h case   10:*/		return 0x82142734;
		  /* 82142734h */ case   11:  		/* mr R3, R31 */
		/* 82142734h case   11:*/		regs.R3 = regs.R31;
		/* 82142734h case   11:*/		return 0x82142738;
		  /* 82142738h */ case   12:  		/* bl -324552 */
		/* 82142738h case   12:*/		regs.LR = 0x8214273C; return 0x820F3370;
		/* 82142738h case   12:*/		return 0x8214273C;
		  /* 8214273Ch */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 8214273Ch case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214273Ch case   13:*/		return 0x82142740;
		  /* 82142740h */ case   14:  		/* bc 12, CR0_LT, 488 */
		/* 82142740h case   14:*/		if ( regs.CR[0].lt ) { return 0x82142928;  }
		/* 82142740h case   14:*/		return 0x82142744;
		  /* 82142744h */ case   15:  		/* lwz R11, <#[R31 + 204]> */
		/* 82142744h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CC) );
		/* 82142744h case   15:*/		return 0x82142748;
		  /* 82142748h */ case   16:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82142748h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82142748h case   16:*/		return 0x8214274C;
		  /* 8214274Ch */ case   17:  		/* bc 12, CR0_EQ, 228 */
		/* 8214274Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x82142830;  }
		/* 8214274Ch case   17:*/		return 0x82142750;
		  /* 82142750h */ case   18:  		/* addi R10, R1, 96 */
		/* 82142750h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 82142750h case   18:*/		return 0x82142754;
		  /* 82142754h */ case   19:  		/* lwz R9, <#[R31 + 8]> */
		/* 82142754h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82142754h case   19:*/		return 0x82142758;
		  /* 82142758h */ case   20:  		/* li R11, -1 */
		/* 82142758h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82142758h case   20:*/		return 0x8214275C;
		  /* 8214275Ch */ case   21:  		/* li R5, 0 */
		/* 8214275Ch case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8214275Ch case   21:*/		return 0x82142760;
		  /* 82142760h */ case   22:  		/* li R7, 0 */
		/* 82142760h case   22:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82142760h case   22:*/		return 0x82142764;
		  /* 82142764h */ case   23:  		/* cmplwi CR6, R9, 0 */
		/* 82142764h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82142764h case   23:*/		return 0x82142768;
		  /* 82142768h */ case   24:  		/* stw R11, <#[R10]> */
		/* 82142768h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82142768h case   24:*/		return 0x8214276C;
		  /* 8214276Ch */ case   25:  		/* stw R11, <#[R10 + 4]> */
		/* 8214276Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8214276Ch case   25:*/		return 0x82142770;
		  /* 82142770h */ case   26:  		/* stw R11, <#[R10 + 8]> */
		/* 82142770h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 82142770h case   26:*/		return 0x82142774;
		  /* 82142774h */ case   27:  		/* stw R11, <#[R10 + 12]> */
		/* 82142774h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82142774h case   27:*/		return 0x82142778;
		  /* 82142778h */ case   28:  		/* bc 4, CR6_GT, 100 */
		/* 82142778h case   28:*/		if ( !regs.CR[6].gt ) { return 0x821427DC;  }
		/* 82142778h case   28:*/		return 0x8214277C;
		  /* 8214277Ch */ case   29:  		/* lwz R9, <#[R31 + 20]> */
		/* 8214277Ch case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8214277Ch case   29:*/		return 0x82142780;
		  /* 82142780h */ case   30:  		/* li R10, 0 */
		/* 82142780h case   30:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82142780h case   30:*/		return 0x82142784;
		  /* 82142784h */ case   31:  		/* lwz R8, <#[R26 + 4]> */
		/* 82142784h case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + 0x00000004) );
		/* 82142784h case   31:*/		return 0x82142788;
		  /* 82142788h */ case   32:  		/* lwz R6, <#[R31 + 8]> */
		/* 82142788h case   32:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000008) );
		/* 82142788h case   32:*/		return 0x8214278C;
		  /* 8214278Ch */ case   33:  		/* lwzx R11, <#[R10 + R9]> */
		/* 8214278Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8214278Ch case   33:*/		return 0x82142790;
		  /* 82142790h */ case   34:  		/* lwz R4, <#[R11 + 4]> */
		/* 82142790h case   34:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 82142790h case   34:*/		return 0x82142794;
		  /* 82142794h */ case   35:  		/* cmplw CR6, R8, R4 */
		/* 82142794h case   35:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R4);
		/* 82142794h case   35:*/		return 0x82142798;
		  /* 82142798h */ case   36:  		/* bc 4, CR6_EQ, 52 */
		/* 82142798h case   36:*/		if ( !regs.CR[6].eq ) { return 0x821427CC;  }
		/* 82142798h case   36:*/		return 0x8214279C;
		  /* 8214279Ch */ case   37:  		/* lwz R4, <#[R26 + 8]> */
		/* 8214279Ch case   37:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000008) );
		/* 8214279Ch case   37:*/		return 0x821427A0;
		  /* 821427A0h */ case   38:  		/* lwz R3, <#[R11 + 8]> */
		/* 821427A0h case   38:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 821427A0h case   38:*/		return 0x821427A4;
		  /* 821427A4h */ case   39:  		/* cmplw CR6, R4, R3 */
		/* 821427A4h case   39:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 821427A4h case   39:*/		return 0x821427A8;
		  /* 821427A8h */ case   40:  		/* bc 4, CR6_EQ, 36 */
		/* 821427A8h case   40:*/		if ( !regs.CR[6].eq ) { return 0x821427CC;  }
		/* 821427A8h case   40:*/		return 0x821427AC;
		  /* 821427ACh */ case   41:  		/* lwz R4, <#[R26 + 12]> */
		/* 821427ACh case   41:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x0000000C) );
		/* 821427ACh case   41:*/		return 0x821427B0;
		  /* 821427B0h */ case   42:  		/* lwz R3, <#[R11 + 12]> */
		/* 821427B0h case   42:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821427B0h case   42:*/		return 0x821427B4;
		  /* 821427B4h */ case   43:  		/* cmplw CR6, R4, R3 */
		/* 821427B4h case   43:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 821427B4h case   43:*/		return 0x821427B8;
		  /* 821427B8h */ case   44:  		/* bc 4, CR6_EQ, 20 */
		/* 821427B8h case   44:*/		if ( !regs.CR[6].eq ) { return 0x821427CC;  }
		/* 821427B8h case   44:*/		return 0x821427BC;
		  /* 821427BCh */ case   45:  		/* lwz R11, <#[R11 + 16]> */
		/* 821427BCh case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821427BCh case   45:*/		return 0x821427C0;
		  /* 821427C0h */ case   46:  		/* addi R4, R1, 96 */
		/* 821427C0h case   46:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 821427C0h case   46:*/		return 0x821427C4;
		  /* 821427C4h */ case   47:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821427C4h case   47:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821427C4h case   47:*/		return 0x821427C8;
		  /* 821427C8h */ case   48:  		/* stwx R7, <#[R11 + R4]> */
		/* 821427C8h case   48:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 821427C8h case   48:*/		return 0x821427CC;
	}
	return 0x821427CC;
} // Block from 82142708h-821427CCh (49 instructions)

//////////////////////////////////////////////////////
// Block at 821427CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821427CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821427CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821427CC);
		  /* 821427CCh */ case    0:  		/* addi R7, R7, 1 */
		/* 821427CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821427CCh case    0:*/		return 0x821427D0;
		  /* 821427D0h */ case    1:  		/* addi R10, R10, 4 */
		/* 821427D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821427D0h case    1:*/		return 0x821427D4;
		  /* 821427D4h */ case    2:  		/* cmplw CR6, R7, R6 */
		/* 821427D4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 821427D4h case    2:*/		return 0x821427D8;
		  /* 821427D8h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 821427D8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214278C;  }
		/* 821427D8h case    3:*/		return 0x821427DC;
	}
	return 0x821427DC;
} // Block from 821427CCh-821427DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821427DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821427DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821427DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821427DC);
		  /* 821427DCh */ case    0:  		/* li R11, 4 */
		/* 821427DCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 821427DCh case    0:*/		return 0x821427E0;
		  /* 821427E0h */ case    1:  		/* addi R10, R1, 92 */
		/* 821427E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x5C);
		/* 821427E0h case    1:*/		return 0x821427E4;
		  /* 821427E4h */ case    2:  		/* addi R9, R1, 96 */
		/* 821427E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 821427E4h case    2:*/		return 0x821427E8;
		  /* 821427E8h */ case    3:  		/* mtspr CTR, R11 */
		/* 821427E8h case    3:*/		regs.CTR = regs.R11;
		/* 821427E8h case    3:*/		return 0x821427EC;
		  /* 821427ECh */ case    4:  		/* lwz R11, <#[R9]> */
		/* 821427ECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821427ECh case    4:*/		return 0x821427F0;
		  /* 821427F0h */ case    5:  		/* cmpwi CR6, R11, -1 */
		/* 821427F0h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 821427F0h case    5:*/		return 0x821427F4;
		  /* 821427F4h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 821427F4h case    6:*/		if ( regs.CR[6].eq ) { return 0x82142800;  }
		/* 821427F4h case    6:*/		return 0x821427F8;
		  /* 821427F8h */ case    7:  		/* stwu R11, <#[R10 + 4]> */
		/* 821427F8h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821427F8h case    7:*/		return 0x821427FC;
		  /* 821427FCh */ case    8:  		/* addi R5, R5, 1 */
		/* 821427FCh case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 821427FCh case    8:*/		return 0x82142800;
	}
	return 0x82142800;
} // Block from 821427DCh-82142800h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82142800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142800);
		  /* 82142800h */ case    0:  		/* addi R9, R9, 4 */
		/* 82142800h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82142800h case    0:*/		return 0x82142804;
		  /* 82142804h */ case    1:  		/* bc 16, CR0_LT, -24 */
		/* 82142804h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821427EC;  }
		/* 82142804h case    1:*/		return 0x82142808;
		  /* 82142808h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82142808h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142808h case    2:*/		return 0x8214280C;
		  /* 8214280Ch */ case    3:  		/* li R7, 1 */
		/* 8214280Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8214280Ch case    3:*/		return 0x82142810;
		  /* 82142810h */ case    4:  		/* addi R6, R1, 88 */
		/* 82142810h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 82142810h case    4:*/		return 0x82142814;
		  /* 82142814h */ case    5:  		/* addi R4, R1, 96 */
		/* 82142814h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82142814h case    5:*/		return 0x82142818;
		  /* 82142818h */ case    6:  		/* mr R3, R31 */
		/* 82142818h case    6:*/		regs.R3 = regs.R31;
		/* 82142818h case    6:*/		return 0x8214281C;
		  /* 8214281Ch */ case    7:  		/* lwz R11, <#[R11 + 324]> */
		/* 8214281Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000144) );
		/* 8214281Ch case    7:*/		return 0x82142820;
		  /* 82142820h */ case    8:  		/* mtspr CTR, R11 */
		/* 82142820h case    8:*/		regs.CTR = regs.R11;
		/* 82142820h case    8:*/		return 0x82142824;
		  /* 82142824h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82142824h case    9:*/		if ( 1 ) { regs.LR = 0x82142828; return (uint32)regs.CTR; }
		/* 82142824h case    9:*/		return 0x82142828;
		  /* 82142828h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82142828h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82142828h case   10:*/		return 0x8214282C;
		  /* 8214282Ch */ case   11:  		/* bc 12, CR0_LT, 252 */
		/* 8214282Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x82142928;  }
		/* 8214282Ch case   11:*/		return 0x82142830;
	}
	return 0x82142830;
} // Block from 82142800h-82142830h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82142830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142830);
		  /* 82142830h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82142830h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142830h case    0:*/		return 0x82142834;
		  /* 82142834h */ case    1:  		/* addi R6, R1, 80 */
		/* 82142834h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82142834h case    1:*/		return 0x82142838;
		  /* 82142838h */ case    2:  		/* addi R5, R1, 84 */
		/* 82142838h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82142838h case    2:*/		return 0x8214283C;
		  /* 8214283Ch */ case    3:  		/* mr R4, R26 */
		/* 8214283Ch case    3:*/		regs.R4 = regs.R26;
		/* 8214283Ch case    3:*/		return 0x82142840;
		  /* 82142840h */ case    4:  		/* mr R3, R31 */
		/* 82142840h case    4:*/		regs.R3 = regs.R31;
		/* 82142840h case    4:*/		return 0x82142844;
		  /* 82142844h */ case    5:  		/* lwz R11, <#[R11 + 348]> */
		/* 82142844h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000015C) );
		/* 82142844h case    5:*/		return 0x82142848;
		  /* 82142848h */ case    6:  		/* mtspr CTR, R11 */
		/* 82142848h case    6:*/		regs.CTR = regs.R11;
		/* 82142848h case    6:*/		return 0x8214284C;
		  /* 8214284Ch */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8214284Ch case    7:*/		if ( 1 ) { regs.LR = 0x82142850; return (uint32)regs.CTR; }
		/* 8214284Ch case    7:*/		return 0x82142850;
		  /* 82142850h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82142850h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82142850h case    8:*/		return 0x82142854;
		  /* 82142854h */ case    9:  		/* bc 12, CR0_LT, 212 */
		/* 82142854h case    9:*/		if ( regs.CR[0].lt ) { return 0x82142928;  }
		/* 82142854h case    9:*/		return 0x82142858;
		  /* 82142858h */ case   10:  		/* lwz R11, <#[R1 + 80]> */
		/* 82142858h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82142858h case   10:*/		return 0x8214285C;
		  /* 8214285Ch */ case   11:  		/* lis R10, -128 */
		/* 8214285Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFF80);
		/* 8214285Ch case   11:*/		return 0x82142860;
		  /* 82142860h */ case   12:  		/* lwz R9, <#[R31]> */
		/* 82142860h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82142860h case   12:*/		return 0x82142864;
		  /* 82142864h */ case   13:  		/* li R6, 0 */
		/* 82142864h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82142864h case   13:*/		return 0x82142868;
		  /* 82142868h */ case   14:  		/* rlwimi R10, R11, 20, 9, 11 */
		/* 82142868h case   14:*/		cpu::op::rlwimi<0,20,9,11>(regs,&regs.R10,regs.R11);
		/* 82142868h case   14:*/		return 0x8214286C;
		  /* 8214286Ch */ case   15:  		/* lwz R7, <#[R1 + 84]> */
		/* 8214286Ch case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 8214286Ch case   15:*/		return 0x82142870;
		  /* 82142870h */ case   16:  		/* rlwinm R8, R11, 0, 27, 28 */
		/* 82142870h case   16:*/		cpu::op::rlwinm<0,0,27,28>(regs,&regs.R8,regs.R11);
		/* 82142870h case   16:*/		return 0x82142874;
		  /* 82142874h */ case   17:  		/* rlwinm R11, R7, 0, 21, 31 */
		/* 82142874h case   17:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R11,regs.R7);
		/* 82142874h case   17:*/		return 0x82142878;
		  /* 82142878h */ case   18:  		/* or R10, R10, R8 */
		/* 82142878h case   18:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82142878h case   18:*/		return 0x8214287C;
		  /* 8214287Ch */ case   19:  		/* lwz R9, <#[R9 + 312]> */
		/* 8214287Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000138) );
		/* 8214287Ch case   19:*/		return 0x82142880;
		  /* 82142880h */ case   20:  		/* lis R5, 15 */
		/* 82142880h case   20:*/		cpu::op::lis<0>(regs,&regs.R5,0xF);
		/* 82142880h case   20:*/		return 0x82142884;
		  /* 82142884h */ case   21:  		/* rlwinm R10, R10, 8, 0, 23 */
		/* 82142884h case   21:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R10);
		/* 82142884h case   21:*/		return 0x82142888;
		  /* 82142888h */ case   22:  		/* mr R3, R31 */
		/* 82142888h case   22:*/		regs.R3 = regs.R31;
		/* 82142888h case   22:*/		return 0x8214288C;
		  /* 8214288Ch */ case   23:  		/* or R4, R10, R11 */
		/* 8214288Ch case   23:*/		cpu::op::or<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 8214288Ch case   23:*/		return 0x82142890;
		  /* 82142890h */ case   24:  		/* mtspr CTR, R9 */
		/* 82142890h case   24:*/		regs.CTR = regs.R9;
		/* 82142890h case   24:*/		return 0x82142894;
		  /* 82142894h */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 82142894h case   25:*/		if ( 1 ) { regs.LR = 0x82142898; return (uint32)regs.CTR; }
		/* 82142894h case   25:*/		return 0x82142898;
		  /* 82142898h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 82142898h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82142898h case   26:*/		return 0x8214289C;
		  /* 8214289Ch */ case   27:  		/* bc 12, CR0_LT, 140 */
		/* 8214289Ch case   27:*/		if ( regs.CR[0].lt ) { return 0x82142928;  }
		/* 8214289Ch case   27:*/		return 0x821428A0;
		  /* 821428A0h */ case   28:  		/* lwz R11, <#[R31]> */
		/* 821428A0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821428A0h case   28:*/		return 0x821428A4;
		  /* 821428A4h */ case   29:  		/* mr R3, R31 */
		/* 821428A4h case   29:*/		regs.R3 = regs.R31;
		/* 821428A4h case   29:*/		return 0x821428A8;
		  /* 821428A8h */ case   30:  		/* lwz R11, <#[R11 + 308]> */
		/* 821428A8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000134) );
		/* 821428A8h case   30:*/		return 0x821428AC;
		  /* 821428ACh */ case   31:  		/* mtspr CTR, R11 */
		/* 821428ACh case   31:*/		regs.CTR = regs.R11;
		/* 821428ACh case   31:*/		return 0x821428B0;
		  /* 821428B0h */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 821428B0h case   32:*/		if ( 1 ) { regs.LR = 0x821428B4; return (uint32)regs.CTR; }
		/* 821428B0h case   32:*/		return 0x821428B4;
		  /* 821428B4h */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 821428B4h case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821428B4h case   33:*/		return 0x821428B8;
		  /* 821428B8h */ case   34:  		/* bc 12, CR0_LT, 112 */
		/* 821428B8h case   34:*/		if ( regs.CR[0].lt ) { return 0x82142928;  }
		/* 821428B8h case   34:*/		return 0x821428BC;
		  /* 821428BCh */ case   35:  		/* mr R3, R31 */
		/* 821428BCh case   35:*/		regs.R3 = regs.R31;
		/* 821428BCh case   35:*/		return 0x821428C0;
		  /* 821428C0h */ case   36:  		/* bl -348088 */
		/* 821428C0h case   36:*/		regs.LR = 0x821428C4; return 0x820ED908;
		/* 821428C0h case   36:*/		return 0x821428C4;
		  /* 821428C4h */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 821428C4h case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821428C4h case   37:*/		return 0x821428C8;
		  /* 821428C8h */ case   38:  		/* bc 12, CR0_LT, 96 */
		/* 821428C8h case   38:*/		if ( regs.CR[0].lt ) { return 0x82142928;  }
		/* 821428C8h case   38:*/		return 0x821428CC;
		  /* 821428CCh */ case   39:  		/* cmplwi CR6, R25, 0 */
		/* 821428CCh case   39:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821428CCh case   39:*/		return 0x821428D0;
		  /* 821428D0h */ case   40:  		/* bc 12, CR6_EQ, -852 */
		/* 821428D0h case   40:*/		if ( regs.CR[6].eq ) { return 0x8214257C;  }
		/* 821428D0h case   40:*/		return 0x821428D4;
		  /* 821428D4h */ case   41:  		/* stw R30, <#[R25]> */
		/* 821428D4h case   41:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R25 + 0x00000000) );
		/* 821428D4h case   41:*/		return 0x821428D8;
		  /* 821428D8h */ case   42:  		/* b -860 */
		/* 821428D8h case   42:*/		return 0x8214257C;
		/* 821428D8h case   42:*/		return 0x821428DC;
		  /* 821428DCh */ case   43:  		/* li R11, 1 */
		/* 821428DCh case   43:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821428DCh case   43:*/		return 0x821428E0;
		  /* 821428E0h */ case   44:  		/* b -472 */
		/* 821428E0h case   44:*/		return 0x82142708;
		/* 821428E0h case   44:*/		return 0x821428E4;
		  /* 821428E4h */ case   45:  		/* li R11, 2 */
		/* 821428E4h case   45:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 821428E4h case   45:*/		return 0x821428E8;
		  /* 821428E8h */ case   46:  		/* b -480 */
		/* 821428E8h case   46:*/		return 0x82142708;
		/* 821428E8h case   46:*/		return 0x821428EC;
		  /* 821428ECh */ case   47:  		/* li R11, 3 */
		/* 821428ECh case   47:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821428ECh case   47:*/		return 0x821428F0;
		  /* 821428F0h */ case   48:  		/* b -488 */
		/* 821428F0h case   48:*/		return 0x82142708;
		/* 821428F0h case   48:*/		return 0x821428F4;
		  /* 821428F4h */ case   49:  		/* li R11, 4 */
		/* 821428F4h case   49:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 821428F4h case   49:*/		return 0x821428F8;
		  /* 821428F8h */ case   50:  		/* b -496 */
		/* 821428F8h case   50:*/		return 0x82142708;
		/* 821428F8h case   50:*/		return 0x821428FC;
		  /* 821428FCh */ case   51:  		/* li R11, 5 */
		/* 821428FCh case   51:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 821428FCh case   51:*/		return 0x82142900;
		  /* 82142900h */ case   52:  		/* b -504 */
		/* 82142900h case   52:*/		return 0x82142708;
		/* 82142900h case   52:*/		return 0x82142904;
		  /* 82142904h */ case   53:  		/* li R11, 6 */
		/* 82142904h case   53:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 82142904h case   53:*/		return 0x82142908;
		  /* 82142908h */ case   54:  		/* b -512 */
		/* 82142908h case   54:*/		return 0x82142708;
		/* 82142908h case   54:*/		return 0x8214290C;
		  /* 8214290Ch */ case   55:  		/* li R11, 7 */
		/* 8214290Ch case   55:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 8214290Ch case   55:*/		return 0x82142910;
		  /* 82142910h */ case   56:  		/* b -520 */
		/* 82142910h case   56:*/		return 0x82142708;
		/* 82142910h case   56:*/		return 0x82142914;
		  /* 82142914h */ case   57:  		/* li R11, 8 */
		/* 82142914h case   57:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 82142914h case   57:*/		return 0x82142918;
		  /* 82142918h */ case   58:  		/* cmplwi CR6, R29, 0 */
		/* 82142918h case   58:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82142918h case   58:*/		return 0x8214291C;
		  /* 8214291Ch */ case   59:  		/* bc 12, CR6_EQ, -524 */
		/* 8214291Ch case   59:*/		if ( regs.CR[6].eq ) { return 0x82142710;  }
		/* 8214291Ch case   59:*/		return 0x82142920;
	}
	return 0x82142920;
} // Block from 82142830h-82142920h (60 instructions)

//////////////////////////////////////////////////////
// Block at 82142920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142920);
		  /* 82142920h */ case    0:  		/* lis R3, -32768 */
		/* 82142920h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82142920h case    0:*/		return 0x82142924;
		  /* 82142924h */ case    1:  		/* ori R3, R3, 16389 */
		/* 82142924h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82142924h case    1:*/		return 0x82142928;
	}
	return 0x82142928;
} // Block from 82142920h-82142928h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82142928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142928);
		  /* 82142928h */ case    0:  		/* addi R1, R1, 192 */
		/* 82142928h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82142928h case    0:*/		return 0x8214292C;
		  /* 8214292Ch */ case    1:  		/* b -726672 */
		/* 8214292Ch case    1:*/		return 0x8209129C;
		/* 8214292Ch case    1:*/		return 0x82142930;
		  /* 82142930h */ case    2:  		/* li R11, 9 */
		/* 82142930h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 82142930h case    2:*/		return 0x82142934;
		  /* 82142934h */ case    3:  		/* b -556 */
		/* 82142934h case    3:*/		return 0x82142708;
		/* 82142934h case    3:*/		return 0x82142938;
		  /* 82142938h */ case    4:  		/* li R11, 10 */
		/* 82142938h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0xA);
		/* 82142938h case    4:*/		return 0x8214293C;
		  /* 8214293Ch */ case    5:  		/* b -564 */
		/* 8214293Ch case    5:*/		return 0x82142708;
		/* 8214293Ch case    5:*/		return 0x82142940;
		  /* 82142940h */ case    6:  		/* li R11, 11 */
		/* 82142940h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0xB);
		/* 82142940h case    6:*/		return 0x82142944;
		  /* 82142944h */ case    7:  		/* b -572 */
		/* 82142944h case    7:*/		return 0x82142708;
		/* 82142944h case    7:*/		return 0x82142948;
		  /* 82142948h */ case    8:  		/* li R11, 12 */
		/* 82142948h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 82142948h case    8:*/		return 0x8214294C;
		  /* 8214294Ch */ case    9:  		/* b -580 */
		/* 8214294Ch case    9:*/		return 0x82142708;
		/* 8214294Ch case    9:*/		return 0x82142950;
		  /* 82142950h */ case   10:  		/* li R11, 13 */
		/* 82142950h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0xD);
		/* 82142950h case   10:*/		return 0x82142954;
		  /* 82142954h */ case   11:  		/* b -588 */
		/* 82142954h case   11:*/		return 0x82142708;
		/* 82142954h case   11:*/		return 0x82142958;
		  /* 82142958h */ case   12:  		/* li R3, 1 */
		/* 82142958h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82142958h case   12:*/		return 0x8214295C;
		  /* 8214295Ch */ case   13:  		/* b -52 */
		/* 8214295Ch case   13:*/		return 0x82142928;
		/* 8214295Ch case   13:*/		return 0x82142960;
	}
	return 0x82142960;
} // Block from 82142928h-82142960h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82142960h
// Function '?EmitInstructions@CVSProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142960);
		  /* 82142960h */ case    0:  		/* mfspr R12, LR */
		/* 82142960h case    0:*/		regs.R12 = regs.LR;
		/* 82142960h case    0:*/		return 0x82142964;
		  /* 82142964h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82142964h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82142964h case    1:*/		return 0x82142968;
		  /* 82142968h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82142968h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82142968h case    2:*/		return 0x8214296C;
		  /* 8214296Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8214296Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214296Ch case    3:*/		return 0x82142970;
		  /* 82142970h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82142970h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82142970h case    4:*/		return 0x82142974;
		  /* 82142974h */ case    5:  		/* mr R31, R3 */
		/* 82142974h case    5:*/		regs.R31 = regs.R3;
		/* 82142974h case    5:*/		return 0x82142978;
		  /* 82142978h */ case    6:  		/* mr R30, R4 */
		/* 82142978h case    6:*/		regs.R30 = regs.R4;
		/* 82142978h case    6:*/		return 0x8214297C;
		  /* 8214297Ch */ case    7:  		/* bl -347500 */
		/* 8214297Ch case    7:*/		regs.LR = 0x82142980; return 0x820EDC10;
		/* 8214297Ch case    7:*/		return 0x82142980;
		  /* 82142980h */ case    8:  		/* lis R11, -32253 */
		/* 82142980h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82142980h case    8:*/		return 0x82142984;
		  /* 82142984h */ case    9:  		/* stw R30, <#[R31 + 224]> */
		/* 82142984h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000000E0) );
		/* 82142984h case    9:*/		return 0x82142988;
		  /* 82142988h */ case   10:  		/* li R10, 0 */
		/* 82142988h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82142988h case   10:*/		return 0x8214298C;
		  /* 8214298Ch */ case   11:  		/* addi R11, R11, 24384 */
		/* 8214298Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5F40);
		/* 8214298Ch case   11:*/		return 0x82142990;
		  /* 82142990h */ case   12:  		/* stw R10, <#[R31 + 508]> */
		/* 82142990h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000001FC) );
		/* 82142990h case   12:*/		return 0x82142994;
		  /* 82142994h */ case   13:  		/* mr R3, R31 */
		/* 82142994h case   13:*/		regs.R3 = regs.R31;
		/* 82142994h case   13:*/		return 0x82142998;
		  /* 82142998h */ case   14:  		/* stw R11, <#[R31]> */
		/* 82142998h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82142998h case   14:*/		return 0x8214299C;
		  /* 8214299Ch */ case   15:  		/* addi R1, R1, 112 */
		/* 8214299Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214299Ch case   15:*/		return 0x821429A0;
		  /* 821429A0h */ case   16:  		/* lwz R12, <#[R1 - 8]> */
		/* 821429A0h case   16:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821429A0h case   16:*/		return 0x821429A4;
		  /* 821429A4h */ case   17:  		/* mtspr LR, R12 */
		/* 821429A4h case   17:*/		regs.LR = regs.R12;
		/* 821429A4h case   17:*/		return 0x821429A8;
		  /* 821429A8h */ case   18:  		/* ld R30, <#[R1 - 24]> */
		/* 821429A8h case   18:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821429A8h case   18:*/		return 0x821429AC;
		  /* 821429ACh */ case   19:  		/* ld R31, <#[R1 - 16]> */
		/* 821429ACh case   19:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821429ACh case   19:*/		return 0x821429B0;
		  /* 821429B0h */ case   20:  		/* bclr 20, CR0_LT */
		/* 821429B0h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821429B0h case   20:*/		return 0x821429B4;
	}
	return 0x821429B4;
} // Block from 82142960h-821429B4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821429B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821429B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821429B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821429B4);
		  /* 821429B4h */ case    0:  		/* nop */
		/* 821429B4h case    0:*/		cpu::op::nop();
		/* 821429B4h case    0:*/		return 0x821429B8;
	}
	return 0x821429B8;
} // Block from 821429B4h-821429B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821429B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821429B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821429B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821429B8);
		  /* 821429B8h */ case    0:  		/* mfspr R12, LR */
		/* 821429B8h case    0:*/		regs.R12 = regs.LR;
		/* 821429B8h case    0:*/		return 0x821429BC;
		  /* 821429BCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821429BCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821429BCh case    1:*/		return 0x821429C0;
		  /* 821429C0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821429C0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821429C0h case    2:*/		return 0x821429C4;
		  /* 821429C4h */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 821429C4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821429C4h case    3:*/		return 0x821429C8;
		  /* 821429C8h */ case    4:  		/* lis R11, -32255 */
		/* 821429C8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821429C8h case    4:*/		return 0x821429CC;
		  /* 821429CCh */ case    5:  		/* mr R31, R3 */
		/* 821429CCh case    5:*/		regs.R31 = regs.R3;
		/* 821429CCh case    5:*/		return 0x821429D0;
		  /* 821429D0h */ case    6:  		/* addi R5, R1, 80 */
		/* 821429D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821429D0h case    6:*/		return 0x821429D4;
		  /* 821429D4h */ case    7:  		/* addi R3, R11, -15580 */
		/* 821429D4h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFFC324);
		/* 821429D4h case    7:*/		return 0x821429D8;
		  /* 821429D8h */ case    8:  		/* li R4, 0 */
		/* 821429D8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821429D8h case    8:*/		return 0x821429DC;
		  /* 821429DCh */ case    9:  		/* bl -670796 */
		/* 821429DCh case    9:*/		regs.LR = 0x821429E0; return 0x8209ED90;
		/* 821429DCh case    9:*/		return 0x821429E0;
		  /* 821429E0h */ case   10:  		/* li R11, 64 */
		/* 821429E0h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x40);
		/* 821429E0h case   10:*/		return 0x821429E4;
		  /* 821429E4h */ case   11:  		/* li R10, 0 */
		/* 821429E4h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821429E4h case   11:*/		return 0x821429E8;
		  /* 821429E8h */ case   12:  		/* stw R11, <#[R31 + 40]> */
		/* 821429E8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821429E8h case   12:*/		return 0x821429EC;
		  /* 821429ECh */ case   13:  		/* li R9, 8192 */
		/* 821429ECh case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x2000);
		/* 821429ECh case   13:*/		return 0x821429F0;
		  /* 821429F0h */ case   14:  		/* stw R11, <#[R31 + 44]> */
		/* 821429F0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821429F0h case   14:*/		return 0x821429F4;
		  /* 821429F4h */ case   15:  		/* li R3, 0 */
		/* 821429F4h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821429F4h case   15:*/		return 0x821429F8;
		  /* 821429F8h */ case   16:  		/* stw R10, <#[R31 + 48]> */
		/* 821429F8h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821429F8h case   16:*/		return 0x821429FC;
		  /* 821429FCh */ case   17:  		/* stw R9, <#[R31 + 56]> */
		/* 821429FCh case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000038) );
		/* 821429FCh case   17:*/		return 0x82142A00;
		  /* 82142A00h */ case   18:  		/* lwz R11, <#[R31 + 108]> */
		/* 82142A00h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 82142A00h case   18:*/		return 0x82142A04;
		  /* 82142A04h */ case   19:  		/* lwz R10, <#[R31 + 112]> */
		/* 82142A04h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000070) );
		/* 82142A04h case   19:*/		return 0x82142A08;
		  /* 82142A08h */ case   20:  		/* rlwinm R11, R11, 0, 10, 8 */
		/* 82142A08h case   20:*/		cpu::op::rlwinm<0,0,10,8>(regs,&regs.R11,regs.R11);
		/* 82142A08h case   20:*/		return 0x82142A0C;
		  /* 82142A0Ch */ case   21:  		/* lwz R9, <#[R1 + 84]> */
		/* 82142A0Ch case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 82142A0Ch case   21:*/		return 0x82142A10;
		  /* 82142A10h */ case   22:  		/* oris R10, R10, 32800 */
		/* 82142A10h case   22:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x8020);
		/* 82142A10h case   22:*/		return 0x82142A14;
		  /* 82142A14h */ case   23:  		/* rlwinm R11, R11, 0, 2, 0 */
		/* 82142A14h case   23:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R11,regs.R11);
		/* 82142A14h case   23:*/		return 0x82142A18;
		  /* 82142A18h */ case   24:  		/* stw R10, <#[R31 + 112]> */
		/* 82142A18h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000070) );
		/* 82142A18h case   24:*/		return 0x82142A1C;
		  /* 82142A1Ch */ case   25:  		/* oris R11, R11, 9248 */
		/* 82142A1Ch case   25:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2420);
		/* 82142A1Ch case   25:*/		return 0x82142A20;
		  /* 82142A20h */ case   26:  		/* stw R9, <#[R31 + 268]> */
		/* 82142A20h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000010C) );
		/* 82142A20h case   26:*/		return 0x82142A24;
		  /* 82142A24h */ case   27:  		/* stw R11, <#[R31 + 108]> */
		/* 82142A24h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 82142A24h case   27:*/		return 0x82142A28;
		  /* 82142A28h */ case   28:  		/* addi R1, R1, 112 */
		/* 82142A28h case   28:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82142A28h case   28:*/		return 0x82142A2C;
		  /* 82142A2Ch */ case   29:  		/* lwz R12, <#[R1 - 8]> */
		/* 82142A2Ch case   29:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82142A2Ch case   29:*/		return 0x82142A30;
		  /* 82142A30h */ case   30:  		/* mtspr LR, R12 */
		/* 82142A30h case   30:*/		regs.LR = regs.R12;
		/* 82142A30h case   30:*/		return 0x82142A34;
		  /* 82142A34h */ case   31:  		/* ld R31, <#[R1 - 16]> */
		/* 82142A34h case   31:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82142A34h case   31:*/		return 0x82142A38;
		  /* 82142A38h */ case   32:  		/* bclr 20, CR0_LT */
		/* 82142A38h case   32:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82142A38h case   32:*/		return 0x82142A3C;
	}
	return 0x82142A3C;
} // Block from 821429B8h-82142A3Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 82142A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142A3C);
		  /* 82142A3Ch */ case    0:  		/* nop */
		/* 82142A3Ch case    0:*/		cpu::op::nop();
		/* 82142A3Ch case    0:*/		return 0x82142A40;
	}
	return 0x82142A40;
} // Block from 82142A3Ch-82142A40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82142A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142A40);
		  /* 82142A40h */ case    0:  		/* mfspr R12, LR */
		/* 82142A40h case    0:*/		regs.R12 = regs.LR;
		/* 82142A40h case    0:*/		return 0x82142A44;
		  /* 82142A44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82142A44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82142A44h case    1:*/		return 0x82142A48;
		  /* 82142A48h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82142A48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82142A48h case    2:*/		return 0x82142A4C;
		  /* 82142A4Ch */ case    3:  		/* lwz R11, <#[R4 + 4]> */
		/* 82142A4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82142A4Ch case    3:*/		return 0x82142A50;
		  /* 82142A50h */ case    4:  		/* lwz R10, <#[R3 + 16]> */
		/* 82142A50h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82142A50h case    4:*/		return 0x82142A54;
		  /* 82142A54h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82142A54h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82142A54h case    5:*/		return 0x82142A58;
		  /* 82142A58h */ case    6:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82142A58h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82142A58h case    6:*/		return 0x82142A5C;
		  /* 82142A5Ch */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 82142A5Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82142A5Ch case    7:*/		return 0x82142A60;
		  /* 82142A60h */ case    8:  		/* rlwinm. R10, R11, 0, 23, 23 */
		/* 82142A60h case    8:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R11);
		/* 82142A60h case    8:*/		return 0x82142A64;
		  /* 82142A64h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 82142A64h case    9:*/		if ( regs.CR[0].eq ) { return 0x82142A74;  }
		/* 82142A64h case    9:*/		return 0x82142A68;
		  /* 82142A68h */ case   10:  		/* li R4, 1 */
		/* 82142A68h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82142A68h case   10:*/		return 0x82142A6C;
		  /* 82142A6Ch */ case   11:  		/* bl -325372 */
		/* 82142A6Ch case   11:*/		regs.LR = 0x82142A70; return 0x820F3370;
		/* 82142A6Ch case   11:*/		return 0x82142A70;
		  /* 82142A70h */ case   12:  		/* b 228 */
		/* 82142A70h case   12:*/		return 0x82142B54;
		/* 82142A70h case   12:*/		return 0x82142A74;
	}
	return 0x82142A74;
} // Block from 82142A40h-82142A74h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82142A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142A74);
		  /* 82142A74h */ case    0:  		/* rlwinm. R10, R11, 0, 22, 22 */
		/* 82142A74h case    0:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R10,regs.R11);
		/* 82142A74h case    0:*/		return 0x82142A78;
		  /* 82142A78h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82142A78h case    1:*/		if ( regs.CR[0].eq ) { return 0x82142A8C;  }
		/* 82142A78h case    1:*/		return 0x82142A7C;
		  /* 82142A7Ch */ case    2:  		/* rlwinm. R9, R11, 0, 24, 24 */
		/* 82142A7Ch case    2:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R9,regs.R11);
		/* 82142A7Ch case    2:*/		return 0x82142A80;
		  /* 82142A80h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82142A80h case    3:*/		if ( regs.CR[0].eq ) { return 0x82142A8C;  }
		/* 82142A80h case    3:*/		return 0x82142A84;
		  /* 82142A84h */ case    4:  		/* li R4, 9 */
		/* 82142A84h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x9);
		/* 82142A84h case    4:*/		return 0x82142A88;
		  /* 82142A88h */ case    5:  		/* b -28 */
		/* 82142A88h case    5:*/		return 0x82142A6C;
		/* 82142A88h case    5:*/		return 0x82142A8C;
	}
	return 0x82142A8C;
} // Block from 82142A74h-82142A8Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82142A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142A8C);
		  /* 82142A8Ch */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 82142A8Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82142A8Ch case    0:*/		return 0x82142A90;
		  /* 82142A90h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82142A90h case    1:*/		if ( regs.CR[6].eq ) { return 0x82142A9C;  }
		/* 82142A90h case    1:*/		return 0x82142A94;
		  /* 82142A94h */ case    2:  		/* li R4, 2 */
		/* 82142A94h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82142A94h case    2:*/		return 0x82142A98;
		  /* 82142A98h */ case    3:  		/* b -44 */
		/* 82142A98h case    3:*/		return 0x82142A6C;
		/* 82142A98h case    3:*/		return 0x82142A9C;
	}
	return 0x82142A9C;
} // Block from 82142A8Ch-82142A9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82142A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142A9C);
		  /* 82142A9Ch */ case    0:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 82142A9Ch case    0:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 82142A9Ch case    0:*/		return 0x82142AA0;
		  /* 82142AA0h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 82142AA0h case    1:*/		if ( regs.CR[0].eq ) { return 0x82142AAC;  }
		/* 82142AA0h case    1:*/		return 0x82142AA4;
		  /* 82142AA4h */ case    2:  		/* li R4, 3 */
		/* 82142AA4h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 82142AA4h case    2:*/		return 0x82142AA8;
		  /* 82142AA8h */ case    3:  		/* b -60 */
		/* 82142AA8h case    3:*/		return 0x82142A6C;
		/* 82142AA8h case    3:*/		return 0x82142AAC;
	}
	return 0x82142AAC;
} // Block from 82142A9Ch-82142AACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82142AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142AAC);
		  /* 82142AACh */ case    0:  		/* andi. R10, R11, 8224 */
		/* 82142AACh case    0:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R11,0x2020);
		/* 82142AACh case    0:*/		return 0x82142AB0;
		  /* 82142AB0h */ case    1:  		/* cmplwi CR6, R10, 8224 */
		/* 82142AB0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002020);
		/* 82142AB0h case    1:*/		return 0x82142AB4;
		  /* 82142AB4h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 82142AB4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82142AC0;  }
		/* 82142AB4h case    2:*/		return 0x82142AB8;
		  /* 82142AB8h */ case    3:  		/* li R4, 5 */
		/* 82142AB8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 82142AB8h case    3:*/		return 0x82142ABC;
		  /* 82142ABCh */ case    4:  		/* b -80 */
		/* 82142ABCh case    4:*/		return 0x82142A6C;
		/* 82142ABCh case    4:*/		return 0x82142AC0;
	}
	return 0x82142AC0;
} // Block from 82142AACh-82142AC0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82142AC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142AC0);
		  /* 82142AC0h */ case    0:  		/* lis R10, 4 */
		/* 82142AC0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x4);
		/* 82142AC0h case    0:*/		return 0x82142AC4;
		  /* 82142AC4h */ case    1:  		/* rlwinm R9, R11, 0, 13, 26 */
		/* 82142AC4h case    1:*/		cpu::op::rlwinm<0,0,13,26>(regs,&regs.R9,regs.R11);
		/* 82142AC4h case    1:*/		return 0x82142AC8;
		  /* 82142AC8h */ case    2:  		/* ori R10, R10, 32 */
		/* 82142AC8h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x20);
		/* 82142AC8h case    2:*/		return 0x82142ACC;
		  /* 82142ACCh */ case    3:  		/* rlwinm R9, R9, 0, 26, 13 */
		/* 82142ACCh case    3:*/		cpu::op::rlwinm<0,0,26,13>(regs,&regs.R9,regs.R9);
		/* 82142ACCh case    3:*/		return 0x82142AD0;
		  /* 82142AD0h */ case    4:  		/* cmplw CR6, R9, R10 */
		/* 82142AD0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82142AD0h case    4:*/		return 0x82142AD4;
		  /* 82142AD4h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 82142AD4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82142AE0;  }
		/* 82142AD4h case    5:*/		return 0x82142AD8;
		  /* 82142AD8h */ case    6:  		/* li R4, 6 */
		/* 82142AD8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x6);
		/* 82142AD8h case    6:*/		return 0x82142ADC;
		  /* 82142ADCh */ case    7:  		/* b -112 */
		/* 82142ADCh case    7:*/		return 0x82142A6C;
		/* 82142ADCh case    7:*/		return 0x82142AE0;
	}
	return 0x82142AE0;
} // Block from 82142AC0h-82142AE0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82142AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142AE0);
		  /* 82142AE0h */ case    0:  		/* rlwinm. R10, R11, 0, 26, 26 */
		/* 82142AE0h case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R11);
		/* 82142AE0h case    0:*/		return 0x82142AE4;
		  /* 82142AE4h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 82142AE4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82142AF0;  }
		/* 82142AE4h case    1:*/		return 0x82142AE8;
		  /* 82142AE8h */ case    2:  		/* li R4, 4 */
		/* 82142AE8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82142AE8h case    2:*/		return 0x82142AEC;
		  /* 82142AECh */ case    3:  		/* b -128 */
		/* 82142AECh case    3:*/		return 0x82142A6C;
		/* 82142AECh case    3:*/		return 0x82142AF0;
	}
	return 0x82142AF0;
} // Block from 82142AE0h-82142AF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82142AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142AF0);
		  /* 82142AF0h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82142AF0h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82142AF0h case    0:*/		return 0x82142AF4;
		  /* 82142AF4h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82142AF4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82142B08;  }
		/* 82142AF4h case    1:*/		return 0x82142AF8;
		  /* 82142AF8h */ case    2:  		/* rlwinm. R10, R11, 0, 30, 30 */
		/* 82142AF8h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R11);
		/* 82142AF8h case    2:*/		return 0x82142AFC;
		  /* 82142AFCh */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82142AFCh case    3:*/		if ( regs.CR[0].eq ) { return 0x82142B08;  }
		/* 82142AFCh case    3:*/		return 0x82142B00;
		  /* 82142B00h */ case    4:  		/* li R4, 7 */
		/* 82142B00h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x7);
		/* 82142B00h case    4:*/		return 0x82142B04;
		  /* 82142B04h */ case    5:  		/* b -152 */
		/* 82142B04h case    5:*/		return 0x82142A6C;
		/* 82142B04h case    5:*/		return 0x82142B08;
	}
	return 0x82142B08;
} // Block from 82142AF0h-82142B08h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82142B08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142B08);
		  /* 82142B08h */ case    0:  		/* rlwinm. R10, R11, 0, 30, 30 */
		/* 82142B08h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R11);
		/* 82142B08h case    0:*/		return 0x82142B0C;
		  /* 82142B0Ch */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82142B0Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82142B20;  }
		/* 82142B0Ch case    1:*/		return 0x82142B10;
		  /* 82142B10h */ case    2:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 82142B10h case    2:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 82142B10h case    2:*/		return 0x82142B14;
		  /* 82142B14h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82142B14h case    3:*/		if ( regs.CR[0].eq ) { return 0x82142B20;  }
		/* 82142B14h case    3:*/		return 0x82142B18;
		  /* 82142B18h */ case    4:  		/* li R4, 8 */
		/* 82142B18h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82142B18h case    4:*/		return 0x82142B1C;
		  /* 82142B1Ch */ case    5:  		/* b -176 */
		/* 82142B1Ch case    5:*/		return 0x82142A6C;
		/* 82142B1Ch case    5:*/		return 0x82142B20;
	}
	return 0x82142B20;
} // Block from 82142B08h-82142B20h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82142B20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142B20);
		  /* 82142B20h */ case    0:  		/* rlwinm. R11, R11, 0, 15, 15 */
		/* 82142B20h case    0:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R11,regs.R11);
		/* 82142B20h case    0:*/		return 0x82142B24;
		  /* 82142B24h */ case    1:  		/* bc 12, CR0_EQ, 40 */
		/* 82142B24h case    1:*/		if ( regs.CR[0].eq ) { return 0x82142B4C;  }
		/* 82142B24h case    1:*/		return 0x82142B28;
		  /* 82142B28h */ case    2:  		/* lwz R11, <#[R4 + 72]> */
		/* 82142B28h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000048) );
		/* 82142B28h case    2:*/		return 0x82142B2C;
		  /* 82142B2Ch */ case    3:  		/* lis R10, -32253 */
		/* 82142B2Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82142B2Ch case    3:*/		return 0x82142B30;
		  /* 82142B30h */ case    4:  		/* lwz R9, <#[R3 + 24]> */
		/* 82142B30h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000018) );
		/* 82142B30h case    4:*/		return 0x82142B34;
		  /* 82142B34h */ case    5:  		/* li R5, 4500 */
		/* 82142B34h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1194);
		/* 82142B34h case    5:*/		return 0x82142B38;
		  /* 82142B38h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82142B38h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82142B38h case    6:*/		return 0x82142B3C;
		  /* 82142B3Ch */ case    7:  		/* addi R6, R10, 24760 */
		/* 82142B3Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x60B8);
		/* 82142B3Ch case    7:*/		return 0x82142B40;
		  /* 82142B40h */ case    8:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82142B40h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82142B40h case    8:*/		return 0x82142B44;
		  /* 82142B44h */ case    9:  		/* lwz R4, <#[R11 + 60]> */
		/* 82142B44h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 82142B44h case    9:*/		return 0x82142B48;
		  /* 82142B48h */ case   10:  		/* bl -214040 */
		/* 82142B48h case   10:*/		regs.LR = 0x82142B4C; return 0x8210E730;
		/* 82142B48h case   10:*/		return 0x82142B4C;
	}
	return 0x82142B4C;
} // Block from 82142B20h-82142B4Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82142B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142B4C);
		  /* 82142B4Ch */ case    0:  		/* lis R3, -32768 */
		/* 82142B4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82142B4Ch case    0:*/		return 0x82142B50;
		  /* 82142B50h */ case    1:  		/* ori R3, R3, 16389 */
		/* 82142B50h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82142B50h case    1:*/		return 0x82142B54;
	}
	return 0x82142B54;
} // Block from 82142B4Ch-82142B54h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82142B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142B54);
		  /* 82142B54h */ case    0:  		/* addi R1, R1, 96 */
		/* 82142B54h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82142B54h case    0:*/		return 0x82142B58;
		  /* 82142B58h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82142B58h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82142B58h case    1:*/		return 0x82142B5C;
		  /* 82142B5Ch */ case    2:  		/* mtspr LR, R12 */
		/* 82142B5Ch case    2:*/		regs.LR = regs.R12;
		/* 82142B5Ch case    2:*/		return 0x82142B60;
		  /* 82142B60h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82142B60h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82142B60h case    3:*/		return 0x82142B64;
	}
	return 0x82142B64;
} // Block from 82142B54h-82142B64h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82142B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142B64);
		  /* 82142B64h */ case    0:  		/* nop */
		/* 82142B64h case    0:*/		cpu::op::nop();
		/* 82142B64h case    0:*/		return 0x82142B68;
	}
	return 0x82142B68;
} // Block from 82142B64h-82142B68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82142B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142B68);
		  /* 82142B68h */ case    0:  		/* mfspr R12, LR */
		/* 82142B68h case    0:*/		regs.R12 = regs.LR;
		/* 82142B68h case    0:*/		return 0x82142B6C;
		  /* 82142B6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82142B6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82142B6Ch case    1:*/		return 0x82142B70;
		  /* 82142B70h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82142B70h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82142B70h case    2:*/		return 0x82142B74;
		  /* 82142B74h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82142B74h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82142B74h case    3:*/		return 0x82142B78;
		  /* 82142B78h */ case    4:  		/* li R4, 2 */
		/* 82142B78h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82142B78h case    4:*/		return 0x82142B7C;
		  /* 82142B7Ch */ case    5:  		/* stfd FR1, <#[R1 + 120]> */
		/* 82142B7Ch case    5:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000078) );
		/* 82142B7Ch case    5:*/		return 0x82142B80;
		  /* 82142B80h */ case    6:  		/* mr R31, R3 */
		/* 82142B80h case    6:*/		regs.R31 = regs.R3;
		/* 82142B80h case    6:*/		return 0x82142B84;
		  /* 82142B84h */ case    7:  		/* bl -332276 */
		/* 82142B84h case    7:*/		regs.LR = 0x82142B88; return 0x820F1990;
		/* 82142B84h case    7:*/		return 0x82142B88;
		  /* 82142B88h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82142B88h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82142B88h case    8:*/		return 0x82142B8C;
		  /* 82142B8Ch */ case    9:  		/* bc 12, CR0_LT, 40 */
		/* 82142B8Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x82142BB4;  }
		/* 82142B8Ch case    9:*/		return 0x82142B90;
		  /* 82142B90h */ case   10:  		/* lwz R11, <#[R31 + 276]> */
		/* 82142B90h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000114) );
		/* 82142B90h case   10:*/		return 0x82142B94;
		  /* 82142B94h */ case   11:  		/* li R3, 0 */
		/* 82142B94h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82142B94h case   11:*/		return 0x82142B98;
		  /* 82142B98h */ case   12:  		/* lwz R10, <#[R31 + 272]> */
		/* 82142B98h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000110) );
		/* 82142B98h case   12:*/		return 0x82142B9C;
		  /* 82142B9Ch */ case   13:  		/* ld R9, <#[R1 + 120]> */
		/* 82142B9Ch case   13:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R1 + 0x00000078) );
		/* 82142B9Ch case   13:*/		return 0x82142BA0;
		  /* 82142BA0h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82142BA0h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82142BA0h case   14:*/		return 0x82142BA4;
		  /* 82142BA4h */ case   15:  		/* stdx R9, <#[R11 + R10]> */
		/* 82142BA4h case   15:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82142BA4h case   15:*/		return 0x82142BA8;
		  /* 82142BA8h */ case   16:  		/* lwz R11, <#[R31 + 276]> */
		/* 82142BA8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000114) );
		/* 82142BA8h case   16:*/		return 0x82142BAC;
		  /* 82142BACh */ case   17:  		/* addi R11, R11, 2 */
		/* 82142BACh case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82142BACh case   17:*/		return 0x82142BB0;
		  /* 82142BB0h */ case   18:  		/* stw R11, <#[R31 + 276]> */
		/* 82142BB0h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000114) );
		/* 82142BB0h case   18:*/		return 0x82142BB4;
	}
	return 0x82142BB4;
} // Block from 82142B68h-82142BB4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82142BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142BB4);
		  /* 82142BB4h */ case    0:  		/* addi R1, R1, 96 */
		/* 82142BB4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82142BB4h case    0:*/		return 0x82142BB8;
		  /* 82142BB8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82142BB8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82142BB8h case    1:*/		return 0x82142BBC;
		  /* 82142BBCh */ case    2:  		/* mtspr LR, R12 */
		/* 82142BBCh case    2:*/		regs.LR = regs.R12;
		/* 82142BBCh case    2:*/		return 0x82142BC0;
		  /* 82142BC0h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82142BC0h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82142BC0h case    3:*/		return 0x82142BC4;
		  /* 82142BC4h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82142BC4h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82142BC4h case    4:*/		return 0x82142BC8;
	}
	return 0x82142BC8;
} // Block from 82142BB4h-82142BC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82142BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142BC8);
		  /* 82142BC8h */ case    0:  		/* mfspr R12, LR */
		/* 82142BC8h case    0:*/		regs.R12 = regs.LR;
		/* 82142BC8h case    0:*/		return 0x82142BCC;
		  /* 82142BCCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82142BCCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82142BCCh case    1:*/		return 0x82142BD0;
		  /* 82142BD0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82142BD0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82142BD0h case    2:*/		return 0x82142BD4;
		  /* 82142BD4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82142BD4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82142BD4h case    3:*/		return 0x82142BD8;
		  /* 82142BD8h */ case    4:  		/* li R4, 2 */
		/* 82142BD8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82142BD8h case    4:*/		return 0x82142BDC;
		  /* 82142BDCh */ case    5:  		/* stfd FR1, <#[R1 + 120]> */
		/* 82142BDCh case    5:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000078) );
		/* 82142BDCh case    5:*/		return 0x82142BE0;
		  /* 82142BE0h */ case    6:  		/* mr R31, R3 */
		/* 82142BE0h case    6:*/		regs.R31 = regs.R3;
		/* 82142BE0h case    6:*/		return 0x82142BE4;
		  /* 82142BE4h */ case    7:  		/* bl -332372 */
		/* 82142BE4h case    7:*/		regs.LR = 0x82142BE8; return 0x820F1990;
		/* 82142BE4h case    7:*/		return 0x82142BE8;
		  /* 82142BE8h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82142BE8h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82142BE8h case    8:*/		return 0x82142BEC;
		  /* 82142BECh */ case    9:  		/* bc 12, CR0_LT, 64 */
		/* 82142BECh case    9:*/		if ( regs.CR[0].lt ) { return 0x82142C2C;  }
		/* 82142BECh case    9:*/		return 0x82142BF0;
		  /* 82142BF0h */ case   10:  		/* lwz R11, <#[R31 + 276]> */
		/* 82142BF0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000114) );
		/* 82142BF0h case   10:*/		return 0x82142BF4;
		  /* 82142BF4h */ case   11:  		/* li R3, 0 */
		/* 82142BF4h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82142BF4h case   11:*/		return 0x82142BF8;
		  /* 82142BF8h */ case   12:  		/* lwz R10, <#[R31 + 272]> */
		/* 82142BF8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000110) );
		/* 82142BF8h case   12:*/		return 0x82142BFC;
		  /* 82142BFCh */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82142BFCh case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82142BFCh case   13:*/		return 0x82142C00;
		  /* 82142C00h */ case   14:  		/* lwz R9, <#[R1 + 124]> */
		/* 82142C00h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 82142C00h case   14:*/		return 0x82142C04;
		  /* 82142C04h */ case   15:  		/* lwz R8, <#[R1 + 120]> */
		/* 82142C04h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 82142C04h case   15:*/		return 0x82142C08;
		  /* 82142C08h */ case   16:  		/* stwx R9, <#[R11 + R10]> */
		/* 82142C08h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82142C08h case   16:*/		return 0x82142C0C;
		  /* 82142C0Ch */ case   17:  		/* lwz R10, <#[R31 + 272]> */
		/* 82142C0Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000110) );
		/* 82142C0Ch case   17:*/		return 0x82142C10;
		  /* 82142C10h */ case   18:  		/* lwz R11, <#[R31 + 276]> */
		/* 82142C10h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000114) );
		/* 82142C10h case   18:*/		return 0x82142C14;
		  /* 82142C14h */ case   19:  		/* addi R11, R11, 1 */
		/* 82142C14h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82142C14h case   19:*/		return 0x82142C18;
		  /* 82142C18h */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82142C18h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82142C18h case   20:*/		return 0x82142C1C;
		  /* 82142C1Ch */ case   21:  		/* stwx R8, <#[R11 + R10]> */
		/* 82142C1Ch case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82142C1Ch case   21:*/		return 0x82142C20;
		  /* 82142C20h */ case   22:  		/* lwz R11, <#[R31 + 276]> */
		/* 82142C20h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000114) );
		/* 82142C20h case   22:*/		return 0x82142C24;
		  /* 82142C24h */ case   23:  		/* addi R11, R11, 2 */
		/* 82142C24h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82142C24h case   23:*/		return 0x82142C28;
		  /* 82142C28h */ case   24:  		/* stw R11, <#[R31 + 276]> */
		/* 82142C28h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000114) );
		/* 82142C28h case   24:*/		return 0x82142C2C;
	}
	return 0x82142C2C;
} // Block from 82142BC8h-82142C2Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 82142C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142C2C);
		  /* 82142C2Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 82142C2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82142C2Ch case    0:*/		return 0x82142C30;
		  /* 82142C30h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82142C30h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82142C30h case    1:*/		return 0x82142C34;
		  /* 82142C34h */ case    2:  		/* mtspr LR, R12 */
		/* 82142C34h case    2:*/		regs.LR = regs.R12;
		/* 82142C34h case    2:*/		return 0x82142C38;
		  /* 82142C38h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82142C38h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82142C38h case    3:*/		return 0x82142C3C;
		  /* 82142C3Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 82142C3Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82142C3Ch case    4:*/		return 0x82142C40;
	}
	return 0x82142C40;
} // Block from 82142C2Ch-82142C40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82142C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142C40);
		  /* 82142C40h */ case    0:  		/* mfspr R12, LR */
		/* 82142C40h case    0:*/		regs.R12 = regs.LR;
		/* 82142C40h case    0:*/		return 0x82142C44;
		  /* 82142C44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82142C44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82142C44h case    1:*/		return 0x82142C48;
		  /* 82142C48h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82142C48h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82142C48h case    2:*/		return 0x82142C4C;
		  /* 82142C4Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82142C4Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82142C4Ch case    3:*/		return 0x82142C50;
		  /* 82142C50h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82142C50h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82142C50h case    4:*/		return 0x82142C54;
		  /* 82142C54h */ case    5:  		/* lis R11, -32253 */
		/* 82142C54h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82142C54h case    5:*/		return 0x82142C58;
		  /* 82142C58h */ case    6:  		/* mr R31, R3 */
		/* 82142C58h case    6:*/		regs.R31 = regs.R3;
		/* 82142C58h case    6:*/		return 0x82142C5C;
		  /* 82142C5Ch */ case    7:  		/* addi R11, R11, 24384 */
		/* 82142C5Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5F40);
		/* 82142C5Ch case    7:*/		return 0x82142C60;
		  /* 82142C60h */ case    8:  		/* mr R30, R4 */
		/* 82142C60h case    8:*/		regs.R30 = regs.R4;
		/* 82142C60h case    8:*/		return 0x82142C64;
		  /* 82142C64h */ case    9:  		/* stw R11, <#[R3]> */
		/* 82142C64h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82142C64h case    9:*/		return 0x82142C68;
		  /* 82142C68h */ case   10:  		/* bl -348008 */
		/* 82142C68h case   10:*/		regs.LR = 0x82142C6C; return 0x820EDD00;
		/* 82142C68h case   10:*/		return 0x82142C6C;
		  /* 82142C6Ch */ case   11:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 82142C6Ch case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 82142C6Ch case   11:*/		return 0x82142C70;
		  /* 82142C70h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 82142C70h case   12:*/		if ( regs.CR[0].eq ) { return 0x82142C80;  }
		/* 82142C70h case   12:*/		return 0x82142C74;
		  /* 82142C74h */ case   13:  		/* lis R4, 9345 */
		/* 82142C74h case   13:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82142C74h case   13:*/		return 0x82142C78;
		  /* 82142C78h */ case   14:  		/* mr R3, R31 */
		/* 82142C78h case   14:*/		regs.R3 = regs.R31;
		/* 82142C78h case   14:*/		return 0x82142C7C;
		  /* 82142C7Ch */ case   15:  		/* bl -764228 */
		/* 82142C7Ch case   15:*/		regs.LR = 0x82142C80; return 0x82088338;
		/* 82142C7Ch case   15:*/		return 0x82142C80;
	}
	return 0x82142C80;
} // Block from 82142C40h-82142C80h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82142C80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142C80);
		  /* 82142C80h */ case    0:  		/* mr R3, R31 */
		/* 82142C80h case    0:*/		regs.R3 = regs.R31;
		/* 82142C80h case    0:*/		return 0x82142C84;
		  /* 82142C84h */ case    1:  		/* addi R1, R1, 112 */
		/* 82142C84h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82142C84h case    1:*/		return 0x82142C88;
		  /* 82142C88h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82142C88h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82142C88h case    2:*/		return 0x82142C8C;
		  /* 82142C8Ch */ case    3:  		/* mtspr LR, R12 */
		/* 82142C8Ch case    3:*/		regs.LR = regs.R12;
		/* 82142C8Ch case    3:*/		return 0x82142C90;
		  /* 82142C90h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 82142C90h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82142C90h case    4:*/		return 0x82142C94;
		  /* 82142C94h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 82142C94h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82142C94h case    5:*/		return 0x82142C98;
		  /* 82142C98h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82142C98h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82142C98h case    6:*/		return 0x82142C9C;
	}
	return 0x82142C9C;
} // Block from 82142C80h-82142C9Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82142C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142C9C);
		  /* 82142C9Ch */ case    0:  		/* nop */
		/* 82142C9Ch case    0:*/		cpu::op::nop();
		/* 82142C9Ch case    0:*/		return 0x82142CA0;
	}
	return 0x82142CA0;
} // Block from 82142C9Ch-82142CA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82142CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142CA0);
		  /* 82142CA0h */ case    0:  		/* mfspr R12, LR */
		/* 82142CA0h case    0:*/		regs.R12 = regs.LR;
		/* 82142CA0h case    0:*/		return 0x82142CA4;
		  /* 82142CA4h */ case    1:  		/* bl -727624 */
		/* 82142CA4h case    1:*/		regs.LR = 0x82142CA8; return 0x8209125C;
		/* 82142CA4h case    1:*/		return 0x82142CA8;
		  /* 82142CA8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82142CA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82142CA8h case    2:*/		return 0x82142CAC;
		  /* 82142CACh */ case    3:  		/* lwz R11, <#[R3 + 20]> */
		/* 82142CACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82142CACh case    3:*/		return 0x82142CB0;
		  /* 82142CB0h */ case    4:  		/* rlwinm R10, R4, 2, 0, 29 */
		/* 82142CB0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R4);
		/* 82142CB0h case    4:*/		return 0x82142CB4;
		  /* 82142CB4h */ case    5:  		/* mr R31, R3 */
		/* 82142CB4h case    5:*/		regs.R31 = regs.R3;
		/* 82142CB4h case    5:*/		return 0x82142CB8;
		  /* 82142CB8h */ case    6:  		/* mr R29, R5 */
		/* 82142CB8h case    6:*/		regs.R29 = regs.R5;
		/* 82142CB8h case    6:*/		return 0x82142CBC;
		  /* 82142CBCh */ case    7:  		/* lwzx R30, <#[R10 + R11]> */
		/* 82142CBCh case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82142CBCh case    7:*/		return 0x82142CC0;
		  /* 82142CC0h */ case    8:  		/* lwz R4, <#[R30 + 8]> */
		/* 82142CC0h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 82142CC0h case    8:*/		return 0x82142CC4;
		  /* 82142CC4h */ case    9:  		/* cmpwi CR6, R4, -1 */
		/* 82142CC4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 82142CC4h case    9:*/		return 0x82142CC8;
		  /* 82142CC8h */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 82142CC8h case   10:*/		if ( regs.CR[6].eq ) { return 0x82142CD8;  }
		/* 82142CC8h case   10:*/		return 0x82142CCC;
		  /* 82142CCCh */ case   11:  		/* bl -44 */
		/* 82142CCCh case   11:*/		regs.LR = 0x82142CD0; return 0x82142CA0;
		/* 82142CCCh case   11:*/		return 0x82142CD0;
		  /* 82142CD0h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 82142CD0h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82142CD0h case   12:*/		return 0x82142CD4;
		  /* 82142CD4h */ case   13:  		/* bc 12, CR0_LT, 56 */
		/* 82142CD4h case   13:*/		if ( regs.CR[0].lt ) { return 0x82142D0C;  }
		/* 82142CD4h case   13:*/		return 0x82142CD8;
	}
	return 0x82142CD8;
} // Block from 82142CA0h-82142CD8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82142CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142CD8);
		  /* 82142CD8h */ case    0:  		/* mr R4, R30 */
		/* 82142CD8h case    0:*/		regs.R4 = regs.R30;
		/* 82142CD8h case    0:*/		return 0x82142CDC;
		  /* 82142CDCh */ case    1:  		/* mr R3, R31 */
		/* 82142CDCh case    1:*/		regs.R3 = regs.R31;
		/* 82142CDCh case    1:*/		return 0x82142CE0;
		  /* 82142CE0h */ case    2:  		/* bl -672 */
		/* 82142CE0h case    2:*/		regs.LR = 0x82142CE4; return 0x82142A40;
		/* 82142CE0h case    2:*/		return 0x82142CE4;
		  /* 82142CE4h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82142CE4h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82142CE4h case    3:*/		return 0x82142CE8;
		  /* 82142CE8h */ case    4:  		/* bc 12, CR0_LT, 36 */
		/* 82142CE8h case    4:*/		if ( regs.CR[0].lt ) { return 0x82142D0C;  }
		/* 82142CE8h case    4:*/		return 0x82142CEC;
		  /* 82142CECh */ case    5:  		/* lwz R11, <#[R30 + 12]> */
		/* 82142CECh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82142CECh case    5:*/		return 0x82142CF0;
		  /* 82142CF0h */ case    6:  		/* mr R3, R31 */
		/* 82142CF0h case    6:*/		regs.R3 = regs.R31;
		/* 82142CF0h case    6:*/		return 0x82142CF4;
		  /* 82142CF4h */ case    7:  		/* lwz R10, <#[R30 + 16]> */
		/* 82142CF4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82142CF4h case    7:*/		return 0x82142CF8;
		  /* 82142CF8h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82142CF8h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82142CF8h case    8:*/		return 0x82142CFC;
		  /* 82142CFCh */ case    9:  		/* add R4, R11, R10 */
		/* 82142CFCh case    9:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 82142CFCh case    9:*/		return 0x82142D00;
		  /* 82142D00h */ case   10:  		/* bl -326032 */
		/* 82142D00h case   10:*/		regs.LR = 0x82142D04; return 0x820F3370;
		/* 82142D00h case   10:*/		return 0x82142D04;
		  /* 82142D04h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 82142D04h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82142D04h case   11:*/		return 0x82142D08;
		  /* 82142D08h */ case   12:  		/* bc 4, CR0_LT, 16 */
		/* 82142D08h case   12:*/		if ( !regs.CR[0].lt ) { return 0x82142D18;  }
		/* 82142D08h case   12:*/		return 0x82142D0C;
	}
	return 0x82142D0C;
} // Block from 82142CD8h-82142D0Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82142D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142D0C);
		  /* 82142D0Ch */ case    0:  		/* lis R3, -32761 */
		/* 82142D0Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82142D0Ch case    0:*/		return 0x82142D10;
		  /* 82142D10h */ case    1:  		/* ori R3, R3, 14 */
		/* 82142D10h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 82142D10h case    1:*/		return 0x82142D14;
		  /* 82142D14h */ case    2:  		/* b 28 */
		/* 82142D14h case    2:*/		return 0x82142D30;
		/* 82142D14h case    2:*/		return 0x82142D18;
	}
	return 0x82142D18;
} // Block from 82142D0Ch-82142D18h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82142D18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142D18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142D18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142D18);
		  /* 82142D18h */ case    0:  		/* lwz R11, <#[R31 + 272]> */
		/* 82142D18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000110) );
		/* 82142D18h case    0:*/		return 0x82142D1C;
		  /* 82142D1Ch */ case    1:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 82142D1Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 82142D1Ch case    1:*/		return 0x82142D20;
		  /* 82142D20h */ case    2:  		/* li R3, 0 */
		/* 82142D20h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82142D20h case    2:*/		return 0x82142D24;
		  /* 82142D24h */ case    3:  		/* lwzx R9, <#[R11 + R10]> */
		/* 82142D24h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82142D24h case    3:*/		return 0x82142D28;
		  /* 82142D28h */ case    4:  		/* addi R9, R9, 1 */
		/* 82142D28h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82142D28h case    4:*/		return 0x82142D2C;
		  /* 82142D2Ch */ case    5:  		/* stwx R9, <#[R11 + R10]> */
		/* 82142D2Ch case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82142D2Ch case    5:*/		return 0x82142D30;
	}
	return 0x82142D30;
} // Block from 82142D18h-82142D30h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82142D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142D30);
		  /* 82142D30h */ case    0:  		/* addi R1, R1, 112 */
		/* 82142D30h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82142D30h case    0:*/		return 0x82142D34;
		  /* 82142D34h */ case    1:  		/* b -727688 */
		/* 82142D34h case    1:*/		return 0x820912AC;
		/* 82142D34h case    1:*/		return 0x82142D38;
	}
	return 0x82142D38;
} // Block from 82142D30h-82142D38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82142D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142D38);
		  /* 82142D38h */ case    0:  		/* mfspr R12, LR */
		/* 82142D38h case    0:*/		regs.R12 = regs.LR;
		/* 82142D38h case    0:*/		return 0x82142D3C;
		  /* 82142D3Ch */ case    1:  		/* bl -727836 */
		/* 82142D3Ch case    1:*/		regs.LR = 0x82142D40; return 0x82091220;
		/* 82142D3Ch case    1:*/		return 0x82142D40;
		  /* 82142D40h */ case    2:  		/* stwu R1, <#[R1 - 352]> */
		/* 82142D40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEA0);
		/* 82142D40h case    2:*/		return 0x82142D44;
		  /* 82142D44h */ case    3:  		/* addi R11, R1, 104 */
		/* 82142D44h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x68);
		/* 82142D44h case    3:*/		return 0x82142D48;
		  /* 82142D48h */ case    4:  		/* lwz R10, <#[R3 + 12]> */
		/* 82142D48h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82142D48h case    4:*/		return 0x82142D4C;
		  /* 82142D4Ch */ case    5:  		/* addi R9, R1, 88 */
		/* 82142D4Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x58);
		/* 82142D4Ch case    5:*/		return 0x82142D50;
		  /* 82142D50h */ case    6:  		/* li R17, 0 */
		/* 82142D50h case    6:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 82142D50h case    6:*/		return 0x82142D54;
		  /* 82142D54h */ case    7:  		/* mr R31, R3 */
		/* 82142D54h case    7:*/		regs.R31 = regs.R3;
		/* 82142D54h case    7:*/		return 0x82142D58;
		  /* 82142D58h */ case    8:  		/* mr R16, R4 */
		/* 82142D58h case    8:*/		regs.R16 = regs.R4;
		/* 82142D58h case    8:*/		return 0x82142D5C;
		  /* 82142D5Ch */ case    9:  		/* std R17, <#[R11]> */
		/* 82142D5Ch case    9:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 82142D5Ch case    9:*/		return 0x82142D60;
		  /* 82142D60h */ case   10:  		/* std R17, <#[R9]> */
		/* 82142D60h case   10:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R9 + 0x00000000) );
		/* 82142D60h case   10:*/		return 0x82142D64;
		  /* 82142D64h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 82142D64h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82142D64h case   11:*/		return 0x82142D68;
		  /* 82142D68h */ case   12:  		/* stw R17, <#[R11 + 8]> */
		/* 82142D68h case   12:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000008) );
		/* 82142D68h case   12:*/		return 0x82142D6C;
		  /* 82142D6Ch */ case   13:  		/* mr R15, R17 */
		/* 82142D6Ch case   13:*/		regs.R15 = regs.R17;
		/* 82142D6Ch case   13:*/		return 0x82142D70;
		  /* 82142D70h */ case   14:  		/* stw R17, <#[R9 + 8]> */
		/* 82142D70h case   14:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R9 + 0x00000008) );
		/* 82142D70h case   14:*/		return 0x82142D74;
		  /* 82142D74h */ case   15:  		/* bc 4, CR6_EQ, 12 */
		/* 82142D74h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82142D80;  }
		/* 82142D74h case   15:*/		return 0x82142D78;
		  /* 82142D78h */ case   16:  		/* li R3, 1 */
		/* 82142D78h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82142D78h case   16:*/		return 0x82142D7C;
		  /* 82142D7Ch */ case   17:  		/* b 3868 */
		/* 82142D7Ch case   17:*/		return 0x82143C98;
		/* 82142D7Ch case   17:*/		return 0x82142D80;
	}
	return 0x82142D80;
} // Block from 82142D38h-82142D80h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82142D80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142D80);
		  /* 82142D80h */ case    0:  		/* mr R4, R16 */
		/* 82142D80h case    0:*/		regs.R4 = regs.R16;
		/* 82142D80h case    0:*/		return 0x82142D84;
		  /* 82142D84h */ case    1:  		/* mr R3, R31 */
		/* 82142D84h case    1:*/		regs.R3 = regs.R31;
		/* 82142D84h case    1:*/		return 0x82142D88;
		  /* 82142D88h */ case    2:  		/* bl -175968 */
		/* 82142D88h case    2:*/		regs.LR = 0x82142D8C; return 0x82117E28;
		/* 82142D88h case    2:*/		return 0x82142D8C;
		  /* 82142D8Ch */ case    3:  		/* or. R29, R3, R3 */
		/* 82142D8Ch case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82142D8Ch case    3:*/		return 0x82142D90;
		  /* 82142D90h */ case    4:  		/* bc 12, CR0_LT, 3796 */
		/* 82142D90h case    4:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82142D90h case    4:*/		return 0x82142D94;
		  /* 82142D94h */ case    5:  		/* lis R7, 4 */
		/* 82142D94h case    5:*/		cpu::op::lis<0>(regs,&regs.R7,0x4);
		/* 82142D94h case    5:*/		return 0x82142D98;
		  /* 82142D98h */ case    6:  		/* lwz R5, <#[R31 + 56]> */
		/* 82142D98h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000038) );
		/* 82142D98h case    6:*/		return 0x82142D9C;
		  /* 82142D9Ch */ case    7:  		/* li R8, 99 */
		/* 82142D9Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x63);
		/* 82142D9Ch case    7:*/		return 0x82142DA0;
		  /* 82142DA0h */ case    8:  		/* lwz R4, <#[R31 + 124]> */
		/* 82142DA0h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000007C) );
		/* 82142DA0h case    8:*/		return 0x82142DA4;
		  /* 82142DA4h */ case    9:  		/* ori R7, R7, 8320 */
		/* 82142DA4h case    9:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x2080);
		/* 82142DA4h case    9:*/		return 0x82142DA8;
		  /* 82142DA8h */ case   10:  		/* li R6, 512 */
		/* 82142DA8h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x200);
		/* 82142DA8h case   10:*/		return 0x82142DAC;
		  /* 82142DACh */ case   11:  		/* mr R3, R31 */
		/* 82142DACh case   11:*/		regs.R3 = regs.R31;
		/* 82142DACh case   11:*/		return 0x82142DB0;
		  /* 82142DB0h */ case   12:  		/* bl -348128 */
		/* 82142DB0h case   12:*/		regs.LR = 0x82142DB4; return 0x820EDDD0;
		/* 82142DB0h case   12:*/		return 0x82142DB4;
		  /* 82142DB4h */ case   13:  		/* or. R29, R3, R3 */
		/* 82142DB4h case   13:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82142DB4h case   13:*/		return 0x82142DB8;
		  /* 82142DB8h */ case   14:  		/* bc 12, CR0_LT, 3756 */
		/* 82142DB8h case   14:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82142DB8h case   14:*/		return 0x82142DBC;
		  /* 82142DBCh */ case   15:  		/* addi R10, R1, 144 */
		/* 82142DBCh case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 82142DBCh case   15:*/		return 0x82142DC0;
		  /* 82142DC0h */ case   16:  		/* lwz R30, <#[R31 + 8]> */
		/* 82142DC0h case   16:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82142DC0h case   16:*/		return 0x82142DC4;
		  /* 82142DC4h */ case   17:  		/* addi R9, R1, 160 */
		/* 82142DC4h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 82142DC4h case   17:*/		return 0x82142DC8;
		  /* 82142DC8h */ case   18:  		/* li R11, -1 */
		/* 82142DC8h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82142DC8h case   18:*/		return 0x82142DCC;
		  /* 82142DCCh */ case   19:  		/* mr R18, R17 */
		/* 82142DCCh case   19:*/		regs.R18 = regs.R17;
		/* 82142DCCh case   19:*/		return 0x82142DD0;
		  /* 82142DD0h */ case   20:  		/* mr R24, R17 */
		/* 82142DD0h case   20:*/		regs.R24 = regs.R17;
		/* 82142DD0h case   20:*/		return 0x82142DD4;
		  /* 82142DD4h */ case   21:  		/* std R11, <#[R10]> */
		/* 82142DD4h case   21:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82142DD4h case   21:*/		return 0x82142DD8;
		  /* 82142DD8h */ case   22:  		/* mr R28, R17 */
		/* 82142DD8h case   22:*/		regs.R28 = regs.R17;
		/* 82142DD8h case   22:*/		return 0x82142DDC;
		  /* 82142DDCh */ case   23:  		/* std R17, <#[R9]> */
		/* 82142DDCh case   23:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R9 + 0x00000000) );
		/* 82142DDCh case   23:*/		return 0x82142DE0;
		  /* 82142DE0h */ case   24:  		/* cmplwi CR6, R30, 0 */
		/* 82142DE0h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82142DE0h case   24:*/		return 0x82142DE4;
		  /* 82142DE4h */ case   25:  		/* std R11, <#[R10 + 8]> */
		/* 82142DE4h case   25:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 82142DE4h case   25:*/		return 0x82142DE8;
		  /* 82142DE8h */ case   26:  		/* std R17, <#[R9 + 8]> */
		/* 82142DE8h case   26:*/		cpu::mem::store64( regs, regs.R17, (uint32)(regs.R9 + 0x00000008) );
		/* 82142DE8h case   26:*/		return 0x82142DEC;
		  /* 82142DECh */ case   27:  		/* bc 12, CR6_EQ, 284 */
		/* 82142DECh case   27:*/		if ( regs.CR[6].eq ) { return 0x82142F08;  }
		/* 82142DECh case   27:*/		return 0x82142DF0;
		  /* 82142DF0h */ case   28:  		/* lwz R7, <#[R31 + 20]> */
		/* 82142DF0h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 82142DF0h case   28:*/		return 0x82142DF4;
		  /* 82142DF4h */ case   29:  		/* mr R8, R17 */
		/* 82142DF4h case   29:*/		regs.R8 = regs.R17;
		/* 82142DF4h case   29:*/		return 0x82142DF8;
		  /* 82142DF8h */ case   30:  		/* lwz R6, <#[R31 + 120]> */
		/* 82142DF8h case   30:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000078) );
		/* 82142DF8h case   30:*/		return 0x82142DFC;
		  /* 82142DFCh */ case   31:  		/* lwz R5, <#[R31 + 132]> */
		/* 82142DFCh case   31:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000084) );
		/* 82142DFCh case   31:*/		return 0x82142E00;
		  /* 82142E00h */ case   32:  		/* lwz R4, <#[R31 + 180]> */
		/* 82142E00h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000B4) );
		/* 82142E00h case   32:*/		return 0x82142E04;
		  /* 82142E04h */ case   33:  		/* lwz R3, <#[R31 + 184]> */
		/* 82142E04h case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B8) );
		/* 82142E04h case   33:*/		return 0x82142E08;
		  /* 82142E08h */ case   34:  		/* lwzx R10, <#[R8 + R7]> */
		/* 82142E08h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 82142E08h case   34:*/		return 0x82142E0C;
		  /* 82142E0Ch */ case   35:  		/* lwz R9, <#[R10 + 4]> */
		/* 82142E0Ch case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 82142E0Ch case   35:*/		return 0x82142E10;
		  /* 82142E10h */ case   36:  		/* cmplw CR6, R6, R9 */
		/* 82142E10h case   36:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R9);
		/* 82142E10h case   36:*/		return 0x82142E14;
		  /* 82142E14h */ case   37:  		/* bc 4, CR6_EQ, 28 */
		/* 82142E14h case   37:*/		if ( !regs.CR[6].eq ) { return 0x82142E30;  }
		/* 82142E14h case   37:*/		return 0x82142E18;
		  /* 82142E18h */ case   38:  		/* lwz R11, <#[R10 + 12]> */
		/* 82142E18h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82142E18h case   38:*/		return 0x82142E1C;
		  /* 82142E1Ch */ case   39:  		/* addi R11, R11, 1 */
		/* 82142E1Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82142E1Ch case   39:*/		return 0x82142E20;
		  /* 82142E20h */ case   40:  		/* cmplw CR6, R11, R18 */
		/* 82142E20h case   40:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 82142E20h case   40:*/		return 0x82142E24;
		  /* 82142E24h */ case   41:  		/* bc 4, CR6_GT, 12 */
		/* 82142E24h case   41:*/		if ( !regs.CR[6].gt ) { return 0x82142E30;  }
		/* 82142E24h case   41:*/		return 0x82142E28;
		  /* 82142E28h */ case   42:  		/* mr R18, R11 */
		/* 82142E28h case   42:*/		regs.R18 = regs.R11;
		/* 82142E28h case   42:*/		return 0x82142E2C;
		  /* 82142E2Ch */ case   43:  		/* b 36 */
		/* 82142E2Ch case   43:*/		return 0x82142E50;
		/* 82142E2Ch case   43:*/		return 0x82142E30;
	}
	return 0x82142E30;
} // Block from 82142D80h-82142E30h (44 instructions)

//////////////////////////////////////////////////////
// Block at 82142E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142E30);
		  /* 82142E30h */ case    0:  		/* lwz R11, <#[R31 + 136]> */
		/* 82142E30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000088) );
		/* 82142E30h case    0:*/		return 0x82142E34;
		  /* 82142E34h */ case    1:  		/* cmplw CR6, R11, R9 */
		/* 82142E34h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82142E34h case    1:*/		return 0x82142E38;
		  /* 82142E38h */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 82142E38h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82142E50;  }
		/* 82142E38h case    2:*/		return 0x82142E3C;
		  /* 82142E3Ch */ case    3:  		/* lwz R11, <#[R10 + 12]> */
		/* 82142E3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82142E3Ch case    3:*/		return 0x82142E40;
		  /* 82142E40h */ case    4:  		/* addi R11, R11, 1 */
		/* 82142E40h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82142E40h case    4:*/		return 0x82142E44;
		  /* 82142E44h */ case    5:  		/* cmplw CR6, R11, R24 */
		/* 82142E44h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 82142E44h case    5:*/		return 0x82142E48;
		  /* 82142E48h */ case    6:  		/* bc 4, CR6_GT, 8 */
		/* 82142E48h case    6:*/		if ( !regs.CR[6].gt ) { return 0x82142E50;  }
		/* 82142E48h case    6:*/		return 0x82142E4C;
		  /* 82142E4Ch */ case    7:  		/* mr R24, R11 */
		/* 82142E4Ch case    7:*/		regs.R24 = regs.R11;
		/* 82142E4Ch case    7:*/		return 0x82142E50;
	}
	return 0x82142E50;
} // Block from 82142E30h-82142E50h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82142E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142E50);
		  /* 82142E50h */ case    0:  		/* cmplw CR6, R5, R9 */
		/* 82142E50h case    0:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R9);
		/* 82142E50h case    0:*/		return 0x82142E54;
		  /* 82142E54h */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 82142E54h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82142E88;  }
		/* 82142E54h case    1:*/		return 0x82142E58;
		  /* 82142E58h */ case    2:  		/* lwz R11, <#[R10 + 12]> */
		/* 82142E58h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82142E58h case    2:*/		return 0x82142E5C;
		  /* 82142E5Ch */ case    3:  		/* lwz R27, <#[R1 + 160]> */
		/* 82142E5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A0) );
		/* 82142E5Ch case    3:*/		return 0x82142E60;
		  /* 82142E60h */ case    4:  		/* cmplw CR6, R11, R27 */
		/* 82142E60h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 82142E60h case    4:*/		return 0x82142E64;
		  /* 82142E64h */ case    5:  		/* bc 4, CR6_GT, 8 */
		/* 82142E64h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82142E6C;  }
		/* 82142E64h case    5:*/		return 0x82142E68;
		  /* 82142E68h */ case    6:  		/* stw R11, <#[R1 + 160]> */
		/* 82142E68h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 82142E68h case    6:*/		return 0x82142E6C;
	}
	return 0x82142E6C;
} // Block from 82142E50h-82142E6Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82142E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142E6C);
		  /* 82142E6Ch */ case    0:  		/* cmplw CR6, R5, R9 */
		/* 82142E6Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R9);
		/* 82142E6Ch case    0:*/		return 0x82142E70;
		  /* 82142E70h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 82142E70h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82142E88;  }
		/* 82142E70h case    1:*/		return 0x82142E74;
		  /* 82142E74h */ case    2:  		/* lwz R11, <#[R10 + 12]> */
		/* 82142E74h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82142E74h case    2:*/		return 0x82142E78;
		  /* 82142E78h */ case    3:  		/* lwz R27, <#[R1 + 144]> */
		/* 82142E78h case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000090) );
		/* 82142E78h case    3:*/		return 0x82142E7C;
		  /* 82142E7Ch */ case    4:  		/* cmplw CR6, R11, R27 */
		/* 82142E7Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 82142E7Ch case    4:*/		return 0x82142E80;
		  /* 82142E80h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 82142E80h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82142E88;  }
		/* 82142E80h case    5:*/		return 0x82142E84;
		  /* 82142E84h */ case    6:  		/* stw R11, <#[R1 + 144]> */
		/* 82142E84h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 82142E84h case    6:*/		return 0x82142E88;
	}
	return 0x82142E88;
} // Block from 82142E6Ch-82142E88h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82142E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142E88);
		  /* 82142E88h */ case    0:  		/* cmplw CR6, R4, R9 */
		/* 82142E88h case    0:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 82142E88h case    0:*/		return 0x82142E8C;
		  /* 82142E8Ch */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 82142E8Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82142EC0;  }
		/* 82142E8Ch case    1:*/		return 0x82142E90;
		  /* 82142E90h */ case    2:  		/* lwz R11, <#[R10 + 12]> */
		/* 82142E90h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82142E90h case    2:*/		return 0x82142E94;
		  /* 82142E94h */ case    3:  		/* lwz R27, <#[R1 + 164]> */
		/* 82142E94h case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A4) );
		/* 82142E94h case    3:*/		return 0x82142E98;
		  /* 82142E98h */ case    4:  		/* cmplw CR6, R11, R27 */
		/* 82142E98h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 82142E98h case    4:*/		return 0x82142E9C;
		  /* 82142E9Ch */ case    5:  		/* bc 4, CR6_GT, 8 */
		/* 82142E9Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x82142EA4;  }
		/* 82142E9Ch case    5:*/		return 0x82142EA0;
		  /* 82142EA0h */ case    6:  		/* stw R11, <#[R1 + 164]> */
		/* 82142EA0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 82142EA0h case    6:*/		return 0x82142EA4;
	}
	return 0x82142EA4;
} // Block from 82142E88h-82142EA4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82142EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142EA4);
		  /* 82142EA4h */ case    0:  		/* cmplw CR6, R4, R9 */
		/* 82142EA4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 82142EA4h case    0:*/		return 0x82142EA8;
		  /* 82142EA8h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 82142EA8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82142EC0;  }
		/* 82142EA8h case    1:*/		return 0x82142EAC;
		  /* 82142EACh */ case    2:  		/* lwz R11, <#[R10 + 12]> */
		/* 82142EACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82142EACh case    2:*/		return 0x82142EB0;
		  /* 82142EB0h */ case    3:  		/* lwz R27, <#[R1 + 148]> */
		/* 82142EB0h case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000094) );
		/* 82142EB0h case    3:*/		return 0x82142EB4;
		  /* 82142EB4h */ case    4:  		/* cmplw CR6, R11, R27 */
		/* 82142EB4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 82142EB4h case    4:*/		return 0x82142EB8;
		  /* 82142EB8h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 82142EB8h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82142EC0;  }
		/* 82142EB8h case    5:*/		return 0x82142EBC;
		  /* 82142EBCh */ case    6:  		/* stw R11, <#[R1 + 148]> */
		/* 82142EBCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 82142EBCh case    6:*/		return 0x82142EC0;
	}
	return 0x82142EC0;
} // Block from 82142EA4h-82142EC0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82142EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142EC0);
		  /* 82142EC0h */ case    0:  		/* cmplw CR6, R3, R9 */
		/* 82142EC0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R9);
		/* 82142EC0h case    0:*/		return 0x82142EC4;
		  /* 82142EC4h */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 82142EC4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82142EF8;  }
		/* 82142EC4h case    1:*/		return 0x82142EC8;
		  /* 82142EC8h */ case    2:  		/* lwz R11, <#[R10 + 12]> */
		/* 82142EC8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82142EC8h case    2:*/		return 0x82142ECC;
		  /* 82142ECCh */ case    3:  		/* lwz R27, <#[R1 + 168]> */
		/* 82142ECCh case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A8) );
		/* 82142ECCh case    3:*/		return 0x82142ED0;
		  /* 82142ED0h */ case    4:  		/* cmplw CR6, R11, R27 */
		/* 82142ED0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 82142ED0h case    4:*/		return 0x82142ED4;
		  /* 82142ED4h */ case    5:  		/* bc 4, CR6_GT, 8 */
		/* 82142ED4h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82142EDC;  }
		/* 82142ED4h case    5:*/		return 0x82142ED8;
		  /* 82142ED8h */ case    6:  		/* stw R11, <#[R1 + 168]> */
		/* 82142ED8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 82142ED8h case    6:*/		return 0x82142EDC;
	}
	return 0x82142EDC;
} // Block from 82142EC0h-82142EDCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82142EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142EDC);
		  /* 82142EDCh */ case    0:  		/* cmplw CR6, R3, R9 */
		/* 82142EDCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R9);
		/* 82142EDCh case    0:*/		return 0x82142EE0;
		  /* 82142EE0h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 82142EE0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82142EF8;  }
		/* 82142EE0h case    1:*/		return 0x82142EE4;
		  /* 82142EE4h */ case    2:  		/* lwz R11, <#[R10 + 12]> */
		/* 82142EE4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82142EE4h case    2:*/		return 0x82142EE8;
		  /* 82142EE8h */ case    3:  		/* lwz R10, <#[R1 + 152]> */
		/* 82142EE8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000098) );
		/* 82142EE8h case    3:*/		return 0x82142EEC;
		  /* 82142EECh */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82142EECh case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82142EECh case    4:*/		return 0x82142EF0;
		  /* 82142EF0h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 82142EF0h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82142EF8;  }
		/* 82142EF0h case    5:*/		return 0x82142EF4;
		  /* 82142EF4h */ case    6:  		/* stw R11, <#[R1 + 152]> */
		/* 82142EF4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 82142EF4h case    6:*/		return 0x82142EF8;
	}
	return 0x82142EF8;
} // Block from 82142EDCh-82142EF8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82142EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142EF8);
		  /* 82142EF8h */ case    0:  		/* addi R28, R28, 1 */
		/* 82142EF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82142EF8h case    0:*/		return 0x82142EFC;
		  /* 82142EFCh */ case    1:  		/* addi R8, R8, 4 */
		/* 82142EFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82142EFCh case    1:*/		return 0x82142F00;
		  /* 82142F00h */ case    2:  		/* cmplw CR6, R28, R30 */
		/* 82142F00h case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R30);
		/* 82142F00h case    2:*/		return 0x82142F04;
		  /* 82142F04h */ case    3:  		/* bc 12, CR6_LT, -252 */
		/* 82142F04h case    3:*/		if ( regs.CR[6].lt ) { return 0x82142E08;  }
		/* 82142F04h case    3:*/		return 0x82142F08;
	}
	return 0x82142F08;
} // Block from 82142EF8h-82142F08h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82142F08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142F08);
		  /* 82142F08h */ case    0:  		/* lwz R11, <#[R31 + 180]> */
		/* 82142F08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000B4) );
		/* 82142F08h case    0:*/		return 0x82142F0C;
		  /* 82142F0Ch */ case    1:  		/* mr R25, R17 */
		/* 82142F0Ch case    1:*/		regs.R25 = regs.R17;
		/* 82142F0Ch case    1:*/		return 0x82142F10;
		  /* 82142F10h */ case    2:  		/* lwz R10, <#[R31 + 184]> */
		/* 82142F10h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000000B8) );
		/* 82142F10h case    2:*/		return 0x82142F14;
		  /* 82142F14h */ case    3:  		/* li R19, 1 */
		/* 82142F14h case    3:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 82142F14h case    3:*/		return 0x82142F18;
		  /* 82142F18h */ case    4:  		/* lwz R9, <#[R31 + 132]> */
		/* 82142F18h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000084) );
		/* 82142F18h case    4:*/		return 0x82142F1C;
		  /* 82142F1Ch */ case    5:  		/* stw R11, <#[R1 + 132]> */
		/* 82142F1Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82142F1Ch case    5:*/		return 0x82142F20;
		  /* 82142F20h */ case    6:  		/* stw R10, <#[R1 + 136]> */
		/* 82142F20h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 82142F20h case    6:*/		return 0x82142F24;
		  /* 82142F24h */ case    7:  		/* stw R9, <#[R1 + 128]> */
		/* 82142F24h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000080) );
		/* 82142F24h case    7:*/		return 0x82142F28;
		  /* 82142F28h */ case    8:  		/* addi R11, R1, 144 */
		/* 82142F28h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 82142F28h case    8:*/		return 0x82142F2C;
		  /* 82142F2Ch */ case    9:  		/* lwzx R27, <#[R25 + R11]> */
		/* 82142F2Ch case    9:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 82142F2Ch case    9:*/		return 0x82142F30;
	}
	return 0x82142F30;
} // Block from 82142F08h-82142F30h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82142F30h
// Function '?EmitDCL@CVSProgram@D3DXShader@@MAAJPAVCArgument@2@PAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142F30);
		  /* 82142F30h */ case    0:  		/* cmpwi CR6, R27, -1 */
		/* 82142F30h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0xFFFFFFFF);
		/* 82142F30h case    0:*/		return 0x82142F34;
		  /* 82142F34h */ case    1:  		/* bc 12, CR6_EQ, 392 */
		/* 82142F34h case    1:*/		if ( regs.CR[6].eq ) { return 0x821430BC;  }
		/* 82142F34h case    1:*/		return 0x82142F38;
		  /* 82142F38h */ case    2:  		/* addi R11, R1, 160 */
		/* 82142F38h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xA0);
		/* 82142F38h case    2:*/		return 0x82142F3C;
		  /* 82142F3Ch */ case    3:  		/* lis R4, 9345 */
		/* 82142F3Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82142F3Ch case    3:*/		return 0x82142F40;
		  /* 82142F40h */ case    4:  		/* lwzx R11, <#[R25 + R11]> */
		/* 82142F40h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 82142F40h case    4:*/		return 0x82142F44;
		  /* 82142F44h */ case    5:  		/* subf R11, R27, R11 */
		/* 82142F44h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 82142F44h case    5:*/		return 0x82142F48;
		  /* 82142F48h */ case    6:  		/* addi R30, R11, 1 */
		/* 82142F48h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x1);
		/* 82142F48h case    6:*/		return 0x82142F4C;
		  /* 82142F4Ch */ case    7:  		/* mr R3, R30 */
		/* 82142F4Ch case    7:*/		regs.R3 = regs.R30;
		/* 82142F4Ch case    7:*/		return 0x82142F50;
		  /* 82142F50h */ case    8:  		/* bl -765264 */
		/* 82142F50h case    8:*/		regs.LR = 0x82142F54; return 0x82088200;
		/* 82142F50h case    8:*/		return 0x82142F54;
		  /* 82142F54h */ case    9:  		/* or. R28, R3, R3 */
		/* 82142F54h case    9:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 82142F54h case    9:*/		return 0x82142F58;
		  /* 82142F58h */ case   10:  		/* bc 12, CR0_EQ, 580 */
		/* 82142F58h case   10:*/		if ( regs.CR[0].eq ) { return 0x8214319C;  }
		/* 82142F58h case   10:*/		return 0x82142F5C;
		  /* 82142F5Ch */ case   11:  		/* mr R5, R30 */
		/* 82142F5Ch case   11:*/		regs.R5 = regs.R30;
		/* 82142F5Ch case   11:*/		return 0x82142F60;
		  /* 82142F60h */ case   12:  		/* li R4, 0 */
		/* 82142F60h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82142F60h case   12:*/		return 0x82142F64;
		  /* 82142F64h */ case   13:  		/* mr R3, R28 */
		/* 82142F64h case   13:*/		regs.R3 = regs.R28;
		/* 82142F64h case   13:*/		return 0x82142F68;
		  /* 82142F68h */ case   14:  		/* bl -728104 */
		/* 82142F68h case   14:*/		regs.LR = 0x82142F6C; return 0x82091340;
		/* 82142F68h case   14:*/		return 0x82142F6C;
		  /* 82142F6Ch */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 82142F6Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82142F6Ch case   15:*/		return 0x82142F70;
		  /* 82142F70h */ case   16:  		/* mr R9, R17 */
		/* 82142F70h case   16:*/		regs.R9 = regs.R17;
		/* 82142F70h case   16:*/		return 0x82142F74;
		  /* 82142F74h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 82142F74h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82142F74h case   17:*/		return 0x82142F78;
		  /* 82142F78h */ case   18:  		/* bc 4, CR6_GT, 68 */
		/* 82142F78h case   18:*/		if ( !regs.CR[6].gt ) { return 0x82142FBC;  }
		/* 82142F78h case   18:*/		return 0x82142F7C;
		  /* 82142F7Ch */ case   19:  		/* mr R10, R17 */
		/* 82142F7Ch case   19:*/		regs.R10 = regs.R17;
		/* 82142F7Ch case   19:*/		return 0x82142F80;
		  /* 82142F80h */ case   20:  		/* lwz R11, <#[R31 + 20]> */
		/* 82142F80h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82142F80h case   20:*/		return 0x82142F84;
		  /* 82142F84h */ case   21:  		/* addi R8, R1, 128 */
		/* 82142F84h case   21:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 82142F84h case   21:*/		return 0x82142F88;
		  /* 82142F88h */ case   22:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82142F88h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82142F88h case   22:*/		return 0x82142F8C;
		  /* 82142F8Ch */ case   23:  		/* lwzx R8, <#[R25 + R8]> */
		/* 82142F8Ch case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + regs.R8 + 0x00000000) );
		/* 82142F8Ch case   23:*/		return 0x82142F90;
		  /* 82142F90h */ case   24:  		/* lwz R7, <#[R11 + 4]> */
		/* 82142F90h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82142F90h case   24:*/		return 0x82142F94;
		  /* 82142F94h */ case   25:  		/* cmplw CR6, R8, R7 */
		/* 82142F94h case   25:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 82142F94h case   25:*/		return 0x82142F98;
		  /* 82142F98h */ case   26:  		/* bc 4, CR6_EQ, 16 */
		/* 82142F98h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82142FA8;  }
		/* 82142F98h case   26:*/		return 0x82142F9C;
		  /* 82142F9Ch */ case   27:  		/* lwz R11, <#[R11 + 12]> */
		/* 82142F9Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82142F9Ch case   27:*/		return 0x82142FA0;
		  /* 82142FA0h */ case   28:  		/* subf R11, R27, R11 */
		/* 82142FA0h case   28:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 82142FA0h case   28:*/		return 0x82142FA4;
		  /* 82142FA4h */ case   29:  		/* stbx R19, <#[R11 + R28]> */
		/* 82142FA4h case   29:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82142FA4h case   29:*/		return 0x82142FA8;
	}
	return 0x82142FA8;
} // Block from 82142F30h-82142FA8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82142FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142FA8);
		  /* 82142FA8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82142FA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82142FA8h case    0:*/		return 0x82142FAC;
		  /* 82142FACh */ case    1:  		/* addi R9, R9, 1 */
		/* 82142FACh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82142FACh case    1:*/		return 0x82142FB0;
		  /* 82142FB0h */ case    2:  		/* addi R10, R10, 4 */
		/* 82142FB0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82142FB0h case    2:*/		return 0x82142FB4;
		  /* 82142FB4h */ case    3:  		/* cmplw CR6, R9, R11 */
		/* 82142FB4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82142FB4h case    3:*/		return 0x82142FB8;
		  /* 82142FB8h */ case    4:  		/* bc 12, CR6_LT, -56 */
		/* 82142FB8h case    4:*/		if ( regs.CR[6].lt ) { return 0x82142F80;  }
		/* 82142FB8h case    4:*/		return 0x82142FBC;
	}
	return 0x82142FBC;
} // Block from 82142FA8h-82142FBCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82142FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142FBC);
		  /* 82142FBCh */ case    0:  		/* mr R26, R17 */
		/* 82142FBCh case    0:*/		regs.R26 = regs.R17;
		/* 82142FBCh case    0:*/		return 0x82142FC0;
		  /* 82142FC0h */ case    1:  		/* mr R11, R17 */
		/* 82142FC0h case    1:*/		regs.R11 = regs.R17;
		/* 82142FC0h case    1:*/		return 0x82142FC4;
		  /* 82142FC4h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 82142FC4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82142FC4h case    2:*/		return 0x82142FC8;
		  /* 82142FC8h */ case    3:  		/* bc 12, CR6_EQ, 76 */
		/* 82142FC8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82143014;  }
		/* 82142FC8h case    3:*/		return 0x82142FCC;
		  /* 82142FCCh */ case    4:  		/* b 20 */
		/* 82142FCCh case    4:*/		return 0x82142FE0;
		/* 82142FCCh case    4:*/		return 0x82142FD0;
		  /* 82142FD0h */ case    5:  		/* lbzx R10, <#[R11 + R28]> */
		/* 82142FD0h case    5:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82142FD0h case    5:*/		return 0x82142FD4;
		  /* 82142FD4h */ case    6:  		/* cmplwi CR0, R10, 0 */
		/* 82142FD4h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 82142FD4h case    6:*/		return 0x82142FD8;
		  /* 82142FD8h */ case    7:  		/* bc 4, CR0_EQ, 16 */
		/* 82142FD8h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82142FE8;  }
		/* 82142FD8h case    7:*/		return 0x82142FDC;
		  /* 82142FDCh */ case    8:  		/* addi R11, R11, 1 */
		/* 82142FDCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82142FDCh case    8:*/		return 0x82142FE0;
	}
	return 0x82142FE0;
} // Block from 82142FBCh-82142FE0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82142FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142FE0);
		  /* 82142FE0h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 82142FE0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82142FE0h case    0:*/		return 0x82142FE4;
		  /* 82142FE4h */ case    1:  		/* bc 12, CR6_LT, -20 */
		/* 82142FE4h case    1:*/		if ( regs.CR[6].lt ) { return 0x82142FD0;  }
		/* 82142FE4h case    1:*/		return 0x82142FE8;
	}
	return 0x82142FE8;
} // Block from 82142FE0h-82142FE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82142FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82142FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82142FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82142FE8);
		  /* 82142FE8h */ case    0:  		/* addi R26, R26, 1 */
		/* 82142FE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82142FE8h case    0:*/		return 0x82142FEC;
		  /* 82142FECh */ case    1:  		/* b 20 */
		/* 82142FECh case    1:*/		return 0x82143000;
		/* 82142FECh case    1:*/		return 0x82142FF0;
		  /* 82142FF0h */ case    2:  		/* lbzx R10, <#[R11 + R28]> */
		/* 82142FF0h case    2:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82142FF0h case    2:*/		return 0x82142FF4;
		  /* 82142FF4h */ case    3:  		/* cmplwi CR0, R10, 0 */
		/* 82142FF4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 82142FF4h case    3:*/		return 0x82142FF8;
		  /* 82142FF8h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 82142FF8h case    4:*/		if ( regs.CR[0].eq ) { return 0x82143008;  }
		/* 82142FF8h case    4:*/		return 0x82142FFC;
		  /* 82142FFCh */ case    5:  		/* addi R11, R11, 1 */
		/* 82142FFCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82142FFCh case    5:*/		return 0x82143000;
	}
	return 0x82143000;
} // Block from 82142FE8h-82143000h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82143000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143000);
		  /* 82143000h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 82143000h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82143000h case    0:*/		return 0x82143004;
		  /* 82143004h */ case    1:  		/* bc 12, CR6_LT, -20 */
		/* 82143004h case    1:*/		if ( regs.CR[6].lt ) { return 0x82142FF0;  }
		/* 82143004h case    1:*/		return 0x82143008;
	}
	return 0x82143008;
} // Block from 82143000h-82143008h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82143008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143008);
		  /* 82143008h */ case    0:  		/* addi R11, R11, 1 */
		/* 82143008h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82143008h case    0:*/		return 0x8214300C;
		  /* 8214300Ch */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 8214300Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 8214300Ch case    1:*/		return 0x82143010;
		  /* 82143010h */ case    2:  		/* bc 12, CR6_LT, -64 */
		/* 82143010h case    2:*/		if ( regs.CR[6].lt ) { return 0x82142FD0;  }
		/* 82143010h case    2:*/		return 0x82143014;
	}
	return 0x82143014;
} // Block from 82143008h-82143014h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82143014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143014);
		  /* 82143014h */ case    0:  		/* lis R4, 9345 */
		/* 82143014h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82143014h case    0:*/		return 0x82143018;
		  /* 82143018h */ case    1:  		/* rlwinm R3, R26, 3, 0, 28 */
		/* 82143018h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R3,regs.R26);
		/* 82143018h case    1:*/		return 0x8214301C;
		  /* 8214301Ch */ case    2:  		/* bl -765468 */
		/* 8214301Ch case    2:*/		regs.LR = 0x82143020; return 0x82088200;
		/* 8214301Ch case    2:*/		return 0x82143020;
		  /* 82143020h */ case    3:  		/* addi R11, R1, 88 */
		/* 82143020h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x58);
		/* 82143020h case    3:*/		return 0x82143024;
		  /* 82143024h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82143024h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82143024h case    4:*/		return 0x82143028;
		  /* 82143028h */ case    5:  		/* stwx R3, <#[R25 + R11]> */
		/* 82143028h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 82143028h case    5:*/		return 0x8214302C;
		  /* 8214302Ch */ case    6:  		/* bc 12, CR0_EQ, 356 */
		/* 8214302Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x82143190;  }
		/* 8214302Ch case    6:*/		return 0x82143030;
		  /* 82143030h */ case    7:  		/* mr R11, R17 */
		/* 82143030h case    7:*/		regs.R11 = regs.R17;
		/* 82143030h case    7:*/		return 0x82143034;
		  /* 82143034h */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 82143034h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82143034h case    8:*/		return 0x82143038;
		  /* 82143038h */ case    9:  		/* bc 12, CR6_EQ, 112 */
		/* 82143038h case    9:*/		if ( regs.CR[6].eq ) { return 0x821430A8;  }
		/* 82143038h case    9:*/		return 0x8214303C;
		  /* 8214303Ch */ case   10:  		/* mr R10, R17 */
		/* 8214303Ch case   10:*/		regs.R10 = regs.R17;
		/* 8214303Ch case   10:*/		return 0x82143040;
		  /* 82143040h */ case   11:  		/* b 20 */
		/* 82143040h case   11:*/		return 0x82143054;
		/* 82143040h case   11:*/		return 0x82143044;
		  /* 82143044h */ case   12:  		/* lbzx R9, <#[R11 + R28]> */
		/* 82143044h case   12:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 82143044h case   12:*/		return 0x82143048;
		  /* 82143048h */ case   13:  		/* cmplwi CR0, R9, 0 */
		/* 82143048h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 82143048h case   13:*/		return 0x8214304C;
		  /* 8214304Ch */ case   14:  		/* bc 4, CR0_EQ, 16 */
		/* 8214304Ch case   14:*/		if ( !regs.CR[0].eq ) { return 0x8214305C;  }
		/* 8214304Ch case   14:*/		return 0x82143050;
		  /* 82143050h */ case   15:  		/* addi R11, R11, 1 */
		/* 82143050h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82143050h case   15:*/		return 0x82143054;
	}
	return 0x82143054;
} // Block from 82143014h-82143054h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82143054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143054);
		  /* 82143054h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 82143054h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82143054h case    0:*/		return 0x82143058;
		  /* 82143058h */ case    1:  		/* bc 12, CR6_LT, -20 */
		/* 82143058h case    1:*/		if ( regs.CR[6].lt ) { return 0x82143044;  }
		/* 82143058h case    1:*/		return 0x8214305C;
	}
	return 0x8214305C;
} // Block from 82143054h-8214305Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214305Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214305C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214305C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214305C);
		  /* 8214305Ch */ case    0:  		/* add R9, R27, R11 */
		/* 8214305Ch case    0:*/		cpu::op::add<0>(regs,&regs.R9,regs.R27,regs.R11);
		/* 8214305Ch case    0:*/		return 0x82143060;
		  /* 82143060h */ case    1:  		/* stwx R9, <#[R3 + R10]> */
		/* 82143060h case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 82143060h case    1:*/		return 0x82143064;
		  /* 82143064h */ case    2:  		/* addi R10, R10, 4 */
		/* 82143064h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82143064h case    2:*/		return 0x82143068;
		  /* 82143068h */ case    3:  		/* b 20 */
		/* 82143068h case    3:*/		return 0x8214307C;
		/* 82143068h case    3:*/		return 0x8214306C;
		  /* 8214306Ch */ case    4:  		/* lbzx R9, <#[R11 + R28]> */
		/* 8214306Ch case    4:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8214306Ch case    4:*/		return 0x82143070;
		  /* 82143070h */ case    5:  		/* cmplwi CR0, R9, 0 */
		/* 82143070h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 82143070h case    5:*/		return 0x82143074;
		  /* 82143074h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 82143074h case    6:*/		if ( regs.CR[0].eq ) { return 0x82143084;  }
		/* 82143074h case    6:*/		return 0x82143078;
		  /* 82143078h */ case    7:  		/* addi R11, R11, 1 */
		/* 82143078h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82143078h case    7:*/		return 0x8214307C;
	}
	return 0x8214307C;
} // Block from 8214305Ch-8214307Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214307Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214307C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214307C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214307C);
		  /* 8214307Ch */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 8214307Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 8214307Ch case    0:*/		return 0x82143080;
		  /* 82143080h */ case    1:  		/* bc 12, CR6_LT, -20 */
		/* 82143080h case    1:*/		if ( regs.CR[6].lt ) { return 0x8214306C;  }
		/* 82143080h case    1:*/		return 0x82143084;
	}
	return 0x82143084;
} // Block from 8214307Ch-82143084h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82143084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143084);
		  /* 82143084h */ case    0:  		/* add R9, R3, R10 */
		/* 82143084h case    0:*/		cpu::op::add<0>(regs,&regs.R9,regs.R3,regs.R10);
		/* 82143084h case    0:*/		return 0x82143088;
		  /* 82143088h */ case    1:  		/* lwz R9, <#[R9 - 4]> */
		/* 82143088h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0xFFFFFFFC) );
		/* 82143088h case    1:*/		return 0x8214308C;
		  /* 8214308Ch */ case    2:  		/* subf R9, R9, R27 */
		/* 8214308Ch case    2:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R27);
		/* 8214308Ch case    2:*/		return 0x82143090;
		  /* 82143090h */ case    3:  		/* add R9, R9, R11 */
		/* 82143090h case    3:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 82143090h case    3:*/		return 0x82143094;
		  /* 82143094h */ case    4:  		/* addi R11, R11, 1 */
		/* 82143094h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82143094h case    4:*/		return 0x82143098;
		  /* 82143098h */ case    5:  		/* stwx R9, <#[R3 + R10]> */
		/* 82143098h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 82143098h case    5:*/		return 0x8214309C;
		  /* 8214309Ch */ case    6:  		/* addi R10, R10, 4 */
		/* 8214309Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8214309Ch case    6:*/		return 0x821430A0;
		  /* 821430A0h */ case    7:  		/* cmplw CR6, R11, R30 */
		/* 821430A0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821430A0h case    7:*/		return 0x821430A4;
		  /* 821430A4h */ case    8:  		/* bc 12, CR6_LT, -96 */
		/* 821430A4h case    8:*/		if ( regs.CR[6].lt ) { return 0x82143044;  }
		/* 821430A4h case    8:*/		return 0x821430A8;
	}
	return 0x821430A8;
} // Block from 82143084h-821430A8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821430A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821430A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821430A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821430A8);
		  /* 821430A8h */ case    0:  		/* lis R4, 9345 */
		/* 821430A8h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821430A8h case    0:*/		return 0x821430AC;
		  /* 821430ACh */ case    1:  		/* mr R3, R28 */
		/* 821430ACh case    1:*/		regs.R3 = regs.R28;
		/* 821430ACh case    1:*/		return 0x821430B0;
		  /* 821430B0h */ case    2:  		/* bl -765304 */
		/* 821430B0h case    2:*/		regs.LR = 0x821430B4; return 0x82088338;
		/* 821430B0h case    2:*/		return 0x821430B4;
		  /* 821430B4h */ case    3:  		/* addi R11, R1, 104 */
		/* 821430B4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x68);
		/* 821430B4h case    3:*/		return 0x821430B8;
		  /* 821430B8h */ case    4:  		/* stwx R26, <#[R25 + R11]> */
		/* 821430B8h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 821430B8h case    4:*/		return 0x821430BC;
	}
	return 0x821430BC;
} // Block from 821430A8h-821430BCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821430BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821430BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821430BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821430BC);
		  /* 821430BCh */ case    0:  		/* addi R25, R25, 4 */
		/* 821430BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 821430BCh case    0:*/		return 0x821430C0;
		  /* 821430C0h */ case    1:  		/* cmplwi CR6, R25, 12 */
		/* 821430C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x0000000C);
		/* 821430C0h case    1:*/		return 0x821430C4;
		  /* 821430C4h */ case    2:  		/* bc 12, CR6_LT, -412 */
		/* 821430C4h case    2:*/		if ( regs.CR[6].lt ) { return 0x82142F28;  }
		/* 821430C4h case    2:*/		return 0x821430C8;
		  /* 821430C8h */ case    3:  		/* rlwinm R30, R18, 5, 0, 26 */
		/* 821430C8h case    3:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R30,regs.R18);
		/* 821430C8h case    3:*/		return 0x821430CC;
		  /* 821430CCh */ case    4:  		/* lis R4, 9345 */
		/* 821430CCh case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821430CCh case    4:*/		return 0x821430D0;
		  /* 821430D0h */ case    5:  		/* mr R3, R30 */
		/* 821430D0h case    5:*/		regs.R3 = regs.R30;
		/* 821430D0h case    5:*/		return 0x821430D4;
		  /* 821430D4h */ case    6:  		/* bl -765652 */
		/* 821430D4h case    6:*/		regs.LR = 0x821430D8; return 0x82088200;
		/* 821430D4h case    6:*/		return 0x821430D8;
		  /* 821430D8h */ case    7:  		/* or. R15, R3, R3 */
		/* 821430D8h case    7:*/		cpu::op::or<1>(regs,&regs.R15,regs.R3,regs.R3);
		/* 821430D8h case    7:*/		return 0x821430DC;
		  /* 821430DCh */ case    8:  		/* bc 12, CR0_EQ, 192 */
		/* 821430DCh case    8:*/		if ( regs.CR[0].eq ) { return 0x8214319C;  }
		/* 821430DCh case    8:*/		return 0x821430E0;
		  /* 821430E0h */ case    9:  		/* cmplwi CR6, R24, 64 */
		/* 821430E0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000040);
		/* 821430E0h case    9:*/		return 0x821430E4;
		  /* 821430E4h */ case   10:  		/* bc 12, CR6_GT, 2944 */
		/* 821430E4h case   10:*/		if ( regs.CR[6].gt ) { return 0x82143C64;  }
		/* 821430E4h case   10:*/		return 0x821430E8;
		  /* 821430E8h */ case   11:  		/* mr R5, R30 */
		/* 821430E8h case   11:*/		regs.R5 = regs.R30;
		/* 821430E8h case   11:*/		return 0x821430EC;
		  /* 821430ECh */ case   12:  		/* li R4, 0 */
		/* 821430ECh case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821430ECh case   12:*/		return 0x821430F0;
		  /* 821430F0h */ case   13:  		/* mr R3, R15 */
		/* 821430F0h case   13:*/		regs.R3 = regs.R15;
		/* 821430F0h case   13:*/		return 0x821430F4;
		  /* 821430F4h */ case   14:  		/* bl -728500 */
		/* 821430F4h case   14:*/		regs.LR = 0x821430F8; return 0x82091340;
		/* 821430F4h case   14:*/		return 0x821430F8;
		  /* 821430F8h */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 821430F8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821430F8h case   15:*/		return 0x821430FC;
		  /* 821430FCh */ case   16:  		/* mr R7, R17 */
		/* 821430FCh case   16:*/		regs.R7 = regs.R17;
		/* 821430FCh case   16:*/		return 0x82143100;
		  /* 82143100h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 82143100h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82143100h case   17:*/		return 0x82143104;
		  /* 82143104h */ case   18:  		/* bc 4, CR6_GT, 220 */
		/* 82143104h case   18:*/		if ( !regs.CR[6].gt ) { return 0x821431E0;  }
		/* 82143104h case   18:*/		return 0x82143108;
		  /* 82143108h */ case   19:  		/* mr R8, R17 */
		/* 82143108h case   19:*/		regs.R8 = regs.R17;
		/* 82143108h case   19:*/		return 0x8214310C;
		  /* 8214310Ch */ case   20:  		/* lwz R11, <#[R31 + 20]> */
		/* 8214310Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8214310Ch case   20:*/		return 0x82143110;
		  /* 82143110h */ case   21:  		/* lwz R10, <#[R31 + 120]> */
		/* 82143110h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000078) );
		/* 82143110h case   21:*/		return 0x82143114;
		  /* 82143114h */ case   22:  		/* lwzx R11, <#[R8 + R11]> */
		/* 82143114h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82143114h case   22:*/		return 0x82143118;
		  /* 82143118h */ case   23:  		/* lwz R9, <#[R11 + 4]> */
		/* 82143118h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82143118h case   23:*/		return 0x8214311C;
		  /* 8214311Ch */ case   24:  		/* cmplw CR6, R10, R9 */
		/* 8214311Ch case   24:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8214311Ch case   24:*/		return 0x82143120;
		  /* 82143120h */ case   25:  		/* bc 4, CR6_EQ, 44 */
		/* 82143120h case   25:*/		if ( !regs.CR[6].eq ) { return 0x8214314C;  }
		/* 82143120h case   25:*/		return 0x82143124;
		  /* 82143124h */ case   26:  		/* lwz R10, <#[R11 + 8]> */
		/* 82143124h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82143124h case   26:*/		return 0x82143128;
		  /* 82143128h */ case   27:  		/* cmpwi CR6, R10, -1 */
		/* 82143128h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82143128h case   27:*/		return 0x8214312C;
		  /* 8214312Ch */ case   28:  		/* bc 4, CR6_EQ, 32 */
		/* 8214312Ch case   28:*/		if ( !regs.CR[6].eq ) { return 0x8214314C;  }
		/* 8214312Ch case   28:*/		return 0x82143130;
		  /* 82143130h */ case   29:  		/* lwz R9, <#[R11 + 12]> */
		/* 82143130h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82143130h case   29:*/		return 0x82143134;
		  /* 82143134h */ case   30:  		/* lfd FR0, <#[R11 + 32]> */
		/* 82143134h case   30:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 82143134h case   30:*/		return 0x82143138;
		  /* 82143138h */ case   31:  		/* lwz R10, <#[R11 + 16]> */
		/* 82143138h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82143138h case   31:*/		return 0x8214313C;
		  /* 8214313Ch */ case   32:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8214313Ch case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8214313Ch case   32:*/		return 0x82143140;
		  /* 82143140h */ case   33:  		/* add R10, R9, R10 */
		/* 82143140h case   33:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82143140h case   33:*/		return 0x82143144;
		  /* 82143144h */ case   34:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82143144h case   34:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82143144h case   34:*/		return 0x82143148;
		  /* 82143148h */ case   35:  		/* stfdx FR0, <#[R10 + R15]> */
		/* 82143148h case   35:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R10 + regs.R15 + 0x00000000) );
		/* 82143148h case   35:*/		return 0x8214314C;
	}
	return 0x8214314C;
} // Block from 821430BCh-8214314Ch (36 instructions)

//////////////////////////////////////////////////////
// Block at 8214314Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214314C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214314C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214314C);
		  /* 8214314Ch */ case    0:  		/* lis R10, 21592 */
		/* 8214314Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x5458);
		/* 8214314Ch case    0:*/		return 0x82143150;
		  /* 82143150h */ case    1:  		/* lwz R9, <#[R31 + 200]> */
		/* 82143150h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000000C8) );
		/* 82143150h case    1:*/		return 0x82143154;
		  /* 82143154h */ case    2:  		/* ori R10, R10, 256 */
		/* 82143154h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x100);
		/* 82143154h case    2:*/		return 0x82143158;
		  /* 82143158h */ case    3:  		/* cmplw CR6, R9, R10 */
		/* 82143158h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82143158h case    3:*/		return 0x8214315C;
		  /* 8214315Ch */ case    4:  		/* bc 4, CR6_EQ, 112 */
		/* 8214315Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821431CC;  }
		/* 8214315Ch case    4:*/		return 0x82143160;
		  /* 82143160h */ case    5:  		/* lwz R9, <#[R11 + 4]> */
		/* 82143160h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82143160h case    5:*/		return 0x82143164;
		  /* 82143164h */ case    6:  		/* lwz R10, <#[R31 + 128]> */
		/* 82143164h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000080) );
		/* 82143164h case    6:*/		return 0x82143168;
		  /* 82143168h */ case    7:  		/* cmplw CR6, R10, R9 */
		/* 82143168h case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82143168h case    7:*/		return 0x8214316C;
		  /* 8214316Ch */ case    8:  		/* bc 4, CR6_EQ, 72 */
		/* 8214316Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x821431B4;  }
		/* 8214316Ch case    8:*/		return 0x82143170;
		  /* 82143170h */ case    9:  		/* lwz R10, <#[R11 + 12]> */
		/* 82143170h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82143170h case    9:*/		return 0x82143174;
		  /* 82143174h */ case   10:  		/* cmplwi CR6, R10, 1 */
		/* 82143174h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 82143174h case   10:*/		return 0x82143178;
		  /* 82143178h */ case   11:  		/* bc 12, CR6_GT, 172 */
		/* 82143178h case   11:*/		if ( regs.CR[6].gt ) { return 0x82143224;  }
		/* 82143178h case   11:*/		return 0x8214317C;
		  /* 8214317Ch */ case   12:  		/* lbz R10, <#[R11 + 111]> */
		/* 8214317Ch case   12:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000006F) );
		/* 8214317Ch case   12:*/		return 0x82143180;
		  /* 82143180h */ case   13:  		/* cmplwi CR6, R10, 2 */
		/* 82143180h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 82143180h case   13:*/		return 0x82143184;
		  /* 82143184h */ case   14:  		/* bc 4, CR6_EQ, 36 */
		/* 82143184h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821431A8;  }
		/* 82143184h case   14:*/		return 0x82143188;
		  /* 82143188h */ case   15:  		/* stw R17, <#[R11 + 12]> */
		/* 82143188h case   15:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x0000000C) );
		/* 82143188h case   15:*/		return 0x8214318C;
		  /* 8214318Ch */ case   16:  		/* b 40 */
		/* 8214318Ch case   16:*/		return 0x821431B4;
		/* 8214318Ch case   16:*/		return 0x82143190;
	}
	return 0x82143190;
} // Block from 8214314Ch-82143190h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82143190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143190);
		  /* 82143190h */ case    0:  		/* lis R4, 9345 */
		/* 82143190h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82143190h case    0:*/		return 0x82143194;
		  /* 82143194h */ case    1:  		/* mr R3, R28 */
		/* 82143194h case    1:*/		regs.R3 = regs.R28;
		/* 82143194h case    1:*/		return 0x82143198;
		  /* 82143198h */ case    2:  		/* bl -765536 */
		/* 82143198h case    2:*/		regs.LR = 0x8214319C; return 0x82088338;
		/* 82143198h case    2:*/		return 0x8214319C;
	}
	return 0x8214319C;
} // Block from 82143190h-8214319Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214319Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214319C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214319C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214319C);
		  /* 8214319Ch */ case    0:  		/* lis R29, -32761 */
		/* 8214319Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8007);
		/* 8214319Ch case    0:*/		return 0x821431A0;
		  /* 821431A0h */ case    1:  		/* ori R29, R29, 14 */
		/* 821431A0h case    1:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0xE);
		/* 821431A0h case    1:*/		return 0x821431A4;
		  /* 821431A4h */ case    2:  		/* b 2752 */
		/* 821431A4h case    2:*/		return 0x82143C64;
		/* 821431A4h case    2:*/		return 0x821431A8;
	}
	return 0x821431A8;
} // Block from 8214319Ch-821431A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821431A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821431A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821431A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821431A8);
		  /* 821431A8h */ case    0:  		/* cmplwi CR6, R10, 3 */
		/* 821431A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 821431A8h case    0:*/		return 0x821431AC;
		  /* 821431ACh */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 821431ACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821431B4;  }
		/* 821431ACh case    1:*/		return 0x821431B0;
		  /* 821431B0h */ case    2:  		/* stw R19, <#[R11 + 12]> */
		/* 821431B0h case    2:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x0000000C) );
		/* 821431B0h case    2:*/		return 0x821431B4;
	}
	return 0x821431B4;
} // Block from 821431A8h-821431B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821431B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821431B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821431B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821431B4);
		  /* 821431B4h */ case    0:  		/* lwz R10, <#[R31 + 132]> */
		/* 821431B4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000084) );
		/* 821431B4h case    0:*/		return 0x821431B8;
		  /* 821431B8h */ case    1:  		/* cmplw CR6, R10, R9 */
		/* 821431B8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821431B8h case    1:*/		return 0x821431BC;
		  /* 821431BCh */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 821431BCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821431CC;  }
		/* 821431BCh case    2:*/		return 0x821431C0;
		  /* 821431C0h */ case    3:  		/* lwz R11, <#[R11 + 12]> */
		/* 821431C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821431C0h case    3:*/		return 0x821431C4;
		  /* 821431C4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821431C4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821431C4h case    4:*/		return 0x821431C8;
		  /* 821431C8h */ case    5:  		/* bc 12, CR6_GT, 104 */
		/* 821431C8h case    5:*/		if ( regs.CR[6].gt ) { return 0x82143230;  }
		/* 821431C8h case    5:*/		return 0x821431CC;
	}
	return 0x821431CC;
} // Block from 821431B4h-821431CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821431CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821431CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821431CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821431CC);
		  /* 821431CCh */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821431CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821431CCh case    0:*/		return 0x821431D0;
		  /* 821431D0h */ case    1:  		/* addi R7, R7, 1 */
		/* 821431D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821431D0h case    1:*/		return 0x821431D4;
		  /* 821431D4h */ case    2:  		/* addi R8, R8, 4 */
		/* 821431D4h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821431D4h case    2:*/		return 0x821431D8;
		  /* 821431D8h */ case    3:  		/* cmplw CR6, R7, R11 */
		/* 821431D8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 821431D8h case    3:*/		return 0x821431DC;
		  /* 821431DCh */ case    4:  		/* bc 12, CR6_LT, -208 */
		/* 821431DCh case    4:*/		if ( regs.CR[6].lt ) { return 0x8214310C;  }
		/* 821431DCh case    4:*/		return 0x821431E0;
	}
	return 0x821431E0;
} // Block from 821431CCh-821431E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821431E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821431E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821431E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821431E0);
		  /* 821431E0h */ case    0:  		/* lwz R20, <#[R31 + 12]> */
		/* 821431E0h case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R31 + 0x0000000C) );
		/* 821431E0h case    0:*/		return 0x821431E4;
		  /* 821431E4h */ case    1:  		/* mr R21, R17 */
		/* 821431E4h case    1:*/		regs.R21 = regs.R17;
		/* 821431E4h case    1:*/		return 0x821431E8;
		  /* 821431E8h */ case    2:  		/* cmplwi CR6, R20, 0 */
		/* 821431E8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821431E8h case    2:*/		return 0x821431EC;
		  /* 821431ECh */ case    3:  		/* bc 12, CR6_EQ, 1256 */
		/* 821431ECh case    3:*/		if ( regs.CR[6].eq ) { return 0x821436D4;  }
		/* 821431ECh case    3:*/		return 0x821431F0;
		  /* 821431F0h */ case    4:  		/* mr R22, R17 */
		/* 821431F0h case    4:*/		regs.R22 = regs.R17;
		/* 821431F0h case    4:*/		return 0x821431F4;
		  /* 821431F4h */ case    5:  		/* lwz R11, <#[R31 + 24]> */
		/* 821431F4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821431F4h case    5:*/		return 0x821431F8;
		  /* 821431F8h */ case    6:  		/* mr R26, R17 */
		/* 821431F8h case    6:*/		regs.R26 = regs.R17;
		/* 821431F8h case    6:*/		return 0x821431FC;
		  /* 821431FCh */ case    7:  		/* lwzx R28, <#[R22 + R11]> */
		/* 821431FCh case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R22 + regs.R11 + 0x00000000) );
		/* 821431FCh case    7:*/		return 0x82143200;
		  /* 82143200h */ case    8:  		/* lwz R11, <#[R28]> */
		/* 82143200h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82143200h case    8:*/		return 0x82143204;
		  /* 82143204h */ case    9:  		/* stw R17, <#[R28 + 40]> */
		/* 82143204h case    9:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R28 + 0x00000028) );
		/* 82143204h case    9:*/		return 0x82143208;
		  /* 82143208h */ case   10:  		/* rlwinm. R25, R11, 0, 12, 31 */
		/* 82143208h case   10:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R25,regs.R11);
		/* 82143208h case   10:*/		return 0x8214320C;
		  /* 8214320Ch */ case   11:  		/* rlwinm R23, R11, 0, 0, 11 */
		/* 8214320Ch case   11:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R23,regs.R11);
		/* 8214320Ch case   11:*/		return 0x82143210;
		  /* 82143210h */ case   12:  		/* bc 4, CR0_EQ, 60 */
		/* 82143210h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8214324C;  }
		/* 82143210h case   12:*/		return 0x82143214;
		  /* 82143214h */ case   13:  		/* mr R3, R31 */
		/* 82143214h case   13:*/		regs.R3 = regs.R31;
		/* 82143214h case   13:*/		return 0x82143218;
		  /* 82143218h */ case   14:  		/* mr R4, R28 */
		/* 82143218h case   14:*/		regs.R4 = regs.R28;
		/* 82143218h case   14:*/		return 0x8214321C;
		  /* 8214321Ch */ case   15:  		/* bl -286132 */
		/* 8214321Ch case   15:*/		regs.LR = 0x82143220; return 0x820FD468;
		/* 8214321Ch case   15:*/		return 0x82143220;
		  /* 82143220h */ case   16:  		/* b 1184 */
		/* 82143220h case   16:*/		return 0x821436C0;
		/* 82143220h case   16:*/		return 0x82143224;
	}
	return 0x82143224;
} // Block from 821431E0h-82143224h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82143224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143224);
		  /* 82143224h */ case    0:  		/* lis R11, -32253 */
		/* 82143224h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82143224h case    0:*/		return 0x82143228;
		  /* 82143228h */ case    1:  		/* addi R6, R11, 24832 */
		/* 82143228h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x6100);
		/* 82143228h case    1:*/		return 0x8214322C;
		  /* 8214322Ch */ case    2:  		/* b 12 */
		/* 8214322Ch case    2:*/		return 0x82143238;
		/* 8214322Ch case    2:*/		return 0x82143230;
	}
	return 0x82143230;
} // Block from 82143224h-82143230h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82143230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143230);
		  /* 82143230h */ case    0:  		/* lis R11, -32253 */
		/* 82143230h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82143230h case    0:*/		return 0x82143234;
		  /* 82143234h */ case    1:  		/* addi R6, R11, 24800 */
		/* 82143234h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x60E0);
		/* 82143234h case    1:*/		return 0x82143238;
	}
	return 0x82143238;
} // Block from 82143230h-82143238h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82143238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143238);
		  /* 82143238h */ case    0:  		/* li R5, 4500 */
		/* 82143238h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1194);
		/* 82143238h case    0:*/		return 0x8214323C;
		  /* 8214323Ch */ case    1:  		/* li R4, 0 */
		/* 8214323Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214323Ch case    1:*/		return 0x82143240;
		  /* 82143240h */ case    2:  		/* mr R3, R31 */
		/* 82143240h case    2:*/		regs.R3 = regs.R31;
		/* 82143240h case    2:*/		return 0x82143244;
		  /* 82143244h */ case    3:  		/* bl -215828 */
		/* 82143244h case    3:*/		regs.LR = 0x82143248; return 0x8210E730;
		/* 82143244h case    3:*/		return 0x82143248;
		  /* 82143248h */ case    4:  		/* b 2588 */
		/* 82143248h case    4:*/		return 0x82143C64;
		/* 82143248h case    4:*/		return 0x8214324C;
	}
	return 0x8214324C;
} // Block from 82143238h-8214324Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214324Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214324C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214324C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214324C);
		  /* 8214324Ch */ case    0:  		/* lwz R7, <#[R28 + 16]> */
		/* 8214324Ch case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x00000010) );
		/* 8214324Ch case    0:*/		return 0x82143250;
		  /* 82143250h */ case    1:  		/* twi 6, R25, 0 */
		/* 82143250h case    1:*/		cpu::op::tw<6>(regs, 0x82143250, regs.R25, 0x00000000);
		/* 82143250h case    1:*/		return 0x82143254;
		  /* 82143254h */ case    2:  		/* lwz R11, <#[R28 + 4]> */
		/* 82143254h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82143254h case    2:*/		return 0x82143258;
		  /* 82143258h */ case    3:  		/* lwz R6, <#[R31 + 20]> */
		/* 82143258h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 82143258h case    3:*/		return 0x8214325C;
		  /* 8214325Ch */ case    4:  		/* divwu. R24, R11, R25 */
		/* 8214325Ch case    4:*/		cpu::op::divwu<1>(regs,&regs.R24,regs.R11,regs.R25);
		/* 8214325Ch case    4:*/		return 0x82143260;
		  /* 82143260h */ case    5:  		/* lwz R11, <#[R7]> */
		/* 82143260h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 82143260h case    5:*/		return 0x82143264;
		  /* 82143264h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82143264h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82143264h case    6:*/		return 0x82143268;
		  /* 82143268h */ case    7:  		/* lwzx R11, <#[R11 + R6]> */
		/* 82143268h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 82143268h case    7:*/		return 0x8214326C;
		  /* 8214326Ch */ case    8:  		/* lwz R8, <#[R11 + 16]> */
		/* 8214326Ch case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 8214326Ch case    8:*/		return 0x82143270;
		  /* 82143270h */ case    9:  		/* stw R8, <#[R1 + 128]> */
		/* 82143270h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 82143270h case    9:*/		return 0x82143274;
		  /* 82143274h */ case   10:  		/* bc 12, CR0_EQ, 56 */
		/* 82143274h case   10:*/		if ( regs.CR[0].eq ) { return 0x821432AC;  }
		/* 82143274h case   10:*/		return 0x82143278;
		  /* 82143278h */ case   11:  		/* lwz R9, <#[R28 + 8]> */
		/* 82143278h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 82143278h case   11:*/		return 0x8214327C;
		  /* 8214327Ch */ case   12:  		/* addi R10, R1, 128 */
		/* 8214327Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8214327Ch case   12:*/		return 0x82143280;
		  /* 82143280h */ case   13:  		/* mtspr CTR, R24 */
		/* 82143280h case   13:*/		regs.CTR = regs.R24;
		/* 82143280h case   13:*/		return 0x82143284;
		  /* 82143284h */ case   14:  		/* mr R11, R17 */
		/* 82143284h case   14:*/		regs.R11 = regs.R17;
		/* 82143284h case   14:*/		return 0x82143288;
		  /* 82143288h */ case   15:  		/* rlwinm R8, R25, 2, 0, 29 */
		/* 82143288h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R25);
		/* 82143288h case   15:*/		return 0x8214328C;
		  /* 8214328Ch */ case   16:  		/* lwzx R5, <#[R9 + R11]> */
		/* 8214328Ch case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8214328Ch case   16:*/		return 0x82143290;
		  /* 82143290h */ case   17:  		/* add R11, R8, R11 */
		/* 82143290h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82143290h case   17:*/		return 0x82143294;
		  /* 82143294h */ case   18:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 82143294h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 82143294h case   18:*/		return 0x82143298;
		  /* 82143298h */ case   19:  		/* lwzx R5, <#[R5 + R6]> */
		/* 82143298h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R6 + 0x00000000) );
		/* 82143298h case   19:*/		return 0x8214329C;
		  /* 8214329Ch */ case   20:  		/* lwz R5, <#[R5 + 16]> */
		/* 8214329Ch case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000010) );
		/* 8214329Ch case   20:*/		return 0x821432A0;
		  /* 821432A0h */ case   21:  		/* stwu R5, <#[R10 + 4]> */
		/* 821432A0h case   21:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821432A0h case   21:*/		return 0x821432A4;
		  /* 821432A4h */ case   22:  		/* bc 16, CR0_LT, -24 */
		/* 821432A4h case   22:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8214328C;  }
		/* 821432A4h case   22:*/		return 0x821432A8;
		  /* 821432A8h */ case   23:  		/* lwz R8, <#[R1 + 128]> */
		/* 821432A8h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 821432A8h case   23:*/		return 0x821432AC;
	}
	return 0x821432AC;
} // Block from 8214324Ch-821432ACh (24 instructions)

//////////////////////////////////////////////////////
// Block at 821432ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821432AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821432AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821432AC);
		  /* 821432ACh */ case    0:  		/* lwz R11, <#[R28 + 12]> */
		/* 821432ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821432ACh case    0:*/		return 0x821432B0;
		  /* 821432B0h */ case    1:  		/* cmplw CR6, R25, R11 */
		/* 821432B0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 821432B0h case    1:*/		return 0x821432B4;
		  /* 821432B4h */ case    2:  		/* bc 4, CR6_EQ, 80 */
		/* 821432B4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82143304;  }
		/* 821432B4h case    2:*/		return 0x821432B8;
		  /* 821432B8h */ case    3:  		/* cmplwi CR6, R25, 1 */
		/* 821432B8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000001);
		/* 821432B8h case    3:*/		return 0x821432BC;
		  /* 821432BCh */ case    4:  		/* bc 4, CR6_GT, 72 */
		/* 821432BCh case    4:*/		if ( !regs.CR[6].gt ) { return 0x82143304;  }
		/* 821432BCh case    4:*/		return 0x821432C0;
		  /* 821432C0h */ case    5:  		/* addi R11, R25, -1 */
		/* 821432C0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 821432C0h case    5:*/		return 0x821432C4;
		  /* 821432C4h */ case    6:  		/* addi R10, R8, 1 */
		/* 821432C4h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x1);
		/* 821432C4h case    6:*/		return 0x821432C8;
		  /* 821432C8h */ case    7:  		/* li R9, 4 */
		/* 821432C8h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 821432C8h case    7:*/		return 0x821432CC;
		  /* 821432CCh */ case    8:  		/* mtspr CTR, R11 */
		/* 821432CCh case    8:*/		regs.CTR = regs.R11;
		/* 821432CCh case    8:*/		return 0x821432D0;
		  /* 821432D0h */ case    9:  		/* lwzx R11, <#[R7 + R9]> */
		/* 821432D0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 821432D0h case    9:*/		return 0x821432D4;
		  /* 821432D4h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821432D4h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821432D4h case   10:*/		return 0x821432D8;
		  /* 821432D8h */ case   11:  		/* lwzx R11, <#[R11 + R6]> */
		/* 821432D8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 821432D8h case   11:*/		return 0x821432DC;
		  /* 821432DCh */ case   12:  		/* lwz R11, <#[R11 + 16]> */
		/* 821432DCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821432DCh case   12:*/		return 0x821432E0;
		  /* 821432E0h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 821432E0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821432E0h case   13:*/		return 0x821432E4;
		  /* 821432E4h */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 821432E4h case   14:*/		if ( regs.CR[6].eq ) { return 0x821432F0;  }
		/* 821432E4h case   14:*/		return 0x821432E8;
		  /* 821432E8h */ case   15:  		/* mr R26, R19 */
		/* 821432E8h case   15:*/		regs.R26 = regs.R19;
		/* 821432E8h case   15:*/		return 0x821432EC;
		  /* 821432ECh */ case   16:  		/* b 12 */
		/* 821432ECh case   16:*/		return 0x821432F8;
		/* 821432ECh case   16:*/		return 0x821432F0;
	}
	return 0x821432F0;
} // Block from 821432ACh-821432F0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821432F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821432F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821432F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821432F0);
		  /* 821432F0h */ case    0:  		/* addi R8, R8, 1 */
		/* 821432F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821432F0h case    0:*/		return 0x821432F4;
		  /* 821432F4h */ case    1:  		/* addi R10, R10, 1 */
		/* 821432F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821432F4h case    1:*/		return 0x821432F8;
	}
	return 0x821432F8;
} // Block from 821432F0h-821432F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821432F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821432F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821432F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821432F8);
		  /* 821432F8h */ case    0:  		/* addi R9, R9, 4 */
		/* 821432F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821432F8h case    0:*/		return 0x821432FC;
		  /* 821432FCh */ case    1:  		/* bc 16, CR0_LT, -44 */
		/* 821432FCh case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821432D0;  }
		/* 821432FCh case    1:*/		return 0x82143300;
		  /* 82143300h */ case    2:  		/* stw R8, <#[R1 + 128]> */
		/* 82143300h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 82143300h case    2:*/		return 0x82143304;
	}
	return 0x82143304;
} // Block from 821432F8h-82143304h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82143304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143304);
		  /* 82143304h */ case    0:  		/* cmplwi CR6, R24, 2 */
		/* 82143304h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000002);
		/* 82143304h case    0:*/		return 0x82143308;
		  /* 82143308h */ case    1:  		/* bc 4, CR6_EQ, 388 */
		/* 82143308h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214348C;  }
		/* 82143308h case    1:*/		return 0x8214330C;
		  /* 8214330Ch */ case    2:  		/* cmpwi CR6, R26, 0 */
		/* 8214330Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 8214330Ch case    2:*/		return 0x82143310;
		  /* 82143310h */ case    3:  		/* bc 4, CR6_EQ, 380 */
		/* 82143310h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8214348C;  }
		/* 82143310h case    3:*/		return 0x82143314;
		  /* 82143314h */ case    4:  		/* lwz R11, <#[R1 + 136]> */
		/* 82143314h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82143314h case    4:*/		return 0x82143318;
		  /* 82143318h */ case    5:  		/* mr R8, R19 */
		/* 82143318h case    5:*/		regs.R8 = regs.R19;
		/* 82143318h case    5:*/		return 0x8214331C;
		  /* 8214331Ch */ case    6:  		/* cmplwi CR6, R25, 1 */
		/* 8214331Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000001);
		/* 8214331Ch case    6:*/		return 0x82143320;
		  /* 82143320h */ case    7:  		/* addi R7, R11, 1 */
		/* 82143320h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x1);
		/* 82143320h case    7:*/		return 0x82143324;
		  /* 82143324h */ case    8:  		/* bc 4, CR6_GT, 352 */
		/* 82143324h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82143484;  }
		/* 82143324h case    8:*/		return 0x82143328;
		  /* 82143328h */ case    9:  		/* addi R30, R25, -1 */
		/* 82143328h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R25,0xFFFFFFFF);
		/* 82143328h case    9:*/		return 0x8214332C;
		  /* 8214332Ch */ case   10:  		/* lwz R11, <#[R28 + 8]> */
		/* 8214332Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8214332Ch case   10:*/		return 0x82143330;
		  /* 82143330h */ case   11:  		/* rlwinm R27, R25, 2, 0, 29 */
		/* 82143330h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R25);
		/* 82143330h case   11:*/		return 0x82143334;
		  /* 82143334h */ case   12:  		/* li R10, 4 */
		/* 82143334h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82143334h case   12:*/		return 0x82143338;
		  /* 82143338h */ case   13:  		/* addi R29, R27, 4 */
		/* 82143338h case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x4);
		/* 82143338h case   13:*/		return 0x8214333C;
		  /* 8214333Ch */ case   14:  		/* mtspr CTR, R30 */
		/* 8214333Ch case   14:*/		regs.CTR = regs.R30;
		/* 8214333Ch case   14:*/		return 0x82143340;
		  /* 82143340h */ case   15:  		/* mr R9, R29 */
		/* 82143340h case   15:*/		regs.R9 = regs.R29;
		/* 82143340h case   15:*/		return 0x82143344;
		  /* 82143344h */ case   16:  		/* lwzx R5, <#[R11 + R10]> */
		/* 82143344h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82143344h case   16:*/		return 0x82143348;
		  /* 82143348h */ case   17:  		/* lwz R4, <#[R11]> */
		/* 82143348h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82143348h case   17:*/		return 0x8214334C;
		  /* 8214334Ch */ case   18:  		/* lwz R3, <#[R31 + 20]> */
		/* 8214334Ch case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8214334Ch case   18:*/		return 0x82143350;
		  /* 82143350h */ case   19:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 82143350h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 82143350h case   19:*/		return 0x82143354;
		  /* 82143354h */ case   20:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 82143354h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 82143354h case   20:*/		return 0x82143358;
		  /* 82143358h */ case   21:  		/* lwzx R14, <#[R9 + R11]> */
		/* 82143358h case   21:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82143358h case   21:*/		return 0x8214335C;
		  /* 8214335Ch */ case   22:  		/* rlwinm R14, R14, 2, 0, 29 */
		/* 8214335Ch case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R14,regs.R14);
		/* 8214335Ch case   22:*/		return 0x82143360;
		  /* 82143360h */ case   23:  		/* lwzx R5, <#[R5 + R3]> */
		/* 82143360h case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R3 + 0x00000000) );
		/* 82143360h case   23:*/		return 0x82143364;
		  /* 82143364h */ case   24:  		/* lwzx R4, <#[R4 + R3]> */
		/* 82143364h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R3 + 0x00000000) );
		/* 82143364h case   24:*/		return 0x82143368;
		  /* 82143368h */ case   25:  		/* lwzx R3, <#[R14 + R6]> */
		/* 82143368h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + regs.R6 + 0x00000000) );
		/* 82143368h case   25:*/		return 0x8214336C;
		  /* 8214336Ch */ case   26:  		/* lwz R5, <#[R5 + 16]> */
		/* 8214336Ch case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000010) );
		/* 8214336Ch case   26:*/		return 0x82143370;
		  /* 82143370h */ case   27:  		/* lwz R4, <#[R4 + 16]> */
		/* 82143370h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000010) );
		/* 82143370h case   27:*/		return 0x82143374;
		  /* 82143374h */ case   28:  		/* subf R5, R5, R4 */
		/* 82143374h case   28:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R5,regs.R4);
		/* 82143374h case   28:*/		return 0x82143378;
	}
	return 0x82143378;
} // Block from 82143304h-82143378h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82143378h
// Function '??0CFXLProgram@D3DXShader@@QAA@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143378);
		  /* 82143378h */ case    0:  		/* lwz R4, <#[R3 + 16]> */
		/* 82143378h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000010) );
		/* 82143378h case    0:*/		return 0x8214337C;
		  /* 8214337Ch */ case    1:  		/* addic R5, R5, -1 */
		/* 8214337Ch case    1:*/		cpu::op::addic<0>(regs,&regs.R5,regs.R5,0xFFFFFFFF);
		/* 8214337Ch case    1:*/		return 0x82143380;
		  /* 82143380h */ case    2:  		/* cmplw CR6, R4, R7 */
		/* 82143380h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R7);
		/* 82143380h case    2:*/		return 0x82143384;
		  /* 82143384h */ case    3:  		/* subfe R5, R5, R5 */
		/* 82143384h case    3:*/		cpu::op::subfe<0>(regs,&regs.R5,regs.R5,regs.R5);
		/* 82143384h case    3:*/		return 0x82143388;
		  /* 82143388h */ case    4:  		/* and R8, R5, R8 */
		/* 82143388h case    4:*/		cpu::op::and<0>(regs,&regs.R8,regs.R5,regs.R8);
		/* 82143388h case    4:*/		return 0x8214338C;
		  /* 8214338Ch */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 8214338Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82143398;  }
		/* 8214338Ch case    5:*/		return 0x82143390;
		  /* 82143390h */ case    6:  		/* mr R8, R17 */
		/* 82143390h case    6:*/		regs.R8 = regs.R17;
		/* 82143390h case    6:*/		return 0x82143394;
		  /* 82143394h */ case    7:  		/* b 8 */
		/* 82143394h case    7:*/		return 0x8214339C;
		/* 82143394h case    7:*/		return 0x82143398;
	}
	return 0x82143398;
} // Block from 82143378h-82143398h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82143398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143398);
		  /* 82143398h */ case    0:  		/* addi R7, R7, 1 */
		/* 82143398h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82143398h case    0:*/		return 0x8214339C;
	}
	return 0x8214339C;
} // Block from 82143398h-8214339Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214339Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214339C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214339C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214339C);
		  /* 8214339Ch */ case    0:  		/* addi R10, R10, 4 */
		/* 8214339Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8214339Ch case    0:*/		return 0x821433A0;
		  /* 821433A0h */ case    1:  		/* addi R9, R9, 4 */
		/* 821433A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821433A0h case    1:*/		return 0x821433A4;
		  /* 821433A4h */ case    2:  		/* bc 16, CR0_LT, -96 */
		/* 821433A4h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82143344;  }
		/* 821433A4h case    2:*/		return 0x821433A8;
		  /* 821433A8h */ case    3:  		/* cmpwi CR6, R8, 0 */
		/* 821433A8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 821433A8h case    3:*/		return 0x821433AC;
		  /* 821433ACh */ case    4:  		/* bc 4, CR6_EQ, 216 */
		/* 821433ACh case    4:*/		if ( !regs.CR[6].eq ) { return 0x82143484;  }
		/* 821433ACh case    4:*/		return 0x821433B0;
		  /* 821433B0h */ case    5:  		/* mr R3, R28 */
		/* 821433B0h case    5:*/		regs.R3 = regs.R28;
		/* 821433B0h case    5:*/		return 0x821433B4;
		  /* 821433B4h */ case    6:  		/* bl -291764 */
		/* 821433B4h case    6:*/		regs.LR = 0x821433B8; return 0x820FC000;
		/* 821433B4h case    6:*/		return 0x821433B8;
		  /* 821433B8h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 821433B8h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821433B8h case    7:*/		return 0x821433BC;
		  /* 821433BCh */ case    8:  		/* bc 12, CR0_EQ, 208 */
		/* 821433BCh case    8:*/		if ( regs.CR[0].eq ) { return 0x8214348C;  }
		/* 821433BCh case    8:*/		return 0x821433C0;
		  /* 821433C0h */ case    9:  		/* lwz R9, <#[R1 + 132]> */
		/* 821433C0h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000084) );
		/* 821433C0h case    9:*/		return 0x821433C4;
		  /* 821433C4h */ case   10:  		/* mr R10, R19 */
		/* 821433C4h case   10:*/		regs.R10 = regs.R19;
		/* 821433C4h case   10:*/		return 0x821433C8;
		  /* 821433C8h */ case   11:  		/* lwz R11, <#[R28 + 8]> */
		/* 821433C8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821433C8h case   11:*/		return 0x821433CC;
		  /* 821433CCh */ case   12:  		/* mtspr CTR, R30 */
		/* 821433CCh case   12:*/		regs.CTR = regs.R30;
		/* 821433CCh case   12:*/		return 0x821433D0;
	}
	return 0x821433D0;
} // Block from 8214339Ch-821433D0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821433D0h
// Function '?InitCaps@CFXLProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821433D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821433D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821433D0);
		  /* 821433D0h */ case    0:  		/* addi R7, R9, 1 */
		/* 821433D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R9,0x1);
		/* 821433D0h case    0:*/		return 0x821433D4;
		  /* 821433D4h */ case    1:  		/* lwz R6, <#[R31 + 20]> */
		/* 821433D4h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 821433D4h case    1:*/		return 0x821433D8;
		  /* 821433D8h */ case    2:  		/* li R9, 4 */
		/* 821433D8h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 821433D8h case    2:*/		return 0x821433DC;
		  /* 821433DCh */ case    3:  		/* mr R8, R29 */
		/* 821433DCh case    3:*/		regs.R8 = regs.R29;
		/* 821433DCh case    3:*/		return 0x821433E0;
		  /* 821433E0h */ case    4:  		/* lwzx R5, <#[R8 + R11]> */
		/* 821433E0h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 821433E0h case    4:*/		return 0x821433E4;
		  /* 821433E4h */ case    5:  		/* lwzx R4, <#[R27 + R11]> */
		/* 821433E4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 821433E4h case    5:*/		return 0x821433E8;
		  /* 821433E8h */ case    6:  		/* lwz R3, <#[R31 + 20]> */
		/* 821433E8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 821433E8h case    6:*/		return 0x821433EC;
		  /* 821433ECh */ case    7:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 821433ECh case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 821433ECh case    7:*/		return 0x821433F0;
		  /* 821433F0h */ case    8:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 821433F0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 821433F0h case    8:*/		return 0x821433F4;
		  /* 821433F4h */ case    9:  		/* lwzx R30, <#[R9 + R11]> */
		/* 821433F4h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821433F4h case    9:*/		return 0x821433F8;
		  /* 821433F8h */ case   10:  		/* rlwinm R30, R30, 2, 0, 29 */
		/* 821433F8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R30);
		/* 821433F8h case   10:*/		return 0x821433FC;
		  /* 821433FCh */ case   11:  		/* lwzx R5, <#[R5 + R3]> */
		/* 821433FCh case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R3 + 0x00000000) );
		/* 821433FCh case   11:*/		return 0x82143400;
		  /* 82143400h */ case   12:  		/* lwzx R4, <#[R4 + R3]> */
		/* 82143400h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R3 + 0x00000000) );
		/* 82143400h case   12:*/		return 0x82143404;
		  /* 82143404h */ case   13:  		/* lwzx R3, <#[R30 + R6]> */
		/* 82143404h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + regs.R6 + 0x00000000) );
		/* 82143404h case   13:*/		return 0x82143408;
		  /* 82143408h */ case   14:  		/* lwz R5, <#[R5 + 16]> */
		/* 82143408h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000010) );
		/* 82143408h case   14:*/		return 0x8214340C;
		  /* 8214340Ch */ case   15:  		/* lwz R4, <#[R4 + 16]> */
		/* 8214340Ch case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000010) );
		/* 8214340Ch case   15:*/		return 0x82143410;
		  /* 82143410h */ case   16:  		/* subf R5, R5, R4 */
		/* 82143410h case   16:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R5,regs.R4);
		/* 82143410h case   16:*/		return 0x82143414;
		  /* 82143414h */ case   17:  		/* lwz R4, <#[R3 + 16]> */
		/* 82143414h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000010) );
		/* 82143414h case   17:*/		return 0x82143418;
		  /* 82143418h */ case   18:  		/* addic R5, R5, -1 */
		/* 82143418h case   18:*/		cpu::op::addic<0>(regs,&regs.R5,regs.R5,0xFFFFFFFF);
		/* 82143418h case   18:*/		return 0x8214341C;
		  /* 8214341Ch */ case   19:  		/* cmplw CR6, R4, R7 */
		/* 8214341Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R7);
		/* 8214341Ch case   19:*/		return 0x82143420;
		  /* 82143420h */ case   20:  		/* subfe R5, R5, R5 */
		/* 82143420h case   20:*/		cpu::op::subfe<0>(regs,&regs.R5,regs.R5,regs.R5);
		/* 82143420h case   20:*/		return 0x82143424;
		  /* 82143424h */ case   21:  		/* and R10, R5, R10 */
		/* 82143424h case   21:*/		cpu::op::and<0>(regs,&regs.R10,regs.R5,regs.R10);
		/* 82143424h case   21:*/		return 0x82143428;
		  /* 82143428h */ case   22:  		/* bc 12, CR6_EQ, 12 */
		/* 82143428h case   22:*/		if ( regs.CR[6].eq ) { return 0x82143434;  }
		/* 82143428h case   22:*/		return 0x8214342C;
		  /* 8214342Ch */ case   23:  		/* mr R10, R17 */
		/* 8214342Ch case   23:*/		regs.R10 = regs.R17;
		/* 8214342Ch case   23:*/		return 0x82143430;
		  /* 82143430h */ case   24:  		/* b 8 */
		/* 82143430h case   24:*/		return 0x82143438;
		/* 82143430h case   24:*/		return 0x82143434;
	}
	return 0x82143434;
} // Block from 821433D0h-82143434h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82143434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143434);
		  /* 82143434h */ case    0:  		/* addi R7, R7, 1 */
		/* 82143434h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82143434h case    0:*/		return 0x82143438;
	}
	return 0x82143438;
} // Block from 82143434h-82143438h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82143438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143438);
		  /* 82143438h */ case    0:  		/* addi R9, R9, 4 */
		/* 82143438h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82143438h case    0:*/		return 0x8214343C;
		  /* 8214343Ch */ case    1:  		/* addi R8, R8, 4 */
		/* 8214343Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8214343Ch case    1:*/		return 0x82143440;
		  /* 82143440h */ case    2:  		/* bc 16, CR0_LT, -96 */
		/* 82143440h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821433E0;  }
		/* 82143440h case    2:*/		return 0x82143444;
		  /* 82143444h */ case    3:  		/* cmpwi CR6, R10, 0 */
		/* 82143444h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 82143444h case    3:*/		return 0x82143448;
		  /* 82143448h */ case    4:  		/* bc 12, CR6_EQ, 68 */
		/* 82143448h case    4:*/		if ( regs.CR[6].eq ) { return 0x8214348C;  }
		/* 82143448h case    4:*/		return 0x8214344C;
		  /* 8214344Ch */ case    5:  		/* cmplwi CR6, R25, 0 */
		/* 8214344Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8214344Ch case    5:*/		return 0x82143450;
		  /* 82143450h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 82143450h case    6:*/		if ( regs.CR[6].eq ) { return 0x82143484;  }
		/* 82143450h case    6:*/		return 0x82143454;
		  /* 82143454h */ case    7:  		/* mr R11, R17 */
		/* 82143454h case    7:*/		regs.R11 = regs.R17;
		/* 82143454h case    7:*/		return 0x82143458;
	}
	return 0x82143458;
} // Block from 82143438h-82143458h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82143458h
// Function '?EmitPool@CFXLProgram@D3DXShader@@QAAJPAVCArgument@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143458);
		  /* 82143458h */ case    0:  		/* mtspr CTR, R25 */
		/* 82143458h case    0:*/		regs.CTR = regs.R25;
		/* 82143458h case    0:*/		return 0x8214345C;
		  /* 8214345Ch */ case    1:  		/* mr R10, R27 */
		/* 8214345Ch case    1:*/		regs.R10 = regs.R27;
		/* 8214345Ch case    1:*/		return 0x82143460;
		  /* 82143460h */ case    2:  		/* lwz R9, <#[R28 + 8]> */
		/* 82143460h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 82143460h case    2:*/		return 0x82143464;
		  /* 82143464h */ case    3:  		/* lwzx R8, <#[R10 + R9]> */
		/* 82143464h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82143464h case    3:*/		return 0x82143468;
		  /* 82143468h */ case    4:  		/* lwzx R7, <#[R11 + R9]> */
		/* 82143468h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82143468h case    4:*/		return 0x8214346C;
		  /* 8214346Ch */ case    5:  		/* stwx R8, <#[R11 + R9]> */
		/* 8214346Ch case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8214346Ch case    5:*/		return 0x82143470;
		  /* 82143470h */ case    6:  		/* addi R11, R11, 4 */
		/* 82143470h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82143470h case    6:*/		return 0x82143474;
		  /* 82143474h */ case    7:  		/* lwz R9, <#[R28 + 8]> */
		/* 82143474h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 82143474h case    7:*/		return 0x82143478;
		  /* 82143478h */ case    8:  		/* stwx R7, <#[R10 + R9]> */
		/* 82143478h case    8:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82143478h case    8:*/		return 0x8214347C;
		  /* 8214347Ch */ case    9:  		/* addi R10, R10, 4 */
		/* 8214347Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8214347Ch case    9:*/		return 0x82143480;
		  /* 82143480h */ case   10:  		/* bc 16, CR0_LT, -32 */
		/* 82143480h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82143460;  }
		/* 82143480h case   10:*/		return 0x82143484;
	}
	return 0x82143484;
} // Block from 82143458h-82143484h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82143484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143484);
		  /* 82143484h */ case    0:  		/* stw R19, <#[R28 + 40]> */
		/* 82143484h case    0:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R28 + 0x00000028) );
		/* 82143484h case    0:*/		return 0x82143488;
		  /* 82143488h */ case    1:  		/* b -628 */
		/* 82143488h case    1:*/		return 0x82143214;
		/* 82143488h case    1:*/		return 0x8214348C;
	}
	return 0x8214348C;
} // Block from 82143484h-8214348Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214348Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214348C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214348C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214348C);
		  /* 8214348Ch */ case    0:  		/* mr R6, R19 */
		/* 8214348Ch case    0:*/		regs.R6 = regs.R19;
		/* 8214348Ch case    0:*/		return 0x82143490;
		  /* 82143490h */ case    1:  		/* cmplwi CR6, R25, 1 */
		/* 82143490h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000001);
		/* 82143490h case    1:*/		return 0x82143494;
		  /* 82143494h */ case    2:  		/* bc 4, CR6_GT, 104 */
		/* 82143494h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821434FC;  }
		/* 82143494h case    2:*/		return 0x82143498;
		  /* 82143498h */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 82143498h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82143498h case    3:*/		return 0x8214349C;
		  /* 8214349Ch */ case    4:  		/* bc 12, CR6_EQ, 84 */
		/* 8214349Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821434F0;  }
		/* 8214349Ch case    4:*/		return 0x821434A0;
		  /* 821434A0h */ case    5:  		/* lwz R8, <#[R28 + 8]> */
		/* 821434A0h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000008) );
		/* 821434A0h case    5:*/		return 0x821434A4;
		  /* 821434A4h */ case    6:  		/* addi R11, R1, 132 */
		/* 821434A4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x84);
		/* 821434A4h case    6:*/		return 0x821434A8;
		  /* 821434A8h */ case    7:  		/* lwz R7, <#[R31 + 20]> */
		/* 821434A8h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 821434A8h case    7:*/		return 0x821434AC;
		  /* 821434ACh */ case    8:  		/* rlwinm R5, R25, 2, 0, 29 */
		/* 821434ACh case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R25);
		/* 821434ACh case    8:*/		return 0x821434B0;
		  /* 821434B0h */ case    9:  		/* mtspr CTR, R24 */
		/* 821434B0h case    9:*/		regs.CTR = regs.R24;
		/* 821434B0h case    9:*/		return 0x821434B4;
		  /* 821434B4h */ case   10:  		/* rlwinm R10, R6, 2, 0, 29 */
		/* 821434B4h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R6);
		/* 821434B4h case   10:*/		return 0x821434B8;
		  /* 821434B8h */ case   11:  		/* lwzx R4, <#[R10 + R8]> */
		/* 821434B8h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821434B8h case   11:*/		return 0x821434BC;
		  /* 821434BCh */ case   12:  		/* lwz R9, <#[R11]> */
		/* 821434BCh case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821434BCh case   12:*/		return 0x821434C0;
		  /* 821434C0h */ case   13:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 821434C0h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 821434C0h case   13:*/		return 0x821434C4;
		  /* 821434C4h */ case   14:  		/* addi R9, R9, 1 */
		/* 821434C4h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821434C4h case   14:*/		return 0x821434C8;
		  /* 821434C8h */ case   15:  		/* lwzx R4, <#[R4 + R7]> */
		/* 821434C8h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R7 + 0x00000000) );
		/* 821434C8h case   15:*/		return 0x821434CC;
		  /* 821434CCh */ case   16:  		/* lwz R4, <#[R4 + 16]> */
		/* 821434CCh case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000010) );
		/* 821434CCh case   16:*/		return 0x821434D0;
		  /* 821434D0h */ case   17:  		/* cmplw CR6, R4, R9 */
		/* 821434D0h case   17:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 821434D0h case   17:*/		return 0x821434D4;
		  /* 821434D4h */ case   18:  		/* bc 12, CR6_EQ, 12 */
		/* 821434D4h case   18:*/		if ( regs.CR[6].eq ) { return 0x821434E0;  }
		/* 821434D4h case   18:*/		return 0x821434D8;
		  /* 821434D8h */ case   19:  		/* mr R26, R19 */
		/* 821434D8h case   19:*/		regs.R26 = regs.R19;
		/* 821434D8h case   19:*/		return 0x821434DC;
		  /* 821434DCh */ case   20:  		/* b 8 */
		/* 821434DCh case   20:*/		return 0x821434E4;
		/* 821434DCh case   20:*/		return 0x821434E0;
	}
	return 0x821434E0;
} // Block from 8214348Ch-821434E0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821434E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821434E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821434E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821434E0);
		  /* 821434E0h */ case    0:  		/* stw R9, <#[R11]> */
		/* 821434E0h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821434E0h case    0:*/		return 0x821434E4;
	}
	return 0x821434E4;
} // Block from 821434E0h-821434E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821434E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821434E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821434E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821434E4);
		  /* 821434E4h */ case    0:  		/* add R10, R10, R5 */
		/* 821434E4h case    0:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 821434E4h case    0:*/		return 0x821434E8;
		  /* 821434E8h */ case    1:  		/* addi R11, R11, 4 */
		/* 821434E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821434E8h case    1:*/		return 0x821434EC;
		  /* 821434ECh */ case    2:  		/* bc 16, CR0_LT, -52 */
		/* 821434ECh case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821434B8;  }
		/* 821434ECh case    2:*/		return 0x821434F0;
	}
	return 0x821434F0;
} // Block from 821434E4h-821434F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821434F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821434F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821434F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821434F0);
		  /* 821434F0h */ case    0:  		/* addi R6, R6, 1 */
		/* 821434F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821434F0h case    0:*/		return 0x821434F4;
		  /* 821434F4h */ case    1:  		/* cmplw CR6, R6, R25 */
		/* 821434F4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R25);
		/* 821434F4h case    1:*/		return 0x821434F8;
		  /* 821434F8h */ case    2:  		/* bc 12, CR6_LT, -96 */
		/* 821434F8h case    2:*/		if ( regs.CR[6].lt ) { return 0x82143498;  }
		/* 821434F8h case    2:*/		return 0x821434FC;
	}
	return 0x821434FC;
} // Block from 821434F0h-821434FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821434FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821434FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821434FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821434FC);
		  /* 821434FCh */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 821434FCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 821434FCh case    0:*/		return 0x82143500;
		  /* 82143500h */ case    1:  		/* bc 12, CR6_EQ, -748 */
		/* 82143500h case    1:*/		if ( regs.CR[6].eq ) { return 0x82143214;  }
		/* 82143500h case    1:*/		return 0x82143504;
		  /* 82143504h */ case    2:  		/* lwz R11, <#[R28]> */
		/* 82143504h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82143504h case    2:*/		return 0x82143508;
		  /* 82143508h */ case    3:  		/* lis R10, 20480 */
		/* 82143508h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 82143508h case    3:*/		return 0x8214350C;
		  /* 8214350Ch */ case    4:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 8214350Ch case    4:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 8214350Ch case    4:*/		return 0x82143510;
		  /* 82143510h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 82143510h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82143510h case    5:*/		return 0x82143514;
		  /* 82143514h */ case    6:  		/* bc 4, CR6_EQ, 20 */
		/* 82143514h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82143528;  }
		/* 82143514h case    6:*/		return 0x82143518;
		  /* 82143518h */ case    7:  		/* lis R11, 28896 */
		/* 82143518h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0x70E0);
		/* 82143518h case    7:*/		return 0x8214351C;
		  /* 8214351Ch */ case    8:  		/* ori R11, R11, 1 */
		/* 8214351Ch case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214351Ch case    8:*/		return 0x82143520;
		  /* 82143520h */ case    9:  		/* stw R11, <#[R28]> */
		/* 82143520h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82143520h case    9:*/		return 0x82143524;
		  /* 82143524h */ case   10:  		/* b -784 */
		/* 82143524h case   10:*/		return 0x82143214;
		/* 82143524h case   10:*/		return 0x82143528;
	}
	return 0x82143528;
} // Block from 821434FCh-82143528h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82143528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143528);
		  /* 82143528h */ case    0:  		/* lis R10, 20528 */
		/* 82143528h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x5030);
		/* 82143528h case    0:*/		return 0x8214352C;
		  /* 8214352Ch */ case    1:  		/* mr R26, R17 */
		/* 8214352Ch case    1:*/		regs.R26 = regs.R17;
		/* 8214352Ch case    1:*/		return 0x82143530;
		  /* 82143530h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 82143530h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82143530h case    2:*/		return 0x82143534;
		  /* 82143534h */ case    3:  		/* bc 4, CR6_EQ, 172 */
		/* 82143534h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821435E0;  }
		/* 82143534h case    3:*/		return 0x82143538;
		  /* 82143538h */ case    4:  		/* cmplwi CR6, R25, 0 */
		/* 82143538h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82143538h case    4:*/		return 0x8214353C;
		  /* 8214353Ch */ case    5:  		/* bc 12, CR6_EQ, 388 */
		/* 8214353Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821436C0;  }
		/* 8214353Ch case    5:*/		return 0x82143540;
		  /* 82143540h */ case    6:  		/* lwz R11, <#[R28 + 16]> */
		/* 82143540h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82143540h case    6:*/		return 0x82143544;
		  /* 82143544h */ case    7:  		/* rlwinm R27, R26, 2, 0, 29 */
		/* 82143544h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R26);
		/* 82143544h case    7:*/		return 0x82143548;
		  /* 82143548h */ case    8:  		/* lwz R10, <#[R31 + 20]> */
		/* 82143548h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82143548h case    8:*/		return 0x8214354C;
		  /* 8214354Ch */ case    9:  		/* lwzx R11, <#[R11 + R27]> */
		/* 8214354Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8214354Ch case    9:*/		return 0x82143550;
		  /* 82143550h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82143550h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82143550h case   10:*/		return 0x82143554;
		  /* 82143554h */ case   11:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82143554h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82143554h case   11:*/		return 0x82143558;
		  /* 82143558h */ case   12:  		/* lwz R11, <#[R11 + 92]> */
		/* 82143558h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000005C) );
		/* 82143558h case   12:*/		return 0x8214355C;
		  /* 8214355Ch */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 8214355Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214355Ch case   13:*/		return 0x82143560;
		  /* 82143560h */ case   14:  		/* bc 12, CR6_EQ, 112 */
		/* 82143560h case   14:*/		if ( regs.CR[6].eq ) { return 0x821435D0;  }
		/* 82143560h case   14:*/		return 0x82143564;
		  /* 82143564h */ case   15:  		/* cmplwi CR6, R26, 0 */
		/* 82143564h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82143564h case   15:*/		return 0x82143568;
		  /* 82143568h */ case   16:  		/* li R6, 1 */
		/* 82143568h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82143568h case   16:*/		return 0x8214356C;
		  /* 8214356Ch */ case   17:  		/* li R5, 1 */
		/* 8214356Ch case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8214356Ch case   17:*/		return 0x82143570;
		  /* 82143570h */ case   18:  		/* mr R3, R31 */
		/* 82143570h case   18:*/		regs.R3 = regs.R31;
		/* 82143570h case   18:*/		return 0x82143574;
		  /* 82143574h */ case   19:  		/* lis R4, 4240 */
		/* 82143574h case   19:*/		cpu::op::lis<0>(regs,&regs.R4,0x1090);
		/* 82143574h case   19:*/		return 0x82143578;
		  /* 82143578h */ case   20:  		/* bc 12, CR6_EQ, 8 */
		/* 82143578h case   20:*/		if ( regs.CR[6].eq ) { return 0x82143580;  }
		/* 82143578h case   20:*/		return 0x8214357C;
		  /* 8214357Ch */ case   21:  		/* lis R4, 4224 */
		/* 8214357Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R4,0x1080);
		/* 8214357Ch case   21:*/		return 0x82143580;
	}
	return 0x82143580;
} // Block from 82143528h-82143580h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82143580h
// Function '?EmitDouble@CFXLProgram@D3DXShader@@QAAJN@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143580);
		  /* 82143580h */ case    0:  		/* ori R4, R4, 1 */
		/* 82143580h case    0:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 82143580h case    0:*/		return 0x82143584;
		  /* 82143584h */ case    1:  		/* bl -287420 */
		/* 82143584h case    1:*/		regs.LR = 0x82143588; return 0x820FD2C8;
		/* 82143584h case    1:*/		return 0x82143588;
		  /* 82143588h */ case    2:  		/* cmpwi CR6, R3, -1 */
		/* 82143588h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82143588h case    2:*/		return 0x8214358C;
		  /* 8214358Ch */ case    3:  		/* bc 12, CR6_EQ, -1008 */
		/* 8214358Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8214319C;  }
		/* 8214358Ch case    3:*/		return 0x82143590;
		  /* 82143590h */ case    4:  		/* lwz R11, <#[R31 + 24]> */
		/* 82143590h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82143590h case    4:*/		return 0x82143594;
		  /* 82143594h */ case    5:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82143594h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82143594h case    5:*/		return 0x82143598;
		  /* 82143598h */ case    6:  		/* mr R4, R28 */
		/* 82143598h case    6:*/		regs.R4 = regs.R28;
		/* 82143598h case    6:*/		return 0x8214359C;
		  /* 8214359Ch */ case    7:  		/* lwzx R30, <#[R10 + R11]> */
		/* 8214359Ch case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8214359Ch case    7:*/		return 0x821435A0;
		  /* 821435A0h */ case    8:  		/* mr R3, R30 */
		/* 821435A0h case    8:*/		regs.R3 = regs.R30;
		/* 821435A0h case    8:*/		return 0x821435A4;
		  /* 821435A4h */ case    9:  		/* bl -292532 */
		/* 821435A4h case    9:*/		regs.LR = 0x821435A8; return 0x820FBEF0;
		/* 821435A4h case    9:*/		return 0x821435A8;
		  /* 821435A8h */ case   10:  		/* or. R29, R3, R3 */
		/* 821435A8h case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821435A8h case   10:*/		return 0x821435AC;
		  /* 821435ACh */ case   11:  		/* bc 12, CR0_LT, 1720 */
		/* 821435ACh case   11:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 821435ACh case   11:*/		return 0x821435B0;
		  /* 821435B0h */ case   12:  		/* lwz R11, <#[R28 + 16]> */
		/* 821435B0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821435B0h case   12:*/		return 0x821435B4;
		  /* 821435B4h */ case   13:  		/* lwz R10, <#[R30 + 16]> */
		/* 821435B4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 821435B4h case   13:*/		return 0x821435B8;
		  /* 821435B8h */ case   14:  		/* lwzx R11, <#[R11 + R27]> */
		/* 821435B8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 821435B8h case   14:*/		return 0x821435BC;
		  /* 821435BCh */ case   15:  		/* stw R11, <#[R10]> */
		/* 821435BCh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821435BCh case   15:*/		return 0x821435C0;
		  /* 821435C0h */ case   16:  		/* lwz R11, <#[R28 + 8]> */
		/* 821435C0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821435C0h case   16:*/		return 0x821435C4;
		  /* 821435C4h */ case   17:  		/* lwz R10, <#[R30 + 8]> */
		/* 821435C4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821435C4h case   17:*/		return 0x821435C8;
		  /* 821435C8h */ case   18:  		/* lwzx R11, <#[R11 + R27]> */
		/* 821435C8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 821435C8h case   18:*/		return 0x821435CC;
		  /* 821435CCh */ case   19:  		/* stw R11, <#[R10]> */
		/* 821435CCh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821435CCh case   19:*/		return 0x821435D0;
	}
	return 0x821435D0;
} // Block from 82143580h-821435D0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821435D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821435D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821435D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821435D0);
		  /* 821435D0h */ case    0:  		/* addi R26, R26, 1 */
		/* 821435D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821435D0h case    0:*/		return 0x821435D4;
		  /* 821435D4h */ case    1:  		/* cmplw CR6, R26, R25 */
		/* 821435D4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R25);
		/* 821435D4h case    1:*/		return 0x821435D8;
		  /* 821435D8h */ case    2:  		/* bc 12, CR6_LT, -152 */
		/* 821435D8h case    2:*/		if ( regs.CR[6].lt ) { return 0x82143540;  }
		/* 821435D8h case    2:*/		return 0x821435DC;
		  /* 821435DCh */ case    3:  		/* b 228 */
		/* 821435DCh case    3:*/		return 0x821436C0;
		/* 821435DCh case    3:*/		return 0x821435E0;
	}
	return 0x821435E0;
} // Block from 821435D0h-821435E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821435E0h
// Function '?EmitDoubleSwapped@CFXLProgram@D3DXShader@@QAAJN@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821435E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821435E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821435E0);
		  /* 821435E0h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821435E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821435E0h case    0:*/		return 0x821435E4;
		  /* 821435E4h */ case    1:  		/* bc 12, CR6_EQ, 220 */
		/* 821435E4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821436C0;  }
		/* 821435E4h case    1:*/		return 0x821435E8;
		  /* 821435E8h */ case    2:  		/* mr R27, R17 */
		/* 821435E8h case    2:*/		regs.R27 = regs.R17;
		/* 821435E8h case    2:*/		return 0x821435EC;
		  /* 821435ECh */ case    3:  		/* li R3, 116 */
		/* 821435ECh case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 821435ECh case    3:*/		return 0x821435F0;
		  /* 821435F0h */ case    4:  		/* bl -290904 */
		/* 821435F0h case    4:*/		regs.LR = 0x821435F4; return 0x820FC598;
		/* 821435F0h case    4:*/		return 0x821435F4;
		  /* 821435F4h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 821435F4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821435F4h case    5:*/		return 0x821435F8;
		  /* 821435F8h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 821435F8h case    6:*/		if ( regs.CR[0].eq ) { return 0x82143608;  }
		/* 821435F8h case    6:*/		return 0x821435FC;
		  /* 821435FCh */ case    7:  		/* bl -292700 */
		/* 821435FCh case    7:*/		regs.LR = 0x82143600; return 0x820FBEA0;
		/* 821435FCh case    7:*/		return 0x82143600;
		  /* 82143600h */ case    8:  		/* mr R30, R3 */
		/* 82143600h case    8:*/		regs.R30 = regs.R3;
		/* 82143600h case    8:*/		return 0x82143604;
		  /* 82143604h */ case    9:  		/* b 8 */
		/* 82143604h case    9:*/		return 0x8214360C;
		/* 82143604h case    9:*/		return 0x82143608;
	}
	return 0x82143608;
} // Block from 821435E0h-82143608h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82143608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143608);
		  /* 82143608h */ case    0:  		/* mr R30, R17 */
		/* 82143608h case    0:*/		regs.R30 = regs.R17;
		/* 82143608h case    0:*/		return 0x8214360C;
	}
	return 0x8214360C;
} // Block from 82143608h-8214360Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214360Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214360C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214360C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214360C);
		  /* 8214360Ch */ case    0:  		/* addi R11, R1, 176 */
		/* 8214360Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xB0);
		/* 8214360Ch case    0:*/		return 0x82143610;
		  /* 82143610h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 82143610h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82143610h case    1:*/		return 0x82143614;
		  /* 82143614h */ case    2:  		/* stwx R30, <#[R27 + R11]> */
		/* 82143614h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 82143614h case    2:*/		return 0x82143618;
		  /* 82143618h */ case    3:  		/* bc 12, CR6_EQ, -1148 */
		/* 82143618h case    3:*/		if ( regs.CR[6].eq ) { return 0x8214319C;  }
		/* 82143618h case    3:*/		return 0x8214361C;
		  /* 8214361Ch */ case    4:  		/* li R7, 0 */
		/* 8214361Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8214361Ch case    4:*/		return 0x82143620;
		  /* 82143620h */ case    5:  		/* li R6, 1 */
		/* 82143620h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82143620h case    5:*/		return 0x82143624;
		  /* 82143624h */ case    6:  		/* mr R5, R24 */
		/* 82143624h case    6:*/		regs.R5 = regs.R24;
		/* 82143624h case    6:*/		return 0x82143628;
		  /* 82143628h */ case    7:  		/* ori R4, R23, 1 */
		/* 82143628h case    7:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R23,0x1);
		/* 82143628h case    7:*/		return 0x8214362C;
		  /* 8214362Ch */ case    8:  		/* mr R3, R30 */
		/* 8214362Ch case    8:*/		regs.R3 = regs.R30;
		/* 8214362Ch case    8:*/		return 0x82143630;
		  /* 82143630h */ case    9:  		/* bl -290816 */
		/* 82143630h case    9:*/		regs.LR = 0x82143634; return 0x820FC630;
		/* 82143630h case    9:*/		return 0x82143634;
		  /* 82143634h */ case   10:  		/* or. R29, R3, R3 */
		/* 82143634h case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143634h case   10:*/		return 0x82143638;
		  /* 82143638h */ case   11:  		/* bc 12, CR0_LT, 1580 */
		/* 82143638h case   11:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143638h case   11:*/		return 0x8214363C;
		  /* 8214363Ch */ case   12:  		/* mr R4, R28 */
		/* 8214363Ch case   12:*/		regs.R4 = regs.R28;
		/* 8214363Ch case   12:*/		return 0x82143640;
		  /* 82143640h */ case   13:  		/* mr R3, R30 */
		/* 82143640h case   13:*/		regs.R3 = regs.R30;
		/* 82143640h case   13:*/		return 0x82143644;
		  /* 82143644h */ case   14:  		/* bl -292692 */
		/* 82143644h case   14:*/		regs.LR = 0x82143648; return 0x820FBEF0;
		/* 82143644h case   14:*/		return 0x82143648;
		  /* 82143648h */ case   15:  		/* or. R29, R3, R3 */
		/* 82143648h case   15:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143648h case   15:*/		return 0x8214364C;
		  /* 8214364Ch */ case   16:  		/* bc 12, CR0_LT, 1560 */
		/* 8214364Ch case   16:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 8214364Ch case   16:*/		return 0x82143650;
		  /* 82143650h */ case   17:  		/* lwz R11, <#[R28 + 16]> */
		/* 82143650h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82143650h case   17:*/		return 0x82143654;
		  /* 82143654h */ case   18:  		/* cmplwi CR6, R24, 0 */
		/* 82143654h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82143654h case   18:*/		return 0x82143658;
	}
	return 0x82143658;
} // Block from 8214360Ch-82143658h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82143658h
// Function '??_ECFXLProgram@D3DXShader@@UAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143658);
		  /* 82143658h */ case    0:  		/* lwz R10, <#[R30 + 16]> */
		/* 82143658h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82143658h case    0:*/		return 0x8214365C;
		  /* 8214365Ch */ case    1:  		/* lwzx R11, <#[R27 + R11]> */
		/* 8214365Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 8214365Ch case    1:*/		return 0x82143660;
		  /* 82143660h */ case    2:  		/* stw R11, <#[R10]> */
		/* 82143660h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82143660h case    2:*/		return 0x82143664;
		  /* 82143664h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82143664h case    3:*/		if ( regs.CR[6].eq ) { return 0x82143694;  }
		/* 82143664h case    3:*/		return 0x82143668;
		  /* 82143668h */ case    4:  		/* mtspr CTR, R24 */
		/* 82143668h case    4:*/		regs.CTR = regs.R24;
		/* 82143668h case    4:*/		return 0x8214366C;
		  /* 8214366Ch */ case    5:  		/* mr R10, R17 */
		/* 8214366Ch case    5:*/		regs.R10 = regs.R17;
		/* 8214366Ch case    5:*/		return 0x82143670;
		  /* 82143670h */ case    6:  		/* rlwinm R9, R25, 2, 0, 29 */
		/* 82143670h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R25);
		/* 82143670h case    6:*/		return 0x82143674;
		  /* 82143674h */ case    7:  		/* mr R11, R27 */
		/* 82143674h case    7:*/		regs.R11 = regs.R27;
		/* 82143674h case    7:*/		return 0x82143678;
		  /* 82143678h */ case    8:  		/* lwz R8, <#[R28 + 8]> */
		/* 82143678h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000008) );
		/* 82143678h case    8:*/		return 0x8214367C;
		  /* 8214367Ch */ case    9:  		/* lwz R7, <#[R30 + 8]> */
		/* 8214367Ch case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000008) );
		/* 8214367Ch case    9:*/		return 0x82143680;
		  /* 82143680h */ case   10:  		/* lwzx R8, <#[R11 + R8]> */
		/* 82143680h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82143680h case   10:*/		return 0x82143684;
		  /* 82143684h */ case   11:  		/* add R11, R11, R9 */
		/* 82143684h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82143684h case   11:*/		return 0x82143688;
		  /* 82143688h */ case   12:  		/* stwx R8, <#[R10 + R7]> */
		/* 82143688h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82143688h case   12:*/		return 0x8214368C;
		  /* 8214368Ch */ case   13:  		/* addi R10, R10, 4 */
		/* 8214368Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8214368Ch case   13:*/		return 0x82143690;
		  /* 82143690h */ case   14:  		/* bc 16, CR0_LT, -24 */
		/* 82143690h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82143678;  }
		/* 82143690h case   14:*/		return 0x82143694;
	}
	return 0x82143694;
} // Block from 82143658h-82143694h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82143694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143694);
		  /* 82143694h */ case    0:  		/* mr R4, R30 */
		/* 82143694h case    0:*/		regs.R4 = regs.R30;
		/* 82143694h case    0:*/		return 0x82143698;
		  /* 82143698h */ case    1:  		/* mr R3, R31 */
		/* 82143698h case    1:*/		regs.R3 = regs.R31;
		/* 82143698h case    1:*/		return 0x8214369C;
		  /* 8214369Ch */ case    2:  		/* bl -287284 */
		/* 8214369Ch case    2:*/		regs.LR = 0x821436A0; return 0x820FD468;
		/* 8214369Ch case    2:*/		return 0x821436A0;
		  /* 821436A0h */ case    3:  		/* mr R3, R30 */
		/* 821436A0h case    3:*/		regs.R3 = regs.R30;
		/* 821436A0h case    3:*/		return 0x821436A4;
		  /* 821436A4h */ case    4:  		/* bl 892188 */
		/* 821436A4h case    4:*/		regs.LR = 0x821436A8; return 0x8221D3C0;
		/* 821436A4h case    4:*/		return 0x821436A8;
		  /* 821436A8h */ case    5:  		/* mr R3, R30 */
		/* 821436A8h case    5:*/		regs.R3 = regs.R30;
		/* 821436A8h case    5:*/		return 0x821436AC;
		  /* 821436ACh */ case    6:  		/* bl -291004 */
		/* 821436ACh case    6:*/		regs.LR = 0x821436B0; return 0x820FC5F0;
		/* 821436ACh case    6:*/		return 0x821436B0;
		  /* 821436B0h */ case    7:  		/* addi R26, R26, 1 */
		/* 821436B0h case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821436B0h case    7:*/		return 0x821436B4;
		  /* 821436B4h */ case    8:  		/* addi R27, R27, 4 */
		/* 821436B4h case    8:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821436B4h case    8:*/		return 0x821436B8;
	}
	return 0x821436B8;
} // Block from 82143694h-821436B8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821436B8h
// Function '?EmitAddress@CFXLProgram@D3DXShader@@QAAJIK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821436B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821436B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821436B8);
		  /* 821436B8h */ case    0:  		/* cmplw CR6, R26, R25 */
		/* 821436B8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R25);
		/* 821436B8h case    0:*/		return 0x821436BC;
		  /* 821436BCh */ case    1:  		/* bc 12, CR6_LT, -208 */
		/* 821436BCh case    1:*/		if ( regs.CR[6].lt ) { return 0x821435EC;  }
		/* 821436BCh case    1:*/		return 0x821436C0;
	}
	return 0x821436C0;
} // Block from 821436B8h-821436C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821436C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821436C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821436C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821436C0);
		  /* 821436C0h */ case    0:  		/* addi R21, R21, 1 */
		/* 821436C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 821436C0h case    0:*/		return 0x821436C4;
		  /* 821436C4h */ case    1:  		/* stw R17, <#[R28]> */
		/* 821436C4h case    1:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R28 + 0x00000000) );
		/* 821436C4h case    1:*/		return 0x821436C8;
		  /* 821436C8h */ case    2:  		/* addi R22, R22, 4 */
		/* 821436C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 821436C8h case    2:*/		return 0x821436CC;
		  /* 821436CCh */ case    3:  		/* cmplw CR6, R21, R20 */
		/* 821436CCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R20);
		/* 821436CCh case    3:*/		return 0x821436D0;
		  /* 821436D0h */ case    4:  		/* bc 12, CR6_LT, -1244 */
		/* 821436D0h case    4:*/		if ( regs.CR[6].lt ) { return 0x821431F4;  }
		/* 821436D0h case    4:*/		return 0x821436D4;
	}
	return 0x821436D4;
} // Block from 821436C0h-821436D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821436D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821436D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821436D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821436D4);
		  /* 821436D4h */ case    0:  		/* mr R3, R31 */
		/* 821436D4h case    0:*/		regs.R3 = regs.R31;
		/* 821436D4h case    0:*/		return 0x821436D8;
		  /* 821436D8h */ case    1:  		/* bl -268920 */
		/* 821436D8h case    1:*/		regs.LR = 0x821436DC; return 0x82101C60;
		/* 821436D8h case    1:*/		return 0x821436DC;
		  /* 821436DCh */ case    2:  		/* mr R3, R31 */
		/* 821436DCh case    2:*/		regs.R3 = regs.R31;
		/* 821436DCh case    2:*/		return 0x821436E0;
		  /* 821436E0h */ case    3:  		/* lwz R4, <#[R31 + 200]> */
		/* 821436E0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000C8) );
		/* 821436E0h case    3:*/		return 0x821436E4;
		  /* 821436E4h */ case    4:  		/* bl -328564 */
		/* 821436E4h case    4:*/		regs.LR = 0x821436E8; return 0x820F3370;
		/* 821436E4h case    4:*/		return 0x821436E8;
		  /* 821436E8h */ case    5:  		/* or. R29, R3, R3 */
		/* 821436E8h case    5:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821436E8h case    5:*/		return 0x821436EC;
		  /* 821436ECh */ case    6:  		/* bc 12, CR0_LT, 1400 */
		/* 821436ECh case    6:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 821436ECh case    6:*/		return 0x821436F0;
		  /* 821436F0h */ case    7:  		/* lis R11, 18008 */
		/* 821436F0h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0x4658);
		/* 821436F0h case    7:*/		return 0x821436F4;
		  /* 821436F4h */ case    8:  		/* lwz R10, <#[R31 + 200]> */
		/* 821436F4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000000C8) );
		/* 821436F4h case    8:*/		return 0x821436F8;
		  /* 821436F8h */ case    9:  		/* ori R11, R11, 513 */
		/* 821436F8h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x201);
		/* 821436F8h case    9:*/		return 0x821436FC;
		  /* 821436FCh */ case   10:  		/* cmplw CR6, R10, R11 */
		/* 821436FCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821436FCh case   10:*/		return 0x82143700;
		  /* 82143700h */ case   11:  		/* bc 4, CR6_EQ, 368 */
		/* 82143700h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82143870;  }
		/* 82143700h case   11:*/		return 0x82143704;
		  /* 82143704h */ case   12:  		/* lwz R26, <#[R1 + 112]> */
		/* 82143704h case   12:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 82143704h case   12:*/		return 0x82143708;
		  /* 82143708h */ case   13:  		/* mr R3, R31 */
		/* 82143708h case   13:*/		regs.R3 = regs.R31;
		/* 82143708h case   13:*/		return 0x8214370C;
		  /* 8214370Ch */ case   14:  		/* lwz R27, <#[R1 + 108]> */
		/* 8214370Ch case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214370Ch case   14:*/		return 0x82143710;
		  /* 82143710h */ case   15:  		/* lwz R28, <#[R1 + 104]> */
		/* 82143710h case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000068) );
		/* 82143710h case   15:*/		return 0x82143714;
		  /* 82143714h */ case   16:  		/* add R11, R26, R27 */
		/* 82143714h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R26,regs.R27);
		/* 82143714h case   16:*/		return 0x82143718;
		  /* 82143718h */ case   17:  		/* add R11, R11, R28 */
		/* 82143718h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 82143718h case   17:*/		return 0x8214371C;
		  /* 8214371Ch */ case   18:  		/* addi R11, R11, 5 */
		/* 8214371Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5);
		/* 8214371Ch case   18:*/		return 0x82143720;
		  /* 82143720h */ case   19:  		/* rlwinm R11, R11, 17, 1, 14 */
		/* 82143720h case   19:*/		cpu::op::rlwinm<0,17,1,14>(regs,&regs.R11,regs.R11);
		/* 82143720h case   19:*/		return 0x82143724;
		  /* 82143724h */ case   20:  		/* ori R4, R11, 65534 */
		/* 82143724h case   20:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R11,0xFFFE);
		/* 82143724h case   20:*/		return 0x82143728;
		  /* 82143728h */ case   21:  		/* bl -328632 */
		/* 82143728h case   21:*/		regs.LR = 0x8214372C; return 0x820F3370;
		/* 82143728h case   21:*/		return 0x8214372C;
		  /* 8214372Ch */ case   22:  		/* lis R4, 18771 */
		/* 8214372Ch case   22:*/		cpu::op::lis<0>(regs,&regs.R4,0x4953);
		/* 8214372Ch case   22:*/		return 0x82143730;
		  /* 82143730h */ case   23:  		/* mr R3, R31 */
		/* 82143730h case   23:*/		regs.R3 = regs.R31;
		/* 82143730h case   23:*/		return 0x82143734;
		  /* 82143734h */ case   24:  		/* ori R4, R4, 21072 */
		/* 82143734h case   24:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x5250);
		/* 82143734h case   24:*/		return 0x82143738;
		  /* 82143738h */ case   25:  		/* bl -328648 */
		/* 82143738h case   25:*/		regs.LR = 0x8214373C; return 0x820F3370;
		/* 82143738h case   25:*/		return 0x8214373C;
		  /* 8214373Ch */ case   26:  		/* or. R29, R3, R3 */
		/* 8214373Ch case   26:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8214373Ch case   26:*/		return 0x82143740;
		  /* 82143740h */ case   27:  		/* bc 12, CR0_LT, 1316 */
		/* 82143740h case   27:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143740h case   27:*/		return 0x82143744;
		  /* 82143744h */ case   28:  		/* addi R30, R1, 144 */
		/* 82143744h case   28:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x90);
		/* 82143744h case   28:*/		return 0x82143748;
		  /* 82143748h */ case   29:  		/* li R29, 3 */
		/* 82143748h case   29:*/		cpu::op::li<0>(regs,&regs.R29,0x3);
		/* 82143748h case   29:*/		return 0x8214374C;
		  /* 8214374Ch */ case   30:  		/* lwz R4, <#[R30]> */
		/* 8214374Ch case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 8214374Ch case   30:*/		return 0x82143750;
	}
	return 0x82143750;
} // Block from 821436D4h-82143750h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82143750h
// Function '?GenerateCode@CFXLProgram@D3DXShader@@UAAJPAPAUID3DXBuffer@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143750);
		  /* 82143750h */ case    0:  		/* mr R3, R31 */
		/* 82143750h case    0:*/		regs.R3 = regs.R31;
		/* 82143750h case    0:*/		return 0x82143754;
		  /* 82143754h */ case    1:  		/* cmpwi CR6, R4, -1 */
		/* 82143754h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 82143754h case    1:*/		return 0x82143758;
		  /* 82143758h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 82143758h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82143760;  }
		/* 82143758h case    2:*/		return 0x8214375C;
		  /* 8214375Ch */ case    3:  		/* li R4, 0 */
		/* 8214375Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214375Ch case    3:*/		return 0x82143760;
	}
	return 0x82143760;
} // Block from 82143750h-82143760h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82143760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143760);
		  /* 82143760h */ case    0:  		/* bl -328688 */
		/* 82143760h case    0:*/		regs.LR = 0x82143764; return 0x820F3370;
		/* 82143760h case    0:*/		return 0x82143764;
		  /* 82143764h */ case    1:  		/* addic. R29, R29, -1 */
		/* 82143764h case    1:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82143764h case    1:*/		return 0x82143768;
		  /* 82143768h */ case    2:  		/* addi R30, R30, 4 */
		/* 82143768h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82143768h case    2:*/		return 0x8214376C;
		  /* 8214376Ch */ case    3:  		/* bc 4, CR0_EQ, -32 */
		/* 8214376Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8214374C;  }
		/* 8214376Ch case    3:*/		return 0x82143770;
		  /* 82143770h */ case    4:  		/* mr R30, R17 */
		/* 82143770h case    4:*/		regs.R30 = regs.R17;
		/* 82143770h case    4:*/		return 0x82143774;
		  /* 82143774h */ case    5:  		/* addi R11, R1, 144 */
		/* 82143774h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 82143774h case    5:*/		return 0x82143778;
		  /* 82143778h */ case    6:  		/* mr R3, R31 */
		/* 82143778h case    6:*/		regs.R3 = regs.R31;
		/* 82143778h case    6:*/		return 0x8214377C;
		  /* 8214377Ch */ case    7:  		/* lwzx R11, <#[R30 + R11]> */
		/* 8214377Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8214377Ch case    7:*/		return 0x82143780;
		  /* 82143780h */ case    8:  		/* cmpwi CR6, R11, -1 */
		/* 82143780h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82143780h case    8:*/		return 0x82143784;
		  /* 82143784h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 82143784h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82143790;  }
		/* 82143784h case    9:*/		return 0x82143788;
		  /* 82143788h */ case   10:  		/* li R4, 0 */
		/* 82143788h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82143788h case   10:*/		return 0x8214378C;
		  /* 8214378Ch */ case   11:  		/* b 20 */
		/* 8214378Ch case   11:*/		return 0x821437A0;
		/* 8214378Ch case   11:*/		return 0x82143790;
	}
	return 0x82143790;
} // Block from 82143760h-82143790h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82143790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143790);
		  /* 82143790h */ case    0:  		/* addi R10, R1, 160 */
		/* 82143790h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 82143790h case    0:*/		return 0x82143794;
		  /* 82143794h */ case    1:  		/* lwzx R10, <#[R30 + R10]> */
		/* 82143794h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 82143794h case    1:*/		return 0x82143798;
		  /* 82143798h */ case    2:  		/* subf R11, R11, R10 */
		/* 82143798h case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82143798h case    2:*/		return 0x8214379C;
		  /* 8214379Ch */ case    3:  		/* addi R4, R11, 1 */
		/* 8214379Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 8214379Ch case    3:*/		return 0x821437A0;
	}
	return 0x821437A0;
} // Block from 82143790h-821437A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821437A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821437A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821437A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821437A0);
		  /* 821437A0h */ case    0:  		/* bl -328752 */
		/* 821437A0h case    0:*/		regs.LR = 0x821437A4; return 0x820F3370;
		/* 821437A0h case    0:*/		return 0x821437A4;
		  /* 821437A4h */ case    1:  		/* addi R30, R30, 4 */
		/* 821437A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821437A4h case    1:*/		return 0x821437A8;
		  /* 821437A8h */ case    2:  		/* cmplwi CR6, R30, 12 */
		/* 821437A8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000000C);
		/* 821437A8h case    2:*/		return 0x821437AC;
		  /* 821437ACh */ case    3:  		/* bc 12, CR6_LT, -56 */
		/* 821437ACh case    3:*/		if ( regs.CR[6].lt ) { return 0x82143774;  }
		/* 821437ACh case    3:*/		return 0x821437B0;
		  /* 821437B0h */ case    4:  		/* mr R4, R28 */
		/* 821437B0h case    4:*/		regs.R4 = regs.R28;
		/* 821437B0h case    4:*/		return 0x821437B4;
		  /* 821437B4h */ case    5:  		/* mr R3, R31 */
		/* 821437B4h case    5:*/		regs.R3 = regs.R31;
		/* 821437B4h case    5:*/		return 0x821437B8;
		  /* 821437B8h */ case    6:  		/* bl -328776 */
		/* 821437B8h case    6:*/		regs.LR = 0x821437BC; return 0x820F3370;
		/* 821437B8h case    6:*/		return 0x821437BC;
		  /* 821437BCh */ case    7:  		/* cmplwi CR6, R28, 0 */
		/* 821437BCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821437BCh case    7:*/		return 0x821437C0;
		  /* 821437C0h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 821437C0h case    8:*/		if ( regs.CR[6].eq ) { return 0x821437F0;  }
		/* 821437C0h case    8:*/		return 0x821437C4;
		  /* 821437C4h */ case    9:  		/* lwz R11, <#[R1 + 88]> */
		/* 821437C4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821437C4h case    9:*/		return 0x821437C8;
		  /* 821437C8h */ case   10:  		/* mr R29, R28 */
		/* 821437C8h case   10:*/		regs.R29 = regs.R28;
		/* 821437C8h case   10:*/		return 0x821437CC;
		  /* 821437CCh */ case   11:  		/* addi R30, R11, -4 */
		/* 821437CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFC);
		/* 821437CCh case   11:*/		return 0x821437D0;
		  /* 821437D0h */ case   12:  		/* mr R3, R31 */
		/* 821437D0h case   12:*/		regs.R3 = regs.R31;
		/* 821437D0h case   12:*/		return 0x821437D4;
		  /* 821437D4h */ case   13:  		/* lwz R4, <#[R30 + 4]> */
		/* 821437D4h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 821437D4h case   13:*/		return 0x821437D8;
		  /* 821437D8h */ case   14:  		/* bl -328808 */
		/* 821437D8h case   14:*/		regs.LR = 0x821437DC; return 0x820F3370;
		/* 821437D8h case   14:*/		return 0x821437DC;
		  /* 821437DCh */ case   15:  		/* mr R3, R31 */
		/* 821437DCh case   15:*/		regs.R3 = regs.R31;
		/* 821437DCh case   15:*/		return 0x821437E0;
		  /* 821437E0h */ case   16:  		/* lwzu R4, <#[R30 + 8]> */
		/* 821437E0h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		regs.R30 = (uint32)(regs.R30 + 0x00000008);
		/* 821437E0h case   16:*/		return 0x821437E4;
		  /* 821437E4h */ case   17:  		/* bl -328820 */
		/* 821437E4h case   17:*/		regs.LR = 0x821437E8; return 0x820F3370;
		/* 821437E4h case   17:*/		return 0x821437E8;
		  /* 821437E8h */ case   18:  		/* addic. R29, R29, -1 */
		/* 821437E8h case   18:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821437E8h case   18:*/		return 0x821437EC;
		  /* 821437ECh */ case   19:  		/* bc 4, CR0_EQ, -28 */
		/* 821437ECh case   19:*/		if ( !regs.CR[0].eq ) { return 0x821437D0;  }
		/* 821437ECh case   19:*/		return 0x821437F0;
	}
	return 0x821437F0;
} // Block from 821437A0h-821437F0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821437F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821437F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821437F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821437F0);
		  /* 821437F0h */ case    0:  		/* mr R4, R27 */
		/* 821437F0h case    0:*/		regs.R4 = regs.R27;
		/* 821437F0h case    0:*/		return 0x821437F4;
		  /* 821437F4h */ case    1:  		/* mr R3, R31 */
		/* 821437F4h case    1:*/		regs.R3 = regs.R31;
		/* 821437F4h case    1:*/		return 0x821437F8;
		  /* 821437F8h */ case    2:  		/* bl -328840 */
		/* 821437F8h case    2:*/		regs.LR = 0x821437FC; return 0x820F3370;
		/* 821437F8h case    2:*/		return 0x821437FC;
		  /* 821437FCh */ case    3:  		/* cmplwi CR6, R27, 0 */
		/* 821437FCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821437FCh case    3:*/		return 0x82143800;
		  /* 82143800h */ case    4:  		/* bc 12, CR6_EQ, 48 */
		/* 82143800h case    4:*/		if ( regs.CR[6].eq ) { return 0x82143830;  }
		/* 82143800h case    4:*/		return 0x82143804;
		  /* 82143804h */ case    5:  		/* lwz R11, <#[R1 + 92]> */
		/* 82143804h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82143804h case    5:*/		return 0x82143808;
		  /* 82143808h */ case    6:  		/* mr R29, R27 */
		/* 82143808h case    6:*/		regs.R29 = regs.R27;
		/* 82143808h case    6:*/		return 0x8214380C;
		  /* 8214380Ch */ case    7:  		/* addi R30, R11, -4 */
		/* 8214380Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFC);
		/* 8214380Ch case    7:*/		return 0x82143810;
		  /* 82143810h */ case    8:  		/* mr R3, R31 */
		/* 82143810h case    8:*/		regs.R3 = regs.R31;
		/* 82143810h case    8:*/		return 0x82143814;
		  /* 82143814h */ case    9:  		/* lwz R4, <#[R30 + 4]> */
		/* 82143814h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 82143814h case    9:*/		return 0x82143818;
		  /* 82143818h */ case   10:  		/* bl -328872 */
		/* 82143818h case   10:*/		regs.LR = 0x8214381C; return 0x820F3370;
		/* 82143818h case   10:*/		return 0x8214381C;
		  /* 8214381Ch */ case   11:  		/* mr R3, R31 */
		/* 8214381Ch case   11:*/		regs.R3 = regs.R31;
		/* 8214381Ch case   11:*/		return 0x82143820;
		  /* 82143820h */ case   12:  		/* lwzu R4, <#[R30 + 8]> */
		/* 82143820h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		regs.R30 = (uint32)(regs.R30 + 0x00000008);
		/* 82143820h case   12:*/		return 0x82143824;
		  /* 82143824h */ case   13:  		/* bl -328884 */
		/* 82143824h case   13:*/		regs.LR = 0x82143828; return 0x820F3370;
		/* 82143824h case   13:*/		return 0x82143828;
		  /* 82143828h */ case   14:  		/* addic. R29, R29, -1 */
		/* 82143828h case   14:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82143828h case   14:*/		return 0x8214382C;
		  /* 8214382Ch */ case   15:  		/* bc 4, CR0_EQ, -28 */
		/* 8214382Ch case   15:*/		if ( !regs.CR[0].eq ) { return 0x82143810;  }
		/* 8214382Ch case   15:*/		return 0x82143830;
	}
	return 0x82143830;
} // Block from 821437F0h-82143830h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82143830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143830);
		  /* 82143830h */ case    0:  		/* mr R4, R26 */
		/* 82143830h case    0:*/		regs.R4 = regs.R26;
		/* 82143830h case    0:*/		return 0x82143834;
		  /* 82143834h */ case    1:  		/* mr R3, R31 */
		/* 82143834h case    1:*/		regs.R3 = regs.R31;
		/* 82143834h case    1:*/		return 0x82143838;
		  /* 82143838h */ case    2:  		/* bl -328904 */
		/* 82143838h case    2:*/		regs.LR = 0x8214383C; return 0x820F3370;
		/* 82143838h case    2:*/		return 0x8214383C;
		  /* 8214383Ch */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 8214383Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8214383Ch case    3:*/		return 0x82143840;
		  /* 82143840h */ case    4:  		/* bc 12, CR6_EQ, 48 */
		/* 82143840h case    4:*/		if ( regs.CR[6].eq ) { return 0x82143870;  }
		/* 82143840h case    4:*/		return 0x82143844;
		  /* 82143844h */ case    5:  		/* lwz R11, <#[R1 + 96]> */
		/* 82143844h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82143844h case    5:*/		return 0x82143848;
		  /* 82143848h */ case    6:  		/* mr R29, R26 */
		/* 82143848h case    6:*/		regs.R29 = regs.R26;
		/* 82143848h case    6:*/		return 0x8214384C;
		  /* 8214384Ch */ case    7:  		/* addi R30, R11, -4 */
		/* 8214384Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFC);
		/* 8214384Ch case    7:*/		return 0x82143850;
		  /* 82143850h */ case    8:  		/* mr R3, R31 */
		/* 82143850h case    8:*/		regs.R3 = regs.R31;
		/* 82143850h case    8:*/		return 0x82143854;
		  /* 82143854h */ case    9:  		/* lwz R4, <#[R30 + 4]> */
		/* 82143854h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 82143854h case    9:*/		return 0x82143858;
		  /* 82143858h */ case   10:  		/* bl -328936 */
		/* 82143858h case   10:*/		regs.LR = 0x8214385C; return 0x820F3370;
		/* 82143858h case   10:*/		return 0x8214385C;
		  /* 8214385Ch */ case   11:  		/* mr R3, R31 */
		/* 8214385Ch case   11:*/		regs.R3 = regs.R31;
		/* 8214385Ch case   11:*/		return 0x82143860;
		  /* 82143860h */ case   12:  		/* lwzu R4, <#[R30 + 8]> */
		/* 82143860h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		regs.R30 = (uint32)(regs.R30 + 0x00000008);
		/* 82143860h case   12:*/		return 0x82143864;
		  /* 82143864h */ case   13:  		/* bl -328948 */
		/* 82143864h case   13:*/		regs.LR = 0x82143868; return 0x820F3370;
		/* 82143864h case   13:*/		return 0x82143868;
		  /* 82143868h */ case   14:  		/* addic. R29, R29, -1 */
		/* 82143868h case   14:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82143868h case   14:*/		return 0x8214386C;
		  /* 8214386Ch */ case   15:  		/* bc 4, CR0_EQ, -28 */
		/* 8214386Ch case   15:*/		if ( !regs.CR[0].eq ) { return 0x82143850;  }
		/* 8214386Ch case   15:*/		return 0x82143870;
	}
	return 0x82143870;
} // Block from 82143830h-82143870h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82143870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143870);
		  /* 82143870h */ case    0:  		/* mr R3, R31 */
		/* 82143870h case    0:*/		regs.R3 = regs.R31;
		/* 82143870h case    0:*/		return 0x82143874;
		  /* 82143874h */ case    1:  		/* bl -328460 */
		/* 82143874h case    1:*/		regs.LR = 0x82143878; return 0x820F3568;
		/* 82143874h case    1:*/		return 0x82143878;
		  /* 82143878h */ case    2:  		/* or. R29, R3, R3 */
		/* 82143878h case    2:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143878h case    2:*/		return 0x8214387C;
		  /* 8214387Ch */ case    3:  		/* bc 12, CR0_LT, 1000 */
		/* 8214387Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 8214387Ch case    3:*/		return 0x82143880;
		  /* 82143880h */ case    4:  		/* rlwinm R11, R18, 19, 0, 12 */
		/* 82143880h case    4:*/		cpu::op::rlwinm<0,19,0,12>(regs,&regs.R11,regs.R18);
		/* 82143880h case    4:*/		return 0x82143884;
		  /* 82143884h */ case    5:  		/* mr R3, R31 */
		/* 82143884h case    5:*/		regs.R3 = regs.R31;
		/* 82143884h case    5:*/		return 0x82143888;
		  /* 82143888h */ case    6:  		/* addis R11, R11, 2 */
		/* 82143888h case    6:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82143888h case    6:*/		return 0x8214388C;
		  /* 8214388Ch */ case    7:  		/* rlwinm R11, R11, 0, 1, 15 */
		/* 8214388Ch case    7:*/		cpu::op::rlwinm<0,0,1,15>(regs,&regs.R11,regs.R11);
		/* 8214388Ch case    7:*/		return 0x82143890;
		  /* 82143890h */ case    8:  		/* ori R4, R11, 65534 */
		/* 82143890h case    8:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R11,0xFFFE);
		/* 82143890h case    8:*/		return 0x82143894;
		  /* 82143894h */ case    9:  		/* bl -328996 */
		/* 82143894h case    9:*/		regs.LR = 0x82143898; return 0x820F3370;
		/* 82143894h case    9:*/		return 0x82143898;
		  /* 82143898h */ case   10:  		/* or. R29, R3, R3 */
		/* 82143898h case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143898h case   10:*/		return 0x8214389C;
		  /* 8214389Ch */ case   11:  		/* bc 12, CR0_LT, 968 */
		/* 8214389Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 8214389Ch case   11:*/		return 0x821438A0;
		  /* 821438A0h */ case   12:  		/* lis R4, 21577 */
		/* 821438A0h case   12:*/		cpu::op::lis<0>(regs,&regs.R4,0x5449);
		/* 821438A0h case   12:*/		return 0x821438A4;
		  /* 821438A4h */ case   13:  		/* mr R3, R31 */
		/* 821438A4h case   13:*/		regs.R3 = regs.R31;
		/* 821438A4h case   13:*/		return 0x821438A8;
		  /* 821438A8h */ case   14:  		/* ori R4, R4, 19523 */
		/* 821438A8h case   14:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x4C43);
		/* 821438A8h case   14:*/		return 0x821438AC;
		  /* 821438ACh */ case   15:  		/* bl -329020 */
		/* 821438ACh case   15:*/		regs.LR = 0x821438B0; return 0x820F3370;
		/* 821438ACh case   15:*/		return 0x821438B0;
		  /* 821438B0h */ case   16:  		/* or. R29, R3, R3 */
		/* 821438B0h case   16:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821438B0h case   16:*/		return 0x821438B4;
		  /* 821438B4h */ case   17:  		/* bc 12, CR0_LT, 944 */
		/* 821438B4h case   17:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 821438B4h case   17:*/		return 0x821438B8;
		  /* 821438B8h */ case   18:  		/* rlwinm R28, R18, 2, 0, 29 */
		/* 821438B8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R18);
		/* 821438B8h case   18:*/		return 0x821438BC;
		  /* 821438BCh */ case   19:  		/* mr R3, R31 */
		/* 821438BCh case   19:*/		regs.R3 = regs.R31;
		/* 821438BCh case   19:*/		return 0x821438C0;
		  /* 821438C0h */ case   20:  		/* mr R4, R28 */
		/* 821438C0h case   20:*/		regs.R4 = regs.R28;
		/* 821438C0h case   20:*/		return 0x821438C4;
		  /* 821438C4h */ case   21:  		/* bl -329044 */
		/* 821438C4h case   21:*/		regs.LR = 0x821438C8; return 0x820F3370;
		/* 821438C4h case   21:*/		return 0x821438C8;
		  /* 821438C8h */ case   22:  		/* or. R29, R3, R3 */
		/* 821438C8h case   22:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821438C8h case   22:*/		return 0x821438CC;
		  /* 821438CCh */ case   23:  		/* bc 12, CR0_LT, 920 */
		/* 821438CCh case   23:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 821438CCh case   23:*/		return 0x821438D0;
		  /* 821438D0h */ case   24:  		/* lwz R11, <#[R31 + 224]> */
		/* 821438D0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E0) );
		/* 821438D0h case   24:*/		return 0x821438D4;
		  /* 821438D4h */ case   25:  		/* mr R27, R17 */
		/* 821438D4h case   25:*/		regs.R27 = regs.R17;
		/* 821438D4h case   25:*/		return 0x821438D8;
		  /* 821438D8h */ case   26:  		/* cmpwi CR6, R11, 0 */
		/* 821438D8h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821438D8h case   26:*/		return 0x821438DC;
		  /* 821438DCh */ case   27:  		/* bc 12, CR6_EQ, 56 */
		/* 821438DCh case   27:*/		if ( regs.CR[6].eq ) { return 0x82143914;  }
		/* 821438DCh case   27:*/		return 0x821438E0;
		  /* 821438E0h */ case   28:  		/* cmplwi CR6, R28, 0 */
		/* 821438E0h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821438E0h case   28:*/		return 0x821438E4;
		  /* 821438E4h */ case   29:  		/* bc 12, CR6_EQ, 96 */
		/* 821438E4h case   29:*/		if ( regs.CR[6].eq ) { return 0x82143944;  }
		/* 821438E4h case   29:*/		return 0x821438E8;
		  /* 821438E8h */ case   30:  		/* mr R30, R15 */
		/* 821438E8h case   30:*/		regs.R30 = regs.R15;
		/* 821438E8h case   30:*/		return 0x821438EC;
		  /* 821438ECh */ case   31:  		/* mr R3, R31 */
		/* 821438ECh case   31:*/		regs.R3 = regs.R31;
		/* 821438ECh case   31:*/		return 0x821438F0;
		  /* 821438F0h */ case   32:  		/* lfd FR1, <#[R30]> */
		/* 821438F0h case   32:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R30 + 0x00000000) );
		/* 821438F0h case   32:*/		return 0x821438F4;
		  /* 821438F4h */ case   33:  		/* bl -3372 */
		/* 821438F4h case   33:*/		regs.LR = 0x821438F8; return 0x82142BC8;
		/* 821438F4h case   33:*/		return 0x821438F8;
		  /* 821438F8h */ case   34:  		/* or. R29, R3, R3 */
		/* 821438F8h case   34:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821438F8h case   34:*/		return 0x821438FC;
		  /* 821438FCh */ case   35:  		/* bc 12, CR0_LT, 872 */
		/* 821438FCh case   35:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 821438FCh case   35:*/		return 0x82143900;
		  /* 82143900h */ case   36:  		/* addi R27, R27, 1 */
		/* 82143900h case   36:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82143900h case   36:*/		return 0x82143904;
		  /* 82143904h */ case   37:  		/* addi R30, R30, 8 */
		/* 82143904h case   37:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 82143904h case   37:*/		return 0x82143908;
		  /* 82143908h */ case   38:  		/* cmplw CR6, R27, R28 */
		/* 82143908h case   38:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R28);
		/* 82143908h case   38:*/		return 0x8214390C;
		  /* 8214390Ch */ case   39:  		/* bc 12, CR6_LT, -32 */
		/* 8214390Ch case   39:*/		if ( regs.CR[6].lt ) { return 0x821438EC;  }
		/* 8214390Ch case   39:*/		return 0x82143910;
		  /* 82143910h */ case   40:  		/* b 52 */
		/* 82143910h case   40:*/		return 0x82143944;
		/* 82143910h case   40:*/		return 0x82143914;
	}
	return 0x82143914;
} // Block from 82143870h-82143914h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82143914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143914);
		  /* 82143914h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82143914h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82143914h case    0:*/		return 0x82143918;
		  /* 82143918h */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 82143918h case    1:*/		if ( regs.CR[6].eq ) { return 0x82143944;  }
		/* 82143918h case    1:*/		return 0x8214391C;
		  /* 8214391Ch */ case    2:  		/* mr R30, R15 */
		/* 8214391Ch case    2:*/		regs.R30 = regs.R15;
		/* 8214391Ch case    2:*/		return 0x82143920;
		  /* 82143920h */ case    3:  		/* mr R3, R31 */
		/* 82143920h case    3:*/		regs.R3 = regs.R31;
		/* 82143920h case    3:*/		return 0x82143924;
		  /* 82143924h */ case    4:  		/* lfd FR1, <#[R30]> */
		/* 82143924h case    4:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R30 + 0x00000000) );
		/* 82143924h case    4:*/		return 0x82143928;
		  /* 82143928h */ case    5:  		/* bl -3520 */
		/* 82143928h case    5:*/		regs.LR = 0x8214392C; return 0x82142B68;
		/* 82143928h case    5:*/		return 0x8214392C;
		  /* 8214392Ch */ case    6:  		/* or. R29, R3, R3 */
		/* 8214392Ch case    6:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8214392Ch case    6:*/		return 0x82143930;
		  /* 82143930h */ case    7:  		/* bc 12, CR0_LT, 820 */
		/* 82143930h case    7:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143930h case    7:*/		return 0x82143934;
		  /* 82143934h */ case    8:  		/* addi R27, R27, 1 */
		/* 82143934h case    8:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82143934h case    8:*/		return 0x82143938;
		  /* 82143938h */ case    9:  		/* addi R30, R30, 8 */
		/* 82143938h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 82143938h case    9:*/		return 0x8214393C;
		  /* 8214393Ch */ case   10:  		/* cmplw CR6, R27, R28 */
		/* 8214393Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R28);
		/* 8214393Ch case   10:*/		return 0x82143940;
		  /* 82143940h */ case   11:  		/* bc 12, CR6_LT, -32 */
		/* 82143940h case   11:*/		if ( regs.CR[6].lt ) { return 0x82143920;  }
		/* 82143940h case   11:*/		return 0x82143944;
	}
	return 0x82143944;
} // Block from 82143914h-82143944h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82143944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143944);
		  /* 82143944h */ case    0:  		/* li R4, 0 */
		/* 82143944h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82143944h case    0:*/		return 0x82143948;
		  /* 82143948h */ case    1:  		/* lwz R20, <#[R31 + 276]> */
		/* 82143948h case    1:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R31 + 0x00000114) );
		/* 82143948h case    1:*/		return 0x8214394C;
		  /* 8214394Ch */ case    2:  		/* mr R3, R31 */
		/* 8214394Ch case    2:*/		regs.R3 = regs.R31;
		/* 8214394Ch case    2:*/		return 0x82143950;
		  /* 82143950h */ case    3:  		/* bl -329184 */
		/* 82143950h case    3:*/		regs.LR = 0x82143954; return 0x820F3370;
		/* 82143950h case    3:*/		return 0x82143954;
		  /* 82143954h */ case    4:  		/* or. R29, R3, R3 */
		/* 82143954h case    4:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143954h case    4:*/		return 0x82143958;
		  /* 82143958h */ case    5:  		/* bc 12, CR0_LT, 780 */
		/* 82143958h case    5:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143958h case    5:*/		return 0x8214395C;
		  /* 8214395Ch */ case    6:  		/* lis R4, 17228 */
		/* 8214395Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0x434C);
		/* 8214395Ch case    6:*/		return 0x82143960;
		  /* 82143960h */ case    7:  		/* mr R3, R31 */
		/* 82143960h case    7:*/		regs.R3 = regs.R31;
		/* 82143960h case    7:*/		return 0x82143964;
		  /* 82143964h */ case    8:  		/* ori R4, R4, 22598 */
		/* 82143964h case    8:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x5846);
		/* 82143964h case    8:*/		return 0x82143968;
		  /* 82143968h */ case    9:  		/* bl -329208 */
		/* 82143968h case    9:*/		regs.LR = 0x8214396C; return 0x820F3370;
		/* 82143968h case    9:*/		return 0x8214396C;
		  /* 8214396Ch */ case   10:  		/* or. R29, R3, R3 */
		/* 8214396Ch case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8214396Ch case   10:*/		return 0x82143970;
		  /* 82143970h */ case   11:  		/* bc 12, CR0_LT, 756 */
		/* 82143970h case   11:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143970h case   11:*/		return 0x82143974;
		  /* 82143974h */ case   12:  		/* mr R3, R31 */
		/* 82143974h case   12:*/		regs.R3 = regs.R31;
		/* 82143974h case   12:*/		return 0x82143978;
		  /* 82143978h */ case   13:  		/* lwz R4, <#[R31 + 12]> */
		/* 82143978h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82143978h case   13:*/		return 0x8214397C;
		  /* 8214397Ch */ case   14:  		/* bl -329228 */
		/* 8214397Ch case   14:*/		regs.LR = 0x82143980; return 0x820F3370;
		/* 8214397Ch case   14:*/		return 0x82143980;
		  /* 82143980h */ case   15:  		/* or. R29, R3, R3 */
		/* 82143980h case   15:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143980h case   15:*/		return 0x82143984;
		  /* 82143984h */ case   16:  		/* bc 12, CR0_LT, 736 */
		/* 82143984h case   16:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143984h case   16:*/		return 0x82143988;
		  /* 82143988h */ case   17:  		/* lwz R11, <#[R31 + 12]> */
		/* 82143988h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82143988h case   17:*/		return 0x8214398C;
		  /* 8214398Ch */ case   18:  		/* mr R21, R17 */
		/* 8214398Ch case   18:*/		regs.R21 = regs.R17;
		/* 8214398Ch case   18:*/		return 0x82143990;
		  /* 82143990h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 82143990h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82143990h case   19:*/		return 0x82143994;
		  /* 82143994h */ case   20:  		/* bc 4, CR6_GT, 536 */
		/* 82143994h case   20:*/		if ( !regs.CR[6].gt ) { return 0x82143BAC;  }
		/* 82143994h case   20:*/		return 0x82143998;
		  /* 82143998h */ case   21:  		/* mr R22, R17 */
		/* 82143998h case   21:*/		regs.R22 = regs.R17;
		/* 82143998h case   21:*/		return 0x8214399C;
		  /* 8214399Ch */ case   22:  		/* lwz R11, <#[R31 + 24]> */
		/* 8214399Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8214399Ch case   22:*/		return 0x821439A0;
		  /* 821439A0h */ case   23:  		/* lis R10, -32768 */
		/* 821439A0h case   23:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 821439A0h case   23:*/		return 0x821439A4;
		  /* 821439A4h */ case   24:  		/* mr R3, R31 */
		/* 821439A4h case   24:*/		regs.R3 = regs.R31;
		/* 821439A4h case   24:*/		return 0x821439A8;
		  /* 821439A8h */ case   25:  		/* lwzx R11, <#[R22 + R11]> */
		/* 821439A8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + regs.R11 + 0x00000000) );
		/* 821439A8h case   25:*/		return 0x821439AC;
		  /* 821439ACh */ case   26:  		/* lwz R9, <#[R11 + 40]> */
		/* 821439ACh case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 821439ACh case   26:*/		return 0x821439B0;
		  /* 821439B0h */ case   27:  		/* lwz R11, <#[R11]> */
		/* 821439B0h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821439B0h case   27:*/		return 0x821439B4;
		  /* 821439B4h */ case   28:  		/* subfic R9, R9, 0 */
		/* 821439B4h case   28:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x0);
		/* 821439B4h case   28:*/		return 0x821439B8;
		  /* 821439B8h */ case   29:  		/* subfe R9, R9, R9 */
		/* 821439B8h case   29:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821439B8h case   29:*/		return 0x821439BC;
		  /* 821439BCh */ case   30:  		/* and R10, R9, R10 */
		/* 821439BCh case   30:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821439BCh case   30:*/		return 0x821439C0;
		  /* 821439C0h */ case   31:  		/* or R4, R11, R10 */
		/* 821439C0h case   31:*/		cpu::op::or<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 821439C0h case   31:*/		return 0x821439C4;
		  /* 821439C4h */ case   32:  		/* bl -329300 */
		/* 821439C4h case   32:*/		regs.LR = 0x821439C8; return 0x820F3370;
		/* 821439C4h case   32:*/		return 0x821439C8;
		  /* 821439C8h */ case   33:  		/* or. R29, R3, R3 */
		/* 821439C8h case   33:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821439C8h case   33:*/		return 0x821439CC;
		  /* 821439CCh */ case   34:  		/* bc 12, CR0_LT, 664 */
		/* 821439CCh case   34:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 821439CCh case   34:*/		return 0x821439D0;
		  /* 821439D0h */ case   35:  		/* lwz R11, <#[R31 + 24]> */
		/* 821439D0h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821439D0h case   35:*/		return 0x821439D4;
		  /* 821439D4h */ case   36:  		/* mr R3, R31 */
		/* 821439D4h case   36:*/		regs.R3 = regs.R31;
		/* 821439D4h case   36:*/		return 0x821439D8;
		  /* 821439D8h */ case   37:  		/* lwzx R11, <#[R22 + R11]> */
		/* 821439D8h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + regs.R11 + 0x00000000) );
		/* 821439D8h case   37:*/		return 0x821439DC;
		  /* 821439DCh */ case   38:  		/* lwz R10, <#[R11]> */
		/* 821439DCh case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821439DCh case   38:*/		return 0x821439E0;
		  /* 821439E0h */ case   39:  		/* lwz R11, <#[R11 + 4]> */
		/* 821439E0h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821439E0h case   39:*/		return 0x821439E4;
		  /* 821439E4h */ case   40:  		/* rlwinm R28, R10, 0, 12, 31 */
		/* 821439E4h case   40:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R28,regs.R10);
		/* 821439E4h case   40:*/		return 0x821439E8;
		  /* 821439E8h */ case   41:  		/* divwu R24, R11, R28 */
		/* 821439E8h case   41:*/		cpu::op::divwu<0>(regs,&regs.R24,regs.R11,regs.R28);
		/* 821439E8h case   41:*/		return 0x821439EC;
		  /* 821439ECh */ case   42:  		/* twi 6, R28, 0 */
		/* 821439ECh case   42:*/		cpu::op::tw<6>(regs, 0x821439EC, regs.R28, 0x00000000);
		/* 821439ECh case   42:*/		return 0x821439F0;
		  /* 821439F0h */ case   43:  		/* mr R4, R24 */
		/* 821439F0h case   43:*/		regs.R4 = regs.R24;
		/* 821439F0h case   43:*/		return 0x821439F4;
		  /* 821439F4h */ case   44:  		/* bl -329348 */
		/* 821439F4h case   44:*/		regs.LR = 0x821439F8; return 0x820F3370;
		/* 821439F4h case   44:*/		return 0x821439F8;
		  /* 821439F8h */ case   45:  		/* or. R29, R3, R3 */
		/* 821439F8h case   45:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821439F8h case   45:*/		return 0x821439FC;
		  /* 821439FCh */ case   46:  		/* bc 12, CR0_LT, 616 */
		/* 821439FCh case   46:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 821439FCh case   46:*/		return 0x82143A00;
		  /* 82143A00h */ case   47:  		/* lwz R11, <#[R31 + 272]> */
		/* 82143A00h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000110) );
		/* 82143A00h case   47:*/		return 0x82143A04;
		  /* 82143A04h */ case   48:  		/* rlwinm R30, R20, 2, 0, 29 */
		/* 82143A04h case   48:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R20);
		/* 82143A04h case   48:*/		return 0x82143A08;
		  /* 82143A08h */ case   49:  		/* mr R26, R17 */
		/* 82143A08h case   49:*/		regs.R26 = regs.R17;
		/* 82143A08h case   49:*/		return 0x82143A0C;
		  /* 82143A0Ch */ case   50:  		/* cmplwi CR6, R24, 0 */
		/* 82143A0Ch case   50:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82143A0Ch case   50:*/		return 0x82143A10;
		  /* 82143A10h */ case   51:  		/* lwzx R10, <#[R11 + R30]> */
		/* 82143A10h case   51:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82143A10h case   51:*/		return 0x82143A14;
		  /* 82143A14h */ case   52:  		/* addi R10, R10, 2 */
		/* 82143A14h case   52:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 82143A14h case   52:*/		return 0x82143A18;
		  /* 82143A18h */ case   53:  		/* stwx R10, <#[R11 + R30]> */
		/* 82143A18h case   53:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82143A18h case   53:*/		return 0x82143A1C;
		  /* 82143A1Ch */ case   54:  		/* bc 12, CR6_EQ, 196 */
		/* 82143A1Ch case   54:*/		if ( regs.CR[6].eq ) { return 0x82143AE0;  }
		/* 82143A1Ch case   54:*/		return 0x82143A20;
		  /* 82143A20h */ case   55:  		/* mr R27, R17 */
		/* 82143A20h case   55:*/		regs.R27 = regs.R17;
		/* 82143A20h case   55:*/		return 0x82143A24;
		  /* 82143A24h */ case   56:  		/* rlwinm R23, R28, 2, 0, 29 */
		/* 82143A24h case   56:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R23,regs.R28);
		/* 82143A24h case   56:*/		return 0x82143A28;
		  /* 82143A28h */ case   57:  		/* lwz R11, <#[R31 + 24]> */
		/* 82143A28h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82143A28h case   57:*/		return 0x82143A2C;
		  /* 82143A2Ch */ case   58:  		/* li R4, 0 */
		/* 82143A2Ch case   58:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82143A2Ch case   58:*/		return 0x82143A30;
		  /* 82143A30h */ case   59:  		/* lwz R10, <#[R31 + 20]> */
		/* 82143A30h case   59:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82143A30h case   59:*/		return 0x82143A34;
		  /* 82143A34h */ case   60:  		/* mr R3, R31 */
		/* 82143A34h case   60:*/		regs.R3 = regs.R31;
		/* 82143A34h case   60:*/		return 0x82143A38;
		  /* 82143A38h */ case   61:  		/* lwz R25, <#[R31 + 276]> */
		/* 82143A38h case   61:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R31 + 0x00000114) );
		/* 82143A38h case   61:*/		return 0x82143A3C;
		  /* 82143A3Ch */ case   62:  		/* lwzx R11, <#[R22 + R11]> */
		/* 82143A3Ch case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + regs.R11 + 0x00000000) );
		/* 82143A3Ch case   62:*/		return 0x82143A40;
		  /* 82143A40h */ case   63:  		/* lwz R11, <#[R11 + 8]> */
		/* 82143A40h case   63:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82143A40h case   63:*/		return 0x82143A44;
		  /* 82143A44h */ case   64:  		/* lwzx R11, <#[R11 + R27]> */
		/* 82143A44h case   64:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82143A44h case   64:*/		return 0x82143A48;
		  /* 82143A48h */ case   65:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82143A48h case   65:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82143A48h case   65:*/		return 0x82143A4C;
		  /* 82143A4Ch */ case   66:  		/* lwzx R28, <#[R11 + R10]> */
		/* 82143A4Ch case   66:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82143A4Ch case   66:*/		return 0x82143A50;
		  /* 82143A50h */ case   67:  		/* bl -329440 */
		/* 82143A50h case   67:*/		regs.LR = 0x82143A54; return 0x820F3370;
		/* 82143A50h case   67:*/		return 0x82143A54;
		  /* 82143A54h */ case   68:  		/* or. R29, R3, R3 */
		/* 82143A54h case   68:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143A54h case   68:*/		return 0x82143A58;
		  /* 82143A58h */ case   69:  		/* bc 12, CR0_LT, 524 */
		/* 82143A58h case   69:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143A58h case   69:*/		return 0x82143A5C;
		  /* 82143A5Ch */ case   70:  		/* lwz R4, <#[R28 + 8]> */
		/* 82143A5Ch case   70:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000008) );
		/* 82143A5Ch case   70:*/		return 0x82143A60;
		  /* 82143A60h */ case   71:  		/* cmpwi CR6, R4, -1 */
		/* 82143A60h case   71:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 82143A60h case   71:*/		return 0x82143A64;
		  /* 82143A64h */ case   72:  		/* bc 12, CR6_EQ, 24 */
		/* 82143A64h case   72:*/		if ( regs.CR[6].eq ) { return 0x82143A7C;  }
		/* 82143A64h case   72:*/		return 0x82143A68;
		  /* 82143A68h */ case   73:  		/* mr R5, R25 */
		/* 82143A68h case   73:*/		regs.R5 = regs.R25;
		/* 82143A68h case   73:*/		return 0x82143A6C;
		  /* 82143A6Ch */ case   74:  		/* mr R3, R31 */
		/* 82143A6Ch case   74:*/		regs.R3 = regs.R31;
		/* 82143A6Ch case   74:*/		return 0x82143A70;
		  /* 82143A70h */ case   75:  		/* bl -3536 */
		/* 82143A70h case   75:*/		regs.LR = 0x82143A74; return 0x82142CA0;
		/* 82143A70h case   75:*/		return 0x82143A74;
		  /* 82143A74h */ case   76:  		/* or. R29, R3, R3 */
		/* 82143A74h case   76:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143A74h case   76:*/		return 0x82143A78;
		  /* 82143A78h */ case   77:  		/* bc 12, CR0_LT, 492 */
		/* 82143A78h case   77:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143A78h case   77:*/		return 0x82143A7C;
	}
	return 0x82143A7C;
} // Block from 82143944h-82143A7Ch (78 instructions)

//////////////////////////////////////////////////////
// Block at 82143A7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143A7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143A7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143A7C);
		  /* 82143A7Ch */ case    0:  		/* mr R4, R28 */
		/* 82143A7Ch case    0:*/		regs.R4 = regs.R28;
		/* 82143A7Ch case    0:*/		return 0x82143A80;
		  /* 82143A80h */ case    1:  		/* mr R3, R31 */
		/* 82143A80h case    1:*/		regs.R3 = regs.R31;
		/* 82143A80h case    1:*/		return 0x82143A84;
		  /* 82143A84h */ case    2:  		/* bl -4164 */
		/* 82143A84h case    2:*/		regs.LR = 0x82143A88; return 0x82142A40;
		/* 82143A84h case    2:*/		return 0x82143A88;
		  /* 82143A88h */ case    3:  		/* or. R29, R3, R3 */
		/* 82143A88h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143A88h case    3:*/		return 0x82143A8C;
		  /* 82143A8Ch */ case    4:  		/* bc 12, CR0_LT, 472 */
		/* 82143A8Ch case    4:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143A8Ch case    4:*/		return 0x82143A90;
		  /* 82143A90h */ case    5:  		/* lwz R10, <#[R28 + 12]> */
		/* 82143A90h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000000C) );
		/* 82143A90h case    5:*/		return 0x82143A94;
		  /* 82143A94h */ case    6:  		/* mr R3, R31 */
		/* 82143A94h case    6:*/		regs.R3 = regs.R31;
		/* 82143A94h case    6:*/		return 0x82143A98;
		  /* 82143A98h */ case    7:  		/* lwz R11, <#[R28 + 16]> */
		/* 82143A98h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82143A98h case    7:*/		return 0x82143A9C;
		  /* 82143A9Ch */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82143A9Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82143A9Ch case    8:*/		return 0x82143AA0;
		  /* 82143AA0h */ case    9:  		/* add R4, R10, R11 */
		/* 82143AA0h case    9:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82143AA0h case    9:*/		return 0x82143AA4;
		  /* 82143AA4h */ case   10:  		/* bl -329524 */
		/* 82143AA4h case   10:*/		regs.LR = 0x82143AA8; return 0x820F3370;
		/* 82143AA4h case   10:*/		return 0x82143AA8;
		  /* 82143AA8h */ case   11:  		/* or. R29, R3, R3 */
		/* 82143AA8h case   11:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143AA8h case   11:*/		return 0x82143AAC;
		  /* 82143AACh */ case   12:  		/* bc 12, CR0_LT, 440 */
		/* 82143AACh case   12:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143AACh case   12:*/		return 0x82143AB0;
		  /* 82143AB0h */ case   13:  		/* lwz R9, <#[R31 + 272]> */
		/* 82143AB0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000110) );
		/* 82143AB0h case   13:*/		return 0x82143AB4;
		  /* 82143AB4h */ case   14:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 82143AB4h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 82143AB4h case   14:*/		return 0x82143AB8;
		  /* 82143AB8h */ case   15:  		/* addi R26, R26, 1 */
		/* 82143AB8h case   15:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82143AB8h case   15:*/		return 0x82143ABC;
		  /* 82143ABCh */ case   16:  		/* add R27, R23, R27 */
		/* 82143ABCh case   16:*/		cpu::op::add<0>(regs,&regs.R27,regs.R23,regs.R27);
		/* 82143ABCh case   16:*/		return 0x82143AC0;
		  /* 82143AC0h */ case   17:  		/* cmplw CR6, R26, R24 */
		/* 82143AC0h case   17:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R24);
		/* 82143AC0h case   17:*/		return 0x82143AC4;
		  /* 82143AC4h */ case   18:  		/* lwzx R10, <#[R11 + R9]> */
		/* 82143AC4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82143AC4h case   18:*/		return 0x82143AC8;
		  /* 82143AC8h */ case   19:  		/* lwzx R11, <#[R9 + R30]> */
		/* 82143AC8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 82143AC8h case   19:*/		return 0x82143ACC;
		  /* 82143ACCh */ case   20:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 82143ACCh case   20:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 82143ACCh case   20:*/		return 0x82143AD0;
		  /* 82143AD0h */ case   21:  		/* add R11, R10, R11 */
		/* 82143AD0h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82143AD0h case   21:*/		return 0x82143AD4;
		  /* 82143AD4h */ case   22:  		/* addi R11, R11, 3 */
		/* 82143AD4h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3);
		/* 82143AD4h case   22:*/		return 0x82143AD8;
		  /* 82143AD8h */ case   23:  		/* stwx R11, <#[R9 + R30]> */
		/* 82143AD8h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 82143AD8h case   23:*/		return 0x82143ADC;
		  /* 82143ADCh */ case   24:  		/* bc 12, CR6_LT, -180 */
		/* 82143ADCh case   24:*/		if ( regs.CR[6].lt ) { return 0x82143A28;  }
		/* 82143ADCh case   24:*/		return 0x82143AE0;
	}
	return 0x82143AE0;
} // Block from 82143A7Ch-82143AE0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82143AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143AE0);
		  /* 82143AE0h */ case    0:  		/* mr R27, R17 */
		/* 82143AE0h case    0:*/		regs.R27 = regs.R17;
		/* 82143AE0h case    0:*/		return 0x82143AE4;
		  /* 82143AE4h */ case    1:  		/* lwz R11, <#[R31 + 24]> */
		/* 82143AE4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82143AE4h case    1:*/		return 0x82143AE8;
		  /* 82143AE8h */ case    2:  		/* li R4, 0 */
		/* 82143AE8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82143AE8h case    2:*/		return 0x82143AEC;
		  /* 82143AECh */ case    3:  		/* lwz R10, <#[R31 + 20]> */
		/* 82143AECh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82143AECh case    3:*/		return 0x82143AF0;
		  /* 82143AF0h */ case    4:  		/* mr R3, R31 */
		/* 82143AF0h case    4:*/		regs.R3 = regs.R31;
		/* 82143AF0h case    4:*/		return 0x82143AF4;
		  /* 82143AF4h */ case    5:  		/* lwz R26, <#[R31 + 276]> */
		/* 82143AF4h case    5:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + 0x00000114) );
		/* 82143AF4h case    5:*/		return 0x82143AF8;
		  /* 82143AF8h */ case    6:  		/* lwzx R11, <#[R22 + R11]> */
		/* 82143AF8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + regs.R11 + 0x00000000) );
		/* 82143AF8h case    6:*/		return 0x82143AFC;
		  /* 82143AFCh */ case    7:  		/* lwz R11, <#[R11 + 16]> */
		/* 82143AFCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82143AFCh case    7:*/		return 0x82143B00;
		  /* 82143B00h */ case    8:  		/* lwzx R11, <#[R11 + R27]> */
		/* 82143B00h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82143B00h case    8:*/		return 0x82143B04;
		  /* 82143B04h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82143B04h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82143B04h case    9:*/		return 0x82143B08;
		  /* 82143B08h */ case   10:  		/* lwzx R28, <#[R11 + R10]> */
		/* 82143B08h case   10:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82143B08h case   10:*/		return 0x82143B0C;
		  /* 82143B0Ch */ case   11:  		/* bl -329628 */
		/* 82143B0Ch case   11:*/		regs.LR = 0x82143B10; return 0x820F3370;
		/* 82143B0Ch case   11:*/		return 0x82143B10;
		  /* 82143B10h */ case   12:  		/* or. R29, R3, R3 */
		/* 82143B10h case   12:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143B10h case   12:*/		return 0x82143B14;
		  /* 82143B14h */ case   13:  		/* bc 12, CR0_LT, 336 */
		/* 82143B14h case   13:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143B14h case   13:*/		return 0x82143B18;
		  /* 82143B18h */ case   14:  		/* lwz R4, <#[R28 + 8]> */
		/* 82143B18h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000008) );
		/* 82143B18h case   14:*/		return 0x82143B1C;
		  /* 82143B1Ch */ case   15:  		/* cmpwi CR6, R4, -1 */
		/* 82143B1Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 82143B1Ch case   15:*/		return 0x82143B20;
		  /* 82143B20h */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 82143B20h case   16:*/		if ( regs.CR[6].eq ) { return 0x82143B38;  }
		/* 82143B20h case   16:*/		return 0x82143B24;
		  /* 82143B24h */ case   17:  		/* mr R5, R26 */
		/* 82143B24h case   17:*/		regs.R5 = regs.R26;
		/* 82143B24h case   17:*/		return 0x82143B28;
		  /* 82143B28h */ case   18:  		/* mr R3, R31 */
		/* 82143B28h case   18:*/		regs.R3 = regs.R31;
		/* 82143B28h case   18:*/		return 0x82143B2C;
		  /* 82143B2Ch */ case   19:  		/* bl -3724 */
		/* 82143B2Ch case   19:*/		regs.LR = 0x82143B30; return 0x82142CA0;
		/* 82143B2Ch case   19:*/		return 0x82143B30;
		  /* 82143B30h */ case   20:  		/* or. R29, R3, R3 */
		/* 82143B30h case   20:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143B30h case   20:*/		return 0x82143B34;
		  /* 82143B34h */ case   21:  		/* bc 12, CR0_LT, 304 */
		/* 82143B34h case   21:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143B34h case   21:*/		return 0x82143B38;
	}
	return 0x82143B38;
} // Block from 82143AE0h-82143B38h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82143B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143B38);
		  /* 82143B38h */ case    0:  		/* mr R4, R28 */
		/* 82143B38h case    0:*/		regs.R4 = regs.R28;
		/* 82143B38h case    0:*/		return 0x82143B3C;
		  /* 82143B3Ch */ case    1:  		/* mr R3, R31 */
		/* 82143B3Ch case    1:*/		regs.R3 = regs.R31;
		/* 82143B3Ch case    1:*/		return 0x82143B40;
		  /* 82143B40h */ case    2:  		/* bl -4352 */
		/* 82143B40h case    2:*/		regs.LR = 0x82143B44; return 0x82142A40;
		/* 82143B40h case    2:*/		return 0x82143B44;
		  /* 82143B44h */ case    3:  		/* or. R29, R3, R3 */
		/* 82143B44h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143B44h case    3:*/		return 0x82143B48;
		  /* 82143B48h */ case    4:  		/* bc 12, CR0_LT, 284 */
		/* 82143B48h case    4:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143B48h case    4:*/		return 0x82143B4C;
		  /* 82143B4Ch */ case    5:  		/* lwz R10, <#[R28 + 12]> */
		/* 82143B4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000000C) );
		/* 82143B4Ch case    5:*/		return 0x82143B50;
		  /* 82143B50h */ case    6:  		/* mr R3, R31 */
		/* 82143B50h case    6:*/		regs.R3 = regs.R31;
		/* 82143B50h case    6:*/		return 0x82143B54;
		  /* 82143B54h */ case    7:  		/* lwz R11, <#[R28 + 16]> */
		/* 82143B54h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82143B54h case    7:*/		return 0x82143B58;
		  /* 82143B58h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82143B58h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82143B58h case    8:*/		return 0x82143B5C;
		  /* 82143B5Ch */ case    9:  		/* add R4, R10, R11 */
		/* 82143B5Ch case    9:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 82143B5Ch case    9:*/		return 0x82143B60;
		  /* 82143B60h */ case   10:  		/* bl -329712 */
		/* 82143B60h case   10:*/		regs.LR = 0x82143B64; return 0x820F3370;
		/* 82143B60h case   10:*/		return 0x82143B64;
		  /* 82143B64h */ case   11:  		/* or. R29, R3, R3 */
		/* 82143B64h case   11:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143B64h case   11:*/		return 0x82143B68;
		  /* 82143B68h */ case   12:  		/* bc 12, CR0_LT, 252 */
		/* 82143B68h case   12:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143B68h case   12:*/		return 0x82143B6C;
		  /* 82143B6Ch */ case   13:  		/* lwz R9, <#[R31 + 272]> */
		/* 82143B6Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000110) );
		/* 82143B6Ch case   13:*/		return 0x82143B70;
		  /* 82143B70h */ case   14:  		/* rlwinm R11, R26, 2, 0, 29 */
		/* 82143B70h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R26);
		/* 82143B70h case   14:*/		return 0x82143B74;
		  /* 82143B74h */ case   15:  		/* addi R27, R27, 4 */
		/* 82143B74h case   15:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 82143B74h case   15:*/		return 0x82143B78;
		  /* 82143B78h */ case   16:  		/* cmplwi CR6, R27, 4 */
		/* 82143B78h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000004);
		/* 82143B78h case   16:*/		return 0x82143B7C;
		  /* 82143B7Ch */ case   17:  		/* lwzx R10, <#[R11 + R9]> */
		/* 82143B7Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82143B7Ch case   17:*/		return 0x82143B80;
		  /* 82143B80h */ case   18:  		/* lwzx R11, <#[R9 + R30]> */
		/* 82143B80h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 82143B80h case   18:*/		return 0x82143B84;
		  /* 82143B84h */ case   19:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 82143B84h case   19:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 82143B84h case   19:*/		return 0x82143B88;
		  /* 82143B88h */ case   20:  		/* add R11, R10, R11 */
		/* 82143B88h case   20:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82143B88h case   20:*/		return 0x82143B8C;
		  /* 82143B8Ch */ case   21:  		/* addi R11, R11, 3 */
		/* 82143B8Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3);
		/* 82143B8Ch case   21:*/		return 0x82143B90;
		  /* 82143B90h */ case   22:  		/* stwx R11, <#[R9 + R30]> */
		/* 82143B90h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 82143B90h case   22:*/		return 0x82143B94;
		  /* 82143B94h */ case   23:  		/* bc 12, CR6_LT, -176 */
		/* 82143B94h case   23:*/		if ( regs.CR[6].lt ) { return 0x82143AE4;  }
		/* 82143B94h case   23:*/		return 0x82143B98;
		  /* 82143B98h */ case   24:  		/* lwz R11, <#[R31 + 12]> */
		/* 82143B98h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82143B98h case   24:*/		return 0x82143B9C;
		  /* 82143B9Ch */ case   25:  		/* addi R21, R21, 1 */
		/* 82143B9Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 82143B9Ch case   25:*/		return 0x82143BA0;
		  /* 82143BA0h */ case   26:  		/* addi R22, R22, 4 */
		/* 82143BA0h case   26:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 82143BA0h case   26:*/		return 0x82143BA4;
		  /* 82143BA4h */ case   27:  		/* cmplw CR6, R21, R11 */
		/* 82143BA4h case   27:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 82143BA4h case   27:*/		return 0x82143BA8;
		  /* 82143BA8h */ case   28:  		/* bc 12, CR6_LT, -524 */
		/* 82143BA8h case   28:*/		if ( regs.CR[6].lt ) { return 0x8214399C;  }
		/* 82143BA8h case   28:*/		return 0x82143BAC;
	}
	return 0x82143BAC;
} // Block from 82143B38h-82143BACh (29 instructions)

//////////////////////////////////////////////////////
// Block at 82143BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143BAC);
		  /* 82143BACh */ case    0:  		/* lis R4, -3856 */
		/* 82143BACh case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFF0F0);
		/* 82143BACh case    0:*/		return 0x82143BB0;
		  /* 82143BB0h */ case    1:  		/* mr R3, R31 */
		/* 82143BB0h case    1:*/		regs.R3 = regs.R31;
		/* 82143BB0h case    1:*/		return 0x82143BB4;
		  /* 82143BB4h */ case    2:  		/* ori R4, R4, 61680 */
		/* 82143BB4h case    2:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0xF0F0);
		/* 82143BB4h case    2:*/		return 0x82143BB8;
		  /* 82143BB8h */ case    3:  		/* bl -329800 */
		/* 82143BB8h case    3:*/		regs.LR = 0x82143BBC; return 0x820F3370;
		/* 82143BB8h case    3:*/		return 0x82143BBC;
		  /* 82143BBCh */ case    4:  		/* or. R29, R3, R3 */
		/* 82143BBCh case    4:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143BBCh case    4:*/		return 0x82143BC0;
		  /* 82143BC0h */ case    5:  		/* bc 12, CR0_LT, 164 */
		/* 82143BC0h case    5:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143BC0h case    5:*/		return 0x82143BC4;
		  /* 82143BC4h */ case    6:  		/* lis R4, 3855 */
		/* 82143BC4h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0xF0F);
		/* 82143BC4h case    6:*/		return 0x82143BC8;
		  /* 82143BC8h */ case    7:  		/* mr R3, R31 */
		/* 82143BC8h case    7:*/		regs.R3 = regs.R31;
		/* 82143BC8h case    7:*/		return 0x82143BCC;
		  /* 82143BCCh */ case    8:  		/* ori R4, R4, 3855 */
		/* 82143BCCh case    8:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0xF0F);
		/* 82143BCCh case    8:*/		return 0x82143BD0;
		  /* 82143BD0h */ case    9:  		/* bl -329824 */
		/* 82143BD0h case    9:*/		regs.LR = 0x82143BD4; return 0x820F3370;
		/* 82143BD0h case    9:*/		return 0x82143BD4;
		  /* 82143BD4h */ case   10:  		/* or. R29, R3, R3 */
		/* 82143BD4h case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143BD4h case   10:*/		return 0x82143BD8;
		  /* 82143BD8h */ case   11:  		/* bc 12, CR0_LT, 140 */
		/* 82143BD8h case   11:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143BD8h case   11:*/		return 0x82143BDC;
		  /* 82143BDCh */ case   12:  		/* lwz R11, <#[R31 + 272]> */
		/* 82143BDCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000110) );
		/* 82143BDCh case   12:*/		return 0x82143BE0;
		  /* 82143BE0h */ case   13:  		/* rlwinm R10, R20, 2, 0, 29 */
		/* 82143BE0h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R20);
		/* 82143BE0h case   13:*/		return 0x82143BE4;
		  /* 82143BE4h */ case   14:  		/* lis R4, 0 */
		/* 82143BE4h case   14:*/		cpu::op::lis<0>(regs,&regs.R4,0x0);
		/* 82143BE4h case   14:*/		return 0x82143BE8;
		  /* 82143BE8h */ case   15:  		/* mr R3, R31 */
		/* 82143BE8h case   15:*/		regs.R3 = regs.R31;
		/* 82143BE8h case   15:*/		return 0x82143BEC;
		  /* 82143BECh */ case   16:  		/* ori R4, R4, 65535 */
		/* 82143BECh case   16:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0xFFFF);
		/* 82143BECh case   16:*/		return 0x82143BF0;
		  /* 82143BF0h */ case   17:  		/* lwzx R9, <#[R10 + R11]> */
		/* 82143BF0h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82143BF0h case   17:*/		return 0x82143BF4;
		  /* 82143BF4h */ case   18:  		/* addi R9, R9, 4 */
		/* 82143BF4h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82143BF4h case   18:*/		return 0x82143BF8;
		  /* 82143BF8h */ case   19:  		/* rlwinm R9, R9, 16, 1, 15 */
		/* 82143BF8h case   19:*/		cpu::op::rlwinm<0,16,1,15>(regs,&regs.R9,regs.R9);
		/* 82143BF8h case   19:*/		return 0x82143BFC;
		  /* 82143BFCh */ case   20:  		/* ori R9, R9, 65534 */
		/* 82143BFCh case   20:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0xFFFE);
		/* 82143BFCh case   20:*/		return 0x82143C00;
		  /* 82143C00h */ case   21:  		/* stwx R9, <#[R10 + R11]> */
		/* 82143C00h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82143C00h case   21:*/		return 0x82143C04;
		  /* 82143C04h */ case   22:  		/* bl -329876 */
		/* 82143C04h case   22:*/		regs.LR = 0x82143C08; return 0x820F3370;
		/* 82143C04h case   22:*/		return 0x82143C08;
		  /* 82143C08h */ case   23:  		/* or. R29, R3, R3 */
		/* 82143C08h case   23:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143C08h case   23:*/		return 0x82143C0C;
		  /* 82143C0Ch */ case   24:  		/* bc 12, CR0_LT, 88 */
		/* 82143C0Ch case   24:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143C0Ch case   24:*/		return 0x82143C10;
		  /* 82143C10h */ case   25:  		/* cmplwi CR6, R16, 0 */
		/* 82143C10h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82143C10h case   25:*/		return 0x82143C14;
		  /* 82143C14h */ case   26:  		/* bc 12, CR6_EQ, 76 */
		/* 82143C14h case   26:*/		if ( regs.CR[6].eq ) { return 0x82143C60;  }
		/* 82143C14h case   26:*/		return 0x82143C18;
		  /* 82143C18h */ case   27:  		/* lwz R11, <#[R31 + 276]> */
		/* 82143C18h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000114) );
		/* 82143C18h case   27:*/		return 0x82143C1C;
		  /* 82143C1Ch */ case   28:  		/* addi R4, R1, 80 */
		/* 82143C1Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82143C1Ch case   28:*/		return 0x82143C20;
		  /* 82143C20h */ case   29:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 82143C20h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 82143C20h case   29:*/		return 0x82143C24;
		  /* 82143C24h */ case   30:  		/* bl -647700 */
		/* 82143C24h case   30:*/		regs.LR = 0x82143C28; return 0x820A5A10;
		/* 82143C24h case   30:*/		return 0x82143C28;
		  /* 82143C28h */ case   31:  		/* or. R29, R3, R3 */
		/* 82143C28h case   31:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82143C28h case   31:*/		return 0x82143C2C;
		  /* 82143C2Ch */ case   32:  		/* bc 12, CR0_LT, 56 */
		/* 82143C2Ch case   32:*/		if ( regs.CR[0].lt ) { return 0x82143C64;  }
		/* 82143C2Ch case   32:*/		return 0x82143C30;
		  /* 82143C30h */ case   33:  		/* lwz R3, <#[R1 + 80]> */
		/* 82143C30h case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82143C30h case   33:*/		return 0x82143C34;
		  /* 82143C34h */ case   34:  		/* lwz R30, <#[R31 + 276]> */
		/* 82143C34h case   34:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000114) );
		/* 82143C34h case   34:*/		return 0x82143C38;
		  /* 82143C38h */ case   35:  		/* lwz R31, <#[R31 + 272]> */
		/* 82143C38h case   35:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000110) );
		/* 82143C38h case   35:*/		return 0x82143C3C;
		  /* 82143C3Ch */ case   36:  		/* lwz R11, <#[R3]> */
		/* 82143C3Ch case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82143C3Ch case   36:*/		return 0x82143C40;
		  /* 82143C40h */ case   37:  		/* lwz R11, <#[R11 + 12]> */
		/* 82143C40h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82143C40h case   37:*/		return 0x82143C44;
		  /* 82143C44h */ case   38:  		/* mtspr CTR, R11 */
		/* 82143C44h case   38:*/		regs.CTR = regs.R11;
		/* 82143C44h case   38:*/		return 0x82143C48;
		  /* 82143C48h */ case   39:  		/* bcctrl 20, CR0_LT */
		/* 82143C48h case   39:*/		if ( 1 ) { regs.LR = 0x82143C4C; return (uint32)regs.CTR; }
		/* 82143C48h case   39:*/		return 0x82143C4C;
		  /* 82143C4Ch */ case   40:  		/* mr R4, R31 */
		/* 82143C4Ch case   40:*/		regs.R4 = regs.R31;
		/* 82143C4Ch case   40:*/		return 0x82143C50;
		  /* 82143C50h */ case   41:  		/* rlwinm R5, R30, 2, 0, 29 */
		/* 82143C50h case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R30);
		/* 82143C50h case   41:*/		return 0x82143C54;
		  /* 82143C54h */ case   42:  		/* bl -729764 */
		/* 82143C54h case   42:*/		regs.LR = 0x82143C58; return 0x820919B0;
		/* 82143C54h case   42:*/		return 0x82143C58;
		  /* 82143C58h */ case   43:  		/* lwz R11, <#[R1 + 80]> */
		/* 82143C58h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82143C58h case   43:*/		return 0x82143C5C;
		  /* 82143C5Ch */ case   44:  		/* stw R11, <#[R16]> */
		/* 82143C5Ch case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 82143C5Ch case   44:*/		return 0x82143C60;
	}
	return 0x82143C60;
} // Block from 82143BACh-82143C60h (45 instructions)

//////////////////////////////////////////////////////
// Block at 82143C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143C60);
		  /* 82143C60h */ case    0:  		/* mr R29, R17 */
		/* 82143C60h case    0:*/		regs.R29 = regs.R17;
		/* 82143C60h case    0:*/		return 0x82143C64;
	}
	return 0x82143C64;
} // Block from 82143C60h-82143C64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82143C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143C64);
		  /* 82143C64h */ case    0:  		/* lis R4, 9345 */
		/* 82143C64h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82143C64h case    0:*/		return 0x82143C68;
		  /* 82143C68h */ case    1:  		/* mr R3, R15 */
		/* 82143C68h case    1:*/		regs.R3 = regs.R15;
		/* 82143C68h case    1:*/		return 0x82143C6C;
		  /* 82143C6Ch */ case    2:  		/* bl -768308 */
		/* 82143C6Ch case    2:*/		regs.LR = 0x82143C70; return 0x82088338;
		/* 82143C6Ch case    2:*/		return 0x82143C70;
		  /* 82143C70h */ case    3:  		/* lis R4, 9345 */
		/* 82143C70h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82143C70h case    3:*/		return 0x82143C74;
		  /* 82143C74h */ case    4:  		/* lwz R3, <#[R1 + 88]> */
		/* 82143C74h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000058) );
		/* 82143C74h case    4:*/		return 0x82143C78;
		  /* 82143C78h */ case    5:  		/* bl -768320 */
		/* 82143C78h case    5:*/		regs.LR = 0x82143C7C; return 0x82088338;
		/* 82143C78h case    5:*/		return 0x82143C7C;
		  /* 82143C7Ch */ case    6:  		/* lis R4, 9345 */
		/* 82143C7Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82143C7Ch case    6:*/		return 0x82143C80;
		  /* 82143C80h */ case    7:  		/* lwz R3, <#[R1 + 92]> */
		/* 82143C80h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000005C) );
		/* 82143C80h case    7:*/		return 0x82143C84;
		  /* 82143C84h */ case    8:  		/* bl -768332 */
		/* 82143C84h case    8:*/		regs.LR = 0x82143C88; return 0x82088338;
		/* 82143C84h case    8:*/		return 0x82143C88;
		  /* 82143C88h */ case    9:  		/* lis R4, 9345 */
		/* 82143C88h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82143C88h case    9:*/		return 0x82143C8C;
		  /* 82143C8Ch */ case   10:  		/* lwz R3, <#[R1 + 96]> */
		/* 82143C8Ch case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 82143C8Ch case   10:*/		return 0x82143C90;
		  /* 82143C90h */ case   11:  		/* bl -768344 */
		/* 82143C90h case   11:*/		regs.LR = 0x82143C94; return 0x82088338;
		/* 82143C90h case   11:*/		return 0x82143C94;
		  /* 82143C94h */ case   12:  		/* mr R3, R29 */
		/* 82143C94h case   12:*/		regs.R3 = regs.R29;
		/* 82143C94h case   12:*/		return 0x82143C98;
	}
	return 0x82143C98;
} // Block from 82143C64h-82143C98h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82143C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143C98);
		  /* 82143C98h */ case    0:  		/* addi R1, R1, 352 */
		/* 82143C98h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x160);
		/* 82143C98h case    0:*/		return 0x82143C9C;
		  /* 82143C9Ch */ case    1:  		/* b -731692 */
		/* 82143C9Ch case    1:*/		return 0x82091270;
		/* 82143C9Ch case    1:*/		return 0x82143CA0;
	}
	return 0x82143CA0;
} // Block from 82143C98h-82143CA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82143CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143CA0);
		  /* 82143CA0h */ case    0:  		/* mfspr R12, LR */
		/* 82143CA0h case    0:*/		regs.R12 = regs.LR;
		/* 82143CA0h case    0:*/		return 0x82143CA4;
		  /* 82143CA4h */ case    1:  		/* bl -731732 */
		/* 82143CA4h case    1:*/		regs.LR = 0x82143CA8; return 0x82091250;
		/* 82143CA4h case    1:*/		return 0x82143CA8;
		  /* 82143CA8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82143CA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82143CA8h case    2:*/		return 0x82143CAC;
		  /* 82143CACh */ case    3:  		/* lwz R11, <#[R3 + 200]> */
		/* 82143CACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000C8) );
		/* 82143CACh case    3:*/		return 0x82143CB0;
		  /* 82143CB0h */ case    4:  		/* lis R10, 18008 */
		/* 82143CB0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0x4658);
		/* 82143CB0h case    4:*/		return 0x82143CB4;
		  /* 82143CB4h */ case    5:  		/* mr R26, R3 */
		/* 82143CB4h case    5:*/		regs.R26 = regs.R3;
		/* 82143CB4h case    5:*/		return 0x82143CB8;
		  /* 82143CB8h */ case    6:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 82143CB8h case    6:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 82143CB8h case    6:*/		return 0x82143CBC;
		  /* 82143CBCh */ case    7:  		/* mr R27, R4 */
		/* 82143CBCh case    7:*/		regs.R27 = regs.R4;
		/* 82143CBCh case    7:*/		return 0x82143CC0;
		  /* 82143CC0h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 82143CC0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82143CC0h case    8:*/		return 0x82143CC4;
		  /* 82143CC4h */ case    9:  		/* lwz R11, <#[R4 + 108]> */
		/* 82143CC4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000006C) );
		/* 82143CC4h case    9:*/		return 0x82143CC8;
		  /* 82143CC8h */ case   10:  		/* li R28, 0 */
		/* 82143CC8h case   10:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82143CC8h case   10:*/		return 0x82143CCC;
		  /* 82143CCCh */ case   11:  		/* bc 4, CR6_EQ, 40 */
		/* 82143CCCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x82143CF4;  }
		/* 82143CCCh case   11:*/		return 0x82143CD0;
		  /* 82143CD0h */ case   12:  		/* cmpwi CR6, R11, -1 */
		/* 82143CD0h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82143CD0h case   12:*/		return 0x82143CD4;
		  /* 82143CD4h */ case   13:  		/* bc 4, CR6_EQ, 24 */
		/* 82143CD4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82143CEC;  }
		/* 82143CD4h case   13:*/		return 0x82143CD8;
		  /* 82143CD8h */ case   14:  		/* lwz R11, <#[R3 + 508]> */
		/* 82143CD8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000001FC) );
		/* 82143CD8h case   14:*/		return 0x82143CDC;
		  /* 82143CDCh */ case   15:  		/* stw R11, <#[R4 + 108]> */
		/* 82143CDCh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x0000006C) );
		/* 82143CDCh case   15:*/		return 0x82143CE0;
		  /* 82143CE0h */ case   16:  		/* lwz R11, <#[R3 + 508]> */
		/* 82143CE0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000001FC) );
		/* 82143CE0h case   16:*/		return 0x82143CE4;
		  /* 82143CE4h */ case   17:  		/* addi R11, R11, 1 */
		/* 82143CE4h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82143CE4h case   17:*/		return 0x82143CE8;
		  /* 82143CE8h */ case   18:  		/* stw R11, <#[R3 + 508]> */
		/* 82143CE8h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000001FC) );
		/* 82143CE8h case   18:*/		return 0x82143CEC;
	}
	return 0x82143CEC;
} // Block from 82143CA0h-82143CECh (19 instructions)

//////////////////////////////////////////////////////
// Block at 82143CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143CEC);
		  /* 82143CECh */ case    0:  		/* li R3, 0 */
		/* 82143CECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82143CECh case    0:*/		return 0x82143CF0;
		  /* 82143CF0h */ case    1:  		/* b 560 */
		/* 82143CF0h case    1:*/		return 0x82143F20;
		/* 82143CF0h case    1:*/		return 0x82143CF4;
	}
	return 0x82143CF4;
} // Block from 82143CECh-82143CF4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82143CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143CF4);
		  /* 82143CF4h */ case    0:  		/* cmpwi CR6, R11, -1 */
		/* 82143CF4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82143CF4h case    0:*/		return 0x82143CF8;
		  /* 82143CF8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 82143CF8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82143CEC;  }
		/* 82143CF8h case    1:*/		return 0x82143CFC;
		  /* 82143CFCh */ case    2:  		/* lwz R9, <#[R27 + 104]> */
		/* 82143CFCh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000068) );
		/* 82143CFCh case    2:*/		return 0x82143D00;
		  /* 82143D00h */ case    3:  		/* li R10, 32 */
		/* 82143D00h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x20);
		/* 82143D00h case    3:*/		return 0x82143D04;
		  /* 82143D04h */ case    4:  		/* addi R11, R1, 80 */
		/* 82143D04h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 82143D04h case    4:*/		return 0x82143D08;
		  /* 82143D08h */ case    5:  		/* lwz R9, <#[R9 + 24]> */
		/* 82143D08h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000018) );
		/* 82143D08h case    5:*/		return 0x82143D0C;
		  /* 82143D0Ch */ case    6:  		/* lbz R8, <#[R9]> */
		/* 82143D0Ch case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82143D0Ch case    6:*/		return 0x82143D10;
		  /* 82143D10h */ case    7:  		/* cmplwi CR0, R8, 0 */
		/* 82143D10h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 82143D10h case    7:*/		return 0x82143D14;
		  /* 82143D14h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 82143D14h case    8:*/		if ( regs.CR[0].eq ) { return 0x82143D2C;  }
		/* 82143D14h case    8:*/		return 0x82143D18;
		  /* 82143D18h */ case    9:  		/* stb R8, <#[R11]> */
		/* 82143D18h case    9:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82143D18h case    9:*/		return 0x82143D1C;
		  /* 82143D1Ch */ case   10:  		/* addic. R10, R10, -1 */
		/* 82143D1Ch case   10:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82143D1Ch case   10:*/		return 0x82143D20;
		  /* 82143D20h */ case   11:  		/* addi R11, R11, 1 */
		/* 82143D20h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82143D20h case   11:*/		return 0x82143D24;
		  /* 82143D24h */ case   12:  		/* addi R9, R9, 1 */
		/* 82143D24h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82143D24h case   12:*/		return 0x82143D28;
		  /* 82143D28h */ case   13:  		/* bc 4, CR0_EQ, -28 */
		/* 82143D28h case   13:*/		if ( !regs.CR[0].eq ) { return 0x82143D0C;  }
		/* 82143D28h case   13:*/		return 0x82143D2C;
	}
	return 0x82143D2C;
} // Block from 82143CF4h-82143D2Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 82143D2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143D2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143D2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143D2C);
		  /* 82143D2Ch */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 82143D2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82143D2Ch case    0:*/		return 0x82143D30;
		  /* 82143D30h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82143D30h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82143D38;  }
		/* 82143D30h case    1:*/		return 0x82143D34;
		  /* 82143D34h */ case    2:  		/* addi R11, R11, -1 */
		/* 82143D34h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82143D34h case    2:*/		return 0x82143D38;
	}
	return 0x82143D38;
} // Block from 82143D2Ch-82143D38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82143D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143D38);
		  /* 82143D38h */ case    0:  		/* stb R28, <#[R11]> */
		/* 82143D38h case    0:*/		cpu::mem::store8( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82143D38h case    0:*/		return 0x82143D3C;
		  /* 82143D3Ch */ case    1:  		/* addi R31, R1, 80 */
		/* 82143D3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x50);
		/* 82143D3Ch case    1:*/		return 0x82143D40;
		  /* 82143D40h */ case    2:  		/* lbz R11, <#[R1 + 80]> */
		/* 82143D40h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82143D40h case    2:*/		return 0x82143D44;
		  /* 82143D44h */ case    3:  		/* b 28 */
		/* 82143D44h case    3:*/		return 0x82143D60;
		/* 82143D44h case    3:*/		return 0x82143D48;
		  /* 82143D48h */ case    4:  		/* lbz R11, <#[R31]> */
		/* 82143D48h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82143D48h case    4:*/		return 0x82143D4C;
		  /* 82143D4Ch */ case    5:  		/* extsb R3, R11 */
		/* 82143D4Ch case    5:*/		cpu::op::extsb<0>(regs,&regs.R3,regs.R11);
		/* 82143D4Ch case    5:*/		return 0x82143D50;
		  /* 82143D50h */ case    6:  		/* bl -697952 */
		/* 82143D50h case    6:*/		regs.LR = 0x82143D54; return 0x820996F0;
		/* 82143D50h case    6:*/		return 0x82143D54;
		  /* 82143D54h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82143D54h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82143D54h case    7:*/		return 0x82143D58;
		  /* 82143D58h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 82143D58h case    8:*/		if ( regs.CR[0].eq ) { return 0x82143D68;  }
		/* 82143D58h case    8:*/		return 0x82143D5C;
		  /* 82143D5Ch */ case    9:  		/* lbzu R11, <#[R31 + 1]> */
		/* 82143D5Ch case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000001) );
		regs.R31 = (uint32)(regs.R31 + 0x00000001);
		/* 82143D5Ch case    9:*/		return 0x82143D60;
	}
	return 0x82143D60;
} // Block from 82143D38h-82143D60h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82143D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143D60);
		  /* 82143D60h */ case    0:  		/* cmplwi CR0, R11, 0 */
		/* 82143D60h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82143D60h case    0:*/		return 0x82143D64;
		  /* 82143D64h */ case    1:  		/* bc 4, CR0_EQ, -28 */
		/* 82143D64h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82143D48;  }
		/* 82143D64h case    1:*/		return 0x82143D68;
	}
	return 0x82143D68;
} // Block from 82143D60h-82143D68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82143D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143D68);
		  /* 82143D68h */ case    0:  		/* lbz R11, <#[R31]> */
		/* 82143D68h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82143D68h case    0:*/		return 0x82143D6C;
		  /* 82143D6Ch */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 82143D6Ch case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82143D6Ch case    1:*/		return 0x82143D70;
		  /* 82143D70h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 82143D70h case    2:*/		if ( regs.CR[0].eq ) { return 0x82143D84;  }
		/* 82143D70h case    2:*/		return 0x82143D74;
		  /* 82143D74h */ case    3:  		/* mr R3, R31 */
		/* 82143D74h case    3:*/		regs.R3 = regs.R31;
		/* 82143D74h case    3:*/		return 0x82143D78;
		  /* 82143D78h */ case    4:  		/* bl -725520 */
		/* 82143D78h case    4:*/		regs.LR = 0x82143D7C; return 0x82092B68;
		/* 82143D78h case    4:*/		return 0x82143D7C;
		  /* 82143D7Ch */ case    5:  		/* mr R30, R3 */
		/* 82143D7Ch case    5:*/		regs.R30 = regs.R3;
		/* 82143D7Ch case    5:*/		return 0x82143D80;
		  /* 82143D80h */ case    6:  		/* b 8 */
		/* 82143D80h case    6:*/		return 0x82143D88;
		/* 82143D80h case    6:*/		return 0x82143D84;
	}
	return 0x82143D84;
} // Block from 82143D68h-82143D84h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82143D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143D84);
		  /* 82143D84h */ case    0:  		/* mr R30, R28 */
		/* 82143D84h case    0:*/		regs.R30 = regs.R28;
		/* 82143D84h case    0:*/		return 0x82143D88;
	}
	return 0x82143D88;
} // Block from 82143D84h-82143D88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82143D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143D88);
		  /* 82143D88h */ case    0:  		/* lbz R11, <#[R31]> */
		/* 82143D88h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82143D88h case    0:*/		return 0x82143D8C;
		  /* 82143D8Ch */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 82143D8Ch case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82143D8Ch case    1:*/		return 0x82143D90;
		  /* 82143D90h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82143D90h case    2:*/		if ( regs.CR[0].eq ) { return 0x82143D9C;  }
		/* 82143D90h case    2:*/		return 0x82143D94;
		  /* 82143D94h */ case    3:  		/* stb R28, <#[R31]> */
		/* 82143D94h case    3:*/		cpu::mem::store8( regs, regs.R28, (uint32)(regs.R31 + 0x00000000) );
		/* 82143D94h case    3:*/		return 0x82143D98;
		  /* 82143D98h */ case    4:  		/* addi R31, R31, 1 */
		/* 82143D98h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82143D98h case    4:*/		return 0x82143D9C;
	}
	return 0x82143D9C;
} // Block from 82143D88h-82143D9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82143D9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143D9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143D9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143D9C);
		  /* 82143D9Ch */ case    0:  		/* lbz R11, <#[R31]> */
		/* 82143D9Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82143D9Ch case    0:*/		return 0x82143DA0;
		  /* 82143DA0h */ case    1:  		/* b 20 */
		/* 82143DA0h case    1:*/		return 0x82143DB4;
		/* 82143DA0h case    1:*/		return 0x82143DA4;
		  /* 82143DA4h */ case    2:  		/* bl -698004 */
		/* 82143DA4h case    2:*/		regs.LR = 0x82143DA8; return 0x82099710;
		/* 82143DA4h case    2:*/		return 0x82143DA8;
		  /* 82143DA8h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82143DA8h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82143DA8h case    3:*/		return 0x82143DAC;
		  /* 82143DACh */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 82143DACh case    4:*/		if ( regs.CR[0].eq ) { return 0x82143DBC;  }
		/* 82143DACh case    4:*/		return 0x82143DB0;
		  /* 82143DB0h */ case    5:  		/* lbzu R11, <#[R31 + 1]> */
		/* 82143DB0h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000001) );
		regs.R31 = (uint32)(regs.R31 + 0x00000001);
		/* 82143DB0h case    5:*/		return 0x82143DB4;
	}
	return 0x82143DB4;
} // Block from 82143D9Ch-82143DB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82143DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143DB4);
		  /* 82143DB4h */ case    0:  		/* extsb. R3, R11 */
		/* 82143DB4h case    0:*/		cpu::op::extsb<1>(regs,&regs.R3,regs.R11);
		/* 82143DB4h case    0:*/		return 0x82143DB8;
		  /* 82143DB8h */ case    1:  		/* bc 4, CR0_EQ, -20 */
		/* 82143DB8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82143DA4;  }
		/* 82143DB8h case    1:*/		return 0x82143DBC;
	}
	return 0x82143DBC;
} // Block from 82143DB4h-82143DBCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82143DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143DBC);
		  /* 82143DBCh */ case    0:  		/* lbz R11, <#[R31]> */
		/* 82143DBCh case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82143DBCh case    0:*/		return 0x82143DC0;
		  /* 82143DC0h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 82143DC0h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82143DC0h case    1:*/		return 0x82143DC4;
		  /* 82143DC4h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82143DC4h case    2:*/		if ( regs.CR[0].eq ) { return 0x82143DD0;  }
		/* 82143DC4h case    2:*/		return 0x82143DC8;
		  /* 82143DC8h */ case    3:  		/* li R30, -1 */
		/* 82143DC8h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0xFFFFFFFF);
		/* 82143DC8h case    3:*/		return 0x82143DCC;
		  /* 82143DCCh */ case    4:  		/* b 16 */
		/* 82143DCCh case    4:*/		return 0x82143DDC;
		/* 82143DCCh case    4:*/		return 0x82143DD0;
	}
	return 0x82143DD0;
} // Block from 82143DBCh-82143DD0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82143DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143DD0);
		  /* 82143DD0h */ case    0:  		/* lwz R11, <#[R27 + 112]> */
		/* 82143DD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000070) );
		/* 82143DD0h case    0:*/		return 0x82143DD4;
		  /* 82143DD4h */ case    1:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 82143DD4h case    1:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 82143DD4h case    1:*/		return 0x82143DD8;
		  /* 82143DD8h */ case    2:  		/* add R30, R11, R30 */
		/* 82143DD8h case    2:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 82143DD8h case    2:*/		return 0x82143DDC;
	}
	return 0x82143DDC;
} // Block from 82143DD0h-82143DDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82143DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143DDC);
		  /* 82143DDCh */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 82143DDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82143DDCh case    0:*/		return 0x82143DE0;
		  /* 82143DE0h */ case    1:  		/* li R29, 1 */
		/* 82143DE0h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82143DE0h case    1:*/		return 0x82143DE4;
		  /* 82143DE4h */ case    2:  		/* lwz R10, <#[R26 + 16]> */
		/* 82143DE4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000010) );
		/* 82143DE4h case    2:*/		return 0x82143DE8;
		  /* 82143DE8h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82143DE8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82143DE8h case    3:*/		return 0x82143DEC;
		  /* 82143DECh */ case    4:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82143DECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82143DECh case    4:*/		return 0x82143DF0;
		  /* 82143DF0h */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 82143DF0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82143DF0h case    5:*/		return 0x82143DF4;
		  /* 82143DF4h */ case    6:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 82143DF4h case    6:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 82143DF4h case    6:*/		return 0x82143DF8;
		  /* 82143DF8h */ case    7:  		/* bc 12, CR0_EQ, 124 */
		/* 82143DF8h case    7:*/		if ( regs.CR[0].eq ) { return 0x82143E74;  }
		/* 82143DF8h case    7:*/		return 0x82143DFC;
		  /* 82143DFCh */ case    8:  		/* rlwinm. R10, R11, 0, 22, 22 */
		/* 82143DFCh case    8:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R10,regs.R11);
		/* 82143DFCh case    8:*/		return 0x82143E00;
		  /* 82143E00h */ case    9:  		/* bc 4, CR0_EQ, 116 */
		/* 82143E00h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82143E74;  }
		/* 82143E00h case    9:*/		return 0x82143E04;
		  /* 82143E04h */ case   10:  		/* lis R11, -32255 */
		/* 82143E04h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82143E04h case   10:*/		return 0x82143E08;
		  /* 82143E08h */ case   11:  		/* addi R3, R1, 80 */
		/* 82143E08h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82143E08h case   11:*/		return 0x82143E0C;
		  /* 82143E0Ch */ case   12:  		/* addi R4, R11, 4972 */
		/* 82143E0Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x136C);
		/* 82143E0Ch case   12:*/		return 0x82143E10;
		  /* 82143E10h */ case   13:  		/* bl -723424 */
		/* 82143E10h case   13:*/		regs.LR = 0x82143E14; return 0x82093430;
		/* 82143E10h case   13:*/		return 0x82143E14;
		  /* 82143E14h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 82143E14h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82143E14h case   14:*/		return 0x82143E18;
		  /* 82143E18h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 82143E18h case   15:*/		if ( !regs.CR[0].eq ) { return 0x82143E24;  }
		/* 82143E18h case   15:*/		return 0x82143E1C;
		  /* 82143E1Ch */ case   16:  		/* li R28, 2 */
		/* 82143E1Ch case   16:*/		cpu::op::li<0>(regs,&regs.R28,0x2);
		/* 82143E1Ch case   16:*/		return 0x82143E20;
		  /* 82143E20h */ case   17:  		/* b 32 */
		/* 82143E20h case   17:*/		return 0x82143E40;
		/* 82143E20h case   17:*/		return 0x82143E24;
	}
	return 0x82143E24;
} // Block from 82143DDCh-82143E24h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82143E24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143E24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143E24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143E24);
		  /* 82143E24h */ case    0:  		/* lis R11, -32255 */
		/* 82143E24h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82143E24h case    0:*/		return 0x82143E28;
		  /* 82143E28h */ case    1:  		/* addi R3, R1, 80 */
		/* 82143E28h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82143E28h case    1:*/		return 0x82143E2C;
		  /* 82143E2Ch */ case    2:  		/* addi R4, R11, 5028 */
		/* 82143E2Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x13A4);
		/* 82143E2Ch case    2:*/		return 0x82143E30;
		  /* 82143E30h */ case    3:  		/* bl -723456 */
		/* 82143E30h case    3:*/		regs.LR = 0x82143E34; return 0x82093430;
		/* 82143E30h case    3:*/		return 0x82143E34;
		  /* 82143E34h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82143E34h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82143E34h case    4:*/		return 0x82143E38;
		  /* 82143E38h */ case    5:  		/* bc 4, CR0_EQ, 24 */
		/* 82143E38h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82143E50;  }
		/* 82143E38h case    5:*/		return 0x82143E3C;
		  /* 82143E3Ch */ case    6:  		/* li R28, 3 */
		/* 82143E3Ch case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x3);
		/* 82143E3Ch case    6:*/		return 0x82143E40;
	}
	return 0x82143E40;
} // Block from 82143E24h-82143E40h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82143E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143E40);
		  /* 82143E40h */ case    0:  		/* subfc R11, R29, R30 */
		/* 82143E40h case    0:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R29,regs.R30);
		/* 82143E40h case    0:*/		return 0x82143E44;
		  /* 82143E44h */ case    1:  		/* li R10, -1 */
		/* 82143E44h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82143E44h case    1:*/		return 0x82143E48;
		  /* 82143E48h */ case    2:  		/* subfze R31, R10 */
		/* 82143E48h case    2:*/		cpu::op::subfze<0>(regs,&regs.R31,regs.R10);
		/* 82143E48h case    2:*/		return 0x82143E4C;
		  /* 82143E4Ch */ case    3:  		/* b 8 */
		/* 82143E4Ch case    3:*/		return 0x82143E54;
		/* 82143E4Ch case    3:*/		return 0x82143E50;
	}
	return 0x82143E50;
} // Block from 82143E40h-82143E50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82143E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143E50);
		  /* 82143E50h */ case    0:  		/* mr R31, R29 */
		/* 82143E50h case    0:*/		regs.R31 = regs.R29;
		/* 82143E50h case    0:*/		return 0x82143E54;
	}
	return 0x82143E54;
} // Block from 82143E50h-82143E54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82143E54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143E54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143E54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143E54);
		  /* 82143E54h */ case    0:  		/* cmpwi CR6, R31, 0 */
		/* 82143E54h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82143E54h case    0:*/		return 0x82143E58;
		  /* 82143E58h */ case    1:  		/* bc 12, CR6_EQ, 136 */
		/* 82143E58h case    1:*/		if ( regs.CR[6].eq ) { return 0x82143EE0;  }
		/* 82143E58h case    1:*/		return 0x82143E5C;
		  /* 82143E5Ch */ case    2:  		/* lwz R11, <#[R27 + 16]> */
		/* 82143E5Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82143E5Ch case    2:*/		return 0x82143E60;
		  /* 82143E60h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82143E60h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82143E60h case    3:*/		return 0x82143E64;
		  /* 82143E64h */ case    4:  		/* bc 4, CR6_EQ, 124 */
		/* 82143E64h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82143EE0;  }
		/* 82143E64h case    4:*/		return 0x82143E68;
		  /* 82143E68h */ case    5:  		/* lis R11, -32253 */
		/* 82143E68h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82143E68h case    5:*/		return 0x82143E6C;
		  /* 82143E6Ch */ case    6:  		/* addi R6, R11, 23816 */
		/* 82143E6Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5D08);
		/* 82143E6Ch case    6:*/		return 0x82143E70;
		  /* 82143E70h */ case    7:  		/* b 88 */
		/* 82143E70h case    7:*/		return 0x82143EC8;
		/* 82143E70h case    7:*/		return 0x82143E74;
	}
	return 0x82143E74;
} // Block from 82143E54h-82143E74h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82143E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143E74);
		  /* 82143E74h */ case    0:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82143E74h case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82143E74h case    0:*/		return 0x82143E78;
		  /* 82143E78h */ case    1:  		/* bc 12, CR0_EQ, 112 */
		/* 82143E78h case    1:*/		if ( regs.CR[0].eq ) { return 0x82143EE8;  }
		/* 82143E78h case    1:*/		return 0x82143E7C;
		  /* 82143E7Ch */ case    2:  		/* lis R11, -32255 */
		/* 82143E7Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82143E7Ch case    2:*/		return 0x82143E80;
		  /* 82143E80h */ case    3:  		/* addi R3, R1, 80 */
		/* 82143E80h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82143E80h case    3:*/		return 0x82143E84;
		  /* 82143E84h */ case    4:  		/* addi R4, R11, 5080 */
		/* 82143E84h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x13D8);
		/* 82143E84h case    4:*/		return 0x82143E88;
		  /* 82143E88h */ case    5:  		/* bl -723544 */
		/* 82143E88h case    5:*/		regs.LR = 0x82143E8C; return 0x82093430;
		/* 82143E88h case    5:*/		return 0x82143E8C;
		  /* 82143E8Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82143E8Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82143E8Ch case    6:*/		return 0x82143E90;
		  /* 82143E90h */ case    7:  		/* bc 4, CR0_EQ, 24 */
		/* 82143E90h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82143EA8;  }
		/* 82143E90h case    7:*/		return 0x82143E94;
		  /* 82143E94h */ case    8:  		/* li R10, -1 */
		/* 82143E94h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82143E94h case    8:*/		return 0x82143E98;
		  /* 82143E98h */ case    9:  		/* subfc R11, R29, R30 */
		/* 82143E98h case    9:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R29,regs.R30);
		/* 82143E98h case    9:*/		return 0x82143E9C;
		  /* 82143E9Ch */ case   10:  		/* mr R28, R29 */
		/* 82143E9Ch case   10:*/		regs.R28 = regs.R29;
		/* 82143E9Ch case   10:*/		return 0x82143EA0;
		  /* 82143EA0h */ case   11:  		/* subfze R31, R10 */
		/* 82143EA0h case   11:*/		cpu::op::subfze<0>(regs,&regs.R31,regs.R10);
		/* 82143EA0h case   11:*/		return 0x82143EA4;
		  /* 82143EA4h */ case   12:  		/* b 8 */
		/* 82143EA4h case   12:*/		return 0x82143EAC;
		/* 82143EA4h case   12:*/		return 0x82143EA8;
	}
	return 0x82143EA8;
} // Block from 82143E74h-82143EA8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82143EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143EA8);
		  /* 82143EA8h */ case    0:  		/* mr R31, R29 */
		/* 82143EA8h case    0:*/		regs.R31 = regs.R29;
		/* 82143EA8h case    0:*/		return 0x82143EAC;
	}
	return 0x82143EAC;
} // Block from 82143EA8h-82143EACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82143EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143EAC);
		  /* 82143EACh */ case    0:  		/* cmpwi CR6, R31, 0 */
		/* 82143EACh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82143EACh case    0:*/		return 0x82143EB0;
		  /* 82143EB0h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 82143EB0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82143EE0;  }
		/* 82143EB0h case    1:*/		return 0x82143EB4;
		  /* 82143EB4h */ case    2:  		/* lwz R11, <#[R27 + 16]> */
		/* 82143EB4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82143EB4h case    2:*/		return 0x82143EB8;
		  /* 82143EB8h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82143EB8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82143EB8h case    3:*/		return 0x82143EBC;
		  /* 82143EBCh */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 82143EBCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x82143EE0;  }
		/* 82143EBCh case    4:*/		return 0x82143EC0;
		  /* 82143EC0h */ case    5:  		/* lis R11, -32253 */
		/* 82143EC0h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82143EC0h case    5:*/		return 0x82143EC4;
		  /* 82143EC4h */ case    6:  		/* addi R6, R11, 24864 */
		/* 82143EC4h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x6120);
		/* 82143EC4h case    6:*/		return 0x82143EC8;
	}
	return 0x82143EC8;
} // Block from 82143EACh-82143EC8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82143EC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143EC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143EC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143EC8);
		  /* 82143EC8h */ case    0:  		/* mr R8, R30 */
		/* 82143EC8h case    0:*/		regs.R8 = regs.R30;
		/* 82143EC8h case    0:*/		return 0x82143ECC;
		  /* 82143ECCh */ case    1:  		/* lwz R4, <#[R27 + 104]> */
		/* 82143ECCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000068) );
		/* 82143ECCh case    1:*/		return 0x82143ED0;
		  /* 82143ED0h */ case    2:  		/* addi R7, R1, 80 */
		/* 82143ED0h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82143ED0h case    2:*/		return 0x82143ED4;
		  /* 82143ED4h */ case    3:  		/* li R5, 4502 */
		/* 82143ED4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x1196);
		/* 82143ED4h case    3:*/		return 0x82143ED8;
		  /* 82143ED8h */ case    4:  		/* mr R3, R26 */
		/* 82143ED8h case    4:*/		regs.R3 = regs.R26;
		/* 82143ED8h case    4:*/		return 0x82143EDC;
		  /* 82143EDCh */ case    5:  		/* bl -219052 */
		/* 82143EDCh case    5:*/		regs.LR = 0x82143EE0; return 0x8210E730;
		/* 82143EDCh case    5:*/		return 0x82143EE0;
	}
	return 0x82143EE0;
} // Block from 82143EC8h-82143EE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82143EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143EE0);
		  /* 82143EE0h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82143EE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82143EE0h case    0:*/		return 0x82143EE4;
		  /* 82143EE4h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82143EE4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82143EEC;  }
		/* 82143EE4h case    1:*/		return 0x82143EE8;
	}
	return 0x82143EE8;
} // Block from 82143EE0h-82143EE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82143EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143EE8);
		  /* 82143EE8h */ case    0:  		/* mr R31, R29 */
		/* 82143EE8h case    0:*/		regs.R31 = regs.R29;
		/* 82143EE8h case    0:*/		return 0x82143EEC;
	}
	return 0x82143EEC;
} // Block from 82143EE8h-82143EECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82143EECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143EEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143EEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143EEC);
		  /* 82143EECh */ case    0:  		/* cmplwi CR6, R30, 65535 */
		/* 82143EECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000FFFF);
		/* 82143EECh case    0:*/		return 0x82143EF0;
		  /* 82143EF0h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 82143EF0h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82143EF8;  }
		/* 82143EF0h case    1:*/		return 0x82143EF4;
		  /* 82143EF4h */ case    2:  		/* mr R31, R29 */
		/* 82143EF4h case    2:*/		regs.R31 = regs.R29;
		/* 82143EF4h case    2:*/		return 0x82143EF8;
	}
	return 0x82143EF8;
} // Block from 82143EECh-82143EF8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82143EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143EF8);
		  /* 82143EF8h */ case    0:  		/* lis R11, -1 */
		/* 82143EF8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82143EF8h case    0:*/		return 0x82143EFC;
		  /* 82143EFCh */ case    1:  		/* subfic R10, R31, 0 */
		/* 82143EFCh case    1:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R31,0x0);
		/* 82143EFCh case    1:*/		return 0x82143F00;
		  /* 82143F00h */ case    2:  		/* rlwinm R9, R28, 0, 24, 31 */
		/* 82143F00h case    2:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R9,regs.R28);
		/* 82143F00h case    2:*/		return 0x82143F04;
		  /* 82143F04h */ case    3:  		/* rlwimi R11, R30, 8, 16, 23 */
		/* 82143F04h case    3:*/		cpu::op::rlwimi<0,8,16,23>(regs,&regs.R11,regs.R30);
		/* 82143F04h case    3:*/		return 0x82143F08;
		  /* 82143F08h */ case    4:  		/* lis R8, -32768 */
		/* 82143F08h case    4:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8000);
		/* 82143F08h case    4:*/		return 0x82143F0C;
		  /* 82143F0Ch */ case    5:  		/* subfe R10, R10, R10 */
		/* 82143F0Ch case    5:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82143F0Ch case    5:*/		return 0x82143F10;
		  /* 82143F10h */ case    6:  		/* ori R8, R8, 16389 */
		/* 82143F10h case    6:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x4005);
		/* 82143F10h case    6:*/		return 0x82143F14;
		  /* 82143F14h */ case    7:  		/* or R11, R11, R9 */
		/* 82143F14h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82143F14h case    7:*/		return 0x82143F18;
		  /* 82143F18h */ case    8:  		/* and R3, R10, R8 */
		/* 82143F18h case    8:*/		cpu::op::and<0>(regs,&regs.R3,regs.R10,regs.R8);
		/* 82143F18h case    8:*/		return 0x82143F1C;
		  /* 82143F1Ch */ case    9:  		/* stw R11, <#[R27 + 108]> */
		/* 82143F1Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000006C) );
		/* 82143F1Ch case    9:*/		return 0x82143F20;
	}
	return 0x82143F20;
} // Block from 82143EF8h-82143F20h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82143F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143F20);
		  /* 82143F20h */ case    0:  		/* addi R1, R1, 176 */
		/* 82143F20h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82143F20h case    0:*/		return 0x82143F24;
		  /* 82143F24h */ case    1:  		/* b -732292 */
		/* 82143F24h case    1:*/		return 0x820912A0;
		/* 82143F24h case    1:*/		return 0x82143F28;
	}
	return 0x82143F28;
} // Block from 82143F20h-82143F28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82143F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143F28);
		  /* 82143F28h */ case    0:  		/* mfspr R12, LR */
		/* 82143F28h case    0:*/		regs.R12 = regs.LR;
		/* 82143F28h case    0:*/		return 0x82143F2C;
		  /* 82143F2Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82143F2Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82143F2Ch case    1:*/		return 0x82143F30;
		  /* 82143F30h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82143F30h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82143F30h case    2:*/		return 0x82143F34;
		  /* 82143F34h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82143F34h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82143F34h case    3:*/		return 0x82143F38;
		  /* 82143F38h */ case    4:  		/* li R4, 27 */
		/* 82143F38h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 82143F38h case    4:*/		return 0x82143F3C;
		  /* 82143F3Ch */ case    5:  		/* mr R31, R3 */
		/* 82143F3Ch case    5:*/		regs.R31 = regs.R3;
		/* 82143F3Ch case    5:*/		return 0x82143F40;
		  /* 82143F40h */ case    6:  		/* bl -502968 */
		/* 82143F40h case    6:*/		regs.LR = 0x82143F44; return 0x820C9288;
		/* 82143F40h case    6:*/		return 0x82143F44;
		  /* 82143F44h */ case    7:  		/* lis R10, -32253 */
		/* 82143F44h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82143F44h case    7:*/		return 0x82143F48;
		  /* 82143F48h */ case    8:  		/* li R11, 0 */
		/* 82143F48h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82143F48h case    8:*/		return 0x82143F4C;
		  /* 82143F4Ch */ case    9:  		/* addi R10, R10, 24908 */
		/* 82143F4Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x614C);
		/* 82143F4Ch case    9:*/		return 0x82143F50;
		  /* 82143F50h */ case   10:  		/* stw R11, <#[R31 + 56]> */
		/* 82143F50h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82143F50h case   10:*/		return 0x82143F54;
		  /* 82143F54h */ case   11:  		/* mr R3, R31 */
		/* 82143F54h case   11:*/		regs.R3 = regs.R31;
		/* 82143F54h case   11:*/		return 0x82143F58;
		  /* 82143F58h */ case   12:  		/* stw R10, <#[R31]> */
		/* 82143F58h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82143F58h case   12:*/		return 0x82143F5C;
		  /* 82143F5Ch */ case   13:  		/* stw R11, <#[R31 + 60]> */
		/* 82143F5Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 82143F5Ch case   13:*/		return 0x82143F60;
		  /* 82143F60h */ case   14:  		/* stw R11, <#[R31 + 64]> */
		/* 82143F60h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000040) );
		/* 82143F60h case   14:*/		return 0x82143F64;
		  /* 82143F64h */ case   15:  		/* stw R11, <#[R31 + 68]> */
		/* 82143F64h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 82143F64h case   15:*/		return 0x82143F68;
		  /* 82143F68h */ case   16:  		/* stw R11, <#[R31 + 72]> */
		/* 82143F68h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 82143F68h case   16:*/		return 0x82143F6C;
		  /* 82143F6Ch */ case   17:  		/* stw R11, <#[R31 + 76]> */
		/* 82143F6Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 82143F6Ch case   17:*/		return 0x82143F70;
		  /* 82143F70h */ case   18:  		/* stw R11, <#[R31 + 80]> */
		/* 82143F70h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 82143F70h case   18:*/		return 0x82143F74;
		  /* 82143F74h */ case   19:  		/* stw R11, <#[R31 + 84]> */
		/* 82143F74h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 82143F74h case   19:*/		return 0x82143F78;
		  /* 82143F78h */ case   20:  		/* stw R11, <#[R31 + 92]> */
		/* 82143F78h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82143F78h case   20:*/		return 0x82143F7C;
		  /* 82143F7Ch */ case   21:  		/* stw R11, <#[R31 + 96]> */
		/* 82143F7Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 82143F7Ch case   21:*/		return 0x82143F80;
		  /* 82143F80h */ case   22:  		/* stw R11, <#[R31 + 100]> */
		/* 82143F80h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000064) );
		/* 82143F80h case   22:*/		return 0x82143F84;
		  /* 82143F84h */ case   23:  		/* stw R11, <#[R31 + 124]> */
		/* 82143F84h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 82143F84h case   23:*/		return 0x82143F88;
		  /* 82143F88h */ case   24:  		/* stw R11, <#[R31 + 120]> */
		/* 82143F88h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82143F88h case   24:*/		return 0x82143F8C;
		  /* 82143F8Ch */ case   25:  		/* stw R11, <#[R31 + 88]> */
		/* 82143F8Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 82143F8Ch case   25:*/		return 0x82143F90;
		  /* 82143F90h */ case   26:  		/* std R11, <#[R31 + 16]> */
		/* 82143F90h case   26:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82143F90h case   26:*/		return 0x82143F94;
		  /* 82143F94h */ case   27:  		/* std R11, <#[R31 + 24]> */
		/* 82143F94h case   27:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82143F94h case   27:*/		return 0x82143F98;
		  /* 82143F98h */ case   28:  		/* std R11, <#[R31 + 32]> */
		/* 82143F98h case   28:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82143F98h case   28:*/		return 0x82143F9C;
		  /* 82143F9Ch */ case   29:  		/* std R11, <#[R31 + 40]> */
		/* 82143F9Ch case   29:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82143F9Ch case   29:*/		return 0x82143FA0;
		  /* 82143FA0h */ case   30:  		/* std R11, <#[R31 + 48]> */
		/* 82143FA0h case   30:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82143FA0h case   30:*/		return 0x82143FA4;
		  /* 82143FA4h */ case   31:  		/* std R11, <#[R31 + 104]> */
		/* 82143FA4h case   31:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 82143FA4h case   31:*/		return 0x82143FA8;
		  /* 82143FA8h */ case   32:  		/* std R11, <#[R31 + 112]> */
		/* 82143FA8h case   32:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82143FA8h case   32:*/		return 0x82143FAC;
		  /* 82143FACh */ case   33:  		/* addi R1, R1, 96 */
		/* 82143FACh case   33:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82143FACh case   33:*/		return 0x82143FB0;
		  /* 82143FB0h */ case   34:  		/* lwz R12, <#[R1 - 8]> */
		/* 82143FB0h case   34:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82143FB0h case   34:*/		return 0x82143FB4;
		  /* 82143FB4h */ case   35:  		/* mtspr LR, R12 */
		/* 82143FB4h case   35:*/		regs.LR = regs.R12;
		/* 82143FB4h case   35:*/		return 0x82143FB8;
		  /* 82143FB8h */ case   36:  		/* ld R31, <#[R1 - 16]> */
		/* 82143FB8h case   36:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82143FB8h case   36:*/		return 0x82143FBC;
		  /* 82143FBCh */ case   37:  		/* bclr 20, CR0_LT */
		/* 82143FBCh case   37:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82143FBCh case   37:*/		return 0x82143FC0;
	}
	return 0x82143FC0;
} // Block from 82143F28h-82143FC0h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82143FC0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82143FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82143FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82143FC0);
		  /* 82143FC0h */ case    0:  		/* mfspr R12, LR */
		/* 82143FC0h case    0:*/		regs.R12 = regs.LR;
		/* 82143FC0h case    0:*/		return 0x82143FC4;
		  /* 82143FC4h */ case    1:  		/* bl -732536 */
		/* 82143FC4h case    1:*/		regs.LR = 0x82143FC8; return 0x8209124C;
		/* 82143FC4h case    1:*/		return 0x82143FC8;
		  /* 82143FC8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82143FC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82143FC8h case    2:*/		return 0x82143FCC;
		  /* 82143FCCh */ case    3:  		/* mr R30, R4 */
		/* 82143FCCh case    3:*/		regs.R30 = regs.R4;
		/* 82143FCCh case    3:*/		return 0x82143FD0;
		  /* 82143FD0h */ case    4:  		/* li R4, 27 */
		/* 82143FD0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 82143FD0h case    4:*/		return 0x82143FD4;
		  /* 82143FD4h */ case    5:  		/* mr R31, R3 */
		/* 82143FD4h case    5:*/		regs.R31 = regs.R3;
		/* 82143FD4h case    5:*/		return 0x82143FD8;
		  /* 82143FD8h */ case    6:  		/* mr R29, R5 */
		/* 82143FD8h case    6:*/		regs.R29 = regs.R5;
		/* 82143FD8h case    6:*/		return 0x82143FDC;
		  /* 82143FDCh */ case    7:  		/* mr R28, R6 */
		/* 82143FDCh case    7:*/		regs.R28 = regs.R6;
		/* 82143FDCh case    7:*/		return 0x82143FE0;
		  /* 82143FE0h */ case    8:  		/* mr R27, R7 */
		/* 82143FE0h case    8:*/		regs.R27 = regs.R7;
		/* 82143FE0h case    8:*/		return 0x82143FE4;
		  /* 82143FE4h */ case    9:  		/* mr R26, R8 */
		/* 82143FE4h case    9:*/		regs.R26 = regs.R8;
		/* 82143FE4h case    9:*/		return 0x82143FE8;
		  /* 82143FE8h */ case   10:  		/* mr R25, R9 */
		/* 82143FE8h case   10:*/		regs.R25 = regs.R9;
		/* 82143FE8h case   10:*/		return 0x82143FEC;
		  /* 82143FECh */ case   11:  		/* bl -503140 */
		/* 82143FECh case   11:*/		regs.LR = 0x82143FF0; return 0x820C9288;
		/* 82143FECh case   11:*/		return 0x82143FF0;
		  /* 82143FF0h */ case   12:  		/* lis R10, -32253 */
		/* 82143FF0h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82143FF0h case   12:*/		return 0x82143FF4;
		  /* 82143FF4h */ case   13:  		/* li R11, 5 */
		/* 82143FF4h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 82143FF4h case   13:*/		return 0x82143FF8;
		  /* 82143FF8h */ case   14:  		/* addi R10, R10, 24908 */
		/* 82143FF8h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x614C);
		/* 82143FF8h case   14:*/		return 0x82143FFC;
		  /* 82143FFCh */ case   15:  		/* addi R9, R31, 8 */
		/* 82143FFCh case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x8);
		/* 82143FFCh case   15:*/		return 0x82144000;
		  /* 82144000h */ case   16:  		/* stw R10, <#[R31]> */
		/* 82144000h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82144000h case   16:*/		return 0x82144004;
		  /* 82144004h */ case   17:  		/* addi R10, R30, -8 */
		/* 82144004h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFF8);
		/* 82144004h case   17:*/		return 0x82144008;
		  /* 82144008h */ case   18:  		/* mtspr CTR, R11 */
		/* 82144008h case   18:*/		regs.CTR = regs.R11;
		/* 82144008h case   18:*/		return 0x8214400C;
		  /* 8214400Ch */ case   19:  		/* ldu R11, <#[R10 + 8]> */
		/* 8214400Ch case   19:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 8214400Ch case   19:*/		return 0x82144010;
		  /* 82144010h */ case   20:  		/* stdu R11, <#[R9 + 8]> */
		/* 82144010h case   20:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 82144010h case   20:*/		return 0x82144014;
		  /* 82144014h */ case   21:  		/* bc 16, CR0_LT, -8 */
		/* 82144014h case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8214400C;  }
		/* 82144014h case   21:*/		return 0x82144018;
		  /* 82144018h */ case   22:  		/* li R11, 0 */
		/* 82144018h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82144018h case   22:*/		return 0x8214401C;
		  /* 8214401Ch */ case   23:  		/* stw R29, <#[R31 + 56]> */
		/* 8214401Ch case   23:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000038) );
		/* 8214401Ch case   23:*/		return 0x82144020;
		  /* 82144020h */ case   24:  		/* cmplwi CR6, R29, 3 */
		/* 82144020h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 82144020h case   24:*/		return 0x82144024;
		  /* 82144024h */ case   25:  		/* stw R11, <#[R31 + 60]> */
		/* 82144024h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 82144024h case   25:*/		return 0x82144028;
		  /* 82144028h */ case   26:  		/* mr R10, R11 */
		/* 82144028h case   26:*/		regs.R10 = regs.R11;
		/* 82144028h case   26:*/		return 0x8214402C;
		  /* 8214402Ch */ case   27:  		/* stw R11, <#[R31 + 64]> */
		/* 8214402Ch case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000040) );
		/* 8214402Ch case   27:*/		return 0x82144030;
		  /* 82144030h */ case   28:  		/* stw R11, <#[R31 + 68]> */
		/* 82144030h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 82144030h case   28:*/		return 0x82144034;
		  /* 82144034h */ case   29:  		/* stw R11, <#[R31 + 72]> */
		/* 82144034h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 82144034h case   29:*/		return 0x82144038;
		  /* 82144038h */ case   30:  		/* stw R11, <#[R31 + 76]> */
		/* 82144038h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 82144038h case   30:*/		return 0x8214403C;
		  /* 8214403Ch */ case   31:  		/* stw R11, <#[R31 + 80]> */
		/* 8214403Ch case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 8214403Ch case   31:*/		return 0x82144040;
		  /* 82144040h */ case   32:  		/* bc 4, CR6_EQ, 8 */
		/* 82144040h case   32:*/		if ( !regs.CR[6].eq ) { return 0x82144048;  }
		/* 82144040h case   32:*/		return 0x82144044;
		  /* 82144044h */ case   33:  		/* li R10, 1 */
		/* 82144044h case   33:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82144044h case   33:*/		return 0x82144048;
	}
	return 0x82144048;
} // Block from 82143FC0h-82144048h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82144048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144048);
		  /* 82144048h */ case    0:  		/* addi R9, R10, 15 */
		/* 82144048h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xF);
		/* 82144048h case    0:*/		return 0x8214404C;
		  /* 8214404Ch */ case    1:  		/* addi R8, R10, 17 */
		/* 8214404Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x11);
		/* 8214404Ch case    1:*/		return 0x82144050;
		  /* 82144050h */ case    2:  		/* addi R10, R10, 19 */
		/* 82144050h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x13);
		/* 82144050h case    2:*/		return 0x82144054;
		  /* 82144054h */ case    3:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82144054h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82144054h case    3:*/		return 0x82144058;
		  /* 82144058h */ case    4:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82144058h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82144058h case    4:*/		return 0x8214405C;
		  /* 8214405Ch */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8214405Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8214405Ch case    5:*/		return 0x82144060;
		  /* 82144060h */ case    6:  		/* mr R3, R31 */
		/* 82144060h case    6:*/		regs.R3 = regs.R31;
		/* 82144060h case    6:*/		return 0x82144064;
		  /* 82144064h */ case    7:  		/* stwx R28, <#[R9 + R31]> */
		/* 82144064h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 82144064h case    7:*/		return 0x82144068;
		  /* 82144068h */ case    8:  		/* stwx R27, <#[R8 + R31]> */
		/* 82144068h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R8 + regs.R31 + 0x00000000) );
		/* 82144068h case    8:*/		return 0x8214406C;
		  /* 8214406Ch */ case    9:  		/* stwx R26, <#[R10 + R31]> */
		/* 8214406Ch case    9:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 8214406Ch case    9:*/		return 0x82144070;
		  /* 82144070h */ case   10:  		/* stw R25, <#[R31 + 84]> */
		/* 82144070h case   10:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000054) );
		/* 82144070h case   10:*/		return 0x82144074;
		  /* 82144074h */ case   11:  		/* stw R11, <#[R31 + 92]> */
		/* 82144074h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82144074h case   11:*/		return 0x82144078;
		  /* 82144078h */ case   12:  		/* stw R11, <#[R31 + 96]> */
		/* 82144078h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 82144078h case   12:*/		return 0x8214407C;
		  /* 8214407Ch */ case   13:  		/* stw R11, <#[R31 + 100]> */
		/* 8214407Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000064) );
		/* 8214407Ch case   13:*/		return 0x82144080;
		  /* 82144080h */ case   14:  		/* stw R11, <#[R31 + 124]> */
		/* 82144080h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 82144080h case   14:*/		return 0x82144084;
		  /* 82144084h */ case   15:  		/* std R11, <#[R31 + 104]> */
		/* 82144084h case   15:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 82144084h case   15:*/		return 0x82144088;
		  /* 82144088h */ case   16:  		/* std R11, <#[R31 + 112]> */
		/* 82144088h case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82144088h case   16:*/		return 0x8214408C;
		  /* 8214408Ch */ case   17:  		/* stw R11, <#[R31 + 120]> */
		/* 8214408Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 8214408Ch case   17:*/		return 0x82144090;
		  /* 82144090h */ case   18:  		/* stw R11, <#[R31 + 88]> */
		/* 82144090h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 82144090h case   18:*/		return 0x82144094;
		  /* 82144094h */ case   19:  		/* addi R1, R1, 144 */
		/* 82144094h case   19:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82144094h case   19:*/		return 0x82144098;
		  /* 82144098h */ case   20:  		/* b -732668 */
		/* 82144098h case   20:*/		return 0x8209129C;
		/* 82144098h case   20:*/		return 0x8214409C;
		  /* 8214409Ch */ case   21:  		/* nop */
		/* 8214409Ch case   21:*/		cpu::op::nop();
		/* 8214409Ch case   21:*/		return 0x821440A0;
	}
	return 0x821440A0;
} // Block from 82144048h-821440A0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821440A0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821440A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821440A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821440A0);
		  /* 821440A0h */ case    0:  		/* lwz R11, <#[R3 + 56]> */
		/* 821440A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 821440A0h case    0:*/		return 0x821440A4;
		  /* 821440A4h */ case    1:  		/* addi R11, R11, -3 */
		/* 821440A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFD);
		/* 821440A4h case    1:*/		return 0x821440A8;
		  /* 821440A8h */ case    2:  		/* cntlzw R11, R11 */
		/* 821440A8h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821440A8h case    2:*/		return 0x821440AC;
		  /* 821440ACh */ case    3:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821440ACh case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821440ACh case    3:*/		return 0x821440B0;
		  /* 821440B0h */ case    4:  		/* addi R11, R11, 23 */
		/* 821440B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x17);
		/* 821440B0h case    4:*/		return 0x821440B4;
		  /* 821440B4h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821440B4h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821440B4h case    5:*/		return 0x821440B8;
		  /* 821440B8h */ case    6:  		/* stwx R4, <#[R11 + R3]> */
		/* 821440B8h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821440B8h case    6:*/		return 0x821440BC;
		  /* 821440BCh */ case    7:  		/* bclr 20, CR0_LT */
		/* 821440BCh case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821440BCh case    7:*/		return 0x821440C0;
	}
	return 0x821440C0;
} // Block from 821440A0h-821440C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821440C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821440C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821440C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821440C0);
		  /* 821440C0h */ case    0:  		/* mfspr R12, LR */
		/* 821440C0h case    0:*/		regs.R12 = regs.LR;
		/* 821440C0h case    0:*/		return 0x821440C4;
		  /* 821440C4h */ case    1:  		/* bl -732784 */
		/* 821440C4h case    1:*/		regs.LR = 0x821440C8; return 0x82091254;
		/* 821440C4h case    1:*/		return 0x821440C8;
		  /* 821440C8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821440C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821440C8h case    2:*/		return 0x821440CC;
		  /* 821440CCh */ case    3:  		/* mr R31, R3 */
		/* 821440CCh case    3:*/		regs.R31 = regs.R3;
		/* 821440CCh case    3:*/		return 0x821440D0;
		  /* 821440D0h */ case    4:  		/* li R3, 128 */
		/* 821440D0h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x80);
		/* 821440D0h case    4:*/		return 0x821440D4;
		  /* 821440D4h */ case    5:  		/* bl -503468 */
		/* 821440D4h case    5:*/		regs.LR = 0x821440D8; return 0x820C9228;
		/* 821440D4h case    5:*/		return 0x821440D8;
		  /* 821440D8h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 821440D8h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821440D8h case    6:*/		return 0x821440DC;
		  /* 821440DCh */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 821440DCh case    7:*/		if ( regs.CR[0].eq ) { return 0x821440EC;  }
		/* 821440DCh case    7:*/		return 0x821440E0;
		  /* 821440E0h */ case    8:  		/* bl -440 */
		/* 821440E0h case    8:*/		regs.LR = 0x821440E4; return 0x82143F28;
		/* 821440E0h case    8:*/		return 0x821440E4;
		  /* 821440E4h */ case    9:  		/* mr R30, R3 */
		/* 821440E4h case    9:*/		regs.R30 = regs.R3;
		/* 821440E4h case    9:*/		return 0x821440E8;
		  /* 821440E8h */ case   10:  		/* b 8 */
		/* 821440E8h case   10:*/		return 0x821440F0;
		/* 821440E8h case   10:*/		return 0x821440EC;
	}
	return 0x821440EC;
} // Block from 821440C0h-821440ECh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821440ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821440EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821440EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821440EC);
		  /* 821440ECh */ case    0:  		/* li R30, 0 */
		/* 821440ECh case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821440ECh case    0:*/		return 0x821440F0;
	}
	return 0x821440F0;
} // Block from 821440ECh-821440F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821440F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821440F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821440F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821440F0);
		  /* 821440F0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821440F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821440F0h case    0:*/		return 0x821440F4;
		  /* 821440F4h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821440F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82144100;  }
		/* 821440F4h case    1:*/		return 0x821440F8;
		  /* 821440F8h */ case    2:  		/* li R3, 0 */
		/* 821440F8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821440F8h case    2:*/		return 0x821440FC;
		  /* 821440FCh */ case    3:  		/* b 304 */
		/* 821440FCh case    3:*/		return 0x8214422C;
		/* 821440FCh case    3:*/		return 0x82144100;
	}
	return 0x82144100;
} // Block from 821440F0h-82144100h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144100);
		  /* 82144100h */ case    0:  		/* li R11, 5 */
		/* 82144100h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 82144100h case    0:*/		return 0x82144104;
		  /* 82144104h */ case    1:  		/* addi R10, R31, 8 */
		/* 82144104h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x8);
		/* 82144104h case    1:*/		return 0x82144108;
		  /* 82144108h */ case    2:  		/* addi R9, R30, 8 */
		/* 82144108h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0x8);
		/* 82144108h case    2:*/		return 0x8214410C;
		  /* 8214410Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 8214410Ch case    3:*/		regs.CTR = regs.R11;
		/* 8214410Ch case    3:*/		return 0x82144110;
		  /* 82144110h */ case    4:  		/* ldu R11, <#[R10 + 8]> */
		/* 82144110h case    4:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 82144110h case    4:*/		return 0x82144114;
		  /* 82144114h */ case    5:  		/* stdu R11, <#[R9 + 8]> */
		/* 82144114h case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 82144114h case    5:*/		return 0x82144118;
		  /* 82144118h */ case    6:  		/* bc 16, CR0_LT, -8 */
		/* 82144118h case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144110;  }
		/* 82144118h case    6:*/		return 0x8214411C;
		  /* 8214411Ch */ case    7:  		/* lwz R7, <#[R31 + 56]> */
		/* 8214411Ch case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000038) );
		/* 8214411Ch case    7:*/		return 0x82144120;
		  /* 82144120h */ case    8:  		/* li R9, 2 */
		/* 82144120h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82144120h case    8:*/		return 0x82144124;
		  /* 82144124h */ case    9:  		/* addi R10, R31, 72 */
		/* 82144124h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x48);
		/* 82144124h case    9:*/		return 0x82144128;
		  /* 82144128h */ case   10:  		/* addi R11, R30, 60 */
		/* 82144128h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3C);
		/* 82144128h case   10:*/		return 0x8214412C;
		  /* 8214412Ch */ case   11:  		/* subf R8, R30, R31 */
		/* 8214412Ch case   11:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R30,regs.R31);
		/* 8214412Ch case   11:*/		return 0x82144130;
		  /* 82144130h */ case   12:  		/* stw R7, <#[R30 + 56]> */
		/* 82144130h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R30 + 0x00000038) );
		/* 82144130h case   12:*/		return 0x82144134;
		  /* 82144134h */ case   13:  		/* mtspr CTR, R9 */
		/* 82144134h case   13:*/		regs.CTR = regs.R9;
		/* 82144134h case   13:*/		return 0x82144138;
		  /* 82144138h */ case   14:  		/* lwzx R9, <#[R8 + R11]> */
		/* 82144138h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82144138h case   14:*/		return 0x8214413C;
		  /* 8214413Ch */ case   15:  		/* stw R9, <#[R11]> */
		/* 8214413Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214413Ch case   15:*/		return 0x82144140;
		  /* 82144140h */ case   16:  		/* lwz R9, <#[R10 - 4]> */
		/* 82144140h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0xFFFFFFFC) );
		/* 82144140h case   16:*/		return 0x82144144;
		  /* 82144144h */ case   17:  		/* stw R9, <#[R11 + 8]> */
		/* 82144144h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82144144h case   17:*/		return 0x82144148;
		  /* 82144148h */ case   18:  		/* lwzu R9, <#[R10 + 4]> */
		/* 82144148h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82144148h case   18:*/		return 0x8214414C;
		  /* 8214414Ch */ case   19:  		/* stw R9, <#[R11 + 16]> */
		/* 8214414Ch case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 8214414Ch case   19:*/		return 0x82144150;
		  /* 82144150h */ case   20:  		/* addi R11, R11, 4 */
		/* 82144150h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82144150h case   20:*/		return 0x82144154;
		  /* 82144154h */ case   21:  		/* bc 16, CR0_LT, -28 */
		/* 82144154h case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144138;  }
		/* 82144154h case   21:*/		return 0x82144158;
		  /* 82144158h */ case   22:  		/* lwz R11, <#[R31 + 84]> */
		/* 82144158h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 82144158h case   22:*/		return 0x8214415C;
		  /* 8214415Ch */ case   23:  		/* li R28, 0 */
		/* 8214415Ch case   23:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8214415Ch case   23:*/		return 0x82144160;
		  /* 82144160h */ case   24:  		/* addi R29, R31, 92 */
		/* 82144160h case   24:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x5C);
		/* 82144160h case   24:*/		return 0x82144164;
		  /* 82144164h */ case   25:  		/* subf R27, R31, R30 */
		/* 82144164h case   25:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R31,regs.R30);
		/* 82144164h case   25:*/		return 0x82144168;
		  /* 82144168h */ case   26:  		/* stw R11, <#[R30 + 84]> */
		/* 82144168h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000054) );
		/* 82144168h case   26:*/		return 0x8214416C;
		  /* 8214416Ch */ case   27:  		/* lwz R11, <#[R31 + 124]> */
		/* 8214416Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 8214416Ch case   27:*/		return 0x82144170;
		  /* 82144170h */ case   28:  		/* stw R11, <#[R30 + 124]> */
		/* 82144170h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000007C) );
		/* 82144170h case   28:*/		return 0x82144174;
		  /* 82144174h */ case   29:  		/* lwz R11, <#[R29]> */
		/* 82144174h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82144174h case   29:*/		return 0x82144178;
		  /* 82144178h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 82144178h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82144178h case   30:*/		return 0x8214417C;
		  /* 8214417Ch */ case   31:  		/* bc 12, CR6_EQ, 36 */
		/* 8214417Ch case   31:*/		if ( regs.CR[6].eq ) { return 0x821441A0;  }
		/* 8214417Ch case   31:*/		return 0x82144180;
		  /* 82144180h */ case   32:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 82144180h case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 82144180h case   32:*/		return 0x82144184;
		  /* 82144184h */ case   33:  		/* lwz R11, <#[R3]> */
		/* 82144184h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82144184h case   33:*/		return 0x82144188;
		  /* 82144188h */ case   34:  		/* lwz R11, <#[R11 + 4]> */
		/* 82144188h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82144188h case   34:*/		return 0x8214418C;
		  /* 8214418Ch */ case   35:  		/* mtspr CTR, R11 */
		/* 8214418Ch case   35:*/		regs.CTR = regs.R11;
		/* 8214418Ch case   35:*/		return 0x82144190;
		  /* 82144190h */ case   36:  		/* bcctrl 20, CR0_LT */
		/* 82144190h case   36:*/		if ( 1 ) { regs.LR = 0x82144194; return (uint32)regs.CTR; }
		/* 82144190h case   36:*/		return 0x82144194;
		  /* 82144194h */ case   37:  		/* stwx R3, <#[R27 + R29]> */
		/* 82144194h case   37:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + regs.R29 + 0x00000000) );
		/* 82144194h case   37:*/		return 0x82144198;
		  /* 82144198h */ case   38:  		/* cmplwi CR0, R3, 0 */
		/* 82144198h case   38:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82144198h case   38:*/		return 0x8214419C;
		  /* 8214419Ch */ case   39:  		/* bc 12, CR0_EQ, -164 */
		/* 8214419Ch case   39:*/		if ( regs.CR[0].eq ) { return 0x821440F8;  }
		/* 8214419Ch case   39:*/		return 0x821441A0;
	}
	return 0x821441A0;
} // Block from 82144100h-821441A0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821441A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821441A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821441A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821441A0);
		  /* 821441A0h */ case    0:  		/* addi R28, R28, 1 */
		/* 821441A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821441A0h case    0:*/		return 0x821441A4;
		  /* 821441A4h */ case    1:  		/* addi R29, R29, 4 */
		/* 821441A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821441A4h case    1:*/		return 0x821441A8;
		  /* 821441A8h */ case    2:  		/* cmplwi CR6, R28, 2 */
		/* 821441A8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000002);
		/* 821441A8h case    2:*/		return 0x821441AC;
		  /* 821441ACh */ case    3:  		/* bc 12, CR6_LT, -56 */
		/* 821441ACh case    3:*/		if ( regs.CR[6].lt ) { return 0x82144174;  }
		/* 821441ACh case    3:*/		return 0x821441B0;
		  /* 821441B0h */ case    4:  		/* lwz R11, <#[R31 + 100]> */
		/* 821441B0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000064) );
		/* 821441B0h case    4:*/		return 0x821441B4;
		  /* 821441B4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821441B4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821441B4h case    5:*/		return 0x821441B8;
		  /* 821441B8h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 821441B8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821441DC;  }
		/* 821441B8h case    6:*/		return 0x821441BC;
		  /* 821441BCh */ case    7:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 821441BCh case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 821441BCh case    7:*/		return 0x821441C0;
		  /* 821441C0h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 821441C0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821441C0h case    8:*/		return 0x821441C4;
		  /* 821441C4h */ case    9:  		/* lwz R11, <#[R11 + 4]> */
		/* 821441C4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821441C4h case    9:*/		return 0x821441C8;
		  /* 821441C8h */ case   10:  		/* mtspr CTR, R11 */
		/* 821441C8h case   10:*/		regs.CTR = regs.R11;
		/* 821441C8h case   10:*/		return 0x821441CC;
		  /* 821441CCh */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 821441CCh case   11:*/		if ( 1 ) { regs.LR = 0x821441D0; return (uint32)regs.CTR; }
		/* 821441CCh case   11:*/		return 0x821441D0;
		  /* 821441D0h */ case   12:  		/* stw R3, <#[R30 + 100]> */
		/* 821441D0h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000064) );
		/* 821441D0h case   12:*/		return 0x821441D4;
		  /* 821441D4h */ case   13:  		/* cmplwi CR0, R3, 0 */
		/* 821441D4h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821441D4h case   13:*/		return 0x821441D8;
		  /* 821441D8h */ case   14:  		/* bc 12, CR0_EQ, -224 */
		/* 821441D8h case   14:*/		if ( regs.CR[0].eq ) { return 0x821440F8;  }
		/* 821441D8h case   14:*/		return 0x821441DC;
	}
	return 0x821441DC;
} // Block from 821441A0h-821441DCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821441DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821441DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821441DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821441DC);
		  /* 821441DCh */ case    0:  		/* li R28, 0 */
		/* 821441DCh case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821441DCh case    0:*/		return 0x821441E0;
		  /* 821441E0h */ case    1:  		/* addi R29, R31, 104 */
		/* 821441E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x68);
		/* 821441E0h case    1:*/		return 0x821441E4;
		  /* 821441E4h */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821441E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821441E4h case    2:*/		return 0x821441E8;
		  /* 821441E8h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821441E8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821441E8h case    3:*/		return 0x821441EC;
		  /* 821441ECh */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 821441ECh case    4:*/		if ( regs.CR[6].eq ) { return 0x82144210;  }
		/* 821441ECh case    4:*/		return 0x821441F0;
		  /* 821441F0h */ case    5:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 821441F0h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 821441F0h case    5:*/		return 0x821441F4;
		  /* 821441F4h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 821441F4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821441F4h case    6:*/		return 0x821441F8;
		  /* 821441F8h */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 821441F8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821441F8h case    7:*/		return 0x821441FC;
		  /* 821441FCh */ case    8:  		/* mtspr CTR, R11 */
		/* 821441FCh case    8:*/		regs.CTR = regs.R11;
		/* 821441FCh case    8:*/		return 0x82144200;
		  /* 82144200h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82144200h case    9:*/		if ( 1 ) { regs.LR = 0x82144204; return (uint32)regs.CTR; }
		/* 82144200h case    9:*/		return 0x82144204;
		  /* 82144204h */ case   10:  		/* stwx R3, <#[R29 + R27]> */
		/* 82144204h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + regs.R27 + 0x00000000) );
		/* 82144204h case   10:*/		return 0x82144208;
		  /* 82144208h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 82144208h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82144208h case   11:*/		return 0x8214420C;
		  /* 8214420Ch */ case   12:  		/* bc 12, CR0_EQ, -276 */
		/* 8214420Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x821440F8;  }
		/* 8214420Ch case   12:*/		return 0x82144210;
	}
	return 0x82144210;
} // Block from 821441DCh-82144210h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82144210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144210);
		  /* 82144210h */ case    0:  		/* addi R28, R28, 1 */
		/* 82144210h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82144210h case    0:*/		return 0x82144214;
		  /* 82144214h */ case    1:  		/* addi R29, R29, 4 */
		/* 82144214h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82144214h case    1:*/		return 0x82144218;
		  /* 82144218h */ case    2:  		/* cmplwi CR6, R28, 4 */
		/* 82144218h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 82144218h case    2:*/		return 0x8214421C;
		  /* 8214421Ch */ case    3:  		/* bc 12, CR6_LT, -56 */
		/* 8214421Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x821441E4;  }
		/* 8214421Ch case    3:*/		return 0x82144220;
		  /* 82144220h */ case    4:  		/* lwz R11, <#[R31 + 88]> */
		/* 82144220h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 82144220h case    4:*/		return 0x82144224;
		  /* 82144224h */ case    5:  		/* mr R3, R30 */
		/* 82144224h case    5:*/		regs.R3 = regs.R30;
		/* 82144224h case    5:*/		return 0x82144228;
		  /* 82144228h */ case    6:  		/* stw R11, <#[R30 + 88]> */
		/* 82144228h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000058) );
		/* 82144228h case    6:*/		return 0x8214422C;
	}
	return 0x8214422C;
} // Block from 82144210h-8214422Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214422Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214422C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214422C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214422C);
		  /* 8214422Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8214422Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214422Ch case    0:*/		return 0x82144230;
		  /* 82144230h */ case    1:  		/* b -733068 */
		/* 82144230h case    1:*/		return 0x820912A4;
		/* 82144230h case    1:*/		return 0x82144234;
		  /* 82144234h */ case    2:  		/* nop */
		/* 82144234h case    2:*/		cpu::op::nop();
		/* 82144234h case    2:*/		return 0x82144238;
	}
	return 0x82144238;
} // Block from 8214422Ch-82144238h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82144238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144238);
		  /* 82144238h */ case    0:  		/* mfspr R12, LR */
		/* 82144238h case    0:*/		regs.R12 = regs.LR;
		/* 82144238h case    0:*/		return 0x8214423C;
		  /* 8214423Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214423Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214423Ch case    1:*/		return 0x82144240;
		  /* 82144240h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82144240h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82144240h case    2:*/		return 0x82144244;
		  /* 82144244h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82144244h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82144244h case    3:*/		return 0x82144248;
		  /* 82144248h */ case    4:  		/* li R4, 28 */
		/* 82144248h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 82144248h case    4:*/		return 0x8214424C;
		  /* 8214424Ch */ case    5:  		/* mr R31, R3 */
		/* 8214424Ch case    5:*/		regs.R31 = regs.R3;
		/* 8214424Ch case    5:*/		return 0x82144250;
		  /* 82144250h */ case    6:  		/* bl -503752 */
		/* 82144250h case    6:*/		regs.LR = 0x82144254; return 0x820C9288;
		/* 82144250h case    6:*/		return 0x82144254;
		  /* 82144254h */ case    7:  		/* lis R10, -32253 */
		/* 82144254h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82144254h case    7:*/		return 0x82144258;
		  /* 82144258h */ case    8:  		/* li R11, 0 */
		/* 82144258h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82144258h case    8:*/		return 0x8214425C;
		  /* 8214425Ch */ case    9:  		/* addi R10, R10, 24924 */
		/* 8214425Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x615C);
		/* 8214425Ch case    9:*/		return 0x82144260;
		  /* 82144260h */ case   10:  		/* li R9, 2257 */
		/* 82144260h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x8D1);
		/* 82144260h case   10:*/		return 0x82144264;
		  /* 82144264h */ case   11:  		/* stw R11, <#[R31 + 16]> */
		/* 82144264h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82144264h case   11:*/		return 0x82144268;
		  /* 82144268h */ case   12:  		/* li R8, 228 */
		/* 82144268h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0xE4);
		/* 82144268h case   12:*/		return 0x8214426C;
		  /* 8214426Ch */ case   13:  		/* stw R10, <#[R31]> */
		/* 8214426Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8214426Ch case   13:*/		return 0x82144270;
		  /* 82144270h */ case   14:  		/* stw R11, <#[R31 + 20]> */
		/* 82144270h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82144270h case   14:*/		return 0x82144274;
		  /* 82144274h */ case   15:  		/* mr R3, R31 */
		/* 82144274h case   15:*/		regs.R3 = regs.R31;
		/* 82144274h case   15:*/		return 0x82144278;
		  /* 82144278h */ case   16:  		/* stw R11, <#[R31 + 24]> */
		/* 82144278h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82144278h case   16:*/		return 0x8214427C;
		  /* 8214427Ch */ case   17:  		/* stw R11, <#[R31 + 28]> */
		/* 8214427Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8214427Ch case   17:*/		return 0x82144280;
		  /* 82144280h */ case   18:  		/* stw R9, <#[R31 + 32]> */
		/* 82144280h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 82144280h case   18:*/		return 0x82144284;
		  /* 82144284h */ case   19:  		/* stw R8, <#[R31 + 36]> */
		/* 82144284h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000024) );
		/* 82144284h case   19:*/		return 0x82144288;
		  /* 82144288h */ case   20:  		/* stw R11, <#[R31 + 40]> */
		/* 82144288h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82144288h case   20:*/		return 0x8214428C;
		  /* 8214428Ch */ case   21:  		/* stw R11, <#[R31 + 44]> */
		/* 8214428Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8214428Ch case   21:*/		return 0x82144290;
		  /* 82144290h */ case   22:  		/* std R11, <#[R31 + 48]> */
		/* 82144290h case   22:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82144290h case   22:*/		return 0x82144294;
		  /* 82144294h */ case   23:  		/* std R11, <#[R31 + 56]> */
		/* 82144294h case   23:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82144294h case   23:*/		return 0x82144298;
		  /* 82144298h */ case   24:  		/* std R11, <#[R31 + 64]> */
		/* 82144298h case   24:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000040) );
		/* 82144298h case   24:*/		return 0x8214429C;
		  /* 8214429Ch */ case   25:  		/* std R11, <#[R31 + 72]> */
		/* 8214429Ch case   25:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 8214429Ch case   25:*/		return 0x821442A0;
		  /* 821442A0h */ case   26:  		/* std R11, <#[R31 + 80]> */
		/* 821442A0h case   26:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 821442A0h case   26:*/		return 0x821442A4;
		  /* 821442A4h */ case   27:  		/* addi R1, R1, 96 */
		/* 821442A4h case   27:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821442A4h case   27:*/		return 0x821442A8;
		  /* 821442A8h */ case   28:  		/* lwz R12, <#[R1 - 8]> */
		/* 821442A8h case   28:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821442A8h case   28:*/		return 0x821442AC;
		  /* 821442ACh */ case   29:  		/* mtspr LR, R12 */
		/* 821442ACh case   29:*/		regs.LR = regs.R12;
		/* 821442ACh case   29:*/		return 0x821442B0;
		  /* 821442B0h */ case   30:  		/* ld R31, <#[R1 - 16]> */
		/* 821442B0h case   30:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821442B0h case   30:*/		return 0x821442B4;
		  /* 821442B4h */ case   31:  		/* bclr 20, CR0_LT */
		/* 821442B4h case   31:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821442B4h case   31:*/		return 0x821442B8;
	}
	return 0x821442B8;
} // Block from 82144238h-821442B8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821442B8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821442B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821442B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821442B8);
		  /* 821442B8h */ case    0:  		/* mfspr R12, LR */
		/* 821442B8h case    0:*/		regs.R12 = regs.LR;
		/* 821442B8h case    0:*/		return 0x821442BC;
		  /* 821442BCh */ case    1:  		/* bl -733296 */
		/* 821442BCh case    1:*/		regs.LR = 0x821442C0; return 0x8209124C;
		/* 821442BCh case    1:*/		return 0x821442C0;
		  /* 821442C0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821442C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821442C0h case    2:*/		return 0x821442C4;
		  /* 821442C4h */ case    3:  		/* mr R30, R4 */
		/* 821442C4h case    3:*/		regs.R30 = regs.R4;
		/* 821442C4h case    3:*/		return 0x821442C8;
		  /* 821442C8h */ case    4:  		/* li R4, 28 */
		/* 821442C8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 821442C8h case    4:*/		return 0x821442CC;
		  /* 821442CCh */ case    5:  		/* mr R31, R3 */
		/* 821442CCh case    5:*/		regs.R31 = regs.R3;
		/* 821442CCh case    5:*/		return 0x821442D0;
		  /* 821442D0h */ case    6:  		/* mr R29, R5 */
		/* 821442D0h case    6:*/		regs.R29 = regs.R5;
		/* 821442D0h case    6:*/		return 0x821442D4;
		  /* 821442D4h */ case    7:  		/* mr R28, R6 */
		/* 821442D4h case    7:*/		regs.R28 = regs.R6;
		/* 821442D4h case    7:*/		return 0x821442D8;
		  /* 821442D8h */ case    8:  		/* mr R27, R7 */
		/* 821442D8h case    8:*/		regs.R27 = regs.R7;
		/* 821442D8h case    8:*/		return 0x821442DC;
		  /* 821442DCh */ case    9:  		/* mr R26, R8 */
		/* 821442DCh case    9:*/		regs.R26 = regs.R8;
		/* 821442DCh case    9:*/		return 0x821442E0;
		  /* 821442E0h */ case   10:  		/* mr R25, R9 */
		/* 821442E0h case   10:*/		regs.R25 = regs.R9;
		/* 821442E0h case   10:*/		return 0x821442E4;
		  /* 821442E4h */ case   11:  		/* bl -503900 */
		/* 821442E4h case   11:*/		regs.LR = 0x821442E8; return 0x820C9288;
		/* 821442E4h case   11:*/		return 0x821442E8;
		  /* 821442E8h */ case   12:  		/* lis R10, -32253 */
		/* 821442E8h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821442E8h case   12:*/		return 0x821442EC;
		  /* 821442ECh */ case   13:  		/* stw R29, <#[R31 + 16]> */
		/* 821442ECh case   13:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000010) );
		/* 821442ECh case   13:*/		return 0x821442F0;
		  /* 821442F0h */ case   14:  		/* li R11, 5 */
		/* 821442F0h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 821442F0h case   14:*/		return 0x821442F4;
		  /* 821442F4h */ case   15:  		/* stw R28, <#[R31 + 20]> */
		/* 821442F4h case   15:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000014) );
		/* 821442F4h case   15:*/		return 0x821442F8;
		  /* 821442F8h */ case   16:  		/* addi R10, R10, 24924 */
		/* 821442F8h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x615C);
		/* 821442F8h case   16:*/		return 0x821442FC;
		  /* 821442FCh */ case   17:  		/* stw R27, <#[R31 + 24]> */
		/* 821442FCh case   17:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000018) );
		/* 821442FCh case   17:*/		return 0x82144300;
		  /* 82144300h */ case   18:  		/* li R9, 2257 */
		/* 82144300h case   18:*/		cpu::op::li<0>(regs,&regs.R9,0x8D1);
		/* 82144300h case   18:*/		return 0x82144304;
		  /* 82144304h */ case   19:  		/* stw R26, <#[R31 + 28]> */
		/* 82144304h case   19:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000001C) );
		/* 82144304h case   19:*/		return 0x82144308;
		  /* 82144308h */ case   20:  		/* li R8, 228 */
		/* 82144308h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0xE4);
		/* 82144308h case   20:*/		return 0x8214430C;
		  /* 8214430Ch */ case   21:  		/* stw R10, <#[R31]> */
		/* 8214430Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8214430Ch case   21:*/		return 0x82144310;
		  /* 82144310h */ case   22:  		/* li R7, 0 */
		/* 82144310h case   22:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82144310h case   22:*/		return 0x82144314;
		  /* 82144314h */ case   23:  		/* stw R9, <#[R31 + 32]> */
		/* 82144314h case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 82144314h case   23:*/		return 0x82144318;
		  /* 82144318h */ case   24:  		/* addi R9, R31, 40 */
		/* 82144318h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x28);
		/* 82144318h case   24:*/		return 0x8214431C;
		  /* 8214431Ch */ case   25:  		/* stw R8, <#[R31 + 36]> */
		/* 8214431Ch case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000024) );
		/* 8214431Ch case   25:*/		return 0x82144320;
		  /* 82144320h */ case   26:  		/* addi R10, R30, -8 */
		/* 82144320h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFF8);
		/* 82144320h case   26:*/		return 0x82144324;
		  /* 82144324h */ case   27:  		/* stw R25, <#[R31 + 40]> */
		/* 82144324h case   27:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000028) );
		/* 82144324h case   27:*/		return 0x82144328;
		  /* 82144328h */ case   28:  		/* mtspr CTR, R11 */
		/* 82144328h case   28:*/		regs.CTR = regs.R11;
		/* 82144328h case   28:*/		return 0x8214432C;
		  /* 8214432Ch */ case   29:  		/* stw R7, <#[R31 + 44]> */
		/* 8214432Ch case   29:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x0000002C) );
		/* 8214432Ch case   29:*/		return 0x82144330;
		  /* 82144330h */ case   30:  		/* ldu R11, <#[R10 + 8]> */
		/* 82144330h case   30:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 82144330h case   30:*/		return 0x82144334;
		  /* 82144334h */ case   31:  		/* stdu R11, <#[R9 + 8]> */
		/* 82144334h case   31:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 82144334h case   31:*/		return 0x82144338;
		  /* 82144338h */ case   32:  		/* bc 16, CR0_LT, -8 */
		/* 82144338h case   32:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144330;  }
		/* 82144338h case   32:*/		return 0x8214433C;
		  /* 8214433Ch */ case   33:  		/* mr R3, R31 */
		/* 8214433Ch case   33:*/		regs.R3 = regs.R31;
		/* 8214433Ch case   33:*/		return 0x82144340;
		  /* 82144340h */ case   34:  		/* addi R1, R1, 144 */
		/* 82144340h case   34:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82144340h case   34:*/		return 0x82144344;
		  /* 82144344h */ case   35:  		/* b -733352 */
		/* 82144344h case   35:*/		return 0x8209129C;
		/* 82144344h case   35:*/		return 0x82144348;
	}
	return 0x82144348;
} // Block from 821442B8h-82144348h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82144348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144348);
		  /* 82144348h */ case    0:  		/* mfspr R12, LR */
		/* 82144348h case    0:*/		regs.R12 = regs.LR;
		/* 82144348h case    0:*/		return 0x8214434C;
		  /* 8214434Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214434Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214434Ch case    1:*/		return 0x82144350;
		  /* 82144350h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82144350h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82144350h case    2:*/		return 0x82144354;
		  /* 82144354h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82144354h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82144354h case    3:*/		return 0x82144358;
		  /* 82144358h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82144358h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82144358h case    4:*/		return 0x8214435C;
		  /* 8214435Ch */ case    5:  		/* mr R30, R3 */
		/* 8214435Ch case    5:*/		regs.R30 = regs.R3;
		/* 8214435Ch case    5:*/		return 0x82144360;
		  /* 82144360h */ case    6:  		/* li R3, 88 */
		/* 82144360h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82144360h case    6:*/		return 0x82144364;
		  /* 82144364h */ case    7:  		/* bl -504124 */
		/* 82144364h case    7:*/		regs.LR = 0x82144368; return 0x820C9228;
		/* 82144364h case    7:*/		return 0x82144368;
		  /* 82144368h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82144368h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82144368h case    8:*/		return 0x8214436C;
		  /* 8214436Ch */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 8214436Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8214437C;  }
		/* 8214436Ch case    9:*/		return 0x82144370;
		  /* 82144370h */ case   10:  		/* bl -312 */
		/* 82144370h case   10:*/		regs.LR = 0x82144374; return 0x82144238;
		/* 82144370h case   10:*/		return 0x82144374;
		  /* 82144374h */ case   11:  		/* mr R31, R3 */
		/* 82144374h case   11:*/		regs.R31 = regs.R3;
		/* 82144374h case   11:*/		return 0x82144378;
		  /* 82144378h */ case   12:  		/* b 8 */
		/* 82144378h case   12:*/		return 0x82144380;
		/* 82144378h case   12:*/		return 0x8214437C;
	}
	return 0x8214437C;
} // Block from 82144348h-8214437Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214437Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214437C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214437C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214437C);
		  /* 8214437Ch */ case    0:  		/* li R31, 0 */
		/* 8214437Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8214437Ch case    0:*/		return 0x82144380;
	}
	return 0x82144380;
} // Block from 8214437Ch-82144380h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82144380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144380);
		  /* 82144380h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82144380h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82144380h case    0:*/		return 0x82144384;
		  /* 82144384h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82144384h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82144390;  }
		/* 82144384h case    1:*/		return 0x82144388;
		  /* 82144388h */ case    2:  		/* li R3, 0 */
		/* 82144388h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82144388h case    2:*/		return 0x8214438C;
		  /* 8214438Ch */ case    3:  		/* b 172 */
		/* 8214438Ch case    3:*/		return 0x82144438;
		/* 8214438Ch case    3:*/		return 0x82144390;
	}
	return 0x82144390;
} // Block from 82144380h-82144390h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144390);
		  /* 82144390h */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 82144390h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82144390h case    0:*/		return 0x82144394;
		  /* 82144394h */ case    1:  		/* stw R11, <#[R31 + 16]> */
		/* 82144394h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82144394h case    1:*/		return 0x82144398;
		  /* 82144398h */ case    2:  		/* lwz R11, <#[R30 + 20]> */
		/* 82144398h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82144398h case    2:*/		return 0x8214439C;
		  /* 8214439Ch */ case    3:  		/* stw R11, <#[R31 + 20]> */
		/* 8214439Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8214439Ch case    3:*/		return 0x821443A0;
		  /* 821443A0h */ case    4:  		/* lwz R11, <#[R30 + 24]> */
		/* 821443A0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 821443A0h case    4:*/		return 0x821443A4;
		  /* 821443A4h */ case    5:  		/* stw R11, <#[R31 + 24]> */
		/* 821443A4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821443A4h case    5:*/		return 0x821443A8;
		  /* 821443A8h */ case    6:  		/* lwz R11, <#[R30 + 28]> */
		/* 821443A8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821443A8h case    6:*/		return 0x821443AC;
		  /* 821443ACh */ case    7:  		/* stw R11, <#[R31 + 28]> */
		/* 821443ACh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821443ACh case    7:*/		return 0x821443B0;
		  /* 821443B0h */ case    8:  		/* lwz R11, <#[R30 + 32]> */
		/* 821443B0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821443B0h case    8:*/		return 0x821443B4;
		  /* 821443B4h */ case    9:  		/* stw R11, <#[R31 + 32]> */
		/* 821443B4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821443B4h case    9:*/		return 0x821443B8;
		  /* 821443B8h */ case   10:  		/* lwz R11, <#[R30 + 36]> */
		/* 821443B8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821443B8h case   10:*/		return 0x821443BC;
		  /* 821443BCh */ case   11:  		/* stw R11, <#[R31 + 36]> */
		/* 821443BCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821443BCh case   11:*/		return 0x821443C0;
		  /* 821443C0h */ case   12:  		/* lwz R11, <#[R30 + 40]> */
		/* 821443C0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 821443C0h case   12:*/		return 0x821443C4;
		  /* 821443C4h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821443C4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821443C4h case   13:*/		return 0x821443C8;
		  /* 821443C8h */ case   14:  		/* bc 12, CR6_EQ, 36 */
		/* 821443C8h case   14:*/		if ( regs.CR[6].eq ) { return 0x821443EC;  }
		/* 821443C8h case   14:*/		return 0x821443CC;
		  /* 821443CCh */ case   15:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 821443CCh case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 821443CCh case   15:*/		return 0x821443D0;
		  /* 821443D0h */ case   16:  		/* lwz R11, <#[R3]> */
		/* 821443D0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821443D0h case   16:*/		return 0x821443D4;
		  /* 821443D4h */ case   17:  		/* lwz R11, <#[R11 + 4]> */
		/* 821443D4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821443D4h case   17:*/		return 0x821443D8;
		  /* 821443D8h */ case   18:  		/* mtspr CTR, R11 */
		/* 821443D8h case   18:*/		regs.CTR = regs.R11;
		/* 821443D8h case   18:*/		return 0x821443DC;
		  /* 821443DCh */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 821443DCh case   19:*/		if ( 1 ) { regs.LR = 0x821443E0; return (uint32)regs.CTR; }
		/* 821443DCh case   19:*/		return 0x821443E0;
		  /* 821443E0h */ case   20:  		/* stw R3, <#[R31 + 40]> */
		/* 821443E0h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 821443E0h case   20:*/		return 0x821443E4;
		  /* 821443E4h */ case   21:  		/* cmplwi CR0, R3, 0 */
		/* 821443E4h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821443E4h case   21:*/		return 0x821443E8;
		  /* 821443E8h */ case   22:  		/* bc 12, CR0_EQ, -96 */
		/* 821443E8h case   22:*/		if ( regs.CR[0].eq ) { return 0x82144388;  }
		/* 821443E8h case   22:*/		return 0x821443EC;
	}
	return 0x821443EC;
} // Block from 82144390h-821443ECh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821443ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821443EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821443EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821443EC);
		  /* 821443ECh */ case    0:  		/* lwz R11, <#[R30 + 44]> */
		/* 821443ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821443ECh case    0:*/		return 0x821443F0;
		  /* 821443F0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821443F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821443F0h case    1:*/		return 0x821443F4;
		  /* 821443F4h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 821443F4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82144418;  }
		/* 821443F4h case    2:*/		return 0x821443F8;
		  /* 821443F8h */ case    3:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 821443F8h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 821443F8h case    3:*/		return 0x821443FC;
		  /* 821443FCh */ case    4:  		/* lwz R11, <#[R3]> */
		/* 821443FCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821443FCh case    4:*/		return 0x82144400;
		  /* 82144400h */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 82144400h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82144400h case    5:*/		return 0x82144404;
		  /* 82144404h */ case    6:  		/* mtspr CTR, R11 */
		/* 82144404h case    6:*/		regs.CTR = regs.R11;
		/* 82144404h case    6:*/		return 0x82144408;
		  /* 82144408h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 82144408h case    7:*/		if ( 1 ) { regs.LR = 0x8214440C; return (uint32)regs.CTR; }
		/* 82144408h case    7:*/		return 0x8214440C;
		  /* 8214440Ch */ case    8:  		/* stw R3, <#[R31 + 44]> */
		/* 8214440Ch case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 8214440Ch case    8:*/		return 0x82144410;
		  /* 82144410h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 82144410h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82144410h case    9:*/		return 0x82144414;
		  /* 82144414h */ case   10:  		/* bc 12, CR0_EQ, -140 */
		/* 82144414h case   10:*/		if ( regs.CR[0].eq ) { return 0x82144388;  }
		/* 82144414h case   10:*/		return 0x82144418;
	}
	return 0x82144418;
} // Block from 821443ECh-82144418h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82144418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144418);
		  /* 82144418h */ case    0:  		/* li R11, 5 */
		/* 82144418h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 82144418h case    0:*/		return 0x8214441C;
		  /* 8214441Ch */ case    1:  		/* addi R10, R30, 40 */
		/* 8214441Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x28);
		/* 8214441Ch case    1:*/		return 0x82144420;
		  /* 82144420h */ case    2:  		/* addi R9, R31, 40 */
		/* 82144420h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x28);
		/* 82144420h case    2:*/		return 0x82144424;
		  /* 82144424h */ case    3:  		/* mtspr CTR, R11 */
		/* 82144424h case    3:*/		regs.CTR = regs.R11;
		/* 82144424h case    3:*/		return 0x82144428;
		  /* 82144428h */ case    4:  		/* ldu R11, <#[R10 + 8]> */
		/* 82144428h case    4:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 82144428h case    4:*/		return 0x8214442C;
		  /* 8214442Ch */ case    5:  		/* stdu R11, <#[R9 + 8]> */
		/* 8214442Ch case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 8214442Ch case    5:*/		return 0x82144430;
		  /* 82144430h */ case    6:  		/* bc 16, CR0_LT, -8 */
		/* 82144430h case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144428;  }
		/* 82144430h case    6:*/		return 0x82144434;
		  /* 82144434h */ case    7:  		/* mr R3, R31 */
		/* 82144434h case    7:*/		regs.R3 = regs.R31;
		/* 82144434h case    7:*/		return 0x82144438;
	}
	return 0x82144438;
} // Block from 82144418h-82144438h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82144438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144438);
		  /* 82144438h */ case    0:  		/* addi R1, R1, 112 */
		/* 82144438h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82144438h case    0:*/		return 0x8214443C;
		  /* 8214443Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214443Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214443Ch case    1:*/		return 0x82144440;
		  /* 82144440h */ case    2:  		/* mtspr LR, R12 */
		/* 82144440h case    2:*/		regs.LR = regs.R12;
		/* 82144440h case    2:*/		return 0x82144444;
		  /* 82144444h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82144444h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82144444h case    3:*/		return 0x82144448;
		  /* 82144448h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82144448h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82144448h case    4:*/		return 0x8214444C;
		  /* 8214444Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 8214444Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214444Ch case    5:*/		return 0x82144450;
	}
	return 0x82144450;
} // Block from 82144438h-82144450h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82144450h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144450);
		  /* 82144450h */ case    0:  		/* mfspr R12, LR */
		/* 82144450h case    0:*/		regs.R12 = regs.LR;
		/* 82144450h case    0:*/		return 0x82144454;
		  /* 82144454h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82144454h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82144454h case    1:*/		return 0x82144458;
		  /* 82144458h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82144458h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82144458h case    2:*/		return 0x8214445C;
		  /* 8214445Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8214445Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214445Ch case    3:*/		return 0x82144460;
		  /* 82144460h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82144460h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82144460h case    4:*/		return 0x82144464;
		  /* 82144464h */ case    5:  		/* mr R30, R4 */
		/* 82144464h case    5:*/		regs.R30 = regs.R4;
		/* 82144464h case    5:*/		return 0x82144468;
		  /* 82144468h */ case    6:  		/* li R4, 29 */
		/* 82144468h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1D);
		/* 82144468h case    6:*/		return 0x8214446C;
		  /* 8214446Ch */ case    7:  		/* mr R31, R3 */
		/* 8214446Ch case    7:*/		regs.R31 = regs.R3;
		/* 8214446Ch case    7:*/		return 0x82144470;
		  /* 82144470h */ case    8:  		/* bl -504296 */
		/* 82144470h case    8:*/		regs.LR = 0x82144474; return 0x820C9288;
		/* 82144470h case    8:*/		return 0x82144474;
		  /* 82144474h */ case    9:  		/* lis R11, -32253 */
		/* 82144474h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82144474h case    9:*/		return 0x82144478;
		  /* 82144478h */ case   10:  		/* stw R30, <#[R31 + 16]> */
		/* 82144478h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 82144478h case   10:*/		return 0x8214447C;
		  /* 8214447Ch */ case   11:  		/* mr R3, R31 */
		/* 8214447Ch case   11:*/		regs.R3 = regs.R31;
		/* 8214447Ch case   11:*/		return 0x82144480;
		  /* 82144480h */ case   12:  		/* addi R11, R11, 24940 */
		/* 82144480h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x616C);
		/* 82144480h case   12:*/		return 0x82144484;
		  /* 82144484h */ case   13:  		/* stw R11, <#[R31]> */
		/* 82144484h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82144484h case   13:*/		return 0x82144488;
		  /* 82144488h */ case   14:  		/* addi R1, R1, 112 */
		/* 82144488h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82144488h case   14:*/		return 0x8214448C;
		  /* 8214448Ch */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214448Ch case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214448Ch case   15:*/		return 0x82144490;
		  /* 82144490h */ case   16:  		/* mtspr LR, R12 */
		/* 82144490h case   16:*/		regs.LR = regs.R12;
		/* 82144490h case   16:*/		return 0x82144494;
		  /* 82144494h */ case   17:  		/* ld R30, <#[R1 - 24]> */
		/* 82144494h case   17:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82144494h case   17:*/		return 0x82144498;
		  /* 82144498h */ case   18:  		/* ld R31, <#[R1 - 16]> */
		/* 82144498h case   18:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82144498h case   18:*/		return 0x8214449C;
		  /* 8214449Ch */ case   19:  		/* bclr 20, CR0_LT */
		/* 8214449Ch case   19:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214449Ch case   19:*/		return 0x821444A0;
	}
	return 0x821444A0;
} // Block from 82144450h-821444A0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821444A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821444A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821444A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821444A0);
		  /* 821444A0h */ case    0:  		/* mfspr R12, LR */
		/* 821444A0h case    0:*/		regs.R12 = regs.LR;
		/* 821444A0h case    0:*/		return 0x821444A4;
		  /* 821444A4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821444A4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821444A4h case    1:*/		return 0x821444A8;
		  /* 821444A8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821444A8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821444A8h case    2:*/		return 0x821444AC;
		  /* 821444ACh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 821444ACh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821444ACh case    3:*/		return 0x821444B0;
		  /* 821444B0h */ case    4:  		/* mr R31, R3 */
		/* 821444B0h case    4:*/		regs.R31 = regs.R3;
		/* 821444B0h case    4:*/		return 0x821444B4;
		  /* 821444B4h */ case    5:  		/* li R3, 20 */
		/* 821444B4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 821444B4h case    5:*/		return 0x821444B8;
		  /* 821444B8h */ case    6:  		/* bl -504464 */
		/* 821444B8h case    6:*/		regs.LR = 0x821444BC; return 0x820C9228;
		/* 821444B8h case    6:*/		return 0x821444BC;
		  /* 821444BCh */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 821444BCh case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821444BCh case    7:*/		return 0x821444C0;
		  /* 821444C0h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821444C0h case    8:*/		if ( regs.CR[0].eq ) { return 0x821444D0;  }
		/* 821444C0h case    8:*/		return 0x821444C4;
		  /* 821444C4h */ case    9:  		/* lwz R4, <#[R31 + 16]> */
		/* 821444C4h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821444C4h case    9:*/		return 0x821444C8;
		  /* 821444C8h */ case   10:  		/* bl -120 */
		/* 821444C8h case   10:*/		regs.LR = 0x821444CC; return 0x82144450;
		/* 821444C8h case   10:*/		return 0x821444CC;
		  /* 821444CCh */ case   11:  		/* b 8 */
		/* 821444CCh case   11:*/		return 0x821444D4;
		/* 821444CCh case   11:*/		return 0x821444D0;
	}
	return 0x821444D0;
} // Block from 821444A0h-821444D0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821444D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821444D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821444D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821444D0);
		  /* 821444D0h */ case    0:  		/* li R3, 0 */
		/* 821444D0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821444D0h case    0:*/		return 0x821444D4;
	}
	return 0x821444D4;
} // Block from 821444D0h-821444D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821444D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821444D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821444D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821444D4);
		  /* 821444D4h */ case    0:  		/* addi R1, R1, 96 */
		/* 821444D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821444D4h case    0:*/		return 0x821444D8;
		  /* 821444D8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821444D8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821444D8h case    1:*/		return 0x821444DC;
		  /* 821444DCh */ case    2:  		/* mtspr LR, R12 */
		/* 821444DCh case    2:*/		regs.LR = regs.R12;
		/* 821444DCh case    2:*/		return 0x821444E0;
		  /* 821444E0h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 821444E0h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821444E0h case    3:*/		return 0x821444E4;
		  /* 821444E4h */ case    4:  		/* bclr 20, CR0_LT */
		/* 821444E4h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821444E4h case    4:*/		return 0x821444E8;
	}
	return 0x821444E8;
} // Block from 821444D4h-821444E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821444E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821444E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821444E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821444E8);
		  /* 821444E8h */ case    0:  		/* lis R11, -32253 */
		/* 821444E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821444E8h case    0:*/		return 0x821444EC;
		  /* 821444ECh */ case    1:  		/* addi R11, R11, 24908 */
		/* 821444ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x614C);
		/* 821444ECh case    1:*/		return 0x821444F0;
		  /* 821444F0h */ case    2:  		/* stw R11, <#[R3]> */
		/* 821444F0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821444F0h case    2:*/		return 0x821444F4;
		  /* 821444F4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 821444F4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821444F4h case    3:*/		return 0x821444F8;
	}
	return 0x821444F8;
} // Block from 821444E8h-821444F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821444F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821444F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821444F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821444F8);
		  /* 821444F8h */ case    0:  		/* lis R11, -32253 */
		/* 821444F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821444F8h case    0:*/		return 0x821444FC;
		  /* 821444FCh */ case    1:  		/* addi R11, R11, 24924 */
		/* 821444FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x615C);
		/* 821444FCh case    1:*/		return 0x82144500;
		  /* 82144500h */ case    2:  		/* stw R11, <#[R3]> */
		/* 82144500h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82144500h case    2:*/		return 0x82144504;
		  /* 82144504h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82144504h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82144504h case    3:*/		return 0x82144508;
	}
	return 0x82144508;
} // Block from 821444F8h-82144508h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144508);
		  /* 82144508h */ case    0:  		/* lis R11, -32253 */
		/* 82144508h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82144508h case    0:*/		return 0x8214450C;
		  /* 8214450Ch */ case    1:  		/* addi R11, R11, 24940 */
		/* 8214450Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x616C);
		/* 8214450Ch case    1:*/		return 0x82144510;
		  /* 82144510h */ case    2:  		/* stw R11, <#[R3]> */
		/* 82144510h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82144510h case    2:*/		return 0x82144514;
		  /* 82144514h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82144514h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82144514h case    3:*/		return 0x82144518;
	}
	return 0x82144518;
} // Block from 82144508h-82144518h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144518h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144518);
		  /* 82144518h */ case    0:  		/* mr R11, R3 */
		/* 82144518h case    0:*/		regs.R11 = regs.R3;
		/* 82144518h case    0:*/		return 0x8214451C;
		  /* 8214451Ch */ case    1:  		/* cmplwi CR6, R7, 4 */
		/* 8214451Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000004);
		/* 8214451Ch case    1:*/		return 0x82144520;
		  /* 82144520h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 82144520h case    2:*/		if ( !regs.CR[6].gt ) { return 0x82144528;  }
		/* 82144520h case    2:*/		return 0x82144524;
		  /* 82144524h */ case    3:  		/* li R7, 4 */
		/* 82144524h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 82144524h case    3:*/		return 0x82144528;
	}
	return 0x82144528;
} // Block from 82144518h-82144528h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144528);
		  /* 82144528h */ case    0:  		/* li R9, 0 */
		/* 82144528h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82144528h case    0:*/		return 0x8214452C;
		  /* 8214452Ch */ case    1:  		/* stw R4, <#[R11]> */
		/* 8214452Ch case    1:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 8214452Ch case    1:*/		return 0x82144530;
		  /* 82144530h */ case    2:  		/* li R10, -1 */
		/* 82144530h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82144530h case    2:*/		return 0x82144534;
		  /* 82144534h */ case    3:  		/* stw R5, <#[R11 + 4]> */
		/* 82144534h case    3:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 82144534h case    3:*/		return 0x82144538;
		  /* 82144538h */ case    4:  		/* stw R6, <#[R11 + 8]> */
		/* 82144538h case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 82144538h case    4:*/		return 0x8214453C;
		  /* 8214453Ch */ case    5:  		/* li R3, 0 */
		/* 8214453Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214453Ch case    5:*/		return 0x82144540;
		  /* 82144540h */ case    6:  		/* stw R7, <#[R11 + 12]> */
		/* 82144540h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x0000000C) );
		/* 82144540h case    6:*/		return 0x82144544;
		  /* 82144544h */ case    7:  		/* stw R9, <#[R11 + 16]> */
		/* 82144544h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 82144544h case    7:*/		return 0x82144548;
		  /* 82144548h */ case    8:  		/* stw R9, <#[R11 + 20]> */
		/* 82144548h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 82144548h case    8:*/		return 0x8214454C;
		  /* 8214454Ch */ case    9:  		/* stw R10, <#[R11 + 24]> */
		/* 8214454Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8214454Ch case    9:*/		return 0x82144550;
		  /* 82144550h */ case   10:  		/* stw R9, <#[R11 + 28]> */
		/* 82144550h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000001C) );
		/* 82144550h case   10:*/		return 0x82144554;
		  /* 82144554h */ case   11:  		/* stw R9, <#[R11 + 32]> */
		/* 82144554h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000020) );
		/* 82144554h case   11:*/		return 0x82144558;
		  /* 82144558h */ case   12:  		/* stw R10, <#[R11 + 36]> */
		/* 82144558h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 82144558h case   12:*/		return 0x8214455C;
		  /* 8214455Ch */ case   13:  		/* stw R10, <#[R11 + 40]> */
		/* 8214455Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 8214455Ch case   13:*/		return 0x82144560;
		  /* 82144560h */ case   14:  		/* stw R9, <#[R11 + 44]> */
		/* 82144560h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000002C) );
		/* 82144560h case   14:*/		return 0x82144564;
		  /* 82144564h */ case   15:  		/* stw R9, <#[R11 + 48]> */
		/* 82144564h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 82144564h case   15:*/		return 0x82144568;
		  /* 82144568h */ case   16:  		/* bclr 20, CR0_LT */
		/* 82144568h case   16:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82144568h case   16:*/		return 0x8214456C;
	}
	return 0x8214456C;
} // Block from 82144528h-8214456Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214456Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214456C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214456C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214456C);
		  /* 8214456Ch */ case    0:  		/* nop */
		/* 8214456Ch case    0:*/		cpu::op::nop();
		/* 8214456Ch case    0:*/		return 0x82144570;
	}
	return 0x82144570;
} // Block from 8214456Ch-82144570h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82144570h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144570);
		  /* 82144570h */ case    0:  		/* mr R11, R3 */
		/* 82144570h case    0:*/		regs.R11 = regs.R3;
		/* 82144570h case    0:*/		return 0x82144574;
		  /* 82144574h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 82144574h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82144574h case    1:*/		return 0x82144578;
		  /* 82144578h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 82144578h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82144588;  }
		/* 82144578h case    2:*/		return 0x8214457C;
		  /* 8214457Ch */ case    3:  		/* lis R3, -32768 */
		/* 8214457Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8214457Ch case    3:*/		return 0x82144580;
		  /* 82144580h */ case    4:  		/* ori R3, R3, 16389 */
		/* 82144580h case    4:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82144580h case    4:*/		return 0x82144584;
		  /* 82144584h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82144584h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82144584h case    5:*/		return 0x82144588;
	}
	return 0x82144588;
} // Block from 82144570h-82144588h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82144588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144588);
		  /* 82144588h */ case    0:  		/* lwz R10, <#[R4]> */
		/* 82144588h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82144588h case    0:*/		return 0x8214458C;
		  /* 8214458Ch */ case    1:  		/* li R3, 0 */
		/* 8214458Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214458Ch case    1:*/		return 0x82144590;
		  /* 82144590h */ case    2:  		/* stw R10, <#[R11]> */
		/* 82144590h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82144590h case    2:*/		return 0x82144594;
		  /* 82144594h */ case    3:  		/* lwz R10, <#[R4 + 4]> */
		/* 82144594h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 82144594h case    3:*/		return 0x82144598;
		  /* 82144598h */ case    4:  		/* stw R10, <#[R11 + 4]> */
		/* 82144598h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82144598h case    4:*/		return 0x8214459C;
		  /* 8214459Ch */ case    5:  		/* lwz R10, <#[R4 + 8]> */
		/* 8214459Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 8214459Ch case    5:*/		return 0x821445A0;
		  /* 821445A0h */ case    6:  		/* stw R10, <#[R11 + 8]> */
		/* 821445A0h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821445A0h case    6:*/		return 0x821445A4;
		  /* 821445A4h */ case    7:  		/* lwz R10, <#[R4 + 12]> */
		/* 821445A4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000000C) );
		/* 821445A4h case    7:*/		return 0x821445A8;
		  /* 821445A8h */ case    8:  		/* stw R10, <#[R11 + 12]> */
		/* 821445A8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821445A8h case    8:*/		return 0x821445AC;
		  /* 821445ACh */ case    9:  		/* lwz R10, <#[R4 + 16]> */
		/* 821445ACh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 821445ACh case    9:*/		return 0x821445B0;
		  /* 821445B0h */ case   10:  		/* stw R10, <#[R11 + 16]> */
		/* 821445B0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821445B0h case   10:*/		return 0x821445B4;
		  /* 821445B4h */ case   11:  		/* lwz R10, <#[R4 + 20]> */
		/* 821445B4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000014) );
		/* 821445B4h case   11:*/		return 0x821445B8;
		  /* 821445B8h */ case   12:  		/* stw R10, <#[R11 + 20]> */
		/* 821445B8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821445B8h case   12:*/		return 0x821445BC;
		  /* 821445BCh */ case   13:  		/* lwz R10, <#[R4 + 24]> */
		/* 821445BCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000018) );
		/* 821445BCh case   13:*/		return 0x821445C0;
		  /* 821445C0h */ case   14:  		/* stw R10, <#[R11 + 24]> */
		/* 821445C0h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 821445C0h case   14:*/		return 0x821445C4;
		  /* 821445C4h */ case   15:  		/* lwz R10, <#[R4 + 28]> */
		/* 821445C4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000001C) );
		/* 821445C4h case   15:*/		return 0x821445C8;
		  /* 821445C8h */ case   16:  		/* stw R10, <#[R11 + 28]> */
		/* 821445C8h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821445C8h case   16:*/		return 0x821445CC;
		  /* 821445CCh */ case   17:  		/* lwz R10, <#[R4 + 32]> */
		/* 821445CCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000020) );
		/* 821445CCh case   17:*/		return 0x821445D0;
		  /* 821445D0h */ case   18:  		/* stw R10, <#[R11 + 32]> */
		/* 821445D0h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 821445D0h case   18:*/		return 0x821445D4;
		  /* 821445D4h */ case   19:  		/* lwz R10, <#[R4 + 36]> */
		/* 821445D4h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000024) );
		/* 821445D4h case   19:*/		return 0x821445D8;
		  /* 821445D8h */ case   20:  		/* stw R10, <#[R11 + 36]> */
		/* 821445D8h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821445D8h case   20:*/		return 0x821445DC;
		  /* 821445DCh */ case   21:  		/* lwz R10, <#[R4 + 40]> */
		/* 821445DCh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000028) );
		/* 821445DCh case   21:*/		return 0x821445E0;
		  /* 821445E0h */ case   22:  		/* stw R10, <#[R11 + 40]> */
		/* 821445E0h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 821445E0h case   22:*/		return 0x821445E4;
		  /* 821445E4h */ case   23:  		/* lwz R10, <#[R4 + 44]> */
		/* 821445E4h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000002C) );
		/* 821445E4h case   23:*/		return 0x821445E8;
		  /* 821445E8h */ case   24:  		/* stw R10, <#[R11 + 44]> */
		/* 821445E8h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 821445E8h case   24:*/		return 0x821445EC;
		  /* 821445ECh */ case   25:  		/* lwz R10, <#[R4 + 48]> */
		/* 821445ECh case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000030) );
		/* 821445ECh case   25:*/		return 0x821445F0;
		  /* 821445F0h */ case   26:  		/* stw R10, <#[R11 + 48]> */
		/* 821445F0h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821445F0h case   26:*/		return 0x821445F4;
		  /* 821445F4h */ case   27:  		/* bclr 20, CR0_LT */
		/* 821445F4h case   27:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821445F4h case   27:*/		return 0x821445F8;
	}
	return 0x821445F8;
} // Block from 82144588h-821445F8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821445F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821445F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821445F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821445F8);
		  /* 821445F8h */ case    0:  		/* lwz R11, <#[R3 + 4]> */
		/* 821445F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821445F8h case    0:*/		return 0x821445FC;
		  /* 821445FCh */ case    1:  		/* rlwinm R10, R5, 2, 0, 29 */
		/* 821445FCh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R5);
		/* 821445FCh case    1:*/		return 0x82144600;
		  /* 82144600h */ case    2:  		/* lwz R11, <#[R11 + 20]> */
		/* 82144600h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82144600h case    2:*/		return 0x82144604;
		  /* 82144604h */ case    3:  		/* lwzx R8, <#[R10 + R11]> */
		/* 82144604h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82144604h case    3:*/		return 0x82144608;
		  /* 82144608h */ case    4:  		/* lwz R11, <#[R8 + 56]> */
		/* 82144608h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000038) );
		/* 82144608h case    4:*/		return 0x8214460C;
		  /* 8214460Ch */ case    5:  		/* cmpwi CR6, R11, -1 */
		/* 8214460Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8214460Ch case    5:*/		return 0x82144610;
		  /* 82144610h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 82144610h case    6:*/		if ( regs.CR[6].eq ) { return 0x8214461C;  }
		/* 82144610h case    6:*/		return 0x82144614;
		  /* 82144614h */ case    7:  		/* mr R5, R11 */
		/* 82144614h case    7:*/		regs.R5 = regs.R11;
		/* 82144614h case    7:*/		return 0x82144618;
		  /* 82144618h */ case    8:  		/* b -32 */
		/* 82144618h case    8:*/		return 0x821445F8;
		/* 82144618h case    8:*/		return 0x8214461C;
	}
	return 0x8214461C;
} // Block from 821445F8h-8214461Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214461Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214461C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214461C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214461C);
		  /* 8214461Ch */ case    0:  		/* li R11, -1 */
		/* 8214461Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8214461Ch case    0:*/		return 0x82144620;
		  /* 82144620h */ case    1:  		/* stw R4, <#[R8 + 116]> */
		/* 82144620h case    1:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R8 + 0x00000074) );
		/* 82144620h case    1:*/		return 0x82144624;
		  /* 82144624h */ case    2:  		/* lwz R10, <#[R8 + 4]> */
		/* 82144624h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000004) );
		/* 82144624h case    2:*/		return 0x82144628;
		  /* 82144628h */ case    3:  		/* stw R11, <#[R8 + 48]> */
		/* 82144628h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000030) );
		/* 82144628h case    3:*/		return 0x8214462C;
		  /* 8214462Ch */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 8214462Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8214462Ch case    4:*/		return 0x82144630;
		  /* 82144630h */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82144630h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82144630h case    5:*/		return 0x82144634;
		  /* 82144634h */ case    6:  		/* lwz R11, <#[R11 + 16]> */
		/* 82144634h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82144634h case    6:*/		return 0x82144638;
		  /* 82144638h */ case    7:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82144638h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82144638h case    7:*/		return 0x8214463C;
		  /* 8214463Ch */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 8214463Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8214463Ch case    8:*/		return 0x82144640;
		  /* 82144640h */ case    9:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82144640h case    9:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82144640h case    9:*/		return 0x82144644;
		  /* 82144644h */ case   10:  		/* bc 4, CR0_EQ, 68 */
		/* 82144644h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82144688;  }
		/* 82144644h case   10:*/		return 0x82144648;
		  /* 82144648h */ case   11:  		/* lwz R9, <#[R3 + 16]> */
		/* 82144648h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 82144648h case   11:*/		return 0x8214464C;
		  /* 8214464Ch */ case   12:  		/* cmplwi CR6, R9, 0 */
		/* 8214464Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8214464Ch case   12:*/		return 0x82144650;
		  /* 82144650h */ case   13:  		/* bc 12, CR6_EQ, 36 */
		/* 82144650h case   13:*/		if ( regs.CR[6].eq ) { return 0x82144674;  }
		/* 82144650h case   13:*/		return 0x82144654;
		  /* 82144654h */ case   14:  		/* lwz R11, <#[R3 + 12]> */
		/* 82144654h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82144654h case   14:*/		return 0x82144658;
		  /* 82144658h */ case   15:  		/* rlwinm R10, R4, 2, 0, 29 */
		/* 82144658h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R4);
		/* 82144658h case   15:*/		return 0x8214465C;
		  /* 8214465Ch */ case   16:  		/* lwz R7, <#[R3 + 8]> */
		/* 8214465Ch case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000008) );
		/* 8214465Ch case   16:*/		return 0x82144660;
		  /* 82144660h */ case   17:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82144660h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82144660h case   17:*/		return 0x82144664;
		  /* 82144664h */ case   18:  		/* lwzx R10, <#[R7 + R10]> */
		/* 82144664h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 82144664h case   18:*/		return 0x82144668;
		  /* 82144668h */ case   19:  		/* add R11, R11, R10 */
		/* 82144668h case   19:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82144668h case   19:*/		return 0x8214466C;
		  /* 8214466Ch */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8214466Ch case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8214466Ch case   20:*/		return 0x82144670;
		  /* 82144670h */ case   21:  		/* stwx R5, <#[R11 + R9]> */
		/* 82144670h case   21:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82144670h case   21:*/		return 0x82144674;
	}
	return 0x82144674;
} // Block from 8214461Ch-82144674h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82144674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144674);
		  /* 82144674h */ case    0:  		/* lwz R10, <#[R3 + 8]> */
		/* 82144674h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82144674h case    0:*/		return 0x82144678;
		  /* 82144678h */ case    1:  		/* rlwinm R11, R4, 2, 0, 29 */
		/* 82144678h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R4);
		/* 82144678h case    1:*/		return 0x8214467C;
		  /* 8214467Ch */ case    2:  		/* lwzx R9, <#[R11 + R10]> */
		/* 8214467Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8214467Ch case    2:*/		return 0x82144680;
		  /* 82144680h */ case    3:  		/* addi R9, R9, 1 */
		/* 82144680h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82144680h case    3:*/		return 0x82144684;
		  /* 82144684h */ case    4:  		/* stwx R9, <#[R11 + R10]> */
		/* 82144684h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82144684h case    4:*/		return 0x82144688;
	}
	return 0x82144688;
} // Block from 82144674h-82144688h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82144688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144688);
		  /* 82144688h */ case    0:  		/* lwz R5, <#[R8 + 8]> */
		/* 82144688h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000008) );
		/* 82144688h case    0:*/		return 0x8214468C;
		  /* 8214468Ch */ case    1:  		/* cmpwi CR6, R5, -1 */
		/* 8214468Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R5,0xFFFFFFFF);
		/* 8214468Ch case    1:*/		return 0x82144690;
		  /* 82144690h */ case    2:  		/* bc 4, CR6_EQ, -152 */
		/* 82144690h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821445F8;  }
		/* 82144690h case    2:*/		return 0x82144694;
		  /* 82144694h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82144694h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82144694h case    3:*/		return 0x82144698;
	}
	return 0x82144698;
} // Block from 82144688h-82144698h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144698);
		  /* 82144698h */ case    0:  		/* lwz R11, <#[R3 + 4]> */
		/* 82144698h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82144698h case    0:*/		return 0x8214469C;
		  /* 8214469Ch */ case    1:  		/* rlwinm R10, R5, 2, 0, 29 */
		/* 8214469Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R5);
		/* 8214469Ch case    1:*/		return 0x821446A0;
		  /* 821446A0h */ case    2:  		/* lwz R9, <#[R11 + 20]> */
		/* 821446A0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 821446A0h case    2:*/		return 0x821446A4;
		  /* 821446A4h */ case    3:  		/* lwz R11, <#[R11 + 16]> */
		/* 821446A4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821446A4h case    3:*/		return 0x821446A8;
		  /* 821446A8h */ case    4:  		/* lwzx R8, <#[R9 + R10]> */
		/* 821446A8h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821446A8h case    4:*/		return 0x821446AC;
		  /* 821446ACh */ case    5:  		/* lwz R10, <#[R8 + 4]> */
		/* 821446ACh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000004) );
		/* 821446ACh case    5:*/		return 0x821446B0;
		  /* 821446B0h */ case    6:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821446B0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821446B0h case    6:*/		return 0x821446B4;
		  /* 821446B4h */ case    7:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821446B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821446B4h case    7:*/		return 0x821446B8;
	}
	return 0x821446B8;
} // Block from 82144698h-821446B8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821446B8h
// Function '?IndexSemantic@CFXLProgram@D3DXShader@@UAAJPAVCArgument@2@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821446B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821446B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821446B8);
		  /* 821446B8h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 821446B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821446B8h case    0:*/		return 0x821446BC;
		  /* 821446BCh */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 821446BCh case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 821446BCh case    1:*/		return 0x821446C0;
		  /* 821446C0h */ case    2:  		/* bc 4, CR0_EQ, 80 */
		/* 821446C0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82144710;  }
		/* 821446C0h case    2:*/		return 0x821446C4;
		  /* 821446C4h */ case    3:  		/* lwz R11, <#[R8 + 92]> */
		/* 821446C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000005C) );
		/* 821446C4h case    3:*/		return 0x821446C8;
		  /* 821446C8h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821446C8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821446C8h case    4:*/		return 0x821446CC;
		  /* 821446CCh */ case    5:  		/* bc 12, CR6_EQ, 68 */
		/* 821446CCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82144710;  }
		/* 821446CCh case    5:*/		return 0x821446D0;
		  /* 821446D0h */ case    6:  		/* lwz R9, <#[R3 + 36]> */
		/* 821446D0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000024) );
		/* 821446D0h case    6:*/		return 0x821446D4;
		  /* 821446D4h */ case    7:  		/* cmplwi CR6, R9, 0 */
		/* 821446D4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821446D4h case    7:*/		return 0x821446D8;
		  /* 821446D8h */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 821446D8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821446FC;  }
		/* 821446D8h case    8:*/		return 0x821446DC;
		  /* 821446DCh */ case    9:  		/* lwz R11, <#[R3 + 32]> */
		/* 821446DCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 821446DCh case    9:*/		return 0x821446E0;
		  /* 821446E0h */ case   10:  		/* rlwinm R7, R4, 2, 0, 29 */
		/* 821446E0h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R4);
		/* 821446E0h case   10:*/		return 0x821446E4;
		  /* 821446E4h */ case   11:  		/* lwz R6, <#[R3 + 28]> */
		/* 821446E4h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x0000001C) );
		/* 821446E4h case   11:*/		return 0x821446E8;
		  /* 821446E8h */ case   12:  		/* lwzx R10, <#[R11 + R7]> */
		/* 821446E8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 821446E8h case   12:*/		return 0x821446EC;
		  /* 821446ECh */ case   13:  		/* lwzx R11, <#[R6 + R7]> */
		/* 821446ECh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 821446ECh case   13:*/		return 0x821446F0;
		  /* 821446F0h */ case   14:  		/* add R11, R10, R11 */
		/* 821446F0h case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821446F0h case   14:*/		return 0x821446F4;
		  /* 821446F4h */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821446F4h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821446F4h case   15:*/		return 0x821446F8;
		  /* 821446F8h */ case   16:  		/* stwx R5, <#[R11 + R9]> */
		/* 821446F8h case   16:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821446F8h case   16:*/		return 0x821446FC;
	}
	return 0x821446FC;
} // Block from 821446B8h-821446FCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821446FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821446FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821446FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821446FC);
		  /* 821446FCh */ case    0:  		/* lwz R10, <#[R3 + 28]> */
		/* 821446FCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 821446FCh case    0:*/		return 0x82144700;
		  /* 82144700h */ case    1:  		/* rlwinm R11, R4, 2, 0, 29 */
		/* 82144700h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R4);
		/* 82144700h case    1:*/		return 0x82144704;
		  /* 82144704h */ case    2:  		/* lwzx R9, <#[R11 + R10]> */
		/* 82144704h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82144704h case    2:*/		return 0x82144708;
		  /* 82144708h */ case    3:  		/* addi R9, R9, 1 */
		/* 82144708h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82144708h case    3:*/		return 0x8214470C;
		  /* 8214470Ch */ case    4:  		/* stwx R9, <#[R11 + R10]> */
		/* 8214470Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8214470Ch case    4:*/		return 0x82144710;
	}
	return 0x82144710;
} // Block from 821446FCh-82144710h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82144710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144710);
		  /* 82144710h */ case    0:  		/* lwz R5, <#[R8 + 20]> */
		/* 82144710h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000014) );
		/* 82144710h case    0:*/		return 0x82144714;
		  /* 82144714h */ case    1:  		/* cmpwi CR6, R5, -1 */
		/* 82144714h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R5,0xFFFFFFFF);
		/* 82144714h case    1:*/		return 0x82144718;
		  /* 82144718h */ case    2:  		/* bclr 12, CR6_EQ */
		/* 82144718h case    2:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82144718h case    2:*/		return 0x8214471C;
	}
	return 0x8214471C;
} // Block from 82144710h-8214471Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214471Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214471C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214471C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214471C);
		  /* 8214471Ch */ case    0:  		/* b -292 */
		/* 8214471Ch case    0:*/		return 0x821445F8;
		/* 8214471Ch case    0:*/		return 0x82144720;
		  /* 82144720h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82144720h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82144720h case    1:*/		return 0x82144724;
	}
	return 0x82144724;
} // Block from 8214471Ch-82144724h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82144724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144724);
		  /* 82144724h */ case    0:  		/* nop */
		/* 82144724h case    0:*/		cpu::op::nop();
		/* 82144724h case    0:*/		return 0x82144728;
		  /* 82144728h */ case    1:  		/* lwz R11, <#[R5 + 60]> */
		/* 82144728h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x0000003C) );
		/* 82144728h case    1:*/		return 0x8214472C;
		  /* 8214472Ch */ case    2:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 8214472Ch case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 8214472Ch case    2:*/		return 0x82144730;
		  /* 82144730h */ case    3:  		/* rlwinm R8, R4, 2, 0, 29 */
		/* 82144730h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R4);
		/* 82144730h case    3:*/		return 0x82144734;
		  /* 82144734h */ case    4:  		/* lwz R7, <#[R5 + 44]> */
		/* 82144734h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + 0x0000002C) );
		/* 82144734h case    4:*/		return 0x82144738;
		  /* 82144738h */ case    5:  		/* lwzx R9, <#[R10 + R11]> */
		/* 82144738h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82144738h case    5:*/		return 0x8214473C;
		  /* 8214473Ch */ case    6:  		/* lwzx R8, <#[R8 + R11]> */
		/* 8214473Ch case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8214473Ch case    6:*/		return 0x82144740;
		  /* 82144740h */ case    7:  		/* rlwinm R11, R9, 2, 0, 29 */
		/* 82144740h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R9);
		/* 82144740h case    7:*/		return 0x82144744;
		  /* 82144744h */ case    8:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 82144744h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 82144744h case    8:*/		return 0x82144748;
		  /* 82144748h */ case    9:  		/* lwzx R6, <#[R7 + R11]> */
		/* 82144748h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82144748h case    9:*/		return 0x8214474C;
		  /* 8214474Ch */ case   10:  		/* lwzx R7, <#[R7 + R10]> */
		/* 8214474Ch case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 8214474Ch case   10:*/		return 0x82144750;
		  /* 82144750h */ case   11:  		/* cmplw CR6, R6, R7 */
		/* 82144750h case   11:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 82144750h case   11:*/		return 0x82144754;
		  /* 82144754h */ case   12:  		/* bc 4, CR6_GT, 12 */
		/* 82144754h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82144760;  }
		/* 82144754h case   12:*/		return 0x82144758;
		  /* 82144758h */ case   13:  		/* li R3, -1 */
		/* 82144758h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82144758h case   13:*/		return 0x8214475C;
		  /* 8214475Ch */ case   14:  		/* bclr 20, CR0_LT */
		/* 8214475Ch case   14:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214475Ch case   14:*/		return 0x82144760;
	}
	return 0x82144760;
} // Block from 82144724h-82144760h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82144760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144760);
		  /* 82144760h */ case    0:  		/* lwz R7, <#[R5 + 44]> */
		/* 82144760h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + 0x0000002C) );
		/* 82144760h case    0:*/		return 0x82144764;
		  /* 82144764h */ case    1:  		/* lwzx R11, <#[R7 + R11]> */
		/* 82144764h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82144764h case    1:*/		return 0x82144768;
		  /* 82144768h */ case    2:  		/* lwzx R10, <#[R7 + R10]> */
		/* 82144768h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 82144768h case    2:*/		return 0x8214476C;
		  /* 8214476Ch */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 8214476Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214476Ch case    3:*/		return 0x82144770;
		  /* 82144770h */ case    4:  		/* bc 4, CR6_LT, 12 */
		/* 82144770h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8214477C;  }
		/* 82144770h case    4:*/		return 0x82144774;
		  /* 82144774h */ case    5:  		/* li R3, 1 */
		/* 82144774h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82144774h case    5:*/		return 0x82144778;
		  /* 82144778h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82144778h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82144778h case    6:*/		return 0x8214477C;
	}
	return 0x8214477C;
} // Block from 82144760h-8214477Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214477Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214477C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214477C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214477C);
		  /* 8214477Ch */ case    0:  		/* cmplw CR6, R9, R8 */
		/* 8214477Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 8214477Ch case    0:*/		return 0x82144780;
		  /* 82144780h */ case    1:  		/* bc 12, CR6_LT, -40 */
		/* 82144780h case    1:*/		if ( regs.CR[6].lt ) { return 0x82144758;  }
		/* 82144780h case    1:*/		return 0x82144784;
		  /* 82144784h */ case    2:  		/* subfc R11, R9, R8 */
		/* 82144784h case    2:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R9,regs.R8);
		/* 82144784h case    2:*/		return 0x82144788;
		  /* 82144788h */ case    3:  		/* subfe R11, R11, R11 */
		/* 82144788h case    3:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82144788h case    3:*/		return 0x8214478C;
		  /* 8214478Ch */ case    4:  		/* rlwinm R3, R11, 0, 31, 31 */
		/* 8214478Ch case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R3,regs.R11);
		/* 8214478Ch case    4:*/		return 0x82144790;
		  /* 82144790h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82144790h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82144790h case    5:*/		return 0x82144794;
	}
	return 0x82144794;
} // Block from 8214477Ch-82144794h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82144794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144794);
		  /* 82144794h */ case    0:  		/* nop */
		/* 82144794h case    0:*/		cpu::op::nop();
		/* 82144794h case    0:*/		return 0x82144798;
	}
	return 0x82144798;
} // Block from 82144794h-82144798h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82144798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144798);
		  /* 82144798h */ case    0:  		/* mfspr R12, LR */
		/* 82144798h case    0:*/		regs.R12 = regs.LR;
		/* 82144798h case    0:*/		return 0x8214479C;
		  /* 8214479Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214479Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214479Ch case    1:*/		return 0x821447A0;
		  /* 821447A0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821447A0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821447A0h case    2:*/		return 0x821447A4;
		  /* 821447A4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821447A4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821447A4h case    3:*/		return 0x821447A8;
		  /* 821447A8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821447A8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821447A8h case    4:*/		return 0x821447AC;
		  /* 821447ACh */ case    5:  		/* mr R30, R5 */
		/* 821447ACh case    5:*/		regs.R30 = regs.R5;
		/* 821447ACh case    5:*/		return 0x821447B0;
		  /* 821447B0h */ case    6:  		/* lwz R5, <#[R5]> */
		/* 821447B0h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000000) );
		/* 821447B0h case    6:*/		return 0x821447B4;
		  /* 821447B4h */ case    7:  		/* mr R31, R4 */
		/* 821447B4h case    7:*/		regs.R31 = regs.R4;
		/* 821447B4h case    7:*/		return 0x821447B8;
		  /* 821447B8h */ case    8:  		/* cmplwi CR6, R5, 1 */
		/* 821447B8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000001);
		/* 821447B8h case    8:*/		return 0x821447BC;
		  /* 821447BCh */ case    9:  		/* bc 4, CR6_GT, 96 */
		/* 821447BCh case    9:*/		if ( !regs.CR[6].gt ) { return 0x8214481C;  }
		/* 821447BCh case    9:*/		return 0x821447C0;
		  /* 821447C0h */ case   10:  		/* lis R11, -32240 */
		/* 821447C0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8210);
		/* 821447C0h case   10:*/		return 0x821447C4;
		  /* 821447C4h */ case   11:  		/* li R6, 0 */
		/* 821447C4h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821447C4h case   11:*/		return 0x821447C8;
		  /* 821447C8h */ case   12:  		/* addi R3, R11, -9712 */
		/* 821447C8h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFFDA10);
		/* 821447C8h case   12:*/		return 0x821447CC;
		  /* 821447CCh */ case   13:  		/* bl -289068 */
		/* 821447CCh case   13:*/		regs.LR = 0x821447D0; return 0x820FDEA0;
		/* 821447CCh case   13:*/		return 0x821447D0;
		  /* 821447D0h */ case   14:  		/* lwz R11, <#[R30]> */
		/* 821447D0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821447D0h case   14:*/		return 0x821447D4;
		  /* 821447D4h */ case   15:  		/* li R7, 1 */
		/* 821447D4h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821447D4h case   15:*/		return 0x821447D8;
		  /* 821447D8h */ case   16:  		/* li R9, 1 */
		/* 821447D8h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821447D8h case   16:*/		return 0x821447DC;
		  /* 821447DCh */ case   17:  		/* cmplwi CR6, R11, 1 */
		/* 821447DCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821447DCh case   17:*/		return 0x821447E0;
		  /* 821447E0h */ case   18:  		/* bc 4, CR6_GT, 56 */
		/* 821447E0h case   18:*/		if ( !regs.CR[6].gt ) { return 0x82144818;  }
		/* 821447E0h case   18:*/		return 0x821447E4;
		  /* 821447E4h */ case   19:  		/* addi R11, R31, 4 */
		/* 821447E4h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 821447E4h case   19:*/		return 0x821447E8;
		  /* 821447E8h */ case   20:  		/* addi R8, R11, -4 */
		/* 821447E8h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFC);
		/* 821447E8h case   20:*/		return 0x821447EC;
		  /* 821447ECh */ case   21:  		/* lwz R10, <#[R11]> */
		/* 821447ECh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821447ECh case   21:*/		return 0x821447F0;
		  /* 821447F0h */ case   22:  		/* lwz R6, <#[R11 - 4]> */
		/* 821447F0h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821447F0h case   22:*/		return 0x821447F4;
		  /* 821447F4h */ case   23:  		/* cmplw CR6, R10, R6 */
		/* 821447F4h case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 821447F4h case   23:*/		return 0x821447F8;
		  /* 821447F8h */ case   24:  		/* bc 12, CR6_EQ, 12 */
		/* 821447F8h case   24:*/		if ( regs.CR[6].eq ) { return 0x82144804;  }
		/* 821447F8h case   24:*/		return 0x821447FC;
		  /* 821447FCh */ case   25:  		/* stwu R10, <#[R8 + 4]> */
		/* 821447FCh case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 821447FCh case   25:*/		return 0x82144800;
		  /* 82144800h */ case   26:  		/* addi R7, R7, 1 */
		/* 82144800h case   26:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82144800h case   26:*/		return 0x82144804;
	}
	return 0x82144804;
} // Block from 82144798h-82144804h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82144804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144804);
		  /* 82144804h */ case    0:  		/* lwz R10, <#[R30]> */
		/* 82144804h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82144804h case    0:*/		return 0x82144808;
		  /* 82144808h */ case    1:  		/* addi R9, R9, 1 */
		/* 82144808h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82144808h case    1:*/		return 0x8214480C;
		  /* 8214480Ch */ case    2:  		/* addi R11, R11, 4 */
		/* 8214480Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8214480Ch case    2:*/		return 0x82144810;
		  /* 82144810h */ case    3:  		/* cmplw CR6, R9, R10 */
		/* 82144810h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82144810h case    3:*/		return 0x82144814;
		  /* 82144814h */ case    4:  		/* bc 12, CR6_LT, -40 */
		/* 82144814h case    4:*/		if ( regs.CR[6].lt ) { return 0x821447EC;  }
		/* 82144814h case    4:*/		return 0x82144818;
	}
	return 0x82144818;
} // Block from 82144804h-82144818h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82144818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144818);
		  /* 82144818h */ case    0:  		/* stw R7, <#[R30]> */
		/* 82144818h case    0:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 82144818h case    0:*/		return 0x8214481C;
	}
	return 0x8214481C;
} // Block from 82144818h-8214481Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214481Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214481C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214481C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214481C);
		  /* 8214481Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8214481Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214481Ch case    0:*/		return 0x82144820;
		  /* 82144820h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82144820h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82144820h case    1:*/		return 0x82144824;
		  /* 82144824h */ case    2:  		/* mtspr LR, R12 */
		/* 82144824h case    2:*/		regs.LR = regs.R12;
		/* 82144824h case    2:*/		return 0x82144828;
		  /* 82144828h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82144828h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82144828h case    3:*/		return 0x8214482C;
		  /* 8214482Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8214482Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214482Ch case    4:*/		return 0x82144830;
		  /* 82144830h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82144830h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82144830h case    5:*/		return 0x82144834;
	}
	return 0x82144834;
} // Block from 8214481Ch-82144834h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82144834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144834);
		  /* 82144834h */ case    0:  		/* nop */
		/* 82144834h case    0:*/		cpu::op::nop();
		/* 82144834h case    0:*/		return 0x82144838;
	}
	return 0x82144838;
} // Block from 82144834h-82144838h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82144838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144838);
		  /* 82144838h */ case    0:  		/* mfspr R12, LR */
		/* 82144838h case    0:*/		regs.R12 = regs.LR;
		/* 82144838h case    0:*/		return 0x8214483C;
		  /* 8214483Ch */ case    1:  		/* bl -734696 */
		/* 8214483Ch case    1:*/		regs.LR = 0x82144840; return 0x82091254;
		/* 8214483Ch case    1:*/		return 0x82144840;
		  /* 82144840h */ case    2:  		/* lwz R11, <#[R3 + 56]> */
		/* 82144840h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 82144840h case    2:*/		return 0x82144844;
		  /* 82144844h */ case    3:  		/* li R6, 0 */
		/* 82144844h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82144844h case    3:*/		return 0x82144848;
		  /* 82144848h */ case    4:  		/* li R29, 0 */
		/* 82144848h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82144848h case    4:*/		return 0x8214484C;
		  /* 8214484Ch */ case    5:  		/* li R28, 0 */
		/* 8214484Ch case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8214484Ch case    5:*/		return 0x82144850;
		  /* 82144850h */ case    6:  		/* li R30, 0 */
		/* 82144850h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82144850h case    6:*/		return 0x82144854;
		  /* 82144854h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82144854h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82144854h case    7:*/		return 0x82144858;
		  /* 82144858h */ case    8:  		/* bc 4, CR6_GT, 304 */
		/* 82144858h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82144988;  }
		/* 82144858h case    8:*/		return 0x8214485C;
		  /* 8214485Ch */ case    9:  		/* li R31, 0 */
		/* 8214485Ch case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8214485Ch case    9:*/		return 0x82144860;
		  /* 82144860h */ case   10:  		/* lwz R11, <#[R3 + 60]> */
		/* 82144860h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000003C) );
		/* 82144860h case   10:*/		return 0x82144864;
		  /* 82144864h */ case   11:  		/* li R10, 0 */
		/* 82144864h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82144864h case   11:*/		return 0x82144868;
		  /* 82144868h */ case   12:  		/* lwz R9, <#[R3 + 4]> */
		/* 82144868h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 82144868h case   12:*/		return 0x8214486C;
		  /* 8214486Ch */ case   13:  		/* lwz R8, <#[R3 + 44]> */
		/* 8214486Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x0000002C) );
		/* 8214486Ch case   13:*/		return 0x82144870;
		  /* 82144870h */ case   14:  		/* lwzx R7, <#[R31 + R11]> */
		/* 82144870h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82144870h case   14:*/		return 0x82144874;
		  /* 82144874h */ case   15:  		/* lwz R9, <#[R9 + 24]> */
		/* 82144874h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000018) );
		/* 82144874h case   15:*/		return 0x82144878;
		  /* 82144878h */ case   16:  		/* rlwinm R11, R7, 2, 0, 29 */
		/* 82144878h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 82144878h case   16:*/		return 0x8214487C;
		  /* 8214487Ch */ case   17:  		/* lwzx R9, <#[R9 + R11]> */
		/* 8214487Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8214487Ch case   17:*/		return 0x82144880;
		  /* 82144880h */ case   18:  		/* stwx R6, <#[R11 + R8]> */
		/* 82144880h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82144880h case   18:*/		return 0x82144884;
		  /* 82144884h */ case   19:  		/* lwz R8, <#[R3 + 40]> */
		/* 82144884h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000028) );
		/* 82144884h case   19:*/		return 0x82144888;
		  /* 82144888h */ case   20:  		/* stwx R10, <#[R8 + R11]> */
		/* 82144888h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82144888h case   20:*/		return 0x8214488C;
		  /* 8214488Ch */ case   21:  		/* lwz R10, <#[R9]> */
		/* 8214488Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8214488Ch case   21:*/		return 0x82144890;
		  /* 82144890h */ case   22:  		/* rlwinm. R10, R10, 0, 0, 11 */
		/* 82144890h case   22:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R10,regs.R10);
		/* 82144890h case   22:*/		return 0x82144894;
		  /* 82144894h */ case   23:  		/* bc 12, CR0_EQ, 224 */
		/* 82144894h case   23:*/		if ( regs.CR[0].eq ) { return 0x82144974;  }
		/* 82144894h case   23:*/		return 0x82144898;
		  /* 82144898h */ case   24:  		/* lwz R10, <#[R3 + 12]> */
		/* 82144898h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82144898h case   24:*/		return 0x8214489C;
		  /* 8214489Ch */ case   25:  		/* lwz R8, <#[R3 + 8]> */
		/* 8214489Ch case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 8214489Ch case   25:*/		return 0x821448A0;
		  /* 821448A0h */ case   26:  		/* lwz R9, <#[R3 + 16]> */
		/* 821448A0h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 821448A0h case   26:*/		return 0x821448A4;
		  /* 821448A4h */ case   27:  		/* lwzx R27, <#[R10 + R11]> */
		/* 821448A4h case   27:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821448A4h case   27:*/		return 0x821448A8;
		  /* 821448A8h */ case   28:  		/* lwzx R10, <#[R8 + R11]> */
		/* 821448A8h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 821448A8h case   28:*/		return 0x821448AC;
		  /* 821448ACh */ case   29:  		/* rlwinm R8, R27, 2, 0, 29 */
		/* 821448ACh case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R27);
		/* 821448ACh case   29:*/		return 0x821448B0;
		  /* 821448B0h */ case   30:  		/* cmplwi CR6, R10, 0 */
		/* 821448B0h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821448B0h case   30:*/		return 0x821448B4;
		  /* 821448B4h */ case   31:  		/* add R9, R8, R9 */
		/* 821448B4h case   31:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821448B4h case   31:*/		return 0x821448B8;
		  /* 821448B8h */ case   32:  		/* bc 12, CR6_EQ, 64 */
		/* 821448B8h case   32:*/		if ( regs.CR[6].eq ) { return 0x821448F8;  }
		/* 821448B8h case   32:*/		return 0x821448BC;
		  /* 821448BCh */ case   33:  		/* mtspr CTR, R10 */
		/* 821448BCh case   33:*/		regs.CTR = regs.R10;
		/* 821448BCh case   33:*/		return 0x821448C0;
		  /* 821448C0h */ case   34:  		/* lwz R10, <#[R3 + 4]> */
		/* 821448C0h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821448C0h case   34:*/		return 0x821448C4;
		  /* 821448C4h */ case   35:  		/* lwz R8, <#[R9]> */
		/* 821448C4h case   35:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821448C4h case   35:*/		return 0x821448C8;
		  /* 821448C8h */ case   36:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821448C8h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821448C8h case   36:*/		return 0x821448CC;
		  /* 821448CCh */ case   37:  		/* lwz R10, <#[R10 + 20]> */
		/* 821448CCh case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 821448CCh case   37:*/		return 0x821448D0;
		  /* 821448D0h */ case   38:  		/* lwzx R10, <#[R10 + R8]> */
		/* 821448D0h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821448D0h case   38:*/		return 0x821448D4;
		  /* 821448D4h */ case   39:  		/* lwz R10, <#[R10 + 88]> */
		/* 821448D4h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000058) );
		/* 821448D4h case   39:*/		return 0x821448D8;
		  /* 821448D8h */ case   40:  		/* cmplw CR6, R7, R10 */
		/* 821448D8h case   40:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R10);
		/* 821448D8h case   40:*/		return 0x821448DC;
		  /* 821448DCh */ case   41:  		/* bc 4, CR6_EQ, 20 */
		/* 821448DCh case   41:*/		if ( !regs.CR[6].eq ) { return 0x821448F0;  }
		/* 821448DCh case   41:*/		return 0x821448E0;
		  /* 821448E0h */ case   42:  		/* lwz R10, <#[R3 + 40]> */
		/* 821448E0h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000028) );
		/* 821448E0h case   42:*/		return 0x821448E4;
		  /* 821448E4h */ case   43:  		/* lwzx R8, <#[R10 + R11]> */
		/* 821448E4h case   43:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821448E4h case   43:*/		return 0x821448E8;
		  /* 821448E8h */ case   44:  		/* addi R8, R8, -1 */
		/* 821448E8h case   44:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821448E8h case   44:*/		return 0x821448EC;
		  /* 821448ECh */ case   45:  		/* stwx R8, <#[R10 + R11]> */
		/* 821448ECh case   45:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821448ECh case   45:*/		return 0x821448F0;
	}
	return 0x821448F0;
} // Block from 82144838h-821448F0h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821448F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821448F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821448F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821448F0);
		  /* 821448F0h */ case    0:  		/* addi R9, R9, 4 */
		/* 821448F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821448F0h case    0:*/		return 0x821448F4;
		  /* 821448F4h */ case    1:  		/* bc 16, CR0_LT, -52 */
		/* 821448F4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821448C0;  }
		/* 821448F4h case    1:*/		return 0x821448F8;
	}
	return 0x821448F8;
} // Block from 821448F0h-821448F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821448F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821448F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821448F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821448F8);
		  /* 821448F8h */ case    0:  		/* lwz R10, <#[R3 + 32]> */
		/* 821448F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000020) );
		/* 821448F8h case    0:*/		return 0x821448FC;
		  /* 821448FCh */ case    1:  		/* lwz R9, <#[R3 + 28]> */
		/* 821448FCh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000001C) );
		/* 821448FCh case    1:*/		return 0x82144900;
		  /* 82144900h */ case    2:  		/* lwz R8, <#[R3 + 36]> */
		/* 82144900h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000024) );
		/* 82144900h case    2:*/		return 0x82144904;
		  /* 82144904h */ case    3:  		/* lwzx R7, <#[R10 + R11]> */
		/* 82144904h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82144904h case    3:*/		return 0x82144908;
		  /* 82144908h */ case    4:  		/* lwzx R10, <#[R9 + R11]> */
		/* 82144908h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82144908h case    4:*/		return 0x8214490C;
		  /* 8214490Ch */ case    5:  		/* rlwinm R9, R7, 2, 0, 29 */
		/* 8214490Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 8214490Ch case    5:*/		return 0x82144910;
		  /* 82144910h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 82144910h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82144910h case    6:*/		return 0x82144914;
		  /* 82144914h */ case    7:  		/* add R9, R9, R8 */
		/* 82144914h case    7:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82144914h case    7:*/		return 0x82144918;
		  /* 82144918h */ case    8:  		/* bc 12, CR6_EQ, 64 */
		/* 82144918h case    8:*/		if ( regs.CR[6].eq ) { return 0x82144958;  }
		/* 82144918h case    8:*/		return 0x8214491C;
		  /* 8214491Ch */ case    9:  		/* mtspr CTR, R10 */
		/* 8214491Ch case    9:*/		regs.CTR = regs.R10;
		/* 8214491Ch case    9:*/		return 0x82144920;
		  /* 82144920h */ case   10:  		/* lwz R10, <#[R3 + 4]> */
		/* 82144920h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82144920h case   10:*/		return 0x82144924;
		  /* 82144924h */ case   11:  		/* lwz R8, <#[R9]> */
		/* 82144924h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82144924h case   11:*/		return 0x82144928;
		  /* 82144928h */ case   12:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82144928h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82144928h case   12:*/		return 0x8214492C;
		  /* 8214492Ch */ case   13:  		/* lwz R10, <#[R10 + 20]> */
		/* 8214492Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 8214492Ch case   13:*/		return 0x82144930;
		  /* 82144930h */ case   14:  		/* lwzx R10, <#[R10 + R8]> */
		/* 82144930h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 82144930h case   14:*/		return 0x82144934;
		  /* 82144934h */ case   15:  		/* lwz R10, <#[R10 + 92]> */
		/* 82144934h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000005C) );
		/* 82144934h case   15:*/		return 0x82144938;
		  /* 82144938h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 82144938h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82144938h case   16:*/		return 0x8214493C;
		  /* 8214493Ch */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 8214493Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x82144950;  }
		/* 8214493Ch case   17:*/		return 0x82144940;
	}
	return 0x82144940;
} // Block from 821448F8h-82144940h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82144940h
// Function '??0CNodeUAsmInstruction@D3DXShader@@QAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144940);
		  /* 82144940h */ case    0:  		/* lwz R10, <#[R3 + 40]> */
		/* 82144940h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000028) );
		/* 82144940h case    0:*/		return 0x82144944;
		  /* 82144944h */ case    1:  		/* lwzx R8, <#[R10 + R11]> */
		/* 82144944h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82144944h case    1:*/		return 0x82144948;
		  /* 82144948h */ case    2:  		/* addi R8, R8, 1 */
		/* 82144948h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82144948h case    2:*/		return 0x8214494C;
		  /* 8214494Ch */ case    3:  		/* stwx R8, <#[R10 + R11]> */
		/* 8214494Ch case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8214494Ch case    3:*/		return 0x82144950;
	}
	return 0x82144950;
} // Block from 82144940h-82144950h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144950);
		  /* 82144950h */ case    0:  		/* addi R9, R9, 4 */
		/* 82144950h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82144950h case    0:*/		return 0x82144954;
		  /* 82144954h */ case    1:  		/* bc 16, CR0_LT, -52 */
		/* 82144954h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144920;  }
		/* 82144954h case    1:*/		return 0x82144958;
	}
	return 0x82144958;
} // Block from 82144950h-82144958h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82144958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144958);
		  /* 82144958h */ case    0:  		/* add R29, R29, R6 */
		/* 82144958h case    0:*/		cpu::op::add<0>(regs,&regs.R29,regs.R29,regs.R6);
		/* 82144958h case    0:*/		return 0x8214495C;
		  /* 8214495Ch */ case    1:  		/* cmplw CR6, R6, R28 */
		/* 8214495Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R28);
		/* 8214495Ch case    1:*/		return 0x82144960;
		  /* 82144960h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 82144960h case    2:*/		if ( !regs.CR[6].gt ) { return 0x82144968;  }
		/* 82144960h case    2:*/		return 0x82144964;
		  /* 82144964h */ case    3:  		/* mr R28, R6 */
		/* 82144964h case    3:*/		regs.R28 = regs.R6;
		/* 82144964h case    3:*/		return 0x82144968;
	}
	return 0x82144968;
} // Block from 82144958h-82144968h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144968);
		  /* 82144968h */ case    0:  		/* lwz R10, <#[R3 + 40]> */
		/* 82144968h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000028) );
		/* 82144968h case    0:*/		return 0x8214496C;
		  /* 8214496Ch */ case    1:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8214496Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8214496Ch case    1:*/		return 0x82144970;
		  /* 82144970h */ case    2:  		/* add R6, R11, R6 */
		/* 82144970h case    2:*/		cpu::op::add<0>(regs,&regs.R6,regs.R11,regs.R6);
		/* 82144970h case    2:*/		return 0x82144974;
	}
	return 0x82144974;
} // Block from 82144968h-82144974h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82144974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144974);
		  /* 82144974h */ case    0:  		/* lwz R11, <#[R3 + 56]> */
		/* 82144974h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 82144974h case    0:*/		return 0x82144978;
		  /* 82144978h */ case    1:  		/* addi R30, R30, 1 */
		/* 82144978h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82144978h case    1:*/		return 0x8214497C;
		  /* 8214497Ch */ case    2:  		/* addi R31, R31, 4 */
		/* 8214497Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8214497Ch case    2:*/		return 0x82144980;
		  /* 82144980h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 82144980h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82144980h case    3:*/		return 0x82144984;
		  /* 82144984h */ case    4:  		/* bc 12, CR6_LT, -292 */
		/* 82144984h case    4:*/		if ( regs.CR[6].lt ) { return 0x82144860;  }
		/* 82144984h case    4:*/		return 0x82144988;
	}
	return 0x82144988;
} // Block from 82144974h-82144988h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82144988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144988);
		  /* 82144988h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 82144988h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82144988h case    0:*/		return 0x8214498C;
		  /* 8214498Ch */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 8214498Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82144994;  }
		/* 8214498Ch case    1:*/		return 0x82144990;
		  /* 82144990h */ case    2:  		/* stw R29, <#[R4]> */
		/* 82144990h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R4 + 0x00000000) );
		/* 82144990h case    2:*/		return 0x82144994;
	}
	return 0x82144994;
} // Block from 82144988h-82144994h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82144994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144994);
		  /* 82144994h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 82144994h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82144994h case    0:*/		return 0x82144998;
		  /* 82144998h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 82144998h case    1:*/		if ( regs.CR[6].eq ) { return 0x821449A0;  }
		/* 82144998h case    1:*/		return 0x8214499C;
		  /* 8214499Ch */ case    2:  		/* stw R28, <#[R5]> */
		/* 8214499Ch case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R5 + 0x00000000) );
		/* 8214499Ch case    2:*/		return 0x821449A0;
	}
	return 0x821449A0;
} // Block from 82144994h-821449A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821449A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821449A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821449A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821449A0);
		  /* 821449A0h */ case    0:  		/* b -734972 */
		/* 821449A0h case    0:*/		return 0x820912A4;
		/* 821449A0h case    0:*/		return 0x821449A4;
		  /* 821449A4h */ case    1:  		/* nop */
		/* 821449A4h case    1:*/		cpu::op::nop();
		/* 821449A4h case    1:*/		return 0x821449A8;
	}
	return 0x821449A8;
} // Block from 821449A0h-821449A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821449A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821449A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821449A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821449A8);
		  /* 821449A8h */ case    0:  		/* mfspr R12, LR */
		/* 821449A8h case    0:*/		regs.R12 = regs.LR;
		/* 821449A8h case    0:*/		return 0x821449AC;
		  /* 821449ACh */ case    1:  		/* bl -735116 */
		/* 821449ACh case    1:*/		regs.LR = 0x821449B0; return 0x82091220;
		/* 821449ACh case    1:*/		return 0x821449B0;
		  /* 821449B0h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 821449B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 821449B0h case    2:*/		return 0x821449B4;
		  /* 821449B4h */ case    3:  		/* lwz R9, <#[R3 + 60]> */
		/* 821449B4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000003C) );
		/* 821449B4h case    3:*/		return 0x821449B8;
		  /* 821449B8h */ case    4:  		/* rlwinm R11, R4, 2, 0, 29 */
		/* 821449B8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R4);
		/* 821449B8h case    4:*/		return 0x821449BC;
		  /* 821449BCh */ case    5:  		/* lwz R10, <#[R3 + 4]> */
		/* 821449BCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821449BCh case    5:*/		return 0x821449C0;
		  /* 821449C0h */ case    6:  		/* li R8, 0 */
		/* 821449C0h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821449C0h case    6:*/		return 0x821449C4;
		  /* 821449C4h */ case    7:  		/* lwz R7, <#[R3 + 52]> */
		/* 821449C4h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000034) );
		/* 821449C4h case    7:*/		return 0x821449C8;
		  /* 821449C8h */ case    8:  		/* mr R31, R3 */
		/* 821449C8h case    8:*/		regs.R31 = regs.R3;
		/* 821449C8h case    8:*/		return 0x821449CC;
		  /* 821449CCh */ case    9:  		/* stw R8, <#[R1 + 96]> */
		/* 821449CCh case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000060) );
		/* 821449CCh case    9:*/		return 0x821449D0;
		  /* 821449D0h */ case   10:  		/* mr R15, R4 */
		/* 821449D0h case   10:*/		regs.R15 = regs.R4;
		/* 821449D0h case   10:*/		return 0x821449D4;
		  /* 821449D4h */ case   11:  		/* addi R14, R4, 1 */
		/* 821449D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R4,0x1);
		/* 821449D4h case   11:*/		return 0x821449D8;
	}
	return 0x821449D8;
} // Block from 821449A8h-821449D8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821449D8h
// Function '??0CNodeUAsmInstruction@D3DXShader@@QAA@PBUD3DXTOKEN@1@KKKKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821449D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821449D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821449D8);
		  /* 821449D8h */ case    0:  		/* lwzx R30, <#[R11 + R9]> */
		/* 821449D8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821449D8h case    0:*/		return 0x821449DC;
		  /* 821449DCh */ case    1:  		/* lwz R9, <#[R10 + 24]> */
		/* 821449DCh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000018) );
		/* 821449DCh case    1:*/		return 0x821449E0;
		  /* 821449E0h */ case    2:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 821449E0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 821449E0h case    2:*/		return 0x821449E4;
		  /* 821449E4h */ case    3:  		/* stw R30, <#[R1 + 108]> */
		/* 821449E4h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 821449E4h case    3:*/		return 0x821449E8;
		  /* 821449E8h */ case    4:  		/* lwzx R8, <#[R7 + R11]> */
		/* 821449E8h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 821449E8h case    4:*/		return 0x821449EC;
		  /* 821449ECh */ case    5:  		/* lwzx R9, <#[R9 + R11]> */
		/* 821449ECh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821449ECh case    5:*/		return 0x821449F0;
		  /* 821449F0h */ case    6:  		/* cmpwi CR6, R8, 0 */
		/* 821449F0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 821449F0h case    6:*/		return 0x821449F4;
		  /* 821449F4h */ case    7:  		/* bc 4, CR6_EQ, 1876 */
		/* 821449F4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82145148;  }
		/* 821449F4h case    7:*/		return 0x821449F8;
		  /* 821449F8h */ case    8:  		/* lwz R9, <#[R9 + 16]> */
		/* 821449F8h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 821449F8h case    8:*/		return 0x821449FC;
		  /* 821449FCh */ case    9:  		/* lwz R7, <#[R3 + 12]> */
		/* 821449FCh case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x0000000C) );
		/* 821449FCh case    9:*/		return 0x82144A00;
		  /* 82144A00h */ case   10:  		/* lwz R6, <#[R3 + 8]> */
		/* 82144A00h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000008) );
		/* 82144A00h case   10:*/		return 0x82144A04;
		  /* 82144A04h */ case   11:  		/* lwz R8, <#[R10 + 20]> */
		/* 82144A04h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000014) );
		/* 82144A04h case   11:*/		return 0x82144A08;
		  /* 82144A08h */ case   12:  		/* lwz R10, <#[R3 + 16]> */
		/* 82144A08h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82144A08h case   12:*/		return 0x82144A0C;
		  /* 82144A0Ch */ case   13:  		/* lwz R9, <#[R9]> */
		/* 82144A0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 82144A0Ch case   13:*/		return 0x82144A10;
		  /* 82144A10h */ case   14:  		/* lwzx R7, <#[R7 + R11]> */
		/* 82144A10h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82144A10h case   14:*/		return 0x82144A14;
		  /* 82144A14h */ case   15:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82144A14h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82144A14h case   15:*/		return 0x82144A18;
		  /* 82144A18h */ case   16:  		/* lwzx R16, <#[R6 + R11]> */
		/* 82144A18h case   16:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 82144A18h case   16:*/		return 0x82144A1C;
		  /* 82144A1Ch */ case   17:  		/* rlwinm R11, R7, 2, 0, 29 */
		/* 82144A1Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 82144A1Ch case   17:*/		return 0x82144A20;
		  /* 82144A20h */ case   18:  		/* lwz R3, <#[R3 + 20]> */
		/* 82144A20h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000014) );
		/* 82144A20h case   18:*/		return 0x82144A24;
		  /* 82144A24h */ case   19:  		/* rlwinm R5, R16, 2, 0, 29 */
		/* 82144A24h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R16);
		/* 82144A24h case   19:*/		return 0x82144A28;
		  /* 82144A28h */ case   20:  		/* add R4, R11, R10 */
		/* 82144A28h case   20:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 82144A28h case   20:*/		return 0x82144A2C;
		  /* 82144A2Ch */ case   21:  		/* lwzx R11, <#[R9 + R8]> */
		/* 82144A2Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82144A2Ch case   21:*/		return 0x82144A30;
		  /* 82144A30h */ case   22:  		/* lwz R10, <#[R11 + 20]> */
		/* 82144A30h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 82144A30h case   22:*/		return 0x82144A34;
		  /* 82144A34h */ case   23:  		/* lwz R11, <#[R11 + 24]> */
		/* 82144A34h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82144A34h case   23:*/		return 0x82144A38;
		  /* 82144A38h */ case   24:  		/* stw R10, <#[R1 + 84]> */
		/* 82144A38h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82144A38h case   24:*/		return 0x82144A3C;
		  /* 82144A3Ch */ case   25:  		/* stw R11, <#[R1 + 92]> */
		/* 82144A3Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82144A3Ch case   25:*/		return 0x82144A40;
		  /* 82144A40h */ case   26:  		/* bl -733328 */
		/* 82144A40h case   26:*/		regs.LR = 0x82144A44; return 0x820919B0;
		/* 82144A40h case   26:*/		return 0x82144A44;
		  /* 82144A44h */ case   27:  		/* lwz R11, <#[R31 + 72]> */
		/* 82144A44h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 82144A44h case   27:*/		return 0x82144A48;
		  /* 82144A48h */ case   28:  		/* li R29, 0 */
		/* 82144A48h case   28:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82144A48h case   28:*/		return 0x82144A4C;
		  /* 82144A4Ch */ case   29:  		/* cmplw CR6, R15, R14 */
		/* 82144A4Ch case   29:*/		cpu::op::cmplw<6>(regs,regs.R15,regs.R14);
		/* 82144A4Ch case   29:*/		return 0x82144A50;
		  /* 82144A50h */ case   30:  		/* addi R11, R11, 1 */
		/* 82144A50h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82144A50h case   30:*/		return 0x82144A54;
		  /* 82144A54h */ case   31:  		/* stw R29, <#[R1 + 80]> */
		/* 82144A54h case   31:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82144A54h case   31:*/		return 0x82144A58;
		  /* 82144A58h */ case   32:  		/* stw R11, <#[R31 + 72]> */
		/* 82144A58h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 82144A58h case   32:*/		return 0x82144A5C;
		  /* 82144A5Ch */ case   33:  		/* bc 4, CR6_LT, 220 */
		/* 82144A5Ch case   33:*/		if ( !regs.CR[6].lt ) { return 0x82144B38;  }
		/* 82144A5Ch case   33:*/		return 0x82144A60;
		  /* 82144A60h */ case   34:  		/* subf R11, R15, R14 */
		/* 82144A60h case   34:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R15,regs.R14);
		/* 82144A60h case   34:*/		return 0x82144A64;
		  /* 82144A64h */ case   35:  		/* rlwinm R8, R15, 2, 0, 29 */
		/* 82144A64h case   35:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R15);
		/* 82144A64h case   35:*/		return 0x82144A68;
		  /* 82144A68h */ case   36:  		/* mtspr CTR, R11 */
		/* 82144A68h case   36:*/		regs.CTR = regs.R11;
		/* 82144A68h case   36:*/		return 0x82144A6C;
		  /* 82144A6Ch */ case   37:  		/* lwz R11, <#[R31 + 60]> */
		/* 82144A6Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 82144A6Ch case   37:*/		return 0x82144A70;
		  /* 82144A70h */ case   38:  		/* li R10, 0 */
		/* 82144A70h case   38:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82144A70h case   38:*/		return 0x82144A74;
		  /* 82144A74h */ case   39:  		/* lwz R9, <#[R31 + 4]> */
		/* 82144A74h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82144A74h case   39:*/		return 0x82144A78;
		  /* 82144A78h */ case   40:  		/* lwzx R11, <#[R8 + R11]> */
		/* 82144A78h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82144A78h case   40:*/		return 0x82144A7C;
		  /* 82144A7Ch */ case   41:  		/* lwz R9, <#[R9 + 24]> */
		/* 82144A7Ch case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000018) );
		/* 82144A7Ch case   41:*/		return 0x82144A80;
		  /* 82144A80h */ case   42:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82144A80h case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82144A80h case   42:*/		return 0x82144A84;
		  /* 82144A84h */ case   43:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82144A84h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82144A84h case   43:*/		return 0x82144A88;
		  /* 82144A88h */ case   44:  		/* lwz R9, <#[R11 + 20]> */
		/* 82144A88h case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 82144A88h case   44:*/		return 0x82144A8C;
		  /* 82144A8Ch */ case   45:  		/* cmplwi CR6, R9, 0 */
		/* 82144A8Ch case   45:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82144A8Ch case   45:*/		return 0x82144A90;
		  /* 82144A90h */ case   46:  		/* bc 4, CR6_GT, 60 */
		/* 82144A90h case   46:*/		if ( !regs.CR[6].gt ) { return 0x82144ACC;  }
		/* 82144A90h case   46:*/		return 0x82144A94;
		  /* 82144A94h */ case   47:  		/* li R9, 0 */
		/* 82144A94h case   47:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82144A94h case   47:*/		return 0x82144A98;
		  /* 82144A98h */ case   48:  		/* lwz R7, <#[R11 + 24]> */
		/* 82144A98h case   48:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000018) );
		/* 82144A98h case   48:*/		return 0x82144A9C;
		  /* 82144A9Ch */ case   49:  		/* addi R10, R10, 1 */
		/* 82144A9Ch case   49:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82144A9Ch case   49:*/		return 0x82144AA0;
		  /* 82144AA0h */ case   50:  		/* lwz R6, <#[R31 + 4]> */
		/* 82144AA0h case   50:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82144AA0h case   50:*/		return 0x82144AA4;
		  /* 82144AA4h */ case   51:  		/* lwz R5, <#[R31 + 72]> */
		/* 82144AA4h case   51:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000048) );
		/* 82144AA4h case   51:*/		return 0x82144AA8;
		  /* 82144AA8h */ case   52:  		/* lwzx R7, <#[R9 + R7]> */
		/* 82144AA8h case   52:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 82144AA8h case   52:*/		return 0x82144AAC;
		  /* 82144AACh */ case   53:  		/* addi R9, R9, 4 */
		/* 82144AACh case   53:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82144AACh case   53:*/		return 0x82144AB0;
		  /* 82144AB0h */ case   54:  		/* lwz R6, <#[R6 + 24]> */
		/* 82144AB0h case   54:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000018) );
		/* 82144AB0h case   54:*/		return 0x82144AB4;
		  /* 82144AB4h */ case   55:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82144AB4h case   55:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82144AB4h case   55:*/		return 0x82144AB8;
	}
	return 0x82144AB8;
} // Block from 821449D8h-82144AB8h (56 instructions)

//////////////////////////////////////////////////////
// Block at 82144AB8h
// Function '?SetDest@CNodeUAsmInstruction@D3DXShader@@QAAXPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144AB8);
		  /* 82144AB8h */ case    0:  		/* lwzx R7, <#[R7 + R6]> */
		/* 82144AB8h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 82144AB8h case    0:*/		return 0x82144ABC;
		  /* 82144ABCh */ case    1:  		/* stw R5, <#[R7 + 36]> */
		/* 82144ABCh case    1:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R7 + 0x00000024) );
		/* 82144ABCh case    1:*/		return 0x82144AC0;
		  /* 82144AC0h */ case    2:  		/* lwz R7, <#[R11 + 20]> */
		/* 82144AC0h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000014) );
		/* 82144AC0h case    2:*/		return 0x82144AC4;
		  /* 82144AC4h */ case    3:  		/* cmplw CR6, R10, R7 */
		/* 82144AC4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 82144AC4h case    3:*/		return 0x82144AC8;
		  /* 82144AC8h */ case    4:  		/* bc 12, CR6_LT, -48 */
		/* 82144AC8h case    4:*/		if ( regs.CR[6].lt ) { return 0x82144A98;  }
		/* 82144AC8h case    4:*/		return 0x82144ACC;
	}
	return 0x82144ACC;
} // Block from 82144AB8h-82144ACCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82144ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144ACC);
		  /* 82144ACCh */ case    0:  		/* lwz R10, <#[R11 + 28]> */
		/* 82144ACCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 82144ACCh case    0:*/		return 0x82144AD0;
		  /* 82144AD0h */ case    1:  		/* li R9, 0 */
		/* 82144AD0h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82144AD0h case    1:*/		return 0x82144AD4;
		  /* 82144AD4h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 82144AD4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82144AD4h case    2:*/		return 0x82144AD8;
	}
	return 0x82144AD8;
} // Block from 82144ACCh-82144AD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82144AD8h
// Function '?Copy@CNodeUAsmInstruction@D3DXShader@@UAAPAV12@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144AD8);
		  /* 82144AD8h */ case    0:  		/* bc 4, CR6_GT, 60 */
		/* 82144AD8h case    0:*/		if ( !regs.CR[6].gt ) { return 0x82144B14;  }
		/* 82144AD8h case    0:*/		return 0x82144ADC;
		  /* 82144ADCh */ case    1:  		/* li R10, 0 */
		/* 82144ADCh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82144ADCh case    1:*/		return 0x82144AE0;
		  /* 82144AE0h */ case    2:  		/* lwz R7, <#[R11 + 32]> */
		/* 82144AE0h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000020) );
		/* 82144AE0h case    2:*/		return 0x82144AE4;
		  /* 82144AE4h */ case    3:  		/* addi R9, R9, 1 */
		/* 82144AE4h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82144AE4h case    3:*/		return 0x82144AE8;
		  /* 82144AE8h */ case    4:  		/* lwz R6, <#[R31 + 4]> */
		/* 82144AE8h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82144AE8h case    4:*/		return 0x82144AEC;
		  /* 82144AECh */ case    5:  		/* lwz R5, <#[R31 + 72]> */
		/* 82144AECh case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000048) );
		/* 82144AECh case    5:*/		return 0x82144AF0;
		  /* 82144AF0h */ case    6:  		/* lwzx R7, <#[R10 + R7]> */
		/* 82144AF0h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82144AF0h case    6:*/		return 0x82144AF4;
		  /* 82144AF4h */ case    7:  		/* addi R10, R10, 4 */
		/* 82144AF4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82144AF4h case    7:*/		return 0x82144AF8;
		  /* 82144AF8h */ case    8:  		/* lwz R6, <#[R6 + 24]> */
		/* 82144AF8h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000018) );
		/* 82144AF8h case    8:*/		return 0x82144AFC;
		  /* 82144AFCh */ case    9:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82144AFCh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82144AFCh case    9:*/		return 0x82144B00;
		  /* 82144B00h */ case   10:  		/* lwzx R7, <#[R7 + R6]> */
		/* 82144B00h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 82144B00h case   10:*/		return 0x82144B04;
		  /* 82144B04h */ case   11:  		/* stw R5, <#[R7 + 36]> */
		/* 82144B04h case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R7 + 0x00000024) );
		/* 82144B04h case   11:*/		return 0x82144B08;
		  /* 82144B08h */ case   12:  		/* lwz R7, <#[R11 + 28]> */
		/* 82144B08h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000001C) );
		/* 82144B08h case   12:*/		return 0x82144B0C;
		  /* 82144B0Ch */ case   13:  		/* cmplw CR6, R9, R7 */
		/* 82144B0Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 82144B0Ch case   13:*/		return 0x82144B10;
		  /* 82144B10h */ case   14:  		/* bc 12, CR6_LT, -48 */
		/* 82144B10h case   14:*/		if ( regs.CR[6].lt ) { return 0x82144AE0;  }
		/* 82144B10h case   14:*/		return 0x82144B14;
	}
	return 0x82144B14;
} // Block from 82144AD8h-82144B14h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82144B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144B14);
		  /* 82144B14h */ case    0:  		/* lwz R11, <#[R31 + 60]> */
		/* 82144B14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 82144B14h case    0:*/		return 0x82144B18;
		  /* 82144B18h */ case    1:  		/* lwz R10, <#[R31 + 40]> */
		/* 82144B18h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 82144B18h case    1:*/		return 0x82144B1C;
		  /* 82144B1Ch */ case    2:  		/* lwzx R11, <#[R8 + R11]> */
		/* 82144B1Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82144B1Ch case    2:*/		return 0x82144B20;
		  /* 82144B20h */ case    3:  		/* addi R8, R8, 4 */
		/* 82144B20h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82144B20h case    3:*/		return 0x82144B24;
		  /* 82144B24h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82144B24h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82144B24h case    4:*/		return 0x82144B28;
		  /* 82144B28h */ case    5:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82144B28h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82144B28h case    5:*/		return 0x82144B2C;
		  /* 82144B2Ch */ case    6:  		/* add R29, R11, R29 */
		/* 82144B2Ch case    6:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 82144B2Ch case    6:*/		return 0x82144B30;
		  /* 82144B30h */ case    7:  		/* bc 16, CR0_LT, -196 */
		/* 82144B30h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144A6C;  }
		/* 82144B30h case    7:*/		return 0x82144B34;
		  /* 82144B34h */ case    8:  		/* stw R29, <#[R1 + 80]> */
		/* 82144B34h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82144B34h case    8:*/		return 0x82144B38;
	}
	return 0x82144B38;
} // Block from 82144B14h-82144B38h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82144B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144B38);
		  /* 82144B38h */ case    0:  		/* cmplwi CR6, R16, 0 */
		/* 82144B38h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82144B38h case    0:*/		return 0x82144B3C;
		  /* 82144B3Ch */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 82144B3Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82144B78;  }
		/* 82144B3Ch case    1:*/		return 0x82144B40;
		  /* 82144B40h */ case    2:  		/* li R11, 0 */
		/* 82144B40h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82144B40h case    2:*/		return 0x82144B44;
		  /* 82144B44h */ case    3:  		/* mtspr CTR, R16 */
		/* 82144B44h case    3:*/		regs.CTR = regs.R16;
		/* 82144B44h case    3:*/		return 0x82144B48;
		  /* 82144B48h */ case    4:  		/* lwz R10, <#[R31 + 4]> */
		/* 82144B48h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82144B48h case    4:*/		return 0x82144B4C;
		  /* 82144B4Ch */ case    5:  		/* lwz R9, <#[R31 + 72]> */
		/* 82144B4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000048) );
		/* 82144B4Ch case    5:*/		return 0x82144B50;
		  /* 82144B50h */ case    6:  		/* lwz R10, <#[R10 + 20]> */
		/* 82144B50h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 82144B50h case    6:*/		return 0x82144B54;
		  /* 82144B54h */ case    7:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82144B54h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82144B54h case    7:*/		return 0x82144B58;
		  /* 82144B58h */ case    8:  		/* addi R11, R11, 4 */
		/* 82144B58h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82144B58h case    8:*/		return 0x82144B5C;
		  /* 82144B5Ch */ case    9:  		/* lwz R8, <#[R10 + 116]> */
		/* 82144B5Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000074) );
		/* 82144B5Ch case    9:*/		return 0x82144B60;
		  /* 82144B60h */ case   10:  		/* stw R9, <#[R10 + 48]> */
		/* 82144B60h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000030) );
		/* 82144B60h case   10:*/		return 0x82144B64;
		  /* 82144B64h */ case   11:  		/* subf R9, R30, R8 */
		/* 82144B64h case   11:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R30,regs.R8);
		/* 82144B64h case   11:*/		return 0x82144B68;
		  /* 82144B68h */ case   12:  		/* cntlzw R9, R9 */
		/* 82144B68h case   12:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 82144B68h case   12:*/		return 0x82144B6C;
		  /* 82144B6Ch */ case   13:  		/* rlwinm R9, R9, 27, 31, 31 */
		/* 82144B6Ch case   13:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R9,regs.R9);
		/* 82144B6Ch case   13:*/		return 0x82144B70;
		  /* 82144B70h */ case   14:  		/* stw R9, <#[R10 + 84]> */
		/* 82144B70h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000054) );
		/* 82144B70h case   14:*/		return 0x82144B74;
		  /* 82144B74h */ case   15:  		/* bc 16, CR0_LT, -44 */
		/* 82144B74h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144B48;  }
		/* 82144B74h case   15:*/		return 0x82144B78;
	}
	return 0x82144B78;
} // Block from 82144B38h-82144B78h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82144B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144B78);
		  /* 82144B78h */ case    0:  		/* cmpwi CR6, R29, 0 */
		/* 82144B78h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82144B78h case    0:*/		return 0x82144B7C;
		  /* 82144B7Ch */ case    1:  		/* bc 4, CR6_LT, 24 */
		/* 82144B7Ch case    1:*/		if ( !regs.CR[6].lt ) { return 0x82144B94;  }
		/* 82144B7Ch case    1:*/		return 0x82144B80;
		  /* 82144B80h */ case    2:  		/* mr R11, R15 */
		/* 82144B80h case    2:*/		regs.R11 = regs.R15;
		/* 82144B80h case    2:*/		return 0x82144B84;
		  /* 82144B84h */ case    3:  		/* mr R18, R15 */
		/* 82144B84h case    3:*/		regs.R18 = regs.R15;
		/* 82144B84h case    3:*/		return 0x82144B88;
		  /* 82144B88h */ case    4:  		/* mr R17, R15 */
		/* 82144B88h case    4:*/		regs.R17 = regs.R15;
		/* 82144B88h case    4:*/		return 0x82144B8C;
		  /* 82144B8Ch */ case    5:  		/* li R23, -1 */
		/* 82144B8Ch case    5:*/		cpu::op::li<0>(regs,&regs.R23,0xFFFFFFFF);
		/* 82144B8Ch case    5:*/		return 0x82144B90;
		  /* 82144B90h */ case    6:  		/* b 24 */
		/* 82144B90h case    6:*/		return 0x82144BA8;
		/* 82144B90h case    6:*/		return 0x82144B94;
	}
	return 0x82144B94;
} // Block from 82144B78h-82144B94h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82144B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144B94);
		  /* 82144B94h */ case    0:  		/* bc 4, CR6_GT, 1412 */
		/* 82144B94h case    0:*/		if ( !regs.CR[6].gt ) { return 0x82145118;  }
		/* 82144B94h case    0:*/		return 0x82144B98;
		  /* 82144B98h */ case    1:  		/* addi R11, R14, -1 */
		/* 82144B98h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R14,0xFFFFFFFF);
		/* 82144B98h case    1:*/		return 0x82144B9C;
		  /* 82144B9Ch */ case    2:  		/* mr R18, R14 */
		/* 82144B9Ch case    2:*/		regs.R18 = regs.R14;
		/* 82144B9Ch case    2:*/		return 0x82144BA0;
		  /* 82144BA0h */ case    3:  		/* mr R17, R14 */
		/* 82144BA0h case    3:*/		regs.R17 = regs.R14;
		/* 82144BA0h case    3:*/		return 0x82144BA4;
		  /* 82144BA4h */ case    4:  		/* li R23, 1 */
		/* 82144BA4h case    4:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 82144BA4h case    4:*/		return 0x82144BA8;
	}
	return 0x82144BA8;
} // Block from 82144B94h-82144BA8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82144BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144BA8);
		  /* 82144BA8h */ case    0:  		/* lwz R10, <#[R31 + 56]> */
		/* 82144BA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 82144BA8h case    0:*/		return 0x82144BAC;
		  /* 82144BACh */ case    1:  		/* add R27, R23, R11 */
		/* 82144BACh case    1:*/		cpu::op::add<0>(regs,&regs.R27,regs.R23,regs.R11);
		/* 82144BACh case    1:*/		return 0x82144BB0;
		  /* 82144BB0h */ case    2:  		/* li R26, 0 */
		/* 82144BB0h case    2:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82144BB0h case    2:*/		return 0x82144BB4;
		  /* 82144BB4h */ case    3:  		/* li R19, 0 */
		/* 82144BB4h case    3:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 82144BB4h case    3:*/		return 0x82144BB8;
		  /* 82144BB8h */ case    4:  		/* stw R26, <#[R1 + 88]> */
		/* 82144BB8h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000058) );
		/* 82144BB8h case    4:*/		return 0x82144BBC;
		  /* 82144BBCh */ case    5:  		/* li R20, 0 */
		/* 82144BBCh case    5:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 82144BBCh case    5:*/		return 0x82144BC0;
		  /* 82144BC0h */ case    6:  		/* cmplw CR6, R27, R10 */
		/* 82144BC0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R10);
		/* 82144BC0h case    6:*/		return 0x82144BC4;
		  /* 82144BC4h */ case    7:  		/* bc 4, CR6_LT, 460 */
		/* 82144BC4h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82144D90;  }
		/* 82144BC4h case    7:*/		return 0x82144BC8;
		  /* 82144BC8h */ case    8:  		/* rlwinm R22, R27, 2, 0, 29 */
		/* 82144BC8h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R22,regs.R27);
		/* 82144BC8h case    8:*/		return 0x82144BCC;
		  /* 82144BCCh */ case    9:  		/* rlwinm R21, R23, 2, 0, 29 */
		/* 82144BCCh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R21,regs.R23);
		/* 82144BCCh case    9:*/		return 0x82144BD0;
		  /* 82144BD0h */ case   10:  		/* lwz R11, <#[R31 + 60]> */
		/* 82144BD0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 82144BD0h case   10:*/		return 0x82144BD4;
		  /* 82144BD4h */ case   11:  		/* li R25, 0 */
		/* 82144BD4h case   11:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82144BD4h case   11:*/		return 0x82144BD8;
		  /* 82144BD8h */ case   12:  		/* lwz R10, <#[R31 + 52]> */
		/* 82144BD8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000034) );
		/* 82144BD8h case   12:*/		return 0x82144BDC;
		  /* 82144BDCh */ case   13:  		/* lwzx R24, <#[R22 + R11]> */
		/* 82144BDCh case   13:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R22 + regs.R11 + 0x00000000) );
		/* 82144BDCh case   13:*/		return 0x82144BE0;
		  /* 82144BE0h */ case   14:  		/* rlwinm R30, R24, 2, 0, 29 */
		/* 82144BE0h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R24);
		/* 82144BE0h case   14:*/		return 0x82144BE4;
		  /* 82144BE4h */ case   15:  		/* lwzx R11, <#[R10 + R30]> */
		/* 82144BE4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82144BE4h case   15:*/		return 0x82144BE8;
		  /* 82144BE8h */ case   16:  		/* cmpwi CR6, R11, 0 */
		/* 82144BE8h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82144BE8h case   16:*/		return 0x82144BEC;
		  /* 82144BECh */ case   17:  		/* bc 4, CR6_EQ, 112 */
		/* 82144BECh case   17:*/		if ( !regs.CR[6].eq ) { return 0x82144C5C;  }
		/* 82144BECh case   17:*/		return 0x82144BF0;
		  /* 82144BF0h */ case   18:  		/* lwz R10, <#[R31 + 4]> */
		/* 82144BF0h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82144BF0h case   18:*/		return 0x82144BF4;
		  /* 82144BF4h */ case   19:  		/* lwz R11, <#[R10 + 24]> */
		/* 82144BF4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 82144BF4h case   19:*/		return 0x82144BF8;
		  /* 82144BF8h */ case   20:  		/* lwz R9, <#[R10 + 20]> */
		/* 82144BF8h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000014) );
		/* 82144BF8h case   20:*/		return 0x82144BFC;
		  /* 82144BFCh */ case   21:  		/* lwzx R11, <#[R11 + R30]> */
		/* 82144BFCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82144BFCh case   21:*/		return 0x82144C00;
		  /* 82144C00h */ case   22:  		/* lwz R11, <#[R11 + 16]> */
		/* 82144C00h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82144C00h case   22:*/		return 0x82144C04;
		  /* 82144C04h */ case   23:  		/* lwz R11, <#[R11]> */
		/* 82144C04h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82144C04h case   23:*/		return 0x82144C08;
		  /* 82144C08h */ case   24:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82144C08h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82144C08h case   24:*/		return 0x82144C0C;
		  /* 82144C0Ch */ case   25:  		/* lwzx R25, <#[R11 + R9]> */
		/* 82144C0Ch case   25:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82144C0Ch case   25:*/		return 0x82144C10;
		  /* 82144C10h */ case   26:  		/* lwz R11, <#[R25 + 20]> */
		/* 82144C10h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000014) );
		/* 82144C10h case   26:*/		return 0x82144C14;
		  /* 82144C14h */ case   27:  		/* lwz R9, <#[R25 + 24]> */
		/* 82144C14h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000018) );
		/* 82144C14h case   27:*/		return 0x82144C18;
		  /* 82144C18h */ case   28:  		/* b 36 */
		/* 82144C18h case   28:*/		return 0x82144C3C;
		/* 82144C18h case   28:*/		return 0x82144C1C;
		  /* 82144C1Ch */ case   29:  		/* lwz R8, <#[R1 + 84]> */
		/* 82144C1Ch case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 82144C1Ch case   29:*/		return 0x82144C20;
		  /* 82144C20h */ case   30:  		/* cmplw CR6, R8, R11 */
		/* 82144C20h case   30:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 82144C20h case   30:*/		return 0x82144C24;
		  /* 82144C24h */ case   31:  		/* bc 12, CR6_EQ, 44 */
		/* 82144C24h case   31:*/		if ( regs.CR[6].eq ) { return 0x82144C50;  }
		/* 82144C24h case   31:*/		return 0x82144C28;
		  /* 82144C28h */ case   32:  		/* lwz R9, <#[R10 + 20]> */
		/* 82144C28h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000014) );
		/* 82144C28h case   32:*/		return 0x82144C2C;
		  /* 82144C2Ch */ case   33:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82144C2Ch case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82144C2Ch case   33:*/		return 0x82144C30;
		  /* 82144C30h */ case   34:  		/* lwzx R9, <#[R11 + R9]> */
		/* 82144C30h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82144C30h case   34:*/		return 0x82144C34;
		  /* 82144C34h */ case   35:  		/* lwz R11, <#[R9 + 20]> */
		/* 82144C34h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000014) );
		/* 82144C34h case   35:*/		return 0x82144C38;
		  /* 82144C38h */ case   36:  		/* lwz R9, <#[R9 + 24]> */
		/* 82144C38h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000018) );
		/* 82144C38h case   36:*/		return 0x82144C3C;
	}
	return 0x82144C3C;
} // Block from 82144BA8h-82144C3Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 82144C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144C3C);
		  /* 82144C3Ch */ case    0:  		/* cmpwi CR6, R11, -1 */
		/* 82144C3Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82144C3Ch case    0:*/		return 0x82144C40;
		  /* 82144C40h */ case    1:  		/* bc 4, CR6_EQ, -36 */
		/* 82144C40h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82144C1C;  }
		/* 82144C40h case    1:*/		return 0x82144C44;
		  /* 82144C44h */ case    2:  		/* lwz R10, <#[R1 + 84]> */
		/* 82144C44h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82144C44h case    2:*/		return 0x82144C48;
		  /* 82144C48h */ case    3:  		/* cmplw CR6, R10, R11 */
		/* 82144C48h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82144C48h case    3:*/		return 0x82144C4C;
		  /* 82144C4Ch */ case    4:  		/* bc 4, CR6_EQ, 1228 */
		/* 82144C4Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82145118;  }
		/* 82144C4Ch case    4:*/		return 0x82144C50;
	}
	return 0x82144C50;
} // Block from 82144C3Ch-82144C50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82144C50h
// Function '??0CNodeUAsmRegister@D3DXShader@@QAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144C50);
		  /* 82144C50h */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 82144C50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82144C50h case    0:*/		return 0x82144C54;
		  /* 82144C54h */ case    1:  		/* cmpw CR6, R11, R9 */
		/* 82144C54h case    1:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 82144C54h case    1:*/		return 0x82144C58;
		  /* 82144C58h */ case    2:  		/* bc 4, CR6_EQ, 1216 */
		/* 82144C58h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82145118;  }
		/* 82144C58h case    2:*/		return 0x82144C5C;
	}
	return 0x82144C5C;
} // Block from 82144C50h-82144C5Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82144C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144C5C);
		  /* 82144C5Ch */ case    0:  		/* cmplw CR6, R18, R27 */
		/* 82144C5Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R27);
		/* 82144C5Ch case    0:*/		return 0x82144C60;
		  /* 82144C60h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 82144C60h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82144C68;  }
		/* 82144C60h case    1:*/		return 0x82144C64;
		  /* 82144C64h */ case    2:  		/* mr R18, R27 */
		/* 82144C64h case    2:*/		regs.R18 = regs.R27;
		/* 82144C64h case    2:*/		return 0x82144C68;
	}
	return 0x82144C68;
} // Block from 82144C5Ch-82144C68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82144C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144C68);
		  /* 82144C68h */ case    0:  		/* cmplw CR6, R17, R27 */
		/* 82144C68h case    0:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R27);
		/* 82144C68h case    0:*/		return 0x82144C6C;
		  /* 82144C6Ch */ case    1:  		/* bc 12, CR6_GT, 8 */
		/* 82144C6Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x82144C74;  }
		/* 82144C6Ch case    1:*/		return 0x82144C70;
		  /* 82144C70h */ case    2:  		/* addi R17, R27, 1 */
		/* 82144C70h case    2:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R27,0x1);
		/* 82144C70h case    2:*/		return 0x82144C74;
	}
	return 0x82144C74;
} // Block from 82144C68h-82144C74h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82144C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144C74);
		  /* 82144C74h */ case    0:  		/* lwz R8, <#[R31 + 12]> */
		/* 82144C74h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 82144C74h case    0:*/		return 0x82144C78;
		  /* 82144C78h */ case    1:  		/* rlwinm R10, R26, 2, 0, 29 */
		/* 82144C78h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R26);
		/* 82144C78h case    1:*/		return 0x82144C7C;
		  /* 82144C7Ch */ case    2:  		/* lwz R11, <#[R31 + 24]> */
		/* 82144C7Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82144C7Ch case    2:*/		return 0x82144C80;
		  /* 82144C80h */ case    3:  		/* lwz R7, <#[R31 + 8]> */
		/* 82144C80h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000008) );
		/* 82144C80h case    3:*/		return 0x82144C84;
		  /* 82144C84h */ case    4:  		/* add R3, R10, R11 */
		/* 82144C84h case    4:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82144C84h case    4:*/		return 0x82144C88;
		  /* 82144C88h */ case    5:  		/* lwz R9, <#[R31 + 16]> */
		/* 82144C88h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82144C88h case    5:*/		return 0x82144C8C;
		  /* 82144C8Ch */ case    6:  		/* lwzx R11, <#[R8 + R30]> */
		/* 82144C8Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R30 + 0x00000000) );
		/* 82144C8Ch case    6:*/		return 0x82144C90;
		  /* 82144C90h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82144C90h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82144C90h case    7:*/		return 0x82144C94;
		  /* 82144C94h */ case    8:  		/* lwzx R29, <#[R7 + R30]> */
		/* 82144C94h case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R7 + regs.R30 + 0x00000000) );
		/* 82144C94h case    8:*/		return 0x82144C98;
		  /* 82144C98h */ case    9:  		/* add R28, R11, R9 */
		/* 82144C98h case    9:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R9);
		/* 82144C98h case    9:*/		return 0x82144C9C;
		  /* 82144C9Ch */ case   10:  		/* rlwinm R5, R29, 2, 0, 29 */
		/* 82144C9Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R29);
		/* 82144C9Ch case   10:*/		return 0x82144CA0;
		  /* 82144CA0h */ case   11:  		/* mr R4, R28 */
		/* 82144CA0h case   11:*/		regs.R4 = regs.R28;
		/* 82144CA0h case   11:*/		return 0x82144CA4;
		  /* 82144CA4h */ case   12:  		/* bl -733940 */
		/* 82144CA4h case   12:*/		regs.LR = 0x82144CA8; return 0x820919B0;
		/* 82144CA4h case   12:*/		return 0x82144CA8;
		  /* 82144CA8h */ case   13:  		/* lwz R11, <#[R31 + 4]> */
		/* 82144CA8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82144CA8h case   13:*/		return 0x82144CAC;
		  /* 82144CACh */ case   14:  		/* lwz R10, <#[R31 + 8]> */
		/* 82144CACh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82144CACh case   14:*/		return 0x82144CB0;
		  /* 82144CB0h */ case   15:  		/* cmplwi CR6, R29, 0 */
		/* 82144CB0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82144CB0h case   15:*/		return 0x82144CB4;
		  /* 82144CB4h */ case   16:  		/* lwz R9, <#[R31 + 72]> */
		/* 82144CB4h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000048) );
		/* 82144CB4h case   16:*/		return 0x82144CB8;
		  /* 82144CB8h */ case   17:  		/* lwz R8, <#[R31 + 40]> */
		/* 82144CB8h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000028) );
		/* 82144CB8h case   17:*/		return 0x82144CBC;
		  /* 82144CBCh */ case   18:  		/* lwz R7, <#[R11 + 24]> */
		/* 82144CBCh case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000018) );
		/* 82144CBCh case   18:*/		return 0x82144CC0;
		  /* 82144CC0h */ case   19:  		/* lwzx R11, <#[R10 + R30]> */
		/* 82144CC0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82144CC0h case   19:*/		return 0x82144CC4;
		  /* 82144CC4h */ case   20:  		/* lwzx R10, <#[R8 + R30]> */
		/* 82144CC4h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R30 + 0x00000000) );
		/* 82144CC4h case   20:*/		return 0x82144CC8;
		  /* 82144CC8h */ case   21:  		/* add R26, R11, R26 */
		/* 82144CC8h case   21:*/		cpu::op::add<0>(regs,&regs.R26,regs.R11,regs.R26);
		/* 82144CC8h case   21:*/		return 0x82144CCC;
		  /* 82144CCCh */ case   22:  		/* lwzx R11, <#[R7 + R30]> */
		/* 82144CCCh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R30 + 0x00000000) );
		/* 82144CCCh case   22:*/		return 0x82144CD0;
	}
	return 0x82144CD0;
} // Block from 82144C74h-82144CD0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82144CD0h
// Function '??0CNodeUAsmRegister@D3DXShader@@QAA@PBUD3DXTOKEN@1@KKKHPAVCNode@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144CD0);
		  /* 82144CD0h */ case    0:  		/* add R19, R10, R19 */
		/* 82144CD0h case    0:*/		cpu::op::add<0>(regs,&regs.R19,regs.R10,regs.R19);
		/* 82144CD0h case    0:*/		return 0x82144CD4;
		  /* 82144CD4h */ case    1:  		/* stw R26, <#[R1 + 88]> */
		/* 82144CD4h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000058) );
		/* 82144CD4h case    1:*/		return 0x82144CD8;
		  /* 82144CD8h */ case    2:  		/* lwz R11, <#[R11 + 36]> */
		/* 82144CD8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 82144CD8h case    2:*/		return 0x82144CDC;
		  /* 82144CDCh */ case    3:  		/* subf R11, R9, R11 */
		/* 82144CDCh case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82144CDCh case    3:*/		return 0x82144CE0;
		  /* 82144CE0h */ case    4:  		/* cntlzw R11, R11 */
		/* 82144CE0h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82144CE0h case    4:*/		return 0x82144CE4;
		  /* 82144CE4h */ case    5:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82144CE4h case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82144CE4h case    5:*/		return 0x82144CE8;
		  /* 82144CE8h */ case    6:  		/* or R20, R11, R20 */
		/* 82144CE8h case    6:*/		cpu::op::or<0>(regs,&regs.R20,regs.R11,regs.R20);
		/* 82144CE8h case    6:*/		return 0x82144CEC;
		  /* 82144CECh */ case    7:  		/* bc 12, CR6_EQ, 96 */
		/* 82144CECh case    7:*/		if ( regs.CR[6].eq ) { return 0x82144D4C;  }
		/* 82144CECh case    7:*/		return 0x82144CF0;
		  /* 82144CF0h */ case    8:  		/* mtspr CTR, R29 */
		/* 82144CF0h case    8:*/		regs.CTR = regs.R29;
		/* 82144CF0h case    8:*/		return 0x82144CF4;
		  /* 82144CF4h */ case    9:  		/* lwz R11, <#[R31 + 4]> */
		/* 82144CF4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82144CF4h case    9:*/		return 0x82144CF8;
		  /* 82144CF8h */ case   10:  		/* lwz R9, <#[R28]> */
		/* 82144CF8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 82144CF8h case   10:*/		return 0x82144CFC;
		  /* 82144CFCh */ case   11:  		/* lwz R10, <#[R31 + 72]> */
		/* 82144CFCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000048) );
		/* 82144CFCh case   11:*/		return 0x82144D00;
		  /* 82144D00h */ case   12:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82144D00h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82144D00h case   12:*/		return 0x82144D04;
		  /* 82144D04h */ case   13:  		/* lwz R11, <#[R11 + 20]> */
		/* 82144D04h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82144D04h case   13:*/		return 0x82144D08;
		  /* 82144D08h */ case   14:  		/* lwzx R11, <#[R9 + R11]> */
		/* 82144D08h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82144D08h case   14:*/		return 0x82144D0C;
		  /* 82144D0Ch */ case   15:  		/* lwz R9, <#[R11 + 48]> */
		/* 82144D0Ch case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 82144D0Ch case   15:*/		return 0x82144D10;
		  /* 82144D10h */ case   16:  		/* cmplw CR6, R9, R10 */
		/* 82144D10h case   16:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82144D10h case   16:*/		return 0x82144D14;
		  /* 82144D14h */ case   17:  		/* bc 4, CR6_EQ, 16 */
		/* 82144D14h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82144D24;  }
		/* 82144D14h case   17:*/		return 0x82144D18;
		  /* 82144D18h */ case   18:  		/* lwz R9, <#[R11 + 116]> */
		/* 82144D18h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000074) );
		/* 82144D18h case   18:*/		return 0x82144D1C;
		  /* 82144D1Ch */ case   19:  		/* cmplw CR6, R24, R9 */
		/* 82144D1Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R9);
		/* 82144D1Ch case   19:*/		return 0x82144D20;
		  /* 82144D20h */ case   20:  		/* bc 4, CR6_EQ, 36 */
		/* 82144D20h case   20:*/		if ( !regs.CR[6].eq ) { return 0x82144D44;  }
		/* 82144D20h case   20:*/		return 0x82144D24;
	}
	return 0x82144D24;
} // Block from 82144CD0h-82144D24h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82144D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144D24);
		  /* 82144D24h */ case    0:  		/* lwz R9, <#[R11 + 116]> */
		/* 82144D24h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000074) );
		/* 82144D24h case    0:*/		return 0x82144D28;
		  /* 82144D28h */ case    1:  		/* li R8, -1 */
		/* 82144D28h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 82144D28h case    1:*/		return 0x82144D2C;
		  /* 82144D2Ch */ case    2:  		/* stw R10, <#[R11 + 48]> */
		/* 82144D2Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 82144D2Ch case    2:*/		return 0x82144D30;
		  /* 82144D30h */ case    3:  		/* subf R10, R24, R9 */
		/* 82144D30h case    3:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R24,regs.R9);
		/* 82144D30h case    3:*/		return 0x82144D34;
		  /* 82144D34h */ case    4:  		/* addic R10, R10, -1 */
		/* 82144D34h case    4:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82144D34h case    4:*/		return 0x82144D38;
		  /* 82144D38h */ case    5:  		/* subfe R10, R10, R10 */
		/* 82144D38h case    5:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82144D38h case    5:*/		return 0x82144D3C;
		  /* 82144D3Ch */ case    6:  		/* and R10, R10, R8 */
		/* 82144D3Ch case    6:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82144D3Ch case    6:*/		return 0x82144D40;
		  /* 82144D40h */ case    7:  		/* stw R10, <#[R11 + 84]> */
		/* 82144D40h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000054) );
		/* 82144D40h case    7:*/		return 0x82144D44;
	}
	return 0x82144D44;
} // Block from 82144D24h-82144D44h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82144D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144D44);
		  /* 82144D44h */ case    0:  		/* addi R28, R28, 4 */
		/* 82144D44h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 82144D44h case    0:*/		return 0x82144D48;
		  /* 82144D48h */ case    1:  		/* bc 16, CR0_LT, -84 */
		/* 82144D48h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144CF4;  }
		/* 82144D48h case    1:*/		return 0x82144D4C;
	}
	return 0x82144D4C;
} // Block from 82144D44h-82144D4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82144D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144D4C);
		  /* 82144D4Ch */ case    0:  		/* lwz R11, <#[R31 + 52]> */
		/* 82144D4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 82144D4Ch case    0:*/		return 0x82144D50;
		  /* 82144D50h */ case    1:  		/* lwzx R11, <#[R11 + R30]> */
		/* 82144D50h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82144D50h case    1:*/		return 0x82144D54;
		  /* 82144D54h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 82144D54h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82144D54h case    2:*/		return 0x82144D58;
		  /* 82144D58h */ case    3:  		/* bc 4, CR6_EQ, 36 */
		/* 82144D58h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82144D7C;  }
		/* 82144D58h case    3:*/		return 0x82144D5C;
		  /* 82144D5Ch */ case    4:  		/* lwz R11, <#[R25 + 20]> */
		/* 82144D5Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000014) );
		/* 82144D5Ch case    4:*/		return 0x82144D60;
	}
	return 0x82144D60;
} // Block from 82144D4Ch-82144D60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82144D60h
// Function '?Copy@CNodeUAsmRegister@D3DXShader@@UAAPAV12@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144D60);
		  /* 82144D60h */ case    0:  		/* lwz R10, <#[R1 + 84]> */
		/* 82144D60h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82144D60h case    0:*/		return 0x82144D64;
		  /* 82144D64h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 82144D64h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82144D64h case    1:*/		return 0x82144D68;
		  /* 82144D68h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 82144D68h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82144D7C;  }
		/* 82144D68h case    2:*/		return 0x82144D6C;
		  /* 82144D6Ch */ case    3:  		/* lwz R11, <#[R25 + 24]> */
		/* 82144D6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000018) );
		/* 82144D6Ch case    3:*/		return 0x82144D70;
		  /* 82144D70h */ case    4:  		/* lwz R10, <#[R1 + 92]> */
		/* 82144D70h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 82144D70h case    4:*/		return 0x82144D74;
		  /* 82144D74h */ case    5:  		/* cmpw CR6, R10, R11 */
		/* 82144D74h case    5:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 82144D74h case    5:*/		return 0x82144D78;
		  /* 82144D78h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 82144D78h case    6:*/		if ( regs.CR[6].eq ) { return 0x82144D90;  }
		/* 82144D78h case    6:*/		return 0x82144D7C;
	}
	return 0x82144D7C;
} // Block from 82144D60h-82144D7Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82144D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144D7C);
		  /* 82144D7Ch */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 82144D7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82144D7Ch case    0:*/		return 0x82144D80;
		  /* 82144D80h */ case    1:  		/* add R27, R23, R27 */
		/* 82144D80h case    1:*/		cpu::op::add<0>(regs,&regs.R27,regs.R23,regs.R27);
		/* 82144D80h case    1:*/		return 0x82144D84;
		  /* 82144D84h */ case    2:  		/* add R22, R21, R22 */
		/* 82144D84h case    2:*/		cpu::op::add<0>(regs,&regs.R22,regs.R21,regs.R22);
		/* 82144D84h case    2:*/		return 0x82144D88;
		  /* 82144D88h */ case    3:  		/* cmplw CR6, R27, R11 */
		/* 82144D88h case    3:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 82144D88h case    3:*/		return 0x82144D8C;
		  /* 82144D8Ch */ case    4:  		/* bc 12, CR6_LT, -444 */
		/* 82144D8Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x82144BD0;  }
		/* 82144D8Ch case    4:*/		return 0x82144D90;
	}
	return 0x82144D90;
} // Block from 82144D7Ch-82144D90h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82144D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144D90);
		  /* 82144D90h */ case    0:  		/* cmplw CR6, R18, R17 */
		/* 82144D90h case    0:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R17);
		/* 82144D90h case    0:*/		return 0x82144D94;
		  /* 82144D94h */ case    1:  		/* bc 4, CR6_LT, 900 */
		/* 82144D94h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82145118;  }
		/* 82144D94h case    1:*/		return 0x82144D98;
		  /* 82144D98h */ case    2:  		/* addi R11, R18, 1 */
		/* 82144D98h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R18,0x1);
		/* 82144D98h case    2:*/		return 0x82144D9C;
		  /* 82144D9Ch */ case    3:  		/* cmplw CR6, R11, R17 */
		/* 82144D9Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 82144D9Ch case    3:*/		return 0x82144DA0;
		  /* 82144DA0h */ case    4:  		/* bc 4, CR6_LT, 24 */
		/* 82144DA0h case    4:*/		if ( !regs.CR[6].lt ) { return 0x82144DB8;  }
		/* 82144DA0h case    4:*/		return 0x82144DA4;
		  /* 82144DA4h */ case    5:  		/* addi R5, R1, 88 */
		/* 82144DA4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 82144DA4h case    5:*/		return 0x82144DA8;
		  /* 82144DA8h */ case    6:  		/* lwz R4, <#[R31 + 24]> */
		/* 82144DA8h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 82144DA8h case    6:*/		return 0x82144DAC;
		  /* 82144DACh */ case    7:  		/* mr R3, R31 */
		/* 82144DACh case    7:*/		regs.R3 = regs.R31;
		/* 82144DACh case    7:*/		return 0x82144DB0;
		  /* 82144DB0h */ case    8:  		/* bl -1560 */
		/* 82144DB0h case    8:*/		regs.LR = 0x82144DB4; return 0x82144798;
		/* 82144DB0h case    8:*/		return 0x82144DB4;
		  /* 82144DB4h */ case    9:  		/* lwz R26, <#[R1 + 88]> */
		/* 82144DB4h case    9:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000058) );
		/* 82144DB4h case    9:*/		return 0x82144DB8;
	}
	return 0x82144DB8;
} // Block from 82144D90h-82144DB8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82144DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144DB8);
		  /* 82144DB8h */ case    0:  		/* lwz R29, <#[R1 + 80]> */
		/* 82144DB8h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82144DB8h case    0:*/		return 0x82144DBC;
		  /* 82144DBCh */ case    1:  		/* cmpwi CR6, R20, 0 */
		/* 82144DBCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 82144DBCh case    1:*/		return 0x82144DC0;
		  /* 82144DC0h */ case    2:  		/* bc 4, CR6_EQ, 172 */
		/* 82144DC0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82144E6C;  }
		/* 82144DC0h case    2:*/		return 0x82144DC4;
		  /* 82144DC4h */ case    3:  		/* cmpwi CR6, R29, 0 */
		/* 82144DC4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82144DC4h case    3:*/		return 0x82144DC8;
		  /* 82144DC8h */ case    4:  		/* bc 4, CR6_LT, 84 */
		/* 82144DC8h case    4:*/		if ( !regs.CR[6].lt ) { return 0x82144E1C;  }
		/* 82144DC8h case    4:*/		return 0x82144DCC;
		  /* 82144DCCh */ case    5:  		/* mr R8, R19 */
		/* 82144DCCh case    5:*/		regs.R8 = regs.R19;
		/* 82144DCCh case    5:*/		return 0x82144DD0;
		  /* 82144DD0h */ case    6:  		/* cmplwi CR6, R26, 0 */
		/* 82144DD0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82144DD0h case    6:*/		return 0x82144DD4;
		  /* 82144DD4h */ case    7:  		/* bc 12, CR6_EQ, 60 */
		/* 82144DD4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82144E10;  }
		/* 82144DD4h case    7:*/		return 0x82144DD8;
		  /* 82144DD8h */ case    8:  		/* lwz R9, <#[R31 + 4]> */
		/* 82144DD8h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82144DD8h case    8:*/		return 0x82144DDC;
		  /* 82144DDCh */ case    9:  		/* li R11, 0 */
		/* 82144DDCh case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82144DDCh case    9:*/		return 0x82144DE0;
		  /* 82144DE0h */ case   10:  		/* lwz R10, <#[R31 + 24]> */
		/* 82144DE0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82144DE0h case   10:*/		return 0x82144DE4;
		  /* 82144DE4h */ case   11:  		/* mtspr CTR, R26 */
		/* 82144DE4h case   11:*/		regs.CTR = regs.R26;
		/* 82144DE4h case   11:*/		return 0x82144DE8;
		  /* 82144DE8h */ case   12:  		/* lwz R9, <#[R9 + 20]> */
		/* 82144DE8h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000014) );
		/* 82144DE8h case   12:*/		return 0x82144DEC;
		  /* 82144DECh */ case   13:  		/* lwzx R7, <#[R11 + R10]> */
		/* 82144DECh case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82144DECh case   13:*/		return 0x82144DF0;
		  /* 82144DF0h */ case   14:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82144DF0h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82144DF0h case   14:*/		return 0x82144DF4;
		  /* 82144DF4h */ case   15:  		/* lwzx R7, <#[R7 + R9]> */
		/* 82144DF4h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 82144DF4h case   15:*/		return 0x82144DF8;
		  /* 82144DF8h */ case   16:  		/* lwz R7, <#[R7 + 84]> */
		/* 82144DF8h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000054) );
		/* 82144DF8h case   16:*/		return 0x82144DFC;
		  /* 82144DFCh */ case   17:  		/* cmplwi CR6, R7, 1 */
		/* 82144DFCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000001);
		/* 82144DFCh case   17:*/		return 0x82144E00;
		  /* 82144E00h */ case   18:  		/* bc 4, CR6_EQ, 8 */
		/* 82144E00h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82144E08;  }
		/* 82144E00h case   18:*/		return 0x82144E04;
		  /* 82144E04h */ case   19:  		/* addi R8, R8, -1 */
		/* 82144E04h case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 82144E04h case   19:*/		return 0x82144E08;
	}
	return 0x82144E08;
} // Block from 82144DB8h-82144E08h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82144E08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144E08);
		  /* 82144E08h */ case    0:  		/* addi R11, R11, 4 */
		/* 82144E08h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82144E08h case    0:*/		return 0x82144E0C;
		  /* 82144E0Ch */ case    1:  		/* bc 16, CR0_LT, -32 */
		/* 82144E0Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144DEC;  }
		/* 82144E0Ch case    1:*/		return 0x82144E10;
	}
	return 0x82144E10;
} // Block from 82144E08h-82144E10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82144E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144E10);
		  /* 82144E10h */ case    0:  		/* cmpw CR6, R29, R8 */
		/* 82144E10h case    0:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R8);
		/* 82144E10h case    0:*/		return 0x82144E14;
		  /* 82144E14h */ case    1:  		/* bc 4, CR6_GT, 88 */
		/* 82144E14h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82144E6C;  }
		/* 82144E14h case    1:*/		return 0x82144E18;
		  /* 82144E18h */ case    2:  		/* b 80 */
		/* 82144E18h case    2:*/		return 0x82144E68;
		/* 82144E18h case    2:*/		return 0x82144E1C;
	}
	return 0x82144E1C;
} // Block from 82144E10h-82144E1Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82144E1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144E1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144E1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144E1C);
		  /* 82144E1Ch */ case    0:  		/* mr R8, R29 */
		/* 82144E1Ch case    0:*/		regs.R8 = regs.R29;
		/* 82144E1Ch case    0:*/		return 0x82144E20;
		  /* 82144E20h */ case    1:  		/* cmplwi CR6, R16, 0 */
		/* 82144E20h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82144E20h case    1:*/		return 0x82144E24;
		  /* 82144E24h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 82144E24h case    2:*/		if ( regs.CR[6].eq ) { return 0x82144E60;  }
		/* 82144E24h case    2:*/		return 0x82144E28;
		  /* 82144E28h */ case    3:  		/* lwz R9, <#[R31 + 4]> */
		/* 82144E28h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82144E28h case    3:*/		return 0x82144E2C;
		  /* 82144E2Ch */ case    4:  		/* li R11, 0 */
		/* 82144E2Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82144E2Ch case    4:*/		return 0x82144E30;
		  /* 82144E30h */ case    5:  		/* lwz R10, <#[R31 + 20]> */
		/* 82144E30h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82144E30h case    5:*/		return 0x82144E34;
		  /* 82144E34h */ case    6:  		/* mtspr CTR, R16 */
		/* 82144E34h case    6:*/		regs.CTR = regs.R16;
		/* 82144E34h case    6:*/		return 0x82144E38;
		  /* 82144E38h */ case    7:  		/* lwz R9, <#[R9 + 20]> */
		/* 82144E38h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000014) );
		/* 82144E38h case    7:*/		return 0x82144E3C;
		  /* 82144E3Ch */ case    8:  		/* lwzx R7, <#[R11 + R10]> */
		/* 82144E3Ch case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82144E3Ch case    8:*/		return 0x82144E40;
		  /* 82144E40h */ case    9:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82144E40h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82144E40h case    9:*/		return 0x82144E44;
		  /* 82144E44h */ case   10:  		/* lwzx R7, <#[R7 + R9]> */
		/* 82144E44h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 82144E44h case   10:*/		return 0x82144E48;
		  /* 82144E48h */ case   11:  		/* lwz R7, <#[R7 + 84]> */
		/* 82144E48h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000054) );
		/* 82144E48h case   11:*/		return 0x82144E4C;
		  /* 82144E4Ch */ case   12:  		/* cmpwi CR6, R7, -1 */
		/* 82144E4Ch case   12:*/		cpu::op::cmpwi<6>(regs,regs.R7,0xFFFFFFFF);
		/* 82144E4Ch case   12:*/		return 0x82144E50;
		  /* 82144E50h */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 82144E50h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82144E58;  }
		/* 82144E50h case   13:*/		return 0x82144E54;
		  /* 82144E54h */ case   14:  		/* addi R8, R8, -1 */
		/* 82144E54h case   14:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 82144E54h case   14:*/		return 0x82144E58;
	}
	return 0x82144E58;
} // Block from 82144E1Ch-82144E58h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82144E58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144E58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144E58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144E58);
		  /* 82144E58h */ case    0:  		/* addi R11, R11, 4 */
		/* 82144E58h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82144E58h case    0:*/		return 0x82144E5C;
		  /* 82144E5Ch */ case    1:  		/* bc 16, CR0_LT, -32 */
		/* 82144E5Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144E3C;  }
		/* 82144E5Ch case    1:*/		return 0x82144E60;
	}
	return 0x82144E60;
} // Block from 82144E58h-82144E60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82144E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144E60);
		  /* 82144E60h */ case    0:  		/* cmpw CR6, R8, R19 */
		/* 82144E60h case    0:*/		cpu::op::cmpw<6>(regs,regs.R8,regs.R19);
		/* 82144E60h case    0:*/		return 0x82144E64;
		  /* 82144E64h */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 82144E64h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82144E6C;  }
		/* 82144E64h case    1:*/		return 0x82144E68;
	}
	return 0x82144E68;
} // Block from 82144E60h-82144E68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82144E68h
// Function '??0CNodeUAsmBlock@D3DXShader@@QAA@PAVCNode@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144E68);
		  /* 82144E68h */ case    0:  		/* li R20, 1 */
		/* 82144E68h case    0:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 82144E68h case    0:*/		return 0x82144E6C;
	}
	return 0x82144E6C;
} // Block from 82144E68h-82144E6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82144E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144E6C);
		  /* 82144E6Ch */ case    0:  		/* cmplw CR6, R15, R18 */
		/* 82144E6Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R15,regs.R18);
		/* 82144E6Ch case    0:*/		return 0x82144E70;
		  /* 82144E70h */ case    1:  		/* mr R7, R15 */
		/* 82144E70h case    1:*/		regs.R7 = regs.R15;
		/* 82144E70h case    1:*/		return 0x82144E74;
		  /* 82144E74h */ case    2:  		/* bc 12, CR6_LT, 8 */
		/* 82144E74h case    2:*/		if ( regs.CR[6].lt ) { return 0x82144E7C;  }
		/* 82144E74h case    2:*/		return 0x82144E78;
		  /* 82144E78h */ case    3:  		/* mr R7, R18 */
		/* 82144E78h case    3:*/		regs.R7 = regs.R18;
		/* 82144E78h case    3:*/		return 0x82144E7C;
	}
	return 0x82144E7C;
} // Block from 82144E6Ch-82144E7Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144E7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144E7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144E7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144E7C);
		  /* 82144E7Ch */ case    0:  		/* cmplw CR6, R14, R17 */
		/* 82144E7Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R17);
		/* 82144E7Ch case    0:*/		return 0x82144E80;
		  /* 82144E80h */ case    1:  		/* mr R8, R14 */
		/* 82144E80h case    1:*/		regs.R8 = regs.R14;
		/* 82144E80h case    1:*/		return 0x82144E84;
		  /* 82144E84h */ case    2:  		/* bc 12, CR6_GT, 8 */
		/* 82144E84h case    2:*/		if ( regs.CR[6].gt ) { return 0x82144E8C;  }
		/* 82144E84h case    2:*/		return 0x82144E88;
		  /* 82144E88h */ case    3:  		/* mr R8, R17 */
		/* 82144E88h case    3:*/		regs.R8 = regs.R17;
		/* 82144E88h case    3:*/		return 0x82144E8C;
	}
	return 0x82144E8C;
} // Block from 82144E7Ch-82144E8Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144E8C);
		  /* 82144E8Ch */ case    0:  		/* cmpwi CR6, R20, 0 */
		/* 82144E8Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 82144E8Ch case    0:*/		return 0x82144E90;
		  /* 82144E90h */ case    1:  		/* bc 12, CR6_EQ, 332 */
		/* 82144E90h case    1:*/		if ( regs.CR[6].eq ) { return 0x82144FDC;  }
		/* 82144E90h case    1:*/		return 0x82144E94;
		  /* 82144E94h */ case    2:  		/* mr R15, R7 */
		/* 82144E94h case    2:*/		regs.R15 = regs.R7;
		/* 82144E94h case    2:*/		return 0x82144E98;
		  /* 82144E98h */ case    3:  		/* mr R14, R8 */
		/* 82144E98h case    3:*/		regs.R14 = regs.R8;
		/* 82144E98h case    3:*/		return 0x82144E9C;
		  /* 82144E9Ch */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 82144E9Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82144E9Ch case    4:*/		return 0x82144EA0;
		  /* 82144EA0h */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 82144EA0h case    5:*/		if ( regs.CR[6].eq ) { return 0x82144EE0;  }
		/* 82144EA0h case    5:*/		return 0x82144EA4;
		  /* 82144EA4h */ case    6:  		/* mtspr CTR, R26 */
		/* 82144EA4h case    6:*/		regs.CTR = regs.R26;
		/* 82144EA4h case    6:*/		return 0x82144EA8;
		  /* 82144EA8h */ case    7:  		/* li R11, 0 */
		/* 82144EA8h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82144EA8h case    7:*/		return 0x82144EAC;
		  /* 82144EACh */ case    8:  		/* lwz R10, <#[R31 + 24]> */
		/* 82144EACh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82144EACh case    8:*/		return 0x82144EB0;
		  /* 82144EB0h */ case    9:  		/* lwz R9, <#[R31 + 4]> */
		/* 82144EB0h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82144EB0h case    9:*/		return 0x82144EB4;
		  /* 82144EB4h */ case   10:  		/* lwzx R10, <#[R11 + R10]> */
		/* 82144EB4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82144EB4h case   10:*/		return 0x82144EB8;
	}
	return 0x82144EB8;
} // Block from 82144E8Ch-82144EB8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82144EB8h
// Function '?Copy@CNodeUAsmBlock@D3DXShader@@UAAPAV12@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144EB8);
		  /* 82144EB8h */ case    0:  		/* addi R11, R11, 4 */
		/* 82144EB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82144EB8h case    0:*/		return 0x82144EBC;
		  /* 82144EBCh */ case    1:  		/* lwz R9, <#[R9 + 20]> */
		/* 82144EBCh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000014) );
		/* 82144EBCh case    1:*/		return 0x82144EC0;
		  /* 82144EC0h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82144EC0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82144EC0h case    2:*/		return 0x82144EC4;
		  /* 82144EC4h */ case    3:  		/* lwzx R9, <#[R10 + R9]> */
		/* 82144EC4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82144EC4h case    3:*/		return 0x82144EC8;
		  /* 82144EC8h */ case    4:  		/* lwz R10, <#[R9 + 84]> */
		/* 82144EC8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000054) );
		/* 82144EC8h case    4:*/		return 0x82144ECC;
		  /* 82144ECCh */ case    5:  		/* addi R10, R10, 0 */
		/* 82144ECCh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x0);
		/* 82144ECCh case    5:*/		return 0x82144ED0;
		  /* 82144ED0h */ case    6:  		/* addic R8, R10, -1 */
		/* 82144ED0h case    6:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R10,0xFFFFFFFF);
		/* 82144ED0h case    6:*/		return 0x82144ED4;
		  /* 82144ED4h */ case    7:  		/* subfe R10, R8, R10 */
		/* 82144ED4h case    7:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82144ED4h case    7:*/		return 0x82144ED8;
		  /* 82144ED8h */ case    8:  		/* stw R10, <#[R9 + 84]> */
		/* 82144ED8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000054) );
		/* 82144ED8h case    8:*/		return 0x82144EDC;
		  /* 82144EDCh */ case    9:  		/* bc 16, CR0_LT, -48 */
		/* 82144EDCh case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144EAC;  }
		/* 82144EDCh case    9:*/		return 0x82144EE0;
	}
	return 0x82144EE0;
} // Block from 82144EB8h-82144EE0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82144EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144EE0);
		  /* 82144EE0h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82144EE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82144EE0h case    0:*/		return 0x82144EE4;
		  /* 82144EE4h */ case    1:  		/* rlwinm R10, R16, 2, 0, 29 */
		/* 82144EE4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R16);
		/* 82144EE4h case    1:*/		return 0x82144EE8;
		  /* 82144EE8h */ case    2:  		/* rlwinm R5, R26, 2, 0, 29 */
		/* 82144EE8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R26);
		/* 82144EE8h case    2:*/		return 0x82144EEC;
		  /* 82144EECh */ case    3:  		/* lwz R4, <#[R31 + 24]> */
		/* 82144EECh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 82144EECh case    3:*/		return 0x82144EF0;
		  /* 82144EF0h */ case    4:  		/* add R3, R10, R11 */
		/* 82144EF0h case    4:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82144EF0h case    4:*/		return 0x82144EF4;
		  /* 82144EF4h */ case    5:  		/* bl -734532 */
		/* 82144EF4h case    5:*/		regs.LR = 0x82144EF8; return 0x820919B0;
		/* 82144EF4h case    5:*/		return 0x82144EF8;
		  /* 82144EF8h */ case    6:  		/* add R11, R26, R16 */
		/* 82144EF8h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R26,regs.R16);
		/* 82144EF8h case    6:*/		return 0x82144EFC;
		  /* 82144EFCh */ case    7:  		/* add R29, R19, R29 */
		/* 82144EFCh case    7:*/		cpu::op::add<0>(regs,&regs.R29,regs.R19,regs.R29);
		/* 82144EFCh case    7:*/		return 0x82144F00;
	}
	return 0x82144F00;
} // Block from 82144EE0h-82144F00h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82144F00h
// Function '??_ECNodeUAsmInstruction@D3DXShader@@UAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144F00);
		  /* 82144F00h */ case    0:  		/* lwz R4, <#[R31 + 20]> */
		/* 82144F00h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 82144F00h case    0:*/		return 0x82144F04;
		  /* 82144F04h */ case    1:  		/* stw R11, <#[R1 + 88]> */
		/* 82144F04h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82144F04h case    1:*/		return 0x82144F08;
		  /* 82144F08h */ case    2:  		/* addi R5, R1, 88 */
		/* 82144F08h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 82144F08h case    2:*/		return 0x82144F0C;
		  /* 82144F0Ch */ case    3:  		/* mr R3, R31 */
		/* 82144F0Ch case    3:*/		regs.R3 = regs.R31;
		/* 82144F0Ch case    3:*/		return 0x82144F10;
	}
	return 0x82144F10;
} // Block from 82144F00h-82144F10h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144F10h
// Function '??_GCNodeUAsmRegister@D3DXShader@@UAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144F10);
		  /* 82144F10h */ case    0:  		/* stw R29, <#[R1 + 80]> */
		/* 82144F10h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82144F10h case    0:*/		return 0x82144F14;
		  /* 82144F14h */ case    1:  		/* bl -1916 */
		/* 82144F14h case    1:*/		regs.LR = 0x82144F18; return 0x82144798;
		/* 82144F14h case    1:*/		return 0x82144F18;
		  /* 82144F18h */ case    2:  		/* subf R11, R18, R17 */
		/* 82144F18h case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R18,regs.R17);
		/* 82144F18h case    2:*/		return 0x82144F1C;
		  /* 82144F1Ch */ case    3:  		/* rlwinm R8, R18, 2, 0, 29 */
		/* 82144F1Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R18);
		/* 82144F1Ch case    3:*/		return 0x82144F20;
	}
	return 0x82144F20;
} // Block from 82144F10h-82144F20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144F20h
// Function '??_GCNodeUAsmBlock@D3DXShader@@UAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144F20);
		  /* 82144F20h */ case    0:  		/* mtspr CTR, R11 */
		/* 82144F20h case    0:*/		regs.CTR = regs.R11;
		/* 82144F20h case    0:*/		return 0x82144F24;
		  /* 82144F24h */ case    1:  		/* lwz R11, <#[R31 + 60]> */
		/* 82144F24h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 82144F24h case    1:*/		return 0x82144F28;
		  /* 82144F28h */ case    2:  		/* li R10, 0 */
		/* 82144F28h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82144F28h case    2:*/		return 0x82144F2C;
		  /* 82144F2Ch */ case    3:  		/* lwz R9, <#[R31 + 4]> */
		/* 82144F2Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82144F2Ch case    3:*/		return 0x82144F30;
	}
	return 0x82144F30;
} // Block from 82144F20h-82144F30h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144F30h
// Function '?Initialize@CPool@D3DXShader@@QAAJPBDKII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144F30);
		  /* 82144F30h */ case    0:  		/* lwzx R11, <#[R8 + R11]> */
		/* 82144F30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82144F30h case    0:*/		return 0x82144F34;
		  /* 82144F34h */ case    1:  		/* lwz R9, <#[R9 + 24]> */
		/* 82144F34h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000018) );
		/* 82144F34h case    1:*/		return 0x82144F38;
		  /* 82144F38h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82144F38h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82144F38h case    2:*/		return 0x82144F3C;
		  /* 82144F3Ch */ case    3:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82144F3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82144F3Ch case    3:*/		return 0x82144F40;
		  /* 82144F40h */ case    4:  		/* lwz R9, <#[R11 + 20]> */
		/* 82144F40h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 82144F40h case    4:*/		return 0x82144F44;
		  /* 82144F44h */ case    5:  		/* cmplwi CR6, R9, 0 */
		/* 82144F44h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82144F44h case    5:*/		return 0x82144F48;
		  /* 82144F48h */ case    6:  		/* bc 4, CR6_GT, 60 */
		/* 82144F48h case    6:*/		if ( !regs.CR[6].gt ) { return 0x82144F84;  }
		/* 82144F48h case    6:*/		return 0x82144F4C;
		  /* 82144F4Ch */ case    7:  		/* li R9, 0 */
		/* 82144F4Ch case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82144F4Ch case    7:*/		return 0x82144F50;
		  /* 82144F50h */ case    8:  		/* lwz R7, <#[R11 + 24]> */
		/* 82144F50h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000018) );
		/* 82144F50h case    8:*/		return 0x82144F54;
		  /* 82144F54h */ case    9:  		/* addi R10, R10, 1 */
		/* 82144F54h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82144F54h case    9:*/		return 0x82144F58;
		  /* 82144F58h */ case   10:  		/* lwz R6, <#[R31 + 4]> */
		/* 82144F58h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82144F58h case   10:*/		return 0x82144F5C;
		  /* 82144F5Ch */ case   11:  		/* lwz R5, <#[R31 + 72]> */
		/* 82144F5Ch case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000048) );
		/* 82144F5Ch case   11:*/		return 0x82144F60;
		  /* 82144F60h */ case   12:  		/* lwzx R7, <#[R9 + R7]> */
		/* 82144F60h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 82144F60h case   12:*/		return 0x82144F64;
		  /* 82144F64h */ case   13:  		/* addi R9, R9, 4 */
		/* 82144F64h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82144F64h case   13:*/		return 0x82144F68;
		  /* 82144F68h */ case   14:  		/* lwz R6, <#[R6 + 24]> */
		/* 82144F68h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000018) );
		/* 82144F68h case   14:*/		return 0x82144F6C;
		  /* 82144F6Ch */ case   15:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82144F6Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82144F6Ch case   15:*/		return 0x82144F70;
		  /* 82144F70h */ case   16:  		/* lwzx R7, <#[R7 + R6]> */
		/* 82144F70h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 82144F70h case   16:*/		return 0x82144F74;
		  /* 82144F74h */ case   17:  		/* stw R5, <#[R7 + 36]> */
		/* 82144F74h case   17:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R7 + 0x00000024) );
		/* 82144F74h case   17:*/		return 0x82144F78;
		  /* 82144F78h */ case   18:  		/* lwz R7, <#[R11 + 20]> */
		/* 82144F78h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000014) );
		/* 82144F78h case   18:*/		return 0x82144F7C;
		  /* 82144F7Ch */ case   19:  		/* cmplw CR6, R10, R7 */
		/* 82144F7Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 82144F7Ch case   19:*/		return 0x82144F80;
		  /* 82144F80h */ case   20:  		/* bc 12, CR6_LT, -48 */
		/* 82144F80h case   20:*/		if ( regs.CR[6].lt ) { return 0x82144F50;  }
		/* 82144F80h case   20:*/		return 0x82144F84;
	}
	return 0x82144F84;
} // Block from 82144F30h-82144F84h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82144F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144F84);
		  /* 82144F84h */ case    0:  		/* lwz R10, <#[R11 + 28]> */
		/* 82144F84h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 82144F84h case    0:*/		return 0x82144F88;
	}
	return 0x82144F88;
} // Block from 82144F84h-82144F88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82144F88h
// Function '?Initialize@CPool@D3DXShader@@QAAJPAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144F88);
		  /* 82144F88h */ case    0:  		/* li R9, 0 */
		/* 82144F88h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82144F88h case    0:*/		return 0x82144F8C;
		  /* 82144F8Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 82144F8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82144F8Ch case    1:*/		return 0x82144F90;
		  /* 82144F90h */ case    2:  		/* bc 4, CR6_GT, 60 */
		/* 82144F90h case    2:*/		if ( !regs.CR[6].gt ) { return 0x82144FCC;  }
		/* 82144F90h case    2:*/		return 0x82144F94;
		  /* 82144F94h */ case    3:  		/* li R10, 0 */
		/* 82144F94h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82144F94h case    3:*/		return 0x82144F98;
		  /* 82144F98h */ case    4:  		/* lwz R7, <#[R11 + 32]> */
		/* 82144F98h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000020) );
		/* 82144F98h case    4:*/		return 0x82144F9C;
		  /* 82144F9Ch */ case    5:  		/* addi R9, R9, 1 */
		/* 82144F9Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82144F9Ch case    5:*/		return 0x82144FA0;
		  /* 82144FA0h */ case    6:  		/* lwz R6, <#[R31 + 4]> */
		/* 82144FA0h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 82144FA0h case    6:*/		return 0x82144FA4;
		  /* 82144FA4h */ case    7:  		/* lwz R5, <#[R31 + 72]> */
		/* 82144FA4h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000048) );
		/* 82144FA4h case    7:*/		return 0x82144FA8;
		  /* 82144FA8h */ case    8:  		/* lwzx R7, <#[R10 + R7]> */
		/* 82144FA8h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82144FA8h case    8:*/		return 0x82144FAC;
		  /* 82144FACh */ case    9:  		/* addi R10, R10, 4 */
		/* 82144FACh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82144FACh case    9:*/		return 0x82144FB0;
		  /* 82144FB0h */ case   10:  		/* lwz R6, <#[R6 + 24]> */
		/* 82144FB0h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000018) );
		/* 82144FB0h case   10:*/		return 0x82144FB4;
		  /* 82144FB4h */ case   11:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82144FB4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82144FB4h case   11:*/		return 0x82144FB8;
		  /* 82144FB8h */ case   12:  		/* lwzx R7, <#[R7 + R6]> */
		/* 82144FB8h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 82144FB8h case   12:*/		return 0x82144FBC;
		  /* 82144FBCh */ case   13:  		/* stw R5, <#[R7 + 36]> */
		/* 82144FBCh case   13:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R7 + 0x00000024) );
		/* 82144FBCh case   13:*/		return 0x82144FC0;
		  /* 82144FC0h */ case   14:  		/* lwz R7, <#[R11 + 28]> */
		/* 82144FC0h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000001C) );
		/* 82144FC0h case   14:*/		return 0x82144FC4;
		  /* 82144FC4h */ case   15:  		/* cmplw CR6, R9, R7 */
		/* 82144FC4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 82144FC4h case   15:*/		return 0x82144FC8;
		  /* 82144FC8h */ case   16:  		/* bc 12, CR6_LT, -48 */
		/* 82144FC8h case   16:*/		if ( regs.CR[6].lt ) { return 0x82144F98;  }
		/* 82144FC8h case   16:*/		return 0x82144FCC;
	}
	return 0x82144FCC;
} // Block from 82144F88h-82144FCCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 82144FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144FCC);
		  /* 82144FCCh */ case    0:  		/* addi R8, R8, 4 */
		/* 82144FCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82144FCCh case    0:*/		return 0x82144FD0;
		  /* 82144FD0h */ case    1:  		/* bc 16, CR0_LT, -172 */
		/* 82144FD0h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144F24;  }
		/* 82144FD0h case    1:*/		return 0x82144FD4;
		  /* 82144FD4h */ case    2:  		/* lwz R16, <#[R1 + 88]> */
		/* 82144FD4h case    2:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x00000058) );
		/* 82144FD4h case    2:*/		return 0x82144FD8;
		  /* 82144FD8h */ case    3:  		/* b -1120 */
		/* 82144FD8h case    3:*/		return 0x82144B78;
		/* 82144FD8h case    3:*/		return 0x82144FDC;
	}
	return 0x82144FDC;
} // Block from 82144FCCh-82144FDCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82144FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82144FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82144FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82144FDC);
		  /* 82144FDCh */ case    0:  		/* subf R11, R15, R14 */
		/* 82144FDCh case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R15,regs.R14);
		/* 82144FDCh case    0:*/		return 0x82144FE0;
		  /* 82144FE0h */ case    1:  		/* addi R9, R14, -1 */
		/* 82144FE0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R14,0xFFFFFFFF);
		/* 82144FE0h case    1:*/		return 0x82144FE4;
		  /* 82144FE4h */ case    2:  		/* rlwinm. R10, R11, 31, 1, 31 */
		/* 82144FE4h case    2:*/		cpu::op::rlwinm<1,31,1,31>(regs,&regs.R10,regs.R11);
		/* 82144FE4h case    2:*/		return 0x82144FE8;
		  /* 82144FE8h */ case    3:  		/* bc 12, CR0_EQ, 52 */
		/* 82144FE8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8214501C;  }
		/* 82144FE8h case    3:*/		return 0x82144FEC;
		  /* 82144FECh */ case    4:  		/* mtspr CTR, R10 */
		/* 82144FECh case    4:*/		regs.CTR = regs.R10;
		/* 82144FECh case    4:*/		return 0x82144FF0;
		  /* 82144FF0h */ case    5:  		/* rlwinm R11, R15, 2, 0, 29 */
		/* 82144FF0h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R15);
		/* 82144FF0h case    5:*/		return 0x82144FF4;
		  /* 82144FF4h */ case    6:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82144FF4h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82144FF4h case    6:*/		return 0x82144FF8;
		  /* 82144FF8h */ case    7:  		/* lwz R9, <#[R31 + 60]> */
		/* 82144FF8h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 82144FF8h case    7:*/		return 0x82144FFC;
		  /* 82144FFCh */ case    8:  		/* lwzx R6, <#[R10 + R9]> */
		/* 82144FFCh case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82144FFCh case    8:*/		return 0x82145000;
		  /* 82145000h */ case    9:  		/* lwzx R5, <#[R11 + R9]> */
		/* 82145000h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82145000h case    9:*/		return 0x82145004;
		  /* 82145004h */ case   10:  		/* stwx R6, <#[R11 + R9]> */
		/* 82145004h case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82145004h case   10:*/		return 0x82145008;
		  /* 82145008h */ case   11:  		/* addi R11, R11, 4 */
		/* 82145008h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82145008h case   11:*/		return 0x8214500C;
		  /* 8214500Ch */ case   12:  		/* lwz R9, <#[R31 + 60]> */
		/* 8214500Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 8214500Ch case   12:*/		return 0x82145010;
	}
	return 0x82145010;
} // Block from 82144FDCh-82145010h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82145010h
// Function '?Read@CTReorderInstructions@D3DXShader@@IAAXII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145010);
		  /* 82145010h */ case    0:  		/* stwx R5, <#[R10 + R9]> */
		/* 82145010h case    0:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82145010h case    0:*/		return 0x82145014;
		  /* 82145014h */ case    1:  		/* addi R10, R10, -4 */
		/* 82145014h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 82145014h case    1:*/		return 0x82145018;
		  /* 82145018h */ case    2:  		/* bc 16, CR0_LT, -32 */
		/* 82145018h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82144FF8;  }
		/* 82145018h case    2:*/		return 0x8214501C;
	}
	return 0x8214501C;
} // Block from 82145010h-8214501Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214501Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214501C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214501C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214501C);
		  /* 8214501Ch */ case    0:  		/* subf R30, R18, R17 */
		/* 8214501Ch case    0:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R18,regs.R17);
		/* 8214501Ch case    0:*/		return 0x82145020;
		  /* 82145020h */ case    1:  		/* addi R9, R17, -1 */
		/* 82145020h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R17,0xFFFFFFFF);
		/* 82145020h case    1:*/		return 0x82145024;
		  /* 82145024h */ case    2:  		/* rlwinm. R10, R30, 31, 1, 31 */
		/* 82145024h case    2:*/		cpu::op::rlwinm<1,31,1,31>(regs,&regs.R10,regs.R30);
		/* 82145024h case    2:*/		return 0x82145028;
		  /* 82145028h */ case    3:  		/* bc 12, CR0_EQ, 52 */
		/* 82145028h case    3:*/		if ( regs.CR[0].eq ) { return 0x8214505C;  }
		/* 82145028h case    3:*/		return 0x8214502C;
		  /* 8214502Ch */ case    4:  		/* mtspr CTR, R10 */
		/* 8214502Ch case    4:*/		regs.CTR = regs.R10;
		/* 8214502Ch case    4:*/		return 0x82145030;
		  /* 82145030h */ case    5:  		/* rlwinm R11, R18, 2, 0, 29 */
		/* 82145030h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R18);
		/* 82145030h case    5:*/		return 0x82145034;
		  /* 82145034h */ case    6:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82145034h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82145034h case    6:*/		return 0x82145038;
		  /* 82145038h */ case    7:  		/* lwz R9, <#[R31 + 60]> */
		/* 82145038h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 82145038h case    7:*/		return 0x8214503C;
		  /* 8214503Ch */ case    8:  		/* lwzx R6, <#[R10 + R9]> */
		/* 8214503Ch case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8214503Ch case    8:*/		return 0x82145040;
		  /* 82145040h */ case    9:  		/* lwzx R5, <#[R11 + R9]> */
		/* 82145040h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82145040h case    9:*/		return 0x82145044;
		  /* 82145044h */ case   10:  		/* stwx R6, <#[R11 + R9]> */
		/* 82145044h case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82145044h case   10:*/		return 0x82145048;
		  /* 82145048h */ case   11:  		/* addi R11, R11, 4 */
		/* 82145048h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82145048h case   11:*/		return 0x8214504C;
		  /* 8214504Ch */ case   12:  		/* lwz R9, <#[R31 + 60]> */
		/* 8214504Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 8214504Ch case   12:*/		return 0x82145050;
		  /* 82145050h */ case   13:  		/* stwx R5, <#[R9 + R10]> */
		/* 82145050h case   13:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82145050h case   13:*/		return 0x82145054;
		  /* 82145054h */ case   14:  		/* addi R10, R10, -4 */
		/* 82145054h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 82145054h case   14:*/		return 0x82145058;
		  /* 82145058h */ case   15:  		/* bc 16, CR0_LT, -32 */
		/* 82145058h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82145038;  }
		/* 82145058h case   15:*/		return 0x8214505C;
	}
	return 0x8214505C;
} // Block from 8214501Ch-8214505Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214505Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214505C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214505C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214505C);
		  /* 8214505Ch */ case    0:  		/* subf R11, R7, R8 */
		/* 8214505Ch case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R7,regs.R8);
		/* 8214505Ch case    0:*/		return 0x82145060;
		  /* 82145060h */ case    1:  		/* addi R9, R8, -1 */
		/* 82145060h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0xFFFFFFFF);
		/* 82145060h case    1:*/		return 0x82145064;
		  /* 82145064h */ case    2:  		/* rlwinm. R10, R11, 31, 1, 31 */
		/* 82145064h case    2:*/		cpu::op::rlwinm<1,31,1,31>(regs,&regs.R10,regs.R11);
		/* 82145064h case    2:*/		return 0x82145068;
		  /* 82145068h */ case    3:  		/* bc 12, CR0_EQ, 52 */
		/* 82145068h case    3:*/		if ( regs.CR[0].eq ) { return 0x8214509C;  }
		/* 82145068h case    3:*/		return 0x8214506C;
		  /* 8214506Ch */ case    4:  		/* mtspr CTR, R10 */
		/* 8214506Ch case    4:*/		regs.CTR = regs.R10;
		/* 8214506Ch case    4:*/		return 0x82145070;
		  /* 82145070h */ case    5:  		/* rlwinm R11, R7, 2, 0, 29 */
		/* 82145070h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 82145070h case    5:*/		return 0x82145074;
		  /* 82145074h */ case    6:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 82145074h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 82145074h case    6:*/		return 0x82145078;
		  /* 82145078h */ case    7:  		/* lwz R9, <#[R31 + 60]> */
		/* 82145078h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 82145078h case    7:*/		return 0x8214507C;
		  /* 8214507Ch */ case    8:  		/* lwzx R8, <#[R10 + R9]> */
		/* 8214507Ch case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8214507Ch case    8:*/		return 0x82145080;
		  /* 82145080h */ case    9:  		/* lwzx R7, <#[R11 + R9]> */
		/* 82145080h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82145080h case    9:*/		return 0x82145084;
		  /* 82145084h */ case   10:  		/* stwx R8, <#[R11 + R9]> */
		/* 82145084h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82145084h case   10:*/		return 0x82145088;
		  /* 82145088h */ case   11:  		/* addi R11, R11, 4 */
		/* 82145088h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82145088h case   11:*/		return 0x8214508C;
		  /* 8214508Ch */ case   12:  		/* lwz R9, <#[R31 + 60]> */
		/* 8214508Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 8214508Ch case   12:*/		return 0x82145090;
		  /* 82145090h */ case   13:  		/* stwx R7, <#[R9 + R10]> */
		/* 82145090h case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82145090h case   13:*/		return 0x82145094;
		  /* 82145094h */ case   14:  		/* addi R10, R10, -4 */
		/* 82145094h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 82145094h case   14:*/		return 0x82145098;
		  /* 82145098h */ case   15:  		/* bc 16, CR0_LT, -32 */
		/* 82145098h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82145078;  }
		/* 82145098h case   15:*/		return 0x8214509C;
	}
	return 0x8214509C;
} // Block from 8214505Ch-8214509Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214509Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214509C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214509C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214509C);
		  /* 8214509Ch */ case    0:  		/* addi R5, R1, 104 */
		/* 8214509Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x68);
		/* 8214509Ch case    0:*/		return 0x821450A0;
		  /* 821450A0h */ case    1:  		/* addi R4, R1, 100 */
		/* 821450A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x64);
		/* 821450A0h case    1:*/		return 0x821450A4;
		  /* 821450A4h */ case    2:  		/* mr R3, R31 */
		/* 821450A4h case    2:*/		regs.R3 = regs.R31;
		/* 821450A4h case    2:*/		return 0x821450A8;
		  /* 821450A8h */ case    3:  		/* bl -2160 */
		/* 821450A8h case    3:*/		regs.LR = 0x821450AC; return 0x82144838;
		/* 821450A8h case    3:*/		return 0x821450AC;
		  /* 821450ACh */ case    4:  		/* lwz R11, <#[R31 + 80]> */
		/* 821450ACh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 821450ACh case    4:*/		return 0x821450B0;
	}
	return 0x821450B0;
} // Block from 8214509Ch-821450B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821450B0h
// Function '?Write@CTReorderInstructions@D3DXShader@@IAAXII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821450B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821450B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821450B0);
		  /* 821450B0h */ case    0:  		/* lwz R10, <#[R1 + 100]> */
		/* 821450B0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821450B0h case    0:*/		return 0x821450B4;
		  /* 821450B4h */ case    1:  		/* lwz R9, <#[R1 + 104]> */
		/* 821450B4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000068) );
		/* 821450B4h case    1:*/		return 0x821450B8;
		  /* 821450B8h */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 821450B8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821450B8h case    2:*/		return 0x821450BC;
		  /* 821450BCh */ case    3:  		/* bc 4, CR6_LT, 20 */
		/* 821450BCh case    3:*/		if ( !regs.CR[6].lt ) { return 0x821450D0;  }
		/* 821450BCh case    3:*/		return 0x821450C0;
		  /* 821450C0h */ case    4:  		/* lwz R8, <#[R31 + 76]> */
		/* 821450C0h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000004C) );
		/* 821450C0h case    4:*/		return 0x821450C4;
		  /* 821450C4h */ case    5:  		/* cmplw CR6, R9, R8 */
		/* 821450C4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821450C4h case    5:*/		return 0x821450C8;
		  /* 821450C8h */ case    6:  		/* bc 4, CR6_GT, 72 */
		/* 821450C8h case    6:*/		if ( !regs.CR[6].gt ) { return 0x82145110;  }
		/* 821450C8h case    6:*/		return 0x821450CC;
		  /* 821450CCh */ case    7:  		/* cmplw CR6, R10, R11 */
		/* 821450CCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821450CCh case    7:*/		return 0x821450D0;
	}
	return 0x821450D0;
} // Block from 821450B0h-821450D0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821450D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821450D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821450D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821450D0);
		  /* 821450D0h */ case    0:  		/* bc 12, CR6_GT, 16 */
		/* 821450D0h case    0:*/		if ( regs.CR[6].gt ) { return 0x821450E0;  }
		/* 821450D0h case    0:*/		return 0x821450D4;
		  /* 821450D4h */ case    1:  		/* lwz R11, <#[R31 + 76]> */
		/* 821450D4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 821450D4h case    1:*/		return 0x821450D8;
		  /* 821450D8h */ case    2:  		/* cmplw CR6, R9, R11 */
		/* 821450D8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821450D8h case    2:*/		return 0x821450DC;
		  /* 821450DCh */ case    3:  		/* bc 12, CR6_LT, 52 */
		/* 821450DCh case    3:*/		if ( regs.CR[6].lt ) { return 0x82145110;  }
		/* 821450DCh case    3:*/		return 0x821450E0;
	}
	return 0x821450E0;
} // Block from 821450D0h-821450E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821450E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821450E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821450E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821450E0);
		  /* 821450E0h */ case    0:  		/* cmpwi CR6, R29, 0 */
		/* 821450E0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 821450E0h case    0:*/		return 0x821450E4;
		  /* 821450E4h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 821450E4h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821450F8;  }
		/* 821450E4h case    1:*/		return 0x821450E8;
		  /* 821450E8h */ case    2:  		/* subf R11, R17, R18 */
		/* 821450E8h case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R17,regs.R18);
		/* 821450E8h case    2:*/		return 0x821450EC;
		  /* 821450ECh */ case    3:  		/* add R15, R11, R15 */
		/* 821450ECh case    3:*/		cpu::op::add<0>(regs,&regs.R15,regs.R11,regs.R15);
		/* 821450ECh case    3:*/		return 0x821450F0;
		  /* 821450F0h */ case    4:  		/* add R14, R11, R14 */
		/* 821450F0h case    4:*/		cpu::op::add<0>(regs,&regs.R14,regs.R11,regs.R14);
		/* 821450F0h case    4:*/		return 0x821450F4;
		  /* 821450F4h */ case    5:  		/* b 12 */
		/* 821450F4h case    5:*/		return 0x82145100;
		/* 821450F4h case    5:*/		return 0x821450F8;
	}
	return 0x821450F8;
} // Block from 821450E0h-821450F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821450F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821450F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821450F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821450F8);
		  /* 821450F8h */ case    0:  		/* add R15, R30, R15 */
		/* 821450F8h case    0:*/		cpu::op::add<0>(regs,&regs.R15,regs.R30,regs.R15);
		/* 821450F8h case    0:*/		return 0x821450FC;
		  /* 821450FCh */ case    1:  		/* add R14, R30, R14 */
		/* 821450FCh case    1:*/		cpu::op::add<0>(regs,&regs.R14,regs.R30,regs.R14);
		/* 821450FCh case    1:*/		return 0x82145100;
	}
	return 0x82145100;
} // Block from 821450F8h-82145100h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82145100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145100);
		  /* 82145100h */ case    0:  		/* li R11, 1 */
		/* 82145100h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82145100h case    0:*/		return 0x82145104;
		  /* 82145104h */ case    1:  		/* lwz R30, <#[R1 + 108]> */
		/* 82145104h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 82145104h case    1:*/		return 0x82145108;
		  /* 82145108h */ case    2:  		/* stw R11, <#[R1 + 96]> */
		/* 82145108h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82145108h case    2:*/		return 0x8214510C;
		  /* 8214510Ch */ case    3:  		/* b -1736 */
		/* 8214510Ch case    3:*/		return 0x82144A44;
		/* 8214510Ch case    3:*/		return 0x82145110;
	}
	return 0x82145110;
} // Block from 82145100h-82145110h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82145110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145110);
		  /* 82145110h */ case    0:  		/* li R3, 0 */
		/* 82145110h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82145110h case    0:*/		return 0x82145114;
		  /* 82145114h */ case    1:  		/* b 56 */
		/* 82145114h case    1:*/		return 0x8214514C;
		/* 82145114h case    1:*/		return 0x82145118;
	}
	return 0x82145118;
} // Block from 82145110h-82145118h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82145118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145118);
		  /* 82145118h */ case    0:  		/* lwz R11, <#[R1 + 96]> */
		/* 82145118h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82145118h case    0:*/		return 0x8214511C;
		  /* 8214511Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8214511Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214511Ch case    1:*/		return 0x82145120;
		  /* 82145120h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 82145120h case    2:*/		if ( regs.CR[6].eq ) { return 0x82145148;  }
		/* 82145120h case    2:*/		return 0x82145124;
		  /* 82145124h */ case    3:  		/* lwz R11, <#[R31 + 56]> */
		/* 82145124h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82145124h case    3:*/		return 0x82145128;
		  /* 82145128h */ case    4:  		/* lwz R4, <#[R31 + 64]> */
		/* 82145128h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000040) );
		/* 82145128h case    4:*/		return 0x8214512C;
		  /* 8214512Ch */ case    5:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8214512Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8214512Ch case    5:*/		return 0x82145130;
		  /* 82145130h */ case    6:  		/* lwz R3, <#[R31 + 60]> */
		/* 82145130h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000003C) );
		/* 82145130h case    6:*/		return 0x82145134;
		  /* 82145134h */ case    7:  		/* bl -735108 */
		/* 82145134h case    7:*/		regs.LR = 0x82145138; return 0x820919B0;
		/* 82145134h case    7:*/		return 0x82145138;
		  /* 82145138h */ case    8:  		/* li R5, 0 */
		/* 82145138h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82145138h case    8:*/		return 0x8214513C;
		  /* 8214513Ch */ case    9:  		/* li R4, 0 */
		/* 8214513Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214513Ch case    9:*/		return 0x82145140;
	}
	return 0x82145140;
} // Block from 82145118h-82145140h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82145140h
// Function '?CompareLoad@CTReorderInstructions@D3DXShader@@KAHIIPBX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145140);
		  /* 82145140h */ case    0:  		/* mr R3, R31 */
		/* 82145140h case    0:*/		regs.R3 = regs.R31;
		/* 82145140h case    0:*/		return 0x82145144;
		  /* 82145144h */ case    1:  		/* bl -2316 */
		/* 82145144h case    1:*/		regs.LR = 0x82145148; return 0x82144838;
		/* 82145144h case    1:*/		return 0x82145148;
	}
	return 0x82145148;
} // Block from 82145140h-82145148h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82145148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145148);
		  /* 82145148h */ case    0:  		/* li R3, 1 */
		/* 82145148h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82145148h case    0:*/		return 0x8214514C;
	}
	return 0x8214514C;
} // Block from 82145148h-8214514Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214514Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214514C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214514C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214514C);
		  /* 8214514Ch */ case    0:  		/* addi R1, R1, 272 */
		/* 8214514Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 8214514Ch case    0:*/		return 0x82145150;
		  /* 82145150h */ case    1:  		/* b -736992 */
		/* 82145150h case    1:*/		return 0x82091270;
		/* 82145150h case    1:*/		return 0x82145154;
		  /* 82145154h */ case    2:  		/* nop */
		/* 82145154h case    2:*/		cpu::op::nop();
		/* 82145154h case    2:*/		return 0x82145158;
	}
	return 0x82145158;
} // Block from 8214514Ch-82145158h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82145158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145158);
		  /* 82145158h */ case    0:  		/* mfspr R12, LR */
		/* 82145158h case    0:*/		regs.R12 = regs.LR;
		/* 82145158h case    0:*/		return 0x8214515C;
		  /* 8214515Ch */ case    1:  		/* bl -737024 */
		/* 8214515Ch case    1:*/		regs.LR = 0x82145160; return 0x8209125C;
		/* 8214515Ch case    1:*/		return 0x82145160;
		  /* 82145160h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82145160h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82145160h case    2:*/		return 0x82145164;
		  /* 82145164h */ case    3:  		/* addi R5, R3, 76 */
		/* 82145164h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R3,0x4C);
		/* 82145164h case    3:*/		return 0x82145168;
		  /* 82145168h */ case    4:  		/* addi R4, R3, 80 */
		/* 82145168h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x50);
		/* 82145168h case    4:*/		return 0x8214516C;
		  /* 8214516Ch */ case    5:  		/* mr R31, R3 */
		/* 8214516Ch case    5:*/		regs.R31 = regs.R3;
		/* 8214516Ch case    5:*/		return 0x82145170;
		  /* 82145170h */ case    6:  		/* bl -2360 */
		/* 82145170h case    6:*/		regs.LR = 0x82145174; return 0x82144838;
		/* 82145170h case    6:*/		return 0x82145174;
		  /* 82145174h */ case    7:  		/* li R10, 0 */
		/* 82145174h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82145174h case    7:*/		return 0x82145178;
		  /* 82145178h */ case    8:  		/* lwz R5, <#[R3 + 56]> */
		/* 82145178h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000038) );
		/* 82145178h case    8:*/		return 0x8214517C;
		  /* 8214517Ch */ case    9:  		/* cmplwi CR6, R5, 0 */
		/* 8214517Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8214517Ch case    9:*/		return 0x82145180;
		  /* 82145180h */ case   10:  		/* bc 12, CR6_EQ, 52 */
		/* 82145180h case   10:*/		if ( regs.CR[6].eq ) { return 0x821451B4;  }
		/* 82145180h case   10:*/		return 0x82145184;
		  /* 82145184h */ case   11:  		/* li R11, 0 */
		/* 82145184h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82145184h case   11:*/		return 0x82145188;
		  /* 82145188h */ case   12:  		/* lwz R9, <#[R31 + 48]> */
		/* 82145188h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 82145188h case   12:*/		return 0x8214518C;
		  /* 8214518Ch */ case   13:  		/* stwx R10, <#[R9 + R11]> */
		/* 8214518Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8214518Ch case   13:*/		return 0x82145190;
		  /* 82145190h */ case   14:  		/* addi R10, R10, 1 */
		/* 82145190h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82145190h case   14:*/		return 0x82145194;
		  /* 82145194h */ case   15:  		/* lwz R9, <#[R31 + 60]> */
		/* 82145194h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 82145194h case   15:*/		return 0x82145198;
		  /* 82145198h */ case   16:  		/* lwzx R9, <#[R11 + R9]> */
		/* 82145198h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82145198h case   16:*/		return 0x8214519C;
		  /* 8214519Ch */ case   17:  		/* lwz R8, <#[R31 + 64]> */
		/* 8214519Ch case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000040) );
		/* 8214519Ch case   17:*/		return 0x821451A0;
		  /* 821451A0h */ case   18:  		/* stwx R9, <#[R11 + R8]> */
		/* 821451A0h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821451A0h case   18:*/		return 0x821451A4;
		  /* 821451A4h */ case   19:  		/* addi R11, R11, 4 */
		/* 821451A4h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821451A4h case   19:*/		return 0x821451A8;
		  /* 821451A8h */ case   20:  		/* lwz R5, <#[R31 + 56]> */
		/* 821451A8h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000038) );
		/* 821451A8h case   20:*/		return 0x821451AC;
		  /* 821451ACh */ case   21:  		/* cmplw CR6, R10, R5 */
		/* 821451ACh case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R5);
		/* 821451ACh case   21:*/		return 0x821451B0;
	}
	return 0x821451B0;
} // Block from 82145158h-821451B0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821451B0h
// Function '?CompareIndex@D3DXShader@@YAHIIPBX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821451B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821451B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821451B0);
		  /* 821451B0h */ case    0:  		/* bc 12, CR6_LT, -40 */
		/* 821451B0h case    0:*/		if ( regs.CR[6].lt ) { return 0x82145188;  }
		/* 821451B0h case    0:*/		return 0x821451B4;
	}
	return 0x821451B4;
} // Block from 821451B0h-821451B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821451B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821451B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821451B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821451B4);
		  /* 821451B4h */ case    0:  		/* lis R11, -32236 */
		/* 821451B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8214);
		/* 821451B4h case    0:*/		return 0x821451B8;
		  /* 821451B8h */ case    1:  		/* lwz R4, <#[R31 + 48]> */
		/* 821451B8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 821451B8h case    1:*/		return 0x821451BC;
		  /* 821451BCh */ case    2:  		/* mr R6, R31 */
		/* 821451BCh case    2:*/		regs.R6 = regs.R31;
		/* 821451BCh case    2:*/		return 0x821451C0;
		  /* 821451C0h */ case    3:  		/* addi R3, R11, 18216 */
		/* 821451C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4728);
		/* 821451C0h case    3:*/		return 0x821451C4;
		  /* 821451C4h */ case    4:  		/* bl -291620 */
		/* 821451C4h case    4:*/		regs.LR = 0x821451C8; return 0x820FDEA0;
		/* 821451C4h case    4:*/		return 0x821451C8;
		  /* 821451C8h */ case    5:  		/* lwz R11, <#[R31 + 56]> */
		/* 821451C8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821451C8h case    5:*/		return 0x821451CC;
		  /* 821451CCh */ case    6:  		/* li R29, 0 */
		/* 821451CCh case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821451CCh case    6:*/		return 0x821451D0;
	}
	return 0x821451D0;
} // Block from 821451B4h-821451D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821451D0h
// Function '?RemoveDuplicates@CTReorderInstructions@D3DXShader@@IAAXPAI0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821451D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821451D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821451D0);
		  /* 821451D0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821451D0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821451D0h case    0:*/		return 0x821451D4;
		  /* 821451D4h */ case    1:  		/* bc 4, CR6_GT, 60 */
		/* 821451D4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82145210;  }
		/* 821451D4h case    1:*/		return 0x821451D8;
		  /* 821451D8h */ case    2:  		/* li R30, 0 */
		/* 821451D8h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821451D8h case    2:*/		return 0x821451DC;
		  /* 821451DCh */ case    3:  		/* lwz R11, <#[R31 + 48]> */
		/* 821451DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821451DCh case    3:*/		return 0x821451E0;
		  /* 821451E0h */ case    4:  		/* mr R3, R31 */
		/* 821451E0h case    4:*/		regs.R3 = regs.R31;
		/* 821451E0h case    4:*/		return 0x821451E4;
		  /* 821451E4h */ case    5:  		/* lwzx R4, <#[R11 + R30]> */
		/* 821451E4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821451E4h case    5:*/		return 0x821451E8;
		  /* 821451E8h */ case    6:  		/* bl -2112 */
		/* 821451E8h case    6:*/		regs.LR = 0x821451EC; return 0x821449A8;
		/* 821451E8h case    6:*/		return 0x821451EC;
		  /* 821451ECh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 821451ECh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821451ECh case    7:*/		return 0x821451F0;
		  /* 821451F0h */ case    8:  		/* bc 12, CR0_LT, 36 */
		/* 821451F0h case    8:*/		if ( regs.CR[0].lt ) { return 0x82145214;  }
		/* 821451F0h case    8:*/		return 0x821451F4;
		  /* 821451F4h */ case    9:  		/* cmpwi CR6, R3, 0 */
		/* 821451F4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821451F4h case    9:*/		return 0x821451F8;
		  /* 821451F8h */ case   10:  		/* bc 12, CR6_EQ, 36 */
		/* 821451F8h case   10:*/		if ( regs.CR[6].eq ) { return 0x8214521C;  }
		/* 821451F8h case   10:*/		return 0x821451FC;
		  /* 821451FCh */ case   11:  		/* lwz R11, <#[R31 + 56]> */
		/* 821451FCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821451FCh case   11:*/		return 0x82145200;
		  /* 82145200h */ case   12:  		/* addi R29, R29, 1 */
		/* 82145200h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82145200h case   12:*/		return 0x82145204;
		  /* 82145204h */ case   13:  		/* addi R30, R30, 4 */
		/* 82145204h case   13:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82145204h case   13:*/		return 0x82145208;
		  /* 82145208h */ case   14:  		/* cmplw CR6, R29, R11 */
		/* 82145208h case   14:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82145208h case   14:*/		return 0x8214520C;
		  /* 8214520Ch */ case   15:  		/* bc 12, CR6_LT, -48 */
		/* 8214520Ch case   15:*/		if ( regs.CR[6].lt ) { return 0x821451DC;  }
		/* 8214520Ch case   15:*/		return 0x82145210;
	}
	return 0x82145210;
} // Block from 821451D0h-82145210h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82145210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145210);
		  /* 82145210h */ case    0:  		/* li R3, 1 */
		/* 82145210h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82145210h case    0:*/		return 0x82145214;
	}
	return 0x82145214;
} // Block from 82145210h-82145214h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145214);
		  /* 82145214h */ case    0:  		/* addi R1, R1, 112 */
		/* 82145214h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82145214h case    0:*/		return 0x82145218;
		  /* 82145218h */ case    1:  		/* b -737132 */
		/* 82145218h case    1:*/		return 0x820912AC;
		/* 82145218h case    1:*/		return 0x8214521C;
	}
	return 0x8214521C;
} // Block from 82145214h-8214521Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214521Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214521C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214521C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214521C);
		  /* 8214521Ch */ case    0:  		/* li R3, 0 */
		/* 8214521Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214521Ch case    0:*/		return 0x82145220;
		  /* 82145220h */ case    1:  		/* b -12 */
		/* 82145220h case    1:*/		return 0x82145214;
		/* 82145220h case    1:*/		return 0x82145224;
		  /* 82145224h */ case    2:  		/* nop */
		/* 82145224h case    2:*/		cpu::op::nop();
		/* 82145224h case    2:*/		return 0x82145228;
	}
	return 0x82145228;
} // Block from 8214521Ch-82145228h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82145228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145228);
		  /* 82145228h */ case    0:  		/* mfspr R12, LR */
		/* 82145228h case    0:*/		regs.R12 = regs.LR;
		/* 82145228h case    0:*/		return 0x8214522C;
		  /* 8214522Ch */ case    1:  		/* bl -737248 */
		/* 8214522Ch case    1:*/		regs.LR = 0x82145230; return 0x8209124C;
		/* 8214522Ch case    1:*/		return 0x82145230;
		  /* 82145230h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82145230h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82145230h case    2:*/		return 0x82145234;
		  /* 82145234h */ case    3:  		/* mr R31, R3 */
		/* 82145234h case    3:*/		regs.R31 = regs.R3;
		/* 82145234h case    3:*/		return 0x82145238;
		  /* 82145238h */ case    4:  		/* lwz R3, <#[R3 + 4]> */
		/* 82145238h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 82145238h case    4:*/		return 0x8214523C;
		  /* 8214523Ch */ case    5:  		/* li R26, 0 */
		/* 8214523Ch case    5:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8214523Ch case    5:*/		return 0x82145240;
		  /* 82145240h */ case    6:  		/* mr R25, R4 */
		/* 82145240h case    6:*/		regs.R25 = regs.R4;
		/* 82145240h case    6:*/		return 0x82145244;
		  /* 82145244h */ case    7:  		/* stw R26, <#[R31 + 8]> */
		/* 82145244h case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000008) );
		/* 82145244h case    7:*/		return 0x82145248;
		  /* 82145248h */ case    8:  		/* stw R26, <#[R31 + 12]> */
		/* 82145248h case    8:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000000C) );
		/* 82145248h case    8:*/		return 0x8214524C;
		  /* 8214524Ch */ case    9:  		/* stw R26, <#[R31 + 16]> */
		/* 8214524Ch case    9:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000010) );
		/* 8214524Ch case    9:*/		return 0x82145250;
		  /* 82145250h */ case   10:  		/* stw R26, <#[R31 + 28]> */
		/* 82145250h case   10:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000001C) );
		/* 82145250h case   10:*/		return 0x82145254;
		  /* 82145254h */ case   11:  		/* stw R26, <#[R31 + 32]> */
		/* 82145254h case   11:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000020) );
		/* 82145254h case   11:*/		return 0x82145258;
		  /* 82145258h */ case   12:  		/* stw R26, <#[R31 + 36]> */
		/* 82145258h case   12:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000024) );
		/* 82145258h case   12:*/		return 0x8214525C;
		  /* 8214525Ch */ case   13:  		/* stw R26, <#[R31 + 40]> */
		/* 8214525Ch case   13:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000028) );
		/* 8214525Ch case   13:*/		return 0x82145260;
		  /* 82145260h */ case   14:  		/* stw R26, <#[R31 + 44]> */
		/* 82145260h case   14:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000002C) );
		/* 82145260h case   14:*/		return 0x82145264;
		  /* 82145264h */ case   15:  		/* stw R26, <#[R31 + 48]> */
		/* 82145264h case   15:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000030) );
		/* 82145264h case   15:*/		return 0x82145268;
		  /* 82145268h */ case   16:  		/* stw R26, <#[R31 + 52]> */
		/* 82145268h case   16:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000034) );
		/* 82145268h case   16:*/		return 0x8214526C;
		  /* 8214526Ch */ case   17:  		/* stw R26, <#[R31 + 60]> */
		/* 8214526Ch case   17:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000003C) );
		/* 8214526Ch case   17:*/		return 0x82145270;
	}
	return 0x82145270;
} // Block from 82145228h-82145270h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82145270h
// Function '?RecalculateLoad@CTReorderInstructions@D3DXShader@@IAAXPAI0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145270);
		  /* 82145270h */ case    0:  		/* lwz R11, <#[R3 + 12]> */
		/* 82145270h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82145270h case    0:*/		return 0x82145274;
		  /* 82145274h */ case    1:  		/* stw R11, <#[R31 + 56]> */
		/* 82145274h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82145274h case    1:*/		return 0x82145278;
		  /* 82145278h */ case    2:  		/* bl -259808 */
		/* 82145278h case    2:*/		regs.LR = 0x8214527C; return 0x82105B98;
		/* 82145278h case    2:*/		return 0x8214527C;
		  /* 8214527Ch */ case    3:  		/* lwz R11, <#[R31 + 56]> */
		/* 8214527Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8214527Ch case    3:*/		return 0x82145280;
		  /* 82145280h */ case    4:  		/* lis R4, 9345 */
		/* 82145280h case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145280h case    4:*/		return 0x82145284;
		  /* 82145284h */ case    5:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 82145284h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 82145284h case    5:*/		return 0x82145288;
		  /* 82145288h */ case    6:  		/* bl -774280 */
		/* 82145288h case    6:*/		regs.LR = 0x8214528C; return 0x82088200;
		/* 82145288h case    6:*/		return 0x8214528C;
		  /* 8214528Ch */ case    7:  		/* stw R3, <#[R31 + 8]> */
		/* 8214528Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8214528Ch case    7:*/		return 0x82145290;
		  /* 82145290h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82145290h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145290h case    8:*/		return 0x82145294;
		  /* 82145294h */ case    9:  		/* bc 12, CR0_EQ, 1256 */
		/* 82145294h case    9:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 82145294h case    9:*/		return 0x82145298;
		  /* 82145298h */ case   10:  		/* lwz R11, <#[R31 + 56]> */
		/* 82145298h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82145298h case   10:*/		return 0x8214529C;
		  /* 8214529Ch */ case   11:  		/* lis R4, 9345 */
		/* 8214529Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8214529Ch case   11:*/		return 0x821452A0;
		  /* 821452A0h */ case   12:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 821452A0h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 821452A0h case   12:*/		return 0x821452A4;
		  /* 821452A4h */ case   13:  		/* bl -774308 */
		/* 821452A4h case   13:*/		regs.LR = 0x821452A8; return 0x82088200;
		/* 821452A4h case   13:*/		return 0x821452A8;
		  /* 821452A8h */ case   14:  		/* stw R3, <#[R31 + 28]> */
		/* 821452A8h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 821452A8h case   14:*/		return 0x821452AC;
		  /* 821452ACh */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 821452ACh case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821452ACh case   15:*/		return 0x821452B0;
		  /* 821452B0h */ case   16:  		/* bc 12, CR0_EQ, 1228 */
		/* 821452B0h case   16:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 821452B0h case   16:*/		return 0x821452B4;
		  /* 821452B4h */ case   17:  		/* lwz R11, <#[R31 + 56]> */
		/* 821452B4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821452B4h case   17:*/		return 0x821452B8;
		  /* 821452B8h */ case   18:  		/* li R4, 0 */
		/* 821452B8h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821452B8h case   18:*/		return 0x821452BC;
		  /* 821452BCh */ case   19:  		/* lwz R3, <#[R31 + 8]> */
		/* 821452BCh case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 821452BCh case   19:*/		return 0x821452C0;
		  /* 821452C0h */ case   20:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821452C0h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821452C0h case   20:*/		return 0x821452C4;
		  /* 821452C4h */ case   21:  		/* bl -737156 */
		/* 821452C4h case   21:*/		regs.LR = 0x821452C8; return 0x82091340;
		/* 821452C4h case   21:*/		return 0x821452C8;
		  /* 821452C8h */ case   22:  		/* lwz R11, <#[R31 + 56]> */
		/* 821452C8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821452C8h case   22:*/		return 0x821452CC;
		  /* 821452CCh */ case   23:  		/* li R4, 0 */
		/* 821452CCh case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821452CCh case   23:*/		return 0x821452D0;
		  /* 821452D0h */ case   24:  		/* lwz R3, <#[R31 + 28]> */
		/* 821452D0h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 821452D0h case   24:*/		return 0x821452D4;
		  /* 821452D4h */ case   25:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821452D4h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821452D4h case   25:*/		return 0x821452D8;
		  /* 821452D8h */ case   26:  		/* bl -737176 */
		/* 821452D8h case   26:*/		regs.LR = 0x821452DC; return 0x82091340;
		/* 821452D8h case   26:*/		return 0x821452DC;
		  /* 821452DCh */ case   27:  		/* lwz R11, <#[R31 + 56]> */
		/* 821452DCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821452DCh case   27:*/		return 0x821452E0;
		  /* 821452E0h */ case   28:  		/* mr R4, R26 */
		/* 821452E0h case   28:*/		regs.R4 = regs.R26;
		/* 821452E0h case   28:*/		return 0x821452E4;
		  /* 821452E4h */ case   29:  		/* cmplwi CR6, R11, 0 */
		/* 821452E4h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821452E4h case   29:*/		return 0x821452E8;
		  /* 821452E8h */ case   30:  		/* bc 4, CR6_GT, 164 */
		/* 821452E8h case   30:*/		if ( !regs.CR[6].gt ) { return 0x8214538C;  }
		/* 821452E8h case   30:*/		return 0x821452EC;
		  /* 821452ECh */ case   31:  		/* mr R27, R26 */
		/* 821452ECh case   31:*/		regs.R27 = regs.R26;
		/* 821452ECh case   31:*/		return 0x821452F0;
		  /* 821452F0h */ case   32:  		/* lwz R11, <#[R31 + 4]> */
		/* 821452F0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821452F0h case   32:*/		return 0x821452F4;
		  /* 821452F4h */ case   33:  		/* lwz R11, <#[R11 + 24]> */
		/* 821452F4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821452F4h case   33:*/		return 0x821452F8;
		  /* 821452F8h */ case   34:  		/* lwzx R30, <#[R11 + R27]> */
		/* 821452F8h case   34:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 821452F8h case   34:*/		return 0x821452FC;
		  /* 821452FCh */ case   35:  		/* lwz R11, <#[R30]> */
		/* 821452FCh case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821452FCh case   35:*/		return 0x82145300;
		  /* 82145300h */ case   36:  		/* rlwinm. R11, R11, 0, 0, 11 */
		/* 82145300h case   36:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82145300h case   36:*/		return 0x82145304;
		  /* 82145304h */ case   37:  		/* bc 12, CR0_EQ, 116 */
		/* 82145304h case   37:*/		if ( regs.CR[0].eq ) { return 0x82145378;  }
		/* 82145304h case   37:*/		return 0x82145308;
		  /* 82145308h */ case   38:  		/* lwz R11, <#[R30 + 12]> */
		/* 82145308h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82145308h case   38:*/		return 0x8214530C;
		  /* 8214530Ch */ case   39:  		/* mr R28, R26 */
		/* 8214530Ch case   39:*/		regs.R28 = regs.R26;
		/* 8214530Ch case   39:*/		return 0x82145310;
		  /* 82145310h */ case   40:  		/* cmplwi CR6, R11, 0 */
		/* 82145310h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82145310h case   40:*/		return 0x82145314;
		  /* 82145314h */ case   41:  		/* bc 4, CR6_GT, 44 */
		/* 82145314h case   41:*/		if ( !regs.CR[6].gt ) { return 0x82145340;  }
		/* 82145314h case   41:*/		return 0x82145318;
		  /* 82145318h */ case   42:  		/* mr R29, R26 */
		/* 82145318h case   42:*/		regs.R29 = regs.R26;
		/* 82145318h case   42:*/		return 0x8214531C;
		  /* 8214531Ch */ case   43:  		/* lwz R11, <#[R30 + 16]> */
		/* 8214531Ch case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8214531Ch case   43:*/		return 0x82145320;
		  /* 82145320h */ case   44:  		/* mr R3, R31 */
		/* 82145320h case   44:*/		regs.R3 = regs.R31;
		/* 82145320h case   44:*/		return 0x82145324;
		  /* 82145324h */ case   45:  		/* lwzx R5, <#[R29 + R11]> */
		/* 82145324h case   45:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82145324h case   45:*/		return 0x82145328;
		  /* 82145328h */ case   46:  		/* bl -3216 */
		/* 82145328h case   46:*/		regs.LR = 0x8214532C; return 0x82144698;
		/* 82145328h case   46:*/		return 0x8214532C;
		  /* 8214532Ch */ case   47:  		/* lwz R11, <#[R30 + 12]> */
		/* 8214532Ch case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8214532Ch case   47:*/		return 0x82145330;
		  /* 82145330h */ case   48:  		/* addi R28, R28, 1 */
		/* 82145330h case   48:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82145330h case   48:*/		return 0x82145334;
		  /* 82145334h */ case   49:  		/* addi R29, R29, 4 */
		/* 82145334h case   49:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82145334h case   49:*/		return 0x82145338;
		  /* 82145338h */ case   50:  		/* cmplw CR6, R28, R11 */
		/* 82145338h case   50:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82145338h case   50:*/		return 0x8214533C;
		  /* 8214533Ch */ case   51:  		/* bc 12, CR6_LT, -32 */
		/* 8214533Ch case   51:*/		if ( regs.CR[6].lt ) { return 0x8214531C;  }
		/* 8214533Ch case   51:*/		return 0x82145340;
	}
	return 0x82145340;
} // Block from 82145270h-82145340h (52 instructions)

//////////////////////////////////////////////////////
// Block at 82145340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145340);
		  /* 82145340h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82145340h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82145340h case    0:*/		return 0x82145344;
		  /* 82145344h */ case    1:  		/* mr R29, R26 */
		/* 82145344h case    1:*/		regs.R29 = regs.R26;
		/* 82145344h case    1:*/		return 0x82145348;
		  /* 82145348h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82145348h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82145348h case    2:*/		return 0x8214534C;
		  /* 8214534Ch */ case    3:  		/* bc 4, CR6_GT, 44 */
		/* 8214534Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x82145378;  }
		/* 8214534Ch case    3:*/		return 0x82145350;
		  /* 82145350h */ case    4:  		/* mr R6, R26 */
		/* 82145350h case    4:*/		regs.R6 = regs.R26;
		/* 82145350h case    4:*/		return 0x82145354;
		  /* 82145354h */ case    5:  		/* lwz R11, <#[R30 + 8]> */
		/* 82145354h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82145354h case    5:*/		return 0x82145358;
		  /* 82145358h */ case    6:  		/* mr R3, R31 */
		/* 82145358h case    6:*/		regs.R3 = regs.R31;
		/* 82145358h case    6:*/		return 0x8214535C;
		  /* 8214535Ch */ case    7:  		/* lwzx R5, <#[R11 + R6]> */
		/* 8214535Ch case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 8214535Ch case    7:*/		return 0x82145360;
		  /* 82145360h */ case    8:  		/* bl -3432 */
		/* 82145360h case    8:*/		regs.LR = 0x82145364; return 0x821445F8;
		/* 82145360h case    8:*/		return 0x82145364;
		  /* 82145364h */ case    9:  		/* lwz R11, <#[R30 + 4]> */
		/* 82145364h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82145364h case    9:*/		return 0x82145368;
		  /* 82145368h */ case   10:  		/* addi R29, R29, 1 */
		/* 82145368h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82145368h case   10:*/		return 0x8214536C;
		  /* 8214536Ch */ case   11:  		/* addi R6, R6, 4 */
		/* 8214536Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 8214536Ch case   11:*/		return 0x82145370;
		  /* 82145370h */ case   12:  		/* cmplw CR6, R29, R11 */
		/* 82145370h case   12:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82145370h case   12:*/		return 0x82145374;
		  /* 82145374h */ case   13:  		/* bc 12, CR6_LT, -32 */
		/* 82145374h case   13:*/		if ( regs.CR[6].lt ) { return 0x82145354;  }
		/* 82145374h case   13:*/		return 0x82145378;
	}
	return 0x82145378;
} // Block from 82145340h-82145378h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82145378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145378);
		  /* 82145378h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 82145378h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82145378h case    0:*/		return 0x8214537C;
		  /* 8214537Ch */ case    1:  		/* addi R4, R4, 1 */
		/* 8214537Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 8214537Ch case    1:*/		return 0x82145380;
		  /* 82145380h */ case    2:  		/* addi R27, R27, 4 */
		/* 82145380h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 82145380h case    2:*/		return 0x82145384;
		  /* 82145384h */ case    3:  		/* cmplw CR6, R4, R11 */
		/* 82145384h case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82145384h case    3:*/		return 0x82145388;
		  /* 82145388h */ case    4:  		/* bc 12, CR6_LT, -152 */
		/* 82145388h case    4:*/		if ( regs.CR[6].lt ) { return 0x821452F0;  }
		/* 82145388h case    4:*/		return 0x8214538C;
	}
	return 0x8214538C;
} // Block from 82145378h-8214538Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214538Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214538C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214538C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214538C);
		  /* 8214538Ch */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 8214538Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8214538Ch case    0:*/		return 0x82145390;
		  /* 82145390h */ case    1:  		/* lis R4, 9345 */
		/* 82145390h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145390h case    1:*/		return 0x82145394;
		  /* 82145394h */ case    2:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 82145394h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 82145394h case    2:*/		return 0x82145398;
		  /* 82145398h */ case    3:  		/* bl -774552 */
		/* 82145398h case    3:*/		regs.LR = 0x8214539C; return 0x82088200;
		/* 82145398h case    3:*/		return 0x8214539C;
		  /* 8214539Ch */ case    4:  		/* stw R3, <#[R31 + 12]> */
		/* 8214539Ch case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214539Ch case    4:*/		return 0x821453A0;
		  /* 821453A0h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 821453A0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821453A0h case    5:*/		return 0x821453A4;
		  /* 821453A4h */ case    6:  		/* bc 12, CR0_EQ, 984 */
		/* 821453A4h case    6:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 821453A4h case    6:*/		return 0x821453A8;
		  /* 821453A8h */ case    7:  		/* lwz R11, <#[R31 + 56]> */
		/* 821453A8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821453A8h case    7:*/		return 0x821453AC;
		  /* 821453ACh */ case    8:  		/* lis R4, 9345 */
		/* 821453ACh case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821453ACh case    8:*/		return 0x821453B0;
		  /* 821453B0h */ case    9:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 821453B0h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 821453B0h case    9:*/		return 0x821453B4;
		  /* 821453B4h */ case   10:  		/* bl -774580 */
		/* 821453B4h case   10:*/		regs.LR = 0x821453B8; return 0x82088200;
		/* 821453B4h case   10:*/		return 0x821453B8;
		  /* 821453B8h */ case   11:  		/* stw R3, <#[R31 + 32]> */
		/* 821453B8h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 821453B8h case   11:*/		return 0x821453BC;
		  /* 821453BCh */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 821453BCh case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821453BCh case   12:*/		return 0x821453C0;
		  /* 821453C0h */ case   13:  		/* bc 12, CR0_EQ, 956 */
		/* 821453C0h case   13:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 821453C0h case   13:*/		return 0x821453C4;
		  /* 821453C4h */ case   14:  		/* lwz R11, <#[R31 + 56]> */
		/* 821453C4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821453C4h case   14:*/		return 0x821453C8;
		  /* 821453C8h */ case   15:  		/* mr R10, R26 */
		/* 821453C8h case   15:*/		regs.R10 = regs.R26;
		/* 821453C8h case   15:*/		return 0x821453CC;
		  /* 821453CCh */ case   16:  		/* mr R30, R26 */
		/* 821453CCh case   16:*/		regs.R30 = regs.R26;
		/* 821453CCh case   16:*/		return 0x821453D0;
		  /* 821453D0h */ case   17:  		/* mr R9, R26 */
		/* 821453D0h case   17:*/		regs.R9 = regs.R26;
		/* 821453D0h case   17:*/		return 0x821453D4;
		  /* 821453D4h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821453D4h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821453D4h case   18:*/		return 0x821453D8;
		  /* 821453D8h */ case   19:  		/* bc 4, CR6_GT, 68 */
		/* 821453D8h case   19:*/		if ( !regs.CR[6].gt ) { return 0x8214541C;  }
		/* 821453D8h case   19:*/		return 0x821453DC;
		  /* 821453DCh */ case   20:  		/* mr R11, R26 */
		/* 821453DCh case   20:*/		regs.R11 = regs.R26;
		/* 821453DCh case   20:*/		return 0x821453E0;
	}
	return 0x821453E0;
} // Block from 8214538Ch-821453E0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821453E0h
// Function '?Bubble@CTReorderInstructions@D3DXShader@@IAAJI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821453E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821453E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821453E0);
		  /* 821453E0h */ case    0:  		/* lwz R8, <#[R31 + 12]> */
		/* 821453E0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 821453E0h case    0:*/		return 0x821453E4;
		  /* 821453E4h */ case    1:  		/* addi R9, R9, 1 */
		/* 821453E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821453E4h case    1:*/		return 0x821453E8;
		  /* 821453E8h */ case    2:  		/* stwx R10, <#[R8 + R11]> */
		/* 821453E8h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 821453E8h case    2:*/		return 0x821453EC;
		  /* 821453ECh */ case    3:  		/* lwz R8, <#[R31 + 8]> */
		/* 821453ECh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 821453ECh case    3:*/		return 0x821453F0;
		  /* 821453F0h */ case    4:  		/* lwzx R8, <#[R11 + R8]> */
		/* 821453F0h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821453F0h case    4:*/		return 0x821453F4;
		  /* 821453F4h */ case    5:  		/* add R10, R8, R10 */
		/* 821453F4h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821453F4h case    5:*/		return 0x821453F8;
		  /* 821453F8h */ case    6:  		/* lwz R8, <#[R31 + 32]> */
		/* 821453F8h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 821453F8h case    6:*/		return 0x821453FC;
		  /* 821453FCh */ case    7:  		/* stwx R30, <#[R11 + R8]> */
		/* 821453FCh case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821453FCh case    7:*/		return 0x82145400;
		  /* 82145400h */ case    8:  		/* lwz R8, <#[R31 + 28]> */
		/* 82145400h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 82145400h case    8:*/		return 0x82145404;
		  /* 82145404h */ case    9:  		/* lwz R7, <#[R31 + 56]> */
		/* 82145404h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000038) );
		/* 82145404h case    9:*/		return 0x82145408;
		  /* 82145408h */ case   10:  		/* cmplw CR6, R9, R7 */
		/* 82145408h case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 82145408h case   10:*/		return 0x8214540C;
		  /* 8214540Ch */ case   11:  		/* lwzx R8, <#[R8 + R11]> */
		/* 8214540Ch case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8214540Ch case   11:*/		return 0x82145410;
		  /* 82145410h */ case   12:  		/* addi R11, R11, 4 */
		/* 82145410h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82145410h case   12:*/		return 0x82145414;
		  /* 82145414h */ case   13:  		/* add R30, R8, R30 */
		/* 82145414h case   13:*/		cpu::op::add<0>(regs,&regs.R30,regs.R8,regs.R30);
		/* 82145414h case   13:*/		return 0x82145418;
		  /* 82145418h */ case   14:  		/* bc 12, CR6_LT, -56 */
		/* 82145418h case   14:*/		if ( regs.CR[6].lt ) { return 0x821453E0;  }
		/* 82145418h case   14:*/		return 0x8214541C;
	}
	return 0x8214541C;
} // Block from 821453E0h-8214541Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8214541Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214541C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214541C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214541C);
		  /* 8214541Ch */ case    0:  		/* rlwinm R29, R10, 2, 0, 29 */
		/* 8214541Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R10);
		/* 8214541Ch case    0:*/		return 0x82145420;
		  /* 82145420h */ case    1:  		/* lis R4, 9345 */
		/* 82145420h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145420h case    1:*/		return 0x82145424;
		  /* 82145424h */ case    2:  		/* mr R3, R29 */
		/* 82145424h case    2:*/		regs.R3 = regs.R29;
		/* 82145424h case    2:*/		return 0x82145428;
		  /* 82145428h */ case    3:  		/* bl -774696 */
		/* 82145428h case    3:*/		regs.LR = 0x8214542C; return 0x82088200;
		/* 82145428h case    3:*/		return 0x8214542C;
		  /* 8214542Ch */ case    4:  		/* stw R3, <#[R31 + 16]> */
		/* 8214542Ch case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8214542Ch case    4:*/		return 0x82145430;
		  /* 82145430h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82145430h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145430h case    5:*/		return 0x82145434;
		  /* 82145434h */ case    6:  		/* bc 12, CR0_EQ, 840 */
		/* 82145434h case    6:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 82145434h case    6:*/		return 0x82145438;
		  /* 82145438h */ case    7:  		/* lis R4, 9345 */
		/* 82145438h case    7:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145438h case    7:*/		return 0x8214543C;
		  /* 8214543Ch */ case    8:  		/* mr R3, R29 */
		/* 8214543Ch case    8:*/		regs.R3 = regs.R29;
		/* 8214543Ch case    8:*/		return 0x82145440;
		  /* 82145440h */ case    9:  		/* bl -774720 */
		/* 82145440h case    9:*/		regs.LR = 0x82145444; return 0x82088200;
		/* 82145440h case    9:*/		return 0x82145444;
		  /* 82145444h */ case   10:  		/* stw R3, <#[R31 + 20]> */
		/* 82145444h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82145444h case   10:*/		return 0x82145448;
		  /* 82145448h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 82145448h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145448h case   11:*/		return 0x8214544C;
		  /* 8214544Ch */ case   12:  		/* bc 12, CR0_EQ, 816 */
		/* 8214544Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 8214544Ch case   12:*/		return 0x82145450;
		  /* 82145450h */ case   13:  		/* lis R4, 9345 */
		/* 82145450h case   13:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145450h case   13:*/		return 0x82145454;
		  /* 82145454h */ case   14:  		/* mr R3, R29 */
		/* 82145454h case   14:*/		regs.R3 = regs.R29;
		/* 82145454h case   14:*/		return 0x82145458;
		  /* 82145458h */ case   15:  		/* bl -774744 */
		/* 82145458h case   15:*/		regs.LR = 0x8214545C; return 0x82088200;
		/* 82145458h case   15:*/		return 0x8214545C;
		  /* 8214545Ch */ case   16:  		/* stw R3, <#[R31 + 24]> */
		/* 8214545Ch case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8214545Ch case   16:*/		return 0x82145460;
		  /* 82145460h */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 82145460h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145460h case   17:*/		return 0x82145464;
		  /* 82145464h */ case   18:  		/* bc 12, CR0_EQ, 792 */
		/* 82145464h case   18:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 82145464h case   18:*/		return 0x82145468;
		  /* 82145468h */ case   19:  		/* lis R4, 9345 */
		/* 82145468h case   19:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145468h case   19:*/		return 0x8214546C;
		  /* 8214546Ch */ case   20:  		/* rlwinm R3, R30, 2, 0, 29 */
		/* 8214546Ch case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R30);
		/* 8214546Ch case   20:*/		return 0x82145470;
		  /* 82145470h */ case   21:  		/* bl -774768 */
		/* 82145470h case   21:*/		regs.LR = 0x82145474; return 0x82088200;
		/* 82145470h case   21:*/		return 0x82145474;
		  /* 82145474h */ case   22:  		/* stw R3, <#[R31 + 36]> */
		/* 82145474h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 82145474h case   22:*/		return 0x82145478;
		  /* 82145478h */ case   23:  		/* cmplwi CR0, R3, 0 */
		/* 82145478h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145478h case   23:*/		return 0x8214547C;
		  /* 8214547Ch */ case   24:  		/* bc 12, CR0_EQ, 768 */
		/* 8214547Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 8214547Ch case   24:*/		return 0x82145480;
		  /* 82145480h */ case   25:  		/* lwz R11, <#[R31 + 56]> */
		/* 82145480h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82145480h case   25:*/		return 0x82145484;
		  /* 82145484h */ case   26:  		/* li R4, 0 */
		/* 82145484h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82145484h case   26:*/		return 0x82145488;
		  /* 82145488h */ case   27:  		/* lwz R3, <#[R31 + 8]> */
		/* 82145488h case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82145488h case   27:*/		return 0x8214548C;
		  /* 8214548Ch */ case   28:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8214548Ch case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8214548Ch case   28:*/		return 0x82145490;
		  /* 82145490h */ case   29:  		/* bl -737616 */
		/* 82145490h case   29:*/		regs.LR = 0x82145494; return 0x82091340;
		/* 82145490h case   29:*/		return 0x82145494;
		  /* 82145494h */ case   30:  		/* lwz R11, <#[R31 + 56]> */
		/* 82145494h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82145494h case   30:*/		return 0x82145498;
		  /* 82145498h */ case   31:  		/* li R4, 0 */
		/* 82145498h case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82145498h case   31:*/		return 0x8214549C;
		  /* 8214549Ch */ case   32:  		/* lwz R3, <#[R31 + 28]> */
		/* 8214549Ch case   32:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8214549Ch case   32:*/		return 0x821454A0;
		  /* 821454A0h */ case   33:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821454A0h case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821454A0h case   33:*/		return 0x821454A4;
		  /* 821454A4h */ case   34:  		/* bl -737636 */
		/* 821454A4h case   34:*/		regs.LR = 0x821454A8; return 0x82091340;
		/* 821454A4h case   34:*/		return 0x821454A8;
		  /* 821454A8h */ case   35:  		/* lwz R11, <#[R31 + 56]> */
		/* 821454A8h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821454A8h case   35:*/		return 0x821454AC;
		  /* 821454ACh */ case   36:  		/* mr R4, R26 */
		/* 821454ACh case   36:*/		regs.R4 = regs.R26;
		/* 821454ACh case   36:*/		return 0x821454B0;
		  /* 821454B0h */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 821454B0h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821454B0h case   37:*/		return 0x821454B4;
		  /* 821454B4h */ case   38:  		/* bc 4, CR6_GT, 164 */
		/* 821454B4h case   38:*/		if ( !regs.CR[6].gt ) { return 0x82145558;  }
		/* 821454B4h case   38:*/		return 0x821454B8;
		  /* 821454B8h */ case   39:  		/* mr R27, R26 */
		/* 821454B8h case   39:*/		regs.R27 = regs.R26;
		/* 821454B8h case   39:*/		return 0x821454BC;
		  /* 821454BCh */ case   40:  		/* lwz R11, <#[R31 + 4]> */
		/* 821454BCh case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821454BCh case   40:*/		return 0x821454C0;
		  /* 821454C0h */ case   41:  		/* lwz R11, <#[R11 + 24]> */
		/* 821454C0h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821454C0h case   41:*/		return 0x821454C4;
		  /* 821454C4h */ case   42:  		/* lwzx R30, <#[R11 + R27]> */
		/* 821454C4h case   42:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 821454C4h case   42:*/		return 0x821454C8;
		  /* 821454C8h */ case   43:  		/* lwz R11, <#[R30]> */
		/* 821454C8h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821454C8h case   43:*/		return 0x821454CC;
		  /* 821454CCh */ case   44:  		/* rlwinm. R11, R11, 0, 0, 11 */
		/* 821454CCh case   44:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R11);
		/* 821454CCh case   44:*/		return 0x821454D0;
		  /* 821454D0h */ case   45:  		/* bc 12, CR0_EQ, 116 */
		/* 821454D0h case   45:*/		if ( regs.CR[0].eq ) { return 0x82145544;  }
		/* 821454D0h case   45:*/		return 0x821454D4;
		  /* 821454D4h */ case   46:  		/* lwz R11, <#[R30 + 4]> */
		/* 821454D4h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821454D4h case   46:*/		return 0x821454D8;
		  /* 821454D8h */ case   47:  		/* mr R29, R26 */
		/* 821454D8h case   47:*/		regs.R29 = regs.R26;
		/* 821454D8h case   47:*/		return 0x821454DC;
		  /* 821454DCh */ case   48:  		/* cmplwi CR6, R11, 0 */
		/* 821454DCh case   48:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821454DCh case   48:*/		return 0x821454E0;
		  /* 821454E0h */ case   49:  		/* bc 4, CR6_GT, 44 */
		/* 821454E0h case   49:*/		if ( !regs.CR[6].gt ) { return 0x8214550C;  }
		/* 821454E0h case   49:*/		return 0x821454E4;
		  /* 821454E4h */ case   50:  		/* mr R6, R26 */
		/* 821454E4h case   50:*/		regs.R6 = regs.R26;
		/* 821454E4h case   50:*/		return 0x821454E8;
		  /* 821454E8h */ case   51:  		/* lwz R11, <#[R30 + 8]> */
		/* 821454E8h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821454E8h case   51:*/		return 0x821454EC;
		  /* 821454ECh */ case   52:  		/* mr R3, R31 */
		/* 821454ECh case   52:*/		regs.R3 = regs.R31;
		/* 821454ECh case   52:*/		return 0x821454F0;
		  /* 821454F0h */ case   53:  		/* lwzx R5, <#[R11 + R6]> */
		/* 821454F0h case   53:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 821454F0h case   53:*/		return 0x821454F4;
		  /* 821454F4h */ case   54:  		/* bl -3836 */
		/* 821454F4h case   54:*/		regs.LR = 0x821454F8; return 0x821445F8;
		/* 821454F4h case   54:*/		return 0x821454F8;
		  /* 821454F8h */ case   55:  		/* lwz R11, <#[R30 + 4]> */
		/* 821454F8h case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821454F8h case   55:*/		return 0x821454FC;
		  /* 821454FCh */ case   56:  		/* addi R29, R29, 1 */
		/* 821454FCh case   56:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821454FCh case   56:*/		return 0x82145500;
		  /* 82145500h */ case   57:  		/* addi R6, R6, 4 */
		/* 82145500h case   57:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 82145500h case   57:*/		return 0x82145504;
		  /* 82145504h */ case   58:  		/* cmplw CR6, R29, R11 */
		/* 82145504h case   58:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82145504h case   58:*/		return 0x82145508;
		  /* 82145508h */ case   59:  		/* bc 12, CR6_LT, -32 */
		/* 82145508h case   59:*/		if ( regs.CR[6].lt ) { return 0x821454E8;  }
		/* 82145508h case   59:*/		return 0x8214550C;
	}
	return 0x8214550C;
} // Block from 8214541Ch-8214550Ch (60 instructions)

//////////////////////////////////////////////////////
// Block at 8214550Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214550C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214550C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214550C);
		  /* 8214550Ch */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 8214550Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8214550Ch case    0:*/		return 0x82145510;
		  /* 82145510h */ case    1:  		/* mr R28, R26 */
		/* 82145510h case    1:*/		regs.R28 = regs.R26;
		/* 82145510h case    1:*/		return 0x82145514;
		  /* 82145514h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82145514h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82145514h case    2:*/		return 0x82145518;
		  /* 82145518h */ case    3:  		/* bc 4, CR6_GT, 44 */
		/* 82145518h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82145544;  }
		/* 82145518h case    3:*/		return 0x8214551C;
		  /* 8214551Ch */ case    4:  		/* mr R29, R26 */
		/* 8214551Ch case    4:*/		regs.R29 = regs.R26;
		/* 8214551Ch case    4:*/		return 0x82145520;
		  /* 82145520h */ case    5:  		/* lwz R11, <#[R30 + 16]> */
		/* 82145520h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82145520h case    5:*/		return 0x82145524;
		  /* 82145524h */ case    6:  		/* mr R3, R31 */
		/* 82145524h case    6:*/		regs.R3 = regs.R31;
		/* 82145524h case    6:*/		return 0x82145528;
		  /* 82145528h */ case    7:  		/* lwzx R5, <#[R11 + R29]> */
		/* 82145528h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82145528h case    7:*/		return 0x8214552C;
		  /* 8214552Ch */ case    8:  		/* bl -3732 */
		/* 8214552Ch case    8:*/		regs.LR = 0x82145530; return 0x82144698;
		/* 8214552Ch case    8:*/		return 0x82145530;
		  /* 82145530h */ case    9:  		/* lwz R11, <#[R30 + 12]> */
		/* 82145530h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82145530h case    9:*/		return 0x82145534;
		  /* 82145534h */ case   10:  		/* addi R28, R28, 1 */
		/* 82145534h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82145534h case   10:*/		return 0x82145538;
		  /* 82145538h */ case   11:  		/* addi R29, R29, 4 */
		/* 82145538h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82145538h case   11:*/		return 0x8214553C;
		  /* 8214553Ch */ case   12:  		/* cmplw CR6, R28, R11 */
		/* 8214553Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8214553Ch case   12:*/		return 0x82145540;
		  /* 82145540h */ case   13:  		/* bc 12, CR6_LT, -32 */
		/* 82145540h case   13:*/		if ( regs.CR[6].lt ) { return 0x82145520;  }
		/* 82145540h case   13:*/		return 0x82145544;
	}
	return 0x82145544;
} // Block from 8214550Ch-82145544h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82145544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145544);
		  /* 82145544h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 82145544h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82145544h case    0:*/		return 0x82145548;
		  /* 82145548h */ case    1:  		/* addi R4, R4, 1 */
		/* 82145548h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 82145548h case    1:*/		return 0x8214554C;
		  /* 8214554Ch */ case    2:  		/* addi R27, R27, 4 */
		/* 8214554Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 8214554Ch case    2:*/		return 0x82145550;
		  /* 82145550h */ case    3:  		/* cmplw CR6, R4, R11 */
		/* 82145550h case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82145550h case    3:*/		return 0x82145554;
		  /* 82145554h */ case    4:  		/* bc 12, CR6_LT, -152 */
		/* 82145554h case    4:*/		if ( regs.CR[6].lt ) { return 0x821454BC;  }
		/* 82145554h case    4:*/		return 0x82145558;
	}
	return 0x82145558;
} // Block from 82145544h-82145558h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82145558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145558);
		  /* 82145558h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 82145558h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82145558h case    0:*/		return 0x8214555C;
		  /* 8214555Ch */ case    1:  		/* mr R29, R26 */
		/* 8214555Ch case    1:*/		regs.R29 = regs.R26;
		/* 8214555Ch case    1:*/		return 0x82145560;
		  /* 82145560h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82145560h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82145560h case    2:*/		return 0x82145564;
		  /* 82145564h */ case    3:  		/* bc 4, CR6_GT, 100 */
		/* 82145564h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821455C8;  }
		/* 82145564h case    3:*/		return 0x82145568;
		  /* 82145568h */ case    4:  		/* mr R30, R26 */
		/* 82145568h case    4:*/		regs.R30 = regs.R26;
		/* 82145568h case    4:*/		return 0x8214556C;
		  /* 8214556Ch */ case    5:  		/* lwz R9, <#[R31 + 12]> */
		/* 8214556Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214556Ch case    5:*/		return 0x82145570;
		  /* 82145570h */ case    6:  		/* mr R3, R31 */
		/* 82145570h case    6:*/		regs.R3 = regs.R31;
		/* 82145570h case    6:*/		return 0x82145574;
		  /* 82145574h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 82145574h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82145574h case    7:*/		return 0x82145578;
		  /* 82145578h */ case    8:  		/* lwz R10, <#[R31 + 16]> */
		/* 82145578h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82145578h case    8:*/		return 0x8214557C;
		  /* 8214557Ch */ case    9:  		/* add R5, R30, R11 */
		/* 8214557Ch case    9:*/		cpu::op::add<0>(regs,&regs.R5,regs.R30,regs.R11);
		/* 8214557Ch case    9:*/		return 0x82145580;
		  /* 82145580h */ case   10:  		/* lwzx R11, <#[R30 + R9]> */
		/* 82145580h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 82145580h case   10:*/		return 0x82145584;
		  /* 82145584h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82145584h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82145584h case   11:*/		return 0x82145588;
		  /* 82145588h */ case   12:  		/* add R4, R11, R10 */
		/* 82145588h case   12:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 82145588h case   12:*/		return 0x8214558C;
		  /* 8214558Ch */ case   13:  		/* bl -3572 */
		/* 8214558Ch case   13:*/		regs.LR = 0x82145590; return 0x82144798;
		/* 8214558Ch case   13:*/		return 0x82145590;
		  /* 82145590h */ case   14:  		/* lwz R11, <#[R31 + 28]> */
		/* 82145590h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82145590h case   14:*/		return 0x82145594;
		  /* 82145594h */ case   15:  		/* lwz R10, <#[R31 + 36]> */
		/* 82145594h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 82145594h case   15:*/		return 0x82145598;
		  /* 82145598h */ case   16:  		/* mr R3, R31 */
		/* 82145598h case   16:*/		regs.R3 = regs.R31;
		/* 82145598h case   16:*/		return 0x8214559C;
		  /* 8214559Ch */ case   17:  		/* add R5, R30, R11 */
		/* 8214559Ch case   17:*/		cpu::op::add<0>(regs,&regs.R5,regs.R30,regs.R11);
		/* 8214559Ch case   17:*/		return 0x821455A0;
		  /* 821455A0h */ case   18:  		/* lwz R11, <#[R31 + 32]> */
		/* 821455A0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821455A0h case   18:*/		return 0x821455A4;
		  /* 821455A4h */ case   19:  		/* lwzx R11, <#[R30 + R11]> */
		/* 821455A4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821455A4h case   19:*/		return 0x821455A8;
		  /* 821455A8h */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821455A8h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821455A8h case   20:*/		return 0x821455AC;
		  /* 821455ACh */ case   21:  		/* add R4, R11, R10 */
		/* 821455ACh case   21:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 821455ACh case   21:*/		return 0x821455B0;
		  /* 821455B0h */ case   22:  		/* bl -3608 */
		/* 821455B0h case   22:*/		regs.LR = 0x821455B4; return 0x82144798;
		/* 821455B0h case   22:*/		return 0x821455B4;
		  /* 821455B4h */ case   23:  		/* lwz R11, <#[R31 + 56]> */
		/* 821455B4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821455B4h case   23:*/		return 0x821455B8;
		  /* 821455B8h */ case   24:  		/* addi R29, R29, 1 */
		/* 821455B8h case   24:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821455B8h case   24:*/		return 0x821455BC;
		  /* 821455BCh */ case   25:  		/* addi R30, R30, 4 */
		/* 821455BCh case   25:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821455BCh case   25:*/		return 0x821455C0;
		  /* 821455C0h */ case   26:  		/* cmplw CR6, R29, R11 */
		/* 821455C0h case   26:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821455C0h case   26:*/		return 0x821455C4;
		  /* 821455C4h */ case   27:  		/* bc 12, CR6_LT, -88 */
		/* 821455C4h case   27:*/		if ( regs.CR[6].lt ) { return 0x8214556C;  }
		/* 821455C4h case   27:*/		return 0x821455C8;
	}
	return 0x821455C8;
} // Block from 82145558h-821455C8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821455C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821455C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821455C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821455C8);
		  /* 821455C8h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 821455C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821455C8h case    0:*/		return 0x821455CC;
		  /* 821455CCh */ case    1:  		/* lis R4, 9345 */
		/* 821455CCh case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821455CCh case    1:*/		return 0x821455D0;
		  /* 821455D0h */ case    2:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 821455D0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 821455D0h case    2:*/		return 0x821455D4;
		  /* 821455D4h */ case    3:  		/* bl -775124 */
		/* 821455D4h case    3:*/		regs.LR = 0x821455D8; return 0x82088200;
		/* 821455D4h case    3:*/		return 0x821455D8;
		  /* 821455D8h */ case    4:  		/* stw R3, <#[R31 + 60]> */
		/* 821455D8h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000003C) );
		/* 821455D8h case    4:*/		return 0x821455DC;
		  /* 821455DCh */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 821455DCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821455DCh case    5:*/		return 0x821455E0;
		  /* 821455E0h */ case    6:  		/* bc 12, CR0_EQ, 412 */
		/* 821455E0h case    6:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 821455E0h case    6:*/		return 0x821455E4;
		  /* 821455E4h */ case    7:  		/* lwz R11, <#[R31 + 56]> */
		/* 821455E4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821455E4h case    7:*/		return 0x821455E8;
		  /* 821455E8h */ case    8:  		/* lis R4, 9345 */
		/* 821455E8h case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821455E8h case    8:*/		return 0x821455EC;
		  /* 821455ECh */ case    9:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 821455ECh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 821455ECh case    9:*/		return 0x821455F0;
		  /* 821455F0h */ case   10:  		/* bl -775152 */
		/* 821455F0h case   10:*/		regs.LR = 0x821455F4; return 0x82088200;
		/* 821455F0h case   10:*/		return 0x821455F4;
		  /* 821455F4h */ case   11:  		/* stw R3, <#[R31 + 64]> */
		/* 821455F4h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000040) );
		/* 821455F4h case   11:*/		return 0x821455F8;
		  /* 821455F8h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 821455F8h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821455F8h case   12:*/		return 0x821455FC;
		  /* 821455FCh */ case   13:  		/* bc 12, CR0_EQ, 384 */
		/* 821455FCh case   13:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 821455FCh case   13:*/		return 0x82145600;
		  /* 82145600h */ case   14:  		/* lwz R11, <#[R31 + 56]> */
		/* 82145600h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82145600h case   14:*/		return 0x82145604;
		  /* 82145604h */ case   15:  		/* lis R4, 9345 */
		/* 82145604h case   15:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145604h case   15:*/		return 0x82145608;
		  /* 82145608h */ case   16:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 82145608h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 82145608h case   16:*/		return 0x8214560C;
		  /* 8214560Ch */ case   17:  		/* bl -775180 */
		/* 8214560Ch case   17:*/		regs.LR = 0x82145610; return 0x82088200;
		/* 8214560Ch case   17:*/		return 0x82145610;
		  /* 82145610h */ case   18:  		/* cmplwi CR0, R3, 0 */
		/* 82145610h case   18:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145610h case   18:*/		return 0x82145614;
		  /* 82145614h */ case   19:  		/* stw R3, <#[R31 + 68]> */
		/* 82145614h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000044) );
		/* 82145614h case   19:*/		return 0x82145618;
		  /* 82145618h */ case   20:  		/* bc 12, CR0_EQ, 356 */
		/* 82145618h case   20:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 82145618h case   20:*/		return 0x8214561C;
		  /* 8214561Ch */ case   21:  		/* lwz R11, <#[R31 + 56]> */
		/* 8214561Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8214561Ch case   21:*/		return 0x82145620;
		  /* 82145620h */ case   22:  		/* lis R4, 9345 */
		/* 82145620h case   22:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145620h case   22:*/		return 0x82145624;
		  /* 82145624h */ case   23:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 82145624h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 82145624h case   23:*/		return 0x82145628;
		  /* 82145628h */ case   24:  		/* bl -775208 */
		/* 82145628h case   24:*/		regs.LR = 0x8214562C; return 0x82088200;
		/* 82145628h case   24:*/		return 0x8214562C;
		  /* 8214562Ch */ case   25:  		/* stw R3, <#[R31 + 52]> */
		/* 8214562Ch case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8214562Ch case   25:*/		return 0x82145630;
		  /* 82145630h */ case   26:  		/* cmplwi CR0, R3, 0 */
		/* 82145630h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145630h case   26:*/		return 0x82145634;
		  /* 82145634h */ case   27:  		/* bc 12, CR0_EQ, 328 */
		/* 82145634h case   27:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 82145634h case   27:*/		return 0x82145638;
		  /* 82145638h */ case   28:  		/* lwz R11, <#[R31 + 56]> */
		/* 82145638h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82145638h case   28:*/		return 0x8214563C;
		  /* 8214563Ch */ case   29:  		/* mr R29, R26 */
		/* 8214563Ch case   29:*/		regs.R29 = regs.R26;
		/* 8214563Ch case   29:*/		return 0x82145640;
		  /* 82145640h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 82145640h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82145640h case   30:*/		return 0x82145644;
		  /* 82145644h */ case   31:  		/* bc 4, CR6_GT, 104 */
		/* 82145644h case   31:*/		if ( !regs.CR[6].gt ) { return 0x821456AC;  }
		/* 82145644h case   31:*/		return 0x82145648;
		  /* 82145648h */ case   32:  		/* mr R30, R26 */
		/* 82145648h case   32:*/		regs.R30 = regs.R26;
		/* 82145648h case   32:*/		return 0x8214564C;
		  /* 8214564Ch */ case   33:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214564Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214564Ch case   33:*/		return 0x82145650;
		  /* 82145650h */ case   34:  		/* li R10, -1 */
		/* 82145650h case   34:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82145650h case   34:*/		return 0x82145654;
		  /* 82145654h */ case   35:  		/* lwz R9, <#[R31 + 60]> */
		/* 82145654h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 82145654h case   35:*/		return 0x82145658;
		  /* 82145658h */ case   36:  		/* lwz R11, <#[R11 + 24]> */
		/* 82145658h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82145658h case   36:*/		return 0x8214565C;
		  /* 8214565Ch */ case   37:  		/* lwzx R3, <#[R11 + R30]> */
		/* 8214565Ch case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8214565Ch case   37:*/		return 0x82145660;
		  /* 82145660h */ case   38:  		/* stwx R29, <#[R30 + R9]> */
		/* 82145660h case   38:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 82145660h case   38:*/		return 0x82145664;
		  /* 82145664h */ case   39:  		/* lwz R11, <#[R31 + 68]> */
		/* 82145664h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 82145664h case   39:*/		return 0x82145668;
		  /* 82145668h */ case   40:  		/* stwx R3, <#[R11 + R30]> */
		/* 82145668h case   40:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82145668h case   40:*/		return 0x8214566C;
		  /* 8214566Ch */ case   41:  		/* lwz R11, <#[R3]> */
		/* 8214566Ch case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214566Ch case   41:*/		return 0x82145670;
		  /* 82145670h */ case   42:  		/* rlwinm. R11, R11, 0, 0, 11 */
		/* 82145670h case   42:*/		cpu::op::rlwinm<1,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82145670h case   42:*/		return 0x82145674;
		  /* 82145674h */ case   43:  		/* stw R10, <#[R3 + 36]> */
		/* 82145674h case   43:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000024) );
		/* 82145674h case   43:*/		return 0x82145678;
		  /* 82145678h */ case   44:  		/* bc 12, CR0_EQ, 20 */
		/* 82145678h case   44:*/		if ( regs.CR[0].eq ) { return 0x8214568C;  }
		/* 82145678h case   44:*/		return 0x8214567C;
		  /* 8214567Ch */ case   45:  		/* bl -299988 */
		/* 8214567Ch case   45:*/		regs.LR = 0x82145680; return 0x820FC2A8;
		/* 8214567Ch case   45:*/		return 0x82145680;
		  /* 82145680h */ case   46:  		/* cmpwi CR0, R3, 0 */
		/* 82145680h case   46:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82145680h case   46:*/		return 0x82145684;
		  /* 82145684h */ case   47:  		/* mr R11, R26 */
		/* 82145684h case   47:*/		regs.R11 = regs.R26;
		/* 82145684h case   47:*/		return 0x82145688;
		  /* 82145688h */ case   48:  		/* bc 12, CR0_EQ, 8 */
		/* 82145688h case   48:*/		if ( regs.CR[0].eq ) { return 0x82145690;  }
		/* 82145688h case   48:*/		return 0x8214568C;
	}
	return 0x8214568C;
} // Block from 821455C8h-8214568Ch (49 instructions)

//////////////////////////////////////////////////////
// Block at 8214568Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214568C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214568C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214568C);
		  /* 8214568Ch */ case    0:  		/* li R11, 1 */
		/* 8214568Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8214568Ch case    0:*/		return 0x82145690;
	}
	return 0x82145690;
} // Block from 8214568Ch-82145690h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145690);
		  /* 82145690h */ case    0:  		/* lwz R10, <#[R31 + 52]> */
		/* 82145690h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000034) );
		/* 82145690h case    0:*/		return 0x82145694;
		  /* 82145694h */ case    1:  		/* addi R29, R29, 1 */
		/* 82145694h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82145694h case    1:*/		return 0x82145698;
		  /* 82145698h */ case    2:  		/* stwx R11, <#[R30 + R10]> */
		/* 82145698h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 82145698h case    2:*/		return 0x8214569C;
		  /* 8214569Ch */ case    3:  		/* addi R30, R30, 4 */
		/* 8214569Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8214569Ch case    3:*/		return 0x821456A0;
		  /* 821456A0h */ case    4:  		/* lwz R11, <#[R31 + 56]> */
		/* 821456A0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821456A0h case    4:*/		return 0x821456A4;
		  /* 821456A4h */ case    5:  		/* cmplw CR6, R29, R11 */
		/* 821456A4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821456A4h case    5:*/		return 0x821456A8;
		  /* 821456A8h */ case    6:  		/* bc 12, CR6_LT, -92 */
		/* 821456A8h case    6:*/		if ( regs.CR[6].lt ) { return 0x8214564C;  }
		/* 821456A8h case    6:*/		return 0x821456AC;
	}
	return 0x821456AC;
} // Block from 82145690h-821456ACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821456ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821456AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821456AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821456AC);
		  /* 821456ACh */ case    0:  		/* stw R26, <#[R31 + 72]> */
		/* 821456ACh case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000048) );
		/* 821456ACh case    0:*/		return 0x821456B0;
		  /* 821456B0h */ case    1:  		/* lis R4, 9345 */
		/* 821456B0h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821456B0h case    1:*/		return 0x821456B4;
		  /* 821456B4h */ case    2:  		/* lwz R11, <#[R31 + 56]> */
		/* 821456B4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821456B4h case    2:*/		return 0x821456B8;
		  /* 821456B8h */ case    3:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 821456B8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 821456B8h case    3:*/		return 0x821456BC;
		  /* 821456BCh */ case    4:  		/* bl -775356 */
		/* 821456BCh case    4:*/		regs.LR = 0x821456C0; return 0x82088200;
		/* 821456BCh case    4:*/		return 0x821456C0;
		  /* 821456C0h */ case    5:  		/* stw R3, <#[R31 + 40]> */
		/* 821456C0h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 821456C0h case    5:*/		return 0x821456C4;
		  /* 821456C4h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 821456C4h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821456C4h case    6:*/		return 0x821456C8;
		  /* 821456C8h */ case    7:  		/* bc 12, CR0_EQ, 180 */
		/* 821456C8h case    7:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 821456C8h case    7:*/		return 0x821456CC;
		  /* 821456CCh */ case    8:  		/* lwz R11, <#[R31 + 56]> */
		/* 821456CCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821456CCh case    8:*/		return 0x821456D0;
		  /* 821456D0h */ case    9:  		/* lis R4, 9345 */
		/* 821456D0h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821456D0h case    9:*/		return 0x821456D4;
		  /* 821456D4h */ case   10:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 821456D4h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 821456D4h case   10:*/		return 0x821456D8;
		  /* 821456D8h */ case   11:  		/* bl -775384 */
		/* 821456D8h case   11:*/		regs.LR = 0x821456DC; return 0x82088200;
		/* 821456D8h case   11:*/		return 0x821456DC;
		  /* 821456DCh */ case   12:  		/* stw R3, <#[R31 + 44]> */
		/* 821456DCh case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821456DCh case   12:*/		return 0x821456E0;
		  /* 821456E0h */ case   13:  		/* cmplwi CR0, R3, 0 */
		/* 821456E0h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821456E0h case   13:*/		return 0x821456E4;
		  /* 821456E4h */ case   14:  		/* bc 12, CR0_EQ, 152 */
		/* 821456E4h case   14:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 821456E4h case   14:*/		return 0x821456E8;
		  /* 821456E8h */ case   15:  		/* lwz R11, <#[R31 + 56]> */
		/* 821456E8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821456E8h case   15:*/		return 0x821456EC;
		  /* 821456ECh */ case   16:  		/* lis R4, 9345 */
		/* 821456ECh case   16:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821456ECh case   16:*/		return 0x821456F0;
		  /* 821456F0h */ case   17:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 821456F0h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 821456F0h case   17:*/		return 0x821456F4;
		  /* 821456F4h */ case   18:  		/* bl -775412 */
		/* 821456F4h case   18:*/		regs.LR = 0x821456F8; return 0x82088200;
		/* 821456F4h case   18:*/		return 0x821456F8;
		  /* 821456F8h */ case   19:  		/* stw R3, <#[R31 + 48]> */
		/* 821456F8h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821456F8h case   19:*/		return 0x821456FC;
		  /* 821456FCh */ case   20:  		/* cmplwi CR0, R3, 0 */
		/* 821456FCh case   20:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821456FCh case   20:*/		return 0x82145700;
		  /* 82145700h */ case   21:  		/* bc 12, CR0_EQ, 124 */
		/* 82145700h case   21:*/		if ( regs.CR[0].eq ) { return 0x8214577C;  }
		/* 82145700h case   21:*/		return 0x82145704;
		  /* 82145704h */ case   22:  		/* cmpwi CR6, R25, 0 */
		/* 82145704h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82145704h case   22:*/		return 0x82145708;
		  /* 82145708h */ case   23:  		/* bc 12, CR6_EQ, 108 */
		/* 82145708h case   23:*/		if ( regs.CR[6].eq ) { return 0x82145774;  }
		/* 82145708h case   23:*/		return 0x8214570C;
		  /* 8214570Ch */ case   24:  		/* b 12 */
		/* 8214570Ch case   24:*/		return 0x82145718;
		/* 8214570Ch case   24:*/		return 0x82145710;
		  /* 82145710h */ case   25:  		/* cmpwi CR6, R3, 1 */
		/* 82145710h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82145710h case   25:*/		return 0x82145714;
		  /* 82145714h */ case   26:  		/* bc 12, CR6_EQ, 24 */
		/* 82145714h case   26:*/		if ( regs.CR[6].eq ) { return 0x8214572C;  }
		/* 82145714h case   26:*/		return 0x82145718;
	}
	return 0x82145718;
} // Block from 821456ACh-82145718h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82145718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145718);
		  /* 82145718h */ case    0:  		/* mr R3, R31 */
		/* 82145718h case    0:*/		regs.R3 = regs.R31;
		/* 82145718h case    0:*/		return 0x8214571C;
		  /* 8214571Ch */ case    1:  		/* bl -1476 */
		/* 8214571Ch case    1:*/		regs.LR = 0x82145720; return 0x82145158;
		/* 8214571Ch case    1:*/		return 0x82145720;
		  /* 82145720h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82145720h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82145720h case    2:*/		return 0x82145724;
		  /* 82145724h */ case    3:  		/* bc 4, CR0_LT, -20 */
		/* 82145724h case    3:*/		if ( !regs.CR[0].lt ) { return 0x82145710;  }
		/* 82145724h case    3:*/		return 0x82145728;
		  /* 82145728h */ case    4:  		/* b 276 */
		/* 82145728h case    4:*/		return 0x8214583C;
		/* 82145728h case    4:*/		return 0x8214572C;
	}
	return 0x8214572C;
} // Block from 82145718h-8214572Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214572Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214572C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214572C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214572C);
		  /* 8214572Ch */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 8214572Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8214572Ch case    0:*/		return 0x82145730;
		  /* 82145730h */ case    1:  		/* mr R10, R26 */
		/* 82145730h case    1:*/		regs.R10 = regs.R26;
		/* 82145730h case    1:*/		return 0x82145734;
		  /* 82145734h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82145734h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82145734h case    2:*/		return 0x82145738;
		  /* 82145738h */ case    3:  		/* bc 4, CR6_GT, 60 */
		/* 82145738h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82145774;  }
		/* 82145738h case    3:*/		return 0x8214573C;
		  /* 8214573Ch */ case    4:  		/* mr R11, R26 */
		/* 8214573Ch case    4:*/		regs.R11 = regs.R26;
		/* 8214573Ch case    4:*/		return 0x82145740;
		  /* 82145740h */ case    5:  		/* lwz R9, <#[R31 + 60]> */
		/* 82145740h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 82145740h case    5:*/		return 0x82145744;
		  /* 82145744h */ case    6:  		/* addi R10, R10, 1 */
		/* 82145744h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82145744h case    6:*/		return 0x82145748;
		  /* 82145748h */ case    7:  		/* lwz R8, <#[R31 + 68]> */
		/* 82145748h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000044) );
		/* 82145748h case    7:*/		return 0x8214574C;
		  /* 8214574Ch */ case    8:  		/* lwz R7, <#[R31 + 4]> */
		/* 8214574Ch case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 8214574Ch case    8:*/		return 0x82145750;
		  /* 82145750h */ case    9:  		/* lwzx R9, <#[R11 + R9]> */
		/* 82145750h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82145750h case    9:*/		return 0x82145754;
		  /* 82145754h */ case   10:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82145754h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82145754h case   10:*/		return 0x82145758;
		  /* 82145758h */ case   11:  		/* lwz R7, <#[R7 + 24]> */
		/* 82145758h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000018) );
		/* 82145758h case   11:*/		return 0x8214575C;
		  /* 8214575Ch */ case   12:  		/* lwzx R9, <#[R9 + R8]> */
		/* 8214575Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8214575Ch case   12:*/		return 0x82145760;
		  /* 82145760h */ case   13:  		/* stwx R9, <#[R7 + R11]> */
		/* 82145760h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82145760h case   13:*/		return 0x82145764;
		  /* 82145764h */ case   14:  		/* addi R11, R11, 4 */
		/* 82145764h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82145764h case   14:*/		return 0x82145768;
		  /* 82145768h */ case   15:  		/* lwz R9, <#[R31 + 56]> */
		/* 82145768h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000038) );
		/* 82145768h case   15:*/		return 0x8214576C;
		  /* 8214576Ch */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 8214576Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8214576Ch case   16:*/		return 0x82145770;
		  /* 82145770h */ case   17:  		/* bc 12, CR6_LT, -48 */
		/* 82145770h case   17:*/		if ( regs.CR[6].lt ) { return 0x82145740;  }
		/* 82145770h case   17:*/		return 0x82145774;
	}
	return 0x82145774;
} // Block from 8214572Ch-82145774h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82145774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145774);
		  /* 82145774h */ case    0:  		/* mr R30, R26 */
		/* 82145774h case    0:*/		regs.R30 = regs.R26;
		/* 82145774h case    0:*/		return 0x82145778;
		  /* 82145778h */ case    1:  		/* b 12 */
		/* 82145778h case    1:*/		return 0x82145784;
		/* 82145778h case    1:*/		return 0x8214577C;
	}
	return 0x8214577C;
} // Block from 82145774h-8214577Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214577Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214577C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214577C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214577C);
		  /* 8214577Ch */ case    0:  		/* lis R30, -32761 */
		/* 8214577Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 8214577Ch case    0:*/		return 0x82145780;
		  /* 82145780h */ case    1:  		/* ori R30, R30, 14 */
		/* 82145780h case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 82145780h case    1:*/		return 0x82145784;
	}
	return 0x82145784;
} // Block from 8214577Ch-82145784h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82145784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145784);
		  /* 82145784h */ case    0:  		/* lis R4, 9345 */
		/* 82145784h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145784h case    0:*/		return 0x82145788;
		  /* 82145788h */ case    1:  		/* lwz R3, <#[R31 + 8]> */
		/* 82145788h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82145788h case    1:*/		return 0x8214578C;
		  /* 8214578Ch */ case    2:  		/* bl -775252 */
		/* 8214578Ch case    2:*/		regs.LR = 0x82145790; return 0x82088338;
		/* 8214578Ch case    2:*/		return 0x82145790;
		  /* 82145790h */ case    3:  		/* lis R4, 9345 */
		/* 82145790h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145790h case    3:*/		return 0x82145794;
		  /* 82145794h */ case    4:  		/* lwz R3, <#[R31 + 12]> */
		/* 82145794h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 82145794h case    4:*/		return 0x82145798;
		  /* 82145798h */ case    5:  		/* bl -775264 */
		/* 82145798h case    5:*/		regs.LR = 0x8214579C; return 0x82088338;
		/* 82145798h case    5:*/		return 0x8214579C;
		  /* 8214579Ch */ case    6:  		/* lis R4, 9345 */
		/* 8214579Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8214579Ch case    6:*/		return 0x821457A0;
		  /* 821457A0h */ case    7:  		/* lwz R3, <#[R31 + 16]> */
		/* 821457A0h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 821457A0h case    7:*/		return 0x821457A4;
		  /* 821457A4h */ case    8:  		/* bl -775276 */
		/* 821457A4h case    8:*/		regs.LR = 0x821457A8; return 0x82088338;
		/* 821457A4h case    8:*/		return 0x821457A8;
		  /* 821457A8h */ case    9:  		/* lis R4, 9345 */
		/* 821457A8h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821457A8h case    9:*/		return 0x821457AC;
		  /* 821457ACh */ case   10:  		/* lwz R3, <#[R31 + 20]> */
		/* 821457ACh case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 821457ACh case   10:*/		return 0x821457B0;
		  /* 821457B0h */ case   11:  		/* bl -775288 */
		/* 821457B0h case   11:*/		regs.LR = 0x821457B4; return 0x82088338;
		/* 821457B0h case   11:*/		return 0x821457B4;
		  /* 821457B4h */ case   12:  		/* lis R4, 9345 */
		/* 821457B4h case   12:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821457B4h case   12:*/		return 0x821457B8;
		  /* 821457B8h */ case   13:  		/* lwz R3, <#[R31 + 24]> */
		/* 821457B8h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 821457B8h case   13:*/		return 0x821457BC;
		  /* 821457BCh */ case   14:  		/* bl -775300 */
		/* 821457BCh case   14:*/		regs.LR = 0x821457C0; return 0x82088338;
		/* 821457BCh case   14:*/		return 0x821457C0;
		  /* 821457C0h */ case   15:  		/* lis R4, 9345 */
		/* 821457C0h case   15:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821457C0h case   15:*/		return 0x821457C4;
		  /* 821457C4h */ case   16:  		/* lwz R3, <#[R31 + 28]> */
		/* 821457C4h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 821457C4h case   16:*/		return 0x821457C8;
		  /* 821457C8h */ case   17:  		/* bl -775312 */
		/* 821457C8h case   17:*/		regs.LR = 0x821457CC; return 0x82088338;
		/* 821457C8h case   17:*/		return 0x821457CC;
		  /* 821457CCh */ case   18:  		/* lis R4, 9345 */
		/* 821457CCh case   18:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821457CCh case   18:*/		return 0x821457D0;
		  /* 821457D0h */ case   19:  		/* lwz R3, <#[R31 + 32]> */
		/* 821457D0h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 821457D0h case   19:*/		return 0x821457D4;
		  /* 821457D4h */ case   20:  		/* bl -775324 */
		/* 821457D4h case   20:*/		regs.LR = 0x821457D8; return 0x82088338;
		/* 821457D4h case   20:*/		return 0x821457D8;
		  /* 821457D8h */ case   21:  		/* lis R4, 9345 */
		/* 821457D8h case   21:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821457D8h case   21:*/		return 0x821457DC;
		  /* 821457DCh */ case   22:  		/* lwz R3, <#[R31 + 36]> */
		/* 821457DCh case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 821457DCh case   22:*/		return 0x821457E0;
		  /* 821457E0h */ case   23:  		/* bl -775336 */
		/* 821457E0h case   23:*/		regs.LR = 0x821457E4; return 0x82088338;
		/* 821457E0h case   23:*/		return 0x821457E4;
		  /* 821457E4h */ case   24:  		/* lis R4, 9345 */
		/* 821457E4h case   24:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821457E4h case   24:*/		return 0x821457E8;
		  /* 821457E8h */ case   25:  		/* lwz R3, <#[R31 + 40]> */
		/* 821457E8h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 821457E8h case   25:*/		return 0x821457EC;
		  /* 821457ECh */ case   26:  		/* bl -775348 */
		/* 821457ECh case   26:*/		regs.LR = 0x821457F0; return 0x82088338;
		/* 821457ECh case   26:*/		return 0x821457F0;
		  /* 821457F0h */ case   27:  		/* lis R4, 9345 */
		/* 821457F0h case   27:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821457F0h case   27:*/		return 0x821457F4;
		  /* 821457F4h */ case   28:  		/* lwz R3, <#[R31 + 44]> */
		/* 821457F4h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821457F4h case   28:*/		return 0x821457F8;
		  /* 821457F8h */ case   29:  		/* bl -775360 */
		/* 821457F8h case   29:*/		regs.LR = 0x821457FC; return 0x82088338;
		/* 821457F8h case   29:*/		return 0x821457FC;
		  /* 821457FCh */ case   30:  		/* lis R4, 9345 */
		/* 821457FCh case   30:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821457FCh case   30:*/		return 0x82145800;
		  /* 82145800h */ case   31:  		/* lwz R3, <#[R31 + 48]> */
		/* 82145800h case   31:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82145800h case   31:*/		return 0x82145804;
		  /* 82145804h */ case   32:  		/* bl -775372 */
		/* 82145804h case   32:*/		regs.LR = 0x82145808; return 0x82088338;
		/* 82145804h case   32:*/		return 0x82145808;
		  /* 82145808h */ case   33:  		/* lis R4, 9345 */
		/* 82145808h case   33:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145808h case   33:*/		return 0x8214580C;
		  /* 8214580Ch */ case   34:  		/* lwz R3, <#[R31 + 52]> */
		/* 8214580Ch case   34:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8214580Ch case   34:*/		return 0x82145810;
		  /* 82145810h */ case   35:  		/* bl -775384 */
		/* 82145810h case   35:*/		regs.LR = 0x82145814; return 0x82088338;
		/* 82145810h case   35:*/		return 0x82145814;
		  /* 82145814h */ case   36:  		/* lis R4, 9345 */
		/* 82145814h case   36:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145814h case   36:*/		return 0x82145818;
		  /* 82145818h */ case   37:  		/* lwz R3, <#[R31 + 60]> */
		/* 82145818h case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000003C) );
		/* 82145818h case   37:*/		return 0x8214581C;
		  /* 8214581Ch */ case   38:  		/* bl -775396 */
		/* 8214581Ch case   38:*/		regs.LR = 0x82145820; return 0x82088338;
		/* 8214581Ch case   38:*/		return 0x82145820;
		  /* 82145820h */ case   39:  		/* lis R4, 9345 */
		/* 82145820h case   39:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82145820h case   39:*/		return 0x82145824;
		  /* 82145824h */ case   40:  		/* lwz R3, <#[R31 + 64]> */
		/* 82145824h case   40:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000040) );
		/* 82145824h case   40:*/		return 0x82145828;
		  /* 82145828h */ case   41:  		/* bl -775408 */
		/* 82145828h case   41:*/		regs.LR = 0x8214582C; return 0x82088338;
		/* 82145828h case   41:*/		return 0x8214582C;
		  /* 8214582Ch */ case   42:  		/* lis R4, 9345 */
		/* 8214582Ch case   42:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8214582Ch case   42:*/		return 0x82145830;
		  /* 82145830h */ case   43:  		/* lwz R3, <#[R31 + 68]> */
		/* 82145830h case   43:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000044) );
		/* 82145830h case   43:*/		return 0x82145834;
		  /* 82145834h */ case   44:  		/* bl -775420 */
		/* 82145834h case   44:*/		regs.LR = 0x82145838; return 0x82088338;
		/* 82145834h case   44:*/		return 0x82145838;
		  /* 82145838h */ case   45:  		/* mr R3, R30 */
		/* 82145838h case   45:*/		regs.R3 = regs.R30;
		/* 82145838h case   45:*/		return 0x8214583C;
	}
	return 0x8214583C;
} // Block from 82145784h-8214583Ch (46 instructions)

//////////////////////////////////////////////////////
// Block at 8214583Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214583C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214583C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214583C);
		  /* 8214583Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 8214583Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214583Ch case    0:*/		return 0x82145840;
		  /* 82145840h */ case    1:  		/* b -738724 */
		/* 82145840h case    1:*/		return 0x8209129C;
		/* 82145840h case    1:*/		return 0x82145844;
		  /* 82145844h */ case    2:  		/* nop */
		/* 82145844h case    2:*/		cpu::op::nop();
		/* 82145844h case    2:*/		return 0x82145848;
	}
	return 0x82145848;
} // Block from 8214583Ch-82145848h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82145848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145848);
		  /* 82145848h */ case    0:  		/* mfspr R12, LR */
		/* 82145848h case    0:*/		regs.R12 = regs.LR;
		/* 82145848h case    0:*/		return 0x8214584C;
		  /* 8214584Ch */ case    1:  		/* bl -738808 */
		/* 8214584Ch case    1:*/		regs.LR = 0x82145850; return 0x82091254;
		/* 8214584Ch case    1:*/		return 0x82145850;
		  /* 82145850h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82145850h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82145850h case    2:*/		return 0x82145854;
		  /* 82145854h */ case    3:  		/* lis R11, -32217 */
		/* 82145854h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82145854h case    3:*/		return 0x82145858;
		  /* 82145858h */ case    4:  		/* li R10, 0 */
		/* 82145858h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82145858h case    4:*/		return 0x8214585C;
		  /* 8214585Ch */ case    5:  		/* addi R11, R11, 16896 */
		/* 8214585Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4200);
		/* 8214585Ch case    5:*/		return 0x82145860;
		  /* 82145860h */ case    6:  		/* li R28, 0 */
		/* 82145860h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82145860h case    6:*/		return 0x82145864;
		  /* 82145864h */ case    7:  		/* stw R10, <#[R8]> */
		/* 82145864h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 82145864h case    7:*/		return 0x82145868;
		  /* 82145868h */ case    8:  		/* mr R31, R11 */
		/* 82145868h case    8:*/		regs.R31 = regs.R11;
		/* 82145868h case    8:*/		return 0x8214586C;
		  /* 8214586Ch */ case    9:  		/* li R29, 0 */
		/* 8214586Ch case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8214586Ch case    9:*/		return 0x82145870;
		  /* 82145870h */ case   10:  		/* li R30, 0 */
		/* 82145870h case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82145870h case   10:*/		return 0x82145874;
		  /* 82145874h */ case   11:  		/* cmplwi CR6, R4, 0 */
		/* 82145874h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82145874h case   11:*/		return 0x82145878;
		  /* 82145878h */ case   12:  		/* bc 12, CR6_EQ, 264 */
		/* 82145878h case   12:*/		if ( regs.CR[6].eq ) { return 0x82145980;  }
		/* 82145878h case   12:*/		return 0x8214587C;
		  /* 8214587Ch */ case   13:  		/* lwz R10, <#[R4 + 4]> */
		/* 8214587Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 8214587Ch case   13:*/		return 0x82145880;
		  /* 82145880h */ case   14:  		/* cmpwi CR6, R10, 3 */
		/* 82145880h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 82145880h case   14:*/		return 0x82145884;
		  /* 82145884h */ case   15:  		/* bc 4, CR6_EQ, 252 */
		/* 82145884h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82145980;  }
		/* 82145884h case   15:*/		return 0x82145888;
		  /* 82145888h */ case   16:  		/* addi R4, R4, 16 */
		/* 82145888h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x10);
		/* 82145888h case   16:*/		return 0x8214588C;
		  /* 8214588Ch */ case   17:  		/* b 12 */
		/* 8214588Ch case   17:*/		return 0x82145898;
		/* 8214588Ch case   17:*/		return 0x82145890;
		  /* 82145890h */ case   18:  		/* lwz R5, <#[R5 + 12]> */
		/* 82145890h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x0000000C) );
		/* 82145890h case   18:*/		return 0x82145894;
		  /* 82145894h */ case   19:  		/* addi R30, R30, 1 */
		/* 82145894h case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82145894h case   19:*/		return 0x82145898;
	}
	return 0x82145898;
} // Block from 82145848h-82145898h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82145898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145898);
		  /* 82145898h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 82145898h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82145898h case    0:*/		return 0x8214589C;
		  /* 8214589Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8214589Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82145890;  }
		/* 8214589Ch case    1:*/		return 0x821458A0;
		  /* 821458A0h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821458A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821458A0h case    2:*/		return 0x821458A4;
		  /* 821458A4h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821458A4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821458A4h case    3:*/		return 0x821458A8;
		  /* 821458A8h */ case    4:  		/* bc 12, CR6_EQ, 100 */
		/* 821458A8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8214590C;  }
		/* 821458A8h case    4:*/		return 0x821458AC;
		  /* 821458ACh */ case    5:  		/* lwz R5, <#[R4 + 8]> */
		/* 821458ACh case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x00000008) );
		/* 821458ACh case    5:*/		return 0x821458B0;
		  /* 821458B0h */ case    6:  		/* mr R10, R5 */
		/* 821458B0h case    6:*/		regs.R10 = regs.R5;
		/* 821458B0h case    6:*/		return 0x821458B4;
		  /* 821458B4h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 821458B4h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821458B4h case    7:*/		return 0x821458B8;
		  /* 821458B8h */ case    8:  		/* lbz R27, <#[R10]> */
		/* 821458B8h case    8:*/		cpu::mem::load8z( regs, &regs.R27, (uint32)(regs.R10 + 0x00000000) );
		/* 821458B8h case    8:*/		return 0x821458BC;
		  /* 821458BCh */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 821458BCh case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821458BCh case    9:*/		return 0x821458C0;
		  /* 821458C0h */ case   10:  		/* subf R9, R27, R9 */
		/* 821458C0h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 821458C0h case   10:*/		return 0x821458C4;
		  /* 821458C4h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 821458C4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821458D8;  }
		/* 821458C4h case   11:*/		return 0x821458C8;
		  /* 821458C8h */ case   12:  		/* addi R11, R11, 1 */
		/* 821458C8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821458C8h case   12:*/		return 0x821458CC;
		  /* 821458CCh */ case   13:  		/* addi R10, R10, 1 */
		/* 821458CCh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821458CCh case   13:*/		return 0x821458D0;
		  /* 821458D0h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 821458D0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821458D0h case   14:*/		return 0x821458D4;
		  /* 821458D4h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 821458D4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821458B4;  }
		/* 821458D4h case   15:*/		return 0x821458D8;
	}
	return 0x821458D8;
} // Block from 82145898h-821458D8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821458D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821458D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821458D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821458D8);
		  /* 821458D8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821458D8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821458D8h case    0:*/		return 0x821458DC;
		  /* 821458DCh */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 821458DCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82145900;  }
		/* 821458DCh case    1:*/		return 0x821458E0;
		  /* 821458E0h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821458E0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821458E0h case    2:*/		return 0x821458E4;
		  /* 821458E4h */ case    3:  		/* li R29, 1 */
		/* 821458E4h case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821458E4h case    3:*/		return 0x821458E8;
		  /* 821458E8h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 821458E8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821458E8h case    4:*/		return 0x821458EC;
		  /* 821458ECh */ case    5:  		/* bc 12, CR6_LT, 16 */
		/* 821458ECh case    5:*/		if ( regs.CR[6].lt ) { return 0x821458FC;  }
		/* 821458ECh case    5:*/		return 0x821458F0;
		  /* 821458F0h */ case    6:  		/* lwz R11, <#[R31 + 12]> */
		/* 821458F0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821458F0h case    6:*/		return 0x821458F4;
		  /* 821458F4h */ case    7:  		/* cmplw CR6, R30, R11 */
		/* 821458F4h case    7:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821458F4h case    7:*/		return 0x821458F8;
		  /* 821458F8h */ case    8:  		/* bc 4, CR6_GT, 20 */
		/* 821458F8h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8214590C;  }
		/* 821458F8h case    8:*/		return 0x821458FC;
	}
	return 0x821458FC;
} // Block from 821458D8h-821458FCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821458FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821458FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821458FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821458FC);
		  /* 821458FCh */ case    0:  		/* li R28, 1 */
		/* 821458FCh case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821458FCh case    0:*/		return 0x82145900;
	}
	return 0x82145900;
} // Block from 821458FCh-82145900h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145900);
		  /* 82145900h */ case    0:  		/* lwzu R11, <#[R31 + 24]> */
		/* 82145900h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		regs.R31 = (uint32)(regs.R31 + 0x00000018);
		/* 82145900h case    0:*/		return 0x82145904;
		  /* 82145904h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82145904h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82145904h case    1:*/		return 0x82145908;
		  /* 82145908h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 82145908h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821458B0;  }
		/* 82145908h case    2:*/		return 0x8214590C;
	}
	return 0x8214590C;
} // Block from 82145900h-8214590Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214590Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214590C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214590C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214590C);
		  /* 8214590Ch */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 8214590Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 8214590Ch case    0:*/		return 0x82145910;
		  /* 82145910h */ case    1:  		/* bc 12, CR0_EQ, 76 */
		/* 82145910h case    1:*/		if ( regs.CR[0].eq ) { return 0x8214595C;  }
		/* 82145910h case    1:*/		return 0x82145914;
		  /* 82145914h */ case    2:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 82145914h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 82145914h case    2:*/		return 0x82145918;
		  /* 82145918h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 82145918h case    3:*/		if ( regs.CR[0].eq ) { return 0x82145934;  }
		/* 82145918h case    3:*/		return 0x8214591C;
		  /* 8214591Ch */ case    4:  		/* lis R11, -32253 */
		/* 8214591Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214591Ch case    4:*/		return 0x82145920;
		  /* 82145920h */ case    5:  		/* lwz R7, <#[R4 + 8]> */
		/* 82145920h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00000008) );
		/* 82145920h case    5:*/		return 0x82145924;
		  /* 82145924h */ case    6:  		/* li R5, 3000 */
		/* 82145924h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0xBB8);
		/* 82145924h case    6:*/		return 0x82145928;
		  /* 82145928h */ case    7:  		/* addi R6, R11, 25508 */
		/* 82145928h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x63A4);
		/* 82145928h case    7:*/		return 0x8214592C;
		  /* 8214592Ch */ case    8:  		/* bl -180116 */
		/* 8214592Ch case    8:*/		regs.LR = 0x82145930; return 0x82119998;
		/* 8214592Ch case    8:*/		return 0x82145930;
		  /* 82145930h */ case    9:  		/* b 80 */
		/* 82145930h case    9:*/		return 0x82145980;
		/* 82145930h case    9:*/		return 0x82145934;
	}
	return 0x82145934;
} // Block from 8214590Ch-82145934h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82145934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145934);
		  /* 82145934h */ case    0:  		/* lbz R11, <#[R31 + 16]> */
		/* 82145934h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82145934h case    0:*/		return 0x82145938;
		  /* 82145938h */ case    1:  		/* rlwinm R10, R6, 0, 24, 31 */
		/* 82145938h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R6);
		/* 82145938h case    1:*/		return 0x8214593C;
		  /* 8214593Ch */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 8214593Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214593Ch case    2:*/		return 0x82145940;
		  /* 82145940h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82145940h case    3:*/		if ( regs.CR[6].eq ) { return 0x82145950;  }
		/* 82145940h case    3:*/		return 0x82145944;
		  /* 82145944h */ case    4:  		/* lis R11, -32253 */
		/* 82145944h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82145944h case    4:*/		return 0x82145948;
		  /* 82145948h */ case    5:  		/* addi R6, R11, 25448 */
		/* 82145948h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x6368);
		/* 82145948h case    5:*/		return 0x8214594C;
		  /* 8214594Ch */ case    6:  		/* b 40 */
		/* 8214594Ch case    6:*/		return 0x82145974;
		/* 8214594Ch case    6:*/		return 0x82145950;
	}
	return 0x82145950;
} // Block from 82145934h-82145950h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82145950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145950);
		  /* 82145950h */ case    0:  		/* stw R31, <#[R8]> */
		/* 82145950h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R8 + 0x00000000) );
		/* 82145950h case    0:*/		return 0x82145954;
		  /* 82145954h */ case    1:  		/* li R3, 0 */
		/* 82145954h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82145954h case    1:*/		return 0x82145958;
		  /* 82145958h */ case    2:  		/* b 48 */
		/* 82145958h case    2:*/		return 0x82145988;
		/* 82145958h case    2:*/		return 0x8214595C;
	}
	return 0x8214595C;
} // Block from 82145950h-8214595Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214595Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214595C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214595C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214595C);
		  /* 8214595Ch */ case    0:  		/* rlwinm. R11, R7, 0, 24, 31 */
		/* 8214595Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R7);
		/* 8214595Ch case    0:*/		return 0x82145960;
		  /* 82145960h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82145960h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214596C;  }
		/* 82145960h case    1:*/		return 0x82145964;
		  /* 82145964h */ case    2:  		/* li R3, 1 */
		/* 82145964h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82145964h case    2:*/		return 0x82145968;
		  /* 82145968h */ case    3:  		/* b 32 */
		/* 82145968h case    3:*/		return 0x82145988;
		/* 82145968h case    3:*/		return 0x8214596C;
	}
	return 0x8214596C;
} // Block from 8214595Ch-8214596Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214596Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214596C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214596C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214596C);
		  /* 8214596Ch */ case    0:  		/* lis R11, -32253 */
		/* 8214596Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214596Ch case    0:*/		return 0x82145970;
		  /* 82145970h */ case    1:  		/* addi R6, R11, 25412 */
		/* 82145970h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x6344);
		/* 82145970h case    1:*/		return 0x82145974;
	}
	return 0x82145974;
} // Block from 8214596Ch-82145974h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82145974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145974);
		  /* 82145974h */ case    0:  		/* li R5, 3000 */
		/* 82145974h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xBB8);
		/* 82145974h case    0:*/		return 0x82145978;
		  /* 82145978h */ case    1:  		/* lwz R7, <#[R4 + 8]> */
		/* 82145978h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00000008) );
		/* 82145978h case    1:*/		return 0x8214597C;
		  /* 8214597Ch */ case    2:  		/* bl -180444 */
		/* 8214597Ch case    2:*/		regs.LR = 0x82145980; return 0x821198A0;
		/* 8214597Ch case    2:*/		return 0x82145980;
	}
	return 0x82145980;
} // Block from 82145974h-82145980h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82145980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145980);
		  /* 82145980h */ case    0:  		/* lis R3, -32768 */
		/* 82145980h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82145980h case    0:*/		return 0x82145984;
		  /* 82145984h */ case    1:  		/* ori R3, R3, 16389 */
		/* 82145984h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82145984h case    1:*/		return 0x82145988;
	}
	return 0x82145988;
} // Block from 82145980h-82145988h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82145988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145988);
		  /* 82145988h */ case    0:  		/* addi R1, R1, 128 */
		/* 82145988h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82145988h case    0:*/		return 0x8214598C;
		  /* 8214598Ch */ case    1:  		/* b -739048 */
		/* 8214598Ch case    1:*/		return 0x820912A4;
		/* 8214598Ch case    1:*/		return 0x82145990;
	}
	return 0x82145990;
} // Block from 82145988h-82145990h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82145990h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145990);
		  /* 82145990h */ case    0:  		/* mfspr R12, LR */
		/* 82145990h case    0:*/		regs.R12 = regs.LR;
		/* 82145990h case    0:*/		return 0x82145994;
		  /* 82145994h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82145994h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82145994h case    1:*/		return 0x82145998;
		  /* 82145998h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82145998h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82145998h case    2:*/		return 0x8214599C;
		  /* 8214599Ch */ case    3:  		/* li R8, 0 */
		/* 8214599Ch case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8214599Ch case    3:*/		return 0x821459A0;
		  /* 821459A0h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821459A0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821459A0h case    4:*/		return 0x821459A4;
		  /* 821459A4h */ case    5:  		/* bc 12, CR6_EQ, 236 */
		/* 821459A4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82145A90;  }
		/* 821459A4h case    5:*/		return 0x821459A8;
		  /* 821459A8h */ case    6:  		/* lwz R11, <#[R4 + 4]> */
		/* 821459A8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821459A8h case    6:*/		return 0x821459AC;
		  /* 821459ACh */ case    7:  		/* cmpwi CR6, R11, 3 */
		/* 821459ACh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821459ACh case    7:*/		return 0x821459B0;
		  /* 821459B0h */ case    8:  		/* bc 4, CR6_EQ, 224 */
		/* 821459B0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82145A90;  }
		/* 821459B0h case    8:*/		return 0x821459B4;
		  /* 821459B4h */ case    9:  		/* lwz R7, <#[R4 + 24]> */
		/* 821459B4h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00000018) );
		/* 821459B4h case    9:*/		return 0x821459B8;
		  /* 821459B8h */ case   10:  		/* lis R11, -32253 */
		/* 821459B8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821459B8h case   10:*/		return 0x821459BC;
		  /* 821459BCh */ case   11:  		/* addi R11, R11, 25636 */
		/* 821459BCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6424);
		/* 821459BCh case   11:*/		return 0x821459C0;
		  /* 821459C0h */ case   12:  		/* mr R10, R7 */
		/* 821459C0h case   12:*/		regs.R10 = regs.R7;
		/* 821459C0h case   12:*/		return 0x821459C4;
		  /* 821459C4h */ case   13:  		/* lbz R9, <#[R11]> */
		/* 821459C4h case   13:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821459C4h case   13:*/		return 0x821459C8;
		  /* 821459C8h */ case   14:  		/* lbz R6, <#[R10]> */
		/* 821459C8h case   14:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821459C8h case   14:*/		return 0x821459CC;
		  /* 821459CCh */ case   15:  		/* cmpwi CR0, R9, 0 */
		/* 821459CCh case   15:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821459CCh case   15:*/		return 0x821459D0;
		  /* 821459D0h */ case   16:  		/* subf R9, R6, R9 */
		/* 821459D0h case   16:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821459D0h case   16:*/		return 0x821459D4;
		  /* 821459D4h */ case   17:  		/* bc 12, CR0_EQ, 20 */
		/* 821459D4h case   17:*/		if ( regs.CR[0].eq ) { return 0x821459E8;  }
		/* 821459D4h case   17:*/		return 0x821459D8;
		  /* 821459D8h */ case   18:  		/* addi R11, R11, 1 */
		/* 821459D8h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821459D8h case   18:*/		return 0x821459DC;
		  /* 821459DCh */ case   19:  		/* addi R10, R10, 1 */
		/* 821459DCh case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821459DCh case   19:*/		return 0x821459E0;
		  /* 821459E0h */ case   20:  		/* cmpwi CR6, R9, 0 */
		/* 821459E0h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821459E0h case   20:*/		return 0x821459E4;
		  /* 821459E4h */ case   21:  		/* bc 12, CR6_EQ, -32 */
		/* 821459E4h case   21:*/		if ( regs.CR[6].eq ) { return 0x821459C4;  }
		/* 821459E4h case   21:*/		return 0x821459E8;
	}
	return 0x821459E8;
} // Block from 82145990h-821459E8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821459E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821459E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821459E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821459E8);
		  /* 821459E8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821459E8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821459E8h case    0:*/		return 0x821459EC;
		  /* 821459ECh */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821459ECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821459FC;  }
		/* 821459ECh case    1:*/		return 0x821459F0;
		  /* 821459F0h */ case    2:  		/* li R11, 4 */
		/* 821459F0h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 821459F0h case    2:*/		return 0x821459F4;
		  /* 821459F4h */ case    3:  		/* stw R11, <#[R5]> */
		/* 821459F4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821459F4h case    3:*/		return 0x821459F8;
		  /* 821459F8h */ case    4:  		/* b 160 */
		/* 821459F8h case    4:*/		return 0x82145A98;
		/* 821459F8h case    4:*/		return 0x821459FC;
	}
	return 0x821459FC;
} // Block from 821459E8h-821459FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821459FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821459FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821459FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821459FC);
		  /* 821459FCh */ case    0:  		/* lis R11, -32253 */
		/* 821459FCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821459FCh case    0:*/		return 0x82145A00;
		  /* 82145A00h */ case    1:  		/* mr R10, R7 */
		/* 82145A00h case    1:*/		regs.R10 = regs.R7;
		/* 82145A00h case    1:*/		return 0x82145A04;
		  /* 82145A04h */ case    2:  		/* addi R11, R11, 25604 */
		/* 82145A04h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6404);
		/* 82145A04h case    2:*/		return 0x82145A08;
		  /* 82145A08h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82145A08h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82145A08h case    3:*/		return 0x82145A0C;
		  /* 82145A0Ch */ case    4:  		/* lbz R6, <#[R10]> */
		/* 82145A0Ch case    4:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82145A0Ch case    4:*/		return 0x82145A10;
		  /* 82145A10h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82145A10h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82145A10h case    5:*/		return 0x82145A14;
		  /* 82145A14h */ case    6:  		/* subf R9, R6, R9 */
		/* 82145A14h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 82145A14h case    6:*/		return 0x82145A18;
		  /* 82145A18h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82145A18h case    7:*/		if ( regs.CR[0].eq ) { return 0x82145A2C;  }
		/* 82145A18h case    7:*/		return 0x82145A1C;
		  /* 82145A1Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 82145A1Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82145A1Ch case    8:*/		return 0x82145A20;
		  /* 82145A20h */ case    9:  		/* addi R10, R10, 1 */
		/* 82145A20h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82145A20h case    9:*/		return 0x82145A24;
		  /* 82145A24h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82145A24h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82145A24h case   10:*/		return 0x82145A28;
		  /* 82145A28h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82145A28h case   11:*/		if ( regs.CR[6].eq ) { return 0x82145A08;  }
		/* 82145A28h case   11:*/		return 0x82145A2C;
	}
	return 0x82145A2C;
} // Block from 821459FCh-82145A2Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82145A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145A2C);
		  /* 82145A2Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82145A2Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82145A2Ch case    0:*/		return 0x82145A30;
		  /* 82145A30h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82145A30h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82145A3C;  }
		/* 82145A30h case    1:*/		return 0x82145A34;
		  /* 82145A34h */ case    2:  		/* li R11, 512 */
		/* 82145A34h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x200);
		/* 82145A34h case    2:*/		return 0x82145A38;
		  /* 82145A38h */ case    3:  		/* b -68 */
		/* 82145A38h case    3:*/		return 0x821459F4;
		/* 82145A38h case    3:*/		return 0x82145A3C;
	}
	return 0x82145A3C;
} // Block from 82145A2Ch-82145A3Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82145A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145A3C);
		  /* 82145A3Ch */ case    0:  		/* lis R11, -32253 */
		/* 82145A3Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82145A3Ch case    0:*/		return 0x82145A40;
		  /* 82145A40h */ case    1:  		/* mr R10, R7 */
		/* 82145A40h case    1:*/		regs.R10 = regs.R7;
		/* 82145A40h case    1:*/		return 0x82145A44;
		  /* 82145A44h */ case    2:  		/* addi R11, R11, 25568 */
		/* 82145A44h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x63E0);
		/* 82145A44h case    2:*/		return 0x82145A48;
		  /* 82145A48h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82145A48h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82145A48h case    3:*/		return 0x82145A4C;
		  /* 82145A4Ch */ case    4:  		/* lbz R6, <#[R10]> */
		/* 82145A4Ch case    4:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82145A4Ch case    4:*/		return 0x82145A50;
		  /* 82145A50h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82145A50h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82145A50h case    5:*/		return 0x82145A54;
		  /* 82145A54h */ case    6:  		/* subf R9, R6, R9 */
		/* 82145A54h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 82145A54h case    6:*/		return 0x82145A58;
		  /* 82145A58h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82145A58h case    7:*/		if ( regs.CR[0].eq ) { return 0x82145A6C;  }
		/* 82145A58h case    7:*/		return 0x82145A5C;
		  /* 82145A5Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 82145A5Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82145A5Ch case    8:*/		return 0x82145A60;
		  /* 82145A60h */ case    9:  		/* addi R10, R10, 1 */
		/* 82145A60h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82145A60h case    9:*/		return 0x82145A64;
		  /* 82145A64h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82145A64h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82145A64h case   10:*/		return 0x82145A68;
		  /* 82145A68h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82145A68h case   11:*/		if ( regs.CR[6].eq ) { return 0x82145A48;  }
		/* 82145A68h case   11:*/		return 0x82145A6C;
	}
	return 0x82145A6C;
} // Block from 82145A3Ch-82145A6Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82145A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145A6C);
		  /* 82145A6Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82145A6Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82145A6Ch case    0:*/		return 0x82145A70;
		  /* 82145A70h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82145A70h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82145A7C;  }
		/* 82145A70h case    1:*/		return 0x82145A74;
		  /* 82145A74h */ case    2:  		/* li R11, 1024 */
		/* 82145A74h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x400);
		/* 82145A74h case    2:*/		return 0x82145A78;
		  /* 82145A78h */ case    3:  		/* b -132 */
		/* 82145A78h case    3:*/		return 0x821459F4;
		/* 82145A78h case    3:*/		return 0x82145A7C;
	}
	return 0x82145A7C;
} // Block from 82145A6Ch-82145A7Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82145A7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145A7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145A7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145A7C);
		  /* 82145A7Ch */ case    0:  		/* lis R11, -32253 */
		/* 82145A7Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82145A7Ch case    0:*/		return 0x82145A80;
		  /* 82145A80h */ case    1:  		/* li R5, 3000 */
		/* 82145A80h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBB8);
		/* 82145A80h case    1:*/		return 0x82145A84;
		  /* 82145A84h */ case    2:  		/* addi R6, R11, 25540 */
		/* 82145A84h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x63C4);
		/* 82145A84h case    2:*/		return 0x82145A88;
		  /* 82145A88h */ case    3:  		/* addi R4, R4, 16 */
		/* 82145A88h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x10);
		/* 82145A88h case    3:*/		return 0x82145A8C;
		  /* 82145A8Ch */ case    4:  		/* bl -180716 */
		/* 82145A8Ch case    4:*/		regs.LR = 0x82145A90; return 0x821198A0;
		/* 82145A8Ch case    4:*/		return 0x82145A90;
	}
	return 0x82145A90;
} // Block from 82145A7Ch-82145A90h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82145A90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145A90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145A90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145A90);
		  /* 82145A90h */ case    0:  		/* lis R8, -32768 */
		/* 82145A90h case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8000);
		/* 82145A90h case    0:*/		return 0x82145A94;
		  /* 82145A94h */ case    1:  		/* ori R8, R8, 16389 */
		/* 82145A94h case    1:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x4005);
		/* 82145A94h case    1:*/		return 0x82145A98;
	}
	return 0x82145A98;
} // Block from 82145A90h-82145A98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82145A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145A98);
		  /* 82145A98h */ case    0:  		/* mr R3, R8 */
		/* 82145A98h case    0:*/		regs.R3 = regs.R8;
		/* 82145A98h case    0:*/		return 0x82145A9C;
		  /* 82145A9Ch */ case    1:  		/* addi R1, R1, 96 */
		/* 82145A9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82145A9Ch case    1:*/		return 0x82145AA0;
		  /* 82145AA0h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82145AA0h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82145AA0h case    2:*/		return 0x82145AA4;
		  /* 82145AA4h */ case    3:  		/* mtspr LR, R12 */
		/* 82145AA4h case    3:*/		regs.LR = regs.R12;
		/* 82145AA4h case    3:*/		return 0x82145AA8;
		  /* 82145AA8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82145AA8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82145AA8h case    4:*/		return 0x82145AAC;
	}
	return 0x82145AAC;
} // Block from 82145A98h-82145AACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82145AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145AAC);
		  /* 82145AACh */ case    0:  		/* nop */
		/* 82145AACh case    0:*/		cpu::op::nop();
		/* 82145AACh case    0:*/		return 0x82145AB0;
	}
	return 0x82145AB0;
} // Block from 82145AACh-82145AB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145AB0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145AB0);
		  /* 82145AB0h */ case    0:  		/* mfspr R12, LR */
		/* 82145AB0h case    0:*/		regs.R12 = regs.LR;
		/* 82145AB0h case    0:*/		return 0x82145AB4;
		  /* 82145AB4h */ case    1:  		/* bl -739424 */
		/* 82145AB4h case    1:*/		regs.LR = 0x82145AB8; return 0x82091254;
		/* 82145AB4h case    1:*/		return 0x82145AB8;
		  /* 82145AB8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82145AB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82145AB8h case    2:*/		return 0x82145ABC;
		  /* 82145ABCh */ case    3:  		/* lwz R11, <#[R4]> */
		/* 82145ABCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82145ABCh case    3:*/		return 0x82145AC0;
		  /* 82145AC0h */ case    4:  		/* mr R27, R3 */
		/* 82145AC0h case    4:*/		regs.R27 = regs.R3;
		/* 82145AC0h case    4:*/		return 0x82145AC4;
		  /* 82145AC4h */ case    5:  		/* mr R30, R4 */
		/* 82145AC4h case    5:*/		regs.R30 = regs.R4;
		/* 82145AC4h case    5:*/		return 0x82145AC8;
		  /* 82145AC8h */ case    6:  		/* li R28, 0 */
		/* 82145AC8h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82145AC8h case    6:*/		return 0x82145ACC;
		  /* 82145ACCh */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 82145ACCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82145ACCh case    7:*/		return 0x82145AD0;
		  /* 82145AD0h */ case    8:  		/* cmpwi CR6, R11, 3 */
		/* 82145AD0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82145AD0h case    8:*/		return 0x82145AD4;
		  /* 82145AD4h */ case    9:  		/* bc 12, CR6_EQ, 40 */
		/* 82145AD4h case    9:*/		if ( regs.CR[6].eq ) { return 0x82145AFC;  }
		/* 82145AD4h case    9:*/		return 0x82145AD8;
		  /* 82145AD8h */ case   10:  		/* lis R11, -32253 */
		/* 82145AD8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82145AD8h case   10:*/		return 0x82145ADC;
		  /* 82145ADCh */ case   11:  		/* li R5, 3000 */
		/* 82145ADCh case   11:*/		cpu::op::li<0>(regs,&regs.R5,0xBB8);
		/* 82145ADCh case   11:*/		return 0x82145AE0;
		  /* 82145AE0h */ case   12:  		/* addi R6, R11, 25668 */
		/* 82145AE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x6444);
		/* 82145AE0h case   12:*/		return 0x82145AE4;
		  /* 82145AE4h */ case   13:  		/* li R4, 0 */
		/* 82145AE4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82145AE4h case   13:*/		return 0x82145AE8;
		  /* 82145AE8h */ case   14:  		/* bl -180808 */
		/* 82145AE8h case   14:*/		regs.LR = 0x82145AEC; return 0x821198A0;
		/* 82145AE8h case   14:*/		return 0x82145AEC;
		  /* 82145AECh */ case   15:  		/* mr R29, R28 */
		/* 82145AECh case   15:*/		regs.R29 = regs.R28;
		/* 82145AECh case   15:*/		return 0x82145AF0;
		  /* 82145AF0h */ case   16:  		/* mr R3, R29 */
		/* 82145AF0h case   16:*/		regs.R3 = regs.R29;
		/* 82145AF0h case   16:*/		return 0x82145AF4;
		  /* 82145AF4h */ case   17:  		/* addi R1, R1, 144 */
		/* 82145AF4h case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82145AF4h case   17:*/		return 0x82145AF8;
		  /* 82145AF8h */ case   18:  		/* b -739412 */
		/* 82145AF8h case   18:*/		return 0x820912A4;
		/* 82145AF8h case   18:*/		return 0x82145AFC;
	}
	return 0x82145AFC;
} // Block from 82145AB0h-82145AFCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 82145AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145AFC);
		  /* 82145AFCh */ case    0:  		/* li R3, 20 */
		/* 82145AFCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82145AFCh case    0:*/		return 0x82145B00;
		  /* 82145B00h */ case    1:  		/* bl -510168 */
		/* 82145B00h case    1:*/		regs.LR = 0x82145B04; return 0x820C9228;
		/* 82145B00h case    1:*/		return 0x82145B04;
		  /* 82145B04h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82145B04h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145B04h case    2:*/		return 0x82145B08;
		  /* 82145B08h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 82145B08h case    3:*/		if ( regs.CR[0].eq ) { return 0x82145B28;  }
		/* 82145B08h case    3:*/		return 0x82145B0C;
		  /* 82145B0Ch */ case    4:  		/* lis R11, -32253 */
		/* 82145B0Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82145B0Ch case    4:*/		return 0x82145B10;
		  /* 82145B10h */ case    5:  		/* li R5, 0 */
		/* 82145B10h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82145B10h case    5:*/		return 0x82145B14;
		  /* 82145B14h */ case    6:  		/* addi R6, R11, 8852 */
		/* 82145B14h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2294);
		/* 82145B14h case    6:*/		return 0x82145B18;
		  /* 82145B18h */ case    7:  		/* li R4, 0 */
		/* 82145B18h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82145B18h case    7:*/		return 0x82145B1C;
		  /* 82145B1Ch */ case    8:  		/* bl -509740 */
		/* 82145B1Ch case    8:*/		regs.LR = 0x82145B20; return 0x820C93F0;
		/* 82145B1Ch case    8:*/		return 0x82145B20;
		  /* 82145B20h */ case    9:  		/* mr R29, R3 */
		/* 82145B20h case    9:*/		regs.R29 = regs.R3;
		/* 82145B20h case    9:*/		return 0x82145B24;
		  /* 82145B24h */ case   10:  		/* b 8 */
		/* 82145B24h case   10:*/		return 0x82145B2C;
		/* 82145B24h case   10:*/		return 0x82145B28;
	}
	return 0x82145B28;
} // Block from 82145AFCh-82145B28h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82145B28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145B28);
		  /* 82145B28h */ case    0:  		/* mr R29, R28 */
		/* 82145B28h case    0:*/		regs.R29 = regs.R28;
		/* 82145B28h case    0:*/		return 0x82145B2C;
	}
	return 0x82145B2C;
} // Block from 82145B28h-82145B2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145B2C);
		  /* 82145B2Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82145B2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82145B2Ch case    0:*/		return 0x82145B30;
		  /* 82145B30h */ case    1:  		/* bc 12, CR6_EQ, -68 */
		/* 82145B30h case    1:*/		if ( regs.CR[6].eq ) { return 0x82145AEC;  }
		/* 82145B30h case    1:*/		return 0x82145B34;
		  /* 82145B34h */ case    2:  		/* li R3, 24 */
		/* 82145B34h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x18);
		/* 82145B34h case    2:*/		return 0x82145B38;
		  /* 82145B38h */ case    3:  		/* bl -510224 */
		/* 82145B38h case    3:*/		regs.LR = 0x82145B3C; return 0x820C9228;
		/* 82145B38h case    3:*/		return 0x82145B3C;
		  /* 82145B3Ch */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82145B3Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145B3Ch case    4:*/		return 0x82145B40;
		  /* 82145B40h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82145B40h case    5:*/		if ( regs.CR[0].eq ) { return 0x82145B50;  }
		/* 82145B40h case    5:*/		return 0x82145B44;
		  /* 82145B44h */ case    6:  		/* bl -498900 */
		/* 82145B44h case    6:*/		regs.LR = 0x82145B48; return 0x820CBE70;
		/* 82145B44h case    6:*/		return 0x82145B48;
		  /* 82145B48h */ case    7:  		/* mr R31, R3 */
		/* 82145B48h case    7:*/		regs.R31 = regs.R3;
		/* 82145B48h case    7:*/		return 0x82145B4C;
		  /* 82145B4Ch */ case    8:  		/* b 8 */
		/* 82145B4Ch case    8:*/		return 0x82145B54;
		/* 82145B4Ch case    8:*/		return 0x82145B50;
	}
	return 0x82145B50;
} // Block from 82145B2Ch-82145B50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82145B50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145B50);
		  /* 82145B50h */ case    0:  		/* mr R31, R28 */
		/* 82145B50h case    0:*/		regs.R31 = regs.R28;
		/* 82145B50h case    0:*/		return 0x82145B54;
	}
	return 0x82145B54;
} // Block from 82145B50h-82145B54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145B54);
		  /* 82145B54h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82145B54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82145B54h case    0:*/		return 0x82145B58;
		  /* 82145B58h */ case    1:  		/* bc 12, CR6_EQ, -108 */
		/* 82145B58h case    1:*/		if ( regs.CR[6].eq ) { return 0x82145AEC;  }
		/* 82145B58h case    1:*/		return 0x82145B5C;
		  /* 82145B5Ch */ case    2:  		/* addi R8, R1, 80 */
		/* 82145B5Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82145B5Ch case    2:*/		return 0x82145B60;
		  /* 82145B60h */ case    3:  		/* lwz R4, <#[R30]> */
		/* 82145B60h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82145B60h case    3:*/		return 0x82145B64;
		  /* 82145B64h */ case    4:  		/* li R7, 1 */
		/* 82145B64h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82145B64h case    4:*/		return 0x82145B68;
		  /* 82145B68h */ case    5:  		/* lwz R5, <#[R30 + 4]> */
		/* 82145B68h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000004) );
		/* 82145B68h case    5:*/		return 0x82145B6C;
		  /* 82145B6Ch */ case    6:  		/* li R6, 1 */
		/* 82145B6Ch case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82145B6Ch case    6:*/		return 0x82145B70;
		  /* 82145B70h */ case    7:  		/* mr R3, R27 */
		/* 82145B70h case    7:*/		regs.R3 = regs.R27;
		/* 82145B70h case    7:*/		return 0x82145B74;
		  /* 82145B74h */ case    8:  		/* bl -812 */
		/* 82145B74h case    8:*/		regs.LR = 0x82145B78; return 0x82145848;
		/* 82145B74h case    8:*/		return 0x82145B78;
		  /* 82145B78h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 82145B78h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82145B78h case    9:*/		return 0x82145B7C;
		  /* 82145B7Ch */ case   10:  		/* bc 12, CR0_LT, -144 */
		/* 82145B7Ch case   10:*/		if ( regs.CR[0].lt ) { return 0x82145AEC;  }
		/* 82145B7Ch case   10:*/		return 0x82145B80;
		  /* 82145B80h */ case   11:  		/* lwz R11, <#[R1 + 80]> */
		/* 82145B80h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82145B80h case   11:*/		return 0x82145B84;
		  /* 82145B84h */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 82145B84h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82145B84h case   12:*/		return 0x82145B88;
		  /* 82145B88h */ case   13:  		/* stw R11, <#[R31 + 16]> */
		/* 82145B88h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82145B88h case   13:*/		return 0x82145B8C;
		  /* 82145B8Ch */ case   14:  		/* lwz R11, <#[R30 + 4]> */
		/* 82145B8Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82145B8Ch case   14:*/		return 0x82145B90;
	}
	return 0x82145B90;
} // Block from 82145B54h-82145B90h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82145B90h
// Function '?Reduce@CTReorderInstructions@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145B90);
		  /* 82145B90h */ case    0:  		/* stw R11, <#[R31 + 20]> */
		/* 82145B90h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82145B90h case    0:*/		return 0x82145B94;
		  /* 82145B94h */ case    1:  		/* stw R31, <#[R29 + 8]> */
		/* 82145B94h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000008) );
		/* 82145B94h case    1:*/		return 0x82145B98;
		  /* 82145B98h */ case    2:  		/* stw R28, <#[R30 + 4]> */
		/* 82145B98h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000004) );
		/* 82145B98h case    2:*/		return 0x82145B9C;
		  /* 82145B9Ch */ case    3:  		/* stw R28, <#[R30]> */
		/* 82145B9Ch case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000000) );
		/* 82145B9Ch case    3:*/		return 0x82145BA0;
		  /* 82145BA0h */ case    4:  		/* b -176 */
		/* 82145BA0h case    4:*/		return 0x82145AF0;
		/* 82145BA0h case    4:*/		return 0x82145BA4;
		  /* 82145BA4h */ case    5:  		/* nop */
		/* 82145BA4h case    5:*/		cpu::op::nop();
		/* 82145BA4h case    5:*/		return 0x82145BA8;
	}
	return 0x82145BA8;
} // Block from 82145B90h-82145BA8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82145BA8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145BA8);
		  /* 82145BA8h */ case    0:  		/* mfspr R12, LR */
		/* 82145BA8h case    0:*/		regs.R12 = regs.LR;
		/* 82145BA8h case    0:*/		return 0x82145BAC;
		  /* 82145BACh */ case    1:  		/* bl -739684 */
		/* 82145BACh case    1:*/		regs.LR = 0x82145BB0; return 0x82091248;
		/* 82145BACh case    1:*/		return 0x82145BB0;
		  /* 82145BB0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82145BB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82145BB0h case    2:*/		return 0x82145BB4;
		  /* 82145BB4h */ case    3:  		/* lwz R11, <#[R4 + 4]> */
		/* 82145BB4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82145BB4h case    3:*/		return 0x82145BB8;
		  /* 82145BB8h */ case    4:  		/* mr R25, R3 */
		/* 82145BB8h case    4:*/		regs.R25 = regs.R3;
		/* 82145BB8h case    4:*/		return 0x82145BBC;
		  /* 82145BBCh */ case    5:  		/* mr R31, R5 */
		/* 82145BBCh case    5:*/		regs.R31 = regs.R5;
		/* 82145BBCh case    5:*/		return 0x82145BC0;
		  /* 82145BC0h */ case    6:  		/* mr R24, R6 */
		/* 82145BC0h case    6:*/		regs.R24 = regs.R6;
		/* 82145BC0h case    6:*/		return 0x82145BC4;
		  /* 82145BC4h */ case    7:  		/* li R30, 0 */
		/* 82145BC4h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82145BC4h case    7:*/		return 0x82145BC8;
		  /* 82145BC8h */ case    8:  		/* cmpwi CR6, R11, 3 */
		/* 82145BC8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82145BC8h case    8:*/		return 0x82145BCC;
		  /* 82145BCCh */ case    9:  		/* bc 12, CR6_EQ, 52 */
		/* 82145BCCh case    9:*/		if ( regs.CR[6].eq ) { return 0x82145C00;  }
		/* 82145BCCh case    9:*/		return 0x82145BD0;
		  /* 82145BD0h */ case   10:  		/* lis R11, -32253 */
		/* 82145BD0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82145BD0h case   10:*/		return 0x82145BD4;
		  /* 82145BD4h */ case   11:  		/* li R5, 3000 */
		/* 82145BD4h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0xBB8);
		/* 82145BD4h case   11:*/		return 0x82145BD8;
		  /* 82145BD8h */ case   12:  		/* addi R6, R11, 25668 */
		/* 82145BD8h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x6444);
		/* 82145BD8h case   12:*/		return 0x82145BDC;
		  /* 82145BDCh */ case   13:  		/* li R4, 0 */
		/* 82145BDCh case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82145BDCh case   13:*/		return 0x82145BE0;
		  /* 82145BE0h */ case   14:  		/* bl -181056 */
		/* 82145BE0h case   14:*/		regs.LR = 0x82145BE4; return 0x821198A0;
		/* 82145BE0h case   14:*/		return 0x82145BE4;
		  /* 82145BE4h */ case   15:  		/* lis R26, -32768 */
		/* 82145BE4h case   15:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8000);
		/* 82145BE4h case   15:*/		return 0x82145BE8;
		  /* 82145BE8h */ case   16:  		/* ori R26, R26, 16389 */
		/* 82145BE8h case   16:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R26,0x4005);
		/* 82145BE8h case   16:*/		return 0x82145BEC;
		  /* 82145BECh */ case   17:  		/* li R30, 0 */
		/* 82145BECh case   17:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82145BECh case   17:*/		return 0x82145BF0;
		  /* 82145BF0h */ case   18:  		/* stw R30, <#[R24]> */
		/* 82145BF0h case   18:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R24 + 0x00000000) );
		/* 82145BF0h case   18:*/		return 0x82145BF4;
		  /* 82145BF4h */ case   19:  		/* mr R3, R26 */
		/* 82145BF4h case   19:*/		regs.R3 = regs.R26;
		/* 82145BF4h case   19:*/		return 0x82145BF8;
		  /* 82145BF8h */ case   20:  		/* addi R1, R1, 160 */
		/* 82145BF8h case   20:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82145BF8h case   20:*/		return 0x82145BFC;
		  /* 82145BFCh */ case   21:  		/* b -739684 */
		/* 82145BFCh case   21:*/		return 0x82091298;
		/* 82145BFCh case   21:*/		return 0x82145C00;
	}
	return 0x82145C00;
} // Block from 82145BA8h-82145C00h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82145C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145C00);
		  /* 82145C00h */ case    0:  		/* addi R8, R1, 80 */
		/* 82145C00h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82145C00h case    0:*/		return 0x82145C04;
		  /* 82145C04h */ case    1:  		/* li R7, 0 */
		/* 82145C04h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82145C04h case    1:*/		return 0x82145C08;
		  /* 82145C08h */ case    2:  		/* li R6, 0 */
		/* 82145C08h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82145C08h case    2:*/		return 0x82145C0C;
		  /* 82145C0Ch */ case    3:  		/* mr R5, R31 */
		/* 82145C0Ch case    3:*/		regs.R5 = regs.R31;
		/* 82145C0Ch case    3:*/		return 0x82145C10;
		  /* 82145C10h */ case    4:  		/* addi R27, R4, 16 */
		/* 82145C10h case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R4,0x10);
		/* 82145C10h case    4:*/		return 0x82145C14;
		  /* 82145C14h */ case    5:  		/* bl -972 */
		/* 82145C14h case    5:*/		regs.LR = 0x82145C18; return 0x82145848;
		/* 82145C14h case    5:*/		return 0x82145C18;
		  /* 82145C18h */ case    6:  		/* or. R26, R3, R3 */
		/* 82145C18h case    6:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 82145C18h case    6:*/		return 0x82145C1C;
		  /* 82145C1Ch */ case    7:  		/* bc 12, CR0_LT, -48 */
		/* 82145C1Ch case    7:*/		if ( regs.CR[0].lt ) { return 0x82145BEC;  }
		/* 82145C1Ch case    7:*/		return 0x82145C20;
		  /* 82145C20h */ case    8:  		/* cmpwi CR6, R26, 1 */
		/* 82145C20h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 82145C20h case    8:*/		return 0x82145C24;
		  /* 82145C24h */ case    9:  		/* bc 12, CR6_EQ, -52 */
		/* 82145C24h case    9:*/		if ( regs.CR[6].eq ) { return 0x82145BF0;  }
		/* 82145C24h case    9:*/		return 0x82145C28;
		  /* 82145C28h */ case   10:  		/* li R3, 24 */
		/* 82145C28h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x18);
		/* 82145C28h case   10:*/		return 0x82145C2C;
		  /* 82145C2Ch */ case   11:  		/* bl -510468 */
		/* 82145C2Ch case   11:*/		regs.LR = 0x82145C30; return 0x820C9228;
		/* 82145C2Ch case   11:*/		return 0x82145C30;
		  /* 82145C30h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 82145C30h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145C30h case   12:*/		return 0x82145C34;
		  /* 82145C34h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 82145C34h case   13:*/		if ( regs.CR[0].eq ) { return 0x82145C44;  }
		/* 82145C34h case   13:*/		return 0x82145C38;
		  /* 82145C38h */ case   14:  		/* bl -499144 */
		/* 82145C38h case   14:*/		regs.LR = 0x82145C3C; return 0x820CBE70;
		/* 82145C38h case   14:*/		return 0x82145C3C;
		  /* 82145C3Ch */ case   15:  		/* mr R28, R3 */
		/* 82145C3Ch case   15:*/		regs.R28 = regs.R3;
		/* 82145C3Ch case   15:*/		return 0x82145C40;
		  /* 82145C40h */ case   16:  		/* b 8 */
		/* 82145C40h case   16:*/		return 0x82145C48;
		/* 82145C40h case   16:*/		return 0x82145C44;
	}
	return 0x82145C44;
} // Block from 82145C00h-82145C44h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82145C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145C44);
		  /* 82145C44h */ case    0:  		/* li R28, 0 */
		/* 82145C44h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82145C44h case    0:*/		return 0x82145C48;
	}
	return 0x82145C48;
} // Block from 82145C44h-82145C48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145C48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145C48);
		  /* 82145C48h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82145C48h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82145C48h case    0:*/		return 0x82145C4C;
		  /* 82145C4Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82145C4Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82145C5C;  }
		/* 82145C4Ch case    1:*/		return 0x82145C50;
		  /* 82145C50h */ case    2:  		/* lis R26, -32761 */
		/* 82145C50h case    2:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8007);
		/* 82145C50h case    2:*/		return 0x82145C54;
		  /* 82145C54h */ case    3:  		/* ori R26, R26, 14 */
		/* 82145C54h case    3:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R26,0xE);
		/* 82145C54h case    3:*/		return 0x82145C58;
		  /* 82145C58h */ case    4:  		/* b -108 */
		/* 82145C58h case    4:*/		return 0x82145BEC;
		/* 82145C58h case    4:*/		return 0x82145C5C;
	}
	return 0x82145C5C;
} // Block from 82145C48h-82145C5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82145C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145C5C);
		  /* 82145C5Ch */ case    0:  		/* lwz R29, <#[R1 + 80]> */
		/* 82145C5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82145C5Ch case    0:*/		return 0x82145C60;
	}
	return 0x82145C60;
} // Block from 82145C5Ch-82145C60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145C60h
// Function '?Apply@CTReorderInstructions@D3DXShader@@UAAJH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145C60);
		  /* 82145C60h */ case    0:  		/* li R3, 88 */
		/* 82145C60h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 82145C60h case    0:*/		return 0x82145C64;
		  /* 82145C64h */ case    1:  		/* lwz R11, <#[R29 + 4]> */
		/* 82145C64h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82145C64h case    1:*/		return 0x82145C68;
		  /* 82145C68h */ case    2:  		/* stw R31, <#[R28 + 20]> */
		/* 82145C68h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x00000014) );
		/* 82145C68h case    2:*/		return 0x82145C6C;
		  /* 82145C6Ch */ case    3:  		/* stw R11, <#[R28 + 16]> */
		/* 82145C6Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82145C6Ch case    3:*/		return 0x82145C70;
		  /* 82145C70h */ case    4:  		/* bl -510536 */
		/* 82145C70h case    4:*/		regs.LR = 0x82145C74; return 0x820C9228;
		/* 82145C70h case    4:*/		return 0x82145C74;
		  /* 82145C74h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82145C74h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145C74h case    5:*/		return 0x82145C78;
		  /* 82145C78h */ case    6:  		/* bc 12, CR0_EQ, 40 */
		/* 82145C78h case    6:*/		if ( regs.CR[0].eq ) { return 0x82145CA0;  }
		/* 82145C78h case    6:*/		return 0x82145C7C;
		  /* 82145C7Ch */ case    7:  		/* mr R9, R27 */
		/* 82145C7Ch case    7:*/		regs.R9 = regs.R27;
		/* 82145C7Ch case    7:*/		return 0x82145C80;
		  /* 82145C80h */ case    8:  		/* li R8, 1 */
		/* 82145C80h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82145C80h case    8:*/		return 0x82145C84;
		  /* 82145C84h */ case    9:  		/* li R7, 0 */
		/* 82145C84h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82145C84h case    9:*/		return 0x82145C88;
		  /* 82145C88h */ case   10:  		/* li R6, 0 */
		/* 82145C88h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82145C88h case   10:*/		return 0x82145C8C;
		  /* 82145C8Ch */ case   11:  		/* li R5, 0 */
		/* 82145C8Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82145C8Ch case   11:*/		return 0x82145C90;
		  /* 82145C90h */ case   12:  		/* li R4, 0 */
		/* 82145C90h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82145C90h case   12:*/		return 0x82145C94;
		  /* 82145C94h */ case   13:  		/* bl -498956 */
		/* 82145C94h case   13:*/		regs.LR = 0x82145C98; return 0x820CBF88;
		/* 82145C94h case   13:*/		return 0x82145C98;
		  /* 82145C98h */ case   14:  		/* mr R30, R3 */
		/* 82145C98h case   14:*/		regs.R30 = regs.R3;
		/* 82145C98h case   14:*/		return 0x82145C9C;
		  /* 82145C9Ch */ case   15:  		/* b 8 */
		/* 82145C9Ch case   15:*/		return 0x82145CA4;
		/* 82145C9Ch case   15:*/		return 0x82145CA0;
	}
	return 0x82145CA0;
} // Block from 82145C60h-82145CA0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82145CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145CA0);
		  /* 82145CA0h */ case    0:  		/* li R30, 0 */
		/* 82145CA0h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82145CA0h case    0:*/		return 0x82145CA4;
	}
	return 0x82145CA4;
} // Block from 82145CA0h-82145CA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145CA4);
		  /* 82145CA4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82145CA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82145CA4h case    0:*/		return 0x82145CA8;
		  /* 82145CA8h */ case    1:  		/* bc 12, CR6_EQ, -88 */
		/* 82145CA8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82145C50;  }
		/* 82145CA8h case    1:*/		return 0x82145CAC;
		  /* 82145CACh */ case    2:  		/* li R3, 40 */
		/* 82145CACh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82145CACh case    2:*/		return 0x82145CB0;
		  /* 82145CB0h */ case    3:  		/* bl -510600 */
		/* 82145CB0h case    3:*/		regs.LR = 0x82145CB4; return 0x820C9228;
		/* 82145CB0h case    3:*/		return 0x82145CB4;
		  /* 82145CB4h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82145CB4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145CB4h case    4:*/		return 0x82145CB8;
		  /* 82145CB8h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 82145CB8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82145CDC;  }
		/* 82145CB8h case    5:*/		return 0x82145CBC;
		  /* 82145CBCh */ case    6:  		/* li R9, 512 */
		/* 82145CBCh case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 82145CBCh case    6:*/		return 0x82145CC0;
		  /* 82145CC0h */ case    7:  		/* lwz R5, <#[R29 + 20]> */
		/* 82145CC0h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000014) );
		/* 82145CC0h case    7:*/		return 0x82145CC4;
		  /* 82145CC4h */ case    8:  		/* li R8, 1 */
		/* 82145CC4h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82145CC4h case    8:*/		return 0x82145CC8;
		  /* 82145CC8h */ case    9:  		/* li R7, 1 */
		/* 82145CC8h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82145CC8h case    9:*/		return 0x82145CCC;
		  /* 82145CCCh */ case   10:  		/* li R6, 0 */
		/* 82145CCCh case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82145CCCh case   10:*/		return 0x82145CD0;
		  /* 82145CD0h */ case   11:  		/* li R4, 3 */
		/* 82145CD0h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 82145CD0h case   11:*/		return 0x82145CD4;
		  /* 82145CD4h */ case   12:  		/* bl -503892 */
		/* 82145CD4h case   12:*/		regs.LR = 0x82145CD8; return 0x820CAC80;
		/* 82145CD4h case   12:*/		return 0x82145CD8;
		  /* 82145CD8h */ case   13:  		/* b 8 */
		/* 82145CD8h case   13:*/		return 0x82145CE0;
		/* 82145CD8h case   13:*/		return 0x82145CDC;
	}
	return 0x82145CDC;
} // Block from 82145CA4h-82145CDCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 82145CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145CDC);
		  /* 82145CDCh */ case    0:  		/* li R3, 0 */
		/* 82145CDCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82145CDCh case    0:*/		return 0x82145CE0;
	}
	return 0x82145CE0;
} // Block from 82145CDCh-82145CE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145CE0);
		  /* 82145CE0h */ case    0:  		/* stw R3, <#[R30 + 16]> */
		/* 82145CE0h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82145CE0h case    0:*/		return 0x82145CE4;
		  /* 82145CE4h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82145CE4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82145CE4h case    1:*/		return 0x82145CE8;
		  /* 82145CE8h */ case    2:  		/* bc 12, CR6_EQ, -152 */
		/* 82145CE8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82145C50;  }
		/* 82145CE8h case    2:*/		return 0x82145CEC;
		  /* 82145CECh */ case    3:  		/* li R3, 20 */
		/* 82145CECh case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82145CECh case    3:*/		return 0x82145CF0;
		  /* 82145CF0h */ case    4:  		/* bl -510664 */
		/* 82145CF0h case    4:*/		regs.LR = 0x82145CF4; return 0x820C9228;
		/* 82145CF0h case    4:*/		return 0x82145CF4;
		  /* 82145CF4h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82145CF4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145CF4h case    5:*/		return 0x82145CF8;
		  /* 82145CF8h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 82145CF8h case    6:*/		if ( regs.CR[0].eq ) { return 0x82145D14;  }
		/* 82145CF8h case    6:*/		return 0x82145CFC;
		  /* 82145CFCh */ case    7:  		/* lis R11, -32253 */
		/* 82145CFCh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82145CFCh case    7:*/		return 0x82145D00;
		  /* 82145D00h */ case    8:  		/* li R5, 0 */
		/* 82145D00h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82145D00h case    8:*/		return 0x82145D04;
		  /* 82145D04h */ case    9:  		/* addi R6, R11, 9184 */
		/* 82145D04h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 82145D04h case    9:*/		return 0x82145D08;
		  /* 82145D08h */ case   10:  		/* li R4, 0 */
		/* 82145D08h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82145D08h case   10:*/		return 0x82145D0C;
		  /* 82145D0Ch */ case   11:  		/* bl -510236 */
		/* 82145D0Ch case   11:*/		regs.LR = 0x82145D10; return 0x820C93F0;
		/* 82145D0Ch case   11:*/		return 0x82145D10;
		  /* 82145D10h */ case   12:  		/* b 8 */
		/* 82145D10h case   12:*/		return 0x82145D18;
		/* 82145D10h case   12:*/		return 0x82145D14;
	}
	return 0x82145D14;
} // Block from 82145CE0h-82145D14h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82145D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145D14);
		  /* 82145D14h */ case    0:  		/* li R3, 0 */
		/* 82145D14h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82145D14h case    0:*/		return 0x82145D18;
	}
	return 0x82145D18;
} // Block from 82145D14h-82145D18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145D18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145D18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145D18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145D18);
		  /* 82145D18h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82145D18h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82145D18h case    0:*/		return 0x82145D1C;
		  /* 82145D1Ch */ case    1:  		/* stw R3, <#[R30 + 32]> */
		/* 82145D1Ch case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 82145D1Ch case    1:*/		return 0x82145D20;
		  /* 82145D20h */ case    2:  		/* bc 12, CR6_EQ, -208 */
		/* 82145D20h case    2:*/		if ( regs.CR[6].eq ) { return 0x82145C50;  }
		/* 82145D20h case    2:*/		return 0x82145D24;
		  /* 82145D24h */ case    3:  		/* li R3, 72 */
		/* 82145D24h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 82145D24h case    3:*/		return 0x82145D28;
		  /* 82145D28h */ case    4:  		/* bl -510720 */
		/* 82145D28h case    4:*/		regs.LR = 0x82145D2C; return 0x820C9228;
		/* 82145D28h case    4:*/		return 0x82145D2C;
		  /* 82145D2Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82145D2Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82145D2Ch case    5:*/		return 0x82145D30;
		  /* 82145D30h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 82145D30h case    6:*/		if ( regs.CR[0].eq ) { return 0x82145D48;  }
		/* 82145D30h case    6:*/		return 0x82145D34;
		  /* 82145D34h */ case    7:  		/* mr R6, R27 */
		/* 82145D34h case    7:*/		regs.R6 = regs.R27;
		/* 82145D34h case    7:*/		return 0x82145D38;
		  /* 82145D38h */ case    8:  		/* mr R5, R28 */
		/* 82145D38h case    8:*/		regs.R5 = regs.R28;
		/* 82145D38h case    8:*/		return 0x82145D3C;
		  /* 82145D3Ch */ case    9:  		/* li R4, 4 */
		/* 82145D3Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82145D3Ch case    9:*/		return 0x82145D40;
		  /* 82145D40h */ case   10:  		/* bl -498024 */
		/* 82145D40h case   10:*/		regs.LR = 0x82145D44; return 0x820CC3D8;
		/* 82145D40h case   10:*/		return 0x82145D44;
		  /* 82145D44h */ case   11:  		/* b 8 */
		/* 82145D44h case   11:*/		return 0x82145D4C;
		/* 82145D44h case   11:*/		return 0x82145D48;
	}
	return 0x82145D48;
} // Block from 82145D18h-82145D48h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82145D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145D48);
		  /* 82145D48h */ case    0:  		/* li R3, 0 */
		/* 82145D48h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82145D48h case    0:*/		return 0x82145D4C;
	}
	return 0x82145D4C;
} // Block from 82145D48h-82145D4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145D4C);
		  /* 82145D4Ch */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 82145D4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82145D4Ch case    0:*/		return 0x82145D50;
		  /* 82145D50h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82145D50h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82145D50h case    1:*/		return 0x82145D54;
		  /* 82145D54h */ case    2:  		/* stw R3, <#[R11 + 8]> */
		/* 82145D54h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 82145D54h case    2:*/		return 0x82145D58;
		  /* 82145D58h */ case    3:  		/* bc 12, CR6_EQ, -264 */
		/* 82145D58h case    3:*/		if ( regs.CR[6].eq ) { return 0x82145C50;  }
		/* 82145D58h case    3:*/		return 0x82145D5C;
		  /* 82145D5Ch */ case    4:  		/* mr R4, R30 */
		/* 82145D5Ch case    4:*/		regs.R4 = regs.R30;
		/* 82145D5Ch case    4:*/		return 0x82145D60;
		  /* 82145D60h */ case    5:  		/* mr R3, R25 */
		/* 82145D60h case    5:*/		regs.R3 = regs.R25;
		/* 82145D60h case    5:*/		return 0x82145D64;
		  /* 82145D64h */ case    6:  		/* bl -171340 */
		/* 82145D64h case    6:*/		regs.LR = 0x82145D68; return 0x8211C018;
		/* 82145D64h case    6:*/		return 0x82145D68;
		  /* 82145D68h */ case    7:  		/* b -376 */
		/* 82145D68h case    7:*/		return 0x82145BF0;
		/* 82145D68h case    7:*/		return 0x82145D6C;
		  /* 82145D6Ch */ case    8:  		/* nop */
		/* 82145D6Ch case    8:*/		cpu::op::nop();
		/* 82145D6Ch case    8:*/		return 0x82145D70;
	}
	return 0x82145D70;
} // Block from 82145D4Ch-82145D70h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82145D70h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145D70);
		  /* 82145D70h */ case    0:  		/* mfspr R12, LR */
		/* 82145D70h case    0:*/		regs.R12 = regs.LR;
		/* 82145D70h case    0:*/		return 0x82145D74;
		  /* 82145D74h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82145D74h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82145D74h case    1:*/		return 0x82145D78;
		  /* 82145D78h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82145D78h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82145D78h case    2:*/		return 0x82145D7C;
		  /* 82145D7Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82145D7Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82145D7Ch case    3:*/		return 0x82145D80;
		  /* 82145D80h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82145D80h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82145D80h case    4:*/		return 0x82145D84;
		  /* 82145D84h */ case    5:  		/* lwz R10, <#[R3 + 32]> */
		/* 82145D84h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000020) );
		/* 82145D84h case    5:*/		return 0x82145D88;
		  /* 82145D88h */ case    6:  		/* mr R31, R3 */
		/* 82145D88h case    6:*/		regs.R31 = regs.R3;
		/* 82145D88h case    6:*/		return 0x82145D8C;
		  /* 82145D8Ch */ case    7:  		/* mr R30, R5 */
		/* 82145D8Ch case    7:*/		regs.R30 = regs.R5;
		/* 82145D8Ch case    7:*/		return 0x82145D90;
		  /* 82145D90h */ case    8:  		/* rlwinm R11, R10, 0, 0, 19 */
		/* 82145D90h case    8:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R10);
		/* 82145D90h case    8:*/		return 0x82145D94;
		  /* 82145D94h */ case    9:  		/* add R11, R11, R4 */
		/* 82145D94h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 82145D94h case    9:*/		return 0x82145D98;
		  /* 82145D98h */ case   10:  		/* rlwimi R11, R10, 0, 20, 31 */
		/* 82145D98h case   10:*/		cpu::op::rlwimi<0,0,20,31>(regs,&regs.R11,regs.R10);
		/* 82145D98h case   10:*/		return 0x82145D9C;
		  /* 82145D9Ch */ case   11:  		/* stw R11, <#[R3 + 32]> */
		/* 82145D9Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 82145D9Ch case   11:*/		return 0x82145DA0;
		  /* 82145DA0h */ case   12:  		/* bl -913568 */
		/* 82145DA0h case   12:*/		regs.LR = 0x82145DA4; return 0x82066D00;
		/* 82145DA0h case   12:*/		return 0x82145DA4;
		  /* 82145DA4h */ case   13:  		/* cmplwi CR6, R3, 1 */
		/* 82145DA4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82145DA4h case   13:*/		return 0x82145DA8;
		  /* 82145DA8h */ case   14:  		/* bc 4, CR6_GT, 24 */
		/* 82145DA8h case   14:*/		if ( !regs.CR[6].gt ) { return 0x82145DC0;  }
		/* 82145DA8h case   14:*/		return 0x82145DAC;
		  /* 82145DACh */ case   15:  		/* lwz R10, <#[R31 + 48]> */
		/* 82145DACh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82145DACh case   15:*/		return 0x82145DB0;
		  /* 82145DB0h */ case   16:  		/* rlwinm R11, R10, 0, 0, 19 */
		/* 82145DB0h case   16:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R10);
		/* 82145DB0h case   16:*/		return 0x82145DB4;
		  /* 82145DB4h */ case   17:  		/* add R11, R11, R30 */
		/* 82145DB4h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82145DB4h case   17:*/		return 0x82145DB8;
		  /* 82145DB8h */ case   18:  		/* rlwimi R11, R10, 0, 20, 31 */
		/* 82145DB8h case   18:*/		cpu::op::rlwimi<0,0,20,31>(regs,&regs.R11,regs.R10);
		/* 82145DB8h case   18:*/		return 0x82145DBC;
		  /* 82145DBCh */ case   19:  		/* stw R11, <#[R31 + 48]> */
		/* 82145DBCh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82145DBCh case   19:*/		return 0x82145DC0;
	}
	return 0x82145DC0;
} // Block from 82145D70h-82145DC0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82145DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145DC0);
		  /* 82145DC0h */ case    0:  		/* addi R1, R1, 112 */
		/* 82145DC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82145DC0h case    0:*/		return 0x82145DC4;
		  /* 82145DC4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82145DC4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82145DC4h case    1:*/		return 0x82145DC8;
		  /* 82145DC8h */ case    2:  		/* mtspr LR, R12 */
		/* 82145DC8h case    2:*/		regs.LR = regs.R12;
		/* 82145DC8h case    2:*/		return 0x82145DCC;
		  /* 82145DCCh */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82145DCCh case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82145DCCh case    3:*/		return 0x82145DD0;
		  /* 82145DD0h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82145DD0h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82145DD0h case    4:*/		return 0x82145DD4;
		  /* 82145DD4h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82145DD4h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82145DD4h case    5:*/		return 0x82145DD8;
	}
	return 0x82145DD8;
} // Block from 82145DC0h-82145DD8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82145DD8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145DD8);
		  /* 82145DD8h */ case    0:  		/* mfspr R12, LR */
		/* 82145DD8h case    0:*/		regs.R12 = regs.LR;
		/* 82145DD8h case    0:*/		return 0x82145DDC;
		  /* 82145DDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82145DDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82145DDCh case    1:*/		return 0x82145DE0;
		  /* 82145DE0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82145DE0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82145DE0h case    2:*/		return 0x82145DE4;
		  /* 82145DE4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82145DE4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82145DE4h case    3:*/		return 0x82145DE8;
		  /* 82145DE8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82145DE8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82145DE8h case    4:*/		return 0x82145DEC;
		  /* 82145DECh */ case    5:  		/* mr R31, R3 */
		/* 82145DECh case    5:*/		regs.R31 = regs.R3;
		/* 82145DECh case    5:*/		return 0x82145DF0;
		  /* 82145DF0h */ case    6:  		/* mr R30, R4 */
		/* 82145DF0h case    6:*/		regs.R30 = regs.R4;
		/* 82145DF0h case    6:*/		return 0x82145DF4;
		  /* 82145DF4h */ case    7:  		/* bl -871188 */
		/* 82145DF4h case    7:*/		regs.LR = 0x82145DF8; return 0x820712E0;
		/* 82145DF4h case    7:*/		return 0x82145DF8;
		  /* 82145DF8h */ case    8:  		/* cmpwi CR6, R3, 6 */
		/* 82145DF8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000006);
		/* 82145DF8h case    8:*/		return 0x82145DFC;
		  /* 82145DFCh */ case    9:  		/* bc 12, CR6_GT, 72 */
		/* 82145DFCh case    9:*/		if ( regs.CR[6].gt ) { return 0x82145E44;  }
		/* 82145DFCh case    9:*/		return 0x82145E00;
		  /* 82145E00h */ case   10:  		/* bc 12, CR6_EQ, 52 */
		/* 82145E00h case   10:*/		if ( regs.CR[6].eq ) { return 0x82145E34;  }
		/* 82145E00h case   10:*/		return 0x82145E04;
		  /* 82145E04h */ case   11:  		/* cmpwi CR6, R3, 1 */
		/* 82145E04h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82145E04h case   11:*/		return 0x82145E08;
		  /* 82145E08h */ case   12:  		/* bc 12, CR6_EQ, 24 */
		/* 82145E08h case   12:*/		if ( regs.CR[6].eq ) { return 0x82145E20;  }
		/* 82145E08h case   12:*/		return 0x82145E0C;
		  /* 82145E0Ch */ case   13:  		/* cmpwi CR6, R3, 2 */
		/* 82145E0Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82145E0Ch case   13:*/		return 0x82145E10;
		  /* 82145E10h */ case   14:  		/* bc 12, CR6_EQ, 120 */
		/* 82145E10h case   14:*/		if ( regs.CR[6].eq ) { return 0x82145E88;  }
		/* 82145E10h case   14:*/		return 0x82145E14;
		  /* 82145E14h */ case   15:  		/* cmpwi CR6, R3, 3 */
		/* 82145E14h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 82145E14h case   15:*/		return 0x82145E18;
		  /* 82145E18h */ case   16:  		/* bc 12, CR6_EQ, 76 */
		/* 82145E18h case   16:*/		if ( regs.CR[6].eq ) { return 0x82145E64;  }
		/* 82145E18h case   16:*/		return 0x82145E1C;
		  /* 82145E1Ch */ case   17:  		/* b 120 */
		/* 82145E1Ch case   17:*/		return 0x82145E94;
		/* 82145E1Ch case   17:*/		return 0x82145E20;
	}
	return 0x82145E20;
} // Block from 82145DD8h-82145E20h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82145E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145E20);
		  /* 82145E20h */ case    0:  		/* lwz R10, <#[R31 + 24]> */
		/* 82145E20h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82145E20h case    0:*/		return 0x82145E24;
		  /* 82145E24h */ case    1:  		/* rlwinm R11, R10, 0, 0, 29 */
		/* 82145E24h case    1:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R10);
		/* 82145E24h case    1:*/		return 0x82145E28;
		  /* 82145E28h */ case    2:  		/* add R11, R11, R30 */
		/* 82145E28h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82145E28h case    2:*/		return 0x82145E2C;
		  /* 82145E2Ch */ case    3:  		/* rlwimi R11, R10, 0, 30, 31 */
		/* 82145E2Ch case    3:*/		cpu::op::rlwimi<0,0,30,31>(regs,&regs.R11,regs.R10);
		/* 82145E2Ch case    3:*/		return 0x82145E30;
		  /* 82145E30h */ case    4:  		/* b 96 */
		/* 82145E30h case    4:*/		return 0x82145E90;
		/* 82145E30h case    4:*/		return 0x82145E34;
	}
	return 0x82145E34;
} // Block from 82145E20h-82145E34h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82145E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145E34);
		  /* 82145E34h */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 82145E34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82145E34h case    0:*/		return 0x82145E38;
		  /* 82145E38h */ case    1:  		/* add R11, R11, R30 */
		/* 82145E38h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82145E38h case    1:*/		return 0x82145E3C;
		  /* 82145E3Ch */ case    2:  		/* stw R11, <#[R31 + 32]> */
		/* 82145E3Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82145E3Ch case    2:*/		return 0x82145E40;
		  /* 82145E40h */ case    3:  		/* b 84 */
		/* 82145E40h case    3:*/		return 0x82145E94;
		/* 82145E40h case    3:*/		return 0x82145E44;
	}
	return 0x82145E44;
} // Block from 82145E34h-82145E44h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82145E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145E44);
		  /* 82145E44h */ case    0:  		/* cmpwi CR6, R3, 7 */
		/* 82145E44h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000007);
		/* 82145E44h case    0:*/		return 0x82145E48;
		  /* 82145E48h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 82145E48h case    1:*/		if ( regs.CR[6].eq ) { return 0x82145E88;  }
		/* 82145E48h case    1:*/		return 0x82145E4C;
		  /* 82145E4Ch */ case    2:  		/* cmpwi CR6, R3, 8 */
		/* 82145E4Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000008);
		/* 82145E4Ch case    2:*/		return 0x82145E50;
		  /* 82145E50h */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 82145E50h case    3:*/		if ( regs.CR[6].eq ) { return 0x82145E88;  }
		/* 82145E50h case    3:*/		return 0x82145E54;
		  /* 82145E54h */ case    4:  		/* cmpwi CR6, R3, 16 */
		/* 82145E54h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000010);
		/* 82145E54h case    4:*/		return 0x82145E58;
		  /* 82145E58h */ case    5:  		/* bc 4, CR6_GT, 60 */
		/* 82145E58h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82145E94;  }
		/* 82145E58h case    5:*/		return 0x82145E5C;
		  /* 82145E5Ch */ case    6:  		/* cmpwi CR6, R3, 20 */
		/* 82145E5Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000014);
		/* 82145E5Ch case    6:*/		return 0x82145E60;
		  /* 82145E60h */ case    7:  		/* bc 12, CR6_GT, 52 */
		/* 82145E60h case    7:*/		if ( regs.CR[6].gt ) { return 0x82145E94;  }
		/* 82145E60h case    7:*/		return 0x82145E64;
	}
	return 0x82145E64;
} // Block from 82145E44h-82145E64h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82145E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145E64);
		  /* 82145E64h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 82145E64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82145E64h case    0:*/		return 0x82145E68;
		  /* 82145E68h */ case    1:  		/* mr R4, R30 */
		/* 82145E68h case    1:*/		regs.R4 = regs.R30;
		/* 82145E68h case    1:*/		return 0x82145E6C;
		  /* 82145E6Ch */ case    2:  		/* mr R3, R31 */
		/* 82145E6Ch case    2:*/		regs.R3 = regs.R31;
		/* 82145E6Ch case    2:*/		return 0x82145E70;
		  /* 82145E70h */ case    3:  		/* rlwinm R11, R11, 0, 0, 19 */
		/* 82145E70h case    3:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R11);
		/* 82145E70h case    3:*/		return 0x82145E74;
		  /* 82145E74h */ case    4:  		/* subfic R11, R11, 0 */
		/* 82145E74h case    4:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82145E74h case    4:*/		return 0x82145E78;
		  /* 82145E78h */ case    5:  		/* subfe R11, R11, R11 */
		/* 82145E78h case    5:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82145E78h case    5:*/		return 0x82145E7C;
		  /* 82145E7Ch */ case    6:  		/* and R5, R11, R30 */
		/* 82145E7Ch case    6:*/		cpu::op::and<0>(regs,&regs.R5,regs.R11,regs.R30);
		/* 82145E7Ch case    6:*/		return 0x82145E80;
		  /* 82145E80h */ case    7:  		/* bl -272 */
		/* 82145E80h case    7:*/		regs.LR = 0x82145E84; return 0x82145D70;
		/* 82145E80h case    7:*/		return 0x82145E84;
		  /* 82145E84h */ case    8:  		/* b 16 */
		/* 82145E84h case    8:*/		return 0x82145E94;
		/* 82145E84h case    8:*/		return 0x82145E88;
	}
	return 0x82145E88;
} // Block from 82145E64h-82145E88h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82145E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145E88);
		  /* 82145E88h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 82145E88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82145E88h case    0:*/		return 0x82145E8C;
		  /* 82145E8Ch */ case    1:  		/* add R11, R30, R11 */
		/* 82145E8Ch case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 82145E8Ch case    1:*/		return 0x82145E90;
	}
	return 0x82145E90;
} // Block from 82145E88h-82145E90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82145E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145E90);
		  /* 82145E90h */ case    0:  		/* stw R11, <#[R31 + 24]> */
		/* 82145E90h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82145E90h case    0:*/		return 0x82145E94;
	}
	return 0x82145E94;
} // Block from 82145E90h-82145E94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145E94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145E94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145E94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145E94);
		  /* 82145E94h */ case    0:  		/* addi R1, R1, 112 */
		/* 82145E94h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82145E94h case    0:*/		return 0x82145E98;
		  /* 82145E98h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82145E98h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82145E98h case    1:*/		return 0x82145E9C;
		  /* 82145E9Ch */ case    2:  		/* mtspr LR, R12 */
		/* 82145E9Ch case    2:*/		regs.LR = regs.R12;
		/* 82145E9Ch case    2:*/		return 0x82145EA0;
		  /* 82145EA0h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82145EA0h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82145EA0h case    3:*/		return 0x82145EA4;
		  /* 82145EA4h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82145EA4h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82145EA4h case    4:*/		return 0x82145EA8;
		  /* 82145EA8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82145EA8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82145EA8h case    5:*/		return 0x82145EAC;
	}
	return 0x82145EAC;
} // Block from 82145E94h-82145EACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82145EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145EAC);
		  /* 82145EACh */ case    0:  		/* nop */
		/* 82145EACh case    0:*/		cpu::op::nop();
		/* 82145EACh case    0:*/		return 0x82145EB0;
	}
	return 0x82145EB0;
} // Block from 82145EACh-82145EB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82145EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145EB0);
		  /* 82145EB0h */ case    0:  		/* mfspr R12, LR */
		/* 82145EB0h case    0:*/		regs.R12 = regs.LR;
		/* 82145EB0h case    0:*/		return 0x82145EB4;
		  /* 82145EB4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82145EB4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82145EB4h case    1:*/		return 0x82145EB8;
		  /* 82145EB8h */ case    2:  		/* std R5, <#[R1 + 32]> */
		/* 82145EB8h case    2:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 82145EB8h case    2:*/		return 0x82145EBC;
		  /* 82145EBCh */ case    3:  		/* std R6, <#[R1 + 40]> */
		/* 82145EBCh case    3:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82145EBCh case    3:*/		return 0x82145EC0;
		  /* 82145EC0h */ case    4:  		/* std R7, <#[R1 + 48]> */
		/* 82145EC0h case    4:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 82145EC0h case    4:*/		return 0x82145EC4;
		  /* 82145EC4h */ case    5:  		/* std R8, <#[R1 + 56]> */
		/* 82145EC4h case    5:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 82145EC4h case    5:*/		return 0x82145EC8;
		  /* 82145EC8h */ case    6:  		/* std R9, <#[R1 + 64]> */
		/* 82145EC8h case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 82145EC8h case    6:*/		return 0x82145ECC;
		  /* 82145ECCh */ case    7:  		/* std R10, <#[R1 + 72]> */
		/* 82145ECCh case    7:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 82145ECCh case    7:*/		return 0x82145ED0;
		  /* 82145ED0h */ case    8:  		/* stwu R1, <#[R1 - 96]> */
		/* 82145ED0h case    8:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82145ED0h case    8:*/		return 0x82145ED4;
		  /* 82145ED4h */ case    9:  		/* stw R4, <#[R1 + 124]> */
		/* 82145ED4h case    9:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 82145ED4h case    9:*/		return 0x82145ED8;
		  /* 82145ED8h */ case   10:  		/* addi R10, R1, 80 */
		/* 82145ED8h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 82145ED8h case   10:*/		return 0x82145EDC;
		  /* 82145EDCh */ case   11:  		/* lwz R11, <#[R3]> */
		/* 82145EDCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82145EDCh case   11:*/		return 0x82145EE0;
		  /* 82145EE0h */ case   12:  		/* addi R9, R1, 128 */
		/* 82145EE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 82145EE0h case   12:*/		return 0x82145EE4;
		  /* 82145EE4h */ case   13:  		/* stw R9, <#[R10]> */
		/* 82145EE4h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82145EE4h case   13:*/		return 0x82145EE8;
		  /* 82145EE8h */ case   14:  		/* lwz R11, <#[R11]> */
		/* 82145EE8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82145EE8h case   14:*/		return 0x82145EEC;
		  /* 82145EECh */ case   15:  		/* lwz R5, <#[R1 + 80]> */
		/* 82145EECh case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 82145EECh case   15:*/		return 0x82145EF0;
		  /* 82145EF0h */ case   16:  		/* mtspr CTR, R11 */
		/* 82145EF0h case   16:*/		regs.CTR = regs.R11;
		/* 82145EF0h case   16:*/		return 0x82145EF4;
		  /* 82145EF4h */ case   17:  		/* bcctrl 20, CR0_LT */
		/* 82145EF4h case   17:*/		if ( 1 ) { regs.LR = 0x82145EF8; return (uint32)regs.CTR; }
		/* 82145EF4h case   17:*/		return 0x82145EF8;
		  /* 82145EF8h */ case   18:  		/* addi R1, R1, 96 */
		/* 82145EF8h case   18:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82145EF8h case   18:*/		return 0x82145EFC;
		  /* 82145EFCh */ case   19:  		/* lwz R12, <#[R1 - 8]> */
		/* 82145EFCh case   19:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82145EFCh case   19:*/		return 0x82145F00;
		  /* 82145F00h */ case   20:  		/* mtspr LR, R12 */
		/* 82145F00h case   20:*/		regs.LR = regs.R12;
		/* 82145F00h case   20:*/		return 0x82145F04;
		  /* 82145F04h */ case   21:  		/* bclr 20, CR0_LT */
		/* 82145F04h case   21:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82145F04h case   21:*/		return 0x82145F08;
	}
	return 0x82145F08;
} // Block from 82145EB0h-82145F08h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82145F08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145F08);
		  /* 82145F08h */ case    0:  		/* mfspr R12, LR */
		/* 82145F08h case    0:*/		regs.R12 = regs.LR;
		/* 82145F08h case    0:*/		return 0x82145F0C;
		  /* 82145F0Ch */ case    1:  		/* bl -740528 */
		/* 82145F0Ch case    1:*/		regs.LR = 0x82145F10; return 0x8209125C;
		/* 82145F0Ch case    1:*/		return 0x82145F10;
		  /* 82145F10h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82145F10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82145F10h case    2:*/		return 0x82145F14;
		  /* 82145F14h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 82145F14h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82145F14h case    3:*/		return 0x82145F18;
		  /* 82145F18h */ case    4:  		/* mr R31, R3 */
		/* 82145F18h case    4:*/		regs.R31 = regs.R3;
		/* 82145F18h case    4:*/		return 0x82145F1C;
		  /* 82145F1Ch */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 82145F1Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82145F1Ch case    5:*/		return 0x82145F20;
		  /* 82145F20h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 82145F20h case    6:*/		if ( regs.CR[6].eq ) { return 0x82145F5C;  }
		/* 82145F20h case    6:*/		return 0x82145F24;
		  /* 82145F24h */ case    7:  		/* lwz R11, <#[R3 + 4]> */
		/* 82145F24h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82145F24h case    7:*/		return 0x82145F28;
		  /* 82145F28h */ case    8:  		/* li R30, 0 */
		/* 82145F28h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82145F28h case    8:*/		return 0x82145F2C;
		  /* 82145F2Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82145F2Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82145F2Ch case    9:*/		return 0x82145F30;
		  /* 82145F30h */ case   10:  		/* stw R30, <#[R3 + 8]> */
		/* 82145F30h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000008) );
		/* 82145F30h case   10:*/		return 0x82145F34;
		  /* 82145F34h */ case   11:  		/* bc 4, CR6_GT, 40 */
		/* 82145F34h case   11:*/		if ( !regs.CR[6].gt ) { return 0x82145F5C;  }
		/* 82145F34h case   11:*/		return 0x82145F38;
		  /* 82145F38h */ case   12:  		/* lis R11, -32255 */
		/* 82145F38h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82145F38h case   12:*/		return 0x82145F3C;
		  /* 82145F3Ch */ case   13:  		/* addi R29, R11, -15864 */
		/* 82145F3Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFC208);
		/* 82145F3Ch case   13:*/		return 0x82145F40;
		  /* 82145F40h */ case   14:  		/* mr R4, R29 */
		/* 82145F40h case   14:*/		regs.R4 = regs.R29;
		/* 82145F40h case   14:*/		return 0x82145F44;
		  /* 82145F44h */ case   15:  		/* mr R3, R31 */
		/* 82145F44h case   15:*/		regs.R3 = regs.R31;
		/* 82145F44h case   15:*/		return 0x82145F48;
		  /* 82145F48h */ case   16:  		/* bl -152 */
		/* 82145F48h case   16:*/		regs.LR = 0x82145F4C; return 0x82145EB0;
		/* 82145F48h case   16:*/		return 0x82145F4C;
		  /* 82145F4Ch */ case   17:  		/* lwz R11, <#[R31 + 4]> */
		/* 82145F4Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82145F4Ch case   17:*/		return 0x82145F50;
		  /* 82145F50h */ case   18:  		/* addi R30, R30, 1 */
		/* 82145F50h case   18:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82145F50h case   18:*/		return 0x82145F54;
		  /* 82145F54h */ case   19:  		/* cmplw CR6, R30, R11 */
		/* 82145F54h case   19:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82145F54h case   19:*/		return 0x82145F58;
		  /* 82145F58h */ case   20:  		/* bc 12, CR6_LT, -24 */
		/* 82145F58h case   20:*/		if ( regs.CR[6].lt ) { return 0x82145F40;  }
		/* 82145F58h case   20:*/		return 0x82145F5C;
	}
	return 0x82145F5C;
} // Block from 82145F08h-82145F5Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82145F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145F5C);
		  /* 82145F5Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 82145F5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82145F5Ch case    0:*/		return 0x82145F60;
		  /* 82145F60h */ case    1:  		/* b -740532 */
		/* 82145F60h case    1:*/		return 0x820912AC;
		/* 82145F60h case    1:*/		return 0x82145F64;
		  /* 82145F64h */ case    2:  		/* nop */
		/* 82145F64h case    2:*/		cpu::op::nop();
		/* 82145F64h case    2:*/		return 0x82145F68;
	}
	return 0x82145F68;
} // Block from 82145F5Ch-82145F68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82145F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145F68);
		  /* 82145F68h */ case    0:  		/* mfspr R12, LR */
		/* 82145F68h case    0:*/		regs.R12 = regs.LR;
		/* 82145F68h case    0:*/		return 0x82145F6C;
		  /* 82145F6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82145F6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82145F6Ch case    1:*/		return 0x82145F70;
		  /* 82145F70h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82145F70h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82145F70h case    2:*/		return 0x82145F74;
		  /* 82145F74h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82145F74h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82145F74h case    3:*/		return 0x82145F78;
		  /* 82145F78h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82145F78h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82145F78h case    4:*/		return 0x82145F7C;
		  /* 82145F7Ch */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 82145F7Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82145F7Ch case    5:*/		return 0x82145F80;
		  /* 82145F80h */ case    6:  		/* mr R31, R3 */
		/* 82145F80h case    6:*/		regs.R31 = regs.R3;
		/* 82145F80h case    6:*/		return 0x82145F84;
		  /* 82145F84h */ case    7:  		/* mr R30, R4 */
		/* 82145F84h case    7:*/		regs.R30 = regs.R4;
		/* 82145F84h case    7:*/		return 0x82145F88;
		  /* 82145F88h */ case    8:  		/* addi R11, R11, -1 */
		/* 82145F88h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82145F88h case    8:*/		return 0x82145F8C;
		  /* 82145F8Ch */ case    9:  		/* stw R11, <#[R3 + 4]> */
		/* 82145F8Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82145F8Ch case    9:*/		return 0x82145F90;
		  /* 82145F90h */ case   10:  		/* bl -136 */
		/* 82145F90h case   10:*/		regs.LR = 0x82145F94; return 0x82145F08;
		/* 82145F90h case   10:*/		return 0x82145F94;
		  /* 82145F94h */ case   11:  		/* lis R11, -32253 */
		/* 82145F94h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82145F94h case   11:*/		return 0x82145F98;
		  /* 82145F98h */ case   12:  		/* mr R5, R30 */
		/* 82145F98h case   12:*/		regs.R5 = regs.R30;
		/* 82145F98h case   12:*/		return 0x82145F9C;
		  /* 82145F9Ch */ case   13:  		/* addi R4, R11, 25692 */
		/* 82145F9Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x645C);
		/* 82145F9Ch case   13:*/		return 0x82145FA0;
		  /* 82145FA0h */ case   14:  		/* mr R3, R31 */
		/* 82145FA0h case   14:*/		regs.R3 = regs.R31;
		/* 82145FA0h case   14:*/		return 0x82145FA4;
		  /* 82145FA4h */ case   15:  		/* bl -244 */
		/* 82145FA4h case   15:*/		regs.LR = 0x82145FA8; return 0x82145EB0;
		/* 82145FA4h case   15:*/		return 0x82145FA8;
		  /* 82145FA8h */ case   16:  		/* lis R11, -32254 */
		/* 82145FA8h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82145FA8h case   16:*/		return 0x82145FAC;
		  /* 82145FACh */ case   17:  		/* mr R3, R31 */
		/* 82145FACh case   17:*/		regs.R3 = regs.R31;
		/* 82145FACh case   17:*/		return 0x82145FB0;
		  /* 82145FB0h */ case   18:  		/* addi R4, R11, -30604 */
		/* 82145FB0h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 82145FB0h case   18:*/		return 0x82145FB4;
		  /* 82145FB4h */ case   19:  		/* bl -260 */
		/* 82145FB4h case   19:*/		regs.LR = 0x82145FB8; return 0x82145EB0;
		/* 82145FB4h case   19:*/		return 0x82145FB8;
		  /* 82145FB8h */ case   20:  		/* li R11, 1 */
		/* 82145FB8h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82145FB8h case   20:*/		return 0x82145FBC;
		  /* 82145FBCh */ case   21:  		/* stw R11, <#[R31 + 8]> */
		/* 82145FBCh case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82145FBCh case   21:*/		return 0x82145FC0;
		  /* 82145FC0h */ case   22:  		/* addi R1, R1, 112 */
		/* 82145FC0h case   22:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82145FC0h case   22:*/		return 0x82145FC4;
		  /* 82145FC4h */ case   23:  		/* lwz R12, <#[R1 - 8]> */
		/* 82145FC4h case   23:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82145FC4h case   23:*/		return 0x82145FC8;
		  /* 82145FC8h */ case   24:  		/* mtspr LR, R12 */
		/* 82145FC8h case   24:*/		regs.LR = regs.R12;
		/* 82145FC8h case   24:*/		return 0x82145FCC;
		  /* 82145FCCh */ case   25:  		/* ld R30, <#[R1 - 24]> */
		/* 82145FCCh case   25:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82145FCCh case   25:*/		return 0x82145FD0;
		  /* 82145FD0h */ case   26:  		/* ld R31, <#[R1 - 16]> */
		/* 82145FD0h case   26:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82145FD0h case   26:*/		return 0x82145FD4;
		  /* 82145FD4h */ case   27:  		/* bclr 20, CR0_LT */
		/* 82145FD4h case   27:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82145FD4h case   27:*/		return 0x82145FD8;
	}
	return 0x82145FD8;
} // Block from 82145F68h-82145FD8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82145FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82145FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82145FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82145FD8);
		  /* 82145FD8h */ case    0:  		/* mfspr R12, LR */
		/* 82145FD8h case    0:*/		regs.R12 = regs.LR;
		/* 82145FD8h case    0:*/		return 0x82145FDC;
		  /* 82145FDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82145FDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82145FDCh case    1:*/		return 0x82145FE0;
		  /* 82145FE0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82145FE0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82145FE0h case    2:*/		return 0x82145FE4;
		  /* 82145FE4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82145FE4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82145FE4h case    3:*/		return 0x82145FE8;
		  /* 82145FE8h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 82145FE8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82145FE8h case    4:*/		return 0x82145FEC;
		  /* 82145FECh */ case    5:  		/* lis R10, -32253 */
		/* 82145FECh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82145FECh case    5:*/		return 0x82145FF0;
		  /* 82145FF0h */ case    6:  		/* mr R5, R4 */
		/* 82145FF0h case    6:*/		regs.R5 = regs.R4;
		/* 82145FF0h case    6:*/		return 0x82145FF4;
		  /* 82145FF4h */ case    7:  		/* addi R11, R11, -1 */
		/* 82145FF4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82145FF4h case    7:*/		return 0x82145FF8;
		  /* 82145FF8h */ case    8:  		/* addi R4, R10, 25692 */
		/* 82145FF8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x645C);
		/* 82145FF8h case    8:*/		return 0x82145FFC;
		  /* 82145FFCh */ case    9:  		/* stw R11, <#[R3 + 4]> */
		/* 82145FFCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82145FFCh case    9:*/		return 0x82146000;
		  /* 82146000h */ case   10:  		/* mr R31, R3 */
		/* 82146000h case   10:*/		regs.R31 = regs.R3;
		/* 82146000h case   10:*/		return 0x82146004;
		  /* 82146004h */ case   11:  		/* bl -340 */
		/* 82146004h case   11:*/		regs.LR = 0x82146008; return 0x82145EB0;
		/* 82146004h case   11:*/		return 0x82146008;
		  /* 82146008h */ case   12:  		/* lis R11, -32254 */
		/* 82146008h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82146008h case   12:*/		return 0x8214600C;
		  /* 8214600Ch */ case   13:  		/* mr R3, R31 */
		/* 8214600Ch case   13:*/		regs.R3 = regs.R31;
		/* 8214600Ch case   13:*/		return 0x82146010;
		  /* 82146010h */ case   14:  		/* addi R4, R11, -30604 */
		/* 82146010h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 82146010h case   14:*/		return 0x82146014;
		  /* 82146014h */ case   15:  		/* bl -356 */
		/* 82146014h case   15:*/		regs.LR = 0x82146018; return 0x82145EB0;
		/* 82146014h case   15:*/		return 0x82146018;
		  /* 82146018h */ case   16:  		/* li R11, 1 */
		/* 82146018h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82146018h case   16:*/		return 0x8214601C;
		  /* 8214601Ch */ case   17:  		/* stw R11, <#[R31 + 8]> */
		/* 8214601Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214601Ch case   17:*/		return 0x82146020;
		  /* 82146020h */ case   18:  		/* addi R1, R1, 96 */
		/* 82146020h case   18:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82146020h case   18:*/		return 0x82146024;
		  /* 82146024h */ case   19:  		/* lwz R12, <#[R1 - 8]> */
		/* 82146024h case   19:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82146024h case   19:*/		return 0x82146028;
		  /* 82146028h */ case   20:  		/* mtspr LR, R12 */
		/* 82146028h case   20:*/		regs.LR = regs.R12;
		/* 82146028h case   20:*/		return 0x8214602C;
		  /* 8214602Ch */ case   21:  		/* ld R31, <#[R1 - 16]> */
		/* 8214602Ch case   21:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214602Ch case   21:*/		return 0x82146030;
		  /* 82146030h */ case   22:  		/* bclr 20, CR0_LT */
		/* 82146030h case   22:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82146030h case   22:*/		return 0x82146034;
	}
	return 0x82146034;
} // Block from 82145FD8h-82146034h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82146034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146034);
		  /* 82146034h */ case    0:  		/* nop */
		/* 82146034h case    0:*/		cpu::op::nop();
		/* 82146034h case    0:*/		return 0x82146038;
	}
	return 0x82146038;
} // Block from 82146034h-82146038h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146038);
		  /* 82146038h */ case    0:  		/* mfspr R12, LR */
		/* 82146038h case    0:*/		regs.R12 = regs.LR;
		/* 82146038h case    0:*/		return 0x8214603C;
		  /* 8214603Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214603Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214603Ch case    1:*/		return 0x82146040;
		  /* 82146040h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82146040h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82146040h case    2:*/		return 0x82146044;
		  /* 82146044h */ case    3:  		/* mr R11, R4 */
		/* 82146044h case    3:*/		regs.R11 = regs.R4;
		/* 82146044h case    3:*/		return 0x82146048;
		  /* 82146048h */ case    4:  		/* cmpwi CR6, R6, 0 */
		/* 82146048h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 82146048h case    4:*/		return 0x8214604C;
		  /* 8214604Ch */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 8214604Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82146068;  }
		/* 8214604Ch case    5:*/		return 0x82146050;
		  /* 82146050h */ case    6:  		/* lis R10, -32253 */
		/* 82146050h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82146050h case    6:*/		return 0x82146054;
		  /* 82146054h */ case    7:  		/* add R6, R5, R7 */
		/* 82146054h case    7:*/		cpu::op::add<0>(regs,&regs.R6,regs.R5,regs.R7);
		/* 82146054h case    7:*/		return 0x82146058;
		  /* 82146058h */ case    8:  		/* addi R4, R10, 25712 */
		/* 82146058h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x6470);
		/* 82146058h case    8:*/		return 0x8214605C;
		  /* 8214605Ch */ case    9:  		/* mr R5, R11 */
		/* 8214605Ch case    9:*/		regs.R5 = regs.R11;
		/* 8214605Ch case    9:*/		return 0x82146060;
		  /* 82146060h */ case   10:  		/* bl -432 */
		/* 82146060h case   10:*/		regs.LR = 0x82146064; return 0x82145EB0;
		/* 82146060h case   10:*/		return 0x82146064;
		  /* 82146064h */ case   11:  		/* b 80 */
		/* 82146064h case   11:*/		return 0x821460B4;
		/* 82146064h case   11:*/		return 0x82146068;
	}
	return 0x82146068;
} // Block from 82146038h-82146068h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82146068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146068);
		  /* 82146068h */ case    0:  		/* rlwinm R10, R7, 31, 1, 31 */
		/* 82146068h case    0:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R10,regs.R7);
		/* 82146068h case    0:*/		return 0x8214606C;
		  /* 8214606Ch */ case    1:  		/* rlwinm R9, R7, 0, 31, 31 */
		/* 8214606Ch case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R7);
		/* 8214606Ch case    1:*/		return 0x82146070;
		  /* 82146070h */ case    2:  		/* std R10, <#[R1 + 80]> */
		/* 82146070h case    2:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82146070h case    2:*/		return 0x82146074;
		  /* 82146074h */ case    3:  		/* lfd FR0, <#[R1 + 80]> */
		/* 82146074h case    3:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82146074h case    3:*/		return 0x82146078;
		  /* 82146078h */ case    4:  		/* std R9, <#[R1 + 80]> */
		/* 82146078h case    4:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 82146078h case    4:*/		return 0x8214607C;
		  /* 8214607Ch */ case    5:  		/* lfd FR13, <#[R1 + 80]> */
		/* 8214607Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000050) );
		/* 8214607Ch case    5:*/		return 0x82146080;
		  /* 82146080h */ case    6:  		/* fcfid FR12, FR0 */
		/* 82146080h case    6:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR0);
		/* 82146080h case    6:*/		return 0x82146084;
		  /* 82146084h */ case    7:  		/* lis R10, -32256 */
		/* 82146084h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82146084h case    7:*/		return 0x82146088;
		  /* 82146088h */ case    8:  		/* fcfid FR13, FR13 */
		/* 82146088h case    8:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 82146088h case    8:*/		return 0x8214608C;
		  /* 8214608Ch */ case    9:  		/* lfs FR0, <#[R10 + 2664]> */
		/* 8214608Ch case    9:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000A68) );
		/* 8214608Ch case    9:*/		return 0x82146090;
		  /* 82146090h */ case   10:  		/* frsp FR12, FR12 */
		/* 82146090h case   10:*/		cpu::op::frsp<0>(regs,&regs.FR12,regs.FR12);
		/* 82146090h case   10:*/		return 0x82146094;
		  /* 82146094h */ case   11:  		/* lis R10, -32253 */
		/* 82146094h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82146094h case   11:*/		return 0x82146098;
		  /* 82146098h */ case   12:  		/* mr R5, R11 */
		/* 82146098h case   12:*/		regs.R5 = regs.R11;
		/* 82146098h case   12:*/		return 0x8214609C;
		  /* 8214609Ch */ case   13:  		/* addi R4, R10, 25724 */
		/* 8214609Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x647C);
		/* 8214609Ch case   13:*/		return 0x821460A0;
		  /* 821460A0h */ case   14:  		/* frsp FR13, FR13 */
		/* 821460A0h case   14:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 821460A0h case   14:*/		return 0x821460A4;
		  /* 821460A4h */ case   15:  		/* fmadds FR1, FR13, FR0, FR12 */
		/* 821460A4h case   15:*/		cpu::op::fmadds<0>(regs,&regs.FR1,regs.FR13,regs.FR0,regs.FR12);
		/* 821460A4h case   15:*/		return 0x821460A8;
		  /* 821460A8h */ case   16:  		/* stfd FR1, <#[R1 + 40]> */
		/* 821460A8h case   16:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000028) );
		/* 821460A8h case   16:*/		return 0x821460AC;
		  /* 821460ACh */ case   17:  		/* ld R6, <#[R1 + 40]> */
		/* 821460ACh case   17:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 821460ACh case   17:*/		return 0x821460B0;
		  /* 821460B0h */ case   18:  		/* bl -512 */
		/* 821460B0h case   18:*/		regs.LR = 0x821460B4; return 0x82145EB0;
		/* 821460B0h case   18:*/		return 0x821460B4;
	}
	return 0x821460B4;
} // Block from 82146068h-821460B4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821460B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821460B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821460B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821460B4);
		  /* 821460B4h */ case    0:  		/* addi R1, R1, 96 */
		/* 821460B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821460B4h case    0:*/		return 0x821460B8;
		  /* 821460B8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821460B8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821460B8h case    1:*/		return 0x821460BC;
		  /* 821460BCh */ case    2:  		/* mtspr LR, R12 */
		/* 821460BCh case    2:*/		regs.LR = regs.R12;
		/* 821460BCh case    2:*/		return 0x821460C0;
		  /* 821460C0h */ case    3:  		/* bclr 20, CR0_LT */
		/* 821460C0h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821460C0h case    3:*/		return 0x821460C4;
	}
	return 0x821460C4;
} // Block from 821460B4h-821460C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821460C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821460C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821460C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821460C4);
		  /* 821460C4h */ case    0:  		/* nop */
		/* 821460C4h case    0:*/		cpu::op::nop();
		/* 821460C4h case    0:*/		return 0x821460C8;
	}
	return 0x821460C8;
} // Block from 821460C4h-821460C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821460C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821460C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821460C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821460C8);
		  /* 821460C8h */ case    0:  		/* mfspr R12, LR */
		/* 821460C8h case    0:*/		regs.R12 = regs.LR;
		/* 821460C8h case    0:*/		return 0x821460CC;
		  /* 821460CCh */ case    1:  		/* bl -740996 */
		/* 821460CCh case    1:*/		regs.LR = 0x821460D0; return 0x82091248;
		/* 821460CCh case    1:*/		return 0x821460D0;
		  /* 821460D0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821460D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821460D0h case    2:*/		return 0x821460D4;
		  /* 821460D4h */ case    3:  		/* lis R11, -32253 */
		/* 821460D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821460D4h case    3:*/		return 0x821460D8;
		  /* 821460D8h */ case    4:  		/* mr R31, R5 */
		/* 821460D8h case    4:*/		regs.R31 = regs.R5;
		/* 821460D8h case    4:*/		return 0x821460DC;
		  /* 821460DCh */ case    5:  		/* mr R5, R4 */
		/* 821460DCh case    5:*/		regs.R5 = regs.R4;
		/* 821460DCh case    5:*/		return 0x821460E0;
		  /* 821460E0h */ case    6:  		/* addi R4, R11, 25800 */
		/* 821460E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x64C8);
		/* 821460E0h case    6:*/		return 0x821460E4;
		  /* 821460E4h */ case    7:  		/* mr R30, R3 */
		/* 821460E4h case    7:*/		regs.R30 = regs.R3;
		/* 821460E4h case    7:*/		return 0x821460E8;
		  /* 821460E8h */ case    8:  		/* bl -568 */
		/* 821460E8h case    8:*/		regs.LR = 0x821460EC; return 0x82145EB0;
		/* 821460E8h case    8:*/		return 0x821460EC;
		  /* 821460ECh */ case    9:  		/* lbz R11, <#[R31]> */
		/* 821460ECh case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821460ECh case    9:*/		return 0x821460F0;
		  /* 821460F0h */ case   10:  		/* mr R24, R31 */
		/* 821460F0h case   10:*/		regs.R24 = regs.R31;
		/* 821460F0h case   10:*/		return 0x821460F4;
		  /* 821460F4h */ case   11:  		/* cmplwi CR0, R11, 0 */
		/* 821460F4h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821460F4h case   11:*/		return 0x821460F8;
		  /* 821460F8h */ case   12:  		/* bc 12, CR0_EQ, 176 */
		/* 821460F8h case   12:*/		if ( regs.CR[0].eq ) { return 0x821461A8;  }
		/* 821460F8h case   12:*/		return 0x821460FC;
		  /* 821460FCh */ case   13:  		/* lis R9, -32253 */
		/* 821460FCh case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821460FCh case   13:*/		return 0x82146100;
		  /* 82146100h */ case   14:  		/* lis R8, -32253 */
		/* 82146100h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82146100h case   14:*/		return 0x82146104;
		  /* 82146104h */ case   15:  		/* lis R7, -32253 */
		/* 82146104h case   15:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82146104h case   15:*/		return 0x82146108;
		  /* 82146108h */ case   16:  		/* lis R6, -32253 */
		/* 82146108h case   16:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 82146108h case   16:*/		return 0x8214610C;
		  /* 8214610Ch */ case   17:  		/* lis R10, -32253 */
		/* 8214610Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214610Ch case   17:*/		return 0x82146110;
		  /* 82146110h */ case   18:  		/* lis R11, -32253 */
		/* 82146110h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82146110h case   18:*/		return 0x82146114;
		  /* 82146114h */ case   19:  		/* addi R31, R9, 25796 */
		/* 82146114h case   19:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R9,0x64C4);
		/* 82146114h case   19:*/		return 0x82146118;
		  /* 82146118h */ case   20:  		/* addi R29, R8, 25788 */
		/* 82146118h case   20:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R8,0x64BC);
		/* 82146118h case   20:*/		return 0x8214611C;
		  /* 8214611Ch */ case   21:  		/* addi R28, R7, 25780 */
		/* 8214611Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R7,0x64B4);
		/* 8214611Ch case   21:*/		return 0x82146120;
		  /* 82146120h */ case   22:  		/* addi R27, R6, 25772 */
		/* 82146120h case   22:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R6,0x64AC);
		/* 82146120h case   22:*/		return 0x82146124;
		  /* 82146124h */ case   23:  		/* addi R26, R10, 25764 */
		/* 82146124h case   23:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x64A4);
		/* 82146124h case   23:*/		return 0x82146128;
		  /* 82146128h */ case   24:  		/* addi R25, R11, 25756 */
		/* 82146128h case   24:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x649C);
		/* 82146128h case   24:*/		return 0x8214612C;
		  /* 8214612Ch */ case   25:  		/* lbz R11, <#[R24]> */
		/* 8214612Ch case   25:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8214612Ch case   25:*/		return 0x82146130;
		  /* 82146130h */ case   26:  		/* extsb R5, R11 */
		/* 82146130h case   26:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82146130h case   26:*/		return 0x82146134;
		  /* 82146134h */ case   27:  		/* cmpwi CR6, R5, 34 */
		/* 82146134h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000022);
		/* 82146134h case   27:*/		return 0x82146138;
		  /* 82146138h */ case   28:  		/* bc 12, CR6_EQ, 88 */
		/* 82146138h case   28:*/		if ( regs.CR[6].eq ) { return 0x82146190;  }
		/* 82146138h case   28:*/		return 0x8214613C;
		  /* 8214613Ch */ case   29:  		/* cmpwi CR6, R5, 38 */
		/* 8214613Ch case   29:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000026);
		/* 8214613Ch case   29:*/		return 0x82146140;
		  /* 82146140h */ case   30:  		/* bc 12, CR6_EQ, 72 */
		/* 82146140h case   30:*/		if ( regs.CR[6].eq ) { return 0x82146188;  }
		/* 82146140h case   30:*/		return 0x82146144;
		  /* 82146144h */ case   31:  		/* cmpwi CR6, R5, 39 */
		/* 82146144h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000027);
		/* 82146144h case   31:*/		return 0x82146148;
		  /* 82146148h */ case   32:  		/* bc 12, CR6_EQ, 56 */
		/* 82146148h case   32:*/		if ( regs.CR[6].eq ) { return 0x82146180;  }
		/* 82146148h case   32:*/		return 0x8214614C;
		  /* 8214614Ch */ case   33:  		/* cmpwi CR6, R5, 60 */
		/* 8214614Ch case   33:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x0000003C);
		/* 8214614Ch case   33:*/		return 0x82146150;
		  /* 82146150h */ case   34:  		/* bc 12, CR6_EQ, 32 */
		/* 82146150h case   34:*/		if ( regs.CR[6].eq ) { return 0x82146170;  }
		/* 82146150h case   34:*/		return 0x82146154;
		  /* 82146154h */ case   35:  		/* cmpwi CR6, R5, 62 */
		/* 82146154h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x0000003E);
		/* 82146154h case   35:*/		return 0x82146158;
		  /* 82146158h */ case   36:  		/* mr R3, R30 */
		/* 82146158h case   36:*/		regs.R3 = regs.R30;
		/* 82146158h case   36:*/		return 0x8214615C;
		  /* 8214615Ch */ case   37:  		/* bc 12, CR6_EQ, 12 */
		/* 8214615Ch case   37:*/		if ( regs.CR[6].eq ) { return 0x82146168;  }
		/* 8214615Ch case   37:*/		return 0x82146160;
		  /* 82146160h */ case   38:  		/* mr R4, R31 */
		/* 82146160h case   38:*/		regs.R4 = regs.R31;
		/* 82146160h case   38:*/		return 0x82146164;
		  /* 82146164h */ case   39:  		/* b 52 */
		/* 82146164h case   39:*/		return 0x82146198;
		/* 82146164h case   39:*/		return 0x82146168;
	}
	return 0x82146168;
} // Block from 821460C8h-82146168h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82146168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146168);
		  /* 82146168h */ case    0:  		/* mr R4, R26 */
		/* 82146168h case    0:*/		regs.R4 = regs.R26;
		/* 82146168h case    0:*/		return 0x8214616C;
		  /* 8214616Ch */ case    1:  		/* b 12 */
		/* 8214616Ch case    1:*/		return 0x82146178;
		/* 8214616Ch case    1:*/		return 0x82146170;
	}
	return 0x82146170;
} // Block from 82146168h-82146170h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82146170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146170);
		  /* 82146170h */ case    0:  		/* mr R4, R25 */
		/* 82146170h case    0:*/		regs.R4 = regs.R25;
		/* 82146170h case    0:*/		return 0x82146174;
		  /* 82146174h */ case    1:  		/* mr R3, R30 */
		/* 82146174h case    1:*/		regs.R3 = regs.R30;
		/* 82146174h case    1:*/		return 0x82146178;
	}
	return 0x82146178;
} // Block from 82146170h-82146178h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82146178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146178);
		  /* 82146178h */ case    0:  		/* bl -712 */
		/* 82146178h case    0:*/		regs.LR = 0x8214617C; return 0x82145EB0;
		/* 82146178h case    0:*/		return 0x8214617C;
		  /* 8214617Ch */ case    1:  		/* b 32 */
		/* 8214617Ch case    1:*/		return 0x8214619C;
		/* 8214617Ch case    1:*/		return 0x82146180;
	}
	return 0x82146180;
} // Block from 82146178h-82146180h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82146180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146180);
		  /* 82146180h */ case    0:  		/* mr R4, R28 */
		/* 82146180h case    0:*/		regs.R4 = regs.R28;
		/* 82146180h case    0:*/		return 0x82146184;
		  /* 82146184h */ case    1:  		/* b -16 */
		/* 82146184h case    1:*/		return 0x82146174;
		/* 82146184h case    1:*/		return 0x82146188;
	}
	return 0x82146188;
} // Block from 82146180h-82146188h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82146188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146188);
		  /* 82146188h */ case    0:  		/* mr R4, R27 */
		/* 82146188h case    0:*/		regs.R4 = regs.R27;
		/* 82146188h case    0:*/		return 0x8214618C;
		  /* 8214618Ch */ case    1:  		/* b -24 */
		/* 8214618Ch case    1:*/		return 0x82146174;
		/* 8214618Ch case    1:*/		return 0x82146190;
	}
	return 0x82146190;
} // Block from 82146188h-82146190h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82146190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146190);
		  /* 82146190h */ case    0:  		/* mr R4, R29 */
		/* 82146190h case    0:*/		regs.R4 = regs.R29;
		/* 82146190h case    0:*/		return 0x82146194;
		  /* 82146194h */ case    1:  		/* mr R3, R30 */
		/* 82146194h case    1:*/		regs.R3 = regs.R30;
		/* 82146194h case    1:*/		return 0x82146198;
	}
	return 0x82146198;
} // Block from 82146190h-82146198h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82146198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146198);
		  /* 82146198h */ case    0:  		/* bl -744 */
		/* 82146198h case    0:*/		regs.LR = 0x8214619C; return 0x82145EB0;
		/* 82146198h case    0:*/		return 0x8214619C;
	}
	return 0x8214619C;
} // Block from 82146198h-8214619Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214619Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214619C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214619C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214619C);
		  /* 8214619Ch */ case    0:  		/* lbzu R11, <#[R24 + 1]> */
		/* 8214619Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000001) );
		regs.R24 = (uint32)(regs.R24 + 0x00000001);
		/* 8214619Ch case    0:*/		return 0x821461A0;
		  /* 821461A0h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821461A0h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821461A0h case    1:*/		return 0x821461A4;
		  /* 821461A4h */ case    2:  		/* bc 4, CR0_EQ, -120 */
		/* 821461A4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214612C;  }
		/* 821461A4h case    2:*/		return 0x821461A8;
	}
	return 0x821461A8;
} // Block from 8214619Ch-821461A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821461A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821461A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821461A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821461A8);
		  /* 821461A8h */ case    0:  		/* lis R11, -32253 */
		/* 821461A8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821461A8h case    0:*/		return 0x821461AC;
		  /* 821461ACh */ case    1:  		/* mr R3, R30 */
		/* 821461ACh case    1:*/		regs.R3 = regs.R30;
		/* 821461ACh case    1:*/		return 0x821461B0;
		  /* 821461B0h */ case    2:  		/* addi R4, R11, 25752 */
		/* 821461B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6498);
		/* 821461B0h case    2:*/		return 0x821461B4;
		  /* 821461B4h */ case    3:  		/* bl -772 */
		/* 821461B4h case    3:*/		regs.LR = 0x821461B8; return 0x82145EB0;
		/* 821461B4h case    3:*/		return 0x821461B8;
		  /* 821461B8h */ case    4:  		/* addi R1, R1, 160 */
		/* 821461B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821461B8h case    4:*/		return 0x821461BC;
		  /* 821461BCh */ case    5:  		/* b -741156 */
		/* 821461BCh case    5:*/		return 0x82091298;
		/* 821461BCh case    5:*/		return 0x821461C0;
	}
	return 0x821461C0;
} // Block from 821461A8h-821461C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821461C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821461C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821461C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821461C0);
		  /* 821461C0h */ case    0:  		/* mr R11, R4 */
		/* 821461C0h case    0:*/		regs.R11 = regs.R4;
		/* 821461C0h case    0:*/		return 0x821461C4;
		  /* 821461C4h */ case    1:  		/* lbz R10, <#[R11]> */
		/* 821461C4h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821461C4h case    1:*/		return 0x821461C8;
		  /* 821461C8h */ case    2:  		/* addi R11, R11, 1 */
		/* 821461C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821461C8h case    2:*/		return 0x821461CC;
		  /* 821461CCh */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 821461CCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821461CCh case    3:*/		return 0x821461D0;
		  /* 821461D0h */ case    4:  		/* bc 4, CR6_EQ, -12 */
		/* 821461D0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821461C4;  }
		/* 821461D0h case    4:*/		return 0x821461D4;
		  /* 821461D4h */ case    5:  		/* subf R11, R4, R11 */
		/* 821461D4h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 821461D4h case    5:*/		return 0x821461D8;
		  /* 821461D8h */ case    6:  		/* lwz R10, <#[R3 + 16]> */
		/* 821461D8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 821461D8h case    6:*/		return 0x821461DC;
		  /* 821461DCh */ case    7:  		/* addi R11, R11, -1 */
		/* 821461DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821461DCh case    7:*/		return 0x821461E0;
		  /* 821461E0h */ case    8:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821461E0h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821461E0h case    8:*/		return 0x821461E4;
		  /* 821461E4h */ case    9:  		/* add R11, R11, R10 */
		/* 821461E4h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821461E4h case    9:*/		return 0x821461E8;
		  /* 821461E8h */ case   10:  		/* stw R11, <#[R3 + 16]> */
		/* 821461E8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 821461E8h case   10:*/		return 0x821461EC;
		  /* 821461ECh */ case   11:  		/* bclr 20, CR0_LT */
		/* 821461ECh case   11:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821461ECh case   11:*/		return 0x821461F0;
	}
	return 0x821461F0;
} // Block from 821461C0h-821461F0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821461F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821461F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821461F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821461F0);
		  /* 821461F0h */ case    0:  		/* lwz R11, <#[R3 + 16]> */
		/* 821461F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 821461F0h case    0:*/		return 0x821461F4;
		  /* 821461F4h */ case    1:  		/* add R11, R5, R11 */
		/* 821461F4h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 821461F4h case    1:*/		return 0x821461F8;
		  /* 821461F8h */ case    2:  		/* stw R11, <#[R3 + 16]> */
		/* 821461F8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 821461F8h case    2:*/		return 0x821461FC;
		  /* 821461FCh */ case    3:  		/* bclr 20, CR0_LT */
		/* 821461FCh case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821461FCh case    3:*/		return 0x82146200;
	}
	return 0x82146200;
} // Block from 821461F0h-82146200h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146200);
		  /* 82146200h */ case    0:  		/* add R8, R4, R5 */
		/* 82146200h case    0:*/		cpu::op::add<0>(regs,&regs.R8,regs.R4,regs.R5);
		/* 82146200h case    0:*/		return 0x82146204;
		  /* 82146204h */ case    1:  		/* li R11, 0 */
		/* 82146204h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82146204h case    1:*/		return 0x82146208;
		  /* 82146208h */ case    2:  		/* mr R10, R4 */
		/* 82146208h case    2:*/		regs.R10 = regs.R4;
		/* 82146208h case    2:*/		return 0x8214620C;
		  /* 8214620Ch */ case    3:  		/* cmplw CR6, R4, R8 */
		/* 8214620Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R8);
		/* 8214620Ch case    3:*/		return 0x82146210;
		  /* 82146210h */ case    4:  		/* bc 4, CR6_LT, 68 */
		/* 82146210h case    4:*/		if ( !regs.CR[6].lt ) { return 0x82146254;  }
		/* 82146210h case    4:*/		return 0x82146214;
		  /* 82146214h */ case    5:  		/* lbz R9, <#[R10]> */
		/* 82146214h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82146214h case    5:*/		return 0x82146218;
		  /* 82146218h */ case    6:  		/* extsb R9, R9 */
		/* 82146218h case    6:*/		cpu::op::extsb<0>(regs,&regs.R9,regs.R9);
		/* 82146218h case    6:*/		return 0x8214621C;
		  /* 8214621Ch */ case    7:  		/* cmpwi CR6, R9, 60 */
		/* 8214621Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000003C);
		/* 8214621Ch case    7:*/		return 0x82146220;
		  /* 82146220h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 82146220h case    8:*/		if ( regs.CR[6].eq ) { return 0x8214622C;  }
		/* 82146220h case    8:*/		return 0x82146224;
		  /* 82146224h */ case    9:  		/* cmpwi CR6, R9, 62 */
		/* 82146224h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000003E);
		/* 82146224h case    9:*/		return 0x82146228;
		  /* 82146228h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 82146228h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82146234;  }
		/* 82146228h case   10:*/		return 0x8214622C;
	}
	return 0x8214622C;
} // Block from 82146200h-8214622Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214622Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214622C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214622C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214622C);
		  /* 8214622Ch */ case    0:  		/* addi R11, R11, 4 */
		/* 8214622Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8214622Ch case    0:*/		return 0x82146230;
		  /* 82146230h */ case    1:  		/* b 24 */
		/* 82146230h case    1:*/		return 0x82146248;
		/* 82146230h case    1:*/		return 0x82146234;
	}
	return 0x82146234;
} // Block from 8214622Ch-82146234h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82146234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146234);
		  /* 82146234h */ case    0:  		/* cmpwi CR6, R9, 38 */
		/* 82146234h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000026);
		/* 82146234h case    0:*/		return 0x82146238;
		  /* 82146238h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82146238h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82146244;  }
		/* 82146238h case    1:*/		return 0x8214623C;
		  /* 8214623Ch */ case    2:  		/* addi R11, R11, 5 */
		/* 8214623Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5);
		/* 8214623Ch case    2:*/		return 0x82146240;
		  /* 82146240h */ case    3:  		/* b 8 */
		/* 82146240h case    3:*/		return 0x82146248;
		/* 82146240h case    3:*/		return 0x82146244;
	}
	return 0x82146244;
} // Block from 82146234h-82146244h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146244);
		  /* 82146244h */ case    0:  		/* addi R11, R11, 1 */
		/* 82146244h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82146244h case    0:*/		return 0x82146248;
	}
	return 0x82146248;
} // Block from 82146244h-82146248h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146248);
		  /* 82146248h */ case    0:  		/* addi R10, R10, 1 */
		/* 82146248h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82146248h case    0:*/		return 0x8214624C;
		  /* 8214624Ch */ case    1:  		/* cmplw CR6, R10, R8 */
		/* 8214624Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8214624Ch case    1:*/		return 0x82146250;
		  /* 82146250h */ case    2:  		/* bc 12, CR6_LT, -60 */
		/* 82146250h case    2:*/		if ( regs.CR[6].lt ) { return 0x82146214;  }
		/* 82146250h case    2:*/		return 0x82146254;
	}
	return 0x82146254;
} // Block from 82146248h-82146254h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146254);
		  /* 82146254h */ case    0:  		/* lwz R10, <#[R3 + 16]> */
		/* 82146254h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82146254h case    0:*/		return 0x82146258;
		  /* 82146258h */ case    1:  		/* add R11, R10, R11 */
		/* 82146258h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82146258h case    1:*/		return 0x8214625C;
		  /* 8214625Ch */ case    2:  		/* stw R11, <#[R3 + 16]> */
		/* 8214625Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8214625Ch case    2:*/		return 0x82146260;
		  /* 82146260h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82146260h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82146260h case    3:*/		return 0x82146264;
	}
	return 0x82146264;
} // Block from 82146254h-82146264h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146264);
		  /* 82146264h */ case    0:  		/* nop */
		/* 82146264h case    0:*/		cpu::op::nop();
		/* 82146264h case    0:*/		return 0x82146268;
	}
	return 0x82146268;
} // Block from 82146264h-82146268h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146268);
		  /* 82146268h */ case    0:  		/* mfspr R12, LR */
		/* 82146268h case    0:*/		regs.R12 = regs.LR;
		/* 82146268h case    0:*/		return 0x8214626C;
		  /* 8214626Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214626Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214626Ch case    1:*/		return 0x82146270;
		  /* 82146270h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82146270h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82146270h case    2:*/		return 0x82146274;
		  /* 82146274h */ case    3:  		/* stwu R1, <#[R1 - 1120]> */
		/* 82146274h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFBA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFBA0);
		/* 82146274h case    3:*/		return 0x82146278;
		  /* 82146278h */ case    4:  		/* mr R6, R5 */
		/* 82146278h case    4:*/		regs.R6 = regs.R5;
		/* 82146278h case    4:*/		return 0x8214627C;
		  /* 8214627Ch */ case    5:  		/* mr R31, R3 */
		/* 8214627Ch case    5:*/		regs.R31 = regs.R3;
		/* 8214627Ch case    5:*/		return 0x82146280;
	}
	return 0x82146280;
} // Block from 82146268h-82146280h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82146280h
// Function '?FindFXApi@CParse@D3DXShader@@IAAJPAVCNode@2@0_N1PAPAUSFxApiCall@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146280);
		  /* 82146280h */ case    0:  		/* mr R5, R4 */
		/* 82146280h case    0:*/		regs.R5 = regs.R4;
		/* 82146280h case    0:*/		return 0x82146284;
		  /* 82146284h */ case    1:  		/* li R4, 1024 */
		/* 82146284h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x400);
		/* 82146284h case    1:*/		return 0x82146288;
		  /* 82146288h */ case    2:  		/* addi R3, R1, 80 */
		/* 82146288h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82146288h case    2:*/		return 0x8214628C;
		  /* 8214628Ch */ case    3:  		/* bl -701124 */
		/* 8214628Ch case    3:*/		regs.LR = 0x82146290; return 0x8209AFC8;
		/* 8214628Ch case    3:*/		return 0x82146290;
		  /* 82146290h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82146290h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82146290h case    4:*/		return 0x82146294;
		  /* 82146294h */ case    5:  		/* bc 4, CR0_LT, 20 */
		/* 82146294h case    5:*/		if ( !regs.CR[0].lt ) { return 0x821462A8;  }
		/* 82146294h case    5:*/		return 0x82146298;
		  /* 82146298h */ case    6:  		/* lis R11, -32768 */
		/* 82146298h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 82146298h case    6:*/		return 0x8214629C;
		  /* 8214629Ch */ case    7:  		/* ori R11, R11, 16389 */
		/* 8214629Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4005);
		/* 8214629Ch case    7:*/		return 0x821462A0;
		  /* 821462A0h */ case    8:  		/* stw R11, <#[R31 + 12]> */
		/* 821462A0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821462A0h case    8:*/		return 0x821462A4;
		  /* 821462A4h */ case    9:  		/* b 16 */
		/* 821462A4h case    9:*/		return 0x821462B4;
		/* 821462A4h case    9:*/		return 0x821462A8;
	}
	return 0x821462A8;
} // Block from 82146280h-821462A8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821462A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821462A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821462A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821462A8);
		  /* 821462A8h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 821462A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821462A8h case    0:*/		return 0x821462AC;
		  /* 821462ACh */ case    1:  		/* add R11, R11, R3 */
		/* 821462ACh case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821462ACh case    1:*/		return 0x821462B0;
		  /* 821462B0h */ case    2:  		/* stw R11, <#[R31 + 16]> */
		/* 821462B0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821462B0h case    2:*/		return 0x821462B4;
	}
	return 0x821462B4;
} // Block from 821462A8h-821462B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821462B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821462B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821462B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821462B4);
		  /* 821462B4h */ case    0:  		/* addi R1, R1, 1120 */
		/* 821462B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x460);
		/* 821462B4h case    0:*/		return 0x821462B8;
		  /* 821462B8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821462B8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821462B8h case    1:*/		return 0x821462BC;
		  /* 821462BCh */ case    2:  		/* mtspr LR, R12 */
		/* 821462BCh case    2:*/		regs.LR = regs.R12;
		/* 821462BCh case    2:*/		return 0x821462C0;
		  /* 821462C0h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 821462C0h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821462C0h case    3:*/		return 0x821462C4;
		  /* 821462C4h */ case    4:  		/* bclr 20, CR0_LT */
		/* 821462C4h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821462C4h case    4:*/		return 0x821462C8;
	}
	return 0x821462C8;
} // Block from 821462B4h-821462C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821462C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821462C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821462C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821462C8);
		  /* 821462C8h */ case    0:  		/* lwz R11, <#[R3 + 12]> */
		/* 821462C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821462C8h case    0:*/		return 0x821462CC;
		  /* 821462CCh */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821462CCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821462CCh case    1:*/		return 0x821462D0;
		  /* 821462D0h */ case    2:  		/* bclr 12, CR6_LT */
		/* 821462D0h case    2:*/		if ( regs.CR[6].lt ) { return (uint32)regs.LR; }
		/* 821462D0h case    2:*/		return 0x821462D4;
	}
	return 0x821462D4;
} // Block from 821462C8h-821462D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821462D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821462D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821462D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821462D4);
		  /* 821462D4h */ case    0:  		/* mr R11, R4 */
		/* 821462D4h case    0:*/		regs.R11 = regs.R4;
		/* 821462D4h case    0:*/		return 0x821462D8;
		  /* 821462D8h */ case    1:  		/* lbz R10, <#[R11]> */
		/* 821462D8h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821462D8h case    1:*/		return 0x821462DC;
		  /* 821462DCh */ case    2:  		/* addi R11, R11, 1 */
		/* 821462DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821462DCh case    2:*/		return 0x821462E0;
		  /* 821462E0h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 821462E0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821462E0h case    3:*/		return 0x821462E4;
		  /* 821462E4h */ case    4:  		/* bc 4, CR6_EQ, -12 */
		/* 821462E4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821462D8;  }
		/* 821462E4h case    4:*/		return 0x821462E8;
		  /* 821462E8h */ case    5:  		/* subf R11, R4, R11 */
		/* 821462E8h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 821462E8h case    5:*/		return 0x821462EC;
		  /* 821462ECh */ case    6:  		/* lwz R9, <#[R3 + 20]> */
		/* 821462ECh case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 821462ECh case    6:*/		return 0x821462F0;
		  /* 821462F0h */ case    7:  		/* addi R10, R11, -1 */
		/* 821462F0h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821462F0h case    7:*/		return 0x821462F4;
		  /* 821462F4h */ case    8:  		/* lwz R11, <#[R3 + 24]> */
		/* 821462F4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 821462F4h case    8:*/		return 0x821462F8;
		  /* 821462F8h */ case    9:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821462F8h case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821462F8h case    9:*/		return 0x821462FC;
		  /* 821462FCh */ case   10:  		/* subf R9, R11, R9 */
		/* 821462FCh case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821462FCh case   10:*/		return 0x82146300;
		  /* 82146300h */ case   11:  		/* addi R10, R10, 1 */
		/* 82146300h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82146300h case   11:*/		return 0x82146304;
		  /* 82146304h */ case   12:  		/* cmplw CR6, R9, R10 */
		/* 82146304h case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82146304h case   12:*/		return 0x82146308;
		  /* 82146308h */ case   13:  		/* bc 4, CR6_LT, 20 */
		/* 82146308h case   13:*/		if ( !regs.CR[6].lt ) { return 0x8214631C;  }
		/* 82146308h case   13:*/		return 0x8214630C;
		  /* 8214630Ch */ case   14:  		/* lis R11, -32768 */
		/* 8214630Ch case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 8214630Ch case   14:*/		return 0x82146310;
		  /* 82146310h */ case   15:  		/* ori R11, R11, 16389 */
		/* 82146310h case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4005);
		/* 82146310h case   15:*/		return 0x82146314;
		  /* 82146314h */ case   16:  		/* stw R11, <#[R3 + 12]> */
		/* 82146314h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82146314h case   16:*/		return 0x82146318;
		  /* 82146318h */ case   17:  		/* bclr 20, CR0_LT */
		/* 82146318h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82146318h case   17:*/		return 0x8214631C;
	}
	return 0x8214631C;
} // Block from 821462D4h-8214631Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8214631Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214631C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214631C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214631C);
		  /* 8214631Ch */ case    0:  		/* lwz R10, <#[R3 + 16]> */
		/* 8214631Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 8214631Ch case    0:*/		return 0x82146320;
		  /* 82146320h */ case    1:  		/* addi R9, R4, -1 */
		/* 82146320h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R4,0xFFFFFFFF);
		/* 82146320h case    1:*/		return 0x82146324;
		  /* 82146324h */ case    2:  		/* add R11, R10, R11 */
		/* 82146324h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82146324h case    2:*/		return 0x82146328;
		  /* 82146328h */ case    3:  		/* addi R11, R11, -1 */
		/* 82146328h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82146328h case    3:*/		return 0x8214632C;
		  /* 8214632Ch */ case    4:  		/* lbzu R10, <#[R9 + 1]> */
		/* 8214632Ch case    4:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000001) );
		regs.R9 = (uint32)(regs.R9 + 0x00000001);
		/* 8214632Ch case    4:*/		return 0x82146330;
		  /* 82146330h */ case    5:  		/* extsb. R8, R10 */
		/* 82146330h case    5:*/		cpu::op::extsb<1>(regs,&regs.R8,regs.R10);
		/* 82146330h case    5:*/		return 0x82146334;
		  /* 82146334h */ case    6:  		/* stbu R10, <#[R11 + 1]> */
		/* 82146334h case    6:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000001) );
		regs.R11 = (uint32)(regs.R11 + 0x00000001);
		/* 82146334h case    6:*/		return 0x82146338;
		  /* 82146338h */ case    7:  		/* bc 4, CR0_EQ, -12 */
		/* 82146338h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8214632C;  }
		/* 82146338h case    7:*/		return 0x8214633C;
		  /* 8214633Ch */ case    8:  		/* mr R11, R4 */
		/* 8214633Ch case    8:*/		regs.R11 = regs.R4;
		/* 8214633Ch case    8:*/		return 0x82146340;
		  /* 82146340h */ case    9:  		/* lbz R10, <#[R11]> */
		/* 82146340h case    9:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82146340h case    9:*/		return 0x82146344;
		  /* 82146344h */ case   10:  		/* addi R11, R11, 1 */
		/* 82146344h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82146344h case   10:*/		return 0x82146348;
		  /* 82146348h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 82146348h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82146348h case   11:*/		return 0x8214634C;
		  /* 8214634Ch */ case   12:  		/* bc 4, CR6_EQ, -12 */
		/* 8214634Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82146340;  }
		/* 8214634Ch case   12:*/		return 0x82146350;
		  /* 82146350h */ case   13:  		/* subf R11, R4, R11 */
		/* 82146350h case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 82146350h case   13:*/		return 0x82146354;
		  /* 82146354h */ case   14:  		/* lwz R10, <#[R3 + 24]> */
		/* 82146354h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000018) );
		/* 82146354h case   14:*/		return 0x82146358;
		  /* 82146358h */ case   15:  		/* addi R11, R11, -1 */
		/* 82146358h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82146358h case   15:*/		return 0x8214635C;
		  /* 8214635Ch */ case   16:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8214635Ch case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8214635Ch case   16:*/		return 0x82146360;
		  /* 82146360h */ case   17:  		/* add R11, R11, R10 */
		/* 82146360h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82146360h case   17:*/		return 0x82146364;
		  /* 82146364h */ case   18:  		/* stw R11, <#[R3 + 24]> */
		/* 82146364h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 82146364h case   18:*/		return 0x82146368;
		  /* 82146368h */ case   19:  		/* bclr 20, CR0_LT */
		/* 82146368h case   19:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82146368h case   19:*/		return 0x8214636C;
	}
	return 0x8214636C;
} // Block from 8214631Ch-8214636Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8214636Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214636C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214636C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214636C);
		  /* 8214636Ch */ case    0:  		/* nop */
		/* 8214636Ch case    0:*/		cpu::op::nop();
		/* 8214636Ch case    0:*/		return 0x82146370;
	}
	return 0x82146370;
} // Block from 8214636Ch-82146370h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146370);
		  /* 82146370h */ case    0:  		/* mfspr R12, LR */
		/* 82146370h case    0:*/		regs.R12 = regs.LR;
		/* 82146370h case    0:*/		return 0x82146374;
		  /* 82146374h */ case    1:  		/* bl -741656 */
		/* 82146374h case    1:*/		regs.LR = 0x82146378; return 0x8209125C;
		/* 82146374h case    1:*/		return 0x82146378;
		  /* 82146378h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82146378h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82146378h case    2:*/		return 0x8214637C;
		  /* 8214637Ch */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 8214637Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8214637Ch case    3:*/		return 0x82146380;
		  /* 82146380h */ case    4:  		/* mr R29, R3 */
		/* 82146380h case    4:*/		regs.R29 = regs.R3;
		/* 82146380h case    4:*/		return 0x82146384;
		  /* 82146384h */ case    5:  		/* mr R30, R5 */
		/* 82146384h case    5:*/		regs.R30 = regs.R5;
		/* 82146384h case    5:*/		return 0x82146388;
		  /* 82146388h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 82146388h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82146388h case    6:*/		return 0x8214638C;
		  /* 8214638Ch */ case    7:  		/* bc 12, CR6_LT, 88 */
		/* 8214638Ch case    7:*/		if ( regs.CR[6].lt ) { return 0x821463E4;  }
		/* 8214638Ch case    7:*/		return 0x82146390;
		  /* 82146390h */ case    8:  		/* lwz R11, <#[R3 + 24]> */
		/* 82146390h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 82146390h case    8:*/		return 0x82146394;
		  /* 82146394h */ case    9:  		/* lwz R9, <#[R3 + 20]> */
		/* 82146394h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 82146394h case    9:*/		return 0x82146398;
		  /* 82146398h */ case   10:  		/* lwz R10, <#[R3 + 16]> */
		/* 82146398h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82146398h case   10:*/		return 0x8214639C;
		  /* 8214639Ch */ case   11:  		/* subf R31, R11, R9 */
		/* 8214639Ch case   11:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R9);
		/* 8214639Ch case   11:*/		return 0x821463A0;
		  /* 821463A0h */ case   12:  		/* add R3, R10, R11 */
		/* 821463A0h case   12:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 821463A0h case   12:*/		return 0x821463A4;
		  /* 821463A4h */ case   13:  		/* cmplw CR6, R5, R31 */
		/* 821463A4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R31);
		/* 821463A4h case   13:*/		return 0x821463A8;
		  /* 821463A8h */ case   14:  		/* bc 4, CR6_GT, 20 */
		/* 821463A8h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821463BC;  }
		/* 821463A8h case   14:*/		return 0x821463AC;
		  /* 821463ACh */ case   15:  		/* lis R11, -32768 */
		/* 821463ACh case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 821463ACh case   15:*/		return 0x821463B0;
		  /* 821463B0h */ case   16:  		/* ori R11, R11, 16389 */
		/* 821463B0h case   16:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4005);
		/* 821463B0h case   16:*/		return 0x821463B4;
		  /* 821463B4h */ case   17:  		/* stw R11, <#[R29 + 12]> */
		/* 821463B4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821463B4h case   17:*/		return 0x821463B8;
		  /* 821463B8h */ case   18:  		/* b 44 */
		/* 821463B8h case   18:*/		return 0x821463E4;
		/* 821463B8h case   18:*/		return 0x821463BC;
	}
	return 0x821463BC;
} // Block from 82146370h-821463BCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821463BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821463BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821463BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821463BC);
		  /* 821463BCh */ case    0:  		/* mr R5, R30 */
		/* 821463BCh case    0:*/		regs.R5 = regs.R30;
		/* 821463BCh case    0:*/		return 0x821463C0;
		  /* 821463C0h */ case    1:  		/* bc 12, CR6_LT, 8 */
		/* 821463C0h case    1:*/		if ( regs.CR[6].lt ) { return 0x821463C8;  }
		/* 821463C0h case    1:*/		return 0x821463C4;
		  /* 821463C4h */ case    2:  		/* mr R5, R31 */
		/* 821463C4h case    2:*/		regs.R5 = regs.R31;
		/* 821463C4h case    2:*/		return 0x821463C8;
	}
	return 0x821463C8;
} // Block from 821463BCh-821463C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821463C8h
// Function '?CompileFlagExpr@CParse@D3DXShader@@IAAJPAVCNode@2@PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821463C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821463C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821463C8);
		  /* 821463C8h */ case    0:  		/* bl -739864 */
		/* 821463C8h case    0:*/		regs.LR = 0x821463CC; return 0x820919B0;
		/* 821463C8h case    0:*/		return 0x821463CC;
		  /* 821463CCh */ case    1:  		/* cmplw CR6, R30, R31 */
		/* 821463CCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 821463CCh case    1:*/		return 0x821463D0;
		  /* 821463D0h */ case    2:  		/* bc 4, CR6_LT, 8 */
		/* 821463D0h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821463D8;  }
		/* 821463D0h case    2:*/		return 0x821463D4;
		  /* 821463D4h */ case    3:  		/* mr R31, R30 */
		/* 821463D4h case    3:*/		regs.R31 = regs.R30;
		/* 821463D4h case    3:*/		return 0x821463D8;
	}
	return 0x821463D8;
} // Block from 821463C8h-821463D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821463D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821463D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821463D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821463D8);
		  /* 821463D8h */ case    0:  		/* lwz R11, <#[R29 + 24]> */
		/* 821463D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 821463D8h case    0:*/		return 0x821463DC;
		  /* 821463DCh */ case    1:  		/* add R11, R31, R11 */
		/* 821463DCh case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821463DCh case    1:*/		return 0x821463E0;
		  /* 821463E0h */ case    2:  		/* stw R11, <#[R29 + 24]> */
		/* 821463E0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 821463E0h case    2:*/		return 0x821463E4;
	}
	return 0x821463E4;
} // Block from 821463D8h-821463E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821463E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821463E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821463E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821463E4);
		  /* 821463E4h */ case    0:  		/* addi R1, R1, 112 */
		/* 821463E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821463E4h case    0:*/		return 0x821463E8;
		  /* 821463E8h */ case    1:  		/* b -741692 */
		/* 821463E8h case    1:*/		return 0x820912AC;
		/* 821463E8h case    1:*/		return 0x821463EC;
		  /* 821463ECh */ case    2:  		/* nop */
		/* 821463ECh case    2:*/		cpu::op::nop();
		/* 821463ECh case    2:*/		return 0x821463F0;
	}
	return 0x821463F0;
} // Block from 821463E4h-821463F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821463F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821463F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821463F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821463F0);
		  /* 821463F0h */ case    0:  		/* std R31, <#[R1 - 8]> */
		/* 821463F0h case    0:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821463F0h case    0:*/		return 0x821463F4;
		  /* 821463F4h */ case    1:  		/* lwz R11, <#[R3 + 24]> */
		/* 821463F4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 821463F4h case    1:*/		return 0x821463F8;
		  /* 821463F8h */ case    2:  		/* lwz R10, <#[R3 + 20]> */
		/* 821463F8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 821463F8h case    2:*/		return 0x821463FC;
		  /* 821463FCh */ case    3:  		/* lwz R9, <#[R3 + 12]> */
		/* 821463FCh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000000C) );
		/* 821463FCh case    3:*/		return 0x82146400;
		  /* 82146400h */ case    4:  		/* subf R10, R11, R10 */
		/* 82146400h case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82146400h case    4:*/		return 0x82146404;
		  /* 82146404h */ case    5:  		/* cmpwi CR6, R9, 0 */
		/* 82146404h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82146404h case    5:*/		return 0x82146408;
		  /* 82146408h */ case    6:  		/* bc 12, CR6_LT, 196 */
		/* 82146408h case    6:*/		if ( regs.CR[6].lt ) { return 0x821464CC;  }
		/* 82146408h case    6:*/		return 0x8214640C;
		  /* 8214640Ch */ case    7:  		/* lwz R9, <#[R3 + 16]> */
		/* 8214640Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 8214640Ch case    7:*/		return 0x82146410;
		  /* 82146410h */ case    8:  		/* add R31, R4, R5 */
		/* 82146410h case    8:*/		cpu::op::add<0>(regs,&regs.R31,regs.R4,regs.R5);
		/* 82146410h case    8:*/		return 0x82146414;
		  /* 82146414h */ case    9:  		/* add R11, R9, R11 */
		/* 82146414h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82146414h case    9:*/		return 0x82146418;
		  /* 82146418h */ case   10:  		/* cmplw CR6, R4, R31 */
		/* 82146418h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R31);
		/* 82146418h case   10:*/		return 0x8214641C;
		  /* 8214641Ch */ case   11:  		/* bc 4, CR6_LT, 176 */
		/* 8214641Ch case   11:*/		if ( !regs.CR[6].lt ) { return 0x821464CC;  }
		/* 8214641Ch case   11:*/		return 0x82146420;
		  /* 82146420h */ case   12:  		/* li R6, 38 */
		/* 82146420h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x26);
		/* 82146420h case   12:*/		return 0x82146424;
		  /* 82146424h */ case   13:  		/* li R5, 116 */
		/* 82146424h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x74);
		/* 82146424h case   13:*/		return 0x82146428;
		  /* 82146428h */ case   14:  		/* li R7, 59 */
		/* 82146428h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x3B);
		/* 82146428h case   14:*/		return 0x8214642C;
		  /* 8214642Ch */ case   15:  		/* lbz R8, <#[R4]> */
		/* 8214642Ch case   15:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 8214642Ch case   15:*/		return 0x82146430;
		  /* 82146430h */ case   16:  		/* extsb R9, R8 */
		/* 82146430h case   16:*/		cpu::op::extsb<0>(regs,&regs.R9,regs.R8);
		/* 82146430h case   16:*/		return 0x82146434;
		  /* 82146434h */ case   17:  		/* cmpwi CR6, R9, 60 */
		/* 82146434h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000003C);
		/* 82146434h case   17:*/		return 0x82146438;
		  /* 82146438h */ case   18:  		/* bc 4, CR6_EQ, 40 */
		/* 82146438h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82146460;  }
		/* 82146438h case   18:*/		return 0x8214643C;
		  /* 8214643Ch */ case   19:  		/* cmpwi CR6, R10, 4 */
		/* 8214643Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000004);
		/* 8214643Ch case   19:*/		return 0x82146440;
		  /* 82146440h */ case   20:  		/* bc 12, CR6_LT, 160 */
		/* 82146440h case   20:*/		if ( regs.CR[6].lt ) { return 0x821464E0;  }
		/* 82146440h case   20:*/		return 0x82146444;
		  /* 82146444h */ case   21:  		/* li R9, 108 */
		/* 82146444h case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x6C);
		/* 82146444h case   21:*/		return 0x82146448;
		  /* 82146448h */ case   22:  		/* stb R6, <#[R11]> */
		/* 82146448h case   22:*/		cpu::mem::store8( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82146448h case   22:*/		return 0x8214644C;
		  /* 8214644Ch */ case   23:  		/* addi R10, R10, -4 */
		/* 8214644Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 8214644Ch case   23:*/		return 0x82146450;
		  /* 82146450h */ case   24:  		/* stbu R9, <#[R11 + 1]> */
		/* 82146450h case   24:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000001) );
		regs.R11 = (uint32)(regs.R11 + 0x00000001);
		/* 82146450h case   24:*/		return 0x82146454;
		  /* 82146454h */ case   25:  		/* stbu R5, <#[R11 + 1]> */
		/* 82146454h case   25:*/		cpu::mem::store8( regs, regs.R5, (uint32)(regs.R11 + 0x00000001) );
		regs.R11 = (uint32)(regs.R11 + 0x00000001);
		/* 82146454h case   25:*/		return 0x82146458;
		  /* 82146458h */ case   26:  		/* stbu R7, <#[R11 + 1]> */
		/* 82146458h case   26:*/		cpu::mem::store8( regs, regs.R7, (uint32)(regs.R11 + 0x00000001) );
		regs.R11 = (uint32)(regs.R11 + 0x00000001);
		/* 82146458h case   26:*/		return 0x8214645C;
		  /* 8214645Ch */ case   27:  		/* b 96 */
		/* 8214645Ch case   27:*/		return 0x821464BC;
		/* 8214645Ch case   27:*/		return 0x82146460;
	}
	return 0x82146460;
} // Block from 821463F0h-82146460h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82146460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146460);
		  /* 82146460h */ case    0:  		/* cmpwi CR6, R9, 62 */
		/* 82146460h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000003E);
		/* 82146460h case    0:*/		return 0x82146464;
		  /* 82146464h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82146464h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82146478;  }
		/* 82146464h case    1:*/		return 0x82146468;
		  /* 82146468h */ case    2:  		/* cmpwi CR6, R10, 4 */
		/* 82146468h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000004);
		/* 82146468h case    2:*/		return 0x8214646C;
		  /* 8214646Ch */ case    3:  		/* bc 12, CR6_LT, 116 */
		/* 8214646Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x821464E0;  }
		/* 8214646Ch case    3:*/		return 0x82146470;
		  /* 82146470h */ case    4:  		/* li R9, 103 */
		/* 82146470h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x67);
		/* 82146470h case    4:*/		return 0x82146474;
		  /* 82146474h */ case    5:  		/* b -44 */
		/* 82146474h case    5:*/		return 0x82146448;
		/* 82146474h case    5:*/		return 0x82146478;
	}
	return 0x82146478;
} // Block from 82146460h-82146478h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82146478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146478);
		  /* 82146478h */ case    0:  		/* cmpwi CR6, R9, 38 */
		/* 82146478h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000026);
		/* 82146478h case    0:*/		return 0x8214647C;
		  /* 8214647Ch */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 8214647Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821464AC;  }
		/* 8214647Ch case    1:*/		return 0x82146480;
		  /* 82146480h */ case    2:  		/* cmpwi CR6, R10, 5 */
		/* 82146480h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000005);
		/* 82146480h case    2:*/		return 0x82146484;
		  /* 82146484h */ case    3:  		/* bc 12, CR6_LT, 92 */
		/* 82146484h case    3:*/		if ( regs.CR[6].lt ) { return 0x821464E0;  }
		/* 82146484h case    3:*/		return 0x82146488;
		  /* 82146488h */ case    4:  		/* li R9, 97 */
		/* 82146488h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x61);
		/* 82146488h case    4:*/		return 0x8214648C;
		  /* 8214648Ch */ case    5:  		/* stb R6, <#[R11]> */
		/* 8214648Ch case    5:*/		cpu::mem::store8( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8214648Ch case    5:*/		return 0x82146490;
		  /* 82146490h */ case    6:  		/* li R8, 109 */
		/* 82146490h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x6D);
		/* 82146490h case    6:*/		return 0x82146494;
		  /* 82146494h */ case    7:  		/* stbu R9, <#[R11 + 1]> */
		/* 82146494h case    7:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000001) );
		regs.R11 = (uint32)(regs.R11 + 0x00000001);
		/* 82146494h case    7:*/		return 0x82146498;
		  /* 82146498h */ case    8:  		/* li R9, 112 */
		/* 82146498h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x70);
		/* 82146498h case    8:*/		return 0x8214649C;
		  /* 8214649Ch */ case    9:  		/* addi R10, R10, -5 */
		/* 8214649Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFB);
		/* 8214649Ch case    9:*/		return 0x821464A0;
		  /* 821464A0h */ case   10:  		/* stbu R8, <#[R11 + 1]> */
		/* 821464A0h case   10:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R11 + 0x00000001) );
		regs.R11 = (uint32)(regs.R11 + 0x00000001);
		/* 821464A0h case   10:*/		return 0x821464A4;
		  /* 821464A4h */ case   11:  		/* stbu R9, <#[R11 + 1]> */
		/* 821464A4h case   11:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000001) );
		regs.R11 = (uint32)(regs.R11 + 0x00000001);
		/* 821464A4h case   11:*/		return 0x821464A8;
		  /* 821464A8h */ case   12:  		/* b -80 */
		/* 821464A8h case   12:*/		return 0x82146458;
		/* 821464A8h case   12:*/		return 0x821464AC;
	}
	return 0x821464AC;
} // Block from 82146478h-821464ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821464ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821464AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821464AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821464AC);
		  /* 821464ACh */ case    0:  		/* cmpwi CR6, R10, 1 */
		/* 821464ACh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821464ACh case    0:*/		return 0x821464B0;
		  /* 821464B0h */ case    1:  		/* bc 12, CR6_LT, 48 */
		/* 821464B0h case    1:*/		if ( regs.CR[6].lt ) { return 0x821464E0;  }
		/* 821464B0h case    1:*/		return 0x821464B4;
		  /* 821464B4h */ case    2:  		/* stb R8, <#[R11]> */
		/* 821464B4h case    2:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821464B4h case    2:*/		return 0x821464B8;
		  /* 821464B8h */ case    3:  		/* addi R10, R10, -1 */
		/* 821464B8h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821464B8h case    3:*/		return 0x821464BC;
	}
	return 0x821464BC;
} // Block from 821464ACh-821464BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821464BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821464BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821464BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821464BC);
		  /* 821464BCh */ case    0:  		/* addi R4, R4, 1 */
		/* 821464BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 821464BCh case    0:*/		return 0x821464C0;
		  /* 821464C0h */ case    1:  		/* addi R11, R11, 1 */
		/* 821464C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821464C0h case    1:*/		return 0x821464C4;
		  /* 821464C4h */ case    2:  		/* cmplw CR6, R4, R31 */
		/* 821464C4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R31);
		/* 821464C4h case    2:*/		return 0x821464C8;
		  /* 821464C8h */ case    3:  		/* bc 12, CR6_LT, -156 */
		/* 821464C8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214642C;  }
		/* 821464C8h case    3:*/		return 0x821464CC;
	}
	return 0x821464CC;
} // Block from 821464BCh-821464CCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821464CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821464CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821464CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821464CC);
		  /* 821464CCh */ case    0:  		/* lwz R11, <#[R3 + 20]> */
		/* 821464CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 821464CCh case    0:*/		return 0x821464D0;
		  /* 821464D0h */ case    1:  		/* subf R11, R10, R11 */
		/* 821464D0h case    1:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821464D0h case    1:*/		return 0x821464D4;
		  /* 821464D4h */ case    2:  		/* stw R11, <#[R3 + 24]> */
		/* 821464D4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 821464D4h case    2:*/		return 0x821464D8;
		  /* 821464D8h */ case    3:  		/* ld R31, <#[R1 - 8]> */
		/* 821464D8h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821464D8h case    3:*/		return 0x821464DC;
		  /* 821464DCh */ case    4:  		/* bclr 20, CR0_LT */
		/* 821464DCh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821464DCh case    4:*/		return 0x821464E0;
	}
	return 0x821464E0;
} // Block from 821464CCh-821464E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821464E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821464E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821464E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821464E0);
		  /* 821464E0h */ case    0:  		/* lis R11, -32768 */
		/* 821464E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 821464E0h case    0:*/		return 0x821464E4;
		  /* 821464E4h */ case    1:  		/* ori R11, R11, 16389 */
		/* 821464E4h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4005);
		/* 821464E4h case    1:*/		return 0x821464E8;
	}
	return 0x821464E8;
} // Block from 821464E0h-821464E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821464E8h
// Function '?StateBlockFunctionCall@CParse@D3DXShader@@IAAPAVCNode@2@PAPAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821464E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821464E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821464E8);
		  /* 821464E8h */ case    0:  		/* stw R11, <#[R3 + 12]> */
		/* 821464E8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821464E8h case    0:*/		return 0x821464EC;
		  /* 821464ECh */ case    1:  		/* b -20 */
		/* 821464ECh case    1:*/		return 0x821464D8;
		/* 821464ECh case    1:*/		return 0x821464F0;
	}
	return 0x821464F0;
} // Block from 821464E8h-821464F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821464F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821464F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821464F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821464F0);
		  /* 821464F0h */ case    0:  		/* mfspr R12, LR */
		/* 821464F0h case    0:*/		regs.R12 = regs.LR;
		/* 821464F0h case    0:*/		return 0x821464F4;
		  /* 821464F4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821464F4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821464F4h case    1:*/		return 0x821464F8;
		  /* 821464F8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821464F8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821464F8h case    2:*/		return 0x821464FC;
		  /* 821464FCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 821464FCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821464FCh case    3:*/		return 0x82146500;
		  /* 82146500h */ case    4:  		/* lwz R11, <#[R3 + 12]> */
		/* 82146500h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82146500h case    4:*/		return 0x82146504;
		  /* 82146504h */ case    5:  		/* mr R31, R3 */
		/* 82146504h case    5:*/		regs.R31 = regs.R3;
		/* 82146504h case    5:*/		return 0x82146508;
		  /* 82146508h */ case    6:  		/* mr R6, R5 */
		/* 82146508h case    6:*/		regs.R6 = regs.R5;
		/* 82146508h case    6:*/		return 0x8214650C;
		  /* 8214650Ch */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 8214650Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214650Ch case    7:*/		return 0x82146510;
		  /* 82146510h */ case    8:  		/* bc 12, CR6_LT, 68 */
		/* 82146510h case    8:*/		if ( regs.CR[6].lt ) { return 0x82146554;  }
		/* 82146510h case    8:*/		return 0x82146514;
		  /* 82146514h */ case    9:  		/* lwz R11, <#[R3 + 24]> */
		/* 82146514h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 82146514h case    9:*/		return 0x82146518;
		  /* 82146518h */ case   10:  		/* mr R5, R4 */
		/* 82146518h case   10:*/		regs.R5 = regs.R4;
		/* 82146518h case   10:*/		return 0x8214651C;
		  /* 8214651Ch */ case   11:  		/* lwz R9, <#[R3 + 20]> */
		/* 8214651Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 8214651Ch case   11:*/		return 0x82146520;
		  /* 82146520h */ case   12:  		/* lwz R10, <#[R3 + 16]> */
		/* 82146520h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 82146520h case   12:*/		return 0x82146524;
		  /* 82146524h */ case   13:  		/* subf R4, R11, R9 */
		/* 82146524h case   13:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R11,regs.R9);
		/* 82146524h case   13:*/		return 0x82146528;
		  /* 82146528h */ case   14:  		/* add R3, R10, R11 */
		/* 82146528h case   14:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82146528h case   14:*/		return 0x8214652C;
		  /* 8214652Ch */ case   15:  		/* bl -701796 */
		/* 8214652Ch case   15:*/		regs.LR = 0x82146530; return 0x8209AFC8;
		/* 8214652Ch case   15:*/		return 0x82146530;
		  /* 82146530h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 82146530h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82146530h case   16:*/		return 0x82146534;
		  /* 82146534h */ case   17:  		/* bc 4, CR0_LT, 20 */
		/* 82146534h case   17:*/		if ( !regs.CR[0].lt ) { return 0x82146548;  }
		/* 82146534h case   17:*/		return 0x82146538;
		  /* 82146538h */ case   18:  		/* lis R11, -32768 */
		/* 82146538h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 82146538h case   18:*/		return 0x8214653C;
		  /* 8214653Ch */ case   19:  		/* ori R11, R11, 16389 */
		/* 8214653Ch case   19:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4005);
		/* 8214653Ch case   19:*/		return 0x82146540;
		  /* 82146540h */ case   20:  		/* stw R11, <#[R31 + 12]> */
		/* 82146540h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82146540h case   20:*/		return 0x82146544;
		  /* 82146544h */ case   21:  		/* b 16 */
		/* 82146544h case   21:*/		return 0x82146554;
		/* 82146544h case   21:*/		return 0x82146548;
	}
	return 0x82146548;
} // Block from 821464F0h-82146548h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82146548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146548);
		  /* 82146548h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 82146548h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82146548h case    0:*/		return 0x8214654C;
		  /* 8214654Ch */ case    1:  		/* add R11, R3, R11 */
		/* 8214654Ch case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8214654Ch case    1:*/		return 0x82146550;
		  /* 82146550h */ case    2:  		/* stw R11, <#[R31 + 24]> */
		/* 82146550h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82146550h case    2:*/		return 0x82146554;
	}
	return 0x82146554;
} // Block from 82146548h-82146554h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146554);
		  /* 82146554h */ case    0:  		/* addi R1, R1, 96 */
		/* 82146554h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82146554h case    0:*/		return 0x82146558;
		  /* 82146558h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82146558h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82146558h case    1:*/		return 0x8214655C;
		  /* 8214655Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8214655Ch case    2:*/		regs.LR = regs.R12;
		/* 8214655Ch case    2:*/		return 0x82146560;
		  /* 82146560h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82146560h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82146560h case    3:*/		return 0x82146564;
		  /* 82146564h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82146564h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82146564h case    4:*/		return 0x82146568;
	}
	return 0x82146568;
} // Block from 82146554h-82146568h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82146568h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146568);
		  /* 82146568h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 82146568h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82146568h case    0:*/		return 0x8214656C;
		  /* 8214656Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8214656Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8214656Ch case    1:*/		return 0x82146570;
		  /* 82146570h */ case    2:  		/* mtspr CTR, R11 */
		/* 82146570h case    2:*/		regs.CTR = regs.R11;
		/* 82146570h case    2:*/		return 0x82146574;
		  /* 82146574h */ case    3:  		/* bcctr 20, CR0_LT */
		/* 82146574h case    3:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82146574h case    3:*/		return 0x82146578;
	}
	return 0x82146578;
} // Block from 82146568h-82146578h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146578h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146578);
		  /* 82146578h */ case    0:  		/* lwz R11, <#[R3 + 128]> */
		/* 82146578h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 82146578h case    0:*/		return 0x8214657C;
		  /* 8214657Ch */ case    1:  		/* li R10, 3 */
		/* 8214657Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8214657Ch case    1:*/		return 0x82146580;
		  /* 82146580h */ case    2:  		/* stw R10, <#[R3 + 148]> */
		/* 82146580h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000094) );
		/* 82146580h case    2:*/		return 0x82146584;
		  /* 82146584h */ case    3:  		/* lwz R10, <#[R11 + 272]> */
		/* 82146584h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000110) );
		/* 82146584h case    3:*/		return 0x82146588;
		  /* 82146588h */ case    4:  		/* cmpwi CR6, R10, -1 */
		/* 82146588h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82146588h case    4:*/		return 0x8214658C;
		  /* 8214658Ch */ case    5:  		/* bclr 4, CR6_EQ */
		/* 8214658Ch case    5:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8214658Ch case    5:*/		return 0x82146590;
	}
	return 0x82146590;
} // Block from 82146578h-82146590h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82146590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146590);
		  /* 82146590h */ case    0:  		/* stw R4, <#[R11 + 272]> */
		/* 82146590h case    0:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000110) );
		/* 82146590h case    0:*/		return 0x82146594;
		  /* 82146594h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82146594h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82146594h case    1:*/		return 0x82146598;
	}
	return 0x82146598;
} // Block from 82146590h-82146598h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82146598h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146598);
		  /* 82146598h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 82146598h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82146598h case    0:*/		return 0x8214659C;
		  /* 8214659Ch */ case    1:  		/* lwz R11, <#[R11 + 8]> */
		/* 8214659Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8214659Ch case    1:*/		return 0x821465A0;
		  /* 821465A0h */ case    2:  		/* mtspr CTR, R11 */
		/* 821465A0h case    2:*/		regs.CTR = regs.R11;
		/* 821465A0h case    2:*/		return 0x821465A4;
		  /* 821465A4h */ case    3:  		/* bcctr 20, CR0_LT */
		/* 821465A4h case    3:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821465A4h case    3:*/		return 0x821465A8;
	}
	return 0x821465A8;
} // Block from 82146598h-821465A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821465A8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821465A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821465A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821465A8);
		  /* 821465A8h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821465A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821465A8h case    0:*/		return 0x821465AC;
		  /* 821465ACh */ case    1:  		/* lwz R11, <#[R11 + 12]> */
		/* 821465ACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821465ACh case    1:*/		return 0x821465B0;
		  /* 821465B0h */ case    2:  		/* mtspr CTR, R11 */
		/* 821465B0h case    2:*/		regs.CTR = regs.R11;
		/* 821465B0h case    2:*/		return 0x821465B4;
		  /* 821465B4h */ case    3:  		/* bcctr 20, CR0_LT */
		/* 821465B4h case    3:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821465B4h case    3:*/		return 0x821465B8;
		  /* 821465B8h */ case    4:  		/* li R11, 1 */
		/* 821465B8h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821465B8h case    4:*/		return 0x821465BC;
		  /* 821465BCh */ case    5:  		/* stw R11, <#[R3 + 116]> */
		/* 821465BCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000074) );
		/* 821465BCh case    5:*/		return 0x821465C0;
		  /* 821465C0h */ case    6:  		/* bclr 20, CR0_LT */
		/* 821465C0h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821465C0h case    6:*/		return 0x821465C4;
	}
	return 0x821465C4;
} // Block from 821465A8h-821465C4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821465C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821465C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821465C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821465C4);
		  /* 821465C4h */ case    0:  		/* nop */
		/* 821465C4h case    0:*/		cpu::op::nop();
		/* 821465C4h case    0:*/		return 0x821465C8;
		  /* 821465C8h */ case    1:  		/* li R11, 1 */
		/* 821465C8h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821465C8h case    1:*/		return 0x821465CC;
		  /* 821465CCh */ case    2:  		/* stw R11, <#[R3 + 124]> */
		/* 821465CCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000007C) );
		/* 821465CCh case    2:*/		return 0x821465D0;
		  /* 821465D0h */ case    3:  		/* bclr 20, CR0_LT */
		/* 821465D0h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821465D0h case    3:*/		return 0x821465D4;
	}
	return 0x821465D4;
} // Block from 821465C4h-821465D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821465D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821465D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821465D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821465D4);
		  /* 821465D4h */ case    0:  		/* nop */
		/* 821465D4h case    0:*/		cpu::op::nop();
		/* 821465D4h case    0:*/		return 0x821465D8;
	}
	return 0x821465D8;
} // Block from 821465D4h-821465D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821465D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821465D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821465D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821465D8);
		  /* 821465D8h */ case    0:  		/* mfspr R12, LR */
		/* 821465D8h case    0:*/		regs.R12 = regs.LR;
		/* 821465D8h case    0:*/		return 0x821465DC;
		  /* 821465DCh */ case    1:  		/* bl -742276 */
		/* 821465DCh case    1:*/		regs.LR = 0x821465E0; return 0x82091258;
		/* 821465DCh case    1:*/		return 0x821465E0;
	}
	return 0x821465E0;
} // Block from 821465D8h-821465E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821465E0h
// Function '?EffectsApiCall@CParse@D3DXShader@@IAAJPAVCNode@2@0PAPAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821465E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821465E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821465E0);
		  /* 821465E0h */ case    0:  		/* stwu R1, <#[R1 - 128]> */
		/* 821465E0h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821465E0h case    0:*/		return 0x821465E4;
		  /* 821465E4h */ case    1:  		/* lwz R11, <#[R3 + 8]> */
		/* 821465E4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821465E4h case    1:*/		return 0x821465E8;
		  /* 821465E8h */ case    2:  		/* mr R31, R3 */
		/* 821465E8h case    2:*/		regs.R31 = regs.R3;
		/* 821465E8h case    2:*/		return 0x821465EC;
		  /* 821465ECh */ case    3:  		/* mr R28, R5 */
		/* 821465ECh case    3:*/		regs.R28 = regs.R5;
		/* 821465ECh case    3:*/		return 0x821465F0;
		  /* 821465F0h */ case    4:  		/* cmplw CR6, R4, R11 */
		/* 821465F0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821465F0h case    4:*/		return 0x821465F4;
		  /* 821465F4h */ case    5:  		/* bc 4, CR6_GT, 104 */
		/* 821465F4h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8214665C;  }
		/* 821465F4h case    5:*/		return 0x821465F8;
		  /* 821465F8h */ case    6:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 821465F8h case    6:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 821465F8h case    6:*/		return 0x821465FC;
		  /* 821465FCh */ case    7:  		/* cmplw CR6, R30, R4 */
		/* 821465FCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 821465FCh case    7:*/		return 0x82146600;
		  /* 82146600h */ case    8:  		/* bc 4, CR6_LT, 8 */
		/* 82146600h case    8:*/		if ( !regs.CR[6].lt ) { return 0x82146608;  }
		/* 82146600h case    8:*/		return 0x82146604;
		  /* 82146604h */ case    9:  		/* mr R30, R4 */
		/* 82146604h case    9:*/		regs.R30 = regs.R4;
		/* 82146604h case    9:*/		return 0x82146608;
	}
	return 0x82146608;
} // Block from 821465E0h-82146608h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82146608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146608);
		  /* 82146608h */ case    0:  		/* rlwinm R4, R30, 4, 0, 27 */
		/* 82146608h case    0:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R4,regs.R30);
		/* 82146608h case    0:*/		return 0x8214660C;
		  /* 8214660Ch */ case    1:  		/* mr R3, R31 */
		/* 8214660Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214660Ch case    1:*/		return 0x82146610;
		  /* 82146610h */ case    2:  		/* bl 51056 */
		/* 82146610h case    2:*/		regs.LR = 0x82146614; return 0x82152D80;
		/* 82146610h case    2:*/		return 0x82146614;
		  /* 82146614h */ case    3:  		/* or. R29, R3, R3 */
		/* 82146614h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82146614h case    3:*/		return 0x82146618;
		  /* 82146618h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 82146618h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214662C;  }
		/* 82146618h case    4:*/		return 0x8214661C;
		  /* 8214661Ch */ case    5:  		/* lis R11, -32761 */
		/* 8214661Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 8214661Ch case    5:*/		return 0x82146620;
		  /* 82146620h */ case    6:  		/* ori R11, R11, 14 */
		/* 82146620h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82146620h case    6:*/		return 0x82146624;
		  /* 82146624h */ case    7:  		/* stw R11, <#[R28]> */
		/* 82146624h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82146624h case    7:*/		return 0x82146628;
		  /* 82146628h */ case    8:  		/* b 52 */
		/* 82146628h case    8:*/		return 0x8214665C;
		/* 82146628h case    8:*/		return 0x8214662C;
	}
	return 0x8214662C;
} // Block from 82146608h-8214662Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214662Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214662C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214662C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214662C);
		  /* 8214662Ch */ case    0:  		/* lwz R4, <#[R31]> */
		/* 8214662Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8214662Ch case    0:*/		return 0x82146630;
		  /* 82146630h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 82146630h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82146630h case    1:*/		return 0x82146634;
		  /* 82146634h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82146634h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82146634h case    2:*/		return 0x82146638;
		  /* 82146638h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82146638h case    3:*/		if ( regs.CR[6].eq ) { return 0x82146658;  }
		/* 82146638h case    3:*/		return 0x8214663C;
		  /* 8214663Ch */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214663Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214663Ch case    4:*/		return 0x82146640;
		  /* 82146640h */ case    5:  		/* mr R3, R29 */
		/* 82146640h case    5:*/		regs.R3 = regs.R29;
		/* 82146640h case    5:*/		return 0x82146644;
		  /* 82146644h */ case    6:  		/* rlwinm R5, R11, 4, 0, 27 */
		/* 82146644h case    6:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R5,regs.R11);
		/* 82146644h case    6:*/		return 0x82146648;
		  /* 82146648h */ case    7:  		/* bl -740504 */
		/* 82146648h case    7:*/		regs.LR = 0x8214664C; return 0x820919B0;
		/* 82146648h case    7:*/		return 0x8214664C;
		  /* 8214664Ch */ case    8:  		/* mr R3, R31 */
		/* 8214664Ch case    8:*/		regs.R3 = regs.R31;
		/* 8214664Ch case    8:*/		return 0x82146650;
		  /* 82146650h */ case    9:  		/* lwz R4, <#[R31]> */
		/* 82146650h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82146650h case    9:*/		return 0x82146654;
		  /* 82146654h */ case   10:  		/* bl 51004 */
		/* 82146654h case   10:*/		regs.LR = 0x82146658; return 0x82152D90;
		/* 82146654h case   10:*/		return 0x82146658;
	}
	return 0x82146658;
} // Block from 8214662Ch-82146658h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82146658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146658);
		  /* 82146658h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82146658h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82146658h case    0:*/		return 0x8214665C;
	}
	return 0x8214665C;
} // Block from 82146658h-8214665Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214665Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214665C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214665C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214665C);
		  /* 8214665Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8214665Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214665Ch case    0:*/		return 0x82146660;
		  /* 82146660h */ case    1:  		/* b -742328 */
		/* 82146660h case    1:*/		return 0x820912A8;
		/* 82146660h case    1:*/		return 0x82146664;
		  /* 82146664h */ case    2:  		/* nop */
		/* 82146664h case    2:*/		cpu::op::nop();
		/* 82146664h case    2:*/		return 0x82146668;
	}
	return 0x82146668;
} // Block from 8214665Ch-82146668h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146668);
		  /* 82146668h */ case    0:  		/* mfspr R12, LR */
		/* 82146668h case    0:*/		regs.R12 = regs.LR;
		/* 82146668h case    0:*/		return 0x8214666C;
		  /* 8214666Ch */ case    1:  		/* bl -742420 */
		/* 8214666Ch case    1:*/		regs.LR = 0x82146670; return 0x82091258;
		/* 8214666Ch case    1:*/		return 0x82146670;
		  /* 82146670h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82146670h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82146670h case    2:*/		return 0x82146674;
		  /* 82146674h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 82146674h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82146674h case    3:*/		return 0x82146678;
		  /* 82146678h */ case    4:  		/* mr R31, R3 */
		/* 82146678h case    4:*/		regs.R31 = regs.R3;
		/* 82146678h case    4:*/		return 0x8214667C;
		  /* 8214667Ch */ case    5:  		/* mr R28, R5 */
		/* 8214667Ch case    5:*/		regs.R28 = regs.R5;
		/* 8214667Ch case    5:*/		return 0x82146680;
		  /* 82146680h */ case    6:  		/* cmplw CR6, R4, R11 */
		/* 82146680h case    6:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82146680h case    6:*/		return 0x82146684;
		  /* 82146684h */ case    7:  		/* bc 4, CR6_GT, 104 */
		/* 82146684h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821466EC;  }
		/* 82146684h case    7:*/		return 0x82146688;
		  /* 82146688h */ case    8:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 82146688h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 82146688h case    8:*/		return 0x8214668C;
		  /* 8214668Ch */ case    9:  		/* cmplw CR6, R30, R4 */
		/* 8214668Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 8214668Ch case    9:*/		return 0x82146690;
		  /* 82146690h */ case   10:  		/* bc 4, CR6_LT, 8 */
		/* 82146690h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82146698;  }
		/* 82146690h case   10:*/		return 0x82146694;
		  /* 82146694h */ case   11:  		/* mr R30, R4 */
		/* 82146694h case   11:*/		regs.R30 = regs.R4;
		/* 82146694h case   11:*/		return 0x82146698;
	}
	return 0x82146698;
} // Block from 82146668h-82146698h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82146698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146698);
		  /* 82146698h */ case    0:  		/* mulli R4, R30, 12 */
		/* 82146698h case    0:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0xC);
		/* 82146698h case    0:*/		return 0x8214669C;
		  /* 8214669Ch */ case    1:  		/* mr R3, R31 */
		/* 8214669Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214669Ch case    1:*/		return 0x821466A0;
		  /* 821466A0h */ case    2:  		/* bl 50912 */
		/* 821466A0h case    2:*/		regs.LR = 0x821466A4; return 0x82152D80;
		/* 821466A0h case    2:*/		return 0x821466A4;
		  /* 821466A4h */ case    3:  		/* or. R29, R3, R3 */
		/* 821466A4h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821466A4h case    3:*/		return 0x821466A8;
		  /* 821466A8h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 821466A8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821466BC;  }
		/* 821466A8h case    4:*/		return 0x821466AC;
		  /* 821466ACh */ case    5:  		/* lis R11, -32761 */
		/* 821466ACh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 821466ACh case    5:*/		return 0x821466B0;
		  /* 821466B0h */ case    6:  		/* ori R11, R11, 14 */
		/* 821466B0h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 821466B0h case    6:*/		return 0x821466B4;
		  /* 821466B4h */ case    7:  		/* stw R11, <#[R28]> */
		/* 821466B4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821466B4h case    7:*/		return 0x821466B8;
		  /* 821466B8h */ case    8:  		/* b 52 */
		/* 821466B8h case    8:*/		return 0x821466EC;
		/* 821466B8h case    8:*/		return 0x821466BC;
	}
	return 0x821466BC;
} // Block from 82146698h-821466BCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821466BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821466BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821466BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821466BC);
		  /* 821466BCh */ case    0:  		/* lwz R4, <#[R31]> */
		/* 821466BCh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821466BCh case    0:*/		return 0x821466C0;
		  /* 821466C0h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 821466C0h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821466C0h case    1:*/		return 0x821466C4;
		  /* 821466C4h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 821466C4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821466C4h case    2:*/		return 0x821466C8;
		  /* 821466C8h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 821466C8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821466E8;  }
		/* 821466C8h case    3:*/		return 0x821466CC;
		  /* 821466CCh */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 821466CCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821466CCh case    4:*/		return 0x821466D0;
		  /* 821466D0h */ case    5:  		/* mr R3, R29 */
		/* 821466D0h case    5:*/		regs.R3 = regs.R29;
		/* 821466D0h case    5:*/		return 0x821466D4;
		  /* 821466D4h */ case    6:  		/* mulli R5, R11, 12 */
		/* 821466D4h case    6:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0xC);
		/* 821466D4h case    6:*/		return 0x821466D8;
		  /* 821466D8h */ case    7:  		/* bl -740648 */
		/* 821466D8h case    7:*/		regs.LR = 0x821466DC; return 0x820919B0;
		/* 821466D8h case    7:*/		return 0x821466DC;
		  /* 821466DCh */ case    8:  		/* lwz R4, <#[R31]> */
		/* 821466DCh case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821466DCh case    8:*/		return 0x821466E0;
		  /* 821466E0h */ case    9:  		/* mr R3, R31 */
		/* 821466E0h case    9:*/		regs.R3 = regs.R31;
		/* 821466E0h case    9:*/		return 0x821466E4;
		  /* 821466E4h */ case   10:  		/* bl 50860 */
		/* 821466E4h case   10:*/		regs.LR = 0x821466E8; return 0x82152D90;
		/* 821466E4h case   10:*/		return 0x821466E8;
	}
	return 0x821466E8;
} // Block from 821466BCh-821466E8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821466E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821466E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821466E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821466E8);
		  /* 821466E8h */ case    0:  		/* stw R29, <#[R31]> */
		/* 821466E8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 821466E8h case    0:*/		return 0x821466EC;
	}
	return 0x821466EC;
} // Block from 821466E8h-821466ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821466ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821466EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821466EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821466EC);
		  /* 821466ECh */ case    0:  		/* addi R1, R1, 128 */
		/* 821466ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821466ECh case    0:*/		return 0x821466F0;
		  /* 821466F0h */ case    1:  		/* b -742472 */
		/* 821466F0h case    1:*/		return 0x820912A8;
		/* 821466F0h case    1:*/		return 0x821466F4;
		  /* 821466F4h */ case    2:  		/* nop */
		/* 821466F4h case    2:*/		cpu::op::nop();
		/* 821466F4h case    2:*/		return 0x821466F8;
	}
	return 0x821466F8;
} // Block from 821466ECh-821466F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821466F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821466F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821466F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821466F8);
		  /* 821466F8h */ case    0:  		/* mfspr R12, LR */
		/* 821466F8h case    0:*/		regs.R12 = regs.LR;
		/* 821466F8h case    0:*/		return 0x821466FC;
		  /* 821466FCh */ case    1:  		/* bl -742564 */
		/* 821466FCh case    1:*/		regs.LR = 0x82146700; return 0x82091258;
		/* 821466FCh case    1:*/		return 0x82146700;
		  /* 82146700h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82146700h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82146700h case    2:*/		return 0x82146704;
		  /* 82146704h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 82146704h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82146704h case    3:*/		return 0x82146708;
		  /* 82146708h */ case    4:  		/* mr R31, R3 */
		/* 82146708h case    4:*/		regs.R31 = regs.R3;
		/* 82146708h case    4:*/		return 0x8214670C;
		  /* 8214670Ch */ case    5:  		/* mr R28, R5 */
		/* 8214670Ch case    5:*/		regs.R28 = regs.R5;
		/* 8214670Ch case    5:*/		return 0x82146710;
		  /* 82146710h */ case    6:  		/* cmplw CR6, R4, R11 */
		/* 82146710h case    6:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82146710h case    6:*/		return 0x82146714;
		  /* 82146714h */ case    7:  		/* bc 4, CR6_GT, 104 */
		/* 82146714h case    7:*/		if ( !regs.CR[6].gt ) { return 0x8214677C;  }
		/* 82146714h case    7:*/		return 0x82146718;
		  /* 82146718h */ case    8:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 82146718h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 82146718h case    8:*/		return 0x8214671C;
		  /* 8214671Ch */ case    9:  		/* cmplw CR6, R30, R4 */
		/* 8214671Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 8214671Ch case    9:*/		return 0x82146720;
		  /* 82146720h */ case   10:  		/* bc 4, CR6_LT, 8 */
		/* 82146720h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82146728;  }
		/* 82146720h case   10:*/		return 0x82146724;
		  /* 82146724h */ case   11:  		/* mr R30, R4 */
		/* 82146724h case   11:*/		regs.R30 = regs.R4;
		/* 82146724h case   11:*/		return 0x82146728;
	}
	return 0x82146728;
} // Block from 821466F8h-82146728h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82146728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146728);
		  /* 82146728h */ case    0:  		/* rlwinm R4, R30, 1, 0, 30 */
		/* 82146728h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R30);
		/* 82146728h case    0:*/		return 0x8214672C;
		  /* 8214672Ch */ case    1:  		/* mr R3, R31 */
		/* 8214672Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214672Ch case    1:*/		return 0x82146730;
		  /* 82146730h */ case    2:  		/* bl 50768 */
		/* 82146730h case    2:*/		regs.LR = 0x82146734; return 0x82152D80;
		/* 82146730h case    2:*/		return 0x82146734;
		  /* 82146734h */ case    3:  		/* or. R29, R3, R3 */
		/* 82146734h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82146734h case    3:*/		return 0x82146738;
		  /* 82146738h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 82146738h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214674C;  }
		/* 82146738h case    4:*/		return 0x8214673C;
		  /* 8214673Ch */ case    5:  		/* lis R11, -32761 */
		/* 8214673Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 8214673Ch case    5:*/		return 0x82146740;
		  /* 82146740h */ case    6:  		/* ori R11, R11, 14 */
		/* 82146740h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82146740h case    6:*/		return 0x82146744;
		  /* 82146744h */ case    7:  		/* stw R11, <#[R28]> */
		/* 82146744h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82146744h case    7:*/		return 0x82146748;
		  /* 82146748h */ case    8:  		/* b 52 */
		/* 82146748h case    8:*/		return 0x8214677C;
		/* 82146748h case    8:*/		return 0x8214674C;
	}
	return 0x8214674C;
} // Block from 82146728h-8214674Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214674Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214674C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214674C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214674C);
		  /* 8214674Ch */ case    0:  		/* lwz R4, <#[R31]> */
		/* 8214674Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8214674Ch case    0:*/		return 0x82146750;
		  /* 82146750h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 82146750h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82146750h case    1:*/		return 0x82146754;
		  /* 82146754h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82146754h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82146754h case    2:*/		return 0x82146758;
		  /* 82146758h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82146758h case    3:*/		if ( regs.CR[6].eq ) { return 0x82146778;  }
		/* 82146758h case    3:*/		return 0x8214675C;
		  /* 8214675Ch */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214675Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214675Ch case    4:*/		return 0x82146760;
		  /* 82146760h */ case    5:  		/* mr R3, R29 */
		/* 82146760h case    5:*/		regs.R3 = regs.R29;
		/* 82146760h case    5:*/		return 0x82146764;
		  /* 82146764h */ case    6:  		/* rlwinm R5, R11, 1, 0, 30 */
		/* 82146764h case    6:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R11);
		/* 82146764h case    6:*/		return 0x82146768;
		  /* 82146768h */ case    7:  		/* bl -740792 */
		/* 82146768h case    7:*/		regs.LR = 0x8214676C; return 0x820919B0;
		/* 82146768h case    7:*/		return 0x8214676C;
		  /* 8214676Ch */ case    8:  		/* mr R3, R31 */
		/* 8214676Ch case    8:*/		regs.R3 = regs.R31;
		/* 8214676Ch case    8:*/		return 0x82146770;
		  /* 82146770h */ case    9:  		/* lwz R4, <#[R31]> */
		/* 82146770h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82146770h case    9:*/		return 0x82146774;
		  /* 82146774h */ case   10:  		/* bl 50716 */
		/* 82146774h case   10:*/		regs.LR = 0x82146778; return 0x82152D90;
		/* 82146774h case   10:*/		return 0x82146778;
	}
	return 0x82146778;
} // Block from 8214674Ch-82146778h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82146778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146778);
		  /* 82146778h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82146778h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82146778h case    0:*/		return 0x8214677C;
	}
	return 0x8214677C;
} // Block from 82146778h-8214677Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214677Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214677C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214677C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214677C);
		  /* 8214677Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8214677Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214677Ch case    0:*/		return 0x82146780;
		  /* 82146780h */ case    1:  		/* b -742616 */
		/* 82146780h case    1:*/		return 0x820912A8;
		/* 82146780h case    1:*/		return 0x82146784;
		  /* 82146784h */ case    2:  		/* nop */
		/* 82146784h case    2:*/		cpu::op::nop();
		/* 82146784h case    2:*/		return 0x82146788;
	}
	return 0x82146788;
} // Block from 8214677Ch-82146788h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146788);
		  /* 82146788h */ case    0:  		/* mfspr R12, LR */
		/* 82146788h case    0:*/		regs.R12 = regs.LR;
		/* 82146788h case    0:*/		return 0x8214678C;
		  /* 8214678Ch */ case    1:  		/* bl -742708 */
		/* 8214678Ch case    1:*/		regs.LR = 0x82146790; return 0x82091258;
		/* 8214678Ch case    1:*/		return 0x82146790;
		  /* 82146790h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82146790h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82146790h case    2:*/		return 0x82146794;
		  /* 82146794h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 82146794h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82146794h case    3:*/		return 0x82146798;
		  /* 82146798h */ case    4:  		/* mr R31, R3 */
		/* 82146798h case    4:*/		regs.R31 = regs.R3;
		/* 82146798h case    4:*/		return 0x8214679C;
		  /* 8214679Ch */ case    5:  		/* mr R28, R5 */
		/* 8214679Ch case    5:*/		regs.R28 = regs.R5;
		/* 8214679Ch case    5:*/		return 0x821467A0;
		  /* 821467A0h */ case    6:  		/* cmplw CR6, R4, R11 */
		/* 821467A0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821467A0h case    6:*/		return 0x821467A4;
		  /* 821467A4h */ case    7:  		/* bc 4, CR6_GT, 104 */
		/* 821467A4h case    7:*/		if ( !regs.CR[6].gt ) { return 0x8214680C;  }
		/* 821467A4h case    7:*/		return 0x821467A8;
	}
	return 0x821467A8;
} // Block from 82146788h-821467A8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821467A8h
// Function 'XGOffsetBaseTextureAddress'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821467A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821467A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821467A8);
		  /* 821467A8h */ case    0:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 821467A8h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 821467A8h case    0:*/		return 0x821467AC;
		  /* 821467ACh */ case    1:  		/* cmplw CR6, R30, R4 */
		/* 821467ACh case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 821467ACh case    1:*/		return 0x821467B0;
		  /* 821467B0h */ case    2:  		/* bc 4, CR6_LT, 8 */
		/* 821467B0h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821467B8;  }
		/* 821467B0h case    2:*/		return 0x821467B4;
		  /* 821467B4h */ case    3:  		/* mr R30, R4 */
		/* 821467B4h case    3:*/		regs.R30 = regs.R4;
		/* 821467B4h case    3:*/		return 0x821467B8;
	}
	return 0x821467B8;
} // Block from 821467A8h-821467B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821467B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821467B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821467B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821467B8);
		  /* 821467B8h */ case    0:  		/* mulli R4, R30, 20 */
		/* 821467B8h case    0:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x14);
		/* 821467B8h case    0:*/		return 0x821467BC;
		  /* 821467BCh */ case    1:  		/* mr R3, R31 */
		/* 821467BCh case    1:*/		regs.R3 = regs.R31;
		/* 821467BCh case    1:*/		return 0x821467C0;
		  /* 821467C0h */ case    2:  		/* bl 50624 */
		/* 821467C0h case    2:*/		regs.LR = 0x821467C4; return 0x82152D80;
		/* 821467C0h case    2:*/		return 0x821467C4;
		  /* 821467C4h */ case    3:  		/* or. R29, R3, R3 */
		/* 821467C4h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821467C4h case    3:*/		return 0x821467C8;
		  /* 821467C8h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 821467C8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821467DC;  }
		/* 821467C8h case    4:*/		return 0x821467CC;
		  /* 821467CCh */ case    5:  		/* lis R11, -32761 */
		/* 821467CCh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 821467CCh case    5:*/		return 0x821467D0;
		  /* 821467D0h */ case    6:  		/* ori R11, R11, 14 */
		/* 821467D0h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 821467D0h case    6:*/		return 0x821467D4;
		  /* 821467D4h */ case    7:  		/* stw R11, <#[R28]> */
		/* 821467D4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821467D4h case    7:*/		return 0x821467D8;
		  /* 821467D8h */ case    8:  		/* b 52 */
		/* 821467D8h case    8:*/		return 0x8214680C;
		/* 821467D8h case    8:*/		return 0x821467DC;
	}
	return 0x821467DC;
} // Block from 821467B8h-821467DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821467DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821467DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821467DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821467DC);
		  /* 821467DCh */ case    0:  		/* lwz R4, <#[R31]> */
		/* 821467DCh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821467DCh case    0:*/		return 0x821467E0;
		  /* 821467E0h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 821467E0h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821467E0h case    1:*/		return 0x821467E4;
		  /* 821467E4h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 821467E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821467E4h case    2:*/		return 0x821467E8;
		  /* 821467E8h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 821467E8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82146808;  }
		/* 821467E8h case    3:*/		return 0x821467EC;
		  /* 821467ECh */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 821467ECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821467ECh case    4:*/		return 0x821467F0;
		  /* 821467F0h */ case    5:  		/* mr R3, R29 */
		/* 821467F0h case    5:*/		regs.R3 = regs.R29;
		/* 821467F0h case    5:*/		return 0x821467F4;
		  /* 821467F4h */ case    6:  		/* mulli R5, R11, 20 */
		/* 821467F4h case    6:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x14);
		/* 821467F4h case    6:*/		return 0x821467F8;
		  /* 821467F8h */ case    7:  		/* bl -740936 */
		/* 821467F8h case    7:*/		regs.LR = 0x821467FC; return 0x820919B0;
		/* 821467F8h case    7:*/		return 0x821467FC;
		  /* 821467FCh */ case    8:  		/* lwz R4, <#[R31]> */
		/* 821467FCh case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821467FCh case    8:*/		return 0x82146800;
		  /* 82146800h */ case    9:  		/* mr R3, R31 */
		/* 82146800h case    9:*/		regs.R3 = regs.R31;
		/* 82146800h case    9:*/		return 0x82146804;
		  /* 82146804h */ case   10:  		/* bl 50572 */
		/* 82146804h case   10:*/		regs.LR = 0x82146808; return 0x82152D90;
		/* 82146804h case   10:*/		return 0x82146808;
	}
	return 0x82146808;
} // Block from 821467DCh-82146808h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82146808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146808);
		  /* 82146808h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82146808h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82146808h case    0:*/		return 0x8214680C;
	}
	return 0x8214680C;
} // Block from 82146808h-8214680Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214680Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214680C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214680C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214680C);
		  /* 8214680Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8214680Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214680Ch case    0:*/		return 0x82146810;
	}
	return 0x82146810;
} // Block from 8214680Ch-82146810h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146810h
// Function 'XGOffsetResourceAddress'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146810);
		  /* 82146810h */ case    0:  		/* b -742760 */
		/* 82146810h case    0:*/		return 0x820912A8;
		/* 82146810h case    0:*/		return 0x82146814;
		  /* 82146814h */ case    1:  		/* nop */
		/* 82146814h case    1:*/		cpu::op::nop();
		/* 82146814h case    1:*/		return 0x82146818;
	}
	return 0x82146818;
} // Block from 82146810h-82146818h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82146818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146818);
		  /* 82146818h */ case    0:  		/* mfspr R12, LR */
		/* 82146818h case    0:*/		regs.R12 = regs.LR;
		/* 82146818h case    0:*/		return 0x8214681C;
		  /* 8214681Ch */ case    1:  		/* bl -742852 */
		/* 8214681Ch case    1:*/		regs.LR = 0x82146820; return 0x82091258;
		/* 8214681Ch case    1:*/		return 0x82146820;
		  /* 82146820h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82146820h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82146820h case    2:*/		return 0x82146824;
		  /* 82146824h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 82146824h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82146824h case    3:*/		return 0x82146828;
		  /* 82146828h */ case    4:  		/* mr R31, R3 */
		/* 82146828h case    4:*/		regs.R31 = regs.R3;
		/* 82146828h case    4:*/		return 0x8214682C;
		  /* 8214682Ch */ case    5:  		/* mr R28, R5 */
		/* 8214682Ch case    5:*/		regs.R28 = regs.R5;
		/* 8214682Ch case    5:*/		return 0x82146830;
		  /* 82146830h */ case    6:  		/* cmplw CR6, R4, R11 */
		/* 82146830h case    6:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82146830h case    6:*/		return 0x82146834;
		  /* 82146834h */ case    7:  		/* bc 4, CR6_GT, 104 */
		/* 82146834h case    7:*/		if ( !regs.CR[6].gt ) { return 0x8214689C;  }
		/* 82146834h case    7:*/		return 0x82146838;
		  /* 82146838h */ case    8:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 82146838h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 82146838h case    8:*/		return 0x8214683C;
		  /* 8214683Ch */ case    9:  		/* cmplw CR6, R30, R4 */
		/* 8214683Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 8214683Ch case    9:*/		return 0x82146840;
		  /* 82146840h */ case   10:  		/* bc 4, CR6_LT, 8 */
		/* 82146840h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82146848;  }
		/* 82146840h case   10:*/		return 0x82146844;
		  /* 82146844h */ case   11:  		/* mr R30, R4 */
		/* 82146844h case   11:*/		regs.R30 = regs.R4;
		/* 82146844h case   11:*/		return 0x82146848;
	}
	return 0x82146848;
} // Block from 82146818h-82146848h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82146848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146848);
		  /* 82146848h */ case    0:  		/* mulli R4, R30, 28 */
		/* 82146848h case    0:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x1C);
		/* 82146848h case    0:*/		return 0x8214684C;
		  /* 8214684Ch */ case    1:  		/* mr R3, R31 */
		/* 8214684Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214684Ch case    1:*/		return 0x82146850;
		  /* 82146850h */ case    2:  		/* bl 50480 */
		/* 82146850h case    2:*/		regs.LR = 0x82146854; return 0x82152D80;
		/* 82146850h case    2:*/		return 0x82146854;
		  /* 82146854h */ case    3:  		/* or. R29, R3, R3 */
		/* 82146854h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82146854h case    3:*/		return 0x82146858;
		  /* 82146858h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 82146858h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214686C;  }
		/* 82146858h case    4:*/		return 0x8214685C;
		  /* 8214685Ch */ case    5:  		/* lis R11, -32761 */
		/* 8214685Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 8214685Ch case    5:*/		return 0x82146860;
		  /* 82146860h */ case    6:  		/* ori R11, R11, 14 */
		/* 82146860h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82146860h case    6:*/		return 0x82146864;
		  /* 82146864h */ case    7:  		/* stw R11, <#[R28]> */
		/* 82146864h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82146864h case    7:*/		return 0x82146868;
		  /* 82146868h */ case    8:  		/* b 52 */
		/* 82146868h case    8:*/		return 0x8214689C;
		/* 82146868h case    8:*/		return 0x8214686C;
	}
	return 0x8214686C;
} // Block from 82146848h-8214686Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214686Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214686C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214686C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214686C);
		  /* 8214686Ch */ case    0:  		/* lwz R4, <#[R31]> */
		/* 8214686Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8214686Ch case    0:*/		return 0x82146870;
		  /* 82146870h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 82146870h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82146870h case    1:*/		return 0x82146874;
		  /* 82146874h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82146874h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82146874h case    2:*/		return 0x82146878;
		  /* 82146878h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82146878h case    3:*/		if ( regs.CR[6].eq ) { return 0x82146898;  }
		/* 82146878h case    3:*/		return 0x8214687C;
		  /* 8214687Ch */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214687Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214687Ch case    4:*/		return 0x82146880;
		  /* 82146880h */ case    5:  		/* mr R3, R29 */
		/* 82146880h case    5:*/		regs.R3 = regs.R29;
		/* 82146880h case    5:*/		return 0x82146884;
		  /* 82146884h */ case    6:  		/* mulli R5, R11, 28 */
		/* 82146884h case    6:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x1C);
		/* 82146884h case    6:*/		return 0x82146888;
		  /* 82146888h */ case    7:  		/* bl -741080 */
		/* 82146888h case    7:*/		regs.LR = 0x8214688C; return 0x820919B0;
		/* 82146888h case    7:*/		return 0x8214688C;
		  /* 8214688Ch */ case    8:  		/* lwz R4, <#[R31]> */
		/* 8214688Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8214688Ch case    8:*/		return 0x82146890;
		  /* 82146890h */ case    9:  		/* mr R3, R31 */
		/* 82146890h case    9:*/		regs.R3 = regs.R31;
		/* 82146890h case    9:*/		return 0x82146894;
		  /* 82146894h */ case   10:  		/* bl 50428 */
		/* 82146894h case   10:*/		regs.LR = 0x82146898; return 0x82152D90;
		/* 82146894h case   10:*/		return 0x82146898;
	}
	return 0x82146898;
} // Block from 8214686Ch-82146898h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82146898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146898);
		  /* 82146898h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82146898h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82146898h case    0:*/		return 0x8214689C;
	}
	return 0x8214689C;
} // Block from 82146898h-8214689Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214689Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214689C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214689C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214689C);
		  /* 8214689Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8214689Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214689Ch case    0:*/		return 0x821468A0;
		  /* 821468A0h */ case    1:  		/* b -742904 */
		/* 821468A0h case    1:*/		return 0x820912A8;
		/* 821468A0h case    1:*/		return 0x821468A4;
		  /* 821468A4h */ case    2:  		/* nop */
		/* 821468A4h case    2:*/		cpu::op::nop();
		/* 821468A4h case    2:*/		return 0x821468A8;
	}
	return 0x821468A8;
} // Block from 8214689Ch-821468A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821468A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821468A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821468A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821468A8);
		  /* 821468A8h */ case    0:  		/* mfspr R12, LR */
		/* 821468A8h case    0:*/		regs.R12 = regs.LR;
		/* 821468A8h case    0:*/		return 0x821468AC;
		  /* 821468ACh */ case    1:  		/* bl -742996 */
		/* 821468ACh case    1:*/		regs.LR = 0x821468B0; return 0x82091258;
		/* 821468ACh case    1:*/		return 0x821468B0;
		  /* 821468B0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821468B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821468B0h case    2:*/		return 0x821468B4;
		  /* 821468B4h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 821468B4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821468B4h case    3:*/		return 0x821468B8;
		  /* 821468B8h */ case    4:  		/* mr R31, R3 */
		/* 821468B8h case    4:*/		regs.R31 = regs.R3;
		/* 821468B8h case    4:*/		return 0x821468BC;
		  /* 821468BCh */ case    5:  		/* mr R28, R5 */
		/* 821468BCh case    5:*/		regs.R28 = regs.R5;
		/* 821468BCh case    5:*/		return 0x821468C0;
		  /* 821468C0h */ case    6:  		/* cmplw CR6, R4, R11 */
		/* 821468C0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821468C0h case    6:*/		return 0x821468C4;
		  /* 821468C4h */ case    7:  		/* bc 4, CR6_GT, 104 */
		/* 821468C4h case    7:*/		if ( !regs.CR[6].gt ) { return 0x8214692C;  }
		/* 821468C4h case    7:*/		return 0x821468C8;
		  /* 821468C8h */ case    8:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 821468C8h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 821468C8h case    8:*/		return 0x821468CC;
		  /* 821468CCh */ case    9:  		/* cmplw CR6, R30, R4 */
		/* 821468CCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 821468CCh case    9:*/		return 0x821468D0;
		  /* 821468D0h */ case   10:  		/* bc 4, CR6_LT, 8 */
		/* 821468D0h case   10:*/		if ( !regs.CR[6].lt ) { return 0x821468D8;  }
		/* 821468D0h case   10:*/		return 0x821468D4;
		  /* 821468D4h */ case   11:  		/* mr R30, R4 */
		/* 821468D4h case   11:*/		regs.R30 = regs.R4;
		/* 821468D4h case   11:*/		return 0x821468D8;
	}
	return 0x821468D8;
} // Block from 821468A8h-821468D8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821468D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821468D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821468D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821468D8);
		  /* 821468D8h */ case    0:  		/* mulli R4, R30, 24 */
		/* 821468D8h case    0:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x18);
		/* 821468D8h case    0:*/		return 0x821468DC;
		  /* 821468DCh */ case    1:  		/* mr R3, R31 */
		/* 821468DCh case    1:*/		regs.R3 = regs.R31;
		/* 821468DCh case    1:*/		return 0x821468E0;
		  /* 821468E0h */ case    2:  		/* bl 50336 */
		/* 821468E0h case    2:*/		regs.LR = 0x821468E4; return 0x82152D80;
		/* 821468E0h case    2:*/		return 0x821468E4;
		  /* 821468E4h */ case    3:  		/* or. R29, R3, R3 */
		/* 821468E4h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821468E4h case    3:*/		return 0x821468E8;
	}
	return 0x821468E8;
} // Block from 821468D8h-821468E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821468E8h
// Function '?Indent@Stream@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821468E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821468E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821468E8);
		  /* 821468E8h */ case    0:  		/* bc 4, CR0_EQ, 20 */
		/* 821468E8h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821468FC;  }
		/* 821468E8h case    0:*/		return 0x821468EC;
		  /* 821468ECh */ case    1:  		/* lis R11, -32761 */
		/* 821468ECh case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 821468ECh case    1:*/		return 0x821468F0;
		  /* 821468F0h */ case    2:  		/* ori R11, R11, 14 */
		/* 821468F0h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 821468F0h case    2:*/		return 0x821468F4;
		  /* 821468F4h */ case    3:  		/* stw R11, <#[R28]> */
		/* 821468F4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821468F4h case    3:*/		return 0x821468F8;
		  /* 821468F8h */ case    4:  		/* b 52 */
		/* 821468F8h case    4:*/		return 0x8214692C;
		/* 821468F8h case    4:*/		return 0x821468FC;
	}
	return 0x821468FC;
} // Block from 821468E8h-821468FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821468FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821468FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821468FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821468FC);
		  /* 821468FCh */ case    0:  		/* lwz R4, <#[R31]> */
		/* 821468FCh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821468FCh case    0:*/		return 0x82146900;
		  /* 82146900h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 82146900h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82146900h case    1:*/		return 0x82146904;
		  /* 82146904h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82146904h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82146904h case    2:*/		return 0x82146908;
		  /* 82146908h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82146908h case    3:*/		if ( regs.CR[6].eq ) { return 0x82146928;  }
		/* 82146908h case    3:*/		return 0x8214690C;
		  /* 8214690Ch */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214690Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214690Ch case    4:*/		return 0x82146910;
		  /* 82146910h */ case    5:  		/* mr R3, R29 */
		/* 82146910h case    5:*/		regs.R3 = regs.R29;
		/* 82146910h case    5:*/		return 0x82146914;
		  /* 82146914h */ case    6:  		/* mulli R5, R11, 24 */
		/* 82146914h case    6:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x18);
		/* 82146914h case    6:*/		return 0x82146918;
		  /* 82146918h */ case    7:  		/* bl -741224 */
		/* 82146918h case    7:*/		regs.LR = 0x8214691C; return 0x820919B0;
		/* 82146918h case    7:*/		return 0x8214691C;
		  /* 8214691Ch */ case    8:  		/* lwz R4, <#[R31]> */
		/* 8214691Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8214691Ch case    8:*/		return 0x82146920;
		  /* 82146920h */ case    9:  		/* mr R3, R31 */
		/* 82146920h case    9:*/		regs.R3 = regs.R31;
		/* 82146920h case    9:*/		return 0x82146924;
		  /* 82146924h */ case   10:  		/* bl 50284 */
		/* 82146924h case   10:*/		regs.LR = 0x82146928; return 0x82152D90;
		/* 82146924h case   10:*/		return 0x82146928;
	}
	return 0x82146928;
} // Block from 821468FCh-82146928h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82146928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146928);
		  /* 82146928h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82146928h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82146928h case    0:*/		return 0x8214692C;
	}
	return 0x8214692C;
} // Block from 82146928h-8214692Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214692Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214692C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214692C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214692C);
		  /* 8214692Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8214692Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214692Ch case    0:*/		return 0x82146930;
		  /* 82146930h */ case    1:  		/* b -743048 */
		/* 82146930h case    1:*/		return 0x820912A8;
		/* 82146930h case    1:*/		return 0x82146934;
		  /* 82146934h */ case    2:  		/* nop */
		/* 82146934h case    2:*/		cpu::op::nop();
		/* 82146934h case    2:*/		return 0x82146938;
	}
	return 0x82146938;
} // Block from 8214692Ch-82146938h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146938);
		  /* 82146938h */ case    0:  		/* mfspr R12, LR */
		/* 82146938h case    0:*/		regs.R12 = regs.LR;
		/* 82146938h case    0:*/		return 0x8214693C;
		  /* 8214693Ch */ case    1:  		/* bl -743140 */
		/* 8214693Ch case    1:*/		regs.LR = 0x82146940; return 0x82091258;
		/* 8214693Ch case    1:*/		return 0x82146940;
		  /* 82146940h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82146940h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82146940h case    2:*/		return 0x82146944;
		  /* 82146944h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 82146944h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82146944h case    3:*/		return 0x82146948;
	}
	return 0x82146948;
} // Block from 82146938h-82146948h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146948h
// Function '?EndChildren@Stream@XGRAPHICS@@QAAXPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146948);
		  /* 82146948h */ case    0:  		/* mr R31, R3 */
		/* 82146948h case    0:*/		regs.R31 = regs.R3;
		/* 82146948h case    0:*/		return 0x8214694C;
		  /* 8214694Ch */ case    1:  		/* mr R28, R5 */
		/* 8214694Ch case    1:*/		regs.R28 = regs.R5;
		/* 8214694Ch case    1:*/		return 0x82146950;
		  /* 82146950h */ case    2:  		/* cmplw CR6, R4, R11 */
		/* 82146950h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82146950h case    2:*/		return 0x82146954;
		  /* 82146954h */ case    3:  		/* bc 4, CR6_GT, 104 */
		/* 82146954h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821469BC;  }
		/* 82146954h case    3:*/		return 0x82146958;
		  /* 82146958h */ case    4:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 82146958h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 82146958h case    4:*/		return 0x8214695C;
		  /* 8214695Ch */ case    5:  		/* cmplw CR6, R30, R4 */
		/* 8214695Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 8214695Ch case    5:*/		return 0x82146960;
		  /* 82146960h */ case    6:  		/* bc 4, CR6_LT, 8 */
		/* 82146960h case    6:*/		if ( !regs.CR[6].lt ) { return 0x82146968;  }
		/* 82146960h case    6:*/		return 0x82146964;
		  /* 82146964h */ case    7:  		/* mr R30, R4 */
		/* 82146964h case    7:*/		regs.R30 = regs.R4;
		/* 82146964h case    7:*/		return 0x82146968;
	}
	return 0x82146968;
} // Block from 82146948h-82146968h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82146968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146968);
		  /* 82146968h */ case    0:  		/* mulli R4, R30, 276 */
		/* 82146968h case    0:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x114);
		/* 82146968h case    0:*/		return 0x8214696C;
		  /* 8214696Ch */ case    1:  		/* mr R3, R31 */
		/* 8214696Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214696Ch case    1:*/		return 0x82146970;
		  /* 82146970h */ case    2:  		/* bl 50192 */
		/* 82146970h case    2:*/		regs.LR = 0x82146974; return 0x82152D80;
		/* 82146970h case    2:*/		return 0x82146974;
		  /* 82146974h */ case    3:  		/* or. R29, R3, R3 */
		/* 82146974h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82146974h case    3:*/		return 0x82146978;
		  /* 82146978h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 82146978h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214698C;  }
		/* 82146978h case    4:*/		return 0x8214697C;
		  /* 8214697Ch */ case    5:  		/* lis R11, -32761 */
		/* 8214697Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 8214697Ch case    5:*/		return 0x82146980;
		  /* 82146980h */ case    6:  		/* ori R11, R11, 14 */
		/* 82146980h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82146980h case    6:*/		return 0x82146984;
		  /* 82146984h */ case    7:  		/* stw R11, <#[R28]> */
		/* 82146984h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82146984h case    7:*/		return 0x82146988;
		  /* 82146988h */ case    8:  		/* b 52 */
		/* 82146988h case    8:*/		return 0x821469BC;
		/* 82146988h case    8:*/		return 0x8214698C;
	}
	return 0x8214698C;
} // Block from 82146968h-8214698Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214698Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214698C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214698C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214698C);
		  /* 8214698Ch */ case    0:  		/* lwz R4, <#[R31]> */
		/* 8214698Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8214698Ch case    0:*/		return 0x82146990;
		  /* 82146990h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 82146990h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82146990h case    1:*/		return 0x82146994;
		  /* 82146994h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82146994h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82146994h case    2:*/		return 0x82146998;
		  /* 82146998h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82146998h case    3:*/		if ( regs.CR[6].eq ) { return 0x821469B8;  }
		/* 82146998h case    3:*/		return 0x8214699C;
		  /* 8214699Ch */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214699Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214699Ch case    4:*/		return 0x821469A0;
		  /* 821469A0h */ case    5:  		/* mr R3, R29 */
		/* 821469A0h case    5:*/		regs.R3 = regs.R29;
		/* 821469A0h case    5:*/		return 0x821469A4;
		  /* 821469A4h */ case    6:  		/* mulli R5, R11, 276 */
		/* 821469A4h case    6:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x114);
		/* 821469A4h case    6:*/		return 0x821469A8;
		  /* 821469A8h */ case    7:  		/* bl -741368 */
		/* 821469A8h case    7:*/		regs.LR = 0x821469AC; return 0x820919B0;
		/* 821469A8h case    7:*/		return 0x821469AC;
		  /* 821469ACh */ case    8:  		/* lwz R4, <#[R31]> */
		/* 821469ACh case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821469ACh case    8:*/		return 0x821469B0;
		  /* 821469B0h */ case    9:  		/* mr R3, R31 */
		/* 821469B0h case    9:*/		regs.R3 = regs.R31;
		/* 821469B0h case    9:*/		return 0x821469B4;
		  /* 821469B4h */ case   10:  		/* bl 50140 */
		/* 821469B4h case   10:*/		regs.LR = 0x821469B8; return 0x82152D90;
		/* 821469B4h case   10:*/		return 0x821469B8;
	}
	return 0x821469B8;
} // Block from 8214698Ch-821469B8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821469B8h
// Function '?EndChildrenBinary@Stream@XGRAPHICS@@QAAXPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821469B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821469B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821469B8);
		  /* 821469B8h */ case    0:  		/* stw R29, <#[R31]> */
		/* 821469B8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 821469B8h case    0:*/		return 0x821469BC;
	}
	return 0x821469BC;
} // Block from 821469B8h-821469BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821469BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821469BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821469BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821469BC);
		  /* 821469BCh */ case    0:  		/* addi R1, R1, 128 */
		/* 821469BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821469BCh case    0:*/		return 0x821469C0;
		  /* 821469C0h */ case    1:  		/* b -743192 */
		/* 821469C0h case    1:*/		return 0x820912A8;
		/* 821469C0h case    1:*/		return 0x821469C4;
		  /* 821469C4h */ case    2:  		/* nop */
		/* 821469C4h case    2:*/		cpu::op::nop();
		/* 821469C4h case    2:*/		return 0x821469C8;
	}
	return 0x821469C8;
} // Block from 821469BCh-821469C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821469C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821469C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821469C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821469C8);
		  /* 821469C8h */ case    0:  		/* mfspr R12, LR */
		/* 821469C8h case    0:*/		regs.R12 = regs.LR;
		/* 821469C8h case    0:*/		return 0x821469CC;
		  /* 821469CCh */ case    1:  		/* bl -743284 */
		/* 821469CCh case    1:*/		regs.LR = 0x821469D0; return 0x82091258;
		/* 821469CCh case    1:*/		return 0x821469D0;
		  /* 821469D0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821469D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821469D0h case    2:*/		return 0x821469D4;
		  /* 821469D4h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 821469D4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821469D4h case    3:*/		return 0x821469D8;
		  /* 821469D8h */ case    4:  		/* mr R31, R3 */
		/* 821469D8h case    4:*/		regs.R31 = regs.R3;
		/* 821469D8h case    4:*/		return 0x821469DC;
		  /* 821469DCh */ case    5:  		/* mr R28, R5 */
		/* 821469DCh case    5:*/		regs.R28 = regs.R5;
		/* 821469DCh case    5:*/		return 0x821469E0;
		  /* 821469E0h */ case    6:  		/* cmplw CR6, R4, R11 */
		/* 821469E0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821469E0h case    6:*/		return 0x821469E4;
		  /* 821469E4h */ case    7:  		/* bc 4, CR6_GT, 104 */
		/* 821469E4h case    7:*/		if ( !regs.CR[6].gt ) { return 0x82146A4C;  }
		/* 821469E4h case    7:*/		return 0x821469E8;
		  /* 821469E8h */ case    8:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 821469E8h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 821469E8h case    8:*/		return 0x821469EC;
		  /* 821469ECh */ case    9:  		/* cmplw CR6, R30, R4 */
		/* 821469ECh case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 821469ECh case    9:*/		return 0x821469F0;
		  /* 821469F0h */ case   10:  		/* bc 4, CR6_LT, 8 */
		/* 821469F0h case   10:*/		if ( !regs.CR[6].lt ) { return 0x821469F8;  }
		/* 821469F0h case   10:*/		return 0x821469F4;
		  /* 821469F4h */ case   11:  		/* mr R30, R4 */
		/* 821469F4h case   11:*/		regs.R30 = regs.R4;
		/* 821469F4h case   11:*/		return 0x821469F8;
	}
	return 0x821469F8;
} // Block from 821469C8h-821469F8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821469F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821469F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821469F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821469F8);
		  /* 821469F8h */ case    0:  		/* mulli R4, R30, 476 */
		/* 821469F8h case    0:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x1DC);
		/* 821469F8h case    0:*/		return 0x821469FC;
		  /* 821469FCh */ case    1:  		/* mr R3, R31 */
		/* 821469FCh case    1:*/		regs.R3 = regs.R31;
		/* 821469FCh case    1:*/		return 0x82146A00;
		  /* 82146A00h */ case    2:  		/* bl 50048 */
		/* 82146A00h case    2:*/		regs.LR = 0x82146A04; return 0x82152D80;
		/* 82146A00h case    2:*/		return 0x82146A04;
		  /* 82146A04h */ case    3:  		/* or. R29, R3, R3 */
		/* 82146A04h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82146A04h case    3:*/		return 0x82146A08;
		  /* 82146A08h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 82146A08h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82146A1C;  }
		/* 82146A08h case    4:*/		return 0x82146A0C;
		  /* 82146A0Ch */ case    5:  		/* lis R11, -32761 */
		/* 82146A0Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 82146A0Ch case    5:*/		return 0x82146A10;
		  /* 82146A10h */ case    6:  		/* ori R11, R11, 14 */
		/* 82146A10h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82146A10h case    6:*/		return 0x82146A14;
		  /* 82146A14h */ case    7:  		/* stw R11, <#[R28]> */
		/* 82146A14h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82146A14h case    7:*/		return 0x82146A18;
	}
	return 0x82146A18;
} // Block from 821469F8h-82146A18h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82146A18h
// Function '?AddInstructionAddress@Stream@XGRAPHICS@@QAAXPBDKHK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146A18);
		  /* 82146A18h */ case    0:  		/* b 52 */
		/* 82146A18h case    0:*/		return 0x82146A4C;
		/* 82146A18h case    0:*/		return 0x82146A1C;
	}
	return 0x82146A1C;
} // Block from 82146A18h-82146A1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146A1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146A1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146A1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146A1C);
		  /* 82146A1Ch */ case    0:  		/* lwz R4, <#[R31]> */
		/* 82146A1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82146A1Ch case    0:*/		return 0x82146A20;
		  /* 82146A20h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 82146A20h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82146A20h case    1:*/		return 0x82146A24;
		  /* 82146A24h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82146A24h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82146A24h case    2:*/		return 0x82146A28;
		  /* 82146A28h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82146A28h case    3:*/		if ( regs.CR[6].eq ) { return 0x82146A48;  }
		/* 82146A28h case    3:*/		return 0x82146A2C;
		  /* 82146A2Ch */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 82146A2Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82146A2Ch case    4:*/		return 0x82146A30;
		  /* 82146A30h */ case    5:  		/* mr R3, R29 */
		/* 82146A30h case    5:*/		regs.R3 = regs.R29;
		/* 82146A30h case    5:*/		return 0x82146A34;
		  /* 82146A34h */ case    6:  		/* mulli R5, R11, 476 */
		/* 82146A34h case    6:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x1DC);
		/* 82146A34h case    6:*/		return 0x82146A38;
		  /* 82146A38h */ case    7:  		/* bl -741512 */
		/* 82146A38h case    7:*/		regs.LR = 0x82146A3C; return 0x820919B0;
		/* 82146A38h case    7:*/		return 0x82146A3C;
		  /* 82146A3Ch */ case    8:  		/* lwz R4, <#[R31]> */
		/* 82146A3Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82146A3Ch case    8:*/		return 0x82146A40;
		  /* 82146A40h */ case    9:  		/* mr R3, R31 */
		/* 82146A40h case    9:*/		regs.R3 = regs.R31;
		/* 82146A40h case    9:*/		return 0x82146A44;
		  /* 82146A44h */ case   10:  		/* bl 49996 */
		/* 82146A44h case   10:*/		regs.LR = 0x82146A48; return 0x82152D90;
		/* 82146A44h case   10:*/		return 0x82146A48;
	}
	return 0x82146A48;
} // Block from 82146A1Ch-82146A48h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82146A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146A48);
		  /* 82146A48h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82146A48h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82146A48h case    0:*/		return 0x82146A4C;
	}
	return 0x82146A4C;
} // Block from 82146A48h-82146A4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146A4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146A4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146A4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146A4C);
		  /* 82146A4Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 82146A4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82146A4Ch case    0:*/		return 0x82146A50;
		  /* 82146A50h */ case    1:  		/* b -743336 */
		/* 82146A50h case    1:*/		return 0x820912A8;
		/* 82146A50h case    1:*/		return 0x82146A54;
		  /* 82146A54h */ case    2:  		/* nop */
		/* 82146A54h case    2:*/		cpu::op::nop();
		/* 82146A54h case    2:*/		return 0x82146A58;
	}
	return 0x82146A58;
} // Block from 82146A4Ch-82146A58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146A58);
		  /* 82146A58h */ case    0:  		/* mfspr R12, LR */
		/* 82146A58h case    0:*/		regs.R12 = regs.LR;
		/* 82146A58h case    0:*/		return 0x82146A5C;
		  /* 82146A5Ch */ case    1:  		/* bl -743428 */
		/* 82146A5Ch case    1:*/		regs.LR = 0x82146A60; return 0x82091258;
		/* 82146A5Ch case    1:*/		return 0x82146A60;
		  /* 82146A60h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82146A60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82146A60h case    2:*/		return 0x82146A64;
		  /* 82146A64h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 82146A64h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82146A64h case    3:*/		return 0x82146A68;
		  /* 82146A68h */ case    4:  		/* mr R31, R3 */
		/* 82146A68h case    4:*/		regs.R31 = regs.R3;
		/* 82146A68h case    4:*/		return 0x82146A6C;
		  /* 82146A6Ch */ case    5:  		/* mr R28, R5 */
		/* 82146A6Ch case    5:*/		regs.R28 = regs.R5;
		/* 82146A6Ch case    5:*/		return 0x82146A70;
		  /* 82146A70h */ case    6:  		/* cmplw CR6, R4, R11 */
		/* 82146A70h case    6:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82146A70h case    6:*/		return 0x82146A74;
		  /* 82146A74h */ case    7:  		/* bc 4, CR6_GT, 104 */
		/* 82146A74h case    7:*/		if ( !regs.CR[6].gt ) { return 0x82146ADC;  }
		/* 82146A74h case    7:*/		return 0x82146A78;
		  /* 82146A78h */ case    8:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 82146A78h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 82146A78h case    8:*/		return 0x82146A7C;
		  /* 82146A7Ch */ case    9:  		/* cmplw CR6, R30, R4 */
		/* 82146A7Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 82146A7Ch case    9:*/		return 0x82146A80;
		  /* 82146A80h */ case   10:  		/* bc 4, CR6_LT, 8 */
		/* 82146A80h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82146A88;  }
		/* 82146A80h case   10:*/		return 0x82146A84;
		  /* 82146A84h */ case   11:  		/* mr R30, R4 */
		/* 82146A84h case   11:*/		regs.R30 = regs.R4;
		/* 82146A84h case   11:*/		return 0x82146A88;
	}
	return 0x82146A88;
} // Block from 82146A58h-82146A88h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82146A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146A88);
		  /* 82146A88h */ case    0:  		/* rlwinm R4, R30, 3, 0, 28 */
		/* 82146A88h case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R30);
		/* 82146A88h case    0:*/		return 0x82146A8C;
		  /* 82146A8Ch */ case    1:  		/* mr R3, R31 */
		/* 82146A8Ch case    1:*/		regs.R3 = regs.R31;
		/* 82146A8Ch case    1:*/		return 0x82146A90;
		  /* 82146A90h */ case    2:  		/* bl 49904 */
		/* 82146A90h case    2:*/		regs.LR = 0x82146A94; return 0x82152D80;
		/* 82146A90h case    2:*/		return 0x82146A94;
		  /* 82146A94h */ case    3:  		/* or. R29, R3, R3 */
		/* 82146A94h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82146A94h case    3:*/		return 0x82146A98;
		  /* 82146A98h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 82146A98h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82146AAC;  }
		/* 82146A98h case    4:*/		return 0x82146A9C;
		  /* 82146A9Ch */ case    5:  		/* lis R11, -32761 */
		/* 82146A9Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 82146A9Ch case    5:*/		return 0x82146AA0;
		  /* 82146AA0h */ case    6:  		/* ori R11, R11, 14 */
		/* 82146AA0h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82146AA0h case    6:*/		return 0x82146AA4;
		  /* 82146AA4h */ case    7:  		/* stw R11, <#[R28]> */
		/* 82146AA4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82146AA4h case    7:*/		return 0x82146AA8;
	}
	return 0x82146AA8;
} // Block from 82146A88h-82146AA8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82146AA8h
// Function '?AddValue@Stream@XGRAPHICS@@QAAXPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146AA8);
		  /* 82146AA8h */ case    0:  		/* b 52 */
		/* 82146AA8h case    0:*/		return 0x82146ADC;
		/* 82146AA8h case    0:*/		return 0x82146AAC;
	}
	return 0x82146AAC;
} // Block from 82146AA8h-82146AACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146AAC);
		  /* 82146AACh */ case    0:  		/* lwz R4, <#[R31]> */
		/* 82146AACh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82146AACh case    0:*/		return 0x82146AB0;
		  /* 82146AB0h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 82146AB0h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82146AB0h case    1:*/		return 0x82146AB4;
		  /* 82146AB4h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82146AB4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82146AB4h case    2:*/		return 0x82146AB8;
		  /* 82146AB8h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82146AB8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82146AD8;  }
		/* 82146AB8h case    3:*/		return 0x82146ABC;
		  /* 82146ABCh */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 82146ABCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82146ABCh case    4:*/		return 0x82146AC0;
		  /* 82146AC0h */ case    5:  		/* mr R3, R29 */
		/* 82146AC0h case    5:*/		regs.R3 = regs.R29;
		/* 82146AC0h case    5:*/		return 0x82146AC4;
		  /* 82146AC4h */ case    6:  		/* rlwinm R5, R11, 3, 0, 28 */
		/* 82146AC4h case    6:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R11);
		/* 82146AC4h case    6:*/		return 0x82146AC8;
		  /* 82146AC8h */ case    7:  		/* bl -741656 */
		/* 82146AC8h case    7:*/		regs.LR = 0x82146ACC; return 0x820919B0;
		/* 82146AC8h case    7:*/		return 0x82146ACC;
		  /* 82146ACCh */ case    8:  		/* mr R3, R31 */
		/* 82146ACCh case    8:*/		regs.R3 = regs.R31;
		/* 82146ACCh case    8:*/		return 0x82146AD0;
		  /* 82146AD0h */ case    9:  		/* lwz R4, <#[R31]> */
		/* 82146AD0h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82146AD0h case    9:*/		return 0x82146AD4;
		  /* 82146AD4h */ case   10:  		/* bl 49852 */
		/* 82146AD4h case   10:*/		regs.LR = 0x82146AD8; return 0x82152D90;
		/* 82146AD4h case   10:*/		return 0x82146AD8;
	}
	return 0x82146AD8;
} // Block from 82146AACh-82146AD8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82146AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146AD8);
		  /* 82146AD8h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82146AD8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82146AD8h case    0:*/		return 0x82146ADC;
	}
	return 0x82146ADC;
} // Block from 82146AD8h-82146ADCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146ADC);
		  /* 82146ADCh */ case    0:  		/* addi R1, R1, 128 */
		/* 82146ADCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82146ADCh case    0:*/		return 0x82146AE0;
		  /* 82146AE0h */ case    1:  		/* b -743480 */
		/* 82146AE0h case    1:*/		return 0x820912A8;
		/* 82146AE0h case    1:*/		return 0x82146AE4;
		  /* 82146AE4h */ case    2:  		/* nop */
		/* 82146AE4h case    2:*/		cpu::op::nop();
		/* 82146AE4h case    2:*/		return 0x82146AE8;
	}
	return 0x82146AE8;
} // Block from 82146ADCh-82146AE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146AE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146AE8);
		  /* 82146AE8h */ case    0:  		/* mfspr R12, LR */
		/* 82146AE8h case    0:*/		regs.R12 = regs.LR;
		/* 82146AE8h case    0:*/		return 0x82146AEC;
		  /* 82146AECh */ case    1:  		/* bl -743572 */
		/* 82146AECh case    1:*/		regs.LR = 0x82146AF0; return 0x82091258;
		/* 82146AECh case    1:*/		return 0x82146AF0;
		  /* 82146AF0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82146AF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82146AF0h case    2:*/		return 0x82146AF4;
		  /* 82146AF4h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 82146AF4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82146AF4h case    3:*/		return 0x82146AF8;
		  /* 82146AF8h */ case    4:  		/* mr R31, R3 */
		/* 82146AF8h case    4:*/		regs.R31 = regs.R3;
		/* 82146AF8h case    4:*/		return 0x82146AFC;
		  /* 82146AFCh */ case    5:  		/* mr R28, R5 */
		/* 82146AFCh case    5:*/		regs.R28 = regs.R5;
		/* 82146AFCh case    5:*/		return 0x82146B00;
		  /* 82146B00h */ case    6:  		/* cmplw CR6, R4, R11 */
		/* 82146B00h case    6:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82146B00h case    6:*/		return 0x82146B04;
		  /* 82146B04h */ case    7:  		/* bc 4, CR6_GT, 100 */
		/* 82146B04h case    7:*/		if ( !regs.CR[6].gt ) { return 0x82146B68;  }
		/* 82146B04h case    7:*/		return 0x82146B08;
		  /* 82146B08h */ case    8:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 82146B08h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 82146B08h case    8:*/		return 0x82146B0C;
		  /* 82146B0Ch */ case    9:  		/* cmplw CR6, R30, R4 */
		/* 82146B0Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 82146B0Ch case    9:*/		return 0x82146B10;
		  /* 82146B10h */ case   10:  		/* bc 4, CR6_LT, 8 */
		/* 82146B10h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82146B18;  }
		/* 82146B10h case   10:*/		return 0x82146B14;
		  /* 82146B14h */ case   11:  		/* mr R30, R4 */
		/* 82146B14h case   11:*/		regs.R30 = regs.R4;
		/* 82146B14h case   11:*/		return 0x82146B18;
	}
	return 0x82146B18;
} // Block from 82146AE8h-82146B18h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82146B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146B18);
		  /* 82146B18h */ case    0:  		/* mr R4, R30 */
		/* 82146B18h case    0:*/		regs.R4 = regs.R30;
		/* 82146B18h case    0:*/		return 0x82146B1C;
		  /* 82146B1Ch */ case    1:  		/* mr R3, R31 */
		/* 82146B1Ch case    1:*/		regs.R3 = regs.R31;
		/* 82146B1Ch case    1:*/		return 0x82146B20;
		  /* 82146B20h */ case    2:  		/* bl 49760 */
		/* 82146B20h case    2:*/		regs.LR = 0x82146B24; return 0x82152D80;
		/* 82146B20h case    2:*/		return 0x82146B24;
		  /* 82146B24h */ case    3:  		/* or. R29, R3, R3 */
		/* 82146B24h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82146B24h case    3:*/		return 0x82146B28;
		  /* 82146B28h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 82146B28h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82146B3C;  }
		/* 82146B28h case    4:*/		return 0x82146B2C;
		  /* 82146B2Ch */ case    5:  		/* lis R11, -32761 */
		/* 82146B2Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 82146B2Ch case    5:*/		return 0x82146B30;
		  /* 82146B30h */ case    6:  		/* ori R11, R11, 14 */
		/* 82146B30h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82146B30h case    6:*/		return 0x82146B34;
		  /* 82146B34h */ case    7:  		/* stw R11, <#[R28]> */
		/* 82146B34h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82146B34h case    7:*/		return 0x82146B38;
		  /* 82146B38h */ case    8:  		/* b 48 */
		/* 82146B38h case    8:*/		return 0x82146B68;
		/* 82146B38h case    8:*/		return 0x82146B3C;
	}
	return 0x82146B3C;
} // Block from 82146B18h-82146B3Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82146B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146B3C);
		  /* 82146B3Ch */ case    0:  		/* lwz R4, <#[R31]> */
		/* 82146B3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82146B3Ch case    0:*/		return 0x82146B40;
		  /* 82146B40h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 82146B40h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82146B40h case    1:*/		return 0x82146B44;
		  /* 82146B44h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82146B44h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82146B44h case    2:*/		return 0x82146B48;
		  /* 82146B48h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 82146B48h case    3:*/		if ( regs.CR[6].eq ) { return 0x82146B64;  }
		/* 82146B48h case    3:*/		return 0x82146B4C;
		  /* 82146B4Ch */ case    4:  		/* mr R3, R29 */
		/* 82146B4Ch case    4:*/		regs.R3 = regs.R29;
		/* 82146B4Ch case    4:*/		return 0x82146B50;
		  /* 82146B50h */ case    5:  		/* lwz R5, <#[R31 + 4]> */
		/* 82146B50h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 82146B50h case    5:*/		return 0x82146B54;
		  /* 82146B54h */ case    6:  		/* bl -741796 */
		/* 82146B54h case    6:*/		regs.LR = 0x82146B58; return 0x820919B0;
		/* 82146B54h case    6:*/		return 0x82146B58;
		  /* 82146B58h */ case    7:  		/* mr R3, R31 */
		/* 82146B58h case    7:*/		regs.R3 = regs.R31;
		/* 82146B58h case    7:*/		return 0x82146B5C;
		  /* 82146B5Ch */ case    8:  		/* lwz R4, <#[R31]> */
		/* 82146B5Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82146B5Ch case    8:*/		return 0x82146B60;
		  /* 82146B60h */ case    9:  		/* bl 49712 */
		/* 82146B60h case    9:*/		regs.LR = 0x82146B64; return 0x82152D90;
		/* 82146B60h case    9:*/		return 0x82146B64;
	}
	return 0x82146B64;
} // Block from 82146B3Ch-82146B64h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82146B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146B64);
		  /* 82146B64h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82146B64h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82146B64h case    0:*/		return 0x82146B68;
	}
	return 0x82146B68;
} // Block from 82146B64h-82146B68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146B68);
		  /* 82146B68h */ case    0:  		/* addi R1, R1, 128 */
		/* 82146B68h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82146B68h case    0:*/		return 0x82146B6C;
		  /* 82146B6Ch */ case    1:  		/* b -743620 */
		/* 82146B6Ch case    1:*/		return 0x820912A8;
		/* 82146B6Ch case    1:*/		return 0x82146B70;
	}
	return 0x82146B70;
} // Block from 82146B68h-82146B70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82146B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146B70);
		  /* 82146B70h */ case    0:  		/* mfspr R12, LR */
		/* 82146B70h case    0:*/		regs.R12 = regs.LR;
		/* 82146B70h case    0:*/		return 0x82146B74;
		  /* 82146B74h */ case    1:  		/* bl -743708 */
		/* 82146B74h case    1:*/		regs.LR = 0x82146B78; return 0x82091258;
		/* 82146B74h case    1:*/		return 0x82146B78;
		  /* 82146B78h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82146B78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82146B78h case    2:*/		return 0x82146B7C;
		  /* 82146B7Ch */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 82146B7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82146B7Ch case    3:*/		return 0x82146B80;
		  /* 82146B80h */ case    4:  		/* mr R31, R3 */
		/* 82146B80h case    4:*/		regs.R31 = regs.R3;
		/* 82146B80h case    4:*/		return 0x82146B84;
		  /* 82146B84h */ case    5:  		/* mr R28, R5 */
		/* 82146B84h case    5:*/		regs.R28 = regs.R5;
		/* 82146B84h case    5:*/		return 0x82146B88;
		  /* 82146B88h */ case    6:  		/* cmplw CR6, R4, R11 */
		/* 82146B88h case    6:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82146B88h case    6:*/		return 0x82146B8C;
		  /* 82146B8Ch */ case    7:  		/* bc 4, CR6_GT, 104 */
		/* 82146B8Ch case    7:*/		if ( !regs.CR[6].gt ) { return 0x82146BF4;  }
		/* 82146B8Ch case    7:*/		return 0x82146B90;
		  /* 82146B90h */ case    8:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 82146B90h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 82146B90h case    8:*/		return 0x82146B94;
		  /* 82146B94h */ case    9:  		/* cmplw CR6, R30, R4 */
		/* 82146B94h case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 82146B94h case    9:*/		return 0x82146B98;
		  /* 82146B98h */ case   10:  		/* bc 4, CR6_LT, 8 */
		/* 82146B98h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82146BA0;  }
		/* 82146B98h case   10:*/		return 0x82146B9C;
		  /* 82146B9Ch */ case   11:  		/* mr R30, R4 */
		/* 82146B9Ch case   11:*/		regs.R30 = regs.R4;
		/* 82146B9Ch case   11:*/		return 0x82146BA0;
	}
	return 0x82146BA0;
} // Block from 82146B70h-82146BA0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82146BA0h
// Function '?Append@CountingStream@XGRAPHICS@@UAAXPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146BA0);
		  /* 82146BA0h */ case    0:  		/* mulli R4, R30, 40 */
		/* 82146BA0h case    0:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x28);
		/* 82146BA0h case    0:*/		return 0x82146BA4;
		  /* 82146BA4h */ case    1:  		/* mr R3, R31 */
		/* 82146BA4h case    1:*/		regs.R3 = regs.R31;
		/* 82146BA4h case    1:*/		return 0x82146BA8;
		  /* 82146BA8h */ case    2:  		/* bl 49624 */
		/* 82146BA8h case    2:*/		regs.LR = 0x82146BAC; return 0x82152D80;
		/* 82146BA8h case    2:*/		return 0x82146BAC;
		  /* 82146BACh */ case    3:  		/* or. R29, R3, R3 */
		/* 82146BACh case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82146BACh case    3:*/		return 0x82146BB0;
		  /* 82146BB0h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 82146BB0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82146BC4;  }
		/* 82146BB0h case    4:*/		return 0x82146BB4;
		  /* 82146BB4h */ case    5:  		/* lis R11, -32761 */
		/* 82146BB4h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 82146BB4h case    5:*/		return 0x82146BB8;
		  /* 82146BB8h */ case    6:  		/* ori R11, R11, 14 */
		/* 82146BB8h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82146BB8h case    6:*/		return 0x82146BBC;
		  /* 82146BBCh */ case    7:  		/* stw R11, <#[R28]> */
		/* 82146BBCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82146BBCh case    7:*/		return 0x82146BC0;
		  /* 82146BC0h */ case    8:  		/* b 52 */
		/* 82146BC0h case    8:*/		return 0x82146BF4;
		/* 82146BC0h case    8:*/		return 0x82146BC4;
	}
	return 0x82146BC4;
} // Block from 82146BA0h-82146BC4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82146BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146BC4);
		  /* 82146BC4h */ case    0:  		/* lwz R4, <#[R31]> */
		/* 82146BC4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82146BC4h case    0:*/		return 0x82146BC8;
		  /* 82146BC8h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 82146BC8h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82146BC8h case    1:*/		return 0x82146BCC;
		  /* 82146BCCh */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82146BCCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82146BCCh case    2:*/		return 0x82146BD0;
	}
	return 0x82146BD0;
} // Block from 82146BC4h-82146BD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146BD0h
// Function '?Append@CountingStream@XGRAPHICS@@UAAXPBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146BD0);
		  /* 82146BD0h */ case    0:  		/* bc 12, CR6_EQ, 32 */
		/* 82146BD0h case    0:*/		if ( regs.CR[6].eq ) { return 0x82146BF0;  }
		/* 82146BD0h case    0:*/		return 0x82146BD4;
		  /* 82146BD4h */ case    1:  		/* lwz R11, <#[R31 + 4]> */
		/* 82146BD4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82146BD4h case    1:*/		return 0x82146BD8;
		  /* 82146BD8h */ case    2:  		/* mr R3, R29 */
		/* 82146BD8h case    2:*/		regs.R3 = regs.R29;
		/* 82146BD8h case    2:*/		return 0x82146BDC;
		  /* 82146BDCh */ case    3:  		/* mulli R5, R11, 40 */
		/* 82146BDCh case    3:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R11,0x28);
		/* 82146BDCh case    3:*/		return 0x82146BE0;
	}
	return 0x82146BE0;
} // Block from 82146BD0h-82146BE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146BE0h
// Function '?Append_Xmlify@CountingStream@XGRAPHICS@@UAAXPBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146BE0);
		  /* 82146BE0h */ case    0:  		/* bl -741936 */
		/* 82146BE0h case    0:*/		regs.LR = 0x82146BE4; return 0x820919B0;
		/* 82146BE0h case    0:*/		return 0x82146BE4;
		  /* 82146BE4h */ case    1:  		/* lwz R4, <#[R31]> */
		/* 82146BE4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82146BE4h case    1:*/		return 0x82146BE8;
		  /* 82146BE8h */ case    2:  		/* mr R3, R31 */
		/* 82146BE8h case    2:*/		regs.R3 = regs.R31;
		/* 82146BE8h case    2:*/		return 0x82146BEC;
		  /* 82146BECh */ case    3:  		/* bl 49572 */
		/* 82146BECh case    3:*/		regs.LR = 0x82146BF0; return 0x82152D90;
		/* 82146BECh case    3:*/		return 0x82146BF0;
	}
	return 0x82146BF0;
} // Block from 82146BE0h-82146BF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146BF0);
		  /* 82146BF0h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82146BF0h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82146BF0h case    0:*/		return 0x82146BF4;
	}
	return 0x82146BF4;
} // Block from 82146BF0h-82146BF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146BF4);
		  /* 82146BF4h */ case    0:  		/* addi R1, R1, 128 */
		/* 82146BF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82146BF4h case    0:*/		return 0x82146BF8;
		  /* 82146BF8h */ case    1:  		/* b -743760 */
		/* 82146BF8h case    1:*/		return 0x820912A8;
		/* 82146BF8h case    1:*/		return 0x82146BFC;
		  /* 82146BFCh */ case    2:  		/* nop */
		/* 82146BFCh case    2:*/		cpu::op::nop();
		/* 82146BFCh case    2:*/		return 0x82146C00;
	}
	return 0x82146C00;
} // Block from 82146BF4h-82146C00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146C00);
		  /* 82146C00h */ case    0:  		/* mfspr R12, LR */
		/* 82146C00h case    0:*/		regs.R12 = regs.LR;
		/* 82146C00h case    0:*/		return 0x82146C04;
		  /* 82146C04h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82146C04h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82146C04h case    1:*/		return 0x82146C08;
		  /* 82146C08h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82146C08h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82146C08h case    2:*/		return 0x82146C0C;
		  /* 82146C0Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82146C0Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82146C0Ch case    3:*/		return 0x82146C10;
		  /* 82146C10h */ case    4:  		/* lis R11, -32253 */
		/* 82146C10h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82146C10h case    4:*/		return 0x82146C14;
		  /* 82146C14h */ case    5:  		/* mr R31, R3 */
		/* 82146C14h case    5:*/		regs.R31 = regs.R3;
		/* 82146C14h case    5:*/		return 0x82146C18;
		  /* 82146C18h */ case    6:  		/* addi R4, R11, 25844 */
		/* 82146C18h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x64F4);
		/* 82146C18h case    6:*/		return 0x82146C1C;
		  /* 82146C1Ch */ case    7:  		/* bl -3436 */
		/* 82146C1Ch case    7:*/		regs.LR = 0x82146C20; return 0x82145EB0;
		/* 82146C1Ch case    7:*/		return 0x82146C20;
		  /* 82146C20h */ case    8:  		/* lis R11, -32254 */
		/* 82146C20h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82146C20h case    8:*/		return 0x82146C24;
		  /* 82146C24h */ case    9:  		/* mr R3, R31 */
		/* 82146C24h case    9:*/		regs.R3 = regs.R31;
		/* 82146C24h case    9:*/		return 0x82146C28;
		  /* 82146C28h */ case   10:  		/* addi R4, R11, -30604 */
		/* 82146C28h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 82146C28h case   10:*/		return 0x82146C2C;
		  /* 82146C2Ch */ case   11:  		/* bl -3452 */
		/* 82146C2Ch case   11:*/		regs.LR = 0x82146C30; return 0x82145EB0;
		/* 82146C2Ch case   11:*/		return 0x82146C30;
		  /* 82146C30h */ case   12:  		/* li R11, 1 */
		/* 82146C30h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82146C30h case   12:*/		return 0x82146C34;
		  /* 82146C34h */ case   13:  		/* stw R11, <#[R31 + 8]> */
		/* 82146C34h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82146C34h case   13:*/		return 0x82146C38;
		  /* 82146C38h */ case   14:  		/* addi R1, R1, 96 */
		/* 82146C38h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82146C38h case   14:*/		return 0x82146C3C;
		  /* 82146C3Ch */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 82146C3Ch case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82146C3Ch case   15:*/		return 0x82146C40;
		  /* 82146C40h */ case   16:  		/* mtspr LR, R12 */
		/* 82146C40h case   16:*/		regs.LR = regs.R12;
		/* 82146C40h case   16:*/		return 0x82146C44;
		  /* 82146C44h */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 82146C44h case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82146C44h case   17:*/		return 0x82146C48;
	}
	return 0x82146C48;
} // Block from 82146C00h-82146C48h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82146C48h
// Function '?VPrintf@CountingStream@XGRAPHICS@@UAAXPBDPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146C48);
		  /* 82146C48h */ case    0:  		/* bclr 20, CR0_LT */
		/* 82146C48h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82146C48h case    0:*/		return 0x82146C4C;
	}
	return 0x82146C4C;
} // Block from 82146C48h-82146C4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146C4C);
		  /* 82146C4Ch */ case    0:  		/* nop */
		/* 82146C4Ch case    0:*/		cpu::op::nop();
		/* 82146C4Ch case    0:*/		return 0x82146C50;
	}
	return 0x82146C50;
} // Block from 82146C4Ch-82146C50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146C50);
		  /* 82146C50h */ case    0:  		/* mfspr R12, LR */
		/* 82146C50h case    0:*/		regs.R12 = regs.LR;
		/* 82146C50h case    0:*/		return 0x82146C54;
		  /* 82146C54h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82146C54h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82146C54h case    1:*/		return 0x82146C58;
		  /* 82146C58h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82146C58h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82146C58h case    2:*/		return 0x82146C5C;
		  /* 82146C5Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82146C5Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82146C5Ch case    3:*/		return 0x82146C60;
		  /* 82146C60h */ case    4:  		/* lis R11, -32255 */
		/* 82146C60h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82146C60h case    4:*/		return 0x82146C64;
		  /* 82146C64h */ case    5:  		/* mr R31, R3 */
		/* 82146C64h case    5:*/		regs.R31 = regs.R3;
		/* 82146C64h case    5:*/		return 0x82146C68;
		  /* 82146C68h */ case    6:  		/* addi R4, R11, -16564 */
		/* 82146C68h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFBF4C);
		/* 82146C68h case    6:*/		return 0x82146C6C;
		  /* 82146C6Ch */ case    7:  		/* bl -3516 */
		/* 82146C6Ch case    7:*/		regs.LR = 0x82146C70; return 0x82145EB0;
		/* 82146C6Ch case    7:*/		return 0x82146C70;
		  /* 82146C70h */ case    8:  		/* lis R11, -32254 */
		/* 82146C70h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82146C70h case    8:*/		return 0x82146C74;
		  /* 82146C74h */ case    9:  		/* mr R3, R31 */
		/* 82146C74h case    9:*/		regs.R3 = regs.R31;
		/* 82146C74h case    9:*/		return 0x82146C78;
		  /* 82146C78h */ case   10:  		/* addi R4, R11, -30604 */
		/* 82146C78h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 82146C78h case   10:*/		return 0x82146C7C;
		  /* 82146C7Ch */ case   11:  		/* bl -3532 */
		/* 82146C7Ch case   11:*/		regs.LR = 0x82146C80; return 0x82145EB0;
		/* 82146C7Ch case   11:*/		return 0x82146C80;
		  /* 82146C80h */ case   12:  		/* lwz R11, <#[R31 + 4]> */
		/* 82146C80h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82146C80h case   12:*/		return 0x82146C84;
		  /* 82146C84h */ case   13:  		/* li R10, 1 */
		/* 82146C84h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82146C84h case   13:*/		return 0x82146C88;
		  /* 82146C88h */ case   14:  		/* addi R11, R11, 1 */
		/* 82146C88h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82146C88h case   14:*/		return 0x82146C8C;
		  /* 82146C8Ch */ case   15:  		/* stw R10, <#[R31 + 8]> */
		/* 82146C8Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82146C8Ch case   15:*/		return 0x82146C90;
		  /* 82146C90h */ case   16:  		/* stw R11, <#[R31 + 4]> */
		/* 82146C90h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82146C90h case   16:*/		return 0x82146C94;
		  /* 82146C94h */ case   17:  		/* addi R1, R1, 96 */
		/* 82146C94h case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82146C94h case   17:*/		return 0x82146C98;
		  /* 82146C98h */ case   18:  		/* lwz R12, <#[R1 - 8]> */
		/* 82146C98h case   18:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82146C98h case   18:*/		return 0x82146C9C;
		  /* 82146C9Ch */ case   19:  		/* mtspr LR, R12 */
		/* 82146C9Ch case   19:*/		regs.LR = regs.R12;
		/* 82146C9Ch case   19:*/		return 0x82146CA0;
		  /* 82146CA0h */ case   20:  		/* ld R31, <#[R1 - 16]> */
		/* 82146CA0h case   20:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82146CA0h case   20:*/		return 0x82146CA4;
		  /* 82146CA4h */ case   21:  		/* bclr 20, CR0_LT */
		/* 82146CA4h case   21:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82146CA4h case   21:*/		return 0x82146CA8;
	}
	return 0x82146CA8;
} // Block from 82146C50h-82146CA8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82146CA8h
// Function '?Append@BufferStream@XGRAPHICS@@UAAXPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146CA8);
		  /* 82146CA8h */ case    0:  		/* mfspr R12, LR */
		/* 82146CA8h case    0:*/		regs.R12 = regs.LR;
		/* 82146CA8h case    0:*/		return 0x82146CAC;
		  /* 82146CACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82146CACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82146CACh case    1:*/		return 0x82146CB0;
		  /* 82146CB0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82146CB0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82146CB0h case    2:*/		return 0x82146CB4;
		  /* 82146CB4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82146CB4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82146CB4h case    3:*/		return 0x82146CB8;
		  /* 82146CB8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82146CB8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82146CB8h case    4:*/		return 0x82146CBC;
		  /* 82146CBCh */ case    5:  		/* li R11, 0 */
		/* 82146CBCh case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82146CBCh case    5:*/		return 0x82146CC0;
		  /* 82146CC0h */ case    6:  		/* stw R5, <#[R3 + 140]> */
		/* 82146CC0h case    6:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x0000008C) );
		/* 82146CC0h case    6:*/		return 0x82146CC4;
		  /* 82146CC4h */ case    7:  		/* li R10, 1 */
		/* 82146CC4h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82146CC4h case    7:*/		return 0x82146CC8;
		  /* 82146CC8h */ case    8:  		/* stw R11, <#[R3 + 36]> */
		/* 82146CC8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000024) );
		/* 82146CC8h case    8:*/		return 0x82146CCC;
		  /* 82146CCCh */ case    9:  		/* mr R31, R3 */
		/* 82146CCCh case    9:*/		regs.R31 = regs.R3;
		/* 82146CCCh case    9:*/		return 0x82146CD0;
		  /* 82146CD0h */ case   10:  		/* stw R11, <#[R3 + 20]> */
		/* 82146CD0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82146CD0h case   10:*/		return 0x82146CD4;
		  /* 82146CD4h */ case   11:  		/* mr R30, R4 */
		/* 82146CD4h case   11:*/		regs.R30 = regs.R4;
		/* 82146CD4h case   11:*/		return 0x82146CD8;
		  /* 82146CD8h */ case   12:  		/* stw R11, <#[R3 + 60]> */
		/* 82146CD8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000003C) );
		/* 82146CD8h case   12:*/		return 0x82146CDC;
		  /* 82146CDCh */ case   13:  		/* stw R11, <#[R3 + 144]> */
		/* 82146CDCh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 82146CDCh case   13:*/		return 0x82146CE0;
		  /* 82146CE0h */ case   14:  		/* mr R11, R4 */
		/* 82146CE0h case   14:*/		regs.R11 = regs.R4;
		/* 82146CE0h case   14:*/		return 0x82146CE4;
		  /* 82146CE4h */ case   15:  		/* stw R10, <#[R3 + 148]> */
		/* 82146CE4h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000094) );
		/* 82146CE4h case   15:*/		return 0x82146CE8;
		  /* 82146CE8h */ case   16:  		/* lbz R10, <#[R11]> */
		/* 82146CE8h case   16:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82146CE8h case   16:*/		return 0x82146CEC;
		  /* 82146CECh */ case   17:  		/* addi R11, R11, 1 */
		/* 82146CECh case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82146CECh case   17:*/		return 0x82146CF0;
		  /* 82146CF0h */ case   18:  		/* cmplwi CR6, R10, 0 */
		/* 82146CF0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82146CF0h case   18:*/		return 0x82146CF4;
		  /* 82146CF4h */ case   19:  		/* bc 4, CR6_EQ, -12 */
		/* 82146CF4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82146CE8;  }
		/* 82146CF4h case   19:*/		return 0x82146CF8;
		  /* 82146CF8h */ case   20:  		/* subf R11, R30, R11 */
		/* 82146CF8h case   20:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 82146CF8h case   20:*/		return 0x82146CFC;
		  /* 82146CFCh */ case   21:  		/* lis R4, 9351 */
		/* 82146CFCh case   21:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 82146CFCh case   21:*/		return 0x82146D00;
		  /* 82146D00h */ case   22:  		/* addi R11, R11, -1 */
		/* 82146D00h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82146D00h case   22:*/		return 0x82146D04;
		  /* 82146D04h */ case   23:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82146D04h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82146D04h case   23:*/		return 0x82146D08;
		  /* 82146D08h */ case   24:  		/* addi R3, R11, 1 */
		/* 82146D08h case   24:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x1);
		/* 82146D08h case   24:*/		return 0x82146D0C;
		  /* 82146D0Ch */ case   25:  		/* bl -781068 */
		/* 82146D0Ch case   25:*/		regs.LR = 0x82146D10; return 0x82088200;
		/* 82146D0Ch case   25:*/		return 0x82146D10;
		  /* 82146D10h */ case   26:  		/* stw R3, <#[R31 + 132]> */
		/* 82146D10h case   26:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000084) );
		/* 82146D10h case   26:*/		return 0x82146D14;
		  /* 82146D14h */ case   27:  		/* cmplwi CR0, R3, 0 */
		/* 82146D14h case   27:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82146D14h case   27:*/		return 0x82146D18;
		  /* 82146D18h */ case   28:  		/* bc 4, CR0_EQ, 20 */
		/* 82146D18h case   28:*/		if ( !regs.CR[0].eq ) { return 0x82146D2C;  }
		/* 82146D18h case   28:*/		return 0x82146D1C;
		  /* 82146D1Ch */ case   29:  		/* lis R11, -32768 */
		/* 82146D1Ch case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 82146D1Ch case   29:*/		return 0x82146D20;
		  /* 82146D20h */ case   30:  		/* ori R11, R11, 16389 */
		/* 82146D20h case   30:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4005);
		/* 82146D20h case   30:*/		return 0x82146D24;
		  /* 82146D24h */ case   31:  		/* stw R11, <#[R31 + 144]> */
		/* 82146D24h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000090) );
		/* 82146D24h case   31:*/		return 0x82146D28;
		  /* 82146D28h */ case   32:  		/* b 28 */
		/* 82146D28h case   32:*/		return 0x82146D44;
		/* 82146D28h case   32:*/		return 0x82146D2C;
	}
	return 0x82146D2C;
} // Block from 82146CA8h-82146D2Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 82146D2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146D2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146D2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146D2C);
		  /* 82146D2Ch */ case    0:  		/* addi R11, R30, -1 */
		/* 82146D2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 82146D2Ch case    0:*/		return 0x82146D30;
		  /* 82146D30h */ case    1:  		/* addi R10, R3, -1 */
		/* 82146D30h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xFFFFFFFF);
		/* 82146D30h case    1:*/		return 0x82146D34;
		  /* 82146D34h */ case    2:  		/* lbzu R9, <#[R11 + 1]> */
		/* 82146D34h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000001) );
		regs.R11 = (uint32)(regs.R11 + 0x00000001);
		/* 82146D34h case    2:*/		return 0x82146D38;
		  /* 82146D38h */ case    3:  		/* extsb. R8, R9 */
		/* 82146D38h case    3:*/		cpu::op::extsb<1>(regs,&regs.R8,regs.R9);
		/* 82146D38h case    3:*/		return 0x82146D3C;
		  /* 82146D3Ch */ case    4:  		/* stbu R9, <#[R10 + 1]> */
		/* 82146D3Ch case    4:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R10 + 0x00000001) );
		regs.R10 = (uint32)(regs.R10 + 0x00000001);
		/* 82146D3Ch case    4:*/		return 0x82146D40;
		  /* 82146D40h */ case    5:  		/* bc 4, CR0_EQ, -12 */
		/* 82146D40h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82146D34;  }
		/* 82146D40h case    5:*/		return 0x82146D44;
	}
	return 0x82146D44;
} // Block from 82146D2Ch-82146D44h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82146D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146D44);
		  /* 82146D44h */ case    0:  		/* addi R1, R1, 112 */
		/* 82146D44h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82146D44h case    0:*/		return 0x82146D48;
		  /* 82146D48h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82146D48h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82146D48h case    1:*/		return 0x82146D4C;
		  /* 82146D4Ch */ case    2:  		/* mtspr LR, R12 */
		/* 82146D4Ch case    2:*/		regs.LR = regs.R12;
		/* 82146D4Ch case    2:*/		return 0x82146D50;
	}
	return 0x82146D50;
} // Block from 82146D44h-82146D50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146D50h
// Function '?Append@BufferStream@XGRAPHICS@@UAAXPBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146D50);
		  /* 82146D50h */ case    0:  		/* ld R30, <#[R1 - 24]> */
		/* 82146D50h case    0:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82146D50h case    0:*/		return 0x82146D54;
		  /* 82146D54h */ case    1:  		/* ld R31, <#[R1 - 16]> */
		/* 82146D54h case    1:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82146D54h case    1:*/		return 0x82146D58;
		  /* 82146D58h */ case    2:  		/* bclr 20, CR0_LT */
		/* 82146D58h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82146D58h case    2:*/		return 0x82146D5C;
	}
	return 0x82146D5C;
} // Block from 82146D50h-82146D5Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146D5C);
		  /* 82146D5Ch */ case    0:  		/* nop */
		/* 82146D5Ch case    0:*/		cpu::op::nop();
		/* 82146D5Ch case    0:*/		return 0x82146D60;
	}
	return 0x82146D60;
} // Block from 82146D5Ch-82146D60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146D60);
		  /* 82146D60h */ case    0:  		/* mfspr R12, LR */
		/* 82146D60h case    0:*/		regs.R12 = regs.LR;
		/* 82146D60h case    0:*/		return 0x82146D64;
		  /* 82146D64h */ case    1:  		/* bl -744200 */
		/* 82146D64h case    1:*/		regs.LR = 0x82146D68; return 0x8209125C;
		/* 82146D64h case    1:*/		return 0x82146D68;
		  /* 82146D68h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82146D68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82146D68h case    2:*/		return 0x82146D6C;
		  /* 82146D6Ch */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 82146D6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 82146D6Ch case    3:*/		return 0x82146D70;
		  /* 82146D70h */ case    4:  		/* mr R31, R3 */
		/* 82146D70h case    4:*/		regs.R31 = regs.R3;
		/* 82146D70h case    4:*/		return 0x82146D74;
		  /* 82146D74h */ case    5:  		/* mr R29, R4 */
		/* 82146D74h case    5:*/		regs.R29 = regs.R4;
		/* 82146D74h case    5:*/		return 0x82146D78;
		  /* 82146D78h */ case    6:  		/* mr R30, R5 */
		/* 82146D78h case    6:*/		regs.R30 = regs.R5;
		/* 82146D78h case    6:*/		return 0x82146D7C;
		  /* 82146D7Ch */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 82146D7Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82146D7Ch case    7:*/		return 0x82146D80;
		  /* 82146D80h */ case    8:  		/* bc 12, CR6_LT, 80 */
		/* 82146D80h case    8:*/		if ( regs.CR[6].lt ) { return 0x82146DD0;  }
		/* 82146D80h case    8:*/		return 0x82146D84;
		  /* 82146D84h */ case    9:  		/* lis R4, 9351 */
		/* 82146D84h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 82146D84h case    9:*/		return 0x82146D88;
		  /* 82146D88h */ case   10:  		/* mr R3, R5 */
		/* 82146D88h case   10:*/		regs.R3 = regs.R5;
		/* 82146D88h case   10:*/		return 0x82146D8C;
		  /* 82146D8Ch */ case   11:  		/* bl -781196 */
		/* 82146D8Ch case   11:*/		regs.LR = 0x82146D90; return 0x82088200;
		/* 82146D8Ch case   11:*/		return 0x82146D90;
		  /* 82146D90h */ case   12:  		/* lwz R11, <#[R31 + 128]> */
		/* 82146D90h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 82146D90h case   12:*/		return 0x82146D94;
		  /* 82146D94h */ case   13:  		/* stw R3, <#[R11 + 388]> */
		/* 82146D94h case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000184) );
		/* 82146D94h case   13:*/		return 0x82146D98;
		  /* 82146D98h */ case   14:  		/* lwz R11, <#[R31 + 128]> */
		/* 82146D98h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 82146D98h case   14:*/		return 0x82146D9C;
		  /* 82146D9Ch */ case   15:  		/* lwz R10, <#[R11 + 388]> */
		/* 82146D9Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000184) );
		/* 82146D9Ch case   15:*/		return 0x82146DA0;
		  /* 82146DA0h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 82146DA0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82146DA0h case   16:*/		return 0x82146DA4;
		  /* 82146DA4h */ case   17:  		/* bc 4, CR6_EQ, 20 */
		/* 82146DA4h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82146DB8;  }
		/* 82146DA4h case   17:*/		return 0x82146DA8;
		  /* 82146DA8h */ case   18:  		/* lis R11, -32761 */
		/* 82146DA8h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 82146DA8h case   18:*/		return 0x82146DAC;
		  /* 82146DACh */ case   19:  		/* ori R11, R11, 14 */
		/* 82146DACh case   19:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82146DACh case   19:*/		return 0x82146DB0;
		  /* 82146DB0h */ case   20:  		/* stw R11, <#[R31 + 144]> */
		/* 82146DB0h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000090) );
		/* 82146DB0h case   20:*/		return 0x82146DB4;
		  /* 82146DB4h */ case   21:  		/* b 28 */
		/* 82146DB4h case   21:*/		return 0x82146DD0;
		/* 82146DB4h case   21:*/		return 0x82146DB8;
	}
	return 0x82146DB8;
} // Block from 82146D60h-82146DB8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82146DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146DB8);
		  /* 82146DB8h */ case    0:  		/* stw R30, <#[R11 + 392]> */
		/* 82146DB8h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000188) );
		/* 82146DB8h case    0:*/		return 0x82146DBC;
		  /* 82146DBCh */ case    1:  		/* mr R5, R30 */
		/* 82146DBCh case    1:*/		regs.R5 = regs.R30;
		/* 82146DBCh case    1:*/		return 0x82146DC0;
		  /* 82146DC0h */ case    2:  		/* mr R4, R29 */
		/* 82146DC0h case    2:*/		regs.R4 = regs.R29;
		/* 82146DC0h case    2:*/		return 0x82146DC4;
		  /* 82146DC4h */ case    3:  		/* lwz R11, <#[R31 + 128]> */
		/* 82146DC4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 82146DC4h case    3:*/		return 0x82146DC8;
		  /* 82146DC8h */ case    4:  		/* lwz R3, <#[R11 + 388]> */
		/* 82146DC8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000184) );
		/* 82146DC8h case    4:*/		return 0x82146DCC;
		  /* 82146DCCh */ case    5:  		/* bl -742428 */
		/* 82146DCCh case    5:*/		regs.LR = 0x82146DD0; return 0x820919B0;
		/* 82146DCCh case    5:*/		return 0x82146DD0;
	}
	return 0x82146DD0;
} // Block from 82146DB8h-82146DD0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82146DD0h
// Function '?Append_Xmlify@BufferStream@XGRAPHICS@@UAAXPBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146DD0);
		  /* 82146DD0h */ case    0:  		/* addi R1, R1, 112 */
		/* 82146DD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82146DD0h case    0:*/		return 0x82146DD4;
		  /* 82146DD4h */ case    1:  		/* b -744232 */
		/* 82146DD4h case    1:*/		return 0x820912AC;
		/* 82146DD4h case    1:*/		return 0x82146DD8;
	}
	return 0x82146DD8;
} // Block from 82146DD0h-82146DD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82146DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146DD8);
		  /* 82146DD8h */ case    0:  		/* mfspr R12, LR */
		/* 82146DD8h case    0:*/		regs.R12 = regs.LR;
		/* 82146DD8h case    0:*/		return 0x82146DDC;
		  /* 82146DDCh */ case    1:  		/* bl -744356 */
		/* 82146DDCh case    1:*/		regs.LR = 0x82146DE0; return 0x82091238;
		/* 82146DDCh case    1:*/		return 0x82146DE0;
		  /* 82146DE0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82146DE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82146DE0h case    2:*/		return 0x82146DE4;
		  /* 82146DE4h */ case    3:  		/* mr R30, R3 */
		/* 82146DE4h case    3:*/		regs.R30 = regs.R3;
		/* 82146DE4h case    3:*/		return 0x82146DE8;
		  /* 82146DE8h */ case    4:  		/* mr R3, R4 */
		/* 82146DE8h case    4:*/		regs.R3 = regs.R4;
		/* 82146DE8h case    4:*/		return 0x82146DEC;
		  /* 82146DECh */ case    5:  		/* mr R31, R4 */
		/* 82146DECh case    5:*/		regs.R31 = regs.R4;
		/* 82146DECh case    5:*/		return 0x82146DF0;
		  /* 82146DF0h */ case    6:  		/* bl -3816 */
		/* 82146DF0h case    6:*/		regs.LR = 0x82146DF4; return 0x82145F08;
		/* 82146DF0h case    6:*/		return 0x82146DF4;
		  /* 82146DF4h */ case    7:  		/* lis R11, -32253 */
		/* 82146DF4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82146DF4h case    7:*/		return 0x82146DF8;
		  /* 82146DF8h */ case    8:  		/* lis R10, -32253 */
		/* 82146DF8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82146DF8h case    8:*/		return 0x82146DFC;
		  /* 82146DFCh */ case    9:  		/* addi R20, R11, 25876 */
		/* 82146DFCh case    9:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R11,0x6514);
		/* 82146DFCh case    9:*/		return 0x82146E00;
		  /* 82146E00h */ case   10:  		/* addi R21, R10, 25840 */
		/* 82146E00h case   10:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R10,0x64F0);
		/* 82146E00h case   10:*/		return 0x82146E04;
		  /* 82146E04h */ case   11:  		/* mr R3, R31 */
		/* 82146E04h case   11:*/		regs.R3 = regs.R31;
		/* 82146E04h case   11:*/		return 0x82146E08;
		  /* 82146E08h */ case   12:  		/* mr R5, R20 */
		/* 82146E08h case   12:*/		regs.R5 = regs.R20;
		/* 82146E08h case   12:*/		return 0x82146E0C;
		  /* 82146E0Ch */ case   13:  		/* mr R4, R21 */
		/* 82146E0Ch case   13:*/		regs.R4 = regs.R21;
		/* 82146E0Ch case   13:*/		return 0x82146E10;
		  /* 82146E10h */ case   14:  		/* bl -3936 */
		/* 82146E10h case   14:*/		regs.LR = 0x82146E14; return 0x82145EB0;
		/* 82146E10h case   14:*/		return 0x82146E14;
		  /* 82146E14h */ case   15:  		/* mr R3, R31 */
		/* 82146E14h case   15:*/		regs.R3 = regs.R31;
		/* 82146E14h case   15:*/		return 0x82146E18;
		  /* 82146E18h */ case   16:  		/* bl -456 */
		/* 82146E18h case   16:*/		regs.LR = 0x82146E1C; return 0x82146C50;
		/* 82146E18h case   16:*/		return 0x82146E1C;
		  /* 82146E1Ch */ case   17:  		/* lwz R11, <#[R30 + 8]> */
		/* 82146E1Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82146E1Ch case   17:*/		return 0x82146E20;
		  /* 82146E20h */ case   18:  		/* lwz R10, <#[R30 + 4]> */
		/* 82146E20h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82146E20h case   18:*/		return 0x82146E24;
		  /* 82146E24h */ case   19:  		/* addi R28, R30, 4 */
		/* 82146E24h case   19:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x4);
		/* 82146E24h case   19:*/		return 0x82146E28;
		  /* 82146E28h */ case   20:  		/* mulli R11, R11, 276 */
		/* 82146E28h case   20:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x114);
		/* 82146E28h case   20:*/		return 0x82146E2C;
		  /* 82146E2Ch */ case   21:  		/* extsw R30, R10 */
		/* 82146E2Ch case   21:*/		cpu::op::extsw<0>(regs,&regs.R30,regs.R10);
		/* 82146E2Ch case   21:*/		return 0x82146E30;
		  /* 82146E30h */ case   22:  		/* add R11, R11, R10 */
		/* 82146E30h case   22:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82146E30h case   22:*/		return 0x82146E34;
		  /* 82146E34h */ case   23:  		/* cmplw CR6, R30, R11 */
		/* 82146E34h case   23:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82146E34h case   23:*/		return 0x82146E38;
		  /* 82146E38h */ case   24:  		/* bc 4, CR6_LT, 284 */
		/* 82146E38h case   24:*/		if ( !regs.CR[6].lt ) { return 0x82146F54;  }
		/* 82146E38h case   24:*/		return 0x82146E3C;
		  /* 82146E3Ch */ case   25:  		/* lis R5, -32255 */
		/* 82146E3Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8201);
		/* 82146E3Ch case   25:*/		return 0x82146E40;
		  /* 82146E40h */ case   26:  		/* lis R6, -32253 */
		/* 82146E40h case   26:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 82146E40h case   26:*/		return 0x82146E44;
		  /* 82146E44h */ case   27:  		/* lis R7, -32253 */
		/* 82146E44h case   27:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82146E44h case   27:*/		return 0x82146E48;
		  /* 82146E48h */ case   28:  		/* lis R8, -32253 */
		/* 82146E48h case   28:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82146E48h case   28:*/		return 0x82146E4C;
		  /* 82146E4Ch */ case   29:  		/* lis R9, -32253 */
		/* 82146E4Ch case   29:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82146E4Ch case   29:*/		return 0x82146E50;
		  /* 82146E50h */ case   30:  		/* lis R10, -32253 */
		/* 82146E50h case   30:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82146E50h case   30:*/		return 0x82146E54;
		  /* 82146E54h */ case   31:  		/* lis R11, -32253 */
		/* 82146E54h case   31:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82146E54h case   31:*/		return 0x82146E58;
		  /* 82146E58h */ case   32:  		/* addi R22, R5, -16564 */
		/* 82146E58h case   32:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R5,0xFFFFBF4C);
		/* 82146E58h case   32:*/		return 0x82146E5C;
		  /* 82146E5Ch */ case   33:  		/* addi R27, R6, 25736 */
		/* 82146E5Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R6,0x6488);
		/* 82146E5Ch case   33:*/		return 0x82146E60;
		  /* 82146E60h */ case   34:  		/* addi R26, R7, 25712 */
		/* 82146E60h case   34:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R7,0x6470);
		/* 82146E60h case   34:*/		return 0x82146E64;
		  /* 82146E64h */ case   35:  		/* addi R25, R8, 25868 */
		/* 82146E64h case   35:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R8,0x650C);
		/* 82146E64h case   35:*/		return 0x82146E68;
		  /* 82146E68h */ case   36:  		/* addi R24, R9, 25860 */
		/* 82146E68h case   36:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R9,0x6504);
		/* 82146E68h case   36:*/		return 0x82146E6C;
		  /* 82146E6Ch */ case   37:  		/* addi R23, R10, 25856 */
		/* 82146E6Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x6500);
		/* 82146E6Ch case   37:*/		return 0x82146E70;
		  /* 82146E70h */ case   38:  		/* addi R29, R11, 25848 */
		/* 82146E70h case   38:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x64F8);
		/* 82146E70h case   38:*/		return 0x82146E74;
		  /* 82146E74h */ case   39:  		/* mr R3, R31 */
		/* 82146E74h case   39:*/		regs.R3 = regs.R31;
		/* 82146E74h case   39:*/		return 0x82146E78;
		  /* 82146E78h */ case   40:  		/* bl -3952 */
		/* 82146E78h case   40:*/		regs.LR = 0x82146E7C; return 0x82145F08;
		/* 82146E78h case   40:*/		return 0x82146E7C;
		  /* 82146E7Ch */ case   41:  		/* mr R5, R29 */
		/* 82146E7Ch case   41:*/		regs.R5 = regs.R29;
		/* 82146E7Ch case   41:*/		return 0x82146E80;
		  /* 82146E80h */ case   42:  		/* mr R4, R21 */
		/* 82146E80h case   42:*/		regs.R4 = regs.R21;
		/* 82146E80h case   42:*/		return 0x82146E84;
		  /* 82146E84h */ case   43:  		/* mr R3, R31 */
		/* 82146E84h case   43:*/		regs.R3 = regs.R31;
		/* 82146E84h case   43:*/		return 0x82146E88;
		  /* 82146E88h */ case   44:  		/* bl -4056 */
		/* 82146E88h case   44:*/		regs.LR = 0x82146E8C; return 0x82145EB0;
		/* 82146E88h case   44:*/		return 0x82146E8C;
		  /* 82146E8Ch */ case   45:  		/* mr R5, R23 */
		/* 82146E8Ch case   45:*/		regs.R5 = regs.R23;
		/* 82146E8Ch case   45:*/		return 0x82146E90;
		  /* 82146E90h */ case   46:  		/* mr R4, R26 */
		/* 82146E90h case   46:*/		regs.R4 = regs.R26;
		/* 82146E90h case   46:*/		return 0x82146E94;
		  /* 82146E94h */ case   47:  		/* lwz R6, <#[R30 + 260]> */
		/* 82146E94h case   47:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000104) );
		/* 82146E94h case   47:*/		return 0x82146E98;
		  /* 82146E98h */ case   48:  		/* mr R3, R31 */
		/* 82146E98h case   48:*/		regs.R3 = regs.R31;
		/* 82146E98h case   48:*/		return 0x82146E9C;
		  /* 82146E9Ch */ case   49:  		/* bl -4076 */
		/* 82146E9Ch case   49:*/		regs.LR = 0x82146EA0; return 0x82145EB0;
		/* 82146E9Ch case   49:*/		return 0x82146EA0;
		  /* 82146EA0h */ case   50:  		/* mr R4, R24 */
		/* 82146EA0h case   50:*/		regs.R4 = regs.R24;
		/* 82146EA0h case   50:*/		return 0x82146EA4;
		  /* 82146EA4h */ case   51:  		/* mr R5, R30 */
		/* 82146EA4h case   51:*/		regs.R5 = regs.R30;
		/* 82146EA4h case   51:*/		return 0x82146EA8;
		  /* 82146EA8h */ case   52:  		/* mr R3, R31 */
		/* 82146EA8h case   52:*/		regs.R3 = regs.R31;
		/* 82146EA8h case   52:*/		return 0x82146EAC;
		  /* 82146EACh */ case   53:  		/* bl -3556 */
		/* 82146EACh case   53:*/		regs.LR = 0x82146EB0; return 0x821460C8;
		/* 82146EACh case   53:*/		return 0x82146EB0;
		  /* 82146EB0h */ case   54:  		/* mr R5, R25 */
		/* 82146EB0h case   54:*/		regs.R5 = regs.R25;
		/* 82146EB0h case   54:*/		return 0x82146EB4;
		  /* 82146EB4h */ case   55:  		/* mr R4, R27 */
		/* 82146EB4h case   55:*/		regs.R4 = regs.R27;
		/* 82146EB4h case   55:*/		return 0x82146EB8;
		  /* 82146EB8h */ case   56:  		/* lwz R7, <#[R30 + 268]> */
		/* 82146EB8h case   56:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x0000010C) );
		/* 82146EB8h case   56:*/		return 0x82146EBC;
		  /* 82146EBCh */ case   57:  		/* mr R3, R31 */
		/* 82146EBCh case   57:*/		regs.R3 = regs.R31;
		/* 82146EBCh case   57:*/		return 0x82146EC0;
		  /* 82146EC0h */ case   58:  		/* lwz R6, <#[R30 + 264]> */
		/* 82146EC0h case   58:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000108) );
		/* 82146EC0h case   58:*/		return 0x82146EC4;
		  /* 82146EC4h */ case   59:  		/* bl -4116 */
		/* 82146EC4h case   59:*/		regs.LR = 0x82146EC8; return 0x82145EB0;
		/* 82146EC4h case   59:*/		return 0x82146EC8;
		  /* 82146EC8h */ case   60:  		/* lwz R11, <#[R30 + 272]> */
		/* 82146EC8h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000110) );
		/* 82146EC8h case   60:*/		return 0x82146ECC;
		  /* 82146ECCh */ case   61:  		/* mr R3, R31 */
		/* 82146ECCh case   61:*/		regs.R3 = regs.R31;
		/* 82146ECCh case   61:*/		return 0x82146ED0;
	}
	return 0x82146ED0;
} // Block from 82146DD8h-82146ED0h (62 instructions)

//////////////////////////////////////////////////////
// Block at 82146ED0h
// Function '?VPrintf@BufferStream@XGRAPHICS@@UAAXPBDPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146ED0);
		  /* 82146ED0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82146ED0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82146ED0h case    0:*/		return 0x82146ED4;
		  /* 82146ED4h */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 82146ED4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82146F34;  }
		/* 82146ED4h case    1:*/		return 0x82146ED8;
		  /* 82146ED8h */ case    2:  		/* mr R4, R22 */
		/* 82146ED8h case    2:*/		regs.R4 = regs.R22;
		/* 82146ED8h case    2:*/		return 0x82146EDC;
		  /* 82146EDCh */ case    3:  		/* bl -4140 */
		/* 82146EDCh case    3:*/		regs.LR = 0x82146EE0; return 0x82145EB0;
		/* 82146EDCh case    3:*/		return 0x82146EE0;
		  /* 82146EE0h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 82146EE0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82146EE0h case    4:*/		return 0x82146EE4;
		  /* 82146EE4h */ case    5:  		/* addi R11, R11, 1 */
		/* 82146EE4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82146EE4h case    5:*/		return 0x82146EE8;
		  /* 82146EE8h */ case    6:  		/* stw R11, <#[R31 + 4]> */
		/* 82146EE8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82146EE8h case    6:*/		return 0x82146EEC;
		  /* 82146EECh */ case    7:  		/* lwz R4, <#[R30 + 272]> */
		/* 82146EECh case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000110) );
		/* 82146EECh case    7:*/		return 0x82146EF0;
		  /* 82146EF0h */ case    8:  		/* mr R11, R4 */
		/* 82146EF0h case    8:*/		regs.R11 = regs.R4;
		/* 82146EF0h case    8:*/		return 0x82146EF4;
		  /* 82146EF4h */ case    9:  		/* lbz R10, <#[R11]> */
		/* 82146EF4h case    9:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82146EF4h case    9:*/		return 0x82146EF8;
		  /* 82146EF8h */ case   10:  		/* addi R11, R11, 1 */
		/* 82146EF8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82146EF8h case   10:*/		return 0x82146EFC;
		  /* 82146EFCh */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 82146EFCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82146EFCh case   11:*/		return 0x82146F00;
		  /* 82146F00h */ case   12:  		/* bc 4, CR6_EQ, -12 */
		/* 82146F00h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82146EF4;  }
		/* 82146F00h case   12:*/		return 0x82146F04;
		  /* 82146F04h */ case   13:  		/* subf R11, R4, R11 */
		/* 82146F04h case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 82146F04h case   13:*/		return 0x82146F08;
		  /* 82146F08h */ case   14:  		/* lwz R10, <#[R31]> */
		/* 82146F08h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82146F08h case   14:*/		return 0x82146F0C;
		  /* 82146F0Ch */ case   15:  		/* mr R3, R31 */
		/* 82146F0Ch case   15:*/		regs.R3 = regs.R31;
		/* 82146F0Ch case   15:*/		return 0x82146F10;
		  /* 82146F10h */ case   16:  		/* addi R11, R11, -1 */
		/* 82146F10h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82146F10h case   16:*/		return 0x82146F14;
		  /* 82146F14h */ case   17:  		/* rlwinm R5, R11, 0, 0, 31 */
		/* 82146F14h case   17:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R11);
		/* 82146F14h case   17:*/		return 0x82146F18;
		  /* 82146F18h */ case   18:  		/* lwz R11, <#[R10 + 12]> */
		/* 82146F18h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82146F18h case   18:*/		return 0x82146F1C;
		  /* 82146F1Ch */ case   19:  		/* mtspr CTR, R11 */
		/* 82146F1Ch case   19:*/		regs.CTR = regs.R11;
		/* 82146F1Ch case   19:*/		return 0x82146F20;
		  /* 82146F20h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 82146F20h case   20:*/		if ( 1 ) { regs.LR = 0x82146F24; return (uint32)regs.CTR; }
		/* 82146F20h case   20:*/		return 0x82146F24;
		  /* 82146F24h */ case   21:  		/* mr R4, R29 */
		/* 82146F24h case   21:*/		regs.R4 = regs.R29;
		/* 82146F24h case   21:*/		return 0x82146F28;
		  /* 82146F28h */ case   22:  		/* mr R3, R31 */
		/* 82146F28h case   22:*/		regs.R3 = regs.R31;
		/* 82146F28h case   22:*/		return 0x82146F2C;
		  /* 82146F2Ch */ case   23:  		/* bl -3924 */
		/* 82146F2Ch case   23:*/		regs.LR = 0x82146F30; return 0x82145FD8;
		/* 82146F2Ch case   23:*/		return 0x82146F30;
		  /* 82146F30h */ case   24:  		/* b 8 */
		/* 82146F30h case   24:*/		return 0x82146F38;
		/* 82146F30h case   24:*/		return 0x82146F34;
	}
	return 0x82146F34;
} // Block from 82146ED0h-82146F34h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82146F34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146F34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146F34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146F34);
		  /* 82146F34h */ case    0:  		/* bl -820 */
		/* 82146F34h case    0:*/		regs.LR = 0x82146F38; return 0x82146C00;
		/* 82146F34h case    0:*/		return 0x82146F38;
	}
	return 0x82146F38;
} // Block from 82146F34h-82146F38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146F38);
		  /* 82146F38h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 82146F38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82146F38h case    0:*/		return 0x82146F3C;
		  /* 82146F3Ch */ case    1:  		/* addi R30, R30, 276 */
		/* 82146F3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x114);
		/* 82146F3Ch case    1:*/		return 0x82146F40;
		  /* 82146F40h */ case    2:  		/* lwz R10, <#[R28]> */
		/* 82146F40h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82146F40h case    2:*/		return 0x82146F44;
		  /* 82146F44h */ case    3:  		/* mulli R11, R11, 276 */
		/* 82146F44h case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x114);
		/* 82146F44h case    3:*/		return 0x82146F48;
	}
	return 0x82146F48;
} // Block from 82146F38h-82146F48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146F48h
// Function 'XShaderPDBBuilder_Release'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146F48);
		  /* 82146F48h */ case    0:  		/* add R11, R11, R10 */
		/* 82146F48h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82146F48h case    0:*/		return 0x82146F4C;
		  /* 82146F4Ch */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 82146F4Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82146F4Ch case    1:*/		return 0x82146F50;
		  /* 82146F50h */ case    2:  		/* bc 12, CR6_LT, -220 */
		/* 82146F50h case    2:*/		if ( regs.CR[6].lt ) { return 0x82146E74;  }
		/* 82146F50h case    2:*/		return 0x82146F54;
	}
	return 0x82146F54;
} // Block from 82146F48h-82146F54h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82146F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146F54);
		  /* 82146F54h */ case    0:  		/* mr R4, R20 */
		/* 82146F54h case    0:*/		regs.R4 = regs.R20;
		/* 82146F54h case    0:*/		return 0x82146F58;
	}
	return 0x82146F58;
} // Block from 82146F54h-82146F58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82146F58h
// Function 'XShaderPDBBuilder_Finish'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146F58);
		  /* 82146F58h */ case    0:  		/* mr R3, R31 */
		/* 82146F58h case    0:*/		regs.R3 = regs.R31;
		/* 82146F58h case    0:*/		return 0x82146F5C;
		  /* 82146F5Ch */ case    1:  		/* bl -4084 */
		/* 82146F5Ch case    1:*/		regs.LR = 0x82146F60; return 0x82145F68;
		/* 82146F5Ch case    1:*/		return 0x82146F60;
		  /* 82146F60h */ case    2:  		/* addi R1, R1, 192 */
		/* 82146F60h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82146F60h case    2:*/		return 0x82146F64;
		  /* 82146F64h */ case    3:  		/* b -744668 */
		/* 82146F64h case    3:*/		return 0x82091288;
		/* 82146F64h case    3:*/		return 0x82146F68;
	}
	return 0x82146F68;
} // Block from 82146F58h-82146F68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146F68);
		  /* 82146F68h */ case    0:  		/* mfspr R12, LR */
		/* 82146F68h case    0:*/		regs.R12 = regs.LR;
		/* 82146F68h case    0:*/		return 0x82146F6C;
		  /* 82146F6Ch */ case    1:  		/* bl -744760 */
		/* 82146F6Ch case    1:*/		regs.LR = 0x82146F70; return 0x82091234;
		/* 82146F6Ch case    1:*/		return 0x82146F70;
		  /* 82146F70h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82146F70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82146F70h case    2:*/		return 0x82146F74;
		  /* 82146F74h */ case    3:  		/* mr R3, R4 */
		/* 82146F74h case    3:*/		regs.R3 = regs.R4;
		/* 82146F74h case    3:*/		return 0x82146F78;
	}
	return 0x82146F78;
} // Block from 82146F68h-82146F78h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146F78h
// Function 'XShaderPDBBuilder_BeginPass'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146F78);
		  /* 82146F78h */ case    0:  		/* mr R31, R4 */
		/* 82146F78h case    0:*/		regs.R31 = regs.R4;
		/* 82146F78h case    0:*/		return 0x82146F7C;
		  /* 82146F7Ch */ case    1:  		/* mr R28, R5 */
		/* 82146F7Ch case    1:*/		regs.R28 = regs.R5;
		/* 82146F7Ch case    1:*/		return 0x82146F80;
		  /* 82146F80h */ case    2:  		/* mr R20, R6 */
		/* 82146F80h case    2:*/		regs.R20 = regs.R6;
		/* 82146F80h case    2:*/		return 0x82146F84;
		  /* 82146F84h */ case    3:  		/* bl -4220 */
		/* 82146F84h case    3:*/		regs.LR = 0x82146F88; return 0x82145F08;
		/* 82146F84h case    3:*/		return 0x82146F88;
	}
	return 0x82146F88;
} // Block from 82146F78h-82146F88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146F88h
// Function 'XShaderPDBBuilder_EndPass'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146F88);
		  /* 82146F88h */ case    0:  		/* lis R10, -32253 */
		/* 82146F88h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82146F88h case    0:*/		return 0x82146F8C;
		  /* 82146F8Ch */ case    1:  		/* lis R11, -32253 */
		/* 82146F8Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82146F8Ch case    1:*/		return 0x82146F90;
		  /* 82146F90h */ case    2:  		/* addi R19, R10, 25924 */
		/* 82146F90h case    2:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R10,0x6544);
		/* 82146F90h case    2:*/		return 0x82146F94;
		  /* 82146F94h */ case    3:  		/* addi R21, R11, 25840 */
		/* 82146F94h case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0x64F0);
		/* 82146F94h case    3:*/		return 0x82146F98;
	}
	return 0x82146F98;
} // Block from 82146F88h-82146F98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146F98h
// Function 'XShaderPDBBuilder_SetAssertionsDisabled'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146F98);
		  /* 82146F98h */ case    0:  		/* mr R3, R31 */
		/* 82146F98h case    0:*/		regs.R3 = regs.R31;
		/* 82146F98h case    0:*/		return 0x82146F9C;
		  /* 82146F9Ch */ case    1:  		/* mr R5, R19 */
		/* 82146F9Ch case    1:*/		regs.R5 = regs.R19;
		/* 82146F9Ch case    1:*/		return 0x82146FA0;
		  /* 82146FA0h */ case    2:  		/* mr R4, R21 */
		/* 82146FA0h case    2:*/		regs.R4 = regs.R21;
		/* 82146FA0h case    2:*/		return 0x82146FA4;
		  /* 82146FA4h */ case    3:  		/* bl -4340 */
		/* 82146FA4h case    3:*/		regs.LR = 0x82146FA8; return 0x82145EB0;
		/* 82146FA4h case    3:*/		return 0x82146FA8;
	}
	return 0x82146FA8;
} // Block from 82146F98h-82146FA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146FA8h
// Function 'XShaderPDBBuilder_SetDebugPrintDisabled'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146FA8);
		  /* 82146FA8h */ case    0:  		/* mr R3, R31 */
		/* 82146FA8h case    0:*/		regs.R3 = regs.R31;
		/* 82146FA8h case    0:*/		return 0x82146FAC;
		  /* 82146FACh */ case    1:  		/* bl -860 */
		/* 82146FACh case    1:*/		regs.LR = 0x82146FB0; return 0x82146C50;
		/* 82146FACh case    1:*/		return 0x82146FB0;
		  /* 82146FB0h */ case    2:  		/* lwz R10, <#[R28 + 4]> */
		/* 82146FB0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 82146FB0h case    2:*/		return 0x82146FB4;
		  /* 82146FB4h */ case    3:  		/* lwz R11, <#[R28]> */
		/* 82146FB4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82146FB4h case    3:*/		return 0x82146FB8;
	}
	return 0x82146FB8;
} // Block from 82146FA8h-82146FB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82146FB8h
// Function '?ensure2@?$FastVector@K@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82146FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82146FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82146FB8);
		  /* 82146FB8h */ case    0:  		/* mulli R10, R10, 24 */
		/* 82146FB8h case    0:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x18);
		/* 82146FB8h case    0:*/		return 0x82146FBC;
		  /* 82146FBCh */ case    1:  		/* add R10, R10, R11 */
		/* 82146FBCh case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82146FBCh case    1:*/		return 0x82146FC0;
		  /* 82146FC0h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 82146FC0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82146FC0h case    2:*/		return 0x82146FC4;
		  /* 82146FC4h */ case    3:  		/* bc 4, CR6_LT, 232 */
		/* 82146FC4h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821470AC;  }
		/* 82146FC4h case    3:*/		return 0x82146FC8;
		  /* 82146FC8h */ case    4:  		/* addi R30, R11, 8 */
		/* 82146FC8h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x8);
		/* 82146FC8h case    4:*/		return 0x82146FCC;
		  /* 82146FCCh */ case    5:  		/* lis R5, -32253 */
		/* 82146FCCh case    5:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 82146FCCh case    5:*/		return 0x82146FD0;
		  /* 82146FD0h */ case    6:  		/* lis R6, -32253 */
		/* 82146FD0h case    6:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 82146FD0h case    6:*/		return 0x82146FD4;
		  /* 82146FD4h */ case    7:  		/* lis R7, -32253 */
		/* 82146FD4h case    7:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82146FD4h case    7:*/		return 0x82146FD8;
		  /* 82146FD8h */ case    8:  		/* lis R8, -32255 */
		/* 82146FD8h case    8:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 82146FD8h case    8:*/		return 0x82146FDC;
		  /* 82146FDCh */ case    9:  		/* lis R9, -32253 */
		/* 82146FDCh case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82146FDCh case    9:*/		return 0x82146FE0;
		  /* 82146FE0h */ case   10:  		/* lis R10, -32253 */
		/* 82146FE0h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82146FE0h case   10:*/		return 0x82146FE4;
		  /* 82146FE4h */ case   11:  		/* lis R11, -32253 */
		/* 82146FE4h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82146FE4h case   11:*/		return 0x82146FE8;
		  /* 82146FE8h */ case   12:  		/* addi R29, R5, 25712 */
		/* 82146FE8h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R5,0x6470);
		/* 82146FE8h case   12:*/		return 0x82146FEC;
		  /* 82146FECh */ case   13:  		/* addi R27, R6, 25908 */
		/* 82146FECh case   13:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R6,0x6534);
		/* 82146FECh case   13:*/		return 0x82146FF0;
		  /* 82146FF0h */ case   14:  		/* addi R26, R7, 25900 */
		/* 82146FF0h case   14:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R7,0x652C);
		/* 82146FF0h case   14:*/		return 0x82146FF4;
		  /* 82146FF4h */ case   15:  		/* addi R25, R8, -10628 */
		/* 82146FF4h case   15:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R8,0xFFFFD67C);
		/* 82146FF4h case   15:*/		return 0x82146FF8;
		  /* 82146FF8h */ case   16:  		/* addi R24, R9, 25848 */
		/* 82146FF8h case   16:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R9,0x64F8);
		/* 82146FF8h case   16:*/		return 0x82146FFC;
		  /* 82146FFCh */ case   17:  		/* addi R23, R10, 25896 */
		/* 82146FFCh case   17:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x6528);
		/* 82146FFCh case   17:*/		return 0x82147000;
		  /* 82147000h */ case   18:  		/* addi R22, R11, 25884 */
		/* 82147000h case   18:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x651C);
		/* 82147000h case   18:*/		return 0x82147004;
		  /* 82147004h */ case   19:  		/* mr R3, R31 */
		/* 82147004h case   19:*/		regs.R3 = regs.R31;
		/* 82147004h case   19:*/		return 0x82147008;
		  /* 82147008h */ case   20:  		/* bl -4352 */
		/* 82147008h case   20:*/		regs.LR = 0x8214700C; return 0x82145F08;
		/* 82147008h case   20:*/		return 0x8214700C;
		  /* 8214700Ch */ case   21:  		/* mr R5, R22 */
		/* 8214700Ch case   21:*/		regs.R5 = regs.R22;
		/* 8214700Ch case   21:*/		return 0x82147010;
		  /* 82147010h */ case   22:  		/* mr R4, R21 */
		/* 82147010h case   22:*/		regs.R4 = regs.R21;
		/* 82147010h case   22:*/		return 0x82147014;
		  /* 82147014h */ case   23:  		/* mr R3, R31 */
		/* 82147014h case   23:*/		regs.R3 = regs.R31;
		/* 82147014h case   23:*/		return 0x82147018;
		  /* 82147018h */ case   24:  		/* bl -4456 */
		/* 82147018h case   24:*/		regs.LR = 0x8214701C; return 0x82145EB0;
		/* 82147018h case   24:*/		return 0x8214701C;
		  /* 8214701Ch */ case   25:  		/* mr R4, R23 */
		/* 8214701Ch case   25:*/		regs.R4 = regs.R23;
		/* 8214701Ch case   25:*/		return 0x82147020;
		  /* 82147020h */ case   26:  		/* mr R5, R20 */
		/* 82147020h case   26:*/		regs.R5 = regs.R20;
		/* 82147020h case   26:*/		return 0x82147024;
		  /* 82147024h */ case   27:  		/* lwz R7, <#[R30 - 4]> */
		/* 82147024h case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 82147024h case   27:*/		return 0x82147028;
		  /* 82147028h */ case   28:  		/* mr R3, R31 */
		/* 82147028h case   28:*/		regs.R3 = regs.R31;
		/* 82147028h case   28:*/		return 0x8214702C;
		  /* 8214702Ch */ case   29:  		/* lwz R6, <#[R30 - 8]> */
		/* 8214702Ch case   29:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 8214702Ch case   29:*/		return 0x82147030;
		  /* 82147030h */ case   30:  		/* bl -4088 */
		/* 82147030h case   30:*/		regs.LR = 0x82147034; return 0x82146038;
		/* 82147030h case   30:*/		return 0x82147034;
		  /* 82147034h */ case   31:  		/* mr R5, R24 */
		/* 82147034h case   31:*/		regs.R5 = regs.R24;
		/* 82147034h case   31:*/		return 0x82147038;
		  /* 82147038h */ case   32:  		/* mr R4, R29 */
		/* 82147038h case   32:*/		regs.R4 = regs.R29;
		/* 82147038h case   32:*/		return 0x8214703C;
		  /* 8214703Ch */ case   33:  		/* lwz R6, <#[R30]> */
		/* 8214703Ch case   33:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000000) );
		/* 8214703Ch case   33:*/		return 0x82147040;
		  /* 82147040h */ case   34:  		/* mr R3, R31 */
		/* 82147040h case   34:*/		regs.R3 = regs.R31;
		/* 82147040h case   34:*/		return 0x82147044;
		  /* 82147044h */ case   35:  		/* bl -4500 */
		/* 82147044h case   35:*/		regs.LR = 0x82147048; return 0x82145EB0;
		/* 82147044h case   35:*/		return 0x82147048;
	}
	return 0x82147048;
} // Block from 82146FB8h-82147048h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82147048h
// Function '?ensure2@?$FastVector@UAssertInfo@XGRAPHICS@@@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147048);
		  /* 82147048h */ case    0:  		/* mr R5, R25 */
		/* 82147048h case    0:*/		regs.R5 = regs.R25;
		/* 82147048h case    0:*/		return 0x8214704C;
		  /* 8214704Ch */ case    1:  		/* mr R4, R29 */
		/* 8214704Ch case    1:*/		regs.R4 = regs.R29;
		/* 8214704Ch case    1:*/		return 0x82147050;
		  /* 82147050h */ case    2:  		/* lwz R6, <#[R30 + 4]> */
		/* 82147050h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 82147050h case    2:*/		return 0x82147054;
		  /* 82147054h */ case    3:  		/* mr R3, R31 */
		/* 82147054h case    3:*/		regs.R3 = regs.R31;
		/* 82147054h case    3:*/		return 0x82147058;
		  /* 82147058h */ case    4:  		/* bl -4520 */
		/* 82147058h case    4:*/		regs.LR = 0x8214705C; return 0x82145EB0;
		/* 82147058h case    4:*/		return 0x8214705C;
		  /* 8214705Ch */ case    5:  		/* mr R5, R26 */
		/* 8214705Ch case    5:*/		regs.R5 = regs.R26;
		/* 8214705Ch case    5:*/		return 0x82147060;
		  /* 82147060h */ case    6:  		/* mr R4, R29 */
		/* 82147060h case    6:*/		regs.R4 = regs.R29;
		/* 82147060h case    6:*/		return 0x82147064;
		  /* 82147064h */ case    7:  		/* lwz R6, <#[R30 + 8]> */
		/* 82147064h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000008) );
		/* 82147064h case    7:*/		return 0x82147068;
		  /* 82147068h */ case    8:  		/* mr R3, R31 */
		/* 82147068h case    8:*/		regs.R3 = regs.R31;
		/* 82147068h case    8:*/		return 0x8214706C;
		  /* 8214706Ch */ case    9:  		/* bl -4540 */
		/* 8214706Ch case    9:*/		regs.LR = 0x82147070; return 0x82145EB0;
		/* 8214706Ch case    9:*/		return 0x82147070;
		  /* 82147070h */ case   10:  		/* mr R5, R27 */
		/* 82147070h case   10:*/		regs.R5 = regs.R27;
		/* 82147070h case   10:*/		return 0x82147074;
		  /* 82147074h */ case   11:  		/* mr R4, R29 */
		/* 82147074h case   11:*/		regs.R4 = regs.R29;
		/* 82147074h case   11:*/		return 0x82147078;
		  /* 82147078h */ case   12:  		/* lwz R6, <#[R30 + 12]> */
		/* 82147078h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x0000000C) );
		/* 82147078h case   12:*/		return 0x8214707C;
		  /* 8214707Ch */ case   13:  		/* mr R3, R31 */
		/* 8214707Ch case   13:*/		regs.R3 = regs.R31;
		/* 8214707Ch case   13:*/		return 0x82147080;
		  /* 82147080h */ case   14:  		/* bl -4560 */
		/* 82147080h case   14:*/		regs.LR = 0x82147084; return 0x82145EB0;
		/* 82147080h case   14:*/		return 0x82147084;
		  /* 82147084h */ case   15:  		/* mr R3, R31 */
		/* 82147084h case   15:*/		regs.R3 = regs.R31;
		/* 82147084h case   15:*/		return 0x82147088;
		  /* 82147088h */ case   16:  		/* bl -1160 */
		/* 82147088h case   16:*/		regs.LR = 0x8214708C; return 0x82146C00;
		/* 82147088h case   16:*/		return 0x8214708C;
		  /* 8214708Ch */ case   17:  		/* lwz R11, <#[R28 + 4]> */
		/* 8214708Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8214708Ch case   17:*/		return 0x82147090;
		  /* 82147090h */ case   18:  		/* lwz R10, <#[R28]> */
		/* 82147090h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82147090h case   18:*/		return 0x82147094;
		  /* 82147094h */ case   19:  		/* addi R30, R30, 24 */
		/* 82147094h case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x18);
		/* 82147094h case   19:*/		return 0x82147098;
		  /* 82147098h */ case   20:  		/* mulli R11, R11, 24 */
		/* 82147098h case   20:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x18);
		/* 82147098h case   20:*/		return 0x8214709C;
		  /* 8214709Ch */ case   21:  		/* addi R9, R30, -8 */
		/* 8214709Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0xFFFFFFF8);
		/* 8214709Ch case   21:*/		return 0x821470A0;
		  /* 821470A0h */ case   22:  		/* add R11, R11, R10 */
		/* 821470A0h case   22:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821470A0h case   22:*/		return 0x821470A4;
		  /* 821470A4h */ case   23:  		/* cmplw CR6, R9, R11 */
		/* 821470A4h case   23:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821470A4h case   23:*/		return 0x821470A8;
		  /* 821470A8h */ case   24:  		/* bc 12, CR6_LT, -164 */
		/* 821470A8h case   24:*/		if ( regs.CR[6].lt ) { return 0x82147004;  }
		/* 821470A8h case   24:*/		return 0x821470AC;
	}
	return 0x821470AC;
} // Block from 82147048h-821470ACh (25 instructions)

//////////////////////////////////////////////////////
// Block at 821470ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821470AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821470AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821470AC);
		  /* 821470ACh */ case    0:  		/* mr R4, R19 */
		/* 821470ACh case    0:*/		regs.R4 = regs.R19;
		/* 821470ACh case    0:*/		return 0x821470B0;
		  /* 821470B0h */ case    1:  		/* mr R3, R31 */
		/* 821470B0h case    1:*/		regs.R3 = regs.R31;
		/* 821470B0h case    1:*/		return 0x821470B4;
		  /* 821470B4h */ case    2:  		/* bl -4428 */
		/* 821470B4h case    2:*/		regs.LR = 0x821470B8; return 0x82145F68;
		/* 821470B4h case    2:*/		return 0x821470B8;
		  /* 821470B8h */ case    3:  		/* addi R1, R1, 192 */
		/* 821470B8h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821470B8h case    3:*/		return 0x821470BC;
		  /* 821470BCh */ case    4:  		/* b -745016 */
		/* 821470BCh case    4:*/		return 0x82091284;
		/* 821470BCh case    4:*/		return 0x821470C0;
	}
	return 0x821470C0;
} // Block from 821470ACh-821470C0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821470C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821470C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821470C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821470C0);
		  /* 821470C0h */ case    0:  		/* mfspr R12, LR */
		/* 821470C0h case    0:*/		regs.R12 = regs.LR;
		/* 821470C0h case    0:*/		return 0x821470C4;
		  /* 821470C4h */ case    1:  		/* bl -745124 */
		/* 821470C4h case    1:*/		regs.LR = 0x821470C8; return 0x82091220;
		/* 821470C4h case    1:*/		return 0x821470C8;
		  /* 821470C8h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821470C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821470C8h case    2:*/		return 0x821470CC;
		  /* 821470CCh */ case    3:  		/* mr R3, R4 */
		/* 821470CCh case    3:*/		regs.R3 = regs.R4;
		/* 821470CCh case    3:*/		return 0x821470D0;
		  /* 821470D0h */ case    4:  		/* mr R31, R4 */
		/* 821470D0h case    4:*/		regs.R31 = regs.R4;
		/* 821470D0h case    4:*/		return 0x821470D4;
		  /* 821470D4h */ case    5:  		/* mr R17, R5 */
		/* 821470D4h case    5:*/		regs.R17 = regs.R5;
		/* 821470D4h case    5:*/		return 0x821470D8;
	}
	return 0x821470D8;
} // Block from 821470C0h-821470D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821470D8h
// Function '?ensure2@?$FastVector@UStatement@XGRAPHICS@@@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821470D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821470D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821470D8);
		  /* 821470D8h */ case    0:  		/* mr R15, R6 */
		/* 821470D8h case    0:*/		regs.R15 = regs.R6;
		/* 821470D8h case    0:*/		return 0x821470DC;
		  /* 821470DCh */ case    1:  		/* bl -4564 */
		/* 821470DCh case    1:*/		regs.LR = 0x821470E0; return 0x82145F08;
		/* 821470DCh case    1:*/		return 0x821470E0;
		  /* 821470E0h */ case    2:  		/* lis R11, -32253 */
		/* 821470E0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821470E0h case    2:*/		return 0x821470E4;
		  /* 821470E4h */ case    3:  		/* lis R10, -32253 */
		/* 821470E4h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821470E4h case    3:*/		return 0x821470E8;
		  /* 821470E8h */ case    4:  		/* addi R14, R11, 25988 */
		/* 821470E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R11,0x6584);
		/* 821470E8h case    4:*/		return 0x821470EC;
		  /* 821470ECh */ case    5:  		/* addi R16, R10, 25840 */
		/* 821470ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R10,0x64F0);
		/* 821470ECh case    5:*/		return 0x821470F0;
		  /* 821470F0h */ case    6:  		/* mr R3, R31 */
		/* 821470F0h case    6:*/		regs.R3 = regs.R31;
		/* 821470F0h case    6:*/		return 0x821470F4;
		  /* 821470F4h */ case    7:  		/* mr R5, R14 */
		/* 821470F4h case    7:*/		regs.R5 = regs.R14;
		/* 821470F4h case    7:*/		return 0x821470F8;
		  /* 821470F8h */ case    8:  		/* mr R4, R16 */
		/* 821470F8h case    8:*/		regs.R4 = regs.R16;
		/* 821470F8h case    8:*/		return 0x821470FC;
		  /* 821470FCh */ case    9:  		/* bl -4684 */
		/* 821470FCh case    9:*/		regs.LR = 0x82147100; return 0x82145EB0;
		/* 821470FCh case    9:*/		return 0x82147100;
		  /* 82147100h */ case   10:  		/* mr R3, R31 */
		/* 82147100h case   10:*/		regs.R3 = regs.R31;
		/* 82147100h case   10:*/		return 0x82147104;
		  /* 82147104h */ case   11:  		/* bl -1204 */
		/* 82147104h case   11:*/		regs.LR = 0x82147108; return 0x82146C50;
		/* 82147104h case   11:*/		return 0x82147108;
		  /* 82147108h */ case   12:  		/* lwz R10, <#[R17 + 4]> */
		/* 82147108h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000004) );
		/* 82147108h case   12:*/		return 0x8214710C;
		  /* 8214710Ch */ case   13:  		/* lwz R11, <#[R17]> */
		/* 8214710Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 8214710Ch case   13:*/		return 0x82147110;
		  /* 82147110h */ case   14:  		/* rlwinm R10, R10, 4, 0, 27 */
		/* 82147110h case   14:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R10);
		/* 82147110h case   14:*/		return 0x82147114;
		  /* 82147114h */ case   15:  		/* add R10, R10, R11 */
		/* 82147114h case   15:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82147114h case   15:*/		return 0x82147118;
		  /* 82147118h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 82147118h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82147118h case   16:*/		return 0x8214711C;
		  /* 8214711Ch */ case   17:  		/* bc 4, CR6_LT, 368 */
		/* 8214711Ch case   17:*/		if ( !regs.CR[6].lt ) { return 0x8214728C;  }
		/* 8214711Ch case   17:*/		return 0x82147120;
		  /* 82147120h */ case   18:  		/* lis R29, -32253 */
		/* 82147120h case   18:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8203);
		/* 82147120h case   18:*/		return 0x82147124;
		  /* 82147124h */ case   19:  		/* lis R30, -32253 */
		/* 82147124h case   19:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8203);
		/* 82147124h case   19:*/		return 0x82147128;
		  /* 82147128h */ case   20:  		/* addi R27, R11, 12 */
		/* 82147128h case   20:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xC);
		/* 82147128h case   20:*/		return 0x8214712C;
		  /* 8214712Ch */ case   21:  		/* lis R28, -32253 */
		/* 8214712Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8203);
		/* 8214712Ch case   21:*/		return 0x82147130;
		  /* 82147130h */ case   22:  		/* lis R3, -32253 */
		/* 82147130h case   22:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8203);
		/* 82147130h case   22:*/		return 0x82147134;
		  /* 82147134h */ case   23:  		/* lis R4, -32253 */
		/* 82147134h case   23:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8203);
		/* 82147134h case   23:*/		return 0x82147138;
		  /* 82147138h */ case   24:  		/* lis R5, -32253 */
		/* 82147138h case   24:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 82147138h case   24:*/		return 0x8214713C;
		  /* 8214713Ch */ case   25:  		/* lis R6, -32253 */
		/* 8214713Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 8214713Ch case   25:*/		return 0x82147140;
		  /* 82147140h */ case   26:  		/* lis R7, -32255 */
		/* 82147140h case   26:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8201);
		/* 82147140h case   26:*/		return 0x82147144;
		  /* 82147144h */ case   27:  		/* lis R8, -32255 */
		/* 82147144h case   27:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 82147144h case   27:*/		return 0x82147148;
		  /* 82147148h */ case   28:  		/* lis R9, -32253 */
		/* 82147148h case   28:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82147148h case   28:*/		return 0x8214714C;
		  /* 8214714Ch */ case   29:  		/* lis R10, -32253 */
		/* 8214714Ch case   29:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214714Ch case   29:*/		return 0x82147150;
		  /* 82147150h */ case   30:  		/* lis R11, -32253 */
		/* 82147150h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147150h case   30:*/		return 0x82147154;
		  /* 82147154h */ case   31:  		/* addi R21, R29, 25896 */
		/* 82147154h case   31:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R29,0x6528);
		/* 82147154h case   31:*/		return 0x82147158;
		  /* 82147158h */ case   32:  		/* addi R20, R30, 25984 */
		/* 82147158h case   32:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R30,0x6580);
		/* 82147158h case   32:*/		return 0x8214715C;
		  /* 8214715Ch */ case   33:  		/* addi R28, R28, 25712 */
		/* 8214715Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x6470);
		/* 8214715Ch case   33:*/		return 0x82147160;
		  /* 82147160h */ case   34:  		/* addi R30, R3, 25980 */
		/* 82147160h case   34:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x657C);
		/* 82147160h case   34:*/		return 0x82147164;
		  /* 82147164h */ case   35:  		/* addi R29, R4, 25972 */
		/* 82147164h case   35:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R4,0x6574);
		/* 82147164h case   35:*/		return 0x82147168;
	}
	return 0x82147168;
} // Block from 821470D8h-82147168h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82147168h
// Function '?ensure2@?$FastVector@UVariableInfo@XGRAPHICS@@@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147168);
		  /* 82147168h */ case    0:  		/* addi R26, R5, 26376 */
		/* 82147168h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R5,0x6708);
		/* 82147168h case    0:*/		return 0x8214716C;
		  /* 8214716Ch */ case    1:  		/* addi R25, R6, 25964 */
		/* 8214716Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R6,0x656C);
		/* 8214716Ch case    1:*/		return 0x82147170;
		  /* 82147170h */ case    2:  		/* addi R19, R7, 5216 */
		/* 82147170h case    2:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R7,0x1460);
		/* 82147170h case    2:*/		return 0x82147174;
		  /* 82147174h */ case    3:  		/* addi R18, R8, 5224 */
		/* 82147174h case    3:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R8,0x1468);
		/* 82147174h case    3:*/		return 0x82147178;
		  /* 82147178h */ case    4:  		/* addi R24, R9, 25952 */
		/* 82147178h case    4:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R9,0x6560);
		/* 82147178h case    4:*/		return 0x8214717C;
		  /* 8214717Ch */ case    5:  		/* addi R23, R10, 25944 */
		/* 8214717Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x6558);
		/* 8214717Ch case    5:*/		return 0x82147180;
		  /* 82147180h */ case    6:  		/* addi R22, R11, 25936 */
		/* 82147180h case    6:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x6550);
		/* 82147180h case    6:*/		return 0x82147184;
		  /* 82147184h */ case    7:  		/* lwz R11, <#[R27]> */
		/* 82147184h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82147184h case    7:*/		return 0x82147188;
		  /* 82147188h */ case    8:  		/* rlwinm R11, R11, 0, 16, 22 */
		/* 82147188h case    8:*/		cpu::op::rlwinm<0,0,16,22>(regs,&regs.R11,regs.R11);
		/* 82147188h case    8:*/		return 0x8214718C;
		  /* 8214718Ch */ case    9:  		/* cmplwi CR6, R11, 24576 */
		/* 8214718Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00006000);
		/* 8214718Ch case    9:*/		return 0x82147190;
		  /* 82147190h */ case   10:  		/* bc 12, CR6_EQ, 220 */
		/* 82147190h case   10:*/		if ( regs.CR[6].eq ) { return 0x8214726C;  }
		/* 82147190h case   10:*/		return 0x82147194;
		  /* 82147194h */ case   11:  		/* mr R3, R31 */
		/* 82147194h case   11:*/		regs.R3 = regs.R31;
		/* 82147194h case   11:*/		return 0x82147198;
		  /* 82147198h */ case   12:  		/* bl -4752 */
		/* 82147198h case   12:*/		regs.LR = 0x8214719C; return 0x82145F08;
		/* 82147198h case   12:*/		return 0x8214719C;
		  /* 8214719Ch */ case   13:  		/* mr R5, R22 */
		/* 8214719Ch case   13:*/		regs.R5 = regs.R22;
		/* 8214719Ch case   13:*/		return 0x821471A0;
		  /* 821471A0h */ case   14:  		/* mr R4, R16 */
		/* 821471A0h case   14:*/		regs.R4 = regs.R16;
		/* 821471A0h case   14:*/		return 0x821471A4;
		  /* 821471A4h */ case   15:  		/* mr R3, R31 */
		/* 821471A4h case   15:*/		regs.R3 = regs.R31;
		/* 821471A4h case   15:*/		return 0x821471A8;
		  /* 821471A8h */ case   16:  		/* bl -4856 */
		/* 821471A8h case   16:*/		regs.LR = 0x821471AC; return 0x82145EB0;
		/* 821471A8h case   16:*/		return 0x821471AC;
		  /* 821471ACh */ case   17:  		/* mr R5, R23 */
		/* 821471ACh case   17:*/		regs.R5 = regs.R23;
		/* 821471ACh case   17:*/		return 0x821471B0;
		  /* 821471B0h */ case   18:  		/* mr R4, R28 */
		/* 821471B0h case   18:*/		regs.R4 = regs.R28;
		/* 821471B0h case   18:*/		return 0x821471B4;
		  /* 821471B4h */ case   19:  		/* lwz R6, <#[R27 - 12]> */
		/* 821471B4h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0xFFFFFFF4) );
		/* 821471B4h case   19:*/		return 0x821471B8;
		  /* 821471B8h */ case   20:  		/* mr R3, R31 */
		/* 821471B8h case   20:*/		regs.R3 = regs.R31;
		/* 821471B8h case   20:*/		return 0x821471BC;
		  /* 821471BCh */ case   21:  		/* bl -4876 */
		/* 821471BCh case   21:*/		regs.LR = 0x821471C0; return 0x82145EB0;
		/* 821471BCh case   21:*/		return 0x821471C0;
		  /* 821471C0h */ case   22:  		/* mr R5, R24 */
		/* 821471C0h case   22:*/		regs.R5 = regs.R24;
		/* 821471C0h case   22:*/		return 0x821471C4;
		  /* 821471C4h */ case   23:  		/* mr R4, R28 */
		/* 821471C4h case   23:*/		regs.R4 = regs.R28;
		/* 821471C4h case   23:*/		return 0x821471C8;
		  /* 821471C8h */ case   24:  		/* lwz R6, <#[R27 - 8]> */
		/* 821471C8h case   24:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0xFFFFFFF8) );
		/* 821471C8h case   24:*/		return 0x821471CC;
		  /* 821471CCh */ case   25:  		/* mr R3, R31 */
		/* 821471CCh case   25:*/		regs.R3 = regs.R31;
		/* 821471CCh case   25:*/		return 0x821471D0;
		  /* 821471D0h */ case   26:  		/* bl -4896 */
		/* 821471D0h case   26:*/		regs.LR = 0x821471D4; return 0x82145EB0;
		/* 821471D0h case   26:*/		return 0x821471D4;
		  /* 821471D4h */ case   27:  		/* lwz R11, <#[R27]> */
		/* 821471D4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821471D4h case   27:*/		return 0x821471D8;
		  /* 821471D8h */ case   28:  		/* mr R5, R18 */
		/* 821471D8h case   28:*/		regs.R5 = regs.R18;
		/* 821471D8h case   28:*/		return 0x821471DC;
		  /* 821471DCh */ case   29:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 821471DCh case   29:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 821471DCh case   29:*/		return 0x821471E0;
		  /* 821471E0h */ case   30:  		/* bc 4, CR0_EQ, 8 */
		/* 821471E0h case   30:*/		if ( !regs.CR[0].eq ) { return 0x821471E8;  }
		/* 821471E0h case   30:*/		return 0x821471E4;
		  /* 821471E4h */ case   31:  		/* mr R5, R19 */
		/* 821471E4h case   31:*/		regs.R5 = regs.R19;
		/* 821471E4h case   31:*/		return 0x821471E8;
	}
	return 0x821471E8;
} // Block from 82147168h-821471E8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821471E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821471E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821471E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821471E8);
		  /* 821471E8h */ case    0:  		/* mr R4, R25 */
		/* 821471E8h case    0:*/		regs.R4 = regs.R25;
		/* 821471E8h case    0:*/		return 0x821471EC;
		  /* 821471ECh */ case    1:  		/* mr R3, R31 */
		/* 821471ECh case    1:*/		regs.R3 = regs.R31;
		/* 821471ECh case    1:*/		return 0x821471F0;
		  /* 821471F0h */ case    2:  		/* bl -4392 */
		/* 821471F0h case    2:*/		regs.LR = 0x821471F4; return 0x821460C8;
		/* 821471F0h case    2:*/		return 0x821471F4;
		  /* 821471F4h */ case    3:  		/* lwz R11, <#[R27 - 4]> */
		/* 821471F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0xFFFFFFFC) );
		/* 821471F4h case    3:*/		return 0x821471F8;
	}
	return 0x821471F8;
} // Block from 821471E8h-821471F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821471F8h
// Function '?ensure2@?$FastVector@UFuncEntryExitInfo@XGRAPHICS@@@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821471F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821471F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821471F8);
		  /* 821471F8h */ case    0:  		/* lwz R10, <#[R27]> */
		/* 821471F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821471F8h case    0:*/		return 0x821471FC;
		  /* 821471FCh */ case    1:  		/* mr R4, R29 */
		/* 821471FCh case    1:*/		regs.R4 = regs.R29;
		/* 821471FCh case    1:*/		return 0x82147200;
		  /* 82147200h */ case    2:  		/* rlwinm R9, R11, 2, 28, 29 */
		/* 82147200h case    2:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R9,regs.R11);
		/* 82147200h case    2:*/		return 0x82147204;
		  /* 82147204h */ case    3:  		/* addi R3, R1, 80 */
		/* 82147204h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82147204h case    3:*/		return 0x82147208;
		  /* 82147208h */ case    4:  		/* rlwinm R6, R11, 30, 2, 31 */
		/* 82147208h case    4:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R6,regs.R11);
		/* 82147208h case    4:*/		return 0x8214720C;
		  /* 8214720Ch */ case    5:  		/* rlwinm R5, R10, 23, 25, 31 */
		/* 8214720Ch case    5:*/		cpu::op::rlwinm<0,23,25,31>(regs,&regs.R5,regs.R10);
		/* 8214720Ch case    5:*/		return 0x82147210;
		  /* 82147210h */ case    6:  		/* lwzx R7, <#[R9 + R26]> */
		/* 82147210h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R26 + 0x00000000) );
		/* 82147210h case    6:*/		return 0x82147214;
		  /* 82147214h */ case    7:  		/* bl 1186476 */
		/* 82147214h case    7:*/		regs.LR = 0x82147218; return 0x82268CC0;
		/* 82147214h case    7:*/		return 0x82147218;
		  /* 82147218h */ case    8:  		/* mr R4, R30 */
		/* 82147218h case    8:*/		regs.R4 = regs.R30;
		/* 82147218h case    8:*/		return 0x8214721C;
		  /* 8214721Ch */ case    9:  		/* addi R5, R1, 80 */
		/* 8214721Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8214721Ch case    9:*/		return 0x82147220;
		  /* 82147220h */ case   10:  		/* mr R3, R31 */
		/* 82147220h case   10:*/		regs.R3 = regs.R31;
		/* 82147220h case   10:*/		return 0x82147224;
		  /* 82147224h */ case   11:  		/* bl -4444 */
		/* 82147224h case   11:*/		regs.LR = 0x82147228; return 0x821460C8;
		/* 82147224h case   11:*/		return 0x82147228;
		  /* 82147228h */ case   12:  		/* lwz R11, <#[R27]> */
		/* 82147228h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82147228h case   12:*/		return 0x8214722C;
		  /* 8214722Ch */ case   13:  		/* mr R5, R18 */
		/* 8214722Ch case   13:*/		regs.R5 = regs.R18;
		/* 8214722Ch case   13:*/		return 0x82147230;
		  /* 82147230h */ case   14:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 82147230h case   14:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82147230h case   14:*/		return 0x82147234;
		  /* 82147234h */ case   15:  		/* bc 4, CR0_EQ, 8 */
		/* 82147234h case   15:*/		if ( !regs.CR[0].eq ) { return 0x8214723C;  }
		/* 82147234h case   15:*/		return 0x82147238;
		  /* 82147238h */ case   16:  		/* mr R5, R19 */
		/* 82147238h case   16:*/		regs.R5 = regs.R19;
		/* 82147238h case   16:*/		return 0x8214723C;
	}
	return 0x8214723C;
} // Block from 821471F8h-8214723Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214723Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214723C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214723C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214723C);
		  /* 8214723Ch */ case    0:  		/* mr R4, R20 */
		/* 8214723Ch case    0:*/		regs.R4 = regs.R20;
		/* 8214723Ch case    0:*/		return 0x82147240;
		  /* 82147240h */ case    1:  		/* mr R3, R31 */
		/* 82147240h case    1:*/		regs.R3 = regs.R31;
		/* 82147240h case    1:*/		return 0x82147244;
		  /* 82147244h */ case    2:  		/* bl -4476 */
		/* 82147244h case    2:*/		regs.LR = 0x82147248; return 0x821460C8;
		/* 82147244h case    2:*/		return 0x82147248;
		  /* 82147248h */ case    3:  		/* lwz R11, <#[R27]> */
		/* 82147248h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82147248h case    3:*/		return 0x8214724C;
		  /* 8214724Ch */ case    4:  		/* mr R4, R21 */
		/* 8214724Ch case    4:*/		regs.R4 = regs.R21;
		/* 8214724Ch case    4:*/		return 0x82147250;
		  /* 82147250h */ case    5:  		/* mr R5, R15 */
		/* 82147250h case    5:*/		regs.R5 = regs.R15;
		/* 82147250h case    5:*/		return 0x82147254;
		  /* 82147254h */ case    6:  		/* mr R3, R31 */
		/* 82147254h case    6:*/		regs.R3 = regs.R31;
		/* 82147254h case    6:*/		return 0x82147258;
		  /* 82147258h */ case    7:  		/* rlwinm R7, R11, 16, 19, 31 */
		/* 82147258h case    7:*/		cpu::op::rlwinm<0,16,19,31>(regs,&regs.R7,regs.R11);
		/* 82147258h case    7:*/		return 0x8214725C;
		  /* 8214725Ch */ case    8:  		/* rlwinm R6, R11, 3, 31, 31 */
		/* 8214725Ch case    8:*/		cpu::op::rlwinm<0,3,31,31>(regs,&regs.R6,regs.R11);
		/* 8214725Ch case    8:*/		return 0x82147260;
		  /* 82147260h */ case    9:  		/* bl -4648 */
		/* 82147260h case    9:*/		regs.LR = 0x82147264; return 0x82146038;
		/* 82147260h case    9:*/		return 0x82147264;
		  /* 82147264h */ case   10:  		/* mr R3, R31 */
		/* 82147264h case   10:*/		regs.R3 = regs.R31;
		/* 82147264h case   10:*/		return 0x82147268;
		  /* 82147268h */ case   11:  		/* bl -1640 */
		/* 82147268h case   11:*/		regs.LR = 0x8214726C; return 0x82146C00;
		/* 82147268h case   11:*/		return 0x8214726C;
	}
	return 0x8214726C;
} // Block from 8214723Ch-8214726Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214726Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214726C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214726C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214726C);
		  /* 8214726Ch */ case    0:  		/* lwz R11, <#[R17 + 4]> */
		/* 8214726Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000004) );
		/* 8214726Ch case    0:*/		return 0x82147270;
		  /* 82147270h */ case    1:  		/* addi R27, R27, 16 */
		/* 82147270h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x10);
		/* 82147270h case    1:*/		return 0x82147274;
		  /* 82147274h */ case    2:  		/* lwz R10, <#[R17]> */
		/* 82147274h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000000) );
		/* 82147274h case    2:*/		return 0x82147278;
		  /* 82147278h */ case    3:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 82147278h case    3:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 82147278h case    3:*/		return 0x8214727C;
		  /* 8214727Ch */ case    4:  		/* addi R9, R27, -12 */
		/* 8214727Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0xFFFFFFF4);
		/* 8214727Ch case    4:*/		return 0x82147280;
		  /* 82147280h */ case    5:  		/* add R11, R11, R10 */
		/* 82147280h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82147280h case    5:*/		return 0x82147284;
		  /* 82147284h */ case    6:  		/* cmplw CR6, R9, R11 */
		/* 82147284h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82147284h case    6:*/		return 0x82147288;
	}
	return 0x82147288;
} // Block from 8214726Ch-82147288h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82147288h
// Function '?ensure2@?$FastVector@ULiteralBool@XGRAPHICS@@@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147288);
		  /* 82147288h */ case    0:  		/* bc 12, CR6_LT, -260 */
		/* 82147288h case    0:*/		if ( regs.CR[6].lt ) { return 0x82147184;  }
		/* 82147288h case    0:*/		return 0x8214728C;
	}
	return 0x8214728C;
} // Block from 82147288h-8214728Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214728Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214728C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214728C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214728C);
		  /* 8214728Ch */ case    0:  		/* mr R4, R14 */
		/* 8214728Ch case    0:*/		regs.R4 = regs.R14;
		/* 8214728Ch case    0:*/		return 0x82147290;
		  /* 82147290h */ case    1:  		/* mr R3, R31 */
		/* 82147290h case    1:*/		regs.R3 = regs.R31;
		/* 82147290h case    1:*/		return 0x82147294;
		  /* 82147294h */ case    2:  		/* bl -4908 */
		/* 82147294h case    2:*/		regs.LR = 0x82147298; return 0x82145F68;
		/* 82147294h case    2:*/		return 0x82147298;
		  /* 82147298h */ case    3:  		/* addi R1, R1, 240 */
		/* 82147298h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 82147298h case    3:*/		return 0x8214729C;
		  /* 8214729Ch */ case    4:  		/* b -745516 */
		/* 8214729Ch case    4:*/		return 0x82091270;
		/* 8214729Ch case    4:*/		return 0x821472A0;
	}
	return 0x821472A0;
} // Block from 8214728Ch-821472A0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821472A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821472A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821472A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821472A0);
		  /* 821472A0h */ case    0:  		/* mfspr R12, LR */
		/* 821472A0h case    0:*/		regs.R12 = regs.LR;
		/* 821472A0h case    0:*/		return 0x821472A4;
		  /* 821472A4h */ case    1:  		/* bl -745568 */
		/* 821472A4h case    1:*/		regs.LR = 0x821472A8; return 0x82091244;
		/* 821472A4h case    1:*/		return 0x821472A8;
		  /* 821472A8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821472A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821472A8h case    2:*/		return 0x821472AC;
		  /* 821472ACh */ case    3:  		/* mr R3, R4 */
		/* 821472ACh case    3:*/		regs.R3 = regs.R4;
		/* 821472ACh case    3:*/		return 0x821472B0;
		  /* 821472B0h */ case    4:  		/* mr R31, R4 */
		/* 821472B0h case    4:*/		regs.R31 = regs.R4;
		/* 821472B0h case    4:*/		return 0x821472B4;
		  /* 821472B4h */ case    5:  		/* mr R30, R5 */
		/* 821472B4h case    5:*/		regs.R30 = regs.R5;
		/* 821472B4h case    5:*/		return 0x821472B8;
		  /* 821472B8h */ case    6:  		/* bl -5040 */
		/* 821472B8h case    6:*/		regs.LR = 0x821472BC; return 0x82145F08;
		/* 821472B8h case    6:*/		return 0x821472BC;
		  /* 821472BCh */ case    7:  		/* lis R10, -32253 */
		/* 821472BCh case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821472BCh case    7:*/		return 0x821472C0;
		  /* 821472C0h */ case    8:  		/* lis R11, -32253 */
		/* 821472C0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821472C0h case    8:*/		return 0x821472C4;
		  /* 821472C4h */ case    9:  		/* addi R23, R10, 26020 */
		/* 821472C4h case    9:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x65A4);
		/* 821472C4h case    9:*/		return 0x821472C8;
		  /* 821472C8h */ case   10:  		/* addi R27, R11, 25840 */
		/* 821472C8h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x64F0);
		/* 821472C8h case   10:*/		return 0x821472CC;
		  /* 821472CCh */ case   11:  		/* mr R3, R31 */
		/* 821472CCh case   11:*/		regs.R3 = regs.R31;
		/* 821472CCh case   11:*/		return 0x821472D0;
		  /* 821472D0h */ case   12:  		/* mr R5, R23 */
		/* 821472D0h case   12:*/		regs.R5 = regs.R23;
		/* 821472D0h case   12:*/		return 0x821472D4;
		  /* 821472D4h */ case   13:  		/* mr R4, R27 */
		/* 821472D4h case   13:*/		regs.R4 = regs.R27;
		/* 821472D4h case   13:*/		return 0x821472D8;
		  /* 821472D8h */ case   14:  		/* bl -5160 */
		/* 821472D8h case   14:*/		regs.LR = 0x821472DC; return 0x82145EB0;
		/* 821472D8h case   14:*/		return 0x821472DC;
		  /* 821472DCh */ case   15:  		/* mr R3, R31 */
		/* 821472DCh case   15:*/		regs.R3 = regs.R31;
		/* 821472DCh case   15:*/		return 0x821472E0;
		  /* 821472E0h */ case   16:  		/* bl -1680 */
		/* 821472E0h case   16:*/		regs.LR = 0x821472E4; return 0x82146C50;
		/* 821472E0h case   16:*/		return 0x821472E4;
		  /* 821472E4h */ case   17:  		/* lwz R10, <#[R30 + 4]> */
		/* 821472E4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821472E4h case   17:*/		return 0x821472E8;
		  /* 821472E8h */ case   18:  		/* lwz R11, <#[R30]> */
		/* 821472E8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821472E8h case   18:*/		return 0x821472EC;
		  /* 821472ECh */ case   19:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821472ECh case   19:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821472ECh case   19:*/		return 0x821472F0;
		  /* 821472F0h */ case   20:  		/* mr R29, R11 */
		/* 821472F0h case   20:*/		regs.R29 = regs.R11;
		/* 821472F0h case   20:*/		return 0x821472F4;
		  /* 821472F4h */ case   21:  		/* add R10, R10, R11 */
		/* 821472F4h case   21:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821472F4h case   21:*/		return 0x821472F8;
		  /* 821472F8h */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 821472F8h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821472F8h case   22:*/		return 0x821472FC;
		  /* 821472FCh */ case   23:  		/* bc 4, CR6_LT, 156 */
		/* 821472FCh case   23:*/		if ( !regs.CR[6].lt ) { return 0x82147398;  }
		/* 821472FCh case   23:*/		return 0x82147300;
		  /* 82147300h */ case   24:  		/* lis R8, -32253 */
		/* 82147300h case   24:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82147300h case   24:*/		return 0x82147304;
		  /* 82147304h */ case   25:  		/* lis R9, -32253 */
		/* 82147304h case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82147304h case   25:*/		return 0x82147308;
		  /* 82147308h */ case   26:  		/* lis R10, -32253 */
		/* 82147308h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82147308h case   26:*/		return 0x8214730C;
		  /* 8214730Ch */ case   27:  		/* lis R11, -32253 */
		/* 8214730Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214730Ch case   27:*/		return 0x82147310;
		  /* 82147310h */ case   28:  		/* addi R28, R8, 25712 */
		/* 82147310h case   28:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R8,0x6470);
		/* 82147310h case   28:*/		return 0x82147314;
		  /* 82147314h */ case   29:  		/* addi R26, R9, 26008 */
		/* 82147314h case   29:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R9,0x6598);
		/* 82147314h case   29:*/		return 0x82147318;
	}
	return 0x82147318;
} // Block from 821472A0h-82147318h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82147318h
// Function '?ensure2@?$FastVector@UFuncInfo@XGRAPHICS@@@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147318);
		  /* 82147318h */ case    0:  		/* addi R25, R10, 25856 */
		/* 82147318h case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0x6500);
		/* 82147318h case    0:*/		return 0x8214731C;
		  /* 8214731Ch */ case    1:  		/* addi R24, R11, 25900 */
		/* 8214731Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x652C);
		/* 8214731Ch case    1:*/		return 0x82147320;
		  /* 82147320h */ case    2:  		/* lwz R11, <#[R29 + 4]> */
		/* 82147320h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82147320h case    2:*/		return 0x82147324;
		  /* 82147324h */ case    3:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82147324h case    3:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82147324h case    3:*/		return 0x82147328;
		  /* 82147328h */ case    4:  		/* bc 12, CR0_EQ, 84 */
		/* 82147328h case    4:*/		if ( regs.CR[0].eq ) { return 0x8214737C;  }
		/* 82147328h case    4:*/		return 0x8214732C;
		  /* 8214732Ch */ case    5:  		/* mr R3, R31 */
		/* 8214732Ch case    5:*/		regs.R3 = regs.R31;
		/* 8214732Ch case    5:*/		return 0x82147330;
		  /* 82147330h */ case    6:  		/* bl -5160 */
		/* 82147330h case    6:*/		regs.LR = 0x82147334; return 0x82145F08;
		/* 82147330h case    6:*/		return 0x82147334;
		  /* 82147334h */ case    7:  		/* mr R5, R24 */
		/* 82147334h case    7:*/		regs.R5 = regs.R24;
		/* 82147334h case    7:*/		return 0x82147338;
		  /* 82147338h */ case    8:  		/* mr R4, R27 */
		/* 82147338h case    8:*/		regs.R4 = regs.R27;
		/* 82147338h case    8:*/		return 0x8214733C;
		  /* 8214733Ch */ case    9:  		/* mr R3, R31 */
		/* 8214733Ch case    9:*/		regs.R3 = regs.R31;
		/* 8214733Ch case    9:*/		return 0x82147340;
		  /* 82147340h */ case   10:  		/* bl -5264 */
		/* 82147340h case   10:*/		regs.LR = 0x82147344; return 0x82145EB0;
		/* 82147340h case   10:*/		return 0x82147344;
		  /* 82147344h */ case   11:  		/* lwz R11, <#[R30]> */
		/* 82147344h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82147344h case   11:*/		return 0x82147348;
		  /* 82147348h */ case   12:  		/* mr R5, R25 */
		/* 82147348h case   12:*/		regs.R5 = regs.R25;
		/* 82147348h case   12:*/		return 0x8214734C;
		  /* 8214734Ch */ case   13:  		/* subf R11, R11, R29 */
		/* 8214734Ch case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 8214734Ch case   13:*/		return 0x82147350;
		  /* 82147350h */ case   14:  		/* mr R4, R28 */
		/* 82147350h case   14:*/		regs.R4 = regs.R28;
		/* 82147350h case   14:*/		return 0x82147354;
		  /* 82147354h */ case   15:  		/* mr R3, R31 */
		/* 82147354h case   15:*/		regs.R3 = regs.R31;
		/* 82147354h case   15:*/		return 0x82147358;
		  /* 82147358h */ case   16:  		/* srawi R6, R11, 3 */
		/* 82147358h case   16:*/		cpu::op::srawi<0,3>(regs,&regs.R6,regs.R11);
		/* 82147358h case   16:*/		return 0x8214735C;
		  /* 8214735Ch */ case   17:  		/* bl -5292 */
		/* 8214735Ch case   17:*/		regs.LR = 0x82147360; return 0x82145EB0;
		/* 8214735Ch case   17:*/		return 0x82147360;
		  /* 82147360h */ case   18:  		/* mr R5, R26 */
		/* 82147360h case   18:*/		regs.R5 = regs.R26;
		/* 82147360h case   18:*/		return 0x82147364;
		  /* 82147364h */ case   19:  		/* mr R4, R28 */
		/* 82147364h case   19:*/		regs.R4 = regs.R28;
		/* 82147364h case   19:*/		return 0x82147368;
		  /* 82147368h */ case   20:  		/* lwz R6, <#[R29]> */
		/* 82147368h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000000) );
		/* 82147368h case   20:*/		return 0x8214736C;
		  /* 8214736Ch */ case   21:  		/* mr R3, R31 */
		/* 8214736Ch case   21:*/		regs.R3 = regs.R31;
		/* 8214736Ch case   21:*/		return 0x82147370;
		  /* 82147370h */ case   22:  		/* bl -5312 */
		/* 82147370h case   22:*/		regs.LR = 0x82147374; return 0x82145EB0;
		/* 82147370h case   22:*/		return 0x82147374;
		  /* 82147374h */ case   23:  		/* mr R3, R31 */
		/* 82147374h case   23:*/		regs.R3 = regs.R31;
		/* 82147374h case   23:*/		return 0x82147378;
		  /* 82147378h */ case   24:  		/* bl -1912 */
		/* 82147378h case   24:*/		regs.LR = 0x8214737C; return 0x82146C00;
		/* 82147378h case   24:*/		return 0x8214737C;
	}
	return 0x8214737C;
} // Block from 82147318h-8214737Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8214737Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214737C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214737C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214737C);
		  /* 8214737Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214737Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214737Ch case    0:*/		return 0x82147380;
		  /* 82147380h */ case    1:  		/* addi R29, R29, 8 */
		/* 82147380h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x8);
		/* 82147380h case    1:*/		return 0x82147384;
		  /* 82147384h */ case    2:  		/* lwz R10, <#[R30]> */
		/* 82147384h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82147384h case    2:*/		return 0x82147388;
		  /* 82147388h */ case    3:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82147388h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82147388h case    3:*/		return 0x8214738C;
		  /* 8214738Ch */ case    4:  		/* add R11, R11, R10 */
		/* 8214738Ch case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214738Ch case    4:*/		return 0x82147390;
		  /* 82147390h */ case    5:  		/* cmplw CR6, R29, R11 */
		/* 82147390h case    5:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82147390h case    5:*/		return 0x82147394;
		  /* 82147394h */ case    6:  		/* bc 12, CR6_LT, -116 */
		/* 82147394h case    6:*/		if ( regs.CR[6].lt ) { return 0x82147320;  }
		/* 82147394h case    6:*/		return 0x82147398;
	}
	return 0x82147398;
} // Block from 8214737Ch-82147398h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82147398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147398);
		  /* 82147398h */ case    0:  		/* mr R4, R23 */
		/* 82147398h case    0:*/		regs.R4 = regs.R23;
		/* 82147398h case    0:*/		return 0x8214739C;
		  /* 8214739Ch */ case    1:  		/* mr R3, R31 */
		/* 8214739Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214739Ch case    1:*/		return 0x821473A0;
		  /* 821473A0h */ case    2:  		/* bl -5176 */
		/* 821473A0h case    2:*/		regs.LR = 0x821473A4; return 0x82145F68;
		/* 821473A0h case    2:*/		return 0x821473A4;
		  /* 821473A4h */ case    3:  		/* addi R1, R1, 160 */
		/* 821473A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821473A4h case    3:*/		return 0x821473A8;
	}
	return 0x821473A8;
} // Block from 82147398h-821473A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821473A8h
// Function '?ensure2@?$FastVector@UFile@XGRAPHICS@@@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821473A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821473A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821473A8);
		  /* 821473A8h */ case    0:  		/* b -745748 */
		/* 821473A8h case    0:*/		return 0x82091294;
		/* 821473A8h case    0:*/		return 0x821473AC;
		  /* 821473ACh */ case    1:  		/* nop */
		/* 821473ACh case    1:*/		cpu::op::nop();
		/* 821473ACh case    1:*/		return 0x821473B0;
	}
	return 0x821473B0;
} // Block from 821473A8h-821473B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821473B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821473B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821473B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821473B0);
		  /* 821473B0h */ case    0:  		/* mfspr R12, LR */
		/* 821473B0h case    0:*/		regs.R12 = regs.LR;
		/* 821473B0h case    0:*/		return 0x821473B4;
		  /* 821473B4h */ case    1:  		/* bl -745860 */
		/* 821473B4h case    1:*/		regs.LR = 0x821473B8; return 0x82091230;
		/* 821473B4h case    1:*/		return 0x821473B8;
		  /* 821473B8h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 821473B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821473B8h case    2:*/		return 0x821473BC;
		  /* 821473BCh */ case    3:  		/* mr R3, R4 */
		/* 821473BCh case    3:*/		regs.R3 = regs.R4;
		/* 821473BCh case    3:*/		return 0x821473C0;
		  /* 821473C0h */ case    4:  		/* mr R31, R4 */
		/* 821473C0h case    4:*/		regs.R31 = regs.R4;
		/* 821473C0h case    4:*/		return 0x821473C4;
		  /* 821473C4h */ case    5:  		/* mr R28, R5 */
		/* 821473C4h case    5:*/		regs.R28 = regs.R5;
		/* 821473C4h case    5:*/		return 0x821473C8;
		  /* 821473C8h */ case    6:  		/* mr R20, R6 */
		/* 821473C8h case    6:*/		regs.R20 = regs.R6;
		/* 821473C8h case    6:*/		return 0x821473CC;
		  /* 821473CCh */ case    7:  		/* bl -5316 */
		/* 821473CCh case    7:*/		regs.LR = 0x821473D0; return 0x82145F08;
		/* 821473CCh case    7:*/		return 0x821473D0;
		  /* 821473D0h */ case    8:  		/* lis R10, -32253 */
		/* 821473D0h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821473D0h case    8:*/		return 0x821473D4;
		  /* 821473D4h */ case    9:  		/* lis R11, -32253 */
		/* 821473D4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821473D4h case    9:*/		return 0x821473D8;
		  /* 821473D8h */ case   10:  		/* addi R18, R10, 26056 */
		/* 821473D8h case   10:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R10,0x65C8);
		/* 821473D8h case   10:*/		return 0x821473DC;
		  /* 821473DCh */ case   11:  		/* addi R19, R11, 25840 */
		/* 821473DCh case   11:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0x64F0);
		/* 821473DCh case   11:*/		return 0x821473E0;
		  /* 821473E0h */ case   12:  		/* mr R3, R31 */
		/* 821473E0h case   12:*/		regs.R3 = regs.R31;
		/* 821473E0h case   12:*/		return 0x821473E4;
		  /* 821473E4h */ case   13:  		/* mr R5, R18 */
		/* 821473E4h case   13:*/		regs.R5 = regs.R18;
		/* 821473E4h case   13:*/		return 0x821473E8;
		  /* 821473E8h */ case   14:  		/* mr R4, R19 */
		/* 821473E8h case   14:*/		regs.R4 = regs.R19;
		/* 821473E8h case   14:*/		return 0x821473EC;
		  /* 821473ECh */ case   15:  		/* bl -5436 */
		/* 821473ECh case   15:*/		regs.LR = 0x821473F0; return 0x82145EB0;
		/* 821473ECh case   15:*/		return 0x821473F0;
		  /* 821473F0h */ case   16:  		/* mr R3, R31 */
		/* 821473F0h case   16:*/		regs.R3 = regs.R31;
		/* 821473F0h case   16:*/		return 0x821473F4;
		  /* 821473F4h */ case   17:  		/* bl -1956 */
		/* 821473F4h case   17:*/		regs.LR = 0x821473F8; return 0x82146C50;
		/* 821473F4h case   17:*/		return 0x821473F8;
		  /* 821473F8h */ case   18:  		/* lwz R10, <#[R28 + 4]> */
		/* 821473F8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 821473F8h case   18:*/		return 0x821473FC;
		  /* 821473FCh */ case   19:  		/* lwz R11, <#[R28]> */
		/* 821473FCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821473FCh case   19:*/		return 0x82147400;
		  /* 82147400h */ case   20:  		/* mulli R10, R10, 12 */
		/* 82147400h case   20:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0xC);
		/* 82147400h case   20:*/		return 0x82147404;
		  /* 82147404h */ case   21:  		/* add R10, R10, R11 */
		/* 82147404h case   21:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82147404h case   21:*/		return 0x82147408;
		  /* 82147408h */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 82147408h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82147408h case   22:*/		return 0x8214740C;
		  /* 8214740Ch */ case   23:  		/* bc 4, CR6_LT, 236 */
		/* 8214740Ch case   23:*/		if ( !regs.CR[6].lt ) { return 0x821474F8;  }
		/* 8214740Ch case   23:*/		return 0x82147410;
		  /* 82147410h */ case   24:  		/* addi R30, R11, 8 */
		/* 82147410h case   24:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x8);
		/* 82147410h case   24:*/		return 0x82147414;
		  /* 82147414h */ case   25:  		/* lis R4, -32253 */
		/* 82147414h case   25:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8203);
		/* 82147414h case   25:*/		return 0x82147418;
		  /* 82147418h */ case   26:  		/* lis R5, -32253 */
		/* 82147418h case   26:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 82147418h case   26:*/		return 0x8214741C;
		  /* 8214741Ch */ case   27:  		/* lis R6, -32253 */
		/* 8214741Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 8214741Ch case   27:*/		return 0x82147420;
		  /* 82147420h */ case   28:  		/* lis R7, -32253 */
		/* 82147420h case   28:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82147420h case   28:*/		return 0x82147424;
		  /* 82147424h */ case   29:  		/* lis R8, -32255 */
		/* 82147424h case   29:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 82147424h case   29:*/		return 0x82147428;
		  /* 82147428h */ case   30:  		/* lis R9, -32255 */
		/* 82147428h case   30:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 82147428h case   30:*/		return 0x8214742C;
		  /* 8214742Ch */ case   31:  		/* lis R10, -32253 */
		/* 8214742Ch case   31:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214742Ch case   31:*/		return 0x82147430;
		  /* 82147430h */ case   32:  		/* lis R11, -32253 */
		/* 82147430h case   32:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147430h case   32:*/		return 0x82147434;
		  /* 82147434h */ case   33:  		/* addi R29, R4, 25712 */
		/* 82147434h case   33:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R4,0x6470);
		/* 82147434h case   33:*/		return 0x82147438;
	}
	return 0x82147438;
} // Block from 821473B0h-82147438h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82147438h
// Function '?ensure2@?$FastVector@UPDBShader@XGRAPHICS@@@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147438);
		  /* 82147438h */ case    0:  		/* addi R27, R5, 25896 */
		/* 82147438h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R5,0x6528);
		/* 82147438h case    0:*/		return 0x8214743C;
		  /* 8214743Ch */ case    1:  		/* addi R26, R6, 26048 */
		/* 8214743Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R6,0x65C0);
		/* 8214743Ch case    1:*/		return 0x82147440;
		  /* 82147440h */ case    2:  		/* addi R25, R7, 26040 */
		/* 82147440h case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R7,0x65B8);
		/* 82147440h case    2:*/		return 0x82147444;
		  /* 82147444h */ case    3:  		/* addi R22, R8, 5216 */
		/* 82147444h case    3:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R8,0x1460);
		/* 82147444h case    3:*/		return 0x82147448;
		  /* 82147448h */ case    4:  		/* addi R21, R9, 5224 */
		/* 82147448h case    4:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R9,0x1468);
		/* 82147448h case    4:*/		return 0x8214744C;
		  /* 8214744Ch */ case    5:  		/* addi R24, R10, 25856 */
		/* 8214744Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0x6500);
		/* 8214744Ch case    5:*/		return 0x82147450;
		  /* 82147450h */ case    6:  		/* addi R23, R11, 26028 */
		/* 82147450h case    6:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x65AC);
		/* 82147450h case    6:*/		return 0x82147454;
		  /* 82147454h */ case    7:  		/* mr R3, R31 */
		/* 82147454h case    7:*/		regs.R3 = regs.R31;
		/* 82147454h case    7:*/		return 0x82147458;
		  /* 82147458h */ case    8:  		/* bl -5456 */
		/* 82147458h case    8:*/		regs.LR = 0x8214745C; return 0x82145F08;
		/* 82147458h case    8:*/		return 0x8214745C;
		  /* 8214745Ch */ case    9:  		/* mr R5, R23 */
		/* 8214745Ch case    9:*/		regs.R5 = regs.R23;
		/* 8214745Ch case    9:*/		return 0x82147460;
		  /* 82147460h */ case   10:  		/* mr R4, R19 */
		/* 82147460h case   10:*/		regs.R4 = regs.R19;
		/* 82147460h case   10:*/		return 0x82147464;
		  /* 82147464h */ case   11:  		/* mr R3, R31 */
		/* 82147464h case   11:*/		regs.R3 = regs.R31;
		/* 82147464h case   11:*/		return 0x82147468;
		  /* 82147468h */ case   12:  		/* bl -5560 */
		/* 82147468h case   12:*/		regs.LR = 0x8214746C; return 0x82145EB0;
		/* 82147468h case   12:*/		return 0x8214746C;
		  /* 8214746Ch */ case   13:  		/* mr R5, R24 */
		/* 8214746Ch case   13:*/		regs.R5 = regs.R24;
		/* 8214746Ch case   13:*/		return 0x82147470;
		  /* 82147470h */ case   14:  		/* mr R4, R29 */
		/* 82147470h case   14:*/		regs.R4 = regs.R29;
		/* 82147470h case   14:*/		return 0x82147474;
		  /* 82147474h */ case   15:  		/* lwz R6, <#[R30 - 8]> */
		/* 82147474h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 82147474h case   15:*/		return 0x82147478;
		  /* 82147478h */ case   16:  		/* mr R3, R31 */
		/* 82147478h case   16:*/		regs.R3 = regs.R31;
		/* 82147478h case   16:*/		return 0x8214747C;
		  /* 8214747Ch */ case   17:  		/* bl -5580 */
		/* 8214747Ch case   17:*/		regs.LR = 0x82147480; return 0x82145EB0;
		/* 8214747Ch case   17:*/		return 0x82147480;
		  /* 82147480h */ case   18:  		/* lwz R11, <#[R30]> */
		/* 82147480h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82147480h case   18:*/		return 0x82147484;
		  /* 82147484h */ case   19:  		/* mr R5, R21 */
		/* 82147484h case   19:*/		regs.R5 = regs.R21;
		/* 82147484h case   19:*/		return 0x82147488;
		  /* 82147488h */ case   20:  		/* rlwinm. R11, R11, 0, 14, 14 */
		/* 82147488h case   20:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R11,regs.R11);
		/* 82147488h case   20:*/		return 0x8214748C;
		  /* 8214748Ch */ case   21:  		/* bc 4, CR0_EQ, 8 */
		/* 8214748Ch case   21:*/		if ( !regs.CR[0].eq ) { return 0x82147494;  }
		/* 8214748Ch case   21:*/		return 0x82147490;
		  /* 82147490h */ case   22:  		/* mr R5, R22 */
		/* 82147490h case   22:*/		regs.R5 = regs.R22;
		/* 82147490h case   22:*/		return 0x82147494;
	}
	return 0x82147494;
} // Block from 82147438h-82147494h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82147494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147494);
		  /* 82147494h */ case    0:  		/* mr R4, R25 */
		/* 82147494h case    0:*/		regs.R4 = regs.R25;
		/* 82147494h case    0:*/		return 0x82147498;
		  /* 82147498h */ case    1:  		/* mr R3, R31 */
		/* 82147498h case    1:*/		regs.R3 = regs.R31;
		/* 82147498h case    1:*/		return 0x8214749C;
		  /* 8214749Ch */ case    2:  		/* bl -5076 */
		/* 8214749Ch case    2:*/		regs.LR = 0x821474A0; return 0x821460C8;
		/* 8214749Ch case    2:*/		return 0x821474A0;
		  /* 821474A0h */ case    3:  		/* mr R5, R26 */
		/* 821474A0h case    3:*/		regs.R5 = regs.R26;
		/* 821474A0h case    3:*/		return 0x821474A4;
		  /* 821474A4h */ case    4:  		/* mr R4, R29 */
		/* 821474A4h case    4:*/		regs.R4 = regs.R29;
		/* 821474A4h case    4:*/		return 0x821474A8;
		  /* 821474A8h */ case    5:  		/* lwz R6, <#[R30 - 4]> */
		/* 821474A8h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 821474A8h case    5:*/		return 0x821474AC;
		  /* 821474ACh */ case    6:  		/* mr R3, R31 */
		/* 821474ACh case    6:*/		regs.R3 = regs.R31;
		/* 821474ACh case    6:*/		return 0x821474B0;
		  /* 821474B0h */ case    7:  		/* bl -5632 */
		/* 821474B0h case    7:*/		regs.LR = 0x821474B4; return 0x82145EB0;
		/* 821474B0h case    7:*/		return 0x821474B4;
		  /* 821474B4h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 821474B4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821474B4h case    8:*/		return 0x821474B8;
		  /* 821474B8h */ case    9:  		/* mr R4, R27 */
		/* 821474B8h case    9:*/		regs.R4 = regs.R27;
		/* 821474B8h case    9:*/		return 0x821474BC;
		  /* 821474BCh */ case   10:  		/* mr R5, R20 */
		/* 821474BCh case   10:*/		regs.R5 = regs.R20;
		/* 821474BCh case   10:*/		return 0x821474C0;
		  /* 821474C0h */ case   11:  		/* mr R3, R31 */
		/* 821474C0h case   11:*/		regs.R3 = regs.R31;
		/* 821474C0h case   11:*/		return 0x821474C4;
		  /* 821474C4h */ case   12:  		/* rlwinm R7, R11, 13, 19, 31 */
		/* 821474C4h case   12:*/		cpu::op::rlwinm<0,13,19,31>(regs,&regs.R7,regs.R11);
		/* 821474C4h case   12:*/		return 0x821474C8;
	}
	return 0x821474C8;
} // Block from 82147494h-821474C8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821474C8h
// Function '?ensure2@?$FastVector@UDefine@XGRAPHICS@@@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821474C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821474C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821474C8);
		  /* 821474C8h */ case    0:  		/* rlwinm R6, R11, 14, 31, 31 */
		/* 821474C8h case    0:*/		cpu::op::rlwinm<0,14,31,31>(regs,&regs.R6,regs.R11);
		/* 821474C8h case    0:*/		return 0x821474CC;
		  /* 821474CCh */ case    1:  		/* bl -5268 */
		/* 821474CCh case    1:*/		regs.LR = 0x821474D0; return 0x82146038;
		/* 821474CCh case    1:*/		return 0x821474D0;
		  /* 821474D0h */ case    2:  		/* mr R3, R31 */
		/* 821474D0h case    2:*/		regs.R3 = regs.R31;
		/* 821474D0h case    2:*/		return 0x821474D4;
		  /* 821474D4h */ case    3:  		/* bl -2260 */
		/* 821474D4h case    3:*/		regs.LR = 0x821474D8; return 0x82146C00;
		/* 821474D4h case    3:*/		return 0x821474D8;
		  /* 821474D8h */ case    4:  		/* lwz R11, <#[R28 + 4]> */
		/* 821474D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821474D8h case    4:*/		return 0x821474DC;
		  /* 821474DCh */ case    5:  		/* lwz R10, <#[R28]> */
		/* 821474DCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821474DCh case    5:*/		return 0x821474E0;
		  /* 821474E0h */ case    6:  		/* addi R30, R30, 12 */
		/* 821474E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xC);
		/* 821474E0h case    6:*/		return 0x821474E4;
		  /* 821474E4h */ case    7:  		/* mulli R11, R11, 12 */
		/* 821474E4h case    7:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821474E4h case    7:*/		return 0x821474E8;
		  /* 821474E8h */ case    8:  		/* addi R9, R30, -8 */
		/* 821474E8h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0xFFFFFFF8);
		/* 821474E8h case    8:*/		return 0x821474EC;
		  /* 821474ECh */ case    9:  		/* add R11, R11, R10 */
		/* 821474ECh case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821474ECh case    9:*/		return 0x821474F0;
		  /* 821474F0h */ case   10:  		/* cmplw CR6, R9, R11 */
		/* 821474F0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821474F0h case   10:*/		return 0x821474F4;
		  /* 821474F4h */ case   11:  		/* bc 12, CR6_LT, -160 */
		/* 821474F4h case   11:*/		if ( regs.CR[6].lt ) { return 0x82147454;  }
		/* 821474F4h case   11:*/		return 0x821474F8;
	}
	return 0x821474F8;
} // Block from 821474C8h-821474F8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821474F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821474F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821474F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821474F8);
		  /* 821474F8h */ case    0:  		/* mr R4, R18 */
		/* 821474F8h case    0:*/		regs.R4 = regs.R18;
		/* 821474F8h case    0:*/		return 0x821474FC;
		  /* 821474FCh */ case    1:  		/* mr R3, R31 */
		/* 821474FCh case    1:*/		regs.R3 = regs.R31;
		/* 821474FCh case    1:*/		return 0x82147500;
		  /* 82147500h */ case    2:  		/* bl -5528 */
		/* 82147500h case    2:*/		regs.LR = 0x82147504; return 0x82145F68;
		/* 82147500h case    2:*/		return 0x82147504;
		  /* 82147504h */ case    3:  		/* addi R1, R1, 208 */
		/* 82147504h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 82147504h case    3:*/		return 0x82147508;
		  /* 82147508h */ case    4:  		/* b -746120 */
		/* 82147508h case    4:*/		return 0x82091280;
		/* 82147508h case    4:*/		return 0x8214750C;
		  /* 8214750Ch */ case    5:  		/* nop */
		/* 8214750Ch case    5:*/		cpu::op::nop();
		/* 8214750Ch case    5:*/		return 0x82147510;
	}
	return 0x82147510;
} // Block from 821474F8h-82147510h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82147510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147510);
		  /* 82147510h */ case    0:  		/* mfspr R12, LR */
		/* 82147510h case    0:*/		regs.R12 = regs.LR;
		/* 82147510h case    0:*/		return 0x82147514;
		  /* 82147514h */ case    1:  		/* bl -746224 */
		/* 82147514h case    1:*/		regs.LR = 0x82147518; return 0x82091224;
		/* 82147514h case    1:*/		return 0x82147518;
		  /* 82147518h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 82147518h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 82147518h case    2:*/		return 0x8214751C;
		  /* 8214751Ch */ case    3:  		/* mr R3, R4 */
		/* 8214751Ch case    3:*/		regs.R3 = regs.R4;
		/* 8214751Ch case    3:*/		return 0x82147520;
		  /* 82147520h */ case    4:  		/* mr R31, R4 */
		/* 82147520h case    4:*/		regs.R31 = regs.R4;
		/* 82147520h case    4:*/		return 0x82147524;
		  /* 82147524h */ case    5:  		/* mr R20, R5 */
		/* 82147524h case    5:*/		regs.R20 = regs.R5;
		/* 82147524h case    5:*/		return 0x82147528;
		  /* 82147528h */ case    6:  		/* mr R16, R6 */
		/* 82147528h case    6:*/		regs.R16 = regs.R6;
		/* 82147528h case    6:*/		return 0x8214752C;
		  /* 8214752Ch */ case    7:  		/* bl -5668 */
		/* 8214752Ch case    7:*/		regs.LR = 0x82147530; return 0x82145F08;
		/* 8214752Ch case    7:*/		return 0x82147530;
		  /* 82147530h */ case    8:  		/* lis R10, -32253 */
		/* 82147530h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82147530h case    8:*/		return 0x82147534;
		  /* 82147534h */ case    9:  		/* lis R11, -32253 */
		/* 82147534h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147534h case    9:*/		return 0x82147538;
		  /* 82147538h */ case   10:  		/* addi R15, R10, 26140 */
		/* 82147538h case   10:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R10,0x661C);
		/* 82147538h case   10:*/		return 0x8214753C;
		  /* 8214753Ch */ case   11:  		/* addi R17, R11, 25840 */
		/* 8214753Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R11,0x64F0);
		/* 8214753Ch case   11:*/		return 0x82147540;
		  /* 82147540h */ case   12:  		/* mr R3, R31 */
		/* 82147540h case   12:*/		regs.R3 = regs.R31;
		/* 82147540h case   12:*/		return 0x82147544;
		  /* 82147544h */ case   13:  		/* mr R5, R15 */
		/* 82147544h case   13:*/		regs.R5 = regs.R15;
		/* 82147544h case   13:*/		return 0x82147548;
		  /* 82147548h */ case   14:  		/* mr R4, R17 */
		/* 82147548h case   14:*/		regs.R4 = regs.R17;
		/* 82147548h case   14:*/		return 0x8214754C;
		  /* 8214754Ch */ case   15:  		/* bl -5788 */
		/* 8214754Ch case   15:*/		regs.LR = 0x82147550; return 0x82145EB0;
		/* 8214754Ch case   15:*/		return 0x82147550;
		  /* 82147550h */ case   16:  		/* mr R3, R31 */
		/* 82147550h case   16:*/		regs.R3 = regs.R31;
		/* 82147550h case   16:*/		return 0x82147554;
		  /* 82147554h */ case   17:  		/* bl -2308 */
		/* 82147554h case   17:*/		regs.LR = 0x82147558; return 0x82146C50;
		/* 82147554h case   17:*/		return 0x82147558;
	}
	return 0x82147558;
} // Block from 82147510h-82147558h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82147558h
// Function '?ensure2@?$FastVector@D@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147558);
		  /* 82147558h */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 82147558h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 82147558h case    0:*/		return 0x8214755C;
		  /* 8214755Ch */ case    1:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 8214755Ch case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 8214755Ch case    1:*/		return 0x82147560;
		  /* 82147560h */ case    2:  		/* lwz R30, <#[R20]> */
		/* 82147560h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R20 + 0x00000000) );
		/* 82147560h case    2:*/		return 0x82147564;
		  /* 82147564h */ case    3:  		/* add R11, R11, R30 */
		/* 82147564h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82147564h case    3:*/		return 0x82147568;
		  /* 82147568h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 82147568h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82147568h case    4:*/		return 0x8214756C;
		  /* 8214756Ch */ case    5:  		/* bc 4, CR6_LT, 348 */
		/* 8214756Ch case    5:*/		if ( !regs.CR[6].lt ) { return 0x821476C8;  }
		/* 8214756Ch case    5:*/		return 0x82147570;
		  /* 82147570h */ case    6:  		/* lis R29, -32253 */
		/* 82147570h case    6:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8203);
		/* 82147570h case    6:*/		return 0x82147574;
		  /* 82147574h */ case    7:  		/* lis R28, -32253 */
		/* 82147574h case    7:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8203);
		/* 82147574h case    7:*/		return 0x82147578;
		  /* 82147578h */ case    8:  		/* lis R3, -32255 */
		/* 82147578h case    8:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8201);
		/* 82147578h case    8:*/		return 0x8214757C;
		  /* 8214757Ch */ case    9:  		/* lis R4, -32255 */
		/* 8214757Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8201);
		/* 8214757Ch case    9:*/		return 0x82147580;
		  /* 82147580h */ case   10:  		/* lis R5, -32253 */
		/* 82147580h case   10:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 82147580h case   10:*/		return 0x82147584;
		  /* 82147584h */ case   11:  		/* lis R6, -32253 */
		/* 82147584h case   11:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 82147584h case   11:*/		return 0x82147588;
		  /* 82147588h */ case   12:  		/* lis R7, -32253 */
		/* 82147588h case   12:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82147588h case   12:*/		return 0x8214758C;
		  /* 8214758Ch */ case   13:  		/* lis R8, -32253 */
		/* 8214758Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 8214758Ch case   13:*/		return 0x82147590;
		  /* 82147590h */ case   14:  		/* lis R9, -32253 */
		/* 82147590h case   14:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82147590h case   14:*/		return 0x82147594;
		  /* 82147594h */ case   15:  		/* lis R10, -32253 */
		/* 82147594h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82147594h case   15:*/		return 0x82147598;
		  /* 82147598h */ case   16:  		/* lis R11, -32255 */
		/* 82147598h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82147598h case   16:*/		return 0x8214759C;
		  /* 8214759Ch */ case   17:  		/* addi R21, R29, 26136 */
		/* 8214759Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R29,0x6618);
		/* 8214759Ch case   17:*/		return 0x821475A0;
		  /* 821475A0h */ case   18:  		/* addi R28, R28, 25712 */
		/* 821475A0h case   18:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x6470);
		/* 821475A0h case   18:*/		return 0x821475A4;
		  /* 821475A4h */ case   19:  		/* addi R19, R3, 5216 */
		/* 821475A4h case   19:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R3,0x1460);
		/* 821475A4h case   19:*/		return 0x821475A8;
		  /* 821475A8h */ case   20:  		/* addi R18, R4, 5224 */
		/* 821475A8h case   20:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R4,0x1468);
		/* 821475A8h case   20:*/		return 0x821475AC;
		  /* 821475ACh */ case   21:  		/* addi R27, R5, 26124 */
		/* 821475ACh case   21:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R5,0x660C);
		/* 821475ACh case   21:*/		return 0x821475B0;
		  /* 821475B0h */ case   22:  		/* addi R26, R6, 26116 */
		/* 821475B0h case   22:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R6,0x6604);
		/* 821475B0h case   22:*/		return 0x821475B4;
		  /* 821475B4h */ case   23:  		/* addi R25, R7, 26104 */
		/* 821475B4h case   23:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R7,0x65F8);
		/* 821475B4h case   23:*/		return 0x821475B8;
		  /* 821475B8h */ case   24:  		/* addi R29, R8, 26096 */
		/* 821475B8h case   24:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R8,0x65F0);
		/* 821475B8h case   24:*/		return 0x821475BC;
		  /* 821475BCh */ case   25:  		/* addi R24, R9, 26084 */
		/* 821475BCh case   25:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R9,0x65E4);
		/* 821475BCh case   25:*/		return 0x821475C0;
		  /* 821475C0h */ case   26:  		/* addi R23, R10, 26076 */
		/* 821475C0h case   26:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x65DC);
		/* 821475C0h case   26:*/		return 0x821475C4;
		  /* 821475C4h */ case   27:  		/* addi R22, R11, 13240 */
		/* 821475C4h case   27:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x33B8);
		/* 821475C4h case   27:*/		return 0x821475C8;
		  /* 821475C8h */ case   28:  		/* mr R3, R31 */
		/* 821475C8h case   28:*/		regs.R3 = regs.R31;
		/* 821475C8h case   28:*/		return 0x821475CC;
		  /* 821475CCh */ case   29:  		/* bl -5828 */
		/* 821475CCh case   29:*/		regs.LR = 0x821475D0; return 0x82145F08;
		/* 821475CCh case   29:*/		return 0x821475D0;
		  /* 821475D0h */ case   30:  		/* mr R5, R22 */
		/* 821475D0h case   30:*/		regs.R5 = regs.R22;
		/* 821475D0h case   30:*/		return 0x821475D4;
		  /* 821475D4h */ case   31:  		/* mr R4, R17 */
		/* 821475D4h case   31:*/		regs.R4 = regs.R17;
		/* 821475D4h case   31:*/		return 0x821475D8;
		  /* 821475D8h */ case   32:  		/* mr R3, R31 */
		/* 821475D8h case   32:*/		regs.R3 = regs.R31;
		/* 821475D8h case   32:*/		return 0x821475DC;
		  /* 821475DCh */ case   33:  		/* bl -5932 */
		/* 821475DCh case   33:*/		regs.LR = 0x821475E0; return 0x82145EB0;
		/* 821475DCh case   33:*/		return 0x821475E0;
	}
	return 0x821475E0;
} // Block from 82147558h-821475E0h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821475E0h
// Function '?ensure2@?$FastVector@UArgument@XGRAPHICS@@@XGRAPHICS@@QAAXKAAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821475E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821475E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821475E0);
		  /* 821475E0h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821475E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821475E0h case    0:*/		return 0x821475E4;
		  /* 821475E4h */ case    1:  		/* mr R5, R23 */
		/* 821475E4h case    1:*/		regs.R5 = regs.R23;
		/* 821475E4h case    1:*/		return 0x821475E8;
		  /* 821475E8h */ case    2:  		/* rlwinm R11, R11, 12, 20, 31 */
		/* 821475E8h case    2:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R11);
		/* 821475E8h case    2:*/		return 0x821475EC;
		  /* 821475ECh */ case    3:  		/* mr R4, R28 */
		/* 821475ECh case    3:*/		regs.R4 = regs.R28;
		/* 821475ECh case    3:*/		return 0x821475F0;
		  /* 821475F0h */ case    4:  		/* mr R3, R31 */
		/* 821475F0h case    4:*/		regs.R3 = regs.R31;
		/* 821475F0h case    4:*/		return 0x821475F4;
		  /* 821475F4h */ case    5:  		/* add R6, R11, R16 */
		/* 821475F4h case    5:*/		cpu::op::add<0>(regs,&regs.R6,regs.R11,regs.R16);
		/* 821475F4h case    5:*/		return 0x821475F8;
		  /* 821475F8h */ case    6:  		/* bl -5960 */
		/* 821475F8h case    6:*/		regs.LR = 0x821475FC; return 0x82145EB0;
		/* 821475F8h case    6:*/		return 0x821475FC;
		  /* 821475FCh */ case    7:  		/* lwz R11, <#[R30]> */
		/* 821475FCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821475FCh case    7:*/		return 0x82147600;
		  /* 82147600h */ case    8:  		/* mr R5, R24 */
		/* 82147600h case    8:*/		regs.R5 = regs.R24;
		/* 82147600h case    8:*/		return 0x82147604;
		  /* 82147604h */ case    9:  		/* mr R4, R28 */
		/* 82147604h case    9:*/		regs.R4 = regs.R28;
		/* 82147604h case    9:*/		return 0x82147608;
		  /* 82147608h */ case   10:  		/* mr R3, R31 */
		/* 82147608h case   10:*/		regs.R3 = regs.R31;
		/* 82147608h case   10:*/		return 0x8214760C;
		  /* 8214760Ch */ case   11:  		/* rlwinm R6, R11, 18, 26, 31 */
		/* 8214760Ch case   11:*/		cpu::op::rlwinm<0,18,26,31>(regs,&regs.R6,regs.R11);
		/* 8214760Ch case   11:*/		return 0x82147610;
		  /* 82147610h */ case   12:  		/* bl -5984 */
		/* 82147610h case   12:*/		regs.LR = 0x82147614; return 0x82145EB0;
		/* 82147610h case   12:*/		return 0x82147614;
		  /* 82147614h */ case   13:  		/* li R11, 0 */
		/* 82147614h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82147614h case   13:*/		return 0x82147618;
		  /* 82147618h */ case   14:  		/* mr R4, R25 */
		/* 82147618h case   14:*/		regs.R4 = regs.R25;
		/* 82147618h case   14:*/		return 0x8214761C;
		  /* 8214761Ch */ case   15:  		/* stb R11, <#[R1 + 84]> */
		/* 8214761Ch case   15:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8214761Ch case   15:*/		return 0x82147620;
		  /* 82147620h */ case   16:  		/* addi R5, R1, 80 */
		/* 82147620h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82147620h case   16:*/		return 0x82147624;
		  /* 82147624h */ case   17:  		/* mr R3, R31 */
		/* 82147624h case   17:*/		regs.R3 = regs.R31;
		/* 82147624h case   17:*/		return 0x82147628;
		  /* 82147628h */ case   18:  		/* lwz R11, <#[R30]> */
		/* 82147628h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82147628h case   18:*/		return 0x8214762C;
		  /* 8214762Ch */ case   19:  		/* rlwinm R10, R11, 30, 29, 31 */
		/* 8214762Ch case   19:*/		cpu::op::rlwinm<0,30,29,31>(regs,&regs.R10,regs.R11);
		/* 8214762Ch case   19:*/		return 0x82147630;
		  /* 82147630h */ case   20:  		/* rlwinm R9, R11, 27, 29, 31 */
		/* 82147630h case   20:*/		cpu::op::rlwinm<0,27,29,31>(regs,&regs.R9,regs.R11);
		/* 82147630h case   20:*/		return 0x82147634;
		  /* 82147634h */ case   21:  		/* rlwinm R8, R11, 24, 29, 31 */
		/* 82147634h case   21:*/		cpu::op::rlwinm<0,24,29,31>(regs,&regs.R8,regs.R11);
		/* 82147634h case   21:*/		return 0x82147638;
		  /* 82147638h */ case   22:  		/* rlwinm R11, R11, 21, 29, 31 */
		/* 82147638h case   22:*/		cpu::op::rlwinm<0,21,29,31>(regs,&regs.R11,regs.R11);
		/* 82147638h case   22:*/		return 0x8214763C;
		  /* 8214763Ch */ case   23:  		/* lbzx R10, <#[R10 + R29]> */
		/* 8214763Ch case   23:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 8214763Ch case   23:*/		return 0x82147640;
		  /* 82147640h */ case   24:  		/* lbzx R9, <#[R9 + R29]> */
		/* 82147640h case   24:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R9 + regs.R29 + 0x00000000) );
		/* 82147640h case   24:*/		return 0x82147644;
		  /* 82147644h */ case   25:  		/* lbzx R8, <#[R8 + R29]> */
		/* 82147644h case   25:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R8 + regs.R29 + 0x00000000) );
		/* 82147644h case   25:*/		return 0x82147648;
		  /* 82147648h */ case   26:  		/* lbzx R11, <#[R11 + R29]> */
		/* 82147648h case   26:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82147648h case   26:*/		return 0x8214764C;
		  /* 8214764Ch */ case   27:  		/* stb R10, <#[R1 + 80]> */
		/* 8214764Ch case   27:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8214764Ch case   27:*/		return 0x82147650;
		  /* 82147650h */ case   28:  		/* stb R9, <#[R1 + 81]> */
		/* 82147650h case   28:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R1 + 0x00000051) );
		/* 82147650h case   28:*/		return 0x82147654;
		  /* 82147654h */ case   29:  		/* stb R8, <#[R1 + 82]> */
		/* 82147654h case   29:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R1 + 0x00000052) );
		/* 82147654h case   29:*/		return 0x82147658;
		  /* 82147658h */ case   30:  		/* stb R11, <#[R1 + 83]> */
		/* 82147658h case   30:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000053) );
		/* 82147658h case   30:*/		return 0x8214765C;
		  /* 8214765Ch */ case   31:  		/* bl -5524 */
		/* 8214765Ch case   31:*/		regs.LR = 0x82147660; return 0x821460C8;
		/* 8214765Ch case   31:*/		return 0x82147660;
		  /* 82147660h */ case   32:  		/* lwz R11, <#[R30 + 4]> */
		/* 82147660h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82147660h case   32:*/		return 0x82147664;
		  /* 82147664h */ case   33:  		/* mr R4, R26 */
		/* 82147664h case   33:*/		regs.R4 = regs.R26;
		/* 82147664h case   33:*/		return 0x82147668;
		  /* 82147668h */ case   34:  		/* addi R3, R1, 80 */
		/* 82147668h case   34:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82147668h case   34:*/		return 0x8214766C;
		  /* 8214766Ch */ case   35:  		/* rlwinm R5, R11, 9, 24, 31 */
		/* 8214766Ch case   35:*/		cpu::op::rlwinm<0,9,24,31>(regs,&regs.R5,regs.R11);
		/* 8214766Ch case   35:*/		return 0x82147670;
	}
	return 0x82147670;
} // Block from 821475E0h-82147670h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82147670h
// Function '?EndTag@Stream@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147670);
		  /* 82147670h */ case    0:  		/* bl 1185360 */
		/* 82147670h case    0:*/		regs.LR = 0x82147674; return 0x82268CC0;
		/* 82147670h case    0:*/		return 0x82147674;
		  /* 82147674h */ case    1:  		/* mr R4, R27 */
		/* 82147674h case    1:*/		regs.R4 = regs.R27;
		/* 82147674h case    1:*/		return 0x82147678;
		  /* 82147678h */ case    2:  		/* addi R5, R1, 80 */
		/* 82147678h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82147678h case    2:*/		return 0x8214767C;
		  /* 8214767Ch */ case    3:  		/* mr R3, R31 */
		/* 8214767Ch case    3:*/		regs.R3 = regs.R31;
		/* 8214767Ch case    3:*/		return 0x82147680;
		  /* 82147680h */ case    4:  		/* bl -5560 */
		/* 82147680h case    4:*/		regs.LR = 0x82147684; return 0x821460C8;
		/* 82147680h case    4:*/		return 0x82147684;
		  /* 82147684h */ case    5:  		/* lwz R11, <#[R30 + 4]> */
		/* 82147684h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82147684h case    5:*/		return 0x82147688;
		  /* 82147688h */ case    6:  		/* mr R5, R18 */
		/* 82147688h case    6:*/		regs.R5 = regs.R18;
		/* 82147688h case    6:*/		return 0x8214768C;
		  /* 8214768Ch */ case    7:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 8214768Ch case    7:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 8214768Ch case    7:*/		return 0x82147690;
		  /* 82147690h */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 82147690h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82147698;  }
		/* 82147690h case    8:*/		return 0x82147694;
		  /* 82147694h */ case    9:  		/* mr R5, R19 */
		/* 82147694h case    9:*/		regs.R5 = regs.R19;
		/* 82147694h case    9:*/		return 0x82147698;
	}
	return 0x82147698;
} // Block from 82147670h-82147698h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82147698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147698);
		  /* 82147698h */ case    0:  		/* mr R4, R21 */
		/* 82147698h case    0:*/		regs.R4 = regs.R21;
		/* 82147698h case    0:*/		return 0x8214769C;
		  /* 8214769Ch */ case    1:  		/* mr R3, R31 */
		/* 8214769Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214769Ch case    1:*/		return 0x821476A0;
		  /* 821476A0h */ case    2:  		/* bl -5592 */
		/* 821476A0h case    2:*/		regs.LR = 0x821476A4; return 0x821460C8;
		/* 821476A0h case    2:*/		return 0x821476A4;
		  /* 821476A4h */ case    3:  		/* mr R3, R31 */
		/* 821476A4h case    3:*/		regs.R3 = regs.R31;
		/* 821476A4h case    3:*/		return 0x821476A8;
		  /* 821476A8h */ case    4:  		/* bl -2728 */
		/* 821476A8h case    4:*/		regs.LR = 0x821476AC; return 0x82146C00;
		/* 821476A8h case    4:*/		return 0x821476AC;
		  /* 821476ACh */ case    5:  		/* lwz R11, <#[R20 + 4]> */
		/* 821476ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821476ACh case    5:*/		return 0x821476B0;
		  /* 821476B0h */ case    6:  		/* lwz R10, <#[R20]> */
		/* 821476B0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000000) );
		/* 821476B0h case    6:*/		return 0x821476B4;
		  /* 821476B4h */ case    7:  		/* addi R30, R30, 8 */
		/* 821476B4h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 821476B4h case    7:*/		return 0x821476B8;
		  /* 821476B8h */ case    8:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821476B8h case    8:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821476B8h case    8:*/		return 0x821476BC;
		  /* 821476BCh */ case    9:  		/* add R11, R11, R10 */
		/* 821476BCh case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821476BCh case    9:*/		return 0x821476C0;
	}
	return 0x821476C0;
} // Block from 82147698h-821476C0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821476C0h
// Function '?StartChildren@Stream@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821476C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821476C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821476C0);
		  /* 821476C0h */ case    0:  		/* cmplw CR6, R30, R11 */
		/* 821476C0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821476C0h case    0:*/		return 0x821476C4;
		  /* 821476C4h */ case    1:  		/* bc 12, CR6_LT, -252 */
		/* 821476C4h case    1:*/		if ( regs.CR[6].lt ) { return 0x821475C8;  }
		/* 821476C4h case    1:*/		return 0x821476C8;
	}
	return 0x821476C8;
} // Block from 821476C0h-821476C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821476C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821476C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821476C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821476C8);
		  /* 821476C8h */ case    0:  		/* mr R4, R15 */
		/* 821476C8h case    0:*/		regs.R4 = regs.R15;
		/* 821476C8h case    0:*/		return 0x821476CC;
		  /* 821476CCh */ case    1:  		/* mr R3, R31 */
		/* 821476CCh case    1:*/		regs.R3 = regs.R31;
		/* 821476CCh case    1:*/		return 0x821476D0;
		  /* 821476D0h */ case    2:  		/* bl -5992 */
		/* 821476D0h case    2:*/		regs.LR = 0x821476D4; return 0x82145F68;
		/* 821476D0h case    2:*/		return 0x821476D4;
		  /* 821476D4h */ case    3:  		/* addi R1, R1, 240 */
		/* 821476D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 821476D4h case    3:*/		return 0x821476D8;
		  /* 821476D8h */ case    4:  		/* b -746596 */
		/* 821476D8h case    4:*/		return 0x82091274;
		/* 821476D8h case    4:*/		return 0x821476DC;
		  /* 821476DCh */ case    5:  		/* nop */
		/* 821476DCh case    5:*/		cpu::op::nop();
		/* 821476DCh case    5:*/		return 0x821476E0;
	}
	return 0x821476E0;
} // Block from 821476C8h-821476E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821476E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821476E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821476E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821476E0);
		  /* 821476E0h */ case    0:  		/* mfspr R12, LR */
		/* 821476E0h case    0:*/		regs.R12 = regs.LR;
		/* 821476E0h case    0:*/		return 0x821476E4;
		  /* 821476E4h */ case    1:  		/* bl -746688 */
		/* 821476E4h case    1:*/		regs.LR = 0x821476E8; return 0x82091224;
		/* 821476E4h case    1:*/		return 0x821476E8;
		  /* 821476E8h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821476E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821476E8h case    2:*/		return 0x821476EC;
		  /* 821476ECh */ case    3:  		/* mr R3, R4 */
		/* 821476ECh case    3:*/		regs.R3 = regs.R4;
		/* 821476ECh case    3:*/		return 0x821476F0;
		  /* 821476F0h */ case    4:  		/* mr R31, R4 */
		/* 821476F0h case    4:*/		regs.R31 = regs.R4;
		/* 821476F0h case    4:*/		return 0x821476F4;
		  /* 821476F4h */ case    5:  		/* mr R21, R5 */
		/* 821476F4h case    5:*/		regs.R21 = regs.R5;
		/* 821476F4h case    5:*/		return 0x821476F8;
		  /* 821476F8h */ case    6:  		/* bl -6128 */
		/* 821476F8h case    6:*/		regs.LR = 0x821476FC; return 0x82145F08;
		/* 821476F8h case    6:*/		return 0x821476FC;
		  /* 821476FCh */ case    7:  		/* lis R10, -32253 */
		/* 821476FCh case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821476FCh case    7:*/		return 0x82147700;
		  /* 82147700h */ case    8:  		/* lis R11, -32253 */
		/* 82147700h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147700h case    8:*/		return 0x82147704;
		  /* 82147704h */ case    9:  		/* addi R15, R10, 26188 */
		/* 82147704h case    9:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R10,0x664C);
		/* 82147704h case    9:*/		return 0x82147708;
		  /* 82147708h */ case   10:  		/* addi R16, R11, 25840 */
		/* 82147708h case   10:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R11,0x64F0);
		/* 82147708h case   10:*/		return 0x8214770C;
		  /* 8214770Ch */ case   11:  		/* mr R3, R31 */
		/* 8214770Ch case   11:*/		regs.R3 = regs.R31;
		/* 8214770Ch case   11:*/		return 0x82147710;
		  /* 82147710h */ case   12:  		/* mr R5, R15 */
		/* 82147710h case   12:*/		regs.R5 = regs.R15;
		/* 82147710h case   12:*/		return 0x82147714;
		  /* 82147714h */ case   13:  		/* mr R4, R16 */
		/* 82147714h case   13:*/		regs.R4 = regs.R16;
		/* 82147714h case   13:*/		return 0x82147718;
	}
	return 0x82147718;
} // Block from 821476E0h-82147718h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82147718h
// Function '?Initialize@ShaderPDBBuilder@XGRAPHICS@@QAAXPBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147718);
		  /* 82147718h */ case    0:  		/* bl -6248 */
		/* 82147718h case    0:*/		regs.LR = 0x8214771C; return 0x82145EB0;
		/* 82147718h case    0:*/		return 0x8214771C;
		  /* 8214771Ch */ case    1:  		/* mr R3, R31 */
		/* 8214771Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214771Ch case    1:*/		return 0x82147720;
		  /* 82147720h */ case    2:  		/* bl -2768 */
		/* 82147720h case    2:*/		regs.LR = 0x82147724; return 0x82146C50;
		/* 82147720h case    2:*/		return 0x82147724;
		  /* 82147724h */ case    3:  		/* lwz R10, <#[R21 + 4]> */
		/* 82147724h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000004) );
		/* 82147724h case    3:*/		return 0x82147728;
		  /* 82147728h */ case    4:  		/* lwz R11, <#[R21]> */
		/* 82147728h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 82147728h case    4:*/		return 0x8214772C;
		  /* 8214772Ch */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8214772Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8214772Ch case    5:*/		return 0x82147730;
		  /* 82147730h */ case    6:  		/* mr R27, R11 */
		/* 82147730h case    6:*/		regs.R27 = regs.R11;
		/* 82147730h case    6:*/		return 0x82147734;
		  /* 82147734h */ case    7:  		/* add R10, R10, R11 */
		/* 82147734h case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82147734h case    7:*/		return 0x82147738;
		  /* 82147738h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 82147738h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82147738h case    8:*/		return 0x8214773C;
		  /* 8214773Ch */ case    9:  		/* bc 4, CR6_LT, 312 */
		/* 8214773Ch case    9:*/		if ( !regs.CR[6].lt ) { return 0x82147874;  }
		/* 8214773Ch case    9:*/		return 0x82147740;
		  /* 82147740h */ case   10:  		/* lis R28, -32253 */
		/* 82147740h case   10:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8203);
		/* 82147740h case   10:*/		return 0x82147744;
		  /* 82147744h */ case   11:  		/* lis R29, -32253 */
		/* 82147744h case   11:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8203);
		/* 82147744h case   11:*/		return 0x82147748;
		  /* 82147748h */ case   12:  		/* lis R30, -32253 */
		/* 82147748h case   12:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8203);
		/* 82147748h case   12:*/		return 0x8214774C;
		  /* 8214774Ch */ case   13:  		/* lis R3, -32255 */
		/* 8214774Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8201);
		/* 8214774Ch case   13:*/		return 0x82147750;
		  /* 82147750h */ case   14:  		/* lis R4, -32255 */
		/* 82147750h case   14:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8201);
		/* 82147750h case   14:*/		return 0x82147754;
		  /* 82147754h */ case   15:  		/* lis R5, -32255 */
		/* 82147754h case   15:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8201);
		/* 82147754h case   15:*/		return 0x82147758;
		  /* 82147758h */ case   16:  		/* lis R6, -32256 */
		/* 82147758h case   16:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 82147758h case   16:*/		return 0x8214775C;
		  /* 8214775Ch */ case   17:  		/* lis R7, -32255 */
		/* 8214775Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8201);
		/* 8214775Ch case   17:*/		return 0x82147760;
		  /* 82147760h */ case   18:  		/* lis R8, -32253 */
		/* 82147760h case   18:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82147760h case   18:*/		return 0x82147764;
		  /* 82147764h */ case   19:  		/* lis R9, -32253 */
		/* 82147764h case   19:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82147764h case   19:*/		return 0x82147768;
		  /* 82147768h */ case   20:  		/* lis R10, -32253 */
		/* 82147768h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82147768h case   20:*/		return 0x8214776C;
		  /* 8214776Ch */ case   21:  		/* lis R11, -32253 */
		/* 8214776Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214776Ch case   21:*/		return 0x82147770;
		  /* 82147770h */ case   22:  		/* addi R28, R28, 25712 */
		/* 82147770h case   22:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x6470);
		/* 82147770h case   22:*/		return 0x82147774;
		  /* 82147774h */ case   23:  		/* addi R29, R29, 26180 */
		/* 82147774h case   23:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x6644);
		/* 82147774h case   23:*/		return 0x82147778;
		  /* 82147778h */ case   24:  		/* addi R30, R30, 26168 */
		/* 82147778h case   24:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x6638);
		/* 82147778h case   24:*/		return 0x8214777C;
		  /* 8214777Ch */ case   25:  		/* addi R20, R3, 12560 */
		/* 8214777Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R3,0x3110);
		/* 8214777Ch case   25:*/		return 0x82147780;
		  /* 82147780h */ case   26:  		/* addi R19, R4, 12556 */
		/* 82147780h case   26:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R4,0x310C);
		/* 82147780h case   26:*/		return 0x82147784;
		  /* 82147784h */ case   27:  		/* addi R18, R5, 12548 */
		/* 82147784h case   27:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R5,0x3104);
		/* 82147784h case   27:*/		return 0x82147788;
		  /* 82147788h */ case   28:  		/* addi R22, R6, 4485 */
		/* 82147788h case   28:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R6,0x1185);
		/* 82147788h case   28:*/		return 0x8214778C;
		  /* 8214778Ch */ case   29:  		/* addi R17, R7, 12532 */
		/* 8214778Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R7,0x30F4);
		/* 8214778Ch case   29:*/		return 0x82147790;
		  /* 82147790h */ case   30:  		/* addi R26, R8, 26124 */
		/* 82147790h case   30:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R8,0x660C);
		/* 82147790h case   30:*/		return 0x82147794;
		  /* 82147794h */ case   31:  		/* addi R25, R9, 26116 */
		/* 82147794h case   31:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R9,0x6604);
		/* 82147794h case   31:*/		return 0x82147798;
		  /* 82147798h */ case   32:  		/* addi R24, R10, 26084 */
		/* 82147798h case   32:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0x65E4);
		/* 82147798h case   32:*/		return 0x8214779C;
		  /* 8214779Ch */ case   33:  		/* addi R23, R11, 26152 */
		/* 8214779Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x6628);
		/* 8214779Ch case   33:*/		return 0x821477A0;
		  /* 821477A0h */ case   34:  		/* mr R3, R31 */
		/* 821477A0h case   34:*/		regs.R3 = regs.R31;
		/* 821477A0h case   34:*/		return 0x821477A4;
		  /* 821477A4h */ case   35:  		/* bl -6300 */
		/* 821477A4h case   35:*/		regs.LR = 0x821477A8; return 0x82145F08;
		/* 821477A4h case   35:*/		return 0x821477A8;
		  /* 821477A8h */ case   36:  		/* mr R5, R23 */
		/* 821477A8h case   36:*/		regs.R5 = regs.R23;
		/* 821477A8h case   36:*/		return 0x821477AC;
		  /* 821477ACh */ case   37:  		/* mr R4, R16 */
		/* 821477ACh case   37:*/		regs.R4 = regs.R16;
		/* 821477ACh case   37:*/		return 0x821477B0;
		  /* 821477B0h */ case   38:  		/* mr R3, R31 */
		/* 821477B0h case   38:*/		regs.R3 = regs.R31;
		/* 821477B0h case   38:*/		return 0x821477B4;
		  /* 821477B4h */ case   39:  		/* bl -6404 */
		/* 821477B4h case   39:*/		regs.LR = 0x821477B8; return 0x82145EB0;
		/* 821477B4h case   39:*/		return 0x821477B8;
		  /* 821477B8h */ case   40:  		/* lwz R11, <#[R27]> */
		/* 821477B8h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821477B8h case   40:*/		return 0x821477BC;
		  /* 821477BCh */ case   41:  		/* mr R5, R24 */
		/* 821477BCh case   41:*/		regs.R5 = regs.R24;
		/* 821477BCh case   41:*/		return 0x821477C0;
		  /* 821477C0h */ case   42:  		/* mr R4, R28 */
		/* 821477C0h case   42:*/		regs.R4 = regs.R28;
		/* 821477C0h case   42:*/		return 0x821477C4;
		  /* 821477C4h */ case   43:  		/* mr R3, R31 */
		/* 821477C4h case   43:*/		regs.R3 = regs.R31;
		/* 821477C4h case   43:*/		return 0x821477C8;
		  /* 821477C8h */ case   44:  		/* rlwinm R6, R11, 12, 28, 31 */
		/* 821477C8h case   44:*/		cpu::op::rlwinm<0,12,28,31>(regs,&regs.R6,regs.R11);
		/* 821477C8h case   44:*/		return 0x821477CC;
		  /* 821477CCh */ case   45:  		/* bl -6428 */
		/* 821477CCh case   45:*/		regs.LR = 0x821477D0; return 0x82145EB0;
		/* 821477CCh case   45:*/		return 0x821477D0;
	}
	return 0x821477D0;
} // Block from 82147718h-821477D0h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821477D0h
// Function '?AddConstantTable@ShaderPDBBuilder@XGRAPHICS@@QAAXPBU_D3DXSHADER_CONSTANTTABLE@@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821477D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821477D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821477D0);
		  /* 821477D0h */ case    0:  		/* mr R4, R25 */
		/* 821477D0h case    0:*/		regs.R4 = regs.R25;
		/* 821477D0h case    0:*/		return 0x821477D4;
		  /* 821477D4h */ case    1:  		/* addi R3, R1, 80 */
		/* 821477D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821477D4h case    1:*/		return 0x821477D8;
		  /* 821477D8h */ case    2:  		/* lbz R5, <#[R27]> */
		/* 821477D8h case    2:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000000) );
		/* 821477D8h case    2:*/		return 0x821477DC;
		  /* 821477DCh */ case    3:  		/* bl 1184996 */
		/* 821477DCh case    3:*/		regs.LR = 0x821477E0; return 0x82268CC0;
		/* 821477DCh case    3:*/		return 0x821477E0;
		  /* 821477E0h */ case    4:  		/* mr R4, R26 */
		/* 821477E0h case    4:*/		regs.R4 = regs.R26;
		/* 821477E0h case    4:*/		return 0x821477E4;
		  /* 821477E4h */ case    5:  		/* addi R5, R1, 80 */
		/* 821477E4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821477E4h case    5:*/		return 0x821477E8;
		  /* 821477E8h */ case    6:  		/* mr R3, R31 */
		/* 821477E8h case    6:*/		regs.R3 = regs.R31;
		/* 821477E8h case    6:*/		return 0x821477EC;
		  /* 821477ECh */ case    7:  		/* bl -5924 */
		/* 821477ECh case    7:*/		regs.LR = 0x821477F0; return 0x821460C8;
		/* 821477ECh case    7:*/		return 0x821477F0;
		  /* 821477F0h */ case    8:  		/* lhz R11, <#[R27]> */
		/* 821477F0h case    8:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821477F0h case    8:*/		return 0x821477F4;
		  /* 821477F4h */ case    9:  		/* mr R8, R17 */
		/* 821477F4h case    9:*/		regs.R8 = regs.R17;
		/* 821477F4h case    9:*/		return 0x821477F8;
		  /* 821477F8h */ case   10:  		/* rlwinm. R10, R11, 0, 28, 28 */
		/* 821477F8h case   10:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R10,regs.R11);
		/* 821477F8h case   10:*/		return 0x821477FC;
		  /* 821477FCh */ case   11:  		/* bc 4, CR0_EQ, 8 */
		/* 821477FCh case   11:*/		if ( !regs.CR[0].eq ) { return 0x82147804;  }
		/* 821477FCh case   11:*/		return 0x82147800;
		  /* 82147800h */ case   12:  		/* mr R8, R22 */
		/* 82147800h case   12:*/		regs.R8 = regs.R22;
		/* 82147800h case   12:*/		return 0x82147804;
	}
	return 0x82147804;
} // Block from 821477D0h-82147804h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82147804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147804);
		  /* 82147804h */ case    0:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 82147804h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 82147804h case    0:*/		return 0x82147808;
		  /* 82147808h */ case    1:  		/* mr R7, R18 */
		/* 82147808h case    1:*/		regs.R7 = regs.R18;
		/* 82147808h case    1:*/		return 0x8214780C;
		  /* 8214780Ch */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8214780Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82147814;  }
		/* 8214780Ch case    2:*/		return 0x82147810;
		  /* 82147810h */ case    3:  		/* mr R7, R22 */
		/* 82147810h case    3:*/		regs.R7 = regs.R22;
		/* 82147810h case    3:*/		return 0x82147814;
	}
	return 0x82147814;
} // Block from 82147804h-82147814h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82147814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147814);
		  /* 82147814h */ case    0:  		/* rlwinm. R10, R11, 0, 30, 30 */
		/* 82147814h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R11);
		/* 82147814h case    0:*/		return 0x82147818;
		  /* 82147818h */ case    1:  		/* mr R6, R19 */
		/* 82147818h case    1:*/		regs.R6 = regs.R19;
		/* 82147818h case    1:*/		return 0x8214781C;
		  /* 8214781Ch */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8214781Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82147824;  }
		/* 8214781Ch case    2:*/		return 0x82147820;
		  /* 82147820h */ case    3:  		/* mr R6, R22 */
		/* 82147820h case    3:*/		regs.R6 = regs.R22;
		/* 82147820h case    3:*/		return 0x82147824;
	}
	return 0x82147824;
} // Block from 82147814h-82147824h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82147824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147824);
		  /* 82147824h */ case    0:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82147824h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82147824h case    0:*/		return 0x82147828;
		  /* 82147828h */ case    1:  		/* mr R5, R20 */
		/* 82147828h case    1:*/		regs.R5 = regs.R20;
		/* 82147828h case    1:*/		return 0x8214782C;
		  /* 8214782Ch */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8214782Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82147834;  }
		/* 8214782Ch case    2:*/		return 0x82147830;
		  /* 82147830h */ case    3:  		/* mr R5, R22 */
		/* 82147830h case    3:*/		regs.R5 = regs.R22;
		/* 82147830h case    3:*/		return 0x82147834;
	}
	return 0x82147834;
} // Block from 82147824h-82147834h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82147834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147834);
		  /* 82147834h */ case    0:  		/* mr R4, R30 */
		/* 82147834h case    0:*/		regs.R4 = regs.R30;
		/* 82147834h case    0:*/		return 0x82147838;
		  /* 82147838h */ case    1:  		/* addi R3, R1, 80 */
		/* 82147838h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82147838h case    1:*/		return 0x8214783C;
		  /* 8214783Ch */ case    2:  		/* bl 1184900 */
		/* 8214783Ch case    2:*/		regs.LR = 0x82147840; return 0x82268CC0;
		/* 8214783Ch case    2:*/		return 0x82147840;
		  /* 82147840h */ case    3:  		/* mr R4, R29 */
		/* 82147840h case    3:*/		regs.R4 = regs.R29;
		/* 82147840h case    3:*/		return 0x82147844;
		  /* 82147844h */ case    4:  		/* addi R5, R1, 80 */
		/* 82147844h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82147844h case    4:*/		return 0x82147848;
	}
	return 0x82147848;
} // Block from 82147834h-82147848h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82147848h
// Function '?WriteFiles@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147848);
		  /* 82147848h */ case    0:  		/* mr R3, R31 */
		/* 82147848h case    0:*/		regs.R3 = regs.R31;
		/* 82147848h case    0:*/		return 0x8214784C;
		  /* 8214784Ch */ case    1:  		/* bl -6020 */
		/* 8214784Ch case    1:*/		regs.LR = 0x82147850; return 0x821460C8;
		/* 8214784Ch case    1:*/		return 0x82147850;
		  /* 82147850h */ case    2:  		/* mr R3, R31 */
		/* 82147850h case    2:*/		regs.R3 = regs.R31;
		/* 82147850h case    2:*/		return 0x82147854;
		  /* 82147854h */ case    3:  		/* bl -3156 */
		/* 82147854h case    3:*/		regs.LR = 0x82147858; return 0x82146C00;
		/* 82147854h case    3:*/		return 0x82147858;
		  /* 82147858h */ case    4:  		/* lwz R11, <#[R21 + 4]> */
		/* 82147858h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 82147858h case    4:*/		return 0x8214785C;
		  /* 8214785Ch */ case    5:  		/* lwz R10, <#[R21]> */
		/* 8214785Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000000) );
		/* 8214785Ch case    5:*/		return 0x82147860;
		  /* 82147860h */ case    6:  		/* addi R27, R27, 4 */
		/* 82147860h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 82147860h case    6:*/		return 0x82147864;
		  /* 82147864h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82147864h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82147864h case    7:*/		return 0x82147868;
		  /* 82147868h */ case    8:  		/* add R11, R11, R10 */
		/* 82147868h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82147868h case    8:*/		return 0x8214786C;
		  /* 8214786Ch */ case    9:  		/* cmplw CR6, R27, R11 */
		/* 8214786Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 8214786Ch case    9:*/		return 0x82147870;
		  /* 82147870h */ case   10:  		/* bc 12, CR6_LT, -208 */
		/* 82147870h case   10:*/		if ( regs.CR[6].lt ) { return 0x821477A0;  }
		/* 82147870h case   10:*/		return 0x82147874;
	}
	return 0x82147874;
} // Block from 82147848h-82147874h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82147874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147874);
		  /* 82147874h */ case    0:  		/* mr R4, R15 */
		/* 82147874h case    0:*/		regs.R4 = regs.R15;
		/* 82147874h case    0:*/		return 0x82147878;
		  /* 82147878h */ case    1:  		/* mr R3, R31 */
		/* 82147878h case    1:*/		regs.R3 = regs.R31;
		/* 82147878h case    1:*/		return 0x8214787C;
		  /* 8214787Ch */ case    2:  		/* bl -6420 */
		/* 8214787Ch case    2:*/		regs.LR = 0x82147880; return 0x82145F68;
		/* 8214787Ch case    2:*/		return 0x82147880;
		  /* 82147880h */ case    3:  		/* addi R1, R1, 240 */
		/* 82147880h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 82147880h case    3:*/		return 0x82147884;
		  /* 82147884h */ case    4:  		/* b -747024 */
		/* 82147884h case    4:*/		return 0x82091274;
		/* 82147884h case    4:*/		return 0x82147888;
	}
	return 0x82147888;
} // Block from 82147874h-82147888h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82147888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147888);
		  /* 82147888h */ case    0:  		/* mfspr R12, LR */
		/* 82147888h case    0:*/		regs.R12 = regs.LR;
		/* 82147888h case    0:*/		return 0x8214788C;
		  /* 8214788Ch */ case    1:  		/* bl -747104 */
		/* 8214788Ch case    1:*/		regs.LR = 0x82147890; return 0x8209122C;
		/* 8214788Ch case    1:*/		return 0x82147890;
		  /* 82147890h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 82147890h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82147890h case    2:*/		return 0x82147894;
		  /* 82147894h */ case    3:  		/* mr R3, R4 */
		/* 82147894h case    3:*/		regs.R3 = regs.R4;
		/* 82147894h case    3:*/		return 0x82147898;
		  /* 82147898h */ case    4:  		/* mr R31, R4 */
		/* 82147898h case    4:*/		regs.R31 = regs.R4;
		/* 82147898h case    4:*/		return 0x8214789C;
		  /* 8214789Ch */ case    5:  		/* mr R17, R5 */
		/* 8214789Ch case    5:*/		regs.R17 = regs.R5;
		/* 8214789Ch case    5:*/		return 0x821478A0;
		  /* 821478A0h */ case    6:  		/* mr R20, R6 */
		/* 821478A0h case    6:*/		regs.R20 = regs.R6;
		/* 821478A0h case    6:*/		return 0x821478A4;
		  /* 821478A4h */ case    7:  		/* mr R28, R7 */
		/* 821478A4h case    7:*/		regs.R28 = regs.R7;
		/* 821478A4h case    7:*/		return 0x821478A8;
		  /* 821478A8h */ case    8:  		/* bl -6560 */
		/* 821478A8h case    8:*/		regs.LR = 0x821478AC; return 0x82145F08;
		/* 821478A8h case    8:*/		return 0x821478AC;
		  /* 821478ACh */ case    9:  		/* lis R10, -32253 */
		/* 821478ACh case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821478ACh case    9:*/		return 0x821478B0;
		  /* 821478B0h */ case   10:  		/* lis R11, -32253 */
		/* 821478B0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821478B0h case   10:*/		return 0x821478B4;
		  /* 821478B4h */ case   11:  		/* addi R19, R10, 26308 */
		/* 821478B4h case   11:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R10,0x66C4);
		/* 821478B4h case   11:*/		return 0x821478B8;
		  /* 821478B8h */ case   12:  		/* addi R27, R11, 25840 */
		/* 821478B8h case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x64F0);
		/* 821478B8h case   12:*/		return 0x821478BC;
		  /* 821478BCh */ case   13:  		/* mr R3, R31 */
		/* 821478BCh case   13:*/		regs.R3 = regs.R31;
		/* 821478BCh case   13:*/		return 0x821478C0;
		  /* 821478C0h */ case   14:  		/* mr R5, R19 */
		/* 821478C0h case   14:*/		regs.R5 = regs.R19;
		/* 821478C0h case   14:*/		return 0x821478C4;
		  /* 821478C4h */ case   15:  		/* mr R4, R27 */
		/* 821478C4h case   15:*/		regs.R4 = regs.R27;
		/* 821478C4h case   15:*/		return 0x821478C8;
		  /* 821478C8h */ case   16:  		/* bl -6680 */
		/* 821478C8h case   16:*/		regs.LR = 0x821478CC; return 0x82145EB0;
		/* 821478C8h case   16:*/		return 0x821478CC;
		  /* 821478CCh */ case   17:  		/* mr R3, R31 */
		/* 821478CCh case   17:*/		regs.R3 = regs.R31;
		/* 821478CCh case   17:*/		return 0x821478D0;
		  /* 821478D0h */ case   18:  		/* bl -3200 */
		/* 821478D0h case   18:*/		regs.LR = 0x821478D4; return 0x82146C50;
		/* 821478D0h case   18:*/		return 0x821478D4;
		  /* 821478D4h */ case   19:  		/* lis R10, -32253 */
		/* 821478D4h case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821478D4h case   19:*/		return 0x821478D8;
		  /* 821478D8h */ case   20:  		/* lis R11, -32253 */
		/* 821478D8h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821478D8h case   20:*/		return 0x821478DC;
		  /* 821478DCh */ case   21:  		/* addi R26, R10, 25712 */
		/* 821478DCh case   21:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x6470);
		/* 821478DCh case   21:*/		return 0x821478E0;
		  /* 821478E0h */ case   22:  		/* addi R18, R11, 26084 */
		/* 821478E0h case   22:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R11,0x65E4);
		/* 821478E0h case   22:*/		return 0x821478E4;
		  /* 821478E4h */ case   23:  		/* lwz R10, <#[R28 + 4]> */
		/* 821478E4h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 821478E4h case   23:*/		return 0x821478E8;
		  /* 821478E8h */ case   24:  		/* lwz R11, <#[R28]> */
		/* 821478E8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821478E8h case   24:*/		return 0x821478EC;
		  /* 821478ECh */ case   25:  		/* mulli R10, R10, 20 */
		/* 821478ECh case   25:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x14);
		/* 821478ECh case   25:*/		return 0x821478F0;
		  /* 821478F0h */ case   26:  		/* add R10, R10, R11 */
		/* 821478F0h case   26:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821478F0h case   26:*/		return 0x821478F4;
		  /* 821478F4h */ case   27:  		/* cmplw CR6, R11, R10 */
		/* 821478F4h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821478F4h case   27:*/		return 0x821478F8;
		  /* 821478F8h */ case   28:  		/* bc 4, CR6_LT, 252 */
		/* 821478F8h case   28:*/		if ( !regs.CR[6].lt ) { return 0x821479F4;  }
		/* 821478F8h case   28:*/		return 0x821478FC;
		  /* 821478FCh */ case   29:  		/* addi R30, R11, 8 */
		/* 821478FCh case   29:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x8);
		/* 821478FCh case   29:*/		return 0x82147900;
		  /* 82147900h */ case   30:  		/* lis R6, -32253 */
		/* 82147900h case   30:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 82147900h case   30:*/		return 0x82147904;
		  /* 82147904h */ case   31:  		/* lis R7, -32253 */
		/* 82147904h case   31:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82147904h case   31:*/		return 0x82147908;
		  /* 82147908h */ case   32:  		/* lis R8, -32253 */
		/* 82147908h case   32:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82147908h case   32:*/		return 0x8214790C;
		  /* 8214790Ch */ case   33:  		/* lis R9, -32253 */
		/* 8214790Ch case   33:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8214790Ch case   33:*/		return 0x82147910;
		  /* 82147910h */ case   34:  		/* lis R10, -32253 */
		/* 82147910h case   34:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82147910h case   34:*/		return 0x82147914;
		  /* 82147914h */ case   35:  		/* lis R11, -32253 */
		/* 82147914h case   35:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147914h case   35:*/		return 0x82147918;
		  /* 82147918h */ case   36:  		/* addi R29, R6, 25700 */
		/* 82147918h case   36:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R6,0x6464);
		/* 82147918h case   36:*/		return 0x8214791C;
		  /* 8214791Ch */ case   37:  		/* addi R25, R7, 26300 */
		/* 8214791Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R7,0x66BC);
		/* 8214791Ch case   37:*/		return 0x82147920;
		  /* 82147920h */ case   38:  		/* addi R24, R8, 26292 */
		/* 82147920h case   38:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R8,0x66B4);
		/* 82147920h case   38:*/		return 0x82147924;
		  /* 82147924h */ case   39:  		/* addi R23, R9, 26284 */
		/* 82147924h case   39:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R9,0x66AC);
		/* 82147924h case   39:*/		return 0x82147928;
		  /* 82147928h */ case   40:  		/* addi R22, R10, 26276 */
		/* 82147928h case   40:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0x66A4);
		/* 82147928h case   40:*/		return 0x8214792C;
		  /* 8214792Ch */ case   41:  		/* addi R21, R11, 26268 */
		/* 8214792Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0x669C);
		/* 8214792Ch case   41:*/		return 0x82147930;
		  /* 82147930h */ case   42:  		/* mr R3, R31 */
		/* 82147930h case   42:*/		regs.R3 = regs.R31;
		/* 82147930h case   42:*/		return 0x82147934;
		  /* 82147934h */ case   43:  		/* bl -6700 */
		/* 82147934h case   43:*/		regs.LR = 0x82147938; return 0x82145F08;
		/* 82147934h case   43:*/		return 0x82147938;
		  /* 82147938h */ case   44:  		/* mr R5, R21 */
		/* 82147938h case   44:*/		regs.R5 = regs.R21;
		/* 82147938h case   44:*/		return 0x8214793C;
		  /* 8214793Ch */ case   45:  		/* mr R4, R27 */
		/* 8214793Ch case   45:*/		regs.R4 = regs.R27;
		/* 8214793Ch case   45:*/		return 0x82147940;
		  /* 82147940h */ case   46:  		/* mr R3, R31 */
		/* 82147940h case   46:*/		regs.R3 = regs.R31;
		/* 82147940h case   46:*/		return 0x82147944;
		  /* 82147944h */ case   47:  		/* bl -6804 */
		/* 82147944h case   47:*/		regs.LR = 0x82147948; return 0x82145EB0;
		/* 82147944h case   47:*/		return 0x82147948;
		  /* 82147948h */ case   48:  		/* mr R5, R18 */
		/* 82147948h case   48:*/		regs.R5 = regs.R18;
		/* 82147948h case   48:*/		return 0x8214794C;
		  /* 8214794Ch */ case   49:  		/* mr R4, R26 */
		/* 8214794Ch case   49:*/		regs.R4 = regs.R26;
		/* 8214794Ch case   49:*/		return 0x82147950;
		  /* 82147950h */ case   50:  		/* lbz R6, <#[R30 - 8]> */
		/* 82147950h case   50:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 82147950h case   50:*/		return 0x82147954;
		  /* 82147954h */ case   51:  		/* mr R3, R31 */
		/* 82147954h case   51:*/		regs.R3 = regs.R31;
		/* 82147954h case   51:*/		return 0x82147958;
		  /* 82147958h */ case   52:  		/* bl -6824 */
		/* 82147958h case   52:*/		regs.LR = 0x8214795C; return 0x82145EB0;
		/* 82147958h case   52:*/		return 0x8214795C;
		  /* 8214795Ch */ case   53:  		/* lfs FR1, <#[R30 - 4]> */
		/* 8214795Ch case   53:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 8214795Ch case   53:*/		return 0x82147960;
		  /* 82147960h */ case   54:  		/* stfd FR1, <#[R1 + 40]> */
		/* 82147960h case   54:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000028) );
		/* 82147960h case   54:*/		return 0x82147964;
		  /* 82147964h */ case   55:  		/* ld R6, <#[R1 + 40]> */
		/* 82147964h case   55:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82147964h case   55:*/		return 0x82147968;
		  /* 82147968h */ case   56:  		/* mr R5, R22 */
		/* 82147968h case   56:*/		regs.R5 = regs.R22;
		/* 82147968h case   56:*/		return 0x8214796C;
		  /* 8214796Ch */ case   57:  		/* mr R4, R29 */
		/* 8214796Ch case   57:*/		regs.R4 = regs.R29;
		/* 8214796Ch case   57:*/		return 0x82147970;
		  /* 82147970h */ case   58:  		/* mr R3, R31 */
		/* 82147970h case   58:*/		regs.R3 = regs.R31;
		/* 82147970h case   58:*/		return 0x82147974;
		  /* 82147974h */ case   59:  		/* bl -6852 */
		/* 82147974h case   59:*/		regs.LR = 0x82147978; return 0x82145EB0;
		/* 82147974h case   59:*/		return 0x82147978;
		  /* 82147978h */ case   60:  		/* lfs FR1, <#[R30]> */
		/* 82147978h case   60:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R30 + 0x00000000) );
		/* 82147978h case   60:*/		return 0x8214797C;
		  /* 8214797Ch */ case   61:  		/* stfd FR1, <#[R1 + 40]> */
		/* 8214797Ch case   61:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000028) );
		/* 8214797Ch case   61:*/		return 0x82147980;
		  /* 82147980h */ case   62:  		/* ld R6, <#[R1 + 40]> */
		/* 82147980h case   62:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82147980h case   62:*/		return 0x82147984;
		  /* 82147984h */ case   63:  		/* mr R5, R23 */
		/* 82147984h case   63:*/		regs.R5 = regs.R23;
		/* 82147984h case   63:*/		return 0x82147988;
		  /* 82147988h */ case   64:  		/* mr R4, R29 */
		/* 82147988h case   64:*/		regs.R4 = regs.R29;
		/* 82147988h case   64:*/		return 0x8214798C;
		  /* 8214798Ch */ case   65:  		/* mr R3, R31 */
		/* 8214798Ch case   65:*/		regs.R3 = regs.R31;
		/* 8214798Ch case   65:*/		return 0x82147990;
		  /* 82147990h */ case   66:  		/* bl -6880 */
		/* 82147990h case   66:*/		regs.LR = 0x82147994; return 0x82145EB0;
		/* 82147990h case   66:*/		return 0x82147994;
		  /* 82147994h */ case   67:  		/* lfs FR1, <#[R30 + 4]> */
		/* 82147994h case   67:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R30 + 0x00000004) );
		/* 82147994h case   67:*/		return 0x82147998;
		  /* 82147998h */ case   68:  		/* stfd FR1, <#[R1 + 40]> */
		/* 82147998h case   68:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000028) );
		/* 82147998h case   68:*/		return 0x8214799C;
		  /* 8214799Ch */ case   69:  		/* ld R6, <#[R1 + 40]> */
		/* 8214799Ch case   69:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 8214799Ch case   69:*/		return 0x821479A0;
		  /* 821479A0h */ case   70:  		/* mr R5, R24 */
		/* 821479A0h case   70:*/		regs.R5 = regs.R24;
		/* 821479A0h case   70:*/		return 0x821479A4;
		  /* 821479A4h */ case   71:  		/* mr R4, R29 */
		/* 821479A4h case   71:*/		regs.R4 = regs.R29;
		/* 821479A4h case   71:*/		return 0x821479A8;
		  /* 821479A8h */ case   72:  		/* mr R3, R31 */
		/* 821479A8h case   72:*/		regs.R3 = regs.R31;
		/* 821479A8h case   72:*/		return 0x821479AC;
		  /* 821479ACh */ case   73:  		/* bl -6908 */
		/* 821479ACh case   73:*/		regs.LR = 0x821479B0; return 0x82145EB0;
		/* 821479ACh case   73:*/		return 0x821479B0;
		  /* 821479B0h */ case   74:  		/* lfs FR1, <#[R30 + 8]> */
		/* 821479B0h case   74:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R30 + 0x00000008) );
		/* 821479B0h case   74:*/		return 0x821479B4;
		  /* 821479B4h */ case   75:  		/* stfd FR1, <#[R1 + 40]> */
		/* 821479B4h case   75:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000028) );
		/* 821479B4h case   75:*/		return 0x821479B8;
		  /* 821479B8h */ case   76:  		/* ld R6, <#[R1 + 40]> */
		/* 821479B8h case   76:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 821479B8h case   76:*/		return 0x821479BC;
		  /* 821479BCh */ case   77:  		/* mr R5, R25 */
		/* 821479BCh case   77:*/		regs.R5 = regs.R25;
		/* 821479BCh case   77:*/		return 0x821479C0;
		  /* 821479C0h */ case   78:  		/* mr R4, R29 */
		/* 821479C0h case   78:*/		regs.R4 = regs.R29;
		/* 821479C0h case   78:*/		return 0x821479C4;
		  /* 821479C4h */ case   79:  		/* mr R3, R31 */
		/* 821479C4h case   79:*/		regs.R3 = regs.R31;
		/* 821479C4h case   79:*/		return 0x821479C8;
		  /* 821479C8h */ case   80:  		/* bl -6936 */
		/* 821479C8h case   80:*/		regs.LR = 0x821479CC; return 0x82145EB0;
		/* 821479C8h case   80:*/		return 0x821479CC;
		  /* 821479CCh */ case   81:  		/* mr R3, R31 */
		/* 821479CCh case   81:*/		regs.R3 = regs.R31;
		/* 821479CCh case   81:*/		return 0x821479D0;
		  /* 821479D0h */ case   82:  		/* bl -3536 */
		/* 821479D0h case   82:*/		regs.LR = 0x821479D4; return 0x82146C00;
		/* 821479D0h case   82:*/		return 0x821479D4;
		  /* 821479D4h */ case   83:  		/* lwz R11, <#[R28 + 4]> */
		/* 821479D4h case   83:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821479D4h case   83:*/		return 0x821479D8;
	}
	return 0x821479D8;
} // Block from 82147888h-821479D8h (84 instructions)

//////////////////////////////////////////////////////
// Block at 821479D8h
// Function '?WriteSourceMap@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAV?$FastVector@UStatement@XGRAPHICS@@@2@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821479D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821479D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821479D8);
		  /* 821479D8h */ case    0:  		/* lwz R10, <#[R28]> */
		/* 821479D8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821479D8h case    0:*/		return 0x821479DC;
		  /* 821479DCh */ case    1:  		/* addi R30, R30, 20 */
		/* 821479DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x14);
		/* 821479DCh case    1:*/		return 0x821479E0;
		  /* 821479E0h */ case    2:  		/* mulli R11, R11, 20 */
		/* 821479E0h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x14);
		/* 821479E0h case    2:*/		return 0x821479E4;
		  /* 821479E4h */ case    3:  		/* addi R9, R30, -8 */
		/* 821479E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0xFFFFFFF8);
		/* 821479E4h case    3:*/		return 0x821479E8;
		  /* 821479E8h */ case    4:  		/* add R11, R11, R10 */
		/* 821479E8h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821479E8h case    4:*/		return 0x821479EC;
		  /* 821479ECh */ case    5:  		/* cmplw CR6, R9, R11 */
		/* 821479ECh case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821479ECh case    5:*/		return 0x821479F0;
		  /* 821479F0h */ case    6:  		/* bc 12, CR6_LT, -192 */
		/* 821479F0h case    6:*/		if ( regs.CR[6].lt ) { return 0x82147930;  }
		/* 821479F0h case    6:*/		return 0x821479F4;
	}
	return 0x821479F4;
} // Block from 821479D8h-821479F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821479F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821479F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821479F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821479F4);
		  /* 821479F4h */ case    0:  		/* mr R4, R19 */
		/* 821479F4h case    0:*/		regs.R4 = regs.R19;
		/* 821479F4h case    0:*/		return 0x821479F8;
		  /* 821479F8h */ case    1:  		/* mr R3, R31 */
		/* 821479F8h case    1:*/		regs.R3 = regs.R31;
		/* 821479F8h case    1:*/		return 0x821479FC;
		  /* 821479FCh */ case    2:  		/* bl -6804 */
		/* 821479FCh case    2:*/		regs.LR = 0x82147A00; return 0x82145F68;
		/* 821479FCh case    2:*/		return 0x82147A00;
		  /* 82147A00h */ case    3:  		/* mr R3, R31 */
		/* 82147A00h case    3:*/		regs.R3 = regs.R31;
		/* 82147A00h case    3:*/		return 0x82147A04;
		  /* 82147A04h */ case    4:  		/* bl -6908 */
		/* 82147A04h case    4:*/		regs.LR = 0x82147A08; return 0x82145F08;
		/* 82147A04h case    4:*/		return 0x82147A08;
		  /* 82147A08h */ case    5:  		/* lis R11, -32253 */
		/* 82147A08h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147A08h case    5:*/		return 0x82147A0C;
		  /* 82147A0Ch */ case    6:  		/* mr R4, R27 */
		/* 82147A0Ch case    6:*/		regs.R4 = regs.R27;
		/* 82147A0Ch case    6:*/		return 0x82147A10;
		  /* 82147A10h */ case    7:  		/* addi R23, R11, 26256 */
		/* 82147A10h case    7:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x6690);
		/* 82147A10h case    7:*/		return 0x82147A14;
		  /* 82147A14h */ case    8:  		/* mr R3, R31 */
		/* 82147A14h case    8:*/		regs.R3 = regs.R31;
		/* 82147A14h case    8:*/		return 0x82147A18;
		  /* 82147A18h */ case    9:  		/* mr R5, R23 */
		/* 82147A18h case    9:*/		regs.R5 = regs.R23;
		/* 82147A18h case    9:*/		return 0x82147A1C;
		  /* 82147A1Ch */ case   10:  		/* bl -7020 */
		/* 82147A1Ch case   10:*/		regs.LR = 0x82147A20; return 0x82145EB0;
		/* 82147A1Ch case   10:*/		return 0x82147A20;
		  /* 82147A20h */ case   11:  		/* mr R3, R31 */
		/* 82147A20h case   11:*/		regs.R3 = regs.R31;
		/* 82147A20h case   11:*/		return 0x82147A24;
		  /* 82147A24h */ case   12:  		/* bl -3540 */
		/* 82147A24h case   12:*/		regs.LR = 0x82147A28; return 0x82146C50;
		/* 82147A24h case   12:*/		return 0x82147A28;
		  /* 82147A28h */ case   13:  		/* lwz R10, <#[R20 + 4]> */
		/* 82147A28h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000004) );
		/* 82147A28h case   13:*/		return 0x82147A2C;
		  /* 82147A2Ch */ case   14:  		/* lwz R11, <#[R20]> */
		/* 82147A2Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82147A2Ch case   14:*/		return 0x82147A30;
		  /* 82147A30h */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82147A30h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82147A30h case   15:*/		return 0x82147A34;
		  /* 82147A34h */ case   16:  		/* add R10, R10, R11 */
		/* 82147A34h case   16:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82147A34h case   16:*/		return 0x82147A38;
		  /* 82147A38h */ case   17:  		/* cmplw CR6, R11, R10 */
		/* 82147A38h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82147A38h case   17:*/		return 0x82147A3C;
		  /* 82147A3Ch */ case   18:  		/* bc 4, CR6_LT, 188 */
		/* 82147A3Ch case   18:*/		if ( !regs.CR[6].lt ) { return 0x82147AF8;  }
		/* 82147A3Ch case   18:*/		return 0x82147A40;
		  /* 82147A40h */ case   19:  		/* addi R30, R11, 2 */
		/* 82147A40h case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x2);
		/* 82147A40h case   19:*/		return 0x82147A44;
		  /* 82147A44h */ case   20:  		/* lis R8, -32253 */
		/* 82147A44h case   20:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82147A44h case   20:*/		return 0x82147A48;
		  /* 82147A48h */ case   21:  		/* lis R9, -32253 */
		/* 82147A48h case   21:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82147A48h case   21:*/		return 0x82147A4C;
		  /* 82147A4Ch */ case   22:  		/* lis R10, -32253 */
		/* 82147A4Ch case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82147A4Ch case   22:*/		return 0x82147A50;
		  /* 82147A50h */ case   23:  		/* lis R11, -32253 */
		/* 82147A50h case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147A50h case   23:*/		return 0x82147A54;
		  /* 82147A54h */ case   24:  		/* addi R29, R8, 26252 */
		/* 82147A54h case   24:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R8,0x668C);
		/* 82147A54h case   24:*/		return 0x82147A58;
		  /* 82147A58h */ case   25:  		/* addi R28, R9, 26244 */
		/* 82147A58h case   25:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R9,0x6684);
		/* 82147A58h case   25:*/		return 0x82147A5C;
		  /* 82147A5Ch */ case   26:  		/* addi R25, R10, 26236 */
		/* 82147A5Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0x667C);
		/* 82147A5Ch case   26:*/		return 0x82147A60;
		  /* 82147A60h */ case   27:  		/* addi R24, R11, 26232 */
		/* 82147A60h case   27:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x6678);
		/* 82147A60h case   27:*/		return 0x82147A64;
		  /* 82147A64h */ case   28:  		/* mr R3, R31 */
		/* 82147A64h case   28:*/		regs.R3 = regs.R31;
		/* 82147A64h case   28:*/		return 0x82147A68;
		  /* 82147A68h */ case   29:  		/* bl -7008 */
		/* 82147A68h case   29:*/		regs.LR = 0x82147A6C; return 0x82145F08;
		/* 82147A68h case   29:*/		return 0x82147A6C;
		  /* 82147A6Ch */ case   30:  		/* mr R5, R24 */
		/* 82147A6Ch case   30:*/		regs.R5 = regs.R24;
		/* 82147A6Ch case   30:*/		return 0x82147A70;
		  /* 82147A70h */ case   31:  		/* mr R4, R27 */
		/* 82147A70h case   31:*/		regs.R4 = regs.R27;
		/* 82147A70h case   31:*/		return 0x82147A74;
		  /* 82147A74h */ case   32:  		/* mr R3, R31 */
		/* 82147A74h case   32:*/		regs.R3 = regs.R31;
		/* 82147A74h case   32:*/		return 0x82147A78;
		  /* 82147A78h */ case   33:  		/* bl -7112 */
		/* 82147A78h case   33:*/		regs.LR = 0x82147A7C; return 0x82145EB0;
		/* 82147A78h case   33:*/		return 0x82147A7C;
		  /* 82147A7Ch */ case   34:  		/* mr R5, R18 */
		/* 82147A7Ch case   34:*/		regs.R5 = regs.R18;
		/* 82147A7Ch case   34:*/		return 0x82147A80;
		  /* 82147A80h */ case   35:  		/* mr R4, R26 */
		/* 82147A80h case   35:*/		regs.R4 = regs.R26;
		/* 82147A80h case   35:*/		return 0x82147A84;
		  /* 82147A84h */ case   36:  		/* lbz R6, <#[R30 - 2]> */
		/* 82147A84h case   36:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R30 + 0xFFFFFFFE) );
		/* 82147A84h case   36:*/		return 0x82147A88;
		  /* 82147A88h */ case   37:  		/* mr R3, R31 */
		/* 82147A88h case   37:*/		regs.R3 = regs.R31;
		/* 82147A88h case   37:*/		return 0x82147A8C;
		  /* 82147A8Ch */ case   38:  		/* bl -7132 */
		/* 82147A8Ch case   38:*/		regs.LR = 0x82147A90; return 0x82145EB0;
		/* 82147A8Ch case   38:*/		return 0x82147A90;
		  /* 82147A90h */ case   39:  		/* mr R5, R25 */
		/* 82147A90h case   39:*/		regs.R5 = regs.R25;
		/* 82147A90h case   39:*/		return 0x82147A94;
		  /* 82147A94h */ case   40:  		/* mr R4, R26 */
		/* 82147A94h case   40:*/		regs.R4 = regs.R26;
		/* 82147A94h case   40:*/		return 0x82147A98;
		  /* 82147A98h */ case   41:  		/* lbz R6, <#[R30 - 1]> */
		/* 82147A98h case   41:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R30 + 0xFFFFFFFF) );
		/* 82147A98h case   41:*/		return 0x82147A9C;
		  /* 82147A9Ch */ case   42:  		/* mr R3, R31 */
		/* 82147A9Ch case   42:*/		regs.R3 = regs.R31;
		/* 82147A9Ch case   42:*/		return 0x82147AA0;
		  /* 82147AA0h */ case   43:  		/* bl -7152 */
		/* 82147AA0h case   43:*/		regs.LR = 0x82147AA4; return 0x82145EB0;
		/* 82147AA0h case   43:*/		return 0x82147AA4;
		  /* 82147AA4h */ case   44:  		/* mr R5, R28 */
		/* 82147AA4h case   44:*/		regs.R5 = regs.R28;
		/* 82147AA4h case   44:*/		return 0x82147AA8;
		  /* 82147AA8h */ case   45:  		/* mr R4, R26 */
		/* 82147AA8h case   45:*/		regs.R4 = regs.R26;
		/* 82147AA8h case   45:*/		return 0x82147AAC;
		  /* 82147AACh */ case   46:  		/* lbz R6, <#[R30]> */
		/* 82147AACh case   46:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000000) );
		/* 82147AACh case   46:*/		return 0x82147AB0;
		  /* 82147AB0h */ case   47:  		/* mr R3, R31 */
		/* 82147AB0h case   47:*/		regs.R3 = regs.R31;
		/* 82147AB0h case   47:*/		return 0x82147AB4;
		  /* 82147AB4h */ case   48:  		/* bl -7172 */
		/* 82147AB4h case   48:*/		regs.LR = 0x82147AB8; return 0x82145EB0;
		/* 82147AB4h case   48:*/		return 0x82147AB8;
		  /* 82147AB8h */ case   49:  		/* lbz R11, <#[R30 + 1]> */
		/* 82147AB8h case   49:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000001) );
		/* 82147AB8h case   49:*/		return 0x82147ABC;
		  /* 82147ABCh */ case   50:  		/* mr R5, R29 */
		/* 82147ABCh case   50:*/		regs.R5 = regs.R29;
		/* 82147ABCh case   50:*/		return 0x82147AC0;
		  /* 82147AC0h */ case   51:  		/* mr R4, R26 */
		/* 82147AC0h case   51:*/		regs.R4 = regs.R26;
		/* 82147AC0h case   51:*/		return 0x82147AC4;
		  /* 82147AC4h */ case   52:  		/* mr R3, R31 */
		/* 82147AC4h case   52:*/		regs.R3 = regs.R31;
		/* 82147AC4h case   52:*/		return 0x82147AC8;
		  /* 82147AC8h */ case   53:  		/* extsb R6, R11 */
		/* 82147AC8h case   53:*/		cpu::op::extsb<0>(regs,&regs.R6,regs.R11);
		/* 82147AC8h case   53:*/		return 0x82147ACC;
		  /* 82147ACCh */ case   54:  		/* bl -7196 */
		/* 82147ACCh case   54:*/		regs.LR = 0x82147AD0; return 0x82145EB0;
		/* 82147ACCh case   54:*/		return 0x82147AD0;
		  /* 82147AD0h */ case   55:  		/* mr R3, R31 */
		/* 82147AD0h case   55:*/		regs.R3 = regs.R31;
		/* 82147AD0h case   55:*/		return 0x82147AD4;
		  /* 82147AD4h */ case   56:  		/* bl -3796 */
		/* 82147AD4h case   56:*/		regs.LR = 0x82147AD8; return 0x82146C00;
		/* 82147AD4h case   56:*/		return 0x82147AD8;
		  /* 82147AD8h */ case   57:  		/* lwz R11, <#[R20 + 4]> */
		/* 82147AD8h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 82147AD8h case   57:*/		return 0x82147ADC;
		  /* 82147ADCh */ case   58:  		/* lwz R10, <#[R20]> */
		/* 82147ADCh case   58:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000000) );
		/* 82147ADCh case   58:*/		return 0x82147AE0;
		  /* 82147AE0h */ case   59:  		/* addi R30, R30, 4 */
		/* 82147AE0h case   59:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82147AE0h case   59:*/		return 0x82147AE4;
		  /* 82147AE4h */ case   60:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82147AE4h case   60:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82147AE4h case   60:*/		return 0x82147AE8;
		  /* 82147AE8h */ case   61:  		/* addi R9, R30, -2 */
		/* 82147AE8h case   61:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0xFFFFFFFE);
		/* 82147AE8h case   61:*/		return 0x82147AEC;
		  /* 82147AECh */ case   62:  		/* add R11, R11, R10 */
		/* 82147AECh case   62:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82147AECh case   62:*/		return 0x82147AF0;
		  /* 82147AF0h */ case   63:  		/* cmplw CR6, R9, R11 */
		/* 82147AF0h case   63:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82147AF0h case   63:*/		return 0x82147AF4;
		  /* 82147AF4h */ case   64:  		/* bc 12, CR6_LT, -144 */
		/* 82147AF4h case   64:*/		if ( regs.CR[6].lt ) { return 0x82147A64;  }
		/* 82147AF4h case   64:*/		return 0x82147AF8;
	}
	return 0x82147AF8;
} // Block from 821479F4h-82147AF8h (65 instructions)

//////////////////////////////////////////////////////
// Block at 82147AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147AF8);
		  /* 82147AF8h */ case    0:  		/* mr R4, R23 */
		/* 82147AF8h case    0:*/		regs.R4 = regs.R23;
		/* 82147AF8h case    0:*/		return 0x82147AFC;
		  /* 82147AFCh */ case    1:  		/* mr R3, R31 */
		/* 82147AFCh case    1:*/		regs.R3 = regs.R31;
		/* 82147AFCh case    1:*/		return 0x82147B00;
		  /* 82147B00h */ case    2:  		/* bl -7064 */
		/* 82147B00h case    2:*/		regs.LR = 0x82147B04; return 0x82145F68;
		/* 82147B00h case    2:*/		return 0x82147B04;
		  /* 82147B04h */ case    3:  		/* mr R3, R31 */
		/* 82147B04h case    3:*/		regs.R3 = regs.R31;
		/* 82147B04h case    3:*/		return 0x82147B08;
		  /* 82147B08h */ case    4:  		/* bl -7168 */
		/* 82147B08h case    4:*/		regs.LR = 0x82147B0C; return 0x82145F08;
		/* 82147B08h case    4:*/		return 0x82147B0C;
		  /* 82147B0Ch */ case    5:  		/* lis R11, -32253 */
		/* 82147B0Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147B0Ch case    5:*/		return 0x82147B10;
		  /* 82147B10h */ case    6:  		/* mr R4, R27 */
		/* 82147B10h case    6:*/		regs.R4 = regs.R27;
		/* 82147B10h case    6:*/		return 0x82147B14;
		  /* 82147B14h */ case    7:  		/* addi R25, R11, 26216 */
		/* 82147B14h case    7:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6668);
		/* 82147B14h case    7:*/		return 0x82147B18;
		  /* 82147B18h */ case    8:  		/* mr R3, R31 */
		/* 82147B18h case    8:*/		regs.R3 = regs.R31;
		/* 82147B18h case    8:*/		return 0x82147B1C;
		  /* 82147B1Ch */ case    9:  		/* mr R5, R25 */
		/* 82147B1Ch case    9:*/		regs.R5 = regs.R25;
		/* 82147B1Ch case    9:*/		return 0x82147B20;
		  /* 82147B20h */ case   10:  		/* bl -7280 */
		/* 82147B20h case   10:*/		regs.LR = 0x82147B24; return 0x82145EB0;
		/* 82147B20h case   10:*/		return 0x82147B24;
		  /* 82147B24h */ case   11:  		/* mr R3, R31 */
		/* 82147B24h case   11:*/		regs.R3 = regs.R31;
		/* 82147B24h case   11:*/		return 0x82147B28;
		  /* 82147B28h */ case   12:  		/* bl -3800 */
		/* 82147B28h case   12:*/		regs.LR = 0x82147B2C; return 0x82146C50;
		/* 82147B28h case   12:*/		return 0x82147B2C;
		  /* 82147B2Ch */ case   13:  		/* lwz R11, <#[R17 + 4]> */
		/* 82147B2Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000004) );
		/* 82147B2Ch case   13:*/		return 0x82147B30;
	}
	return 0x82147B30;
} // Block from 82147AF8h-82147B30h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82147B30h
// Function '?WriteVariableDebugInfo@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAV?$FastVector@UVariableDebugInfo@XGRAPHICS@@@2@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147B30);
		  /* 82147B30h */ case    0:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 82147B30h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 82147B30h case    0:*/		return 0x82147B34;
		  /* 82147B34h */ case    1:  		/* lwz R30, <#[R17]> */
		/* 82147B34h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R17 + 0x00000000) );
		/* 82147B34h case    1:*/		return 0x82147B38;
		  /* 82147B38h */ case    2:  		/* add R11, R11, R30 */
		/* 82147B38h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82147B38h case    2:*/		return 0x82147B3C;
		  /* 82147B3Ch */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 82147B3Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82147B3Ch case    3:*/		return 0x82147B40;
		  /* 82147B40h */ case    4:  		/* bc 4, CR6_LT, 120 */
		/* 82147B40h case    4:*/		if ( !regs.CR[6].lt ) { return 0x82147BB8;  }
		/* 82147B40h case    4:*/		return 0x82147B44;
		  /* 82147B44h */ case    5:  		/* lis R10, -32253 */
		/* 82147B44h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82147B44h case    5:*/		return 0x82147B48;
		  /* 82147B48h */ case    6:  		/* lis R11, -32253 */
		/* 82147B48h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147B48h case    6:*/		return 0x82147B4C;
		  /* 82147B4Ch */ case    7:  		/* addi R29, R10, 9184 */
		/* 82147B4Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0x23E0);
		/* 82147B4Ch case    7:*/		return 0x82147B50;
		  /* 82147B50h */ case    8:  		/* addi R28, R11, 26208 */
		/* 82147B50h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6660);
		/* 82147B50h case    8:*/		return 0x82147B54;
		  /* 82147B54h */ case    9:  		/* mr R3, R31 */
		/* 82147B54h case    9:*/		regs.R3 = regs.R31;
		/* 82147B54h case    9:*/		return 0x82147B58;
		  /* 82147B58h */ case   10:  		/* bl -7248 */
		/* 82147B58h case   10:*/		regs.LR = 0x82147B5C; return 0x82145F08;
		/* 82147B58h case   10:*/		return 0x82147B5C;
		  /* 82147B5Ch */ case   11:  		/* mr R5, R28 */
		/* 82147B5Ch case   11:*/		regs.R5 = regs.R28;
		/* 82147B5Ch case   11:*/		return 0x82147B60;
		  /* 82147B60h */ case   12:  		/* mr R4, R27 */
		/* 82147B60h case   12:*/		regs.R4 = regs.R27;
		/* 82147B60h case   12:*/		return 0x82147B64;
		  /* 82147B64h */ case   13:  		/* mr R3, R31 */
		/* 82147B64h case   13:*/		regs.R3 = regs.R31;
		/* 82147B64h case   13:*/		return 0x82147B68;
		  /* 82147B68h */ case   14:  		/* bl -7352 */
		/* 82147B68h case   14:*/		regs.LR = 0x82147B6C; return 0x82145EB0;
		/* 82147B68h case   14:*/		return 0x82147B6C;
		  /* 82147B6Ch */ case   15:  		/* mr R5, R18 */
		/* 82147B6Ch case   15:*/		regs.R5 = regs.R18;
		/* 82147B6Ch case   15:*/		return 0x82147B70;
		  /* 82147B70h */ case   16:  		/* mr R4, R26 */
		/* 82147B70h case   16:*/		regs.R4 = regs.R26;
		/* 82147B70h case   16:*/		return 0x82147B74;
		  /* 82147B74h */ case   17:  		/* lbz R6, <#[R30]> */
		/* 82147B74h case   17:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000000) );
		/* 82147B74h case   17:*/		return 0x82147B78;
		  /* 82147B78h */ case   18:  		/* mr R3, R31 */
		/* 82147B78h case   18:*/		regs.R3 = regs.R31;
		/* 82147B78h case   18:*/		return 0x82147B7C;
		  /* 82147B7Ch */ case   19:  		/* bl -7372 */
		/* 82147B7Ch case   19:*/		regs.LR = 0x82147B80; return 0x82145EB0;
		/* 82147B7Ch case   19:*/		return 0x82147B80;
		  /* 82147B80h */ case   20:  		/* mr R5, R29 */
		/* 82147B80h case   20:*/		regs.R5 = regs.R29;
		/* 82147B80h case   20:*/		return 0x82147B84;
		  /* 82147B84h */ case   21:  		/* mr R4, R26 */
		/* 82147B84h case   21:*/		regs.R4 = regs.R26;
		/* 82147B84h case   21:*/		return 0x82147B88;
		  /* 82147B88h */ case   22:  		/* lbz R6, <#[R30 + 1]> */
		/* 82147B88h case   22:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000001) );
		/* 82147B88h case   22:*/		return 0x82147B8C;
		  /* 82147B8Ch */ case   23:  		/* mr R3, R31 */
		/* 82147B8Ch case   23:*/		regs.R3 = regs.R31;
		/* 82147B8Ch case   23:*/		return 0x82147B90;
		  /* 82147B90h */ case   24:  		/* bl -7392 */
		/* 82147B90h case   24:*/		regs.LR = 0x82147B94; return 0x82145EB0;
		/* 82147B90h case   24:*/		return 0x82147B94;
		  /* 82147B94h */ case   25:  		/* mr R3, R31 */
		/* 82147B94h case   25:*/		regs.R3 = regs.R31;
		/* 82147B94h case   25:*/		return 0x82147B98;
		  /* 82147B98h */ case   26:  		/* bl -3992 */
		/* 82147B98h case   26:*/		regs.LR = 0x82147B9C; return 0x82146C00;
		/* 82147B98h case   26:*/		return 0x82147B9C;
		  /* 82147B9Ch */ case   27:  		/* lwz R11, <#[R17 + 4]> */
		/* 82147B9Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000004) );
		/* 82147B9Ch case   27:*/		return 0x82147BA0;
		  /* 82147BA0h */ case   28:  		/* lwz R10, <#[R17]> */
		/* 82147BA0h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000000) );
		/* 82147BA0h case   28:*/		return 0x82147BA4;
		  /* 82147BA4h */ case   29:  		/* addi R30, R30, 2 */
		/* 82147BA4h case   29:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x2);
		/* 82147BA4h case   29:*/		return 0x82147BA8;
		  /* 82147BA8h */ case   30:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 82147BA8h case   30:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 82147BA8h case   30:*/		return 0x82147BAC;
		  /* 82147BACh */ case   31:  		/* add R11, R11, R10 */
		/* 82147BACh case   31:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82147BACh case   31:*/		return 0x82147BB0;
		  /* 82147BB0h */ case   32:  		/* cmplw CR6, R30, R11 */
		/* 82147BB0h case   32:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82147BB0h case   32:*/		return 0x82147BB4;
		  /* 82147BB4h */ case   33:  		/* bc 12, CR6_LT, -96 */
		/* 82147BB4h case   33:*/		if ( regs.CR[6].lt ) { return 0x82147B54;  }
		/* 82147BB4h case   33:*/		return 0x82147BB8;
	}
	return 0x82147BB8;
} // Block from 82147B30h-82147BB8h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82147BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147BB8);
		  /* 82147BB8h */ case    0:  		/* mr R4, R25 */
		/* 82147BB8h case    0:*/		regs.R4 = regs.R25;
		/* 82147BB8h case    0:*/		return 0x82147BBC;
		  /* 82147BBCh */ case    1:  		/* mr R3, R31 */
		/* 82147BBCh case    1:*/		regs.R3 = regs.R31;
		/* 82147BBCh case    1:*/		return 0x82147BC0;
		  /* 82147BC0h */ case    2:  		/* bl -7256 */
		/* 82147BC0h case    2:*/		regs.LR = 0x82147BC4; return 0x82145F68;
		/* 82147BC0h case    2:*/		return 0x82147BC4;
		  /* 82147BC4h */ case    3:  		/* addi R1, R1, 208 */
		/* 82147BC4h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 82147BC4h case    3:*/		return 0x82147BC8;
		  /* 82147BC8h */ case    4:  		/* b -747852 */
		/* 82147BC8h case    4:*/		return 0x8209127C;
		/* 82147BC8h case    4:*/		return 0x82147BCC;
		  /* 82147BCCh */ case    5:  		/* nop */
		/* 82147BCCh case    5:*/		cpu::op::nop();
		/* 82147BCCh case    5:*/		return 0x82147BD0;
	}
	return 0x82147BD0;
} // Block from 82147BB8h-82147BD0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82147BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147BD0);
		  /* 82147BD0h */ case    0:  		/* mfspr R12, LR */
		/* 82147BD0h case    0:*/		regs.R12 = regs.LR;
		/* 82147BD0h case    0:*/		return 0x82147BD4;
		  /* 82147BD4h */ case    1:  		/* bl -747940 */
		/* 82147BD4h case    1:*/		regs.LR = 0x82147BD8; return 0x82091230;
		/* 82147BD4h case    1:*/		return 0x82147BD8;
		  /* 82147BD8h */ case    2:  		/* stfd FR31, <#[R1 - 128]> */
		/* 82147BD8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF80) );
		/* 82147BD8h case    2:*/		return 0x82147BDC;
		  /* 82147BDCh */ case    3:  		/* stwu R1, <#[R1 - 240]> */
		/* 82147BDCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 82147BDCh case    3:*/		return 0x82147BE0;
		  /* 82147BE0h */ case    4:  		/* lwz R11, <#[R5 + 4]> */
		/* 82147BE0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 82147BE0h case    4:*/		return 0x82147BE4;
		  /* 82147BE4h */ case    5:  		/* mr R30, R3 */
		/* 82147BE4h case    5:*/		regs.R30 = regs.R3;
		/* 82147BE4h case    5:*/		return 0x82147BE8;
		  /* 82147BE8h */ case    6:  		/* mr R31, R4 */
		/* 82147BE8h case    6:*/		regs.R31 = regs.R4;
		/* 82147BE8h case    6:*/		return 0x82147BEC;
		  /* 82147BECh */ case    7:  		/* mr R19, R5 */
		/* 82147BECh case    7:*/		regs.R19 = regs.R5;
		/* 82147BECh case    7:*/		return 0x82147BF0;
		  /* 82147BF0h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82147BF0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82147BF0h case    8:*/		return 0x82147BF4;
		  /* 82147BF4h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 82147BF4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82147C04;  }
		/* 82147BF4h case    9:*/		return 0x82147BF8;
		  /* 82147BF8h */ case   10:  		/* lwz R11, <#[R3 + 116]> */
		/* 82147BF8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000074) );
		/* 82147BF8h case   10:*/		return 0x82147BFC;
		  /* 82147BFCh */ case   11:  		/* cmpwi CR6, R11, 0 */
		/* 82147BFCh case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82147BFCh case   11:*/		return 0x82147C00;
		  /* 82147C00h */ case   12:  		/* bc 12, CR6_EQ, 580 */
		/* 82147C00h case   12:*/		if ( regs.CR[6].eq ) { return 0x82147E44;  }
		/* 82147C00h case   12:*/		return 0x82147C04;
	}
	return 0x82147C04;
} // Block from 82147BD0h-82147C04h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82147C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147C04);
		  /* 82147C04h */ case    0:  		/* mr R3, R31 */
		/* 82147C04h case    0:*/		regs.R3 = regs.R31;
		/* 82147C04h case    0:*/		return 0x82147C08;
		  /* 82147C08h */ case    1:  		/* bl -7424 */
		/* 82147C08h case    1:*/		regs.LR = 0x82147C0C; return 0x82145F08;
		/* 82147C08h case    1:*/		return 0x82147C0C;
		  /* 82147C0Ch */ case    2:  		/* lis R11, -32253 */
		/* 82147C0Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147C0Ch case    2:*/		return 0x82147C10;
		  /* 82147C10h */ case    3:  		/* lis R10, -32253 */
		/* 82147C10h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82147C10h case    3:*/		return 0x82147C14;
		  /* 82147C14h */ case    4:  		/* addi R18, R11, 26336 */
		/* 82147C14h case    4:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R11,0x66E0);
		/* 82147C14h case    4:*/		return 0x82147C18;
		  /* 82147C18h */ case    5:  		/* addi R20, R10, 25840 */
		/* 82147C18h case    5:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R10,0x64F0);
		/* 82147C18h case    5:*/		return 0x82147C1C;
		  /* 82147C1Ch */ case    6:  		/* mr R5, R18 */
		/* 82147C1Ch case    6:*/		regs.R5 = regs.R18;
		/* 82147C1Ch case    6:*/		return 0x82147C20;
		  /* 82147C20h */ case    7:  		/* mr R4, R20 */
		/* 82147C20h case    7:*/		regs.R4 = regs.R20;
		/* 82147C20h case    7:*/		return 0x82147C24;
		  /* 82147C24h */ case    8:  		/* mr R3, R31 */
		/* 82147C24h case    8:*/		regs.R3 = regs.R31;
		/* 82147C24h case    8:*/		return 0x82147C28;
		  /* 82147C28h */ case    9:  		/* bl -7544 */
		/* 82147C28h case    9:*/		regs.LR = 0x82147C2C; return 0x82145EB0;
		/* 82147C28h case    9:*/		return 0x82147C2C;
		  /* 82147C2Ch */ case   10:  		/* lis R11, -32253 */
		/* 82147C2Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147C2Ch case   10:*/		return 0x82147C30;
		  /* 82147C30h */ case   11:  		/* addi R21, R11, 25712 */
		/* 82147C30h case   11:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0x6470);
		/* 82147C30h case   11:*/		return 0x82147C34;
		  /* 82147C34h */ case   12:  		/* lwz R11, <#[R30 + 116]> */
		/* 82147C34h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000074) );
		/* 82147C34h case   12:*/		return 0x82147C38;
		  /* 82147C38h */ case   13:  		/* cmpwi CR6, R11, 0 */
		/* 82147C38h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82147C38h case   13:*/		return 0x82147C3C;
		  /* 82147C3Ch */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 82147C3Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x82147C58;  }
		/* 82147C3Ch case   14:*/		return 0x82147C40;
		  /* 82147C40h */ case   15:  		/* lis R11, -32255 */
		/* 82147C40h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82147C40h case   15:*/		return 0x82147C44;
		  /* 82147C44h */ case   16:  		/* mr R4, R21 */
		/* 82147C44h case   16:*/		regs.R4 = regs.R21;
		/* 82147C44h case   16:*/		return 0x82147C48;
		  /* 82147C48h */ case   17:  		/* addi R5, R11, 11836 */
		/* 82147C48h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2E3C);
		/* 82147C48h case   17:*/		return 0x82147C4C;
		  /* 82147C4Ch */ case   18:  		/* li R6, 1 */
		/* 82147C4Ch case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82147C4Ch case   18:*/		return 0x82147C50;
		  /* 82147C50h */ case   19:  		/* mr R3, R31 */
		/* 82147C50h case   19:*/		regs.R3 = regs.R31;
		/* 82147C50h case   19:*/		return 0x82147C54;
		  /* 82147C54h */ case   20:  		/* bl -7588 */
		/* 82147C54h case   20:*/		regs.LR = 0x82147C58; return 0x82145EB0;
		/* 82147C54h case   20:*/		return 0x82147C58;
	}
	return 0x82147C58;
} // Block from 82147C04h-82147C58h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82147C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147C58);
		  /* 82147C58h */ case    0:  		/* mr R3, R31 */
		/* 82147C58h case    0:*/		regs.R3 = regs.R31;
		/* 82147C58h case    0:*/		return 0x82147C5C;
		  /* 82147C5Ch */ case    1:  		/* bl -4108 */
		/* 82147C5Ch case    1:*/		regs.LR = 0x82147C60; return 0x82146C50;
		/* 82147C5Ch case    1:*/		return 0x82147C60;
		  /* 82147C60h */ case    2:  		/* lwz R10, <#[R19 + 4]> */
		/* 82147C60h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000004) );
		/* 82147C60h case    2:*/		return 0x82147C64;
		  /* 82147C64h */ case    3:  		/* lwz R11, <#[R19]> */
		/* 82147C64h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82147C64h case    3:*/		return 0x82147C68;
		  /* 82147C68h */ case    4:  		/* mulli R10, R10, 28 */
		/* 82147C68h case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x1C);
		/* 82147C68h case    4:*/		return 0x82147C6C;
		  /* 82147C6Ch */ case    5:  		/* add R10, R10, R11 */
		/* 82147C6Ch case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82147C6Ch case    5:*/		return 0x82147C70;
		  /* 82147C70h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 82147C70h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82147C70h case    6:*/		return 0x82147C74;
		  /* 82147C74h */ case    7:  		/* bc 4, CR6_LT, 452 */
		/* 82147C74h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82147E38;  }
		/* 82147C74h case    7:*/		return 0x82147C78;
		  /* 82147C78h */ case    8:  		/* addi R30, R11, 8 */
		/* 82147C78h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x8);
		/* 82147C78h case    8:*/		return 0x82147C7C;
		  /* 82147C7Ch */ case    9:  		/* lis R11, -32256 */
		/* 82147C7Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82147C7Ch case    9:*/		return 0x82147C80;
		  /* 82147C80h */ case   10:  		/* lis R4, -32255 */
		/* 82147C80h case   10:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8201);
		/* 82147C80h case   10:*/		return 0x82147C84;
		  /* 82147C84h */ case   11:  		/* lis R5, -32253 */
		/* 82147C84h case   11:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 82147C84h case   11:*/		return 0x82147C88;
		  /* 82147C88h */ case   12:  		/* lis R6, -32255 */
		/* 82147C88h case   12:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8201);
		/* 82147C88h case   12:*/		return 0x82147C8C;
		  /* 82147C8Ch */ case   13:  		/* lis R7, -32253 */
		/* 82147C8Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82147C8Ch case   13:*/		return 0x82147C90;
		  /* 82147C90h */ case   14:  		/* lfs FR31, <#[R11 + 2664]> */
		/* 82147C90h case   14:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000A68) );
		/* 82147C90h case   14:*/		return 0x82147C94;
		  /* 82147C94h */ case   15:  		/* lis R8, -32253 */
		/* 82147C94h case   15:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82147C94h case   15:*/		return 0x82147C98;
		  /* 82147C98h */ case   16:  		/* lis R9, -32253 */
		/* 82147C98h case   16:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82147C98h case   16:*/		return 0x82147C9C;
		  /* 82147C9Ch */ case   17:  		/* lis R10, -32253 */
		/* 82147C9Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82147C9Ch case   17:*/		return 0x82147CA0;
		  /* 82147CA0h */ case   18:  		/* lis R11, -32254 */
		/* 82147CA0h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82147CA0h case   18:*/		return 0x82147CA4;
		  /* 82147CA4h */ case   19:  		/* addi R25, R4, -16564 */
		/* 82147CA4h case   19:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R4,0xFFFFBF4C);
		/* 82147CA4h case   19:*/		return 0x82147CA8;
		  /* 82147CA8h */ case   20:  		/* addi R28, R5, 25724 */
		/* 82147CA8h case   20:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R5,0x647C);
		/* 82147CA8h case   20:*/		return 0x82147CAC;
		  /* 82147CACh */ case   21:  		/* addi R24, R6, -10628 */
		/* 82147CACh case   21:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R6,0xFFFFD67C);
		/* 82147CACh case   21:*/		return 0x82147CB0;
		  /* 82147CB0h */ case   22:  		/* addi R23, R7, 25848 */
		/* 82147CB0h case   22:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R7,0x64F8);
		/* 82147CB0h case   22:*/		return 0x82147CB4;
		  /* 82147CB4h */ case   23:  		/* addi R22, R8, 26324 */
		/* 82147CB4h case   23:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R8,0x66D4);
		/* 82147CB4h case   23:*/		return 0x82147CB8;
		  /* 82147CB8h */ case   24:  		/* addi R27, R9, 25896 */
		/* 82147CB8h case   24:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0x6528);
		/* 82147CB8h case   24:*/		return 0x82147CBC;
		  /* 82147CBCh */ case   25:  		/* addi R26, R10, 25856 */
		/* 82147CBCh case   25:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x6500);
		/* 82147CBCh case   25:*/		return 0x82147CC0;
		  /* 82147CC0h */ case   26:  		/* addi R29, R11, -12900 */
		/* 82147CC0h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFCD9C);
		/* 82147CC0h case   26:*/		return 0x82147CC4;
		  /* 82147CC4h */ case   27:  		/* lwz R11, <#[R30 - 8]> */
		/* 82147CC4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 82147CC4h case   27:*/		return 0x82147CC8;
		  /* 82147CC8h */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 82147CC8h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82147CC8h case   28:*/		return 0x82147CCC;
		  /* 82147CCCh */ case   29:  		/* bc 12, CR6_EQ, 332 */
		/* 82147CCCh case   29:*/		if ( regs.CR[6].eq ) { return 0x82147E18;  }
		/* 82147CCCh case   29:*/		return 0x82147CD0;
		  /* 82147CD0h */ case   30:  		/* mr R3, R31 */
		/* 82147CD0h case   30:*/		regs.R3 = regs.R31;
		/* 82147CD0h case   30:*/		return 0x82147CD4;
		  /* 82147CD4h */ case   31:  		/* bl -7628 */
		/* 82147CD4h case   31:*/		regs.LR = 0x82147CD8; return 0x82145F08;
		/* 82147CD4h case   31:*/		return 0x82147CD8;
		  /* 82147CD8h */ case   32:  		/* mr R5, R29 */
		/* 82147CD8h case   32:*/		regs.R5 = regs.R29;
		/* 82147CD8h case   32:*/		return 0x82147CDC;
		  /* 82147CDCh */ case   33:  		/* mr R4, R20 */
		/* 82147CDCh case   33:*/		regs.R4 = regs.R20;
		/* 82147CDCh case   33:*/		return 0x82147CE0;
		  /* 82147CE0h */ case   34:  		/* mr R3, R31 */
		/* 82147CE0h case   34:*/		regs.R3 = regs.R31;
		/* 82147CE0h case   34:*/		return 0x82147CE4;
		  /* 82147CE4h */ case   35:  		/* bl -7732 */
		/* 82147CE4h case   35:*/		regs.LR = 0x82147CE8; return 0x82145EB0;
		/* 82147CE4h case   35:*/		return 0x82147CE8;
		  /* 82147CE8h */ case   36:  		/* mr R5, R26 */
		/* 82147CE8h case   36:*/		regs.R5 = regs.R26;
		/* 82147CE8h case   36:*/		return 0x82147CEC;
		  /* 82147CECh */ case   37:  		/* mr R4, R21 */
		/* 82147CECh case   37:*/		regs.R4 = regs.R21;
		/* 82147CECh case   37:*/		return 0x82147CF0;
		  /* 82147CF0h */ case   38:  		/* lwz R6, <#[R30 - 8]> */
		/* 82147CF0h case   38:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 82147CF0h case   38:*/		return 0x82147CF4;
		  /* 82147CF4h */ case   39:  		/* mr R3, R31 */
		/* 82147CF4h case   39:*/		regs.R3 = regs.R31;
		/* 82147CF4h case   39:*/		return 0x82147CF8;
		  /* 82147CF8h */ case   40:  		/* bl -7752 */
		/* 82147CF8h case   40:*/		regs.LR = 0x82147CFC; return 0x82145EB0;
		/* 82147CF8h case   40:*/		return 0x82147CFC;
		  /* 82147CFCh */ case   41:  		/* lwz R11, <#[R30 - 4]> */
		/* 82147CFCh case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 82147CFCh case   41:*/		return 0x82147D00;
		  /* 82147D00h */ case   42:  		/* mr R5, R27 */
		/* 82147D00h case   42:*/		regs.R5 = regs.R27;
		/* 82147D00h case   42:*/		return 0x82147D04;
		  /* 82147D04h */ case   43:  		/* rlwinm R10, R11, 31, 1, 31 */
		/* 82147D04h case   43:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R10,regs.R11);
		/* 82147D04h case   43:*/		return 0x82147D08;
		  /* 82147D08h */ case   44:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 82147D08h case   44:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82147D08h case   44:*/		return 0x82147D0C;
		  /* 82147D0Ch */ case   45:  		/* std R10, <#[R1 + 80]> */
		/* 82147D0Ch case   45:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82147D0Ch case   45:*/		return 0x82147D10;
	}
	return 0x82147D10;
} // Block from 82147C58h-82147D10h (46 instructions)

//////////////////////////////////////////////////////
// Block at 82147D10h
// Function '?WriteScopeInfo@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAV?$FastVector@UScopeInfo@XGRAPHICS@@@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147D10);
		  /* 82147D10h */ case    0:  		/* lfd FR0, <#[R1 + 80]> */
		/* 82147D10h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82147D10h case    0:*/		return 0x82147D14;
		  /* 82147D14h */ case    1:  		/* std R11, <#[R1 + 88]> */
		/* 82147D14h case    1:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82147D14h case    1:*/		return 0x82147D18;
		  /* 82147D18h */ case    2:  		/* lfd FR13, <#[R1 + 88]> */
		/* 82147D18h case    2:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 82147D18h case    2:*/		return 0x82147D1C;
		  /* 82147D1Ch */ case    3:  		/* fcfid FR0, FR0 */
		/* 82147D1Ch case    3:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 82147D1Ch case    3:*/		return 0x82147D20;
		  /* 82147D20h */ case    4:  		/* mr R4, R28 */
		/* 82147D20h case    4:*/		regs.R4 = regs.R28;
		/* 82147D20h case    4:*/		return 0x82147D24;
		  /* 82147D24h */ case    5:  		/* fcfid FR13, FR13 */
		/* 82147D24h case    5:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 82147D24h case    5:*/		return 0x82147D28;
		  /* 82147D28h */ case    6:  		/* mr R3, R31 */
		/* 82147D28h case    6:*/		regs.R3 = regs.R31;
		/* 82147D28h case    6:*/		return 0x82147D2C;
		  /* 82147D2Ch */ case    7:  		/* frsp FR0, FR0 */
		/* 82147D2Ch case    7:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 82147D2Ch case    7:*/		return 0x82147D30;
		  /* 82147D30h */ case    8:  		/* frsp FR13, FR13 */
		/* 82147D30h case    8:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 82147D30h case    8:*/		return 0x82147D34;
		  /* 82147D34h */ case    9:  		/* fmadds FR1, FR13, FR31, FR0 */
		/* 82147D34h case    9:*/		cpu::op::fmadds<0>(regs,&regs.FR1,regs.FR13,regs.FR31,regs.FR0);
		/* 82147D34h case    9:*/		return 0x82147D38;
		  /* 82147D38h */ case   10:  		/* stfd FR1, <#[R1 + 40]> */
		/* 82147D38h case   10:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000028) );
		/* 82147D38h case   10:*/		return 0x82147D3C;
		  /* 82147D3Ch */ case   11:  		/* ld R6, <#[R1 + 40]> */
		/* 82147D3Ch case   11:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82147D3Ch case   11:*/		return 0x82147D40;
		  /* 82147D40h */ case   12:  		/* bl -7824 */
		/* 82147D40h case   12:*/		regs.LR = 0x82147D44; return 0x82145EB0;
		/* 82147D40h case   12:*/		return 0x82147D44;
		  /* 82147D44h */ case   13:  		/* lwz R11, <#[R30]> */
		/* 82147D44h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82147D44h case   13:*/		return 0x82147D48;
		  /* 82147D48h */ case   14:  		/* cmpwi CR6, R11, -1 */
		/* 82147D48h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82147D48h case   14:*/		return 0x82147D4C;
		  /* 82147D4Ch */ case   15:  		/* bc 12, CR6_EQ, 72 */
		/* 82147D4Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x82147D94;  }
		/* 82147D4Ch case   15:*/		return 0x82147D50;
		  /* 82147D50h */ case   16:  		/* rlwinm R10, R11, 31, 1, 31 */
		/* 82147D50h case   16:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R10,regs.R11);
		/* 82147D50h case   16:*/		return 0x82147D54;
		  /* 82147D54h */ case   17:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 82147D54h case   17:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82147D54h case   17:*/		return 0x82147D58;
		  /* 82147D58h */ case   18:  		/* std R10, <#[R1 + 96]> */
		/* 82147D58h case   18:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 82147D58h case   18:*/		return 0x82147D5C;
		  /* 82147D5Ch */ case   19:  		/* lfd FR0, <#[R1 + 96]> */
		/* 82147D5Ch case   19:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 82147D5Ch case   19:*/		return 0x82147D60;
		  /* 82147D60h */ case   20:  		/* std R11, <#[R1 + 104]> */
		/* 82147D60h case   20:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82147D60h case   20:*/		return 0x82147D64;
		  /* 82147D64h */ case   21:  		/* lfd FR13, <#[R1 + 104]> */
		/* 82147D64h case   21:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000068) );
		/* 82147D64h case   21:*/		return 0x82147D68;
		  /* 82147D68h */ case   22:  		/* fcfid FR0, FR0 */
		/* 82147D68h case   22:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 82147D68h case   22:*/		return 0x82147D6C;
		  /* 82147D6Ch */ case   23:  		/* mr R5, R22 */
		/* 82147D6Ch case   23:*/		regs.R5 = regs.R22;
		/* 82147D6Ch case   23:*/		return 0x82147D70;
		  /* 82147D70h */ case   24:  		/* fcfid FR13, FR13 */
		/* 82147D70h case   24:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 82147D70h case   24:*/		return 0x82147D74;
		  /* 82147D74h */ case   25:  		/* mr R4, R28 */
		/* 82147D74h case   25:*/		regs.R4 = regs.R28;
		/* 82147D74h case   25:*/		return 0x82147D78;
		  /* 82147D78h */ case   26:  		/* frsp FR0, FR0 */
		/* 82147D78h case   26:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 82147D78h case   26:*/		return 0x82147D7C;
		  /* 82147D7Ch */ case   27:  		/* mr R3, R31 */
		/* 82147D7Ch case   27:*/		regs.R3 = regs.R31;
		/* 82147D7Ch case   27:*/		return 0x82147D80;
		  /* 82147D80h */ case   28:  		/* frsp FR13, FR13 */
		/* 82147D80h case   28:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 82147D80h case   28:*/		return 0x82147D84;
		  /* 82147D84h */ case   29:  		/* fmadds FR1, FR13, FR31, FR0 */
		/* 82147D84h case   29:*/		cpu::op::fmadds<0>(regs,&regs.FR1,regs.FR13,regs.FR31,regs.FR0);
		/* 82147D84h case   29:*/		return 0x82147D88;
		  /* 82147D88h */ case   30:  		/* stfd FR1, <#[R1 + 40]> */
		/* 82147D88h case   30:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000028) );
		/* 82147D88h case   30:*/		return 0x82147D8C;
		  /* 82147D8Ch */ case   31:  		/* ld R6, <#[R1 + 40]> */
		/* 82147D8Ch case   31:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82147D8Ch case   31:*/		return 0x82147D90;
		  /* 82147D90h */ case   32:  		/* bl -7904 */
		/* 82147D90h case   32:*/		regs.LR = 0x82147D94; return 0x82145EB0;
		/* 82147D90h case   32:*/		return 0x82147D94;
	}
	return 0x82147D94;
} // Block from 82147D10h-82147D94h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82147D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147D94);
		  /* 82147D94h */ case    0:  		/* lwz R6, <#[R30 + 4]> */
		/* 82147D94h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 82147D94h case    0:*/		return 0x82147D98;
		  /* 82147D98h */ case    1:  		/* cmpwi CR6, R6, -1 */
		/* 82147D98h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R6,0xFFFFFFFF);
		/* 82147D98h case    1:*/		return 0x82147D9C;
		  /* 82147D9Ch */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82147D9Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82147DB0;  }
		/* 82147D9Ch case    2:*/		return 0x82147DA0;
		  /* 82147DA0h */ case    3:  		/* mr R5, R23 */
		/* 82147DA0h case    3:*/		regs.R5 = regs.R23;
		/* 82147DA0h case    3:*/		return 0x82147DA4;
		  /* 82147DA4h */ case    4:  		/* mr R4, R21 */
		/* 82147DA4h case    4:*/		regs.R4 = regs.R21;
		/* 82147DA4h case    4:*/		return 0x82147DA8;
		  /* 82147DA8h */ case    5:  		/* mr R3, R31 */
		/* 82147DA8h case    5:*/		regs.R3 = regs.R31;
		/* 82147DA8h case    5:*/		return 0x82147DAC;
		  /* 82147DACh */ case    6:  		/* bl -7932 */
		/* 82147DACh case    6:*/		regs.LR = 0x82147DB0; return 0x82145EB0;
		/* 82147DACh case    6:*/		return 0x82147DB0;
	}
	return 0x82147DB0;
} // Block from 82147D94h-82147DB0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82147DB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147DB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147DB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147DB0);
		  /* 82147DB0h */ case    0:  		/* mr R5, R24 */
		/* 82147DB0h case    0:*/		regs.R5 = regs.R24;
		/* 82147DB0h case    0:*/		return 0x82147DB4;
		  /* 82147DB4h */ case    1:  		/* lwz R6, <#[R30 + 8]> */
		/* 82147DB4h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000008) );
		/* 82147DB4h case    1:*/		return 0x82147DB8;
		  /* 82147DB8h */ case    2:  		/* mr R4, R21 */
		/* 82147DB8h case    2:*/		regs.R4 = regs.R21;
		/* 82147DB8h case    2:*/		return 0x82147DBC;
		  /* 82147DBCh */ case    3:  		/* mr R3, R31 */
		/* 82147DBCh case    3:*/		regs.R3 = regs.R31;
		/* 82147DBCh case    3:*/		return 0x82147DC0;
		  /* 82147DC0h */ case    4:  		/* bl -7952 */
		/* 82147DC0h case    4:*/		regs.LR = 0x82147DC4; return 0x82145EB0;
		/* 82147DC0h case    4:*/		return 0x82147DC4;
		  /* 82147DC4h */ case    5:  		/* lwz R11, <#[R30 + 12]> */
		/* 82147DC4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82147DC4h case    5:*/		return 0x82147DC8;
		  /* 82147DC8h */ case    6:  		/* mr R3, R31 */
		/* 82147DC8h case    6:*/		regs.R3 = regs.R31;
		/* 82147DC8h case    6:*/		return 0x82147DCC;
		  /* 82147DCCh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82147DCCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82147DCCh case    7:*/		return 0x82147DD0;
		  /* 82147DD0h */ case    8:  		/* bc 12, CR6_EQ, 68 */
		/* 82147DD0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82147E14;  }
		/* 82147DD0h case    8:*/		return 0x82147DD4;
		  /* 82147DD4h */ case    9:  		/* mr R4, R25 */
		/* 82147DD4h case    9:*/		regs.R4 = regs.R25;
		/* 82147DD4h case    9:*/		return 0x82147DD8;
		  /* 82147DD8h */ case   10:  		/* bl -7976 */
		/* 82147DD8h case   10:*/		regs.LR = 0x82147DDC; return 0x82145EB0;
		/* 82147DD8h case   10:*/		return 0x82147DDC;
		  /* 82147DDCh */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 82147DDCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82147DDCh case   11:*/		return 0x82147DE0;
		  /* 82147DE0h */ case   12:  		/* mr R3, R31 */
		/* 82147DE0h case   12:*/		regs.R3 = regs.R31;
		/* 82147DE0h case   12:*/		return 0x82147DE4;
		  /* 82147DE4h */ case   13:  		/* addi R11, R11, 1 */
		/* 82147DE4h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82147DE4h case   13:*/		return 0x82147DE8;
		  /* 82147DE8h */ case   14:  		/* stw R11, <#[R31 + 4]> */
		/* 82147DE8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82147DE8h case   14:*/		return 0x82147DEC;
		  /* 82147DECh */ case   15:  		/* lwz R5, <#[R30 + 16]> */
		/* 82147DECh case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000010) );
		/* 82147DECh case   15:*/		return 0x82147DF0;
		  /* 82147DF0h */ case   16:  		/* lwz R4, <#[R30 + 12]> */
		/* 82147DF0h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 82147DF0h case   16:*/		return 0x82147DF4;
		  /* 82147DF4h */ case   17:  		/* lwz R11, <#[R31]> */
		/* 82147DF4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82147DF4h case   17:*/		return 0x82147DF8;
		  /* 82147DF8h */ case   18:  		/* lwz R11, <#[R11 + 12]> */
		/* 82147DF8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82147DF8h case   18:*/		return 0x82147DFC;
		  /* 82147DFCh */ case   19:  		/* mtspr CTR, R11 */
		/* 82147DFCh case   19:*/		regs.CTR = regs.R11;
		/* 82147DFCh case   19:*/		return 0x82147E00;
		  /* 82147E00h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 82147E00h case   20:*/		if ( 1 ) { regs.LR = 0x82147E04; return (uint32)regs.CTR; }
		/* 82147E00h case   20:*/		return 0x82147E04;
		  /* 82147E04h */ case   21:  		/* mr R4, R29 */
		/* 82147E04h case   21:*/		regs.R4 = regs.R29;
		/* 82147E04h case   21:*/		return 0x82147E08;
		  /* 82147E08h */ case   22:  		/* mr R3, R31 */
		/* 82147E08h case   22:*/		regs.R3 = regs.R31;
		/* 82147E08h case   22:*/		return 0x82147E0C;
		  /* 82147E0Ch */ case   23:  		/* bl -7732 */
		/* 82147E0Ch case   23:*/		regs.LR = 0x82147E10; return 0x82145FD8;
		/* 82147E0Ch case   23:*/		return 0x82147E10;
		  /* 82147E10h */ case   24:  		/* b 8 */
		/* 82147E10h case   24:*/		return 0x82147E18;
		/* 82147E10h case   24:*/		return 0x82147E14;
	}
	return 0x82147E14;
} // Block from 82147DB0h-82147E14h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82147E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147E14);
		  /* 82147E14h */ case    0:  		/* bl -4628 */
		/* 82147E14h case    0:*/		regs.LR = 0x82147E18; return 0x82146C00;
		/* 82147E14h case    0:*/		return 0x82147E18;
	}
	return 0x82147E18;
} // Block from 82147E14h-82147E18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82147E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147E18);
		  /* 82147E18h */ case    0:  		/* lwz R11, <#[R19 + 4]> */
		/* 82147E18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 82147E18h case    0:*/		return 0x82147E1C;
		  /* 82147E1Ch */ case    1:  		/* addi R30, R30, 28 */
		/* 82147E1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1C);
		/* 82147E1Ch case    1:*/		return 0x82147E20;
	}
	return 0x82147E20;
} // Block from 82147E18h-82147E20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82147E20h
// Function '?WriteFuncEntryExitInfo@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAV?$FastVector@UFuncEntryExitInfo@XGRAPHICS@@@2@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147E20);
		  /* 82147E20h */ case    0:  		/* lwz R10, <#[R19]> */
		/* 82147E20h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000000) );
		/* 82147E20h case    0:*/		return 0x82147E24;
		  /* 82147E24h */ case    1:  		/* mulli R11, R11, 28 */
		/* 82147E24h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1C);
		/* 82147E24h case    1:*/		return 0x82147E28;
		  /* 82147E28h */ case    2:  		/* add R11, R11, R10 */
		/* 82147E28h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82147E28h case    2:*/		return 0x82147E2C;
		  /* 82147E2Ch */ case    3:  		/* addi R10, R30, -8 */
		/* 82147E2Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFF8);
		/* 82147E2Ch case    3:*/		return 0x82147E30;
		  /* 82147E30h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 82147E30h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82147E30h case    4:*/		return 0x82147E34;
		  /* 82147E34h */ case    5:  		/* bc 12, CR6_LT, -368 */
		/* 82147E34h case    5:*/		if ( regs.CR[6].lt ) { return 0x82147CC4;  }
		/* 82147E34h case    5:*/		return 0x82147E38;
	}
	return 0x82147E38;
} // Block from 82147E20h-82147E38h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82147E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147E38);
		  /* 82147E38h */ case    0:  		/* mr R4, R18 */
		/* 82147E38h case    0:*/		regs.R4 = regs.R18;
		/* 82147E38h case    0:*/		return 0x82147E3C;
		  /* 82147E3Ch */ case    1:  		/* mr R3, R31 */
		/* 82147E3Ch case    1:*/		regs.R3 = regs.R31;
		/* 82147E3Ch case    1:*/		return 0x82147E40;
		  /* 82147E40h */ case    2:  		/* bl -7896 */
		/* 82147E40h case    2:*/		regs.LR = 0x82147E44; return 0x82145F68;
		/* 82147E40h case    2:*/		return 0x82147E44;
	}
	return 0x82147E44;
} // Block from 82147E38h-82147E44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82147E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147E44);
		  /* 82147E44h */ case    0:  		/* addi R1, R1, 240 */
		/* 82147E44h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 82147E44h case    0:*/		return 0x82147E48;
		  /* 82147E48h */ case    1:  		/* lfd FR31, <#[R1 - 128]> */
		/* 82147E48h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF80) );
		/* 82147E48h case    1:*/		return 0x82147E4C;
		  /* 82147E4Ch */ case    2:  		/* b -748492 */
		/* 82147E4Ch case    2:*/		return 0x82091280;
		/* 82147E4Ch case    2:*/		return 0x82147E50;
	}
	return 0x82147E50;
} // Block from 82147E44h-82147E50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82147E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147E50);
		  /* 82147E50h */ case    0:  		/* mfspr R12, LR */
		/* 82147E50h case    0:*/		regs.R12 = regs.LR;
		/* 82147E50h case    0:*/		return 0x82147E54;
		  /* 82147E54h */ case    1:  		/* bl -748596 */
		/* 82147E54h case    1:*/		regs.LR = 0x82147E58; return 0x82091220;
		/* 82147E54h case    1:*/		return 0x82147E58;
		  /* 82147E58h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 82147E58h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82147E58h case    2:*/		return 0x82147E5C;
		  /* 82147E5Ch */ case    3:  		/* stwu R1, <#[R1 - 288]> */
		/* 82147E5Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 82147E5Ch case    3:*/		return 0x82147E60;
		  /* 82147E60h */ case    4:  		/* lwz R11, <#[R5 + 4]> */
		/* 82147E60h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 82147E60h case    4:*/		return 0x82147E64;
		  /* 82147E64h */ case    5:  		/* mr R30, R3 */
		/* 82147E64h case    5:*/		regs.R30 = regs.R3;
		/* 82147E64h case    5:*/		return 0x82147E68;
		  /* 82147E68h */ case    6:  		/* mr R31, R4 */
		/* 82147E68h case    6:*/		regs.R31 = regs.R4;
		/* 82147E68h case    6:*/		return 0x82147E6C;
		  /* 82147E6Ch */ case    7:  		/* stw R5, <#[R1 + 324]> */
		/* 82147E6Ch case    7:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000144) );
		/* 82147E6Ch case    7:*/		return 0x82147E70;
		  /* 82147E70h */ case    8:  		/* mr R28, R5 */
		/* 82147E70h case    8:*/		regs.R28 = regs.R5;
		/* 82147E70h case    8:*/		return 0x82147E74;
		  /* 82147E74h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82147E74h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82147E74h case    9:*/		return 0x82147E78;
		  /* 82147E78h */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 82147E78h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82147E88;  }
		/* 82147E78h case   10:*/		return 0x82147E7C;
		  /* 82147E7Ch */ case   11:  		/* lwz R11, <#[R3 + 124]> */
		/* 82147E7Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000007C) );
		/* 82147E7Ch case   11:*/		return 0x82147E80;
		  /* 82147E80h */ case   12:  		/* cmpwi CR6, R11, 0 */
		/* 82147E80h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82147E80h case   12:*/		return 0x82147E84;
		  /* 82147E84h */ case   13:  		/* bc 12, CR6_EQ, 960 */
		/* 82147E84h case   13:*/		if ( regs.CR[6].eq ) { return 0x82148244;  }
		/* 82147E84h case   13:*/		return 0x82147E88;
	}
	return 0x82147E88;
} // Block from 82147E50h-82147E88h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82147E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147E88);
		  /* 82147E88h */ case    0:  		/* mr R3, R31 */
		/* 82147E88h case    0:*/		regs.R3 = regs.R31;
		/* 82147E88h case    0:*/		return 0x82147E8C;
		  /* 82147E8Ch */ case    1:  		/* bl -8068 */
		/* 82147E8Ch case    1:*/		regs.LR = 0x82147E90; return 0x82145F08;
		/* 82147E8Ch case    1:*/		return 0x82147E90;
		  /* 82147E90h */ case    2:  		/* lis R11, -32253 */
		/* 82147E90h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147E90h case    2:*/		return 0x82147E94;
		  /* 82147E94h */ case    3:  		/* lis R10, -32253 */
		/* 82147E94h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82147E94h case    3:*/		return 0x82147E98;
		  /* 82147E98h */ case    4:  		/* addi R29, R11, 26400 */
		/* 82147E98h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6720);
		/* 82147E98h case    4:*/		return 0x82147E9C;
		  /* 82147E9Ch */ case    5:  		/* addi R15, R10, 25840 */
		/* 82147E9Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R10,0x64F0);
		/* 82147E9Ch case    5:*/		return 0x82147EA0;
		  /* 82147EA0h */ case    6:  		/* mr R5, R29 */
		/* 82147EA0h case    6:*/		regs.R5 = regs.R29;
		/* 82147EA0h case    6:*/		return 0x82147EA4;
		  /* 82147EA4h */ case    7:  		/* stw R29, <#[R1 + 92]> */
		/* 82147EA4h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000005C) );
		/* 82147EA4h case    7:*/		return 0x82147EA8;
		  /* 82147EA8h */ case    8:  		/* mr R4, R15 */
		/* 82147EA8h case    8:*/		regs.R4 = regs.R15;
		/* 82147EA8h case    8:*/		return 0x82147EAC;
		  /* 82147EACh */ case    9:  		/* mr R3, R31 */
		/* 82147EACh case    9:*/		regs.R3 = regs.R31;
		/* 82147EACh case    9:*/		return 0x82147EB0;
		  /* 82147EB0h */ case   10:  		/* bl -8192 */
		/* 82147EB0h case   10:*/		regs.LR = 0x82147EB4; return 0x82145EB0;
		/* 82147EB0h case   10:*/		return 0x82147EB4;
		  /* 82147EB4h */ case   11:  		/* lis R11, -32253 */
		/* 82147EB4h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82147EB4h case   11:*/		return 0x82147EB8;
		  /* 82147EB8h */ case   12:  		/* addi R4, R11, 25712 */
		/* 82147EB8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6470);
		/* 82147EB8h case   12:*/		return 0x82147EBC;
		  /* 82147EBCh */ case   13:  		/* stw R4, <#[R1 + 80]> */
		/* 82147EBCh case   13:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 82147EBCh case   13:*/		return 0x82147EC0;
		  /* 82147EC0h */ case   14:  		/* lwz R11, <#[R30 + 124]> */
		/* 82147EC0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000007C) );
		/* 82147EC0h case   14:*/		return 0x82147EC4;
		  /* 82147EC4h */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 82147EC4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82147EC4h case   15:*/		return 0x82147EC8;
		  /* 82147EC8h */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 82147EC8h case   16:*/		if ( regs.CR[6].eq ) { return 0x82147EE0;  }
		/* 82147EC8h case   16:*/		return 0x82147ECC;
		  /* 82147ECCh */ case   17:  		/* lis R11, -32255 */
		/* 82147ECCh case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82147ECCh case   17:*/		return 0x82147ED0;
		  /* 82147ED0h */ case   18:  		/* li R6, 1 */
		/* 82147ED0h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82147ED0h case   18:*/		return 0x82147ED4;
		  /* 82147ED4h */ case   19:  		/* addi R5, R11, 11836 */
		/* 82147ED4h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2E3C);
		/* 82147ED4h case   19:*/		return 0x82147ED8;
		  /* 82147ED8h */ case   20:  		/* mr R3, R31 */
		/* 82147ED8h case   20:*/		regs.R3 = regs.R31;
		/* 82147ED8h case   20:*/		return 0x82147EDC;
		  /* 82147EDCh */ case   21:  		/* bl -8236 */
		/* 82147EDCh case   21:*/		regs.LR = 0x82147EE0; return 0x82145EB0;
		/* 82147EDCh case   21:*/		return 0x82147EE0;
	}
	return 0x82147EE0;
} // Block from 82147E88h-82147EE0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82147EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147EE0);
		  /* 82147EE0h */ case    0:  		/* mr R3, R31 */
		/* 82147EE0h case    0:*/		regs.R3 = regs.R31;
		/* 82147EE0h case    0:*/		return 0x82147EE4;
		  /* 82147EE4h */ case    1:  		/* bl -4756 */
		/* 82147EE4h case    1:*/		regs.LR = 0x82147EE8; return 0x82146C50;
		/* 82147EE4h case    1:*/		return 0x82147EE8;
		  /* 82147EE8h */ case    2:  		/* lwz R10, <#[R28 + 4]> */
		/* 82147EE8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 82147EE8h case    2:*/		return 0x82147EEC;
		  /* 82147EECh */ case    3:  		/* lwz R11, <#[R28]> */
		/* 82147EECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82147EECh case    3:*/		return 0x82147EF0;
		  /* 82147EF0h */ case    4:  		/* mulli R10, R10, 24 */
		/* 82147EF0h case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x18);
		/* 82147EF0h case    4:*/		return 0x82147EF4;
		  /* 82147EF4h */ case    5:  		/* add R10, R10, R11 */
		/* 82147EF4h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82147EF4h case    5:*/		return 0x82147EF8;
		  /* 82147EF8h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 82147EF8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82147EF8h case    6:*/		return 0x82147EFC;
		  /* 82147EFCh */ case    7:  		/* bc 4, CR6_LT, 828 */
		/* 82147EFCh case    7:*/		if ( !regs.CR[6].lt ) { return 0x82148238;  }
		/* 82147EFCh case    7:*/		return 0x82147F00;
		  /* 82147F00h */ case    8:  		/* addi R24, R11, 8 */
		/* 82147F00h case    8:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x8);
		/* 82147F00h case    8:*/		return 0x82147F04;
		  /* 82147F04h */ case    9:  		/* lis R26, -32253 */
		/* 82147F04h case    9:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8203);
		/* 82147F04h case    9:*/		return 0x82147F08;
		  /* 82147F08h */ case   10:  		/* lis R11, -32256 */
		/* 82147F08h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82147F08h case   10:*/		return 0x82147F0C;
		  /* 82147F0Ch */ case   11:  		/* addi R10, R26, 25724 */
		/* 82147F0Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0x647C);
		/* 82147F0Ch case   11:*/		return 0x82147F10;
		  /* 82147F10h */ case   12:  		/* lis R9, -32253 */
		/* 82147F10h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82147F10h case   12:*/		return 0x82147F14;
		  /* 82147F14h */ case   13:  		/* lis R25, -32255 */
		/* 82147F14h case   13:*/		cpu::op::lis<0>(regs,&regs.R25,0xFFFF8201);
		/* 82147F14h case   13:*/		return 0x82147F18;
		  /* 82147F18h */ case   14:  		/* stw R10, <#[R1 + 88]> */
		/* 82147F18h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 82147F18h case   14:*/		return 0x82147F1C;
		  /* 82147F1Ch */ case   15:  		/* lis R27, -32253 */
		/* 82147F1Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8203);
		/* 82147F1Ch case   15:*/		return 0x82147F20;
		  /* 82147F20h */ case   16:  		/* lfs FR31, <#[R11 + 2664]> */
		/* 82147F20h case   16:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000A68) );
		/* 82147F20h case   16:*/		return 0x82147F24;
		  /* 82147F24h */ case   17:  		/* lis R28, -32253 */
		/* 82147F24h case   17:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8203);
		/* 82147F24h case   17:*/		return 0x82147F28;
		  /* 82147F28h */ case   18:  		/* lis R29, -32253 */
		/* 82147F28h case   18:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8203);
		/* 82147F28h case   18:*/		return 0x82147F2C;
		  /* 82147F2Ch */ case   19:  		/* lis R30, -32253 */
		/* 82147F2Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8203);
		/* 82147F2Ch case   19:*/		return 0x82147F30;
		  /* 82147F30h */ case   20:  		/* lis R3, -32253 */
		/* 82147F30h case   20:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8203);
		/* 82147F30h case   20:*/		return 0x82147F34;
		  /* 82147F34h */ case   21:  		/* lis R4, -32253 */
		/* 82147F34h case   21:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8203);
		/* 82147F34h case   21:*/		return 0x82147F38;
		  /* 82147F38h */ case   22:  		/* lis R5, -32253 */
		/* 82147F38h case   22:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 82147F38h case   22:*/		return 0x82147F3C;
		  /* 82147F3Ch */ case   23:  		/* lis R6, -32217 */
		/* 82147F3Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8227);
		/* 82147F3Ch case   23:*/		return 0x82147F40;
		  /* 82147F40h */ case   24:  		/* lis R7, -32253 */
		/* 82147F40h case   24:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82147F40h case   24:*/		return 0x82147F44;
		  /* 82147F44h */ case   25:  		/* lis R8, -32253 */
		/* 82147F44h case   25:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82147F44h case   25:*/		return 0x82147F48;
		  /* 82147F48h */ case   26:  		/* lis R10, -32253 */
		/* 82147F48h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82147F48h case   26:*/		return 0x82147F4C;
		  /* 82147F4Ch */ case   27:  		/* lis R11, -32254 */
		/* 82147F4Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82147F4Ch case   27:*/		return 0x82147F50;
		  /* 82147F50h */ case   28:  		/* addi R9, R9, 25896 */
		/* 82147F50h case   28:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x6528);
		/* 82147F50h case   28:*/		return 0x82147F54;
		  /* 82147F54h */ case   29:  		/* addi R14, R25, -16564 */
		/* 82147F54h case   29:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R25,0xFFFFBF4C);
		/* 82147F54h case   29:*/		return 0x82147F58;
		  /* 82147F58h */ case   30:  		/* addi R25, R27, 25980 */
		/* 82147F58h case   30:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R27,0x657C);
		/* 82147F58h case   30:*/		return 0x82147F5C;
		  /* 82147F5Ch */ case   31:  		/* stw R9, <#[R1 + 84]> */
		/* 82147F5Ch case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 82147F5Ch case   31:*/		return 0x82147F60;
		  /* 82147F60h */ case   32:  		/* addi R23, R28, 26392 */
		/* 82147F60h case   32:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R28,0x6718);
		/* 82147F60h case   32:*/		return 0x82147F64;
		  /* 82147F64h */ case   33:  		/* addi R22, R29, 26376 */
		/* 82147F64h case   33:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R29,0x6708);
		/* 82147F64h case   33:*/		return 0x82147F68;
		  /* 82147F68h */ case   34:  		/* addi R21, R30, 11988 */
		/* 82147F68h case   34:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R30,0x2ED4);
		/* 82147F68h case   34:*/		return 0x82147F6C;
		  /* 82147F6Ch */ case   35:  		/* addi R20, R3, 26368 */
		/* 82147F6Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R3,0x6700);
		/* 82147F6Ch case   35:*/		return 0x82147F70;
		  /* 82147F70h */ case   36:  		/* addi R19, R4, 26360 */
		/* 82147F70h case   36:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R4,0x66F8);
		/* 82147F70h case   36:*/		return 0x82147F74;
		  /* 82147F74h */ case   37:  		/* addi R18, R5, 9532 */
		/* 82147F74h case   37:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R5,0x253C);
		/* 82147F74h case   37:*/		return 0x82147F78;
		  /* 82147F78h */ case   38:  		/* addi R17, R6, 17112 */
		/* 82147F78h case   38:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R6,0x42D8);
		/* 82147F78h case   38:*/		return 0x82147F7C;
		  /* 82147F7Ch */ case   39:  		/* addi R26, R7, 26348 */
		/* 82147F7Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R7,0x66EC);
		/* 82147F7Ch case   39:*/		return 0x82147F80;
	}
	return 0x82147F80;
} // Block from 82147EE0h-82147F80h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82147F80h
// Function '?WriteVfetchInfo@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAV?$FastVector@UVfetchInfo@XGRAPHICS@@@2@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82147F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82147F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82147F80);
		  /* 82147F80h */ case    0:  		/* addi R27, R8, 12200 */
		/* 82147F80h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R8,0x2FA8);
		/* 82147F80h case    0:*/		return 0x82147F84;
		  /* 82147F84h */ case    1:  		/* addi R28, R10, 25856 */
		/* 82147F84h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x6500);
		/* 82147F84h case    1:*/		return 0x82147F88;
		  /* 82147F88h */ case    2:  		/* addi R16, R11, -12944 */
		/* 82147F88h case    2:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R11,0xFFFFCD70);
		/* 82147F88h case    2:*/		return 0x82147F8C;
		  /* 82147F8Ch */ case    3:  		/* lwz R11, <#[R24 - 8]> */
		/* 82147F8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0xFFFFFFF8) );
		/* 82147F8Ch case    3:*/		return 0x82147F90;
		  /* 82147F90h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82147F90h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82147F90h case    4:*/		return 0x82147F94;
		  /* 82147F94h */ case    5:  		/* bc 12, CR6_EQ, 636 */
		/* 82147F94h case    5:*/		if ( regs.CR[6].eq ) { return 0x82148210;  }
		/* 82147F94h case    5:*/		return 0x82147F98;
		  /* 82147F98h */ case    6:  		/* mr R3, R31 */
		/* 82147F98h case    6:*/		regs.R3 = regs.R31;
		/* 82147F98h case    6:*/		return 0x82147F9C;
		  /* 82147F9Ch */ case    7:  		/* bl -8340 */
		/* 82147F9Ch case    7:*/		regs.LR = 0x82147FA0; return 0x82145F08;
		/* 82147F9Ch case    7:*/		return 0x82147FA0;
		  /* 82147FA0h */ case    8:  		/* mr R5, R16 */
		/* 82147FA0h case    8:*/		regs.R5 = regs.R16;
		/* 82147FA0h case    8:*/		return 0x82147FA4;
		  /* 82147FA4h */ case    9:  		/* mr R4, R15 */
		/* 82147FA4h case    9:*/		regs.R4 = regs.R15;
		/* 82147FA4h case    9:*/		return 0x82147FA8;
		  /* 82147FA8h */ case   10:  		/* mr R3, R31 */
		/* 82147FA8h case   10:*/		regs.R3 = regs.R31;
		/* 82147FA8h case   10:*/		return 0x82147FAC;
		  /* 82147FACh */ case   11:  		/* bl -8444 */
		/* 82147FACh case   11:*/		regs.LR = 0x82147FB0; return 0x82145EB0;
		/* 82147FACh case   11:*/		return 0x82147FB0;
		  /* 82147FB0h */ case   12:  		/* lwz R29, <#[R1 + 80]> */
		/* 82147FB0h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82147FB0h case   12:*/		return 0x82147FB4;
		  /* 82147FB4h */ case   13:  		/* mr R5, R28 */
		/* 82147FB4h case   13:*/		regs.R5 = regs.R28;
		/* 82147FB4h case   13:*/		return 0x82147FB8;
		  /* 82147FB8h */ case   14:  		/* lwz R6, <#[R24 - 8]> */
		/* 82147FB8h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R24 + 0xFFFFFFF8) );
		/* 82147FB8h case   14:*/		return 0x82147FBC;
		  /* 82147FBCh */ case   15:  		/* mr R4, R29 */
		/* 82147FBCh case   15:*/		regs.R4 = regs.R29;
		/* 82147FBCh case   15:*/		return 0x82147FC0;
		  /* 82147FC0h */ case   16:  		/* mr R3, R31 */
		/* 82147FC0h case   16:*/		regs.R3 = regs.R31;
		/* 82147FC0h case   16:*/		return 0x82147FC4;
		  /* 82147FC4h */ case   17:  		/* bl -8468 */
		/* 82147FC4h case   17:*/		regs.LR = 0x82147FC8; return 0x82145EB0;
		/* 82147FC4h case   17:*/		return 0x82147FC8;
		  /* 82147FC8h */ case   18:  		/* lwz R11, <#[R24]> */
		/* 82147FC8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82147FC8h case   18:*/		return 0x82147FCC;
		  /* 82147FCCh */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 82147FCCh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82147FCCh case   19:*/		return 0x82147FD0;
		  /* 82147FD0h */ case   20:  		/* bc 12, CR6_EQ, 72 */
		/* 82147FD0h case   20:*/		if ( regs.CR[6].eq ) { return 0x82148018;  }
		/* 82147FD0h case   20:*/		return 0x82147FD4;
		  /* 82147FD4h */ case   21:  		/* rlwinm R10, R11, 31, 1, 31 */
		/* 82147FD4h case   21:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R10,regs.R11);
		/* 82147FD4h case   21:*/		return 0x82147FD8;
		  /* 82147FD8h */ case   22:  		/* lwz R5, <#[R1 + 84]> */
		/* 82147FD8h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 82147FD8h case   22:*/		return 0x82147FDC;
		  /* 82147FDCh */ case   23:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 82147FDCh case   23:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82147FDCh case   23:*/		return 0x82147FE0;
		  /* 82147FE0h */ case   24:  		/* lwz R4, <#[R1 + 88]> */
		/* 82147FE0h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 82147FE0h case   24:*/		return 0x82147FE4;
		  /* 82147FE4h */ case   25:  		/* std R10, <#[R1 + 96]> */
		/* 82147FE4h case   25:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 82147FE4h case   25:*/		return 0x82147FE8;
		  /* 82147FE8h */ case   26:  		/* lfd FR0, <#[R1 + 96]> */
		/* 82147FE8h case   26:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 82147FE8h case   26:*/		return 0x82147FEC;
		  /* 82147FECh */ case   27:  		/* std R11, <#[R1 + 104]> */
		/* 82147FECh case   27:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82147FECh case   27:*/		return 0x82147FF0;
		  /* 82147FF0h */ case   28:  		/* lfd FR13, <#[R1 + 104]> */
		/* 82147FF0h case   28:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000068) );
		/* 82147FF0h case   28:*/		return 0x82147FF4;
		  /* 82147FF4h */ case   29:  		/* fcfid FR0, FR0 */
		/* 82147FF4h case   29:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 82147FF4h case   29:*/		return 0x82147FF8;
		  /* 82147FF8h */ case   30:  		/* mr R3, R31 */
		/* 82147FF8h case   30:*/		regs.R3 = regs.R31;
		/* 82147FF8h case   30:*/		return 0x82147FFC;
		  /* 82147FFCh */ case   31:  		/* fcfid FR13, FR13 */
		/* 82147FFCh case   31:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 82147FFCh case   31:*/		return 0x82148000;
		  /* 82148000h */ case   32:  		/* frsp FR0, FR0 */
		/* 82148000h case   32:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 82148000h case   32:*/		return 0x82148004;
		  /* 82148004h */ case   33:  		/* frsp FR13, FR13 */
		/* 82148004h case   33:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 82148004h case   33:*/		return 0x82148008;
		  /* 82148008h */ case   34:  		/* fmadds FR1, FR13, FR31, FR0 */
		/* 82148008h case   34:*/		cpu::op::fmadds<0>(regs,&regs.FR1,regs.FR13,regs.FR31,regs.FR0);
		/* 82148008h case   34:*/		return 0x8214800C;
		  /* 8214800Ch */ case   35:  		/* stfd FR1, <#[R1 + 40]> */
		/* 8214800Ch case   35:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000028) );
		/* 8214800Ch case   35:*/		return 0x82148010;
		  /* 82148010h */ case   36:  		/* ld R6, <#[R1 + 40]> */
		/* 82148010h case   36:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82148010h case   36:*/		return 0x82148014;
		  /* 82148014h */ case   37:  		/* bl -8548 */
		/* 82148014h case   37:*/		regs.LR = 0x82148018; return 0x82145EB0;
		/* 82148014h case   37:*/		return 0x82148018;
	}
	return 0x82148018;
} // Block from 82147F80h-82148018h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82148018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148018);
		  /* 82148018h */ case    0:  		/* mr R3, R31 */
		/* 82148018h case    0:*/		regs.R3 = regs.R31;
		/* 82148018h case    0:*/		return 0x8214801C;
		  /* 8214801Ch */ case    1:  		/* bl -5068 */
		/* 8214801Ch case    1:*/		regs.LR = 0x82148020; return 0x82146C50;
		/* 8214801Ch case    1:*/		return 0x82148020;
		  /* 82148020h */ case    2:  		/* mr R3, R31 */
		/* 82148020h case    2:*/		regs.R3 = regs.R31;
		/* 82148020h case    2:*/		return 0x82148024;
		  /* 82148024h */ case    3:  		/* bl -8476 */
		/* 82148024h case    3:*/		regs.LR = 0x82148028; return 0x82145F08;
		/* 82148024h case    3:*/		return 0x82148028;
		  /* 82148028h */ case    4:  		/* mr R5, R27 */
		/* 82148028h case    4:*/		regs.R5 = regs.R27;
		/* 82148028h case    4:*/		return 0x8214802C;
		  /* 8214802Ch */ case    5:  		/* mr R4, R15 */
		/* 8214802Ch case    5:*/		regs.R4 = regs.R15;
		/* 8214802Ch case    5:*/		return 0x82148030;
		  /* 82148030h */ case    6:  		/* mr R3, R31 */
		/* 82148030h case    6:*/		regs.R3 = regs.R31;
		/* 82148030h case    6:*/		return 0x82148034;
		  /* 82148034h */ case    7:  		/* bl -8580 */
		/* 82148034h case    7:*/		regs.LR = 0x82148038; return 0x82145EB0;
		/* 82148034h case    7:*/		return 0x82148038;
		  /* 82148038h */ case    8:  		/* mr R4, R14 */
		/* 82148038h case    8:*/		regs.R4 = regs.R14;
		/* 82148038h case    8:*/		return 0x8214803C;
		  /* 8214803Ch */ case    9:  		/* mr R3, R31 */
		/* 8214803Ch case    9:*/		regs.R3 = regs.R31;
		/* 8214803Ch case    9:*/		return 0x82148040;
		  /* 82148040h */ case   10:  		/* bl -8592 */
		/* 82148040h case   10:*/		regs.LR = 0x82148044; return 0x82145EB0;
		/* 82148040h case   10:*/		return 0x82148044;
		  /* 82148044h */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 82148044h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82148044h case   11:*/		return 0x82148048;
		  /* 82148048h */ case   12:  		/* addi R11, R11, 1 */
		/* 82148048h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82148048h case   12:*/		return 0x8214804C;
		  /* 8214804Ch */ case   13:  		/* stw R11, <#[R31 + 4]> */
		/* 8214804Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214804Ch case   13:*/		return 0x82148050;
		  /* 82148050h */ case   14:  		/* lwz R4, <#[R24 - 4]> */
		/* 82148050h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0xFFFFFFFC) );
		/* 82148050h case   14:*/		return 0x82148054;
		  /* 82148054h */ case   15:  		/* mr R11, R4 */
		/* 82148054h case   15:*/		regs.R11 = regs.R4;
		/* 82148054h case   15:*/		return 0x82148058;
		  /* 82148058h */ case   16:  		/* lbz R10, <#[R11]> */
		/* 82148058h case   16:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82148058h case   16:*/		return 0x8214805C;
		  /* 8214805Ch */ case   17:  		/* addi R11, R11, 1 */
		/* 8214805Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214805Ch case   17:*/		return 0x82148060;
		  /* 82148060h */ case   18:  		/* cmplwi CR6, R10, 0 */
		/* 82148060h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82148060h case   18:*/		return 0x82148064;
		  /* 82148064h */ case   19:  		/* bc 4, CR6_EQ, -12 */
		/* 82148064h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82148058;  }
		/* 82148064h case   19:*/		return 0x82148068;
		  /* 82148068h */ case   20:  		/* subf R11, R4, R11 */
		/* 82148068h case   20:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 82148068h case   20:*/		return 0x8214806C;
		  /* 8214806Ch */ case   21:  		/* lwz R10, <#[R31]> */
		/* 8214806Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8214806Ch case   21:*/		return 0x82148070;
		  /* 82148070h */ case   22:  		/* mr R3, R31 */
		/* 82148070h case   22:*/		regs.R3 = regs.R31;
		/* 82148070h case   22:*/		return 0x82148074;
		  /* 82148074h */ case   23:  		/* addi R11, R11, -1 */
		/* 82148074h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82148074h case   23:*/		return 0x82148078;
		  /* 82148078h */ case   24:  		/* rlwinm R5, R11, 0, 0, 31 */
		/* 82148078h case   24:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R11);
		/* 82148078h case   24:*/		return 0x8214807C;
		  /* 8214807Ch */ case   25:  		/* lwz R11, <#[R10 + 12]> */
		/* 8214807Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8214807Ch case   25:*/		return 0x82148080;
		  /* 82148080h */ case   26:  		/* mtspr CTR, R11 */
		/* 82148080h case   26:*/		regs.CTR = regs.R11;
		/* 82148080h case   26:*/		return 0x82148084;
		  /* 82148084h */ case   27:  		/* bcctrl 20, CR0_LT */
		/* 82148084h case   27:*/		if ( 1 ) { regs.LR = 0x82148088; return (uint32)regs.CTR; }
		/* 82148084h case   27:*/		return 0x82148088;
		  /* 82148088h */ case   28:  		/* mr R4, R27 */
		/* 82148088h case   28:*/		regs.R4 = regs.R27;
		/* 82148088h case   28:*/		return 0x8214808C;
		  /* 8214808Ch */ case   29:  		/* mr R3, R31 */
		/* 8214808Ch case   29:*/		regs.R3 = regs.R31;
		/* 8214808Ch case   29:*/		return 0x82148090;
		  /* 82148090h */ case   30:  		/* bl -8376 */
		/* 82148090h case   30:*/		regs.LR = 0x82148094; return 0x82145FD8;
		/* 82148090h case   30:*/		return 0x82148094;
		  /* 82148094h */ case   31:  		/* lwz R10, <#[R24 + 8]> */
		/* 82148094h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000008) );
		/* 82148094h case   31:*/		return 0x82148098;
		  /* 82148098h */ case   32:  		/* lwz R11, <#[R24 + 4]> */
		/* 82148098h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 82148098h case   32:*/		return 0x8214809C;
		  /* 8214809Ch */ case   33:  		/* mulli R10, R10, 28 */
		/* 8214809Ch case   33:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x1C);
		/* 8214809Ch case   33:*/		return 0x821480A0;
		  /* 821480A0h */ case   34:  		/* add R10, R10, R11 */
		/* 821480A0h case   34:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821480A0h case   34:*/		return 0x821480A4;
		  /* 821480A4h */ case   35:  		/* cmplw CR6, R11, R10 */
		/* 821480A4h case   35:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821480A4h case   35:*/		return 0x821480A8;
		  /* 821480A8h */ case   36:  		/* bc 4, CR6_LT, 348 */
		/* 821480A8h case   36:*/		if ( !regs.CR[6].lt ) { return 0x82148204;  }
		/* 821480A8h case   36:*/		return 0x821480AC;
		  /* 821480ACh */ case   37:  		/* addi R30, R11, 4 */
		/* 821480ACh case   37:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4);
		/* 821480ACh case   37:*/		return 0x821480B0;
		  /* 821480B0h */ case   38:  		/* lwz R11, <#[R30 + 4]> */
		/* 821480B0h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821480B0h case   38:*/		return 0x821480B4;
		  /* 821480B4h */ case   39:  		/* cmplwi CR6, R11, 0 */
		/* 821480B4h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821480B4h case   39:*/		return 0x821480B8;
		  /* 821480B8h */ case   40:  		/* bc 12, CR6_EQ, 300 */
		/* 821480B8h case   40:*/		if ( regs.CR[6].eq ) { return 0x821481E4;  }
		/* 821480B8h case   40:*/		return 0x821480BC;
		  /* 821480BCh */ case   41:  		/* lwz R11, <#[R30 + 8]> */
		/* 821480BCh case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821480BCh case   41:*/		return 0x821480C0;
		  /* 821480C0h */ case   42:  		/* cmplwi CR6, R11, 0 */
		/* 821480C0h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821480C0h case   42:*/		return 0x821480C4;
		  /* 821480C4h */ case   43:  		/* bc 12, CR6_EQ, 288 */
		/* 821480C4h case   43:*/		if ( regs.CR[6].eq ) { return 0x821481E4;  }
		/* 821480C4h case   43:*/		return 0x821480C8;
		  /* 821480C8h */ case   44:  		/* lwz R11, <#[R30]> */
		/* 821480C8h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821480C8h case   44:*/		return 0x821480CC;
		  /* 821480CCh */ case   45:  		/* cmplwi CR6, R11, 56 */
		/* 821480CCh case   45:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000038);
		/* 821480CCh case   45:*/		return 0x821480D0;
		  /* 821480D0h */ case   46:  		/* bc 4, CR6_LT, 276 */
		/* 821480D0h case   46:*/		if ( !regs.CR[6].lt ) { return 0x821481E4;  }
		/* 821480D0h case   46:*/		return 0x821480D4;
		  /* 821480D4h */ case   47:  		/* mr R3, R31 */
		/* 821480D4h case   47:*/		regs.R3 = regs.R31;
		/* 821480D4h case   47:*/		return 0x821480D8;
		  /* 821480D8h */ case   48:  		/* bl -8656 */
		/* 821480D8h case   48:*/		regs.LR = 0x821480DC; return 0x82145F08;
		/* 821480D8h case   48:*/		return 0x821480DC;
		  /* 821480DCh */ case   49:  		/* mr R5, R26 */
		/* 821480DCh case   49:*/		regs.R5 = regs.R26;
		/* 821480DCh case   49:*/		return 0x821480E0;
		  /* 821480E0h */ case   50:  		/* mr R4, R15 */
		/* 821480E0h case   50:*/		regs.R4 = regs.R15;
		/* 821480E0h case   50:*/		return 0x821480E4;
		  /* 821480E4h */ case   51:  		/* mr R3, R31 */
		/* 821480E4h case   51:*/		regs.R3 = regs.R31;
		/* 821480E4h case   51:*/		return 0x821480E8;
		  /* 821480E8h */ case   52:  		/* bl -8760 */
		/* 821480E8h case   52:*/		regs.LR = 0x821480EC; return 0x82145EB0;
		/* 821480E8h case   52:*/		return 0x821480EC;
		  /* 821480ECh */ case   53:  		/* mr R5, R28 */
		/* 821480ECh case   53:*/		regs.R5 = regs.R28;
		/* 821480ECh case   53:*/		return 0x821480F0;
		  /* 821480F0h */ case   54:  		/* mr R4, R29 */
		/* 821480F0h case   54:*/		regs.R4 = regs.R29;
		/* 821480F0h case   54:*/		return 0x821480F4;
		  /* 821480F4h */ case   55:  		/* lwz R6, <#[R30 - 4]> */
		/* 821480F4h case   55:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 821480F4h case   55:*/		return 0x821480F8;
		  /* 821480F8h */ case   56:  		/* mr R3, R31 */
		/* 821480F8h case   56:*/		regs.R3 = regs.R31;
		/* 821480F8h case   56:*/		return 0x821480FC;
		  /* 821480FCh */ case   57:  		/* bl -8780 */
		/* 821480FCh case   57:*/		regs.LR = 0x82148100; return 0x82145EB0;
		/* 821480FCh case   57:*/		return 0x82148100;
		  /* 82148100h */ case   58:  		/* lwz R11, <#[R30]> */
		/* 82148100h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82148100h case   58:*/		return 0x82148104;
		  /* 82148104h */ case   59:  		/* mr R4, R18 */
		/* 82148104h case   59:*/		regs.R4 = regs.R18;
		/* 82148104h case   59:*/		return 0x82148108;
		  /* 82148108h */ case   60:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82148108h case   60:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82148108h case   60:*/		return 0x8214810C;
		  /* 8214810Ch */ case   61:  		/* mr R3, R31 */
		/* 8214810Ch case   61:*/		regs.R3 = regs.R31;
		/* 8214810Ch case   61:*/		return 0x82148110;
		  /* 82148110h */ case   62:  		/* lwzx R5, <#[R11 + R17]> */
		/* 82148110h case   62:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R17 + 0x00000000) );
		/* 82148110h case   62:*/		return 0x82148114;
		  /* 82148114h */ case   63:  		/* bl -8268 */
		/* 82148114h case   63:*/		regs.LR = 0x82148118; return 0x821460C8;
		/* 82148114h case   63:*/		return 0x82148118;
		  /* 82148118h */ case   64:  		/* mr R5, R19 */
		/* 82148118h case   64:*/		regs.R5 = regs.R19;
		/* 82148118h case   64:*/		return 0x8214811C;
		  /* 8214811Ch */ case   65:  		/* lwz R6, <#[R30 + 4]> */
		/* 8214811Ch case   65:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 8214811Ch case   65:*/		return 0x82148120;
		  /* 82148120h */ case   66:  		/* mr R4, R29 */
		/* 82148120h case   66:*/		regs.R4 = regs.R29;
		/* 82148120h case   66:*/		return 0x82148124;
		  /* 82148124h */ case   67:  		/* mr R3, R31 */
		/* 82148124h case   67:*/		regs.R3 = regs.R31;
		/* 82148124h case   67:*/		return 0x82148128;
		  /* 82148128h */ case   68:  		/* bl -8824 */
		/* 82148128h case   68:*/		regs.LR = 0x8214812C; return 0x82145EB0;
		/* 82148128h case   68:*/		return 0x8214812C;
		  /* 8214812Ch */ case   69:  		/* mr R5, R20 */
		/* 8214812Ch case   69:*/		regs.R5 = regs.R20;
		/* 8214812Ch case   69:*/		return 0x82148130;
		  /* 82148130h */ case   70:  		/* mr R4, R29 */
		/* 82148130h case   70:*/		regs.R4 = regs.R29;
		/* 82148130h case   70:*/		return 0x82148134;
		  /* 82148134h */ case   71:  		/* lwz R6, <#[R30 + 8]> */
		/* 82148134h case   71:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000008) );
		/* 82148134h case   71:*/		return 0x82148138;
		  /* 82148138h */ case   72:  		/* mr R3, R31 */
		/* 82148138h case   72:*/		regs.R3 = regs.R31;
		/* 82148138h case   72:*/		return 0x8214813C;
		  /* 8214813Ch */ case   73:  		/* bl -8844 */
		/* 8214813Ch case   73:*/		regs.LR = 0x82148140; return 0x82145EB0;
		/* 8214813Ch case   73:*/		return 0x82148140;
		  /* 82148140h */ case   74:  		/* lwz R11, <#[R30 + 16]> */
		/* 82148140h case   74:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82148140h case   74:*/		return 0x82148144;
		  /* 82148144h */ case   75:  		/* mr R3, R31 */
		/* 82148144h case   75:*/		regs.R3 = regs.R31;
		/* 82148144h case   75:*/		return 0x82148148;
		  /* 82148148h */ case   76:  		/* cmplwi CR6, R11, 0 */
		/* 82148148h case   76:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82148148h case   76:*/		return 0x8214814C;
		  /* 8214814Ch */ case   77:  		/* bc 4, CR6_EQ, 12 */
		/* 8214814Ch case   77:*/		if ( !regs.CR[6].eq ) { return 0x82148158;  }
		/* 8214814Ch case   77:*/		return 0x82148150;
	}
	return 0x82148150;
} // Block from 82148018h-82148150h (78 instructions)

//////////////////////////////////////////////////////
// Block at 82148150h
// Function '?WriteInterpolatorInfo@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAV?$FastVector@UInterpolatorInfo@XGRAPHICS@@@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148150);
		  /* 82148150h */ case    0:  		/* bl -5456 */
		/* 82148150h case    0:*/		regs.LR = 0x82148154; return 0x82146C00;
		/* 82148150h case    0:*/		return 0x82148154;
		  /* 82148154h */ case    1:  		/* b 144 */
		/* 82148154h case    1:*/		return 0x821481E4;
		/* 82148154h case    1:*/		return 0x82148158;
	}
	return 0x82148158;
} // Block from 82148150h-82148158h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82148158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148158);
		  /* 82148158h */ case    0:  		/* bl -5384 */
		/* 82148158h case    0:*/		regs.LR = 0x8214815C; return 0x82146C50;
		/* 82148158h case    0:*/		return 0x8214815C;
		  /* 8214815Ch */ case    1:  		/* lwz R11, <#[R30 + 16]> */
		/* 8214815Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8214815Ch case    1:*/		return 0x82148160;
		  /* 82148160h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82148160h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82148160h case    2:*/		return 0x82148164;
		  /* 82148164h */ case    3:  		/* lwz R29, <#[R30 + 12]> */
		/* 82148164h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x0000000C) );
		/* 82148164h case    3:*/		return 0x82148168;
		  /* 82148168h */ case    4:  		/* add R11, R11, R29 */
		/* 82148168h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82148168h case    4:*/		return 0x8214816C;
		  /* 8214816Ch */ case    5:  		/* b 96 */
		/* 8214816Ch case    5:*/		return 0x821481CC;
		/* 8214816Ch case    5:*/		return 0x82148170;
		  /* 82148170h */ case    6:  		/* bl -8808 */
		/* 82148170h case    6:*/		regs.LR = 0x82148174; return 0x82145F08;
		/* 82148170h case    6:*/		return 0x82148174;
		  /* 82148174h */ case    7:  		/* mr R5, R21 */
		/* 82148174h case    7:*/		regs.R5 = regs.R21;
		/* 82148174h case    7:*/		return 0x82148178;
		  /* 82148178h */ case    8:  		/* mr R4, R15 */
		/* 82148178h case    8:*/		regs.R4 = regs.R15;
		/* 82148178h case    8:*/		return 0x8214817C;
		  /* 8214817Ch */ case    9:  		/* mr R3, R31 */
		/* 8214817Ch case    9:*/		regs.R3 = regs.R31;
		/* 8214817Ch case    9:*/		return 0x82148180;
		  /* 82148180h */ case   10:  		/* bl -8912 */
		/* 82148180h case   10:*/		regs.LR = 0x82148184; return 0x82145EB0;
		/* 82148180h case   10:*/		return 0x82148184;
		  /* 82148184h */ case   11:  		/* lwz R11, <#[R29]> */
		/* 82148184h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82148184h case   11:*/		return 0x82148188;
		  /* 82148188h */ case   12:  		/* mr R4, R23 */
		/* 82148188h case   12:*/		regs.R4 = regs.R23;
		/* 82148188h case   12:*/		return 0x8214818C;
		  /* 8214818Ch */ case   13:  		/* rlwinm R10, R11, 2, 28, 29 */
		/* 8214818Ch case   13:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R10,regs.R11);
		/* 8214818Ch case   13:*/		return 0x82148190;
		  /* 82148190h */ case   14:  		/* addi R3, R1, 112 */
		/* 82148190h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 82148190h case   14:*/		return 0x82148194;
		  /* 82148194h */ case   15:  		/* rlwinm R5, R11, 30, 2, 31 */
		/* 82148194h case   15:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R5,regs.R11);
		/* 82148194h case   15:*/		return 0x82148198;
		  /* 82148198h */ case   16:  		/* lwzx R6, <#[R10 + R22]> */
		/* 82148198h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R22 + 0x00000000) );
		/* 82148198h case   16:*/		return 0x8214819C;
		  /* 8214819Ch */ case   17:  		/* bl 1182500 */
		/* 8214819Ch case   17:*/		regs.LR = 0x821481A0; return 0x82268CC0;
		/* 8214819Ch case   17:*/		return 0x821481A0;
		  /* 821481A0h */ case   18:  		/* mr R4, R25 */
		/* 821481A0h case   18:*/		regs.R4 = regs.R25;
		/* 821481A0h case   18:*/		return 0x821481A4;
		  /* 821481A4h */ case   19:  		/* addi R5, R1, 112 */
		/* 821481A4h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 821481A4h case   19:*/		return 0x821481A8;
		  /* 821481A8h */ case   20:  		/* mr R3, R31 */
		/* 821481A8h case   20:*/		regs.R3 = regs.R31;
		/* 821481A8h case   20:*/		return 0x821481AC;
		  /* 821481ACh */ case   21:  		/* bl -8420 */
		/* 821481ACh case   21:*/		regs.LR = 0x821481B0; return 0x821460C8;
		/* 821481ACh case   21:*/		return 0x821481B0;
		  /* 821481B0h */ case   22:  		/* mr R3, R31 */
		/* 821481B0h case   22:*/		regs.R3 = regs.R31;
		/* 821481B0h case   22:*/		return 0x821481B4;
		  /* 821481B4h */ case   23:  		/* bl -5556 */
		/* 821481B4h case   23:*/		regs.LR = 0x821481B8; return 0x82146C00;
		/* 821481B4h case   23:*/		return 0x821481B8;
		  /* 821481B8h */ case   24:  		/* lwz R11, <#[R30 + 16]> */
		/* 821481B8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821481B8h case   24:*/		return 0x821481BC;
		  /* 821481BCh */ case   25:  		/* lwz R10, <#[R30 + 12]> */
		/* 821481BCh case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821481BCh case   25:*/		return 0x821481C0;
		  /* 821481C0h */ case   26:  		/* addi R29, R29, 4 */
		/* 821481C0h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821481C0h case   26:*/		return 0x821481C4;
		  /* 821481C4h */ case   27:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821481C4h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821481C4h case   27:*/		return 0x821481C8;
		  /* 821481C8h */ case   28:  		/* add R11, R11, R10 */
		/* 821481C8h case   28:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821481C8h case   28:*/		return 0x821481CC;
	}
	return 0x821481CC;
} // Block from 82148158h-821481CCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 821481CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821481CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821481CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821481CC);
		  /* 821481CCh */ case    0:  		/* cmplw CR6, R29, R11 */
		/* 821481CCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821481CCh case    0:*/		return 0x821481D0;
		  /* 821481D0h */ case    1:  		/* mr R3, R31 */
		/* 821481D0h case    1:*/		regs.R3 = regs.R31;
		/* 821481D0h case    1:*/		return 0x821481D4;
		  /* 821481D4h */ case    2:  		/* bc 12, CR6_LT, -100 */
		/* 821481D4h case    2:*/		if ( regs.CR[6].lt ) { return 0x82148170;  }
		/* 821481D4h case    2:*/		return 0x821481D8;
		  /* 821481D8h */ case    3:  		/* mr R4, R26 */
		/* 821481D8h case    3:*/		regs.R4 = regs.R26;
		/* 821481D8h case    3:*/		return 0x821481DC;
		  /* 821481DCh */ case    4:  		/* bl -8820 */
		/* 821481DCh case    4:*/		regs.LR = 0x821481E0; return 0x82145F68;
		/* 821481DCh case    4:*/		return 0x821481E0;
		  /* 821481E0h */ case    5:  		/* lwz R29, <#[R1 + 80]> */
		/* 821481E0h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821481E0h case    5:*/		return 0x821481E4;
	}
	return 0x821481E4;
} // Block from 821481CCh-821481E4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821481E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821481E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821481E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821481E4);
		  /* 821481E4h */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 821481E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821481E4h case    0:*/		return 0x821481E8;
		  /* 821481E8h */ case    1:  		/* addi R30, R30, 28 */
		/* 821481E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1C);
		/* 821481E8h case    1:*/		return 0x821481EC;
		  /* 821481ECh */ case    2:  		/* lwz R10, <#[R24 + 4]> */
		/* 821481ECh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000004) );
		/* 821481ECh case    2:*/		return 0x821481F0;
		  /* 821481F0h */ case    3:  		/* mulli R11, R11, 28 */
		/* 821481F0h case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1C);
		/* 821481F0h case    3:*/		return 0x821481F4;
		  /* 821481F4h */ case    4:  		/* add R11, R11, R10 */
		/* 821481F4h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821481F4h case    4:*/		return 0x821481F8;
		  /* 821481F8h */ case    5:  		/* addi R10, R30, -4 */
		/* 821481F8h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFFC);
		/* 821481F8h case    5:*/		return 0x821481FC;
		  /* 821481FCh */ case    6:  		/* cmplw CR6, R10, R11 */
		/* 821481FCh case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821481FCh case    6:*/		return 0x82148200;
		  /* 82148200h */ case    7:  		/* bc 12, CR6_LT, -336 */
		/* 82148200h case    7:*/		if ( regs.CR[6].lt ) { return 0x821480B0;  }
		/* 82148200h case    7:*/		return 0x82148204;
	}
	return 0x82148204;
} // Block from 821481E4h-82148204h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82148204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148204);
		  /* 82148204h */ case    0:  		/* mr R4, R16 */
		/* 82148204h case    0:*/		regs.R4 = regs.R16;
		/* 82148204h case    0:*/		return 0x82148208;
		  /* 82148208h */ case    1:  		/* mr R3, R31 */
		/* 82148208h case    1:*/		regs.R3 = regs.R31;
		/* 82148208h case    1:*/		return 0x8214820C;
		  /* 8214820Ch */ case    2:  		/* bl -8868 */
		/* 8214820Ch case    2:*/		regs.LR = 0x82148210; return 0x82145F68;
		/* 8214820Ch case    2:*/		return 0x82148210;
	}
	return 0x82148210;
} // Block from 82148204h-82148210h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82148210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148210);
		  /* 82148210h */ case    0:  		/* lwz R11, <#[R1 + 324]> */
		/* 82148210h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000144) );
		/* 82148210h case    0:*/		return 0x82148214;
		  /* 82148214h */ case    1:  		/* addi R24, R24, 24 */
		/* 82148214h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x18);
		/* 82148214h case    1:*/		return 0x82148218;
		  /* 82148218h */ case    2:  		/* addi R9, R24, -8 */
		/* 82148218h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R24,0xFFFFFFF8);
		/* 82148218h case    2:*/		return 0x8214821C;
		  /* 8214821Ch */ case    3:  		/* lwz R8, <#[R11 + 4]> */
		/* 8214821Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8214821Ch case    3:*/		return 0x82148220;
		  /* 82148220h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 82148220h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82148220h case    4:*/		return 0x82148224;
		  /* 82148224h */ case    5:  		/* mulli R11, R8, 24 */
		/* 82148224h case    5:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R8,0x18);
		/* 82148224h case    5:*/		return 0x82148228;
		  /* 82148228h */ case    6:  		/* add R11, R11, R10 */
		/* 82148228h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82148228h case    6:*/		return 0x8214822C;
		  /* 8214822Ch */ case    7:  		/* cmplw CR6, R9, R11 */
		/* 8214822Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8214822Ch case    7:*/		return 0x82148230;
		  /* 82148230h */ case    8:  		/* bc 12, CR6_LT, -676 */
		/* 82148230h case    8:*/		if ( regs.CR[6].lt ) { return 0x82147F8C;  }
		/* 82148230h case    8:*/		return 0x82148234;
		  /* 82148234h */ case    9:  		/* lwz R29, <#[R1 + 92]> */
		/* 82148234h case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x0000005C) );
		/* 82148234h case    9:*/		return 0x82148238;
	}
	return 0x82148238;
} // Block from 82148210h-82148238h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82148238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148238);
		  /* 82148238h */ case    0:  		/* mr R4, R29 */
		/* 82148238h case    0:*/		regs.R4 = regs.R29;
		/* 82148238h case    0:*/		return 0x8214823C;
		  /* 8214823Ch */ case    1:  		/* mr R3, R31 */
		/* 8214823Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214823Ch case    1:*/		return 0x82148240;
		  /* 82148240h */ case    2:  		/* bl -8920 */
		/* 82148240h case    2:*/		regs.LR = 0x82148244; return 0x82145F68;
		/* 82148240h case    2:*/		return 0x82148244;
	}
	return 0x82148244;
} // Block from 82148238h-82148244h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82148244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148244);
		  /* 82148244h */ case    0:  		/* addi R1, R1, 288 */
		/* 82148244h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 82148244h case    0:*/		return 0x82148248;
		  /* 82148248h */ case    1:  		/* lfd FR31, <#[R1 - 160]> */
		/* 82148248h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82148248h case    1:*/		return 0x8214824C;
		  /* 8214824Ch */ case    2:  		/* b -749532 */
		/* 8214824Ch case    2:*/		return 0x82091270;
		/* 8214824Ch case    2:*/		return 0x82148250;
	}
	return 0x82148250;
} // Block from 82148244h-82148250h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82148250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148250);
		  /* 82148250h */ case    0:  		/* mfspr R12, LR */
		/* 82148250h case    0:*/		regs.R12 = regs.LR;
		/* 82148250h case    0:*/		return 0x82148254;
		  /* 82148254h */ case    1:  		/* bl -749572 */
		/* 82148254h case    1:*/		regs.LR = 0x82148258; return 0x82091250;
		/* 82148254h case    1:*/		return 0x82148258;
		  /* 82148258h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82148258h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82148258h case    2:*/		return 0x8214825C;
		  /* 8214825Ch */ case    3:  		/* mr R26, R3 */
		/* 8214825Ch case    3:*/		regs.R26 = regs.R3;
		/* 8214825Ch case    3:*/		return 0x82148260;
		  /* 82148260h */ case    4:  		/* mr R3, R4 */
		/* 82148260h case    4:*/		regs.R3 = regs.R4;
		/* 82148260h case    4:*/		return 0x82148264;
		  /* 82148264h */ case    5:  		/* mr R31, R4 */
		/* 82148264h case    5:*/		regs.R31 = regs.R4;
		/* 82148264h case    5:*/		return 0x82148268;
		  /* 82148268h */ case    6:  		/* mr R28, R5 */
		/* 82148268h case    6:*/		regs.R28 = regs.R5;
		/* 82148268h case    6:*/		return 0x8214826C;
		  /* 8214826Ch */ case    7:  		/* mr R30, R6 */
		/* 8214826Ch case    7:*/		regs.R30 = regs.R6;
		/* 8214826Ch case    7:*/		return 0x82148270;
		  /* 82148270h */ case    8:  		/* mr R29, R7 */
		/* 82148270h case    8:*/		regs.R29 = regs.R7;
		/* 82148270h case    8:*/		return 0x82148274;
		  /* 82148274h */ case    9:  		/* bl -9068 */
		/* 82148274h case    9:*/		regs.LR = 0x82148278; return 0x82145F08;
		/* 82148274h case    9:*/		return 0x82148278;
		  /* 82148278h */ case   10:  		/* lis R11, -32253 */
		/* 82148278h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82148278h case   10:*/		return 0x8214827C;
		  /* 8214827Ch */ case   11:  		/* lis R10, -32253 */
		/* 8214827Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214827Ch case   11:*/		return 0x82148280;
		  /* 82148280h */ case   12:  		/* addi R27, R11, 9532 */
		/* 82148280h case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x253C);
		/* 82148280h case   12:*/		return 0x82148284;
		  /* 82148284h */ case   13:  		/* addi R4, R10, 25840 */
		/* 82148284h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x64F0);
		/* 82148284h case   13:*/		return 0x82148288;
		  /* 82148288h */ case   14:  		/* mr R5, R27 */
		/* 82148288h case   14:*/		regs.R5 = regs.R27;
		/* 82148288h case   14:*/		return 0x8214828C;
		  /* 8214828Ch */ case   15:  		/* mr R3, R31 */
		/* 8214828Ch case   15:*/		regs.R3 = regs.R31;
		/* 8214828Ch case   15:*/		return 0x82148290;
		  /* 82148290h */ case   16:  		/* bl -9184 */
		/* 82148290h case   16:*/		regs.LR = 0x82148294; return 0x82145EB0;
		/* 82148290h case   16:*/		return 0x82148294;
		  /* 82148294h */ case   17:  		/* cmplwi CR6, R29, 0 */
		/* 82148294h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82148294h case   17:*/		return 0x82148298;
		  /* 82148298h */ case   18:  		/* bc 12, CR6_EQ, 24 */
		/* 82148298h case   18:*/		if ( regs.CR[6].eq ) { return 0x821482B0;  }
		/* 82148298h case   18:*/		return 0x8214829C;
		  /* 8214829Ch */ case   19:  		/* lis R11, -32253 */
		/* 8214829Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214829Ch case   19:*/		return 0x821482A0;
		  /* 821482A0h */ case   20:  		/* mr R5, R29 */
		/* 821482A0h case   20:*/		regs.R5 = regs.R29;
		/* 821482A0h case   20:*/		return 0x821482A4;
		  /* 821482A4h */ case   21:  		/* addi R4, R11, 26420 */
		/* 821482A4h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6734);
		/* 821482A4h case   21:*/		return 0x821482A8;
		  /* 821482A8h */ case   22:  		/* mr R3, R31 */
		/* 821482A8h case   22:*/		regs.R3 = regs.R31;
		/* 821482A8h case   22:*/		return 0x821482AC;
		  /* 821482ACh */ case   23:  		/* bl -8676 */
		/* 821482ACh case   23:*/		regs.LR = 0x821482B0; return 0x821460C8;
		/* 821482ACh case   23:*/		return 0x821482B0;
	}
	return 0x821482B0;
} // Block from 82148250h-821482B0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821482B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821482B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821482B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821482B0);
		  /* 821482B0h */ case    0:  		/* lhz R11, <#[R30]> */
		/* 821482B0h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821482B0h case    0:*/		return 0x821482B4;
		  /* 821482B4h */ case    1:  		/* lis R10, -32217 */
		/* 821482B4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 821482B4h case    1:*/		return 0x821482B8;
		  /* 821482B8h */ case    2:  		/* lis R9, -32253 */
		/* 821482B8h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821482B8h case    2:*/		return 0x821482BC;
		  /* 821482BCh */ case    3:  		/* addi R10, R10, 17412 */
		/* 821482BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4404);
		/* 821482BCh case    3:*/		return 0x821482C0;
		  /* 821482C0h */ case    4:  		/* rlwinm R11, R11, 2, 0, 31 */
		/* 821482C0h case    4:*/		cpu::op::rlwinm<0,2,0,31>(regs,&regs.R11,regs.R11);
		/* 821482C0h case    4:*/		return 0x821482C4;
		  /* 821482C4h */ case    5:  		/* addi R4, R9, 12444 */
		/* 821482C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x309C);
		/* 821482C4h case    5:*/		return 0x821482C8;
		  /* 821482C8h */ case    6:  		/* mr R3, R31 */
		/* 821482C8h case    6:*/		regs.R3 = regs.R31;
		/* 821482C8h case    6:*/		return 0x821482CC;
		  /* 821482CCh */ case    7:  		/* lwzx R5, <#[R11 + R10]> */
		/* 821482CCh case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821482CCh case    7:*/		return 0x821482D0;
		  /* 821482D0h */ case    8:  		/* bl -8712 */
		/* 821482D0h case    8:*/		regs.LR = 0x821482D4; return 0x821460C8;
		/* 821482D0h case    8:*/		return 0x821482D4;
		  /* 821482D4h */ case    9:  		/* lis R11, -32253 */
		/* 821482D4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821482D4h case    9:*/		return 0x821482D8;
		  /* 821482D8h */ case   10:  		/* addi R29, R11, 25712 */
		/* 821482D8h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6470);
		/* 821482D8h case   10:*/		return 0x821482DC;
		  /* 821482DCh */ case   11:  		/* lhz R11, <#[R30]> */
		/* 821482DCh case   11:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821482DCh case   11:*/		return 0x821482E0;
		  /* 821482E0h */ case   12:  		/* cmplwi CR6, R11, 5 */
		/* 821482E0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 821482E0h case   12:*/		return 0x821482E4;
		  /* 821482E4h */ case   13:  		/* bc 12, CR6_EQ, 100 */
		/* 821482E4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82148348;  }
		/* 821482E4h case   13:*/		return 0x821482E8;
		  /* 821482E8h */ case   14:  		/* lhz R11, <#[R30 + 2]> */
		/* 821482E8h case   14:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 821482E8h case   14:*/		return 0x821482EC;
		  /* 821482ECh */ case   15:  		/* lis R10, -32217 */
		/* 821482ECh case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 821482ECh case   15:*/		return 0x821482F0;
		  /* 821482F0h */ case   16:  		/* mr R4, R27 */
		/* 821482F0h case   16:*/		regs.R4 = regs.R27;
		/* 821482F0h case   16:*/		return 0x821482F4;
		  /* 821482F4h */ case   17:  		/* addi R10, R10, 17336 */
		/* 821482F4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x43B8);
		/* 821482F4h case   17:*/		return 0x821482F8;
	}
	return 0x821482F8;
} // Block from 821482B0h-821482F8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821482F8h
// Function '?WriteLiterals@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAV?$FastVector@ULiteralBool@XGRAPHICS@@@2@PAV?$FastVector@ULiteralInt@XGRAPHICS@@@2@PAV?$FastVector@ULiteralFloat@XGRAPHICS@@@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821482F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821482F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821482F8);
		  /* 821482F8h */ case    0:  		/* rlwinm R11, R11, 2, 0, 31 */
		/* 821482F8h case    0:*/		cpu::op::rlwinm<0,2,0,31>(regs,&regs.R11,regs.R11);
		/* 821482F8h case    0:*/		return 0x821482FC;
		  /* 821482FCh */ case    1:  		/* mr R3, R31 */
		/* 821482FCh case    1:*/		regs.R3 = regs.R31;
		/* 821482FCh case    1:*/		return 0x82148300;
		  /* 82148300h */ case    2:  		/* lwzx R5, <#[R11 + R10]> */
		/* 82148300h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82148300h case    2:*/		return 0x82148304;
		  /* 82148304h */ case    3:  		/* bl -8764 */
		/* 82148304h case    3:*/		regs.LR = 0x82148308; return 0x821460C8;
		/* 82148304h case    3:*/		return 0x82148308;
		  /* 82148308h */ case    4:  		/* lhz R6, <#[R30 + 4]> */
		/* 82148308h case    4:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000004) );
		/* 82148308h case    4:*/		return 0x8214830C;
		  /* 8214830Ch */ case    5:  		/* cmplwi CR6, R6, 1 */
		/* 8214830Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 8214830Ch case    5:*/		return 0x82148310;
		  /* 82148310h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 82148310h case    6:*/		if ( regs.CR[6].eq ) { return 0x82148328;  }
		/* 82148310h case    6:*/		return 0x82148314;
		  /* 82148314h */ case    7:  		/* lis R11, -32253 */
		/* 82148314h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82148314h case    7:*/		return 0x82148318;
		  /* 82148318h */ case    8:  		/* mr R4, R29 */
		/* 82148318h case    8:*/		regs.R4 = regs.R29;
		/* 82148318h case    8:*/		return 0x8214831C;
		  /* 8214831Ch */ case    9:  		/* addi R5, R11, 26360 */
		/* 8214831Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x66F8);
		/* 8214831Ch case    9:*/		return 0x82148320;
		  /* 82148320h */ case   10:  		/* mr R3, R31 */
		/* 82148320h case   10:*/		regs.R3 = regs.R31;
		/* 82148320h case   10:*/		return 0x82148324;
		  /* 82148324h */ case   11:  		/* bl -9332 */
		/* 82148324h case   11:*/		regs.LR = 0x82148328; return 0x82145EB0;
		/* 82148324h case   11:*/		return 0x82148328;
	}
	return 0x82148328;
} // Block from 821482F8h-82148328h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82148328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148328);
		  /* 82148328h */ case    0:  		/* lhz R6, <#[R30 + 6]> */
		/* 82148328h case    0:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000006) );
		/* 82148328h case    0:*/		return 0x8214832C;
		  /* 8214832Ch */ case    1:  		/* cmplwi CR6, R6, 1 */
		/* 8214832Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 8214832Ch case    1:*/		return 0x82148330;
		  /* 82148330h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 82148330h case    2:*/		if ( regs.CR[6].eq ) { return 0x82148348;  }
		/* 82148330h case    2:*/		return 0x82148334;
		  /* 82148334h */ case    3:  		/* lis R11, -32253 */
		/* 82148334h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82148334h case    3:*/		return 0x82148338;
		  /* 82148338h */ case    4:  		/* mr R4, R29 */
		/* 82148338h case    4:*/		regs.R4 = regs.R29;
		/* 82148338h case    4:*/		return 0x8214833C;
		  /* 8214833Ch */ case    5:  		/* addi R5, R11, 26412 */
		/* 8214833Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x672C);
		/* 8214833Ch case    5:*/		return 0x82148340;
		  /* 82148340h */ case    6:  		/* mr R3, R31 */
		/* 82148340h case    6:*/		regs.R3 = regs.R31;
		/* 82148340h case    6:*/		return 0x82148344;
		  /* 82148344h */ case    7:  		/* bl -9364 */
		/* 82148344h case    7:*/		regs.LR = 0x82148348; return 0x82145EB0;
		/* 82148344h case    7:*/		return 0x82148348;
	}
	return 0x82148348;
} // Block from 82148328h-82148348h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82148348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148348);
		  /* 82148348h */ case    0:  		/* lhz R6, <#[R30 + 8]> */
		/* 82148348h case    0:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000008) );
		/* 82148348h case    0:*/		return 0x8214834C;
		  /* 8214834Ch */ case    1:  		/* cmplwi CR6, R6, 1 */
		/* 8214834Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 8214834Ch case    1:*/		return 0x82148350;
		  /* 82148350h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 82148350h case    2:*/		if ( regs.CR[6].eq ) { return 0x82148368;  }
		/* 82148350h case    2:*/		return 0x82148354;
		  /* 82148354h */ case    3:  		/* lis R11, -32254 */
		/* 82148354h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82148354h case    3:*/		return 0x82148358;
		  /* 82148358h */ case    4:  		/* mr R4, R29 */
		/* 82148358h case    4:*/		regs.R4 = regs.R29;
		/* 82148358h case    4:*/		return 0x8214835C;
		  /* 8214835Ch */ case    5:  		/* addi R5, R11, -13596 */
		/* 8214835Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCAE4);
		/* 8214835Ch case    5:*/		return 0x82148360;
		  /* 82148360h */ case    6:  		/* mr R3, R31 */
		/* 82148360h case    6:*/		regs.R3 = regs.R31;
		/* 82148360h case    6:*/		return 0x82148364;
		  /* 82148364h */ case    7:  		/* bl -9396 */
		/* 82148364h case    7:*/		regs.LR = 0x82148368; return 0x82145EB0;
		/* 82148364h case    7:*/		return 0x82148368;
	}
	return 0x82148368;
} // Block from 82148348h-82148368h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82148368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148368);
		  /* 82148368h */ case    0:  		/* lhz R11, <#[R30]> */
		/* 82148368h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82148368h case    0:*/		return 0x8214836C;
		  /* 8214836Ch */ case    1:  		/* mr R3, R31 */
		/* 8214836Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214836Ch case    1:*/		return 0x82148370;
		  /* 82148370h */ case    2:  		/* cmplwi CR6, R11, 5 */
		/* 82148370h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 82148370h case    2:*/		return 0x82148374;
		  /* 82148374h */ case    3:  		/* bc 4, CR6_EQ, 88 */
		/* 82148374h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821483CC;  }
		/* 82148374h case    3:*/		return 0x82148378;
		  /* 82148378h */ case    4:  		/* lhz R29, <#[R30 + 10]> */
		/* 82148378h case    4:*/		cpu::mem::load16z( regs, &regs.R29, (uint32)(regs.R30 + 0x0000000A) );
		/* 82148378h case    4:*/		return 0x8214837C;
		  /* 8214837Ch */ case    5:  		/* bl -5932 */
		/* 8214837Ch case    5:*/		regs.LR = 0x82148380; return 0x82146C50;
		/* 8214837Ch case    5:*/		return 0x82148380;
		  /* 82148380h */ case    6:  		/* lwz R11, <#[R30 + 12]> */
		/* 82148380h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82148380h case    6:*/		return 0x82148384;
		  /* 82148384h */ case    7:  		/* cmplwi CR6, R29, 0 */
		/* 82148384h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82148384h case    7:*/		return 0x82148388;
		  /* 82148388h */ case    8:  		/* add R11, R11, R28 */
		/* 82148388h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 82148388h case    8:*/		return 0x8214838C;
		  /* 8214838Ch */ case    9:  		/* bc 12, CR6_EQ, 48 */
		/* 8214838Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821483BC;  }
		/* 8214838Ch case    9:*/		return 0x82148390;
		  /* 82148390h */ case   10:  		/* addi R30, R11, -8 */
		/* 82148390h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFF8);
		/* 82148390h case   10:*/		return 0x82148394;
		  /* 82148394h */ case   11:  		/* lwz R10, <#[R30 + 12]> */
		/* 82148394h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 82148394h case   11:*/		return 0x82148398;
		  /* 82148398h */ case   12:  		/* mr R5, R28 */
		/* 82148398h case   12:*/		regs.R5 = regs.R28;
		/* 82148398h case   12:*/		return 0x8214839C;
		  /* 8214839Ch */ case   13:  		/* lwzu R11, <#[R30 + 8]> */
		/* 8214839Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		regs.R30 = (uint32)(regs.R30 + 0x00000008);
		/* 8214839Ch case   13:*/		return 0x821483A0;
		  /* 821483A0h */ case   14:  		/* mr R4, R31 */
		/* 821483A0h case   14:*/		regs.R4 = regs.R31;
		/* 821483A0h case   14:*/		return 0x821483A4;
		  /* 821483A4h */ case   15:  		/* add R6, R10, R28 */
		/* 821483A4h case   15:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R28);
		/* 821483A4h case   15:*/		return 0x821483A8;
		  /* 821483A8h */ case   16:  		/* add R7, R11, R28 */
		/* 821483A8h case   16:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R28);
		/* 821483A8h case   16:*/		return 0x821483AC;
		  /* 821483ACh */ case   17:  		/* mr R3, R26 */
		/* 821483ACh case   17:*/		regs.R3 = regs.R26;
		/* 821483ACh case   17:*/		return 0x821483B0;
		  /* 821483B0h */ case   18:  		/* bl -352 */
		/* 821483B0h case   18:*/		regs.LR = 0x821483B4; return 0x82148250;
		/* 821483B0h case   18:*/		return 0x821483B4;
		  /* 821483B4h */ case   19:  		/* addic. R29, R29, -1 */
		/* 821483B4h case   19:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821483B4h case   19:*/		return 0x821483B8;
		  /* 821483B8h */ case   20:  		/* bc 4, CR0_EQ, -36 */
		/* 821483B8h case   20:*/		if ( !regs.CR[0].eq ) { return 0x82148394;  }
		/* 821483B8h case   20:*/		return 0x821483BC;
	}
	return 0x821483BC;
} // Block from 82148368h-821483BCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 821483BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821483BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821483BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821483BC);
		  /* 821483BCh */ case    0:  		/* mr R4, R27 */
		/* 821483BCh case    0:*/		regs.R4 = regs.R27;
		/* 821483BCh case    0:*/		return 0x821483C0;
		  /* 821483C0h */ case    1:  		/* mr R3, R31 */
		/* 821483C0h case    1:*/		regs.R3 = regs.R31;
		/* 821483C0h case    1:*/		return 0x821483C4;
		  /* 821483C4h */ case    2:  		/* bl -9308 */
		/* 821483C4h case    2:*/		regs.LR = 0x821483C8; return 0x82145F68;
		/* 821483C4h case    2:*/		return 0x821483C8;
		  /* 821483C8h */ case    3:  		/* b 8 */
		/* 821483C8h case    3:*/		return 0x821483D0;
		/* 821483C8h case    3:*/		return 0x821483CC;
	}
	return 0x821483CC;
} // Block from 821483BCh-821483CCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821483CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821483CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821483CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821483CC);
		  /* 821483CCh */ case    0:  		/* bl -6092 */
		/* 821483CCh case    0:*/		regs.LR = 0x821483D0; return 0x82146C00;
		/* 821483CCh case    0:*/		return 0x821483D0;
	}
	return 0x821483D0;
} // Block from 821483CCh-821483D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821483D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821483D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821483D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821483D0);
		  /* 821483D0h */ case    0:  		/* addi R1, R1, 144 */
		/* 821483D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821483D0h case    0:*/		return 0x821483D4;
		  /* 821483D4h */ case    1:  		/* b -749876 */
		/* 821483D4h case    1:*/		return 0x820912A0;
		/* 821483D4h case    1:*/		return 0x821483D8;
	}
	return 0x821483D8;
} // Block from 821483D0h-821483D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821483D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821483D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821483D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821483D8);
		  /* 821483D8h */ case    0:  		/* mfspr R12, LR */
		/* 821483D8h case    0:*/		regs.R12 = regs.LR;
		/* 821483D8h case    0:*/		return 0x821483DC;
		  /* 821483DCh */ case    1:  		/* bl -749960 */
		/* 821483DCh case    1:*/		regs.LR = 0x821483E0; return 0x82091254;
		/* 821483DCh case    1:*/		return 0x821483E0;
		  /* 821483E0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821483E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821483E0h case    2:*/		return 0x821483E4;
		  /* 821483E4h */ case    3:  		/* mr R27, R3 */
		/* 821483E4h case    3:*/		regs.R27 = regs.R3;
		/* 821483E4h case    3:*/		return 0x821483E8;
		  /* 821483E8h */ case    4:  		/* mr R3, R4 */
		/* 821483E8h case    4:*/		regs.R3 = regs.R4;
		/* 821483E8h case    4:*/		return 0x821483EC;
		  /* 821483ECh */ case    5:  		/* mr R31, R4 */
		/* 821483ECh case    5:*/		regs.R31 = regs.R4;
		/* 821483ECh case    5:*/		return 0x821483F0;
		  /* 821483F0h */ case    6:  		/* mr R29, R5 */
		/* 821483F0h case    6:*/		regs.R29 = regs.R5;
		/* 821483F0h case    6:*/		return 0x821483F4;
		  /* 821483F4h */ case    7:  		/* mr R30, R6 */
		/* 821483F4h case    7:*/		regs.R30 = regs.R6;
		/* 821483F4h case    7:*/		return 0x821483F8;
		  /* 821483F8h */ case    8:  		/* bl -9456 */
		/* 821483F8h case    8:*/		regs.LR = 0x821483FC; return 0x82145F08;
		/* 821483F8h case    8:*/		return 0x821483FC;
		  /* 821483FCh */ case    9:  		/* lis R11, -32253 */
		/* 821483FCh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821483FCh case    9:*/		return 0x82148400;
		  /* 82148400h */ case   10:  		/* lis R10, -32253 */
		/* 82148400h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82148400h case   10:*/		return 0x82148404;
		  /* 82148404h */ case   11:  		/* addi R28, R11, 26448 */
		/* 82148404h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6750);
		/* 82148404h case   11:*/		return 0x82148408;
		  /* 82148408h */ case   12:  		/* addi R4, R10, 25840 */
		/* 82148408h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x64F0);
		/* 82148408h case   12:*/		return 0x8214840C;
		  /* 8214840Ch */ case   13:  		/* mr R5, R28 */
		/* 8214840Ch case   13:*/		regs.R5 = regs.R28;
		/* 8214840Ch case   13:*/		return 0x82148410;
		  /* 82148410h */ case   14:  		/* mr R3, R31 */
		/* 82148410h case   14:*/		regs.R3 = regs.R31;
		/* 82148410h case   14:*/		return 0x82148414;
		  /* 82148414h */ case   15:  		/* bl -9572 */
		/* 82148414h case   15:*/		regs.LR = 0x82148418; return 0x82145EB0;
		/* 82148414h case   15:*/		return 0x82148418;
		  /* 82148418h */ case   16:  		/* lhz R11, <#[R30 + 8]> */
		/* 82148418h case   16:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82148418h case   16:*/		return 0x8214841C;
		  /* 8214841Ch */ case   17:  		/* cmplwi CR0, R11, 0 */
		/* 8214841Ch case   17:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8214841Ch case   17:*/		return 0x82148420;
		  /* 82148420h */ case   18:  		/* bc 12, CR0_EQ, 100 */
		/* 82148420h case   18:*/		if ( regs.CR[0].eq ) { return 0x82148484;  }
		/* 82148420h case   18:*/		return 0x82148424;
		  /* 82148424h */ case   19:  		/* lis R11, -32253 */
		/* 82148424h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82148424h case   19:*/		return 0x82148428;
		  /* 82148428h */ case   20:  		/* lhz R10, <#[R30 + 4]> */
		/* 82148428h case   20:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82148428h case   20:*/		return 0x8214842C;
		  /* 8214842Ch */ case   21:  		/* lis R9, -32253 */
		/* 8214842Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8214842Ch case   21:*/		return 0x82148430;
		  /* 82148430h */ case   22:  		/* lhz R6, <#[R30 + 6]> */
		/* 82148430h case   22:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000006) );
		/* 82148430h case   22:*/		return 0x82148434;
		  /* 82148434h */ case   23:  		/* addi R11, R11, 26444 */
		/* 82148434h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x674C);
		/* 82148434h case   23:*/		return 0x82148438;
		  /* 82148438h */ case   24:  		/* addi R4, R9, 26436 */
		/* 82148438h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6744);
		/* 82148438h case   24:*/		return 0x8214843C;
		  /* 8214843Ch */ case   25:  		/* addi R3, R1, 80 */
		/* 8214843Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214843Ch case   25:*/		return 0x82148440;
		  /* 82148440h */ case   26:  		/* lbzx R11, <#[R10 + R11]> */
		/* 82148440h case   26:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82148440h case   26:*/		return 0x82148444;
		  /* 82148444h */ case   27:  		/* extsb R5, R11 */
		/* 82148444h case   27:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82148444h case   27:*/		return 0x82148448;
		  /* 82148448h */ case   28:  		/* bl 1181816 */
		/* 82148448h case   28:*/		regs.LR = 0x8214844C; return 0x82268CC0;
		/* 82148448h case   28:*/		return 0x8214844C;
		  /* 8214844Ch */ case   29:  		/* lis R11, -32253 */
		/* 8214844Ch case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214844Ch case   29:*/		return 0x82148450;
		  /* 82148450h */ case   30:  		/* addi R5, R1, 80 */
		/* 82148450h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82148450h case   30:*/		return 0x82148454;
		  /* 82148454h */ case   31:  		/* addi R4, R11, 11988 */
		/* 82148454h case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x2ED4);
		/* 82148454h case   31:*/		return 0x82148458;
		  /* 82148458h */ case   32:  		/* mr R3, R31 */
		/* 82148458h case   32:*/		regs.R3 = regs.R31;
		/* 82148458h case   32:*/		return 0x8214845C;
		  /* 8214845Ch */ case   33:  		/* bl -9108 */
		/* 8214845Ch case   33:*/		regs.LR = 0x82148460; return 0x821460C8;
		/* 8214845Ch case   33:*/		return 0x82148460;
		  /* 82148460h */ case   34:  		/* lhz R6, <#[R30 + 8]> */
		/* 82148460h case   34:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000008) );
		/* 82148460h case   34:*/		return 0x82148464;
		  /* 82148464h */ case   35:  		/* cmplwi CR6, R6, 1 */
		/* 82148464h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 82148464h case   35:*/		return 0x82148468;
		  /* 82148468h */ case   36:  		/* bc 12, CR6_EQ, 28 */
		/* 82148468h case   36:*/		if ( regs.CR[6].eq ) { return 0x82148484;  }
		/* 82148468h case   36:*/		return 0x8214846C;
		  /* 8214846Ch */ case   37:  		/* lis R11, -32253 */
		/* 8214846Ch case   37:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214846Ch case   37:*/		return 0x82148470;
		  /* 82148470h */ case   38:  		/* lis R10, -32253 */
		/* 82148470h case   38:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82148470h case   38:*/		return 0x82148474;
		  /* 82148474h */ case   39:  		/* addi R5, R11, 26428 */
		/* 82148474h case   39:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x673C);
		/* 82148474h case   39:*/		return 0x82148478;
		  /* 82148478h */ case   40:  		/* addi R4, R10, 25712 */
		/* 82148478h case   40:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x6470);
		/* 82148478h case   40:*/		return 0x8214847C;
		  /* 8214847Ch */ case   41:  		/* mr R3, R31 */
		/* 8214847Ch case   41:*/		regs.R3 = regs.R31;
		/* 8214847Ch case   41:*/		return 0x82148480;
		  /* 82148480h */ case   42:  		/* bl -9680 */
		/* 82148480h case   42:*/		regs.LR = 0x82148484; return 0x82145EB0;
		/* 82148480h case   42:*/		return 0x82148484;
	}
	return 0x82148484;
} // Block from 821483D8h-82148484h (43 instructions)

//////////////////////////////////////////////////////
// Block at 82148484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148484);
		  /* 82148484h */ case    0:  		/* mr R3, R31 */
		/* 82148484h case    0:*/		regs.R3 = regs.R31;
		/* 82148484h case    0:*/		return 0x82148488;
		  /* 82148488h */ case    1:  		/* bl -6200 */
		/* 82148488h case    1:*/		regs.LR = 0x8214848C; return 0x82146C50;
		/* 82148488h case    1:*/		return 0x8214848C;
		  /* 8214848Ch */ case    2:  		/* lwz R11, <#[R30]> */
		/* 8214848Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8214848Ch case    2:*/		return 0x82148490;
		  /* 82148490h */ case    3:  		/* lwz R10, <#[R30 + 12]> */
		/* 82148490h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 82148490h case    3:*/		return 0x82148494;
		  /* 82148494h */ case    4:  		/* mr R5, R29 */
		/* 82148494h case    4:*/		regs.R5 = regs.R29;
		/* 82148494h case    4:*/		return 0x82148498;
		  /* 82148498h */ case    5:  		/* mr R4, R31 */
		/* 82148498h case    5:*/		regs.R4 = regs.R31;
		/* 82148498h case    5:*/		return 0x8214849C;
		  /* 8214849Ch */ case    6:  		/* mr R3, R27 */
		/* 8214849Ch case    6:*/		regs.R3 = regs.R27;
		/* 8214849Ch case    6:*/		return 0x821484A0;
		  /* 821484A0h */ case    7:  		/* add R7, R11, R29 */
		/* 821484A0h case    7:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R29);
		/* 821484A0h case    7:*/		return 0x821484A4;
		  /* 821484A4h */ case    8:  		/* add R6, R10, R29 */
		/* 821484A4h case    8:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R29);
		/* 821484A4h case    8:*/		return 0x821484A8;
		  /* 821484A8h */ case    9:  		/* bl -600 */
		/* 821484A8h case    9:*/		regs.LR = 0x821484AC; return 0x82148250;
		/* 821484A8h case    9:*/		return 0x821484AC;
		  /* 821484ACh */ case   10:  		/* mr R4, R28 */
		/* 821484ACh case   10:*/		regs.R4 = regs.R28;
		/* 821484ACh case   10:*/		return 0x821484B0;
		  /* 821484B0h */ case   11:  		/* mr R3, R31 */
		/* 821484B0h case   11:*/		regs.R3 = regs.R31;
		/* 821484B0h case   11:*/		return 0x821484B4;
		  /* 821484B4h */ case   12:  		/* bl -9548 */
		/* 821484B4h case   12:*/		regs.LR = 0x821484B8; return 0x82145F68;
		/* 821484B4h case   12:*/		return 0x821484B8;
		  /* 821484B8h */ case   13:  		/* addi R1, R1, 144 */
		/* 821484B8h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821484B8h case   13:*/		return 0x821484BC;
		  /* 821484BCh */ case   14:  		/* b -750104 */
		/* 821484BCh case   14:*/		return 0x820912A4;
		/* 821484BCh case   14:*/		return 0x821484C0;
	}
	return 0x821484C0;
} // Block from 82148484h-821484C0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821484C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821484C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821484C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821484C0);
		  /* 821484C0h */ case    0:  		/* mfspr R12, LR */
		/* 821484C0h case    0:*/		regs.R12 = regs.LR;
		/* 821484C0h case    0:*/		return 0x821484C4;
		  /* 821484C4h */ case    1:  		/* bl -750196 */
		/* 821484C4h case    1:*/		regs.LR = 0x821484C8; return 0x82091250;
		/* 821484C4h case    1:*/		return 0x821484C8;
		  /* 821484C8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821484C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821484C8h case    2:*/		return 0x821484CC;
		  /* 821484CCh */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 821484CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 821484CCh case    3:*/		return 0x821484D0;
		  /* 821484D0h */ case    4:  		/* mr R26, R3 */
		/* 821484D0h case    4:*/		regs.R26 = regs.R3;
		/* 821484D0h case    4:*/		return 0x821484D4;
		  /* 821484D4h */ case    5:  		/* mr R30, R4 */
		/* 821484D4h case    5:*/		regs.R30 = regs.R4;
		/* 821484D4h case    5:*/		return 0x821484D8;
		  /* 821484D8h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 821484D8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821484D8h case    6:*/		return 0x821484DC;
		  /* 821484DCh */ case    7:  		/* bc 12, CR6_LT, 136 */
		/* 821484DCh case    7:*/		if ( regs.CR[6].lt ) { return 0x82148564;  }
		/* 821484DCh case    7:*/		return 0x821484E0;
		  /* 821484E0h */ case    8:  		/* mr R3, R4 */
		/* 821484E0h case    8:*/		regs.R3 = regs.R4;
		/* 821484E0h case    8:*/		return 0x821484E4;
		  /* 821484E4h */ case    9:  		/* lwz R31, <#[R5 + 388]> */
		/* 821484E4h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R5 + 0x00000184) );
		/* 821484E4h case    9:*/		return 0x821484E8;
		  /* 821484E8h */ case   10:  		/* bl -9696 */
		/* 821484E8h case   10:*/		regs.LR = 0x821484EC; return 0x82145F08;
		/* 821484E8h case   10:*/		return 0x821484EC;
		  /* 821484ECh */ case   11:  		/* lis R11, -32253 */
		/* 821484ECh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821484ECh case   11:*/		return 0x821484F0;
		  /* 821484F0h */ case   12:  		/* lis R10, -32253 */
		/* 821484F0h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821484F0h case   12:*/		return 0x821484F4;
		  /* 821484F4h */ case   13:  		/* addi R27, R11, 26460 */
		/* 821484F4h case   13:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x675C);
		/* 821484F4h case   13:*/		return 0x821484F8;
		  /* 821484F8h */ case   14:  		/* addi R4, R10, 25840 */
		/* 821484F8h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x64F0);
		/* 821484F8h case   14:*/		return 0x821484FC;
		  /* 821484FCh */ case   15:  		/* mr R5, R27 */
		/* 821484FCh case   15:*/		regs.R5 = regs.R27;
		/* 821484FCh case   15:*/		return 0x82148500;
		  /* 82148500h */ case   16:  		/* mr R3, R30 */
		/* 82148500h case   16:*/		regs.R3 = regs.R30;
		/* 82148500h case   16:*/		return 0x82148504;
		  /* 82148504h */ case   17:  		/* bl -9812 */
		/* 82148504h case   17:*/		regs.LR = 0x82148508; return 0x82145EB0;
		/* 82148504h case   17:*/		return 0x82148508;
		  /* 82148508h */ case   18:  		/* mr R3, R30 */
		/* 82148508h case   18:*/		regs.R3 = regs.R30;
		/* 82148508h case   18:*/		return 0x8214850C;
		  /* 8214850Ch */ case   19:  		/* bl -6332 */
		/* 8214850Ch case   19:*/		regs.LR = 0x82148510; return 0x82146C50;
		/* 8214850Ch case   19:*/		return 0x82148510;
		  /* 82148510h */ case   20:  		/* cmplwi CR6, R31, 0 */
		/* 82148510h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82148510h case   20:*/		return 0x82148514;
		  /* 82148514h */ case   21:  		/* bc 12, CR6_EQ, 68 */
		/* 82148514h case   21:*/		if ( regs.CR[6].eq ) { return 0x82148558;  }
		/* 82148514h case   21:*/		return 0x82148518;
		  /* 82148518h */ case   22:  		/* lwz R11, <#[R31 + 16]> */
		/* 82148518h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82148518h case   22:*/		return 0x8214851C;
		  /* 8214851Ch */ case   23:  		/* li R29, 0 */
		/* 8214851Ch case   23:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8214851Ch case   23:*/		return 0x82148520;
		  /* 82148520h */ case   24:  		/* lwz R10, <#[R31 + 12]> */
		/* 82148520h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82148520h case   24:*/		return 0x82148524;
		  /* 82148524h */ case   25:  		/* add R28, R11, R31 */
		/* 82148524h case   25:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R31);
		/* 82148524h case   25:*/		return 0x82148528;
		  /* 82148528h */ case   26:  		/* cmplwi CR6, R10, 0 */
		/* 82148528h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82148528h case   26:*/		return 0x8214852C;
		  /* 8214852Ch */ case   27:  		/* bc 4, CR6_GT, 44 */
		/* 8214852Ch case   27:*/		if ( !regs.CR[6].gt ) { return 0x82148558;  }
		/* 8214852Ch case   27:*/		return 0x82148530;
		  /* 82148530h */ case   28:  		/* mr R6, R28 */
		/* 82148530h case   28:*/		regs.R6 = regs.R28;
		/* 82148530h case   28:*/		return 0x82148534;
		  /* 82148534h */ case   29:  		/* mr R5, R31 */
		/* 82148534h case   29:*/		regs.R5 = regs.R31;
		/* 82148534h case   29:*/		return 0x82148538;
		  /* 82148538h */ case   30:  		/* mr R4, R30 */
		/* 82148538h case   30:*/		regs.R4 = regs.R30;
		/* 82148538h case   30:*/		return 0x8214853C;
		  /* 8214853Ch */ case   31:  		/* mr R3, R26 */
		/* 8214853Ch case   31:*/		regs.R3 = regs.R26;
		/* 8214853Ch case   31:*/		return 0x82148540;
		  /* 82148540h */ case   32:  		/* bl -360 */
		/* 82148540h case   32:*/		regs.LR = 0x82148544; return 0x821483D8;
		/* 82148540h case   32:*/		return 0x82148544;
		  /* 82148544h */ case   33:  		/* lwz R11, <#[R31 + 12]> */
		/* 82148544h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82148544h case   33:*/		return 0x82148548;
		  /* 82148548h */ case   34:  		/* addi R29, R29, 1 */
		/* 82148548h case   34:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82148548h case   34:*/		return 0x8214854C;
		  /* 8214854Ch */ case   35:  		/* addi R28, R28, 20 */
		/* 8214854Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x14);
		/* 8214854Ch case   35:*/		return 0x82148550;
		  /* 82148550h */ case   36:  		/* cmplw CR6, R29, R11 */
		/* 82148550h case   36:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82148550h case   36:*/		return 0x82148554;
		  /* 82148554h */ case   37:  		/* bc 12, CR6_LT, -36 */
		/* 82148554h case   37:*/		if ( regs.CR[6].lt ) { return 0x82148530;  }
		/* 82148554h case   37:*/		return 0x82148558;
	}
	return 0x82148558;
} // Block from 821484C0h-82148558h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82148558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148558);
		  /* 82148558h */ case    0:  		/* mr R4, R27 */
		/* 82148558h case    0:*/		regs.R4 = regs.R27;
		/* 82148558h case    0:*/		return 0x8214855C;
		  /* 8214855Ch */ case    1:  		/* mr R3, R30 */
		/* 8214855Ch case    1:*/		regs.R3 = regs.R30;
		/* 8214855Ch case    1:*/		return 0x82148560;
		  /* 82148560h */ case    2:  		/* bl -9720 */
		/* 82148560h case    2:*/		regs.LR = 0x82148564; return 0x82145F68;
		/* 82148560h case    2:*/		return 0x82148564;
	}
	return 0x82148564;
} // Block from 82148558h-82148564h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82148564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148564);
		  /* 82148564h */ case    0:  		/* addi R1, R1, 144 */
		/* 82148564h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82148564h case    0:*/		return 0x82148568;
		  /* 82148568h */ case    1:  		/* b -750280 */
		/* 82148568h case    1:*/		return 0x820912A0;
		/* 82148568h case    1:*/		return 0x8214856C;
		  /* 8214856Ch */ case    2:  		/* nop */
		/* 8214856Ch case    2:*/		cpu::op::nop();
		/* 8214856Ch case    2:*/		return 0x82148570;
	}
	return 0x82148570;
} // Block from 82148564h-82148570h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82148570h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148570);
		  /* 82148570h */ case    0:  		/* b -6344 */
		/* 82148570h case    0:*/		return 0x82146CA8;
		/* 82148570h case    0:*/		return 0x82148574;
		  /* 82148574h */ case    1:  		/* nop */
		/* 82148574h case    1:*/		cpu::op::nop();
		/* 82148574h case    1:*/		return 0x82148578;
	}
	return 0x82148578;
} // Block from 82148570h-82148578h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82148578h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148578);
		  /* 82148578h */ case    0:  		/* b -6168 */
		/* 82148578h case    0:*/		return 0x82146D60;
		/* 82148578h case    0:*/		return 0x8214857C;
		  /* 8214857Ch */ case    1:  		/* nop */
		/* 8214857Ch case    1:*/		cpu::op::nop();
		/* 8214857Ch case    1:*/		return 0x82148580;
	}
	return 0x82148580;
} // Block from 82148578h-82148580h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82148580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148580);
		  /* 82148580h */ case    0:  		/* mfspr R12, LR */
		/* 82148580h case    0:*/		regs.R12 = regs.LR;
		/* 82148580h case    0:*/		return 0x82148584;
		  /* 82148584h */ case    1:  		/* bl -750384 */
		/* 82148584h case    1:*/		regs.LR = 0x82148588; return 0x82091254;
		/* 82148584h case    1:*/		return 0x82148588;
		  /* 82148588h */ case    2:  		/* lwz R11, <#[R3 + 144]> */
		/* 82148588h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 82148588h case    2:*/		return 0x8214858C;
		  /* 8214858Ch */ case    3:  		/* lis R10, 20042 */
		/* 8214858Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x4E4A);
		/* 8214858Ch case    3:*/		return 0x82148590;
		  /* 82148590h */ case    4:  		/* mr R8, R4 */
		/* 82148590h case    4:*/		regs.R8 = regs.R4;
		/* 82148590h case    4:*/		return 0x82148594;
		  /* 82148594h */ case    5:  		/* stw R10, <#[R3 + 160]> */
		/* 82148594h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x000000A0) );
		/* 82148594h case    5:*/		return 0x82148598;
		  /* 82148598h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 82148598h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82148598h case    6:*/		return 0x8214859C;
		  /* 8214859Ch */ case    7:  		/* bc 4, CR6_LT, 16 */
		/* 8214859Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x821485AC;  }
		/* 8214859Ch case    7:*/		return 0x821485A0;
		  /* 821485A0h */ case    8:  		/* li R11, 0 */
		/* 821485A0h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821485A0h case    8:*/		return 0x821485A4;
		  /* 821485A4h */ case    9:  		/* stw R11, <#[R3 + 164]> */
		/* 821485A4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000000A4) );
		/* 821485A4h case    9:*/		return 0x821485A8;
		  /* 821485A8h */ case   10:  		/* b 724 */
		/* 821485A8h case   10:*/		return 0x8214887C;
		/* 821485A8h case   10:*/		return 0x821485AC;
	}
	return 0x821485AC;
} // Block from 82148580h-821485ACh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821485ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821485AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821485AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821485AC);
		  /* 821485ACh */ case    0:  		/* lwz R10, <#[R3 + 60]> */
		/* 821485ACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000003C) );
		/* 821485ACh case    0:*/		return 0x821485B0;
		  /* 821485B0h */ case    1:  		/* lis R6, -19687 */
		/* 821485B0h case    1:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFFB319);
		/* 821485B0h case    1:*/		return 0x821485B4;
		  /* 821485B4h */ case    2:  		/* lwz R9, <#[R3 + 56]> */
		/* 821485B4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000038) );
		/* 821485B4h case    2:*/		return 0x821485B8;
		  /* 821485B8h */ case    3:  		/* li R11, 1 */
		/* 821485B8h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821485B8h case    3:*/		return 0x821485BC;
		  /* 821485BCh */ case    4:  		/* mulli R7, R10, 40 */
		/* 821485BCh case    4:*/		cpu::op::mulli<0>(regs,&regs.R7,regs.R10,0x28);
		/* 821485BCh case    4:*/		return 0x821485C0;
		  /* 821485C0h */ case    5:  		/* ori R10, R6, 62707 */
		/* 821485C0h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R6,0xF4F3);
		/* 821485C0h case    5:*/		return 0x821485C4;
		  /* 821485C4h */ case    6:  		/* extsw R29, R9 */
		/* 821485C4h case    6:*/		cpu::op::extsw<0>(regs,&regs.R29,regs.R9);
		/* 821485C4h case    6:*/		return 0x821485C8;
		  /* 821485C8h */ case    7:  		/* add R28, R7, R9 */
		/* 821485C8h case    7:*/		cpu::op::add<0>(regs,&regs.R28,regs.R7,regs.R9);
		/* 821485C8h case    7:*/		return 0x821485CC;
		  /* 821485CCh */ case    8:  		/* rldicl R10, R10, 0, 32 */
		/* 821485CCh case    8:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R10);
		/* 821485CCh case    8:*/		return 0x821485D0;
		  /* 821485D0h */ case    9:  		/* b 136 */
		/* 821485D0h case    9:*/		return 0x82148658;
		/* 821485D0h case    9:*/		return 0x821485D4;
		  /* 821485D4h */ case   10:  		/* mr R30, R29 */
		/* 821485D4h case   10:*/		regs.R30 = regs.R29;
		/* 821485D4h case   10:*/		return 0x821485D8;
		  /* 821485D8h */ case   11:  		/* cmplwi CR6, R29, 0 */
		/* 821485D8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821485D8h case   11:*/		return 0x821485DC;
		  /* 821485DCh */ case   12:  		/* bc 12, CR6_EQ, 56 */
		/* 821485DCh case   12:*/		if ( regs.CR[6].eq ) { return 0x82148614;  }
		/* 821485DCh case   12:*/		return 0x821485E0;
		  /* 821485E0h */ case   13:  		/* lbz R9, <#[R29]> */
		/* 821485E0h case   13:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821485E0h case   13:*/		return 0x821485E4;
		  /* 821485E4h */ case   14:  		/* cmplwi CR0, R9, 0 */
		/* 821485E4h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 821485E4h case   14:*/		return 0x821485E8;
		  /* 821485E8h */ case   15:  		/* bc 12, CR0_EQ, 44 */
		/* 821485E8h case   15:*/		if ( regs.CR[0].eq ) { return 0x82148614;  }
		/* 821485E8h case   15:*/		return 0x821485EC;
		  /* 821485ECh */ case   16:  		/* rldicl R31, R11, 45, 19 */
		/* 821485ECh case   16:*/		cpu::op::rldicl<0,45,19>(regs,&regs.R31,regs.R11);
		/* 821485ECh case   16:*/		return 0x821485F0;
		  /* 821485F0h */ case   17:  		/* mulld R7, R11, R10 */
		/* 821485F0h case   17:*/		cpu::op::mulld<0>(regs,&regs.R7,regs.R11,regs.R10);
		/* 821485F0h case   17:*/		return 0x821485F4;
		  /* 821485F4h */ case   18:  		/* rldicl R6, R9, 0, 56 */
		/* 821485F4h case   18:*/		cpu::op::rldicl<0,0,56>(regs,&regs.R6,regs.R9);
		/* 821485F4h case   18:*/		return 0x821485F8;
		  /* 821485F8h */ case   19:  		/* lbzu R9, <#[R30 + 1]> */
		/* 821485F8h case   19:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000001) );
		regs.R30 = (uint32)(regs.R30 + 0x00000001);
		/* 821485F8h case   19:*/		return 0x821485FC;
		  /* 821485FCh */ case   20:  		/* add R7, R7, R31 */
		/* 821485FCh case   20:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R31);
		/* 821485FCh case   20:*/		return 0x82148600;
		  /* 82148600h */ case   21:  		/* rldicl R11, R11, 17, 47 */
		/* 82148600h case   21:*/		cpu::op::rldicl<0,17,47>(regs,&regs.R11,regs.R11);
		/* 82148600h case   21:*/		return 0x82148604;
		  /* 82148604h */ case   22:  		/* add R7, R7, R6 */
		/* 82148604h case   22:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 82148604h case   22:*/		return 0x82148608;
		  /* 82148608h */ case   23:  		/* extsb. R6, R9 */
		/* 82148608h case   23:*/		cpu::op::extsb<1>(regs,&regs.R6,regs.R9);
		/* 82148608h case   23:*/		return 0x8214860C;
		  /* 8214860Ch */ case   24:  		/* xor R11, R7, R11 */
		/* 8214860Ch case   24:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 8214860Ch case   24:*/		return 0x82148610;
		  /* 82148610h */ case   25:  		/* bc 4, CR0_EQ, -36 */
		/* 82148610h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821485EC;  }
		/* 82148610h case   25:*/		return 0x82148614;
	}
	return 0x82148614;
} // Block from 821485ACh-82148614h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82148614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148614);
		  /* 82148614h */ case    0:  		/* addi R30, R29, 32 */
		/* 82148614h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x20);
		/* 82148614h case    0:*/		return 0x82148618;
		  /* 82148618h */ case    1:  		/* cmpwi CR6, R29, -32 */
		/* 82148618h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFE0);
		/* 82148618h case    1:*/		return 0x8214861C;
		  /* 8214861Ch */ case    2:  		/* bc 12, CR6_EQ, 56 */
		/* 8214861Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82148654;  }
		/* 8214861Ch case    2:*/		return 0x82148620;
		  /* 82148620h */ case    3:  		/* lbz R9, <#[R30]> */
		/* 82148620h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 82148620h case    3:*/		return 0x82148624;
		  /* 82148624h */ case    4:  		/* cmplwi CR0, R9, 0 */
		/* 82148624h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 82148624h case    4:*/		return 0x82148628;
		  /* 82148628h */ case    5:  		/* bc 12, CR0_EQ, 44 */
		/* 82148628h case    5:*/		if ( regs.CR[0].eq ) { return 0x82148654;  }
		/* 82148628h case    5:*/		return 0x8214862C;
		  /* 8214862Ch */ case    6:  		/* rldicl R31, R11, 45, 19 */
		/* 8214862Ch case    6:*/		cpu::op::rldicl<0,45,19>(regs,&regs.R31,regs.R11);
		/* 8214862Ch case    6:*/		return 0x82148630;
		  /* 82148630h */ case    7:  		/* mulld R7, R11, R10 */
		/* 82148630h case    7:*/		cpu::op::mulld<0>(regs,&regs.R7,regs.R11,regs.R10);
		/* 82148630h case    7:*/		return 0x82148634;
		  /* 82148634h */ case    8:  		/* rldicl R6, R9, 0, 56 */
		/* 82148634h case    8:*/		cpu::op::rldicl<0,0,56>(regs,&regs.R6,regs.R9);
		/* 82148634h case    8:*/		return 0x82148638;
		  /* 82148638h */ case    9:  		/* lbzu R9, <#[R30 + 1]> */
		/* 82148638h case    9:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000001) );
		regs.R30 = (uint32)(regs.R30 + 0x00000001);
		/* 82148638h case    9:*/		return 0x8214863C;
		  /* 8214863Ch */ case   10:  		/* add R7, R7, R31 */
		/* 8214863Ch case   10:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R31);
		/* 8214863Ch case   10:*/		return 0x82148640;
	}
	return 0x82148640;
} // Block from 82148614h-82148640h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82148640h
// Function '?WriteAsserts@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAV?$FastVector@UAssertInfo@XGRAPHICS@@@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148640);
		  /* 82148640h */ case    0:  		/* rldicl R11, R11, 17, 47 */
		/* 82148640h case    0:*/		cpu::op::rldicl<0,17,47>(regs,&regs.R11,regs.R11);
		/* 82148640h case    0:*/		return 0x82148644;
		  /* 82148644h */ case    1:  		/* add R7, R7, R6 */
		/* 82148644h case    1:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 82148644h case    1:*/		return 0x82148648;
		  /* 82148648h */ case    2:  		/* extsb. R6, R9 */
		/* 82148648h case    2:*/		cpu::op::extsb<1>(regs,&regs.R6,regs.R9);
		/* 82148648h case    2:*/		return 0x8214864C;
		  /* 8214864Ch */ case    3:  		/* xor R11, R7, R11 */
		/* 8214864Ch case    3:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 8214864Ch case    3:*/		return 0x82148650;
		  /* 82148650h */ case    4:  		/* bc 4, CR0_EQ, -36 */
		/* 82148650h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214862C;  }
		/* 82148650h case    4:*/		return 0x82148654;
	}
	return 0x82148654;
} // Block from 82148640h-82148654h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82148654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148654);
		  /* 82148654h */ case    0:  		/* addi R29, R29, 40 */
		/* 82148654h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x28);
		/* 82148654h case    0:*/		return 0x82148658;
	}
	return 0x82148658;
} // Block from 82148654h-82148658h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82148658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148658);
		  /* 82148658h */ case    0:  		/* cmplw CR6, R29, R28 */
		/* 82148658h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 82148658h case    0:*/		return 0x8214865C;
		  /* 8214865Ch */ case    1:  		/* bc 12, CR6_LT, -136 */
		/* 8214865Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x821485D4;  }
		/* 8214865Ch case    1:*/		return 0x82148660;
		  /* 82148660h */ case    2:  		/* lwz R9, <#[R3 + 36]> */
		/* 82148660h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000024) );
		/* 82148660h case    2:*/		return 0x82148664;
		  /* 82148664h */ case    3:  		/* lwz R7, <#[R3 + 32]> */
		/* 82148664h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000020) );
		/* 82148664h case    3:*/		return 0x82148668;
		  /* 82148668h */ case    4:  		/* rlwinm R9, R9, 3, 0, 28 */
		/* 82148668h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R9);
		/* 82148668h case    4:*/		return 0x8214866C;
		  /* 8214866Ch */ case    5:  		/* extsw R29, R7 */
		/* 8214866Ch case    5:*/		cpu::op::extsw<0>(regs,&regs.R29,regs.R7);
		/* 8214866Ch case    5:*/		return 0x82148670;
		  /* 82148670h */ case    6:  		/* add R28, R9, R7 */
		/* 82148670h case    6:*/		cpu::op::add<0>(regs,&regs.R28,regs.R9,regs.R7);
		/* 82148670h case    6:*/		return 0x82148674;
		  /* 82148674h */ case    7:  		/* cmplw CR6, R29, R28 */
		/* 82148674h case    7:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 82148674h case    7:*/		return 0x82148678;
		  /* 82148678h */ case    8:  		/* bc 4, CR6_LT, 200 */
		/* 82148678h case    8:*/		if ( !regs.CR[6].lt ) { return 0x82148740;  }
		/* 82148678h case    8:*/		return 0x8214867C;
		  /* 8214867Ch */ case    9:  		/* lis R9, -32256 */
		/* 8214867Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8214867Ch case    9:*/		return 0x82148680;
		  /* 82148680h */ case   10:  		/* addi R27, R9, 4485 */
		/* 82148680h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0x1185);
		/* 82148680h case   10:*/		return 0x82148684;
		  /* 82148684h */ case   11:  		/* lwz R9, <#[R29]> */
		/* 82148684h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 82148684h case   11:*/		return 0x82148688;
		  /* 82148688h */ case   12:  		/* cmpwi CR6, R9, -1 */
		/* 82148688h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 82148688h case   12:*/		return 0x8214868C;
		  /* 8214868Ch */ case   13:  		/* bc 4, CR6_EQ, 12 */
		/* 8214868Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x82148698;  }
		/* 8214868Ch case   13:*/		return 0x82148690;
		  /* 82148690h */ case   14:  		/* mr R30, R27 */
		/* 82148690h case   14:*/		regs.R30 = regs.R27;
		/* 82148690h case   14:*/		return 0x82148694;
		  /* 82148694h */ case   15:  		/* b 12 */
		/* 82148694h case   15:*/		return 0x821486A0;
		/* 82148694h case   15:*/		return 0x82148698;
	}
	return 0x82148698;
} // Block from 82148658h-82148698h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82148698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148698);
		  /* 82148698h */ case    0:  		/* lwz R7, <#[R3 + 44]> */
		/* 82148698h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x0000002C) );
		/* 82148698h case    0:*/		return 0x8214869C;
		  /* 8214869Ch */ case    1:  		/* add R30, R7, R9 */
		/* 8214869Ch case    1:*/		cpu::op::add<0>(regs,&regs.R30,regs.R7,regs.R9);
		/* 8214869Ch case    1:*/		return 0x821486A0;
	}
	return 0x821486A0;
} // Block from 82148698h-821486A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821486A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821486A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821486A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821486A0);
		  /* 821486A0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821486A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821486A0h case    0:*/		return 0x821486A4;
		  /* 821486A4h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 821486A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821486DC;  }
		/* 821486A4h case    1:*/		return 0x821486A8;
		  /* 821486A8h */ case    2:  		/* lbz R9, <#[R30]> */
		/* 821486A8h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 821486A8h case    2:*/		return 0x821486AC;
		  /* 821486ACh */ case    3:  		/* cmplwi CR0, R9, 0 */
		/* 821486ACh case    3:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 821486ACh case    3:*/		return 0x821486B0;
		  /* 821486B0h */ case    4:  		/* bc 12, CR0_EQ, 44 */
		/* 821486B0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821486DC;  }
		/* 821486B0h case    4:*/		return 0x821486B4;
		  /* 821486B4h */ case    5:  		/* rldicl R31, R11, 45, 19 */
		/* 821486B4h case    5:*/		cpu::op::rldicl<0,45,19>(regs,&regs.R31,regs.R11);
		/* 821486B4h case    5:*/		return 0x821486B8;
		  /* 821486B8h */ case    6:  		/* mulld R7, R11, R10 */
		/* 821486B8h case    6:*/		cpu::op::mulld<0>(regs,&regs.R7,regs.R11,regs.R10);
		/* 821486B8h case    6:*/		return 0x821486BC;
		  /* 821486BCh */ case    7:  		/* rldicl R6, R9, 0, 56 */
		/* 821486BCh case    7:*/		cpu::op::rldicl<0,0,56>(regs,&regs.R6,regs.R9);
		/* 821486BCh case    7:*/		return 0x821486C0;
		  /* 821486C0h */ case    8:  		/* lbzu R9, <#[R30 + 1]> */
		/* 821486C0h case    8:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000001) );
		regs.R30 = (uint32)(regs.R30 + 0x00000001);
		/* 821486C0h case    8:*/		return 0x821486C4;
		  /* 821486C4h */ case    9:  		/* add R7, R7, R31 */
		/* 821486C4h case    9:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R31);
		/* 821486C4h case    9:*/		return 0x821486C8;
		  /* 821486C8h */ case   10:  		/* rldicl R11, R11, 17, 47 */
		/* 821486C8h case   10:*/		cpu::op::rldicl<0,17,47>(regs,&regs.R11,regs.R11);
		/* 821486C8h case   10:*/		return 0x821486CC;
		  /* 821486CCh */ case   11:  		/* add R7, R7, R6 */
		/* 821486CCh case   11:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 821486CCh case   11:*/		return 0x821486D0;
		  /* 821486D0h */ case   12:  		/* extsb. R6, R9 */
		/* 821486D0h case   12:*/		cpu::op::extsb<1>(regs,&regs.R6,regs.R9);
		/* 821486D0h case   12:*/		return 0x821486D4;
		  /* 821486D4h */ case   13:  		/* xor R11, R7, R11 */
		/* 821486D4h case   13:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 821486D4h case   13:*/		return 0x821486D8;
		  /* 821486D8h */ case   14:  		/* bc 4, CR0_EQ, -36 */
		/* 821486D8h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821486B4;  }
		/* 821486D8h case   14:*/		return 0x821486DC;
	}
	return 0x821486DC;
} // Block from 821486A0h-821486DCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821486DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821486DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821486DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821486DC);
		  /* 821486DCh */ case    0:  		/* lwz R9, <#[R29 + 4]> */
		/* 821486DCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000004) );
		/* 821486DCh case    0:*/		return 0x821486E0;
		  /* 821486E0h */ case    1:  		/* cmpwi CR6, R9, -1 */
		/* 821486E0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 821486E0h case    1:*/		return 0x821486E4;
		  /* 821486E4h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821486E4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821486F0;  }
		/* 821486E4h case    2:*/		return 0x821486E8;
		  /* 821486E8h */ case    3:  		/* mr R30, R27 */
		/* 821486E8h case    3:*/		regs.R30 = regs.R27;
		/* 821486E8h case    3:*/		return 0x821486EC;
		  /* 821486ECh */ case    4:  		/* b 12 */
		/* 821486ECh case    4:*/		return 0x821486F8;
		/* 821486ECh case    4:*/		return 0x821486F0;
	}
	return 0x821486F0;
} // Block from 821486DCh-821486F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821486F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821486F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821486F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821486F0);
		  /* 821486F0h */ case    0:  		/* lwz R7, <#[R3 + 44]> */
		/* 821486F0h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x0000002C) );
		/* 821486F0h case    0:*/		return 0x821486F4;
		  /* 821486F4h */ case    1:  		/* add R30, R7, R9 */
		/* 821486F4h case    1:*/		cpu::op::add<0>(regs,&regs.R30,regs.R7,regs.R9);
		/* 821486F4h case    1:*/		return 0x821486F8;
	}
	return 0x821486F8;
} // Block from 821486F0h-821486F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821486F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821486F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821486F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821486F8);
		  /* 821486F8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821486F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821486F8h case    0:*/		return 0x821486FC;
		  /* 821486FCh */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 821486FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82148734;  }
		/* 821486FCh case    1:*/		return 0x82148700;
		  /* 82148700h */ case    2:  		/* lbz R9, <#[R30]> */
		/* 82148700h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 82148700h case    2:*/		return 0x82148704;
		  /* 82148704h */ case    3:  		/* cmplwi CR0, R9, 0 */
		/* 82148704h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 82148704h case    3:*/		return 0x82148708;
		  /* 82148708h */ case    4:  		/* bc 12, CR0_EQ, 44 */
		/* 82148708h case    4:*/		if ( regs.CR[0].eq ) { return 0x82148734;  }
		/* 82148708h case    4:*/		return 0x8214870C;
		  /* 8214870Ch */ case    5:  		/* rldicl R31, R11, 45, 19 */
		/* 8214870Ch case    5:*/		cpu::op::rldicl<0,45,19>(regs,&regs.R31,regs.R11);
		/* 8214870Ch case    5:*/		return 0x82148710;
		  /* 82148710h */ case    6:  		/* mulld R7, R11, R10 */
		/* 82148710h case    6:*/		cpu::op::mulld<0>(regs,&regs.R7,regs.R11,regs.R10);
		/* 82148710h case    6:*/		return 0x82148714;
		  /* 82148714h */ case    7:  		/* rldicl R6, R9, 0, 56 */
		/* 82148714h case    7:*/		cpu::op::rldicl<0,0,56>(regs,&regs.R6,regs.R9);
		/* 82148714h case    7:*/		return 0x82148718;
		  /* 82148718h */ case    8:  		/* lbzu R9, <#[R30 + 1]> */
		/* 82148718h case    8:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000001) );
		regs.R30 = (uint32)(regs.R30 + 0x00000001);
		/* 82148718h case    8:*/		return 0x8214871C;
		  /* 8214871Ch */ case    9:  		/* add R7, R7, R31 */
		/* 8214871Ch case    9:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R31);
		/* 8214871Ch case    9:*/		return 0x82148720;
		  /* 82148720h */ case   10:  		/* rldicl R11, R11, 17, 47 */
		/* 82148720h case   10:*/		cpu::op::rldicl<0,17,47>(regs,&regs.R11,regs.R11);
		/* 82148720h case   10:*/		return 0x82148724;
		  /* 82148724h */ case   11:  		/* add R7, R7, R6 */
		/* 82148724h case   11:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 82148724h case   11:*/		return 0x82148728;
		  /* 82148728h */ case   12:  		/* extsb. R6, R9 */
		/* 82148728h case   12:*/		cpu::op::extsb<1>(regs,&regs.R6,regs.R9);
		/* 82148728h case   12:*/		return 0x8214872C;
		  /* 8214872Ch */ case   13:  		/* xor R11, R7, R11 */
		/* 8214872Ch case   13:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 8214872Ch case   13:*/		return 0x82148730;
		  /* 82148730h */ case   14:  		/* bc 4, CR0_EQ, -36 */
		/* 82148730h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8214870C;  }
		/* 82148730h case   14:*/		return 0x82148734;
	}
	return 0x82148734;
} // Block from 821486F8h-82148734h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82148734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148734);
		  /* 82148734h */ case    0:  		/* addi R29, R29, 8 */
		/* 82148734h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x8);
		/* 82148734h case    0:*/		return 0x82148738;
		  /* 82148738h */ case    1:  		/* cmplw CR6, R29, R28 */
		/* 82148738h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 82148738h case    1:*/		return 0x8214873C;
		  /* 8214873Ch */ case    2:  		/* bc 12, CR6_LT, -184 */
		/* 8214873Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x82148684;  }
		/* 8214873Ch case    2:*/		return 0x82148740;
	}
	return 0x82148740;
} // Block from 82148734h-82148740h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82148740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148740);
		  /* 82148740h */ case    0:  		/* lwz R9, <#[R3 + 8]> */
		/* 82148740h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82148740h case    0:*/		return 0x82148744;
		  /* 82148744h */ case    1:  		/* lwz R7, <#[R3 + 4]> */
		/* 82148744h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000004) );
		/* 82148744h case    1:*/		return 0x82148748;
		  /* 82148748h */ case    2:  		/* mulli R9, R9, 276 */
		/* 82148748h case    2:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R9,0x114);
		/* 82148748h case    2:*/		return 0x8214874C;
		  /* 8214874Ch */ case    3:  		/* extsw R30, R7 */
		/* 8214874Ch case    3:*/		cpu::op::extsw<0>(regs,&regs.R30,regs.R7);
		/* 8214874Ch case    3:*/		return 0x82148750;
		  /* 82148750h */ case    4:  		/* add R29, R9, R7 */
		/* 82148750h case    4:*/		cpu::op::add<0>(regs,&regs.R29,regs.R9,regs.R7);
		/* 82148750h case    4:*/		return 0x82148754;
		  /* 82148754h */ case    5:  		/* b 100 */
		/* 82148754h case    5:*/		return 0x821487B8;
		/* 82148754h case    5:*/		return 0x82148758;
		  /* 82148758h */ case    6:  		/* lwz R31, <#[R30 + 272]> */
		/* 82148758h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000110) );
		/* 82148758h case    6:*/		return 0x8214875C;
		  /* 8214875Ch */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 8214875Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8214875Ch case    7:*/		return 0x82148760;
		  /* 82148760h */ case    8:  		/* bc 12, CR6_EQ, 84 */
		/* 82148760h case    8:*/		if ( regs.CR[6].eq ) { return 0x821487B4;  }
		/* 82148760h case    8:*/		return 0x82148764;
		  /* 82148764h */ case    9:  		/* lbz R7, <#[R31]> */
		/* 82148764h case    9:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 82148764h case    9:*/		return 0x82148768;
		  /* 82148768h */ case   10:  		/* b 68 */
		/* 82148768h case   10:*/		return 0x821487AC;
		/* 82148768h case   10:*/		return 0x8214876C;
		  /* 8214876Ch */ case   11:  		/* cmpwi CR6, R9, 32 */
		/* 8214876Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000020);
		/* 8214876Ch case   11:*/		return 0x82148770;
		  /* 82148770h */ case   12:  		/* bc 12, CR6_EQ, 56 */
		/* 82148770h case   12:*/		if ( regs.CR[6].eq ) { return 0x821487A8;  }
		/* 82148770h case   12:*/		return 0x82148774;
		  /* 82148774h */ case   13:  		/* cmpwi CR6, R9, 10 */
		/* 82148774h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000000A);
		/* 82148774h case   13:*/		return 0x82148778;
		  /* 82148778h */ case   14:  		/* bc 12, CR6_EQ, 48 */
		/* 82148778h case   14:*/		if ( regs.CR[6].eq ) { return 0x821487A8;  }
		/* 82148778h case   14:*/		return 0x8214877C;
		  /* 8214877Ch */ case   15:  		/* cmpwi CR6, R9, 13 */
		/* 8214877Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000000D);
		/* 8214877Ch case   15:*/		return 0x82148780;
		  /* 82148780h */ case   16:  		/* bc 12, CR6_EQ, 40 */
		/* 82148780h case   16:*/		if ( regs.CR[6].eq ) { return 0x821487A8;  }
		/* 82148780h case   16:*/		return 0x82148784;
		  /* 82148784h */ case   17:  		/* cmpwi CR6, R9, 9 */
		/* 82148784h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000009);
		/* 82148784h case   17:*/		return 0x82148788;
		  /* 82148788h */ case   18:  		/* bc 12, CR6_EQ, 32 */
		/* 82148788h case   18:*/		if ( regs.CR[6].eq ) { return 0x821487A8;  }
		/* 82148788h case   18:*/		return 0x8214878C;
		  /* 8214878Ch */ case   19:  		/* rldicl R6, R11, 45, 19 */
		/* 8214878Ch case   19:*/		cpu::op::rldicl<0,45,19>(regs,&regs.R6,regs.R11);
		/* 8214878Ch case   19:*/		return 0x82148790;
		  /* 82148790h */ case   20:  		/* mulld R9, R11, R10 */
		/* 82148790h case   20:*/		cpu::op::mulld<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 82148790h case   20:*/		return 0x82148794;
		  /* 82148794h */ case   21:  		/* add R9, R9, R6 */
		/* 82148794h case   21:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 82148794h case   21:*/		return 0x82148798;
		  /* 82148798h */ case   22:  		/* rldicl R7, R7, 0, 56 */
		/* 82148798h case   22:*/		cpu::op::rldicl<0,0,56>(regs,&regs.R7,regs.R7);
		/* 82148798h case   22:*/		return 0x8214879C;
		  /* 8214879Ch */ case   23:  		/* rldicl R11, R11, 17, 47 */
		/* 8214879Ch case   23:*/		cpu::op::rldicl<0,17,47>(regs,&regs.R11,regs.R11);
		/* 8214879Ch case   23:*/		return 0x821487A0;
		  /* 821487A0h */ case   24:  		/* add R9, R9, R7 */
		/* 821487A0h case   24:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821487A0h case   24:*/		return 0x821487A4;
		  /* 821487A4h */ case   25:  		/* xor R11, R9, R11 */
		/* 821487A4h case   25:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821487A4h case   25:*/		return 0x821487A8;
	}
	return 0x821487A8;
} // Block from 82148740h-821487A8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821487A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821487A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821487A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821487A8);
		  /* 821487A8h */ case    0:  		/* lbzu R7, <#[R31 + 1]> */
		/* 821487A8h case    0:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000001) );
		regs.R31 = (uint32)(regs.R31 + 0x00000001);
		/* 821487A8h case    0:*/		return 0x821487AC;
	}
	return 0x821487AC;
} // Block from 821487A8h-821487ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821487ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821487AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821487AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821487AC);
		  /* 821487ACh */ case    0:  		/* extsb. R9, R7 */
		/* 821487ACh case    0:*/		cpu::op::extsb<1>(regs,&regs.R9,regs.R7);
		/* 821487ACh case    0:*/		return 0x821487B0;
		  /* 821487B0h */ case    1:  		/* bc 4, CR0_EQ, -68 */
		/* 821487B0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214876C;  }
		/* 821487B0h case    1:*/		return 0x821487B4;
	}
	return 0x821487B4;
} // Block from 821487ACh-821487B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821487B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821487B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821487B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821487B4);
		  /* 821487B4h */ case    0:  		/* addi R30, R30, 276 */
		/* 821487B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x114);
		/* 821487B4h case    0:*/		return 0x821487B8;
	}
	return 0x821487B8;
} // Block from 821487B4h-821487B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821487B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821487B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821487B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821487B8);
		  /* 821487B8h */ case    0:  		/* cmplw CR6, R30, R29 */
		/* 821487B8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 821487B8h case    0:*/		return 0x821487BC;
		  /* 821487BCh */ case    1:  		/* bc 12, CR6_LT, -100 */
		/* 821487BCh case    1:*/		if ( regs.CR[6].lt ) { return 0x82148758;  }
		/* 821487BCh case    1:*/		return 0x821487C0;
		  /* 821487C0h */ case    2:  		/* cmplwi CR6, R8, 0 */
		/* 821487C0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821487C0h case    2:*/		return 0x821487C4;
		  /* 821487C4h */ case    3:  		/* bc 12, CR6_EQ, 176 */
		/* 821487C4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82148874;  }
		/* 821487C4h case    3:*/		return 0x821487C8;
		  /* 821487C8h */ case    4:  		/* lbz R9, <#[R8]> */
		/* 821487C8h case    4:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 821487C8h case    4:*/		return 0x821487CC;
		  /* 821487CCh */ case    5:  		/* cmplwi CR0, R9, 0 */
		/* 821487CCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 821487CCh case    5:*/		return 0x821487D0;
		  /* 821487D0h */ case    6:  		/* bc 12, CR0_EQ, 44 */
		/* 821487D0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821487FC;  }
		/* 821487D0h case    6:*/		return 0x821487D4;
		  /* 821487D4h */ case    7:  		/* rldicl R4, R11, 45, 19 */
		/* 821487D4h case    7:*/		cpu::op::rldicl<0,45,19>(regs,&regs.R4,regs.R11);
		/* 821487D4h case    7:*/		return 0x821487D8;
		  /* 821487D8h */ case    8:  		/* mulld R7, R11, R10 */
		/* 821487D8h case    8:*/		cpu::op::mulld<0>(regs,&regs.R7,regs.R11,regs.R10);
		/* 821487D8h case    8:*/		return 0x821487DC;
		  /* 821487DCh */ case    9:  		/* rldicl R6, R9, 0, 56 */
		/* 821487DCh case    9:*/		cpu::op::rldicl<0,0,56>(regs,&regs.R6,regs.R9);
		/* 821487DCh case    9:*/		return 0x821487E0;
		  /* 821487E0h */ case   10:  		/* lbzu R9, <#[R8 + 1]> */
		/* 821487E0h case   10:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000001) );
		regs.R8 = (uint32)(regs.R8 + 0x00000001);
		/* 821487E0h case   10:*/		return 0x821487E4;
		  /* 821487E4h */ case   11:  		/* add R7, R7, R4 */
		/* 821487E4h case   11:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R4);
		/* 821487E4h case   11:*/		return 0x821487E8;
		  /* 821487E8h */ case   12:  		/* rldicl R11, R11, 17, 47 */
		/* 821487E8h case   12:*/		cpu::op::rldicl<0,17,47>(regs,&regs.R11,regs.R11);
		/* 821487E8h case   12:*/		return 0x821487EC;
		  /* 821487ECh */ case   13:  		/* add R7, R7, R6 */
		/* 821487ECh case   13:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 821487ECh case   13:*/		return 0x821487F0;
		  /* 821487F0h */ case   14:  		/* extsb. R6, R9 */
		/* 821487F0h case   14:*/		cpu::op::extsb<1>(regs,&regs.R6,regs.R9);
		/* 821487F0h case   14:*/		return 0x821487F4;
		  /* 821487F4h */ case   15:  		/* xor R11, R7, R11 */
		/* 821487F4h case   15:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 821487F4h case   15:*/		return 0x821487F8;
		  /* 821487F8h */ case   16:  		/* bc 4, CR0_EQ, -36 */
		/* 821487F8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821487D4;  }
		/* 821487F8h case   16:*/		return 0x821487FC;
	}
	return 0x821487FC;
} // Block from 821487B8h-821487FCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821487FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821487FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821487FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821487FC);
		  /* 821487FCh */ case    0:  		/* rldicl R8, R11, 45, 19 */
		/* 821487FCh case    0:*/		cpu::op::rldicl<0,45,19>(regs,&regs.R8,regs.R11);
		/* 821487FCh case    0:*/		return 0x82148800;
		  /* 82148800h */ case    1:  		/* mulld R9, R11, R10 */
		/* 82148800h case    1:*/		cpu::op::mulld<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 82148800h case    1:*/		return 0x82148804;
		  /* 82148804h */ case    2:  		/* add R9, R9, R8 */
		/* 82148804h case    2:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82148804h case    2:*/		return 0x82148808;
		  /* 82148808h */ case    3:  		/* rlwinm R7, R5, 0, 24, 31 */
		/* 82148808h case    3:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R7,regs.R5);
		/* 82148808h case    3:*/		return 0x8214880C;
		  /* 8214880Ch */ case    4:  		/* rldicl R11, R11, 17, 47 */
		/* 8214880Ch case    4:*/		cpu::op::rldicl<0,17,47>(regs,&regs.R11,regs.R11);
		/* 8214880Ch case    4:*/		return 0x82148810;
		  /* 82148810h */ case    5:  		/* add R9, R9, R7 */
		/* 82148810h case    5:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 82148810h case    5:*/		return 0x82148814;
		  /* 82148814h */ case    6:  		/* rlwinm R8, R5, 24, 24, 31 */
		/* 82148814h case    6:*/		cpu::op::rlwinm<0,24,24,31>(regs,&regs.R8,regs.R5);
		/* 82148814h case    6:*/		return 0x82148818;
		  /* 82148818h */ case    7:  		/* xor R7, R9, R11 */
		/* 82148818h case    7:*/		cpu::op::xor<0>(regs,&regs.R7,regs.R9,regs.R11);
		/* 82148818h case    7:*/		return 0x8214881C;
		  /* 8214881Ch */ case    8:  		/* mr R11, R8 */
		/* 8214881Ch case    8:*/		regs.R11 = regs.R8;
		/* 8214881Ch case    8:*/		return 0x82148820;
		  /* 82148820h */ case    9:  		/* mulld R8, R7, R10 */
		/* 82148820h case    9:*/		cpu::op::mulld<0>(regs,&regs.R8,regs.R7,regs.R10);
		/* 82148820h case    9:*/		return 0x82148824;
		  /* 82148824h */ case   10:  		/* add R11, R11, R8 */
		/* 82148824h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82148824h case   10:*/		return 0x82148828;
		  /* 82148828h */ case   11:  		/* rldicl R9, R7, 45, 19 */
		/* 82148828h case   11:*/		cpu::op::rldicl<0,45,19>(regs,&regs.R9,regs.R7);
		/* 82148828h case   11:*/		return 0x8214882C;
		  /* 8214882Ch */ case   12:  		/* rldicl R8, R7, 17, 47 */
		/* 8214882Ch case   12:*/		cpu::op::rldicl<0,17,47>(regs,&regs.R8,regs.R7);
		/* 8214882Ch case   12:*/		return 0x82148830;
		  /* 82148830h */ case   13:  		/* add R11, R11, R9 */
		/* 82148830h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82148830h case   13:*/		return 0x82148834;
		  /* 82148834h */ case   14:  		/* rlwinm R9, R5, 16, 24, 31 */
		/* 82148834h case   14:*/		cpu::op::rlwinm<0,16,24,31>(regs,&regs.R9,regs.R5);
		/* 82148834h case   14:*/		return 0x82148838;
		  /* 82148838h */ case   15:  		/* xor R7, R11, R8 */
		/* 82148838h case   15:*/		cpu::op::xor<0>(regs,&regs.R7,regs.R11,regs.R8);
		/* 82148838h case   15:*/		return 0x8214883C;
		  /* 8214883Ch */ case   16:  		/* mulld R8, R7, R10 */
		/* 8214883Ch case   16:*/		cpu::op::mulld<0>(regs,&regs.R8,regs.R7,regs.R10);
		/* 8214883Ch case   16:*/		return 0x82148840;
		  /* 82148840h */ case   17:  		/* add R11, R9, R8 */
		/* 82148840h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R8);
		/* 82148840h case   17:*/		return 0x82148844;
		  /* 82148844h */ case   18:  		/* rldicl R9, R7, 45, 19 */
		/* 82148844h case   18:*/		cpu::op::rldicl<0,45,19>(regs,&regs.R9,regs.R7);
		/* 82148844h case   18:*/		return 0x82148848;
		  /* 82148848h */ case   19:  		/* rldicl R8, R7, 17, 47 */
		/* 82148848h case   19:*/		cpu::op::rldicl<0,17,47>(regs,&regs.R8,regs.R7);
		/* 82148848h case   19:*/		return 0x8214884C;
		  /* 8214884Ch */ case   20:  		/* add R11, R11, R9 */
		/* 8214884Ch case   20:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8214884Ch case   20:*/		return 0x82148850;
		  /* 82148850h */ case   21:  		/* rlwinm R9, R5, 8, 24, 31 */
		/* 82148850h case   21:*/		cpu::op::rlwinm<0,8,24,31>(regs,&regs.R9,regs.R5);
		/* 82148850h case   21:*/		return 0x82148854;
		  /* 82148854h */ case   22:  		/* xor R8, R11, R8 */
		/* 82148854h case   22:*/		cpu::op::xor<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 82148854h case   22:*/		return 0x82148858;
		  /* 82148858h */ case   23:  		/* mr R11, R9 */
		/* 82148858h case   23:*/		regs.R11 = regs.R9;
		/* 82148858h case   23:*/		return 0x8214885C;
		  /* 8214885Ch */ case   24:  		/* mulld R9, R8, R10 */
		/* 8214885Ch case   24:*/		cpu::op::mulld<0>(regs,&regs.R9,regs.R8,regs.R10);
		/* 8214885Ch case   24:*/		return 0x82148860;
		  /* 82148860h */ case   25:  		/* add R11, R11, R9 */
		/* 82148860h case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82148860h case   25:*/		return 0x82148864;
		  /* 82148864h */ case   26:  		/* rldicl R10, R8, 45, 19 */
		/* 82148864h case   26:*/		cpu::op::rldicl<0,45,19>(regs,&regs.R10,regs.R8);
		/* 82148864h case   26:*/		return 0x82148868;
		  /* 82148868h */ case   27:  		/* rldicl R9, R8, 17, 47 */
		/* 82148868h case   27:*/		cpu::op::rldicl<0,17,47>(regs,&regs.R9,regs.R8);
		/* 82148868h case   27:*/		return 0x8214886C;
		  /* 8214886Ch */ case   28:  		/* add R11, R11, R10 */
		/* 8214886Ch case   28:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214886Ch case   28:*/		return 0x82148870;
		  /* 82148870h */ case   29:  		/* xor R11, R11, R9 */
		/* 82148870h case   29:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82148870h case   29:*/		return 0x82148874;
	}
	return 0x82148874;
} // Block from 821487FCh-82148874h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82148874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148874);
		  /* 82148874h */ case    0:  		/* rldicl R10, R11, 32, 32 */
		/* 82148874h case    0:*/		cpu::op::rldicl<0,32,32>(regs,&regs.R10,regs.R11);
		/* 82148874h case    0:*/		return 0x82148878;
		  /* 82148878h */ case    1:  		/* stw R10, <#[R3 + 164]> */
		/* 82148878h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x000000A4) );
		/* 82148878h case    1:*/		return 0x8214887C;
	}
	return 0x8214887C;
} // Block from 82148874h-8214887Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214887Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214887C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214887C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214887C);
		  /* 8214887Ch */ case    0:  		/* stw R11, <#[R3 + 168]> */
		/* 8214887Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000000A8) );
		/* 8214887Ch case    0:*/		return 0x82148880;
		  /* 82148880h */ case    1:  		/* b -751068 */
		/* 82148880h case    1:*/		return 0x820912A4;
		/* 82148880h case    1:*/		return 0x82148884;
		  /* 82148884h */ case    2:  		/* nop */
		/* 82148884h case    2:*/		cpu::op::nop();
		/* 82148884h case    2:*/		return 0x82148888;
	}
	return 0x82148888;
} // Block from 8214887Ch-82148888h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82148888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148888);
		  /* 82148888h */ case    0:  		/* mfspr R12, LR */
		/* 82148888h case    0:*/		regs.R12 = regs.LR;
		/* 82148888h case    0:*/		return 0x8214888C;
		  /* 8214888Ch */ case    1:  		/* bl -751184 */
		/* 8214888Ch case    1:*/		regs.LR = 0x82148890; return 0x8209123C;
		/* 8214888Ch case    1:*/		return 0x82148890;
		  /* 82148890h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82148890h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82148890h case    2:*/		return 0x82148894;
		  /* 82148894h */ case    3:  		/* mr R29, R3 */
		/* 82148894h case    3:*/		regs.R29 = regs.R3;
		/* 82148894h case    3:*/		return 0x82148898;
		  /* 82148898h */ case    4:  		/* mr R3, R4 */
		/* 82148898h case    4:*/		regs.R3 = regs.R4;
		/* 82148898h case    4:*/		return 0x8214889C;
		  /* 8214889Ch */ case    5:  		/* mr R31, R4 */
		/* 8214889Ch case    5:*/		regs.R31 = regs.R4;
		/* 8214889Ch case    5:*/		return 0x821488A0;
		  /* 821488A0h */ case    6:  		/* bl -10648 */
		/* 821488A0h case    6:*/		regs.LR = 0x821488A4; return 0x82145F08;
		/* 821488A0h case    6:*/		return 0x821488A4;
		  /* 821488A4h */ case    7:  		/* lis R10, -32253 */
		/* 821488A4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821488A4h case    7:*/		return 0x821488A8;
		  /* 821488A8h */ case    8:  		/* lis R11, -32253 */
		/* 821488A8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821488A8h case    8:*/		return 0x821488AC;
		  /* 821488ACh */ case    9:  		/* addi R21, R10, 26496 */
		/* 821488ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R10,0x6780);
		/* 821488ACh case    9:*/		return 0x821488B0;
		  /* 821488B0h */ case   10:  		/* addi R27, R11, 25840 */
		/* 821488B0h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x64F0);
		/* 821488B0h case   10:*/		return 0x821488B4;
		  /* 821488B4h */ case   11:  		/* mr R5, R21 */
		/* 821488B4h case   11:*/		regs.R5 = regs.R21;
		/* 821488B4h case   11:*/		return 0x821488B8;
		  /* 821488B8h */ case   12:  		/* mr R4, R27 */
		/* 821488B8h case   12:*/		regs.R4 = regs.R27;
		/* 821488B8h case   12:*/		return 0x821488BC;
		  /* 821488BCh */ case   13:  		/* mr R3, R31 */
		/* 821488BCh case   13:*/		regs.R3 = regs.R31;
		/* 821488BCh case   13:*/		return 0x821488C0;
	}
	return 0x821488C0;
} // Block from 82148888h-821488C0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821488C0h
// Function '?WriteDebugPrints@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAV?$FastVector@UDebugPrintInfo@XGRAPHICS@@@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821488C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821488C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821488C0);
		  /* 821488C0h */ case    0:  		/* bl -10768 */
		/* 821488C0h case    0:*/		regs.LR = 0x821488C4; return 0x82145EB0;
		/* 821488C0h case    0:*/		return 0x821488C4;
		  /* 821488C4h */ case    1:  		/* lwz R5, <#[R29 + 132]> */
		/* 821488C4h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000084) );
		/* 821488C4h case    1:*/		return 0x821488C8;
		  /* 821488C8h */ case    2:  		/* lis R11, -32253 */
		/* 821488C8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821488C8h case    2:*/		return 0x821488CC;
		  /* 821488CCh */ case    3:  		/* cmplwi CR6, R5, 0 */
		/* 821488CCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821488CCh case    3:*/		return 0x821488D0;
		  /* 821488D0h */ case    4:  		/* addi R22, R11, 26420 */
		/* 821488D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x6734);
		/* 821488D0h case    4:*/		return 0x821488D4;
		  /* 821488D4h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821488D4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821488E4;  }
		/* 821488D4h case    5:*/		return 0x821488D8;
		  /* 821488D8h */ case    6:  		/* mr R4, R22 */
		/* 821488D8h case    6:*/		regs.R4 = regs.R22;
		/* 821488D8h case    6:*/		return 0x821488DC;
		  /* 821488DCh */ case    7:  		/* mr R3, R31 */
		/* 821488DCh case    7:*/		regs.R3 = regs.R31;
		/* 821488DCh case    7:*/		return 0x821488E0;
		  /* 821488E0h */ case    8:  		/* bl -10264 */
		/* 821488E0h case    8:*/		regs.LR = 0x821488E4; return 0x821460C8;
		/* 821488E0h case    8:*/		return 0x821488E4;
	}
	return 0x821488E4;
} // Block from 821488C0h-821488E4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821488E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821488E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821488E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821488E4);
		  /* 821488E4h */ case    0:  		/* mr R3, R31 */
		/* 821488E4h case    0:*/		regs.R3 = regs.R31;
		/* 821488E4h case    0:*/		return 0x821488E8;
		  /* 821488E8h */ case    1:  		/* bl -7320 */
		/* 821488E8h case    1:*/		regs.LR = 0x821488EC; return 0x82146C50;
		/* 821488E8h case    1:*/		return 0x821488EC;
		  /* 821488ECh */ case    2:  		/* lis R11, -32253 */
		/* 821488ECh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821488ECh case    2:*/		return 0x821488F0;
		  /* 821488F0h */ case    3:  		/* addi R23, R11, 13508 */
		/* 821488F0h case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x34C4);
		/* 821488F0h case    3:*/		return 0x821488F4;
		  /* 821488F4h */ case    4:  		/* lwz R11, <#[R29 + 36]> */
		/* 821488F4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821488F4h case    4:*/		return 0x821488F8;
		  /* 821488F8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821488F8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821488F8h case    5:*/		return 0x821488FC;
		  /* 821488FCh */ case    6:  		/* bc 12, CR6_EQ, 244 */
		/* 821488FCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821489F0;  }
		/* 821488FCh case    6:*/		return 0x82148900;
		  /* 82148900h */ case    7:  		/* mr R3, R31 */
		/* 82148900h case    7:*/		regs.R3 = regs.R31;
		/* 82148900h case    7:*/		return 0x82148904;
		  /* 82148904h */ case    8:  		/* bl -10748 */
		/* 82148904h case    8:*/		regs.LR = 0x82148908; return 0x82145F08;
		/* 82148904h case    8:*/		return 0x82148908;
		  /* 82148908h */ case    9:  		/* lis R11, -32253 */
		/* 82148908h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82148908h case    9:*/		return 0x8214890C;
		  /* 8214890Ch */ case   10:  		/* mr R4, R27 */
		/* 8214890Ch case   10:*/		regs.R4 = regs.R27;
		/* 8214890Ch case   10:*/		return 0x82148910;
		  /* 82148910h */ case   11:  		/* addi R26, R11, 26488 */
		/* 82148910h case   11:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x6778);
		/* 82148910h case   11:*/		return 0x82148914;
		  /* 82148914h */ case   12:  		/* mr R3, R31 */
		/* 82148914h case   12:*/		regs.R3 = regs.R31;
		/* 82148914h case   12:*/		return 0x82148918;
		  /* 82148918h */ case   13:  		/* mr R5, R26 */
		/* 82148918h case   13:*/		regs.R5 = regs.R26;
		/* 82148918h case   13:*/		return 0x8214891C;
		  /* 8214891Ch */ case   14:  		/* bl -10860 */
		/* 8214891Ch case   14:*/		regs.LR = 0x82148920; return 0x82145EB0;
		/* 8214891Ch case   14:*/		return 0x82148920;
		  /* 82148920h */ case   15:  		/* mr R3, R31 */
		/* 82148920h case   15:*/		regs.R3 = regs.R31;
		/* 82148920h case   15:*/		return 0x82148924;
		  /* 82148924h */ case   16:  		/* bl -7380 */
		/* 82148924h case   16:*/		regs.LR = 0x82148928; return 0x82146C50;
		/* 82148924h case   16:*/		return 0x82148928;
		  /* 82148928h */ case   17:  		/* lwz R10, <#[R29 + 36]> */
		/* 82148928h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000024) );
		/* 82148928h case   17:*/		return 0x8214892C;
		  /* 8214892Ch */ case   18:  		/* lwz R11, <#[R29 + 32]> */
		/* 8214892Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000020) );
		/* 8214892Ch case   18:*/		return 0x82148930;
		  /* 82148930h */ case   19:  		/* addi R28, R29, 32 */
		/* 82148930h case   19:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x20);
		/* 82148930h case   19:*/		return 0x82148934;
		  /* 82148934h */ case   20:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82148934h case   20:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82148934h case   20:*/		return 0x82148938;
		  /* 82148938h */ case   21:  		/* mr R30, R11 */
		/* 82148938h case   21:*/		regs.R30 = regs.R11;
		/* 82148938h case   21:*/		return 0x8214893C;
		  /* 8214893Ch */ case   22:  		/* add R10, R10, R11 */
		/* 8214893Ch case   22:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8214893Ch case   22:*/		return 0x82148940;
		  /* 82148940h */ case   23:  		/* cmplw CR6, R11, R10 */
		/* 82148940h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82148940h case   23:*/		return 0x82148944;
		  /* 82148944h */ case   24:  		/* bc 4, CR6_LT, 160 */
		/* 82148944h case   24:*/		if ( !regs.CR[6].lt ) { return 0x821489E4;  }
		/* 82148944h case   24:*/		return 0x82148948;
		  /* 82148948h */ case   25:  		/* lis R10, -32256 */
		/* 82148948h case   25:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82148948h case   25:*/		return 0x8214894C;
		  /* 8214894Ch */ case   26:  		/* lis R11, -32255 */
		/* 8214894Ch case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8214894Ch case   26:*/		return 0x82148950;
		  /* 82148950h */ case   27:  		/* addi R24, R10, 4485 */
		/* 82148950h case   27:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0x1185);
		/* 82148950h case   27:*/		return 0x82148954;
		  /* 82148954h */ case   28:  		/* addi R25, R11, -10688 */
		/* 82148954h case   28:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFD640);
		/* 82148954h case   28:*/		return 0x82148958;
		  /* 82148958h */ case   29:  		/* mr R3, R31 */
		/* 82148958h case   29:*/		regs.R3 = regs.R31;
		/* 82148958h case   29:*/		return 0x8214895C;
		  /* 8214895Ch */ case   30:  		/* bl -10836 */
		/* 8214895Ch case   30:*/		regs.LR = 0x82148960; return 0x82145F08;
		/* 8214895Ch case   30:*/		return 0x82148960;
		  /* 82148960h */ case   31:  		/* mr R5, R25 */
		/* 82148960h case   31:*/		regs.R5 = regs.R25;
		/* 82148960h case   31:*/		return 0x82148964;
		  /* 82148964h */ case   32:  		/* mr R4, R27 */
		/* 82148964h case   32:*/		regs.R4 = regs.R27;
		/* 82148964h case   32:*/		return 0x82148968;
		  /* 82148968h */ case   33:  		/* mr R3, R31 */
		/* 82148968h case   33:*/		regs.R3 = regs.R31;
		/* 82148968h case   33:*/		return 0x8214896C;
		  /* 8214896Ch */ case   34:  		/* bl -10940 */
		/* 8214896Ch case   34:*/		regs.LR = 0x82148970; return 0x82145EB0;
		/* 8214896Ch case   34:*/		return 0x82148970;
		  /* 82148970h */ case   35:  		/* lwz R11, <#[R30]> */
		/* 82148970h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82148970h case   35:*/		return 0x82148974;
		  /* 82148974h */ case   36:  		/* cmpwi CR6, R11, -1 */
		/* 82148974h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82148974h case   36:*/		return 0x82148978;
		  /* 82148978h */ case   37:  		/* bc 4, CR6_EQ, 12 */
		/* 82148978h case   37:*/		if ( !regs.CR[6].eq ) { return 0x82148984;  }
		/* 82148978h case   37:*/		return 0x8214897C;
		  /* 8214897Ch */ case   38:  		/* mr R5, R24 */
		/* 8214897Ch case   38:*/		regs.R5 = regs.R24;
		/* 8214897Ch case   38:*/		return 0x82148980;
		  /* 82148980h */ case   39:  		/* b 12 */
		/* 82148980h case   39:*/		return 0x8214898C;
		/* 82148980h case   39:*/		return 0x82148984;
	}
	return 0x82148984;
} // Block from 821488E4h-82148984h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82148984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148984);
		  /* 82148984h */ case    0:  		/* lwz R10, <#[R29 + 44]> */
		/* 82148984h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000002C) );
		/* 82148984h case    0:*/		return 0x82148988;
		  /* 82148988h */ case    1:  		/* add R5, R10, R11 */
		/* 82148988h case    1:*/		cpu::op::add<0>(regs,&regs.R5,regs.R10,regs.R11);
		/* 82148988h case    1:*/		return 0x8214898C;
	}
	return 0x8214898C;
} // Block from 82148984h-8214898Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214898Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214898C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214898C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214898C);
		  /* 8214898Ch */ case    0:  		/* mr R4, R22 */
		/* 8214898Ch case    0:*/		regs.R4 = regs.R22;
		/* 8214898Ch case    0:*/		return 0x82148990;
		  /* 82148990h */ case    1:  		/* mr R3, R31 */
		/* 82148990h case    1:*/		regs.R3 = regs.R31;
		/* 82148990h case    1:*/		return 0x82148994;
		  /* 82148994h */ case    2:  		/* bl -10444 */
		/* 82148994h case    2:*/		regs.LR = 0x82148998; return 0x821460C8;
		/* 82148994h case    2:*/		return 0x82148998;
		  /* 82148998h */ case    3:  		/* lwz R11, <#[R30 + 4]> */
		/* 82148998h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82148998h case    3:*/		return 0x8214899C;
		  /* 8214899Ch */ case    4:  		/* cmpwi CR6, R11, -1 */
		/* 8214899Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8214899Ch case    4:*/		return 0x821489A0;
		  /* 821489A0h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 821489A0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821489AC;  }
		/* 821489A0h case    5:*/		return 0x821489A4;
		  /* 821489A4h */ case    6:  		/* mr R5, R24 */
		/* 821489A4h case    6:*/		regs.R5 = regs.R24;
		/* 821489A4h case    6:*/		return 0x821489A8;
		  /* 821489A8h */ case    7:  		/* b 12 */
		/* 821489A8h case    7:*/		return 0x821489B4;
		/* 821489A8h case    7:*/		return 0x821489AC;
	}
	return 0x821489AC;
} // Block from 8214898Ch-821489ACh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821489ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821489AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821489AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821489AC);
		  /* 821489ACh */ case    0:  		/* lwz R10, <#[R29 + 44]> */
		/* 821489ACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000002C) );
		/* 821489ACh case    0:*/		return 0x821489B0;
		  /* 821489B0h */ case    1:  		/* add R5, R10, R11 */
		/* 821489B0h case    1:*/		cpu::op::add<0>(regs,&regs.R5,regs.R10,regs.R11);
		/* 821489B0h case    1:*/		return 0x821489B4;
	}
	return 0x821489B4;
} // Block from 821489ACh-821489B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821489B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821489B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821489B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821489B4);
		  /* 821489B4h */ case    0:  		/* mr R4, R23 */
		/* 821489B4h case    0:*/		regs.R4 = regs.R23;
		/* 821489B4h case    0:*/		return 0x821489B8;
		  /* 821489B8h */ case    1:  		/* mr R3, R31 */
		/* 821489B8h case    1:*/		regs.R3 = regs.R31;
		/* 821489B8h case    1:*/		return 0x821489BC;
		  /* 821489BCh */ case    2:  		/* bl -10484 */
		/* 821489BCh case    2:*/		regs.LR = 0x821489C0; return 0x821460C8;
		/* 821489BCh case    2:*/		return 0x821489C0;
		  /* 821489C0h */ case    3:  		/* mr R3, R31 */
		/* 821489C0h case    3:*/		regs.R3 = regs.R31;
		/* 821489C0h case    3:*/		return 0x821489C4;
		  /* 821489C4h */ case    4:  		/* bl -7620 */
		/* 821489C4h case    4:*/		regs.LR = 0x821489C8; return 0x82146C00;
		/* 821489C4h case    4:*/		return 0x821489C8;
		  /* 821489C8h */ case    5:  		/* lwz R11, <#[R28 + 4]> */
		/* 821489C8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821489C8h case    5:*/		return 0x821489CC;
		  /* 821489CCh */ case    6:  		/* lwz R10, <#[R28]> */
		/* 821489CCh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821489CCh case    6:*/		return 0x821489D0;
		  /* 821489D0h */ case    7:  		/* addi R30, R30, 8 */
		/* 821489D0h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 821489D0h case    7:*/		return 0x821489D4;
		  /* 821489D4h */ case    8:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821489D4h case    8:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821489D4h case    8:*/		return 0x821489D8;
		  /* 821489D8h */ case    9:  		/* add R11, R11, R10 */
		/* 821489D8h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821489D8h case    9:*/		return 0x821489DC;
		  /* 821489DCh */ case   10:  		/* cmplw CR6, R30, R11 */
		/* 821489DCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821489DCh case   10:*/		return 0x821489E0;
		  /* 821489E0h */ case   11:  		/* bc 12, CR6_LT, -136 */
		/* 821489E0h case   11:*/		if ( regs.CR[6].lt ) { return 0x82148958;  }
		/* 821489E0h case   11:*/		return 0x821489E4;
	}
	return 0x821489E4;
} // Block from 821489B4h-821489E4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821489E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821489E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821489E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821489E4);
		  /* 821489E4h */ case    0:  		/* mr R4, R26 */
		/* 821489E4h case    0:*/		regs.R4 = regs.R26;
		/* 821489E4h case    0:*/		return 0x821489E8;
		  /* 821489E8h */ case    1:  		/* mr R3, R31 */
		/* 821489E8h case    1:*/		regs.R3 = regs.R31;
		/* 821489E8h case    1:*/		return 0x821489EC;
		  /* 821489ECh */ case    2:  		/* bl -10884 */
		/* 821489ECh case    2:*/		regs.LR = 0x821489F0; return 0x82145F68;
		/* 821489ECh case    2:*/		return 0x821489F0;
	}
	return 0x821489F0;
} // Block from 821489E4h-821489F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821489F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821489F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821489F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821489F0);
		  /* 821489F0h */ case    0:  		/* mr R3, R31 */
		/* 821489F0h case    0:*/		regs.R3 = regs.R31;
		/* 821489F0h case    0:*/		return 0x821489F4;
		  /* 821489F4h */ case    1:  		/* bl -10988 */
		/* 821489F4h case    1:*/		regs.LR = 0x821489F8; return 0x82145F08;
		/* 821489F4h case    1:*/		return 0x821489F8;
		  /* 821489F8h */ case    2:  		/* lis R11, -32253 */
		/* 821489F8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821489F8h case    2:*/		return 0x821489FC;
		  /* 821489FCh */ case    3:  		/* mr R4, R27 */
		/* 821489FCh case    3:*/		regs.R4 = regs.R27;
		/* 821489FCh case    3:*/		return 0x82148A00;
		  /* 82148A00h */ case    4:  		/* addi R26, R11, 26476 */
		/* 82148A00h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x676C);
		/* 82148A00h case    4:*/		return 0x82148A04;
		  /* 82148A04h */ case    5:  		/* mr R3, R31 */
		/* 82148A04h case    5:*/		regs.R3 = regs.R31;
		/* 82148A04h case    5:*/		return 0x82148A08;
		  /* 82148A08h */ case    6:  		/* mr R5, R26 */
		/* 82148A08h case    6:*/		regs.R5 = regs.R26;
		/* 82148A08h case    6:*/		return 0x82148A0C;
		  /* 82148A0Ch */ case    7:  		/* bl -11100 */
		/* 82148A0Ch case    7:*/		regs.LR = 0x82148A10; return 0x82145EB0;
		/* 82148A0Ch case    7:*/		return 0x82148A10;
		  /* 82148A10h */ case    8:  		/* mr R3, R31 */
		/* 82148A10h case    8:*/		regs.R3 = regs.R31;
		/* 82148A10h case    8:*/		return 0x82148A14;
		  /* 82148A14h */ case    9:  		/* bl -7620 */
		/* 82148A14h case    9:*/		regs.LR = 0x82148A18; return 0x82146C50;
		/* 82148A14h case    9:*/		return 0x82148A18;
		  /* 82148A18h */ case   10:  		/* addi R29, R29, 56 */
		/* 82148A18h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x38);
		/* 82148A18h case   10:*/		return 0x82148A1C;
		  /* 82148A1Ch */ case   11:  		/* lwz R11, <#[R29 + 4]> */
		/* 82148A1Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82148A1Ch case   11:*/		return 0x82148A20;
		  /* 82148A20h */ case   12:  		/* mulli R11, R11, 40 */
		/* 82148A20h case   12:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 82148A20h case   12:*/		return 0x82148A24;
		  /* 82148A24h */ case   13:  		/* lwz R30, <#[R29]> */
		/* 82148A24h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 82148A24h case   13:*/		return 0x82148A28;
		  /* 82148A28h */ case   14:  		/* add R11, R11, R30 */
		/* 82148A28h case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82148A28h case   14:*/		return 0x82148A2C;
		  /* 82148A2Ch */ case   15:  		/* cmplw CR6, R30, R11 */
		/* 82148A2Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82148A2Ch case   15:*/		return 0x82148A30;
		  /* 82148A30h */ case   16:  		/* bc 4, CR6_LT, 104 */
		/* 82148A30h case   16:*/		if ( !regs.CR[6].lt ) { return 0x82148A98;  }
		/* 82148A30h case   16:*/		return 0x82148A34;
		  /* 82148A34h */ case   17:  		/* lis R11, -32253 */
		/* 82148A34h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82148A34h case   17:*/		return 0x82148A38;
		  /* 82148A38h */ case   18:  		/* addi R28, R11, 26348 */
		/* 82148A38h case   18:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x66EC);
		/* 82148A38h case   18:*/		return 0x82148A3C;
		  /* 82148A3Ch */ case   19:  		/* mr R3, R31 */
		/* 82148A3Ch case   19:*/		regs.R3 = regs.R31;
		/* 82148A3Ch case   19:*/		return 0x82148A40;
		  /* 82148A40h */ case   20:  		/* bl -11064 */
		/* 82148A40h case   20:*/		regs.LR = 0x82148A44; return 0x82145F08;
		/* 82148A40h case   20:*/		return 0x82148A44;
		  /* 82148A44h */ case   21:  		/* mr R5, R28 */
		/* 82148A44h case   21:*/		regs.R5 = regs.R28;
		/* 82148A44h case   21:*/		return 0x82148A48;
		  /* 82148A48h */ case   22:  		/* mr R4, R27 */
		/* 82148A48h case   22:*/		regs.R4 = regs.R27;
		/* 82148A48h case   22:*/		return 0x82148A4C;
		  /* 82148A4Ch */ case   23:  		/* mr R3, R31 */
		/* 82148A4Ch case   23:*/		regs.R3 = regs.R31;
		/* 82148A4Ch case   23:*/		return 0x82148A50;
		  /* 82148A50h */ case   24:  		/* bl -11168 */
		/* 82148A50h case   24:*/		regs.LR = 0x82148A54; return 0x82145EB0;
		/* 82148A50h case   24:*/		return 0x82148A54;
		  /* 82148A54h */ case   25:  		/* mr R4, R22 */
		/* 82148A54h case   25:*/		regs.R4 = regs.R22;
		/* 82148A54h case   25:*/		return 0x82148A58;
		  /* 82148A58h */ case   26:  		/* mr R5, R30 */
		/* 82148A58h case   26:*/		regs.R5 = regs.R30;
		/* 82148A58h case   26:*/		return 0x82148A5C;
		  /* 82148A5Ch */ case   27:  		/* mr R3, R31 */
		/* 82148A5Ch case   27:*/		regs.R3 = regs.R31;
		/* 82148A5Ch case   27:*/		return 0x82148A60;
		  /* 82148A60h */ case   28:  		/* bl -10648 */
		/* 82148A60h case   28:*/		regs.LR = 0x82148A64; return 0x821460C8;
		/* 82148A60h case   28:*/		return 0x82148A64;
		  /* 82148A64h */ case   29:  		/* mr R4, R23 */
		/* 82148A64h case   29:*/		regs.R4 = regs.R23;
		/* 82148A64h case   29:*/		return 0x82148A68;
		  /* 82148A68h */ case   30:  		/* addi R5, R30, 32 */
		/* 82148A68h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0x20);
		/* 82148A68h case   30:*/		return 0x82148A6C;
		  /* 82148A6Ch */ case   31:  		/* mr R3, R31 */
		/* 82148A6Ch case   31:*/		regs.R3 = regs.R31;
		/* 82148A6Ch case   31:*/		return 0x82148A70;
		  /* 82148A70h */ case   32:  		/* bl -10664 */
		/* 82148A70h case   32:*/		regs.LR = 0x82148A74; return 0x821460C8;
		/* 82148A70h case   32:*/		return 0x82148A74;
		  /* 82148A74h */ case   33:  		/* mr R3, R31 */
		/* 82148A74h case   33:*/		regs.R3 = regs.R31;
		/* 82148A74h case   33:*/		return 0x82148A78;
		  /* 82148A78h */ case   34:  		/* bl -7800 */
		/* 82148A78h case   34:*/		regs.LR = 0x82148A7C; return 0x82146C00;
		/* 82148A78h case   34:*/		return 0x82148A7C;
		  /* 82148A7Ch */ case   35:  		/* lwz R11, <#[R29 + 4]> */
		/* 82148A7Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82148A7Ch case   35:*/		return 0x82148A80;
		  /* 82148A80h */ case   36:  		/* lwz R10, <#[R29]> */
		/* 82148A80h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82148A80h case   36:*/		return 0x82148A84;
		  /* 82148A84h */ case   37:  		/* addi R30, R30, 40 */
		/* 82148A84h case   37:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x28);
		/* 82148A84h case   37:*/		return 0x82148A88;
		  /* 82148A88h */ case   38:  		/* mulli R11, R11, 40 */
		/* 82148A88h case   38:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 82148A88h case   38:*/		return 0x82148A8C;
		  /* 82148A8Ch */ case   39:  		/* add R11, R11, R10 */
		/* 82148A8Ch case   39:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82148A8Ch case   39:*/		return 0x82148A90;
		  /* 82148A90h */ case   40:  		/* cmplw CR6, R30, R11 */
		/* 82148A90h case   40:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82148A90h case   40:*/		return 0x82148A94;
		  /* 82148A94h */ case   41:  		/* bc 12, CR6_LT, -88 */
		/* 82148A94h case   41:*/		if ( regs.CR[6].lt ) { return 0x82148A3C;  }
		/* 82148A94h case   41:*/		return 0x82148A98;
	}
	return 0x82148A98;
} // Block from 821489F0h-82148A98h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82148A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148A98);
		  /* 82148A98h */ case    0:  		/* mr R4, R26 */
		/* 82148A98h case    0:*/		regs.R4 = regs.R26;
		/* 82148A98h case    0:*/		return 0x82148A9C;
		  /* 82148A9Ch */ case    1:  		/* mr R3, R31 */
		/* 82148A9Ch case    1:*/		regs.R3 = regs.R31;
		/* 82148A9Ch case    1:*/		return 0x82148AA0;
		  /* 82148AA0h */ case    2:  		/* bl -11064 */
		/* 82148AA0h case    2:*/		regs.LR = 0x82148AA4; return 0x82145F68;
		/* 82148AA0h case    2:*/		return 0x82148AA4;
		  /* 82148AA4h */ case    3:  		/* mr R4, R21 */
		/* 82148AA4h case    3:*/		regs.R4 = regs.R21;
		/* 82148AA4h case    3:*/		return 0x82148AA8;
		  /* 82148AA8h */ case    4:  		/* mr R3, R31 */
		/* 82148AA8h case    4:*/		regs.R3 = regs.R31;
		/* 82148AA8h case    4:*/		return 0x82148AAC;
		  /* 82148AACh */ case    5:  		/* bl -11076 */
		/* 82148AACh case    5:*/		regs.LR = 0x82148AB0; return 0x82145F68;
		/* 82148AACh case    5:*/		return 0x82148AB0;
		  /* 82148AB0h */ case    6:  		/* addi R1, R1, 176 */
		/* 82148AB0h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82148AB0h case    6:*/		return 0x82148AB4;
		  /* 82148AB4h */ case    7:  		/* b -751656 */
		/* 82148AB4h case    7:*/		return 0x8209128C;
		/* 82148AB4h case    7:*/		return 0x82148AB8;
	}
	return 0x82148AB8;
} // Block from 82148A98h-82148AB8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82148AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148AB8);
		  /* 82148AB8h */ case    0:  		/* mfspr R12, LR */
		/* 82148AB8h case    0:*/		regs.R12 = regs.LR;
		/* 82148AB8h case    0:*/		return 0x82148ABC;
		  /* 82148ABCh */ case    1:  		/* bl -751756 */
		/* 82148ABCh case    1:*/		regs.LR = 0x82148AC0; return 0x82091230;
		/* 82148ABCh case    1:*/		return 0x82148AC0;
		  /* 82148AC0h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 82148AC0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82148AC0h case    2:*/		return 0x82148AC4;
		  /* 82148AC4h */ case    3:  		/* mr R21, R3 */
		/* 82148AC4h case    3:*/		regs.R21 = regs.R3;
		/* 82148AC4h case    3:*/		return 0x82148AC8;
		  /* 82148AC8h */ case    4:  		/* mr R3, R4 */
		/* 82148AC8h case    4:*/		regs.R3 = regs.R4;
		/* 82148AC8h case    4:*/		return 0x82148ACC;
		  /* 82148ACCh */ case    5:  		/* mr R31, R4 */
		/* 82148ACCh case    5:*/		regs.R31 = regs.R4;
		/* 82148ACCh case    5:*/		return 0x82148AD0;
		  /* 82148AD0h */ case    6:  		/* mr R27, R5 */
		/* 82148AD0h case    6:*/		regs.R27 = regs.R5;
		/* 82148AD0h case    6:*/		return 0x82148AD4;
		  /* 82148AD4h */ case    7:  		/* mr R30, R6 */
		/* 82148AD4h case    7:*/		regs.R30 = regs.R6;
		/* 82148AD4h case    7:*/		return 0x82148AD8;
		  /* 82148AD8h */ case    8:  		/* bl -11216 */
		/* 82148AD8h case    8:*/		regs.LR = 0x82148ADC; return 0x82145F08;
		/* 82148AD8h case    8:*/		return 0x82148ADC;
		  /* 82148ADCh */ case    9:  		/* lis R10, -32253 */
		/* 82148ADCh case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82148ADCh case    9:*/		return 0x82148AE0;
		  /* 82148AE0h */ case   10:  		/* lis R11, -32253 */
		/* 82148AE0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82148AE0h case   10:*/		return 0x82148AE4;
		  /* 82148AE4h */ case   11:  		/* addi R18, R10, 26504 */
		/* 82148AE4h case   11:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R10,0x6788);
		/* 82148AE4h case   11:*/		return 0x82148AE8;
		  /* 82148AE8h */ case   12:  		/* addi R22, R11, 25840 */
		/* 82148AE8h case   12:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x64F0);
		/* 82148AE8h case   12:*/		return 0x82148AEC;
		  /* 82148AECh */ case   13:  		/* mr R3, R31 */
		/* 82148AECh case   13:*/		regs.R3 = regs.R31;
		/* 82148AECh case   13:*/		return 0x82148AF0;
		  /* 82148AF0h */ case   14:  		/* mr R5, R18 */
		/* 82148AF0h case   14:*/		regs.R5 = regs.R18;
		/* 82148AF0h case   14:*/		return 0x82148AF4;
		  /* 82148AF4h */ case   15:  		/* mr R4, R22 */
		/* 82148AF4h case   15:*/		regs.R4 = regs.R22;
		/* 82148AF4h case   15:*/		return 0x82148AF8;
		  /* 82148AF8h */ case   16:  		/* bl -11336 */
		/* 82148AF8h case   16:*/		regs.LR = 0x82148AFC; return 0x82145EB0;
		/* 82148AF8h case   16:*/		return 0x82148AFC;
		  /* 82148AFCh */ case   17:  		/* mr R3, R31 */
		/* 82148AFCh case   17:*/		regs.R3 = regs.R31;
		/* 82148AFCh case   17:*/		return 0x82148B00;
		  /* 82148B00h */ case   18:  		/* bl -7856 */
		/* 82148B00h case   18:*/		regs.LR = 0x82148B04; return 0x82146C50;
		/* 82148B00h case   18:*/		return 0x82148B04;
		  /* 82148B04h */ case   19:  		/* mr R3, R30 */
		/* 82148B04h case   19:*/		regs.R3 = regs.R30;
		/* 82148B04h case   19:*/		return 0x82148B08;
		  /* 82148B08h */ case   20:  		/* bl -502056 */
		/* 82148B08h case   20:*/		regs.LR = 0x82148B0C; return 0x820CE1E0;
		/* 82148B08h case   20:*/		return 0x82148B0C;
		  /* 82148B0Ch */ case   21:  		/* mr R29, R3 */
		/* 82148B0Ch case   21:*/		regs.R29 = regs.R3;
		/* 82148B0Ch case   21:*/		return 0x82148B10;
		  /* 82148B10h */ case   22:  		/* lis R4, 9351 */
		/* 82148B10h case   22:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 82148B10h case   22:*/		return 0x82148B14;
		  /* 82148B14h */ case   23:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 82148B14h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 82148B14h case   23:*/		return 0x82148B18;
		  /* 82148B18h */ case   24:  		/* bl -788760 */
		/* 82148B18h case   24:*/		regs.LR = 0x82148B1C; return 0x82088200;
		/* 82148B18h case   24:*/		return 0x82148B1C;
		  /* 82148B1Ch */ case   25:  		/* or. R26, R3, R3 */
		/* 82148B1Ch case   25:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 82148B1Ch case   25:*/		return 0x82148B20;
		  /* 82148B20h */ case   26:  		/* bc 4, CR0_EQ, 20 */
		/* 82148B20h case   26:*/		if ( !regs.CR[0].eq ) { return 0x82148B34;  }
		/* 82148B20h case   26:*/		return 0x82148B24;
		  /* 82148B24h */ case   27:  		/* lis R11, -32761 */
		/* 82148B24h case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 82148B24h case   27:*/		return 0x82148B28;
		  /* 82148B28h */ case   28:  		/* ori R11, R11, 14 */
		/* 82148B28h case   28:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82148B28h case   28:*/		return 0x82148B2C;
		  /* 82148B2Ch */ case   29:  		/* stw R11, <#[R21 + 144]> */
		/* 82148B2Ch case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000090) );
		/* 82148B2Ch case   29:*/		return 0x82148B30;
		  /* 82148B30h */ case   30:  		/* b 324 */
		/* 82148B30h case   30:*/		return 0x82148C74;
		/* 82148B30h case   30:*/		return 0x82148B34;
	}
	return 0x82148B34;
} // Block from 82148AB8h-82148B34h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82148B34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148B34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148B34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148B34);
		  /* 82148B34h */ case    0:  		/* li R6, 0 */
		/* 82148B34h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82148B34h case    0:*/		return 0x82148B38;
		  /* 82148B38h */ case    1:  		/* mr R5, R29 */
		/* 82148B38h case    1:*/		regs.R5 = regs.R29;
		/* 82148B38h case    1:*/		return 0x82148B3C;
		  /* 82148B3Ch */ case    2:  		/* mr R4, R26 */
		/* 82148B3Ch case    2:*/		regs.R4 = regs.R26;
		/* 82148B3Ch case    2:*/		return 0x82148B40;
		  /* 82148B40h */ case    3:  		/* mr R3, R30 */
		/* 82148B40h case    3:*/		regs.R3 = regs.R30;
		/* 82148B40h case    3:*/		return 0x82148B44;
		  /* 82148B44h */ case    4:  		/* bl -501236 */
		/* 82148B44h case    4:*/		regs.LR = 0x82148B48; return 0x820CE550;
		/* 82148B44h case    4:*/		return 0x82148B48;
		  /* 82148B48h */ case    5:  		/* lwz R11, <#[R27 + 4]> */
		/* 82148B48h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82148B48h case    5:*/		return 0x82148B4C;
		  /* 82148B4Ch */ case    6:  		/* addi R19, R26, 8 */
		/* 82148B4Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R26,0x8);
		/* 82148B4Ch case    6:*/		return 0x82148B50;
		  /* 82148B50h */ case    7:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 82148B50h case    7:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 82148B50h case    7:*/		return 0x82148B54;
		  /* 82148B54h */ case    8:  		/* lwz R30, <#[R27]> */
		/* 82148B54h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 82148B54h case    8:*/		return 0x82148B58;
		  /* 82148B58h */ case    9:  		/* add R11, R11, R30 */
		/* 82148B58h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82148B58h case    9:*/		return 0x82148B5C;
		  /* 82148B5Ch */ case   10:  		/* cmplw CR6, R30, R11 */
		/* 82148B5Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82148B5Ch case   10:*/		return 0x82148B60;
		  /* 82148B60h */ case   11:  		/* bc 4, CR6_LT, 264 */
		/* 82148B60h case   11:*/		if ( !regs.CR[6].lt ) { return 0x82148C68;  }
		/* 82148B60h case   11:*/		return 0x82148B64;
		  /* 82148B64h */ case   12:  		/* lis R6, -32256 */
		/* 82148B64h case   12:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 82148B64h case   12:*/		return 0x82148B68;
		  /* 82148B68h */ case   13:  		/* lis R7, -32253 */
		/* 82148B68h case   13:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82148B68h case   13:*/		return 0x82148B6C;
		  /* 82148B6Ch */ case   14:  		/* lis R8, -32253 */
		/* 82148B6Ch case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82148B6Ch case   14:*/		return 0x82148B70;
		  /* 82148B70h */ case   15:  		/* lis R9, -32253 */
		/* 82148B70h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82148B70h case   15:*/		return 0x82148B74;
		  /* 82148B74h */ case   16:  		/* lis R10, -32253 */
		/* 82148B74h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82148B74h case   16:*/		return 0x82148B78;
		  /* 82148B78h */ case   17:  		/* lis R11, -32253 */
		/* 82148B78h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82148B78h case   17:*/		return 0x82148B7C;
		  /* 82148B7Ch */ case   18:  		/* addi R20, R6, 4485 */
		/* 82148B7Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R6,0x1185);
		/* 82148B7Ch case   18:*/		return 0x82148B80;
		  /* 82148B80h */ case   19:  		/* addi R29, R7, 25712 */
		/* 82148B80h case   19:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R7,0x6470);
		/* 82148B80h case   19:*/		return 0x82148B84;
		  /* 82148B84h */ case   20:  		/* addi R25, R8, 25900 */
		/* 82148B84h case   20:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R8,0x652C);
		/* 82148B84h case   20:*/		return 0x82148B88;
		  /* 82148B88h */ case   21:  		/* addi R24, R9, 9552 */
		/* 82148B88h case   21:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R9,0x2550);
		/* 82148B88h case   21:*/		return 0x82148B8C;
		  /* 82148B8Ch */ case   22:  		/* addi R23, R10, 25856 */
		/* 82148B8Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x6500);
		/* 82148B8Ch case   22:*/		return 0x82148B90;
		  /* 82148B90h */ case   23:  		/* addi R28, R11, 9540 */
		/* 82148B90h case   23:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x2544);
		/* 82148B90h case   23:*/		return 0x82148B94;
		  /* 82148B94h */ case   24:  		/* lwz R11, <#[R30]> */
		/* 82148B94h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82148B94h case   24:*/		return 0x82148B98;
		  /* 82148B98h */ case   25:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82148B98h case   25:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82148B98h case   25:*/		return 0x82148B9C;
		  /* 82148B9Ch */ case   26:  		/* bc 12, CR0_EQ, 176 */
		/* 82148B9Ch case   26:*/		if ( regs.CR[0].eq ) { return 0x82148C4C;  }
		/* 82148B9Ch case   26:*/		return 0x82148BA0;
		  /* 82148BA0h */ case   27:  		/* mr R3, R31 */
		/* 82148BA0h case   27:*/		regs.R3 = regs.R31;
		/* 82148BA0h case   27:*/		return 0x82148BA4;
		  /* 82148BA4h */ case   28:  		/* bl -11420 */
		/* 82148BA4h case   28:*/		regs.LR = 0x82148BA8; return 0x82145F08;
		/* 82148BA4h case   28:*/		return 0x82148BA8;
		  /* 82148BA8h */ case   29:  		/* mr R5, R28 */
		/* 82148BA8h case   29:*/		regs.R5 = regs.R28;
		/* 82148BA8h case   29:*/		return 0x82148BAC;
		  /* 82148BACh */ case   30:  		/* mr R4, R22 */
		/* 82148BACh case   30:*/		regs.R4 = regs.R22;
		/* 82148BACh case   30:*/		return 0x82148BB0;
		  /* 82148BB0h */ case   31:  		/* mr R3, R31 */
		/* 82148BB0h case   31:*/		regs.R3 = regs.R31;
		/* 82148BB0h case   31:*/		return 0x82148BB4;
		  /* 82148BB4h */ case   32:  		/* bl -11524 */
		/* 82148BB4h case   32:*/		regs.LR = 0x82148BB8; return 0x82145EB0;
		/* 82148BB4h case   32:*/		return 0x82148BB8;
		  /* 82148BB8h */ case   33:  		/* lwz R11, <#[R27]> */
		/* 82148BB8h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82148BB8h case   33:*/		return 0x82148BBC;
		  /* 82148BBCh */ case   34:  		/* mr R5, R23 */
		/* 82148BBCh case   34:*/		regs.R5 = regs.R23;
		/* 82148BBCh case   34:*/		return 0x82148BC0;
		  /* 82148BC0h */ case   35:  		/* subf R11, R11, R30 */
		/* 82148BC0h case   35:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82148BC0h case   35:*/		return 0x82148BC4;
		  /* 82148BC4h */ case   36:  		/* mr R4, R29 */
		/* 82148BC4h case   36:*/		regs.R4 = regs.R29;
		/* 82148BC4h case   36:*/		return 0x82148BC8;
		  /* 82148BC8h */ case   37:  		/* mr R3, R31 */
		/* 82148BC8h case   37:*/		regs.R3 = regs.R31;
		/* 82148BC8h case   37:*/		return 0x82148BCC;
		  /* 82148BCCh */ case   38:  		/* srawi R6, R11, 4 */
		/* 82148BCCh case   38:*/		cpu::op::srawi<0,4>(regs,&regs.R6,regs.R11);
		/* 82148BCCh case   38:*/		return 0x82148BD0;
		  /* 82148BD0h */ case   39:  		/* bl -11552 */
		/* 82148BD0h case   39:*/		regs.LR = 0x82148BD4; return 0x82145EB0;
		/* 82148BD0h case   39:*/		return 0x82148BD4;
		  /* 82148BD4h */ case   40:  		/* mr R5, R24 */
		/* 82148BD4h case   40:*/		regs.R5 = regs.R24;
		/* 82148BD4h case   40:*/		return 0x82148BD8;
		  /* 82148BD8h */ case   41:  		/* mr R4, R29 */
		/* 82148BD8h case   41:*/		regs.R4 = regs.R29;
		/* 82148BD8h case   41:*/		return 0x82148BDC;
		  /* 82148BDCh */ case   42:  		/* lwz R6, <#[R30 + 8]> */
		/* 82148BDCh case   42:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000008) );
		/* 82148BDCh case   42:*/		return 0x82148BE0;
		  /* 82148BE0h */ case   43:  		/* mr R3, R31 */
		/* 82148BE0h case   43:*/		regs.R3 = regs.R31;
		/* 82148BE0h case   43:*/		return 0x82148BE4;
		  /* 82148BE4h */ case   44:  		/* bl -11572 */
		/* 82148BE4h case   44:*/		regs.LR = 0x82148BE8; return 0x82145EB0;
		/* 82148BE4h case   44:*/		return 0x82148BE8;
		  /* 82148BE8h */ case   45:  		/* mr R5, R25 */
		/* 82148BE8h case   45:*/		regs.R5 = regs.R25;
		/* 82148BE8h case   45:*/		return 0x82148BEC;
		  /* 82148BECh */ case   46:  		/* mr R4, R29 */
		/* 82148BECh case   46:*/		regs.R4 = regs.R29;
		/* 82148BECh case   46:*/		return 0x82148BF0;
		  /* 82148BF0h */ case   47:  		/* lwz R6, <#[R30 + 12]> */
		/* 82148BF0h case   47:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x0000000C) );
		/* 82148BF0h case   47:*/		return 0x82148BF4;
		  /* 82148BF4h */ case   48:  		/* mr R3, R31 */
		/* 82148BF4h case   48:*/		regs.R3 = regs.R31;
		/* 82148BF4h case   48:*/		return 0x82148BF8;
		  /* 82148BF8h */ case   49:  		/* bl -11592 */
		/* 82148BF8h case   49:*/		regs.LR = 0x82148BFC; return 0x82145EB0;
		/* 82148BF8h case   49:*/		return 0x82148BFC;
		  /* 82148BFCh */ case   50:  		/* mr R3, R31 */
		/* 82148BFCh case   50:*/		regs.R3 = regs.R31;
		/* 82148BFCh case   50:*/		return 0x82148C00;
		  /* 82148C00h */ case   51:  		/* bl -8112 */
		/* 82148C00h case   51:*/		regs.LR = 0x82148C04; return 0x82146C50;
		/* 82148C00h case   51:*/		return 0x82148C04;
		  /* 82148C04h */ case   52:  		/* lwz R11, <#[R30]> */
		/* 82148C04h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82148C04h case   52:*/		return 0x82148C08;
		  /* 82148C08h */ case   53:  		/* rlwinm R11, R11, 0, 1, 31 */
		/* 82148C08h case   53:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R11,regs.R11);
		/* 82148C08h case   53:*/		return 0x82148C0C;
		  /* 82148C0Ch */ case   54:  		/* cmpwi CR6, R11, -1 */
		/* 82148C0Ch case   54:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82148C0Ch case   54:*/		return 0x82148C10;
		  /* 82148C10h */ case   55:  		/* bc 4, CR6_EQ, 12 */
		/* 82148C10h case   55:*/		if ( !regs.CR[6].eq ) { return 0x82148C1C;  }
		/* 82148C10h case   55:*/		return 0x82148C14;
		  /* 82148C14h */ case   56:  		/* mr R7, R20 */
		/* 82148C14h case   56:*/		regs.R7 = regs.R20;
		/* 82148C14h case   56:*/		return 0x82148C18;
		  /* 82148C18h */ case   57:  		/* b 12 */
		/* 82148C18h case   57:*/		return 0x82148C24;
		/* 82148C18h case   57:*/		return 0x82148C1C;
	}
	return 0x82148C1C;
} // Block from 82148B34h-82148C1Ch (58 instructions)

//////////////////////////////////////////////////////
// Block at 82148C1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148C1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148C1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148C1C);
		  /* 82148C1Ch */ case    0:  		/* lwz R10, <#[R21 + 44]> */
		/* 82148C1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x0000002C) );
		/* 82148C1Ch case    0:*/		return 0x82148C20;
		  /* 82148C20h */ case    1:  		/* add R7, R10, R11 */
		/* 82148C20h case    1:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R11);
		/* 82148C20h case    1:*/		return 0x82148C24;
	}
	return 0x82148C24;
} // Block from 82148C1Ch-82148C24h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82148C24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148C24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148C24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148C24);
		  /* 82148C24h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82148C24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82148C24h case    0:*/		return 0x82148C28;
		  /* 82148C28h */ case    1:  		/* mr R5, R19 */
		/* 82148C28h case    1:*/		regs.R5 = regs.R19;
		/* 82148C28h case    1:*/		return 0x82148C2C;
		  /* 82148C2Ch */ case    2:  		/* mr R4, R31 */
		/* 82148C2Ch case    2:*/		regs.R4 = regs.R31;
		/* 82148C2Ch case    2:*/		return 0x82148C30;
		  /* 82148C30h */ case    3:  		/* add R11, R11, R26 */
		/* 82148C30h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 82148C30h case    3:*/		return 0x82148C34;
		  /* 82148C34h */ case    4:  		/* mr R3, R21 */
		/* 82148C34h case    4:*/		regs.R3 = regs.R21;
		/* 82148C34h case    4:*/		return 0x82148C38;
		  /* 82148C38h */ case    5:  		/* addi R6, R11, 8 */
		/* 82148C38h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x8);
		/* 82148C38h case    5:*/		return 0x82148C3C;
		  /* 82148C3Ch */ case    6:  		/* bl -2540 */
		/* 82148C3Ch case    6:*/		regs.LR = 0x82148C40; return 0x82148250;
		/* 82148C3Ch case    6:*/		return 0x82148C40;
		  /* 82148C40h */ case    7:  		/* mr R4, R28 */
		/* 82148C40h case    7:*/		regs.R4 = regs.R28;
		/* 82148C40h case    7:*/		return 0x82148C44;
		  /* 82148C44h */ case    8:  		/* mr R3, R31 */
		/* 82148C44h case    8:*/		regs.R3 = regs.R31;
		/* 82148C44h case    8:*/		return 0x82148C48;
		  /* 82148C48h */ case    9:  		/* bl -11488 */
		/* 82148C48h case    9:*/		regs.LR = 0x82148C4C; return 0x82145F68;
		/* 82148C48h case    9:*/		return 0x82148C4C;
	}
	return 0x82148C4C;
} // Block from 82148C24h-82148C4Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 82148C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148C4C);
		  /* 82148C4Ch */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 82148C4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82148C4Ch case    0:*/		return 0x82148C50;
		  /* 82148C50h */ case    1:  		/* addi R30, R30, 16 */
		/* 82148C50h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x10);
		/* 82148C50h case    1:*/		return 0x82148C54;
		  /* 82148C54h */ case    2:  		/* lwz R10, <#[R27]> */
		/* 82148C54h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 82148C54h case    2:*/		return 0x82148C58;
		  /* 82148C58h */ case    3:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 82148C58h case    3:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 82148C58h case    3:*/		return 0x82148C5C;
		  /* 82148C5Ch */ case    4:  		/* add R11, R11, R10 */
		/* 82148C5Ch case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82148C5Ch case    4:*/		return 0x82148C60;
		  /* 82148C60h */ case    5:  		/* cmplw CR6, R30, R11 */
		/* 82148C60h case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82148C60h case    5:*/		return 0x82148C64;
		  /* 82148C64h */ case    6:  		/* bc 12, CR6_LT, -208 */
		/* 82148C64h case    6:*/		if ( regs.CR[6].lt ) { return 0x82148B94;  }
		/* 82148C64h case    6:*/		return 0x82148C68;
	}
	return 0x82148C68;
} // Block from 82148C4Ch-82148C68h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82148C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148C68);
		  /* 82148C68h */ case    0:  		/* lis R4, 9351 */
		/* 82148C68h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 82148C68h case    0:*/		return 0x82148C6C;
		  /* 82148C6Ch */ case    1:  		/* mr R3, R26 */
		/* 82148C6Ch case    1:*/		regs.R3 = regs.R26;
		/* 82148C6Ch case    1:*/		return 0x82148C70;
		  /* 82148C70h */ case    2:  		/* bl -788792 */
		/* 82148C70h case    2:*/		regs.LR = 0x82148C74; return 0x82088338;
		/* 82148C70h case    2:*/		return 0x82148C74;
	}
	return 0x82148C74;
} // Block from 82148C68h-82148C74h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82148C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148C74);
		  /* 82148C74h */ case    0:  		/* mr R4, R18 */
		/* 82148C74h case    0:*/		regs.R4 = regs.R18;
		/* 82148C74h case    0:*/		return 0x82148C78;
		  /* 82148C78h */ case    1:  		/* mr R3, R31 */
		/* 82148C78h case    1:*/		regs.R3 = regs.R31;
		/* 82148C78h case    1:*/		return 0x82148C7C;
		  /* 82148C7Ch */ case    2:  		/* bl -11540 */
		/* 82148C7Ch case    2:*/		regs.LR = 0x82148C80; return 0x82145F68;
		/* 82148C7Ch case    2:*/		return 0x82148C80;
		  /* 82148C80h */ case    3:  		/* addi R1, R1, 208 */
		/* 82148C80h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 82148C80h case    3:*/		return 0x82148C84;
		  /* 82148C84h */ case    4:  		/* b -752132 */
		/* 82148C84h case    4:*/		return 0x82091280;
		/* 82148C84h case    4:*/		return 0x82148C88;
	}
	return 0x82148C88;
} // Block from 82148C74h-82148C88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82148C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148C88);
		  /* 82148C88h */ case    0:  		/* mfspr R12, LR */
		/* 82148C88h case    0:*/		regs.R12 = regs.LR;
		/* 82148C88h case    0:*/		return 0x82148C8C;
		  /* 82148C8Ch */ case    1:  		/* bl -752220 */
		/* 82148C8Ch case    1:*/		regs.LR = 0x82148C90; return 0x82091230;
		/* 82148C8Ch case    1:*/		return 0x82148C90;
		  /* 82148C90h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 82148C90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82148C90h case    2:*/		return 0x82148C94;
		  /* 82148C94h */ case    3:  		/* mr R18, R3 */
		/* 82148C94h case    3:*/		regs.R18 = regs.R3;
		/* 82148C94h case    3:*/		return 0x82148C98;
		  /* 82148C98h */ case    4:  		/* mr R3, R4 */
		/* 82148C98h case    4:*/		regs.R3 = regs.R4;
		/* 82148C98h case    4:*/		return 0x82148C9C;
		  /* 82148C9Ch */ case    5:  		/* mr R31, R4 */
		/* 82148C9Ch case    5:*/		regs.R31 = regs.R4;
		/* 82148C9Ch case    5:*/		return 0x82148CA0;
		  /* 82148CA0h */ case    6:  		/* mr R26, R5 */
		/* 82148CA0h case    6:*/		regs.R26 = regs.R5;
		/* 82148CA0h case    6:*/		return 0x82148CA4;
		  /* 82148CA4h */ case    7:  		/* bl -11676 */
		/* 82148CA4h case    7:*/		regs.LR = 0x82148CA8; return 0x82145F08;
		/* 82148CA4h case    7:*/		return 0x82148CA8;
		  /* 82148CA8h */ case    8:  		/* lis R10, -32253 */
		/* 82148CA8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82148CA8h case    8:*/		return 0x82148CAC;
		  /* 82148CACh */ case    9:  		/* lis R11, -32253 */
		/* 82148CACh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82148CACh case    9:*/		return 0x82148CB0;
		  /* 82148CB0h */ case   10:  		/* addi R19, R10, 26536 */
		/* 82148CB0h case   10:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R10,0x67A8);
		/* 82148CB0h case   10:*/		return 0x82148CB4;
		  /* 82148CB4h */ case   11:  		/* addi R24, R11, 25840 */
		/* 82148CB4h case   11:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x64F0);
		/* 82148CB4h case   11:*/		return 0x82148CB8;
		  /* 82148CB8h */ case   12:  		/* mr R3, R31 */
		/* 82148CB8h case   12:*/		regs.R3 = regs.R31;
		/* 82148CB8h case   12:*/		return 0x82148CBC;
		  /* 82148CBCh */ case   13:  		/* mr R5, R19 */
		/* 82148CBCh case   13:*/		regs.R5 = regs.R19;
		/* 82148CBCh case   13:*/		return 0x82148CC0;
	}
	return 0x82148CC0;
} // Block from 82148C88h-82148CC0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82148CC0h
// Function '?WriteTypeInfo@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAU_D3DXSHADER_CONSTANTTABLE@@PAU_D3DXSHADER_TYPEINFO@@PBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148CC0);
		  /* 82148CC0h */ case    0:  		/* mr R4, R24 */
		/* 82148CC0h case    0:*/		regs.R4 = regs.R24;
		/* 82148CC0h case    0:*/		return 0x82148CC4;
		  /* 82148CC4h */ case    1:  		/* bl -11796 */
		/* 82148CC4h case    1:*/		regs.LR = 0x82148CC8; return 0x82145EB0;
		/* 82148CC4h case    1:*/		return 0x82148CC8;
		  /* 82148CC8h */ case    2:  		/* mr R3, R31 */
		/* 82148CC8h case    2:*/		regs.R3 = regs.R31;
		/* 82148CC8h case    2:*/		return 0x82148CCC;
		  /* 82148CCCh */ case    3:  		/* bl -8316 */
		/* 82148CCCh case    3:*/		regs.LR = 0x82148CD0; return 0x82146C50;
		/* 82148CCCh case    3:*/		return 0x82148CD0;
		  /* 82148CD0h */ case    4:  		/* lwz R10, <#[R26 + 4]> */
		/* 82148CD0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000004) );
		/* 82148CD0h case    4:*/		return 0x82148CD4;
		  /* 82148CD4h */ case    5:  		/* lwz R11, <#[R26]> */
		/* 82148CD4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82148CD4h case    5:*/		return 0x82148CD8;
		  /* 82148CD8h */ case    6:  		/* mulli R10, R10, 20 */
		/* 82148CD8h case    6:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x14);
		/* 82148CD8h case    6:*/		return 0x82148CDC;
		  /* 82148CDCh */ case    7:  		/* add R10, R10, R11 */
		/* 82148CDCh case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82148CDCh case    7:*/		return 0x82148CE0;
		  /* 82148CE0h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 82148CE0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82148CE0h case    8:*/		return 0x82148CE4;
		  /* 82148CE4h */ case    9:  		/* bc 4, CR6_LT, 332 */
		/* 82148CE4h case    9:*/		if ( !regs.CR[6].lt ) { return 0x82148E30;  }
		/* 82148CE4h case    9:*/		return 0x82148CE8;
		  /* 82148CE8h */ case   10:  		/* addi R30, R11, 8 */
		/* 82148CE8h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x8);
		/* 82148CE8h case   10:*/		return 0x82148CEC;
		  /* 82148CECh */ case   11:  		/* lis R5, -32256 */
		/* 82148CECh case   11:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8200);
		/* 82148CECh case   11:*/		return 0x82148CF0;
		  /* 82148CF0h */ case   12:  		/* lis R6, -32253 */
		/* 82148CF0h case   12:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 82148CF0h case   12:*/		return 0x82148CF4;
		  /* 82148CF4h */ case   13:  		/* lis R7, -32253 */
		/* 82148CF4h case   13:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82148CF4h case   13:*/		return 0x82148CF8;
		  /* 82148CF8h */ case   14:  		/* lis R8, -32253 */
		/* 82148CF8h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82148CF8h case   14:*/		return 0x82148CFC;
		  /* 82148CFCh */ case   15:  		/* lis R9, -32253 */
		/* 82148CFCh case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82148CFCh case   15:*/		return 0x82148D00;
		  /* 82148D00h */ case   16:  		/* lis R10, -32253 */
		/* 82148D00h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82148D00h case   16:*/		return 0x82148D04;
		  /* 82148D04h */ case   17:  		/* lis R11, -32253 */
		/* 82148D04h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82148D04h case   17:*/		return 0x82148D08;
		  /* 82148D08h */ case   18:  		/* addi R20, R5, 4485 */
		/* 82148D08h case   18:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R5,0x1185);
		/* 82148D08h case   18:*/		return 0x82148D0C;
		  /* 82148D0Ch */ case   19:  		/* addi R28, R6, 25712 */
		/* 82148D0Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R6,0x6470);
		/* 82148D0Ch case   19:*/		return 0x82148D10;
		  /* 82148D10h */ case   20:  		/* addi R23, R7, 26524 */
		/* 82148D10h case   20:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R7,0x679C);
		/* 82148D10h case   20:*/		return 0x82148D14;
		  /* 82148D14h */ case   21:  		/* addi R22, R8, 26516 */
		/* 82148D14h case   21:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R8,0x6794);
		/* 82148D14h case   21:*/		return 0x82148D18;
		  /* 82148D18h */ case   22:  		/* addi R21, R9, 26420 */
		/* 82148D18h case   22:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R9,0x6734);
		/* 82148D18h case   22:*/		return 0x82148D1C;
		  /* 82148D1Ch */ case   23:  		/* addi R27, R10, 25856 */
		/* 82148D1Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x6500);
		/* 82148D1Ch case   23:*/		return 0x82148D20;
		  /* 82148D20h */ case   24:  		/* addi R25, R11, 9552 */
		/* 82148D20h case   24:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x2550);
		/* 82148D20h case   24:*/		return 0x82148D24;
		  /* 82148D24h */ case   25:  		/* mr R3, R31 */
		/* 82148D24h case   25:*/		regs.R3 = regs.R31;
		/* 82148D24h case   25:*/		return 0x82148D28;
		  /* 82148D28h */ case   26:  		/* bl -11808 */
		/* 82148D28h case   26:*/		regs.LR = 0x82148D2C; return 0x82145F08;
		/* 82148D28h case   26:*/		return 0x82148D2C;
		  /* 82148D2Ch */ case   27:  		/* mr R5, R25 */
		/* 82148D2Ch case   27:*/		regs.R5 = regs.R25;
		/* 82148D2Ch case   27:*/		return 0x82148D30;
		  /* 82148D30h */ case   28:  		/* mr R4, R24 */
		/* 82148D30h case   28:*/		regs.R4 = regs.R24;
		/* 82148D30h case   28:*/		return 0x82148D34;
		  /* 82148D34h */ case   29:  		/* mr R3, R31 */
		/* 82148D34h case   29:*/		regs.R3 = regs.R31;
		/* 82148D34h case   29:*/		return 0x82148D38;
		  /* 82148D38h */ case   30:  		/* bl -11912 */
		/* 82148D38h case   30:*/		regs.LR = 0x82148D3C; return 0x82145EB0;
		/* 82148D38h case   30:*/		return 0x82148D3C;
		  /* 82148D3Ch */ case   31:  		/* lwz R9, <#[R26]> */
		/* 82148D3Ch case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000000) );
		/* 82148D3Ch case   31:*/		return 0x82148D40;
		  /* 82148D40h */ case   32:  		/* addi R11, R30, -8 */
		/* 82148D40h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF8);
		/* 82148D40h case   32:*/		return 0x82148D44;
		  /* 82148D44h */ case   33:  		/* li R10, 20 */
		/* 82148D44h case   33:*/		cpu::op::li<0>(regs,&regs.R10,0x14);
		/* 82148D44h case   33:*/		return 0x82148D48;
		  /* 82148D48h */ case   34:  		/* subf R11, R9, R11 */
		/* 82148D48h case   34:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82148D48h case   34:*/		return 0x82148D4C;
		  /* 82148D4Ch */ case   35:  		/* mr R5, R27 */
		/* 82148D4Ch case   35:*/		regs.R5 = regs.R27;
		/* 82148D4Ch case   35:*/		return 0x82148D50;
		  /* 82148D50h */ case   36:  		/* mr R4, R28 */
		/* 82148D50h case   36:*/		regs.R4 = regs.R28;
		/* 82148D50h case   36:*/		return 0x82148D54;
		  /* 82148D54h */ case   37:  		/* mr R3, R31 */
		/* 82148D54h case   37:*/		regs.R3 = regs.R31;
		/* 82148D54h case   37:*/		return 0x82148D58;
		  /* 82148D58h */ case   38:  		/* divw R6, R11, R10 */
		/* 82148D58h case   38:*/		cpu::op::divw<0>(regs,&regs.R6,regs.R11,regs.R10);
		/* 82148D58h case   38:*/		return 0x82148D5C;
		  /* 82148D5Ch */ case   39:  		/* bl -11948 */
		/* 82148D5Ch case   39:*/		regs.LR = 0x82148D60; return 0x82145EB0;
		/* 82148D5Ch case   39:*/		return 0x82148D60;
		  /* 82148D60h */ case   40:  		/* lwz R11, <#[R30 - 8]> */
		/* 82148D60h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 82148D60h case   40:*/		return 0x82148D64;
		  /* 82148D64h */ case   41:  		/* cmpwi CR6, R11, -1 */
		/* 82148D64h case   41:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82148D64h case   41:*/		return 0x82148D68;
		  /* 82148D68h */ case   42:  		/* bc 4, CR6_EQ, 12 */
		/* 82148D68h case   42:*/		if ( !regs.CR[6].eq ) { return 0x82148D74;  }
		/* 82148D68h case   42:*/		return 0x82148D6C;
		  /* 82148D6Ch */ case   43:  		/* mr R5, R20 */
		/* 82148D6Ch case   43:*/		regs.R5 = regs.R20;
		/* 82148D6Ch case   43:*/		return 0x82148D70;
		  /* 82148D70h */ case   44:  		/* b 12 */
		/* 82148D70h case   44:*/		return 0x82148D7C;
		/* 82148D70h case   44:*/		return 0x82148D74;
	}
	return 0x82148D74;
} // Block from 82148CC0h-82148D74h (45 instructions)

//////////////////////////////////////////////////////
// Block at 82148D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148D74);
		  /* 82148D74h */ case    0:  		/* lwz R10, <#[R18 + 44]> */
		/* 82148D74h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x0000002C) );
		/* 82148D74h case    0:*/		return 0x82148D78;
		  /* 82148D78h */ case    1:  		/* add R5, R10, R11 */
		/* 82148D78h case    1:*/		cpu::op::add<0>(regs,&regs.R5,regs.R10,regs.R11);
		/* 82148D78h case    1:*/		return 0x82148D7C;
	}
	return 0x82148D7C;
} // Block from 82148D74h-82148D7Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82148D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148D7C);
		  /* 82148D7Ch */ case    0:  		/* mr R4, R21 */
		/* 82148D7Ch case    0:*/		regs.R4 = regs.R21;
		/* 82148D7Ch case    0:*/		return 0x82148D80;
		  /* 82148D80h */ case    1:  		/* mr R3, R31 */
		/* 82148D80h case    1:*/		regs.R3 = regs.R31;
		/* 82148D80h case    1:*/		return 0x82148D84;
		  /* 82148D84h */ case    2:  		/* bl -11452 */
		/* 82148D84h case    2:*/		regs.LR = 0x82148D88; return 0x821460C8;
		/* 82148D84h case    2:*/		return 0x82148D88;
		  /* 82148D88h */ case    3:  		/* mr R5, R22 */
		/* 82148D88h case    3:*/		regs.R5 = regs.R22;
		/* 82148D88h case    3:*/		return 0x82148D8C;
		  /* 82148D8Ch */ case    4:  		/* mr R4, R28 */
		/* 82148D8Ch case    4:*/		regs.R4 = regs.R28;
		/* 82148D8Ch case    4:*/		return 0x82148D90;
		  /* 82148D90h */ case    5:  		/* lwz R6, <#[R30 - 4]> */
		/* 82148D90h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 82148D90h case    5:*/		return 0x82148D94;
		  /* 82148D94h */ case    6:  		/* mr R3, R31 */
		/* 82148D94h case    6:*/		regs.R3 = regs.R31;
		/* 82148D94h case    6:*/		return 0x82148D98;
		  /* 82148D98h */ case    7:  		/* bl -12008 */
		/* 82148D98h case    7:*/		regs.LR = 0x82148D9C; return 0x82145EB0;
		/* 82148D98h case    7:*/		return 0x82148D9C;
		  /* 82148D9Ch */ case    8:  		/* mr R3, R31 */
		/* 82148D9Ch case    8:*/		regs.R3 = regs.R31;
		/* 82148D9Ch case    8:*/		return 0x82148DA0;
		  /* 82148DA0h */ case    9:  		/* bl -8528 */
		/* 82148DA0h case    9:*/		regs.LR = 0x82148DA4; return 0x82146C50;
		/* 82148DA0h case    9:*/		return 0x82148DA4;
		  /* 82148DA4h */ case   10:  		/* lwz R11, <#[R30 + 4]> */
		/* 82148DA4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82148DA4h case   10:*/		return 0x82148DA8;
		  /* 82148DA8h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82148DA8h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82148DA8h case   11:*/		return 0x82148DAC;
		  /* 82148DACh */ case   12:  		/* lwz R29, <#[R30]> */
		/* 82148DACh case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000000) );
		/* 82148DACh case   12:*/		return 0x82148DB0;
		  /* 82148DB0h */ case   13:  		/* add R11, R11, R29 */
		/* 82148DB0h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82148DB0h case   13:*/		return 0x82148DB4;
		  /* 82148DB4h */ case   14:  		/* b 72 */
		/* 82148DB4h case   14:*/		return 0x82148DFC;
		/* 82148DB4h case   14:*/		return 0x82148DB8;
		  /* 82148DB8h */ case   15:  		/* bl -11952 */
		/* 82148DB8h case   15:*/		regs.LR = 0x82148DBC; return 0x82145F08;
		/* 82148DB8h case   15:*/		return 0x82148DBC;
		  /* 82148DBCh */ case   16:  		/* mr R5, R23 */
		/* 82148DBCh case   16:*/		regs.R5 = regs.R23;
		/* 82148DBCh case   16:*/		return 0x82148DC0;
		  /* 82148DC0h */ case   17:  		/* mr R4, R24 */
		/* 82148DC0h case   17:*/		regs.R4 = regs.R24;
		/* 82148DC0h case   17:*/		return 0x82148DC4;
		  /* 82148DC4h */ case   18:  		/* mr R3, R31 */
		/* 82148DC4h case   18:*/		regs.R3 = regs.R31;
		/* 82148DC4h case   18:*/		return 0x82148DC8;
		  /* 82148DC8h */ case   19:  		/* bl -12056 */
		/* 82148DC8h case   19:*/		regs.LR = 0x82148DCC; return 0x82145EB0;
		/* 82148DC8h case   19:*/		return 0x82148DCC;
		  /* 82148DCCh */ case   20:  		/* mr R5, R27 */
		/* 82148DCCh case   20:*/		regs.R5 = regs.R27;
		/* 82148DCCh case   20:*/		return 0x82148DD0;
		  /* 82148DD0h */ case   21:  		/* mr R4, R28 */
		/* 82148DD0h case   21:*/		regs.R4 = regs.R28;
		/* 82148DD0h case   21:*/		return 0x82148DD4;
		  /* 82148DD4h */ case   22:  		/* lwz R6, <#[R29]> */
		/* 82148DD4h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000000) );
		/* 82148DD4h case   22:*/		return 0x82148DD8;
		  /* 82148DD8h */ case   23:  		/* mr R3, R31 */
		/* 82148DD8h case   23:*/		regs.R3 = regs.R31;
		/* 82148DD8h case   23:*/		return 0x82148DDC;
		  /* 82148DDCh */ case   24:  		/* bl -12076 */
		/* 82148DDCh case   24:*/		regs.LR = 0x82148DE0; return 0x82145EB0;
		/* 82148DDCh case   24:*/		return 0x82148DE0;
		  /* 82148DE0h */ case   25:  		/* mr R3, R31 */
		/* 82148DE0h case   25:*/		regs.R3 = regs.R31;
		/* 82148DE0h case   25:*/		return 0x82148DE4;
		  /* 82148DE4h */ case   26:  		/* bl -8676 */
		/* 82148DE4h case   26:*/		regs.LR = 0x82148DE8; return 0x82146C00;
		/* 82148DE4h case   26:*/		return 0x82148DE8;
		  /* 82148DE8h */ case   27:  		/* lwz R11, <#[R30 + 4]> */
		/* 82148DE8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82148DE8h case   27:*/		return 0x82148DEC;
		  /* 82148DECh */ case   28:  		/* lwz R10, <#[R30]> */
		/* 82148DECh case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82148DECh case   28:*/		return 0x82148DF0;
		  /* 82148DF0h */ case   29:  		/* addi R29, R29, 4 */
		/* 82148DF0h case   29:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82148DF0h case   29:*/		return 0x82148DF4;
		  /* 82148DF4h */ case   30:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82148DF4h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82148DF4h case   30:*/		return 0x82148DF8;
		  /* 82148DF8h */ case   31:  		/* add R11, R11, R10 */
		/* 82148DF8h case   31:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82148DF8h case   31:*/		return 0x82148DFC;
	}
	return 0x82148DFC;
} // Block from 82148D7Ch-82148DFCh (32 instructions)

//////////////////////////////////////////////////////
// Block at 82148DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148DFC);
		  /* 82148DFCh */ case    0:  		/* cmplw CR6, R29, R11 */
		/* 82148DFCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82148DFCh case    0:*/		return 0x82148E00;
		  /* 82148E00h */ case    1:  		/* mr R3, R31 */
		/* 82148E00h case    1:*/		regs.R3 = regs.R31;
		/* 82148E00h case    1:*/		return 0x82148E04;
		  /* 82148E04h */ case    2:  		/* bc 12, CR6_LT, -76 */
		/* 82148E04h case    2:*/		if ( regs.CR[6].lt ) { return 0x82148DB8;  }
		/* 82148E04h case    2:*/		return 0x82148E08;
		  /* 82148E08h */ case    3:  		/* mr R4, R25 */
		/* 82148E08h case    3:*/		regs.R4 = regs.R25;
		/* 82148E08h case    3:*/		return 0x82148E0C;
		  /* 82148E0Ch */ case    4:  		/* bl -11940 */
		/* 82148E0Ch case    4:*/		regs.LR = 0x82148E10; return 0x82145F68;
		/* 82148E0Ch case    4:*/		return 0x82148E10;
		  /* 82148E10h */ case    5:  		/* lwz R11, <#[R26 + 4]> */
		/* 82148E10h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 82148E10h case    5:*/		return 0x82148E14;
		  /* 82148E14h */ case    6:  		/* lwz R10, <#[R26]> */
		/* 82148E14h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82148E14h case    6:*/		return 0x82148E18;
		  /* 82148E18h */ case    7:  		/* addi R30, R30, 20 */
		/* 82148E18h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x14);
		/* 82148E18h case    7:*/		return 0x82148E1C;
		  /* 82148E1Ch */ case    8:  		/* mulli R11, R11, 20 */
		/* 82148E1Ch case    8:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x14);
		/* 82148E1Ch case    8:*/		return 0x82148E20;
		  /* 82148E20h */ case    9:  		/* addi R9, R30, -8 */
		/* 82148E20h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0xFFFFFFF8);
		/* 82148E20h case    9:*/		return 0x82148E24;
		  /* 82148E24h */ case   10:  		/* add R11, R11, R10 */
		/* 82148E24h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82148E24h case   10:*/		return 0x82148E28;
		  /* 82148E28h */ case   11:  		/* cmplw CR6, R9, R11 */
		/* 82148E28h case   11:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82148E28h case   11:*/		return 0x82148E2C;
		  /* 82148E2Ch */ case   12:  		/* bc 12, CR6_LT, -264 */
		/* 82148E2Ch case   12:*/		if ( regs.CR[6].lt ) { return 0x82148D24;  }
		/* 82148E2Ch case   12:*/		return 0x82148E30;
	}
	return 0x82148E30;
} // Block from 82148DFCh-82148E30h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82148E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148E30);
		  /* 82148E30h */ case    0:  		/* mr R4, R19 */
		/* 82148E30h case    0:*/		regs.R4 = regs.R19;
		/* 82148E30h case    0:*/		return 0x82148E34;
		  /* 82148E34h */ case    1:  		/* mr R3, R31 */
		/* 82148E34h case    1:*/		regs.R3 = regs.R31;
		/* 82148E34h case    1:*/		return 0x82148E38;
		  /* 82148E38h */ case    2:  		/* bl -11984 */
		/* 82148E38h case    2:*/		regs.LR = 0x82148E3C; return 0x82145F68;
		/* 82148E38h case    2:*/		return 0x82148E3C;
		  /* 82148E3Ch */ case    3:  		/* addi R1, R1, 208 */
		/* 82148E3Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 82148E3Ch case    3:*/		return 0x82148E40;
		  /* 82148E40h */ case    4:  		/* b -752576 */
		/* 82148E40h case    4:*/		return 0x82091280;
		/* 82148E40h case    4:*/		return 0x82148E44;
		  /* 82148E44h */ case    5:  		/* nop */
		/* 82148E44h case    5:*/		cpu::op::nop();
		/* 82148E44h case    5:*/		return 0x82148E48;
	}
	return 0x82148E48;
} // Block from 82148E30h-82148E48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82148E48h
// Function '?WriteConstant@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAU_D3DXSHADER_CONSTANTTABLE@@PAU_D3DXSHADER_CONSTANTINFO@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148E48);
		  /* 82148E48h */ case    0:  		/* mfspr R12, LR */
		/* 82148E48h case    0:*/		regs.R12 = regs.LR;
		/* 82148E48h case    0:*/		return 0x82148E4C;
		  /* 82148E4Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82148E4Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82148E4Ch case    1:*/		return 0x82148E50;
		  /* 82148E50h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82148E50h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82148E50h case    2:*/		return 0x82148E54;
		  /* 82148E54h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82148E54h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82148E54h case    3:*/		return 0x82148E58;
		  /* 82148E58h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82148E58h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82148E58h case    4:*/		return 0x82148E5C;
		  /* 82148E5Ch */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 82148E5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82148E5Ch case    5:*/		return 0x82148E60;
		  /* 82148E60h */ case    6:  		/* mr R30, R4 */
		/* 82148E60h case    6:*/		regs.R30 = regs.R4;
		/* 82148E60h case    6:*/		return 0x82148E64;
		  /* 82148E64h */ case    7:  		/* lwz R10, <#[R3 + 8]> */
		/* 82148E64h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82148E64h case    7:*/		return 0x82148E68;
		  /* 82148E68h */ case    8:  		/* mr R31, R3 */
		/* 82148E68h case    8:*/		regs.R31 = regs.R3;
		/* 82148E68h case    8:*/		return 0x82148E6C;
		  /* 82148E6Ch */ case    9:  		/* addi R4, R11, 1 */
		/* 82148E6Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 82148E6Ch case    9:*/		return 0x82148E70;
		  /* 82148E70h */ case   10:  		/* cmplw CR6, R4, R10 */
		/* 82148E70h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 82148E70h case   10:*/		return 0x82148E74;
		  /* 82148E74h */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 82148E74h case   11:*/		if ( !regs.CR[6].gt ) { return 0x82148E7C;  }
		/* 82148E74h case   11:*/		return 0x82148E78;
		  /* 82148E78h */ case   12:  		/* bl -9680 */
		/* 82148E78h case   12:*/		regs.LR = 0x82148E7C; return 0x821468A8;
		/* 82148E78h case   12:*/		return 0x82148E7C;
	}
	return 0x82148E7C;
} // Block from 82148E48h-82148E7Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82148E7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148E7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148E7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148E7C);
		  /* 82148E7Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82148E7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82148E7Ch case    0:*/		return 0x82148E80;
		  /* 82148E80h */ case    1:  		/* li R5, 24 */
		/* 82148E80h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 82148E80h case    1:*/		return 0x82148E84;
		  /* 82148E84h */ case    2:  		/* lwz R10, <#[R31]> */
		/* 82148E84h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82148E84h case    2:*/		return 0x82148E88;
		  /* 82148E88h */ case    3:  		/* mr R4, R30 */
		/* 82148E88h case    3:*/		regs.R4 = regs.R30;
		/* 82148E88h case    3:*/		return 0x82148E8C;
		  /* 82148E8Ch */ case    4:  		/* mulli R11, R11, 24 */
		/* 82148E8Ch case    4:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x18);
		/* 82148E8Ch case    4:*/		return 0x82148E90;
		  /* 82148E90h */ case    5:  		/* add R3, R11, R10 */
		/* 82148E90h case    5:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82148E90h case    5:*/		return 0x82148E94;
		  /* 82148E94h */ case    6:  		/* bl -750820 */
		/* 82148E94h case    6:*/		regs.LR = 0x82148E98; return 0x820919B0;
		/* 82148E94h case    6:*/		return 0x82148E98;
		  /* 82148E98h */ case    7:  		/* lwz R11, <#[R31 + 4]> */
		/* 82148E98h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82148E98h case    7:*/		return 0x82148E9C;
		  /* 82148E9Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 82148E9Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82148E9Ch case    8:*/		return 0x82148EA0;
		  /* 82148EA0h */ case    9:  		/* stw R11, <#[R31 + 4]> */
		/* 82148EA0h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82148EA0h case    9:*/		return 0x82148EA4;
		  /* 82148EA4h */ case   10:  		/* addi R1, R1, 112 */
		/* 82148EA4h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82148EA4h case   10:*/		return 0x82148EA8;
		  /* 82148EA8h */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 82148EA8h case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82148EA8h case   11:*/		return 0x82148EAC;
		  /* 82148EACh */ case   12:  		/* mtspr LR, R12 */
		/* 82148EACh case   12:*/		regs.LR = regs.R12;
		/* 82148EACh case   12:*/		return 0x82148EB0;
		  /* 82148EB0h */ case   13:  		/* ld R30, <#[R1 - 24]> */
		/* 82148EB0h case   13:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82148EB0h case   13:*/		return 0x82148EB4;
		  /* 82148EB4h */ case   14:  		/* ld R31, <#[R1 - 16]> */
		/* 82148EB4h case   14:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82148EB4h case   14:*/		return 0x82148EB8;
		  /* 82148EB8h */ case   15:  		/* bclr 20, CR0_LT */
		/* 82148EB8h case   15:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82148EB8h case   15:*/		return 0x82148EBC;
	}
	return 0x82148EBC;
} // Block from 82148E7Ch-82148EBCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 82148EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148EBC);
		  /* 82148EBCh */ case    0:  		/* nop */
		/* 82148EBCh case    0:*/		cpu::op::nop();
		/* 82148EBCh case    0:*/		return 0x82148EC0;
	}
	return 0x82148EC0;
} // Block from 82148EBCh-82148EC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82148EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148EC0);
		  /* 82148EC0h */ case    0:  		/* mfspr R12, LR */
		/* 82148EC0h case    0:*/		regs.R12 = regs.LR;
		/* 82148EC0h case    0:*/		return 0x82148EC4;
		  /* 82148EC4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82148EC4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82148EC4h case    1:*/		return 0x82148EC8;
		  /* 82148EC8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82148EC8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82148EC8h case    2:*/		return 0x82148ECC;
		  /* 82148ECCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82148ECCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82148ECCh case    3:*/		return 0x82148ED0;
		  /* 82148ED0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82148ED0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82148ED0h case    4:*/		return 0x82148ED4;
		  /* 82148ED4h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 82148ED4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82148ED4h case    5:*/		return 0x82148ED8;
		  /* 82148ED8h */ case    6:  		/* mr R30, R4 */
		/* 82148ED8h case    6:*/		regs.R30 = regs.R4;
		/* 82148ED8h case    6:*/		return 0x82148EDC;
		  /* 82148EDCh */ case    7:  		/* lwz R10, <#[R3 + 8]> */
		/* 82148EDCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82148EDCh case    7:*/		return 0x82148EE0;
		  /* 82148EE0h */ case    8:  		/* mr R31, R3 */
		/* 82148EE0h case    8:*/		regs.R31 = regs.R3;
		/* 82148EE0h case    8:*/		return 0x82148EE4;
		  /* 82148EE4h */ case    9:  		/* addi R4, R11, 1 */
		/* 82148EE4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 82148EE4h case    9:*/		return 0x82148EE8;
		  /* 82148EE8h */ case   10:  		/* cmplw CR6, R4, R10 */
		/* 82148EE8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 82148EE8h case   10:*/		return 0x82148EEC;
		  /* 82148EECh */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 82148EECh case   11:*/		if ( !regs.CR[6].gt ) { return 0x82148EF4;  }
		/* 82148EECh case   11:*/		return 0x82148EF0;
		  /* 82148EF0h */ case   12:  		/* bl -10520 */
		/* 82148EF0h case   12:*/		regs.LR = 0x82148EF4; return 0x821465D8;
		/* 82148EF0h case   12:*/		return 0x82148EF4;
	}
	return 0x82148EF4;
} // Block from 82148EC0h-82148EF4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82148EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148EF4);
		  /* 82148EF4h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82148EF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82148EF4h case    0:*/		return 0x82148EF8;
		  /* 82148EF8h */ case    1:  		/* lwz R10, <#[R31]> */
		/* 82148EF8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82148EF8h case    1:*/		return 0x82148EFC;
		  /* 82148EFCh */ case    2:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 82148EFCh case    2:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 82148EFCh case    2:*/		return 0x82148F00;
		  /* 82148F00h */ case    3:  		/* lwz R9, <#[R30]> */
		/* 82148F00h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 82148F00h case    3:*/		return 0x82148F04;
		  /* 82148F04h */ case    4:  		/* add R8, R11, R10 */
		/* 82148F04h case    4:*/		cpu::op::add<0>(regs,&regs.R8,regs.R11,regs.R10);
		/* 82148F04h case    4:*/		return 0x82148F08;
		  /* 82148F08h */ case    5:  		/* stwx R9, <#[R11 + R10]> */
		/* 82148F08h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82148F08h case    5:*/		return 0x82148F0C;
		  /* 82148F0Ch */ case    6:  		/* lwz R11, <#[R30 + 4]> */
		/* 82148F0Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82148F0Ch case    6:*/		return 0x82148F10;
		  /* 82148F10h */ case    7:  		/* stw R11, <#[R8 + 4]> */
		/* 82148F10h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 82148F10h case    7:*/		return 0x82148F14;
		  /* 82148F14h */ case    8:  		/* lwz R11, <#[R30 + 8]> */
		/* 82148F14h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82148F14h case    8:*/		return 0x82148F18;
		  /* 82148F18h */ case    9:  		/* stw R11, <#[R8 + 8]> */
		/* 82148F18h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 82148F18h case    9:*/		return 0x82148F1C;
		  /* 82148F1Ch */ case   10:  		/* lwz R11, <#[R30 + 12]> */
		/* 82148F1Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82148F1Ch case   10:*/		return 0x82148F20;
		  /* 82148F20h */ case   11:  		/* stw R11, <#[R8 + 12]> */
		/* 82148F20h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x0000000C) );
		/* 82148F20h case   11:*/		return 0x82148F24;
		  /* 82148F24h */ case   12:  		/* lwz R11, <#[R31 + 4]> */
		/* 82148F24h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82148F24h case   12:*/		return 0x82148F28;
		  /* 82148F28h */ case   13:  		/* addi R11, R11, 1 */
		/* 82148F28h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82148F28h case   13:*/		return 0x82148F2C;
		  /* 82148F2Ch */ case   14:  		/* stw R11, <#[R31 + 4]> */
		/* 82148F2Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82148F2Ch case   14:*/		return 0x82148F30;
	}
	return 0x82148F30;
} // Block from 82148EF4h-82148F30h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82148F30h
// Function '?WriteConstantTable@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAUPDBShader@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148F30);
		  /* 82148F30h */ case    0:  		/* addi R1, R1, 112 */
		/* 82148F30h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82148F30h case    0:*/		return 0x82148F34;
		  /* 82148F34h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82148F34h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82148F34h case    1:*/		return 0x82148F38;
		  /* 82148F38h */ case    2:  		/* mtspr LR, R12 */
		/* 82148F38h case    2:*/		regs.LR = regs.R12;
		/* 82148F38h case    2:*/		return 0x82148F3C;
		  /* 82148F3Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82148F3Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82148F3Ch case    3:*/		return 0x82148F40;
		  /* 82148F40h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82148F40h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82148F40h case    4:*/		return 0x82148F44;
		  /* 82148F44h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82148F44h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82148F44h case    5:*/		return 0x82148F48;
	}
	return 0x82148F48;
} // Block from 82148F30h-82148F48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82148F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148F48);
		  /* 82148F48h */ case    0:  		/* mfspr R12, LR */
		/* 82148F48h case    0:*/		regs.R12 = regs.LR;
		/* 82148F48h case    0:*/		return 0x82148F4C;
		  /* 82148F4Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82148F4Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82148F4Ch case    1:*/		return 0x82148F50;
		  /* 82148F50h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82148F50h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82148F50h case    2:*/		return 0x82148F54;
		  /* 82148F54h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82148F54h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82148F54h case    3:*/		return 0x82148F58;
		  /* 82148F58h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82148F58h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82148F58h case    4:*/		return 0x82148F5C;
		  /* 82148F5Ch */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 82148F5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82148F5Ch case    5:*/		return 0x82148F60;
		  /* 82148F60h */ case    6:  		/* mr R30, R4 */
		/* 82148F60h case    6:*/		regs.R30 = regs.R4;
		/* 82148F60h case    6:*/		return 0x82148F64;
		  /* 82148F64h */ case    7:  		/* lwz R10, <#[R3 + 8]> */
		/* 82148F64h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82148F64h case    7:*/		return 0x82148F68;
		  /* 82148F68h */ case    8:  		/* mr R31, R3 */
		/* 82148F68h case    8:*/		regs.R31 = regs.R3;
		/* 82148F68h case    8:*/		return 0x82148F6C;
		  /* 82148F6Ch */ case    9:  		/* addi R4, R11, 1 */
		/* 82148F6Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 82148F6Ch case    9:*/		return 0x82148F70;
		  /* 82148F70h */ case   10:  		/* cmplw CR6, R4, R10 */
		/* 82148F70h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 82148F70h case   10:*/		return 0x82148F74;
		  /* 82148F74h */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 82148F74h case   11:*/		if ( !regs.CR[6].gt ) { return 0x82148F7C;  }
		/* 82148F74h case   11:*/		return 0x82148F78;
		  /* 82148F78h */ case   12:  		/* bl -10368 */
		/* 82148F78h case   12:*/		regs.LR = 0x82148F7C; return 0x821466F8;
		/* 82148F78h case   12:*/		return 0x82148F7C;
	}
	return 0x82148F7C;
} // Block from 82148F48h-82148F7Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82148F7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148F7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148F7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148F7C);
		  /* 82148F7Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82148F7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82148F7Ch case    0:*/		return 0x82148F80;
		  /* 82148F80h */ case    1:  		/* lwz R10, <#[R31]> */
		/* 82148F80h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82148F80h case    1:*/		return 0x82148F84;
		  /* 82148F84h */ case    2:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 82148F84h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 82148F84h case    2:*/		return 0x82148F88;
		  /* 82148F88h */ case    3:  		/* lbz R9, <#[R30]> */
		/* 82148F88h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 82148F88h case    3:*/		return 0x82148F8C;
		  /* 82148F8Ch */ case    4:  		/* add R8, R11, R10 */
		/* 82148F8Ch case    4:*/		cpu::op::add<0>(regs,&regs.R8,regs.R11,regs.R10);
		/* 82148F8Ch case    4:*/		return 0x82148F90;
		  /* 82148F90h */ case    5:  		/* stbx R9, <#[R11 + R10]> */
		/* 82148F90h case    5:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82148F90h case    5:*/		return 0x82148F94;
		  /* 82148F94h */ case    6:  		/* lbz R11, <#[R30 + 1]> */
		/* 82148F94h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000001) );
		/* 82148F94h case    6:*/		return 0x82148F98;
		  /* 82148F98h */ case    7:  		/* stb R11, <#[R8 + 1]> */
		/* 82148F98h case    7:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R8 + 0x00000001) );
		/* 82148F98h case    7:*/		return 0x82148F9C;
		  /* 82148F9Ch */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 82148F9Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82148F9Ch case    8:*/		return 0x82148FA0;
		  /* 82148FA0h */ case    9:  		/* addi R11, R11, 1 */
		/* 82148FA0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82148FA0h case    9:*/		return 0x82148FA4;
		  /* 82148FA4h */ case   10:  		/* stw R11, <#[R31 + 4]> */
		/* 82148FA4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82148FA4h case   10:*/		return 0x82148FA8;
		  /* 82148FA8h */ case   11:  		/* addi R1, R1, 112 */
		/* 82148FA8h case   11:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82148FA8h case   11:*/		return 0x82148FAC;
		  /* 82148FACh */ case   12:  		/* lwz R12, <#[R1 - 8]> */
		/* 82148FACh case   12:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82148FACh case   12:*/		return 0x82148FB0;
		  /* 82148FB0h */ case   13:  		/* mtspr LR, R12 */
		/* 82148FB0h case   13:*/		regs.LR = regs.R12;
		/* 82148FB0h case   13:*/		return 0x82148FB4;
		  /* 82148FB4h */ case   14:  		/* ld R30, <#[R1 - 24]> */
		/* 82148FB4h case   14:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82148FB4h case   14:*/		return 0x82148FB8;
		  /* 82148FB8h */ case   15:  		/* ld R31, <#[R1 - 16]> */
		/* 82148FB8h case   15:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82148FB8h case   15:*/		return 0x82148FBC;
		  /* 82148FBCh */ case   16:  		/* bclr 20, CR0_LT */
		/* 82148FBCh case   16:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82148FBCh case   16:*/		return 0x82148FC0;
	}
	return 0x82148FC0;
} // Block from 82148F7Ch-82148FC0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82148FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148FC0);
		  /* 82148FC0h */ case    0:  		/* mfspr R12, LR */
		/* 82148FC0h case    0:*/		regs.R12 = regs.LR;
		/* 82148FC0h case    0:*/		return 0x82148FC4;
		  /* 82148FC4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82148FC4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82148FC4h case    1:*/		return 0x82148FC8;
		  /* 82148FC8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82148FC8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82148FC8h case    2:*/		return 0x82148FCC;
		  /* 82148FCCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82148FCCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82148FCCh case    3:*/		return 0x82148FD0;
		  /* 82148FD0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82148FD0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82148FD0h case    4:*/		return 0x82148FD4;
		  /* 82148FD4h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 82148FD4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82148FD4h case    5:*/		return 0x82148FD8;
		  /* 82148FD8h */ case    6:  		/* mr R30, R4 */
		/* 82148FD8h case    6:*/		regs.R30 = regs.R4;
		/* 82148FD8h case    6:*/		return 0x82148FDC;
		  /* 82148FDCh */ case    7:  		/* lwz R10, <#[R3 + 8]> */
		/* 82148FDCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82148FDCh case    7:*/		return 0x82148FE0;
	}
	return 0x82148FE0;
} // Block from 82148FC0h-82148FE0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82148FE0h
// Function 'XShaderPDBBuilder_Initialize'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148FE0);
		  /* 82148FE0h */ case    0:  		/* mr R31, R3 */
		/* 82148FE0h case    0:*/		regs.R31 = regs.R3;
		/* 82148FE0h case    0:*/		return 0x82148FE4;
		  /* 82148FE4h */ case    1:  		/* addi R4, R11, 1 */
		/* 82148FE4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 82148FE4h case    1:*/		return 0x82148FE8;
	}
	return 0x82148FE8;
} // Block from 82148FE0h-82148FE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82148FE8h
// Function 'XShaderPDBBuilder_AddConstantTable'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148FE8);
		  /* 82148FE8h */ case    0:  		/* cmplw CR6, R4, R10 */
		/* 82148FE8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 82148FE8h case    0:*/		return 0x82148FEC;
		  /* 82148FECh */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 82148FECh case    1:*/		if ( !regs.CR[6].gt ) { return 0x82148FF4;  }
		/* 82148FECh case    1:*/		return 0x82148FF0;
	}
	return 0x82148FF0;
} // Block from 82148FE8h-82148FF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82148FF0h
// Function '?CreatePDBHint@ShaderPDBBuilder@XGRAPHICS@@QAAXPBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148FF0);
		  /* 82148FF0h */ case    0:  		/* bl 968 */
		/* 82148FF0h case    0:*/		regs.LR = 0x82148FF4; return 0x821493B8;
		/* 82148FF0h case    0:*/		return 0x82148FF4;
	}
	return 0x82148FF4;
} // Block from 82148FF0h-82148FF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82148FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82148FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82148FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82148FF4);
		  /* 82148FF4h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82148FF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82148FF4h case    0:*/		return 0x82148FF8;
		  /* 82148FF8h */ case    1:  		/* lwz R10, <#[R31]> */
		/* 82148FF8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82148FF8h case    1:*/		return 0x82148FFC;
		  /* 82148FFCh */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82148FFCh case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82148FFCh case    2:*/		return 0x82149000;
		  /* 82149000h */ case    3:  		/* lbz R9, <#[R30]> */
		/* 82149000h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 82149000h case    3:*/		return 0x82149004;
		  /* 82149004h */ case    4:  		/* add R8, R11, R10 */
		/* 82149004h case    4:*/		cpu::op::add<0>(regs,&regs.R8,regs.R11,regs.R10);
		/* 82149004h case    4:*/		return 0x82149008;
		  /* 82149008h */ case    5:  		/* stbx R9, <#[R11 + R10]> */
		/* 82149008h case    5:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82149008h case    5:*/		return 0x8214900C;
		  /* 8214900Ch */ case    6:  		/* lbz R11, <#[R30 + 1]> */
		/* 8214900Ch case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000001) );
		/* 8214900Ch case    6:*/		return 0x82149010;
		  /* 82149010h */ case    7:  		/* stb R11, <#[R8 + 1]> */
		/* 82149010h case    7:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R8 + 0x00000001) );
		/* 82149010h case    7:*/		return 0x82149014;
		  /* 82149014h */ case    8:  		/* lbz R11, <#[R30 + 2]> */
		/* 82149014h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 82149014h case    8:*/		return 0x82149018;
		  /* 82149018h */ case    9:  		/* stb R11, <#[R8 + 2]> */
		/* 82149018h case    9:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R8 + 0x00000002) );
		/* 82149018h case    9:*/		return 0x8214901C;
		  /* 8214901Ch */ case   10:  		/* lbz R11, <#[R30 + 3]> */
		/* 8214901Ch case   10:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000003) );
		/* 8214901Ch case   10:*/		return 0x82149020;
		  /* 82149020h */ case   11:  		/* stb R11, <#[R8 + 3]> */
		/* 82149020h case   11:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R8 + 0x00000003) );
		/* 82149020h case   11:*/		return 0x82149024;
		  /* 82149024h */ case   12:  		/* lwz R11, <#[R31 + 4]> */
		/* 82149024h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82149024h case   12:*/		return 0x82149028;
		  /* 82149028h */ case   13:  		/* addi R11, R11, 1 */
		/* 82149028h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82149028h case   13:*/		return 0x8214902C;
		  /* 8214902Ch */ case   14:  		/* stw R11, <#[R31 + 4]> */
		/* 8214902Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214902Ch case   14:*/		return 0x82149030;
		  /* 82149030h */ case   15:  		/* addi R1, R1, 112 */
		/* 82149030h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82149030h case   15:*/		return 0x82149034;
		  /* 82149034h */ case   16:  		/* lwz R12, <#[R1 - 8]> */
		/* 82149034h case   16:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82149034h case   16:*/		return 0x82149038;
		  /* 82149038h */ case   17:  		/* mtspr LR, R12 */
		/* 82149038h case   17:*/		regs.LR = regs.R12;
		/* 82149038h case   17:*/		return 0x8214903C;
		  /* 8214903Ch */ case   18:  		/* ld R30, <#[R1 - 24]> */
		/* 8214903Ch case   18:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214903Ch case   18:*/		return 0x82149040;
		  /* 82149040h */ case   19:  		/* ld R31, <#[R1 - 16]> */
		/* 82149040h case   19:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82149040h case   19:*/		return 0x82149044;
		  /* 82149044h */ case   20:  		/* bclr 20, CR0_LT */
		/* 82149044h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82149044h case   20:*/		return 0x82149048;
	}
	return 0x82149048;
} // Block from 82148FF4h-82149048h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82149048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149048);
		  /* 82149048h */ case    0:  		/* mfspr R12, LR */
		/* 82149048h case    0:*/		regs.R12 = regs.LR;
		/* 82149048h case    0:*/		return 0x8214904C;
		  /* 8214904Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214904Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214904Ch case    1:*/		return 0x82149050;
		  /* 82149050h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82149050h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82149050h case    2:*/		return 0x82149054;
		  /* 82149054h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82149054h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82149054h case    3:*/		return 0x82149058;
		  /* 82149058h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82149058h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82149058h case    4:*/		return 0x8214905C;
		  /* 8214905Ch */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 8214905Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8214905Ch case    5:*/		return 0x82149060;
		  /* 82149060h */ case    6:  		/* mr R30, R4 */
		/* 82149060h case    6:*/		regs.R30 = regs.R4;
		/* 82149060h case    6:*/		return 0x82149064;
		  /* 82149064h */ case    7:  		/* lwz R10, <#[R3 + 8]> */
		/* 82149064h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82149064h case    7:*/		return 0x82149068;
		  /* 82149068h */ case    8:  		/* mr R31, R3 */
		/* 82149068h case    8:*/		regs.R31 = regs.R3;
		/* 82149068h case    8:*/		return 0x8214906C;
		  /* 8214906Ch */ case    9:  		/* addi R4, R11, 1 */
		/* 8214906Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 8214906Ch case    9:*/		return 0x82149070;
		  /* 82149070h */ case   10:  		/* cmplw CR6, R4, R10 */
		/* 82149070h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 82149070h case   10:*/		return 0x82149074;
		  /* 82149074h */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 82149074h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8214907C;  }
		/* 82149074h case   11:*/		return 0x82149078;
		  /* 82149078h */ case   12:  		/* bl -10480 */
		/* 82149078h case   12:*/		regs.LR = 0x8214907C; return 0x82146788;
		/* 82149078h case   12:*/		return 0x8214907C;
	}
	return 0x8214907C;
} // Block from 82149048h-8214907Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214907Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214907C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214907C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214907C);
		  /* 8214907Ch */ case    0:  		/* li R11, 5 */
		/* 8214907Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8214907Ch case    0:*/		return 0x82149080;
		  /* 82149080h */ case    1:  		/* lwz R10, <#[R31 + 4]> */
		/* 82149080h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82149080h case    1:*/		return 0x82149084;
		  /* 82149084h */ case    2:  		/* lwz R9, <#[R31]> */
		/* 82149084h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82149084h case    2:*/		return 0x82149088;
		  /* 82149088h */ case    3:  		/* addi R8, R30, -4 */
		/* 82149088h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0xFFFFFFFC);
		/* 82149088h case    3:*/		return 0x8214908C;
		  /* 8214908Ch */ case    4:  		/* mulli R10, R10, 20 */
		/* 8214908Ch case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x14);
		/* 8214908Ch case    4:*/		return 0x82149090;
		  /* 82149090h */ case    5:  		/* mtspr CTR, R11 */
		/* 82149090h case    5:*/		regs.CTR = regs.R11;
		/* 82149090h case    5:*/		return 0x82149094;
		  /* 82149094h */ case    6:  		/* add R11, R10, R9 */
		/* 82149094h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R9);
		/* 82149094h case    6:*/		return 0x82149098;
		  /* 82149098h */ case    7:  		/* addi R11, R11, -4 */
		/* 82149098h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82149098h case    7:*/		return 0x8214909C;
		  /* 8214909Ch */ case    8:  		/* lwzu R10, <#[R8 + 4]> */
		/* 8214909Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 8214909Ch case    8:*/		return 0x821490A0;
		  /* 821490A0h */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 821490A0h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821490A0h case    9:*/		return 0x821490A4;
		  /* 821490A4h */ case   10:  		/* bc 16, CR0_LT, -8 */
		/* 821490A4h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8214909C;  }
		/* 821490A4h case   10:*/		return 0x821490A8;
		  /* 821490A8h */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 821490A8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821490A8h case   11:*/		return 0x821490AC;
		  /* 821490ACh */ case   12:  		/* addi R11, R11, 1 */
		/* 821490ACh case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821490ACh case   12:*/		return 0x821490B0;
		  /* 821490B0h */ case   13:  		/* stw R11, <#[R31 + 4]> */
		/* 821490B0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821490B0h case   13:*/		return 0x821490B4;
		  /* 821490B4h */ case   14:  		/* addi R1, R1, 112 */
		/* 821490B4h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821490B4h case   14:*/		return 0x821490B8;
		  /* 821490B8h */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 821490B8h case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821490B8h case   15:*/		return 0x821490BC;
		  /* 821490BCh */ case   16:  		/* mtspr LR, R12 */
		/* 821490BCh case   16:*/		regs.LR = regs.R12;
		/* 821490BCh case   16:*/		return 0x821490C0;
		  /* 821490C0h */ case   17:  		/* ld R30, <#[R1 - 24]> */
		/* 821490C0h case   17:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821490C0h case   17:*/		return 0x821490C4;
		  /* 821490C4h */ case   18:  		/* ld R31, <#[R1 - 16]> */
		/* 821490C4h case   18:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821490C4h case   18:*/		return 0x821490C8;
		  /* 821490C8h */ case   19:  		/* bclr 20, CR0_LT */
		/* 821490C8h case   19:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821490C8h case   19:*/		return 0x821490CC;
	}
	return 0x821490CC;
} // Block from 8214907Ch-821490CCh (20 instructions)

//////////////////////////////////////////////////////
// Block at 821490CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821490CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821490CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821490CC);
		  /* 821490CCh */ case    0:  		/* nop */
		/* 821490CCh case    0:*/		cpu::op::nop();
		/* 821490CCh case    0:*/		return 0x821490D0;
	}
	return 0x821490D0;
} // Block from 821490CCh-821490D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821490D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821490D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821490D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821490D0);
		  /* 821490D0h */ case    0:  		/* mfspr R12, LR */
		/* 821490D0h case    0:*/		regs.R12 = regs.LR;
		/* 821490D0h case    0:*/		return 0x821490D4;
		  /* 821490D4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821490D4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821490D4h case    1:*/		return 0x821490D8;
		  /* 821490D8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821490D8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821490D8h case    2:*/		return 0x821490DC;
		  /* 821490DCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821490DCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821490DCh case    3:*/		return 0x821490E0;
		  /* 821490E0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821490E0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821490E0h case    4:*/		return 0x821490E4;
		  /* 821490E4h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 821490E4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821490E4h case    5:*/		return 0x821490E8;
		  /* 821490E8h */ case    6:  		/* mr R30, R4 */
		/* 821490E8h case    6:*/		regs.R30 = regs.R4;
		/* 821490E8h case    6:*/		return 0x821490EC;
		  /* 821490ECh */ case    7:  		/* lwz R10, <#[R3 + 8]> */
		/* 821490ECh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821490ECh case    7:*/		return 0x821490F0;
		  /* 821490F0h */ case    8:  		/* mr R31, R3 */
		/* 821490F0h case    8:*/		regs.R31 = regs.R3;
		/* 821490F0h case    8:*/		return 0x821490F4;
		  /* 821490F4h */ case    9:  		/* addi R4, R11, 1 */
		/* 821490F4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 821490F4h case    9:*/		return 0x821490F8;
		  /* 821490F8h */ case   10:  		/* cmplw CR6, R4, R10 */
		/* 821490F8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 821490F8h case   10:*/		return 0x821490FC;
		  /* 821490FCh */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 821490FCh case   11:*/		if ( !regs.CR[6].gt ) { return 0x82149104;  }
		/* 821490FCh case   11:*/		return 0x82149100;
		  /* 82149100h */ case   12:  		/* bl -10184 */
		/* 82149100h case   12:*/		regs.LR = 0x82149104; return 0x82146938;
		/* 82149100h case   12:*/		return 0x82149104;
	}
	return 0x82149104;
} // Block from 821490D0h-82149104h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82149104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149104);
		  /* 82149104h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82149104h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82149104h case    0:*/		return 0x82149108;
		  /* 82149108h */ case    1:  		/* li R5, 276 */
		/* 82149108h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x114);
		/* 82149108h case    1:*/		return 0x8214910C;
		  /* 8214910Ch */ case    2:  		/* lwz R10, <#[R31]> */
		/* 8214910Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8214910Ch case    2:*/		return 0x82149110;
		  /* 82149110h */ case    3:  		/* mr R4, R30 */
		/* 82149110h case    3:*/		regs.R4 = regs.R30;
		/* 82149110h case    3:*/		return 0x82149114;
		  /* 82149114h */ case    4:  		/* mulli R11, R11, 276 */
		/* 82149114h case    4:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x114);
		/* 82149114h case    4:*/		return 0x82149118;
		  /* 82149118h */ case    5:  		/* add R3, R11, R10 */
		/* 82149118h case    5:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82149118h case    5:*/		return 0x8214911C;
		  /* 8214911Ch */ case    6:  		/* bl -751468 */
		/* 8214911Ch case    6:*/		regs.LR = 0x82149120; return 0x820919B0;
		/* 8214911Ch case    6:*/		return 0x82149120;
		  /* 82149120h */ case    7:  		/* lwz R11, <#[R31 + 4]> */
		/* 82149120h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82149120h case    7:*/		return 0x82149124;
		  /* 82149124h */ case    8:  		/* addi R11, R11, 1 */
		/* 82149124h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82149124h case    8:*/		return 0x82149128;
		  /* 82149128h */ case    9:  		/* stw R11, <#[R31 + 4]> */
		/* 82149128h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82149128h case    9:*/		return 0x8214912C;
		  /* 8214912Ch */ case   10:  		/* addi R1, R1, 112 */
		/* 8214912Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214912Ch case   10:*/		return 0x82149130;
		  /* 82149130h */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 82149130h case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82149130h case   11:*/		return 0x82149134;
		  /* 82149134h */ case   12:  		/* mtspr LR, R12 */
		/* 82149134h case   12:*/		regs.LR = regs.R12;
		/* 82149134h case   12:*/		return 0x82149138;
		  /* 82149138h */ case   13:  		/* ld R30, <#[R1 - 24]> */
		/* 82149138h case   13:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82149138h case   13:*/		return 0x8214913C;
		  /* 8214913Ch */ case   14:  		/* ld R31, <#[R1 - 16]> */
		/* 8214913Ch case   14:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214913Ch case   14:*/		return 0x82149140;
		  /* 82149140h */ case   15:  		/* bclr 20, CR0_LT */
		/* 82149140h case   15:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82149140h case   15:*/		return 0x82149144;
	}
	return 0x82149144;
} // Block from 82149104h-82149144h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82149144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149144);
		  /* 82149144h */ case    0:  		/* nop */
		/* 82149144h case    0:*/		cpu::op::nop();
		/* 82149144h case    0:*/		return 0x82149148;
	}
	return 0x82149148;
} // Block from 82149144h-82149148h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149148);
		  /* 82149148h */ case    0:  		/* mfspr R12, LR */
		/* 82149148h case    0:*/		regs.R12 = regs.LR;
		/* 82149148h case    0:*/		return 0x8214914C;
		  /* 8214914Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214914Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214914Ch case    1:*/		return 0x82149150;
		  /* 82149150h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82149150h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82149150h case    2:*/		return 0x82149154;
		  /* 82149154h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82149154h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82149154h case    3:*/		return 0x82149158;
		  /* 82149158h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82149158h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82149158h case    4:*/		return 0x8214915C;
		  /* 8214915Ch */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 8214915Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8214915Ch case    5:*/		return 0x82149160;
		  /* 82149160h */ case    6:  		/* mr R30, R4 */
		/* 82149160h case    6:*/		regs.R30 = regs.R4;
		/* 82149160h case    6:*/		return 0x82149164;
		  /* 82149164h */ case    7:  		/* lwz R10, <#[R3 + 8]> */
		/* 82149164h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82149164h case    7:*/		return 0x82149168;
		  /* 82149168h */ case    8:  		/* mr R31, R3 */
		/* 82149168h case    8:*/		regs.R31 = regs.R3;
		/* 82149168h case    8:*/		return 0x8214916C;
		  /* 8214916Ch */ case    9:  		/* addi R4, R11, 1 */
		/* 8214916Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 8214916Ch case    9:*/		return 0x82149170;
		  /* 82149170h */ case   10:  		/* cmplw CR6, R4, R10 */
		/* 82149170h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 82149170h case   10:*/		return 0x82149174;
		  /* 82149174h */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 82149174h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8214917C;  }
		/* 82149174h case   11:*/		return 0x82149178;
		  /* 82149178h */ case   12:  		/* bl -10016 */
		/* 82149178h case   12:*/		regs.LR = 0x8214917C; return 0x82146A58;
		/* 82149178h case   12:*/		return 0x8214917C;
	}
	return 0x8214917C;
} // Block from 82149148h-8214917Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214917Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214917C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214917C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214917C);
		  /* 8214917Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214917Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214917Ch case    0:*/		return 0x82149180;
		  /* 82149180h */ case    1:  		/* lwz R10, <#[R31]> */
		/* 82149180h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82149180h case    1:*/		return 0x82149184;
		  /* 82149184h */ case    2:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82149184h case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82149184h case    2:*/		return 0x82149188;
		  /* 82149188h */ case    3:  		/* lwz R9, <#[R30]> */
		/* 82149188h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 82149188h case    3:*/		return 0x8214918C;
		  /* 8214918Ch */ case    4:  		/* add R8, R11, R10 */
		/* 8214918Ch case    4:*/		cpu::op::add<0>(regs,&regs.R8,regs.R11,regs.R10);
		/* 8214918Ch case    4:*/		return 0x82149190;
		  /* 82149190h */ case    5:  		/* stwx R9, <#[R11 + R10]> */
		/* 82149190h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82149190h case    5:*/		return 0x82149194;
		  /* 82149194h */ case    6:  		/* lwz R11, <#[R30 + 4]> */
		/* 82149194h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82149194h case    6:*/		return 0x82149198;
		  /* 82149198h */ case    7:  		/* stw R11, <#[R8 + 4]> */
		/* 82149198h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 82149198h case    7:*/		return 0x8214919C;
		  /* 8214919Ch */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214919Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214919Ch case    8:*/		return 0x821491A0;
		  /* 821491A0h */ case    9:  		/* addi R11, R11, 1 */
		/* 821491A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821491A0h case    9:*/		return 0x821491A4;
		  /* 821491A4h */ case   10:  		/* stw R11, <#[R31 + 4]> */
		/* 821491A4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821491A4h case   10:*/		return 0x821491A8;
		  /* 821491A8h */ case   11:  		/* addi R1, R1, 112 */
		/* 821491A8h case   11:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821491A8h case   11:*/		return 0x821491AC;
		  /* 821491ACh */ case   12:  		/* lwz R12, <#[R1 - 8]> */
		/* 821491ACh case   12:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821491ACh case   12:*/		return 0x821491B0;
		  /* 821491B0h */ case   13:  		/* mtspr LR, R12 */
		/* 821491B0h case   13:*/		regs.LR = regs.R12;
		/* 821491B0h case   13:*/		return 0x821491B4;
		  /* 821491B4h */ case   14:  		/* ld R30, <#[R1 - 24]> */
		/* 821491B4h case   14:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821491B4h case   14:*/		return 0x821491B8;
		  /* 821491B8h */ case   15:  		/* ld R31, <#[R1 - 16]> */
		/* 821491B8h case   15:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821491B8h case   15:*/		return 0x821491BC;
		  /* 821491BCh */ case   16:  		/* bclr 20, CR0_LT */
		/* 821491BCh case   16:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821491BCh case   16:*/		return 0x821491C0;
	}
	return 0x821491C0;
} // Block from 8214917Ch-821491C0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821491C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821491C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821491C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821491C0);
		  /* 821491C0h */ case    0:  		/* mfspr R12, LR */
		/* 821491C0h case    0:*/		regs.R12 = regs.LR;
		/* 821491C0h case    0:*/		return 0x821491C4;
		  /* 821491C4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821491C4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821491C4h case    1:*/		return 0x821491C8;
		  /* 821491C8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821491C8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821491C8h case    2:*/		return 0x821491CC;
		  /* 821491CCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821491CCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821491CCh case    3:*/		return 0x821491D0;
		  /* 821491D0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821491D0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821491D0h case    4:*/		return 0x821491D4;
		  /* 821491D4h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 821491D4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821491D4h case    5:*/		return 0x821491D8;
		  /* 821491D8h */ case    6:  		/* mr R30, R4 */
		/* 821491D8h case    6:*/		regs.R30 = regs.R4;
		/* 821491D8h case    6:*/		return 0x821491DC;
		  /* 821491DCh */ case    7:  		/* lwz R10, <#[R3 + 8]> */
		/* 821491DCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821491DCh case    7:*/		return 0x821491E0;
		  /* 821491E0h */ case    8:  		/* mr R31, R3 */
		/* 821491E0h case    8:*/		regs.R31 = regs.R3;
		/* 821491E0h case    8:*/		return 0x821491E4;
		  /* 821491E4h */ case    9:  		/* addi R4, R11, 1 */
		/* 821491E4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 821491E4h case    9:*/		return 0x821491E8;
		  /* 821491E8h */ case   10:  		/* cmplw CR6, R4, R10 */
		/* 821491E8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 821491E8h case   10:*/		return 0x821491EC;
		  /* 821491ECh */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 821491ECh case   11:*/		if ( !regs.CR[6].gt ) { return 0x821491F4;  }
		/* 821491ECh case   11:*/		return 0x821491F0;
		  /* 821491F0h */ case   12:  		/* bl -9856 */
		/* 821491F0h case   12:*/		regs.LR = 0x821491F4; return 0x82146B70;
		/* 821491F0h case   12:*/		return 0x821491F4;
	}
	return 0x821491F4;
} // Block from 821491C0h-821491F4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821491F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821491F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821491F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821491F4);
		  /* 821491F4h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821491F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821491F4h case    0:*/		return 0x821491F8;
		  /* 821491F8h */ case    1:  		/* li R5, 40 */
		/* 821491F8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x28);
		/* 821491F8h case    1:*/		return 0x821491FC;
		  /* 821491FCh */ case    2:  		/* lwz R10, <#[R31]> */
		/* 821491FCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821491FCh case    2:*/		return 0x82149200;
		  /* 82149200h */ case    3:  		/* mr R4, R30 */
		/* 82149200h case    3:*/		regs.R4 = regs.R30;
		/* 82149200h case    3:*/		return 0x82149204;
		  /* 82149204h */ case    4:  		/* mulli R11, R11, 40 */
		/* 82149204h case    4:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 82149204h case    4:*/		return 0x82149208;
		  /* 82149208h */ case    5:  		/* add R3, R11, R10 */
		/* 82149208h case    5:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82149208h case    5:*/		return 0x8214920C;
		  /* 8214920Ch */ case    6:  		/* bl -751708 */
		/* 8214920Ch case    6:*/		regs.LR = 0x82149210; return 0x820919B0;
		/* 8214920Ch case    6:*/		return 0x82149210;
		  /* 82149210h */ case    7:  		/* lwz R11, <#[R31 + 4]> */
		/* 82149210h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82149210h case    7:*/		return 0x82149214;
		  /* 82149214h */ case    8:  		/* addi R11, R11, 1 */
		/* 82149214h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82149214h case    8:*/		return 0x82149218;
		  /* 82149218h */ case    9:  		/* stw R11, <#[R31 + 4]> */
		/* 82149218h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82149218h case    9:*/		return 0x8214921C;
		  /* 8214921Ch */ case   10:  		/* addi R1, R1, 112 */
		/* 8214921Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214921Ch case   10:*/		return 0x82149220;
		  /* 82149220h */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 82149220h case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82149220h case   11:*/		return 0x82149224;
		  /* 82149224h */ case   12:  		/* mtspr LR, R12 */
		/* 82149224h case   12:*/		regs.LR = regs.R12;
		/* 82149224h case   12:*/		return 0x82149228;
		  /* 82149228h */ case   13:  		/* ld R30, <#[R1 - 24]> */
		/* 82149228h case   13:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82149228h case   13:*/		return 0x8214922C;
		  /* 8214922Ch */ case   14:  		/* ld R31, <#[R1 - 16]> */
		/* 8214922Ch case   14:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214922Ch case   14:*/		return 0x82149230;
		  /* 82149230h */ case   15:  		/* bclr 20, CR0_LT */
		/* 82149230h case   15:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82149230h case   15:*/		return 0x82149234;
	}
	return 0x82149234;
} // Block from 821491F4h-82149234h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82149234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149234);
		  /* 82149234h */ case    0:  		/* nop */
		/* 82149234h case    0:*/		cpu::op::nop();
		/* 82149234h case    0:*/		return 0x82149238;
	}
	return 0x82149238;
} // Block from 82149234h-82149238h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149238);
		  /* 82149238h */ case    0:  		/* mfspr R12, LR */
		/* 82149238h case    0:*/		regs.R12 = regs.LR;
		/* 82149238h case    0:*/		return 0x8214923C;
		  /* 8214923Ch */ case    1:  		/* bl -753640 */
		/* 8214923Ch case    1:*/		regs.LR = 0x82149240; return 0x82091254;
		/* 8214923Ch case    1:*/		return 0x82149240;
		  /* 82149240h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82149240h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82149240h case    2:*/		return 0x82149244;
		  /* 82149244h */ case    3:  		/* lis R11, -32253 */
		/* 82149244h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149244h case    3:*/		return 0x82149248;
		  /* 82149248h */ case    4:  		/* mr R30, R3 */
		/* 82149248h case    4:*/		regs.R30 = regs.R3;
		/* 82149248h case    4:*/		return 0x8214924C;
		  /* 8214924Ch */ case    5:  		/* addi R11, R11, 26548 */
		/* 8214924Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x67B4);
		/* 8214924Ch case    5:*/		return 0x82149250;
		  /* 82149250h */ case    6:  		/* li R31, 0 */
		/* 82149250h case    6:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82149250h case    6:*/		return 0x82149254;
		  /* 82149254h */ case    7:  		/* stw R11, <#[R3]> */
		/* 82149254h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82149254h case    7:*/		return 0x82149258;
		  /* 82149258h */ case    8:  		/* li R10, 1 */
		/* 82149258h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82149258h case    8:*/		return 0x8214925C;
		  /* 8214925Ch */ case    9:  		/* stw R31, <#[R3 + 4]> */
		/* 8214925Ch case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 8214925Ch case    9:*/		return 0x82149260;
		  /* 82149260h */ case   10:  		/* addi R29, R3, 16 */
		/* 82149260h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x10);
		/* 82149260h case   10:*/		return 0x82149264;
		  /* 82149264h */ case   11:  		/* stw R31, <#[R30 + 8]> */
		/* 82149264h case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 82149264h case   11:*/		return 0x82149268;
		  /* 82149268h */ case   12:  		/* addi R28, R3, 56 */
		/* 82149268h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R3,0x38);
		/* 82149268h case   12:*/		return 0x8214926C;
		  /* 8214926Ch */ case   13:  		/* stw R31, <#[R30 + 12]> */
		/* 8214926Ch case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000000C) );
		/* 8214926Ch case   13:*/		return 0x82149270;
		  /* 82149270h */ case   14:  		/* addi R3, R3, 32 */
		/* 82149270h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x20);
		/* 82149270h case   14:*/		return 0x82149274;
		  /* 82149274h */ case   15:  		/* stw R31, <#[R30 + 16]> */
		/* 82149274h case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 82149274h case   15:*/		return 0x82149278;
		  /* 82149278h */ case   16:  		/* addi R27, R30, 144 */
		/* 82149278h case   16:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R30,0x90);
		/* 82149278h case   16:*/		return 0x8214927C;
		  /* 8214927Ch */ case   17:  		/* stw R31, <#[R30 + 20]> */
		/* 8214927Ch case   17:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000014) );
		/* 8214927Ch case   17:*/		return 0x82149280;
		  /* 82149280h */ case   18:  		/* stw R31, <#[R30 + 24]> */
		/* 82149280h case   18:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000018) );
		/* 82149280h case   18:*/		return 0x82149284;
		  /* 82149284h */ case   19:  		/* stw R31, <#[R30 + 32]> */
		/* 82149284h case   19:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000020) );
		/* 82149284h case   19:*/		return 0x82149288;
		  /* 82149288h */ case   20:  		/* stw R31, <#[R30 + 36]> */
		/* 82149288h case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000024) );
		/* 82149288h case   20:*/		return 0x8214928C;
		  /* 8214928Ch */ case   21:  		/* stw R31, <#[R30 + 40]> */
		/* 8214928Ch case   21:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000028) );
		/* 8214928Ch case   21:*/		return 0x82149290;
		  /* 82149290h */ case   22:  		/* stw R31, <#[R30 + 44]> */
		/* 82149290h case   22:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000002C) );
		/* 82149290h case   22:*/		return 0x82149294;
		  /* 82149294h */ case   23:  		/* stw R31, <#[R30 + 48]> */
		/* 82149294h case   23:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000030) );
		/* 82149294h case   23:*/		return 0x82149298;
		  /* 82149298h */ case   24:  		/* stw R31, <#[R30 + 52]> */
		/* 82149298h case   24:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000034) );
		/* 82149298h case   24:*/		return 0x8214929C;
		  /* 8214929Ch */ case   25:  		/* stw R31, <#[R30 + 56]> */
		/* 8214929Ch case   25:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000038) );
		/* 8214929Ch case   25:*/		return 0x821492A0;
		  /* 821492A0h */ case   26:  		/* stw R31, <#[R30 + 60]> */
		/* 821492A0h case   26:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000003C) );
		/* 821492A0h case   26:*/		return 0x821492A4;
		  /* 821492A4h */ case   27:  		/* stw R31, <#[R30 + 64]> */
		/* 821492A4h case   27:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000040) );
		/* 821492A4h case   27:*/		return 0x821492A8;
		  /* 821492A8h */ case   28:  		/* stw R10, <#[R30 + 136]> */
		/* 821492A8h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000088) );
		/* 821492A8h case   28:*/		return 0x821492AC;
		  /* 821492ACh */ case   29:  		/* stw R31, <#[R30 + 144]> */
		/* 821492ACh case   29:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000090) );
		/* 821492ACh case   29:*/		return 0x821492B0;
		  /* 821492B0h */ case   30:  		/* stw R31, <#[R30 + 148]> */
		/* 821492B0h case   30:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000094) );
		/* 821492B0h case   30:*/		return 0x821492B4;
		  /* 821492B4h */ case   31:  		/* stw R31, <#[R30 + 152]> */
		/* 821492B4h case   31:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000098) );
		/* 821492B4h case   31:*/		return 0x821492B8;
		  /* 821492B8h */ case   32:  		/* sth R31, <#[R30 + 156]> */
		/* 821492B8h case   32:*/		cpu::mem::store16( regs, regs.R31, (uint32)(regs.R30 + 0x0000009C) );
		/* 821492B8h case   32:*/		return 0x821492BC;
		  /* 821492BCh */ case   33:  		/* sth R31, <#[R30 + 158]> */
		/* 821492BCh case   33:*/		cpu::mem::store16( regs, regs.R31, (uint32)(regs.R30 + 0x0000009E) );
		/* 821492BCh case   33:*/		return 0x821492C0;
		  /* 821492C0h */ case   34:  		/* stw R31, <#[R30 + 36]> */
		/* 821492C0h case   34:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000024) );
		/* 821492C0h case   34:*/		return 0x821492C4;
		  /* 821492C4h */ case   35:  		/* lwz R11, <#[R30 + 40]> */
		/* 821492C4h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 821492C4h case   35:*/		return 0x821492C8;
		  /* 821492C8h */ case   36:  		/* cmplwi CR6, R11, 1 */
		/* 821492C8h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821492C8h case   36:*/		return 0x821492CC;
		  /* 821492CCh */ case   37:  		/* bc 4, CR6_LT, 16 */
		/* 821492CCh case   37:*/		if ( !regs.CR[6].lt ) { return 0x821492DC;  }
		/* 821492CCh case   37:*/		return 0x821492D0;
		  /* 821492D0h */ case   38:  		/* mr R5, R27 */
		/* 821492D0h case   38:*/		regs.R5 = regs.R27;
		/* 821492D0h case   38:*/		return 0x821492D4;
		  /* 821492D4h */ case   39:  		/* li R4, 1 */
		/* 821492D4h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821492D4h case   39:*/		return 0x821492D8;
		  /* 821492D8h */ case   40:  		/* bl -10368 */
		/* 821492D8h case   40:*/		regs.LR = 0x821492DC; return 0x82146A58;
		/* 821492D8h case   40:*/		return 0x821492DC;
	}
	return 0x821492DC;
} // Block from 82149238h-821492DCh (41 instructions)

//////////////////////////////////////////////////////
// Block at 821492DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821492DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821492DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821492DC);
		  /* 821492DCh */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 821492DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821492DCh case    0:*/		return 0x821492E0;
		  /* 821492E0h */ case    1:  		/* stw R31, <#[R29 + 4]> */
		/* 821492E0h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821492E0h case    1:*/		return 0x821492E4;
		  /* 821492E4h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 821492E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821492E4h case    2:*/		return 0x821492E8;
		  /* 821492E8h */ case    3:  		/* bc 4, CR6_LT, 20 */
		/* 821492E8h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821492FC;  }
		/* 821492E8h case    3:*/		return 0x821492EC;
		  /* 821492ECh */ case    4:  		/* mr R5, R27 */
		/* 821492ECh case    4:*/		regs.R5 = regs.R27;
		/* 821492ECh case    4:*/		return 0x821492F0;
		  /* 821492F0h */ case    5:  		/* li R4, 1 */
		/* 821492F0h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821492F0h case    5:*/		return 0x821492F4;
		  /* 821492F4h */ case    6:  		/* mr R3, R29 */
		/* 821492F4h case    6:*/		regs.R3 = regs.R29;
		/* 821492F4h case    6:*/		return 0x821492F8;
	}
	return 0x821492F8;
} // Block from 821492DCh-821492F8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821492F8h
// Function '?WriteTool@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821492F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821492F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821492F8);
		  /* 821492F8h */ case    0:  		/* bl -10544 */
		/* 821492F8h case    0:*/		regs.LR = 0x821492FC; return 0x821469C8;
		/* 821492F8h case    0:*/		return 0x821492FC;
	}
	return 0x821492FC;
} // Block from 821492F8h-821492FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821492FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821492FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821492FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821492FC);
		  /* 821492FCh */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 821492FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821492FCh case    0:*/		return 0x82149300;
		  /* 82149300h */ case    1:  		/* stw R31, <#[R28 + 4]> */
		/* 82149300h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x00000004) );
		/* 82149300h case    1:*/		return 0x82149304;
		  /* 82149304h */ case    2:  		/* cmplwi CR6, R11, 8 */
		/* 82149304h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 82149304h case    2:*/		return 0x82149308;
		  /* 82149308h */ case    3:  		/* bc 4, CR6_LT, 20 */
		/* 82149308h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8214931C;  }
		/* 82149308h case    3:*/		return 0x8214930C;
		  /* 8214930Ch */ case    4:  		/* mr R5, R27 */
		/* 8214930Ch case    4:*/		regs.R5 = regs.R27;
		/* 8214930Ch case    4:*/		return 0x82149310;
		  /* 82149310h */ case    5:  		/* li R4, 8 */
		/* 82149310h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 82149310h case    5:*/		return 0x82149314;
		  /* 82149314h */ case    6:  		/* mr R3, R28 */
		/* 82149314h case    6:*/		regs.R3 = regs.R28;
		/* 82149314h case    6:*/		return 0x82149318;
		  /* 82149318h */ case    7:  		/* bl -10152 */
		/* 82149318h case    7:*/		regs.LR = 0x8214931C; return 0x82146B70;
		/* 82149318h case    7:*/		return 0x8214931C;
	}
	return 0x8214931C;
} // Block from 821492FCh-8214931Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214931Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214931C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214931C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214931C);
		  /* 8214931Ch */ case    0:  		/* stw R31, <#[R30 + 128]> */
		/* 8214931Ch case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000080) );
		/* 8214931Ch case    0:*/		return 0x82149320;
		  /* 82149320h */ case    1:  		/* mr R3, R30 */
		/* 82149320h case    1:*/		regs.R3 = regs.R30;
		/* 82149320h case    1:*/		return 0x82149324;
		  /* 82149324h */ case    2:  		/* stw R31, <#[R30 + 160]> */
		/* 82149324h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x000000A0) );
		/* 82149324h case    2:*/		return 0x82149328;
		  /* 82149328h */ case    3:  		/* stw R31, <#[R30 + 164]> */
		/* 82149328h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x000000A4) );
		/* 82149328h case    3:*/		return 0x8214932C;
		  /* 8214932Ch */ case    4:  		/* stw R31, <#[R30 + 168]> */
		/* 8214932Ch case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x000000A8) );
		/* 8214932Ch case    4:*/		return 0x82149330;
		  /* 82149330h */ case    5:  		/* addi R1, R1, 128 */
		/* 82149330h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82149330h case    5:*/		return 0x82149334;
		  /* 82149334h */ case    6:  		/* b -753808 */
		/* 82149334h case    6:*/		return 0x820912A4;
		/* 82149334h case    6:*/		return 0x82149338;
	}
	return 0x82149338;
} // Block from 8214931Ch-82149338h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82149338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149338);
		  /* 82149338h */ case    0:  		/* lwz R11, <#[R3 + 136]> */
		/* 82149338h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000088) );
		/* 82149338h case    0:*/		return 0x8214933C;
		  /* 8214933Ch */ case    1:  		/* mr R10, R3 */
		/* 8214933Ch case    1:*/		regs.R10 = regs.R3;
		/* 8214933Ch case    1:*/		return 0x82149340;
		  /* 82149340h */ case    2:  		/* addi R3, R11, 1 */
		/* 82149340h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x1);
		/* 82149340h case    2:*/		return 0x82149344;
		  /* 82149344h */ case    3:  		/* stw R3, <#[R10 + 136]> */
		/* 82149344h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + 0x00000088) );
		/* 82149344h case    3:*/		return 0x82149348;
		  /* 82149348h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82149348h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82149348h case    4:*/		return 0x8214934C;
	}
	return 0x8214934C;
} // Block from 82149338h-8214934Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214934Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214934C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214934C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214934C);
		  /* 8214934Ch */ case    0:  		/* nop */
		/* 8214934Ch case    0:*/		cpu::op::nop();
		/* 8214934Ch case    0:*/		return 0x82149350;
	}
	return 0x82149350;
} // Block from 8214934Ch-82149350h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149350);
		  /* 82149350h */ case    0:  		/* lwz R11, <#[R3 + 128]> */
		/* 82149350h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 82149350h case    0:*/		return 0x82149354;
		  /* 82149354h */ case    1:  		/* stw R4, <#[R11 + 272]> */
		/* 82149354h case    1:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000110) );
		/* 82149354h case    1:*/		return 0x82149358;
		  /* 82149358h */ case    2:  		/* lhz R11, <#[R3 + 156]> */
		/* 82149358h case    2:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000009C) );
		/* 82149358h case    2:*/		return 0x8214935C;
		  /* 8214935Ch */ case    3:  		/* addi R11, R11, 1 */
		/* 8214935Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214935Ch case    3:*/		return 0x82149360;
		  /* 82149360h */ case    4:  		/* sth R11, <#[R3 + 156]> */
		/* 82149360h case    4:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R3 + 0x0000009C) );
		/* 82149360h case    4:*/		return 0x82149364;
		  /* 82149364h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82149364h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82149364h case    5:*/		return 0x82149368;
	}
	return 0x82149368;
} // Block from 82149350h-82149368h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82149368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149368);
		  /* 82149368h */ case    0:  		/* mfspr R12, LR */
		/* 82149368h case    0:*/		regs.R12 = regs.LR;
		/* 82149368h case    0:*/		return 0x8214936C;
		  /* 8214936Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214936Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214936Ch case    1:*/		return 0x82149370;
		  /* 82149370h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82149370h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82149370h case    2:*/		return 0x82149374;
		  /* 82149374h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82149374h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82149374h case    3:*/		return 0x82149378;
		  /* 82149378h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82149378h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82149378h case    4:*/		return 0x8214937C;
		  /* 8214937Ch */ case    5:  		/* lwz R4, <#[R3]> */
		/* 8214937Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000000) );
		/* 8214937Ch case    5:*/		return 0x82149380;
		  /* 82149380h */ case    6:  		/* mr R31, R3 */
		/* 82149380h case    6:*/		regs.R31 = regs.R3;
		/* 82149380h case    6:*/		return 0x82149384;
		  /* 82149384h */ case    7:  		/* li R30, 0 */
		/* 82149384h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82149384h case    7:*/		return 0x82149388;
		  /* 82149388h */ case    8:  		/* cmplwi CR6, R4, 0 */
		/* 82149388h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82149388h case    8:*/		return 0x8214938C;
		  /* 8214938Ch */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 8214938Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82149398;  }
		/* 8214938Ch case    9:*/		return 0x82149390;
		  /* 82149390h */ case   10:  		/* bl 39424 */
		/* 82149390h case   10:*/		regs.LR = 0x82149394; return 0x82152D90;
		/* 82149390h case   10:*/		return 0x82149394;
		  /* 82149394h */ case   11:  		/* stw R30, <#[R31]> */
		/* 82149394h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 82149394h case   11:*/		return 0x82149398;
	}
	return 0x82149398;
} // Block from 82149368h-82149398h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82149398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149398);
		  /* 82149398h */ case    0:  		/* stw R30, <#[R31 + 4]> */
		/* 82149398h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 82149398h case    0:*/		return 0x8214939C;
		  /* 8214939Ch */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 8214939Ch case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 8214939Ch case    1:*/		return 0x821493A0;
		  /* 821493A0h */ case    2:  		/* addi R1, R1, 112 */
		/* 821493A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821493A0h case    2:*/		return 0x821493A4;
		  /* 821493A4h */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 821493A4h case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821493A4h case    3:*/		return 0x821493A8;
		  /* 821493A8h */ case    4:  		/* mtspr LR, R12 */
		/* 821493A8h case    4:*/		regs.LR = regs.R12;
		/* 821493A8h case    4:*/		return 0x821493AC;
		  /* 821493ACh */ case    5:  		/* ld R30, <#[R1 - 24]> */
		/* 821493ACh case    5:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821493ACh case    5:*/		return 0x821493B0;
		  /* 821493B0h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 821493B0h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821493B0h case    6:*/		return 0x821493B4;
		  /* 821493B4h */ case    7:  		/* bclr 20, CR0_LT */
		/* 821493B4h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821493B4h case    7:*/		return 0x821493B8;
	}
	return 0x821493B8;
} // Block from 82149398h-821493B8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821493B8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821493B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821493B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821493B8);
		  /* 821493B8h */ case    0:  		/* mfspr R12, LR */
		/* 821493B8h case    0:*/		regs.R12 = regs.LR;
		/* 821493B8h case    0:*/		return 0x821493BC;
		  /* 821493BCh */ case    1:  		/* bl -754020 */
		/* 821493BCh case    1:*/		regs.LR = 0x821493C0; return 0x82091258;
		/* 821493BCh case    1:*/		return 0x821493C0;
		  /* 821493C0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821493C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821493C0h case    2:*/		return 0x821493C4;
		  /* 821493C4h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 821493C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821493C4h case    3:*/		return 0x821493C8;
		  /* 821493C8h */ case    4:  		/* mr R31, R3 */
		/* 821493C8h case    4:*/		regs.R31 = regs.R3;
		/* 821493C8h case    4:*/		return 0x821493CC;
		  /* 821493CCh */ case    5:  		/* mr R28, R5 */
		/* 821493CCh case    5:*/		regs.R28 = regs.R5;
		/* 821493CCh case    5:*/		return 0x821493D0;
		  /* 821493D0h */ case    6:  		/* cmplw CR6, R4, R11 */
		/* 821493D0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821493D0h case    6:*/		return 0x821493D4;
		  /* 821493D4h */ case    7:  		/* bc 4, CR6_GT, 104 */
		/* 821493D4h case    7:*/		if ( !regs.CR[6].gt ) { return 0x8214943C;  }
		/* 821493D4h case    7:*/		return 0x821493D8;
		  /* 821493D8h */ case    8:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 821493D8h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 821493D8h case    8:*/		return 0x821493DC;
		  /* 821493DCh */ case    9:  		/* cmplw CR6, R30, R4 */
		/* 821493DCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 821493DCh case    9:*/		return 0x821493E0;
		  /* 821493E0h */ case   10:  		/* bc 4, CR6_LT, 8 */
		/* 821493E0h case   10:*/		if ( !regs.CR[6].lt ) { return 0x821493E8;  }
		/* 821493E0h case   10:*/		return 0x821493E4;
		  /* 821493E4h */ case   11:  		/* mr R30, R4 */
		/* 821493E4h case   11:*/		regs.R30 = regs.R4;
		/* 821493E4h case   11:*/		return 0x821493E8;
	}
	return 0x821493E8;
} // Block from 821493B8h-821493E8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821493E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821493E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821493E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821493E8);
		  /* 821493E8h */ case    0:  		/* rlwinm R4, R30, 2, 0, 29 */
		/* 821493E8h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R30);
		/* 821493E8h case    0:*/		return 0x821493EC;
		  /* 821493ECh */ case    1:  		/* mr R3, R31 */
		/* 821493ECh case    1:*/		regs.R3 = regs.R31;
		/* 821493ECh case    1:*/		return 0x821493F0;
		  /* 821493F0h */ case    2:  		/* bl 39312 */
		/* 821493F0h case    2:*/		regs.LR = 0x821493F4; return 0x82152D80;
		/* 821493F0h case    2:*/		return 0x821493F4;
		  /* 821493F4h */ case    3:  		/* or. R29, R3, R3 */
		/* 821493F4h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821493F4h case    3:*/		return 0x821493F8;
		  /* 821493F8h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 821493F8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214940C;  }
		/* 821493F8h case    4:*/		return 0x821493FC;
		  /* 821493FCh */ case    5:  		/* lis R11, -32761 */
		/* 821493FCh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 821493FCh case    5:*/		return 0x82149400;
		  /* 82149400h */ case    6:  		/* ori R11, R11, 14 */
		/* 82149400h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82149400h case    6:*/		return 0x82149404;
		  /* 82149404h */ case    7:  		/* stw R11, <#[R28]> */
		/* 82149404h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82149404h case    7:*/		return 0x82149408;
		  /* 82149408h */ case    8:  		/* b 52 */
		/* 82149408h case    8:*/		return 0x8214943C;
		/* 82149408h case    8:*/		return 0x8214940C;
	}
	return 0x8214940C;
} // Block from 821493E8h-8214940Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214940Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214940C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214940C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214940C);
		  /* 8214940Ch */ case    0:  		/* lwz R4, <#[R31]> */
		/* 8214940Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8214940Ch case    0:*/		return 0x82149410;
		  /* 82149410h */ case    1:  		/* stw R30, <#[R31 + 8]> */
		/* 82149410h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 82149410h case    1:*/		return 0x82149414;
		  /* 82149414h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82149414h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82149414h case    2:*/		return 0x82149418;
		  /* 82149418h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82149418h case    3:*/		if ( regs.CR[6].eq ) { return 0x82149438;  }
		/* 82149418h case    3:*/		return 0x8214941C;
		  /* 8214941Ch */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214941Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214941Ch case    4:*/		return 0x82149420;
		  /* 82149420h */ case    5:  		/* mr R3, R29 */
		/* 82149420h case    5:*/		regs.R3 = regs.R29;
		/* 82149420h case    5:*/		return 0x82149424;
		  /* 82149424h */ case    6:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82149424h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82149424h case    6:*/		return 0x82149428;
		  /* 82149428h */ case    7:  		/* bl -752248 */
		/* 82149428h case    7:*/		regs.LR = 0x8214942C; return 0x820919B0;
		/* 82149428h case    7:*/		return 0x8214942C;
		  /* 8214942Ch */ case    8:  		/* mr R3, R31 */
		/* 8214942Ch case    8:*/		regs.R3 = regs.R31;
		/* 8214942Ch case    8:*/		return 0x82149430;
		  /* 82149430h */ case    9:  		/* lwz R4, <#[R31]> */
		/* 82149430h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82149430h case    9:*/		return 0x82149434;
		  /* 82149434h */ case   10:  		/* bl 39260 */
		/* 82149434h case   10:*/		regs.LR = 0x82149438; return 0x82152D90;
		/* 82149434h case   10:*/		return 0x82149438;
	}
	return 0x82149438;
} // Block from 8214940Ch-82149438h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82149438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149438);
		  /* 82149438h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82149438h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82149438h case    0:*/		return 0x8214943C;
	}
	return 0x8214943C;
} // Block from 82149438h-8214943Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214943Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214943C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214943C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214943C);
		  /* 8214943Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8214943Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214943Ch case    0:*/		return 0x82149440;
		  /* 82149440h */ case    1:  		/* b -754072 */
		/* 82149440h case    1:*/		return 0x820912A8;
		/* 82149440h case    1:*/		return 0x82149444;
		  /* 82149444h */ case    2:  		/* nop */
		/* 82149444h case    2:*/		cpu::op::nop();
		/* 82149444h case    2:*/		return 0x82149448;
	}
	return 0x82149448;
} // Block from 8214943Ch-82149448h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82149448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149448);
		  /* 82149448h */ case    0:  		/* mfspr R12, LR */
		/* 82149448h case    0:*/		regs.R12 = regs.LR;
		/* 82149448h case    0:*/		return 0x8214944C;
		  /* 8214944Ch */ case    1:  		/* bl -754180 */
		/* 8214944Ch case    1:*/		regs.LR = 0x82149450; return 0x82091248;
		/* 8214944Ch case    1:*/		return 0x82149450;
		  /* 82149450h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82149450h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82149450h case    2:*/		return 0x82149454;
		  /* 82149454h */ case    3:  		/* lis R11, -32253 */
		/* 82149454h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149454h case    3:*/		return 0x82149458;
		  /* 82149458h */ case    4:  		/* lwz R26, <#[R3 + 16]> */
		/* 82149458h case    4:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R3 + 0x00000010) );
		/* 82149458h case    4:*/		return 0x8214945C;
		  /* 8214945Ch */ case    5:  		/* mr R25, R3 */
		/* 8214945Ch case    5:*/		regs.R25 = regs.R3;
		/* 8214945Ch case    5:*/		return 0x82149460;
		  /* 82149460h */ case    6:  		/* addi R11, R11, 26548 */
		/* 82149460h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x67B4);
		/* 82149460h case    6:*/		return 0x82149464;
		  /* 82149464h */ case    7:  		/* rlwinm R10, R26, 0, 0, 31 */
		/* 82149464h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R26);
		/* 82149464h case    7:*/		return 0x82149468;
		  /* 82149468h */ case    8:  		/* stw R11, <#[R3]> */
		/* 82149468h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82149468h case    8:*/		return 0x8214946C;
		  /* 8214946Ch */ case    9:  		/* addi R24, R3, 16 */
		/* 8214946Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R3,0x10);
		/* 8214946Ch case    9:*/		return 0x82149470;
		  /* 82149470h */ case   10:  		/* lwz R11, <#[R3 + 20]> */
		/* 82149470h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82149470h case   10:*/		return 0x82149474;
		  /* 82149474h */ case   11:  		/* mulli R11, R11, 476 */
		/* 82149474h case   11:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1DC);
		/* 82149474h case   11:*/		return 0x82149478;
		  /* 82149478h */ case   12:  		/* add R11, R11, R10 */
		/* 82149478h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82149478h case   12:*/		return 0x8214947C;
		  /* 8214947Ch */ case   13:  		/* cmplw CR6, R26, R11 */
		/* 8214947Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 8214947Ch case   13:*/		return 0x82149480;
		  /* 82149480h */ case   14:  		/* bc 4, CR6_LT, 336 */
		/* 82149480h case   14:*/		if ( !regs.CR[6].lt ) { return 0x821495D0;  }
		/* 82149480h case   14:*/		return 0x82149484;
		  /* 82149484h */ case   15:  		/* addi R31, R26, 448 */
		/* 82149484h case   15:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R26,0x1C0);
		/* 82149484h case   15:*/		return 0x82149488;
		  /* 82149488h */ case   16:  		/* lis R4, 9351 */
		/* 82149488h case   16:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 82149488h case   16:*/		return 0x8214948C;
		  /* 8214948Ch */ case   17:  		/* lwz R3, <#[R31 - 60]> */
		/* 8214948Ch case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0xFFFFFFC4) );
		/* 8214948Ch case   17:*/		return 0x82149490;
		  /* 82149490h */ case   18:  		/* bl -790872 */
		/* 82149490h case   18:*/		regs.LR = 0x82149494; return 0x82088338;
		/* 82149490h case   18:*/		return 0x82149494;
		  /* 82149494h */ case   19:  		/* addi R3, R31, -172 */
		/* 82149494h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFF54);
		/* 82149494h case   19:*/		return 0x82149498;
		  /* 82149498h */ case   20:  		/* bl -304 */
		/* 82149498h case   20:*/		regs.LR = 0x8214949C; return 0x82149368;
		/* 82149498h case   20:*/		return 0x8214949C;
		  /* 8214949Ch */ case   21:  		/* addi R3, R31, -160 */
		/* 8214949Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFF60);
		/* 8214949Ch case   21:*/		return 0x821494A0;
		  /* 821494A0h */ case   22:  		/* bl -312 */
		/* 821494A0h case   22:*/		regs.LR = 0x821494A4; return 0x82149368;
		/* 821494A0h case   22:*/		return 0x821494A4;
		  /* 821494A4h */ case   23:  		/* addi R3, R31, -148 */
		/* 821494A4h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFF6C);
		/* 821494A4h case   23:*/		return 0x821494A8;
		  /* 821494A8h */ case   24:  		/* bl -320 */
		/* 821494A8h case   24:*/		regs.LR = 0x821494AC; return 0x82149368;
		/* 821494A8h case   24:*/		return 0x821494AC;
		  /* 821494ACh */ case   25:  		/* addi R3, R31, -136 */
		/* 821494ACh case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFF78);
		/* 821494ACh case   25:*/		return 0x821494B0;
		  /* 821494B0h */ case   26:  		/* bl -328 */
		/* 821494B0h case   26:*/		regs.LR = 0x821494B4; return 0x82149368;
		/* 821494B0h case   26:*/		return 0x821494B4;
		  /* 821494B4h */ case   27:  		/* addi R3, R31, -124 */
		/* 821494B4h case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFF84);
		/* 821494B4h case   27:*/		return 0x821494B8;
		  /* 821494B8h */ case   28:  		/* bl -336 */
		/* 821494B8h case   28:*/		regs.LR = 0x821494BC; return 0x82149368;
		/* 821494B8h case   28:*/		return 0x821494BC;
		  /* 821494BCh */ case   29:  		/* addi R3, R31, -112 */
		/* 821494BCh case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFF90);
		/* 821494BCh case   29:*/		return 0x821494C0;
		  /* 821494C0h */ case   30:  		/* bl -504520 */
		/* 821494C0h case   30:*/		regs.LR = 0x821494C4; return 0x820CE1F8;
		/* 821494C0h case   30:*/		return 0x821494C4;
		  /* 821494C4h */ case   31:  		/* addi R3, R31, -96 */
		/* 821494C4h case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFFA0);
		/* 821494C4h case   31:*/		return 0x821494C8;
		  /* 821494C8h */ case   32:  		/* bl -352 */
		/* 821494C8h case   32:*/		regs.LR = 0x821494CC; return 0x82149368;
		/* 821494C8h case   32:*/		return 0x821494CC;
		  /* 821494CCh */ case   33:  		/* addi R3, R31, -84 */
		/* 821494CCh case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFFAC);
		/* 821494CCh case   33:*/		return 0x821494D0;
		  /* 821494D0h */ case   34:  		/* bl -360 */
		/* 821494D0h case   34:*/		regs.LR = 0x821494D4; return 0x82149368;
		/* 821494D0h case   34:*/		return 0x821494D4;
		  /* 821494D4h */ case   35:  		/* lwz R10, <#[R31 - 72]> */
		/* 821494D4h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0xFFFFFFB8) );
		/* 821494D4h case   35:*/		return 0x821494D8;
		  /* 821494D8h */ case   36:  		/* addi R29, R31, -72 */
		/* 821494D8h case   36:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0xFFFFFFB8);
		/* 821494D8h case   36:*/		return 0x821494DC;
		  /* 821494DCh */ case   37:  		/* extsw R30, R10 */
		/* 821494DCh case   37:*/		cpu::op::extsw<0>(regs,&regs.R30,regs.R10);
		/* 821494DCh case   37:*/		return 0x821494E0;
		  /* 821494E0h */ case   38:  		/* b 20 */
		/* 821494E0h case   38:*/		return 0x821494F4;
		/* 821494E0h case   38:*/		return 0x821494E4;
		  /* 821494E4h */ case   39:  		/* addi R3, R30, 8 */
		/* 821494E4h case   39:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x8);
		/* 821494E4h case   39:*/		return 0x821494E8;
		  /* 821494E8h */ case   40:  		/* bl -384 */
		/* 821494E8h case   40:*/		regs.LR = 0x821494EC; return 0x82149368;
		/* 821494E8h case   40:*/		return 0x821494EC;
		  /* 821494ECh */ case   41:  		/* lwz R10, <#[R29]> */
		/* 821494ECh case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821494ECh case   41:*/		return 0x821494F0;
		  /* 821494F0h */ case   42:  		/* addi R30, R30, 20 */
		/* 821494F0h case   42:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x14);
		/* 821494F0h case   42:*/		return 0x821494F4;
	}
	return 0x821494F4;
} // Block from 82149448h-821494F4h (43 instructions)

//////////////////////////////////////////////////////
// Block at 821494F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821494F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821494F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821494F4);
		  /* 821494F4h */ case    0:  		/* lwz R11, <#[R31 - 68]> */
		/* 821494F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFBC) );
		/* 821494F4h case    0:*/		return 0x821494F8;
		  /* 821494F8h */ case    1:  		/* mulli R11, R11, 20 */
		/* 821494F8h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x14);
		/* 821494F8h case    1:*/		return 0x821494FC;
		  /* 821494FCh */ case    2:  		/* add R11, R11, R10 */
		/* 821494FCh case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821494FCh case    2:*/		return 0x82149500;
		  /* 82149500h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 82149500h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82149500h case    3:*/		return 0x82149504;
		  /* 82149504h */ case    4:  		/* bc 12, CR6_LT, -32 */
		/* 82149504h case    4:*/		if ( regs.CR[6].lt ) { return 0x821494E4;  }
		/* 82149504h case    4:*/		return 0x82149508;
		  /* 82149508h */ case    5:  		/* mr R3, R29 */
		/* 82149508h case    5:*/		regs.R3 = regs.R29;
		/* 82149508h case    5:*/		return 0x8214950C;
		  /* 8214950Ch */ case    6:  		/* bl -420 */
		/* 8214950Ch case    6:*/		regs.LR = 0x82149510; return 0x82149368;
		/* 8214950Ch case    6:*/		return 0x82149510;
		  /* 82149510h */ case    7:  		/* addi R3, R31, -52 */
		/* 82149510h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFFCC);
		/* 82149510h case    7:*/		return 0x82149514;
		  /* 82149514h */ case    8:  		/* bl -428 */
		/* 82149514h case    8:*/		regs.LR = 0x82149518; return 0x82149368;
		/* 82149514h case    8:*/		return 0x82149518;
		  /* 82149518h */ case    9:  		/* addi R3, R31, -40 */
		/* 82149518h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFFD8);
		/* 82149518h case    9:*/		return 0x8214951C;
		  /* 8214951Ch */ case   10:  		/* bl -436 */
		/* 8214951Ch case   10:*/		regs.LR = 0x82149520; return 0x82149368;
		/* 8214951Ch case   10:*/		return 0x82149520;
		  /* 82149520h */ case   11:  		/* addi R3, R31, -28 */
		/* 82149520h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFFE4);
		/* 82149520h case   11:*/		return 0x82149524;
		  /* 82149524h */ case   12:  		/* bl -444 */
		/* 82149524h case   12:*/		regs.LR = 0x82149528; return 0x82149368;
		/* 82149524h case   12:*/		return 0x82149528;
	}
	return 0x82149528;
} // Block from 821494F4h-82149528h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82149528h
// Function '?WriteVariableInfo@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAV?$FastVector@UVariableInfo@XGRAPHICS@@@2@PAVCCommentBlock@D3DXShader@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149528);
		  /* 82149528h */ case    0:  		/* addi R3, R31, -16 */
		/* 82149528h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xFFFFFFF0);
		/* 82149528h case    0:*/		return 0x8214952C;
		  /* 8214952Ch */ case    1:  		/* bl -452 */
		/* 8214952Ch case    1:*/		regs.LR = 0x82149530; return 0x82149368;
		/* 8214952Ch case    1:*/		return 0x82149530;
		  /* 82149530h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82149530h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82149530h case    2:*/		return 0x82149534;
		  /* 82149534h */ case    3:  		/* lwz R10, <#[R31 - 4]> */
		/* 82149534h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 82149534h case    3:*/		return 0x82149538;
		  /* 82149538h */ case    4:  		/* addi R27, R31, -4 */
		/* 82149538h case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R31,0xFFFFFFFC);
		/* 82149538h case    4:*/		return 0x8214953C;
		  /* 8214953Ch */ case    5:  		/* mulli R11, R11, 24 */
		/* 8214953Ch case    5:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x18);
		/* 8214953Ch case    5:*/		return 0x82149540;
		  /* 82149540h */ case    6:  		/* extsw R29, R10 */
		/* 82149540h case    6:*/		cpu::op::extsw<0>(regs,&regs.R29,regs.R10);
		/* 82149540h case    6:*/		return 0x82149544;
		  /* 82149544h */ case    7:  		/* add R11, R11, R10 */
		/* 82149544h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82149544h case    7:*/		return 0x82149548;
		  /* 82149548h */ case    8:  		/* cmplw CR6, R29, R11 */
		/* 82149548h case    8:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82149548h case    8:*/		return 0x8214954C;
		  /* 8214954Ch */ case    9:  		/* bc 4, CR6_LT, 92 */
		/* 8214954Ch case    9:*/		if ( !regs.CR[6].lt ) { return 0x821495A8;  }
		/* 8214954Ch case    9:*/		return 0x82149550;
		  /* 82149550h */ case   10:  		/* addi R30, R29, 12 */
		/* 82149550h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0xC);
		/* 82149550h case   10:*/		return 0x82149554;
		  /* 82149554h */ case   11:  		/* lwz R28, <#[R30]> */
		/* 82149554h case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000000) );
		/* 82149554h case   11:*/		return 0x82149558;
		  /* 82149558h */ case   12:  		/* b 16 */
		/* 82149558h case   12:*/		return 0x82149568;
		/* 82149558h case   12:*/		return 0x8214955C;
		  /* 8214955Ch */ case   13:  		/* addi R3, R28, 16 */
		/* 8214955Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R28,0x10);
		/* 8214955Ch case   13:*/		return 0x82149560;
		  /* 82149560h */ case   14:  		/* bl -504 */
		/* 82149560h case   14:*/		regs.LR = 0x82149564; return 0x82149368;
		/* 82149560h case   14:*/		return 0x82149564;
		  /* 82149564h */ case   15:  		/* addi R28, R28, 28 */
		/* 82149564h case   15:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1C);
		/* 82149564h case   15:*/		return 0x82149568;
	}
	return 0x82149568;
} // Block from 82149528h-82149568h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82149568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149568);
		  /* 82149568h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82149568h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82149568h case    0:*/		return 0x8214956C;
		  /* 8214956Ch */ case    1:  		/* lwz R10, <#[R30]> */
		/* 8214956Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8214956Ch case    1:*/		return 0x82149570;
		  /* 82149570h */ case    2:  		/* mulli R11, R11, 28 */
		/* 82149570h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1C);
		/* 82149570h case    2:*/		return 0x82149574;
		  /* 82149574h */ case    3:  		/* add R11, R11, R10 */
		/* 82149574h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82149574h case    3:*/		return 0x82149578;
		  /* 82149578h */ case    4:  		/* cmplw CR6, R28, R11 */
		/* 82149578h case    4:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82149578h case    4:*/		return 0x8214957C;
		  /* 8214957Ch */ case    5:  		/* bc 12, CR6_LT, -32 */
		/* 8214957Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x8214955C;  }
		/* 8214957Ch case    5:*/		return 0x82149580;
		  /* 82149580h */ case    6:  		/* mr R3, R30 */
		/* 82149580h case    6:*/		regs.R3 = regs.R30;
		/* 82149580h case    6:*/		return 0x82149584;
		  /* 82149584h */ case    7:  		/* bl -540 */
		/* 82149584h case    7:*/		regs.LR = 0x82149588; return 0x82149368;
		/* 82149584h case    7:*/		return 0x82149588;
		  /* 82149588h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 82149588h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82149588h case    8:*/		return 0x8214958C;
		  /* 8214958Ch */ case    9:  		/* lwz R10, <#[R27]> */
		/* 8214958Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 8214958Ch case    9:*/		return 0x82149590;
		  /* 82149590h */ case   10:  		/* addi R29, R29, 24 */
		/* 82149590h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x18);
		/* 82149590h case   10:*/		return 0x82149594;
		  /* 82149594h */ case   11:  		/* mulli R11, R11, 24 */
		/* 82149594h case   11:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x18);
		/* 82149594h case   11:*/		return 0x82149598;
		  /* 82149598h */ case   12:  		/* add R11, R11, R10 */
		/* 82149598h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82149598h case   12:*/		return 0x8214959C;
		  /* 8214959Ch */ case   13:  		/* addi R30, R30, 24 */
		/* 8214959Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x18);
		/* 8214959Ch case   13:*/		return 0x821495A0;
		  /* 821495A0h */ case   14:  		/* cmplw CR6, R29, R11 */
		/* 821495A0h case   14:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821495A0h case   14:*/		return 0x821495A4;
		  /* 821495A4h */ case   15:  		/* bc 12, CR6_LT, -80 */
		/* 821495A4h case   15:*/		if ( regs.CR[6].lt ) { return 0x82149554;  }
		/* 821495A4h case   15:*/		return 0x821495A8;
	}
	return 0x821495A8;
} // Block from 82149568h-821495A8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821495A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821495A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821495A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821495A8);
		  /* 821495A8h */ case    0:  		/* mr R3, R27 */
		/* 821495A8h case    0:*/		regs.R3 = regs.R27;
		/* 821495A8h case    0:*/		return 0x821495AC;
		  /* 821495ACh */ case    1:  		/* bl -580 */
		/* 821495ACh case    1:*/		regs.LR = 0x821495B0; return 0x82149368;
		/* 821495ACh case    1:*/		return 0x821495B0;
		  /* 821495B0h */ case    2:  		/* lwz R11, <#[R24 + 4]> */
		/* 821495B0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821495B0h case    2:*/		return 0x821495B4;
		  /* 821495B4h */ case    3:  		/* lwz R10, <#[R24]> */
		/* 821495B4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 821495B4h case    3:*/		return 0x821495B8;
		  /* 821495B8h */ case    4:  		/* addi R26, R26, 476 */
		/* 821495B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1DC);
		/* 821495B8h case    4:*/		return 0x821495BC;
		  /* 821495BCh */ case    5:  		/* mulli R11, R11, 476 */
		/* 821495BCh case    5:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1DC);
		/* 821495BCh case    5:*/		return 0x821495C0;
		  /* 821495C0h */ case    6:  		/* add R11, R11, R10 */
		/* 821495C0h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821495C0h case    6:*/		return 0x821495C4;
		  /* 821495C4h */ case    7:  		/* addi R31, R31, 476 */
		/* 821495C4h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1DC);
		/* 821495C4h case    7:*/		return 0x821495C8;
		  /* 821495C8h */ case    8:  		/* cmplw CR6, R26, R11 */
		/* 821495C8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 821495C8h case    8:*/		return 0x821495CC;
		  /* 821495CCh */ case    9:  		/* bc 12, CR6_LT, -324 */
		/* 821495CCh case    9:*/		if ( regs.CR[6].lt ) { return 0x82149488;  }
		/* 821495CCh case    9:*/		return 0x821495D0;
	}
	return 0x821495D0;
} // Block from 821495A8h-821495D0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821495D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821495D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821495D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821495D0);
		  /* 821495D0h */ case    0:  		/* lwz R10, <#[R25 + 4]> */
		/* 821495D0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000004) );
		/* 821495D0h case    0:*/		return 0x821495D4;
		  /* 821495D4h */ case    1:  		/* addi R30, R25, 4 */
		/* 821495D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R25,0x4);
		/* 821495D4h case    1:*/		return 0x821495D8;
		  /* 821495D8h */ case    2:  		/* lwz R11, <#[R25 + 8]> */
		/* 821495D8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821495D8h case    2:*/		return 0x821495DC;
		  /* 821495DCh */ case    3:  		/* li R29, 0 */
		/* 821495DCh case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821495DCh case    3:*/		return 0x821495E0;
		  /* 821495E0h */ case    4:  		/* extsw R31, R10 */
		/* 821495E0h case    4:*/		cpu::op::extsw<0>(regs,&regs.R31,regs.R10);
		/* 821495E0h case    4:*/		return 0x821495E4;
		  /* 821495E4h */ case    5:  		/* b 40 */
		/* 821495E4h case    5:*/		return 0x8214960C;
		/* 821495E4h case    5:*/		return 0x821495E8;
		  /* 821495E8h */ case    6:  		/* lwz R3, <#[R31 + 272]> */
		/* 821495E8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000110) );
		/* 821495E8h case    6:*/		return 0x821495EC;
		  /* 821495ECh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 821495ECh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821495ECh case    7:*/		return 0x821495F0;
		  /* 821495F0h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 821495F0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82149600;  }
		/* 821495F0h case    8:*/		return 0x821495F4;
		  /* 821495F4h */ case    9:  		/* lis R4, 9351 */
		/* 821495F4h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 821495F4h case    9:*/		return 0x821495F8;
		  /* 821495F8h */ case   10:  		/* bl -791232 */
		/* 821495F8h case   10:*/		regs.LR = 0x821495FC; return 0x82088338;
		/* 821495F8h case   10:*/		return 0x821495FC;
		  /* 821495FCh */ case   11:  		/* stw R29, <#[R31 + 272]> */
		/* 821495FCh case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000110) );
		/* 821495FCh case   11:*/		return 0x82149600;
	}
	return 0x82149600;
} // Block from 821495D0h-82149600h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82149600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149600);
		  /* 82149600h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82149600h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82149600h case    0:*/		return 0x82149604;
		  /* 82149604h */ case    1:  		/* addi R31, R31, 276 */
		/* 82149604h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x114);
		/* 82149604h case    1:*/		return 0x82149608;
		  /* 82149608h */ case    2:  		/* lwz R10, <#[R30]> */
		/* 82149608h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82149608h case    2:*/		return 0x8214960C;
	}
	return 0x8214960C;
} // Block from 82149600h-8214960Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214960Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214960C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214960C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214960C);
		  /* 8214960Ch */ case    0:  		/* mulli R11, R11, 276 */
		/* 8214960Ch case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x114);
		/* 8214960Ch case    0:*/		return 0x82149610;
		  /* 82149610h */ case    1:  		/* add R11, R11, R10 */
		/* 82149610h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82149610h case    1:*/		return 0x82149614;
		  /* 82149614h */ case    2:  		/* cmplw CR6, R31, R11 */
		/* 82149614h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 82149614h case    2:*/		return 0x82149618;
		  /* 82149618h */ case    3:  		/* bc 12, CR6_LT, -48 */
		/* 82149618h case    3:*/		if ( regs.CR[6].lt ) { return 0x821495E8;  }
		/* 82149618h case    3:*/		return 0x8214961C;
		  /* 8214961Ch */ case    4:  		/* lis R4, 9351 */
		/* 8214961Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214961Ch case    4:*/		return 0x82149620;
		  /* 82149620h */ case    5:  		/* lwz R3, <#[R25 + 132]> */
		/* 82149620h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000084) );
		/* 82149620h case    5:*/		return 0x82149624;
		  /* 82149624h */ case    6:  		/* bl -791276 */
		/* 82149624h case    6:*/		regs.LR = 0x82149628; return 0x82088338;
		/* 82149624h case    6:*/		return 0x82149628;
		  /* 82149628h */ case    7:  		/* stw R29, <#[R25 + 132]> */
		/* 82149628h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R25 + 0x00000084) );
		/* 82149628h case    7:*/		return 0x8214962C;
		  /* 8214962Ch */ case    8:  		/* lwz R4, <#[R25 + 56]> */
		/* 8214962Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000038) );
		/* 8214962Ch case    8:*/		return 0x82149630;
		  /* 82149630h */ case    9:  		/* addi R3, R25, 56 */
		/* 82149630h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R25,0x38);
		/* 82149630h case    9:*/		return 0x82149634;
		  /* 82149634h */ case   10:  		/* cmplwi CR6, R4, 0 */
		/* 82149634h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82149634h case   10:*/		return 0x82149638;
		  /* 82149638h */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 82149638h case   11:*/		if ( regs.CR[6].eq ) { return 0x82149640;  }
		/* 82149638h case   11:*/		return 0x8214963C;
		  /* 8214963Ch */ case   12:  		/* bl 38740 */
		/* 8214963Ch case   12:*/		regs.LR = 0x82149640; return 0x82152D90;
		/* 8214963Ch case   12:*/		return 0x82149640;
	}
	return 0x82149640;
} // Block from 8214960Ch-82149640h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82149640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149640);
		  /* 82149640h */ case    0:  		/* lwz R4, <#[R25 + 44]> */
		/* 82149640h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x0000002C) );
		/* 82149640h case    0:*/		return 0x82149644;
		  /* 82149644h */ case    1:  		/* addi R3, R25, 44 */
		/* 82149644h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R25,0x2C);
		/* 82149644h case    1:*/		return 0x82149648;
		  /* 82149648h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 82149648h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82149648h case    2:*/		return 0x8214964C;
		  /* 8214964Ch */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 8214964Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82149654;  }
		/* 8214964Ch case    3:*/		return 0x82149650;
		  /* 82149650h */ case    4:  		/* bl 38720 */
		/* 82149650h case    4:*/		regs.LR = 0x82149654; return 0x82152D90;
		/* 82149650h case    4:*/		return 0x82149654;
	}
	return 0x82149654;
} // Block from 82149640h-82149654h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82149654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149654);
		  /* 82149654h */ case    0:  		/* lwz R4, <#[R25 + 32]> */
		/* 82149654h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000020) );
		/* 82149654h case    0:*/		return 0x82149658;
		  /* 82149658h */ case    1:  		/* addi R3, R25, 32 */
		/* 82149658h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R25,0x20);
		/* 82149658h case    1:*/		return 0x8214965C;
		  /* 8214965Ch */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 8214965Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8214965Ch case    2:*/		return 0x82149660;
		  /* 82149660h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 82149660h case    3:*/		if ( regs.CR[6].eq ) { return 0x82149668;  }
		/* 82149660h case    3:*/		return 0x82149664;
		  /* 82149664h */ case    4:  		/* bl 38700 */
		/* 82149664h case    4:*/		regs.LR = 0x82149668; return 0x82152D90;
		/* 82149664h case    4:*/		return 0x82149668;
	}
	return 0x82149668;
} // Block from 82149654h-82149668h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82149668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149668);
		  /* 82149668h */ case    0:  		/* lwz R4, <#[R24]> */
		/* 82149668h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000000) );
		/* 82149668h case    0:*/		return 0x8214966C;
		  /* 8214966Ch */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8214966Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8214966Ch case    1:*/		return 0x82149670;
		  /* 82149670h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 82149670h case    2:*/		if ( regs.CR[6].eq ) { return 0x8214967C;  }
		/* 82149670h case    2:*/		return 0x82149674;
		  /* 82149674h */ case    3:  		/* mr R3, R24 */
		/* 82149674h case    3:*/		regs.R3 = regs.R24;
		/* 82149674h case    3:*/		return 0x82149678;
		  /* 82149678h */ case    4:  		/* bl 38680 */
		/* 82149678h case    4:*/		regs.LR = 0x8214967C; return 0x82152D90;
		/* 82149678h case    4:*/		return 0x8214967C;
	}
	return 0x8214967C;
} // Block from 82149668h-8214967Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214967Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214967C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214967C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214967C);
		  /* 8214967Ch */ case    0:  		/* lwz R4, <#[R30]> */
		/* 8214967Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 8214967Ch case    0:*/		return 0x82149680;
		  /* 82149680h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 82149680h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82149680h case    1:*/		return 0x82149684;
		  /* 82149684h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 82149684h case    2:*/		if ( regs.CR[6].eq ) { return 0x82149690;  }
		/* 82149684h case    2:*/		return 0x82149688;
		  /* 82149688h */ case    3:  		/* mr R3, R30 */
		/* 82149688h case    3:*/		regs.R3 = regs.R30;
		/* 82149688h case    3:*/		return 0x8214968C;
		  /* 8214968Ch */ case    4:  		/* bl 38660 */
		/* 8214968Ch case    4:*/		regs.LR = 0x82149690; return 0x82152D90;
		/* 8214968Ch case    4:*/		return 0x82149690;
	}
	return 0x82149690;
} // Block from 8214967Ch-82149690h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82149690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149690);
		  /* 82149690h */ case    0:  		/* addi R1, R1, 160 */
		/* 82149690h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82149690h case    0:*/		return 0x82149694;
		  /* 82149694h */ case    1:  		/* b -754684 */
		/* 82149694h case    1:*/		return 0x82091298;
		/* 82149694h case    1:*/		return 0x82149698;
	}
	return 0x82149698;
} // Block from 82149690h-82149698h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82149698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149698);
		  /* 82149698h */ case    0:  		/* lwz R11, <#[R3 + 68]> */
		/* 82149698h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000044) );
		/* 82149698h case    0:*/		return 0x8214969C;
		  /* 8214969Ch */ case    1:  		/* lwz R9, <#[R11 + 4]> */
		/* 8214969Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8214969Ch case    1:*/		return 0x821496A0;
		  /* 821496A0h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821496A0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821496A0h case    2:*/		return 0x821496A4;
		  /* 821496A4h */ case    3:  		/* rlwinm R9, R9, 4, 0, 27 */
		/* 821496A4h case    3:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R9,regs.R9);
		/* 821496A4h case    3:*/		return 0x821496A8;
		  /* 821496A8h */ case    4:  		/* extsw R11, R10 */
		/* 821496A8h case    4:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R10);
		/* 821496A8h case    4:*/		return 0x821496AC;
		  /* 821496ACh */ case    5:  		/* add R10, R9, R10 */
		/* 821496ACh case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821496ACh case    5:*/		return 0x821496B0;
		  /* 821496B0h */ case    6:  		/* b 68 */
		/* 821496B0h case    6:*/		return 0x821496F4;
		/* 821496B0h case    6:*/		return 0x821496B4;
		  /* 821496B4h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821496B4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821496B4h case    7:*/		return 0x821496B8;
		  /* 821496B8h */ case    8:  		/* rlwinm R10, R10, 0, 16, 22 */
		/* 821496B8h case    8:*/		cpu::op::rlwinm<0,0,16,22>(regs,&regs.R10,regs.R10);
		/* 821496B8h case    8:*/		return 0x821496BC;
		  /* 821496BCh */ case    9:  		/* cmplwi CR6, R10, 58368 */
		/* 821496BCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000E400);
		/* 821496BCh case    9:*/		return 0x821496C0;
		  /* 821496C0h */ case   10:  		/* bc 4, CR6_EQ, 28 */
		/* 821496C0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821496DC;  }
		/* 821496C0h case   10:*/		return 0x821496C4;
		  /* 821496C4h */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 821496C4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821496C4h case   11:*/		return 0x821496C8;
		  /* 821496C8h */ case   12:  		/* rlwinm R9, R10, 0, 24, 29 */
		/* 821496C8h case   12:*/		cpu::op::rlwinm<0,0,24,29>(regs,&regs.R9,regs.R10);
		/* 821496C8h case   12:*/		return 0x821496CC;
		  /* 821496CCh */ case   13:  		/* lwzx R9, <#[R9 + R4]> */
		/* 821496CCh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 821496CCh case   13:*/		return 0x821496D0;
		  /* 821496D0h */ case   14:  		/* rlwimi R10, R9, 2, 24, 29 */
		/* 821496D0h case   14:*/		cpu::op::rlwimi<0,2,24,29>(regs,&regs.R10,regs.R9);
		/* 821496D0h case   14:*/		return 0x821496D4;
		  /* 821496D4h */ case   15:  		/* rlwinm R10, R10, 0, 24, 31 */
		/* 821496D4h case   15:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821496D4h case   15:*/		return 0x821496D8;
		  /* 821496D8h */ case   16:  		/* stw R10, <#[R11 + 8]> */
		/* 821496D8h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821496D8h case   16:*/		return 0x821496DC;
	}
	return 0x821496DC;
} // Block from 82149698h-821496DCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821496DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821496DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821496DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821496DC);
		  /* 821496DCh */ case    0:  		/* lwz R10, <#[R3 + 68]> */
		/* 821496DCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000044) );
		/* 821496DCh case    0:*/		return 0x821496E0;
		  /* 821496E0h */ case    1:  		/* addi R11, R11, 16 */
		/* 821496E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821496E0h case    1:*/		return 0x821496E4;
		  /* 821496E4h */ case    2:  		/* lwz R8, <#[R10 + 4]> */
		/* 821496E4h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821496E4h case    2:*/		return 0x821496E8;
		  /* 821496E8h */ case    3:  		/* lwz R9, <#[R10]> */
		/* 821496E8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821496E8h case    3:*/		return 0x821496EC;
		  /* 821496ECh */ case    4:  		/* rlwinm R10, R8, 4, 0, 27 */
		/* 821496ECh case    4:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R8);
		/* 821496ECh case    4:*/		return 0x821496F0;
		  /* 821496F0h */ case    5:  		/* add R10, R10, R9 */
		/* 821496F0h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821496F0h case    5:*/		return 0x821496F4;
	}
	return 0x821496F4;
} // Block from 821496DCh-821496F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821496F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821496F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821496F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821496F4);
		  /* 821496F4h */ case    0:  		/* cmplw CR6, R11, R10 */
		/* 821496F4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821496F4h case    0:*/		return 0x821496F8;
	}
	return 0x821496F8;
} // Block from 821496F4h-821496F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821496F8h
// Function '?WriteFuncInfo@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@PAV?$FastVector@UFuncInfo@XGRAPHICS@@@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821496F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821496F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821496F8);
		  /* 821496F8h */ case    0:  		/* bc 12, CR6_LT, -68 */
		/* 821496F8h case    0:*/		if ( regs.CR[6].lt ) { return 0x821496B4;  }
		/* 821496F8h case    0:*/		return 0x821496FC;
		  /* 821496FCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 821496FCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821496FCh case    1:*/		return 0x82149700;
	}
	return 0x82149700;
} // Block from 821496F8h-82149700h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82149700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149700);
		  /* 82149700h */ case    0:  		/* mfspr R12, LR */
		/* 82149700h case    0:*/		regs.R12 = regs.LR;
		/* 82149700h case    0:*/		return 0x82149704;
		  /* 82149704h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82149704h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82149704h case    1:*/		return 0x82149708;
		  /* 82149708h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82149708h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82149708h case    2:*/		return 0x8214970C;
		  /* 8214970Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8214970Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8214970Ch case    3:*/		return 0x82149710;
		  /* 82149710h */ case    4:  		/* lwz R11, <#[R3 + 136]> */
		/* 82149710h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000088) );
		/* 82149710h case    4:*/		return 0x82149714;
		  /* 82149714h */ case    5:  		/* mr R31, R3 */
		/* 82149714h case    5:*/		regs.R31 = regs.R3;
		/* 82149714h case    5:*/		return 0x82149718;
		  /* 82149718h */ case    6:  		/* addic. R3, R11, -1 */
		/* 82149718h case    6:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFF);
		/* 82149718h case    6:*/		return 0x8214971C;
		  /* 8214971Ch */ case    7:  		/* stw R3, <#[R31 + 136]> */
		/* 8214971Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000088) );
		/* 8214971Ch case    7:*/		return 0x82149720;
		  /* 82149720h */ case    8:  		/* bc 4, CR0_EQ, 28 */
		/* 82149720h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8214973C;  }
		/* 82149720h case    8:*/		return 0x82149724;
		  /* 82149724h */ case    9:  		/* mr R3, R31 */
		/* 82149724h case    9:*/		regs.R3 = regs.R31;
		/* 82149724h case    9:*/		return 0x82149728;
		  /* 82149728h */ case   10:  		/* bl -736 */
		/* 82149728h case   10:*/		regs.LR = 0x8214972C; return 0x82149448;
		/* 82149728h case   10:*/		return 0x8214972C;
		  /* 8214972Ch */ case   11:  		/* lis R4, 9351 */
		/* 8214972Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214972Ch case   11:*/		return 0x82149730;
		  /* 82149730h */ case   12:  		/* mr R3, R31 */
		/* 82149730h case   12:*/		regs.R3 = regs.R31;
		/* 82149730h case   12:*/		return 0x82149734;
		  /* 82149734h */ case   13:  		/* bl -791548 */
		/* 82149734h case   13:*/		regs.LR = 0x82149738; return 0x82088338;
		/* 82149734h case   13:*/		return 0x82149738;
		  /* 82149738h */ case   14:  		/* li R3, 0 */
		/* 82149738h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82149738h case   14:*/		return 0x8214973C;
	}
	return 0x8214973C;
} // Block from 82149700h-8214973Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8214973Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214973C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214973C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214973C);
		  /* 8214973Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 8214973Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214973Ch case    0:*/		return 0x82149740;
		  /* 82149740h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82149740h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82149740h case    1:*/		return 0x82149744;
		  /* 82149744h */ case    2:  		/* mtspr LR, R12 */
		/* 82149744h case    2:*/		regs.LR = regs.R12;
		/* 82149744h case    2:*/		return 0x82149748;
		  /* 82149748h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82149748h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82149748h case    3:*/		return 0x8214974C;
		  /* 8214974Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 8214974Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214974Ch case    4:*/		return 0x82149750;
	}
	return 0x82149750;
} // Block from 8214973Ch-82149750h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82149750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149750);
		  /* 82149750h */ case    0:  		/* mfspr R12, LR */
		/* 82149750h case    0:*/		regs.R12 = regs.LR;
		/* 82149750h case    0:*/		return 0x82149754;
		  /* 82149754h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82149754h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82149754h case    1:*/		return 0x82149758;
		  /* 82149758h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82149758h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82149758h case    2:*/		return 0x8214975C;
		  /* 8214975Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8214975Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214975Ch case    3:*/		return 0x82149760;
		  /* 82149760h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82149760h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82149760h case    4:*/		return 0x82149764;
		  /* 82149764h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 82149764h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82149764h case    5:*/		return 0x82149768;
		  /* 82149768h */ case    6:  		/* mr R30, R4 */
		/* 82149768h case    6:*/		regs.R30 = regs.R4;
		/* 82149768h case    6:*/		return 0x8214976C;
		  /* 8214976Ch */ case    7:  		/* lwz R10, <#[R3 + 8]> */
		/* 8214976Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 8214976Ch case    7:*/		return 0x82149770;
		  /* 82149770h */ case    8:  		/* mr R31, R3 */
		/* 82149770h case    8:*/		regs.R31 = regs.R3;
		/* 82149770h case    8:*/		return 0x82149774;
		  /* 82149774h */ case    9:  		/* addi R4, R11, 1 */
		/* 82149774h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 82149774h case    9:*/		return 0x82149778;
		  /* 82149778h */ case   10:  		/* cmplw CR6, R4, R10 */
		/* 82149778h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 82149778h case   10:*/		return 0x8214977C;
		  /* 8214977Ch */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 8214977Ch case   11:*/		if ( !regs.CR[6].gt ) { return 0x82149784;  }
		/* 8214977Ch case   11:*/		return 0x82149780;
		  /* 82149780h */ case   12:  		/* bl -968 */
		/* 82149780h case   12:*/		regs.LR = 0x82149784; return 0x821493B8;
		/* 82149780h case   12:*/		return 0x82149784;
	}
	return 0x82149784;
} // Block from 82149750h-82149784h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82149784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149784);
		  /* 82149784h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82149784h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82149784h case    0:*/		return 0x82149788;
		  /* 82149788h */ case    1:  		/* lwz R10, <#[R30]> */
		/* 82149788h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82149788h case    1:*/		return 0x8214978C;
		  /* 8214978Ch */ case    2:  		/* lwz R9, <#[R31]> */
		/* 8214978Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8214978Ch case    2:*/		return 0x82149790;
		  /* 82149790h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82149790h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82149790h case    3:*/		return 0x82149794;
		  /* 82149794h */ case    4:  		/* stwx R10, <#[R11 + R9]> */
		/* 82149794h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82149794h case    4:*/		return 0x82149798;
		  /* 82149798h */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 82149798h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82149798h case    5:*/		return 0x8214979C;
		  /* 8214979Ch */ case    6:  		/* addi R11, R11, 1 */
		/* 8214979Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214979Ch case    6:*/		return 0x821497A0;
		  /* 821497A0h */ case    7:  		/* stw R11, <#[R31 + 4]> */
		/* 821497A0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821497A0h case    7:*/		return 0x821497A4;
		  /* 821497A4h */ case    8:  		/* addi R1, R1, 112 */
		/* 821497A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821497A4h case    8:*/		return 0x821497A8;
		  /* 821497A8h */ case    9:  		/* lwz R12, <#[R1 - 8]> */
		/* 821497A8h case    9:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821497A8h case    9:*/		return 0x821497AC;
		  /* 821497ACh */ case   10:  		/* mtspr LR, R12 */
		/* 821497ACh case   10:*/		regs.LR = regs.R12;
		/* 821497ACh case   10:*/		return 0x821497B0;
		  /* 821497B0h */ case   11:  		/* ld R30, <#[R1 - 24]> */
		/* 821497B0h case   11:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821497B0h case   11:*/		return 0x821497B4;
		  /* 821497B4h */ case   12:  		/* ld R31, <#[R1 - 16]> */
		/* 821497B4h case   12:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821497B4h case   12:*/		return 0x821497B8;
		  /* 821497B8h */ case   13:  		/* bclr 20, CR0_LT */
		/* 821497B8h case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821497B8h case   13:*/		return 0x821497BC;
	}
	return 0x821497BC;
} // Block from 82149784h-821497BCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821497BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821497BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821497BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821497BC);
		  /* 821497BCh */ case    0:  		/* nop */
		/* 821497BCh case    0:*/		cpu::op::nop();
		/* 821497BCh case    0:*/		return 0x821497C0;
	}
	return 0x821497C0;
} // Block from 821497BCh-821497C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821497C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821497C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821497C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821497C0);
		  /* 821497C0h */ case    0:  		/* mfspr R12, LR */
		/* 821497C0h case    0:*/		regs.R12 = regs.LR;
		/* 821497C0h case    0:*/		return 0x821497C4;
		  /* 821497C4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821497C4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821497C4h case    1:*/		return 0x821497C8;
		  /* 821497C8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821497C8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821497C8h case    2:*/		return 0x821497CC;
		  /* 821497CCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 821497CCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821497CCh case    3:*/		return 0x821497D0;
		  /* 821497D0h */ case    4:  		/* mr R31, R3 */
		/* 821497D0h case    4:*/		regs.R31 = regs.R3;
		/* 821497D0h case    4:*/		return 0x821497D4;
		  /* 821497D4h */ case    5:  		/* lwz R3, <#[R3 + 132]> */
		/* 821497D4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000084) );
		/* 821497D4h case    5:*/		return 0x821497D8;
		  /* 821497D8h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 821497D8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821497D8h case    6:*/		return 0x821497DC;
		  /* 821497DCh */ case    7:  		/* bc 12, CR6_EQ, 48 */
		/* 821497DCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8214980C;  }
		/* 821497DCh case    7:*/		return 0x821497E0;
		  /* 821497E0h */ case    8:  		/* lis R11, -32253 */
		/* 821497E0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821497E0h case    8:*/		return 0x821497E4;
		  /* 821497E4h */ case    9:  		/* addi R4, R11, 26576 */
		/* 821497E4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x67D0);
		/* 821497E4h case    9:*/		return 0x821497E8;
		  /* 821497E8h */ case   10:  		/* bl -746424 */
		/* 821497E8h case   10:*/		regs.LR = 0x821497EC; return 0x82093430;
		/* 821497E8h case   10:*/		return 0x821497EC;
		  /* 821497ECh */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 821497ECh case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821497ECh case   11:*/		return 0x821497F0;
		  /* 821497F0h */ case   12:  		/* bc 12, CR0_EQ, 28 */
		/* 821497F0h case   12:*/		if ( regs.CR[0].eq ) { return 0x8214980C;  }
		/* 821497F0h case   12:*/		return 0x821497F4;
		  /* 821497F4h */ case   13:  		/* lwz R11, <#[R31 + 128]> */
		/* 821497F4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 821497F4h case   13:*/		return 0x821497F8;
		  /* 821497F8h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821497F8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821497F8h case   14:*/		return 0x821497FC;
		  /* 821497FCh */ case   15:  		/* bc 12, CR6_EQ, 16 */
		/* 821497FCh case   15:*/		if ( regs.CR[6].eq ) { return 0x8214980C;  }
		/* 821497FCh case   15:*/		return 0x82149800;
		  /* 82149800h */ case   16:  		/* rlwinm R4, R11, 0, 0, 31 */
		/* 82149800h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R11);
		/* 82149800h case   16:*/		return 0x82149804;
		  /* 82149804h */ case   17:  		/* lwz R5, <#[R4 + 256]> */
		/* 82149804h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x00000100) );
		/* 82149804h case   17:*/		return 0x82149808;
		  /* 82149808h */ case   18:  		/* b 12 */
		/* 82149808h case   18:*/		return 0x82149814;
		/* 82149808h case   18:*/		return 0x8214980C;
	}
	return 0x8214980C;
} // Block from 821497C0h-8214980Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214980Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214980C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214980C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214980C);
		  /* 8214980Ch */ case    0:  		/* li R5, 0 */
		/* 8214980Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8214980Ch case    0:*/		return 0x82149810;
		  /* 82149810h */ case    1:  		/* li R4, 0 */
		/* 82149810h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82149810h case    1:*/		return 0x82149814;
	}
	return 0x82149814;
} // Block from 8214980Ch-82149814h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82149814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149814);
		  /* 82149814h */ case    0:  		/* mr R3, R31 */
		/* 82149814h case    0:*/		regs.R3 = regs.R31;
		/* 82149814h case    0:*/		return 0x82149818;
		  /* 82149818h */ case    1:  		/* bl -4760 */
		/* 82149818h case    1:*/		regs.LR = 0x8214981C; return 0x82148580;
		/* 82149818h case    1:*/		return 0x8214981C;
		  /* 8214981Ch */ case    2:  		/* addi R1, R1, 96 */
		/* 8214981Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214981Ch case    2:*/		return 0x82149820;
		  /* 82149820h */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 82149820h case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82149820h case    3:*/		return 0x82149824;
		  /* 82149824h */ case    4:  		/* mtspr LR, R12 */
		/* 82149824h case    4:*/		regs.LR = regs.R12;
		/* 82149824h case    4:*/		return 0x82149828;
		  /* 82149828h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 82149828h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82149828h case    5:*/		return 0x8214982C;
		  /* 8214982Ch */ case    6:  		/* bclr 20, CR0_LT */
		/* 8214982Ch case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214982Ch case    6:*/		return 0x82149830;
	}
	return 0x82149830;
} // Block from 82149814h-82149830h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82149830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149830);
		  /* 82149830h */ case    0:  		/* mfspr R12, LR */
		/* 82149830h case    0:*/		regs.R12 = regs.LR;
		/* 82149830h case    0:*/		return 0x82149834;
		  /* 82149834h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82149834h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82149834h case    1:*/		return 0x82149838;
		  /* 82149838h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82149838h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82149838h case    2:*/		return 0x8214983C;
		  /* 8214983Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8214983Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214983Ch case    3:*/		return 0x82149840;
		  /* 82149840h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82149840h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82149840h case    4:*/		return 0x82149844;
		  /* 82149844h */ case    5:  		/* lwz R11, <#[R3 + 160]> */
		/* 82149844h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000A0) );
		/* 82149844h case    5:*/		return 0x82149848;
		  /* 82149848h */ case    6:  		/* mr R31, R3 */
		/* 82149848h case    6:*/		regs.R31 = regs.R3;
		/* 82149848h case    6:*/		return 0x8214984C;
		  /* 8214984Ch */ case    7:  		/* mr R30, R4 */
		/* 8214984Ch case    7:*/		regs.R30 = regs.R4;
		/* 8214984Ch case    7:*/		return 0x82149850;
		  /* 82149850h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82149850h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82149850h case    8:*/		return 0x82149854;
		  /* 82149854h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 82149854h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8214985C;  }
		/* 82149854h case    9:*/		return 0x82149858;
		  /* 82149858h */ case   10:  		/* bl -152 */
		/* 82149858h case   10:*/		regs.LR = 0x8214985C; return 0x821497C0;
		/* 82149858h case   10:*/		return 0x8214985C;
	}
	return 0x8214985C;
} // Block from 82149830h-8214985Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214985Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214985C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214985C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214985C);
		  /* 8214985Ch */ case    0:  		/* lwz R11, <#[R31 + 160]> */
		/* 8214985Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000A0) );
		/* 8214985Ch case    0:*/		return 0x82149860;
		  /* 82149860h */ case    1:  		/* stw R11, <#[R30]> */
		/* 82149860h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82149860h case    1:*/		return 0x82149864;
		  /* 82149864h */ case    2:  		/* lwz R11, <#[R31 + 164]> */
		/* 82149864h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000A4) );
		/* 82149864h case    2:*/		return 0x82149868;
		  /* 82149868h */ case    3:  		/* stw R11, <#[R30 + 4]> */
		/* 82149868h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82149868h case    3:*/		return 0x8214986C;
		  /* 8214986Ch */ case    4:  		/* lwz R11, <#[R31 + 168]> */
		/* 8214986Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000A8) );
		/* 8214986Ch case    4:*/		return 0x82149870;
		  /* 82149870h */ case    5:  		/* stw R11, <#[R30 + 8]> */
		/* 82149870h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82149870h case    5:*/		return 0x82149874;
		  /* 82149874h */ case    6:  		/* lwz R11, <#[R31 + 152]> */
		/* 82149874h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000098) );
		/* 82149874h case    6:*/		return 0x82149878;
		  /* 82149878h */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 82149878h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82149878h case    7:*/		return 0x8214987C;
		  /* 8214987Ch */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 8214987Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8214988C;  }
		/* 8214987Ch case    8:*/		return 0x82149880;
		  /* 82149880h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 82149880h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82149880h case    9:*/		return 0x82149884;
		  /* 82149884h */ case   10:  		/* addi R11, R11, 1 */
		/* 82149884h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82149884h case   10:*/		return 0x82149888;
		  /* 82149888h */ case   11:  		/* stw R11, <#[R30]> */
		/* 82149888h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82149888h case   11:*/		return 0x8214988C;
	}
	return 0x8214988C;
} // Block from 8214985Ch-8214988Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214988Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214988C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214988C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214988C);
		  /* 8214988Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8214988Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214988Ch case    0:*/		return 0x82149890;
		  /* 82149890h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82149890h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82149890h case    1:*/		return 0x82149894;
		  /* 82149894h */ case    2:  		/* mtspr LR, R12 */
		/* 82149894h case    2:*/		regs.LR = regs.R12;
		/* 82149894h case    2:*/		return 0x82149898;
		  /* 82149898h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82149898h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82149898h case    3:*/		return 0x8214989C;
		  /* 8214989Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8214989Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214989Ch case    4:*/		return 0x821498A0;
		  /* 821498A0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 821498A0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821498A0h case    5:*/		return 0x821498A4;
	}
	return 0x821498A4;
} // Block from 8214988Ch-821498A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821498A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821498A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821498A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821498A4);
		  /* 821498A4h */ case    0:  		/* nop */
		/* 821498A4h case    0:*/		cpu::op::nop();
		/* 821498A4h case    0:*/		return 0x821498A8;
	}
	return 0x821498A8;
} // Block from 821498A4h-821498A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821498A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821498A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821498A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821498A8);
		  /* 821498A8h */ case    0:  		/* mfspr R12, LR */
		/* 821498A8h case    0:*/		regs.R12 = regs.LR;
		/* 821498A8h case    0:*/		return 0x821498AC;
		  /* 821498ACh */ case    1:  		/* bl -755280 */
		/* 821498ACh case    1:*/		regs.LR = 0x821498B0; return 0x8209125C;
		/* 821498ACh case    1:*/		return 0x821498B0;
		  /* 821498B0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821498B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821498B0h case    2:*/		return 0x821498B4;
		  /* 821498B4h */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 821498B4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 821498B4h case    3:*/		return 0x821498B8;
	}
	return 0x821498B8;
} // Block from 821498A8h-821498B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821498B8h
// Function '?push_back@?$FastVector@UInterpolatorInfo@XGRAPHICS@@@XGRAPHICS@@QAAXABUInterpolatorInfo@2@AAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821498B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821498B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821498B8);
		  /* 821498B8h */ case    0:  		/* mr R31, R3 */
		/* 821498B8h case    0:*/		regs.R31 = regs.R3;
		/* 821498B8h case    0:*/		return 0x821498BC;
		  /* 821498BCh */ case    1:  		/* mr R29, R5 */
		/* 821498BCh case    1:*/		regs.R29 = regs.R5;
		/* 821498BCh case    1:*/		return 0x821498C0;
		  /* 821498C0h */ case    2:  		/* addi R30, R3, 144 */
		/* 821498C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x90);
		/* 821498C0h case    2:*/		return 0x821498C4;
		  /* 821498C4h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 821498C4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821498C4h case    3:*/		return 0x821498C8;
		  /* 821498C8h */ case    4:  		/* bc 12, CR6_LT, 52 */
		/* 821498C8h case    4:*/		if ( regs.CR[6].lt ) { return 0x821498FC;  }
		/* 821498C8h case    4:*/		return 0x821498CC;
		  /* 821498CCh */ case    5:  		/* mr R5, R4 */
		/* 821498CCh case    5:*/		regs.R5 = regs.R4;
		/* 821498CCh case    5:*/		return 0x821498D0;
		  /* 821498D0h */ case    6:  		/* li R4, 32 */
		/* 821498D0h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 821498D0h case    6:*/		return 0x821498D4;
		  /* 821498D4h */ case    7:  		/* addi R3, R1, 80 */
		/* 821498D4h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821498D4h case    7:*/		return 0x821498D8;
		  /* 821498D8h */ case    8:  		/* bl -668136 */
		/* 821498D8h case    8:*/		regs.LR = 0x821498DC; return 0x820A66F0;
		/* 821498D8h case    8:*/		return 0x821498DC;
		  /* 821498DCh */ case    9:  		/* mr R5, R29 */
		/* 821498DCh case    9:*/		regs.R5 = regs.R29;
		/* 821498DCh case    9:*/		return 0x821498E0;
		  /* 821498E0h */ case   10:  		/* li R4, 8 */
		/* 821498E0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821498E0h case   10:*/		return 0x821498E4;
		  /* 821498E4h */ case   11:  		/* addi R3, R1, 112 */
		/* 821498E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821498E4h case   11:*/		return 0x821498E8;
		  /* 821498E8h */ case   12:  		/* bl -668152 */
		/* 821498E8h case   12:*/		regs.LR = 0x821498EC; return 0x820A66F0;
		/* 821498E8h case   12:*/		return 0x821498EC;
		  /* 821498ECh */ case   13:  		/* mr R5, R30 */
		/* 821498ECh case   13:*/		regs.R5 = regs.R30;
		/* 821498ECh case   13:*/		return 0x821498F0;
		  /* 821498F0h */ case   14:  		/* addi R4, R1, 80 */
		/* 821498F0h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821498F0h case   14:*/		return 0x821498F4;
		  /* 821498F4h */ case   15:  		/* addi R3, R31, 56 */
		/* 821498F4h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x38);
		/* 821498F4h case   15:*/		return 0x821498F8;
		  /* 821498F8h */ case   16:  		/* bl -1848 */
		/* 821498F8h case   16:*/		regs.LR = 0x821498FC; return 0x821491C0;
		/* 821498F8h case   16:*/		return 0x821498FC;
	}
	return 0x821498FC;
} // Block from 821498B8h-821498FCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821498FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821498FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821498FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821498FC);
		  /* 821498FCh */ case    0:  		/* addi R1, R1, 160 */
		/* 821498FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821498FCh case    0:*/		return 0x82149900;
		  /* 82149900h */ case    1:  		/* b -755284 */
		/* 82149900h case    1:*/		return 0x820912AC;
		/* 82149900h case    1:*/		return 0x82149904;
		  /* 82149904h */ case    2:  		/* nop */
		/* 82149904h case    2:*/		cpu::op::nop();
		/* 82149904h case    2:*/		return 0x82149908;
	}
	return 0x82149908;
} // Block from 821498FCh-82149908h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82149908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149908);
		  /* 82149908h */ case    0:  		/* mfspr R12, LR */
		/* 82149908h case    0:*/		regs.R12 = regs.LR;
		/* 82149908h case    0:*/		return 0x8214990C;
		  /* 8214990Ch */ case    1:  		/* bl -755404 */
		/* 8214990Ch case    1:*/		regs.LR = 0x82149910; return 0x82091240;
		/* 8214990Ch case    1:*/		return 0x82149910;
		  /* 82149910h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82149910h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82149910h case    2:*/		return 0x82149914;
		  /* 82149914h */ case    3:  		/* lis R11, -32255 */
		/* 82149914h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82149914h case    3:*/		return 0x82149918;
		  /* 82149918h */ case    4:  		/* mr R22, R10 */
		/* 82149918h case    4:*/		regs.R22 = regs.R10;
		/* 82149918h case    4:*/		return 0x8214991C;
		  /* 8214991Ch */ case    5:  		/* lis R10, -32255 */
		/* 8214991Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8214991Ch case    5:*/		return 0x82149920;
		  /* 82149920h */ case    6:  		/* addi R29, R11, 5224 */
		/* 82149920h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1468);
		/* 82149920h case    6:*/		return 0x82149924;
		  /* 82149924h */ case    7:  		/* mr R27, R5 */
		/* 82149924h case    7:*/		regs.R27 = regs.R5;
		/* 82149924h case    7:*/		return 0x82149928;
	}
	return 0x82149928;
} // Block from 82149908h-82149928h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149928h
// Function '?push_back@?$FastVector@UStatement@XGRAPHICS@@@XGRAPHICS@@QAAXABUStatement@2@AAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149928);
		  /* 82149928h */ case    0:  		/* mr R23, R9 */
		/* 82149928h case    0:*/		regs.R23 = regs.R9;
		/* 82149928h case    0:*/		return 0x8214992C;
		  /* 8214992Ch */ case    1:  		/* mr R31, R3 */
		/* 8214992Ch case    1:*/		regs.R31 = regs.R3;
		/* 8214992Ch case    1:*/		return 0x82149930;
		  /* 82149930h */ case    2:  		/* mr R30, R4 */
		/* 82149930h case    2:*/		regs.R30 = regs.R4;
		/* 82149930h case    2:*/		return 0x82149934;
		  /* 82149934h */ case    3:  		/* mr R26, R6 */
		/* 82149934h case    3:*/		regs.R26 = regs.R6;
		/* 82149934h case    3:*/		return 0x82149938;
		  /* 82149938h */ case    4:  		/* mr R25, R7 */
		/* 82149938h case    4:*/		regs.R25 = regs.R7;
		/* 82149938h case    4:*/		return 0x8214993C;
		  /* 8214993Ch */ case    5:  		/* mr R24, R8 */
		/* 8214993Ch case    5:*/		regs.R24 = regs.R8;
		/* 8214993Ch case    5:*/		return 0x82149940;
		  /* 82149940h */ case    6:  		/* rlwinm. R9, R4, 0, 31, 31 */
		/* 82149940h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R4);
		/* 82149940h case    6:*/		return 0x82149944;
		  /* 82149944h */ case    7:  		/* addi R28, R10, 5216 */
		/* 82149944h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x1460);
		/* 82149944h case    7:*/		return 0x82149948;
		  /* 82149948h */ case    8:  		/* mr R5, R29 */
		/* 82149948h case    8:*/		regs.R5 = regs.R29;
		/* 82149948h case    8:*/		return 0x8214994C;
		  /* 8214994Ch */ case    9:  		/* bc 4, CR0_EQ, 8 */
		/* 8214994Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x82149954;  }
		/* 8214994Ch case    9:*/		return 0x82149950;
		  /* 82149950h */ case   10:  		/* mr R5, R28 */
		/* 82149950h case   10:*/		regs.R5 = regs.R28;
		/* 82149950h case   10:*/		return 0x82149954;
	}
	return 0x82149954;
} // Block from 82149928h-82149954h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82149954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149954);
		  /* 82149954h */ case    0:  		/* lis R11, -32253 */
		/* 82149954h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149954h case    0:*/		return 0x82149958;
		  /* 82149958h */ case    1:  		/* mr R3, R31 */
		/* 82149958h case    1:*/		regs.R3 = regs.R31;
		/* 82149958h case    1:*/		return 0x8214995C;
		  /* 8214995Ch */ case    2:  		/* addi R4, R11, 26724 */
		/* 8214995Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6864);
		/* 8214995Ch case    2:*/		return 0x82149960;
		  /* 82149960h */ case    3:  		/* bl -184 */
		/* 82149960h case    3:*/		regs.LR = 0x82149964; return 0x821498A8;
		/* 82149960h case    3:*/		return 0x82149964;
		  /* 82149964h */ case    4:  		/* rlwinm. R11, R30, 0, 30, 30 */
		/* 82149964h case    4:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R30);
		/* 82149964h case    4:*/		return 0x82149968;
		  /* 82149968h */ case    5:  		/* mr R5, R29 */
		/* 82149968h case    5:*/		regs.R5 = regs.R29;
		/* 82149968h case    5:*/		return 0x8214996C;
		  /* 8214996Ch */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 8214996Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149974;  }
		/* 8214996Ch case    6:*/		return 0x82149970;
		  /* 82149970h */ case    7:  		/* mr R5, R28 */
		/* 82149970h case    7:*/		regs.R5 = regs.R28;
		/* 82149970h case    7:*/		return 0x82149974;
	}
	return 0x82149974;
} // Block from 82149954h-82149974h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149974);
		  /* 82149974h */ case    0:  		/* lis R11, -32253 */
		/* 82149974h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149974h case    0:*/		return 0x82149978;
		  /* 82149978h */ case    1:  		/* mr R3, R31 */
		/* 82149978h case    1:*/		regs.R3 = regs.R31;
		/* 82149978h case    1:*/		return 0x8214997C;
		  /* 8214997Ch */ case    2:  		/* addi R4, R11, 26720 */
		/* 8214997Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6860);
		/* 8214997Ch case    2:*/		return 0x82149980;
		  /* 82149980h */ case    3:  		/* bl -216 */
		/* 82149980h case    3:*/		regs.LR = 0x82149984; return 0x821498A8;
		/* 82149980h case    3:*/		return 0x82149984;
		  /* 82149984h */ case    4:  		/* rlwinm. R11, R30, 0, 11, 11 */
		/* 82149984h case    4:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R11,regs.R30);
		/* 82149984h case    4:*/		return 0x82149988;
		  /* 82149988h */ case    5:  		/* mr R5, R29 */
		/* 82149988h case    5:*/		regs.R5 = regs.R29;
		/* 82149988h case    5:*/		return 0x8214998C;
		  /* 8214998Ch */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 8214998Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149994;  }
		/* 8214998Ch case    6:*/		return 0x82149990;
		  /* 82149990h */ case    7:  		/* mr R5, R28 */
		/* 82149990h case    7:*/		regs.R5 = regs.R28;
		/* 82149990h case    7:*/		return 0x82149994;
	}
	return 0x82149994;
} // Block from 82149974h-82149994h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149994);
		  /* 82149994h */ case    0:  		/* lis R11, -32253 */
		/* 82149994h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149994h case    0:*/		return 0x82149998;
		  /* 82149998h */ case    1:  		/* mr R3, R31 */
		/* 82149998h case    1:*/		regs.R3 = regs.R31;
		/* 82149998h case    1:*/		return 0x8214999C;
		  /* 8214999Ch */ case    2:  		/* addi R4, R11, 26704 */
		/* 8214999Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6850);
		/* 8214999Ch case    2:*/		return 0x821499A0;
	}
	return 0x821499A0;
} // Block from 82149994h-821499A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821499A0h
// Function '?push_back@?$FastVector@UVariableDebugInfo@XGRAPHICS@@@XGRAPHICS@@QAAXABUVariableDebugInfo@2@AAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821499A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821499A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821499A0);
		  /* 821499A0h */ case    0:  		/* bl -248 */
		/* 821499A0h case    0:*/		regs.LR = 0x821499A4; return 0x821498A8;
		/* 821499A0h case    0:*/		return 0x821499A4;
		  /* 821499A4h */ case    1:  		/* rlwinm. R11, R30, 0, 14, 14 */
		/* 821499A4h case    1:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R11,regs.R30);
		/* 821499A4h case    1:*/		return 0x821499A8;
		  /* 821499A8h */ case    2:  		/* mr R5, R29 */
		/* 821499A8h case    2:*/		regs.R5 = regs.R29;
		/* 821499A8h case    2:*/		return 0x821499AC;
		  /* 821499ACh */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 821499ACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821499B4;  }
		/* 821499ACh case    3:*/		return 0x821499B0;
		  /* 821499B0h */ case    4:  		/* mr R5, R28 */
		/* 821499B0h case    4:*/		regs.R5 = regs.R28;
		/* 821499B0h case    4:*/		return 0x821499B4;
	}
	return 0x821499B4;
} // Block from 821499A0h-821499B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821499B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821499B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821499B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821499B4);
		  /* 821499B4h */ case    0:  		/* lis R11, -32253 */
		/* 821499B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821499B4h case    0:*/		return 0x821499B8;
		  /* 821499B8h */ case    1:  		/* mr R3, R31 */
		/* 821499B8h case    1:*/		regs.R3 = regs.R31;
		/* 821499B8h case    1:*/		return 0x821499BC;
		  /* 821499BCh */ case    2:  		/* addi R4, R11, 26688 */
		/* 821499BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6840);
		/* 821499BCh case    2:*/		return 0x821499C0;
		  /* 821499C0h */ case    3:  		/* bl -280 */
		/* 821499C0h case    3:*/		regs.LR = 0x821499C4; return 0x821498A8;
		/* 821499C0h case    3:*/		return 0x821499C4;
		  /* 821499C4h */ case    4:  		/* rlwinm. R11, R27, 0, 27, 27 */
		/* 821499C4h case    4:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R27);
		/* 821499C4h case    4:*/		return 0x821499C8;
		  /* 821499C8h */ case    5:  		/* mr R5, R29 */
		/* 821499C8h case    5:*/		regs.R5 = regs.R29;
		/* 821499C8h case    5:*/		return 0x821499CC;
		  /* 821499CCh */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 821499CCh case    6:*/		if ( !regs.CR[0].eq ) { return 0x821499D4;  }
		/* 821499CCh case    6:*/		return 0x821499D0;
		  /* 821499D0h */ case    7:  		/* mr R5, R28 */
		/* 821499D0h case    7:*/		regs.R5 = regs.R28;
		/* 821499D0h case    7:*/		return 0x821499D4;
	}
	return 0x821499D4;
} // Block from 821499B4h-821499D4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821499D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821499D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821499D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821499D4);
		  /* 821499D4h */ case    0:  		/* lis R11, -32253 */
		/* 821499D4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821499D4h case    0:*/		return 0x821499D8;
		  /* 821499D8h */ case    1:  		/* mr R3, R31 */
		/* 821499D8h case    1:*/		regs.R3 = regs.R31;
		/* 821499D8h case    1:*/		return 0x821499DC;
		  /* 821499DCh */ case    2:  		/* addi R4, R11, 26680 */
		/* 821499DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6838);
		/* 821499DCh case    2:*/		return 0x821499E0;
		  /* 821499E0h */ case    3:  		/* bl -312 */
		/* 821499E0h case    3:*/		regs.LR = 0x821499E4; return 0x821498A8;
		/* 821499E0h case    3:*/		return 0x821499E4;
		  /* 821499E4h */ case    4:  		/* rlwinm. R11, R27, 0, 29, 29 */
		/* 821499E4h case    4:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R27);
		/* 821499E4h case    4:*/		return 0x821499E8;
		  /* 821499E8h */ case    5:  		/* mr R5, R29 */
		/* 821499E8h case    5:*/		regs.R5 = regs.R29;
		/* 821499E8h case    5:*/		return 0x821499EC;
		  /* 821499ECh */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 821499ECh case    6:*/		if ( !regs.CR[0].eq ) { return 0x821499F4;  }
		/* 821499ECh case    6:*/		return 0x821499F0;
		  /* 821499F0h */ case    7:  		/* mr R5, R28 */
		/* 821499F0h case    7:*/		regs.R5 = regs.R28;
		/* 821499F0h case    7:*/		return 0x821499F4;
	}
	return 0x821499F4;
} // Block from 821499D4h-821499F4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821499F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821499F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821499F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821499F4);
		  /* 821499F4h */ case    0:  		/* lis R11, -32253 */
		/* 821499F4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821499F4h case    0:*/		return 0x821499F8;
		  /* 821499F8h */ case    1:  		/* mr R3, R31 */
		/* 821499F8h case    1:*/		regs.R3 = regs.R31;
		/* 821499F8h case    1:*/		return 0x821499FC;
		  /* 821499FCh */ case    2:  		/* addi R4, R11, 26672 */
		/* 821499FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6830);
		/* 821499FCh case    2:*/		return 0x82149A00;
		  /* 82149A00h */ case    3:  		/* bl -344 */
		/* 82149A00h case    3:*/		regs.LR = 0x82149A04; return 0x821498A8;
		/* 82149A00h case    3:*/		return 0x82149A04;
		  /* 82149A04h */ case    4:  		/* lis R11, -32253 */
		/* 82149A04h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149A04h case    4:*/		return 0x82149A08;
		  /* 82149A08h */ case    5:  		/* mr R6, R26 */
		/* 82149A08h case    5:*/		regs.R6 = regs.R26;
		/* 82149A08h case    5:*/		return 0x82149A0C;
		  /* 82149A0Ch */ case    6:  		/* addi R30, R11, 26668 */
		/* 82149A0Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x682C);
		/* 82149A0Ch case    6:*/		return 0x82149A10;
		  /* 82149A10h */ case    7:  		/* li R4, 16 */
		/* 82149A10h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149A10h case    7:*/		return 0x82149A14;
		  /* 82149A14h */ case    8:  		/* mr R5, R30 */
		/* 82149A14h case    8:*/		regs.R5 = regs.R30;
		/* 82149A14h case    8:*/		return 0x82149A18;
		  /* 82149A18h */ case    9:  		/* addi R3, R1, 80 */
		/* 82149A18h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149A18h case    9:*/		return 0x82149A1C;
		  /* 82149A1Ch */ case   10:  		/* bl -685020 */
		/* 82149A1Ch case   10:*/		regs.LR = 0x82149A20; return 0x820A2640;
		/* 82149A1Ch case   10:*/		return 0x82149A20;
		  /* 82149A20h */ case   11:  		/* lis R11, -32253 */
		/* 82149A20h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149A20h case   11:*/		return 0x82149A24;
		  /* 82149A24h */ case   12:  		/* addi R5, R1, 80 */
		/* 82149A24h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149A24h case   12:*/		return 0x82149A28;
	}
	return 0x82149A28;
} // Block from 821499F4h-82149A28h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82149A28h
// Function '?push_back@?$FastVector@ULiteralBool@XGRAPHICS@@@XGRAPHICS@@QAAXABULiteralBool@2@AAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149A28);
		  /* 82149A28h */ case    0:  		/* addi R4, R11, 26652 */
		/* 82149A28h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x681C);
		/* 82149A28h case    0:*/		return 0x82149A2C;
		  /* 82149A2Ch */ case    1:  		/* mr R3, R31 */
		/* 82149A2Ch case    1:*/		regs.R3 = regs.R31;
		/* 82149A2Ch case    1:*/		return 0x82149A30;
		  /* 82149A30h */ case    2:  		/* bl -392 */
		/* 82149A30h case    2:*/		regs.LR = 0x82149A34; return 0x821498A8;
		/* 82149A30h case    2:*/		return 0x82149A34;
		  /* 82149A34h */ case    3:  		/* mr R5, R30 */
		/* 82149A34h case    3:*/		regs.R5 = regs.R30;
		/* 82149A34h case    3:*/		return 0x82149A38;
		  /* 82149A38h */ case    4:  		/* mr R6, R25 */
		/* 82149A38h case    4:*/		regs.R6 = regs.R25;
		/* 82149A38h case    4:*/		return 0x82149A3C;
		  /* 82149A3Ch */ case    5:  		/* li R4, 16 */
		/* 82149A3Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149A3Ch case    5:*/		return 0x82149A40;
		  /* 82149A40h */ case    6:  		/* addi R3, R1, 80 */
		/* 82149A40h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149A40h case    6:*/		return 0x82149A44;
		  /* 82149A44h */ case    7:  		/* bl -685060 */
		/* 82149A44h case    7:*/		regs.LR = 0x82149A48; return 0x820A2640;
		/* 82149A44h case    7:*/		return 0x82149A48;
		  /* 82149A48h */ case    8:  		/* lis R11, -32253 */
		/* 82149A48h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149A48h case    8:*/		return 0x82149A4C;
		  /* 82149A4Ch */ case    9:  		/* addi R5, R1, 80 */
		/* 82149A4Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149A4Ch case    9:*/		return 0x82149A50;
		  /* 82149A50h */ case   10:  		/* addi R4, R11, 26640 */
		/* 82149A50h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6810);
		/* 82149A50h case   10:*/		return 0x82149A54;
		  /* 82149A54h */ case   11:  		/* mr R3, R31 */
		/* 82149A54h case   11:*/		regs.R3 = regs.R31;
		/* 82149A54h case   11:*/		return 0x82149A58;
		  /* 82149A58h */ case   12:  		/* bl -432 */
		/* 82149A58h case   12:*/		regs.LR = 0x82149A5C; return 0x821498A8;
		/* 82149A58h case   12:*/		return 0x82149A5C;
		  /* 82149A5Ch */ case   13:  		/* mr R5, R30 */
		/* 82149A5Ch case   13:*/		regs.R5 = regs.R30;
		/* 82149A5Ch case   13:*/		return 0x82149A60;
		  /* 82149A60h */ case   14:  		/* mr R6, R24 */
		/* 82149A60h case   14:*/		regs.R6 = regs.R24;
		/* 82149A60h case   14:*/		return 0x82149A64;
		  /* 82149A64h */ case   15:  		/* li R4, 16 */
		/* 82149A64h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149A64h case   15:*/		return 0x82149A68;
		  /* 82149A68h */ case   16:  		/* addi R3, R1, 80 */
		/* 82149A68h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149A68h case   16:*/		return 0x82149A6C;
		  /* 82149A6Ch */ case   17:  		/* bl -685100 */
		/* 82149A6Ch case   17:*/		regs.LR = 0x82149A70; return 0x820A2640;
		/* 82149A6Ch case   17:*/		return 0x82149A70;
		  /* 82149A70h */ case   18:  		/* lis R11, -32253 */
		/* 82149A70h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149A70h case   18:*/		return 0x82149A74;
		  /* 82149A74h */ case   19:  		/* addi R5, R1, 80 */
		/* 82149A74h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149A74h case   19:*/		return 0x82149A78;
		  /* 82149A78h */ case   20:  		/* addi R4, R11, 26628 */
		/* 82149A78h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6804);
		/* 82149A78h case   20:*/		return 0x82149A7C;
		  /* 82149A7Ch */ case   21:  		/* mr R3, R31 */
		/* 82149A7Ch case   21:*/		regs.R3 = regs.R31;
		/* 82149A7Ch case   21:*/		return 0x82149A80;
		  /* 82149A80h */ case   22:  		/* bl -472 */
		/* 82149A80h case   22:*/		regs.LR = 0x82149A84; return 0x821498A8;
		/* 82149A80h case   22:*/		return 0x82149A84;
		  /* 82149A84h */ case   23:  		/* mr R5, R30 */
		/* 82149A84h case   23:*/		regs.R5 = regs.R30;
		/* 82149A84h case   23:*/		return 0x82149A88;
		  /* 82149A88h */ case   24:  		/* mr R6, R23 */
		/* 82149A88h case   24:*/		regs.R6 = regs.R23;
		/* 82149A88h case   24:*/		return 0x82149A8C;
		  /* 82149A8Ch */ case   25:  		/* li R4, 16 */
		/* 82149A8Ch case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149A8Ch case   25:*/		return 0x82149A90;
		  /* 82149A90h */ case   26:  		/* addi R3, R1, 80 */
		/* 82149A90h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149A90h case   26:*/		return 0x82149A94;
		  /* 82149A94h */ case   27:  		/* bl -685140 */
		/* 82149A94h case   27:*/		regs.LR = 0x82149A98; return 0x820A2640;
		/* 82149A94h case   27:*/		return 0x82149A98;
		  /* 82149A98h */ case   28:  		/* lis R11, -32253 */
		/* 82149A98h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149A98h case   28:*/		return 0x82149A9C;
		  /* 82149A9Ch */ case   29:  		/* addi R5, R1, 80 */
		/* 82149A9Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149A9Ch case   29:*/		return 0x82149AA0;
	}
	return 0x82149AA0;
} // Block from 82149A28h-82149AA0h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82149AA0h
// Function '?push_back@?$FastVector@ULiteralInt@XGRAPHICS@@@XGRAPHICS@@QAAXABULiteralInt@2@AAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149AA0);
		  /* 82149AA0h */ case    0:  		/* addi R4, R11, 26616 */
		/* 82149AA0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x67F8);
		/* 82149AA0h case    0:*/		return 0x82149AA4;
		  /* 82149AA4h */ case    1:  		/* mr R3, R31 */
		/* 82149AA4h case    1:*/		regs.R3 = regs.R31;
		/* 82149AA4h case    1:*/		return 0x82149AA8;
		  /* 82149AA8h */ case    2:  		/* bl -512 */
		/* 82149AA8h case    2:*/		regs.LR = 0x82149AAC; return 0x821498A8;
		/* 82149AA8h case    2:*/		return 0x82149AAC;
		  /* 82149AACh */ case    3:  		/* mr R5, R30 */
		/* 82149AACh case    3:*/		regs.R5 = regs.R30;
		/* 82149AACh case    3:*/		return 0x82149AB0;
		  /* 82149AB0h */ case    4:  		/* mr R6, R22 */
		/* 82149AB0h case    4:*/		regs.R6 = regs.R22;
		/* 82149AB0h case    4:*/		return 0x82149AB4;
		  /* 82149AB4h */ case    5:  		/* li R4, 16 */
		/* 82149AB4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149AB4h case    5:*/		return 0x82149AB8;
		  /* 82149AB8h */ case    6:  		/* addi R3, R1, 80 */
		/* 82149AB8h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149AB8h case    6:*/		return 0x82149ABC;
		  /* 82149ABCh */ case    7:  		/* bl -685180 */
		/* 82149ABCh case    7:*/		regs.LR = 0x82149AC0; return 0x820A2640;
		/* 82149ABCh case    7:*/		return 0x82149AC0;
		  /* 82149AC0h */ case    8:  		/* lis R11, -32253 */
		/* 82149AC0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149AC0h case    8:*/		return 0x82149AC4;
		  /* 82149AC4h */ case    9:  		/* addi R5, R1, 80 */
		/* 82149AC4h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149AC4h case    9:*/		return 0x82149AC8;
		  /* 82149AC8h */ case   10:  		/* addi R4, R11, 26604 */
		/* 82149AC8h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x67EC);
		/* 82149AC8h case   10:*/		return 0x82149ACC;
		  /* 82149ACCh */ case   11:  		/* mr R3, R31 */
		/* 82149ACCh case   11:*/		regs.R3 = regs.R31;
		/* 82149ACCh case   11:*/		return 0x82149AD0;
		  /* 82149AD0h */ case   12:  		/* bl -552 */
		/* 82149AD0h case   12:*/		regs.LR = 0x82149AD4; return 0x821498A8;
		/* 82149AD0h case   12:*/		return 0x82149AD4;
		  /* 82149AD4h */ case   13:  		/* mr R5, R30 */
		/* 82149AD4h case   13:*/		regs.R5 = regs.R30;
		/* 82149AD4h case   13:*/		return 0x82149AD8;
		  /* 82149AD8h */ case   14:  		/* li R4, 16 */
		/* 82149AD8h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149AD8h case   14:*/		return 0x82149ADC;
		  /* 82149ADCh */ case   15:  		/* lwz R6, <#[R1 + 276]> */
		/* 82149ADCh case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000114) );
		/* 82149ADCh case   15:*/		return 0x82149AE0;
		  /* 82149AE0h */ case   16:  		/* addi R3, R1, 80 */
		/* 82149AE0h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149AE0h case   16:*/		return 0x82149AE4;
		  /* 82149AE4h */ case   17:  		/* bl -685220 */
		/* 82149AE4h case   17:*/		regs.LR = 0x82149AE8; return 0x820A2640;
		/* 82149AE4h case   17:*/		return 0x82149AE8;
		  /* 82149AE8h */ case   18:  		/* lis R11, -32253 */
		/* 82149AE8h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149AE8h case   18:*/		return 0x82149AEC;
		  /* 82149AECh */ case   19:  		/* addi R5, R1, 80 */
		/* 82149AECh case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149AECh case   19:*/		return 0x82149AF0;
		  /* 82149AF0h */ case   20:  		/* addi R4, R11, 26592 */
		/* 82149AF0h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x67E0);
		/* 82149AF0h case   20:*/		return 0x82149AF4;
		  /* 82149AF4h */ case   21:  		/* mr R3, R31 */
		/* 82149AF4h case   21:*/		regs.R3 = regs.R31;
		/* 82149AF4h case   21:*/		return 0x82149AF8;
		  /* 82149AF8h */ case   22:  		/* bl -592 */
		/* 82149AF8h case   22:*/		regs.LR = 0x82149AFC; return 0x821498A8;
		/* 82149AF8h case   22:*/		return 0x82149AFC;
		  /* 82149AFCh */ case   23:  		/* mr R5, R30 */
		/* 82149AFCh case   23:*/		regs.R5 = regs.R30;
		/* 82149AFCh case   23:*/		return 0x82149B00;
		  /* 82149B00h */ case   24:  		/* li R4, 16 */
		/* 82149B00h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149B00h case   24:*/		return 0x82149B04;
		  /* 82149B04h */ case   25:  		/* lwz R6, <#[R1 + 284]> */
		/* 82149B04h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000011C) );
		/* 82149B04h case   25:*/		return 0x82149B08;
		  /* 82149B08h */ case   26:  		/* addi R3, R1, 80 */
		/* 82149B08h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149B08h case   26:*/		return 0x82149B0C;
		  /* 82149B0Ch */ case   27:  		/* bl -685260 */
		/* 82149B0Ch case   27:*/		regs.LR = 0x82149B10; return 0x820A2640;
		/* 82149B0Ch case   27:*/		return 0x82149B10;
		  /* 82149B10h */ case   28:  		/* lis R11, -32253 */
		/* 82149B10h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149B10h case   28:*/		return 0x82149B14;
		  /* 82149B14h */ case   29:  		/* addi R5, R1, 80 */
		/* 82149B14h case   29:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149B14h case   29:*/		return 0x82149B18;
		  /* 82149B18h */ case   30:  		/* addi R4, R11, 26580 */
		/* 82149B18h case   30:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x67D4);
		/* 82149B18h case   30:*/		return 0x82149B1C;
		  /* 82149B1Ch */ case   31:  		/* mr R3, R31 */
		/* 82149B1Ch case   31:*/		regs.R3 = regs.R31;
		/* 82149B1Ch case   31:*/		return 0x82149B20;
		  /* 82149B20h */ case   32:  		/* bl -632 */
		/* 82149B20h case   32:*/		regs.LR = 0x82149B24; return 0x821498A8;
		/* 82149B20h case   32:*/		return 0x82149B24;
		  /* 82149B24h */ case   33:  		/* addi R1, R1, 192 */
		/* 82149B24h case   33:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82149B24h case   33:*/		return 0x82149B28;
	}
	return 0x82149B28;
} // Block from 82149AA0h-82149B28h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82149B28h
// Function '?push_back@?$FastVector@ULiteralFloat@XGRAPHICS@@@XGRAPHICS@@QAAXABULiteralFloat@2@AAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149B28);
		  /* 82149B28h */ case    0:  		/* b -755864 */
		/* 82149B28h case    0:*/		return 0x82091290;
		/* 82149B28h case    0:*/		return 0x82149B2C;
		  /* 82149B2Ch */ case    1:  		/* nop */
		/* 82149B2Ch case    1:*/		cpu::op::nop();
		/* 82149B2Ch case    1:*/		return 0x82149B30;
	}
	return 0x82149B30;
} // Block from 82149B28h-82149B30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82149B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149B30);
		  /* 82149B30h */ case    0:  		/* mfspr R12, LR */
		/* 82149B30h case    0:*/		regs.R12 = regs.LR;
		/* 82149B30h case    0:*/		return 0x82149B34;
		  /* 82149B34h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82149B34h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82149B34h case    1:*/		return 0x82149B38;
		  /* 82149B38h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82149B38h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82149B38h case    2:*/		return 0x82149B3C;
		  /* 82149B3Ch */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 82149B3Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82149B3Ch case    3:*/		return 0x82149B40;
		  /* 82149B40h */ case    4:  		/* cmplwi CR6, R5, 0 */
		/* 82149B40h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82149B40h case    4:*/		return 0x82149B44;
		  /* 82149B44h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 82149B44h case    5:*/		if ( regs.CR[6].eq ) { return 0x82149B50;  }
		/* 82149B44h case    5:*/		return 0x82149B48;
		  /* 82149B48h */ case    6:  		/* lwz R31, <#[R5 + 48]> */
		/* 82149B48h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R5 + 0x00000030) );
		/* 82149B48h case    6:*/		return 0x82149B4C;
		  /* 82149B4Ch */ case    7:  		/* b 8 */
		/* 82149B4Ch case    7:*/		return 0x82149B54;
		/* 82149B4Ch case    7:*/		return 0x82149B50;
	}
	return 0x82149B50;
} // Block from 82149B30h-82149B50h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149B50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149B50);
		  /* 82149B50h */ case    0:  		/* li R31, 0 */
		/* 82149B50h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82149B50h case    0:*/		return 0x82149B54;
	}
	return 0x82149B54;
} // Block from 82149B50h-82149B54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149B54);
		  /* 82149B54h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 82149B54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82149B54h case    0:*/		return 0x82149B58;
		  /* 82149B58h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149B58h case    1:*/		if ( regs.CR[6].eq ) { return 0x82149B64;  }
		/* 82149B58h case    1:*/		return 0x82149B5C;
		  /* 82149B5Ch */ case    2:  		/* lwz R11, <#[R5 + 52]> */
		/* 82149B5Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000034) );
		/* 82149B5Ch case    2:*/		return 0x82149B60;
		  /* 82149B60h */ case    3:  		/* b 8 */
		/* 82149B60h case    3:*/		return 0x82149B68;
		/* 82149B60h case    3:*/		return 0x82149B64;
	}
	return 0x82149B64;
} // Block from 82149B54h-82149B64h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82149B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149B64);
		  /* 82149B64h */ case    0:  		/* li R11, 0 */
		/* 82149B64h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82149B64h case    0:*/		return 0x82149B68;
	}
	return 0x82149B68;
} // Block from 82149B64h-82149B68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149B68);
		  /* 82149B68h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 82149B68h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82149B68h case    0:*/		return 0x82149B6C;
		  /* 82149B6Ch */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149B6Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82149B78;  }
		/* 82149B6Ch case    1:*/		return 0x82149B70;
		  /* 82149B70h */ case    2:  		/* lwz R10, <#[R5 + 44]> */
		/* 82149B70h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x0000002C) );
		/* 82149B70h case    2:*/		return 0x82149B74;
		  /* 82149B74h */ case    3:  		/* b 8 */
		/* 82149B74h case    3:*/		return 0x82149B7C;
		/* 82149B74h case    3:*/		return 0x82149B78;
	}
	return 0x82149B78;
} // Block from 82149B68h-82149B78h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82149B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149B78);
		  /* 82149B78h */ case    0:  		/* li R10, 0 */
		/* 82149B78h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82149B78h case    0:*/		return 0x82149B7C;
	}
	return 0x82149B7C;
} // Block from 82149B78h-82149B7Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149B7C);
		  /* 82149B7Ch */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 82149B7Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82149B7Ch case    0:*/		return 0x82149B80;
		  /* 82149B80h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149B80h case    1:*/		if ( regs.CR[6].eq ) { return 0x82149B8C;  }
		/* 82149B80h case    1:*/		return 0x82149B84;
		  /* 82149B84h */ case    2:  		/* lwz R9, <#[R5 + 40]> */
		/* 82149B84h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000028) );
		/* 82149B84h case    2:*/		return 0x82149B88;
		  /* 82149B88h */ case    3:  		/* b 8 */
		/* 82149B88h case    3:*/		return 0x82149B90;
		/* 82149B88h case    3:*/		return 0x82149B8C;
	}
	return 0x82149B8C;
} // Block from 82149B7Ch-82149B8Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82149B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149B8C);
		  /* 82149B8Ch */ case    0:  		/* li R9, 0 */
		/* 82149B8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82149B8Ch case    0:*/		return 0x82149B90;
	}
	return 0x82149B90;
} // Block from 82149B8Ch-82149B90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149B90);
		  /* 82149B90h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 82149B90h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82149B90h case    0:*/		return 0x82149B94;
		  /* 82149B94h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149B94h case    1:*/		if ( regs.CR[6].eq ) { return 0x82149BA0;  }
		/* 82149B94h case    1:*/		return 0x82149B98;
		  /* 82149B98h */ case    2:  		/* lwz R8, <#[R5 + 36]> */
		/* 82149B98h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R5 + 0x00000024) );
		/* 82149B98h case    2:*/		return 0x82149B9C;
		  /* 82149B9Ch */ case    3:  		/* b 8 */
		/* 82149B9Ch case    3:*/		return 0x82149BA4;
		/* 82149B9Ch case    3:*/		return 0x82149BA0;
	}
	return 0x82149BA0;
} // Block from 82149B90h-82149BA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82149BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149BA0);
		  /* 82149BA0h */ case    0:  		/* li R8, 0 */
		/* 82149BA0h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82149BA0h case    0:*/		return 0x82149BA4;
	}
	return 0x82149BA4;
} // Block from 82149BA0h-82149BA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149BA4);
		  /* 82149BA4h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 82149BA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82149BA4h case    0:*/		return 0x82149BA8;
		  /* 82149BA8h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149BA8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82149BB4;  }
		/* 82149BA8h case    1:*/		return 0x82149BAC;
		  /* 82149BACh */ case    2:  		/* lwz R7, <#[R5 + 32]> */
		/* 82149BACh case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + 0x00000020) );
		/* 82149BACh case    2:*/		return 0x82149BB0;
	}
	return 0x82149BB0;
} // Block from 82149BA4h-82149BB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82149BB0h
// Function '?push_back@?$FastVector@UFile@XGRAPHICS@@@XGRAPHICS@@QAAXABUFile@2@AAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149BB0);
		  /* 82149BB0h */ case    0:  		/* b 8 */
		/* 82149BB0h case    0:*/		return 0x82149BB8;
		/* 82149BB0h case    0:*/		return 0x82149BB4;
	}
	return 0x82149BB4;
} // Block from 82149BB0h-82149BB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149BB4);
		  /* 82149BB4h */ case    0:  		/* li R7, 0 */
		/* 82149BB4h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82149BB4h case    0:*/		return 0x82149BB8;
	}
	return 0x82149BB8;
} // Block from 82149BB4h-82149BB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149BB8);
		  /* 82149BB8h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 82149BB8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82149BB8h case    0:*/		return 0x82149BBC;
		  /* 82149BBCh */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149BBCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82149BC8;  }
		/* 82149BBCh case    1:*/		return 0x82149BC0;
		  /* 82149BC0h */ case    2:  		/* lwz R6, <#[R5 + 16]> */
		/* 82149BC0h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + 0x00000010) );
		/* 82149BC0h case    2:*/		return 0x82149BC4;
		  /* 82149BC4h */ case    3:  		/* b 8 */
		/* 82149BC4h case    3:*/		return 0x82149BCC;
		/* 82149BC4h case    3:*/		return 0x82149BC8;
	}
	return 0x82149BC8;
} // Block from 82149BB8h-82149BC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82149BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149BC8);
		  /* 82149BC8h */ case    0:  		/* li R6, 0 */
		/* 82149BC8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82149BC8h case    0:*/		return 0x82149BCC;
	}
	return 0x82149BCC;
} // Block from 82149BC8h-82149BCCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149BCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149BCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149BCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149BCC);
		  /* 82149BCCh */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 82149BCCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82149BCCh case    0:*/		return 0x82149BD0;
		  /* 82149BD0h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149BD0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82149BDC;  }
		/* 82149BD0h case    1:*/		return 0x82149BD4;
		  /* 82149BD4h */ case    2:  		/* lwz R5, <#[R5]> */
		/* 82149BD4h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000000) );
		/* 82149BD4h case    2:*/		return 0x82149BD8;
		  /* 82149BD8h */ case    3:  		/* b 8 */
		/* 82149BD8h case    3:*/		return 0x82149BE0;
		/* 82149BD8h case    3:*/		return 0x82149BDC;
	}
	return 0x82149BDC;
} // Block from 82149BCCh-82149BDCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82149BDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149BDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149BDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149BDC);
		  /* 82149BDCh */ case    0:  		/* li R5, 0 */
		/* 82149BDCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82149BDCh case    0:*/		return 0x82149BE0;
	}
	return 0x82149BE0;
} // Block from 82149BDCh-82149BE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149BE0);
		  /* 82149BE0h */ case    0:  		/* stw R31, <#[R1 + 92]> */
		/* 82149BE0h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 82149BE0h case    0:*/		return 0x82149BE4;
		  /* 82149BE4h */ case    1:  		/* stw R11, <#[R1 + 84]> */
		/* 82149BE4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82149BE4h case    1:*/		return 0x82149BE8;
		  /* 82149BE8h */ case    2:  		/* bl -736 */
		/* 82149BE8h case    2:*/		regs.LR = 0x82149BEC; return 0x82149908;
		/* 82149BE8h case    2:*/		return 0x82149BEC;
		  /* 82149BECh */ case    3:  		/* addi R1, R1, 112 */
		/* 82149BECh case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82149BECh case    3:*/		return 0x82149BF0;
		  /* 82149BF0h */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 82149BF0h case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82149BF0h case    4:*/		return 0x82149BF4;
		  /* 82149BF4h */ case    5:  		/* mtspr LR, R12 */
		/* 82149BF4h case    5:*/		regs.LR = regs.R12;
		/* 82149BF4h case    5:*/		return 0x82149BF8;
		  /* 82149BF8h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 82149BF8h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82149BF8h case    6:*/		return 0x82149BFC;
		  /* 82149BFCh */ case    7:  		/* bclr 20, CR0_LT */
		/* 82149BFCh case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82149BFCh case    7:*/		return 0x82149C00;
	}
	return 0x82149C00;
} // Block from 82149BE0h-82149C00h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149C00);
		  /* 82149C00h */ case    0:  		/* mfspr R12, LR */
		/* 82149C00h case    0:*/		regs.R12 = regs.LR;
		/* 82149C00h case    0:*/		return 0x82149C04;
		  /* 82149C04h */ case    1:  		/* bl -756164 */
		/* 82149C04h case    1:*/		regs.LR = 0x82149C08; return 0x82091240;
		/* 82149C04h case    1:*/		return 0x82149C08;
		  /* 82149C08h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82149C08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82149C08h case    2:*/		return 0x82149C0C;
		  /* 82149C0Ch */ case    3:  		/* lis R11, -32255 */
		/* 82149C0Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82149C0Ch case    3:*/		return 0x82149C10;
		  /* 82149C10h */ case    4:  		/* mr R22, R10 */
		/* 82149C10h case    4:*/		regs.R22 = regs.R10;
		/* 82149C10h case    4:*/		return 0x82149C14;
		  /* 82149C14h */ case    5:  		/* lis R10, -32255 */
		/* 82149C14h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82149C14h case    5:*/		return 0x82149C18;
		  /* 82149C18h */ case    6:  		/* addi R29, R11, 5224 */
		/* 82149C18h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1468);
		/* 82149C18h case    6:*/		return 0x82149C1C;
		  /* 82149C1Ch */ case    7:  		/* mr R27, R5 */
		/* 82149C1Ch case    7:*/		regs.R27 = regs.R5;
		/* 82149C1Ch case    7:*/		return 0x82149C20;
		  /* 82149C20h */ case    8:  		/* mr R23, R9 */
		/* 82149C20h case    8:*/		regs.R23 = regs.R9;
		/* 82149C20h case    8:*/		return 0x82149C24;
		  /* 82149C24h */ case    9:  		/* mr R31, R3 */
		/* 82149C24h case    9:*/		regs.R31 = regs.R3;
		/* 82149C24h case    9:*/		return 0x82149C28;
	}
	return 0x82149C28;
} // Block from 82149C00h-82149C28h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82149C28h
// Function '?push_back@?$FastVector@UDefine@XGRAPHICS@@@XGRAPHICS@@QAAXABUDefine@2@AAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149C28);
		  /* 82149C28h */ case    0:  		/* mr R30, R4 */
		/* 82149C28h case    0:*/		regs.R30 = regs.R4;
		/* 82149C28h case    0:*/		return 0x82149C2C;
		  /* 82149C2Ch */ case    1:  		/* mr R26, R6 */
		/* 82149C2Ch case    1:*/		regs.R26 = regs.R6;
		/* 82149C2Ch case    1:*/		return 0x82149C30;
		  /* 82149C30h */ case    2:  		/* mr R25, R7 */
		/* 82149C30h case    2:*/		regs.R25 = regs.R7;
		/* 82149C30h case    2:*/		return 0x82149C34;
		  /* 82149C34h */ case    3:  		/* mr R24, R8 */
		/* 82149C34h case    3:*/		regs.R24 = regs.R8;
		/* 82149C34h case    3:*/		return 0x82149C38;
		  /* 82149C38h */ case    4:  		/* rlwinm. R9, R4, 0, 29, 29 */
		/* 82149C38h case    4:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R4);
		/* 82149C38h case    4:*/		return 0x82149C3C;
		  /* 82149C3Ch */ case    5:  		/* addi R28, R10, 5216 */
		/* 82149C3Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x1460);
		/* 82149C3Ch case    5:*/		return 0x82149C40;
		  /* 82149C40h */ case    6:  		/* mr R5, R29 */
		/* 82149C40h case    6:*/		regs.R5 = regs.R29;
		/* 82149C40h case    6:*/		return 0x82149C44;
		  /* 82149C44h */ case    7:  		/* bc 4, CR0_EQ, 8 */
		/* 82149C44h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82149C4C;  }
		/* 82149C44h case    7:*/		return 0x82149C48;
		  /* 82149C48h */ case    8:  		/* mr R5, R28 */
		/* 82149C48h case    8:*/		regs.R5 = regs.R28;
		/* 82149C48h case    8:*/		return 0x82149C4C;
	}
	return 0x82149C4C;
} // Block from 82149C28h-82149C4Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82149C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149C4C);
		  /* 82149C4Ch */ case    0:  		/* lis R11, -32253 */
		/* 82149C4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149C4Ch case    0:*/		return 0x82149C50;
		  /* 82149C50h */ case    1:  		/* mr R3, R31 */
		/* 82149C50h case    1:*/		regs.R3 = regs.R31;
		/* 82149C50h case    1:*/		return 0x82149C54;
		  /* 82149C54h */ case    2:  		/* addi R4, R11, 27040 */
		/* 82149C54h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x69A0);
		/* 82149C54h case    2:*/		return 0x82149C58;
		  /* 82149C58h */ case    3:  		/* bl -944 */
		/* 82149C58h case    3:*/		regs.LR = 0x82149C5C; return 0x821498A8;
		/* 82149C58h case    3:*/		return 0x82149C5C;
		  /* 82149C5Ch */ case    4:  		/* rlwinm. R11, R30, 0, 28, 28 */
		/* 82149C5Ch case    4:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R30);
		/* 82149C5Ch case    4:*/		return 0x82149C60;
		  /* 82149C60h */ case    5:  		/* mr R5, R29 */
		/* 82149C60h case    5:*/		regs.R5 = regs.R29;
		/* 82149C60h case    5:*/		return 0x82149C64;
		  /* 82149C64h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 82149C64h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149C6C;  }
		/* 82149C64h case    6:*/		return 0x82149C68;
		  /* 82149C68h */ case    7:  		/* mr R5, R28 */
		/* 82149C68h case    7:*/		regs.R5 = regs.R28;
		/* 82149C68h case    7:*/		return 0x82149C6C;
	}
	return 0x82149C6C;
} // Block from 82149C4Ch-82149C6Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149C6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149C6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149C6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149C6C);
		  /* 82149C6Ch */ case    0:  		/* lis R11, -32253 */
		/* 82149C6Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149C6Ch case    0:*/		return 0x82149C70;
		  /* 82149C70h */ case    1:  		/* mr R3, R31 */
		/* 82149C70h case    1:*/		regs.R3 = regs.R31;
		/* 82149C70h case    1:*/		return 0x82149C74;
		  /* 82149C74h */ case    2:  		/* addi R4, R11, 27032 */
		/* 82149C74h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6998);
		/* 82149C74h case    2:*/		return 0x82149C78;
		  /* 82149C78h */ case    3:  		/* bl -976 */
		/* 82149C78h case    3:*/		regs.LR = 0x82149C7C; return 0x821498A8;
		/* 82149C78h case    3:*/		return 0x82149C7C;
		  /* 82149C7Ch */ case    4:  		/* rlwinm. R11, R30, 0, 27, 27 */
		/* 82149C7Ch case    4:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R30);
		/* 82149C7Ch case    4:*/		return 0x82149C80;
		  /* 82149C80h */ case    5:  		/* mr R5, R29 */
		/* 82149C80h case    5:*/		regs.R5 = regs.R29;
		/* 82149C80h case    5:*/		return 0x82149C84;
		  /* 82149C84h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 82149C84h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149C8C;  }
		/* 82149C84h case    6:*/		return 0x82149C88;
		  /* 82149C88h */ case    7:  		/* mr R5, R28 */
		/* 82149C88h case    7:*/		regs.R5 = regs.R28;
		/* 82149C88h case    7:*/		return 0x82149C8C;
	}
	return 0x82149C8C;
} // Block from 82149C6Ch-82149C8Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149C8C);
		  /* 82149C8Ch */ case    0:  		/* lis R11, -32253 */
		/* 82149C8Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149C8Ch case    0:*/		return 0x82149C90;
		  /* 82149C90h */ case    1:  		/* mr R3, R31 */
		/* 82149C90h case    1:*/		regs.R3 = regs.R31;
		/* 82149C90h case    1:*/		return 0x82149C94;
		  /* 82149C94h */ case    2:  		/* addi R4, R11, 27024 */
		/* 82149C94h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6990);
		/* 82149C94h case    2:*/		return 0x82149C98;
		  /* 82149C98h */ case    3:  		/* bl -1008 */
		/* 82149C98h case    3:*/		regs.LR = 0x82149C9C; return 0x821498A8;
		/* 82149C98h case    3:*/		return 0x82149C9C;
		  /* 82149C9Ch */ case    4:  		/* rlwinm. R11, R30, 0, 26, 26 */
		/* 82149C9Ch case    4:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R30);
		/* 82149C9Ch case    4:*/		return 0x82149CA0;
	}
	return 0x82149CA0;
} // Block from 82149C8Ch-82149CA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82149CA0h
// Function '?push_back@?$FastVector@UArgument@XGRAPHICS@@@XGRAPHICS@@QAAXABUArgument@2@AAJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149CA0);
		  /* 82149CA0h */ case    0:  		/* mr R5, R29 */
		/* 82149CA0h case    0:*/		regs.R5 = regs.R29;
		/* 82149CA0h case    0:*/		return 0x82149CA4;
		  /* 82149CA4h */ case    1:  		/* bc 4, CR0_EQ, 8 */
		/* 82149CA4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82149CAC;  }
		/* 82149CA4h case    1:*/		return 0x82149CA8;
		  /* 82149CA8h */ case    2:  		/* mr R5, R28 */
		/* 82149CA8h case    2:*/		regs.R5 = regs.R28;
		/* 82149CA8h case    2:*/		return 0x82149CAC;
	}
	return 0x82149CAC;
} // Block from 82149CA0h-82149CACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82149CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149CAC);
		  /* 82149CACh */ case    0:  		/* lis R11, -32253 */
		/* 82149CACh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149CACh case    0:*/		return 0x82149CB0;
		  /* 82149CB0h */ case    1:  		/* mr R3, R31 */
		/* 82149CB0h case    1:*/		regs.R3 = regs.R31;
		/* 82149CB0h case    1:*/		return 0x82149CB4;
		  /* 82149CB4h */ case    2:  		/* addi R4, R11, 27016 */
		/* 82149CB4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6988);
		/* 82149CB4h case    2:*/		return 0x82149CB8;
		  /* 82149CB8h */ case    3:  		/* bl -1040 */
		/* 82149CB8h case    3:*/		regs.LR = 0x82149CBC; return 0x821498A8;
		/* 82149CB8h case    3:*/		return 0x82149CBC;
		  /* 82149CBCh */ case    4:  		/* rlwinm. R11, R30, 0, 23, 23 */
		/* 82149CBCh case    4:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R30);
		/* 82149CBCh case    4:*/		return 0x82149CC0;
		  /* 82149CC0h */ case    5:  		/* mr R5, R29 */
		/* 82149CC0h case    5:*/		regs.R5 = regs.R29;
		/* 82149CC0h case    5:*/		return 0x82149CC4;
		  /* 82149CC4h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 82149CC4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149CCC;  }
		/* 82149CC4h case    6:*/		return 0x82149CC8;
		  /* 82149CC8h */ case    7:  		/* mr R5, R28 */
		/* 82149CC8h case    7:*/		regs.R5 = regs.R28;
		/* 82149CC8h case    7:*/		return 0x82149CCC;
	}
	return 0x82149CCC;
} // Block from 82149CACh-82149CCCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149CCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149CCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149CCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149CCC);
		  /* 82149CCCh */ case    0:  		/* lis R11, -32253 */
		/* 82149CCCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149CCCh case    0:*/		return 0x82149CD0;
		  /* 82149CD0h */ case    1:  		/* mr R3, R31 */
		/* 82149CD0h case    1:*/		regs.R3 = regs.R31;
		/* 82149CD0h case    1:*/		return 0x82149CD4;
		  /* 82149CD4h */ case    2:  		/* addi R4, R11, 27012 */
		/* 82149CD4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6984);
		/* 82149CD4h case    2:*/		return 0x82149CD8;
		  /* 82149CD8h */ case    3:  		/* bl -1072 */
		/* 82149CD8h case    3:*/		regs.LR = 0x82149CDC; return 0x821498A8;
		/* 82149CD8h case    3:*/		return 0x82149CDC;
		  /* 82149CDCh */ case    4:  		/* rlwinm. R11, R30, 0, 22, 22 */
		/* 82149CDCh case    4:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R30);
		/* 82149CDCh case    4:*/		return 0x82149CE0;
		  /* 82149CE0h */ case    5:  		/* mr R5, R29 */
		/* 82149CE0h case    5:*/		regs.R5 = regs.R29;
		/* 82149CE0h case    5:*/		return 0x82149CE4;
		  /* 82149CE4h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 82149CE4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149CEC;  }
		/* 82149CE4h case    6:*/		return 0x82149CE8;
		  /* 82149CE8h */ case    7:  		/* mr R5, R28 */
		/* 82149CE8h case    7:*/		regs.R5 = regs.R28;
		/* 82149CE8h case    7:*/		return 0x82149CEC;
	}
	return 0x82149CEC;
} // Block from 82149CCCh-82149CECh (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149CEC);
		  /* 82149CECh */ case    0:  		/* lis R11, -32253 */
		/* 82149CECh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149CECh case    0:*/		return 0x82149CF0;
		  /* 82149CF0h */ case    1:  		/* mr R3, R31 */
		/* 82149CF0h case    1:*/		regs.R3 = regs.R31;
		/* 82149CF0h case    1:*/		return 0x82149CF4;
		  /* 82149CF4h */ case    2:  		/* addi R4, R11, 27004 */
		/* 82149CF4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x697C);
		/* 82149CF4h case    2:*/		return 0x82149CF8;
		  /* 82149CF8h */ case    3:  		/* bl -1104 */
		/* 82149CF8h case    3:*/		regs.LR = 0x82149CFC; return 0x821498A8;
		/* 82149CF8h case    3:*/		return 0x82149CFC;
		  /* 82149CFCh */ case    4:  		/* rlwinm. R11, R30, 0, 21, 21 */
		/* 82149CFCh case    4:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R30);
		/* 82149CFCh case    4:*/		return 0x82149D00;
		  /* 82149D00h */ case    5:  		/* mr R5, R29 */
		/* 82149D00h case    5:*/		regs.R5 = regs.R29;
		/* 82149D00h case    5:*/		return 0x82149D04;
		  /* 82149D04h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 82149D04h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149D0C;  }
		/* 82149D04h case    6:*/		return 0x82149D08;
		  /* 82149D08h */ case    7:  		/* mr R5, R28 */
		/* 82149D08h case    7:*/		regs.R5 = regs.R28;
		/* 82149D08h case    7:*/		return 0x82149D0C;
	}
	return 0x82149D0C;
} // Block from 82149CECh-82149D0Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149D0C);
		  /* 82149D0Ch */ case    0:  		/* lis R11, -32253 */
		/* 82149D0Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149D0Ch case    0:*/		return 0x82149D10;
		  /* 82149D10h */ case    1:  		/* mr R3, R31 */
		/* 82149D10h case    1:*/		regs.R3 = regs.R31;
		/* 82149D10h case    1:*/		return 0x82149D14;
		  /* 82149D14h */ case    2:  		/* addi R4, R11, 26996 */
		/* 82149D14h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6974);
		/* 82149D14h case    2:*/		return 0x82149D18;
	}
	return 0x82149D18;
} // Block from 82149D0Ch-82149D18h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82149D18h
// Function '??0ShaderPDBBuilder@XGRAPHICS@@QAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149D18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149D18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149D18);
		  /* 82149D18h */ case    0:  		/* bl -1136 */
		/* 82149D18h case    0:*/		regs.LR = 0x82149D1C; return 0x821498A8;
		/* 82149D18h case    0:*/		return 0x82149D1C;
		  /* 82149D1Ch */ case    1:  		/* rlwinm. R11, R30, 0, 13, 13 */
		/* 82149D1Ch case    1:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R30);
		/* 82149D1Ch case    1:*/		return 0x82149D20;
		  /* 82149D20h */ case    2:  		/* mr R5, R29 */
		/* 82149D20h case    2:*/		regs.R5 = regs.R29;
		/* 82149D20h case    2:*/		return 0x82149D24;
		  /* 82149D24h */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 82149D24h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82149D2C;  }
		/* 82149D24h case    3:*/		return 0x82149D28;
		  /* 82149D28h */ case    4:  		/* mr R5, R28 */
		/* 82149D28h case    4:*/		regs.R5 = regs.R28;
		/* 82149D28h case    4:*/		return 0x82149D2C;
	}
	return 0x82149D2C;
} // Block from 82149D18h-82149D2Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82149D2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149D2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149D2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149D2C);
		  /* 82149D2Ch */ case    0:  		/* lis R11, -32253 */
		/* 82149D2Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149D2Ch case    0:*/		return 0x82149D30;
		  /* 82149D30h */ case    1:  		/* mr R3, R31 */
		/* 82149D30h case    1:*/		regs.R3 = regs.R31;
		/* 82149D30h case    1:*/		return 0x82149D34;
		  /* 82149D34h */ case    2:  		/* addi R4, R11, 26980 */
		/* 82149D34h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6964);
		/* 82149D34h case    2:*/		return 0x82149D38;
		  /* 82149D38h */ case    3:  		/* bl -1168 */
		/* 82149D38h case    3:*/		regs.LR = 0x82149D3C; return 0x821498A8;
		/* 82149D38h case    3:*/		return 0x82149D3C;
		  /* 82149D3Ch */ case    4:  		/* rlwinm. R11, R30, 0, 9, 9 */
		/* 82149D3Ch case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R30);
		/* 82149D3Ch case    4:*/		return 0x82149D40;
		  /* 82149D40h */ case    5:  		/* mr R5, R29 */
		/* 82149D40h case    5:*/		regs.R5 = regs.R29;
		/* 82149D40h case    5:*/		return 0x82149D44;
		  /* 82149D44h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 82149D44h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149D4C;  }
		/* 82149D44h case    6:*/		return 0x82149D48;
		  /* 82149D48h */ case    7:  		/* mr R5, R28 */
		/* 82149D48h case    7:*/		regs.R5 = regs.R28;
		/* 82149D48h case    7:*/		return 0x82149D4C;
	}
	return 0x82149D4C;
} // Block from 82149D2Ch-82149D4Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149D4C);
		  /* 82149D4Ch */ case    0:  		/* lis R11, -32253 */
		/* 82149D4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149D4Ch case    0:*/		return 0x82149D50;
		  /* 82149D50h */ case    1:  		/* mr R3, R31 */
		/* 82149D50h case    1:*/		regs.R3 = regs.R31;
		/* 82149D50h case    1:*/		return 0x82149D54;
		  /* 82149D54h */ case    2:  		/* addi R4, R11, 26972 */
		/* 82149D54h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x695C);
		/* 82149D54h case    2:*/		return 0x82149D58;
		  /* 82149D58h */ case    3:  		/* bl -1200 */
		/* 82149D58h case    3:*/		regs.LR = 0x82149D5C; return 0x821498A8;
		/* 82149D58h case    3:*/		return 0x82149D5C;
		  /* 82149D5Ch */ case    4:  		/* rlwinm. R11, R30, 0, 6, 6 */
		/* 82149D5Ch case    4:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R30);
		/* 82149D5Ch case    4:*/		return 0x82149D60;
		  /* 82149D60h */ case    5:  		/* mr R5, R29 */
		/* 82149D60h case    5:*/		regs.R5 = regs.R29;
		/* 82149D60h case    5:*/		return 0x82149D64;
		  /* 82149D64h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 82149D64h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149D6C;  }
		/* 82149D64h case    6:*/		return 0x82149D68;
		  /* 82149D68h */ case    7:  		/* mr R5, R28 */
		/* 82149D68h case    7:*/		regs.R5 = regs.R28;
		/* 82149D68h case    7:*/		return 0x82149D6C;
	}
	return 0x82149D6C;
} // Block from 82149D4Ch-82149D6Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149D6C);
		  /* 82149D6Ch */ case    0:  		/* lis R11, -32253 */
		/* 82149D6Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149D6Ch case    0:*/		return 0x82149D70;
		  /* 82149D70h */ case    1:  		/* mr R3, R31 */
		/* 82149D70h case    1:*/		regs.R3 = regs.R31;
		/* 82149D70h case    1:*/		return 0x82149D74;
		  /* 82149D74h */ case    2:  		/* addi R4, R11, 26964 */
		/* 82149D74h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6954);
		/* 82149D74h case    2:*/		return 0x82149D78;
		  /* 82149D78h */ case    3:  		/* bl -1232 */
		/* 82149D78h case    3:*/		regs.LR = 0x82149D7C; return 0x821498A8;
		/* 82149D78h case    3:*/		return 0x82149D7C;
		  /* 82149D7Ch */ case    4:  		/* rlwinm. R11, R30, 0, 7, 7 */
		/* 82149D7Ch case    4:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R30);
		/* 82149D7Ch case    4:*/		return 0x82149D80;
		  /* 82149D80h */ case    5:  		/* mr R5, R29 */
		/* 82149D80h case    5:*/		regs.R5 = regs.R29;
		/* 82149D80h case    5:*/		return 0x82149D84;
		  /* 82149D84h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 82149D84h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149D8C;  }
		/* 82149D84h case    6:*/		return 0x82149D88;
		  /* 82149D88h */ case    7:  		/* mr R5, R28 */
		/* 82149D88h case    7:*/		regs.R5 = regs.R28;
		/* 82149D88h case    7:*/		return 0x82149D8C;
	}
	return 0x82149D8C;
} // Block from 82149D6Ch-82149D8Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149D8C);
		  /* 82149D8Ch */ case    0:  		/* lis R11, -32253 */
		/* 82149D8Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149D8Ch case    0:*/		return 0x82149D90;
		  /* 82149D90h */ case    1:  		/* mr R3, R31 */
		/* 82149D90h case    1:*/		regs.R3 = regs.R31;
		/* 82149D90h case    1:*/		return 0x82149D94;
		  /* 82149D94h */ case    2:  		/* addi R4, R11, 26956 */
		/* 82149D94h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x694C);
		/* 82149D94h case    2:*/		return 0x82149D98;
		  /* 82149D98h */ case    3:  		/* bl -1264 */
		/* 82149D98h case    3:*/		regs.LR = 0x82149D9C; return 0x821498A8;
		/* 82149D98h case    3:*/		return 0x82149D9C;
		  /* 82149D9Ch */ case    4:  		/* rlwinm. R11, R27, 0, 28, 28 */
		/* 82149D9Ch case    4:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R27);
		/* 82149D9Ch case    4:*/		return 0x82149DA0;
		  /* 82149DA0h */ case    5:  		/* mr R5, R29 */
		/* 82149DA0h case    5:*/		regs.R5 = regs.R29;
		/* 82149DA0h case    5:*/		return 0x82149DA4;
		  /* 82149DA4h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 82149DA4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149DAC;  }
		/* 82149DA4h case    6:*/		return 0x82149DA8;
		  /* 82149DA8h */ case    7:  		/* mr R5, R28 */
		/* 82149DA8h case    7:*/		regs.R5 = regs.R28;
		/* 82149DA8h case    7:*/		return 0x82149DAC;
	}
	return 0x82149DAC;
} // Block from 82149D8Ch-82149DACh (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149DAC);
		  /* 82149DACh */ case    0:  		/* lis R11, -32253 */
		/* 82149DACh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149DACh case    0:*/		return 0x82149DB0;
		  /* 82149DB0h */ case    1:  		/* mr R3, R31 */
		/* 82149DB0h case    1:*/		regs.R3 = regs.R31;
		/* 82149DB0h case    1:*/		return 0x82149DB4;
		  /* 82149DB4h */ case    2:  		/* addi R4, R11, 26936 */
		/* 82149DB4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6938);
		/* 82149DB4h case    2:*/		return 0x82149DB8;
		  /* 82149DB8h */ case    3:  		/* bl -1296 */
		/* 82149DB8h case    3:*/		regs.LR = 0x82149DBC; return 0x821498A8;
		/* 82149DB8h case    3:*/		return 0x82149DBC;
		  /* 82149DBCh */ case    4:  		/* rlwinm. R11, R27, 0, 26, 26 */
		/* 82149DBCh case    4:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R27);
		/* 82149DBCh case    4:*/		return 0x82149DC0;
		  /* 82149DC0h */ case    5:  		/* mr R5, R29 */
		/* 82149DC0h case    5:*/		regs.R5 = regs.R29;
		/* 82149DC0h case    5:*/		return 0x82149DC4;
		  /* 82149DC4h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 82149DC4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82149DCC;  }
		/* 82149DC4h case    6:*/		return 0x82149DC8;
		  /* 82149DC8h */ case    7:  		/* mr R5, R28 */
		/* 82149DC8h case    7:*/		regs.R5 = regs.R28;
		/* 82149DC8h case    7:*/		return 0x82149DCC;
	}
	return 0x82149DCC;
} // Block from 82149DACh-82149DCCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 82149DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149DCC);
		  /* 82149DCCh */ case    0:  		/* lis R11, -32253 */
		/* 82149DCCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149DCCh case    0:*/		return 0x82149DD0;
		  /* 82149DD0h */ case    1:  		/* mr R3, R31 */
		/* 82149DD0h case    1:*/		regs.R3 = regs.R31;
		/* 82149DD0h case    1:*/		return 0x82149DD4;
		  /* 82149DD4h */ case    2:  		/* addi R4, R11, 26924 */
		/* 82149DD4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x692C);
		/* 82149DD4h case    2:*/		return 0x82149DD8;
		  /* 82149DD8h */ case    3:  		/* bl -1328 */
		/* 82149DD8h case    3:*/		regs.LR = 0x82149DDC; return 0x821498A8;
		/* 82149DD8h case    3:*/		return 0x82149DDC;
		  /* 82149DDCh */ case    4:  		/* rlwinm. R11, R27, 0, 23, 23 */
		/* 82149DDCh case    4:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R27);
		/* 82149DDCh case    4:*/		return 0x82149DE0;
		  /* 82149DE0h */ case    5:  		/* bc 12, CR0_EQ, 24 */
		/* 82149DE0h case    5:*/		if ( regs.CR[0].eq ) { return 0x82149DF8;  }
		/* 82149DE0h case    5:*/		return 0x82149DE4;
		  /* 82149DE4h */ case    6:  		/* lis R11, -32253 */
		/* 82149DE4h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149DE4h case    6:*/		return 0x82149DE8;
		  /* 82149DE8h */ case    7:  		/* mr R5, R29 */
		/* 82149DE8h case    7:*/		regs.R5 = regs.R29;
		/* 82149DE8h case    7:*/		return 0x82149DEC;
		  /* 82149DECh */ case    8:  		/* addi R4, R11, 26912 */
		/* 82149DECh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6920);
		/* 82149DECh case    8:*/		return 0x82149DF0;
		  /* 82149DF0h */ case    9:  		/* mr R3, R31 */
		/* 82149DF0h case    9:*/		regs.R3 = regs.R31;
		/* 82149DF0h case    9:*/		return 0x82149DF4;
		  /* 82149DF4h */ case   10:  		/* bl -1356 */
		/* 82149DF4h case   10:*/		regs.LR = 0x82149DF8; return 0x821498A8;
		/* 82149DF4h case   10:*/		return 0x82149DF8;
	}
	return 0x82149DF8;
} // Block from 82149DCCh-82149DF8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82149DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149DF8);
		  /* 82149DF8h */ case    0:  		/* rlwinm. R11, R27, 0, 22, 22 */
		/* 82149DF8h case    0:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R27);
		/* 82149DF8h case    0:*/		return 0x82149DFC;
		  /* 82149DFCh */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 82149DFCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82149E14;  }
		/* 82149DFCh case    1:*/		return 0x82149E00;
		  /* 82149E00h */ case    2:  		/* lis R11, -32253 */
		/* 82149E00h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149E00h case    2:*/		return 0x82149E04;
		  /* 82149E04h */ case    3:  		/* mr R5, R29 */
		/* 82149E04h case    3:*/		regs.R5 = regs.R29;
		/* 82149E04h case    3:*/		return 0x82149E08;
		  /* 82149E08h */ case    4:  		/* addi R4, R11, 26892 */
		/* 82149E08h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x690C);
		/* 82149E08h case    4:*/		return 0x82149E0C;
		  /* 82149E0Ch */ case    5:  		/* mr R3, R31 */
		/* 82149E0Ch case    5:*/		regs.R3 = regs.R31;
		/* 82149E0Ch case    5:*/		return 0x82149E10;
		  /* 82149E10h */ case    6:  		/* bl -1384 */
		/* 82149E10h case    6:*/		regs.LR = 0x82149E14; return 0x821498A8;
		/* 82149E10h case    6:*/		return 0x82149E14;
	}
	return 0x82149E14;
} // Block from 82149DF8h-82149E14h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82149E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149E14);
		  /* 82149E14h */ case    0:  		/* lis R11, -32253 */
		/* 82149E14h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149E14h case    0:*/		return 0x82149E18;
	}
	return 0x82149E18;
} // Block from 82149E14h-82149E18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149E18h
// Function '?AddRef@ShaderPDBBuilder@XGRAPHICS@@UAAKXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149E18);
		  /* 82149E18h */ case    0:  		/* rlwinm. R10, R27, 0, 21, 21 */
		/* 82149E18h case    0:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R10,regs.R27);
		/* 82149E18h case    0:*/		return 0x82149E1C;
		  /* 82149E1Ch */ case    1:  		/* addi R30, R11, 26668 */
		/* 82149E1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x682C);
		/* 82149E1Ch case    1:*/		return 0x82149E20;
		  /* 82149E20h */ case    2:  		/* bc 12, CR0_EQ, 64 */
		/* 82149E20h case    2:*/		if ( regs.CR[0].eq ) { return 0x82149E60;  }
		/* 82149E20h case    2:*/		return 0x82149E24;
		  /* 82149E24h */ case    3:  		/* lis R11, -32253 */
		/* 82149E24h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149E24h case    3:*/		return 0x82149E28;
		  /* 82149E28h */ case    4:  		/* mr R5, R29 */
		/* 82149E28h case    4:*/		regs.R5 = regs.R29;
		/* 82149E28h case    4:*/		return 0x82149E2C;
		  /* 82149E2Ch */ case    5:  		/* addi R4, R11, 26872 */
		/* 82149E2Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x68F8);
		/* 82149E2Ch case    5:*/		return 0x82149E30;
	}
	return 0x82149E30;
} // Block from 82149E18h-82149E30h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82149E30h
// Function '?EndPass@ShaderPDBBuilder@XGRAPHICS@@UAAXK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149E30);
		  /* 82149E30h */ case    0:  		/* mr R3, R31 */
		/* 82149E30h case    0:*/		regs.R3 = regs.R31;
		/* 82149E30h case    0:*/		return 0x82149E34;
		  /* 82149E34h */ case    1:  		/* bl -1420 */
		/* 82149E34h case    1:*/		regs.LR = 0x82149E38; return 0x821498A8;
		/* 82149E34h case    1:*/		return 0x82149E38;
		  /* 82149E38h */ case    2:  		/* mr R5, R30 */
		/* 82149E38h case    2:*/		regs.R5 = regs.R30;
		/* 82149E38h case    2:*/		return 0x82149E3C;
		  /* 82149E3Ch */ case    3:  		/* mr R6, R26 */
		/* 82149E3Ch case    3:*/		regs.R6 = regs.R26;
		/* 82149E3Ch case    3:*/		return 0x82149E40;
		  /* 82149E40h */ case    4:  		/* li R4, 16 */
		/* 82149E40h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149E40h case    4:*/		return 0x82149E44;
		  /* 82149E44h */ case    5:  		/* addi R3, R1, 80 */
		/* 82149E44h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149E44h case    5:*/		return 0x82149E48;
	}
	return 0x82149E48;
} // Block from 82149E30h-82149E48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82149E48h
// Function '?Free@?$FastVector@ULiteralFloat@XGRAPHICS@@@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149E48);
		  /* 82149E48h */ case    0:  		/* bl -686088 */
		/* 82149E48h case    0:*/		regs.LR = 0x82149E4C; return 0x820A2640;
		/* 82149E48h case    0:*/		return 0x82149E4C;
		  /* 82149E4Ch */ case    1:  		/* lis R11, -32253 */
		/* 82149E4Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149E4Ch case    1:*/		return 0x82149E50;
		  /* 82149E50h */ case    2:  		/* addi R5, R1, 80 */
		/* 82149E50h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149E50h case    2:*/		return 0x82149E54;
		  /* 82149E54h */ case    3:  		/* addi R4, R11, 26852 */
		/* 82149E54h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x68E4);
		/* 82149E54h case    3:*/		return 0x82149E58;
		  /* 82149E58h */ case    4:  		/* mr R3, R31 */
		/* 82149E58h case    4:*/		regs.R3 = regs.R31;
		/* 82149E58h case    4:*/		return 0x82149E5C;
		  /* 82149E5Ch */ case    5:  		/* bl -1460 */
		/* 82149E5Ch case    5:*/		regs.LR = 0x82149E60; return 0x821498A8;
		/* 82149E5Ch case    5:*/		return 0x82149E60;
	}
	return 0x82149E60;
} // Block from 82149E48h-82149E60h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82149E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149E60);
		  /* 82149E60h */ case    0:  		/* rlwinm. R11, R27, 0, 20, 20 */
		/* 82149E60h case    0:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R27);
		/* 82149E60h case    0:*/		return 0x82149E64;
		  /* 82149E64h */ case    1:  		/* bc 12, CR0_EQ, 144 */
		/* 82149E64h case    1:*/		if ( regs.CR[0].eq ) { return 0x82149EF4;  }
		/* 82149E64h case    1:*/		return 0x82149E68;
		  /* 82149E68h */ case    2:  		/* lis R11, -32253 */
		/* 82149E68h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149E68h case    2:*/		return 0x82149E6C;
		  /* 82149E6Ch */ case    3:  		/* mr R5, R29 */
		/* 82149E6Ch case    3:*/		regs.R5 = regs.R29;
		/* 82149E6Ch case    3:*/		return 0x82149E70;
		  /* 82149E70h */ case    4:  		/* addi R4, R11, 26828 */
		/* 82149E70h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x68CC);
		/* 82149E70h case    4:*/		return 0x82149E74;
		  /* 82149E74h */ case    5:  		/* mr R3, R31 */
		/* 82149E74h case    5:*/		regs.R3 = regs.R31;
		/* 82149E74h case    5:*/		return 0x82149E78;
		  /* 82149E78h */ case    6:  		/* bl -1488 */
		/* 82149E78h case    6:*/		regs.LR = 0x82149E7C; return 0x821498A8;
		/* 82149E78h case    6:*/		return 0x82149E7C;
		  /* 82149E7Ch */ case    7:  		/* mr R5, R30 */
		/* 82149E7Ch case    7:*/		regs.R5 = regs.R30;
		/* 82149E7Ch case    7:*/		return 0x82149E80;
		  /* 82149E80h */ case    8:  		/* mr R6, R25 */
		/* 82149E80h case    8:*/		regs.R6 = regs.R25;
		/* 82149E80h case    8:*/		return 0x82149E84;
		  /* 82149E84h */ case    9:  		/* li R4, 16 */
		/* 82149E84h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149E84h case    9:*/		return 0x82149E88;
		  /* 82149E88h */ case   10:  		/* addi R3, R1, 80 */
		/* 82149E88h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149E88h case   10:*/		return 0x82149E8C;
		  /* 82149E8Ch */ case   11:  		/* bl -686156 */
		/* 82149E8Ch case   11:*/		regs.LR = 0x82149E90; return 0x820A2640;
		/* 82149E8Ch case   11:*/		return 0x82149E90;
		  /* 82149E90h */ case   12:  		/* lis R11, -32253 */
		/* 82149E90h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149E90h case   12:*/		return 0x82149E94;
		  /* 82149E94h */ case   13:  		/* addi R5, R1, 80 */
		/* 82149E94h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149E94h case   13:*/		return 0x82149E98;
	}
	return 0x82149E98;
} // Block from 82149E60h-82149E98h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82149E98h
// Function '??1ShaderPDBBuilder@XGRAPHICS@@QAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149E98);
		  /* 82149E98h */ case    0:  		/* addi R4, R11, 26808 */
		/* 82149E98h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x68B8);
		/* 82149E98h case    0:*/		return 0x82149E9C;
		  /* 82149E9Ch */ case    1:  		/* mr R3, R31 */
		/* 82149E9Ch case    1:*/		regs.R3 = regs.R31;
		/* 82149E9Ch case    1:*/		return 0x82149EA0;
		  /* 82149EA0h */ case    2:  		/* bl -1528 */
		/* 82149EA0h case    2:*/		regs.LR = 0x82149EA4; return 0x821498A8;
		/* 82149EA0h case    2:*/		return 0x82149EA4;
		  /* 82149EA4h */ case    3:  		/* mr R5, R30 */
		/* 82149EA4h case    3:*/		regs.R5 = regs.R30;
		/* 82149EA4h case    3:*/		return 0x82149EA8;
		  /* 82149EA8h */ case    4:  		/* mr R6, R24 */
		/* 82149EA8h case    4:*/		regs.R6 = regs.R24;
		/* 82149EA8h case    4:*/		return 0x82149EAC;
		  /* 82149EACh */ case    5:  		/* li R4, 16 */
		/* 82149EACh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149EACh case    5:*/		return 0x82149EB0;
		  /* 82149EB0h */ case    6:  		/* addi R3, R1, 80 */
		/* 82149EB0h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149EB0h case    6:*/		return 0x82149EB4;
		  /* 82149EB4h */ case    7:  		/* bl -686196 */
		/* 82149EB4h case    7:*/		regs.LR = 0x82149EB8; return 0x820A2640;
		/* 82149EB4h case    7:*/		return 0x82149EB8;
		  /* 82149EB8h */ case    8:  		/* lis R11, -32253 */
		/* 82149EB8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149EB8h case    8:*/		return 0x82149EBC;
		  /* 82149EBCh */ case    9:  		/* addi R5, R1, 80 */
		/* 82149EBCh case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149EBCh case    9:*/		return 0x82149EC0;
		  /* 82149EC0h */ case   10:  		/* addi R4, R11, 26788 */
		/* 82149EC0h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x68A4);
		/* 82149EC0h case   10:*/		return 0x82149EC4;
		  /* 82149EC4h */ case   11:  		/* mr R3, R31 */
		/* 82149EC4h case   11:*/		regs.R3 = regs.R31;
		/* 82149EC4h case   11:*/		return 0x82149EC8;
		  /* 82149EC8h */ case   12:  		/* bl -1568 */
		/* 82149EC8h case   12:*/		regs.LR = 0x82149ECC; return 0x821498A8;
		/* 82149EC8h case   12:*/		return 0x82149ECC;
		  /* 82149ECCh */ case   13:  		/* mr R5, R30 */
		/* 82149ECCh case   13:*/		regs.R5 = regs.R30;
		/* 82149ECCh case   13:*/		return 0x82149ED0;
		  /* 82149ED0h */ case   14:  		/* mr R6, R23 */
		/* 82149ED0h case   14:*/		regs.R6 = regs.R23;
		/* 82149ED0h case   14:*/		return 0x82149ED4;
		  /* 82149ED4h */ case   15:  		/* li R4, 16 */
		/* 82149ED4h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149ED4h case   15:*/		return 0x82149ED8;
		  /* 82149ED8h */ case   16:  		/* addi R3, R1, 80 */
		/* 82149ED8h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149ED8h case   16:*/		return 0x82149EDC;
		  /* 82149EDCh */ case   17:  		/* bl -686236 */
		/* 82149EDCh case   17:*/		regs.LR = 0x82149EE0; return 0x820A2640;
		/* 82149EDCh case   17:*/		return 0x82149EE0;
		  /* 82149EE0h */ case   18:  		/* lis R11, -32253 */
		/* 82149EE0h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149EE0h case   18:*/		return 0x82149EE4;
		  /* 82149EE4h */ case   19:  		/* addi R5, R1, 80 */
		/* 82149EE4h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149EE4h case   19:*/		return 0x82149EE8;
		  /* 82149EE8h */ case   20:  		/* addi R4, R11, 26768 */
		/* 82149EE8h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6890);
		/* 82149EE8h case   20:*/		return 0x82149EEC;
		  /* 82149EECh */ case   21:  		/* mr R3, R31 */
		/* 82149EECh case   21:*/		regs.R3 = regs.R31;
		/* 82149EECh case   21:*/		return 0x82149EF0;
		  /* 82149EF0h */ case   22:  		/* bl -1608 */
		/* 82149EF0h case   22:*/		regs.LR = 0x82149EF4; return 0x821498A8;
		/* 82149EF0h case   22:*/		return 0x82149EF4;
	}
	return 0x82149EF4;
} // Block from 82149E98h-82149EF4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82149EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149EF4);
		  /* 82149EF4h */ case    0:  		/* rlwinm. R11, R27, 0, 20, 21 */
		/* 82149EF4h case    0:*/		cpu::op::rlwinm<1,0,20,21>(regs,&regs.R11,regs.R27);
		/* 82149EF4h case    0:*/		return 0x82149EF8;
		  /* 82149EF8h */ case    1:  		/* bc 12, CR0_EQ, 44 */
		/* 82149EF8h case    1:*/		if ( regs.CR[0].eq ) { return 0x82149F24;  }
		/* 82149EF8h case    1:*/		return 0x82149EFC;
		  /* 82149EFCh */ case    2:  		/* mr R5, R30 */
		/* 82149EFCh case    2:*/		regs.R5 = regs.R30;
		/* 82149EFCh case    2:*/		return 0x82149F00;
		  /* 82149F00h */ case    3:  		/* mr R6, R22 */
		/* 82149F00h case    3:*/		regs.R6 = regs.R22;
		/* 82149F00h case    3:*/		return 0x82149F04;
		  /* 82149F04h */ case    4:  		/* li R4, 16 */
		/* 82149F04h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82149F04h case    4:*/		return 0x82149F08;
		  /* 82149F08h */ case    5:  		/* addi R3, R1, 80 */
		/* 82149F08h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82149F08h case    5:*/		return 0x82149F0C;
		  /* 82149F0Ch */ case    6:  		/* bl -686284 */
		/* 82149F0Ch case    6:*/		regs.LR = 0x82149F10; return 0x820A2640;
		/* 82149F0Ch case    6:*/		return 0x82149F10;
		  /* 82149F10h */ case    7:  		/* lis R11, -32253 */
		/* 82149F10h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149F10h case    7:*/		return 0x82149F14;
		  /* 82149F14h */ case    8:  		/* addi R5, R1, 80 */
		/* 82149F14h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82149F14h case    8:*/		return 0x82149F18;
		  /* 82149F18h */ case    9:  		/* addi R4, R11, 26748 */
		/* 82149F18h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x687C);
		/* 82149F18h case    9:*/		return 0x82149F1C;
		  /* 82149F1Ch */ case   10:  		/* mr R3, R31 */
		/* 82149F1Ch case   10:*/		regs.R3 = regs.R31;
		/* 82149F1Ch case   10:*/		return 0x82149F20;
		  /* 82149F20h */ case   11:  		/* bl -1656 */
		/* 82149F20h case   11:*/		regs.LR = 0x82149F24; return 0x821498A8;
		/* 82149F20h case   11:*/		return 0x82149F24;
	}
	return 0x82149F24;
} // Block from 82149EF4h-82149F24h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82149F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149F24);
		  /* 82149F24h */ case    0:  		/* rlwinm. R11, R27, 0, 19, 19 */
		/* 82149F24h case    0:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R27);
		/* 82149F24h case    0:*/		return 0x82149F28;
		  /* 82149F28h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 82149F28h case    1:*/		if ( regs.CR[0].eq ) { return 0x82149F40;  }
		/* 82149F28h case    1:*/		return 0x82149F2C;
		  /* 82149F2Ch */ case    2:  		/* lis R11, -32253 */
		/* 82149F2Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82149F2Ch case    2:*/		return 0x82149F30;
		  /* 82149F30h */ case    3:  		/* mr R5, R29 */
		/* 82149F30h case    3:*/		regs.R5 = regs.R29;
		/* 82149F30h case    3:*/		return 0x82149F34;
		  /* 82149F34h */ case    4:  		/* addi R4, R11, 26728 */
		/* 82149F34h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6868);
		/* 82149F34h case    4:*/		return 0x82149F38;
		  /* 82149F38h */ case    5:  		/* mr R3, R31 */
		/* 82149F38h case    5:*/		regs.R3 = regs.R31;
		/* 82149F38h case    5:*/		return 0x82149F3C;
		  /* 82149F3Ch */ case    6:  		/* bl -1684 */
		/* 82149F3Ch case    6:*/		regs.LR = 0x82149F40; return 0x821498A8;
		/* 82149F3Ch case    6:*/		return 0x82149F40;
	}
	return 0x82149F40;
} // Block from 82149F24h-82149F40h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82149F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149F40);
		  /* 82149F40h */ case    0:  		/* addi R1, R1, 192 */
		/* 82149F40h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82149F40h case    0:*/		return 0x82149F44;
		  /* 82149F44h */ case    1:  		/* b -756916 */
		/* 82149F44h case    1:*/		return 0x82091290;
		/* 82149F44h case    1:*/		return 0x82149F48;
	}
	return 0x82149F48;
} // Block from 82149F40h-82149F48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82149F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149F48);
		  /* 82149F48h */ case    0:  		/* mfspr R12, LR */
		/* 82149F48h case    0:*/		regs.R12 = regs.LR;
		/* 82149F48h case    0:*/		return 0x82149F4C;
		  /* 82149F4Ch */ case    1:  		/* bl -756976 */
		/* 82149F4Ch case    1:*/		regs.LR = 0x82149F50; return 0x8209125C;
		/* 82149F4Ch case    1:*/		return 0x82149F50;
		  /* 82149F50h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82149F50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82149F50h case    2:*/		return 0x82149F54;
		  /* 82149F54h */ case    3:  		/* mr R30, R3 */
		/* 82149F54h case    3:*/		regs.R30 = regs.R3;
		/* 82149F54h case    3:*/		return 0x82149F58;
		  /* 82149F58h */ case    4:  		/* mr R29, R4 */
		/* 82149F58h case    4:*/		regs.R29 = regs.R4;
		/* 82149F58h case    4:*/		return 0x82149F5C;
		  /* 82149F5Ch */ case    5:  		/* mr R31, R5 */
		/* 82149F5Ch case    5:*/		regs.R31 = regs.R5;
		/* 82149F5Ch case    5:*/		return 0x82149F60;
		  /* 82149F60h */ case    6:  		/* bl -1072 */
		/* 82149F60h case    6:*/		regs.LR = 0x82149F64; return 0x82149B30;
		/* 82149F60h case    6:*/		return 0x82149F64;
		  /* 82149F64h */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 82149F64h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82149F64h case    7:*/		return 0x82149F68;
		  /* 82149F68h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 82149F68h case    8:*/		if ( regs.CR[6].eq ) { return 0x82149F74;  }
		/* 82149F68h case    8:*/		return 0x82149F6C;
		  /* 82149F6Ch */ case    9:  		/* lhz R10, <#[R31 + 64]> */
		/* 82149F6Ch case    9:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000040) );
		/* 82149F6Ch case    9:*/		return 0x82149F70;
		  /* 82149F70h */ case   10:  		/* b 8 */
		/* 82149F70h case   10:*/		return 0x82149F78;
		/* 82149F70h case   10:*/		return 0x82149F74;
	}
	return 0x82149F74;
} // Block from 82149F48h-82149F74h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82149F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149F74);
		  /* 82149F74h */ case    0:  		/* li R10, 0 */
		/* 82149F74h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82149F74h case    0:*/		return 0x82149F78;
	}
	return 0x82149F78;
} // Block from 82149F74h-82149F78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149F78);
		  /* 82149F78h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82149F78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82149F78h case    0:*/		return 0x82149F7C;
		  /* 82149F7Ch */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149F7Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82149F88;  }
		/* 82149F7Ch case    1:*/		return 0x82149F80;
		  /* 82149F80h */ case    2:  		/* lhz R9, <#[R31 + 62]> */
		/* 82149F80h case    2:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000003E) );
		/* 82149F80h case    2:*/		return 0x82149F84;
		  /* 82149F84h */ case    3:  		/* b 8 */
		/* 82149F84h case    3:*/		return 0x82149F8C;
		/* 82149F84h case    3:*/		return 0x82149F88;
	}
	return 0x82149F88;
} // Block from 82149F78h-82149F88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82149F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149F88);
		  /* 82149F88h */ case    0:  		/* li R9, 0 */
		/* 82149F88h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82149F88h case    0:*/		return 0x82149F8C;
	}
	return 0x82149F8C;
} // Block from 82149F88h-82149F8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149F8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149F8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149F8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149F8C);
		  /* 82149F8Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82149F8Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82149F8Ch case    0:*/		return 0x82149F90;
		  /* 82149F90h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149F90h case    1:*/		if ( regs.CR[6].eq ) { return 0x82149F9C;  }
		/* 82149F90h case    1:*/		return 0x82149F94;
		  /* 82149F94h */ case    2:  		/* lhz R8, <#[R31 + 60]> */
		/* 82149F94h case    2:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000003C) );
		/* 82149F94h case    2:*/		return 0x82149F98;
		  /* 82149F98h */ case    3:  		/* b 8 */
		/* 82149F98h case    3:*/		return 0x82149FA0;
		/* 82149F98h case    3:*/		return 0x82149F9C;
	}
	return 0x82149F9C;
} // Block from 82149F8Ch-82149F9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82149F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149F9C);
		  /* 82149F9Ch */ case    0:  		/* li R8, 0 */
		/* 82149F9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82149F9Ch case    0:*/		return 0x82149FA0;
	}
	return 0x82149FA0;
} // Block from 82149F9Ch-82149FA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149FA0);
		  /* 82149FA0h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82149FA0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82149FA0h case    0:*/		return 0x82149FA4;
		  /* 82149FA4h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149FA4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82149FB0;  }
		/* 82149FA4h case    1:*/		return 0x82149FA8;
		  /* 82149FA8h */ case    2:  		/* lhz R7, <#[R31 + 58]> */
		/* 82149FA8h case    2:*/		cpu::mem::load16z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000003A) );
		/* 82149FA8h case    2:*/		return 0x82149FAC;
		  /* 82149FACh */ case    3:  		/* b 8 */
		/* 82149FACh case    3:*/		return 0x82149FB4;
		/* 82149FACh case    3:*/		return 0x82149FB0;
	}
	return 0x82149FB0;
} // Block from 82149FA0h-82149FB0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82149FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149FB0);
		  /* 82149FB0h */ case    0:  		/* li R7, 0 */
		/* 82149FB0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82149FB0h case    0:*/		return 0x82149FB4;
	}
	return 0x82149FB4;
} // Block from 82149FB0h-82149FB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149FB4);
		  /* 82149FB4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82149FB4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82149FB4h case    0:*/		return 0x82149FB8;
		  /* 82149FB8h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149FB8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82149FC4;  }
		/* 82149FB8h case    1:*/		return 0x82149FBC;
		  /* 82149FBCh */ case    2:  		/* lhz R6, <#[R31 + 56]> */
		/* 82149FBCh case    2:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000038) );
		/* 82149FBCh case    2:*/		return 0x82149FC0;
		  /* 82149FC0h */ case    3:  		/* b 8 */
		/* 82149FC0h case    3:*/		return 0x82149FC8;
		/* 82149FC0h case    3:*/		return 0x82149FC4;
	}
	return 0x82149FC4;
} // Block from 82149FB4h-82149FC4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82149FC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149FC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149FC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149FC4);
		  /* 82149FC4h */ case    0:  		/* li R6, 0 */
		/* 82149FC4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82149FC4h case    0:*/		return 0x82149FC8;
	}
	return 0x82149FC8;
} // Block from 82149FC4h-82149FC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149FC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149FC8);
		  /* 82149FC8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82149FC8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82149FC8h case    0:*/		return 0x82149FCC;
		  /* 82149FCCh */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82149FCCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82149FD8;  }
		/* 82149FCCh case    1:*/		return 0x82149FD0;
		  /* 82149FD0h */ case    2:  		/* lwz R5, <#[R31]> */
		/* 82149FD0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 82149FD0h case    2:*/		return 0x82149FD4;
		  /* 82149FD4h */ case    3:  		/* b 8 */
		/* 82149FD4h case    3:*/		return 0x82149FDC;
		/* 82149FD4h case    3:*/		return 0x82149FD8;
	}
	return 0x82149FD8;
} // Block from 82149FC8h-82149FD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82149FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149FD8);
		  /* 82149FD8h */ case    0:  		/* li R5, 0 */
		/* 82149FD8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82149FD8h case    0:*/		return 0x82149FDC;
	}
	return 0x82149FDC;
} // Block from 82149FD8h-82149FDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82149FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149FDC);
		  /* 82149FDCh */ case    0:  		/* mr R4, R29 */
		/* 82149FDCh case    0:*/		regs.R4 = regs.R29;
		/* 82149FDCh case    0:*/		return 0x82149FE0;
		  /* 82149FE0h */ case    1:  		/* mr R3, R30 */
		/* 82149FE0h case    1:*/		regs.R3 = regs.R30;
		/* 82149FE0h case    1:*/		return 0x82149FE4;
		  /* 82149FE4h */ case    2:  		/* bl -996 */
		/* 82149FE4h case    2:*/		regs.LR = 0x82149FE8; return 0x82149C00;
		/* 82149FE4h case    2:*/		return 0x82149FE8;
		  /* 82149FE8h */ case    3:  		/* addi R1, R1, 112 */
		/* 82149FE8h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82149FE8h case    3:*/		return 0x82149FEC;
		  /* 82149FECh */ case    4:  		/* b -757056 */
		/* 82149FECh case    4:*/		return 0x820912AC;
		/* 82149FECh case    4:*/		return 0x82149FF0;
	}
	return 0x82149FF0;
} // Block from 82149FDCh-82149FF0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82149FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82149FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82149FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82149FF0);
		  /* 82149FF0h */ case    0:  		/* mfspr R12, LR */
		/* 82149FF0h case    0:*/		regs.R12 = regs.LR;
		/* 82149FF0h case    0:*/		return 0x82149FF4;
		  /* 82149FF4h */ case    1:  		/* bl -757144 */
		/* 82149FF4h case    1:*/		regs.LR = 0x82149FF8; return 0x8209125C;
		/* 82149FF4h case    1:*/		return 0x82149FF8;
		  /* 82149FF8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82149FF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82149FF8h case    2:*/		return 0x82149FFC;
		  /* 82149FFCh */ case    3:  		/* mr R11, R3 */
		/* 82149FFCh case    3:*/		regs.R11 = regs.R3;
		/* 82149FFCh case    3:*/		return 0x8214A000;
		  /* 8214A000h */ case    4:  		/* addi R29, R3, 144 */
		/* 8214A000h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x90);
		/* 8214A000h case    4:*/		return 0x8214A004;
		  /* 8214A004h */ case    5:  		/* lwz R3, <#[R3 + 144]> */
		/* 8214A004h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A004h case    5:*/		return 0x8214A008;
		  /* 8214A008h */ case    6:  		/* mr R31, R4 */
		/* 8214A008h case    6:*/		regs.R31 = regs.R4;
		/* 8214A008h case    6:*/		return 0x8214A00C;
		  /* 8214A00Ch */ case    7:  		/* cmpwi CR6, R3, 0 */
		/* 8214A00Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A00Ch case    7:*/		return 0x8214A010;
		  /* 8214A010h */ case    8:  		/* bc 12, CR6_LT, 52 */
		/* 8214A010h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214A044;  }
		/* 8214A010h case    8:*/		return 0x8214A014;
		  /* 8214A014h */ case    9:  		/* lwz R30, <#[R11 + 72]> */
		/* 8214A014h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000048) );
		/* 8214A014h case    9:*/		return 0x8214A018;
		  /* 8214A018h */ case   10:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214A018h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A018h case   10:*/		return 0x8214A01C;
		  /* 8214A01Ch */ case   11:  		/* cmplw CR6, R11, R4 */
		/* 8214A01Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A01Ch case   11:*/		return 0x8214A020;
		  /* 8214A020h */ case   12:  		/* bc 12, CR6_GT, 36 */
		/* 8214A020h case   12:*/		if ( regs.CR[6].gt ) { return 0x8214A044;  }
		/* 8214A020h case   12:*/		return 0x8214A024;
		  /* 8214A024h */ case   13:  		/* lwz R11, <#[R30 + 8]> */
		/* 8214A024h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8214A024h case   13:*/		return 0x8214A028;
		  /* 8214A028h */ case   14:  		/* cmplw CR6, R4, R11 */
		/* 8214A028h case   14:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8214A028h case   14:*/		return 0x8214A02C;
		  /* 8214A02Ch */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 8214A02Ch case   15:*/		if ( !regs.CR[6].gt ) { return 0x8214A03C;  }
		/* 8214A02Ch case   15:*/		return 0x8214A030;
		  /* 8214A030h */ case   16:  		/* mr R5, R29 */
		/* 8214A030h case   16:*/		regs.R5 = regs.R29;
		/* 8214A030h case   16:*/		return 0x8214A034;
		  /* 8214A034h */ case   17:  		/* mr R3, R30 */
		/* 8214A034h case   17:*/		regs.R3 = regs.R30;
		/* 8214A034h case   17:*/		return 0x8214A038;
		  /* 8214A038h */ case   18:  		/* bl -14944 */
		/* 8214A038h case   18:*/		regs.LR = 0x8214A03C; return 0x821465D8;
		/* 8214A038h case   18:*/		return 0x8214A03C;
	}
	return 0x8214A03C;
} // Block from 82149FF0h-8214A03Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214A03Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A03C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A03C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A03C);
		  /* 8214A03Ch */ case    0:  		/* stw R31, <#[R30 + 4]> */
		/* 8214A03Ch case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A03Ch case    0:*/		return 0x8214A040;
		  /* 8214A040h */ case    1:  		/* lwz R3, <#[R29]> */
		/* 8214A040h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8214A040h case    1:*/		return 0x8214A044;
	}
	return 0x8214A044;
} // Block from 8214A03Ch-8214A044h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A044);
		  /* 8214A044h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214A044h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214A044h case    0:*/		return 0x8214A048;
		  /* 8214A048h */ case    1:  		/* b -757148 */
		/* 8214A048h case    1:*/		return 0x820912AC;
		/* 8214A048h case    1:*/		return 0x8214A04C;
		  /* 8214A04Ch */ case    2:  		/* nop */
		/* 8214A04Ch case    2:*/		cpu::op::nop();
		/* 8214A04Ch case    2:*/		return 0x8214A050;
	}
	return 0x8214A050;
} // Block from 8214A044h-8214A050h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214A050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A050);
		  /* 8214A050h */ case    0:  		/* mfspr R12, LR */
		/* 8214A050h case    0:*/		regs.R12 = regs.LR;
		/* 8214A050h case    0:*/		return 0x8214A054;
		  /* 8214A054h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214A054h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214A054h case    1:*/		return 0x8214A058;
		  /* 8214A058h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8214A058h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214A058h case    2:*/		return 0x8214A05C;
		  /* 8214A05Ch */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214A05Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214A05Ch case    3:*/		return 0x8214A060;
		  /* 8214A060h */ case    4:  		/* lwz R10, <#[R3 + 144]> */
		/* 8214A060h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A060h case    4:*/		return 0x8214A064;
		  /* 8214A064h */ case    5:  		/* addi R11, R3, 144 */
		/* 8214A064h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x90);
		/* 8214A064h case    5:*/		return 0x8214A068;
		  /* 8214A068h */ case    6:  		/* cmpwi CR6, R10, 0 */
		/* 8214A068h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8214A068h case    6:*/		return 0x8214A06C;
		  /* 8214A06Ch */ case    7:  		/* bc 12, CR6_LT, 84 */
		/* 8214A06Ch case    7:*/		if ( regs.CR[6].lt ) { return 0x8214A0C0;  }
		/* 8214A06Ch case    7:*/		return 0x8214A070;
		  /* 8214A070h */ case    8:  		/* addi R10, R1, 80 */
		/* 8214A070h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 8214A070h case    8:*/		return 0x8214A074;
		  /* 8214A074h */ case    9:  		/* lwz R3, <#[R3 + 76]> */
		/* 8214A074h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000004C) );
		/* 8214A074h case    9:*/		return 0x8214A078;
		  /* 8214A078h */ case   10:  		/* li R9, 0 */
		/* 8214A078h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8214A078h case   10:*/		return 0x8214A07C;
		  /* 8214A07Ch */ case   11:  		/* rlwimi R6, R5, 12, 14, 19 */
		/* 8214A07Ch case   11:*/		cpu::op::rlwimi<0,12,14,19>(regs,&regs.R6,regs.R5);
		/* 8214A07Ch case   11:*/		return 0x8214A080;
		  /* 8214A080h */ case   12:  		/* mr R5, R11 */
		/* 8214A080h case   12:*/		regs.R5 = regs.R11;
		/* 8214A080h case   12:*/		return 0x8214A084;
		  /* 8214A084h */ case   13:  		/* rlwinm R31, R4, 20, 0, 11 */
		/* 8214A084h case   13:*/		cpu::op::rlwinm<0,20,0,11>(regs,&regs.R31,regs.R4);
		/* 8214A084h case   13:*/		return 0x8214A088;
		  /* 8214A088h */ case   14:  		/* std R9, <#[R10]> */
		/* 8214A088h case   14:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8214A088h case   14:*/		return 0x8214A08C;
		  /* 8214A08Ch */ case   15:  		/* rlwinm R7, R7, 23, 0, 8 */
		/* 8214A08Ch case   15:*/		cpu::op::rlwinm<0,23,0,8>(regs,&regs.R7,regs.R7);
		/* 8214A08Ch case   15:*/		return 0x8214A090;
		  /* 8214A090h */ case   16:  		/* addi R4, R1, 80 */
		/* 8214A090h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214A090h case   16:*/		return 0x8214A094;
		  /* 8214A094h */ case   17:  		/* lwz R10, <#[R1 + 84]> */
		/* 8214A094h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8214A094h case   17:*/		return 0x8214A098;
		  /* 8214A098h */ case   18:  		/* lwz R11, <#[R1 + 80]> */
		/* 8214A098h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8214A098h case   18:*/		return 0x8214A09C;
		  /* 8214A09Ch */ case   19:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 8214A09Ch case   19:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 8214A09Ch case   19:*/		return 0x8214A0A0;
		  /* 8214A0A0h */ case   20:  		/* rlwinm R10, R10, 0, 10, 31 */
		/* 8214A0A0h case   20:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R10,regs.R10);
		/* 8214A0A0h case   20:*/		return 0x8214A0A4;
		  /* 8214A0A4h */ case   21:  		/* or R11, R11, R31 */
		/* 8214A0A4h case   21:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8214A0A4h case   21:*/		return 0x8214A0A8;
		  /* 8214A0A8h */ case   22:  		/* or R10, R10, R7 */
		/* 8214A0A8h case   22:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 8214A0A8h case   22:*/		return 0x8214A0AC;
		  /* 8214A0ACh */ case   23:  		/* rlwimi R11, R6, 2, 12, 29 */
		/* 8214A0ACh case   23:*/		cpu::op::rlwimi<0,2,12,29>(regs,&regs.R11,regs.R6);
		/* 8214A0ACh case   23:*/		return 0x8214A0B0;
		  /* 8214A0B0h */ case   24:  		/* rlwimi R10, R8, 22, 9, 9 */
		/* 8214A0B0h case   24:*/		cpu::op::rlwimi<0,22,9,9>(regs,&regs.R10,regs.R8);
		/* 8214A0B0h case   24:*/		return 0x8214A0B4;
		  /* 8214A0B4h */ case   25:  		/* stw R11, <#[R1 + 80]> */
		/* 8214A0B4h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8214A0B4h case   25:*/		return 0x8214A0B8;
		  /* 8214A0B8h */ case   26:  		/* stw R10, <#[R1 + 84]> */
		/* 8214A0B8h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8214A0B8h case   26:*/		return 0x8214A0BC;
		  /* 8214A0BCh */ case   27:  		/* bl -3956 */
		/* 8214A0BCh case   27:*/		regs.LR = 0x8214A0C0; return 0x82149148;
		/* 8214A0BCh case   27:*/		return 0x8214A0C0;
	}
	return 0x8214A0C0;
} // Block from 8214A050h-8214A0C0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8214A0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A0C0);
		  /* 8214A0C0h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214A0C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214A0C0h case    0:*/		return 0x8214A0C4;
		  /* 8214A0C4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214A0C4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214A0C4h case    1:*/		return 0x8214A0C8;
		  /* 8214A0C8h */ case    2:  		/* mtspr LR, R12 */
		/* 8214A0C8h case    2:*/		regs.LR = regs.R12;
		/* 8214A0C8h case    2:*/		return 0x8214A0CC;
		  /* 8214A0CCh */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8214A0CCh case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214A0CCh case    3:*/		return 0x8214A0D0;
		  /* 8214A0D0h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8214A0D0h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214A0D0h case    4:*/		return 0x8214A0D4;
	}
	return 0x8214A0D4;
} // Block from 8214A0C0h-8214A0D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214A0D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A0D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A0D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A0D4);
		  /* 8214A0D4h */ case    0:  		/* nop */
		/* 8214A0D4h case    0:*/		cpu::op::nop();
		/* 8214A0D4h case    0:*/		return 0x8214A0D8;
	}
	return 0x8214A0D8;
} // Block from 8214A0D4h-8214A0D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214A0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A0D8);
		  /* 8214A0D8h */ case    0:  		/* mfspr R12, LR */
		/* 8214A0D8h case    0:*/		regs.R12 = regs.LR;
		/* 8214A0D8h case    0:*/		return 0x8214A0DC;
		  /* 8214A0DCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214A0DCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214A0DCh case    1:*/		return 0x8214A0E0;
		  /* 8214A0E0h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8214A0E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8214A0E0h case    2:*/		return 0x8214A0E4;
		  /* 8214A0E4h */ case    3:  		/* lwz R9, <#[R3 + 144]> */
		/* 8214A0E4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A0E4h case    3:*/		return 0x8214A0E8;
	}
	return 0x8214A0E8;
} // Block from 8214A0D8h-8214A0E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A0E8h
// Function '?RemapVariableRegisters@ShaderPDBBuilder@XGRAPHICS@@UAAXPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A0E8);
		  /* 8214A0E8h */ case    0:  		/* mr R10, R5 */
		/* 8214A0E8h case    0:*/		regs.R10 = regs.R5;
		/* 8214A0E8h case    0:*/		return 0x8214A0EC;
		  /* 8214A0ECh */ case    1:  		/* mr R11, R4 */
		/* 8214A0ECh case    1:*/		regs.R11 = regs.R4;
		/* 8214A0ECh case    1:*/		return 0x8214A0F0;
		  /* 8214A0F0h */ case    2:  		/* addi R5, R3, 144 */
		/* 8214A0F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R3,0x90);
		/* 8214A0F0h case    2:*/		return 0x8214A0F4;
		  /* 8214A0F4h */ case    3:  		/* cmpwi CR6, R9, 0 */
		/* 8214A0F4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8214A0F4h case    3:*/		return 0x8214A0F8;
		  /* 8214A0F8h */ case    4:  		/* bc 12, CR6_LT, 56 */
		/* 8214A0F8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8214A130;  }
		/* 8214A0F8h case    4:*/		return 0x8214A0FC;
		  /* 8214A0FCh */ case    5:  		/* addi R9, R1, 80 */
		/* 8214A0FCh case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8214A0FCh case    5:*/		return 0x8214A100;
		  /* 8214A100h */ case    6:  		/* lwz R3, <#[R3 + 80]> */
		/* 8214A100h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000050) );
		/* 8214A100h case    6:*/		return 0x8214A104;
		  /* 8214A104h */ case    7:  		/* li R8, 0 */
		/* 8214A104h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8214A104h case    7:*/		return 0x8214A108;
		  /* 8214A108h */ case    8:  		/* rlwimi R11, R10, 4, 0, 27 */
		/* 8214A108h case    8:*/		cpu::op::rlwimi<0,4,0,27>(regs,&regs.R11,regs.R10);
		/* 8214A108h case    8:*/		return 0x8214A10C;
		  /* 8214A10Ch */ case    9:  		/* addi R4, R1, 80 */
		/* 8214A10Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214A10Ch case    9:*/		return 0x8214A110;
		  /* 8214A110h */ case   10:  		/* rlwinm R11, R11, 20, 0, 11 */
		/* 8214A110h case   10:*/		cpu::op::rlwinm<0,20,0,11>(regs,&regs.R11,regs.R11);
		/* 8214A110h case   10:*/		return 0x8214A114;
		  /* 8214A114h */ case   11:  		/* stw R8, <#[R9]> */
		/* 8214A114h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 8214A114h case   11:*/		return 0x8214A118;
		  /* 8214A118h */ case   12:  		/* lwz R10, <#[R1 + 80]> */
		/* 8214A118h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8214A118h case   12:*/		return 0x8214A11C;
		  /* 8214A11Ch */ case   13:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8214A11Ch case   13:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8214A11Ch case   13:*/		return 0x8214A120;
		  /* 8214A120h */ case   14:  		/* or R11, R11, R10 */
		/* 8214A120h case   14:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214A120h case   14:*/		return 0x8214A124;
		  /* 8214A124h */ case   15:  		/* rlwimi R11, R6, 16, 12, 15 */
		/* 8214A124h case   15:*/		cpu::op::rlwimi<0,16,12,15>(regs,&regs.R11,regs.R6);
		/* 8214A124h case   15:*/		return 0x8214A128;
		  /* 8214A128h */ case   16:  		/* stw R11, <#[R1 + 80]> */
		/* 8214A128h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8214A128h case   16:*/		return 0x8214A12C;
		  /* 8214A12Ch */ case   17:  		/* bl -2524 */
		/* 8214A12Ch case   17:*/		regs.LR = 0x8214A130; return 0x82149750;
		/* 8214A12Ch case   17:*/		return 0x8214A130;
	}
	return 0x8214A130;
} // Block from 8214A0E8h-8214A130h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8214A130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A130);
		  /* 8214A130h */ case    0:  		/* addi R1, R1, 96 */
		/* 8214A130h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214A130h case    0:*/		return 0x8214A134;
		  /* 8214A134h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214A134h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214A134h case    1:*/		return 0x8214A138;
		  /* 8214A138h */ case    2:  		/* mtspr LR, R12 */
		/* 8214A138h case    2:*/		regs.LR = regs.R12;
		/* 8214A138h case    2:*/		return 0x8214A13C;
		  /* 8214A13Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 8214A13Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214A13Ch case    3:*/		return 0x8214A140;
	}
	return 0x8214A140;
} // Block from 8214A130h-8214A140h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A140);
		  /* 8214A140h */ case    0:  		/* mfspr R12, LR */
		/* 8214A140h case    0:*/		regs.R12 = regs.LR;
		/* 8214A140h case    0:*/		return 0x8214A144;
		  /* 8214A144h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214A144h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214A144h case    1:*/		return 0x8214A148;
		  /* 8214A148h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8214A148h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8214A148h case    2:*/		return 0x8214A14C;
		  /* 8214A14Ch */ case    3:  		/* mr R8, R4 */
		/* 8214A14Ch case    3:*/		regs.R8 = regs.R4;
		/* 8214A14Ch case    3:*/		return 0x8214A150;
	}
	return 0x8214A150;
} // Block from 8214A140h-8214A150h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A150h
// Function '?Release@ShaderPDBBuilder@XGRAPHICS@@UAAKXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A150);
		  /* 8214A150h */ case    0:  		/* mr R4, R5 */
		/* 8214A150h case    0:*/		regs.R4 = regs.R5;
		/* 8214A150h case    0:*/		return 0x8214A154;
		  /* 8214A154h */ case    1:  		/* mr R11, R3 */
		/* 8214A154h case    1:*/		regs.R11 = regs.R3;
		/* 8214A154h case    1:*/		return 0x8214A158;
		  /* 8214A158h */ case    2:  		/* addi R5, R3, 144 */
		/* 8214A158h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R3,0x90);
		/* 8214A158h case    2:*/		return 0x8214A15C;
		  /* 8214A15Ch */ case    3:  		/* lwz R3, <#[R3 + 144]> */
		/* 8214A15Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A15Ch case    3:*/		return 0x8214A160;
		  /* 8214A160h */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 8214A160h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A160h case    4:*/		return 0x8214A164;
		  /* 8214A164h */ case    5:  		/* bc 12, CR6_LT, 256 */
		/* 8214A164h case    5:*/		if ( regs.CR[6].lt ) { return 0x8214A264;  }
		/* 8214A164h case    5:*/		return 0x8214A168;
		  /* 8214A168h */ case    6:  		/* lwz R9, <#[R11 + 20]> */
		/* 8214A168h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 8214A168h case    6:*/		return 0x8214A16C;
		  /* 8214A16Ch */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 8214A16Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8214A16Ch case    7:*/		return 0x8214A170;
		  /* 8214A170h */ case    8:  		/* lhz R11, <#[R11 + 158]> */
		/* 8214A170h case    8:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000009E) );
		/* 8214A170h case    8:*/		return 0x8214A174;
		  /* 8214A174h */ case    9:  		/* mulli R9, R9, 476 */
		/* 8214A174h case    9:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R9,0x1DC);
		/* 8214A174h case    9:*/		return 0x8214A178;
		  /* 8214A178h */ case   10:  		/* add R10, R9, R10 */
		/* 8214A178h case   10:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8214A178h case   10:*/		return 0x8214A17C;
		  /* 8214A17Ch */ case   11:  		/* cmplwi CR0, R11, 0 */
		/* 8214A17Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8214A17Ch case   11:*/		return 0x8214A180;
		  /* 8214A180h */ case   12:  		/* bc 12, CR0_EQ, 48 */
		/* 8214A180h case   12:*/		if ( regs.CR[0].eq ) { return 0x8214A1B0;  }
		/* 8214A180h case   12:*/		return 0x8214A184;
		  /* 8214A184h */ case   13:  		/* cmplw CR6, R11, R8 */
		/* 8214A184h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8214A184h case   13:*/		return 0x8214A188;
		  /* 8214A188h */ case   14:  		/* bc 12, CR6_LT, 20 */
		/* 8214A188h case   14:*/		if ( regs.CR[6].lt ) { return 0x8214A19C;  }
		/* 8214A188h case   14:*/		return 0x8214A18C;
		  /* 8214A18Ch */ case   15:  		/* subf R11, R11, R8 */
		/* 8214A18Ch case   15:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8214A18Ch case   15:*/		return 0x8214A190;
		  /* 8214A190h */ case   16:  		/* mulli R11, R11, 476 */
		/* 8214A190h case   16:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1DC);
		/* 8214A190h case   16:*/		return 0x8214A194;
		  /* 8214A194h */ case   17:  		/* add R11, R11, R10 */
		/* 8214A194h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214A194h case   17:*/		return 0x8214A198;
		  /* 8214A198h */ case   18:  		/* b 28 */
		/* 8214A198h case   18:*/		return 0x8214A1B4;
		/* 8214A198h case   18:*/		return 0x8214A19C;
	}
	return 0x8214A19C;
} // Block from 8214A150h-8214A19Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214A19Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A19C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A19C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A19C);
		  /* 8214A19Ch */ case    0:  		/* lis R11, -32768 */
		/* 8214A19Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 8214A19Ch case    0:*/		return 0x8214A1A0;
	}
	return 0x8214A1A0;
} // Block from 8214A19Ch-8214A1A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214A1A0h
// Function '?CreatePDBHint@ShaderPDBBuilder@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A1A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A1A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A1A0);
		  /* 8214A1A0h */ case    0:  		/* ori R3, R11, 16389 */
		/* 8214A1A0h case    0:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0x4005);
		/* 8214A1A0h case    0:*/		return 0x8214A1A4;
		  /* 8214A1A4h */ case    1:  		/* mr R11, R3 */
		/* 8214A1A4h case    1:*/		regs.R11 = regs.R3;
		/* 8214A1A4h case    1:*/		return 0x8214A1A8;
		  /* 8214A1A8h */ case    2:  		/* stw R3, <#[R5]> */
		/* 8214A1A8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R5 + 0x00000000) );
		/* 8214A1A8h case    2:*/		return 0x8214A1AC;
		  /* 8214A1ACh */ case    3:  		/* b 184 */
		/* 8214A1ACh case    3:*/		return 0x8214A264;
		/* 8214A1ACh case    3:*/		return 0x8214A1B0;
	}
	return 0x8214A1B0;
} // Block from 8214A1A0h-8214A1B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A1B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A1B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A1B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A1B0);
		  /* 8214A1B0h */ case    0:  		/* addi R11, R10, -476 */
		/* 8214A1B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFE24);
		/* 8214A1B0h case    0:*/		return 0x8214A1B4;
	}
	return 0x8214A1B4;
} // Block from 8214A1B0h-8214A1B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214A1B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A1B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A1B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A1B4);
		  /* 8214A1B4h */ case    0:  		/* cmplwi CR6, R4, 1 */
		/* 8214A1B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000001);
		/* 8214A1B4h case    0:*/		return 0x8214A1B8;
		  /* 8214A1B8h */ case    1:  		/* bc 12, CR6_LT, 136 */
		/* 8214A1B8h case    1:*/		if ( regs.CR[6].lt ) { return 0x8214A240;  }
		/* 8214A1B8h case    1:*/		return 0x8214A1BC;
		  /* 8214A1BCh */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 8214A1BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8214A20C;  }
		/* 8214A1BCh case    2:*/		return 0x8214A1C0;
		  /* 8214A1C0h */ case    3:  		/* cmplwi CR6, R4, 3 */
		/* 8214A1C0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000003);
		/* 8214A1C0h case    3:*/		return 0x8214A1C4;
		  /* 8214A1C4h */ case    4:  		/* bc 12, CR6_LT, 28 */
		/* 8214A1C4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8214A1E0;  }
		/* 8214A1C4h case    4:*/		return 0x8214A1C8;
		  /* 8214A1C8h */ case    5:  		/* lis R11, -32253 */
		/* 8214A1C8h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214A1C8h case    5:*/		return 0x8214A1CC;
		  /* 8214A1CCh */ case    6:  		/* addi R3, R11, 27044 */
		/* 8214A1CCh case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x69A4);
		/* 8214A1CCh case    6:*/		return 0x8214A1D0;
		  /* 8214A1D0h */ case    7:  		/* bl -717944 */
		/* 8214A1D0h case    7:*/		regs.LR = 0x8214A1D4; return 0x8209AD58;
		/* 8214A1D0h case    7:*/		return 0x8214A1D4;
		  /* 8214A1D4h */ case    8:  		/* lis R3, -32768 */
		/* 8214A1D4h case    8:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8214A1D4h case    8:*/		return 0x8214A1D8;
		  /* 8214A1D8h */ case    9:  		/* ori R3, R3, 16389 */
		/* 8214A1D8h case    9:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8214A1D8h case    9:*/		return 0x8214A1DC;
		  /* 8214A1DCh */ case   10:  		/* b 136 */
		/* 8214A1DCh case   10:*/		return 0x8214A264;
		/* 8214A1DCh case   10:*/		return 0x8214A1E0;
	}
	return 0x8214A1E0;
} // Block from 8214A1B4h-8214A1E0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214A1E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A1E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A1E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A1E0);
		  /* 8214A1E0h */ case    0:  		/* lwz R10, <#[R7]> */
		/* 8214A1E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 8214A1E0h case    0:*/		return 0x8214A1E4;
		  /* 8214A1E4h */ case    1:  		/* addi R4, R1, 80 */
		/* 8214A1E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214A1E4h case    1:*/		return 0x8214A1E8;
		  /* 8214A1E8h */ case    2:  		/* lwz R8, <#[R7 + 4]> */
		/* 8214A1E8h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000004) );
		/* 8214A1E8h case    2:*/		return 0x8214A1EC;
		  /* 8214A1ECh */ case    3:  		/* addi R3, R11, 408 */
		/* 8214A1ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x198);
		/* 8214A1ECh case    3:*/		return 0x8214A1F0;
		  /* 8214A1F0h */ case    4:  		/* lwz R7, <#[R7 + 8]> */
		/* 8214A1F0h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 8214A1F0h case    4:*/		return 0x8214A1F4;
		  /* 8214A1F4h */ case    5:  		/* stb R6, <#[R1 + 80]> */
		/* 8214A1F4h case    5:*/		cpu::mem::store8( regs, regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 8214A1F4h case    5:*/		return 0x8214A1F8;
		  /* 8214A1F8h */ case    6:  		/* stb R10, <#[R1 + 81]> */
		/* 8214A1F8h case    6:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R1 + 0x00000051) );
		/* 8214A1F8h case    6:*/		return 0x8214A1FC;
		  /* 8214A1FCh */ case    7:  		/* stb R8, <#[R1 + 82]> */
		/* 8214A1FCh case    7:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R1 + 0x00000052) );
		/* 8214A1FCh case    7:*/		return 0x8214A200;
		  /* 8214A200h */ case    8:  		/* stb R7, <#[R1 + 83]> */
		/* 8214A200h case    8:*/		cpu::mem::store8( regs, regs.R7, (uint32)(regs.R1 + 0x00000053) );
		/* 8214A200h case    8:*/		return 0x8214A204;
		  /* 8214A204h */ case    9:  		/* bl -4676 */
		/* 8214A204h case    9:*/		regs.LR = 0x8214A208; return 0x82148FC0;
		/* 8214A204h case    9:*/		return 0x8214A208;
		  /* 8214A208h */ case   10:  		/* b 88 */
		/* 8214A208h case   10:*/		return 0x8214A260;
		/* 8214A208h case   10:*/		return 0x8214A20C;
	}
	return 0x8214A20C;
} // Block from 8214A1E0h-8214A20Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214A20Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A20C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A20C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A20C);
		  /* 8214A20Ch */ case    0:  		/* lfs FR0, <#[R7]> */
		/* 8214A20Ch case    0:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R7 + 0x00000000) );
		/* 8214A20Ch case    0:*/		return 0x8214A210;
	}
	return 0x8214A210;
} // Block from 8214A20Ch-8214A210h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214A210h
// Function '?GetPDBHint@ShaderPDBBuilder@XGRAPHICS@@QAAXPAUXShaderPDBHint@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A210);
		  /* 8214A210h */ case    0:  		/* stb R6, <#[R1 + 96]> */
		/* 8214A210h case    0:*/		cpu::mem::store8( regs, regs.R6, (uint32)(regs.R1 + 0x00000060) );
		/* 8214A210h case    0:*/		return 0x8214A214;
		  /* 8214A214h */ case    1:  		/* lfs FR13, <#[R7 + 4]> */
		/* 8214A214h case    1:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R7 + 0x00000004) );
		/* 8214A214h case    1:*/		return 0x8214A218;
		  /* 8214A218h */ case    2:  		/* addi R4, R1, 96 */
		/* 8214A218h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8214A218h case    2:*/		return 0x8214A21C;
		  /* 8214A21Ch */ case    3:  		/* lfs FR12, <#[R7 + 8]> */
		/* 8214A21Ch case    3:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R7 + 0x00000008) );
		/* 8214A21Ch case    3:*/		return 0x8214A220;
		  /* 8214A220h */ case    4:  		/* addi R3, R11, 420 */
		/* 8214A220h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x1A4);
		/* 8214A220h case    4:*/		return 0x8214A224;
		  /* 8214A224h */ case    5:  		/* lfs FR11, <#[R7 + 12]> */
		/* 8214A224h case    5:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R7 + 0x0000000C) );
		/* 8214A224h case    5:*/		return 0x8214A228;
		  /* 8214A228h */ case    6:  		/* stfs FR0, <#[R1 + 100]> */
		/* 8214A228h case    6:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000064) );
		/* 8214A228h case    6:*/		return 0x8214A22C;
		  /* 8214A22Ch */ case    7:  		/* stfs FR13, <#[R1 + 104]> */
		/* 8214A22Ch case    7:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000068) );
		/* 8214A22Ch case    7:*/		return 0x8214A230;
		  /* 8214A230h */ case    8:  		/* stfs FR12, <#[R1 + 108]> */
		/* 8214A230h case    8:*/		cpu::mem::store32f( regs, regs.FR12, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214A230h case    8:*/		return 0x8214A234;
		  /* 8214A234h */ case    9:  		/* stfs FR11, <#[R1 + 112]> */
		/* 8214A234h case    9:*/		cpu::mem::store32f( regs, regs.FR11, (uint32)(regs.R1 + 0x00000070) );
		/* 8214A234h case    9:*/		return 0x8214A238;
		  /* 8214A238h */ case   10:  		/* bl -4592 */
		/* 8214A238h case   10:*/		regs.LR = 0x8214A23C; return 0x82149048;
		/* 8214A238h case   10:*/		return 0x8214A23C;
		  /* 8214A23Ch */ case   11:  		/* b 36 */
		/* 8214A23Ch case   11:*/		return 0x8214A260;
		/* 8214A23Ch case   11:*/		return 0x8214A240;
	}
	return 0x8214A240;
} // Block from 8214A210h-8214A240h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214A240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A240);
		  /* 8214A240h */ case    0:  		/* lwz R10, <#[R7]> */
		/* 8214A240h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 8214A240h case    0:*/		return 0x8214A244;
		  /* 8214A244h */ case    1:  		/* addi R4, R1, 80 */
		/* 8214A244h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214A244h case    1:*/		return 0x8214A248;
		  /* 8214A248h */ case    2:  		/* stb R6, <#[R1 + 80]> */
		/* 8214A248h case    2:*/		cpu::mem::store8( regs, regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 8214A248h case    2:*/		return 0x8214A24C;
		  /* 8214A24Ch */ case    3:  		/* addi R3, R11, 396 */
		/* 8214A24Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x18C);
		/* 8214A24Ch case    3:*/		return 0x8214A250;
		  /* 8214A250h */ case    4:  		/* addic R8, R10, -1 */
		/* 8214A250h case    4:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R10,0xFFFFFFFF);
		/* 8214A250h case    4:*/		return 0x8214A254;
		  /* 8214A254h */ case    5:  		/* subfe R10, R8, R10 */
		/* 8214A254h case    5:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 8214A254h case    5:*/		return 0x8214A258;
		  /* 8214A258h */ case    6:  		/* stb R10, <#[R1 + 81]> */
		/* 8214A258h case    6:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R1 + 0x00000051) );
		/* 8214A258h case    6:*/		return 0x8214A25C;
		  /* 8214A25Ch */ case    7:  		/* bl -4884 */
		/* 8214A25Ch case    7:*/		regs.LR = 0x8214A260; return 0x82148F48;
		/* 8214A25Ch case    7:*/		return 0x8214A260;
	}
	return 0x8214A260;
} // Block from 8214A240h-8214A260h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214A260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A260);
		  /* 8214A260h */ case    0:  		/* li R3, 0 */
		/* 8214A260h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214A260h case    0:*/		return 0x8214A264;
	}
	return 0x8214A264;
} // Block from 8214A260h-8214A264h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214A264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A264);
		  /* 8214A264h */ case    0:  		/* addi R1, R1, 128 */
		/* 8214A264h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214A264h case    0:*/		return 0x8214A268;
		  /* 8214A268h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214A268h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214A268h case    1:*/		return 0x8214A26C;
		  /* 8214A26Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8214A26Ch case    2:*/		regs.LR = regs.R12;
		/* 8214A26Ch case    2:*/		return 0x8214A270;
		  /* 8214A270h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8214A270h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214A270h case    3:*/		return 0x8214A274;
	}
	return 0x8214A274;
} // Block from 8214A264h-8214A274h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A274);
		  /* 8214A274h */ case    0:  		/* nop */
		/* 8214A274h case    0:*/		cpu::op::nop();
		/* 8214A274h case    0:*/		return 0x8214A278;
	}
	return 0x8214A278;
} // Block from 8214A274h-8214A278h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214A278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A278);
		  /* 8214A278h */ case    0:  		/* mfspr R12, LR */
		/* 8214A278h case    0:*/		regs.R12 = regs.LR;
		/* 8214A278h case    0:*/		return 0x8214A27C;
		  /* 8214A27Ch */ case    1:  		/* bl -757800 */
		/* 8214A27Ch case    1:*/		regs.LR = 0x8214A280; return 0x82091254;
		/* 8214A27Ch case    1:*/		return 0x8214A280;
		  /* 8214A280h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214A280h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214A280h case    2:*/		return 0x8214A284;
		  /* 8214A284h */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214A284h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A284h case    3:*/		return 0x8214A288;
	}
	return 0x8214A288;
} // Block from 8214A278h-8214A288h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A288h
// Function '?AddArgument@ShaderPDBBuilder@XGRAPHICS@@QAAXPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A288);
		  /* 8214A288h */ case    0:  		/* mr R29, R5 */
		/* 8214A288h case    0:*/		regs.R29 = regs.R5;
		/* 8214A288h case    0:*/		return 0x8214A28C;
		  /* 8214A28Ch */ case    1:  		/* addi R5, R3, 144 */
		/* 8214A28Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R3,0x90);
		/* 8214A28Ch case    1:*/		return 0x8214A290;
		  /* 8214A290h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214A290h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A290h case    2:*/		return 0x8214A294;
		  /* 8214A294h */ case    3:  		/* bc 12, CR6_LT, 120 */
		/* 8214A294h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214A30C;  }
		/* 8214A294h case    3:*/		return 0x8214A298;
		  /* 8214A298h */ case    4:  		/* addi R11, R1, 80 */
		/* 8214A298h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8214A298h case    4:*/		return 0x8214A29C;
		  /* 8214A29Ch */ case    5:  		/* lwz R28, <#[R3 + 72]> */
		/* 8214A29Ch case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000048) );
		/* 8214A29Ch case    5:*/		return 0x8214A2A0;
		  /* 8214A2A0h */ case    6:  		/* li R30, 0 */
		/* 8214A2A0h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8214A2A0h case    6:*/		return 0x8214A2A4;
		  /* 8214A2A4h */ case    7:  		/* lwz R27, <#[R1 + 228]> */
		/* 8214A2A4h case    7:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000E4) );
		/* 8214A2A4h case    7:*/		return 0x8214A2A8;
		  /* 8214A2A8h */ case    8:  		/* rlwinm R31, R4, 4, 0, 27 */
		/* 8214A2A8h case    8:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R31,regs.R4);
		/* 8214A2A8h case    8:*/		return 0x8214A2AC;
		  /* 8214A2ACh */ case    9:  		/* rlwimi R10, R9, 1, 30, 30 */
		/* 8214A2ACh case    9:*/		cpu::op::rlwimi<0,1,30,30>(regs,&regs.R10,regs.R9);
		/* 8214A2ACh case    9:*/		return 0x8214A2B0;
		  /* 8214A2B0h */ case   10:  		/* rlwinm R9, R8, 31, 0, 0 */
		/* 8214A2B0h case   10:*/		cpu::op::rlwinm<0,31,0,0>(regs,&regs.R9,regs.R8);
		/* 8214A2B0h case   10:*/		return 0x8214A2B4;
		  /* 8214A2B4h */ case   11:  		/* std R30, <#[R11]> */
		/* 8214A2B4h case   11:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8214A2B4h case   11:*/		return 0x8214A2B8;
		  /* 8214A2B8h */ case   12:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 8214A2B8h case   12:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 8214A2B8h case   12:*/		return 0x8214A2BC;
		  /* 8214A2BCh */ case   13:  		/* std R30, <#[R11 + 8]> */
		/* 8214A2BCh case   13:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8214A2BCh case   13:*/		return 0x8214A2C0;
		  /* 8214A2C0h */ case   14:  		/* lwz R11, <#[R28]> */
		/* 8214A2C0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8214A2C0h case   14:*/		return 0x8214A2C4;
		  /* 8214A2C4h */ case   15:  		/* rlwimi R27, R10, 13, 0, 18 */
		/* 8214A2C4h case   15:*/		cpu::op::rlwimi<0,13,0,18>(regs,&regs.R27,regs.R10);
		/* 8214A2C4h case   15:*/		return 0x8214A2C8;
		  /* 8214A2C8h */ case   16:  		/* stw R4, <#[R1 + 80]> */
		/* 8214A2C8h case   16:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 8214A2C8h case   16:*/		return 0x8214A2CC;
		  /* 8214A2CCh */ case   17:  		/* addi R4, R1, 80 */
		/* 8214A2CCh case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214A2CCh case   17:*/		return 0x8214A2D0;
		  /* 8214A2D0h */ case   18:  		/* rlwimi R6, R27, 7, 0, 24 */
		/* 8214A2D0h case   18:*/		cpu::op::rlwimi<0,7,0,24>(regs,&regs.R6,regs.R27);
		/* 8214A2D0h case   18:*/		return 0x8214A2D4;
		  /* 8214A2D4h */ case   19:  		/* stw R29, <#[R1 + 84]> */
		/* 8214A2D4h case   19:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 8214A2D4h case   19:*/		return 0x8214A2D8;
		  /* 8214A2D8h */ case   20:  		/* stw R7, <#[R1 + 88]> */
		/* 8214A2D8h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000058) );
		/* 8214A2D8h case   20:*/		return 0x8214A2DC;
		  /* 8214A2DCh */ case   21:  		/* rlwinm R10, R6, 9, 0, 22 */
		/* 8214A2DCh case   21:*/		cpu::op::rlwinm<0,9,0,22>(regs,&regs.R10,regs.R6);
		/* 8214A2DCh case   21:*/		return 0x8214A2E0;
		  /* 8214A2E0h */ case   22:  		/* lwzx R8, <#[R11 + R31]> */
		/* 8214A2E0h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8214A2E0h case   22:*/		return 0x8214A2E4;
		  /* 8214A2E4h */ case   23:  		/* oris R8, R8, 32768 */
		/* 8214A2E4h case   23:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R8,0x8000);
		/* 8214A2E4h case   23:*/		return 0x8214A2E8;
	}
	return 0x8214A2E8;
} // Block from 8214A288h-8214A2E8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8214A2E8h
// Function '?AddCommonArguments@ShaderPDBBuilder@XGRAPHICS@@QAAXKKKKKKKKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A2E8);
		  /* 8214A2E8h */ case    0:  		/* stwx R8, <#[R11 + R31]> */
		/* 8214A2E8h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8214A2E8h case    0:*/		return 0x8214A2EC;
		  /* 8214A2ECh */ case    1:  		/* lwz R3, <#[R3 + 68]> */
		/* 8214A2ECh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000044) );
		/* 8214A2ECh case    1:*/		return 0x8214A2F0;
		  /* 8214A2F0h */ case    2:  		/* lwz R11, <#[R1 + 92]> */
		/* 8214A2F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214A2F0h case    2:*/		return 0x8214A2F4;
		  /* 8214A2F4h */ case    3:  		/* rlwinm R11, R11, 0, 23, 31 */
		/* 8214A2F4h case    3:*/		cpu::op::rlwinm<0,0,23,31>(regs,&regs.R11,regs.R11);
		/* 8214A2F4h case    3:*/		return 0x8214A2F8;
		  /* 8214A2F8h */ case    4:  		/* or R11, R11, R9 */
		/* 8214A2F8h case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8214A2F8h case    4:*/		return 0x8214A2FC;
		  /* 8214A2FCh */ case    5:  		/* rlwinm R11, R11, 0, 23, 0 */
		/* 8214A2FCh case    5:*/		cpu::op::rlwinm<0,0,23,0>(regs,&regs.R11,regs.R11);
		/* 8214A2FCh case    5:*/		return 0x8214A300;
		  /* 8214A300h */ case    6:  		/* or R11, R10, R11 */
		/* 8214A300h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214A300h case    6:*/		return 0x8214A304;
		  /* 8214A304h */ case    7:  		/* stw R11, <#[R1 + 92]> */
		/* 8214A304h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214A304h case    7:*/		return 0x8214A308;
		  /* 8214A308h */ case    8:  		/* bl -5192 */
		/* 8214A308h case    8:*/		regs.LR = 0x8214A30C; return 0x82148EC0;
		/* 8214A308h case    8:*/		return 0x8214A30C;
	}
	return 0x8214A30C;
} // Block from 8214A2E8h-8214A30Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214A30Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A30C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A30C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A30C);
		  /* 8214A30Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 8214A30Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214A30Ch case    0:*/		return 0x8214A310;
		  /* 8214A310h */ case    1:  		/* b -757868 */
		/* 8214A310h case    1:*/		return 0x820912A4;
		/* 8214A310h case    1:*/		return 0x8214A314;
		  /* 8214A314h */ case    2:  		/* nop */
		/* 8214A314h case    2:*/		cpu::op::nop();
		/* 8214A314h case    2:*/		return 0x8214A318;
	}
	return 0x8214A318;
} // Block from 8214A30Ch-8214A318h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214A318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A318);
		  /* 8214A318h */ case    0:  		/* mfspr R12, LR */
		/* 8214A318h case    0:*/		regs.R12 = regs.LR;
		/* 8214A318h case    0:*/		return 0x8214A31C;
		  /* 8214A31Ch */ case    1:  		/* bl -757952 */
		/* 8214A31Ch case    1:*/		regs.LR = 0x8214A320; return 0x8209125C;
		/* 8214A31Ch case    1:*/		return 0x8214A320;
		  /* 8214A320h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214A320h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214A320h case    2:*/		return 0x8214A324;
		  /* 8214A324h */ case    3:  		/* mr R11, R3 */
		/* 8214A324h case    3:*/		regs.R11 = regs.R3;
		/* 8214A324h case    3:*/		return 0x8214A328;
		  /* 8214A328h */ case    4:  		/* addi R29, R3, 144 */
		/* 8214A328h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x90);
		/* 8214A328h case    4:*/		return 0x8214A32C;
		  /* 8214A32Ch */ case    5:  		/* lwz R3, <#[R3 + 144]> */
		/* 8214A32Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A32Ch case    5:*/		return 0x8214A330;
		  /* 8214A330h */ case    6:  		/* mr R31, R4 */
		/* 8214A330h case    6:*/		regs.R31 = regs.R4;
		/* 8214A330h case    6:*/		return 0x8214A334;
		  /* 8214A334h */ case    7:  		/* cmpwi CR6, R3, 0 */
		/* 8214A334h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A334h case    7:*/		return 0x8214A338;
		  /* 8214A338h */ case    8:  		/* bc 12, CR6_LT, 52 */
		/* 8214A338h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214A36C;  }
		/* 8214A338h case    8:*/		return 0x8214A33C;
		  /* 8214A33Ch */ case    9:  		/* lwz R30, <#[R11 + 108]> */
		/* 8214A33Ch case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x0000006C) );
		/* 8214A33Ch case    9:*/		return 0x8214A340;
		  /* 8214A340h */ case   10:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214A340h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A340h case   10:*/		return 0x8214A344;
		  /* 8214A344h */ case   11:  		/* cmplw CR6, R11, R4 */
		/* 8214A344h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A344h case   11:*/		return 0x8214A348;
		  /* 8214A348h */ case   12:  		/* bc 12, CR6_GT, 36 */
		/* 8214A348h case   12:*/		if ( regs.CR[6].gt ) { return 0x8214A36C;  }
		/* 8214A348h case   12:*/		return 0x8214A34C;
		  /* 8214A34Ch */ case   13:  		/* lwz R11, <#[R30 + 8]> */
		/* 8214A34Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8214A34Ch case   13:*/		return 0x8214A350;
		  /* 8214A350h */ case   14:  		/* cmplw CR6, R4, R11 */
		/* 8214A350h case   14:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8214A350h case   14:*/		return 0x8214A354;
		  /* 8214A354h */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 8214A354h case   15:*/		if ( !regs.CR[6].gt ) { return 0x8214A364;  }
		/* 8214A354h case   15:*/		return 0x8214A358;
		  /* 8214A358h */ case   16:  		/* mr R5, R29 */
		/* 8214A358h case   16:*/		regs.R5 = regs.R29;
		/* 8214A358h case   16:*/		return 0x8214A35C;
		  /* 8214A35Ch */ case   17:  		/* mr R3, R30 */
		/* 8214A35Ch case   17:*/		regs.R3 = regs.R30;
		/* 8214A35Ch case   17:*/		return 0x8214A360;
		  /* 8214A360h */ case   18:  		/* bl -15320 */
		/* 8214A360h case   18:*/		regs.LR = 0x8214A364; return 0x82146788;
		/* 8214A360h case   18:*/		return 0x8214A364;
	}
	return 0x8214A364;
} // Block from 8214A318h-8214A364h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214A364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A364);
		  /* 8214A364h */ case    0:  		/* stw R31, <#[R30 + 4]> */
		/* 8214A364h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A364h case    0:*/		return 0x8214A368;
		  /* 8214A368h */ case    1:  		/* lwz R3, <#[R29]> */
		/* 8214A368h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8214A368h case    1:*/		return 0x8214A36C;
	}
	return 0x8214A36C;
} // Block from 8214A364h-8214A36Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A36Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A36C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A36C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A36C);
		  /* 8214A36Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8214A36Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214A36Ch case    0:*/		return 0x8214A370;
		  /* 8214A370h */ case    1:  		/* b -757956 */
		/* 8214A370h case    1:*/		return 0x820912AC;
		/* 8214A370h case    1:*/		return 0x8214A374;
		  /* 8214A374h */ case    2:  		/* nop */
		/* 8214A374h case    2:*/		cpu::op::nop();
		/* 8214A374h case    2:*/		return 0x8214A378;
	}
	return 0x8214A378;
} // Block from 8214A36Ch-8214A378h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214A378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A378);
		  /* 8214A378h */ case    0:  		/* mfspr R12, LR */
		/* 8214A378h case    0:*/		regs.R12 = regs.LR;
		/* 8214A378h case    0:*/		return 0x8214A37C;
		  /* 8214A37Ch */ case    1:  		/* bl -758048 */
		/* 8214A37Ch case    1:*/		regs.LR = 0x8214A380; return 0x8209125C;
		/* 8214A37Ch case    1:*/		return 0x8214A380;
		  /* 8214A380h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214A380h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214A380h case    2:*/		return 0x8214A384;
		  /* 8214A384h */ case    3:  		/* mr R11, R3 */
		/* 8214A384h case    3:*/		regs.R11 = regs.R3;
		/* 8214A384h case    3:*/		return 0x8214A388;
		  /* 8214A388h */ case    4:  		/* addi R29, R3, 144 */
		/* 8214A388h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x90);
		/* 8214A388h case    4:*/		return 0x8214A38C;
		  /* 8214A38Ch */ case    5:  		/* lwz R3, <#[R3 + 144]> */
		/* 8214A38Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A38Ch case    5:*/		return 0x8214A390;
		  /* 8214A390h */ case    6:  		/* mr R31, R4 */
		/* 8214A390h case    6:*/		regs.R31 = regs.R4;
		/* 8214A390h case    6:*/		return 0x8214A394;
		  /* 8214A394h */ case    7:  		/* cmpwi CR6, R3, 0 */
		/* 8214A394h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A394h case    7:*/		return 0x8214A398;
		  /* 8214A398h */ case    8:  		/* bc 12, CR6_LT, 52 */
		/* 8214A398h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214A3CC;  }
		/* 8214A398h case    8:*/		return 0x8214A39C;
		  /* 8214A39Ch */ case    9:  		/* lwz R30, <#[R11 + 104]> */
		/* 8214A39Ch case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000068) );
		/* 8214A39Ch case    9:*/		return 0x8214A3A0;
		  /* 8214A3A0h */ case   10:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214A3A0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A3A0h case   10:*/		return 0x8214A3A4;
		  /* 8214A3A4h */ case   11:  		/* cmplw CR6, R11, R4 */
		/* 8214A3A4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A3A4h case   11:*/		return 0x8214A3A8;
		  /* 8214A3A8h */ case   12:  		/* bc 12, CR6_GT, 36 */
		/* 8214A3A8h case   12:*/		if ( regs.CR[6].gt ) { return 0x8214A3CC;  }
		/* 8214A3A8h case   12:*/		return 0x8214A3AC;
		  /* 8214A3ACh */ case   13:  		/* lwz R11, <#[R30 + 8]> */
		/* 8214A3ACh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8214A3ACh case   13:*/		return 0x8214A3B0;
		  /* 8214A3B0h */ case   14:  		/* cmplw CR6, R4, R11 */
		/* 8214A3B0h case   14:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8214A3B0h case   14:*/		return 0x8214A3B4;
		  /* 8214A3B4h */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 8214A3B4h case   15:*/		if ( !regs.CR[6].gt ) { return 0x8214A3C4;  }
		/* 8214A3B4h case   15:*/		return 0x8214A3B8;
		  /* 8214A3B8h */ case   16:  		/* mr R5, R29 */
		/* 8214A3B8h case   16:*/		regs.R5 = regs.R29;
		/* 8214A3B8h case   16:*/		return 0x8214A3BC;
		  /* 8214A3BCh */ case   17:  		/* mr R3, R30 */
		/* 8214A3BCh case   17:*/		regs.R3 = regs.R30;
		/* 8214A3BCh case   17:*/		return 0x8214A3C0;
		  /* 8214A3C0h */ case   18:  		/* bl -15704 */
		/* 8214A3C0h case   18:*/		regs.LR = 0x8214A3C4; return 0x82146668;
		/* 8214A3C0h case   18:*/		return 0x8214A3C4;
	}
	return 0x8214A3C4;
} // Block from 8214A378h-8214A3C4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214A3C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A3C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A3C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A3C4);
		  /* 8214A3C4h */ case    0:  		/* stw R31, <#[R30 + 4]> */
		/* 8214A3C4h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A3C4h case    0:*/		return 0x8214A3C8;
		  /* 8214A3C8h */ case    1:  		/* lwz R3, <#[R29]> */
		/* 8214A3C8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8214A3C8h case    1:*/		return 0x8214A3CC;
	}
	return 0x8214A3CC;
} // Block from 8214A3C4h-8214A3CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A3CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A3CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A3CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A3CC);
		  /* 8214A3CCh */ case    0:  		/* addi R1, R1, 112 */
		/* 8214A3CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214A3CCh case    0:*/		return 0x8214A3D0;
		  /* 8214A3D0h */ case    1:  		/* b -758052 */
		/* 8214A3D0h case    1:*/		return 0x820912AC;
		/* 8214A3D0h case    1:*/		return 0x8214A3D4;
		  /* 8214A3D4h */ case    2:  		/* nop */
		/* 8214A3D4h case    2:*/		cpu::op::nop();
		/* 8214A3D4h case    2:*/		return 0x8214A3D8;
	}
	return 0x8214A3D8;
} // Block from 8214A3CCh-8214A3D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214A3D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A3D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A3D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A3D8);
		  /* 8214A3D8h */ case    0:  		/* mfspr R12, LR */
		/* 8214A3D8h case    0:*/		regs.R12 = regs.LR;
		/* 8214A3D8h case    0:*/		return 0x8214A3DC;
		  /* 8214A3DCh */ case    1:  		/* bl -758164 */
		/* 8214A3DCh case    1:*/		regs.LR = 0x8214A3E0; return 0x82091248;
		/* 8214A3DCh case    1:*/		return 0x8214A3E0;
		  /* 8214A3E0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8214A3E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8214A3E0h case    2:*/		return 0x8214A3E4;
		  /* 8214A3E4h */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214A3E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A3E4h case    3:*/		return 0x8214A3E8;
		  /* 8214A3E8h */ case    4:  		/* mr R28, R3 */
		/* 8214A3E8h case    4:*/		regs.R28 = regs.R3;
		/* 8214A3E8h case    4:*/		return 0x8214A3EC;
		  /* 8214A3ECh */ case    5:  		/* mr R31, R4 */
		/* 8214A3ECh case    5:*/		regs.R31 = regs.R4;
		/* 8214A3ECh case    5:*/		return 0x8214A3F0;
		  /* 8214A3F0h */ case    6:  		/* mr R25, R5 */
		/* 8214A3F0h case    6:*/		regs.R25 = regs.R5;
		/* 8214A3F0h case    6:*/		return 0x8214A3F4;
		  /* 8214A3F4h */ case    7:  		/* mr R30, R6 */
		/* 8214A3F4h case    7:*/		regs.R30 = regs.R6;
		/* 8214A3F4h case    7:*/		return 0x8214A3F8;
		  /* 8214A3F8h */ case    8:  		/* mr R24, R7 */
		/* 8214A3F8h case    8:*/		regs.R24 = regs.R7;
		/* 8214A3F8h case    8:*/		return 0x8214A3FC;
		  /* 8214A3FCh */ case    9:  		/* addi R26, R3, 144 */
		/* 8214A3FCh case    9:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x90);
		/* 8214A3FCh case    9:*/		return 0x8214A400;
		  /* 8214A400h */ case   10:  		/* cmpwi CR6, R11, 0 */
		/* 8214A400h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A400h case   10:*/		return 0x8214A404;
		  /* 8214A404h */ case   11:  		/* bc 12, CR6_LT, 120 */
		/* 8214A404h case   11:*/		if ( regs.CR[6].lt ) { return 0x8214A47C;  }
		/* 8214A404h case   11:*/		return 0x8214A408;
		  /* 8214A408h */ case   12:  		/* lwz R29, <#[R3 + 104]> */
		/* 8214A408h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000068) );
		/* 8214A408h case   12:*/		return 0x8214A40C;
		  /* 8214A40Ch */ case   13:  		/* lwz R11, <#[R29 + 4]> */
		/* 8214A40Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8214A40Ch case   13:*/		return 0x8214A410;
		  /* 8214A410h */ case   14:  		/* cmplw CR6, R11, R4 */
		/* 8214A410h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A410h case   14:*/		return 0x8214A414;
		  /* 8214A414h */ case   15:  		/* bc 12, CR6_GT, 52 */
		/* 8214A414h case   15:*/		if ( regs.CR[6].gt ) { return 0x8214A448;  }
		/* 8214A414h case   15:*/		return 0x8214A418;
		  /* 8214A418h */ case   16:  		/* lwz R11, <#[R29 + 8]> */
		/* 8214A418h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8214A418h case   16:*/		return 0x8214A41C;
		  /* 8214A41Ch */ case   17:  		/* addi R27, R4, 1 */
		/* 8214A41Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R4,0x1);
		/* 8214A41Ch case   17:*/		return 0x8214A420;
		  /* 8214A420h */ case   18:  		/* cmplw CR6, R27, R11 */
		/* 8214A420h case   18:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 8214A420h case   18:*/		return 0x8214A424;
		  /* 8214A424h */ case   19:  		/* bc 4, CR6_GT, 20 */
		/* 8214A424h case   19:*/		if ( !regs.CR[6].gt ) { return 0x8214A438;  }
		/* 8214A424h case   19:*/		return 0x8214A428;
		  /* 8214A428h */ case   20:  		/* mr R5, R26 */
		/* 8214A428h case   20:*/		regs.R5 = regs.R26;
		/* 8214A428h case   20:*/		return 0x8214A42C;
		  /* 8214A42Ch */ case   21:  		/* mr R4, R27 */
		/* 8214A42Ch case   21:*/		regs.R4 = regs.R27;
		/* 8214A42Ch case   21:*/		return 0x8214A430;
		  /* 8214A430h */ case   22:  		/* mr R3, R29 */
		/* 8214A430h case   22:*/		regs.R3 = regs.R29;
		/* 8214A430h case   22:*/		return 0x8214A434;
		  /* 8214A434h */ case   23:  		/* bl -15820 */
		/* 8214A434h case   23:*/		regs.LR = 0x8214A438; return 0x82146668;
		/* 8214A434h case   23:*/		return 0x8214A438;
	}
	return 0x8214A438;
} // Block from 8214A3D8h-8214A438h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8214A438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A438);
		  /* 8214A438h */ case    0:  		/* stw R27, <#[R29 + 4]> */
		/* 8214A438h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x00000004) );
		/* 8214A438h case    0:*/		return 0x8214A43C;
		  /* 8214A43Ch */ case    1:  		/* lwz R11, <#[R26]> */
		/* 8214A43Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8214A43Ch case    1:*/		return 0x8214A440;
		  /* 8214A440h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214A440h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A440h case    2:*/		return 0x8214A444;
		  /* 8214A444h */ case    3:  		/* bc 12, CR6_LT, 56 */
		/* 8214A444h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214A47C;  }
		/* 8214A444h case    3:*/		return 0x8214A448;
	}
	return 0x8214A448;
} // Block from 8214A438h-8214A448h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A448);
		  /* 8214A448h */ case    0:  		/* lwz R10, <#[R28 + 104]> */
		/* 8214A448h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000068) );
		/* 8214A448h case    0:*/		return 0x8214A44C;
		  /* 8214A44Ch */ case    1:  		/* mulli R11, R31, 12 */
		/* 8214A44Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0xC);
		/* 8214A44Ch case    1:*/		return 0x8214A450;
		  /* 8214A450h */ case    2:  		/* lwz R10, <#[R10]> */
		/* 8214A450h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8214A450h case    2:*/		return 0x8214A454;
		  /* 8214A454h */ case    3:  		/* add R11, R11, R10 */
		/* 8214A454h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214A454h case    3:*/		return 0x8214A458;
		  /* 8214A458h */ case    4:  		/* rlwimi R30, R24, 1, 0, 30 */
		/* 8214A458h case    4:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R30,regs.R24);
		/* 8214A458h case    4:*/		return 0x8214A45C;
		  /* 8214A45Ch */ case    5:  		/* rlwinm R10, R30, 18, 0, 13 */
		/* 8214A45Ch case    5:*/		cpu::op::rlwinm<0,18,0,13>(regs,&regs.R10,regs.R30);
		/* 8214A45Ch case    5:*/		return 0x8214A460;
		  /* 8214A460h */ case    6:  		/* lwz R9, <#[R11 + 8]> */
		/* 8214A460h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8214A460h case    6:*/		return 0x8214A464;
		  /* 8214A464h */ case    7:  		/* stw R25, <#[R11 + 4]> */
		/* 8214A464h case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000004) );
		/* 8214A464h case    7:*/		return 0x8214A468;
		  /* 8214A468h */ case    8:  		/* rlwinm R9, R9, 0, 15, 31 */
		/* 8214A468h case    8:*/		cpu::op::rlwinm<0,0,15,31>(regs,&regs.R9,regs.R9);
		/* 8214A468h case    8:*/		return 0x8214A46C;
		  /* 8214A46Ch */ case    9:  		/* stw R31, <#[R11]> */
		/* 8214A46Ch case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8214A46Ch case    9:*/		return 0x8214A470;
		  /* 8214A470h */ case   10:  		/* or R10, R10, R9 */
		/* 8214A470h case   10:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8214A470h case   10:*/		return 0x8214A474;
		  /* 8214A474h */ case   11:  		/* oris R10, R10, 2 */
		/* 8214A474h case   11:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x2);
		/* 8214A474h case   11:*/		return 0x8214A478;
		  /* 8214A478h */ case   12:  		/* stw R10, <#[R11 + 8]> */
		/* 8214A478h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8214A478h case   12:*/		return 0x8214A47C;
	}
	return 0x8214A47C;
} // Block from 8214A448h-8214A47Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214A47Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A47C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A47C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A47C);
		  /* 8214A47Ch */ case    0:  		/* addi R1, R1, 160 */
		/* 8214A47Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8214A47Ch case    0:*/		return 0x8214A480;
		  /* 8214A480h */ case    1:  		/* b -758248 */
		/* 8214A480h case    1:*/		return 0x82091298;
		/* 8214A480h case    1:*/		return 0x8214A484;
		  /* 8214A484h */ case    2:  		/* nop */
		/* 8214A484h case    2:*/		cpu::op::nop();
		/* 8214A484h case    2:*/		return 0x8214A488;
	}
	return 0x8214A488;
} // Block from 8214A47Ch-8214A488h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214A488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A488);
		  /* 8214A488h */ case    0:  		/* mfspr R12, LR */
		/* 8214A488h case    0:*/		regs.R12 = regs.LR;
		/* 8214A488h case    0:*/		return 0x8214A48C;
		  /* 8214A48Ch */ case    1:  		/* bl -758340 */
		/* 8214A48Ch case    1:*/		regs.LR = 0x8214A490; return 0x82091248;
		/* 8214A48Ch case    1:*/		return 0x8214A490;
		  /* 8214A490h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8214A490h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8214A490h case    2:*/		return 0x8214A494;
		  /* 8214A494h */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214A494h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A494h case    3:*/		return 0x8214A498;
		  /* 8214A498h */ case    4:  		/* mr R28, R3 */
		/* 8214A498h case    4:*/		regs.R28 = regs.R3;
		/* 8214A498h case    4:*/		return 0x8214A49C;
		  /* 8214A49Ch */ case    5:  		/* mr R31, R4 */
		/* 8214A49Ch case    5:*/		regs.R31 = regs.R4;
		/* 8214A49Ch case    5:*/		return 0x8214A4A0;
		  /* 8214A4A0h */ case    6:  		/* mr R25, R5 */
		/* 8214A4A0h case    6:*/		regs.R25 = regs.R5;
		/* 8214A4A0h case    6:*/		return 0x8214A4A4;
		  /* 8214A4A4h */ case    7:  		/* mr R30, R6 */
		/* 8214A4A4h case    7:*/		regs.R30 = regs.R6;
		/* 8214A4A4h case    7:*/		return 0x8214A4A8;
		  /* 8214A4A8h */ case    8:  		/* mr R24, R7 */
		/* 8214A4A8h case    8:*/		regs.R24 = regs.R7;
		/* 8214A4A8h case    8:*/		return 0x8214A4AC;
		  /* 8214A4ACh */ case    9:  		/* addi R26, R3, 144 */
		/* 8214A4ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x90);
		/* 8214A4ACh case    9:*/		return 0x8214A4B0;
		  /* 8214A4B0h */ case   10:  		/* cmpwi CR6, R11, 0 */
		/* 8214A4B0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A4B0h case   10:*/		return 0x8214A4B4;
		  /* 8214A4B4h */ case   11:  		/* bc 12, CR6_LT, 116 */
		/* 8214A4B4h case   11:*/		if ( regs.CR[6].lt ) { return 0x8214A528;  }
		/* 8214A4B4h case   11:*/		return 0x8214A4B8;
		  /* 8214A4B8h */ case   12:  		/* lwz R29, <#[R3 + 104]> */
		/* 8214A4B8h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000068) );
		/* 8214A4B8h case   12:*/		return 0x8214A4BC;
		  /* 8214A4BCh */ case   13:  		/* lwz R11, <#[R29 + 4]> */
		/* 8214A4BCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8214A4BCh case   13:*/		return 0x8214A4C0;
		  /* 8214A4C0h */ case   14:  		/* cmplw CR6, R11, R4 */
		/* 8214A4C0h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A4C0h case   14:*/		return 0x8214A4C4;
		  /* 8214A4C4h */ case   15:  		/* bc 12, CR6_GT, 52 */
		/* 8214A4C4h case   15:*/		if ( regs.CR[6].gt ) { return 0x8214A4F8;  }
		/* 8214A4C4h case   15:*/		return 0x8214A4C8;
		  /* 8214A4C8h */ case   16:  		/* lwz R11, <#[R29 + 8]> */
		/* 8214A4C8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8214A4C8h case   16:*/		return 0x8214A4CC;
		  /* 8214A4CCh */ case   17:  		/* addi R27, R4, 1 */
		/* 8214A4CCh case   17:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R4,0x1);
		/* 8214A4CCh case   17:*/		return 0x8214A4D0;
		  /* 8214A4D0h */ case   18:  		/* cmplw CR6, R27, R11 */
		/* 8214A4D0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 8214A4D0h case   18:*/		return 0x8214A4D4;
		  /* 8214A4D4h */ case   19:  		/* bc 4, CR6_GT, 20 */
		/* 8214A4D4h case   19:*/		if ( !regs.CR[6].gt ) { return 0x8214A4E8;  }
		/* 8214A4D4h case   19:*/		return 0x8214A4D8;
		  /* 8214A4D8h */ case   20:  		/* mr R5, R26 */
		/* 8214A4D8h case   20:*/		regs.R5 = regs.R26;
		/* 8214A4D8h case   20:*/		return 0x8214A4DC;
		  /* 8214A4DCh */ case   21:  		/* mr R4, R27 */
		/* 8214A4DCh case   21:*/		regs.R4 = regs.R27;
		/* 8214A4DCh case   21:*/		return 0x8214A4E0;
		  /* 8214A4E0h */ case   22:  		/* mr R3, R29 */
		/* 8214A4E0h case   22:*/		regs.R3 = regs.R29;
		/* 8214A4E0h case   22:*/		return 0x8214A4E4;
		  /* 8214A4E4h */ case   23:  		/* bl -15996 */
		/* 8214A4E4h case   23:*/		regs.LR = 0x8214A4E8; return 0x82146668;
		/* 8214A4E4h case   23:*/		return 0x8214A4E8;
	}
	return 0x8214A4E8;
} // Block from 8214A488h-8214A4E8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8214A4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A4E8);
		  /* 8214A4E8h */ case    0:  		/* stw R27, <#[R29 + 4]> */
		/* 8214A4E8h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x00000004) );
		/* 8214A4E8h case    0:*/		return 0x8214A4EC;
		  /* 8214A4ECh */ case    1:  		/* lwz R11, <#[R26]> */
		/* 8214A4ECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8214A4ECh case    1:*/		return 0x8214A4F0;
		  /* 8214A4F0h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214A4F0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A4F0h case    2:*/		return 0x8214A4F4;
		  /* 8214A4F4h */ case    3:  		/* bc 12, CR6_LT, 52 */
		/* 8214A4F4h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214A528;  }
		/* 8214A4F4h case    3:*/		return 0x8214A4F8;
	}
	return 0x8214A4F8;
} // Block from 8214A4E8h-8214A4F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A4F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A4F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A4F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A4F8);
		  /* 8214A4F8h */ case    0:  		/* lwz R10, <#[R28 + 104]> */
		/* 8214A4F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000068) );
		/* 8214A4F8h case    0:*/		return 0x8214A4FC;
		  /* 8214A4FCh */ case    1:  		/* mulli R11, R31, 12 */
		/* 8214A4FCh case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0xC);
		/* 8214A4FCh case    1:*/		return 0x8214A500;
		  /* 8214A500h */ case    2:  		/* lwz R10, <#[R10]> */
		/* 8214A500h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8214A500h case    2:*/		return 0x8214A504;
		  /* 8214A504h */ case    3:  		/* add R11, R11, R10 */
		/* 8214A504h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214A504h case    3:*/		return 0x8214A508;
		  /* 8214A508h */ case    4:  		/* rlwimi R30, R24, 1, 0, 30 */
		/* 8214A508h case    4:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R30,regs.R24);
		/* 8214A508h case    4:*/		return 0x8214A50C;
		  /* 8214A50Ch */ case    5:  		/* rlwinm R10, R30, 18, 0, 13 */
		/* 8214A50Ch case    5:*/		cpu::op::rlwinm<0,18,0,13>(regs,&regs.R10,regs.R30);
		/* 8214A50Ch case    5:*/		return 0x8214A510;
	}
	return 0x8214A510;
} // Block from 8214A4F8h-8214A510h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214A510h
// Function '?AddCommonArguments@ShaderPDBBuilder@XGRAPHICS@@QAAXKPAU_D3DXSHADER_COMPILE_PARAMETERSA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A510);
		  /* 8214A510h */ case    0:  		/* lwz R9, <#[R11 + 8]> */
		/* 8214A510h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8214A510h case    0:*/		return 0x8214A514;
		  /* 8214A514h */ case    1:  		/* stw R25, <#[R11 + 4]> */
		/* 8214A514h case    1:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000004) );
		/* 8214A514h case    1:*/		return 0x8214A518;
		  /* 8214A518h */ case    2:  		/* rlwinm R9, R9, 0, 15, 31 */
		/* 8214A518h case    2:*/		cpu::op::rlwinm<0,0,15,31>(regs,&regs.R9,regs.R9);
		/* 8214A518h case    2:*/		return 0x8214A51C;
		  /* 8214A51Ch */ case    3:  		/* stw R31, <#[R11]> */
		/* 8214A51Ch case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8214A51Ch case    3:*/		return 0x8214A520;
		  /* 8214A520h */ case    4:  		/* or R10, R10, R9 */
		/* 8214A520h case    4:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8214A520h case    4:*/		return 0x8214A524;
		  /* 8214A524h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 8214A524h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8214A524h case    5:*/		return 0x8214A528;
	}
	return 0x8214A528;
} // Block from 8214A510h-8214A528h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214A528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A528);
		  /* 8214A528h */ case    0:  		/* addi R1, R1, 160 */
		/* 8214A528h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8214A528h case    0:*/		return 0x8214A52C;
		  /* 8214A52Ch */ case    1:  		/* b -758420 */
		/* 8214A52Ch case    1:*/		return 0x82091298;
		/* 8214A52Ch case    1:*/		return 0x8214A530;
	}
	return 0x8214A530;
} // Block from 8214A528h-8214A530h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A530);
		  /* 8214A530h */ case    0:  		/* mfspr R12, LR */
		/* 8214A530h case    0:*/		regs.R12 = regs.LR;
		/* 8214A530h case    0:*/		return 0x8214A534;
		  /* 8214A534h */ case    1:  		/* bl -758488 */
		/* 8214A534h case    1:*/		regs.LR = 0x8214A538; return 0x8209125C;
		/* 8214A534h case    1:*/		return 0x8214A538;
		  /* 8214A538h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214A538h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214A538h case    2:*/		return 0x8214A53C;
		  /* 8214A53Ch */ case    3:  		/* mr R11, R3 */
		/* 8214A53Ch case    3:*/		regs.R11 = regs.R3;
		/* 8214A53Ch case    3:*/		return 0x8214A540;
		  /* 8214A540h */ case    4:  		/* addi R29, R3, 144 */
		/* 8214A540h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x90);
		/* 8214A540h case    4:*/		return 0x8214A544;
		  /* 8214A544h */ case    5:  		/* lwz R3, <#[R3 + 144]> */
		/* 8214A544h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A544h case    5:*/		return 0x8214A548;
		  /* 8214A548h */ case    6:  		/* mr R31, R4 */
		/* 8214A548h case    6:*/		regs.R31 = regs.R4;
		/* 8214A548h case    6:*/		return 0x8214A54C;
		  /* 8214A54Ch */ case    7:  		/* cmpwi CR6, R3, 0 */
		/* 8214A54Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A54Ch case    7:*/		return 0x8214A550;
		  /* 8214A550h */ case    8:  		/* bc 12, CR6_LT, 52 */
		/* 8214A550h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214A584;  }
		/* 8214A550h case    8:*/		return 0x8214A554;
		  /* 8214A554h */ case    9:  		/* lwz R30, <#[R11 + 100]> */
		/* 8214A554h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000064) );
		/* 8214A554h case    9:*/		return 0x8214A558;
		  /* 8214A558h */ case   10:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214A558h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A558h case   10:*/		return 0x8214A55C;
		  /* 8214A55Ch */ case   11:  		/* cmplw CR6, R11, R4 */
		/* 8214A55Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A55Ch case   11:*/		return 0x8214A560;
		  /* 8214A560h */ case   12:  		/* bc 12, CR6_GT, 36 */
		/* 8214A560h case   12:*/		if ( regs.CR[6].gt ) { return 0x8214A584;  }
		/* 8214A560h case   12:*/		return 0x8214A564;
		  /* 8214A564h */ case   13:  		/* lwz R11, <#[R30 + 8]> */
		/* 8214A564h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8214A564h case   13:*/		return 0x8214A568;
		  /* 8214A568h */ case   14:  		/* cmplw CR6, R4, R11 */
		/* 8214A568h case   14:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8214A568h case   14:*/		return 0x8214A56C;
		  /* 8214A56Ch */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 8214A56Ch case   15:*/		if ( !regs.CR[6].gt ) { return 0x8214A57C;  }
		/* 8214A56Ch case   15:*/		return 0x8214A570;
		  /* 8214A570h */ case   16:  		/* mr R5, R29 */
		/* 8214A570h case   16:*/		regs.R5 = regs.R29;
		/* 8214A570h case   16:*/		return 0x8214A574;
		  /* 8214A574h */ case   17:  		/* mr R3, R30 */
		/* 8214A574h case   17:*/		regs.R3 = regs.R30;
		/* 8214A574h case   17:*/		return 0x8214A578;
		  /* 8214A578h */ case   18:  		/* bl -15136 */
		/* 8214A578h case   18:*/		regs.LR = 0x8214A57C; return 0x82146A58;
		/* 8214A578h case   18:*/		return 0x8214A57C;
	}
	return 0x8214A57C;
} // Block from 8214A530h-8214A57Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214A57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A57C);
		  /* 8214A57Ch */ case    0:  		/* stw R31, <#[R30 + 4]> */
		/* 8214A57Ch case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A57Ch case    0:*/		return 0x8214A580;
		  /* 8214A580h */ case    1:  		/* lwz R3, <#[R29]> */
		/* 8214A580h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8214A580h case    1:*/		return 0x8214A584;
	}
	return 0x8214A584;
} // Block from 8214A57Ch-8214A584h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A584);
		  /* 8214A584h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214A584h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214A584h case    0:*/		return 0x8214A588;
		  /* 8214A588h */ case    1:  		/* b -758492 */
		/* 8214A588h case    1:*/		return 0x820912AC;
		/* 8214A588h case    1:*/		return 0x8214A58C;
		  /* 8214A58Ch */ case    2:  		/* nop */
		/* 8214A58Ch case    2:*/		cpu::op::nop();
		/* 8214A58Ch case    2:*/		return 0x8214A590;
	}
	return 0x8214A590;
} // Block from 8214A584h-8214A590h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214A590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A590);
		  /* 8214A590h */ case    0:  		/* mfspr R12, LR */
		/* 8214A590h case    0:*/		regs.R12 = regs.LR;
		/* 8214A590h case    0:*/		return 0x8214A594;
		  /* 8214A594h */ case    1:  		/* bl -758596 */
		/* 8214A594h case    1:*/		regs.LR = 0x8214A598; return 0x82091250;
		/* 8214A594h case    1:*/		return 0x8214A598;
		  /* 8214A598h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214A598h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214A598h case    2:*/		return 0x8214A59C;
		  /* 8214A59Ch */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214A59Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A59Ch case    3:*/		return 0x8214A5A0;
		  /* 8214A5A0h */ case    4:  		/* mr R28, R3 */
		/* 8214A5A0h case    4:*/		regs.R28 = regs.R3;
		/* 8214A5A0h case    4:*/		return 0x8214A5A4;
		  /* 8214A5A4h */ case    5:  		/* mr R29, R4 */
		/* 8214A5A4h case    5:*/		regs.R29 = regs.R4;
		/* 8214A5A4h case    5:*/		return 0x8214A5A8;
		  /* 8214A5A8h */ case    6:  		/* mr R26, R5 */
		/* 8214A5A8h case    6:*/		regs.R26 = regs.R5;
		/* 8214A5A8h case    6:*/		return 0x8214A5AC;
		  /* 8214A5ACh */ case    7:  		/* addi R27, R3, 144 */
		/* 8214A5ACh case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x90);
		/* 8214A5ACh case    7:*/		return 0x8214A5B0;
		  /* 8214A5B0h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 8214A5B0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A5B0h case    8:*/		return 0x8214A5B4;
		  /* 8214A5B4h */ case    9:  		/* bc 12, CR6_LT, 100 */
		/* 8214A5B4h case    9:*/		if ( regs.CR[6].lt ) { return 0x8214A618;  }
		/* 8214A5B4h case    9:*/		return 0x8214A5B8;
		  /* 8214A5B8h */ case   10:  		/* lwz R31, <#[R3 + 100]> */
		/* 8214A5B8h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000064) );
		/* 8214A5B8h case   10:*/		return 0x8214A5BC;
		  /* 8214A5BCh */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214A5BCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214A5BCh case   11:*/		return 0x8214A5C0;
		  /* 8214A5C0h */ case   12:  		/* cmplw CR6, R11, R4 */
		/* 8214A5C0h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A5C0h case   12:*/		return 0x8214A5C4;
		  /* 8214A5C4h */ case   13:  		/* bc 12, CR6_GT, 52 */
		/* 8214A5C4h case   13:*/		if ( regs.CR[6].gt ) { return 0x8214A5F8;  }
		/* 8214A5C4h case   13:*/		return 0x8214A5C8;
		  /* 8214A5C8h */ case   14:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214A5C8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214A5C8h case   14:*/		return 0x8214A5CC;
		  /* 8214A5CCh */ case   15:  		/* addi R30, R4, 1 */
		/* 8214A5CCh case   15:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R4,0x1);
		/* 8214A5CCh case   15:*/		return 0x8214A5D0;
		  /* 8214A5D0h */ case   16:  		/* cmplw CR6, R30, R11 */
		/* 8214A5D0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8214A5D0h case   16:*/		return 0x8214A5D4;
		  /* 8214A5D4h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 8214A5D4h case   17:*/		if ( !regs.CR[6].gt ) { return 0x8214A5E8;  }
		/* 8214A5D4h case   17:*/		return 0x8214A5D8;
		  /* 8214A5D8h */ case   18:  		/* mr R5, R27 */
		/* 8214A5D8h case   18:*/		regs.R5 = regs.R27;
		/* 8214A5D8h case   18:*/		return 0x8214A5DC;
		  /* 8214A5DCh */ case   19:  		/* mr R4, R30 */
		/* 8214A5DCh case   19:*/		regs.R4 = regs.R30;
		/* 8214A5DCh case   19:*/		return 0x8214A5E0;
	}
	return 0x8214A5E0;
} // Block from 8214A590h-8214A5E0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8214A5E0h
// Function '?AddHLSLSpecificArguments@ShaderPDBBuilder@XGRAPHICS@@QAAXKKKKKKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A5E0);
		  /* 8214A5E0h */ case    0:  		/* mr R3, R31 */
		/* 8214A5E0h case    0:*/		regs.R3 = regs.R31;
		/* 8214A5E0h case    0:*/		return 0x8214A5E4;
		  /* 8214A5E4h */ case    1:  		/* bl -15244 */
		/* 8214A5E4h case    1:*/		regs.LR = 0x8214A5E8; return 0x82146A58;
		/* 8214A5E4h case    1:*/		return 0x8214A5E8;
	}
	return 0x8214A5E8;
} // Block from 8214A5E0h-8214A5E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A5E8);
		  /* 8214A5E8h */ case    0:  		/* stw R30, <#[R31 + 4]> */
		/* 8214A5E8h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8214A5E8h case    0:*/		return 0x8214A5EC;
		  /* 8214A5ECh */ case    1:  		/* lwz R11, <#[R27]> */
		/* 8214A5ECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8214A5ECh case    1:*/		return 0x8214A5F0;
		  /* 8214A5F0h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214A5F0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A5F0h case    2:*/		return 0x8214A5F4;
		  /* 8214A5F4h */ case    3:  		/* bc 12, CR6_LT, 36 */
		/* 8214A5F4h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214A618;  }
		/* 8214A5F4h case    3:*/		return 0x8214A5F8;
	}
	return 0x8214A5F8;
} // Block from 8214A5E8h-8214A5F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A5F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A5F8);
		  /* 8214A5F8h */ case    0:  		/* lwz R10, <#[R28 + 100]> */
		/* 8214A5F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000064) );
		/* 8214A5F8h case    0:*/		return 0x8214A5FC;
		  /* 8214A5FCh */ case    1:  		/* rlwinm R11, R29, 3, 0, 28 */
		/* 8214A5FCh case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R29);
		/* 8214A5FCh case    1:*/		return 0x8214A600;
		  /* 8214A600h */ case    2:  		/* lwz R10, <#[R10]> */
		/* 8214A600h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8214A600h case    2:*/		return 0x8214A604;
		  /* 8214A604h */ case    3:  		/* add R11, R11, R10 */
		/* 8214A604h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214A604h case    3:*/		return 0x8214A608;
		  /* 8214A608h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 8214A608h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8214A608h case    4:*/		return 0x8214A60C;
		  /* 8214A60Ch */ case    5:  		/* stw R26, <#[R11]> */
		/* 8214A60Ch case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x00000000) );
		/* 8214A60Ch case    5:*/		return 0x8214A610;
		  /* 8214A610h */ case    6:  		/* oris R10, R10, 32768 */
		/* 8214A610h case    6:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x8000);
		/* 8214A610h case    6:*/		return 0x8214A614;
		  /* 8214A614h */ case    7:  		/* stw R10, <#[R11 + 4]> */
		/* 8214A614h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8214A614h case    7:*/		return 0x8214A618;
	}
	return 0x8214A618;
} // Block from 8214A5F8h-8214A618h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214A618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A618);
		  /* 8214A618h */ case    0:  		/* addi R1, R1, 144 */
		/* 8214A618h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214A618h case    0:*/		return 0x8214A61C;
		  /* 8214A61Ch */ case    1:  		/* b -758652 */
		/* 8214A61Ch case    1:*/		return 0x820912A0;
		/* 8214A61Ch case    1:*/		return 0x8214A620;
	}
	return 0x8214A620;
} // Block from 8214A618h-8214A620h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A620);
		  /* 8214A620h */ case    0:  		/* mfspr R12, LR */
		/* 8214A620h case    0:*/		regs.R12 = regs.LR;
		/* 8214A620h case    0:*/		return 0x8214A624;
		  /* 8214A624h */ case    1:  		/* bl -758728 */
		/* 8214A624h case    1:*/		regs.LR = 0x8214A628; return 0x8209125C;
		/* 8214A624h case    1:*/		return 0x8214A628;
		  /* 8214A628h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214A628h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214A628h case    2:*/		return 0x8214A62C;
		  /* 8214A62Ch */ case    3:  		/* mr R11, R3 */
		/* 8214A62Ch case    3:*/		regs.R11 = regs.R3;
		/* 8214A62Ch case    3:*/		return 0x8214A630;
		  /* 8214A630h */ case    4:  		/* addi R29, R3, 144 */
		/* 8214A630h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x90);
		/* 8214A630h case    4:*/		return 0x8214A634;
		  /* 8214A634h */ case    5:  		/* lwz R3, <#[R3 + 144]> */
		/* 8214A634h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A634h case    5:*/		return 0x8214A638;
		  /* 8214A638h */ case    6:  		/* mr R31, R4 */
		/* 8214A638h case    6:*/		regs.R31 = regs.R4;
		/* 8214A638h case    6:*/		return 0x8214A63C;
		  /* 8214A63Ch */ case    7:  		/* cmpwi CR6, R3, 0 */
		/* 8214A63Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A63Ch case    7:*/		return 0x8214A640;
		  /* 8214A640h */ case    8:  		/* bc 12, CR6_LT, 52 */
		/* 8214A640h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214A674;  }
		/* 8214A640h case    8:*/		return 0x8214A644;
		  /* 8214A644h */ case    9:  		/* lwz R30, <#[R11 + 112]> */
		/* 8214A644h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000070) );
		/* 8214A644h case    9:*/		return 0x8214A648;
		  /* 8214A648h */ case   10:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214A648h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A648h case   10:*/		return 0x8214A64C;
		  /* 8214A64Ch */ case   11:  		/* cmplw CR6, R11, R4 */
		/* 8214A64Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A64Ch case   11:*/		return 0x8214A650;
		  /* 8214A650h */ case   12:  		/* bc 12, CR6_GT, 36 */
		/* 8214A650h case   12:*/		if ( regs.CR[6].gt ) { return 0x8214A674;  }
		/* 8214A650h case   12:*/		return 0x8214A654;
		  /* 8214A654h */ case   13:  		/* lwz R11, <#[R30 + 8]> */
		/* 8214A654h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8214A654h case   13:*/		return 0x8214A658;
		  /* 8214A658h */ case   14:  		/* cmplw CR6, R4, R11 */
		/* 8214A658h case   14:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8214A658h case   14:*/		return 0x8214A65C;
		  /* 8214A65Ch */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 8214A65Ch case   15:*/		if ( !regs.CR[6].gt ) { return 0x8214A66C;  }
		/* 8214A65Ch case   15:*/		return 0x8214A660;
		  /* 8214A660h */ case   16:  		/* mr R5, R29 */
		/* 8214A660h case   16:*/		regs.R5 = regs.R29;
		/* 8214A660h case   16:*/		return 0x8214A664;
		  /* 8214A664h */ case   17:  		/* mr R3, R30 */
		/* 8214A664h case   17:*/		regs.R3 = regs.R30;
		/* 8214A664h case   17:*/		return 0x8214A668;
		  /* 8214A668h */ case   18:  		/* bl -15952 */
		/* 8214A668h case   18:*/		regs.LR = 0x8214A66C; return 0x82146818;
		/* 8214A668h case   18:*/		return 0x8214A66C;
	}
	return 0x8214A66C;
} // Block from 8214A620h-8214A66Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214A66Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A66C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A66C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A66C);
		  /* 8214A66Ch */ case    0:  		/* stw R31, <#[R30 + 4]> */
		/* 8214A66Ch case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A66Ch case    0:*/		return 0x8214A670;
		  /* 8214A670h */ case    1:  		/* lwz R3, <#[R29]> */
		/* 8214A670h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8214A670h case    1:*/		return 0x8214A674;
	}
	return 0x8214A674;
} // Block from 8214A66Ch-8214A674h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A674);
		  /* 8214A674h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214A674h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214A674h case    0:*/		return 0x8214A678;
		  /* 8214A678h */ case    1:  		/* b -758732 */
		/* 8214A678h case    1:*/		return 0x820912AC;
		/* 8214A678h case    1:*/		return 0x8214A67C;
		  /* 8214A67Ch */ case    2:  		/* nop */
		/* 8214A67Ch case    2:*/		cpu::op::nop();
		/* 8214A67Ch case    2:*/		return 0x8214A680;
	}
	return 0x8214A680;
} // Block from 8214A674h-8214A680h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214A680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A680);
		  /* 8214A680h */ case    0:  		/* mfspr R12, LR */
		/* 8214A680h case    0:*/		regs.R12 = regs.LR;
		/* 8214A680h case    0:*/		return 0x8214A684;
		  /* 8214A684h */ case    1:  		/* bl -758824 */
		/* 8214A684h case    1:*/		regs.LR = 0x8214A688; return 0x8209125C;
		/* 8214A684h case    1:*/		return 0x8214A688;
		  /* 8214A688h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214A688h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214A688h case    2:*/		return 0x8214A68C;
		  /* 8214A68Ch */ case    3:  		/* mr R11, R3 */
		/* 8214A68Ch case    3:*/		regs.R11 = regs.R3;
		/* 8214A68Ch case    3:*/		return 0x8214A690;
		  /* 8214A690h */ case    4:  		/* addi R29, R3, 144 */
		/* 8214A690h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x90);
		/* 8214A690h case    4:*/		return 0x8214A694;
		  /* 8214A694h */ case    5:  		/* lwz R3, <#[R3 + 144]> */
		/* 8214A694h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A694h case    5:*/		return 0x8214A698;
		  /* 8214A698h */ case    6:  		/* mr R31, R4 */
		/* 8214A698h case    6:*/		regs.R31 = regs.R4;
		/* 8214A698h case    6:*/		return 0x8214A69C;
		  /* 8214A69Ch */ case    7:  		/* cmpwi CR6, R3, 0 */
		/* 8214A69Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A69Ch case    7:*/		return 0x8214A6A0;
		  /* 8214A6A0h */ case    8:  		/* bc 12, CR6_LT, 52 */
		/* 8214A6A0h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214A6D4;  }
		/* 8214A6A0h case    8:*/		return 0x8214A6A4;
		  /* 8214A6A4h */ case    9:  		/* lwz R30, <#[R11 + 120]> */
		/* 8214A6A4h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000078) );
		/* 8214A6A4h case    9:*/		return 0x8214A6A8;
		  /* 8214A6A8h */ case   10:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214A6A8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A6A8h case   10:*/		return 0x8214A6AC;
		  /* 8214A6ACh */ case   11:  		/* cmplw CR6, R11, R4 */
		/* 8214A6ACh case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A6ACh case   11:*/		return 0x8214A6B0;
		  /* 8214A6B0h */ case   12:  		/* bc 12, CR6_GT, 36 */
		/* 8214A6B0h case   12:*/		if ( regs.CR[6].gt ) { return 0x8214A6D4;  }
		/* 8214A6B0h case   12:*/		return 0x8214A6B4;
		  /* 8214A6B4h */ case   13:  		/* lwz R11, <#[R30 + 8]> */
		/* 8214A6B4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8214A6B4h case   13:*/		return 0x8214A6B8;
		  /* 8214A6B8h */ case   14:  		/* cmplw CR6, R4, R11 */
		/* 8214A6B8h case   14:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8214A6B8h case   14:*/		return 0x8214A6BC;
		  /* 8214A6BCh */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 8214A6BCh case   15:*/		if ( !regs.CR[6].gt ) { return 0x8214A6CC;  }
		/* 8214A6BCh case   15:*/		return 0x8214A6C0;
		  /* 8214A6C0h */ case   16:  		/* mr R5, R29 */
		/* 8214A6C0h case   16:*/		regs.R5 = regs.R29;
		/* 8214A6C0h case   16:*/		return 0x8214A6C4;
		  /* 8214A6C4h */ case   17:  		/* mr R3, R30 */
		/* 8214A6C4h case   17:*/		regs.R3 = regs.R30;
		/* 8214A6C4h case   17:*/		return 0x8214A6C8;
		  /* 8214A6C8h */ case   18:  		/* bl -15904 */
		/* 8214A6C8h case   18:*/		regs.LR = 0x8214A6CC; return 0x821468A8;
		/* 8214A6C8h case   18:*/		return 0x8214A6CC;
	}
	return 0x8214A6CC;
} // Block from 8214A680h-8214A6CCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214A6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A6CC);
		  /* 8214A6CCh */ case    0:  		/* stw R31, <#[R30 + 4]> */
		/* 8214A6CCh case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A6CCh case    0:*/		return 0x8214A6D0;
		  /* 8214A6D0h */ case    1:  		/* lwz R3, <#[R29]> */
		/* 8214A6D0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8214A6D0h case    1:*/		return 0x8214A6D4;
	}
	return 0x8214A6D4;
} // Block from 8214A6CCh-8214A6D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A6D4);
		  /* 8214A6D4h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214A6D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214A6D4h case    0:*/		return 0x8214A6D8;
		  /* 8214A6D8h */ case    1:  		/* b -758828 */
		/* 8214A6D8h case    1:*/		return 0x820912AC;
		/* 8214A6D8h case    1:*/		return 0x8214A6DC;
		  /* 8214A6DCh */ case    2:  		/* nop */
		/* 8214A6DCh case    2:*/		cpu::op::nop();
		/* 8214A6DCh case    2:*/		return 0x8214A6E0;
	}
	return 0x8214A6E0;
} // Block from 8214A6D4h-8214A6E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214A6E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A6E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A6E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A6E0);
		  /* 8214A6E0h */ case    0:  		/* mfspr R12, LR */
		/* 8214A6E0h case    0:*/		regs.R12 = regs.LR;
		/* 8214A6E0h case    0:*/		return 0x8214A6E4;
		  /* 8214A6E4h */ case    1:  		/* bl -758936 */
		/* 8214A6E4h case    1:*/		regs.LR = 0x8214A6E8; return 0x8209124C;
		/* 8214A6E4h case    1:*/		return 0x8214A6E8;
		  /* 8214A6E8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214A6E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214A6E8h case    2:*/		return 0x8214A6EC;
		  /* 8214A6ECh */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214A6ECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A6ECh case    3:*/		return 0x8214A6F0;
		  /* 8214A6F0h */ case    4:  		/* mr R28, R3 */
		/* 8214A6F0h case    4:*/		regs.R28 = regs.R3;
		/* 8214A6F0h case    4:*/		return 0x8214A6F4;
		  /* 8214A6F4h */ case    5:  		/* mr R31, R4 */
		/* 8214A6F4h case    5:*/		regs.R31 = regs.R4;
		/* 8214A6F4h case    5:*/		return 0x8214A6F8;
		  /* 8214A6F8h */ case    6:  		/* mr R26, R5 */
		/* 8214A6F8h case    6:*/		regs.R26 = regs.R5;
		/* 8214A6F8h case    6:*/		return 0x8214A6FC;
		  /* 8214A6FCh */ case    7:  		/* mr R25, R6 */
		/* 8214A6FCh case    7:*/		regs.R25 = regs.R6;
		/* 8214A6FCh case    7:*/		return 0x8214A700;
		  /* 8214A700h */ case    8:  		/* addi R27, R3, 144 */
		/* 8214A700h case    8:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x90);
		/* 8214A700h case    8:*/		return 0x8214A704;
		  /* 8214A704h */ case    9:  		/* cmpwi CR6, R11, 0 */
		/* 8214A704h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A704h case    9:*/		return 0x8214A708;
		  /* 8214A708h */ case   10:  		/* bc 12, CR6_LT, 96 */
		/* 8214A708h case   10:*/		if ( regs.CR[6].lt ) { return 0x8214A768;  }
		/* 8214A708h case   10:*/		return 0x8214A70C;
		  /* 8214A70Ch */ case   11:  		/* lwz R30, <#[R3 + 120]> */
		/* 8214A70Ch case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000078) );
		/* 8214A70Ch case   11:*/		return 0x8214A710;
		  /* 8214A710h */ case   12:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214A710h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A710h case   12:*/		return 0x8214A714;
		  /* 8214A714h */ case   13:  		/* cmplw CR6, R11, R4 */
		/* 8214A714h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A714h case   13:*/		return 0x8214A718;
		  /* 8214A718h */ case   14:  		/* bc 12, CR6_GT, 52 */
		/* 8214A718h case   14:*/		if ( regs.CR[6].gt ) { return 0x8214A74C;  }
		/* 8214A718h case   14:*/		return 0x8214A71C;
		  /* 8214A71Ch */ case   15:  		/* lwz R11, <#[R30 + 8]> */
		/* 8214A71Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8214A71Ch case   15:*/		return 0x8214A720;
		  /* 8214A720h */ case   16:  		/* addi R29, R4, 1 */
		/* 8214A720h case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R4,0x1);
		/* 8214A720h case   16:*/		return 0x8214A724;
		  /* 8214A724h */ case   17:  		/* cmplw CR6, R29, R11 */
		/* 8214A724h case   17:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8214A724h case   17:*/		return 0x8214A728;
		  /* 8214A728h */ case   18:  		/* bc 4, CR6_GT, 20 */
		/* 8214A728h case   18:*/		if ( !regs.CR[6].gt ) { return 0x8214A73C;  }
		/* 8214A728h case   18:*/		return 0x8214A72C;
		  /* 8214A72Ch */ case   19:  		/* mr R5, R27 */
		/* 8214A72Ch case   19:*/		regs.R5 = regs.R27;
		/* 8214A72Ch case   19:*/		return 0x8214A730;
		  /* 8214A730h */ case   20:  		/* mr R4, R29 */
		/* 8214A730h case   20:*/		regs.R4 = regs.R29;
		/* 8214A730h case   20:*/		return 0x8214A734;
		  /* 8214A734h */ case   21:  		/* mr R3, R30 */
		/* 8214A734h case   21:*/		regs.R3 = regs.R30;
		/* 8214A734h case   21:*/		return 0x8214A738;
		  /* 8214A738h */ case   22:  		/* bl -16016 */
		/* 8214A738h case   22:*/		regs.LR = 0x8214A73C; return 0x821468A8;
		/* 8214A738h case   22:*/		return 0x8214A73C;
	}
	return 0x8214A73C;
} // Block from 8214A6E0h-8214A73Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8214A73Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A73C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A73C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A73C);
		  /* 8214A73Ch */ case    0:  		/* stw R29, <#[R30 + 4]> */
		/* 8214A73Ch case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A73Ch case    0:*/		return 0x8214A740;
		  /* 8214A740h */ case    1:  		/* lwz R11, <#[R27]> */
		/* 8214A740h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8214A740h case    1:*/		return 0x8214A744;
		  /* 8214A744h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214A744h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A744h case    2:*/		return 0x8214A748;
		  /* 8214A748h */ case    3:  		/* bc 12, CR6_LT, 32 */
		/* 8214A748h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214A768;  }
		/* 8214A748h case    3:*/		return 0x8214A74C;
	}
	return 0x8214A74C;
} // Block from 8214A73Ch-8214A74Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A74C);
		  /* 8214A74Ch */ case    0:  		/* lwz R10, <#[R28 + 120]> */
		/* 8214A74Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000078) );
		/* 8214A74Ch case    0:*/		return 0x8214A750;
		  /* 8214A750h */ case    1:  		/* mulli R11, R31, 24 */
		/* 8214A750h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x18);
		/* 8214A750h case    1:*/		return 0x8214A754;
		  /* 8214A754h */ case    2:  		/* lwz R10, <#[R10]> */
		/* 8214A754h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8214A754h case    2:*/		return 0x8214A758;
		  /* 8214A758h */ case    3:  		/* add R11, R11, R10 */
		/* 8214A758h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214A758h case    3:*/		return 0x8214A75C;
		  /* 8214A75Ch */ case    4:  		/* stw R31, <#[R11]> */
		/* 8214A75Ch case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8214A75Ch case    4:*/		return 0x8214A760;
		  /* 8214A760h */ case    5:  		/* stw R26, <#[R11 + 4]> */
		/* 8214A760h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x00000004) );
		/* 8214A760h case    5:*/		return 0x8214A764;
		  /* 8214A764h */ case    6:  		/* stw R25, <#[R11 + 8]> */
		/* 8214A764h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000008) );
		/* 8214A764h case    6:*/		return 0x8214A768;
	}
	return 0x8214A768;
} // Block from 8214A74Ch-8214A768h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214A768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A768);
		  /* 8214A768h */ case    0:  		/* addi R1, R1, 144 */
		/* 8214A768h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214A768h case    0:*/		return 0x8214A76C;
		  /* 8214A76Ch */ case    1:  		/* b -758992 */
		/* 8214A76Ch case    1:*/		return 0x8209129C;
		/* 8214A76Ch case    1:*/		return 0x8214A770;
	}
	return 0x8214A770;
} // Block from 8214A768h-8214A770h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A770);
		  /* 8214A770h */ case    0:  		/* mfspr R12, LR */
		/* 8214A770h case    0:*/		regs.R12 = regs.LR;
		/* 8214A770h case    0:*/		return 0x8214A774;
		  /* 8214A774h */ case    1:  		/* bl -759076 */
		/* 8214A774h case    1:*/		regs.LR = 0x8214A778; return 0x82091250;
		/* 8214A774h case    1:*/		return 0x8214A778;
		  /* 8214A778h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214A778h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214A778h case    2:*/		return 0x8214A77C;
		  /* 8214A77Ch */ case    3:  		/* mr R28, R3 */
		/* 8214A77Ch case    3:*/		regs.R28 = regs.R3;
		/* 8214A77Ch case    3:*/		return 0x8214A780;
		  /* 8214A780h */ case    4:  		/* addi R27, R3, 144 */
		/* 8214A780h case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x90);
		/* 8214A780h case    4:*/		return 0x8214A784;
		  /* 8214A784h */ case    5:  		/* lwz R3, <#[R3 + 144]> */
		/* 8214A784h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A784h case    5:*/		return 0x8214A788;
		  /* 8214A788h */ case    6:  		/* mr R30, R4 */
		/* 8214A788h case    6:*/		regs.R30 = regs.R4;
		/* 8214A788h case    6:*/		return 0x8214A78C;
		  /* 8214A78Ch */ case    7:  		/* mr R26, R5 */
		/* 8214A78Ch case    7:*/		regs.R26 = regs.R5;
		/* 8214A78Ch case    7:*/		return 0x8214A790;
		  /* 8214A790h */ case    8:  		/* cmpwi CR6, R3, 0 */
		/* 8214A790h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A790h case    8:*/		return 0x8214A794;
		  /* 8214A794h */ case    9:  		/* bc 12, CR6_LT, 140 */
		/* 8214A794h case    9:*/		if ( regs.CR[6].lt ) { return 0x8214A820;  }
		/* 8214A794h case    9:*/		return 0x8214A798;
		  /* 8214A798h */ case   10:  		/* lwz R31, <#[R28 + 120]> */
		/* 8214A798h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000078) );
		/* 8214A798h case   10:*/		return 0x8214A79C;
		  /* 8214A79Ch */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214A79Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214A79Ch case   11:*/		return 0x8214A7A0;
		  /* 8214A7A0h */ case   12:  		/* cmplw CR6, R11, R4 */
		/* 8214A7A0h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A7A0h case   12:*/		return 0x8214A7A4;
		  /* 8214A7A4h */ case   13:  		/* bc 12, CR6_GT, 52 */
		/* 8214A7A4h case   13:*/		if ( regs.CR[6].gt ) { return 0x8214A7D8;  }
		/* 8214A7A4h case   13:*/		return 0x8214A7A8;
		  /* 8214A7A8h */ case   14:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214A7A8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214A7A8h case   14:*/		return 0x8214A7AC;
		  /* 8214A7ACh */ case   15:  		/* addi R29, R4, 1 */
		/* 8214A7ACh case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R4,0x1);
		/* 8214A7ACh case   15:*/		return 0x8214A7B0;
		  /* 8214A7B0h */ case   16:  		/* cmplw CR6, R29, R11 */
		/* 8214A7B0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8214A7B0h case   16:*/		return 0x8214A7B4;
		  /* 8214A7B4h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 8214A7B4h case   17:*/		if ( !regs.CR[6].gt ) { return 0x8214A7C8;  }
		/* 8214A7B4h case   17:*/		return 0x8214A7B8;
		  /* 8214A7B8h */ case   18:  		/* mr R5, R27 */
		/* 8214A7B8h case   18:*/		regs.R5 = regs.R27;
		/* 8214A7B8h case   18:*/		return 0x8214A7BC;
		  /* 8214A7BCh */ case   19:  		/* mr R4, R29 */
		/* 8214A7BCh case   19:*/		regs.R4 = regs.R29;
		/* 8214A7BCh case   19:*/		return 0x8214A7C0;
		  /* 8214A7C0h */ case   20:  		/* mr R3, R31 */
		/* 8214A7C0h case   20:*/		regs.R3 = regs.R31;
		/* 8214A7C0h case   20:*/		return 0x8214A7C4;
		  /* 8214A7C4h */ case   21:  		/* bl -16156 */
		/* 8214A7C4h case   21:*/		regs.LR = 0x8214A7C8; return 0x821468A8;
		/* 8214A7C4h case   21:*/		return 0x8214A7C8;
	}
	return 0x8214A7C8;
} // Block from 8214A770h-8214A7C8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214A7C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A7C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A7C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A7C8);
		  /* 8214A7C8h */ case    0:  		/* stw R29, <#[R31 + 4]> */
		/* 8214A7C8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 8214A7C8h case    0:*/		return 0x8214A7CC;
		  /* 8214A7CCh */ case    1:  		/* lwz R3, <#[R27]> */
		/* 8214A7CCh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8214A7CCh case    1:*/		return 0x8214A7D0;
		  /* 8214A7D0h */ case    2:  		/* cmpwi CR6, R3, 0 */
		/* 8214A7D0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A7D0h case    2:*/		return 0x8214A7D4;
		  /* 8214A7D4h */ case    3:  		/* bc 12, CR6_LT, 76 */
		/* 8214A7D4h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214A820;  }
		/* 8214A7D4h case    3:*/		return 0x8214A7D8;
	}
	return 0x8214A7D8;
} // Block from 8214A7C8h-8214A7D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A7D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A7D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A7D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A7D8);
		  /* 8214A7D8h */ case    0:  		/* lwz R10, <#[R28 + 120]> */
		/* 8214A7D8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000078) );
		/* 8214A7D8h case    0:*/		return 0x8214A7DC;
		  /* 8214A7DCh */ case    1:  		/* mulli R11, R30, 24 */
		/* 8214A7DCh case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0x18);
		/* 8214A7DCh case    1:*/		return 0x8214A7E0;
		  /* 8214A7E0h */ case    2:  		/* lwz R10, <#[R10]> */
		/* 8214A7E0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8214A7E0h case    2:*/		return 0x8214A7E4;
		  /* 8214A7E4h */ case    3:  		/* add R11, R11, R10 */
		/* 8214A7E4h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214A7E4h case    3:*/		return 0x8214A7E8;
		  /* 8214A7E8h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 8214A7E8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8214A7E8h case    4:*/		return 0x8214A7EC;
		  /* 8214A7ECh */ case    5:  		/* stw R30, <#[R11]> */
		/* 8214A7ECh case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8214A7ECh case    5:*/		return 0x8214A7F0;
		  /* 8214A7F0h */ case    6:  		/* cmplw CR6, R10, R26 */
		/* 8214A7F0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 8214A7F0h case    6:*/		return 0x8214A7F4;
		  /* 8214A7F4h */ case    7:  		/* bc 12, CR6_GT, 40 */
		/* 8214A7F4h case    7:*/		if ( regs.CR[6].gt ) { return 0x8214A81C;  }
		/* 8214A7F4h case    7:*/		return 0x8214A7F8;
		  /* 8214A7F8h */ case    8:  		/* lwz R10, <#[R11 + 20]> */
		/* 8214A7F8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 8214A7F8h case    8:*/		return 0x8214A7FC;
		  /* 8214A7FCh */ case    9:  		/* addi R31, R11, 12 */
		/* 8214A7FCh case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xC);
		/* 8214A7FCh case    9:*/		return 0x8214A800;
		  /* 8214A800h */ case   10:  		/* cmplw CR6, R26, R10 */
		/* 8214A800h case   10:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R10);
		/* 8214A800h case   10:*/		return 0x8214A804;
		  /* 8214A804h */ case   11:  		/* bc 4, CR6_GT, 20 */
		/* 8214A804h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8214A818;  }
		/* 8214A804h case   11:*/		return 0x8214A808;
		  /* 8214A808h */ case   12:  		/* mr R5, R27 */
		/* 8214A808h case   12:*/		regs.R5 = regs.R27;
		/* 8214A808h case   12:*/		return 0x8214A80C;
		  /* 8214A80Ch */ case   13:  		/* mr R4, R26 */
		/* 8214A80Ch case   13:*/		regs.R4 = regs.R26;
		/* 8214A80Ch case   13:*/		return 0x8214A810;
		  /* 8214A810h */ case   14:  		/* mr R3, R31 */
		/* 8214A810h case   14:*/		regs.R3 = regs.R31;
		/* 8214A810h case   14:*/		return 0x8214A814;
		  /* 8214A814h */ case   15:  		/* bl -16380 */
		/* 8214A814h case   15:*/		regs.LR = 0x8214A818; return 0x82146818;
		/* 8214A814h case   15:*/		return 0x8214A818;
	}
	return 0x8214A818;
} // Block from 8214A7D8h-8214A818h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214A818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A818);
		  /* 8214A818h */ case    0:  		/* stw R26, <#[R31 + 4]> */
		/* 8214A818h case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000004) );
		/* 8214A818h case    0:*/		return 0x8214A81C;
	}
	return 0x8214A81C;
} // Block from 8214A818h-8214A81Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214A81Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A81C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A81C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A81C);
		  /* 8214A81Ch */ case    0:  		/* lwz R3, <#[R27]> */
		/* 8214A81Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8214A81Ch case    0:*/		return 0x8214A820;
	}
	return 0x8214A820;
} // Block from 8214A81Ch-8214A820h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214A820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A820);
		  /* 8214A820h */ case    0:  		/* addi R1, R1, 144 */
		/* 8214A820h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214A820h case    0:*/		return 0x8214A824;
		  /* 8214A824h */ case    1:  		/* b -759172 */
		/* 8214A824h case    1:*/		return 0x820912A0;
		/* 8214A824h case    1:*/		return 0x8214A828;
	}
	return 0x8214A828;
} // Block from 8214A820h-8214A828h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A828);
		  /* 8214A828h */ case    0:  		/* mfspr R12, LR */
		/* 8214A828h case    0:*/		regs.R12 = regs.LR;
		/* 8214A828h case    0:*/		return 0x8214A82C;
		  /* 8214A82Ch */ case    1:  		/* bl -759272 */
		/* 8214A82Ch case    1:*/		regs.LR = 0x8214A830; return 0x82091244;
		/* 8214A82Ch case    1:*/		return 0x8214A830;
		  /* 8214A830h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8214A830h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8214A830h case    2:*/		return 0x8214A834;
		  /* 8214A834h */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214A834h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A834h case    3:*/		return 0x8214A838;
		  /* 8214A838h */ case    4:  		/* mr R28, R3 */
		/* 8214A838h case    4:*/		regs.R28 = regs.R3;
		/* 8214A838h case    4:*/		return 0x8214A83C;
		  /* 8214A83Ch */ case    5:  		/* mr R30, R4 */
		/* 8214A83Ch case    5:*/		regs.R30 = regs.R4;
		/* 8214A83Ch case    5:*/		return 0x8214A840;
		  /* 8214A840h */ case    6:  		/* mr R29, R5 */
		/* 8214A840h case    6:*/		regs.R29 = regs.R5;
		/* 8214A840h case    6:*/		return 0x8214A844;
		  /* 8214A844h */ case    7:  		/* mr R25, R6 */
		/* 8214A844h case    7:*/		regs.R25 = regs.R6;
		/* 8214A844h case    7:*/		return 0x8214A848;
		  /* 8214A848h */ case    8:  		/* mr R24, R7 */
		/* 8214A848h case    8:*/		regs.R24 = regs.R7;
		/* 8214A848h case    8:*/		return 0x8214A84C;
		  /* 8214A84Ch */ case    9:  		/* mr R23, R8 */
		/* 8214A84Ch case    9:*/		regs.R23 = regs.R8;
		/* 8214A84Ch case    9:*/		return 0x8214A850;
		  /* 8214A850h */ case   10:  		/* addi R26, R3, 144 */
		/* 8214A850h case   10:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x90);
		/* 8214A850h case   10:*/		return 0x8214A854;
		  /* 8214A854h */ case   11:  		/* cmpwi CR6, R11, 0 */
		/* 8214A854h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A854h case   11:*/		return 0x8214A858;
		  /* 8214A858h */ case   12:  		/* bc 12, CR6_LT, 180 */
		/* 8214A858h case   12:*/		if ( regs.CR[6].lt ) { return 0x8214A90C;  }
		/* 8214A858h case   12:*/		return 0x8214A85C;
		  /* 8214A85Ch */ case   13:  		/* lwz R31, <#[R3 + 120]> */
		/* 8214A85Ch case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000078) );
		/* 8214A85Ch case   13:*/		return 0x8214A860;
		  /* 8214A860h */ case   14:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214A860h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214A860h case   14:*/		return 0x8214A864;
		  /* 8214A864h */ case   15:  		/* cmplw CR6, R11, R4 */
		/* 8214A864h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A864h case   15:*/		return 0x8214A868;
		  /* 8214A868h */ case   16:  		/* bc 12, CR6_GT, 52 */
		/* 8214A868h case   16:*/		if ( regs.CR[6].gt ) { return 0x8214A89C;  }
		/* 8214A868h case   16:*/		return 0x8214A86C;
		  /* 8214A86Ch */ case   17:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214A86Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214A86Ch case   17:*/		return 0x8214A870;
		  /* 8214A870h */ case   18:  		/* addi R27, R4, 1 */
		/* 8214A870h case   18:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R4,0x1);
		/* 8214A870h case   18:*/		return 0x8214A874;
		  /* 8214A874h */ case   19:  		/* cmplw CR6, R27, R11 */
		/* 8214A874h case   19:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 8214A874h case   19:*/		return 0x8214A878;
		  /* 8214A878h */ case   20:  		/* bc 4, CR6_GT, 20 */
		/* 8214A878h case   20:*/		if ( !regs.CR[6].gt ) { return 0x8214A88C;  }
		/* 8214A878h case   20:*/		return 0x8214A87C;
		  /* 8214A87Ch */ case   21:  		/* mr R5, R26 */
		/* 8214A87Ch case   21:*/		regs.R5 = regs.R26;
		/* 8214A87Ch case   21:*/		return 0x8214A880;
		  /* 8214A880h */ case   22:  		/* mr R4, R27 */
		/* 8214A880h case   22:*/		regs.R4 = regs.R27;
		/* 8214A880h case   22:*/		return 0x8214A884;
		  /* 8214A884h */ case   23:  		/* mr R3, R31 */
		/* 8214A884h case   23:*/		regs.R3 = regs.R31;
		/* 8214A884h case   23:*/		return 0x8214A888;
		  /* 8214A888h */ case   24:  		/* bl -16352 */
		/* 8214A888h case   24:*/		regs.LR = 0x8214A88C; return 0x821468A8;
		/* 8214A888h case   24:*/		return 0x8214A88C;
	}
	return 0x8214A88C;
} // Block from 8214A828h-8214A88Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8214A88Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A88C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A88C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A88C);
		  /* 8214A88Ch */ case    0:  		/* stw R27, <#[R31 + 4]> */
		/* 8214A88Ch case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000004) );
		/* 8214A88Ch case    0:*/		return 0x8214A890;
		  /* 8214A890h */ case    1:  		/* lwz R11, <#[R26]> */
		/* 8214A890h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8214A890h case    1:*/		return 0x8214A894;
		  /* 8214A894h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214A894h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A894h case    2:*/		return 0x8214A898;
		  /* 8214A898h */ case    3:  		/* bc 12, CR6_LT, 116 */
		/* 8214A898h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214A90C;  }
		/* 8214A898h case    3:*/		return 0x8214A89C;
	}
	return 0x8214A89C;
} // Block from 8214A88Ch-8214A89Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A89Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A89C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A89C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A89C);
		  /* 8214A89Ch */ case    0:  		/* lwz R10, <#[R28 + 120]> */
		/* 8214A89Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000078) );
		/* 8214A89Ch case    0:*/		return 0x8214A8A0;
		  /* 8214A8A0h */ case    1:  		/* mulli R11, R30, 24 */
		/* 8214A8A0h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0x18);
		/* 8214A8A0h case    1:*/		return 0x8214A8A4;
		  /* 8214A8A4h */ case    2:  		/* lwz R10, <#[R10]> */
		/* 8214A8A4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8214A8A4h case    2:*/		return 0x8214A8A8;
		  /* 8214A8A8h */ case    3:  		/* add R31, R11, R10 */
		/* 8214A8A8h case    3:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 8214A8A8h case    3:*/		return 0x8214A8AC;
		  /* 8214A8ACh */ case    4:  		/* stwx R30, <#[R11 + R10]> */
		/* 8214A8ACh case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8214A8ACh case    4:*/		return 0x8214A8B0;
		  /* 8214A8B0h */ case    5:  		/* lwz R11, <#[R31 + 16]> */
		/* 8214A8B0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8214A8B0h case    5:*/		return 0x8214A8B4;
		  /* 8214A8B4h */ case    6:  		/* cmplw CR6, R11, R29 */
		/* 8214A8B4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 8214A8B4h case    6:*/		return 0x8214A8B8;
		  /* 8214A8B8h */ case    7:  		/* bc 12, CR6_GT, 56 */
		/* 8214A8B8h case    7:*/		if ( regs.CR[6].gt ) { return 0x8214A8F0;  }
		/* 8214A8B8h case    7:*/		return 0x8214A8BC;
		  /* 8214A8BCh */ case    8:  		/* lwz R11, <#[R31 + 20]> */
		/* 8214A8BCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8214A8BCh case    8:*/		return 0x8214A8C0;
		  /* 8214A8C0h */ case    9:  		/* addi R28, R29, 1 */
		/* 8214A8C0h case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x1);
		/* 8214A8C0h case    9:*/		return 0x8214A8C4;
		  /* 8214A8C4h */ case   10:  		/* addi R30, R31, 12 */
		/* 8214A8C4h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xC);
		/* 8214A8C4h case   10:*/		return 0x8214A8C8;
		  /* 8214A8C8h */ case   11:  		/* cmplw CR6, R28, R11 */
		/* 8214A8C8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8214A8C8h case   11:*/		return 0x8214A8CC;
		  /* 8214A8CCh */ case   12:  		/* bc 4, CR6_GT, 20 */
		/* 8214A8CCh case   12:*/		if ( !regs.CR[6].gt ) { return 0x8214A8E0;  }
		/* 8214A8CCh case   12:*/		return 0x8214A8D0;
		  /* 8214A8D0h */ case   13:  		/* mr R5, R26 */
		/* 8214A8D0h case   13:*/		regs.R5 = regs.R26;
		/* 8214A8D0h case   13:*/		return 0x8214A8D4;
		  /* 8214A8D4h */ case   14:  		/* mr R4, R28 */
		/* 8214A8D4h case   14:*/		regs.R4 = regs.R28;
		/* 8214A8D4h case   14:*/		return 0x8214A8D8;
		  /* 8214A8D8h */ case   15:  		/* mr R3, R30 */
		/* 8214A8D8h case   15:*/		regs.R3 = regs.R30;
		/* 8214A8D8h case   15:*/		return 0x8214A8DC;
		  /* 8214A8DCh */ case   16:  		/* bl -16580 */
		/* 8214A8DCh case   16:*/		regs.LR = 0x8214A8E0; return 0x82146818;
		/* 8214A8DCh case   16:*/		return 0x8214A8E0;
	}
	return 0x8214A8E0;
} // Block from 8214A89Ch-8214A8E0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214A8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A8E0);
		  /* 8214A8E0h */ case    0:  		/* stw R28, <#[R30 + 4]> */
		/* 8214A8E0h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A8E0h case    0:*/		return 0x8214A8E4;
		  /* 8214A8E4h */ case    1:  		/* lwz R11, <#[R26]> */
		/* 8214A8E4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8214A8E4h case    1:*/		return 0x8214A8E8;
		  /* 8214A8E8h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214A8E8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214A8E8h case    2:*/		return 0x8214A8EC;
		  /* 8214A8ECh */ case    3:  		/* bc 12, CR6_LT, 32 */
		/* 8214A8ECh case    3:*/		if ( regs.CR[6].lt ) { return 0x8214A90C;  }
		/* 8214A8ECh case    3:*/		return 0x8214A8F0;
	}
	return 0x8214A8F0;
} // Block from 8214A8E0h-8214A8F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A8F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A8F0);
		  /* 8214A8F0h */ case    0:  		/* lwz R10, <#[R31 + 12]> */
		/* 8214A8F0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214A8F0h case    0:*/		return 0x8214A8F4;
		  /* 8214A8F4h */ case    1:  		/* mulli R11, R29, 28 */
		/* 8214A8F4h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R29,0x1C);
		/* 8214A8F4h case    1:*/		return 0x8214A8F8;
		  /* 8214A8F8h */ case    2:  		/* add R11, R11, R10 */
		/* 8214A8F8h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214A8F8h case    2:*/		return 0x8214A8FC;
		  /* 8214A8FCh */ case    3:  		/* stw R29, <#[R11]> */
		/* 8214A8FCh case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8214A8FCh case    3:*/		return 0x8214A900;
		  /* 8214A900h */ case    4:  		/* stw R25, <#[R11 + 4]> */
		/* 8214A900h case    4:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000004) );
		/* 8214A900h case    4:*/		return 0x8214A904;
		  /* 8214A904h */ case    5:  		/* stw R24, <#[R11 + 8]> */
		/* 8214A904h case    5:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000008) );
		/* 8214A904h case    5:*/		return 0x8214A908;
		  /* 8214A908h */ case    6:  		/* stw R23, <#[R11 + 12]> */
		/* 8214A908h case    6:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x0000000C) );
		/* 8214A908h case    6:*/		return 0x8214A90C;
	}
	return 0x8214A90C;
} // Block from 8214A8F0h-8214A90Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214A90Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A90C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A90C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A90C);
		  /* 8214A90Ch */ case    0:  		/* addi R1, R1, 160 */
		/* 8214A90Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8214A90Ch case    0:*/		return 0x8214A910;
		  /* 8214A910h */ case    1:  		/* b -759420 */
		/* 8214A910h case    1:*/		return 0x82091294;
		/* 8214A910h case    1:*/		return 0x8214A914;
		  /* 8214A914h */ case    2:  		/* nop */
		/* 8214A914h case    2:*/		cpu::op::nop();
		/* 8214A914h case    2:*/		return 0x8214A918;
	}
	return 0x8214A918;
} // Block from 8214A90Ch-8214A918h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214A918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A918);
		  /* 8214A918h */ case    0:  		/* mfspr R12, LR */
		/* 8214A918h case    0:*/		regs.R12 = regs.LR;
		/* 8214A918h case    0:*/		return 0x8214A91C;
		  /* 8214A91Ch */ case    1:  		/* bl -759504 */
		/* 8214A91Ch case    1:*/		regs.LR = 0x8214A920; return 0x8209124C;
		/* 8214A91Ch case    1:*/		return 0x8214A920;
		  /* 8214A920h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214A920h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214A920h case    2:*/		return 0x8214A924;
		  /* 8214A924h */ case    3:  		/* mr R28, R3 */
		/* 8214A924h case    3:*/		regs.R28 = regs.R3;
		/* 8214A924h case    3:*/		return 0x8214A928;
	}
	return 0x8214A928;
} // Block from 8214A918h-8214A928h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A928h
// Function '?AddHLSLArguments@ShaderPDBBuilder@XGRAPHICS@@QAAXKPAU_D3DXSHADER_COMPILE_PARAMETERSA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A928);
		  /* 8214A928h */ case    0:  		/* addi R26, R3, 144 */
		/* 8214A928h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x90);
		/* 8214A928h case    0:*/		return 0x8214A92C;
		  /* 8214A92Ch */ case    1:  		/* lwz R3, <#[R3 + 144]> */
		/* 8214A92Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000090) );
		/* 8214A92Ch case    1:*/		return 0x8214A930;
		  /* 8214A930h */ case    2:  		/* mr R30, R4 */
		/* 8214A930h case    2:*/		regs.R30 = regs.R4;
		/* 8214A930h case    2:*/		return 0x8214A934;
		  /* 8214A934h */ case    3:  		/* mr R27, R5 */
		/* 8214A934h case    3:*/		regs.R27 = regs.R5;
		/* 8214A934h case    3:*/		return 0x8214A938;
		  /* 8214A938h */ case    4:  		/* mr R25, R6 */
		/* 8214A938h case    4:*/		regs.R25 = regs.R6;
		/* 8214A938h case    4:*/		return 0x8214A93C;
		  /* 8214A93Ch */ case    5:  		/* cmpwi CR6, R3, 0 */
		/* 8214A93Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A93Ch case    5:*/		return 0x8214A940;
		  /* 8214A940h */ case    6:  		/* bc 12, CR6_LT, 220 */
		/* 8214A940h case    6:*/		if ( regs.CR[6].lt ) { return 0x8214AA1C;  }
		/* 8214A940h case    6:*/		return 0x8214A944;
		  /* 8214A944h */ case    7:  		/* lwz R31, <#[R28 + 120]> */
		/* 8214A944h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000078) );
		/* 8214A944h case    7:*/		return 0x8214A948;
		  /* 8214A948h */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214A948h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214A948h case    8:*/		return 0x8214A94C;
		  /* 8214A94Ch */ case    9:  		/* cmplw CR6, R11, R4 */
		/* 8214A94Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214A94Ch case    9:*/		return 0x8214A950;
		  /* 8214A950h */ case   10:  		/* bc 12, CR6_GT, 52 */
		/* 8214A950h case   10:*/		if ( regs.CR[6].gt ) { return 0x8214A984;  }
		/* 8214A950h case   10:*/		return 0x8214A954;
		  /* 8214A954h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214A954h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214A954h case   11:*/		return 0x8214A958;
		  /* 8214A958h */ case   12:  		/* addi R29, R4, 1 */
		/* 8214A958h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R4,0x1);
		/* 8214A958h case   12:*/		return 0x8214A95C;
		  /* 8214A95Ch */ case   13:  		/* cmplw CR6, R29, R11 */
		/* 8214A95Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8214A95Ch case   13:*/		return 0x8214A960;
		  /* 8214A960h */ case   14:  		/* bc 4, CR6_GT, 20 */
		/* 8214A960h case   14:*/		if ( !regs.CR[6].gt ) { return 0x8214A974;  }
		/* 8214A960h case   14:*/		return 0x8214A964;
		  /* 8214A964h */ case   15:  		/* mr R5, R26 */
		/* 8214A964h case   15:*/		regs.R5 = regs.R26;
		/* 8214A964h case   15:*/		return 0x8214A968;
		  /* 8214A968h */ case   16:  		/* mr R4, R29 */
		/* 8214A968h case   16:*/		regs.R4 = regs.R29;
		/* 8214A968h case   16:*/		return 0x8214A96C;
		  /* 8214A96Ch */ case   17:  		/* mr R3, R31 */
		/* 8214A96Ch case   17:*/		regs.R3 = regs.R31;
		/* 8214A96Ch case   17:*/		return 0x8214A970;
		  /* 8214A970h */ case   18:  		/* bl -16584 */
		/* 8214A970h case   18:*/		regs.LR = 0x8214A974; return 0x821468A8;
		/* 8214A970h case   18:*/		return 0x8214A974;
	}
	return 0x8214A974;
} // Block from 8214A928h-8214A974h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214A974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A974);
		  /* 8214A974h */ case    0:  		/* stw R29, <#[R31 + 4]> */
		/* 8214A974h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 8214A974h case    0:*/		return 0x8214A978;
		  /* 8214A978h */ case    1:  		/* lwz R3, <#[R26]> */
		/* 8214A978h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 8214A978h case    1:*/		return 0x8214A97C;
		  /* 8214A97Ch */ case    2:  		/* cmpwi CR6, R3, 0 */
		/* 8214A97Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A97Ch case    2:*/		return 0x8214A980;
		  /* 8214A980h */ case    3:  		/* bc 12, CR6_LT, 156 */
		/* 8214A980h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214AA1C;  }
		/* 8214A980h case    3:*/		return 0x8214A984;
	}
	return 0x8214A984;
} // Block from 8214A974h-8214A984h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214A984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A984);
		  /* 8214A984h */ case    0:  		/* lwz R10, <#[R28 + 120]> */
		/* 8214A984h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000078) );
		/* 8214A984h case    0:*/		return 0x8214A988;
		  /* 8214A988h */ case    1:  		/* mulli R11, R30, 24 */
		/* 8214A988h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0x18);
		/* 8214A988h case    1:*/		return 0x8214A98C;
		  /* 8214A98Ch */ case    2:  		/* lwz R10, <#[R10]> */
		/* 8214A98Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8214A98Ch case    2:*/		return 0x8214A990;
		  /* 8214A990h */ case    3:  		/* add R31, R11, R10 */
		/* 8214A990h case    3:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 8214A990h case    3:*/		return 0x8214A994;
		  /* 8214A994h */ case    4:  		/* stwx R30, <#[R11 + R10]> */
		/* 8214A994h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8214A994h case    4:*/		return 0x8214A998;
		  /* 8214A998h */ case    5:  		/* lwz R11, <#[R31 + 16]> */
		/* 8214A998h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8214A998h case    5:*/		return 0x8214A99C;
		  /* 8214A99Ch */ case    6:  		/* cmplw CR6, R11, R27 */
		/* 8214A99Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8214A99Ch case    6:*/		return 0x8214A9A0;
		  /* 8214A9A0h */ case    7:  		/* bc 12, CR6_GT, 56 */
		/* 8214A9A0h case    7:*/		if ( regs.CR[6].gt ) { return 0x8214A9D8;  }
		/* 8214A9A0h case    7:*/		return 0x8214A9A4;
		  /* 8214A9A4h */ case    8:  		/* lwz R11, <#[R31 + 20]> */
		/* 8214A9A4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8214A9A4h case    8:*/		return 0x8214A9A8;
		  /* 8214A9A8h */ case    9:  		/* addi R29, R27, 1 */
		/* 8214A9A8h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x1);
		/* 8214A9A8h case    9:*/		return 0x8214A9AC;
		  /* 8214A9ACh */ case   10:  		/* addi R30, R31, 12 */
		/* 8214A9ACh case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xC);
		/* 8214A9ACh case   10:*/		return 0x8214A9B0;
		  /* 8214A9B0h */ case   11:  		/* cmplw CR6, R29, R11 */
		/* 8214A9B0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8214A9B0h case   11:*/		return 0x8214A9B4;
		  /* 8214A9B4h */ case   12:  		/* bc 4, CR6_GT, 20 */
		/* 8214A9B4h case   12:*/		if ( !regs.CR[6].gt ) { return 0x8214A9C8;  }
		/* 8214A9B4h case   12:*/		return 0x8214A9B8;
		  /* 8214A9B8h */ case   13:  		/* mr R5, R26 */
		/* 8214A9B8h case   13:*/		regs.R5 = regs.R26;
		/* 8214A9B8h case   13:*/		return 0x8214A9BC;
		  /* 8214A9BCh */ case   14:  		/* mr R4, R29 */
		/* 8214A9BCh case   14:*/		regs.R4 = regs.R29;
		/* 8214A9BCh case   14:*/		return 0x8214A9C0;
		  /* 8214A9C0h */ case   15:  		/* mr R3, R30 */
		/* 8214A9C0h case   15:*/		regs.R3 = regs.R30;
		/* 8214A9C0h case   15:*/		return 0x8214A9C4;
		  /* 8214A9C4h */ case   16:  		/* bl -16812 */
		/* 8214A9C4h case   16:*/		regs.LR = 0x8214A9C8; return 0x82146818;
		/* 8214A9C4h case   16:*/		return 0x8214A9C8;
	}
	return 0x8214A9C8;
} // Block from 8214A984h-8214A9C8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214A9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A9C8);
		  /* 8214A9C8h */ case    0:  		/* stw R29, <#[R30 + 4]> */
		/* 8214A9C8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000004) );
		/* 8214A9C8h case    0:*/		return 0x8214A9CC;
		  /* 8214A9CCh */ case    1:  		/* lwz R3, <#[R26]> */
		/* 8214A9CCh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 8214A9CCh case    1:*/		return 0x8214A9D0;
	}
	return 0x8214A9D0;
} // Block from 8214A9C8h-8214A9D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A9D0h
// Function '?SetVariableCount@ShaderPDBBuilder@XGRAPHICS@@QAAJK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A9D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A9D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A9D0);
		  /* 8214A9D0h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 8214A9D0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214A9D0h case    0:*/		return 0x8214A9D4;
		  /* 8214A9D4h */ case    1:  		/* bc 12, CR6_LT, 72 */
		/* 8214A9D4h case    1:*/		if ( regs.CR[6].lt ) { return 0x8214AA1C;  }
		/* 8214A9D4h case    1:*/		return 0x8214A9D8;
	}
	return 0x8214A9D8;
} // Block from 8214A9D0h-8214A9D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214A9D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214A9D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214A9D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214A9D8);
		  /* 8214A9D8h */ case    0:  		/* lwz R10, <#[R31 + 12]> */
		/* 8214A9D8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214A9D8h case    0:*/		return 0x8214A9DC;
		  /* 8214A9DCh */ case    1:  		/* mulli R11, R27, 28 */
		/* 8214A9DCh case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R27,0x1C);
		/* 8214A9DCh case    1:*/		return 0x8214A9E0;
		  /* 8214A9E0h */ case    2:  		/* add R11, R11, R10 */
		/* 8214A9E0h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214A9E0h case    2:*/		return 0x8214A9E4;
		  /* 8214A9E4h */ case    3:  		/* lwz R10, <#[R11 + 20]> */
		/* 8214A9E4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 8214A9E4h case    3:*/		return 0x8214A9E8;
		  /* 8214A9E8h */ case    4:  		/* stw R27, <#[R11]> */
		/* 8214A9E8h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 8214A9E8h case    4:*/		return 0x8214A9EC;
		  /* 8214A9ECh */ case    5:  		/* cmplw CR6, R10, R25 */
		/* 8214A9ECh case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R25);
		/* 8214A9ECh case    5:*/		return 0x8214A9F0;
		  /* 8214A9F0h */ case    6:  		/* bc 12, CR6_GT, 40 */
		/* 8214A9F0h case    6:*/		if ( regs.CR[6].gt ) { return 0x8214AA18;  }
		/* 8214A9F0h case    6:*/		return 0x8214A9F4;
		  /* 8214A9F4h */ case    7:  		/* lwz R10, <#[R11 + 24]> */
		/* 8214A9F4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8214A9F4h case    7:*/		return 0x8214A9F8;
		  /* 8214A9F8h */ case    8:  		/* addi R31, R11, 16 */
		/* 8214A9F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x10);
		/* 8214A9F8h case    8:*/		return 0x8214A9FC;
		  /* 8214A9FCh */ case    9:  		/* cmplw CR6, R25, R10 */
		/* 8214A9FCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R10);
		/* 8214A9FCh case    9:*/		return 0x8214AA00;
		  /* 8214AA00h */ case   10:  		/* bc 4, CR6_GT, 20 */
		/* 8214AA00h case   10:*/		if ( !regs.CR[6].gt ) { return 0x8214AA14;  }
		/* 8214AA00h case   10:*/		return 0x8214AA04;
		  /* 8214AA04h */ case   11:  		/* mr R5, R26 */
		/* 8214AA04h case   11:*/		regs.R5 = regs.R26;
		/* 8214AA04h case   11:*/		return 0x8214AA08;
		  /* 8214AA08h */ case   12:  		/* mr R4, R25 */
		/* 8214AA08h case   12:*/		regs.R4 = regs.R25;
		/* 8214AA08h case   12:*/		return 0x8214AA0C;
		  /* 8214AA0Ch */ case   13:  		/* mr R3, R31 */
		/* 8214AA0Ch case   13:*/		regs.R3 = regs.R31;
		/* 8214AA0Ch case   13:*/		return 0x8214AA10;
		  /* 8214AA10h */ case   14:  		/* bl -5720 */
		/* 8214AA10h case   14:*/		regs.LR = 0x8214AA14; return 0x821493B8;
		/* 8214AA10h case   14:*/		return 0x8214AA14;
	}
	return 0x8214AA14;
} // Block from 8214A9D8h-8214AA14h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8214AA14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AA14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AA14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AA14);
		  /* 8214AA14h */ case    0:  		/* stw R25, <#[R31 + 4]> */
		/* 8214AA14h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000004) );
		/* 8214AA14h case    0:*/		return 0x8214AA18;
	}
	return 0x8214AA18;
} // Block from 8214AA14h-8214AA18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214AA18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AA18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AA18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AA18);
		  /* 8214AA18h */ case    0:  		/* lwz R3, <#[R26]> */
		/* 8214AA18h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 8214AA18h case    0:*/		return 0x8214AA1C;
	}
	return 0x8214AA1C;
} // Block from 8214AA18h-8214AA1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214AA1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AA1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AA1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AA1C);
		  /* 8214AA1Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 8214AA1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214AA1Ch case    0:*/		return 0x8214AA20;
		  /* 8214AA20h */ case    1:  		/* b -759684 */
		/* 8214AA20h case    1:*/		return 0x8209129C;
		/* 8214AA20h case    1:*/		return 0x8214AA24;
		  /* 8214AA24h */ case    2:  		/* nop */
		/* 8214AA24h case    2:*/		cpu::op::nop();
		/* 8214AA24h case    2:*/		return 0x8214AA28;
	}
	return 0x8214AA28;
} // Block from 8214AA1Ch-8214AA28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214AA28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AA28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AA28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AA28);
		  /* 8214AA28h */ case    0:  		/* mfspr R12, LR */
		/* 8214AA28h case    0:*/		regs.R12 = regs.LR;
		/* 8214AA28h case    0:*/		return 0x8214AA2C;
		  /* 8214AA2Ch */ case    1:  		/* bl -759780 */
		/* 8214AA2Ch case    1:*/		regs.LR = 0x8214AA30; return 0x82091248;
		/* 8214AA2Ch case    1:*/		return 0x8214AA30;
	}
	return 0x8214AA30;
} // Block from 8214AA28h-8214AA30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214AA30h
// Function '?AddVfetch@ShaderPDBBuilder@XGRAPHICS@@UAAXKKKKH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AA30);
		  /* 8214AA30h */ case    0:  		/* stwu R1, <#[R1 - 160]> */
		/* 8214AA30h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8214AA30h case    0:*/		return 0x8214AA34;
		  /* 8214AA34h */ case    1:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214AA34h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214AA34h case    1:*/		return 0x8214AA38;
		  /* 8214AA38h */ case    2:  		/* mr R28, R3 */
		/* 8214AA38h case    2:*/		regs.R28 = regs.R3;
		/* 8214AA38h case    2:*/		return 0x8214AA3C;
		  /* 8214AA3Ch */ case    3:  		/* mr R30, R4 */
		/* 8214AA3Ch case    3:*/		regs.R30 = regs.R4;
		/* 8214AA3Ch case    3:*/		return 0x8214AA40;
		  /* 8214AA40h */ case    4:  		/* mr R27, R5 */
		/* 8214AA40h case    4:*/		regs.R27 = regs.R5;
		/* 8214AA40h case    4:*/		return 0x8214AA44;
		  /* 8214AA44h */ case    5:  		/* mr R25, R6 */
		/* 8214AA44h case    5:*/		regs.R25 = regs.R6;
		/* 8214AA44h case    5:*/		return 0x8214AA48;
		  /* 8214AA48h */ case    6:  		/* mr R24, R7 */
		/* 8214AA48h case    6:*/		regs.R24 = regs.R7;
		/* 8214AA48h case    6:*/		return 0x8214AA4C;
		  /* 8214AA4Ch */ case    7:  		/* addi R26, R3, 144 */
		/* 8214AA4Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x90);
		/* 8214AA4Ch case    7:*/		return 0x8214AA50;
		  /* 8214AA50h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 8214AA50h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214AA50h case    8:*/		return 0x8214AA54;
		  /* 8214AA54h */ case    9:  		/* bc 12, CR6_LT, 244 */
		/* 8214AA54h case    9:*/		if ( regs.CR[6].lt ) { return 0x8214AB48;  }
		/* 8214AA54h case    9:*/		return 0x8214AA58;
		  /* 8214AA58h */ case   10:  		/* lwz R31, <#[R3 + 120]> */
		/* 8214AA58h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000078) );
		/* 8214AA58h case   10:*/		return 0x8214AA5C;
		  /* 8214AA5Ch */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214AA5Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214AA5Ch case   11:*/		return 0x8214AA60;
		  /* 8214AA60h */ case   12:  		/* cmplw CR6, R11, R4 */
		/* 8214AA60h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214AA60h case   12:*/		return 0x8214AA64;
		  /* 8214AA64h */ case   13:  		/* bc 12, CR6_GT, 52 */
		/* 8214AA64h case   13:*/		if ( regs.CR[6].gt ) { return 0x8214AA98;  }
		/* 8214AA64h case   13:*/		return 0x8214AA68;
		  /* 8214AA68h */ case   14:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214AA68h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214AA68h case   14:*/		return 0x8214AA6C;
		  /* 8214AA6Ch */ case   15:  		/* addi R29, R4, 1 */
		/* 8214AA6Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R4,0x1);
		/* 8214AA6Ch case   15:*/		return 0x8214AA70;
		  /* 8214AA70h */ case   16:  		/* cmplw CR6, R29, R11 */
		/* 8214AA70h case   16:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8214AA70h case   16:*/		return 0x8214AA74;
		  /* 8214AA74h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 8214AA74h case   17:*/		if ( !regs.CR[6].gt ) { return 0x8214AA88;  }
		/* 8214AA74h case   17:*/		return 0x8214AA78;
		  /* 8214AA78h */ case   18:  		/* mr R5, R26 */
		/* 8214AA78h case   18:*/		regs.R5 = regs.R26;
		/* 8214AA78h case   18:*/		return 0x8214AA7C;
		  /* 8214AA7Ch */ case   19:  		/* mr R4, R29 */
		/* 8214AA7Ch case   19:*/		regs.R4 = regs.R29;
		/* 8214AA7Ch case   19:*/		return 0x8214AA80;
		  /* 8214AA80h */ case   20:  		/* mr R3, R31 */
		/* 8214AA80h case   20:*/		regs.R3 = regs.R31;
		/* 8214AA80h case   20:*/		return 0x8214AA84;
		  /* 8214AA84h */ case   21:  		/* bl -16860 */
		/* 8214AA84h case   21:*/		regs.LR = 0x8214AA88; return 0x821468A8;
		/* 8214AA84h case   21:*/		return 0x8214AA88;
	}
	return 0x8214AA88;
} // Block from 8214AA30h-8214AA88h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214AA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AA88);
		  /* 8214AA88h */ case    0:  		/* stw R29, <#[R31 + 4]> */
		/* 8214AA88h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 8214AA88h case    0:*/		return 0x8214AA8C;
		  /* 8214AA8Ch */ case    1:  		/* lwz R11, <#[R26]> */
		/* 8214AA8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8214AA8Ch case    1:*/		return 0x8214AA90;
		  /* 8214AA90h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214AA90h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214AA90h case    2:*/		return 0x8214AA94;
		  /* 8214AA94h */ case    3:  		/* bc 12, CR6_LT, 180 */
		/* 8214AA94h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214AB48;  }
		/* 8214AA94h case    3:*/		return 0x8214AA98;
	}
	return 0x8214AA98;
} // Block from 8214AA88h-8214AA98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214AA98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AA98);
		  /* 8214AA98h */ case    0:  		/* lwz R10, <#[R28 + 120]> */
		/* 8214AA98h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000078) );
		/* 8214AA98h case    0:*/		return 0x8214AA9C;
		  /* 8214AA9Ch */ case    1:  		/* mulli R11, R30, 24 */
		/* 8214AA9Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0x18);
		/* 8214AA9Ch case    1:*/		return 0x8214AAA0;
		  /* 8214AAA0h */ case    2:  		/* lwz R10, <#[R10]> */
		/* 8214AAA0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8214AAA0h case    2:*/		return 0x8214AAA4;
		  /* 8214AAA4h */ case    3:  		/* add R31, R11, R10 */
		/* 8214AAA4h case    3:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 8214AAA4h case    3:*/		return 0x8214AAA8;
		  /* 8214AAA8h */ case    4:  		/* stwx R30, <#[R11 + R10]> */
		/* 8214AAA8h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8214AAA8h case    4:*/		return 0x8214AAAC;
		  /* 8214AAACh */ case    5:  		/* lwz R11, <#[R31 + 16]> */
		/* 8214AAACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8214AAACh case    5:*/		return 0x8214AAB0;
		  /* 8214AAB0h */ case    6:  		/* cmplw CR6, R11, R27 */
		/* 8214AAB0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8214AAB0h case    6:*/		return 0x8214AAB4;
		  /* 8214AAB4h */ case    7:  		/* bc 12, CR6_GT, 56 */
		/* 8214AAB4h case    7:*/		if ( regs.CR[6].gt ) { return 0x8214AAEC;  }
		/* 8214AAB4h case    7:*/		return 0x8214AAB8;
	}
	return 0x8214AAB8;
} // Block from 8214AA98h-8214AAB8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214AAB8h
// Function '?AddInterpolator@ShaderPDBBuilder@XGRAPHICS@@UAAXKKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AAB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AAB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AAB8);
		  /* 8214AAB8h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8214AAB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8214AAB8h case    0:*/		return 0x8214AABC;
		  /* 8214AABCh */ case    1:  		/* addi R29, R27, 1 */
		/* 8214AABCh case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x1);
		/* 8214AABCh case    1:*/		return 0x8214AAC0;
		  /* 8214AAC0h */ case    2:  		/* addi R30, R31, 12 */
		/* 8214AAC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xC);
		/* 8214AAC0h case    2:*/		return 0x8214AAC4;
		  /* 8214AAC4h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8214AAC4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8214AAC4h case    3:*/		return 0x8214AAC8;
		  /* 8214AAC8h */ case    4:  		/* bc 4, CR6_GT, 20 */
		/* 8214AAC8h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8214AADC;  }
		/* 8214AAC8h case    4:*/		return 0x8214AACC;
		  /* 8214AACCh */ case    5:  		/* mr R5, R26 */
		/* 8214AACCh case    5:*/		regs.R5 = regs.R26;
		/* 8214AACCh case    5:*/		return 0x8214AAD0;
		  /* 8214AAD0h */ case    6:  		/* mr R4, R29 */
		/* 8214AAD0h case    6:*/		regs.R4 = regs.R29;
		/* 8214AAD0h case    6:*/		return 0x8214AAD4;
		  /* 8214AAD4h */ case    7:  		/* mr R3, R30 */
		/* 8214AAD4h case    7:*/		regs.R3 = regs.R30;
		/* 8214AAD4h case    7:*/		return 0x8214AAD8;
		  /* 8214AAD8h */ case    8:  		/* bl -17088 */
		/* 8214AAD8h case    8:*/		regs.LR = 0x8214AADC; return 0x82146818;
		/* 8214AAD8h case    8:*/		return 0x8214AADC;
	}
	return 0x8214AADC;
} // Block from 8214AAB8h-8214AADCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214AADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AADC);
		  /* 8214AADCh */ case    0:  		/* stw R29, <#[R30 + 4]> */
		/* 8214AADCh case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000004) );
		/* 8214AADCh case    0:*/		return 0x8214AAE0;
		  /* 8214AAE0h */ case    1:  		/* lwz R11, <#[R26]> */
		/* 8214AAE0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8214AAE0h case    1:*/		return 0x8214AAE4;
		  /* 8214AAE4h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214AAE4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214AAE4h case    2:*/		return 0x8214AAE8;
		  /* 8214AAE8h */ case    3:  		/* bc 12, CR6_LT, 96 */
		/* 8214AAE8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214AB48;  }
		/* 8214AAE8h case    3:*/		return 0x8214AAEC;
	}
	return 0x8214AAEC;
} // Block from 8214AADCh-8214AAECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214AAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AAEC);
		  /* 8214AAECh */ case    0:  		/* lwz R10, <#[R31 + 12]> */
		/* 8214AAECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214AAECh case    0:*/		return 0x8214AAF0;
		  /* 8214AAF0h */ case    1:  		/* mulli R11, R27, 28 */
		/* 8214AAF0h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R27,0x1C);
		/* 8214AAF0h case    1:*/		return 0x8214AAF4;
		  /* 8214AAF4h */ case    2:  		/* stwx R27, <#[R11 + R10]> */
		/* 8214AAF4h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8214AAF4h case    2:*/		return 0x8214AAF8;
		  /* 8214AAF8h */ case    3:  		/* add R31, R11, R10 */
		/* 8214AAF8h case    3:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 8214AAF8h case    3:*/		return 0x8214AAFC;
		  /* 8214AAFCh */ case    4:  		/* lwz R11, <#[R31 + 20]> */
		/* 8214AAFCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8214AAFCh case    4:*/		return 0x8214AB00;
		  /* 8214AB00h */ case    5:  		/* cmplw CR6, R11, R25 */
		/* 8214AB00h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8214AB00h case    5:*/		return 0x8214AB04;
		  /* 8214AB04h */ case    6:  		/* bc 12, CR6_GT, 56 */
		/* 8214AB04h case    6:*/		if ( regs.CR[6].gt ) { return 0x8214AB3C;  }
		/* 8214AB04h case    6:*/		return 0x8214AB08;
		  /* 8214AB08h */ case    7:  		/* lwz R11, <#[R31 + 24]> */
		/* 8214AB08h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8214AB08h case    7:*/		return 0x8214AB0C;
		  /* 8214AB0Ch */ case    8:  		/* addi R29, R25, 1 */
		/* 8214AB0Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R25,0x1);
		/* 8214AB0Ch case    8:*/		return 0x8214AB10;
		  /* 8214AB10h */ case    9:  		/* addi R30, R31, 16 */
		/* 8214AB10h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x10);
		/* 8214AB10h case    9:*/		return 0x8214AB14;
		  /* 8214AB14h */ case   10:  		/* cmplw CR6, R29, R11 */
		/* 8214AB14h case   10:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8214AB14h case   10:*/		return 0x8214AB18;
		  /* 8214AB18h */ case   11:  		/* bc 4, CR6_GT, 20 */
		/* 8214AB18h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8214AB2C;  }
		/* 8214AB18h case   11:*/		return 0x8214AB1C;
		  /* 8214AB1Ch */ case   12:  		/* mr R5, R26 */
		/* 8214AB1Ch case   12:*/		regs.R5 = regs.R26;
		/* 8214AB1Ch case   12:*/		return 0x8214AB20;
	}
	return 0x8214AB20;
} // Block from 8214AAECh-8214AB20h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214AB20h
// Function '?EnumerateLiteralsCallback@ShaderPDBBuilder@XGRAPHICS@@QAAJKKKPBX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AB20);
		  /* 8214AB20h */ case    0:  		/* mr R4, R29 */
		/* 8214AB20h case    0:*/		regs.R4 = regs.R29;
		/* 8214AB20h case    0:*/		return 0x8214AB24;
		  /* 8214AB24h */ case    1:  		/* mr R3, R30 */
		/* 8214AB24h case    1:*/		regs.R3 = regs.R30;
		/* 8214AB24h case    1:*/		return 0x8214AB28;
		  /* 8214AB28h */ case    2:  		/* bl -6000 */
		/* 8214AB28h case    2:*/		regs.LR = 0x8214AB2C; return 0x821493B8;
		/* 8214AB28h case    2:*/		return 0x8214AB2C;
	}
	return 0x8214AB2C;
} // Block from 8214AB20h-8214AB2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214AB2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AB2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AB2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AB2C);
		  /* 8214AB2Ch */ case    0:  		/* stw R29, <#[R30 + 4]> */
		/* 8214AB2Ch case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000004) );
		/* 8214AB2Ch case    0:*/		return 0x8214AB30;
		  /* 8214AB30h */ case    1:  		/* lwz R11, <#[R26]> */
		/* 8214AB30h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8214AB30h case    1:*/		return 0x8214AB34;
		  /* 8214AB34h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214AB34h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214AB34h case    2:*/		return 0x8214AB38;
		  /* 8214AB38h */ case    3:  		/* bc 12, CR6_LT, 16 */
		/* 8214AB38h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214AB48;  }
		/* 8214AB38h case    3:*/		return 0x8214AB3C;
	}
	return 0x8214AB3C;
} // Block from 8214AB2Ch-8214AB3Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214AB3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AB3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AB3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AB3C);
		  /* 8214AB3Ch */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8214AB3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8214AB3Ch case    0:*/		return 0x8214AB40;
		  /* 8214AB40h */ case    1:  		/* rlwinm R10, R25, 2, 0, 29 */
		/* 8214AB40h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R25);
		/* 8214AB40h case    1:*/		return 0x8214AB44;
		  /* 8214AB44h */ case    2:  		/* stwx R24, <#[R10 + R11]> */
		/* 8214AB44h case    2:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8214AB44h case    2:*/		return 0x8214AB48;
	}
	return 0x8214AB48;
} // Block from 8214AB3Ch-8214AB48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214AB48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AB48);
		  /* 8214AB48h */ case    0:  		/* addi R1, R1, 160 */
		/* 8214AB48h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8214AB48h case    0:*/		return 0x8214AB4C;
		  /* 8214AB4Ch */ case    1:  		/* b -759988 */
		/* 8214AB4Ch case    1:*/		return 0x82091298;
		/* 8214AB4Ch case    1:*/		return 0x8214AB50;
	}
	return 0x8214AB50;
} // Block from 8214AB48h-8214AB50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214AB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AB50);
		  /* 8214AB50h */ case    0:  		/* mfspr R12, LR */
		/* 8214AB50h case    0:*/		regs.R12 = regs.LR;
		/* 8214AB50h case    0:*/		return 0x8214AB54;
		  /* 8214AB54h */ case    1:  		/* bl -760064 */
		/* 8214AB54h case    1:*/		regs.LR = 0x8214AB58; return 0x82091254;
		/* 8214AB54h case    1:*/		return 0x8214AB58;
		  /* 8214AB58h */ case    2:  		/* stwu R1, <#[R1 - 416]> */
		/* 8214AB58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 8214AB58h case    2:*/		return 0x8214AB5C;
		  /* 8214AB5Ch */ case    3:  		/* cntlzw R11, R4 */
		/* 8214AB5Ch case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R4);
		/* 8214AB5Ch case    3:*/		return 0x8214AB60;
		  /* 8214AB60h */ case    4:  		/* mr R29, R3 */
		/* 8214AB60h case    4:*/		regs.R29 = regs.R3;
		/* 8214AB60h case    4:*/		return 0x8214AB64;
		  /* 8214AB64h */ case    5:  		/* rlwinm. R11, R11, 27, 31, 31 */
		/* 8214AB64h case    5:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8214AB64h case    5:*/		return 0x8214AB68;
		  /* 8214AB68h */ case    6:  		/* mr R31, R4 */
		/* 8214AB68h case    6:*/		regs.R31 = regs.R4;
		/* 8214AB68h case    6:*/		return 0x8214AB6C;
		  /* 8214AB6Ch */ case    7:  		/* mr R27, R5 */
		/* 8214AB6Ch case    7:*/		regs.R27 = regs.R5;
		/* 8214AB6Ch case    7:*/		return 0x8214AB70;
		  /* 8214AB70h */ case    8:  		/* mr R28, R11 */
		/* 8214AB70h case    8:*/		regs.R28 = regs.R11;
		/* 8214AB70h case    8:*/		return 0x8214AB74;
		  /* 8214AB74h */ case    9:  		/* bc 12, CR0_EQ, 284 */
		/* 8214AB74h case    9:*/		if ( regs.CR[0].eq ) { return 0x8214AC90;  }
		/* 8214AB74h case    9:*/		return 0x8214AB78;
		  /* 8214AB78h */ case   10:  		/* lis R11, -32256 */
		/* 8214AB78h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8214AB78h case   10:*/		return 0x8214AB7C;
		  /* 8214AB7Ch */ case   11:  		/* addi R31, R11, 4485 */
		/* 8214AB7Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x1185);
		/* 8214AB7Ch case   11:*/		return 0x8214AB80;
		  /* 8214AB80h */ case   12:  		/* lwz R10, <#[R29 + 8]> */
		/* 8214AB80h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 8214AB80h case   12:*/		return 0x8214AB84;
		  /* 8214AB84h */ case   13:  		/* addi R30, R29, 4 */
		/* 8214AB84h case   13:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x4);
		/* 8214AB84h case   13:*/		return 0x8214AB88;
		  /* 8214AB88h */ case   14:  		/* lwz R11, <#[R29 + 4]> */
		/* 8214AB88h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8214AB88h case   14:*/		return 0x8214AB8C;
		  /* 8214AB8Ch */ case   15:  		/* mulli R10, R10, 276 */
		/* 8214AB8Ch case   15:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x114);
		/* 8214AB8Ch case   15:*/		return 0x8214AB90;
		  /* 8214AB90h */ case   16:  		/* add R7, R10, R11 */
		/* 8214AB90h case   16:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R11);
		/* 8214AB90h case   16:*/		return 0x8214AB94;
		  /* 8214AB94h */ case   17:  		/* mr R9, R11 */
		/* 8214AB94h case   17:*/		regs.R9 = regs.R11;
		/* 8214AB94h case   17:*/		return 0x8214AB98;
		  /* 8214AB98h */ case   18:  		/* cmplw CR6, R11, R7 */
		/* 8214AB98h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 8214AB98h case   18:*/		return 0x8214AB9C;
		  /* 8214AB9Ch */ case   19:  		/* bc 4, CR6_LT, 68 */
		/* 8214AB9Ch case   19:*/		if ( !regs.CR[6].lt ) { return 0x8214ABE0;  }
		/* 8214AB9Ch case   19:*/		return 0x8214ABA0;
		  /* 8214ABA0h */ case   20:  		/* mr R10, R31 */
		/* 8214ABA0h case   20:*/		regs.R10 = regs.R31;
		/* 8214ABA0h case   20:*/		return 0x8214ABA4;
		  /* 8214ABA4h */ case   21:  		/* mr R11, R9 */
		/* 8214ABA4h case   21:*/		regs.R11 = regs.R9;
		/* 8214ABA4h case   21:*/		return 0x8214ABA8;
		  /* 8214ABA8h */ case   22:  		/* lbz R8, <#[R11]> */
		/* 8214ABA8h case   22:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8214ABA8h case   22:*/		return 0x8214ABAC;
		  /* 8214ABACh */ case   23:  		/* lbz R6, <#[R10]> */
		/* 8214ABACh case   23:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 8214ABACh case   23:*/		return 0x8214ABB0;
		  /* 8214ABB0h */ case   24:  		/* cmpwi CR0, R8, 0 */
		/* 8214ABB0h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 8214ABB0h case   24:*/		return 0x8214ABB4;
		  /* 8214ABB4h */ case   25:  		/* subf R8, R6, R8 */
		/* 8214ABB4h case   25:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 8214ABB4h case   25:*/		return 0x8214ABB8;
		  /* 8214ABB8h */ case   26:  		/* bc 12, CR0_EQ, 20 */
		/* 8214ABB8h case   26:*/		if ( regs.CR[0].eq ) { return 0x8214ABCC;  }
		/* 8214ABB8h case   26:*/		return 0x8214ABBC;
		  /* 8214ABBCh */ case   27:  		/* addi R11, R11, 1 */
		/* 8214ABBCh case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214ABBCh case   27:*/		return 0x8214ABC0;
		  /* 8214ABC0h */ case   28:  		/* addi R10, R10, 1 */
		/* 8214ABC0h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8214ABC0h case   28:*/		return 0x8214ABC4;
		  /* 8214ABC4h */ case   29:  		/* cmpwi CR6, R8, 0 */
		/* 8214ABC4h case   29:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 8214ABC4h case   29:*/		return 0x8214ABC8;
		  /* 8214ABC8h */ case   30:  		/* bc 12, CR6_EQ, -32 */
		/* 8214ABC8h case   30:*/		if ( regs.CR[6].eq ) { return 0x8214ABA8;  }
		/* 8214ABC8h case   30:*/		return 0x8214ABCC;
	}
	return 0x8214ABCC;
} // Block from 8214AB50h-8214ABCCh (31 instructions)

//////////////////////////////////////////////////////
// Block at 8214ABCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214ABCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214ABCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214ABCC);
		  /* 8214ABCCh */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 8214ABCCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 8214ABCCh case    0:*/		return 0x8214ABD0;
		  /* 8214ABD0h */ case    1:  		/* bc 12, CR0_EQ, 244 */
		/* 8214ABD0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8214ACC4;  }
		/* 8214ABD0h case    1:*/		return 0x8214ABD4;
		  /* 8214ABD4h */ case    2:  		/* addi R9, R9, 276 */
		/* 8214ABD4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x114);
		/* 8214ABD4h case    2:*/		return 0x8214ABD8;
		  /* 8214ABD8h */ case    3:  		/* cmplw CR6, R9, R7 */
		/* 8214ABD8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 8214ABD8h case    3:*/		return 0x8214ABDC;
		  /* 8214ABDCh */ case    4:  		/* bc 12, CR6_LT, -60 */
		/* 8214ABDCh case    4:*/		if ( regs.CR[6].lt ) { return 0x8214ABA0;  }
		/* 8214ABDCh case    4:*/		return 0x8214ABE0;
	}
	return 0x8214ABE0;
} // Block from 8214ABCCh-8214ABE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214ABE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214ABE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214ABE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214ABE0);
		  /* 8214ABE0h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 8214ABE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8214ABE0h case    0:*/		return 0x8214ABE4;
		  /* 8214ABE4h */ case    1:  		/* li R5, 260 */
		/* 8214ABE4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x104);
		/* 8214ABE4h case    1:*/		return 0x8214ABE8;
		  /* 8214ABE8h */ case    2:  		/* mr R4, R31 */
		/* 8214ABE8h case    2:*/		regs.R4 = regs.R31;
		/* 8214ABE8h case    2:*/		return 0x8214ABEC;
		  /* 8214ABECh */ case    3:  		/* addi R3, R1, 80 */
		/* 8214ABECh case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214ABECh case    3:*/		return 0x8214ABF0;
		  /* 8214ABF0h */ case    4:  		/* stw R11, <#[R1 + 340]> */
		/* 8214ABF0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000154) );
		/* 8214ABF0h case    4:*/		return 0x8214ABF4;
		  /* 8214ABF4h */ case    5:  		/* bl -753964 */
		/* 8214ABF4h case    5:*/		regs.LR = 0x8214ABF8; return 0x82092AC8;
		/* 8214ABF4h case    5:*/		return 0x8214ABF8;
		  /* 8214ABF8h */ case    6:  		/* addi R10, R1, 344 */
		/* 8214ABF8h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x158);
		/* 8214ABF8h case    6:*/		return 0x8214ABFC;
		  /* 8214ABFCh */ case    7:  		/* li R11, 0 */
		/* 8214ABFCh case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214ABFCh case    7:*/		return 0x8214AC00;
		  /* 8214AC00h */ case    8:  		/* cmplwi CR6, R28, 0 */
		/* 8214AC00h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8214AC00h case    8:*/		return 0x8214AC04;
		  /* 8214AC04h */ case    9:  		/* stb R11, <#[R1 + 339]> */
		/* 8214AC04h case    9:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000153) );
		/* 8214AC04h case    9:*/		return 0x8214AC08;
		  /* 8214AC08h */ case   10:  		/* stw R11, <#[R1 + 352]> */
		/* 8214AC08h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000160) );
		/* 8214AC08h case   10:*/		return 0x8214AC0C;
		  /* 8214AC0Ch */ case   11:  		/* stw R11, <#[R10]> */
		/* 8214AC0Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8214AC0Ch case   11:*/		return 0x8214AC10;
		  /* 8214AC10h */ case   12:  		/* stw R11, <#[R10 + 4]> */
		/* 8214AC10h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8214AC10h case   12:*/		return 0x8214AC14;
		  /* 8214AC14h */ case   13:  		/* bc 4, CR6_EQ, 72 */
		/* 8214AC14h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8214AC5C;  }
		/* 8214AC14h case   13:*/		return 0x8214AC18;
		  /* 8214AC18h */ case   14:  		/* li R9, 0 */
		/* 8214AC18h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8214AC18h case   14:*/		return 0x8214AC1C;
		  /* 8214AC1Ch */ case   15:  		/* li R8, 128 */
		/* 8214AC1Ch case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x80);
		/* 8214AC1Ch case   15:*/		return 0x8214AC20;
		  /* 8214AC20h */ case   16:  		/* li R7, 3 */
		/* 8214AC20h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 8214AC20h case   16:*/		return 0x8214AC24;
		  /* 8214AC24h */ case   17:  		/* li R6, 0 */
		/* 8214AC24h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8214AC24h case   17:*/		return 0x8214AC28;
		  /* 8214AC28h */ case   18:  		/* li R5, 1 */
		/* 8214AC28h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8214AC28h case   18:*/		return 0x8214AC2C;
		  /* 8214AC2Ch */ case   19:  		/* li R4, 0 */
		/* 8214AC2Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214AC2Ch case   19:*/		return 0x8214AC30;
		  /* 8214AC30h */ case   20:  		/* mr R3, R31 */
		/* 8214AC30h case   20:*/		regs.R3 = regs.R31;
		/* 8214AC30h case   20:*/		return 0x8214AC34;
		  /* 8214AC34h */ case   21:  		/* bl -794436 */
		/* 8214AC34h case   21:*/		regs.LR = 0x8214AC38; return 0x82088CF0;
		/* 8214AC34h case   21:*/		return 0x8214AC38;
		  /* 8214AC38h */ case   22:  		/* mr R31, R3 */
		/* 8214AC38h case   22:*/		regs.R31 = regs.R3;
		/* 8214AC38h case   22:*/		return 0x8214AC3C;
		  /* 8214AC3Ch */ case   23:  		/* cmpwi CR6, R3, -1 */
		/* 8214AC3Ch case   23:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8214AC3Ch case   23:*/		return 0x8214AC40;
		  /* 8214AC40h */ case   24:  		/* bc 12, CR6_EQ, 28 */
		/* 8214AC40h case   24:*/		if ( regs.CR[6].eq ) { return 0x8214AC5C;  }
		/* 8214AC40h case   24:*/		return 0x8214AC44;
		  /* 8214AC44h */ case   25:  		/* addi R6, R1, 344 */
		/* 8214AC44h case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x158);
		/* 8214AC44h case   25:*/		return 0x8214AC48;
		  /* 8214AC48h */ case   26:  		/* li R5, 0 */
		/* 8214AC48h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8214AC48h case   26:*/		return 0x8214AC4C;
		  /* 8214AC4Ch */ case   27:  		/* li R4, 0 */
		/* 8214AC4Ch case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214AC4Ch case   27:*/		return 0x8214AC50;
		  /* 8214AC50h */ case   28:  		/* bl 1166120 */
		/* 8214AC50h case   28:*/		regs.LR = 0x8214AC54; return 0x82267778;
		/* 8214AC50h case   28:*/		return 0x8214AC54;
		  /* 8214AC54h */ case   29:  		/* mr R3, R31 */
		/* 8214AC54h case   29:*/		regs.R3 = regs.R31;
		/* 8214AC54h case   29:*/		return 0x8214AC58;
	}
	return 0x8214AC58;
} // Block from 8214ABE0h-8214AC58h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8214AC58h
// Function '?AddVariableDebugInfo@ShaderPDBBuilder@XGRAPHICS@@QAAXKKDKHHHK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AC58);
		  /* 8214AC58h */ case    0:  		/* bl -795728 */
		/* 8214AC58h case    0:*/		regs.LR = 0x8214AC5C; return 0x82088808;
		/* 8214AC58h case    0:*/		return 0x8214AC5C;
	}
	return 0x8214AC5C;
} // Block from 8214AC58h-8214AC5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214AC5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AC5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AC5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AC5C);
		  /* 8214AC5Ch */ case    0:  		/* addi R31, R29, 144 */
		/* 8214AC5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R29,0x90);
		/* 8214AC5Ch case    0:*/		return 0x8214AC60;
		  /* 8214AC60h */ case    1:  		/* addi R4, R1, 80 */
		/* 8214AC60h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214AC60h case    1:*/		return 0x8214AC64;
		  /* 8214AC64h */ case    2:  		/* mr R5, R31 */
		/* 8214AC64h case    2:*/		regs.R5 = regs.R31;
		/* 8214AC64h case    2:*/		return 0x8214AC68;
		  /* 8214AC68h */ case    3:  		/* mr R3, R30 */
		/* 8214AC68h case    3:*/		regs.R3 = regs.R30;
		/* 8214AC68h case    3:*/		return 0x8214AC6C;
		  /* 8214AC6Ch */ case    4:  		/* bl -7068 */
		/* 8214AC6Ch case    4:*/		regs.LR = 0x8214AC70; return 0x821490D0;
		/* 8214AC6Ch case    4:*/		return 0x8214AC70;
		  /* 8214AC70h */ case    5:  		/* lwz R11, <#[R29 + 144]> */
		/* 8214AC70h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000090) );
		/* 8214AC70h case    5:*/		return 0x8214AC74;
		  /* 8214AC74h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 8214AC74h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214AC74h case    6:*/		return 0x8214AC78;
		  /* 8214AC78h */ case    7:  		/* bc 12, CR6_LT, 12 */
		/* 8214AC78h case    7:*/		if ( regs.CR[6].lt ) { return 0x8214AC84;  }
		/* 8214AC78h case    7:*/		return 0x8214AC7C;
		  /* 8214AC7Ch */ case    8:  		/* lwz R11, <#[R1 + 340]> */
		/* 8214AC7Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000154) );
		/* 8214AC7Ch case    8:*/		return 0x8214AC80;
		  /* 8214AC80h */ case    9:  		/* stw R11, <#[R27]> */
		/* 8214AC80h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8214AC80h case    9:*/		return 0x8214AC84;
	}
	return 0x8214AC84;
} // Block from 8214AC5Ch-8214AC84h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214AC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AC84);
		  /* 8214AC84h */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8214AC84h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8214AC84h case    0:*/		return 0x8214AC88;
		  /* 8214AC88h */ case    1:  		/* addi R1, R1, 416 */
		/* 8214AC88h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 8214AC88h case    1:*/		return 0x8214AC8C;
		  /* 8214AC8Ch */ case    2:  		/* b -760296 */
		/* 8214AC8Ch case    2:*/		return 0x820912A4;
		/* 8214AC8Ch case    2:*/		return 0x8214AC90;
	}
	return 0x8214AC90;
} // Block from 8214AC84h-8214AC90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214AC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AC90);
		  /* 8214AC90h */ case    0:  		/* mr R11, R31 */
		/* 8214AC90h case    0:*/		regs.R11 = regs.R31;
		/* 8214AC90h case    0:*/		return 0x8214AC94;
		  /* 8214AC94h */ case    1:  		/* lbz R10, <#[R11]> */
		/* 8214AC94h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214AC94h case    1:*/		return 0x8214AC98;
		  /* 8214AC98h */ case    2:  		/* addi R11, R11, 1 */
		/* 8214AC98h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214AC98h case    2:*/		return 0x8214AC9C;
		  /* 8214AC9Ch */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8214AC9Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8214AC9Ch case    3:*/		return 0x8214ACA0;
		  /* 8214ACA0h */ case    4:  		/* bc 4, CR6_EQ, -12 */
		/* 8214ACA0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8214AC94;  }
		/* 8214ACA0h case    4:*/		return 0x8214ACA4;
		  /* 8214ACA4h */ case    5:  		/* subf R11, R31, R11 */
		/* 8214ACA4h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 8214ACA4h case    5:*/		return 0x8214ACA8;
		  /* 8214ACA8h */ case    6:  		/* addi R11, R11, -1 */
		/* 8214ACA8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8214ACA8h case    6:*/		return 0x8214ACAC;
		  /* 8214ACACh */ case    7:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8214ACACh case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8214ACACh case    7:*/		return 0x8214ACB0;
		  /* 8214ACB0h */ case    8:  		/* cmplwi CR6, R11, 260 */
		/* 8214ACB0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000104);
		/* 8214ACB0h case    8:*/		return 0x8214ACB4;
		  /* 8214ACB4h */ case    9:  		/* bc 12, CR6_LT, -308 */
		/* 8214ACB4h case    9:*/		if ( regs.CR[6].lt ) { return 0x8214AB80;  }
		/* 8214ACB4h case    9:*/		return 0x8214ACB8;
		  /* 8214ACB8h */ case   10:  		/* lis R3, -32768 */
		/* 8214ACB8h case   10:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8214ACB8h case   10:*/		return 0x8214ACBC;
		  /* 8214ACBCh */ case   11:  		/* ori R3, R3, 16389 */
		/* 8214ACBCh case   11:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8214ACBCh case   11:*/		return 0x8214ACC0;
		  /* 8214ACC0h */ case   12:  		/* b -56 */
		/* 8214ACC0h case   12:*/		return 0x8214AC88;
		/* 8214ACC0h case   12:*/		return 0x8214ACC4;
	}
	return 0x8214ACC4;
} // Block from 8214AC90h-8214ACC4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214ACC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214ACC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214ACC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214ACC4);
		  /* 8214ACC4h */ case    0:  		/* lwz R11, <#[R9 + 260]> */
		/* 8214ACC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000104) );
		/* 8214ACC4h case    0:*/		return 0x8214ACC8;
		  /* 8214ACC8h */ case    1:  		/* li R3, 0 */
		/* 8214ACC8h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214ACC8h case    1:*/		return 0x8214ACCC;
		  /* 8214ACCCh */ case    2:  		/* stw R11, <#[R27]> */
		/* 8214ACCCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8214ACCCh case    2:*/		return 0x8214ACD0;
		  /* 8214ACD0h */ case    3:  		/* b -72 */
		/* 8214ACD0h case    3:*/		return 0x8214AC88;
		/* 8214ACD0h case    3:*/		return 0x8214ACD4;
		  /* 8214ACD4h */ case    4:  		/* nop */
		/* 8214ACD4h case    4:*/		cpu::op::nop();
		/* 8214ACD4h case    4:*/		return 0x8214ACD8;
	}
	return 0x8214ACD8;
} // Block from 8214ACC4h-8214ACD8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214ACD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214ACD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214ACD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214ACD8);
		  /* 8214ACD8h */ case    0:  		/* mfspr R12, LR */
		/* 8214ACD8h case    0:*/		regs.R12 = regs.LR;
		/* 8214ACD8h case    0:*/		return 0x8214ACDC;
		  /* 8214ACDCh */ case    1:  		/* bl -760508 */
		/* 8214ACDCh case    1:*/		regs.LR = 0x8214ACE0; return 0x82091220;
		/* 8214ACDCh case    1:*/		return 0x8214ACE0;
		  /* 8214ACE0h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 8214ACE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 8214ACE0h case    2:*/		return 0x8214ACE4;
		  /* 8214ACE4h */ case    3:  		/* mr R29, R3 */
		/* 8214ACE4h case    3:*/		regs.R29 = regs.R3;
		/* 8214ACE4h case    3:*/		return 0x8214ACE8;
		  /* 8214ACE8h */ case    4:  		/* mr R3, R4 */
		/* 8214ACE8h case    4:*/		regs.R3 = regs.R4;
		/* 8214ACE8h case    4:*/		return 0x8214ACEC;
		  /* 8214ACECh */ case    5:  		/* mr R30, R4 */
		/* 8214ACECh case    5:*/		regs.R30 = regs.R4;
		/* 8214ACECh case    5:*/		return 0x8214ACF0;
		  /* 8214ACF0h */ case    6:  		/* bl -19944 */
		/* 8214ACF0h case    6:*/		regs.LR = 0x8214ACF4; return 0x82145F08;
		/* 8214ACF0h case    6:*/		return 0x8214ACF4;
		  /* 8214ACF4h */ case    7:  		/* lis R10, -32253 */
		/* 8214ACF4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214ACF4h case    7:*/		return 0x8214ACF8;
	}
	return 0x8214ACF8;
} // Block from 8214ACD8h-8214ACF8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214ACF8h
// Function '?SetFunctionCount@ShaderPDBBuilder@XGRAPHICS@@QAAJK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214ACF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214ACF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214ACF8);
		  /* 8214ACF8h */ case    0:  		/* lis R11, -32253 */
		/* 8214ACF8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214ACF8h case    0:*/		return 0x8214ACFC;
		  /* 8214ACFCh */ case    1:  		/* addi R28, R10, 27192 */
		/* 8214ACFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x6A38);
		/* 8214ACFCh case    1:*/		return 0x8214AD00;
		  /* 8214AD00h */ case    2:  		/* addi R4, R11, 25840 */
		/* 8214AD00h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x64F0);
		/* 8214AD00h case    2:*/		return 0x8214AD04;
		  /* 8214AD04h */ case    3:  		/* mr R3, R30 */
		/* 8214AD04h case    3:*/		regs.R3 = regs.R30;
		/* 8214AD04h case    3:*/		return 0x8214AD08;
		  /* 8214AD08h */ case    4:  		/* stw R28, <#[R1 + 88]> */
		/* 8214AD08h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000058) );
		/* 8214AD08h case    4:*/		return 0x8214AD0C;
		  /* 8214AD0Ch */ case    5:  		/* mr R5, R28 */
		/* 8214AD0Ch case    5:*/		regs.R5 = regs.R28;
		/* 8214AD0Ch case    5:*/		return 0x8214AD10;
		  /* 8214AD10h */ case    6:  		/* stw R4, <#[R1 + 80]> */
		/* 8214AD10h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 8214AD10h case    6:*/		return 0x8214AD14;
		  /* 8214AD14h */ case    7:  		/* bl -20068 */
		/* 8214AD14h case    7:*/		regs.LR = 0x8214AD18; return 0x82145EB0;
		/* 8214AD14h case    7:*/		return 0x8214AD18;
		  /* 8214AD18h */ case    8:  		/* mr R3, R30 */
		/* 8214AD18h case    8:*/		regs.R3 = regs.R30;
		/* 8214AD18h case    8:*/		return 0x8214AD1C;
		  /* 8214AD1Ch */ case    9:  		/* bl -16588 */
		/* 8214AD1Ch case    9:*/		regs.LR = 0x8214AD20; return 0x82146C50;
		/* 8214AD1Ch case    9:*/		return 0x8214AD20;
		  /* 8214AD20h */ case   10:  		/* lwz R11, <#[R29 + 20]> */
		/* 8214AD20h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 8214AD20h case   10:*/		return 0x8214AD24;
		  /* 8214AD24h */ case   11:  		/* lwz R10, <#[R29 + 16]> */
		/* 8214AD24h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 8214AD24h case   11:*/		return 0x8214AD28;
		  /* 8214AD28h */ case   12:  		/* addi R18, R29, 16 */
		/* 8214AD28h case   12:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R29,0x10);
		/* 8214AD28h case   12:*/		return 0x8214AD2C;
		  /* 8214AD2Ch */ case   13:  		/* mulli R11, R11, 476 */
		/* 8214AD2Ch case   13:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1DC);
		/* 8214AD2Ch case   13:*/		return 0x8214AD30;
		  /* 8214AD30h */ case   14:  		/* extsw R31, R10 */
		/* 8214AD30h case   14:*/		cpu::op::extsw<0>(regs,&regs.R31,regs.R10);
		/* 8214AD30h case   14:*/		return 0x8214AD34;
		  /* 8214AD34h */ case   15:  		/* add R11, R11, R10 */
		/* 8214AD34h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214AD34h case   15:*/		return 0x8214AD38;
		  /* 8214AD38h */ case   16:  		/* cmplw CR6, R31, R11 */
		/* 8214AD38h case   16:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8214AD38h case   16:*/		return 0x8214AD3C;
		  /* 8214AD3Ch */ case   17:  		/* bc 4, CR6_LT, 736 */
		/* 8214AD3Ch case   17:*/		if ( !regs.CR[6].lt ) { return 0x8214B01C;  }
		/* 8214AD3Ch case   17:*/		return 0x8214AD40;
		  /* 8214AD40h */ case   18:  		/* lis R9, -32255 */
		/* 8214AD40h case   18:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 8214AD40h case   18:*/		return 0x8214AD44;
		  /* 8214AD44h */ case   19:  		/* lis R28, -32253 */
		/* 8214AD44h case   19:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8203);
		/* 8214AD44h case   19:*/		return 0x8214AD48;
		  /* 8214AD48h */ case   20:  		/* lis R23, -32253 */
		/* 8214AD48h case   20:*/		cpu::op::lis<0>(regs,&regs.R23,0xFFFF8203);
		/* 8214AD48h case   20:*/		return 0x8214AD4C;
		  /* 8214AD4Ch */ case   21:  		/* lis R24, -32253 */
		/* 8214AD4Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8203);
		/* 8214AD4Ch case   21:*/		return 0x8214AD50;
		  /* 8214AD50h */ case   22:  		/* lis R25, -32253 */
		/* 8214AD50h case   22:*/		cpu::op::lis<0>(regs,&regs.R25,0xFFFF8203);
		/* 8214AD50h case   22:*/		return 0x8214AD54;
		  /* 8214AD54h */ case   23:  		/* lis R26, -32253 */
		/* 8214AD54h case   23:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8203);
		/* 8214AD54h case   23:*/		return 0x8214AD58;
	}
	return 0x8214AD58;
} // Block from 8214ACF8h-8214AD58h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8214AD58h
// Function '?SetFunctionEntryExitCount@ShaderPDBBuilder@XGRAPHICS@@QAAJK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AD58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AD58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AD58);
		  /* 8214AD58h */ case    0:  		/* lis R27, -32253 */
		/* 8214AD58h case    0:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8203);
		/* 8214AD58h case    0:*/		return 0x8214AD5C;
		  /* 8214AD5Ch */ case    1:  		/* lis R3, -32253 */
		/* 8214AD5Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8203);
		/* 8214AD5Ch case    1:*/		return 0x8214AD60;
		  /* 8214AD60h */ case    2:  		/* lis R4, -32253 */
		/* 8214AD60h case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8203);
		/* 8214AD60h case    2:*/		return 0x8214AD64;
		  /* 8214AD64h */ case    3:  		/* lis R5, -32253 */
		/* 8214AD64h case    3:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 8214AD64h case    3:*/		return 0x8214AD68;
		  /* 8214AD68h */ case    4:  		/* lis R6, -32253 */
		/* 8214AD68h case    4:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 8214AD68h case    4:*/		return 0x8214AD6C;
		  /* 8214AD6Ch */ case    5:  		/* lis R7, -32253 */
		/* 8214AD6Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 8214AD6Ch case    5:*/		return 0x8214AD70;
		  /* 8214AD70h */ case    6:  		/* lis R8, -32255 */
		/* 8214AD70h case    6:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 8214AD70h case    6:*/		return 0x8214AD74;
		  /* 8214AD74h */ case    7:  		/* lis R10, -32255 */
		/* 8214AD74h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8214AD74h case    7:*/		return 0x8214AD78;
		  /* 8214AD78h */ case    8:  		/* lis R11, -32253 */
		/* 8214AD78h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214AD78h case    8:*/		return 0x8214AD7C;
		  /* 8214AD7Ch */ case    9:  		/* addi R9, R9, -15592 */
		/* 8214AD7Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFC318);
		/* 8214AD7Ch case    9:*/		return 0x8214AD80;
		  /* 8214AD80h */ case   10:  		/* addi R22, R28, 27176 */
		/* 8214AD80h case   10:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R28,0x6A28);
		/* 8214AD80h case   10:*/		return 0x8214AD84;
		  /* 8214AD84h */ case   11:  		/* addi R23, R23, 25712 */
		/* 8214AD84h case   11:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x6470);
		/* 8214AD84h case   11:*/		return 0x8214AD88;
		  /* 8214AD88h */ case   12:  		/* stw R9, <#[R1 + 84]> */
		/* 8214AD88h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8214AD88h case   12:*/		return 0x8214AD8C;
		  /* 8214AD8Ch */ case   13:  		/* addi R24, R24, 27148 */
		/* 8214AD8Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x6A0C);
		/* 8214AD8Ch case   13:*/		return 0x8214AD90;
		  /* 8214AD90h */ case   14:  		/* addi R25, R25, 27140 */
		/* 8214AD90h case   14:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x6A04);
		/* 8214AD90h case   14:*/		return 0x8214AD94;
		  /* 8214AD94h */ case   15:  		/* addi R26, R26, 27132 */
		/* 8214AD94h case   15:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x69FC);
		/* 8214AD94h case   15:*/		return 0x8214AD98;
		  /* 8214AD98h */ case   16:  		/* addi R27, R27, 27120 */
		/* 8214AD98h case   16:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x69F0);
		/* 8214AD98h case   16:*/		return 0x8214AD9C;
		  /* 8214AD9Ch */ case   17:  		/* addi R21, R3, 27100 */
		/* 8214AD9Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R3,0x69DC);
		/* 8214AD9Ch case   17:*/		return 0x8214ADA0;
		  /* 8214ADA0h */ case   18:  		/* addi R20, R4, 27092 */
		/* 8214ADA0h case   18:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R4,0x69D4);
		/* 8214ADA0h case   18:*/		return 0x8214ADA4;
		  /* 8214ADA4h */ case   19:  		/* addi R19, R5, 27080 */
		/* 8214ADA4h case   19:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R5,0x69C8);
		/* 8214ADA4h case   19:*/		return 0x8214ADA8;
		  /* 8214ADA8h */ case   20:  		/* addi R16, R6, 27076 */
		/* 8214ADA8h case   20:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R6,0x69C4);
		/* 8214ADA8h case   20:*/		return 0x8214ADAC;
		  /* 8214ADACh */ case   21:  		/* addi R15, R7, 27072 */
		/* 8214ADACh case   21:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R7,0x69C0);
		/* 8214ADACh case   21:*/		return 0x8214ADB0;
		  /* 8214ADB0h */ case   22:  		/* addi R14, R8, -15380 */
		/* 8214ADB0h case   22:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R8,0xFFFFC3EC);
		/* 8214ADB0h case   22:*/		return 0x8214ADB4;
		  /* 8214ADB4h */ case   23:  		/* addi R17, R10, 5232 */
		/* 8214ADB4h case   23:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R10,0x1470);
		/* 8214ADB4h case   23:*/		return 0x8214ADB8;
	}
	return 0x8214ADB8;
} // Block from 8214AD58h-8214ADB8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8214ADB8h
// Function '?AddFunctionEntry@ShaderPDBBuilder@XGRAPHICS@@QAAXKKHK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214ADB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214ADB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214ADB8);
		  /* 8214ADB8h */ case    0:  		/* addi R28, R11, 27064 */
		/* 8214ADB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x69B8);
		/* 8214ADB8h case    0:*/		return 0x8214ADBC;
		  /* 8214ADBCh */ case    1:  		/* mr R3, R30 */
		/* 8214ADBCh case    1:*/		regs.R3 = regs.R30;
		/* 8214ADBCh case    1:*/		return 0x8214ADC0;
		  /* 8214ADC0h */ case    2:  		/* bl -20152 */
		/* 8214ADC0h case    2:*/		regs.LR = 0x8214ADC4; return 0x82145F08;
		/* 8214ADC0h case    2:*/		return 0x8214ADC4;
		  /* 8214ADC4h */ case    3:  		/* mr R5, R28 */
		/* 8214ADC4h case    3:*/		regs.R5 = regs.R28;
		/* 8214ADC4h case    3:*/		return 0x8214ADC8;
		  /* 8214ADC8h */ case    4:  		/* mr R3, R30 */
		/* 8214ADC8h case    4:*/		regs.R3 = regs.R30;
		/* 8214ADC8h case    4:*/		return 0x8214ADCC;
		  /* 8214ADCCh */ case    5:  		/* lwz R4, <#[R1 + 80]> */
		/* 8214ADCCh case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 8214ADCCh case    5:*/		return 0x8214ADD0;
		  /* 8214ADD0h */ case    6:  		/* bl -20256 */
		/* 8214ADD0h case    6:*/		regs.LR = 0x8214ADD4; return 0x82145EB0;
		/* 8214ADD0h case    6:*/		return 0x8214ADD4;
		  /* 8214ADD4h */ case    7:  		/* li R11, 0 */
		/* 8214ADD4h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214ADD4h case    7:*/		return 0x8214ADD8;
		  /* 8214ADD8h */ case    8:  		/* li R5, 15 */
		/* 8214ADD8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0xF);
		/* 8214ADD8h case    8:*/		return 0x8214ADDC;
		  /* 8214ADDCh */ case    9:  		/* li R4, 0 */
		/* 8214ADDCh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214ADDCh case    9:*/		return 0x8214ADE0;
		  /* 8214ADE0h */ case   10:  		/* stb R11, <#[R1 + 96]> */
		/* 8214ADE0h case   10:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214ADE0h case   10:*/		return 0x8214ADE4;
		  /* 8214ADE4h */ case   11:  		/* addi R3, R1, 97 */
		/* 8214ADE4h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x61);
		/* 8214ADE4h case   11:*/		return 0x8214ADE8;
		  /* 8214ADE8h */ case   12:  		/* bl -760488 */
		/* 8214ADE8h case   12:*/		regs.LR = 0x8214ADEC; return 0x82091340;
		/* 8214ADE8h case   12:*/		return 0x8214ADEC;
		  /* 8214ADECh */ case   13:  		/* lbz R11, <#[R31]> */
		/* 8214ADECh case   13:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214ADECh case   13:*/		return 0x8214ADF0;
		  /* 8214ADF0h */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 8214ADF0h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8214ADF0h case   14:*/		return 0x8214ADF4;
		  /* 8214ADF4h */ case   15:  		/* bc 12, CR0_EQ, 236 */
		/* 8214ADF4h case   15:*/		if ( regs.CR[0].eq ) { return 0x8214AEE0;  }
		/* 8214ADF4h case   15:*/		return 0x8214ADF8;
		  /* 8214ADF8h */ case   16:  		/* mr R4, R17 */
		/* 8214ADF8h case   16:*/		regs.R4 = regs.R17;
		/* 8214ADF8h case   16:*/		return 0x8214ADFC;
		  /* 8214ADFCh */ case   17:  		/* mr R5, R31 */
		/* 8214ADFCh case   17:*/		regs.R5 = regs.R31;
		/* 8214ADFCh case   17:*/		return 0x8214AE00;
		  /* 8214AE00h */ case   18:  		/* mr R3, R30 */
		/* 8214AE00h case   18:*/		regs.R3 = regs.R30;
		/* 8214AE00h case   18:*/		return 0x8214AE04;
		  /* 8214AE04h */ case   19:  		/* bl -19772 */
		/* 8214AE04h case   19:*/		regs.LR = 0x8214AE08; return 0x821460C8;
		/* 8214AE04h case   19:*/		return 0x8214AE08;
		  /* 8214AE08h */ case   20:  		/* lwz R11, <#[R31 + 256]> */
		/* 8214AE08h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 8214AE08h case   20:*/		return 0x8214AE0C;
		  /* 8214AE0Ch */ case   21:  		/* lis R10, 18008 */
		/* 8214AE0Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x4658);
		/* 8214AE0Ch case   21:*/		return 0x8214AE10;
		  /* 8214AE10h */ case   22:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 8214AE10h case   22:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 8214AE10h case   22:*/		return 0x8214AE14;
		  /* 8214AE14h */ case   23:  		/* cmplw CR6, R11, R10 */
		/* 8214AE14h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214AE14h case   23:*/		return 0x8214AE18;
		  /* 8214AE18h */ case   24:  		/* bc 12, CR6_EQ, 52 */
		/* 8214AE18h case   24:*/		if ( regs.CR[6].eq ) { return 0x8214AE4C;  }
		/* 8214AE18h case   24:*/		return 0x8214AE1C;
		  /* 8214AE1Ch */ case   25:  		/* lis R10, -2 */
		/* 8214AE1Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFE);
		/* 8214AE1Ch case   25:*/		return 0x8214AE20;
		  /* 8214AE20h */ case   26:  		/* cmplw CR6, R11, R10 */
		/* 8214AE20h case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214AE20h case   26:*/		return 0x8214AE24;
		  /* 8214AE24h */ case   27:  		/* bc 12, CR6_EQ, 32 */
		/* 8214AE24h case   27:*/		if ( regs.CR[6].eq ) { return 0x8214AE44;  }
		/* 8214AE24h case   27:*/		return 0x8214AE28;
		  /* 8214AE28h */ case   28:  		/* lis R10, -1 */
		/* 8214AE28h case   28:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8214AE28h case   28:*/		return 0x8214AE2C;
		  /* 8214AE2Ch */ case   29:  		/* cmplw CR6, R11, R10 */
		/* 8214AE2Ch case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214AE2Ch case   29:*/		return 0x8214AE30;
		  /* 8214AE30h */ case   30:  		/* bc 12, CR6_EQ, 12 */
		/* 8214AE30h case   30:*/		if ( regs.CR[6].eq ) { return 0x8214AE3C;  }
		/* 8214AE30h case   30:*/		return 0x8214AE34;
		  /* 8214AE34h */ case   31:  		/* mr R6, R16 */
		/* 8214AE34h case   31:*/		regs.R6 = regs.R16;
		/* 8214AE34h case   31:*/		return 0x8214AE38;
		  /* 8214AE38h */ case   32:  		/* b 24 */
		/* 8214AE38h case   32:*/		return 0x8214AE50;
		/* 8214AE38h case   32:*/		return 0x8214AE3C;
	}
	return 0x8214AE3C;
} // Block from 8214ADB8h-8214AE3Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 8214AE3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AE3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AE3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AE3C);
		  /* 8214AE3Ch */ case    0:  		/* mr R6, R14 */
		/* 8214AE3Ch case    0:*/		regs.R6 = regs.R14;
		/* 8214AE3Ch case    0:*/		return 0x8214AE40;
		  /* 8214AE40h */ case    1:  		/* b 16 */
		/* 8214AE40h case    1:*/		return 0x8214AE50;
		/* 8214AE40h case    1:*/		return 0x8214AE44;
	}
	return 0x8214AE44;
} // Block from 8214AE3Ch-8214AE44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214AE44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AE44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AE44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AE44);
		  /* 8214AE44h */ case    0:  		/* lwz R6, <#[R1 + 84]> */
		/* 8214AE44h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8214AE44h case    0:*/		return 0x8214AE48;
		  /* 8214AE48h */ case    1:  		/* b 8 */
		/* 8214AE48h case    1:*/		return 0x8214AE50;
		/* 8214AE48h case    1:*/		return 0x8214AE4C;
	}
	return 0x8214AE4C;
} // Block from 8214AE44h-8214AE4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214AE4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AE4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AE4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AE4C);
		  /* 8214AE4Ch */ case    0:  		/* mr R6, R15 */
		/* 8214AE4Ch case    0:*/		regs.R6 = regs.R15;
		/* 8214AE4Ch case    0:*/		return 0x8214AE50;
	}
	return 0x8214AE50;
} // Block from 8214AE4Ch-8214AE50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214AE50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AE50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AE50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AE50);
		  /* 8214AE50h */ case    0:  		/* mr R5, R19 */
		/* 8214AE50h case    0:*/		regs.R5 = regs.R19;
		/* 8214AE50h case    0:*/		return 0x8214AE54;
		  /* 8214AE54h */ case    1:  		/* lbz R8, <#[R31 + 259]> */
		/* 8214AE54h case    1:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000103) );
		/* 8214AE54h case    1:*/		return 0x8214AE58;
		  /* 8214AE58h */ case    2:  		/* li R4, 16 */
		/* 8214AE58h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8214AE58h case    2:*/		return 0x8214AE5C;
		  /* 8214AE5Ch */ case    3:  		/* lbz R7, <#[R31 + 258]> */
		/* 8214AE5Ch case    3:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000102) );
		/* 8214AE5Ch case    3:*/		return 0x8214AE60;
		  /* 8214AE60h */ case    4:  		/* addi R3, R1, 96 */
		/* 8214AE60h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8214AE60h case    4:*/		return 0x8214AE64;
		  /* 8214AE64h */ case    5:  		/* bl 1171268 */
		/* 8214AE64h case    5:*/		regs.LR = 0x8214AE68; return 0x82268DA8;
		/* 8214AE64h case    5:*/		return 0x8214AE68;
	}
	return 0x8214AE68;
} // Block from 8214AE50h-8214AE68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214AE68h
// Function '?AddFunctionExit@ShaderPDBBuilder@XGRAPHICS@@QAAXKKHK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AE68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AE68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AE68);
		  /* 8214AE68h */ case    0:  		/* mr R4, R20 */
		/* 8214AE68h case    0:*/		regs.R4 = regs.R20;
		/* 8214AE68h case    0:*/		return 0x8214AE6C;
		  /* 8214AE6Ch */ case    1:  		/* addi R5, R1, 96 */
		/* 8214AE6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8214AE6Ch case    1:*/		return 0x8214AE70;
		  /* 8214AE70h */ case    2:  		/* mr R3, R30 */
		/* 8214AE70h case    2:*/		regs.R3 = regs.R30;
		/* 8214AE70h case    2:*/		return 0x8214AE74;
		  /* 8214AE74h */ case    3:  		/* bl -19884 */
		/* 8214AE74h case    3:*/		regs.LR = 0x8214AE78; return 0x821460C8;
		/* 8214AE74h case    3:*/		return 0x8214AE78;
		  /* 8214AE78h */ case    4:  		/* lwz R11, <#[R31 + 460]> */
		/* 8214AE78h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000001CC) );
		/* 8214AE78h case    4:*/		return 0x8214AE7C;
		  /* 8214AE7Ch */ case    5:  		/* cmpwi CR6, R11, -1 */
		/* 8214AE7Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8214AE7Ch case    5:*/		return 0x8214AE80;
		  /* 8214AE80h */ case    6:  		/* bc 12, CR6_EQ, 44 */
		/* 8214AE80h case    6:*/		if ( regs.CR[6].eq ) { return 0x8214AEAC;  }
		/* 8214AE80h case    6:*/		return 0x8214AE84;
		  /* 8214AE84h */ case    7:  		/* lwz R10, <#[R29 + 44]> */
		/* 8214AE84h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000002C) );
		/* 8214AE84h case    7:*/		return 0x8214AE88;
		  /* 8214AE88h */ case    8:  		/* mr R4, R21 */
		/* 8214AE88h case    8:*/		regs.R4 = regs.R21;
		/* 8214AE88h case    8:*/		return 0x8214AE8C;
		  /* 8214AE8Ch */ case    9:  		/* mr R3, R30 */
		/* 8214AE8Ch case    9:*/		regs.R3 = regs.R30;
		/* 8214AE8Ch case    9:*/		return 0x8214AE90;
		  /* 8214AE90h */ case   10:  		/* add R5, R10, R11 */
		/* 8214AE90h case   10:*/		cpu::op::add<0>(regs,&regs.R5,regs.R10,regs.R11);
		/* 8214AE90h case   10:*/		return 0x8214AE94;
		  /* 8214AE94h */ case   11:  		/* bl -19916 */
		/* 8214AE94h case   11:*/		regs.LR = 0x8214AE98; return 0x821460C8;
		/* 8214AE94h case   11:*/		return 0x8214AE98;
		  /* 8214AE98h */ case   12:  		/* mr R5, R22 */
		/* 8214AE98h case   12:*/		regs.R5 = regs.R22;
		/* 8214AE98h case   12:*/		return 0x8214AE9C;
		  /* 8214AE9Ch */ case   13:  		/* mr R4, R23 */
		/* 8214AE9Ch case   13:*/		regs.R4 = regs.R23;
		/* 8214AE9Ch case   13:*/		return 0x8214AEA0;
		  /* 8214AEA0h */ case   14:  		/* lwz R6, <#[R31 + 456]> */
		/* 8214AEA0h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x000001C8) );
		/* 8214AEA0h case   14:*/		return 0x8214AEA4;
		  /* 8214AEA4h */ case   15:  		/* mr R3, R30 */
		/* 8214AEA4h case   15:*/		regs.R3 = regs.R30;
		/* 8214AEA4h case   15:*/		return 0x8214AEA8;
		  /* 8214AEA8h */ case   16:  		/* bl -20472 */
		/* 8214AEA8h case   16:*/		regs.LR = 0x8214AEAC; return 0x82145EB0;
		/* 8214AEA8h case   16:*/		return 0x8214AEAC;
	}
	return 0x8214AEAC;
} // Block from 8214AE68h-8214AEACh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214AEACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AEAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AEAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AEAC);
		  /* 8214AEACh */ case    0:  		/* lwz R10, <#[R31 + 468]> */
		/* 8214AEACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000001D4) );
		/* 8214AEACh case    0:*/		return 0x8214AEB0;
		  /* 8214AEB0h */ case    1:  		/* cmpwi CR6, R10, -1 */
		/* 8214AEB0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8214AEB0h case    1:*/		return 0x8214AEB4;
		  /* 8214AEB4h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 8214AEB4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8214AEE0;  }
		/* 8214AEB4h case    2:*/		return 0x8214AEB8;
		  /* 8214AEB8h */ case    3:  		/* lwz R11, <#[R29 + 44]> */
		/* 8214AEB8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 8214AEB8h case    3:*/		return 0x8214AEBC;
		  /* 8214AEBCh */ case    4:  		/* mr R4, R27 */
		/* 8214AEBCh case    4:*/		regs.R4 = regs.R27;
		/* 8214AEBCh case    4:*/		return 0x8214AEC0;
		  /* 8214AEC0h */ case    5:  		/* mr R3, R30 */
		/* 8214AEC0h case    5:*/		regs.R3 = regs.R30;
		/* 8214AEC0h case    5:*/		return 0x8214AEC4;
		  /* 8214AEC4h */ case    6:  		/* add R5, R11, R10 */
		/* 8214AEC4h case    6:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R10);
		/* 8214AEC4h case    6:*/		return 0x8214AEC8;
		  /* 8214AEC8h */ case    7:  		/* bl -19968 */
		/* 8214AEC8h case    7:*/		regs.LR = 0x8214AECC; return 0x821460C8;
		/* 8214AEC8h case    7:*/		return 0x8214AECC;
		  /* 8214AECCh */ case    8:  		/* mr R5, R26 */
		/* 8214AECCh case    8:*/		regs.R5 = regs.R26;
		/* 8214AECCh case    8:*/		return 0x8214AED0;
		  /* 8214AED0h */ case    9:  		/* mr R4, R23 */
		/* 8214AED0h case    9:*/		regs.R4 = regs.R23;
		/* 8214AED0h case    9:*/		return 0x8214AED4;
		  /* 8214AED4h */ case   10:  		/* lwz R6, <#[R31 + 464]> */
		/* 8214AED4h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x000001D0) );
		/* 8214AED4h case   10:*/		return 0x8214AED8;
		  /* 8214AED8h */ case   11:  		/* mr R3, R30 */
		/* 8214AED8h case   11:*/		regs.R3 = regs.R30;
		/* 8214AED8h case   11:*/		return 0x8214AEDC;
		  /* 8214AEDCh */ case   12:  		/* bl -20524 */
		/* 8214AEDCh case   12:*/		regs.LR = 0x8214AEE0; return 0x82145EB0;
		/* 8214AEDCh case   12:*/		return 0x8214AEE0;
	}
	return 0x8214AEE0;
} // Block from 8214AEACh-8214AEE0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214AEE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AEE0);
		  /* 8214AEE0h */ case    0:  		/* mr R5, R25 */
		/* 8214AEE0h case    0:*/		regs.R5 = regs.R25;
		/* 8214AEE0h case    0:*/		return 0x8214AEE4;
		  /* 8214AEE4h */ case    1:  		/* lwz R6, <#[R31 + 472]> */
		/* 8214AEE4h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x000001D8) );
		/* 8214AEE4h case    1:*/		return 0x8214AEE8;
		  /* 8214AEE8h */ case    2:  		/* mr R4, R23 */
		/* 8214AEE8h case    2:*/		regs.R4 = regs.R23;
		/* 8214AEE8h case    2:*/		return 0x8214AEEC;
		  /* 8214AEECh */ case    3:  		/* mr R3, R30 */
		/* 8214AEECh case    3:*/		regs.R3 = regs.R30;
		/* 8214AEECh case    3:*/		return 0x8214AEF0;
		  /* 8214AEF0h */ case    4:  		/* bl -20544 */
		/* 8214AEF0h case    4:*/		regs.LR = 0x8214AEF4; return 0x82145EB0;
		/* 8214AEF0h case    4:*/		return 0x8214AEF4;
		  /* 8214AEF4h */ case    5:  		/* mr R4, R24 */
		/* 8214AEF4h case    5:*/		regs.R4 = regs.R24;
		/* 8214AEF4h case    5:*/		return 0x8214AEF8;
		  /* 8214AEF8h */ case    6:  		/* mr R3, R30 */
		/* 8214AEF8h case    6:*/		regs.R3 = regs.R30;
		/* 8214AEF8h case    6:*/		return 0x8214AEFC;
		  /* 8214AEFCh */ case    7:  		/* lwz R7, <#[R31 + 268]> */
		/* 8214AEFCh case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000010C) );
		/* 8214AEFCh case    7:*/		return 0x8214AF00;
		  /* 8214AF00h */ case    8:  		/* lwz R6, <#[R31 + 264]> */
		/* 8214AF00h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000108) );
		/* 8214AF00h case    8:*/		return 0x8214AF04;
		  /* 8214AF04h */ case    9:  		/* lwz R5, <#[R31 + 260]> */
		/* 8214AF04h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000104) );
		/* 8214AF04h case    9:*/		return 0x8214AF08;
		  /* 8214AF08h */ case   10:  		/* bl -20568 */
		/* 8214AF08h case   10:*/		regs.LR = 0x8214AF0C; return 0x82145EB0;
		/* 8214AF08h case   10:*/		return 0x8214AF0C;
		  /* 8214AF0Ch */ case   11:  		/* mr R3, R30 */
		/* 8214AF0Ch case   11:*/		regs.R3 = regs.R30;
		/* 8214AF0Ch case   11:*/		return 0x8214AF10;
	}
	return 0x8214AF10;
} // Block from 8214AEE0h-8214AF10h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214AF10h
// Function '?SetLexicalScopeCount@ShaderPDBBuilder@XGRAPHICS@@QAAJK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AF10);
		  /* 8214AF10h */ case    0:  		/* bl -17088 */
		/* 8214AF10h case    0:*/		regs.LR = 0x8214AF14; return 0x82146C50;
		/* 8214AF10h case    0:*/		return 0x8214AF14;
		  /* 8214AF14h */ case    1:  		/* mr R5, R31 */
		/* 8214AF14h case    1:*/		regs.R5 = regs.R31;
		/* 8214AF14h case    1:*/		return 0x8214AF18;
		  /* 8214AF18h */ case    2:  		/* mr R4, R30 */
		/* 8214AF18h case    2:*/		regs.R4 = regs.R30;
		/* 8214AF18h case    2:*/		return 0x8214AF1C;
		  /* 8214AF1Ch */ case    3:  		/* mr R3, R29 */
		/* 8214AF1Ch case    3:*/		regs.R3 = regs.R29;
		/* 8214AF1Ch case    3:*/		return 0x8214AF20;
		  /* 8214AF20h */ case    4:  		/* bl -10848 */
		/* 8214AF20h case    4:*/		regs.LR = 0x8214AF24; return 0x821484C0;
		/* 8214AF20h case    4:*/		return 0x8214AF24;
		  /* 8214AF24h */ case    5:  		/* addi R5, R31, 276 */
		/* 8214AF24h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x114);
		/* 8214AF24h case    5:*/		return 0x8214AF28;
		  /* 8214AF28h */ case    6:  		/* mr R4, R30 */
		/* 8214AF28h case    6:*/		regs.R4 = regs.R30;
		/* 8214AF28h case    6:*/		return 0x8214AF2C;
		  /* 8214AF2Ch */ case    7:  		/* lwz R6, <#[R31 + 272]> */
		/* 8214AF2Ch case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000110) );
		/* 8214AF2Ch case    7:*/		return 0x8214AF30;
		  /* 8214AF30h */ case    8:  		/* mr R3, R29 */
		/* 8214AF30h case    8:*/		regs.R3 = regs.R29;
		/* 8214AF30h case    8:*/		return 0x8214AF34;
		  /* 8214AF34h */ case    9:  		/* bl -16332 */
		/* 8214AF34h case    9:*/		regs.LR = 0x8214AF38; return 0x82146F68;
		/* 8214AF34h case    9:*/		return 0x8214AF38;
		  /* 8214AF38h */ case   10:  		/* addi R6, R31, 336 */
		/* 8214AF38h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x150);
		/* 8214AF38h case   10:*/		return 0x8214AF3C;
		  /* 8214AF3Ch */ case   11:  		/* addi R5, R31, 324 */
		/* 8214AF3Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x144);
		/* 8214AF3Ch case   11:*/		return 0x8214AF40;
		  /* 8214AF40h */ case   12:  		/* mr R4, R30 */
		/* 8214AF40h case   12:*/		regs.R4 = regs.R30;
		/* 8214AF40h case   12:*/		return 0x8214AF44;
		  /* 8214AF44h */ case   13:  		/* mr R3, R29 */
		/* 8214AF44h case   13:*/		regs.R3 = regs.R29;
		/* 8214AF44h case   13:*/		return 0x8214AF48;
		  /* 8214AF48h */ case   14:  		/* bl -9360 */
		/* 8214AF48h case   14:*/		regs.LR = 0x8214AF4C; return 0x82148AB8;
		/* 8214AF48h case   14:*/		return 0x8214AF4C;
		  /* 8214AF4Ch */ case   15:  		/* addi R5, R31, 288 */
		/* 8214AF4Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x120);
		/* 8214AF4Ch case   15:*/		return 0x8214AF50;
		  /* 8214AF50h */ case   16:  		/* mr R4, R30 */
		/* 8214AF50h case   16:*/		regs.R4 = regs.R30;
		/* 8214AF50h case   16:*/		return 0x8214AF54;
		  /* 8214AF54h */ case   17:  		/* lwz R6, <#[R31 + 272]> */
		/* 8214AF54h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000110) );
		/* 8214AF54h case   17:*/		return 0x8214AF58;
		  /* 8214AF58h */ case   18:  		/* mr R3, R29 */
		/* 8214AF58h case   18:*/		regs.R3 = regs.R29;
		/* 8214AF58h case   18:*/		return 0x8214AF5C;
		  /* 8214AF5Ch */ case   19:  		/* bl -16028 */
		/* 8214AF5Ch case   19:*/		regs.LR = 0x8214AF60; return 0x821470C0;
		/* 8214AF5Ch case   19:*/		return 0x8214AF60;
		  /* 8214AF60h */ case   20:  		/* addi R5, R31, 352 */
		/* 8214AF60h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x160);
		/* 8214AF60h case   20:*/		return 0x8214AF64;
		  /* 8214AF64h */ case   21:  		/* mr R4, R30 */
		/* 8214AF64h case   21:*/		regs.R4 = regs.R30;
		/* 8214AF64h case   21:*/		return 0x8214AF68;
		  /* 8214AF68h */ case   22:  		/* mr R3, R29 */
		/* 8214AF68h case   22:*/		regs.R3 = regs.R29;
		/* 8214AF68h case   22:*/		return 0x8214AF6C;
		  /* 8214AF6Ch */ case   23:  		/* bl -15564 */
		/* 8214AF6Ch case   23:*/		regs.LR = 0x8214AF70; return 0x821472A0;
		/* 8214AF6Ch case   23:*/		return 0x8214AF70;
	}
	return 0x8214AF70;
} // Block from 8214AF10h-8214AF70h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8214AF70h
// Function '?AddLexicalScope@ShaderPDBBuilder@XGRAPHICS@@QAAXKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214AF70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214AF70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214AF70);
		  /* 8214AF70h */ case    0:  		/* addi R5, R31, 376 */
		/* 8214AF70h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x178);
		/* 8214AF70h case    0:*/		return 0x8214AF74;
		  /* 8214AF74h */ case    1:  		/* mr R4, R30 */
		/* 8214AF74h case    1:*/		regs.R4 = regs.R30;
		/* 8214AF74h case    1:*/		return 0x8214AF78;
		  /* 8214AF78h */ case    2:  		/* mr R3, R29 */
		/* 8214AF78h case    2:*/		regs.R3 = regs.R29;
		/* 8214AF78h case    2:*/		return 0x8214AF7C;
		  /* 8214AF7Ch */ case    3:  		/* bl -8948 */
		/* 8214AF7Ch case    3:*/		regs.LR = 0x8214AF80; return 0x82148C88;
		/* 8214AF7Ch case    3:*/		return 0x8214AF80;
		  /* 8214AF80h */ case    4:  		/* addi R5, R31, 364 */
		/* 8214AF80h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x16C);
		/* 8214AF80h case    4:*/		return 0x8214AF84;
		  /* 8214AF84h */ case    5:  		/* mr R4, R30 */
		/* 8214AF84h case    5:*/		regs.R4 = regs.R30;
		/* 8214AF84h case    5:*/		return 0x8214AF88;
		  /* 8214AF88h */ case    6:  		/* lwz R6, <#[R31 + 272]> */
		/* 8214AF88h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000110) );
		/* 8214AF88h case    6:*/		return 0x8214AF8C;
		  /* 8214AF8Ch */ case    7:  		/* mr R3, R29 */
		/* 8214AF8Ch case    7:*/		regs.R3 = regs.R29;
		/* 8214AF8Ch case    7:*/		return 0x8214AF90;
		  /* 8214AF90h */ case    8:  		/* bl -15328 */
		/* 8214AF90h case    8:*/		regs.LR = 0x8214AF94; return 0x821473B0;
		/* 8214AF90h case    8:*/		return 0x8214AF94;
		  /* 8214AF94h */ case    9:  		/* addi R5, R31, 300 */
		/* 8214AF94h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x12C);
		/* 8214AF94h case    9:*/		return 0x8214AF98;
		  /* 8214AF98h */ case   10:  		/* mr R4, R30 */
		/* 8214AF98h case   10:*/		regs.R4 = regs.R30;
		/* 8214AF98h case   10:*/		return 0x8214AF9C;
		  /* 8214AF9Ch */ case   11:  		/* lwz R6, <#[R31 + 272]> */
		/* 8214AF9Ch case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000110) );
		/* 8214AF9Ch case   11:*/		return 0x8214AFA0;
		  /* 8214AFA0h */ case   12:  		/* mr R3, R29 */
		/* 8214AFA0h case   12:*/		regs.R3 = regs.R29;
		/* 8214AFA0h case   12:*/		return 0x8214AFA4;
		  /* 8214AFA4h */ case   13:  		/* bl -14996 */
		/* 8214AFA4h case   13:*/		regs.LR = 0x8214AFA8; return 0x82147510;
		/* 8214AFA4h case   13:*/		return 0x8214AFA8;
		  /* 8214AFA8h */ case   14:  		/* addi R5, R31, 312 */
		/* 8214AFA8h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x138);
		/* 8214AFA8h case   14:*/		return 0x8214AFAC;
		  /* 8214AFACh */ case   15:  		/* mr R4, R30 */
		/* 8214AFACh case   15:*/		regs.R4 = regs.R30;
		/* 8214AFACh case   15:*/		return 0x8214AFB0;
		  /* 8214AFB0h */ case   16:  		/* mr R3, R29 */
		/* 8214AFB0h case   16:*/		regs.R3 = regs.R29;
		/* 8214AFB0h case   16:*/		return 0x8214AFB4;
		  /* 8214AFB4h */ case   17:  		/* bl -14548 */
		/* 8214AFB4h case   17:*/		regs.LR = 0x8214AFB8; return 0x821476E0;
		/* 8214AFB4h case   17:*/		return 0x8214AFB8;
		  /* 8214AFB8h */ case   18:  		/* addi R7, R31, 420 */
		/* 8214AFB8h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R31,0x1A4);
		/* 8214AFB8h case   18:*/		return 0x8214AFBC;
		  /* 8214AFBCh */ case   19:  		/* addi R6, R31, 408 */
		/* 8214AFBCh case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x198);
		/* 8214AFBCh case   19:*/		return 0x8214AFC0;
		  /* 8214AFC0h */ case   20:  		/* addi R5, R31, 396 */
		/* 8214AFC0h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x18C);
		/* 8214AFC0h case   20:*/		return 0x8214AFC4;
		  /* 8214AFC4h */ case   21:  		/* mr R4, R30 */
		/* 8214AFC4h case   21:*/		regs.R4 = regs.R30;
		/* 8214AFC4h case   21:*/		return 0x8214AFC8;
		  /* 8214AFC8h */ case   22:  		/* mr R3, R29 */
		/* 8214AFC8h case   22:*/		regs.R3 = regs.R29;
		/* 8214AFC8h case   22:*/		return 0x8214AFCC;
		  /* 8214AFCCh */ case   23:  		/* bl -14148 */
		/* 8214AFCCh case   23:*/		regs.LR = 0x8214AFD0; return 0x82147888;
		/* 8214AFCCh case   23:*/		return 0x8214AFD0;
		  /* 8214AFD0h */ case   24:  		/* addi R5, R31, 432 */
		/* 8214AFD0h case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x1B0);
		/* 8214AFD0h case   24:*/		return 0x8214AFD4;
		  /* 8214AFD4h */ case   25:  		/* mr R4, R30 */
		/* 8214AFD4h case   25:*/		regs.R4 = regs.R30;
		/* 8214AFD4h case   25:*/		return 0x8214AFD8;
		  /* 8214AFD8h */ case   26:  		/* mr R3, R29 */
		/* 8214AFD8h case   26:*/		regs.R3 = regs.R29;
		/* 8214AFD8h case   26:*/		return 0x8214AFDC;
		  /* 8214AFDCh */ case   27:  		/* bl -13324 */
		/* 8214AFDCh case   27:*/		regs.LR = 0x8214AFE0; return 0x82147BD0;
		/* 8214AFDCh case   27:*/		return 0x8214AFE0;
		  /* 8214AFE0h */ case   28:  		/* addi R5, R31, 444 */
		/* 8214AFE0h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x1BC);
		/* 8214AFE0h case   28:*/		return 0x8214AFE4;
		  /* 8214AFE4h */ case   29:  		/* mr R4, R30 */
		/* 8214AFE4h case   29:*/		regs.R4 = regs.R30;
		/* 8214AFE4h case   29:*/		return 0x8214AFE8;
		  /* 8214AFE8h */ case   30:  		/* mr R3, R29 */
		/* 8214AFE8h case   30:*/		regs.R3 = regs.R29;
		/* 8214AFE8h case   30:*/		return 0x8214AFEC;
		  /* 8214AFECh */ case   31:  		/* bl -12700 */
		/* 8214AFECh case   31:*/		regs.LR = 0x8214AFF0; return 0x82147E50;
		/* 8214AFECh case   31:*/		return 0x8214AFF0;
		  /* 8214AFF0h */ case   32:  		/* mr R4, R28 */
		/* 8214AFF0h case   32:*/		regs.R4 = regs.R28;
		/* 8214AFF0h case   32:*/		return 0x8214AFF4;
		  /* 8214AFF4h */ case   33:  		/* mr R3, R30 */
		/* 8214AFF4h case   33:*/		regs.R3 = regs.R30;
		/* 8214AFF4h case   33:*/		return 0x8214AFF8;
		  /* 8214AFF8h */ case   34:  		/* bl -20624 */
		/* 8214AFF8h case   34:*/		regs.LR = 0x8214AFFC; return 0x82145F68;
		/* 8214AFF8h case   34:*/		return 0x8214AFFC;
		  /* 8214AFFCh */ case   35:  		/* lwz R11, <#[R18 + 4]> */
		/* 8214AFFCh case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 8214AFFCh case   35:*/		return 0x8214B000;
	}
	return 0x8214B000;
} // Block from 8214AF70h-8214B000h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8214B000h
// Function '?SetAssertCount@ShaderPDBBuilder@XGRAPHICS@@QAAJK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B000);
		  /* 8214B000h */ case    0:  		/* lwz R10, <#[R18]> */
		/* 8214B000h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000000) );
		/* 8214B000h case    0:*/		return 0x8214B004;
		  /* 8214B004h */ case    1:  		/* addi R31, R31, 476 */
		/* 8214B004h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1DC);
		/* 8214B004h case    1:*/		return 0x8214B008;
		  /* 8214B008h */ case    2:  		/* mulli R11, R11, 476 */
		/* 8214B008h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1DC);
		/* 8214B008h case    2:*/		return 0x8214B00C;
		  /* 8214B00Ch */ case    3:  		/* add R11, R11, R10 */
		/* 8214B00Ch case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214B00Ch case    3:*/		return 0x8214B010;
		  /* 8214B010h */ case    4:  		/* cmplw CR6, R31, R11 */
		/* 8214B010h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8214B010h case    4:*/		return 0x8214B014;
		  /* 8214B014h */ case    5:  		/* bc 12, CR6_LT, -600 */
		/* 8214B014h case    5:*/		if ( regs.CR[6].lt ) { return 0x8214ADBC;  }
		/* 8214B014h case    5:*/		return 0x8214B018;
		  /* 8214B018h */ case    6:  		/* lwz R28, <#[R1 + 88]> */
		/* 8214B018h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000058) );
		/* 8214B018h case    6:*/		return 0x8214B01C;
	}
	return 0x8214B01C;
} // Block from 8214B000h-8214B01Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214B01Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B01C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B01C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B01C);
		  /* 8214B01Ch */ case    0:  		/* mr R4, R28 */
		/* 8214B01Ch case    0:*/		regs.R4 = regs.R28;
		/* 8214B01Ch case    0:*/		return 0x8214B020;
		  /* 8214B020h */ case    1:  		/* mr R3, R30 */
		/* 8214B020h case    1:*/		regs.R3 = regs.R30;
		/* 8214B020h case    1:*/		return 0x8214B024;
		  /* 8214B024h */ case    2:  		/* bl -20668 */
		/* 8214B024h case    2:*/		regs.LR = 0x8214B028; return 0x82145F68;
		/* 8214B024h case    2:*/		return 0x8214B028;
		  /* 8214B028h */ case    3:  		/* addi R1, R1, 272 */
		/* 8214B028h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 8214B028h case    3:*/		return 0x8214B02C;
		  /* 8214B02Ch */ case    4:  		/* b -761276 */
		/* 8214B02Ch case    4:*/		return 0x82091270;
		/* 8214B02Ch case    4:*/		return 0x8214B030;
	}
	return 0x8214B030;
} // Block from 8214B01Ch-8214B030h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214B030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B030);
		  /* 8214B030h */ case    0:  		/* mfspr R12, LR */
		/* 8214B030h case    0:*/		regs.R12 = regs.LR;
		/* 8214B030h case    0:*/		return 0x8214B034;
		  /* 8214B034h */ case    1:  		/* bl -761320 */
		/* 8214B034h case    1:*/		regs.LR = 0x8214B038; return 0x8209124C;
		/* 8214B034h case    1:*/		return 0x8214B038;
		  /* 8214B038h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214B038h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214B038h case    2:*/		return 0x8214B03C;
		  /* 8214B03Ch */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214B03Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214B03Ch case    3:*/		return 0x8214B040;
		  /* 8214B040h */ case    4:  		/* mr R27, R4 */
		/* 8214B040h case    4:*/		regs.R27 = regs.R4;
		/* 8214B040h case    4:*/		return 0x8214B044;
		  /* 8214B044h */ case    5:  		/* addi R26, R3, 144 */
		/* 8214B044h case    5:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x90);
		/* 8214B044h case    5:*/		return 0x8214B048;
		  /* 8214B048h */ case    6:  		/* li R25, -1 */
		/* 8214B048h case    6:*/		cpu::op::li<0>(regs,&regs.R25,0xFFFFFFFF);
		/* 8214B048h case    6:*/		return 0x8214B04C;
		  /* 8214B04Ch */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 8214B04Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214B04Ch case    7:*/		return 0x8214B050;
		  /* 8214B050h */ case    8:  		/* bc 12, CR6_LT, 120 */
		/* 8214B050h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214B0C8;  }
		/* 8214B050h case    8:*/		return 0x8214B054;
		  /* 8214B054h */ case    9:  		/* lwz R28, <#[R3 + 48]> */
		/* 8214B054h case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000030) );
		/* 8214B054h case    9:*/		return 0x8214B058;
		  /* 8214B058h */ case   10:  		/* mr R11, R4 */
		/* 8214B058h case   10:*/		regs.R11 = regs.R4;
		/* 8214B058h case   10:*/		return 0x8214B05C;
		  /* 8214B05Ch */ case   11:  		/* lbz R10, <#[R11]> */
		/* 8214B05Ch case   11:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214B05Ch case   11:*/		return 0x8214B060;
	}
	return 0x8214B060;
} // Block from 8214B030h-8214B060h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214B060h
// Function '?SetDebugPrintCount@ShaderPDBBuilder@XGRAPHICS@@QAAJK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B060);
		  /* 8214B060h */ case    0:  		/* addi R11, R11, 1 */
		/* 8214B060h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214B060h case    0:*/		return 0x8214B064;
		  /* 8214B064h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8214B064h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8214B064h case    1:*/		return 0x8214B068;
		  /* 8214B068h */ case    2:  		/* bc 4, CR6_EQ, -12 */
		/* 8214B068h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8214B05C;  }
		/* 8214B068h case    2:*/		return 0x8214B06C;
		  /* 8214B06Ch */ case    3:  		/* subf R11, R27, R11 */
		/* 8214B06Ch case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 8214B06Ch case    3:*/		return 0x8214B070;
		  /* 8214B070h */ case    4:  		/* lwz R10, <#[R3 + 52]> */
		/* 8214B070h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000034) );
		/* 8214B070h case    4:*/		return 0x8214B074;
		  /* 8214B074h */ case    5:  		/* addi R31, R3, 44 */
		/* 8214B074h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R3,0x2C);
		/* 8214B074h case    5:*/		return 0x8214B078;
		  /* 8214B078h */ case    6:  		/* addi R11, R11, -1 */
		/* 8214B078h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8214B078h case    6:*/		return 0x8214B07C;
		  /* 8214B07Ch */ case    7:  		/* rlwinm R29, R11, 0, 0, 31 */
		/* 8214B07Ch case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R29,regs.R11);
		/* 8214B07Ch case    7:*/		return 0x8214B080;
		  /* 8214B080h */ case    8:  		/* add R11, R29, R28 */
		/* 8214B080h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R28);
		/* 8214B080h case    8:*/		return 0x8214B084;
		  /* 8214B084h */ case    9:  		/* addi R30, R11, 1 */
		/* 8214B084h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x1);
		/* 8214B084h case    9:*/		return 0x8214B088;
		  /* 8214B088h */ case   10:  		/* cmplw CR6, R30, R10 */
		/* 8214B088h case   10:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 8214B088h case   10:*/		return 0x8214B08C;
		  /* 8214B08Ch */ case   11:  		/* bc 4, CR6_GT, 20 */
		/* 8214B08Ch case   11:*/		if ( !regs.CR[6].gt ) { return 0x8214B0A0;  }
		/* 8214B08Ch case   11:*/		return 0x8214B090;
		  /* 8214B090h */ case   12:  		/* mr R5, R26 */
		/* 8214B090h case   12:*/		regs.R5 = regs.R26;
		/* 8214B090h case   12:*/		return 0x8214B094;
		  /* 8214B094h */ case   13:  		/* mr R4, R30 */
		/* 8214B094h case   13:*/		regs.R4 = regs.R30;
		/* 8214B094h case   13:*/		return 0x8214B098;
		  /* 8214B098h */ case   14:  		/* mr R3, R31 */
		/* 8214B098h case   14:*/		regs.R3 = regs.R31;
		/* 8214B098h case   14:*/		return 0x8214B09C;
		  /* 8214B09Ch */ case   15:  		/* bl -17844 */
		/* 8214B09Ch case   15:*/		regs.LR = 0x8214B0A0; return 0x82146AE8;
		/* 8214B09Ch case   15:*/		return 0x8214B0A0;
	}
	return 0x8214B0A0;
} // Block from 8214B060h-8214B0A0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214B0A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B0A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B0A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B0A0);
		  /* 8214B0A0h */ case    0:  		/* stw R30, <#[R31 + 4]> */
		/* 8214B0A0h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8214B0A0h case    0:*/		return 0x8214B0A4;
		  /* 8214B0A4h */ case    1:  		/* lwz R11, <#[R26]> */
		/* 8214B0A4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8214B0A4h case    1:*/		return 0x8214B0A8;
		  /* 8214B0A8h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214B0A8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214B0A8h case    2:*/		return 0x8214B0AC;
		  /* 8214B0ACh */ case    3:  		/* bc 12, CR6_LT, 28 */
		/* 8214B0ACh case    3:*/		if ( regs.CR[6].lt ) { return 0x8214B0C8;  }
		/* 8214B0ACh case    3:*/		return 0x8214B0B0;
		  /* 8214B0B0h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 8214B0B0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214B0B0h case    4:*/		return 0x8214B0B4;
		  /* 8214B0B4h */ case    5:  		/* addi R5, R29, 1 */
		/* 8214B0B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x1);
		/* 8214B0B4h case    5:*/		return 0x8214B0B8;
		  /* 8214B0B8h */ case    6:  		/* mr R4, R27 */
		/* 8214B0B8h case    6:*/		regs.R4 = regs.R27;
		/* 8214B0B8h case    6:*/		return 0x8214B0BC;
		  /* 8214B0BCh */ case    7:  		/* add R3, R11, R28 */
		/* 8214B0BCh case    7:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R28);
		/* 8214B0BCh case    7:*/		return 0x8214B0C0;
	}
	return 0x8214B0C0;
} // Block from 8214B0A0h-8214B0C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214B0C0h
// Function '?SetDebugPrintInfo@ShaderPDBBuilder@XGRAPHICS@@QAAXKPBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B0C0);
		  /* 8214B0C0h */ case    0:  		/* bl -759568 */
		/* 8214B0C0h case    0:*/		regs.LR = 0x8214B0C4; return 0x820919B0;
		/* 8214B0C0h case    0:*/		return 0x8214B0C4;
		  /* 8214B0C4h */ case    1:  		/* mr R25, R28 */
		/* 8214B0C4h case    1:*/		regs.R25 = regs.R28;
		/* 8214B0C4h case    1:*/		return 0x8214B0C8;
	}
	return 0x8214B0C8;
} // Block from 8214B0C0h-8214B0C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214B0C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B0C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B0C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B0C8);
		  /* 8214B0C8h */ case    0:  		/* mr R3, R25 */
		/* 8214B0C8h case    0:*/		regs.R3 = regs.R25;
		/* 8214B0C8h case    0:*/		return 0x8214B0CC;
		  /* 8214B0CCh */ case    1:  		/* addi R1, R1, 144 */
		/* 8214B0CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214B0CCh case    1:*/		return 0x8214B0D0;
		  /* 8214B0D0h */ case    2:  		/* b -761396 */
		/* 8214B0D0h case    2:*/		return 0x8209129C;
		/* 8214B0D0h case    2:*/		return 0x8214B0D4;
		  /* 8214B0D4h */ case    3:  		/* nop */
		/* 8214B0D4h case    3:*/		cpu::op::nop();
		/* 8214B0D4h case    3:*/		return 0x8214B0D8;
	}
	return 0x8214B0D8;
} // Block from 8214B0C8h-8214B0D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214B0D8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B0D8);
		  /* 8214B0D8h */ case    0:  		/* mfspr R12, LR */
		/* 8214B0D8h case    0:*/		regs.R12 = regs.LR;
		/* 8214B0D8h case    0:*/		return 0x8214B0DC;
		  /* 8214B0DCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214B0DCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214B0DCh case    1:*/		return 0x8214B0E0;
		  /* 8214B0E0h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8214B0E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8214B0E0h case    2:*/		return 0x8214B0E4;
		  /* 8214B0E4h */ case    3:  		/* lis R4, 25735 */
		/* 8214B0E4h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x6487);
		/* 8214B0E4h case    3:*/		return 0x8214B0E8;
		  /* 8214B0E8h */ case    4:  		/* li R3, 172 */
		/* 8214B0E8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0xAC);
		/* 8214B0E8h case    4:*/		return 0x8214B0EC;
		  /* 8214B0ECh */ case    5:  		/* bl -798444 */
		/* 8214B0ECh case    5:*/		regs.LR = 0x8214B0F0; return 0x82088200;
		/* 8214B0ECh case    5:*/		return 0x8214B0F0;
		  /* 8214B0F0h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8214B0F0h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8214B0F0h case    6:*/		return 0x8214B0F4;
		  /* 8214B0F4h */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 8214B0F4h case    7:*/		if ( regs.CR[0].eq ) { return 0x8214B100;  }
		/* 8214B0F4h case    7:*/		return 0x8214B0F8;
		  /* 8214B0F8h */ case    8:  		/* bl -7872 */
		/* 8214B0F8h case    8:*/		regs.LR = 0x8214B0FC; return 0x82149238;
		/* 8214B0F8h case    8:*/		return 0x8214B0FC;
		  /* 8214B0FCh */ case    9:  		/* b 8 */
		/* 8214B0FCh case    9:*/		return 0x8214B104;
		/* 8214B0FCh case    9:*/		return 0x8214B100;
	}
	return 0x8214B100;
} // Block from 8214B0D8h-8214B100h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214B100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B100);
		  /* 8214B100h */ case    0:  		/* li R3, 0 */
		/* 8214B100h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214B100h case    0:*/		return 0x8214B104;
	}
	return 0x8214B104;
} // Block from 8214B100h-8214B104h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214B104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B104);
		  /* 8214B104h */ case    0:  		/* addi R1, R1, 96 */
		/* 8214B104h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214B104h case    0:*/		return 0x8214B108;
		  /* 8214B108h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214B108h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214B108h case    1:*/		return 0x8214B10C;
		  /* 8214B10Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8214B10Ch case    2:*/		regs.LR = regs.R12;
		/* 8214B10Ch case    2:*/		return 0x8214B110;
		  /* 8214B110h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8214B110h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214B110h case    3:*/		return 0x8214B114;
	}
	return 0x8214B114;
} // Block from 8214B104h-8214B114h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214B114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B114);
		  /* 8214B114h */ case    0:  		/* nop */
		/* 8214B114h case    0:*/		cpu::op::nop();
		/* 8214B114h case    0:*/		return 0x8214B118;
	}
	return 0x8214B118;
} // Block from 8214B114h-8214B118h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214B118h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B118);
		  /* 8214B118h */ case    0:  		/* b -6376 */
		/* 8214B118h case    0:*/		return 0x82149830;
		/* 8214B118h case    0:*/		return 0x8214B11C;
		  /* 8214B11Ch */ case    1:  		/* nop */
		/* 8214B11Ch case    1:*/		cpu::op::nop();
		/* 8214B11Ch case    1:*/		return 0x8214B120;
	}
	return 0x8214B120;
} // Block from 8214B118h-8214B120h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214B120h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B120);
		  /* 8214B120h */ case    0:  		/* b -4568 */
		/* 8214B120h case    0:*/		return 0x82149F48;
		/* 8214B120h case    0:*/		return 0x8214B124;
		  /* 8214B124h */ case    1:  		/* nop */
		/* 8214B124h case    1:*/		cpu::op::nop();
		/* 8214B124h case    1:*/		return 0x8214B128;
		  /* 8214B128h */ case    2:  		/* b -4408 */
		/* 8214B128h case    2:*/		return 0x82149FF0;
		/* 8214B128h case    2:*/		return 0x8214B12C;
		  /* 8214B12Ch */ case    3:  		/* nop */
		/* 8214B12Ch case    3:*/		cpu::op::nop();
		/* 8214B12Ch case    3:*/		return 0x8214B130;
	}
	return 0x8214B130;
} // Block from 8214B120h-8214B130h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214B130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B130);
		  /* 8214B130h */ case    0:  		/* mfspr R12, LR */
		/* 8214B130h case    0:*/		regs.R12 = regs.LR;
		/* 8214B130h case    0:*/		return 0x8214B134;
		  /* 8214B134h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214B134h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214B134h case    1:*/		return 0x8214B138;
		  /* 8214B138h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8214B138h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8214B138h case    2:*/		return 0x8214B13C;
		  /* 8214B13Ch */ case    3:  		/* lwz R11, <#[R1 + 180]> */
		/* 8214B13Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 8214B13Ch case    3:*/		return 0x8214B140;
		  /* 8214B140h */ case    4:  		/* stw R11, <#[R1 + 84]> */
		/* 8214B140h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8214B140h case    4:*/		return 0x8214B144;
		  /* 8214B144h */ case    5:  		/* bl -3788 */
		/* 8214B144h case    5:*/		regs.LR = 0x8214B148; return 0x8214A278;
		/* 8214B144h case    5:*/		return 0x8214B148;
		  /* 8214B148h */ case    6:  		/* addi R1, R1, 96 */
		/* 8214B148h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214B148h case    6:*/		return 0x8214B14C;
		  /* 8214B14Ch */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214B14Ch case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214B14Ch case    7:*/		return 0x8214B150;
	}
	return 0x8214B150;
} // Block from 8214B130h-8214B150h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214B150h
// Function '?SetDebugPrintArgumentCount@ShaderPDBBuilder@XGRAPHICS@@QAAJKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B150);
		  /* 8214B150h */ case    0:  		/* mtspr LR, R12 */
		/* 8214B150h case    0:*/		regs.LR = regs.R12;
		/* 8214B150h case    0:*/		return 0x8214B154;
		  /* 8214B154h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8214B154h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214B154h case    1:*/		return 0x8214B158;
	}
	return 0x8214B158;
} // Block from 8214B150h-8214B158h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214B158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B158);
		  /* 8214B158h */ case    0:  		/* b -3648 */
		/* 8214B158h case    0:*/		return 0x8214A318;
		/* 8214B158h case    0:*/		return 0x8214B15C;
		  /* 8214B15Ch */ case    1:  		/* nop */
		/* 8214B15Ch case    1:*/		cpu::op::nop();
		/* 8214B15Ch case    1:*/		return 0x8214B160;
		  /* 8214B160h */ case    2:  		/* b -3560 */
		/* 8214B160h case    2:*/		return 0x8214A378;
		/* 8214B160h case    2:*/		return 0x8214B164;
		  /* 8214B164h */ case    3:  		/* nop */
		/* 8214B164h case    3:*/		cpu::op::nop();
		/* 8214B164h case    3:*/		return 0x8214B168;
		  /* 8214B168h */ case    4:  		/* b -3472 */
		/* 8214B168h case    4:*/		return 0x8214A3D8;
		/* 8214B168h case    4:*/		return 0x8214B16C;
		  /* 8214B16Ch */ case    5:  		/* nop */
		/* 8214B16Ch case    5:*/		cpu::op::nop();
		/* 8214B16Ch case    5:*/		return 0x8214B170;
		  /* 8214B170h */ case    6:  		/* b -3304 */
		/* 8214B170h case    6:*/		return 0x8214A488;
		/* 8214B170h case    6:*/		return 0x8214B174;
		  /* 8214B174h */ case    7:  		/* nop */
		/* 8214B174h case    7:*/		cpu::op::nop();
		/* 8214B174h case    7:*/		return 0x8214B178;
		  /* 8214B178h */ case    8:  		/* b -3144 */
		/* 8214B178h case    8:*/		return 0x8214A530;
		/* 8214B178h case    8:*/		return 0x8214B17C;
		  /* 8214B17Ch */ case    9:  		/* nop */
		/* 8214B17Ch case    9:*/		cpu::op::nop();
		/* 8214B17Ch case    9:*/		return 0x8214B180;
		  /* 8214B180h */ case   10:  		/* b -3056 */
		/* 8214B180h case   10:*/		return 0x8214A590;
		/* 8214B180h case   10:*/		return 0x8214B184;
		  /* 8214B184h */ case   11:  		/* nop */
		/* 8214B184h case   11:*/		cpu::op::nop();
		/* 8214B184h case   11:*/		return 0x8214B188;
		  /* 8214B188h */ case   12:  		/* b -4168 */
		/* 8214B188h case   12:*/		return 0x8214A140;
		/* 8214B188h case   12:*/		return 0x8214B18C;
		  /* 8214B18Ch */ case   13:  		/* nop */
		/* 8214B18Ch case   13:*/		cpu::op::nop();
		/* 8214B18Ch case   13:*/		return 0x8214B190;
		  /* 8214B190h */ case   14:  		/* b -2928 */
		/* 8214B190h case   14:*/		return 0x8214A620;
		/* 8214B190h case   14:*/		return 0x8214B194;
		  /* 8214B194h */ case   15:  		/* nop */
		/* 8214B194h case   15:*/		cpu::op::nop();
		/* 8214B194h case   15:*/		return 0x8214B198;
		  /* 8214B198h */ case   16:  		/* b -2840 */
		/* 8214B198h case   16:*/		return 0x8214A680;
		/* 8214B198h case   16:*/		return 0x8214B19C;
		  /* 8214B19Ch */ case   17:  		/* nop */
		/* 8214B19Ch case   17:*/		cpu::op::nop();
		/* 8214B19Ch case   17:*/		return 0x8214B1A0;
		  /* 8214B1A0h */ case   18:  		/* b -2752 */
		/* 8214B1A0h case   18:*/		return 0x8214A6E0;
		/* 8214B1A0h case   18:*/		return 0x8214B1A4;
		  /* 8214B1A4h */ case   19:  		/* nop */
		/* 8214B1A4h case   19:*/		cpu::op::nop();
		/* 8214B1A4h case   19:*/		return 0x8214B1A8;
		  /* 8214B1A8h */ case   20:  		/* b -2616 */
		/* 8214B1A8h case   20:*/		return 0x8214A770;
		/* 8214B1A8h case   20:*/		return 0x8214B1AC;
		  /* 8214B1ACh */ case   21:  		/* nop */
		/* 8214B1ACh case   21:*/		cpu::op::nop();
		/* 8214B1ACh case   21:*/		return 0x8214B1B0;
		  /* 8214B1B0h */ case   22:  		/* b -2440 */
		/* 8214B1B0h case   22:*/		return 0x8214A828;
		/* 8214B1B0h case   22:*/		return 0x8214B1B4;
		  /* 8214B1B4h */ case   23:  		/* nop */
		/* 8214B1B4h case   23:*/		cpu::op::nop();
		/* 8214B1B4h case   23:*/		return 0x8214B1B8;
		  /* 8214B1B8h */ case   24:  		/* b -2208 */
		/* 8214B1B8h case   24:*/		return 0x8214A918;
		/* 8214B1B8h case   24:*/		return 0x8214B1BC;
		  /* 8214B1BCh */ case   25:  		/* nop */
		/* 8214B1BCh case   25:*/		cpu::op::nop();
		/* 8214B1BCh case   25:*/		return 0x8214B1C0;
		  /* 8214B1C0h */ case   26:  		/* b -1944 */
		/* 8214B1C0h case   26:*/		return 0x8214AA28;
		/* 8214B1C0h case   26:*/		return 0x8214B1C4;
		  /* 8214B1C4h */ case   27:  		/* nop */
		/* 8214B1C4h case   27:*/		cpu::op::nop();
		/* 8214B1C4h case   27:*/		return 0x8214B1C8;
	}
	return 0x8214B1C8;
} // Block from 8214B158h-8214B1C8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8214B1C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B1C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B1C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B1C8);
		  /* 8214B1C8h */ case    0:  		/* mfspr R12, LR */
		/* 8214B1C8h case    0:*/		regs.R12 = regs.LR;
		/* 8214B1C8h case    0:*/		return 0x8214B1CC;
		  /* 8214B1CCh */ case    1:  		/* bl -761756 */
		/* 8214B1CCh case    1:*/		regs.LR = 0x8214B1D0; return 0x82091230;
		/* 8214B1CCh case    1:*/		return 0x8214B1D0;
		  /* 8214B1D0h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8214B1D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8214B1D0h case    2:*/		return 0x8214B1D4;
		  /* 8214B1D4h */ case    3:  		/* lwz R11, <#[R3 + 20]> */
		/* 8214B1D4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8214B1D4h case    3:*/		return 0x8214B1D8;
		  /* 8214B1D8h */ case    4:  		/* mr R29, R3 */
		/* 8214B1D8h case    4:*/		regs.R29 = regs.R3;
		/* 8214B1D8h case    4:*/		return 0x8214B1DC;
		  /* 8214B1DCh */ case    5:  		/* lwz R10, <#[R3 + 24]> */
		/* 8214B1DCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000018) );
		/* 8214B1DCh case    5:*/		return 0x8214B1E0;
		  /* 8214B1E0h */ case    6:  		/* mr R20, R4 */
		/* 8214B1E0h case    6:*/		regs.R20 = regs.R4;
		/* 8214B1E0h case    6:*/		return 0x8214B1E4;
		  /* 8214B1E4h */ case    7:  		/* addi R31, R11, 1 */
		/* 8214B1E4h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x1);
		/* 8214B1E4h case    7:*/		return 0x8214B1E8;
		  /* 8214B1E8h */ case    8:  		/* mr R18, R5 */
		/* 8214B1E8h case    8:*/		regs.R18 = regs.R5;
		/* 8214B1E8h case    8:*/		return 0x8214B1EC;
		  /* 8214B1ECh */ case    9:  		/* addi R30, R3, 16 */
		/* 8214B1ECh case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x10);
		/* 8214B1ECh case    9:*/		return 0x8214B1F0;
		  /* 8214B1F0h */ case   10:  		/* cmplw CR6, R31, R10 */
		/* 8214B1F0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 8214B1F0h case   10:*/		return 0x8214B1F4;
		  /* 8214B1F4h */ case   11:  		/* bc 4, CR6_GT, 20 */
		/* 8214B1F4h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8214B208;  }
		/* 8214B1F4h case   11:*/		return 0x8214B1F8;
		  /* 8214B1F8h */ case   12:  		/* addi R5, R3, 144 */
		/* 8214B1F8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R3,0x90);
		/* 8214B1F8h case   12:*/		return 0x8214B1FC;
		  /* 8214B1FCh */ case   13:  		/* mr R4, R31 */
		/* 8214B1FCh case   13:*/		regs.R4 = regs.R31;
		/* 8214B1FCh case   13:*/		return 0x8214B200;
		  /* 8214B200h */ case   14:  		/* mr R3, R30 */
		/* 8214B200h case   14:*/		regs.R3 = regs.R30;
		/* 8214B200h case   14:*/		return 0x8214B204;
		  /* 8214B204h */ case   15:  		/* bl -18492 */
		/* 8214B204h case   15:*/		regs.LR = 0x8214B208; return 0x821469C8;
		/* 8214B204h case   15:*/		return 0x8214B208;
	}
	return 0x8214B208;
} // Block from 8214B1C8h-8214B208h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214B208h
// Function '?SetDebugPrintArgumentType@ShaderPDBBuilder@XGRAPHICS@@QAAXKKW4_D3DCOMPONENT_TYPE@D3DXShader@@KK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B208);
		  /* 8214B208h */ case    0:  		/* stw R31, <#[R30 + 4]> */
		/* 8214B208h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 8214B208h case    0:*/		return 0x8214B20C;
		  /* 8214B20Ch */ case    1:  		/* addi R19, R29, 144 */
		/* 8214B20Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R29,0x90);
		/* 8214B20Ch case    1:*/		return 0x8214B210;
		  /* 8214B210h */ case    2:  		/* lwz R11, <#[R29 + 144]> */
		/* 8214B210h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000090) );
		/* 8214B210h case    2:*/		return 0x8214B214;
		  /* 8214B214h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 8214B214h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214B214h case    3:*/		return 0x8214B218;
		  /* 8214B218h */ case    4:  		/* bc 4, CR6_LT, 12 */
		/* 8214B218h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8214B224;  }
		/* 8214B218h case    4:*/		return 0x8214B21C;
		  /* 8214B21Ch */ case    5:  		/* li R3, 0 */
		/* 8214B21Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214B21Ch case    5:*/		return 0x8214B220;
		  /* 8214B220h */ case    6:  		/* b 580 */
		/* 8214B220h case    6:*/		return 0x8214B464;
		/* 8214B220h case    6:*/		return 0x8214B224;
	}
	return 0x8214B224;
} // Block from 8214B208h-8214B224h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214B224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B224);
		  /* 8214B224h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214B224h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214B224h case    0:*/		return 0x8214B228;
		  /* 8214B228h */ case    1:  		/* li R31, 0 */
		/* 8214B228h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8214B228h case    1:*/		return 0x8214B22C;
		  /* 8214B22Ch */ case    2:  		/* lwz R10, <#[R30]> */
		/* 8214B22Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8214B22Ch case    2:*/		return 0x8214B230;
		  /* 8214B230h */ case    3:  		/* cmplwi CR6, R20, 0 */
		/* 8214B230h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8214B230h case    3:*/		return 0x8214B234;
		  /* 8214B234h */ case    4:  		/* mulli R11, R11, 476 */
		/* 8214B234h case    4:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1DC);
		/* 8214B234h case    4:*/		return 0x8214B238;
		  /* 8214B238h */ case    5:  		/* add R11, R11, R10 */
		/* 8214B238h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214B238h case    5:*/		return 0x8214B23C;
		  /* 8214B23Ch */ case    6:  		/* addi R30, R11, -476 */
		/* 8214B23Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFE24);
		/* 8214B23Ch case    6:*/		return 0x8214B240;
		  /* 8214B240h */ case    7:  		/* addi R28, R30, 276 */
		/* 8214B240h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x114);
		/* 8214B240h case    7:*/		return 0x8214B244;
		  /* 8214B244h */ case    8:  		/* stw R31, <#[R11 - 200]> */
		/* 8214B244h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF38) );
		/* 8214B244h case    8:*/		return 0x8214B248;
		  /* 8214B248h */ case    9:  		/* addi R27, R30, 288 */
		/* 8214B248h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R30,0x120);
		/* 8214B248h case    9:*/		return 0x8214B24C;
		  /* 8214B24Ch */ case   10:  		/* stw R31, <#[R11 - 196]> */
		/* 8214B24Ch case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF3C) );
		/* 8214B24Ch case   10:*/		return 0x8214B250;
		  /* 8214B250h */ case   11:  		/* addi R26, R30, 324 */
		/* 8214B250h case   11:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R30,0x144);
		/* 8214B250h case   11:*/		return 0x8214B254;
		  /* 8214B254h */ case   12:  		/* stw R31, <#[R11 - 192]> */
		/* 8214B254h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF40) );
		/* 8214B254h case   12:*/		return 0x8214B258;
		  /* 8214B258h */ case   13:  		/* stw R31, <#[R11 - 188]> */
		/* 8214B258h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF44) );
		/* 8214B258h case   13:*/		return 0x8214B25C;
		  /* 8214B25Ch */ case   14:  		/* addi R25, R30, 352 */
		/* 8214B25Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R30,0x160);
		/* 8214B25Ch case   14:*/		return 0x8214B260;
		  /* 8214B260h */ case   15:  		/* stw R31, <#[R11 - 184]> */
		/* 8214B260h case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF48) );
		/* 8214B260h case   15:*/		return 0x8214B264;
		  /* 8214B264h */ case   16:  		/* addi R24, R30, 364 */
		/* 8214B264h case   16:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R30,0x16C);
		/* 8214B264h case   16:*/		return 0x8214B268;
		  /* 8214B268h */ case   17:  		/* stw R31, <#[R11 - 180]> */
		/* 8214B268h case   17:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF4C) );
		/* 8214B268h case   17:*/		return 0x8214B26C;
		  /* 8214B26Ch */ case   18:  		/* stw R31, <#[R11 - 152]> */
		/* 8214B26Ch case   18:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF68) );
		/* 8214B26Ch case   18:*/		return 0x8214B270;
		  /* 8214B270h */ case   19:  		/* addi R23, R30, 376 */
		/* 8214B270h case   19:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R30,0x178);
		/* 8214B270h case   19:*/		return 0x8214B274;
		  /* 8214B274h */ case   20:  		/* stw R31, <#[R11 - 148]> */
		/* 8214B274h case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF6C) );
		/* 8214B274h case   20:*/		return 0x8214B278;
		  /* 8214B278h */ case   21:  		/* addi R22, R30, 432 */
		/* 8214B278h case   21:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R30,0x1B0);
		/* 8214B278h case   21:*/		return 0x8214B27C;
		  /* 8214B27Ch */ case   22:  		/* stw R31, <#[R11 - 144]> */
		/* 8214B27Ch case   22:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF70) );
		/* 8214B27Ch case   22:*/		return 0x8214B280;
		  /* 8214B280h */ case   23:  		/* stw R31, <#[R11 - 124]> */
		/* 8214B280h case   23:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF84) );
		/* 8214B280h case   23:*/		return 0x8214B284;
		  /* 8214B284h */ case   24:  		/* addi R21, R30, 444 */
		/* 8214B284h case   24:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R30,0x1BC);
		/* 8214B284h case   24:*/		return 0x8214B288;
		  /* 8214B288h */ case   25:  		/* stw R31, <#[R11 - 120]> */
		/* 8214B288h case   25:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF88) );
		/* 8214B288h case   25:*/		return 0x8214B28C;
		  /* 8214B28Ch */ case   26:  		/* stw R31, <#[R11 - 116]> */
		/* 8214B28Ch case   26:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF8C) );
		/* 8214B28Ch case   26:*/		return 0x8214B290;
		  /* 8214B290h */ case   27:  		/* stw R31, <#[R11 - 112]> */
		/* 8214B290h case   27:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF90) );
		/* 8214B290h case   27:*/		return 0x8214B294;
		  /* 8214B294h */ case   28:  		/* stw R31, <#[R11 - 108]> */
		/* 8214B294h case   28:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF94) );
		/* 8214B294h case   28:*/		return 0x8214B298;
		  /* 8214B298h */ case   29:  		/* stw R31, <#[R11 - 104]> */
		/* 8214B298h case   29:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF98) );
		/* 8214B298h case   29:*/		return 0x8214B29C;
		  /* 8214B29Ch */ case   30:  		/* stw R31, <#[R11 - 100]> */
		/* 8214B29Ch case   30:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFF9C) );
		/* 8214B29Ch case   30:*/		return 0x8214B2A0;
		  /* 8214B2A0h */ case   31:  		/* stw R31, <#[R11 - 96]> */
		/* 8214B2A0h case   31:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFFA0) );
		/* 8214B2A0h case   31:*/		return 0x8214B2A4;
		  /* 8214B2A4h */ case   32:  		/* stw R31, <#[R11 - 92]> */
		/* 8214B2A4h case   32:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFFA4) );
		/* 8214B2A4h case   32:*/		return 0x8214B2A8;
		  /* 8214B2A8h */ case   33:  		/* stw R31, <#[R11 - 44]> */
		/* 8214B2A8h case   33:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFFD4) );
		/* 8214B2A8h case   33:*/		return 0x8214B2AC;
		  /* 8214B2ACh */ case   34:  		/* stw R31, <#[R11 - 40]> */
		/* 8214B2ACh case   34:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFFD8) );
		/* 8214B2ACh case   34:*/		return 0x8214B2B0;
		  /* 8214B2B0h */ case   35:  		/* stw R31, <#[R11 - 36]> */
		/* 8214B2B0h case   35:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFFDC) );
		/* 8214B2B0h case   35:*/		return 0x8214B2B4;
		  /* 8214B2B4h */ case   36:  		/* stw R31, <#[R11 - 32]> */
		/* 8214B2B4h case   36:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFFE0) );
		/* 8214B2B4h case   36:*/		return 0x8214B2B8;
		  /* 8214B2B8h */ case   37:  		/* stw R31, <#[R11 - 28]> */
		/* 8214B2B8h case   37:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFFE4) );
		/* 8214B2B8h case   37:*/		return 0x8214B2BC;
		  /* 8214B2BCh */ case   38:  		/* stw R31, <#[R11 - 24]> */
		/* 8214B2BCh case   38:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFFE8) );
		/* 8214B2BCh case   38:*/		return 0x8214B2C0;
		  /* 8214B2C0h */ case   39:  		/* bc 12, CR6_EQ, 24 */
		/* 8214B2C0h case   39:*/		if ( regs.CR[6].eq ) { return 0x8214B2D8;  }
		/* 8214B2C0h case   39:*/		return 0x8214B2C4;
		  /* 8214B2C4h */ case   40:  		/* mr R5, R20 */
		/* 8214B2C4h case   40:*/		regs.R5 = regs.R20;
		/* 8214B2C4h case   40:*/		return 0x8214B2C8;
		  /* 8214B2C8h */ case   41:  		/* li R4, 256 */
		/* 8214B2C8h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 8214B2C8h case   41:*/		return 0x8214B2CC;
		  /* 8214B2CCh */ case   42:  		/* mr R3, R30 */
		/* 8214B2CCh case   42:*/		regs.R3 = regs.R30;
		/* 8214B2CCh case   42:*/		return 0x8214B2D0;
		  /* 8214B2D0h */ case   43:  		/* bl -674784 */
		/* 8214B2D0h case   43:*/		regs.LR = 0x8214B2D4; return 0x820A66F0;
		/* 8214B2D0h case   43:*/		return 0x8214B2D4;
		  /* 8214B2D4h */ case   44:  		/* b 8 */
		/* 8214B2D4h case   44:*/		return 0x8214B2DC;
		/* 8214B2D4h case   44:*/		return 0x8214B2D8;
	}
	return 0x8214B2D8;
} // Block from 8214B224h-8214B2D8h (45 instructions)

//////////////////////////////////////////////////////
// Block at 8214B2D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B2D8);
		  /* 8214B2D8h */ case    0:  		/* stb R31, <#[R30]> */
		/* 8214B2D8h case    0:*/		cpu::mem::store8( regs, regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 8214B2D8h case    0:*/		return 0x8214B2DC;
	}
	return 0x8214B2DC;
} // Block from 8214B2D8h-8214B2DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214B2DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B2DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B2DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B2DC);
		  /* 8214B2DCh */ case    0:  		/* stw R31, <#[R30 + 388]> */
		/* 8214B2DCh case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000184) );
		/* 8214B2DCh case    0:*/		return 0x8214B2E0;
		  /* 8214B2E0h */ case    1:  		/* stw R18, <#[R30 + 256]> */
		/* 8214B2E0h case    1:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R30 + 0x00000100) );
		/* 8214B2E0h case    1:*/		return 0x8214B2E4;
		  /* 8214B2E4h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 8214B2E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8214B2E4h case    2:*/		return 0x8214B2E8;
		  /* 8214B2E8h */ case    3:  		/* cmplwi CR6, R11, 100 */
		/* 8214B2E8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000064);
		/* 8214B2E8h case    3:*/		return 0x8214B2EC;
		  /* 8214B2ECh */ case    4:  		/* stw R31, <#[R28 + 4]> */
		/* 8214B2ECh case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x00000004) );
		/* 8214B2ECh case    4:*/		return 0x8214B2F0;
		  /* 8214B2F0h */ case    5:  		/* bc 4, CR6_LT, 20 */
		/* 8214B2F0h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8214B304;  }
		/* 8214B2F0h case    5:*/		return 0x8214B2F4;
		  /* 8214B2F4h */ case    6:  		/* mr R5, R19 */
		/* 8214B2F4h case    6:*/		regs.R5 = regs.R19;
		/* 8214B2F4h case    6:*/		return 0x8214B2F8;
	}
	return 0x8214B2F8;
} // Block from 8214B2DCh-8214B2F8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214B2F8h
// Function '?SetDebugPrintArgumentRegisterCount@ShaderPDBBuilder@XGRAPHICS@@QAAJKKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B2F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B2F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B2F8);
		  /* 8214B2F8h */ case    0:  		/* li R4, 100 */
		/* 8214B2F8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x64);
		/* 8214B2F8h case    0:*/		return 0x8214B2FC;
		  /* 8214B2FCh */ case    1:  		/* mr R3, R28 */
		/* 8214B2FCh case    1:*/		regs.R3 = regs.R28;
		/* 8214B2FCh case    1:*/		return 0x8214B300;
		  /* 8214B300h */ case    2:  		/* bl -19032 */
		/* 8214B300h case    2:*/		regs.LR = 0x8214B304; return 0x821468A8;
		/* 8214B300h case    2:*/		return 0x8214B304;
	}
	return 0x8214B304;
} // Block from 8214B2F8h-8214B304h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214B304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B304);
		  /* 8214B304h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 8214B304h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8214B304h case    0:*/		return 0x8214B308;
		  /* 8214B308h */ case    1:  		/* stw R31, <#[R27 + 4]> */
		/* 8214B308h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x00000004) );
		/* 8214B308h case    1:*/		return 0x8214B30C;
		  /* 8214B30Ch */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8214B30Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214B30Ch case    2:*/		return 0x8214B310;
		  /* 8214B310h */ case    3:  		/* bc 4, CR6_LT, 20 */
		/* 8214B310h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8214B324;  }
		/* 8214B310h case    3:*/		return 0x8214B314;
		  /* 8214B314h */ case    4:  		/* mr R5, R19 */
		/* 8214B314h case    4:*/		regs.R5 = regs.R19;
		/* 8214B314h case    4:*/		return 0x8214B318;
		  /* 8214B318h */ case    5:  		/* li R4, 1 */
		/* 8214B318h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214B318h case    5:*/		return 0x8214B31C;
		  /* 8214B31Ch */ case    6:  		/* mr R3, R27 */
		/* 8214B31Ch case    6:*/		regs.R3 = regs.R27;
		/* 8214B31Ch case    6:*/		return 0x8214B320;
		  /* 8214B320h */ case    7:  		/* bl -19784 */
		/* 8214B320h case    7:*/		regs.LR = 0x8214B324; return 0x821465D8;
		/* 8214B320h case    7:*/		return 0x8214B324;
	}
	return 0x8214B324;
} // Block from 8214B304h-8214B324h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214B324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B324);
		  /* 8214B324h */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 8214B324h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8214B324h case    0:*/		return 0x8214B328;
		  /* 8214B328h */ case    1:  		/* stw R31, <#[R26 + 4]> */
		/* 8214B328h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R26 + 0x00000004) );
		/* 8214B328h case    1:*/		return 0x8214B32C;
		  /* 8214B32Ch */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8214B32Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214B32Ch case    2:*/		return 0x8214B330;
		  /* 8214B330h */ case    3:  		/* bc 4, CR6_LT, 20 */
		/* 8214B330h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8214B344;  }
		/* 8214B330h case    3:*/		return 0x8214B334;
		  /* 8214B334h */ case    4:  		/* mr R5, R19 */
		/* 8214B334h case    4:*/		regs.R5 = regs.R19;
		/* 8214B334h case    4:*/		return 0x8214B338;
		  /* 8214B338h */ case    5:  		/* li R4, 1 */
		/* 8214B338h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214B338h case    5:*/		return 0x8214B33C;
		  /* 8214B33Ch */ case    6:  		/* mr R3, R26 */
		/* 8214B33Ch case    6:*/		regs.R3 = regs.R26;
		/* 8214B33Ch case    6:*/		return 0x8214B340;
		  /* 8214B340h */ case    7:  		/* bl -19816 */
		/* 8214B340h case    7:*/		regs.LR = 0x8214B344; return 0x821465D8;
		/* 8214B340h case    7:*/		return 0x8214B344;
	}
	return 0x8214B344;
} // Block from 8214B324h-8214B344h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214B344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B344);
		  /* 8214B344h */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 8214B344h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8214B344h case    0:*/		return 0x8214B348;
		  /* 8214B348h */ case    1:  		/* stw R31, <#[R25 + 4]> */
		/* 8214B348h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000004) );
		/* 8214B348h case    1:*/		return 0x8214B34C;
		  /* 8214B34Ch */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8214B34Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214B34Ch case    2:*/		return 0x8214B350;
		  /* 8214B350h */ case    3:  		/* bc 4, CR6_LT, 20 */
		/* 8214B350h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8214B364;  }
		/* 8214B350h case    3:*/		return 0x8214B354;
		  /* 8214B354h */ case    4:  		/* mr R5, R19 */
		/* 8214B354h case    4:*/		regs.R5 = regs.R19;
		/* 8214B354h case    4:*/		return 0x8214B358;
		  /* 8214B358h */ case    5:  		/* li R4, 1 */
		/* 8214B358h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214B358h case    5:*/		return 0x8214B35C;
		  /* 8214B35Ch */ case    6:  		/* mr R3, R25 */
		/* 8214B35Ch case    6:*/		regs.R3 = regs.R25;
		/* 8214B35Ch case    6:*/		return 0x8214B360;
		  /* 8214B360h */ case    7:  		/* bl -18696 */
		/* 8214B360h case    7:*/		regs.LR = 0x8214B364; return 0x82146A58;
		/* 8214B360h case    7:*/		return 0x8214B364;
	}
	return 0x8214B364;
} // Block from 8214B344h-8214B364h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214B364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B364);
		  /* 8214B364h */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 8214B364h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 8214B364h case    0:*/		return 0x8214B368;
		  /* 8214B368h */ case    1:  		/* stw R31, <#[R24 + 4]> */
		/* 8214B368h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R24 + 0x00000004) );
		/* 8214B368h case    1:*/		return 0x8214B36C;
		  /* 8214B36Ch */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8214B36Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214B36Ch case    2:*/		return 0x8214B370;
		  /* 8214B370h */ case    3:  		/* bc 4, CR6_LT, 20 */
		/* 8214B370h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8214B384;  }
		/* 8214B370h case    3:*/		return 0x8214B374;
		  /* 8214B374h */ case    4:  		/* mr R5, R19 */
		/* 8214B374h case    4:*/		regs.R5 = regs.R19;
		/* 8214B374h case    4:*/		return 0x8214B378;
		  /* 8214B378h */ case    5:  		/* li R4, 1 */
		/* 8214B378h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214B378h case    5:*/		return 0x8214B37C;
		  /* 8214B37Ch */ case    6:  		/* mr R3, R24 */
		/* 8214B37Ch case    6:*/		regs.R3 = regs.R24;
		/* 8214B37Ch case    6:*/		return 0x8214B380;
		  /* 8214B380h */ case    7:  		/* bl -19736 */
		/* 8214B380h case    7:*/		regs.LR = 0x8214B384; return 0x82146668;
		/* 8214B380h case    7:*/		return 0x8214B384;
	}
	return 0x8214B384;
} // Block from 8214B364h-8214B384h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214B384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B384);
		  /* 8214B384h */ case    0:  		/* lwz R11, <#[R23 + 8]> */
		/* 8214B384h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 8214B384h case    0:*/		return 0x8214B388;
		  /* 8214B388h */ case    1:  		/* stw R31, <#[R23 + 4]> */
		/* 8214B388h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R23 + 0x00000004) );
		/* 8214B388h case    1:*/		return 0x8214B38C;
		  /* 8214B38Ch */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8214B38Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214B38Ch case    2:*/		return 0x8214B390;
		  /* 8214B390h */ case    3:  		/* bc 4, CR6_LT, 20 */
		/* 8214B390h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8214B3A4;  }
		/* 8214B390h case    3:*/		return 0x8214B394;
		  /* 8214B394h */ case    4:  		/* mr R5, R19 */
		/* 8214B394h case    4:*/		regs.R5 = regs.R19;
		/* 8214B394h case    4:*/		return 0x8214B398;
		  /* 8214B398h */ case    5:  		/* li R4, 1 */
		/* 8214B398h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214B398h case    5:*/		return 0x8214B39C;
		  /* 8214B39Ch */ case    6:  		/* mr R3, R23 */
		/* 8214B39Ch case    6:*/		regs.R3 = regs.R23;
		/* 8214B39Ch case    6:*/		return 0x8214B3A0;
		  /* 8214B3A0h */ case    7:  		/* bl -19480 */
		/* 8214B3A0h case    7:*/		regs.LR = 0x8214B3A4; return 0x82146788;
		/* 8214B3A0h case    7:*/		return 0x8214B3A4;
	}
	return 0x8214B3A4;
} // Block from 8214B384h-8214B3A4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214B3A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B3A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B3A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B3A4);
		  /* 8214B3A4h */ case    0:  		/* li R11, -1 */
		/* 8214B3A4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8214B3A4h case    0:*/		return 0x8214B3A8;
		  /* 8214B3A8h */ case    1:  		/* stw R31, <#[R30 + 472]> */
		/* 8214B3A8h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x000001D8) );
		/* 8214B3A8h case    1:*/		return 0x8214B3AC;
		  /* 8214B3ACh */ case    2:  		/* stw R11, <#[R30 + 468]> */
		/* 8214B3ACh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000001D4) );
		/* 8214B3ACh case    2:*/		return 0x8214B3B0;
		  /* 8214B3B0h */ case    3:  		/* stw R11, <#[R30 + 460]> */
		/* 8214B3B0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000001CC) );
		/* 8214B3B0h case    3:*/		return 0x8214B3B4;
		  /* 8214B3B4h */ case    4:  		/* stw R11, <#[R30 + 464]> */
		/* 8214B3B4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000001D0) );
		/* 8214B3B4h case    4:*/		return 0x8214B3B8;
		  /* 8214B3B8h */ case    5:  		/* stw R11, <#[R30 + 456]> */
		/* 8214B3B8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000001C8) );
		/* 8214B3B8h case    5:*/		return 0x8214B3BC;
		  /* 8214B3BCh */ case    6:  		/* lwz R10, <#[R19]> */
		/* 8214B3BCh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000000) );
		/* 8214B3BCh case    6:*/		return 0x8214B3C0;
		  /* 8214B3C0h */ case    7:  		/* cmpwi CR6, R10, 0 */
		/* 8214B3C0h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8214B3C0h case    7:*/		return 0x8214B3C4;
		  /* 8214B3C4h */ case    8:  		/* bc 12, CR6_LT, 28 */
		/* 8214B3C4h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214B3E0;  }
		/* 8214B3C4h case    8:*/		return 0x8214B3C8;
		  /* 8214B3C8h */ case    9:  		/* stw R31, <#[R30 + 280]> */
		/* 8214B3C8h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000118) );
		/* 8214B3C8h case    9:*/		return 0x8214B3CC;
		  /* 8214B3CCh */ case   10:  		/* stw R31, <#[R30 + 292]> */
		/* 8214B3CCh case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000124) );
		/* 8214B3CCh case   10:*/		return 0x8214B3D0;
		  /* 8214B3D0h */ case   11:  		/* stw R31, <#[R30 + 328]> */
		/* 8214B3D0h case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000148) );
		/* 8214B3D0h case   11:*/		return 0x8214B3D4;
		  /* 8214B3D4h */ case   12:  		/* stw R31, <#[R30 + 356]> */
		/* 8214B3D4h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000164) );
		/* 8214B3D4h case   12:*/		return 0x8214B3D8;
		  /* 8214B3D8h */ case   13:  		/* stw R31, <#[R30 + 368]> */
		/* 8214B3D8h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000170) );
		/* 8214B3D8h case   13:*/		return 0x8214B3DC;
		  /* 8214B3DCh */ case   14:  		/* stw R31, <#[R30 + 380]> */
		/* 8214B3DCh case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000017C) );
		/* 8214B3DCh case   14:*/		return 0x8214B3E0;
	}
	return 0x8214B3E0;
} // Block from 8214B3A4h-8214B3E0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8214B3E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B3E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B3E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B3E0);
		  /* 8214B3E0h */ case    0:  		/* stw R11, <#[R30 + 272]> */
		/* 8214B3E0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000110) );
		/* 8214B3E0h case    0:*/		return 0x8214B3E4;
		  /* 8214B3E4h */ case    1:  		/* addi R4, R30, 260 */
		/* 8214B3E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x104);
		/* 8214B3E4h case    1:*/		return 0x8214B3E8;
		  /* 8214B3E8h */ case    2:  		/* mr R3, R29 */
		/* 8214B3E8h case    2:*/		regs.R3 = regs.R29;
		/* 8214B3E8h case    2:*/		return 0x8214B3EC;
		  /* 8214B3ECh */ case    3:  		/* bl -7100 */
		/* 8214B3ECh case    3:*/		regs.LR = 0x8214B3F0; return 0x82149830;
		/* 8214B3ECh case    3:*/		return 0x8214B3F0;
		  /* 8214B3F0h */ case    4:  		/* addi R31, R30, 336 */
		/* 8214B3F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R30,0x150);
		/* 8214B3F0h case    4:*/		return 0x8214B3F4;
		  /* 8214B3F4h */ case    5:  		/* lis R4, 19523 */
		/* 8214B3F4h case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x4C43);
		/* 8214B3F4h case    5:*/		return 0x8214B3F8;
		  /* 8214B3F8h */ case    6:  		/* mr R3, R31 */
		/* 8214B3F8h case    6:*/		regs.R3 = regs.R31;
		/* 8214B3F8h case    6:*/		return 0x8214B3FC;
		  /* 8214B3FCh */ case    7:  		/* ori R4, R4, 17494 */
		/* 8214B3FCh case    7:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x4456);
		/* 8214B3FCh case    7:*/		return 0x8214B400;
		  /* 8214B400h */ case    8:  		/* bl -512576 */
		/* 8214B400h case    8:*/		regs.LR = 0x8214B404; return 0x820CE1C0;
		/* 8214B400h case    8:*/		return 0x8214B404;
		  /* 8214B404h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 8214B404h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 8214B404h case    9:*/		return 0x8214B408;
	}
	return 0x8214B408;
} // Block from 8214B3E0h-8214B408h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214B408h
// Function '?SetDebugPrintArgumentRegister@ShaderPDBBuilder@XGRAPHICS@@QAAXKKKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B408);
		  /* 8214B408h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 8214B408h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214B408h case    0:*/		return 0x8214B40C;
		  /* 8214B40Ch */ case    1:  		/* bc 12, CR6_LT, 84 */
		/* 8214B40Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x8214B460;  }
		/* 8214B40Ch case    1:*/		return 0x8214B410;
		  /* 8214B410h */ case    2:  		/* addi R11, R30, 300 */
		/* 8214B410h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x12C);
		/* 8214B410h case    2:*/		return 0x8214B414;
		  /* 8214B414h */ case    3:  		/* stw R30, <#[R29 + 128]> */
		/* 8214B414h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000080) );
		/* 8214B414h case    3:*/		return 0x8214B418;
		  /* 8214B418h */ case    4:  		/* addi R10, R30, 312 */
		/* 8214B418h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x138);
		/* 8214B418h case    4:*/		return 0x8214B41C;
		  /* 8214B41Ch */ case    5:  		/* stw R28, <#[R29 + 28]> */
		/* 8214B41Ch case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + 0x0000001C) );
		/* 8214B41Ch case    5:*/		return 0x8214B420;
		  /* 8214B420h */ case    6:  		/* addi R9, R30, 396 */
		/* 8214B420h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0x18C);
		/* 8214B420h case    6:*/		return 0x8214B424;
		  /* 8214B424h */ case    7:  		/* stw R27, <#[R29 + 68]> */
		/* 8214B424h case    7:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x00000044) );
		/* 8214B424h case    7:*/		return 0x8214B428;
		  /* 8214B428h */ case    8:  		/* addi R8, R30, 408 */
		/* 8214B428h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0x198);
		/* 8214B428h case    8:*/		return 0x8214B42C;
		  /* 8214B42Ch */ case    9:  		/* stw R26, <#[R29 + 72]> */
		/* 8214B42Ch case    9:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R29 + 0x00000048) );
		/* 8214B42Ch case    9:*/		return 0x8214B430;
		  /* 8214B430h */ case   10:  		/* addi R7, R30, 420 */
		/* 8214B430h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R30,0x1A4);
		/* 8214B430h case   10:*/		return 0x8214B434;
		  /* 8214B434h */ case   11:  		/* stw R31, <#[R29 + 96]> */
		/* 8214B434h case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000060) );
		/* 8214B434h case   11:*/		return 0x8214B438;
		  /* 8214B438h */ case   12:  		/* stw R25, <#[R29 + 100]> */
		/* 8214B438h case   12:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R29 + 0x00000064) );
		/* 8214B438h case   12:*/		return 0x8214B43C;
		  /* 8214B43Ch */ case   13:  		/* stw R24, <#[R29 + 104]> */
		/* 8214B43Ch case   13:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R29 + 0x00000068) );
		/* 8214B43Ch case   13:*/		return 0x8214B440;
		  /* 8214B440h */ case   14:  		/* stw R23, <#[R29 + 108]> */
		/* 8214B440h case   14:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R29 + 0x0000006C) );
		/* 8214B440h case   14:*/		return 0x8214B444;
		  /* 8214B444h */ case   15:  		/* stw R11, <#[R29 + 76]> */
		/* 8214B444h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000004C) );
		/* 8214B444h case   15:*/		return 0x8214B448;
		  /* 8214B448h */ case   16:  		/* stw R10, <#[R29 + 80]> */
		/* 8214B448h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000050) );
		/* 8214B448h case   16:*/		return 0x8214B44C;
		  /* 8214B44Ch */ case   17:  		/* stw R9, <#[R29 + 84]> */
		/* 8214B44Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000054) );
		/* 8214B44Ch case   17:*/		return 0x8214B450;
		  /* 8214B450h */ case   18:  		/* stw R8, <#[R29 + 88]> */
		/* 8214B450h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R29 + 0x00000058) );
		/* 8214B450h case   18:*/		return 0x8214B454;
		  /* 8214B454h */ case   19:  		/* stw R7, <#[R29 + 92]> */
		/* 8214B454h case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R29 + 0x0000005C) );
		/* 8214B454h case   19:*/		return 0x8214B458;
		  /* 8214B458h */ case   20:  		/* stw R22, <#[R29 + 112]> */
		/* 8214B458h case   20:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R29 + 0x00000070) );
		/* 8214B458h case   20:*/		return 0x8214B45C;
		  /* 8214B45Ch */ case   21:  		/* stw R21, <#[R29 + 120]> */
		/* 8214B45Ch case   21:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R29 + 0x00000078) );
		/* 8214B45Ch case   21:*/		return 0x8214B460;
	}
	return 0x8214B460;
} // Block from 8214B408h-8214B460h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214B460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B460);
		  /* 8214B460h */ case    0:  		/* mr R3, R30 */
		/* 8214B460h case    0:*/		regs.R3 = regs.R30;
		/* 8214B460h case    0:*/		return 0x8214B464;
	}
	return 0x8214B464;
} // Block from 8214B460h-8214B464h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214B464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B464);
		  /* 8214B464h */ case    0:  		/* addi R1, R1, 208 */
		/* 8214B464h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8214B464h case    0:*/		return 0x8214B468;
		  /* 8214B468h */ case    1:  		/* b -762344 */
		/* 8214B468h case    1:*/		return 0x82091280;
		/* 8214B468h case    1:*/		return 0x8214B46C;
		  /* 8214B46Ch */ case    2:  		/* nop */
		/* 8214B46Ch case    2:*/		cpu::op::nop();
		/* 8214B46Ch case    2:*/		return 0x8214B470;
	}
	return 0x8214B470;
} // Block from 8214B464h-8214B470h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214B470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B470);
		  /* 8214B470h */ case    0:  		/* mfspr R12, LR */
		/* 8214B470h case    0:*/		regs.R12 = regs.LR;
		/* 8214B470h case    0:*/		return 0x8214B474;
		  /* 8214B474h */ case    1:  		/* bl -762392 */
		/* 8214B474h case    1:*/		regs.LR = 0x8214B478; return 0x8209125C;
		/* 8214B474h case    1:*/		return 0x8214B478;
		  /* 8214B478h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214B478h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214B478h case    2:*/		return 0x8214B47C;
		  /* 8214B47Ch */ case    3:  		/* lhz R11, <#[R3 + 156]> */
		/* 8214B47Ch case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000009C) );
		/* 8214B47Ch case    3:*/		return 0x8214B480;
		  /* 8214B480h */ case    4:  		/* mr R30, R3 */
		/* 8214B480h case    4:*/		regs.R30 = regs.R3;
		/* 8214B480h case    4:*/		return 0x8214B484;
		  /* 8214B484h */ case    5:  		/* mr R29, R4 */
		/* 8214B484h case    5:*/		regs.R29 = regs.R4;
		/* 8214B484h case    5:*/		return 0x8214B488;
		  /* 8214B488h */ case    6:  		/* stw R4, <#[R3 + 152]> */
		/* 8214B488h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000098) );
		/* 8214B488h case    6:*/		return 0x8214B48C;
		  /* 8214B48Ch */ case    7:  		/* cmplwi CR6, R11, 1 */
		/* 8214B48Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214B48Ch case    7:*/		return 0x8214B490;
		  /* 8214B490h */ case    8:  		/* bc 12, CR6_LT, 88 */
		/* 8214B490h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214B4E8;  }
		/* 8214B490h case    8:*/		return 0x8214B494;
		  /* 8214B494h */ case    9:  		/* li R5, 0 */
		/* 8214B494h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8214B494h case    9:*/		return 0x8214B498;
		  /* 8214B498h */ case   10:  		/* li R4, 0 */
		/* 8214B498h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214B498h case   10:*/		return 0x8214B49C;
		  /* 8214B49Ch */ case   11:  		/* bl -724 */
		/* 8214B49Ch case   11:*/		regs.LR = 0x8214B4A0; return 0x8214B1C8;
		/* 8214B49Ch case   11:*/		return 0x8214B4A0;
		  /* 8214B4A0h */ case   12:  		/* li R4, 256 */
		/* 8214B4A0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 8214B4A0h case   12:*/		return 0x8214B4A4;
		  /* 8214B4A4h */ case   13:  		/* addi R5, R3, -476 */
		/* 8214B4A4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R3,0xFFFFFE24);
		/* 8214B4A4h case   13:*/		return 0x8214B4A8;
		  /* 8214B4A8h */ case   14:  		/* mr R31, R3 */
		/* 8214B4A8h case   14:*/		regs.R31 = regs.R3;
		/* 8214B4A8h case   14:*/		return 0x8214B4AC;
		  /* 8214B4ACh */ case   15:  		/* bl -675260 */
		/* 8214B4ACh case   15:*/		regs.LR = 0x8214B4B0; return 0x820A66F0;
		/* 8214B4ACh case   15:*/		return 0x8214B4B0;
		  /* 8214B4B0h */ case   16:  		/* lwz R11, <#[R31 - 220]> */
		/* 8214B4B0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFF24) );
		/* 8214B4B0h case   16:*/		return 0x8214B4B4;
		  /* 8214B4B4h */ case   17:  		/* mr R3, R30 */
		/* 8214B4B4h case   17:*/		regs.R3 = regs.R30;
		/* 8214B4B4h case   17:*/		return 0x8214B4B8;
		  /* 8214B4B8h */ case   18:  		/* stw R11, <#[R31 + 256]> */
		/* 8214B4B8h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 8214B4B8h case   18:*/		return 0x8214B4BC;
		  /* 8214B4BCh */ case   19:  		/* lwz R11, <#[R31 - 8]> */
		/* 8214B4BCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFF8) );
		/* 8214B4BCh case   19:*/		return 0x8214B4C0;
		  /* 8214B4C0h */ case   20:  		/* stw R11, <#[R31 + 468]> */
		/* 8214B4C0h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000001D4) );
		/* 8214B4C0h case   20:*/		return 0x8214B4C4;
		  /* 8214B4C4h */ case   21:  		/* lwz R11, <#[R31 - 16]> */
		/* 8214B4C4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFF0) );
		/* 8214B4C4h case   21:*/		return 0x8214B4C8;
		  /* 8214B4C8h */ case   22:  		/* stw R11, <#[R31 + 460]> */
		/* 8214B4C8h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000001CC) );
		/* 8214B4C8h case   22:*/		return 0x8214B4CC;
		  /* 8214B4CCh */ case   23:  		/* lwz R11, <#[R31 - 12]> */
		/* 8214B4CCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFF4) );
		/* 8214B4CCh case   23:*/		return 0x8214B4D0;
		  /* 8214B4D0h */ case   24:  		/* stw R11, <#[R31 + 464]> */
		/* 8214B4D0h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000001D0) );
		/* 8214B4D0h case   24:*/		return 0x8214B4D4;
		  /* 8214B4D4h */ case   25:  		/* lwz R11, <#[R31 - 20]> */
		/* 8214B4D4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFEC) );
		/* 8214B4D4h case   25:*/		return 0x8214B4D8;
		  /* 8214B4D8h */ case   26:  		/* stw R11, <#[R31 + 456]> */
		/* 8214B4D8h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000001C8) );
		/* 8214B4D8h case   26:*/		return 0x8214B4DC;
		  /* 8214B4DCh */ case   27:  		/* lwz R5, <#[R31 - 84]> */
		/* 8214B4DCh case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0xFFFFFFAC) );
		/* 8214B4DCh case   27:*/		return 0x8214B4E0;
		  /* 8214B4E0h */ case   28:  		/* lwz R4, <#[R31 - 88]> */
		/* 8214B4E0h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0xFFFFFFA8) );
		/* 8214B4E0h case   28:*/		return 0x8214B4E4;
		  /* 8214B4E4h */ case   29:  		/* bl -18308 */
		/* 8214B4E4h case   29:*/		regs.LR = 0x8214B4E8; return 0x82146D60;
		/* 8214B4E4h case   29:*/		return 0x8214B4E8;
	}
	return 0x8214B4E8;
} // Block from 8214B470h-8214B4E8h (30 instructions)

