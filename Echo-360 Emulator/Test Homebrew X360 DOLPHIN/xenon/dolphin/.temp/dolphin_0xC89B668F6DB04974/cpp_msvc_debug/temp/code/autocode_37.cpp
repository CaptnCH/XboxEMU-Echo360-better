#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 821E0C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0C04);
		  /* 821E0C04h */ case    0:  		/* lwz R11, <#[R20 + 40]> */
		/* 821E0C04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000028) );
		/* 821E0C04h case    0:*/		return 0x821E0C08;
		  /* 821E0C08h */ case    1:  		/* rlwinm R11, R11, 0, 8, 23 */
		/* 821E0C08h case    1:*/		cpu::op::rlwinm<0,0,8,23>(regs,&regs.R11,regs.R11);
		/* 821E0C08h case    1:*/		return 0x821E0C0C;
		  /* 821E0C0Ch */ case    2:  		/* rlwinm. R11, R11, 0, 23, 8 */
		/* 821E0C0Ch case    2:*/		cpu::op::rlwinm<1,0,23,8>(regs,&regs.R11,regs.R11);
		/* 821E0C0Ch case    2:*/		return 0x821E0C10;
		  /* 821E0C10h */ case    3:  		/* bc 4, CR0_EQ, 23940 */
		/* 821E0C10h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E6994;  }
		/* 821E0C10h case    3:*/		return 0x821E0C14;
	}
	return 0x821E0C14;
} // Block from 821E0C04h-821E0C14h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E0C14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0C14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0C14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0C14);
		  /* 821E0C14h */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821E0C14h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821E0C14h case    0:*/		return 0x821E0C18;
		  /* 821E0C18h */ case    1:  		/* bc 12, CR0_EQ, 4368 */
		/* 821E0C18h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E1D28;  }
		/* 821E0C18h case    1:*/		return 0x821E0C1C;
		  /* 821E0C1Ch */ case    2:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E0C1Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E0C1Ch case    2:*/		return 0x821E0C20;
		  /* 821E0C20h */ case    3:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E0C20h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E0C20h case    3:*/		return 0x821E0C24;
		  /* 821E0C24h */ case    4:  		/* mulli R10, R10, 68 */
		/* 821E0C24h case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E0C24h case    4:*/		return 0x821E0C28;
		  /* 821E0C28h */ case    5:  		/* add R10, R10, R11 */
		/* 821E0C28h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E0C28h case    5:*/		return 0x821E0C2C;
		  /* 821E0C2Ch */ case    6:  		/* mr R21, R11 */
		/* 821E0C2Ch case    6:*/		regs.R21 = regs.R11;
		/* 821E0C2Ch case    6:*/		return 0x821E0C30;
		  /* 821E0C30h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 821E0C30h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E0C30h case    7:*/		return 0x821E0C34;
		  /* 821E0C34h */ case    8:  		/* b 4288 */
		/* 821E0C34h case    8:*/		return 0x821E1CF4;
		/* 821E0C34h case    8:*/		return 0x821E0C38;
		  /* 821E0C38h */ case    9:  		/* lwz R23, <#[R21 + 12]> */
		/* 821E0C38h case    9:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R21 + 0x0000000C) );
		/* 821E0C38h case    9:*/		return 0x821E0C3C;
		  /* 821E0C3Ch */ case   10:  		/* cmplwi CR6, R23, 0 */
		/* 821E0C3Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821E0C3Ch case   10:*/		return 0x821E0C40;
		  /* 821E0C40h */ case   11:  		/* bc 12, CR6_EQ, 108 */
		/* 821E0C40h case   11:*/		if ( regs.CR[6].eq ) { return 0x821E0CAC;  }
		/* 821E0C40h case   11:*/		return 0x821E0C44;
		  /* 821E0C44h */ case   12:  		/* lwz R22, <#[R21 + 8]> */
		/* 821E0C44h case   12:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R21 + 0x00000008) );
		/* 821E0C44h case   12:*/		return 0x821E0C48;
		  /* 821E0C48h */ case   13:  		/* cmplwi CR6, R22, 0 */
		/* 821E0C48h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821E0C48h case   13:*/		return 0x821E0C4C;
		  /* 821E0C4Ch */ case   14:  		/* stw R22, <#[R1 + 136]> */
		/* 821E0C4Ch case   14:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000088) );
		/* 821E0C4Ch case   14:*/		return 0x821E0C50;
		  /* 821E0C50h */ case   15:  		/* bc 12, CR6_EQ, 4236 */
		/* 821E0C50h case   15:*/		if ( regs.CR[6].eq ) { return 0x821E1CDC;  }
		/* 821E0C50h case   15:*/		return 0x821E0C54;
		  /* 821E0C54h */ case   16:  		/* cmplw CR6, R23, R22 */
		/* 821E0C54h case   16:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R22);
		/* 821E0C54h case   16:*/		return 0x821E0C58;
		  /* 821E0C58h */ case   17:  		/* bc 12, CR6_EQ, 4228 */
		/* 821E0C58h case   17:*/		if ( regs.CR[6].eq ) { return 0x821E1CDC;  }
		/* 821E0C58h case   17:*/		return 0x821E0C5C;
		  /* 821E0C5Ch */ case   18:  		/* lwz R11, <#[R23 + 48]> */
		/* 821E0C5Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000030) );
		/* 821E0C5Ch case   18:*/		return 0x821E0C60;
		  /* 821E0C60h */ case   19:  		/* li R18, 1 */
		/* 821E0C60h case   19:*/		cpu::op::li<0>(regs,&regs.R18,0x1);
		/* 821E0C60h case   19:*/		return 0x821E0C64;
		  /* 821E0C64h */ case   20:  		/* lwz R10, <#[R22 + 40]> */
		/* 821E0C64h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000028) );
		/* 821E0C64h case   20:*/		return 0x821E0C68;
		  /* 821E0C68h */ case   21:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821E0C68h case   21:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821E0C68h case   21:*/		return 0x821E0C6C;
		  /* 821E0C6Ch */ case   22:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821E0C6Ch case   22:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821E0C6Ch case   22:*/		return 0x821E0C70;
		  /* 821E0C70h */ case   23:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821E0C70h case   23:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821E0C70h case   23:*/		return 0x821E0C74;
		  /* 821E0C74h */ case   24:  		/* addi R11, R11, 1 */
		/* 821E0C74h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E0C74h case   24:*/		return 0x821E0C78;
		  /* 821E0C78h */ case   25:  		/* slw R9, R18, R9 */
		/* 821E0C78h case   25:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R18,regs.R9);
		/* 821E0C78h case   25:*/		return 0x821E0C7C;
		  /* 821E0C7Ch */ case   26:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E0C7Ch case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E0C7Ch case   26:*/		return 0x821E0C80;
		  /* 821E0C80h */ case   27:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821E0C80h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821E0C80h case   27:*/		return 0x821E0C84;
		  /* 821E0C84h */ case   28:  		/* and. R11, R11, R9 */
		/* 821E0C84h case   28:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E0C84h case   28:*/		return 0x821E0C88;
		  /* 821E0C88h */ case   29:  		/* bc 12, CR0_EQ, 36 */
		/* 821E0C88h case   29:*/		if ( regs.CR[0].eq ) { return 0x821E0CAC;  }
		/* 821E0C88h case   29:*/		return 0x821E0C8C;
		  /* 821E0C8Ch */ case   30:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E0C8Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E0C8Ch case   30:*/		return 0x821E0C90;
		  /* 821E0C90h */ case   31:  		/* lwz R15, <#[R21 + 4]> */
		/* 821E0C90h case   31:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R21 + 0x00000004) );
		/* 821E0C90h case   31:*/		return 0x821E0C94;
		  /* 821E0C94h */ case   32:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821E0C94h case   32:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0C94h case   32:*/		return 0x821E0C98;
		  /* 821E0C98h */ case   33:  		/* addic R9, R10, -1 */
		/* 821E0C98h case   33:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 821E0C98h case   33:*/		return 0x821E0C9C;
		  /* 821E0C9Ch */ case   34:  		/* subfe R9, R9, R9 */
		/* 821E0C9Ch case   34:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821E0C9Ch case   34:*/		return 0x821E0CA0;
		  /* 821E0CA0h */ case   35:  		/* and R9, R9, R11 */
		/* 821E0CA0h case   35:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821E0CA0h case   35:*/		return 0x821E0CA4;
		  /* 821E0CA4h */ case   36:  		/* cmplw CR6, R15, R9 */
		/* 821E0CA4h case   36:*/		cpu::op::cmplw<6>(regs,regs.R15,regs.R9);
		/* 821E0CA4h case   36:*/		return 0x821E0CA8;
		  /* 821E0CA8h */ case   37:  		/* bc 4, CR6_EQ, 28 */
		/* 821E0CA8h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821E0CC4;  }
		/* 821E0CA8h case   37:*/		return 0x821E0CAC;
	}
	return 0x821E0CAC;
} // Block from 821E0C14h-821E0CACh (38 instructions)

//////////////////////////////////////////////////////
// Block at 821E0CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0CAC);
		  /* 821E0CACh */ case    0:  		/* lwz R11, <#[R21 + 36]> */
		/* 821E0CACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000024) );
		/* 821E0CACh case    0:*/		return 0x821E0CB0;
		  /* 821E0CB0h */ case    1:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 821E0CB0h case    1:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 821E0CB0h case    1:*/		return 0x821E0CB4;
		  /* 821E0CB4h */ case    2:  		/* bc 12, CR0_EQ, 4136 */
		/* 821E0CB4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E1CDC;  }
		/* 821E0CB4h case    2:*/		return 0x821E0CB8;
		  /* 821E0CB8h */ case    3:  		/* li R4, 3511 */
		/* 821E0CB8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xDB7);
		/* 821E0CB8h case    3:*/		return 0x821E0CBC;
		  /* 821E0CBCh */ case    4:  		/* mr R3, R20 */
		/* 821E0CBCh case    4:*/		regs.R3 = regs.R20;
		/* 821E0CBCh case    4:*/		return 0x821E0CC0;
		  /* 821E0CC0h */ case    5:  		/* bl -585304 */
		/* 821E0CC0h case    5:*/		regs.LR = 0x821E0CC4; return 0x82151E68;
		/* 821E0CC0h case    5:*/		return 0x821E0CC4;
	}
	return 0x821E0CC4;
} // Block from 821E0CACh-821E0CC4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E0CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0CC4);
		  /* 821E0CC4h */ case    0:  		/* lwz R9, <#[R20 + 616]> */
		/* 821E0CC4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000268) );
		/* 821E0CC4h case    0:*/		return 0x821E0CC8;
		  /* 821E0CC8h */ case    1:  		/* li R8, 68 */
		/* 821E0CC8h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x44);
		/* 821E0CC8h case    1:*/		return 0x821E0CCC;
		  /* 821E0CCCh */ case    2:  		/* lwz R7, <#[R21 + 36]> */
		/* 821E0CCCh case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000024) );
		/* 821E0CCCh case    2:*/		return 0x821E0CD0;
		  /* 821E0CD0h */ case    3:  		/* subf R9, R9, R21 */
		/* 821E0CD0h case    3:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R21);
		/* 821E0CD0h case    3:*/		return 0x821E0CD4;
		  /* 821E0CD4h */ case    4:  		/* rlwinm. R7, R7, 0, 31, 31 */
		/* 821E0CD4h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R7,regs.R7);
		/* 821E0CD4h case    4:*/		return 0x821E0CD8;
		  /* 821E0CD8h */ case    5:  		/* divw R25, R9, R8 */
		/* 821E0CD8h case    5:*/		cpu::op::divw<0>(regs,&regs.R25,regs.R9,regs.R8);
		/* 821E0CD8h case    5:*/		return 0x821E0CDC;
		  /* 821E0CDCh */ case    6:  		/* bc 12, CR0_EQ, 536 */
		/* 821E0CDCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821E0EF4;  }
		/* 821E0CDCh case    6:*/		return 0x821E0CE0;
		  /* 821E0CE0h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821E0CE0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E0CE0h case    7:*/		return 0x821E0CE4;
		  /* 821E0CE4h */ case    8:  		/* bc 4, CR6_EQ, 528 */
		/* 821E0CE4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E0EF4;  }
		/* 821E0CE4h case    8:*/		return 0x821E0CE8;
		  /* 821E0CE8h */ case    9:  		/* mr R26, R11 */
		/* 821E0CE8h case    9:*/		regs.R26 = regs.R11;
		/* 821E0CE8h case    9:*/		return 0x821E0CEC;
		  /* 821E0CECh */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821E0CECh case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E0CECh case   10:*/		return 0x821E0CF0;
		  /* 821E0CF0h */ case   11:  		/* bc 12, CR0_EQ, 516 */
		/* 821E0CF0h case   11:*/		if ( regs.CR[0].eq ) { return 0x821E0EF4;  }
		/* 821E0CF0h case   11:*/		return 0x821E0CF4;
		  /* 821E0CF4h */ case   12:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E0CF4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E0CF4h case   12:*/		return 0x821E0CF8;
		  /* 821E0CF8h */ case   13:  		/* li R10, 68 */
		/* 821E0CF8h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x44);
		/* 821E0CF8h case   13:*/		return 0x821E0CFC;
		  /* 821E0CFCh */ case   14:  		/* subf R11, R11, R21 */
		/* 821E0CFCh case   14:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 821E0CFCh case   14:*/		return 0x821E0D00;
		  /* 821E0D00h */ case   15:  		/* divw R10, R11, R10 */
		/* 821E0D00h case   15:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821E0D00h case   15:*/		return 0x821E0D04;
		  /* 821E0D04h */ case   16:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E0D04h case   16:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E0D04h case   16:*/		return 0x821E0D08;
		  /* 821E0D08h */ case   17:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821E0D08h case   17:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821E0D08h case   17:*/		return 0x821E0D0C;
		  /* 821E0D0Ch */ case   18:  		/* addi R11, R11, 21 */
		/* 821E0D0Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E0D0Ch case   18:*/		return 0x821E0D10;
		  /* 821E0D10h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E0D10h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E0D10h case   19:*/		return 0x821E0D14;
		  /* 821E0D14h */ case   20:  		/* lwzx R11, <#[R11 + R26]> */
		/* 821E0D14h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 821E0D14h case   20:*/		return 0x821E0D18;
		  /* 821E0D18h */ case   21:  		/* srw R11, R11, R10 */
		/* 821E0D18h case   21:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E0D18h case   21:*/		return 0x821E0D1C;
		  /* 821E0D1Ch */ case   22:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E0D1Ch case   22:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E0D1Ch case   22:*/		return 0x821E0D20;
		  /* 821E0D20h */ case   23:  		/* bc 12, CR0_EQ, 440 */
		/* 821E0D20h case   23:*/		if ( regs.CR[0].eq ) { return 0x821E0ED8;  }
		/* 821E0D20h case   23:*/		return 0x821E0D24;
		  /* 821E0D24h */ case   24:  		/* lwz R24, <#[R26 + 12]> */
		/* 821E0D24h case   24:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R26 + 0x0000000C) );
		/* 821E0D24h case   24:*/		return 0x821E0D28;
		  /* 821E0D28h */ case   25:  		/* cmplwi CR6, R24, 0 */
		/* 821E0D28h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821E0D28h case   25:*/		return 0x821E0D2C;
		  /* 821E0D2Ch */ case   26:  		/* bc 12, CR6_EQ, 428 */
		/* 821E0D2Ch case   26:*/		if ( regs.CR[6].eq ) { return 0x821E0ED8;  }
		/* 821E0D2Ch case   26:*/		return 0x821E0D30;
		  /* 821E0D30h */ case   27:  		/* rlwinm R11, R25, 27, 5, 31 */
		/* 821E0D30h case   27:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R25);
		/* 821E0D30h case   27:*/		return 0x821E0D34;
		  /* 821E0D34h */ case   28:  		/* lwz R27, <#[R24]> */
		/* 821E0D34h case   28:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R24 + 0x00000000) );
		/* 821E0D34h case   28:*/		return 0x821E0D38;
		  /* 821E0D38h */ case   29:  		/* rlwinm R10, R25, 0, 27, 31 */
		/* 821E0D38h case   29:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R25);
		/* 821E0D38h case   29:*/		return 0x821E0D3C;
		  /* 821E0D3Ch */ case   30:  		/* addi R11, R11, 21 */
		/* 821E0D3Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E0D3Ch case   30:*/		return 0x821E0D40;
		  /* 821E0D40h */ case   31:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E0D40h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E0D40h case   31:*/		return 0x821E0D44;
		  /* 821E0D44h */ case   32:  		/* lwzx R11, <#[R11 + R27]> */
		/* 821E0D44h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 821E0D44h case   32:*/		return 0x821E0D48;
		  /* 821E0D48h */ case   33:  		/* srw R11, R11, R10 */
		/* 821E0D48h case   33:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E0D48h case   33:*/		return 0x821E0D4C;
		  /* 821E0D4Ch */ case   34:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E0D4Ch case   34:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E0D4Ch case   34:*/		return 0x821E0D50;
		  /* 821E0D50h */ case   35:  		/* bc 4, CR0_EQ, 384 */
		/* 821E0D50h case   35:*/		if ( !regs.CR[0].eq ) { return 0x821E0ED0;  }
		/* 821E0D50h case   35:*/		return 0x821E0D54;
		  /* 821E0D54h */ case   36:  		/* lwz R11, <#[R27 + 8]> */
		/* 821E0D54h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821E0D54h case   36:*/		return 0x821E0D58;
		  /* 821E0D58h */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 821E0D58h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0D58h case   37:*/		return 0x821E0D5C;
		  /* 821E0D5Ch */ case   38:  		/* bc 12, CR6_EQ, 24 */
		/* 821E0D5Ch case   38:*/		if ( regs.CR[6].eq ) { return 0x821E0D74;  }
		/* 821E0D5Ch case   38:*/		return 0x821E0D60;
		  /* 821E0D60h */ case   39:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E0D60h case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E0D60h case   39:*/		return 0x821E0D64;
		  /* 821E0D64h */ case   40:  		/* lwz R11, <#[R11 + 12]> */
		/* 821E0D64h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E0D64h case   40:*/		return 0x821E0D68;
		  /* 821E0D68h */ case   41:  		/* cmplwi CR6, R11, 0 */
		/* 821E0D68h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0D68h case   41:*/		return 0x821E0D6C;
		  /* 821E0D6Ch */ case   42:  		/* mr R11, R18 */
		/* 821E0D6Ch case   42:*/		regs.R11 = regs.R18;
		/* 821E0D6Ch case   42:*/		return 0x821E0D70;
		  /* 821E0D70h */ case   43:  		/* bc 4, CR6_EQ, 8 */
		/* 821E0D70h case   43:*/		if ( !regs.CR[6].eq ) { return 0x821E0D78;  }
		/* 821E0D70h case   43:*/		return 0x821E0D74;
	}
	return 0x821E0D74;
} // Block from 821E0CC4h-821E0D74h (44 instructions)

//////////////////////////////////////////////////////
// Block at 821E0D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0D74);
		  /* 821E0D74h */ case    0:  		/* mr R11, R19 */
		/* 821E0D74h case    0:*/		regs.R11 = regs.R19;
		/* 821E0D74h case    0:*/		return 0x821E0D78;
	}
	return 0x821E0D78;
} // Block from 821E0D74h-821E0D78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E0D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0D78);
		  /* 821E0D78h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E0D78h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E0D78h case    0:*/		return 0x821E0D7C;
		  /* 821E0D7Ch */ case    1:  		/* bc 12, CR0_EQ, 340 */
		/* 821E0D7Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821E0ED0;  }
		/* 821E0D7Ch case    1:*/		return 0x821E0D80;
		  /* 821E0D80h */ case    2:  		/* lwz R11, <#[R27 + 28]> */
		/* 821E0D80h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 821E0D80h case    2:*/		return 0x821E0D84;
		  /* 821E0D84h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0D84h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0D84h case    3:*/		return 0x821E0D88;
		  /* 821E0D88h */ case    4:  		/* bc 4, CR0_EQ, 92 */
		/* 821E0D88h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E0DE4;  }
		/* 821E0D88h case    4:*/		return 0x821E0D8C;
		  /* 821E0D8Ch */ case    5:  		/* mr R30, R11 */
		/* 821E0D8Ch case    5:*/		regs.R30 = regs.R11;
		/* 821E0D8Ch case    5:*/		return 0x821E0D90;
		  /* 821E0D90h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821E0D90h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E0D90h case    6:*/		return 0x821E0D94;
		  /* 821E0D94h */ case    7:  		/* bc 12, CR0_EQ, 80 */
		/* 821E0D94h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E0DE4;  }
		/* 821E0D94h case    7:*/		return 0x821E0D98;
		  /* 821E0D98h */ case    8:  		/* lwz R31, <#[R30]> */
		/* 821E0D98h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821E0D98h case    8:*/		return 0x821E0D9C;
		  /* 821E0D9Ch */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 821E0D9Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E0D9Ch case    9:*/		return 0x821E0DA0;
		  /* 821E0DA0h */ case   10:  		/* bc 12, CR6_EQ, 40 */
		/* 821E0DA0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821E0DC8;  }
		/* 821E0DA0h case   10:*/		return 0x821E0DA4;
		  /* 821E0DA4h */ case   11:  		/* lwz R11, <#[R31 + 12]> */
		/* 821E0DA4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E0DA4h case   11:*/		return 0x821E0DA8;
		  /* 821E0DA8h */ case   12:  		/* lwz R11, <#[R11 + 28]> */
		/* 821E0DA8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821E0DA8h case   12:*/		return 0x821E0DAC;
		  /* 821E0DACh */ case   13:  		/* cmplw CR6, R11, R27 */
		/* 821E0DACh case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 821E0DACh case   13:*/		return 0x821E0DB0;
		  /* 821E0DB0h */ case   14:  		/* bc 12, CR6_EQ, 16 */
		/* 821E0DB0h case   14:*/		if ( regs.CR[6].eq ) { return 0x821E0DC0;  }
		/* 821E0DB0h case   14:*/		return 0x821E0DB4;
		  /* 821E0DB4h */ case   15:  		/* mr R4, R31 */
		/* 821E0DB4h case   15:*/		regs.R4 = regs.R31;
		/* 821E0DB4h case   15:*/		return 0x821E0DB8;
		  /* 821E0DB8h */ case   16:  		/* mr R3, R20 */
		/* 821E0DB8h case   16:*/		regs.R3 = regs.R20;
		/* 821E0DB8h case   16:*/		return 0x821E0DBC;
		  /* 821E0DBCh */ case   17:  		/* bl -169052 */
		/* 821E0DBCh case   17:*/		regs.LR = 0x821E0DC0; return 0x821B7960;
		/* 821E0DBCh case   17:*/		return 0x821E0DC0;
	}
	return 0x821E0DC0;
} // Block from 821E0D78h-821E0DC0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821E0DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0DC0);
		  /* 821E0DC0h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821E0DC0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821E0DC0h case    0:*/		return 0x821E0DC4;
		  /* 821E0DC4h */ case    1:  		/* b -40 */
		/* 821E0DC4h case    1:*/		return 0x821E0D9C;
		/* 821E0DC4h case    1:*/		return 0x821E0DC8;
	}
	return 0x821E0DC8;
} // Block from 821E0DC0h-821E0DC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0DC8);
		  /* 821E0DC8h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821E0DC8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821E0DC8h case    0:*/		return 0x821E0DCC;
		  /* 821E0DCCh */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E0DCCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E0DCCh case    1:*/		return 0x821E0DD0;
		  /* 821E0DD0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0DD0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0DD0h case    2:*/		return 0x821E0DD4;
		  /* 821E0DD4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E0DD4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E0DE4;  }
		/* 821E0DD4h case    3:*/		return 0x821E0DD8;
		  /* 821E0DD8h */ case    4:  		/* mr R30, R11 */
		/* 821E0DD8h case    4:*/		regs.R30 = regs.R11;
		/* 821E0DD8h case    4:*/		return 0x821E0DDC;
		  /* 821E0DDCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E0DDCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0DDCh case    5:*/		return 0x821E0DE0;
		  /* 821E0DE0h */ case    6:  		/* bc 4, CR6_EQ, -72 */
		/* 821E0DE0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E0D98;  }
		/* 821E0DE0h case    6:*/		return 0x821E0DE4;
	}
	return 0x821E0DE4;
} // Block from 821E0DC8h-821E0DE4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E0DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0DE4);
		  /* 821E0DE4h */ case    0:  		/* lwz R30, <#[R27 + 20]> */
		/* 821E0DE4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000014) );
		/* 821E0DE4h case    0:*/		return 0x821E0DE8;
		  /* 821E0DE8h */ case    1:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 821E0DE8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 821E0DE8h case    1:*/		return 0x821E0DEC;
		  /* 821E0DECh */ case    2:  		/* bc 4, CR0_EQ, 228 */
		/* 821E0DECh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E0ED0;  }
		/* 821E0DECh case    2:*/		return 0x821E0DF0;
		  /* 821E0DF0h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 821E0DF0h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 821E0DF0h case    3:*/		return 0x821E0DF4;
		  /* 821E0DF4h */ case    4:  		/* bc 12, CR0_EQ, 220 */
		/* 821E0DF4h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E0ED0;  }
		/* 821E0DF4h case    4:*/		return 0x821E0DF8;
		  /* 821E0DF8h */ case    5:  		/* lwz R11, <#[R30 + 8]> */
		/* 821E0DF8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E0DF8h case    5:*/		return 0x821E0DFC;
		  /* 821E0DFCh */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E0DFCh case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E0DFCh case    6:*/		return 0x821E0E00;
		  /* 821E0E00h */ case    7:  		/* cmplwi CR6, R11, 14336 */
		/* 821E0E00h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E0E00h case    7:*/		return 0x821E0E04;
		  /* 821E0E04h */ case    8:  		/* bc 4, CR6_EQ, 180 */
		/* 821E0E04h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E0EB8;  }
		/* 821E0E04h case    8:*/		return 0x821E0E08;
		  /* 821E0E08h */ case    9:  		/* li R7, 1 */
		/* 821E0E08h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821E0E08h case    9:*/		return 0x821E0E0C;
		  /* 821E0E0Ch */ case   10:  		/* li R6, 0 */
		/* 821E0E0Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E0E0Ch case   10:*/		return 0x821E0E10;
		  /* 821E0E10h */ case   11:  		/* mr R5, R26 */
		/* 821E0E10h case   11:*/		regs.R5 = regs.R26;
		/* 821E0E10h case   11:*/		return 0x821E0E14;
		  /* 821E0E14h */ case   12:  		/* mr R4, R30 */
		/* 821E0E14h case   12:*/		regs.R4 = regs.R30;
		/* 821E0E14h case   12:*/		return 0x821E0E18;
		  /* 821E0E18h */ case   13:  		/* mr R3, R20 */
		/* 821E0E18h case   13:*/		regs.R3 = regs.R20;
		/* 821E0E18h case   13:*/		return 0x821E0E1C;
		  /* 821E0E1Ch */ case   14:  		/* bl 30436 */
		/* 821E0E1Ch case   14:*/		regs.LR = 0x821E0E20; return 0x821E8500;
		/* 821E0E1Ch case   14:*/		return 0x821E0E20;
		  /* 821E0E20h */ case   15:  		/* or. R31, R3, R3 */
		/* 821E0E20h case   15:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821E0E20h case   15:*/		return 0x821E0E24;
		  /* 821E0E24h */ case   16:  		/* bc 12, CR0_EQ, 148 */
		/* 821E0E24h case   16:*/		if ( regs.CR[0].eq ) { return 0x821E0EB8;  }
		/* 821E0E24h case   16:*/		return 0x821E0E28;
		  /* 821E0E28h */ case   17:  		/* lwz R11, <#[R31 + 12]> */
		/* 821E0E28h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E0E28h case   17:*/		return 0x821E0E2C;
		  /* 821E0E2Ch */ case   18:  		/* lwz R11, <#[R11 + 28]> */
		/* 821E0E2Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821E0E2Ch case   18:*/		return 0x821E0E30;
		  /* 821E0E30h */ case   19:  		/* cmplw CR6, R11, R26 */
		/* 821E0E30h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821E0E30h case   19:*/		return 0x821E0E34;
		  /* 821E0E34h */ case   20:  		/* bc 12, CR6_EQ, 132 */
		/* 821E0E34h case   20:*/		if ( regs.CR[6].eq ) { return 0x821E0EB8;  }
		/* 821E0E34h case   20:*/		return 0x821E0E38;
		  /* 821E0E38h */ case   21:  		/* mr R4, R26 */
		/* 821E0E38h case   21:*/		regs.R4 = regs.R26;
		/* 821E0E38h case   21:*/		return 0x821E0E3C;
		  /* 821E0E3Ch */ case   22:  		/* mr R3, R20 */
		/* 821E0E3Ch case   22:*/		regs.R3 = regs.R20;
		/* 821E0E3Ch case   22:*/		return 0x821E0E40;
		  /* 821E0E40h */ case   23:  		/* bl 277504 */
		/* 821E0E40h case   23:*/		regs.LR = 0x821E0E44; return 0x82224A40;
		/* 821E0E40h case   23:*/		return 0x821E0E44;
		  /* 821E0E44h */ case   24:  		/* mr R4, R31 */
		/* 821E0E44h case   24:*/		regs.R4 = regs.R31;
		/* 821E0E44h case   24:*/		return 0x821E0E48;
		  /* 821E0E48h */ case   25:  		/* mr R29, R3 */
		/* 821E0E48h case   25:*/		regs.R29 = regs.R3;
		/* 821E0E48h case   25:*/		return 0x821E0E4C;
		  /* 821E0E4Ch */ case   26:  		/* bl -429188 */
		/* 821E0E4Ch case   26:*/		regs.LR = 0x821E0E50; return 0x821781C8;
		/* 821E0E4Ch case   26:*/		return 0x821E0E50;
		  /* 821E0E50h */ case   27:  		/* mr R4, R29 */
		/* 821E0E50h case   27:*/		regs.R4 = regs.R29;
		/* 821E0E50h case   27:*/		return 0x821E0E54;
		  /* 821E0E54h */ case   28:  		/* mr R3, R20 */
		/* 821E0E54h case   28:*/		regs.R3 = regs.R20;
		/* 821E0E54h case   28:*/		return 0x821E0E58;
		  /* 821E0E58h */ case   29:  		/* bl -429656 */
		/* 821E0E58h case   29:*/		regs.LR = 0x821E0E5C; return 0x82178000;
		/* 821E0E58h case   29:*/		return 0x821E0E5C;
		  /* 821E0E5Ch */ case   30:  		/* mr R4, R3 */
		/* 821E0E5Ch case   30:*/		regs.R4 = regs.R3;
		/* 821E0E5Ch case   30:*/		return 0x821E0E60;
		  /* 821E0E60h */ case   31:  		/* mr R3, R30 */
		/* 821E0E60h case   31:*/		regs.R3 = regs.R30;
		/* 821E0E60h case   31:*/		return 0x821E0E64;
		  /* 821E0E64h */ case   32:  		/* bl -429212 */
		/* 821E0E64h case   32:*/		regs.LR = 0x821E0E68; return 0x821781C8;
		/* 821E0E64h case   32:*/		return 0x821E0E68;
		  /* 821E0E68h */ case   33:  		/* lwz R29, <#[R27 + 8]> */
		/* 821E0E68h case   33:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + 0x00000008) );
		/* 821E0E68h case   33:*/		return 0x821E0E6C;
		  /* 821E0E6Ch */ case   34:  		/* cmplwi CR6, R29, 0 */
		/* 821E0E6Ch case   34:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E0E6Ch case   34:*/		return 0x821E0E70;
		  /* 821E0E70h */ case   35:  		/* bc 12, CR6_EQ, 56 */
		/* 821E0E70h case   35:*/		if ( regs.CR[6].eq ) { return 0x821E0EA8;  }
		/* 821E0E70h case   35:*/		return 0x821E0E74;
		  /* 821E0E74h */ case   36:  		/* lwz R28, <#[R29 + 4]> */
		/* 821E0E74h case   36:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000004) );
		/* 821E0E74h case   36:*/		return 0x821E0E78;
		  /* 821E0E78h */ case   37:  		/* li R7, 1 */
		/* 821E0E78h case   37:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821E0E78h case   37:*/		return 0x821E0E7C;
		  /* 821E0E7Ch */ case   38:  		/* li R6, 0 */
		/* 821E0E7Ch case   38:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E0E7Ch case   38:*/		return 0x821E0E80;
		  /* 821E0E80h */ case   39:  		/* mr R5, R28 */
		/* 821E0E80h case   39:*/		regs.R5 = regs.R28;
		/* 821E0E80h case   39:*/		return 0x821E0E84;
		  /* 821E0E84h */ case   40:  		/* mr R4, R30 */
		/* 821E0E84h case   40:*/		regs.R4 = regs.R30;
		/* 821E0E84h case   40:*/		return 0x821E0E88;
		  /* 821E0E88h */ case   41:  		/* mr R3, R20 */
		/* 821E0E88h case   41:*/		regs.R3 = regs.R20;
		/* 821E0E88h case   41:*/		return 0x821E0E8C;
		  /* 821E0E8Ch */ case   42:  		/* bl 30324 */
		/* 821E0E8Ch case   42:*/		regs.LR = 0x821E0E90; return 0x821E8500;
		/* 821E0E8Ch case   42:*/		return 0x821E0E90;
		  /* 821E0E90h */ case   43:  		/* cmplw CR6, R31, R3 */
		/* 821E0E90h case   43:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R3);
		/* 821E0E90h case   43:*/		return 0x821E0E94;
		  /* 821E0E94h */ case   44:  		/* bc 12, CR6_EQ, 12 */
		/* 821E0E94h case   44:*/		if ( regs.CR[6].eq ) { return 0x821E0EA0;  }
		/* 821E0E94h case   44:*/		return 0x821E0E98;
		  /* 821E0E98h */ case   45:  		/* lwz R29, <#[R29 + 12]> */
		/* 821E0E98h case   45:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x0000000C) );
		/* 821E0E98h case   45:*/		return 0x821E0E9C;
		  /* 821E0E9Ch */ case   46:  		/* b -48 */
		/* 821E0E9Ch case   46:*/		return 0x821E0E6C;
		/* 821E0E9Ch case   46:*/		return 0x821E0EA0;
	}
	return 0x821E0EA0;
} // Block from 821E0DE4h-821E0EA0h (47 instructions)

//////////////////////////////////////////////////////
// Block at 821E0EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0EA0);
		  /* 821E0EA0h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821E0EA0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821E0EA0h case    0:*/		return 0x821E0EA4;
		  /* 821E0EA4h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821E0EA4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E0EB8;  }
		/* 821E0EA4h case    1:*/		return 0x821E0EA8;
	}
	return 0x821E0EA8;
} // Block from 821E0EA0h-821E0EA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0EA8);
		  /* 821E0EA8h */ case    0:  		/* mr R5, R20 */
		/* 821E0EA8h case    0:*/		regs.R5 = regs.R20;
		/* 821E0EA8h case    0:*/		return 0x821E0EAC;
		  /* 821E0EACh */ case    1:  		/* mr R4, R31 */
		/* 821E0EACh case    1:*/		regs.R4 = regs.R31;
		/* 821E0EACh case    1:*/		return 0x821E0EB0;
		  /* 821E0EB0h */ case    2:  		/* mr R3, R30 */
		/* 821E0EB0h case    2:*/		regs.R3 = regs.R30;
		/* 821E0EB0h case    2:*/		return 0x821E0EB4;
		  /* 821E0EB4h */ case    3:  		/* bl -427428 */
		/* 821E0EB4h case    3:*/		regs.LR = 0x821E0EB8; return 0x82178910;
		/* 821E0EB4h case    3:*/		return 0x821E0EB8;
	}
	return 0x821E0EB8;
} // Block from 821E0EA8h-821E0EB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E0EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0EB8);
		  /* 821E0EB8h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821E0EB8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821E0EB8h case    0:*/		return 0x821E0EBC;
		  /* 821E0EBCh */ case    1:  		/* lwz R30, <#[R11 + 40]> */
		/* 821E0EBCh case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000028) );
		/* 821E0EBCh case    1:*/		return 0x821E0EC0;
		  /* 821E0EC0h */ case    2:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 821E0EC0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 821E0EC0h case    2:*/		return 0x821E0EC4;
		  /* 821E0EC4h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E0EC4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E0ED0;  }
		/* 821E0EC4h case    3:*/		return 0x821E0EC8;
		  /* 821E0EC8h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821E0EC8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E0EC8h case    4:*/		return 0x821E0ECC;
		  /* 821E0ECCh */ case    5:  		/* bc 4, CR6_EQ, -212 */
		/* 821E0ECCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E0DF8;  }
		/* 821E0ECCh case    5:*/		return 0x821E0ED0;
	}
	return 0x821E0ED0;
} // Block from 821E0EB8h-821E0ED0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E0ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0ED0);
		  /* 821E0ED0h */ case    0:  		/* lwz R24, <#[R24 + 8]> */
		/* 821E0ED0h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R24 + 0x00000008) );
		/* 821E0ED0h case    0:*/		return 0x821E0ED4;
		  /* 821E0ED4h */ case    1:  		/* b -428 */
		/* 821E0ED4h case    1:*/		return 0x821E0D28;
		/* 821E0ED4h case    1:*/		return 0x821E0ED8;
	}
	return 0x821E0ED8;
} // Block from 821E0ED0h-821E0ED8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0ED8);
		  /* 821E0ED8h */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821E0ED8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821E0ED8h case    0:*/		return 0x821E0EDC;
		  /* 821E0EDCh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E0EDCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E0EDCh case    1:*/		return 0x821E0EE0;
		  /* 821E0EE0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0EE0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0EE0h case    2:*/		return 0x821E0EE4;
		  /* 821E0EE4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E0EE4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E0EF4;  }
		/* 821E0EE4h case    3:*/		return 0x821E0EE8;
		  /* 821E0EE8h */ case    4:  		/* mr R26, R11 */
		/* 821E0EE8h case    4:*/		regs.R26 = regs.R11;
		/* 821E0EE8h case    4:*/		return 0x821E0EEC;
		  /* 821E0EECh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E0EECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0EECh case    5:*/		return 0x821E0EF0;
		  /* 821E0EF0h */ case    6:  		/* bc 4, CR6_EQ, -508 */
		/* 821E0EF0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E0CF4;  }
		/* 821E0EF0h case    6:*/		return 0x821E0EF4;
	}
	return 0x821E0EF4;
} // Block from 821E0ED8h-821E0EF4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E0EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0EF4);
		  /* 821E0EF4h */ case    0:  		/* lwz R11, <#[R20 + 108]> */
		/* 821E0EF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000006C) );
		/* 821E0EF4h case    0:*/		return 0x821E0EF8;
		  /* 821E0EF8h */ case    1:  		/* addi R9, R1, 176 */
		/* 821E0EF8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xB0);
		/* 821E0EF8h case    1:*/		return 0x821E0EFC;
		  /* 821E0EFCh */ case    2:  		/* rlwinm R10, R25, 27, 5, 31 */
		/* 821E0EFCh case    2:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R25);
		/* 821E0EFCh case    2:*/		return 0x821E0F00;
		  /* 821E0F00h */ case    3:  		/* lwz R14, <#[R20 + 92]> */
		/* 821E0F00h case    3:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R20 + 0x0000005C) );
		/* 821E0F00h case    3:*/		return 0x821E0F04;
		  /* 821E0F04h */ case    4:  		/* rlwinm R16, R25, 0, 27, 31 */
		/* 821E0F04h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R16,regs.R25);
		/* 821E0F04h case    4:*/		return 0x821E0F08;
		  /* 821E0F08h */ case    5:  		/* addi R8, R1, 180 */
		/* 821E0F08h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xB4);
		/* 821E0F08h case    5:*/		return 0x821E0F0C;
		  /* 821E0F0Ch */ case    6:  		/* addi R17, R11, 1 */
		/* 821E0F0Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R11,0x1);
		/* 821E0F0Ch case    6:*/		return 0x821E0F10;
		  /* 821E0F10h */ case    7:  		/* ori R30, R9, 1 */
		/* 821E0F10h case    7:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R9,0x1);
		/* 821E0F10h case    7:*/		return 0x821E0F14;
		  /* 821E0F14h */ case    8:  		/* slw R11, R18, R16 */
		/* 821E0F14h case    8:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R18,regs.R16);
		/* 821E0F14h case    8:*/		return 0x821E0F18;
		  /* 821E0F18h */ case    9:  		/* stw R17, <#[R20 + 108]> */
		/* 821E0F18h case    9:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R20 + 0x0000006C) );
		/* 821E0F18h case    9:*/		return 0x821E0F1C;
		  /* 821E0F1Ch */ case   10:  		/* addi R10, R10, 21 */
		/* 821E0F1Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821E0F1Ch case   10:*/		return 0x821E0F20;
		  /* 821E0F20h */ case   11:  		/* stw R30, <#[R1 + 180]> */
		/* 821E0F20h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000B4) );
		/* 821E0F20h case   11:*/		return 0x821E0F24;
		  /* 821E0F24h */ case   12:  		/* ori R9, R8, 1 */
		/* 821E0F24h case   12:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R8,0x1);
		/* 821E0F24h case   12:*/		return 0x821E0F28;
		  /* 821E0F28h */ case   13:  		/* mr R31, R15 */
		/* 821E0F28h case   13:*/		regs.R31 = regs.R15;
		/* 821E0F28h case   13:*/		return 0x821E0F2C;
		  /* 821E0F2Ch */ case   14:  		/* stw R9, <#[R1 + 176]> */
		/* 821E0F2Ch case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000B0) );
		/* 821E0F2Ch case   14:*/		return 0x821E0F30;
		  /* 821E0F30h */ case   15:  		/* rlwinm R18, R10, 2, 0, 29 */
		/* 821E0F30h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R18,regs.R10);
		/* 821E0F30h case   15:*/		return 0x821E0F34;
		  /* 821E0F34h */ case   16:  		/* nor R29, R11, R11 */
		/* 821E0F34h case   16:*/		cpu::op::nor<0>(regs,&regs.R29,regs.R11,regs.R11);
		/* 821E0F34h case   16:*/		return 0x821E0F38;
		  /* 821E0F38h */ case   17:  		/* mr R3, R20 */
		/* 821E0F38h case   17:*/		regs.R3 = regs.R20;
		/* 821E0F38h case   17:*/		return 0x821E0F3C;
		  /* 821E0F3Ch */ case   18:  		/* bl -475140 */
		/* 821E0F3Ch case   18:*/		regs.LR = 0x821E0F40; return 0x8216CF38;
		/* 821E0F3Ch case   18:*/		return 0x821E0F40;
		  /* 821E0F40h */ case   19:  		/* stw R19, <#[R3 + 84]> */
		/* 821E0F40h case   19:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R3 + 0x00000054) );
		/* 821E0F40h case   19:*/		return 0x821E0F44;
		  /* 821E0F44h */ case   20:  		/* stw R31, <#[R3 + 80]> */
		/* 821E0F44h case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000050) );
		/* 821E0F44h case   20:*/		return 0x821E0F48;
		  /* 821E0F48h */ case   21:  		/* stw R3, <#[R31 + 80]> */
		/* 821E0F48h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000050) );
		/* 821E0F48h case   21:*/		return 0x821E0F4C;
		  /* 821E0F4Ch */ case   22:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821E0F4Ch case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821E0F4Ch case   22:*/		return 0x821E0F50;
		  /* 821E0F50h */ case   23:  		/* addi R10, R3, 84 */
		/* 821E0F50h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x54);
		/* 821E0F50h case   23:*/		return 0x821E0F54;
		  /* 821E0F54h */ case   24:  		/* addi R10, R11, 4 */
		/* 821E0F54h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E0F54h case   24:*/		return 0x821E0F58;
		  /* 821E0F58h */ case   25:  		/* cmplw CR6, R31, R23 */
		/* 821E0F58h case   25:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R23);
		/* 821E0F58h case   25:*/		return 0x821E0F5C;
		  /* 821E0F5Ch */ case   26:  		/* lwz R9, <#[R1 + 176]> */
		/* 821E0F5Ch case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000B0) );
		/* 821E0F5Ch case   26:*/		return 0x821E0F60;
		  /* 821E0F60h */ case   27:  		/* stw R9, <#[R11]> */
		/* 821E0F60h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E0F60h case   27:*/		return 0x821E0F64;
		  /* 821E0F64h */ case   28:  		/* lwz R9, <#[R1 + 176]> */
		/* 821E0F64h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000B0) );
		/* 821E0F64h case   28:*/		return 0x821E0F68;
		  /* 821E0F68h */ case   29:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821E0F68h case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821E0F68h case   29:*/		return 0x821E0F6C;
		  /* 821E0F6Ch */ case   30:  		/* stw R11, <#[R9]> */
		/* 821E0F6Ch case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821E0F6Ch case   30:*/		return 0x821E0F70;
		  /* 821E0F70h */ case   31:  		/* stw R30, <#[R11 + 4]> */
		/* 821E0F70h case   31:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821E0F70h case   31:*/		return 0x821E0F74;
		  /* 821E0F74h */ case   32:  		/* stw R10, <#[R1 + 176]> */
		/* 821E0F74h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 821E0F74h case   32:*/		return 0x821E0F78;
		  /* 821E0F78h */ case   33:  		/* lwz R11, <#[R31 + 84]> */
		/* 821E0F78h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 821E0F78h case   33:*/		return 0x821E0F7C;
		  /* 821E0F7Ch */ case   34:  		/* stw R11, <#[R3 + 84]> */
		/* 821E0F7Ch case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000054) );
		/* 821E0F7Ch case   34:*/		return 0x821E0F80;
		  /* 821E0F80h */ case   35:  		/* lwzx R11, <#[R18 + R31]> */
		/* 821E0F80h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + regs.R31 + 0x00000000) );
		/* 821E0F80h case   35:*/		return 0x821E0F84;
		  /* 821E0F84h */ case   36:  		/* and R11, R29, R11 */
		/* 821E0F84h case   36:*/		cpu::op::and<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821E0F84h case   36:*/		return 0x821E0F88;
		  /* 821E0F88h */ case   37:  		/* stwx R11, <#[R18 + R31]> */
		/* 821E0F88h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + regs.R31 + 0x00000000) );
		/* 821E0F88h case   37:*/		return 0x821E0F8C;
		  /* 821E0F8Ch */ case   38:  		/* stw R17, <#[R31 + 44]> */
		/* 821E0F8Ch case   38:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E0F8Ch case   38:*/		return 0x821E0F90;
		  /* 821E0F90h */ case   39:  		/* lwz R11, <#[R31 + 56]> */
		/* 821E0F90h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821E0F90h case   39:*/		return 0x821E0F94;
		  /* 821E0F94h */ case   40:  		/* bc 12, CR6_EQ, 32 */
		/* 821E0F94h case   40:*/		if ( regs.CR[6].eq ) { return 0x821E0FB4;  }
		/* 821E0F94h case   40:*/		return 0x821E0F98;
		  /* 821E0F98h */ case   41:  		/* cmplwi CR6, R11, 0 */
		/* 821E0F98h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0F98h case   41:*/		return 0x821E0F9C;
		  /* 821E0F9Ch */ case   42:  		/* bc 12, CR6_EQ, 24 */
		/* 821E0F9Ch case   42:*/		if ( regs.CR[6].eq ) { return 0x821E0FB4;  }
		/* 821E0F9Ch case   42:*/		return 0x821E0FA0;
		  /* 821E0FA0h */ case   43:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E0FA0h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E0FA0h case   43:*/		return 0x821E0FA4;
		  /* 821E0FA4h */ case   44:  		/* rlwinm. R10, R10, 13, 31, 31 */
		/* 821E0FA4h case   44:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R10);
		/* 821E0FA4h case   44:*/		return 0x821E0FA8;
		  /* 821E0FA8h */ case   45:  		/* bc 4, CR0_EQ, 12 */
		/* 821E0FA8h case   45:*/		if ( !regs.CR[0].eq ) { return 0x821E0FB4;  }
		/* 821E0FA8h case   45:*/		return 0x821E0FAC;
		  /* 821E0FACh */ case   46:  		/* mr R31, R11 */
		/* 821E0FACh case   46:*/		regs.R31 = regs.R11;
		/* 821E0FACh case   46:*/		return 0x821E0FB0;
		  /* 821E0FB0h */ case   47:  		/* b -120 */
		/* 821E0FB0h case   47:*/		return 0x821E0F38;
		/* 821E0FB0h case   47:*/		return 0x821E0FB4;
	}
	return 0x821E0FB4;
} // Block from 821E0EF4h-821E0FB4h (48 instructions)

//////////////////////////////////////////////////////
// Block at 821E0FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0FB4);
		  /* 821E0FB4h */ case    0:  		/* cmplw CR6, R31, R15 */
		/* 821E0FB4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R15);
		/* 821E0FB4h case    0:*/		return 0x821E0FB8;
		  /* 821E0FB8h */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 821E0FB8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E0FE4;  }
		/* 821E0FB8h case    1:*/		return 0x821E0FBC;
		  /* 821E0FBCh */ case    2:  		/* lwz R11, <#[R31 + 60]> */
		/* 821E0FBCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E0FBCh case    2:*/		return 0x821E0FC0;
		  /* 821E0FC0h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821E0FC0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0FC0h case    3:*/		return 0x821E0FC4;
		  /* 821E0FC4h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 821E0FC4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821E0FD0;  }
		/* 821E0FC4h case    4:*/		return 0x821E0FC8;
		  /* 821E0FC8h */ case    5:  		/* lwz R31, <#[R31 + 52]> */
		/* 821E0FC8h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000034) );
		/* 821E0FC8h case    5:*/		return 0x821E0FCC;
		  /* 821E0FCCh */ case    6:  		/* b -24 */
		/* 821E0FCCh case    6:*/		return 0x821E0FB4;
		/* 821E0FCCh case    6:*/		return 0x821E0FD0;
	}
	return 0x821E0FD0;
} // Block from 821E0FB4h-821E0FD0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E0FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0FD0);
		  /* 821E0FD0h */ case    0:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E0FD0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E0FD0h case    0:*/		return 0x821E0FD4;
		  /* 821E0FD4h */ case    1:  		/* mr R31, R11 */
		/* 821E0FD4h case    1:*/		regs.R31 = regs.R11;
		/* 821E0FD4h case    1:*/		return 0x821E0FD8;
		  /* 821E0FD8h */ case    2:  		/* rlwinm. R11, R10, 13, 31, 31 */
		/* 821E0FD8h case    2:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R10);
		/* 821E0FD8h case    2:*/		return 0x821E0FDC;
		  /* 821E0FDCh */ case    3:  		/* bc 4, CR0_EQ, -40 */
		/* 821E0FDCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E0FB4;  }
		/* 821E0FDCh case    3:*/		return 0x821E0FE0;
		  /* 821E0FE0h */ case    4:  		/* b -168 */
		/* 821E0FE0h case    4:*/		return 0x821E0F38;
		/* 821E0FE0h case    4:*/		return 0x821E0FE4;
	}
	return 0x821E0FE4;
} // Block from 821E0FD0h-821E0FE4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E0FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0FE4);
		  /* 821E0FE4h */ case    0:  		/* li R6, 0 */
		/* 821E0FE4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E0FE4h case    0:*/		return 0x821E0FE8;
		  /* 821E0FE8h */ case    1:  		/* mr R5, R17 */
		/* 821E0FE8h case    1:*/		regs.R5 = regs.R17;
		/* 821E0FE8h case    1:*/		return 0x821E0FEC;
		  /* 821E0FECh */ case    2:  		/* addi R4, R1, 176 */
		/* 821E0FECh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xB0);
		/* 821E0FECh case    2:*/		return 0x821E0FF0;
		  /* 821E0FF0h */ case    3:  		/* mr R3, R20 */
		/* 821E0FF0h case    3:*/		regs.R3 = regs.R20;
		/* 821E0FF0h case    3:*/		return 0x821E0FF4;
		  /* 821E0FF4h */ case    4:  		/* bl -98236 */
		/* 821E0FF4h case    4:*/		regs.LR = 0x821E0FF8; return 0x821C9038;
		/* 821E0FF4h case    4:*/		return 0x821E0FF8;
		  /* 821E0FF8h */ case    5:  		/* addi R4, R1, 176 */
		/* 821E0FF8h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xB0);
		/* 821E0FF8h case    5:*/		return 0x821E0FFC;
		  /* 821E0FFCh */ case    6:  		/* mr R3, R22 */
		/* 821E0FFCh case    6:*/		regs.R3 = regs.R22;
		/* 821E0FFCh case    6:*/		return 0x821E1000;
		  /* 821E1000h */ case    7:  		/* bl -131752 */
		/* 821E1000h case    7:*/		regs.LR = 0x821E1004; return 0x821C0D58;
		/* 821E1000h case    7:*/		return 0x821E1004;
		  /* 821E1004h */ case    8:  		/* mr R5, R20 */
		/* 821E1004h case    8:*/		regs.R5 = regs.R20;
		/* 821E1004h case    8:*/		return 0x821E1008;
		  /* 821E1008h */ case    9:  		/* mr R4, R15 */
		/* 821E1008h case    9:*/		regs.R4 = regs.R15;
		/* 821E1008h case    9:*/		return 0x821E100C;
		  /* 821E100Ch */ case   10:  		/* mr R3, R22 */
		/* 821E100Ch case   10:*/		regs.R3 = regs.R22;
		/* 821E100Ch case   10:*/		return 0x821E1010;
		  /* 821E1010h */ case   11:  		/* bl 321880 */
		/* 821E1010h case   11:*/		regs.LR = 0x821E1014; return 0x8222F968;
		/* 821E1010h case   11:*/		return 0x821E1014;
		  /* 821E1014h */ case   12:  		/* lwz R11, <#[R22 + 36]> */
		/* 821E1014h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000024) );
		/* 821E1014h case   12:*/		return 0x821E1018;
		  /* 821E1018h */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E1018h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E1018h case   13:*/		return 0x821E101C;
		  /* 821E101Ch */ case   14:  		/* bc 4, CR0_EQ, 88 */
		/* 821E101Ch case   14:*/		if ( !regs.CR[0].eq ) { return 0x821E1074;  }
		/* 821E101Ch case   14:*/		return 0x821E1020;
		  /* 821E1020h */ case   15:  		/* lwz R11, <#[R22 + 32]> */
		/* 821E1020h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000020) );
		/* 821E1020h case   15:*/		return 0x821E1024;
		  /* 821E1024h */ case   16:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E1024h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E1024h case   16:*/		return 0x821E1028;
		  /* 821E1028h */ case   17:  		/* addic. R31, R11, -40 */
		/* 821E1028h case   17:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821E1028h case   17:*/		return 0x821E102C;
		  /* 821E102Ch */ case   18:  		/* bc 12, CR0_EQ, 72 */
		/* 821E102Ch case   18:*/		if ( regs.CR[0].eq ) { return 0x821E1074;  }
		/* 821E102Ch case   18:*/		return 0x821E1030;
		  /* 821E1030h */ case   19:  		/* mr R3, R31 */
		/* 821E1030h case   19:*/		regs.R3 = regs.R31;
		/* 821E1030h case   19:*/		return 0x821E1034;
		  /* 821E1034h */ case   20:  		/* bl -511548 */
		/* 821E1034h case   20:*/		regs.LR = 0x821E1038; return 0x821641F8;
		/* 821E1034h case   20:*/		return 0x821E1038;
		  /* 821E1038h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E1038h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E1038h case   21:*/		return 0x821E103C;
		  /* 821E103Ch */ case   22:  		/* bc 12, CR0_EQ, 56 */
		/* 821E103Ch case   22:*/		if ( regs.CR[0].eq ) { return 0x821E1074;  }
		/* 821E103Ch case   22:*/		return 0x821E1040;
		  /* 821E1040h */ case   23:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E1040h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E1040h case   23:*/		return 0x821E1044;
		  /* 821E1044h */ case   24:  		/* mr R3, R20 */
		/* 821E1044h case   24:*/		regs.R3 = regs.R20;
		/* 821E1044h case   24:*/		return 0x821E1048;
		  /* 821E1048h */ case   25:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821E1048h case   25:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821E1048h case   25:*/		return 0x821E104C;
		  /* 821E104Ch */ case   26:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821E104Ch case   26:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821E104Ch case   26:*/		return 0x821E1050;
		  /* 821E1050h */ case   27:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821E1050h case   27:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821E1050h case   27:*/		return 0x821E1054;
		  /* 821E1054h */ case   28:  		/* bl -511012 */
		/* 821E1054h case   28:*/		regs.LR = 0x821E1058; return 0x82164430;
		/* 821E1054h case   28:*/		return 0x821E1058;
		  /* 821E1058h */ case   29:  		/* addi R11, R31, -16 */
		/* 821E1058h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821E1058h case   29:*/		return 0x821E105C;
		  /* 821E105Ch */ case   30:  		/* add R11, R3, R11 */
		/* 821E105Ch case   30:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821E105Ch case   30:*/		return 0x821E1060;
		  /* 821E1060h */ case   31:  		/* lwz R10, <#[R11]> */
		/* 821E1060h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1060h case   31:*/		return 0x821E1064;
		  /* 821E1064h */ case   32:  		/* cmplw CR6, R10, R15 */
		/* 821E1064h case   32:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R15);
		/* 821E1064h case   32:*/		return 0x821E1068;
		  /* 821E1068h */ case   33:  		/* bc 4, CR6_EQ, 12 */
		/* 821E1068h case   33:*/		if ( !regs.CR[6].eq ) { return 0x821E1074;  }
		/* 821E1068h case   33:*/		return 0x821E106C;
		  /* 821E106Ch */ case   34:  		/* lwz R10, <#[R15 + 80]> */
		/* 821E106Ch case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000050) );
		/* 821E106Ch case   34:*/		return 0x821E1070;
		  /* 821E1070h */ case   35:  		/* stw R10, <#[R11]> */
		/* 821E1070h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1070h case   35:*/		return 0x821E1074;
	}
	return 0x821E1074;
} // Block from 821E0FE4h-821E1074h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821E1074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1074);
		  /* 821E1074h */ case    0:  		/* lwz R11, <#[R23 + 12]> */
		/* 821E1074h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 821E1074h case    0:*/		return 0x821E1078;
		  /* 821E1078h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E1078h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1078h case    1:*/		return 0x821E107C;
		  /* 821E107Ch */ case    2:  		/* bc 12, CR6_EQ, 22852 */
		/* 821E107Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821E69C0;  }
		/* 821E107Ch case    2:*/		return 0x821E1080;
		  /* 821E1080h */ case    3:  		/* lwz R22, <#[R11]> */
		/* 821E1080h case    3:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1080h case    3:*/		return 0x821E1084;
		  /* 821E1084h */ case    4:  		/* lwzx R10, <#[R18 + R22]> */
		/* 821E1084h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + regs.R22 + 0x00000000) );
		/* 821E1084h case    4:*/		return 0x821E1088;
		  /* 821E1088h */ case    5:  		/* srw R10, R10, R16 */
		/* 821E1088h case    5:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R16);
		/* 821E1088h case    5:*/		return 0x821E108C;
		  /* 821E108Ch */ case    6:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E108Ch case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E108Ch case    6:*/		return 0x821E1090;
		  /* 821E1090h */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 821E1090h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821E109C;  }
		/* 821E1090h case    7:*/		return 0x821E1094;
		  /* 821E1094h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E1094h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E1094h case    8:*/		return 0x821E1098;
		  /* 821E1098h */ case    9:  		/* b -32 */
		/* 821E1098h case    9:*/		return 0x821E1078;
		/* 821E1098h case    9:*/		return 0x821E109C;
	}
	return 0x821E109C;
} // Block from 821E1074h-821E109Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E109Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E109C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E109C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E109C);
		  /* 821E109Ch */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 821E109Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821E109Ch case    0:*/		return 0x821E10A0;
		  /* 821E10A0h */ case    1:  		/* bc 12, CR6_EQ, 22816 */
		/* 821E10A0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E69C0;  }
		/* 821E10A0h case    1:*/		return 0x821E10A4;
		  /* 821E10A4h */ case    2:  		/* lwz R29, <#[R15 + 80]> */
		/* 821E10A4h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R15 + 0x00000050) );
		/* 821E10A4h case    2:*/		return 0x821E10A8;
		  /* 821E10A8h */ case    3:  		/* addi R30, R29, 8 */
		/* 821E10A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x8);
		/* 821E10A8h case    3:*/		return 0x821E10AC;
		  /* 821E10ACh */ case    4:  		/* lwz R31, <#[R29 + 8]> */
		/* 821E10ACh case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000008) );
		/* 821E10ACh case    4:*/		return 0x821E10B0;
		  /* 821E10B0h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821E10B0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E10B0h case    5:*/		return 0x821E10B4;
		  /* 821E10B4h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 821E10B4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821E10F0;  }
		/* 821E10B4h case    6:*/		return 0x821E10B8;
		  /* 821E10B8h */ case    7:  		/* lwz R3, <#[R31 + 4]> */
		/* 821E10B8h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 821E10B8h case    7:*/		return 0x821E10BC;
		  /* 821E10BCh */ case    8:  		/* lwzx R11, <#[R18 + R3]> */
		/* 821E10BCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + regs.R3 + 0x00000000) );
		/* 821E10BCh case    8:*/		return 0x821E10C0;
		  /* 821E10C0h */ case    9:  		/* srw R11, R11, R16 */
		/* 821E10C0h case    9:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R16);
		/* 821E10C0h case    9:*/		return 0x821E10C4;
		  /* 821E10C4h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E10C4h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E10C4h case   10:*/		return 0x821E10C8;
		  /* 821E10C8h */ case   11:  		/* bc 4, CR0_EQ, 16 */
		/* 821E10C8h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821E10D8;  }
		/* 821E10C8h case   11:*/		return 0x821E10CC;
		  /* 821E10CCh */ case   12:  		/* mr R5, R20 */
		/* 821E10CCh case   12:*/		regs.R5 = regs.R20;
		/* 821E10CCh case   12:*/		return 0x821E10D0;
		  /* 821E10D0h */ case   13:  		/* mr R4, R29 */
		/* 821E10D0h case   13:*/		regs.R4 = regs.R29;
		/* 821E10D0h case   13:*/		return 0x821E10D4;
		  /* 821E10D4h */ case   14:  		/* bl 321684 */
		/* 821E10D4h case   14:*/		regs.LR = 0x821E10D8; return 0x8222F968;
		/* 821E10D4h case   14:*/		return 0x821E10D8;
	}
	return 0x821E10D8;
} // Block from 821E109Ch-821E10D8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821E10D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E10D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E10D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E10D8);
		  /* 821E10D8h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821E10D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E10D8h case    0:*/		return 0x821E10DC;
		  /* 821E10DCh */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821E10DCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821E10DCh case    1:*/		return 0x821E10E0;
		  /* 821E10E0h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821E10E0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E10E8;  }
		/* 821E10E0h case    2:*/		return 0x821E10E4;
		  /* 821E10E4h */ case    3:  		/* addi R30, R31, 12 */
		/* 821E10E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xC);
		/* 821E10E4h case    3:*/		return 0x821E10E8;
	}
	return 0x821E10E8;
} // Block from 821E10D8h-821E10E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E10E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E10E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E10E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E10E8);
		  /* 821E10E8h */ case    0:  		/* lwz R31, <#[R30]> */
		/* 821E10E8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821E10E8h case    0:*/		return 0x821E10EC;
		  /* 821E10ECh */ case    1:  		/* b -60 */
		/* 821E10ECh case    1:*/		return 0x821E10B0;
		/* 821E10ECh case    1:*/		return 0x821E10F0;
	}
	return 0x821E10F0;
} // Block from 821E10E8h-821E10F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E10F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E10F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E10F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E10F0);
		  /* 821E10F0h */ case    0:  		/* stw R19, <#[R21]> */
		/* 821E10F0h case    0:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R21 + 0x00000000) );
		/* 821E10F0h case    0:*/		return 0x821E10F4;
		  /* 821E10F4h */ case    1:  		/* mr R4, R21 */
		/* 821E10F4h case    1:*/		regs.R4 = regs.R21;
		/* 821E10F4h case    1:*/		return 0x821E10F8;
		  /* 821E10F8h */ case    2:  		/* stw R22, <#[R21 + 4]> */
		/* 821E10F8h case    2:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R21 + 0x00000004) );
		/* 821E10F8h case    2:*/		return 0x821E10FC;
		  /* 821E10FCh */ case    3:  		/* mr R3, R20 */
		/* 821E10FCh case    3:*/		regs.R3 = regs.R20;
		/* 821E10FCh case    3:*/		return 0x821E1100;
		  /* 821E1100h */ case    4:  		/* lwz R11, <#[R23 + 80]> */
		/* 821E1100h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000050) );
		/* 821E1100h case    4:*/		return 0x821E1104;
		  /* 821E1104h */ case    5:  		/* stw R11, <#[R21 + 8]> */
		/* 821E1104h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821E1104h case    5:*/		return 0x821E1108;
		  /* 821E1108h */ case    6:  		/* stw R11, <#[R21 + 12]> */
		/* 821E1108h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821E1108h case    6:*/		return 0x821E110C;
		  /* 821E110Ch */ case    7:  		/* bl -107988 */
		/* 821E110Ch case    7:*/		regs.LR = 0x821E1110; return 0x821C6B38;
		/* 821E110Ch case    7:*/		return 0x821E1110;
		  /* 821E1110h */ case    8:  		/* mr R3, R20 */
		/* 821E1110h case    8:*/		regs.R3 = regs.R20;
		/* 821E1110h case    8:*/		return 0x821E1114;
		  /* 821E1114h */ case    9:  		/* bl 41484 */
		/* 821E1114h case    9:*/		regs.LR = 0x821E1118; return 0x821EB320;
		/* 821E1114h case    9:*/		return 0x821E1118;
		  /* 821E1118h */ case   10:  		/* lwz R11, <#[R15 + 20]> */
		/* 821E1118h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000014) );
		/* 821E1118h case   10:*/		return 0x821E111C;
		  /* 821E111Ch */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E111Ch case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E111Ch case   11:*/		return 0x821E1120;
		  /* 821E1120h */ case   12:  		/* bc 4, CR0_EQ, 192 */
		/* 821E1120h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821E11E0;  }
		/* 821E1120h case   12:*/		return 0x821E1124;
		  /* 821E1124h */ case   13:  		/* mr R30, R11 */
		/* 821E1124h case   13:*/		regs.R30 = regs.R11;
		/* 821E1124h case   13:*/		return 0x821E1128;
		  /* 821E1128h */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 821E1128h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E1128h case   14:*/		return 0x821E112C;
		  /* 821E112Ch */ case   15:  		/* bc 12, CR0_EQ, 180 */
		/* 821E112Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821E11E0;  }
		/* 821E112Ch case   15:*/		return 0x821E1130;
		  /* 821E1130h */ case   16:  		/* lwz R11, <#[R30 + 8]> */
		/* 821E1130h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E1130h case   16:*/		return 0x821E1134;
		  /* 821E1134h */ case   17:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E1134h case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E1134h case   17:*/		return 0x821E1138;
		  /* 821E1138h */ case   18:  		/* cmplwi CR6, R11, 14336 */
		/* 821E1138h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E1138h case   18:*/		return 0x821E113C;
		  /* 821E113Ch */ case   19:  		/* bc 4, CR6_EQ, 136 */
		/* 821E113Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x821E11C4;  }
		/* 821E113Ch case   19:*/		return 0x821E1140;
		  /* 821E1140h */ case   20:  		/* mr R29, R30 */
		/* 821E1140h case   20:*/		regs.R29 = regs.R30;
		/* 821E1140h case   20:*/		return 0x821E1144;
		  /* 821E1144h */ case   21:  		/* lwz R31, <#[R29]> */
		/* 821E1144h case   21:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821E1144h case   21:*/		return 0x821E1148;
		  /* 821E1148h */ case   22:  		/* cmplwi CR6, R31, 0 */
		/* 821E1148h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E1148h case   22:*/		return 0x821E114C;
		  /* 821E114Ch */ case   23:  		/* bc 12, CR6_EQ, 120 */
		/* 821E114Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x821E11C4;  }
		/* 821E114Ch case   23:*/		return 0x821E1150;
		  /* 821E1150h */ case   24:  		/* lwz R10, <#[R31 + 12]> */
		/* 821E1150h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E1150h case   24:*/		return 0x821E1154;
		  /* 821E1154h */ case   25:  		/* lwz R11, <#[R15 + 8]> */
		/* 821E1154h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 821E1154h case   25:*/		return 0x821E1158;
		  /* 821E1158h */ case   26:  		/* lwz R9, <#[R10 + 28]> */
		/* 821E1158h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000001C) );
		/* 821E1158h case   26:*/		return 0x821E115C;
		  /* 821E115Ch */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 821E115Ch case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E115Ch case   27:*/		return 0x821E1160;
		  /* 821E1160h */ case   28:  		/* bc 12, CR6_EQ, 64 */
		/* 821E1160h case   28:*/		if ( regs.CR[6].eq ) { return 0x821E11A0;  }
		/* 821E1160h case   28:*/		return 0x821E1164;
		  /* 821E1164h */ case   29:  		/* lwz R10, <#[R9 + 48]> */
		/* 821E1164h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000030) );
		/* 821E1164h case   29:*/		return 0x821E1168;
		  /* 821E1168h */ case   30:  		/* li R8, 1 */
		/* 821E1168h case   30:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821E1168h case   30:*/		return 0x821E116C;
		  /* 821E116Ch */ case   31:  		/* lwz R7, <#[R11 + 4]> */
		/* 821E116Ch case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821E116Ch case   31:*/		return 0x821E1170;
		  /* 821E1170h */ case   32:  		/* rlwinm R6, R10, 0, 13, 31 */
		/* 821E1170h case   32:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R6,regs.R10);
		/* 821E1170h case   32:*/		return 0x821E1174;
		  /* 821E1174h */ case   33:  		/* rlwinm R10, R6, 27, 5, 31 */
		/* 821E1174h case   33:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R6);
		/* 821E1174h case   33:*/		return 0x821E1178;
		  /* 821E1178h */ case   34:  		/* rlwinm R6, R6, 0, 27, 31 */
		/* 821E1178h case   34:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R6);
		/* 821E1178h case   34:*/		return 0x821E117C;
		  /* 821E117Ch */ case   35:  		/* addi R10, R10, 1 */
		/* 821E117Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E117Ch case   35:*/		return 0x821E1180;
		  /* 821E1180h */ case   36:  		/* lwz R7, <#[R7 + 40]> */
		/* 821E1180h case   36:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000028) );
		/* 821E1180h case   36:*/		return 0x821E1184;
		  /* 821E1184h */ case   37:  		/* slw R8, R8, R6 */
		/* 821E1184h case   37:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R6);
		/* 821E1184h case   37:*/		return 0x821E1188;
		  /* 821E1188h */ case   38:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E1188h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E1188h case   38:*/		return 0x821E118C;
		  /* 821E118Ch */ case   39:  		/* lwzx R10, <#[R10 + R7]> */
		/* 821E118Ch case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 821E118Ch case   39:*/		return 0x821E1190;
		  /* 821E1190h */ case   40:  		/* and. R10, R10, R8 */
		/* 821E1190h case   40:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821E1190h case   40:*/		return 0x821E1194;
		  /* 821E1194h */ case   41:  		/* bc 4, CR0_EQ, 28 */
		/* 821E1194h case   41:*/		if ( !regs.CR[0].eq ) { return 0x821E11B0;  }
		/* 821E1194h case   41:*/		return 0x821E1198;
		  /* 821E1198h */ case   42:  		/* lwz R11, <#[R11 + 12]> */
		/* 821E1198h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E1198h case   42:*/		return 0x821E119C;
		  /* 821E119Ch */ case   43:  		/* b -64 */
		/* 821E119Ch case   43:*/		return 0x821E115C;
		/* 821E119Ch case   43:*/		return 0x821E11A0;
	}
	return 0x821E11A0;
} // Block from 821E10F0h-821E11A0h (44 instructions)

//////////////////////////////////////////////////////
// Block at 821E11A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E11A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E11A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E11A0);
		  /* 821E11A0h */ case    0:  		/* mr R5, R20 */
		/* 821E11A0h case    0:*/		regs.R5 = regs.R20;
		/* 821E11A0h case    0:*/		return 0x821E11A4;
		  /* 821E11A4h */ case    1:  		/* mr R4, R31 */
		/* 821E11A4h case    1:*/		regs.R4 = regs.R31;
		/* 821E11A4h case    1:*/		return 0x821E11A8;
		  /* 821E11A8h */ case    2:  		/* mr R3, R30 */
		/* 821E11A8h case    2:*/		regs.R3 = regs.R30;
		/* 821E11A8h case    2:*/		return 0x821E11AC;
		  /* 821E11ACh */ case    3:  		/* bl -428188 */
		/* 821E11ACh case    3:*/		regs.LR = 0x821E11B0; return 0x82178910;
		/* 821E11ACh case    3:*/		return 0x821E11B0;
	}
	return 0x821E11B0;
} // Block from 821E11A0h-821E11B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E11B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E11B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E11B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E11B0);
		  /* 821E11B0h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821E11B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E11B0h case    0:*/		return 0x821E11B4;
		  /* 821E11B4h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821E11B4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821E11B4h case    1:*/		return 0x821E11B8;
		  /* 821E11B8h */ case    2:  		/* bc 4, CR6_EQ, -116 */
		/* 821E11B8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E1144;  }
		/* 821E11B8h case    2:*/		return 0x821E11BC;
		  /* 821E11BCh */ case    3:  		/* addi R29, R31, 4 */
		/* 821E11BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x4);
		/* 821E11BCh case    3:*/		return 0x821E11C0;
		  /* 821E11C0h */ case    4:  		/* b -124 */
		/* 821E11C0h case    4:*/		return 0x821E1144;
		/* 821E11C0h case    4:*/		return 0x821E11C4;
	}
	return 0x821E11C4;
} // Block from 821E11B0h-821E11C4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E11C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E11C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E11C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E11C4);
		  /* 821E11C4h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821E11C4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821E11C4h case    0:*/		return 0x821E11C8;
		  /* 821E11C8h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E11C8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E11C8h case    1:*/		return 0x821E11CC;
		  /* 821E11CCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E11CCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E11CCh case    2:*/		return 0x821E11D0;
		  /* 821E11D0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E11D0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E11E0;  }
		/* 821E11D0h case    3:*/		return 0x821E11D4;
		  /* 821E11D4h */ case    4:  		/* mr R30, R11 */
		/* 821E11D4h case    4:*/		regs.R30 = regs.R11;
		/* 821E11D4h case    4:*/		return 0x821E11D8;
		  /* 821E11D8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E11D8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E11D8h case    5:*/		return 0x821E11DC;
		  /* 821E11DCh */ case    6:  		/* bc 4, CR6_EQ, -172 */
		/* 821E11DCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E1130;  }
		/* 821E11DCh case    6:*/		return 0x821E11E0;
	}
	return 0x821E11E0;
} // Block from 821E11C4h-821E11E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E11E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E11E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E11E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E11E0);
		  /* 821E11E0h */ case    0:  		/* li R5, 38 */
		/* 821E11E0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821E11E0h case    0:*/		return 0x821E11E4;
		  /* 821E11E4h */ case    1:  		/* li R4, 8 */
		/* 821E11E4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821E11E4h case    1:*/		return 0x821E11E8;
		  /* 821E11E8h */ case    2:  		/* mr R3, R20 */
		/* 821E11E8h case    2:*/		regs.R3 = regs.R20;
		/* 821E11E8h case    2:*/		return 0x821E11EC;
		  /* 821E11ECh */ case    3:  		/* bl -510204 */
		/* 821E11ECh case    3:*/		regs.LR = 0x821E11F0; return 0x821648F0;
		/* 821E11ECh case    3:*/		return 0x821E11F0;
		  /* 821E11F0h */ case    4:  		/* ori R11, R3, 1 */
		/* 821E11F0h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821E11F0h case    4:*/		return 0x821E11F4;
		  /* 821E11F4h */ case    5:  		/* addi R23, R3, 4 */
		/* 821E11F4h case    5:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R3,0x4);
		/* 821E11F4h case    5:*/		return 0x821E11F8;
		  /* 821E11F8h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821E11F8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E11F8h case    6:*/		return 0x821E11FC;
		  /* 821E11FCh */ case    7:  		/* mr R24, R3 */
		/* 821E11FCh case    7:*/		regs.R24 = regs.R3;
		/* 821E11FCh case    7:*/		return 0x821E1200;
		  /* 821E1200h */ case    8:  		/* ori R11, R23, 1 */
		/* 821E1200h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R23,0x1);
		/* 821E1200h case    8:*/		return 0x821E1204;
		  /* 821E1204h */ case    9:  		/* stw R11, <#[R3]> */
		/* 821E1204h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821E1204h case    9:*/		return 0x821E1208;
		  /* 821E1208h */ case   10:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E1208h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E1208h case   10:*/		return 0x821E120C;
		  /* 821E120Ch */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E120Ch case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E120Ch case   11:*/		return 0x821E1210;
		  /* 821E1210h */ case   12:  		/* bc 4, CR0_EQ, 320 */
		/* 821E1210h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821E1350;  }
		/* 821E1210h case   12:*/		return 0x821E1214;
		  /* 821E1214h */ case   13:  		/* mr R27, R11 */
		/* 821E1214h case   13:*/		regs.R27 = regs.R11;
		/* 821E1214h case   13:*/		return 0x821E1218;
		  /* 821E1218h */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 821E1218h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E1218h case   14:*/		return 0x821E121C;
		  /* 821E121Ch */ case   15:  		/* bc 12, CR0_EQ, 308 */
		/* 821E121Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821E1350;  }
		/* 821E121Ch case   15:*/		return 0x821E1220;
		  /* 821E1220h */ case   16:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E1220h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E1220h case   16:*/		return 0x821E1224;
		  /* 821E1224h */ case   17:  		/* li R10, 68 */
		/* 821E1224h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x44);
		/* 821E1224h case   17:*/		return 0x821E1228;
		  /* 821E1228h */ case   18:  		/* subf R11, R11, R21 */
		/* 821E1228h case   18:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 821E1228h case   18:*/		return 0x821E122C;
		  /* 821E122Ch */ case   19:  		/* divw R10, R11, R10 */
		/* 821E122Ch case   19:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821E122Ch case   19:*/		return 0x821E1230;
		  /* 821E1230h */ case   20:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E1230h case   20:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E1230h case   20:*/		return 0x821E1234;
		  /* 821E1234h */ case   21:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821E1234h case   21:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821E1234h case   21:*/		return 0x821E1238;
		  /* 821E1238h */ case   22:  		/* addi R11, R11, 21 */
		/* 821E1238h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E1238h case   22:*/		return 0x821E123C;
		  /* 821E123Ch */ case   23:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E123Ch case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E123Ch case   23:*/		return 0x821E1240;
		  /* 821E1240h */ case   24:  		/* lwzx R11, <#[R11 + R27]> */
		/* 821E1240h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 821E1240h case   24:*/		return 0x821E1244;
		  /* 821E1244h */ case   25:  		/* srw R11, R11, R10 */
		/* 821E1244h case   25:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E1244h case   25:*/		return 0x821E1248;
		  /* 821E1248h */ case   26:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E1248h case   26:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E1248h case   26:*/		return 0x821E124C;
		  /* 821E124Ch */ case   27:  		/* bc 12, CR0_EQ, 232 */
		/* 821E124Ch case   27:*/		if ( regs.CR[0].eq ) { return 0x821E1334;  }
		/* 821E124Ch case   27:*/		return 0x821E1250;
		  /* 821E1250h */ case   28:  		/* lwz R11, <#[R27 + 20]> */
		/* 821E1250h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 821E1250h case   28:*/		return 0x821E1254;
		  /* 821E1254h */ case   29:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1254h case   29:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1254h case   29:*/		return 0x821E1258;
		  /* 821E1258h */ case   30:  		/* bc 4, CR0_EQ, 220 */
		/* 821E1258h case   30:*/		if ( !regs.CR[0].eq ) { return 0x821E1334;  }
		/* 821E1258h case   30:*/		return 0x821E125C;
		  /* 821E125Ch */ case   31:  		/* mr R28, R11 */
		/* 821E125Ch case   31:*/		regs.R28 = regs.R11;
		/* 821E125Ch case   31:*/		return 0x821E1260;
		  /* 821E1260h */ case   32:  		/* cmplwi CR0, R11, 0 */
		/* 821E1260h case   32:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E1260h case   32:*/		return 0x821E1264;
		  /* 821E1264h */ case   33:  		/* bc 12, CR0_EQ, 208 */
		/* 821E1264h case   33:*/		if ( regs.CR[0].eq ) { return 0x821E1334;  }
		/* 821E1264h case   33:*/		return 0x821E1268;
		  /* 821E1268h */ case   34:  		/* lwz R11, <#[R28 + 8]> */
		/* 821E1268h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821E1268h case   34:*/		return 0x821E126C;
		  /* 821E126Ch */ case   35:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E126Ch case   35:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E126Ch case   35:*/		return 0x821E1270;
		  /* 821E1270h */ case   36:  		/* cmplwi CR6, R11, 14336 */
		/* 821E1270h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E1270h case   36:*/		return 0x821E1274;
		  /* 821E1274h */ case   37:  		/* bc 4, CR6_EQ, 164 */
		/* 821E1274h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821E1318;  }
		/* 821E1274h case   37:*/		return 0x821E1278;
		  /* 821E1278h */ case   38:  		/* mr R29, R28 */
		/* 821E1278h case   38:*/		regs.R29 = regs.R28;
		/* 821E1278h case   38:*/		return 0x821E127C;
		  /* 821E127Ch */ case   39:  		/* lwz R30, <#[R29]> */
		/* 821E127Ch case   39:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821E127Ch case   39:*/		return 0x821E1280;
		  /* 821E1280h */ case   40:  		/* cmplwi CR6, R30, 0 */
		/* 821E1280h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E1280h case   40:*/		return 0x821E1284;
		  /* 821E1284h */ case   41:  		/* bc 12, CR6_EQ, 148 */
		/* 821E1284h case   41:*/		if ( regs.CR[6].eq ) { return 0x821E1318;  }
		/* 821E1284h case   41:*/		return 0x821E1288;
		  /* 821E1288h */ case   42:  		/* lwz R31, <#[R30 + 12]> */
		/* 821E1288h case   42:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E1288h case   42:*/		return 0x821E128C;
		  /* 821E128Ch */ case   43:  		/* lwz R11, <#[R31 + 28]> */
		/* 821E128Ch case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821E128Ch case   43:*/		return 0x821E1290;
		  /* 821E1290h */ case   44:  		/* lwz R11, <#[R11 + 44]> */
		/* 821E1290h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 821E1290h case   44:*/		return 0x821E1294;
		  /* 821E1294h */ case   45:  		/* cmplw CR6, R11, R17 */
		/* 821E1294h case   45:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 821E1294h case   45:*/		return 0x821E1298;
		  /* 821E1298h */ case   46:  		/* bc 4, CR6_EQ, 108 */
		/* 821E1298h case   46:*/		if ( !regs.CR[6].eq ) { return 0x821E1304;  }
		/* 821E1298h case   46:*/		return 0x821E129C;
		  /* 821E129Ch */ case   47:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E129Ch case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E129Ch case   47:*/		return 0x821E12A0;
		  /* 821E12A0h */ case   48:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 821E12A0h case   48:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 821E12A0h case   48:*/		return 0x821E12A4;
		  /* 821E12A4h */ case   49:  		/* bc 4, CR0_EQ, 96 */
		/* 821E12A4h case   49:*/		if ( !regs.CR[0].eq ) { return 0x821E1304;  }
		/* 821E12A4h case   49:*/		return 0x821E12A8;
		  /* 821E12A8h */ case   50:  		/* oris R11, R11, 1024 */
		/* 821E12A8h case   50:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 821E12A8h case   50:*/		return 0x821E12AC;
		  /* 821E12ACh */ case   51:  		/* stw R11, <#[R31 + 8]> */
		/* 821E12ACh case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E12ACh case   51:*/		return 0x821E12B0;
		  /* 821E12B0h */ case   52:  		/* lwz R11, <#[R23]> */
		/* 821E12B0h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821E12B0h case   52:*/		return 0x821E12B4;
		  /* 821E12B4h */ case   53:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E12B4h case   53:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E12B4h case   53:*/		return 0x821E12B8;
		  /* 821E12B8h */ case   54:  		/* bc 4, CR0_EQ, 40 */
		/* 821E12B8h case   54:*/		if ( !regs.CR[0].eq ) { return 0x821E12E0;  }
		/* 821E12B8h case   54:*/		return 0x821E12BC;
		  /* 821E12BCh */ case   55:  		/* lwz R11, <#[R24]> */
		/* 821E12BCh case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821E12BCh case   55:*/		return 0x821E12C0;
		  /* 821E12C0h */ case   56:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E12C0h case   56:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E12C0h case   56:*/		return 0x821E12C4;
		  /* 821E12C4h */ case   57:  		/* addic. R3, R11, -4 */
		/* 821E12C4h case   57:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821E12C4h case   57:*/		return 0x821E12C8;
		  /* 821E12C8h */ case   58:  		/* bc 12, CR0_EQ, 24 */
		/* 821E12C8h case   58:*/		if ( regs.CR[0].eq ) { return 0x821E12E0;  }
		/* 821E12C8h case   58:*/		return 0x821E12CC;
		  /* 821E12CCh */ case   59:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E12CCh case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E12CCh case   59:*/		return 0x821E12D0;
		  /* 821E12D0h */ case   60:  		/* lwz R10, <#[R3 + 12]> */
		/* 821E12D0h case   60:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E12D0h case   60:*/		return 0x821E12D4;
		  /* 821E12D4h */ case   61:  		/* addi R11, R11, 1 */
		/* 821E12D4h case   61:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E12D4h case   61:*/		return 0x821E12D8;
		  /* 821E12D8h */ case   62:  		/* cmplw CR6, R11, R10 */
		/* 821E12D8h case   62:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E12D8h case   62:*/		return 0x821E12DC;
		  /* 821E12DCh */ case   63:  		/* bc 4, CR6_GT, 16 */
		/* 821E12DCh case   63:*/		if ( !regs.CR[6].gt ) { return 0x821E12EC;  }
		/* 821E12DCh case   63:*/		return 0x821E12E0;
	}
	return 0x821E12E0;
} // Block from 821E11E0h-821E12E0h (64 instructions)

//////////////////////////////////////////////////////
// Block at 821E12E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E12E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E12E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E12E0);
		  /* 821E12E0h */ case    0:  		/* li R4, 1 */
		/* 821E12E0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E12E0h case    0:*/		return 0x821E12E4;
		  /* 821E12E4h */ case    1:  		/* mr R3, R24 */
		/* 821E12E4h case    1:*/		regs.R3 = regs.R24;
		/* 821E12E4h case    1:*/		return 0x821E12E8;
		  /* 821E12E8h */ case    2:  		/* bl -344608 */
		/* 821E12E8h case    2:*/		regs.LR = 0x821E12EC; return 0x8218D0C8;
		/* 821E12E8h case    2:*/		return 0x821E12EC;
	}
	return 0x821E12EC;
} // Block from 821E12E0h-821E12ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E12ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E12EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E12EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E12EC);
		  /* 821E12ECh */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E12ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E12ECh case    0:*/		return 0x821E12F0;
		  /* 821E12F0h */ case    1:  		/* addi R10, R11, 4 */
		/* 821E12F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E12F0h case    1:*/		return 0x821E12F4;
		  /* 821E12F4h */ case    2:  		/* addi R9, R11, 1 */
		/* 821E12F4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821E12F4h case    2:*/		return 0x821E12F8;
		  /* 821E12F8h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821E12F8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821E12F8h case    3:*/		return 0x821E12FC;
		  /* 821E12FCh */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821E12FCh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821E12FCh case    4:*/		return 0x821E1300;
		  /* 821E1300h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821E1300h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821E1300h case    5:*/		return 0x821E1304;
	}
	return 0x821E1304;
} // Block from 821E12ECh-821E1304h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E1304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1304);
		  /* 821E1304h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821E1304h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E1304h case    0:*/		return 0x821E1308;
		  /* 821E1308h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821E1308h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821E1308h case    1:*/		return 0x821E130C;
		  /* 821E130Ch */ case    2:  		/* bc 4, CR6_EQ, -144 */
		/* 821E130Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E127C;  }
		/* 821E130Ch case    2:*/		return 0x821E1310;
		  /* 821E1310h */ case    3:  		/* addi R29, R30, 4 */
		/* 821E1310h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x4);
		/* 821E1310h case    3:*/		return 0x821E1314;
		  /* 821E1314h */ case    4:  		/* b -152 */
		/* 821E1314h case    4:*/		return 0x821E127C;
		/* 821E1314h case    4:*/		return 0x821E1318;
	}
	return 0x821E1318;
} // Block from 821E1304h-821E1318h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E1318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1318);
		  /* 821E1318h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821E1318h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821E1318h case    0:*/		return 0x821E131C;
		  /* 821E131Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E131Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E131Ch case    1:*/		return 0x821E1320;
		  /* 821E1320h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1320h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1320h case    2:*/		return 0x821E1324;
		  /* 821E1324h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E1324h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E1334;  }
		/* 821E1324h case    3:*/		return 0x821E1328;
		  /* 821E1328h */ case    4:  		/* mr R28, R11 */
		/* 821E1328h case    4:*/		regs.R28 = regs.R11;
		/* 821E1328h case    4:*/		return 0x821E132C;
		  /* 821E132Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E132Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E132Ch case    5:*/		return 0x821E1330;
		  /* 821E1330h */ case    6:  		/* bc 4, CR6_EQ, -200 */
		/* 821E1330h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E1268;  }
		/* 821E1330h case    6:*/		return 0x821E1334;
	}
	return 0x821E1334;
} // Block from 821E1318h-821E1334h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E1334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1334);
		  /* 821E1334h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821E1334h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821E1334h case    0:*/		return 0x821E1338;
		  /* 821E1338h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E1338h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E1338h case    1:*/		return 0x821E133C;
		  /* 821E133Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E133Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E133Ch case    2:*/		return 0x821E1340;
		  /* 821E1340h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E1340h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E1350;  }
		/* 821E1340h case    3:*/		return 0x821E1344;
		  /* 821E1344h */ case    4:  		/* mr R27, R11 */
		/* 821E1344h case    4:*/		regs.R27 = regs.R11;
		/* 821E1344h case    4:*/		return 0x821E1348;
		  /* 821E1348h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E1348h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1348h case    5:*/		return 0x821E134C;
		  /* 821E134Ch */ case    6:  		/* bc 4, CR6_EQ, -300 */
		/* 821E134Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E1220;  }
		/* 821E134Ch case    6:*/		return 0x821E1350;
	}
	return 0x821E1350;
} // Block from 821E1334h-821E1350h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E1350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1350);
		  /* 821E1350h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 821E1350h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821E1350h case    0:*/		return 0x821E1354;
		  /* 821E1354h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1354h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1354h case    1:*/		return 0x821E1358;
		  /* 821E1358h */ case    2:  		/* bc 4, CR0_EQ, 628 */
		/* 821E1358h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E15CC;  }
		/* 821E1358h case    2:*/		return 0x821E135C;
		  /* 821E135Ch */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821E135Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E135Ch case    3:*/		return 0x821E1360;
		  /* 821E1360h */ case    4:  		/* bc 12, CR0_EQ, 620 */
		/* 821E1360h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E15CC;  }
		/* 821E1360h case    4:*/		return 0x821E1364;
		  /* 821E1364h */ case    5:  		/* lwz R11, <#[R24]> */
		/* 821E1364h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821E1364h case    5:*/		return 0x821E1368;
		  /* 821E1368h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E1368h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E1368h case    6:*/		return 0x821E136C;
		  /* 821E136Ch */ case    7:  		/* addi R4, R11, -4 */
		/* 821E136Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821E136Ch case    7:*/		return 0x821E1370;
		  /* 821E1370h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E1370h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E1370h case    8:*/		return 0x821E1374;
		  /* 821E1374h */ case    9:  		/* addi R10, R11, 3 */
		/* 821E1374h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821E1374h case    9:*/		return 0x821E1378;
		  /* 821E1378h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821E1378h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E1378h case   10:*/		return 0x821E137C;
		  /* 821E137Ch */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E137Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E137Ch case   11:*/		return 0x821E1380;
		  /* 821E1380h */ case   12:  		/* lwzx R26, <#[R10 + R4]> */
		/* 821E1380h case   12:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821E1380h case   12:*/		return 0x821E1384;
		  /* 821E1384h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821E1384h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821E1384h case   13:*/		return 0x821E1388;
		  /* 821E1388h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 821E1388h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821E13C4;  }
		/* 821E1388h case   14:*/		return 0x821E138C;
		  /* 821E138Ch */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821E138Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821E138Ch case   15:*/		return 0x821E1390;
		  /* 821E1390h */ case   16:  		/* mr R3, R24 */
		/* 821E1390h case   16:*/		regs.R3 = regs.R24;
		/* 821E1390h case   16:*/		return 0x821E1394;
		  /* 821E1394h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E1394h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E1394h case   17:*/		return 0x821E1398;
		  /* 821E1398h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821E1398h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1398h case   18:*/		return 0x821E139C;
		  /* 821E139Ch */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E139Ch case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E139Ch case   19:*/		return 0x821E13A0;
		  /* 821E13A0h */ case   20:  		/* stw R9, <#[R10]> */
		/* 821E13A0h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E13A0h case   20:*/		return 0x821E13A4;
		  /* 821E13A4h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E13A4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E13A4h case   21:*/		return 0x821E13A8;
		  /* 821E13A8h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 821E13A8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821E13A8h case   22:*/		return 0x821E13AC;
		  /* 821E13ACh */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E13ACh case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E13ACh case   23:*/		return 0x821E13B0;
		  /* 821E13B0h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821E13B0h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E13B0h case   24:*/		return 0x821E13B4;
		  /* 821E13B4h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821E13B4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821E13B4h case   25:*/		return 0x821E13B8;
		  /* 821E13B8h */ case   26:  		/* addi R11, R11, 4 */
		/* 821E13B8h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E13B8h case   26:*/		return 0x821E13BC;
		  /* 821E13BCh */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821E13BCh case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821E13BCh case   27:*/		return 0x821E13C0;
		  /* 821E13C0h */ case   28:  		/* bl -587192 */
		/* 821E13C0h case   28:*/		regs.LR = 0x821E13C4; return 0x82151E08;
		/* 821E13C0h case   28:*/		return 0x821E13C4;
	}
	return 0x821E13C4;
} // Block from 821E1350h-821E13C4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E13C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E13C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E13C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E13C4);
		  /* 821E13C4h */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 821E13C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821E13C4h case    0:*/		return 0x821E13C8;
		  /* 821E13C8h */ case    1:  		/* addi R7, R26, 4 */
		/* 821E13C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R26,0x4);
		/* 821E13C8h case    1:*/		return 0x821E13CC;
		  /* 821E13CCh */ case    2:  		/* stw R19, <#[R1 + 288]> */
		/* 821E13CCh case    2:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000120) );
		/* 821E13CCh case    2:*/		return 0x821E13D0;
		  /* 821E13D0h */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821E13D0h case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821E13D0h case    3:*/		return 0x821E13D4;
		  /* 821E13D4h */ case    4:  		/* stw R19, <#[R1 + 292]> */
		/* 821E13D4h case    4:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000124) );
		/* 821E13D4h case    4:*/		return 0x821E13D8;
		  /* 821E13D8h */ case    5:  		/* stw R19, <#[R1 + 296]> */
		/* 821E13D8h case    5:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000128) );
		/* 821E13D8h case    5:*/		return 0x821E13DC;
		  /* 821E13DCh */ case    6:  		/* stw R11, <#[R26 + 8]> */
		/* 821E13DCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821E13DCh case    6:*/		return 0x821E13E0;
		  /* 821E13E0h */ case    7:  		/* lwz R9, <#[R26 + 4]> */
		/* 821E13E0h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000004) );
		/* 821E13E0h case    7:*/		return 0x821E13E4;
		  /* 821E13E4h */ case    8:  		/* stw R19, <#[R1 + 300]> */
		/* 821E13E4h case    8:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x0000012C) );
		/* 821E13E4h case    8:*/		return 0x821E13E8;
		  /* 821E13E8h */ case    9:  		/* cmplwi CR6, R9, 0 */
		/* 821E13E8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E13E8h case    9:*/		return 0x821E13EC;
		  /* 821E13ECh */ case   10:  		/* bc 12, CR6_EQ, 92 */
		/* 821E13ECh case   10:*/		if ( regs.CR[6].eq ) { return 0x821E1448;  }
		/* 821E13ECh case   10:*/		return 0x821E13F0;
		  /* 821E13F0h */ case   11:  		/* lwz R11, <#[R9 + 16]> */
		/* 821E13F0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000010) );
		/* 821E13F0h case   11:*/		return 0x821E13F4;
		  /* 821E13F4h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821E13F4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E13F4h case   12:*/		return 0x821E13F8;
		  /* 821E13F8h */ case   13:  		/* bc 12, CR6_EQ, 72 */
		/* 821E13F8h case   13:*/		if ( regs.CR[6].eq ) { return 0x821E1440;  }
		/* 821E13F8h case   13:*/		return 0x821E13FC;
		  /* 821E13FCh */ case   14:  		/* rlwinm R8, R11, 0, 0, 31 */
		/* 821E13FCh case   14:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R11);
		/* 821E13FCh case   14:*/		return 0x821E1400;
		  /* 821E1400h */ case   15:  		/* lwz R11, <#[R8 + 28]> */
		/* 821E1400h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821E1400h case   15:*/		return 0x821E1404;
		  /* 821E1404h */ case   16:  		/* cmplw CR6, R11, R22 */
		/* 821E1404h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821E1404h case   16:*/		return 0x821E1408;
		  /* 821E1408h */ case   17:  		/* bc 4, CR6_EQ, 56 */
		/* 821E1408h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821E1440;  }
		/* 821E1408h case   17:*/		return 0x821E140C;
		  /* 821E140Ch */ case   18:  		/* lwz R11, <#[R8 + 8]> */
		/* 821E140Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 821E140Ch case   18:*/		return 0x821E1410;
		  /* 821E1410h */ case   19:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E1410h case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E1410h case   19:*/		return 0x821E1414;
		  /* 821E1414h */ case   20:  		/* cmplwi CR6, R11, 14336 */
		/* 821E1414h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E1414h case   20:*/		return 0x821E1418;
		  /* 821E1418h */ case   21:  		/* bc 4, CR6_EQ, 40 */
		/* 821E1418h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821E1440;  }
		/* 821E1418h case   21:*/		return 0x821E141C;
		  /* 821E141Ch */ case   22:  		/* lwz R11, <#[R9]> */
		/* 821E141Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821E141Ch case   22:*/		return 0x821E1420;
		  /* 821E1420h */ case   23:  		/* rlwinm. R10, R11, 0, 27, 31 */
		/* 821E1420h case   23:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821E1420h case   23:*/		return 0x821E1424;
		  /* 821E1424h */ case   24:  		/* bc 4, CR0_EQ, 28 */
		/* 821E1424h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821E1440;  }
		/* 821E1424h case   24:*/		return 0x821E1428;
		  /* 821E1428h */ case   25:  		/* rlwinm R10, R11, 29, 28, 29 */
		/* 821E1428h case   25:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R10,regs.R11);
		/* 821E1428h case   25:*/		return 0x821E142C;
		  /* 821E142Ch */ case   26:  		/* addi R11, R1, 288 */
		/* 821E142Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x120);
		/* 821E142Ch case   26:*/		return 0x821E1430;
		  /* 821E1430h */ case   27:  		/* lwzx R6, <#[R10 + R11]> */
		/* 821E1430h case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E1430h case   27:*/		return 0x821E1434;
		  /* 821E1434h */ case   28:  		/* cmplwi CR6, R6, 0 */
		/* 821E1434h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821E1434h case   28:*/		return 0x821E1438;
		  /* 821E1438h */ case   29:  		/* bc 4, CR6_EQ, 8 */
		/* 821E1438h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821E1440;  }
		/* 821E1438h case   29:*/		return 0x821E143C;
		  /* 821E143Ch */ case   30:  		/* stwx R8, <#[R10 + R11]> */
		/* 821E143Ch case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E143Ch case   30:*/		return 0x821E1440;
	}
	return 0x821E1440;
} // Block from 821E13C4h-821E1440h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821E1440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1440);
		  /* 821E1440h */ case    0:  		/* lwz R9, <#[R9 + 8]> */
		/* 821E1440h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821E1440h case    0:*/		return 0x821E1444;
		  /* 821E1444h */ case    1:  		/* b -92 */
		/* 821E1444h case    1:*/		return 0x821E13E8;
		/* 821E1444h case    1:*/		return 0x821E1448;
	}
	return 0x821E1448;
} // Block from 821E1440h-821E1448h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E1448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1448);
		  /* 821E1448h */ case    0:  		/* mr R25, R7 */
		/* 821E1448h case    0:*/		regs.R25 = regs.R7;
		/* 821E1448h case    0:*/		return 0x821E144C;
		  /* 821E144Ch */ case    1:  		/* lwz R31, <#[R25]> */
		/* 821E144Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x00000000) );
		/* 821E144Ch case    1:*/		return 0x821E1450;
		  /* 821E1450h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821E1450h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E1450h case    2:*/		return 0x821E1454;
		  /* 821E1454h */ case    3:  		/* bc 12, CR6_EQ, -260 */
		/* 821E1454h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E1350;  }
		/* 821E1454h case    3:*/		return 0x821E1458;
		  /* 821E1458h */ case    4:  		/* lwz R11, <#[R31 + 16]> */
		/* 821E1458h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821E1458h case    4:*/		return 0x821E145C;
		  /* 821E145Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E145Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E145Ch case    5:*/		return 0x821E1460;
		  /* 821E1460h */ case    6:  		/* bc 12, CR6_EQ, 344 */
		/* 821E1460h case    6:*/		if ( regs.CR[6].eq ) { return 0x821E15B8;  }
		/* 821E1460h case    6:*/		return 0x821E1464;
		  /* 821E1464h */ case    7:  		/* rlwinm R27, R11, 0, 0, 31 */
		/* 821E1464h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R27,regs.R11);
		/* 821E1464h case    7:*/		return 0x821E1468;
		  /* 821E1468h */ case    8:  		/* lwz R11, <#[R27 + 28]> */
		/* 821E1468h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 821E1468h case    8:*/		return 0x821E146C;
		  /* 821E146Ch */ case    9:  		/* cmplw CR6, R11, R22 */
		/* 821E146Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821E146Ch case    9:*/		return 0x821E1470;
		  /* 821E1470h */ case   10:  		/* bc 12, CR6_EQ, 328 */
		/* 821E1470h case   10:*/		if ( regs.CR[6].eq ) { return 0x821E15B8;  }
		/* 821E1470h case   10:*/		return 0x821E1474;
		  /* 821E1474h */ case   11:  		/* lwzx R11, <#[R18 + R11]> */
		/* 821E1474h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + regs.R11 + 0x00000000) );
		/* 821E1474h case   11:*/		return 0x821E1478;
		  /* 821E1478h */ case   12:  		/* srw R11, R11, R16 */
		/* 821E1478h case   12:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R16);
		/* 821E1478h case   12:*/		return 0x821E147C;
		  /* 821E147Ch */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E147Ch case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E147Ch case   13:*/		return 0x821E1480;
		  /* 821E1480h */ case   14:  		/* bc 12, CR0_EQ, 312 */
		/* 821E1480h case   14:*/		if ( regs.CR[0].eq ) { return 0x821E15B8;  }
		/* 821E1480h case   14:*/		return 0x821E1484;
		  /* 821E1484h */ case   15:  		/* lwz R11, <#[R31]> */
		/* 821E1484h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E1484h case   15:*/		return 0x821E1488;
		  /* 821E1488h */ case   16:  		/* addi R29, R1, 288 */
		/* 821E1488h case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x120);
		/* 821E1488h case   16:*/		return 0x821E148C;
		  /* 821E148Ch */ case   17:  		/* rlwinm R28, R11, 29, 28, 29 */
		/* 821E148Ch case   17:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R28,regs.R11);
		/* 821E148Ch case   17:*/		return 0x821E1490;
		  /* 821E1490h */ case   18:  		/* lwzx R30, <#[R28 + R29]> */
		/* 821E1490h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + regs.R29 + 0x00000000) );
		/* 821E1490h case   18:*/		return 0x821E1494;
		  /* 821E1494h */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 821E1494h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E1494h case   19:*/		return 0x821E1498;
		  /* 821E1498h */ case   20:  		/* bc 4, CR6_EQ, 80 */
		/* 821E1498h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821E14E8;  }
		/* 821E1498h case   20:*/		return 0x821E149C;
		  /* 821E149Ch */ case   21:  		/* mr R4, R22 */
		/* 821E149Ch case   21:*/		regs.R4 = regs.R22;
		/* 821E149Ch case   21:*/		return 0x821E14A0;
		  /* 821E14A0h */ case   22:  		/* mr R3, R20 */
		/* 821E14A0h case   22:*/		regs.R3 = regs.R20;
		/* 821E14A0h case   22:*/		return 0x821E14A4;
		  /* 821E14A4h */ case   23:  		/* bl 275868 */
		/* 821E14A4h case   23:*/		regs.LR = 0x821E14A8; return 0x82224A40;
		/* 821E14A4h case   23:*/		return 0x821E14A8;
		  /* 821E14A8h */ case   24:  		/* mr R30, R3 */
		/* 821E14A8h case   24:*/		regs.R30 = regs.R3;
		/* 821E14A8h case   24:*/		return 0x821E14AC;
		  /* 821E14ACh */ case   25:  		/* mr R4, R26 */
		/* 821E14ACh case   25:*/		regs.R4 = regs.R26;
		/* 821E14ACh case   25:*/		return 0x821E14B0;
		  /* 821E14B0h */ case   26:  		/* mr R3, R20 */
		/* 821E14B0h case   26:*/		regs.R3 = regs.R20;
		/* 821E14B0h case   26:*/		return 0x821E14B4;
		  /* 821E14B4h */ case   27:  		/* bl -431284 */
		/* 821E14B4h case   27:*/		regs.LR = 0x821E14B8; return 0x82178000;
		/* 821E14B4h case   27:*/		return 0x821E14B8;
		  /* 821E14B8h */ case   28:  		/* mr R11, R3 */
		/* 821E14B8h case   28:*/		regs.R11 = regs.R3;
		/* 821E14B8h case   28:*/		return 0x821E14BC;
		  /* 821E14BCh */ case   29:  		/* li R10, 1 */
		/* 821E14BCh case   29:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821E14BCh case   29:*/		return 0x821E14C0;
		  /* 821E14C0h */ case   30:  		/* mr R3, R30 */
		/* 821E14C0h case   30:*/		regs.R3 = regs.R30;
		/* 821E14C0h case   30:*/		return 0x821E14C4;
		  /* 821E14C4h */ case   31:  		/* mr R4, R11 */
		/* 821E14C4h case   31:*/		regs.R4 = regs.R11;
		/* 821E14C4h case   31:*/		return 0x821E14C8;
		  /* 821E14C8h */ case   32:  		/* lwz R9, <#[R11]> */
		/* 821E14C8h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E14C8h case   32:*/		return 0x821E14CC;
		  /* 821E14CCh */ case   33:  		/* rlwimi R9, R10, 25, 4, 6 */
		/* 821E14CCh case   33:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R9,regs.R10);
		/* 821E14CCh case   33:*/		return 0x821E14D0;
		  /* 821E14D0h */ case   34:  		/* stw R9, <#[R11]> */
		/* 821E14D0h case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E14D0h case   34:*/		return 0x821E14D4;
		  /* 821E14D4h */ case   35:  		/* lwz R10, <#[R31]> */
		/* 821E14D4h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821E14D4h case   35:*/		return 0x821E14D8;
		  /* 821E14D8h */ case   36:  		/* rlwimi R9, R10, 0, 19, 26 */
		/* 821E14D8h case   36:*/		cpu::op::rlwimi<0,0,19,26>(regs,&regs.R9,regs.R10);
		/* 821E14D8h case   36:*/		return 0x821E14DC;
		  /* 821E14DCh */ case   37:  		/* stw R9, <#[R11]> */
		/* 821E14DCh case   37:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E14DCh case   37:*/		return 0x821E14E0;
		  /* 821E14E0h */ case   38:  		/* bl -430872 */
		/* 821E14E0h case   38:*/		regs.LR = 0x821E14E4; return 0x821781C8;
		/* 821E14E0h case   38:*/		return 0x821E14E4;
		  /* 821E14E4h */ case   39:  		/* stwx R30, <#[R28 + R29]> */
		/* 821E14E4h case   39:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + regs.R29 + 0x00000000) );
		/* 821E14E4h case   39:*/		return 0x821E14E8;
	}
	return 0x821E14E8;
} // Block from 821E1448h-821E14E8h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821E14E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E14E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E14E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E14E8);
		  /* 821E14E8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821E14E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E14E8h case    0:*/		return 0x821E14EC;
		  /* 821E14ECh */ case    1:  		/* addi R11, R11, 4 */
		/* 821E14ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E14ECh case    1:*/		return 0x821E14F0;
		  /* 821E14F0h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821E14F0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E14F0h case    2:*/		return 0x821E14F4;
		  /* 821E14F4h */ case    3:  		/* b 12 */
		/* 821E14F4h case    3:*/		return 0x821E1500;
		/* 821E14F4h case    3:*/		return 0x821E14F8;
		  /* 821E14F8h */ case    4:  		/* addi R11, R10, 8 */
		/* 821E14F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821E14F8h case    4:*/		return 0x821E14FC;
		  /* 821E14FCh */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E14FCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E14FCh case    5:*/		return 0x821E1500;
	}
	return 0x821E1500;
} // Block from 821E14E8h-821E1500h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E1500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1500);
		  /* 821E1500h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821E1500h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821E1500h case    0:*/		return 0x821E1504;
		  /* 821E1504h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821E1504h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E14F8;  }
		/* 821E1504h case    1:*/		return 0x821E1508;
		  /* 821E1508h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821E1508h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821E1508h case    2:*/		return 0x821E150C;
		  /* 821E150Ch */ case    3:  		/* li R9, 57 */
		/* 821E150Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x39);
		/* 821E150Ch case    3:*/		return 0x821E1510;
		  /* 821E1510h */ case    4:  		/* stw R10, <#[R11]> */
		/* 821E1510h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1510h case    4:*/		return 0x821E1514;
		  /* 821E1514h */ case    5:  		/* lwz R11, <#[R30 + 4]> */
		/* 821E1514h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821E1514h case    5:*/		return 0x821E1518;
		  /* 821E1518h */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 821E1518h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E1518h case    6:*/		return 0x821E151C;
		  /* 821E151Ch */ case    7:  		/* stw R31, <#[R30 + 4]> */
		/* 821E151Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821E151Ch case    7:*/		return 0x821E1520;
		  /* 821E1520h */ case    8:  		/* stw R30, <#[R31 + 12]> */
		/* 821E1520h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E1520h case    8:*/		return 0x821E1524;
		  /* 821E1524h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 821E1524h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E1524h case    9:*/		return 0x821E1528;
		  /* 821E1528h */ case   10:  		/* rlwimi R11, R9, 7, 19, 26 */
		/* 821E1528h case   10:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R9);
		/* 821E1528h case   10:*/		return 0x821E152C;
		  /* 821E152Ch */ case   11:  		/* stw R11, <#[R31]> */
		/* 821E152Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E152Ch case   11:*/		return 0x821E1530;
		  /* 821E1530h */ case   12:  		/* lwz R4, <#[R27]> */
		/* 821E1530h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 821E1530h case   12:*/		return 0x821E1534;
		  /* 821E1534h */ case   13:  		/* lwz R10, <#[R26 + 32]> */
		/* 821E1534h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000020) );
		/* 821E1534h case   13:*/		return 0x821E1538;
		  /* 821E1538h */ case   14:  		/* cmplwi CR6, R4, 0 */
		/* 821E1538h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821E1538h case   14:*/		return 0x821E153C;
		  /* 821E153Ch */ case   15:  		/* bc 12, CR6_EQ, 21648 */
		/* 821E153Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821E69CC;  }
		/* 821E153Ch case   15:*/		return 0x821E1540;
		  /* 821E1540h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821E1540h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821E1540h case   16:*/		return 0x821E1544;
		  /* 821E1544h */ case   17:  		/* cmplw CR6, R11, R10 */
		/* 821E1544h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E1544h case   17:*/		return 0x821E1548;
		  /* 821E1548h */ case   18:  		/* bc 12, CR6_EQ, 12 */
		/* 821E1548h case   18:*/		if ( regs.CR[6].eq ) { return 0x821E1554;  }
		/* 821E1548h case   18:*/		return 0x821E154C;
		  /* 821E154Ch */ case   19:  		/* lwz R4, <#[R4 + 4]> */
		/* 821E154Ch case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000004) );
		/* 821E154Ch case   19:*/		return 0x821E1550;
		  /* 821E1550h */ case   20:  		/* b -24 */
		/* 821E1550h case   20:*/		return 0x821E1538;
		/* 821E1550h case   20:*/		return 0x821E1554;
	}
	return 0x821E1554;
} // Block from 821E1500h-821E1554h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821E1554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1554);
		  /* 821E1554h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821E1554h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E1554h case    0:*/		return 0x821E1558;
		  /* 821E1558h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E1558h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1558h case    1:*/		return 0x821E155C;
		  /* 821E155Ch */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 821E155Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821E1584;  }
		/* 821E155Ch case    2:*/		return 0x821E1560;
		  /* 821E1560h */ case    3:  		/* lwz R9, <#[R11 + 12]> */
		/* 821E1560h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E1560h case    3:*/		return 0x821E1564;
		  /* 821E1564h */ case    4:  		/* cmplw CR6, R9, R10 */
		/* 821E1564h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821E1564h case    4:*/		return 0x821E1568;
		  /* 821E1568h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 821E1568h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E1574;  }
		/* 821E1568h case    5:*/		return 0x821E156C;
		  /* 821E156Ch */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E156Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E156Ch case    6:*/		return 0x821E1570;
		  /* 821E1570h */ case    7:  		/* b -24 */
		/* 821E1570h case    7:*/		return 0x821E1558;
		/* 821E1570h case    7:*/		return 0x821E1574;
	}
	return 0x821E1574;
} // Block from 821E1554h-821E1574h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E1574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1574);
		  /* 821E1574h */ case    0:  		/* mr R5, R20 */
		/* 821E1574h case    0:*/		regs.R5 = regs.R20;
		/* 821E1574h case    0:*/		return 0x821E1578;
		  /* 821E1578h */ case    1:  		/* mr R3, R27 */
		/* 821E1578h case    1:*/		regs.R3 = regs.R27;
		/* 821E1578h case    1:*/		return 0x821E157C;
		  /* 821E157Ch */ case    2:  		/* bl -429164 */
		/* 821E157Ch case    2:*/		regs.LR = 0x821E1580; return 0x82178910;
		/* 821E157Ch case    2:*/		return 0x821E1580;
		  /* 821E1580h */ case    3:  		/* b 56 */
		/* 821E1580h case    3:*/		return 0x821E15B8;
		/* 821E1580h case    3:*/		return 0x821E1584;
	}
	return 0x821E1584;
} // Block from 821E1574h-821E1584h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E1584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1584);
		  /* 821E1584h */ case    0:  		/* lwz R11, <#[R4 + 16]> */
		/* 821E1584h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821E1584h case    0:*/		return 0x821E1588;
		  /* 821E1588h */ case    1:  		/* lwz R10, <#[R11]> */
		/* 821E1588h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1588h case    1:*/		return 0x821E158C;
		  /* 821E158Ch */ case    2:  		/* b 12 */
		/* 821E158Ch case    2:*/		return 0x821E1598;
		/* 821E158Ch case    2:*/		return 0x821E1590;
		  /* 821E1590h */ case    3:  		/* addi R11, R10, 4 */
		/* 821E1590h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 821E1590h case    3:*/		return 0x821E1594;
		  /* 821E1594h */ case    4:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E1594h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E1594h case    4:*/		return 0x821E1598;
	}
	return 0x821E1598;
} // Block from 821E1584h-821E1598h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E1598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1598);
		  /* 821E1598h */ case    0:  		/* cmplw CR6, R10, R4 */
		/* 821E1598h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 821E1598h case    0:*/		return 0x821E159C;
		  /* 821E159Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821E159Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E1590;  }
		/* 821E159Ch case    1:*/		return 0x821E15A0;
		  /* 821E15A0h */ case    2:  		/* lwz R10, <#[R4 + 4]> */
		/* 821E15A0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 821E15A0h case    2:*/		return 0x821E15A4;
		  /* 821E15A4h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821E15A4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E15A4h case    3:*/		return 0x821E15A8;
		  /* 821E15A8h */ case    4:  		/* lwz R11, <#[R30]> */
		/* 821E15A8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E15A8h case    4:*/		return 0x821E15AC;
		  /* 821E15ACh */ case    5:  		/* stw R11, <#[R4 + 4]> */
		/* 821E15ACh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821E15ACh case    5:*/		return 0x821E15B0;
		  /* 821E15B0h */ case    6:  		/* stw R4, <#[R30]> */
		/* 821E15B0h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821E15B0h case    6:*/		return 0x821E15B4;
		  /* 821E15B4h */ case    7:  		/* stw R30, <#[R4 + 16]> */
		/* 821E15B4h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R4 + 0x00000010) );
		/* 821E15B4h case    7:*/		return 0x821E15B8;
	}
	return 0x821E15B8;
} // Block from 821E1598h-821E15B8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E15B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E15B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E15B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E15B8);
		  /* 821E15B8h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821E15B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821E15B8h case    0:*/		return 0x821E15BC;
		  /* 821E15BCh */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821E15BCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821E15BCh case    1:*/		return 0x821E15C0;
		  /* 821E15C0h */ case    2:  		/* bc 4, CR6_EQ, -372 */
		/* 821E15C0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E144C;  }
		/* 821E15C0h case    2:*/		return 0x821E15C4;
		  /* 821E15C4h */ case    3:  		/* addi R25, R31, 8 */
		/* 821E15C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R31,0x8);
		/* 821E15C4h case    3:*/		return 0x821E15C8;
		  /* 821E15C8h */ case    4:  		/* b -380 */
		/* 821E15C8h case    4:*/		return 0x821E144C;
		/* 821E15C8h case    4:*/		return 0x821E15CC;
	}
	return 0x821E15CC;
} // Block from 821E15B8h-821E15CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E15CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E15CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E15CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E15CC);
		  /* 821E15CCh */ case    0:  		/* li R6, 38 */
		/* 821E15CCh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x26);
		/* 821E15CCh case    0:*/		return 0x821E15D0;
		  /* 821E15D0h */ case    1:  		/* li R5, 8 */
		/* 821E15D0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 821E15D0h case    1:*/		return 0x821E15D4;
		  /* 821E15D4h */ case    2:  		/* mr R4, R24 */
		/* 821E15D4h case    2:*/		regs.R4 = regs.R24;
		/* 821E15D4h case    2:*/		return 0x821E15D8;
		  /* 821E15D8h */ case    3:  		/* mr R3, R20 */
		/* 821E15D8h case    3:*/		regs.R3 = regs.R20;
		/* 821E15D8h case    3:*/		return 0x821E15DC;
		  /* 821E15DCh */ case    4:  		/* bl -477068 */
		/* 821E15DCh case    4:*/		regs.LR = 0x821E15E0; return 0x8216CE50;
		/* 821E15DCh case    4:*/		return 0x821E15E0;
		  /* 821E15E0h */ case    5:  		/* lwz R11, <#[R15 + 80]> */
		/* 821E15E0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000050) );
		/* 821E15E0h case    5:*/		return 0x821E15E4;
		  /* 821E15E4h */ case    6:  		/* lwz R11, <#[R11 + 20]> */
		/* 821E15E4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821E15E4h case    6:*/		return 0x821E15E8;
		  /* 821E15E8h */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E15E8h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E15E8h case    7:*/		return 0x821E15EC;
		  /* 821E15ECh */ case    8:  		/* bc 4, CR0_EQ, 416 */
		/* 821E15ECh case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E178C;  }
		/* 821E15ECh case    8:*/		return 0x821E15F0;
		  /* 821E15F0h */ case    9:  		/* mr R29, R11 */
		/* 821E15F0h case    9:*/		regs.R29 = regs.R11;
		/* 821E15F0h case    9:*/		return 0x821E15F4;
		  /* 821E15F4h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821E15F4h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E15F4h case   10:*/		return 0x821E15F8;
		  /* 821E15F8h */ case   11:  		/* bc 12, CR0_EQ, 404 */
		/* 821E15F8h case   11:*/		if ( regs.CR[0].eq ) { return 0x821E178C;  }
		/* 821E15F8h case   11:*/		return 0x821E15FC;
		  /* 821E15FCh */ case   12:  		/* lwz R11, <#[R29 + 8]> */
		/* 821E15FCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821E15FCh case   12:*/		return 0x821E1600;
		  /* 821E1600h */ case   13:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E1600h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E1600h case   13:*/		return 0x821E1604;
		  /* 821E1604h */ case   14:  		/* cmplwi CR6, R11, 14336 */
		/* 821E1604h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E1604h case   14:*/		return 0x821E1608;
		  /* 821E1608h */ case   15:  		/* bc 4, CR6_EQ, 360 */
		/* 821E1608h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821E1770;  }
		/* 821E1608h case   15:*/		return 0x821E160C;
		  /* 821E160Ch */ case   16:  		/* lwz R28, <#[R29 + 32]> */
		/* 821E160Ch case   16:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000020) );
		/* 821E160Ch case   16:*/		return 0x821E1610;
		  /* 821E1610h */ case   17:  		/* cmplwi CR6, R28, 0 */
		/* 821E1610h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821E1610h case   17:*/		return 0x821E1614;
		  /* 821E1614h */ case   18:  		/* bc 12, CR6_EQ, 348 */
		/* 821E1614h case   18:*/		if ( regs.CR[6].eq ) { return 0x821E1770;  }
		/* 821E1614h case   18:*/		return 0x821E1618;
		  /* 821E1618h */ case   19:  		/* lwz R11, <#[R29]> */
		/* 821E1618h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E1618h case   19:*/		return 0x821E161C;
		  /* 821E161Ch */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 821E161Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E161Ch case   20:*/		return 0x821E1620;
		  /* 821E1620h */ case   21:  		/* bc 12, CR6_EQ, 196 */
		/* 821E1620h case   21:*/		if ( regs.CR[6].eq ) { return 0x821E16E4;  }
		/* 821E1620h case   21:*/		return 0x821E1624;
		  /* 821E1624h */ case   22:  		/* lwz R10, <#[R11 + 12]> */
		/* 821E1624h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E1624h case   22:*/		return 0x821E1628;
		  /* 821E1628h */ case   23:  		/* li R27, 1 */
		/* 821E1628h case   23:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821E1628h case   23:*/		return 0x821E162C;
		  /* 821E162Ch */ case   24:  		/* lwz R9, <#[R15 + 48]> */
		/* 821E162Ch case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R15 + 0x00000030) );
		/* 821E162Ch case   24:*/		return 0x821E1630;
		  /* 821E1630h */ case   25:  		/* rlwinm R9, R9, 0, 13, 31 */
		/* 821E1630h case   25:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R9);
		/* 821E1630h case   25:*/		return 0x821E1634;
		  /* 821E1634h */ case   26:  		/* lwz R8, <#[R10 + 28]> */
		/* 821E1634h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x0000001C) );
		/* 821E1634h case   26:*/		return 0x821E1638;
		  /* 821E1638h */ case   27:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 821E1638h case   27:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 821E1638h case   27:*/		return 0x821E163C;
		  /* 821E163Ch */ case   28:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821E163Ch case   28:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821E163Ch case   28:*/		return 0x821E1640;
		  /* 821E1640h */ case   29:  		/* addi R10, R10, 1 */
		/* 821E1640h case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E1640h case   29:*/		return 0x821E1644;
		  /* 821E1644h */ case   30:  		/* slw R9, R27, R9 */
		/* 821E1644h case   30:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 821E1644h case   30:*/		return 0x821E1648;
		  /* 821E1648h */ case   31:  		/* lwz R8, <#[R8 + 40]> */
		/* 821E1648h case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000028) );
		/* 821E1648h case   31:*/		return 0x821E164C;
		  /* 821E164Ch */ case   32:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E164Ch case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E164Ch case   32:*/		return 0x821E1650;
		  /* 821E1650h */ case   33:  		/* lwzx R10, <#[R10 + R8]> */
		/* 821E1650h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821E1650h case   33:*/		return 0x821E1654;
		  /* 821E1654h */ case   34:  		/* and. R10, R10, R9 */
		/* 821E1654h case   34:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821E1654h case   34:*/		return 0x821E1658;
		  /* 821E1658h */ case   35:  		/* bc 12, CR0_EQ, 12 */
		/* 821E1658h case   35:*/		if ( regs.CR[0].eq ) { return 0x821E1664;  }
		/* 821E1658h case   35:*/		return 0x821E165C;
		  /* 821E165Ch */ case   36:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E165Ch case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E165Ch case   36:*/		return 0x821E1660;
		  /* 821E1660h */ case   37:  		/* b -68 */
		/* 821E1660h case   37:*/		return 0x821E161C;
		/* 821E1660h case   37:*/		return 0x821E1664;
	}
	return 0x821E1664;
} // Block from 821E15CCh-821E1664h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821E1664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1664);
		  /* 821E1664h */ case    0:  		/* mr R30, R29 */
		/* 821E1664h case    0:*/		regs.R30 = regs.R29;
		/* 821E1664h case    0:*/		return 0x821E1668;
		  /* 821E1668h */ case    1:  		/* lwz R31, <#[R30]> */
		/* 821E1668h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821E1668h case    1:*/		return 0x821E166C;
		  /* 821E166Ch */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821E166Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E166Ch case    2:*/		return 0x821E1670;
		  /* 821E1670h */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 821E1670h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E16CC;  }
		/* 821E1670h case    3:*/		return 0x821E1674;
		  /* 821E1674h */ case    4:  		/* lwz R11, <#[R15 + 48]> */
		/* 821E1674h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000030) );
		/* 821E1674h case    4:*/		return 0x821E1678;
		  /* 821E1678h */ case    5:  		/* lwz R10, <#[R31 + 12]> */
		/* 821E1678h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E1678h case    5:*/		return 0x821E167C;
		  /* 821E167Ch */ case    6:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821E167Ch case    6:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821E167Ch case    6:*/		return 0x821E1680;
		  /* 821E1680h */ case    7:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821E1680h case    7:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821E1680h case    7:*/		return 0x821E1684;
		  /* 821E1684h */ case    8:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821E1684h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821E1684h case    8:*/		return 0x821E1688;
		  /* 821E1688h */ case    9:  		/* lwz R10, <#[R10 + 28]> */
		/* 821E1688h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 821E1688h case    9:*/		return 0x821E168C;
		  /* 821E168Ch */ case   10:  		/* addi R11, R11, 1 */
		/* 821E168Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E168Ch case   10:*/		return 0x821E1690;
		  /* 821E1690h */ case   11:  		/* slw R9, R27, R9 */
		/* 821E1690h case   11:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 821E1690h case   11:*/		return 0x821E1694;
		  /* 821E1694h */ case   12:  		/* lwz R10, <#[R10 + 40]> */
		/* 821E1694h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 821E1694h case   12:*/		return 0x821E1698;
		  /* 821E1698h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E1698h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E1698h case   13:*/		return 0x821E169C;
		  /* 821E169Ch */ case   14:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821E169Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821E169Ch case   14:*/		return 0x821E16A0;
		  /* 821E16A0h */ case   15:  		/* and. R11, R11, R9 */
		/* 821E16A0h case   15:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E16A0h case   15:*/		return 0x821E16A4;
		  /* 821E16A4h */ case   16:  		/* bc 4, CR0_EQ, 20 */
		/* 821E16A4h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821E16B8;  }
		/* 821E16A4h case   16:*/		return 0x821E16A8;
		  /* 821E16A8h */ case   17:  		/* mr R5, R20 */
		/* 821E16A8h case   17:*/		regs.R5 = regs.R20;
		/* 821E16A8h case   17:*/		return 0x821E16AC;
		  /* 821E16ACh */ case   18:  		/* mr R4, R31 */
		/* 821E16ACh case   18:*/		regs.R4 = regs.R31;
		/* 821E16ACh case   18:*/		return 0x821E16B0;
		  /* 821E16B0h */ case   19:  		/* mr R3, R29 */
		/* 821E16B0h case   19:*/		regs.R3 = regs.R29;
		/* 821E16B0h case   19:*/		return 0x821E16B4;
		  /* 821E16B4h */ case   20:  		/* bl -429476 */
		/* 821E16B4h case   20:*/		regs.LR = 0x821E16B8; return 0x82178910;
		/* 821E16B4h case   20:*/		return 0x821E16B8;
	}
	return 0x821E16B8;
} // Block from 821E1664h-821E16B8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821E16B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E16B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E16B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E16B8);
		  /* 821E16B8h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821E16B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E16B8h case    0:*/		return 0x821E16BC;
		  /* 821E16BCh */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821E16BCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821E16BCh case    1:*/		return 0x821E16C0;
		  /* 821E16C0h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821E16C0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E1668;  }
		/* 821E16C0h case    2:*/		return 0x821E16C4;
		  /* 821E16C4h */ case    3:  		/* addi R30, R31, 4 */
		/* 821E16C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x4);
		/* 821E16C4h case    3:*/		return 0x821E16C8;
		  /* 821E16C8h */ case    4:  		/* b -96 */
		/* 821E16C8h case    4:*/		return 0x821E1668;
		/* 821E16C8h case    4:*/		return 0x821E16CC;
	}
	return 0x821E16CC;
} // Block from 821E16B8h-821E16CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E16CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E16CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E16CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E16CC);
		  /* 821E16CCh */ case    0:  		/* mr R4, R28 */
		/* 821E16CCh case    0:*/		regs.R4 = regs.R28;
		/* 821E16CCh case    0:*/		return 0x821E16D0;
		  /* 821E16D0h */ case    1:  		/* mr R3, R20 */
		/* 821E16D0h case    1:*/		regs.R3 = regs.R20;
		/* 821E16D0h case    1:*/		return 0x821E16D4;
		  /* 821E16D4h */ case    2:  		/* bl -431828 */
		/* 821E16D4h case    2:*/		regs.LR = 0x821E16D8; return 0x82178000;
		/* 821E16D4h case    2:*/		return 0x821E16D8;
		  /* 821E16D8h */ case    3:  		/* mr R4, R3 */
		/* 821E16D8h case    3:*/		regs.R4 = regs.R3;
		/* 821E16D8h case    3:*/		return 0x821E16DC;
		  /* 821E16DCh */ case    4:  		/* mr R3, R29 */
		/* 821E16DCh case    4:*/		regs.R3 = regs.R29;
		/* 821E16DCh case    4:*/		return 0x821E16E0;
		  /* 821E16E0h */ case    5:  		/* bl -431384 */
		/* 821E16E0h case    5:*/		regs.LR = 0x821E16E4; return 0x821781C8;
		/* 821E16E0h case    5:*/		return 0x821E16E4;
	}
	return 0x821E16E4;
} // Block from 821E16CCh-821E16E4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E16E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E16E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E16E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E16E4);
		  /* 821E16E4h */ case    0:  		/* mr R28, R29 */
		/* 821E16E4h case    0:*/		regs.R28 = regs.R29;
		/* 821E16E4h case    0:*/		return 0x821E16E8;
		  /* 821E16E8h */ case    1:  		/* lwz R30, <#[R28]> */
		/* 821E16E8h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 821E16E8h case    1:*/		return 0x821E16EC;
		  /* 821E16ECh */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821E16ECh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E16ECh case    2:*/		return 0x821E16F0;
		  /* 821E16F0h */ case    3:  		/* bc 12, CR6_EQ, 128 */
		/* 821E16F0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E1770;  }
		/* 821E16F0h case    3:*/		return 0x821E16F4;
		  /* 821E16F4h */ case    4:  		/* li R5, 0 */
		/* 821E16F4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E16F4h case    4:*/		return 0x821E16F8;
		  /* 821E16F8h */ case    5:  		/* lwz R4, <#[R15 + 80]> */
		/* 821E16F8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R15 + 0x00000050) );
		/* 821E16F8h case    5:*/		return 0x821E16FC;
		  /* 821E16FCh */ case    6:  		/* addi R3, R1, 512 */
		/* 821E16FCh case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x200);
		/* 821E16FCh case    6:*/		return 0x821E1700;
		  /* 821E1700h */ case    7:  		/* bl -478288 */
		/* 821E1700h case    7:*/		regs.LR = 0x821E1704; return 0x8216CAB0;
		/* 821E1700h case    7:*/		return 0x821E1704;
		  /* 821E1704h */ case    8:  		/* addi R3, R1, 512 */
		/* 821E1704h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x200);
		/* 821E1704h case    8:*/		return 0x821E1708;
		  /* 821E1708h */ case    9:  		/* bl -478216 */
		/* 821E1708h case    9:*/		regs.LR = 0x821E170C; return 0x8216CB00;
		/* 821E1708h case    9:*/		return 0x821E170C;
		  /* 821E170Ch */ case   10:  		/* or. R31, R3, R3 */
		/* 821E170Ch case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821E170Ch case   10:*/		return 0x821E1710;
		  /* 821E1710h */ case   11:  		/* bc 12, CR0_EQ, 60 */
		/* 821E1710h case   11:*/		if ( regs.CR[0].eq ) { return 0x821E174C;  }
		/* 821E1710h case   11:*/		return 0x821E1714;
		  /* 821E1714h */ case   12:  		/* li R7, 1 */
		/* 821E1714h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821E1714h case   12:*/		return 0x821E1718;
		  /* 821E1718h */ case   13:  		/* li R6, 0 */
		/* 821E1718h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E1718h case   13:*/		return 0x821E171C;
		  /* 821E171Ch */ case   14:  		/* mr R5, R31 */
		/* 821E171Ch case   14:*/		regs.R5 = regs.R31;
		/* 821E171Ch case   14:*/		return 0x821E1720;
		  /* 821E1720h */ case   15:  		/* mr R4, R29 */
		/* 821E1720h case   15:*/		regs.R4 = regs.R29;
		/* 821E1720h case   15:*/		return 0x821E1724;
		  /* 821E1724h */ case   16:  		/* mr R3, R20 */
		/* 821E1724h case   16:*/		regs.R3 = regs.R20;
		/* 821E1724h case   16:*/		return 0x821E1728;
		  /* 821E1728h */ case   17:  		/* bl 28120 */
		/* 821E1728h case   17:*/		regs.LR = 0x821E172C; return 0x821E8500;
		/* 821E1728h case   17:*/		return 0x821E172C;
		  /* 821E172Ch */ case   18:  		/* cmplw CR6, R3, R30 */
		/* 821E172Ch case   18:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 821E172Ch case   18:*/		return 0x821E1730;
		  /* 821E1730h */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 821E1730h case   19:*/		if ( regs.CR[6].eq ) { return 0x821E1744;  }
		/* 821E1730h case   19:*/		return 0x821E1734;
		  /* 821E1734h */ case   20:  		/* addi R3, R1, 512 */
		/* 821E1734h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x200);
		/* 821E1734h case   20:*/		return 0x821E1738;
		  /* 821E1738h */ case   21:  		/* bl -478264 */
		/* 821E1738h case   21:*/		regs.LR = 0x821E173C; return 0x8216CB00;
		/* 821E1738h case   21:*/		return 0x821E173C;
		  /* 821E173Ch */ case   22:  		/* or. R31, R3, R3 */
		/* 821E173Ch case   22:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821E173Ch case   22:*/		return 0x821E1740;
		  /* 821E1740h */ case   23:  		/* bc 4, CR0_EQ, -44 */
		/* 821E1740h case   23:*/		if ( !regs.CR[0].eq ) { return 0x821E1714;  }
		/* 821E1740h case   23:*/		return 0x821E1744;
	}
	return 0x821E1744;
} // Block from 821E16E4h-821E1744h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E1744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1744);
		  /* 821E1744h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821E1744h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E1744h case    0:*/		return 0x821E1748;
		  /* 821E1748h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821E1748h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E175C;  }
		/* 821E1748h case    1:*/		return 0x821E174C;
	}
	return 0x821E174C;
} // Block from 821E1744h-821E174Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E174Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E174C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E174C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E174C);
		  /* 821E174Ch */ case    0:  		/* mr R5, R20 */
		/* 821E174Ch case    0:*/		regs.R5 = regs.R20;
		/* 821E174Ch case    0:*/		return 0x821E1750;
		  /* 821E1750h */ case    1:  		/* mr R4, R30 */
		/* 821E1750h case    1:*/		regs.R4 = regs.R30;
		/* 821E1750h case    1:*/		return 0x821E1754;
		  /* 821E1754h */ case    2:  		/* mr R3, R29 */
		/* 821E1754h case    2:*/		regs.R3 = regs.R29;
		/* 821E1754h case    2:*/		return 0x821E1758;
		  /* 821E1758h */ case    3:  		/* bl -429640 */
		/* 821E1758h case    3:*/		regs.LR = 0x821E175C; return 0x82178910;
		/* 821E1758h case    3:*/		return 0x821E175C;
	}
	return 0x821E175C;
} // Block from 821E174Ch-821E175Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E175Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E175C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E175C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E175C);
		  /* 821E175Ch */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821E175Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821E175Ch case    0:*/		return 0x821E1760;
		  /* 821E1760h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821E1760h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821E1760h case    1:*/		return 0x821E1764;
		  /* 821E1764h */ case    2:  		/* bc 4, CR6_EQ, -124 */
		/* 821E1764h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E16E8;  }
		/* 821E1764h case    2:*/		return 0x821E1768;
		  /* 821E1768h */ case    3:  		/* addi R28, R30, 4 */
		/* 821E1768h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x4);
		/* 821E1768h case    3:*/		return 0x821E176C;
		  /* 821E176Ch */ case    4:  		/* b -132 */
		/* 821E176Ch case    4:*/		return 0x821E16E8;
		/* 821E176Ch case    4:*/		return 0x821E1770;
	}
	return 0x821E1770;
} // Block from 821E175Ch-821E1770h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E1770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1770);
		  /* 821E1770h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821E1770h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821E1770h case    0:*/		return 0x821E1774;
		  /* 821E1774h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E1774h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E1774h case    1:*/		return 0x821E1778;
		  /* 821E1778h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1778h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1778h case    2:*/		return 0x821E177C;
		  /* 821E177Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E177Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E178C;  }
		/* 821E177Ch case    3:*/		return 0x821E1780;
		  /* 821E1780h */ case    4:  		/* mr R29, R11 */
		/* 821E1780h case    4:*/		regs.R29 = regs.R11;
		/* 821E1780h case    4:*/		return 0x821E1784;
		  /* 821E1784h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E1784h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1784h case    5:*/		return 0x821E1788;
		  /* 821E1788h */ case    6:  		/* bc 4, CR6_EQ, -396 */
		/* 821E1788h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E15FC;  }
		/* 821E1788h case    6:*/		return 0x821E178C;
	}
	return 0x821E178C;
} // Block from 821E1770h-821E178Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E178Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E178C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E178C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E178C);
		  /* 821E178Ch */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E178Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E178Ch case    0:*/		return 0x821E1790;
		  /* 821E1790h */ case    1:  		/* lwz R19, <#[R20 + 92]> */
		/* 821E1790h case    1:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R20 + 0x0000005C) );
		/* 821E1790h case    1:*/		return 0x821E1794;
		  /* 821E1794h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1794h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1794h case    2:*/		return 0x821E1798;
		  /* 821E1798h */ case    3:  		/* bc 4, CR0_EQ, 940 */
		/* 821E1798h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E1B44;  }
		/* 821E1798h case    3:*/		return 0x821E179C;
		  /* 821E179Ch */ case    4:  		/* mr R20, R11 */
		/* 821E179Ch case    4:*/		regs.R20 = regs.R11;
		/* 821E179Ch case    4:*/		return 0x821E17A0;
		  /* 821E17A0h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821E17A0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E17A0h case    5:*/		return 0x821E17A4;
		  /* 821E17A4h */ case    6:  		/* bc 12, CR0_EQ, 928 */
		/* 821E17A4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E1B44;  }
		/* 821E17A4h case    6:*/		return 0x821E17A8;
		  /* 821E17A8h */ case    7:  		/* lwz R11, <#[R20 + 48]> */
		/* 821E17A8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000030) );
		/* 821E17A8h case    7:*/		return 0x821E17AC;
		  /* 821E17ACh */ case    8:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821E17ACh case    8:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821E17ACh case    8:*/		return 0x821E17B0;
		  /* 821E17B0h */ case    9:  		/* bc 4, CR0_EQ, 884 */
		/* 821E17B0h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821E1B24;  }
		/* 821E17B0h case    9:*/		return 0x821E17B4;
		  /* 821E17B4h */ case   10:  		/* lwzx R11, <#[R18 + R20]> */
		/* 821E17B4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + regs.R20 + 0x00000000) );
		/* 821E17B4h case   10:*/		return 0x821E17B8;
		  /* 821E17B8h */ case   11:  		/* srw R11, R11, R16 */
		/* 821E17B8h case   11:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R16);
		/* 821E17B8h case   11:*/		return 0x821E17BC;
		  /* 821E17BCh */ case   12:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E17BCh case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E17BCh case   12:*/		return 0x821E17C0;
		  /* 821E17C0h */ case   13:  		/* bc 4, CR0_EQ, 868 */
		/* 821E17C0h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821E1B24;  }
		/* 821E17C0h case   13:*/		return 0x821E17C4;
		  /* 821E17C4h */ case   14:  		/* lwz R11, <#[R1 + 804]> */
		/* 821E17C4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000324) );
		/* 821E17C4h case   14:*/		return 0x821E17C8;
		  /* 821E17C8h */ case   15:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E17C8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E17C8h case   15:*/		return 0x821E17CC;
		  /* 821E17CCh */ case   16:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 821E17CCh case   16:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 821E17CCh case   16:*/		return 0x821E17D0;
		  /* 821E17D0h */ case   17:  		/* bc 12, CR0_EQ, 88 */
		/* 821E17D0h case   17:*/		if ( regs.CR[0].eq ) { return 0x821E1828;  }
		/* 821E17D0h case   17:*/		return 0x821E17D4;
		  /* 821E17D4h */ case   18:  		/* mr R11, R20 */
		/* 821E17D4h case   18:*/		regs.R11 = regs.R20;
		/* 821E17D4h case   18:*/		return 0x821E17D8;
		  /* 821E17D8h */ case   19:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E17D8h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E17D8h case   19:*/		return 0x821E17DC;
		  /* 821E17DCh */ case   20:  		/* rlwinm. R10, R10, 0, 12, 12 */
		/* 821E17DCh case   20:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R10);
		/* 821E17DCh case   20:*/		return 0x821E17E0;
		  /* 821E17E0h */ case   21:  		/* bc 4, CR0_EQ, 16 */
		/* 821E17E0h case   21:*/		if ( !regs.CR[0].eq ) { return 0x821E17F0;  }
		/* 821E17E0h case   21:*/		return 0x821E17E4;
		  /* 821E17E4h */ case   22:  		/* lwz R11, <#[R11 + 52]> */
		/* 821E17E4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 821E17E4h case   22:*/		return 0x821E17E8;
		  /* 821E17E8h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 821E17E8h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E17E8h case   23:*/		return 0x821E17EC;
		  /* 821E17ECh */ case   24:  		/* bc 4, CR6_EQ, -20 */
		/* 821E17ECh case   24:*/		if ( !regs.CR[6].eq ) { return 0x821E17D8;  }
		/* 821E17ECh case   24:*/		return 0x821E17F0;
	}
	return 0x821E17F0;
} // Block from 821E178Ch-821E17F0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821E17F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E17F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E17F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E17F0);
		  /* 821E17F0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E17F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E17F0h case    0:*/		return 0x821E17F4;
		  /* 821E17F4h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 821E17F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E1828;  }
		/* 821E17F4h case    1:*/		return 0x821E17F8;
		  /* 821E17F8h */ case    2:  		/* lwz R11, <#[R11 + 48]> */
		/* 821E17F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821E17F8h case    2:*/		return 0x821E17FC;
		  /* 821E17FCh */ case    3:  		/* li R10, 1 */
		/* 821E17FCh case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821E17FCh case    3:*/		return 0x821E1800;
		  /* 821E1800h */ case    4:  		/* lwz R9, <#[R15 + 40]> */
		/* 821E1800h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R15 + 0x00000028) );
		/* 821E1800h case    4:*/		return 0x821E1804;
		  /* 821E1804h */ case    5:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 821E1804h case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 821E1804h case    5:*/		return 0x821E1808;
		  /* 821E1808h */ case    6:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 821E1808h case    6:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 821E1808h case    6:*/		return 0x821E180C;
		  /* 821E180Ch */ case    7:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821E180Ch case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821E180Ch case    7:*/		return 0x821E1810;
		  /* 821E1810h */ case    8:  		/* addi R11, R11, 1 */
		/* 821E1810h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E1810h case    8:*/		return 0x821E1814;
		  /* 821E1814h */ case    9:  		/* slw R10, R10, R8 */
		/* 821E1814h case    9:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821E1814h case    9:*/		return 0x821E1818;
		  /* 821E1818h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E1818h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E1818h case   10:*/		return 0x821E181C;
		  /* 821E181Ch */ case   11:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821E181Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821E181Ch case   11:*/		return 0x821E1820;
		  /* 821E1820h */ case   12:  		/* and. R11, R11, R10 */
		/* 821E1820h case   12:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E1820h case   12:*/		return 0x821E1824;
		  /* 821E1824h */ case   13:  		/* bc 12, CR0_EQ, 768 */
		/* 821E1824h case   13:*/		if ( regs.CR[0].eq ) { return 0x821E1B24;  }
		/* 821E1824h case   13:*/		return 0x821E1828;
	}
	return 0x821E1828;
} // Block from 821E17F0h-821E1828h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E1828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1828);
		  /* 821E1828h */ case    0:  		/* lwz R11, <#[R20 + 20]> */
		/* 821E1828h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000014) );
		/* 821E1828h case    0:*/		return 0x821E182C;
		  /* 821E182Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E182Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E182Ch case    1:*/		return 0x821E1830;
		  /* 821E1830h */ case    2:  		/* bc 4, CR0_EQ, 756 */
		/* 821E1830h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E1B24;  }
		/* 821E1830h case    2:*/		return 0x821E1834;
		  /* 821E1834h */ case    3:  		/* mr R21, R11 */
		/* 821E1834h case    3:*/		regs.R21 = regs.R11;
		/* 821E1834h case    3:*/		return 0x821E1838;
		  /* 821E1838h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821E1838h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E1838h case    4:*/		return 0x821E183C;
		  /* 821E183Ch */ case    5:  		/* bc 12, CR0_EQ, 744 */
		/* 821E183Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821E1B24;  }
		/* 821E183Ch case    5:*/		return 0x821E1840;
		  /* 821E1840h */ case    6:  		/* lwz R11, <#[R21 + 8]> */
		/* 821E1840h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821E1840h case    6:*/		return 0x821E1844;
		  /* 821E1844h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E1844h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E1844h case    7:*/		return 0x821E1848;
		  /* 821E1848h */ case    8:  		/* cmplwi CR6, R11, 14336 */
		/* 821E1848h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E1848h case    8:*/		return 0x821E184C;
		  /* 821E184Ch */ case    9:  		/* bc 4, CR6_EQ, 700 */
		/* 821E184Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821E1B08;  }
		/* 821E184Ch case    9:*/		return 0x821E1850;
		  /* 821E1850h */ case   10:  		/* lwz R26, <#[R21]> */
		/* 821E1850h case   10:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R21 + 0x00000000) );
		/* 821E1850h case   10:*/		return 0x821E1854;
		  /* 821E1854h */ case   11:  		/* cmplwi CR6, R26, 0 */
		/* 821E1854h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821E1854h case   11:*/		return 0x821E1858;
		  /* 821E1858h */ case   12:  		/* bc 12, CR6_EQ, 688 */
		/* 821E1858h case   12:*/		if ( regs.CR[6].eq ) { return 0x821E1B08;  }
		/* 821E1858h case   12:*/		return 0x821E185C;
		  /* 821E185Ch */ case   13:  		/* lwz R23, <#[R26 + 12]> */
		/* 821E185Ch case   13:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R26 + 0x0000000C) );
		/* 821E185Ch case   13:*/		return 0x821E1860;
		  /* 821E1860h */ case   14:  		/* lwz R11, <#[R23 + 28]> */
		/* 821E1860h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 821E1860h case   14:*/		return 0x821E1864;
		  /* 821E1864h */ case   15:  		/* lwzx R11, <#[R11 + R18]> */
		/* 821E1864h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R18 + 0x00000000) );
		/* 821E1864h case   15:*/		return 0x821E1868;
		  /* 821E1868h */ case   16:  		/* srw R11, R11, R16 */
		/* 821E1868h case   16:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R16);
		/* 821E1868h case   16:*/		return 0x821E186C;
		  /* 821E186Ch */ case   17:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E186Ch case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E186Ch case   17:*/		return 0x821E1870;
		  /* 821E1870h */ case   18:  		/* bc 12, CR0_EQ, 184 */
		/* 821E1870h case   18:*/		if ( regs.CR[0].eq ) { return 0x821E1928;  }
		/* 821E1870h case   18:*/		return 0x821E1874;
		  /* 821E1874h */ case   19:  		/* lwz R24, <#[R23 + 28]> */
		/* 821E1874h case   19:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R23 + 0x0000001C) );
		/* 821E1874h case   19:*/		return 0x821E1878;
		  /* 821E1878h */ case   20:  		/* lwz R11, <#[R24 + 44]> */
		/* 821E1878h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 821E1878h case   20:*/		return 0x821E187C;
		  /* 821E187Ch */ case   21:  		/* cmplw CR6, R11, R17 */
		/* 821E187Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 821E187Ch case   21:*/		return 0x821E1880;
		  /* 821E1880h */ case   22:  		/* bc 12, CR6_EQ, 168 */
		/* 821E1880h case   22:*/		if ( regs.CR[6].eq ) { return 0x821E1928;  }
		/* 821E1880h case   22:*/		return 0x821E1884;
		  /* 821E1884h */ case   23:  		/* lwz R11, <#[R24 + 48]> */
		/* 821E1884h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000030) );
		/* 821E1884h case   23:*/		return 0x821E1888;
		  /* 821E1888h */ case   24:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821E1888h case   24:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821E1888h case   24:*/		return 0x821E188C;
		  /* 821E188Ch */ case   25:  		/* cmplw CR6, R11, R14 */
		/* 821E188Ch case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R14);
		/* 821E188Ch case   25:*/		return 0x821E1890;
		  /* 821E1890h */ case   26:  		/* bc 12, CR6_LT, 152 */
		/* 821E1890h case   26:*/		if ( regs.CR[6].lt ) { return 0x821E1928;  }
		/* 821E1890h case   26:*/		return 0x821E1894;
		  /* 821E1894h */ case   27:  		/* cmplw CR6, R11, R19 */
		/* 821E1894h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 821E1894h case   27:*/		return 0x821E1898;
		  /* 821E1898h */ case   28:  		/* bc 4, CR6_LT, 144 */
		/* 821E1898h case   28:*/		if ( !regs.CR[6].lt ) { return 0x821E1928;  }
		/* 821E1898h case   28:*/		return 0x821E189C;
		  /* 821E189Ch */ case   29:  		/* lwz R22, <#[R23 + 32]> */
		/* 821E189Ch case   29:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R23 + 0x00000020) );
		/* 821E189Ch case   29:*/		return 0x821E18A0;
		  /* 821E18A0h */ case   30:  		/* lwz R27, <#[R21]> */
		/* 821E18A0h case   30:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R21 + 0x00000000) );
		/* 821E18A0h case   30:*/		return 0x821E18A4;
		  /* 821E18A4h */ case   31:  		/* cmplwi CR6, R27, 0 */
		/* 821E18A4h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821E18A4h case   31:*/		return 0x821E18A8;
		  /* 821E18A8h */ case   32:  		/* bc 12, CR6_EQ, 24 */
		/* 821E18A8h case   32:*/		if ( regs.CR[6].eq ) { return 0x821E18C0;  }
		/* 821E18A8h case   32:*/		return 0x821E18AC;
		  /* 821E18ACh */ case   33:  		/* lwz R11, <#[R27 + 12]> */
		/* 821E18ACh case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821E18ACh case   33:*/		return 0x821E18B0;
		  /* 821E18B0h */ case   34:  		/* cmplw CR6, R11, R22 */
		/* 821E18B0h case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821E18B0h case   34:*/		return 0x821E18B4;
		  /* 821E18B4h */ case   35:  		/* bc 12, CR6_EQ, 12 */
		/* 821E18B4h case   35:*/		if ( regs.CR[6].eq ) { return 0x821E18C0;  }
		/* 821E18B4h case   35:*/		return 0x821E18B8;
		  /* 821E18B8h */ case   36:  		/* lwz R27, <#[R27 + 4]> */
		/* 821E18B8h case   36:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R27 + 0x00000004) );
		/* 821E18B8h case   36:*/		return 0x821E18BC;
		  /* 821E18BCh */ case   37:  		/* b -24 */
		/* 821E18BCh case   37:*/		return 0x821E18A4;
		/* 821E18BCh case   37:*/		return 0x821E18C0;
	}
	return 0x821E18C0;
} // Block from 821E1828h-821E18C0h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821E18C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E18C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E18C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E18C0);
		  /* 821E18C0h */ case    0:  		/* lwz R25, <#[R22 + 28]> */
		/* 821E18C0h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R22 + 0x0000001C) );
		/* 821E18C0h case    0:*/		return 0x821E18C4;
		  /* 821E18C4h */ case    1:  		/* li R28, 0 */
		/* 821E18C4h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821E18C4h case    1:*/		return 0x821E18C8;
		  /* 821E18C8h */ case    2:  		/* lwz R30, <#[R20 + 8]> */
		/* 821E18C8h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R20 + 0x00000008) );
		/* 821E18C8h case    2:*/		return 0x821E18CC;
		  /* 821E18CCh */ case    3:  		/* li R29, 0 */
		/* 821E18CCh case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821E18CCh case    3:*/		return 0x821E18D0;
		  /* 821E18D0h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821E18D0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E18D0h case    4:*/		return 0x821E18D4;
		  /* 821E18D4h */ case    5:  		/* bc 12, CR6_EQ, 68 */
		/* 821E18D4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E1918;  }
		/* 821E18D4h case    5:*/		return 0x821E18D8;
		  /* 821E18D8h */ case    6:  		/* lwz R31, <#[R30 + 4]> */
		/* 821E18D8h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821E18D8h case    6:*/		return 0x821E18DC;
		  /* 821E18DCh */ case    7:  		/* li R7, 1 */
		/* 821E18DCh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821E18DCh case    7:*/		return 0x821E18E0;
		  /* 821E18E0h */ case    8:  		/* li R6, 0 */
		/* 821E18E0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E18E0h case    8:*/		return 0x821E18E4;
		  /* 821E18E4h */ case    9:  		/* lwz R3, <#[R1 + 804]> */
		/* 821E18E4h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000324) );
		/* 821E18E4h case    9:*/		return 0x821E18E8;
		  /* 821E18E8h */ case   10:  		/* mr R5, R31 */
		/* 821E18E8h case   10:*/		regs.R5 = regs.R31;
		/* 821E18E8h case   10:*/		return 0x821E18EC;
		  /* 821E18ECh */ case   11:  		/* mr R4, R21 */
		/* 821E18ECh case   11:*/		regs.R4 = regs.R21;
		/* 821E18ECh case   11:*/		return 0x821E18F0;
		  /* 821E18F0h */ case   12:  		/* bl 27664 */
		/* 821E18F0h case   12:*/		regs.LR = 0x821E18F4; return 0x821E8500;
		/* 821E18F0h case   12:*/		return 0x821E18F4;
		  /* 821E18F4h */ case   13:  		/* cmplw CR6, R3, R26 */
		/* 821E18F4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R26);
		/* 821E18F4h case   13:*/		return 0x821E18F8;
		  /* 821E18F8h */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 821E18F8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821E1904;  }
		/* 821E18F8h case   14:*/		return 0x821E18FC;
		  /* 821E18FCh */ case   15:  		/* mr R28, R31 */
		/* 821E18FCh case   15:*/		regs.R28 = regs.R31;
		/* 821E18FCh case   15:*/		return 0x821E1900;
		  /* 821E1900h */ case   16:  		/* b 16 */
		/* 821E1900h case   16:*/		return 0x821E1910;
		/* 821E1900h case   16:*/		return 0x821E1904;
	}
	return 0x821E1904;
} // Block from 821E18C0h-821E1904h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E1904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1904);
		  /* 821E1904h */ case    0:  		/* cmplw CR6, R3, R27 */
		/* 821E1904h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R27);
		/* 821E1904h case    0:*/		return 0x821E1908;
		  /* 821E1908h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 821E1908h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E1910;  }
		/* 821E1908h case    1:*/		return 0x821E190C;
		  /* 821E190Ch */ case    2:  		/* mr R29, R31 */
		/* 821E190Ch case    2:*/		regs.R29 = regs.R31;
		/* 821E190Ch case    2:*/		return 0x821E1910;
	}
	return 0x821E1910;
} // Block from 821E1904h-821E1910h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E1910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1910);
		  /* 821E1910h */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 821E1910h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E1910h case    0:*/		return 0x821E1914;
		  /* 821E1914h */ case    1:  		/* b -68 */
		/* 821E1914h case    1:*/		return 0x821E18D0;
		/* 821E1914h case    1:*/		return 0x821E1918;
	}
	return 0x821E1918;
} // Block from 821E1910h-821E1918h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E1918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1918);
		  /* 821E1918h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821E1918h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821E1918h case    0:*/		return 0x821E191C;
		  /* 821E191Ch */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 821E191Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821E1938;  }
		/* 821E191Ch case    1:*/		return 0x821E1920;
		  /* 821E1920h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 821E1920h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E1920h case    2:*/		return 0x821E1924;
		  /* 821E1924h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 821E1924h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E1930;  }
		/* 821E1924h case    3:*/		return 0x821E1928;
	}
	return 0x821E1928;
} // Block from 821E1918h-821E1928h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E1928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1928);
		  /* 821E1928h */ case    0:  		/* lwz R26, <#[R26 + 4]> */
		/* 821E1928h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R26 + 0x00000004) );
		/* 821E1928h case    0:*/		return 0x821E192C;
		  /* 821E192Ch */ case    1:  		/* b -216 */
		/* 821E192Ch case    1:*/		return 0x821E1854;
		/* 821E192Ch case    1:*/		return 0x821E1930;
	}
	return 0x821E1930;
} // Block from 821E1928h-821E1930h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E1930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1930);
		  /* 821E1930h */ case    0:  		/* mr R7, R28 */
		/* 821E1930h case    0:*/		regs.R7 = regs.R28;
		/* 821E1930h case    0:*/		return 0x821E1934;
		  /* 821E1934h */ case    1:  		/* b 8 */
		/* 821E1934h case    1:*/		return 0x821E193C;
		/* 821E1934h case    1:*/		return 0x821E1938;
	}
	return 0x821E1938;
} // Block from 821E1930h-821E1938h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E1938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1938);
		  /* 821E1938h */ case    0:  		/* mr R7, R29 */
		/* 821E1938h case    0:*/		regs.R7 = regs.R29;
		/* 821E1938h case    0:*/		return 0x821E193C;
	}
	return 0x821E193C;
} // Block from 821E1938h-821E193Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E193Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E193C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E193C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E193C);
		  /* 821E193Ch */ case    0:  		/* cmplwi CR6, R7, 0 */
		/* 821E193Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821E193Ch case    0:*/		return 0x821E1940;
		  /* 821E1940h */ case    1:  		/* bc 12, CR6_EQ, 20632 */
		/* 821E1940h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E69D8;  }
		/* 821E1940h case    1:*/		return 0x821E1944;
		  /* 821E1944h */ case    2:  		/* lwz R11, <#[R7 + 8]> */
		/* 821E1944h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 821E1944h case    2:*/		return 0x821E1948;
		  /* 821E1948h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821E1948h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1948h case    3:*/		return 0x821E194C;
		  /* 821E194Ch */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 821E194Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821E196C;  }
		/* 821E194Ch case    4:*/		return 0x821E1950;
		  /* 821E1950h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E1950h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E1950h case    5:*/		return 0x821E1954;
		  /* 821E1954h */ case    6:  		/* cmplw CR6, R25, R10 */
		/* 821E1954h case    6:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R10);
		/* 821E1954h case    6:*/		return 0x821E1958;
		  /* 821E1958h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 821E1958h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E1964;  }
		/* 821E1958h case    7:*/		return 0x821E195C;
		  /* 821E195Ch */ case    8:  		/* lwz R11, <#[R11 + 12]> */
		/* 821E195Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E195Ch case    8:*/		return 0x821E1960;
		  /* 821E1960h */ case    9:  		/* b -24 */
		/* 821E1960h case    9:*/		return 0x821E1948;
		/* 821E1960h case    9:*/		return 0x821E1964;
	}
	return 0x821E1964;
} // Block from 821E193Ch-821E1964h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E1964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1964);
		  /* 821E1964h */ case    0:  		/* li R11, 1 */
		/* 821E1964h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E1964h case    0:*/		return 0x821E1968;
		  /* 821E1968h */ case    1:  		/* b 8 */
		/* 821E1968h case    1:*/		return 0x821E1970;
		/* 821E1968h case    1:*/		return 0x821E196C;
	}
	return 0x821E196C;
} // Block from 821E1964h-821E196Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E196Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E196C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E196C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E196C);
		  /* 821E196Ch */ case    0:  		/* li R11, 0 */
		/* 821E196Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E196Ch case    0:*/		return 0x821E1970;
	}
	return 0x821E1970;
} // Block from 821E196Ch-821E1970h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E1970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1970);
		  /* 821E1970h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E1970h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E1970h case    0:*/		return 0x821E1974;
		  /* 821E1974h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821E1974h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E1984;  }
		/* 821E1974h case    1:*/		return 0x821E1978;
		  /* 821E1978h */ case    2:  		/* lwz R7, <#[R7 + 52]> */
		/* 821E1978h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000034) );
		/* 821E1978h case    2:*/		return 0x821E197C;
		  /* 821E197Ch */ case    3:  		/* cmplwi CR6, R7, 0 */
		/* 821E197Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821E197Ch case    3:*/		return 0x821E1980;
		  /* 821E1980h */ case    4:  		/* bc 4, CR6_EQ, -60 */
		/* 821E1980h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821E1944;  }
		/* 821E1980h case    4:*/		return 0x821E1984;
	}
	return 0x821E1984;
} // Block from 821E1970h-821E1984h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E1984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1984);
		  /* 821E1984h */ case    0:  		/* cmplwi CR6, R7, 0 */
		/* 821E1984h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821E1984h case    0:*/		return 0x821E1988;
		  /* 821E1988h */ case    1:  		/* bc 12, CR6_EQ, 20560 */
		/* 821E1988h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E69D8;  }
		/* 821E1988h case    1:*/		return 0x821E198C;
		  /* 821E198Ch */ case    2:  		/* lwz R11, <#[R7 + 8]> */
		/* 821E198Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 821E198Ch case    2:*/		return 0x821E1990;
		  /* 821E1990h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821E1990h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1990h case    3:*/		return 0x821E1994;
		  /* 821E1994h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 821E1994h case    4:*/		if ( regs.CR[6].eq ) { return 0x821E19B4;  }
		/* 821E1994h case    4:*/		return 0x821E1998;
		  /* 821E1998h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E1998h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E1998h case    5:*/		return 0x821E199C;
		  /* 821E199Ch */ case    6:  		/* cmplw CR6, R24, R10 */
		/* 821E199Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R10);
		/* 821E199Ch case    6:*/		return 0x821E19A0;
		  /* 821E19A0h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 821E19A0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E19AC;  }
		/* 821E19A0h case    7:*/		return 0x821E19A4;
		  /* 821E19A4h */ case    8:  		/* lwz R11, <#[R11 + 12]> */
		/* 821E19A4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E19A4h case    8:*/		return 0x821E19A8;
		  /* 821E19A8h */ case    9:  		/* b -24 */
		/* 821E19A8h case    9:*/		return 0x821E1990;
		/* 821E19A8h case    9:*/		return 0x821E19AC;
	}
	return 0x821E19AC;
} // Block from 821E1984h-821E19ACh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E19ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E19AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E19AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E19AC);
		  /* 821E19ACh */ case    0:  		/* li R11, 1 */
		/* 821E19ACh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E19ACh case    0:*/		return 0x821E19B0;
		  /* 821E19B0h */ case    1:  		/* b 8 */
		/* 821E19B0h case    1:*/		return 0x821E19B8;
		/* 821E19B0h case    1:*/		return 0x821E19B4;
	}
	return 0x821E19B4;
} // Block from 821E19ACh-821E19B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E19B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E19B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E19B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E19B4);
		  /* 821E19B4h */ case    0:  		/* li R11, 0 */
		/* 821E19B4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E19B4h case    0:*/		return 0x821E19B8;
	}
	return 0x821E19B8;
} // Block from 821E19B4h-821E19B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E19B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E19B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E19B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E19B8);
		  /* 821E19B8h */ case    0:  		/* lwz R3, <#[R1 + 804]> */
		/* 821E19B8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000324) );
		/* 821E19B8h case    0:*/		return 0x821E19BC;
		  /* 821E19BCh */ case    1:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E19BCh case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E19BCh case    1:*/		return 0x821E19C0;
		  /* 821E19C0h */ case    2:  		/* bc 12, CR0_EQ, 20516 */
		/* 821E19C0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E69E4;  }
		/* 821E19C0h case    2:*/		return 0x821E19C4;
		  /* 821E19C4h */ case    3:  		/* li R8, 0 */
		/* 821E19C4h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E19C4h case    3:*/		return 0x821E19C8;
		  /* 821E19C8h */ case    4:  		/* li R6, 0 */
		/* 821E19C8h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E19C8h case    4:*/		return 0x821E19CC;
		  /* 821E19CCh */ case    5:  		/* mr R5, R7 */
		/* 821E19CCh case    5:*/		regs.R5 = regs.R7;
		/* 821E19CCh case    5:*/		return 0x821E19D0;
		  /* 821E19D0h */ case    6:  		/* mr R4, R15 */
		/* 821E19D0h case    6:*/		regs.R4 = regs.R15;
		/* 821E19D0h case    6:*/		return 0x821E19D4;
		  /* 821E19D4h */ case    7:  		/* bl 31284 */
		/* 821E19D4h case    7:*/		regs.LR = 0x821E19D8; return 0x821E9408;
		/* 821E19D4h case    7:*/		return 0x821E19D8;
		  /* 821E19D8h */ case    8:  		/* lwz R11, <#[R23 + 4]> */
		/* 821E19D8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821E19D8h case    8:*/		return 0x821E19DC;
		  /* 821E19DCh */ case    9:  		/* mr R4, R3 */
		/* 821E19DCh case    9:*/		regs.R4 = regs.R3;
		/* 821E19DCh case    9:*/		return 0x821E19E0;
		  /* 821E19E0h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821E19E0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E19E0h case   10:*/		return 0x821E19E4;
		  /* 821E19E4h */ case   11:  		/* bc 12, CR6_EQ, 68 */
		/* 821E19E4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821E1A28;  }
		/* 821E19E4h case   11:*/		return 0x821E19E8;
		  /* 821E19E8h */ case   12:  		/* lwz R10, <#[R11 + 16]> */
		/* 821E19E8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821E19E8h case   12:*/		return 0x821E19EC;
		  /* 821E19ECh */ case   13:  		/* cmplwi CR6, R10, 0 */
		/* 821E19ECh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E19ECh case   13:*/		return 0x821E19F0;
		  /* 821E19F0h */ case   14:  		/* bc 12, CR6_EQ, 48 */
		/* 821E19F0h case   14:*/		if ( regs.CR[6].eq ) { return 0x821E1A20;  }
		/* 821E19F0h case   14:*/		return 0x821E19F4;
		  /* 821E19F4h */ case   15:  		/* rlwinm R31, R10, 0, 0, 31 */
		/* 821E19F4h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R31,regs.R10);
		/* 821E19F4h case   15:*/		return 0x821E19F8;
		  /* 821E19F8h */ case   16:  		/* lwz R10, <#[R31 + 28]> */
		/* 821E19F8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 821E19F8h case   16:*/		return 0x821E19FC;
		  /* 821E19FCh */ case   17:  		/* cmplw CR6, R10, R4 */
		/* 821E19FCh case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 821E19FCh case   17:*/		return 0x821E1A00;
		  /* 821E1A00h */ case   18:  		/* bc 4, CR6_EQ, 32 */
		/* 821E1A00h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821E1A20;  }
		/* 821E1A00h case   18:*/		return 0x821E1A04;
		  /* 821E1A04h */ case   19:  		/* lwz R10, <#[R11]> */
		/* 821E1A04h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1A04h case   19:*/		return 0x821E1A08;
		  /* 821E1A08h */ case   20:  		/* lwz R9, <#[R26]> */
		/* 821E1A08h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000000) );
		/* 821E1A08h case   20:*/		return 0x821E1A0C;
		  /* 821E1A0Ch */ case   21:  		/* xor R9, R9, R10 */
		/* 821E1A0Ch case   21:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 821E1A0Ch case   21:*/		return 0x821E1A10;
		  /* 821E1A10h */ case   22:  		/* rlwinm. R9, R9, 0, 25, 26 */
		/* 821E1A10h case   22:*/		cpu::op::rlwinm<1,0,25,26>(regs,&regs.R9,regs.R9);
		/* 821E1A10h case   22:*/		return 0x821E1A14;
		  /* 821E1A14h */ case   23:  		/* bc 4, CR0_EQ, 12 */
		/* 821E1A14h case   23:*/		if ( !regs.CR[0].eq ) { return 0x821E1A20;  }
		/* 821E1A14h case   23:*/		return 0x821E1A18;
		  /* 821E1A18h */ case   24:  		/* rlwinm. R10, R10, 0, 27, 31 */
		/* 821E1A18h case   24:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821E1A18h case   24:*/		return 0x821E1A1C;
		  /* 821E1A1Ch */ case   25:  		/* bc 12, CR0_EQ, 116 */
		/* 821E1A1Ch case   25:*/		if ( regs.CR[0].eq ) { return 0x821E1A90;  }
		/* 821E1A1Ch case   25:*/		return 0x821E1A20;
	}
	return 0x821E1A20;
} // Block from 821E19B8h-821E1A20h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821E1A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1A20);
		  /* 821E1A20h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E1A20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E1A20h case    0:*/		return 0x821E1A24;
		  /* 821E1A24h */ case    1:  		/* b -68 */
		/* 821E1A24h case    1:*/		return 0x821E19E0;
		/* 821E1A24h case    1:*/		return 0x821E1A28;
	}
	return 0x821E1A28;
} // Block from 821E1A20h-821E1A28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E1A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1A28);
		  /* 821E1A28h */ case    0:  		/* lwz R30, <#[R1 + 804]> */
		/* 821E1A28h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000324) );
		/* 821E1A28h case    0:*/		return 0x821E1A2C;
		  /* 821E1A2Ch */ case    1:  		/* mr R3, R30 */
		/* 821E1A2Ch case    1:*/		regs.R3 = regs.R30;
		/* 821E1A2Ch case    1:*/		return 0x821E1A30;
		  /* 821E1A30h */ case    2:  		/* bl 274448 */
		/* 821E1A30h case    2:*/		regs.LR = 0x821E1A34; return 0x82224A40;
		/* 821E1A30h case    2:*/		return 0x821E1A34;
		  /* 821E1A34h */ case    3:  		/* mr R31, R3 */
		/* 821E1A34h case    3:*/		regs.R31 = regs.R3;
		/* 821E1A34h case    3:*/		return 0x821E1A38;
		  /* 821E1A38h */ case    4:  		/* mr R3, R30 */
		/* 821E1A38h case    4:*/		regs.R3 = regs.R30;
		/* 821E1A38h case    4:*/		return 0x821E1A3C;
		  /* 821E1A3Ch */ case    5:  		/* mr R4, R22 */
		/* 821E1A3Ch case    5:*/		regs.R4 = regs.R22;
		/* 821E1A3Ch case    5:*/		return 0x821E1A40;
		  /* 821E1A40h */ case    6:  		/* bl -432704 */
		/* 821E1A40h case    6:*/		regs.LR = 0x821E1A44; return 0x82178000;
		/* 821E1A40h case    6:*/		return 0x821E1A44;
		  /* 821E1A44h */ case    7:  		/* mr R11, R3 */
		/* 821E1A44h case    7:*/		regs.R11 = regs.R3;
		/* 821E1A44h case    7:*/		return 0x821E1A48;
		  /* 821E1A48h */ case    8:  		/* lwz R10, <#[R26]> */
		/* 821E1A48h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 821E1A48h case    8:*/		return 0x821E1A4C;
		  /* 821E1A4Ch */ case    9:  		/* mr R3, R31 */
		/* 821E1A4Ch case    9:*/		regs.R3 = regs.R31;
		/* 821E1A4Ch case    9:*/		return 0x821E1A50;
		  /* 821E1A50h */ case   10:  		/* mr R4, R11 */
		/* 821E1A50h case   10:*/		regs.R4 = regs.R11;
		/* 821E1A50h case   10:*/		return 0x821E1A54;
		  /* 821E1A54h */ case   11:  		/* lwz R9, <#[R11]> */
		/* 821E1A54h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1A54h case   11:*/		return 0x821E1A58;
		  /* 821E1A58h */ case   12:  		/* rlwimi R10, R9, 0, 27, 18 */
		/* 821E1A58h case   12:*/		cpu::op::rlwimi<0,0,27,18>(regs,&regs.R10,regs.R9);
		/* 821E1A58h case   12:*/		return 0x821E1A5C;
		  /* 821E1A5Ch */ case   13:  		/* stw R10, <#[R11]> */
		/* 821E1A5Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1A5Ch case   13:*/		return 0x821E1A60;
		  /* 821E1A60h */ case   14:  		/* bl -432280 */
		/* 821E1A60h case   14:*/		regs.LR = 0x821E1A64; return 0x821781C8;
		/* 821E1A60h case   14:*/		return 0x821E1A64;
		  /* 821E1A64h */ case   15:  		/* mr R4, R23 */
		/* 821E1A64h case   15:*/		regs.R4 = regs.R23;
		/* 821E1A64h case   15:*/		return 0x821E1A68;
		  /* 821E1A68h */ case   16:  		/* mr R3, R30 */
		/* 821E1A68h case   16:*/		regs.R3 = regs.R30;
		/* 821E1A68h case   16:*/		return 0x821E1A6C;
		  /* 821E1A6Ch */ case   17:  		/* bl -432748 */
		/* 821E1A6Ch case   17:*/		regs.LR = 0x821E1A70; return 0x82178000;
		/* 821E1A6Ch case   17:*/		return 0x821E1A70;
		  /* 821E1A70h */ case   18:  		/* mr R11, R3 */
		/* 821E1A70h case   18:*/		regs.R11 = regs.R3;
		/* 821E1A70h case   18:*/		return 0x821E1A74;
		  /* 821E1A74h */ case   19:  		/* lwz R10, <#[R26]> */
		/* 821E1A74h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 821E1A74h case   19:*/		return 0x821E1A78;
		  /* 821E1A78h */ case   20:  		/* mr R3, R31 */
		/* 821E1A78h case   20:*/		regs.R3 = regs.R31;
		/* 821E1A78h case   20:*/		return 0x821E1A7C;
		  /* 821E1A7Ch */ case   21:  		/* mr R4, R11 */
		/* 821E1A7Ch case   21:*/		regs.R4 = regs.R11;
		/* 821E1A7Ch case   21:*/		return 0x821E1A80;
		  /* 821E1A80h */ case   22:  		/* lwz R9, <#[R11]> */
		/* 821E1A80h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1A80h case   22:*/		return 0x821E1A84;
		  /* 821E1A84h */ case   23:  		/* rlwimi R10, R9, 0, 27, 18 */
		/* 821E1A84h case   23:*/		cpu::op::rlwimi<0,0,27,18>(regs,&regs.R10,regs.R9);
		/* 821E1A84h case   23:*/		return 0x821E1A88;
		  /* 821E1A88h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821E1A88h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1A88h case   24:*/		return 0x821E1A8C;
		  /* 821E1A8Ch */ case   25:  		/* bl -432324 */
		/* 821E1A8Ch case   25:*/		regs.LR = 0x821E1A90; return 0x821781C8;
		/* 821E1A8Ch case   25:*/		return 0x821E1A90;
	}
	return 0x821E1A90;
} // Block from 821E1A28h-821E1A90h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821E1A90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1A90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1A90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1A90);
		  /* 821E1A90h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821E1A90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E1A90h case    0:*/		return 0x821E1A94;
		  /* 821E1A94h */ case    1:  		/* li R10, 57 */
		/* 821E1A94h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x39);
		/* 821E1A94h case    1:*/		return 0x821E1A98;
		  /* 821E1A98h */ case    2:  		/* rlwimi R11, R10, 7, 19, 26 */
		/* 821E1A98h case    2:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R10);
		/* 821E1A98h case    2:*/		return 0x821E1A9C;
		  /* 821E1A9Ch */ case    3:  		/* stw R11, <#[R26]> */
		/* 821E1A9Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E1A9Ch case    3:*/		return 0x821E1AA0;
		  /* 821E1AA0h */ case    4:  		/* lwz R11, <#[R26 + 12]> */
		/* 821E1AA0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000000C) );
		/* 821E1AA0h case    4:*/		return 0x821E1AA4;
		  /* 821E1AA4h */ case    5:  		/* addi R11, R11, 4 */
		/* 821E1AA4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E1AA4h case    5:*/		return 0x821E1AA8;
		  /* 821E1AA8h */ case    6:  		/* lwz R10, <#[R11]> */
		/* 821E1AA8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1AA8h case    6:*/		return 0x821E1AAC;
		  /* 821E1AACh */ case    7:  		/* b 12 */
		/* 821E1AACh case    7:*/		return 0x821E1AB8;
		/* 821E1AACh case    7:*/		return 0x821E1AB0;
		  /* 821E1AB0h */ case    8:  		/* addi R11, R10, 8 */
		/* 821E1AB0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821E1AB0h case    8:*/		return 0x821E1AB4;
		  /* 821E1AB4h */ case    9:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E1AB4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E1AB4h case    9:*/		return 0x821E1AB8;
	}
	return 0x821E1AB8;
} // Block from 821E1A90h-821E1AB8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E1AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1AB8);
		  /* 821E1AB8h */ case    0:  		/* cmplw CR6, R10, R26 */
		/* 821E1AB8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 821E1AB8h case    0:*/		return 0x821E1ABC;
		  /* 821E1ABCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821E1ABCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E1AB0;  }
		/* 821E1ABCh case    1:*/		return 0x821E1AC0;
		  /* 821E1AC0h */ case    2:  		/* lwz R10, <#[R26 + 8]> */
		/* 821E1AC0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821E1AC0h case    2:*/		return 0x821E1AC4;
		  /* 821E1AC4h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821E1AC4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E1AC4h case    3:*/		return 0x821E1AC8;
		  /* 821E1AC8h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E1AC8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E1AC8h case    4:*/		return 0x821E1ACC;
		  /* 821E1ACCh */ case    5:  		/* stw R11, <#[R26 + 8]> */
		/* 821E1ACCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821E1ACCh case    5:*/		return 0x821E1AD0;
		  /* 821E1AD0h */ case    6:  		/* stw R26, <#[R31 + 4]> */
		/* 821E1AD0h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000004) );
		/* 821E1AD0h case    6:*/		return 0x821E1AD4;
		  /* 821E1AD4h */ case    7:  		/* stw R31, <#[R26 + 12]> */
		/* 821E1AD4h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R26 + 0x0000000C) );
		/* 821E1AD4h case    7:*/		return 0x821E1AD8;
		  /* 821E1AD8h */ case    8:  		/* lwz R4, <#[R21]> */
		/* 821E1AD8h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000000) );
		/* 821E1AD8h case    8:*/		return 0x821E1ADC;
		  /* 821E1ADCh */ case    9:  		/* cmplwi CR6, R4, 0 */
		/* 821E1ADCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821E1ADCh case    9:*/		return 0x821E1AE0;
		  /* 821E1AE0h */ case   10:  		/* bc 12, CR6_EQ, -656 */
		/* 821E1AE0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821E1850;  }
		/* 821E1AE0h case   10:*/		return 0x821E1AE4;
		  /* 821E1AE4h */ case   11:  		/* lwz R11, <#[R4 + 12]> */
		/* 821E1AE4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821E1AE4h case   11:*/		return 0x821E1AE8;
		  /* 821E1AE8h */ case   12:  		/* cmplw CR6, R11, R22 */
		/* 821E1AE8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821E1AE8h case   12:*/		return 0x821E1AEC;
		  /* 821E1AECh */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 821E1AECh case   13:*/		if ( regs.CR[6].eq ) { return 0x821E1AF8;  }
		/* 821E1AECh case   13:*/		return 0x821E1AF0;
		  /* 821E1AF0h */ case   14:  		/* lwz R4, <#[R4 + 4]> */
		/* 821E1AF0h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000004) );
		/* 821E1AF0h case   14:*/		return 0x821E1AF4;
		  /* 821E1AF4h */ case   15:  		/* b -24 */
		/* 821E1AF4h case   15:*/		return 0x821E1ADC;
		/* 821E1AF4h case   15:*/		return 0x821E1AF8;
	}
	return 0x821E1AF8;
} // Block from 821E1AB8h-821E1AF8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E1AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1AF8);
		  /* 821E1AF8h */ case    0:  		/* mr R3, R21 */
		/* 821E1AF8h case    0:*/		regs.R3 = regs.R21;
		/* 821E1AF8h case    0:*/		return 0x821E1AFC;
		  /* 821E1AFCh */ case    1:  		/* lwz R5, <#[R1 + 804]> */
		/* 821E1AFCh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000324) );
		/* 821E1AFCh case    1:*/		return 0x821E1B00;
		  /* 821E1B00h */ case    2:  		/* bl -430576 */
		/* 821E1B00h case    2:*/		regs.LR = 0x821E1B04; return 0x82178910;
		/* 821E1B00h case    2:*/		return 0x821E1B04;
		  /* 821E1B04h */ case    3:  		/* b -692 */
		/* 821E1B04h case    3:*/		return 0x821E1850;
		/* 821E1B04h case    3:*/		return 0x821E1B08;
	}
	return 0x821E1B08;
} // Block from 821E1AF8h-821E1B08h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E1B08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1B08);
		  /* 821E1B08h */ case    0:  		/* rlwinm R11, R21, 0, 0, 30 */
		/* 821E1B08h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R21);
		/* 821E1B08h case    0:*/		return 0x821E1B0C;
		  /* 821E1B0Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E1B0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E1B0Ch case    1:*/		return 0x821E1B10;
		  /* 821E1B10h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1B10h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1B10h case    2:*/		return 0x821E1B14;
		  /* 821E1B14h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E1B14h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E1B24;  }
		/* 821E1B14h case    3:*/		return 0x821E1B18;
		  /* 821E1B18h */ case    4:  		/* mr R21, R11 */
		/* 821E1B18h case    4:*/		regs.R21 = regs.R11;
		/* 821E1B18h case    4:*/		return 0x821E1B1C;
		  /* 821E1B1Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E1B1Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1B1Ch case    5:*/		return 0x821E1B20;
		  /* 821E1B20h */ case    6:  		/* bc 4, CR6_EQ, -736 */
		/* 821E1B20h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E1840;  }
		/* 821E1B20h case    6:*/		return 0x821E1B24;
	}
	return 0x821E1B24;
} // Block from 821E1B08h-821E1B24h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E1B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1B24);
		  /* 821E1B24h */ case    0:  		/* rlwinm R11, R20, 0, 0, 30 */
		/* 821E1B24h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R20);
		/* 821E1B24h case    0:*/		return 0x821E1B28;
		  /* 821E1B28h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E1B28h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E1B28h case    1:*/		return 0x821E1B2C;
		  /* 821E1B2Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1B2Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1B2Ch case    2:*/		return 0x821E1B30;
		  /* 821E1B30h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E1B30h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E1B40;  }
		/* 821E1B30h case    3:*/		return 0x821E1B34;
		  /* 821E1B34h */ case    4:  		/* mr R20, R11 */
		/* 821E1B34h case    4:*/		regs.R20 = regs.R11;
		/* 821E1B34h case    4:*/		return 0x821E1B38;
		  /* 821E1B38h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E1B38h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1B38h case    5:*/		return 0x821E1B3C;
		  /* 821E1B3Ch */ case    6:  		/* bc 4, CR6_EQ, -916 */
		/* 821E1B3Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E17A8;  }
		/* 821E1B3Ch case    6:*/		return 0x821E1B40;
	}
	return 0x821E1B40;
} // Block from 821E1B24h-821E1B40h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E1B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1B40);
		  /* 821E1B40h */ case    0:  		/* lwz R21, <#[R1 + 144]> */
		/* 821E1B40h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x00000090) );
		/* 821E1B40h case    0:*/		return 0x821E1B44;
	}
	return 0x821E1B44;
} // Block from 821E1B40h-821E1B44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E1B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1B44);
		  /* 821E1B44h */ case    0:  		/* li R11, 0 */
		/* 821E1B44h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E1B44h case    0:*/		return 0x821E1B48;
		  /* 821E1B48h */ case    1:  		/* lwz R29, <#[R1 + 804]> */
		/* 821E1B48h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000324) );
		/* 821E1B48h case    1:*/		return 0x821E1B4C;
		  /* 821E1B4Ch */ case    2:  		/* li R6, 0 */
		/* 821E1B4Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E1B4Ch case    2:*/		return 0x821E1B50;
		  /* 821E1B50h */ case    3:  		/* stb R11, <#[R1 + 130]> */
		/* 821E1B50h case    3:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000082) );
		/* 821E1B50h case    3:*/		return 0x821E1B54;
		  /* 821E1B54h */ case    4:  		/* addi R5, R1, 130 */
		/* 821E1B54h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x82);
		/* 821E1B54h case    4:*/		return 0x821E1B58;
		  /* 821E1B58h */ case    5:  		/* mr R4, R17 */
		/* 821E1B58h case    5:*/		regs.R4 = regs.R17;
		/* 821E1B58h case    5:*/		return 0x821E1B5C;
		  /* 821E1B5Ch */ case    6:  		/* mr R3, R29 */
		/* 821E1B5Ch case    6:*/		regs.R3 = regs.R29;
		/* 821E1B5Ch case    6:*/		return 0x821E1B60;
		  /* 821E1B60h */ case    7:  		/* bl -114472 */
		/* 821E1B60h case    7:*/		regs.LR = 0x821E1B64; return 0x821C5C38;
		/* 821E1B60h case    7:*/		return 0x821E1B64;
		  /* 821E1B64h */ case    8:  		/* lwz R30, <#[R1 + 136]> */
		/* 821E1B64h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000088) );
		/* 821E1B64h case    8:*/		return 0x821E1B68;
		  /* 821E1B68h */ case    9:  		/* lwz R11, <#[R30 + 12]> */
		/* 821E1B68h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E1B68h case    9:*/		return 0x821E1B6C;
		  /* 821E1B6Ch */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821E1B6Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1B6Ch case   10:*/		return 0x821E1B70;
		  /* 821E1B70h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 821E1B70h case   11:*/		if ( regs.CR[6].eq ) { return 0x821E1B88;  }
		/* 821E1B70h case   11:*/		return 0x821E1B74;
		  /* 821E1B74h */ case   12:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E1B74h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E1B74h case   12:*/		return 0x821E1B78;
		  /* 821E1B78h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E1B78h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E1B78h case   13:*/		return 0x821E1B7C;
		  /* 821E1B7Ch */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821E1B7Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1B7Ch case   14:*/		return 0x821E1B80;
		  /* 821E1B80h */ case   15:  		/* li R11, 1 */
		/* 821E1B80h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E1B80h case   15:*/		return 0x821E1B84;
		  /* 821E1B84h */ case   16:  		/* bc 4, CR6_EQ, 8 */
		/* 821E1B84h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821E1B8C;  }
		/* 821E1B84h case   16:*/		return 0x821E1B88;
	}
	return 0x821E1B88;
} // Block from 821E1B44h-821E1B88h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E1B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1B88);
		  /* 821E1B88h */ case    0:  		/* li R11, 0 */
		/* 821E1B88h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E1B88h case    0:*/		return 0x821E1B8C;
	}
	return 0x821E1B8C;
} // Block from 821E1B88h-821E1B8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E1B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1B8C);
		  /* 821E1B8Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E1B8Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E1B8Ch case    0:*/		return 0x821E1B90;
		  /* 821E1B90h */ case    1:  		/* bc 4, CR0_EQ, 156 */
		/* 821E1B90h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E1C2C;  }
		/* 821E1B90h case    1:*/		return 0x821E1B94;
		  /* 821E1B94h */ case    2:  		/* lwz R5, <#[R15 + 80]> */
		/* 821E1B94h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R15 + 0x00000050) );
		/* 821E1B94h case    2:*/		return 0x821E1B98;
		  /* 821E1B98h */ case    3:  		/* lwz R11, <#[R5 + 8]> */
		/* 821E1B98h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821E1B98h case    3:*/		return 0x821E1B9C;
		  /* 821E1B9Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E1B9Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1B9Ch case    4:*/		return 0x821E1BA0;
		  /* 821E1BA0h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 821E1BA0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E1BB8;  }
		/* 821E1BA0h case    5:*/		return 0x821E1BA4;
		  /* 821E1BA4h */ case    6:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E1BA4h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E1BA4h case    6:*/		return 0x821E1BA8;
		  /* 821E1BA8h */ case    7:  		/* lwz R11, <#[R11 + 12]> */
		/* 821E1BA8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E1BA8h case    7:*/		return 0x821E1BAC;
		  /* 821E1BACh */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821E1BACh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1BACh case    8:*/		return 0x821E1BB0;
		  /* 821E1BB0h */ case    9:  		/* li R11, 1 */
		/* 821E1BB0h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E1BB0h case    9:*/		return 0x821E1BB4;
		  /* 821E1BB4h */ case   10:  		/* bc 4, CR6_EQ, 8 */
		/* 821E1BB4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821E1BBC;  }
		/* 821E1BB4h case   10:*/		return 0x821E1BB8;
	}
	return 0x821E1BB8;
} // Block from 821E1B8Ch-821E1BB8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E1BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1BB8);
		  /* 821E1BB8h */ case    0:  		/* li R11, 0 */
		/* 821E1BB8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E1BB8h case    0:*/		return 0x821E1BBC;
	}
	return 0x821E1BBC;
} // Block from 821E1BB8h-821E1BBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E1BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1BBC);
		  /* 821E1BBCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E1BBCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E1BBCh case    0:*/		return 0x821E1BC0;
		  /* 821E1BC0h */ case    1:  		/* bc 4, CR0_EQ, 108 */
		/* 821E1BC0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E1C2C;  }
		/* 821E1BC0h case    1:*/		return 0x821E1BC4;
		  /* 821E1BC4h */ case    2:  		/* li R6, 1 */
		/* 821E1BC4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E1BC4h case    2:*/		return 0x821E1BC8;
		  /* 821E1BC8h */ case    3:  		/* mr R4, R30 */
		/* 821E1BC8h case    3:*/		regs.R4 = regs.R30;
		/* 821E1BC8h case    3:*/		return 0x821E1BCC;
		  /* 821E1BCCh */ case    4:  		/* mr R3, R29 */
		/* 821E1BCCh case    4:*/		regs.R3 = regs.R29;
		/* 821E1BCCh case    4:*/		return 0x821E1BD0;
		  /* 821E1BD0h */ case    5:  		/* bl -87504 */
		/* 821E1BD0h case    5:*/		regs.LR = 0x821E1BD4; return 0x821CC600;
		/* 821E1BD0h case    5:*/		return 0x821E1BD4;
		  /* 821E1BD4h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E1BD4h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E1BD4h case    6:*/		return 0x821E1BD8;
		  /* 821E1BD8h */ case    7:  		/* bc 12, CR0_EQ, 84 */
		/* 821E1BD8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E1C2C;  }
		/* 821E1BD8h case    7:*/		return 0x821E1BDC;
		  /* 821E1BDCh */ case    8:  		/* lwz R11, <#[R21 + 12]> */
		/* 821E1BDCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821E1BDCh case    8:*/		return 0x821E1BE0;
		  /* 821E1BE0h */ case    9:  		/* li R31, 1 */
		/* 821E1BE0h case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821E1BE0h case    9:*/		return 0x821E1BE4;
		  /* 821E1BE4h */ case   10:  		/* lwz R11, <#[R11 + 48]> */
		/* 821E1BE4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821E1BE4h case   10:*/		return 0x821E1BE8;
		  /* 821E1BE8h */ case   11:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821E1BE8h case   11:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821E1BE8h case   11:*/		return 0x821E1BEC;
		  /* 821E1BECh */ case   12:  		/* bc 12, CR0_EQ, 68 */
		/* 821E1BECh case   12:*/		if ( regs.CR[0].eq ) { return 0x821E1C30;  }
		/* 821E1BECh case   12:*/		return 0x821E1BF0;
		  /* 821E1BF0h */ case   13:  		/* stw R30, <#[R21 + 8]> */
		/* 821E1BF0h case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R21 + 0x00000008) );
		/* 821E1BF0h case   13:*/		return 0x821E1BF4;
		  /* 821E1BF4h */ case   14:  		/* stw R30, <#[R21 + 12]> */
		/* 821E1BF4h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R21 + 0x0000000C) );
		/* 821E1BF4h case   14:*/		return 0x821E1BF8;
		  /* 821E1BF8h */ case   15:  		/* lwz R11, <#[R21 + 16]> */
		/* 821E1BF8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821E1BF8h case   15:*/		return 0x821E1BFC;
		  /* 821E1BFCh */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821E1BFCh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1BFCh case   16:*/		return 0x821E1C00;
		  /* 821E1C00h */ case   17:  		/* bc 12, CR6_EQ, 48 */
		/* 821E1C00h case   17:*/		if ( regs.CR[6].eq ) { return 0x821E1C30;  }
		/* 821E1C00h case   17:*/		return 0x821E1C04;
		  /* 821E1C04h */ case   18:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E1C04h case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E1C04h case   18:*/		return 0x821E1C08;
		  /* 821E1C08h */ case   19:  		/* b 16 */
		/* 821E1C08h case   19:*/		return 0x821E1C18;
		/* 821E1C08h case   19:*/		return 0x821E1C0C;
		  /* 821E1C0Ch */ case   20:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E1C0Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E1C0Ch case   20:*/		return 0x821E1C10;
		  /* 821E1C10h */ case   21:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821E1C10h case   21:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821E1C10h case   21:*/		return 0x821E1C14;
		  /* 821E1C14h */ case   22:  		/* bc 12, CR0_EQ, 16 */
		/* 821E1C14h case   22:*/		if ( regs.CR[0].eq ) { return 0x821E1C24;  }
		/* 821E1C14h case   22:*/		return 0x821E1C18;
	}
	return 0x821E1C18;
} // Block from 821E1BBCh-821E1C18h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821E1C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1C18);
		  /* 821E1C18h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821E1C18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821E1C18h case    0:*/		return 0x821E1C1C;
		  /* 821E1C1Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E1C1Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1C1Ch case    1:*/		return 0x821E1C20;
		  /* 821E1C20h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821E1C20h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E1C0C;  }
		/* 821E1C20h case    2:*/		return 0x821E1C24;
	}
	return 0x821E1C24;
} // Block from 821E1C18h-821E1C24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E1C24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1C24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1C24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1C24);
		  /* 821E1C24h */ case    0:  		/* stw R11, <#[R21 + 16]> */
		/* 821E1C24h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821E1C24h case    0:*/		return 0x821E1C28;
		  /* 821E1C28h */ case    1:  		/* b 8 */
		/* 821E1C28h case    1:*/		return 0x821E1C30;
		/* 821E1C28h case    1:*/		return 0x821E1C2C;
	}
	return 0x821E1C2C;
} // Block from 821E1C24h-821E1C2Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E1C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1C2C);
		  /* 821E1C2Ch */ case    0:  		/* lbz R31, <#[R1 + 130]> */
		/* 821E1C2Ch case    0:*/		cpu::mem::load8z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000082) );
		/* 821E1C2Ch case    0:*/		return 0x821E1C30;
	}
	return 0x821E1C30;
} // Block from 821E1C2Ch-821E1C30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E1C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1C30);
		  /* 821E1C30h */ case    0:  		/* lwz R10, <#[R15 + 8]> */
		/* 821E1C30h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000008) );
		/* 821E1C30h case    0:*/		return 0x821E1C34;
		  /* 821E1C34h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821E1C34h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E1C34h case    1:*/		return 0x821E1C38;
		  /* 821E1C38h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 821E1C38h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E1C50;  }
		/* 821E1C38h case    2:*/		return 0x821E1C3C;
		  /* 821E1C3Ch */ case    3:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 821E1C3Ch case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 821E1C3Ch case    3:*/		return 0x821E1C40;
		  /* 821E1C40h */ case    4:  		/* lwz R11, <#[R11 + 12]> */
		/* 821E1C40h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E1C40h case    4:*/		return 0x821E1C44;
		  /* 821E1C44h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E1C44h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1C44h case    5:*/		return 0x821E1C48;
		  /* 821E1C48h */ case    6:  		/* li R11, 1 */
		/* 821E1C48h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E1C48h case    6:*/		return 0x821E1C4C;
		  /* 821E1C4Ch */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 821E1C4Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821E1C54;  }
		/* 821E1C4Ch case    7:*/		return 0x821E1C50;
	}
	return 0x821E1C50;
} // Block from 821E1C30h-821E1C50h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E1C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1C50);
		  /* 821E1C50h */ case    0:  		/* li R11, 0 */
		/* 821E1C50h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E1C50h case    0:*/		return 0x821E1C54;
	}
	return 0x821E1C54;
} // Block from 821E1C50h-821E1C54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E1C54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1C54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1C54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1C54);
		  /* 821E1C54h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E1C54h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E1C54h case    0:*/		return 0x821E1C58;
		  /* 821E1C58h */ case    1:  		/* bc 4, CR0_EQ, 100 */
		/* 821E1C58h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E1CBC;  }
		/* 821E1C58h case    1:*/		return 0x821E1C5C;
		  /* 821E1C5Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821E1C5Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E1C5Ch case    2:*/		return 0x821E1C60;
		  /* 821E1C60h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 821E1C60h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821E1C6C;  }
		/* 821E1C60h case    3:*/		return 0x821E1C64;
		  /* 821E1C64h */ case    4:  		/* li R4, 0 */
		/* 821E1C64h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E1C64h case    4:*/		return 0x821E1C68;
		  /* 821E1C68h */ case    5:  		/* b 12 */
		/* 821E1C68h case    5:*/		return 0x821E1C74;
		/* 821E1C68h case    5:*/		return 0x821E1C6C;
	}
	return 0x821E1C6C;
} // Block from 821E1C54h-821E1C6Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E1C6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1C6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1C6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1C6C);
		  /* 821E1C6Ch */ case    0:  		/* lwz R11, <#[R15 + 8]> */
		/* 821E1C6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 821E1C6Ch case    0:*/		return 0x821E1C70;
		  /* 821E1C70h */ case    1:  		/* lwz R4, <#[R11 + 4]> */
		/* 821E1C70h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 821E1C70h case    1:*/		return 0x821E1C74;
	}
	return 0x821E1C74;
} // Block from 821E1C6Ch-821E1C74h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E1C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1C74);
		  /* 821E1C74h */ case    0:  		/* lwz R11, <#[R4 + 12]> */
		/* 821E1C74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821E1C74h case    0:*/		return 0x821E1C78;
		  /* 821E1C78h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E1C78h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1C78h case    1:*/		return 0x821E1C7C;
		  /* 821E1C7Ch */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 821E1C7Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821E1C94;  }
		/* 821E1C7Ch case    2:*/		return 0x821E1C80;
		  /* 821E1C80h */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E1C80h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E1C80h case    3:*/		return 0x821E1C84;
		  /* 821E1C84h */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E1C84h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E1C84h case    4:*/		return 0x821E1C88;
		  /* 821E1C88h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E1C88h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1C88h case    5:*/		return 0x821E1C8C;
		  /* 821E1C8Ch */ case    6:  		/* li R11, 1 */
		/* 821E1C8Ch case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E1C8Ch case    6:*/		return 0x821E1C90;
		  /* 821E1C90h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 821E1C90h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821E1C98;  }
		/* 821E1C90h case    7:*/		return 0x821E1C94;
	}
	return 0x821E1C94;
} // Block from 821E1C74h-821E1C94h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E1C94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1C94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1C94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1C94);
		  /* 821E1C94h */ case    0:  		/* li R11, 0 */
		/* 821E1C94h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E1C94h case    0:*/		return 0x821E1C98;
	}
	return 0x821E1C98;
} // Block from 821E1C94h-821E1C98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E1C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1C98);
		  /* 821E1C98h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E1C98h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E1C98h case    0:*/		return 0x821E1C9C;
		  /* 821E1C9Ch */ case    1:  		/* bc 4, CR0_EQ, 32 */
		/* 821E1C9Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E1CBC;  }
		/* 821E1C9Ch case    1:*/		return 0x821E1CA0;
		  /* 821E1CA0h */ case    2:  		/* li R6, 1 */
		/* 821E1CA0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E1CA0h case    2:*/		return 0x821E1CA4;
		  /* 821E1CA4h */ case    3:  		/* mr R5, R15 */
		/* 821E1CA4h case    3:*/		regs.R5 = regs.R15;
		/* 821E1CA4h case    3:*/		return 0x821E1CA8;
		  /* 821E1CA8h */ case    4:  		/* mr R3, R29 */
		/* 821E1CA8h case    4:*/		regs.R3 = regs.R29;
		/* 821E1CA8h case    4:*/		return 0x821E1CAC;
		  /* 821E1CACh */ case    5:  		/* bl -87724 */
		/* 821E1CACh case    5:*/		regs.LR = 0x821E1CB0; return 0x821CC600;
		/* 821E1CACh case    5:*/		return 0x821E1CB0;
		  /* 821E1CB0h */ case    6:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821E1CB0h case    6:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E1CB0h case    6:*/		return 0x821E1CB4;
		  /* 821E1CB4h */ case    7:  		/* rlwinm R10, R31, 0, 24, 31 */
		/* 821E1CB4h case    7:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R31);
		/* 821E1CB4h case    7:*/		return 0x821E1CB8;
		  /* 821E1CB8h */ case    8:  		/* or R31, R11, R10 */
		/* 821E1CB8h case    8:*/		cpu::op::or<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 821E1CB8h case    8:*/		return 0x821E1CBC;
	}
	return 0x821E1CBC;
} // Block from 821E1C98h-821E1CBCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E1CBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1CBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1CBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1CBC);
		  /* 821E1CBCh */ case    0:  		/* rlwinm. R11, R31, 0, 24, 31 */
		/* 821E1CBCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R31);
		/* 821E1CBCh case    0:*/		return 0x821E1CC0;
		  /* 821E1CC0h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821E1CC0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E1CCC;  }
		/* 821E1CC0h case    1:*/		return 0x821E1CC4;
		  /* 821E1CC4h */ case    2:  		/* mr R3, R29 */
		/* 821E1CC4h case    2:*/		regs.R3 = regs.R29;
		/* 821E1CC4h case    2:*/		return 0x821E1CC8;
		  /* 821E1CC8h */ case    3:  		/* bl 38488 */
		/* 821E1CC8h case    3:*/		regs.LR = 0x821E1CCC; return 0x821EB320;
		/* 821E1CC8h case    3:*/		return 0x821E1CCC;
	}
	return 0x821E1CCC;
} // Block from 821E1CBCh-821E1CCCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E1CCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1CCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1CCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1CCC);
		  /* 821E1CCCh */ case    0:  		/* li R11, 1 */
		/* 821E1CCCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E1CCCh case    0:*/		return 0x821E1CD0;
		  /* 821E1CD0h */ case    1:  		/* lwz R20, <#[R1 + 804]> */
		/* 821E1CD0h case    1:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x00000324) );
		/* 821E1CD0h case    1:*/		return 0x821E1CD4;
		  /* 821E1CD4h */ case    2:  		/* li R19, 0 */
		/* 821E1CD4h case    2:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 821E1CD4h case    2:*/		return 0x821E1CD8;
		  /* 821E1CD8h */ case    3:  		/* stb R11, <#[R1 + 129]> */
		/* 821E1CD8h case    3:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000081) );
		/* 821E1CD8h case    3:*/		return 0x821E1CDC;
	}
	return 0x821E1CDC;
} // Block from 821E1CCCh-821E1CDCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E1CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1CDC);
		  /* 821E1CDCh */ case    0:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E1CDCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E1CDCh case    0:*/		return 0x821E1CE0;
		  /* 821E1CE0h */ case    1:  		/* addi R21, R21, 68 */
		/* 821E1CE0h case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x44);
		/* 821E1CE0h case    1:*/		return 0x821E1CE4;
		  /* 821E1CE4h */ case    2:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E1CE4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E1CE4h case    2:*/		return 0x821E1CE8;
		  /* 821E1CE8h */ case    3:  		/* mulli R10, R10, 68 */
		/* 821E1CE8h case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E1CE8h case    3:*/		return 0x821E1CEC;
		  /* 821E1CECh */ case    4:  		/* add R11, R10, R11 */
		/* 821E1CECh case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E1CECh case    4:*/		return 0x821E1CF0;
		  /* 821E1CF0h */ case    5:  		/* cmplw CR6, R21, R11 */
		/* 821E1CF0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 821E1CF0h case    5:*/		return 0x821E1CF4;
	}
	return 0x821E1CF4;
} // Block from 821E1CDCh-821E1CF4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E1CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1CF4);
		  /* 821E1CF4h */ case    0:  		/* stw R21, <#[R1 + 144]> */
		/* 821E1CF4h case    0:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000090) );
		/* 821E1CF4h case    0:*/		return 0x821E1CF8;
		  /* 821E1CF8h */ case    1:  		/* bc 12, CR6_LT, -4288 */
		/* 821E1CF8h case    1:*/		if ( regs.CR[6].lt ) { return 0x821E0C38;  }
		/* 821E1CF8h case    1:*/		return 0x821E1CFC;
		  /* 821E1CFCh */ case    2:  		/* lbz R11, <#[R1 + 129]> */
		/* 821E1CFCh case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000081) );
		/* 821E1CFCh case    2:*/		return 0x821E1D00;
		  /* 821E1D00h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821E1D00h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E1D00h case    3:*/		return 0x821E1D04;
		  /* 821E1D04h */ case    4:  		/* bc 12, CR0_EQ, 36 */
		/* 821E1D04h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E1D28;  }
		/* 821E1D04h case    4:*/		return 0x821E1D08;
		  /* 821E1D08h */ case    5:  		/* mr R3, R20 */
		/* 821E1D08h case    5:*/		regs.R3 = regs.R20;
		/* 821E1D08h case    5:*/		return 0x821E1D0C;
		  /* 821E1D0Ch */ case    6:  		/* bl -97236 */
		/* 821E1D0Ch case    6:*/		regs.LR = 0x821E1D10; return 0x821CA138;
		/* 821E1D0Ch case    6:*/		return 0x821E1D10;
		  /* 821E1D10h */ case    7:  		/* li R4, 1 */
		/* 821E1D10h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E1D10h case    7:*/		return 0x821E1D14;
		  /* 821E1D14h */ case    8:  		/* mr R3, R20 */
		/* 821E1D14h case    8:*/		regs.R3 = regs.R20;
		/* 821E1D14h case    8:*/		return 0x821E1D18;
		  /* 821E1D18h */ case    9:  		/* bl -33952 */
		/* 821E1D18h case    9:*/		regs.LR = 0x821E1D1C; return 0x821D9878;
		/* 821E1D18h case    9:*/		return 0x821E1D1C;
		  /* 821E1D1Ch */ case   10:  		/* mr R3, R20 */
		/* 821E1D1Ch case   10:*/		regs.R3 = regs.R20;
		/* 821E1D1Ch case   10:*/		return 0x821E1D20;
		  /* 821E1D20h */ case   11:  		/* bl -24296 */
		/* 821E1D20h case   11:*/		regs.LR = 0x821E1D24; return 0x821DBE38;
		/* 821E1D20h case   11:*/		return 0x821E1D24;
		  /* 821E1D24h */ case   12:  		/* b -7548 */
		/* 821E1D24h case   12:*/		return 0x821DFFA8;
		/* 821E1D24h case   12:*/		return 0x821E1D28;
	}
	return 0x821E1D28;
} // Block from 821E1CF4h-821E1D28h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E1D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1D28);
		  /* 821E1D28h */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E1D28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E1D28h case    0:*/		return 0x821E1D2C;
		  /* 821E1D2Ch */ case    1:  		/* mr R8, R19 */
		/* 821E1D2Ch case    1:*/		regs.R8 = regs.R19;
		/* 821E1D2Ch case    1:*/		return 0x821E1D30;
		  /* 821E1D30h */ case    2:  		/* stw R19, <#[R1 + 144]> */
		/* 821E1D30h case    2:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000090) );
		/* 821E1D30h case    2:*/		return 0x821E1D34;
		  /* 821E1D34h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1D34h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1D34h case    3:*/		return 0x821E1D38;
		  /* 821E1D38h */ case    4:  		/* bc 4, CR0_EQ, 144 */
		/* 821E1D38h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E1DC8;  }
		/* 821E1D38h case    4:*/		return 0x821E1D3C;
		  /* 821E1D3Ch */ case    5:  		/* mr R9, R11 */
		/* 821E1D3Ch case    5:*/		regs.R9 = regs.R11;
		/* 821E1D3Ch case    5:*/		return 0x821E1D40;
		  /* 821E1D40h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821E1D40h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E1D40h case    6:*/		return 0x821E1D44;
		  /* 821E1D44h */ case    7:  		/* bc 12, CR0_EQ, 132 */
		/* 821E1D44h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E1DC8;  }
		/* 821E1D44h case    7:*/		return 0x821E1D48;
		  /* 821E1D48h */ case    8:  		/* lwz R11, <#[R9 + 28]> */
		/* 821E1D48h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000001C) );
		/* 821E1D48h case    8:*/		return 0x821E1D4C;
		  /* 821E1D4Ch */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1D4Ch case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1D4Ch case    9:*/		return 0x821E1D50;
		  /* 821E1D50h */ case   10:  		/* bc 4, CR0_EQ, 92 */
		/* 821E1D50h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821E1DAC;  }
		/* 821E1D50h case   10:*/		return 0x821E1D54;
		  /* 821E1D54h */ case   11:  		/* mr R10, R11 */
		/* 821E1D54h case   11:*/		regs.R10 = regs.R11;
		/* 821E1D54h case   11:*/		return 0x821E1D58;
		  /* 821E1D58h */ case   12:  		/* cmplwi CR0, R11, 0 */
		/* 821E1D58h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E1D58h case   12:*/		return 0x821E1D5C;
		  /* 821E1D5Ch */ case   13:  		/* bc 12, CR0_EQ, 80 */
		/* 821E1D5Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821E1DAC;  }
		/* 821E1D5Ch case   13:*/		return 0x821E1D60;
		  /* 821E1D60h */ case   14:  		/* lwz R11, <#[R10 + 8]> */
		/* 821E1D60h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821E1D60h case   14:*/		return 0x821E1D64;
		  /* 821E1D64h */ case   15:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821E1D64h case   15:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821E1D64h case   15:*/		return 0x821E1D68;
		  /* 821E1D68h */ case   16:  		/* cmplwi CR6, R11, 1 */
		/* 821E1D68h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821E1D68h case   16:*/		return 0x821E1D6C;
		  /* 821E1D6Ch */ case   17:  		/* bc 12, CR6_LT, 16 */
		/* 821E1D6Ch case   17:*/		if ( regs.CR[6].lt ) { return 0x821E1D7C;  }
		/* 821E1D6Ch case   17:*/		return 0x821E1D70;
		  /* 821E1D70h */ case   18:  		/* cmplwi CR6, R11, 102 */
		/* 821E1D70h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821E1D70h case   18:*/		return 0x821E1D74;
		  /* 821E1D74h */ case   19:  		/* li R11, 1 */
		/* 821E1D74h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E1D74h case   19:*/		return 0x821E1D78;
		  /* 821E1D78h */ case   20:  		/* bc 4, CR6_GT, 8 */
		/* 821E1D78h case   20:*/		if ( !regs.CR[6].gt ) { return 0x821E1D80;  }
		/* 821E1D78h case   20:*/		return 0x821E1D7C;
	}
	return 0x821E1D7C;
} // Block from 821E1D28h-821E1D7Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821E1D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1D7C);
		  /* 821E1D7Ch */ case    0:  		/* mr R11, R19 */
		/* 821E1D7Ch case    0:*/		regs.R11 = regs.R19;
		/* 821E1D7Ch case    0:*/		return 0x821E1D80;
	}
	return 0x821E1D80;
} // Block from 821E1D7Ch-821E1D80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E1D80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1D80);
		  /* 821E1D80h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E1D80h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E1D80h case    0:*/		return 0x821E1D84;
		  /* 821E1D84h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821E1D84h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E1D90;  }
		/* 821E1D84h case    1:*/		return 0x821E1D88;
		  /* 821E1D88h */ case    2:  		/* addi R8, R8, 1 */
		/* 821E1D88h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821E1D88h case    2:*/		return 0x821E1D8C;
		  /* 821E1D8Ch */ case    3:  		/* stw R8, <#[R1 + 144]> */
		/* 821E1D8Ch case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000090) );
		/* 821E1D8Ch case    3:*/		return 0x821E1D90;
	}
	return 0x821E1D90;
} // Block from 821E1D80h-821E1D90h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E1D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1D90);
		  /* 821E1D90h */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821E1D90h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821E1D90h case    0:*/		return 0x821E1D94;
		  /* 821E1D94h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E1D94h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E1D94h case    1:*/		return 0x821E1D98;
		  /* 821E1D98h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1D98h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1D98h case    2:*/		return 0x821E1D9C;
		  /* 821E1D9Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E1D9Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E1DAC;  }
		/* 821E1D9Ch case    3:*/		return 0x821E1DA0;
		  /* 821E1DA0h */ case    4:  		/* mr R10, R11 */
		/* 821E1DA0h case    4:*/		regs.R10 = regs.R11;
		/* 821E1DA0h case    4:*/		return 0x821E1DA4;
		  /* 821E1DA4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E1DA4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1DA4h case    5:*/		return 0x821E1DA8;
		  /* 821E1DA8h */ case    6:  		/* bc 4, CR6_EQ, -72 */
		/* 821E1DA8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E1D60;  }
		/* 821E1DA8h case    6:*/		return 0x821E1DAC;
	}
	return 0x821E1DAC;
} // Block from 821E1D90h-821E1DACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E1DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1DAC);
		  /* 821E1DACh */ case    0:  		/* rlwinm R11, R9, 0, 0, 30 */
		/* 821E1DACh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R9);
		/* 821E1DACh case    0:*/		return 0x821E1DB0;
		  /* 821E1DB0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E1DB0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E1DB0h case    1:*/		return 0x821E1DB4;
		  /* 821E1DB4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1DB4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1DB4h case    2:*/		return 0x821E1DB8;
		  /* 821E1DB8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E1DB8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E1DC8;  }
		/* 821E1DB8h case    3:*/		return 0x821E1DBC;
		  /* 821E1DBCh */ case    4:  		/* mr R9, R11 */
		/* 821E1DBCh case    4:*/		regs.R9 = regs.R11;
		/* 821E1DBCh case    4:*/		return 0x821E1DC0;
		  /* 821E1DC0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E1DC0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1DC0h case    5:*/		return 0x821E1DC4;
		  /* 821E1DC4h */ case    6:  		/* bc 4, CR6_EQ, -124 */
		/* 821E1DC4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E1D48;  }
		/* 821E1DC4h case    6:*/		return 0x821E1DC8;
	}
	return 0x821E1DC8;
} // Block from 821E1DACh-821E1DC8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E1DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1DC8);
		  /* 821E1DC8h */ case    0:  		/* lwz R11, <#[R20 + 40]> */
		/* 821E1DC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000028) );
		/* 821E1DC8h case    0:*/		return 0x821E1DCC;
		  /* 821E1DCCh */ case    1:  		/* li R5, 38 */
		/* 821E1DCCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821E1DCCh case    1:*/		return 0x821E1DD0;
		  /* 821E1DD0h */ case    2:  		/* li R4, 8 */
		/* 821E1DD0h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821E1DD0h case    2:*/		return 0x821E1DD4;
		  /* 821E1DD4h */ case    3:  		/* ori R11, R11, 4096 */
		/* 821E1DD4h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 821E1DD4h case    3:*/		return 0x821E1DD8;
		  /* 821E1DD8h */ case    4:  		/* mr R3, R20 */
		/* 821E1DD8h case    4:*/		regs.R3 = regs.R20;
		/* 821E1DD8h case    4:*/		return 0x821E1DDC;
		  /* 821E1DDCh */ case    5:  		/* stw R11, <#[R20 + 40]> */
		/* 821E1DDCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000028) );
		/* 821E1DDCh case    5:*/		return 0x821E1DE0;
		  /* 821E1DE0h */ case    6:  		/* bl -513264 */
		/* 821E1DE0h case    6:*/		regs.LR = 0x821E1DE4; return 0x821648F0;
		/* 821E1DE0h case    6:*/		return 0x821E1DE4;
		  /* 821E1DE4h */ case    7:  		/* addi R14, R3, 4 */
		/* 821E1DE4h case    7:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R3,0x4);
		/* 821E1DE4h case    7:*/		return 0x821E1DE8;
		  /* 821E1DE8h */ case    8:  		/* ori R11, R3, 1 */
		/* 821E1DE8h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821E1DE8h case    8:*/		return 0x821E1DEC;
		  /* 821E1DECh */ case    9:  		/* ori R10, R14, 1 */
		/* 821E1DECh case    9:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R14,0x1);
		/* 821E1DECh case    9:*/		return 0x821E1DF0;
		  /* 821E1DF0h */ case   10:  		/* stw R11, <#[R3 + 4]> */
		/* 821E1DF0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E1DF0h case   10:*/		return 0x821E1DF4;
		  /* 821E1DF4h */ case   11:  		/* mr R15, R3 */
		/* 821E1DF4h case   11:*/		regs.R15 = regs.R3;
		/* 821E1DF4h case   11:*/		return 0x821E1DF8;
		  /* 821E1DF8h */ case   12:  		/* stw R10, <#[R3]> */
		/* 821E1DF8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821E1DF8h case   12:*/		return 0x821E1DFC;
		  /* 821E1DFCh */ case   13:  		/* lwz R11, <#[R20 + 620]> */
		/* 821E1DFCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E1DFCh case   13:*/		return 0x821E1E00;
		  /* 821E1E00h */ case   14:  		/* mulli R10, R11, 68 */
		/* 821E1E00h case   14:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R11,0x44);
		/* 821E1E00h case   14:*/		return 0x821E1E04;
		  /* 821E1E04h */ case   15:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E1E04h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E1E04h case   15:*/		return 0x821E1E08;
		  /* 821E1E08h */ case   16:  		/* add R10, R10, R11 */
		/* 821E1E08h case   16:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E1E08h case   16:*/		return 0x821E1E0C;
		  /* 821E1E0Ch */ case   17:  		/* mr R19, R11 */
		/* 821E1E0Ch case   17:*/		regs.R19 = regs.R11;
		/* 821E1E0Ch case   17:*/		return 0x821E1E10;
		  /* 821E1E10h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 821E1E10h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E1E10h case   18:*/		return 0x821E1E14;
		  /* 821E1E14h */ case   19:  		/* bc 4, CR6_LT, 3404 */
		/* 821E1E14h case   19:*/		if ( !regs.CR[6].lt ) { return 0x821E2B60;  }
		/* 821E1E14h case   19:*/		return 0x821E1E18;
		  /* 821E1E18h */ case   20:  		/* lwz R11, <#[R19 + 40]> */
		/* 821E1E18h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000028) );
		/* 821E1E18h case   20:*/		return 0x821E1E1C;
		  /* 821E1E1Ch */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821E1E1Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1E1Ch case   21:*/		return 0x821E1E20;
		  /* 821E1E20h */ case   22:  		/* bc 12, CR6_EQ, 19404 */
		/* 821E1E20h case   22:*/		if ( regs.CR[6].eq ) { return 0x821E69EC;  }
		/* 821E1E20h case   22:*/		return 0x821E1E24;
		  /* 821E1E24h */ case   23:  		/* lwz R11, <#[R19 + 4]> */
		/* 821E1E24h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 821E1E24h case   23:*/		return 0x821E1E28;
		  /* 821E1E28h */ case   24:  		/* li R10, 68 */
		/* 821E1E28h case   24:*/		cpu::op::li<0>(regs,&regs.R10,0x44);
		/* 821E1E28h case   24:*/		return 0x821E1E2C;
		  /* 821E1E2Ch */ case   25:  		/* lwz R9, <#[R20 + 616]> */
		/* 821E1E2Ch case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000268) );
		/* 821E1E2Ch case   25:*/		return 0x821E1E30;
		  /* 821E1E30h */ case   26:  		/* li R17, 0 */
		/* 821E1E30h case   26:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 821E1E30h case   26:*/		return 0x821E1E34;
		  /* 821E1E34h */ case   27:  		/* addi R31, R11, 16 */
		/* 821E1E34h case   27:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x10);
		/* 821E1E34h case   27:*/		return 0x821E1E38;
		  /* 821E1E38h */ case   28:  		/* subf R9, R9, R19 */
		/* 821E1E38h case   28:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R19);
		/* 821E1E38h case   28:*/		return 0x821E1E3C;
		  /* 821E1E3Ch */ case   29:  		/* lwz R11, <#[R11 + 20]> */
		/* 821E1E3Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821E1E3Ch case   29:*/		return 0x821E1E40;
		  /* 821E1E40h */ case   30:  		/* divw R18, R9, R10 */
		/* 821E1E40h case   30:*/		cpu::op::divw<0>(regs,&regs.R18,regs.R9,regs.R10);
		/* 821E1E40h case   30:*/		return 0x821E1E44;
		  /* 821E1E44h */ case   31:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1E44h case   31:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1E44h case   31:*/		return 0x821E1E48;
		  /* 821E1E48h */ case   32:  		/* bc 4, CR0_EQ, 64 */
		/* 821E1E48h case   32:*/		if ( !regs.CR[0].eq ) { return 0x821E1E88;  }
		/* 821E1E48h case   32:*/		return 0x821E1E4C;
		  /* 821E1E4Ch */ case   33:  		/* cmplwi CR0, R11, 0 */
		/* 821E1E4Ch case   33:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E1E4Ch case   33:*/		return 0x821E1E50;
		  /* 821E1E50h */ case   34:  		/* bc 12, CR0_EQ, 56 */
		/* 821E1E50h case   34:*/		if ( regs.CR[0].eq ) { return 0x821E1E88;  }
		/* 821E1E50h case   34:*/		return 0x821E1E54;
		  /* 821E1E54h */ case   35:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E1E54h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E1E54h case   35:*/		return 0x821E1E58;
		  /* 821E1E58h */ case   36:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821E1E58h case   36:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821E1E58h case   36:*/		return 0x821E1E5C;
		  /* 821E1E5Ch */ case   37:  		/* cmplwi CR6, R10, 14336 */
		/* 821E1E5Ch case   37:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 821E1E5Ch case   37:*/		return 0x821E1E60;
		  /* 821E1E60h */ case   38:  		/* bc 4, CR6_EQ, 8 */
		/* 821E1E60h case   38:*/		if ( !regs.CR[6].eq ) { return 0x821E1E68;  }
		/* 821E1E60h case   38:*/		return 0x821E1E64;
		  /* 821E1E64h */ case   39:  		/* addi R17, R17, 1 */
		/* 821E1E64h case   39:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x1);
		/* 821E1E64h case   39:*/		return 0x821E1E68;
	}
	return 0x821E1E68;
} // Block from 821E1DC8h-821E1E68h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821E1E68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1E68);
		  /* 821E1E68h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E1E68h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E1E68h case    0:*/		return 0x821E1E6C;
		  /* 821E1E6Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E1E6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E1E6Ch case    1:*/		return 0x821E1E70;
		  /* 821E1E70h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1E70h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1E70h case    2:*/		return 0x821E1E74;
		  /* 821E1E74h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E1E74h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E1E80;  }
		/* 821E1E74h case    3:*/		return 0x821E1E78;
		  /* 821E1E78h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E1E78h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E1E78h case    4:*/		return 0x821E1E7C;
		  /* 821E1E7Ch */ case    5:  		/* bc 4, CR6_EQ, -40 */
		/* 821E1E7Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E1E54;  }
		/* 821E1E7Ch case    5:*/		return 0x821E1E80;
	}
	return 0x821E1E80;
} // Block from 821E1E68h-821E1E80h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E1E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1E80);
		  /* 821E1E80h */ case    0:  		/* cmplwi CR6, R17, 0 */
		/* 821E1E80h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821E1E80h case    0:*/		return 0x821E1E84;
		  /* 821E1E84h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 821E1E84h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E1EA4;  }
		/* 821E1E84h case    1:*/		return 0x821E1E88;
	}
	return 0x821E1E88;
} // Block from 821E1E80h-821E1E88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E1E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1E88);
		  /* 821E1E88h */ case    0:  		/* lwz R11, <#[R1 + 148]> */
		/* 821E1E88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 821E1E88h case    0:*/		return 0x821E1E8C;
		  /* 821E1E8Ch */ case    1:  		/* lwz R10, <#[R19 + 60]> */
		/* 821E1E8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x0000003C) );
		/* 821E1E8Ch case    1:*/		return 0x821E1E90;
		  /* 821E1E90h */ case    2:  		/* addi R11, R11, 1 */
		/* 821E1E90h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E1E90h case    2:*/		return 0x821E1E94;
		  /* 821E1E94h */ case    3:  		/* ori R10, R10, 2 */
		/* 821E1E94h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821E1E94h case    3:*/		return 0x821E1E98;
		  /* 821E1E98h */ case    4:  		/* stw R11, <#[R1 + 148]> */
		/* 821E1E98h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 821E1E98h case    4:*/		return 0x821E1E9C;
		  /* 821E1E9Ch */ case    5:  		/* stw R10, <#[R19 + 60]> */
		/* 821E1E9Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R19 + 0x0000003C) );
		/* 821E1E9Ch case    5:*/		return 0x821E1EA0;
		  /* 821E1EA0h */ case    6:  		/* b 3232 */
		/* 821E1EA0h case    6:*/		return 0x821E2B40;
		/* 821E1EA0h case    6:*/		return 0x821E1EA4;
	}
	return 0x821E1EA4;
} // Block from 821E1E88h-821E1EA4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E1EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1EA4);
		  /* 821E1EA4h */ case    0:  		/* lwz R11, <#[R19 + 36]> */
		/* 821E1EA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000024) );
		/* 821E1EA4h case    0:*/		return 0x821E1EA8;
		  /* 821E1EA8h */ case    1:  		/* li R5, 0 */
		/* 821E1EA8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E1EA8h case    1:*/		return 0x821E1EAC;
		  /* 821E1EACh */ case    2:  		/* mulli R4, R17, 88 */
		/* 821E1EACh case    2:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R17,0x58);
		/* 821E1EACh case    2:*/		return 0x821E1EB0;
		  /* 821E1EB0h */ case    3:  		/* rlwimi R11, R17, 1, 23, 30 */
		/* 821E1EB0h case    3:*/		cpu::op::rlwimi<0,1,23,30>(regs,&regs.R11,regs.R17);
		/* 821E1EB0h case    3:*/		return 0x821E1EB4;
		  /* 821E1EB4h */ case    4:  		/* mr R3, R20 */
		/* 821E1EB4h case    4:*/		regs.R3 = regs.R20;
		/* 821E1EB4h case    4:*/		return 0x821E1EB8;
		  /* 821E1EB8h */ case    5:  		/* stw R11, <#[R19 + 36]> */
		/* 821E1EB8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000024) );
		/* 821E1EB8h case    5:*/		return 0x821E1EBC;
		  /* 821E1EBCh */ case    6:  		/* bl -511620 */
		/* 821E1EBCh case    6:*/		regs.LR = 0x821E1EC0; return 0x82165038;
		/* 821E1EBCh case    6:*/		return 0x821E1EC0;
		  /* 821E1EC0h */ case    7:  		/* stw R3, <#[R19 + 44]> */
		/* 821E1EC0h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R19 + 0x0000002C) );
		/* 821E1EC0h case    7:*/		return 0x821E1EC4;
		  /* 821E1EC4h */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E1EC4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E1EC4h case    8:*/		return 0x821E1EC8;
		  /* 821E1EC8h */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E1EC8h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E1EC8h case    9:*/		return 0x821E1ECC;
		  /* 821E1ECCh */ case   10:  		/* bc 4, CR0_EQ, 1024 */
		/* 821E1ECCh case   10:*/		if ( !regs.CR[0].eq ) { return 0x821E22CC;  }
		/* 821E1ECCh case   10:*/		return 0x821E1ED0;
		  /* 821E1ED0h */ case   11:  		/* mr R23, R11 */
		/* 821E1ED0h case   11:*/		regs.R23 = regs.R11;
		/* 821E1ED0h case   11:*/		return 0x821E1ED4;
		  /* 821E1ED4h */ case   12:  		/* cmplwi CR0, R11, 0 */
		/* 821E1ED4h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E1ED4h case   12:*/		return 0x821E1ED8;
		  /* 821E1ED8h */ case   13:  		/* bc 12, CR0_EQ, 1012 */
		/* 821E1ED8h case   13:*/		if ( regs.CR[0].eq ) { return 0x821E22CC;  }
		/* 821E1ED8h case   13:*/		return 0x821E1EDC;
		  /* 821E1EDCh */ case   14:  		/* li R20, 0 */
		/* 821E1EDCh case   14:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821E1EDCh case   14:*/		return 0x821E1EE0;
		  /* 821E1EE0h */ case   15:  		/* lwz R11, <#[R23 + 8]> */
		/* 821E1EE0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821E1EE0h case   15:*/		return 0x821E1EE4;
		  /* 821E1EE4h */ case   16:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E1EE4h case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E1EE4h case   16:*/		return 0x821E1EE8;
		  /* 821E1EE8h */ case   17:  		/* cmplwi CR6, R11, 14336 */
		/* 821E1EE8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E1EE8h case   17:*/		return 0x821E1EEC;
		  /* 821E1EECh */ case   18:  		/* bc 4, CR6_EQ, 964 */
		/* 821E1EECh case   18:*/		if ( !regs.CR[6].eq ) { return 0x821E22B0;  }
		/* 821E1EECh case   18:*/		return 0x821E1EF0;
		  /* 821E1EF0h */ case   19:  		/* lwz R11, <#[R19 + 44]> */
		/* 821E1EF0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000002C) );
		/* 821E1EF0h case   19:*/		return 0x821E1EF4;
		  /* 821E1EF4h */ case   20:  		/* li R22, 0 */
		/* 821E1EF4h case   20:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821E1EF4h case   20:*/		return 0x821E1EF8;
		  /* 821E1EF8h */ case   21:  		/* lwz R16, <#[R1 + 804]> */
		/* 821E1EF8h case   21:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x00000324) );
		/* 821E1EF8h case   21:*/		return 0x821E1EFC;
		  /* 821E1EFCh */ case   22:  		/* add R30, R11, R20 */
		/* 821E1EFCh case   22:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R20);
		/* 821E1EFCh case   22:*/		return 0x821E1F00;
		  /* 821E1F00h */ case   23:  		/* addi R20, R20, 88 */
		/* 821E1F00h case   23:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x58);
		/* 821E1F00h case   23:*/		return 0x821E1F04;
		  /* 821E1F04h */ case   24:  		/* stfd FR25, <#[R30 + 8]> */
		/* 821E1F04h case   24:*/		cpu::mem::store64f( regs, regs.FR25, (uint32)(regs.R30 + 0x00000008) );
		/* 821E1F04h case   24:*/		return 0x821E1F08;
		  /* 821E1F08h */ case   25:  		/* stfd FR24, <#[R30 + 16]> */
		/* 821E1F08h case   25:*/		cpu::mem::store64f( regs, regs.FR24, (uint32)(regs.R30 + 0x00000010) );
		/* 821E1F08h case   25:*/		return 0x821E1F0C;
		  /* 821E1F0Ch */ case   26:  		/* stfd FR25, <#[R30 + 24]> */
		/* 821E1F0Ch case   26:*/		cpu::mem::store64f( regs, regs.FR25, (uint32)(regs.R30 + 0x00000018) );
		/* 821E1F0Ch case   26:*/		return 0x821E1F10;
		  /* 821E1F10h */ case   27:  		/* stfd FR24, <#[R30 + 32]> */
		/* 821E1F10h case   27:*/		cpu::mem::store64f( regs, regs.FR24, (uint32)(regs.R30 + 0x00000020) );
		/* 821E1F10h case   27:*/		return 0x821E1F14;
		  /* 821E1F14h */ case   28:  		/* lwz R11, <#[R30]> */
		/* 821E1F14h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E1F14h case   28:*/		return 0x821E1F18;
		  /* 821E1F18h */ case   29:  		/* oris R11, R11, 18431 */
		/* 821E1F18h case   29:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x47FF);
		/* 821E1F18h case   29:*/		return 0x821E1F1C;
		  /* 821E1F1Ch */ case   30:  		/* ori R11, R11, 57400 */
		/* 821E1F1Ch case   30:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE038);
		/* 821E1F1Ch case   30:*/		return 0x821E1F20;
		  /* 821E1F20h */ case   31:  		/* stw R11, <#[R30]> */
		/* 821E1F20h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E1F20h case   31:*/		return 0x821E1F24;
		  /* 821E1F24h */ case   32:  		/* stw R23, <#[R30 + 48]> */
		/* 821E1F24h case   32:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R30 + 0x00000030) );
		/* 821E1F24h case   32:*/		return 0x821E1F28;
		  /* 821E1F28h */ case   33:  		/* lwz R21, <#[R23]> */
		/* 821E1F28h case   33:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R23 + 0x00000000) );
		/* 821E1F28h case   33:*/		return 0x821E1F2C;
		  /* 821E1F2Ch */ case   34:  		/* cmplwi CR6, R21, 0 */
		/* 821E1F2Ch case   34:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821E1F2Ch case   34:*/		return 0x821E1F30;
		  /* 821E1F30h */ case   35:  		/* bc 12, CR6_EQ, 876 */
		/* 821E1F30h case   35:*/		if ( regs.CR[6].eq ) { return 0x821E229C;  }
		/* 821E1F30h case   35:*/		return 0x821E1F34;
		  /* 821E1F34h */ case   36:  		/* li R10, 0 */
		/* 821E1F34h case   36:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821E1F34h case   36:*/		return 0x821E1F38;
		  /* 821E1F38h */ case   37:  		/* li R9, 0 */
		/* 821E1F38h case   37:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821E1F38h case   37:*/		return 0x821E1F3C;
		  /* 821E1F3Ch */ case   38:  		/* li R8, 0 */
		/* 821E1F3Ch case   38:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E1F3Ch case   38:*/		return 0x821E1F40;
		  /* 821E1F40h */ case   39:  		/* addi R7, R1, 220 */
		/* 821E1F40h case   39:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xDC);
		/* 821E1F40h case   39:*/		return 0x821E1F44;
		  /* 821E1F44h */ case   40:  		/* addi R6, R1, 200 */
		/* 821E1F44h case   40:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC8);
		/* 821E1F44h case   40:*/		return 0x821E1F48;
		  /* 821E1F48h */ case   41:  		/* addi R5, R1, 168 */
		/* 821E1F48h case   41:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA8);
		/* 821E1F48h case   41:*/		return 0x821E1F4C;
		  /* 821E1F4Ch */ case   42:  		/* li R4, 0 */
		/* 821E1F4Ch case   42:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E1F4Ch case   42:*/		return 0x821E1F50;
		  /* 821E1F50h */ case   43:  		/* mr R3, R21 */
		/* 821E1F50h case   43:*/		regs.R3 = regs.R21;
		/* 821E1F50h case   43:*/		return 0x821E1F54;
		  /* 821E1F54h */ case   44:  		/* bl 267644 */
		/* 821E1F54h case   44:*/		regs.LR = 0x821E1F58; return 0x822234D0;
		/* 821E1F54h case   44:*/		return 0x821E1F58;
		  /* 821E1F58h */ case   45:  		/* lwz R11, <#[R1 + 168]> */
		/* 821E1F58h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 821E1F58h case   45:*/		return 0x821E1F5C;
		  /* 821E1F5Ch */ case   46:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E1F5Ch case   46:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E1F5Ch case   46:*/		return 0x821E1F60;
		  /* 821E1F60h */ case   47:  		/* rlwinm R9, R10, 25, 25, 31 */
		/* 821E1F60h case   47:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R9,regs.R10);
		/* 821E1F60h case   47:*/		return 0x821E1F64;
		  /* 821E1F64h */ case   48:  		/* cmplwi CR6, R9, 125 */
		/* 821E1F64h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000007D);
		/* 821E1F64h case   48:*/		return 0x821E1F68;
		  /* 821E1F68h */ case   49:  		/* bc 4, CR6_EQ, 68 */
		/* 821E1F68h case   49:*/		if ( !regs.CR[6].eq ) { return 0x821E1FAC;  }
		/* 821E1F68h case   49:*/		return 0x821E1F6C;
		  /* 821E1F6Ch */ case   50:  		/* lwz R11, <#[R30]> */
		/* 821E1F6Ch case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E1F6Ch case   50:*/		return 0x821E1F70;
		  /* 821E1F70h */ case   51:  		/* ori R11, R11, 1 */
		/* 821E1F70h case   51:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E1F70h case   51:*/		return 0x821E1F74;
		  /* 821E1F74h */ case   52:  		/* stw R11, <#[R30]> */
		/* 821E1F74h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E1F74h case   52:*/		return 0x821E1F78;
		  /* 821E1F78h */ case   53:  		/* lwz R3, <#[R1 + 168]> */
		/* 821E1F78h case   53:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000A8) );
		/* 821E1F78h case   53:*/		return 0x821E1F7C;
		  /* 821E1F7Ch */ case   54:  		/* lwz R5, <#[R1 + 220]> */
		/* 821E1F7Ch case   54:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000DC) );
		/* 821E1F7Ch case   54:*/		return 0x821E1F80;
		  /* 821E1F80h */ case   55:  		/* lwz R4, <#[R1 + 200]> */
		/* 821E1F80h case   55:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C8) );
		/* 821E1F80h case   55:*/		return 0x821E1F84;
		  /* 821E1F84h */ case   56:  		/* bl 259868 */
		/* 821E1F84h case   56:*/		regs.LR = 0x821E1F88; return 0x822216A0;
		/* 821E1F84h case   56:*/		return 0x821E1F88;
		  /* 821E1F88h */ case   57:  		/* lfd FR0, <#[R30 + 8]> */
		/* 821E1F88h case   57:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R30 + 0x00000008) );
		/* 821E1F88h case   57:*/		return 0x821E1F8C;
		  /* 821E1F8Ch */ case   58:  		/* fcmpu CR6, FR1, FR0 */
		/* 821E1F8Ch case   58:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821E1F8Ch case   58:*/		return 0x821E1F90;
		  /* 821E1F90h */ case   59:  		/* bc 4, CR6_LT, 8 */
		/* 821E1F90h case   59:*/		if ( !regs.CR[6].lt ) { return 0x821E1F98;  }
		/* 821E1F90h case   59:*/		return 0x821E1F94;
		  /* 821E1F94h */ case   60:  		/* stfd FR1, <#[R30 + 8]> */
		/* 821E1F94h case   60:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R30 + 0x00000008) );
		/* 821E1F94h case   60:*/		return 0x821E1F98;
	}
	return 0x821E1F98;
} // Block from 821E1EA4h-821E1F98h (61 instructions)

//////////////////////////////////////////////////////
// Block at 821E1F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1F98);
		  /* 821E1F98h */ case    0:  		/* lfd FR0, <#[R30 + 16]> */
		/* 821E1F98h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R30 + 0x00000010) );
		/* 821E1F98h case    0:*/		return 0x821E1F9C;
		  /* 821E1F9Ch */ case    1:  		/* fcmpu CR6, FR1, FR0 */
		/* 821E1F9Ch case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821E1F9Ch case    1:*/		return 0x821E1FA0;
		  /* 821E1FA0h */ case    2:  		/* bc 4, CR6_GT, 756 */
		/* 821E1FA0h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821E2294;  }
		/* 821E1FA0h case    2:*/		return 0x821E1FA4;
		  /* 821E1FA4h */ case    3:  		/* stfd FR1, <#[R30 + 16]> */
		/* 821E1FA4h case    3:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R30 + 0x00000010) );
		/* 821E1FA4h case    3:*/		return 0x821E1FA8;
		  /* 821E1FA8h */ case    4:  		/* b 748 */
		/* 821E1FA8h case    4:*/		return 0x821E2294;
		/* 821E1FA8h case    4:*/		return 0x821E1FAC;
	}
	return 0x821E1FAC;
} // Block from 821E1F98h-821E1FACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E1FACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E1FAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E1FAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E1FAC);
		  /* 821E1FACh */ case    0:  		/* rlwinm R10, R18, 27, 5, 31 */
		/* 821E1FACh case    0:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R18);
		/* 821E1FACh case    0:*/		return 0x821E1FB0;
		  /* 821E1FB0h */ case    1:  		/* lwz R8, <#[R11 + 28]> */
		/* 821E1FB0h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 821E1FB0h case    1:*/		return 0x821E1FB4;
		  /* 821E1FB4h */ case    2:  		/* rlwinm R26, R18, 0, 27, 31 */
		/* 821E1FB4h case    2:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R26,regs.R18);
		/* 821E1FB4h case    2:*/		return 0x821E1FB8;
		  /* 821E1FB8h */ case    3:  		/* addi R10, R10, 21 */
		/* 821E1FB8h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821E1FB8h case    3:*/		return 0x821E1FBC;
		  /* 821E1FBCh */ case    4:  		/* rlwinm R25, R10, 2, 0, 29 */
		/* 821E1FBCh case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R10);
		/* 821E1FBCh case    4:*/		return 0x821E1FC0;
		  /* 821E1FC0h */ case    5:  		/* lwzx R10, <#[R8 + R25]> */
		/* 821E1FC0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R25 + 0x00000000) );
		/* 821E1FC0h case    5:*/		return 0x821E1FC4;
		  /* 821E1FC4h */ case    6:  		/* srw R10, R10, R26 */
		/* 821E1FC4h case    6:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R26);
		/* 821E1FC4h case    6:*/		return 0x821E1FC8;
		  /* 821E1FC8h */ case    7:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E1FC8h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E1FC8h case    7:*/		return 0x821E1FCC;
		  /* 821E1FCCh */ case    8:  		/* bc 4, CR0_EQ, 64 */
		/* 821E1FCCh case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E200C;  }
		/* 821E1FCCh case    8:*/		return 0x821E1FD0;
		  /* 821E1FD0h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 821E1FD0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E1FD0h case    9:*/		return 0x821E1FD4;
		  /* 821E1FD4h */ case   10:  		/* ori R31, R11, 4 */
		/* 821E1FD4h case   10:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R11,0x4);
		/* 821E1FD4h case   10:*/		return 0x821E1FD8;
		  /* 821E1FD8h */ case   11:  		/* stw R31, <#[R30]> */
		/* 821E1FD8h case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821E1FD8h case   11:*/		return 0x821E1FDC;
		  /* 821E1FDCh */ case   12:  		/* lwz R11, <#[R21 + 12]> */
		/* 821E1FDCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821E1FDCh case   12:*/		return 0x821E1FE0;
		  /* 821E1FE0h */ case   13:  		/* lwz R10, <#[R21]> */
		/* 821E1FE0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000000) );
		/* 821E1FE0h case   13:*/		return 0x821E1FE4;
		  /* 821E1FE4h */ case   14:  		/* rlwinm R9, R10, 29, 28, 29 */
		/* 821E1FE4h case   14:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R10);
		/* 821E1FE4h case   14:*/		return 0x821E1FE8;
		  /* 821E1FE8h */ case   15:  		/* rlwinm R4, R10, 0, 27, 31 */
		/* 821E1FE8h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R10);
		/* 821E1FE8h case   15:*/		return 0x821E1FEC;
		  /* 821E1FECh */ case   16:  		/* lhz R11, <#[R11 + 14]> */
		/* 821E1FECh case   16:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821E1FECh case   16:*/		return 0x821E1FF0;
		  /* 821E1FF0h */ case   17:  		/* srw R11, R11, R9 */
		/* 821E1FF0h case   17:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E1FF0h case   17:*/		return 0x821E1FF4;
		  /* 821E1FF4h */ case   18:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821E1FF4h case   18:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821E1FF4h case   18:*/		return 0x821E1FF8;
		  /* 821E1FF8h */ case   19:  		/* bl -290680 */
		/* 821E1FF8h case   19:*/		regs.LR = 0x821E1FFC; return 0x8219B080;
		/* 821E1FF8h case   19:*/		return 0x821E1FFC;
		  /* 821E1FFCh */ case   20:  		/* li R11, -57 */
		/* 821E1FFCh case   20:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFC7);
		/* 821E1FFCh case   20:*/		return 0x821E2000;
		  /* 821E2000h */ case   21:  		/* rlwimi R11, R3, 3, 26, 28 */
		/* 821E2000h case   21:*/		cpu::op::rlwimi<0,3,26,28>(regs,&regs.R11,regs.R3);
		/* 821E2000h case   21:*/		return 0x821E2004;
		  /* 821E2004h */ case   22:  		/* and R11, R11, R31 */
		/* 821E2004h case   22:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821E2004h case   22:*/		return 0x821E2008;
		  /* 821E2008h */ case   23:  		/* b 640 */
		/* 821E2008h case   23:*/		return 0x821E2288;
		/* 821E2008h case   23:*/		return 0x821E200C;
	}
	return 0x821E200C;
} // Block from 821E1FACh-821E200Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E200Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E200C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E200C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E200C);
		  /* 821E200Ch */ case    0:  		/* cmplwi CR6, R9, 1 */
		/* 821E200Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 821E200Ch case    0:*/		return 0x821E2010;
		  /* 821E2010h */ case    1:  		/* bc 4, CR6_EQ, 640 */
		/* 821E2010h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E2290;  }
		/* 821E2010h case    1:*/		return 0x821E2014;
		  /* 821E2014h */ case    2:  		/* lwz R31, <#[R11 + 44]> */
		/* 821E2014h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000002C) );
		/* 821E2014h case    2:*/		return 0x821E2018;
		  /* 821E2018h */ case    3:  		/* lwz R24, <#[R11 + 48]> */
		/* 821E2018h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + 0x00000030) );
		/* 821E2018h case    3:*/		return 0x821E201C;
		  /* 821E201Ch */ case    4:  		/* lwz R4, <#[R31 + 12]> */
		/* 821E201Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E201Ch case    4:*/		return 0x821E2020;
		  /* 821E2020h */ case    5:  		/* lwz R11, <#[R4 + 8]> */
		/* 821E2020h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821E2020h case    5:*/		return 0x821E2024;
		  /* 821E2024h */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E2024h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E2024h case    6:*/		return 0x821E2028;
		  /* 821E2028h */ case    7:  		/* cmplwi CR6, R11, 14336 */
		/* 821E2028h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E2028h case    7:*/		return 0x821E202C;
		  /* 821E202Ch */ case    8:  		/* bc 4, CR6_EQ, 612 */
		/* 821E202Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E2290;  }
		/* 821E202Ch case    8:*/		return 0x821E2030;
		  /* 821E2030h */ case    9:  		/* lwz R11, <#[R24 + 12]> */
		/* 821E2030h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000000C) );
		/* 821E2030h case    9:*/		return 0x821E2034;
		  /* 821E2034h */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E2034h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E2034h case   10:*/		return 0x821E2038;
		  /* 821E2038h */ case   11:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E2038h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E2038h case   11:*/		return 0x821E203C;
		  /* 821E203Ch */ case   12:  		/* cmplwi CR6, R11, 16000 */
		/* 821E203Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821E203Ch case   12:*/		return 0x821E2040;
		  /* 821E2040h */ case   13:  		/* bc 4, CR6_EQ, 592 */
		/* 821E2040h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821E2290;  }
		/* 821E2040h case   13:*/		return 0x821E2044;
		  /* 821E2044h */ case   14:  		/* mr R9, R23 */
		/* 821E2044h case   14:*/		regs.R9 = regs.R23;
		/* 821E2044h case   14:*/		return 0x821E2048;
		  /* 821E2048h */ case   15:  		/* li R8, 0 */
		/* 821E2048h case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E2048h case   15:*/		return 0x821E204C;
		  /* 821E204Ch */ case   16:  		/* addi R7, R1, 240 */
		/* 821E204Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF0);
		/* 821E204Ch case   16:*/		return 0x821E2050;
		  /* 821E2050h */ case   17:  		/* addi R6, R1, 484 */
		/* 821E2050h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1E4);
		/* 821E2050h case   17:*/		return 0x821E2054;
		  /* 821E2054h */ case   18:  		/* addi R5, R1, 184 */
		/* 821E2054h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB8);
		/* 821E2054h case   18:*/		return 0x821E2058;
		  /* 821E2058h */ case   19:  		/* mr R3, R16 */
		/* 821E2058h case   19:*/		regs.R3 = regs.R16;
		/* 821E2058h case   19:*/		return 0x821E205C;
		  /* 821E205Ch */ case   20:  		/* bl 309140 */
		/* 821E205Ch case   20:*/		regs.LR = 0x821E2060; return 0x8222D7F0;
		/* 821E205Ch case   20:*/		return 0x821E2060;
		  /* 821E2060h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E2060h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E2060h case   21:*/		return 0x821E2064;
		  /* 821E2064h */ case   22:  		/* bc 12, CR0_EQ, 64 */
		/* 821E2064h case   22:*/		if ( regs.CR[0].eq ) { return 0x821E20A4;  }
		/* 821E2064h case   22:*/		return 0x821E2068;
		  /* 821E2068h */ case   23:  		/* lwz R11, <#[R1 + 184]> */
		/* 821E2068h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B8) );
		/* 821E2068h case   23:*/		return 0x821E206C;
		  /* 821E206Ch */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 821E206Ch case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E206Ch case   24:*/		return 0x821E2070;
		  /* 821E2070h */ case   25:  		/* bc 12, CR6_EQ, 12 */
		/* 821E2070h case   25:*/		if ( regs.CR[6].eq ) { return 0x821E207C;  }
		/* 821E2070h case   25:*/		return 0x821E2074;
		  /* 821E2074h */ case   26:  		/* cmplw CR6, R11, R23 */
		/* 821E2074h case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821E2074h case   26:*/		return 0x821E2078;
		  /* 821E2078h */ case   27:  		/* bc 4, CR6_EQ, 44 */
		/* 821E2078h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821E20A4;  }
		/* 821E2078h case   27:*/		return 0x821E207C;
	}
	return 0x821E207C;
} // Block from 821E200Ch-821E207Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 821E207Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E207C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E207C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E207C);
		  /* 821E207Ch */ case    0:  		/* lwz R11, <#[R1 + 240]> */
		/* 821E207Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 821E207Ch case    0:*/		return 0x821E2080;
		  /* 821E2080h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E2080h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E2080h case    1:*/		return 0x821E2084;
		  /* 821E2084h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 821E2084h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E20A4;  }
		/* 821E2084h case    2:*/		return 0x821E2088;
		  /* 821E2088h */ case    3:  		/* lwz R11, <#[R1 + 168]> */
		/* 821E2088h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 821E2088h case    3:*/		return 0x821E208C;
		  /* 821E208Ch */ case    4:  		/* mr R3, R24 */
		/* 821E208Ch case    4:*/		regs.R3 = regs.R24;
		/* 821E208Ch case    4:*/		return 0x821E2090;
		  /* 821E2090h */ case    5:  		/* stw R11, <#[R30 + 52]> */
		/* 821E2090h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E2090h case    5:*/		return 0x821E2094;
		  /* 821E2094h */ case    6:  		/* lwz R4, <#[R1 + 200]> */
		/* 821E2094h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C8) );
		/* 821E2094h case    6:*/		return 0x821E2098;
		  /* 821E2098h */ case    7:  		/* bl -151312 */
		/* 821E2098h case    7:*/		regs.LR = 0x821E209C; return 0x821BD188;
		/* 821E2098h case    7:*/		return 0x821E209C;
		  /* 821E209Ch */ case    8:  		/* stfd FR1, <#[R30 + 40]> */
		/* 821E209Ch case    8:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R30 + 0x00000028) );
		/* 821E209Ch case    8:*/		return 0x821E20A0;
		  /* 821E20A0h */ case    9:  		/* b 500 */
		/* 821E20A0h case    9:*/		return 0x821E2294;
		/* 821E20A0h case    9:*/		return 0x821E20A4;
	}
	return 0x821E20A4;
} // Block from 821E207Ch-821E20A4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E20A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E20A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E20A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E20A4);
		  /* 821E20A4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821E20A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E20A4h case    0:*/		return 0x821E20A8;
		  /* 821E20A8h */ case    1:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821E20A8h case    1:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821E20A8h case    1:*/		return 0x821E20AC;
		  /* 821E20ACh */ case    2:  		/* bc 4, CR0_EQ, 484 */
		/* 821E20ACh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E2290;  }
		/* 821E20ACh case    2:*/		return 0x821E20B0;
		  /* 821E20B0h */ case    3:  		/* lwz R11, <#[R16 + 112]> */
		/* 821E20B0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000070) );
		/* 821E20B0h case    3:*/		return 0x821E20B4;
		  /* 821E20B4h */ case    4:  		/* fmr FR31, FR28 */
		/* 821E20B4h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR28);
		/* 821E20B4h case    4:*/		return 0x821E20B8;
		  /* 821E20B8h */ case    5:  		/* li R27, 0 */
		/* 821E20B8h case    5:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821E20B8h case    5:*/		return 0x821E20BC;
		  /* 821E20BCh */ case    6:  		/* addi R28, R11, 1 */
		/* 821E20BCh case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x1);
		/* 821E20BCh case    6:*/		return 0x821E20C0;
		  /* 821E20C0h */ case    7:  		/* stw R28, <#[R16 + 112]> */
		/* 821E20C0h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R16 + 0x00000070) );
		/* 821E20C0h case    7:*/		return 0x821E20C4;
		  /* 821E20C4h */ case    8:  		/* lwz R11, <#[R31 + 12]> */
		/* 821E20C4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E20C4h case    8:*/		return 0x821E20C8;
		  /* 821E20C8h */ case    9:  		/* stw R28, <#[R11 - 4]> */
		/* 821E20C8h case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821E20C8h case    9:*/		return 0x821E20CC;
		  /* 821E20CCh */ case   10:  		/* lwz R29, <#[R11]> */
		/* 821E20CCh case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 821E20CCh case   10:*/		return 0x821E20D0;
		  /* 821E20D0h */ case   11:  		/* cmplwi CR6, R29, 0 */
		/* 821E20D0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E20D0h case   11:*/		return 0x821E20D4;
		  /* 821E20D4h */ case   12:  		/* bc 12, CR6_EQ, 80 */
		/* 821E20D4h case   12:*/		if ( regs.CR[6].eq ) { return 0x821E2124;  }
		/* 821E20D4h case   12:*/		return 0x821E20D8;
		  /* 821E20D8h */ case   13:  		/* lwz R11, <#[R29 + 12]> */
		/* 821E20D8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821E20D8h case   13:*/		return 0x821E20DC;
		  /* 821E20DCh */ case   14:  		/* cmplw CR6, R11, R23 */
		/* 821E20DCh case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821E20DCh case   14:*/		return 0x821E20E0;
		  /* 821E20E0h */ case   15:  		/* stw R11, <#[R1 + 184]> */
		/* 821E20E0h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B8) );
		/* 821E20E0h case   15:*/		return 0x821E20E4;
		  /* 821E20E4h */ case   16:  		/* bc 12, CR6_EQ, 332 */
		/* 821E20E4h case   16:*/		if ( regs.CR[6].eq ) { return 0x821E2230;  }
		/* 821E20E4h case   16:*/		return 0x821E20E8;
		  /* 821E20E8h */ case   17:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E20E8h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E20E8h case   17:*/		return 0x821E20EC;
		  /* 821E20ECh */ case   18:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821E20ECh case   18:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821E20ECh case   18:*/		return 0x821E20F0;
		  /* 821E20F0h */ case   19:  		/* cmplwi CR6, R10, 125 */
		/* 821E20F0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007D);
		/* 821E20F0h case   19:*/		return 0x821E20F4;
		  /* 821E20F4h */ case   20:  		/* bc 4, CR6_EQ, 172 */
		/* 821E20F4h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821E21A0;  }
		/* 821E20F4h case   20:*/		return 0x821E20F8;
		  /* 821E20F8h */ case   21:  		/* li R4, 0 */
		/* 821E20F8h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E20F8h case   21:*/		return 0x821E20FC;
		  /* 821E20FCh */ case   22:  		/* mr R3, R29 */
		/* 821E20FCh case   22:*/		regs.R3 = regs.R29;
		/* 821E20FCh case   22:*/		return 0x821E2100;
		  /* 821E2100h */ case   23:  		/* bl -151416 */
		/* 821E2100h case   23:*/		regs.LR = 0x821E2104; return 0x821BD188;
		/* 821E2100h case   23:*/		return 0x821E2104;
		  /* 821E2104h */ case   24:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821E2104h case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821E2104h case   24:*/		return 0x821E2108;
		  /* 821E2108h */ case   25:  		/* bc 4, CR0_EQ, 16 */
		/* 821E2108h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821E2118;  }
		/* 821E2108h case   25:*/		return 0x821E210C;
		  /* 821E210Ch */ case   26:  		/* fmr FR31, FR1 */
		/* 821E210Ch case   26:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821E210Ch case   26:*/		return 0x821E2110;
		  /* 821E2110h */ case   27:  		/* li R27, 1 */
		/* 821E2110h case   27:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821E2110h case   27:*/		return 0x821E2114;
		  /* 821E2114h */ case   28:  		/* b 284 */
		/* 821E2114h case   28:*/		return 0x821E2230;
		/* 821E2114h case   28:*/		return 0x821E2118;
	}
	return 0x821E2118;
} // Block from 821E20A4h-821E2118h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E2118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2118);
		  /* 821E2118h */ case    0:  		/* fcmpu CR6, FR1, FR31 */
		/* 821E2118h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 821E2118h case    0:*/		return 0x821E211C;
		  /* 821E211Ch */ case    1:  		/* bc 12, CR6_EQ, 276 */
		/* 821E211Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821E2230;  }
		/* 821E211Ch case    1:*/		return 0x821E2120;
		  /* 821E2120h */ case    2:  		/* li R22, 1 */
		/* 821E2120h case    2:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821E2120h case    2:*/		return 0x821E2124;
	}
	return 0x821E2124;
} // Block from 821E2118h-821E2124h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E2124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2124);
		  /* 821E2124h */ case    0:  		/* lwz R11, <#[R14]> */
		/* 821E2124h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821E2124h case    0:*/		return 0x821E2128;
		  /* 821E2128h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E2128h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E2128h case    1:*/		return 0x821E212C;
		  /* 821E212Ch */ case    2:  		/* bc 4, CR0_EQ, 268 */
		/* 821E212Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E2238;  }
		/* 821E212Ch case    2:*/		return 0x821E2130;
		  /* 821E2130h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821E2130h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E2130h case    3:*/		return 0x821E2134;
		  /* 821E2134h */ case    4:  		/* bc 12, CR0_EQ, 260 */
		/* 821E2134h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E2238;  }
		/* 821E2134h case    4:*/		return 0x821E2138;
		  /* 821E2138h */ case    5:  		/* lwz R11, <#[R15]> */
		/* 821E2138h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821E2138h case    5:*/		return 0x821E213C;
		  /* 821E213Ch */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E213Ch case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E213Ch case    6:*/		return 0x821E2140;
		  /* 821E2140h */ case    7:  		/* addi R4, R11, -4 */
		/* 821E2140h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821E2140h case    7:*/		return 0x821E2144;
		  /* 821E2144h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E2144h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E2144h case    8:*/		return 0x821E2148;
		  /* 821E2148h */ case    9:  		/* addi R10, R11, 3 */
		/* 821E2148h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821E2148h case    9:*/		return 0x821E214C;
		  /* 821E214Ch */ case   10:  		/* addic. R11, R11, -1 */
		/* 821E214Ch case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E214Ch case   10:*/		return 0x821E2150;
		  /* 821E2150h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E2150h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E2150h case   11:*/		return 0x821E2154;
		  /* 821E2154h */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821E2154h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821E2154h case   12:*/		return 0x821E2158;
		  /* 821E2158h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821E2158h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821E2158h case   13:*/		return 0x821E215C;
		  /* 821E215Ch */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 821E215Ch case   14:*/		if ( !regs.CR[0].eq ) { return 0x821E2198;  }
		/* 821E215Ch case   14:*/		return 0x821E2160;
		  /* 821E2160h */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821E2160h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821E2160h case   15:*/		return 0x821E2164;
		  /* 821E2164h */ case   16:  		/* mr R3, R15 */
		/* 821E2164h case   16:*/		regs.R3 = regs.R15;
		/* 821E2164h case   16:*/		return 0x821E2168;
		  /* 821E2168h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E2168h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E2168h case   17:*/		return 0x821E216C;
		  /* 821E216Ch */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821E216Ch case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E216Ch case   18:*/		return 0x821E2170;
		  /* 821E2170h */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E2170h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E2170h case   19:*/		return 0x821E2174;
		  /* 821E2174h */ case   20:  		/* stw R9, <#[R10]> */
		/* 821E2174h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E2174h case   20:*/		return 0x821E2178;
		  /* 821E2178h */ case   21:  		/* lwz R10, <#[R11]> */
		/* 821E2178h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E2178h case   21:*/		return 0x821E217C;
		  /* 821E217Ch */ case   22:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E217Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E217Ch case   22:*/		return 0x821E2180;
		  /* 821E2180h */ case   23:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E2180h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E2180h case   23:*/		return 0x821E2184;
		  /* 821E2184h */ case   24:  		/* stw R11, <#[R10]> */
		/* 821E2184h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821E2184h case   24:*/		return 0x821E2188;
		  /* 821E2188h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821E2188h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821E2188h case   25:*/		return 0x821E218C;
		  /* 821E218Ch */ case   26:  		/* addi R11, R11, 4 */
		/* 821E218Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E218Ch case   26:*/		return 0x821E2190;
		  /* 821E2190h */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821E2190h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821E2190h case   27:*/		return 0x821E2194;
		  /* 821E2194h */ case   28:  		/* bl -590732 */
		/* 821E2194h case   28:*/		regs.LR = 0x821E2198; return 0x82151E08;
		/* 821E2194h case   28:*/		return 0x821E2198;
	}
	return 0x821E2198;
} // Block from 821E2124h-821E2198h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E2198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2198);
		  /* 821E2198h */ case    0:  		/* mr R11, R31 */
		/* 821E2198h case    0:*/		regs.R11 = regs.R31;
		/* 821E2198h case    0:*/		return 0x821E219C;
		  /* 821E219Ch */ case    1:  		/* b -208 */
		/* 821E219Ch case    1:*/		return 0x821E20CC;
		/* 821E219Ch case    1:*/		return 0x821E21A0;
	}
	return 0x821E21A0;
} // Block from 821E2198h-821E21A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E21A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E21A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E21A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E21A0);
		  /* 821E21A0h */ case    0:  		/* lwz R9, <#[R11 + 28]> */
		/* 821E21A0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000001C) );
		/* 821E21A0h case    0:*/		return 0x821E21A4;
		  /* 821E21A4h */ case    1:  		/* lwzx R9, <#[R9 + R25]> */
		/* 821E21A4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R25 + 0x00000000) );
		/* 821E21A4h case    1:*/		return 0x821E21A8;
		  /* 821E21A8h */ case    2:  		/* srw R9, R9, R26 */
		/* 821E21A8h case    2:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R26);
		/* 821E21A8h case    2:*/		return 0x821E21AC;
		  /* 821E21ACh */ case    3:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821E21ACh case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821E21ACh case    3:*/		return 0x821E21B0;
		  /* 821E21B0h */ case    4:  		/* bc 12, CR0_EQ, -144 */
		/* 821E21B0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E2120;  }
		/* 821E21B0h case    4:*/		return 0x821E21B4;
		  /* 821E21B4h */ case    5:  		/* lwz R9, <#[R29]> */
		/* 821E21B4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821E21B4h case    5:*/		return 0x821E21B8;
		  /* 821E21B8h */ case    6:  		/* rlwinm. R9, R9, 0, 27, 31 */
		/* 821E21B8h case    6:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821E21B8h case    6:*/		return 0x821E21BC;
		  /* 821E21BCh */ case    7:  		/* bc 4, CR0_EQ, -156 */
		/* 821E21BCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x821E2120;  }
		/* 821E21BCh case    7:*/		return 0x821E21C0;
		  /* 821E21C0h */ case    8:  		/* cmplwi CR6, R10, 112 */
		/* 821E21C0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000070);
		/* 821E21C0h case    8:*/		return 0x821E21C4;
		  /* 821E21C4h */ case    9:  		/* bc 4, CR6_EQ, -164 */
		/* 821E21C4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821E2120;  }
		/* 821E21C4h case    9:*/		return 0x821E21C8;
		  /* 821E21C8h */ case   10:  		/* lwz R10, <#[R11 - 4]> */
		/* 821E21C8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821E21C8h case   10:*/		return 0x821E21CC;
		  /* 821E21CCh */ case   11:  		/* cmplw CR6, R10, R28 */
		/* 821E21CCh case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 821E21CCh case   11:*/		return 0x821E21D0;
		  /* 821E21D0h */ case   12:  		/* bc 12, CR6_EQ, 96 */
		/* 821E21D0h case   12:*/		if ( regs.CR[6].eq ) { return 0x821E2230;  }
		/* 821E21D0h case   12:*/		return 0x821E21D4;
		  /* 821E21D4h */ case   13:  		/* stw R28, <#[R11 - 4]> */
		/* 821E21D4h case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821E21D4h case   13:*/		return 0x821E21D8;
		  /* 821E21D8h */ case   14:  		/* lwz R11, <#[R14]> */
		/* 821E21D8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821E21D8h case   14:*/		return 0x821E21DC;
		  /* 821E21DCh */ case   15:  		/* lwz R31, <#[R1 + 184]> */
		/* 821E21DCh case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000B8) );
		/* 821E21DCh case   15:*/		return 0x821E21E0;
		  /* 821E21E0h */ case   16:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E21E0h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E21E0h case   16:*/		return 0x821E21E4;
		  /* 821E21E4h */ case   17:  		/* bc 4, CR0_EQ, 40 */
		/* 821E21E4h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821E220C;  }
		/* 821E21E4h case   17:*/		return 0x821E21E8;
		  /* 821E21E8h */ case   18:  		/* lwz R11, <#[R15]> */
		/* 821E21E8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821E21E8h case   18:*/		return 0x821E21EC;
		  /* 821E21ECh */ case   19:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E21ECh case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E21ECh case   19:*/		return 0x821E21F0;
		  /* 821E21F0h */ case   20:  		/* addic. R3, R11, -4 */
		/* 821E21F0h case   20:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821E21F0h case   20:*/		return 0x821E21F4;
		  /* 821E21F4h */ case   21:  		/* bc 12, CR0_EQ, 24 */
		/* 821E21F4h case   21:*/		if ( regs.CR[0].eq ) { return 0x821E220C;  }
		/* 821E21F4h case   21:*/		return 0x821E21F8;
		  /* 821E21F8h */ case   22:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E21F8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E21F8h case   22:*/		return 0x821E21FC;
		  /* 821E21FCh */ case   23:  		/* lwz R10, <#[R3 + 12]> */
		/* 821E21FCh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E21FCh case   23:*/		return 0x821E2200;
		  /* 821E2200h */ case   24:  		/* addi R11, R11, 1 */
		/* 821E2200h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E2200h case   24:*/		return 0x821E2204;
		  /* 821E2204h */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 821E2204h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E2204h case   25:*/		return 0x821E2208;
		  /* 821E2208h */ case   26:  		/* bc 4, CR6_GT, 16 */
		/* 821E2208h case   26:*/		if ( !regs.CR[6].gt ) { return 0x821E2218;  }
		/* 821E2208h case   26:*/		return 0x821E220C;
	}
	return 0x821E220C;
} // Block from 821E21A0h-821E220Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 821E220Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E220C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E220C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E220C);
		  /* 821E220Ch */ case    0:  		/* li R4, 1 */
		/* 821E220Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E220Ch case    0:*/		return 0x821E2210;
		  /* 821E2210h */ case    1:  		/* mr R3, R15 */
		/* 821E2210h case    1:*/		regs.R3 = regs.R15;
		/* 821E2210h case    1:*/		return 0x821E2214;
		  /* 821E2214h */ case    2:  		/* bl -348492 */
		/* 821E2214h case    2:*/		regs.LR = 0x821E2218; return 0x8218D0C8;
		/* 821E2214h case    2:*/		return 0x821E2218;
	}
	return 0x821E2218;
} // Block from 821E220Ch-821E2218h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E2218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2218);
		  /* 821E2218h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E2218h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E2218h case    0:*/		return 0x821E221C;
		  /* 821E221Ch */ case    1:  		/* addi R10, R11, 4 */
		/* 821E221Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E221Ch case    1:*/		return 0x821E2220;
		  /* 821E2220h */ case    2:  		/* addi R9, R11, 1 */
		/* 821E2220h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821E2220h case    2:*/		return 0x821E2224;
		  /* 821E2224h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821E2224h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821E2224h case    3:*/		return 0x821E2228;
		  /* 821E2228h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821E2228h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821E2228h case    4:*/		return 0x821E222C;
		  /* 821E222Ch */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821E222Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821E222Ch case    5:*/		return 0x821E2230;
	}
	return 0x821E2230;
} // Block from 821E2218h-821E2230h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E2230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2230);
		  /* 821E2230h */ case    0:  		/* lwz R29, <#[R29 + 4]> */
		/* 821E2230h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000004) );
		/* 821E2230h case    0:*/		return 0x821E2234;
		  /* 821E2234h */ case    1:  		/* b -356 */
		/* 821E2234h case    1:*/		return 0x821E20D0;
		/* 821E2234h case    1:*/		return 0x821E2238;
	}
	return 0x821E2238;
} // Block from 821E2230h-821E2238h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2238);
		  /* 821E2238h */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821E2238h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821E2238h case    0:*/		return 0x821E223C;
		  /* 821E223Ch */ case    1:  		/* bc 4, CR0_EQ, 84 */
		/* 821E223Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E2290;  }
		/* 821E223Ch case    1:*/		return 0x821E2240;
		  /* 821E2240h */ case    2:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821E2240h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821E2240h case    2:*/		return 0x821E2244;
		  /* 821E2244h */ case    3:  		/* bc 12, CR0_EQ, 76 */
		/* 821E2244h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E2290;  }
		/* 821E2244h case    3:*/		return 0x821E2248;
		  /* 821E2248h */ case    4:  		/* lwz R11, <#[R1 + 168]> */
		/* 821E2248h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 821E2248h case    4:*/		return 0x821E224C;
		  /* 821E224Ch */ case    5:  		/* mr R3, R24 */
		/* 821E224Ch case    5:*/		regs.R3 = regs.R24;
		/* 821E224Ch case    5:*/		return 0x821E2250;
		  /* 821E2250h */ case    6:  		/* stw R11, <#[R30 + 52]> */
		/* 821E2250h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E2250h case    6:*/		return 0x821E2254;
		  /* 821E2254h */ case    7:  		/* lwz R4, <#[R1 + 200]> */
		/* 821E2254h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C8) );
		/* 821E2254h case    7:*/		return 0x821E2258;
		  /* 821E2258h */ case    8:  		/* bl -151760 */
		/* 821E2258h case    8:*/		regs.LR = 0x821E225C; return 0x821BD188;
		/* 821E2258h case    8:*/		return 0x821E225C;
		  /* 821E225Ch */ case    9:  		/* stfd FR1, <#[R30 + 40]> */
		/* 821E225Ch case    9:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R30 + 0x00000028) );
		/* 821E225Ch case    9:*/		return 0x821E2260;
		  /* 821E2260h */ case   10:  		/* lfd FR0, <#[R30 + 24]> */
		/* 821E2260h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R30 + 0x00000018) );
		/* 821E2260h case   10:*/		return 0x821E2264;
		  /* 821E2264h */ case   11:  		/* fcmpu CR6, FR31, FR0 */
		/* 821E2264h case   11:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 821E2264h case   11:*/		return 0x821E2268;
		  /* 821E2268h */ case   12:  		/* bc 4, CR6_LT, 8 */
		/* 821E2268h case   12:*/		if ( !regs.CR[6].lt ) { return 0x821E2270;  }
		/* 821E2268h case   12:*/		return 0x821E226C;
		  /* 821E226Ch */ case   13:  		/* stfd FR31, <#[R30 + 24]> */
		/* 821E226Ch case   13:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R30 + 0x00000018) );
		/* 821E226Ch case   13:*/		return 0x821E2270;
	}
	return 0x821E2270;
} // Block from 821E2238h-821E2270h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E2270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2270);
		  /* 821E2270h */ case    0:  		/* lfd FR0, <#[R30 + 32]> */
		/* 821E2270h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R30 + 0x00000020) );
		/* 821E2270h case    0:*/		return 0x821E2274;
		  /* 821E2274h */ case    1:  		/* fcmpu CR6, FR31, FR0 */
		/* 821E2274h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 821E2274h case    1:*/		return 0x821E2278;
		  /* 821E2278h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 821E2278h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821E2280;  }
		/* 821E2278h case    2:*/		return 0x821E227C;
		  /* 821E227Ch */ case    3:  		/* stfd FR31, <#[R30 + 32]> */
		/* 821E227Ch case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R30 + 0x00000020) );
		/* 821E227Ch case    3:*/		return 0x821E2280;
	}
	return 0x821E2280;
} // Block from 821E2270h-821E2280h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E2280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2280);
		  /* 821E2280h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821E2280h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E2280h case    0:*/		return 0x821E2284;
		  /* 821E2284h */ case    1:  		/* ori R11, R11, 512 */
		/* 821E2284h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821E2284h case    1:*/		return 0x821E2288;
	}
	return 0x821E2288;
} // Block from 821E2280h-821E2288h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2288);
		  /* 821E2288h */ case    0:  		/* stw R11, <#[R30]> */
		/* 821E2288h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E2288h case    0:*/		return 0x821E228C;
		  /* 821E228Ch */ case    1:  		/* b 8 */
		/* 821E228Ch case    1:*/		return 0x821E2294;
		/* 821E228Ch case    1:*/		return 0x821E2290;
	}
	return 0x821E2290;
} // Block from 821E2288h-821E2290h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2290);
		  /* 821E2290h */ case    0:  		/* li R22, 1 */
		/* 821E2290h case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821E2290h case    0:*/		return 0x821E2294;
	}
	return 0x821E2294;
} // Block from 821E2290h-821E2294h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E2294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2294);
		  /* 821E2294h */ case    0:  		/* lwz R21, <#[R21 + 4]> */
		/* 821E2294h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R21 + 0x00000004) );
		/* 821E2294h case    0:*/		return 0x821E2298;
		  /* 821E2298h */ case    1:  		/* b -876 */
		/* 821E2298h case    1:*/		return 0x821E1F2C;
		/* 821E2298h case    1:*/		return 0x821E229C;
	}
	return 0x821E229C;
} // Block from 821E2294h-821E229Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E229Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E229C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E229C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E229C);
		  /* 821E229Ch */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821E229Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821E229Ch case    0:*/		return 0x821E22A0;
		  /* 821E22A0h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821E22A0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E22B0;  }
		/* 821E22A0h case    1:*/		return 0x821E22A4;
		  /* 821E22A4h */ case    2:  		/* li R11, 0 */
		/* 821E22A4h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E22A4h case    2:*/		return 0x821E22A8;
		  /* 821E22A8h */ case    3:  		/* stfd FR28, <#[R30 + 40]> */
		/* 821E22A8h case    3:*/		cpu::mem::store64f( regs, regs.FR28, (uint32)(regs.R30 + 0x00000028) );
		/* 821E22A8h case    3:*/		return 0x821E22AC;
		  /* 821E22ACh */ case    4:  		/* stw R11, <#[R30 + 52]> */
		/* 821E22ACh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E22ACh case    4:*/		return 0x821E22B0;
	}
	return 0x821E22B0;
} // Block from 821E229Ch-821E22B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E22B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E22B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E22B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E22B0);
		  /* 821E22B0h */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821E22B0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821E22B0h case    0:*/		return 0x821E22B4;
		  /* 821E22B4h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E22B4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E22B4h case    1:*/		return 0x821E22B8;
		  /* 821E22B8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E22B8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E22B8h case    2:*/		return 0x821E22BC;
		  /* 821E22BCh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E22BCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E22CC;  }
		/* 821E22BCh case    3:*/		return 0x821E22C0;
		  /* 821E22C0h */ case    4:  		/* mr R23, R11 */
		/* 821E22C0h case    4:*/		regs.R23 = regs.R11;
		/* 821E22C0h case    4:*/		return 0x821E22C4;
		  /* 821E22C4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E22C4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E22C4h case    5:*/		return 0x821E22C8;
		  /* 821E22C8h */ case    6:  		/* bc 4, CR6_EQ, -1000 */
		/* 821E22C8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E1EE0;  }
		/* 821E22C8h case    6:*/		return 0x821E22CC;
	}
	return 0x821E22CC;
} // Block from 821E22B0h-821E22CCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E22CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E22CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E22CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E22CC);
		  /* 821E22CCh */ case    0:  		/* li R23, 0 */
		/* 821E22CCh case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821E22CCh case    0:*/		return 0x821E22D0;
		  /* 821E22D0h */ case    1:  		/* cmplwi CR6, R17, 0 */
		/* 821E22D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821E22D0h case    1:*/		return 0x821E22D4;
		  /* 821E22D4h */ case    2:  		/* bc 12, CR6_EQ, 2156 */
		/* 821E22D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E2B40;  }
		/* 821E22D4h case    2:*/		return 0x821E22D8;
		  /* 821E22D8h */ case    3:  		/* lwz R11, <#[R19 + 44]> */
		/* 821E22D8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000002C) );
		/* 821E22D8h case    3:*/		return 0x821E22DC;
		  /* 821E22DCh */ case    4:  		/* mulli R10, R23, 88 */
		/* 821E22DCh case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R23,0x58);
		/* 821E22DCh case    4:*/		return 0x821E22E0;
		  /* 821E22E0h */ case    5:  		/* add R26, R10, R11 */
		/* 821E22E0h case    5:*/		cpu::op::add<0>(regs,&regs.R26,regs.R10,regs.R11);
		/* 821E22E0h case    5:*/		return 0x821E22E4;
		  /* 821E22E4h */ case    6:  		/* lwz R11, <#[R26 + 52]> */
		/* 821E22E4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000034) );
		/* 821E22E4h case    6:*/		return 0x821E22E8;
		  /* 821E22E8h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821E22E8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E22E8h case    7:*/		return 0x821E22EC;
		  /* 821E22ECh */ case    8:  		/* bc 12, CR6_EQ, 2120 */
		/* 821E22ECh case    8:*/		if ( regs.CR[6].eq ) { return 0x821E2B34;  }
		/* 821E22ECh case    8:*/		return 0x821E22F0;
		  /* 821E22F0h */ case    9:  		/* lfd FR0, <#[R26 + 40]> */
		/* 821E22F0h case    9:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R26 + 0x00000028) );
		/* 821E22F0h case    9:*/		return 0x821E22F4;
		  /* 821E22F4h */ case   10:  		/* fcmpu CR6, FR0, FR28 */
		/* 821E22F4h case   10:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR28);
		/* 821E22F4h case   10:*/		return 0x821E22F8;
		  /* 821E22F8h */ case   11:  		/* bc 12, CR6_EQ, 2108 */
		/* 821E22F8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821E2B34;  }
		/* 821E22F8h case   11:*/		return 0x821E22FC;
		  /* 821E22FCh */ case   12:  		/* lwz R22, <#[R1 + 804]> */
		/* 821E22FCh case   12:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000324) );
		/* 821E22FCh case   12:*/		return 0x821E2300;
		  /* 821E2300h */ case   13:  		/* lwz R11, <#[R22 + 112]> */
		/* 821E2300h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000070) );
		/* 821E2300h case   13:*/		return 0x821E2304;
		  /* 821E2304h */ case   14:  		/* addi R29, R11, 1 */
		/* 821E2304h case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1);
		/* 821E2304h case   14:*/		return 0x821E2308;
		  /* 821E2308h */ case   15:  		/* stw R29, <#[R22 + 112]> */
		/* 821E2308h case   15:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R22 + 0x00000070) );
		/* 821E2308h case   15:*/		return 0x821E230C;
		  /* 821E230Ch */ case   16:  		/* lwz R11, <#[R26 + 48]> */
		/* 821E230Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 821E230Ch case   16:*/		return 0x821E2310;
		  /* 821E2310h */ case   17:  		/* stw R29, <#[R11 - 4]> */
		/* 821E2310h case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821E2310h case   17:*/		return 0x821E2314;
		  /* 821E2314h */ case   18:  		/* lwz R30, <#[R11 + 4]> */
		/* 821E2314h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821E2314h case   18:*/		return 0x821E2318;
		  /* 821E2318h */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 821E2318h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E2318h case   19:*/		return 0x821E231C;
		  /* 821E231Ch */ case   20:  		/* bc 12, CR6_EQ, 208 */
		/* 821E231Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x821E23EC;  }
		/* 821E231Ch case   20:*/		return 0x821E2320;
		  /* 821E2320h */ case   21:  		/* lwz R11, <#[R30 + 16]> */
		/* 821E2320h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821E2320h case   21:*/		return 0x821E2324;
		  /* 821E2324h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821E2324h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E2324h case   22:*/		return 0x821E2328;
		  /* 821E2328h */ case   23:  		/* bc 12, CR6_EQ, 188 */
		/* 821E2328h case   23:*/		if ( regs.CR[6].eq ) { return 0x821E23E4;  }
		/* 821E2328h case   23:*/		return 0x821E232C;
		  /* 821E232Ch */ case   24:  		/* rlwinm R31, R11, 0, 0, 31 */
		/* 821E232Ch case   24:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R31,regs.R11);
		/* 821E232Ch case   24:*/		return 0x821E2330;
		  /* 821E2330h */ case   25:  		/* rlwinm R11, R18, 27, 5, 31 */
		/* 821E2330h case   25:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R18);
		/* 821E2330h case   25:*/		return 0x821E2334;
		  /* 821E2334h */ case   26:  		/* rlwinm R10, R18, 0, 27, 31 */
		/* 821E2334h case   26:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R18);
		/* 821E2334h case   26:*/		return 0x821E2338;
		  /* 821E2338h */ case   27:  		/* addi R11, R11, 21 */
		/* 821E2338h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E2338h case   27:*/		return 0x821E233C;
		  /* 821E233Ch */ case   28:  		/* lwz R9, <#[R31 + 28]> */
		/* 821E233Ch case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 821E233Ch case   28:*/		return 0x821E2340;
		  /* 821E2340h */ case   29:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E2340h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E2340h case   29:*/		return 0x821E2344;
		  /* 821E2344h */ case   30:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821E2344h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821E2344h case   30:*/		return 0x821E2348;
		  /* 821E2348h */ case   31:  		/* srw R11, R11, R10 */
		/* 821E2348h case   31:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E2348h case   31:*/		return 0x821E234C;
		  /* 821E234Ch */ case   32:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E234Ch case   32:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E234Ch case   32:*/		return 0x821E2350;
		  /* 821E2350h */ case   33:  		/* bc 12, CR0_EQ, 148 */
		/* 821E2350h case   33:*/		if ( regs.CR[0].eq ) { return 0x821E23E4;  }
		/* 821E2350h case   33:*/		return 0x821E2354;
		  /* 821E2354h */ case   34:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E2354h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E2354h case   34:*/		return 0x821E2358;
		  /* 821E2358h */ case   35:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E2358h case   35:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E2358h case   35:*/		return 0x821E235C;
		  /* 821E235Ch */ case   36:  		/* cmplwi CR6, R11, 14336 */
		/* 821E235Ch case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E235Ch case   36:*/		return 0x821E2360;
		  /* 821E2360h */ case   37:  		/* bc 4, CR6_EQ, 108 */
		/* 821E2360h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821E23CC;  }
		/* 821E2360h case   37:*/		return 0x821E2364;
		  /* 821E2364h */ case   38:  		/* lwz R11, <#[R31 - 4]> */
		/* 821E2364h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 821E2364h case   38:*/		return 0x821E2368;
		  /* 821E2368h */ case   39:  		/* cmplw CR6, R11, R29 */
		/* 821E2368h case   39:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821E2368h case   39:*/		return 0x821E236C;
		  /* 821E236Ch */ case   40:  		/* bc 12, CR6_EQ, 120 */
		/* 821E236Ch case   40:*/		if ( regs.CR[6].eq ) { return 0x821E23E4;  }
		/* 821E236Ch case   40:*/		return 0x821E2370;
		  /* 821E2370h */ case   41:  		/* stw R29, <#[R31 - 4]> */
		/* 821E2370h case   41:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 821E2370h case   41:*/		return 0x821E2374;
		  /* 821E2374h */ case   42:  		/* lwz R11, <#[R14]> */
		/* 821E2374h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821E2374h case   42:*/		return 0x821E2378;
		  /* 821E2378h */ case   43:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E2378h case   43:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E2378h case   43:*/		return 0x821E237C;
		  /* 821E237Ch */ case   44:  		/* bc 4, CR0_EQ, 40 */
		/* 821E237Ch case   44:*/		if ( !regs.CR[0].eq ) { return 0x821E23A4;  }
		/* 821E237Ch case   44:*/		return 0x821E2380;
		  /* 821E2380h */ case   45:  		/* lwz R11, <#[R15]> */
		/* 821E2380h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821E2380h case   45:*/		return 0x821E2384;
		  /* 821E2384h */ case   46:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E2384h case   46:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E2384h case   46:*/		return 0x821E2388;
		  /* 821E2388h */ case   47:  		/* addic. R3, R11, -4 */
		/* 821E2388h case   47:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821E2388h case   47:*/		return 0x821E238C;
		  /* 821E238Ch */ case   48:  		/* bc 12, CR0_EQ, 24 */
		/* 821E238Ch case   48:*/		if ( regs.CR[0].eq ) { return 0x821E23A4;  }
		/* 821E238Ch case   48:*/		return 0x821E2390;
		  /* 821E2390h */ case   49:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E2390h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E2390h case   49:*/		return 0x821E2394;
		  /* 821E2394h */ case   50:  		/* lwz R10, <#[R3 + 12]> */
		/* 821E2394h case   50:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E2394h case   50:*/		return 0x821E2398;
		  /* 821E2398h */ case   51:  		/* addi R11, R11, 1 */
		/* 821E2398h case   51:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E2398h case   51:*/		return 0x821E239C;
		  /* 821E239Ch */ case   52:  		/* cmplw CR6, R11, R10 */
		/* 821E239Ch case   52:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E239Ch case   52:*/		return 0x821E23A0;
		  /* 821E23A0h */ case   53:  		/* bc 4, CR6_GT, 16 */
		/* 821E23A0h case   53:*/		if ( !regs.CR[6].gt ) { return 0x821E23B0;  }
		/* 821E23A0h case   53:*/		return 0x821E23A4;
	}
	return 0x821E23A4;
} // Block from 821E22CCh-821E23A4h (54 instructions)

//////////////////////////////////////////////////////
// Block at 821E23A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E23A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E23A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E23A4);
		  /* 821E23A4h */ case    0:  		/* li R4, 1 */
		/* 821E23A4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E23A4h case    0:*/		return 0x821E23A8;
		  /* 821E23A8h */ case    1:  		/* mr R3, R15 */
		/* 821E23A8h case    1:*/		regs.R3 = regs.R15;
		/* 821E23A8h case    1:*/		return 0x821E23AC;
		  /* 821E23ACh */ case    2:  		/* bl -348900 */
		/* 821E23ACh case    2:*/		regs.LR = 0x821E23B0; return 0x8218D0C8;
		/* 821E23ACh case    2:*/		return 0x821E23B0;
	}
	return 0x821E23B0;
} // Block from 821E23A4h-821E23B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E23B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E23B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E23B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E23B0);
		  /* 821E23B0h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E23B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E23B0h case    0:*/		return 0x821E23B4;
		  /* 821E23B4h */ case    1:  		/* addi R10, R11, 4 */
		/* 821E23B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E23B4h case    1:*/		return 0x821E23B8;
		  /* 821E23B8h */ case    2:  		/* addi R9, R11, 1 */
		/* 821E23B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821E23B8h case    2:*/		return 0x821E23BC;
		  /* 821E23BCh */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821E23BCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821E23BCh case    3:*/		return 0x821E23C0;
		  /* 821E23C0h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821E23C0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821E23C0h case    4:*/		return 0x821E23C4;
		  /* 821E23C4h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821E23C4h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821E23C4h case    5:*/		return 0x821E23C8;
		  /* 821E23C8h */ case    6:  		/* b 28 */
		/* 821E23C8h case    6:*/		return 0x821E23E4;
		/* 821E23C8h case    6:*/		return 0x821E23CC;
	}
	return 0x821E23CC;
} // Block from 821E23B0h-821E23CCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E23CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E23CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E23CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E23CC);
		  /* 821E23CCh */ case    0:  		/* mr R7, R26 */
		/* 821E23CCh case    0:*/		regs.R7 = regs.R26;
		/* 821E23CCh case    0:*/		return 0x821E23D0;
		  /* 821E23D0h */ case    1:  		/* mr R6, R19 */
		/* 821E23D0h case    1:*/		regs.R6 = regs.R19;
		/* 821E23D0h case    1:*/		return 0x821E23D4;
		  /* 821E23D4h */ case    2:  		/* mr R5, R30 */
		/* 821E23D4h case    2:*/		regs.R5 = regs.R30;
		/* 821E23D4h case    2:*/		return 0x821E23D8;
		  /* 821E23D8h */ case    3:  		/* mr R4, R31 */
		/* 821E23D8h case    3:*/		regs.R4 = regs.R31;
		/* 821E23D8h case    3:*/		return 0x821E23DC;
		  /* 821E23DCh */ case    4:  		/* mr R3, R22 */
		/* 821E23DCh case    4:*/		regs.R3 = regs.R22;
		/* 821E23DCh case    4:*/		return 0x821E23E0;
		  /* 821E23E0h */ case    5:  		/* bl -77032 */
		/* 821E23E0h case    5:*/		regs.LR = 0x821E23E4; return 0x821CF6F8;
		/* 821E23E0h case    5:*/		return 0x821E23E4;
	}
	return 0x821E23E4;
} // Block from 821E23CCh-821E23E4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E23E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E23E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E23E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E23E4);
		  /* 821E23E4h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821E23E4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821E23E4h case    0:*/		return 0x821E23E8;
		  /* 821E23E8h */ case    1:  		/* b -208 */
		/* 821E23E8h case    1:*/		return 0x821E2318;
		/* 821E23E8h case    1:*/		return 0x821E23EC;
	}
	return 0x821E23EC;
} // Block from 821E23E4h-821E23ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E23ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E23EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E23EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E23EC);
		  /* 821E23ECh */ case    0:  		/* lwz R11, <#[R14]> */
		/* 821E23ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821E23ECh case    0:*/		return 0x821E23F0;
		  /* 821E23F0h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E23F0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E23F0h case    1:*/		return 0x821E23F4;
		  /* 821E23F4h */ case    2:  		/* bc 4, CR0_EQ, 116 */
		/* 821E23F4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E2468;  }
		/* 821E23F4h case    2:*/		return 0x821E23F8;
		  /* 821E23F8h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821E23F8h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E23F8h case    3:*/		return 0x821E23FC;
		  /* 821E23FCh */ case    4:  		/* bc 12, CR0_EQ, 108 */
		/* 821E23FCh case    4:*/		if ( regs.CR[0].eq ) { return 0x821E2468;  }
		/* 821E23FCh case    4:*/		return 0x821E2400;
		  /* 821E2400h */ case    5:  		/* lwz R11, <#[R15]> */
		/* 821E2400h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821E2400h case    5:*/		return 0x821E2404;
		  /* 821E2404h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E2404h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E2404h case    6:*/		return 0x821E2408;
		  /* 821E2408h */ case    7:  		/* addi R4, R11, -4 */
		/* 821E2408h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821E2408h case    7:*/		return 0x821E240C;
		  /* 821E240Ch */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E240Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E240Ch case    8:*/		return 0x821E2410;
		  /* 821E2410h */ case    9:  		/* addi R10, R11, 3 */
		/* 821E2410h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821E2410h case    9:*/		return 0x821E2414;
		  /* 821E2414h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821E2414h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E2414h case   10:*/		return 0x821E2418;
		  /* 821E2418h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E2418h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E2418h case   11:*/		return 0x821E241C;
		  /* 821E241Ch */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821E241Ch case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821E241Ch case   12:*/		return 0x821E2420;
		  /* 821E2420h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821E2420h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821E2420h case   13:*/		return 0x821E2424;
		  /* 821E2424h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 821E2424h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821E2460;  }
		/* 821E2424h case   14:*/		return 0x821E2428;
		  /* 821E2428h */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821E2428h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821E2428h case   15:*/		return 0x821E242C;
		  /* 821E242Ch */ case   16:  		/* mr R3, R15 */
		/* 821E242Ch case   16:*/		regs.R3 = regs.R15;
		/* 821E242Ch case   16:*/		return 0x821E2430;
		  /* 821E2430h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E2430h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E2430h case   17:*/		return 0x821E2434;
		  /* 821E2434h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821E2434h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E2434h case   18:*/		return 0x821E2438;
		  /* 821E2438h */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E2438h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E2438h case   19:*/		return 0x821E243C;
		  /* 821E243Ch */ case   20:  		/* stw R9, <#[R10]> */
		/* 821E243Ch case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E243Ch case   20:*/		return 0x821E2440;
		  /* 821E2440h */ case   21:  		/* lwz R10, <#[R11]> */
		/* 821E2440h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E2440h case   21:*/		return 0x821E2444;
		  /* 821E2444h */ case   22:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E2444h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E2444h case   22:*/		return 0x821E2448;
		  /* 821E2448h */ case   23:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E2448h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E2448h case   23:*/		return 0x821E244C;
		  /* 821E244Ch */ case   24:  		/* stw R11, <#[R10]> */
		/* 821E244Ch case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821E244Ch case   24:*/		return 0x821E2450;
		  /* 821E2450h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821E2450h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821E2450h case   25:*/		return 0x821E2454;
		  /* 821E2454h */ case   26:  		/* addi R11, R11, 4 */
		/* 821E2454h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E2454h case   26:*/		return 0x821E2458;
		  /* 821E2458h */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821E2458h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821E2458h case   27:*/		return 0x821E245C;
		  /* 821E245Ch */ case   28:  		/* bl -591444 */
		/* 821E245Ch case   28:*/		regs.LR = 0x821E2460; return 0x82151E08;
		/* 821E245Ch case   28:*/		return 0x821E2460;
	}
	return 0x821E2460;
} // Block from 821E23ECh-821E2460h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E2460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2460);
		  /* 821E2460h */ case    0:  		/* mr R11, R31 */
		/* 821E2460h case    0:*/		regs.R11 = regs.R31;
		/* 821E2460h case    0:*/		return 0x821E2464;
		  /* 821E2464h */ case    1:  		/* b -336 */
		/* 821E2464h case    1:*/		return 0x821E2314;
		/* 821E2464h case    1:*/		return 0x821E2468;
	}
	return 0x821E2468;
} // Block from 821E2460h-821E2468h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2468);
		  /* 821E2468h */ case    0:  		/* lwz R11, <#[R19 + 40]> */
		/* 821E2468h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000028) );
		/* 821E2468h case    0:*/		return 0x821E246C;
		  /* 821E246Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E246Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E246Ch case    1:*/		return 0x821E2470;
		  /* 821E2470h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 821E2470h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E2490;  }
		/* 821E2470h case    2:*/		return 0x821E2474;
		  /* 821E2474h */ case    3:  		/* lwz R11, <#[R26]> */
		/* 821E2474h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E2474h case    3:*/		return 0x821E2478;
		  /* 821E2478h */ case    4:  		/* rlwinm. R11, R11, 0, 19, 19 */
		/* 821E2478h case    4:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R11);
		/* 821E2478h case    4:*/		return 0x821E247C;
		  /* 821E247Ch */ case    5:  		/* bc 12, CR0_EQ, 1720 */
		/* 821E247Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821E2B34;  }
		/* 821E247Ch case    5:*/		return 0x821E2480;
		  /* 821E2480h */ case    6:  		/* lwz R11, <#[R19 + 36]> */
		/* 821E2480h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000024) );
		/* 821E2480h case    6:*/		return 0x821E2484;
		  /* 821E2484h */ case    7:  		/* ori R11, R11, 512 */
		/* 821E2484h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821E2484h case    7:*/		return 0x821E2488;
		  /* 821E2488h */ case    8:  		/* stw R11, <#[R19 + 36]> */
		/* 821E2488h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000024) );
		/* 821E2488h case    8:*/		return 0x821E248C;
		  /* 821E248Ch */ case    9:  		/* b 1704 */
		/* 821E248Ch case    9:*/		return 0x821E2B34;
		/* 821E248Ch case    9:*/		return 0x821E2490;
	}
	return 0x821E2490;
} // Block from 821E2468h-821E2490h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E2490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2490);
		  /* 821E2490h */ case    0:  		/* lwz R24, <#[R19 + 40]> */
		/* 821E2490h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R19 + 0x00000028) );
		/* 821E2490h case    0:*/		return 0x821E2494;
		  /* 821E2494h */ case    1:  		/* li R21, 0 */
		/* 821E2494h case    1:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821E2494h case    1:*/		return 0x821E2498;
		  /* 821E2498h */ case    2:  		/* cmplwi CR6, R24, 0 */
		/* 821E2498h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821E2498h case    2:*/		return 0x821E249C;
		  /* 821E249Ch */ case    3:  		/* bc 12, CR6_EQ, 976 */
		/* 821E249Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821E286C;  }
		/* 821E249Ch case    3:*/		return 0x821E24A0;
		  /* 821E24A0h */ case    4:  		/* lwz R30, <#[R24]> */
		/* 821E24A0h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R24 + 0x00000000) );
		/* 821E24A0h case    4:*/		return 0x821E24A4;
		  /* 821E24A4h */ case    5:  		/* lwz R11, <#[R30 + 36]> */
		/* 821E24A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E24A4h case    5:*/		return 0x821E24A8;
		  /* 821E24A8h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E24A8h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E24A8h case    6:*/		return 0x821E24AC;
		  /* 821E24ACh */ case    7:  		/* bc 4, CR0_EQ, 36 */
		/* 821E24ACh case    7:*/		if ( !regs.CR[0].eq ) { return 0x821E24D0;  }
		/* 821E24ACh case    7:*/		return 0x821E24B0;
		  /* 821E24B0h */ case    8:  		/* lwz R11, <#[R30 + 32]> */
		/* 821E24B0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821E24B0h case    8:*/		return 0x821E24B4;
		  /* 821E24B4h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E24B4h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E24B4h case    9:*/		return 0x821E24B8;
		  /* 821E24B8h */ case   10:  		/* addic. R31, R11, -40 */
		/* 821E24B8h case   10:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821E24B8h case   10:*/		return 0x821E24BC;
		  /* 821E24BCh */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 821E24BCh case   11:*/		if ( regs.CR[0].eq ) { return 0x821E24D0;  }
		/* 821E24BCh case   11:*/		return 0x821E24C0;
		  /* 821E24C0h */ case   12:  		/* mr R3, R31 */
		/* 821E24C0h case   12:*/		regs.R3 = regs.R31;
		/* 821E24C0h case   12:*/		return 0x821E24C4;
		  /* 821E24C4h */ case   13:  		/* bl -516812 */
		/* 821E24C4h case   13:*/		regs.LR = 0x821E24C8; return 0x821641F8;
		/* 821E24C4h case   13:*/		return 0x821E24C8;
		  /* 821E24C8h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E24C8h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E24C8h case   14:*/		return 0x821E24CC;
		  /* 821E24CCh */ case   15:  		/* bc 4, CR0_EQ, 72 */
		/* 821E24CCh case   15:*/		if ( !regs.CR[0].eq ) { return 0x821E2514;  }
		/* 821E24CCh case   15:*/		return 0x821E24D0;
	}
	return 0x821E24D0;
} // Block from 821E2490h-821E24D0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E24D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E24D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E24D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E24D0);
		  /* 821E24D0h */ case    0:  		/* lwz R11, <#[R19 + 4]> */
		/* 821E24D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 821E24D0h case    0:*/		return 0x821E24D4;
		  /* 821E24D4h */ case    1:  		/* li R10, 1 */
		/* 821E24D4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821E24D4h case    1:*/		return 0x821E24D8;
		  /* 821E24D8h */ case    2:  		/* lwz R30, <#[R30 + 52]> */
		/* 821E24D8h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000034) );
		/* 821E24D8h case    2:*/		return 0x821E24DC;
		  /* 821E24DCh */ case    3:  		/* lwz R11, <#[R11 + 48]> */
		/* 821E24DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821E24DCh case    3:*/		return 0x821E24E0;
		  /* 821E24E0h */ case    4:  		/* lwz R9, <#[R30 + 40]> */
		/* 821E24E0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000028) );
		/* 821E24E0h case    4:*/		return 0x821E24E4;
		  /* 821E24E4h */ case    5:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 821E24E4h case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 821E24E4h case    5:*/		return 0x821E24E8;
		  /* 821E24E8h */ case    6:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 821E24E8h case    6:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 821E24E8h case    6:*/		return 0x821E24EC;
		  /* 821E24ECh */ case    7:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821E24ECh case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821E24ECh case    7:*/		return 0x821E24F0;
		  /* 821E24F0h */ case    8:  		/* addi R11, R11, 1 */
		/* 821E24F0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E24F0h case    8:*/		return 0x821E24F4;
		  /* 821E24F4h */ case    9:  		/* slw R10, R10, R8 */
		/* 821E24F4h case    9:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821E24F4h case    9:*/		return 0x821E24F8;
		  /* 821E24F8h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E24F8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E24F8h case   10:*/		return 0x821E24FC;
		  /* 821E24FCh */ case   11:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821E24FCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821E24FCh case   11:*/		return 0x821E2500;
		  /* 821E2500h */ case   12:  		/* and. R11, R11, R10 */
		/* 821E2500h case   12:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E2500h case   12:*/		return 0x821E2504;
		  /* 821E2504h */ case   13:  		/* bc 4, CR0_EQ, -96 */
		/* 821E2504h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821E24A4;  }
		/* 821E2504h case   13:*/		return 0x821E2508;
		  /* 821E2508h */ case   14:  		/* li R4, 4800 */
		/* 821E2508h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E2508h case   14:*/		return 0x821E250C;
		  /* 821E250Ch */ case   15:  		/* mr R3, R22 */
		/* 821E250Ch case   15:*/		regs.R3 = regs.R22;
		/* 821E250Ch case   15:*/		return 0x821E2510;
		  /* 821E2510h */ case   16:  		/* bl -591528 */
		/* 821E2510h case   16:*/		regs.LR = 0x821E2514; return 0x82151E68;
		/* 821E2510h case   16:*/		return 0x821E2514;
	}
	return 0x821E2514;
} // Block from 821E24D0h-821E2514h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E2514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2514);
		  /* 821E2514h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 821E2514h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E2514h case    0:*/		return 0x821E2518;
		  /* 821E2518h */ case    1:  		/* mr R4, R22 */
		/* 821E2518h case    1:*/		regs.R4 = regs.R22;
		/* 821E2518h case    1:*/		return 0x821E251C;
		  /* 821E251Ch */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821E251Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821E251Ch case    2:*/		return 0x821E2520;
		  /* 821E2520h */ case    3:  		/* mr R3, R31 */
		/* 821E2520h case    3:*/		regs.R3 = regs.R31;
		/* 821E2520h case    3:*/		return 0x821E2524;
		  /* 821E2524h */ case    4:  		/* rlwinm R27, R10, 14, 31, 31 */
		/* 821E2524h case    4:*/		cpu::op::rlwinm<0,14,31,31>(regs,&regs.R27,regs.R10);
		/* 821E2524h case    4:*/		return 0x821E2528;
		  /* 821E2528h */ case    5:  		/* lwz R25, <#[R11 + 12]> */
		/* 821E2528h case    5:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E2528h case    5:*/		return 0x821E252C;
		  /* 821E252Ch */ case    6:  		/* bl -515564 */
		/* 821E252Ch case    6:*/		regs.LR = 0x821E2530; return 0x82164740;
		/* 821E252Ch case    6:*/		return 0x821E2530;
		  /* 821E2530h */ case    7:  		/* rlwinm R11, R18, 27, 5, 31 */
		/* 821E2530h case    7:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R18);
		/* 821E2530h case    7:*/		return 0x821E2534;
		  /* 821E2534h */ case    8:  		/* lwz R10, <#[R3]> */
		/* 821E2534h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821E2534h case    8:*/		return 0x821E2538;
		  /* 821E2538h */ case    9:  		/* rlwinm R9, R18, 0, 27, 31 */
		/* 821E2538h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R18);
		/* 821E2538h case    9:*/		return 0x821E253C;
		  /* 821E253Ch */ case   10:  		/* addi R11, R11, 21 */
		/* 821E253Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E253Ch case   10:*/		return 0x821E2540;
		  /* 821E2540h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E2540h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E2540h case   11:*/		return 0x821E2544;
		  /* 821E2544h */ case   12:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821E2544h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821E2544h case   12:*/		return 0x821E2548;
		  /* 821E2548h */ case   13:  		/* srw R11, R11, R9 */
		/* 821E2548h case   13:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E2548h case   13:*/		return 0x821E254C;
		  /* 821E254Ch */ case   14:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E254Ch case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E254Ch case   14:*/		return 0x821E2550;
		  /* 821E2550h */ case   15:  		/* bc 4, CR0_EQ, 16 */
		/* 821E2550h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821E2560;  }
		/* 821E2550h case   15:*/		return 0x821E2554;
		  /* 821E2554h */ case   16:  		/* rlwinm R11, R27, 0, 24, 31 */
		/* 821E2554h case   16:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821E2554h case   16:*/		return 0x821E2558;
		  /* 821E2558h */ case   17:  		/* cntlzw R11, R11 */
		/* 821E2558h case   17:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821E2558h case   17:*/		return 0x821E255C;
		  /* 821E255Ch */ case   18:  		/* rlwinm R27, R11, 27, 31, 31 */
		/* 821E255Ch case   18:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R27,regs.R11);
		/* 821E255Ch case   18:*/		return 0x821E2560;
	}
	return 0x821E2560;
} // Block from 821E2514h-821E2560h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821E2560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2560);
		  /* 821E2560h */ case    0:  		/* li R10, 0 */
		/* 821E2560h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821E2560h case    0:*/		return 0x821E2564;
		  /* 821E2564h */ case    1:  		/* lwz R3, <#[R25 + 44]> */
		/* 821E2564h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x0000002C) );
		/* 821E2564h case    1:*/		return 0x821E2568;
		  /* 821E2568h */ case    2:  		/* li R9, 0 */
		/* 821E2568h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821E2568h case    2:*/		return 0x821E256C;
		  /* 821E256Ch */ case    3:  		/* li R8, 0 */
		/* 821E256Ch case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E256Ch case    3:*/		return 0x821E2570;
		  /* 821E2570h */ case    4:  		/* addi R7, R1, 164 */
		/* 821E2570h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA4);
		/* 821E2570h case    4:*/		return 0x821E2574;
		  /* 821E2574h */ case    5:  		/* addi R6, R1, 160 */
		/* 821E2574h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 821E2574h case    5:*/		return 0x821E2578;
		  /* 821E2578h */ case    6:  		/* addi R5, R1, 156 */
		/* 821E2578h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x9C);
		/* 821E2578h case    6:*/		return 0x821E257C;
		  /* 821E257Ch */ case    7:  		/* li R4, 0 */
		/* 821E257Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E257Ch case    7:*/		return 0x821E2580;
		  /* 821E2580h */ case    8:  		/* bl 266064 */
		/* 821E2580h case    8:*/		regs.LR = 0x821E2584; return 0x822234D0;
		/* 821E2580h case    8:*/		return 0x821E2584;
		  /* 821E2584h */ case    9:  		/* lwz R11, <#[R25 + 8]> */
		/* 821E2584h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821E2584h case    9:*/		return 0x821E2588;
		  /* 821E2588h */ case   10:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821E2588h case   10:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821E2588h case   10:*/		return 0x821E258C;
		  /* 821E258Ch */ case   11:  		/* cmpwi CR6, R11, 59 */
		/* 821E258Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003B);
		/* 821E258Ch case   11:*/		return 0x821E2590;
		  /* 821E2590h */ case   12:  		/* bc 12, CR6_EQ, 44 */
		/* 821E2590h case   12:*/		if ( regs.CR[6].eq ) { return 0x821E25BC;  }
		/* 821E2590h case   12:*/		return 0x821E2594;
		  /* 821E2594h */ case   13:  		/* cmpwi CR6, R11, 60 */
		/* 821E2594h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003C);
		/* 821E2594h case   13:*/		return 0x821E2598;
		  /* 821E2598h */ case   14:  		/* bc 12, CR6_EQ, 48 */
		/* 821E2598h case   14:*/		if ( regs.CR[6].eq ) { return 0x821E25C8;  }
		/* 821E2598h case   14:*/		return 0x821E259C;
		  /* 821E259Ch */ case   15:  		/* cmpwi CR6, R11, 61 */
		/* 821E259Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003D);
		/* 821E259Ch case   15:*/		return 0x821E25A0;
		  /* 821E25A0h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 821E25A0h case   16:*/		if ( regs.CR[6].eq ) { return 0x821E25B4;  }
		/* 821E25A0h case   16:*/		return 0x821E25A4;
		  /* 821E25A4h */ case   17:  		/* cmpwi CR6, R11, 62 */
		/* 821E25A4h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003E);
		/* 821E25A4h case   17:*/		return 0x821E25A8;
		  /* 821E25A8h */ case   18:  		/* bc 4, CR6_EQ, 17488 */
		/* 821E25A8h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821E69F8;  }
		/* 821E25A8h case   18:*/		return 0x821E25AC;
		  /* 821E25ACh */ case   19:  		/* li R28, 18 */
		/* 821E25ACh case   19:*/		cpu::op::li<0>(regs,&regs.R28,0x12);
		/* 821E25ACh case   19:*/		return 0x821E25B0;
		  /* 821E25B0h */ case   20:  		/* b 28 */
		/* 821E25B0h case   20:*/		return 0x821E25CC;
		/* 821E25B0h case   20:*/		return 0x821E25B4;
	}
	return 0x821E25B4;
} // Block from 821E2560h-821E25B4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821E25B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E25B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E25B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E25B4);
		  /* 821E25B4h */ case    0:  		/* li R28, 16 */
		/* 821E25B4h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x10);
		/* 821E25B4h case    0:*/		return 0x821E25B8;
		  /* 821E25B8h */ case    1:  		/* b 20 */
		/* 821E25B8h case    1:*/		return 0x821E25CC;
		/* 821E25B8h case    1:*/		return 0x821E25BC;
	}
	return 0x821E25BC;
} // Block from 821E25B4h-821E25BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E25BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E25BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E25BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E25BC);
		  /* 821E25BCh */ case    0:  		/* rlwinm R11, R27, 0, 24, 31 */
		/* 821E25BCh case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821E25BCh case    0:*/		return 0x821E25C0;
		  /* 821E25C0h */ case    1:  		/* cntlzw R11, R11 */
		/* 821E25C0h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821E25C0h case    1:*/		return 0x821E25C4;
		  /* 821E25C4h */ case    2:  		/* rlwinm R27, R11, 27, 31, 31 */
		/* 821E25C4h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R27,regs.R11);
		/* 821E25C4h case    2:*/		return 0x821E25C8;
	}
	return 0x821E25C8;
} // Block from 821E25BCh-821E25C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E25C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E25C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E25C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E25C8);
		  /* 821E25C8h */ case    0:  		/* li R28, 20 */
		/* 821E25C8h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x14);
		/* 821E25C8h case    0:*/		return 0x821E25CC;
	}
	return 0x821E25CC;
} // Block from 821E25C8h-821E25CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E25CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E25CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E25CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E25CC);
		  /* 821E25CCh */ case    0:  		/* li R4, 1 */
		/* 821E25CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E25CCh case    0:*/		return 0x821E25D0;
		  /* 821E25D0h */ case    1:  		/* fmr FR4, FR29 */
		/* 821E25D0h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821E25D0h case    1:*/		return 0x821E25D4;
		  /* 821E25D4h */ case    2:  		/* mr R3, R22 */
		/* 821E25D4h case    2:*/		regs.R3 = regs.R22;
		/* 821E25D4h case    2:*/		return 0x821E25D8;
		  /* 821E25D8h */ case    3:  		/* fmr FR3, FR29 */
		/* 821E25D8h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821E25D8h case    3:*/		return 0x821E25DC;
		  /* 821E25DCh */ case    4:  		/* fmr FR2, FR29 */
		/* 821E25DCh case    4:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821E25DCh case    4:*/		return 0x821E25E0;
		  /* 821E25E0h */ case    5:  		/* fmr FR1, FR29 */
		/* 821E25E0h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821E25E0h case    5:*/		return 0x821E25E4;
		  /* 821E25E4h */ case    6:  		/* bl 296308 */
		/* 821E25E4h case    6:*/		regs.LR = 0x821E25E8; return 0x8222AB58;
		/* 821E25E4h case    6:*/		return 0x821E25E8;
		  /* 821E25E8h */ case    7:  		/* addi R11, R1, 136 */
		/* 821E25E8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x88);
		/* 821E25E8h case    7:*/		return 0x821E25EC;
		  /* 821E25ECh */ case    8:  		/* stw R3, <#[R1 + 92]> */
		/* 821E25ECh case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000005C) );
		/* 821E25ECh case    8:*/		return 0x821E25F0;
		  /* 821E25F0h */ case    9:  		/* stw R21, <#[R1 + 84]> */
		/* 821E25F0h case    9:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000054) );
		/* 821E25F0h case    9:*/		return 0x821E25F4;
		  /* 821E25F4h */ case   10:  		/* mr R29, R3 */
		/* 821E25F4h case   10:*/		regs.R29 = regs.R3;
		/* 821E25F4h case   10:*/		return 0x821E25F8;
		  /* 821E25F8h */ case   11:  		/* stw R11, <#[R1 + 116]> */
		/* 821E25F8h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821E25F8h case   11:*/		return 0x821E25FC;
		  /* 821E25FCh */ case   12:  		/* mr R10, R28 */
		/* 821E25FCh case   12:*/		regs.R10 = regs.R28;
		/* 821E25FCh case   12:*/		return 0x821E2600;
		  /* 821E2600h */ case   13:  		/* stw R21, <#[R1 + 100]> */
		/* 821E2600h case   13:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000064) );
		/* 821E2600h case   13:*/		return 0x821E2604;
		  /* 821E2604h */ case   14:  		/* mr R5, R27 */
		/* 821E2604h case   14:*/		regs.R5 = regs.R27;
		/* 821E2604h case   14:*/		return 0x821E2608;
		  /* 821E2608h */ case   15:  		/* stw R21, <#[R1 + 108]> */
		/* 821E2608h case   15:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x0000006C) );
		/* 821E2608h case   15:*/		return 0x821E260C;
		  /* 821E260Ch */ case   16:  		/* mr R4, R26 */
		/* 821E260Ch case   16:*/		regs.R4 = regs.R26;
		/* 821E260Ch case   16:*/		return 0x821E2610;
		  /* 821E2610h */ case   17:  		/* mr R3, R22 */
		/* 821E2610h case   17:*/		regs.R3 = regs.R22;
		/* 821E2610h case   17:*/		return 0x821E2614;
		  /* 821E2614h */ case   18:  		/* lwz R6, <#[R25 + 44]> */
		/* 821E2614h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x0000002C) );
		/* 821E2614h case   18:*/		return 0x821E2618;
		  /* 821E2618h */ case   19:  		/* lwz R9, <#[R1 + 164]> */
		/* 821E2618h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000A4) );
		/* 821E2618h case   19:*/		return 0x821E261C;
		  /* 821E261Ch */ case   20:  		/* lwz R8, <#[R1 + 160]> */
		/* 821E261Ch case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A0) );
		/* 821E261Ch case   20:*/		return 0x821E2620;
		  /* 821E2620h */ case   21:  		/* lwz R7, <#[R1 + 156]> */
		/* 821E2620h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000009C) );
		/* 821E2620h case   21:*/		return 0x821E2624;
		  /* 821E2624h */ case   22:  		/* stw R21, <#[R1 + 136]> */
		/* 821E2624h case   22:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000088) );
		/* 821E2624h case   22:*/		return 0x821E2628;
		  /* 821E2628h */ case   23:  		/* bl -148576 */
		/* 821E2628h case   23:*/		regs.LR = 0x821E262C; return 0x821BE1C8;
		/* 821E2628h case   23:*/		return 0x821E262C;
		  /* 821E262Ch */ case   24:  		/* addi R11, R3, -3 */
		/* 821E262Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFFD);
		/* 821E262Ch case   24:*/		return 0x821E2630;
		  /* 821E2630h */ case   25:  		/* addi R10, R3, -2 */
		/* 821E2630h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xFFFFFFFE);
		/* 821E2630h case   25:*/		return 0x821E2634;
		  /* 821E2634h */ case   26:  		/* cntlzw R11, R11 */
		/* 821E2634h case   26:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821E2634h case   26:*/		return 0x821E2638;
		  /* 821E2638h */ case   27:  		/* cntlzw R10, R10 */
		/* 821E2638h case   27:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821E2638h case   27:*/		return 0x821E263C;
		  /* 821E263Ch */ case   28:  		/* rlwinm R31, R11, 27, 31, 31 */
		/* 821E263Ch case   28:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R31,regs.R11);
		/* 821E263Ch case   28:*/		return 0x821E2640;
		  /* 821E2640h */ case   29:  		/* rlwinm R30, R10, 27, 31, 31 */
		/* 821E2640h case   29:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R30,regs.R10);
		/* 821E2640h case   29:*/		return 0x821E2644;
		  /* 821E2644h */ case   30:  		/* cmpwi CR6, R3, 1 */
		/* 821E2644h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 821E2644h case   30:*/		return 0x821E2648;
		  /* 821E2648h */ case   31:  		/* bc 4, CR6_EQ, 432 */
		/* 821E2648h case   31:*/		if ( !regs.CR[6].eq ) { return 0x821E27F8;  }
		/* 821E2648h case   31:*/		return 0x821E264C;
		  /* 821E264Ch */ case   32:  		/* lwz R11, <#[R1 + 164]> */
		/* 821E264Ch case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 821E264Ch case   32:*/		return 0x821E2650;
		  /* 821E2650h */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 821E2650h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E2650h case   33:*/		return 0x821E2654;
		  /* 821E2654h */ case   34:  		/* bc 4, CR6_EQ, 420 */
		/* 821E2654h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821E27F8;  }
		/* 821E2654h case   34:*/		return 0x821E2658;
		  /* 821E2658h */ case   35:  		/* lwz R11, <#[R1 + 156]> */
		/* 821E2658h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 821E2658h case   35:*/		return 0x821E265C;
		  /* 821E265Ch */ case   36:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E265Ch case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E265Ch case   36:*/		return 0x821E2660;
		  /* 821E2660h */ case   37:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821E2660h case   37:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821E2660h case   37:*/		return 0x821E2664;
		  /* 821E2664h */ case   38:  		/* cmplwi CR6, R10, 256 */
		/* 821E2664h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000100);
		/* 821E2664h case   38:*/		return 0x821E2668;
		  /* 821E2668h */ case   39:  		/* bc 4, CR6_EQ, 400 */
		/* 821E2668h case   39:*/		if ( !regs.CR[6].eq ) { return 0x821E27F8;  }
		/* 821E2668h case   39:*/		return 0x821E266C;
		  /* 821E266Ch */ case   40:  		/* lwz R10, <#[R1 + 160]> */
		/* 821E266Ch case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 821E266Ch case   40:*/		return 0x821E2670;
		  /* 821E2670h */ case   41:  		/* lhz R11, <#[R11 + 14]> */
		/* 821E2670h case   41:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821E2670h case   41:*/		return 0x821E2674;
		  /* 821E2674h */ case   42:  		/* rlwinm R10, R10, 2, 16, 29 */
		/* 821E2674h case   42:*/		cpu::op::rlwinm<0,2,16,29>(regs,&regs.R10,regs.R10);
		/* 821E2674h case   42:*/		return 0x821E2678;
		  /* 821E2678h */ case   43:  		/* srw R11, R11, R10 */
		/* 821E2678h case   43:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E2678h case   43:*/		return 0x821E267C;
		  /* 821E267Ch */ case   44:  		/* rlwinm R11, R11, 0, 29, 30 */
		/* 821E267Ch case   44:*/		cpu::op::rlwinm<0,0,29,30>(regs,&regs.R11,regs.R11);
		/* 821E267Ch case   44:*/		return 0x821E2680;
		  /* 821E2680h */ case   45:  		/* cmplwi CR6, R11, 6 */
		/* 821E2680h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821E2680h case   45:*/		return 0x821E2684;
		  /* 821E2684h */ case   46:  		/* bc 4, CR6_EQ, 372 */
		/* 821E2684h case   46:*/		if ( !regs.CR[6].eq ) { return 0x821E27F8;  }
		/* 821E2684h case   46:*/		return 0x821E2688;
		  /* 821E2688h */ case   47:  		/* cmpwi CR6, R28, 20 */
		/* 821E2688h case   47:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000014);
		/* 821E2688h case   47:*/		return 0x821E268C;
		  /* 821E268Ch */ case   48:  		/* bc 12, CR6_EQ, 12 */
		/* 821E268Ch case   48:*/		if ( regs.CR[6].eq ) { return 0x821E2698;  }
		/* 821E268Ch case   48:*/		return 0x821E2690;
		  /* 821E2690h */ case   49:  		/* cmpwi CR6, R28, 16 */
		/* 821E2690h case   49:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000010);
		/* 821E2690h case   49:*/		return 0x821E2694;
		  /* 821E2694h */ case   50:  		/* bc 4, CR6_EQ, 356 */
		/* 821E2694h case   50:*/		if ( !regs.CR[6].eq ) { return 0x821E27F8;  }
		/* 821E2694h case   50:*/		return 0x821E2698;
	}
	return 0x821E2698;
} // Block from 821E25CCh-821E2698h (51 instructions)

//////////////////////////////////////////////////////
// Block at 821E2698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2698);
		  /* 821E2698h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 821E2698h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821E2698h case    0:*/		return 0x821E269C;
		  /* 821E269Ch */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E269Ch case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E269Ch case    1:*/		return 0x821E26A0;
		  /* 821E26A0h */ case    2:  		/* cmplwi CR6, R11, 16000 */
		/* 821E26A0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821E26A0h case    2:*/		return 0x821E26A4;
		  /* 821E26A4h */ case    3:  		/* bc 4, CR6_EQ, 340 */
		/* 821E26A4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821E27F8;  }
		/* 821E26A4h case    3:*/		return 0x821E26A8;
		  /* 821E26A8h */ case    4:  		/* li R5, 0 */
		/* 821E26A8h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E26A8h case    4:*/		return 0x821E26AC;
		  /* 821E26ACh */ case    5:  		/* li R4, 0 */
		/* 821E26ACh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E26ACh case    5:*/		return 0x821E26B0;
		  /* 821E26B0h */ case    6:  		/* mr R3, R29 */
		/* 821E26B0h case    6:*/		regs.R3 = regs.R29;
		/* 821E26B0h case    6:*/		return 0x821E26B4;
		  /* 821E26B4h */ case    7:  		/* bl 258028 */
		/* 821E26B4h case    7:*/		regs.LR = 0x821E26B8; return 0x822216A0;
		/* 821E26B4h case    7:*/		return 0x821E26B8;
		  /* 821E26B8h */ case    8:  		/* fcmpu CR6, FR1, FR28 */
		/* 821E26B8h case    8:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR28);
		/* 821E26B8h case    8:*/		return 0x821E26BC;
		  /* 821E26BCh */ case    9:  		/* bc 4, CR6_EQ, 316 */
		/* 821E26BCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x821E27F8;  }
		/* 821E26BCh case    9:*/		return 0x821E26C0;
		  /* 821E26C0h */ case   10:  		/* lwz R11, <#[R1 + 164]> */
		/* 821E26C0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 821E26C0h case   10:*/		return 0x821E26C4;
		  /* 821E26C4h */ case   11:  		/* lwz R7, <#[R1 + 156]> */
		/* 821E26C4h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000009C) );
		/* 821E26C4h case   11:*/		return 0x821E26C8;
		  /* 821E26C8h */ case   12:  		/* lwz R4, <#[R1 + 160]> */
		/* 821E26C8h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000A0) );
		/* 821E26C8h case   12:*/		return 0x821E26CC;
		  /* 821E26CCh */ case   13:  		/* stw R11, <#[R1 + 204]> */
		/* 821E26CCh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000CC) );
		/* 821E26CCh case   13:*/		return 0x821E26D0;
		  /* 821E26D0h */ case   14:  		/* stw R7, <#[R1 + 196]> */
		/* 821E26D0h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000000C4) );
		/* 821E26D0h case   14:*/		return 0x821E26D4;
		  /* 821E26D4h */ case   15:  		/* stw R4, <#[R1 + 192]> */
		/* 821E26D4h case   15:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000000C0) );
		/* 821E26D4h case   15:*/		return 0x821E26D8;
		  /* 821E26D8h */ case   16:  		/* lwz R29, <#[R7 + 48]> */
		/* 821E26D8h case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R7 + 0x00000030) );
		/* 821E26D8h case   16:*/		return 0x821E26DC;
		  /* 821E26DCh */ case   17:  		/* li R10, 0 */
		/* 821E26DCh case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821E26DCh case   17:*/		return 0x821E26E0;
		  /* 821E26E0h */ case   18:  		/* li R9, 0 */
		/* 821E26E0h case   18:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821E26E0h case   18:*/		return 0x821E26E4;
		  /* 821E26E4h */ case   19:  		/* mr R3, R29 */
		/* 821E26E4h case   19:*/		regs.R3 = regs.R29;
		/* 821E26E4h case   19:*/		return 0x821E26E8;
		  /* 821E26E8h */ case   20:  		/* li R8, 0 */
		/* 821E26E8h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E26E8h case   20:*/		return 0x821E26EC;
		  /* 821E26ECh */ case   21:  		/* addi R7, R1, 164 */
		/* 821E26ECh case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA4);
		/* 821E26ECh case   21:*/		return 0x821E26F0;
		  /* 821E26F0h */ case   22:  		/* addi R6, R1, 160 */
		/* 821E26F0h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 821E26F0h case   22:*/		return 0x821E26F4;
		  /* 821E26F4h */ case   23:  		/* addi R5, R1, 156 */
		/* 821E26F4h case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x9C);
		/* 821E26F4h case   23:*/		return 0x821E26F8;
		  /* 821E26F8h */ case   24:  		/* bl 265688 */
		/* 821E26F8h case   24:*/		regs.LR = 0x821E26FC; return 0x822234D0;
		/* 821E26F8h case   24:*/		return 0x821E26FC;
		  /* 821E26FCh */ case   25:  		/* addi R10, R1, 136 */
		/* 821E26FCh case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x88);
		/* 821E26FCh case   25:*/		return 0x821E2700;
		  /* 821E2700h */ case   26:  		/* mr R6, R29 */
		/* 821E2700h case   26:*/		regs.R6 = regs.R29;
		/* 821E2700h case   26:*/		return 0x821E2704;
		  /* 821E2704h */ case   27:  		/* lwz R9, <#[R1 + 164]> */
		/* 821E2704h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000A4) );
		/* 821E2704h case   27:*/		return 0x821E2708;
		  /* 821E2708h */ case   28:  		/* mr R5, R27 */
		/* 821E2708h case   28:*/		regs.R5 = regs.R27;
		/* 821E2708h case   28:*/		return 0x821E270C;
		  /* 821E270Ch */ case   29:  		/* lwz R8, <#[R1 + 160]> */
		/* 821E270Ch case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A0) );
		/* 821E270Ch case   29:*/		return 0x821E2710;
		  /* 821E2710h */ case   30:  		/* mr R4, R26 */
		/* 821E2710h case   30:*/		regs.R4 = regs.R26;
		/* 821E2710h case   30:*/		return 0x821E2714;
		  /* 821E2714h */ case   31:  		/* lwz R7, <#[R1 + 156]> */
		/* 821E2714h case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000009C) );
		/* 821E2714h case   31:*/		return 0x821E2718;
		  /* 821E2718h */ case   32:  		/* mr R3, R22 */
		/* 821E2718h case   32:*/		regs.R3 = regs.R22;
		/* 821E2718h case   32:*/		return 0x821E271C;
		  /* 821E271Ch */ case   33:  		/* bl -147532 */
		/* 821E271Ch case   33:*/		regs.LR = 0x821E2720; return 0x821BE6D0;
		/* 821E271Ch case   33:*/		return 0x821E2720;
		  /* 821E2720h */ case   34:  		/* lwz R11, <#[R1 + 196]> */
		/* 821E2720h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C4) );
		/* 821E2720h case   34:*/		return 0x821E2724;
		  /* 821E2724h */ case   35:  		/* addi R9, R3, -3 */
		/* 821E2724h case   35:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R3,0xFFFFFFFD);
		/* 821E2724h case   35:*/		return 0x821E2728;
		  /* 821E2728h */ case   36:  		/* lwz R4, <#[R1 + 192]> */
		/* 821E2728h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C0) );
		/* 821E2728h case   36:*/		return 0x821E272C;
		  /* 821E272Ch */ case   37:  		/* addi R8, R3, -2 */
		/* 821E272Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R3,0xFFFFFFFE);
		/* 821E272Ch case   37:*/		return 0x821E2730;
		  /* 821E2730h */ case   38:  		/* cntlzw R9, R9 */
		/* 821E2730h case   38:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 821E2730h case   38:*/		return 0x821E2734;
		  /* 821E2734h */ case   39:  		/* cntlzw R8, R8 */
		/* 821E2734h case   39:*/		cpu::op::cntlzw<0>(regs,&regs.R8,regs.R8);
		/* 821E2734h case   39:*/		return 0x821E2738;
		  /* 821E2738h */ case   40:  		/* lwz R29, <#[R11 + 44]> */
		/* 821E2738h case   40:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x0000002C) );
		/* 821E2738h case   40:*/		return 0x821E273C;
		  /* 821E273Ch */ case   41:  		/* rlwinm R11, R9, 27, 31, 31 */
		/* 821E273Ch case   41:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R9);
		/* 821E273Ch case   41:*/		return 0x821E2740;
		  /* 821E2740h */ case   42:  		/* rlwinm R28, R8, 27, 31, 31 */
		/* 821E2740h case   42:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R28,regs.R8);
		/* 821E2740h case   42:*/		return 0x821E2744;
		  /* 821E2744h */ case   43:  		/* li R10, 0 */
		/* 821E2744h case   43:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821E2744h case   43:*/		return 0x821E2748;
		  /* 821E2748h */ case   44:  		/* li R9, 0 */
		/* 821E2748h case   44:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821E2748h case   44:*/		return 0x821E274C;
		  /* 821E274Ch */ case   45:  		/* li R8, 0 */
		/* 821E274Ch case   45:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E274Ch case   45:*/		return 0x821E2750;
		  /* 821E2750h */ case   46:  		/* addi R7, R1, 204 */
		/* 821E2750h case   46:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xCC);
		/* 821E2750h case   46:*/		return 0x821E2754;
		  /* 821E2754h */ case   47:  		/* addi R6, R1, 192 */
		/* 821E2754h case   47:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 821E2754h case   47:*/		return 0x821E2758;
		  /* 821E2758h */ case   48:  		/* addi R5, R1, 196 */
		/* 821E2758h case   48:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC4);
		/* 821E2758h case   48:*/		return 0x821E275C;
		  /* 821E275Ch */ case   49:  		/* mr R3, R29 */
		/* 821E275Ch case   49:*/		regs.R3 = regs.R29;
		/* 821E275Ch case   49:*/		return 0x821E2760;
		  /* 821E2760h */ case   50:  		/* or R31, R11, R31 */
		/* 821E2760h case   50:*/		cpu::op::or<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821E2760h case   50:*/		return 0x821E2764;
		  /* 821E2764h */ case   51:  		/* or R30, R28, R30 */
		/* 821E2764h case   51:*/		cpu::op::or<0>(regs,&regs.R30,regs.R28,regs.R30);
		/* 821E2764h case   51:*/		return 0x821E2768;
		  /* 821E2768h */ case   52:  		/* bl 265576 */
		/* 821E2768h case   52:*/		regs.LR = 0x821E276C; return 0x822234D0;
		/* 821E2768h case   52:*/		return 0x821E276C;
		  /* 821E276Ch */ case   53:  		/* lwz R7, <#[R1 + 196]> */
		/* 821E276Ch case   53:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000C4) );
		/* 821E276Ch case   53:*/		return 0x821E2770;
		  /* 821E2770h */ case   54:  		/* lwz R9, <#[R1 + 204]> */
		/* 821E2770h case   54:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000CC) );
		/* 821E2770h case   54:*/		return 0x821E2774;
		  /* 821E2774h */ case   55:  		/* lwz R4, <#[R1 + 192]> */
		/* 821E2774h case   55:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C0) );
		/* 821E2774h case   55:*/		return 0x821E2778;
		  /* 821E2778h */ case   56:  		/* lwz R11, <#[R7 + 8]> */
		/* 821E2778h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 821E2778h case   56:*/		return 0x821E277C;
		  /* 821E277Ch */ case   57:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E277Ch case   57:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E277Ch case   57:*/		return 0x821E2780;
		  /* 821E2780h */ case   58:  		/* cmplwi CR6, R11, 256 */
		/* 821E2780h case   58:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821E2780h case   58:*/		return 0x821E2784;
		  /* 821E2784h */ case   59:  		/* bc 4, CR6_EQ, 36 */
		/* 821E2784h case   59:*/		if ( !regs.CR[6].eq ) { return 0x821E27A8;  }
		/* 821E2784h case   59:*/		return 0x821E2788;
		  /* 821E2788h */ case   60:  		/* cmplwi CR6, R9, 0 */
		/* 821E2788h case   60:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E2788h case   60:*/		return 0x821E278C;
		  /* 821E278Ch */ case   61:  		/* bc 4, CR6_EQ, 28 */
		/* 821E278Ch case   61:*/		if ( !regs.CR[6].eq ) { return 0x821E27A8;  }
		/* 821E278Ch case   61:*/		return 0x821E2790;
		  /* 821E2790h */ case   62:  		/* lhz R11, <#[R7 + 14]> */
		/* 821E2790h case   62:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000000E) );
		/* 821E2790h case   62:*/		return 0x821E2794;
		  /* 821E2794h */ case   63:  		/* rlwinm R10, R4, 2, 16, 29 */
		/* 821E2794h case   63:*/		cpu::op::rlwinm<0,2,16,29>(regs,&regs.R10,regs.R4);
		/* 821E2794h case   63:*/		return 0x821E2798;
		  /* 821E2798h */ case   64:  		/* srw R11, R11, R10 */
		/* 821E2798h case   64:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E2798h case   64:*/		return 0x821E279C;
		  /* 821E279Ch */ case   65:  		/* rlwinm R11, R11, 0, 29, 30 */
		/* 821E279Ch case   65:*/		cpu::op::rlwinm<0,0,29,30>(regs,&regs.R11,regs.R11);
		/* 821E279Ch case   65:*/		return 0x821E27A0;
		  /* 821E27A0h */ case   66:  		/* cmplwi CR6, R11, 6 */
		/* 821E27A0h case   66:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821E27A0h case   66:*/		return 0x821E27A4;
		  /* 821E27A4h */ case   67:  		/* bc 12, CR6_EQ, -204 */
		/* 821E27A4h case   67:*/		if ( regs.CR[6].eq ) { return 0x821E26D8;  }
		/* 821E27A4h case   67:*/		return 0x821E27A8;
	}
	return 0x821E27A8;
} // Block from 821E2698h-821E27A8h (68 instructions)

//////////////////////////////////////////////////////
// Block at 821E27A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E27A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E27A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E27A8);
		  /* 821E27A8h */ case    0:  		/* mr R8, R4 */
		/* 821E27A8h case    0:*/		regs.R8 = regs.R4;
		/* 821E27A8h case    0:*/		return 0x821E27AC;
		  /* 821E27ACh */ case    1:  		/* addi R10, R1, 136 */
		/* 821E27ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x88);
		/* 821E27ACh case    1:*/		return 0x821E27B0;
		  /* 821E27B0h */ case    2:  		/* mr R6, R29 */
		/* 821E27B0h case    2:*/		regs.R6 = regs.R29;
		/* 821E27B0h case    2:*/		return 0x821E27B4;
		  /* 821E27B4h */ case    3:  		/* mr R5, R27 */
		/* 821E27B4h case    3:*/		regs.R5 = regs.R27;
		/* 821E27B4h case    3:*/		return 0x821E27B8;
		  /* 821E27B8h */ case    4:  		/* mr R4, R26 */
		/* 821E27B8h case    4:*/		regs.R4 = regs.R26;
		/* 821E27B8h case    4:*/		return 0x821E27BC;
		  /* 821E27BCh */ case    5:  		/* mr R3, R22 */
		/* 821E27BCh case    5:*/		regs.R3 = regs.R22;
		/* 821E27BCh case    5:*/		return 0x821E27C0;
		  /* 821E27C0h */ case    6:  		/* bl -147696 */
		/* 821E27C0h case    6:*/		regs.LR = 0x821E27C4; return 0x821BE6D0;
		/* 821E27C0h case    6:*/		return 0x821E27C4;
		  /* 821E27C4h */ case    7:  		/* addi R11, R3, -3 */
		/* 821E27C4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFFD);
		/* 821E27C4h case    7:*/		return 0x821E27C8;
		  /* 821E27C8h */ case    8:  		/* addi R10, R3, -2 */
		/* 821E27C8h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xFFFFFFFE);
		/* 821E27C8h case    8:*/		return 0x821E27CC;
		  /* 821E27CCh */ case    9:  		/* cntlzw R11, R11 */
		/* 821E27CCh case    9:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821E27CCh case    9:*/		return 0x821E27D0;
		  /* 821E27D0h */ case   10:  		/* cntlzw R10, R10 */
		/* 821E27D0h case   10:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821E27D0h case   10:*/		return 0x821E27D4;
		  /* 821E27D4h */ case   11:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821E27D4h case   11:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821E27D4h case   11:*/		return 0x821E27D8;
		  /* 821E27D8h */ case   12:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 821E27D8h case   12:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 821E27D8h case   12:*/		return 0x821E27DC;
		  /* 821E27DCh */ case   13:  		/* or R31, R11, R31 */
		/* 821E27DCh case   13:*/		cpu::op::or<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821E27DCh case   13:*/		return 0x821E27E0;
		  /* 821E27E0h */ case   14:  		/* or R30, R10, R30 */
		/* 821E27E0h case   14:*/		cpu::op::or<0>(regs,&regs.R30,regs.R10,regs.R30);
		/* 821E27E0h case   14:*/		return 0x821E27E4;
		  /* 821E27E4h */ case   15:  		/* rlwinm. R11, R31, 0, 24, 31 */
		/* 821E27E4h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R31);
		/* 821E27E4h case   15:*/		return 0x821E27E8;
		  /* 821E27E8h */ case   16:  		/* bc 12, CR0_EQ, 16 */
		/* 821E27E8h case   16:*/		if ( regs.CR[0].eq ) { return 0x821E27F8;  }
		/* 821E27E8h case   16:*/		return 0x821E27EC;
		  /* 821E27ECh */ case   17:  		/* lwz R11, <#[R26]> */
		/* 821E27ECh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E27ECh case   17:*/		return 0x821E27F0;
		  /* 821E27F0h */ case   18:  		/* ori R11, R11, 512 */
		/* 821E27F0h case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821E27F0h case   18:*/		return 0x821E27F4;
		  /* 821E27F4h */ case   19:  		/* stw R11, <#[R26]> */
		/* 821E27F4h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E27F4h case   19:*/		return 0x821E27F8;
	}
	return 0x821E27F8;
} // Block from 821E27A8h-821E27F8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821E27F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E27F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E27F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E27F8);
		  /* 821E27F8h */ case    0:  		/* rlwinm. R11, R31, 0, 24, 31 */
		/* 821E27F8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R31);
		/* 821E27F8h case    0:*/		return 0x821E27FC;
		  /* 821E27FCh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821E27FCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E2808;  }
		/* 821E27FCh case    1:*/		return 0x821E2800;
		  /* 821E2800h */ case    2:  		/* rlwinm. R10, R30, 0, 24, 31 */
		/* 821E2800h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R30);
		/* 821E2800h case    2:*/		return 0x821E2804;
		  /* 821E2804h */ case    3:  		/* bc 12, CR0_EQ, 96 */
		/* 821E2804h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E2864;  }
		/* 821E2804h case    3:*/		return 0x821E2808;
	}
	return 0x821E2808;
} // Block from 821E27F8h-821E2808h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E2808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2808);
		  /* 821E2808h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E2808h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E2808h case    0:*/		return 0x821E280C;
		  /* 821E280Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821E280Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E281C;  }
		/* 821E280Ch case    1:*/		return 0x821E2810;
		  /* 821E2810h */ case    2:  		/* lwz R11, <#[R26]> */
		/* 821E2810h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E2810h case    2:*/		return 0x821E2814;
		  /* 821E2814h */ case    3:  		/* ori R11, R11, 256 */
		/* 821E2814h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821E2814h case    3:*/		return 0x821E2818;
		  /* 821E2818h */ case    4:  		/* stw R11, <#[R26]> */
		/* 821E2818h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E2818h case    4:*/		return 0x821E281C;
	}
	return 0x821E281C;
} // Block from 821E2808h-821E281Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E281Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E281C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E281C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E281C);
		  /* 821E281Ch */ case    0:  		/* li R5, 40 */
		/* 821E281Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x28);
		/* 821E281Ch case    0:*/		return 0x821E2820;
		  /* 821E2820h */ case    1:  		/* li R4, 20 */
		/* 821E2820h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 821E2820h case    1:*/		return 0x821E2824;
		  /* 821E2824h */ case    2:  		/* mr R3, R22 */
		/* 821E2824h case    2:*/		regs.R3 = regs.R22;
		/* 821E2824h case    2:*/		return 0x821E2828;
		  /* 821E2828h */ case    3:  		/* bl -515896 */
		/* 821E2828h case    3:*/		regs.LR = 0x821E282C; return 0x821648F0;
		/* 821E2828h case    3:*/		return 0x821E282C;
		  /* 821E282Ch */ case    4:  		/* li R11, 5 */
		/* 821E282Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 821E282Ch case    4:*/		return 0x821E2830;
		  /* 821E2830h */ case    5:  		/* addi R10, R24, -4 */
		/* 821E2830h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R24,0xFFFFFFFC);
		/* 821E2830h case    5:*/		return 0x821E2834;
		  /* 821E2834h */ case    6:  		/* addi R9, R3, -4 */
		/* 821E2834h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R3,0xFFFFFFFC);
		/* 821E2834h case    6:*/		return 0x821E2838;
		  /* 821E2838h */ case    7:  		/* mtspr CTR, R11 */
		/* 821E2838h case    7:*/		regs.CTR = regs.R11;
		/* 821E2838h case    7:*/		return 0x821E283C;
		  /* 821E283Ch */ case    8:  		/* lwzu R11, <#[R10 + 4]> */
		/* 821E283Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821E283Ch case    8:*/		return 0x821E2840;
		  /* 821E2840h */ case    9:  		/* stwu R11, <#[R9 + 4]> */
		/* 821E2840h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 821E2840h case    9:*/		return 0x821E2844;
		  /* 821E2844h */ case   10:  		/* bc 16, CR0_LT, -8 */
		/* 821E2844h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821E283C;  }
		/* 821E2844h case   10:*/		return 0x821E2848;
		  /* 821E2848h */ case   11:  		/* lwz R11, <#[R1 + 136]> */
		/* 821E2848h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821E2848h case   11:*/		return 0x821E284C;
		  /* 821E284Ch */ case   12:  		/* stw R25, <#[R3 + 8]> */
		/* 821E284Ch case   12:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000008) );
		/* 821E284Ch case   12:*/		return 0x821E2850;
		  /* 821E2850h */ case   13:  		/* stb R27, <#[R3 + 12]> */
		/* 821E2850h case   13:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E2850h case   13:*/		return 0x821E2854;
		  /* 821E2854h */ case   14:  		/* stw R11, <#[R3 + 16]> */
		/* 821E2854h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 821E2854h case   14:*/		return 0x821E2858;
		  /* 821E2858h */ case   15:  		/* lwz R11, <#[R26 + 60]> */
		/* 821E2858h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000003C) );
		/* 821E2858h case   15:*/		return 0x821E285C;
		  /* 821E285Ch */ case   16:  		/* stw R11, <#[R3 + 4]> */
		/* 821E285Ch case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E285Ch case   16:*/		return 0x821E2860;
		  /* 821E2860h */ case   17:  		/* stw R3, <#[R26 + 60]> */
		/* 821E2860h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x0000003C) );
		/* 821E2860h case   17:*/		return 0x821E2864;
	}
	return 0x821E2864;
} // Block from 821E281Ch-821E2864h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821E2864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2864);
		  /* 821E2864h */ case    0:  		/* lwz R24, <#[R24 + 4]> */
		/* 821E2864h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R24 + 0x00000004) );
		/* 821E2864h case    0:*/		return 0x821E2868;
		  /* 821E2868h */ case    1:  		/* b -976 */
		/* 821E2868h case    1:*/		return 0x821E2498;
		/* 821E2868h case    1:*/		return 0x821E286C;
	}
	return 0x821E286C;
} // Block from 821E2864h-821E286Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E286Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E286C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E286C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E286C);
		  /* 821E286Ch */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821E286Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E286Ch case    0:*/		return 0x821E2870;
		  /* 821E2870h */ case    1:  		/* rlwinm. R10, R11, 22, 31, 31 */
		/* 821E2870h case    1:*/		cpu::op::rlwinm<1,22,31,31>(regs,&regs.R10,regs.R11);
		/* 821E2870h case    1:*/		return 0x821E2874;
		  /* 821E2874h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 821E2874h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E2880;  }
		/* 821E2874h case    2:*/		return 0x821E2878;
		  /* 821E2878h */ case    3:  		/* rlwinm. R9, R11, 0, 20, 20 */
		/* 821E2878h case    3:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R9,regs.R11);
		/* 821E2878h case    3:*/		return 0x821E287C;
		  /* 821E287Ch */ case    4:  		/* bc 12, CR0_EQ, 104 */
		/* 821E287Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821E28E4;  }
		/* 821E287Ch case    4:*/		return 0x821E2880;
	}
	return 0x821E2880;
} // Block from 821E286Ch-821E2880h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E2880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2880);
		  /* 821E2880h */ case    0:  		/* lwz R9, <#[R19 + 60]> */
		/* 821E2880h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R19 + 0x0000003C) );
		/* 821E2880h case    0:*/		return 0x821E2884;
		  /* 821E2884h */ case    1:  		/* rlwinm. R9, R9, 0, 30, 30 */
		/* 821E2884h case    1:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R9);
		/* 821E2884h case    1:*/		return 0x821E2888;
		  /* 821E2888h */ case    2:  		/* bc 4, CR0_EQ, 92 */
		/* 821E2888h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E28E4;  }
		/* 821E2888h case    2:*/		return 0x821E288C;
		  /* 821E288Ch */ case    3:  		/* lfd FR0, <#[R26 + 8]> */
		/* 821E288Ch case    3:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R26 + 0x00000008) );
		/* 821E288Ch case    3:*/		return 0x821E2890;
		  /* 821E2890h */ case    4:  		/* fcmpu CR6, FR0, FR28 */
		/* 821E2890h case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR28);
		/* 821E2890h case    4:*/		return 0x821E2894;
		  /* 821E2894h */ case    5:  		/* bc 4, CR6_EQ, 72 */
		/* 821E2894h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E28DC;  }
		/* 821E2894h case    5:*/		return 0x821E2898;
		  /* 821E2898h */ case    6:  		/* lfd FR0, <#[R26 + 16]> */
		/* 821E2898h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R26 + 0x00000010) );
		/* 821E2898h case    6:*/		return 0x821E289C;
		  /* 821E289Ch */ case    7:  		/* fcmpu CR6, FR0, FR28 */
		/* 821E289Ch case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR28);
		/* 821E289Ch case    7:*/		return 0x821E28A0;
		  /* 821E28A0h */ case    8:  		/* bc 4, CR6_EQ, 60 */
		/* 821E28A0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E28DC;  }
		/* 821E28A0h case    8:*/		return 0x821E28A4;
		  /* 821E28A4h */ case    9:  		/* lfd FR0, <#[R26 + 40]> */
		/* 821E28A4h case    9:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R26 + 0x00000028) );
		/* 821E28A4h case    9:*/		return 0x821E28A8;
		  /* 821E28A8h */ case   10:  		/* fcmpu CR6, FR0, FR21 */
		/* 821E28A8h case   10:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR21);
		/* 821E28A8h case   10:*/		return 0x821E28AC;
		  /* 821E28ACh */ case   11:  		/* bc 4, CR6_EQ, 48 */
		/* 821E28ACh case   11:*/		if ( !regs.CR[6].eq ) { return 0x821E28DC;  }
		/* 821E28ACh case   11:*/		return 0x821E28B0;
		  /* 821E28B0h */ case   12:  		/* oris R11, R11, 2048 */
		/* 821E28B0h case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 821E28B0h case   12:*/		return 0x821E28B4;
		  /* 821E28B4h */ case   13:  		/* rlwinm. R10, R11, 0, 21, 21 */
		/* 821E28B4h case   13:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R10,regs.R11);
		/* 821E28B4h case   13:*/		return 0x821E28B8;
		  /* 821E28B8h */ case   14:  		/* stw R11, <#[R26]> */
		/* 821E28B8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E28B8h case   14:*/		return 0x821E28BC;
		  /* 821E28BCh */ case   15:  		/* bc 12, CR0_EQ, 40 */
		/* 821E28BCh case   15:*/		if ( regs.CR[0].eq ) { return 0x821E28E4;  }
		/* 821E28BCh case   15:*/		return 0x821E28C0;
		  /* 821E28C0h */ case   16:  		/* lhz R11, <#[R26 + 4]> */
		/* 821E28C0h case   16:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821E28C0h case   16:*/		return 0x821E28C4;
		  /* 821E28C4h */ case   17:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E28C4h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E28C4h case   17:*/		return 0x821E28C8;
		  /* 821E28C8h */ case   18:  		/* bc 4, CR0_EQ, 28 */
		/* 821E28C8h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821E28E4;  }
		/* 821E28C8h case   18:*/		return 0x821E28CC;
		  /* 821E28CCh */ case   19:  		/* li R4, 3649 */
		/* 821E28CCh case   19:*/		cpu::op::li<0>(regs,&regs.R4,0xE41);
		/* 821E28CCh case   19:*/		return 0x821E28D0;
		  /* 821E28D0h */ case   20:  		/* mr R3, R22 */
		/* 821E28D0h case   20:*/		regs.R3 = regs.R22;
		/* 821E28D0h case   20:*/		return 0x821E28D4;
		  /* 821E28D4h */ case   21:  		/* bl -592732 */
		/* 821E28D4h case   21:*/		regs.LR = 0x821E28D8; return 0x82151D78;
		/* 821E28D4h case   21:*/		return 0x821E28D8;
		  /* 821E28D8h */ case   22:  		/* b 12 */
		/* 821E28D8h case   22:*/		return 0x821E28E4;
		/* 821E28D8h case   22:*/		return 0x821E28DC;
	}
	return 0x821E28DC;
} // Block from 821E2880h-821E28DCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821E28DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E28DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E28DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E28DC);
		  /* 821E28DCh */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821E28DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E28DCh case    0:*/		return 0x821E28E0;
		  /* 821E28E0h */ case    1:  		/* bc 4, CR6_EQ, 16676 */
		/* 821E28E0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E6A04;  }
		/* 821E28E0h case    1:*/		return 0x821E28E4;
	}
	return 0x821E28E4;
} // Block from 821E28DCh-821E28E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E28E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E28E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E28E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E28E4);
		  /* 821E28E4h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821E28E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E28E4h case    0:*/		return 0x821E28E8;
		  /* 821E28E8h */ case    1:  		/* rlwinm. R10, R11, 0, 25, 25 */
		/* 821E28E8h case    1:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R11);
		/* 821E28E8h case    1:*/		return 0x821E28EC;
		  /* 821E28ECh */ case    2:  		/* bc 4, CR0_EQ, 36 */
		/* 821E28ECh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E2910;  }
		/* 821E28ECh case    2:*/		return 0x821E28F0;
		  /* 821E28F0h */ case    3:  		/* rlwinm. R10, R11, 0, 24, 24 */
		/* 821E28F0h case    3:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R11);
		/* 821E28F0h case    3:*/		return 0x821E28F4;
		  /* 821E28F4h */ case    4:  		/* bc 4, CR0_EQ, 28 */
		/* 821E28F4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E2910;  }
		/* 821E28F4h case    4:*/		return 0x821E28F8;
		  /* 821E28F8h */ case    5:  		/* rlwinm. R10, R11, 0, 23, 23 */
		/* 821E28F8h case    5:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R11);
		/* 821E28F8h case    5:*/		return 0x821E28FC;
		  /* 821E28FCh */ case    6:  		/* bc 4, CR0_EQ, 20 */
		/* 821E28FCh case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E2910;  }
		/* 821E28FCh case    6:*/		return 0x821E2900;
		  /* 821E2900h */ case    7:  		/* rlwinm. R10, R11, 0, 19, 19 */
		/* 821E2900h case    7:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R10,regs.R11);
		/* 821E2900h case    7:*/		return 0x821E2904;
		  /* 821E2904h */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 821E2904h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E2910;  }
		/* 821E2904h case    8:*/		return 0x821E2908;
		  /* 821E2908h */ case    9:  		/* ori R11, R11, 256 */
		/* 821E2908h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821E2908h case    9:*/		return 0x821E290C;
		  /* 821E290Ch */ case   10:  		/* stw R11, <#[R26]> */
		/* 821E290Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E290Ch case   10:*/		return 0x821E2910;
	}
	return 0x821E2910;
} // Block from 821E28E4h-821E2910h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E2910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2910);
		  /* 821E2910h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821E2910h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E2910h case    0:*/		return 0x821E2914;
		  /* 821E2914h */ case    1:  		/* rlwinm. R10, R11, 0, 24, 24 */
		/* 821E2914h case    1:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R11);
		/* 821E2914h case    1:*/		return 0x821E2918;
		  /* 821E2918h */ case    2:  		/* bc 4, CR0_EQ, 540 */
		/* 821E2918h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E2B34;  }
		/* 821E2918h case    2:*/		return 0x821E291C;
		  /* 821E291Ch */ case    3:  		/* rlwinm. R10, R11, 0, 23, 23 */
		/* 821E291Ch case    3:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R11);
		/* 821E291Ch case    3:*/		return 0x821E2920;
		  /* 821E2920h */ case    4:  		/* bc 4, CR0_EQ, 36 */
		/* 821E2920h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E2944;  }
		/* 821E2920h case    4:*/		return 0x821E2924;
		  /* 821E2924h */ case    5:  		/* rlwinm. R10, R11, 0, 25, 25 */
		/* 821E2924h case    5:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R11);
		/* 821E2924h case    5:*/		return 0x821E2928;
		  /* 821E2928h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 821E2928h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E2944;  }
		/* 821E2928h case    6:*/		return 0x821E292C;
		  /* 821E292Ch */ case    7:  		/* lfd FR1, <#[R26 + 32]> */
		/* 821E292Ch case    7:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R26 + 0x00000020) );
		/* 821E292Ch case    7:*/		return 0x821E2930;
		  /* 821E2930h */ case    8:  		/* lfd FR0, <#[R26 + 24]> */
		/* 821E2930h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R26 + 0x00000018) );
		/* 821E2930h case    8:*/		return 0x821E2934;
		  /* 821E2934h */ case    9:  		/* fcmpu CR6, FR1, FR0 */
		/* 821E2934h case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821E2934h case    9:*/		return 0x821E2938;
		  /* 821E2938h */ case   10:  		/* bc 4, CR6_EQ, 508 */
		/* 821E2938h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821E2B34;  }
		/* 821E2938h case   10:*/		return 0x821E293C;
		  /* 821E293Ch */ case   11:  		/* rlwinm R9, R11, 2, 31, 31 */
		/* 821E293Ch case   11:*/		cpu::op::rlwinm<0,2,31,31>(regs,&regs.R9,regs.R11);
		/* 821E293Ch case   11:*/		return 0x821E2940;
		  /* 821E2940h */ case   12:  		/* b 32 */
		/* 821E2940h case   12:*/		return 0x821E2960;
		/* 821E2940h case   12:*/		return 0x821E2944;
	}
	return 0x821E2944;
} // Block from 821E2910h-821E2944h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E2944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2944);
		  /* 821E2944h */ case    0:  		/* rlwinm. R10, R11, 0, 19, 19 */
		/* 821E2944h case    0:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R10,regs.R11);
		/* 821E2944h case    0:*/		return 0x821E2948;
		  /* 821E2948h */ case    1:  		/* bc 12, CR0_EQ, 492 */
		/* 821E2948h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E2B34;  }
		/* 821E2948h case    1:*/		return 0x821E294C;
		  /* 821E294Ch */ case    2:  		/* rlwinm R10, R11, 19, 18, 31 */
		/* 821E294Ch case    2:*/		cpu::op::rlwinm<0,19,18,31>(regs,&regs.R10,regs.R11);
		/* 821E294Ch case    2:*/		return 0x821E2950;
		  /* 821E2950h */ case    3:  		/* mr R9, R21 */
		/* 821E2950h case    3:*/		regs.R9 = regs.R21;
		/* 821E2950h case    3:*/		return 0x821E2954;
		  /* 821E2954h */ case    4:  		/* std R10, <#[R1 + 464]> */
		/* 821E2954h case    4:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x000001D0) );
		/* 821E2954h case    4:*/		return 0x821E2958;
		  /* 821E2958h */ case    5:  		/* lfd FR0, <#[R1 + 464]> */
		/* 821E2958h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000001D0) );
		/* 821E2958h case    5:*/		return 0x821E295C;
		  /* 821E295Ch */ case    6:  		/* fcfid FR1, FR0 */
		/* 821E295Ch case    6:*/		cpu::op::fcfid<0>(regs,&regs.FR1,regs.FR0);
		/* 821E295Ch case    6:*/		return 0x821E2960;
	}
	return 0x821E2960;
} // Block from 821E2944h-821E2960h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E2960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2960);
		  /* 821E2960h */ case    0:  		/* oris R11, R11, 32768 */
		/* 821E2960h case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 821E2960h case    0:*/		return 0x821E2964;
		  /* 821E2964h */ case    1:  		/* addi R6, R1, 320 */
		/* 821E2964h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x140);
		/* 821E2964h case    1:*/		return 0x821E2968;
		  /* 821E2968h */ case    2:  		/* stw R11, <#[R26]> */
		/* 821E2968h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E2968h case    2:*/		return 0x821E296C;
		  /* 821E296Ch */ case    3:  		/* stfd FR1, <#[R26 + 32]> */
		/* 821E296Ch case    3:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R26 + 0x00000020) );
		/* 821E296Ch case    3:*/		return 0x821E2970;
		  /* 821E2970h */ case    4:  		/* stfd FR1, <#[R26 + 24]> */
		/* 821E2970h case    4:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R26 + 0x00000018) );
		/* 821E2970h case    4:*/		return 0x821E2974;
		  /* 821E2974h */ case    5:  		/* li R4, 1 */
		/* 821E2974h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E2974h case    5:*/		return 0x821E2978;
		  /* 821E2978h */ case    6:  		/* mr R3, R26 */
		/* 821E2978h case    6:*/		regs.R3 = regs.R26;
		/* 821E2978h case    6:*/		return 0x821E297C;
		  /* 821E297Ch */ case    7:  		/* bl -151916 */
		/* 821E297Ch case    7:*/		regs.LR = 0x821E2980; return 0x821BD810;
		/* 821E297Ch case    7:*/		return 0x821E2980;
		  /* 821E2980h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E2980h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E2980h case    8:*/		return 0x821E2984;
		  /* 821E2984h */ case    9:  		/* bc 12, CR0_EQ, 432 */
		/* 821E2984h case    9:*/		if ( regs.CR[0].eq ) { return 0x821E2B34;  }
		/* 821E2984h case    9:*/		return 0x821E2988;
		  /* 821E2988h */ case   10:  		/* lfd FR0, <#[R26 + 40]> */
		/* 821E2988h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R26 + 0x00000028) );
		/* 821E2988h case   10:*/		return 0x821E298C;
		  /* 821E298Ch */ case   11:  		/* lfd FR13, <#[R1 + 320]> */
		/* 821E298Ch case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000140) );
		/* 821E298Ch case   11:*/		return 0x821E2990;
		  /* 821E2990h */ case   12:  		/* fcmpu CR6, FR0, FR28 */
		/* 821E2990h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR28);
		/* 821E2990h case   12:*/		return 0x821E2994;
		  /* 821E2994h */ case   13:  		/* bc 4, CR6_GT, 108 */
		/* 821E2994h case   13:*/		if ( !regs.CR[6].gt ) { return 0x821E2A00;  }
		/* 821E2994h case   13:*/		return 0x821E2998;
		  /* 821E2998h */ case   14:  		/* fcmpu CR6, FR1, FR13 */
		/* 821E2998h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR13);
		/* 821E2998h case   14:*/		return 0x821E299C;
		  /* 821E299Ch */ case   15:  		/* bc 12, CR6_LT, 408 */
		/* 821E299Ch case   15:*/		if ( regs.CR[6].lt ) { return 0x821E2B34;  }
		/* 821E299Ch case   15:*/		return 0x821E29A0;
		  /* 821E29A0h */ case   16:  		/* fsub FR12, FR1, FR13 */
		/* 821E29A0h case   16:*/		cpu::op::fsub<0>(regs,&regs.FR12,regs.FR1,regs.FR13);
		/* 821E29A0h case   16:*/		return 0x821E29A4;
		  /* 821E29A4h */ case   17:  		/* rlwinm. R11, R9, 0, 24, 31 */
		/* 821E29A4h case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R9);
		/* 821E29A4h case   17:*/		return 0x821E29A8;
		  /* 821E29A8h */ case   18:  		/* fdiv FR12, FR12, FR0 */
		/* 821E29A8h case   18:*/		cpu::op::fdiv<0>(regs,&regs.FR12,regs.FR12,regs.FR0);
		/* 821E29A8h case   18:*/		return 0x821E29AC;
		  /* 821E29ACh */ case   19:  		/* fctidz FR12, FR12 */
		/* 821E29ACh case   19:*/		cpu::op::fctidz<0>(regs,&regs.FR12,regs.FR12);
		/* 821E29ACh case   19:*/		return 0x821E29B0;
		  /* 821E29B0h */ case   20:  		/* stfd FR12, <#[R1 + 136]> */
		/* 821E29B0h case   20:*/		cpu::mem::store64f( regs, regs.FR12, (uint32)(regs.R1 + 0x00000088) );
		/* 821E29B0h case   20:*/		return 0x821E29B4;
		  /* 821E29B4h */ case   21:  		/* lwz R11, <#[R1 + 140]> */
		/* 821E29B4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 821E29B4h case   21:*/		return 0x821E29B8;
		  /* 821E29B8h */ case   22:  		/* mr R10, R11 */
		/* 821E29B8h case   22:*/		regs.R10 = regs.R11;
		/* 821E29B8h case   22:*/		return 0x821E29BC;
		  /* 821E29BCh */ case   23:  		/* std R11, <#[R1 + 416]> */
		/* 821E29BCh case   23:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000001A0) );
		/* 821E29BCh case   23:*/		return 0x821E29C0;
		  /* 821E29C0h */ case   24:  		/* lfd FR12, <#[R1 + 416]> */
		/* 821E29C0h case   24:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x000001A0) );
		/* 821E29C0h case   24:*/		return 0x821E29C4;
		  /* 821E29C4h */ case   25:  		/* fcfid FR12, FR12 */
		/* 821E29C4h case   25:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 821E29C4h case   25:*/		return 0x821E29C8;
		  /* 821E29C8h */ case   26:  		/* fmadd FR0, FR12, FR0, FR13 */
		/* 821E29C8h case   26:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR12,regs.FR0,regs.FR13);
		/* 821E29C8h case   26:*/		return 0x821E29CC;
		  /* 821E29CCh */ case   27:  		/* fcmpu CR6, FR0, FR1 */
		/* 821E29CCh case   27:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR1);
		/* 821E29CCh case   27:*/		return 0x821E29D0;
		  /* 821E29D0h */ case   28:  		/* bc 12, CR0_EQ, 12 */
		/* 821E29D0h case   28:*/		if ( regs.CR[0].eq ) { return 0x821E29DC;  }
		/* 821E29D0h case   28:*/		return 0x821E29D4;
		  /* 821E29D4h */ case   29:  		/* bc 12, CR6_GT, 16 */
		/* 821E29D4h case   29:*/		if ( regs.CR[6].gt ) { return 0x821E29E4;  }
		/* 821E29D4h case   29:*/		return 0x821E29D8;
		  /* 821E29D8h */ case   30:  		/* b 8 */
		/* 821E29D8h case   30:*/		return 0x821E29E0;
		/* 821E29D8h case   30:*/		return 0x821E29DC;
	}
	return 0x821E29DC;
} // Block from 821E2960h-821E29DCh (31 instructions)

//////////////////////////////////////////////////////
// Block at 821E29DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E29DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E29DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E29DC);
		  /* 821E29DCh */ case    0:  		/* bc 4, CR6_LT, 8 */
		/* 821E29DCh case    0:*/		if ( !regs.CR[6].lt ) { return 0x821E29E4;  }
		/* 821E29DCh case    0:*/		return 0x821E29E0;
	}
	return 0x821E29E0;
} // Block from 821E29DCh-821E29E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E29E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E29E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E29E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E29E0);
		  /* 821E29E0h */ case    0:  		/* addi R11, R11, 1 */
		/* 821E29E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E29E0h case    0:*/		return 0x821E29E4;
	}
	return 0x821E29E4;
} // Block from 821E29E0h-821E29E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E29E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E29E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E29E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E29E4);
		  /* 821E29E4h */ case    0:  		/* cmplwi CR6, R11, 32767 */
		/* 821E29E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00007FFF);
		/* 821E29E4h case    0:*/		return 0x821E29E8;
		  /* 821E29E8h */ case    1:  		/* bc 4, CR6_GT, 112 */
		/* 821E29E8h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821E2A58;  }
		/* 821E29E8h case    1:*/		return 0x821E29EC;
		  /* 821E29ECh */ case    2:  		/* lis R11, -32252 */
		/* 821E29ECh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821E29ECh case    2:*/		return 0x821E29F0;
		  /* 821E29F0h */ case    3:  		/* li R4, 3500 */
		/* 821E29F0h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821E29F0h case    3:*/		return 0x821E29F4;
		  /* 821E29F4h */ case    4:  		/* addi R5, R11, -15836 */
		/* 821E29F4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC224);
		/* 821E29F4h case    4:*/		return 0x821E29F8;
		  /* 821E29F8h */ case    5:  		/* mr R3, R22 */
		/* 821E29F8h case    5:*/		regs.R3 = regs.R22;
		/* 821E29F8h case    5:*/		return 0x821E29FC;
		  /* 821E29FCh */ case    6:  		/* bl -592788 */
		/* 821E29FCh case    6:*/		regs.LR = 0x821E2A00; return 0x82151E68;
		/* 821E29FCh case    6:*/		return 0x821E2A00;
	}
	return 0x821E2A00;
} // Block from 821E29E4h-821E2A00h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E2A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2A00);
		  /* 821E2A00h */ case    0:  		/* fcmpu CR6, FR1, FR13 */
		/* 821E2A00h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR13);
		/* 821E2A00h case    0:*/		return 0x821E2A04;
		  /* 821E2A04h */ case    1:  		/* bc 12, CR6_GT, 304 */
		/* 821E2A04h case    1:*/		if ( regs.CR[6].gt ) { return 0x821E2B34;  }
		/* 821E2A04h case    1:*/		return 0x821E2A08;
		  /* 821E2A08h */ case    2:  		/* fsub FR12, FR13, FR1 */
		/* 821E2A08h case    2:*/		cpu::op::fsub<0>(regs,&regs.FR12,regs.FR13,regs.FR1);
		/* 821E2A08h case    2:*/		return 0x821E2A0C;
		  /* 821E2A0Ch */ case    3:  		/* rlwinm. R11, R9, 0, 24, 31 */
		/* 821E2A0Ch case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R9);
		/* 821E2A0Ch case    3:*/		return 0x821E2A10;
		  /* 821E2A10h */ case    4:  		/* fdiv FR12, FR12, FR0 */
		/* 821E2A10h case    4:*/		cpu::op::fdiv<0>(regs,&regs.FR12,regs.FR12,regs.FR0);
		/* 821E2A10h case    4:*/		return 0x821E2A14;
		  /* 821E2A14h */ case    5:  		/* fneg FR12, FR12 */
		/* 821E2A14h case    5:*/		cpu::op::fneg<0>(regs,&regs.FR12,regs.FR12);
		/* 821E2A14h case    5:*/		return 0x821E2A18;
		  /* 821E2A18h */ case    6:  		/* fctidz FR12, FR12 */
		/* 821E2A18h case    6:*/		cpu::op::fctidz<0>(regs,&regs.FR12,regs.FR12);
		/* 821E2A18h case    6:*/		return 0x821E2A1C;
		  /* 821E2A1Ch */ case    7:  		/* stfd FR12, <#[R1 + 136]> */
		/* 821E2A1Ch case    7:*/		cpu::mem::store64f( regs, regs.FR12, (uint32)(regs.R1 + 0x00000088) );
		/* 821E2A1Ch case    7:*/		return 0x821E2A20;
		  /* 821E2A20h */ case    8:  		/* lwz R11, <#[R1 + 140]> */
		/* 821E2A20h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 821E2A20h case    8:*/		return 0x821E2A24;
		  /* 821E2A24h */ case    9:  		/* mr R10, R11 */
		/* 821E2A24h case    9:*/		regs.R10 = regs.R11;
		/* 821E2A24h case    9:*/		return 0x821E2A28;
		  /* 821E2A28h */ case   10:  		/* std R11, <#[R1 + 488]> */
		/* 821E2A28h case   10:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000001E8) );
		/* 821E2A28h case   10:*/		return 0x821E2A2C;
		  /* 821E2A2Ch */ case   11:  		/* lfd FR12, <#[R1 + 488]> */
		/* 821E2A2Ch case   11:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x000001E8) );
		/* 821E2A2Ch case   11:*/		return 0x821E2A30;
		  /* 821E2A30h */ case   12:  		/* fcfid FR12, FR12 */
		/* 821E2A30h case   12:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 821E2A30h case   12:*/		return 0x821E2A34;
		  /* 821E2A34h */ case   13:  		/* fmadd FR0, FR12, FR0, FR13 */
		/* 821E2A34h case   13:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR12,regs.FR0,regs.FR13);
		/* 821E2A34h case   13:*/		return 0x821E2A38;
		  /* 821E2A38h */ case   14:  		/* fcmpu CR6, FR0, FR1 */
		/* 821E2A38h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR1);
		/* 821E2A38h case   14:*/		return 0x821E2A3C;
		  /* 821E2A3Ch */ case   15:  		/* bc 12, CR0_EQ, 12 */
		/* 821E2A3Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821E2A48;  }
		/* 821E2A3Ch case   15:*/		return 0x821E2A40;
		  /* 821E2A40h */ case   16:  		/* bc 12, CR6_LT, 16 */
		/* 821E2A40h case   16:*/		if ( regs.CR[6].lt ) { return 0x821E2A50;  }
		/* 821E2A40h case   16:*/		return 0x821E2A44;
		  /* 821E2A44h */ case   17:  		/* b 8 */
		/* 821E2A44h case   17:*/		return 0x821E2A4C;
		/* 821E2A44h case   17:*/		return 0x821E2A48;
	}
	return 0x821E2A48;
} // Block from 821E2A00h-821E2A48h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821E2A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2A48);
		  /* 821E2A48h */ case    0:  		/* bc 4, CR6_GT, 8 */
		/* 821E2A48h case    0:*/		if ( !regs.CR[6].gt ) { return 0x821E2A50;  }
		/* 821E2A48h case    0:*/		return 0x821E2A4C;
	}
	return 0x821E2A4C;
} // Block from 821E2A48h-821E2A4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E2A4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2A4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2A4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2A4C);
		  /* 821E2A4Ch */ case    0:  		/* addi R11, R11, 1 */
		/* 821E2A4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E2A4Ch case    0:*/		return 0x821E2A50;
	}
	return 0x821E2A50;
} // Block from 821E2A4Ch-821E2A50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E2A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2A50);
		  /* 821E2A50h */ case    0:  		/* cmplwi CR6, R11, 32767 */
		/* 821E2A50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00007FFF);
		/* 821E2A50h case    0:*/		return 0x821E2A54;
		  /* 821E2A54h */ case    1:  		/* bc 12, CR6_GT, 16316 */
		/* 821E2A54h case    1:*/		if ( regs.CR[6].gt ) { return 0x821E6A10;  }
		/* 821E2A54h case    1:*/		return 0x821E2A58;
	}
	return 0x821E2A58;
} // Block from 821E2A50h-821E2A58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2A58);
		  /* 821E2A58h */ case    0:  		/* lwz R10, <#[R26 + 4]> */
		/* 821E2A58h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000004) );
		/* 821E2A58h case    0:*/		return 0x821E2A5C;
		  /* 821E2A5Ch */ case    1:  		/* rlwimi R10, R11, 0, 17, 31 */
		/* 821E2A5Ch case    1:*/		cpu::op::rlwimi<0,0,17,31>(regs,&regs.R10,regs.R11);
		/* 821E2A5Ch case    1:*/		return 0x821E2A60;
		  /* 821E2A60h */ case    2:  		/* stw R10, <#[R26 + 4]> */
		/* 821E2A60h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000004) );
		/* 821E2A60h case    2:*/		return 0x821E2A64;
		  /* 821E2A64h */ case    3:  		/* lwz R11, <#[R26]> */
		/* 821E2A64h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E2A64h case    3:*/		return 0x821E2A68;
		  /* 821E2A68h */ case    4:  		/* oris R11, R11, 8192 */
		/* 821E2A68h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 821E2A68h case    4:*/		return 0x821E2A6C;
		  /* 821E2A6Ch */ case    5:  		/* stw R11, <#[R26]> */
		/* 821E2A6Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E2A6Ch case    5:*/		return 0x821E2A70;
		  /* 821E2A70h */ case    6:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 821E2A70h case    6:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 821E2A70h case    6:*/		return 0x821E2A74;
		  /* 821E2A74h */ case    7:  		/* bc 4, CR0_EQ, 192 */
		/* 821E2A74h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821E2B34;  }
		/* 821E2A74h case    7:*/		return 0x821E2A78;
		  /* 821E2A78h */ case    8:  		/* lfd FR0, <#[R26 + 16]> */
		/* 821E2A78h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R26 + 0x00000010) );
		/* 821E2A78h case    8:*/		return 0x821E2A7C;
		  /* 821E2A7Ch */ case    9:  		/* fcmpu CR6, FR0, FR28 */
		/* 821E2A7Ch case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR28);
		/* 821E2A7Ch case    9:*/		return 0x821E2A80;
		  /* 821E2A80h */ case   10:  		/* bc 12, CR6_LT, 180 */
		/* 821E2A80h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E2B34;  }
		/* 821E2A80h case   10:*/		return 0x821E2A84;
		  /* 821E2A84h */ case   11:  		/* fcmpu CR6, FR0, FR26 */
		/* 821E2A84h case   11:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR26);
		/* 821E2A84h case   11:*/		return 0x821E2A88;
		  /* 821E2A88h */ case   12:  		/* bc 12, CR6_GT, 172 */
		/* 821E2A88h case   12:*/		if ( regs.CR[6].gt ) { return 0x821E2B34;  }
		/* 821E2A88h case   12:*/		return 0x821E2A8C;
		  /* 821E2A8Ch */ case   13:  		/* fctiwz FR13, FR0 */
		/* 821E2A8Ch case   13:*/		cpu::op::fctiwz<0>(regs,&regs.FR13,regs.FR0);
		/* 821E2A8Ch case   13:*/		return 0x821E2A90;
		  /* 821E2A90h */ case   14:  		/* stfd FR13, <#[R1 + 136]> */
		/* 821E2A90h case   14:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000088) );
		/* 821E2A90h case   14:*/		return 0x821E2A94;
		  /* 821E2A94h */ case   15:  		/* lwa R10, <#[R1 + 140]> */
		/* 821E2A94h case   15:*/		cpu::mem::load32a( regs, &regs.R10, (uint32)(regs.R1 + 0x0000008C) );
		/* 821E2A94h case   15:*/		return 0x821E2A98;
		  /* 821E2A98h */ case   16:  		/* std R10, <#[R1 + 336]> */
		/* 821E2A98h case   16:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000150) );
		/* 821E2A98h case   16:*/		return 0x821E2A9C;
		  /* 821E2A9Ch */ case   17:  		/* lfd FR13, <#[R1 + 336]> */
		/* 821E2A9Ch case   17:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000150) );
		/* 821E2A9Ch case   17:*/		return 0x821E2AA0;
		  /* 821E2AA0h */ case   18:  		/* fcfid FR13, FR13 */
		/* 821E2AA0h case   18:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 821E2AA0h case   18:*/		return 0x821E2AA4;
		  /* 821E2AA4h */ case   19:  		/* fcmpu CR6, FR0, FR13 */
		/* 821E2AA4h case   19:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821E2AA4h case   19:*/		return 0x821E2AA8;
		  /* 821E2AA8h */ case   20:  		/* bc 4, CR6_EQ, 140 */
		/* 821E2AA8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821E2B34;  }
		/* 821E2AA8h case   20:*/		return 0x821E2AAC;
		  /* 821E2AACh */ case   21:  		/* lfd FR0, <#[R26 + 40]> */
		/* 821E2AACh case   21:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R26 + 0x00000028) );
		/* 821E2AACh case   21:*/		return 0x821E2AB0;
		  /* 821E2AB0h */ case   22:  		/* fctiwz FR13, FR0 */
		/* 821E2AB0h case   22:*/		cpu::op::fctiwz<0>(regs,&regs.FR13,regs.FR0);
		/* 821E2AB0h case   22:*/		return 0x821E2AB4;
		  /* 821E2AB4h */ case   23:  		/* stfd FR13, <#[R1 + 136]> */
		/* 821E2AB4h case   23:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000088) );
		/* 821E2AB4h case   23:*/		return 0x821E2AB8;
		  /* 821E2AB8h */ case   24:  		/* lwa R10, <#[R1 + 140]> */
		/* 821E2AB8h case   24:*/		cpu::mem::load32a( regs, &regs.R10, (uint32)(regs.R1 + 0x0000008C) );
		/* 821E2AB8h case   24:*/		return 0x821E2ABC;
		  /* 821E2ABCh */ case   25:  		/* std R10, <#[R1 + 344]> */
		/* 821E2ABCh case   25:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000158) );
		/* 821E2ABCh case   25:*/		return 0x821E2AC0;
		  /* 821E2AC0h */ case   26:  		/* lfd FR13, <#[R1 + 344]> */
		/* 821E2AC0h case   26:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000158) );
		/* 821E2AC0h case   26:*/		return 0x821E2AC4;
		  /* 821E2AC4h */ case   27:  		/* fcfid FR13, FR13 */
		/* 821E2AC4h case   27:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 821E2AC4h case   27:*/		return 0x821E2AC8;
		  /* 821E2AC8h */ case   28:  		/* fcmpu CR6, FR0, FR13 */
		/* 821E2AC8h case   28:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821E2AC8h case   28:*/		return 0x821E2ACC;
		  /* 821E2ACCh */ case   29:  		/* bc 4, CR6_EQ, 104 */
		/* 821E2ACCh case   29:*/		if ( !regs.CR[6].eq ) { return 0x821E2B34;  }
		/* 821E2ACCh case   29:*/		return 0x821E2AD0;
		  /* 821E2AD0h */ case   30:  		/* fcmpu CR6, FR0, FR23 */
		/* 821E2AD0h case   30:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR23);
		/* 821E2AD0h case   30:*/		return 0x821E2AD4;
		  /* 821E2AD4h */ case   31:  		/* bc 12, CR6_LT, 96 */
		/* 821E2AD4h case   31:*/		if ( regs.CR[6].lt ) { return 0x821E2B34;  }
		/* 821E2AD4h case   31:*/		return 0x821E2AD8;
		  /* 821E2AD8h */ case   32:  		/* fcmpu CR6, FR0, FR22 */
		/* 821E2AD8h case   32:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR22);
		/* 821E2AD8h case   32:*/		return 0x821E2ADC;
		  /* 821E2ADCh */ case   33:  		/* bc 12, CR6_GT, 88 */
		/* 821E2ADCh case   33:*/		if ( regs.CR[6].gt ) { return 0x821E2B34;  }
		/* 821E2ADCh case   33:*/		return 0x821E2AE0;
		  /* 821E2AE0h */ case   34:  		/* rlwinm. R10, R11, 0, 19, 19 */
		/* 821E2AE0h case   34:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R10,regs.R11);
		/* 821E2AE0h case   34:*/		return 0x821E2AE4;
		  /* 821E2AE4h */ case   35:  		/* bc 12, CR0_EQ, 24 */
		/* 821E2AE4h case   35:*/		if ( regs.CR[0].eq ) { return 0x821E2AFC;  }
		/* 821E2AE4h case   35:*/		return 0x821E2AE8;
		  /* 821E2AE8h */ case   36:  		/* lis R10, 31 */
		/* 821E2AE8h case   36:*/		cpu::op::lis<0>(regs,&regs.R10,0x1F);
		/* 821E2AE8h case   36:*/		return 0x821E2AEC;
		  /* 821E2AECh */ case   37:  		/* rlwinm R9, R11, 0, 5, 18 */
		/* 821E2AECh case   37:*/		cpu::op::rlwinm<0,0,5,18>(regs,&regs.R9,regs.R11);
		/* 821E2AECh case   37:*/		return 0x821E2AF0;
		  /* 821E2AF0h */ case   38:  		/* ori R10, R10, 57344 */
		/* 821E2AF0h case   38:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xE000);
		/* 821E2AF0h case   38:*/		return 0x821E2AF4;
		  /* 821E2AF4h */ case   39:  		/* cmplw CR6, R9, R10 */
		/* 821E2AF4h case   39:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821E2AF4h case   39:*/		return 0x821E2AF8;
		  /* 821E2AF8h */ case   40:  		/* bc 12, CR6_GT, 60 */
		/* 821E2AF8h case   40:*/		if ( regs.CR[6].gt ) { return 0x821E2B34;  }
		/* 821E2AF8h case   40:*/		return 0x821E2AFC;
	}
	return 0x821E2AFC;
} // Block from 821E2A58h-821E2AFCh (41 instructions)

//////////////////////////////////////////////////////
// Block at 821E2AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2AFC);
		  /* 821E2AFCh */ case    0:  		/* lwz R10, <#[R26 + 4]> */
		/* 821E2AFCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000004) );
		/* 821E2AFCh case    0:*/		return 0x821E2B00;
		  /* 821E2B00h */ case    1:  		/* rlwinm R9, R10, 0, 17, 31 */
		/* 821E2B00h case    1:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R9,regs.R10);
		/* 821E2B00h case    1:*/		return 0x821E2B04;
		  /* 821E2B04h */ case    2:  		/* std R9, <#[R1 + 360]> */
		/* 821E2B04h case    2:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000168) );
		/* 821E2B04h case    2:*/		return 0x821E2B08;
		  /* 821E2B08h */ case    3:  		/* lfd FR0, <#[R1 + 360]> */
		/* 821E2B08h case    3:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000168) );
		/* 821E2B08h case    3:*/		return 0x821E2B0C;
		  /* 821E2B0Ch */ case    4:  		/* fcfid FR0, FR0 */
		/* 821E2B0Ch case    4:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821E2B0Ch case    4:*/		return 0x821E2B10;
		  /* 821E2B10h */ case    5:  		/* fcmpu CR6, FR0, FR28 */
		/* 821E2B10h case    5:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR28);
		/* 821E2B10h case    5:*/		return 0x821E2B14;
		  /* 821E2B14h */ case    6:  		/* bc 12, CR6_LT, 32 */
		/* 821E2B14h case    6:*/		if ( regs.CR[6].lt ) { return 0x821E2B34;  }
		/* 821E2B14h case    6:*/		return 0x821E2B18;
		  /* 821E2B18h */ case    7:  		/* fcmpu CR6, FR0, FR26 */
		/* 821E2B18h case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR26);
		/* 821E2B18h case    7:*/		return 0x821E2B1C;
		  /* 821E2B1Ch */ case    8:  		/* bc 4, CR6_GT, 16 */
		/* 821E2B1Ch case    8:*/		if ( !regs.CR[6].gt ) { return 0x821E2B2C;  }
		/* 821E2B1Ch case    8:*/		return 0x821E2B20;
		  /* 821E2B20h */ case    9:  		/* ori R11, R10, 32768 */
		/* 821E2B20h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R10,0x8000);
		/* 821E2B20h case    9:*/		return 0x821E2B24;
		  /* 821E2B24h */ case   10:  		/* stw R11, <#[R26 + 4]> */
		/* 821E2B24h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821E2B24h case   10:*/		return 0x821E2B28;
		  /* 821E2B28h */ case   11:  		/* b 12 */
		/* 821E2B28h case   11:*/		return 0x821E2B34;
		/* 821E2B28h case   11:*/		return 0x821E2B2C;
	}
	return 0x821E2B2C;
} // Block from 821E2AFCh-821E2B2Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E2B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2B2C);
		  /* 821E2B2Ch */ case    0:  		/* oris R11, R11, 2048 */
		/* 821E2B2Ch case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 821E2B2Ch case    0:*/		return 0x821E2B30;
		  /* 821E2B30h */ case    1:  		/* stw R11, <#[R26]> */
		/* 821E2B30h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E2B30h case    1:*/		return 0x821E2B34;
	}
	return 0x821E2B34;
} // Block from 821E2B2Ch-821E2B34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2B34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2B34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2B34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2B34);
		  /* 821E2B34h */ case    0:  		/* addi R23, R23, 1 */
		/* 821E2B34h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821E2B34h case    0:*/		return 0x821E2B38;
		  /* 821E2B38h */ case    1:  		/* cmplw CR6, R23, R17 */
		/* 821E2B38h case    1:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R17);
		/* 821E2B38h case    1:*/		return 0x821E2B3C;
		  /* 821E2B3Ch */ case    2:  		/* bc 12, CR6_LT, -2148 */
		/* 821E2B3Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x821E22D8;  }
		/* 821E2B3Ch case    2:*/		return 0x821E2B40;
	}
	return 0x821E2B40;
} // Block from 821E2B34h-821E2B40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E2B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2B40);
		  /* 821E2B40h */ case    0:  		/* lwz R20, <#[R1 + 804]> */
		/* 821E2B40h case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x00000324) );
		/* 821E2B40h case    0:*/		return 0x821E2B44;
		  /* 821E2B44h */ case    1:  		/* addi R19, R19, 68 */
		/* 821E2B44h case    1:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x44);
		/* 821E2B44h case    1:*/		return 0x821E2B48;
		  /* 821E2B48h */ case    2:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E2B48h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E2B48h case    2:*/		return 0x821E2B4C;
		  /* 821E2B4Ch */ case    3:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E2B4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E2B4Ch case    3:*/		return 0x821E2B50;
		  /* 821E2B50h */ case    4:  		/* mulli R10, R10, 68 */
		/* 821E2B50h case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E2B50h case    4:*/		return 0x821E2B54;
		  /* 821E2B54h */ case    5:  		/* add R10, R10, R11 */
		/* 821E2B54h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E2B54h case    5:*/		return 0x821E2B58;
		  /* 821E2B58h */ case    6:  		/* cmplw CR6, R19, R10 */
		/* 821E2B58h case    6:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R10);
		/* 821E2B58h case    6:*/		return 0x821E2B5C;
		  /* 821E2B5Ch */ case    7:  		/* bc 12, CR6_LT, -3396 */
		/* 821E2B5Ch case    7:*/		if ( regs.CR[6].lt ) { return 0x821E1E18;  }
		/* 821E2B5Ch case    7:*/		return 0x821E2B60;
	}
	return 0x821E2B60;
} // Block from 821E2B40h-821E2B60h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E2B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2B60);
		  /* 821E2B60h */ case    0:  		/* mr R26, R11 */
		/* 821E2B60h case    0:*/		regs.R26 = regs.R11;
		/* 821E2B60h case    0:*/		return 0x821E2B64;
		  /* 821E2B64h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 821E2B64h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E2B64h case    1:*/		return 0x821E2B68;
		  /* 821E2B68h */ case    2:  		/* li R21, 68 */
		/* 821E2B68h case    2:*/		cpu::op::li<0>(regs,&regs.R21,0x44);
		/* 821E2B68h case    2:*/		return 0x821E2B6C;
		  /* 821E2B6Ch */ case    3:  		/* li R16, 0 */
		/* 821E2B6Ch case    3:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 821E2B6Ch case    3:*/		return 0x821E2B70;
		  /* 821E2B70h */ case    4:  		/* bc 4, CR6_LT, 1564 */
		/* 821E2B70h case    4:*/		if ( !regs.CR[6].lt ) { return 0x821E318C;  }
		/* 821E2B70h case    4:*/		return 0x821E2B74;
		  /* 821E2B74h */ case    5:  		/* lwz R11, <#[R26 + 36]> */
		/* 821E2B74h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2B74h case    5:*/		return 0x821E2B78;
		  /* 821E2B78h */ case    6:  		/* mr R30, R16 */
		/* 821E2B78h case    6:*/		regs.R30 = regs.R16;
		/* 821E2B78h case    6:*/		return 0x821E2B7C;
		  /* 821E2B7Ch */ case    7:  		/* rlwinm. R29, R11, 31, 24, 31 */
		/* 821E2B7Ch case    7:*/		cpu::op::rlwinm<1,31,24,31>(regs,&regs.R29,regs.R11);
		/* 821E2B7Ch case    7:*/		return 0x821E2B80;
		  /* 821E2B80h */ case    8:  		/* bc 12, CR0_EQ, 104 */
		/* 821E2B80h case    8:*/		if ( regs.CR[0].eq ) { return 0x821E2BE8;  }
		/* 821E2B80h case    8:*/		return 0x821E2B84;
		  /* 821E2B84h */ case    9:  		/* mtspr CTR, R29 */
		/* 821E2B84h case    9:*/		regs.CTR = regs.R29;
		/* 821E2B84h case    9:*/		return 0x821E2B88;
		  /* 821E2B88h */ case   10:  		/* mr R8, R16 */
		/* 821E2B88h case   10:*/		regs.R8 = regs.R16;
		/* 821E2B88h case   10:*/		return 0x821E2B8C;
		  /* 821E2B8Ch */ case   11:  		/* lwz R11, <#[R26 + 44]> */
		/* 821E2B8Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000002C) );
		/* 821E2B8Ch case   11:*/		return 0x821E2B90;
		  /* 821E2B90h */ case   12:  		/* add R11, R11, R8 */
		/* 821E2B90h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821E2B90h case   12:*/		return 0x821E2B94;
		  /* 821E2B94h */ case   13:  		/* lwz R9, <#[R11]> */
		/* 821E2B94h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E2B94h case   13:*/		return 0x821E2B98;
		  /* 821E2B98h */ case   14:  		/* rlwinm. R10, R9, 0, 2, 2 */
		/* 821E2B98h case   14:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R9);
		/* 821E2B98h case   14:*/		return 0x821E2B9C;
		  /* 821E2B9Ch */ case   15:  		/* bc 12, CR0_EQ, 68 */
		/* 821E2B9Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821E2BE0;  }
		/* 821E2B9Ch case   15:*/		return 0x821E2BA0;
		  /* 821E2BA0h */ case   16:  		/* rlwinm. R10, R9, 0, 23, 23 */
		/* 821E2BA0h case   16:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R9);
		/* 821E2BA0h case   16:*/		return 0x821E2BA4;
		  /* 821E2BA4h */ case   17:  		/* bc 4, CR0_EQ, 60 */
		/* 821E2BA4h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821E2BE0;  }
		/* 821E2BA4h case   17:*/		return 0x821E2BA8;
		  /* 821E2BA8h */ case   18:  		/* rlwinm. R10, R9, 0, 25, 25 */
		/* 821E2BA8h case   18:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R9);
		/* 821E2BA8h case   18:*/		return 0x821E2BAC;
		  /* 821E2BACh */ case   19:  		/* bc 12, CR0_EQ, 52 */
		/* 821E2BACh case   19:*/		if ( regs.CR[0].eq ) { return 0x821E2BE0;  }
		/* 821E2BACh case   19:*/		return 0x821E2BB0;
		  /* 821E2BB0h */ case   20:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E2BB0h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E2BB0h case   20:*/		return 0x821E2BB4;
		  /* 821E2BB4h */ case   21:  		/* rlwinm R10, R10, 0, 17, 31 */
		/* 821E2BB4h case   21:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R10,regs.R10);
		/* 821E2BB4h case   21:*/		return 0x821E2BB8;
		  /* 821E2BB8h */ case   22:  		/* cmplw CR6, R10, R30 */
		/* 821E2BB8h case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 821E2BB8h case   22:*/		return 0x821E2BBC;
		  /* 821E2BBCh */ case   23:  		/* bc 12, CR6_LT, 36 */
		/* 821E2BBCh case   23:*/		if ( regs.CR[6].lt ) { return 0x821E2BE0;  }
		/* 821E2BBCh case   23:*/		return 0x821E2BC0;
		  /* 821E2BC0h */ case   24:  		/* bc 4, CR6_EQ, 12 */
		/* 821E2BC0h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821E2BCC;  }
		/* 821E2BC0h case   24:*/		return 0x821E2BC4;
		  /* 821E2BC4h */ case   25:  		/* rlwinm. R9, R9, 0, 4, 4 */
		/* 821E2BC4h case   25:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R9,regs.R9);
		/* 821E2BC4h case   25:*/		return 0x821E2BC8;
		  /* 821E2BC8h */ case   26:  		/* bc 12, CR0_EQ, 24 */
		/* 821E2BC8h case   26:*/		if ( regs.CR[0].eq ) { return 0x821E2BE0;  }
		/* 821E2BC8h case   26:*/		return 0x821E2BCC;
	}
	return 0x821E2BCC;
} // Block from 821E2B60h-821E2BCCh (27 instructions)

//////////////////////////////////////////////////////
// Block at 821E2BCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2BCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2BCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2BCC);
		  /* 821E2BCCh */ case    0:  		/* lwz R9, <#[R26 + 36]> */
		/* 821E2BCCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2BCCh case    0:*/		return 0x821E2BD0;
		  /* 821E2BD0h */ case    1:  		/* mr R30, R10 */
		/* 821E2BD0h case    1:*/		regs.R30 = regs.R10;
		/* 821E2BD0h case    1:*/		return 0x821E2BD4;
		  /* 821E2BD4h */ case    2:  		/* oris R10, R9, 2048 */
		/* 821E2BD4h case    2:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x800);
		/* 821E2BD4h case    2:*/		return 0x821E2BD8;
		  /* 821E2BD8h */ case    3:  		/* stw R10, <#[R26 + 36]> */
		/* 821E2BD8h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2BD8h case    3:*/		return 0x821E2BDC;
		  /* 821E2BDCh */ case    4:  		/* stw R11, <#[R26 + 56]> */
		/* 821E2BDCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000038) );
		/* 821E2BDCh case    4:*/		return 0x821E2BE0;
	}
	return 0x821E2BE0;
} // Block from 821E2BCCh-821E2BE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E2BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2BE0);
		  /* 821E2BE0h */ case    0:  		/* addi R8, R8, 88 */
		/* 821E2BE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x58);
		/* 821E2BE0h case    0:*/		return 0x821E2BE4;
		  /* 821E2BE4h */ case    1:  		/* bc 16, CR0_LT, -88 */
		/* 821E2BE4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821E2B8C;  }
		/* 821E2BE4h case    1:*/		return 0x821E2BE8;
	}
	return 0x821E2BE8;
} // Block from 821E2BE0h-821E2BE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2BE8);
		  /* 821E2BE8h */ case    0:  		/* lwz R11, <#[R26 + 56]> */
		/* 821E2BE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000038) );
		/* 821E2BE8h case    0:*/		return 0x821E2BEC;
		  /* 821E2BECh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E2BECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E2BECh case    1:*/		return 0x821E2BF0;
		  /* 821E2BF0h */ case    2:  		/* bc 4, CR6_EQ, 132 */
		/* 821E2BF0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E2C74;  }
		/* 821E2BF0h case    2:*/		return 0x821E2BF4;
		  /* 821E2BF4h */ case    3:  		/* li R8, -1 */
		/* 821E2BF4h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 821E2BF4h case    3:*/		return 0x821E2BF8;
		  /* 821E2BF8h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 821E2BF8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E2BF8h case    4:*/		return 0x821E2BFC;
		  /* 821E2BFCh */ case    5:  		/* bc 12, CR6_EQ, 100 */
		/* 821E2BFCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821E2C60;  }
		/* 821E2BFCh case    5:*/		return 0x821E2C00;
		  /* 821E2C00h */ case    6:  		/* mtspr CTR, R29 */
		/* 821E2C00h case    6:*/		regs.CTR = regs.R29;
		/* 821E2C00h case    6:*/		return 0x821E2C04;
		  /* 821E2C04h */ case    7:  		/* mr R9, R16 */
		/* 821E2C04h case    7:*/		regs.R9 = regs.R16;
		/* 821E2C04h case    7:*/		return 0x821E2C08;
		  /* 821E2C08h */ case    8:  		/* lwz R11, <#[R26 + 44]> */
		/* 821E2C08h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000002C) );
		/* 821E2C08h case    8:*/		return 0x821E2C0C;
		  /* 821E2C0Ch */ case    9:  		/* add R11, R11, R9 */
		/* 821E2C0Ch case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E2C0Ch case    9:*/		return 0x821E2C10;
		  /* 821E2C10h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821E2C10h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E2C10h case   10:*/		return 0x821E2C14;
		  /* 821E2C14h */ case   11:  		/* rlwinm. R7, R10, 0, 2, 2 */
		/* 821E2C14h case   11:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R7,regs.R10);
		/* 821E2C14h case   11:*/		return 0x821E2C18;
		  /* 821E2C18h */ case   12:  		/* bc 12, CR0_EQ, 64 */
		/* 821E2C18h case   12:*/		if ( regs.CR[0].eq ) { return 0x821E2C58;  }
		/* 821E2C18h case   12:*/		return 0x821E2C1C;
		  /* 821E2C1Ch */ case   13:  		/* rlwinm. R7, R10, 0, 23, 23 */
		/* 821E2C1Ch case   13:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R7,regs.R10);
		/* 821E2C1Ch case   13:*/		return 0x821E2C20;
		  /* 821E2C20h */ case   14:  		/* bc 4, CR0_EQ, 12 */
		/* 821E2C20h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821E2C2C;  }
		/* 821E2C20h case   14:*/		return 0x821E2C24;
		  /* 821E2C24h */ case   15:  		/* rlwinm. R7, R10, 0, 25, 25 */
		/* 821E2C24h case   15:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R7,regs.R10);
		/* 821E2C24h case   15:*/		return 0x821E2C28;
		  /* 821E2C28h */ case   16:  		/* bc 4, CR0_EQ, 48 */
		/* 821E2C28h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821E2C58;  }
		/* 821E2C28h case   16:*/		return 0x821E2C2C;
	}
	return 0x821E2C2C;
} // Block from 821E2BE8h-821E2C2Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E2C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2C2C);
		  /* 821E2C2Ch */ case    0:  		/* rlwinm. R10, R10, 0, 19, 19 */
		/* 821E2C2Ch case    0:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R10,regs.R10);
		/* 821E2C2Ch case    0:*/		return 0x821E2C30;
		  /* 821E2C30h */ case    1:  		/* bc 12, CR0_EQ, 40 */
		/* 821E2C30h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E2C58;  }
		/* 821E2C30h case    1:*/		return 0x821E2C34;
		  /* 821E2C34h */ case    2:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E2C34h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E2C34h case    2:*/		return 0x821E2C38;
		  /* 821E2C38h */ case    3:  		/* rlwinm R10, R10, 0, 17, 31 */
		/* 821E2C38h case    3:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R10,regs.R10);
		/* 821E2C38h case    3:*/		return 0x821E2C3C;
		  /* 821E2C3Ch */ case    4:  		/* cmplw CR6, R10, R8 */
		/* 821E2C3Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 821E2C3Ch case    4:*/		return 0x821E2C40;
		  /* 821E2C40h */ case    5:  		/* bc 4, CR6_LT, 24 */
		/* 821E2C40h case    5:*/		if ( !regs.CR[6].lt ) { return 0x821E2C58;  }
		/* 821E2C40h case    5:*/		return 0x821E2C44;
		  /* 821E2C44h */ case    6:  		/* lwz R7, <#[R26 + 36]> */
		/* 821E2C44h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2C44h case    6:*/		return 0x821E2C48;
		  /* 821E2C48h */ case    7:  		/* mr R8, R10 */
		/* 821E2C48h case    7:*/		regs.R8 = regs.R10;
		/* 821E2C48h case    7:*/		return 0x821E2C4C;
		  /* 821E2C4Ch */ case    8:  		/* oris R10, R7, 2048 */
		/* 821E2C4Ch case    8:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R7,0x800);
		/* 821E2C4Ch case    8:*/		return 0x821E2C50;
		  /* 821E2C50h */ case    9:  		/* stw R10, <#[R26 + 36]> */
		/* 821E2C50h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2C50h case    9:*/		return 0x821E2C54;
		  /* 821E2C54h */ case   10:  		/* stw R11, <#[R26 + 56]> */
		/* 821E2C54h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000038) );
		/* 821E2C54h case   10:*/		return 0x821E2C58;
	}
	return 0x821E2C58;
} // Block from 821E2C2Ch-821E2C58h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E2C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2C58);
		  /* 821E2C58h */ case    0:  		/* addi R9, R9, 88 */
		/* 821E2C58h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x58);
		/* 821E2C58h case    0:*/		return 0x821E2C5C;
		  /* 821E2C5Ch */ case    1:  		/* bc 16, CR0_LT, -84 */
		/* 821E2C5Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821E2C08;  }
		/* 821E2C5Ch case    1:*/		return 0x821E2C60;
	}
	return 0x821E2C60;
} // Block from 821E2C58h-821E2C60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2C60);
		  /* 821E2C60h */ case    0:  		/* lwz R11, <#[R26 + 36]> */
		/* 821E2C60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2C60h case    0:*/		return 0x821E2C64;
		  /* 821E2C64h */ case    1:  		/* rlwinm R11, R11, 0, 4, 4 */
		/* 821E2C64h case    1:*/		cpu::op::rlwinm<0,0,4,4>(regs,&regs.R11,regs.R11);
		/* 821E2C64h case    1:*/		return 0x821E2C68;
		  /* 821E2C68h */ case    2:  		/* subfic R11, R11, 0 */
		/* 821E2C68h case    2:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 821E2C68h case    2:*/		return 0x821E2C6C;
		  /* 821E2C6Ch */ case    3:  		/* subfe R11, R11, R11 */
		/* 821E2C6Ch case    3:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821E2C6Ch case    3:*/		return 0x821E2C70;
		  /* 821E2C70h */ case    4:  		/* and R30, R11, R8 */
		/* 821E2C70h case    4:*/		cpu::op::and<0>(regs,&regs.R30,regs.R11,regs.R8);
		/* 821E2C70h case    4:*/		return 0x821E2C74;
	}
	return 0x821E2C74;
} // Block from 821E2C60h-821E2C74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E2C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2C74);
		  /* 821E2C74h */ case    0:  		/* lwz R11, <#[R26 + 12]> */
		/* 821E2C74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000000C) );
		/* 821E2C74h case    0:*/		return 0x821E2C78;
		  /* 821E2C78h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E2C78h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E2C78h case    1:*/		return 0x821E2C7C;
		  /* 821E2C7Ch */ case    2:  		/* bc 12, CR6_EQ, 252 */
		/* 821E2C7Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821E2D78;  }
		/* 821E2C7Ch case    2:*/		return 0x821E2C80;
		  /* 821E2C80h */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E2C80h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E2C80h case    3:*/		return 0x821E2C84;
		  /* 821E2C84h */ case    4:  		/* lwz R10, <#[R11 + 36]> */
		/* 821E2C84h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821E2C84h case    4:*/		return 0x821E2C88;
		  /* 821E2C88h */ case    5:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E2C88h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E2C88h case    5:*/		return 0x821E2C8C;
		  /* 821E2C8Ch */ case    6:  		/* bc 4, CR0_EQ, 236 */
		/* 821E2C8Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E2D78;  }
		/* 821E2C8Ch case    6:*/		return 0x821E2C90;
		  /* 821E2C90h */ case    7:  		/* lwz R11, <#[R11 + 32]> */
		/* 821E2C90h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821E2C90h case    7:*/		return 0x821E2C94;
		  /* 821E2C94h */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E2C94h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E2C94h case    8:*/		return 0x821E2C98;
		  /* 821E2C98h */ case    9:  		/* addic. R31, R11, -40 */
		/* 821E2C98h case    9:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821E2C98h case    9:*/		return 0x821E2C9C;
		  /* 821E2C9Ch */ case   10:  		/* bc 12, CR0_EQ, 220 */
		/* 821E2C9Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x821E2D78;  }
		/* 821E2C9Ch case   10:*/		return 0x821E2CA0;
		  /* 821E2CA0h */ case   11:  		/* mr R3, R31 */
		/* 821E2CA0h case   11:*/		regs.R3 = regs.R31;
		/* 821E2CA0h case   11:*/		return 0x821E2CA4;
		  /* 821E2CA4h */ case   12:  		/* bl -518828 */
		/* 821E2CA4h case   12:*/		regs.LR = 0x821E2CA8; return 0x821641F8;
		/* 821E2CA4h case   12:*/		return 0x821E2CA8;
		  /* 821E2CA8h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E2CA8h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E2CA8h case   13:*/		return 0x821E2CAC;
		  /* 821E2CACh */ case   14:  		/* bc 12, CR0_EQ, 204 */
		/* 821E2CACh case   14:*/		if ( regs.CR[0].eq ) { return 0x821E2D78;  }
		/* 821E2CACh case   14:*/		return 0x821E2CB0;
		  /* 821E2CB0h */ case   15:  		/* mr R4, R20 */
		/* 821E2CB0h case   15:*/		regs.R4 = regs.R20;
		/* 821E2CB0h case   15:*/		return 0x821E2CB4;
		  /* 821E2CB4h */ case   16:  		/* mr R3, R31 */
		/* 821E2CB4h case   16:*/		regs.R3 = regs.R31;
		/* 821E2CB4h case   16:*/		return 0x821E2CB8;
		  /* 821E2CB8h */ case   17:  		/* bl -517496 */
		/* 821E2CB8h case   17:*/		regs.LR = 0x821E2CBC; return 0x82164740;
		/* 821E2CB8h case   17:*/		return 0x821E2CBC;
		  /* 821E2CBCh */ case   18:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E2CBCh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E2CBCh case   18:*/		return 0x821E2CC0;
		  /* 821E2CC0h */ case   19:  		/* rlwinm. R11, R11, 0, 30, 31 */
		/* 821E2CC0h case   19:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821E2CC0h case   19:*/		return 0x821E2CC4;
		  /* 821E2CC4h */ case   20:  		/* bc 12, CR0_EQ, 180 */
		/* 821E2CC4h case   20:*/		if ( regs.CR[0].eq ) { return 0x821E2D78;  }
		/* 821E2CC4h case   20:*/		return 0x821E2CC8;
		  /* 821E2CC8h */ case   21:  		/* lwz R11, <#[R3 + 4]> */
		/* 821E2CC8h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E2CC8h case   21:*/		return 0x821E2CCC;
		  /* 821E2CCCh */ case   22:  		/* li R10, 0 */
		/* 821E2CCCh case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821E2CCCh case   22:*/		return 0x821E2CD0;
		  /* 821E2CD0h */ case   23:  		/* li R9, 0 */
		/* 821E2CD0h case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821E2CD0h case   23:*/		return 0x821E2CD4;
		  /* 821E2CD4h */ case   24:  		/* li R8, 0 */
		/* 821E2CD4h case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E2CD4h case   24:*/		return 0x821E2CD8;
		  /* 821E2CD8h */ case   25:  		/* addi R7, R1, 228 */
		/* 821E2CD8h case   25:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xE4);
		/* 821E2CD8h case   25:*/		return 0x821E2CDC;
		  /* 821E2CDCh */ case   26:  		/* addi R6, R1, 252 */
		/* 821E2CDCh case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xFC);
		/* 821E2CDCh case   26:*/		return 0x821E2CE0;
		  /* 821E2CE0h */ case   27:  		/* addi R5, R1, 248 */
		/* 821E2CE0h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF8);
		/* 821E2CE0h case   27:*/		return 0x821E2CE4;
		  /* 821E2CE4h */ case   28:  		/* li R4, 0 */
		/* 821E2CE4h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E2CE4h case   28:*/		return 0x821E2CE8;
		  /* 821E2CE8h */ case   29:  		/* rlwinm R3, R11, 0, 0, 29 */
		/* 821E2CE8h case   29:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R3,regs.R11);
		/* 821E2CE8h case   29:*/		return 0x821E2CEC;
		  /* 821E2CECh */ case   30:  		/* bl 264164 */
		/* 821E2CECh case   30:*/		regs.LR = 0x821E2CF0; return 0x822234D0;
		/* 821E2CECh case   30:*/		return 0x821E2CF0;
		  /* 821E2CF0h */ case   31:  		/* lwz R3, <#[R1 + 248]> */
		/* 821E2CF0h case   31:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000F8) );
		/* 821E2CF0h case   31:*/		return 0x821E2CF4;
		  /* 821E2CF4h */ case   32:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E2CF4h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E2CF4h case   32:*/		return 0x821E2CF8;
		  /* 821E2CF8h */ case   33:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E2CF8h case   33:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E2CF8h case   33:*/		return 0x821E2CFC;
		  /* 821E2CFCh */ case   34:  		/* cmplwi CR6, R11, 16000 */
		/* 821E2CFCh case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821E2CFCh case   34:*/		return 0x821E2D00;
		  /* 821E2D00h */ case   35:  		/* bc 4, CR6_EQ, 52 */
		/* 821E2D00h case   35:*/		if ( !regs.CR[6].eq ) { return 0x821E2D34;  }
		/* 821E2D00h case   35:*/		return 0x821E2D04;
		  /* 821E2D04h */ case   36:  		/* lwz R5, <#[R1 + 228]> */
		/* 821E2D04h case   36:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000E4) );
		/* 821E2D04h case   36:*/		return 0x821E2D08;
		  /* 821E2D08h */ case   37:  		/* lwz R4, <#[R1 + 252]> */
		/* 821E2D08h case   37:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000FC) );
		/* 821E2D08h case   37:*/		return 0x821E2D0C;
		  /* 821E2D0Ch */ case   38:  		/* bl 256404 */
		/* 821E2D0Ch case   38:*/		regs.LR = 0x821E2D10; return 0x822216A0;
		/* 821E2D0Ch case   38:*/		return 0x821E2D10;
		  /* 821E2D10h */ case   39:  		/* fctidz FR0, FR1 */
		/* 821E2D10h case   39:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR1);
		/* 821E2D10h case   39:*/		return 0x821E2D14;
		  /* 821E2D14h */ case   40:  		/* stfd FR0, <#[R1 + 136]> */
		/* 821E2D14h case   40:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000088) );
		/* 821E2D14h case   40:*/		return 0x821E2D18;
		  /* 821E2D18h */ case   41:  		/* lwz R5, <#[R1 + 140]> */
		/* 821E2D18h case   41:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000008C) );
		/* 821E2D18h case   41:*/		return 0x821E2D1C;
		  /* 821E2D1Ch */ case   42:  		/* mr R11, R5 */
		/* 821E2D1Ch case   42:*/		regs.R11 = regs.R5;
		/* 821E2D1Ch case   42:*/		return 0x821E2D20;
		  /* 821E2D20h */ case   43:  		/* std R5, <#[R1 + 376]> */
		/* 821E2D20h case   43:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000178) );
		/* 821E2D20h case   43:*/		return 0x821E2D24;
		  /* 821E2D24h */ case   44:  		/* lfd FR0, <#[R1 + 376]> */
		/* 821E2D24h case   44:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000178) );
		/* 821E2D24h case   44:*/		return 0x821E2D28;
		  /* 821E2D28h */ case   45:  		/* fcfid FR0, FR0 */
		/* 821E2D28h case   45:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821E2D28h case   45:*/		return 0x821E2D2C;
		  /* 821E2D2Ch */ case   46:  		/* fcmpu CR6, FR0, FR1 */
		/* 821E2D2Ch case   46:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR1);
		/* 821E2D2Ch case   46:*/		return 0x821E2D30;
		  /* 821E2D30h */ case   47:  		/* bc 12, CR6_EQ, 20 */
		/* 821E2D30h case   47:*/		if ( regs.CR[6].eq ) { return 0x821E2D44;  }
		/* 821E2D30h case   47:*/		return 0x821E2D34;
	}
	return 0x821E2D34;
} // Block from 821E2C74h-821E2D34h (48 instructions)

//////////////////////////////////////////////////////
// Block at 821E2D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2D34);
		  /* 821E2D34h */ case    0:  		/* li R4, 3586 */
		/* 821E2D34h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE02);
		/* 821E2D34h case    0:*/		return 0x821E2D38;
		  /* 821E2D38h */ case    1:  		/* mr R3, R20 */
		/* 821E2D38h case    1:*/		regs.R3 = regs.R20;
		/* 821E2D38h case    1:*/		return 0x821E2D3C;
		  /* 821E2D3Ch */ case    2:  		/* bl -593860 */
		/* 821E2D3Ch case    2:*/		regs.LR = 0x821E2D40; return 0x82151D78;
		/* 821E2D3Ch case    2:*/		return 0x821E2D40;
		  /* 821E2D40h */ case    3:  		/* b 56 */
		/* 821E2D40h case    3:*/		return 0x821E2D78;
		/* 821E2D40h case    3:*/		return 0x821E2D44;
	}
	return 0x821E2D44;
} // Block from 821E2D34h-821E2D44h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E2D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2D44);
		  /* 821E2D44h */ case    0:  		/* lwz R11, <#[R26 + 36]> */
		/* 821E2D44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2D44h case    0:*/		return 0x821E2D48;
		  /* 821E2D48h */ case    1:  		/* rlwinm. R10, R11, 0, 4, 4 */
		/* 821E2D48h case    1:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R10,regs.R11);
		/* 821E2D48h case    1:*/		return 0x821E2D4C;
		  /* 821E2D4Ch */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 821E2D4Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821E2D6C;  }
		/* 821E2D4Ch case    2:*/		return 0x821E2D50;
		  /* 821E2D50h */ case    3:  		/* cmplw CR6, R30, R5 */
		/* 821E2D50h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R5);
		/* 821E2D50h case    3:*/		return 0x821E2D54;
		  /* 821E2D54h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 821E2D54h case    4:*/		if ( regs.CR[6].eq ) { return 0x821E2D6C;  }
		/* 821E2D54h case    4:*/		return 0x821E2D58;
		  /* 821E2D58h */ case    5:  		/* mr R6, R30 */
		/* 821E2D58h case    5:*/		regs.R6 = regs.R30;
		/* 821E2D58h case    5:*/		return 0x821E2D5C;
		  /* 821E2D5Ch */ case    6:  		/* li R4, 3647 */
		/* 821E2D5Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0xE3F);
		/* 821E2D5Ch case    6:*/		return 0x821E2D60;
		  /* 821E2D60h */ case    7:  		/* mr R3, R20 */
		/* 821E2D60h case    7:*/		regs.R3 = regs.R20;
		/* 821E2D60h case    7:*/		return 0x821E2D64;
		  /* 821E2D64h */ case    8:  		/* bl -593900 */
		/* 821E2D64h case    8:*/		regs.LR = 0x821E2D68; return 0x82151D78;
		/* 821E2D64h case    8:*/		return 0x821E2D68;
		  /* 821E2D68h */ case    9:  		/* b 16 */
		/* 821E2D68h case    9:*/		return 0x821E2D78;
		/* 821E2D68h case    9:*/		return 0x821E2D6C;
	}
	return 0x821E2D6C;
} // Block from 821E2D44h-821E2D6Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E2D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2D6C);
		  /* 821E2D6Ch */ case    0:  		/* oris R11, R11, 2048 */
		/* 821E2D6Ch case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 821E2D6Ch case    0:*/		return 0x821E2D70;
		  /* 821E2D70h */ case    1:  		/* mr R30, R5 */
		/* 821E2D70h case    1:*/		regs.R30 = regs.R5;
		/* 821E2D70h case    1:*/		return 0x821E2D74;
		  /* 821E2D74h */ case    2:  		/* stw R11, <#[R26 + 36]> */
		/* 821E2D74h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2D74h case    2:*/		return 0x821E2D78;
	}
	return 0x821E2D78;
} // Block from 821E2D6Ch-821E2D78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E2D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2D78);
		  /* 821E2D78h */ case    0:  		/* cmplwi CR6, R30, 32767 */
		/* 821E2D78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00007FFF);
		/* 821E2D78h case    0:*/		return 0x821E2D7C;
		  /* 821E2D7Ch */ case    1:  		/* bc 12, CR6_GT, 15528 */
		/* 821E2D7Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x821E6A24;  }
		/* 821E2D7Ch case    1:*/		return 0x821E2D80;
		  /* 821E2D80h */ case    2:  		/* lwz R11, <#[R26 + 36]> */
		/* 821E2D80h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2D80h case    2:*/		return 0x821E2D84;
		  /* 821E2D84h */ case    3:  		/* rlwimi R11, R30, 10, 7, 21 */
		/* 821E2D84h case    3:*/		cpu::op::rlwimi<0,10,7,21>(regs,&regs.R11,regs.R30);
		/* 821E2D84h case    3:*/		return 0x821E2D88;
		  /* 821E2D88h */ case    4:  		/* rlwinm. R10, R11, 0, 4, 4 */
		/* 821E2D88h case    4:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R10,regs.R11);
		/* 821E2D88h case    4:*/		return 0x821E2D8C;
		  /* 821E2D8Ch */ case    5:  		/* stw R11, <#[R26 + 36]> */
		/* 821E2D8Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2D8Ch case    5:*/		return 0x821E2D90;
		  /* 821E2D90h */ case    6:  		/* bc 12, CR0_EQ, 284 */
		/* 821E2D90h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E2EAC;  }
		/* 821E2D90h case    6:*/		return 0x821E2D94;
		  /* 821E2D94h */ case    7:  		/* cmplwi CR6, R29, 0 */
		/* 821E2D94h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E2D94h case    7:*/		return 0x821E2D98;
		  /* 821E2D98h */ case    8:  		/* bc 12, CR6_EQ, 276 */
		/* 821E2D98h case    8:*/		if ( regs.CR[6].eq ) { return 0x821E2EAC;  }
		/* 821E2D98h case    8:*/		return 0x821E2D9C;
		  /* 821E2D9Ch */ case    9:  		/* mr R30, R16 */
		/* 821E2D9Ch case    9:*/		regs.R30 = regs.R16;
		/* 821E2D9Ch case    9:*/		return 0x821E2DA0;
		  /* 821E2DA0h */ case   10:  		/* lwz R11, <#[R26 + 44]> */
		/* 821E2DA0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000002C) );
		/* 821E2DA0h case   10:*/		return 0x821E2DA4;
		  /* 821E2DA4h */ case   11:  		/* add R31, R11, R30 */
		/* 821E2DA4h case   11:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R30);
		/* 821E2DA4h case   11:*/		return 0x821E2DA8;
		  /* 821E2DA8h */ case   12:  		/* lfd FR12, <#[R31 + 40]> */
		/* 821E2DA8h case   12:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R31 + 0x00000028) );
		/* 821E2DA8h case   12:*/		return 0x821E2DAC;
		  /* 821E2DACh */ case   13:  		/* fcmpu CR6, FR12, FR28 */
		/* 821E2DACh case   13:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR28);
		/* 821E2DACh case   13:*/		return 0x821E2DB0;
		  /* 821E2DB0h */ case   14:  		/* bc 12, CR6_EQ, 240 */
		/* 821E2DB0h case   14:*/		if ( regs.CR[6].eq ) { return 0x821E2EA0;  }
		/* 821E2DB0h case   14:*/		return 0x821E2DB4;
		  /* 821E2DB4h */ case   15:  		/* lwz R9, <#[R31]> */
		/* 821E2DB4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821E2DB4h case   15:*/		return 0x821E2DB8;
		  /* 821E2DB8h */ case   16:  		/* addi R6, R1, 232 */
		/* 821E2DB8h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xE8);
		/* 821E2DB8h case   16:*/		return 0x821E2DBC;
		  /* 821E2DBCh */ case   17:  		/* mr R3, R31 */
		/* 821E2DBCh case   17:*/		regs.R3 = regs.R31;
		/* 821E2DBCh case   17:*/		return 0x821E2DC0;
		  /* 821E2DC0h */ case   18:  		/* lfd FR1, <#[R31 + 24]> */
		/* 821E2DC0h case   18:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000018) );
		/* 821E2DC0h case   18:*/		return 0x821E2DC4;
		  /* 821E2DC4h */ case   19:  		/* rlwinm R4, R9, 1, 31, 31 */
		/* 821E2DC4h case   19:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R4,regs.R9);
		/* 821E2DC4h case   19:*/		return 0x821E2DC8;
		  /* 821E2DC8h */ case   20:  		/* bl -153016 */
		/* 821E2DC8h case   20:*/		regs.LR = 0x821E2DCC; return 0x821BD810;
		/* 821E2DC8h case   20:*/		return 0x821E2DCC;
		  /* 821E2DCCh */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E2DCCh case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E2DCCh case   21:*/		return 0x821E2DD0;
		  /* 821E2DD0h */ case   22:  		/* bc 12, CR0_EQ, 208 */
		/* 821E2DD0h case   22:*/		if ( regs.CR[0].eq ) { return 0x821E2EA0;  }
		/* 821E2DD0h case   22:*/		return 0x821E2DD4;
		  /* 821E2DD4h */ case   23:  		/* lwz R11, <#[R26 + 36]> */
		/* 821E2DD4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2DD4h case   23:*/		return 0x821E2DD8;
		  /* 821E2DD8h */ case   24:  		/* rlwinm. R10, R9, 0, 2, 2 */
		/* 821E2DD8h case   24:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R9);
		/* 821E2DD8h case   24:*/		return 0x821E2DDC;
		  /* 821E2DDCh */ case   25:  		/* rlwinm R11, R11, 22, 17, 31 */
		/* 821E2DDCh case   25:*/		cpu::op::rlwinm<0,22,17,31>(regs,&regs.R11,regs.R11);
		/* 821E2DDCh case   25:*/		return 0x821E2DE0;
		  /* 821E2DE0h */ case   26:  		/* bc 12, CR0_EQ, 24 */
		/* 821E2DE0h case   26:*/		if ( regs.CR[0].eq ) { return 0x821E2DF8;  }
		/* 821E2DE0h case   26:*/		return 0x821E2DE4;
		  /* 821E2DE4h */ case   27:  		/* lwz R10, <#[R31 + 4]> */
		/* 821E2DE4h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821E2DE4h case   27:*/		return 0x821E2DE8;
		  /* 821E2DE8h */ case   28:  		/* rlwinm R10, R10, 0, 17, 31 */
		/* 821E2DE8h case   28:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R10,regs.R10);
		/* 821E2DE8h case   28:*/		return 0x821E2DEC;
		  /* 821E2DECh */ case   29:  		/* cmplw CR6, R10, R11 */
		/* 821E2DECh case   29:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821E2DECh case   29:*/		return 0x821E2DF0;
		  /* 821E2DF0h */ case   30:  		/* bc 4, CR6_LT, 8 */
		/* 821E2DF0h case   30:*/		if ( !regs.CR[6].lt ) { return 0x821E2DF8;  }
		/* 821E2DF0h case   30:*/		return 0x821E2DF4;
		  /* 821E2DF4h */ case   31:  		/* mr R11, R10 */
		/* 821E2DF4h case   31:*/		regs.R11 = regs.R10;
		/* 821E2DF4h case   31:*/		return 0x821E2DF8;
	}
	return 0x821E2DF8;
} // Block from 821E2D78h-821E2DF8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821E2DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2DF8);
		  /* 821E2DF8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E2DF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E2DF8h case    0:*/		return 0x821E2DFC;
		  /* 821E2DFCh */ case    1:  		/* bc 12, CR6_EQ, 164 */
		/* 821E2DFCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821E2EA0;  }
		/* 821E2DFCh case    1:*/		return 0x821E2E00;
		  /* 821E2E00h */ case    2:  		/* addi R11, R11, -1 */
		/* 821E2E00h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E2E00h case    2:*/		return 0x821E2E04;
		  /* 821E2E04h */ case    3:  		/* fcmpu CR6, FR12, FR28 */
		/* 821E2E04h case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR28);
		/* 821E2E04h case    3:*/		return 0x821E2E08;
		  /* 821E2E08h */ case    4:  		/* rldicl R11, R11, 0, 32 */
		/* 821E2E08h case    4:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 821E2E08h case    4:*/		return 0x821E2E0C;
		  /* 821E2E0Ch */ case    5:  		/* bc 4, CR6_GT, 28 */
		/* 821E2E0Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x821E2E28;  }
		/* 821E2E0Ch case    5:*/		return 0x821E2E10;
		  /* 821E2E10h */ case    6:  		/* std R11, <#[R1 + 392]> */
		/* 821E2E10h case    6:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000188) );
		/* 821E2E10h case    6:*/		return 0x821E2E14;
		  /* 821E2E14h */ case    7:  		/* lfd FR31, <#[R1 + 232]> */
		/* 821E2E14h case    7:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0x000000E8) );
		/* 821E2E14h case    7:*/		return 0x821E2E18;
		  /* 821E2E18h */ case    8:  		/* lfd FR0, <#[R1 + 392]> */
		/* 821E2E18h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000188) );
		/* 821E2E18h case    8:*/		return 0x821E2E1C;
		  /* 821E2E1Ch */ case    9:  		/* fcfid FR0, FR0 */
		/* 821E2E1Ch case    9:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821E2E1Ch case    9:*/		return 0x821E2E20;
		  /* 821E2E20h */ case   10:  		/* fmadd FR30, FR0, FR12, FR31 */
		/* 821E2E20h case   10:*/		cpu::op::fmadd<0>(regs,&regs.FR30,regs.FR0,regs.FR12,regs.FR31);
		/* 821E2E20h case   10:*/		return 0x821E2E24;
		  /* 821E2E24h */ case   11:  		/* b 32 */
		/* 821E2E24h case   11:*/		return 0x821E2E44;
		/* 821E2E24h case   11:*/		return 0x821E2E28;
	}
	return 0x821E2E28;
} // Block from 821E2DF8h-821E2E28h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E2E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2E28);
		  /* 821E2E28h */ case    0:  		/* std R11, <#[R1 + 408]> */
		/* 821E2E28h case    0:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000198) );
		/* 821E2E28h case    0:*/		return 0x821E2E2C;
		  /* 821E2E2Ch */ case    1:  		/* lfd FR0, <#[R1 + 232]> */
		/* 821E2E2Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000E8) );
		/* 821E2E2Ch case    1:*/		return 0x821E2E30;
		  /* 821E2E30h */ case    2:  		/* fmr FR30, FR0 */
		/* 821E2E30h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR0);
		/* 821E2E30h case    2:*/		return 0x821E2E34;
		  /* 821E2E34h */ case    3:  		/* lfd FR13, <#[R1 + 408]> */
		/* 821E2E34h case    3:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000198) );
		/* 821E2E34h case    3:*/		return 0x821E2E38;
		  /* 821E2E38h */ case    4:  		/* fcfid FR13, FR13 */
		/* 821E2E38h case    4:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 821E2E38h case    4:*/		return 0x821E2E3C;
		  /* 821E2E3Ch */ case    5:  		/* fmadd FR31, FR13, FR12, FR0 */
		/* 821E2E3Ch case    5:*/		cpu::op::fmadd<0>(regs,&regs.FR31,regs.FR13,regs.FR12,regs.FR0);
		/* 821E2E3Ch case    5:*/		return 0x821E2E40;
		  /* 821E2E40h */ case    6:  		/* stfd FR31, <#[R1 + 232]> */
		/* 821E2E40h case    6:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0x000000E8) );
		/* 821E2E40h case    6:*/		return 0x821E2E44;
	}
	return 0x821E2E44;
} // Block from 821E2E28h-821E2E44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E2E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2E44);
		  /* 821E2E44h */ case    0:  		/* addi R6, R1, 304 */
		/* 821E2E44h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x130);
		/* 821E2E44h case    0:*/		return 0x821E2E48;
		  /* 821E2E48h */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 821E2E48h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821E2E48h case    1:*/		return 0x821E2E4C;
		  /* 821E2E4Ch */ case    2:  		/* addi R5, R1, 312 */
		/* 821E2E4Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x138);
		/* 821E2E4Ch case    2:*/		return 0x821E2E50;
		  /* 821E2E50h */ case    3:  		/* li R4, 0 */
		/* 821E2E50h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E2E50h case    3:*/		return 0x821E2E54;
		  /* 821E2E54h */ case    4:  		/* bl 260956 */
		/* 821E2E54h case    4:*/		regs.LR = 0x821E2E58; return 0x822229B0;
		/* 821E2E54h case    4:*/		return 0x821E2E58;
		  /* 821E2E58h */ case    5:  		/* lfd FR1, <#[R1 + 312]> */
		/* 821E2E58h case    5:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000138) );
		/* 821E2E58h case    5:*/		return 0x821E2E5C;
		  /* 821E2E5Ch */ case    6:  		/* fcmpu CR6, FR1, FR31 */
		/* 821E2E5Ch case    6:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 821E2E5Ch case    6:*/		return 0x821E2E60;
		  /* 821E2E60h */ case    7:  		/* bc 12, CR6_GT, 12 */
		/* 821E2E60h case    7:*/		if ( regs.CR[6].gt ) { return 0x821E2E6C;  }
		/* 821E2E60h case    7:*/		return 0x821E2E64;
		  /* 821E2E64h */ case    8:  		/* stfd FR31, <#[R1 + 312]> */
		/* 821E2E64h case    8:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000138) );
		/* 821E2E64h case    8:*/		return 0x821E2E68;
		  /* 821E2E68h */ case    9:  		/* fmr FR1, FR31 */
		/* 821E2E68h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E2E68h case    9:*/		return 0x821E2E6C;
	}
	return 0x821E2E6C;
} // Block from 821E2E44h-821E2E6Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E2E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2E6C);
		  /* 821E2E6Ch */ case    0:  		/* lfd FR2, <#[R1 + 304]> */
		/* 821E2E6Ch case    0:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000130) );
		/* 821E2E6Ch case    0:*/		return 0x821E2E70;
		  /* 821E2E70h */ case    1:  		/* fcmpu CR6, FR2, FR30 */
		/* 821E2E70h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR2,regs.FR30);
		/* 821E2E70h case    1:*/		return 0x821E2E74;
		  /* 821E2E74h */ case    2:  		/* bc 12, CR6_LT, 12 */
		/* 821E2E74h case    2:*/		if ( regs.CR[6].lt ) { return 0x821E2E80;  }
		/* 821E2E74h case    2:*/		return 0x821E2E78;
		  /* 821E2E78h */ case    3:  		/* stfd FR30, <#[R1 + 304]> */
		/* 821E2E78h case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0x00000130) );
		/* 821E2E78h case    3:*/		return 0x821E2E7C;
		  /* 821E2E7Ch */ case    4:  		/* fmr FR2, FR30 */
		/* 821E2E7Ch case    4:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR30);
		/* 821E2E7Ch case    4:*/		return 0x821E2E80;
	}
	return 0x821E2E80;
} // Block from 821E2E6Ch-821E2E80h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E2E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2E80);
		  /* 821E2E80h */ case    0:  		/* mr R7, R20 */
		/* 821E2E80h case    0:*/		regs.R7 = regs.R20;
		/* 821E2E80h case    0:*/		return 0x821E2E84;
		  /* 821E2E84h */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 821E2E84h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821E2E84h case    1:*/		return 0x821E2E88;
		  /* 821E2E88h */ case    2:  		/* li R4, 0 */
		/* 821E2E88h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E2E88h case    2:*/		return 0x821E2E8C;
		  /* 821E2E8Ch */ case    3:  		/* bl 261268 */
		/* 821E2E8Ch case    3:*/		regs.LR = 0x821E2E90; return 0x82222B20;
		/* 821E2E8Ch case    3:*/		return 0x821E2E90;
		  /* 821E2E90h */ case    4:  		/* lbz R11, <#[R1 + 129]> */
		/* 821E2E90h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000081) );
		/* 821E2E90h case    4:*/		return 0x821E2E94;
		  /* 821E2E94h */ case    5:  		/* rlwinm R10, R3, 0, 24, 31 */
		/* 821E2E94h case    5:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R3);
		/* 821E2E94h case    5:*/		return 0x821E2E98;
		  /* 821E2E98h */ case    6:  		/* or R11, R10, R11 */
		/* 821E2E98h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E2E98h case    6:*/		return 0x821E2E9C;
		  /* 821E2E9Ch */ case    7:  		/* stb R11, <#[R1 + 129]> */
		/* 821E2E9Ch case    7:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000081) );
		/* 821E2E9Ch case    7:*/		return 0x821E2EA0;
	}
	return 0x821E2EA0;
} // Block from 821E2E80h-821E2EA0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E2EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2EA0);
		  /* 821E2EA0h */ case    0:  		/* addic. R29, R29, -1 */
		/* 821E2EA0h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821E2EA0h case    0:*/		return 0x821E2EA4;
		  /* 821E2EA4h */ case    1:  		/* addi R30, R30, 88 */
		/* 821E2EA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x58);
		/* 821E2EA4h case    1:*/		return 0x821E2EA8;
		  /* 821E2EA8h */ case    2:  		/* bc 4, CR0_EQ, -264 */
		/* 821E2EA8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E2DA0;  }
		/* 821E2EA8h case    2:*/		return 0x821E2EAC;
	}
	return 0x821E2EAC;
} // Block from 821E2EA0h-821E2EACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E2EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2EAC);
		  /* 821E2EACh */ case    0:  		/* lwz R11, <#[R26 + 36]> */
		/* 821E2EACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2EACh case    0:*/		return 0x821E2EB0;
		  /* 821E2EB0h */ case    1:  		/* rlwinm. R10, R11, 0, 7, 21 */
		/* 821E2EB0h case    1:*/		cpu::op::rlwinm<1,0,7,21>(regs,&regs.R10,regs.R11);
		/* 821E2EB0h case    1:*/		return 0x821E2EB4;
		  /* 821E2EB4h */ case    2:  		/* bc 4, CR0_EQ, 24 */
		/* 821E2EB4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E2ECC;  }
		/* 821E2EB4h case    2:*/		return 0x821E2EB8;
		  /* 821E2EB8h */ case    3:  		/* rlwinm. R11, R11, 0, 4, 4 */
		/* 821E2EB8h case    3:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R11);
		/* 821E2EB8h case    3:*/		return 0x821E2EBC;
		  /* 821E2EBCh */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 821E2EBCh case    4:*/		if ( regs.CR[0].eq ) { return 0x821E2ECC;  }
		/* 821E2EBCh case    4:*/		return 0x821E2EC0;
		  /* 821E2EC0h */ case    5:  		/* lwz R11, <#[R26 + 60]> */
		/* 821E2EC0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000003C) );
		/* 821E2EC0h case    5:*/		return 0x821E2EC4;
		  /* 821E2EC4h */ case    6:  		/* ori R11, R11, 2 */
		/* 821E2EC4h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821E2EC4h case    6:*/		return 0x821E2EC8;
		  /* 821E2EC8h */ case    7:  		/* stw R11, <#[R26 + 60]> */
		/* 821E2EC8h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x0000003C) );
		/* 821E2EC8h case    7:*/		return 0x821E2ECC;
	}
	return 0x821E2ECC;
} // Block from 821E2EACh-821E2ECCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E2ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2ECC);
		  /* 821E2ECCh */ case    0:  		/* lwz R25, <#[R26 + 36]> */
		/* 821E2ECCh case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R26 + 0x00000024) );
		/* 821E2ECCh case    0:*/		return 0x821E2ED0;
		  /* 821E2ED0h */ case    1:  		/* rlwinm. R11, R25, 0, 4, 4 */
		/* 821E2ED0h case    1:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R25);
		/* 821E2ED0h case    1:*/		return 0x821E2ED4;
		  /* 821E2ED4h */ case    2:  		/* bc 4, CR0_EQ, 344 */
		/* 821E2ED4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E302C;  }
		/* 821E2ED4h case    2:*/		return 0x821E2ED8;
		  /* 821E2ED8h */ case    3:  		/* rlwinm. R11, R25, 0, 23, 30 */
		/* 821E2ED8h case    3:*/		cpu::op::rlwinm<1,0,23,30>(regs,&regs.R11,regs.R25);
		/* 821E2ED8h case    3:*/		return 0x821E2EDC;
		  /* 821E2EDCh */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 821E2EDCh case    4:*/		if ( regs.CR[0].eq ) { return 0x821E2EE8;  }
		/* 821E2EDCh case    4:*/		return 0x821E2EE0;
		  /* 821E2EE0h */ case    5:  		/* rlwinm. R11, R25, 0, 3, 3 */
		/* 821E2EE0h case    5:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R25);
		/* 821E2EE0h case    5:*/		return 0x821E2EE4;
		  /* 821E2EE4h */ case    6:  		/* bc 12, CR0_EQ, 328 */
		/* 821E2EE4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E302C;  }
		/* 821E2EE4h case    6:*/		return 0x821E2EE8;
	}
	return 0x821E2EE8;
} // Block from 821E2ECCh-821E2EE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E2EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2EE8);
		  /* 821E2EE8h */ case    0:  		/* rlwinm. R11, R25, 0, 3, 3 */
		/* 821E2EE8h case    0:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R25);
		/* 821E2EE8h case    0:*/		return 0x821E2EEC;
		  /* 821E2EECh */ case    1:  		/* bc 4, CR0_EQ, 300 */
		/* 821E2EECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E3018;  }
		/* 821E2EECh case    1:*/		return 0x821E2EF0;
		  /* 821E2EF0h */ case    2:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E2EF0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E2EF0h case    2:*/		return 0x821E2EF4;
		  /* 821E2EF4h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E2EF4h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E2EF4h case    3:*/		return 0x821E2EF8;
		  /* 821E2EF8h */ case    4:  		/* bc 4, CR0_EQ, 288 */
		/* 821E2EF8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E3018;  }
		/* 821E2EF8h case    4:*/		return 0x821E2EFC;
		  /* 821E2EFCh */ case    5:  		/* mr R29, R11 */
		/* 821E2EFCh case    5:*/		regs.R29 = regs.R11;
		/* 821E2EFCh case    5:*/		return 0x821E2F00;
		  /* 821E2F00h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821E2F00h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E2F00h case    6:*/		return 0x821E2F04;
		  /* 821E2F04h */ case    7:  		/* bc 12, CR0_EQ, 276 */
		/* 821E2F04h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E3018;  }
		/* 821E2F04h case    7:*/		return 0x821E2F08;
		  /* 821E2F08h */ case    8:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E2F08h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E2F08h case    8:*/		return 0x821E2F0C;
		  /* 821E2F0Ch */ case    9:  		/* subf R11, R11, R26 */
		/* 821E2F0Ch case    9:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821E2F0Ch case    9:*/		return 0x821E2F10;
		  /* 821E2F10h */ case   10:  		/* divw R10, R11, R21 */
		/* 821E2F10h case   10:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R21);
		/* 821E2F10h case   10:*/		return 0x821E2F14;
		  /* 821E2F14h */ case   11:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E2F14h case   11:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E2F14h case   11:*/		return 0x821E2F18;
		  /* 821E2F18h */ case   12:  		/* rlwinm R28, R10, 0, 27, 31 */
		/* 821E2F18h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R28,regs.R10);
		/* 821E2F18h case   12:*/		return 0x821E2F1C;
		  /* 821E2F1Ch */ case   13:  		/* addi R11, R11, 21 */
		/* 821E2F1Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E2F1Ch case   13:*/		return 0x821E2F20;
		  /* 821E2F20h */ case   14:  		/* rlwinm R27, R11, 2, 0, 29 */
		/* 821E2F20h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R11);
		/* 821E2F20h case   14:*/		return 0x821E2F24;
		  /* 821E2F24h */ case   15:  		/* lwzx R11, <#[R27 + R29]> */
		/* 821E2F24h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + regs.R29 + 0x00000000) );
		/* 821E2F24h case   15:*/		return 0x821E2F28;
		  /* 821E2F28h */ case   16:  		/* srw R11, R11, R28 */
		/* 821E2F28h case   16:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821E2F28h case   16:*/		return 0x821E2F2C;
		  /* 821E2F2Ch */ case   17:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E2F2Ch case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E2F2Ch case   17:*/		return 0x821E2F30;
		  /* 821E2F30h */ case   18:  		/* bc 12, CR0_EQ, 204 */
		/* 821E2F30h case   18:*/		if ( regs.CR[0].eq ) { return 0x821E2FFC;  }
		/* 821E2F30h case   18:*/		return 0x821E2F34;
		  /* 821E2F34h */ case   19:  		/* lwz R11, <#[R29 + 20]> */
		/* 821E2F34h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821E2F34h case   19:*/		return 0x821E2F38;
		  /* 821E2F38h */ case   20:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E2F38h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E2F38h case   20:*/		return 0x821E2F3C;
		  /* 821E2F3Ch */ case   21:  		/* bc 12, CR0_EQ, 40 */
		/* 821E2F3Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x821E2F64;  }
		/* 821E2F3Ch case   21:*/		return 0x821E2F40;
		  /* 821E2F40h */ case   22:  		/* lwz R11, <#[R29 + 28]> */
		/* 821E2F40h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E2F40h case   22:*/		return 0x821E2F44;
		  /* 821E2F44h */ case   23:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E2F44h case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E2F44h case   23:*/		return 0x821E2F48;
		  /* 821E2F48h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 821E2F48h case   24:*/		if ( regs.CR[0].eq ) { return 0x821E2F58;  }
		/* 821E2F48h case   24:*/		return 0x821E2F4C;
		  /* 821E2F4Ch */ case   25:  		/* lwz R11, <#[R29 + 36]> */
		/* 821E2F4Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821E2F4Ch case   25:*/		return 0x821E2F50;
		  /* 821E2F50h */ case   26:  		/* addi R30, R29, 32 */
		/* 821E2F50h case   26:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x20);
		/* 821E2F50h case   26:*/		return 0x821E2F54;
		  /* 821E2F54h */ case   27:  		/* b 24 */
		/* 821E2F54h case   27:*/		return 0x821E2F6C;
		/* 821E2F54h case   27:*/		return 0x821E2F58;
	}
	return 0x821E2F58;
} // Block from 821E2EE8h-821E2F58h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821E2F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2F58);
		  /* 821E2F58h */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 821E2F58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E2F58h case    0:*/		return 0x821E2F5C;
		  /* 821E2F5Ch */ case    1:  		/* addi R30, R29, 24 */
		/* 821E2F5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x18);
		/* 821E2F5Ch case    1:*/		return 0x821E2F60;
		  /* 821E2F60h */ case    2:  		/* b 12 */
		/* 821E2F60h case    2:*/		return 0x821E2F6C;
		/* 821E2F60h case    2:*/		return 0x821E2F64;
	}
	return 0x821E2F64;
} // Block from 821E2F58h-821E2F64h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E2F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2F64);
		  /* 821E2F64h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 821E2F64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821E2F64h case    0:*/		return 0x821E2F68;
		  /* 821E2F68h */ case    1:  		/* addi R30, R29, 16 */
		/* 821E2F68h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x10);
		/* 821E2F68h case    1:*/		return 0x821E2F6C;
	}
	return 0x821E2F6C;
} // Block from 821E2F64h-821E2F6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2F6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2F6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2F6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2F6C);
		  /* 821E2F6Ch */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821E2F6Ch case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E2F6Ch case    0:*/		return 0x821E2F70;
		  /* 821E2F70h */ case    1:  		/* addic R10, R10, -1 */
		/* 821E2F70h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821E2F70h case    1:*/		return 0x821E2F74;
		  /* 821E2F74h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821E2F74h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821E2F74h case    2:*/		return 0x821E2F78;
		  /* 821E2F78h */ case    3:  		/* and R31, R10, R11 */
		/* 821E2F78h case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821E2F78h case    3:*/		return 0x821E2F7C;
		  /* 821E2F7Ch */ case    4:  		/* b 108 */
		/* 821E2F7Ch case    4:*/		return 0x821E2FE8;
		/* 821E2F7Ch case    4:*/		return 0x821E2F80;
		  /* 821E2F80h */ case    5:  		/* mr R3, R31 */
		/* 821E2F80h case    5:*/		regs.R3 = regs.R31;
		/* 821E2F80h case    5:*/		return 0x821E2F84;
		  /* 821E2F84h */ case    6:  		/* bl -438596 */
		/* 821E2F84h case    6:*/		regs.LR = 0x821E2F88; return 0x82177E40;
		/* 821E2F84h case    6:*/		return 0x821E2F88;
		  /* 821E2F88h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E2F88h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E2F88h case    7:*/		return 0x821E2F8C;
		  /* 821E2F8Ch */ case    8:  		/* bc 4, CR0_EQ, 104 */
		/* 821E2F8Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E2FF4;  }
		/* 821E2F8Ch case    8:*/		return 0x821E2F90;
		  /* 821E2F90h */ case    9:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821E2F90h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821E2F90h case    9:*/		return 0x821E2F94;
		  /* 821E2F94h */ case   10:  		/* lwz R31, <#[R11 + 40]> */
		/* 821E2F94h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821E2F94h case   10:*/		return 0x821E2F98;
		  /* 821E2F98h */ case   11:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821E2F98h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821E2F98h case   11:*/		return 0x821E2F9C;
		  /* 821E2F9Ch */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 821E2F9Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x821E2FA8;  }
		/* 821E2F9Ch case   12:*/		return 0x821E2FA0;
		  /* 821E2FA0h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 821E2FA0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E2FA0h case   13:*/		return 0x821E2FA4;
		  /* 821E2FA4h */ case   14:  		/* bc 4, CR6_EQ, -36 */
		/* 821E2FA4h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821E2F80;  }
		/* 821E2FA4h case   14:*/		return 0x821E2FA8;
	}
	return 0x821E2FA8;
} // Block from 821E2F6Ch-821E2FA8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821E2FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2FA8);
		  /* 821E2FA8h */ case    0:  		/* addi R10, R29, 32 */
		/* 821E2FA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x20);
		/* 821E2FA8h case    0:*/		return 0x821E2FAC;
		  /* 821E2FACh */ case    1:  		/* cmplw CR6, R30, R10 */
		/* 821E2FACh case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821E2FACh case    1:*/		return 0x821E2FB0;
		  /* 821E2FB0h */ case    2:  		/* bc 12, CR6_EQ, 76 */
		/* 821E2FB0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E2FFC;  }
		/* 821E2FB0h case    2:*/		return 0x821E2FB4;
		  /* 821E2FB4h */ case    3:  		/* addi R11, R29, 24 */
		/* 821E2FB4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x18);
		/* 821E2FB4h case    3:*/		return 0x821E2FB8;
		  /* 821E2FB8h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 821E2FB8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821E2FB8h case    4:*/		return 0x821E2FBC;
		  /* 821E2FBCh */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821E2FBCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821E2FD8;  }
		/* 821E2FBCh case    5:*/		return 0x821E2FC0;
		  /* 821E2FC0h */ case    6:  		/* lwz R9, <#[R29 + 28]> */
		/* 821E2FC0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E2FC0h case    6:*/		return 0x821E2FC4;
		  /* 821E2FC4h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821E2FC4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821E2FC4h case    7:*/		return 0x821E2FC8;
		  /* 821E2FC8h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821E2FC8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E2FD8;  }
		/* 821E2FC8h case    8:*/		return 0x821E2FCC;
		  /* 821E2FCCh */ case    9:  		/* lwz R31, <#[R11 + 4]> */
		/* 821E2FCCh case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821E2FCCh case    9:*/		return 0x821E2FD0;
		  /* 821E2FD0h */ case   10:  		/* mr R30, R11 */
		/* 821E2FD0h case   10:*/		regs.R30 = regs.R11;
		/* 821E2FD0h case   10:*/		return 0x821E2FD4;
		  /* 821E2FD4h */ case   11:  		/* b 12 */
		/* 821E2FD4h case   11:*/		return 0x821E2FE0;
		/* 821E2FD4h case   11:*/		return 0x821E2FD8;
	}
	return 0x821E2FD8;
} // Block from 821E2FA8h-821E2FD8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E2FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2FD8);
		  /* 821E2FD8h */ case    0:  		/* lwz R31, <#[R10 + 4]> */
		/* 821E2FD8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 821E2FD8h case    0:*/		return 0x821E2FDC;
		  /* 821E2FDCh */ case    1:  		/* mr R30, R10 */
		/* 821E2FDCh case    1:*/		regs.R30 = regs.R10;
		/* 821E2FDCh case    1:*/		return 0x821E2FE0;
	}
	return 0x821E2FE0;
} // Block from 821E2FD8h-821E2FE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2FE0);
		  /* 821E2FE0h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821E2FE0h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821E2FE0h case    0:*/		return 0x821E2FE4;
		  /* 821E2FE4h */ case    1:  		/* bc 4, CR0_EQ, 24 */
		/* 821E2FE4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E2FFC;  }
		/* 821E2FE4h case    1:*/		return 0x821E2FE8;
	}
	return 0x821E2FE8;
} // Block from 821E2FE0h-821E2FE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2FE8);
		  /* 821E2FE8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821E2FE8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E2FE8h case    0:*/		return 0x821E2FEC;
		  /* 821E2FECh */ case    1:  		/* bc 4, CR6_EQ, -108 */
		/* 821E2FECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E2F80;  }
		/* 821E2FECh case    1:*/		return 0x821E2FF0;
		  /* 821E2FF0h */ case    2:  		/* b 12 */
		/* 821E2FF0h case    2:*/		return 0x821E2FFC;
		/* 821E2FF0h case    2:*/		return 0x821E2FF4;
	}
	return 0x821E2FF4;
} // Block from 821E2FE8h-821E2FF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E2FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2FF4);
		  /* 821E2FF4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821E2FF4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E2FF4h case    0:*/		return 0x821E2FF8;
		  /* 821E2FF8h */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 821E2FF8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E302C;  }
		/* 821E2FF8h case    1:*/		return 0x821E2FFC;
	}
	return 0x821E2FFC;
} // Block from 821E2FF4h-821E2FFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E2FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E2FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E2FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E2FFC);
		  /* 821E2FFCh */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821E2FFCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821E2FFCh case    0:*/		return 0x821E3000;
		  /* 821E3000h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E3000h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E3000h case    1:*/		return 0x821E3004;
		  /* 821E3004h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E3004h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E3004h case    2:*/		return 0x821E3008;
		  /* 821E3008h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E3008h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E3018;  }
		/* 821E3008h case    3:*/		return 0x821E300C;
		  /* 821E300Ch */ case    4:  		/* mr R29, R11 */
		/* 821E300Ch case    4:*/		regs.R29 = regs.R11;
		/* 821E300Ch case    4:*/		return 0x821E3010;
		  /* 821E3010h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E3010h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3010h case    5:*/		return 0x821E3014;
		  /* 821E3014h */ case    6:  		/* bc 4, CR6_EQ, -240 */
		/* 821E3014h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E2F24;  }
		/* 821E3014h case    6:*/		return 0x821E3018;
	}
	return 0x821E3018;
} // Block from 821E2FFCh-821E3018h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E3018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3018);
		  /* 821E3018h */ case    0:  		/* lis R11, 0 */
		/* 821E3018h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x0);
		/* 821E3018h case    0:*/		return 0x821E301C;
		  /* 821E301Ch */ case    1:  		/* ori R11, R11, 32769 */
		/* 821E301Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8001);
		/* 821E301Ch case    1:*/		return 0x821E3020;
		  /* 821E3020h */ case    2:  		/* rlwimi R25, R11, 27, 7, 21 */
		/* 821E3020h case    2:*/		cpu::op::rlwimi<0,27,7,21>(regs,&regs.R25,regs.R11);
		/* 821E3020h case    2:*/		return 0x821E3024;
		  /* 821E3024h */ case    3:  		/* rlwimi R25, R11, 27, 4, 4 */
		/* 821E3024h case    3:*/		cpu::op::rlwimi<0,27,4,4>(regs,&regs.R25,regs.R11);
		/* 821E3024h case    3:*/		return 0x821E3028;
		  /* 821E3028h */ case    4:  		/* stw R25, <#[R26 + 36]> */
		/* 821E3028h case    4:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R26 + 0x00000024) );
		/* 821E3028h case    4:*/		return 0x821E302C;
	}
	return 0x821E302C;
} // Block from 821E3018h-821E302Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E302Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E302C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E302C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E302C);
		  /* 821E302Ch */ case    0:  		/* lwz R11, <#[R26 + 60]> */
		/* 821E302Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000003C) );
		/* 821E302Ch case    0:*/		return 0x821E3030;
		  /* 821E3030h */ case    1:  		/* rlwinm. R10, R11, 0, 30, 30 */
		/* 821E3030h case    1:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R11);
		/* 821E3030h case    1:*/		return 0x821E3034;
		  /* 821E3034h */ case    2:  		/* bc 4, CR0_EQ, 192 */
		/* 821E3034h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E30F4;  }
		/* 821E3034h case    2:*/		return 0x821E3038;
		  /* 821E3038h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E3038h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E3038h case    3:*/		return 0x821E303C;
		  /* 821E303Ch */ case    4:  		/* bc 4, CR0_EQ, 184 */
		/* 821E303Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E30F4;  }
		/* 821E303Ch case    4:*/		return 0x821E3040;
		  /* 821E3040h */ case    5:  		/* lwz R11, <#[R20 + 52]> */
		/* 821E3040h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000034) );
		/* 821E3040h case    5:*/		return 0x821E3044;
		  /* 821E3044h */ case    6:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821E3044h case    6:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821E3044h case    6:*/		return 0x821E3048;
		  /* 821E3048h */ case    7:  		/* bc 4, CR0_EQ, 172 */
		/* 821E3048h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821E30F4;  }
		/* 821E3048h case    7:*/		return 0x821E304C;
		  /* 821E304Ch */ case    8:  		/* lwz R11, <#[R26 + 4]> */
		/* 821E304Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821E304Ch case    8:*/		return 0x821E3050;
		  /* 821E3050h */ case    9:  		/* lwz R11, <#[R11 + 20]> */
		/* 821E3050h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821E3050h case    9:*/		return 0x821E3054;
		  /* 821E3054h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E3054h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E3054h case   10:*/		return 0x821E3058;
		  /* 821E3058h */ case   11:  		/* bc 4, CR0_EQ, 156 */
		/* 821E3058h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821E30F4;  }
		/* 821E3058h case   11:*/		return 0x821E305C;
		  /* 821E305Ch */ case   12:  		/* mr R31, R11 */
		/* 821E305Ch case   12:*/		regs.R31 = regs.R11;
		/* 821E305Ch case   12:*/		return 0x821E3060;
		  /* 821E3060h */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 821E3060h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E3060h case   13:*/		return 0x821E3064;
		  /* 821E3064h */ case   14:  		/* bc 12, CR0_EQ, 144 */
		/* 821E3064h case   14:*/		if ( regs.CR[0].eq ) { return 0x821E30F4;  }
		/* 821E3064h case   14:*/		return 0x821E3068;
		  /* 821E3068h */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E3068h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E3068h case   15:*/		return 0x821E306C;
		  /* 821E306Ch */ case   16:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E306Ch case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E306Ch case   16:*/		return 0x821E3070;
		  /* 821E3070h */ case   17:  		/* cmplwi CR6, R11, 14336 */
		/* 821E3070h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E3070h case   17:*/		return 0x821E3074;
		  /* 821E3074h */ case   18:  		/* bc 4, CR6_EQ, 80 */
		/* 821E3074h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821E30C4;  }
		/* 821E3074h case   18:*/		return 0x821E3078;
		  /* 821E3078h */ case   19:  		/* lwz R30, <#[R31]> */
		/* 821E3078h case   19:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 821E3078h case   19:*/		return 0x821E307C;
		  /* 821E307Ch */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 821E307Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E307Ch case   20:*/		return 0x821E3080;
		  /* 821E3080h */ case   21:  		/* bc 12, CR6_EQ, 68 */
		/* 821E3080h case   21:*/		if ( regs.CR[6].eq ) { return 0x821E30C4;  }
		/* 821E3080h case   21:*/		return 0x821E3084;
		  /* 821E3084h */ case   22:  		/* li R10, 0 */
		/* 821E3084h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821E3084h case   22:*/		return 0x821E3088;
		  /* 821E3088h */ case   23:  		/* li R9, 0 */
		/* 821E3088h case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821E3088h case   23:*/		return 0x821E308C;
		  /* 821E308Ch */ case   24:  		/* li R8, 0 */
		/* 821E308Ch case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E308Ch case   24:*/		return 0x821E3090;
		  /* 821E3090h */ case   25:  		/* addi R7, R1, 496 */
		/* 821E3090h case   25:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1F0);
		/* 821E3090h case   25:*/		return 0x821E3094;
		  /* 821E3094h */ case   26:  		/* addi R6, R1, 432 */
		/* 821E3094h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1B0);
		/* 821E3094h case   26:*/		return 0x821E3098;
		  /* 821E3098h */ case   27:  		/* addi R5, R1, 244 */
		/* 821E3098h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF4);
		/* 821E3098h case   27:*/		return 0x821E309C;
		  /* 821E309Ch */ case   28:  		/* li R4, 0 */
		/* 821E309Ch case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E309Ch case   28:*/		return 0x821E30A0;
		  /* 821E30A0h */ case   29:  		/* mr R3, R30 */
		/* 821E30A0h case   29:*/		regs.R3 = regs.R30;
		/* 821E30A0h case   29:*/		return 0x821E30A4;
		  /* 821E30A4h */ case   30:  		/* bl 263212 */
		/* 821E30A4h case   30:*/		regs.LR = 0x821E30A8; return 0x822234D0;
		/* 821E30A4h case   30:*/		return 0x821E30A8;
		  /* 821E30A8h */ case   31:  		/* lwz R11, <#[R1 + 244]> */
		/* 821E30A8h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F4) );
		/* 821E30A8h case   31:*/		return 0x821E30AC;
		  /* 821E30ACh */ case   32:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E30ACh case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E30ACh case   32:*/		return 0x821E30B0;
		  /* 821E30B0h */ case   33:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E30B0h case   33:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E30B0h case   33:*/		return 0x821E30B4;
		  /* 821E30B4h */ case   34:  		/* cmplwi CR6, R11, 14848 */
		/* 821E30B4h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003A00);
		/* 821E30B4h case   34:*/		return 0x821E30B8;
		  /* 821E30B8h */ case   35:  		/* bc 12, CR6_EQ, 44 */
		/* 821E30B8h case   35:*/		if ( regs.CR[6].eq ) { return 0x821E30E4;  }
		/* 821E30B8h case   35:*/		return 0x821E30BC;
		  /* 821E30BCh */ case   36:  		/* lwz R30, <#[R30 + 4]> */
		/* 821E30BCh case   36:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 821E30BCh case   36:*/		return 0x821E30C0;
		  /* 821E30C0h */ case   37:  		/* b -68 */
		/* 821E30C0h case   37:*/		return 0x821E307C;
		/* 821E30C0h case   37:*/		return 0x821E30C4;
	}
	return 0x821E30C4;
} // Block from 821E302Ch-821E30C4h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821E30C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E30C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E30C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E30C4);
		  /* 821E30C4h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821E30C4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821E30C4h case    0:*/		return 0x821E30C8;
		  /* 821E30C8h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E30C8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E30C8h case    1:*/		return 0x821E30CC;
		  /* 821E30CCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E30CCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E30CCh case    2:*/		return 0x821E30D0;
		  /* 821E30D0h */ case    3:  		/* bc 4, CR0_EQ, 36 */
		/* 821E30D0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E30F4;  }
		/* 821E30D0h case    3:*/		return 0x821E30D4;
		  /* 821E30D4h */ case    4:  		/* mr R31, R11 */
		/* 821E30D4h case    4:*/		regs.R31 = regs.R11;
		/* 821E30D4h case    4:*/		return 0x821E30D8;
		  /* 821E30D8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E30D8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E30D8h case    5:*/		return 0x821E30DC;
		  /* 821E30DCh */ case    6:  		/* bc 4, CR6_EQ, -116 */
		/* 821E30DCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E3068;  }
		/* 821E30DCh case    6:*/		return 0x821E30E0;
		  /* 821E30E0h */ case    7:  		/* b 20 */
		/* 821E30E0h case    7:*/		return 0x821E30F4;
		/* 821E30E0h case    7:*/		return 0x821E30E4;
	}
	return 0x821E30E4;
} // Block from 821E30C4h-821E30E4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E30E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E30E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E30E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E30E4);
		  /* 821E30E4h */ case    0:  		/* lwz R11, <#[R26 + 60]> */
		/* 821E30E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000003C) );
		/* 821E30E4h case    0:*/		return 0x821E30E8;
		  /* 821E30E8h */ case    1:  		/* oris R11, R11, 32768 */
		/* 821E30E8h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 821E30E8h case    1:*/		return 0x821E30EC;
		  /* 821E30ECh */ case    2:  		/* ori R11, R11, 2 */
		/* 821E30ECh case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821E30ECh case    2:*/		return 0x821E30F0;
		  /* 821E30F0h */ case    3:  		/* stw R11, <#[R26 + 60]> */
		/* 821E30F0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x0000003C) );
		/* 821E30F0h case    3:*/		return 0x821E30F4;
	}
	return 0x821E30F4;
} // Block from 821E30E4h-821E30F4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E30F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E30F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E30F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E30F4);
		  /* 821E30F4h */ case    0:  		/* lwz R11, <#[R26 + 36]> */
		/* 821E30F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821E30F4h case    0:*/		return 0x821E30F8;
		  /* 821E30F8h */ case    1:  		/* rlwinm. R11, R11, 22, 17, 31 */
		/* 821E30F8h case    1:*/		cpu::op::rlwinm<1,22,17,31>(regs,&regs.R11,regs.R11);
		/* 821E30F8h case    1:*/		return 0x821E30FC;
		  /* 821E30FCh */ case    2:  		/* mr R9, R11 */
		/* 821E30FCh case    2:*/		regs.R9 = regs.R11;
		/* 821E30FCh case    2:*/		return 0x821E3100;
		  /* 821E3100h */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 821E3100h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E3108;  }
		/* 821E3100h case    3:*/		return 0x821E3104;
		  /* 821E3104h */ case    4:  		/* li R9, 10 */
		/* 821E3104h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0xA);
		/* 821E3104h case    4:*/		return 0x821E3108;
	}
	return 0x821E3108;
} // Block from 821E30F4h-821E3108h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E3108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3108);
		  /* 821E3108h */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E3108h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E3108h case    0:*/		return 0x821E310C;
		  /* 821E310Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E310Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E310Ch case    1:*/		return 0x821E3110;
		  /* 821E3110h */ case    2:  		/* bc 4, CR0_EQ, 96 */
		/* 821E3110h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E3170;  }
		/* 821E3110h case    2:*/		return 0x821E3114;
		  /* 821E3114h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821E3114h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E3114h case    3:*/		return 0x821E3118;
		  /* 821E3118h */ case    4:  		/* bc 12, CR0_EQ, 88 */
		/* 821E3118h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E3170;  }
		/* 821E3118h case    4:*/		return 0x821E311C;
		  /* 821E311Ch */ case    5:  		/* lwz R10, <#[R20 + 616]> */
		/* 821E311Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000268) );
		/* 821E311Ch case    5:*/		return 0x821E3120;
		  /* 821E3120h */ case    6:  		/* subf R10, R10, R26 */
		/* 821E3120h case    6:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R26);
		/* 821E3120h case    6:*/		return 0x821E3124;
		  /* 821E3124h */ case    7:  		/* divw R8, R10, R21 */
		/* 821E3124h case    7:*/		cpu::op::divw<0>(regs,&regs.R8,regs.R10,regs.R21);
		/* 821E3124h case    7:*/		return 0x821E3128;
		  /* 821E3128h */ case    8:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 821E3128h case    8:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 821E3128h case    8:*/		return 0x821E312C;
		  /* 821E312Ch */ case    9:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821E312Ch case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821E312Ch case    9:*/		return 0x821E3130;
		  /* 821E3130h */ case   10:  		/* addi R10, R10, 21 */
		/* 821E3130h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821E3130h case   10:*/		return 0x821E3134;
		  /* 821E3134h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E3134h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E3134h case   11:*/		return 0x821E3138;
		  /* 821E3138h */ case   12:  		/* lwzx R10, <#[R10 + R11]> */
		/* 821E3138h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E3138h case   12:*/		return 0x821E313C;
		  /* 821E313Ch */ case   13:  		/* srw R10, R10, R8 */
		/* 821E313Ch case   13:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821E313Ch case   13:*/		return 0x821E3140;
		  /* 821E3140h */ case   14:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E3140h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E3140h case   14:*/		return 0x821E3144;
		  /* 821E3144h */ case   15:  		/* bc 12, CR0_EQ, 20 */
		/* 821E3144h case   15:*/		if ( regs.CR[0].eq ) { return 0x821E3158;  }
		/* 821E3144h case   15:*/		return 0x821E3148;
		  /* 821E3148h */ case   16:  		/* lwz R10, <#[R11 + 68]> */
		/* 821E3148h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000044) );
		/* 821E3148h case   16:*/		return 0x821E314C;
		  /* 821E314Ch */ case   17:  		/* mullw R8, R9, R10 */
		/* 821E314Ch case   17:*/		cpu::op::mullw<0>(regs,&regs.R8,regs.R9,regs.R10);
		/* 821E314Ch case   17:*/		return 0x821E3150;
		  /* 821E3150h */ case   18:  		/* rlwimi R8, R10, 0, 0, 3 */
		/* 821E3150h case   18:*/		cpu::op::rlwimi<0,0,0,3>(regs,&regs.R8,regs.R10);
		/* 821E3150h case   18:*/		return 0x821E3154;
		  /* 821E3154h */ case   19:  		/* stw R8, <#[R11 + 68]> */
		/* 821E3154h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000044) );
		/* 821E3154h case   19:*/		return 0x821E3158;
	}
	return 0x821E3158;
} // Block from 821E3108h-821E3158h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821E3158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3158);
		  /* 821E3158h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E3158h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E3158h case    0:*/		return 0x821E315C;
		  /* 821E315Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E315Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E315Ch case    1:*/		return 0x821E3160;
		  /* 821E3160h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E3160h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E3160h case    2:*/		return 0x821E3164;
		  /* 821E3164h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E3164h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E3170;  }
		/* 821E3164h case    3:*/		return 0x821E3168;
		  /* 821E3168h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E3168h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3168h case    4:*/		return 0x821E316C;
		  /* 821E316Ch */ case    5:  		/* bc 4, CR6_EQ, -80 */
		/* 821E316Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E311C;  }
		/* 821E316Ch case    5:*/		return 0x821E3170;
	}
	return 0x821E3170;
} // Block from 821E3158h-821E3170h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E3170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3170);
		  /* 821E3170h */ case    0:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E3170h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E3170h case    0:*/		return 0x821E3174;
		  /* 821E3174h */ case    1:  		/* addi R26, R26, 68 */
		/* 821E3174h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x44);
		/* 821E3174h case    1:*/		return 0x821E3178;
		  /* 821E3178h */ case    2:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E3178h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E3178h case    2:*/		return 0x821E317C;
		  /* 821E317Ch */ case    3:  		/* mulli R10, R10, 68 */
		/* 821E317Ch case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E317Ch case    3:*/		return 0x821E3180;
		  /* 821E3180h */ case    4:  		/* add R11, R10, R11 */
		/* 821E3180h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E3180h case    4:*/		return 0x821E3184;
		  /* 821E3184h */ case    5:  		/* cmplw CR6, R26, R11 */
		/* 821E3184h case    5:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 821E3184h case    5:*/		return 0x821E3188;
		  /* 821E3188h */ case    6:  		/* bc 12, CR6_LT, -1556 */
		/* 821E3188h case    6:*/		if ( regs.CR[6].lt ) { return 0x821E2B74;  }
		/* 821E3188h case    6:*/		return 0x821E318C;
	}
	return 0x821E318C;
} // Block from 821E3170h-821E318Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E318Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E318C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E318C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E318C);
		  /* 821E318Ch */ case    0:  		/* lwz R8, <#[R20 + 4]> */
		/* 821E318Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R20 + 0x00000004) );
		/* 821E318Ch case    0:*/		return 0x821E3190;
		  /* 821E3190h */ case    1:  		/* rlwinm. R11, R8, 0, 31, 31 */
		/* 821E3190h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R8);
		/* 821E3190h case    1:*/		return 0x821E3194;
		  /* 821E3194h */ case    2:  		/* bc 4, CR0_EQ, 220 */
		/* 821E3194h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E3270;  }
		/* 821E3194h case    2:*/		return 0x821E3198;
		  /* 821E3198h */ case    3:  		/* cmplwi CR0, R8, 0 */
		/* 821E3198h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 821E3198h case    3:*/		return 0x821E319C;
		  /* 821E319Ch */ case    4:  		/* bc 12, CR0_EQ, 212 */
		/* 821E319Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821E3270;  }
		/* 821E319Ch case    4:*/		return 0x821E31A0;
		  /* 821E31A0h */ case    5:  		/* lwz R11, <#[R8 + 20]> */
		/* 821E31A0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000014) );
		/* 821E31A0h case    5:*/		return 0x821E31A4;
		  /* 821E31A4h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E31A4h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E31A4h case    6:*/		return 0x821E31A8;
		  /* 821E31A8h */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 821E31A8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E31D0;  }
		/* 821E31A8h case    7:*/		return 0x821E31AC;
		  /* 821E31ACh */ case    8:  		/* lwz R11, <#[R8 + 28]> */
		/* 821E31ACh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821E31ACh case    8:*/		return 0x821E31B0;
		  /* 821E31B0h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E31B0h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E31B0h case    9:*/		return 0x821E31B4;
		  /* 821E31B4h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821E31B4h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E31C4;  }
		/* 821E31B4h case   10:*/		return 0x821E31B8;
		  /* 821E31B8h */ case   11:  		/* lwz R11, <#[R8 + 36]> */
		/* 821E31B8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000024) );
		/* 821E31B8h case   11:*/		return 0x821E31BC;
		  /* 821E31BCh */ case   12:  		/* addi R10, R8, 32 */
		/* 821E31BCh case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x20);
		/* 821E31BCh case   12:*/		return 0x821E31C0;
		  /* 821E31C0h */ case   13:  		/* b 24 */
		/* 821E31C0h case   13:*/		return 0x821E31D8;
		/* 821E31C0h case   13:*/		return 0x821E31C4;
	}
	return 0x821E31C4;
} // Block from 821E318Ch-821E31C4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E31C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E31C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E31C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E31C4);
		  /* 821E31C4h */ case    0:  		/* lwz R11, <#[R8 + 28]> */
		/* 821E31C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821E31C4h case    0:*/		return 0x821E31C8;
		  /* 821E31C8h */ case    1:  		/* addi R10, R8, 24 */
		/* 821E31C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x18);
		/* 821E31C8h case    1:*/		return 0x821E31CC;
		  /* 821E31CCh */ case    2:  		/* b 12 */
		/* 821E31CCh case    2:*/		return 0x821E31D8;
		/* 821E31CCh case    2:*/		return 0x821E31D0;
	}
	return 0x821E31D0;
} // Block from 821E31C4h-821E31D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E31D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E31D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E31D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E31D0);
		  /* 821E31D0h */ case    0:  		/* lwz R11, <#[R8 + 20]> */
		/* 821E31D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000014) );
		/* 821E31D0h case    0:*/		return 0x821E31D4;
		  /* 821E31D4h */ case    1:  		/* addi R10, R8, 16 */
		/* 821E31D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x10);
		/* 821E31D4h case    1:*/		return 0x821E31D8;
	}
	return 0x821E31D8;
} // Block from 821E31D0h-821E31D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E31D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E31D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E31D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E31D8);
		  /* 821E31D8h */ case    0:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821E31D8h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E31D8h case    0:*/		return 0x821E31DC;
		  /* 821E31DCh */ case    1:  		/* addic R9, R9, -1 */
		/* 821E31DCh case    1:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821E31DCh case    1:*/		return 0x821E31E0;
		  /* 821E31E0h */ case    2:  		/* subfe R9, R9, R9 */
		/* 821E31E0h case    2:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821E31E0h case    2:*/		return 0x821E31E4;
		  /* 821E31E4h */ case    3:  		/* and R11, R9, R11 */
		/* 821E31E4h case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821E31E4h case    3:*/		return 0x821E31E8;
		  /* 821E31E8h */ case    4:  		/* b 104 */
		/* 821E31E8h case    4:*/		return 0x821E3250;
		/* 821E31E8h case    4:*/		return 0x821E31EC;
		  /* 821E31ECh */ case    5:  		/* lwz R9, <#[R11 + 8]> */
		/* 821E31ECh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E31ECh case    5:*/		return 0x821E31F0;
		  /* 821E31F0h */ case    6:  		/* rlwinm R7, R11, 0, 0, 30 */
		/* 821E31F0h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R11);
		/* 821E31F0h case    6:*/		return 0x821E31F4;
		  /* 821E31F4h */ case    7:  		/* rlwinm R9, R9, 0, 6, 4 */
		/* 821E31F4h case    7:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R9,regs.R9);
		/* 821E31F4h case    7:*/		return 0x821E31F8;
		  /* 821E31F8h */ case    8:  		/* stw R9, <#[R11 + 8]> */
		/* 821E31F8h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E31F8h case    8:*/		return 0x821E31FC;
		  /* 821E31FCh */ case    9:  		/* lwz R11, <#[R7 + 40]> */
		/* 821E31FCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000028) );
		/* 821E31FCh case    9:*/		return 0x821E3200;
		  /* 821E3200h */ case   10:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821E3200h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E3200h case   10:*/		return 0x821E3204;
		  /* 821E3204h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 821E3204h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821E3210;  }
		/* 821E3204h case   11:*/		return 0x821E3208;
		  /* 821E3208h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821E3208h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3208h case   12:*/		return 0x821E320C;
		  /* 821E320Ch */ case   13:  		/* bc 4, CR6_EQ, -32 */
		/* 821E320Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x821E31EC;  }
		/* 821E320Ch case   13:*/		return 0x821E3210;
	}
	return 0x821E3210;
} // Block from 821E31D8h-821E3210h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E3210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3210);
		  /* 821E3210h */ case    0:  		/* addi R7, R8, 32 */
		/* 821E3210h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R8,0x20);
		/* 821E3210h case    0:*/		return 0x821E3214;
		  /* 821E3214h */ case    1:  		/* cmplw CR6, R10, R7 */
		/* 821E3214h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821E3214h case    1:*/		return 0x821E3218;
		  /* 821E3218h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821E3218h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E3258;  }
		/* 821E3218h case    2:*/		return 0x821E321C;
		  /* 821E321Ch */ case    3:  		/* addi R9, R8, 24 */
		/* 821E321Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x18);
		/* 821E321Ch case    3:*/		return 0x821E3220;
		  /* 821E3220h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 821E3220h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821E3220h case    4:*/		return 0x821E3224;
		  /* 821E3224h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821E3224h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E3240;  }
		/* 821E3224h case    5:*/		return 0x821E3228;
		  /* 821E3228h */ case    6:  		/* lwz R11, <#[R8 + 28]> */
		/* 821E3228h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821E3228h case    6:*/		return 0x821E322C;
		  /* 821E322Ch */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E322Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E322Ch case    7:*/		return 0x821E3230;
		  /* 821E3230h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821E3230h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E3240;  }
		/* 821E3230h case    8:*/		return 0x821E3234;
		  /* 821E3234h */ case    9:  		/* lwz R11, <#[R9 + 4]> */
		/* 821E3234h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821E3234h case    9:*/		return 0x821E3238;
		  /* 821E3238h */ case   10:  		/* mr R10, R9 */
		/* 821E3238h case   10:*/		regs.R10 = regs.R9;
		/* 821E3238h case   10:*/		return 0x821E323C;
		  /* 821E323Ch */ case   11:  		/* b 12 */
		/* 821E323Ch case   11:*/		return 0x821E3248;
		/* 821E323Ch case   11:*/		return 0x821E3240;
	}
	return 0x821E3240;
} // Block from 821E3210h-821E3240h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E3240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3240);
		  /* 821E3240h */ case    0:  		/* lwz R11, <#[R7 + 4]> */
		/* 821E3240h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 821E3240h case    0:*/		return 0x821E3244;
		  /* 821E3244h */ case    1:  		/* mr R10, R7 */
		/* 821E3244h case    1:*/		regs.R10 = regs.R7;
		/* 821E3244h case    1:*/		return 0x821E3248;
	}
	return 0x821E3248;
} // Block from 821E3240h-821E3248h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E3248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3248);
		  /* 821E3248h */ case    0:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821E3248h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E3248h case    0:*/		return 0x821E324C;
		  /* 821E324Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821E324Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E3258;  }
		/* 821E324Ch case    1:*/		return 0x821E3250;
	}
	return 0x821E3250;
} // Block from 821E3248h-821E3250h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E3250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3250);
		  /* 821E3250h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E3250h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3250h case    0:*/		return 0x821E3254;
		  /* 821E3254h */ case    1:  		/* bc 4, CR6_EQ, -104 */
		/* 821E3254h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E31EC;  }
		/* 821E3254h case    1:*/		return 0x821E3258;
	}
	return 0x821E3258;
} // Block from 821E3250h-821E3258h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E3258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3258);
		  /* 821E3258h */ case    0:  		/* rlwinm R11, R8, 0, 0, 30 */
		/* 821E3258h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R8);
		/* 821E3258h case    0:*/		return 0x821E325C;
		  /* 821E325Ch */ case    1:  		/* lwz R8, <#[R11 + 4]> */
		/* 821E325Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821E325Ch case    1:*/		return 0x821E3260;
		  /* 821E3260h */ case    2:  		/* rlwinm. R11, R8, 0, 31, 31 */
		/* 821E3260h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R8);
		/* 821E3260h case    2:*/		return 0x821E3264;
		  /* 821E3264h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E3264h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E3270;  }
		/* 821E3264h case    3:*/		return 0x821E3268;
		  /* 821E3268h */ case    4:  		/* cmplwi CR6, R8, 0 */
		/* 821E3268h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821E3268h case    4:*/		return 0x821E326C;
		  /* 821E326Ch */ case    5:  		/* bc 4, CR6_EQ, -204 */
		/* 821E326Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E31A0;  }
		/* 821E326Ch case    5:*/		return 0x821E3270;
	}
	return 0x821E3270;
} // Block from 821E3258h-821E3270h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E3270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3270);
		  /* 821E3270h */ case    0:  		/* lbz R11, <#[R1 + 129]> */
		/* 821E3270h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000081) );
		/* 821E3270h case    0:*/		return 0x821E3274;
		  /* 821E3274h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821E3274h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E3274h case    1:*/		return 0x821E3278;
		  /* 821E3278h */ case    2:  		/* bc 12, CR0_EQ, 80 */
		/* 821E3278h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E32C8;  }
		/* 821E3278h case    2:*/		return 0x821E327C;
		  /* 821E327Ch */ case    3:  		/* lwz R11, <#[R20 + 44]> */
		/* 821E327Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821E327Ch case    3:*/		return 0x821E3280;
		  /* 821E3280h */ case    4:  		/* mr R3, R20 */
		/* 821E3280h case    4:*/		regs.R3 = regs.R20;
		/* 821E3280h case    4:*/		return 0x821E3284;
		  /* 821E3284h */ case    5:  		/* oris R11, R11, 4096 */
		/* 821E3284h case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 821E3284h case    5:*/		return 0x821E3288;
		  /* 821E3288h */ case    6:  		/* stw R11, <#[R20 + 44]> */
		/* 821E3288h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821E3288h case    6:*/		return 0x821E328C;
		  /* 821E328Ch */ case    7:  		/* bl -102740 */
		/* 821E328Ch case    7:*/		regs.LR = 0x821E3290; return 0x821CA138;
		/* 821E328Ch case    7:*/		return 0x821E3290;
		  /* 821E3290h */ case    8:  		/* mr R31, R3 */
		/* 821E3290h case    8:*/		regs.R31 = regs.R3;
		/* 821E3290h case    8:*/		return 0x821E3294;
		  /* 821E3294h */ case    9:  		/* li R4, 1 */
		/* 821E3294h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E3294h case    9:*/		return 0x821E3298;
		  /* 821E3298h */ case   10:  		/* mr R3, R20 */
		/* 821E3298h case   10:*/		regs.R3 = regs.R20;
		/* 821E3298h case   10:*/		return 0x821E329C;
		  /* 821E329Ch */ case   11:  		/* bl -39460 */
		/* 821E329Ch case   11:*/		regs.LR = 0x821E32A0; return 0x821D9878;
		/* 821E329Ch case   11:*/		return 0x821E32A0;
		  /* 821E32A0h */ case   12:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821E32A0h case   12:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E32A0h case   12:*/		return 0x821E32A4;
		  /* 821E32A4h */ case   13:  		/* rlwinm R10, R31, 0, 24, 31 */
		/* 821E32A4h case   13:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R31);
		/* 821E32A4h case   13:*/		return 0x821E32A8;
		  /* 821E32A8h */ case   14:  		/* stb R16, <#[R1 + 128]> */
		/* 821E32A8h case   14:*/		cpu::mem::store8( regs, regs.R16, (uint32)(regs.R1 + 0x00000080) );
		/* 821E32A8h case   14:*/		return 0x821E32AC;
		  /* 821E32ACh */ case   15:  		/* mr R3, R20 */
		/* 821E32ACh case   15:*/		regs.R3 = regs.R20;
		/* 821E32ACh case   15:*/		return 0x821E32B0;
		  /* 821E32B0h */ case   16:  		/* or R31, R11, R10 */
		/* 821E32B0h case   16:*/		cpu::op::or<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 821E32B0h case   16:*/		return 0x821E32B4;
		  /* 821E32B4h */ case   17:  		/* bl -29820 */
		/* 821E32B4h case   17:*/		regs.LR = 0x821E32B8; return 0x821DBE38;
		/* 821E32B4h case   17:*/		return 0x821E32B8;
		  /* 821E32B8h */ case   18:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821E32B8h case   18:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E32B8h case   18:*/		return 0x821E32BC;
		  /* 821E32BCh */ case   19:  		/* rlwinm R10, R31, 0, 24, 31 */
		/* 821E32BCh case   19:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R31);
		/* 821E32BCh case   19:*/		return 0x821E32C0;
		  /* 821E32C0h */ case   20:  		/* or. R11, R11, R10 */
		/* 821E32C0h case   20:*/		cpu::op::or<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E32C0h case   20:*/		return 0x821E32C4;
		  /* 821E32C4h */ case   21:  		/* bc 4, CR0_EQ, 2504 */
		/* 821E32C4h case   21:*/		if ( !regs.CR[0].eq ) { return 0x821E3C8C;  }
		/* 821E32C4h case   21:*/		return 0x821E32C8;
	}
	return 0x821E32C8;
} // Block from 821E3270h-821E32C8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821E32C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E32C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E32C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E32C8);
		  /* 821E32C8h */ case    0:  		/* lwz R11, <#[R20 + 620]> */
		/* 821E32C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E32C8h case    0:*/		return 0x821E32CC;
		  /* 821E32CCh */ case    1:  		/* li R22, 1 */
		/* 821E32CCh case    1:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821E32CCh case    1:*/		return 0x821E32D0;
		  /* 821E32D0h */ case    2:  		/* lwz R31, <#[R20 + 616]> */
		/* 821E32D0h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R20 + 0x00000268) );
		/* 821E32D0h case    2:*/		return 0x821E32D4;
		  /* 821E32D4h */ case    3:  		/* mulli R11, R11, 68 */
		/* 821E32D4h case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x44);
		/* 821E32D4h case    3:*/		return 0x821E32D8;
		  /* 821E32D8h */ case    4:  		/* add R10, R11, R31 */
		/* 821E32D8h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R31);
		/* 821E32D8h case    4:*/		return 0x821E32DC;
		  /* 821E32DCh */ case    5:  		/* mr R26, R31 */
		/* 821E32DCh case    5:*/		regs.R26 = regs.R31;
		/* 821E32DCh case    5:*/		return 0x821E32E0;
		  /* 821E32E0h */ case    6:  		/* cmplw CR6, R31, R10 */
		/* 821E32E0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821E32E0h case    6:*/		return 0x821E32E4;
		  /* 821E32E4h */ case    7:  		/* bc 4, CR6_LT, 2264 */
		/* 821E32E4h case    7:*/		if ( !regs.CR[6].lt ) { return 0x821E3BBC;  }
		/* 821E32E4h case    7:*/		return 0x821E32E8;
		  /* 821E32E8h */ case    8:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E32E8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E32E8h case    8:*/		return 0x821E32EC;
		  /* 821E32ECh */ case    9:  		/* lwz R10, <#[R26 + 36]> */
		/* 821E32ECh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000024) );
		/* 821E32ECh case    9:*/		return 0x821E32F0;
		  /* 821E32F0h */ case   10:  		/* lwz R9, <#[R26 + 56]> */
		/* 821E32F0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000038) );
		/* 821E32F0h case   10:*/		return 0x821E32F4;
		  /* 821E32F4h */ case   11:  		/* subf R11, R11, R26 */
		/* 821E32F4h case   11:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821E32F4h case   11:*/		return 0x821E32F8;
		  /* 821E32F8h */ case   12:  		/* rlwinm R23, R10, 31, 24, 31 */
		/* 821E32F8h case   12:*/		cpu::op::rlwinm<0,31,24,31>(regs,&regs.R23,regs.R10);
		/* 821E32F8h case   12:*/		return 0x821E32FC;
		  /* 821E32FCh */ case   13:  		/* divw R24, R11, R21 */
		/* 821E32FCh case   13:*/		cpu::op::divw<0>(regs,&regs.R24,regs.R11,regs.R21);
		/* 821E32FCh case   13:*/		return 0x821E3300;
		  /* 821E3300h */ case   14:  		/* cmplwi CR6, R9, 0 */
		/* 821E3300h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E3300h case   14:*/		return 0x821E3304;
		  /* 821E3304h */ case   15:  		/* bc 12, CR6_EQ, 28 */
		/* 821E3304h case   15:*/		if ( regs.CR[6].eq ) { return 0x821E3320;  }
		/* 821E3304h case   15:*/		return 0x821E3308;
		  /* 821E3308h */ case   16:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 821E3308h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 821E3308h case   16:*/		return 0x821E330C;
		  /* 821E330Ch */ case   17:  		/* lwz R11, <#[R11 + 48]> */
		/* 821E330Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821E330Ch case   17:*/		return 0x821E3310;
		  /* 821E3310h */ case   18:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E3310h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E3310h case   18:*/		return 0x821E3314;
		  /* 821E3314h */ case   19:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E3314h case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E3314h case   19:*/		return 0x821E3318;
		  /* 821E3318h */ case   20:  		/* cmplwi CR6, R11, 14720 */
		/* 821E3318h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821E3318h case   20:*/		return 0x821E331C;
		  /* 821E331Ch */ case   21:  		/* bc 12, CR6_EQ, 2416 */
		/* 821E331Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x821E3C8C;  }
		/* 821E331Ch case   21:*/		return 0x821E3320;
	}
	return 0x821E3320;
} // Block from 821E32C8h-821E3320h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821E3320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3320);
		  /* 821E3320h */ case    0:  		/* mr R9, R16 */
		/* 821E3320h case    0:*/		regs.R9 = regs.R16;
		/* 821E3320h case    0:*/		return 0x821E3324;
		  /* 821E3324h */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 821E3324h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821E3324h case    1:*/		return 0x821E3328;
		  /* 821E3328h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 821E3328h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E3370;  }
		/* 821E3328h case    2:*/		return 0x821E332C;
		  /* 821E332Ch */ case    3:  		/* lwz R8, <#[R26 + 44]> */
		/* 821E332Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + 0x0000002C) );
		/* 821E332Ch case    3:*/		return 0x821E3330;
		  /* 821E3330h */ case    4:  		/* mr R11, R16 */
		/* 821E3330h case    4:*/		regs.R11 = regs.R16;
		/* 821E3330h case    4:*/		return 0x821E3334;
		  /* 821E3334h */ case    5:  		/* add R10, R8, R11 */
		/* 821E3334h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R11);
		/* 821E3334h case    5:*/		return 0x821E3338;
		  /* 821E3338h */ case    6:  		/* lwz R10, <#[R10 + 60]> */
		/* 821E3338h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 821E3338h case    6:*/		return 0x821E333C;
		  /* 821E333Ch */ case    7:  		/* b 28 */
		/* 821E333Ch case    7:*/		return 0x821E3358;
		/* 821E333Ch case    7:*/		return 0x821E3340;
		  /* 821E3340h */ case    8:  		/* lwz R7, <#[R10 + 8]> */
		/* 821E3340h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 821E3340h case    8:*/		return 0x821E3344;
		  /* 821E3344h */ case    9:  		/* lwz R7, <#[R7 + 8]> */
		/* 821E3344h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 821E3344h case    9:*/		return 0x821E3348;
		  /* 821E3348h */ case   10:  		/* rlwinm R7, R7, 0, 18, 24 */
		/* 821E3348h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R7,regs.R7);
		/* 821E3348h case   10:*/		return 0x821E334C;
		  /* 821E334Ch */ case   11:  		/* cmplwi CR6, R7, 14720 */
		/* 821E334Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00003980);
		/* 821E334Ch case   11:*/		return 0x821E3350;
		  /* 821E3350h */ case   12:  		/* bc 12, CR6_EQ, 2364 */
		/* 821E3350h case   12:*/		if ( regs.CR[6].eq ) { return 0x821E3C8C;  }
		/* 821E3350h case   12:*/		return 0x821E3354;
		  /* 821E3354h */ case   13:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E3354h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E3354h case   13:*/		return 0x821E3358;
	}
	return 0x821E3358;
} // Block from 821E3320h-821E3358h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E3358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3358);
		  /* 821E3358h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821E3358h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E3358h case    0:*/		return 0x821E335C;
		  /* 821E335Ch */ case    1:  		/* bc 4, CR6_EQ, -28 */
		/* 821E335Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E3340;  }
		/* 821E335Ch case    1:*/		return 0x821E3360;
		  /* 821E3360h */ case    2:  		/* addi R9, R9, 1 */
		/* 821E3360h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821E3360h case    2:*/		return 0x821E3364;
		  /* 821E3364h */ case    3:  		/* addi R11, R11, 88 */
		/* 821E3364h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x58);
		/* 821E3364h case    3:*/		return 0x821E3368;
		  /* 821E3368h */ case    4:  		/* cmplw CR6, R9, R23 */
		/* 821E3368h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R23);
		/* 821E3368h case    4:*/		return 0x821E336C;
		  /* 821E336Ch */ case    5:  		/* bc 12, CR6_LT, -56 */
		/* 821E336Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x821E3334;  }
		/* 821E336Ch case    5:*/		return 0x821E3370;
	}
	return 0x821E3370;
} // Block from 821E3358h-821E3370h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E3370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3370);
		  /* 821E3370h */ case    0:  		/* mr R25, R16 */
		/* 821E3370h case    0:*/		regs.R25 = regs.R16;
		/* 821E3370h case    0:*/		return 0x821E3374;
		  /* 821E3374h */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 821E3374h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821E3374h case    1:*/		return 0x821E3378;
		  /* 821E3378h */ case    2:  		/* bc 12, CR6_EQ, 2088 */
		/* 821E3378h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E3BA0;  }
		/* 821E3378h case    2:*/		return 0x821E337C;
		  /* 821E337Ch */ case    3:  		/* lwz R11, <#[R26 + 44]> */
		/* 821E337Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000002C) );
		/* 821E337Ch case    3:*/		return 0x821E3380;
		  /* 821E3380h */ case    4:  		/* mulli R10, R25, 88 */
		/* 821E3380h case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R25,0x58);
		/* 821E3380h case    4:*/		return 0x821E3384;
		  /* 821E3384h */ case    5:  		/* add R27, R10, R11 */
		/* 821E3384h case    5:*/		cpu::op::add<0>(regs,&regs.R27,regs.R10,regs.R11);
		/* 821E3384h case    5:*/		return 0x821E3388;
		  /* 821E3388h */ case    6:  		/* lwz R30, <#[R27 + 48]> */
		/* 821E3388h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000030) );
		/* 821E3388h case    6:*/		return 0x821E338C;
		  /* 821E338Ch */ case    7:  		/* lwz R11, <#[R30 + 8]> */
		/* 821E338Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E338Ch case    7:*/		return 0x821E3390;
		  /* 821E3390h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E3390h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E3390h case    8:*/		return 0x821E3394;
		  /* 821E3394h */ case    9:  		/* cmplwi CR6, R11, 14720 */
		/* 821E3394h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821E3394h case    9:*/		return 0x821E3398;
		  /* 821E3398h */ case   10:  		/* bc 12, CR6_EQ, 2044 */
		/* 821E3398h case   10:*/		if ( regs.CR[6].eq ) { return 0x821E3B94;  }
		/* 821E3398h case   10:*/		return 0x821E339C;
		  /* 821E339Ch */ case   11:  		/* lwz R11, <#[R20 + 112]> */
		/* 821E339Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000070) );
		/* 821E339Ch case   11:*/		return 0x821E33A0;
		  /* 821E33A0h */ case   12:  		/* addi R28, R11, 1 */
		/* 821E33A0h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x1);
		/* 821E33A0h case   12:*/		return 0x821E33A4;
		  /* 821E33A4h */ case   13:  		/* stw R28, <#[R20 + 112]> */
		/* 821E33A4h case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R20 + 0x00000070) );
		/* 821E33A4h case   13:*/		return 0x821E33A8;
		  /* 821E33A8h */ case   14:  		/* stw R28, <#[R30 - 4]> */
		/* 821E33A8h case   14:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 821E33A8h case   14:*/		return 0x821E33AC;
		  /* 821E33ACh */ case   15:  		/* lwz R29, <#[R30 + 4]> */
		/* 821E33ACh case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000004) );
		/* 821E33ACh case   15:*/		return 0x821E33B0;
		  /* 821E33B0h */ case   16:  		/* cmplwi CR6, R29, 0 */
		/* 821E33B0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E33B0h case   16:*/		return 0x821E33B4;
		  /* 821E33B4h */ case   17:  		/* bc 12, CR6_EQ, 412 */
		/* 821E33B4h case   17:*/		if ( regs.CR[6].eq ) { return 0x821E3550;  }
		/* 821E33B4h case   17:*/		return 0x821E33B8;
		  /* 821E33B8h */ case   18:  		/* lwz R11, <#[R29 + 16]> */
		/* 821E33B8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821E33B8h case   18:*/		return 0x821E33BC;
		  /* 821E33BCh */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821E33BCh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E33BCh case   19:*/		return 0x821E33C0;
		  /* 821E33C0h */ case   20:  		/* bc 12, CR6_EQ, 392 */
		/* 821E33C0h case   20:*/		if ( regs.CR[6].eq ) { return 0x821E3548;  }
		/* 821E33C0h case   20:*/		return 0x821E33C4;
		  /* 821E33C4h */ case   21:  		/* rlwinm R31, R11, 0, 0, 31 */
		/* 821E33C4h case   21:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R31,regs.R11);
		/* 821E33C4h case   21:*/		return 0x821E33C8;
		  /* 821E33C8h */ case   22:  		/* rlwinm R11, R24, 27, 5, 31 */
		/* 821E33C8h case   22:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R24);
		/* 821E33C8h case   22:*/		return 0x821E33CC;
		  /* 821E33CCh */ case   23:  		/* rlwinm R10, R24, 0, 27, 31 */
		/* 821E33CCh case   23:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R24);
		/* 821E33CCh case   23:*/		return 0x821E33D0;
		  /* 821E33D0h */ case   24:  		/* addi R11, R11, 21 */
		/* 821E33D0h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E33D0h case   24:*/		return 0x821E33D4;
		  /* 821E33D4h */ case   25:  		/* lwz R9, <#[R31 + 28]> */
		/* 821E33D4h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 821E33D4h case   25:*/		return 0x821E33D8;
		  /* 821E33D8h */ case   26:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E33D8h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E33D8h case   26:*/		return 0x821E33DC;
		  /* 821E33DCh */ case   27:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821E33DCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821E33DCh case   27:*/		return 0x821E33E0;
		  /* 821E33E0h */ case   28:  		/* srw R11, R11, R10 */
		/* 821E33E0h case   28:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E33E0h case   28:*/		return 0x821E33E4;
		  /* 821E33E4h */ case   29:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E33E4h case   29:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E33E4h case   29:*/		return 0x821E33E8;
		  /* 821E33E8h */ case   30:  		/* bc 4, CR0_EQ, 20 */
		/* 821E33E8h case   30:*/		if ( !regs.CR[0].eq ) { return 0x821E33FC;  }
		/* 821E33E8h case   30:*/		return 0x821E33EC;
		  /* 821E33ECh */ case   31:  		/* lwz R11, <#[R27 + 68]> */
		/* 821E33ECh case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000044) );
		/* 821E33ECh case   31:*/		return 0x821E33F0;
		  /* 821E33F0h */ case   32:  		/* addi R11, R11, 1 */
		/* 821E33F0h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E33F0h case   32:*/		return 0x821E33F4;
		  /* 821E33F4h */ case   33:  		/* stw R11, <#[R27 + 68]> */
		/* 821E33F4h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000044) );
		/* 821E33F4h case   33:*/		return 0x821E33F8;
		  /* 821E33F8h */ case   34:  		/* b 336 */
		/* 821E33F8h case   34:*/		return 0x821E3548;
		/* 821E33F8h case   34:*/		return 0x821E33FC;
	}
	return 0x821E33FC;
} // Block from 821E3370h-821E33FCh (35 instructions)

//////////////////////////////////////////////////////
// Block at 821E33FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E33FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E33FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E33FC);
		  /* 821E33FCh */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E33FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E33FCh case    0:*/		return 0x821E3400;
		  /* 821E3400h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E3400h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E3400h case    1:*/		return 0x821E3404;
		  /* 821E3404h */ case    2:  		/* cmplwi CR6, R11, 14336 */
		/* 821E3404h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E3404h case    2:*/		return 0x821E3408;
		  /* 821E3408h */ case    3:  		/* bc 4, CR6_EQ, 108 */
		/* 821E3408h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821E3474;  }
		/* 821E3408h case    3:*/		return 0x821E340C;
		  /* 821E340Ch */ case    4:  		/* lwz R11, <#[R31 - 4]> */
		/* 821E340Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 821E340Ch case    4:*/		return 0x821E3410;
		  /* 821E3410h */ case    5:  		/* cmplw CR6, R11, R28 */
		/* 821E3410h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821E3410h case    5:*/		return 0x821E3414;
		  /* 821E3414h */ case    6:  		/* bc 12, CR6_EQ, 308 */
		/* 821E3414h case    6:*/		if ( regs.CR[6].eq ) { return 0x821E3548;  }
		/* 821E3414h case    6:*/		return 0x821E3418;
		  /* 821E3418h */ case    7:  		/* stw R28, <#[R31 - 4]> */
		/* 821E3418h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 821E3418h case    7:*/		return 0x821E341C;
		  /* 821E341Ch */ case    8:  		/* lwz R11, <#[R14]> */
		/* 821E341Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821E341Ch case    8:*/		return 0x821E3420;
		  /* 821E3420h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E3420h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E3420h case    9:*/		return 0x821E3424;
		  /* 821E3424h */ case   10:  		/* bc 4, CR0_EQ, 40 */
		/* 821E3424h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821E344C;  }
		/* 821E3424h case   10:*/		return 0x821E3428;
		  /* 821E3428h */ case   11:  		/* lwz R11, <#[R15]> */
		/* 821E3428h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821E3428h case   11:*/		return 0x821E342C;
		  /* 821E342Ch */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E342Ch case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E342Ch case   12:*/		return 0x821E3430;
		  /* 821E3430h */ case   13:  		/* addic. R3, R11, -4 */
		/* 821E3430h case   13:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821E3430h case   13:*/		return 0x821E3434;
		  /* 821E3434h */ case   14:  		/* bc 12, CR0_EQ, 24 */
		/* 821E3434h case   14:*/		if ( regs.CR[0].eq ) { return 0x821E344C;  }
		/* 821E3434h case   14:*/		return 0x821E3438;
		  /* 821E3438h */ case   15:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E3438h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E3438h case   15:*/		return 0x821E343C;
		  /* 821E343Ch */ case   16:  		/* lwz R10, <#[R3 + 12]> */
		/* 821E343Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E343Ch case   16:*/		return 0x821E3440;
		  /* 821E3440h */ case   17:  		/* addi R11, R11, 1 */
		/* 821E3440h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E3440h case   17:*/		return 0x821E3444;
		  /* 821E3444h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 821E3444h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E3444h case   18:*/		return 0x821E3448;
		  /* 821E3448h */ case   19:  		/* bc 4, CR6_GT, 16 */
		/* 821E3448h case   19:*/		if ( !regs.CR[6].gt ) { return 0x821E3458;  }
		/* 821E3448h case   19:*/		return 0x821E344C;
	}
	return 0x821E344C;
} // Block from 821E33FCh-821E344Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821E344Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E344C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E344C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E344C);
		  /* 821E344Ch */ case    0:  		/* li R4, 1 */
		/* 821E344Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E344Ch case    0:*/		return 0x821E3450;
		  /* 821E3450h */ case    1:  		/* mr R3, R15 */
		/* 821E3450h case    1:*/		regs.R3 = regs.R15;
		/* 821E3450h case    1:*/		return 0x821E3454;
		  /* 821E3454h */ case    2:  		/* bl -353164 */
		/* 821E3454h case    2:*/		regs.LR = 0x821E3458; return 0x8218D0C8;
		/* 821E3454h case    2:*/		return 0x821E3458;
	}
	return 0x821E3458;
} // Block from 821E344Ch-821E3458h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E3458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3458);
		  /* 821E3458h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E3458h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E3458h case    0:*/		return 0x821E345C;
		  /* 821E345Ch */ case    1:  		/* addi R10, R11, 4 */
		/* 821E345Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E345Ch case    1:*/		return 0x821E3460;
		  /* 821E3460h */ case    2:  		/* addi R9, R11, 1 */
		/* 821E3460h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821E3460h case    2:*/		return 0x821E3464;
		  /* 821E3464h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821E3464h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821E3464h case    3:*/		return 0x821E3468;
		  /* 821E3468h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821E3468h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821E3468h case    4:*/		return 0x821E346C;
		  /* 821E346Ch */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821E346Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821E346Ch case    5:*/		return 0x821E3470;
		  /* 821E3470h */ case    6:  		/* b 216 */
		/* 821E3470h case    6:*/		return 0x821E3548;
		/* 821E3470h case    6:*/		return 0x821E3474;
	}
	return 0x821E3474;
} // Block from 821E3458h-821E3474h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E3474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3474);
		  /* 821E3474h */ case    0:  		/* lwz R11, <#[R27 + 68]> */
		/* 821E3474h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000044) );
		/* 821E3474h case    0:*/		return 0x821E3478;
		  /* 821E3478h */ case    1:  		/* addi R11, R11, 1 */
		/* 821E3478h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E3478h case    1:*/		return 0x821E347C;
		  /* 821E347Ch */ case    2:  		/* stw R11, <#[R27 + 68]> */
		/* 821E347Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000044) );
		/* 821E347Ch case    2:*/		return 0x821E3480;
		  /* 821E3480h */ case    3:  		/* lwz R11, <#[R27]> */
		/* 821E3480h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821E3480h case    3:*/		return 0x821E3484;
		  /* 821E3484h */ case    4:  		/* rlwinm. R11, R11, 0, 4, 4 */
		/* 821E3484h case    4:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R11);
		/* 821E3484h case    4:*/		return 0x821E3488;
		  /* 821E3488h */ case    5:  		/* bc 12, CR0_EQ, 192 */
		/* 821E3488h case    5:*/		if ( regs.CR[0].eq ) { return 0x821E3548;  }
		/* 821E3488h case    5:*/		return 0x821E348C;
		  /* 821E348Ch */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E348Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E348Ch case    6:*/		return 0x821E3490;
		  /* 821E3490h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E3490h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E3490h case    7:*/		return 0x821E3494;
		  /* 821E3494h */ case    8:  		/* cmplwi CR6, R11, 128 */
		/* 821E3494h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821E3494h case    8:*/		return 0x821E3498;
		  /* 821E3498h */ case    9:  		/* bc 4, CR6_EQ, 76 */
		/* 821E3498h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821E34E4;  }
		/* 821E3498h case    9:*/		return 0x821E349C;
		  /* 821E349Ch */ case   10:  		/* lwz R11, <#[R31 + 44]> */
		/* 821E349Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E349Ch case   10:*/		return 0x821E34A0;
		  /* 821E34A0h */ case   11:  		/* lwz R11, <#[R11 + 12]> */
		/* 821E34A0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E34A0h case   11:*/		return 0x821E34A4;
		  /* 821E34A4h */ case   12:  		/* cmplw CR6, R11, R30 */
		/* 821E34A4h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821E34A4h case   12:*/		return 0x821E34A8;
		  /* 821E34A8h */ case   13:  		/* bc 4, CR6_EQ, 60 */
		/* 821E34A8h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821E34E4;  }
		/* 821E34A8h case   13:*/		return 0x821E34AC;
		  /* 821E34ACh */ case   14:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E34ACh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E34ACh case   14:*/		return 0x821E34B0;
		  /* 821E34B0h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821E34B0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E34B0h case   15:*/		return 0x821E34B4;
		  /* 821E34B4h */ case   16:  		/* bc 12, CR6_EQ, 48 */
		/* 821E34B4h case   16:*/		if ( regs.CR[6].eq ) { return 0x821E34E4;  }
		/* 821E34B4h case   16:*/		return 0x821E34B8;
		  /* 821E34B8h */ case   17:  		/* lwz R10, <#[R11 + 16]> */
		/* 821E34B8h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821E34B8h case   17:*/		return 0x821E34BC;
		  /* 821E34BCh */ case   18:  		/* cmplwi CR6, R10, 0 */
		/* 821E34BCh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E34BCh case   18:*/		return 0x821E34C0;
		  /* 821E34C0h */ case   19:  		/* bc 12, CR6_EQ, 28 */
		/* 821E34C0h case   19:*/		if ( regs.CR[6].eq ) { return 0x821E34DC;  }
		/* 821E34C0h case   19:*/		return 0x821E34C4;
		  /* 821E34C4h */ case   20:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821E34C4h case   20:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821E34C4h case   20:*/		return 0x821E34C8;
		  /* 821E34C8h */ case   21:  		/* lwz R9, <#[R10 + 8]> */
		/* 821E34C8h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821E34C8h case   21:*/		return 0x821E34CC;
		  /* 821E34CCh */ case   22:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821E34CCh case   22:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821E34CCh case   22:*/		return 0x821E34D0;
		  /* 821E34D0h */ case   23:  		/* cmplwi CR6, R9, 1664 */
		/* 821E34D0h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000680);
		/* 821E34D0h case   23:*/		return 0x821E34D4;
		  /* 821E34D4h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 821E34D4h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821E34DC;  }
		/* 821E34D4h case   24:*/		return 0x821E34D8;
		  /* 821E34D8h */ case   25:  		/* mr R31, R10 */
		/* 821E34D8h case   25:*/		regs.R31 = regs.R10;
		/* 821E34D8h case   25:*/		return 0x821E34DC;
	}
	return 0x821E34DC;
} // Block from 821E3474h-821E34DCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 821E34DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E34DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E34DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E34DC);
		  /* 821E34DCh */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E34DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E34DCh case    0:*/		return 0x821E34E0;
		  /* 821E34E0h */ case    1:  		/* b -48 */
		/* 821E34E0h case    1:*/		return 0x821E34B0;
		/* 821E34E0h case    1:*/		return 0x821E34E4;
	}
	return 0x821E34E4;
} // Block from 821E34DCh-821E34E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E34E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E34E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E34E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E34E4);
		  /* 821E34E4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E34E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E34E4h case    0:*/		return 0x821E34E8;
		  /* 821E34E8h */ case    1:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821E34E8h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821E34E8h case    1:*/		return 0x821E34EC;
		  /* 821E34ECh */ case    2:  		/* cmplwi CR6, R10, 1664 */
		/* 821E34ECh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000680);
		/* 821E34ECh case    2:*/		return 0x821E34F0;
		  /* 821E34F0h */ case    3:  		/* bc 4, CR6_EQ, 88 */
		/* 821E34F0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821E3548;  }
		/* 821E34F0h case    3:*/		return 0x821E34F4;
		  /* 821E34F4h */ case    4:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 821E34F4h case    4:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 821E34F4h case    4:*/		return 0x821E34F8;
		  /* 821E34F8h */ case    5:  		/* bc 4, CR0_EQ, 80 */
		/* 821E34F8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821E3548;  }
		/* 821E34F8h case    5:*/		return 0x821E34FC;
		  /* 821E34FCh */ case    6:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 821E34FCh case    6:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821E34FCh case    6:*/		return 0x821E3500;
		  /* 821E3500h */ case    7:  		/* cmplwi CR6, R11, 16384 */
		/* 821E3500h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00004000);
		/* 821E3500h case    7:*/		return 0x821E3504;
		  /* 821E3504h */ case    8:  		/* bc 4, CR6_EQ, 68 */
		/* 821E3504h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E3548;  }
		/* 821E3504h case    8:*/		return 0x821E3508;
		  /* 821E3508h */ case    9:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E3508h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E3508h case    9:*/		return 0x821E350C;
		  /* 821E350Ch */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821E350Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E350Ch case   10:*/		return 0x821E3510;
		  /* 821E3510h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 821E3510h case   11:*/		if ( regs.CR[6].eq ) { return 0x821E3528;  }
		/* 821E3510h case   11:*/		return 0x821E3514;
		  /* 821E3514h */ case   12:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E3514h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E3514h case   12:*/		return 0x821E3518;
		  /* 821E3518h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E3518h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E3518h case   13:*/		return 0x821E351C;
		  /* 821E351Ch */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821E351Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E351Ch case   14:*/		return 0x821E3520;
		  /* 821E3520h */ case   15:  		/* mr R11, R22 */
		/* 821E3520h case   15:*/		regs.R11 = regs.R22;
		/* 821E3520h case   15:*/		return 0x821E3524;
		  /* 821E3524h */ case   16:  		/* bc 4, CR6_EQ, 8 */
		/* 821E3524h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821E352C;  }
		/* 821E3524h case   16:*/		return 0x821E3528;
	}
	return 0x821E3528;
} // Block from 821E34E4h-821E3528h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E3528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3528);
		  /* 821E3528h */ case    0:  		/* mr R11, R16 */
		/* 821E3528h case    0:*/		regs.R11 = regs.R16;
		/* 821E3528h case    0:*/		return 0x821E352C;
	}
	return 0x821E352C;
} // Block from 821E3528h-821E352Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E352Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E352C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E352C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E352C);
		  /* 821E352Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E352Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E352Ch case    0:*/		return 0x821E3530;
		  /* 821E3530h */ case    1:  		/* bc 4, CR0_EQ, 24 */
		/* 821E3530h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E3548;  }
		/* 821E3530h case    1:*/		return 0x821E3534;
		  /* 821E3534h */ case    2:  		/* mr R6, R27 */
		/* 821E3534h case    2:*/		regs.R6 = regs.R27;
		/* 821E3534h case    2:*/		return 0x821E3538;
		  /* 821E3538h */ case    3:  		/* mr R5, R30 */
		/* 821E3538h case    3:*/		regs.R5 = regs.R30;
		/* 821E3538h case    3:*/		return 0x821E353C;
		  /* 821E353Ch */ case    4:  		/* mr R4, R31 */
		/* 821E353Ch case    4:*/		regs.R4 = regs.R31;
		/* 821E353Ch case    4:*/		return 0x821E3540;
		  /* 821E3540h */ case    5:  		/* mr R3, R20 */
		/* 821E3540h case    5:*/		regs.R3 = regs.R20;
		/* 821E3540h case    5:*/		return 0x821E3544;
		  /* 821E3544h */ case    6:  		/* bl -142972 */
		/* 821E3544h case    6:*/		regs.LR = 0x821E3548; return 0x821C06C8;
		/* 821E3544h case    6:*/		return 0x821E3548;
	}
	return 0x821E3548;
} // Block from 821E352Ch-821E3548h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E3548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3548);
		  /* 821E3548h */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 821E3548h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 821E3548h case    0:*/		return 0x821E354C;
		  /* 821E354Ch */ case    1:  		/* b -412 */
		/* 821E354Ch case    1:*/		return 0x821E33B0;
		/* 821E354Ch case    1:*/		return 0x821E3550;
	}
	return 0x821E3550;
} // Block from 821E3548h-821E3550h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E3550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3550);
		  /* 821E3550h */ case    0:  		/* lwz R11, <#[R14]> */
		/* 821E3550h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821E3550h case    0:*/		return 0x821E3554;
		  /* 821E3554h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E3554h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E3554h case    1:*/		return 0x821E3558;
		  /* 821E3558h */ case    2:  		/* bc 4, CR0_EQ, 116 */
		/* 821E3558h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E35CC;  }
		/* 821E3558h case    2:*/		return 0x821E355C;
		  /* 821E355Ch */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821E355Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E355Ch case    3:*/		return 0x821E3560;
		  /* 821E3560h */ case    4:  		/* bc 12, CR0_EQ, 108 */
		/* 821E3560h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E35CC;  }
		/* 821E3560h case    4:*/		return 0x821E3564;
		  /* 821E3564h */ case    5:  		/* lwz R11, <#[R15]> */
		/* 821E3564h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821E3564h case    5:*/		return 0x821E3568;
		  /* 821E3568h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E3568h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E3568h case    6:*/		return 0x821E356C;
		  /* 821E356Ch */ case    7:  		/* addi R4, R11, -4 */
		/* 821E356Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821E356Ch case    7:*/		return 0x821E3570;
		  /* 821E3570h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E3570h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E3570h case    8:*/		return 0x821E3574;
		  /* 821E3574h */ case    9:  		/* addi R10, R11, 3 */
		/* 821E3574h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821E3574h case    9:*/		return 0x821E3578;
		  /* 821E3578h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821E3578h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E3578h case   10:*/		return 0x821E357C;
		  /* 821E357Ch */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E357Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E357Ch case   11:*/		return 0x821E3580;
		  /* 821E3580h */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821E3580h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821E3580h case   12:*/		return 0x821E3584;
		  /* 821E3584h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821E3584h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821E3584h case   13:*/		return 0x821E3588;
		  /* 821E3588h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 821E3588h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821E35C4;  }
		/* 821E3588h case   14:*/		return 0x821E358C;
		  /* 821E358Ch */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821E358Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821E358Ch case   15:*/		return 0x821E3590;
		  /* 821E3590h */ case   16:  		/* mr R3, R15 */
		/* 821E3590h case   16:*/		regs.R3 = regs.R15;
		/* 821E3590h case   16:*/		return 0x821E3594;
		  /* 821E3594h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E3594h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E3594h case   17:*/		return 0x821E3598;
		  /* 821E3598h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821E3598h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E3598h case   18:*/		return 0x821E359C;
		  /* 821E359Ch */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E359Ch case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E359Ch case   19:*/		return 0x821E35A0;
		  /* 821E35A0h */ case   20:  		/* stw R9, <#[R10]> */
		/* 821E35A0h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E35A0h case   20:*/		return 0x821E35A4;
		  /* 821E35A4h */ case   21:  		/* lwz R10, <#[R11]> */
		/* 821E35A4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E35A4h case   21:*/		return 0x821E35A8;
		  /* 821E35A8h */ case   22:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E35A8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E35A8h case   22:*/		return 0x821E35AC;
		  /* 821E35ACh */ case   23:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E35ACh case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E35ACh case   23:*/		return 0x821E35B0;
		  /* 821E35B0h */ case   24:  		/* stw R11, <#[R10]> */
		/* 821E35B0h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821E35B0h case   24:*/		return 0x821E35B4;
		  /* 821E35B4h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821E35B4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821E35B4h case   25:*/		return 0x821E35B8;
		  /* 821E35B8h */ case   26:  		/* addi R11, R11, 4 */
		/* 821E35B8h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E35B8h case   26:*/		return 0x821E35BC;
		  /* 821E35BCh */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821E35BCh case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821E35BCh case   27:*/		return 0x821E35C0;
		  /* 821E35C0h */ case   28:  		/* bl -595896 */
		/* 821E35C0h case   28:*/		regs.LR = 0x821E35C4; return 0x82151E08;
		/* 821E35C0h case   28:*/		return 0x821E35C4;
	}
	return 0x821E35C4;
} // Block from 821E3550h-821E35C4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E35C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E35C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E35C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E35C4);
		  /* 821E35C4h */ case    0:  		/* mr R30, R31 */
		/* 821E35C4h case    0:*/		regs.R30 = regs.R31;
		/* 821E35C4h case    0:*/		return 0x821E35C8;
		  /* 821E35C8h */ case    1:  		/* b -540 */
		/* 821E35C8h case    1:*/		return 0x821E33AC;
		/* 821E35C8h case    1:*/		return 0x821E35CC;
	}
	return 0x821E35CC;
} // Block from 821E35C4h-821E35CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E35CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E35CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E35CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E35CC);
		  /* 821E35CCh */ case    0:  		/* lwz R11, <#[R20 + 112]> */
		/* 821E35CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000070) );
		/* 821E35CCh case    0:*/		return 0x821E35D0;
		  /* 821E35D0h */ case    1:  		/* addi R29, R11, 1 */
		/* 821E35D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1);
		/* 821E35D0h case    1:*/		return 0x821E35D4;
		  /* 821E35D4h */ case    2:  		/* stw R29, <#[R20 + 112]> */
		/* 821E35D4h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R20 + 0x00000070) );
		/* 821E35D4h case    2:*/		return 0x821E35D8;
		  /* 821E35D8h */ case    3:  		/* lwz R11, <#[R27 + 48]> */
		/* 821E35D8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 821E35D8h case    3:*/		return 0x821E35DC;
		  /* 821E35DCh */ case    4:  		/* stw R29, <#[R11 - 4]> */
		/* 821E35DCh case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821E35DCh case    4:*/		return 0x821E35E0;
		  /* 821E35E0h */ case    5:  		/* lwz R30, <#[R11 + 4]> */
		/* 821E35E0h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821E35E0h case    5:*/		return 0x821E35E4;
		  /* 821E35E4h */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 821E35E4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E35E4h case    6:*/		return 0x821E35E8;
		  /* 821E35E8h */ case    7:  		/* bc 12, CR6_EQ, 692 */
		/* 821E35E8h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E389C;  }
		/* 821E35E8h case    7:*/		return 0x821E35EC;
		  /* 821E35ECh */ case    8:  		/* lwz R11, <#[R30 + 16]> */
		/* 821E35ECh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821E35ECh case    8:*/		return 0x821E35F0;
		  /* 821E35F0h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821E35F0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E35F0h case    9:*/		return 0x821E35F4;
		  /* 821E35F4h */ case   10:  		/* bc 12, CR6_EQ, 368 */
		/* 821E35F4h case   10:*/		if ( regs.CR[6].eq ) { return 0x821E3764;  }
		/* 821E35F4h case   10:*/		return 0x821E35F8;
		  /* 821E35F8h */ case   11:  		/* rlwinm R31, R11, 0, 0, 31 */
		/* 821E35F8h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R31,regs.R11);
		/* 821E35F8h case   11:*/		return 0x821E35FC;
		  /* 821E35FCh */ case   12:  		/* rlwinm R11, R24, 27, 5, 31 */
		/* 821E35FCh case   12:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R24);
		/* 821E35FCh case   12:*/		return 0x821E3600;
		  /* 821E3600h */ case   13:  		/* rlwinm R10, R24, 0, 27, 31 */
		/* 821E3600h case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R24);
		/* 821E3600h case   13:*/		return 0x821E3604;
		  /* 821E3604h */ case   14:  		/* addi R11, R11, 21 */
		/* 821E3604h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E3604h case   14:*/		return 0x821E3608;
		  /* 821E3608h */ case   15:  		/* lwz R9, <#[R31 + 28]> */
		/* 821E3608h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 821E3608h case   15:*/		return 0x821E360C;
		  /* 821E360Ch */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E360Ch case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E360Ch case   16:*/		return 0x821E3610;
		  /* 821E3610h */ case   17:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821E3610h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821E3610h case   17:*/		return 0x821E3614;
		  /* 821E3614h */ case   18:  		/* srw R11, R11, R10 */
		/* 821E3614h case   18:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E3614h case   18:*/		return 0x821E3618;
		  /* 821E3618h */ case   19:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E3618h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E3618h case   19:*/		return 0x821E361C;
		  /* 821E361Ch */ case   20:  		/* bc 12, CR0_EQ, 316 */
		/* 821E361Ch case   20:*/		if ( regs.CR[0].eq ) { return 0x821E3758;  }
		/* 821E361Ch case   20:*/		return 0x821E3620;
		  /* 821E3620h */ case   21:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E3620h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E3620h case   21:*/		return 0x821E3624;
		  /* 821E3624h */ case   22:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821E3624h case   22:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821E3624h case   22:*/		return 0x821E3628;
		  /* 821E3628h */ case   23:  		/* cmplwi CR6, R10, 112 */
		/* 821E3628h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000070);
		/* 821E3628h case   23:*/		return 0x821E362C;
		  /* 821E362Ch */ case   24:  		/* bc 4, CR6_EQ, 108 */
		/* 821E362Ch case   24:*/		if ( !regs.CR[6].eq ) { return 0x821E3698;  }
		/* 821E362Ch case   24:*/		return 0x821E3630;
		  /* 821E3630h */ case   25:  		/* lwz R11, <#[R31 - 4]> */
		/* 821E3630h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 821E3630h case   25:*/		return 0x821E3634;
		  /* 821E3634h */ case   26:  		/* cmplw CR6, R11, R29 */
		/* 821E3634h case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821E3634h case   26:*/		return 0x821E3638;
		  /* 821E3638h */ case   27:  		/* bc 12, CR6_EQ, 300 */
		/* 821E3638h case   27:*/		if ( regs.CR[6].eq ) { return 0x821E3764;  }
		/* 821E3638h case   27:*/		return 0x821E363C;
		  /* 821E363Ch */ case   28:  		/* stw R29, <#[R31 - 4]> */
		/* 821E363Ch case   28:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 821E363Ch case   28:*/		return 0x821E3640;
		  /* 821E3640h */ case   29:  		/* lwz R11, <#[R14]> */
		/* 821E3640h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821E3640h case   29:*/		return 0x821E3644;
		  /* 821E3644h */ case   30:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E3644h case   30:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E3644h case   30:*/		return 0x821E3648;
		  /* 821E3648h */ case   31:  		/* bc 4, CR0_EQ, 40 */
		/* 821E3648h case   31:*/		if ( !regs.CR[0].eq ) { return 0x821E3670;  }
		/* 821E3648h case   31:*/		return 0x821E364C;
		  /* 821E364Ch */ case   32:  		/* lwz R11, <#[R15]> */
		/* 821E364Ch case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821E364Ch case   32:*/		return 0x821E3650;
		  /* 821E3650h */ case   33:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E3650h case   33:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E3650h case   33:*/		return 0x821E3654;
		  /* 821E3654h */ case   34:  		/* addic. R3, R11, -4 */
		/* 821E3654h case   34:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821E3654h case   34:*/		return 0x821E3658;
		  /* 821E3658h */ case   35:  		/* bc 12, CR0_EQ, 24 */
		/* 821E3658h case   35:*/		if ( regs.CR[0].eq ) { return 0x821E3670;  }
		/* 821E3658h case   35:*/		return 0x821E365C;
		  /* 821E365Ch */ case   36:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E365Ch case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E365Ch case   36:*/		return 0x821E3660;
		  /* 821E3660h */ case   37:  		/* lwz R10, <#[R3 + 12]> */
		/* 821E3660h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E3660h case   37:*/		return 0x821E3664;
		  /* 821E3664h */ case   38:  		/* addi R11, R11, 1 */
		/* 821E3664h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E3664h case   38:*/		return 0x821E3668;
		  /* 821E3668h */ case   39:  		/* cmplw CR6, R11, R10 */
		/* 821E3668h case   39:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E3668h case   39:*/		return 0x821E366C;
		  /* 821E366Ch */ case   40:  		/* bc 4, CR6_GT, 16 */
		/* 821E366Ch case   40:*/		if ( !regs.CR[6].gt ) { return 0x821E367C;  }
		/* 821E366Ch case   40:*/		return 0x821E3670;
	}
	return 0x821E3670;
} // Block from 821E35CCh-821E3670h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821E3670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3670);
		  /* 821E3670h */ case    0:  		/* li R4, 1 */
		/* 821E3670h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E3670h case    0:*/		return 0x821E3674;
		  /* 821E3674h */ case    1:  		/* mr R3, R15 */
		/* 821E3674h case    1:*/		regs.R3 = regs.R15;
		/* 821E3674h case    1:*/		return 0x821E3678;
		  /* 821E3678h */ case    2:  		/* bl -353712 */
		/* 821E3678h case    2:*/		regs.LR = 0x821E367C; return 0x8218D0C8;
		/* 821E3678h case    2:*/		return 0x821E367C;
	}
	return 0x821E367C;
} // Block from 821E3670h-821E367Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E367Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E367C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E367C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E367C);
		  /* 821E367Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E367Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E367Ch case    0:*/		return 0x821E3680;
		  /* 821E3680h */ case    1:  		/* addi R10, R11, 4 */
		/* 821E3680h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E3680h case    1:*/		return 0x821E3684;
		  /* 821E3684h */ case    2:  		/* addi R9, R11, 1 */
		/* 821E3684h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821E3684h case    2:*/		return 0x821E3688;
		  /* 821E3688h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821E3688h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821E3688h case    3:*/		return 0x821E368C;
		  /* 821E368Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821E368Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821E368Ch case    4:*/		return 0x821E3690;
		  /* 821E3690h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821E3690h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821E3690h case    5:*/		return 0x821E3694;
		  /* 821E3694h */ case    6:  		/* b 208 */
		/* 821E3694h case    6:*/		return 0x821E3764;
		/* 821E3694h case    6:*/		return 0x821E3698;
	}
	return 0x821E3698;
} // Block from 821E367Ch-821E3698h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E3698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3698);
		  /* 821E3698h */ case    0:  		/* lwz R11, <#[R27 + 60]> */
		/* 821E3698h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000003C) );
		/* 821E3698h case    0:*/		return 0x821E369C;
		  /* 821E369Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E369Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E369Ch case    1:*/		return 0x821E36A0;
		  /* 821E36A0h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 821E36A0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E36C4;  }
		/* 821E36A0h case    2:*/		return 0x821E36A4;
		  /* 821E36A4h */ case    3:  		/* lwz R9, <#[R11 + 8]> */
		/* 821E36A4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E36A4h case    3:*/		return 0x821E36A8;
		  /* 821E36A8h */ case    4:  		/* cmplw CR6, R31, R9 */
		/* 821E36A8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 821E36A8h case    4:*/		return 0x821E36AC;
		  /* 821E36ACh */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821E36ACh case    5:*/		if ( regs.CR[6].eq ) { return 0x821E36BC;  }
		/* 821E36ACh case    5:*/		return 0x821E36B0;
		  /* 821E36B0h */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E36B0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E36B0h case    6:*/		return 0x821E36B4;
		  /* 821E36B4h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821E36B4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E36B4h case    7:*/		return 0x821E36B8;
		  /* 821E36B8h */ case    8:  		/* bc 4, CR6_EQ, -20 */
		/* 821E36B8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E36A4;  }
		/* 821E36B8h case    8:*/		return 0x821E36BC;
	}
	return 0x821E36BC;
} // Block from 821E3698h-821E36BCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E36BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E36BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E36BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E36BC);
		  /* 821E36BCh */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E36BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E36BCh case    0:*/		return 0x821E36C0;
		  /* 821E36C0h */ case    1:  		/* bc 4, CR6_EQ, 164 */
		/* 821E36C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E3764;  }
		/* 821E36C0h case    1:*/		return 0x821E36C4;
	}
	return 0x821E36C4;
} // Block from 821E36BCh-821E36C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E36C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E36C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E36C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E36C4);
		  /* 821E36C4h */ case    0:  		/* lwz R11, <#[R27 + 52]> */
		/* 821E36C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000034) );
		/* 821E36C4h case    0:*/		return 0x821E36C8;
		  /* 821E36C8h */ case    1:  		/* cmplw CR6, R31, R11 */
		/* 821E36C8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821E36C8h case    1:*/		return 0x821E36CC;
		  /* 821E36CCh */ case    2:  		/* bc 12, CR6_EQ, 152 */
		/* 821E36CCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821E3764;  }
		/* 821E36CCh case    2:*/		return 0x821E36D0;
		  /* 821E36D0h */ case    3:  		/* lwz R11, <#[R27]> */
		/* 821E36D0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821E36D0h case    3:*/		return 0x821E36D4;
		  /* 821E36D4h */ case    4:  		/* rlwinm. R11, R11, 0, 4, 4 */
		/* 821E36D4h case    4:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R11);
		/* 821E36D4h case    4:*/		return 0x821E36D8;
		  /* 821E36D8h */ case    5:  		/* bc 12, CR0_EQ, 128 */
		/* 821E36D8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821E3758;  }
		/* 821E36D8h case    5:*/		return 0x821E36DC;
		  /* 821E36DCh */ case    6:  		/* cmplwi CR6, R10, 1 */
		/* 821E36DCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821E36DCh case    6:*/		return 0x821E36E0;
		  /* 821E36E0h */ case    7:  		/* bc 4, CR6_EQ, 76 */
		/* 821E36E0h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821E372C;  }
		/* 821E36E0h case    7:*/		return 0x821E36E4;
		  /* 821E36E4h */ case    8:  		/* lwz R8, <#[R31 + 4]> */
		/* 821E36E4h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 821E36E4h case    8:*/		return 0x821E36E8;
		  /* 821E36E8h */ case    9:  		/* cmplwi CR6, R8, 0 */
		/* 821E36E8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821E36E8h case    9:*/		return 0x821E36EC;
		  /* 821E36ECh */ case   10:  		/* bc 12, CR6_EQ, 120 */
		/* 821E36ECh case   10:*/		if ( regs.CR[6].eq ) { return 0x821E3764;  }
		/* 821E36ECh case   10:*/		return 0x821E36F0;
		  /* 821E36F0h */ case   11:  		/* lwz R11, <#[R8 + 16]> */
		/* 821E36F0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000010) );
		/* 821E36F0h case   11:*/		return 0x821E36F4;
		  /* 821E36F4h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821E36F4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E36F4h case   12:*/		return 0x821E36F8;
		  /* 821E36F8h */ case   13:  		/* bc 12, CR6_EQ, 44 */
		/* 821E36F8h case   13:*/		if ( regs.CR[6].eq ) { return 0x821E3724;  }
		/* 821E36F8h case   13:*/		return 0x821E36FC;
		  /* 821E36FCh */ case   14:  		/* rlwinm R5, R11, 0, 0, 31 */
		/* 821E36FCh case   14:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R11);
		/* 821E36FCh case   14:*/		return 0x821E3700;
		  /* 821E3700h */ case   15:  		/* lwz R11, <#[R5 + 8]> */
		/* 821E3700h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821E3700h case   15:*/		return 0x821E3704;
		  /* 821E3704h */ case   16:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E3704h case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E3704h case   16:*/		return 0x821E3708;
		  /* 821E3708h */ case   17:  		/* cmplwi CR6, R11, 1664 */
		/* 821E3708h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000680);
		/* 821E3708h case   17:*/		return 0x821E370C;
		  /* 821E370Ch */ case   18:  		/* bc 4, CR6_EQ, 76 */
		/* 821E370Ch case   18:*/		if ( !regs.CR[6].eq ) { return 0x821E3758;  }
		/* 821E370Ch case   18:*/		return 0x821E3710;
		  /* 821E3710h */ case   19:  		/* mr R4, R27 */
		/* 821E3710h case   19:*/		regs.R4 = regs.R27;
		/* 821E3710h case   19:*/		return 0x821E3714;
		  /* 821E3714h */ case   20:  		/* mr R3, R20 */
		/* 821E3714h case   20:*/		regs.R3 = regs.R20;
		/* 821E3714h case   20:*/		return 0x821E3718;
		  /* 821E3718h */ case   21:  		/* bl -155288 */
		/* 821E3718h case   21:*/		regs.LR = 0x821E371C; return 0x821BD880;
		/* 821E3718h case   21:*/		return 0x821E371C;
		  /* 821E371Ch */ case   22:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E371Ch case   22:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E371Ch case   22:*/		return 0x821E3720;
		  /* 821E3720h */ case   23:  		/* bc 12, CR0_EQ, 56 */
		/* 821E3720h case   23:*/		if ( regs.CR[0].eq ) { return 0x821E3758;  }
		/* 821E3720h case   23:*/		return 0x821E3724;
	}
	return 0x821E3724;
} // Block from 821E36C4h-821E3724h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E3724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3724);
		  /* 821E3724h */ case    0:  		/* lwz R8, <#[R8 + 8]> */
		/* 821E3724h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 821E3724h case    0:*/		return 0x821E3728;
		  /* 821E3728h */ case    1:  		/* b -64 */
		/* 821E3728h case    1:*/		return 0x821E36E8;
		/* 821E3728h case    1:*/		return 0x821E372C;
	}
	return 0x821E372C;
} // Block from 821E3724h-821E372Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E372Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E372C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E372C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E372C);
		  /* 821E372Ch */ case    0:  		/* cmplwi CR6, R10, 13 */
		/* 821E372Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000D);
		/* 821E372Ch case    0:*/		return 0x821E3730;
		  /* 821E3730h */ case    1:  		/* bc 4, CR6_EQ, 60 */
		/* 821E3730h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E376C;  }
		/* 821E3730h case    1:*/		return 0x821E3734;
		  /* 821E3734h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 821E3734h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E3734h case    2:*/		return 0x821E3738;
		  /* 821E3738h */ case    3:  		/* cmplw CR6, R11, R30 */
		/* 821E3738h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821E3738h case    3:*/		return 0x821E373C;
		  /* 821E373Ch */ case    4:  		/* bc 4, CR6_EQ, 28 */
		/* 821E373Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821E3758;  }
		/* 821E373Ch case    4:*/		return 0x821E3740;
		  /* 821E3740h */ case    5:  		/* mr R5, R31 */
		/* 821E3740h case    5:*/		regs.R5 = regs.R31;
		/* 821E3740h case    5:*/		return 0x821E3744;
		  /* 821E3744h */ case    6:  		/* mr R4, R27 */
		/* 821E3744h case    6:*/		regs.R4 = regs.R27;
		/* 821E3744h case    6:*/		return 0x821E3748;
		  /* 821E3748h */ case    7:  		/* mr R3, R20 */
		/* 821E3748h case    7:*/		regs.R3 = regs.R20;
		/* 821E3748h case    7:*/		return 0x821E374C;
		  /* 821E374Ch */ case    8:  		/* bl -155340 */
		/* 821E374Ch case    8:*/		regs.LR = 0x821E3750; return 0x821BD880;
		/* 821E374Ch case    8:*/		return 0x821E3750;
		  /* 821E3750h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E3750h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E3750h case    9:*/		return 0x821E3754;
		  /* 821E3754h */ case   10:  		/* bc 4, CR0_EQ, 16 */
		/* 821E3754h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821E3764;  }
		/* 821E3754h case   10:*/		return 0x821E3758;
	}
	return 0x821E3758;
} // Block from 821E372Ch-821E3758h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E3758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3758);
		  /* 821E3758h */ case    0:  		/* lwz R11, <#[R27 + 72]> */
		/* 821E3758h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000048) );
		/* 821E3758h case    0:*/		return 0x821E375C;
		  /* 821E375Ch */ case    1:  		/* addi R11, R11, 1 */
		/* 821E375Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E375Ch case    1:*/		return 0x821E3760;
		  /* 821E3760h */ case    2:  		/* stw R11, <#[R27 + 72]> */
		/* 821E3760h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000048) );
		/* 821E3760h case    2:*/		return 0x821E3764;
	}
	return 0x821E3764;
} // Block from 821E3758h-821E3764h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E3764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3764);
		  /* 821E3764h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821E3764h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821E3764h case    0:*/		return 0x821E3768;
		  /* 821E3768h */ case    1:  		/* b -388 */
		/* 821E3768h case    1:*/		return 0x821E35E4;
		/* 821E3768h case    1:*/		return 0x821E376C;
	}
	return 0x821E376C;
} // Block from 821E3764h-821E376Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E376Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E376C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E376C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E376C);
		  /* 821E376Ch */ case    0:  		/* cmplwi CR6, R10, 11 */
		/* 821E376Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000B);
		/* 821E376Ch case    0:*/		return 0x821E3770;
		  /* 821E3770h */ case    1:  		/* bc 4, CR6_EQ, 112 */
		/* 821E3770h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E37E0;  }
		/* 821E3770h case    1:*/		return 0x821E3774;
		  /* 821E3774h */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E3774h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E3774h case    2:*/		return 0x821E3778;
		  /* 821E3778h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821E3778h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3778h case    3:*/		return 0x821E377C;
		  /* 821E377Ch */ case    4:  		/* bc 12, CR6_EQ, 76 */
		/* 821E377Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821E37C8;  }
		/* 821E377Ch case    4:*/		return 0x821E3780;
		  /* 821E3780h */ case    5:  		/* lwz R10, <#[R11 + 16]> */
		/* 821E3780h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821E3780h case    5:*/		return 0x821E3784;
		  /* 821E3784h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 821E3784h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E3784h case    6:*/		return 0x821E3788;
		  /* 821E3788h */ case    7:  		/* bc 12, CR6_EQ, 56 */
		/* 821E3788h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E37C0;  }
		/* 821E3788h case    7:*/		return 0x821E378C;
		  /* 821E378Ch */ case    8:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821E378Ch case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821E378Ch case    8:*/		return 0x821E3790;
		  /* 821E3790h */ case    9:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E3790h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E3790h case    9:*/		return 0x821E3794;
		  /* 821E3794h */ case   10:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821E3794h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821E3794h case   10:*/		return 0x821E3798;
		  /* 821E3798h */ case   11:  		/* cmplwi CR6, R10, 7040 */
		/* 821E3798h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00001B80);
		/* 821E3798h case   11:*/		return 0x821E379C;
		  /* 821E379Ch */ case   12:  		/* bc 4, CR6_EQ, -68 */
		/* 821E379Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x821E3758;  }
		/* 821E379Ch case   12:*/		return 0x821E37A0;
		  /* 821E37A0h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821E37A0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E37A0h case   13:*/		return 0x821E37A4;
		  /* 821E37A4h */ case   14:  		/* rlwinm R9, R10, 8, 28, 30 */
		/* 821E37A4h case   14:*/		cpu::op::rlwinm<0,8,28,30>(regs,&regs.R9,regs.R10);
		/* 821E37A4h case   14:*/		return 0x821E37A8;
		  /* 821E37A8h */ case   15:  		/* rlwinm R8, R10, 27, 5, 31 */
		/* 821E37A8h case   15:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R8,regs.R10);
		/* 821E37A8h case   15:*/		return 0x821E37AC;
		  /* 821E37ACh */ case   16:  		/* slw R10, R22, R9 */
		/* 821E37ACh case   16:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R22,regs.R9);
		/* 821E37ACh case   16:*/		return 0x821E37B0;
		  /* 821E37B0h */ case   17:  		/* addi R10, R10, -1 */
		/* 821E37B0h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821E37B0h case   17:*/		return 0x821E37B4;
		  /* 821E37B4h */ case   18:  		/* and R10, R10, R8 */
		/* 821E37B4h case   18:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821E37B4h case   18:*/		return 0x821E37B8;
		  /* 821E37B8h */ case   19:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821E37B8h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821E37B8h case   19:*/		return 0x821E37BC;
		  /* 821E37BCh */ case   20:  		/* bc 4, CR0_EQ, -100 */
		/* 821E37BCh case   20:*/		if ( !regs.CR[0].eq ) { return 0x821E3758;  }
		/* 821E37BCh case   20:*/		return 0x821E37C0;
	}
	return 0x821E37C0;
} // Block from 821E376Ch-821E37C0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821E37C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E37C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E37C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E37C0);
		  /* 821E37C0h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E37C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E37C0h case    0:*/		return 0x821E37C4;
		  /* 821E37C4h */ case    1:  		/* b -76 */
		/* 821E37C4h case    1:*/		return 0x821E3778;
		/* 821E37C4h case    1:*/		return 0x821E37C8;
	}
	return 0x821E37C8;
} // Block from 821E37C0h-821E37C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E37C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E37C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E37C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E37C8);
		  /* 821E37C8h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821E37C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E37C8h case    0:*/		return 0x821E37CC;
		  /* 821E37CCh */ case    1:  		/* lis R10, 512 */
		/* 821E37CCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x200);
		/* 821E37CCh case    1:*/		return 0x821E37D0;
		  /* 821E37D0h */ case    2:  		/* rlwinm R11, R11, 0, 4, 6 */
		/* 821E37D0h case    2:*/		cpu::op::rlwinm<0,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821E37D0h case    2:*/		return 0x821E37D4;
		  /* 821E37D4h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 821E37D4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E37D4h case    3:*/		return 0x821E37D8;
		  /* 821E37D8h */ case    4:  		/* bc 12, CR6_EQ, -116 */
		/* 821E37D8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821E3764;  }
		/* 821E37D8h case    4:*/		return 0x821E37DC;
		  /* 821E37DCh */ case    5:  		/* b -132 */
		/* 821E37DCh case    5:*/		return 0x821E3758;
		/* 821E37DCh case    5:*/		return 0x821E37E0;
	}
	return 0x821E37E0;
} // Block from 821E37C8h-821E37E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E37E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E37E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E37E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E37E0);
		  /* 821E37E0h */ case    0:  		/* mr R3, R31 */
		/* 821E37E0h case    0:*/		regs.R3 = regs.R31;
		/* 821E37E0h case    0:*/		return 0x821E37E4;
		  /* 821E37E4h */ case    1:  		/* bl -521956 */
		/* 821E37E4h case    1:*/		regs.LR = 0x821E37E8; return 0x82164100;
		/* 821E37E4h case    1:*/		return 0x821E37E8;
		  /* 821E37E8h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E37E8h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E37E8h case    2:*/		return 0x821E37EC;
		  /* 821E37ECh */ case    3:  		/* bc 12, CR0_EQ, -148 */
		/* 821E37ECh case    3:*/		if ( regs.CR[0].eq ) { return 0x821E3758;  }
		/* 821E37ECh case    3:*/		return 0x821E37F0;
		  /* 821E37F0h */ case    4:  		/* lwz R31, <#[R31 + 4]> */
		/* 821E37F0h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821E37F0h case    4:*/		return 0x821E37F4;
		  /* 821E37F4h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821E37F4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E37F4h case    5:*/		return 0x821E37F8;
		  /* 821E37F8h */ case    6:  		/* bc 12, CR6_EQ, 148 */
		/* 821E37F8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821E388C;  }
		/* 821E37F8h case    6:*/		return 0x821E37FC;
		  /* 821E37FCh */ case    7:  		/* lwz R11, <#[R31 + 16]> */
		/* 821E37FCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821E37FCh case    7:*/		return 0x821E3800;
		  /* 821E3800h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821E3800h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3800h case    8:*/		return 0x821E3804;
		  /* 821E3804h */ case    9:  		/* bc 12, CR6_EQ, 128 */
		/* 821E3804h case    9:*/		if ( regs.CR[6].eq ) { return 0x821E3884;  }
		/* 821E3804h case    9:*/		return 0x821E3808;
		  /* 821E3808h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 821E3808h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E3808h case   10:*/		return 0x821E380C;
		  /* 821E380Ch */ case   11:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821E380Ch case   11:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821E380Ch case   11:*/		return 0x821E3810;
		  /* 821E3810h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 821E3810h case   12:*/		if ( regs.CR[0].eq ) { return 0x821E3820;  }
		/* 821E3810h case   12:*/		return 0x821E3814;
		  /* 821E3814h */ case   13:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821E3814h case   13:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821E3814h case   13:*/		return 0x821E3818;
		  /* 821E3818h */ case   14:  		/* mr R11, R22 */
		/* 821E3818h case   14:*/		regs.R11 = regs.R22;
		/* 821E3818h case   14:*/		return 0x821E381C;
		  /* 821E381Ch */ case   15:  		/* bc 12, CR0_EQ, 8 */
		/* 821E381Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821E3824;  }
		/* 821E381Ch case   15:*/		return 0x821E3820;
	}
	return 0x821E3820;
} // Block from 821E37E0h-821E3820h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E3820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3820);
		  /* 821E3820h */ case    0:  		/* mr R11, R16 */
		/* 821E3820h case    0:*/		regs.R11 = regs.R16;
		/* 821E3820h case    0:*/		return 0x821E3824;
	}
	return 0x821E3824;
} // Block from 821E3820h-821E3824h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E3824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3824);
		  /* 821E3824h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E3824h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E3824h case    0:*/		return 0x821E3828;
		  /* 821E3828h */ case    1:  		/* bc 12, CR0_EQ, -208 */
		/* 821E3828h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E3758;  }
		/* 821E3828h case    1:*/		return 0x821E382C;
		  /* 821E382Ch */ case    2:  		/* lwz R11, <#[R31 + 16]> */
		/* 821E382Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821E382Ch case    2:*/		return 0x821E3830;
		  /* 821E3830h */ case    3:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E3830h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E3830h case    3:*/		return 0x821E3834;
		  /* 821E3834h */ case    4:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821E3834h case    4:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821E3834h case    4:*/		return 0x821E3838;
		  /* 821E3838h */ case    5:  		/* cmplwi CR6, R10, 15104 */
		/* 821E3838h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003B00);
		/* 821E3838h case    5:*/		return 0x821E383C;
		  /* 821E383Ch */ case    6:  		/* bc 4, CR6_EQ, -228 */
		/* 821E383Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E3758;  }
		/* 821E383Ch case    6:*/		return 0x821E3840;
		  /* 821E3840h */ case    7:  		/* lwz R11, <#[R11 + 44]> */
		/* 821E3840h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 821E3840h case    7:*/		return 0x821E3844;
		  /* 821E3844h */ case    8:  		/* lwz R3, <#[R11 + 12]> */
		/* 821E3844h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E3844h case    8:*/		return 0x821E3848;
		  /* 821E3848h */ case    9:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E3848h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E3848h case    9:*/		return 0x821E384C;
		  /* 821E384Ch */ case   10:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E384Ch case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E384Ch case   10:*/		return 0x821E3850;
		  /* 821E3850h */ case   11:  		/* cmplwi CR6, R11, 15872 */
		/* 821E3850h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E00);
		/* 821E3850h case   11:*/		return 0x821E3854;
		  /* 821E3854h */ case   12:  		/* bc 4, CR6_EQ, -252 */
		/* 821E3854h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821E3758;  }
		/* 821E3854h case   12:*/		return 0x821E3858;
		  /* 821E3858h */ case   13:  		/* mr R4, R20 */
		/* 821E3858h case   13:*/		regs.R4 = regs.R20;
		/* 821E3858h case   13:*/		return 0x821E385C;
		  /* 821E385Ch */ case   14:  		/* bl -440660 */
		/* 821E385Ch case   14:*/		regs.LR = 0x821E3860; return 0x82177F08;
		/* 821E385Ch case   14:*/		return 0x821E3860;
		  /* 821E3860h */ case   15:  		/* lwz R11, <#[R20 + 12]> */
		/* 821E3860h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000000C) );
		/* 821E3860h case   15:*/		return 0x821E3864;
		  /* 821E3864h */ case   16:  		/* mulli R10, R3, 40 */
		/* 821E3864h case   16:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R3,0x28);
		/* 821E3864h case   16:*/		return 0x821E3868;
		  /* 821E3868h */ case   17:  		/* add R11, R10, R11 */
		/* 821E3868h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E3868h case   17:*/		return 0x821E386C;
		  /* 821E386Ch */ case   18:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E386Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E386Ch case   18:*/		return 0x821E3870;
		  /* 821E3870h */ case   19:  		/* rlwinm R11, R11, 28, 29, 31 */
		/* 821E3870h case   19:*/		cpu::op::rlwinm<0,28,29,31>(regs,&regs.R11,regs.R11);
		/* 821E3870h case   19:*/		return 0x821E3874;
		  /* 821E3874h */ case   20:  		/* cmplwi CR6, R11, 2 */
		/* 821E3874h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 821E3874h case   20:*/		return 0x821E3878;
		  /* 821E3878h */ case   21:  		/* bc 12, CR6_EQ, 12 */
		/* 821E3878h case   21:*/		if ( regs.CR[6].eq ) { return 0x821E3884;  }
		/* 821E3878h case   21:*/		return 0x821E387C;
		  /* 821E387Ch */ case   22:  		/* cmplwi CR6, R11, 7 */
		/* 821E387Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821E387Ch case   22:*/		return 0x821E3880;
		  /* 821E3880h */ case   23:  		/* bc 4, CR6_EQ, -296 */
		/* 821E3880h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821E3758;  }
		/* 821E3880h case   23:*/		return 0x821E3884;
	}
	return 0x821E3884;
} // Block from 821E3824h-821E3884h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E3884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3884);
		  /* 821E3884h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821E3884h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821E3884h case    0:*/		return 0x821E3888;
		  /* 821E3888h */ case    1:  		/* b -148 */
		/* 821E3888h case    1:*/		return 0x821E37F4;
		/* 821E3888h case    1:*/		return 0x821E388C;
	}
	return 0x821E388C;
} // Block from 821E3884h-821E388Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E388Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E388C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E388C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E388C);
		  /* 821E388Ch */ case    0:  		/* lwz R11, <#[R27 + 76]> */
		/* 821E388Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000004C) );
		/* 821E388Ch case    0:*/		return 0x821E3890;
		  /* 821E3890h */ case    1:  		/* addi R11, R11, 1 */
		/* 821E3890h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E3890h case    1:*/		return 0x821E3894;
		  /* 821E3894h */ case    2:  		/* stw R11, <#[R27 + 76]> */
		/* 821E3894h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000004C) );
		/* 821E3894h case    2:*/		return 0x821E3898;
		  /* 821E3898h */ case    3:  		/* b -308 */
		/* 821E3898h case    3:*/		return 0x821E3764;
		/* 821E3898h case    3:*/		return 0x821E389C;
	}
	return 0x821E389C;
} // Block from 821E388Ch-821E389Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E389Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E389C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E389C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E389C);
		  /* 821E389Ch */ case    0:  		/* lwz R11, <#[R14]> */
		/* 821E389Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821E389Ch case    0:*/		return 0x821E38A0;
		  /* 821E38A0h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E38A0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E38A0h case    1:*/		return 0x821E38A4;
		  /* 821E38A4h */ case    2:  		/* bc 4, CR0_EQ, 116 */
		/* 821E38A4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E3918;  }
		/* 821E38A4h case    2:*/		return 0x821E38A8;
		  /* 821E38A8h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821E38A8h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E38A8h case    3:*/		return 0x821E38AC;
		  /* 821E38ACh */ case    4:  		/* bc 12, CR0_EQ, 108 */
		/* 821E38ACh case    4:*/		if ( regs.CR[0].eq ) { return 0x821E3918;  }
		/* 821E38ACh case    4:*/		return 0x821E38B0;
		  /* 821E38B0h */ case    5:  		/* lwz R11, <#[R15]> */
		/* 821E38B0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821E38B0h case    5:*/		return 0x821E38B4;
		  /* 821E38B4h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E38B4h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E38B4h case    6:*/		return 0x821E38B8;
		  /* 821E38B8h */ case    7:  		/* addi R4, R11, -4 */
		/* 821E38B8h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821E38B8h case    7:*/		return 0x821E38BC;
		  /* 821E38BCh */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E38BCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E38BCh case    8:*/		return 0x821E38C0;
		  /* 821E38C0h */ case    9:  		/* addi R10, R11, 3 */
		/* 821E38C0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821E38C0h case    9:*/		return 0x821E38C4;
		  /* 821E38C4h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821E38C4h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E38C4h case   10:*/		return 0x821E38C8;
		  /* 821E38C8h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E38C8h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E38C8h case   11:*/		return 0x821E38CC;
		  /* 821E38CCh */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821E38CCh case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821E38CCh case   12:*/		return 0x821E38D0;
		  /* 821E38D0h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821E38D0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821E38D0h case   13:*/		return 0x821E38D4;
		  /* 821E38D4h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 821E38D4h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821E3910;  }
		/* 821E38D4h case   14:*/		return 0x821E38D8;
		  /* 821E38D8h */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821E38D8h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821E38D8h case   15:*/		return 0x821E38DC;
		  /* 821E38DCh */ case   16:  		/* mr R3, R15 */
		/* 821E38DCh case   16:*/		regs.R3 = regs.R15;
		/* 821E38DCh case   16:*/		return 0x821E38E0;
		  /* 821E38E0h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E38E0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E38E0h case   17:*/		return 0x821E38E4;
		  /* 821E38E4h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821E38E4h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E38E4h case   18:*/		return 0x821E38E8;
		  /* 821E38E8h */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E38E8h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E38E8h case   19:*/		return 0x821E38EC;
		  /* 821E38ECh */ case   20:  		/* stw R9, <#[R10]> */
		/* 821E38ECh case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E38ECh case   20:*/		return 0x821E38F0;
		  /* 821E38F0h */ case   21:  		/* lwz R10, <#[R11]> */
		/* 821E38F0h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E38F0h case   21:*/		return 0x821E38F4;
		  /* 821E38F4h */ case   22:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E38F4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E38F4h case   22:*/		return 0x821E38F8;
		  /* 821E38F8h */ case   23:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E38F8h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E38F8h case   23:*/		return 0x821E38FC;
		  /* 821E38FCh */ case   24:  		/* stw R11, <#[R10]> */
		/* 821E38FCh case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821E38FCh case   24:*/		return 0x821E3900;
		  /* 821E3900h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821E3900h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821E3900h case   25:*/		return 0x821E3904;
		  /* 821E3904h */ case   26:  		/* addi R11, R11, 4 */
		/* 821E3904h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E3904h case   26:*/		return 0x821E3908;
		  /* 821E3908h */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821E3908h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821E3908h case   27:*/		return 0x821E390C;
		  /* 821E390Ch */ case   28:  		/* bl -596740 */
		/* 821E390Ch case   28:*/		regs.LR = 0x821E3910; return 0x82151E08;
		/* 821E390Ch case   28:*/		return 0x821E3910;
	}
	return 0x821E3910;
} // Block from 821E389Ch-821E3910h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E3910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3910);
		  /* 821E3910h */ case    0:  		/* mr R11, R31 */
		/* 821E3910h case    0:*/		regs.R11 = regs.R31;
		/* 821E3910h case    0:*/		return 0x821E3914;
		  /* 821E3914h */ case    1:  		/* b -820 */
		/* 821E3914h case    1:*/		return 0x821E35E0;
		/* 821E3914h case    1:*/		return 0x821E3918;
	}
	return 0x821E3918;
} // Block from 821E3910h-821E3918h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E3918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3918);
		  /* 821E3918h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821E3918h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821E3918h case    0:*/		return 0x821E391C;
		  /* 821E391Ch */ case    1:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 821E391Ch case    1:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 821E391Ch case    1:*/		return 0x821E3920;
		  /* 821E3920h */ case    2:  		/* bc 4, CR0_EQ, 392 */
		/* 821E3920h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E3AA8;  }
		/* 821E3920h case    2:*/		return 0x821E3924;
		  /* 821E3924h */ case    3:  		/* lwz R4, <#[R27 + 60]> */
		/* 821E3924h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x0000003C) );
		/* 821E3924h case    3:*/		return 0x821E3928;
		  /* 821E3928h */ case    4:  		/* b 376 */
		/* 821E3928h case    4:*/		return 0x821E3AA0;
		/* 821E3928h case    4:*/		return 0x821E392C;
		  /* 821E392Ch */ case    5:  		/* lwz R11, <#[R4 + 8]> */
		/* 821E392Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821E392Ch case    5:*/		return 0x821E3930;
		  /* 821E3930h */ case    6:  		/* lwz R10, <#[R11 + 28]> */
		/* 821E3930h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821E3930h case    6:*/		return 0x821E3934;
		  /* 821E3934h */ case    7:  		/* lwz R10, <#[R10 + 28]> */
		/* 821E3934h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 821E3934h case    7:*/		return 0x821E3938;
		  /* 821E3938h */ case    8:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821E3938h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821E3938h case    8:*/		return 0x821E393C;
		  /* 821E393Ch */ case    9:  		/* bc 4, CR0_EQ, 48 */
		/* 821E393Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821E396C;  }
		/* 821E393Ch case    9:*/		return 0x821E3940;
		  /* 821E3940h */ case   10:  		/* cmplwi CR0, R10, 0 */
		/* 821E3940h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 821E3940h case   10:*/		return 0x821E3944;
		  /* 821E3944h */ case   11:  		/* bc 12, CR0_EQ, 40 */
		/* 821E3944h case   11:*/		if ( regs.CR[0].eq ) { return 0x821E396C;  }
		/* 821E3944h case   11:*/		return 0x821E3948;
		  /* 821E3948h */ case   12:  		/* lwz R9, <#[R10 + 8]> */
		/* 821E3948h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821E3948h case   12:*/		return 0x821E394C;
		  /* 821E394Ch */ case   13:  		/* rlwinm R8, R10, 0, 0, 30 */
		/* 821E394Ch case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R10);
		/* 821E394Ch case   13:*/		return 0x821E3950;
		  /* 821E3950h */ case   14:  		/* rlwinm R9, R9, 0, 6, 4 */
		/* 821E3950h case   14:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R9,regs.R9);
		/* 821E3950h case   14:*/		return 0x821E3954;
		  /* 821E3954h */ case   15:  		/* stw R9, <#[R10 + 8]> */
		/* 821E3954h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821E3954h case   15:*/		return 0x821E3958;
		  /* 821E3958h */ case   16:  		/* lwz R10, <#[R8 + 40]> */
		/* 821E3958h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000028) );
		/* 821E3958h case   16:*/		return 0x821E395C;
		  /* 821E395Ch */ case   17:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821E395Ch case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821E395Ch case   17:*/		return 0x821E3960;
		  /* 821E3960h */ case   18:  		/* bc 4, CR0_EQ, 12 */
		/* 821E3960h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821E396C;  }
		/* 821E3960h case   18:*/		return 0x821E3964;
		  /* 821E3964h */ case   19:  		/* cmplwi CR6, R10, 0 */
		/* 821E3964h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E3964h case   19:*/		return 0x821E3968;
		  /* 821E3968h */ case   20:  		/* bc 4, CR6_EQ, -32 */
		/* 821E3968h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821E3948;  }
		/* 821E3968h case   20:*/		return 0x821E396C;
	}
	return 0x821E396C;
} // Block from 821E3918h-821E396Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821E396Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E396C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E396C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E396C);
		  /* 821E396Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E396Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E396Ch case    0:*/		return 0x821E3970;
		  /* 821E3970h */ case    1:  		/* mr R8, R11 */
		/* 821E3970h case    1:*/		regs.R8 = regs.R11;
		/* 821E3970h case    1:*/		return 0x821E3974;
		  /* 821E3974h */ case    2:  		/* oris R10, R10, 1024 */
		/* 821E3974h case    2:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x400);
		/* 821E3974h case    2:*/		return 0x821E3978;
		  /* 821E3978h */ case    3:  		/* stw R10, <#[R11 + 8]> */
		/* 821E3978h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E3978h case    3:*/		return 0x821E397C;
		  /* 821E397Ch */ case    4:  		/* lwz R10, <#[R27 + 76]> */
		/* 821E397Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000004C) );
		/* 821E397Ch case    4:*/		return 0x821E3980;
		  /* 821E3980h */ case    5:  		/* addi R10, R10, 1 */
		/* 821E3980h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E3980h case    5:*/		return 0x821E3984;
		  /* 821E3984h */ case    6:  		/* stw R10, <#[R27 + 76]> */
		/* 821E3984h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x0000004C) );
		/* 821E3984h case    6:*/		return 0x821E3988;
		  /* 821E3988h */ case    7:  		/* lwz R5, <#[R8 + 8]> */
		/* 821E3988h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000008) );
		/* 821E3988h case    7:*/		return 0x821E398C;
		  /* 821E398Ch */ case    8:  		/* rlwinm. R10, R5, 6, 31, 31 */
		/* 821E398Ch case    8:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R5);
		/* 821E398Ch case    8:*/		return 0x821E3990;
		  /* 821E3990h */ case    9:  		/* bc 4, CR0_EQ, 132 */
		/* 821E3990h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821E3A14;  }
		/* 821E3990h case    9:*/		return 0x821E3994;
		  /* 821E3994h */ case   10:  		/* lwz R6, <#[R8]> */
		/* 821E3994h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000000) );
		/* 821E3994h case   10:*/		return 0x821E3998;
		  /* 821E3998h */ case   11:  		/* cmplwi CR6, R6, 0 */
		/* 821E3998h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821E3998h case   11:*/		return 0x821E399C;
		  /* 821E399Ch */ case   12:  		/* bc 12, CR6_EQ, 100 */
		/* 821E399Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x821E3A00;  }
		/* 821E399Ch case   12:*/		return 0x821E39A0;
		  /* 821E39A0h */ case   13:  		/* lwz R9, <#[R6 + 12]> */
		/* 821E39A0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x0000000C) );
		/* 821E39A0h case   13:*/		return 0x821E39A4;
		  /* 821E39A4h */ case   14:  		/* lwz R7, <#[R9 + 8]> */
		/* 821E39A4h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000008) );
		/* 821E39A4h case   14:*/		return 0x821E39A8;
		  /* 821E39A8h */ case   15:  		/* rlwinm R10, R7, 25, 25, 31 */
		/* 821E39A8h case   15:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R7);
		/* 821E39A8h case   15:*/		return 0x821E39AC;
		  /* 821E39ACh */ case   16:  		/* cmplwi CR6, R10, 1 */
		/* 821E39ACh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821E39ACh case   16:*/		return 0x821E39B0;
		  /* 821E39B0h */ case   17:  		/* bc 12, CR6_LT, 16 */
		/* 821E39B0h case   17:*/		if ( regs.CR[6].lt ) { return 0x821E39C0;  }
		/* 821E39B0h case   17:*/		return 0x821E39B4;
		  /* 821E39B4h */ case   18:  		/* cmplwi CR6, R10, 102 */
		/* 821E39B4h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000066);
		/* 821E39B4h case   18:*/		return 0x821E39B8;
		  /* 821E39B8h */ case   19:  		/* mr R10, R22 */
		/* 821E39B8h case   19:*/		regs.R10 = regs.R22;
		/* 821E39B8h case   19:*/		return 0x821E39BC;
		  /* 821E39BCh */ case   20:  		/* bc 4, CR6_GT, 8 */
		/* 821E39BCh case   20:*/		if ( !regs.CR[6].gt ) { return 0x821E39C4;  }
		/* 821E39BCh case   20:*/		return 0x821E39C0;
	}
	return 0x821E39C0;
} // Block from 821E396Ch-821E39C0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821E39C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E39C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E39C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E39C0);
		  /* 821E39C0h */ case    0:  		/* mr R10, R16 */
		/* 821E39C0h case    0:*/		regs.R10 = regs.R16;
		/* 821E39C0h case    0:*/		return 0x821E39C4;
	}
	return 0x821E39C4;
} // Block from 821E39C0h-821E39C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E39C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E39C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E39C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E39C4);
		  /* 821E39C4h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821E39C4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821E39C4h case    0:*/		return 0x821E39C8;
		  /* 821E39C8h */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 821E39C8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E39F8;  }
		/* 821E39C8h case    1:*/		return 0x821E39CC;
		  /* 821E39CCh */ case    2:  		/* rlwinm R10, R24, 27, 5, 31 */
		/* 821E39CCh case    2:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R24);
		/* 821E39CCh case    2:*/		return 0x821E39D0;
		  /* 821E39D0h */ case    3:  		/* lwz R9, <#[R9 + 28]> */
		/* 821E39D0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000001C) );
		/* 821E39D0h case    3:*/		return 0x821E39D4;
		  /* 821E39D4h */ case    4:  		/* rlwinm R3, R24, 0, 27, 31 */
		/* 821E39D4h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R24);
		/* 821E39D4h case    4:*/		return 0x821E39D8;
		  /* 821E39D8h */ case    5:  		/* addi R10, R10, 21 */
		/* 821E39D8h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821E39D8h case    5:*/		return 0x821E39DC;
		  /* 821E39DCh */ case    6:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E39DCh case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E39DCh case    6:*/		return 0x821E39E0;
		  /* 821E39E0h */ case    7:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821E39E0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821E39E0h case    7:*/		return 0x821E39E4;
		  /* 821E39E4h */ case    8:  		/* srw R10, R10, R3 */
		/* 821E39E4h case    8:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R3);
		/* 821E39E4h case    8:*/		return 0x821E39E8;
		  /* 821E39E8h */ case    9:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E39E8h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E39E8h case    9:*/		return 0x821E39EC;
		  /* 821E39ECh */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 821E39ECh case   10:*/		if ( regs.CR[0].eq ) { return 0x821E39F8;  }
		/* 821E39ECh case   10:*/		return 0x821E39F0;
		  /* 821E39F0h */ case   11:  		/* rlwinm. R10, R7, 6, 31, 31 */
		/* 821E39F0h case   11:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R7);
		/* 821E39F0h case   11:*/		return 0x821E39F4;
		  /* 821E39F4h */ case   12:  		/* bc 12, CR0_EQ, 32 */
		/* 821E39F4h case   12:*/		if ( regs.CR[0].eq ) { return 0x821E3A14;  }
		/* 821E39F4h case   12:*/		return 0x821E39F8;
	}
	return 0x821E39F8;
} // Block from 821E39C4h-821E39F8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E39F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E39F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E39F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E39F8);
		  /* 821E39F8h */ case    0:  		/* lwz R6, <#[R6 + 4]> */
		/* 821E39F8h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000004) );
		/* 821E39F8h case    0:*/		return 0x821E39FC;
		  /* 821E39FCh */ case    1:  		/* b -100 */
		/* 821E39FCh case    1:*/		return 0x821E3998;
		/* 821E39FCh case    1:*/		return 0x821E3A00;
	}
	return 0x821E3A00;
} // Block from 821E39F8h-821E3A00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E3A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3A00);
		  /* 821E3A00h */ case    0:  		/* oris R10, R5, 1024 */
		/* 821E3A00h case    0:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R5,0x400);
		/* 821E3A00h case    0:*/		return 0x821E3A04;
		  /* 821E3A04h */ case    1:  		/* stw R10, <#[R8 + 8]> */
		/* 821E3A04h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000008) );
		/* 821E3A04h case    1:*/		return 0x821E3A08;
		  /* 821E3A08h */ case    2:  		/* lwz R10, <#[R27 + 76]> */
		/* 821E3A08h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000004C) );
		/* 821E3A08h case    2:*/		return 0x821E3A0C;
		  /* 821E3A0Ch */ case    3:  		/* addi R10, R10, 1 */
		/* 821E3A0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E3A0Ch case    3:*/		return 0x821E3A10;
		  /* 821E3A10h */ case    4:  		/* stw R10, <#[R27 + 76]> */
		/* 821E3A10h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x0000004C) );
		/* 821E3A10h case    4:*/		return 0x821E3A14;
	}
	return 0x821E3A14;
} // Block from 821E3A00h-821E3A14h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E3A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3A14);
		  /* 821E3A14h */ case    0:  		/* rlwinm R10, R8, 0, 0, 30 */
		/* 821E3A14h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R8);
		/* 821E3A14h case    0:*/		return 0x821E3A18;
		  /* 821E3A18h */ case    1:  		/* lwz R10, <#[R10 + 40]> */
		/* 821E3A18h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 821E3A18h case    1:*/		return 0x821E3A1C;
		  /* 821E3A1Ch */ case    2:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821E3A1Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821E3A1Ch case    2:*/		return 0x821E3A20;
		  /* 821E3A20h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E3A20h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E3A30;  }
		/* 821E3A20h case    3:*/		return 0x821E3A24;
		  /* 821E3A24h */ case    4:  		/* mr R8, R10 */
		/* 821E3A24h case    4:*/		regs.R8 = regs.R10;
		/* 821E3A24h case    4:*/		return 0x821E3A28;
		  /* 821E3A28h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821E3A28h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E3A28h case    5:*/		return 0x821E3A2C;
		  /* 821E3A2Ch */ case    6:  		/* bc 4, CR6_EQ, -164 */
		/* 821E3A2Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E3988;  }
		/* 821E3A2Ch case    6:*/		return 0x821E3A30;
	}
	return 0x821E3A30;
} // Block from 821E3A14h-821E3A30h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E3A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3A30);
		  /* 821E3A30h */ case    0:  		/* lwz R9, <#[R11 + 8]> */
		/* 821E3A30h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E3A30h case    0:*/		return 0x821E3A34;
		  /* 821E3A34h */ case    1:  		/* rlwinm. R10, R9, 6, 31, 31 */
		/* 821E3A34h case    1:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R9);
		/* 821E3A34h case    1:*/		return 0x821E3A38;
		  /* 821E3A38h */ case    2:  		/* bc 4, CR0_EQ, 72 */
		/* 821E3A38h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E3A80;  }
		/* 821E3A38h case    2:*/		return 0x821E3A3C;
		  /* 821E3A3Ch */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E3A3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E3A3Ch case    3:*/		return 0x821E3A40;
		  /* 821E3A40h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821E3A40h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E3A40h case    4:*/		return 0x821E3A44;
		  /* 821E3A44h */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 821E3A44h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E3A6C;  }
		/* 821E3A44h case    5:*/		return 0x821E3A48;
		  /* 821E3A48h */ case    6:  		/* lwz R8, <#[R10 + 16]> */
		/* 821E3A48h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000010) );
		/* 821E3A48h case    6:*/		return 0x821E3A4C;
		  /* 821E3A4Ch */ case    7:  		/* cmplwi CR6, R8, 0 */
		/* 821E3A4Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821E3A4Ch case    7:*/		return 0x821E3A50;
		  /* 821E3A50h */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 821E3A50h case    8:*/		if ( regs.CR[6].eq ) { return 0x821E3A64;  }
		/* 821E3A50h case    8:*/		return 0x821E3A54;
		  /* 821E3A54h */ case    9:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 821E3A54h case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 821E3A54h case    9:*/		return 0x821E3A58;
		  /* 821E3A58h */ case   10:  		/* lwz R8, <#[R8 + 8]> */
		/* 821E3A58h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 821E3A58h case   10:*/		return 0x821E3A5C;
		  /* 821E3A5Ch */ case   11:  		/* rlwinm. R8, R8, 6, 31, 31 */
		/* 821E3A5Ch case   11:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R8,regs.R8);
		/* 821E3A5Ch case   11:*/		return 0x821E3A60;
		  /* 821E3A60h */ case   12:  		/* bc 12, CR0_EQ, 32 */
		/* 821E3A60h case   12:*/		if ( regs.CR[0].eq ) { return 0x821E3A80;  }
		/* 821E3A60h case   12:*/		return 0x821E3A64;
	}
	return 0x821E3A64;
} // Block from 821E3A30h-821E3A64h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E3A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3A64);
		  /* 821E3A64h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E3A64h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E3A64h case    0:*/		return 0x821E3A68;
		  /* 821E3A68h */ case    1:  		/* b -40 */
		/* 821E3A68h case    1:*/		return 0x821E3A40;
		/* 821E3A68h case    1:*/		return 0x821E3A6C;
	}
	return 0x821E3A6C;
} // Block from 821E3A64h-821E3A6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E3A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3A6C);
		  /* 821E3A6Ch */ case    0:  		/* oris R10, R9, 1024 */
		/* 821E3A6Ch case    0:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x400);
		/* 821E3A6Ch case    0:*/		return 0x821E3A70;
		  /* 821E3A70h */ case    1:  		/* stw R10, <#[R11 + 8]> */
		/* 821E3A70h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E3A70h case    1:*/		return 0x821E3A74;
		  /* 821E3A74h */ case    2:  		/* lwz R10, <#[R27 + 76]> */
		/* 821E3A74h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000004C) );
		/* 821E3A74h case    2:*/		return 0x821E3A78;
		  /* 821E3A78h */ case    3:  		/* addi R10, R10, 1 */
		/* 821E3A78h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E3A78h case    3:*/		return 0x821E3A7C;
		  /* 821E3A7Ch */ case    4:  		/* stw R10, <#[R27 + 76]> */
		/* 821E3A7Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x0000004C) );
		/* 821E3A7Ch case    4:*/		return 0x821E3A80;
	}
	return 0x821E3A80;
} // Block from 821E3A6Ch-821E3A80h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E3A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3A80);
		  /* 821E3A80h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E3A80h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E3A80h case    0:*/		return 0x821E3A84;
		  /* 821E3A84h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 821E3A84h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821E3A84h case    1:*/		return 0x821E3A88;
		  /* 821E3A88h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E3A88h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E3A88h case    2:*/		return 0x821E3A8C;
		  /* 821E3A8Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E3A8Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E3A9C;  }
		/* 821E3A8Ch case    3:*/		return 0x821E3A90;
		  /* 821E3A90h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E3A90h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E3A90h case    4:*/		return 0x821E3A94;
		  /* 821E3A94h */ case    5:  		/* addic. R11, R11, -40 */
		/* 821E3A94h case    5:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821E3A94h case    5:*/		return 0x821E3A98;
		  /* 821E3A98h */ case    6:  		/* bc 4, CR0_EQ, -104 */
		/* 821E3A98h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E3A30;  }
		/* 821E3A98h case    6:*/		return 0x821E3A9C;
	}
	return 0x821E3A9C;
} // Block from 821E3A80h-821E3A9Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E3A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3A9C);
		  /* 821E3A9Ch */ case    0:  		/* lwz R4, <#[R4 + 4]> */
		/* 821E3A9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000004) );
		/* 821E3A9Ch case    0:*/		return 0x821E3AA0;
	}
	return 0x821E3AA0;
} // Block from 821E3A9Ch-821E3AA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E3AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3AA0);
		  /* 821E3AA0h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821E3AA0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821E3AA0h case    0:*/		return 0x821E3AA4;
		  /* 821E3AA4h */ case    1:  		/* bc 4, CR6_EQ, -376 */
		/* 821E3AA4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E392C;  }
		/* 821E3AA4h case    1:*/		return 0x821E3AA8;
	}
	return 0x821E3AA8;
} // Block from 821E3AA0h-821E3AA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E3AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3AA8);
		  /* 821E3AA8h */ case    0:  		/* lwz R11, <#[R27 + 72]> */
		/* 821E3AA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000048) );
		/* 821E3AA8h case    0:*/		return 0x821E3AAC;
		  /* 821E3AACh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E3AACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3AACh case    1:*/		return 0x821E3AB0;
		  /* 821E3AB0h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 821E3AB0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E3ACC;  }
		/* 821E3AB0h case    2:*/		return 0x821E3AB4;
		  /* 821E3AB4h */ case    3:  		/* lwz R11, <#[R27]> */
		/* 821E3AB4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821E3AB4h case    3:*/		return 0x821E3AB8;
		  /* 821E3AB8h */ case    4:  		/* oris R11, R11, 2048 */
		/* 821E3AB8h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 821E3AB8h case    4:*/		return 0x821E3ABC;
		  /* 821E3ABCh */ case    5:  		/* stw R11, <#[R27]> */
		/* 821E3ABCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821E3ABCh case    5:*/		return 0x821E3AC0;
		  /* 821E3AC0h */ case    6:  		/* lwz R11, <#[R27 + 76]> */
		/* 821E3AC0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000004C) );
		/* 821E3AC0h case    6:*/		return 0x821E3AC4;
		  /* 821E3AC4h */ case    7:  		/* addi R11, R11, 2 */
		/* 821E3AC4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821E3AC4h case    7:*/		return 0x821E3AC8;
		  /* 821E3AC8h */ case    8:  		/* stw R11, <#[R27 + 76]> */
		/* 821E3AC8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000004C) );
		/* 821E3AC8h case    8:*/		return 0x821E3ACC;
	}
	return 0x821E3ACC;
} // Block from 821E3AA8h-821E3ACCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E3ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3ACC);
		  /* 821E3ACCh */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821E3ACCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821E3ACCh case    0:*/		return 0x821E3AD0;
		  /* 821E3AD0h */ case    1:  		/* rlwinm. R11, R11, 0, 4, 4 */
		/* 821E3AD0h case    1:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R11);
		/* 821E3AD0h case    1:*/		return 0x821E3AD4;
		  /* 821E3AD4h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 821E3AD4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E3ADC;  }
		/* 821E3AD4h case    2:*/		return 0x821E3AD8;
		  /* 821E3AD8h */ case    3:  		/* stw R16, <#[R27 + 76]> */
		/* 821E3AD8h case    3:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R27 + 0x0000004C) );
		/* 821E3AD8h case    3:*/		return 0x821E3ADC;
	}
	return 0x821E3ADC;
} // Block from 821E3ACCh-821E3ADCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E3ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3ADC);
		  /* 821E3ADCh */ case    0:  		/* lwz R30, <#[R27 + 52]> */
		/* 821E3ADCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000034) );
		/* 821E3ADCh case    0:*/		return 0x821E3AE0;
		  /* 821E3AE0h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821E3AE0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E3AE0h case    1:*/		return 0x821E3AE4;
		  /* 821E3AE4h */ case    2:  		/* bc 12, CR6_EQ, 176 */
		/* 821E3AE4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E3B94;  }
		/* 821E3AE4h case    2:*/		return 0x821E3AE8;
		  /* 821E3AE8h */ case    3:  		/* lwz R11, <#[R30 + 44]> */
		/* 821E3AE8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821E3AE8h case    3:*/		return 0x821E3AEC;
		  /* 821E3AECh */ case    4:  		/* lwz R28, <#[R30 + 28]> */
		/* 821E3AECh case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x0000001C) );
		/* 821E3AECh case    4:*/		return 0x821E3AF0;
		  /* 821E3AF0h */ case    5:  		/* lwz R11, <#[R11 + 12]> */
		/* 821E3AF0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E3AF0h case    5:*/		return 0x821E3AF4;
		  /* 821E3AF4h */ case    6:  		/* lwz R29, <#[R11 + 4]> */
		/* 821E3AF4h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000004) );
		/* 821E3AF4h case    6:*/		return 0x821E3AF8;
		  /* 821E3AF8h */ case    7:  		/* cmplwi CR6, R29, 0 */
		/* 821E3AF8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E3AF8h case    7:*/		return 0x821E3AFC;
		  /* 821E3AFCh */ case    8:  		/* bc 12, CR6_EQ, 152 */
		/* 821E3AFCh case    8:*/		if ( regs.CR[6].eq ) { return 0x821E3B94;  }
		/* 821E3AFCh case    8:*/		return 0x821E3B00;
		  /* 821E3B00h */ case    9:  		/* lwz R11, <#[R29 + 16]> */
		/* 821E3B00h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821E3B00h case    9:*/		return 0x821E3B04;
		  /* 821E3B04h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821E3B04h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3B04h case   10:*/		return 0x821E3B08;
		  /* 821E3B08h */ case   11:  		/* bc 12, CR6_EQ, 132 */
		/* 821E3B08h case   11:*/		if ( regs.CR[6].eq ) { return 0x821E3B8C;  }
		/* 821E3B08h case   11:*/		return 0x821E3B0C;
		  /* 821E3B0Ch */ case   12:  		/* rlwinm R31, R11, 0, 0, 31 */
		/* 821E3B0Ch case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R31,regs.R11);
		/* 821E3B0Ch case   12:*/		return 0x821E3B10;
		  /* 821E3B10h */ case   13:  		/* cmplw CR6, R31, R30 */
		/* 821E3B10h case   13:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 821E3B10h case   13:*/		return 0x821E3B14;
		  /* 821E3B14h */ case   14:  		/* bc 12, CR6_EQ, 120 */
		/* 821E3B14h case   14:*/		if ( regs.CR[6].eq ) { return 0x821E3B8C;  }
		/* 821E3B14h case   14:*/		return 0x821E3B18;
		  /* 821E3B18h */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E3B18h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E3B18h case   15:*/		return 0x821E3B1C;
		  /* 821E3B1Ch */ case   16:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821E3B1Ch case   16:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821E3B1Ch case   16:*/		return 0x821E3B20;
		  /* 821E3B20h */ case   17:  		/* cmplwi CR6, R11, 1 */
		/* 821E3B20h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821E3B20h case   17:*/		return 0x821E3B24;
		  /* 821E3B24h */ case   18:  		/* bc 12, CR6_LT, 16 */
		/* 821E3B24h case   18:*/		if ( regs.CR[6].lt ) { return 0x821E3B34;  }
		/* 821E3B24h case   18:*/		return 0x821E3B28;
		  /* 821E3B28h */ case   19:  		/* cmplwi CR6, R11, 102 */
		/* 821E3B28h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821E3B28h case   19:*/		return 0x821E3B2C;
		  /* 821E3B2Ch */ case   20:  		/* mr R11, R22 */
		/* 821E3B2Ch case   20:*/		regs.R11 = regs.R22;
		/* 821E3B2Ch case   20:*/		return 0x821E3B30;
		  /* 821E3B30h */ case   21:  		/* bc 4, CR6_GT, 8 */
		/* 821E3B30h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821E3B38;  }
		/* 821E3B30h case   21:*/		return 0x821E3B34;
	}
	return 0x821E3B34;
} // Block from 821E3ADCh-821E3B34h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821E3B34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3B34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3B34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3B34);
		  /* 821E3B34h */ case    0:  		/* mr R11, R16 */
		/* 821E3B34h case    0:*/		regs.R11 = regs.R16;
		/* 821E3B34h case    0:*/		return 0x821E3B38;
	}
	return 0x821E3B38;
} // Block from 821E3B34h-821E3B38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E3B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3B38);
		  /* 821E3B38h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E3B38h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E3B38h case    0:*/		return 0x821E3B3C;
		  /* 821E3B3Ch */ case    1:  		/* bc 12, CR0_EQ, 80 */
		/* 821E3B3Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821E3B8C;  }
		/* 821E3B3Ch case    1:*/		return 0x821E3B40;
		  /* 821E3B40h */ case    2:  		/* lwz R11, <#[R31 + 28]> */
		/* 821E3B40h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821E3B40h case    2:*/		return 0x821E3B44;
		  /* 821E3B44h */ case    3:  		/* cmplw CR6, R11, R28 */
		/* 821E3B44h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821E3B44h case    3:*/		return 0x821E3B48;
		  /* 821E3B48h */ case    4:  		/* bc 4, CR6_EQ, 68 */
		/* 821E3B48h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821E3B8C;  }
		/* 821E3B48h case    4:*/		return 0x821E3B4C;
		  /* 821E3B4Ch */ case    5:  		/* li R6, 0 */
		/* 821E3B4Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E3B4Ch case    5:*/		return 0x821E3B50;
		  /* 821E3B50h */ case    6:  		/* mr R5, R30 */
		/* 821E3B50h case    6:*/		regs.R5 = regs.R30;
		/* 821E3B50h case    6:*/		return 0x821E3B54;
		  /* 821E3B54h */ case    7:  		/* mr R4, R31 */
		/* 821E3B54h case    7:*/		regs.R4 = regs.R31;
		/* 821E3B54h case    7:*/		return 0x821E3B58;
		  /* 821E3B58h */ case    8:  		/* mr R3, R20 */
		/* 821E3B58h case    8:*/		regs.R3 = regs.R20;
		/* 821E3B58h case    8:*/		return 0x821E3B5C;
		  /* 821E3B5Ch */ case    9:  		/* bl 297228 */
		/* 821E3B5Ch case    9:*/		regs.LR = 0x821E3B60; return 0x8222C468;
		/* 821E3B5Ch case    9:*/		return 0x821E3B60;
		  /* 821E3B60h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E3B60h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E3B60h case   10:*/		return 0x821E3B64;
		  /* 821E3B64h */ case   11:  		/* bc 12, CR0_EQ, 40 */
		/* 821E3B64h case   11:*/		if ( regs.CR[0].eq ) { return 0x821E3B8C;  }
		/* 821E3B64h case   11:*/		return 0x821E3B68;
		  /* 821E3B68h */ case   12:  		/* li R6, 0 */
		/* 821E3B68h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E3B68h case   12:*/		return 0x821E3B6C;
		  /* 821E3B6Ch */ case   13:  		/* mr R5, R30 */
		/* 821E3B6Ch case   13:*/		regs.R5 = regs.R30;
		/* 821E3B6Ch case   13:*/		return 0x821E3B70;
		  /* 821E3B70h */ case   14:  		/* mr R4, R31 */
		/* 821E3B70h case   14:*/		regs.R4 = regs.R31;
		/* 821E3B70h case   14:*/		return 0x821E3B74;
		  /* 821E3B74h */ case   15:  		/* mr R3, R20 */
		/* 821E3B74h case   15:*/		regs.R3 = regs.R20;
		/* 821E3B74h case   15:*/		return 0x821E3B78;
		  /* 821E3B78h */ case   16:  		/* bl 303304 */
		/* 821E3B78h case   16:*/		regs.LR = 0x821E3B7C; return 0x8222DC40;
		/* 821E3B78h case   16:*/		return 0x821E3B7C;
		  /* 821E3B7Ch */ case   17:  		/* mr R5, R20 */
		/* 821E3B7Ch case   17:*/		regs.R5 = regs.R20;
		/* 821E3B7Ch case   17:*/		return 0x821E3B80;
		  /* 821E3B80h */ case   18:  		/* mr R4, R31 */
		/* 821E3B80h case   18:*/		regs.R4 = regs.R31;
		/* 821E3B80h case   18:*/		return 0x821E3B84;
		  /* 821E3B84h */ case   19:  		/* mr R3, R30 */
		/* 821E3B84h case   19:*/		regs.R3 = regs.R30;
		/* 821E3B84h case   19:*/		return 0x821E3B88;
		  /* 821E3B88h */ case   20:  		/* bl -440568 */
		/* 821E3B88h case   20:*/		regs.LR = 0x821E3B8C; return 0x82178290;
		/* 821E3B88h case   20:*/		return 0x821E3B8C;
	}
	return 0x821E3B8C;
} // Block from 821E3B38h-821E3B8Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821E3B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3B8C);
		  /* 821E3B8Ch */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 821E3B8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 821E3B8Ch case    0:*/		return 0x821E3B90;
		  /* 821E3B90h */ case    1:  		/* b -152 */
		/* 821E3B90h case    1:*/		return 0x821E3AF8;
		/* 821E3B90h case    1:*/		return 0x821E3B94;
	}
	return 0x821E3B94;
} // Block from 821E3B8Ch-821E3B94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E3B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3B94);
		  /* 821E3B94h */ case    0:  		/* addi R25, R25, 1 */
		/* 821E3B94h case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821E3B94h case    0:*/		return 0x821E3B98;
		  /* 821E3B98h */ case    1:  		/* cmplw CR6, R25, R23 */
		/* 821E3B98h case    1:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R23);
		/* 821E3B98h case    1:*/		return 0x821E3B9C;
		  /* 821E3B9Ch */ case    2:  		/* bc 12, CR6_LT, -2080 */
		/* 821E3B9Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x821E337C;  }
		/* 821E3B9Ch case    2:*/		return 0x821E3BA0;
	}
	return 0x821E3BA0;
} // Block from 821E3B94h-821E3BA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E3BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3BA0);
		  /* 821E3BA0h */ case    0:  		/* lwz R11, <#[R20 + 620]> */
		/* 821E3BA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E3BA0h case    0:*/		return 0x821E3BA4;
		  /* 821E3BA4h */ case    1:  		/* addi R26, R26, 68 */
		/* 821E3BA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x44);
		/* 821E3BA4h case    1:*/		return 0x821E3BA8;
		  /* 821E3BA8h */ case    2:  		/* lwz R31, <#[R20 + 616]> */
		/* 821E3BA8h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R20 + 0x00000268) );
		/* 821E3BA8h case    2:*/		return 0x821E3BAC;
		  /* 821E3BACh */ case    3:  		/* mulli R11, R11, 68 */
		/* 821E3BACh case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x44);
		/* 821E3BACh case    3:*/		return 0x821E3BB0;
		  /* 821E3BB0h */ case    4:  		/* add R10, R11, R31 */
		/* 821E3BB0h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R31);
		/* 821E3BB0h case    4:*/		return 0x821E3BB4;
		  /* 821E3BB4h */ case    5:  		/* cmplw CR6, R26, R10 */
		/* 821E3BB4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R10);
		/* 821E3BB4h case    5:*/		return 0x821E3BB8;
		  /* 821E3BB8h */ case    6:  		/* bc 12, CR6_LT, -2256 */
		/* 821E3BB8h case    6:*/		if ( regs.CR[6].lt ) { return 0x821E32E8;  }
		/* 821E3BB8h case    6:*/		return 0x821E3BBC;
	}
	return 0x821E3BBC;
} // Block from 821E3BA0h-821E3BBCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E3BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3BBC);
		  /* 821E3BBCh */ case    0:  		/* mr R25, R16 */
		/* 821E3BBCh case    0:*/		regs.R25 = regs.R16;
		/* 821E3BBCh case    0:*/		return 0x821E3BC0;
		  /* 821E3BC0h */ case    1:  		/* stw R16, <#[R1 + 136]> */
		/* 821E3BC0h case    1:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000088) );
		/* 821E3BC0h case    1:*/		return 0x821E3BC4;
		  /* 821E3BC4h */ case    2:  		/* mr R30, R31 */
		/* 821E3BC4h case    2:*/		regs.R30 = regs.R31;
		/* 821E3BC4h case    2:*/		return 0x821E3BC8;
		  /* 821E3BC8h */ case    3:  		/* cmplw CR6, R31, R10 */
		/* 821E3BC8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821E3BC8h case    3:*/		return 0x821E3BCC;
		  /* 821E3BCCh */ case    4:  		/* bc 4, CR6_LT, 2944 */
		/* 821E3BCCh case    4:*/		if ( !regs.CR[6].lt ) { return 0x821E474C;  }
		/* 821E3BCCh case    4:*/		return 0x821E3BD0;
		  /* 821E3BD0h */ case    5:  		/* lis R11, 3 */
		/* 821E3BD0h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0x3);
		/* 821E3BD0h case    5:*/		return 0x821E3BD4;
		  /* 821E3BD4h */ case    6:  		/* ori R24, R11, 64512 */
		/* 821E3BD4h case    6:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R11,0xFC00);
		/* 821E3BD4h case    6:*/		return 0x821E3BD8;
		  /* 821E3BD8h */ case    7:  		/* lwz R11, <#[R30 + 36]> */
		/* 821E3BD8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E3BD8h case    7:*/		return 0x821E3BDC;
		  /* 821E3BDCh */ case    8:  		/* rlwinm. R11, R11, 0, 4, 4 */
		/* 821E3BDCh case    8:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R11);
		/* 821E3BDCh case    8:*/		return 0x821E3BE0;
		  /* 821E3BE0h */ case    9:  		/* bc 4, CR0_EQ, 16 */
		/* 821E3BE0h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821E3BF0;  }
		/* 821E3BE0h case    9:*/		return 0x821E3BE4;
		  /* 821E3BE4h */ case   10:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E3BE4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3BE4h case   10:*/		return 0x821E3BE8;
		  /* 821E3BE8h */ case   11:  		/* ori R11, R11, 1 */
		/* 821E3BE8h case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E3BE8h case   11:*/		return 0x821E3BEC;
		  /* 821E3BECh */ case   12:  		/* stw R11, <#[R30 + 60]> */
		/* 821E3BECh case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3BECh case   12:*/		return 0x821E3BF0;
	}
	return 0x821E3BF0;
} // Block from 821E3BBCh-821E3BF0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E3BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3BF0);
		  /* 821E3BF0h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 821E3BF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E3BF0h case    0:*/		return 0x821E3BF4;
		  /* 821E3BF4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E3BF4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3BF4h case    1:*/		return 0x821E3BF8;
		  /* 821E3BF8h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 821E3BF8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E3C08;  }
		/* 821E3BF8h case    2:*/		return 0x821E3BFC;
		  /* 821E3BFCh */ case    3:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E3BFCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3BFCh case    3:*/		return 0x821E3C00;
		  /* 821E3C00h */ case    4:  		/* ori R11, R11, 256 */
		/* 821E3C00h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821E3C00h case    4:*/		return 0x821E3C04;
		  /* 821E3C04h */ case    5:  		/* stw R11, <#[R30 + 60]> */
		/* 821E3C04h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3C04h case    5:*/		return 0x821E3C08;
	}
	return 0x821E3C08;
} // Block from 821E3BF0h-821E3C08h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E3C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3C08);
		  /* 821E3C08h */ case    0:  		/* lwz R10, <#[R30 + 36]> */
		/* 821E3C08h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000024) );
		/* 821E3C08h case    0:*/		return 0x821E3C0C;
		  /* 821E3C0Ch */ case    1:  		/* mr R8, R16 */
		/* 821E3C0Ch case    1:*/		regs.R8 = regs.R16;
		/* 821E3C0Ch case    1:*/		return 0x821E3C10;
		  /* 821E3C10h */ case    2:  		/* rlwinm. R11, R10, 0, 23, 30 */
		/* 821E3C10h case    2:*/		cpu::op::rlwinm<1,0,23,30>(regs,&regs.R11,regs.R10);
		/* 821E3C10h case    2:*/		return 0x821E3C14;
		  /* 821E3C14h */ case    3:  		/* bc 12, CR0_EQ, 160 */
		/* 821E3C14h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E3CB4;  }
		/* 821E3C14h case    3:*/		return 0x821E3C18;
		  /* 821E3C18h */ case    4:  		/* mr R9, R16 */
		/* 821E3C18h case    4:*/		regs.R9 = regs.R16;
		/* 821E3C18h case    4:*/		return 0x821E3C1C;
		  /* 821E3C1Ch */ case    5:  		/* lwz R11, <#[R30 + 44]> */
		/* 821E3C1Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821E3C1Ch case    5:*/		return 0x821E3C20;
		  /* 821E3C20h */ case    6:  		/* add R11, R11, R9 */
		/* 821E3C20h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E3C20h case    6:*/		return 0x821E3C24;
		  /* 821E3C24h */ case    7:  		/* lwz R7, <#[R11 + 48]> */
		/* 821E3C24h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000030) );
		/* 821E3C24h case    7:*/		return 0x821E3C28;
		  /* 821E3C28h */ case    8:  		/* lwz R7, <#[R7 + 8]> */
		/* 821E3C28h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 821E3C28h case    8:*/		return 0x821E3C2C;
		  /* 821E3C2Ch */ case    9:  		/* rlwinm R7, R7, 0, 18, 24 */
		/* 821E3C2Ch case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R7,regs.R7);
		/* 821E3C2Ch case    9:*/		return 0x821E3C30;
		  /* 821E3C30h */ case   10:  		/* cmplwi CR6, R7, 14720 */
		/* 821E3C30h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00003980);
		/* 821E3C30h case   10:*/		return 0x821E3C34;
		  /* 821E3C34h */ case   11:  		/* bc 12, CR6_EQ, 60 */
		/* 821E3C34h case   11:*/		if ( regs.CR[6].eq ) { return 0x821E3C70;  }
		/* 821E3C34h case   11:*/		return 0x821E3C38;
		  /* 821E3C38h */ case   12:  		/* lwz R7, <#[R11]> */
		/* 821E3C38h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821E3C38h case   12:*/		return 0x821E3C3C;
		  /* 821E3C3Ch */ case   13:  		/* rlwinm. R7, R7, 0, 21, 21 */
		/* 821E3C3Ch case   13:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R7,regs.R7);
		/* 821E3C3Ch case   13:*/		return 0x821E3C40;
		  /* 821E3C40h */ case   14:  		/* bc 4, CR0_EQ, 92 */
		/* 821E3C40h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821E3C9C;  }
		/* 821E3C40h case   14:*/		return 0x821E3C44;
		  /* 821E3C44h */ case   15:  		/* lwz R7, <#[R11 + 72]> */
		/* 821E3C44h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000048) );
		/* 821E3C44h case   15:*/		return 0x821E3C48;
		  /* 821E3C48h */ case   16:  		/* cmplwi CR6, R7, 0 */
		/* 821E3C48h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821E3C48h case   16:*/		return 0x821E3C4C;
		  /* 821E3C4Ch */ case   17:  		/* bc 4, CR6_EQ, 36 */
		/* 821E3C4Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x821E3C70;  }
		/* 821E3C4Ch case   17:*/		return 0x821E3C50;
		  /* 821E3C50h */ case   18:  		/* rlwinm. R10, R10, 0, 7, 21 */
		/* 821E3C50h case   18:*/		cpu::op::rlwinm<1,0,7,21>(regs,&regs.R10,regs.R10);
		/* 821E3C50h case   18:*/		return 0x821E3C54;
		  /* 821E3C54h */ case   19:  		/* bc 12, CR0_EQ, 28 */
		/* 821E3C54h case   19:*/		if ( regs.CR[0].eq ) { return 0x821E3C70;  }
		/* 821E3C54h case   19:*/		return 0x821E3C58;
		  /* 821E3C58h */ case   20:  		/* lwz R10, <#[R11 + 76]> */
		/* 821E3C58h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000004C) );
		/* 821E3C58h case   20:*/		return 0x821E3C5C;
		  /* 821E3C5Ch */ case   21:  		/* lwz R7, <#[R30 + 48]> */
		/* 821E3C5Ch case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000030) );
		/* 821E3C5Ch case   21:*/		return 0x821E3C60;
		  /* 821E3C60h */ case   22:  		/* cmplw CR6, R10, R7 */
		/* 821E3C60h case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821E3C60h case   22:*/		return 0x821E3C64;
		  /* 821E3C64h */ case   23:  		/* bc 4, CR6_GT, 12 */
		/* 821E3C64h case   23:*/		if ( !regs.CR[6].gt ) { return 0x821E3C70;  }
		/* 821E3C64h case   23:*/		return 0x821E3C68;
		  /* 821E3C68h */ case   24:  		/* stw R10, <#[R30 + 48]> */
		/* 821E3C68h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 821E3C68h case   24:*/		return 0x821E3C6C;
		  /* 821E3C6Ch */ case   25:  		/* stw R11, <#[R30 + 52]> */
		/* 821E3C6Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E3C6Ch case   25:*/		return 0x821E3C70;
	}
	return 0x821E3C70;
} // Block from 821E3C08h-821E3C70h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821E3C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3C70);
		  /* 821E3C70h */ case    0:  		/* lwz R10, <#[R30 + 36]> */
		/* 821E3C70h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000024) );
		/* 821E3C70h case    0:*/		return 0x821E3C74;
		  /* 821E3C74h */ case    1:  		/* addi R8, R8, 1 */
		/* 821E3C74h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821E3C74h case    1:*/		return 0x821E3C78;
		  /* 821E3C78h */ case    2:  		/* addi R9, R9, 88 */
		/* 821E3C78h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x58);
		/* 821E3C78h case    2:*/		return 0x821E3C7C;
		  /* 821E3C7Ch */ case    3:  		/* rlwinm R11, R10, 31, 24, 31 */
		/* 821E3C7Ch case    3:*/		cpu::op::rlwinm<0,31,24,31>(regs,&regs.R11,regs.R10);
		/* 821E3C7Ch case    3:*/		return 0x821E3C80;
		  /* 821E3C80h */ case    4:  		/* cmplw CR6, R8, R11 */
		/* 821E3C80h case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821E3C80h case    4:*/		return 0x821E3C84;
		  /* 821E3C84h */ case    5:  		/* bc 12, CR6_LT, -104 */
		/* 821E3C84h case    5:*/		if ( regs.CR[6].lt ) { return 0x821E3C1C;  }
		/* 821E3C84h case    5:*/		return 0x821E3C88;
		  /* 821E3C88h */ case    6:  		/* b 44 */
		/* 821E3C88h case    6:*/		return 0x821E3CB4;
		/* 821E3C88h case    6:*/		return 0x821E3C8C;
	}
	return 0x821E3C8C;
} // Block from 821E3C70h-821E3C8Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E3C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3C8C);
		  /* 821E3C8Ch */ case    0:  		/* li R4, 0 */
		/* 821E3C8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E3C8Ch case    0:*/		return 0x821E3C90;
		  /* 821E3C90h */ case    1:  		/* mr R3, R20 */
		/* 821E3C90h case    1:*/		regs.R3 = regs.R20;
		/* 821E3C90h case    1:*/		return 0x821E3C94;
		  /* 821E3C94h */ case    2:  		/* bl -520100 */
		/* 821E3C94h case    2:*/		regs.LR = 0x821E3C98; return 0x82164CF0;
		/* 821E3C94h case    2:*/		return 0x821E3C98;
		  /* 821E3C98h */ case    3:  		/* b -15604 */
		/* 821E3C98h case    3:*/		return 0x821DFFA4;
		/* 821E3C98h case    3:*/		return 0x821E3C9C;
	}
	return 0x821E3C9C;
} // Block from 821E3C8Ch-821E3C9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E3C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3C9C);
		  /* 821E3C9Ch */ case    0:  		/* lwz R10, <#[R11 + 76]> */
		/* 821E3C9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000004C) );
		/* 821E3C9Ch case    0:*/		return 0x821E3CA0;
		  /* 821E3CA0h */ case    1:  		/* stw R10, <#[R30 + 48]> */
		/* 821E3CA0h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 821E3CA0h case    1:*/		return 0x821E3CA4;
		  /* 821E3CA4h */ case    2:  		/* stw R11, <#[R30 + 52]> */
		/* 821E3CA4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E3CA4h case    2:*/		return 0x821E3CA8;
		  /* 821E3CA8h */ case    3:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E3CA8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3CA8h case    3:*/		return 0x821E3CAC;
		  /* 821E3CACh */ case    4:  		/* ori R11, R11, 128 */
		/* 821E3CACh case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821E3CACh case    4:*/		return 0x821E3CB0;
		  /* 821E3CB0h */ case    5:  		/* stw R11, <#[R30 + 60]> */
		/* 821E3CB0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3CB0h case    5:*/		return 0x821E3CB4;
	}
	return 0x821E3CB4;
} // Block from 821E3C9Ch-821E3CB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E3CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3CB4);
		  /* 821E3CB4h */ case    0:  		/* lwz R11, <#[R30 + 56]> */
		/* 821E3CB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 821E3CB4h case    0:*/		return 0x821E3CB8;
		  /* 821E3CB8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E3CB8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3CB8h case    1:*/		return 0x821E3CBC;
		  /* 821E3CBCh */ case    2:  		/* bc 12, CR6_EQ, 216 */
		/* 821E3CBCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821E3D94;  }
		/* 821E3CBCh case    2:*/		return 0x821E3CC0;
		  /* 821E3CC0h */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E3CC0h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E3CC0h case    3:*/		return 0x821E3CC4;
		  /* 821E3CC4h */ case    4:  		/* lwz R11, <#[R11 + 80]> */
		/* 821E3CC4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821E3CC4h case    4:*/		return 0x821E3CC8;
		  /* 821E3CC8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E3CC8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3CC8h case    5:*/		return 0x821E3CCC;
		  /* 821E3CCCh */ case    6:  		/* bc 12, CR6_EQ, 200 */
		/* 821E3CCCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821E3D94;  }
		/* 821E3CCCh case    6:*/		return 0x821E3CD0;
		  /* 821E3CD0h */ case    7:  		/* lwz R11, <#[R30 + 36]> */
		/* 821E3CD0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E3CD0h case    7:*/		return 0x821E3CD4;
		  /* 821E3CD4h */ case    8:  		/* mr R7, R16 */
		/* 821E3CD4h case    8:*/		regs.R7 = regs.R16;
		/* 821E3CD4h case    8:*/		return 0x821E3CD8;
		  /* 821E3CD8h */ case    9:  		/* rlwinm. R6, R11, 31, 24, 31 */
		/* 821E3CD8h case    9:*/		cpu::op::rlwinm<1,31,24,31>(regs,&regs.R6,regs.R11);
		/* 821E3CD8h case    9:*/		return 0x821E3CDC;
		  /* 821E3CDCh */ case   10:  		/* bc 12, CR0_EQ, 184 */
		/* 821E3CDCh case   10:*/		if ( regs.CR[0].eq ) { return 0x821E3D94;  }
		/* 821E3CDCh case   10:*/		return 0x821E3CE0;
		  /* 821E3CE0h */ case   11:  		/* lwz R11, <#[R30 + 44]> */
		/* 821E3CE0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821E3CE0h case   11:*/		return 0x821E3CE4;
		  /* 821E3CE4h */ case   12:  		/* addi R8, R11, 48 */
		/* 821E3CE4h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x30);
		/* 821E3CE4h case   12:*/		return 0x821E3CE8;
		  /* 821E3CE8h */ case   13:  		/* lwz R11, <#[R8]> */
		/* 821E3CE8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821E3CE8h case   13:*/		return 0x821E3CEC;
		  /* 821E3CECh */ case   14:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E3CECh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E3CECh case   14:*/		return 0x821E3CF0;
		  /* 821E3CF0h */ case   15:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821E3CF0h case   15:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821E3CF0h case   15:*/		return 0x821E3CF4;
		  /* 821E3CF4h */ case   16:  		/* cmplwi CR6, R10, 14720 */
		/* 821E3CF4h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003980);
		/* 821E3CF4h case   16:*/		return 0x821E3CF8;
		  /* 821E3CF8h */ case   17:  		/* bc 12, CR6_EQ, 124 */
		/* 821E3CF8h case   17:*/		if ( regs.CR[6].eq ) { return 0x821E3D74;  }
		/* 821E3CF8h case   17:*/		return 0x821E3CFC;
		  /* 821E3CFCh */ case   18:  		/* lwz R10, <#[R11]> */
		/* 821E3CFCh case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E3CFCh case   18:*/		return 0x821E3D00;
		  /* 821E3D00h */ case   19:  		/* mr R9, R16 */
		/* 821E3D00h case   19:*/		regs.R9 = regs.R16;
		/* 821E3D00h case   19:*/		return 0x821E3D04;
		  /* 821E3D04h */ case   20:  		/* cmplwi CR6, R10, 0 */
		/* 821E3D04h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E3D04h case   20:*/		return 0x821E3D08;
		  /* 821E3D08h */ case   21:  		/* bc 12, CR6_EQ, 92 */
		/* 821E3D08h case   21:*/		if ( regs.CR[6].eq ) { return 0x821E3D64;  }
		/* 821E3D08h case   21:*/		return 0x821E3D0C;
		  /* 821E3D0Ch */ case   22:  		/* lwz R11, <#[R10 + 12]> */
		/* 821E3D0Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 821E3D0Ch case   22:*/		return 0x821E3D10;
		  /* 821E3D10h */ case   23:  		/* lwz R5, <#[R11 + 8]> */
		/* 821E3D10h case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000008) );
		/* 821E3D10h case   23:*/		return 0x821E3D14;
		  /* 821E3D14h */ case   24:  		/* lwz R4, <#[R11 + 28]> */
		/* 821E3D14h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000001C) );
		/* 821E3D14h case   24:*/		return 0x821E3D18;
		  /* 821E3D18h */ case   25:  		/* rlwinm R5, R5, 0, 18, 24 */
		/* 821E3D18h case   25:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R5,regs.R5);
		/* 821E3D18h case   25:*/		return 0x821E3D1C;
		  /* 821E3D1Ch */ case   26:  		/* cmplwi CR6, R5, 14848 */
		/* 821E3D1Ch case   26:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00003A00);
		/* 821E3D1Ch case   26:*/		return 0x821E3D20;
		  /* 821E3D20h */ case   27:  		/* lwz R5, <#[R20 + 616]> */
		/* 821E3D20h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R20 + 0x00000268) );
		/* 821E3D20h case   27:*/		return 0x821E3D24;
		  /* 821E3D24h */ case   28:  		/* subf R11, R5, R30 */
		/* 821E3D24h case   28:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R5,regs.R30);
		/* 821E3D24h case   28:*/		return 0x821E3D28;
		  /* 821E3D28h */ case   29:  		/* divw R5, R11, R21 */
		/* 821E3D28h case   29:*/		cpu::op::divw<0>(regs,&regs.R5,regs.R11,regs.R21);
		/* 821E3D28h case   29:*/		return 0x821E3D2C;
		  /* 821E3D2Ch */ case   30:  		/* rlwinm R11, R5, 27, 5, 31 */
		/* 821E3D2Ch case   30:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R5);
		/* 821E3D2Ch case   30:*/		return 0x821E3D30;
		  /* 821E3D30h */ case   31:  		/* rlwinm R5, R5, 0, 27, 31 */
		/* 821E3D30h case   31:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R5);
		/* 821E3D30h case   31:*/		return 0x821E3D34;
		  /* 821E3D34h */ case   32:  		/* addi R11, R11, 21 */
		/* 821E3D34h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E3D34h case   32:*/		return 0x821E3D38;
		  /* 821E3D38h */ case   33:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E3D38h case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E3D38h case   33:*/		return 0x821E3D3C;
		  /* 821E3D3Ch */ case   34:  		/* lwzx R11, <#[R11 + R4]> */
		/* 821E3D3Ch case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 821E3D3Ch case   34:*/		return 0x821E3D40;
		  /* 821E3D40h */ case   35:  		/* srw R11, R11, R5 */
		/* 821E3D40h case   35:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 821E3D40h case   35:*/		return 0x821E3D44;
		  /* 821E3D44h */ case   36:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E3D44h case   36:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E3D44h case   36:*/		return 0x821E3D48;
		  /* 821E3D48h */ case   37:  		/* bc 4, CR6_EQ, 16 */
		/* 821E3D48h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821E3D58;  }
		/* 821E3D48h case   37:*/		return 0x821E3D4C;
		  /* 821E3D4Ch */ case   38:  		/* bc 4, CR0_EQ, 24 */
		/* 821E3D4Ch case   38:*/		if ( !regs.CR[0].eq ) { return 0x821E3D64;  }
		/* 821E3D4Ch case   38:*/		return 0x821E3D50;
		  /* 821E3D50h */ case   39:  		/* mr R9, R22 */
		/* 821E3D50h case   39:*/		regs.R9 = regs.R22;
		/* 821E3D50h case   39:*/		return 0x821E3D54;
		  /* 821E3D54h */ case   40:  		/* b 8 */
		/* 821E3D54h case   40:*/		return 0x821E3D5C;
		/* 821E3D54h case   40:*/		return 0x821E3D58;
	}
	return 0x821E3D58;
} // Block from 821E3CB4h-821E3D58h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821E3D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3D58);
		  /* 821E3D58h */ case    0:  		/* bc 12, CR0_EQ, 12 */
		/* 821E3D58h case    0:*/		if ( regs.CR[0].eq ) { return 0x821E3D64;  }
		/* 821E3D58h case    0:*/		return 0x821E3D5C;
	}
	return 0x821E3D5C;
} // Block from 821E3D58h-821E3D5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E3D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3D5C);
		  /* 821E3D5Ch */ case    0:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E3D5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E3D5Ch case    0:*/		return 0x821E3D60;
		  /* 821E3D60h */ case    1:  		/* b -92 */
		/* 821E3D60h case    1:*/		return 0x821E3D04;
		/* 821E3D60h case    1:*/		return 0x821E3D64;
	}
	return 0x821E3D64;
} // Block from 821E3D5Ch-821E3D64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E3D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3D64);
		  /* 821E3D64h */ case    0:  		/* rlwinm. R11, R9, 0, 24, 31 */
		/* 821E3D64h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R9);
		/* 821E3D64h case    0:*/		return 0x821E3D68;
		  /* 821E3D68h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821E3D68h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E3D74;  }
		/* 821E3D68h case    1:*/		return 0x821E3D6C;
		  /* 821E3D6Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821E3D6Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E3D6Ch case    2:*/		return 0x821E3D70;
		  /* 821E3D70h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821E3D70h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E3D88;  }
		/* 821E3D70h case    3:*/		return 0x821E3D74;
	}
	return 0x821E3D74;
} // Block from 821E3D64h-821E3D74h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E3D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3D74);
		  /* 821E3D74h */ case    0:  		/* addi R7, R7, 1 */
		/* 821E3D74h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821E3D74h case    0:*/		return 0x821E3D78;
		  /* 821E3D78h */ case    1:  		/* addi R8, R8, 88 */
		/* 821E3D78h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x58);
		/* 821E3D78h case    1:*/		return 0x821E3D7C;
		  /* 821E3D7Ch */ case    2:  		/* cmplw CR6, R7, R6 */
		/* 821E3D7Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 821E3D7Ch case    2:*/		return 0x821E3D80;
		  /* 821E3D80h */ case    3:  		/* bc 12, CR6_LT, -152 */
		/* 821E3D80h case    3:*/		if ( regs.CR[6].lt ) { return 0x821E3CE8;  }
		/* 821E3D80h case    3:*/		return 0x821E3D84;
		  /* 821E3D84h */ case    4:  		/* b 16 */
		/* 821E3D84h case    4:*/		return 0x821E3D94;
		/* 821E3D84h case    4:*/		return 0x821E3D88;
	}
	return 0x821E3D88;
} // Block from 821E3D74h-821E3D88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E3D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3D88);
		  /* 821E3D88h */ case    0:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E3D88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3D88h case    0:*/		return 0x821E3D8C;
		  /* 821E3D8Ch */ case    1:  		/* ori R11, R11, 2 */
		/* 821E3D8Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821E3D8Ch case    1:*/		return 0x821E3D90;
		  /* 821E3D90h */ case    2:  		/* stw R11, <#[R30 + 60]> */
		/* 821E3D90h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3D90h case    2:*/		return 0x821E3D94;
	}
	return 0x821E3D94;
} // Block from 821E3D88h-821E3D94h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E3D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3D94);
		  /* 821E3D94h */ case    0:  		/* lwz R8, <#[R30 + 40]> */
		/* 821E3D94h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000028) );
		/* 821E3D94h case    0:*/		return 0x821E3D98;
		  /* 821E3D98h */ case    1:  		/* b 132 */
		/* 821E3D98h case    1:*/		return 0x821E3E1C;
		/* 821E3D98h case    1:*/		return 0x821E3D9C;
		  /* 821E3D9Ch */ case    2:  		/* lwz R11, <#[R8]> */
		/* 821E3D9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821E3D9Ch case    2:*/		return 0x821E3DA0;
		  /* 821E3DA0h */ case    3:  		/* lwz R9, <#[R11 + 12]> */
		/* 821E3DA0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E3DA0h case    3:*/		return 0x821E3DA4;
		  /* 821E3DA4h */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 821E3DA4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E3DA4h case    4:*/		return 0x821E3DA8;
		  /* 821E3DA8h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 821E3DA8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E3DE4;  }
		/* 821E3DA8h case    5:*/		return 0x821E3DAC;
		  /* 821E3DACh */ case    6:  		/* lwz R10, <#[R20 + 616]> */
		/* 821E3DACh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000268) );
		/* 821E3DACh case    6:*/		return 0x821E3DB0;
		  /* 821E3DB0h */ case    7:  		/* lwz R11, <#[R9]> */
		/* 821E3DB0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821E3DB0h case    7:*/		return 0x821E3DB4;
		  /* 821E3DB4h */ case    8:  		/* subf R10, R10, R30 */
		/* 821E3DB4h case    8:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 821E3DB4h case    8:*/		return 0x821E3DB8;
		  /* 821E3DB8h */ case    9:  		/* divw R7, R10, R21 */
		/* 821E3DB8h case    9:*/		cpu::op::divw<0>(regs,&regs.R7,regs.R10,regs.R21);
		/* 821E3DB8h case    9:*/		return 0x821E3DBC;
		  /* 821E3DBCh */ case   10:  		/* rlwinm R10, R7, 27, 5, 31 */
		/* 821E3DBCh case   10:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R7);
		/* 821E3DBCh case   10:*/		return 0x821E3DC0;
		  /* 821E3DC0h */ case   11:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 821E3DC0h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 821E3DC0h case   11:*/		return 0x821E3DC4;
		  /* 821E3DC4h */ case   12:  		/* addi R10, R10, 21 */
		/* 821E3DC4h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821E3DC4h case   12:*/		return 0x821E3DC8;
		  /* 821E3DC8h */ case   13:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E3DC8h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E3DC8h case   13:*/		return 0x821E3DCC;
		  /* 821E3DCCh */ case   14:  		/* lwzx R10, <#[R10 + R11]> */
		/* 821E3DCCh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E3DCCh case   14:*/		return 0x821E3DD0;
		  /* 821E3DD0h */ case   15:  		/* srw R10, R10, R7 */
		/* 821E3DD0h case   15:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 821E3DD0h case   15:*/		return 0x821E3DD4;
		  /* 821E3DD4h */ case   16:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E3DD4h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E3DD4h case   16:*/		return 0x821E3DD8;
		  /* 821E3DD8h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 821E3DD8h case   17:*/		if ( regs.CR[0].eq ) { return 0x821E3DE8;  }
		/* 821E3DD8h case   17:*/		return 0x821E3DDC;
		  /* 821E3DDCh */ case   18:  		/* lwz R9, <#[R9 + 8]> */
		/* 821E3DDCh case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821E3DDCh case   18:*/		return 0x821E3DE0;
		  /* 821E3DE0h */ case   19:  		/* b -60 */
		/* 821E3DE0h case   19:*/		return 0x821E3DA4;
		/* 821E3DE0h case   19:*/		return 0x821E3DE4;
	}
	return 0x821E3DE4;
} // Block from 821E3D94h-821E3DE4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821E3DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3DE4);
		  /* 821E3DE4h */ case    0:  		/* mr R11, R16 */
		/* 821E3DE4h case    0:*/		regs.R11 = regs.R16;
		/* 821E3DE4h case    0:*/		return 0x821E3DE8;
	}
	return 0x821E3DE8;
} // Block from 821E3DE4h-821E3DE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E3DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3DE8);
		  /* 821E3DE8h */ case    0:  		/* lwz R11, <#[R11 + 48]> */
		/* 821E3DE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821E3DE8h case    0:*/		return 0x821E3DEC;
		  /* 821E3DECh */ case    1:  		/* lwz R10, <#[R30 + 4]> */
		/* 821E3DECh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821E3DECh case    1:*/		return 0x821E3DF0;
		  /* 821E3DF0h */ case    2:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821E3DF0h case    2:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821E3DF0h case    2:*/		return 0x821E3DF4;
		  /* 821E3DF4h */ case    3:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821E3DF4h case    3:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821E3DF4h case    3:*/		return 0x821E3DF8;
		  /* 821E3DF8h */ case    4:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821E3DF8h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821E3DF8h case    4:*/		return 0x821E3DFC;
		  /* 821E3DFCh */ case    5:  		/* addi R11, R11, 1 */
		/* 821E3DFCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E3DFCh case    5:*/		return 0x821E3E00;
		  /* 821E3E00h */ case    6:  		/* lwz R10, <#[R10 + 40]> */
		/* 821E3E00h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 821E3E00h case    6:*/		return 0x821E3E04;
		  /* 821E3E04h */ case    7:  		/* slw R9, R22, R9 */
		/* 821E3E04h case    7:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R22,regs.R9);
		/* 821E3E04h case    7:*/		return 0x821E3E08;
		  /* 821E3E08h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E3E08h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E3E08h case    8:*/		return 0x821E3E0C;
		  /* 821E3E0Ch */ case    9:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821E3E0Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821E3E0Ch case    9:*/		return 0x821E3E10;
		  /* 821E3E10h */ case   10:  		/* and. R11, R11, R9 */
		/* 821E3E10h case   10:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E3E10h case   10:*/		return 0x821E3E14;
		  /* 821E3E14h */ case   11:  		/* bc 4, CR0_EQ, 20 */
		/* 821E3E14h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821E3E28;  }
		/* 821E3E14h case   11:*/		return 0x821E3E18;
		  /* 821E3E18h */ case   12:  		/* lwz R8, <#[R8 + 4]> */
		/* 821E3E18h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 821E3E18h case   12:*/		return 0x821E3E1C;
	}
	return 0x821E3E1C;
} // Block from 821E3DE8h-821E3E1Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E3E1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3E1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3E1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3E1C);
		  /* 821E3E1Ch */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 821E3E1Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821E3E1Ch case    0:*/		return 0x821E3E20;
		  /* 821E3E20h */ case    1:  		/* bc 4, CR6_EQ, -132 */
		/* 821E3E20h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E3D9C;  }
		/* 821E3E20h case    1:*/		return 0x821E3E24;
		  /* 821E3E24h */ case    2:  		/* b 16 */
		/* 821E3E24h case    2:*/		return 0x821E3E34;
		/* 821E3E24h case    2:*/		return 0x821E3E28;
	}
	return 0x821E3E28;
} // Block from 821E3E1Ch-821E3E28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E3E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3E28);
		  /* 821E3E28h */ case    0:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E3E28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3E28h case    0:*/		return 0x821E3E2C;
		  /* 821E3E2Ch */ case    1:  		/* ori R11, R11, 256 */
		/* 821E3E2Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821E3E2Ch case    1:*/		return 0x821E3E30;
		  /* 821E3E30h */ case    2:  		/* stw R11, <#[R30 + 60]> */
		/* 821E3E30h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3E30h case    2:*/		return 0x821E3E34;
	}
	return 0x821E3E34;
} // Block from 821E3E28h-821E3E34h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E3E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3E34);
		  /* 821E3E34h */ case    0:  		/* lwz R11, <#[R30 + 48]> */
		/* 821E3E34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821E3E34h case    0:*/		return 0x821E3E38;
		  /* 821E3E38h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E3E38h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3E38h case    1:*/		return 0x821E3E3C;
		  /* 821E3E3Ch */ case    2:  		/* bc 4, CR6_EQ, 244 */
		/* 821E3E3Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E3F30;  }
		/* 821E3E3Ch case    2:*/		return 0x821E3E40;
		  /* 821E3E40h */ case    3:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E3E40h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3E40h case    3:*/		return 0x821E3E44;
		  /* 821E3E44h */ case    4:  		/* rlwinm. R10, R11, 0, 23, 23 */
		/* 821E3E44h case    4:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R11);
		/* 821E3E44h case    4:*/		return 0x821E3E48;
		  /* 821E3E48h */ case    5:  		/* bc 4, CR0_EQ, 232 */
		/* 821E3E48h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821E3F30;  }
		/* 821E3E48h case    5:*/		return 0x821E3E4C;
		  /* 821E3E4Ch */ case    6:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 821E3E4Ch case    6:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 821E3E4Ch case    6:*/		return 0x821E3E50;
		  /* 821E3E50h */ case    7:  		/* bc 4, CR0_EQ, 224 */
		/* 821E3E50h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821E3F30;  }
		/* 821E3E50h case    7:*/		return 0x821E3E54;
		  /* 821E3E54h */ case    8:  		/* lwz R10, <#[R30 + 36]> */
		/* 821E3E54h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000024) );
		/* 821E3E54h case    8:*/		return 0x821E3E58;
		  /* 821E3E58h */ case    9:  		/* mr R8, R16 */
		/* 821E3E58h case    9:*/		regs.R8 = regs.R16;
		/* 821E3E58h case    9:*/		return 0x821E3E5C;
		  /* 821E3E5Ch */ case   10:  		/* rlwinm. R11, R10, 31, 24, 31 */
		/* 821E3E5Ch case   10:*/		cpu::op::rlwinm<1,31,24,31>(regs,&regs.R11,regs.R10);
		/* 821E3E5Ch case   10:*/		return 0x821E3E60;
		  /* 821E3E60h */ case   11:  		/* bc 12, CR0_EQ, 96 */
		/* 821E3E60h case   11:*/		if ( regs.CR[0].eq ) { return 0x821E3EC0;  }
		/* 821E3E60h case   11:*/		return 0x821E3E64;
		  /* 821E3E64h */ case   12:  		/* mr R9, R16 */
		/* 821E3E64h case   12:*/		regs.R9 = regs.R16;
		/* 821E3E64h case   12:*/		return 0x821E3E68;
		  /* 821E3E68h */ case   13:  		/* lwz R11, <#[R30 + 44]> */
		/* 821E3E68h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821E3E68h case   13:*/		return 0x821E3E6C;
		  /* 821E3E6Ch */ case   14:  		/* add R11, R9, R11 */
		/* 821E3E6Ch case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821E3E6Ch case   14:*/		return 0x821E3E70;
		  /* 821E3E70h */ case   15:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E3E70h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E3E70h case   15:*/		return 0x821E3E74;
		  /* 821E3E74h */ case   16:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E3E74h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E3E74h case   16:*/		return 0x821E3E78;
		  /* 821E3E78h */ case   17:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821E3E78h case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821E3E78h case   17:*/		return 0x821E3E7C;
		  /* 821E3E7Ch */ case   18:  		/* cmplwi CR6, R10, 14720 */
		/* 821E3E7Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003980);
		/* 821E3E7Ch case   18:*/		return 0x821E3E80;
		  /* 821E3E80h */ case   19:  		/* bc 12, CR6_EQ, 40 */
		/* 821E3E80h case   19:*/		if ( regs.CR[6].eq ) { return 0x821E3EA8;  }
		/* 821E3E80h case   19:*/		return 0x821E3E84;
		  /* 821E3E84h */ case   20:  		/* lwz R10, <#[R11]> */
		/* 821E3E84h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E3E84h case   20:*/		return 0x821E3E88;
		  /* 821E3E88h */ case   21:  		/* rlwinm. R10, R10, 0, 20, 20 */
		/* 821E3E88h case   21:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R10,regs.R10);
		/* 821E3E88h case   21:*/		return 0x821E3E8C;
		  /* 821E3E8Ch */ case   22:  		/* bc 12, CR0_EQ, 28 */
		/* 821E3E8Ch case   22:*/		if ( regs.CR[0].eq ) { return 0x821E3EA8;  }
		/* 821E3E8Ch case   22:*/		return 0x821E3E90;
		  /* 821E3E90h */ case   23:  		/* lwz R10, <#[R11 + 76]> */
		/* 821E3E90h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000004C) );
		/* 821E3E90h case   23:*/		return 0x821E3E94;
		  /* 821E3E94h */ case   24:  		/* lwz R7, <#[R30 + 48]> */
		/* 821E3E94h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000030) );
		/* 821E3E94h case   24:*/		return 0x821E3E98;
		  /* 821E3E98h */ case   25:  		/* cmplw CR6, R10, R7 */
		/* 821E3E98h case   25:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821E3E98h case   25:*/		return 0x821E3E9C;
		  /* 821E3E9Ch */ case   26:  		/* bc 4, CR6_GT, 12 */
		/* 821E3E9Ch case   26:*/		if ( !regs.CR[6].gt ) { return 0x821E3EA8;  }
		/* 821E3E9Ch case   26:*/		return 0x821E3EA0;
		  /* 821E3EA0h */ case   27:  		/* stw R10, <#[R30 + 48]> */
		/* 821E3EA0h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 821E3EA0h case   27:*/		return 0x821E3EA4;
		  /* 821E3EA4h */ case   28:  		/* stw R11, <#[R30 + 52]> */
		/* 821E3EA4h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E3EA4h case   28:*/		return 0x821E3EA8;
	}
	return 0x821E3EA8;
} // Block from 821E3E34h-821E3EA8h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E3EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3EA8);
		  /* 821E3EA8h */ case    0:  		/* lwz R10, <#[R30 + 36]> */
		/* 821E3EA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000024) );
		/* 821E3EA8h case    0:*/		return 0x821E3EAC;
		  /* 821E3EACh */ case    1:  		/* addi R8, R8, 1 */
		/* 821E3EACh case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821E3EACh case    1:*/		return 0x821E3EB0;
		  /* 821E3EB0h */ case    2:  		/* addi R9, R9, 88 */
		/* 821E3EB0h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x58);
		/* 821E3EB0h case    2:*/		return 0x821E3EB4;
		  /* 821E3EB4h */ case    3:  		/* rlwinm R11, R10, 31, 24, 31 */
		/* 821E3EB4h case    3:*/		cpu::op::rlwinm<0,31,24,31>(regs,&regs.R11,regs.R10);
		/* 821E3EB4h case    3:*/		return 0x821E3EB8;
		  /* 821E3EB8h */ case    4:  		/* cmplw CR6, R8, R11 */
		/* 821E3EB8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821E3EB8h case    4:*/		return 0x821E3EBC;
		  /* 821E3EBCh */ case    5:  		/* bc 12, CR6_LT, -84 */
		/* 821E3EBCh case    5:*/		if ( regs.CR[6].lt ) { return 0x821E3E68;  }
		/* 821E3EBCh case    5:*/		return 0x821E3EC0;
	}
	return 0x821E3EC0;
} // Block from 821E3EA8h-821E3EC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E3EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3EC0);
		  /* 821E3EC0h */ case    0:  		/* lwz R9, <#[R30 + 48]> */
		/* 821E3EC0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000030) );
		/* 821E3EC0h case    0:*/		return 0x821E3EC4;
		  /* 821E3EC4h */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 821E3EC4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E3EC4h case    1:*/		return 0x821E3EC8;
		  /* 821E3EC8h */ case    2:  		/* bc 4, CR6_EQ, 104 */
		/* 821E3EC8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E3F30;  }
		/* 821E3EC8h case    2:*/		return 0x821E3ECC;
		  /* 821E3ECCh */ case    3:  		/* rlwinm. R10, R10, 0, 7, 21 */
		/* 821E3ECCh case    3:*/		cpu::op::rlwinm<1,0,7,21>(regs,&regs.R10,regs.R10);
		/* 821E3ECCh case    3:*/		return 0x821E3ED0;
		  /* 821E3ED0h */ case    4:  		/* bc 12, CR0_EQ, 96 */
		/* 821E3ED0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E3F30;  }
		/* 821E3ED0h case    4:*/		return 0x821E3ED4;
		  /* 821E3ED4h */ case    5:  		/* mr R8, R16 */
		/* 821E3ED4h case    5:*/		regs.R8 = regs.R16;
		/* 821E3ED4h case    5:*/		return 0x821E3ED8;
		  /* 821E3ED8h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821E3ED8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E3ED8h case    6:*/		return 0x821E3EDC;
		  /* 821E3EDCh */ case    7:  		/* bc 12, CR6_EQ, 84 */
		/* 821E3EDCh case    7:*/		if ( regs.CR[6].eq ) { return 0x821E3F30;  }
		/* 821E3EDCh case    7:*/		return 0x821E3EE0;
		  /* 821E3EE0h */ case    8:  		/* mr R9, R16 */
		/* 821E3EE0h case    8:*/		regs.R9 = regs.R16;
		/* 821E3EE0h case    8:*/		return 0x821E3EE4;
		  /* 821E3EE4h */ case    9:  		/* lwz R11, <#[R30 + 44]> */
		/* 821E3EE4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821E3EE4h case    9:*/		return 0x821E3EE8;
		  /* 821E3EE8h */ case   10:  		/* add R11, R9, R11 */
		/* 821E3EE8h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821E3EE8h case   10:*/		return 0x821E3EEC;
		  /* 821E3EECh */ case   11:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E3EECh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E3EECh case   11:*/		return 0x821E3EF0;
		  /* 821E3EF0h */ case   12:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E3EF0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E3EF0h case   12:*/		return 0x821E3EF4;
		  /* 821E3EF4h */ case   13:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821E3EF4h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821E3EF4h case   13:*/		return 0x821E3EF8;
		  /* 821E3EF8h */ case   14:  		/* cmplwi CR6, R10, 14720 */
		/* 821E3EF8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003980);
		/* 821E3EF8h case   14:*/		return 0x821E3EFC;
		  /* 821E3EFCh */ case   15:  		/* bc 12, CR6_EQ, 28 */
		/* 821E3EFCh case   15:*/		if ( regs.CR[6].eq ) { return 0x821E3F18;  }
		/* 821E3EFCh case   15:*/		return 0x821E3F00;
		  /* 821E3F00h */ case   16:  		/* lwz R10, <#[R11 + 76]> */
		/* 821E3F00h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000004C) );
		/* 821E3F00h case   16:*/		return 0x821E3F04;
		  /* 821E3F04h */ case   17:  		/* lwz R7, <#[R30 + 48]> */
		/* 821E3F04h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000030) );
		/* 821E3F04h case   17:*/		return 0x821E3F08;
		  /* 821E3F08h */ case   18:  		/* cmplw CR6, R10, R7 */
		/* 821E3F08h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821E3F08h case   18:*/		return 0x821E3F0C;
		  /* 821E3F0Ch */ case   19:  		/* bc 4, CR6_GT, 12 */
		/* 821E3F0Ch case   19:*/		if ( !regs.CR[6].gt ) { return 0x821E3F18;  }
		/* 821E3F0Ch case   19:*/		return 0x821E3F10;
		  /* 821E3F10h */ case   20:  		/* stw R10, <#[R30 + 48]> */
		/* 821E3F10h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 821E3F10h case   20:*/		return 0x821E3F14;
		  /* 821E3F14h */ case   21:  		/* stw R11, <#[R30 + 52]> */
		/* 821E3F14h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E3F14h case   21:*/		return 0x821E3F18;
	}
	return 0x821E3F18;
} // Block from 821E3EC0h-821E3F18h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821E3F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3F18);
		  /* 821E3F18h */ case    0:  		/* lwz R11, <#[R30 + 36]> */
		/* 821E3F18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E3F18h case    0:*/		return 0x821E3F1C;
		  /* 821E3F1Ch */ case    1:  		/* addi R8, R8, 1 */
		/* 821E3F1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821E3F1Ch case    1:*/		return 0x821E3F20;
		  /* 821E3F20h */ case    2:  		/* addi R9, R9, 88 */
		/* 821E3F20h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x58);
		/* 821E3F20h case    2:*/		return 0x821E3F24;
		  /* 821E3F24h */ case    3:  		/* rlwinm R11, R11, 31, 24, 31 */
		/* 821E3F24h case    3:*/		cpu::op::rlwinm<0,31,24,31>(regs,&regs.R11,regs.R11);
		/* 821E3F24h case    3:*/		return 0x821E3F28;
		  /* 821E3F28h */ case    4:  		/* cmplw CR6, R8, R11 */
		/* 821E3F28h case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821E3F28h case    4:*/		return 0x821E3F2C;
		  /* 821E3F2Ch */ case    5:  		/* bc 12, CR6_LT, -72 */
		/* 821E3F2Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x821E3EE4;  }
		/* 821E3F2Ch case    5:*/		return 0x821E3F30;
	}
	return 0x821E3F30;
} // Block from 821E3F18h-821E3F30h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E3F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3F30);
		  /* 821E3F30h */ case    0:  		/* lwz R28, <#[R30 + 60]> */
		/* 821E3F30h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E3F30h case    0:*/		return 0x821E3F34;
		  /* 821E3F34h */ case    1:  		/* rlwinm. R11, R28, 0, 24, 24 */
		/* 821E3F34h case    1:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R11,regs.R28);
		/* 821E3F34h case    1:*/		return 0x821E3F38;
		  /* 821E3F38h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821E3F38h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E3F60;  }
		/* 821E3F38h case    2:*/		return 0x821E3F3C;
		  /* 821E3F3Ch */ case    3:  		/* rlwinm. R11, R28, 0, 31, 31 */
		/* 821E3F3Ch case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R28);
		/* 821E3F3Ch case    3:*/		return 0x821E3F40;
		  /* 821E3F40h */ case    4:  		/* bc 4, CR0_EQ, 32 */
		/* 821E3F40h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E3F60;  }
		/* 821E3F40h case    4:*/		return 0x821E3F44;
		  /* 821E3F44h */ case    5:  		/* lwz R11, <#[R30 + 36]> */
		/* 821E3F44h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E3F44h case    5:*/		return 0x821E3F48;
		  /* 821E3F48h */ case    6:  		/* rlwinm. R11, R11, 0, 4, 4 */
		/* 821E3F48h case    6:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R11);
		/* 821E3F48h case    6:*/		return 0x821E3F4C;
		  /* 821E3F4Ch */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821E3F4Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821E3F60;  }
		/* 821E3F4Ch case    7:*/		return 0x821E3F50;
		  /* 821E3F50h */ case    8:  		/* lwz R11, <#[R20 + 52]> */
		/* 821E3F50h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000034) );
		/* 821E3F50h case    8:*/		return 0x821E3F54;
		  /* 821E3F54h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E3F54h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E3F54h case    9:*/		return 0x821E3F58;
		  /* 821E3F58h */ case   10:  		/* mr R11, R22 */
		/* 821E3F58h case   10:*/		regs.R11 = regs.R22;
		/* 821E3F58h case   10:*/		return 0x821E3F5C;
		  /* 821E3F5Ch */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 821E3F5Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821E3F64;  }
		/* 821E3F5Ch case   11:*/		return 0x821E3F60;
	}
	return 0x821E3F60;
} // Block from 821E3F30h-821E3F60h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E3F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3F60);
		  /* 821E3F60h */ case    0:  		/* mr R11, R16 */
		/* 821E3F60h case    0:*/		regs.R11 = regs.R16;
		/* 821E3F60h case    0:*/		return 0x821E3F64;
	}
	return 0x821E3F64;
} // Block from 821E3F60h-821E3F64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E3F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3F64);
		  /* 821E3F64h */ case    0:  		/* lwz R10, <#[R30 + 12]> */
		/* 821E3F64h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E3F64h case    0:*/		return 0x821E3F68;
		  /* 821E3F68h */ case    1:  		/* rlwinm R26, R11, 0, 24, 31 */
		/* 821E3F68h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R26,regs.R11);
		/* 821E3F68h case    1:*/		return 0x821E3F6C;
		  /* 821E3F6Ch */ case    2:  		/* mr R27, R16 */
		/* 821E3F6Ch case    2:*/		regs.R27 = regs.R16;
		/* 821E3F6Ch case    2:*/		return 0x821E3F70;
		  /* 821E3F70h */ case    3:  		/* mr R29, R16 */
		/* 821E3F70h case    3:*/		regs.R29 = regs.R16;
		/* 821E3F70h case    3:*/		return 0x821E3F74;
		  /* 821E3F74h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821E3F74h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E3F74h case    4:*/		return 0x821E3F78;
		  /* 821E3F78h */ case    5:  		/* bc 12, CR6_EQ, 76 */
		/* 821E3F78h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E3FC4;  }
		/* 821E3F78h case    5:*/		return 0x821E3F7C;
		  /* 821E3F7Ch */ case    6:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 821E3F7Ch case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 821E3F7Ch case    6:*/		return 0x821E3F80;
		  /* 821E3F80h */ case    7:  		/* lwz R10, <#[R11 + 36]> */
		/* 821E3F80h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821E3F80h case    7:*/		return 0x821E3F84;
		  /* 821E3F84h */ case    8:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E3F84h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E3F84h case    8:*/		return 0x821E3F88;
		  /* 821E3F88h */ case    9:  		/* bc 4, CR0_EQ, 60 */
		/* 821E3F88h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821E3FC4;  }
		/* 821E3F88h case    9:*/		return 0x821E3F8C;
		  /* 821E3F8Ch */ case   10:  		/* lwz R11, <#[R11 + 32]> */
		/* 821E3F8Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821E3F8Ch case   10:*/		return 0x821E3F90;
		  /* 821E3F90h */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E3F90h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E3F90h case   11:*/		return 0x821E3F94;
		  /* 821E3F94h */ case   12:  		/* addic. R31, R11, -40 */
		/* 821E3F94h case   12:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821E3F94h case   12:*/		return 0x821E3F98;
		  /* 821E3F98h */ case   13:  		/* bc 12, CR0_EQ, 44 */
		/* 821E3F98h case   13:*/		if ( regs.CR[0].eq ) { return 0x821E3FC4;  }
		/* 821E3F98h case   13:*/		return 0x821E3F9C;
		  /* 821E3F9Ch */ case   14:  		/* mr R3, R31 */
		/* 821E3F9Ch case   14:*/		regs.R3 = regs.R31;
		/* 821E3F9Ch case   14:*/		return 0x821E3FA0;
		  /* 821E3FA0h */ case   15:  		/* bl -523688 */
		/* 821E3FA0h case   15:*/		regs.LR = 0x821E3FA4; return 0x821641F8;
		/* 821E3FA0h case   15:*/		return 0x821E3FA4;
		  /* 821E3FA4h */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E3FA4h case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E3FA4h case   16:*/		return 0x821E3FA8;
		  /* 821E3FA8h */ case   17:  		/* bc 12, CR0_EQ, 28 */
		/* 821E3FA8h case   17:*/		if ( regs.CR[0].eq ) { return 0x821E3FC4;  }
		/* 821E3FA8h case   17:*/		return 0x821E3FAC;
		  /* 821E3FACh */ case   18:  		/* mr R4, R20 */
		/* 821E3FACh case   18:*/		regs.R4 = regs.R20;
		/* 821E3FACh case   18:*/		return 0x821E3FB0;
		  /* 821E3FB0h */ case   19:  		/* mr R3, R31 */
		/* 821E3FB0h case   19:*/		regs.R3 = regs.R31;
		/* 821E3FB0h case   19:*/		return 0x821E3FB4;
		  /* 821E3FB4h */ case   20:  		/* bl -522284 */
		/* 821E3FB4h case   20:*/		regs.LR = 0x821E3FB8; return 0x82164788;
		/* 821E3FB4h case   20:*/		return 0x821E3FB8;
		  /* 821E3FB8h */ case   21:  		/* cmpwi CR6, R3, 7 */
		/* 821E3FB8h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000007);
		/* 821E3FB8h case   21:*/		return 0x821E3FBC;
		  /* 821E3FBCh */ case   22:  		/* bc 4, CR6_EQ, 8 */
		/* 821E3FBCh case   22:*/		if ( !regs.CR[6].eq ) { return 0x821E3FC4;  }
		/* 821E3FBCh case   22:*/		return 0x821E3FC0;
		  /* 821E3FC0h */ case   23:  		/* mr R29, R22 */
		/* 821E3FC0h case   23:*/		regs.R29 = regs.R22;
		/* 821E3FC0h case   23:*/		return 0x821E3FC4;
	}
	return 0x821E3FC4;
} // Block from 821E3F64h-821E3FC4h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E3FC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E3FC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E3FC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E3FC4);
		  /* 821E3FC4h */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821E3FC4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821E3FC4h case    0:*/		return 0x821E3FC8;
		  /* 821E3FC8h */ case    1:  		/* bc 12, CR0_EQ, 564 */
		/* 821E3FC8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E41FC;  }
		/* 821E3FC8h case    1:*/		return 0x821E3FCC;
		  /* 821E3FCCh */ case    2:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821E3FCCh case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821E3FCCh case    2:*/		return 0x821E3FD0;
		  /* 821E3FD0h */ case    3:  		/* bc 4, CR0_EQ, 556 */
		/* 821E3FD0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E41FC;  }
		/* 821E3FD0h case    3:*/		return 0x821E3FD4;
		  /* 821E3FD4h */ case    4:  		/* rlwinm. R11, R28, 0, 30, 30 */
		/* 821E3FD4h case    4:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R28);
		/* 821E3FD4h case    4:*/		return 0x821E3FD8;
		  /* 821E3FD8h */ case    5:  		/* bc 4, CR0_EQ, 548 */
		/* 821E3FD8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821E41FC;  }
		/* 821E3FD8h case    5:*/		return 0x821E3FDC;
		  /* 821E3FDCh */ case    6:  		/* lwz R11, <#[R30 + 36]> */
		/* 821E3FDCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E3FDCh case    6:*/		return 0x821E3FE0;
		  /* 821E3FE0h */ case    7:  		/* rlwinm R3, R11, 22, 17, 31 */
		/* 821E3FE0h case    7:*/		cpu::op::rlwinm<0,22,17,31>(regs,&regs.R3,regs.R11);
		/* 821E3FE0h case    7:*/		return 0x821E3FE4;
		  /* 821E3FE4h */ case    8:  		/* cmplwi CR6, R3, 1 */
		/* 821E3FE4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 821E3FE4h case    8:*/		return 0x821E3FE8;
		  /* 821E3FE8h */ case    9:  		/* bc 4, CR6_GT, 532 */
		/* 821E3FE8h case    9:*/		if ( !regs.CR[6].gt ) { return 0x821E41FC;  }
		/* 821E3FE8h case    9:*/		return 0x821E3FEC;
		  /* 821E3FECh */ case   10:  		/* lwz R29, <#[R30 + 56]> */
		/* 821E3FECh case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000038) );
		/* 821E3FECh case   10:*/		return 0x821E3FF0;
		  /* 821E3FF0h */ case   11:  		/* cmplwi CR6, R29, 0 */
		/* 821E3FF0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E3FF0h case   11:*/		return 0x821E3FF4;
		  /* 821E3FF4h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 821E3FF4h case   12:*/		if ( regs.CR[6].eq ) { return 0x821E4014;  }
		/* 821E3FF4h case   12:*/		return 0x821E3FF8;
		  /* 821E3FF8h */ case   13:  		/* rlwinm R11, R29, 0, 0, 31 */
		/* 821E3FF8h case   13:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R29);
		/* 821E3FF8h case   13:*/		return 0x821E3FFC;
		  /* 821E3FFCh */ case   14:  		/* lwz R10, <#[R11]> */
		/* 821E3FFCh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E3FFCh case   14:*/		return 0x821E4000;
		  /* 821E4000h */ case   15:  		/* rlwinm. R10, R10, 0, 19, 19 */
		/* 821E4000h case   15:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R10,regs.R10);
		/* 821E4000h case   15:*/		return 0x821E4004;
		  /* 821E4004h */ case   16:  		/* bc 12, CR0_EQ, 16 */
		/* 821E4004h case   16:*/		if ( regs.CR[0].eq ) { return 0x821E4014;  }
		/* 821E4004h case   16:*/		return 0x821E4008;
		  /* 821E4008h */ case   17:  		/* lwz R11, <#[R11 + 80]> */
		/* 821E4008h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821E4008h case   17:*/		return 0x821E400C;
		  /* 821E400Ch */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821E400Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E400Ch case   18:*/		return 0x821E4010;
		  /* 821E4010h */ case   19:  		/* bc 4, CR6_EQ, 492 */
		/* 821E4010h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821E41FC;  }
		/* 821E4010h case   19:*/		return 0x821E4014;
	}
	return 0x821E4014;
} // Block from 821E3FC4h-821E4014h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821E4014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4014);
		  /* 821E4014h */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E4014h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E4014h case    0:*/		return 0x821E4018;
		  /* 821E4018h */ case    1:  		/* mr R4, R16 */
		/* 821E4018h case    1:*/		regs.R4 = regs.R16;
		/* 821E4018h case    1:*/		return 0x821E401C;
		  /* 821E401Ch */ case    2:  		/* mr R31, R16 */
		/* 821E401Ch case    2:*/		regs.R31 = regs.R16;
		/* 821E401Ch case    2:*/		return 0x821E4020;
		  /* 821E4020h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E4020h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E4020h case    3:*/		return 0x821E4024;
		  /* 821E4024h */ case    4:  		/* bc 4, CR0_EQ, 220 */
		/* 821E4024h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E4100;  }
		/* 821E4024h case    4:*/		return 0x821E4028;
		  /* 821E4028h */ case    5:  		/* mr R7, R11 */
		/* 821E4028h case    5:*/		regs.R7 = regs.R11;
		/* 821E4028h case    5:*/		return 0x821E402C;
		  /* 821E402Ch */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821E402Ch case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E402Ch case    6:*/		return 0x821E4030;
		  /* 821E4030h */ case    7:  		/* bc 12, CR0_EQ, 208 */
		/* 821E4030h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E4100;  }
		/* 821E4030h case    7:*/		return 0x821E4034;
		  /* 821E4034h */ case    8:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E4034h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E4034h case    8:*/		return 0x821E4038;
		  /* 821E4038h */ case    9:  		/* subf R11, R11, R30 */
		/* 821E4038h case    9:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821E4038h case    9:*/		return 0x821E403C;
		  /* 821E403Ch */ case   10:  		/* divw R10, R11, R21 */
		/* 821E403Ch case   10:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R21);
		/* 821E403Ch case   10:*/		return 0x821E4040;
		  /* 821E4040h */ case   11:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E4040h case   11:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E4040h case   11:*/		return 0x821E4044;
		  /* 821E4044h */ case   12:  		/* rlwinm R6, R10, 0, 27, 31 */
		/* 821E4044h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R10);
		/* 821E4044h case   12:*/		return 0x821E4048;
		  /* 821E4048h */ case   13:  		/* addi R11, R11, 21 */
		/* 821E4048h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E4048h case   13:*/		return 0x821E404C;
		  /* 821E404Ch */ case   14:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821E404Ch case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821E404Ch case   14:*/		return 0x821E4050;
		  /* 821E4050h */ case   15:  		/* lwzx R11, <#[R5 + R7]> */
		/* 821E4050h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 821E4050h case   15:*/		return 0x821E4054;
		  /* 821E4054h */ case   16:  		/* srw R11, R11, R6 */
		/* 821E4054h case   16:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 821E4054h case   16:*/		return 0x821E4058;
		  /* 821E4058h */ case   17:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E4058h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E4058h case   17:*/		return 0x821E405C;
		  /* 821E405Ch */ case   18:  		/* bc 12, CR0_EQ, 136 */
		/* 821E405Ch case   18:*/		if ( regs.CR[0].eq ) { return 0x821E40E4;  }
		/* 821E405Ch case   18:*/		return 0x821E4060;
		  /* 821E4060h */ case   19:  		/* lwz R11, <#[R7 + 28]> */
		/* 821E4060h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000001C) );
		/* 821E4060h case   19:*/		return 0x821E4064;
		  /* 821E4064h */ case   20:  		/* mr R9, R16 */
		/* 821E4064h case   20:*/		regs.R9 = regs.R16;
		/* 821E4064h case   20:*/		return 0x821E4068;
		  /* 821E4068h */ case   21:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E4068h case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E4068h case   21:*/		return 0x821E406C;
		  /* 821E406Ch */ case   22:  		/* bc 4, CR0_EQ, 120 */
		/* 821E406Ch case   22:*/		if ( !regs.CR[0].eq ) { return 0x821E40E4;  }
		/* 821E406Ch case   22:*/		return 0x821E4070;
		  /* 821E4070h */ case   23:  		/* mr R8, R11 */
		/* 821E4070h case   23:*/		regs.R8 = regs.R11;
		/* 821E4070h case   23:*/		return 0x821E4074;
		  /* 821E4074h */ case   24:  		/* cmplwi CR0, R11, 0 */
		/* 821E4074h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E4074h case   24:*/		return 0x821E4078;
		  /* 821E4078h */ case   25:  		/* bc 12, CR0_EQ, 108 */
		/* 821E4078h case   25:*/		if ( regs.CR[0].eq ) { return 0x821E40E4;  }
		/* 821E4078h case   25:*/		return 0x821E407C;
		  /* 821E407Ch */ case   26:  		/* lwz R11, <#[R8 + 8]> */
		/* 821E407Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 821E407Ch case   26:*/		return 0x821E4080;
		  /* 821E4080h */ case   27:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821E4080h case   27:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821E4080h case   27:*/		return 0x821E4084;
		  /* 821E4084h */ case   28:  		/* cmplwi CR6, R10, 1 */
		/* 821E4084h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821E4084h case   28:*/		return 0x821E4088;
		  /* 821E4088h */ case   29:  		/* bc 12, CR6_LT, 16 */
		/* 821E4088h case   29:*/		if ( regs.CR[6].lt ) { return 0x821E4098;  }
		/* 821E4088h case   29:*/		return 0x821E408C;
		  /* 821E408Ch */ case   30:  		/* cmplwi CR6, R10, 102 */
		/* 821E408Ch case   30:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000066);
		/* 821E408Ch case   30:*/		return 0x821E4090;
		  /* 821E4090h */ case   31:  		/* mr R11, R22 */
		/* 821E4090h case   31:*/		regs.R11 = regs.R22;
		/* 821E4090h case   31:*/		return 0x821E4094;
		  /* 821E4094h */ case   32:  		/* bc 4, CR6_GT, 8 */
		/* 821E4094h case   32:*/		if ( !regs.CR[6].gt ) { return 0x821E409C;  }
		/* 821E4094h case   32:*/		return 0x821E4098;
	}
	return 0x821E4098;
} // Block from 821E4014h-821E4098h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821E4098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4098);
		  /* 821E4098h */ case    0:  		/* mr R11, R16 */
		/* 821E4098h case    0:*/		regs.R11 = regs.R16;
		/* 821E4098h case    0:*/		return 0x821E409C;
	}
	return 0x821E409C;
} // Block from 821E4098h-821E409Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E409Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E409C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E409C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E409C);
		  /* 821E409Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E409Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E409Ch case    0:*/		return 0x821E40A0;
		  /* 821E40A0h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 821E40A0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E40BC;  }
		/* 821E40A0h case    1:*/		return 0x821E40A4;
		  /* 821E40A4h */ case    2:  		/* addi R4, R4, 1 */
		/* 821E40A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 821E40A4h case    2:*/		return 0x821E40A8;
		  /* 821E40A8h */ case    3:  		/* cmplwi CR6, R10, 97 */
		/* 821E40A8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000061);
		/* 821E40A8h case    3:*/		return 0x821E40AC;
		  /* 821E40ACh */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 821E40ACh case    4:*/		if ( !regs.CR[6].eq ) { return 0x821E40BC;  }
		/* 821E40ACh case    4:*/		return 0x821E40B0;
		  /* 821E40B0h */ case    5:  		/* lwz R11, <#[R7 + 68]> */
		/* 821E40B0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000044) );
		/* 821E40B0h case    5:*/		return 0x821E40B4;
		  /* 821E40B4h */ case    6:  		/* rlwinm R11, R11, 0, 4, 31 */
		/* 821E40B4h case    6:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R11,regs.R11);
		/* 821E40B4h case    6:*/		return 0x821E40B8;
		  /* 821E40B8h */ case    7:  		/* add R9, R11, R9 */
		/* 821E40B8h case    7:*/		cpu::op::add<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821E40B8h case    7:*/		return 0x821E40BC;
	}
	return 0x821E40BC;
} // Block from 821E409Ch-821E40BCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E40BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E40BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E40BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E40BC);
		  /* 821E40BCh */ case    0:  		/* rlwinm R11, R8, 0, 0, 30 */
		/* 821E40BCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R8);
		/* 821E40BCh case    0:*/		return 0x821E40C0;
		  /* 821E40C0h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E40C0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E40C0h case    1:*/		return 0x821E40C4;
		  /* 821E40C4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E40C4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E40C4h case    2:*/		return 0x821E40C8;
		  /* 821E40C8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E40C8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E40D8;  }
		/* 821E40C8h case    3:*/		return 0x821E40CC;
		  /* 821E40CCh */ case    4:  		/* mr R8, R11 */
		/* 821E40CCh case    4:*/		regs.R8 = regs.R11;
		/* 821E40CCh case    4:*/		return 0x821E40D0;
		  /* 821E40D0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E40D0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E40D0h case    5:*/		return 0x821E40D4;
		  /* 821E40D4h */ case    6:  		/* bc 4, CR6_EQ, -88 */
		/* 821E40D4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E407C;  }
		/* 821E40D4h case    6:*/		return 0x821E40D8;
	}
	return 0x821E40D8;
} // Block from 821E40BCh-821E40D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E40D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E40D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E40D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E40D8);
		  /* 821E40D8h */ case    0:  		/* cmplw CR6, R9, R31 */
		/* 821E40D8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 821E40D8h case    0:*/		return 0x821E40DC;
		  /* 821E40DCh */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 821E40DCh case    1:*/		if ( !regs.CR[6].gt ) { return 0x821E40E4;  }
		/* 821E40DCh case    1:*/		return 0x821E40E0;
		  /* 821E40E0h */ case    2:  		/* mr R31, R9 */
		/* 821E40E0h case    2:*/		regs.R31 = regs.R9;
		/* 821E40E0h case    2:*/		return 0x821E40E4;
	}
	return 0x821E40E4;
} // Block from 821E40D8h-821E40E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E40E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E40E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E40E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E40E4);
		  /* 821E40E4h */ case    0:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 821E40E4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 821E40E4h case    0:*/		return 0x821E40E8;
		  /* 821E40E8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E40E8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E40E8h case    1:*/		return 0x821E40EC;
		  /* 821E40ECh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E40ECh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E40ECh case    2:*/		return 0x821E40F0;
		  /* 821E40F0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E40F0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E4100;  }
		/* 821E40F0h case    3:*/		return 0x821E40F4;
		  /* 821E40F4h */ case    4:  		/* mr R7, R11 */
		/* 821E40F4h case    4:*/		regs.R7 = regs.R11;
		/* 821E40F4h case    4:*/		return 0x821E40F8;
		  /* 821E40F8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E40F8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E40F8h case    5:*/		return 0x821E40FC;
		  /* 821E40FCh */ case    6:  		/* bc 4, CR6_EQ, -172 */
		/* 821E40FCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E4050;  }
		/* 821E40FCh case    6:*/		return 0x821E4100;
	}
	return 0x821E4100;
} // Block from 821E40E4h-821E4100h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4100);
		  /* 821E4100h */ case    0:  		/* lwz R10, <#[R30 + 48]> */
		/* 821E4100h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 821E4100h case    0:*/		return 0x821E4104;
		  /* 821E4104h */ case    1:  		/* mr R11, R4 */
		/* 821E4104h case    1:*/		regs.R11 = regs.R4;
		/* 821E4104h case    1:*/		return 0x821E4108;
		  /* 821E4108h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821E4108h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E4108h case    2:*/		return 0x821E410C;
		  /* 821E410Ch */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 821E410Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821E4128;  }
		/* 821E410Ch case    3:*/		return 0x821E4110;
		  /* 821E4110h */ case    4:  		/* cmplw CR6, R4, R10 */
		/* 821E4110h case    4:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 821E4110h case    4:*/		return 0x821E4114;
		  /* 821E4114h */ case    5:  		/* bc 4, CR6_GT, 12 */
		/* 821E4114h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821E4120;  }
		/* 821E4114h case    5:*/		return 0x821E4118;
		  /* 821E4118h */ case    6:  		/* subf R11, R10, R4 */
		/* 821E4118h case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R4);
		/* 821E4118h case    6:*/		return 0x821E411C;
		  /* 821E411Ch */ case    7:  		/* b 64 */
		/* 821E411Ch case    7:*/		return 0x821E415C;
		/* 821E411Ch case    7:*/		return 0x821E4120;
	}
	return 0x821E4120;
} // Block from 821E4100h-821E4120h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E4120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4120);
		  /* 821E4120h */ case    0:  		/* mr R11, R16 */
		/* 821E4120h case    0:*/		regs.R11 = regs.R16;
		/* 821E4120h case    0:*/		return 0x821E4124;
		  /* 821E4124h */ case    1:  		/* b 56 */
		/* 821E4124h case    1:*/		return 0x821E415C;
		/* 821E4124h case    1:*/		return 0x821E4128;
	}
	return 0x821E4128;
} // Block from 821E4120h-821E4128h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E4128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4128);
		  /* 821E4128h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821E4128h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E4128h case    0:*/		return 0x821E412C;
		  /* 821E412Ch */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 821E412Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821E4178;  }
		/* 821E412Ch case    1:*/		return 0x821E4130;
		  /* 821E4130h */ case    2:  		/* lwz R10, <#[R30 + 56]> */
		/* 821E4130h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000038) );
		/* 821E4130h case    2:*/		return 0x821E4134;
		  /* 821E4134h */ case    3:  		/* lwz R9, <#[R10 + 52]> */
		/* 821E4134h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000034) );
		/* 821E4134h case    3:*/		return 0x821E4138;
		  /* 821E4138h */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 821E4138h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E4138h case    4:*/		return 0x821E413C;
		  /* 821E413Ch */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 821E413Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821E4144;  }
		/* 821E413Ch case    5:*/		return 0x821E4140;
		  /* 821E4140h */ case    6:  		/* addi R11, R4, -1 */
		/* 821E4140h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0xFFFFFFFF);
		/* 821E4140h case    6:*/		return 0x821E4144;
	}
	return 0x821E4144;
} // Block from 821E4128h-821E4144h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4144);
		  /* 821E4144h */ case    0:  		/* lwz R10, <#[R10 + 60]> */
		/* 821E4144h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 821E4144h case    0:*/		return 0x821E4148;
		  /* 821E4148h */ case    1:  		/* b 12 */
		/* 821E4148h case    1:*/		return 0x821E4154;
		/* 821E4148h case    1:*/		return 0x821E414C;
		  /* 821E414Ch */ case    2:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E414Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E414Ch case    2:*/		return 0x821E4150;
		  /* 821E4150h */ case    3:  		/* addi R11, R11, -1 */
		/* 821E4150h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E4150h case    3:*/		return 0x821E4154;
	}
	return 0x821E4154;
} // Block from 821E4144h-821E4154h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E4154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4154);
		  /* 821E4154h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821E4154h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E4154h case    0:*/		return 0x821E4158;
		  /* 821E4158h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821E4158h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E414C;  }
		/* 821E4158h case    1:*/		return 0x821E415C;
	}
	return 0x821E415C;
} // Block from 821E4154h-821E415Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E415Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E415C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E415C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E415C);
		  /* 821E415Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821E415Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E415Ch case    0:*/		return 0x821E4160;
		  /* 821E4160h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821E4160h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E4178;  }
		/* 821E4160h case    1:*/		return 0x821E4164;
		  /* 821E4164h */ case    2:  		/* lwz R10, <#[R30 + 56]> */
		/* 821E4164h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000038) );
		/* 821E4164h case    2:*/		return 0x821E4168;
		  /* 821E4168h */ case    3:  		/* lwz R10, <#[R10 + 80]> */
		/* 821E4168h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000050) );
		/* 821E4168h case    3:*/		return 0x821E416C;
		  /* 821E416Ch */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 821E416Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E416Ch case    4:*/		return 0x821E4170;
		  /* 821E4170h */ case    5:  		/* bc 12, CR6_LT, 8 */
		/* 821E4170h case    5:*/		if ( regs.CR[6].lt ) { return 0x821E4178;  }
		/* 821E4170h case    5:*/		return 0x821E4174;
		  /* 821E4174h */ case    6:  		/* subf R11, R10, R11 */
		/* 821E4174h case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E4174h case    6:*/		return 0x821E4178;
	}
	return 0x821E4178;
} // Block from 821E415Ch-821E4178h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4178);
		  /* 821E4178h */ case    0:  		/* mullw R10, R11, R3 */
		/* 821E4178h case    0:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R11,regs.R3);
		/* 821E4178h case    0:*/		return 0x821E417C;
		  /* 821E417Ch */ case    1:  		/* lwz R11, <#[R20 + 808]> */
		/* 821E417Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000328) );
		/* 821E417Ch case    1:*/		return 0x821E4180;
		  /* 821E4180h */ case    2:  		/* lwz R9, <#[R1 + 144]> */
		/* 821E4180h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000090) );
		/* 821E4180h case    2:*/		return 0x821E4184;
		  /* 821E4184h */ case    3:  		/* subf R10, R4, R10 */
		/* 821E4184h case    3:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R4,regs.R10);
		/* 821E4184h case    3:*/		return 0x821E4188;
		  /* 821E4188h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E4188h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4188h case    4:*/		return 0x821E418C;
		  /* 821E418Ch */ case    5:  		/* add R27, R10, R9 */
		/* 821E418Ch case    5:*/		cpu::op::add<0>(regs,&regs.R27,regs.R10,regs.R9);
		/* 821E418Ch case    5:*/		return 0x821E4190;
		  /* 821E4190h */ case    6:  		/* bc 4, CR6_EQ, 32 */
		/* 821E4190h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E41B0;  }
		/* 821E4190h case    6:*/		return 0x821E4194;
		  /* 821E4194h */ case    7:  		/* lwz R11, <#[R20 + 48]> */
		/* 821E4194h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000030) );
		/* 821E4194h case    7:*/		return 0x821E4198;
		  /* 821E4198h */ case    8:  		/* lis R10, -1 */
		/* 821E4198h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 821E4198h case    8:*/		return 0x821E419C;
		  /* 821E419Ch */ case    9:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821E419Ch case    9:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821E419Ch case    9:*/		return 0x821E41A0;
		  /* 821E41A0h */ case   10:  		/* subf R11, R10, R11 */
		/* 821E41A0h case   10:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E41A0h case   10:*/		return 0x821E41A4;
		  /* 821E41A4h */ case   11:  		/* cntlzw R11, R11 */
		/* 821E41A4h case   11:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821E41A4h case   11:*/		return 0x821E41A8;
		  /* 821E41A8h */ case   12:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821E41A8h case   12:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821E41A8h case   12:*/		return 0x821E41AC;
		  /* 821E41ACh */ case   13:  		/* addi R11, R11, 2046 */
		/* 821E41ACh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x7FE);
		/* 821E41ACh case   13:*/		return 0x821E41B0;
	}
	return 0x821E41B0;
} // Block from 821E4178h-821E41B0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E41B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E41B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E41B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E41B0);
		  /* 821E41B0h */ case    0:  		/* cmplw CR6, R27, R11 */
		/* 821E41B0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821E41B0h case    0:*/		return 0x821E41B4;
		  /* 821E41B4h */ case    1:  		/* bc 12, CR6_GT, 68 */
		/* 821E41B4h case    1:*/		if ( regs.CR[6].gt ) { return 0x821E41F8;  }
		/* 821E41B4h case    1:*/		return 0x821E41B8;
		  /* 821E41B8h */ case    2:  		/* lwz R11, <#[R20 + 792]> */
		/* 821E41B8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000318) );
		/* 821E41B8h case    2:*/		return 0x821E41BC;
		  /* 821E41BCh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821E41BCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E41BCh case    3:*/		return 0x821E41C0;
		  /* 821E41C0h */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 821E41C0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821E41C8;  }
		/* 821E41C0h case    4:*/		return 0x821E41C4;
		  /* 821E41C4h */ case    5:  		/* li R11, 32 */
		/* 821E41C4h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 821E41C4h case    5:*/		return 0x821E41C8;
	}
	return 0x821E41C8;
} // Block from 821E41B0h-821E41C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E41C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E41C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E41C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E41C8);
		  /* 821E41C8h */ case    0:  		/* rlwinm R11, R11, 31, 1, 31 */
		/* 821E41C8h case    0:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R11,regs.R11);
		/* 821E41C8h case    0:*/		return 0x821E41CC;
		  /* 821E41CCh */ case    1:  		/* cmplw CR6, R31, R11 */
		/* 821E41CCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821E41CCh case    1:*/		return 0x821E41D0;
		  /* 821E41D0h */ case    2:  		/* bc 4, CR6_GT, 44 */
		/* 821E41D0h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821E41FC;  }
		/* 821E41D0h case    2:*/		return 0x821E41D4;
		  /* 821E41D4h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821E41D4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E41D4h case    3:*/		return 0x821E41D8;
		  /* 821E41D8h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 821E41D8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821E41F8;  }
		/* 821E41D8h case    4:*/		return 0x821E41DC;
		  /* 821E41DCh */ case    5:  		/* lwz R11, <#[R30 + 56]> */
		/* 821E41DCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 821E41DCh case    5:*/		return 0x821E41E0;
		  /* 821E41E0h */ case    6:  		/* lwz R10, <#[R11 + 64]> */
		/* 821E41E0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000040) );
		/* 821E41E0h case    6:*/		return 0x821E41E4;
		  /* 821E41E4h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821E41E4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E41E4h case    7:*/		return 0x821E41E8;
		  /* 821E41E8h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 821E41E8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E41FC;  }
		/* 821E41E8h case    8:*/		return 0x821E41EC;
		  /* 821E41ECh */ case    9:  		/* lwz R11, <#[R11 + 80]> */
		/* 821E41ECh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821E41ECh case    9:*/		return 0x821E41F0;
		  /* 821E41F0h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821E41F0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E41F0h case   10:*/		return 0x821E41F4;
		  /* 821E41F4h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 821E41F4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821E41FC;  }
		/* 821E41F4h case   11:*/		return 0x821E41F8;
	}
	return 0x821E41F8;
} // Block from 821E41C8h-821E41F8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E41F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E41F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E41F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E41F8);
		  /* 821E41F8h */ case    0:  		/* mr R26, R16 */
		/* 821E41F8h case    0:*/		regs.R26 = regs.R16;
		/* 821E41F8h case    0:*/		return 0x821E41FC;
	}
	return 0x821E41FC;
} // Block from 821E41F8h-821E41FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E41FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E41FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E41FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E41FC);
		  /* 821E41FCh */ case    0:  		/* lwz R11, <#[R30 + 48]> */
		/* 821E41FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821E41FCh case    0:*/		return 0x821E4200;
		  /* 821E4200h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E4200h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4200h case    1:*/		return 0x821E4204;
		  /* 821E4204h */ case    2:  		/* bc 4, CR6_EQ, 120 */
		/* 821E4204h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E427C;  }
		/* 821E4204h case    2:*/		return 0x821E4208;
		  /* 821E4208h */ case    3:  		/* rlwinm. R11, R28, 0, 23, 23 */
		/* 821E4208h case    3:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R28);
		/* 821E4208h case    3:*/		return 0x821E420C;
		  /* 821E420Ch */ case    4:  		/* bc 4, CR0_EQ, 112 */
		/* 821E420Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E427C;  }
		/* 821E420Ch case    4:*/		return 0x821E4210;
		  /* 821E4210h */ case    5:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821E4210h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821E4210h case    5:*/		return 0x821E4214;
		  /* 821E4214h */ case    6:  		/* bc 4, CR0_EQ, 104 */
		/* 821E4214h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E427C;  }
		/* 821E4214h case    6:*/		return 0x821E4218;
		  /* 821E4218h */ case    7:  		/* lwz R11, <#[R30 + 36]> */
		/* 821E4218h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E4218h case    7:*/		return 0x821E421C;
		  /* 821E421Ch */ case    8:  		/* rlwinm. R10, R11, 0, 6, 6 */
		/* 821E421Ch case    8:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R10,regs.R11);
		/* 821E421Ch case    8:*/		return 0x821E4220;
		  /* 821E4220h */ case    9:  		/* bc 12, CR0_EQ, 92 */
		/* 821E4220h case    9:*/		if ( regs.CR[0].eq ) { return 0x821E427C;  }
		/* 821E4220h case    9:*/		return 0x821E4224;
		  /* 821E4224h */ case   10:  		/* rlwinm R11, R11, 0, 7, 21 */
		/* 821E4224h case   10:*/		cpu::op::rlwinm<0,0,7,21>(regs,&regs.R11,regs.R11);
		/* 821E4224h case   10:*/		return 0x821E4228;
		  /* 821E4228h */ case   11:  		/* cmplw CR6, R11, R24 */
		/* 821E4228h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 821E4228h case   11:*/		return 0x821E422C;
		  /* 821E422Ch */ case   12:  		/* bc 4, CR6_GT, 40 */
		/* 821E422Ch case   12:*/		if ( !regs.CR[6].gt ) { return 0x821E4254;  }
		/* 821E422Ch case   12:*/		return 0x821E4230;
		  /* 821E4230h */ case   13:  		/* ori R11, R28, 2048 */
		/* 821E4230h case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R28,0x800);
		/* 821E4230h case   13:*/		return 0x821E4234;
		  /* 821E4234h */ case   14:  		/* stw R11, <#[R30 + 60]> */
		/* 821E4234h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E4234h case   14:*/		return 0x821E4238;
		  /* 821E4238h */ case   15:  		/* addi R25, R25, 1 */
		/* 821E4238h case   15:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821E4238h case   15:*/		return 0x821E423C;
		  /* 821E423Ch */ case   16:  		/* stw R16, <#[R30 + 48]> */
		/* 821E423Ch case   16:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R30 + 0x00000030) );
		/* 821E423Ch case   16:*/		return 0x821E4240;
		  /* 821E4240h */ case   17:  		/* stw R25, <#[R1 + 136]> */
		/* 821E4240h case   17:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000088) );
		/* 821E4240h case   17:*/		return 0x821E4244;
		  /* 821E4244h */ case   18:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E4244h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E4244h case   18:*/		return 0x821E4248;
		  /* 821E4248h */ case   19:  		/* rlwinm R11, R11, 0, 31, 28 */
		/* 821E4248h case   19:*/		cpu::op::rlwinm<0,0,31,28>(regs,&regs.R11,regs.R11);
		/* 821E4248h case   19:*/		return 0x821E424C;
		  /* 821E424Ch */ case   20:  		/* stw R11, <#[R30 + 60]> */
		/* 821E424Ch case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E424Ch case   20:*/		return 0x821E4250;
		  /* 821E4250h */ case   21:  		/* b 1248 */
		/* 821E4250h case   21:*/		return 0x821E4730;
		/* 821E4250h case   21:*/		return 0x821E4254;
	}
	return 0x821E4254;
} // Block from 821E41FCh-821E4254h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821E4254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4254);
		  /* 821E4254h */ case    0:  		/* ori R11, R28, 128 */
		/* 821E4254h case    0:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R28,0x80);
		/* 821E4254h case    0:*/		return 0x821E4258;
		  /* 821E4258h */ case    1:  		/* lis R10, 2 */
		/* 821E4258h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x2);
		/* 821E4258h case    1:*/		return 0x821E425C;
		  /* 821E425Ch */ case    2:  		/* stw R11, <#[R30 + 60]> */
		/* 821E425Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E425Ch case    2:*/		return 0x821E4260;
		  /* 821E4260h */ case    3:  		/* stw R16, <#[R30 + 52]> */
		/* 821E4260h case    3:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R30 + 0x00000034) );
		/* 821E4260h case    3:*/		return 0x821E4264;
		  /* 821E4264h */ case    4:  		/* ori R11, R10, 255 */
		/* 821E4264h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R10,0xFF);
		/* 821E4264h case    4:*/		return 0x821E4268;
		  /* 821E4268h */ case    5:  		/* stw R22, <#[R30 + 48]> */
		/* 821E4268h case    5:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R30 + 0x00000030) );
		/* 821E4268h case    5:*/		return 0x821E426C;
		  /* 821E426Ch */ case    6:  		/* lwz R10, <#[R30 + 36]> */
		/* 821E426Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000024) );
		/* 821E426Ch case    6:*/		return 0x821E4270;
		  /* 821E4270h */ case    7:  		/* rlwimi R10, R11, 10, 7, 21 */
		/* 821E4270h case    7:*/		cpu::op::rlwimi<0,10,7,21>(regs,&regs.R10,regs.R11);
		/* 821E4270h case    7:*/		return 0x821E4274;
		  /* 821E4274h */ case    8:  		/* rlwimi R10, R11, 10, 4, 4 */
		/* 821E4274h case    8:*/		cpu::op::rlwimi<0,10,4,4>(regs,&regs.R10,regs.R11);
		/* 821E4274h case    8:*/		return 0x821E4278;
		  /* 821E4278h */ case    9:  		/* stw R10, <#[R30 + 36]> */
		/* 821E4278h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000024) );
		/* 821E4278h case    9:*/		return 0x821E427C;
	}
	return 0x821E427C;
} // Block from 821E4254h-821E427Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E427Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E427C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E427C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E427C);
		  /* 821E427Ch */ case    0:  		/* lwz R29, <#[R30 + 60]> */
		/* 821E427Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E427Ch case    0:*/		return 0x821E4280;
		  /* 821E4280h */ case    1:  		/* rlwinm. R11, R29, 0, 23, 23 */
		/* 821E4280h case    1:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R29);
		/* 821E4280h case    1:*/		return 0x821E4284;
		  /* 821E4284h */ case    2:  		/* bc 4, CR0_EQ, 504 */
		/* 821E4284h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E447C;  }
		/* 821E4284h case    2:*/		return 0x821E4288;
		  /* 821E4288h */ case    3:  		/* rlwinm. R11, R29, 0, 30, 30 */
		/* 821E4288h case    3:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R29);
		/* 821E4288h case    3:*/		return 0x821E428C;
		  /* 821E428Ch */ case    4:  		/* bc 4, CR0_EQ, 496 */
		/* 821E428Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E447C;  }
		/* 821E428Ch case    4:*/		return 0x821E4290;
		  /* 821E4290h */ case    5:  		/* rlwinm. R11, R29, 0, 25, 25 */
		/* 821E4290h case    5:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R29);
		/* 821E4290h case    5:*/		return 0x821E4294;
		  /* 821E4294h */ case    6:  		/* bc 4, CR0_EQ, 488 */
		/* 821E4294h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E447C;  }
		/* 821E4294h case    6:*/		return 0x821E4298;
		  /* 821E4298h */ case    7:  		/* rlwinm. R11, R29, 0, 26, 26 */
		/* 821E4298h case    7:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R29);
		/* 821E4298h case    7:*/		return 0x821E429C;
		  /* 821E429Ch */ case    8:  		/* bc 12, CR0_EQ, 480 */
		/* 821E429Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821E447C;  }
		/* 821E429Ch case    8:*/		return 0x821E42A0;
		  /* 821E42A0h */ case    9:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E42A0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E42A0h case    9:*/		return 0x821E42A4;
		  /* 821E42A4h */ case   10:  		/* mr R3, R16 */
		/* 821E42A4h case   10:*/		regs.R3 = regs.R16;
		/* 821E42A4h case   10:*/		return 0x821E42A8;
		  /* 821E42A8h */ case   11:  		/* mr R31, R16 */
		/* 821E42A8h case   11:*/		regs.R31 = regs.R16;
		/* 821E42A8h case   11:*/		return 0x821E42AC;
		  /* 821E42ACh */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E42ACh case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E42ACh case   12:*/		return 0x821E42B0;
		  /* 821E42B0h */ case   13:  		/* bc 4, CR0_EQ, 436 */
		/* 821E42B0h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821E4464;  }
		/* 821E42B0h case   13:*/		return 0x821E42B4;
		  /* 821E42B4h */ case   14:  		/* mr R6, R11 */
		/* 821E42B4h case   14:*/		regs.R6 = regs.R11;
		/* 821E42B4h case   14:*/		return 0x821E42B8;
		  /* 821E42B8h */ case   15:  		/* cmplwi CR0, R11, 0 */
		/* 821E42B8h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E42B8h case   15:*/		return 0x821E42BC;
		  /* 821E42BCh */ case   16:  		/* bc 12, CR0_EQ, 424 */
		/* 821E42BCh case   16:*/		if ( regs.CR[0].eq ) { return 0x821E4464;  }
		/* 821E42BCh case   16:*/		return 0x821E42C0;
		  /* 821E42C0h */ case   17:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E42C0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E42C0h case   17:*/		return 0x821E42C4;
		  /* 821E42C4h */ case   18:  		/* subf R11, R11, R30 */
		/* 821E42C4h case   18:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821E42C4h case   18:*/		return 0x821E42C8;
		  /* 821E42C8h */ case   19:  		/* divw R10, R11, R21 */
		/* 821E42C8h case   19:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R21);
		/* 821E42C8h case   19:*/		return 0x821E42CC;
		  /* 821E42CCh */ case   20:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E42CCh case   20:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E42CCh case   20:*/		return 0x821E42D0;
		  /* 821E42D0h */ case   21:  		/* rlwinm R5, R10, 0, 27, 31 */
		/* 821E42D0h case   21:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R10);
		/* 821E42D0h case   21:*/		return 0x821E42D4;
		  /* 821E42D4h */ case   22:  		/* addi R11, R11, 21 */
		/* 821E42D4h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E42D4h case   22:*/		return 0x821E42D8;
		  /* 821E42D8h */ case   23:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 821E42D8h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 821E42D8h case   23:*/		return 0x821E42DC;
		  /* 821E42DCh */ case   24:  		/* lwzx R11, <#[R4 + R6]> */
		/* 821E42DCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + regs.R6 + 0x00000000) );
		/* 821E42DCh case   24:*/		return 0x821E42E0;
		  /* 821E42E0h */ case   25:  		/* srw R11, R11, R5 */
		/* 821E42E0h case   25:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 821E42E0h case   25:*/		return 0x821E42E4;
		  /* 821E42E4h */ case   26:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E42E4h case   26:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E42E4h case   26:*/		return 0x821E42E8;
		  /* 821E42E8h */ case   27:  		/* bc 12, CR0_EQ, 352 */
		/* 821E42E8h case   27:*/		if ( regs.CR[0].eq ) { return 0x821E4448;  }
		/* 821E42E8h case   27:*/		return 0x821E42EC;
		  /* 821E42ECh */ case   28:  		/* lwz R8, <#[R6 + 28]> */
		/* 821E42ECh case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0x0000001C) );
		/* 821E42ECh case   28:*/		return 0x821E42F0;
		  /* 821E42F0h */ case   29:  		/* rlwinm. R7, R8, 0, 31, 31 */
		/* 821E42F0h case   29:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R7,regs.R8);
		/* 821E42F0h case   29:*/		return 0x821E42F4;
		  /* 821E42F4h */ case   30:  		/* bc 4, CR0_EQ, 188 */
		/* 821E42F4h case   30:*/		if ( !regs.CR[0].eq ) { return 0x821E43B0;  }
		/* 821E42F4h case   30:*/		return 0x821E42F8;
		  /* 821E42F8h */ case   31:  		/* mr R9, R8 */
		/* 821E42F8h case   31:*/		regs.R9 = regs.R8;
		/* 821E42F8h case   31:*/		return 0x821E42FC;
		  /* 821E42FCh */ case   32:  		/* cmplwi CR0, R8, 0 */
		/* 821E42FCh case   32:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 821E42FCh case   32:*/		return 0x821E4300;
		  /* 821E4300h */ case   33:  		/* bc 12, CR0_EQ, 176 */
		/* 821E4300h case   33:*/		if ( regs.CR[0].eq ) { return 0x821E43B0;  }
		/* 821E4300h case   33:*/		return 0x821E4304;
		  /* 821E4304h */ case   34:  		/* lwz R11, <#[R9 + 8]> */
		/* 821E4304h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 821E4304h case   34:*/		return 0x821E4308;
		  /* 821E4308h */ case   35:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821E4308h case   35:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821E4308h case   35:*/		return 0x821E430C;
		  /* 821E430Ch */ case   36:  		/* cmplwi CR6, R11, 118 */
		/* 821E430Ch case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000076);
		/* 821E430Ch case   36:*/		return 0x821E4310;
		  /* 821E4310h */ case   37:  		/* bc 4, CR6_EQ, 76 */
		/* 821E4310h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821E435C;  }
		/* 821E4310h case   37:*/		return 0x821E4314;
		  /* 821E4314h */ case   38:  		/* lwz R11, <#[R30 + 52]> */
		/* 821E4314h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E4314h case   38:*/		return 0x821E4318;
		  /* 821E4318h */ case   39:  		/* cmplwi CR6, R11, 0 */
		/* 821E4318h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4318h case   39:*/		return 0x821E431C;
		  /* 821E431Ch */ case   40:  		/* bc 12, CR6_EQ, 116 */
		/* 821E431Ch case   40:*/		if ( regs.CR[6].eq ) { return 0x821E4390;  }
		/* 821E431Ch case   40:*/		return 0x821E4320;
		  /* 821E4320h */ case   41:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E4320h case   41:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E4320h case   41:*/		return 0x821E4324;
		  /* 821E4324h */ case   42:  		/* lwz R10, <#[R11]> */
		/* 821E4324h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E4324h case   42:*/		return 0x821E4328;
		  /* 821E4328h */ case   43:  		/* rlwinm. R28, R10, 0, 21, 21 */
		/* 821E4328h case   43:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R28,regs.R10);
		/* 821E4328h case   43:*/		return 0x821E432C;
		  /* 821E432Ch */ case   44:  		/* bc 4, CR0_EQ, 12 */
		/* 821E432Ch case   44:*/		if ( !regs.CR[0].eq ) { return 0x821E4338;  }
		/* 821E432Ch case   44:*/		return 0x821E4330;
		  /* 821E4330h */ case   45:  		/* rlwinm. R10, R10, 0, 20, 20 */
		/* 821E4330h case   45:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R10,regs.R10);
		/* 821E4330h case   45:*/		return 0x821E4334;
		  /* 821E4334h */ case   46:  		/* bc 12, CR0_EQ, 92 */
		/* 821E4334h case   46:*/		if ( regs.CR[0].eq ) { return 0x821E4390;  }
		/* 821E4334h case   46:*/		return 0x821E4338;
	}
	return 0x821E4338;
} // Block from 821E427Ch-821E4338h (47 instructions)

//////////////////////////////////////////////////////
// Block at 821E4338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4338);
		  /* 821E4338h */ case    0:  		/* lwz R10, <#[R9 + 48]> */
		/* 821E4338h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000030) );
		/* 821E4338h case    0:*/		return 0x821E433C;
		  /* 821E433Ch */ case    1:  		/* lwz R11, <#[R11 + 48]> */
		/* 821E433Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821E433Ch case    1:*/		return 0x821E4340;
		  /* 821E4340h */ case    2:  		/* lwz R10, <#[R10 + 12]> */
		/* 821E4340h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821E4340h case    2:*/		return 0x821E4344;
		  /* 821E4344h */ case    3:  		/* lwz R10, <#[R10 + 44]> */
		/* 821E4344h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000002C) );
		/* 821E4344h case    3:*/		return 0x821E4348;
		  /* 821E4348h */ case    4:  		/* lwz R10, <#[R10 + 12]> */
		/* 821E4348h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821E4348h case    4:*/		return 0x821E434C;
		  /* 821E434Ch */ case    5:  		/* cmplw CR6, R10, R11 */
		/* 821E434Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821E434Ch case    5:*/		return 0x821E4350;
		  /* 821E4350h */ case    6:  		/* bc 4, CR6_EQ, 64 */
		/* 821E4350h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E4390;  }
		/* 821E4350h case    6:*/		return 0x821E4354;
		  /* 821E4354h */ case    7:  		/* mr R31, R22 */
		/* 821E4354h case    7:*/		regs.R31 = regs.R22;
		/* 821E4354h case    7:*/		return 0x821E4358;
		  /* 821E4358h */ case    8:  		/* b 60 */
		/* 821E4358h case    8:*/		return 0x821E4394;
		/* 821E4358h case    8:*/		return 0x821E435C;
	}
	return 0x821E435C;
} // Block from 821E4338h-821E435Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E435Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E435C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E435C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E435C);
		  /* 821E435Ch */ case    0:  		/* cmplwi CR6, R11, 13 */
		/* 821E435Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000D);
		/* 821E435Ch case    0:*/		return 0x821E4360;
		  /* 821E4360h */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 821E4360h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E4394;  }
		/* 821E4360h case    1:*/		return 0x821E4364;
		  /* 821E4364h */ case    2:  		/* lwz R11, <#[R9 + 16]> */
		/* 821E4364h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000010) );
		/* 821E4364h case    2:*/		return 0x821E4368;
		  /* 821E4368h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821E4368h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4368h case    3:*/		return 0x821E436C;
		  /* 821E436Ch */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 821E436Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821E4394;  }
		/* 821E436Ch case    4:*/		return 0x821E4370;
		  /* 821E4370h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 821E4370h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E4370h case    5:*/		return 0x821E4374;
		  /* 821E4374h */ case    6:  		/* cmpwi CR6, R10, 0 */
		/* 821E4374h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 821E4374h case    6:*/		return 0x821E4378;
		  /* 821E4378h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 821E4378h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E4388;  }
		/* 821E4378h case    7:*/		return 0x821E437C;
		  /* 821E437Ch */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E437Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E437Ch case    8:*/		return 0x821E4380;
		  /* 821E4380h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821E4380h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4380h case    9:*/		return 0x821E4384;
		  /* 821E4384h */ case   10:  		/* bc 4, CR6_EQ, -20 */
		/* 821E4384h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821E4370;  }
		/* 821E4384h case   10:*/		return 0x821E4388;
	}
	return 0x821E4388;
} // Block from 821E435Ch-821E4388h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E4388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4388);
		  /* 821E4388h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E4388h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4388h case    0:*/		return 0x821E438C;
		  /* 821E438Ch */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821E438Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821E4394;  }
		/* 821E438Ch case    1:*/		return 0x821E4390;
	}
	return 0x821E4390;
} // Block from 821E4388h-821E4390h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E4390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4390);
		  /* 821E4390h */ case    0:  		/* mr R3, R22 */
		/* 821E4390h case    0:*/		regs.R3 = regs.R22;
		/* 821E4390h case    0:*/		return 0x821E4394;
	}
	return 0x821E4394;
} // Block from 821E4390h-821E4394h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E4394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4394);
		  /* 821E4394h */ case    0:  		/* rlwinm R11, R9, 0, 0, 30 */
		/* 821E4394h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R9);
		/* 821E4394h case    0:*/		return 0x821E4398;
		  /* 821E4398h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E4398h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E4398h case    1:*/		return 0x821E439C;
		  /* 821E439Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E439Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E439Ch case    2:*/		return 0x821E43A0;
		  /* 821E43A0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E43A0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E43B0;  }
		/* 821E43A0h case    3:*/		return 0x821E43A4;
		  /* 821E43A4h */ case    4:  		/* mr R9, R11 */
		/* 821E43A4h case    4:*/		regs.R9 = regs.R11;
		/* 821E43A4h case    4:*/		return 0x821E43A8;
		  /* 821E43A8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E43A8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E43A8h case    5:*/		return 0x821E43AC;
		  /* 821E43ACh */ case    6:  		/* bc 4, CR6_EQ, -168 */
		/* 821E43ACh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E4304;  }
		/* 821E43ACh case    6:*/		return 0x821E43B0;
	}
	return 0x821E43B0;
} // Block from 821E4394h-821E43B0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E43B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E43B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E43B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E43B0);
		  /* 821E43B0h */ case    0:  		/* cmplwi CR6, R7, 0 */
		/* 821E43B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821E43B0h case    0:*/		return 0x821E43B4;
		  /* 821E43B4h */ case    1:  		/* bc 4, CR6_EQ, 148 */
		/* 821E43B4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E4448;  }
		/* 821E43B4h case    1:*/		return 0x821E43B8;
		  /* 821E43B8h */ case    2:  		/* mr R10, R8 */
		/* 821E43B8h case    2:*/		regs.R10 = regs.R8;
		/* 821E43B8h case    2:*/		return 0x821E43BC;
		  /* 821E43BCh */ case    3:  		/* cmplwi CR0, R8, 0 */
		/* 821E43BCh case    3:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 821E43BCh case    3:*/		return 0x821E43C0;
		  /* 821E43C0h */ case    4:  		/* bc 12, CR0_EQ, 136 */
		/* 821E43C0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E4448;  }
		/* 821E43C0h case    4:*/		return 0x821E43C4;
		  /* 821E43C4h */ case    5:  		/* lwz R11, <#[R10 + 8]> */
		/* 821E43C4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821E43C4h case    5:*/		return 0x821E43C8;
		  /* 821E43C8h */ case    6:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821E43C8h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821E43C8h case    6:*/		return 0x821E43CC;
		  /* 821E43CCh */ case    7:  		/* cmpwi CR6, R11, 62 */
		/* 821E43CCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003E);
		/* 821E43CCh case    7:*/		return 0x821E43D0;
		  /* 821E43D0h */ case    8:  		/* bc 12, CR6_GT, 56 */
		/* 821E43D0h case    8:*/		if ( regs.CR[6].gt ) { return 0x821E4408;  }
		/* 821E43D0h case    8:*/		return 0x821E43D4;
		  /* 821E43D4h */ case    9:  		/* cmpwi CR6, R11, 59 */
		/* 821E43D4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003B);
		/* 821E43D4h case    9:*/		return 0x821E43D8;
		  /* 821E43D8h */ case   10:  		/* bc 4, CR6_LT, 84 */
		/* 821E43D8h case   10:*/		if ( !regs.CR[6].lt ) { return 0x821E442C;  }
		/* 821E43D8h case   10:*/		return 0x821E43DC;
		  /* 821E43DCh */ case   11:  		/* cmpwi CR6, R11, 0 */
		/* 821E43DCh case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821E43DCh case   11:*/		return 0x821E43E0;
		  /* 821E43E0h */ case   12:  		/* bc 4, CR6_GT, 72 */
		/* 821E43E0h case   12:*/		if ( !regs.CR[6].gt ) { return 0x821E4428;  }
		/* 821E43E0h case   12:*/		return 0x821E43E4;
		  /* 821E43E4h */ case   13:  		/* cmpwi CR6, R11, 12 */
		/* 821E43E4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 821E43E4h case   13:*/		return 0x821E43E8;
		  /* 821E43E8h */ case   14:  		/* bc 4, CR6_GT, 68 */
		/* 821E43E8h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821E442C;  }
		/* 821E43E8h case   14:*/		return 0x821E43EC;
		  /* 821E43ECh */ case   15:  		/* cmpwi CR6, R11, 15 */
		/* 821E43ECh case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821E43ECh case   15:*/		return 0x821E43F0;
		  /* 821E43F0h */ case   16:  		/* bc 4, CR6_GT, 56 */
		/* 821E43F0h case   16:*/		if ( !regs.CR[6].gt ) { return 0x821E4428;  }
		/* 821E43F0h case   16:*/		return 0x821E43F4;
		  /* 821E43F4h */ case   17:  		/* cmpwi CR6, R11, 18 */
		/* 821E43F4h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000012);
		/* 821E43F4h case   17:*/		return 0x821E43F8;
		  /* 821E43F8h */ case   18:  		/* bc 4, CR6_GT, 52 */
		/* 821E43F8h case   18:*/		if ( !regs.CR[6].gt ) { return 0x821E442C;  }
		/* 821E43F8h case   18:*/		return 0x821E43FC;
		  /* 821E43FCh */ case   19:  		/* cmpwi CR6, R11, 55 */
		/* 821E43FCh case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000037);
		/* 821E43FCh case   19:*/		return 0x821E4400;
		  /* 821E4400h */ case   20:  		/* bc 12, CR6_EQ, 44 */
		/* 821E4400h case   20:*/		if ( regs.CR[6].eq ) { return 0x821E442C;  }
		/* 821E4400h case   20:*/		return 0x821E4404;
		  /* 821E4404h */ case   21:  		/* b 36 */
		/* 821E4404h case   21:*/		return 0x821E4428;
		/* 821E4404h case   21:*/		return 0x821E4408;
	}
	return 0x821E4408;
} // Block from 821E43B0h-821E4408h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821E4408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4408);
		  /* 821E4408h */ case    0:  		/* cmpwi CR6, R11, 103 */
		/* 821E4408h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000067);
		/* 821E4408h case    0:*/		return 0x821E440C;
		  /* 821E440Ch */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 821E440Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821E442C;  }
		/* 821E440Ch case    1:*/		return 0x821E4410;
		  /* 821E4410h */ case    2:  		/* cmpwi CR6, R11, 110 */
		/* 821E4410h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000006E);
		/* 821E4410h case    2:*/		return 0x821E4414;
		  /* 821E4414h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821E4414h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E442C;  }
		/* 821E4414h case    3:*/		return 0x821E4418;
		  /* 821E4418h */ case    4:  		/* cmpwi CR6, R11, 116 */
		/* 821E4418h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000074);
		/* 821E4418h case    4:*/		return 0x821E441C;
		  /* 821E441Ch */ case    5:  		/* bc 4, CR6_GT, 12 */
		/* 821E441Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x821E4428;  }
		/* 821E441Ch case    5:*/		return 0x821E4420;
		  /* 821E4420h */ case    6:  		/* cmpwi CR6, R11, 118 */
		/* 821E4420h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000076);
		/* 821E4420h case    6:*/		return 0x821E4424;
		  /* 821E4424h */ case    7:  		/* bc 4, CR6_GT, 8 */
		/* 821E4424h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821E442C;  }
		/* 821E4424h case    7:*/		return 0x821E4428;
	}
	return 0x821E4428;
} // Block from 821E4408h-821E4428h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E4428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4428);
		  /* 821E4428h */ case    0:  		/* mr R31, R22 */
		/* 821E4428h case    0:*/		regs.R31 = regs.R22;
		/* 821E4428h case    0:*/		return 0x821E442C;
	}
	return 0x821E442C;
} // Block from 821E4428h-821E442Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E442Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E442C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E442C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E442C);
		  /* 821E442Ch */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821E442Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821E442Ch case    0:*/		return 0x821E4430;
		  /* 821E4430h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E4430h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E4430h case    1:*/		return 0x821E4434;
		  /* 821E4434h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E4434h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E4434h case    2:*/		return 0x821E4438;
		  /* 821E4438h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E4438h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E4448;  }
		/* 821E4438h case    3:*/		return 0x821E443C;
		  /* 821E443Ch */ case    4:  		/* mr R10, R11 */
		/* 821E443Ch case    4:*/		regs.R10 = regs.R11;
		/* 821E443Ch case    4:*/		return 0x821E4440;
		  /* 821E4440h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E4440h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4440h case    5:*/		return 0x821E4444;
		  /* 821E4444h */ case    6:  		/* bc 4, CR6_EQ, -128 */
		/* 821E4444h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E43C4;  }
		/* 821E4444h case    6:*/		return 0x821E4448;
	}
	return 0x821E4448;
} // Block from 821E442Ch-821E4448h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4448);
		  /* 821E4448h */ case    0:  		/* rlwinm R11, R6, 0, 0, 30 */
		/* 821E4448h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R6);
		/* 821E4448h case    0:*/		return 0x821E444C;
		  /* 821E444Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E444Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E444Ch case    1:*/		return 0x821E4450;
		  /* 821E4450h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E4450h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E4450h case    2:*/		return 0x821E4454;
		  /* 821E4454h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E4454h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E4464;  }
		/* 821E4454h case    3:*/		return 0x821E4458;
		  /* 821E4458h */ case    4:  		/* mr R6, R11 */
		/* 821E4458h case    4:*/		regs.R6 = regs.R11;
		/* 821E4458h case    4:*/		return 0x821E445C;
		  /* 821E445Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E445Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E445Ch case    5:*/		return 0x821E4460;
		  /* 821E4460h */ case    6:  		/* bc 4, CR6_EQ, -388 */
		/* 821E4460h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E42DC;  }
		/* 821E4460h case    6:*/		return 0x821E4464;
	}
	return 0x821E4464;
} // Block from 821E4448h-821E4464h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4464);
		  /* 821E4464h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E4464h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E4464h case    0:*/		return 0x821E4468;
		  /* 821E4468h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821E4468h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E4474;  }
		/* 821E4468h case    1:*/		return 0x821E446C;
		  /* 821E446Ch */ case    2:  		/* rlwinm. R11, R31, 0, 24, 31 */
		/* 821E446Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R31);
		/* 821E446Ch case    2:*/		return 0x821E4470;
		  /* 821E4470h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E4470h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E447C;  }
		/* 821E4470h case    3:*/		return 0x821E4474;
	}
	return 0x821E4474;
} // Block from 821E4464h-821E4474h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E4474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4474);
		  /* 821E4474h */ case    0:  		/* rlwinm R11, R29, 0, 27, 25 */
		/* 821E4474h case    0:*/		cpu::op::rlwinm<0,0,27,25>(regs,&regs.R11,regs.R29);
		/* 821E4474h case    0:*/		return 0x821E4478;
		  /* 821E4478h */ case    1:  		/* stw R11, <#[R30 + 60]> */
		/* 821E4478h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E4478h case    1:*/		return 0x821E447C;
	}
	return 0x821E447C;
} // Block from 821E4474h-821E447Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E447Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E447C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E447C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E447C);
		  /* 821E447Ch */ case    0:  		/* lwz R11, <#[R30 + 36]> */
		/* 821E447Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E447Ch case    0:*/		return 0x821E4480;
		  /* 821E4480h */ case    1:  		/* rlwinm R10, R11, 0, 7, 21 */
		/* 821E4480h case    1:*/		cpu::op::rlwinm<0,0,7,21>(regs,&regs.R10,regs.R11);
		/* 821E4480h case    1:*/		return 0x821E4484;
		  /* 821E4484h */ case    2:  		/* cmplw CR6, R10, R24 */
		/* 821E4484h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R24);
		/* 821E4484h case    2:*/		return 0x821E4488;
		  /* 821E4488h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E4488h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E44A8;  }
		/* 821E4488h case    3:*/		return 0x821E448C;
		  /* 821E448Ch */ case    4:  		/* lwz R10, <#[R30 + 60]> */
		/* 821E448Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E448Ch case    4:*/		return 0x821E4490;
		  /* 821E4490h */ case    5:  		/* nor R10, R10, R10 */
		/* 821E4490h case    5:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821E4490h case    5:*/		return 0x821E4494;
		  /* 821E4494h */ case    6:  		/* rlwimi R11, R10, 18, 5, 5 */
		/* 821E4494h case    6:*/		cpu::op::rlwimi<0,18,5,5>(regs,&regs.R11,regs.R10);
		/* 821E4494h case    6:*/		return 0x821E4498;
		  /* 821E4498h */ case    7:  		/* stw R11, <#[R30 + 36]> */
		/* 821E4498h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E4498h case    7:*/		return 0x821E449C;
		  /* 821E449Ch */ case    8:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E449Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E449Ch case    8:*/		return 0x821E44A0;
		  /* 821E44A0h */ case    9:  		/* ori R11, R11, 256 */
		/* 821E44A0h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821E44A0h case    9:*/		return 0x821E44A4;
		  /* 821E44A4h */ case   10:  		/* stw R11, <#[R30 + 60]> */
		/* 821E44A4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E44A4h case   10:*/		return 0x821E44A8;
	}
	return 0x821E44A8;
} // Block from 821E447Ch-821E44A8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E44A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E44A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E44A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E44A8);
		  /* 821E44A8h */ case    0:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E44A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E44A8h case    0:*/		return 0x821E44AC;
		  /* 821E44ACh */ case    1:  		/* rlwinm. R10, R11, 0, 30, 30 */
		/* 821E44ACh case    1:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R11);
		/* 821E44ACh case    1:*/		return 0x821E44B0;
		  /* 821E44B0h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821E44B0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E44BC;  }
		/* 821E44B0h case    2:*/		return 0x821E44B4;
		  /* 821E44B4h */ case    3:  		/* ori R11, R11, 256 */
		/* 821E44B4h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821E44B4h case    3:*/		return 0x821E44B8;
		  /* 821E44B8h */ case    4:  		/* stw R11, <#[R30 + 60]> */
		/* 821E44B8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E44B8h case    4:*/		return 0x821E44BC;
	}
	return 0x821E44BC;
} // Block from 821E44A8h-821E44BCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E44BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E44BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E44BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E44BC);
		  /* 821E44BCh */ case    0:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E44BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E44BCh case    0:*/		return 0x821E44C0;
		  /* 821E44C0h */ case    1:  		/* rlwinm. R10, R11, 0, 24, 24 */
		/* 821E44C0h case    1:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R11);
		/* 821E44C0h case    1:*/		return 0x821E44C4;
		  /* 821E44C4h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821E44C4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E44D4;  }
		/* 821E44C4h case    2:*/		return 0x821E44C8;
		  /* 821E44C8h */ case    3:  		/* ori R11, R11, 1 */
		/* 821E44C8h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E44C8h case    3:*/		return 0x821E44CC;
		  /* 821E44CCh */ case    4:  		/* mr R26, R16 */
		/* 821E44CCh case    4:*/		regs.R26 = regs.R16;
		/* 821E44CCh case    4:*/		return 0x821E44D0;
		  /* 821E44D0h */ case    5:  		/* stw R11, <#[R30 + 60]> */
		/* 821E44D0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E44D0h case    5:*/		return 0x821E44D4;
	}
	return 0x821E44D4;
} // Block from 821E44BCh-821E44D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E44D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E44D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E44D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E44D4);
		  /* 821E44D4h */ case    0:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E44D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E44D4h case    0:*/		return 0x821E44D8;
		  /* 821E44D8h */ case    1:  		/* rlwinm. R10, R11, 0, 23, 23 */
		/* 821E44D8h case    1:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R11);
		/* 821E44D8h case    1:*/		return 0x821E44DC;
		  /* 821E44DCh */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821E44DCh case    2:*/		if ( regs.CR[0].eq ) { return 0x821E44EC;  }
		/* 821E44DCh case    2:*/		return 0x821E44E0;
		  /* 821E44E0h */ case    3:  		/* stw R16, <#[R30 + 48]> */
		/* 821E44E0h case    3:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R30 + 0x00000030) );
		/* 821E44E0h case    3:*/		return 0x821E44E4;
		  /* 821E44E4h */ case    4:  		/* stw R16, <#[R30 + 52]> */
		/* 821E44E4h case    4:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R30 + 0x00000034) );
		/* 821E44E4h case    4:*/		return 0x821E44E8;
		  /* 821E44E8h */ case    5:  		/* b 132 */
		/* 821E44E8h case    5:*/		return 0x821E456C;
		/* 821E44E8h case    5:*/		return 0x821E44EC;
	}
	return 0x821E44EC;
} // Block from 821E44D4h-821E44ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E44ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E44EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E44EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E44EC);
		  /* 821E44ECh */ case    0:  		/* lwz R10, <#[R30 + 48]> */
		/* 821E44ECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 821E44ECh case    0:*/		return 0x821E44F0;
		  /* 821E44F0h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821E44F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E44F0h case    1:*/		return 0x821E44F4;
		  /* 821E44F4h */ case    2:  		/* bc 4, CR6_EQ, 120 */
		/* 821E44F4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E456C;  }
		/* 821E44F4h case    2:*/		return 0x821E44F8;
		  /* 821E44F8h */ case    3:  		/* rlwinm. R10, R11, 0, 24, 24 */
		/* 821E44F8h case    3:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R11);
		/* 821E44F8h case    3:*/		return 0x821E44FC;
		  /* 821E44FCh */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 821E44FCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E4510;  }
		/* 821E44FCh case    4:*/		return 0x821E4500;
		  /* 821E4500h */ case    5:  		/* rlwinm. R10, R11, 0, 26, 26 */
		/* 821E4500h case    5:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R11);
		/* 821E4500h case    5:*/		return 0x821E4504;
		  /* 821E4504h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 821E4504h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E4510;  }
		/* 821E4504h case    6:*/		return 0x821E4508;
		  /* 821E4508h */ case    7:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 821E4508h case    7:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 821E4508h case    7:*/		return 0x821E450C;
		  /* 821E450Ch */ case    8:  		/* bc 12, CR0_EQ, 96 */
		/* 821E450Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821E456C;  }
		/* 821E450Ch case    8:*/		return 0x821E4510;
	}
	return 0x821E4510;
} // Block from 821E44ECh-821E4510h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E4510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4510);
		  /* 821E4510h */ case    0:  		/* lwz R11, <#[R30 + 52]> */
		/* 821E4510h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E4510h case    0:*/		return 0x821E4514;
		  /* 821E4514h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E4514h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4514h case    1:*/		return 0x821E4518;
		  /* 821E4518h */ case    2:  		/* bc 4, CR6_EQ, 36 */
		/* 821E4518h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E453C;  }
		/* 821E4518h case    2:*/		return 0x821E451C;
		  /* 821E451Ch */ case    3:  		/* lwz R11, <#[R30 + 56]> */
		/* 821E451Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 821E451Ch case    3:*/		return 0x821E4520;
		  /* 821E4520h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E4520h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4520h case    4:*/		return 0x821E4524;
		  /* 821E4524h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 821E4524h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E453C;  }
		/* 821E4524h case    5:*/		return 0x821E4528;
		  /* 821E4528h */ case    6:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E4528h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E4528h case    6:*/		return 0x821E452C;
		  /* 821E452Ch */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821E452Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E452Ch case    7:*/		return 0x821E4530;
		  /* 821E4530h */ case    8:  		/* rlwinm. R10, R10, 0, 4, 4 */
		/* 821E4530h case    8:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R10,regs.R10);
		/* 821E4530h case    8:*/		return 0x821E4534;
		  /* 821E4534h */ case    9:  		/* bc 12, CR0_EQ, 8 */
		/* 821E4534h case    9:*/		if ( regs.CR[0].eq ) { return 0x821E453C;  }
		/* 821E4534h case    9:*/		return 0x821E4538;
		  /* 821E4538h */ case   10:  		/* stw R11, <#[R30 + 52]> */
		/* 821E4538h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E4538h case   10:*/		return 0x821E453C;
	}
	return 0x821E453C;
} // Block from 821E4510h-821E453Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E453Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E453C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E453C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E453C);
		  /* 821E453Ch */ case    0:  		/* lwz R11, <#[R30 + 52]> */
		/* 821E453Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E453Ch case    0:*/		return 0x821E4540;
		  /* 821E4540h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E4540h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4540h case    1:*/		return 0x821E4544;
		  /* 821E4544h */ case    2:  		/* bc 4, CR6_EQ, 36 */
		/* 821E4544h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E4568;  }
		/* 821E4544h case    2:*/		return 0x821E4548;
		  /* 821E4548h */ case    3:  		/* lwz R11, <#[R30 + 36]> */
		/* 821E4548h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E4548h case    3:*/		return 0x821E454C;
		  /* 821E454Ch */ case    4:  		/* rlwinm. R11, R11, 0, 7, 21 */
		/* 821E454Ch case    4:*/		cpu::op::rlwinm<1,0,7,21>(regs,&regs.R11,regs.R11);
		/* 821E454Ch case    4:*/		return 0x821E4550;
		  /* 821E4550h */ case    5:  		/* bc 4, CR0_EQ, 24 */
		/* 821E4550h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821E4568;  }
		/* 821E4550h case    5:*/		return 0x821E4554;
		  /* 821E4554h */ case    6:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E4554h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E4554h case    6:*/		return 0x821E4558;
		  /* 821E4558h */ case    7:  		/* rlwinm. R10, R11, 0, 24, 24 */
		/* 821E4558h case    7:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R11);
		/* 821E4558h case    7:*/		return 0x821E455C;
		  /* 821E455Ch */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821E455Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821E456C;  }
		/* 821E455Ch case    8:*/		return 0x821E4560;
		  /* 821E4560h */ case    9:  		/* ori R11, R11, 2048 */
		/* 821E4560h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x800);
		/* 821E4560h case    9:*/		return 0x821E4564;
		  /* 821E4564h */ case   10:  		/* b -816 */
		/* 821E4564h case   10:*/		return 0x821E4234;
		/* 821E4564h case   10:*/		return 0x821E4568;
	}
	return 0x821E4568;
} // Block from 821E453Ch-821E4568h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E4568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4568);
		  /* 821E4568h */ case    0:  		/* stw R22, <#[R30 + 48]> */
		/* 821E4568h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R30 + 0x00000030) );
		/* 821E4568h case    0:*/		return 0x821E456C;
	}
	return 0x821E456C;
} // Block from 821E4568h-821E456Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E456Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E456C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E456C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E456C);
		  /* 821E456Ch */ case    0:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E456Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E456Ch case    0:*/		return 0x821E4570;
		  /* 821E4570h */ case    1:  		/* rlwinm. R10, R11, 0, 24, 24 */
		/* 821E4570h case    1:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R11);
		/* 821E4570h case    1:*/		return 0x821E4574;
		  /* 821E4574h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 821E4574h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E4580;  }
		/* 821E4574h case    2:*/		return 0x821E4578;
		  /* 821E4578h */ case    3:  		/* rlwinm. R10, R11, 0, 25, 25 */
		/* 821E4578h case    3:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R11);
		/* 821E4578h case    3:*/		return 0x821E457C;
		  /* 821E457Ch */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 821E457Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821E4588;  }
		/* 821E457Ch case    4:*/		return 0x821E4580;
	}
	return 0x821E4580;
} // Block from 821E456Ch-821E4580h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E4580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4580);
		  /* 821E4580h */ case    0:  		/* ori R11, R11, 32 */
		/* 821E4580h case    0:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821E4580h case    0:*/		return 0x821E4584;
		  /* 821E4584h */ case    1:  		/* stw R11, <#[R30 + 60]> */
		/* 821E4584h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E4584h case    1:*/		return 0x821E4588;
	}
	return 0x821E4588;
} // Block from 821E4580h-821E4588h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E4588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4588);
		  /* 821E4588h */ case    0:  		/* rlwinm. R10, R26, 0, 24, 31 */
		/* 821E4588h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R26);
		/* 821E4588h case    0:*/		return 0x821E458C;
		  /* 821E458Ch */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 821E458Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821E45A8;  }
		/* 821E458Ch case    1:*/		return 0x821E4590;
		  /* 821E4590h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 821E4590h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821E4590h case    2:*/		return 0x821E4594;
		  /* 821E4594h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 821E4594h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E459C;  }
		/* 821E4594h case    3:*/		return 0x821E4598;
		  /* 821E4598h */ case    4:  		/* stw R27, <#[R1 + 144]> */
		/* 821E4598h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000090) );
		/* 821E4598h case    4:*/		return 0x821E459C;
	}
	return 0x821E459C;
} // Block from 821E4588h-821E459Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E459Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E459C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E459C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E459C);
		  /* 821E459Ch */ case    0:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E459Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E459Ch case    0:*/		return 0x821E45A0;
		  /* 821E45A0h */ case    1:  		/* ori R11, R11, 4 */
		/* 821E45A0h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E45A0h case    1:*/		return 0x821E45A4;
		  /* 821E45A4h */ case    2:  		/* stw R11, <#[R30 + 60]> */
		/* 821E45A4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E45A4h case    2:*/		return 0x821E45A8;
	}
	return 0x821E45A8;
} // Block from 821E459Ch-821E45A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E45A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E45A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E45A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E45A8);
		  /* 821E45A8h */ case    0:  		/* lwz R11, <#[R30 + 60]> */
		/* 821E45A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821E45A8h case    0:*/		return 0x821E45AC;
		  /* 821E45ACh */ case    1:  		/* rlwinm. R9, R11, 0, 30, 30 */
		/* 821E45ACh case    1:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R11);
		/* 821E45ACh case    1:*/		return 0x821E45B0;
		  /* 821E45B0h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821E45B0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E45BC;  }
		/* 821E45B0h case    2:*/		return 0x821E45B4;
		  /* 821E45B4h */ case    3:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821E45B4h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E45B4h case    3:*/		return 0x821E45B8;
		  /* 821E45B8h */ case    4:  		/* bc 4, CR0_EQ, -88 */
		/* 821E45B8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E4560;  }
		/* 821E45B8h case    4:*/		return 0x821E45BC;
	}
	return 0x821E45BC;
} // Block from 821E45A8h-821E45BCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E45BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E45BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E45BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E45BC);
		  /* 821E45BCh */ case    0:  		/* rlwinm. R9, R11, 0, 24, 24 */
		/* 821E45BCh case    0:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R9,regs.R11);
		/* 821E45BCh case    0:*/		return 0x821E45C0;
		  /* 821E45C0h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821E45C0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E45CC;  }
		/* 821E45C0h case    1:*/		return 0x821E45C4;
		  /* 821E45C4h */ case    2:  		/* rlwinm. R9, R11, 0, 23, 23 */
		/* 821E45C4h case    2:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R9,regs.R11);
		/* 821E45C4h case    2:*/		return 0x821E45C8;
		  /* 821E45C8h */ case    3:  		/* bc 4, CR0_EQ, -104 */
		/* 821E45C8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E4560;  }
		/* 821E45C8h case    3:*/		return 0x821E45CC;
	}
	return 0x821E45CC;
} // Block from 821E45BCh-821E45CCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E45CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E45CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E45CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E45CC);
		  /* 821E45CCh */ case    0:  		/* lwz R11, <#[R30 + 52]> */
		/* 821E45CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E45CCh case    0:*/		return 0x821E45D0;
		  /* 821E45D0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E45D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E45D0h case    1:*/		return 0x821E45D4;
		  /* 821E45D4h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821E45D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E45E8;  }
		/* 821E45D4h case    2:*/		return 0x821E45D8;
		  /* 821E45D8h */ case    3:  		/* rlwinm R9, R11, 0, 0, 31 */
		/* 821E45D8h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R11);
		/* 821E45D8h case    3:*/		return 0x821E45DC;
		  /* 821E45DCh */ case    4:  		/* lwz R9, <#[R9]> */
		/* 821E45DCh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 821E45DCh case    4:*/		return 0x821E45E0;
		  /* 821E45E0h */ case    5:  		/* rlwinm. R9, R9, 0, 2, 2 */
		/* 821E45E0h case    5:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R9,regs.R9);
		/* 821E45E0h case    5:*/		return 0x821E45E4;
		  /* 821E45E4h */ case    6:  		/* bc 4, CR0_EQ, 24 */
		/* 821E45E4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E45FC;  }
		/* 821E45E4h case    6:*/		return 0x821E45E8;
	}
	return 0x821E45E8;
} // Block from 821E45CCh-821E45E8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E45E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E45E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E45E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E45E8);
		  /* 821E45E8h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821E45E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E45E8h case    0:*/		return 0x821E45EC;
		  /* 821E45ECh */ case    1:  		/* bc 12, CR6_EQ, 324 */
		/* 821E45ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x821E4730;  }
		/* 821E45ECh case    1:*/		return 0x821E45F0;
		  /* 821E45F0h */ case    2:  		/* lwz R10, <#[R30 + 36]> */
		/* 821E45F0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000024) );
		/* 821E45F0h case    2:*/		return 0x821E45F4;
		  /* 821E45F4h */ case    3:  		/* rlwinm. R10, R10, 0, 4, 4 */
		/* 821E45F4h case    3:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R10,regs.R10);
		/* 821E45F4h case    3:*/		return 0x821E45F8;
		  /* 821E45F8h */ case    4:  		/* bc 12, CR0_EQ, 312 */
		/* 821E45F8h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E4730;  }
		/* 821E45F8h case    4:*/		return 0x821E45FC;
	}
	return 0x821E45FC;
} // Block from 821E45E8h-821E45FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E45FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E45FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E45FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E45FC);
		  /* 821E45FCh */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E45FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E45FCh case    0:*/		return 0x821E4600;
		  /* 821E4600h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821E4600h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E460C;  }
		/* 821E4600h case    1:*/		return 0x821E4604;
		  /* 821E4604h */ case    2:  		/* lwz R28, <#[R30 + 52]> */
		/* 821E4604h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000034) );
		/* 821E4604h case    2:*/		return 0x821E4608;
		  /* 821E4608h */ case    3:  		/* b 8 */
		/* 821E4608h case    3:*/		return 0x821E4610;
		/* 821E4608h case    3:*/		return 0x821E460C;
	}
	return 0x821E460C;
} // Block from 821E45FCh-821E460Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E460Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E460C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E460C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E460C);
		  /* 821E460Ch */ case    0:  		/* lwz R28, <#[R30 + 56]> */
		/* 821E460Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000038) );
		/* 821E460Ch case    0:*/		return 0x821E4610;
	}
	return 0x821E4610;
} // Block from 821E460Ch-821E4610h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E4610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4610);
		  /* 821E4610h */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E4610h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E4610h case    0:*/		return 0x821E4614;
		  /* 821E4614h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E4614h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E4614h case    1:*/		return 0x821E4618;
		  /* 821E4618h */ case    2:  		/* bc 4, CR0_EQ, 280 */
		/* 821E4618h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E4730;  }
		/* 821E4618h case    2:*/		return 0x821E461C;
		  /* 821E461Ch */ case    3:  		/* mr R29, R11 */
		/* 821E461Ch case    3:*/		regs.R29 = regs.R11;
		/* 821E461Ch case    3:*/		return 0x821E4620;
		  /* 821E4620h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821E4620h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E4620h case    4:*/		return 0x821E4624;
		  /* 821E4624h */ case    5:  		/* bc 12, CR0_EQ, 268 */
		/* 821E4624h case    5:*/		if ( regs.CR[0].eq ) { return 0x821E4730;  }
		/* 821E4624h case    5:*/		return 0x821E4628;
		  /* 821E4628h */ case    6:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E4628h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E4628h case    6:*/		return 0x821E462C;
		  /* 821E462Ch */ case    7:  		/* subf R11, R11, R30 */
		/* 821E462Ch case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821E462Ch case    7:*/		return 0x821E4630;
		  /* 821E4630h */ case    8:  		/* divw R10, R11, R21 */
		/* 821E4630h case    8:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R21);
		/* 821E4630h case    8:*/		return 0x821E4634;
		  /* 821E4634h */ case    9:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E4634h case    9:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E4634h case    9:*/		return 0x821E4638;
		  /* 821E4638h */ case   10:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821E4638h case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821E4638h case   10:*/		return 0x821E463C;
		  /* 821E463Ch */ case   11:  		/* addi R11, R11, 21 */
		/* 821E463Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E463Ch case   11:*/		return 0x821E4640;
		  /* 821E4640h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E4640h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E4640h case   12:*/		return 0x821E4644;
		  /* 821E4644h */ case   13:  		/* lwzx R11, <#[R11 + R29]> */
		/* 821E4644h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 821E4644h case   13:*/		return 0x821E4648;
		  /* 821E4648h */ case   14:  		/* srw R11, R11, R10 */
		/* 821E4648h case   14:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E4648h case   14:*/		return 0x821E464C;
		  /* 821E464Ch */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E464Ch case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E464Ch case   15:*/		return 0x821E4650;
		  /* 821E4650h */ case   16:  		/* bc 12, CR0_EQ, 196 */
		/* 821E4650h case   16:*/		if ( regs.CR[0].eq ) { return 0x821E4714;  }
		/* 821E4650h case   16:*/		return 0x821E4654;
		  /* 821E4654h */ case   17:  		/* lwz R11, <#[R29 + 48]> */
		/* 821E4654h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821E4654h case   17:*/		return 0x821E4658;
		  /* 821E4658h */ case   18:  		/* lwz R10, <#[R30 + 8]> */
		/* 821E4658h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821E4658h case   18:*/		return 0x821E465C;
		  /* 821E465Ch */ case   19:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821E465Ch case   19:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821E465Ch case   19:*/		return 0x821E4660;
		  /* 821E4660h */ case   20:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821E4660h case   20:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821E4660h case   20:*/		return 0x821E4664;
		  /* 821E4664h */ case   21:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821E4664h case   21:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821E4664h case   21:*/		return 0x821E4668;
		  /* 821E4668h */ case   22:  		/* addi R11, R11, 1 */
		/* 821E4668h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E4668h case   22:*/		return 0x821E466C;
		  /* 821E466Ch */ case   23:  		/* lwz R10, <#[R10 + 40]> */
		/* 821E466Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 821E466Ch case   23:*/		return 0x821E4670;
		  /* 821E4670h */ case   24:  		/* slw R9, R22, R9 */
		/* 821E4670h case   24:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R22,regs.R9);
		/* 821E4670h case   24:*/		return 0x821E4674;
		  /* 821E4674h */ case   25:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E4674h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E4674h case   25:*/		return 0x821E4678;
		  /* 821E4678h */ case   26:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821E4678h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821E4678h case   26:*/		return 0x821E467C;
		  /* 821E467Ch */ case   27:  		/* and. R11, R11, R9 */
		/* 821E467Ch case   27:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E467Ch case   27:*/		return 0x821E4680;
		  /* 821E4680h */ case   28:  		/* bc 12, CR0_EQ, 148 */
		/* 821E4680h case   28:*/		if ( regs.CR[0].eq ) { return 0x821E4714;  }
		/* 821E4680h case   28:*/		return 0x821E4684;
		  /* 821E4684h */ case   29:  		/* lwz R11, <#[R29 + 28]> */
		/* 821E4684h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E4684h case   29:*/		return 0x821E4688;
		  /* 821E4688h */ case   30:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E4688h case   30:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E4688h case   30:*/		return 0x821E468C;
		  /* 821E468Ch */ case   31:  		/* bc 4, CR0_EQ, 136 */
		/* 821E468Ch case   31:*/		if ( !regs.CR[0].eq ) { return 0x821E4714;  }
		/* 821E468Ch case   31:*/		return 0x821E4690;
		  /* 821E4690h */ case   32:  		/* mr R31, R11 */
		/* 821E4690h case   32:*/		regs.R31 = regs.R11;
		/* 821E4690h case   32:*/		return 0x821E4694;
		  /* 821E4694h */ case   33:  		/* cmplwi CR0, R11, 0 */
		/* 821E4694h case   33:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E4694h case   33:*/		return 0x821E4698;
		  /* 821E4698h */ case   34:  		/* bc 12, CR0_EQ, 124 */
		/* 821E4698h case   34:*/		if ( regs.CR[0].eq ) { return 0x821E4714;  }
		/* 821E4698h case   34:*/		return 0x821E469C;
		  /* 821E469Ch */ case   35:  		/* lwz R5, <#[R31 + 16]> */
		/* 821E469Ch case   35:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000010) );
		/* 821E469Ch case   35:*/		return 0x821E46A0;
		  /* 821E46A0h */ case   36:  		/* cmplwi CR6, R5, 0 */
		/* 821E46A0h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821E46A0h case   36:*/		return 0x821E46A4;
		  /* 821E46A4h */ case   37:  		/* bc 12, CR6_EQ, 84 */
		/* 821E46A4h case   37:*/		if ( regs.CR[6].eq ) { return 0x821E46F8;  }
		/* 821E46A4h case   37:*/		return 0x821E46A8;
		  /* 821E46A8h */ case   38:  		/* lwz R11, <#[R5]> */
		/* 821E46A8h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821E46A8h case   38:*/		return 0x821E46AC;
		  /* 821E46ACh */ case   39:  		/* cmpwi CR6, R11, 0 */
		/* 821E46ACh case   39:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821E46ACh case   39:*/		return 0x821E46B0;
		  /* 821E46B0h */ case   40:  		/* bc 12, CR6_EQ, 16 */
		/* 821E46B0h case   40:*/		if ( regs.CR[6].eq ) { return 0x821E46C0;  }
		/* 821E46B0h case   40:*/		return 0x821E46B4;
		  /* 821E46B4h */ case   41:  		/* lwz R5, <#[R5 + 4]> */
		/* 821E46B4h case   41:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000004) );
		/* 821E46B4h case   41:*/		return 0x821E46B8;
		  /* 821E46B8h */ case   42:  		/* cmplwi CR6, R5, 0 */
		/* 821E46B8h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821E46B8h case   42:*/		return 0x821E46BC;
		  /* 821E46BCh */ case   43:  		/* bc 4, CR6_EQ, -20 */
		/* 821E46BCh case   43:*/		if ( !regs.CR[6].eq ) { return 0x821E46A8;  }
		/* 821E46BCh case   43:*/		return 0x821E46C0;
	}
	return 0x821E46C0;
} // Block from 821E4610h-821E46C0h (44 instructions)

//////////////////////////////////////////////////////
// Block at 821E46C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E46C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E46C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E46C0);
		  /* 821E46C0h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 821E46C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821E46C0h case    0:*/		return 0x821E46C4;
		  /* 821E46C4h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 821E46C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E46F8;  }
		/* 821E46C4h case    1:*/		return 0x821E46C8;
		  /* 821E46C8h */ case    2:  		/* lwz R11, <#[R5 + 8]> */
		/* 821E46C8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821E46C8h case    2:*/		return 0x821E46CC;
		  /* 821E46CCh */ case    3:  		/* lwz R10, <#[R30 + 36]> */
		/* 821E46CCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000024) );
		/* 821E46CCh case    3:*/		return 0x821E46D0;
		  /* 821E46D0h */ case    4:  		/* rlwinm R11, R11, 0, 18, 31 */
		/* 821E46D0h case    4:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R11,regs.R11);
		/* 821E46D0h case    4:*/		return 0x821E46D4;
		  /* 821E46D4h */ case    5:  		/* rlwinm R10, R10, 22, 17, 31 */
		/* 821E46D4h case    5:*/		cpu::op::rlwinm<0,22,17,31>(regs,&regs.R10,regs.R10);
		/* 821E46D4h case    5:*/		return 0x821E46D8;
		  /* 821E46D8h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 821E46D8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E46D8h case    6:*/		return 0x821E46DC;
		  /* 821E46DCh */ case    7:  		/* bc 4, CR6_LT, 28 */
		/* 821E46DCh case    7:*/		if ( !regs.CR[6].lt ) { return 0x821E46F8;  }
		/* 821E46DCh case    7:*/		return 0x821E46E0;
		  /* 821E46E0h */ case    8:  		/* mr R6, R28 */
		/* 821E46E0h case    8:*/		regs.R6 = regs.R28;
		/* 821E46E0h case    8:*/		return 0x821E46E4;
		  /* 821E46E4h */ case    9:  		/* mr R4, R31 */
		/* 821E46E4h case    9:*/		regs.R4 = regs.R31;
		/* 821E46E4h case    9:*/		return 0x821E46E8;
		  /* 821E46E8h */ case   10:  		/* mr R3, R20 */
		/* 821E46E8h case   10:*/		regs.R3 = regs.R20;
		/* 821E46E8h case   10:*/		return 0x821E46EC;
		  /* 821E46ECh */ case   11:  		/* bl -157252 */
		/* 821E46ECh case   11:*/		regs.LR = 0x821E46F0; return 0x821BE0A8;
		/* 821E46ECh case   11:*/		return 0x821E46F0;
		  /* 821E46F0h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E46F0h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E46F0h case   12:*/		return 0x821E46F4;
		  /* 821E46F4h */ case   13:  		/* bc 4, CR0_EQ, 9028 */
		/* 821E46F4h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821E6A38;  }
		/* 821E46F4h case   13:*/		return 0x821E46F8;
	}
	return 0x821E46F8;
} // Block from 821E46C0h-821E46F8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E46F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E46F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E46F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E46F8);
		  /* 821E46F8h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821E46F8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821E46F8h case    0:*/		return 0x821E46FC;
		  /* 821E46FCh */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E46FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E46FCh case    1:*/		return 0x821E4700;
		  /* 821E4700h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E4700h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E4700h case    2:*/		return 0x821E4704;
		  /* 821E4704h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E4704h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E4714;  }
		/* 821E4704h case    3:*/		return 0x821E4708;
		  /* 821E4708h */ case    4:  		/* mr R31, R11 */
		/* 821E4708h case    4:*/		regs.R31 = regs.R11;
		/* 821E4708h case    4:*/		return 0x821E470C;
		  /* 821E470Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E470Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E470Ch case    5:*/		return 0x821E4710;
		  /* 821E4710h */ case    6:  		/* bc 4, CR6_EQ, -116 */
		/* 821E4710h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E469C;  }
		/* 821E4710h case    6:*/		return 0x821E4714;
	}
	return 0x821E4714;
} // Block from 821E46F8h-821E4714h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4714);
		  /* 821E4714h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821E4714h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821E4714h case    0:*/		return 0x821E4718;
		  /* 821E4718h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E4718h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E4718h case    1:*/		return 0x821E471C;
		  /* 821E471Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E471Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E471Ch case    2:*/		return 0x821E4720;
		  /* 821E4720h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E4720h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E4730;  }
		/* 821E4720h case    3:*/		return 0x821E4724;
		  /* 821E4724h */ case    4:  		/* mr R29, R11 */
		/* 821E4724h case    4:*/		regs.R29 = regs.R11;
		/* 821E4724h case    4:*/		return 0x821E4728;
		  /* 821E4728h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E4728h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4728h case    5:*/		return 0x821E472C;
		  /* 821E472Ch */ case    6:  		/* bc 4, CR6_EQ, -260 */
		/* 821E472Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E4628;  }
		/* 821E472Ch case    6:*/		return 0x821E4730;
	}
	return 0x821E4730;
} // Block from 821E4714h-821E4730h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4730);
		  /* 821E4730h */ case    0:  		/* lwz R11, <#[R20 + 620]> */
		/* 821E4730h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E4730h case    0:*/		return 0x821E4734;
		  /* 821E4734h */ case    1:  		/* addi R30, R30, 68 */
		/* 821E4734h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x44);
		/* 821E4734h case    1:*/		return 0x821E4738;
		  /* 821E4738h */ case    2:  		/* lwz R31, <#[R20 + 616]> */
		/* 821E4738h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R20 + 0x00000268) );
		/* 821E4738h case    2:*/		return 0x821E473C;
		  /* 821E473Ch */ case    3:  		/* mulli R11, R11, 68 */
		/* 821E473Ch case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x44);
		/* 821E473Ch case    3:*/		return 0x821E4740;
		  /* 821E4740h */ case    4:  		/* add R10, R11, R31 */
		/* 821E4740h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R31);
		/* 821E4740h case    4:*/		return 0x821E4744;
		  /* 821E4744h */ case    5:  		/* cmplw CR6, R30, R10 */
		/* 821E4744h case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821E4744h case    5:*/		return 0x821E4748;
		  /* 821E4748h */ case    6:  		/* bc 12, CR6_LT, -2928 */
		/* 821E4748h case    6:*/		if ( regs.CR[6].lt ) { return 0x821E3BD8;  }
		/* 821E4748h case    6:*/		return 0x821E474C;
	}
	return 0x821E474C;
} // Block from 821E4730h-821E474Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E474Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E474C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E474C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E474C);
		  /* 821E474Ch */ case    0:  		/* mr R6, R16 */
		/* 821E474Ch case    0:*/		regs.R6 = regs.R16;
		/* 821E474Ch case    0:*/		return 0x821E4750;
		  /* 821E4750h */ case    1:  		/* cmplw CR6, R31, R10 */
		/* 821E4750h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821E4750h case    1:*/		return 0x821E4754;
		  /* 821E4754h */ case    2:  		/* bc 4, CR6_LT, 176 */
		/* 821E4754h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821E4804;  }
		/* 821E4754h case    2:*/		return 0x821E4758;
		  /* 821E4758h */ case    3:  		/* addi R11, R31, 60 */
		/* 821E4758h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x3C);
		/* 821E4758h case    3:*/		return 0x821E475C;
		  /* 821E475Ch */ case    4:  		/* lwz R10, <#[R11 - 12]> */
		/* 821E475Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFF4) );
		/* 821E475Ch case    4:*/		return 0x821E4760;
		  /* 821E4760h */ case    5:  		/* mr R8, R16 */
		/* 821E4760h case    5:*/		regs.R8 = regs.R16;
		/* 821E4760h case    5:*/		return 0x821E4764;
		  /* 821E4764h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 821E4764h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E4764h case    6:*/		return 0x821E4768;
		  /* 821E4768h */ case    7:  		/* bc 12, CR6_EQ, 100 */
		/* 821E4768h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E47CC;  }
		/* 821E4768h case    7:*/		return 0x821E476C;
		  /* 821E476Ch */ case    8:  		/* lwz R7, <#[R11]> */
		/* 821E476Ch case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821E476Ch case    8:*/		return 0x821E4770;
		  /* 821E4770h */ case    9:  		/* rlwinm. R10, R7, 0, 29, 29 */
		/* 821E4770h case    9:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R7);
		/* 821E4770h case    9:*/		return 0x821E4774;
		  /* 821E4774h */ case   10:  		/* bc 12, CR0_EQ, 88 */
		/* 821E4774h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E47CC;  }
		/* 821E4774h case   10:*/		return 0x821E4778;
		  /* 821E4778h */ case   11:  		/* lwz R10, <#[R11 - 32]> */
		/* 821E4778h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFE0) );
		/* 821E4778h case   11:*/		return 0x821E477C;
		  /* 821E477Ch */ case   12:  		/* b 48 */
		/* 821E477Ch case   12:*/		return 0x821E47AC;
		/* 821E477Ch case   12:*/		return 0x821E4780;
		  /* 821E4780h */ case   13:  		/* lwz R9, <#[R10 + 60]> */
		/* 821E4780h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000003C) );
		/* 821E4780h case   13:*/		return 0x821E4784;
		  /* 821E4784h */ case   14:  		/* rlwinm. R5, R9, 0, 22, 22 */
		/* 821E4784h case   14:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R5,regs.R9);
		/* 821E4784h case   14:*/		return 0x821E4788;
		  /* 821E4788h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 821E4788h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821E4794;  }
		/* 821E4788h case   15:*/		return 0x821E478C;
		  /* 821E478Ch */ case   16:  		/* mr R8, R22 */
		/* 821E478Ch case   16:*/		regs.R8 = regs.R22;
		/* 821E478Ch case   16:*/		return 0x821E4790;
		  /* 821E4790h */ case   17:  		/* b 24 */
		/* 821E4790h case   17:*/		return 0x821E47A8;
		/* 821E4790h case   17:*/		return 0x821E4794;
	}
	return 0x821E4794;
} // Block from 821E474Ch-821E4794h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821E4794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4794);
		  /* 821E4794h */ case    0:  		/* lwz R5, <#[R10 + 48]> */
		/* 821E4794h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000030) );
		/* 821E4794h case    0:*/		return 0x821E4798;
		  /* 821E4798h */ case    1:  		/* cmplwi CR6, R5, 0 */
		/* 821E4798h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821E4798h case    1:*/		return 0x821E479C;
		  /* 821E479Ch */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 821E479Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821E47A8;  }
		/* 821E479Ch case    2:*/		return 0x821E47A0;
		  /* 821E47A0h */ case    3:  		/* rlwinm. R9, R9, 0, 29, 29 */
		/* 821E47A0h case    3:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R9);
		/* 821E47A0h case    3:*/		return 0x821E47A4;
		  /* 821E47A4h */ case    4:  		/* bc 12, CR0_EQ, 20 */
		/* 821E47A4h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E47B8;  }
		/* 821E47A4h case    4:*/		return 0x821E47A8;
	}
	return 0x821E47A8;
} // Block from 821E4794h-821E47A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E47A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E47A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E47A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E47A8);
		  /* 821E47A8h */ case    0:  		/* lwz R10, <#[R10 + 32]> */
		/* 821E47A8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000020) );
		/* 821E47A8h case    0:*/		return 0x821E47AC;
	}
	return 0x821E47AC;
} // Block from 821E47A8h-821E47ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E47ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E47AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E47AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E47AC);
		  /* 821E47ACh */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821E47ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E47ACh case    0:*/		return 0x821E47B0;
		  /* 821E47B0h */ case    1:  		/* bc 4, CR6_EQ, -48 */
		/* 821E47B0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E4780;  }
		/* 821E47B0h case    1:*/		return 0x821E47B4;
		  /* 821E47B4h */ case    2:  		/* b 12 */
		/* 821E47B4h case    2:*/		return 0x821E47C0;
		/* 821E47B4h case    2:*/		return 0x821E47B8;
	}
	return 0x821E47B8;
} // Block from 821E47ACh-821E47B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E47B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E47B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E47B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E47B8);
		  /* 821E47B8h */ case    0:  		/* rlwinm R10, R7, 0, 30, 28 */
		/* 821E47B8h case    0:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R10,regs.R7);
		/* 821E47B8h case    0:*/		return 0x821E47BC;
		  /* 821E47BCh */ case    1:  		/* stw R10, <#[R11]> */
		/* 821E47BCh case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E47BCh case    1:*/		return 0x821E47C0;
	}
	return 0x821E47C0;
} // Block from 821E47B8h-821E47C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E47C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E47C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E47C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E47C0);
		  /* 821E47C0h */ case    0:  		/* rlwinm R10, R8, 0, 24, 31 */
		/* 821E47C0h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R8);
		/* 821E47C0h case    0:*/		return 0x821E47C4;
		  /* 821E47C4h */ case    1:  		/* rlwinm R9, R6, 0, 24, 31 */
		/* 821E47C4h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R9,regs.R6);
		/* 821E47C4h case    1:*/		return 0x821E47C8;
		  /* 821E47C8h */ case    2:  		/* or R6, R10, R9 */
		/* 821E47C8h case    2:*/		cpu::op::or<0>(regs,&regs.R6,regs.R10,regs.R9);
		/* 821E47C8h case    2:*/		return 0x821E47CC;
	}
	return 0x821E47CC;
} // Block from 821E47C0h-821E47CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E47CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E47CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E47CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E47CC);
		  /* 821E47CCh */ case    0:  		/* rlwinm R10, R8, 0, 24, 31 */
		/* 821E47CCh case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R8);
		/* 821E47CCh case    0:*/		return 0x821E47D0;
		  /* 821E47D0h */ case    1:  		/* lwz R9, <#[R11]> */
		/* 821E47D0h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E47D0h case    1:*/		return 0x821E47D4;
		  /* 821E47D4h */ case    2:  		/* cntlzw R10, R10 */
		/* 821E47D4h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821E47D4h case    2:*/		return 0x821E47D8;
		  /* 821E47D8h */ case    3:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 821E47D8h case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 821E47D8h case    3:*/		return 0x821E47DC;
		  /* 821E47DCh */ case    4:  		/* rlwimi R9, R10, 9, 22, 22 */
		/* 821E47DCh case    4:*/		cpu::op::rlwimi<0,9,22,22>(regs,&regs.R9,regs.R10);
		/* 821E47DCh case    4:*/		return 0x821E47E0;
		  /* 821E47E0h */ case    5:  		/* stw R9, <#[R11]> */
		/* 821E47E0h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E47E0h case    5:*/		return 0x821E47E4;
		  /* 821E47E4h */ case    6:  		/* addi R11, R11, 68 */
		/* 821E47E4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x44);
		/* 821E47E4h case    6:*/		return 0x821E47E8;
		  /* 821E47E8h */ case    7:  		/* addi R9, R11, -60 */
		/* 821E47E8h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFC4);
		/* 821E47E8h case    7:*/		return 0x821E47EC;
		  /* 821E47ECh */ case    8:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E47ECh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E47ECh case    8:*/		return 0x821E47F0;
		  /* 821E47F0h */ case    9:  		/* lwz R31, <#[R20 + 616]> */
		/* 821E47F0h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R20 + 0x00000268) );
		/* 821E47F0h case    9:*/		return 0x821E47F4;
		  /* 821E47F4h */ case   10:  		/* mulli R10, R10, 68 */
		/* 821E47F4h case   10:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E47F4h case   10:*/		return 0x821E47F8;
		  /* 821E47F8h */ case   11:  		/* add R10, R10, R31 */
		/* 821E47F8h case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R31);
		/* 821E47F8h case   11:*/		return 0x821E47FC;
		  /* 821E47FCh */ case   12:  		/* cmplw CR6, R9, R10 */
		/* 821E47FCh case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821E47FCh case   12:*/		return 0x821E4800;
		  /* 821E4800h */ case   13:  		/* bc 12, CR6_LT, -164 */
		/* 821E4800h case   13:*/		if ( regs.CR[6].lt ) { return 0x821E475C;  }
		/* 821E4800h case   13:*/		return 0x821E4804;
	}
	return 0x821E4804;
} // Block from 821E47CCh-821E4804h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E4804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4804);
		  /* 821E4804h */ case    0:  		/* rlwinm. R11, R6, 0, 24, 31 */
		/* 821E4804h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R6);
		/* 821E4804h case    0:*/		return 0x821E4808;
		  /* 821E4808h */ case    1:  		/* bc 4, CR0_EQ, -188 */
		/* 821E4808h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E474C;  }
		/* 821E4808h case    1:*/		return 0x821E480C;
		  /* 821E480Ch */ case    2:  		/* stb R16, <#[R1 + 130]> */
		/* 821E480Ch case    2:*/		cpu::mem::store8( regs, regs.R16, (uint32)(regs.R1 + 0x00000082) );
		/* 821E480Ch case    2:*/		return 0x821E4810;
		  /* 821E4810h */ case    3:  		/* cmplw CR6, R31, R10 */
		/* 821E4810h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821E4810h case    3:*/		return 0x821E4814;
		  /* 821E4814h */ case    4:  		/* bc 4, CR6_LT, 628 */
		/* 821E4814h case    4:*/		if ( !regs.CR[6].lt ) { return 0x821E4A88;  }
		/* 821E4814h case    4:*/		return 0x821E4818;
		  /* 821E4818h */ case    5:  		/* addi R11, R31, 48 */
		/* 821E4818h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x30);
		/* 821E4818h case    5:*/		return 0x821E481C;
		  /* 821E481Ch */ case    6:  		/* lwz R10, <#[R11]> */
		/* 821E481Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E481Ch case    6:*/		return 0x821E4820;
		  /* 821E4820h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821E4820h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E4820h case    7:*/		return 0x821E4824;
		  /* 821E4824h */ case    8:  		/* bc 12, CR6_EQ, 92 */
		/* 821E4824h case    8:*/		if ( regs.CR[6].eq ) { return 0x821E4880;  }
		/* 821E4824h case    8:*/		return 0x821E4828;
		  /* 821E4828h */ case    9:  		/* lwz R10, <#[R11 - 24]> */
		/* 821E4828h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFE8) );
		/* 821E4828h case    9:*/		return 0x821E482C;
		  /* 821E482Ch */ case   10:  		/* mr R9, R16 */
		/* 821E482Ch case   10:*/		regs.R9 = regs.R16;
		/* 821E482Ch case   10:*/		return 0x821E4830;
		  /* 821E4830h */ case   11:  		/* b 44 */
		/* 821E4830h case   11:*/		return 0x821E485C;
		/* 821E4830h case   11:*/		return 0x821E4834;
		  /* 821E4834h */ case   12:  		/* addi R9, R9, 1 */
		/* 821E4834h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821E4834h case   12:*/		return 0x821E4838;
		  /* 821E4838h */ case   13:  		/* cmplwi CR6, R9, 4 */
		/* 821E4838h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 821E4838h case   13:*/		return 0x821E483C;
		  /* 821E483Ch */ case   14:  		/* bc 4, CR6_LT, 44 */
		/* 821E483Ch case   14:*/		if ( !regs.CR[6].lt ) { return 0x821E4868;  }
		/* 821E483Ch case   14:*/		return 0x821E4840;
		  /* 821E4840h */ case   15:  		/* lwz R8, <#[R10 + 48]> */
		/* 821E4840h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000030) );
		/* 821E4840h case   15:*/		return 0x821E4844;
		  /* 821E4844h */ case   16:  		/* cmplwi CR6, R8, 0 */
		/* 821E4844h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821E4844h case   16:*/		return 0x821E4848;
		  /* 821E4848h */ case   17:  		/* bc 4, CR6_EQ, 16 */
		/* 821E4848h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821E4858;  }
		/* 821E4848h case   17:*/		return 0x821E484C;
		  /* 821E484Ch */ case   18:  		/* lwz R8, <#[R10 + 60]> */
		/* 821E484Ch case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x0000003C) );
		/* 821E484Ch case   18:*/		return 0x821E4850;
		  /* 821E4850h */ case   19:  		/* rlwinm. R8, R8, 0, 29, 29 */
		/* 821E4850h case   19:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R8,regs.R8);
		/* 821E4850h case   19:*/		return 0x821E4854;
		  /* 821E4854h */ case   20:  		/* bc 4, CR0_EQ, 40 */
		/* 821E4854h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821E487C;  }
		/* 821E4854h case   20:*/		return 0x821E4858;
	}
	return 0x821E4858;
} // Block from 821E4804h-821E4858h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821E4858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4858);
		  /* 821E4858h */ case    0:  		/* lwz R10, <#[R10 + 24]> */
		/* 821E4858h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 821E4858h case    0:*/		return 0x821E485C;
	}
	return 0x821E485C;
} // Block from 821E4858h-821E485Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E485Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E485C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E485C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E485C);
		  /* 821E485Ch */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821E485Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E485Ch case    0:*/		return 0x821E4860;
		  /* 821E4860h */ case    1:  		/* bc 4, CR6_EQ, -44 */
		/* 821E4860h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E4834;  }
		/* 821E4860h case    1:*/		return 0x821E4864;
		  /* 821E4864h */ case    2:  		/* b 28 */
		/* 821E4864h case    2:*/		return 0x821E4880;
		/* 821E4864h case    2:*/		return 0x821E4868;
	}
	return 0x821E4868;
} // Block from 821E485Ch-821E4868h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E4868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4868);
		  /* 821E4868h */ case    0:  		/* lwz R10, <#[R11 + 12]> */
		/* 821E4868h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E4868h case    0:*/		return 0x821E486C;
		  /* 821E486Ch */ case    1:  		/* rlwinm. R10, R10, 0, 29, 29 */
		/* 821E486Ch case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R10);
		/* 821E486Ch case    1:*/		return 0x821E4870;
		  /* 821E4870h */ case    2:  		/* bc 12, CR0_EQ, 8660 */
		/* 821E4870h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E6A44;  }
		/* 821E4870h case    2:*/		return 0x821E4874;
		  /* 821E4874h */ case    3:  		/* stw R16, <#[R11]> */
		/* 821E4874h case    3:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R11 + 0x00000000) );
		/* 821E4874h case    3:*/		return 0x821E4878;
		  /* 821E4878h */ case    4:  		/* b 8 */
		/* 821E4878h case    4:*/		return 0x821E4880;
		/* 821E4878h case    4:*/		return 0x821E487C;
	}
	return 0x821E487C;
} // Block from 821E4868h-821E487Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E487Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E487C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E487C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E487C);
		  /* 821E487Ch */ case    0:  		/* stb R22, <#[R1 + 130]> */
		/* 821E487Ch case    0:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R1 + 0x00000082) );
		/* 821E487Ch case    0:*/		return 0x821E4880;
	}
	return 0x821E4880;
} // Block from 821E487Ch-821E4880h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E4880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4880);
		  /* 821E4880h */ case    0:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E4880h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E4880h case    0:*/		return 0x821E4884;
		  /* 821E4884h */ case    1:  		/* addi R11, R11, 68 */
		/* 821E4884h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x44);
		/* 821E4884h case    1:*/		return 0x821E4888;
		  /* 821E4888h */ case    2:  		/* lwz R31, <#[R20 + 616]> */
		/* 821E4888h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R20 + 0x00000268) );
		/* 821E4888h case    2:*/		return 0x821E488C;
		  /* 821E488Ch */ case    3:  		/* mulli R10, R10, 68 */
		/* 821E488Ch case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E488Ch case    3:*/		return 0x821E4890;
		  /* 821E4890h */ case    4:  		/* add R10, R10, R31 */
		/* 821E4890h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R31);
		/* 821E4890h case    4:*/		return 0x821E4894;
		  /* 821E4894h */ case    5:  		/* addi R9, R11, -48 */
		/* 821E4894h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFD0);
		/* 821E4894h case    5:*/		return 0x821E4898;
		  /* 821E4898h */ case    6:  		/* cmplw CR6, R9, R10 */
		/* 821E4898h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821E4898h case    6:*/		return 0x821E489C;
		  /* 821E489Ch */ case    7:  		/* bc 12, CR6_LT, -128 */
		/* 821E489Ch case    7:*/		if ( regs.CR[6].lt ) { return 0x821E481C;  }
		/* 821E489Ch case    7:*/		return 0x821E48A0;
		  /* 821E48A0h */ case    8:  		/* cmplw CR6, R31, R10 */
		/* 821E48A0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821E48A0h case    8:*/		return 0x821E48A4;
		  /* 821E48A4h */ case    9:  		/* bc 4, CR6_LT, 484 */
		/* 821E48A4h case    9:*/		if ( !regs.CR[6].lt ) { return 0x821E4A88;  }
		/* 821E48A4h case    9:*/		return 0x821E48A8;
		  /* 821E48A8h */ case   10:  		/* addi R6, R31, 36 */
		/* 821E48A8h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x24);
		/* 821E48A8h case   10:*/		return 0x821E48AC;
		  /* 821E48ACh */ case   11:  		/* lwz R27, <#[R6 + 24]> */
		/* 821E48ACh case   11:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R6 + 0x00000018) );
		/* 821E48ACh case   11:*/		return 0x821E48B0;
		  /* 821E48B0h */ case   12:  		/* rlwinm. R11, R27, 0, 29, 29 */
		/* 821E48B0h case   12:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R27);
		/* 821E48B0h case   12:*/		return 0x821E48B4;
		  /* 821E48B4h */ case   13:  		/* bc 12, CR0_EQ, 436 */
		/* 821E48B4h case   13:*/		if ( regs.CR[0].eq ) { return 0x821E4A68;  }
		/* 821E48B4h case   13:*/		return 0x821E48B8;
		  /* 821E48B8h */ case   14:  		/* rlwinm. R11, R27, 0, 30, 30 */
		/* 821E48B8h case   14:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R27);
		/* 821E48B8h case   14:*/		return 0x821E48BC;
		  /* 821E48BCh */ case   15:  		/* bc 4, CR0_EQ, 428 */
		/* 821E48BCh case   15:*/		if ( !regs.CR[0].eq ) { return 0x821E4A68;  }
		/* 821E48BCh case   15:*/		return 0x821E48C0;
		  /* 821E48C0h */ case   16:  		/* lwz R11, <#[R6]> */
		/* 821E48C0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821E48C0h case   16:*/		return 0x821E48C4;
		  /* 821E48C4h */ case   17:  		/* rlwinm. R9, R11, 0, 5, 5 */
		/* 821E48C4h case   17:*/		cpu::op::rlwinm<1,0,5,5>(regs,&regs.R9,regs.R11);
		/* 821E48C4h case   17:*/		return 0x821E48C8;
		  /* 821E48C8h */ case   18:  		/* bc 4, CR0_EQ, 24 */
		/* 821E48C8h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821E48E0;  }
		/* 821E48C8h case   18:*/		return 0x821E48CC;
		  /* 821E48CCh */ case   19:  		/* lwz R9, <#[R6 + 12]> */
		/* 821E48CCh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x0000000C) );
		/* 821E48CCh case   19:*/		return 0x821E48D0;
		  /* 821E48D0h */ case   20:  		/* cmplwi CR6, R9, 0 */
		/* 821E48D0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E48D0h case   20:*/		return 0x821E48D4;
		  /* 821E48D4h */ case   21:  		/* bc 12, CR6_EQ, 404 */
		/* 821E48D4h case   21:*/		if ( regs.CR[6].eq ) { return 0x821E4A68;  }
		/* 821E48D4h case   21:*/		return 0x821E48D8;
		  /* 821E48D8h */ case   22:  		/* rlwinm. R9, R27, 0, 23, 23 */
		/* 821E48D8h case   22:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R9,regs.R27);
		/* 821E48D8h case   22:*/		return 0x821E48DC;
		  /* 821E48DCh */ case   23:  		/* bc 4, CR0_EQ, 396 */
		/* 821E48DCh case   23:*/		if ( !regs.CR[0].eq ) { return 0x821E4A68;  }
		/* 821E48DCh case   23:*/		return 0x821E48E0;
	}
	return 0x821E48E0;
} // Block from 821E4880h-821E48E0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E48E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E48E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E48E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E48E0);
		  /* 821E48E0h */ case    0:  		/* rlwinm R28, R11, 22, 17, 31 */
		/* 821E48E0h case    0:*/		cpu::op::rlwinm<0,22,17,31>(regs,&regs.R28,regs.R11);
		/* 821E48E0h case    0:*/		return 0x821E48E4;
		  /* 821E48E4h */ case    1:  		/* cmplwi CR6, R28, 1 */
		/* 821E48E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 821E48E4h case    1:*/		return 0x821E48E8;
		  /* 821E48E8h */ case    2:  		/* bc 4, CR6_GT, 384 */
		/* 821E48E8h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821E4A68;  }
		/* 821E48E8h case    2:*/		return 0x821E48EC;
		  /* 821E48ECh */ case    3:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E48ECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E48ECh case    3:*/		return 0x821E48F0;
		  /* 821E48F0h */ case    4:  		/* mr R30, R16 */
		/* 821E48F0h case    4:*/		regs.R30 = regs.R16;
		/* 821E48F0h case    4:*/		return 0x821E48F4;
		  /* 821E48F4h */ case    5:  		/* mr R29, R16 */
		/* 821E48F4h case    5:*/		regs.R29 = regs.R16;
		/* 821E48F4h case    5:*/		return 0x821E48F8;
		  /* 821E48F8h */ case    6:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821E48F8h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E48F8h case    6:*/		return 0x821E48FC;
		  /* 821E48FCh */ case    7:  		/* bc 4, CR0_EQ, 340 */
		/* 821E48FCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x821E4A50;  }
		/* 821E48FCh case    7:*/		return 0x821E4900;
		  /* 821E4900h */ case    8:  		/* mr R7, R11 */
		/* 821E4900h case    8:*/		regs.R7 = regs.R11;
		/* 821E4900h case    8:*/		return 0x821E4904;
		  /* 821E4904h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 821E4904h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E4904h case    9:*/		return 0x821E4908;
		  /* 821E4908h */ case   10:  		/* bc 12, CR0_EQ, 328 */
		/* 821E4908h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E4A50;  }
		/* 821E4908h case   10:*/		return 0x821E490C;
		  /* 821E490Ch */ case   11:  		/* lwz R5, <#[R20 + 616]> */
		/* 821E490Ch case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R20 + 0x00000268) );
		/* 821E490Ch case   11:*/		return 0x821E4910;
		  /* 821E4910h */ case   12:  		/* subf R11, R5, R6 */
		/* 821E4910h case   12:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R5,regs.R6);
		/* 821E4910h case   12:*/		return 0x821E4914;
		  /* 821E4914h */ case   13:  		/* addi R11, R11, -36 */
		/* 821E4914h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFDC);
		/* 821E4914h case   13:*/		return 0x821E4918;
		  /* 821E4918h */ case   14:  		/* divw R9, R11, R21 */
		/* 821E4918h case   14:*/		cpu::op::divw<0>(regs,&regs.R9,regs.R11,regs.R21);
		/* 821E4918h case   14:*/		return 0x821E491C;
		  /* 821E491Ch */ case   15:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821E491Ch case   15:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821E491Ch case   15:*/		return 0x821E4920;
		  /* 821E4920h */ case   16:  		/* rlwinm R4, R9, 0, 27, 31 */
		/* 821E4920h case   16:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R9);
		/* 821E4920h case   16:*/		return 0x821E4924;
		  /* 821E4924h */ case   17:  		/* addi R11, R11, 21 */
		/* 821E4924h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E4924h case   17:*/		return 0x821E4928;
		  /* 821E4928h */ case   18:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 821E4928h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 821E4928h case   18:*/		return 0x821E492C;
		  /* 821E492Ch */ case   19:  		/* lwzx R11, <#[R3 + R7]> */
		/* 821E492Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R7 + 0x00000000) );
		/* 821E492Ch case   19:*/		return 0x821E4930;
		  /* 821E4930h */ case   20:  		/* srw R11, R11, R4 */
		/* 821E4930h case   20:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 821E4930h case   20:*/		return 0x821E4934;
		  /* 821E4934h */ case   21:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E4934h case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E4934h case   21:*/		return 0x821E4938;
		  /* 821E4938h */ case   22:  		/* bc 12, CR0_EQ, 252 */
		/* 821E4938h case   22:*/		if ( regs.CR[0].eq ) { return 0x821E4A34;  }
		/* 821E4938h case   22:*/		return 0x821E493C;
		  /* 821E493Ch */ case   23:  		/* mr R8, R28 */
		/* 821E493Ch case   23:*/		regs.R8 = regs.R28;
		/* 821E493Ch case   23:*/		return 0x821E4940;
		  /* 821E4940h */ case   24:  		/* cmplw CR6, R31, R10 */
		/* 821E4940h case   24:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821E4940h case   24:*/		return 0x821E4944;
		  /* 821E4944h */ case   25:  		/* bc 4, CR6_LT, 144 */
		/* 821E4944h case   25:*/		if ( !regs.CR[6].lt ) { return 0x821E49D4;  }
		/* 821E4944h case   25:*/		return 0x821E4948;
		  /* 821E4948h */ case   26:  		/* addi R11, R31, 4 */
		/* 821E4948h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 821E4948h case   26:*/		return 0x821E494C;
		  /* 821E494Ch */ case   27:  		/* lwz R9, <#[R11 + 56]> */
		/* 821E494Ch case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000038) );
		/* 821E494Ch case   27:*/		return 0x821E4950;
		  /* 821E4950h */ case   28:  		/* rlwinm. R9, R9, 0, 29, 29 */
		/* 821E4950h case   28:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R9);
		/* 821E4950h case   28:*/		return 0x821E4954;
		  /* 821E4954h */ case   29:  		/* bc 12, CR0_EQ, 112 */
		/* 821E4954h case   29:*/		if ( regs.CR[0].eq ) { return 0x821E49C4;  }
		/* 821E4954h case   29:*/		return 0x821E4958;
		  /* 821E4958h */ case   30:  		/* lwz R9, <#[R11]> */
		/* 821E4958h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E4958h case   30:*/		return 0x821E495C;
		  /* 821E495Ch */ case   31:  		/* lwz R26, <#[R6 - 32]> */
		/* 821E495Ch case   31:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R6 + 0xFFFFFFE0) );
		/* 821E495Ch case   31:*/		return 0x821E4960;
		  /* 821E4960h */ case   32:  		/* lwz R9, <#[R9 + 48]> */
		/* 821E4960h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000030) );
		/* 821E4960h case   32:*/		return 0x821E4964;
		  /* 821E4964h */ case   33:  		/* lwz R26, <#[R26 + 40]> */
		/* 821E4964h case   33:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R26 + 0x00000028) );
		/* 821E4964h case   33:*/		return 0x821E4968;
		  /* 821E4968h */ case   34:  		/* rlwinm R24, R9, 0, 13, 31 */
		/* 821E4968h case   34:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R24,regs.R9);
		/* 821E4968h case   34:*/		return 0x821E496C;
		  /* 821E496Ch */ case   35:  		/* rlwinm R9, R24, 27, 5, 31 */
		/* 821E496Ch case   35:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R24);
		/* 821E496Ch case   35:*/		return 0x821E4970;
		  /* 821E4970h */ case   36:  		/* rlwinm R24, R24, 0, 27, 31 */
		/* 821E4970h case   36:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R24,regs.R24);
		/* 821E4970h case   36:*/		return 0x821E4974;
		  /* 821E4974h */ case   37:  		/* addi R9, R9, 1 */
		/* 821E4974h case   37:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821E4974h case   37:*/		return 0x821E4978;
		  /* 821E4978h */ case   38:  		/* slw R24, R22, R24 */
		/* 821E4978h case   38:*/		cpu::op::slw<0>(regs,&regs.R24,regs.R22,regs.R24);
		/* 821E4978h case   38:*/		return 0x821E497C;
		  /* 821E497Ch */ case   39:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821E497Ch case   39:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821E497Ch case   39:*/		return 0x821E4980;
		  /* 821E4980h */ case   40:  		/* lwzx R9, <#[R9 + R26]> */
		/* 821E4980h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R26 + 0x00000000) );
		/* 821E4980h case   40:*/		return 0x821E4984;
		  /* 821E4984h */ case   41:  		/* and. R9, R9, R24 */
		/* 821E4984h case   41:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R24);
		/* 821E4984h case   41:*/		return 0x821E4988;
		  /* 821E4988h */ case   42:  		/* bc 4, CR0_EQ, 60 */
		/* 821E4988h case   42:*/		if ( !regs.CR[0].eq ) { return 0x821E49C4;  }
		/* 821E4988h case   42:*/		return 0x821E498C;
		  /* 821E498Ch */ case   43:  		/* subf R9, R5, R11 */
		/* 821E498Ch case   43:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R5,regs.R11);
		/* 821E498Ch case   43:*/		return 0x821E4990;
		  /* 821E4990h */ case   44:  		/* addi R9, R9, -4 */
		/* 821E4990h case   44:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFC);
		/* 821E4990h case   44:*/		return 0x821E4994;
		  /* 821E4994h */ case   45:  		/* divw R26, R9, R21 */
		/* 821E4994h case   45:*/		cpu::op::divw<0>(regs,&regs.R26,regs.R9,regs.R21);
		/* 821E4994h case   45:*/		return 0x821E4998;
		  /* 821E4998h */ case   46:  		/* rlwinm R9, R26, 27, 5, 31 */
		/* 821E4998h case   46:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R26);
		/* 821E4998h case   46:*/		return 0x821E499C;
		  /* 821E499Ch */ case   47:  		/* rlwinm R26, R26, 0, 27, 31 */
		/* 821E499Ch case   47:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R26,regs.R26);
		/* 821E499Ch case   47:*/		return 0x821E49A0;
		  /* 821E49A0h */ case   48:  		/* addi R9, R9, 21 */
		/* 821E49A0h case   48:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x15);
		/* 821E49A0h case   48:*/		return 0x821E49A4;
		  /* 821E49A4h */ case   49:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821E49A4h case   49:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821E49A4h case   49:*/		return 0x821E49A8;
		  /* 821E49A8h */ case   50:  		/* lwzx R9, <#[R9 + R7]> */
		/* 821E49A8h case   50:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 821E49A8h case   50:*/		return 0x821E49AC;
		  /* 821E49ACh */ case   51:  		/* srw R9, R9, R26 */
		/* 821E49ACh case   51:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R26);
		/* 821E49ACh case   51:*/		return 0x821E49B0;
		  /* 821E49B0h */ case   52:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821E49B0h case   52:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821E49B0h case   52:*/		return 0x821E49B4;
		  /* 821E49B4h */ case   53:  		/* bc 12, CR0_EQ, 16 */
		/* 821E49B4h case   53:*/		if ( regs.CR[0].eq ) { return 0x821E49C4;  }
		/* 821E49B4h case   53:*/		return 0x821E49B8;
		  /* 821E49B8h */ case   54:  		/* lwz R9, <#[R11 + 32]> */
		/* 821E49B8h case   54:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000020) );
		/* 821E49B8h case   54:*/		return 0x821E49BC;
		  /* 821E49BCh */ case   55:  		/* rlwinm R9, R9, 22, 17, 31 */
		/* 821E49BCh case   55:*/		cpu::op::rlwinm<0,22,17,31>(regs,&regs.R9,regs.R9);
		/* 821E49BCh case   55:*/		return 0x821E49C0;
		  /* 821E49C0h */ case   56:  		/* mullw R8, R9, R8 */
		/* 821E49C0h case   56:*/		cpu::op::mullw<0>(regs,&regs.R8,regs.R9,regs.R8);
		/* 821E49C0h case   56:*/		return 0x821E49C4;
	}
	return 0x821E49C4;
} // Block from 821E48E0h-821E49C4h (57 instructions)

//////////////////////////////////////////////////////
// Block at 821E49C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E49C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E49C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E49C4);
		  /* 821E49C4h */ case    0:  		/* addi R11, R11, 68 */
		/* 821E49C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x44);
		/* 821E49C4h case    0:*/		return 0x821E49C8;
		  /* 821E49C8h */ case    1:  		/* addi R9, R11, -4 */
		/* 821E49C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFC);
		/* 821E49C8h case    1:*/		return 0x821E49CC;
		  /* 821E49CCh */ case    2:  		/* cmplw CR6, R9, R10 */
		/* 821E49CCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821E49CCh case    2:*/		return 0x821E49D0;
		  /* 821E49D0h */ case    3:  		/* bc 12, CR6_LT, -132 */
		/* 821E49D0h case    3:*/		if ( regs.CR[6].lt ) { return 0x821E494C;  }
		/* 821E49D0h case    3:*/		return 0x821E49D4;
	}
	return 0x821E49D4;
} // Block from 821E49C4h-821E49D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E49D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E49D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E49D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E49D4);
		  /* 821E49D4h */ case    0:  		/* lwz R11, <#[R7 + 12]> */
		/* 821E49D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000000C) );
		/* 821E49D4h case    0:*/		return 0x821E49D8;
		  /* 821E49D8h */ case    1:  		/* add R30, R8, R30 */
		/* 821E49D8h case    1:*/		cpu::op::add<0>(regs,&regs.R30,regs.R8,regs.R30);
		/* 821E49D8h case    1:*/		return 0x821E49DC;
		  /* 821E49DCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821E49DCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E49DCh case    2:*/		return 0x821E49E0;
		  /* 821E49E0h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821E49E0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E49F8;  }
		/* 821E49E0h case    3:*/		return 0x821E49E4;
		  /* 821E49E4h */ case    4:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E49E4h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E49E4h case    4:*/		return 0x821E49E8;
		  /* 821E49E8h */ case    5:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E49E8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E49E8h case    5:*/		return 0x821E49EC;
		  /* 821E49ECh */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821E49ECh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E49ECh case    6:*/		return 0x821E49F0;
		  /* 821E49F0h */ case    7:  		/* mr R11, R22 */
		/* 821E49F0h case    7:*/		regs.R11 = regs.R22;
		/* 821E49F0h case    7:*/		return 0x821E49F4;
		  /* 821E49F4h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821E49F4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E49FC;  }
		/* 821E49F4h case    8:*/		return 0x821E49F8;
	}
	return 0x821E49F8;
} // Block from 821E49D4h-821E49F8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E49F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E49F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E49F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E49F8);
		  /* 821E49F8h */ case    0:  		/* mr R11, R16 */
		/* 821E49F8h case    0:*/		regs.R11 = regs.R16;
		/* 821E49F8h case    0:*/		return 0x821E49FC;
	}
	return 0x821E49FC;
} // Block from 821E49F8h-821E49FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E49FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E49FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E49FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E49FC);
		  /* 821E49FCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E49FCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E49FCh case    0:*/		return 0x821E4A00;
		  /* 821E4A00h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821E4A00h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E4A34;  }
		/* 821E4A00h case    1:*/		return 0x821E4A04;
		  /* 821E4A04h */ case    2:  		/* lwz R11, <#[R6 + 4]> */
		/* 821E4A04h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 821E4A04h case    2:*/		return 0x821E4A08;
		  /* 821E4A08h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821E4A08h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4A08h case    3:*/		return 0x821E4A0C;
		  /* 821E4A0Ch */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 821E4A0Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821E4A30;  }
		/* 821E4A0Ch case    4:*/		return 0x821E4A10;
		  /* 821E4A10h */ case    5:  		/* lwz R9, <#[R11]> */
		/* 821E4A10h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E4A10h case    5:*/		return 0x821E4A14;
		  /* 821E4A14h */ case    6:  		/* cmplw CR6, R9, R7 */
		/* 821E4A14h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 821E4A14h case    6:*/		return 0x821E4A18;
		  /* 821E4A18h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 821E4A18h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E4A28;  }
		/* 821E4A18h case    7:*/		return 0x821E4A1C;
		  /* 821E4A1Ch */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E4A1Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E4A1Ch case    8:*/		return 0x821E4A20;
		  /* 821E4A20h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821E4A20h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4A20h case    9:*/		return 0x821E4A24;
		  /* 821E4A24h */ case   10:  		/* bc 4, CR6_EQ, -20 */
		/* 821E4A24h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821E4A10;  }
		/* 821E4A24h case   10:*/		return 0x821E4A28;
	}
	return 0x821E4A28;
} // Block from 821E49FCh-821E4A28h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E4A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4A28);
		  /* 821E4A28h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E4A28h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4A28h case    0:*/		return 0x821E4A2C;
		  /* 821E4A2Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 821E4A2Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E4A34;  }
		/* 821E4A2Ch case    1:*/		return 0x821E4A30;
	}
	return 0x821E4A30;
} // Block from 821E4A28h-821E4A30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E4A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4A30);
		  /* 821E4A30h */ case    0:  		/* mr R29, R22 */
		/* 821E4A30h case    0:*/		regs.R29 = regs.R22;
		/* 821E4A30h case    0:*/		return 0x821E4A34;
	}
	return 0x821E4A34;
} // Block from 821E4A30h-821E4A34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E4A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4A34);
		  /* 821E4A34h */ case    0:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 821E4A34h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 821E4A34h case    0:*/		return 0x821E4A38;
		  /* 821E4A38h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E4A38h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E4A38h case    1:*/		return 0x821E4A3C;
		  /* 821E4A3Ch */ case    2:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821E4A3Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E4A3Ch case    2:*/		return 0x821E4A40;
		  /* 821E4A40h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E4A40h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E4A50;  }
		/* 821E4A40h case    3:*/		return 0x821E4A44;
		  /* 821E4A44h */ case    4:  		/* mr R7, R11 */
		/* 821E4A44h case    4:*/		regs.R7 = regs.R11;
		/* 821E4A44h case    4:*/		return 0x821E4A48;
		  /* 821E4A48h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E4A48h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4A48h case    5:*/		return 0x821E4A4C;
		  /* 821E4A4Ch */ case    6:  		/* bc 4, CR6_EQ, -288 */
		/* 821E4A4Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E492C;  }
		/* 821E4A4Ch case    6:*/		return 0x821E4A50;
	}
	return 0x821E4A50;
} // Block from 821E4A34h-821E4A50h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4A50);
		  /* 821E4A50h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821E4A50h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821E4A50h case    0:*/		return 0x821E4A54;
		  /* 821E4A54h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821E4A54h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E4A68;  }
		/* 821E4A54h case    1:*/		return 0x821E4A58;
		  /* 821E4A58h */ case    2:  		/* cmplwi CR6, R30, 300 */
		/* 821E4A58h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000012C);
		/* 821E4A58h case    2:*/		return 0x821E4A5C;
		  /* 821E4A5Ch */ case    3:  		/* bc 4, CR6_GT, 12 */
		/* 821E4A5Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E4A68;  }
		/* 821E4A5Ch case    3:*/		return 0x821E4A60;
		  /* 821E4A60h */ case    4:  		/* rlwinm R11, R27, 0, 30, 28 */
		/* 821E4A60h case    4:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R11,regs.R27);
		/* 821E4A60h case    4:*/		return 0x821E4A64;
		  /* 821E4A64h */ case    5:  		/* stw R11, <#[R6 + 24]> */
		/* 821E4A64h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000018) );
		/* 821E4A64h case    5:*/		return 0x821E4A68;
	}
	return 0x821E4A68;
} // Block from 821E4A50h-821E4A68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E4A68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4A68);
		  /* 821E4A68h */ case    0:  		/* lwz R11, <#[R20 + 620]> */
		/* 821E4A68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E4A68h case    0:*/		return 0x821E4A6C;
		  /* 821E4A6Ch */ case    1:  		/* addi R6, R6, 68 */
		/* 821E4A6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x44);
		/* 821E4A6Ch case    1:*/		return 0x821E4A70;
		  /* 821E4A70h */ case    2:  		/* lwz R31, <#[R20 + 616]> */
		/* 821E4A70h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R20 + 0x00000268) );
		/* 821E4A70h case    2:*/		return 0x821E4A74;
		  /* 821E4A74h */ case    3:  		/* mulli R11, R11, 68 */
		/* 821E4A74h case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x44);
		/* 821E4A74h case    3:*/		return 0x821E4A78;
		  /* 821E4A78h */ case    4:  		/* add R10, R11, R31 */
		/* 821E4A78h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R31);
		/* 821E4A78h case    4:*/		return 0x821E4A7C;
		  /* 821E4A7Ch */ case    5:  		/* addi R11, R6, -36 */
		/* 821E4A7Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFDC);
		/* 821E4A7Ch case    5:*/		return 0x821E4A80;
		  /* 821E4A80h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 821E4A80h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E4A80h case    6:*/		return 0x821E4A84;
		  /* 821E4A84h */ case    7:  		/* bc 12, CR6_LT, -472 */
		/* 821E4A84h case    7:*/		if ( regs.CR[6].lt ) { return 0x821E48AC;  }
		/* 821E4A84h case    7:*/		return 0x821E4A88;
	}
	return 0x821E4A88;
} // Block from 821E4A68h-821E4A88h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E4A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4A88);
		  /* 821E4A88h */ case    0:  		/* mr R14, R16 */
		/* 821E4A88h case    0:*/		regs.R14 = regs.R16;
		/* 821E4A88h case    0:*/		return 0x821E4A8C;
		  /* 821E4A8Ch */ case    1:  		/* cmplw CR6, R31, R10 */
		/* 821E4A8Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821E4A8Ch case    1:*/		return 0x821E4A90;
		  /* 821E4A90h */ case    2:  		/* bc 4, CR6_LT, 336 */
		/* 821E4A90h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821E4BE0;  }
		/* 821E4A90h case    2:*/		return 0x821E4A94;
		  /* 821E4A94h */ case    3:  		/* lwz R11, <#[R31 + 48]> */
		/* 821E4A94h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821E4A94h case    3:*/		return 0x821E4A98;
		  /* 821E4A98h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E4A98h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4A98h case    4:*/		return 0x821E4A9C;
		  /* 821E4A9Ch */ case    5:  		/* bc 12, CR6_EQ, 68 */
		/* 821E4A9Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821E4AE0;  }
		/* 821E4A9Ch case    5:*/		return 0x821E4AA0;
		  /* 821E4AA0h */ case    6:  		/* lwz R11, <#[R31 + 36]> */
		/* 821E4AA0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821E4AA0h case    6:*/		return 0x821E4AA4;
		  /* 821E4AA4h */ case    7:  		/* rlwinm R11, R11, 0, 7, 21 */
		/* 821E4AA4h case    7:*/		cpu::op::rlwinm<0,0,7,21>(regs,&regs.R11,regs.R11);
		/* 821E4AA4h case    7:*/		return 0x821E4AA8;
		  /* 821E4AA8h */ case    8:  		/* cmplwi CR6, R11, 1024 */
		/* 821E4AA8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000400);
		/* 821E4AA8h case    8:*/		return 0x821E4AAC;
		  /* 821E4AACh */ case    9:  		/* bc 12, CR6_GT, 16 */
		/* 821E4AACh case    9:*/		if ( regs.CR[6].gt ) { return 0x821E4ABC;  }
		/* 821E4AACh case    9:*/		return 0x821E4AB0;
		  /* 821E4AB0h */ case   10:  		/* lwz R11, <#[R31 + 60]> */
		/* 821E4AB0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E4AB0h case   10:*/		return 0x821E4AB4;
		  /* 821E4AB4h */ case   11:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 821E4AB4h case   11:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 821E4AB4h case   11:*/		return 0x821E4AB8;
		  /* 821E4AB8h */ case   12:  		/* bc 12, CR0_EQ, 40 */
		/* 821E4AB8h case   12:*/		if ( regs.CR[0].eq ) { return 0x821E4AE0;  }
		/* 821E4AB8h case   12:*/		return 0x821E4ABC;
	}
	return 0x821E4ABC;
} // Block from 821E4A88h-821E4ABCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E4ABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4ABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4ABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4ABC);
		  /* 821E4ABCh */ case    0:  		/* lwz R11, <#[R31 + 60]> */
		/* 821E4ABCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E4ABCh case    0:*/		return 0x821E4AC0;
		  /* 821E4AC0h */ case    1:  		/* rlwinm. R10, R11, 0, 23, 23 */
		/* 821E4AC0h case    1:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R11);
		/* 821E4AC0h case    1:*/		return 0x821E4AC4;
		  /* 821E4AC4h */ case    2:  		/* bc 4, CR0_EQ, 28 */
		/* 821E4AC4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E4AE0;  }
		/* 821E4AC4h case    2:*/		return 0x821E4AC8;
		  /* 821E4AC8h */ case    3:  		/* rlwinm. R10, R11, 0, 30, 30 */
		/* 821E4AC8h case    3:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R11);
		/* 821E4AC8h case    3:*/		return 0x821E4ACC;
		  /* 821E4ACCh */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 821E4ACCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E4AE0;  }
		/* 821E4ACCh case    4:*/		return 0x821E4AD0;
		  /* 821E4AD0h */ case    5:  		/* rlwinm. R10, R11, 0, 26, 26 */
		/* 821E4AD0h case    5:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R11);
		/* 821E4AD0h case    5:*/		return 0x821E4AD4;
		  /* 821E4AD4h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 821E4AD4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E4AE0;  }
		/* 821E4AD4h case    6:*/		return 0x821E4AD8;
		  /* 821E4AD8h */ case    7:  		/* rlwinm R11, R11, 0, 30, 28 */
		/* 821E4AD8h case    7:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R11,regs.R11);
		/* 821E4AD8h case    7:*/		return 0x821E4ADC;
		  /* 821E4ADCh */ case    8:  		/* stw R11, <#[R31 + 60]> */
		/* 821E4ADCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E4ADCh case    8:*/		return 0x821E4AE0;
	}
	return 0x821E4AE0;
} // Block from 821E4ABCh-821E4AE0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E4AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4AE0);
		  /* 821E4AE0h */ case    0:  		/* lwz R11, <#[R31 + 60]> */
		/* 821E4AE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E4AE0h case    0:*/		return 0x821E4AE4;
		  /* 821E4AE4h */ case    1:  		/* rlwinm. R10, R11, 0, 26, 26 */
		/* 821E4AE4h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R11);
		/* 821E4AE4h case    1:*/		return 0x821E4AE8;
		  /* 821E4AE8h */ case    2:  		/* bc 12, CR0_EQ, 136 */
		/* 821E4AE8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E4B70;  }
		/* 821E4AE8h case    2:*/		return 0x821E4AEC;
		  /* 821E4AECh */ case    3:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 821E4AECh case    3:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 821E4AECh case    3:*/		return 0x821E4AF0;
		  /* 821E4AF0h */ case    4:  		/* bc 4, CR0_EQ, 128 */
		/* 821E4AF0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E4B70;  }
		/* 821E4AF0h case    4:*/		return 0x821E4AF4;
		  /* 821E4AF4h */ case    5:  		/* lwz R11, <#[R31 + 36]> */
		/* 821E4AF4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821E4AF4h case    5:*/		return 0x821E4AF8;
		  /* 821E4AF8h */ case    6:  		/* rlwinm. R10, R11, 0, 5, 5 */
		/* 821E4AF8h case    6:*/		cpu::op::rlwinm<1,0,5,5>(regs,&regs.R10,regs.R11);
		/* 821E4AF8h case    6:*/		return 0x821E4AFC;
		  /* 821E4AFCh */ case    7:  		/* bc 12, CR0_EQ, 116 */
		/* 821E4AFCh case    7:*/		if ( regs.CR[0].eq ) { return 0x821E4B70;  }
		/* 821E4AFCh case    7:*/		return 0x821E4B00;
		  /* 821E4B00h */ case    8:  		/* lwz R10, <#[R31 + 56]> */
		/* 821E4B00h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 821E4B00h case    8:*/		return 0x821E4B04;
		  /* 821E4B04h */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 821E4B04h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E4B04h case    9:*/		return 0x821E4B08;
		  /* 821E4B08h */ case   10:  		/* bc 12, CR6_EQ, 104 */
		/* 821E4B08h case   10:*/		if ( regs.CR[6].eq ) { return 0x821E4B70;  }
		/* 821E4B08h case   10:*/		return 0x821E4B0C;
		  /* 821E4B0Ch */ case   11:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821E4B0Ch case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821E4B0Ch case   11:*/		return 0x821E4B10;
		  /* 821E4B10h */ case   12:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E4B10h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E4B10h case   12:*/		return 0x821E4B14;
		  /* 821E4B14h */ case   13:  		/* rlwinm. R10, R10, 0, 16, 16 */
		/* 821E4B14h case   13:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R10,regs.R10);
		/* 821E4B14h case   13:*/		return 0x821E4B18;
		  /* 821E4B18h */ case   14:  		/* bc 12, CR0_EQ, 88 */
		/* 821E4B18h case   14:*/		if ( regs.CR[0].eq ) { return 0x821E4B70;  }
		/* 821E4B18h case   14:*/		return 0x821E4B1C;
		  /* 821E4B1Ch */ case   15:  		/* lwz R10, <#[R31 + 16]> */
		/* 821E4B1Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 821E4B1Ch case   15:*/		return 0x821E4B20;
		  /* 821E4B20h */ case   16:  		/* lwz R9, <#[R31 + 8]> */
		/* 821E4B20h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821E4B20h case   16:*/		return 0x821E4B24;
		  /* 821E4B24h */ case   17:  		/* cmplw CR6, R9, R10 */
		/* 821E4B24h case   17:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821E4B24h case   17:*/		return 0x821E4B28;
		  /* 821E4B28h */ case   18:  		/* bc 4, CR6_EQ, 72 */
		/* 821E4B28h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821E4B70;  }
		/* 821E4B28h case   18:*/		return 0x821E4B2C;
		  /* 821E4B2Ch */ case   19:  		/* li R29, 255 */
		/* 821E4B2Ch case   19:*/		cpu::op::li<0>(regs,&regs.R29,0xFF);
		/* 821E4B2Ch case   19:*/		return 0x821E4B30;
		  /* 821E4B30h */ case   20:  		/* rlwinm R11, R11, 22, 17, 31 */
		/* 821E4B30h case   20:*/		cpu::op::rlwinm<0,22,17,31>(regs,&regs.R11,regs.R11);
		/* 821E4B30h case   20:*/		return 0x821E4B34;
		  /* 821E4B34h */ case   21:  		/* divwu R10, R11, R29 */
		/* 821E4B34h case   21:*/		cpu::op::divwu<0>(regs,&regs.R10,regs.R11,regs.R29);
		/* 821E4B34h case   21:*/		return 0x821E4B38;
		  /* 821E4B38h */ case   22:  		/* twi 6, R29, 0 */
		/* 821E4B38h case   22:*/		cpu::op::tw<6>(regs, 0x821E4B38, regs.R29, 0x00000000);
		/* 821E4B38h case   22:*/		return 0x821E4B3C;
		  /* 821E4B3Ch */ case   23:  		/* mullw R10, R10, R29 */
		/* 821E4B3Ch case   23:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R10,regs.R29);
		/* 821E4B3Ch case   23:*/		return 0x821E4B40;
		  /* 821E4B40h */ case   24:  		/* subf. R10, R10, R11 */
		/* 821E4B40h case   24:*/		cpu::op::subf<1>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E4B40h case   24:*/		return 0x821E4B44;
		  /* 821E4B44h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 821E4B44h case   25:*/		if ( regs.CR[0].eq ) { return 0x821E4B54;  }
		/* 821E4B44h case   25:*/		return 0x821E4B48;
		  /* 821E4B48h */ case   26:  		/* addi R29, R29, -1 */
		/* 821E4B48h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821E4B48h case   26:*/		return 0x821E4B4C;
		  /* 821E4B4Ch */ case   27:  		/* cmplwi CR6, R29, 2 */
		/* 821E4B4Ch case   27:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000002);
		/* 821E4B4Ch case   27:*/		return 0x821E4B50;
		  /* 821E4B50h */ case   28:  		/* bc 4, CR6_LT, -28 */
		/* 821E4B50h case   28:*/		if ( !regs.CR[6].lt ) { return 0x821E4B34;  }
		/* 821E4B50h case   28:*/		return 0x821E4B54;
	}
	return 0x821E4B54;
} // Block from 821E4AE0h-821E4B54h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E4B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4B54);
		  /* 821E4B54h */ case    0:  		/* cmplwi CR6, R29, 2 */
		/* 821E4B54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000002);
		/* 821E4B54h case    0:*/		return 0x821E4B58;
		  /* 821E4B58h */ case    1:  		/* bc 12, CR6_LT, 24 */
		/* 821E4B58h case    1:*/		if ( regs.CR[6].lt ) { return 0x821E4B70;  }
		/* 821E4B58h case    1:*/		return 0x821E4B5C;
		  /* 821E4B5Ch */ case    2:  		/* li R4, 789 */
		/* 821E4B5Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x315);
		/* 821E4B5Ch case    2:*/		return 0x821E4B60;
		  /* 821E4B60h */ case    3:  		/* mr R3, R20 */
		/* 821E4B60h case    3:*/		regs.R3 = regs.R20;
		/* 821E4B60h case    3:*/		return 0x821E4B64;
		  /* 821E4B64h */ case    4:  		/* bl -301580 */
		/* 821E4B64h case    4:*/		regs.LR = 0x821E4B68; return 0x8219B158;
		/* 821E4B64h case    4:*/		return 0x821E4B68;
		  /* 821E4B68h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E4B68h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E4B68h case    5:*/		return 0x821E4B6C;
		  /* 821E4B6Ch */ case    6:  		/* bc 4, CR0_EQ, 620 */
		/* 821E4B6Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E4DD8;  }
		/* 821E4B6Ch case    6:*/		return 0x821E4B70;
	}
	return 0x821E4B70;
} // Block from 821E4B54h-821E4B70h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4B70);
		  /* 821E4B70h */ case    0:  		/* lwz R11, <#[R31 + 60]> */
		/* 821E4B70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E4B70h case    0:*/		return 0x821E4B74;
		  /* 821E4B74h */ case    1:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 821E4B74h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 821E4B74h case    1:*/		return 0x821E4B78;
		  /* 821E4B78h */ case    2:  		/* bc 12, CR0_EQ, 28 */
		/* 821E4B78h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E4B94;  }
		/* 821E4B78h case    2:*/		return 0x821E4B7C;
		  /* 821E4B7Ch */ case    3:  		/* lwz R11, <#[R1 + 148]> */
		/* 821E4B7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 821E4B7Ch case    3:*/		return 0x821E4B80;
		  /* 821E4B80h */ case    4:  		/* stw R16, <#[R31 + 48]> */
		/* 821E4B80h case    4:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R31 + 0x00000030) );
		/* 821E4B80h case    4:*/		return 0x821E4B84;
		  /* 821E4B84h */ case    5:  		/* addi R11, R11, 1 */
		/* 821E4B84h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E4B84h case    5:*/		return 0x821E4B88;
		  /* 821E4B88h */ case    6:  		/* stw R16, <#[R31 + 52]> */
		/* 821E4B88h case    6:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R31 + 0x00000034) );
		/* 821E4B88h case    6:*/		return 0x821E4B8C;
		  /* 821E4B8Ch */ case    7:  		/* stw R11, <#[R1 + 148]> */
		/* 821E4B8Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 821E4B8Ch case    7:*/		return 0x821E4B90;
		  /* 821E4B90h */ case    8:  		/* b 52 */
		/* 821E4B90h case    8:*/		return 0x821E4BC4;
		/* 821E4B90h case    8:*/		return 0x821E4B94;
	}
	return 0x821E4B94;
} // Block from 821E4B70h-821E4B94h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E4B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4B94);
		  /* 821E4B94h */ case    0:  		/* lwz R10, <#[R31 + 48]> */
		/* 821E4B94h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821E4B94h case    0:*/		return 0x821E4B98;
		  /* 821E4B98h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821E4B98h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E4B98h case    1:*/		return 0x821E4B9C;
		  /* 821E4B9Ch */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 821E4B9Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821E4BA8;  }
		/* 821E4B9Ch case    2:*/		return 0x821E4BA0;
		  /* 821E4BA0h */ case    3:  		/* addi R14, R14, 1 */
		/* 821E4BA0h case    3:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R14,0x1);
		/* 821E4BA0h case    3:*/		return 0x821E4BA4;
		  /* 821E4BA4h */ case    4:  		/* b 32 */
		/* 821E4BA4h case    4:*/		return 0x821E4BC4;
		/* 821E4BA4h case    4:*/		return 0x821E4BA8;
	}
	return 0x821E4BA8;
} // Block from 821E4B94h-821E4BA8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E4BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4BA8);
		  /* 821E4BA8h */ case    0:  		/* lwz R10, <#[R31 + 36]> */
		/* 821E4BA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 821E4BA8h case    0:*/		return 0x821E4BAC;
		  /* 821E4BACh */ case    1:  		/* rlwinm. R10, R10, 0, 6, 6 */
		/* 821E4BACh case    1:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R10,regs.R10);
		/* 821E4BACh case    1:*/		return 0x821E4BB0;
		  /* 821E4BB0h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 821E4BB0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E4BC4;  }
		/* 821E4BB0h case    2:*/		return 0x821E4BB4;
		  /* 821E4BB4h */ case    3:  		/* ori R11, R11, 2048 */
		/* 821E4BB4h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x800);
		/* 821E4BB4h case    3:*/		return 0x821E4BB8;
		  /* 821E4BB8h */ case    4:  		/* addi R25, R25, 1 */
		/* 821E4BB8h case    4:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821E4BB8h case    4:*/		return 0x821E4BBC;
		  /* 821E4BBCh */ case    5:  		/* stw R11, <#[R31 + 60]> */
		/* 821E4BBCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E4BBCh case    5:*/		return 0x821E4BC0;
		  /* 821E4BC0h */ case    6:  		/* stw R25, <#[R1 + 136]> */
		/* 821E4BC0h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000088) );
		/* 821E4BC0h case    6:*/		return 0x821E4BC4;
	}
	return 0x821E4BC4;
} // Block from 821E4BA8h-821E4BC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4BC4);
		  /* 821E4BC4h */ case    0:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E4BC4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E4BC4h case    0:*/		return 0x821E4BC8;
		  /* 821E4BC8h */ case    1:  		/* addi R31, R31, 68 */
		/* 821E4BC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x44);
		/* 821E4BC8h case    1:*/		return 0x821E4BCC;
		  /* 821E4BCCh */ case    2:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E4BCCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E4BCCh case    2:*/		return 0x821E4BD0;
		  /* 821E4BD0h */ case    3:  		/* mulli R10, R10, 68 */
		/* 821E4BD0h case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E4BD0h case    3:*/		return 0x821E4BD4;
		  /* 821E4BD4h */ case    4:  		/* add R11, R10, R11 */
		/* 821E4BD4h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E4BD4h case    4:*/		return 0x821E4BD8;
		  /* 821E4BD8h */ case    5:  		/* cmplw CR6, R31, R11 */
		/* 821E4BD8h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821E4BD8h case    5:*/		return 0x821E4BDC;
		  /* 821E4BDCh */ case    6:  		/* bc 12, CR6_LT, -328 */
		/* 821E4BDCh case    6:*/		if ( regs.CR[6].lt ) { return 0x821E4A94;  }
		/* 821E4BDCh case    6:*/		return 0x821E4BE0;
	}
	return 0x821E4BE0;
} // Block from 821E4BC4h-821E4BE0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4BE0);
		  /* 821E4BE0h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821E4BE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821E4BE0h case    0:*/		return 0x821E4BE4;
		  /* 821E4BE4h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821E4BE4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E4BEC;  }
		/* 821E4BE4h case    1:*/		return 0x821E4BE8;
		  /* 821E4BE8h */ case    2:  		/* stb R22, <#[R1 + 130]> */
		/* 821E4BE8h case    2:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R1 + 0x00000082) );
		/* 821E4BE8h case    2:*/		return 0x821E4BEC;
	}
	return 0x821E4BEC;
} // Block from 821E4BE0h-821E4BECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E4BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4BEC);
		  /* 821E4BECh */ case    0:  		/* cmplwi CR6, R14, 0 */
		/* 821E4BECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821E4BECh case    0:*/		return 0x821E4BF0;
		  /* 821E4BF0h */ case    1:  		/* bc 12, CR6_EQ, 6192 */
		/* 821E4BF0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E6420;  }
		/* 821E4BF0h case    1:*/		return 0x821E4BF4;
		  /* 821E4BF4h */ case    2:  		/* lbz R11, <#[R1 + 130]> */
		/* 821E4BF4h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000082) );
		/* 821E4BF4h case    2:*/		return 0x821E4BF8;
		  /* 821E4BF8h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821E4BF8h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E4BF8h case    3:*/		return 0x821E4BFC;
		  /* 821E4BFCh */ case    4:  		/* bc 4, CR0_EQ, 6180 */
		/* 821E4BFCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E6420;  }
		/* 821E4BFCh case    4:*/		return 0x821E4C00;
		  /* 821E4C00h */ case    5:  		/* li R5, 0 */
		/* 821E4C00h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E4C00h case    5:*/		return 0x821E4C04;
		  /* 821E4C04h */ case    6:  		/* rlwinm R4, R14, 2, 0, 29 */
		/* 821E4C04h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R14);
		/* 821E4C04h case    6:*/		return 0x821E4C08;
		  /* 821E4C08h */ case    7:  		/* mr R3, R20 */
		/* 821E4C08h case    7:*/		regs.R3 = regs.R20;
		/* 821E4C08h case    7:*/		return 0x821E4C0C;
		  /* 821E4C0Ch */ case    8:  		/* bl -523220 */
		/* 821E4C0Ch case    8:*/		regs.LR = 0x821E4C10; return 0x82165038;
		/* 821E4C0Ch case    8:*/		return 0x821E4C10;
		  /* 821E4C10h */ case    9:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E4C10h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E4C10h case    9:*/		return 0x821E4C14;
		  /* 821E4C14h */ case   10:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E4C14h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E4C14h case   10:*/		return 0x821E4C18;
		  /* 821E4C18h */ case   11:  		/* mr R15, R3 */
		/* 821E4C18h case   11:*/		regs.R15 = regs.R3;
		/* 821E4C18h case   11:*/		return 0x821E4C1C;
		  /* 821E4C1Ch */ case   12:  		/* mulli R10, R10, 68 */
		/* 821E4C1Ch case   12:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E4C1Ch case   12:*/		return 0x821E4C20;
		  /* 821E4C20h */ case   13:  		/* add R10, R10, R11 */
		/* 821E4C20h case   13:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E4C20h case   13:*/		return 0x821E4C24;
		  /* 821E4C24h */ case   14:  		/* cmplw CR6, R11, R10 */
		/* 821E4C24h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E4C24h case   14:*/		return 0x821E4C28;
		  /* 821E4C28h */ case   15:  		/* bc 4, CR6_LT, 52 */
		/* 821E4C28h case   15:*/		if ( !regs.CR[6].lt ) { return 0x821E4C5C;  }
		/* 821E4C28h case   15:*/		return 0x821E4C2C;
		  /* 821E4C2Ch */ case   16:  		/* addi R8, R3, -4 */
		/* 821E4C2Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R3,0xFFFFFFFC);
		/* 821E4C2Ch case   16:*/		return 0x821E4C30;
		  /* 821E4C30h */ case   17:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E4C30h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E4C30h case   17:*/		return 0x821E4C34;
		  /* 821E4C34h */ case   18:  		/* cmplwi CR6, R10, 0 */
		/* 821E4C34h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E4C34h case   18:*/		return 0x821E4C38;
		  /* 821E4C38h */ case   19:  		/* bc 12, CR6_EQ, 8 */
		/* 821E4C38h case   19:*/		if ( regs.CR[6].eq ) { return 0x821E4C40;  }
		/* 821E4C38h case   19:*/		return 0x821E4C3C;
		  /* 821E4C3Ch */ case   20:  		/* stwu R11, <#[R8 + 4]> */
		/* 821E4C3Ch case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 821E4C3Ch case   20:*/		return 0x821E4C40;
	}
	return 0x821E4C40;
} // Block from 821E4BECh-821E4C40h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821E4C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4C40);
		  /* 821E4C40h */ case    0:  		/* lwz R9, <#[R20 + 620]> */
		/* 821E4C40h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E4C40h case    0:*/		return 0x821E4C44;
		  /* 821E4C44h */ case    1:  		/* addi R11, R11, 68 */
		/* 821E4C44h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x44);
		/* 821E4C44h case    1:*/		return 0x821E4C48;
		  /* 821E4C48h */ case    2:  		/* lwz R10, <#[R20 + 616]> */
		/* 821E4C48h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000268) );
		/* 821E4C48h case    2:*/		return 0x821E4C4C;
		  /* 821E4C4Ch */ case    3:  		/* mulli R9, R9, 68 */
		/* 821E4C4Ch case    3:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R9,0x44);
		/* 821E4C4Ch case    3:*/		return 0x821E4C50;
		  /* 821E4C50h */ case    4:  		/* add R10, R9, R10 */
		/* 821E4C50h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821E4C50h case    4:*/		return 0x821E4C54;
		  /* 821E4C54h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 821E4C54h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E4C54h case    5:*/		return 0x821E4C58;
		  /* 821E4C58h */ case    6:  		/* bc 12, CR6_LT, -40 */
		/* 821E4C58h case    6:*/		if ( regs.CR[6].lt ) { return 0x821E4C30;  }
		/* 821E4C58h case    6:*/		return 0x821E4C5C;
	}
	return 0x821E4C5C;
} // Block from 821E4C40h-821E4C5Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E4C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4C5C);
		  /* 821E4C5Ch */ case    0:  		/* lis R11, -32228 */
		/* 821E4C5Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF821C);
		/* 821E4C5Ch case    0:*/		return 0x821E4C60;
		  /* 821E4C60h */ case    1:  		/* li R5, 4 */
		/* 821E4C60h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821E4C60h case    1:*/		return 0x821E4C64;
		  /* 821E4C64h */ case    2:  		/* addi R6, R11, -10280 */
		/* 821E4C64h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFD7D8);
		/* 821E4C64h case    2:*/		return 0x821E4C68;
		  /* 821E4C68h */ case    3:  		/* mr R4, R14 */
		/* 821E4C68h case    3:*/		regs.R4 = regs.R14;
		/* 821E4C68h case    3:*/		return 0x821E4C6C;
		  /* 821E4C6Ch */ case    4:  		/* mr R3, R15 */
		/* 821E4C6Ch case    4:*/		regs.R3 = regs.R15;
		/* 821E4C6Ch case    4:*/		return 0x821E4C70;
		  /* 821E4C70h */ case    5:  		/* bl -1387664 */
		/* 821E4C70h case    5:*/		regs.LR = 0x821E4C74; return 0x82091FE0;
		/* 821E4C70h case    5:*/		return 0x821E4C74;
		  /* 821E4C74h */ case    6:  		/* cmplwi CR6, R14, 0 */
		/* 821E4C74h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821E4C74h case    6:*/		return 0x821E4C78;
		  /* 821E4C78h */ case    7:  		/* bc 12, CR6_EQ, 6056 */
		/* 821E4C78h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E6420;  }
		/* 821E4C78h case    7:*/		return 0x821E4C7C;
		  /* 821E4C7Ch */ case    8:  		/* rlwinm R11, R16, 2, 0, 29 */
		/* 821E4C7Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R16);
		/* 821E4C7Ch case    8:*/		return 0x821E4C80;
		  /* 821E4C80h */ case    9:  		/* lwz R19, <#[R1 + 804]> */
		/* 821E4C80h case    9:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x00000324) );
		/* 821E4C80h case    9:*/		return 0x821E4C84;
		  /* 821E4C84h */ case   10:  		/* li R22, 0 */
		/* 821E4C84h case   10:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821E4C84h case   10:*/		return 0x821E4C88;
		  /* 821E4C88h */ case   11:  		/* li R17, 1 */
		/* 821E4C88h case   11:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 821E4C88h case   11:*/		return 0x821E4C8C;
		  /* 821E4C8Ch */ case   12:  		/* lwzx R21, <#[R11 + R15]> */
		/* 821E4C8Ch case   12:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 821E4C8Ch case   12:*/		return 0x821E4C90;
		  /* 821E4C90h */ case   13:  		/* lwz R20, <#[R21 + 52]> */
		/* 821E4C90h case   13:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R21 + 0x00000034) );
		/* 821E4C90h case   13:*/		return 0x821E4C94;
		  /* 821E4C94h */ case   14:  		/* cmplwi CR6, R20, 0 */
		/* 821E4C94h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821E4C94h case   14:*/		return 0x821E4C98;
		  /* 821E4C98h */ case   15:  		/* bc 12, CR6_EQ, 3400 */
		/* 821E4C98h case   15:*/		if ( regs.CR[6].eq ) { return 0x821E59E0;  }
		/* 821E4C98h case   15:*/		return 0x821E4C9C;
		  /* 821E4C9Ch */ case   16:  		/* lwz R29, <#[R20 + 64]> */
		/* 821E4C9Ch case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R20 + 0x00000040) );
		/* 821E4C9Ch case   16:*/		return 0x821E4CA0;
		  /* 821E4CA0h */ case   17:  		/* cmplwi CR6, R29, 0 */
		/* 821E4CA0h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E4CA0h case   17:*/		return 0x821E4CA4;
		  /* 821E4CA4h */ case   18:  		/* bc 12, CR6_EQ, 2056 */
		/* 821E4CA4h case   18:*/		if ( regs.CR[6].eq ) { return 0x821E54AC;  }
		/* 821E4CA4h case   18:*/		return 0x821E4CA8;
		  /* 821E4CA8h */ case   19:  		/* lwz R11, <#[R29 + 12]> */
		/* 821E4CA8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821E4CA8h case   19:*/		return 0x821E4CAC;
		  /* 821E4CACh */ case   20:  		/* rlwinm. R11, R11, 0, 5, 5 */
		/* 821E4CACh case   20:*/		cpu::op::rlwinm<1,0,5,5>(regs,&regs.R11,regs.R11);
		/* 821E4CACh case   20:*/		return 0x821E4CB0;
		  /* 821E4CB0h */ case   21:  		/* bc 12, CR0_EQ, 2036 */
		/* 821E4CB0h case   21:*/		if ( regs.CR[0].eq ) { return 0x821E54A4;  }
		/* 821E4CB0h case   21:*/		return 0x821E4CB4;
		  /* 821E4CB4h */ case   22:  		/* lwz R11, <#[R29 + 16]> */
		/* 821E4CB4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821E4CB4h case   22:*/		return 0x821E4CB8;
		  /* 821E4CB8h */ case   23:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 821E4CB8h case   23:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821E4CB8h case   23:*/		return 0x821E4CBC;
		  /* 821E4CBCh */ case   24:  		/* cmplwi CR6, R11, 1 */
		/* 821E4CBCh case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821E4CBCh case   24:*/		return 0x821E4CC0;
		  /* 821E4CC0h */ case   25:  		/* bc 4, CR6_EQ, 2020 */
		/* 821E4CC0h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821E54A4;  }
		/* 821E4CC0h case   25:*/		return 0x821E4CC4;
		  /* 821E4CC4h */ case   26:  		/* lwz R30, <#[R29]> */
		/* 821E4CC4h case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821E4CC4h case   26:*/		return 0x821E4CC8;
		  /* 821E4CC8h */ case   27:  		/* li R11, 84 */
		/* 821E4CC8h case   27:*/		cpu::op::li<0>(regs,&regs.R11,0x54);
		/* 821E4CC8h case   27:*/		return 0x821E4CCC;
		  /* 821E4CCCh */ case   28:  		/* lwz R10, <#[R21 + 4]> */
		/* 821E4CCCh case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000004) );
		/* 821E4CCCh case   28:*/		return 0x821E4CD0;
		  /* 821E4CD0h */ case   29:  		/* lwz R31, <#[R30 + 4]> */
		/* 821E4CD0h case   29:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821E4CD0h case   29:*/		return 0x821E4CD4;
		  /* 821E4CD4h */ case   30:  		/* lwz R9, <#[R31 + 28]> */
		/* 821E4CD4h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 821E4CD4h case   30:*/		return 0x821E4CD8;
		  /* 821E4CD8h */ case   31:  		/* lwzx R8, <#[R9 + R11]> */
		/* 821E4CD8h case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821E4CD8h case   31:*/		return 0x821E4CDC;
		  /* 821E4CDCh */ case   32:  		/* lwzx R7, <#[R10 + R11]> */
		/* 821E4CDCh case   32:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E4CDCh case   32:*/		return 0x821E4CE0;
		  /* 821E4CE0h */ case   33:  		/* cmplw CR6, R8, R7 */
		/* 821E4CE0h case   33:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 821E4CE0h case   33:*/		return 0x821E4CE4;
		  /* 821E4CE4h */ case   34:  		/* bc 4, CR6_EQ, 1844 */
		/* 821E4CE4h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821E5418;  }
		/* 821E4CE4h case   34:*/		return 0x821E4CE8;
		  /* 821E4CE8h */ case   35:  		/* addi R11, R11, 4 */
		/* 821E4CE8h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E4CE8h case   35:*/		return 0x821E4CEC;
		  /* 821E4CECh */ case   36:  		/* cmpwi CR6, R11, 88 */
		/* 821E4CECh case   36:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000058);
		/* 821E4CECh case   36:*/		return 0x821E4CF0;
		  /* 821E4CF0h */ case   37:  		/* bc 12, CR6_LT, -24 */
		/* 821E4CF0h case   37:*/		if ( regs.CR[6].lt ) { return 0x821E4CD8;  }
		/* 821E4CF0h case   37:*/		return 0x821E4CF4;
		  /* 821E4CF4h */ case   38:  		/* mr R11, R17 */
		/* 821E4CF4h case   38:*/		regs.R11 = regs.R17;
		/* 821E4CF4h case   38:*/		return 0x821E4CF8;
		  /* 821E4CF8h */ case   39:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E4CF8h case   39:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E4CF8h case   39:*/		return 0x821E4CFC;
		  /* 821E4CFCh */ case   40:  		/* bc 12, CR0_EQ, 1960 */
		/* 821E4CFCh case   40:*/		if ( regs.CR[0].eq ) { return 0x821E54A4;  }
		/* 821E4CFCh case   40:*/		return 0x821E4D00;
		  /* 821E4D00h */ case   41:  		/* lwz R11, <#[R30]> */
		/* 821E4D00h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E4D00h case   41:*/		return 0x821E4D04;
		  /* 821E4D04h */ case   42:  		/* cmplwi CR6, R11, 0 */
		/* 821E4D04h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E4D04h case   42:*/		return 0x821E4D08;
		  /* 821E4D08h */ case   43:  		/* bc 4, CR6_EQ, 1948 */
		/* 821E4D08h case   43:*/		if ( !regs.CR[6].eq ) { return 0x821E54A4;  }
		/* 821E4D08h case   43:*/		return 0x821E4D0C;
		  /* 821E4D0Ch */ case   44:  		/* lwz R11, <#[R30 + 8]> */
		/* 821E4D0Ch case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E4D0Ch case   44:*/		return 0x821E4D10;
		  /* 821E4D10h */ case   45:  		/* lwz R11, <#[R11]> */
		/* 821E4D10h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821E4D10h case   45:*/		return 0x821E4D14;
		  /* 821E4D14h */ case   46:  		/* cmplwi CR6, R11, 2 */
		/* 821E4D14h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 821E4D14h case   46:*/		return 0x821E4D18;
		  /* 821E4D18h */ case   47:  		/* bc 4, CR6_EQ, 1932 */
		/* 821E4D18h case   47:*/		if ( !regs.CR[6].eq ) { return 0x821E54A4;  }
		/* 821E4D18h case   47:*/		return 0x821E4D1C;
		  /* 821E4D1Ch */ case   48:  		/* lwz R11, <#[R31 + 52]> */
		/* 821E4D1Ch case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 821E4D1Ch case   48:*/		return 0x821E4D20;
		  /* 821E4D20h */ case   49:  		/* lwz R10, <#[R29 + 8]> */
		/* 821E4D20h case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821E4D20h case   49:*/		return 0x821E4D24;
		  /* 821E4D24h */ case   50:  		/* cmplw CR6, R10, R11 */
		/* 821E4D24h case   50:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821E4D24h case   50:*/		return 0x821E4D28;
		  /* 821E4D28h */ case   51:  		/* bc 4, CR6_EQ, 1916 */
		/* 821E4D28h case   51:*/		if ( !regs.CR[6].eq ) { return 0x821E54A4;  }
		/* 821E4D28h case   51:*/		return 0x821E4D2C;
		  /* 821E4D2Ch */ case   52:  		/* li R4, 1 */
		/* 821E4D2Ch case   52:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E4D2Ch case   52:*/		return 0x821E4D30;
		  /* 821E4D30h */ case   53:  		/* fmr FR4, FR29 */
		/* 821E4D30h case   53:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821E4D30h case   53:*/		return 0x821E4D34;
		  /* 821E4D34h */ case   54:  		/* mr R3, R19 */
		/* 821E4D34h case   54:*/		regs.R3 = regs.R19;
		/* 821E4D34h case   54:*/		return 0x821E4D38;
		  /* 821E4D38h */ case   55:  		/* fmr FR3, FR29 */
		/* 821E4D38h case   55:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821E4D38h case   55:*/		return 0x821E4D3C;
		  /* 821E4D3Ch */ case   56:  		/* fmr FR2, FR29 */
		/* 821E4D3Ch case   56:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821E4D3Ch case   56:*/		return 0x821E4D40;
		  /* 821E4D40h */ case   57:  		/* fmr FR1, FR27 */
		/* 821E4D40h case   57:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR27);
		/* 821E4D40h case   57:*/		return 0x821E4D44;
		  /* 821E4D44h */ case   58:  		/* bl 286228 */
		/* 821E4D44h case   58:*/		regs.LR = 0x821E4D48; return 0x8222AB58;
		/* 821E4D44h case   58:*/		return 0x821E4D48;
		  /* 821E4D48h */ case   59:  		/* mr R11, R3 */
		/* 821E4D48h case   59:*/		regs.R11 = regs.R3;
		/* 821E4D48h case   59:*/		return 0x821E4D4C;
		  /* 821E4D4Ch */ case   60:  		/* li R7, 228 */
		/* 821E4D4Ch case   60:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821E4D4Ch case   60:*/		return 0x821E4D50;
		  /* 821E4D50h */ case   61:  		/* li R6, 4 */
		/* 821E4D50h case   61:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821E4D50h case   61:*/		return 0x821E4D54;
		  /* 821E4D54h */ case   62:  		/* mr R3, R19 */
		/* 821E4D54h case   62:*/		regs.R3 = regs.R19;
		/* 821E4D54h case   62:*/		return 0x821E4D58;
		  /* 821E4D58h */ case   63:  		/* mr R4, R11 */
		/* 821E4D58h case   63:*/		regs.R4 = regs.R11;
		/* 821E4D58h case   63:*/		return 0x821E4D5C;
		  /* 821E4D5Ch */ case   64:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E4D5Ch case   64:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E4D5Ch case   64:*/		return 0x821E4D60;
		  /* 821E4D60h */ case   65:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 821E4D60h case   65:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 821E4D60h case   65:*/		return 0x821E4D64;
		  /* 821E4D64h */ case   66:  		/* bl 251100 */
		/* 821E4D64h case   66:*/		regs.LR = 0x821E4D68; return 0x82222240;
		/* 821E4D64h case   66:*/		return 0x821E4D68;
		  /* 821E4D68h */ case   67:  		/* mr R11, R3 */
		/* 821E4D68h case   67:*/		regs.R11 = regs.R3;
		/* 821E4D68h case   67:*/		return 0x821E4D6C;
		  /* 821E4D6Ch */ case   68:  		/* mr R5, R31 */
		/* 821E4D6Ch case   68:*/		regs.R5 = regs.R31;
		/* 821E4D6Ch case   68:*/		return 0x821E4D70;
		  /* 821E4D70h */ case   69:  		/* li R4, 0 */
		/* 821E4D70h case   69:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E4D70h case   69:*/		return 0x821E4D74;
		  /* 821E4D74h */ case   70:  		/* mr R3, R19 */
		/* 821E4D74h case   70:*/		regs.R3 = regs.R19;
		/* 821E4D74h case   70:*/		return 0x821E4D78;
		  /* 821E4D78h */ case   71:  		/* mr R7, R11 */
		/* 821E4D78h case   71:*/		regs.R7 = regs.R11;
		/* 821E4D78h case   71:*/		return 0x821E4D7C;
		  /* 821E4D7Ch */ case   72:  		/* lwz R10, <#[R11]> */
		/* 821E4D7Ch case   72:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E4D7Ch case   72:*/		return 0x821E4D80;
		  /* 821E4D80h */ case   73:  		/* rlwimi R10, R17, 25, 4, 6 */
		/* 821E4D80h case   73:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R17);
		/* 821E4D80h case   73:*/		return 0x821E4D84;
		  /* 821E4D84h */ case   74:  		/* stw R10, <#[R11]> */
		/* 821E4D84h case   74:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E4D84h case   74:*/		return 0x821E4D88;
		  /* 821E4D88h */ case   75:  		/* lwz R6, <#[R31 + 44]> */
		/* 821E4D88h case   75:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E4D88h case   75:*/		return 0x821E4D8C;
		  /* 821E4D8Ch */ case   76:  		/* bl -290724 */
		/* 821E4D8Ch case   76:*/		regs.LR = 0x821E4D90; return 0x8219DDE8;
		/* 821E4D8Ch case   76:*/		return 0x821E4D90;
		  /* 821E4D90h */ case   77:  		/* lwz R11, <#[R31 + 48]> */
		/* 821E4D90h case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821E4D90h case   77:*/		return 0x821E4D94;
		  /* 821E4D94h */ case   78:  		/* lwz R10, <#[R11]> */
		/* 821E4D94h case   78:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E4D94h case   78:*/		return 0x821E4D98;
		  /* 821E4D98h */ case   79:  		/* mr R28, R3 */
		/* 821E4D98h case   79:*/		regs.R28 = regs.R3;
		/* 821E4D98h case   79:*/		return 0x821E4D9C;
		  /* 821E4D9Ch */ case   80:  		/* li R6, 16 */
		/* 821E4D9Ch case   80:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 821E4D9Ch case   80:*/		return 0x821E4DA0;
		  /* 821E4DA0h */ case   81:  		/* lwz R4, <#[R11 + 12]> */
		/* 821E4DA0h case   81:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E4DA0h case   81:*/		return 0x821E4DA4;
		  /* 821E4DA4h */ case   82:  		/* li R5, 1 */
		/* 821E4DA4h case   82:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821E4DA4h case   82:*/		return 0x821E4DA8;
		  /* 821E4DA8h */ case   83:  		/* mr R3, R19 */
		/* 821E4DA8h case   83:*/		regs.R3 = regs.R19;
		/* 821E4DA8h case   83:*/		return 0x821E4DAC;
		  /* 821E4DACh */ case   84:  		/* rlwinm R7, R10, 27, 24, 31 */
		/* 821E4DACh case   84:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R7,regs.R10);
		/* 821E4DACh case   84:*/		return 0x821E4DB0;
		  /* 821E4DB0h */ case   85:  		/* bl 251024 */
		/* 821E4DB0h case   85:*/		regs.LR = 0x821E4DB4; return 0x82222240;
		/* 821E4DB0h case   85:*/		return 0x821E4DB4;
		  /* 821E4DB4h */ case   86:  		/* mr R8, R3 */
		/* 821E4DB4h case   86:*/		regs.R8 = regs.R3;
		/* 821E4DB4h case   86:*/		return 0x821E4DB8;
		  /* 821E4DB8h */ case   87:  		/* mr R6, R28 */
		/* 821E4DB8h case   87:*/		regs.R6 = regs.R28;
		/* 821E4DB8h case   87:*/		return 0x821E4DBC;
		  /* 821E4DBCh */ case   88:  		/* lwz R7, <#[R29 + 8]> */
		/* 821E4DBCh case   88:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 821E4DBCh case   88:*/		return 0x821E4DC0;
		  /* 821E4DC0h */ case   89:  		/* mr R5, R31 */
		/* 821E4DC0h case   89:*/		regs.R5 = regs.R31;
		/* 821E4DC0h case   89:*/		return 0x821E4DC4;
		  /* 821E4DC4h */ case   90:  		/* li R4, 0 */
		/* 821E4DC4h case   90:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E4DC4h case   90:*/		return 0x821E4DC8;
		  /* 821E4DC8h */ case   91:  		/* mr R3, R19 */
		/* 821E4DC8h case   91:*/		regs.R3 = regs.R19;
		/* 821E4DC8h case   91:*/		return 0x821E4DCC;
		  /* 821E4DCCh */ case   92:  		/* addi R22, R22, 1 */
		/* 821E4DCCh case   92:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 821E4DCCh case   92:*/		return 0x821E4DD0;
		  /* 821E4DD0h */ case   93:  		/* bl -142792 */
		/* 821E4DD0h case   93:*/		regs.LR = 0x821E4DD4; return 0x821C2008;
		/* 821E4DD0h case   93:*/		return 0x821E4DD4;
		  /* 821E4DD4h */ case   94:  		/* b 1616 */
		/* 821E4DD4h case   94:*/		return 0x821E5424;
		/* 821E4DD4h case   94:*/		return 0x821E4DD8;
	}
	return 0x821E4DD8;
} // Block from 821E4C5Ch-821E4DD8h (95 instructions)

//////////////////////////////////////////////////////
// Block at 821E4DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4DD8);
		  /* 821E4DD8h */ case    0:  		/* lwz R11, <#[R31 + 36]> */
		/* 821E4DD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821E4DD8h case    0:*/		return 0x821E4DDC;
		  /* 821E4DDCh */ case    1:  		/* twi 6, R29, 0 */
		/* 821E4DDCh case    1:*/		cpu::op::tw<6>(regs, 0x821E4DDC, regs.R29, 0x00000000);
		/* 821E4DDCh case    1:*/		return 0x821E4DE0;
		  /* 821E4DE0h */ case    2:  		/* rlwinm R11, R11, 22, 17, 31 */
		/* 821E4DE0h case    2:*/		cpu::op::rlwinm<0,22,17,31>(regs,&regs.R11,regs.R11);
		/* 821E4DE0h case    2:*/		return 0x821E4DE4;
		  /* 821E4DE4h */ case    3:  		/* divwu R30, R11, R29 */
		/* 821E4DE4h case    3:*/		cpu::op::divwu<0>(regs,&regs.R30,regs.R11,regs.R29);
		/* 821E4DE4h case    3:*/		return 0x821E4DE8;
		  /* 821E4DE8h */ case    4:  		/* cmplw CR6, R30, R29 */
		/* 821E4DE8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 821E4DE8h case    4:*/		return 0x821E4DEC;
		  /* 821E4DECh */ case    5:  		/* bc 4, CR6_GT, 16 */
		/* 821E4DECh case    5:*/		if ( !regs.CR[6].gt ) { return 0x821E4DFC;  }
		/* 821E4DECh case    5:*/		return 0x821E4DF0;
		  /* 821E4DF0h */ case    6:  		/* mr R11, R30 */
		/* 821E4DF0h case    6:*/		regs.R11 = regs.R30;
		/* 821E4DF0h case    6:*/		return 0x821E4DF4;
		  /* 821E4DF4h */ case    7:  		/* mr R30, R29 */
		/* 821E4DF4h case    7:*/		regs.R30 = regs.R29;
		/* 821E4DF4h case    7:*/		return 0x821E4DF8;
		  /* 821E4DF8h */ case    8:  		/* mr R29, R11 */
		/* 821E4DF8h case    8:*/		regs.R29 = regs.R11;
		/* 821E4DF8h case    8:*/		return 0x821E4DFC;
	}
	return 0x821E4DFC;
} // Block from 821E4DD8h-821E4DFCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E4DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E4DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E4DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E4DFC);
		  /* 821E4DFCh */ case    0:  		/* mr R4, R31 */
		/* 821E4DFCh case    0:*/		regs.R4 = regs.R31;
		/* 821E4DFCh case    0:*/		return 0x821E4E00;
		  /* 821E4E00h */ case    1:  		/* mr R3, R20 */
		/* 821E4E00h case    1:*/		regs.R3 = regs.R20;
		/* 821E4E00h case    1:*/		return 0x821E4E04;
		  /* 821E4E04h */ case    2:  		/* bl -122900 */
		/* 821E4E04h case    2:*/		regs.LR = 0x821E4E08; return 0x821C6DF0;
		/* 821E4E04h case    2:*/		return 0x821E4E08;
		  /* 821E4E08h */ case    3:  		/* mr R4, R31 */
		/* 821E4E08h case    3:*/		regs.R4 = regs.R31;
		/* 821E4E08h case    3:*/		return 0x821E4E0C;
		  /* 821E4E0Ch */ case    4:  		/* mr R3, R20 */
		/* 821E4E0Ch case    4:*/		regs.R3 = regs.R20;
		/* 821E4E0Ch case    4:*/		return 0x821E4E10;
		  /* 821E4E10h */ case    5:  		/* lwz R28, <#[R31]> */
		/* 821E4E10h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000000) );
		/* 821E4E10h case    5:*/		return 0x821E4E14;
		  /* 821E4E14h */ case    6:  		/* bl -122916 */
		/* 821E4E14h case    6:*/		regs.LR = 0x821E4E18; return 0x821C6DF0;
		/* 821E4E14h case    6:*/		return 0x821E4E18;
		  /* 821E4E18h */ case    7:  		/* rldicl R11, R29, 0, 32 */
		/* 821E4E18h case    7:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R29);
		/* 821E4E18h case    7:*/		return 0x821E4E1C;
		  /* 821E4E1Ch */ case    8:  		/* fmr FR4, FR29 */
		/* 821E4E1Ch case    8:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821E4E1Ch case    8:*/		return 0x821E4E20;
		  /* 821E4E20h */ case    9:  		/* rldicl R10, R30, 0, 32 */
		/* 821E4E20h case    9:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R30);
		/* 821E4E20h case    9:*/		return 0x821E4E24;
		  /* 821E4E24h */ case   10:  		/* fmr FR3, FR27 */
		/* 821E4E24h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR27);
		/* 821E4E24h case   10:*/		return 0x821E4E28;
		  /* 821E4E28h */ case   11:  		/* std R11, <#[R1 + 424]> */
		/* 821E4E28h case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000001A8) );
		/* 821E4E28h case   11:*/		return 0x821E4E2C;
		  /* 821E4E2Ch */ case   12:  		/* li R4, 4 */
		/* 821E4E2Ch case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821E4E2Ch case   12:*/		return 0x821E4E30;
		  /* 821E4E30h */ case   13:  		/* std R10, <#[R1 + 440]> */
		/* 821E4E30h case   13:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x000001B8) );
		/* 821E4E30h case   13:*/		return 0x821E4E34;
		  /* 821E4E34h */ case   14:  		/* mr R3, R20 */
		/* 821E4E34h case   14:*/		regs.R3 = regs.R20;
		/* 821E4E34h case   14:*/		return 0x821E4E38;
		  /* 821E4E38h */ case   15:  		/* lwz R27, <#[R31]> */
		/* 821E4E38h case   15:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x00000000) );
		/* 821E4E38h case   15:*/		return 0x821E4E3C;
		  /* 821E4E3Ch */ case   16:  		/* lfd FR0, <#[R1 + 424]> */
		/* 821E4E3Ch case   16:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000001A8) );
		/* 821E4E3Ch case   16:*/		return 0x821E4E40;
		  /* 821E4E40h */ case   17:  		/* lfd FR13, <#[R1 + 440]> */
		/* 821E4E40h case   17:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000001B8) );
		/* 821E4E40h case   17:*/		return 0x821E4E44;
		  /* 821E4E44h */ case   18:  		/* fcfid FR0, FR0 */
		/* 821E4E44h case   18:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821E4E44h case   18:*/		return 0x821E4E48;
		  /* 821E4E48h */ case   19:  		/* fcfid FR13, FR13 */
		/* 821E4E48h case   19:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 821E4E48h case   19:*/		return 0x821E4E4C;
		  /* 821E4E4Ch */ case   20:  		/* frsp FR2, FR0 */
		/* 821E4E4Ch case   20:*/		cpu::op::frsp<0>(regs,&regs.FR2,regs.FR0);
		/* 821E4E4Ch case   20:*/		return 0x821E4E50;
		  /* 821E4E50h */ case   21:  		/* frsp FR1, FR13 */
		/* 821E4E50h case   21:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR13);
		/* 821E4E50h case   21:*/		return 0x821E4E54;
		  /* 821E4E54h */ case   22:  		/* bl 285956 */
		/* 821E4E54h case   22:*/		regs.LR = 0x821E4E58; return 0x8222AB58;
		/* 821E4E54h case   22:*/		return 0x821E4E58;
		  /* 821E4E58h */ case   23:  		/* mr R24, R3 */
		/* 821E4E58h case   23:*/		regs.R24 = regs.R3;
		/* 821E4E58h case   23:*/		return 0x821E4E5C;
		  /* 821E4E5Ch */ case   24:  		/* mr R4, R28 */
		/* 821E4E5Ch case   24:*/		regs.R4 = regs.R28;
		/* 821E4E5Ch case   24:*/		return 0x821E4E60;
		  /* 821E4E60h */ case   25:  		/* mr R3, R20 */
		/* 821E4E60h case   25:*/		regs.R3 = regs.R20;
		/* 821E4E60h case   25:*/		return 0x821E4E64;
		  /* 821E4E64h */ case   26:  		/* bl 261084 */
		/* 821E4E64h case   26:*/		regs.LR = 0x821E4E68; return 0x82224A40;
		/* 821E4E64h case   26:*/		return 0x821E4E68;
		  /* 821E4E68h */ case   27:  		/* mr R30, R3 */
		/* 821E4E68h case   27:*/		regs.R30 = regs.R3;
		/* 821E4E68h case   27:*/		return 0x821E4E6C;
		  /* 821E4E6Ch */ case   28:  		/* mr R4, R24 */
		/* 821E4E6Ch case   28:*/		regs.R4 = regs.R24;
		/* 821E4E6Ch case   28:*/		return 0x821E4E70;
		  /* 821E4E70h */ case   29:  		/* li R5, 3 */
		/* 821E4E70h case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 821E4E70h case   29:*/		return 0x821E4E74;
		  /* 821E4E74h */ case   30:  		/* mr R3, R20 */
		/* 821E4E74h case   30:*/		regs.R3 = regs.R20;
		/* 821E4E74h case   30:*/		return 0x821E4E78;
		  /* 821E4E78h */ case   31:  		/* bl -445800 */
		/* 821E4E78h case   31:*/		regs.LR = 0x821E4E7C; return 0x82178110;
		/* 821E4E78h case   31:*/		return 0x821E4E7C;
		  /* 821E4E7Ch */ case   32:  		/* mr R4, R3 */
		/* 821E4E7Ch case   32:*/		regs.R4 = regs.R3;
		/* 821E4E7Ch case   32:*/		return 0x821E4E80;
		  /* 821E4E80h */ case   33:  		/* mr R3, R30 */
		/* 821E4E80h case   33:*/		regs.R3 = regs.R30;
		/* 821E4E80h case   33:*/		return 0x821E4E84;
		  /* 821E4E84h */ case   34:  		/* bl -445628 */
		/* 821E4E84h case   34:*/		regs.LR = 0x821E4E88; return 0x821781C8;
		/* 821E4E84h case   34:*/		return 0x821E4E88;
		  /* 821E4E88h */ case   35:  		/* mr R4, R27 */
		/* 821E4E88h case   35:*/		regs.R4 = regs.R27;
		/* 821E4E88h case   35:*/		return 0x821E4E8C;
		  /* 821E4E8Ch */ case   36:  		/* mr R3, R20 */
		/* 821E4E8Ch case   36:*/		regs.R3 = regs.R20;
		/* 821E4E8Ch case   36:*/		return 0x821E4E90;
		  /* 821E4E90h */ case   37:  		/* bl 261040 */
		/* 821E4E90h case   37:*/		regs.LR = 0x821E4E94; return 0x82224A40;
		/* 821E4E90h case   37:*/		return 0x821E4E94;
		  /* 821E4E94h */ case   38:  		/* mr R29, R3 */
		/* 821E4E94h case   38:*/		regs.R29 = regs.R3;
		/* 821E4E94h case   38:*/		return 0x821E4E98;
		  /* 821E4E98h */ case   39:  		/* mr R4, R24 */
		/* 821E4E98h case   39:*/		regs.R4 = regs.R24;
		/* 821E4E98h case   39:*/		return 0x821E4E9C;
		  /* 821E4E9Ch */ case   40:  		/* li R5, 2 */
		/* 821E4E9Ch case   40:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821E4E9Ch case   40:*/		return 0x821E4EA0;
		  /* 821E4EA0h */ case   41:  		/* mr R3, R20 */
		/* 821E4EA0h case   41:*/		regs.R3 = regs.R20;
		/* 821E4EA0h case   41:*/		return 0x821E4EA4;
		  /* 821E4EA4h */ case   42:  		/* bl -445844 */
		/* 821E4EA4h case   42:*/		regs.LR = 0x821E4EA8; return 0x82178110;
		/* 821E4EA4h case   42:*/		return 0x821E4EA8;
		  /* 821E4EA8h */ case   43:  		/* mr R28, R3 */
		/* 821E4EA8h case   43:*/		regs.R28 = regs.R3;
		/* 821E4EA8h case   43:*/		return 0x821E4EAC;
		  /* 821E4EACh */ case   44:  		/* mr R4, R29 */
		/* 821E4EACh case   44:*/		regs.R4 = regs.R29;
		/* 821E4EACh case   44:*/		return 0x821E4EB0;
		  /* 821E4EB0h */ case   45:  		/* mr R3, R20 */
		/* 821E4EB0h case   45:*/		regs.R3 = regs.R20;
		/* 821E4EB0h case   45:*/		return 0x821E4EB4;
		  /* 821E4EB4h */ case   46:  		/* bl -446132 */
		/* 821E4EB4h case   46:*/		regs.LR = 0x821E4EB8; return 0x82178000;
		/* 821E4EB4h case   46:*/		return 0x821E4EB8;
		  /* 821E4EB8h */ case   47:  		/* mr R6, R3 */
		/* 821E4EB8h case   47:*/		regs.R6 = regs.R3;
		/* 821E4EB8h case   47:*/		return 0x821E4EBC;
		  /* 821E4EBCh */ case   48:  		/* addi R5, R27, 24 */
		/* 821E4EBCh case   48:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R27,0x18);
		/* 821E4EBCh case   48:*/		return 0x821E4EC0;
		  /* 821E4EC0h */ case   49:  		/* mr R4, R27 */
		/* 821E4EC0h case   49:*/		regs.R4 = regs.R27;
		/* 821E4EC0h case   49:*/		return 0x821E4EC4;
		  /* 821E4EC4h */ case   50:  		/* mr R3, R20 */
		/* 821E4EC4h case   50:*/		regs.R3 = regs.R20;
		/* 821E4EC4h case   50:*/		return 0x821E4EC8;
		  /* 821E4EC8h */ case   51:  		/* mr R7, R28 */
		/* 821E4EC8h case   51:*/		regs.R7 = regs.R28;
		/* 821E4EC8h case   51:*/		return 0x821E4ECC;
		  /* 821E4ECCh */ case   52:  		/* bl -147116 */
		/* 821E4ECCh case   52:*/		regs.LR = 0x821E4ED0; return 0x821C1020;
		/* 821E4ECCh case   52:*/		return 0x821E4ED0;
		  /* 821E4ED0h */ case   53:  		/* mr R26, R3 */
		/* 821E4ED0h case   53:*/		regs.R26 = regs.R3;
		/* 821E4ED0h case   53:*/		return 0x821E4ED4;
		  /* 821E4ED4h */ case   54:  		/* mr R4, R30 */
		/* 821E4ED4h case   54:*/		regs.R4 = regs.R30;
		/* 821E4ED4h case   54:*/		return 0x821E4ED8;
		  /* 821E4ED8h */ case   55:  		/* mr R3, R20 */
		/* 821E4ED8h case   55:*/		regs.R3 = regs.R20;
		/* 821E4ED8h case   55:*/		return 0x821E4EDC;
		  /* 821E4EDCh */ case   56:  		/* bl -446172 */
		/* 821E4EDCh case   56:*/		regs.LR = 0x821E4EE0; return 0x82178000;
		/* 821E4EDCh case   56:*/		return 0x821E4EE0;
		  /* 821E4EE0h */ case   57:  		/* mr R4, R3 */
		/* 821E4EE0h case   57:*/		regs.R4 = regs.R3;
		/* 821E4EE0h case   57:*/		return 0x821E4EE4;
		  /* 821E4EE4h */ case   58:  		/* mr R3, R29 */
		/* 821E4EE4h case   58:*/		regs.R3 = regs.R29;
		/* 821E4EE4h case   58:*/		return 0x821E4EE8;
		  /* 821E4EE8h */ case   59:  		/* bl -445728 */
		/* 821E4EE8h case   59:*/		regs.LR = 0x821E4EEC; return 0x821781C8;
		/* 821E4EE8h case   59:*/		return 0x821E4EEC;
		  /* 821E4EECh */ case   60:  		/* mr R4, R26 */
		/* 821E4EECh case   60:*/		regs.R4 = regs.R26;
		/* 821E4EECh case   60:*/		return 0x821E4EF0;
		  /* 821E4EF0h */ case   61:  		/* mr R3, R20 */
		/* 821E4EF0h case   61:*/		regs.R3 = regs.R20;
		/* 821E4EF0h case   61:*/		return 0x821E4EF4;
		  /* 821E4EF4h */ case   62:  		/* bl -446196 */
		/* 821E4EF4h case   62:*/		regs.LR = 0x821E4EF8; return 0x82178000;
		/* 821E4EF4h case   62:*/		return 0x821E4EF8;
		  /* 821E4EF8h */ case   63:  		/* mr R4, R3 */
		/* 821E4EF8h case   63:*/		regs.R4 = regs.R3;
		/* 821E4EF8h case   63:*/		return 0x821E4EFC;
		  /* 821E4EFCh */ case   64:  		/* mr R3, R29 */
		/* 821E4EFCh case   64:*/		regs.R3 = regs.R29;
		/* 821E4EFCh case   64:*/		return 0x821E4F00;
		  /* 821E4F00h */ case   65:  		/* bl -445752 */
		/* 821E4F00h case   65:*/		regs.LR = 0x821E4F04; return 0x821781C8;
		/* 821E4F00h case   65:*/		return 0x821E4F04;
		  /* 821E4F04h */ case   66:  		/* mr R4, R27 */
		/* 821E4F04h case   66:*/		regs.R4 = regs.R27;
		/* 821E4F04h case   66:*/		return 0x821E4F08;
		  /* 821E4F08h */ case   67:  		/* mr R3, R20 */
		/* 821E4F08h case   67:*/		regs.R3 = regs.R20;
		/* 821E4F08h case   67:*/		return 0x821E4F0C;
		  /* 821E4F0Ch */ case   68:  		/* bl 260916 */
		/* 821E4F0Ch case   68:*/		regs.LR = 0x821E4F10; return 0x82224A40;
		/* 821E4F0Ch case   68:*/		return 0x821E4F10;
		  /* 821E4F10h */ case   69:  		/* mr R29, R3 */
		/* 821E4F10h case   69:*/		regs.R29 = regs.R3;
		/* 821E4F10h case   69:*/		return 0x821E4F14;
		  /* 821E4F14h */ case   70:  		/* li R5, 3 */
		/* 821E4F14h case   70:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 821E4F14h case   70:*/		return 0x821E4F18;
		  /* 821E4F18h */ case   71:  		/* mr R4, R24 */
		/* 821E4F18h case   71:*/		regs.R4 = regs.R24;
		/* 821E4F18h case   71:*/		return 0x821E4F1C;
		  /* 821E4F1Ch */ case   72:  		/* mr R3, R20 */
		/* 821E4F1Ch case   72:*/		regs.R3 = regs.R20;
		/* 821E4F1Ch case   72:*/		return 0x821E4F20;
		  /* 821E4F20h */ case   73:  		/* bl -445968 */
		/* 821E4F20h case   73:*/		regs.LR = 0x821E4F24; return 0x82178110;
		/* 821E4F20h case   73:*/		return 0x821E4F24;
		  /* 821E4F24h */ case   74:  		/* mr R4, R3 */
		/* 821E4F24h case   74:*/		regs.R4 = regs.R3;
		/* 821E4F24h case   74:*/		return 0x821E4F28;
		  /* 821E4F28h */ case   75:  		/* mr R3, R29 */
		/* 821E4F28h case   75:*/		regs.R3 = regs.R29;
		/* 821E4F28h case   75:*/		return 0x821E4F2C;
		  /* 821E4F2Ch */ case   76:  		/* bl -445796 */
		/* 821E4F2Ch case   76:*/		regs.LR = 0x821E4F30; return 0x821781C8;
		/* 821E4F2Ch case   76:*/		return 0x821E4F30;
		  /* 821E4F30h */ case   77:  		/* mr R3, R20 */
		/* 821E4F30h case   77:*/		regs.R3 = regs.R20;
		/* 821E4F30h case   77:*/		return 0x821E4F34;
		  /* 821E4F34h */ case   78:  		/* lwz R4, <#[R31 + 4]> */
		/* 821E4F34h case   78:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 821E4F34h case   78:*/		return 0x821E4F38;
		  /* 821E4F38h */ case   79:  		/* bl 260872 */
		/* 821E4F38h case   79:*/		regs.LR = 0x821E4F3C; return 0x82224A40;
		/* 821E4F38h case   79:*/		return 0x821E4F3C;
		  /* 821E4F3Ch */ case   80:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E4F3Ch case   80:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E4F3Ch case   80:*/		return 0x821E4F40;
		  /* 821E4F40h */ case   81:  		/* mr R28, R3 */
		/* 821E4F40h case   81:*/		regs.R28 = regs.R3;
		/* 821E4F40h case   81:*/		return 0x821E4F44;
		  /* 821E4F44h */ case   82:  		/* mr R4, R24 */
		/* 821E4F44h case   82:*/		regs.R4 = regs.R24;
		/* 821E4F44h case   82:*/		return 0x821E4F48;
		  /* 821E4F48h */ case   83:  		/* li R5, 2 */
		/* 821E4F48h case   83:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821E4F48h case   83:*/		return 0x821E4F4C;
		  /* 821E4F4Ch */ case   84:  		/* mr R3, R20 */
		/* 821E4F4Ch case   84:*/		regs.R3 = regs.R20;
		/* 821E4F4Ch case   84:*/		return 0x821E4F50;
		  /* 821E4F50h */ case   85:  		/* addi R30, R11, 24 */
		/* 821E4F50h case   85:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x18);
		/* 821E4F50h case   85:*/		return 0x821E4F54;
		  /* 821E4F54h */ case   86:  		/* bl -446020 */
		/* 821E4F54h case   86:*/		regs.LR = 0x821E4F58; return 0x82178110;
		/* 821E4F54h case   86:*/		return 0x821E4F58;
		  /* 821E4F58h */ case   87:  		/* mr R25, R3 */
		/* 821E4F58h case   87:*/		regs.R25 = regs.R3;
		/* 821E4F58h case   87:*/		return 0x821E4F5C;
		  /* 821E4F5Ch */ case   88:  		/* mr R4, R28 */
		/* 821E4F5Ch case   88:*/		regs.R4 = regs.R28;
		/* 821E4F5Ch case   88:*/		return 0x821E4F60;
		  /* 821E4F60h */ case   89:  		/* mr R3, R20 */
		/* 821E4F60h case   89:*/		regs.R3 = regs.R20;
		/* 821E4F60h case   89:*/		return 0x821E4F64;
		  /* 821E4F64h */ case   90:  		/* bl -446308 */
		/* 821E4F64h case   90:*/		regs.LR = 0x821E4F68; return 0x82178000;
		/* 821E4F64h case   90:*/		return 0x821E4F68;
		  /* 821E4F68h */ case   91:  		/* mr R6, R3 */
		/* 821E4F68h case   91:*/		regs.R6 = regs.R3;
		/* 821E4F68h case   91:*/		return 0x821E4F6C;
		  /* 821E4F6Ch */ case   92:  		/* mr R5, R30 */
		/* 821E4F6Ch case   92:*/		regs.R5 = regs.R30;
		/* 821E4F6Ch case   92:*/		return 0x821E4F70;
		  /* 821E4F70h */ case   93:  		/* lwz R4, <#[R31 + 4]> */
		/* 821E4F70h case   93:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 821E4F70h case   93:*/		return 0x821E4F74;
		  /* 821E4F74h */ case   94:  		/* mr R3, R20 */
		/* 821E4F74h case   94:*/		regs.R3 = regs.R20;
		/* 821E4F74h case   94:*/		return 0x821E4F78;
		  /* 821E4F78h */ case   95:  		/* mr R7, R25 */
		/* 821E4F78h case   95:*/		regs.R7 = regs.R25;
		/* 821E4F78h case   95:*/		return 0x821E4F7C;
		  /* 821E4F7Ch */ case   96:  		/* bl -147292 */
		/* 821E4F7Ch case   96:*/		regs.LR = 0x821E4F80; return 0x821C1020;
		/* 821E4F7Ch case   96:*/		return 0x821E4F80;
		  /* 821E4F80h */ case   97:  		/* mr R25, R3 */
		/* 821E4F80h case   97:*/		regs.R25 = regs.R3;
		/* 821E4F80h case   97:*/		return 0x821E4F84;
		  /* 821E4F84h */ case   98:  		/* mr R4, R29 */
		/* 821E4F84h case   98:*/		regs.R4 = regs.R29;
		/* 821E4F84h case   98:*/		return 0x821E4F88;
		  /* 821E4F88h */ case   99:  		/* mr R3, R20 */
		/* 821E4F88h case   99:*/		regs.R3 = regs.R20;
		/* 821E4F88h case   99:*/		return 0x821E4F8C;
		  /* 821E4F8Ch */ case  100:  		/* bl -446348 */
		/* 821E4F8Ch case  100:*/		regs.LR = 0x821E4F90; return 0x82178000;
		/* 821E4F8Ch case  100:*/		return 0x821E4F90;
		  /* 821E4F90h */ case  101:  		/* mr R4, R3 */
		/* 821E4F90h case  101:*/		regs.R4 = regs.R3;
		/* 821E4F90h case  101:*/		return 0x821E4F94;
		  /* 821E4F94h */ case  102:  		/* mr R3, R28 */
		/* 821E4F94h case  102:*/		regs.R3 = regs.R28;
		/* 821E4F94h case  102:*/		return 0x821E4F98;
		  /* 821E4F98h */ case  103:  		/* bl -445904 */
		/* 821E4F98h case  103:*/		regs.LR = 0x821E4F9C; return 0x821781C8;
		/* 821E4F98h case  103:*/		return 0x821E4F9C;
		  /* 821E4F9Ch */ case  104:  		/* mr R4, R25 */
		/* 821E4F9Ch case  104:*/		regs.R4 = regs.R25;
		/* 821E4F9Ch case  104:*/		return 0x821E4FA0;
		  /* 821E4FA0h */ case  105:  		/* mr R3, R20 */
		/* 821E4FA0h case  105:*/		regs.R3 = regs.R20;
		/* 821E4FA0h case  105:*/		return 0x821E4FA4;
		  /* 821E4FA4h */ case  106:  		/* bl -446372 */
		/* 821E4FA4h case  106:*/		regs.LR = 0x821E4FA8; return 0x82178000;
		/* 821E4FA4h case  106:*/		return 0x821E4FA8;
		  /* 821E4FA8h */ case  107:  		/* mr R4, R3 */
		/* 821E4FA8h case  107:*/		regs.R4 = regs.R3;
		/* 821E4FA8h case  107:*/		return 0x821E4FAC;
		  /* 821E4FACh */ case  108:  		/* mr R3, R28 */
		/* 821E4FACh case  108:*/		regs.R3 = regs.R28;
		/* 821E4FACh case  108:*/		return 0x821E4FB0;
		  /* 821E4FB0h */ case  109:  		/* bl -445928 */
		/* 821E4FB0h case  109:*/		regs.LR = 0x821E4FB4; return 0x821781C8;
		/* 821E4FB0h case  109:*/		return 0x821E4FB4;
		  /* 821E4FB4h */ case  110:  		/* mr R3, R20 */
		/* 821E4FB4h case  110:*/		regs.R3 = regs.R20;
		/* 821E4FB4h case  110:*/		return 0x821E4FB8;
		  /* 821E4FB8h */ case  111:  		/* bl -491648 */
		/* 821E4FB8h case  111:*/		regs.LR = 0x821E4FBC; return 0x8216CF38;
		/* 821E4FB8h case  111:*/		return 0x821E4FBC;
		  /* 821E4FBCh */ case  112:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E4FBCh case  112:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E4FBCh case  112:*/		return 0x821E4FC0;
		  /* 821E4FC0h */ case  113:  		/* rlwinm R30, R3, 0, 0, 30 */
		/* 821E4FC0h case  113:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R30,regs.R3);
		/* 821E4FC0h case  113:*/		return 0x821E4FC4;
		  /* 821E4FC4h */ case  114:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E4FC4h case  114:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E4FC4h case  114:*/		return 0x821E4FC8;
		  /* 821E4FC8h */ case  115:  		/* addi R9, R30, 4 */
		/* 821E4FC8h case  115:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0x4);
		/* 821E4FC8h case  115:*/		return 0x821E4FCC;
		  /* 821E4FCCh */ case  116:  		/* addi R10, R11, 4 */
		/* 821E4FCCh case  116:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E4FCCh case  116:*/		return 0x821E4FD0;
		  /* 821E4FD0h */ case  117:  		/* mr R29, R3 */
		/* 821E4FD0h case  117:*/		regs.R29 = regs.R3;
		/* 821E4FD0h case  117:*/		return 0x821E4FD4;
		  /* 821E4FD4h */ case  118:  		/* mr R4, R25 */
		/* 821E4FD4h case  118:*/		regs.R4 = regs.R25;
		/* 821E4FD4h case  118:*/		return 0x821E4FD8;
		  /* 821E4FD8h */ case  119:  		/* lwz R8, <#[R11 + 4]> */
		/* 821E4FD8h case  119:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821E4FD8h case  119:*/		return 0x821E4FDC;
		  /* 821E4FDCh */ case  120:  		/* mr R3, R20 */
		/* 821E4FDCh case  120:*/		regs.R3 = regs.R20;
		/* 821E4FDCh case  120:*/		return 0x821E4FE0;
		  /* 821E4FE0h */ case  121:  		/* addi R28, R29, 24 */
		/* 821E4FE0h case  121:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x18);
		/* 821E4FE0h case  121:*/		return 0x821E4FE4;
		  /* 821E4FE4h */ case  122:  		/* stw R8, <#[R30 + 4]> */
		/* 821E4FE4h case  122:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 821E4FE4h case  122:*/		return 0x821E4FE8;
		  /* 821E4FE8h */ case  123:  		/* lwz R8, <#[R11 + 4]> */
		/* 821E4FE8h case  123:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821E4FE8h case  123:*/		return 0x821E4FEC;
		  /* 821E4FECh */ case  124:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821E4FECh case  124:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821E4FECh case  124:*/		return 0x821E4FF0;
		  /* 821E4FF0h */ case  125:  		/* stw R9, <#[R8]> */
		/* 821E4FF0h case  125:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 821E4FF0h case  125:*/		return 0x821E4FF4;
		  /* 821E4FF4h */ case  126:  		/* stw R10, <#[R30]> */
		/* 821E4FF4h case  126:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821E4FF4h case  126:*/		return 0x821E4FF8;
		  /* 821E4FF8h */ case  127:  		/* stw R30, <#[R11 + 4]> */
		/* 821E4FF8h case  127:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821E4FF8h case  127:*/		return 0x821E4FFC;
		  /* 821E4FFCh */ case  128:  		/* bl -446460 */
		/* 821E4FFCh case  128:*/		regs.LR = 0x821E5000; return 0x82178000;
		/* 821E4FFCh case  128:*/		return 0x821E5000;
		  /* 821E5000h */ case  129:  		/* mr R25, R3 */
		/* 821E5000h case  129:*/		regs.R25 = regs.R3;
		/* 821E5000h case  129:*/		return 0x821E5004;
		  /* 821E5004h */ case  130:  		/* li R5, 0 */
		/* 821E5004h case  130:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E5004h case  130:*/		return 0x821E5008;
		  /* 821E5008h */ case  131:  		/* mr R4, R24 */
		/* 821E5008h case  131:*/		regs.R4 = regs.R24;
		/* 821E5008h case  131:*/		return 0x821E500C;
		  /* 821E500Ch */ case  132:  		/* mr R3, R20 */
		/* 821E500Ch case  132:*/		regs.R3 = regs.R20;
		/* 821E500Ch case  132:*/		return 0x821E5010;
		  /* 821E5010h */ case  133:  		/* bl -446208 */
		/* 821E5010h case  133:*/		regs.LR = 0x821E5014; return 0x82178110;
		/* 821E5010h case  133:*/		return 0x821E5014;
		  /* 821E5014h */ case  134:  		/* mr R6, R3 */
		/* 821E5014h case  134:*/		regs.R6 = regs.R3;
		/* 821E5014h case  134:*/		return 0x821E5018;
		  /* 821E5018h */ case  135:  		/* mr R5, R28 */
		/* 821E5018h case  135:*/		regs.R5 = regs.R28;
		/* 821E5018h case  135:*/		return 0x821E501C;
		  /* 821E501Ch */ case  136:  		/* mr R4, R29 */
		/* 821E501Ch case  136:*/		regs.R4 = regs.R29;
		/* 821E501Ch case  136:*/		return 0x821E5020;
		  /* 821E5020h */ case  137:  		/* mr R3, R20 */
		/* 821E5020h case  137:*/		regs.R3 = regs.R20;
		/* 821E5020h case  137:*/		return 0x821E5024;
		  /* 821E5024h */ case  138:  		/* mr R7, R25 */
		/* 821E5024h case  138:*/		regs.R7 = regs.R25;
		/* 821E5024h case  138:*/		return 0x821E5028;
		  /* 821E5028h */ case  139:  		/* bl -147016 */
		/* 821E5028h case  139:*/		regs.LR = 0x821E502C; return 0x821C11E0;
		/* 821E5028h case  139:*/		return 0x821E502C;
		  /* 821E502Ch */ case  140:  		/* mr R4, R3 */
		/* 821E502Ch case  140:*/		regs.R4 = regs.R3;
		/* 821E502Ch case  140:*/		return 0x821E5030;
		  /* 821E5030h */ case  141:  		/* mr R3, R20 */
		/* 821E5030h case  141:*/		regs.R3 = regs.R20;
		/* 821E5030h case  141:*/		return 0x821E5034;
		  /* 821E5034h */ case  142:  		/* bl -446516 */
		/* 821E5034h case  142:*/		regs.LR = 0x821E5038; return 0x82178000;
		/* 821E5034h case  142:*/		return 0x821E5038;
		  /* 821E5038h */ case  143:  		/* mr R6, R3 */
		/* 821E5038h case  143:*/		regs.R6 = regs.R3;
		/* 821E5038h case  143:*/		return 0x821E503C;
		  /* 821E503Ch */ case  144:  		/* mr R4, R29 */
		/* 821E503Ch case  144:*/		regs.R4 = regs.R29;
		/* 821E503Ch case  144:*/		return 0x821E5040;
		  /* 821E5040h */ case  145:  		/* mr R5, R28 */
		/* 821E5040h case  145:*/		regs.R5 = regs.R28;
		/* 821E5040h case  145:*/		return 0x821E5044;
		  /* 821E5044h */ case  146:  		/* mr R3, R20 */
		/* 821E5044h case  146:*/		regs.R3 = regs.R20;
		/* 821E5044h case  146:*/		return 0x821E5048;
		  /* 821E5048h */ case  147:  		/* bl -144744 */
		/* 821E5048h case  147:*/		regs.LR = 0x821E504C; return 0x821C1AE0;
		/* 821E5048h case  147:*/		return 0x821E504C;
		  /* 821E504Ch */ case  148:  		/* mr R4, R3 */
		/* 821E504Ch case  148:*/		regs.R4 = regs.R3;
		/* 821E504Ch case  148:*/		return 0x821E5050;
		  /* 821E5050h */ case  149:  		/* li R5, 7 */
		/* 821E5050h case  149:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 821E5050h case  149:*/		return 0x821E5054;
		  /* 821E5054h */ case  150:  		/* mr R3, R20 */
		/* 821E5054h case  150:*/		regs.R3 = regs.R20;
		/* 821E5054h case  150:*/		return 0x821E5058;
		  /* 821E5058h */ case  151:  		/* bl -477448 */
		/* 821E5058h case  151:*/		regs.LR = 0x821E505C; return 0x82170750;
		/* 821E5058h case  151:*/		return 0x821E505C;
		  /* 821E505Ch */ case  152:  		/* mr R6, R3 */
		/* 821E505Ch case  152:*/		regs.R6 = regs.R3;
		/* 821E505Ch case  152:*/		return 0x821E5060;
		  /* 821E5060h */ case  153:  		/* addi R5, R29, 32 */
		/* 821E5060h case  153:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x20);
		/* 821E5060h case  153:*/		return 0x821E5064;
		  /* 821E5064h */ case  154:  		/* mr R4, R29 */
		/* 821E5064h case  154:*/		regs.R4 = regs.R29;
		/* 821E5064h case  154:*/		return 0x821E5068;
		  /* 821E5068h */ case  155:  		/* mr R3, R20 */
		/* 821E5068h case  155:*/		regs.R3 = regs.R20;
		/* 821E5068h case  155:*/		return 0x821E506C;
		  /* 821E506Ch */ case  156:  		/* bl -144204 */
		/* 821E506Ch case  156:*/		regs.LR = 0x821E5070; return 0x821C1D20;
		/* 821E506Ch case  156:*/		return 0x821E5070;
		  /* 821E5070h */ case  157:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E5070h case  157:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E5070h case  157:*/		return 0x821E5074;
		  /* 821E5074h */ case  158:  		/* mr R28, R3 */
		/* 821E5074h case  158:*/		regs.R28 = regs.R3;
		/* 821E5074h case  158:*/		return 0x821E5078;
		  /* 821E5078h */ case  159:  		/* oris R11, R11, 6 */
		/* 821E5078h case  159:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6);
		/* 821E5078h case  159:*/		return 0x821E507C;
		  /* 821E507Ch */ case  160:  		/* mr R5, R20 */
		/* 821E507Ch case  160:*/		regs.R5 = regs.R20;
		/* 821E507Ch case  160:*/		return 0x821E5080;
		  /* 821E5080h */ case  161:  		/* stw R11, <#[R3 + 8]> */
		/* 821E5080h case  161:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E5080h case  161:*/		return 0x821E5084;
		  /* 821E5084h */ case  162:  		/* lwz R4, <#[R31 + 4]> */
		/* 821E5084h case  162:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 821E5084h case  162:*/		return 0x821E5088;
		  /* 821E5088h */ case  163:  		/* bl -477584 */
		/* 821E5088h case  163:*/		regs.LR = 0x821E508C; return 0x821706F8;
		/* 821E5088h case  163:*/		return 0x821E508C;
		  /* 821E508Ch */ case  164:  		/* mr R4, R20 */
		/* 821E508Ch case  164:*/		regs.R4 = regs.R20;
		/* 821E508Ch case  164:*/		return 0x821E5090;
		  /* 821E5090h */ case  165:  		/* mr R3, R28 */
		/* 821E5090h case  165:*/		regs.R3 = regs.R28;
		/* 821E5090h case  165:*/		return 0x821E5094;
		  /* 821E5094h */ case  166:  		/* bl -526676 */
		/* 821E5094h case  166:*/		regs.LR = 0x821E5098; return 0x82164740;
		/* 821E5094h case  166:*/		return 0x821E5098;
		  /* 821E5098h */ case  167:  		/* mr R11, R3 */
		/* 821E5098h case  167:*/		regs.R11 = regs.R3;
		/* 821E5098h case  167:*/		return 0x821E509C;
		  /* 821E509Ch */ case  168:  		/* li R25, 29 */
		/* 821E509Ch case  168:*/		cpu::op::li<0>(regs,&regs.R25,0x1D);
		/* 821E509Ch case  168:*/		return 0x821E50A0;
		  /* 821E50A0h */ case  169:  		/* mr R3, R20 */
		/* 821E50A0h case  169:*/		regs.R3 = regs.R20;
		/* 821E50A0h case  169:*/		return 0x821E50A4;
		  /* 821E50A4h */ case  170:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E50A4h case  170:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E50A4h case  170:*/		return 0x821E50A8;
		  /* 821E50A8h */ case  171:  		/* rlwimi R10, R25, 3, 23, 31 */
		/* 821E50A8h case  171:*/		cpu::op::rlwimi<0,3,23,31>(regs,&regs.R10,regs.R25);
		/* 821E50A8h case  171:*/		return 0x821E50AC;
		  /* 821E50ACh */ case  172:  		/* stw R10, <#[R11 + 8]> */
		/* 821E50ACh case  172:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E50ACh case  172:*/		return 0x821E50B0;
		  /* 821E50B0h */ case  173:  		/* bl -491896 */
		/* 821E50B0h case  173:*/		regs.LR = 0x821E50B4; return 0x8216CF38;
		/* 821E50B0h case  173:*/		return 0x821E50B4;
		  /* 821E50B4h */ case  174:  		/* lwz R8, <#[R30 + 4]> */
		/* 821E50B4h case  174:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 821E50B4h case  174:*/		return 0x821E50B8;
		  /* 821E50B8h */ case  175:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821E50B8h case  175:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821E50B8h case  175:*/		return 0x821E50BC;
		  /* 821E50BCh */ case  176:  		/* addi R10, R30, 4 */
		/* 821E50BCh case  176:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x4);
		/* 821E50BCh case  176:*/		return 0x821E50C0;
		  /* 821E50C0h */ case  177:  		/* addi R9, R11, 4 */
		/* 821E50C0h case  177:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821E50C0h case  177:*/		return 0x821E50C4;
		  /* 821E50C4h */ case  178:  		/* mr R28, R3 */
		/* 821E50C4h case  178:*/		regs.R28 = regs.R3;
		/* 821E50C4h case  178:*/		return 0x821E50C8;
		  /* 821E50C8h */ case  179:  		/* mr R4, R26 */
		/* 821E50C8h case  179:*/		regs.R4 = regs.R26;
		/* 821E50C8h case  179:*/		return 0x821E50CC;
		  /* 821E50CCh */ case  180:  		/* stw R8, <#[R11 + 4]> */
		/* 821E50CCh case  180:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821E50CCh case  180:*/		return 0x821E50D0;
		  /* 821E50D0h */ case  181:  		/* mr R3, R20 */
		/* 821E50D0h case  181:*/		regs.R3 = regs.R20;
		/* 821E50D0h case  181:*/		return 0x821E50D4;
		  /* 821E50D4h */ case  182:  		/* addi R26, R28, 24 */
		/* 821E50D4h case  182:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R28,0x18);
		/* 821E50D4h case  182:*/		return 0x821E50D8;
		  /* 821E50D8h */ case  183:  		/* lwz R8, <#[R30 + 4]> */
		/* 821E50D8h case  183:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 821E50D8h case  183:*/		return 0x821E50DC;
		  /* 821E50DCh */ case  184:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821E50DCh case  184:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821E50DCh case  184:*/		return 0x821E50E0;
		  /* 821E50E0h */ case  185:  		/* stw R9, <#[R8]> */
		/* 821E50E0h case  185:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 821E50E0h case  185:*/		return 0x821E50E4;
		  /* 821E50E4h */ case  186:  		/* stw R10, <#[R11]> */
		/* 821E50E4h case  186:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E50E4h case  186:*/		return 0x821E50E8;
		  /* 821E50E8h */ case  187:  		/* stw R11, <#[R30 + 4]> */
		/* 821E50E8h case  187:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821E50E8h case  187:*/		return 0x821E50EC;
		  /* 821E50ECh */ case  188:  		/* bl -446700 */
		/* 821E50ECh case  188:*/		regs.LR = 0x821E50F0; return 0x82178000;
		/* 821E50ECh case  188:*/		return 0x821E50F0;
		  /* 821E50F0h */ case  189:  		/* mr R30, R3 */
		/* 821E50F0h case  189:*/		regs.R30 = regs.R3;
		/* 821E50F0h case  189:*/		return 0x821E50F4;
		  /* 821E50F4h */ case  190:  		/* li R5, 1 */
		/* 821E50F4h case  190:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821E50F4h case  190:*/		return 0x821E50F8;
		  /* 821E50F8h */ case  191:  		/* mr R4, R24 */
		/* 821E50F8h case  191:*/		regs.R4 = regs.R24;
		/* 821E50F8h case  191:*/		return 0x821E50FC;
		  /* 821E50FCh */ case  192:  		/* mr R3, R20 */
		/* 821E50FCh case  192:*/		regs.R3 = regs.R20;
		/* 821E50FCh case  192:*/		return 0x821E5100;
		  /* 821E5100h */ case  193:  		/* bl -446448 */
		/* 821E5100h case  193:*/		regs.LR = 0x821E5104; return 0x82178110;
		/* 821E5100h case  193:*/		return 0x821E5104;
		  /* 821E5104h */ case  194:  		/* mr R6, R3 */
		/* 821E5104h case  194:*/		regs.R6 = regs.R3;
		/* 821E5104h case  194:*/		return 0x821E5108;
		  /* 821E5108h */ case  195:  		/* mr R5, R26 */
		/* 821E5108h case  195:*/		regs.R5 = regs.R26;
		/* 821E5108h case  195:*/		return 0x821E510C;
		  /* 821E510Ch */ case  196:  		/* mr R4, R28 */
		/* 821E510Ch case  196:*/		regs.R4 = regs.R28;
		/* 821E510Ch case  196:*/		return 0x821E5110;
		  /* 821E5110h */ case  197:  		/* mr R3, R20 */
		/* 821E5110h case  197:*/		regs.R3 = regs.R20;
		/* 821E5110h case  197:*/		return 0x821E5114;
		  /* 821E5114h */ case  198:  		/* mr R7, R30 */
		/* 821E5114h case  198:*/		regs.R7 = regs.R30;
		/* 821E5114h case  198:*/		return 0x821E5118;
		  /* 821E5118h */ case  199:  		/* bl -147256 */
		/* 821E5118h case  199:*/		regs.LR = 0x821E511C; return 0x821C11E0;
		/* 821E5118h case  199:*/		return 0x821E511C;
		  /* 821E511Ch */ case  200:  		/* mr R4, R3 */
		/* 821E511Ch case  200:*/		regs.R4 = regs.R3;
		/* 821E511Ch case  200:*/		return 0x821E5120;
		  /* 821E5120h */ case  201:  		/* mr R3, R20 */
		/* 821E5120h case  201:*/		regs.R3 = regs.R20;
		/* 821E5120h case  201:*/		return 0x821E5124;
		  /* 821E5124h */ case  202:  		/* bl -446756 */
		/* 821E5124h case  202:*/		regs.LR = 0x821E5128; return 0x82178000;
		/* 821E5124h case  202:*/		return 0x821E5128;
		  /* 821E5128h */ case  203:  		/* mr R6, R3 */
		/* 821E5128h case  203:*/		regs.R6 = regs.R3;
		/* 821E5128h case  203:*/		return 0x821E512C;
		  /* 821E512Ch */ case  204:  		/* mr R4, R28 */
		/* 821E512Ch case  204:*/		regs.R4 = regs.R28;
		/* 821E512Ch case  204:*/		return 0x821E5130;
		  /* 821E5130h */ case  205:  		/* mr R5, R26 */
		/* 821E5130h case  205:*/		regs.R5 = regs.R26;
		/* 821E5130h case  205:*/		return 0x821E5134;
		  /* 821E5134h */ case  206:  		/* mr R3, R20 */
		/* 821E5134h case  206:*/		regs.R3 = regs.R20;
		/* 821E5134h case  206:*/		return 0x821E5138;
		  /* 821E5138h */ case  207:  		/* bl -144984 */
		/* 821E5138h case  207:*/		regs.LR = 0x821E513C; return 0x821C1AE0;
		/* 821E5138h case  207:*/		return 0x821E513C;
		  /* 821E513Ch */ case  208:  		/* mr R4, R3 */
		/* 821E513Ch case  208:*/		regs.R4 = regs.R3;
		/* 821E513Ch case  208:*/		return 0x821E5140;
		  /* 821E5140h */ case  209:  		/* li R5, 7 */
		/* 821E5140h case  209:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 821E5140h case  209:*/		return 0x821E5144;
		  /* 821E5144h */ case  210:  		/* mr R3, R20 */
		/* 821E5144h case  210:*/		regs.R3 = regs.R20;
		/* 821E5144h case  210:*/		return 0x821E5148;
		  /* 821E5148h */ case  211:  		/* bl -477688 */
		/* 821E5148h case  211:*/		regs.LR = 0x821E514C; return 0x82170750;
		/* 821E5148h case  211:*/		return 0x821E514C;
		  /* 821E514Ch */ case  212:  		/* mr R6, R3 */
		/* 821E514Ch case  212:*/		regs.R6 = regs.R3;
		/* 821E514Ch case  212:*/		return 0x821E5150;
		  /* 821E5150h */ case  213:  		/* addi R5, R28, 32 */
		/* 821E5150h case  213:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R28,0x20);
		/* 821E5150h case  213:*/		return 0x821E5154;
		  /* 821E5154h */ case  214:  		/* mr R4, R28 */
		/* 821E5154h case  214:*/		regs.R4 = regs.R28;
		/* 821E5154h case  214:*/		return 0x821E5158;
		  /* 821E5158h */ case  215:  		/* mr R3, R20 */
		/* 821E5158h case  215:*/		regs.R3 = regs.R20;
		/* 821E5158h case  215:*/		return 0x821E515C;
		  /* 821E515Ch */ case  216:  		/* bl -144444 */
		/* 821E515Ch case  216:*/		regs.LR = 0x821E5160; return 0x821C1D20;
		/* 821E515Ch case  216:*/		return 0x821E5160;
		  /* 821E5160h */ case  217:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E5160h case  217:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E5160h case  217:*/		return 0x821E5164;
		  /* 821E5164h */ case  218:  		/* mr R5, R20 */
		/* 821E5164h case  218:*/		regs.R5 = regs.R20;
		/* 821E5164h case  218:*/		return 0x821E5168;
		  /* 821E5168h */ case  219:  		/* oris R11, R11, 6 */
		/* 821E5168h case  219:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6);
		/* 821E5168h case  219:*/		return 0x821E516C;
		  /* 821E516Ch */ case  220:  		/* mr R4, R27 */
		/* 821E516Ch case  220:*/		regs.R4 = regs.R27;
		/* 821E516Ch case  220:*/		return 0x821E5170;
		  /* 821E5170h */ case  221:  		/* stw R11, <#[R3 + 8]> */
		/* 821E5170h case  221:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E5170h case  221:*/		return 0x821E5174;
		  /* 821E5174h */ case  222:  		/* mr R30, R3 */
		/* 821E5174h case  222:*/		regs.R30 = regs.R3;
		/* 821E5174h case  222:*/		return 0x821E5178;
		  /* 821E5178h */ case  223:  		/* bl -477824 */
		/* 821E5178h case  223:*/		regs.LR = 0x821E517C; return 0x821706F8;
		/* 821E5178h case  223:*/		return 0x821E517C;
		  /* 821E517Ch */ case  224:  		/* mr R4, R20 */
		/* 821E517Ch case  224:*/		regs.R4 = regs.R20;
		/* 821E517Ch case  224:*/		return 0x821E5180;
		  /* 821E5180h */ case  225:  		/* mr R3, R30 */
		/* 821E5180h case  225:*/		regs.R3 = regs.R30;
		/* 821E5180h case  225:*/		return 0x821E5184;
		  /* 821E5184h */ case  226:  		/* bl -526916 */
		/* 821E5184h case  226:*/		regs.LR = 0x821E5188; return 0x82164740;
		/* 821E5184h case  226:*/		return 0x821E5188;
		  /* 821E5188h */ case  227:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E5188h case  227:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E5188h case  227:*/		return 0x821E518C;
		  /* 821E518Ch */ case  228:  		/* rlwimi R11, R25, 3, 23, 31 */
		/* 821E518Ch case  228:*/		cpu::op::rlwimi<0,3,23,31>(regs,&regs.R11,regs.R25);
		/* 821E518Ch case  228:*/		return 0x821E5190;
		  /* 821E5190h */ case  229:  		/* stw R11, <#[R3 + 8]> */
		/* 821E5190h case  229:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E5190h case  229:*/		return 0x821E5194;
		  /* 821E5194h */ case  230:  		/* lwz R3, <#[R31 + 8]> */
		/* 821E5194h case  230:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 821E5194h case  230:*/		return 0x821E5198;
		  /* 821E5198h */ case  231:  		/* lwz R11, <#[R3 + 12]> */
		/* 821E5198h case  231:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E5198h case  231:*/		return 0x821E519C;
		  /* 821E519Ch */ case  232:  		/* cmplwi CR6, R11, 0 */
		/* 821E519Ch case  232:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E519Ch case  232:*/		return 0x821E51A0;
		  /* 821E51A0h */ case  233:  		/* bc 12, CR6_EQ, 28 */
		/* 821E51A0h case  233:*/		if ( regs.CR[6].eq ) { return 0x821E51BC;  }
		/* 821E51A0h case  233:*/		return 0x821E51A4;
		  /* 821E51A4h */ case  234:  		/* lwz R30, <#[R11]> */
		/* 821E51A4h case  234:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 821E51A4h case  234:*/		return 0x821E51A8;
		  /* 821E51A8h */ case  235:  		/* lwz R10, <#[R31 + 4]> */
		/* 821E51A8h case  235:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821E51A8h case  235:*/		return 0x821E51AC;
		  /* 821E51ACh */ case  236:  		/* cmplw CR6, R30, R10 */
		/* 821E51ACh case  236:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821E51ACh case  236:*/		return 0x821E51B0;
		  /* 821E51B0h */ case  237:  		/* bc 4, CR6_EQ, 16 */
		/* 821E51B0h case  237:*/		if ( !regs.CR[6].eq ) { return 0x821E51C0;  }
		/* 821E51B0h case  237:*/		return 0x821E51B4;
		  /* 821E51B4h */ case  238:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E51B4h case  238:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E51B4h case  238:*/		return 0x821E51B8;
		  /* 821E51B8h */ case  239:  		/* b -28 */
		/* 821E51B8h case  239:*/		return 0x821E519C;
		/* 821E51B8h case  239:*/		return 0x821E51BC;
	}
	return 0x821E51BC;
} // Block from 821E4DFCh-821E51BCh (240 instructions)

//////////////////////////////////////////////////////
// Block at 821E51BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E51BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E51BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E51BC);
		  /* 821E51BCh */ case    0:  		/* mr R30, R16 */
		/* 821E51BCh case    0:*/		regs.R30 = regs.R16;
		/* 821E51BCh case    0:*/		return 0x821E51C0;
	}
	return 0x821E51C0;
} // Block from 821E51BCh-821E51C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E51C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E51C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E51C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E51C0);
		  /* 821E51C0h */ case    0:  		/* mr R5, R20 */
		/* 821E51C0h case    0:*/		regs.R5 = regs.R20;
		/* 821E51C0h case    0:*/		return 0x821E51C4;
		  /* 821E51C4h */ case    1:  		/* lwz R4, <#[R31 + 4]> */
		/* 821E51C4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 821E51C4h case    1:*/		return 0x821E51C8;
		  /* 821E51C8h */ case    2:  		/* bl 305056 */
		/* 821E51C8h case    2:*/		regs.LR = 0x821E51CC; return 0x8222F968;
		/* 821E51C8h case    2:*/		return 0x821E51CC;
		  /* 821E51CCh */ case    3:  		/* mr R5, R20 */
		/* 821E51CCh case    3:*/		regs.R5 = regs.R20;
		/* 821E51CCh case    3:*/		return 0x821E51D0;
		  /* 821E51D0h */ case    4:  		/* mr R4, R29 */
		/* 821E51D0h case    4:*/		regs.R4 = regs.R29;
		/* 821E51D0h case    4:*/		return 0x821E51D4;
		  /* 821E51D4h */ case    5:  		/* lwz R3, <#[R31 + 8]> */
		/* 821E51D4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 821E51D4h case    5:*/		return 0x821E51D8;
		  /* 821E51D8h */ case    6:  		/* bl 305416 */
		/* 821E51D8h case    6:*/		regs.LR = 0x821E51DC; return 0x8222FAE0;
		/* 821E51D8h case    6:*/		return 0x821E51DC;
		  /* 821E51DCh */ case    7:  		/* mr R5, R20 */
		/* 821E51DCh case    7:*/		regs.R5 = regs.R20;
		/* 821E51DCh case    7:*/		return 0x821E51E0;
		  /* 821E51E0h */ case    8:  		/* mr R3, R29 */
		/* 821E51E0h case    8:*/		regs.R3 = regs.R29;
		/* 821E51E0h case    8:*/		return 0x821E51E4;
		  /* 821E51E4h */ case    9:  		/* lwz R4, <#[R31 + 4]> */
		/* 821E51E4h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 821E51E4h case    9:*/		return 0x821E51E8;
		  /* 821E51E8h */ case   10:  		/* bl 305400 */
		/* 821E51E8h case   10:*/		regs.LR = 0x821E51EC; return 0x8222FAE0;
		/* 821E51E8h case   10:*/		return 0x821E51EC;
		  /* 821E51ECh */ case   11:  		/* mr R5, R20 */
		/* 821E51ECh case   11:*/		regs.R5 = regs.R20;
		/* 821E51ECh case   11:*/		return 0x821E51F0;
		  /* 821E51F0h */ case   12:  		/* mr R4, R28 */
		/* 821E51F0h case   12:*/		regs.R4 = regs.R28;
		/* 821E51F0h case   12:*/		return 0x821E51F4;
		  /* 821E51F4h */ case   13:  		/* mr R3, R29 */
		/* 821E51F4h case   13:*/		regs.R3 = regs.R29;
		/* 821E51F4h case   13:*/		return 0x821E51F8;
		  /* 821E51F8h */ case   14:  		/* bl 305384 */
		/* 821E51F8h case   14:*/		regs.LR = 0x821E51FC; return 0x8222FAE0;
		/* 821E51F8h case   14:*/		return 0x821E51FC;
		  /* 821E51FCh */ case   15:  		/* mr R5, R20 */
		/* 821E51FCh case   15:*/		regs.R5 = regs.R20;
		/* 821E51FCh case   15:*/		return 0x821E5200;
		  /* 821E5200h */ case   16:  		/* mr R4, R27 */
		/* 821E5200h case   16:*/		regs.R4 = regs.R27;
		/* 821E5200h case   16:*/		return 0x821E5204;
		  /* 821E5204h */ case   17:  		/* mr R3, R28 */
		/* 821E5204h case   17:*/		regs.R3 = regs.R28;
		/* 821E5204h case   17:*/		return 0x821E5208;
		  /* 821E5208h */ case   18:  		/* bl 305368 */
		/* 821E5208h case   18:*/		regs.LR = 0x821E520C; return 0x8222FAE0;
		/* 821E5208h case   18:*/		return 0x821E520C;
		  /* 821E520Ch */ case   19:  		/* mr R5, R20 */
		/* 821E520Ch case   19:*/		regs.R5 = regs.R20;
		/* 821E520Ch case   19:*/		return 0x821E5210;
		  /* 821E5210h */ case   20:  		/* mr R4, R30 */
		/* 821E5210h case   20:*/		regs.R4 = regs.R30;
		/* 821E5210h case   20:*/		return 0x821E5214;
		  /* 821E5214h */ case   21:  		/* mr R3, R28 */
		/* 821E5214h case   21:*/		regs.R3 = regs.R28;
		/* 821E5214h case   21:*/		return 0x821E5218;
		  /* 821E5218h */ case   22:  		/* bl 305352 */
		/* 821E5218h case   22:*/		regs.LR = 0x821E521C; return 0x8222FAE0;
		/* 821E5218h case   22:*/		return 0x821E521C;
		  /* 821E521Ch */ case   23:  		/* lwz R11, <#[R31 + 56]> */
		/* 821E521Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821E521Ch case   23:*/		return 0x821E5220;
		  /* 821E5220h */ case   24:  		/* lwz R29, <#[R11 + 60]> */
		/* 821E5220h case   24:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x0000003C) );
		/* 821E5220h case   24:*/		return 0x821E5224;
		  /* 821E5224h */ case   25:  		/* b 212 */
		/* 821E5224h case   25:*/		return 0x821E52F8;
		/* 821E5224h case   25:*/		return 0x821E5228;
		  /* 821E5228h */ case   26:  		/* lwz R30, <#[R29 + 16]> */
		/* 821E5228h case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000010) );
		/* 821E5228h case   26:*/		return 0x821E522C;
		  /* 821E522Ch */ case   27:  		/* b 192 */
		/* 821E522Ch case   27:*/		return 0x821E52EC;
		/* 821E522Ch case   27:*/		return 0x821E5230;
		  /* 821E5230h */ case   28:  		/* lwz R11, <#[R30]> */
		/* 821E5230h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821E5230h case   28:*/		return 0x821E5234;
		  /* 821E5234h */ case   29:  		/* cmpwi CR6, R11, 1 */
		/* 821E5234h case   29:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821E5234h case   29:*/		return 0x821E5238;
		  /* 821E5238h */ case   30:  		/* bc 4, CR6_EQ, 176 */
		/* 821E5238h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821E52E8;  }
		/* 821E5238h case   30:*/		return 0x821E523C;
		  /* 821E523Ch */ case   31:  		/* lwz R11, <#[R31 + 36]> */
		/* 821E523Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821E523Ch case   31:*/		return 0x821E5240;
		  /* 821E5240h */ case   32:  		/* lfd FR0, <#[R30 + 16]> */
		/* 821E5240h case   32:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R30 + 0x00000010) );
		/* 821E5240h case   32:*/		return 0x821E5244;
		  /* 821E5244h */ case   33:  		/* rlwinm R11, R11, 22, 17, 31 */
		/* 821E5244h case   33:*/		cpu::op::rlwinm<0,22,17,31>(regs,&regs.R11,regs.R11);
		/* 821E5244h case   33:*/		return 0x821E5248;
		  /* 821E5248h */ case   34:  		/* std R11, <#[R1 + 456]> */
		/* 821E5248h case   34:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000001C8) );
		/* 821E5248h case   34:*/		return 0x821E524C;
		  /* 821E524Ch */ case   35:  		/* lfd FR13, <#[R1 + 456]> */
		/* 821E524Ch case   35:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000001C8) );
		/* 821E524Ch case   35:*/		return 0x821E5250;
		  /* 821E5250h */ case   36:  		/* fcfid FR13, FR13 */
		/* 821E5250h case   36:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 821E5250h case   36:*/		return 0x821E5254;
		  /* 821E5254h */ case   37:  		/* fcmpu CR6, FR13, FR0 */
		/* 821E5254h case   37:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 821E5254h case   37:*/		return 0x821E5258;
		  /* 821E5258h */ case   38:  		/* bc 4, CR6_EQ, 144 */
		/* 821E5258h case   38:*/		if ( !regs.CR[6].eq ) { return 0x821E52E8;  }
		/* 821E5258h case   38:*/		return 0x821E525C;
		  /* 821E525Ch */ case   39:  		/* lbz R11, <#[R29 + 12]> */
		/* 821E525Ch case   39:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821E525Ch case   39:*/		return 0x821E5260;
		  /* 821E5260h */ case   40:  		/* cmplwi CR0, R11, 0 */
		/* 821E5260h case   40:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E5260h case   40:*/		return 0x821E5264;
		  /* 821E5264h */ case   41:  		/* bc 12, CR0_EQ, 12 */
		/* 821E5264h case   41:*/		if ( regs.CR[0].eq ) { return 0x821E5270;  }
		/* 821E5264h case   41:*/		return 0x821E5268;
		  /* 821E5268h */ case   42:  		/* fmr FR1, FR27 */
		/* 821E5268h case   42:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR27);
		/* 821E5268h case   42:*/		return 0x821E526C;
		  /* 821E526Ch */ case   43:  		/* b 8 */
		/* 821E526Ch case   43:*/		return 0x821E5274;
		/* 821E526Ch case   43:*/		return 0x821E5270;
	}
	return 0x821E5270;
} // Block from 821E51C0h-821E5270h (44 instructions)

//////////////////////////////////////////////////////
// Block at 821E5270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5270);
		  /* 821E5270h */ case    0:  		/* fmr FR1, FR29 */
		/* 821E5270h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821E5270h case    0:*/		return 0x821E5274;
	}
	return 0x821E5274;
} // Block from 821E5270h-821E5274h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E5274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5274);
		  /* 821E5274h */ case    0:  		/* li R4, 1 */
		/* 821E5274h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E5274h case    0:*/		return 0x821E5278;
		  /* 821E5278h */ case    1:  		/* fmr FR4, FR29 */
		/* 821E5278h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821E5278h case    1:*/		return 0x821E527C;
		  /* 821E527Ch */ case    2:  		/* mr R3, R20 */
		/* 821E527Ch case    2:*/		regs.R3 = regs.R20;
		/* 821E527Ch case    2:*/		return 0x821E5280;
		  /* 821E5280h */ case    3:  		/* fmr FR3, FR29 */
		/* 821E5280h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821E5280h case    3:*/		return 0x821E5284;
		  /* 821E5284h */ case    4:  		/* fmr FR2, FR29 */
		/* 821E5284h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821E5284h case    4:*/		return 0x821E5288;
		  /* 821E5288h */ case    5:  		/* bl 284880 */
		/* 821E5288h case    5:*/		regs.LR = 0x821E528C; return 0x8222AB58;
		/* 821E5288h case    5:*/		return 0x821E528C;
		  /* 821E528Ch */ case    6:  		/* lwz R11, <#[R30 + 4]> */
		/* 821E528Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821E528Ch case    6:*/		return 0x821E5290;
		  /* 821E5290h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821E5290h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E5290h case    7:*/		return 0x821E5294;
		  /* 821E5294h */ case    8:  		/* addi R10, R10, 4 */
		/* 821E5294h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821E5294h case    8:*/		return 0x821E5298;
		  /* 821E5298h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821E5298h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E5298h case    9:*/		return 0x821E529C;
		  /* 821E529Ch */ case   10:  		/* b 12 */
		/* 821E529Ch case   10:*/		return 0x821E52A8;
		/* 821E529Ch case   10:*/		return 0x821E52A0;
		  /* 821E52A0h */ case   11:  		/* addi R10, R9, 8 */
		/* 821E52A0h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821E52A0h case   11:*/		return 0x821E52A4;
		  /* 821E52A4h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821E52A4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821E52A4h case   12:*/		return 0x821E52A8;
	}
	return 0x821E52A8;
} // Block from 821E5274h-821E52A8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E52A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E52A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E52A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E52A8);
		  /* 821E52A8h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821E52A8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821E52A8h case    0:*/		return 0x821E52AC;
		  /* 821E52ACh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821E52ACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E52A0;  }
		/* 821E52ACh case    1:*/		return 0x821E52B0;
		  /* 821E52B0h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821E52B0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E52B0h case    2:*/		return 0x821E52B4;
		  /* 821E52B4h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821E52B4h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E52B4h case    3:*/		return 0x821E52B8;
		  /* 821E52B8h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821E52B8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821E52B8h case    4:*/		return 0x821E52BC;
		  /* 821E52BCh */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821E52BCh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E52BCh case    5:*/		return 0x821E52C0;
		  /* 821E52C0h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821E52C0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E52C0h case    6:*/		return 0x821E52C4;
		  /* 821E52C4h */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 821E52C4h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E52C4h case    7:*/		return 0x821E52C8;
		  /* 821E52C8h */ case    8:  		/* lwz R11, <#[R30 + 4]> */
		/* 821E52C8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821E52C8h case    8:*/		return 0x821E52CC;
		  /* 821E52CCh */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821E52CCh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E52CCh case    9:*/		return 0x821E52D0;
		  /* 821E52D0h */ case   10:  		/* rlwinm R10, R10, 0, 0, 26 */
		/* 821E52D0h case   10:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R10,regs.R10);
		/* 821E52D0h case   10:*/		return 0x821E52D4;
		  /* 821E52D4h */ case   11:  		/* stw R10, <#[R11]> */
		/* 821E52D4h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E52D4h case   11:*/		return 0x821E52D8;
		  /* 821E52D8h */ case   12:  		/* lwz R11, <#[R30 + 4]> */
		/* 821E52D8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821E52D8h case   12:*/		return 0x821E52DC;
		  /* 821E52DCh */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821E52DCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E52DCh case   13:*/		return 0x821E52E0;
		  /* 821E52E0h */ case   14:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821E52E0h case   14:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821E52E0h case   14:*/		return 0x821E52E4;
		  /* 821E52E4h */ case   15:  		/* stw R10, <#[R11]> */
		/* 821E52E4h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E52E4h case   15:*/		return 0x821E52E8;
	}
	return 0x821E52E8;
} // Block from 821E52A8h-821E52E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E52E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E52E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E52E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E52E8);
		  /* 821E52E8h */ case    0:  		/* lwz R30, <#[R30 + 24]> */
		/* 821E52E8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000018) );
		/* 821E52E8h case    0:*/		return 0x821E52EC;
	}
	return 0x821E52EC;
} // Block from 821E52E8h-821E52ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E52ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E52EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E52EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E52EC);
		  /* 821E52ECh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821E52ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E52ECh case    0:*/		return 0x821E52F0;
		  /* 821E52F0h */ case    1:  		/* bc 4, CR6_EQ, -192 */
		/* 821E52F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E5230;  }
		/* 821E52F0h case    1:*/		return 0x821E52F4;
		  /* 821E52F4h */ case    2:  		/* lwz R29, <#[R29 + 4]> */
		/* 821E52F4h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000004) );
		/* 821E52F4h case    2:*/		return 0x821E52F8;
	}
	return 0x821E52F8;
} // Block from 821E52ECh-821E52F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E52F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E52F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E52F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E52F8);
		  /* 821E52F8h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821E52F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E52F8h case    0:*/		return 0x821E52FC;
		  /* 821E52FCh */ case    1:  		/* bc 4, CR6_EQ, -212 */
		/* 821E52FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E5228;  }
		/* 821E52FCh case    1:*/		return 0x821E5300;
		  /* 821E5300h */ case    2:  		/* mr R3, R20 */
		/* 821E5300h case    2:*/		regs.R3 = regs.R20;
		/* 821E5300h case    2:*/		return 0x821E5304;
		  /* 821E5304h */ case    3:  		/* bl 24604 */
		/* 821E5304h case    3:*/		regs.LR = 0x821E5308; return 0x821EB320;
		/* 821E5304h case    3:*/		return 0x821E5308;
		  /* 821E5308h */ case    4:  		/* li R4, 0 */
		/* 821E5308h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E5308h case    4:*/		return 0x821E530C;
		  /* 821E530Ch */ case    5:  		/* mr R3, R20 */
		/* 821E530Ch case    5:*/		regs.R3 = regs.R20;
		/* 821E530Ch case    5:*/		return 0x821E5310;
		  /* 821E5310h */ case    6:  		/* bl -525856 */
		/* 821E5310h case    6:*/		regs.LR = 0x821E5314; return 0x82164CF0;
		/* 821E5310h case    6:*/		return 0x821E5314;
		  /* 821E5314h */ case    7:  		/* lwz R8, <#[R20 + 4]> */
		/* 821E5314h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R20 + 0x00000004) );
		/* 821E5314h case    7:*/		return 0x821E5318;
		  /* 821E5318h */ case    8:  		/* rlwinm. R11, R8, 0, 31, 31 */
		/* 821E5318h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R8);
		/* 821E5318h case    8:*/		return 0x821E531C;
		  /* 821E531Ch */ case    9:  		/* bc 4, CR0_EQ, 220 */
		/* 821E531Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821E53F8;  }
		/* 821E531Ch case    9:*/		return 0x821E5320;
		  /* 821E5320h */ case   10:  		/* cmplwi CR0, R8, 0 */
		/* 821E5320h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 821E5320h case   10:*/		return 0x821E5324;
		  /* 821E5324h */ case   11:  		/* bc 12, CR0_EQ, 212 */
		/* 821E5324h case   11:*/		if ( regs.CR[0].eq ) { return 0x821E53F8;  }
		/* 821E5324h case   11:*/		return 0x821E5328;
		  /* 821E5328h */ case   12:  		/* lwz R11, <#[R8 + 20]> */
		/* 821E5328h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000014) );
		/* 821E5328h case   12:*/		return 0x821E532C;
		  /* 821E532Ch */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E532Ch case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E532Ch case   13:*/		return 0x821E5330;
		  /* 821E5330h */ case   14:  		/* bc 12, CR0_EQ, 40 */
		/* 821E5330h case   14:*/		if ( regs.CR[0].eq ) { return 0x821E5358;  }
		/* 821E5330h case   14:*/		return 0x821E5334;
		  /* 821E5334h */ case   15:  		/* lwz R11, <#[R8 + 28]> */
		/* 821E5334h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821E5334h case   15:*/		return 0x821E5338;
		  /* 821E5338h */ case   16:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E5338h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E5338h case   16:*/		return 0x821E533C;
		  /* 821E533Ch */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 821E533Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x821E534C;  }
		/* 821E533Ch case   17:*/		return 0x821E5340;
		  /* 821E5340h */ case   18:  		/* lwz R11, <#[R8 + 36]> */
		/* 821E5340h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000024) );
		/* 821E5340h case   18:*/		return 0x821E5344;
		  /* 821E5344h */ case   19:  		/* addi R10, R8, 32 */
		/* 821E5344h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x20);
		/* 821E5344h case   19:*/		return 0x821E5348;
		  /* 821E5348h */ case   20:  		/* b 24 */
		/* 821E5348h case   20:*/		return 0x821E5360;
		/* 821E5348h case   20:*/		return 0x821E534C;
	}
	return 0x821E534C;
} // Block from 821E52F8h-821E534Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821E534Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E534C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E534C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E534C);
		  /* 821E534Ch */ case    0:  		/* lwz R11, <#[R8 + 28]> */
		/* 821E534Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821E534Ch case    0:*/		return 0x821E5350;
		  /* 821E5350h */ case    1:  		/* addi R10, R8, 24 */
		/* 821E5350h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x18);
		/* 821E5350h case    1:*/		return 0x821E5354;
		  /* 821E5354h */ case    2:  		/* b 12 */
		/* 821E5354h case    2:*/		return 0x821E5360;
		/* 821E5354h case    2:*/		return 0x821E5358;
	}
	return 0x821E5358;
} // Block from 821E534Ch-821E5358h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E5358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5358);
		  /* 821E5358h */ case    0:  		/* lwz R11, <#[R8 + 20]> */
		/* 821E5358h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000014) );
		/* 821E5358h case    0:*/		return 0x821E535C;
		  /* 821E535Ch */ case    1:  		/* addi R10, R8, 16 */
		/* 821E535Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x10);
		/* 821E535Ch case    1:*/		return 0x821E5360;
	}
	return 0x821E5360;
} // Block from 821E5358h-821E5360h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E5360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5360);
		  /* 821E5360h */ case    0:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821E5360h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E5360h case    0:*/		return 0x821E5364;
		  /* 821E5364h */ case    1:  		/* addic R9, R9, -1 */
		/* 821E5364h case    1:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821E5364h case    1:*/		return 0x821E5368;
		  /* 821E5368h */ case    2:  		/* subfe R9, R9, R9 */
		/* 821E5368h case    2:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821E5368h case    2:*/		return 0x821E536C;
		  /* 821E536Ch */ case    3:  		/* and R11, R9, R11 */
		/* 821E536Ch case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821E536Ch case    3:*/		return 0x821E5370;
		  /* 821E5370h */ case    4:  		/* b 104 */
		/* 821E5370h case    4:*/		return 0x821E53D8;
		/* 821E5370h case    4:*/		return 0x821E5374;
		  /* 821E5374h */ case    5:  		/* lwz R9, <#[R11 + 8]> */
		/* 821E5374h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E5374h case    5:*/		return 0x821E5378;
		  /* 821E5378h */ case    6:  		/* rlwinm R7, R11, 0, 0, 30 */
		/* 821E5378h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R11);
		/* 821E5378h case    6:*/		return 0x821E537C;
		  /* 821E537Ch */ case    7:  		/* rlwinm R9, R9, 0, 6, 4 */
		/* 821E537Ch case    7:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R9,regs.R9);
		/* 821E537Ch case    7:*/		return 0x821E5380;
		  /* 821E5380h */ case    8:  		/* stw R9, <#[R11 + 8]> */
		/* 821E5380h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E5380h case    8:*/		return 0x821E5384;
		  /* 821E5384h */ case    9:  		/* lwz R11, <#[R7 + 40]> */
		/* 821E5384h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000028) );
		/* 821E5384h case    9:*/		return 0x821E5388;
		  /* 821E5388h */ case   10:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821E5388h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E5388h case   10:*/		return 0x821E538C;
		  /* 821E538Ch */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 821E538Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x821E5398;  }
		/* 821E538Ch case   11:*/		return 0x821E5390;
		  /* 821E5390h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821E5390h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E5390h case   12:*/		return 0x821E5394;
		  /* 821E5394h */ case   13:  		/* bc 4, CR6_EQ, -32 */
		/* 821E5394h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821E5374;  }
		/* 821E5394h case   13:*/		return 0x821E5398;
	}
	return 0x821E5398;
} // Block from 821E5360h-821E5398h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E5398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5398);
		  /* 821E5398h */ case    0:  		/* addi R7, R8, 32 */
		/* 821E5398h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R8,0x20);
		/* 821E5398h case    0:*/		return 0x821E539C;
		  /* 821E539Ch */ case    1:  		/* cmplw CR6, R10, R7 */
		/* 821E539Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821E539Ch case    1:*/		return 0x821E53A0;
		  /* 821E53A0h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821E53A0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E53E0;  }
		/* 821E53A0h case    2:*/		return 0x821E53A4;
		  /* 821E53A4h */ case    3:  		/* addi R9, R8, 24 */
		/* 821E53A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x18);
		/* 821E53A4h case    3:*/		return 0x821E53A8;
		  /* 821E53A8h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 821E53A8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821E53A8h case    4:*/		return 0x821E53AC;
		  /* 821E53ACh */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821E53ACh case    5:*/		if ( regs.CR[6].eq ) { return 0x821E53C8;  }
		/* 821E53ACh case    5:*/		return 0x821E53B0;
		  /* 821E53B0h */ case    6:  		/* lwz R11, <#[R8 + 28]> */
		/* 821E53B0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821E53B0h case    6:*/		return 0x821E53B4;
		  /* 821E53B4h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E53B4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E53B4h case    7:*/		return 0x821E53B8;
		  /* 821E53B8h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821E53B8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E53C8;  }
		/* 821E53B8h case    8:*/		return 0x821E53BC;
		  /* 821E53BCh */ case    9:  		/* lwz R11, <#[R9 + 4]> */
		/* 821E53BCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821E53BCh case    9:*/		return 0x821E53C0;
		  /* 821E53C0h */ case   10:  		/* mr R10, R9 */
		/* 821E53C0h case   10:*/		regs.R10 = regs.R9;
		/* 821E53C0h case   10:*/		return 0x821E53C4;
		  /* 821E53C4h */ case   11:  		/* b 12 */
		/* 821E53C4h case   11:*/		return 0x821E53D0;
		/* 821E53C4h case   11:*/		return 0x821E53C8;
	}
	return 0x821E53C8;
} // Block from 821E5398h-821E53C8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E53C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E53C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E53C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E53C8);
		  /* 821E53C8h */ case    0:  		/* lwz R11, <#[R7 + 4]> */
		/* 821E53C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 821E53C8h case    0:*/		return 0x821E53CC;
		  /* 821E53CCh */ case    1:  		/* mr R10, R7 */
		/* 821E53CCh case    1:*/		regs.R10 = regs.R7;
		/* 821E53CCh case    1:*/		return 0x821E53D0;
	}
	return 0x821E53D0;
} // Block from 821E53C8h-821E53D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E53D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E53D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E53D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E53D0);
		  /* 821E53D0h */ case    0:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821E53D0h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E53D0h case    0:*/		return 0x821E53D4;
		  /* 821E53D4h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821E53D4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E53E0;  }
		/* 821E53D4h case    1:*/		return 0x821E53D8;
	}
	return 0x821E53D8;
} // Block from 821E53D0h-821E53D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E53D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E53D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E53D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E53D8);
		  /* 821E53D8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E53D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E53D8h case    0:*/		return 0x821E53DC;
		  /* 821E53DCh */ case    1:  		/* bc 4, CR6_EQ, -104 */
		/* 821E53DCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E5374;  }
		/* 821E53DCh case    1:*/		return 0x821E53E0;
	}
	return 0x821E53E0;
} // Block from 821E53D8h-821E53E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E53E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E53E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E53E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E53E0);
		  /* 821E53E0h */ case    0:  		/* rlwinm R11, R8, 0, 0, 30 */
		/* 821E53E0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R8);
		/* 821E53E0h case    0:*/		return 0x821E53E4;
		  /* 821E53E4h */ case    1:  		/* lwz R8, <#[R11 + 4]> */
		/* 821E53E4h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821E53E4h case    1:*/		return 0x821E53E8;
		  /* 821E53E8h */ case    2:  		/* rlwinm. R11, R8, 0, 31, 31 */
		/* 821E53E8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R8);
		/* 821E53E8h case    2:*/		return 0x821E53EC;
		  /* 821E53ECh */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E53ECh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E53F8;  }
		/* 821E53ECh case    3:*/		return 0x821E53F0;
		  /* 821E53F0h */ case    4:  		/* cmplwi CR6, R8, 0 */
		/* 821E53F0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821E53F0h case    4:*/		return 0x821E53F4;
		  /* 821E53F4h */ case    5:  		/* bc 4, CR6_EQ, -204 */
		/* 821E53F4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E5328;  }
		/* 821E53F4h case    5:*/		return 0x821E53F8;
	}
	return 0x821E53F8;
} // Block from 821E53E0h-821E53F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E53F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E53F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E53F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E53F8);
		  /* 821E53F8h */ case    0:  		/* mr R3, R20 */
		/* 821E53F8h case    0:*/		regs.R3 = regs.R20;
		/* 821E53F8h case    0:*/		return 0x821E53FC;
		  /* 821E53FCh */ case    1:  		/* bl -111300 */
		/* 821E53FCh case    1:*/		regs.LR = 0x821E5400; return 0x821CA138;
		/* 821E53FCh case    1:*/		return 0x821E5400;
		  /* 821E5400h */ case    2:  		/* li R4, 1 */
		/* 821E5400h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E5400h case    2:*/		return 0x821E5404;
		  /* 821E5404h */ case    3:  		/* mr R3, R20 */
		/* 821E5404h case    3:*/		regs.R3 = regs.R20;
		/* 821E5404h case    3:*/		return 0x821E5408;
		  /* 821E5408h */ case    4:  		/* bl -48016 */
		/* 821E5408h case    4:*/		regs.LR = 0x821E540C; return 0x821D9878;
		/* 821E5408h case    4:*/		return 0x821E540C;
		  /* 821E540Ch */ case    5:  		/* mr R3, R20 */
		/* 821E540Ch case    5:*/		regs.R3 = regs.R20;
		/* 821E540Ch case    5:*/		return 0x821E5410;
		  /* 821E5410h */ case    6:  		/* bl -38360 */
		/* 821E5410h case    6:*/		regs.LR = 0x821E5414; return 0x821DBE38;
		/* 821E5410h case    6:*/		return 0x821E5414;
		  /* 821E5414h */ case    7:  		/* b -21616 */
		/* 821E5414h case    7:*/		return 0x821DFFA4;
		/* 821E5414h case    7:*/		return 0x821E5418;
	}
	return 0x821E5418;
} // Block from 821E53F8h-821E5418h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E5418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5418);
		  /* 821E5418h */ case    0:  		/* li R11, 0 */
		/* 821E5418h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E5418h case    0:*/		return 0x821E541C;
		  /* 821E541Ch */ case    1:  		/* b -1828 */
		/* 821E541Ch case    1:*/		return 0x821E4CF8;
		/* 821E541Ch case    1:*/		return 0x821E5420;
		  /* 821E5420h */ case    2:  		/* lwz R30, <#[R30 + 8]> */
		/* 821E5420h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821E5420h case    2:*/		return 0x821E5424;
	}
	return 0x821E5424;
} // Block from 821E5418h-821E5424h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E5424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5424);
		  /* 821E5424h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821E5424h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E5424h case    0:*/		return 0x821E5428;
		  /* 821E5428h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E5428h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E5428h case    1:*/		return 0x821E542C;
		  /* 821E542Ch */ case    2:  		/* bc 4, CR6_EQ, -12 */
		/* 821E542Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E5420;  }
		/* 821E542Ch case    2:*/		return 0x821E5430;
		  /* 821E5430h */ case    3:  		/* lwz R4, <#[R30 + 4]> */
		/* 821E5430h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 821E5430h case    3:*/		return 0x821E5434;
		  /* 821E5434h */ case    4:  		/* addi R8, R4, 4 */
		/* 821E5434h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R4,0x4);
		/* 821E5434h case    4:*/		return 0x821E5438;
		  /* 821E5438h */ case    5:  		/* lwz R11, <#[R8]> */
		/* 821E5438h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821E5438h case    5:*/		return 0x821E543C;
		  /* 821E543Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821E543Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E543Ch case    6:*/		return 0x821E5440;
		  /* 821E5440h */ case    7:  		/* bc 12, CR6_EQ, 92 */
		/* 821E5440h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E549C;  }
		/* 821E5440h case    7:*/		return 0x821E5444;
		  /* 821E5444h */ case    8:  		/* lwz R10, <#[R11 + 16]> */
		/* 821E5444h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821E5444h case    8:*/		return 0x821E5448;
		  /* 821E5448h */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 821E5448h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E5448h case    9:*/		return 0x821E544C;
		  /* 821E544Ch */ case   10:  		/* bc 12, CR6_EQ, 60 */
		/* 821E544Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821E5488;  }
		/* 821E544Ch case   10:*/		return 0x821E5450;
		  /* 821E5450h */ case   11:  		/* lwz R10, <#[R11 + 12]> */
		/* 821E5450h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E5450h case   11:*/		return 0x821E5454;
		  /* 821E5454h */ case   12:  		/* addi R10, R10, 4 */
		/* 821E5454h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821E5454h case   12:*/		return 0x821E5458;
		  /* 821E5458h */ case   13:  		/* lwz R9, <#[R10]> */
		/* 821E5458h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E5458h case   13:*/		return 0x821E545C;
		  /* 821E545Ch */ case   14:  		/* b 12 */
		/* 821E545Ch case   14:*/		return 0x821E5468;
		/* 821E545Ch case   14:*/		return 0x821E5460;
		  /* 821E5460h */ case   15:  		/* addi R10, R9, 8 */
		/* 821E5460h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821E5460h case   15:*/		return 0x821E5464;
		  /* 821E5464h */ case   16:  		/* lwz R9, <#[R9 + 8]> */
		/* 821E5464h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821E5464h case   16:*/		return 0x821E5468;
	}
	return 0x821E5468;
} // Block from 821E5424h-821E5468h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E5468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5468);
		  /* 821E5468h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821E5468h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821E5468h case    0:*/		return 0x821E546C;
		  /* 821E546Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821E546Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E5460;  }
		/* 821E546Ch case    1:*/		return 0x821E5470;
		  /* 821E5470h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821E5470h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E5470h case    2:*/		return 0x821E5474;
		  /* 821E5474h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821E5474h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E5474h case    3:*/		return 0x821E5478;
		  /* 821E5478h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821E5478h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821E5478h case    4:*/		return 0x821E547C;
		  /* 821E547Ch */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821E547Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E547Ch case    5:*/		return 0x821E5480;
		  /* 821E5480h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821E5480h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E5480h case    6:*/		return 0x821E5484;
		  /* 821E5484h */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 821E5484h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E5484h case    7:*/		return 0x821E5488;
	}
	return 0x821E5488;
} // Block from 821E5468h-821E5488h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E5488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5488);
		  /* 821E5488h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821E5488h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821E5488h case    0:*/		return 0x821E548C;
		  /* 821E548Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821E548Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821E548Ch case    1:*/		return 0x821E5490;
		  /* 821E5490h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821E5490h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E5438;  }
		/* 821E5490h case    2:*/		return 0x821E5494;
		  /* 821E5494h */ case    3:  		/* addi R8, R11, 8 */
		/* 821E5494h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821E5494h case    3:*/		return 0x821E5498;
		  /* 821E5498h */ case    4:  		/* b -96 */
		/* 821E5498h case    4:*/		return 0x821E5438;
		/* 821E5498h case    4:*/		return 0x821E549C;
	}
	return 0x821E549C;
} // Block from 821E5488h-821E549Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E549Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E549C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E549C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E549C);
		  /* 821E549Ch */ case    0:  		/* mr R3, R19 */
		/* 821E549Ch case    0:*/		regs.R3 = regs.R19;
		/* 821E549Ch case    0:*/		return 0x821E54A0;
		  /* 821E54A0h */ case    1:  		/* bl 287152 */
		/* 821E54A0h case    1:*/		regs.LR = 0x821E54A4; return 0x8222B650;
		/* 821E54A0h case    1:*/		return 0x821E54A4;
	}
	return 0x821E54A4;
} // Block from 821E549Ch-821E54A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E54A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E54A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E54A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E54A4);
		  /* 821E54A4h */ case    0:  		/* lwz R29, <#[R29 + 20]> */
		/* 821E54A4h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000014) );
		/* 821E54A4h case    0:*/		return 0x821E54A8;
		  /* 821E54A8h */ case    1:  		/* b -2056 */
		/* 821E54A8h case    1:*/		return 0x821E4CA0;
		/* 821E54A8h case    1:*/		return 0x821E54AC;
	}
	return 0x821E54AC;
} // Block from 821E54A4h-821E54ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E54ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E54AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E54AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E54AC);
		  /* 821E54ACh */ case    0:  		/* lwz R11, <#[R20]> */
		/* 821E54ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821E54ACh case    0:*/		return 0x821E54B0;
		  /* 821E54B0h */ case    1:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 821E54B0h case    1:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 821E54B0h case    1:*/		return 0x821E54B4;
		  /* 821E54B4h */ case    2:  		/* bc 12, CR0_EQ, 932 */
		/* 821E54B4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E5858;  }
		/* 821E54B4h case    2:*/		return 0x821E54B8;
		  /* 821E54B8h */ case    3:  		/* lwz R11, <#[R19 + 4]> */
		/* 821E54B8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 821E54B8h case    3:*/		return 0x821E54BC;
		  /* 821E54BCh */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E54BCh case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E54BCh case    4:*/		return 0x821E54C0;
		  /* 821E54C0h */ case    5:  		/* bc 4, CR0_EQ, 920 */
		/* 821E54C0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821E5858;  }
		/* 821E54C0h case    5:*/		return 0x821E54C4;
		  /* 821E54C4h */ case    6:  		/* mr R23, R11 */
		/* 821E54C4h case    6:*/		regs.R23 = regs.R11;
		/* 821E54C4h case    6:*/		return 0x821E54C8;
		  /* 821E54C8h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 821E54C8h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E54C8h case    7:*/		return 0x821E54CC;
		  /* 821E54CCh */ case    8:  		/* bc 12, CR0_EQ, 908 */
		/* 821E54CCh case    8:*/		if ( regs.CR[0].eq ) { return 0x821E5858;  }
		/* 821E54CCh case    8:*/		return 0x821E54D0;
		  /* 821E54D0h */ case    9:  		/* li R18, 68 */
		/* 821E54D0h case    9:*/		cpu::op::li<0>(regs,&regs.R18,0x44);
		/* 821E54D0h case    9:*/		return 0x821E54D4;
		  /* 821E54D4h */ case   10:  		/* lwz R11, <#[R19 + 616]> */
		/* 821E54D4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000268) );
		/* 821E54D4h case   10:*/		return 0x821E54D8;
		  /* 821E54D8h */ case   11:  		/* subf R11, R11, R21 */
		/* 821E54D8h case   11:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 821E54D8h case   11:*/		return 0x821E54DC;
		  /* 821E54DCh */ case   12:  		/* divw R10, R11, R18 */
		/* 821E54DCh case   12:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R18);
		/* 821E54DCh case   12:*/		return 0x821E54E0;
		  /* 821E54E0h */ case   13:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E54E0h case   13:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E54E0h case   13:*/		return 0x821E54E4;
		  /* 821E54E4h */ case   14:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821E54E4h case   14:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821E54E4h case   14:*/		return 0x821E54E8;
		  /* 821E54E8h */ case   15:  		/* addi R11, R11, 21 */
		/* 821E54E8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E54E8h case   15:*/		return 0x821E54EC;
		  /* 821E54ECh */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E54ECh case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E54ECh case   16:*/		return 0x821E54F0;
		  /* 821E54F0h */ case   17:  		/* lwzx R11, <#[R11 + R23]> */
		/* 821E54F0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 821E54F0h case   17:*/		return 0x821E54F4;
		  /* 821E54F4h */ case   18:  		/* srw R11, R11, R10 */
		/* 821E54F4h case   18:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E54F4h case   18:*/		return 0x821E54F8;
		  /* 821E54F8h */ case   19:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E54F8h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E54F8h case   19:*/		return 0x821E54FC;
		  /* 821E54FCh */ case   20:  		/* bc 12, CR0_EQ, 828 */
		/* 821E54FCh case   20:*/		if ( regs.CR[0].eq ) { return 0x821E5838;  }
		/* 821E54FCh case   20:*/		return 0x821E5500;
		  /* 821E5500h */ case   21:  		/* lwz R11, <#[R23 + 28]> */
		/* 821E5500h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 821E5500h case   21:*/		return 0x821E5504;
		  /* 821E5504h */ case   22:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E5504h case   22:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E5504h case   22:*/		return 0x821E5508;
		  /* 821E5508h */ case   23:  		/* bc 4, CR0_EQ, 816 */
		/* 821E5508h case   23:*/		if ( !regs.CR[0].eq ) { return 0x821E5838;  }
		/* 821E5508h case   23:*/		return 0x821E550C;
		  /* 821E550Ch */ case   24:  		/* mr R24, R11 */
		/* 821E550Ch case   24:*/		regs.R24 = regs.R11;
		/* 821E550Ch case   24:*/		return 0x821E5510;
		  /* 821E5510h */ case   25:  		/* cmplwi CR0, R11, 0 */
		/* 821E5510h case   25:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E5510h case   25:*/		return 0x821E5514;
		  /* 821E5514h */ case   26:  		/* bc 12, CR0_EQ, 804 */
		/* 821E5514h case   26:*/		if ( regs.CR[0].eq ) { return 0x821E5838;  }
		/* 821E5514h case   26:*/		return 0x821E5518;
		  /* 821E5518h */ case   27:  		/* lwz R11, <#[R24 + 8]> */
		/* 821E5518h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821E5518h case   27:*/		return 0x821E551C;
		  /* 821E551Ch */ case   28:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E551Ch case   28:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E551Ch case   28:*/		return 0x821E5520;
		  /* 821E5520h */ case   29:  		/* cmplwi CR6, R11, 7040 */
		/* 821E5520h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001B80);
		/* 821E5520h case   29:*/		return 0x821E5524;
		  /* 821E5524h */ case   30:  		/* bc 4, CR6_EQ, 760 */
		/* 821E5524h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821E581C;  }
		/* 821E5524h case   30:*/		return 0x821E5528;
		  /* 821E5528h */ case   31:  		/* lwz R10, <#[R21 + 4]> */
		/* 821E5528h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000004) );
		/* 821E5528h case   31:*/		return 0x821E552C;
		  /* 821E552Ch */ case   32:  		/* li R11, 84 */
		/* 821E552Ch case   32:*/		cpu::op::li<0>(regs,&regs.R11,0x54);
		/* 821E552Ch case   32:*/		return 0x821E5530;
		  /* 821E5530h */ case   33:  		/* lwzx R9, <#[R11 + R23]> */
		/* 821E5530h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 821E5530h case   33:*/		return 0x821E5534;
		  /* 821E5534h */ case   34:  		/* lwzx R8, <#[R10 + R11]> */
		/* 821E5534h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E5534h case   34:*/		return 0x821E5538;
		  /* 821E5538h */ case   35:  		/* cmplw CR6, R9, R8 */
		/* 821E5538h case   35:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821E5538h case   35:*/		return 0x821E553C;
		  /* 821E553Ch */ case   36:  		/* bc 4, CR6_EQ, 220 */
		/* 821E553Ch case   36:*/		if ( !regs.CR[6].eq ) { return 0x821E5618;  }
		/* 821E553Ch case   36:*/		return 0x821E5540;
		  /* 821E5540h */ case   37:  		/* addi R11, R11, 4 */
		/* 821E5540h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E5540h case   37:*/		return 0x821E5544;
		  /* 821E5544h */ case   38:  		/* cmpwi CR6, R11, 88 */
		/* 821E5544h case   38:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000058);
		/* 821E5544h case   38:*/		return 0x821E5548;
		  /* 821E5548h */ case   39:  		/* bc 12, CR6_LT, -24 */
		/* 821E5548h case   39:*/		if ( regs.CR[6].lt ) { return 0x821E5530;  }
		/* 821E5548h case   39:*/		return 0x821E554C;
		  /* 821E554Ch */ case   40:  		/* mr R11, R17 */
		/* 821E554Ch case   40:*/		regs.R11 = regs.R17;
		/* 821E554Ch case   40:*/		return 0x821E5550;
		  /* 821E5550h */ case   41:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E5550h case   41:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E5550h case   41:*/		return 0x821E5554;
		  /* 821E5554h */ case   42:  		/* bc 12, CR0_EQ, 600 */
		/* 821E5554h case   42:*/		if ( regs.CR[0].eq ) { return 0x821E57AC;  }
		/* 821E5554h case   42:*/		return 0x821E5558;
		  /* 821E5558h */ case   43:  		/* lwz R3, <#[R24 + 44]> */
		/* 821E5558h case   43:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R24 + 0x0000002C) );
		/* 821E5558h case   43:*/		return 0x821E555C;
		  /* 821E555Ch */ case   44:  		/* lwz R11, <#[R3]> */
		/* 821E555Ch case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821E555Ch case   44:*/		return 0x821E5560;
		  /* 821E5560h */ case   45:  		/* rlwinm R10, R11, 30, 2, 31 */
		/* 821E5560h case   45:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R10,regs.R11);
		/* 821E5560h case   45:*/		return 0x821E5564;
		  /* 821E5564h */ case   46:  		/* xor R11, R10, R11 */
		/* 821E5564h case   46:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E5564h case   46:*/		return 0x821E5568;
		  /* 821E5568h */ case   47:  		/* rlwinm. R11, R11, 0, 25, 26 */
		/* 821E5568h case   47:*/		cpu::op::rlwinm<1,0,25,26>(regs,&regs.R11,regs.R11);
		/* 821E5568h case   47:*/		return 0x821E556C;
		  /* 821E556Ch */ case   48:  		/* bc 4, CR0_EQ, 576 */
		/* 821E556Ch case   48:*/		if ( !regs.CR[0].eq ) { return 0x821E57AC;  }
		/* 821E556Ch case   48:*/		return 0x821E5570;
		  /* 821E5570h */ case   49:  		/* li R10, 0 */
		/* 821E5570h case   49:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821E5570h case   49:*/		return 0x821E5574;
		  /* 821E5574h */ case   50:  		/* li R9, 0 */
		/* 821E5574h case   50:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821E5574h case   50:*/		return 0x821E5578;
		  /* 821E5578h */ case   51:  		/* li R8, 0 */
		/* 821E5578h case   51:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E5578h case   51:*/		return 0x821E557C;
		  /* 821E557Ch */ case   52:  		/* addi R7, R1, 188 */
		/* 821E557Ch case   52:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xBC);
		/* 821E557Ch case   52:*/		return 0x821E5580;
		  /* 821E5580h */ case   53:  		/* addi R6, R1, 212 */
		/* 821E5580h case   53:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD4);
		/* 821E5580h case   53:*/		return 0x821E5584;
		  /* 821E5584h */ case   54:  		/* addi R5, R1, 152 */
		/* 821E5584h case   54:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x98);
		/* 821E5584h case   54:*/		return 0x821E5588;
		  /* 821E5588h */ case   55:  		/* li R4, 0 */
		/* 821E5588h case   55:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E5588h case   55:*/		return 0x821E558C;
		  /* 821E558Ch */ case   56:  		/* bl 253764 */
		/* 821E558Ch case   56:*/		regs.LR = 0x821E5590; return 0x822234D0;
		/* 821E558Ch case   56:*/		return 0x821E5590;
		  /* 821E5590h */ case   57:  		/* lwz R11, <#[R1 + 188]> */
		/* 821E5590h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000BC) );
		/* 821E5590h case   57:*/		return 0x821E5594;
		  /* 821E5594h */ case   58:  		/* cmplwi CR6, R11, 0 */
		/* 821E5594h case   58:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E5594h case   58:*/		return 0x821E5598;
		  /* 821E5598h */ case   59:  		/* bc 4, CR6_EQ, 532 */
		/* 821E5598h case   59:*/		if ( !regs.CR[6].eq ) { return 0x821E57AC;  }
		/* 821E5598h case   59:*/		return 0x821E559C;
		  /* 821E559Ch */ case   60:  		/* lwz R4, <#[R1 + 152]> */
		/* 821E559Ch case   60:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000098) );
		/* 821E559Ch case   60:*/		return 0x821E55A0;
		  /* 821E55A0h */ case   61:  		/* lwz R11, <#[R4 + 8]> */
		/* 821E55A0h case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821E55A0h case   61:*/		return 0x821E55A4;
		  /* 821E55A4h */ case   62:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E55A4h case   62:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E55A4h case   62:*/		return 0x821E55A8;
		  /* 821E55A8h */ case   63:  		/* cmplwi CR6, R11, 14336 */
		/* 821E55A8h case   63:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E55A8h case   63:*/		return 0x821E55AC;
		  /* 821E55ACh */ case   64:  		/* bc 4, CR6_EQ, 512 */
		/* 821E55ACh case   64:*/		if ( !regs.CR[6].eq ) { return 0x821E57AC;  }
		/* 821E55ACh case   64:*/		return 0x821E55B0;
		  /* 821E55B0h */ case   65:  		/* lwz R11, <#[R20 + 48]> */
		/* 821E55B0h case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000030) );
		/* 821E55B0h case   65:*/		return 0x821E55B4;
		  /* 821E55B4h */ case   66:  		/* cmplw CR6, R4, R11 */
		/* 821E55B4h case   66:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821E55B4h case   66:*/		return 0x821E55B8;
		  /* 821E55B8h */ case   67:  		/* bc 12, CR6_EQ, 108 */
		/* 821E55B8h case   67:*/		if ( regs.CR[6].eq ) { return 0x821E5624;  }
		/* 821E55B8h case   67:*/		return 0x821E55BC;
		  /* 821E55BCh */ case   68:  		/* lbz R11, <#[R1 + 128]> */
		/* 821E55BCh case   68:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821E55BCh case   68:*/		return 0x821E55C0;
		  /* 821E55C0h */ case   69:  		/* cmplwi CR0, R11, 0 */
		/* 821E55C0h case   69:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E55C0h case   69:*/		return 0x821E55C4;
		  /* 821E55C4h */ case   70:  		/* bc 12, CR0_EQ, 24 */
		/* 821E55C4h case   70:*/		if ( regs.CR[0].eq ) { return 0x821E55DC;  }
		/* 821E55C4h case   70:*/		return 0x821E55C8;
		  /* 821E55C8h */ case   71:  		/* mr R3, R19 */
		/* 821E55C8h case   71:*/		regs.R3 = regs.R19;
		/* 821E55C8h case   71:*/		return 0x821E55CC;
		  /* 821E55CCh */ case   72:  		/* bl 23892 */
		/* 821E55CCh case   72:*/		regs.LR = 0x821E55D0; return 0x821EB320;
		/* 821E55CCh case   72:*/		return 0x821E55D0;
		  /* 821E55D0h */ case   73:  		/* li R11, 0 */
		/* 821E55D0h case   73:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E55D0h case   73:*/		return 0x821E55D4;
		  /* 821E55D4h */ case   74:  		/* lwz R4, <#[R1 + 152]> */
		/* 821E55D4h case   74:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000098) );
		/* 821E55D4h case   74:*/		return 0x821E55D8;
		  /* 821E55D8h */ case   75:  		/* stb R11, <#[R1 + 128]> */
		/* 821E55D8h case   75:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821E55D8h case   75:*/		return 0x821E55DC;
	}
	return 0x821E55DC;
} // Block from 821E54ACh-821E55DCh (76 instructions)

//////////////////////////////////////////////////////
// Block at 821E55DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E55DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E55DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E55DC);
		  /* 821E55DCh */ case    0:  		/* li R8, 0 */
		/* 821E55DCh case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E55DCh case    0:*/		return 0x821E55E0;
		  /* 821E55E0h */ case    1:  		/* lwz R9, <#[R20 + 48]> */
		/* 821E55E0h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000030) );
		/* 821E55E0h case    1:*/		return 0x821E55E4;
		  /* 821E55E4h */ case    2:  		/* addi R7, R1, 188 */
		/* 821E55E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xBC);
		/* 821E55E4h case    2:*/		return 0x821E55E8;
		  /* 821E55E8h */ case    3:  		/* addi R6, R1, 212 */
		/* 821E55E8h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD4);
		/* 821E55E8h case    3:*/		return 0x821E55EC;
		  /* 821E55ECh */ case    4:  		/* addi R5, R1, 152 */
		/* 821E55ECh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x98);
		/* 821E55ECh case    4:*/		return 0x821E55F0;
		  /* 821E55F0h */ case    5:  		/* mr R3, R19 */
		/* 821E55F0h case    5:*/		regs.R3 = regs.R19;
		/* 821E55F0h case    5:*/		return 0x821E55F4;
		  /* 821E55F4h */ case    6:  		/* bl 295420 */
		/* 821E55F4h case    6:*/		regs.LR = 0x821E55F8; return 0x8222D7F0;
		/* 821E55F4h case    6:*/		return 0x821E55F8;
		  /* 821E55F8h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E55F8h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E55F8h case    7:*/		return 0x821E55FC;
		  /* 821E55FCh */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821E55FCh case    8:*/		if ( regs.CR[0].eq ) { return 0x821E560C;  }
		/* 821E55FCh case    8:*/		return 0x821E5600;
		  /* 821E5600h */ case    9:  		/* lwz R11, <#[R1 + 188]> */
		/* 821E5600h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000BC) );
		/* 821E5600h case    9:*/		return 0x821E5604;
		  /* 821E5604h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821E5604h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E5604h case   10:*/		return 0x821E5608;
		  /* 821E5608h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 821E5608h case   11:*/		if ( regs.CR[6].eq ) { return 0x821E5620;  }
		/* 821E5608h case   11:*/		return 0x821E560C;
	}
	return 0x821E560C;
} // Block from 821E55DCh-821E560Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E560Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E560C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E560C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E560C);
		  /* 821E560Ch */ case    0:  		/* li R4, 0 */
		/* 821E560Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E560Ch case    0:*/		return 0x821E5610;
		  /* 821E5610h */ case    1:  		/* stw R4, <#[R1 + 152]> */
		/* 821E5610h case    1:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000098) );
		/* 821E5610h case    1:*/		return 0x821E5614;
		  /* 821E5614h */ case    2:  		/* b 16 */
		/* 821E5614h case    2:*/		return 0x821E5624;
		/* 821E5614h case    2:*/		return 0x821E5618;
	}
	return 0x821E5618;
} // Block from 821E560Ch-821E5618h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E5618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5618);
		  /* 821E5618h */ case    0:  		/* li R11, 0 */
		/* 821E5618h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E5618h case    0:*/		return 0x821E561C;
		  /* 821E561Ch */ case    1:  		/* b -204 */
		/* 821E561Ch case    1:*/		return 0x821E5550;
		/* 821E561Ch case    1:*/		return 0x821E5620;
	}
	return 0x821E5620;
} // Block from 821E5618h-821E5620h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E5620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5620);
		  /* 821E5620h */ case    0:  		/* lwz R4, <#[R1 + 152]> */
		/* 821E5620h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000098) );
		/* 821E5620h case    0:*/		return 0x821E5624;
	}
	return 0x821E5624;
} // Block from 821E5620h-821E5624h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E5624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5624);
		  /* 821E5624h */ case    0:  		/* lwz R11, <#[R20 + 48]> */
		/* 821E5624h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000030) );
		/* 821E5624h case    0:*/		return 0x821E5628;
		  /* 821E5628h */ case    1:  		/* cmplw CR6, R4, R11 */
		/* 821E5628h case    1:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821E5628h case    1:*/		return 0x821E562C;
		  /* 821E562Ch */ case    2:  		/* bc 4, CR6_EQ, 384 */
		/* 821E562Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E57AC;  }
		/* 821E562Ch case    2:*/		return 0x821E5630;
		  /* 821E5630h */ case    3:  		/* addi R25, R24, 4 */
		/* 821E5630h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R24,0x4);
		/* 821E5630h case    3:*/		return 0x821E5634;
		  /* 821E5634h */ case    4:  		/* lwz R26, <#[R25]> */
		/* 821E5634h case    4:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R25 + 0x00000000) );
		/* 821E5634h case    4:*/		return 0x821E5638;
		  /* 821E5638h */ case    5:  		/* cmplwi CR6, R26, 0 */
		/* 821E5638h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821E5638h case    5:*/		return 0x821E563C;
		  /* 821E563Ch */ case    6:  		/* bc 12, CR6_EQ, 368 */
		/* 821E563Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821E57AC;  }
		/* 821E563Ch case    6:*/		return 0x821E5640;
		  /* 821E5640h */ case    7:  		/* lwz R11, <#[R26 + 16]> */
		/* 821E5640h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 821E5640h case    7:*/		return 0x821E5644;
		  /* 821E5644h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821E5644h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E5644h case    8:*/		return 0x821E5648;
		  /* 821E5648h */ case    9:  		/* bc 12, CR6_EQ, 336 */
		/* 821E5648h case    9:*/		if ( regs.CR[6].eq ) { return 0x821E5798;  }
		/* 821E5648h case    9:*/		return 0x821E564C;
		  /* 821E564Ch */ case   10:  		/* rlwinm R29, R11, 0, 0, 31 */
		/* 821E564Ch case   10:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R29,regs.R11);
		/* 821E564Ch case   10:*/		return 0x821E5650;
		  /* 821E5650h */ case   11:  		/* lwz R11, <#[R29 + 8]> */
		/* 821E5650h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821E5650h case   11:*/		return 0x821E5654;
		  /* 821E5654h */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E5654h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E5654h case   12:*/		return 0x821E5658;
		  /* 821E5658h */ case   13:  		/* cmplwi CR6, R11, 15104 */
		/* 821E5658h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003B00);
		/* 821E5658h case   13:*/		return 0x821E565C;
		  /* 821E565Ch */ case   14:  		/* bc 4, CR6_EQ, 316 */
		/* 821E565Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x821E5798;  }
		/* 821E565Ch case   14:*/		return 0x821E5660;
		  /* 821E5660h */ case   15:  		/* lwz R31, <#[R29 + 44]> */
		/* 821E5660h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x0000002C) );
		/* 821E5660h case   15:*/		return 0x821E5664;
		  /* 821E5664h */ case   16:  		/* lwz R30, <#[R31 + 12]> */
		/* 821E5664h case   16:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E5664h case   16:*/		return 0x821E5668;
		  /* 821E5668h */ case   17:  		/* lwz R11, <#[R30 + 8]> */
		/* 821E5668h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E5668h case   17:*/		return 0x821E566C;
		  /* 821E566Ch */ case   18:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E566Ch case   18:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E566Ch case   18:*/		return 0x821E5670;
		  /* 821E5670h */ case   19:  		/* cmplwi CR6, R11, 15872 */
		/* 821E5670h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E00);
		/* 821E5670h case   19:*/		return 0x821E5674;
		  /* 821E5674h */ case   20:  		/* bc 4, CR6_EQ, 292 */
		/* 821E5674h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821E5798;  }
		/* 821E5674h case   20:*/		return 0x821E5678;
		  /* 821E5678h */ case   21:  		/* mr R4, R19 */
		/* 821E5678h case   21:*/		regs.R4 = regs.R19;
		/* 821E5678h case   21:*/		return 0x821E567C;
		  /* 821E567Ch */ case   22:  		/* mr R3, R30 */
		/* 821E567Ch case   22:*/		regs.R3 = regs.R30;
		/* 821E567Ch case   22:*/		return 0x821E5680;
		  /* 821E5680h */ case   23:  		/* bl -448376 */
		/* 821E5680h case   23:*/		regs.LR = 0x821E5684; return 0x82177F08;
		/* 821E5680h case   23:*/		return 0x821E5684;
		  /* 821E5684h */ case   24:  		/* lwz R11, <#[R19 + 12]> */
		/* 821E5684h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000000C) );
		/* 821E5684h case   24:*/		return 0x821E5688;
		  /* 821E5688h */ case   25:  		/* mulli R10, R3, 40 */
		/* 821E5688h case   25:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R3,0x28);
		/* 821E5688h case   25:*/		return 0x821E568C;
		  /* 821E568Ch */ case   26:  		/* add R11, R10, R11 */
		/* 821E568Ch case   26:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E568Ch case   26:*/		return 0x821E5690;
		  /* 821E5690h */ case   27:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E5690h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E5690h case   27:*/		return 0x821E5694;
		  /* 821E5694h */ case   28:  		/* rlwinm R11, R11, 28, 29, 31 */
		/* 821E5694h case   28:*/		cpu::op::rlwinm<0,28,29,31>(regs,&regs.R11,regs.R11);
		/* 821E5694h case   28:*/		return 0x821E5698;
		  /* 821E5698h */ case   29:  		/* cmplwi CR6, R11, 2 */
		/* 821E5698h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 821E5698h case   29:*/		return 0x821E569C;
		  /* 821E569Ch */ case   30:  		/* bc 12, CR6_EQ, 12 */
		/* 821E569Ch case   30:*/		if ( regs.CR[6].eq ) { return 0x821E56A8;  }
		/* 821E569Ch case   30:*/		return 0x821E56A0;
		  /* 821E56A0h */ case   31:  		/* cmplwi CR6, R11, 7 */
		/* 821E56A0h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821E56A0h case   31:*/		return 0x821E56A4;
		  /* 821E56A4h */ case   32:  		/* bc 4, CR6_EQ, 244 */
		/* 821E56A4h case   32:*/		if ( !regs.CR[6].eq ) { return 0x821E5798;  }
		/* 821E56A4h case   32:*/		return 0x821E56A8;
	}
	return 0x821E56A8;
} // Block from 821E5624h-821E56A8h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821E56A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E56A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E56A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E56A8);
		  /* 821E56A8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821E56A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E56A8h case    0:*/		return 0x821E56AC;
		  /* 821E56ACh */ case    1:  		/* addi R28, R29, 4 */
		/* 821E56ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x4);
		/* 821E56ACh case    1:*/		return 0x821E56B0;
		  /* 821E56B0h */ case    2:  		/* rlwinm R27, R11, 27, 24, 31 */
		/* 821E56B0h case    2:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R27,regs.R11);
		/* 821E56B0h case    2:*/		return 0x821E56B4;
		  /* 821E56B4h */ case    3:  		/* lwz R31, <#[R28]> */
		/* 821E56B4h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 821E56B4h case    3:*/		return 0x821E56B8;
		  /* 821E56B8h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821E56B8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E56B8h case    4:*/		return 0x821E56BC;
		  /* 821E56BCh */ case    5:  		/* bc 12, CR6_EQ, 184 */
		/* 821E56BCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821E5774;  }
		/* 821E56BCh case    5:*/		return 0x821E56C0;
		  /* 821E56C0h */ case    6:  		/* lwz R11, <#[R31 + 16]> */
		/* 821E56C0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821E56C0h case    6:*/		return 0x821E56C4;
		  /* 821E56C4h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821E56C4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E56C4h case    7:*/		return 0x821E56C8;
		  /* 821E56C8h */ case    8:  		/* bc 12, CR6_EQ, 152 */
		/* 821E56C8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821E5760;  }
		/* 821E56C8h case    8:*/		return 0x821E56CC;
		  /* 821E56CCh */ case    9:  		/* lwz R11, <#[R31]> */
		/* 821E56CCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E56CCh case    9:*/		return 0x821E56D0;
		  /* 821E56D0h */ case   10:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821E56D0h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821E56D0h case   10:*/		return 0x821E56D4;
		  /* 821E56D4h */ case   11:  		/* bc 12, CR0_EQ, 140 */
		/* 821E56D4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821E5760;  }
		/* 821E56D4h case   11:*/		return 0x821E56D8;
		  /* 821E56D8h */ case   12:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821E56D8h case   12:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821E56D8h case   12:*/		return 0x821E56DC;
		  /* 821E56DCh */ case   13:  		/* bc 12, CR0_EQ, 132 */
		/* 821E56DCh case   13:*/		if ( regs.CR[0].eq ) { return 0x821E5760;  }
		/* 821E56DCh case   13:*/		return 0x821E56E0;
		  /* 821E56E0h */ case   14:  		/* lwz R11, <#[R31 + 12]> */
		/* 821E56E0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E56E0h case   14:*/		return 0x821E56E4;
		  /* 821E56E4h */ case   15:  		/* addi R11, R11, 4 */
		/* 821E56E4h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E56E4h case   15:*/		return 0x821E56E8;
		  /* 821E56E8h */ case   16:  		/* lwz R10, <#[R11]> */
		/* 821E56E8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E56E8h case   16:*/		return 0x821E56EC;
		  /* 821E56ECh */ case   17:  		/* b 12 */
		/* 821E56ECh case   17:*/		return 0x821E56F8;
		/* 821E56ECh case   17:*/		return 0x821E56F0;
		  /* 821E56F0h */ case   18:  		/* addi R11, R10, 8 */
		/* 821E56F0h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821E56F0h case   18:*/		return 0x821E56F4;
		  /* 821E56F4h */ case   19:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E56F4h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E56F4h case   19:*/		return 0x821E56F8;
	}
	return 0x821E56F8;
} // Block from 821E56A8h-821E56F8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821E56F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E56F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E56F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E56F8);
		  /* 821E56F8h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821E56F8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821E56F8h case    0:*/		return 0x821E56FC;
		  /* 821E56FCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821E56FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E56F0;  }
		/* 821E56FCh case    1:*/		return 0x821E5700;
		  /* 821E5700h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821E5700h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821E5700h case    2:*/		return 0x821E5704;
		  /* 821E5704h */ case    3:  		/* mr R4, R27 */
		/* 821E5704h case    3:*/		regs.R4 = regs.R27;
		/* 821E5704h case    3:*/		return 0x821E5708;
		  /* 821E5708h */ case    4:  		/* mr R3, R31 */
		/* 821E5708h case    4:*/		regs.R3 = regs.R31;
		/* 821E5708h case    4:*/		return 0x821E570C;
		  /* 821E570Ch */ case    5:  		/* stw R10, <#[R11]> */
		/* 821E570Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E570Ch case    5:*/		return 0x821E5710;
		  /* 821E5710h */ case    6:  		/* lwz R11, <#[R30 + 4]> */
		/* 821E5710h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821E5710h case    6:*/		return 0x821E5714;
		  /* 821E5714h */ case    7:  		/* stw R11, <#[R31 + 8]> */
		/* 821E5714h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E5714h case    7:*/		return 0x821E5718;
		  /* 821E5718h */ case    8:  		/* stw R31, <#[R30 + 4]> */
		/* 821E5718h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821E5718h case    8:*/		return 0x821E571C;
		  /* 821E571Ch */ case    9:  		/* stw R30, <#[R31 + 12]> */
		/* 821E571Ch case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E571Ch case    9:*/		return 0x821E5720;
		  /* 821E5720h */ case   10:  		/* bl -477624 */
		/* 821E5720h case   10:*/		regs.LR = 0x821E5724; return 0x82170D68;
		/* 821E5720h case   10:*/		return 0x821E5724;
		  /* 821E5724h */ case   11:  		/* lwz R11, <#[R31]> */
		/* 821E5724h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E5724h case   11:*/		return 0x821E5728;
		  /* 821E5728h */ case   12:  		/* addi R22, R22, 1 */
		/* 821E5728h case   12:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 821E5728h case   12:*/		return 0x821E572C;
		  /* 821E572Ch */ case   13:  		/* rlwimi R11, R17, 4, 27, 28 */
		/* 821E572Ch case   13:*/		cpu::op::rlwimi<0,4,27,28>(regs,&regs.R11,regs.R17);
		/* 821E572Ch case   13:*/		return 0x821E5730;
		  /* 821E5730h */ case   14:  		/* stw R11, <#[R31]> */
		/* 821E5730h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E5730h case   14:*/		return 0x821E5734;
		  /* 821E5734h */ case   15:  		/* lwz R11, <#[R31 + 16]> */
		/* 821E5734h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821E5734h case   15:*/		return 0x821E5738;
		  /* 821E5738h */ case   16:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E5738h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E5738h case   16:*/		return 0x821E573C;
		  /* 821E573Ch */ case   17:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E573Ch case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E573Ch case   17:*/		return 0x821E5740;
		  /* 821E5740h */ case   18:  		/* cmplwi CR6, R11, 14336 */
		/* 821E5740h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E5740h case   18:*/		return 0x821E5744;
		  /* 821E5744h */ case   19:  		/* bc 4, CR6_EQ, 28 */
		/* 821E5744h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821E5760;  }
		/* 821E5744h case   19:*/		return 0x821E5748;
		  /* 821E5748h */ case   20:  		/* mr R5, R29 */
		/* 821E5748h case   20:*/		regs.R5 = regs.R29;
		/* 821E5748h case   20:*/		return 0x821E574C;
		  /* 821E574Ch */ case   21:  		/* lwz R4, <#[R29 + 28]> */
		/* 821E574Ch case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E574Ch case   21:*/		return 0x821E5750;
		  /* 821E5750h */ case   22:  		/* mr R6, R31 */
		/* 821E5750h case   22:*/		regs.R6 = regs.R31;
		/* 821E5750h case   22:*/		return 0x821E5754;
		  /* 821E5754h */ case   23:  		/* rlwimi R5, R17, 0, 30, 31 */
		/* 821E5754h case   23:*/		cpu::op::rlwimi<0,0,30,31>(regs,&regs.R5,regs.R17);
		/* 821E5754h case   23:*/		return 0x821E5758;
		  /* 821E5758h */ case   24:  		/* mr R3, R19 */
		/* 821E5758h case   24:*/		regs.R3 = regs.R19;
		/* 821E5758h case   24:*/		return 0x821E575C;
		  /* 821E575Ch */ case   25:  		/* bl 279836 */
		/* 821E575Ch case   25:*/		regs.LR = 0x821E5760; return 0x82229C78;
		/* 821E575Ch case   25:*/		return 0x821E5760;
	}
	return 0x821E5760;
} // Block from 821E56F8h-821E5760h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821E5760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5760);
		  /* 821E5760h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821E5760h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821E5760h case    0:*/		return 0x821E5764;
		  /* 821E5764h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821E5764h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821E5764h case    1:*/		return 0x821E5768;
		  /* 821E5768h */ case    2:  		/* bc 4, CR6_EQ, -180 */
		/* 821E5768h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E56B4;  }
		/* 821E5768h case    2:*/		return 0x821E576C;
		  /* 821E576Ch */ case    3:  		/* addi R28, R31, 8 */
		/* 821E576Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x8);
		/* 821E576Ch case    3:*/		return 0x821E5770;
		  /* 821E5770h */ case    4:  		/* b -188 */
		/* 821E5770h case    4:*/		return 0x821E56B4;
		/* 821E5770h case    4:*/		return 0x821E5774;
	}
	return 0x821E5774;
} // Block from 821E5760h-821E5774h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E5774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5774);
		  /* 821E5774h */ case    0:  		/* mr R3, R29 */
		/* 821E5774h case    0:*/		regs.R3 = regs.R29;
		/* 821E5774h case    0:*/		return 0x821E5778;
		  /* 821E5778h */ case    1:  		/* bl -527864 */
		/* 821E5778h case    1:*/		regs.LR = 0x821E577C; return 0x82164980;
		/* 821E5778h case    1:*/		return 0x821E577C;
		  /* 821E577Ch */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E577Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E577Ch case    2:*/		return 0x821E5780;
		  /* 821E5780h */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 821E5780h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E5798;  }
		/* 821E5780h case    3:*/		return 0x821E5784;
		  /* 821E5784h */ case    4:  		/* li R6, 1 */
		/* 821E5784h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E5784h case    4:*/		return 0x821E5788;
		  /* 821E5788h */ case    5:  		/* li R5, 0 */
		/* 821E5788h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E5788h case    5:*/		return 0x821E578C;
		  /* 821E578Ch */ case    6:  		/* mr R4, R29 */
		/* 821E578Ch case    6:*/		regs.R4 = regs.R29;
		/* 821E578Ch case    6:*/		return 0x821E5790;
		  /* 821E5790h */ case    7:  		/* mr R3, R19 */
		/* 821E5790h case    7:*/		regs.R3 = regs.R19;
		/* 821E5790h case    7:*/		return 0x821E5794;
		  /* 821E5794h */ case    8:  		/* bl 285748 */
		/* 821E5794h case    8:*/		regs.LR = 0x821E5798; return 0x8222B3C8;
		/* 821E5794h case    8:*/		return 0x821E5798;
	}
	return 0x821E5798;
} // Block from 821E5774h-821E5798h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E5798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5798);
		  /* 821E5798h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821E5798h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821E5798h case    0:*/		return 0x821E579C;
		  /* 821E579Ch */ case    1:  		/* cmplw CR6, R11, R26 */
		/* 821E579Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821E579Ch case    1:*/		return 0x821E57A0;
		  /* 821E57A0h */ case    2:  		/* bc 4, CR6_EQ, -364 */
		/* 821E57A0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E5634;  }
		/* 821E57A0h case    2:*/		return 0x821E57A4;
		  /* 821E57A4h */ case    3:  		/* addi R25, R26, 8 */
		/* 821E57A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R26,0x8);
		/* 821E57A4h case    3:*/		return 0x821E57A8;
		  /* 821E57A8h */ case    4:  		/* b -372 */
		/* 821E57A8h case    4:*/		return 0x821E5634;
		/* 821E57A8h case    4:*/		return 0x821E57AC;
	}
	return 0x821E57AC;
} // Block from 821E5798h-821E57ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E57ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E57AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E57AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E57AC);
		  /* 821E57ACh */ case    0:  		/* mr R3, R24 */
		/* 821E57ACh case    0:*/		regs.R3 = regs.R24;
		/* 821E57ACh case    0:*/		return 0x821E57B0;
		  /* 821E57B0h */ case    1:  		/* bl -527920 */
		/* 821E57B0h case    1:*/		regs.LR = 0x821E57B4; return 0x82164980;
		/* 821E57B0h case    1:*/		return 0x821E57B4;
		  /* 821E57B4h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E57B4h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E57B4h case    2:*/		return 0x821E57B8;
		  /* 821E57B8h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 821E57B8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E57D4;  }
		/* 821E57B8h case    3:*/		return 0x821E57BC;
		  /* 821E57BCh */ case    4:  		/* li R6, 1 */
		/* 821E57BCh case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E57BCh case    4:*/		return 0x821E57C0;
		  /* 821E57C0h */ case    5:  		/* li R5, 0 */
		/* 821E57C0h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E57C0h case    5:*/		return 0x821E57C4;
		  /* 821E57C4h */ case    6:  		/* mr R4, R24 */
		/* 821E57C4h case    6:*/		regs.R4 = regs.R24;
		/* 821E57C4h case    6:*/		return 0x821E57C8;
		  /* 821E57C8h */ case    7:  		/* mr R3, R19 */
		/* 821E57C8h case    7:*/		regs.R3 = regs.R19;
		/* 821E57C8h case    7:*/		return 0x821E57CC;
		  /* 821E57CCh */ case    8:  		/* bl 285692 */
		/* 821E57CCh case    8:*/		regs.LR = 0x821E57D0; return 0x8222B3C8;
		/* 821E57CCh case    8:*/		return 0x821E57D0;
		  /* 821E57D0h */ case    9:  		/* b 76 */
		/* 821E57D0h case    9:*/		return 0x821E581C;
		/* 821E57D0h case    9:*/		return 0x821E57D4;
	}
	return 0x821E57D4;
} // Block from 821E57ACh-821E57D4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E57D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E57D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E57D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E57D4);
		  /* 821E57D4h */ case    0:  		/* lbz R11, <#[R1 + 128]> */
		/* 821E57D4h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821E57D4h case    0:*/		return 0x821E57D8;
		  /* 821E57D8h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821E57D8h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E57D8h case    1:*/		return 0x821E57DC;
		  /* 821E57DCh */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 821E57DCh case    2:*/		if ( regs.CR[0].eq ) { return 0x821E57F0;  }
		/* 821E57DCh case    2:*/		return 0x821E57E0;
		  /* 821E57E0h */ case    3:  		/* mr R3, R19 */
		/* 821E57E0h case    3:*/		regs.R3 = regs.R19;
		/* 821E57E0h case    3:*/		return 0x821E57E4;
		  /* 821E57E4h */ case    4:  		/* bl 23356 */
		/* 821E57E4h case    4:*/		regs.LR = 0x821E57E8; return 0x821EB320;
		/* 821E57E4h case    4:*/		return 0x821E57E8;
		  /* 821E57E8h */ case    5:  		/* li R11, 0 */
		/* 821E57E8h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E57E8h case    5:*/		return 0x821E57EC;
		  /* 821E57ECh */ case    6:  		/* stb R11, <#[R1 + 128]> */
		/* 821E57ECh case    6:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821E57ECh case    6:*/		return 0x821E57F0;
	}
	return 0x821E57F0;
} // Block from 821E57D4h-821E57F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E57F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E57F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E57F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E57F0);
		  /* 821E57F0h */ case    0:  		/* mr R7, R19 */
		/* 821E57F0h case    0:*/		regs.R7 = regs.R19;
		/* 821E57F0h case    0:*/		return 0x821E57F4;
		  /* 821E57F4h */ case    1:  		/* lwz R5, <#[R21 + 4]> */
		/* 821E57F4h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R21 + 0x00000004) );
		/* 821E57F4h case    1:*/		return 0x821E57F8;
		  /* 821E57F8h */ case    2:  		/* li R6, 0 */
		/* 821E57F8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E57F8h case    2:*/		return 0x821E57FC;
		  /* 821E57FCh */ case    3:  		/* lwz R4, <#[R20 + 48]> */
		/* 821E57FCh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R20 + 0x00000030) );
		/* 821E57FCh case    3:*/		return 0x821E5800;
		  /* 821E5800h */ case    4:  		/* mr R3, R24 */
		/* 821E5800h case    4:*/		regs.R3 = regs.R24;
		/* 821E5800h case    4:*/		return 0x821E5804;
		  /* 821E5804h */ case    5:  		/* bl 287284 */
		/* 821E5804h case    5:*/		regs.LR = 0x821E5808; return 0x8222BA38;
		/* 821E5804h case    5:*/		return 0x821E5808;
		  /* 821E5808h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E5808h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E5808h case    6:*/		return 0x821E580C;
		  /* 821E580Ch */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 821E580Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821E581C;  }
		/* 821E580Ch case    7:*/		return 0x821E5810;
		  /* 821E5810h */ case    8:  		/* lwz R11, <#[R20 + 72]> */
		/* 821E5810h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000048) );
		/* 821E5810h case    8:*/		return 0x821E5814;
		  /* 821E5814h */ case    9:  		/* addi R11, R11, 1 */
		/* 821E5814h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E5814h case    9:*/		return 0x821E5818;
		  /* 821E5818h */ case   10:  		/* stw R11, <#[R20 + 72]> */
		/* 821E5818h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000048) );
		/* 821E5818h case   10:*/		return 0x821E581C;
	}
	return 0x821E581C;
} // Block from 821E57F0h-821E581Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E581Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E581C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E581C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E581C);
		  /* 821E581Ch */ case    0:  		/* rlwinm R11, R24, 0, 0, 30 */
		/* 821E581Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R24);
		/* 821E581Ch case    0:*/		return 0x821E5820;
		  /* 821E5820h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E5820h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E5820h case    1:*/		return 0x821E5824;
		  /* 821E5824h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E5824h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E5824h case    2:*/		return 0x821E5828;
		  /* 821E5828h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E5828h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E5838;  }
		/* 821E5828h case    3:*/		return 0x821E582C;
		  /* 821E582Ch */ case    4:  		/* mr R24, R11 */
		/* 821E582Ch case    4:*/		regs.R24 = regs.R11;
		/* 821E582Ch case    4:*/		return 0x821E5830;
		  /* 821E5830h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E5830h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E5830h case    5:*/		return 0x821E5834;
		  /* 821E5834h */ case    6:  		/* bc 4, CR6_EQ, -796 */
		/* 821E5834h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E5518;  }
		/* 821E5834h case    6:*/		return 0x821E5838;
	}
	return 0x821E5838;
} // Block from 821E581Ch-821E5838h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E5838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5838);
		  /* 821E5838h */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821E5838h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821E5838h case    0:*/		return 0x821E583C;
		  /* 821E583Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E583Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E583Ch case    1:*/		return 0x821E5840;
		  /* 821E5840h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E5840h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E5840h case    2:*/		return 0x821E5844;
		  /* 821E5844h */ case    3:  		/* bc 4, CR0_EQ, 24 */
		/* 821E5844h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E585C;  }
		/* 821E5844h case    3:*/		return 0x821E5848;
		  /* 821E5848h */ case    4:  		/* mr R23, R11 */
		/* 821E5848h case    4:*/		regs.R23 = regs.R11;
		/* 821E5848h case    4:*/		return 0x821E584C;
		  /* 821E584Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E584Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E584Ch case    5:*/		return 0x821E5850;
		  /* 821E5850h */ case    6:  		/* bc 4, CR6_EQ, -892 */
		/* 821E5850h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E54D4;  }
		/* 821E5850h case    6:*/		return 0x821E5854;
		  /* 821E5854h */ case    7:  		/* b 8 */
		/* 821E5854h case    7:*/		return 0x821E585C;
		/* 821E5854h case    7:*/		return 0x821E5858;
	}
	return 0x821E5858;
} // Block from 821E5838h-821E5858h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E5858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5858);
		  /* 821E5858h */ case    0:  		/* li R18, 68 */
		/* 821E5858h case    0:*/		cpu::op::li<0>(regs,&regs.R18,0x44);
		/* 821E5858h case    0:*/		return 0x821E585C;
	}
	return 0x821E585C;
} // Block from 821E5858h-821E585Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E585Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E585C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E585C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E585C);
		  /* 821E585Ch */ case    0:  		/* lwz R11, <#[R20]> */
		/* 821E585Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821E585Ch case    0:*/		return 0x821E5860;
		  /* 821E5860h */ case    1:  		/* rlwinm. R10, R11, 0, 22, 22 */
		/* 821E5860h case    1:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R10,regs.R11);
		/* 821E5860h case    1:*/		return 0x821E5864;
		  /* 821E5864h */ case    2:  		/* bc 4, CR0_EQ, 112 */
		/* 821E5864h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E58D4;  }
		/* 821E5864h case    2:*/		return 0x821E5868;
		  /* 821E5868h */ case    3:  		/* rlwinm. R11, R11, 0, 4, 4 */
		/* 821E5868h case    3:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R11);
		/* 821E5868h case    3:*/		return 0x821E586C;
		  /* 821E586Ch */ case    4:  		/* bc 12, CR0_EQ, 376 */
		/* 821E586Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821E59E4;  }
		/* 821E586Ch case    4:*/		return 0x821E5870;
		  /* 821E5870h */ case    5:  		/* lwz R11, <#[R20 + 72]> */
		/* 821E5870h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000048) );
		/* 821E5870h case    5:*/		return 0x821E5874;
		  /* 821E5874h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821E5874h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E5874h case    6:*/		return 0x821E5878;
		  /* 821E5878h */ case    7:  		/* bc 4, CR6_EQ, 364 */
		/* 821E5878h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821E59E4;  }
		/* 821E5878h case    7:*/		return 0x821E587C;
		  /* 821E587Ch */ case    8:  		/* lwz R11, <#[R20 + 48]> */
		/* 821E587Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000030) );
		/* 821E587Ch case    8:*/		return 0x821E5880;
		  /* 821E5880h */ case    9:  		/* lwz R31, <#[R11]> */
		/* 821E5880h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821E5880h case    9:*/		return 0x821E5884;
		  /* 821E5884h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 821E5884h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E5884h case   10:*/		return 0x821E5888;
		  /* 821E5888h */ case   11:  		/* bc 12, CR6_EQ, 348 */
		/* 821E5888h case   11:*/		if ( regs.CR[6].eq ) { return 0x821E59E4;  }
		/* 821E5888h case   11:*/		return 0x821E588C;
		  /* 821E588Ch */ case   12:  		/* li R7, 0 */
		/* 821E588Ch case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E588Ch case   12:*/		return 0x821E5890;
		  /* 821E5890h */ case   13:  		/* addi R6, R1, 352 */
		/* 821E5890h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x160);
		/* 821E5890h case   13:*/		return 0x821E5894;
		  /* 821E5894h */ case   14:  		/* addi R5, R1, 480 */
		/* 821E5894h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1E0);
		/* 821E5894h case   14:*/		return 0x821E5898;
		  /* 821E5898h */ case   15:  		/* addi R4, R1, 216 */
		/* 821E5898h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD8);
		/* 821E5898h case   15:*/		return 0x821E589C;
		  /* 821E589Ch */ case   16:  		/* mr R3, R31 */
		/* 821E589Ch case   16:*/		regs.R3 = regs.R31;
		/* 821E589Ch case   16:*/		return 0x821E58A0;
		  /* 821E58A0h */ case   17:  		/* bl 300688 */
		/* 821E58A0h case   17:*/		regs.LR = 0x821E58A4; return 0x8222EF30;
		/* 821E58A0h case   17:*/		return 0x821E58A4;
		  /* 821E58A4h */ case   18:  		/* lwz R11, <#[R20 + 52]> */
		/* 821E58A4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000034) );
		/* 821E58A4h case   18:*/		return 0x821E58A8;
		  /* 821E58A8h */ case   19:  		/* lwz R10, <#[R1 + 216]> */
		/* 821E58A8h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000D8) );
		/* 821E58A8h case   19:*/		return 0x821E58AC;
		  /* 821E58ACh */ case   20:  		/* cmplw CR6, R10, R11 */
		/* 821E58ACh case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821E58ACh case   20:*/		return 0x821E58B0;
		  /* 821E58B0h */ case   21:  		/* bc 12, CR6_EQ, 12 */
		/* 821E58B0h case   21:*/		if ( regs.CR[6].eq ) { return 0x821E58BC;  }
		/* 821E58B0h case   21:*/		return 0x821E58B4;
		  /* 821E58B4h */ case   22:  		/* lwz R31, <#[R31 + 4]> */
		/* 821E58B4h case   22:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821E58B4h case   22:*/		return 0x821E58B8;
		  /* 821E58B8h */ case   23:  		/* b -52 */
		/* 821E58B8h case   23:*/		return 0x821E5884;
		/* 821E58B8h case   23:*/		return 0x821E58BC;
	}
	return 0x821E58BC;
} // Block from 821E585Ch-821E58BCh (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E58BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E58BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E58BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E58BC);
		  /* 821E58BCh */ case    0:  		/* mr R5, R19 */
		/* 821E58BCh case    0:*/		regs.R5 = regs.R19;
		/* 821E58BCh case    0:*/		return 0x821E58C0;
		  /* 821E58C0h */ case    1:  		/* lwz R3, <#[R20 + 48]> */
		/* 821E58C0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R20 + 0x00000030) );
		/* 821E58C0h case    1:*/		return 0x821E58C4;
		  /* 821E58C4h */ case    2:  		/* mr R4, R31 */
		/* 821E58C4h case    2:*/		regs.R4 = regs.R31;
		/* 821E58C4h case    2:*/		return 0x821E58C8;
		  /* 821E58C8h */ case    3:  		/* bl -446392 */
		/* 821E58C8h case    3:*/		regs.LR = 0x821E58CC; return 0x82178910;
		/* 821E58C8h case    3:*/		return 0x821E58CC;
		  /* 821E58CCh */ case    4:  		/* stb R17, <#[R1 + 129]> */
		/* 821E58CCh case    4:*/		cpu::mem::store8( regs, regs.R17, (uint32)(regs.R1 + 0x00000081) );
		/* 821E58CCh case    4:*/		return 0x821E58D0;
		  /* 821E58D0h */ case    5:  		/* b 276 */
		/* 821E58D0h case    5:*/		return 0x821E59E4;
		/* 821E58D0h case    5:*/		return 0x821E58D4;
	}
	return 0x821E58D4;
} // Block from 821E58BCh-821E58D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E58D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E58D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E58D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E58D4);
		  /* 821E58D4h */ case    0:  		/* lwz R30, <#[R20 + 60]> */
		/* 821E58D4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R20 + 0x0000003C) );
		/* 821E58D4h case    0:*/		return 0x821E58D8;
		  /* 821E58D8h */ case    1:  		/* b 252 */
		/* 821E58D8h case    1:*/		return 0x821E59D4;
		/* 821E58D8h case    1:*/		return 0x821E58DC;
		  /* 821E58DCh */ case    2:  		/* lwz R31, <#[R30 + 16]> */
		/* 821E58DCh case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 821E58DCh case    2:*/		return 0x821E58E0;
		  /* 821E58E0h */ case    3:  		/* b 232 */
		/* 821E58E0h case    3:*/		return 0x821E59C8;
		/* 821E58E0h case    3:*/		return 0x821E58E4;
		  /* 821E58E4h */ case    4:  		/* lwz R10, <#[R20 + 56]> */
		/* 821E58E4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000038) );
		/* 821E58E4h case    4:*/		return 0x821E58E8;
		  /* 821E58E8h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 821E58E8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E58E8h case    5:*/		return 0x821E58EC;
		  /* 821E58ECh */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 821E58ECh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E58ECh case    6:*/		return 0x821E58F0;
		  /* 821E58F0h */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 821E58F0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E5910;  }
		/* 821E58F0h case    7:*/		return 0x821E58F4;
		  /* 821E58F4h */ case    8:  		/* cmpwi CR6, R11, 2 */
		/* 821E58F4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 821E58F4h case    8:*/		return 0x821E58F8;
		  /* 821E58F8h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 821E58F8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821E5904;  }
		/* 821E58F8h case    9:*/		return 0x821E58FC;
		  /* 821E58FCh */ case   10:  		/* cmpwi CR6, R11, 3 */
		/* 821E58FCh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821E58FCh case   10:*/		return 0x821E5900;
		  /* 821E5900h */ case   11:  		/* bc 4, CR6_EQ, 196 */
		/* 821E5900h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821E59C4;  }
		/* 821E5900h case   11:*/		return 0x821E5904;
	}
	return 0x821E5904;
} // Block from 821E58D4h-821E5904h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E5904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5904);
		  /* 821E5904h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 821E5904h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821E5904h case    0:*/		return 0x821E5908;
		  /* 821E5908h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 821E5908h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E5908h case    1:*/		return 0x821E590C;
		  /* 821E590Ch */ case    2:  		/* b 40 */
		/* 821E590Ch case    2:*/		return 0x821E5934;
		/* 821E590Ch case    2:*/		return 0x821E5910;
	}
	return 0x821E5910;
} // Block from 821E5904h-821E5910h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E5910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5910);
		  /* 821E5910h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 821E5910h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821E5910h case    0:*/		return 0x821E5914;
		  /* 821E5914h */ case    1:  		/* bc 4, CR6_EQ, 176 */
		/* 821E5914h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E59C4;  }
		/* 821E5914h case    1:*/		return 0x821E5918;
		  /* 821E5918h */ case    2:  		/* lwz R11, <#[R21 + 36]> */
		/* 821E5918h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000024) );
		/* 821E5918h case    2:*/		return 0x821E591C;
		  /* 821E591Ch */ case    3:  		/* lfd FR0, <#[R31 + 16]> */
		/* 821E591Ch case    3:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x00000010) );
		/* 821E591Ch case    3:*/		return 0x821E5920;
		  /* 821E5920h */ case    4:  		/* rlwinm R11, R11, 22, 17, 31 */
		/* 821E5920h case    4:*/		cpu::op::rlwinm<0,22,17,31>(regs,&regs.R11,regs.R11);
		/* 821E5920h case    4:*/		return 0x821E5924;
		  /* 821E5924h */ case    5:  		/* std R11, <#[R1 + 472]> */
		/* 821E5924h case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000001D8) );
		/* 821E5924h case    5:*/		return 0x821E5928;
		  /* 821E5928h */ case    6:  		/* lfd FR13, <#[R1 + 472]> */
		/* 821E5928h case    6:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000001D8) );
		/* 821E5928h case    6:*/		return 0x821E592C;
		  /* 821E592Ch */ case    7:  		/* fcfid FR13, FR13 */
		/* 821E592Ch case    7:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 821E592Ch case    7:*/		return 0x821E5930;
		  /* 821E5930h */ case    8:  		/* fcmpu CR6, FR13, FR0 */
		/* 821E5930h case    8:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 821E5930h case    8:*/		return 0x821E5934;
	}
	return 0x821E5934;
} // Block from 821E5910h-821E5934h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E5934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5934);
		  /* 821E5934h */ case    0:  		/* bc 4, CR6_EQ, 144 */
		/* 821E5934h case    0:*/		if ( !regs.CR[6].eq ) { return 0x821E59C4;  }
		/* 821E5934h case    0:*/		return 0x821E5938;
		  /* 821E5938h */ case    1:  		/* lbz R11, <#[R30 + 12]> */
		/* 821E5938h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E5938h case    1:*/		return 0x821E593C;
		  /* 821E593Ch */ case    2:  		/* cmplwi CR0, R11, 0 */
		/* 821E593Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E593Ch case    2:*/		return 0x821E5940;
		  /* 821E5940h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821E5940h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E594C;  }
		/* 821E5940h case    3:*/		return 0x821E5944;
		  /* 821E5944h */ case    4:  		/* fmr FR1, FR27 */
		/* 821E5944h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR27);
		/* 821E5944h case    4:*/		return 0x821E5948;
		  /* 821E5948h */ case    5:  		/* b 8 */
		/* 821E5948h case    5:*/		return 0x821E5950;
		/* 821E5948h case    5:*/		return 0x821E594C;
	}
	return 0x821E594C;
} // Block from 821E5934h-821E594Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E594Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E594C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E594C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E594C);
		  /* 821E594Ch */ case    0:  		/* fmr FR1, FR29 */
		/* 821E594Ch case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821E594Ch case    0:*/		return 0x821E5950;
	}
	return 0x821E5950;
} // Block from 821E594Ch-821E5950h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E5950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5950);
		  /* 821E5950h */ case    0:  		/* li R4, 1 */
		/* 821E5950h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E5950h case    0:*/		return 0x821E5954;
		  /* 821E5954h */ case    1:  		/* fmr FR4, FR29 */
		/* 821E5954h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821E5954h case    1:*/		return 0x821E5958;
		  /* 821E5958h */ case    2:  		/* mr R3, R19 */
		/* 821E5958h case    2:*/		regs.R3 = regs.R19;
		/* 821E5958h case    2:*/		return 0x821E595C;
		  /* 821E595Ch */ case    3:  		/* fmr FR3, FR29 */
		/* 821E595Ch case    3:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821E595Ch case    3:*/		return 0x821E5960;
		  /* 821E5960h */ case    4:  		/* fmr FR2, FR29 */
		/* 821E5960h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821E5960h case    4:*/		return 0x821E5964;
		  /* 821E5964h */ case    5:  		/* bl 283124 */
		/* 821E5964h case    5:*/		regs.LR = 0x821E5968; return 0x8222AB58;
		/* 821E5964h case    5:*/		return 0x821E5968;
		  /* 821E5968h */ case    6:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E5968h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E5968h case    6:*/		return 0x821E596C;
		  /* 821E596Ch */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821E596Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E596Ch case    7:*/		return 0x821E5970;
		  /* 821E5970h */ case    8:  		/* addi R10, R10, 4 */
		/* 821E5970h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821E5970h case    8:*/		return 0x821E5974;
		  /* 821E5974h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821E5974h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E5974h case    9:*/		return 0x821E5978;
		  /* 821E5978h */ case   10:  		/* b 12 */
		/* 821E5978h case   10:*/		return 0x821E5984;
		/* 821E5978h case   10:*/		return 0x821E597C;
		  /* 821E597Ch */ case   11:  		/* addi R10, R9, 8 */
		/* 821E597Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821E597Ch case   11:*/		return 0x821E5980;
		  /* 821E5980h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821E5980h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821E5980h case   12:*/		return 0x821E5984;
	}
	return 0x821E5984;
} // Block from 821E5950h-821E5984h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E5984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5984);
		  /* 821E5984h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821E5984h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821E5984h case    0:*/		return 0x821E5988;
		  /* 821E5988h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821E5988h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E597C;  }
		/* 821E5988h case    1:*/		return 0x821E598C;
		  /* 821E598Ch */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821E598Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E598Ch case    2:*/		return 0x821E5990;
		  /* 821E5990h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821E5990h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E5990h case    3:*/		return 0x821E5994;
		  /* 821E5994h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821E5994h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821E5994h case    4:*/		return 0x821E5998;
		  /* 821E5998h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821E5998h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E5998h case    5:*/		return 0x821E599C;
		  /* 821E599Ch */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821E599Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E599Ch case    6:*/		return 0x821E59A0;
		  /* 821E59A0h */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 821E59A0h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E59A0h case    7:*/		return 0x821E59A4;
		  /* 821E59A4h */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E59A4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E59A4h case    8:*/		return 0x821E59A8;
		  /* 821E59A8h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821E59A8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E59A8h case    9:*/		return 0x821E59AC;
		  /* 821E59ACh */ case   10:  		/* rlwinm R10, R10, 0, 0, 26 */
		/* 821E59ACh case   10:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R10,regs.R10);
		/* 821E59ACh case   10:*/		return 0x821E59B0;
		  /* 821E59B0h */ case   11:  		/* stw R10, <#[R11]> */
		/* 821E59B0h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E59B0h case   11:*/		return 0x821E59B4;
		  /* 821E59B4h */ case   12:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E59B4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E59B4h case   12:*/		return 0x821E59B8;
		  /* 821E59B8h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821E59B8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E59B8h case   13:*/		return 0x821E59BC;
		  /* 821E59BCh */ case   14:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821E59BCh case   14:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821E59BCh case   14:*/		return 0x821E59C0;
		  /* 821E59C0h */ case   15:  		/* stw R10, <#[R11]> */
		/* 821E59C0h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E59C0h case   15:*/		return 0x821E59C4;
	}
	return 0x821E59C4;
} // Block from 821E5984h-821E59C4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E59C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E59C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E59C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E59C4);
		  /* 821E59C4h */ case    0:  		/* lwz R31, <#[R31 + 24]> */
		/* 821E59C4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000018) );
		/* 821E59C4h case    0:*/		return 0x821E59C8;
	}
	return 0x821E59C8;
} // Block from 821E59C4h-821E59C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E59C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E59C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E59C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E59C8);
		  /* 821E59C8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821E59C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E59C8h case    0:*/		return 0x821E59CC;
		  /* 821E59CCh */ case    1:  		/* bc 4, CR6_EQ, -232 */
		/* 821E59CCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E58E4;  }
		/* 821E59CCh case    1:*/		return 0x821E59D0;
		  /* 821E59D0h */ case    2:  		/* lwz R30, <#[R30 + 4]> */
		/* 821E59D0h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 821E59D0h case    2:*/		return 0x821E59D4;
	}
	return 0x821E59D4;
} // Block from 821E59C8h-821E59D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E59D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E59D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E59D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E59D4);
		  /* 821E59D4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821E59D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E59D4h case    0:*/		return 0x821E59D8;
		  /* 821E59D8h */ case    1:  		/* bc 4, CR6_EQ, -252 */
		/* 821E59D8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E58DC;  }
		/* 821E59D8h case    1:*/		return 0x821E59DC;
		  /* 821E59DCh */ case    2:  		/* b 8 */
		/* 821E59DCh case    2:*/		return 0x821E59E4;
		/* 821E59DCh case    2:*/		return 0x821E59E0;
	}
	return 0x821E59E0;
} // Block from 821E59D4h-821E59E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E59E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E59E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E59E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E59E0);
		  /* 821E59E0h */ case    0:  		/* li R18, 68 */
		/* 821E59E0h case    0:*/		cpu::op::li<0>(regs,&regs.R18,0x44);
		/* 821E59E0h case    0:*/		return 0x821E59E4;
	}
	return 0x821E59E4;
} // Block from 821E59E0h-821E59E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E59E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E59E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E59E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E59E4);
		  /* 821E59E4h */ case    0:  		/* lwz R11, <#[R21]> */
		/* 821E59E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821E59E4h case    0:*/		return 0x821E59E8;
		  /* 821E59E8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E59E8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E59E8h case    1:*/		return 0x821E59EC;
		  /* 821E59ECh */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 821E59ECh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E5A00;  }
		/* 821E59ECh case    2:*/		return 0x821E59F0;
		  /* 821E59F0h */ case    3:  		/* mr R4, R21 */
		/* 821E59F0h case    3:*/		regs.R4 = regs.R21;
		/* 821E59F0h case    3:*/		return 0x821E59F4;
		  /* 821E59F4h */ case    4:  		/* mr R3, R19 */
		/* 821E59F4h case    4:*/		regs.R3 = regs.R19;
		/* 821E59F4h case    4:*/		return 0x821E59F8;
		  /* 821E59F8h */ case    5:  		/* bl -125960 */
		/* 821E59F8h case    5:*/		regs.LR = 0x821E59FC; return 0x821C6DF0;
		/* 821E59F8h case    5:*/		return 0x821E59FC;
		  /* 821E59FCh */ case    6:  		/* stb R17, <#[R1 + 128]> */
		/* 821E59FCh case    6:*/		cpu::mem::store8( regs, regs.R17, (uint32)(regs.R1 + 0x00000080) );
		/* 821E59FCh case    6:*/		return 0x821E5A00;
	}
	return 0x821E5A00;
} // Block from 821E59E4h-821E5A00h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E5A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5A00);
		  /* 821E5A00h */ case    0:  		/* lwz R4, <#[R21]> */
		/* 821E5A00h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000000) );
		/* 821E5A00h case    0:*/		return 0x821E5A04;
		  /* 821E5A04h */ case    1:  		/* li R8, 0 */
		/* 821E5A04h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E5A04h case    1:*/		return 0x821E5A08;
		  /* 821E5A08h */ case    2:  		/* li R7, 0 */
		/* 821E5A08h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E5A08h case    2:*/		return 0x821E5A0C;
		  /* 821E5A0Ch */ case    3:  		/* addi R5, R4, 32 */
		/* 821E5A0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 821E5A0Ch case    3:*/		return 0x821E5A10;
		  /* 821E5A10h */ case    4:  		/* li R6, 84 */
		/* 821E5A10h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x54);
		/* 821E5A10h case    4:*/		return 0x821E5A14;
		  /* 821E5A14h */ case    5:  		/* mr R3, R19 */
		/* 821E5A14h case    5:*/		regs.R3 = regs.R19;
		/* 821E5A14h case    5:*/		return 0x821E5A18;
		  /* 821E5A18h */ case    6:  		/* bl 257920 */
		/* 821E5A18h case    6:*/		regs.LR = 0x821E5A1C; return 0x82224998;
		/* 821E5A18h case    6:*/		return 0x821E5A1C;
		  /* 821E5A1Ch */ case    7:  		/* mr R4, R19 */
		/* 821E5A1Ch case    7:*/		regs.R4 = regs.R19;
		/* 821E5A1Ch case    7:*/		return 0x821E5A20;
		  /* 821E5A20h */ case    8:  		/* mr R23, R3 */
		/* 821E5A20h case    8:*/		regs.R23 = regs.R3;
		/* 821E5A20h case    8:*/		return 0x821E5A24;
		  /* 821E5A24h */ case    9:  		/* bl -528956 */
		/* 821E5A24h case    9:*/		regs.LR = 0x821E5A28; return 0x821647E8;
		/* 821E5A24h case    9:*/		return 0x821E5A28;
		  /* 821E5A28h */ case   10:  		/* cmplwi CR6, R20, 0 */
		/* 821E5A28h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821E5A28h case   10:*/		return 0x821E5A2C;
		  /* 821E5A2Ch */ case   11:  		/* bc 12, CR6_EQ, 76 */
		/* 821E5A2Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821E5A78;  }
		/* 821E5A2Ch case   11:*/		return 0x821E5A30;
		  /* 821E5A30h */ case   12:  		/* cmplwi CR6, R22, 0 */
		/* 821E5A30h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821E5A30h case   12:*/		return 0x821E5A34;
		  /* 821E5A34h */ case   13:  		/* bc 12, CR6_EQ, 36 */
		/* 821E5A34h case   13:*/		if ( regs.CR[6].eq ) { return 0x821E5A58;  }
		/* 821E5A34h case   13:*/		return 0x821E5A38;
		  /* 821E5A38h */ case   14:  		/* li R11, 4 */
		/* 821E5A38h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 821E5A38h case   14:*/		return 0x821E5A3C;
		  /* 821E5A3Ch */ case   15:  		/* lfd FR0, <#[R20 + 8]> */
		/* 821E5A3Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R20 + 0x00000008) );
		/* 821E5A3Ch case   15:*/		return 0x821E5A40;
		  /* 821E5A40h */ case   16:  		/* fctiwz FR0, FR0 */
		/* 821E5A40h case   16:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 821E5A40h case   16:*/		return 0x821E5A44;
		  /* 821E5A44h */ case   17:  		/* li R10, 8 */
		/* 821E5A44h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x8);
		/* 821E5A44h case   17:*/		return 0x821E5A48;
		  /* 821E5A48h */ case   18:  		/* stfiwx FR0, <#[R3 + R11]> */
		/* 821E5A48h case   18:*/		cpu::mem::store32( regs, regs.FR0, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821E5A48h case   18:*/		return 0x821E5A4C;
		  /* 821E5A4Ch */ case   19:  		/* lfd FR0, <#[R20 + 40]> */
		/* 821E5A4Ch case   19:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R20 + 0x00000028) );
		/* 821E5A4Ch case   19:*/		return 0x821E5A50;
		  /* 821E5A50h */ case   20:  		/* fctiwz FR0, FR0 */
		/* 821E5A50h case   20:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 821E5A50h case   20:*/		return 0x821E5A54;
		  /* 821E5A54h */ case   21:  		/* stfiwx FR0, <#[R3 + R10]> */
		/* 821E5A54h case   21:*/		cpu::mem::store32( regs, regs.FR0, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 821E5A54h case   21:*/		return 0x821E5A58;
	}
	return 0x821E5A58;
} // Block from 821E5A00h-821E5A58h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821E5A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5A58);
		  /* 821E5A58h */ case    0:  		/* lwz R11, <#[R20 + 56]> */
		/* 821E5A58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000038) );
		/* 821E5A58h case    0:*/		return 0x821E5A5C;
		  /* 821E5A5Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E5A5Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E5A5Ch case    1:*/		return 0x821E5A60;
		  /* 821E5A60h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 821E5A60h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E5A6C;  }
		/* 821E5A60h case    2:*/		return 0x821E5A64;
		  /* 821E5A64h */ case    3:  		/* li R11, 0 */
		/* 821E5A64h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E5A64h case    3:*/		return 0x821E5A68;
		  /* 821E5A68h */ case    4:  		/* b 24 */
		/* 821E5A68h case    4:*/		return 0x821E5A80;
		/* 821E5A68h case    4:*/		return 0x821E5A6C;
	}
	return 0x821E5A6C;
} // Block from 821E5A58h-821E5A6Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E5A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5A6C);
		  /* 821E5A6Ch */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E5A6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E5A6Ch case    0:*/		return 0x821E5A70;
		  /* 821E5A70h */ case    1:  		/* rlwinm R11, R11, 0, 17, 31 */
		/* 821E5A70h case    1:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R11,regs.R11);
		/* 821E5A70h case    1:*/		return 0x821E5A74;
		  /* 821E5A74h */ case    2:  		/* b 12 */
		/* 821E5A74h case    2:*/		return 0x821E5A80;
		/* 821E5A74h case    2:*/		return 0x821E5A78;
	}
	return 0x821E5A78;
} // Block from 821E5A6Ch-821E5A78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E5A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5A78);
		  /* 821E5A78h */ case    0:  		/* lwz R11, <#[R21 + 36]> */
		/* 821E5A78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000024) );
		/* 821E5A78h case    0:*/		return 0x821E5A7C;
		  /* 821E5A7Ch */ case    1:  		/* rlwinm R11, R11, 22, 17, 31 */
		/* 821E5A7Ch case    1:*/		cpu::op::rlwinm<0,22,17,31>(regs,&regs.R11,regs.R11);
		/* 821E5A7Ch case    1:*/		return 0x821E5A80;
	}
	return 0x821E5A80;
} // Block from 821E5A78h-821E5A80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E5A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5A80);
		  /* 821E5A80h */ case    0:  		/* stw R11, <#[R3]> */
		/* 821E5A80h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821E5A80h case    0:*/		return 0x821E5A84;
		  /* 821E5A84h */ case    1:  		/* lwz R10, <#[R3 + 12]> */
		/* 821E5A84h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E5A84h case    1:*/		return 0x821E5A88;
		  /* 821E5A88h */ case    2:  		/* lwz R11, <#[R19 + 616]> */
		/* 821E5A88h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000268) );
		/* 821E5A88h case    2:*/		return 0x821E5A8C;
		  /* 821E5A8Ch */ case    3:  		/* subf R11, R11, R21 */
		/* 821E5A8Ch case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 821E5A8Ch case    3:*/		return 0x821E5A90;
		  /* 821E5A90h */ case    4:  		/* divw R11, R11, R18 */
		/* 821E5A90h case    4:*/		cpu::op::divw<0>(regs,&regs.R11,regs.R11,regs.R18);
		/* 821E5A90h case    4:*/		return 0x821E5A94;
		  /* 821E5A94h */ case    5:  		/* rlwimi R10, R11, 5, 22, 26 */
		/* 821E5A94h case    5:*/		cpu::op::rlwimi<0,5,22,26>(regs,&regs.R10,regs.R11);
		/* 821E5A94h case    5:*/		return 0x821E5A98;
		  /* 821E5A98h */ case    6:  		/* stw R10, <#[R3 + 12]> */
		/* 821E5A98h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E5A98h case    6:*/		return 0x821E5A9C;
		  /* 821E5A9Ch */ case    7:  		/* lwz R11, <#[R21 + 12]> */
		/* 821E5A9Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821E5A9Ch case    7:*/		return 0x821E5AA0;
		  /* 821E5AA0h */ case    8:  		/* lwz R11, <#[R11 + 12]> */
		/* 821E5AA0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E5AA0h case    8:*/		return 0x821E5AA4;
		  /* 821E5AA4h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821E5AA4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E5AA4h case    9:*/		return 0x821E5AA8;
		  /* 821E5AA8h */ case   10:  		/* bc 12, CR6_EQ, 60 */
		/* 821E5AA8h case   10:*/		if ( regs.CR[6].eq ) { return 0x821E5AE4;  }
		/* 821E5AA8h case   10:*/		return 0x821E5AAC;
		  /* 821E5AACh */ case   11:  		/* lwz R10, <#[R19 + 616]> */
		/* 821E5AACh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000268) );
		/* 821E5AACh case   11:*/		return 0x821E5AB0;
		  /* 821E5AB0h */ case   12:  		/* lwz R22, <#[R11]> */
		/* 821E5AB0h case   12:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 821E5AB0h case   12:*/		return 0x821E5AB4;
		  /* 821E5AB4h */ case   13:  		/* subf R10, R10, R21 */
		/* 821E5AB4h case   13:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R21);
		/* 821E5AB4h case   13:*/		return 0x821E5AB8;
		  /* 821E5AB8h */ case   14:  		/* divw R9, R10, R18 */
		/* 821E5AB8h case   14:*/		cpu::op::divw<0>(regs,&regs.R9,regs.R10,regs.R18);
		/* 821E5AB8h case   14:*/		return 0x821E5ABC;
		  /* 821E5ABCh */ case   15:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 821E5ABCh case   15:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 821E5ABCh case   15:*/		return 0x821E5AC0;
		  /* 821E5AC0h */ case   16:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821E5AC0h case   16:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821E5AC0h case   16:*/		return 0x821E5AC4;
		  /* 821E5AC4h */ case   17:  		/* addi R10, R10, 21 */
		/* 821E5AC4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821E5AC4h case   17:*/		return 0x821E5AC8;
		  /* 821E5AC8h */ case   18:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E5AC8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E5AC8h case   18:*/		return 0x821E5ACC;
		  /* 821E5ACCh */ case   19:  		/* lwzx R10, <#[R10 + R22]> */
		/* 821E5ACCh case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R22 + 0x00000000) );
		/* 821E5ACCh case   19:*/		return 0x821E5AD0;
		  /* 821E5AD0h */ case   20:  		/* srw R10, R10, R9 */
		/* 821E5AD0h case   20:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821E5AD0h case   20:*/		return 0x821E5AD4;
		  /* 821E5AD4h */ case   21:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E5AD4h case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E5AD4h case   21:*/		return 0x821E5AD8;
		  /* 821E5AD8h */ case   22:  		/* bc 12, CR0_EQ, 16 */
		/* 821E5AD8h case   22:*/		if ( regs.CR[0].eq ) { return 0x821E5AE8;  }
		/* 821E5AD8h case   22:*/		return 0x821E5ADC;
		  /* 821E5ADCh */ case   23:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E5ADCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E5ADCh case   23:*/		return 0x821E5AE0;
		  /* 821E5AE0h */ case   24:  		/* b -60 */
		/* 821E5AE0h case   24:*/		return 0x821E5AA4;
		/* 821E5AE0h case   24:*/		return 0x821E5AE4;
	}
	return 0x821E5AE4;
} // Block from 821E5A80h-821E5AE4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821E5AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5AE4);
		  /* 821E5AE4h */ case    0:  		/* li R22, 0 */
		/* 821E5AE4h case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821E5AE4h case    0:*/		return 0x821E5AE8;
	}
	return 0x821E5AE8;
} // Block from 821E5AE4h-821E5AE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E5AE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5AE8);
		  /* 821E5AE8h */ case    0:  		/* stw R22, <#[R3 + 16]> */
		/* 821E5AE8h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000010) );
		/* 821E5AE8h case    0:*/		return 0x821E5AEC;
		  /* 821E5AECh */ case    1:  		/* cmplwi CR6, R20, 0 */
		/* 821E5AECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821E5AECh case    1:*/		return 0x821E5AF0;
		  /* 821E5AF0h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 821E5AF0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E5B18;  }
		/* 821E5AF0h case    2:*/		return 0x821E5AF4;
		  /* 821E5AF4h */ case    3:  		/* lwz R11, <#[R20 + 56]> */
		/* 821E5AF4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000038) );
		/* 821E5AF4h case    3:*/		return 0x821E5AF8;
		  /* 821E5AF8h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E5AF8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E5AF8h case    4:*/		return 0x821E5AFC;
		  /* 821E5AFCh */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821E5AFCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821E5B18;  }
		/* 821E5AFCh case    5:*/		return 0x821E5B00;
		  /* 821E5B00h */ case    6:  		/* mr R3, R19 */
		/* 821E5B00h case    6:*/		regs.R3 = regs.R19;
		/* 821E5B00h case    6:*/		return 0x821E5B04;
		  /* 821E5B04h */ case    7:  		/* rlwinm R4, R11, 0, 0, 31 */
		/* 821E5B04h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R11);
		/* 821E5B04h case    7:*/		return 0x821E5B08;
		  /* 821E5B08h */ case    8:  		/* bl -449288 */
		/* 821E5B08h case    8:*/		regs.LR = 0x821E5B0C; return 0x82178000;
		/* 821E5B08h case    8:*/		return 0x821E5B0C;
		  /* 821E5B0Ch */ case    9:  		/* mr R4, R3 */
		/* 821E5B0Ch case    9:*/		regs.R4 = regs.R3;
		/* 821E5B0Ch case    9:*/		return 0x821E5B10;
		  /* 821E5B10h */ case   10:  		/* mr R3, R23 */
		/* 821E5B10h case   10:*/		regs.R3 = regs.R23;
		/* 821E5B10h case   10:*/		return 0x821E5B14;
		  /* 821E5B14h */ case   11:  		/* bl -448844 */
		/* 821E5B14h case   11:*/		regs.LR = 0x821E5B18; return 0x821781C8;
		/* 821E5B14h case   11:*/		return 0x821E5B18;
	}
	return 0x821E5B18;
} // Block from 821E5AE8h-821E5B18h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E5B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5B18);
		  /* 821E5B18h */ case    0:  		/* lwz R29, <#[R21 + 40]> */
		/* 821E5B18h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R21 + 0x00000028) );
		/* 821E5B18h case    0:*/		return 0x821E5B1C;
		  /* 821E5B1Ch */ case    1:  		/* li R27, 0 */
		/* 821E5B1Ch case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821E5B1Ch case    1:*/		return 0x821E5B20;
		  /* 821E5B20h */ case    2:  		/* b 896 */
		/* 821E5B20h case    2:*/		return 0x821E5EA0;
		/* 821E5B20h case    2:*/		return 0x821E5B24;
		  /* 821E5B24h */ case    3:  		/* lwz R11, <#[R29]> */
		/* 821E5B24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E5B24h case    3:*/		return 0x821E5B28;
		  /* 821E5B28h */ case    4:  		/* lwz R10, <#[R21 + 8]> */
		/* 821E5B28h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000008) );
		/* 821E5B28h case    4:*/		return 0x821E5B2C;
		  /* 821E5B2Ch */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 821E5B2Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E5B2Ch case    5:*/		return 0x821E5B30;
		  /* 821E5B30h */ case    6:  		/* extsw R11, R11 */
		/* 821E5B30h case    6:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E5B30h case    6:*/		return 0x821E5B34;
		  /* 821E5B34h */ case    7:  		/* bc 4, CR6_EQ, 404 */
		/* 821E5B34h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821E5CC8;  }
		/* 821E5B34h case    7:*/		return 0x821E5B38;
		  /* 821E5B38h */ case    8:  		/* lwz R10, <#[R11 + 36]> */
		/* 821E5B38h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821E5B38h case    8:*/		return 0x821E5B3C;
		  /* 821E5B3Ch */ case    9:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E5B3Ch case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E5B3Ch case    9:*/		return 0x821E5B40;
		  /* 821E5B40h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 821E5B40h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E5B4C;  }
		/* 821E5B40h case   10:*/		return 0x821E5B44;
		  /* 821E5B44h */ case   11:  		/* li R28, 0 */
		/* 821E5B44h case   11:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821E5B44h case   11:*/		return 0x821E5B48;
		  /* 821E5B48h */ case   12:  		/* b 16 */
		/* 821E5B48h case   12:*/		return 0x821E5B58;
		/* 821E5B48h case   12:*/		return 0x821E5B4C;
	}
	return 0x821E5B4C;
} // Block from 821E5B18h-821E5B4Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E5B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5B4C);
		  /* 821E5B4Ch */ case    0:  		/* lwz R11, <#[R11 + 32]> */
		/* 821E5B4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821E5B4Ch case    0:*/		return 0x821E5B50;
		  /* 821E5B50h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E5B50h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E5B50h case    1:*/		return 0x821E5B54;
		  /* 821E5B54h */ case    2:  		/* addi R28, R11, -40 */
		/* 821E5B54h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFD8);
		/* 821E5B54h case    2:*/		return 0x821E5B58;
	}
	return 0x821E5B58;
} // Block from 821E5B4Ch-821E5B58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E5B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5B58);
		  /* 821E5B58h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 821E5B58h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821E5B58h case    0:*/		return 0x821E5B5C;
		  /* 821E5B5Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821E5B5Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821E5B74;  }
		/* 821E5B5Ch case    1:*/		return 0x821E5B60;
		  /* 821E5B60h */ case    2:  		/* lwz R11, <#[R20]> */
		/* 821E5B60h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821E5B60h case    2:*/		return 0x821E5B64;
		  /* 821E5B64h */ case    3:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 821E5B64h case    3:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 821E5B64h case    3:*/		return 0x821E5B68;
		  /* 821E5B68h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 821E5B68h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E5B74;  }
		/* 821E5B68h case    4:*/		return 0x821E5B6C;
		  /* 821E5B6Ch */ case    5:  		/* li R31, 0 */
		/* 821E5B6Ch case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821E5B6Ch case    5:*/		return 0x821E5B70;
		  /* 821E5B70h */ case    6:  		/* b 132 */
		/* 821E5B70h case    6:*/		return 0x821E5BF4;
		/* 821E5B70h case    6:*/		return 0x821E5B74;
	}
	return 0x821E5B74;
} // Block from 821E5B58h-821E5B74h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E5B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5B74);
		  /* 821E5B74h */ case    0:  		/* lwz R11, <#[R19 + 616]> */
		/* 821E5B74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000268) );
		/* 821E5B74h case    0:*/		return 0x821E5B78;
		  /* 821E5B78h */ case    1:  		/* mr R4, R19 */
		/* 821E5B78h case    1:*/		regs.R4 = regs.R19;
		/* 821E5B78h case    1:*/		return 0x821E5B7C;
		  /* 821E5B7Ch */ case    2:  		/* lwz R10, <#[R28 + 8]> */
		/* 821E5B7Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821E5B7Ch case    2:*/		return 0x821E5B80;
		  /* 821E5B80h */ case    3:  		/* mr R3, R28 */
		/* 821E5B80h case    3:*/		regs.R3 = regs.R28;
		/* 821E5B80h case    3:*/		return 0x821E5B84;
		  /* 821E5B84h */ case    4:  		/* subf R11, R11, R21 */
		/* 821E5B84h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 821E5B84h case    4:*/		return 0x821E5B88;
		  /* 821E5B88h */ case    5:  		/* rlwinm R31, R10, 14, 31, 31 */
		/* 821E5B88h case    5:*/		cpu::op::rlwinm<0,14,31,31>(regs,&regs.R31,regs.R10);
		/* 821E5B88h case    5:*/		return 0x821E5B8C;
		  /* 821E5B8Ch */ case    6:  		/* divw R30, R11, R18 */
		/* 821E5B8Ch case    6:*/		cpu::op::divw<0>(regs,&regs.R30,regs.R11,regs.R18);
		/* 821E5B8Ch case    6:*/		return 0x821E5B90;
		  /* 821E5B90h */ case    7:  		/* bl -529488 */
		/* 821E5B90h case    7:*/		regs.LR = 0x821E5B94; return 0x82164740;
		/* 821E5B90h case    7:*/		return 0x821E5B94;
		  /* 821E5B94h */ case    8:  		/* rlwinm R11, R30, 27, 5, 31 */
		/* 821E5B94h case    8:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R30);
		/* 821E5B94h case    8:*/		return 0x821E5B98;
		  /* 821E5B98h */ case    9:  		/* lwz R10, <#[R3]> */
		/* 821E5B98h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821E5B98h case    9:*/		return 0x821E5B9C;
		  /* 821E5B9Ch */ case   10:  		/* rlwinm R9, R30, 0, 27, 31 */
		/* 821E5B9Ch case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R30);
		/* 821E5B9Ch case   10:*/		return 0x821E5BA0;
		  /* 821E5BA0h */ case   11:  		/* addi R11, R11, 21 */
		/* 821E5BA0h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E5BA0h case   11:*/		return 0x821E5BA4;
		  /* 821E5BA4h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E5BA4h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E5BA4h case   12:*/		return 0x821E5BA8;
		  /* 821E5BA8h */ case   13:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821E5BA8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821E5BA8h case   13:*/		return 0x821E5BAC;
		  /* 821E5BACh */ case   14:  		/* srw R11, R11, R9 */
		/* 821E5BACh case   14:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E5BACh case   14:*/		return 0x821E5BB0;
		  /* 821E5BB0h */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E5BB0h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E5BB0h case   15:*/		return 0x821E5BB4;
		  /* 821E5BB4h */ case   16:  		/* bc 4, CR0_EQ, 16 */
		/* 821E5BB4h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821E5BC4;  }
		/* 821E5BB4h case   16:*/		return 0x821E5BB8;
		  /* 821E5BB8h */ case   17:  		/* rlwinm R11, R31, 0, 24, 31 */
		/* 821E5BB8h case   17:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R31);
		/* 821E5BB8h case   17:*/		return 0x821E5BBC;
		  /* 821E5BBCh */ case   18:  		/* cntlzw R11, R11 */
		/* 821E5BBCh case   18:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821E5BBCh case   18:*/		return 0x821E5BC0;
		  /* 821E5BC0h */ case   19:  		/* rlwinm R31, R11, 27, 31, 31 */
		/* 821E5BC0h case   19:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R31,regs.R11);
		/* 821E5BC0h case   19:*/		return 0x821E5BC4;
	}
	return 0x821E5BC4;
} // Block from 821E5B74h-821E5BC4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821E5BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5BC4);
		  /* 821E5BC4h */ case    0:  		/* rlwinm. R11, R31, 0, 24, 31 */
		/* 821E5BC4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R31);
		/* 821E5BC4h case    0:*/		return 0x821E5BC8;
		  /* 821E5BC8h */ case    1:  		/* lwz R31, <#[R28 + 44]> */
		/* 821E5BC8h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x0000002C) );
		/* 821E5BC8h case    1:*/		return 0x821E5BCC;
		  /* 821E5BCCh */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821E5BCCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E5BF4;  }
		/* 821E5BCCh case    2:*/		return 0x821E5BD0;
		  /* 821E5BD0h */ case    3:  		/* mr R4, R19 */
		/* 821E5BD0h case    3:*/		regs.R4 = regs.R19;
		/* 821E5BD0h case    3:*/		return 0x821E5BD4;
		  /* 821E5BD4h */ case    4:  		/* lwz R3, <#[R31 + 12]> */
		/* 821E5BD4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E5BD4h case    4:*/		return 0x821E5BD8;
		  /* 821E5BD8h */ case    5:  		/* bl 276000 */
		/* 821E5BD8h case    5:*/		regs.LR = 0x821E5BDC; return 0x822291F8;
		/* 821E5BD8h case    5:*/		return 0x821E5BDC;
		  /* 821E5BDCh */ case    6:  		/* or. R4, R3, R3 */
		/* 821E5BDCh case    6:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 821E5BDCh case    6:*/		return 0x821E5BE0;
		  /* 821E5BE0h */ case    7:  		/* mr R3, R19 */
		/* 821E5BE0h case    7:*/		regs.R3 = regs.R19;
		/* 821E5BE0h case    7:*/		return 0x821E5BE4;
		  /* 821E5BE4h */ case    8:  		/* bc 12, CR0_EQ, 3700 */
		/* 821E5BE4h case    8:*/		if ( regs.CR[0].eq ) { return 0x821E6A58;  }
		/* 821E5BE4h case    8:*/		return 0x821E5BE8;
		  /* 821E5BE8h */ case    9:  		/* li R5, 7 */
		/* 821E5BE8h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 821E5BE8h case    9:*/		return 0x821E5BEC;
		  /* 821E5BECh */ case   10:  		/* bl -480412 */
		/* 821E5BECh case   10:*/		regs.LR = 0x821E5BF0; return 0x82170750;
		/* 821E5BECh case   10:*/		return 0x821E5BF0;
		  /* 821E5BF0h */ case   11:  		/* mr R31, R3 */
		/* 821E5BF0h case   11:*/		regs.R31 = regs.R3;
		/* 821E5BF0h case   11:*/		return 0x821E5BF4;
	}
	return 0x821E5BF4;
} // Block from 821E5BC4h-821E5BF4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E5BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5BF4);
		  /* 821E5BF4h */ case    0:  		/* lwz R4, <#[R29]> */
		/* 821E5BF4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 821E5BF4h case    0:*/		return 0x821E5BF8;
		  /* 821E5BF8h */ case    1:  		/* li R8, 0 */
		/* 821E5BF8h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E5BF8h case    1:*/		return 0x821E5BFC;
		  /* 821E5BFCh */ case    2:  		/* li R7, 0 */
		/* 821E5BFCh case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E5BFCh case    2:*/		return 0x821E5C00;
		  /* 821E5C00h */ case    3:  		/* addi R5, R4, 32 */
		/* 821E5C00h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 821E5C00h case    3:*/		return 0x821E5C04;
		  /* 821E5C04h */ case    4:  		/* li R6, 85 */
		/* 821E5C04h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x55);
		/* 821E5C04h case    4:*/		return 0x821E5C08;
		  /* 821E5C08h */ case    5:  		/* mr R3, R19 */
		/* 821E5C08h case    5:*/		regs.R3 = regs.R19;
		/* 821E5C08h case    5:*/		return 0x821E5C0C;
		  /* 821E5C0Ch */ case    6:  		/* bl 257420 */
		/* 821E5C0Ch case    6:*/		regs.LR = 0x821E5C10; return 0x82224998;
		/* 821E5C0Ch case    6:*/		return 0x821E5C10;
		  /* 821E5C10h */ case    7:  		/* mr R30, R3 */
		/* 821E5C10h case    7:*/		regs.R30 = regs.R3;
		/* 821E5C10h case    7:*/		return 0x821E5C14;
		  /* 821E5C14h */ case    8:  		/* cmplwi CR6, R31, 0 */
		/* 821E5C14h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E5C14h case    8:*/		return 0x821E5C18;
		  /* 821E5C18h */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 821E5C18h case    9:*/		if ( regs.CR[6].eq ) { return 0x821E5C30;  }
		/* 821E5C18h case    9:*/		return 0x821E5C1C;
		  /* 821E5C1Ch */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E5C1Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E5C1Ch case   10:*/		return 0x821E5C20;
		  /* 821E5C20h */ case   11:  		/* mr R4, R31 */
		/* 821E5C20h case   11:*/		regs.R4 = regs.R31;
		/* 821E5C20h case   11:*/		return 0x821E5C24;
		  /* 821E5C24h */ case   12:  		/* oris R11, R11, 6 */
		/* 821E5C24h case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6);
		/* 821E5C24h case   12:*/		return 0x821E5C28;
		  /* 821E5C28h */ case   13:  		/* stw R11, <#[R3 + 8]> */
		/* 821E5C28h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E5C28h case   13:*/		return 0x821E5C2C;
		  /* 821E5C2Ch */ case   14:  		/* bl -449124 */
		/* 821E5C2Ch case   14:*/		regs.LR = 0x821E5C30; return 0x821781C8;
		/* 821E5C2Ch case   14:*/		return 0x821E5C30;
	}
	return 0x821E5C30;
} // Block from 821E5BF4h-821E5C30h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821E5C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5C30);
		  /* 821E5C30h */ case    0:  		/* mr R4, R19 */
		/* 821E5C30h case    0:*/		regs.R4 = regs.R19;
		/* 821E5C30h case    0:*/		return 0x821E5C34;
		  /* 821E5C34h */ case    1:  		/* mr R3, R30 */
		/* 821E5C34h case    1:*/		regs.R3 = regs.R30;
		/* 821E5C34h case    1:*/		return 0x821E5C38;
		  /* 821E5C38h */ case    2:  		/* bl -302840 */
		/* 821E5C38h case    2:*/		regs.LR = 0x821E5C3C; return 0x8219BD40;
		/* 821E5C38h case    2:*/		return 0x821E5C3C;
		  /* 821E5C3Ch */ case    3:  		/* mr R11, R3 */
		/* 821E5C3Ch case    3:*/		regs.R11 = regs.R3;
		/* 821E5C3Ch case    3:*/		return 0x821E5C40;
		  /* 821E5C40h */ case    4:  		/* mr R4, R19 */
		/* 821E5C40h case    4:*/		regs.R4 = regs.R19;
		/* 821E5C40h case    4:*/		return 0x821E5C44;
		  /* 821E5C44h */ case    5:  		/* mr R3, R28 */
		/* 821E5C44h case    5:*/		regs.R3 = regs.R28;
		/* 821E5C44h case    5:*/		return 0x821E5C48;
		  /* 821E5C48h */ case    6:  		/* stw R23, <#[R11]> */
		/* 821E5C48h case    6:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000000) );
		/* 821E5C48h case    6:*/		return 0x821E5C4C;
		  /* 821E5C4Ch */ case    7:  		/* lwz R10, <#[R21 + 4]> */
		/* 821E5C4Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000004) );
		/* 821E5C4Ch case    7:*/		return 0x821E5C50;
		  /* 821E5C50h */ case    8:  		/* stw R10, <#[R11 + 4]> */
		/* 821E5C50h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E5C50h case    8:*/		return 0x821E5C54;
		  /* 821E5C54h */ case    9:  		/* bl -529684 */
		/* 821E5C54h case    9:*/		regs.LR = 0x821E5C58; return 0x82164740;
		/* 821E5C54h case    9:*/		return 0x821E5C58;
		  /* 821E5C58h */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E5C58h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E5C58h case   10:*/		return 0x821E5C5C;
		  /* 821E5C5Ch */ case   11:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 821E5C5Ch case   11:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 821E5C5Ch case   11:*/		return 0x821E5C60;
		  /* 821E5C60h */ case   12:  		/* bc 4, CR0_EQ, 16 */
		/* 821E5C60h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821E5C70;  }
		/* 821E5C60h case   12:*/		return 0x821E5C64;
		  /* 821E5C64h */ case   13:  		/* rlwinm R9, R11, 30, 28, 31 */
		/* 821E5C64h case   13:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R9,regs.R11);
		/* 821E5C64h case   13:*/		return 0x821E5C68;
		  /* 821E5C68h */ case   14:  		/* cmpwi CR6, R9, 7 */
		/* 821E5C68h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000007);
		/* 821E5C68h case   14:*/		return 0x821E5C6C;
		  /* 821E5C6Ch */ case   15:  		/* bc 4, CR6_EQ, 48 */
		/* 821E5C6Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x821E5C9C;  }
		/* 821E5C6Ch case   15:*/		return 0x821E5C70;
	}
	return 0x821E5C70;
} // Block from 821E5C30h-821E5C70h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E5C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5C70);
		  /* 821E5C70h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821E5C70h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E5C70h case    0:*/		return 0x821E5C74;
		  /* 821E5C74h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821E5C74h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E5C80;  }
		/* 821E5C74h case    1:*/		return 0x821E5C78;
		  /* 821E5C78h */ case    2:  		/* mr R11, R17 */
		/* 821E5C78h case    2:*/		regs.R11 = regs.R17;
		/* 821E5C78h case    2:*/		return 0x821E5C7C;
		  /* 821E5C7Ch */ case    3:  		/* b 12 */
		/* 821E5C7Ch case    3:*/		return 0x821E5C88;
		/* 821E5C7Ch case    3:*/		return 0x821E5C80;
	}
	return 0x821E5C80;
} // Block from 821E5C70h-821E5C80h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E5C80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5C80);
		  /* 821E5C80h */ case    0:  		/* nor R11, R11, R11 */
		/* 821E5C80h case    0:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821E5C80h case    0:*/		return 0x821E5C84;
		  /* 821E5C84h */ case    1:  		/* rlwinm R11, R11, 25, 31, 31 */
		/* 821E5C84h case    1:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R11,regs.R11);
		/* 821E5C84h case    1:*/		return 0x821E5C88;
	}
	return 0x821E5C88;
} // Block from 821E5C80h-821E5C88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E5C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5C88);
		  /* 821E5C88h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E5C88h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E5C88h case    0:*/		return 0x821E5C8C;
		  /* 821E5C8Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821E5C8Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821E5C9C;  }
		/* 821E5C8Ch case    1:*/		return 0x821E5C90;
		  /* 821E5C90h */ case    2:  		/* li R4, 3591 */
		/* 821E5C90h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xE07);
		/* 821E5C90h case    2:*/		return 0x821E5C94;
		  /* 821E5C94h */ case    3:  		/* mr R3, R19 */
		/* 821E5C94h case    3:*/		regs.R3 = regs.R19;
		/* 821E5C94h case    3:*/		return 0x821E5C98;
		  /* 821E5C98h */ case    4:  		/* bl -605984 */
		/* 821E5C98h case    4:*/		regs.LR = 0x821E5C9C; return 0x82151D78;
		/* 821E5C98h case    4:*/		return 0x821E5C9C;
	}
	return 0x821E5C9C;
} // Block from 821E5C88h-821E5C9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E5C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5C9C);
		  /* 821E5C9Ch */ case    0:  		/* mr R4, R28 */
		/* 821E5C9Ch case    0:*/		regs.R4 = regs.R28;
		/* 821E5C9Ch case    0:*/		return 0x821E5CA0;
		  /* 821E5CA0h */ case    1:  		/* mr R3, R19 */
		/* 821E5CA0h case    1:*/		regs.R3 = regs.R19;
		/* 821E5CA0h case    1:*/		return 0x821E5CA4;
		  /* 821E5CA4h */ case    2:  		/* bl 285100 */
		/* 821E5CA4h case    2:*/		regs.LR = 0x821E5CA8; return 0x8222B650;
		/* 821E5CA4h case    2:*/		return 0x821E5CA8;
		  /* 821E5CA8h */ case    3:  		/* lwz R11, <#[R21 + 36]> */
		/* 821E5CA8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000024) );
		/* 821E5CA8h case    3:*/		return 0x821E5CAC;
		  /* 821E5CACh */ case    4:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 821E5CACh case    4:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 821E5CACh case    4:*/		return 0x821E5CB0;
		  /* 821E5CB0h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 821E5CB0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821E5CC0;  }
		/* 821E5CB0h case    5:*/		return 0x821E5CB4;
		  /* 821E5CB4h */ case    6:  		/* lwz R11, <#[R30 + 8]> */
		/* 821E5CB4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E5CB4h case    6:*/		return 0x821E5CB8;
		  /* 821E5CB8h */ case    7:  		/* oris R11, R11, 2048 */
		/* 821E5CB8h case    7:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 821E5CB8h case    7:*/		return 0x821E5CBC;
		  /* 821E5CBCh */ case    8:  		/* stw R11, <#[R30 + 8]> */
		/* 821E5CBCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E5CBCh case    8:*/		return 0x821E5CC0;
	}
	return 0x821E5CC0;
} // Block from 821E5C9Ch-821E5CC0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E5CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5CC0);
		  /* 821E5CC0h */ case    0:  		/* mr R27, R17 */
		/* 821E5CC0h case    0:*/		regs.R27 = regs.R17;
		/* 821E5CC0h case    0:*/		return 0x821E5CC4;
		  /* 821E5CC4h */ case    1:  		/* b 472 */
		/* 821E5CC4h case    1:*/		return 0x821E5E9C;
		/* 821E5CC4h case    1:*/		return 0x821E5CC8;
	}
	return 0x821E5CC8;
} // Block from 821E5CC0h-821E5CC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E5CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5CC8);
		  /* 821E5CC8h */ case    0:  		/* lwz R10, <#[R11 + 12]> */
		/* 821E5CC8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E5CC8h case    0:*/		return 0x821E5CCC;
		  /* 821E5CCCh */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821E5CCCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E5CCCh case    1:*/		return 0x821E5CD0;
		  /* 821E5CD0h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 821E5CD0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E5D0C;  }
		/* 821E5CD0h case    2:*/		return 0x821E5CD4;
		  /* 821E5CD4h */ case    3:  		/* lwz R11, <#[R19 + 616]> */
		/* 821E5CD4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000268) );
		/* 821E5CD4h case    3:*/		return 0x821E5CD8;
		  /* 821E5CD8h */ case    4:  		/* lwz R30, <#[R10]> */
		/* 821E5CD8h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000000) );
		/* 821E5CD8h case    4:*/		return 0x821E5CDC;
		  /* 821E5CDCh */ case    5:  		/* subf R11, R11, R21 */
		/* 821E5CDCh case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 821E5CDCh case    5:*/		return 0x821E5CE0;
		  /* 821E5CE0h */ case    6:  		/* divw R9, R11, R18 */
		/* 821E5CE0h case    6:*/		cpu::op::divw<0>(regs,&regs.R9,regs.R11,regs.R18);
		/* 821E5CE0h case    6:*/		return 0x821E5CE4;
		  /* 821E5CE4h */ case    7:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821E5CE4h case    7:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821E5CE4h case    7:*/		return 0x821E5CE8;
		  /* 821E5CE8h */ case    8:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821E5CE8h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821E5CE8h case    8:*/		return 0x821E5CEC;
		  /* 821E5CECh */ case    9:  		/* addi R11, R11, 21 */
		/* 821E5CECh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E5CECh case    9:*/		return 0x821E5CF0;
		  /* 821E5CF0h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E5CF0h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E5CF0h case   10:*/		return 0x821E5CF4;
		  /* 821E5CF4h */ case   11:  		/* lwzx R11, <#[R11 + R30]> */
		/* 821E5CF4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821E5CF4h case   11:*/		return 0x821E5CF8;
		  /* 821E5CF8h */ case   12:  		/* srw R11, R11, R9 */
		/* 821E5CF8h case   12:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E5CF8h case   12:*/		return 0x821E5CFC;
		  /* 821E5CFCh */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E5CFCh case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E5CFCh case   13:*/		return 0x821E5D00;
		  /* 821E5D00h */ case   14:  		/* bc 12, CR0_EQ, 16 */
		/* 821E5D00h case   14:*/		if ( regs.CR[0].eq ) { return 0x821E5D10;  }
		/* 821E5D00h case   14:*/		return 0x821E5D04;
		  /* 821E5D04h */ case   15:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E5D04h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E5D04h case   15:*/		return 0x821E5D08;
		  /* 821E5D08h */ case   16:  		/* b -60 */
		/* 821E5D08h case   16:*/		return 0x821E5CCC;
		/* 821E5D08h case   16:*/		return 0x821E5D0C;
	}
	return 0x821E5D0C;
} // Block from 821E5CC8h-821E5D0Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E5D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5D0C);
		  /* 821E5D0Ch */ case    0:  		/* li R30, 0 */
		/* 821E5D0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821E5D0Ch case    0:*/		return 0x821E5D10;
	}
	return 0x821E5D10;
} // Block from 821E5D0Ch-821E5D10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E5D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5D10);
		  /* 821E5D10h */ case    0:  		/* mr R3, R19 */
		/* 821E5D10h case    0:*/		regs.R3 = regs.R19;
		/* 821E5D10h case    0:*/		return 0x821E5D14;
		  /* 821E5D14h */ case    1:  		/* bl -495068 */
		/* 821E5D14h case    1:*/		regs.LR = 0x821E5D18; return 0x8216CF38;
		/* 821E5D14h case    1:*/		return 0x821E5D18;
		  /* 821E5D18h */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821E5D18h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E5D18h case    2:*/		return 0x821E5D1C;
		  /* 821E5D1Ch */ case    3:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821E5D1Ch case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821E5D1Ch case    3:*/		return 0x821E5D20;
		  /* 821E5D20h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E5D20h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E5D20h case    4:*/		return 0x821E5D24;
		  /* 821E5D24h */ case    5:  		/* addi R8, R10, 4 */
		/* 821E5D24h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821E5D24h case    5:*/		return 0x821E5D28;
		  /* 821E5D28h */ case    6:  		/* addi R9, R11, 4 */
		/* 821E5D28h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821E5D28h case    6:*/		return 0x821E5D2C;
		  /* 821E5D2Ch */ case    7:  		/* mr R5, R19 */
		/* 821E5D2Ch case    7:*/		regs.R5 = regs.R19;
		/* 821E5D2Ch case    7:*/		return 0x821E5D30;
		  /* 821E5D30h */ case    8:  		/* mr R4, R30 */
		/* 821E5D30h case    8:*/		regs.R4 = regs.R30;
		/* 821E5D30h case    8:*/		return 0x821E5D34;
		  /* 821E5D34h */ case    9:  		/* lwz R7, <#[R11 + 4]> */
		/* 821E5D34h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821E5D34h case    9:*/		return 0x821E5D38;
		  /* 821E5D38h */ case   10:  		/* mr R31, R3 */
		/* 821E5D38h case   10:*/		regs.R31 = regs.R3;
		/* 821E5D38h case   10:*/		return 0x821E5D3C;
		  /* 821E5D3Ch */ case   11:  		/* stw R7, <#[R10 + 4]> */
		/* 821E5D3Ch case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821E5D3Ch case   11:*/		return 0x821E5D40;
		  /* 821E5D40h */ case   12:  		/* lwz R7, <#[R11 + 4]> */
		/* 821E5D40h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821E5D40h case   12:*/		return 0x821E5D44;
		  /* 821E5D44h */ case   13:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821E5D44h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821E5D44h case   13:*/		return 0x821E5D48;
		  /* 821E5D48h */ case   14:  		/* stw R8, <#[R7]> */
		/* 821E5D48h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 821E5D48h case   14:*/		return 0x821E5D4C;
		  /* 821E5D4Ch */ case   15:  		/* stw R9, <#[R10]> */
		/* 821E5D4Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E5D4Ch case   15:*/		return 0x821E5D50;
		  /* 821E5D50h */ case   16:  		/* stw R10, <#[R11 + 4]> */
		/* 821E5D50h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E5D50h case   16:*/		return 0x821E5D54;
		  /* 821E5D54h */ case   17:  		/* lwz R3, <#[R29]> */
		/* 821E5D54h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 821E5D54h case   17:*/		return 0x821E5D58;
		  /* 821E5D58h */ case   18:  		/* bl 302096 */
		/* 821E5D58h case   18:*/		regs.LR = 0x821E5D5C; return 0x8222F968;
		/* 821E5D58h case   18:*/		return 0x821E5D5C;
		  /* 821E5D5Ch */ case   19:  		/* mr R4, R31 */
		/* 821E5D5Ch case   19:*/		regs.R4 = regs.R31;
		/* 821E5D5Ch case   19:*/		return 0x821E5D60;
		  /* 821E5D60h */ case   20:  		/* lwz R3, <#[R29]> */
		/* 821E5D60h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 821E5D60h case   20:*/		return 0x821E5D64;
		  /* 821E5D64h */ case   21:  		/* mr R5, R19 */
		/* 821E5D64h case   21:*/		regs.R5 = regs.R19;
		/* 821E5D64h case   21:*/		return 0x821E5D68;
		  /* 821E5D68h */ case   22:  		/* bl 302456 */
		/* 821E5D68h case   22:*/		regs.LR = 0x821E5D6C; return 0x8222FAE0;
		/* 821E5D68h case   22:*/		return 0x821E5D6C;
		  /* 821E5D6Ch */ case   23:  		/* mr R3, R31 */
		/* 821E5D6Ch case   23:*/		regs.R3 = regs.R31;
		/* 821E5D6Ch case   23:*/		return 0x821E5D70;
		  /* 821E5D70h */ case   24:  		/* mr R5, R19 */
		/* 821E5D70h case   24:*/		regs.R5 = regs.R19;
		/* 821E5D70h case   24:*/		return 0x821E5D74;
		  /* 821E5D74h */ case   25:  		/* mr R4, R30 */
		/* 821E5D74h case   25:*/		regs.R4 = regs.R30;
		/* 821E5D74h case   25:*/		return 0x821E5D78;
		  /* 821E5D78h */ case   26:  		/* bl 302440 */
		/* 821E5D78h case   26:*/		regs.LR = 0x821E5D7C; return 0x8222FAE0;
		/* 821E5D78h case   26:*/		return 0x821E5D7C;
		  /* 821E5D7Ch */ case   27:  		/* lwz R11, <#[R21 + 4]> */
		/* 821E5D7Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821E5D7Ch case   27:*/		return 0x821E5D80;
		  /* 821E5D80h */ case   28:  		/* mr R6, R21 */
		/* 821E5D80h case   28:*/		regs.R6 = regs.R21;
		/* 821E5D80h case   28:*/		return 0x821E5D84;
		  /* 821E5D84h */ case   29:  		/* stb R17, <#[R1 + 128]> */
		/* 821E5D84h case   29:*/		cpu::mem::store8( regs, regs.R17, (uint32)(regs.R1 + 0x00000080) );
		/* 821E5D84h case   29:*/		return 0x821E5D88;
		  /* 821E5D88h */ case   30:  		/* mr R5, R23 */
		/* 821E5D88h case   30:*/		regs.R5 = regs.R23;
		/* 821E5D88h case   30:*/		return 0x821E5D8C;
		  /* 821E5D8Ch */ case   31:  		/* mr R3, R19 */
		/* 821E5D8Ch case   31:*/		regs.R3 = regs.R19;
		/* 821E5D8Ch case   31:*/		return 0x821E5D90;
		  /* 821E5D90h */ case   32:  		/* mr R4, R31 */
		/* 821E5D90h case   32:*/		regs.R4 = regs.R31;
		/* 821E5D90h case   32:*/		return 0x821E5D94;
		  /* 821E5D94h */ case   33:  		/* lwz R11, <#[R11 + 84]> */
		/* 821E5D94h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 821E5D94h case   33:*/		return 0x821E5D98;
		  /* 821E5D98h */ case   34:  		/* stw R11, <#[R31 + 84]> */
		/* 821E5D98h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 821E5D98h case   34:*/		return 0x821E5D9C;
		  /* 821E5D9Ch */ case   35:  		/* lwz R11, <#[R29]> */
		/* 821E5D9Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E5D9Ch case   35:*/		return 0x821E5DA0;
		  /* 821E5DA0h */ case   36:  		/* lwz R10, <#[R31 + 68]> */
		/* 821E5DA0h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000044) );
		/* 821E5DA0h case   36:*/		return 0x821E5DA4;
		  /* 821E5DA4h */ case   37:  		/* lwz R11, <#[R11 + 68]> */
		/* 821E5DA4h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000044) );
		/* 821E5DA4h case   37:*/		return 0x821E5DA8;
		  /* 821E5DA8h */ case   38:  		/* rlwimi R11, R10, 0, 0, 3 */
		/* 821E5DA8h case   38:*/		cpu::op::rlwimi<0,0,0,3>(regs,&regs.R11,regs.R10);
		/* 821E5DA8h case   38:*/		return 0x821E5DAC;
		  /* 821E5DACh */ case   39:  		/* stw R11, <#[R31 + 68]> */
		/* 821E5DACh case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 821E5DACh case   39:*/		return 0x821E5DB0;
		  /* 821E5DB0h */ case   40:  		/* lwz R10, <#[R29]> */
		/* 821E5DB0h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821E5DB0h case   40:*/		return 0x821E5DB4;
		  /* 821E5DB4h */ case   41:  		/* lwz R11, <#[R31 + 76]> */
		/* 821E5DB4h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 821E5DB4h case   41:*/		return 0x821E5DB8;
		  /* 821E5DB8h */ case   42:  		/* lwz R10, <#[R10 + 76]> */
		/* 821E5DB8h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000004C) );
		/* 821E5DB8h case   42:*/		return 0x821E5DBC;
		  /* 821E5DBCh */ case   43:  		/* rlwimi R10, R11, 0, 0, 12 */
		/* 821E5DBCh case   43:*/		cpu::op::rlwimi<0,0,0,12>(regs,&regs.R10,regs.R11);
		/* 821E5DBCh case   43:*/		return 0x821E5DC0;
		  /* 821E5DC0h */ case   44:  		/* stw R10, <#[R31 + 76]> */
		/* 821E5DC0h case   44:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 821E5DC0h case   44:*/		return 0x821E5DC4;
		  /* 821E5DC4h */ case   45:  		/* bl -127316 */
		/* 821E5DC4h case   45:*/		regs.LR = 0x821E5DC8; return 0x821C6C70;
		/* 821E5DC4h case   45:*/		return 0x821E5DC8;
		  /* 821E5DC8h */ case   46:  		/* lwz R11, <#[R29]> */
		/* 821E5DC8h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E5DC8h case   46:*/		return 0x821E5DCC;
		  /* 821E5DCCh */ case   47:  		/* lwz R10, <#[R11 + 36]> */
		/* 821E5DCCh case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821E5DCCh case   47:*/		return 0x821E5DD0;
		  /* 821E5DD0h */ case   48:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E5DD0h case   48:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E5DD0h case   48:*/		return 0x821E5DD4;
		  /* 821E5DD4h */ case   49:  		/* bc 4, CR0_EQ, 200 */
		/* 821E5DD4h case   49:*/		if ( !regs.CR[0].eq ) { return 0x821E5E9C;  }
		/* 821E5DD4h case   49:*/		return 0x821E5DD8;
		  /* 821E5DD8h */ case   50:  		/* lwz R11, <#[R11 + 32]> */
		/* 821E5DD8h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821E5DD8h case   50:*/		return 0x821E5DDC;
		  /* 821E5DDCh */ case   51:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E5DDCh case   51:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E5DDCh case   51:*/		return 0x821E5DE0;
		  /* 821E5DE0h */ case   52:  		/* addic. R28, R11, -40 */
		/* 821E5DE0h case   52:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R11,0xFFFFFFD8);
		/* 821E5DE0h case   52:*/		return 0x821E5DE4;
		  /* 821E5DE4h */ case   53:  		/* bc 12, CR0_EQ, 184 */
		/* 821E5DE4h case   53:*/		if ( regs.CR[0].eq ) { return 0x821E5E9C;  }
		/* 821E5DE4h case   53:*/		return 0x821E5DE8;
		  /* 821E5DE8h */ case   54:  		/* mr R3, R28 */
		/* 821E5DE8h case   54:*/		regs.R3 = regs.R28;
		/* 821E5DE8h case   54:*/		return 0x821E5DEC;
		  /* 821E5DECh */ case   55:  		/* bl -531444 */
		/* 821E5DECh case   55:*/		regs.LR = 0x821E5DF0; return 0x821641F8;
		/* 821E5DECh case   55:*/		return 0x821E5DF0;
		  /* 821E5DF0h */ case   56:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E5DF0h case   56:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E5DF0h case   56:*/		return 0x821E5DF4;
		  /* 821E5DF4h */ case   57:  		/* bc 12, CR0_EQ, 168 */
		/* 821E5DF4h case   57:*/		if ( regs.CR[0].eq ) { return 0x821E5E9C;  }
		/* 821E5DF4h case   57:*/		return 0x821E5DF8;
		  /* 821E5DF8h */ case   58:  		/* mr R4, R19 */
		/* 821E5DF8h case   58:*/		regs.R4 = regs.R19;
		/* 821E5DF8h case   58:*/		return 0x821E5DFC;
		  /* 821E5DFCh */ case   59:  		/* mr R3, R28 */
		/* 821E5DFCh case   59:*/		regs.R3 = regs.R28;
		/* 821E5DFCh case   59:*/		return 0x821E5E00;
		  /* 821E5E00h */ case   60:  		/* bl -530112 */
		/* 821E5E00h case   60:*/		regs.LR = 0x821E5E04; return 0x82164740;
		/* 821E5E00h case   60:*/		return 0x821E5E04;
		  /* 821E5E04h */ case   61:  		/* lwz R11, <#[R3]> */
		/* 821E5E04h case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821E5E04h case   61:*/		return 0x821E5E08;
		  /* 821E5E08h */ case   62:  		/* cmplw CR6, R11, R30 */
		/* 821E5E08h case   62:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821E5E08h case   62:*/		return 0x821E5E0C;
		  /* 821E5E0Ch */ case   63:  		/* bc 4, CR6_EQ, 8 */
		/* 821E5E0Ch case   63:*/		if ( !regs.CR[6].eq ) { return 0x821E5E14;  }
		/* 821E5E0Ch case   63:*/		return 0x821E5E10;
		  /* 821E5E10h */ case   64:  		/* stw R31, <#[R3]> */
		/* 821E5E10h case   64:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 821E5E10h case   64:*/		return 0x821E5E14;
	}
	return 0x821E5E14;
} // Block from 821E5D10h-821E5E14h (65 instructions)

//////////////////////////////////////////////////////
// Block at 821E5E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5E14);
		  /* 821E5E14h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E5E14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E5E14h case    0:*/		return 0x821E5E18;
		  /* 821E5E18h */ case    1:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 821E5E18h case    1:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 821E5E18h case    1:*/		return 0x821E5E1C;
		  /* 821E5E1Ch */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821E5E1Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E5E2C;  }
		/* 821E5E1Ch case    2:*/		return 0x821E5E20;
		  /* 821E5E20h */ case    3:  		/* rlwinm R9, R11, 30, 28, 31 */
		/* 821E5E20h case    3:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R9,regs.R11);
		/* 821E5E20h case    3:*/		return 0x821E5E24;
		  /* 821E5E24h */ case    4:  		/* cmpwi CR6, R9, 7 */
		/* 821E5E24h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000007);
		/* 821E5E24h case    4:*/		return 0x821E5E28;
		  /* 821E5E28h */ case    5:  		/* bc 4, CR6_EQ, 48 */
		/* 821E5E28h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E5E58;  }
		/* 821E5E28h case    5:*/		return 0x821E5E2C;
	}
	return 0x821E5E2C;
} // Block from 821E5E14h-821E5E2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E5E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5E2C);
		  /* 821E5E2Ch */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821E5E2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E5E2Ch case    0:*/		return 0x821E5E30;
		  /* 821E5E30h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821E5E30h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E5E3C;  }
		/* 821E5E30h case    1:*/		return 0x821E5E34;
		  /* 821E5E34h */ case    2:  		/* mr R11, R17 */
		/* 821E5E34h case    2:*/		regs.R11 = regs.R17;
		/* 821E5E34h case    2:*/		return 0x821E5E38;
		  /* 821E5E38h */ case    3:  		/* b 12 */
		/* 821E5E38h case    3:*/		return 0x821E5E44;
		/* 821E5E38h case    3:*/		return 0x821E5E3C;
	}
	return 0x821E5E3C;
} // Block from 821E5E2Ch-821E5E3Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E5E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5E3C);
		  /* 821E5E3Ch */ case    0:  		/* nor R11, R11, R11 */
		/* 821E5E3Ch case    0:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821E5E3Ch case    0:*/		return 0x821E5E40;
		  /* 821E5E40h */ case    1:  		/* rlwinm R11, R11, 25, 31, 31 */
		/* 821E5E40h case    1:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R11,regs.R11);
		/* 821E5E40h case    1:*/		return 0x821E5E44;
	}
	return 0x821E5E44;
} // Block from 821E5E3Ch-821E5E44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E5E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5E44);
		  /* 821E5E44h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E5E44h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E5E44h case    0:*/		return 0x821E5E48;
		  /* 821E5E48h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821E5E48h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E5E58;  }
		/* 821E5E48h case    1:*/		return 0x821E5E4C;
		  /* 821E5E4Ch */ case    2:  		/* li R4, 3591 */
		/* 821E5E4Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xE07);
		/* 821E5E4Ch case    2:*/		return 0x821E5E50;
		  /* 821E5E50h */ case    3:  		/* mr R3, R19 */
		/* 821E5E50h case    3:*/		regs.R3 = regs.R19;
		/* 821E5E50h case    3:*/		return 0x821E5E54;
		  /* 821E5E54h */ case    4:  		/* bl -606428 */
		/* 821E5E54h case    4:*/		regs.LR = 0x821E5E58; return 0x82151D78;
		/* 821E5E54h case    4:*/		return 0x821E5E58;
	}
	return 0x821E5E58;
} // Block from 821E5E44h-821E5E58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E5E58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5E58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5E58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5E58);
		  /* 821E5E58h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 821E5E58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821E5E58h case    0:*/		return 0x821E5E5C;
		  /* 821E5E5Ch */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E5E5Ch case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E5E5Ch case    1:*/		return 0x821E5E60;
		  /* 821E5E60h */ case    2:  		/* cmplwi CR6, R11, 10880 */
		/* 821E5E60h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A80);
		/* 821E5E60h case    2:*/		return 0x821E5E64;
		  /* 821E5E64h */ case    3:  		/* bc 4, CR6_EQ, 56 */
		/* 821E5E64h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821E5E9C;  }
		/* 821E5E64h case    3:*/		return 0x821E5E68;
		  /* 821E5E68h */ case    4:  		/* mr R4, R19 */
		/* 821E5E68h case    4:*/		regs.R4 = regs.R19;
		/* 821E5E68h case    4:*/		return 0x821E5E6C;
		  /* 821E5E6Ch */ case    5:  		/* mr R3, R28 */
		/* 821E5E6Ch case    5:*/		regs.R3 = regs.R28;
		/* 821E5E6Ch case    5:*/		return 0x821E5E70;
		  /* 821E5E70h */ case    6:  		/* bl -303408 */
		/* 821E5E70h case    6:*/		regs.LR = 0x821E5E74; return 0x8219BD40;
		/* 821E5E70h case    6:*/		return 0x821E5E74;
		  /* 821E5E74h */ case    7:  		/* lwz R10, <#[R3]> */
		/* 821E5E74h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821E5E74h case    7:*/		return 0x821E5E78;
		  /* 821E5E78h */ case    8:  		/* lwz R11, <#[R31 + 68]> */
		/* 821E5E78h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 821E5E78h case    8:*/		return 0x821E5E7C;
		  /* 821E5E7Ch */ case    9:  		/* mr R4, R19 */
		/* 821E5E7Ch case    9:*/		regs.R4 = regs.R19;
		/* 821E5E7Ch case    9:*/		return 0x821E5E80;
		  /* 821E5E80h */ case   10:  		/* lwz R10, <#[R10 + 28]> */
		/* 821E5E80h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 821E5E80h case   10:*/		return 0x821E5E84;
		  /* 821E5E84h */ case   11:  		/* lwz R10, <#[R10 + 68]> */
		/* 821E5E84h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000044) );
		/* 821E5E84h case   11:*/		return 0x821E5E88;
		  /* 821E5E88h */ case   12:  		/* rlwimi R10, R11, 0, 0, 3 */
		/* 821E5E88h case   12:*/		cpu::op::rlwimi<0,0,0,3>(regs,&regs.R10,regs.R11);
		/* 821E5E88h case   12:*/		return 0x821E5E8C;
		  /* 821E5E8Ch */ case   13:  		/* stw R10, <#[R31 + 68]> */
		/* 821E5E8Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000044) );
		/* 821E5E8Ch case   13:*/		return 0x821E5E90;
		  /* 821E5E90h */ case   14:  		/* lwz R3, <#[R3]> */
		/* 821E5E90h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 821E5E90h case   14:*/		return 0x821E5E94;
		  /* 821E5E94h */ case   15:  		/* bl -530092 */
		/* 821E5E94h case   15:*/		regs.LR = 0x821E5E98; return 0x821647E8;
		/* 821E5E94h case   15:*/		return 0x821E5E98;
		  /* 821E5E98h */ case   16:  		/* stw R31, <#[R3 + 16]> */
		/* 821E5E98h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000010) );
		/* 821E5E98h case   16:*/		return 0x821E5E9C;
	}
	return 0x821E5E9C;
} // Block from 821E5E58h-821E5E9Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E5E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5E9C);
		  /* 821E5E9Ch */ case    0:  		/* lwz R29, <#[R29 + 4]> */
		/* 821E5E9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000004) );
		/* 821E5E9Ch case    0:*/		return 0x821E5EA0;
	}
	return 0x821E5EA0;
} // Block from 821E5E9Ch-821E5EA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E5EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5EA0);
		  /* 821E5EA0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821E5EA0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E5EA0h case    0:*/		return 0x821E5EA4;
		  /* 821E5EA4h */ case    1:  		/* bc 4, CR6_EQ, -896 */
		/* 821E5EA4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E5B24;  }
		/* 821E5EA4h case    1:*/		return 0x821E5EA8;
		  /* 821E5EA8h */ case    2:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821E5EA8h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821E5EA8h case    2:*/		return 0x821E5EAC;
		  /* 821E5EACh */ case    3:  		/* bc 4, CR0_EQ, 176 */
		/* 821E5EACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E5F5C;  }
		/* 821E5EACh case    3:*/		return 0x821E5EB0;
		  /* 821E5EB0h */ case    4:  		/* li R4, 1 */
		/* 821E5EB0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E5EB0h case    4:*/		return 0x821E5EB4;
		  /* 821E5EB4h */ case    5:  		/* fmr FR4, FR29 */
		/* 821E5EB4h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821E5EB4h case    5:*/		return 0x821E5EB8;
		  /* 821E5EB8h */ case    6:  		/* mr R3, R19 */
		/* 821E5EB8h case    6:*/		regs.R3 = regs.R19;
		/* 821E5EB8h case    6:*/		return 0x821E5EBC;
		  /* 821E5EBCh */ case    7:  		/* fmr FR3, FR29 */
		/* 821E5EBCh case    7:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821E5EBCh case    7:*/		return 0x821E5EC0;
		  /* 821E5EC0h */ case    8:  		/* fmr FR2, FR29 */
		/* 821E5EC0h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821E5EC0h case    8:*/		return 0x821E5EC4;
		  /* 821E5EC4h */ case    9:  		/* fmr FR1, FR29 */
		/* 821E5EC4h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821E5EC4h case    9:*/		return 0x821E5EC8;
		  /* 821E5EC8h */ case   10:  		/* bl 281744 */
		/* 821E5EC8h case   10:*/		regs.LR = 0x821E5ECC; return 0x8222AB58;
		/* 821E5EC8h case   10:*/		return 0x821E5ECC;
		  /* 821E5ECCh */ case   11:  		/* lwz R11, <#[R21 + 8]> */
		/* 821E5ECCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821E5ECCh case   11:*/		return 0x821E5ED0;
		  /* 821E5ED0h */ case   12:  		/* mr R4, R3 */
		/* 821E5ED0h case   12:*/		regs.R4 = regs.R3;
		/* 821E5ED0h case   12:*/		return 0x821E5ED4;
		  /* 821E5ED4h */ case   13:  		/* li R5, 0 */
		/* 821E5ED4h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E5ED4h case   13:*/		return 0x821E5ED8;
		  /* 821E5ED8h */ case   14:  		/* mr R3, R19 */
		/* 821E5ED8h case   14:*/		regs.R3 = regs.R19;
		/* 821E5ED8h case   14:*/		return 0x821E5EDC;
		  /* 821E5EDCh */ case   15:  		/* addi R31, R11, 24 */
		/* 821E5EDCh case   15:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x18);
		/* 821E5EDCh case   15:*/		return 0x821E5EE0;
		  /* 821E5EE0h */ case   16:  		/* bl -450000 */
		/* 821E5EE0h case   16:*/		regs.LR = 0x821E5EE4; return 0x82178110;
		/* 821E5EE0h case   16:*/		return 0x821E5EE4;
		  /* 821E5EE4h */ case   17:  		/* mr R6, R3 */
		/* 821E5EE4h case   17:*/		regs.R6 = regs.R3;
		/* 821E5EE4h case   17:*/		return 0x821E5EE8;
		  /* 821E5EE8h */ case   18:  		/* mr R5, R31 */
		/* 821E5EE8h case   18:*/		regs.R5 = regs.R31;
		/* 821E5EE8h case   18:*/		return 0x821E5EEC;
		  /* 821E5EECh */ case   19:  		/* lwz R4, <#[R21 + 8]> */
		/* 821E5EECh case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000008) );
		/* 821E5EECh case   19:*/		return 0x821E5EF0;
		  /* 821E5EF0h */ case   20:  		/* mr R3, R19 */
		/* 821E5EF0h case   20:*/		regs.R3 = regs.R19;
		/* 821E5EF0h case   20:*/		return 0x821E5EF4;
		  /* 821E5EF4h */ case   21:  		/* bl -148500 */
		/* 821E5EF4h case   21:*/		regs.LR = 0x821E5EF8; return 0x821C1AE0;
		/* 821E5EF4h case   21:*/		return 0x821E5EF8;
		  /* 821E5EF8h */ case   22:  		/* lwz R4, <#[R21 + 8]> */
		/* 821E5EF8h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000008) );
		/* 821E5EF8h case   22:*/		return 0x821E5EFC;
		  /* 821E5EFCh */ case   23:  		/* mr R31, R3 */
		/* 821E5EFCh case   23:*/		regs.R31 = regs.R3;
		/* 821E5EFCh case   23:*/		return 0x821E5F00;
		  /* 821E5F00h */ case   24:  		/* addi R5, R4, 32 */
		/* 821E5F00h case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 821E5F00h case   24:*/		return 0x821E5F04;
		  /* 821E5F04h */ case   25:  		/* li R8, 0 */
		/* 821E5F04h case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E5F04h case   25:*/		return 0x821E5F08;
		  /* 821E5F08h */ case   26:  		/* li R7, 0 */
		/* 821E5F08h case   26:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E5F08h case   26:*/		return 0x821E5F0C;
		  /* 821E5F0Ch */ case   27:  		/* li R6, 85 */
		/* 821E5F0Ch case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x55);
		/* 821E5F0Ch case   27:*/		return 0x821E5F10;
		  /* 821E5F10h */ case   28:  		/* mr R3, R19 */
		/* 821E5F10h case   28:*/		regs.R3 = regs.R19;
		/* 821E5F10h case   28:*/		return 0x821E5F14;
		  /* 821E5F14h */ case   29:  		/* bl 256644 */
		/* 821E5F14h case   29:*/		regs.LR = 0x821E5F18; return 0x82224998;
		/* 821E5F14h case   29:*/		return 0x821E5F18;
		  /* 821E5F18h */ case   30:  		/* mr R30, R3 */
		/* 821E5F18h case   30:*/		regs.R30 = regs.R3;
		/* 821E5F18h case   30:*/		return 0x821E5F1C;
		  /* 821E5F1Ch */ case   31:  		/* li R5, 7 */
		/* 821E5F1Ch case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 821E5F1Ch case   31:*/		return 0x821E5F20;
		  /* 821E5F20h */ case   32:  		/* mr R4, R31 */
		/* 821E5F20h case   32:*/		regs.R4 = regs.R31;
		/* 821E5F20h case   32:*/		return 0x821E5F24;
		  /* 821E5F24h */ case   33:  		/* mr R3, R19 */
		/* 821E5F24h case   33:*/		regs.R3 = regs.R19;
		/* 821E5F24h case   33:*/		return 0x821E5F28;
		  /* 821E5F28h */ case   34:  		/* lwz R11, <#[R30 + 8]> */
		/* 821E5F28h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E5F28h case   34:*/		return 0x821E5F2C;
		  /* 821E5F2Ch */ case   35:  		/* rlwimi R11, R17, 17, 13, 14 */
		/* 821E5F2Ch case   35:*/		cpu::op::rlwimi<0,17,13,14>(regs,&regs.R11,regs.R17);
		/* 821E5F2Ch case   35:*/		return 0x821E5F30;
		  /* 821E5F30h */ case   36:  		/* stw R11, <#[R30 + 8]> */
		/* 821E5F30h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E5F30h case   36:*/		return 0x821E5F34;
		  /* 821E5F34h */ case   37:  		/* bl -481252 */
		/* 821E5F34h case   37:*/		regs.LR = 0x821E5F38; return 0x82170750;
		/* 821E5F34h case   37:*/		return 0x821E5F38;
		  /* 821E5F38h */ case   38:  		/* mr R4, R3 */
		/* 821E5F38h case   38:*/		regs.R4 = regs.R3;
		/* 821E5F38h case   38:*/		return 0x821E5F3C;
		  /* 821E5F3Ch */ case   39:  		/* mr R3, R30 */
		/* 821E5F3Ch case   39:*/		regs.R3 = regs.R30;
		/* 821E5F3Ch case   39:*/		return 0x821E5F40;
		  /* 821E5F40h */ case   40:  		/* bl -449912 */
		/* 821E5F40h case   40:*/		regs.LR = 0x821E5F44; return 0x821781C8;
		/* 821E5F40h case   40:*/		return 0x821E5F44;
		  /* 821E5F44h */ case   41:  		/* mr R4, R19 */
		/* 821E5F44h case   41:*/		regs.R4 = regs.R19;
		/* 821E5F44h case   41:*/		return 0x821E5F48;
		  /* 821E5F48h */ case   42:  		/* mr R3, R30 */
		/* 821E5F48h case   42:*/		regs.R3 = regs.R30;
		/* 821E5F48h case   42:*/		return 0x821E5F4C;
		  /* 821E5F4Ch */ case   43:  		/* bl -303628 */
		/* 821E5F4Ch case   43:*/		regs.LR = 0x821E5F50; return 0x8219BD40;
		/* 821E5F4Ch case   43:*/		return 0x821E5F50;
		  /* 821E5F50h */ case   44:  		/* stw R23, <#[R3]> */
		/* 821E5F50h case   44:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R3 + 0x00000000) );
		/* 821E5F50h case   44:*/		return 0x821E5F54;
		  /* 821E5F54h */ case   45:  		/* lwz R11, <#[R21 + 4]> */
		/* 821E5F54h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821E5F54h case   45:*/		return 0x821E5F58;
		  /* 821E5F58h */ case   46:  		/* stw R11, <#[R3 + 4]> */
		/* 821E5F58h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E5F58h case   46:*/		return 0x821E5F5C;
	}
	return 0x821E5F5C;
} // Block from 821E5EA0h-821E5F5Ch (47 instructions)

//////////////////////////////////////////////////////
// Block at 821E5F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E5F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E5F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E5F5C);
		  /* 821E5F5Ch */ case    0:  		/* lwz R11, <#[R19 + 40]> */
		/* 821E5F5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000028) );
		/* 821E5F5Ch case    0:*/		return 0x821E5F60;
		  /* 821E5F60h */ case    1:  		/* ori R11, R11, 512 */
		/* 821E5F60h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821E5F60h case    1:*/		return 0x821E5F64;
		  /* 821E5F64h */ case    2:  		/* stw R11, <#[R19 + 40]> */
		/* 821E5F64h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000028) );
		/* 821E5F64h case    2:*/		return 0x821E5F68;
		  /* 821E5F68h */ case    3:  		/* lwz R11, <#[R21 + 60]> */
		/* 821E5F68h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000003C) );
		/* 821E5F68h case    3:*/		return 0x821E5F6C;
		  /* 821E5F6Ch */ case    4:  		/* ori R11, R11, 1024 */
		/* 821E5F6Ch case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x400);
		/* 821E5F6Ch case    4:*/		return 0x821E5F70;
		  /* 821E5F70h */ case    5:  		/* stw R11, <#[R21 + 60]> */
		/* 821E5F70h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x0000003C) );
		/* 821E5F70h case    5:*/		return 0x821E5F74;
		  /* 821E5F74h */ case    6:  		/* lwz R30, <#[R19 + 4]> */
		/* 821E5F74h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R19 + 0x00000004) );
		/* 821E5F74h case    6:*/		return 0x821E5F78;
		  /* 821E5F78h */ case    7:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 821E5F78h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 821E5F78h case    7:*/		return 0x821E5F7C;
		  /* 821E5F7Ch */ case    8:  		/* bc 4, CR0_EQ, 656 */
		/* 821E5F7Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E620C;  }
		/* 821E5F7Ch case    8:*/		return 0x821E5F80;
		  /* 821E5F80h */ case    9:  		/* cmplwi CR0, R30, 0 */
		/* 821E5F80h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 821E5F80h case    9:*/		return 0x821E5F84;
		  /* 821E5F84h */ case   10:  		/* bc 12, CR0_EQ, 648 */
		/* 821E5F84h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E620C;  }
		/* 821E5F84h case   10:*/		return 0x821E5F88;
		  /* 821E5F88h */ case   11:  		/* lwz R11, <#[R19 + 616]> */
		/* 821E5F88h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000268) );
		/* 821E5F88h case   11:*/		return 0x821E5F8C;
		  /* 821E5F8Ch */ case   12:  		/* subf R11, R11, R21 */
		/* 821E5F8Ch case   12:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 821E5F8Ch case   12:*/		return 0x821E5F90;
		  /* 821E5F90h */ case   13:  		/* divw R10, R11, R18 */
		/* 821E5F90h case   13:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R18);
		/* 821E5F90h case   13:*/		return 0x821E5F94;
		  /* 821E5F94h */ case   14:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E5F94h case   14:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E5F94h case   14:*/		return 0x821E5F98;
		  /* 821E5F98h */ case   15:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821E5F98h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821E5F98h case   15:*/		return 0x821E5F9C;
		  /* 821E5F9Ch */ case   16:  		/* addi R11, R11, 21 */
		/* 821E5F9Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E5F9Ch case   16:*/		return 0x821E5FA0;
		  /* 821E5FA0h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E5FA0h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E5FA0h case   17:*/		return 0x821E5FA4;
		  /* 821E5FA4h */ case   18:  		/* lwzx R11, <#[R11 + R30]> */
		/* 821E5FA4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821E5FA4h case   18:*/		return 0x821E5FA8;
		  /* 821E5FA8h */ case   19:  		/* srw R11, R11, R10 */
		/* 821E5FA8h case   19:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E5FA8h case   19:*/		return 0x821E5FAC;
		  /* 821E5FACh */ case   20:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E5FACh case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E5FACh case   20:*/		return 0x821E5FB0;
		  /* 821E5FB0h */ case   21:  		/* bc 12, CR0_EQ, 580 */
		/* 821E5FB0h case   21:*/		if ( regs.CR[0].eq ) { return 0x821E61F4;  }
		/* 821E5FB0h case   21:*/		return 0x821E5FB4;
		  /* 821E5FB4h */ case   22:  		/* lwz R11, <#[R30 + 36]> */
		/* 821E5FB4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E5FB4h case   22:*/		return 0x821E5FB8;
		  /* 821E5FB8h */ case   23:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E5FB8h case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E5FB8h case   23:*/		return 0x821E5FBC;
		  /* 821E5FBCh */ case   24:  		/* bc 4, CR0_EQ, 568 */
		/* 821E5FBCh case   24:*/		if ( !regs.CR[0].eq ) { return 0x821E61F4;  }
		/* 821E5FBCh case   24:*/		return 0x821E5FC0;
		  /* 821E5FC0h */ case   25:  		/* lwz R11, <#[R30 + 32]> */
		/* 821E5FC0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821E5FC0h case   25:*/		return 0x821E5FC4;
		  /* 821E5FC4h */ case   26:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E5FC4h case   26:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E5FC4h case   26:*/		return 0x821E5FC8;
		  /* 821E5FC8h */ case   27:  		/* addic. R29, R11, -40 */
		/* 821E5FC8h case   27:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R11,0xFFFFFFD8);
		/* 821E5FC8h case   27:*/		return 0x821E5FCC;
		  /* 821E5FCCh */ case   28:  		/* bc 12, CR0_EQ, 552 */
		/* 821E5FCCh case   28:*/		if ( regs.CR[0].eq ) { return 0x821E61F4;  }
		/* 821E5FCCh case   28:*/		return 0x821E5FD0;
		  /* 821E5FD0h */ case   29:  		/* lwz R11, <#[R29 + 8]> */
		/* 821E5FD0h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821E5FD0h case   29:*/		return 0x821E5FD4;
		  /* 821E5FD4h */ case   30:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E5FD4h case   30:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E5FD4h case   30:*/		return 0x821E5FD8;
		  /* 821E5FD8h */ case   31:  		/* cmplwi CR6, R11, 10624 */
		/* 821E5FD8h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002980);
		/* 821E5FD8h case   31:*/		return 0x821E5FDC;
		  /* 821E5FDCh */ case   32:  		/* bc 4, CR6_EQ, 536 */
		/* 821E5FDCh case   32:*/		if ( !regs.CR[6].eq ) { return 0x821E61F4;  }
		/* 821E5FDCh case   32:*/		return 0x821E5FE0;
		  /* 821E5FE0h */ case   33:  		/* mr R3, R19 */
		/* 821E5FE0h case   33:*/		regs.R3 = regs.R19;
		/* 821E5FE0h case   33:*/		return 0x821E5FE4;
		  /* 821E5FE4h */ case   34:  		/* bl -495788 */
		/* 821E5FE4h case   34:*/		regs.LR = 0x821E5FE8; return 0x8216CF38;
		/* 821E5FE4h case   34:*/		return 0x821E5FE8;
		  /* 821E5FE8h */ case   35:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821E5FE8h case   35:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821E5FE8h case   35:*/		return 0x821E5FEC;
		  /* 821E5FECh */ case   36:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821E5FECh case   36:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821E5FECh case   36:*/		return 0x821E5FF0;
		  /* 821E5FF0h */ case   37:  		/* addi R9, R11, 4 */
		/* 821E5FF0h case   37:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821E5FF0h case   37:*/		return 0x821E5FF4;
		  /* 821E5FF4h */ case   38:  		/* addi R8, R10, 4 */
		/* 821E5FF4h case   38:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821E5FF4h case   38:*/		return 0x821E5FF8;
		  /* 821E5FF8h */ case   39:  		/* mr R31, R3 */
		/* 821E5FF8h case   39:*/		regs.R31 = regs.R3;
		/* 821E5FF8h case   39:*/		return 0x821E5FFC;
		  /* 821E5FFCh */ case   40:  		/* lwz R7, <#[R11 + 4]> */
		/* 821E5FFCh case   40:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821E5FFCh case   40:*/		return 0x821E6000;
		  /* 821E6000h */ case   41:  		/* mr R5, R19 */
		/* 821E6000h case   41:*/		regs.R5 = regs.R19;
		/* 821E6000h case   41:*/		return 0x821E6004;
		  /* 821E6004h */ case   42:  		/* mr R3, R30 */
		/* 821E6004h case   42:*/		regs.R3 = regs.R30;
		/* 821E6004h case   42:*/		return 0x821E6008;
		  /* 821E6008h */ case   43:  		/* mr R4, R31 */
		/* 821E6008h case   43:*/		regs.R4 = regs.R31;
		/* 821E6008h case   43:*/		return 0x821E600C;
		  /* 821E600Ch */ case   44:  		/* stw R7, <#[R10 + 4]> */
		/* 821E600Ch case   44:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821E600Ch case   44:*/		return 0x821E6010;
		  /* 821E6010h */ case   45:  		/* lwz R7, <#[R11 + 4]> */
		/* 821E6010h case   45:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6010h case   45:*/		return 0x821E6014;
		  /* 821E6014h */ case   46:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821E6014h case   46:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821E6014h case   46:*/		return 0x821E6018;
		  /* 821E6018h */ case   47:  		/* stw R8, <#[R7]> */
		/* 821E6018h case   47:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 821E6018h case   47:*/		return 0x821E601C;
		  /* 821E601Ch */ case   48:  		/* stw R9, <#[R10]> */
		/* 821E601Ch case   48:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E601Ch case   48:*/		return 0x821E6020;
		  /* 821E6020h */ case   49:  		/* stw R10, <#[R11 + 4]> */
		/* 821E6020h case   49:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6020h case   49:*/		return 0x821E6024;
		  /* 821E6024h */ case   50:  		/* lwz R11, <#[R30 + 84]> */
		/* 821E6024h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000054) );
		/* 821E6024h case   50:*/		return 0x821E6028;
		  /* 821E6028h */ case   51:  		/* stw R11, <#[R31 + 84]> */
		/* 821E6028h case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 821E6028h case   51:*/		return 0x821E602C;
		  /* 821E602Ch */ case   52:  		/* lwz R11, <#[R31 + 68]> */
		/* 821E602Ch case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 821E602Ch case   52:*/		return 0x821E6030;
		  /* 821E6030h */ case   53:  		/* lwz R10, <#[R30 + 68]> */
		/* 821E6030h case   53:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000044) );
		/* 821E6030h case   53:*/		return 0x821E6034;
		  /* 821E6034h */ case   54:  		/* rlwimi R10, R11, 0, 0, 3 */
		/* 821E6034h case   54:*/		cpu::op::rlwimi<0,0,0,3>(regs,&regs.R10,regs.R11);
		/* 821E6034h case   54:*/		return 0x821E6038;
		  /* 821E6038h */ case   55:  		/* stw R10, <#[R31 + 68]> */
		/* 821E6038h case   55:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000044) );
		/* 821E6038h case   55:*/		return 0x821E603C;
		  /* 821E603Ch */ case   56:  		/* lwz R10, <#[R30 + 76]> */
		/* 821E603Ch case   56:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000004C) );
		/* 821E603Ch case   56:*/		return 0x821E6040;
		  /* 821E6040h */ case   57:  		/* lwz R11, <#[R31 + 76]> */
		/* 821E6040h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 821E6040h case   57:*/		return 0x821E6044;
		  /* 821E6044h */ case   58:  		/* rlwimi R10, R11, 0, 0, 12 */
		/* 821E6044h case   58:*/		cpu::op::rlwimi<0,0,0,12>(regs,&regs.R10,regs.R11);
		/* 821E6044h case   58:*/		return 0x821E6048;
		  /* 821E6048h */ case   59:  		/* stw R10, <#[R31 + 76]> */
		/* 821E6048h case   59:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 821E6048h case   59:*/		return 0x821E604C;
		  /* 821E604Ch */ case   60:  		/* bl 301716 */
		/* 821E604Ch case   60:*/		regs.LR = 0x821E6050; return 0x8222FAE0;
		/* 821E604Ch case   60:*/		return 0x821E6050;
		  /* 821E6050h */ case   61:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821E6050h case   61:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821E6050h case   61:*/		return 0x821E6054;
		  /* 821E6054h */ case   62:  		/* addi R10, R31, 32 */
		/* 821E6054h case   62:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x20);
		/* 821E6054h case   62:*/		return 0x821E6058;
		  /* 821E6058h */ case   63:  		/* stb R17, <#[R1 + 128]> */
		/* 821E6058h case   63:*/		cpu::mem::store8( regs, regs.R17, (uint32)(regs.R1 + 0x00000080) );
		/* 821E6058h case   63:*/		return 0x821E605C;
		  /* 821E605Ch */ case   64:  		/* addi R11, R11, 36 */
		/* 821E605Ch case   64:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821E605Ch case   64:*/		return 0x821E6060;
		  /* 821E6060h */ case   65:  		/* addi R10, R10, -36 */
		/* 821E6060h case   65:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 821E6060h case   65:*/		return 0x821E6064;
		  /* 821E6064h */ case   66:  		/* addi R9, R11, -36 */
		/* 821E6064h case   66:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 821E6064h case   66:*/		return 0x821E6068;
		  /* 821E6068h */ case   67:  		/* ori R8, R10, 1 */
		/* 821E6068h case   67:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821E6068h case   67:*/		return 0x821E606C;
		  /* 821E606Ch */ case   68:  		/* addi R10, R11, 4 */
		/* 821E606Ch case   68:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E606Ch case   68:*/		return 0x821E6070;
		  /* 821E6070h */ case   69:  		/* lwz R7, <#[R11 + 4]> */
		/* 821E6070h case   69:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6070h case   69:*/		return 0x821E6074;
		  /* 821E6074h */ case   70:  		/* mr R24, R29 */
		/* 821E6074h case   70:*/		regs.R24 = regs.R29;
		/* 821E6074h case   70:*/		return 0x821E6078;
		  /* 821E6078h */ case   71:  		/* lwz R6, <#[R11]> */
		/* 821E6078h case   71:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821E6078h case   71:*/		return 0x821E607C;
		  /* 821E607Ch */ case   72:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821E607Ch case   72:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821E607Ch case   72:*/		return 0x821E6080;
		  /* 821E6080h */ case   73:  		/* stw R6, <#[R7 + 36]> */
		/* 821E6080h case   73:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000024) );
		/* 821E6080h case   73:*/		return 0x821E6084;
		  /* 821E6084h */ case   74:  		/* lwz R7, <#[R11 + 4]> */
		/* 821E6084h case   74:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6084h case   74:*/		return 0x821E6088;
		  /* 821E6088h */ case   75:  		/* lwz R6, <#[R11]> */
		/* 821E6088h case   75:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821E6088h case   75:*/		return 0x821E608C;
		  /* 821E608Ch */ case   76:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821E608Ch case   76:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821E608Ch case   76:*/		return 0x821E6090;
		  /* 821E6090h */ case   77:  		/* stw R7, <#[R6]> */
		/* 821E6090h case   77:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821E6090h case   77:*/		return 0x821E6094;
		  /* 821E6094h */ case   78:  		/* lwz R7, <#[R31 + 32]> */
		/* 821E6094h case   78:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000020) );
		/* 821E6094h case   78:*/		return 0x821E6098;
		  /* 821E6098h */ case   79:  		/* stw R7, <#[R11]> */
		/* 821E6098h case   79:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821E6098h case   79:*/		return 0x821E609C;
		  /* 821E609Ch */ case   80:  		/* lwz R7, <#[R31 + 32]> */
		/* 821E609Ch case   80:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000020) );
		/* 821E609Ch case   80:*/		return 0x821E60A0;
		  /* 821E60A0h */ case   81:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821E60A0h case   81:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821E60A0h case   81:*/		return 0x821E60A4;
		  /* 821E60A4h */ case   82:  		/* stw R9, <#[R7]> */
		/* 821E60A4h case   82:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821E60A4h case   82:*/		return 0x821E60A8;
		  /* 821E60A8h */ case   83:  		/* stw R8, <#[R11 + 4]> */
		/* 821E60A8h case   83:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821E60A8h case   83:*/		return 0x821E60AC;
		  /* 821E60ACh */ case   84:  		/* stw R10, <#[R31 + 32]> */
		/* 821E60ACh case   84:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 821E60ACh case   84:*/		return 0x821E60B0;
		  /* 821E60B0h */ case   85:  		/* stw R31, <#[R29 + 28]> */
		/* 821E60B0h case   85:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E60B0h case   85:*/		return 0x821E60B4;
		  /* 821E60B4h */ case   86:  		/* lwz R25, <#[R24]> */
		/* 821E60B4h case   86:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R24 + 0x00000000) );
		/* 821E60B4h case   86:*/		return 0x821E60B8;
		  /* 821E60B8h */ case   87:  		/* cmplwi CR6, R25, 0 */
		/* 821E60B8h case   87:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821E60B8h case   87:*/		return 0x821E60BC;
		  /* 821E60BCh */ case   88:  		/* bc 12, CR6_EQ, 276 */
		/* 821E60BCh case   88:*/		if ( regs.CR[6].eq ) { return 0x821E61D0;  }
		/* 821E60BCh case   88:*/		return 0x821E60C0;
		  /* 821E60C0h */ case   89:  		/* lwz R11, <#[R25]> */
		/* 821E60C0h case   89:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821E60C0h case   89:*/		return 0x821E60C4;
		  /* 821E60C4h */ case   90:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821E60C4h case   90:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821E60C4h case   90:*/		return 0x821E60C8;
		  /* 821E60C8h */ case   91:  		/* bc 4, CR0_EQ, 16 */
		/* 821E60C8h case   91:*/		if ( !regs.CR[0].eq ) { return 0x821E60D8;  }
		/* 821E60C8h case   91:*/		return 0x821E60CC;
		  /* 821E60CCh */ case   92:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821E60CCh case   92:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821E60CCh case   92:*/		return 0x821E60D0;
		  /* 821E60D0h */ case   93:  		/* mr R11, R17 */
		/* 821E60D0h case   93:*/		regs.R11 = regs.R17;
		/* 821E60D0h case   93:*/		return 0x821E60D4;
		  /* 821E60D4h */ case   94:  		/* bc 12, CR0_EQ, 8 */
		/* 821E60D4h case   94:*/		if ( regs.CR[0].eq ) { return 0x821E60DC;  }
		/* 821E60D4h case   94:*/		return 0x821E60D8;
	}
	return 0x821E60D8;
} // Block from 821E5F5Ch-821E60D8h (95 instructions)

//////////////////////////////////////////////////////
// Block at 821E60D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E60D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E60D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E60D8);
		  /* 821E60D8h */ case    0:  		/* li R11, 0 */
		/* 821E60D8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E60D8h case    0:*/		return 0x821E60DC;
	}
	return 0x821E60DC;
} // Block from 821E60D8h-821E60DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E60DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E60DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E60DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E60DC);
		  /* 821E60DCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E60DCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E60DCh case    0:*/		return 0x821E60E0;
		  /* 821E60E0h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821E60E0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E60F8;  }
		/* 821E60E0h case    1:*/		return 0x821E60E4;
		  /* 821E60E4h */ case    2:  		/* mr R5, R19 */
		/* 821E60E4h case    2:*/		regs.R5 = regs.R19;
		/* 821E60E4h case    2:*/		return 0x821E60E8;
		  /* 821E60E8h */ case    3:  		/* mr R4, R25 */
		/* 821E60E8h case    3:*/		regs.R4 = regs.R25;
		/* 821E60E8h case    3:*/		return 0x821E60EC;
		  /* 821E60ECh */ case    4:  		/* mr R3, R29 */
		/* 821E60ECh case    4:*/		regs.R3 = regs.R29;
		/* 821E60ECh case    4:*/		return 0x821E60F0;
		  /* 821E60F0h */ case    5:  		/* bl -448480 */
		/* 821E60F0h case    5:*/		regs.LR = 0x821E60F4; return 0x82178910;
		/* 821E60F0h case    5:*/		return 0x821E60F4;
		  /* 821E60F4h */ case    6:  		/* b 200 */
		/* 821E60F4h case    6:*/		return 0x821E61BC;
		/* 821E60F4h case    6:*/		return 0x821E60F8;
	}
	return 0x821E60F8;
} // Block from 821E60DCh-821E60F8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E60F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E60F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E60F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E60F8);
		  /* 821E60F8h */ case    0:  		/* lwz R28, <#[R25 + 12]> */
		/* 821E60F8h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R25 + 0x0000000C) );
		/* 821E60F8h case    0:*/		return 0x821E60FC;
		  /* 821E60FCh */ case    1:  		/* lwz R11, <#[R28 + 28]> */
		/* 821E60FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 821E60FCh case    1:*/		return 0x821E6100;
		  /* 821E6100h */ case    2:  		/* cmplw CR6, R11, R31 */
		/* 821E6100h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821E6100h case    2:*/		return 0x821E6104;
		  /* 821E6104h */ case    3:  		/* bc 12, CR6_EQ, 184 */
		/* 821E6104h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E61BC;  }
		/* 821E6104h case    3:*/		return 0x821E6108;
		  /* 821E6108h */ case    4:  		/* mr R26, R28 */
		/* 821E6108h case    4:*/		regs.R26 = regs.R28;
		/* 821E6108h case    4:*/		return 0x821E610C;
		  /* 821E610Ch */ case    5:  		/* lwz R27, <#[R26]> */
		/* 821E610Ch case    5:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R26 + 0x00000000) );
		/* 821E610Ch case    5:*/		return 0x821E6110;
		  /* 821E6110h */ case    6:  		/* cmplwi CR6, R27, 0 */
		/* 821E6110h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821E6110h case    6:*/		return 0x821E6114;
		  /* 821E6114h */ case    7:  		/* bc 12, CR6_EQ, 76 */
		/* 821E6114h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E6160;  }
		/* 821E6114h case    7:*/		return 0x821E6118;
		  /* 821E6118h */ case    8:  		/* lwz R11, <#[R27]> */
		/* 821E6118h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821E6118h case    8:*/		return 0x821E611C;
		  /* 821E611Ch */ case    9:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821E611Ch case    9:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821E611Ch case    9:*/		return 0x821E6120;
		  /* 821E6120h */ case   10:  		/* bc 4, CR0_EQ, 16 */
		/* 821E6120h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821E6130;  }
		/* 821E6120h case   10:*/		return 0x821E6124;
		  /* 821E6124h */ case   11:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821E6124h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821E6124h case   11:*/		return 0x821E6128;
		  /* 821E6128h */ case   12:  		/* mr R11, R17 */
		/* 821E6128h case   12:*/		regs.R11 = regs.R17;
		/* 821E6128h case   12:*/		return 0x821E612C;
		  /* 821E612Ch */ case   13:  		/* bc 12, CR0_EQ, 8 */
		/* 821E612Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821E6134;  }
		/* 821E612Ch case   13:*/		return 0x821E6130;
	}
	return 0x821E6130;
} // Block from 821E60F8h-821E6130h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E6130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6130);
		  /* 821E6130h */ case    0:  		/* li R11, 0 */
		/* 821E6130h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E6130h case    0:*/		return 0x821E6134;
	}
	return 0x821E6134;
} // Block from 821E6130h-821E6134h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E6134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6134);
		  /* 821E6134h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E6134h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E6134h case    0:*/		return 0x821E6138;
		  /* 821E6138h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821E6138h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E614C;  }
		/* 821E6138h case    1:*/		return 0x821E613C;
		  /* 821E613Ch */ case    2:  		/* mr R5, R19 */
		/* 821E613Ch case    2:*/		regs.R5 = regs.R19;
		/* 821E613Ch case    2:*/		return 0x821E6140;
		  /* 821E6140h */ case    3:  		/* mr R4, R27 */
		/* 821E6140h case    3:*/		regs.R4 = regs.R27;
		/* 821E6140h case    3:*/		return 0x821E6144;
		  /* 821E6144h */ case    4:  		/* mr R3, R28 */
		/* 821E6144h case    4:*/		regs.R3 = regs.R28;
		/* 821E6144h case    4:*/		return 0x821E6148;
		  /* 821E6148h */ case    5:  		/* bl -448568 */
		/* 821E6148h case    5:*/		regs.LR = 0x821E614C; return 0x82178910;
		/* 821E6148h case    5:*/		return 0x821E614C;
	}
	return 0x821E614C;
} // Block from 821E6134h-821E614Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E614Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E614C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E614C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E614C);
		  /* 821E614Ch */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821E614Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E614Ch case    0:*/		return 0x821E6150;
		  /* 821E6150h */ case    1:  		/* cmplw CR6, R11, R27 */
		/* 821E6150h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 821E6150h case    1:*/		return 0x821E6154;
		  /* 821E6154h */ case    2:  		/* bc 4, CR6_EQ, -72 */
		/* 821E6154h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E610C;  }
		/* 821E6154h case    2:*/		return 0x821E6158;
		  /* 821E6158h */ case    3:  		/* addi R26, R27, 4 */
		/* 821E6158h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R27,0x4);
		/* 821E6158h case    3:*/		return 0x821E615C;
		  /* 821E615Ch */ case    4:  		/* b -80 */
		/* 821E615Ch case    4:*/		return 0x821E610C;
		/* 821E615Ch case    4:*/		return 0x821E6160;
	}
	return 0x821E6160;
} // Block from 821E614Ch-821E6160h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E6160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6160);
		  /* 821E6160h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821E6160h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821E6160h case    0:*/		return 0x821E6164;
		  /* 821E6164h */ case    1:  		/* addi R10, R31, 24 */
		/* 821E6164h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x18);
		/* 821E6164h case    1:*/		return 0x821E6168;
		  /* 821E6168h */ case    2:  		/* addi R11, R11, 36 */
		/* 821E6168h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821E6168h case    2:*/		return 0x821E616C;
		  /* 821E616Ch */ case    3:  		/* addi R10, R10, -36 */
		/* 821E616Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 821E616Ch case    3:*/		return 0x821E6170;
		  /* 821E6170h */ case    4:  		/* addi R9, R11, -36 */
		/* 821E6170h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 821E6170h case    4:*/		return 0x821E6174;
		  /* 821E6174h */ case    5:  		/* ori R8, R10, 1 */
		/* 821E6174h case    5:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821E6174h case    5:*/		return 0x821E6178;
		  /* 821E6178h */ case    6:  		/* addi R10, R11, 4 */
		/* 821E6178h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E6178h case    6:*/		return 0x821E617C;
		  /* 821E617Ch */ case    7:  		/* lwz R7, <#[R11 + 4]> */
		/* 821E617Ch case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821E617Ch case    7:*/		return 0x821E6180;
		  /* 821E6180h */ case    8:  		/* lwz R6, <#[R11]> */
		/* 821E6180h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821E6180h case    8:*/		return 0x821E6184;
		  /* 821E6184h */ case    9:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821E6184h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821E6184h case    9:*/		return 0x821E6188;
		  /* 821E6188h */ case   10:  		/* stw R6, <#[R7 + 36]> */
		/* 821E6188h case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000024) );
		/* 821E6188h case   10:*/		return 0x821E618C;
		  /* 821E618Ch */ case   11:  		/* lwz R7, <#[R11]> */
		/* 821E618Ch case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821E618Ch case   11:*/		return 0x821E6190;
		  /* 821E6190h */ case   12:  		/* lwz R6, <#[R11 + 4]> */
		/* 821E6190h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6190h case   12:*/		return 0x821E6194;
		  /* 821E6194h */ case   13:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821E6194h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821E6194h case   13:*/		return 0x821E6198;
		  /* 821E6198h */ case   14:  		/* stw R6, <#[R7]> */
		/* 821E6198h case   14:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821E6198h case   14:*/		return 0x821E619C;
		  /* 821E619Ch */ case   15:  		/* lwz R7, <#[R31 + 24]> */
		/* 821E619Ch case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000018) );
		/* 821E619Ch case   15:*/		return 0x821E61A0;
		  /* 821E61A0h */ case   16:  		/* stw R7, <#[R11]> */
		/* 821E61A0h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821E61A0h case   16:*/		return 0x821E61A4;
		  /* 821E61A4h */ case   17:  		/* lwz R7, <#[R31 + 24]> */
		/* 821E61A4h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000018) );
		/* 821E61A4h case   17:*/		return 0x821E61A8;
		  /* 821E61A8h */ case   18:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821E61A8h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821E61A8h case   18:*/		return 0x821E61AC;
		  /* 821E61ACh */ case   19:  		/* stw R9, <#[R7]> */
		/* 821E61ACh case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821E61ACh case   19:*/		return 0x821E61B0;
		  /* 821E61B0h */ case   20:  		/* stw R8, <#[R11 + 4]> */
		/* 821E61B0h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821E61B0h case   20:*/		return 0x821E61B4;
		  /* 821E61B4h */ case   21:  		/* stw R10, <#[R31 + 24]> */
		/* 821E61B4h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 821E61B4h case   21:*/		return 0x821E61B8;
		  /* 821E61B8h */ case   22:  		/* stw R31, <#[R28 + 28]> */
		/* 821E61B8h case   22:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x0000001C) );
		/* 821E61B8h case   22:*/		return 0x821E61BC;
	}
	return 0x821E61BC;
} // Block from 821E6160h-821E61BCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821E61BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E61BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E61BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E61BC);
		  /* 821E61BCh */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821E61BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821E61BCh case    0:*/		return 0x821E61C0;
		  /* 821E61C0h */ case    1:  		/* cmplw CR6, R11, R25 */
		/* 821E61C0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821E61C0h case    1:*/		return 0x821E61C4;
		  /* 821E61C4h */ case    2:  		/* bc 4, CR6_EQ, -272 */
		/* 821E61C4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E60B4;  }
		/* 821E61C4h case    2:*/		return 0x821E61C8;
		  /* 821E61C8h */ case    3:  		/* addi R24, R25, 4 */
		/* 821E61C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R25,0x4);
		/* 821E61C8h case    3:*/		return 0x821E61CC;
		  /* 821E61CCh */ case    4:  		/* b -280 */
		/* 821E61CCh case    4:*/		return 0x821E60B4;
		/* 821E61CCh case    4:*/		return 0x821E61D0;
	}
	return 0x821E61D0;
} // Block from 821E61BCh-821E61D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E61D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E61D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E61D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E61D0);
		  /* 821E61D0h */ case    0:  		/* mr R6, R21 */
		/* 821E61D0h case    0:*/		regs.R6 = regs.R21;
		/* 821E61D0h case    0:*/		return 0x821E61D4;
		  /* 821E61D4h */ case    1:  		/* mr R5, R23 */
		/* 821E61D4h case    1:*/		regs.R5 = regs.R23;
		/* 821E61D4h case    1:*/		return 0x821E61D8;
		  /* 821E61D8h */ case    2:  		/* mr R4, R30 */
		/* 821E61D8h case    2:*/		regs.R4 = regs.R30;
		/* 821E61D8h case    2:*/		return 0x821E61DC;
		  /* 821E61DCh */ case    3:  		/* mr R3, R19 */
		/* 821E61DCh case    3:*/		regs.R3 = regs.R19;
		/* 821E61DCh case    3:*/		return 0x821E61E0;
		  /* 821E61E0h */ case    4:  		/* bl -128368 */
		/* 821E61E0h case    4:*/		regs.LR = 0x821E61E4; return 0x821C6C70;
		/* 821E61E0h case    4:*/		return 0x821E61E4;
		  /* 821E61E4h */ case    5:  		/* lwz R11, <#[R21 + 36]> */
		/* 821E61E4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000024) );
		/* 821E61E4h case    5:*/		return 0x821E61E8;
		  /* 821E61E8h */ case    6:  		/* mr R30, R31 */
		/* 821E61E8h case    6:*/		regs.R30 = regs.R31;
		/* 821E61E8h case    6:*/		return 0x821E61EC;
		  /* 821E61ECh */ case    7:  		/* ori R11, R11, 1 */
		/* 821E61ECh case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E61ECh case    7:*/		return 0x821E61F0;
		  /* 821E61F0h */ case    8:  		/* stw R11, <#[R21 + 36]> */
		/* 821E61F0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000024) );
		/* 821E61F0h case    8:*/		return 0x821E61F4;
	}
	return 0x821E61F4;
} // Block from 821E61D0h-821E61F4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E61F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E61F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E61F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E61F4);
		  /* 821E61F4h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821E61F4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821E61F4h case    0:*/		return 0x821E61F8;
		  /* 821E61F8h */ case    1:  		/* lwz R30, <#[R11 + 4]> */
		/* 821E61F8h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821E61F8h case    1:*/		return 0x821E61FC;
		  /* 821E61FCh */ case    2:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 821E61FCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 821E61FCh case    2:*/		return 0x821E6200;
		  /* 821E6200h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E6200h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E620C;  }
		/* 821E6200h case    3:*/		return 0x821E6204;
		  /* 821E6204h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821E6204h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E6204h case    4:*/		return 0x821E6208;
		  /* 821E6208h */ case    5:  		/* bc 4, CR6_EQ, -640 */
		/* 821E6208h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E5F88;  }
		/* 821E6208h case    5:*/		return 0x821E620C;
	}
	return 0x821E620C;
} // Block from 821E61F4h-821E620Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E620Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E620C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E620C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E620C);
		  /* 821E620Ch */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 821E620Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821E620Ch case    0:*/		return 0x821E6210;
		  /* 821E6210h */ case    1:  		/* bc 12, CR6_EQ, 440 */
		/* 821E6210h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E63C8;  }
		/* 821E6210h case    1:*/		return 0x821E6214;
		  /* 821E6214h */ case    2:  		/* lwz R11, <#[R20 + 56]> */
		/* 821E6214h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000038) );
		/* 821E6214h case    2:*/		return 0x821E6218;
		  /* 821E6218h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821E6218h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6218h case    3:*/		return 0x821E621C;
		  /* 821E621Ch */ case    4:  		/* bc 12, CR6_EQ, 428 */
		/* 821E621Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821E63C8;  }
		/* 821E621Ch case    4:*/		return 0x821E6220;
		  /* 821E6220h */ case    5:  		/* lwz R11, <#[R20 + 60]> */
		/* 821E6220h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000003C) );
		/* 821E6220h case    5:*/		return 0x821E6224;
		  /* 821E6224h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821E6224h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6224h case    6:*/		return 0x821E6228;
		  /* 821E6228h */ case    7:  		/* bc 12, CR6_EQ, 2104 */
		/* 821E6228h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E6A60;  }
		/* 821E6228h case    7:*/		return 0x821E622C;
		  /* 821E622Ch */ case    8:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E622Ch case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E622Ch case    8:*/		return 0x821E6230;
		  /* 821E6230h */ case    9:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E6230h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6230h case    9:*/		return 0x821E6234;
		  /* 821E6234h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821E6234h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6234h case   10:*/		return 0x821E6238;
		  /* 821E6238h */ case   11:  		/* bc 4, CR6_EQ, 2088 */
		/* 821E6238h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821E6A60;  }
		/* 821E6238h case   11:*/		return 0x821E623C;
		  /* 821E623Ch */ case   12:  		/* lwz R11, <#[R20 + 56]> */
		/* 821E623Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000038) );
		/* 821E623Ch case   12:*/		return 0x821E6240;
		  /* 821E6240h */ case   13:  		/* lwz R27, <#[R11 + 4]> */
		/* 821E6240h case   13:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6240h case   13:*/		return 0x821E6244;
		  /* 821E6244h */ case   14:  		/* cmplwi CR6, R27, 0 */
		/* 821E6244h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821E6244h case   14:*/		return 0x821E6248;
		  /* 821E6248h */ case   15:  		/* bc 12, CR6_EQ, 384 */
		/* 821E6248h case   15:*/		if ( regs.CR[6].eq ) { return 0x821E63C8;  }
		/* 821E6248h case   15:*/		return 0x821E624C;
		  /* 821E624Ch */ case   16:  		/* lwz R11, <#[R27 + 16]> */
		/* 821E624Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 821E624Ch case   16:*/		return 0x821E6250;
		  /* 821E6250h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821E6250h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6250h case   17:*/		return 0x821E6254;
		  /* 821E6254h */ case   18:  		/* bc 12, CR6_EQ, 84 */
		/* 821E6254h case   18:*/		if ( regs.CR[6].eq ) { return 0x821E62A8;  }
		/* 821E6254h case   18:*/		return 0x821E6258;
		  /* 821E6258h */ case   19:  		/* rlwinm R28, R11, 0, 0, 31 */
		/* 821E6258h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R28,regs.R11);
		/* 821E6258h case   19:*/		return 0x821E625C;
		  /* 821E625Ch */ case   20:  		/* lwz R11, <#[R28 + 4]> */
		/* 821E625Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821E625Ch case   20:*/		return 0x821E6260;
		  /* 821E6260h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821E6260h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6260h case   21:*/		return 0x821E6264;
		  /* 821E6264h */ case   22:  		/* bc 12, CR6_EQ, 68 */
		/* 821E6264h case   22:*/		if ( regs.CR[6].eq ) { return 0x821E62A8;  }
		/* 821E6264h case   22:*/		return 0x821E6268;
		  /* 821E6268h */ case   23:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E6268h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E6268h case   23:*/		return 0x821E626C;
		  /* 821E626Ch */ case   24:  		/* cmpwi CR6, R10, 0 */
		/* 821E626Ch case   24:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 821E626Ch case   24:*/		return 0x821E6270;
		  /* 821E6270h */ case   25:  		/* bc 4, CR6_EQ, 56 */
		/* 821E6270h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821E62A8;  }
		/* 821E6270h case   25:*/		return 0x821E6274;
		  /* 821E6274h */ case   26:  		/* lwz R10, <#[R28 + 8]> */
		/* 821E6274h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821E6274h case   26:*/		return 0x821E6278;
		  /* 821E6278h */ case   27:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821E6278h case   27:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821E6278h case   27:*/		return 0x821E627C;
		  /* 821E627Ch */ case   28:  		/* cmplwi CR6, R10, 6 */
		/* 821E627Ch case   28:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000006);
		/* 821E627Ch case   28:*/		return 0x821E6280;
		  /* 821E6280h */ case   29:  		/* bc 4, CR6_EQ, 48 */
		/* 821E6280h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821E62B0;  }
		/* 821E6280h case   29:*/		return 0x821E6284;
		  /* 821E6284h */ case   30:  		/* lwz R29, <#[R11 + 16]> */
		/* 821E6284h case   30:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000010) );
		/* 821E6284h case   30:*/		return 0x821E6288;
		  /* 821E6288h */ case   31:  		/* lwz R11, <#[R29 + 8]> */
		/* 821E6288h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821E6288h case   31:*/		return 0x821E628C;
		  /* 821E628Ch */ case   32:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E628Ch case   32:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E628Ch case   32:*/		return 0x821E6290;
		  /* 821E6290h */ case   33:  		/* cmplwi CR6, R11, 7680 */
		/* 821E6290h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001E00);
		/* 821E6290h case   33:*/		return 0x821E6294;
		  /* 821E6294h */ case   34:  		/* bc 12, CR6_EQ, 40 */
		/* 821E6294h case   34:*/		if ( regs.CR[6].eq ) { return 0x821E62BC;  }
		/* 821E6294h case   34:*/		return 0x821E6298;
		  /* 821E6298h */ case   35:  		/* lwz R11, <#[R28 + 28]> */
		/* 821E6298h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 821E6298h case   35:*/		return 0x821E629C;
		  /* 821E629Ch */ case   36:  		/* lwz R11, <#[R11 + 76]> */
		/* 821E629Ch case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000004C) );
		/* 821E629Ch case   36:*/		return 0x821E62A0;
		  /* 821E62A0h */ case   37:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821E62A0h case   37:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821E62A0h case   37:*/		return 0x821E62A4;
		  /* 821E62A4h */ case   38:  		/* bc 4, CR0_EQ, 300 */
		/* 821E62A4h case   38:*/		if ( !regs.CR[0].eq ) { return 0x821E63D0;  }
		/* 821E62A4h case   38:*/		return 0x821E62A8;
	}
	return 0x821E62A8;
} // Block from 821E620Ch-821E62A8h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821E62A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E62A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E62A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E62A8);
		  /* 821E62A8h */ case    0:  		/* lwz R27, <#[R27 + 8]> */
		/* 821E62A8h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R27 + 0x00000008) );
		/* 821E62A8h case    0:*/		return 0x821E62AC;
		  /* 821E62ACh */ case    1:  		/* b -104 */
		/* 821E62ACh case    1:*/		return 0x821E6244;
		/* 821E62ACh case    1:*/		return 0x821E62B0;
	}
	return 0x821E62B0;
} // Block from 821E62A8h-821E62B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E62B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E62B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E62B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E62B0);
		  /* 821E62B0h */ case    0:  		/* cmplwi CR6, R10, 61 */
		/* 821E62B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000003D);
		/* 821E62B0h case    0:*/		return 0x821E62B4;
		  /* 821E62B4h */ case    1:  		/* bc 4, CR6_EQ, -28 */
		/* 821E62B4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E6298;  }
		/* 821E62B4h case    1:*/		return 0x821E62B8;
		  /* 821E62B8h */ case    2:  		/* mr R29, R28 */
		/* 821E62B8h case    2:*/		regs.R29 = regs.R28;
		/* 821E62B8h case    2:*/		return 0x821E62BC;
	}
	return 0x821E62BC;
} // Block from 821E62B0h-821E62BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E62BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E62BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E62BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E62BC);
		  /* 821E62BCh */ case    0:  		/* lwz R10, <#[R29 + 4]> */
		/* 821E62BCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 821E62BCh case    0:*/		return 0x821E62C0;
		  /* 821E62C0h */ case    1:  		/* lwz R11, <#[R10]> */
		/* 821E62C0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821E62C0h case    1:*/		return 0x821E62C4;
		  /* 821E62C4h */ case    2:  		/* rlwinm. R9, R11, 0, 1, 1 */
		/* 821E62C4h case    2:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R9,regs.R11);
		/* 821E62C4h case    2:*/		return 0x821E62C8;
		  /* 821E62C8h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821E62C8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E62D8;  }
		/* 821E62C8h case    3:*/		return 0x821E62CC;
		  /* 821E62CCh */ case    4:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821E62CCh case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821E62CCh case    4:*/		return 0x821E62D0;
		  /* 821E62D0h */ case    5:  		/* mr R11, R17 */
		/* 821E62D0h case    5:*/		regs.R11 = regs.R17;
		/* 821E62D0h case    5:*/		return 0x821E62D4;
		  /* 821E62D4h */ case    6:  		/* bc 12, CR0_EQ, 8 */
		/* 821E62D4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E62DC;  }
		/* 821E62D4h case    6:*/		return 0x821E62D8;
	}
	return 0x821E62D8;
} // Block from 821E62BCh-821E62D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E62D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E62D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E62D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E62D8);
		  /* 821E62D8h */ case    0:  		/* li R11, 0 */
		/* 821E62D8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E62D8h case    0:*/		return 0x821E62DC;
	}
	return 0x821E62DC;
} // Block from 821E62D8h-821E62DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E62DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E62DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E62DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E62DC);
		  /* 821E62DCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E62DCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E62DCh case    0:*/		return 0x821E62E0;
		  /* 821E62E0h */ case    1:  		/* bc 12, CR0_EQ, -56 */
		/* 821E62E0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E62A8;  }
		/* 821E62E0h case    1:*/		return 0x821E62E4;
		  /* 821E62E4h */ case    2:  		/* lwz R11, <#[R10 + 8]> */
		/* 821E62E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821E62E4h case    2:*/		return 0x821E62E8;
		  /* 821E62E8h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 821E62E8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821E62E8h case    3:*/		return 0x821E62EC;
		  /* 821E62ECh */ case    4:  		/* bc 4, CR6_EQ, -68 */
		/* 821E62ECh case    4:*/		if ( !regs.CR[6].eq ) { return 0x821E62A8;  }
		/* 821E62ECh case    4:*/		return 0x821E62F0;
		  /* 821E62F0h */ case    5:  		/* lwz R31, <#[R10 + 16]> */
		/* 821E62F0h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000010) );
		/* 821E62F0h case    5:*/		return 0x821E62F4;
		  /* 821E62F4h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E62F4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E62F4h case    6:*/		return 0x821E62F8;
		  /* 821E62F8h */ case    7:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821E62F8h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821E62F8h case    7:*/		return 0x821E62FC;
		  /* 821E62FCh */ case    8:  		/* cmplwi CR6, R10, 11520 */
		/* 821E62FCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002D00);
		/* 821E62FCh case    8:*/		return 0x821E6300;
		  /* 821E6300h */ case    9:  		/* bc 4, CR6_EQ, -88 */
		/* 821E6300h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821E62A8;  }
		/* 821E6300h case    9:*/		return 0x821E6304;
		  /* 821E6304h */ case   10:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821E6304h case   10:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821E6304h case   10:*/		return 0x821E6308;
		  /* 821E6308h */ case   11:  		/* bc 4, CR0_EQ, -96 */
		/* 821E6308h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821E62A8;  }
		/* 821E6308h case   11:*/		return 0x821E630C;
		  /* 821E630Ch */ case   12:  		/* mr R4, R19 */
		/* 821E630Ch case   12:*/		regs.R4 = regs.R19;
		/* 821E630Ch case   12:*/		return 0x821E6310;
		  /* 821E6310h */ case   13:  		/* mr R3, R31 */
		/* 821E6310h case   13:*/		regs.R3 = regs.R31;
		/* 821E6310h case   13:*/		return 0x821E6314;
		  /* 821E6314h */ case   14:  		/* bl -531412 */
		/* 821E6314h case   14:*/		regs.LR = 0x821E6318; return 0x82164740;
		/* 821E6314h case   14:*/		return 0x821E6318;
		  /* 821E6318h */ case   15:  		/* lwz R30, <#[R31 + 28]> */
		/* 821E6318h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 821E6318h case   15:*/		return 0x821E631C;
		  /* 821E631Ch */ case   16:  		/* lwz R9, <#[R3]> */
		/* 821E631Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 821E631Ch case   16:*/		return 0x821E6320;
		  /* 821E6320h */ case   17:  		/* lwz R11, <#[R30 + 12]> */
		/* 821E6320h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E6320h case   17:*/		return 0x821E6324;
		  /* 821E6324h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821E6324h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6324h case   18:*/		return 0x821E6328;
		  /* 821E6328h */ case   19:  		/* bc 12, CR6_EQ, 1860 */
		/* 821E6328h case   19:*/		if ( regs.CR[6].eq ) { return 0x821E6A6C;  }
		/* 821E6328h case   19:*/		return 0x821E632C;
		  /* 821E632Ch */ case   20:  		/* lwz R10, <#[R11]> */
		/* 821E632Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E632Ch case   20:*/		return 0x821E6330;
		  /* 821E6330h */ case   21:  		/* cmplw CR6, R10, R9 */
		/* 821E6330h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821E6330h case   21:*/		return 0x821E6334;
		  /* 821E6334h */ case   22:  		/* bc 4, CR6_EQ, 12 */
		/* 821E6334h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821E6340;  }
		/* 821E6334h case   22:*/		return 0x821E6338;
		  /* 821E6338h */ case   23:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E6338h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E6338h case   23:*/		return 0x821E633C;
		  /* 821E633Ch */ case   24:  		/* b -24 */
		/* 821E633Ch case   24:*/		return 0x821E6324;
		/* 821E633Ch case   24:*/		return 0x821E6340;
	}
	return 0x821E6340;
} // Block from 821E62DCh-821E6340h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821E6340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6340);
		  /* 821E6340h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821E6340h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E6340h case    0:*/		return 0x821E6344;
		  /* 821E6344h */ case    1:  		/* bc 12, CR6_EQ, 1832 */
		/* 821E6344h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E6A6C;  }
		/* 821E6344h case    1:*/		return 0x821E6348;
		  /* 821E6348h */ case    2:  		/* lwz R11, <#[R21]> */
		/* 821E6348h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821E6348h case    2:*/		return 0x821E634C;
		  /* 821E634Ch */ case    3:  		/* cmplw CR6, R10, R11 */
		/* 821E634Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821E634Ch case    3:*/		return 0x821E6350;
		  /* 821E6350h */ case    4:  		/* bc 4, CR6_EQ, -168 */
		/* 821E6350h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821E62A8;  }
		/* 821E6350h case    4:*/		return 0x821E6354;
		  /* 821E6354h */ case    5:  		/* cmplw CR6, R9, R22 */
		/* 821E6354h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R22);
		/* 821E6354h case    5:*/		return 0x821E6358;
		  /* 821E6358h */ case    6:  		/* bc 4, CR6_EQ, -176 */
		/* 821E6358h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E62A8;  }
		/* 821E6358h case    6:*/		return 0x821E635C;
		  /* 821E635Ch */ case    7:  		/* li R6, 1 */
		/* 821E635Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E635Ch case    7:*/		return 0x821E6360;
		  /* 821E6360h */ case    8:  		/* li R5, 0 */
		/* 821E6360h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E6360h case    8:*/		return 0x821E6364;
		  /* 821E6364h */ case    9:  		/* mr R4, R31 */
		/* 821E6364h case    9:*/		regs.R4 = regs.R31;
		/* 821E6364h case    9:*/		return 0x821E6368;
		  /* 821E6368h */ case   10:  		/* mr R3, R19 */
		/* 821E6368h case   10:*/		regs.R3 = regs.R19;
		/* 821E6368h case   10:*/		return 0x821E636C;
		  /* 821E636Ch */ case   11:  		/* bl 282716 */
		/* 821E636Ch case   11:*/		regs.LR = 0x821E6370; return 0x8222B3C8;
		/* 821E636Ch case   11:*/		return 0x821E6370;
		  /* 821E6370h */ case   12:  		/* li R6, 1 */
		/* 821E6370h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E6370h case   12:*/		return 0x821E6374;
		  /* 821E6374h */ case   13:  		/* li R5, 0 */
		/* 821E6374h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E6374h case   13:*/		return 0x821E6378;
		  /* 821E6378h */ case   14:  		/* mr R4, R29 */
		/* 821E6378h case   14:*/		regs.R4 = regs.R29;
		/* 821E6378h case   14:*/		return 0x821E637C;
		  /* 821E637Ch */ case   15:  		/* mr R3, R19 */
		/* 821E637Ch case   15:*/		regs.R3 = regs.R19;
		/* 821E637Ch case   15:*/		return 0x821E6380;
		  /* 821E6380h */ case   16:  		/* bl 282696 */
		/* 821E6380h case   16:*/		regs.LR = 0x821E6384; return 0x8222B3C8;
		/* 821E6380h case   16:*/		return 0x821E6384;
		  /* 821E6384h */ case   17:  		/* cmplw CR6, R29, R28 */
		/* 821E6384h case   17:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 821E6384h case   17:*/		return 0x821E6388;
		  /* 821E6388h */ case   18:  		/* bc 12, CR6_EQ, 24 */
		/* 821E6388h case   18:*/		if ( regs.CR[6].eq ) { return 0x821E63A0;  }
		/* 821E6388h case   18:*/		return 0x821E638C;
		  /* 821E638Ch */ case   19:  		/* li R6, 1 */
		/* 821E638Ch case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E638Ch case   19:*/		return 0x821E6390;
		  /* 821E6390h */ case   20:  		/* li R5, 0 */
		/* 821E6390h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E6390h case   20:*/		return 0x821E6394;
		  /* 821E6394h */ case   21:  		/* mr R4, R28 */
		/* 821E6394h case   21:*/		regs.R4 = regs.R28;
		/* 821E6394h case   21:*/		return 0x821E6398;
		  /* 821E6398h */ case   22:  		/* mr R3, R19 */
		/* 821E6398h case   22:*/		regs.R3 = regs.R19;
		/* 821E6398h case   22:*/		return 0x821E639C;
		  /* 821E639Ch */ case   23:  		/* bl 282668 */
		/* 821E639Ch case   23:*/		regs.LR = 0x821E63A0; return 0x8222B3C8;
		/* 821E639Ch case   23:*/		return 0x821E63A0;
	}
	return 0x821E63A0;
} // Block from 821E6340h-821E63A0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E63A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E63A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E63A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E63A0);
		  /* 821E63A0h */ case    0:  		/* mr R5, R19 */
		/* 821E63A0h case    0:*/		regs.R5 = regs.R19;
		/* 821E63A0h case    0:*/		return 0x821E63A4;
		  /* 821E63A4h */ case    1:  		/* mr R4, R22 */
		/* 821E63A4h case    1:*/		regs.R4 = regs.R22;
		/* 821E63A4h case    1:*/		return 0x821E63A8;
		  /* 821E63A8h */ case    2:  		/* mr R3, R30 */
		/* 821E63A8h case    2:*/		regs.R3 = regs.R30;
		/* 821E63A8h case    2:*/		return 0x821E63AC;
		  /* 821E63ACh */ case    3:  		/* bl 300476 */
		/* 821E63ACh case    3:*/		regs.LR = 0x821E63B0; return 0x8222F968;
		/* 821E63ACh case    3:*/		return 0x821E63B0;
		  /* 821E63B0h */ case    4:  		/* mr R5, R19 */
		/* 821E63B0h case    4:*/		regs.R5 = regs.R19;
		/* 821E63B0h case    4:*/		return 0x821E63B4;
		  /* 821E63B4h */ case    5:  		/* mr R4, R22 */
		/* 821E63B4h case    5:*/		regs.R4 = regs.R22;
		/* 821E63B4h case    5:*/		return 0x821E63B8;
		  /* 821E63B8h */ case    6:  		/* lwz R3, <#[R21]> */
		/* 821E63B8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000000) );
		/* 821E63B8h case    6:*/		return 0x821E63BC;
		  /* 821E63BCh */ case    7:  		/* bl 300836 */
		/* 821E63BCh case    7:*/		regs.LR = 0x821E63C0; return 0x8222FAE0;
		/* 821E63BCh case    7:*/		return 0x821E63C0;
		  /* 821E63C0h */ case    8:  		/* stb R17, <#[R1 + 128]> */
		/* 821E63C0h case    8:*/		cpu::mem::store8( regs, regs.R17, (uint32)(regs.R1 + 0x00000080) );
		/* 821E63C0h case    8:*/		return 0x821E63C4;
		  /* 821E63C4h */ case    9:  		/* stb R17, <#[R1 + 129]> */
		/* 821E63C4h case    9:*/		cpu::mem::store8( regs, regs.R17, (uint32)(regs.R1 + 0x00000081) );
		/* 821E63C4h case    9:*/		return 0x821E63C8;
	}
	return 0x821E63C8;
} // Block from 821E63A0h-821E63C8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E63C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E63C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E63C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E63C8);
		  /* 821E63C8h */ case    0:  		/* lwz R11, <#[R21 + 24]> */
		/* 821E63C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000018) );
		/* 821E63C8h case    0:*/		return 0x821E63CC;
		  /* 821E63CCh */ case    1:  		/* b 64 */
		/* 821E63CCh case    1:*/		return 0x821E640C;
		/* 821E63CCh case    1:*/		return 0x821E63D0;
	}
	return 0x821E63D0;
} // Block from 821E63C8h-821E63D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E63D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E63D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E63D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E63D0);
		  /* 821E63D0h */ case    0:  		/* lbz R11, <#[R1 + 128]> */
		/* 821E63D0h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821E63D0h case    0:*/		return 0x821E63D4;
		  /* 821E63D4h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821E63D4h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E63D4h case    1:*/		return 0x821E63D8;
		  /* 821E63D8h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 821E63D8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E63EC;  }
		/* 821E63D8h case    2:*/		return 0x821E63DC;
		  /* 821E63DCh */ case    3:  		/* mr R3, R19 */
		/* 821E63DCh case    3:*/		regs.R3 = regs.R19;
		/* 821E63DCh case    3:*/		return 0x821E63E0;
		  /* 821E63E0h */ case    4:  		/* bl 20288 */
		/* 821E63E0h case    4:*/		regs.LR = 0x821E63E4; return 0x821EB320;
		/* 821E63E0h case    4:*/		return 0x821E63E4;
		  /* 821E63E4h */ case    5:  		/* li R11, 0 */
		/* 821E63E4h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E63E4h case    5:*/		return 0x821E63E8;
		  /* 821E63E8h */ case    6:  		/* stb R11, <#[R1 + 128]> */
		/* 821E63E8h case    6:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821E63E8h case    6:*/		return 0x821E63EC;
	}
	return 0x821E63EC;
} // Block from 821E63D0h-821E63ECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E63ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E63EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E63EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E63EC);
		  /* 821E63ECh */ case    0:  		/* mr R3, R19 */
		/* 821E63ECh case    0:*/		regs.R3 = regs.R19;
		/* 821E63ECh case    0:*/		return 0x821E63F0;
		  /* 821E63F0h */ case    1:  		/* lwz R4, <#[R28 + 28]> */
		/* 821E63F0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x0000001C) );
		/* 821E63F0h case    1:*/		return 0x821E63F4;
		  /* 821E63F4h */ case    2:  		/* bl -38532 */
		/* 821E63F4h case    2:*/		regs.LR = 0x821E63F8; return 0x821DCD70;
		/* 821E63F4h case    2:*/		return 0x821E63F8;
		  /* 821E63F8h */ case    3:  		/* b -444 */
		/* 821E63F8h case    3:*/		return 0x821E623C;
		/* 821E63F8h case    3:*/		return 0x821E63FC;
		  /* 821E63FCh */ case    4:  		/* lwz R10, <#[R11 + 60]> */
		/* 821E63FCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 821E63FCh case    4:*/		return 0x821E6400;
		  /* 821E6400h */ case    5:  		/* rlwinm R10, R10, 0, 30, 28 */
		/* 821E6400h case    5:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R10,regs.R10);
		/* 821E6400h case    5:*/		return 0x821E6404;
		  /* 821E6404h */ case    6:  		/* stw R10, <#[R11 + 60]> */
		/* 821E6404h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 821E6404h case    6:*/		return 0x821E6408;
		  /* 821E6408h */ case    7:  		/* lwz R11, <#[R11 + 24]> */
		/* 821E6408h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821E6408h case    7:*/		return 0x821E640C;
	}
	return 0x821E640C;
} // Block from 821E63ECh-821E640Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E640Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E640C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E640C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E640C);
		  /* 821E640Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E640Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E640Ch case    0:*/		return 0x821E6410;
		  /* 821E6410h */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821E6410h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E63FC;  }
		/* 821E6410h case    1:*/		return 0x821E6414;
		  /* 821E6414h */ case    2:  		/* addi R16, R16, 1 */
		/* 821E6414h case    2:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R16,0x1);
		/* 821E6414h case    2:*/		return 0x821E6418;
		  /* 821E6418h */ case    3:  		/* cmplw CR6, R16, R14 */
		/* 821E6418h case    3:*/		cpu::op::cmplw<6>(regs,regs.R16,regs.R14);
		/* 821E6418h case    3:*/		return 0x821E641C;
		  /* 821E641Ch */ case    4:  		/* bc 12, CR6_LT, -6048 */
		/* 821E641Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x821E4C7C;  }
		/* 821E641Ch case    4:*/		return 0x821E6420;
	}
	return 0x821E6420;
} // Block from 821E640Ch-821E6420h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E6420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6420);
		  /* 821E6420h */ case    0:  		/* lwz R20, <#[R1 + 804]> */
		/* 821E6420h case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x00000324) );
		/* 821E6420h case    0:*/		return 0x821E6424;
		  /* 821E6424h */ case    1:  		/* li R4, 0 */
		/* 821E6424h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E6424h case    1:*/		return 0x821E6428;
		  /* 821E6428h */ case    2:  		/* mr R3, R20 */
		/* 821E6428h case    2:*/		regs.R3 = regs.R20;
		/* 821E6428h case    2:*/		return 0x821E642C;
		  /* 821E642Ch */ case    3:  		/* bl -530236 */
		/* 821E642Ch case    3:*/		regs.LR = 0x821E6430; return 0x82164CF0;
		/* 821E642Ch case    3:*/		return 0x821E6430;
		  /* 821E6430h */ case    4:  		/* lwz R8, <#[R20 + 4]> */
		/* 821E6430h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R20 + 0x00000004) );
		/* 821E6430h case    4:*/		return 0x821E6434;
		  /* 821E6434h */ case    5:  		/* rlwinm. R11, R8, 0, 31, 31 */
		/* 821E6434h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R8);
		/* 821E6434h case    5:*/		return 0x821E6438;
		  /* 821E6438h */ case    6:  		/* bc 4, CR0_EQ, 220 */
		/* 821E6438h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E6514;  }
		/* 821E6438h case    6:*/		return 0x821E643C;
		  /* 821E643Ch */ case    7:  		/* cmplwi CR0, R8, 0 */
		/* 821E643Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 821E643Ch case    7:*/		return 0x821E6440;
		  /* 821E6440h */ case    8:  		/* bc 12, CR0_EQ, 212 */
		/* 821E6440h case    8:*/		if ( regs.CR[0].eq ) { return 0x821E6514;  }
		/* 821E6440h case    8:*/		return 0x821E6444;
		  /* 821E6444h */ case    9:  		/* lwz R11, <#[R8 + 20]> */
		/* 821E6444h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000014) );
		/* 821E6444h case    9:*/		return 0x821E6448;
		  /* 821E6448h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E6448h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E6448h case   10:*/		return 0x821E644C;
		  /* 821E644Ch */ case   11:  		/* bc 12, CR0_EQ, 40 */
		/* 821E644Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821E6474;  }
		/* 821E644Ch case   11:*/		return 0x821E6450;
		  /* 821E6450h */ case   12:  		/* lwz R11, <#[R8 + 28]> */
		/* 821E6450h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821E6450h case   12:*/		return 0x821E6454;
		  /* 821E6454h */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E6454h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E6454h case   13:*/		return 0x821E6458;
		  /* 821E6458h */ case   14:  		/* bc 12, CR0_EQ, 16 */
		/* 821E6458h case   14:*/		if ( regs.CR[0].eq ) { return 0x821E6468;  }
		/* 821E6458h case   14:*/		return 0x821E645C;
		  /* 821E645Ch */ case   15:  		/* lwz R11, <#[R8 + 36]> */
		/* 821E645Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000024) );
		/* 821E645Ch case   15:*/		return 0x821E6460;
		  /* 821E6460h */ case   16:  		/* addi R10, R8, 32 */
		/* 821E6460h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x20);
		/* 821E6460h case   16:*/		return 0x821E6464;
		  /* 821E6464h */ case   17:  		/* b 24 */
		/* 821E6464h case   17:*/		return 0x821E647C;
		/* 821E6464h case   17:*/		return 0x821E6468;
	}
	return 0x821E6468;
} // Block from 821E6420h-821E6468h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821E6468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6468);
		  /* 821E6468h */ case    0:  		/* lwz R11, <#[R8 + 28]> */
		/* 821E6468h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821E6468h case    0:*/		return 0x821E646C;
		  /* 821E646Ch */ case    1:  		/* addi R10, R8, 24 */
		/* 821E646Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x18);
		/* 821E646Ch case    1:*/		return 0x821E6470;
		  /* 821E6470h */ case    2:  		/* b 12 */
		/* 821E6470h case    2:*/		return 0x821E647C;
		/* 821E6470h case    2:*/		return 0x821E6474;
	}
	return 0x821E6474;
} // Block from 821E6468h-821E6474h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6474);
		  /* 821E6474h */ case    0:  		/* lwz R11, <#[R8 + 20]> */
		/* 821E6474h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000014) );
		/* 821E6474h case    0:*/		return 0x821E6478;
		  /* 821E6478h */ case    1:  		/* addi R10, R8, 16 */
		/* 821E6478h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x10);
		/* 821E6478h case    1:*/		return 0x821E647C;
	}
	return 0x821E647C;
} // Block from 821E6474h-821E647Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E647Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E647C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E647C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E647C);
		  /* 821E647Ch */ case    0:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821E647Ch case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E647Ch case    0:*/		return 0x821E6480;
		  /* 821E6480h */ case    1:  		/* addic R9, R9, -1 */
		/* 821E6480h case    1:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821E6480h case    1:*/		return 0x821E6484;
		  /* 821E6484h */ case    2:  		/* subfe R9, R9, R9 */
		/* 821E6484h case    2:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821E6484h case    2:*/		return 0x821E6488;
		  /* 821E6488h */ case    3:  		/* and R11, R9, R11 */
		/* 821E6488h case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821E6488h case    3:*/		return 0x821E648C;
		  /* 821E648Ch */ case    4:  		/* b 104 */
		/* 821E648Ch case    4:*/		return 0x821E64F4;
		/* 821E648Ch case    4:*/		return 0x821E6490;
		  /* 821E6490h */ case    5:  		/* lwz R9, <#[R11 + 8]> */
		/* 821E6490h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E6490h case    5:*/		return 0x821E6494;
		  /* 821E6494h */ case    6:  		/* rlwinm R7, R11, 0, 0, 30 */
		/* 821E6494h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R11);
		/* 821E6494h case    6:*/		return 0x821E6498;
		  /* 821E6498h */ case    7:  		/* rlwinm R9, R9, 0, 6, 4 */
		/* 821E6498h case    7:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R9,regs.R9);
		/* 821E6498h case    7:*/		return 0x821E649C;
		  /* 821E649Ch */ case    8:  		/* stw R9, <#[R11 + 8]> */
		/* 821E649Ch case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E649Ch case    8:*/		return 0x821E64A0;
		  /* 821E64A0h */ case    9:  		/* lwz R11, <#[R7 + 40]> */
		/* 821E64A0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000028) );
		/* 821E64A0h case    9:*/		return 0x821E64A4;
		  /* 821E64A4h */ case   10:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821E64A4h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E64A4h case   10:*/		return 0x821E64A8;
		  /* 821E64A8h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 821E64A8h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821E64B4;  }
		/* 821E64A8h case   11:*/		return 0x821E64AC;
		  /* 821E64ACh */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821E64ACh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E64ACh case   12:*/		return 0x821E64B0;
		  /* 821E64B0h */ case   13:  		/* bc 4, CR6_EQ, -32 */
		/* 821E64B0h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821E6490;  }
		/* 821E64B0h case   13:*/		return 0x821E64B4;
	}
	return 0x821E64B4;
} // Block from 821E647Ch-821E64B4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E64B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E64B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E64B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E64B4);
		  /* 821E64B4h */ case    0:  		/* addi R7, R8, 32 */
		/* 821E64B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R8,0x20);
		/* 821E64B4h case    0:*/		return 0x821E64B8;
		  /* 821E64B8h */ case    1:  		/* cmplw CR6, R10, R7 */
		/* 821E64B8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821E64B8h case    1:*/		return 0x821E64BC;
		  /* 821E64BCh */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821E64BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821E64FC;  }
		/* 821E64BCh case    2:*/		return 0x821E64C0;
		  /* 821E64C0h */ case    3:  		/* addi R9, R8, 24 */
		/* 821E64C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x18);
		/* 821E64C0h case    3:*/		return 0x821E64C4;
		  /* 821E64C4h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 821E64C4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821E64C4h case    4:*/		return 0x821E64C8;
		  /* 821E64C8h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821E64C8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E64E4;  }
		/* 821E64C8h case    5:*/		return 0x821E64CC;
		  /* 821E64CCh */ case    6:  		/* lwz R11, <#[R8 + 28]> */
		/* 821E64CCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821E64CCh case    6:*/		return 0x821E64D0;
		  /* 821E64D0h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E64D0h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E64D0h case    7:*/		return 0x821E64D4;
		  /* 821E64D4h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821E64D4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E64E4;  }
		/* 821E64D4h case    8:*/		return 0x821E64D8;
		  /* 821E64D8h */ case    9:  		/* lwz R11, <#[R9 + 4]> */
		/* 821E64D8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821E64D8h case    9:*/		return 0x821E64DC;
		  /* 821E64DCh */ case   10:  		/* mr R10, R9 */
		/* 821E64DCh case   10:*/		regs.R10 = regs.R9;
		/* 821E64DCh case   10:*/		return 0x821E64E0;
		  /* 821E64E0h */ case   11:  		/* b 12 */
		/* 821E64E0h case   11:*/		return 0x821E64EC;
		/* 821E64E0h case   11:*/		return 0x821E64E4;
	}
	return 0x821E64E4;
} // Block from 821E64B4h-821E64E4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E64E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E64E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E64E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E64E4);
		  /* 821E64E4h */ case    0:  		/* lwz R11, <#[R7 + 4]> */
		/* 821E64E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 821E64E4h case    0:*/		return 0x821E64E8;
		  /* 821E64E8h */ case    1:  		/* mr R10, R7 */
		/* 821E64E8h case    1:*/		regs.R10 = regs.R7;
		/* 821E64E8h case    1:*/		return 0x821E64EC;
	}
	return 0x821E64EC;
} // Block from 821E64E4h-821E64ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E64ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E64EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E64EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E64EC);
		  /* 821E64ECh */ case    0:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821E64ECh case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E64ECh case    0:*/		return 0x821E64F0;
		  /* 821E64F0h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821E64F0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E64FC;  }
		/* 821E64F0h case    1:*/		return 0x821E64F4;
	}
	return 0x821E64F4;
} // Block from 821E64ECh-821E64F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E64F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E64F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E64F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E64F4);
		  /* 821E64F4h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E64F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E64F4h case    0:*/		return 0x821E64F8;
		  /* 821E64F8h */ case    1:  		/* bc 4, CR6_EQ, -104 */
		/* 821E64F8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E6490;  }
		/* 821E64F8h case    1:*/		return 0x821E64FC;
	}
	return 0x821E64FC;
} // Block from 821E64F4h-821E64FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E64FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E64FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E64FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E64FC);
		  /* 821E64FCh */ case    0:  		/* rlwinm R11, R8, 0, 0, 30 */
		/* 821E64FCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R8);
		/* 821E64FCh case    0:*/		return 0x821E6500;
		  /* 821E6500h */ case    1:  		/* lwz R8, <#[R11 + 4]> */
		/* 821E6500h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6500h case    1:*/		return 0x821E6504;
		  /* 821E6504h */ case    2:  		/* rlwinm. R11, R8, 0, 31, 31 */
		/* 821E6504h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R8);
		/* 821E6504h case    2:*/		return 0x821E6508;
		  /* 821E6508h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E6508h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E6514;  }
		/* 821E6508h case    3:*/		return 0x821E650C;
		  /* 821E650Ch */ case    4:  		/* cmplwi CR6, R8, 0 */
		/* 821E650Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821E650Ch case    4:*/		return 0x821E6510;
		  /* 821E6510h */ case    5:  		/* bc 4, CR6_EQ, -204 */
		/* 821E6510h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E6444;  }
		/* 821E6510h case    5:*/		return 0x821E6514;
	}
	return 0x821E6514;
} // Block from 821E64FCh-821E6514h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E6514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6514);
		  /* 821E6514h */ case    0:  		/* lwz R11, <#[R1 + 148]> */
		/* 821E6514h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 821E6514h case    0:*/		return 0x821E6518;
		  /* 821E6518h */ case    1:  		/* li R29, 0 */
		/* 821E6518h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821E6518h case    1:*/		return 0x821E651C;
		  /* 821E651Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821E651Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E651Ch case    2:*/		return 0x821E6520;
		  /* 821E6520h */ case    3:  		/* bc 12, CR6_EQ, 564 */
		/* 821E6520h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E6754;  }
		/* 821E6520h case    3:*/		return 0x821E6524;
		  /* 821E6524h */ case    4:  		/* lbz R28, <#[R1 + 128]> */
		/* 821E6524h case    4:*/		cpu::mem::load8z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000080) );
		/* 821E6524h case    4:*/		return 0x821E6528;
		  /* 821E6528h */ case    5:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E6528h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E6528h case    5:*/		return 0x821E652C;
		  /* 821E652Ch */ case    6:  		/* li R30, 0 */
		/* 821E652Ch case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821E652Ch case    6:*/		return 0x821E6530;
		  /* 821E6530h */ case    7:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E6530h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E6530h case    7:*/		return 0x821E6534;
		  /* 821E6534h */ case    8:  		/* mulli R10, R10, 68 */
		/* 821E6534h case    8:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E6534h case    8:*/		return 0x821E6538;
		  /* 821E6538h */ case    9:  		/* add R10, R10, R11 */
		/* 821E6538h case    9:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E6538h case    9:*/		return 0x821E653C;
		  /* 821E653Ch */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821E653Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E653Ch case   10:*/		return 0x821E6540;
		  /* 821E6540h */ case   11:  		/* bc 4, CR6_LT, 524 */
		/* 821E6540h case   11:*/		if ( !regs.CR[6].lt ) { return 0x821E674C;  }
		/* 821E6540h case   11:*/		return 0x821E6544;
		  /* 821E6544h */ case   12:  		/* addi R31, R11, 4 */
		/* 821E6544h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 821E6544h case   12:*/		return 0x821E6548;
		  /* 821E6548h */ case   13:  		/* lwz R11, <#[R31 + 56]> */
		/* 821E6548h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821E6548h case   13:*/		return 0x821E654C;
		  /* 821E654Ch */ case   14:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 821E654Ch case   14:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 821E654Ch case   14:*/		return 0x821E6550;
		  /* 821E6550h */ case   15:  		/* bc 4, CR0_EQ, 476 */
		/* 821E6550h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821E672C;  }
		/* 821E6550h case   15:*/		return 0x821E6554;
		  /* 821E6554h */ case   16:  		/* lwz R11, <#[R31 + 24]> */
		/* 821E6554h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821E6554h case   16:*/		return 0x821E6558;
		  /* 821E6558h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821E6558h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6558h case   17:*/		return 0x821E655C;
		  /* 821E655Ch */ case   18:  		/* bc 12, CR6_EQ, 44 */
		/* 821E655Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x821E6588;  }
		/* 821E655Ch case   18:*/		return 0x821E6560;
		  /* 821E6560h */ case   19:  		/* lwz R10, <#[R11 + 60]> */
		/* 821E6560h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 821E6560h case   19:*/		return 0x821E6564;
		  /* 821E6564h */ case   20:  		/* rlwinm. R10, R10, 0, 28, 28 */
		/* 821E6564h case   20:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R10,regs.R10);
		/* 821E6564h case   20:*/		return 0x821E6568;
		  /* 821E6568h */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 821E6568h case   21:*/		if ( regs.CR[0].eq ) { return 0x821E6578;  }
		/* 821E6568h case   21:*/		return 0x821E656C;
		  /* 821E656Ch */ case   22:  		/* lwz R11, <#[R11 + 32]> */
		/* 821E656Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821E656Ch case   22:*/		return 0x821E6570;
		  /* 821E6570h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 821E6570h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6570h case   23:*/		return 0x821E6574;
		  /* 821E6574h */ case   24:  		/* bc 4, CR6_EQ, -20 */
		/* 821E6574h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821E6560;  }
		/* 821E6574h case   24:*/		return 0x821E6578;
	}
	return 0x821E6578;
} // Block from 821E6514h-821E6578h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821E6578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6578);
		  /* 821E6578h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E6578h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6578h case    0:*/		return 0x821E657C;
		  /* 821E657Ch */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821E657Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821E6588;  }
		/* 821E657Ch case    1:*/		return 0x821E6580;
		  /* 821E6580h */ case    2:  		/* li R30, 1 */
		/* 821E6580h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821E6580h case    2:*/		return 0x821E6584;
		  /* 821E6584h */ case    3:  		/* b 424 */
		/* 821E6584h case    3:*/		return 0x821E672C;
		/* 821E6584h case    3:*/		return 0x821E6588;
	}
	return 0x821E6588;
} // Block from 821E6578h-821E6588h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E6588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6588);
		  /* 821E6588h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821E6588h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E6588h case    0:*/		return 0x821E658C;
		  /* 821E658Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E658Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E658Ch case    1:*/		return 0x821E6590;
		  /* 821E6590h */ case    2:  		/* bc 12, CR6_EQ, 400 */
		/* 821E6590h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E6720;  }
		/* 821E6590h case    2:*/		return 0x821E6594;
		  /* 821E6594h */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E6594h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E6594h case    3:*/		return 0x821E6598;
		  /* 821E6598h */ case    4:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E6598h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E6598h case    4:*/		return 0x821E659C;
		  /* 821E659Ch */ case    5:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821E659Ch case    5:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821E659Ch case    5:*/		return 0x821E65A0;
		  /* 821E65A0h */ case    6:  		/* bc 12, CR0_EQ, 36 */
		/* 821E65A0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E65C4;  }
		/* 821E65A0h case    6:*/		return 0x821E65A4;
		  /* 821E65A4h */ case    7:  		/* b 16 */
		/* 821E65A4h case    7:*/		return 0x821E65B4;
		/* 821E65A4h case    7:*/		return 0x821E65A8;
		  /* 821E65A8h */ case    8:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E65A8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E65A8h case    8:*/		return 0x821E65AC;
		  /* 821E65ACh */ case    9:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821E65ACh case    9:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821E65ACh case    9:*/		return 0x821E65B0;
		  /* 821E65B0h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821E65B0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E65C0;  }
		/* 821E65B0h case   10:*/		return 0x821E65B4;
	}
	return 0x821E65B4;
} // Block from 821E6588h-821E65B4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E65B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E65B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E65B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E65B4);
		  /* 821E65B4h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821E65B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821E65B4h case    0:*/		return 0x821E65B8;
		  /* 821E65B8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E65B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E65B8h case    1:*/		return 0x821E65BC;
		  /* 821E65BCh */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821E65BCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E65A8;  }
		/* 821E65BCh case    2:*/		return 0x821E65C0;
	}
	return 0x821E65C0;
} // Block from 821E65B4h-821E65C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E65C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E65C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E65C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E65C0);
		  /* 821E65C0h */ case    0:  		/* stw R11, <#[R31]> */
		/* 821E65C0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E65C0h case    0:*/		return 0x821E65C4;
	}
	return 0x821E65C4;
} // Block from 821E65C0h-821E65C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E65C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E65C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E65C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E65C4);
		  /* 821E65C4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821E65C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E65C4h case    0:*/		return 0x821E65C8;
		  /* 821E65C8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E65C8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E65C8h case    1:*/		return 0x821E65CC;
		  /* 821E65CCh */ case    2:  		/* bc 12, CR6_EQ, 340 */
		/* 821E65CCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821E6720;  }
		/* 821E65CCh case    2:*/		return 0x821E65D0;
		  /* 821E65D0h */ case    3:  		/* lwz R11, <#[R31 + 56]> */
		/* 821E65D0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821E65D0h case    3:*/		return 0x821E65D4;
		  /* 821E65D4h */ case    4:  		/* rlwinm. R10, R11, 0, 21, 21 */
		/* 821E65D4h case    4:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R10,regs.R11);
		/* 821E65D4h case    4:*/		return 0x821E65D8;
		  /* 821E65D8h */ case    5:  		/* bc 4, CR0_EQ, 328 */
		/* 821E65D8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821E6720;  }
		/* 821E65D8h case    5:*/		return 0x821E65DC;
		  /* 821E65DCh */ case    6:  		/* rlwinm. R10, R11, 31, 31, 31 */
		/* 821E65DCh case    6:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R10,regs.R11);
		/* 821E65DCh case    6:*/		return 0x821E65E0;
		  /* 821E65E0h */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 821E65E0h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821E65EC;  }
		/* 821E65E0h case    7:*/		return 0x821E65E4;
		  /* 821E65E4h */ case    8:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821E65E4h case    8:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821E65E4h case    8:*/		return 0x821E65E8;
		  /* 821E65E8h */ case    9:  		/* bc 12, CR0_EQ, 312 */
		/* 821E65E8h case    9:*/		if ( regs.CR[0].eq ) { return 0x821E6720;  }
		/* 821E65E8h case    9:*/		return 0x821E65EC;
	}
	return 0x821E65EC;
} // Block from 821E65C4h-821E65ECh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E65ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E65EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E65EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E65EC);
		  /* 821E65ECh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821E65ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E65ECh case    0:*/		return 0x821E65F0;
		  /* 821E65F0h */ case    1:  		/* lwz R11, <#[R11 + 48]> */
		/* 821E65F0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821E65F0h case    1:*/		return 0x821E65F4;
		  /* 821E65F4h */ case    2:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821E65F4h case    2:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821E65F4h case    2:*/		return 0x821E65F8;
		  /* 821E65F8h */ case    3:  		/* bc 4, CR0_EQ, 296 */
		/* 821E65F8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E6720;  }
		/* 821E65F8h case    3:*/		return 0x821E65FC;
		  /* 821E65FCh */ case    4:  		/* lwz R11, <#[R31 + 32]> */
		/* 821E65FCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821E65FCh case    4:*/		return 0x821E6600;
		  /* 821E6600h */ case    5:  		/* rlwinm. R9, R11, 0, 23, 30 */
		/* 821E6600h case    5:*/		cpu::op::rlwinm<1,0,23,30>(regs,&regs.R9,regs.R11);
		/* 821E6600h case    5:*/		return 0x821E6604;
		  /* 821E6604h */ case    6:  		/* bc 12, CR0_EQ, 40 */
		/* 821E6604h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E662C;  }
		/* 821E6604h case    6:*/		return 0x821E6608;
		  /* 821E6608h */ case    7:  		/* rlwinm. R9, R11, 0, 4, 4 */
		/* 821E6608h case    7:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R9,regs.R11);
		/* 821E6608h case    7:*/		return 0x821E660C;
		  /* 821E660Ch */ case    8:  		/* bc 4, CR0_EQ, 32 */
		/* 821E660Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E662C;  }
		/* 821E660Ch case    8:*/		return 0x821E6610;
		  /* 821E6610h */ case    9:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 821E6610h case    9:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 821E6610h case    9:*/		return 0x821E6614;
		  /* 821E6614h */ case   10:  		/* bc 4, CR0_EQ, 12 */
		/* 821E6614h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821E6620;  }
		/* 821E6614h case   10:*/		return 0x821E6618;
		  /* 821E6618h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821E6618h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E6618h case   11:*/		return 0x821E661C;
		  /* 821E661Ch */ case   12:  		/* bc 12, CR6_EQ, 260 */
		/* 821E661Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x821E6720;  }
		/* 821E661Ch case   12:*/		return 0x821E6620;
	}
	return 0x821E6620;
} // Block from 821E65ECh-821E6620h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E6620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6620);
		  /* 821E6620h */ case    0:  		/* li R4, 3511 */
		/* 821E6620h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDB7);
		/* 821E6620h case    0:*/		return 0x821E6624;
		  /* 821E6624h */ case    1:  		/* mr R3, R20 */
		/* 821E6624h case    1:*/		regs.R3 = regs.R20;
		/* 821E6624h case    1:*/		return 0x821E6628;
		  /* 821E6628h */ case    2:  		/* bl -608192 */
		/* 821E6628h case    2:*/		regs.LR = 0x821E662C; return 0x82151E68;
		/* 821E6628h case    2:*/		return 0x821E662C;
	}
	return 0x821E662C;
} // Block from 821E6620h-821E662Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E662Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E662C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E662C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E662C);
		  /* 821E662Ch */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821E662Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821E662Ch case    0:*/		return 0x821E6630;
		  /* 821E6630h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821E6630h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E6640;  }
		/* 821E6630h case    1:*/		return 0x821E6634;
		  /* 821E6634h */ case    2:  		/* mr R3, R20 */
		/* 821E6634h case    2:*/		regs.R3 = regs.R20;
		/* 821E6634h case    2:*/		return 0x821E6638;
		  /* 821E6638h */ case    3:  		/* bl 19688 */
		/* 821E6638h case    3:*/		regs.LR = 0x821E663C; return 0x821EB320;
		/* 821E6638h case    3:*/		return 0x821E663C;
		  /* 821E663Ch */ case    4:  		/* li R28, 0 */
		/* 821E663Ch case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821E663Ch case    4:*/		return 0x821E6640;
	}
	return 0x821E6640;
} // Block from 821E662Ch-821E6640h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E6640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6640);
		  /* 821E6640h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E6640h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E6640h case    0:*/		return 0x821E6644;
		  /* 821E6644h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E6644h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6644h case    1:*/		return 0x821E6648;
		  /* 821E6648h */ case    2:  		/* bc 12, CR6_EQ, 168 */
		/* 821E6648h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E66F0;  }
		/* 821E6648h case    2:*/		return 0x821E664C;
		  /* 821E664Ch */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E664Ch case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E664Ch case    3:*/		return 0x821E6650;
		  /* 821E6650h */ case    4:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E6650h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E6650h case    4:*/		return 0x821E6654;
		  /* 821E6654h */ case    5:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821E6654h case    5:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821E6654h case    5:*/		return 0x821E6658;
		  /* 821E6658h */ case    6:  		/* bc 12, CR0_EQ, 36 */
		/* 821E6658h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E667C;  }
		/* 821E6658h case    6:*/		return 0x821E665C;
		  /* 821E665Ch */ case    7:  		/* b 16 */
		/* 821E665Ch case    7:*/		return 0x821E666C;
		/* 821E665Ch case    7:*/		return 0x821E6660;
		  /* 821E6660h */ case    8:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E6660h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E6660h case    8:*/		return 0x821E6664;
		  /* 821E6664h */ case    9:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821E6664h case    9:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821E6664h case    9:*/		return 0x821E6668;
		  /* 821E6668h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821E6668h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E6678;  }
		/* 821E6668h case   10:*/		return 0x821E666C;
	}
	return 0x821E666C;
} // Block from 821E6640h-821E666Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E666Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E666C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E666C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E666C);
		  /* 821E666Ch */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821E666Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821E666Ch case    0:*/		return 0x821E6670;
		  /* 821E6670h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E6670h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6670h case    1:*/		return 0x821E6674;
		  /* 821E6674h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821E6674h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E6660;  }
		/* 821E6674h case    2:*/		return 0x821E6678;
	}
	return 0x821E6678;
} // Block from 821E666Ch-821E6678h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6678);
		  /* 821E6678h */ case    0:  		/* stw R11, <#[R31 + 8]> */
		/* 821E6678h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E6678h case    0:*/		return 0x821E667C;
	}
	return 0x821E667C;
} // Block from 821E6678h-821E667Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E667Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E667C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E667C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E667C);
		  /* 821E667Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E667Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E667Ch case    0:*/		return 0x821E6680;
		  /* 821E6680h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E6680h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6680h case    1:*/		return 0x821E6684;
		  /* 821E6684h */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 821E6684h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E66F0;  }
		/* 821E6684h case    2:*/		return 0x821E6688;
		  /* 821E6688h */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E6688h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E6688h case    3:*/		return 0x821E668C;
		  /* 821E668Ch */ case    4:  		/* lwz R10, <#[R11 + 36]> */
		/* 821E668Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821E668Ch case    4:*/		return 0x821E6690;
		  /* 821E6690h */ case    5:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E6690h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E6690h case    5:*/		return 0x821E6694;
		  /* 821E6694h */ case    6:  		/* bc 4, CR0_EQ, 92 */
		/* 821E6694h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E66F0;  }
		/* 821E6694h case    6:*/		return 0x821E6698;
		  /* 821E6698h */ case    7:  		/* lwz R11, <#[R11 + 32]> */
		/* 821E6698h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821E6698h case    7:*/		return 0x821E669C;
		  /* 821E669Ch */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E669Ch case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E669Ch case    8:*/		return 0x821E66A0;
		  /* 821E66A0h */ case    9:  		/* addic. R3, R11, -40 */
		/* 821E66A0h case    9:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFD8);
		/* 821E66A0h case    9:*/		return 0x821E66A4;
		  /* 821E66A4h */ case   10:  		/* bc 12, CR0_EQ, 76 */
		/* 821E66A4h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E66F0;  }
		/* 821E66A4h case   10:*/		return 0x821E66A8;
		  /* 821E66A8h */ case   11:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E66A8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E66A8h case   11:*/		return 0x821E66AC;
		  /* 821E66ACh */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E66ACh case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E66ACh case   12:*/		return 0x821E66B0;
		  /* 821E66B0h */ case   13:  		/* cmplwi CR6, R11, 11520 */
		/* 821E66B0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002D00);
		/* 821E66B0h case   13:*/		return 0x821E66B4;
		  /* 821E66B4h */ case   14:  		/* bc 4, CR6_EQ, 60 */
		/* 821E66B4h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821E66F0;  }
		/* 821E66B4h case   14:*/		return 0x821E66B8;
		  /* 821E66B8h */ case   15:  		/* mr R4, R20 */
		/* 821E66B8h case   15:*/		regs.R4 = regs.R20;
		/* 821E66B8h case   15:*/		return 0x821E66BC;
		  /* 821E66BCh */ case   16:  		/* bl -532348 */
		/* 821E66BCh case   16:*/		regs.LR = 0x821E66C0; return 0x82164740;
		/* 821E66BCh case   16:*/		return 0x821E66C0;
		  /* 821E66C0h */ case   17:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E66C0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E66C0h case   17:*/		return 0x821E66C4;
		  /* 821E66C4h */ case   18:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 821E66C4h case   18:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 821E66C4h case   18:*/		return 0x821E66C8;
		  /* 821E66C8h */ case   19:  		/* bc 4, CR0_EQ, 40 */
		/* 821E66C8h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821E66F0;  }
		/* 821E66C8h case   19:*/		return 0x821E66CC;
		  /* 821E66CCh */ case   20:  		/* rlwinm R10, R11, 30, 28, 31 */
		/* 821E66CCh case   20:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R10,regs.R11);
		/* 821E66CCh case   20:*/		return 0x821E66D0;
		  /* 821E66D0h */ case   21:  		/* cmpwi CR6, R10, 10 */
		/* 821E66D0h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000A);
		/* 821E66D0h case   21:*/		return 0x821E66D4;
		  /* 821E66D4h */ case   22:  		/* bc 4, CR6_EQ, 28 */
		/* 821E66D4h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821E66F0;  }
		/* 821E66D4h case   22:*/		return 0x821E66D8;
		  /* 821E66D8h */ case   23:  		/* nor R11, R11, R11 */
		/* 821E66D8h case   23:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821E66D8h case   23:*/		return 0x821E66DC;
		  /* 821E66DCh */ case   24:  		/* rlwinm. R11, R11, 25, 31, 31 */
		/* 821E66DCh case   24:*/		cpu::op::rlwinm<1,25,31,31>(regs,&regs.R11,regs.R11);
		/* 821E66DCh case   24:*/		return 0x821E66E0;
		  /* 821E66E0h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 821E66E0h case   25:*/		if ( regs.CR[0].eq ) { return 0x821E66F0;  }
		/* 821E66E0h case   25:*/		return 0x821E66E4;
		  /* 821E66E4h */ case   26:  		/* li R4, 3592 */
		/* 821E66E4h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0xE08);
		/* 821E66E4h case   26:*/		return 0x821E66E8;
		  /* 821E66E8h */ case   27:  		/* mr R3, R20 */
		/* 821E66E8h case   27:*/		regs.R3 = regs.R20;
		/* 821E66E8h case   27:*/		return 0x821E66EC;
		  /* 821E66ECh */ case   28:  		/* bl -608628 */
		/* 821E66ECh case   28:*/		regs.LR = 0x821E66F0; return 0x82151D78;
		/* 821E66ECh case   28:*/		return 0x821E66F0;
	}
	return 0x821E66F0;
} // Block from 821E667Ch-821E66F0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E66F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E66F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E66F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E66F0);
		  /* 821E66F0h */ case    0:  		/* addi R4, R31, -4 */
		/* 821E66F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0xFFFFFFFC);
		/* 821E66F0h case    0:*/		return 0x821E66F4;
		  /* 821E66F4h */ case    1:  		/* mr R3, R20 */
		/* 821E66F4h case    1:*/		regs.R3 = regs.R20;
		/* 821E66F4h case    1:*/		return 0x821E66F8;
		  /* 821E66F8h */ case    2:  		/* bl -39216 */
		/* 821E66F8h case    2:*/		regs.LR = 0x821E66FC; return 0x821DCDC8;
		/* 821E66F8h case    2:*/		return 0x821E66FC;
		  /* 821E66FCh */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E66FCh case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E66FCh case    3:*/		return 0x821E6700;
		  /* 821E6700h */ case    4:  		/* bc 12, CR0_EQ, 20 */
		/* 821E6700h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E6714;  }
		/* 821E6700h case    4:*/		return 0x821E6704;
		  /* 821E6704h */ case    5:  		/* li R28, 1 */
		/* 821E6704h case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821E6704h case    5:*/		return 0x821E6708;
		  /* 821E6708h */ case    6:  		/* addi R29, R29, 1 */
		/* 821E6708h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821E6708h case    6:*/		return 0x821E670C;
		  /* 821E670Ch */ case    7:  		/* stb R28, <#[R1 + 129]> */
		/* 821E670Ch case    7:*/		cpu::mem::store8( regs, regs.R28, (uint32)(regs.R1 + 0x00000081) );
		/* 821E670Ch case    7:*/		return 0x821E6710;
		  /* 821E6710h */ case    8:  		/* b 16 */
		/* 821E6710h case    8:*/		return 0x821E6720;
		/* 821E6710h case    8:*/		return 0x821E6714;
	}
	return 0x821E6714;
} // Block from 821E66F0h-821E6714h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E6714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6714);
		  /* 821E6714h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 821E6714h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821E6714h case    0:*/		return 0x821E6718;
		  /* 821E6718h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E6718h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6718h case    1:*/		return 0x821E671C;
		  /* 821E671Ch */ case    2:  		/* bc 4, CR6_EQ, 860 */
		/* 821E671Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E6A78;  }
		/* 821E671Ch case    2:*/		return 0x821E6720;
	}
	return 0x821E6720;
} // Block from 821E6714h-821E6720h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6720);
		  /* 821E6720h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 821E6720h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821E6720h case    0:*/		return 0x821E6724;
		  /* 821E6724h */ case    1:  		/* ori R11, R11, 8 */
		/* 821E6724h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 821E6724h case    1:*/		return 0x821E6728;
		  /* 821E6728h */ case    2:  		/* stw R11, <#[R31 + 56]> */
		/* 821E6728h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821E6728h case    2:*/		return 0x821E672C;
	}
	return 0x821E672C;
} // Block from 821E6720h-821E672Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E672Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E672C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E672C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E672C);
		  /* 821E672Ch */ case    0:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E672Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E672Ch case    0:*/		return 0x821E6730;
		  /* 821E6730h */ case    1:  		/* addi R31, R31, 68 */
		/* 821E6730h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x44);
		/* 821E6730h case    1:*/		return 0x821E6734;
		  /* 821E6734h */ case    2:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E6734h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E6734h case    2:*/		return 0x821E6738;
		  /* 821E6738h */ case    3:  		/* mulli R10, R10, 68 */
		/* 821E6738h case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E6738h case    3:*/		return 0x821E673C;
		  /* 821E673Ch */ case    4:  		/* add R11, R10, R11 */
		/* 821E673Ch case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E673Ch case    4:*/		return 0x821E6740;
		  /* 821E6740h */ case    5:  		/* addi R10, R31, -4 */
		/* 821E6740h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFFC);
		/* 821E6740h case    5:*/		return 0x821E6744;
		  /* 821E6744h */ case    6:  		/* cmplw CR6, R10, R11 */
		/* 821E6744h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821E6744h case    6:*/		return 0x821E6748;
		  /* 821E6748h */ case    7:  		/* bc 12, CR6_LT, -512 */
		/* 821E6748h case    7:*/		if ( regs.CR[6].lt ) { return 0x821E6548;  }
		/* 821E6748h case    7:*/		return 0x821E674C;
	}
	return 0x821E674C;
} // Block from 821E672Ch-821E674Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E674Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E674C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E674C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E674C);
		  /* 821E674Ch */ case    0:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821E674Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821E674Ch case    0:*/		return 0x821E6750;
		  /* 821E6750h */ case    1:  		/* bc 4, CR0_EQ, -552 */
		/* 821E6750h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E6528;  }
		/* 821E6750h case    1:*/		return 0x821E6754;
	}
	return 0x821E6754;
} // Block from 821E674Ch-821E6754h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E6754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6754);
		  /* 821E6754h */ case    0:  		/* lwz R11, <#[R20 + 40]> */
		/* 821E6754h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000028) );
		/* 821E6754h case    0:*/		return 0x821E6758;
		  /* 821E6758h */ case    1:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821E6758h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821E6758h case    1:*/		return 0x821E675C;
		  /* 821E675Ch */ case    2:  		/* bc 12, CR0_EQ, 376 */
		/* 821E675Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821E68D4;  }
		/* 821E675Ch case    2:*/		return 0x821E6760;
		  /* 821E6760h */ case    3:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E6760h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E6760h case    3:*/		return 0x821E6764;
		  /* 821E6764h */ case    4:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E6764h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E6764h case    4:*/		return 0x821E6768;
		  /* 821E6768h */ case    5:  		/* mulli R10, R10, 68 */
		/* 821E6768h case    5:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E6768h case    5:*/		return 0x821E676C;
		  /* 821E676Ch */ case    6:  		/* add R10, R10, R11 */
		/* 821E676Ch case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E676Ch case    6:*/		return 0x821E6770;
		  /* 821E6770h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 821E6770h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E6770h case    7:*/		return 0x821E6774;
		  /* 821E6774h */ case    8:  		/* bc 4, CR6_LT, 352 */
		/* 821E6774h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821E68D4;  }
		/* 821E6774h case    8:*/		return 0x821E6778;
		  /* 821E6778h */ case    9:  		/* addi R31, R11, 4 */
		/* 821E6778h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 821E6778h case    9:*/		return 0x821E677C;
		  /* 821E677Ch */ case   10:  		/* lwz R11, <#[R31 + 56]> */
		/* 821E677Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821E677Ch case   10:*/		return 0x821E6780;
		  /* 821E6780h */ case   11:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 821E6780h case   11:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 821E6780h case   11:*/		return 0x821E6784;
		  /* 821E6784h */ case   12:  		/* bc 4, CR0_EQ, 304 */
		/* 821E6784h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821E68B4;  }
		/* 821E6784h case   12:*/		return 0x821E6788;
		  /* 821E6788h */ case   13:  		/* rlwinm. R10, R11, 0, 21, 21 */
		/* 821E6788h case   13:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R10,regs.R11);
		/* 821E6788h case   13:*/		return 0x821E678C;
		  /* 821E678Ch */ case   14:  		/* bc 4, CR0_EQ, 296 */
		/* 821E678Ch case   14:*/		if ( !regs.CR[0].eq ) { return 0x821E68B4;  }
		/* 821E678Ch case   14:*/		return 0x821E6790;
		  /* 821E6790h */ case   15:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 821E6790h case   15:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 821E6790h case   15:*/		return 0x821E6794;
		  /* 821E6794h */ case   16:  		/* bc 4, CR0_EQ, 288 */
		/* 821E6794h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821E68B4;  }
		/* 821E6794h case   16:*/		return 0x821E6798;
		  /* 821E6798h */ case   17:  		/* lwz R11, <#[R31]> */
		/* 821E6798h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E6798h case   17:*/		return 0x821E679C;
		  /* 821E679Ch */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821E679Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E679Ch case   18:*/		return 0x821E67A0;
		  /* 821E67A0h */ case   19:  		/* bc 12, CR6_EQ, 276 */
		/* 821E67A0h case   19:*/		if ( regs.CR[6].eq ) { return 0x821E68B4;  }
		/* 821E67A0h case   19:*/		return 0x821E67A4;
		  /* 821E67A4h */ case   20:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E67A4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E67A4h case   20:*/		return 0x821E67A8;
		  /* 821E67A8h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821E67A8h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E67A8h case   21:*/		return 0x821E67AC;
		  /* 821E67ACh */ case   22:  		/* bc 12, CR6_EQ, 264 */
		/* 821E67ACh case   22:*/		if ( regs.CR[6].eq ) { return 0x821E68B4;  }
		/* 821E67ACh case   22:*/		return 0x821E67B0;
		  /* 821E67B0h */ case   23:  		/* lwz R11, <#[R31]> */
		/* 821E67B0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E67B0h case   23:*/		return 0x821E67B4;
		  /* 821E67B4h */ case   24:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E67B4h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E67B4h case   24:*/		return 0x821E67B8;
		  /* 821E67B8h */ case   25:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821E67B8h case   25:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821E67B8h case   25:*/		return 0x821E67BC;
		  /* 821E67BCh */ case   26:  		/* bc 12, CR0_EQ, 48 */
		/* 821E67BCh case   26:*/		if ( regs.CR[0].eq ) { return 0x821E67EC;  }
		/* 821E67BCh case   26:*/		return 0x821E67C0;
		  /* 821E67C0h */ case   27:  		/* b 16 */
		/* 821E67C0h case   27:*/		return 0x821E67D0;
		/* 821E67C0h case   27:*/		return 0x821E67C4;
		  /* 821E67C4h */ case   28:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E67C4h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E67C4h case   28:*/		return 0x821E67C8;
		  /* 821E67C8h */ case   29:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821E67C8h case   29:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821E67C8h case   29:*/		return 0x821E67CC;
		  /* 821E67CCh */ case   30:  		/* bc 12, CR0_EQ, 16 */
		/* 821E67CCh case   30:*/		if ( regs.CR[0].eq ) { return 0x821E67DC;  }
		/* 821E67CCh case   30:*/		return 0x821E67D0;
	}
	return 0x821E67D0;
} // Block from 821E6754h-821E67D0h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821E67D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E67D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E67D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E67D0);
		  /* 821E67D0h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821E67D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821E67D0h case    0:*/		return 0x821E67D4;
		  /* 821E67D4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E67D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E67D4h case    1:*/		return 0x821E67D8;
		  /* 821E67D8h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821E67D8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E67C4;  }
		/* 821E67D8h case    2:*/		return 0x821E67DC;
	}
	return 0x821E67DC;
} // Block from 821E67D0h-821E67DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E67DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E67DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E67DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E67DC);
		  /* 821E67DCh */ case    0:  		/* stw R11, <#[R31]> */
		/* 821E67DCh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E67DCh case    0:*/		return 0x821E67E0;
		  /* 821E67E0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E67E0h case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E67E0h case    1:*/		return 0x821E67E4;
		  /* 821E67E4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821E67E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E67E4h case    2:*/		return 0x821E67E8;
		  /* 821E67E8h */ case    3:  		/* bc 12, CR6_EQ, 204 */
		/* 821E67E8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E68B4;  }
		/* 821E67E8h case    3:*/		return 0x821E67EC;
	}
	return 0x821E67EC;
} // Block from 821E67DCh-821E67ECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E67ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E67EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E67EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E67EC);
		  /* 821E67ECh */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E67ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E67ECh case    0:*/		return 0x821E67F0;
		  /* 821E67F0h */ case    1:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E67F0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E67F0h case    1:*/		return 0x821E67F4;
		  /* 821E67F4h */ case    2:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821E67F4h case    2:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821E67F4h case    2:*/		return 0x821E67F8;
		  /* 821E67F8h */ case    3:  		/* bc 12, CR0_EQ, 48 */
		/* 821E67F8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E6828;  }
		/* 821E67F8h case    3:*/		return 0x821E67FC;
		  /* 821E67FCh */ case    4:  		/* b 16 */
		/* 821E67FCh case    4:*/		return 0x821E680C;
		/* 821E67FCh case    4:*/		return 0x821E6800;
		  /* 821E6800h */ case    5:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E6800h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E6800h case    5:*/		return 0x821E6804;
		  /* 821E6804h */ case    6:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821E6804h case    6:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821E6804h case    6:*/		return 0x821E6808;
		  /* 821E6808h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 821E6808h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E6818;  }
		/* 821E6808h case    7:*/		return 0x821E680C;
	}
	return 0x821E680C;
} // Block from 821E67ECh-821E680Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E680Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E680C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E680C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E680C);
		  /* 821E680Ch */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821E680Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821E680Ch case    0:*/		return 0x821E6810;
		  /* 821E6810h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E6810h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6810h case    1:*/		return 0x821E6814;
		  /* 821E6814h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821E6814h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E6800;  }
		/* 821E6814h case    2:*/		return 0x821E6818;
	}
	return 0x821E6818;
} // Block from 821E680Ch-821E6818h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6818);
		  /* 821E6818h */ case    0:  		/* stw R11, <#[R31 + 8]> */
		/* 821E6818h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E6818h case    0:*/		return 0x821E681C;
		  /* 821E681Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821E681Ch case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821E681Ch case    1:*/		return 0x821E6820;
		  /* 821E6820h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821E6820h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6820h case    2:*/		return 0x821E6824;
		  /* 821E6824h */ case    3:  		/* bc 12, CR6_EQ, 144 */
		/* 821E6824h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E68B4;  }
		/* 821E6824h case    3:*/		return 0x821E6828;
	}
	return 0x821E6828;
} // Block from 821E6818h-821E6828h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E6828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6828);
		  /* 821E6828h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E6828h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E6828h case    0:*/		return 0x821E682C;
		  /* 821E682Ch */ case    1:  		/* lwz R10, <#[R11 + 36]> */
		/* 821E682Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821E682Ch case    1:*/		return 0x821E6830;
		  /* 821E6830h */ case    2:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E6830h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E6830h case    2:*/		return 0x821E6834;
		  /* 821E6834h */ case    3:  		/* bc 4, CR0_EQ, 128 */
		/* 821E6834h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E68B4;  }
		/* 821E6834h case    3:*/		return 0x821E6838;
		  /* 821E6838h */ case    4:  		/* lwz R11, <#[R11 + 32]> */
		/* 821E6838h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821E6838h case    4:*/		return 0x821E683C;
		  /* 821E683Ch */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E683Ch case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E683Ch case    5:*/		return 0x821E6840;
		  /* 821E6840h */ case    6:  		/* addic. R3, R11, -40 */
		/* 821E6840h case    6:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFD8);
		/* 821E6840h case    6:*/		return 0x821E6844;
		  /* 821E6844h */ case    7:  		/* bc 12, CR0_EQ, 112 */
		/* 821E6844h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E68B4;  }
		/* 821E6844h case    7:*/		return 0x821E6848;
		  /* 821E6848h */ case    8:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E6848h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E6848h case    8:*/		return 0x821E684C;
		  /* 821E684Ch */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E684Ch case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E684Ch case    9:*/		return 0x821E6850;
		  /* 821E6850h */ case   10:  		/* cmplwi CR6, R11, 11520 */
		/* 821E6850h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002D00);
		/* 821E6850h case   10:*/		return 0x821E6854;
		  /* 821E6854h */ case   11:  		/* bc 4, CR6_EQ, 96 */
		/* 821E6854h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821E68B4;  }
		/* 821E6854h case   11:*/		return 0x821E6858;
		  /* 821E6858h */ case   12:  		/* mr R4, R20 */
		/* 821E6858h case   12:*/		regs.R4 = regs.R20;
		/* 821E6858h case   12:*/		return 0x821E685C;
		  /* 821E685Ch */ case   13:  		/* bl -532764 */
		/* 821E685Ch case   13:*/		regs.LR = 0x821E6860; return 0x82164740;
		/* 821E685Ch case   13:*/		return 0x821E6860;
		  /* 821E6860h */ case   14:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E6860h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E6860h case   14:*/		return 0x821E6864;
		  /* 821E6864h */ case   15:  		/* rlwinm. R9, R11, 0, 30, 31 */
		/* 821E6864h case   15:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R9,regs.R11);
		/* 821E6864h case   15:*/		return 0x821E6868;
		  /* 821E6868h */ case   16:  		/* bc 12, CR0_EQ, 12 */
		/* 821E6868h case   16:*/		if ( regs.CR[0].eq ) { return 0x821E6874;  }
		/* 821E6868h case   16:*/		return 0x821E686C;
		  /* 821E686Ch */ case   17:  		/* li R10, 1 */
		/* 821E686Ch case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821E686Ch case   17:*/		return 0x821E6870;
		  /* 821E6870h */ case   18:  		/* b 12 */
		/* 821E6870h case   18:*/		return 0x821E687C;
		/* 821E6870h case   18:*/		return 0x821E6874;
	}
	return 0x821E6874;
} // Block from 821E6828h-821E6874h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821E6874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6874);
		  /* 821E6874h */ case    0:  		/* nor R10, R11, R11 */
		/* 821E6874h case    0:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 821E6874h case    0:*/		return 0x821E6878;
		  /* 821E6878h */ case    1:  		/* rlwinm R10, R10, 25, 31, 31 */
		/* 821E6878h case    1:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R10,regs.R10);
		/* 821E6878h case    1:*/		return 0x821E687C;
	}
	return 0x821E687C;
} // Block from 821E6874h-821E687Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E687Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E687C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E687C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E687C);
		  /* 821E687Ch */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821E687Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821E687Ch case    0:*/		return 0x821E6880;
		  /* 821E6880h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821E6880h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E68B4;  }
		/* 821E6880h case    1:*/		return 0x821E6884;
		  /* 821E6884h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821E6884h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E6884h case    2:*/		return 0x821E6888;
		  /* 821E6888h */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 821E6888h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821E68A8;  }
		/* 821E6888h case    3:*/		return 0x821E688C;
		  /* 821E688Ch */ case    4:  		/* rlwinm R11, R11, 30, 28, 31 */
		/* 821E688Ch case    4:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R11,regs.R11);
		/* 821E688Ch case    4:*/		return 0x821E6890;
		  /* 821E6890h */ case    5:  		/* cmpwi CR6, R11, 10 */
		/* 821E6890h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000A);
		/* 821E6890h case    5:*/		return 0x821E6894;
		  /* 821E6894h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 821E6894h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E68A0;  }
		/* 821E6894h case    6:*/		return 0x821E6898;
		  /* 821E6898h */ case    7:  		/* li R4, 3594 */
		/* 821E6898h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0xE0A);
		/* 821E6898h case    7:*/		return 0x821E689C;
		  /* 821E689Ch */ case    8:  		/* b 16 */
		/* 821E689Ch case    8:*/		return 0x821E68AC;
		/* 821E689Ch case    8:*/		return 0x821E68A0;
	}
	return 0x821E68A0;
} // Block from 821E687Ch-821E68A0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E68A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E68A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E68A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E68A0);
		  /* 821E68A0h */ case    0:  		/* cmpwi CR6, R11, 7 */
		/* 821E68A0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 821E68A0h case    0:*/		return 0x821E68A4;
		  /* 821E68A4h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821E68A4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E68B4;  }
		/* 821E68A4h case    1:*/		return 0x821E68A8;
	}
	return 0x821E68A8;
} // Block from 821E68A0h-821E68A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E68A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E68A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E68A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E68A8);
		  /* 821E68A8h */ case    0:  		/* li R4, 3595 */
		/* 821E68A8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE0B);
		/* 821E68A8h case    0:*/		return 0x821E68AC;
	}
	return 0x821E68AC;
} // Block from 821E68A8h-821E68ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E68ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E68AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E68AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E68AC);
		  /* 821E68ACh */ case    0:  		/* mr R3, R20 */
		/* 821E68ACh case    0:*/		regs.R3 = regs.R20;
		/* 821E68ACh case    0:*/		return 0x821E68B0;
		  /* 821E68B0h */ case    1:  		/* bl -609080 */
		/* 821E68B0h case    1:*/		regs.LR = 0x821E68B4; return 0x82151D78;
		/* 821E68B0h case    1:*/		return 0x821E68B4;
	}
	return 0x821E68B4;
} // Block from 821E68ACh-821E68B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E68B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E68B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E68B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E68B4);
		  /* 821E68B4h */ case    0:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E68B4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E68B4h case    0:*/		return 0x821E68B8;
		  /* 821E68B8h */ case    1:  		/* addi R31, R31, 68 */
		/* 821E68B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x44);
		/* 821E68B8h case    1:*/		return 0x821E68BC;
		  /* 821E68BCh */ case    2:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E68BCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E68BCh case    2:*/		return 0x821E68C0;
		  /* 821E68C0h */ case    3:  		/* mulli R10, R10, 68 */
		/* 821E68C0h case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E68C0h case    3:*/		return 0x821E68C4;
		  /* 821E68C4h */ case    4:  		/* add R11, R10, R11 */
		/* 821E68C4h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E68C4h case    4:*/		return 0x821E68C8;
		  /* 821E68C8h */ case    5:  		/* addi R10, R31, -4 */
		/* 821E68C8h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFFC);
		/* 821E68C8h case    5:*/		return 0x821E68CC;
		  /* 821E68CCh */ case    6:  		/* cmplw CR6, R10, R11 */
		/* 821E68CCh case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821E68CCh case    6:*/		return 0x821E68D0;
		  /* 821E68D0h */ case    7:  		/* bc 12, CR6_LT, -340 */
		/* 821E68D0h case    7:*/		if ( regs.CR[6].lt ) { return 0x821E677C;  }
		/* 821E68D0h case    7:*/		return 0x821E68D4;
	}
	return 0x821E68D4;
} // Block from 821E68B4h-821E68D4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E68D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E68D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E68D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E68D4);
		  /* 821E68D4h */ case    0:  		/* lwz R11, <#[R20 + 44]> */
		/* 821E68D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821E68D4h case    0:*/		return 0x821E68D8;
		  /* 821E68D8h */ case    1:  		/* li R31, 1 */
		/* 821E68D8h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821E68D8h case    1:*/		return 0x821E68DC;
		  /* 821E68DCh */ case    2:  		/* lbz R10, <#[R1 + 129]> */
		/* 821E68DCh case    2:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000081) );
		/* 821E68DCh case    2:*/		return 0x821E68E0;
		  /* 821E68E0h */ case    3:  		/* oris R11, R11, 4 */
		/* 821E68E0h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E68E0h case    3:*/		return 0x821E68E4;
		  /* 821E68E4h */ case    4:  		/* cmplwi CR0, R10, 0 */
		/* 821E68E4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 821E68E4h case    4:*/		return 0x821E68E8;
		  /* 821E68E8h */ case    5:  		/* stw R11, <#[R20 + 44]> */
		/* 821E68E8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821E68E8h case    5:*/		return 0x821E68EC;
		  /* 821E68ECh */ case    6:  		/* bc 12, CR0_EQ, 44 */
		/* 821E68ECh case    6:*/		if ( regs.CR[0].eq ) { return 0x821E6918;  }
		/* 821E68ECh case    6:*/		return 0x821E68F0;
		  /* 821E68F0h */ case    7:  		/* mr R3, R20 */
		/* 821E68F0h case    7:*/		regs.R3 = regs.R20;
		/* 821E68F0h case    7:*/		return 0x821E68F4;
		  /* 821E68F4h */ case    8:  		/* bl 18988 */
		/* 821E68F4h case    8:*/		regs.LR = 0x821E68F8; return 0x821EB320;
		/* 821E68F4h case    8:*/		return 0x821E68F8;
		  /* 821E68F8h */ case    9:  		/* mr R3, R20 */
		/* 821E68F8h case    9:*/		regs.R3 = regs.R20;
		/* 821E68F8h case    9:*/		return 0x821E68FC;
		  /* 821E68FCh */ case   10:  		/* bl -116676 */
		/* 821E68FCh case   10:*/		regs.LR = 0x821E6900; return 0x821CA138;
		/* 821E68FCh case   10:*/		return 0x821E6900;
		  /* 821E6900h */ case   11:  		/* li R4, 1 */
		/* 821E6900h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E6900h case   11:*/		return 0x821E6904;
		  /* 821E6904h */ case   12:  		/* mr R3, R20 */
		/* 821E6904h case   12:*/		regs.R3 = regs.R20;
		/* 821E6904h case   12:*/		return 0x821E6908;
		  /* 821E6908h */ case   13:  		/* bl -53392 */
		/* 821E6908h case   13:*/		regs.LR = 0x821E690C; return 0x821D9878;
		/* 821E6908h case   13:*/		return 0x821E690C;
		  /* 821E690Ch */ case   14:  		/* mr R3, R20 */
		/* 821E690Ch case   14:*/		regs.R3 = regs.R20;
		/* 821E690Ch case   14:*/		return 0x821E6910;
		  /* 821E6910h */ case   15:  		/* bl -43736 */
		/* 821E6910h case   15:*/		regs.LR = 0x821E6914; return 0x821DBE38;
		/* 821E6910h case   15:*/		return 0x821E6914;
		  /* 821E6914h */ case   16:  		/* li R31, 0 */
		/* 821E6914h case   16:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821E6914h case   16:*/		return 0x821E6918;
	}
	return 0x821E6918;
} // Block from 821E68D4h-821E6918h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E6918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6918);
		  /* 821E6918h */ case    0:  		/* rlwinm. R30, R31, 0, 24, 31 */
		/* 821E6918h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R30,regs.R31);
		/* 821E6918h case    0:*/		return 0x821E691C;
		  /* 821E691Ch */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821E691Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821E6928;  }
		/* 821E691Ch case    1:*/		return 0x821E6920;
		  /* 821E6920h */ case    2:  		/* mr R3, R20 */
		/* 821E6920h case    2:*/		regs.R3 = regs.R20;
		/* 821E6920h case    2:*/		return 0x821E6924;
		  /* 821E6924h */ case    3:  		/* bl 18940 */
		/* 821E6924h case    3:*/		regs.LR = 0x821E6928; return 0x821EB320;
		/* 821E6924h case    3:*/		return 0x821E6928;
	}
	return 0x821E6928;
} // Block from 821E6918h-821E6928h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E6928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6928);
		  /* 821E6928h */ case    0:  		/* lwz R11, <#[R1 + 136]> */
		/* 821E6928h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821E6928h case    0:*/		return 0x821E692C;
		  /* 821E692Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E692Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E692Ch case    1:*/		return 0x821E6930;
		  /* 821E6930h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 821E6930h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E6950;  }
		/* 821E6930h case    2:*/		return 0x821E6934;
		  /* 821E6934h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821E6934h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E6934h case    3:*/		return 0x821E6938;
		  /* 821E6938h */ case    4:  		/* bc 4, CR6_EQ, -27028 */
		/* 821E6938h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821DFFA4;  }
		/* 821E6938h case    4:*/		return 0x821E693C;
		  /* 821E693Ch */ case    5:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E693Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E693Ch case    5:*/		return 0x821E6940;
		  /* 821E6940h */ case    6:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E6940h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E6940h case    6:*/		return 0x821E6944;
		  /* 821E6944h */ case    7:  		/* mulli R10, R10, 68 */
		/* 821E6944h case    7:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E6944h case    7:*/		return 0x821E6948;
		  /* 821E6948h */ case    8:  		/* add R10, R10, R11 */
		/* 821E6948h case    8:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E6948h case    8:*/		return 0x821E694C;
		  /* 821E694Ch */ case    9:  		/* b 328 */
		/* 821E694Ch case    9:*/		return 0x821E6A94;
		/* 821E694Ch case    9:*/		return 0x821E6950;
	}
	return 0x821E6950;
} // Block from 821E6928h-821E6950h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E6950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6950);
		  /* 821E6950h */ case    0:  		/* lbz R11, <#[R1 + 130]> */
		/* 821E6950h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000082) );
		/* 821E6950h case    0:*/		return 0x821E6954;
		  /* 821E6954h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821E6954h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E6954h case    1:*/		return 0x821E6958;
		  /* 821E6958h */ case    2:  		/* bc 12, CR0_EQ, 368 */
		/* 821E6958h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E6AC8;  }
		/* 821E6958h case    2:*/		return 0x821E695C;
		  /* 821E695Ch */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821E695Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E695Ch case    3:*/		return 0x821E6960;
		  /* 821E6960h */ case    4:  		/* bc 4, CR6_EQ, -27068 */
		/* 821E6960h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821DFFA4;  }
		/* 821E6960h case    4:*/		return 0x821E6964;
		  /* 821E6964h */ case    5:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E6964h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E6964h case    5:*/		return 0x821E6968;
		  /* 821E6968h */ case    6:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E6968h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E6968h case    6:*/		return 0x821E696C;
		  /* 821E696Ch */ case    7:  		/* mulli R10, R10, 68 */
		/* 821E696Ch case    7:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E696Ch case    7:*/		return 0x821E6970;
		  /* 821E6970h */ case    8:  		/* add R10, R10, R11 */
		/* 821E6970h case    8:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E6970h case    8:*/		return 0x821E6974;
		  /* 821E6974h */ case    9:  		/* b 20 */
		/* 821E6974h case    9:*/		return 0x821E6988;
		/* 821E6974h case    9:*/		return 0x821E6978;
		  /* 821E6978h */ case   10:  		/* lwz R9, <#[R11 + 36]> */
		/* 821E6978h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000024) );
		/* 821E6978h case   10:*/		return 0x821E697C;
		  /* 821E697Ch */ case   11:  		/* rlwinm. R9, R9, 0, 2, 2 */
		/* 821E697Ch case   11:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R9,regs.R9);
		/* 821E697Ch case   11:*/		return 0x821E6980;
		  /* 821E6980h */ case   12:  		/* bc 4, CR0_EQ, 308 */
		/* 821E6980h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821E6AB4;  }
		/* 821E6980h case   12:*/		return 0x821E6984;
		  /* 821E6984h */ case   13:  		/* addi R11, R11, 68 */
		/* 821E6984h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x44);
		/* 821E6984h case   13:*/		return 0x821E6988;
	}
	return 0x821E6988;
} // Block from 821E6950h-821E6988h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E6988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6988);
		  /* 821E6988h */ case    0:  		/* cmplw CR6, R11, R10 */
		/* 821E6988h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E6988h case    0:*/		return 0x821E698C;
		  /* 821E698Ch */ case    1:  		/* bc 12, CR6_LT, -20 */
		/* 821E698Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x821E6978;  }
		/* 821E698Ch case    1:*/		return 0x821E6990;
		  /* 821E6990h */ case    2:  		/* b -27116 */
		/* 821E6990h case    2:*/		return 0x821DFFA4;
		/* 821E6990h case    2:*/		return 0x821E6994;
	}
	return 0x821E6994;
} // Block from 821E6988h-821E6994h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6994);
		  /* 821E6994h */ case    0:  		/* li R4, 3534 */
		/* 821E6994h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDCE);
		/* 821E6994h case    0:*/		return 0x821E6998;
		  /* 821E6998h */ case    1:  		/* mr R3, R20 */
		/* 821E6998h case    1:*/		regs.R3 = regs.R20;
		/* 821E6998h case    1:*/		return 0x821E699C;
		  /* 821E699Ch */ case    2:  		/* bl -609076 */
		/* 821E699Ch case    2:*/		regs.LR = 0x821E69A0; return 0x82151E68;
		/* 821E699Ch case    2:*/		return 0x821E69A0;
	}
	return 0x821E69A0;
} // Block from 821E6994h-821E69A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E69A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E69A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E69A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E69A0);
		  /* 821E69A0h */ case    0:  		/* li R4, 4800 */
		/* 821E69A0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E69A0h case    0:*/		return 0x821E69A4;
		  /* 821E69A4h */ case    1:  		/* mr R3, R20 */
		/* 821E69A4h case    1:*/		regs.R3 = regs.R20;
		/* 821E69A4h case    1:*/		return 0x821E69A8;
		  /* 821E69A8h */ case    2:  		/* bl -609088 */
		/* 821E69A8h case    2:*/		regs.LR = 0x821E69AC; return 0x82151E68;
		/* 821E69A8h case    2:*/		return 0x821E69AC;
	}
	return 0x821E69AC;
} // Block from 821E69A0h-821E69ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E69ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E69AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E69AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E69AC);
		  /* 821E69ACh */ case    0:  		/* lis R11, -32252 */
		/* 821E69ACh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821E69ACh case    0:*/		return 0x821E69B0;
		  /* 821E69B0h */ case    1:  		/* li R4, 3500 */
		/* 821E69B0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821E69B0h case    1:*/		return 0x821E69B4;
		  /* 821E69B4h */ case    2:  		/* addi R5, R11, -15868 */
		/* 821E69B4h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC204);
		/* 821E69B4h case    2:*/		return 0x821E69B8;
		  /* 821E69B8h */ case    3:  		/* mr R3, R20 */
		/* 821E69B8h case    3:*/		regs.R3 = regs.R20;
		/* 821E69B8h case    3:*/		return 0x821E69BC;
		  /* 821E69BCh */ case    4:  		/* bl -609108 */
		/* 821E69BCh case    4:*/		regs.LR = 0x821E69C0; return 0x82151E68;
		/* 821E69BCh case    4:*/		return 0x821E69C0;
	}
	return 0x821E69C0;
} // Block from 821E69ACh-821E69C0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E69C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E69C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E69C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E69C0);
		  /* 821E69C0h */ case    0:  		/* li R4, 4800 */
		/* 821E69C0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E69C0h case    0:*/		return 0x821E69C4;
		  /* 821E69C4h */ case    1:  		/* mr R3, R20 */
		/* 821E69C4h case    1:*/		regs.R3 = regs.R20;
		/* 821E69C4h case    1:*/		return 0x821E69C8;
		  /* 821E69C8h */ case    2:  		/* bl -609120 */
		/* 821E69C8h case    2:*/		regs.LR = 0x821E69CC; return 0x82151E68;
		/* 821E69C8h case    2:*/		return 0x821E69CC;
	}
	return 0x821E69CC;
} // Block from 821E69C0h-821E69CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E69CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E69CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E69CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E69CC);
		  /* 821E69CCh */ case    0:  		/* li R4, 4800 */
		/* 821E69CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E69CCh case    0:*/		return 0x821E69D0;
		  /* 821E69D0h */ case    1:  		/* mr R3, R20 */
		/* 821E69D0h case    1:*/		regs.R3 = regs.R20;
		/* 821E69D0h case    1:*/		return 0x821E69D4;
		  /* 821E69D4h */ case    2:  		/* bl -609132 */
		/* 821E69D4h case    2:*/		regs.LR = 0x821E69D8; return 0x82151E68;
		/* 821E69D4h case    2:*/		return 0x821E69D8;
	}
	return 0x821E69D8;
} // Block from 821E69CCh-821E69D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E69D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E69D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E69D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E69D8);
		  /* 821E69D8h */ case    0:  		/* li R4, 4800 */
		/* 821E69D8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E69D8h case    0:*/		return 0x821E69DC;
		  /* 821E69DCh */ case    1:  		/* lwz R3, <#[R1 + 804]> */
		/* 821E69DCh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000324) );
		/* 821E69DCh case    1:*/		return 0x821E69E0;
		  /* 821E69E0h */ case    2:  		/* bl -609144 */
		/* 821E69E0h case    2:*/		regs.LR = 0x821E69E4; return 0x82151E68;
		/* 821E69E0h case    2:*/		return 0x821E69E4;
	}
	return 0x821E69E4;
} // Block from 821E69D8h-821E69E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E69E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E69E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E69E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E69E4);
		  /* 821E69E4h */ case    0:  		/* li R4, 4800 */
		/* 821E69E4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E69E4h case    0:*/		return 0x821E69E8;
		  /* 821E69E8h */ case    1:  		/* bl -609152 */
		/* 821E69E8h case    1:*/		regs.LR = 0x821E69EC; return 0x82151E68;
		/* 821E69E8h case    1:*/		return 0x821E69EC;
	}
	return 0x821E69EC;
} // Block from 821E69E4h-821E69ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E69ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E69EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E69EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E69EC);
		  /* 821E69ECh */ case    0:  		/* li R4, 3511 */
		/* 821E69ECh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDB7);
		/* 821E69ECh case    0:*/		return 0x821E69F0;
		  /* 821E69F0h */ case    1:  		/* mr R3, R20 */
		/* 821E69F0h case    1:*/		regs.R3 = regs.R20;
		/* 821E69F0h case    1:*/		return 0x821E69F4;
		  /* 821E69F4h */ case    2:  		/* bl -609164 */
		/* 821E69F4h case    2:*/		regs.LR = 0x821E69F8; return 0x82151E68;
		/* 821E69F4h case    2:*/		return 0x821E69F8;
	}
	return 0x821E69F8;
} // Block from 821E69ECh-821E69F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E69F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E69F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E69F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E69F8);
		  /* 821E69F8h */ case    0:  		/* li R4, 4800 */
		/* 821E69F8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E69F8h case    0:*/		return 0x821E69FC;
		  /* 821E69FCh */ case    1:  		/* mr R3, R22 */
		/* 821E69FCh case    1:*/		regs.R3 = regs.R22;
		/* 821E69FCh case    1:*/		return 0x821E6A00;
		  /* 821E6A00h */ case    2:  		/* bl -609176 */
		/* 821E6A00h case    2:*/		regs.LR = 0x821E6A04; return 0x82151E68;
		/* 821E6A00h case    2:*/		return 0x821E6A04;
	}
	return 0x821E6A04;
} // Block from 821E69F8h-821E6A04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6A04);
		  /* 821E6A04h */ case    0:  		/* li R4, 3548 */
		/* 821E6A04h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDDC);
		/* 821E6A04h case    0:*/		return 0x821E6A08;
		  /* 821E6A08h */ case    1:  		/* mr R3, R22 */
		/* 821E6A08h case    1:*/		regs.R3 = regs.R22;
		/* 821E6A08h case    1:*/		return 0x821E6A0C;
		  /* 821E6A0Ch */ case    2:  		/* bl -609188 */
		/* 821E6A0Ch case    2:*/		regs.LR = 0x821E6A10; return 0x82151E68;
		/* 821E6A0Ch case    2:*/		return 0x821E6A10;
	}
	return 0x821E6A10;
} // Block from 821E6A04h-821E6A10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6A10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6A10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6A10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6A10);
		  /* 821E6A10h */ case    0:  		/* lis R11, -32252 */
		/* 821E6A10h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821E6A10h case    0:*/		return 0x821E6A14;
		  /* 821E6A14h */ case    1:  		/* li R4, 3500 */
		/* 821E6A14h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821E6A14h case    1:*/		return 0x821E6A18;
		  /* 821E6A18h */ case    2:  		/* addi R5, R11, -15836 */
		/* 821E6A18h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC224);
		/* 821E6A18h case    2:*/		return 0x821E6A1C;
		  /* 821E6A1Ch */ case    3:  		/* mr R3, R22 */
		/* 821E6A1Ch case    3:*/		regs.R3 = regs.R22;
		/* 821E6A1Ch case    3:*/		return 0x821E6A20;
		  /* 821E6A20h */ case    4:  		/* bl -609208 */
		/* 821E6A20h case    4:*/		regs.LR = 0x821E6A24; return 0x82151E68;
		/* 821E6A20h case    4:*/		return 0x821E6A24;
	}
	return 0x821E6A24;
} // Block from 821E6A10h-821E6A24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E6A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6A24);
		  /* 821E6A24h */ case    0:  		/* lis R11, -32252 */
		/* 821E6A24h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821E6A24h case    0:*/		return 0x821E6A28;
		  /* 821E6A28h */ case    1:  		/* li R4, 3500 */
		/* 821E6A28h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821E6A28h case    1:*/		return 0x821E6A2C;
		  /* 821E6A2Ch */ case    2:  		/* addi R5, R11, -15836 */
		/* 821E6A2Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC224);
		/* 821E6A2Ch case    2:*/		return 0x821E6A30;
		  /* 821E6A30h */ case    3:  		/* mr R3, R20 */
		/* 821E6A30h case    3:*/		regs.R3 = regs.R20;
		/* 821E6A30h case    3:*/		return 0x821E6A34;
		  /* 821E6A34h */ case    4:  		/* bl -609228 */
		/* 821E6A34h case    4:*/		regs.LR = 0x821E6A38; return 0x82151E68;
		/* 821E6A34h case    4:*/		return 0x821E6A38;
	}
	return 0x821E6A38;
} // Block from 821E6A24h-821E6A38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E6A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6A38);
		  /* 821E6A38h */ case    0:  		/* li R4, 3504 */
		/* 821E6A38h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDB0);
		/* 821E6A38h case    0:*/		return 0x821E6A3C;
		  /* 821E6A3Ch */ case    1:  		/* mr R3, R20 */
		/* 821E6A3Ch case    1:*/		regs.R3 = regs.R20;
		/* 821E6A3Ch case    1:*/		return 0x821E6A40;
		  /* 821E6A40h */ case    2:  		/* bl -609240 */
		/* 821E6A40h case    2:*/		regs.LR = 0x821E6A44; return 0x82151E68;
		/* 821E6A40h case    2:*/		return 0x821E6A44;
	}
	return 0x821E6A44;
} // Block from 821E6A38h-821E6A44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6A44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6A44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6A44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6A44);
		  /* 821E6A44h */ case    0:  		/* lis R11, -32252 */
		/* 821E6A44h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821E6A44h case    0:*/		return 0x821E6A48;
		  /* 821E6A48h */ case    1:  		/* li R4, 3500 */
		/* 821E6A48h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821E6A48h case    1:*/		return 0x821E6A4C;
		  /* 821E6A4Ch */ case    2:  		/* addi R5, R11, -15900 */
		/* 821E6A4Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC1E4);
		/* 821E6A4Ch case    2:*/		return 0x821E6A50;
		  /* 821E6A50h */ case    3:  		/* mr R3, R20 */
		/* 821E6A50h case    3:*/		regs.R3 = regs.R20;
		/* 821E6A50h case    3:*/		return 0x821E6A54;
		  /* 821E6A54h */ case    4:  		/* bl -609260 */
		/* 821E6A54h case    4:*/		regs.LR = 0x821E6A58; return 0x82151E68;
		/* 821E6A54h case    4:*/		return 0x821E6A58;
	}
	return 0x821E6A58;
} // Block from 821E6A44h-821E6A58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E6A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6A58);
		  /* 821E6A58h */ case    0:  		/* li R4, 4800 */
		/* 821E6A58h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E6A58h case    0:*/		return 0x821E6A5C;
		  /* 821E6A5Ch */ case    1:  		/* bl -609268 */
		/* 821E6A5Ch case    1:*/		regs.LR = 0x821E6A60; return 0x82151E68;
		/* 821E6A5Ch case    1:*/		return 0x821E6A60;
	}
	return 0x821E6A60;
} // Block from 821E6A58h-821E6A60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E6A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6A60);
		  /* 821E6A60h */ case    0:  		/* li R4, 4800 */
		/* 821E6A60h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E6A60h case    0:*/		return 0x821E6A64;
		  /* 821E6A64h */ case    1:  		/* mr R3, R19 */
		/* 821E6A64h case    1:*/		regs.R3 = regs.R19;
		/* 821E6A64h case    1:*/		return 0x821E6A68;
		  /* 821E6A68h */ case    2:  		/* bl -609280 */
		/* 821E6A68h case    2:*/		regs.LR = 0x821E6A6C; return 0x82151E68;
		/* 821E6A68h case    2:*/		return 0x821E6A6C;
	}
	return 0x821E6A6C;
} // Block from 821E6A60h-821E6A6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6A6C);
		  /* 821E6A6Ch */ case    0:  		/* li R4, 4800 */
		/* 821E6A6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E6A6Ch case    0:*/		return 0x821E6A70;
		  /* 821E6A70h */ case    1:  		/* mr R3, R19 */
		/* 821E6A70h case    1:*/		regs.R3 = regs.R19;
		/* 821E6A70h case    1:*/		return 0x821E6A74;
		  /* 821E6A74h */ case    2:  		/* bl -609292 */
		/* 821E6A74h case    2:*/		regs.LR = 0x821E6A78; return 0x82151E68;
		/* 821E6A74h case    2:*/		return 0x821E6A78;
	}
	return 0x821E6A78;
} // Block from 821E6A6Ch-821E6A78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6A78);
		  /* 821E6A78h */ case    0:  		/* li R4, 4800 */
		/* 821E6A78h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E6A78h case    0:*/		return 0x821E6A7C;
		  /* 821E6A7Ch */ case    1:  		/* mr R3, R20 */
		/* 821E6A7Ch case    1:*/		regs.R3 = regs.R20;
		/* 821E6A7Ch case    1:*/		return 0x821E6A80;
		  /* 821E6A80h */ case    2:  		/* bl -609304 */
		/* 821E6A80h case    2:*/		regs.LR = 0x821E6A84; return 0x82151E68;
		/* 821E6A80h case    2:*/		return 0x821E6A84;
		  /* 821E6A84h */ case    3:  		/* lwz R9, <#[R11 + 60]> */
		/* 821E6A84h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000003C) );
		/* 821E6A84h case    3:*/		return 0x821E6A88;
		  /* 821E6A88h */ case    4:  		/* rlwinm. R9, R9, 0, 20, 20 */
		/* 821E6A88h case    4:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R9,regs.R9);
		/* 821E6A88h case    4:*/		return 0x821E6A8C;
		  /* 821E6A8Ch */ case    5:  		/* bc 4, CR0_EQ, 28 */
		/* 821E6A8Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x821E6AA8;  }
		/* 821E6A8Ch case    5:*/		return 0x821E6A90;
		  /* 821E6A90h */ case    6:  		/* addi R11, R11, 68 */
		/* 821E6A90h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x44);
		/* 821E6A90h case    6:*/		return 0x821E6A94;
	}
	return 0x821E6A94;
} // Block from 821E6A78h-821E6A94h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E6A94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6A94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6A94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6A94);
		  /* 821E6A94h */ case    0:  		/* cmplw CR6, R11, R10 */
		/* 821E6A94h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E6A94h case    0:*/		return 0x821E6A98;
		  /* 821E6A98h */ case    1:  		/* bc 12, CR6_LT, -20 */
		/* 821E6A98h case    1:*/		if ( regs.CR[6].lt ) { return 0x821E6A84;  }
		/* 821E6A98h case    1:*/		return 0x821E6A9C;
		  /* 821E6A9Ch */ case    2:  		/* li R4, 4800 */
		/* 821E6A9Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E6A9Ch case    2:*/		return 0x821E6AA0;
		  /* 821E6AA0h */ case    3:  		/* mr R3, R20 */
		/* 821E6AA0h case    3:*/		regs.R3 = regs.R20;
		/* 821E6AA0h case    3:*/		return 0x821E6AA4;
		  /* 821E6AA4h */ case    4:  		/* bl -609340 */
		/* 821E6AA4h case    4:*/		regs.LR = 0x821E6AA8; return 0x82151E68;
		/* 821E6AA4h case    4:*/		return 0x821E6AA8;
	}
	return 0x821E6AA8;
} // Block from 821E6A94h-821E6AA8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E6AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6AA8);
		  /* 821E6AA8h */ case    0:  		/* li R4, 3511 */
		/* 821E6AA8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDB7);
		/* 821E6AA8h case    0:*/		return 0x821E6AAC;
		  /* 821E6AACh */ case    1:  		/* mr R3, R20 */
		/* 821E6AACh case    1:*/		regs.R3 = regs.R20;
		/* 821E6AACh case    1:*/		return 0x821E6AB0;
		  /* 821E6AB0h */ case    2:  		/* bl -609352 */
		/* 821E6AB0h case    2:*/		regs.LR = 0x821E6AB4; return 0x82151E68;
		/* 821E6AB0h case    2:*/		return 0x821E6AB4;
	}
	return 0x821E6AB4;
} // Block from 821E6AA8h-821E6AB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6AB4);
		  /* 821E6AB4h */ case    0:  		/* lis R11, -32252 */
		/* 821E6AB4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821E6AB4h case    0:*/		return 0x821E6AB8;
		  /* 821E6AB8h */ case    1:  		/* li R4, 3500 */
		/* 821E6AB8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821E6AB8h case    1:*/		return 0x821E6ABC;
		  /* 821E6ABCh */ case    2:  		/* addi R5, R11, -15976 */
		/* 821E6ABCh case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC198);
		/* 821E6ABCh case    2:*/		return 0x821E6AC0;
		  /* 821E6AC0h */ case    3:  		/* mr R3, R20 */
		/* 821E6AC0h case    3:*/		regs.R3 = regs.R20;
		/* 821E6AC0h case    3:*/		return 0x821E6AC4;
		  /* 821E6AC4h */ case    4:  		/* bl -609372 */
		/* 821E6AC4h case    4:*/		regs.LR = 0x821E6AC8; return 0x82151E68;
		/* 821E6AC4h case    4:*/		return 0x821E6AC8;
	}
	return 0x821E6AC8;
} // Block from 821E6AB4h-821E6AC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E6AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6AC8);
		  /* 821E6AC8h */ case    0:  		/* lwz R11, <#[R20 + 44]> */
		/* 821E6AC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821E6AC8h case    0:*/		return 0x821E6ACC;
		  /* 821E6ACCh */ case    1:  		/* rlwinm. R10, R11, 0, 4, 4 */
		/* 821E6ACCh case    1:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R10,regs.R11);
		/* 821E6ACCh case    1:*/		return 0x821E6AD0;
		  /* 821E6AD0h */ case    2:  		/* bc 12, CR0_EQ, 60 */
		/* 821E6AD0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E6B0C;  }
		/* 821E6AD0h case    2:*/		return 0x821E6AD4;
		  /* 821E6AD4h */ case    3:  		/* rlwinm R11, R11, 0, 4, 2 */
		/* 821E6AD4h case    3:*/		cpu::op::rlwinm<0,0,4,2>(regs,&regs.R11,regs.R11);
		/* 821E6AD4h case    3:*/		return 0x821E6AD8;
		  /* 821E6AD8h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821E6AD8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E6AD8h case    4:*/		return 0x821E6ADC;
		  /* 821E6ADCh */ case    5:  		/* stw R11, <#[R20 + 44]> */
		/* 821E6ADCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821E6ADCh case    5:*/		return 0x821E6AE0;
		  /* 821E6AE0h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 821E6AE0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821E6AEC;  }
		/* 821E6AE0h case    6:*/		return 0x821E6AE4;
		  /* 821E6AE4h */ case    7:  		/* mr R3, R20 */
		/* 821E6AE4h case    7:*/		regs.R3 = regs.R20;
		/* 821E6AE4h case    7:*/		return 0x821E6AE8;
		  /* 821E6AE8h */ case    8:  		/* bl 18488 */
		/* 821E6AE8h case    8:*/		regs.LR = 0x821E6AEC; return 0x821EB320;
		/* 821E6AE8h case    8:*/		return 0x821E6AEC;
	}
	return 0x821E6AEC;
} // Block from 821E6AC8h-821E6AECh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E6AECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6AEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6AEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6AEC);
		  /* 821E6AECh */ case    0:  		/* mr R3, R20 */
		/* 821E6AECh case    0:*/		regs.R3 = regs.R20;
		/* 821E6AECh case    0:*/		return 0x821E6AF0;
		  /* 821E6AF0h */ case    1:  		/* bl -117176 */
		/* 821E6AF0h case    1:*/		regs.LR = 0x821E6AF4; return 0x821CA138;
		/* 821E6AF0h case    1:*/		return 0x821E6AF4;
		  /* 821E6AF4h */ case    2:  		/* li R4, 1 */
		/* 821E6AF4h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E6AF4h case    2:*/		return 0x821E6AF8;
		  /* 821E6AF8h */ case    3:  		/* mr R3, R20 */
		/* 821E6AF8h case    3:*/		regs.R3 = regs.R20;
		/* 821E6AF8h case    3:*/		return 0x821E6AFC;
		  /* 821E6AFCh */ case    4:  		/* bl -53892 */
		/* 821E6AFCh case    4:*/		regs.LR = 0x821E6B00; return 0x821D9878;
		/* 821E6AFCh case    4:*/		return 0x821E6B00;
		  /* 821E6B00h */ case    5:  		/* mr R3, R20 */
		/* 821E6B00h case    5:*/		regs.R3 = regs.R20;
		/* 821E6B00h case    5:*/		return 0x821E6B04;
		  /* 821E6B04h */ case    6:  		/* bl -44236 */
		/* 821E6B04h case    6:*/		regs.LR = 0x821E6B08; return 0x821DBE38;
		/* 821E6B04h case    6:*/		return 0x821E6B08;
		  /* 821E6B08h */ case    7:  		/* li R31, 0 */
		/* 821E6B08h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821E6B08h case    7:*/		return 0x821E6B0C;
	}
	return 0x821E6B0C;
} // Block from 821E6AECh-821E6B0Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E6B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6B0C);
		  /* 821E6B0Ch */ case    0:  		/* rlwinm. R11, R31, 0, 24, 31 */
		/* 821E6B0Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R31);
		/* 821E6B0Ch case    0:*/		return 0x821E6B10;
		  /* 821E6B10h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821E6B10h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E6B1C;  }
		/* 821E6B10h case    1:*/		return 0x821E6B14;
		  /* 821E6B14h */ case    2:  		/* mr R3, R20 */
		/* 821E6B14h case    2:*/		regs.R3 = regs.R20;
		/* 821E6B14h case    2:*/		return 0x821E6B18;
		  /* 821E6B18h */ case    3:  		/* bl 18440 */
		/* 821E6B18h case    3:*/		regs.LR = 0x821E6B1C; return 0x821EB320;
		/* 821E6B18h case    3:*/		return 0x821E6B1C;
	}
	return 0x821E6B1C;
} // Block from 821E6B0Ch-821E6B1Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E6B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6B1C);
		  /* 821E6B1Ch */ case    0:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E6B1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E6B1Ch case    0:*/		return 0x821E6B20;
		  /* 821E6B20h */ case    1:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E6B20h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E6B20h case    1:*/		return 0x821E6B24;
		  /* 821E6B24h */ case    2:  		/* mulli R10, R10, 68 */
		/* 821E6B24h case    2:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E6B24h case    2:*/		return 0x821E6B28;
		  /* 821E6B28h */ case    3:  		/* add R10, R10, R11 */
		/* 821E6B28h case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E6B28h case    3:*/		return 0x821E6B2C;
		  /* 821E6B2Ch */ case    4:  		/* mr R9, R11 */
		/* 821E6B2Ch case    4:*/		regs.R9 = regs.R11;
		/* 821E6B2Ch case    4:*/		return 0x821E6B30;
		  /* 821E6B30h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 821E6B30h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E6B30h case    5:*/		return 0x821E6B34;
		  /* 821E6B34h */ case    6:  		/* bc 4, CR6_LT, 240 */
		/* 821E6B34h case    6:*/		if ( !regs.CR[6].lt ) { return 0x821E6C24;  }
		/* 821E6B34h case    6:*/		return 0x821E6B38;
		  /* 821E6B38h */ case    7:  		/* li R8, 0 */
		/* 821E6B38h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E6B38h case    7:*/		return 0x821E6B3C;
		  /* 821E6B3Ch */ case    8:  		/* mr R11, R9 */
		/* 821E6B3Ch case    8:*/		regs.R11 = regs.R9;
		/* 821E6B3Ch case    8:*/		return 0x821E6B40;
		  /* 821E6B40h */ case    9:  		/* cmplwi CR6, R9, 0 */
		/* 821E6B40h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E6B40h case    9:*/		return 0x821E6B44;
		  /* 821E6B44h */ case   10:  		/* bc 12, CR6_EQ, 196 */
		/* 821E6B44h case   10:*/		if ( regs.CR[6].eq ) { return 0x821E6C08;  }
		/* 821E6B44h case   10:*/		return 0x821E6B48;
		  /* 821E6B48h */ case   11:  		/* lwz R10, <#[R11 + 60]> */
		/* 821E6B48h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 821E6B48h case   11:*/		return 0x821E6B4C;
		  /* 821E6B4Ch */ case   12:  		/* rlwinm. R10, R10, 0, 27, 27 */
		/* 821E6B4Ch case   12:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R10);
		/* 821E6B4Ch case   12:*/		return 0x821E6B50;
		  /* 821E6B50h */ case   13:  		/* bc 4, CR0_EQ, 152 */
		/* 821E6B50h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821E6BE8;  }
		/* 821E6B50h case   13:*/		return 0x821E6B54;
		  /* 821E6B54h */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E6B54h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6B54h case   14:*/		return 0x821E6B58;
		  /* 821E6B58h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 821E6B58h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E6B58h case   15:*/		return 0x821E6B5C;
		  /* 821E6B5Ch */ case   16:  		/* bc 12, CR6_EQ, 140 */
		/* 821E6B5Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x821E6BE8;  }
		/* 821E6B5Ch case   16:*/		return 0x821E6B60;
		  /* 821E6B60h */ case   17:  		/* lwz R10, <#[R11 + 12]> */
		/* 821E6B60h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E6B60h case   17:*/		return 0x821E6B64;
		  /* 821E6B64h */ case   18:  		/* cmplwi CR6, R10, 0 */
		/* 821E6B64h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E6B64h case   18:*/		return 0x821E6B68;
		  /* 821E6B68h */ case   19:  		/* bc 12, CR6_EQ, 128 */
		/* 821E6B68h case   19:*/		if ( regs.CR[6].eq ) { return 0x821E6BE8;  }
		/* 821E6B68h case   19:*/		return 0x821E6B6C;
		  /* 821E6B6Ch */ case   20:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E6B6Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6B6Ch case   20:*/		return 0x821E6B70;
		  /* 821E6B70h */ case   21:  		/* lwz R7, <#[R10 + 48]> */
		/* 821E6B70h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000030) );
		/* 821E6B70h case   21:*/		return 0x821E6B74;
		  /* 821E6B74h */ case   22:  		/* rlwinm. R7, R7, 10, 31, 31 */
		/* 821E6B74h case   22:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R7,regs.R7);
		/* 821E6B74h case   22:*/		return 0x821E6B78;
		  /* 821E6B78h */ case   23:  		/* bc 12, CR0_EQ, 48 */
		/* 821E6B78h case   23:*/		if ( regs.CR[0].eq ) { return 0x821E6BA8;  }
		/* 821E6B78h case   23:*/		return 0x821E6B7C;
		  /* 821E6B7Ch */ case   24:  		/* b 16 */
		/* 821E6B7Ch case   24:*/		return 0x821E6B8C;
		/* 821E6B7Ch case   24:*/		return 0x821E6B80;
		  /* 821E6B80h */ case   25:  		/* lwz R7, <#[R10 + 48]> */
		/* 821E6B80h case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000030) );
		/* 821E6B80h case   25:*/		return 0x821E6B84;
		  /* 821E6B84h */ case   26:  		/* rlwinm. R7, R7, 0, 9, 9 */
		/* 821E6B84h case   26:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R7,regs.R7);
		/* 821E6B84h case   26:*/		return 0x821E6B88;
		  /* 821E6B88h */ case   27:  		/* bc 12, CR0_EQ, 16 */
		/* 821E6B88h case   27:*/		if ( regs.CR[0].eq ) { return 0x821E6B98;  }
		/* 821E6B88h case   27:*/		return 0x821E6B8C;
	}
	return 0x821E6B8C;
} // Block from 821E6B1Ch-821E6B8Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 821E6B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6B8C);
		  /* 821E6B8Ch */ case    0:  		/* lwz R10, <#[R10 + 80]> */
		/* 821E6B8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000050) );
		/* 821E6B8Ch case    0:*/		return 0x821E6B90;
		  /* 821E6B90h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821E6B90h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E6B90h case    1:*/		return 0x821E6B94;
		  /* 821E6B94h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821E6B94h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E6B80;  }
		/* 821E6B94h case    2:*/		return 0x821E6B98;
	}
	return 0x821E6B98;
} // Block from 821E6B8Ch-821E6B98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6B98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6B98);
		  /* 821E6B98h */ case    0:  		/* stw R10, <#[R11 + 4]> */
		/* 821E6B98h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6B98h case    0:*/		return 0x821E6B9C;
		  /* 821E6B9Ch */ case    1:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821E6B9Ch case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821E6B9Ch case    1:*/		return 0x821E6BA0;
		  /* 821E6BA0h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821E6BA0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E6BA0h case    2:*/		return 0x821E6BA4;
		  /* 821E6BA4h */ case    3:  		/* bc 12, CR6_EQ, 68 */
		/* 821E6BA4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E6BE8;  }
		/* 821E6BA4h case    3:*/		return 0x821E6BA8;
	}
	return 0x821E6BA8;
} // Block from 821E6B98h-821E6BA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E6BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6BA8);
		  /* 821E6BA8h */ case    0:  		/* lwz R10, <#[R11 + 12]> */
		/* 821E6BA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E6BA8h case    0:*/		return 0x821E6BAC;
		  /* 821E6BACh */ case    1:  		/* lwz R7, <#[R10 + 48]> */
		/* 821E6BACh case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000030) );
		/* 821E6BACh case    1:*/		return 0x821E6BB0;
		  /* 821E6BB0h */ case    2:  		/* rlwinm. R7, R7, 10, 31, 31 */
		/* 821E6BB0h case    2:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R7,regs.R7);
		/* 821E6BB0h case    2:*/		return 0x821E6BB4;
		  /* 821E6BB4h */ case    3:  		/* bc 12, CR0_EQ, 48 */
		/* 821E6BB4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E6BE4;  }
		/* 821E6BB4h case    3:*/		return 0x821E6BB8;
		  /* 821E6BB8h */ case    4:  		/* b 16 */
		/* 821E6BB8h case    4:*/		return 0x821E6BC8;
		/* 821E6BB8h case    4:*/		return 0x821E6BBC;
		  /* 821E6BBCh */ case    5:  		/* lwz R7, <#[R10 + 48]> */
		/* 821E6BBCh case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000030) );
		/* 821E6BBCh case    5:*/		return 0x821E6BC0;
		  /* 821E6BC0h */ case    6:  		/* rlwinm. R7, R7, 0, 9, 9 */
		/* 821E6BC0h case    6:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R7,regs.R7);
		/* 821E6BC0h case    6:*/		return 0x821E6BC4;
		  /* 821E6BC4h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 821E6BC4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E6BD4;  }
		/* 821E6BC4h case    7:*/		return 0x821E6BC8;
	}
	return 0x821E6BC8;
} // Block from 821E6BA8h-821E6BC8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E6BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6BC8);
		  /* 821E6BC8h */ case    0:  		/* lwz R10, <#[R10 + 80]> */
		/* 821E6BC8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000050) );
		/* 821E6BC8h case    0:*/		return 0x821E6BCC;
		  /* 821E6BCCh */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821E6BCCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E6BCCh case    1:*/		return 0x821E6BD0;
		  /* 821E6BD0h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821E6BD0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E6BBC;  }
		/* 821E6BD0h case    2:*/		return 0x821E6BD4;
	}
	return 0x821E6BD4;
} // Block from 821E6BC8h-821E6BD4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6BD4);
		  /* 821E6BD4h */ case    0:  		/* stw R10, <#[R11 + 12]> */
		/* 821E6BD4h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E6BD4h case    0:*/		return 0x821E6BD8;
		  /* 821E6BD8h */ case    1:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821E6BD8h case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821E6BD8h case    1:*/		return 0x821E6BDC;
		  /* 821E6BDCh */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821E6BDCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E6BDCh case    2:*/		return 0x821E6BE0;
		  /* 821E6BE0h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 821E6BE0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E6BE8;  }
		/* 821E6BE0h case    3:*/		return 0x821E6BE4;
	}
	return 0x821E6BE4;
} // Block from 821E6BD4h-821E6BE4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E6BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6BE4);
		  /* 821E6BE4h */ case    0:  		/* addi R8, R8, 1 */
		/* 821E6BE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821E6BE4h case    0:*/		return 0x821E6BE8;
	}
	return 0x821E6BE8;
} // Block from 821E6BE4h-821E6BE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E6BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6BE8);
		  /* 821E6BE8h */ case    0:  		/* lwz R11, <#[R11 + 24]> */
		/* 821E6BE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821E6BE8h case    0:*/		return 0x821E6BEC;
		  /* 821E6BECh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E6BECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6BECh case    1:*/		return 0x821E6BF0;
		  /* 821E6BF0h */ case    2:  		/* bc 4, CR6_EQ, -168 */
		/* 821E6BF0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E6B48;  }
		/* 821E6BF0h case    2:*/		return 0x821E6BF4;
		  /* 821E6BF4h */ case    3:  		/* cmplwi CR6, R8, 1 */
		/* 821E6BF4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 821E6BF4h case    3:*/		return 0x821E6BF8;
		  /* 821E6BF8h */ case    4:  		/* bc 4, CR6_GT, 16 */
		/* 821E6BF8h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821E6C08;  }
		/* 821E6BF8h case    4:*/		return 0x821E6BFC;
		  /* 821E6BFCh */ case    5:  		/* lwz R11, <#[R20 + 44]> */
		/* 821E6BFCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821E6BFCh case    5:*/		return 0x821E6C00;
		  /* 821E6C00h */ case    6:  		/* ori R11, R11, 8192 */
		/* 821E6C00h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 821E6C00h case    6:*/		return 0x821E6C04;
		  /* 821E6C04h */ case    7:  		/* stw R11, <#[R20 + 44]> */
		/* 821E6C04h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821E6C04h case    7:*/		return 0x821E6C08;
	}
	return 0x821E6C08;
} // Block from 821E6BE8h-821E6C08h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E6C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6C08);
		  /* 821E6C08h */ case    0:  		/* lwz R10, <#[R20 + 620]> */
		/* 821E6C08h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E6C08h case    0:*/		return 0x821E6C0C;
		  /* 821E6C0Ch */ case    1:  		/* addi R9, R9, 68 */
		/* 821E6C0Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x44);
		/* 821E6C0Ch case    1:*/		return 0x821E6C10;
		  /* 821E6C10h */ case    2:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E6C10h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E6C10h case    2:*/		return 0x821E6C14;
		  /* 821E6C14h */ case    3:  		/* mulli R10, R10, 68 */
		/* 821E6C14h case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821E6C14h case    3:*/		return 0x821E6C18;
		  /* 821E6C18h */ case    4:  		/* add R11, R10, R11 */
		/* 821E6C18h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E6C18h case    4:*/		return 0x821E6C1C;
		  /* 821E6C1Ch */ case    5:  		/* cmplw CR6, R9, R11 */
		/* 821E6C1Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821E6C1Ch case    5:*/		return 0x821E6C20;
		  /* 821E6C20h */ case    6:  		/* bc 12, CR6_LT, -232 */
		/* 821E6C20h case    6:*/		if ( regs.CR[6].lt ) { return 0x821E6B38;  }
		/* 821E6C20h case    6:*/		return 0x821E6C24;
	}
	return 0x821E6C24;
} // Block from 821E6C08h-821E6C24h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E6C24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6C24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6C24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6C24);
		  /* 821E6C24h */ case    0:  		/* addi R1, R1, 784 */
		/* 821E6C24h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x310);
		/* 821E6C24h case    0:*/		return 0x821E6C28;
		  /* 821E6C28h */ case    1:  		/* addi R12, R1, -152 */
		/* 821E6C28h case    1:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFF68);
		/* 821E6C28h case    1:*/		return 0x821E6C2C;
		  /* 821E6C2Ch */ case    2:  		/* bl -1398756 */
		/* 821E6C2Ch case    2:*/		regs.LR = 0x821E6C30; return 0x82091448;
		/* 821E6C2Ch case    2:*/		return 0x821E6C30;
		  /* 821E6C30h */ case    3:  		/* b -1399232 */
		/* 821E6C30h case    3:*/		return 0x82091270;
		/* 821E6C30h case    3:*/		return 0x821E6C34;
		  /* 821E6C34h */ case    4:  		/* nop */
		/* 821E6C34h case    4:*/		cpu::op::nop();
		/* 821E6C34h case    4:*/		return 0x821E6C38;
	}
	return 0x821E6C38;
} // Block from 821E6C24h-821E6C38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E6C38h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6C38);
		  /* 821E6C38h */ case    0:  		/* mfspr R12, LR */
		/* 821E6C38h case    0:*/		regs.R12 = regs.LR;
		/* 821E6C38h case    0:*/		return 0x821E6C3C;
		  /* 821E6C3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821E6C3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821E6C3Ch case    1:*/		return 0x821E6C40;
		  /* 821E6C40h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821E6C40h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821E6C40h case    2:*/		return 0x821E6C44;
		  /* 821E6C44h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821E6C44h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E6C44h case    3:*/		return 0x821E6C48;
		  /* 821E6C48h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821E6C48h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821E6C48h case    4:*/		return 0x821E6C4C;
		  /* 821E6C4Ch */ case    5:  		/* lwz R11, <#[R3 + 40]> */
		/* 821E6C4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 821E6C4Ch case    5:*/		return 0x821E6C50;
		  /* 821E6C50h */ case    6:  		/* mr R31, R3 */
		/* 821E6C50h case    6:*/		regs.R31 = regs.R3;
		/* 821E6C50h case    6:*/		return 0x821E6C54;
		  /* 821E6C54h */ case    7:  		/* rlwinm. R11, R11, 0, 18, 18 */
		/* 821E6C54h case    7:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R11,regs.R11);
		/* 821E6C54h case    7:*/		return 0x821E6C58;
		  /* 821E6C58h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821E6C58h case    8:*/		if ( regs.CR[0].eq ) { return 0x821E6C64;  }
		/* 821E6C58h case    8:*/		return 0x821E6C5C;
		  /* 821E6C5Ch */ case    9:  		/* li R4, 0 */
		/* 821E6C5Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E6C5Ch case    9:*/		return 0x821E6C60;
		  /* 821E6C60h */ case   10:  		/* bl -134800 */
		/* 821E6C60h case   10:*/		regs.LR = 0x821E6C64; return 0x821C5DD0;
		/* 821E6C60h case   10:*/		return 0x821E6C64;
	}
	return 0x821E6C64;
} // Block from 821E6C38h-821E6C64h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E6C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6C64);
		  /* 821E6C64h */ case    0:  		/* mr R3, R31 */
		/* 821E6C64h case    0:*/		regs.R3 = regs.R31;
		/* 821E6C64h case    0:*/		return 0x821E6C68;
		  /* 821E6C68h */ case    1:  		/* bl -425968 */
		/* 821E6C68h case    1:*/		regs.LR = 0x821E6C6C; return 0x8217EC78;
		/* 821E6C68h case    1:*/		return 0x821E6C6C;
		  /* 821E6C6Ch */ case    2:  		/* mr R3, R31 */
		/* 821E6C6Ch case    2:*/		regs.R3 = regs.R31;
		/* 821E6C6Ch case    2:*/		return 0x821E6C70;
		  /* 821E6C70h */ case    3:  		/* bl -118120 */
		/* 821E6C70h case    3:*/		regs.LR = 0x821E6C74; return 0x821C9F08;
		/* 821E6C70h case    3:*/		return 0x821E6C74;
		  /* 821E6C74h */ case    4:  		/* lwz R11, <#[R31 + 40]> */
		/* 821E6C74h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821E6C74h case    4:*/		return 0x821E6C78;
		  /* 821E6C78h */ case    5:  		/* rlwinm. R11, R11, 0, 16, 16 */
		/* 821E6C78h case    5:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R11,regs.R11);
		/* 821E6C78h case    5:*/		return 0x821E6C7C;
		  /* 821E6C7Ch */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 821E6C7Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x821E6C90;  }
		/* 821E6C7Ch case    6:*/		return 0x821E6C80;
		  /* 821E6C80h */ case    7:  		/* mr R3, R31 */
		/* 821E6C80h case    7:*/		regs.R3 = regs.R31;
		/* 821E6C80h case    7:*/		return 0x821E6C84;
		  /* 821E6C84h */ case    8:  		/* bl -31724 */
		/* 821E6C84h case    8:*/		regs.LR = 0x821E6C88; return 0x821DF098;
		/* 821E6C84h case    8:*/		return 0x821E6C88;
		  /* 821E6C88h */ case    9:  		/* addi R3, R31, 972 */
		/* 821E6C88h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x3CC);
		/* 821E6C88h case    9:*/		return 0x821E6C8C;
		  /* 821E6C8Ch */ case   10:  		/* bl -609372 */
		/* 821E6C8Ch case   10:*/		regs.LR = 0x821E6C90; return 0x82152030;
		/* 821E6C8Ch case   10:*/		return 0x821E6C90;
	}
	return 0x821E6C90;
} // Block from 821E6C64h-821E6C90h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E6C90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6C90);
		  /* 821E6C90h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 821E6C90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821E6C90h case    0:*/		return 0x821E6C94;
		  /* 821E6C94h */ case    1:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 821E6C94h case    1:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 821E6C94h case    1:*/		return 0x821E6C98;
		  /* 821E6C98h */ case    2:  		/* bc 12, CR0_EQ, 48 */
		/* 821E6C98h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E6CC8;  }
		/* 821E6C98h case    2:*/		return 0x821E6C9C;
		  /* 821E6C9Ch */ case    3:  		/* mr R3, R31 */
		/* 821E6C9Ch case    3:*/		regs.R3 = regs.R31;
		/* 821E6C9Ch case    3:*/		return 0x821E6CA0;
		  /* 821E6CA0h */ case    4:  		/* bl -93968 */
		/* 821E6CA0h case    4:*/		regs.LR = 0x821E6CA4; return 0x821CFD90;
		/* 821E6CA0h case    4:*/		return 0x821E6CA4;
		  /* 821E6CA4h */ case    5:  		/* mr R3, R31 */
		/* 821E6CA4h case    5:*/		regs.R3 = regs.R31;
		/* 821E6CA4h case    5:*/		return 0x821E6CA8;
		  /* 821E6CA8h */ case    6:  		/* bl -117616 */
		/* 821E6CA8h case    6:*/		regs.LR = 0x821E6CAC; return 0x821CA138;
		/* 821E6CA8h case    6:*/		return 0x821E6CAC;
		  /* 821E6CACh */ case    7:  		/* li R4, 1 */
		/* 821E6CACh case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E6CACh case    7:*/		return 0x821E6CB0;
		  /* 821E6CB0h */ case    8:  		/* mr R3, R31 */
		/* 821E6CB0h case    8:*/		regs.R3 = regs.R31;
		/* 821E6CB0h case    8:*/		return 0x821E6CB4;
		  /* 821E6CB4h */ case    9:  		/* bl -54332 */
		/* 821E6CB4h case    9:*/		regs.LR = 0x821E6CB8; return 0x821D9878;
		/* 821E6CB4h case    9:*/		return 0x821E6CB8;
		  /* 821E6CB8h */ case   10:  		/* mr R3, R31 */
		/* 821E6CB8h case   10:*/		regs.R3 = regs.R31;
		/* 821E6CB8h case   10:*/		return 0x821E6CBC;
		  /* 821E6CBCh */ case   11:  		/* bl -45860 */
		/* 821E6CBCh case   11:*/		regs.LR = 0x821E6CC0; return 0x821DB998;
		/* 821E6CBCh case   11:*/		return 0x821E6CC0;
		  /* 821E6CC0h */ case   12:  		/* addi R3, R31, 972 */
		/* 821E6CC0h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x3CC);
		/* 821E6CC0h case   12:*/		return 0x821E6CC4;
		  /* 821E6CC4h */ case   13:  		/* bl -609428 */
		/* 821E6CC4h case   13:*/		regs.LR = 0x821E6CC8; return 0x82152030;
		/* 821E6CC4h case   13:*/		return 0x821E6CC8;
	}
	return 0x821E6CC8;
} // Block from 821E6C90h-821E6CC8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E6CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6CC8);
		  /* 821E6CC8h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 821E6CC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821E6CC8h case    0:*/		return 0x821E6CCC;
		  /* 821E6CCCh */ case    1:  		/* rlwinm. R11, R11, 0, 18, 18 */
		/* 821E6CCCh case    1:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R11,regs.R11);
		/* 821E6CCCh case    1:*/		return 0x821E6CD0;
		  /* 821E6CD0h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821E6CD0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E6CE0;  }
		/* 821E6CD0h case    2:*/		return 0x821E6CD4;
		  /* 821E6CD4h */ case    3:  		/* li R4, 1 */
		/* 821E6CD4h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E6CD4h case    3:*/		return 0x821E6CD8;
		  /* 821E6CD8h */ case    4:  		/* mr R3, R31 */
		/* 821E6CD8h case    4:*/		regs.R3 = regs.R31;
		/* 821E6CD8h case    4:*/		return 0x821E6CDC;
		  /* 821E6CDCh */ case    5:  		/* bl -134924 */
		/* 821E6CDCh case    5:*/		regs.LR = 0x821E6CE0; return 0x821C5DD0;
		/* 821E6CDCh case    5:*/		return 0x821E6CE0;
	}
	return 0x821E6CE0;
} // Block from 821E6CC8h-821E6CE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E6CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6CE0);
		  /* 821E6CE0h */ case    0:  		/* mr R3, R31 */
		/* 821E6CE0h case    0:*/		regs.R3 = regs.R31;
		/* 821E6CE0h case    0:*/		return 0x821E6CE4;
		  /* 821E6CE4h */ case    1:  		/* bl -117676 */
		/* 821E6CE4h case    1:*/		regs.LR = 0x821E6CE8; return 0x821CA138;
		/* 821E6CE4h case    1:*/		return 0x821E6CE8;
		  /* 821E6CE8h */ case    2:  		/* addi R30, R31, 972 */
		/* 821E6CE8h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x3CC);
		/* 821E6CE8h case    2:*/		return 0x821E6CEC;
		  /* 821E6CECh */ case    3:  		/* mr R3, R30 */
		/* 821E6CECh case    3:*/		regs.R3 = regs.R30;
		/* 821E6CECh case    3:*/		return 0x821E6CF0;
		  /* 821E6CF0h */ case    4:  		/* bl -609472 */
		/* 821E6CF0h case    4:*/		regs.LR = 0x821E6CF4; return 0x82152030;
		/* 821E6CF0h case    4:*/		return 0x821E6CF4;
		  /* 821E6CF4h */ case    5:  		/* li R4, 1 */
		/* 821E6CF4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E6CF4h case    5:*/		return 0x821E6CF8;
		  /* 821E6CF8h */ case    6:  		/* mr R3, R31 */
		/* 821E6CF8h case    6:*/		regs.R3 = regs.R31;
		/* 821E6CF8h case    6:*/		return 0x821E6CFC;
		  /* 821E6CFCh */ case    7:  		/* bl -54404 */
		/* 821E6CFCh case    7:*/		regs.LR = 0x821E6D00; return 0x821D9878;
		/* 821E6CFCh case    7:*/		return 0x821E6D00;
		  /* 821E6D00h */ case    8:  		/* mr R3, R30 */
		/* 821E6D00h case    8:*/		regs.R3 = regs.R30;
		/* 821E6D00h case    8:*/		return 0x821E6D04;
		  /* 821E6D04h */ case    9:  		/* bl -609492 */
		/* 821E6D04h case    9:*/		regs.LR = 0x821E6D08; return 0x82152030;
		/* 821E6D04h case    9:*/		return 0x821E6D08;
		  /* 821E6D08h */ case   10:  		/* mr R3, R31 */
		/* 821E6D08h case   10:*/		regs.R3 = regs.R31;
		/* 821E6D08h case   10:*/		return 0x821E6D0C;
		  /* 821E6D0Ch */ case   11:  		/* bl -44756 */
		/* 821E6D0Ch case   11:*/		regs.LR = 0x821E6D10; return 0x821DBE38;
		/* 821E6D0Ch case   11:*/		return 0x821E6D10;
		  /* 821E6D10h */ case   12:  		/* lwz R11, <#[R31 + 44]> */
		/* 821E6D10h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E6D10h case   12:*/		return 0x821E6D14;
		  /* 821E6D14h */ case   13:  		/* mr R3, R31 */
		/* 821E6D14h case   13:*/		regs.R3 = regs.R31;
		/* 821E6D14h case   13:*/		return 0x821E6D18;
		  /* 821E6D18h */ case   14:  		/* oris R11, R11, 2 */
		/* 821E6D18h case   14:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821E6D18h case   14:*/		return 0x821E6D1C;
		  /* 821E6D1Ch */ case   15:  		/* stw R11, <#[R31 + 44]> */
		/* 821E6D1Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E6D1Ch case   15:*/		return 0x821E6D20;
		  /* 821E6D20h */ case   16:  		/* bl -44776 */
		/* 821E6D20h case   16:*/		regs.LR = 0x821E6D24; return 0x821DBE38;
		/* 821E6D20h case   16:*/		return 0x821E6D24;
		  /* 821E6D24h */ case   17:  		/* lwz R11, <#[R31 + 44]> */
		/* 821E6D24h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E6D24h case   17:*/		return 0x821E6D28;
		  /* 821E6D28h */ case   18:  		/* mr R3, R30 */
		/* 821E6D28h case   18:*/		regs.R3 = regs.R30;
		/* 821E6D28h case   18:*/		return 0x821E6D2C;
		  /* 821E6D2Ch */ case   19:  		/* addis R11, R11, -2 */
		/* 821E6D2Ch case   19:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 821E6D2Ch case   19:*/		return 0x821E6D30;
		  /* 821E6D30h */ case   20:  		/* stw R11, <#[R31 + 44]> */
		/* 821E6D30h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E6D30h case   20:*/		return 0x821E6D34;
		  /* 821E6D34h */ case   21:  		/* bl -609540 */
		/* 821E6D34h case   21:*/		regs.LR = 0x821E6D38; return 0x82152030;
		/* 821E6D34h case   21:*/		return 0x821E6D38;
		  /* 821E6D38h */ case   22:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E6D38h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E6D38h case   22:*/		return 0x821E6D3C;
		  /* 821E6D3Ch */ case   23:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821E6D3Ch case   23:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821E6D3Ch case   23:*/		return 0x821E6D40;
		  /* 821E6D40h */ case   24:  		/* addic R10, R9, -1 */
		/* 821E6D40h case   24:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R9,0xFFFFFFFF);
		/* 821E6D40h case   24:*/		return 0x821E6D44;
		  /* 821E6D44h */ case   25:  		/* subfe R10, R10, R10 */
		/* 821E6D44h case   25:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821E6D44h case   25:*/		return 0x821E6D48;
		  /* 821E6D48h */ case   26:  		/* and R10, R10, R11 */
		/* 821E6D48h case   26:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E6D48h case   26:*/		return 0x821E6D4C;
		  /* 821E6D4Ch */ case   27:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E6D4Ch case   27:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E6D4Ch case   27:*/		return 0x821E6D50;
		  /* 821E6D50h */ case   28:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E6D50h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E6D50h case   28:*/		return 0x821E6D54;
		  /* 821E6D54h */ case   29:  		/* rlwinm. R8, R10, 0, 31, 31 */
		/* 821E6D54h case   29:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R10);
		/* 821E6D54h case   29:*/		return 0x821E6D58;
		  /* 821E6D58h */ case   30:  		/* bc 4, CR0_EQ, 108 */
		/* 821E6D58h case   30:*/		if ( !regs.CR[0].eq ) { return 0x821E6DC4;  }
		/* 821E6D58h case   30:*/		return 0x821E6D5C;
		  /* 821E6D5Ch */ case   31:  		/* cmplwi CR6, R10, 0 */
		/* 821E6D5Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E6D5Ch case   31:*/		return 0x821E6D60;
		  /* 821E6D60h */ case   32:  		/* bc 12, CR6_EQ, 100 */
		/* 821E6D60h case   32:*/		if ( regs.CR[6].eq ) { return 0x821E6DC4;  }
		/* 821E6D60h case   32:*/		return 0x821E6D64;
		  /* 821E6D64h */ case   33:  		/* cmplwi CR6, R9, 0 */
		/* 821E6D64h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E6D64h case   33:*/		return 0x821E6D68;
		  /* 821E6D68h */ case   34:  		/* bc 4, CR6_EQ, 92 */
		/* 821E6D68h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821E6DC4;  }
		/* 821E6D68h case   34:*/		return 0x821E6D6C;
		  /* 821E6D6Ch */ case   35:  		/* cmplwi CR0, R11, 0 */
		/* 821E6D6Ch case   35:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E6D6Ch case   35:*/		return 0x821E6D70;
		  /* 821E6D70h */ case   36:  		/* bc 12, CR0_EQ, 84 */
		/* 821E6D70h case   36:*/		if ( regs.CR[0].eq ) { return 0x821E6DC4;  }
		/* 821E6D70h case   36:*/		return 0x821E6D74;
		  /* 821E6D74h */ case   37:  		/* lwz R10, <#[R11 + 36]> */
		/* 821E6D74h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821E6D74h case   37:*/		return 0x821E6D78;
		  /* 821E6D78h */ case   38:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E6D78h case   38:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E6D78h case   38:*/		return 0x821E6D7C;
		  /* 821E6D7Ch */ case   39:  		/* bc 4, CR0_EQ, 48 */
		/* 821E6D7Ch case   39:*/		if ( !regs.CR[0].eq ) { return 0x821E6DAC;  }
		/* 821E6D7Ch case   39:*/		return 0x821E6D80;
		  /* 821E6D80h */ case   40:  		/* lwz R10, <#[R11 + 32]> */
		/* 821E6D80h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 821E6D80h case   40:*/		return 0x821E6D84;
		  /* 821E6D84h */ case   41:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E6D84h case   41:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E6D84h case   41:*/		return 0x821E6D88;
		  /* 821E6D88h */ case   42:  		/* addic. R10, R10, -40 */
		/* 821E6D88h case   42:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R10,0xFFFFFFD8);
		/* 821E6D88h case   42:*/		return 0x821E6D8C;
		  /* 821E6D8Ch */ case   43:  		/* bc 12, CR0_EQ, 32 */
		/* 821E6D8Ch case   43:*/		if ( regs.CR[0].eq ) { return 0x821E6DAC;  }
		/* 821E6D8Ch case   43:*/		return 0x821E6D90;
		  /* 821E6D90h */ case   44:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E6D90h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E6D90h case   44:*/		return 0x821E6D94;
		  /* 821E6D94h */ case   45:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821E6D94h case   45:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821E6D94h case   45:*/		return 0x821E6D98;
		  /* 821E6D98h */ case   46:  		/* cmplwi CR6, R10, 11520 */
		/* 821E6D98h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002D00);
		/* 821E6D98h case   46:*/		return 0x821E6D9C;
		  /* 821E6D9Ch */ case   47:  		/* bc 4, CR6_EQ, 16 */
		/* 821E6D9Ch case   47:*/		if ( !regs.CR[6].eq ) { return 0x821E6DAC;  }
		/* 821E6D9Ch case   47:*/		return 0x821E6DA0;
		  /* 821E6DA0h */ case   48:  		/* lwz R10, <#[R31 + 44]> */
		/* 821E6DA0h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E6DA0h case   48:*/		return 0x821E6DA4;
		  /* 821E6DA4h */ case   49:  		/* oris R10, R10, 64 */
		/* 821E6DA4h case   49:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x40);
		/* 821E6DA4h case   49:*/		return 0x821E6DA8;
		  /* 821E6DA8h */ case   50:  		/* stw R10, <#[R31 + 44]> */
		/* 821E6DA8h case   50:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E6DA8h case   50:*/		return 0x821E6DAC;
	}
	return 0x821E6DAC;
} // Block from 821E6CE0h-821E6DACh (51 instructions)

//////////////////////////////////////////////////////
// Block at 821E6DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6DAC);
		  /* 821E6DACh */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E6DACh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E6DACh case    0:*/		return 0x821E6DB0;
		  /* 821E6DB0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E6DB0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E6DB0h case    1:*/		return 0x821E6DB4;
		  /* 821E6DB4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E6DB4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E6DB4h case    2:*/		return 0x821E6DB8;
		  /* 821E6DB8h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E6DB8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E6DC4;  }
		/* 821E6DB8h case    3:*/		return 0x821E6DBC;
		  /* 821E6DBCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E6DBCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6DBCh case    4:*/		return 0x821E6DC0;
		  /* 821E6DC0h */ case    5:  		/* bc 4, CR6_EQ, -76 */
		/* 821E6DC0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E6D74;  }
		/* 821E6DC0h case    5:*/		return 0x821E6DC4;
	}
	return 0x821E6DC4;
} // Block from 821E6DACh-821E6DC4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E6DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6DC4);
		  /* 821E6DC4h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 821E6DC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821E6DC4h case    0:*/		return 0x821E6DC8;
		  /* 821E6DC8h */ case    1:  		/* mr R3, R31 */
		/* 821E6DC8h case    1:*/		regs.R3 = regs.R31;
		/* 821E6DC8h case    1:*/		return 0x821E6DCC;
		  /* 821E6DCCh */ case    2:  		/* rlwinm R11, R11, 0, 23, 21 */
		/* 821E6DCCh case    2:*/		cpu::op::rlwinm<0,0,23,21>(regs,&regs.R11,regs.R11);
		/* 821E6DCCh case    2:*/		return 0x821E6DD0;
		  /* 821E6DD0h */ case    3:  		/* stw R11, <#[R31 + 40]> */
		/* 821E6DD0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821E6DD0h case    3:*/		return 0x821E6DD4;
		  /* 821E6DD4h */ case    4:  		/* bl -28308 */
		/* 821E6DD4h case    4:*/		regs.LR = 0x821E6DD8; return 0x821DFF40;
		/* 821E6DD4h case    4:*/		return 0x821E6DD8;
		  /* 821E6DD8h */ case    5:  		/* lwz R11, <#[R31 + 40]> */
		/* 821E6DD8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821E6DD8h case    5:*/		return 0x821E6DDC;
		  /* 821E6DDCh */ case    6:  		/* rlwinm. R11, R11, 0, 18, 18 */
		/* 821E6DDCh case    6:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R11,regs.R11);
		/* 821E6DDCh case    6:*/		return 0x821E6DE0;
		  /* 821E6DE0h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 821E6DE0h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E6DF0;  }
		/* 821E6DE0h case    7:*/		return 0x821E6DE4;
		  /* 821E6DE4h */ case    8:  		/* li R4, 2 */
		/* 821E6DE4h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821E6DE4h case    8:*/		return 0x821E6DE8;
		  /* 821E6DE8h */ case    9:  		/* mr R3, R31 */
		/* 821E6DE8h case    9:*/		regs.R3 = regs.R31;
		/* 821E6DE8h case    9:*/		return 0x821E6DEC;
		  /* 821E6DECh */ case   10:  		/* bl -135196 */
		/* 821E6DECh case   10:*/		regs.LR = 0x821E6DF0; return 0x821C5DD0;
		/* 821E6DECh case   10:*/		return 0x821E6DF0;
	}
	return 0x821E6DF0;
} // Block from 821E6DC4h-821E6DF0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E6DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6DF0);
		  /* 821E6DF0h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 821E6DF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E6DF0h case    0:*/		return 0x821E6DF4;
		  /* 821E6DF4h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 821E6DF4h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 821E6DF4h case    1:*/		return 0x821E6DF8;
		  /* 821E6DF8h */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 821E6DF8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E6E10;  }
		/* 821E6DF8h case    2:*/		return 0x821E6DFC;
		  /* 821E6DFCh */ case    3:  		/* mr R3, R31 */
		/* 821E6DFCh case    3:*/		regs.R3 = regs.R31;
		/* 821E6DFCh case    3:*/		return 0x821E6E00;
		  /* 821E6E00h */ case    4:  		/* bl -34832 */
		/* 821E6E00h case    4:*/		regs.LR = 0x821E6E04; return 0x821DE5F0;
		/* 821E6E00h case    4:*/		return 0x821E6E04;
		  /* 821E6E04h */ case    5:  		/* li R4, 1 */
		/* 821E6E04h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E6E04h case    5:*/		return 0x821E6E08;
		  /* 821E6E08h */ case    6:  		/* mr R3, R31 */
		/* 821E6E08h case    6:*/		regs.R3 = regs.R31;
		/* 821E6E08h case    6:*/		return 0x821E6E0C;
		  /* 821E6E0Ch */ case    7:  		/* bl -34268 */
		/* 821E6E0Ch case    7:*/		regs.LR = 0x821E6E10; return 0x821DE830;
		/* 821E6E0Ch case    7:*/		return 0x821E6E10;
	}
	return 0x821E6E10;
} // Block from 821E6DF0h-821E6E10h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E6E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6E10);
		  /* 821E6E10h */ case    0:  		/* mr R3, R31 */
		/* 821E6E10h case    0:*/		regs.R3 = regs.R31;
		/* 821E6E10h case    0:*/		return 0x821E6E14;
		  /* 821E6E14h */ case    1:  		/* bl -49684 */
		/* 821E6E14h case    1:*/		regs.LR = 0x821E6E18; return 0x821DAC00;
		/* 821E6E14h case    1:*/		return 0x821E6E18;
		  /* 821E6E18h */ case    2:  		/* mr R3, R31 */
		/* 821E6E18h case    2:*/		regs.R3 = regs.R31;
		/* 821E6E18h case    2:*/		return 0x821E6E1C;
		  /* 821E6E1Ch */ case    3:  		/* bl -423836 */
		/* 821E6E1Ch case    3:*/		regs.LR = 0x821E6E20; return 0x8217F680;
		/* 821E6E1Ch case    3:*/		return 0x821E6E20;
		  /* 821E6E20h */ case    4:  		/* mr R3, R31 */
		/* 821E6E20h case    4:*/		regs.R3 = regs.R31;
		/* 821E6E20h case    4:*/		return 0x821E6E24;
		  /* 821E6E24h */ case    5:  		/* bl -37028 */
		/* 821E6E24h case    5:*/		regs.LR = 0x821E6E28; return 0x821DDD80;
		/* 821E6E24h case    5:*/		return 0x821E6E28;
		  /* 821E6E28h */ case    6:  		/* mr R3, R31 */
		/* 821E6E28h case    6:*/		regs.R3 = regs.R31;
		/* 821E6E28h case    6:*/		return 0x821E6E2C;
		  /* 821E6E2Ch */ case    7:  		/* bl -423596 */
		/* 821E6E2Ch case    7:*/		regs.LR = 0x821E6E30; return 0x8217F780;
		/* 821E6E2Ch case    7:*/		return 0x821E6E30;
		  /* 821E6E30h */ case    8:  		/* mr R3, R30 */
		/* 821E6E30h case    8:*/		regs.R3 = regs.R30;
		/* 821E6E30h case    8:*/		return 0x821E6E34;
		  /* 821E6E34h */ case    9:  		/* bl -609796 */
		/* 821E6E34h case    9:*/		regs.LR = 0x821E6E38; return 0x82152030;
		/* 821E6E34h case    9:*/		return 0x821E6E38;
		  /* 821E6E38h */ case   10:  		/* lwz R11, <#[R31 + 44]> */
		/* 821E6E38h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E6E38h case   10:*/		return 0x821E6E3C;
		  /* 821E6E3Ch */ case   11:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 821E6E3Ch case   11:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 821E6E3Ch case   11:*/		return 0x821E6E40;
		  /* 821E6E40h */ case   12:  		/* bc 12, CR0_EQ, 68 */
		/* 821E6E40h case   12:*/		if ( regs.CR[0].eq ) { return 0x821E6E84;  }
		/* 821E6E40h case   12:*/		return 0x821E6E44;
		  /* 821E6E44h */ case   13:  		/* li R4, 0 */
		/* 821E6E44h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E6E44h case   13:*/		return 0x821E6E48;
		  /* 821E6E48h */ case   14:  		/* mr R3, R31 */
		/* 821E6E48h case   14:*/		regs.R3 = regs.R31;
		/* 821E6E48h case   14:*/		return 0x821E6E4C;
		  /* 821E6E4Ch */ case   15:  		/* bl -34332 */
		/* 821E6E4Ch case   15:*/		regs.LR = 0x821E6E50; return 0x821DE830;
		/* 821E6E4Ch case   15:*/		return 0x821E6E50;
		  /* 821E6E50h */ case   16:  		/* mr R3, R30 */
		/* 821E6E50h case   16:*/		regs.R3 = regs.R30;
		/* 821E6E50h case   16:*/		return 0x821E6E54;
		  /* 821E6E54h */ case   17:  		/* bl -609828 */
		/* 821E6E54h case   17:*/		regs.LR = 0x821E6E58; return 0x82152030;
		/* 821E6E54h case   17:*/		return 0x821E6E58;
		  /* 821E6E58h */ case   18:  		/* lwz R11, <#[R31 + 56]> */
		/* 821E6E58h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821E6E58h case   18:*/		return 0x821E6E5C;
		  /* 821E6E5Ch */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821E6E5Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E6E5Ch case   19:*/		return 0x821E6E60;
		  /* 821E6E60h */ case   20:  		/* bc 12, CR6_EQ, 36 */
		/* 821E6E60h case   20:*/		if ( regs.CR[6].eq ) { return 0x821E6E84;  }
		/* 821E6E60h case   20:*/		return 0x821E6E64;
		  /* 821E6E64h */ case   21:  		/* lwz R11, <#[R11]> */
		/* 821E6E64h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821E6E64h case   21:*/		return 0x821E6E68;
		  /* 821E6E68h */ case   22:  		/* andi. R11, R11, 1280 */
		/* 821E6E68h case   22:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0x500);
		/* 821E6E68h case   22:*/		return 0x821E6E6C;
		  /* 821E6E6Ch */ case   23:  		/* cmplwi CR0, R11, 0 */
		/* 821E6E6Ch case   23:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E6E6Ch case   23:*/		return 0x821E6E70;
		  /* 821E6E70h */ case   24:  		/* bc 12, CR0_EQ, 20 */
		/* 821E6E70h case   24:*/		if ( regs.CR[0].eq ) { return 0x821E6E84;  }
		/* 821E6E70h case   24:*/		return 0x821E6E74;
		  /* 821E6E74h */ case   25:  		/* mr R3, R31 */
		/* 821E6E74h case   25:*/		regs.R3 = regs.R31;
		/* 821E6E74h case   25:*/		return 0x821E6E78;
		  /* 821E6E78h */ case   26:  		/* bl -33664 */
		/* 821E6E78h case   26:*/		regs.LR = 0x821E6E7C; return 0x821DEAF8;
		/* 821E6E78h case   26:*/		return 0x821E6E7C;
		  /* 821E6E7Ch */ case   27:  		/* mr R3, R30 */
		/* 821E6E7Ch case   27:*/		regs.R3 = regs.R30;
		/* 821E6E7Ch case   27:*/		return 0x821E6E80;
		  /* 821E6E80h */ case   28:  		/* bl -609872 */
		/* 821E6E80h case   28:*/		regs.LR = 0x821E6E84; return 0x82152030;
		/* 821E6E80h case   28:*/		return 0x821E6E84;
	}
	return 0x821E6E84;
} // Block from 821E6E10h-821E6E84h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E6E84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6E84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6E84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6E84);
		  /* 821E6E84h */ case    0:  		/* mr R3, R31 */
		/* 821E6E84h case    0:*/		regs.R3 = regs.R31;
		/* 821E6E84h case    0:*/		return 0x821E6E88;
		  /* 821E6E88h */ case    1:  		/* bl -119928 */
		/* 821E6E88h case    1:*/		regs.LR = 0x821E6E8C; return 0x821C9A10;
		/* 821E6E88h case    1:*/		return 0x821E6E8C;
		  /* 821E6E8Ch */ case    2:  		/* mr R3, R30 */
		/* 821E6E8Ch case    2:*/		regs.R3 = regs.R30;
		/* 821E6E8Ch case    2:*/		return 0x821E6E90;
		  /* 821E6E90h */ case    3:  		/* bl -609888 */
		/* 821E6E90h case    3:*/		regs.LR = 0x821E6E94; return 0x82152030;
		/* 821E6E90h case    3:*/		return 0x821E6E94;
		  /* 821E6E94h */ case    4:  		/* addi R1, R1, 112 */
		/* 821E6E94h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821E6E94h case    4:*/		return 0x821E6E98;
		  /* 821E6E98h */ case    5:  		/* lwz R12, <#[R1 - 8]> */
		/* 821E6E98h case    5:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821E6E98h case    5:*/		return 0x821E6E9C;
		  /* 821E6E9Ch */ case    6:  		/* mtspr LR, R12 */
		/* 821E6E9Ch case    6:*/		regs.LR = regs.R12;
		/* 821E6E9Ch case    6:*/		return 0x821E6EA0;
		  /* 821E6EA0h */ case    7:  		/* ld R30, <#[R1 - 24]> */
		/* 821E6EA0h case    7:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821E6EA0h case    7:*/		return 0x821E6EA4;
		  /* 821E6EA4h */ case    8:  		/* ld R31, <#[R1 - 16]> */
		/* 821E6EA4h case    8:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E6EA4h case    8:*/		return 0x821E6EA8;
		  /* 821E6EA8h */ case    9:  		/* bclr 20, CR0_LT */
		/* 821E6EA8h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821E6EA8h case    9:*/		return 0x821E6EAC;
	}
	return 0x821E6EAC;
} // Block from 821E6E84h-821E6EACh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E6EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6EAC);
		  /* 821E6EACh */ case    0:  		/* nop */
		/* 821E6EACh case    0:*/		cpu::op::nop();
		/* 821E6EACh case    0:*/		return 0x821E6EB0;
		  /* 821E6EB0h */ case    1:  		/* lis R11, -64 */
		/* 821E6EB0h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFC0);
		/* 821E6EB0h case    1:*/		return 0x821E6EB4;
		  /* 821E6EB4h */ case    2:  		/* stw R11, <#[R1 - 16]> */
		/* 821E6EB4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E6EB4h case    2:*/		return 0x821E6EB8;
		  /* 821E6EB8h */ case    3:  		/* lfs FR1, <#[R1 - 16]> */
		/* 821E6EB8h case    3:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E6EB8h case    3:*/		return 0x821E6EBC;
		  /* 821E6EBCh */ case    4:  		/* bclr 20, CR0_LT */
		/* 821E6EBCh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821E6EBCh case    4:*/		return 0x821E6EC0;
	}
	return 0x821E6EC0;
} // Block from 821E6EACh-821E6EC0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E6EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6EC0);
		  /* 821E6EC0h */ case    0:  		/* mfspr R12, LR */
		/* 821E6EC0h case    0:*/		regs.R12 = regs.LR;
		/* 821E6EC0h case    0:*/		return 0x821E6EC4;
		  /* 821E6EC4h */ case    1:  		/* bl -1399944 */
		/* 821E6EC4h case    1:*/		regs.LR = 0x821E6EC8; return 0x8209123C;
		/* 821E6EC4h case    1:*/		return 0x821E6EC8;
		  /* 821E6EC8h */ case    2:  		/* stfd FR31, <#[R1 - 104]> */
		/* 821E6EC8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 821E6EC8h case    2:*/		return 0x821E6ECC;
		  /* 821E6ECCh */ case    3:  		/* stwu R1, <#[R1 - 192]> */
		/* 821E6ECCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821E6ECCh case    3:*/		return 0x821E6ED0;
		  /* 821E6ED0h */ case    4:  		/* li R11, 1 */
		/* 821E6ED0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E6ED0h case    4:*/		return 0x821E6ED4;
		  /* 821E6ED4h */ case    5:  		/* stw R7, <#[R3 + 48]> */
		/* 821E6ED4h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000030) );
		/* 821E6ED4h case    5:*/		return 0x821E6ED8;
		  /* 821E6ED8h */ case    6:  		/* mr R31, R3 */
		/* 821E6ED8h case    6:*/		regs.R31 = regs.R3;
		/* 821E6ED8h case    6:*/		return 0x821E6EDC;
		  /* 821E6EDCh */ case    7:  		/* stw R8, <#[R3 + 52]> */
		/* 821E6EDCh case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000034) );
		/* 821E6EDCh case    7:*/		return 0x821E6EE0;
		  /* 821E6EE0h */ case    8:  		/* mr R30, R5 */
		/* 821E6EE0h case    8:*/		regs.R30 = regs.R5;
		/* 821E6EE0h case    8:*/		return 0x821E6EE4;
		  /* 821E6EE4h */ case    9:  		/* stw R9, <#[R3 + 56]> */
		/* 821E6EE4h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000038) );
		/* 821E6EE4h case    9:*/		return 0x821E6EE8;
		  /* 821E6EE8h */ case   10:  		/* mr R29, R6 */
		/* 821E6EE8h case   10:*/		regs.R29 = regs.R6;
		/* 821E6EE8h case   10:*/		return 0x821E6EEC;
		  /* 821E6EECh */ case   11:  		/* std R11, <#[R3 + 112]> */
		/* 821E6EECh case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R3 + 0x00000070) );
		/* 821E6EECh case   11:*/		return 0x821E6EF0;
		  /* 821E6EF0h */ case   12:  		/* mr R27, R7 */
		/* 821E6EF0h case   12:*/		regs.R27 = regs.R7;
		/* 821E6EF0h case   12:*/		return 0x821E6EF4;
		  /* 821E6EF4h */ case   13:  		/* mr R28, R8 */
		/* 821E6EF4h case   13:*/		regs.R28 = regs.R8;
		/* 821E6EF4h case   13:*/		return 0x821E6EF8;
		  /* 821E6EF8h */ case   14:  		/* cmpwi CR6, R4, 6 */
		/* 821E6EF8h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000006);
		/* 821E6EF8h case   14:*/		return 0x821E6EFC;
		  /* 821E6EFCh */ case   15:  		/* bc 12, CR6_EQ, 88 */
		/* 821E6EFCh case   15:*/		if ( regs.CR[6].eq ) { return 0x821E6F54;  }
		/* 821E6EFCh case   15:*/		return 0x821E6F00;
		  /* 821E6F00h */ case   16:  		/* cmpwi CR6, R4, 10 */
		/* 821E6F00h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000000A);
		/* 821E6F00h case   16:*/		return 0x821E6F04;
		  /* 821E6F04h */ case   17:  		/* bc 12, CR6_EQ, 80 */
		/* 821E6F04h case   17:*/		if ( regs.CR[6].eq ) { return 0x821E6F54;  }
		/* 821E6F04h case   17:*/		return 0x821E6F08;
		  /* 821E6F08h */ case   18:  		/* cmpwi CR6, R4, 14 */
		/* 821E6F08h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000000E);
		/* 821E6F08h case   18:*/		return 0x821E6F0C;
		  /* 821E6F0Ch */ case   19:  		/* bc 12, CR6_EQ, 72 */
		/* 821E6F0Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x821E6F54;  }
		/* 821E6F0Ch case   19:*/		return 0x821E6F10;
		  /* 821E6F10h */ case   20:  		/* subfic R10, R5, 40 */
		/* 821E6F10h case   20:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R5,0x28);
		/* 821E6F10h case   20:*/		return 0x821E6F14;
		  /* 821E6F14h */ case   21:  		/* li R26, 0 */
		/* 821E6F14h case   21:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821E6F14h case   21:*/		return 0x821E6F18;
		  /* 821E6F18h */ case   22:  		/* cmpwi CR6, R10, 0 */
		/* 821E6F18h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 821E6F18h case   22:*/		return 0x821E6F1C;
		  /* 821E6F1Ch */ case   23:  		/* mr R11, R26 */
		/* 821E6F1Ch case   23:*/		regs.R11 = regs.R26;
		/* 821E6F1Ch case   23:*/		return 0x821E6F20;
		  /* 821E6F20h */ case   24:  		/* bc 4, CR6_GT, 28 */
		/* 821E6F20h case   24:*/		if ( !regs.CR[6].gt ) { return 0x821E6F3C;  }
		/* 821E6F20h case   24:*/		return 0x821E6F24;
		  /* 821E6F24h */ case   25:  		/* ld R8, <#[R31 + 112]> */
		/* 821E6F24h case   25:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R31 + 0x00000070) );
		/* 821E6F24h case   25:*/		return 0x821E6F28;
		  /* 821E6F28h */ case   26:  		/* addi R11, R11, 1 */
		/* 821E6F28h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E6F28h case   26:*/		return 0x821E6F2C;
		  /* 821E6F2Ch */ case   27:  		/* rldicr R8, R8, 1, 62 */
		/* 821E6F2Ch case   27:*/		cpu::op::rldicr<0,1,62>(regs,&regs.R8,regs.R8);
		/* 821E6F2Ch case   27:*/		return 0x821E6F30;
		  /* 821E6F30h */ case   28:  		/* cmpw CR6, R11, R10 */
		/* 821E6F30h case   28:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821E6F30h case   28:*/		return 0x821E6F34;
		  /* 821E6F34h */ case   29:  		/* std R8, <#[R31 + 112]> */
		/* 821E6F34h case   29:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R31 + 0x00000070) );
		/* 821E6F34h case   29:*/		return 0x821E6F38;
		  /* 821E6F38h */ case   30:  		/* bc 12, CR6_LT, -20 */
		/* 821E6F38h case   30:*/		if ( regs.CR[6].lt ) { return 0x821E6F24;  }
		/* 821E6F38h case   30:*/		return 0x821E6F3C;
	}
	return 0x821E6F3C;
} // Block from 821E6EC0h-821E6F3Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 821E6F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6F3C);
		  /* 821E6F3Ch */ case    0:  		/* ld R11, <#[R31 + 112]> */
		/* 821E6F3Ch case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 821E6F3Ch case    0:*/		return 0x821E6F40;
		  /* 821E6F40h */ case    1:  		/* lis R12, -1 */
		/* 821E6F40h case    1:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFFF);
		/* 821E6F40h case    1:*/		return 0x821E6F44;
		  /* 821E6F44h */ case    2:  		/* addi R11, R11, -1 */
		/* 821E6F44h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E6F44h case    2:*/		return 0x821E6F48;
		  /* 821E6F48h */ case    3:  		/* nor R11, R11, R11 */
		/* 821E6F48h case    3:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821E6F48h case    3:*/		return 0x821E6F4C;
		  /* 821E6F4Ch */ case    4:  		/* or R11, R11, R12 */
		/* 821E6F4Ch case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 821E6F4Ch case    4:*/		return 0x821E6F50;
		  /* 821E6F50h */ case    5:  		/* b 60 */
		/* 821E6F50h case    5:*/		return 0x821E6F8C;
		/* 821E6F50h case    5:*/		return 0x821E6F54;
	}
	return 0x821E6F54;
} // Block from 821E6F3Ch-821E6F54h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E6F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6F54);
		  /* 821E6F54h */ case    0:  		/* subfic R10, R30, 38 */
		/* 821E6F54h case    0:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R30,0x26);
		/* 821E6F54h case    0:*/		return 0x821E6F58;
		  /* 821E6F58h */ case    1:  		/* li R26, 0 */
		/* 821E6F58h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821E6F58h case    1:*/		return 0x821E6F5C;
		  /* 821E6F5Ch */ case    2:  		/* cmpwi CR6, R10, 0 */
		/* 821E6F5Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 821E6F5Ch case    2:*/		return 0x821E6F60;
		  /* 821E6F60h */ case    3:  		/* mr R11, R26 */
		/* 821E6F60h case    3:*/		regs.R11 = regs.R26;
		/* 821E6F60h case    3:*/		return 0x821E6F64;
		  /* 821E6F64h */ case    4:  		/* bc 4, CR6_GT, 28 */
		/* 821E6F64h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821E6F80;  }
		/* 821E6F64h case    4:*/		return 0x821E6F68;
		  /* 821E6F68h */ case    5:  		/* ld R8, <#[R31 + 112]> */
		/* 821E6F68h case    5:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R31 + 0x00000070) );
		/* 821E6F68h case    5:*/		return 0x821E6F6C;
		  /* 821E6F6Ch */ case    6:  		/* addi R11, R11, 1 */
		/* 821E6F6Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E6F6Ch case    6:*/		return 0x821E6F70;
		  /* 821E6F70h */ case    7:  		/* rldicr R8, R8, 1, 62 */
		/* 821E6F70h case    7:*/		cpu::op::rldicr<0,1,62>(regs,&regs.R8,regs.R8);
		/* 821E6F70h case    7:*/		return 0x821E6F74;
		  /* 821E6F74h */ case    8:  		/* cmpw CR6, R11, R10 */
		/* 821E6F74h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821E6F74h case    8:*/		return 0x821E6F78;
		  /* 821E6F78h */ case    9:  		/* std R8, <#[R31 + 112]> */
		/* 821E6F78h case    9:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R31 + 0x00000070) );
		/* 821E6F78h case    9:*/		return 0x821E6F7C;
		  /* 821E6F7Ch */ case   10:  		/* bc 12, CR6_LT, -20 */
		/* 821E6F7Ch case   10:*/		if ( regs.CR[6].lt ) { return 0x821E6F68;  }
		/* 821E6F7Ch case   10:*/		return 0x821E6F80;
	}
	return 0x821E6F80;
} // Block from 821E6F54h-821E6F80h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E6F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6F80);
		  /* 821E6F80h */ case    0:  		/* ld R11, <#[R31 + 112]> */
		/* 821E6F80h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 821E6F80h case    0:*/		return 0x821E6F84;
		  /* 821E6F84h */ case    1:  		/* addi R11, R11, -1 */
		/* 821E6F84h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E6F84h case    1:*/		return 0x821E6F88;
		  /* 821E6F88h */ case    2:  		/* nor R11, R11, R11 */
		/* 821E6F88h case    2:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821E6F88h case    2:*/		return 0x821E6F8C;
	}
	return 0x821E6F8C;
} // Block from 821E6F80h-821E6F8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E6F8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E6F8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E6F8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E6F8C);
		  /* 821E6F8Ch */ case    0:  		/* std R11, <#[R31 + 112]> */
		/* 821E6F8Ch case    0:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 821E6F8Ch case    0:*/		return 0x821E6F90;
		  /* 821E6F90h */ case    1:  		/* addi R11, R4, -5 */
		/* 821E6F90h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0xFFFFFFFB);
		/* 821E6F90h case    1:*/		return 0x821E6F94;
		  /* 821E6F94h */ case    2:  		/* cmplwi CR6, R11, 19 */
		/* 821E6F94h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000013);
		/* 821E6F94h case    2:*/		return 0x821E6F98;
		  /* 821E6F98h */ case    3:  		/* bc 12, CR6_GT, 2708 */
		/* 821E6F98h case    3:*/		if ( regs.CR[6].gt ) { return 0x821E7A2C;  }
		/* 821E6F98h case    3:*/		return 0x821E6F9C;
		  /* 821E6F9Ch */ case    4:  		/* lis R12, -32252 */
		/* 821E6F9Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 821E6F9Ch case    4:*/		return 0x821E6FA0;
		  /* 821E6FA0h */ case    5:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 821E6FA0h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 821E6FA0h case    5:*/		return 0x821E6FA4;
		  /* 821E6FA4h */ case    6:  		/* addi R12, R12, -14736 */
		/* 821E6FA4h case    6:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFC670);
		/* 821E6FA4h case    6:*/		return 0x821E6FA8;
		  /* 821E6FA8h */ case    7:  		/* lhzx R0, <#[R12 + R0]> */
		/* 821E6FA8h case    7:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 821E6FA8h case    7:*/		return 0x821E6FAC;
		  /* 821E6FACh */ case    8:  		/* lis R12, -32226 */
		/* 821E6FACh case    8:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF821E);
		/* 821E6FACh case    8:*/		return 0x821E6FB0;
		  /* 821E6FB0h */ case    9:  		/* addi R12, R12, 28612 */
		/* 821E6FB0h case    9:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x6FC4);
		/* 821E6FB0h case    9:*/		return 0x821E6FB4;
		  /* 821E6FB4h */ case   10:  		/* ori R0, R0, 0 */
		/* 821E6FB4h case   10:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821E6FB4h case   10:*/		return 0x821E6FB8;
		  /* 821E6FB8h */ case   11:  		/* add R12, R12, R0 */
		/* 821E6FB8h case   11:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 821E6FB8h case   11:*/		return 0x821E6FBC;
		  /* 821E6FBCh */ case   12:  		/* mtspr CTR, R12 */
		/* 821E6FBCh case   12:*/		regs.CTR = regs.R12;
		/* 821E6FBCh case   12:*/		return 0x821E6FC0;
		  /* 821E6FC0h */ case   13:  		/* bcctr 20, CR0_LT */
		/* 821E6FC0h case   13:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821E6FC0h case   13:*/		return 0x821E6FC4;
		  /* 821E6FC4h */ case   14:  		/* add R10, R30, R9 */
		/* 821E6FC4h case   14:*/		cpu::op::add<0>(regs,&regs.R10,regs.R30,regs.R9);
		/* 821E6FC4h case   14:*/		return 0x821E6FC8;
		  /* 821E6FC8h */ case   15:  		/* mulli R4, R29, 3 */
		/* 821E6FC8h case   15:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R29,0x3);
		/* 821E6FC8h case   15:*/		return 0x821E6FCC;
		  /* 821E6FCCh */ case   16:  		/* rlwinm R7, R29, 1, 0, 30 */
		/* 821E6FCCh case   16:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R29);
		/* 821E6FCCh case   16:*/		return 0x821E6FD0;
		  /* 821E6FD0h */ case   17:  		/* add R11, R30, R27 */
		/* 821E6FD0h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R27);
		/* 821E6FD0h case   17:*/		return 0x821E6FD4;
		  /* 821E6FD4h */ case   18:  		/* addi R23, R10, -22 */
		/* 821E6FD4h case   18:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0xFFFFFFEA);
		/* 821E6FD4h case   18:*/		return 0x821E6FD8;
		  /* 821E6FD8h */ case   19:  		/* rlwinm R5, R28, 1, 0, 30 */
		/* 821E6FD8h case   19:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R28);
		/* 821E6FD8h case   19:*/		return 0x821E6FDC;
		  /* 821E6FDCh */ case   20:  		/* subf R8, R4, R30 */
		/* 821E6FDCh case   20:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R4,regs.R30);
		/* 821E6FDCh case   20:*/		return 0x821E6FE0;
		  /* 821E6FE0h */ case   21:  		/* subf R3, R30, R7 */
		/* 821E6FE0h case   21:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R30,regs.R7);
		/* 821E6FE0h case   21:*/		return 0x821E6FE4;
		  /* 821E6FE4h */ case   22:  		/* subf R10, R30, R29 */
		/* 821E6FE4h case   22:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R30,regs.R29);
		/* 821E6FE4h case   22:*/		return 0x821E6FE8;
		  /* 821E6FE8h */ case   23:  		/* addi R24, R11, -20 */
		/* 821E6FE8h case   23:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFFFEC);
		/* 821E6FE8h case   23:*/		return 0x821E6FEC;
		  /* 821E6FECh */ case   24:  		/* subf R7, R7, R30 */
		/* 821E6FECh case   24:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R7,regs.R30);
		/* 821E6FECh case   24:*/		return 0x821E6FF0;
		  /* 821E6FF0h */ case   25:  		/* add R11, R8, R9 */
		/* 821E6FF0h case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R9);
		/* 821E6FF0h case   25:*/		return 0x821E6FF4;
		  /* 821E6FF4h */ case   26:  		/* subf R22, R29, R5 */
		/* 821E6FF4h case   26:*/		cpu::op::subf<0>(regs,&regs.R22,regs.R29,regs.R5);
		/* 821E6FF4h case   26:*/		return 0x821E6FF8;
		  /* 821E6FF8h */ case   27:  		/* subf R8, R28, R10 */
		/* 821E6FF8h case   27:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R28,regs.R10);
		/* 821E6FF8h case   27:*/		return 0x821E6FFC;
		  /* 821E6FFCh */ case   28:  		/* subf R25, R29, R30 */
		/* 821E6FFCh case   28:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R29,regs.R30);
		/* 821E6FFCh case   28:*/		return 0x821E7000;
		  /* 821E7000h */ case   29:  		/* subf R5, R9, R3 */
		/* 821E7000h case   29:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R9,regs.R3);
		/* 821E7000h case   29:*/		return 0x821E7004;
		  /* 821E7004h */ case   30:  		/* add R10, R7, R28 */
		/* 821E7004h case   30:*/		cpu::op::add<0>(regs,&regs.R10,regs.R7,regs.R28);
		/* 821E7004h case   30:*/		return 0x821E7008;
		  /* 821E7008h */ case   31:  		/* subf R9, R9, R22 */
		/* 821E7008h case   31:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R22);
		/* 821E7008h case   31:*/		return 0x821E700C;
		  /* 821E700Ch */ case   32:  		/* add R6, R25, R28 */
		/* 821E700Ch case   32:*/		cpu::op::add<0>(regs,&regs.R6,regs.R25,regs.R28);
		/* 821E700Ch case   32:*/		return 0x821E7010;
		  /* 821E7010h */ case   33:  		/* subfic R3, R30, 23 */
		/* 821E7010h case   33:*/		cpu::op::subfic<0>(regs,&regs.R3,regs.R30,0x17);
		/* 821E7010h case   33:*/		return 0x821E7014;
		  /* 821E7014h */ case   34:  		/* addi R28, R10, -2 */
		/* 821E7014h case   34:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFFFFE);
		/* 821E7014h case   34:*/		return 0x821E7018;
		  /* 821E7018h */ case   35:  		/* add R10, R9, R30 */
		/* 821E7018h case   35:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R30);
		/* 821E7018h case   35:*/		return 0x821E701C;
		  /* 821E701Ch */ case   36:  		/* addi R7, R6, -21 */
		/* 821E701Ch case   36:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R6,0xFFFFFFEB);
		/* 821E701Ch case   36:*/		return 0x821E7020;
		  /* 821E7020h */ case   37:  		/* stw R28, <#[R31 + 72]> */
		/* 821E7020h case   37:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000048) );
		/* 821E7020h case   37:*/		return 0x821E7024;
		  /* 821E7024h */ case   38:  		/* addi R8, R8, 25 */
		/* 821E7024h case   38:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x19);
		/* 821E7024h case   38:*/		return 0x821E7028;
		  /* 821E7028h */ case   39:  		/* stw R10, <#[R31 + 76]> */
		/* 821E7028h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 821E7028h case   39:*/		return 0x821E702C;
		  /* 821E702Ch */ case   40:  		/* subf R9, R27, R3 */
		/* 821E702Ch case   40:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R27,regs.R3);
		/* 821E702Ch case   40:*/		return 0x821E7030;
		  /* 821E7030h */ case   41:  		/* rlwinm R6, R24, 1, 0, 30 */
		/* 821E7030h case   41:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R6,regs.R24);
		/* 821E7030h case   41:*/		return 0x821E7034;
		  /* 821E7034h */ case   42:  		/* stw R8, <#[R31 + 64]> */
		/* 821E7034h case   42:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000040) );
		/* 821E7034h case   42:*/		return 0x821E7038;
		  /* 821E7038h */ case   43:  		/* rlwinm R23, R23, 1, 0, 30 */
		/* 821E7038h case   43:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R23,regs.R23);
		/* 821E7038h case   43:*/		return 0x821E703C;
		  /* 821E703Ch */ case   44:  		/* stw R9, <#[R31 + 60]> */
		/* 821E703Ch case   44:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E703Ch case   44:*/		return 0x821E7040;
		  /* 821E7040h */ case   45:  		/* addi R24, R11, -4 */
		/* 821E7040h case   45:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFFFFC);
		/* 821E7040h case   45:*/		return 0x821E7044;
		  /* 821E7044h */ case   46:  		/* subf R10, R29, R6 */
		/* 821E7044h case   46:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R29,regs.R6);
		/* 821E7044h case   46:*/		return 0x821E7048;
		  /* 821E7048h */ case   47:  		/* addi R5, R5, 27 */
		/* 821E7048h case   47:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1B);
		/* 821E7048h case   47:*/		return 0x821E704C;
		  /* 821E704Ch */ case   48:  		/* stw R24, <#[R31 + 80]> */
		/* 821E704Ch case   48:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000050) );
		/* 821E704Ch case   48:*/		return 0x821E7050;
		  /* 821E7050h */ case   49:  		/* rlwinm R8, R7, 1, 0, 30 */
		/* 821E7050h case   49:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R7);
		/* 821E7050h case   49:*/		return 0x821E7054;
		  /* 821E7054h */ case   50:  		/* stw R10, <#[R31 + 84]> */
		/* 821E7054h case   50:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000054) );
		/* 821E7054h case   50:*/		return 0x821E7058;
		  /* 821E7058h */ case   51:  		/* subf R9, R4, R23 */
		/* 821E7058h case   51:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R4,regs.R23);
		/* 821E7058h case   51:*/		return 0x821E705C;
		  /* 821E705Ch */ case   52:  		/* stw R5, <#[R31 + 68]> */
		/* 821E705Ch case   52:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x00000044) );
		/* 821E705Ch case   52:*/		return 0x821E7060;
		  /* 821E7060h */ case   53:  		/* stw R8, <#[R31 + 88]> */
		/* 821E7060h case   53:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000058) );
		/* 821E7060h case   53:*/		return 0x821E7064;
		  /* 821E7064h */ case   54:  		/* addi R11, R11, -2 */
		/* 821E7064h case   54:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 821E7064h case   54:*/		return 0x821E7068;
		  /* 821E7068h */ case   55:  		/* stw R9, <#[R31 + 92]> */
		/* 821E7068h case   55:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000005C) );
		/* 821E7068h case   55:*/		return 0x821E706C;
		  /* 821E706Ch */ case   56:  		/* lis R10, -32255 */
		/* 821E706Ch case   56:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821E706Ch case   56:*/		return 0x821E7070;
		  /* 821E7070h */ case   57:  		/* extsw R11, R11 */
		/* 821E7070h case   57:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E7070h case   57:*/		return 0x821E7074;
		  /* 821E7074h */ case   58:  		/* std R11, <#[R1 + 80]> */
		/* 821E7074h case   58:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7074h case   58:*/		return 0x821E7078;
		  /* 821E7078h */ case   59:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E7078h case   59:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7078h case   59:*/		return 0x821E707C;
		  /* 821E707Ch */ case   60:  		/* fcfid FR2, FR0 */
		/* 821E707Ch case   60:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E707Ch case   60:*/		return 0x821E7080;
		  /* 821E7080h */ case   61:  		/* lfd FR31, <#[R10 - 24504]> */
		/* 821E7080h case   61:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0xFFFFA048) );
		/* 821E7080h case   61:*/		return 0x821E7084;
		  /* 821E7084h */ case   62:  		/* fmr FR1, FR31 */
		/* 821E7084h case   62:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E7084h case   62:*/		return 0x821E7088;
		  /* 821E7088h */ case   63:  		/* bl -1395408 */
		/* 821E7088h case   63:*/		regs.LR = 0x821E708C; return 0x820925B8;
		/* 821E7088h case   63:*/		return 0x821E708C;
		  /* 821E708Ch */ case   64:  		/* stfd FR1, <#[R31 + 24]> */
		/* 821E708Ch case   64:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000018) );
		/* 821E708Ch case   64:*/		return 0x821E7090;
		  /* 821E7090h */ case   65:  		/* extsw R11, R28 */
		/* 821E7090h case   65:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R28);
		/* 821E7090h case   65:*/		return 0x821E7094;
		  /* 821E7094h */ case   66:  		/* fmr FR1, FR31 */
		/* 821E7094h case   66:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E7094h case   66:*/		return 0x821E7098;
		  /* 821E7098h */ case   67:  		/* std R11, <#[R1 + 80]> */
		/* 821E7098h case   67:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7098h case   67:*/		return 0x821E709C;
		  /* 821E709Ch */ case   68:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E709Ch case   68:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E709Ch case   68:*/		return 0x821E70A0;
		  /* 821E70A0h */ case   69:  		/* fcfid FR2, FR0 */
		/* 821E70A0h case   69:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E70A0h case   69:*/		return 0x821E70A4;
		  /* 821E70A4h */ case   70:  		/* bl -1395436 */
		/* 821E70A4h case   70:*/		regs.LR = 0x821E70A8; return 0x820925B8;
		/* 821E70A4h case   70:*/		return 0x821E70A8;
		  /* 821E70A8h */ case   71:  		/* stfd FR1, <#[R31 + 16]> */
		/* 821E70A8h case   71:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000010) );
		/* 821E70A8h case   71:*/		return 0x821E70AC;
		  /* 821E70ACh */ case   72:  		/* add R27, R25, R27 */
		/* 821E70ACh case   72:*/		cpu::op::add<0>(regs,&regs.R27,regs.R25,regs.R27);
		/* 821E70ACh case   72:*/		return 0x821E70B0;
		  /* 821E70B0h */ case   73:  		/* fmr FR1, FR31 */
		/* 821E70B0h case   73:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E70B0h case   73:*/		return 0x821E70B4;
		  /* 821E70B4h */ case   74:  		/* addi R11, R27, -2 */
		/* 821E70B4h case   74:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFE);
		/* 821E70B4h case   74:*/		return 0x821E70B8;
		  /* 821E70B8h */ case   75:  		/* extsw R11, R11 */
		/* 821E70B8h case   75:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E70B8h case   75:*/		return 0x821E70BC;
		  /* 821E70BCh */ case   76:  		/* std R11, <#[R1 + 80]> */
		/* 821E70BCh case   76:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E70BCh case   76:*/		return 0x821E70C0;
		  /* 821E70C0h */ case   77:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E70C0h case   77:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E70C0h case   77:*/		return 0x821E70C4;
		  /* 821E70C4h */ case   78:  		/* fcfid FR2, FR0 */
		/* 821E70C4h case   78:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E70C4h case   78:*/		return 0x821E70C8;
		  /* 821E70C8h */ case   79:  		/* bl -1395472 */
		/* 821E70C8h case   79:*/		regs.LR = 0x821E70CC; return 0x820925B8;
		/* 821E70C8h case   79:*/		return 0x821E70CC;
		  /* 821E70CCh */ case   80:  		/* stfd FR1, <#[R31 + 8]> */
		/* 821E70CCh case   80:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000008) );
		/* 821E70CCh case   80:*/		return 0x821E70D0;
		  /* 821E70D0h */ case   81:  		/* addi R11, R30, -2 */
		/* 821E70D0h case   81:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFE);
		/* 821E70D0h case   81:*/		return 0x821E70D4;
		  /* 821E70D4h */ case   82:  		/* fmr FR1, FR31 */
		/* 821E70D4h case   82:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E70D4h case   82:*/		return 0x821E70D8;
		  /* 821E70D8h */ case   83:  		/* extsw R11, R11 */
		/* 821E70D8h case   83:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E70D8h case   83:*/		return 0x821E70DC;
		  /* 821E70DCh */ case   84:  		/* std R11, <#[R1 + 80]> */
		/* 821E70DCh case   84:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E70DCh case   84:*/		return 0x821E70E0;
		  /* 821E70E0h */ case   85:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E70E0h case   85:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E70E0h case   85:*/		return 0x821E70E4;
		  /* 821E70E4h */ case   86:  		/* fcfid FR2, FR0 */
		/* 821E70E4h case   86:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E70E4h case   86:*/		return 0x821E70E8;
		  /* 821E70E8h */ case   87:  		/* bl -1395504 */
		/* 821E70E8h case   87:*/		regs.LR = 0x821E70EC; return 0x820925B8;
		/* 821E70E8h case   87:*/		return 0x821E70EC;
		  /* 821E70ECh */ case   88:  		/* stfd FR1, <#[R31]> */
		/* 821E70ECh case   88:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 821E70ECh case   88:*/		return 0x821E70F0;
		  /* 821E70F0h */ case   89:  		/* mr R11, R26 */
		/* 821E70F0h case   89:*/		regs.R11 = regs.R26;
		/* 821E70F0h case   89:*/		return 0x821E70F4;
		  /* 821E70F4h */ case   90:  		/* stw R26, <#[R31 + 108]> */
		/* 821E70F4h case   90:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E70F4h case   90:*/		return 0x821E70F8;
		  /* 821E70F8h */ case   91:  		/* cmpwi CR6, R24, 0 */
		/* 821E70F8h case   91:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 821E70F8h case   91:*/		return 0x821E70FC;
		  /* 821E70FCh */ case   92:  		/* bc 4, CR6_GT, 32 */
		/* 821E70FCh case   92:*/		if ( !regs.CR[6].gt ) { return 0x821E711C;  }
		/* 821E70FCh case   92:*/		return 0x821E7100;
		  /* 821E7100h */ case   93:  		/* lwz R10, <#[R31 + 108]> */
		/* 821E7100h case   93:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7100h case   93:*/		return 0x821E7104;
		  /* 821E7104h */ case   94:  		/* li R9, 1 */
		/* 821E7104h case   94:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7104h case   94:*/		return 0x821E7108;
		  /* 821E7108h */ case   95:  		/* addi R11, R11, 1 */
		/* 821E7108h case   95:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7108h case   95:*/		return 0x821E710C;
		  /* 821E710Ch */ case   96:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E710Ch case   96:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E710Ch case   96:*/		return 0x821E7110;
		  /* 821E7110h */ case   97:  		/* cmpw CR6, R11, R24 */
		/* 821E7110h case   97:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R24);
		/* 821E7110h case   97:*/		return 0x821E7114;
		  /* 821E7114h */ case   98:  		/* stw R9, <#[R31 + 108]> */
		/* 821E7114h case   98:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7114h case   98:*/		return 0x821E7118;
		  /* 821E7118h */ case   99:  		/* bc 12, CR6_LT, -24 */
		/* 821E7118h case   99:*/		if ( regs.CR[6].lt ) { return 0x821E7100;  }
		/* 821E7118h case   99:*/		return 0x821E711C;
	}
	return 0x821E711C;
} // Block from 821E6F8Ch-821E711Ch (100 instructions)

//////////////////////////////////////////////////////
// Block at 821E711Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E711C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E711C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E711C);
		  /* 821E711Ch */ case    0:  		/* mr R11, R26 */
		/* 821E711Ch case    0:*/		regs.R11 = regs.R26;
		/* 821E711Ch case    0:*/		return 0x821E7120;
		  /* 821E7120h */ case    1:  		/* stw R26, <#[R31 + 104]> */
		/* 821E7120h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7120h case    1:*/		return 0x821E7124;
		  /* 821E7124h */ case    2:  		/* cmpwi CR6, R28, 0 */
		/* 821E7124h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 821E7124h case    2:*/		return 0x821E7128;
		  /* 821E7128h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E7128h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E7148;  }
		/* 821E7128h case    3:*/		return 0x821E712C;
		  /* 821E712Ch */ case    4:  		/* lwz R10, <#[R31 + 104]> */
		/* 821E712Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000068) );
		/* 821E712Ch case    4:*/		return 0x821E7130;
		  /* 821E7130h */ case    5:  		/* li R9, 1 */
		/* 821E7130h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7130h case    5:*/		return 0x821E7134;
		  /* 821E7134h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E7134h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7134h case    6:*/		return 0x821E7138;
		  /* 821E7138h */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7138h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7138h case    7:*/		return 0x821E713C;
		  /* 821E713Ch */ case    8:  		/* cmpw CR6, R11, R28 */
		/* 821E713Ch case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R28);
		/* 821E713Ch case    8:*/		return 0x821E7140;
		  /* 821E7140h */ case    9:  		/* stw R9, <#[R31 + 104]> */
		/* 821E7140h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7140h case    9:*/		return 0x821E7144;
		  /* 821E7144h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E7144h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E712C;  }
		/* 821E7144h case   10:*/		return 0x821E7148;
	}
	return 0x821E7148;
} // Block from 821E711Ch-821E7148h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E7148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7148);
		  /* 821E7148h */ case    0:  		/* mr R11, R26 */
		/* 821E7148h case    0:*/		regs.R11 = regs.R26;
		/* 821E7148h case    0:*/		return 0x821E714C;
		  /* 821E714Ch */ case    1:  		/* stw R26, <#[R31 + 100]> */
		/* 821E714Ch case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000064) );
		/* 821E714Ch case    1:*/		return 0x821E7150;
		  /* 821E7150h */ case    2:  		/* cmpwi CR6, R27, 0 */
		/* 821E7150h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 821E7150h case    2:*/		return 0x821E7154;
		  /* 821E7154h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E7154h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E7174;  }
		/* 821E7154h case    3:*/		return 0x821E7158;
		  /* 821E7158h */ case    4:  		/* lwz R10, <#[R31 + 100]> */
		/* 821E7158h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000064) );
		/* 821E7158h case    4:*/		return 0x821E715C;
		  /* 821E715Ch */ case    5:  		/* li R9, 1 */
		/* 821E715Ch case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E715Ch case    5:*/		return 0x821E7160;
		  /* 821E7160h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E7160h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7160h case    6:*/		return 0x821E7164;
		  /* 821E7164h */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7164h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7164h case    7:*/		return 0x821E7168;
		  /* 821E7168h */ case    8:  		/* cmpw CR6, R11, R27 */
		/* 821E7168h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R27);
		/* 821E7168h case    8:*/		return 0x821E716C;
		  /* 821E716Ch */ case    9:  		/* stw R9, <#[R31 + 100]> */
		/* 821E716Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000064) );
		/* 821E716Ch case    9:*/		return 0x821E7170;
		  /* 821E7170h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E7170h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E7158;  }
		/* 821E7170h case   10:*/		return 0x821E7174;
	}
	return 0x821E7174;
} // Block from 821E7148h-821E7174h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E7174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7174);
		  /* 821E7174h */ case    0:  		/* addic. R10, R30, -1 */
		/* 821E7174h case    0:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R30,0xFFFFFFFF);
		/* 821E7174h case    0:*/		return 0x821E7178;
		  /* 821E7178h */ case    1:  		/* stw R26, <#[R31 + 96]> */
		/* 821E7178h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000060) );
		/* 821E7178h case    1:*/		return 0x821E717C;
		  /* 821E717Ch */ case    2:  		/* mr R11, R26 */
		/* 821E717Ch case    2:*/		regs.R11 = regs.R26;
		/* 821E717Ch case    2:*/		return 0x821E7180;
		  /* 821E7180h */ case    3:  		/* bc 4, CR0_GT, 32 */
		/* 821E7180h case    3:*/		if ( !regs.CR[0].gt ) { return 0x821E71A0;  }
		/* 821E7180h case    3:*/		return 0x821E7184;
		  /* 821E7184h */ case    4:  		/* lwz R9, <#[R31 + 96]> */
		/* 821E7184h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000060) );
		/* 821E7184h case    4:*/		return 0x821E7188;
		  /* 821E7188h */ case    5:  		/* li R8, 1 */
		/* 821E7188h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821E7188h case    5:*/		return 0x821E718C;
		  /* 821E718Ch */ case    6:  		/* addi R11, R11, 1 */
		/* 821E718Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E718Ch case    6:*/		return 0x821E7190;
		  /* 821E7190h */ case    7:  		/* rlwimi R8, R9, 1, 0, 30 */
		/* 821E7190h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R8,regs.R9);
		/* 821E7190h case    7:*/		return 0x821E7194;
		  /* 821E7194h */ case    8:  		/* cmpw CR6, R11, R10 */
		/* 821E7194h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821E7194h case    8:*/		return 0x821E7198;
		  /* 821E7198h */ case    9:  		/* stw R8, <#[R31 + 96]> */
		/* 821E7198h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000060) );
		/* 821E7198h case    9:*/		return 0x821E719C;
		  /* 821E719Ch */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E719Ch case   10:*/		if ( regs.CR[6].lt ) { return 0x821E7184;  }
		/* 821E719Ch case   10:*/		return 0x821E71A0;
	}
	return 0x821E71A0;
} // Block from 821E7174h-821E71A0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E71A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E71A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E71A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E71A0);
		  /* 821E71A0h */ case    0:  		/* stw R30, <#[R31 + 32]> */
		/* 821E71A0h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 821E71A0h case    0:*/		return 0x821E71A4;
		  /* 821E71A4h */ case    1:  		/* cmpwi CR6, R29, 0 */
		/* 821E71A4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 821E71A4h case    1:*/		return 0x821E71A8;
		  /* 821E71A8h */ case    2:  		/* stw R27, <#[R31 + 36]> */
		/* 821E71A8h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000024) );
		/* 821E71A8h case    2:*/		return 0x821E71AC;
		  /* 821E71ACh */ case    3:  		/* stw R28, <#[R31 + 40]> */
		/* 821E71ACh case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000028) );
		/* 821E71ACh case    3:*/		return 0x821E71B0;
		  /* 821E71B0h */ case    4:  		/* stw R24, <#[R31 + 44]> */
		/* 821E71B0h case    4:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E71B0h case    4:*/		return 0x821E71B4;
		  /* 821E71B4h */ case    5:  		/* stw R26, <#[R31 + 120]> */
		/* 821E71B4h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000078) );
		/* 821E71B4h case    5:*/		return 0x821E71B8;
		  /* 821E71B8h */ case    6:  		/* bc 4, CR6_GT, 28 */
		/* 821E71B8h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821E71D4;  }
		/* 821E71B8h case    6:*/		return 0x821E71BC;
		  /* 821E71BCh */ case    7:  		/* mtspr CTR, R29 */
		/* 821E71BCh case    7:*/		regs.CTR = regs.R29;
		/* 821E71BCh case    7:*/		return 0x821E71C0;
		  /* 821E71C0h */ case    8:  		/* lwz R11, <#[R31 + 120]> */
		/* 821E71C0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821E71C0h case    8:*/		return 0x821E71C4;
		  /* 821E71C4h */ case    9:  		/* oris R11, R11, 128 */
		/* 821E71C4h case    9:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821E71C4h case    9:*/		return 0x821E71C8;
		  /* 821E71C8h */ case   10:  		/* srawi R11, R11, 1 */
		/* 821E71C8h case   10:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R11);
		/* 821E71C8h case   10:*/		return 0x821E71CC;
		  /* 821E71CCh */ case   11:  		/* stw R11, <#[R31 + 120]> */
		/* 821E71CCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821E71CCh case   11:*/		return 0x821E71D0;
		  /* 821E71D0h */ case   12:  		/* bc 16, CR0_LT, -16 */
		/* 821E71D0h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821E71C0;  }
		/* 821E71D0h case   12:*/		return 0x821E71D4;
	}
	return 0x821E71D4;
} // Block from 821E71A0h-821E71D4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E71D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E71D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E71D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E71D4);
		  /* 821E71D4h */ case    0:  		/* subfic R11, R29, 23 */
		/* 821E71D4h case    0:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R29,0x17);
		/* 821E71D4h case    0:*/		return 0x821E71D8;
		  /* 821E71D8h */ case    1:  		/* b 2688 */
		/* 821E71D8h case    1:*/		return 0x821E7C58;
		/* 821E71D8h case    1:*/		return 0x821E71DC;
		  /* 821E71DCh */ case    2:  		/* rlwinm R7, R29, 1, 0, 30 */
		/* 821E71DCh case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R29);
		/* 821E71DCh case    2:*/		return 0x821E71E0;
		  /* 821E71E0h */ case    3:  		/* mulli R10, R29, 3 */
		/* 821E71E0h case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R29,0x3);
		/* 821E71E0h case    3:*/		return 0x821E71E4;
		  /* 821E71E4h */ case    4:  		/* rlwinm R6, R28, 1, 0, 30 */
		/* 821E71E4h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R6,regs.R28);
		/* 821E71E4h case    4:*/		return 0x821E71E8;
		  /* 821E71E8h */ case    5:  		/* subf R8, R7, R30 */
		/* 821E71E8h case    5:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R7,regs.R30);
		/* 821E71E8h case    5:*/		return 0x821E71EC;
		  /* 821E71ECh */ case    6:  		/* add R11, R30, R27 */
		/* 821E71ECh case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R27);
		/* 821E71ECh case    6:*/		return 0x821E71F0;
		  /* 821E71F0h */ case    7:  		/* subf R10, R10, R30 */
		/* 821E71F0h case    7:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 821E71F0h case    7:*/		return 0x821E71F4;
		  /* 821E71F4h */ case    8:  		/* subf R7, R30, R7 */
		/* 821E71F4h case    8:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R30,regs.R7);
		/* 821E71F4h case    8:*/		return 0x821E71F8;
		  /* 821E71F8h */ case    9:  		/* subf R6, R29, R6 */
		/* 821E71F8h case    9:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R29,regs.R6);
		/* 821E71F8h case    9:*/		return 0x821E71FC;
		  /* 821E71FCh */ case   10:  		/* subf R5, R30, R29 */
		/* 821E71FCh case   10:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R30,regs.R29);
		/* 821E71FCh case   10:*/		return 0x821E7200;
		  /* 821E7200h */ case   11:  		/* addi R4, R11, -20 */
		/* 821E7200h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFEC);
		/* 821E7200h case   11:*/		return 0x821E7204;
		  /* 821E7204h */ case   12:  		/* subf R25, R29, R30 */
		/* 821E7204h case   12:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R29,regs.R30);
		/* 821E7204h case   12:*/		return 0x821E7208;
		  /* 821E7208h */ case   13:  		/* add R11, R10, R9 */
		/* 821E7208h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R9);
		/* 821E7208h case   13:*/		return 0x821E720C;
		  /* 821E720Ch */ case   14:  		/* add R3, R30, R9 */
		/* 821E720Ch case   14:*/		cpu::op::add<0>(regs,&regs.R3,regs.R30,regs.R9);
		/* 821E720Ch case   14:*/		return 0x821E7210;
		  /* 821E7210h */ case   15:  		/* subf R7, R9, R7 */
		/* 821E7210h case   15:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R9,regs.R7);
		/* 821E7210h case   15:*/		return 0x821E7214;
		  /* 821E7214h */ case   16:  		/* subf R9, R9, R6 */
		/* 821E7214h case   16:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821E7214h case   16:*/		return 0x821E7218;
		  /* 821E7218h */ case   17:  		/* subf R10, R28, R5 */
		/* 821E7218h case   17:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R28,regs.R5);
		/* 821E7218h case   17:*/		return 0x821E721C;
		  /* 821E721Ch */ case   18:  		/* add R24, R25, R28 */
		/* 821E721Ch case   18:*/		cpu::op::add<0>(regs,&regs.R24,regs.R25,regs.R28);
		/* 821E721Ch case   18:*/		return 0x821E7220;
		  /* 821E7220h */ case   19:  		/* addi R10, R10, 24 */
		/* 821E7220h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x18);
		/* 821E7220h case   19:*/		return 0x821E7224;
		  /* 821E7224h */ case   20:  		/* add R9, R9, R30 */
		/* 821E7224h case   20:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R30);
		/* 821E7224h case   20:*/		return 0x821E7228;
		  /* 821E7228h */ case   21:  		/* add R28, R8, R28 */
		/* 821E7228h case   21:*/		cpu::op::add<0>(regs,&regs.R28,regs.R8,regs.R28);
		/* 821E7228h case   21:*/		return 0x821E722C;
		  /* 821E722Ch */ case   22:  		/* stw R10, <#[R31 + 64]> */
		/* 821E722Ch case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000040) );
		/* 821E722Ch case   22:*/		return 0x821E7230;
		  /* 821E7230h */ case   23:  		/* rlwinm R8, R24, 1, 0, 30 */
		/* 821E7230h case   23:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R24);
		/* 821E7230h case   23:*/		return 0x821E7234;
		  /* 821E7234h */ case   24:  		/* stw R9, <#[R31 + 76]> */
		/* 821E7234h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000004C) );
		/* 821E7234h case   24:*/		return 0x821E7238;
		  /* 821E7238h */ case   25:  		/* subfic R5, R30, 23 */
		/* 821E7238h case   25:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R30,0x17);
		/* 821E7238h case   25:*/		return 0x821E723C;
		  /* 821E723Ch */ case   26:  		/* addi R23, R29, 14 */
		/* 821E723Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R29,0xE);
		/* 821E723Ch case   26:*/		return 0x821E7240;
		  /* 821E7240h */ case   27:  		/* rlwinm R6, R4, 1, 0, 30 */
		/* 821E7240h case   27:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R6,regs.R4);
		/* 821E7240h case   27:*/		return 0x821E7244;
		  /* 821E7244h */ case   28:  		/* rlwinm R4, R3, 1, 0, 30 */
		/* 821E7244h case   28:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R3);
		/* 821E7244h case   28:*/		return 0x821E7248;
		  /* 821E7248h */ case   29:  		/* addi R10, R8, -41 */
		/* 821E7248h case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0xFFFFFFD7);
		/* 821E7248h case   29:*/		return 0x821E724C;
		  /* 821E724Ch */ case   30:  		/* subf R9, R27, R5 */
		/* 821E724Ch case   30:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R27,regs.R5);
		/* 821E724Ch case   30:*/		return 0x821E7250;
		  /* 821E7250h */ case   31:  		/* mulli R3, R23, 3 */
		/* 821E7250h case   31:*/		cpu::op::mulli<0>(regs,&regs.R3,regs.R23,0x3);
		/* 821E7250h case   31:*/		return 0x821E7254;
		  /* 821E7254h */ case   32:  		/* stw R10, <#[R31 + 88]> */
		/* 821E7254h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000058) );
		/* 821E7254h case   32:*/		return 0x821E7258;
		  /* 821E7258h */ case   33:  		/* stw R9, <#[R31 + 60]> */
		/* 821E7258h case   33:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E7258h case   33:*/		return 0x821E725C;
		  /* 821E725Ch */ case   34:  		/* addi R24, R11, -2 */
		/* 821E725Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFFFFE);
		/* 821E725Ch case   34:*/		return 0x821E7260;
		  /* 821E7260h */ case   35:  		/* subf R10, R29, R6 */
		/* 821E7260h case   35:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R29,regs.R6);
		/* 821E7260h case   35:*/		return 0x821E7264;
		  /* 821E7264h */ case   36:  		/* addi R7, R7, 25 */
		/* 821E7264h case   36:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x19);
		/* 821E7264h case   36:*/		return 0x821E7268;
		  /* 821E7268h */ case   37:  		/* stw R24, <#[R31 + 80]> */
		/* 821E7268h case   37:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000050) );
		/* 821E7268h case   37:*/		return 0x821E726C;
		  /* 821E726Ch */ case   38:  		/* subf R9, R3, R4 */
		/* 821E726Ch case   38:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R3,regs.R4);
		/* 821E726Ch case   38:*/		return 0x821E7270;
		  /* 821E7270h */ case   39:  		/* stw R10, <#[R31 + 84]> */
		/* 821E7270h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000054) );
		/* 821E7270h case   39:*/		return 0x821E7274;
		  /* 821E7274h */ case   40:  		/* addi R23, R28, -1 */
		/* 821E7274h case   40:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R28,0xFFFFFFFF);
		/* 821E7274h case   40:*/		return 0x821E7278;
		  /* 821E7278h */ case   41:  		/* stw R7, <#[R31 + 68]> */
		/* 821E7278h case   41:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000044) );
		/* 821E7278h case   41:*/		return 0x821E727C;
		  /* 821E727Ch */ case   42:  		/* stw R9, <#[R31 + 92]> */
		/* 821E727Ch case   42:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000005C) );
		/* 821E727Ch case   42:*/		return 0x821E7280;
		  /* 821E7280h */ case   43:  		/* addi R11, R11, 2 */
		/* 821E7280h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821E7280h case   43:*/		return 0x821E7284;
		  /* 821E7284h */ case   44:  		/* stw R23, <#[R31 + 72]> */
		/* 821E7284h case   44:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000048) );
		/* 821E7284h case   44:*/		return 0x821E7288;
		  /* 821E7288h */ case   45:  		/* lis R10, -32255 */
		/* 821E7288h case   45:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821E7288h case   45:*/		return 0x821E728C;
		  /* 821E728Ch */ case   46:  		/* extsw R11, R11 */
		/* 821E728Ch case   46:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E728Ch case   46:*/		return 0x821E7290;
		  /* 821E7290h */ case   47:  		/* std R11, <#[R1 + 80]> */
		/* 821E7290h case   47:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7290h case   47:*/		return 0x821E7294;
		  /* 821E7294h */ case   48:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E7294h case   48:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7294h case   48:*/		return 0x821E7298;
		  /* 821E7298h */ case   49:  		/* fcfid FR2, FR0 */
		/* 821E7298h case   49:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E7298h case   49:*/		return 0x821E729C;
		  /* 821E729Ch */ case   50:  		/* lfd FR31, <#[R10 - 24504]> */
		/* 821E729Ch case   50:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0xFFFFA048) );
		/* 821E729Ch case   50:*/		return 0x821E72A0;
		  /* 821E72A0h */ case   51:  		/* fmr FR1, FR31 */
		/* 821E72A0h case   51:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E72A0h case   51:*/		return 0x821E72A4;
		  /* 821E72A4h */ case   52:  		/* bl -1395948 */
		/* 821E72A4h case   52:*/		regs.LR = 0x821E72A8; return 0x820925B8;
		/* 821E72A4h case   52:*/		return 0x821E72A8;
		  /* 821E72A8h */ case   53:  		/* stfd FR1, <#[R31 + 24]> */
		/* 821E72A8h case   53:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000018) );
		/* 821E72A8h case   53:*/		return 0x821E72AC;
		  /* 821E72ACh */ case   54:  		/* addi R11, R28, 1 */
		/* 821E72ACh case   54:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x1);
		/* 821E72ACh case   54:*/		return 0x821E72B0;
		  /* 821E72B0h */ case   55:  		/* fmr FR1, FR31 */
		/* 821E72B0h case   55:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E72B0h case   55:*/		return 0x821E72B4;
		  /* 821E72B4h */ case   56:  		/* extsw R11, R11 */
		/* 821E72B4h case   56:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E72B4h case   56:*/		return 0x821E72B8;
		  /* 821E72B8h */ case   57:  		/* std R11, <#[R1 + 80]> */
		/* 821E72B8h case   57:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E72B8h case   57:*/		return 0x821E72BC;
		  /* 821E72BCh */ case   58:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E72BCh case   58:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E72BCh case   58:*/		return 0x821E72C0;
		  /* 821E72C0h */ case   59:  		/* fcfid FR2, FR0 */
		/* 821E72C0h case   59:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E72C0h case   59:*/		return 0x821E72C4;
		  /* 821E72C4h */ case   60:  		/* bl -1395980 */
		/* 821E72C4h case   60:*/		regs.LR = 0x821E72C8; return 0x820925B8;
		/* 821E72C4h case   60:*/		return 0x821E72C8;
		  /* 821E72C8h */ case   61:  		/* stfd FR1, <#[R31 + 16]> */
		/* 821E72C8h case   61:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000010) );
		/* 821E72C8h case   61:*/		return 0x821E72CC;
		  /* 821E72CCh */ case   62:  		/* add R28, R25, R27 */
		/* 821E72CCh case   62:*/		cpu::op::add<0>(regs,&regs.R28,regs.R25,regs.R27);
		/* 821E72CCh case   62:*/		return 0x821E72D0;
		  /* 821E72D0h */ case   63:  		/* fmr FR1, FR31 */
		/* 821E72D0h case   63:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E72D0h case   63:*/		return 0x821E72D4;
		  /* 821E72D4h */ case   64:  		/* extsw R11, R28 */
		/* 821E72D4h case   64:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R28);
		/* 821E72D4h case   64:*/		return 0x821E72D8;
		  /* 821E72D8h */ case   65:  		/* std R11, <#[R1 + 80]> */
		/* 821E72D8h case   65:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E72D8h case   65:*/		return 0x821E72DC;
		  /* 821E72DCh */ case   66:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E72DCh case   66:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E72DCh case   66:*/		return 0x821E72E0;
		  /* 821E72E0h */ case   67:  		/* fcfid FR2, FR0 */
		/* 821E72E0h case   67:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E72E0h case   67:*/		return 0x821E72E4;
		  /* 821E72E4h */ case   68:  		/* bl -1396012 */
		/* 821E72E4h case   68:*/		regs.LR = 0x821E72E8; return 0x820925B8;
		/* 821E72E4h case   68:*/		return 0x821E72E8;
		  /* 821E72E8h */ case   69:  		/* stfd FR1, <#[R31 + 8]> */
		/* 821E72E8h case   69:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000008) );
		/* 821E72E8h case   69:*/		return 0x821E72EC;
		  /* 821E72ECh */ case   70:  		/* addi R27, R30, -1 */
		/* 821E72ECh case   70:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R30,0xFFFFFFFF);
		/* 821E72ECh case   70:*/		return 0x821E72F0;
		  /* 821E72F0h */ case   71:  		/* fmr FR1, FR31 */
		/* 821E72F0h case   71:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E72F0h case   71:*/		return 0x821E72F4;
		  /* 821E72F4h */ case   72:  		/* extsw R11, R27 */
		/* 821E72F4h case   72:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R27);
		/* 821E72F4h case   72:*/		return 0x821E72F8;
		  /* 821E72F8h */ case   73:  		/* std R11, <#[R1 + 80]> */
		/* 821E72F8h case   73:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E72F8h case   73:*/		return 0x821E72FC;
		  /* 821E72FCh */ case   74:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E72FCh case   74:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E72FCh case   74:*/		return 0x821E7300;
		  /* 821E7300h */ case   75:  		/* fcfid FR2, FR0 */
		/* 821E7300h case   75:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E7300h case   75:*/		return 0x821E7304;
		  /* 821E7304h */ case   76:  		/* bl -1396044 */
		/* 821E7304h case   76:*/		regs.LR = 0x821E7308; return 0x820925B8;
		/* 821E7304h case   76:*/		return 0x821E7308;
		  /* 821E7308h */ case   77:  		/* stfd FR1, <#[R31]> */
		/* 821E7308h case   77:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 821E7308h case   77:*/		return 0x821E730C;
		  /* 821E730Ch */ case   78:  		/* mr R11, R26 */
		/* 821E730Ch case   78:*/		regs.R11 = regs.R26;
		/* 821E730Ch case   78:*/		return 0x821E7310;
		  /* 821E7310h */ case   79:  		/* stw R26, <#[R31 + 108]> */
		/* 821E7310h case   79:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7310h case   79:*/		return 0x821E7314;
		  /* 821E7314h */ case   80:  		/* cmpwi CR6, R24, 0 */
		/* 821E7314h case   80:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 821E7314h case   80:*/		return 0x821E7318;
		  /* 821E7318h */ case   81:  		/* bc 4, CR6_GT, 32 */
		/* 821E7318h case   81:*/		if ( !regs.CR[6].gt ) { return 0x821E7338;  }
		/* 821E7318h case   81:*/		return 0x821E731C;
		  /* 821E731Ch */ case   82:  		/* lwz R10, <#[R31 + 108]> */
		/* 821E731Ch case   82:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E731Ch case   82:*/		return 0x821E7320;
		  /* 821E7320h */ case   83:  		/* li R9, 1 */
		/* 821E7320h case   83:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7320h case   83:*/		return 0x821E7324;
		  /* 821E7324h */ case   84:  		/* addi R11, R11, 1 */
		/* 821E7324h case   84:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7324h case   84:*/		return 0x821E7328;
		  /* 821E7328h */ case   85:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7328h case   85:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7328h case   85:*/		return 0x821E732C;
		  /* 821E732Ch */ case   86:  		/* cmpw CR6, R11, R24 */
		/* 821E732Ch case   86:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R24);
		/* 821E732Ch case   86:*/		return 0x821E7330;
		  /* 821E7330h */ case   87:  		/* stw R9, <#[R31 + 108]> */
		/* 821E7330h case   87:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7330h case   87:*/		return 0x821E7334;
		  /* 821E7334h */ case   88:  		/* bc 12, CR6_LT, -24 */
		/* 821E7334h case   88:*/		if ( regs.CR[6].lt ) { return 0x821E731C;  }
		/* 821E7334h case   88:*/		return 0x821E7338;
	}
	return 0x821E7338;
} // Block from 821E71D4h-821E7338h (89 instructions)

//////////////////////////////////////////////////////
// Block at 821E7338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7338);
		  /* 821E7338h */ case    0:  		/* mr R11, R26 */
		/* 821E7338h case    0:*/		regs.R11 = regs.R26;
		/* 821E7338h case    0:*/		return 0x821E733C;
		  /* 821E733Ch */ case    1:  		/* stw R26, <#[R31 + 104]> */
		/* 821E733Ch case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000068) );
		/* 821E733Ch case    1:*/		return 0x821E7340;
		  /* 821E7340h */ case    2:  		/* cmpwi CR6, R23, 0 */
		/* 821E7340h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 821E7340h case    2:*/		return 0x821E7344;
		  /* 821E7344h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E7344h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E7364;  }
		/* 821E7344h case    3:*/		return 0x821E7348;
		  /* 821E7348h */ case    4:  		/* lwz R10, <#[R31 + 104]> */
		/* 821E7348h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7348h case    4:*/		return 0x821E734C;
		  /* 821E734Ch */ case    5:  		/* li R9, 1 */
		/* 821E734Ch case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E734Ch case    5:*/		return 0x821E7350;
		  /* 821E7350h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E7350h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7350h case    6:*/		return 0x821E7354;
		  /* 821E7354h */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7354h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7354h case    7:*/		return 0x821E7358;
		  /* 821E7358h */ case    8:  		/* cmpw CR6, R11, R23 */
		/* 821E7358h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R23);
		/* 821E7358h case    8:*/		return 0x821E735C;
		  /* 821E735Ch */ case    9:  		/* stw R9, <#[R31 + 104]> */
		/* 821E735Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000068) );
		/* 821E735Ch case    9:*/		return 0x821E7360;
		  /* 821E7360h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E7360h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E7348;  }
		/* 821E7360h case   10:*/		return 0x821E7364;
	}
	return 0x821E7364;
} // Block from 821E7338h-821E7364h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E7364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7364);
		  /* 821E7364h */ case    0:  		/* mr R11, R26 */
		/* 821E7364h case    0:*/		regs.R11 = regs.R26;
		/* 821E7364h case    0:*/		return 0x821E7368;
		  /* 821E7368h */ case    1:  		/* stw R26, <#[R31 + 100]> */
		/* 821E7368h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000064) );
		/* 821E7368h case    1:*/		return 0x821E736C;
		  /* 821E736Ch */ case    2:  		/* cmpwi CR6, R28, 0 */
		/* 821E736Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 821E736Ch case    2:*/		return 0x821E7370;
		  /* 821E7370h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E7370h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E7390;  }
		/* 821E7370h case    3:*/		return 0x821E7374;
		  /* 821E7374h */ case    4:  		/* lwz R10, <#[R31 + 100]> */
		/* 821E7374h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000064) );
		/* 821E7374h case    4:*/		return 0x821E7378;
		  /* 821E7378h */ case    5:  		/* li R9, 1 */
		/* 821E7378h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7378h case    5:*/		return 0x821E737C;
		  /* 821E737Ch */ case    6:  		/* addi R11, R11, 1 */
		/* 821E737Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E737Ch case    6:*/		return 0x821E7380;
		  /* 821E7380h */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7380h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7380h case    7:*/		return 0x821E7384;
		  /* 821E7384h */ case    8:  		/* cmpw CR6, R11, R28 */
		/* 821E7384h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R28);
		/* 821E7384h case    8:*/		return 0x821E7388;
		  /* 821E7388h */ case    9:  		/* stw R9, <#[R31 + 100]> */
		/* 821E7388h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000064) );
		/* 821E7388h case    9:*/		return 0x821E738C;
		  /* 821E738Ch */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E738Ch case   10:*/		if ( regs.CR[6].lt ) { return 0x821E7374;  }
		/* 821E738Ch case   10:*/		return 0x821E7390;
	}
	return 0x821E7390;
} // Block from 821E7364h-821E7390h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E7390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7390);
		  /* 821E7390h */ case    0:  		/* mr R11, R26 */
		/* 821E7390h case    0:*/		regs.R11 = regs.R26;
		/* 821E7390h case    0:*/		return 0x821E7394;
		  /* 821E7394h */ case    1:  		/* stw R26, <#[R31 + 96]> */
		/* 821E7394h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000060) );
		/* 821E7394h case    1:*/		return 0x821E7398;
		  /* 821E7398h */ case    2:  		/* cmpwi CR6, R27, 0 */
		/* 821E7398h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 821E7398h case    2:*/		return 0x821E739C;
		  /* 821E739Ch */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E739Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E73BC;  }
		/* 821E739Ch case    3:*/		return 0x821E73A0;
		  /* 821E73A0h */ case    4:  		/* lwz R10, <#[R31 + 96]> */
		/* 821E73A0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000060) );
		/* 821E73A0h case    4:*/		return 0x821E73A4;
		  /* 821E73A4h */ case    5:  		/* li R9, 1 */
		/* 821E73A4h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E73A4h case    5:*/		return 0x821E73A8;
		  /* 821E73A8h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E73A8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E73A8h case    6:*/		return 0x821E73AC;
		  /* 821E73ACh */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E73ACh case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E73ACh case    7:*/		return 0x821E73B0;
		  /* 821E73B0h */ case    8:  		/* cmpw CR6, R11, R27 */
		/* 821E73B0h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R27);
		/* 821E73B0h case    8:*/		return 0x821E73B4;
		  /* 821E73B4h */ case    9:  		/* stw R9, <#[R31 + 96]> */
		/* 821E73B4h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000060) );
		/* 821E73B4h case    9:*/		return 0x821E73B8;
		  /* 821E73B8h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E73B8h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E73A0;  }
		/* 821E73B8h case   10:*/		return 0x821E73BC;
	}
	return 0x821E73BC;
} // Block from 821E7390h-821E73BCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E73BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E73BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E73BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E73BC);
		  /* 821E73BCh */ case    0:  		/* stw R30, <#[R31 + 32]> */
		/* 821E73BCh case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 821E73BCh case    0:*/		return 0x821E73C0;
		  /* 821E73C0h */ case    1:  		/* cmpwi CR6, R29, 0 */
		/* 821E73C0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 821E73C0h case    1:*/		return 0x821E73C4;
		  /* 821E73C4h */ case    2:  		/* stw R28, <#[R31 + 36]> */
		/* 821E73C4h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000024) );
		/* 821E73C4h case    2:*/		return 0x821E73C8;
		  /* 821E73C8h */ case    3:  		/* stw R23, <#[R31 + 40]> */
		/* 821E73C8h case    3:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000028) );
		/* 821E73C8h case    3:*/		return 0x821E73CC;
		  /* 821E73CCh */ case    4:  		/* stw R24, <#[R31 + 44]> */
		/* 821E73CCh case    4:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E73CCh case    4:*/		return 0x821E73D0;
		  /* 821E73D0h */ case    5:  		/* stw R26, <#[R31 + 120]> */
		/* 821E73D0h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000078) );
		/* 821E73D0h case    5:*/		return 0x821E73D4;
		  /* 821E73D4h */ case    6:  		/* bc 4, CR6_GT, -512 */
		/* 821E73D4h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821E71D4;  }
		/* 821E73D4h case    6:*/		return 0x821E73D8;
		  /* 821E73D8h */ case    7:  		/* mtspr CTR, R29 */
		/* 821E73D8h case    7:*/		regs.CTR = regs.R29;
		/* 821E73D8h case    7:*/		return 0x821E73DC;
		  /* 821E73DCh */ case    8:  		/* lwz R11, <#[R31 + 120]> */
		/* 821E73DCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821E73DCh case    8:*/		return 0x821E73E0;
		  /* 821E73E0h */ case    9:  		/* oris R11, R11, 128 */
		/* 821E73E0h case    9:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821E73E0h case    9:*/		return 0x821E73E4;
		  /* 821E73E4h */ case   10:  		/* srawi R11, R11, 1 */
		/* 821E73E4h case   10:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R11);
		/* 821E73E4h case   10:*/		return 0x821E73E8;
		  /* 821E73E8h */ case   11:  		/* stw R11, <#[R31 + 120]> */
		/* 821E73E8h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821E73E8h case   11:*/		return 0x821E73EC;
		  /* 821E73ECh */ case   12:  		/* bc 16, CR0_LT, -16 */
		/* 821E73ECh case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821E73DC;  }
		/* 821E73ECh case   12:*/		return 0x821E73F0;
		  /* 821E73F0h */ case   13:  		/* b -540 */
		/* 821E73F0h case   13:*/		return 0x821E71D4;
		/* 821E73F0h case   13:*/		return 0x821E73F4;
		  /* 821E73F4h */ case   14:  		/* add R10, R30, R9 */
		/* 821E73F4h case   14:*/		cpu::op::add<0>(regs,&regs.R10,regs.R30,regs.R9);
		/* 821E73F4h case   14:*/		return 0x821E73F8;
		  /* 821E73F8h */ case   15:  		/* rlwinm R7, R29, 1, 0, 30 */
		/* 821E73F8h case   15:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R29);
		/* 821E73F8h case   15:*/		return 0x821E73FC;
		  /* 821E73FCh */ case   16:  		/* addi R4, R10, -20 */
		/* 821E73FCh case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFFFFEC);
		/* 821E73FCh case   16:*/		return 0x821E7400;
		  /* 821E7400h */ case   17:  		/* add R11, R30, R27 */
		/* 821E7400h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R27);
		/* 821E7400h case   17:*/		return 0x821E7404;
		  /* 821E7404h */ case   18:  		/* subf R10, R30, R7 */
		/* 821E7404h case   18:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R30,regs.R7);
		/* 821E7404h case   18:*/		return 0x821E7408;
		  /* 821E7408h */ case   19:  		/* rlwinm R8, R28, 1, 0, 30 */
		/* 821E7408h case   19:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R28);
		/* 821E7408h case   19:*/		return 0x821E740C;
		  /* 821E740Ch */ case   20:  		/* addi R5, R11, -20 */
		/* 821E740Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFEC);
		/* 821E740Ch case   20:*/		return 0x821E7410;
		  /* 821E7410h */ case   21:  		/* subf R10, R9, R10 */
		/* 821E7410h case   21:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821E7410h case   21:*/		return 0x821E7414;
		  /* 821E7414h */ case   22:  		/* subf R11, R30, R29 */
		/* 821E7414h case   22:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R30,regs.R29);
		/* 821E7414h case   22:*/		return 0x821E7418;
		  /* 821E7418h */ case   23:  		/* subf R25, R29, R8 */
		/* 821E7418h case   23:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R29,regs.R8);
		/* 821E7418h case   23:*/		return 0x821E741C;
		  /* 821E741Ch */ case   24:  		/* subf R24, R29, R30 */
		/* 821E741Ch case   24:*/		cpu::op::subf<0>(regs,&regs.R24,regs.R29,regs.R30);
		/* 821E741Ch case   24:*/		return 0x821E7420;
		  /* 821E7420h */ case   25:  		/* subf R8, R28, R11 */
		/* 821E7420h case   25:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R28,regs.R11);
		/* 821E7420h case   25:*/		return 0x821E7424;
		  /* 821E7424h */ case   26:  		/* addi R10, R10, 23 */
		/* 821E7424h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x17);
		/* 821E7424h case   26:*/		return 0x821E7428;
		  /* 821E7428h */ case   27:  		/* subf R11, R9, R25 */
		/* 821E7428h case   27:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R25);
		/* 821E7428h case   27:*/		return 0x821E742C;
		  /* 821E742Ch */ case   28:  		/* mulli R3, R29, 3 */
		/* 821E742Ch case   28:*/		cpu::op::mulli<0>(regs,&regs.R3,regs.R29,0x3);
		/* 821E742Ch case   28:*/		return 0x821E7430;
		  /* 821E7430h */ case   29:  		/* stw R10, <#[R31 + 68]> */
		/* 821E7430h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000044) );
		/* 821E7430h case   29:*/		return 0x821E7434;
		  /* 821E7434h */ case   30:  		/* subfic R21, R30, 23 */
		/* 821E7434h case   30:*/		cpu::op::subfic<0>(regs,&regs.R21,regs.R30,0x17);
		/* 821E7434h case   30:*/		return 0x821E7438;
		  /* 821E7438h */ case   31:  		/* add R6, R24, R28 */
		/* 821E7438h case   31:*/		cpu::op::add<0>(regs,&regs.R6,regs.R24,regs.R28);
		/* 821E7438h case   31:*/		return 0x821E743C;
		  /* 821E743Ch */ case   32:  		/* add R11, R11, R30 */
		/* 821E743Ch case   32:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821E743Ch case   32:*/		return 0x821E7440;
		  /* 821E7440h */ case   33:  		/* subf R25, R3, R30 */
		/* 821E7440h case   33:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R3,regs.R30);
		/* 821E7440h case   33:*/		return 0x821E7444;
		  /* 821E7444h */ case   34:  		/* subf R10, R27, R21 */
		/* 821E7444h case   34:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R21);
		/* 821E7444h case   34:*/		return 0x821E7448;
		  /* 821E7448h */ case   35:  		/* stw R11, <#[R31 + 76]> */
		/* 821E7448h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 821E7448h case   35:*/		return 0x821E744C;
		  /* 821E744Ch */ case   36:  		/* subf R7, R7, R30 */
		/* 821E744Ch case   36:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R7,regs.R30);
		/* 821E744Ch case   36:*/		return 0x821E7450;
		  /* 821E7450h */ case   37:  		/* addi R6, R6, -20 */
		/* 821E7450h case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0xFFFFFFEC);
		/* 821E7450h case   37:*/		return 0x821E7454;
		  /* 821E7454h */ case   38:  		/* stw R10, <#[R31 + 60]> */
		/* 821E7454h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E7454h case   38:*/		return 0x821E7458;
		  /* 821E7458h */ case   39:  		/* rlwinm R5, R5, 1, 0, 30 */
		/* 821E7458h case   39:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R5);
		/* 821E7458h case   39:*/		return 0x821E745C;
		  /* 821E745Ch */ case   40:  		/* rlwinm R4, R4, 1, 0, 30 */
		/* 821E745Ch case   40:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R4);
		/* 821E745Ch case   40:*/		return 0x821E7460;
		  /* 821E7460h */ case   41:  		/* add R22, R25, R9 */
		/* 821E7460h case   41:*/		cpu::op::add<0>(regs,&regs.R22,regs.R25,regs.R9);
		/* 821E7460h case   41:*/		return 0x821E7464;
		  /* 821E7464h */ case   42:  		/* add R23, R7, R28 */
		/* 821E7464h case   42:*/		cpu::op::add<0>(regs,&regs.R23,regs.R7,regs.R28);
		/* 821E7464h case   42:*/		return 0x821E7468;
		  /* 821E7468h */ case   43:  		/* rlwinm R11, R6, 1, 0, 30 */
		/* 821E7468h case   43:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R6);
		/* 821E7468h case   43:*/		return 0x821E746C;
		  /* 821E746Ch */ case   44:  		/* stw R22, <#[R31 + 80]> */
		/* 821E746Ch case   44:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000050) );
		/* 821E746Ch case   44:*/		return 0x821E7470;
		  /* 821E7470h */ case   45:  		/* subf R10, R3, R4 */
		/* 821E7470h case   45:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R3,regs.R4);
		/* 821E7470h case   45:*/		return 0x821E7474;
		  /* 821E7474h */ case   46:  		/* stw R23, <#[R31 + 72]> */
		/* 821E7474h case   46:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000048) );
		/* 821E7474h case   46:*/		return 0x821E7478;
		  /* 821E7478h */ case   47:  		/* addi R8, R8, 23 */
		/* 821E7478h case   47:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x17);
		/* 821E7478h case   47:*/		return 0x821E747C;
		  /* 821E747Ch */ case   48:  		/* stw R11, <#[R31 + 88]> */
		/* 821E747Ch case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 821E747Ch case   48:*/		return 0x821E7480;
		  /* 821E7480h */ case   49:  		/* subf R9, R29, R5 */
		/* 821E7480h case   49:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R29,regs.R5);
		/* 821E7480h case   49:*/		return 0x821E7484;
		  /* 821E7484h */ case   50:  		/* stw R10, <#[R31 + 92]> */
		/* 821E7484h case   50:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000005C) );
		/* 821E7484h case   50:*/		return 0x821E7488;
		  /* 821E7488h */ case   51:  		/* stw R8, <#[R31 + 64]> */
		/* 821E7488h case   51:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000040) );
		/* 821E7488h case   51:*/		return 0x821E748C;
		  /* 821E748Ch */ case   52:  		/* lis R11, -32255 */
		/* 821E748Ch case   52:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821E748Ch case   52:*/		return 0x821E7490;
		  /* 821E7490h */ case   53:  		/* stw R9, <#[R31 + 84]> */
		/* 821E7490h case   53:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000054) );
		/* 821E7490h case   53:*/		return 0x821E7494;
		  /* 821E7494h */ case   54:  		/* extsw R10, R23 */
		/* 821E7494h case   54:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R23);
		/* 821E7494h case   54:*/		return 0x821E7498;
		  /* 821E7498h */ case   55:  		/* std R10, <#[R1 + 80]> */
		/* 821E7498h case   55:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7498h case   55:*/		return 0x821E749C;
		  /* 821E749Ch */ case   56:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E749Ch case   56:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E749Ch case   56:*/		return 0x821E74A0;
		  /* 821E74A0h */ case   57:  		/* fcfid FR2, FR0 */
		/* 821E74A0h case   57:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E74A0h case   57:*/		return 0x821E74A4;
		  /* 821E74A4h */ case   58:  		/* lfd FR31, <#[R11 - 24504]> */
		/* 821E74A4h case   58:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 821E74A4h case   58:*/		return 0x821E74A8;
		  /* 821E74A8h */ case   59:  		/* fmr FR1, FR31 */
		/* 821E74A8h case   59:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E74A8h case   59:*/		return 0x821E74AC;
		  /* 821E74ACh */ case   60:  		/* bl -1396468 */
		/* 821E74ACh case   60:*/		regs.LR = 0x821E74B0; return 0x820925B8;
		/* 821E74ACh case   60:*/		return 0x821E74B0;
		  /* 821E74B0h */ case   61:  		/* stfd FR1, <#[R31 + 16]> */
		/* 821E74B0h case   61:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000010) );
		/* 821E74B0h case   61:*/		return 0x821E74B4;
		  /* 821E74B4h */ case   62:  		/* add R11, R25, R28 */
		/* 821E74B4h case   62:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R28);
		/* 821E74B4h case   62:*/		return 0x821E74B8;
		  /* 821E74B8h */ case   63:  		/* fmr FR1, FR31 */
		/* 821E74B8h case   63:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E74B8h case   63:*/		return 0x821E74BC;
		  /* 821E74BCh */ case   64:  		/* extsw R11, R11 */
		/* 821E74BCh case   64:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E74BCh case   64:*/		return 0x821E74C0;
		  /* 821E74C0h */ case   65:  		/* std R11, <#[R1 + 80]> */
		/* 821E74C0h case   65:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E74C0h case   65:*/		return 0x821E74C4;
		  /* 821E74C4h */ case   66:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E74C4h case   66:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E74C4h case   66:*/		return 0x821E74C8;
		  /* 821E74C8h */ case   67:  		/* fcfid FR2, FR0 */
		/* 821E74C8h case   67:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E74C8h case   67:*/		return 0x821E74CC;
		  /* 821E74CCh */ case   68:  		/* bl -1396500 */
		/* 821E74CCh case   68:*/		regs.LR = 0x821E74D0; return 0x820925B8;
		/* 821E74CCh case   68:*/		return 0x821E74D0;
		  /* 821E74D0h */ case   69:  		/* stfd FR1, <#[R31 + 24]> */
		/* 821E74D0h case   69:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000018) );
		/* 821E74D0h case   69:*/		return 0x821E74D4;
		  /* 821E74D4h */ case   70:  		/* add R28, R24, R27 */
		/* 821E74D4h case   70:*/		cpu::op::add<0>(regs,&regs.R28,regs.R24,regs.R27);
		/* 821E74D4h case   70:*/		return 0x821E74D8;
		  /* 821E74D8h */ case   71:  		/* fmr FR1, FR31 */
		/* 821E74D8h case   71:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E74D8h case   71:*/		return 0x821E74DC;
		  /* 821E74DCh */ case   72:  		/* extsw R11, R28 */
		/* 821E74DCh case   72:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R28);
		/* 821E74DCh case   72:*/		return 0x821E74E0;
		  /* 821E74E0h */ case   73:  		/* std R11, <#[R1 + 80]> */
		/* 821E74E0h case   73:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E74E0h case   73:*/		return 0x821E74E4;
		  /* 821E74E4h */ case   74:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E74E4h case   74:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E74E4h case   74:*/		return 0x821E74E8;
		  /* 821E74E8h */ case   75:  		/* fcfid FR2, FR0 */
		/* 821E74E8h case   75:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E74E8h case   75:*/		return 0x821E74EC;
		  /* 821E74ECh */ case   76:  		/* bl -1396532 */
		/* 821E74ECh case   76:*/		regs.LR = 0x821E74F0; return 0x820925B8;
		/* 821E74ECh case   76:*/		return 0x821E74F0;
		  /* 821E74F0h */ case   77:  		/* stfd FR1, <#[R31 + 8]> */
		/* 821E74F0h case   77:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000008) );
		/* 821E74F0h case   77:*/		return 0x821E74F4;
		  /* 821E74F4h */ case   78:  		/* extsw R11, R30 */
		/* 821E74F4h case   78:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R30);
		/* 821E74F4h case   78:*/		return 0x821E74F8;
		  /* 821E74F8h */ case   79:  		/* fmr FR1, FR31 */
		/* 821E74F8h case   79:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E74F8h case   79:*/		return 0x821E74FC;
		  /* 821E74FCh */ case   80:  		/* std R11, <#[R1 + 80]> */
		/* 821E74FCh case   80:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E74FCh case   80:*/		return 0x821E7500;
		  /* 821E7500h */ case   81:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E7500h case   81:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7500h case   81:*/		return 0x821E7504;
		  /* 821E7504h */ case   82:  		/* fcfid FR2, FR0 */
		/* 821E7504h case   82:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E7504h case   82:*/		return 0x821E7508;
		  /* 821E7508h */ case   83:  		/* bl -1396560 */
		/* 821E7508h case   83:*/		regs.LR = 0x821E750C; return 0x820925B8;
		/* 821E7508h case   83:*/		return 0x821E750C;
		  /* 821E750Ch */ case   84:  		/* stfd FR1, <#[R31]> */
		/* 821E750Ch case   84:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 821E750Ch case   84:*/		return 0x821E7510;
		  /* 821E7510h */ case   85:  		/* mr R11, R26 */
		/* 821E7510h case   85:*/		regs.R11 = regs.R26;
		/* 821E7510h case   85:*/		return 0x821E7514;
		  /* 821E7514h */ case   86:  		/* stw R26, <#[R31 + 108]> */
		/* 821E7514h case   86:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7514h case   86:*/		return 0x821E7518;
		  /* 821E7518h */ case   87:  		/* cmpwi CR6, R22, 0 */
		/* 821E7518h case   87:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 821E7518h case   87:*/		return 0x821E751C;
		  /* 821E751Ch */ case   88:  		/* bc 4, CR6_GT, 32 */
		/* 821E751Ch case   88:*/		if ( !regs.CR[6].gt ) { return 0x821E753C;  }
		/* 821E751Ch case   88:*/		return 0x821E7520;
		  /* 821E7520h */ case   89:  		/* lwz R10, <#[R31 + 108]> */
		/* 821E7520h case   89:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7520h case   89:*/		return 0x821E7524;
		  /* 821E7524h */ case   90:  		/* li R9, 1 */
		/* 821E7524h case   90:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7524h case   90:*/		return 0x821E7528;
		  /* 821E7528h */ case   91:  		/* addi R11, R11, 1 */
		/* 821E7528h case   91:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7528h case   91:*/		return 0x821E752C;
		  /* 821E752Ch */ case   92:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E752Ch case   92:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E752Ch case   92:*/		return 0x821E7530;
		  /* 821E7530h */ case   93:  		/* cmpw CR6, R11, R22 */
		/* 821E7530h case   93:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R22);
		/* 821E7530h case   93:*/		return 0x821E7534;
		  /* 821E7534h */ case   94:  		/* stw R9, <#[R31 + 108]> */
		/* 821E7534h case   94:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7534h case   94:*/		return 0x821E7538;
		  /* 821E7538h */ case   95:  		/* bc 12, CR6_LT, -24 */
		/* 821E7538h case   95:*/		if ( regs.CR[6].lt ) { return 0x821E7520;  }
		/* 821E7538h case   95:*/		return 0x821E753C;
	}
	return 0x821E753C;
} // Block from 821E73BCh-821E753Ch (96 instructions)

//////////////////////////////////////////////////////
// Block at 821E753Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E753C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E753C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E753C);
		  /* 821E753Ch */ case    0:  		/* mr R11, R26 */
		/* 821E753Ch case    0:*/		regs.R11 = regs.R26;
		/* 821E753Ch case    0:*/		return 0x821E7540;
		  /* 821E7540h */ case    1:  		/* stw R26, <#[R31 + 104]> */
		/* 821E7540h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7540h case    1:*/		return 0x821E7544;
		  /* 821E7544h */ case    2:  		/* cmpwi CR6, R23, 0 */
		/* 821E7544h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 821E7544h case    2:*/		return 0x821E7548;
		  /* 821E7548h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E7548h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E7568;  }
		/* 821E7548h case    3:*/		return 0x821E754C;
		  /* 821E754Ch */ case    4:  		/* lwz R10, <#[R31 + 104]> */
		/* 821E754Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000068) );
		/* 821E754Ch case    4:*/		return 0x821E7550;
		  /* 821E7550h */ case    5:  		/* li R9, 1 */
		/* 821E7550h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7550h case    5:*/		return 0x821E7554;
		  /* 821E7554h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E7554h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7554h case    6:*/		return 0x821E7558;
		  /* 821E7558h */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7558h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7558h case    7:*/		return 0x821E755C;
		  /* 821E755Ch */ case    8:  		/* cmpw CR6, R11, R23 */
		/* 821E755Ch case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R23);
		/* 821E755Ch case    8:*/		return 0x821E7560;
		  /* 821E7560h */ case    9:  		/* stw R9, <#[R31 + 104]> */
		/* 821E7560h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7560h case    9:*/		return 0x821E7564;
		  /* 821E7564h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E7564h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E754C;  }
		/* 821E7564h case   10:*/		return 0x821E7568;
	}
	return 0x821E7568;
} // Block from 821E753Ch-821E7568h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E7568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7568);
		  /* 821E7568h */ case    0:  		/* mr R11, R26 */
		/* 821E7568h case    0:*/		regs.R11 = regs.R26;
		/* 821E7568h case    0:*/		return 0x821E756C;
		  /* 821E756Ch */ case    1:  		/* stw R26, <#[R31 + 100]> */
		/* 821E756Ch case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000064) );
		/* 821E756Ch case    1:*/		return 0x821E7570;
		  /* 821E7570h */ case    2:  		/* cmpwi CR6, R28, 0 */
		/* 821E7570h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 821E7570h case    2:*/		return 0x821E7574;
		  /* 821E7574h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E7574h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E7594;  }
		/* 821E7574h case    3:*/		return 0x821E7578;
		  /* 821E7578h */ case    4:  		/* lwz R10, <#[R31 + 100]> */
		/* 821E7578h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000064) );
		/* 821E7578h case    4:*/		return 0x821E757C;
		  /* 821E757Ch */ case    5:  		/* li R9, 1 */
		/* 821E757Ch case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E757Ch case    5:*/		return 0x821E7580;
		  /* 821E7580h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E7580h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7580h case    6:*/		return 0x821E7584;
		  /* 821E7584h */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7584h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7584h case    7:*/		return 0x821E7588;
		  /* 821E7588h */ case    8:  		/* cmpw CR6, R11, R28 */
		/* 821E7588h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R28);
		/* 821E7588h case    8:*/		return 0x821E758C;
		  /* 821E758Ch */ case    9:  		/* stw R9, <#[R31 + 100]> */
		/* 821E758Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000064) );
		/* 821E758Ch case    9:*/		return 0x821E7590;
		  /* 821E7590h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E7590h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E7578;  }
		/* 821E7590h case   10:*/		return 0x821E7594;
	}
	return 0x821E7594;
} // Block from 821E7568h-821E7594h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E7594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7594);
		  /* 821E7594h */ case    0:  		/* addic. R10, R30, -1 */
		/* 821E7594h case    0:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R30,0xFFFFFFFF);
		/* 821E7594h case    0:*/		return 0x821E7598;
		  /* 821E7598h */ case    1:  		/* stw R26, <#[R31 + 96]> */
		/* 821E7598h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000060) );
		/* 821E7598h case    1:*/		return 0x821E759C;
		  /* 821E759Ch */ case    2:  		/* mr R11, R26 */
		/* 821E759Ch case    2:*/		regs.R11 = regs.R26;
		/* 821E759Ch case    2:*/		return 0x821E75A0;
		  /* 821E75A0h */ case    3:  		/* bc 4, CR0_GT, 32 */
		/* 821E75A0h case    3:*/		if ( !regs.CR[0].gt ) { return 0x821E75C0;  }
		/* 821E75A0h case    3:*/		return 0x821E75A4;
		  /* 821E75A4h */ case    4:  		/* lwz R9, <#[R31 + 96]> */
		/* 821E75A4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000060) );
		/* 821E75A4h case    4:*/		return 0x821E75A8;
		  /* 821E75A8h */ case    5:  		/* li R8, 1 */
		/* 821E75A8h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821E75A8h case    5:*/		return 0x821E75AC;
		  /* 821E75ACh */ case    6:  		/* addi R11, R11, 1 */
		/* 821E75ACh case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E75ACh case    6:*/		return 0x821E75B0;
		  /* 821E75B0h */ case    7:  		/* rlwimi R8, R9, 1, 0, 30 */
		/* 821E75B0h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R8,regs.R9);
		/* 821E75B0h case    7:*/		return 0x821E75B4;
		  /* 821E75B4h */ case    8:  		/* cmpw CR6, R11, R10 */
		/* 821E75B4h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821E75B4h case    8:*/		return 0x821E75B8;
		  /* 821E75B8h */ case    9:  		/* stw R8, <#[R31 + 96]> */
		/* 821E75B8h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000060) );
		/* 821E75B8h case    9:*/		return 0x821E75BC;
		  /* 821E75BCh */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E75BCh case   10:*/		if ( regs.CR[6].lt ) { return 0x821E75A4;  }
		/* 821E75BCh case   10:*/		return 0x821E75C0;
	}
	return 0x821E75C0;
} // Block from 821E7594h-821E75C0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E75C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E75C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E75C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E75C0);
		  /* 821E75C0h */ case    0:  		/* stw R30, <#[R31 + 32]> */
		/* 821E75C0h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 821E75C0h case    0:*/		return 0x821E75C4;
		  /* 821E75C4h */ case    1:  		/* cmpwi CR6, R29, 0 */
		/* 821E75C4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 821E75C4h case    1:*/		return 0x821E75C8;
		  /* 821E75C8h */ case    2:  		/* stw R28, <#[R31 + 36]> */
		/* 821E75C8h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000024) );
		/* 821E75C8h case    2:*/		return 0x821E75CC;
		  /* 821E75CCh */ case    3:  		/* stw R23, <#[R31 + 40]> */
		/* 821E75CCh case    3:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000028) );
		/* 821E75CCh case    3:*/		return 0x821E75D0;
		  /* 821E75D0h */ case    4:  		/* stw R22, <#[R31 + 44]> */
		/* 821E75D0h case    4:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E75D0h case    4:*/		return 0x821E75D4;
		  /* 821E75D4h */ case    5:  		/* stw R26, <#[R31 + 120]> */
		/* 821E75D4h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000078) );
		/* 821E75D4h case    5:*/		return 0x821E75D8;
		  /* 821E75D8h */ case    6:  		/* bc 4, CR6_GT, -1028 */
		/* 821E75D8h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821E71D4;  }
		/* 821E75D8h case    6:*/		return 0x821E75DC;
		  /* 821E75DCh */ case    7:  		/* mtspr CTR, R29 */
		/* 821E75DCh case    7:*/		regs.CTR = regs.R29;
		/* 821E75DCh case    7:*/		return 0x821E75E0;
		  /* 821E75E0h */ case    8:  		/* lwz R11, <#[R31 + 120]> */
		/* 821E75E0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821E75E0h case    8:*/		return 0x821E75E4;
		  /* 821E75E4h */ case    9:  		/* oris R11, R11, 128 */
		/* 821E75E4h case    9:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821E75E4h case    9:*/		return 0x821E75E8;
		  /* 821E75E8h */ case   10:  		/* srawi R11, R11, 1 */
		/* 821E75E8h case   10:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R11);
		/* 821E75E8h case   10:*/		return 0x821E75EC;
		  /* 821E75ECh */ case   11:  		/* stw R11, <#[R31 + 120]> */
		/* 821E75ECh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821E75ECh case   11:*/		return 0x821E75F0;
		  /* 821E75F0h */ case   12:  		/* bc 16, CR0_LT, -16 */
		/* 821E75F0h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821E75E0;  }
		/* 821E75F0h case   12:*/		return 0x821E75F4;
		  /* 821E75F4h */ case   13:  		/* b -1056 */
		/* 821E75F4h case   13:*/		return 0x821E71D4;
		/* 821E75F4h case   13:*/		return 0x821E75F8;
		  /* 821E75F8h */ case   14:  		/* rlwinm R11, R28, 1, 0, 30 */
		/* 821E75F8h case   14:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R28);
		/* 821E75F8h case   14:*/		return 0x821E75FC;
		  /* 821E75FCh */ case   15:  		/* rlwinm R6, R29, 1, 0, 30 */
		/* 821E75FCh case   15:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R6,regs.R29);
		/* 821E75FCh case   15:*/		return 0x821E7600;
		  /* 821E7600h */ case   16:  		/* subf R11, R29, R11 */
		/* 821E7600h case   16:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821E7600h case   16:*/		return 0x821E7604;
		  /* 821E7604h */ case   17:  		/* subf R3, R30, R29 */
		/* 821E7604h case   17:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R30,regs.R29);
		/* 821E7604h case   17:*/		return 0x821E7608;
		  /* 821E7608h */ case   18:  		/* add R4, R30, R9 */
		/* 821E7608h case   18:*/		cpu::op::add<0>(regs,&regs.R4,regs.R30,regs.R9);
		/* 821E7608h case   18:*/		return 0x821E760C;
		  /* 821E760Ch */ case   19:  		/* subf R25, R29, R30 */
		/* 821E760Ch case   19:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R29,regs.R30);
		/* 821E760Ch case   19:*/		return 0x821E7610;
		  /* 821E7610h */ case   20:  		/* subf R8, R6, R30 */
		/* 821E7610h case   20:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R6,regs.R30);
		/* 821E7610h case   20:*/		return 0x821E7614;
		  /* 821E7614h */ case   21:  		/* subf R24, R30, R6 */
		/* 821E7614h case   21:*/		cpu::op::subf<0>(regs,&regs.R24,regs.R30,regs.R6);
		/* 821E7614h case   21:*/		return 0x821E7618;
		  /* 821E7618h */ case   22:  		/* subf R10, R9, R11 */
		/* 821E7618h case   22:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 821E7618h case   22:*/		return 0x821E761C;
		  /* 821E761Ch */ case   23:  		/* subf R6, R28, R3 */
		/* 821E761Ch case   23:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R28,regs.R3);
		/* 821E761Ch case   23:*/		return 0x821E7620;
		  /* 821E7620h */ case   24:  		/* mulli R5, R29, 3 */
		/* 821E7620h case   24:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R29,0x3);
		/* 821E7620h case   24:*/		return 0x821E7624;
		  /* 821E7624h */ case   25:  		/* add R3, R25, R28 */
		/* 821E7624h case   25:*/		cpu::op::add<0>(regs,&regs.R3,regs.R25,regs.R28);
		/* 821E7624h case   25:*/		return 0x821E7628;
		  /* 821E7628h */ case   26:  		/* rlwinm R4, R4, 1, 0, 30 */
		/* 821E7628h case   26:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R4);
		/* 821E7628h case   26:*/		return 0x821E762C;
		  /* 821E762Ch */ case   27:  		/* add R28, R8, R28 */
		/* 821E762Ch case   27:*/		cpu::op::add<0>(regs,&regs.R28,regs.R8,regs.R28);
		/* 821E762Ch case   27:*/		return 0x821E7630;
		  /* 821E7630h */ case   28:  		/* add R7, R30, R27 */
		/* 821E7630h case   28:*/		cpu::op::add<0>(regs,&regs.R7,regs.R30,regs.R27);
		/* 821E7630h case   28:*/		return 0x821E7634;
		  /* 821E7634h */ case   29:  		/* add R8, R10, R30 */
		/* 821E7634h case   29:*/		cpu::op::add<0>(regs,&regs.R8,regs.R10,regs.R30);
		/* 821E7634h case   29:*/		return 0x821E7638;
		  /* 821E7638h */ case   30:  		/* subf R11, R5, R30 */
		/* 821E7638h case   30:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R5,regs.R30);
		/* 821E7638h case   30:*/		return 0x821E763C;
		  /* 821E763Ch */ case   31:  		/* subf R10, R5, R4 */
		/* 821E763Ch case   31:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R5,regs.R4);
		/* 821E763Ch case   31:*/		return 0x821E7640;
		  /* 821E7640h */ case   32:  		/* addi R23, R7, -20 */
		/* 821E7640h case   32:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R7,0xFFFFFFEC);
		/* 821E7640h case   32:*/		return 0x821E7644;
		  /* 821E7644h */ case   33:  		/* add R11, R11, R9 */
		/* 821E7644h case   33:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E7644h case   33:*/		return 0x821E7648;
		  /* 821E7648h */ case   34:  		/* subf R7, R9, R24 */
		/* 821E7648h case   34:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R9,regs.R24);
		/* 821E7648h case   34:*/		return 0x821E764C;
		  /* 821E764Ch */ case   35:  		/* addi R10, R10, -41 */
		/* 821E764Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFD7);
		/* 821E764Ch case   35:*/		return 0x821E7650;
		  /* 821E7650h */ case   36:  		/* addi R8, R8, -1 */
		/* 821E7650h case   36:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821E7650h case   36:*/		return 0x821E7654;
		  /* 821E7654h */ case   37:  		/* rlwinm R5, R23, 1, 0, 30 */
		/* 821E7654h case   37:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R23);
		/* 821E7654h case   37:*/		return 0x821E7658;
		  /* 821E7658h */ case   38:  		/* stw R10, <#[R31 + 92]> */
		/* 821E7658h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000005C) );
		/* 821E7658h case   38:*/		return 0x821E765C;
		  /* 821E765Ch */ case   39:  		/* subfic R22, R30, 24 */
		/* 821E765Ch case   39:*/		cpu::op::subfic<0>(regs,&regs.R22,regs.R30,0x18);
		/* 821E765Ch case   39:*/		return 0x821E7660;
		  /* 821E7660h */ case   40:  		/* stw R8, <#[R31 + 76]> */
		/* 821E7660h case   40:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x0000004C) );
		/* 821E7660h case   40:*/		return 0x821E7664;
		  /* 821E7664h */ case   41:  		/* rlwinm R9, R3, 1, 0, 30 */
		/* 821E7664h case   41:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R3);
		/* 821E7664h case   41:*/		return 0x821E7668;
		  /* 821E7668h */ case   42:  		/* addi R24, R11, -1 */
		/* 821E7668h case   42:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFFFFF);
		/* 821E7668h case   42:*/		return 0x821E766C;
		  /* 821E766Ch */ case   43:  		/* subf R10, R29, R5 */
		/* 821E766Ch case   43:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R29,regs.R5);
		/* 821E766Ch case   43:*/		return 0x821E7670;
		  /* 821E7670h */ case   44:  		/* addi R6, R6, 25 */
		/* 821E7670h case   44:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x19);
		/* 821E7670h case   44:*/		return 0x821E7674;
		  /* 821E7674h */ case   45:  		/* stw R24, <#[R31 + 80]> */
		/* 821E7674h case   45:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000050) );
		/* 821E7674h case   45:*/		return 0x821E7678;
		  /* 821E7678h */ case   46:  		/* addi R7, R7, 25 */
		/* 821E7678h case   46:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x19);
		/* 821E7678h case   46:*/		return 0x821E767C;
		  /* 821E767Ch */ case   47:  		/* stw R10, <#[R31 + 84]> */
		/* 821E767Ch case   47:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000054) );
		/* 821E767Ch case   47:*/		return 0x821E7680;
		  /* 821E7680h */ case   48:  		/* addi R9, R9, -41 */
		/* 821E7680h case   48:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFD7);
		/* 821E7680h case   48:*/		return 0x821E7684;
		  /* 821E7684h */ case   49:  		/* stw R6, <#[R31 + 64]> */
		/* 821E7684h case   49:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000040) );
		/* 821E7684h case   49:*/		return 0x821E7688;
		  /* 821E7688h */ case   50:  		/* subf R8, R27, R22 */
		/* 821E7688h case   50:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R27,regs.R22);
		/* 821E7688h case   50:*/		return 0x821E768C;
		  /* 821E768Ch */ case   51:  		/* stw R7, <#[R31 + 68]> */
		/* 821E768Ch case   51:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000044) );
		/* 821E768Ch case   51:*/		return 0x821E7690;
		  /* 821E7690h */ case   52:  		/* addi R23, R28, -1 */
		/* 821E7690h case   52:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R28,0xFFFFFFFF);
		/* 821E7690h case   52:*/		return 0x821E7694;
		  /* 821E7694h */ case   53:  		/* stw R9, <#[R31 + 88]> */
		/* 821E7694h case   53:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000058) );
		/* 821E7694h case   53:*/		return 0x821E7698;
		  /* 821E7698h */ case   54:  		/* stw R8, <#[R31 + 60]> */
		/* 821E7698h case   54:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E7698h case   54:*/		return 0x821E769C;
		  /* 821E769Ch */ case   55:  		/* addi R11, R11, 5 */
		/* 821E769Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5);
		/* 821E769Ch case   55:*/		return 0x821E76A0;
		  /* 821E76A0h */ case   56:  		/* stw R23, <#[R31 + 72]> */
		/* 821E76A0h case   56:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000048) );
		/* 821E76A0h case   56:*/		return 0x821E76A4;
		  /* 821E76A4h */ case   57:  		/* lis R10, -32255 */
		/* 821E76A4h case   57:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821E76A4h case   57:*/		return 0x821E76A8;
		  /* 821E76A8h */ case   58:  		/* extsw R11, R11 */
		/* 821E76A8h case   58:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E76A8h case   58:*/		return 0x821E76AC;
		  /* 821E76ACh */ case   59:  		/* std R11, <#[R1 + 80]> */
		/* 821E76ACh case   59:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E76ACh case   59:*/		return 0x821E76B0;
		  /* 821E76B0h */ case   60:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E76B0h case   60:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E76B0h case   60:*/		return 0x821E76B4;
		  /* 821E76B4h */ case   61:  		/* fcfid FR2, FR0 */
		/* 821E76B4h case   61:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E76B4h case   61:*/		return 0x821E76B8;
		  /* 821E76B8h */ case   62:  		/* lfd FR31, <#[R10 - 24504]> */
		/* 821E76B8h case   62:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0xFFFFA048) );
		/* 821E76B8h case   62:*/		return 0x821E76BC;
		  /* 821E76BCh */ case   63:  		/* fmr FR1, FR31 */
		/* 821E76BCh case   63:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E76BCh case   63:*/		return 0x821E76C0;
		  /* 821E76C0h */ case   64:  		/* bl -1397000 */
		/* 821E76C0h case   64:*/		regs.LR = 0x821E76C4; return 0x820925B8;
		/* 821E76C0h case   64:*/		return 0x821E76C4;
		  /* 821E76C4h */ case   65:  		/* stfd FR1, <#[R31 + 24]> */
		/* 821E76C4h case   65:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000018) );
		/* 821E76C4h case   65:*/		return 0x821E76C8;
		  /* 821E76C8h */ case   66:  		/* addi R11, R28, 3 */
		/* 821E76C8h case   66:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x3);
		/* 821E76C8h case   66:*/		return 0x821E76CC;
		  /* 821E76CCh */ case   67:  		/* fmr FR1, FR31 */
		/* 821E76CCh case   67:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E76CCh case   67:*/		return 0x821E76D0;
		  /* 821E76D0h */ case   68:  		/* extsw R11, R11 */
		/* 821E76D0h case   68:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E76D0h case   68:*/		return 0x821E76D4;
		  /* 821E76D4h */ case   69:  		/* std R11, <#[R1 + 80]> */
		/* 821E76D4h case   69:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E76D4h case   69:*/		return 0x821E76D8;
		  /* 821E76D8h */ case   70:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E76D8h case   70:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E76D8h case   70:*/		return 0x821E76DC;
		  /* 821E76DCh */ case   71:  		/* fcfid FR2, FR0 */
		/* 821E76DCh case   71:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E76DCh case   71:*/		return 0x821E76E0;
		  /* 821E76E0h */ case   72:  		/* bl -1397032 */
		/* 821E76E0h case   72:*/		regs.LR = 0x821E76E4; return 0x820925B8;
		/* 821E76E0h case   72:*/		return 0x821E76E4;
		  /* 821E76E4h */ case   73:  		/* stfd FR1, <#[R31 + 16]> */
		/* 821E76E4h case   73:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000010) );
		/* 821E76E4h case   73:*/		return 0x821E76E8;
		  /* 821E76E8h */ case   74:  		/* add R28, R25, R27 */
		/* 821E76E8h case   74:*/		cpu::op::add<0>(regs,&regs.R28,regs.R25,regs.R27);
		/* 821E76E8h case   74:*/		return 0x821E76EC;
		  /* 821E76ECh */ case   75:  		/* fmr FR1, FR31 */
		/* 821E76ECh case   75:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E76ECh case   75:*/		return 0x821E76F0;
		  /* 821E76F0h */ case   76:  		/* addi R11, R28, 1 */
		/* 821E76F0h case   76:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x1);
		/* 821E76F0h case   76:*/		return 0x821E76F4;
		  /* 821E76F4h */ case   77:  		/* extsw R11, R11 */
		/* 821E76F4h case   77:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E76F4h case   77:*/		return 0x821E76F8;
		  /* 821E76F8h */ case   78:  		/* std R11, <#[R1 + 80]> */
		/* 821E76F8h case   78:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E76F8h case   78:*/		return 0x821E76FC;
		  /* 821E76FCh */ case   79:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E76FCh case   79:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E76FCh case   79:*/		return 0x821E7700;
		  /* 821E7700h */ case   80:  		/* fcfid FR2, FR0 */
		/* 821E7700h case   80:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E7700h case   80:*/		return 0x821E7704;
		  /* 821E7704h */ case   81:  		/* bl -1397068 */
		/* 821E7704h case   81:*/		regs.LR = 0x821E7708; return 0x820925B8;
		/* 821E7704h case   81:*/		return 0x821E7708;
		  /* 821E7708h */ case   82:  		/* stfd FR1, <#[R31 + 8]> */
		/* 821E7708h case   82:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000008) );
		/* 821E7708h case   82:*/		return 0x821E770C;
		  /* 821E770Ch */ case   83:  		/* addi R27, R30, -1 */
		/* 821E770Ch case   83:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R30,0xFFFFFFFF);
		/* 821E770Ch case   83:*/		return 0x821E7710;
	}
	return 0x821E7710;
} // Block from 821E75C0h-821E7710h (84 instructions)

//////////////////////////////////////////////////////
// Block at 821E7710h
// Function '?Optimize@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7710);
		  /* 821E7710h */ case    0:  		/* fmr FR1, FR31 */
		/* 821E7710h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E7710h case    0:*/		return 0x821E7714;
		  /* 821E7714h */ case    1:  		/* extsw R11, R27 */
		/* 821E7714h case    1:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R27);
		/* 821E7714h case    1:*/		return 0x821E7718;
		  /* 821E7718h */ case    2:  		/* std R11, <#[R1 + 80]> */
		/* 821E7718h case    2:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7718h case    2:*/		return 0x821E771C;
		  /* 821E771Ch */ case    3:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E771Ch case    3:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E771Ch case    3:*/		return 0x821E7720;
		  /* 821E7720h */ case    4:  		/* fcfid FR2, FR0 */
		/* 821E7720h case    4:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E7720h case    4:*/		return 0x821E7724;
		  /* 821E7724h */ case    5:  		/* bl -1397100 */
		/* 821E7724h case    5:*/		regs.LR = 0x821E7728; return 0x820925B8;
		/* 821E7724h case    5:*/		return 0x821E7728;
		  /* 821E7728h */ case    6:  		/* stfd FR1, <#[R31]> */
		/* 821E7728h case    6:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 821E7728h case    6:*/		return 0x821E772C;
		  /* 821E772Ch */ case    7:  		/* mr R11, R26 */
		/* 821E772Ch case    7:*/		regs.R11 = regs.R26;
		/* 821E772Ch case    7:*/		return 0x821E7730;
		  /* 821E7730h */ case    8:  		/* stw R26, <#[R31 + 108]> */
		/* 821E7730h case    8:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7730h case    8:*/		return 0x821E7734;
		  /* 821E7734h */ case    9:  		/* cmpwi CR6, R24, 0 */
		/* 821E7734h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 821E7734h case    9:*/		return 0x821E7738;
		  /* 821E7738h */ case   10:  		/* bc 4, CR6_GT, 32 */
		/* 821E7738h case   10:*/		if ( !regs.CR[6].gt ) { return 0x821E7758;  }
		/* 821E7738h case   10:*/		return 0x821E773C;
		  /* 821E773Ch */ case   11:  		/* lwz R10, <#[R31 + 108]> */
		/* 821E773Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E773Ch case   11:*/		return 0x821E7740;
		  /* 821E7740h */ case   12:  		/* li R9, 1 */
		/* 821E7740h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7740h case   12:*/		return 0x821E7744;
		  /* 821E7744h */ case   13:  		/* addi R11, R11, 1 */
		/* 821E7744h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7744h case   13:*/		return 0x821E7748;
		  /* 821E7748h */ case   14:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7748h case   14:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7748h case   14:*/		return 0x821E774C;
		  /* 821E774Ch */ case   15:  		/* cmpw CR6, R11, R24 */
		/* 821E774Ch case   15:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R24);
		/* 821E774Ch case   15:*/		return 0x821E7750;
		  /* 821E7750h */ case   16:  		/* stw R9, <#[R31 + 108]> */
		/* 821E7750h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7750h case   16:*/		return 0x821E7754;
		  /* 821E7754h */ case   17:  		/* bc 12, CR6_LT, -24 */
		/* 821E7754h case   17:*/		if ( regs.CR[6].lt ) { return 0x821E773C;  }
		/* 821E7754h case   17:*/		return 0x821E7758;
	}
	return 0x821E7758;
} // Block from 821E7710h-821E7758h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821E7758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7758);
		  /* 821E7758h */ case    0:  		/* mr R11, R26 */
		/* 821E7758h case    0:*/		regs.R11 = regs.R26;
		/* 821E7758h case    0:*/		return 0x821E775C;
		  /* 821E775Ch */ case    1:  		/* stw R26, <#[R31 + 104]> */
		/* 821E775Ch case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000068) );
		/* 821E775Ch case    1:*/		return 0x821E7760;
		  /* 821E7760h */ case    2:  		/* cmpwi CR6, R23, 0 */
		/* 821E7760h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 821E7760h case    2:*/		return 0x821E7764;
		  /* 821E7764h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E7764h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E7784;  }
		/* 821E7764h case    3:*/		return 0x821E7768;
		  /* 821E7768h */ case    4:  		/* lwz R10, <#[R31 + 104]> */
		/* 821E7768h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7768h case    4:*/		return 0x821E776C;
		  /* 821E776Ch */ case    5:  		/* li R9, 1 */
		/* 821E776Ch case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E776Ch case    5:*/		return 0x821E7770;
		  /* 821E7770h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E7770h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7770h case    6:*/		return 0x821E7774;
		  /* 821E7774h */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7774h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7774h case    7:*/		return 0x821E7778;
		  /* 821E7778h */ case    8:  		/* cmpw CR6, R11, R23 */
		/* 821E7778h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R23);
		/* 821E7778h case    8:*/		return 0x821E777C;
		  /* 821E777Ch */ case    9:  		/* stw R9, <#[R31 + 104]> */
		/* 821E777Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000068) );
		/* 821E777Ch case    9:*/		return 0x821E7780;
		  /* 821E7780h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E7780h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E7768;  }
		/* 821E7780h case   10:*/		return 0x821E7784;
	}
	return 0x821E7784;
} // Block from 821E7758h-821E7784h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E7784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7784);
		  /* 821E7784h */ case    0:  		/* mr R11, R26 */
		/* 821E7784h case    0:*/		regs.R11 = regs.R26;
		/* 821E7784h case    0:*/		return 0x821E7788;
		  /* 821E7788h */ case    1:  		/* stw R26, <#[R31 + 100]> */
		/* 821E7788h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000064) );
		/* 821E7788h case    1:*/		return 0x821E778C;
		  /* 821E778Ch */ case    2:  		/* cmpwi CR6, R28, 0 */
		/* 821E778Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 821E778Ch case    2:*/		return 0x821E7790;
		  /* 821E7790h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E7790h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E77B0;  }
		/* 821E7790h case    3:*/		return 0x821E7794;
		  /* 821E7794h */ case    4:  		/* lwz R10, <#[R31 + 100]> */
		/* 821E7794h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000064) );
		/* 821E7794h case    4:*/		return 0x821E7798;
		  /* 821E7798h */ case    5:  		/* li R9, 1 */
		/* 821E7798h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7798h case    5:*/		return 0x821E779C;
		  /* 821E779Ch */ case    6:  		/* addi R11, R11, 1 */
		/* 821E779Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E779Ch case    6:*/		return 0x821E77A0;
		  /* 821E77A0h */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E77A0h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E77A0h case    7:*/		return 0x821E77A4;
		  /* 821E77A4h */ case    8:  		/* cmpw CR6, R11, R28 */
		/* 821E77A4h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R28);
		/* 821E77A4h case    8:*/		return 0x821E77A8;
		  /* 821E77A8h */ case    9:  		/* stw R9, <#[R31 + 100]> */
		/* 821E77A8h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000064) );
		/* 821E77A8h case    9:*/		return 0x821E77AC;
		  /* 821E77ACh */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E77ACh case   10:*/		if ( regs.CR[6].lt ) { return 0x821E7794;  }
		/* 821E77ACh case   10:*/		return 0x821E77B0;
	}
	return 0x821E77B0;
} // Block from 821E7784h-821E77B0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E77B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E77B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E77B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E77B0);
		  /* 821E77B0h */ case    0:  		/* mr R11, R26 */
		/* 821E77B0h case    0:*/		regs.R11 = regs.R26;
		/* 821E77B0h case    0:*/		return 0x821E77B4;
		  /* 821E77B4h */ case    1:  		/* stw R26, <#[R31 + 96]> */
		/* 821E77B4h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000060) );
		/* 821E77B4h case    1:*/		return 0x821E77B8;
		  /* 821E77B8h */ case    2:  		/* cmpwi CR6, R27, 0 */
		/* 821E77B8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 821E77B8h case    2:*/		return 0x821E77BC;
		  /* 821E77BCh */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E77BCh case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E77DC;  }
		/* 821E77BCh case    3:*/		return 0x821E77C0;
		  /* 821E77C0h */ case    4:  		/* lwz R10, <#[R31 + 96]> */
		/* 821E77C0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000060) );
		/* 821E77C0h case    4:*/		return 0x821E77C4;
		  /* 821E77C4h */ case    5:  		/* li R9, 1 */
		/* 821E77C4h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E77C4h case    5:*/		return 0x821E77C8;
		  /* 821E77C8h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E77C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E77C8h case    6:*/		return 0x821E77CC;
		  /* 821E77CCh */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E77CCh case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E77CCh case    7:*/		return 0x821E77D0;
		  /* 821E77D0h */ case    8:  		/* cmpw CR6, R11, R27 */
		/* 821E77D0h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R27);
		/* 821E77D0h case    8:*/		return 0x821E77D4;
		  /* 821E77D4h */ case    9:  		/* stw R9, <#[R31 + 96]> */
		/* 821E77D4h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000060) );
		/* 821E77D4h case    9:*/		return 0x821E77D8;
		  /* 821E77D8h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E77D8h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E77C0;  }
		/* 821E77D8h case   10:*/		return 0x821E77DC;
	}
	return 0x821E77DC;
} // Block from 821E77B0h-821E77DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E77DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E77DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E77DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E77DC);
		  /* 821E77DCh */ case    0:  		/* stw R30, <#[R31 + 32]> */
		/* 821E77DCh case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 821E77DCh case    0:*/		return 0x821E77E0;
		  /* 821E77E0h */ case    1:  		/* cmpwi CR6, R29, 0 */
		/* 821E77E0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 821E77E0h case    1:*/		return 0x821E77E4;
		  /* 821E77E4h */ case    2:  		/* stw R28, <#[R31 + 36]> */
		/* 821E77E4h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000024) );
		/* 821E77E4h case    2:*/		return 0x821E77E8;
		  /* 821E77E8h */ case    3:  		/* stw R23, <#[R31 + 40]> */
		/* 821E77E8h case    3:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000028) );
		/* 821E77E8h case    3:*/		return 0x821E77EC;
		  /* 821E77ECh */ case    4:  		/* stw R24, <#[R31 + 44]> */
		/* 821E77ECh case    4:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E77ECh case    4:*/		return 0x821E77F0;
		  /* 821E77F0h */ case    5:  		/* stw R26, <#[R31 + 120]> */
		/* 821E77F0h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000078) );
		/* 821E77F0h case    5:*/		return 0x821E77F4;
		  /* 821E77F4h */ case    6:  		/* bc 4, CR6_GT, 1120 */
		/* 821E77F4h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821E7C54;  }
		/* 821E77F4h case    6:*/		return 0x821E77F8;
		  /* 821E77F8h */ case    7:  		/* mtspr CTR, R29 */
		/* 821E77F8h case    7:*/		regs.CTR = regs.R29;
		/* 821E77F8h case    7:*/		return 0x821E77FC;
		  /* 821E77FCh */ case    8:  		/* lwz R11, <#[R31 + 120]> */
		/* 821E77FCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821E77FCh case    8:*/		return 0x821E7800;
		  /* 821E7800h */ case    9:  		/* oris R11, R11, 256 */
		/* 821E7800h case    9:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821E7800h case    9:*/		return 0x821E7804;
		  /* 821E7804h */ case   10:  		/* srawi R11, R11, 1 */
		/* 821E7804h case   10:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R11);
		/* 821E7804h case   10:*/		return 0x821E7808;
		  /* 821E7808h */ case   11:  		/* stw R11, <#[R31 + 120]> */
		/* 821E7808h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821E7808h case   11:*/		return 0x821E780C;
		  /* 821E780Ch */ case   12:  		/* bc 16, CR0_LT, -16 */
		/* 821E780Ch case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821E77FC;  }
		/* 821E780Ch case   12:*/		return 0x821E7810;
		  /* 821E7810h */ case   13:  		/* b 1092 */
		/* 821E7810h case   13:*/		return 0x821E7C54;
		/* 821E7810h case   13:*/		return 0x821E7814;
		  /* 821E7814h */ case   14:  		/* rlwinm R11, R28, 1, 0, 30 */
		/* 821E7814h case   14:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R28);
		/* 821E7814h case   14:*/		return 0x821E7818;
		  /* 821E7818h */ case   15:  		/* rlwinm R10, R29, 1, 0, 30 */
		/* 821E7818h case   15:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R29);
		/* 821E7818h case   15:*/		return 0x821E781C;
		  /* 821E781Ch */ case   16:  		/* subf R11, R29, R11 */
		/* 821E781Ch case   16:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821E781Ch case   16:*/		return 0x821E7820;
		  /* 821E7820h */ case   17:  		/* subf R5, R30, R10 */
		/* 821E7820h case   17:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R30,regs.R10);
		/* 821E7820h case   17:*/		return 0x821E7824;
		  /* 821E7824h */ case   18:  		/* subf R10, R10, R30 */
		/* 821E7824h case   18:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 821E7824h case   18:*/		return 0x821E7828;
		  /* 821E7828h */ case   19:  		/* add R6, R30, R27 */
		/* 821E7828h case   19:*/		cpu::op::add<0>(regs,&regs.R6,regs.R30,regs.R27);
		/* 821E7828h case   19:*/		return 0x821E782C;
		  /* 821E782Ch */ case   20:  		/* subf R8, R9, R11 */
		/* 821E782Ch case   20:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R9,regs.R11);
		/* 821E782Ch case   20:*/		return 0x821E7830;
		  /* 821E7830h */ case   21:  		/* mulli R3, R29, 3 */
		/* 821E7830h case   21:*/		cpu::op::mulli<0>(regs,&regs.R3,regs.R29,0x3);
		/* 821E7830h case   21:*/		return 0x821E7834;
		  /* 821E7834h */ case   22:  		/* subf R25, R29, R30 */
		/* 821E7834h case   22:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R29,regs.R30);
		/* 821E7834h case   22:*/		return 0x821E7838;
		  /* 821E7838h */ case   23:  		/* subf R4, R30, R29 */
		/* 821E7838h case   23:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R30,regs.R29);
		/* 821E7838h case   23:*/		return 0x821E783C;
		  /* 821E783Ch */ case   24:  		/* add R7, R30, R9 */
		/* 821E783Ch case   24:*/		cpu::op::add<0>(regs,&regs.R7,regs.R30,regs.R9);
		/* 821E783Ch case   24:*/		return 0x821E7840;
		  /* 821E7840h */ case   25:  		/* add R10, R10, R28 */
		/* 821E7840h case   25:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 821E7840h case   25:*/		return 0x821E7844;
		  /* 821E7844h */ case   26:  		/* rlwinm R23, R6, 1, 0, 30 */
		/* 821E7844h case   26:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R23,regs.R6);
		/* 821E7844h case   26:*/		return 0x821E7848;
		  /* 821E7848h */ case   27:  		/* add R6, R8, R30 */
		/* 821E7848h case   27:*/		cpu::op::add<0>(regs,&regs.R6,regs.R8,regs.R30);
		/* 821E7848h case   27:*/		return 0x821E784C;
		  /* 821E784Ch */ case   28:  		/* add R24, R25, R28 */
		/* 821E784Ch case   28:*/		cpu::op::add<0>(regs,&regs.R24,regs.R25,regs.R28);
		/* 821E784Ch case   28:*/		return 0x821E7850;
		  /* 821E7850h */ case   29:  		/* subf R4, R28, R4 */
		/* 821E7850h case   29:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R28,regs.R4);
		/* 821E7850h case   29:*/		return 0x821E7854;
		  /* 821E7854h */ case   30:  		/* subf R11, R3, R30 */
		/* 821E7854h case   30:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R3,regs.R30);
		/* 821E7854h case   30:*/		return 0x821E7858;
		  /* 821E7858h */ case   31:  		/* addi R28, R10, -1 */
		/* 821E7858h case   31:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFFFFF);
		/* 821E7858h case   31:*/		return 0x821E785C;
		  /* 821E785Ch */ case   32:  		/* rlwinm R22, R7, 1, 0, 30 */
		/* 821E785Ch case   32:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R22,regs.R7);
		/* 821E785Ch case   32:*/		return 0x821E7860;
		  /* 821E7860h */ case   33:  		/* addi R10, R6, 1 */
		/* 821E7860h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R6,0x1);
		/* 821E7860h case   33:*/		return 0x821E7864;
		  /* 821E7864h */ case   34:  		/* stw R28, <#[R31 + 72]> */
		/* 821E7864h case   34:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000048) );
		/* 821E7864h case   34:*/		return 0x821E7868;
		  /* 821E7868h */ case   35:  		/* add R11, R11, R9 */
		/* 821E7868h case   35:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E7868h case   35:*/		return 0x821E786C;
		  /* 821E786Ch */ case   36:  		/* subf R5, R9, R5 */
		/* 821E786Ch case   36:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R9,regs.R5);
		/* 821E786Ch case   36:*/		return 0x821E7870;
		  /* 821E7870h */ case   37:  		/* stw R10, <#[R31 + 76]> */
		/* 821E7870h case   37:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 821E7870h case   37:*/		return 0x821E7874;
		  /* 821E7874h */ case   38:  		/* rlwinm R8, R24, 1, 0, 30 */
		/* 821E7874h case   38:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R24);
		/* 821E7874h case   38:*/		return 0x821E7878;
		  /* 821E7878h */ case   39:  		/* subfic R21, R30, 25 */
		/* 821E7878h case   39:*/		cpu::op::subfic<0>(regs,&regs.R21,regs.R30,0x19);
		/* 821E7878h case   39:*/		return 0x821E787C;
		  /* 821E787Ch */ case   40:  		/* subf R9, R3, R22 */
		/* 821E787Ch case   40:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R3,regs.R22);
		/* 821E787Ch case   40:*/		return 0x821E7880;
		  /* 821E7880h */ case   41:  		/* subf R7, R29, R23 */
		/* 821E7880h case   41:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R29,regs.R23);
		/* 821E7880h case   41:*/		return 0x821E7884;
		  /* 821E7884h */ case   42:  		/* addi R10, R8, -41 */
		/* 821E7884h case   42:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0xFFFFFFD7);
		/* 821E7884h case   42:*/		return 0x821E7888;
		  /* 821E7888h */ case   43:  		/* addi R24, R11, -3 */
		/* 821E7888h case   43:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFFFFD);
		/* 821E7888h case   43:*/		return 0x821E788C;
		  /* 821E788Ch */ case   44:  		/* addi R4, R4, 25 */
		/* 821E788Ch case   44:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x19);
		/* 821E788Ch case   44:*/		return 0x821E7890;
		  /* 821E7890h */ case   45:  		/* stw R10, <#[R31 + 88]> */
		/* 821E7890h case   45:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000058) );
		/* 821E7890h case   45:*/		return 0x821E7894;
		  /* 821E7894h */ case   46:  		/* addi R5, R5, 27 */
		/* 821E7894h case   46:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1B);
		/* 821E7894h case   46:*/		return 0x821E7898;
		  /* 821E7898h */ case   47:  		/* stw R24, <#[R31 + 80]> */
		/* 821E7898h case   47:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000050) );
		/* 821E7898h case   47:*/		return 0x821E789C;
		  /* 821E789Ch */ case   48:  		/* addi R7, R7, -41 */
		/* 821E789Ch case   48:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xFFFFFFD7);
		/* 821E789Ch case   48:*/		return 0x821E78A0;
		  /* 821E78A0h */ case   49:  		/* stw R4, <#[R31 + 64]> */
		/* 821E78A0h case   49:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x00000040) );
		/* 821E78A0h case   49:*/		return 0x821E78A4;
		  /* 821E78A4h */ case   50:  		/* addi R9, R9, -43 */
		/* 821E78A4h case   50:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFD5);
		/* 821E78A4h case   50:*/		return 0x821E78A8;
		  /* 821E78A8h */ case   51:  		/* stw R5, <#[R31 + 68]> */
		/* 821E78A8h case   51:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x00000044) );
		/* 821E78A8h case   51:*/		return 0x821E78AC;
		  /* 821E78ACh */ case   52:  		/* subf R8, R27, R21 */
		/* 821E78ACh case   52:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R27,regs.R21);
		/* 821E78ACh case   52:*/		return 0x821E78B0;
		  /* 821E78B0h */ case   53:  		/* stw R7, <#[R31 + 84]> */
		/* 821E78B0h case   53:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000054) );
		/* 821E78B0h case   53:*/		return 0x821E78B4;
		  /* 821E78B4h */ case   54:  		/* stw R9, <#[R31 + 92]> */
		/* 821E78B4h case   54:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000005C) );
		/* 821E78B4h case   54:*/		return 0x821E78B8;
		  /* 821E78B8h */ case   55:  		/* addi R11, R11, -1 */
		/* 821E78B8h case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E78B8h case   55:*/		return 0x821E78BC;
		  /* 821E78BCh */ case   56:  		/* stw R8, <#[R31 + 60]> */
		/* 821E78BCh case   56:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E78BCh case   56:*/		return 0x821E78C0;
		  /* 821E78C0h */ case   57:  		/* lis R10, -32255 */
		/* 821E78C0h case   57:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821E78C0h case   57:*/		return 0x821E78C4;
		  /* 821E78C4h */ case   58:  		/* extsw R11, R11 */
		/* 821E78C4h case   58:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E78C4h case   58:*/		return 0x821E78C8;
		  /* 821E78C8h */ case   59:  		/* std R11, <#[R1 + 80]> */
		/* 821E78C8h case   59:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E78C8h case   59:*/		return 0x821E78CC;
		  /* 821E78CCh */ case   60:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E78CCh case   60:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E78CCh case   60:*/		return 0x821E78D0;
		  /* 821E78D0h */ case   61:  		/* fcfid FR2, FR0 */
		/* 821E78D0h case   61:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E78D0h case   61:*/		return 0x821E78D4;
		  /* 821E78D4h */ case   62:  		/* lfd FR31, <#[R10 - 24504]> */
		/* 821E78D4h case   62:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0xFFFFA048) );
		/* 821E78D4h case   62:*/		return 0x821E78D8;
		  /* 821E78D8h */ case   63:  		/* fmr FR1, FR31 */
		/* 821E78D8h case   63:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E78D8h case   63:*/		return 0x821E78DC;
		  /* 821E78DCh */ case   64:  		/* bl -1397540 */
		/* 821E78DCh case   64:*/		regs.LR = 0x821E78E0; return 0x820925B8;
		/* 821E78DCh case   64:*/		return 0x821E78E0;
		  /* 821E78E0h */ case   65:  		/* stfd FR1, <#[R31 + 24]> */
		/* 821E78E0h case   65:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000018) );
		/* 821E78E0h case   65:*/		return 0x821E78E4;
		  /* 821E78E4h */ case   66:  		/* extsw R11, R28 */
		/* 821E78E4h case   66:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R28);
		/* 821E78E4h case   66:*/		return 0x821E78E8;
		  /* 821E78E8h */ case   67:  		/* fmr FR1, FR31 */
		/* 821E78E8h case   67:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E78E8h case   67:*/		return 0x821E78EC;
		  /* 821E78ECh */ case   68:  		/* std R11, <#[R1 + 80]> */
		/* 821E78ECh case   68:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E78ECh case   68:*/		return 0x821E78F0;
		  /* 821E78F0h */ case   69:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E78F0h case   69:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E78F0h case   69:*/		return 0x821E78F4;
		  /* 821E78F4h */ case   70:  		/* fcfid FR2, FR0 */
		/* 821E78F4h case   70:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E78F4h case   70:*/		return 0x821E78F8;
		  /* 821E78F8h */ case   71:  		/* bl -1397568 */
		/* 821E78F8h case   71:*/		regs.LR = 0x821E78FC; return 0x820925B8;
		/* 821E78F8h case   71:*/		return 0x821E78FC;
		  /* 821E78FCh */ case   72:  		/* stfd FR1, <#[R31 + 16]> */
		/* 821E78FCh case   72:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000010) );
		/* 821E78FCh case   72:*/		return 0x821E7900;
		  /* 821E7900h */ case   73:  		/* add R11, R25, R27 */
		/* 821E7900h case   73:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R27);
		/* 821E7900h case   73:*/		return 0x821E7904;
		  /* 821E7904h */ case   74:  		/* fmr FR1, FR31 */
		/* 821E7904h case   74:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E7904h case   74:*/		return 0x821E7908;
		  /* 821E7908h */ case   75:  		/* addi R27, R11, -1 */
		/* 821E7908h case   75:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFFFFF);
		/* 821E7908h case   75:*/		return 0x821E790C;
		  /* 821E790Ch */ case   76:  		/* extsw R11, R27 */
		/* 821E790Ch case   76:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R27);
		/* 821E790Ch case   76:*/		return 0x821E7910;
		  /* 821E7910h */ case   77:  		/* std R11, <#[R1 + 80]> */
		/* 821E7910h case   77:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7910h case   77:*/		return 0x821E7914;
		  /* 821E7914h */ case   78:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E7914h case   78:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7914h case   78:*/		return 0x821E7918;
		  /* 821E7918h */ case   79:  		/* fcfid FR2, FR0 */
		/* 821E7918h case   79:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E7918h case   79:*/		return 0x821E791C;
		  /* 821E791Ch */ case   80:  		/* bl -1397604 */
		/* 821E791Ch case   80:*/		regs.LR = 0x821E7920; return 0x820925B8;
		/* 821E791Ch case   80:*/		return 0x821E7920;
		  /* 821E7920h */ case   81:  		/* stfd FR1, <#[R31 + 8]> */
		/* 821E7920h case   81:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000008) );
		/* 821E7920h case   81:*/		return 0x821E7924;
		  /* 821E7924h */ case   82:  		/* addi R11, R30, -1 */
		/* 821E7924h case   82:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 821E7924h case   82:*/		return 0x821E7928;
		  /* 821E7928h */ case   83:  		/* fmr FR1, FR31 */
		/* 821E7928h case   83:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E7928h case   83:*/		return 0x821E792C;
		  /* 821E792Ch */ case   84:  		/* extsw R11, R11 */
		/* 821E792Ch case   84:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E792Ch case   84:*/		return 0x821E7930;
		  /* 821E7930h */ case   85:  		/* std R11, <#[R1 + 80]> */
		/* 821E7930h case   85:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7930h case   85:*/		return 0x821E7934;
		  /* 821E7934h */ case   86:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E7934h case   86:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7934h case   86:*/		return 0x821E7938;
		  /* 821E7938h */ case   87:  		/* fcfid FR2, FR0 */
		/* 821E7938h case   87:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E7938h case   87:*/		return 0x821E793C;
		  /* 821E793Ch */ case   88:  		/* bl -1397636 */
		/* 821E793Ch case   88:*/		regs.LR = 0x821E7940; return 0x820925B8;
		/* 821E793Ch case   88:*/		return 0x821E7940;
		  /* 821E7940h */ case   89:  		/* stfd FR1, <#[R31]> */
		/* 821E7940h case   89:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 821E7940h case   89:*/		return 0x821E7944;
		  /* 821E7944h */ case   90:  		/* mr R11, R26 */
		/* 821E7944h case   90:*/		regs.R11 = regs.R26;
		/* 821E7944h case   90:*/		return 0x821E7948;
		  /* 821E7948h */ case   91:  		/* stw R26, <#[R31 + 108]> */
		/* 821E7948h case   91:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7948h case   91:*/		return 0x821E794C;
		  /* 821E794Ch */ case   92:  		/* cmpwi CR6, R24, 0 */
		/* 821E794Ch case   92:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 821E794Ch case   92:*/		return 0x821E7950;
		  /* 821E7950h */ case   93:  		/* bc 4, CR6_GT, 32 */
		/* 821E7950h case   93:*/		if ( !regs.CR[6].gt ) { return 0x821E7970;  }
		/* 821E7950h case   93:*/		return 0x821E7954;
		  /* 821E7954h */ case   94:  		/* lwz R10, <#[R31 + 108]> */
		/* 821E7954h case   94:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7954h case   94:*/		return 0x821E7958;
		  /* 821E7958h */ case   95:  		/* li R9, 1 */
		/* 821E7958h case   95:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7958h case   95:*/		return 0x821E795C;
		  /* 821E795Ch */ case   96:  		/* addi R11, R11, 1 */
		/* 821E795Ch case   96:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E795Ch case   96:*/		return 0x821E7960;
		  /* 821E7960h */ case   97:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7960h case   97:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7960h case   97:*/		return 0x821E7964;
		  /* 821E7964h */ case   98:  		/* cmpw CR6, R11, R24 */
		/* 821E7964h case   98:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R24);
		/* 821E7964h case   98:*/		return 0x821E7968;
		  /* 821E7968h */ case   99:  		/* stw R9, <#[R31 + 108]> */
		/* 821E7968h case   99:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7968h case   99:*/		return 0x821E796C;
		  /* 821E796Ch */ case  100:  		/* bc 12, CR6_LT, -24 */
		/* 821E796Ch case  100:*/		if ( regs.CR[6].lt ) { return 0x821E7954;  }
		/* 821E796Ch case  100:*/		return 0x821E7970;
	}
	return 0x821E7970;
} // Block from 821E77DCh-821E7970h (101 instructions)

//////////////////////////////////////////////////////
// Block at 821E7970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7970);
		  /* 821E7970h */ case    0:  		/* mr R11, R26 */
		/* 821E7970h case    0:*/		regs.R11 = regs.R26;
		/* 821E7970h case    0:*/		return 0x821E7974;
		  /* 821E7974h */ case    1:  		/* stw R26, <#[R31 + 104]> */
		/* 821E7974h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7974h case    1:*/		return 0x821E7978;
		  /* 821E7978h */ case    2:  		/* cmpwi CR6, R28, 0 */
		/* 821E7978h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 821E7978h case    2:*/		return 0x821E797C;
		  /* 821E797Ch */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E797Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E799C;  }
		/* 821E797Ch case    3:*/		return 0x821E7980;
		  /* 821E7980h */ case    4:  		/* lwz R10, <#[R31 + 104]> */
		/* 821E7980h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7980h case    4:*/		return 0x821E7984;
		  /* 821E7984h */ case    5:  		/* li R9, 1 */
		/* 821E7984h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7984h case    5:*/		return 0x821E7988;
	}
	return 0x821E7988;
} // Block from 821E7970h-821E7988h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E7988h
// Function '?XenosNaN@D3DXShader@@YAMXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7988);
		  /* 821E7988h */ case    0:  		/* addi R11, R11, 1 */
		/* 821E7988h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7988h case    0:*/		return 0x821E798C;
		  /* 821E798Ch */ case    1:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E798Ch case    1:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E798Ch case    1:*/		return 0x821E7990;
		  /* 821E7990h */ case    2:  		/* cmpw CR6, R11, R28 */
		/* 821E7990h case    2:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R28);
		/* 821E7990h case    2:*/		return 0x821E7994;
		  /* 821E7994h */ case    3:  		/* stw R9, <#[R31 + 104]> */
		/* 821E7994h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7994h case    3:*/		return 0x821E7998;
	}
	return 0x821E7998;
} // Block from 821E7988h-821E7998h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E7998h
// Function '?GetParams6X@D3DXShader@@YAXPAUMeParam2@1@HHHHHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7998);
		  /* 821E7998h */ case    0:  		/* bc 12, CR6_LT, -24 */
		/* 821E7998h case    0:*/		if ( regs.CR[6].lt ) { return 0x821E7980;  }
		/* 821E7998h case    0:*/		return 0x821E799C;
	}
	return 0x821E799C;
} // Block from 821E7998h-821E799Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E799Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E799C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E799C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E799C);
		  /* 821E799Ch */ case    0:  		/* mr R11, R26 */
		/* 821E799Ch case    0:*/		regs.R11 = regs.R26;
		/* 821E799Ch case    0:*/		return 0x821E79A0;
		  /* 821E79A0h */ case    1:  		/* stw R26, <#[R31 + 100]> */
		/* 821E79A0h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000064) );
		/* 821E79A0h case    1:*/		return 0x821E79A4;
		  /* 821E79A4h */ case    2:  		/* cmpwi CR6, R27, 0 */
		/* 821E79A4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 821E79A4h case    2:*/		return 0x821E79A8;
		  /* 821E79A8h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E79A8h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E79C8;  }
		/* 821E79A8h case    3:*/		return 0x821E79AC;
		  /* 821E79ACh */ case    4:  		/* lwz R10, <#[R31 + 100]> */
		/* 821E79ACh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000064) );
		/* 821E79ACh case    4:*/		return 0x821E79B0;
		  /* 821E79B0h */ case    5:  		/* li R9, 1 */
		/* 821E79B0h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E79B0h case    5:*/		return 0x821E79B4;
		  /* 821E79B4h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E79B4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E79B4h case    6:*/		return 0x821E79B8;
		  /* 821E79B8h */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E79B8h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E79B8h case    7:*/		return 0x821E79BC;
		  /* 821E79BCh */ case    8:  		/* cmpw CR6, R11, R27 */
		/* 821E79BCh case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R27);
		/* 821E79BCh case    8:*/		return 0x821E79C0;
		  /* 821E79C0h */ case    9:  		/* stw R9, <#[R31 + 100]> */
		/* 821E79C0h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000064) );
		/* 821E79C0h case    9:*/		return 0x821E79C4;
		  /* 821E79C4h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E79C4h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E79AC;  }
		/* 821E79C4h case   10:*/		return 0x821E79C8;
	}
	return 0x821E79C8;
} // Block from 821E799Ch-821E79C8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E79C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E79C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E79C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E79C8);
		  /* 821E79C8h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 821E79C8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 821E79C8h case    0:*/		return 0x821E79CC;
		  /* 821E79CCh */ case    1:  		/* stw R26, <#[R31 + 96]> */
		/* 821E79CCh case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000060) );
		/* 821E79CCh case    1:*/		return 0x821E79D0;
		  /* 821E79D0h */ case    2:  		/* bc 4, CR6_GT, 28 */
		/* 821E79D0h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821E79EC;  }
		/* 821E79D0h case    2:*/		return 0x821E79D4;
		  /* 821E79D4h */ case    3:  		/* mtspr CTR, R30 */
		/* 821E79D4h case    3:*/		regs.CTR = regs.R30;
		/* 821E79D4h case    3:*/		return 0x821E79D8;
		  /* 821E79D8h */ case    4:  		/* lwz R11, <#[R31 + 96]> */
		/* 821E79D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 821E79D8h case    4:*/		return 0x821E79DC;
		  /* 821E79DCh */ case    5:  		/* li R10, 1 */
		/* 821E79DCh case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821E79DCh case    5:*/		return 0x821E79E0;
		  /* 821E79E0h */ case    6:  		/* rlwimi R10, R11, 1, 0, 30 */
		/* 821E79E0h case    6:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R10,regs.R11);
		/* 821E79E0h case    6:*/		return 0x821E79E4;
		  /* 821E79E4h */ case    7:  		/* stw R10, <#[R31 + 96]> */
		/* 821E79E4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000060) );
		/* 821E79E4h case    7:*/		return 0x821E79E8;
		  /* 821E79E8h */ case    8:  		/* bc 16, CR0_LT, -16 */
		/* 821E79E8h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821E79D8;  }
		/* 821E79E8h case    8:*/		return 0x821E79EC;
	}
	return 0x821E79EC;
} // Block from 821E79C8h-821E79ECh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E79ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E79EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E79EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E79EC);
		  /* 821E79ECh */ case    0:  		/* addic. R11, R29, 1 */
		/* 821E79ECh case    0:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R29,0x1);
		/* 821E79ECh case    0:*/		return 0x821E79F0;
		  /* 821E79F0h */ case    1:  		/* stw R30, <#[R31 + 32]> */
		/* 821E79F0h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 821E79F0h case    1:*/		return 0x821E79F4;
		  /* 821E79F4h */ case    2:  		/* stw R27, <#[R31 + 36]> */
		/* 821E79F4h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000024) );
		/* 821E79F4h case    2:*/		return 0x821E79F8;
		  /* 821E79F8h */ case    3:  		/* mr R10, R26 */
		/* 821E79F8h case    3:*/		regs.R10 = regs.R26;
		/* 821E79F8h case    3:*/		return 0x821E79FC;
		  /* 821E79FCh */ case    4:  		/* stw R28, <#[R31 + 40]> */
		/* 821E79FCh case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000028) );
		/* 821E79FCh case    4:*/		return 0x821E7A00;
		  /* 821E7A00h */ case    5:  		/* stw R24, <#[R31 + 44]> */
		/* 821E7A00h case    5:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E7A00h case    5:*/		return 0x821E7A04;
		  /* 821E7A04h */ case    6:  		/* stw R26, <#[R31 + 120]> */
		/* 821E7A04h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000078) );
		/* 821E7A04h case    6:*/		return 0x821E7A08;
		  /* 821E7A08h */ case    7:  		/* bc 4, CR0_GT, 588 */
		/* 821E7A08h case    7:*/		if ( !regs.CR[0].gt ) { return 0x821E7C54;  }
		/* 821E7A08h case    7:*/		return 0x821E7A0C;
		  /* 821E7A0Ch */ case    8:  		/* lwz R9, <#[R31 + 120]> */
		/* 821E7A0Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000078) );
		/* 821E7A0Ch case    8:*/		return 0x821E7A10;
		  /* 821E7A10h */ case    9:  		/* addi R10, R10, 1 */
		/* 821E7A10h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E7A10h case    9:*/		return 0x821E7A14;
		  /* 821E7A14h */ case   10:  		/* oris R9, R9, 512 */
		/* 821E7A14h case   10:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x200);
		/* 821E7A14h case   10:*/		return 0x821E7A18;
		  /* 821E7A18h */ case   11:  		/* cmpw CR6, R10, R11 */
		/* 821E7A18h case   11:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 821E7A18h case   11:*/		return 0x821E7A1C;
		  /* 821E7A1Ch */ case   12:  		/* srawi R9, R9, 1 */
		/* 821E7A1Ch case   12:*/		cpu::op::srawi<0,1>(regs,&regs.R9,regs.R9);
		/* 821E7A1Ch case   12:*/		return 0x821E7A20;
		  /* 821E7A20h */ case   13:  		/* stw R9, <#[R31 + 120]> */
		/* 821E7A20h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000078) );
		/* 821E7A20h case   13:*/		return 0x821E7A24;
		  /* 821E7A24h */ case   14:  		/* bc 12, CR6_LT, -24 */
		/* 821E7A24h case   14:*/		if ( regs.CR[6].lt ) { return 0x821E7A0C;  }
		/* 821E7A24h case   14:*/		return 0x821E7A28;
		  /* 821E7A28h */ case   15:  		/* b 556 */
		/* 821E7A28h case   15:*/		return 0x821E7C54;
		/* 821E7A28h case   15:*/		return 0x821E7A2C;
	}
	return 0x821E7A2C;
} // Block from 821E79ECh-821E7A2Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E7A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7A2C);
		  /* 821E7A2Ch */ case    0:  		/* addi R11, R29, 11 */
		/* 821E7A2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xB);
		/* 821E7A2Ch case    0:*/		return 0x821E7A30;
		  /* 821E7A30h */ case    1:  		/* add R8, R30, R9 */
		/* 821E7A30h case    1:*/		cpu::op::add<0>(regs,&regs.R8,regs.R30,regs.R9);
		/* 821E7A30h case    1:*/		return 0x821E7A34;
		  /* 821E7A34h */ case    2:  		/* rlwinm R10, R29, 1, 0, 30 */
		/* 821E7A34h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R29);
		/* 821E7A34h case    2:*/		return 0x821E7A38;
		  /* 821E7A38h */ case    3:  		/* rlwinm R25, R11, 1, 0, 30 */
		/* 821E7A38h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R25,regs.R11);
		/* 821E7A38h case    3:*/		return 0x821E7A3C;
		  /* 821E7A3Ch */ case    4:  		/* add R7, R30, R27 */
		/* 821E7A3Ch case    4:*/		cpu::op::add<0>(regs,&regs.R7,regs.R30,regs.R27);
		/* 821E7A3Ch case    4:*/		return 0x821E7A40;
		  /* 821E7A40h */ case    5:  		/* subf R11, R10, R30 */
		/* 821E7A40h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R30);
		/* 821E7A40h case    5:*/		return 0x821E7A44;
		  /* 821E7A44h */ case    6:  		/* addi R3, R8, -19 */
		/* 821E7A44h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R8,0xFFFFFFED);
		/* 821E7A44h case    6:*/		return 0x821E7A48;
		  /* 821E7A48h */ case    7:  		/* rlwinm R6, R28, 1, 0, 30 */
		/* 821E7A48h case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R6,regs.R28);
		/* 821E7A48h case    7:*/		return 0x821E7A4C;
		  /* 821E7A4Ch */ case    8:  		/* subf R8, R30, R29 */
		/* 821E7A4Ch case    8:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R30,regs.R29);
		/* 821E7A4Ch case    8:*/		return 0x821E7A50;
		  /* 821E7A50h */ case    9:  		/* addi R4, R7, -20 */
		/* 821E7A50h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R7,0xFFFFFFEC);
		/* 821E7A50h case    9:*/		return 0x821E7A54;
		  /* 821E7A54h */ case   10:  		/* subf R24, R29, R30 */
		/* 821E7A54h case   10:*/		cpu::op::subf<0>(regs,&regs.R24,regs.R29,regs.R30);
		/* 821E7A54h case   10:*/		return 0x821E7A58;
		  /* 821E7A58h */ case   11:  		/* add R11, R11, R28 */
		/* 821E7A58h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821E7A58h case   11:*/		return 0x821E7A5C;
		  /* 821E7A5Ch */ case   12:  		/* subf R7, R29, R6 */
		/* 821E7A5Ch case   12:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R29,regs.R6);
		/* 821E7A5Ch case   12:*/		return 0x821E7A60;
		  /* 821E7A60h */ case   13:  		/* subf R6, R28, R8 */
		/* 821E7A60h case   13:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R28,regs.R8);
		/* 821E7A60h case   13:*/		return 0x821E7A64;
		  /* 821E7A64h */ case   14:  		/* mulli R5, R29, 3 */
		/* 821E7A64h case   14:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R29,0x3);
		/* 821E7A64h case   14:*/		return 0x821E7A68;
		  /* 821E7A68h */ case   15:  		/* add R23, R24, R28 */
		/* 821E7A68h case   15:*/		cpu::op::add<0>(regs,&regs.R23,regs.R24,regs.R28);
		/* 821E7A68h case   15:*/		return 0x821E7A6C;
		  /* 821E7A6Ch */ case   16:  		/* addi R22, R11, 1 */
		/* 821E7A6Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x1);
		/* 821E7A6Ch case   16:*/		return 0x821E7A70;
		  /* 821E7A70h */ case   17:  		/* addi R11, R6, 23 */
		/* 821E7A70h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0x17);
		/* 821E7A70h case   17:*/		return 0x821E7A74;
		  /* 821E7A74h */ case   18:  		/* rlwinm R8, R23, 1, 0, 30 */
		/* 821E7A74h case   18:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R23);
		/* 821E7A74h case   18:*/		return 0x821E7A78;
		  /* 821E7A78h */ case   19:  		/* stw R22, <#[R31 + 72]> */
		/* 821E7A78h case   19:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000048) );
		/* 821E7A78h case   19:*/		return 0x821E7A7C;
		  /* 821E7A7Ch */ case   20:  		/* subf R10, R5, R30 */
		/* 821E7A7Ch case   20:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R5,regs.R30);
		/* 821E7A7Ch case   20:*/		return 0x821E7A80;
		  /* 821E7A80h */ case   21:  		/* stw R11, <#[R31 + 64]> */
		/* 821E7A80h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000040) );
		/* 821E7A80h case   21:*/		return 0x821E7A84;
		  /* 821E7A84h */ case   22:  		/* addi R11, R8, -39 */
		/* 821E7A84h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFD9);
		/* 821E7A84h case   22:*/		return 0x821E7A88;
		  /* 821E7A88h */ case   23:  		/* add R10, R10, R9 */
		/* 821E7A88h case   23:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821E7A88h case   23:*/		return 0x821E7A8C;
		  /* 821E7A8Ch */ case   24:  		/* subfic R21, R30, 24 */
		/* 821E7A8Ch case   24:*/		cpu::op::subfic<0>(regs,&regs.R21,regs.R30,0x18);
		/* 821E7A8Ch case   24:*/		return 0x821E7A90;
		  /* 821E7A90h */ case   25:  		/* stw R11, <#[R31 + 88]> */
		/* 821E7A90h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 821E7A90h case   25:*/		return 0x821E7A94;
		  /* 821E7A94h */ case   26:  		/* subf R7, R9, R7 */
		/* 821E7A94h case   26:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R9,regs.R7);
		/* 821E7A94h case   26:*/		return 0x821E7A98;
		  /* 821E7A98h */ case   27:  		/* subf R25, R30, R25 */
		/* 821E7A98h case   27:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R30,regs.R25);
		/* 821E7A98h case   27:*/		return 0x821E7A9C;
		  /* 821E7A9Ch */ case   28:  		/* rlwinm R4, R4, 1, 0, 30 */
		/* 821E7A9Ch case   28:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R4);
		/* 821E7A9Ch case   28:*/		return 0x821E7AA0;
		  /* 821E7AA0h */ case   29:  		/* rlwinm R3, R3, 1, 0, 30 */
		/* 821E7AA0h case   29:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R3,regs.R3);
		/* 821E7AA0h case   29:*/		return 0x821E7AA4;
		  /* 821E7AA4h */ case   30:  		/* addi R23, R10, 2 */
		/* 821E7AA4h case   30:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x2);
		/* 821E7AA4h case   30:*/		return 0x821E7AA8;
		  /* 821E7AA8h */ case   31:  		/* subf R6, R9, R25 */
		/* 821E7AA8h case   31:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R9,regs.R25);
		/* 821E7AA8h case   31:*/		return 0x821E7AAC;
		  /* 821E7AACh */ case   32:  		/* subf R11, R5, R3 */
		/* 821E7AACh case   32:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R5,regs.R3);
		/* 821E7AACh case   32:*/		return 0x821E7AB0;
		  /* 821E7AB0h */ case   33:  		/* stw R23, <#[R31 + 80]> */
		/* 821E7AB0h case   33:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000050) );
		/* 821E7AB0h case   33:*/		return 0x821E7AB4;
		  /* 821E7AB4h */ case   34:  		/* add R7, R7, R30 */
		/* 821E7AB4h case   34:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R30);
		/* 821E7AB4h case   34:*/		return 0x821E7AB8;
		  /* 821E7AB8h */ case   35:  		/* stw R6, <#[R31 + 68]> */
		/* 821E7AB8h case   35:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000044) );
		/* 821E7AB8h case   35:*/		return 0x821E7ABC;
		  /* 821E7ABCh */ case   36:  		/* subf R10, R27, R21 */
		/* 821E7ABCh case   36:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R21);
		/* 821E7ABCh case   36:*/		return 0x821E7AC0;
		  /* 821E7AC0h */ case   37:  		/* stw R11, <#[R31 + 92]> */
		/* 821E7AC0h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 821E7AC0h case   37:*/		return 0x821E7AC4;
		  /* 821E7AC4h */ case   38:  		/* subf R8, R29, R4 */
		/* 821E7AC4h case   38:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R29,regs.R4);
		/* 821E7AC4h case   38:*/		return 0x821E7AC8;
		  /* 821E7AC8h */ case   39:  		/* stw R7, <#[R31 + 76]> */
		/* 821E7AC8h case   39:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x0000004C) );
		/* 821E7AC8h case   39:*/		return 0x821E7ACC;
		  /* 821E7ACCh */ case   40:  		/* stw R10, <#[R31 + 60]> */
		/* 821E7ACCh case   40:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000003C) );
		/* 821E7ACCh case   40:*/		return 0x821E7AD0;
		  /* 821E7AD0h */ case   41:  		/* subfic R25, R29, 2 */
		/* 821E7AD0h case   41:*/		cpu::op::subfic<0>(regs,&regs.R25,regs.R29,0x2);
		/* 821E7AD0h case   41:*/		return 0x821E7AD4;
		  /* 821E7AD4h */ case   42:  		/* stw R8, <#[R31 + 84]> */
		/* 821E7AD4h case   42:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000054) );
		/* 821E7AD4h case   42:*/		return 0x821E7AD8;
		  /* 821E7AD8h */ case   43:  		/* lis R10, -32255 */
		/* 821E7AD8h case   43:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821E7AD8h case   43:*/		return 0x821E7ADC;
		  /* 821E7ADCh */ case   44:  		/* mulli R11, R25, 3 */
		/* 821E7ADCh case   44:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R25,0x3);
		/* 821E7ADCh case   44:*/		return 0x821E7AE0;
		  /* 821E7AE0h */ case   45:  		/* lfd FR31, <#[R10 - 24504]> */
		/* 821E7AE0h case   45:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0xFFFFA048) );
		/* 821E7AE0h case   45:*/		return 0x821E7AE4;
		  /* 821E7AE4h */ case   46:  		/* fmr FR1, FR31 */
		/* 821E7AE4h case   46:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E7AE4h case   46:*/		return 0x821E7AE8;
		  /* 821E7AE8h */ case   47:  		/* add R11, R11, R30 */
		/* 821E7AE8h case   47:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821E7AE8h case   47:*/		return 0x821E7AEC;
		  /* 821E7AECh */ case   48:  		/* add R11, R11, R9 */
		/* 821E7AECh case   48:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E7AECh case   48:*/		return 0x821E7AF0;
		  /* 821E7AF0h */ case   49:  		/* extsw R11, R11 */
		/* 821E7AF0h case   49:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E7AF0h case   49:*/		return 0x821E7AF4;
		  /* 821E7AF4h */ case   50:  		/* std R11, <#[R1 + 80]> */
		/* 821E7AF4h case   50:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7AF4h case   50:*/		return 0x821E7AF8;
		  /* 821E7AF8h */ case   51:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E7AF8h case   51:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7AF8h case   51:*/		return 0x821E7AFC;
		  /* 821E7AFCh */ case   52:  		/* fcfid FR2, FR0 */
		/* 821E7AFCh case   52:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E7AFCh case   52:*/		return 0x821E7B00;
		  /* 821E7B00h */ case   53:  		/* bl -1398088 */
		/* 821E7B00h case   53:*/		regs.LR = 0x821E7B04; return 0x820925B8;
		/* 821E7B00h case   53:*/		return 0x821E7B04;
		  /* 821E7B04h */ case   54:  		/* stfd FR1, <#[R31 + 24]> */
		/* 821E7B04h case   54:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000018) );
		/* 821E7B04h case   54:*/		return 0x821E7B08;
		  /* 821E7B08h */ case   55:  		/* rlwinm R11, R25, 1, 0, 30 */
		/* 821E7B08h case   55:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R25);
		/* 821E7B08h case   55:*/		return 0x821E7B0C;
		  /* 821E7B0Ch */ case   56:  		/* fmr FR1, FR31 */
		/* 821E7B0Ch case   56:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E7B0Ch case   56:*/		return 0x821E7B10;
		  /* 821E7B10h */ case   57:  		/* add R11, R11, R30 */
		/* 821E7B10h case   57:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821E7B10h case   57:*/		return 0x821E7B14;
		  /* 821E7B14h */ case   58:  		/* add R11, R11, R28 */
		/* 821E7B14h case   58:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821E7B14h case   58:*/		return 0x821E7B18;
		  /* 821E7B18h */ case   59:  		/* extsw R11, R11 */
		/* 821E7B18h case   59:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E7B18h case   59:*/		return 0x821E7B1C;
		  /* 821E7B1Ch */ case   60:  		/* std R11, <#[R1 + 80]> */
		/* 821E7B1Ch case   60:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7B1Ch case   60:*/		return 0x821E7B20;
		  /* 821E7B20h */ case   61:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E7B20h case   61:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7B20h case   61:*/		return 0x821E7B24;
		  /* 821E7B24h */ case   62:  		/* fcfid FR2, FR0 */
		/* 821E7B24h case   62:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E7B24h case   62:*/		return 0x821E7B28;
		  /* 821E7B28h */ case   63:  		/* bl -1398128 */
		/* 821E7B28h case   63:*/		regs.LR = 0x821E7B2C; return 0x820925B8;
		/* 821E7B28h case   63:*/		return 0x821E7B2C;
		  /* 821E7B2Ch */ case   64:  		/* stfd FR1, <#[R31 + 16]> */
		/* 821E7B2Ch case   64:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000010) );
		/* 821E7B2Ch case   64:*/		return 0x821E7B30;
		  /* 821E7B30h */ case   65:  		/* add R28, R24, R27 */
		/* 821E7B30h case   65:*/		cpu::op::add<0>(regs,&regs.R28,regs.R24,regs.R27);
		/* 821E7B30h case   65:*/		return 0x821E7B34;
		  /* 821E7B34h */ case   66:  		/* fmr FR1, FR31 */
		/* 821E7B34h case   66:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E7B34h case   66:*/		return 0x821E7B38;
		  /* 821E7B38h */ case   67:  		/* addi R11, R28, 2 */
		/* 821E7B38h case   67:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x2);
		/* 821E7B38h case   67:*/		return 0x821E7B3C;
		  /* 821E7B3Ch */ case   68:  		/* extsw R11, R11 */
		/* 821E7B3Ch case   68:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E7B3Ch case   68:*/		return 0x821E7B40;
		  /* 821E7B40h */ case   69:  		/* std R11, <#[R1 + 80]> */
		/* 821E7B40h case   69:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7B40h case   69:*/		return 0x821E7B44;
		  /* 821E7B44h */ case   70:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E7B44h case   70:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7B44h case   70:*/		return 0x821E7B48;
		  /* 821E7B48h */ case   71:  		/* fcfid FR2, FR0 */
		/* 821E7B48h case   71:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E7B48h case   71:*/		return 0x821E7B4C;
		  /* 821E7B4Ch */ case   72:  		/* bl -1398164 */
		/* 821E7B4Ch case   72:*/		regs.LR = 0x821E7B50; return 0x820925B8;
		/* 821E7B4Ch case   72:*/		return 0x821E7B50;
		  /* 821E7B50h */ case   73:  		/* stfd FR1, <#[R31 + 8]> */
		/* 821E7B50h case   73:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000008) );
		/* 821E7B50h case   73:*/		return 0x821E7B54;
		  /* 821E7B54h */ case   74:  		/* extsw R11, R30 */
		/* 821E7B54h case   74:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R30);
		/* 821E7B54h case   74:*/		return 0x821E7B58;
		  /* 821E7B58h */ case   75:  		/* fmr FR1, FR31 */
		/* 821E7B58h case   75:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821E7B58h case   75:*/		return 0x821E7B5C;
		  /* 821E7B5Ch */ case   76:  		/* std R11, <#[R1 + 80]> */
		/* 821E7B5Ch case   76:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7B5Ch case   76:*/		return 0x821E7B60;
		  /* 821E7B60h */ case   77:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821E7B60h case   77:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821E7B60h case   77:*/		return 0x821E7B64;
		  /* 821E7B64h */ case   78:  		/* fcfid FR2, FR0 */
		/* 821E7B64h case   78:*/		cpu::op::fcfid<0>(regs,&regs.FR2,regs.FR0);
		/* 821E7B64h case   78:*/		return 0x821E7B68;
		  /* 821E7B68h */ case   79:  		/* bl -1398192 */
		/* 821E7B68h case   79:*/		regs.LR = 0x821E7B6C; return 0x820925B8;
		/* 821E7B68h case   79:*/		return 0x821E7B6C;
		  /* 821E7B6Ch */ case   80:  		/* stfd FR1, <#[R31]> */
		/* 821E7B6Ch case   80:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 821E7B6Ch case   80:*/		return 0x821E7B70;
		  /* 821E7B70h */ case   81:  		/* mr R11, R26 */
		/* 821E7B70h case   81:*/		regs.R11 = regs.R26;
		/* 821E7B70h case   81:*/		return 0x821E7B74;
		  /* 821E7B74h */ case   82:  		/* stw R26, <#[R31 + 108]> */
		/* 821E7B74h case   82:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7B74h case   82:*/		return 0x821E7B78;
		  /* 821E7B78h */ case   83:  		/* cmpwi CR6, R23, 0 */
		/* 821E7B78h case   83:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 821E7B78h case   83:*/		return 0x821E7B7C;
		  /* 821E7B7Ch */ case   84:  		/* bc 4, CR6_GT, 32 */
		/* 821E7B7Ch case   84:*/		if ( !regs.CR[6].gt ) { return 0x821E7B9C;  }
		/* 821E7B7Ch case   84:*/		return 0x821E7B80;
		  /* 821E7B80h */ case   85:  		/* lwz R10, <#[R31 + 108]> */
		/* 821E7B80h case   85:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7B80h case   85:*/		return 0x821E7B84;
		  /* 821E7B84h */ case   86:  		/* li R9, 1 */
		/* 821E7B84h case   86:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7B84h case   86:*/		return 0x821E7B88;
		  /* 821E7B88h */ case   87:  		/* addi R11, R11, 1 */
		/* 821E7B88h case   87:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7B88h case   87:*/		return 0x821E7B8C;
		  /* 821E7B8Ch */ case   88:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7B8Ch case   88:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7B8Ch case   88:*/		return 0x821E7B90;
		  /* 821E7B90h */ case   89:  		/* cmpw CR6, R11, R23 */
		/* 821E7B90h case   89:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R23);
		/* 821E7B90h case   89:*/		return 0x821E7B94;
		  /* 821E7B94h */ case   90:  		/* stw R9, <#[R31 + 108]> */
		/* 821E7B94h case   90:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000006C) );
		/* 821E7B94h case   90:*/		return 0x821E7B98;
		  /* 821E7B98h */ case   91:  		/* bc 12, CR6_LT, -24 */
		/* 821E7B98h case   91:*/		if ( regs.CR[6].lt ) { return 0x821E7B80;  }
		/* 821E7B98h case   91:*/		return 0x821E7B9C;
	}
	return 0x821E7B9C;
} // Block from 821E7A2Ch-821E7B9Ch (92 instructions)

//////////////////////////////////////////////////////
// Block at 821E7B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7B9C);
		  /* 821E7B9Ch */ case    0:  		/* mr R11, R26 */
		/* 821E7B9Ch case    0:*/		regs.R11 = regs.R26;
		/* 821E7B9Ch case    0:*/		return 0x821E7BA0;
		  /* 821E7BA0h */ case    1:  		/* stw R26, <#[R31 + 104]> */
		/* 821E7BA0h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7BA0h case    1:*/		return 0x821E7BA4;
		  /* 821E7BA4h */ case    2:  		/* cmpwi CR6, R22, 0 */
		/* 821E7BA4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 821E7BA4h case    2:*/		return 0x821E7BA8;
		  /* 821E7BA8h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E7BA8h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E7BC8;  }
		/* 821E7BA8h case    3:*/		return 0x821E7BAC;
		  /* 821E7BACh */ case    4:  		/* lwz R10, <#[R31 + 104]> */
		/* 821E7BACh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7BACh case    4:*/		return 0x821E7BB0;
		  /* 821E7BB0h */ case    5:  		/* li R9, 1 */
		/* 821E7BB0h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7BB0h case    5:*/		return 0x821E7BB4;
		  /* 821E7BB4h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E7BB4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7BB4h case    6:*/		return 0x821E7BB8;
		  /* 821E7BB8h */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7BB8h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7BB8h case    7:*/		return 0x821E7BBC;
		  /* 821E7BBCh */ case    8:  		/* cmpw CR6, R11, R22 */
		/* 821E7BBCh case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R22);
		/* 821E7BBCh case    8:*/		return 0x821E7BC0;
		  /* 821E7BC0h */ case    9:  		/* stw R9, <#[R31 + 104]> */
		/* 821E7BC0h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000068) );
		/* 821E7BC0h case    9:*/		return 0x821E7BC4;
		  /* 821E7BC4h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E7BC4h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E7BAC;  }
		/* 821E7BC4h case   10:*/		return 0x821E7BC8;
	}
	return 0x821E7BC8;
} // Block from 821E7B9Ch-821E7BC8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E7BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7BC8);
		  /* 821E7BC8h */ case    0:  		/* mr R11, R26 */
		/* 821E7BC8h case    0:*/		regs.R11 = regs.R26;
		/* 821E7BC8h case    0:*/		return 0x821E7BCC;
		  /* 821E7BCCh */ case    1:  		/* stw R26, <#[R31 + 100]> */
		/* 821E7BCCh case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000064) );
		/* 821E7BCCh case    1:*/		return 0x821E7BD0;
		  /* 821E7BD0h */ case    2:  		/* cmpwi CR6, R28, 0 */
		/* 821E7BD0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 821E7BD0h case    2:*/		return 0x821E7BD4;
		  /* 821E7BD4h */ case    3:  		/* bc 4, CR6_GT, 32 */
		/* 821E7BD4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E7BF4;  }
		/* 821E7BD4h case    3:*/		return 0x821E7BD8;
		  /* 821E7BD8h */ case    4:  		/* lwz R10, <#[R31 + 100]> */
		/* 821E7BD8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000064) );
		/* 821E7BD8h case    4:*/		return 0x821E7BDC;
		  /* 821E7BDCh */ case    5:  		/* li R9, 1 */
		/* 821E7BDCh case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E7BDCh case    5:*/		return 0x821E7BE0;
		  /* 821E7BE0h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E7BE0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7BE0h case    6:*/		return 0x821E7BE4;
		  /* 821E7BE4h */ case    7:  		/* rlwimi R9, R10, 1, 0, 30 */
		/* 821E7BE4h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821E7BE4h case    7:*/		return 0x821E7BE8;
		  /* 821E7BE8h */ case    8:  		/* cmpw CR6, R11, R28 */
		/* 821E7BE8h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R28);
		/* 821E7BE8h case    8:*/		return 0x821E7BEC;
		  /* 821E7BECh */ case    9:  		/* stw R9, <#[R31 + 100]> */
		/* 821E7BECh case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000064) );
		/* 821E7BECh case    9:*/		return 0x821E7BF0;
		  /* 821E7BF0h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E7BF0h case   10:*/		if ( regs.CR[6].lt ) { return 0x821E7BD8;  }
		/* 821E7BF0h case   10:*/		return 0x821E7BF4;
	}
	return 0x821E7BF4;
} // Block from 821E7BC8h-821E7BF4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E7BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7BF4);
		  /* 821E7BF4h */ case    0:  		/* addic. R10, R30, -1 */
		/* 821E7BF4h case    0:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R30,0xFFFFFFFF);
		/* 821E7BF4h case    0:*/		return 0x821E7BF8;
		  /* 821E7BF8h */ case    1:  		/* stw R26, <#[R31 + 96]> */
		/* 821E7BF8h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000060) );
		/* 821E7BF8h case    1:*/		return 0x821E7BFC;
		  /* 821E7BFCh */ case    2:  		/* mr R11, R26 */
		/* 821E7BFCh case    2:*/		regs.R11 = regs.R26;
		/* 821E7BFCh case    2:*/		return 0x821E7C00;
		  /* 821E7C00h */ case    3:  		/* bc 4, CR0_GT, 32 */
		/* 821E7C00h case    3:*/		if ( !regs.CR[0].gt ) { return 0x821E7C20;  }
		/* 821E7C00h case    3:*/		return 0x821E7C04;
		  /* 821E7C04h */ case    4:  		/* lwz R9, <#[R31 + 96]> */
		/* 821E7C04h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000060) );
		/* 821E7C04h case    4:*/		return 0x821E7C08;
		  /* 821E7C08h */ case    5:  		/* li R8, 1 */
		/* 821E7C08h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821E7C08h case    5:*/		return 0x821E7C0C;
		  /* 821E7C0Ch */ case    6:  		/* addi R11, R11, 1 */
		/* 821E7C0Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E7C0Ch case    6:*/		return 0x821E7C10;
		  /* 821E7C10h */ case    7:  		/* rlwimi R8, R9, 1, 0, 30 */
		/* 821E7C10h case    7:*/		cpu::op::rlwimi<0,1,0,30>(regs,&regs.R8,regs.R9);
		/* 821E7C10h case    7:*/		return 0x821E7C14;
		  /* 821E7C14h */ case    8:  		/* cmpw CR6, R11, R10 */
		/* 821E7C14h case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821E7C14h case    8:*/		return 0x821E7C18;
		  /* 821E7C18h */ case    9:  		/* stw R8, <#[R31 + 96]> */
		/* 821E7C18h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000060) );
		/* 821E7C18h case    9:*/		return 0x821E7C1C;
		  /* 821E7C1Ch */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 821E7C1Ch case   10:*/		if ( regs.CR[6].lt ) { return 0x821E7C04;  }
		/* 821E7C1Ch case   10:*/		return 0x821E7C20;
	}
	return 0x821E7C20;
} // Block from 821E7BF4h-821E7C20h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E7C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7C20);
		  /* 821E7C20h */ case    0:  		/* stw R30, <#[R31 + 32]> */
		/* 821E7C20h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 821E7C20h case    0:*/		return 0x821E7C24;
		  /* 821E7C24h */ case    1:  		/* cmpwi CR6, R29, 0 */
		/* 821E7C24h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 821E7C24h case    1:*/		return 0x821E7C28;
		  /* 821E7C28h */ case    2:  		/* stw R28, <#[R31 + 36]> */
		/* 821E7C28h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000024) );
		/* 821E7C28h case    2:*/		return 0x821E7C2C;
		  /* 821E7C2Ch */ case    3:  		/* stw R22, <#[R31 + 40]> */
		/* 821E7C2Ch case    3:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000028) );
		/* 821E7C2Ch case    3:*/		return 0x821E7C30;
		  /* 821E7C30h */ case    4:  		/* stw R23, <#[R31 + 44]> */
		/* 821E7C30h case    4:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E7C30h case    4:*/		return 0x821E7C34;
		  /* 821E7C34h */ case    5:  		/* stw R26, <#[R31 + 120]> */
		/* 821E7C34h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000078) );
		/* 821E7C34h case    5:*/		return 0x821E7C38;
		  /* 821E7C38h */ case    6:  		/* bc 4, CR6_GT, 28 */
		/* 821E7C38h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821E7C54;  }
		/* 821E7C38h case    6:*/		return 0x821E7C3C;
		  /* 821E7C3Ch */ case    7:  		/* mtspr CTR, R29 */
		/* 821E7C3Ch case    7:*/		regs.CTR = regs.R29;
		/* 821E7C3Ch case    7:*/		return 0x821E7C40;
		  /* 821E7C40h */ case    8:  		/* lwz R11, <#[R31 + 120]> */
		/* 821E7C40h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821E7C40h case    8:*/		return 0x821E7C44;
		  /* 821E7C44h */ case    9:  		/* oris R11, R11, 256 */
		/* 821E7C44h case    9:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821E7C44h case    9:*/		return 0x821E7C48;
		  /* 821E7C48h */ case   10:  		/* srawi R11, R11, 1 */
		/* 821E7C48h case   10:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R11);
		/* 821E7C48h case   10:*/		return 0x821E7C4C;
		  /* 821E7C4Ch */ case   11:  		/* stw R11, <#[R31 + 120]> */
		/* 821E7C4Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821E7C4Ch case   11:*/		return 0x821E7C50;
		  /* 821E7C50h */ case   12:  		/* bc 16, CR0_LT, -16 */
		/* 821E7C50h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821E7C40;  }
		/* 821E7C50h case   12:*/		return 0x821E7C54;
	}
	return 0x821E7C54;
} // Block from 821E7C20h-821E7C54h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E7C54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7C54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7C54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7C54);
		  /* 821E7C54h */ case    0:  		/* subfic R11, R29, 24 */
		/* 821E7C54h case    0:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R29,0x18);
		/* 821E7C54h case    0:*/		return 0x821E7C58;
	}
	return 0x821E7C58;
} // Block from 821E7C54h-821E7C58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E7C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7C58);
		  /* 821E7C58h */ case    0:  		/* stw R11, <#[R31 + 124]> */
		/* 821E7C58h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 821E7C58h case    0:*/		return 0x821E7C5C;
		  /* 821E7C5Ch */ case    1:  		/* addi R1, R1, 192 */
		/* 821E7C5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821E7C5Ch case    1:*/		return 0x821E7C60;
		  /* 821E7C60h */ case    2:  		/* lfd FR31, <#[R1 - 104]> */
		/* 821E7C60h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 821E7C60h case    2:*/		return 0x821E7C64;
		  /* 821E7C64h */ case    3:  		/* b -1403352 */
		/* 821E7C64h case    3:*/		return 0x8209128C;
		/* 821E7C64h case    3:*/		return 0x821E7C68;
	}
	return 0x821E7C68;
} // Block from 821E7C58h-821E7C68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E7C68h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7C68);
		  /* 821E7C68h */ case    0:  		/* mfspr R12, LR */
		/* 821E7C68h case    0:*/		regs.R12 = regs.LR;
		/* 821E7C68h case    0:*/		return 0x821E7C6C;
		  /* 821E7C6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821E7C6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821E7C6Ch case    1:*/		return 0x821E7C70;
		  /* 821E7C70h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821E7C70h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821E7C70h case    2:*/		return 0x821E7C74;
		  /* 821E7C74h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821E7C74h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E7C74h case    3:*/		return 0x821E7C78;
		  /* 821E7C78h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821E7C78h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821E7C78h case    4:*/		return 0x821E7C7C;
		  /* 821E7C7Ch */ case    5:  		/* lis R30, -32215 */
		/* 821E7C7Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8229);
		/* 821E7C7Ch case    5:*/		return 0x821E7C80;
		  /* 821E7C80h */ case    6:  		/* lbz R11, <#[R30 - 25768]> */
		/* 821E7C80h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFF9B58) );
		/* 821E7C80h case    6:*/		return 0x821E7C84;
		  /* 821E7C84h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 821E7C84h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E7C84h case    7:*/		return 0x821E7C88;
		  /* 821E7C88h */ case    8:  		/* bc 4, CR0_EQ, 84 */
		/* 821E7C88h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E7CDC;  }
		/* 821E7C88h case    8:*/		return 0x821E7C8C;
		  /* 821E7C8Ch */ case    9:  		/* lis R11, -32215 */
		/* 821E7C8Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 821E7C8Ch case    9:*/		return 0x821E7C90;
		  /* 821E7C90h */ case   10:  		/* li R9, 0 */
		/* 821E7C90h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821E7C90h case   10:*/		return 0x821E7C94;
		  /* 821E7C94h */ case   11:  		/* addi R31, R11, -26024 */
		/* 821E7C94h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFF9A58);
		/* 821E7C94h case   11:*/		return 0x821E7C98;
		  /* 821E7C98h */ case   12:  		/* li R8, 0 */
		/* 821E7C98h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E7C98h case   12:*/		return 0x821E7C9C;
		  /* 821E7C9Ch */ case   13:  		/* mr R3, R31 */
		/* 821E7C9Ch case   13:*/		regs.R3 = regs.R31;
		/* 821E7C9Ch case   13:*/		return 0x821E7CA0;
		  /* 821E7CA0h */ case   14:  		/* li R7, 0 */
		/* 821E7CA0h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E7CA0h case   14:*/		return 0x821E7CA4;
		  /* 821E7CA4h */ case   15:  		/* li R6, 5 */
		/* 821E7CA4h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x5);
		/* 821E7CA4h case   15:*/		return 0x821E7CA8;
		  /* 821E7CA8h */ case   16:  		/* li R5, 26 */
		/* 821E7CA8h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x1A);
		/* 821E7CA8h case   16:*/		return 0x821E7CAC;
		  /* 821E7CACh */ case   17:  		/* li R4, 24 */
		/* 821E7CACh case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 821E7CACh case   17:*/		return 0x821E7CB0;
		  /* 821E7CB0h */ case   18:  		/* bl -3568 */
		/* 821E7CB0h case   18:*/		regs.LR = 0x821E7CB4; return 0x821E6EC0;
		/* 821E7CB0h case   18:*/		return 0x821E7CB4;
		  /* 821E7CB4h */ case   19:  		/* li R9, 0 */
		/* 821E7CB4h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821E7CB4h case   19:*/		return 0x821E7CB8;
		  /* 821E7CB8h */ case   20:  		/* li R8, 0 */
		/* 821E7CB8h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E7CB8h case   20:*/		return 0x821E7CBC;
		  /* 821E7CBCh */ case   21:  		/* li R7, 0 */
		/* 821E7CBCh case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E7CBCh case   21:*/		return 0x821E7CC0;
		  /* 821E7CC0h */ case   22:  		/* li R6, 5 */
		/* 821E7CC0h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x5);
		/* 821E7CC0h case   22:*/		return 0x821E7CC4;
		  /* 821E7CC4h */ case   23:  		/* li R5, 26 */
		/* 821E7CC4h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x1A);
		/* 821E7CC4h case   23:*/		return 0x821E7CC8;
		  /* 821E7CC8h */ case   24:  		/* li R4, 23 */
		/* 821E7CC8h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 821E7CC8h case   24:*/		return 0x821E7CCC;
		  /* 821E7CCCh */ case   25:  		/* addi R3, R31, 128 */
		/* 821E7CCCh case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x80);
		/* 821E7CCCh case   25:*/		return 0x821E7CD0;
		  /* 821E7CD0h */ case   26:  		/* bl -3600 */
		/* 821E7CD0h case   26:*/		regs.LR = 0x821E7CD4; return 0x821E6EC0;
		/* 821E7CD0h case   26:*/		return 0x821E7CD4;
		  /* 821E7CD4h */ case   27:  		/* li R11, 1 */
		/* 821E7CD4h case   27:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E7CD4h case   27:*/		return 0x821E7CD8;
		  /* 821E7CD8h */ case   28:  		/* stb R11, <#[R30 - 25768]> */
		/* 821E7CD8h case   28:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0xFFFF9B58) );
		/* 821E7CD8h case   28:*/		return 0x821E7CDC;
	}
	return 0x821E7CDC;
} // Block from 821E7C68h-821E7CDCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E7CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7CDC);
		  /* 821E7CDCh */ case    0:  		/* addi R1, R1, 112 */
		/* 821E7CDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821E7CDCh case    0:*/		return 0x821E7CE0;
		  /* 821E7CE0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821E7CE0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821E7CE0h case    1:*/		return 0x821E7CE4;
		  /* 821E7CE4h */ case    2:  		/* mtspr LR, R12 */
		/* 821E7CE4h case    2:*/		regs.LR = regs.R12;
		/* 821E7CE4h case    2:*/		return 0x821E7CE8;
		  /* 821E7CE8h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 821E7CE8h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821E7CE8h case    3:*/		return 0x821E7CEC;
		  /* 821E7CECh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 821E7CECh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E7CECh case    4:*/		return 0x821E7CF0;
		  /* 821E7CF0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 821E7CF0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821E7CF0h case    5:*/		return 0x821E7CF4;
	}
	return 0x821E7CF4;
} // Block from 821E7CDCh-821E7CF4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E7CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7CF4);
		  /* 821E7CF4h */ case    0:  		/* nop */
		/* 821E7CF4h case    0:*/		cpu::op::nop();
		/* 821E7CF4h case    0:*/		return 0x821E7CF8;
	}
	return 0x821E7CF8;
} // Block from 821E7CF4h-821E7CF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E7CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7CF8);
		  /* 821E7CF8h */ case    0:  		/* mfspr R12, LR */
		/* 821E7CF8h case    0:*/		regs.R12 = regs.LR;
		/* 821E7CF8h case    0:*/		return 0x821E7CFC;
		  /* 821E7CFCh */ case    1:  		/* bl -1403572 */
		/* 821E7CFCh case    1:*/		regs.LR = 0x821E7D00; return 0x82091248;
		/* 821E7CFCh case    1:*/		return 0x821E7D00;
		  /* 821E7D00h */ case    2:  		/* lwz R11, <#[R1 + 84]> */
		/* 821E7D00h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821E7D00h case    2:*/		return 0x821E7D04;
		  /* 821E7D04h */ case    3:  		/* li R31, 9 */
		/* 821E7D04h case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x9);
		/* 821E7D04h case    3:*/		return 0x821E7D08;
		  /* 821E7D08h */ case    4:  		/* addi R30, R11, -25 */
		/* 821E7D08h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFE7);
		/* 821E7D08h case    4:*/		return 0x821E7D0C;
		  /* 821E7D0Ch */ case    5:  		/* addi R29, R11, -18 */
		/* 821E7D0Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFEE);
		/* 821E7D0Ch case    5:*/		return 0x821E7D10;
		  /* 821E7D10h */ case    6:  		/* subfc R28, R31, R11 */
		/* 821E7D10h case    6:*/		cpu::op::subfc<0>(regs,&regs.R28,regs.R31,regs.R11);
		/* 821E7D10h case    6:*/		return 0x821E7D14;
		  /* 821E7D14h */ case    7:  		/* eqv R31, R31, R11 */
		/* 821E7D14h case    7:*/		cpu::op::eqv<0>(regs,&regs.R31,regs.R31,regs.R11);
		/* 821E7D14h case    7:*/		return 0x821E7D18;
		  /* 821E7D18h */ case    8:  		/* cntlzw R30, R30 */
		/* 821E7D18h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R30,regs.R30);
		/* 821E7D18h case    8:*/		return 0x821E7D1C;
		  /* 821E7D1Ch */ case    9:  		/* cntlzw R29, R29 */
		/* 821E7D1Ch case    9:*/		cpu::op::cntlzw<0>(regs,&regs.R29,regs.R29);
		/* 821E7D1Ch case    9:*/		return 0x821E7D20;
		  /* 821E7D20h */ case   10:  		/* addi R27, R11, -17 */
		/* 821E7D20h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFFFEF);
		/* 821E7D20h case   10:*/		return 0x821E7D24;
		  /* 821E7D24h */ case   11:  		/* rlwinm R31, R31, 1, 31, 31 */
		/* 821E7D24h case   11:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R31,regs.R31);
		/* 821E7D24h case   11:*/		return 0x821E7D28;
		  /* 821E7D28h */ case   12:  		/* rlwinm R30, R30, 27, 31, 31 */
		/* 821E7D28h case   12:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R30,regs.R30);
		/* 821E7D28h case   12:*/		return 0x821E7D2C;
		  /* 821E7D2Ch */ case   13:  		/* rlwinm R29, R29, 27, 31, 31 */
		/* 821E7D2Ch case   13:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R29,regs.R29);
		/* 821E7D2Ch case   13:*/		return 0x821E7D30;
		  /* 821E7D30h */ case   14:  		/* cntlzw R28, R27 */
		/* 821E7D30h case   14:*/		cpu::op::cntlzw<0>(regs,&regs.R28,regs.R27);
		/* 821E7D30h case   14:*/		return 0x821E7D34;
		  /* 821E7D34h */ case   15:  		/* or R30, R30, R29 */
		/* 821E7D34h case   15:*/		cpu::op::or<0>(regs,&regs.R30,regs.R30,regs.R29);
		/* 821E7D34h case   15:*/		return 0x821E7D38;
		  /* 821E7D38h */ case   16:  		/* addze R31, R31 */
		/* 821E7D38h case   16:*/		cpu::op::addze<0>(regs,&regs.R31,regs.R31);
		/* 821E7D38h case   16:*/		return 0x821E7D3C;
		  /* 821E7D3Ch */ case   17:  		/* rlwinm R29, R28, 27, 31, 31 */
		/* 821E7D3Ch case   17:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R29,regs.R28);
		/* 821E7D3Ch case   17:*/		return 0x821E7D40;
		  /* 821E7D40h */ case   18:  		/* rlwinm R31, R31, 0, 31, 31 */
		/* 821E7D40h case   18:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R31,regs.R31);
		/* 821E7D40h case   18:*/		return 0x821E7D44;
		  /* 821E7D44h */ case   19:  		/* or R30, R30, R29 */
		/* 821E7D44h case   19:*/		cpu::op::or<0>(regs,&regs.R30,regs.R30,regs.R29);
		/* 821E7D44h case   19:*/		return 0x821E7D48;
		  /* 821E7D48h */ case   20:  		/* or. R31, R30, R31 */
		/* 821E7D48h case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R30,regs.R31);
		/* 821E7D48h case   20:*/		return 0x821E7D4C;
		  /* 821E7D4Ch */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 821E7D4Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x821E7D5C;  }
		/* 821E7D4Ch case   21:*/		return 0x821E7D50;
		  /* 821E7D50h */ case   22:  		/* li R28, -1 */
		/* 821E7D50h case   22:*/		cpu::op::li<0>(regs,&regs.R28,0xFFFFFFFF);
		/* 821E7D50h case   22:*/		return 0x821E7D54;
		  /* 821E7D54h */ case   23:  		/* li R29, -1 */
		/* 821E7D54h case   23:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 821E7D54h case   23:*/		return 0x821E7D58;
		  /* 821E7D58h */ case   24:  		/* b 132 */
		/* 821E7D58h case   24:*/		return 0x821E7DDC;
		/* 821E7D58h case   24:*/		return 0x821E7D5C;
	}
	return 0x821E7D5C;
} // Block from 821E7CF8h-821E7D5Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 821E7D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7D5C);
		  /* 821E7D5Ch */ case    0:  		/* li R31, 13 */
		/* 821E7D5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0xD);
		/* 821E7D5Ch case    0:*/		return 0x821E7D60;
		  /* 821E7D60h */ case    1:  		/* addi R30, R11, -22 */
		/* 821E7D60h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFEA);
		/* 821E7D60h case    1:*/		return 0x821E7D64;
		  /* 821E7D64h */ case    2:  		/* subfc R29, R31, R11 */
		/* 821E7D64h case    2:*/		cpu::op::subfc<0>(regs,&regs.R29,regs.R31,regs.R11);
		/* 821E7D64h case    2:*/		return 0x821E7D68;
		  /* 821E7D68h */ case    3:  		/* eqv R31, R31, R11 */
		/* 821E7D68h case    3:*/		cpu::op::eqv<0>(regs,&regs.R31,regs.R31,regs.R11);
		/* 821E7D68h case    3:*/		return 0x821E7D6C;
		  /* 821E7D6Ch */ case    4:  		/* addi R28, R11, -19 */
		/* 821E7D6Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFED);
		/* 821E7D6Ch case    4:*/		return 0x821E7D70;
		  /* 821E7D70h */ case    5:  		/* rlwinm R31, R31, 1, 31, 31 */
		/* 821E7D70h case    5:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R31,regs.R31);
		/* 821E7D70h case    5:*/		return 0x821E7D74;
		  /* 821E7D74h */ case    6:  		/* cntlzw R30, R30 */
		/* 821E7D74h case    6:*/		cpu::op::cntlzw<0>(regs,&regs.R30,regs.R30);
		/* 821E7D74h case    6:*/		return 0x821E7D78;
		  /* 821E7D78h */ case    7:  		/* cntlzw R29, R28 */
		/* 821E7D78h case    7:*/		cpu::op::cntlzw<0>(regs,&regs.R29,regs.R28);
		/* 821E7D78h case    7:*/		return 0x821E7D7C;
		  /* 821E7D7Ch */ case    8:  		/* addze R31, R31 */
		/* 821E7D7Ch case    8:*/		cpu::op::addze<0>(regs,&regs.R31,regs.R31);
		/* 821E7D7Ch case    8:*/		return 0x821E7D80;
		  /* 821E7D80h */ case    9:  		/* rlwinm R30, R30, 27, 31, 31 */
		/* 821E7D80h case    9:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R30,regs.R30);
		/* 821E7D80h case    9:*/		return 0x821E7D84;
		  /* 821E7D84h */ case   10:  		/* rlwinm R29, R29, 27, 31, 31 */
		/* 821E7D84h case   10:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R29,regs.R29);
		/* 821E7D84h case   10:*/		return 0x821E7D88;
		  /* 821E7D88h */ case   11:  		/* rlwinm R31, R31, 0, 31, 31 */
		/* 821E7D88h case   11:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R31,regs.R31);
		/* 821E7D88h case   11:*/		return 0x821E7D8C;
		  /* 821E7D8Ch */ case   12:  		/* or R30, R30, R29 */
		/* 821E7D8Ch case   12:*/		cpu::op::or<0>(regs,&regs.R30,regs.R30,regs.R29);
		/* 821E7D8Ch case   12:*/		return 0x821E7D90;
		  /* 821E7D90h */ case   13:  		/* or. R31, R30, R31 */
		/* 821E7D90h case   13:*/		cpu::op::or<1>(regs,&regs.R31,regs.R30,regs.R31);
		/* 821E7D90h case   13:*/		return 0x821E7D94;
		  /* 821E7D94h */ case   14:  		/* bc 12, CR0_EQ, 20 */
		/* 821E7D94h case   14:*/		if ( regs.CR[0].eq ) { return 0x821E7DA8;  }
		/* 821E7D94h case   14:*/		return 0x821E7D98;
		  /* 821E7D98h */ case   15:  		/* li R28, 1 */
		/* 821E7D98h case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821E7D98h case   15:*/		return 0x821E7D9C;
		  /* 821E7D9Ch */ case   16:  		/* li R31, -1 */
		/* 821E7D9Ch case   16:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 821E7D9Ch case   16:*/		return 0x821E7DA0;
		  /* 821E7DA0h */ case   17:  		/* li R29, 1 */
		/* 821E7DA0h case   17:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821E7DA0h case   17:*/		return 0x821E7DA4;
		  /* 821E7DA4h */ case   18:  		/* b 60 */
		/* 821E7DA4h case   18:*/		return 0x821E7DE0;
		/* 821E7DA4h case   18:*/		return 0x821E7DA8;
	}
	return 0x821E7DA8;
} // Block from 821E7D5Ch-821E7DA8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821E7DA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7DA8);
		  /* 821E7DA8h */ case    0:  		/* cmpwi CR6, R11, 23 */
		/* 821E7DA8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000017);
		/* 821E7DA8h case    0:*/		return 0x821E7DAC;
		  /* 821E7DACh */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821E7DACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E7DC0;  }
		/* 821E7DACh case    1:*/		return 0x821E7DB0;
		  /* 821E7DB0h */ case    2:  		/* li R28, 1 */
		/* 821E7DB0h case    2:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821E7DB0h case    2:*/		return 0x821E7DB4;
		  /* 821E7DB4h */ case    3:  		/* li R31, -1 */
		/* 821E7DB4h case    3:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 821E7DB4h case    3:*/		return 0x821E7DB8;
		  /* 821E7DB8h */ case    4:  		/* li R29, -1 */
		/* 821E7DB8h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 821E7DB8h case    4:*/		return 0x821E7DBC;
		  /* 821E7DBCh */ case    5:  		/* b 36 */
		/* 821E7DBCh case    5:*/		return 0x821E7DE0;
		/* 821E7DBCh case    5:*/		return 0x821E7DC0;
	}
	return 0x821E7DC0;
} // Block from 821E7DA8h-821E7DC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E7DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7DC0);
		  /* 821E7DC0h */ case    0:  		/* cmpwi CR6, R11, 24 */
		/* 821E7DC0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000018);
		/* 821E7DC0h case    0:*/		return 0x821E7DC4;
		  /* 821E7DC4h */ case    1:  		/* li R29, 1 */
		/* 821E7DC4h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821E7DC4h case    1:*/		return 0x821E7DC8;
		  /* 821E7DC8h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 821E7DC8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E7DD8;  }
		/* 821E7DC8h case    2:*/		return 0x821E7DCC;
		  /* 821E7DCCh */ case    3:  		/* li R28, -1 */
		/* 821E7DCCh case    3:*/		cpu::op::li<0>(regs,&regs.R28,0xFFFFFFFF);
		/* 821E7DCCh case    3:*/		return 0x821E7DD0;
		  /* 821E7DD0h */ case    4:  		/* li R31, -1 */
		/* 821E7DD0h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 821E7DD0h case    4:*/		return 0x821E7DD4;
		  /* 821E7DD4h */ case    5:  		/* b 12 */
		/* 821E7DD4h case    5:*/		return 0x821E7DE0;
		/* 821E7DD4h case    5:*/		return 0x821E7DD8;
	}
	return 0x821E7DD8;
} // Block from 821E7DC0h-821E7DD8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E7DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7DD8);
		  /* 821E7DD8h */ case    0:  		/* li R28, 1 */
		/* 821E7DD8h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821E7DD8h case    0:*/		return 0x821E7DDC;
	}
	return 0x821E7DDC;
} // Block from 821E7DD8h-821E7DDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E7DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7DDC);
		  /* 821E7DDCh */ case    0:  		/* li R31, 1 */
		/* 821E7DDCh case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821E7DDCh case    0:*/		return 0x821E7DE0;
	}
	return 0x821E7DE0;
} // Block from 821E7DDCh-821E7DE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E7DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7DE0);
		  /* 821E7DE0h */ case    0:  		/* lwz R30, <#[R10 + 84]> */
		/* 821E7DE0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000054) );
		/* 821E7DE0h case    0:*/		return 0x821E7DE4;
		  /* 821E7DE4h */ case    1:  		/* rldicl R4, R4, 0, 32 */
		/* 821E7DE4h case    1:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R4,regs.R4);
		/* 821E7DE4h case    1:*/		return 0x821E7DE8;
		  /* 821E7DE8h */ case    2:  		/* rldicl R7, R7, 0, 32 */
		/* 821E7DE8h case    2:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R7,regs.R7);
		/* 821E7DE8h case    2:*/		return 0x821E7DEC;
		  /* 821E7DECh */ case    3:  		/* cmpwi CR6, R30, 0 */
		/* 821E7DECh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 821E7DECh case    3:*/		return 0x821E7DF0;
		  /* 821E7DF0h */ case    4:  		/* mulld R7, R4, R7 */
		/* 821E7DF0h case    4:*/		cpu::op::mulld<0>(regs,&regs.R7,regs.R4,regs.R7);
		/* 821E7DF0h case    4:*/		return 0x821E7DF4;
		  /* 821E7DF4h */ case    5:  		/* bc 4, CR6_LT, 28 */
		/* 821E7DF4h case    5:*/		if ( !regs.CR[6].lt ) { return 0x821E7E10;  }
		/* 821E7DF4h case    5:*/		return 0x821E7DF8;
		  /* 821E7DF8h */ case    6:  		/* srawi R27, R30, 31 */
		/* 821E7DF8h case    6:*/		cpu::op::srawi<0,31>(regs,&regs.R27,regs.R30);
		/* 821E7DF8h case    6:*/		return 0x821E7DFC;
		  /* 821E7DFCh */ case    7:  		/* xor R30, R30, R27 */
		/* 821E7DFCh case    7:*/		cpu::op::xor<0>(regs,&regs.R30,regs.R30,regs.R27);
		/* 821E7DFCh case    7:*/		return 0x821E7E00;
		  /* 821E7E00h */ case    8:  		/* subf R30, R27, R30 */
		/* 821E7E00h case    8:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R27,regs.R30);
		/* 821E7E00h case    8:*/		return 0x821E7E04;
		  /* 821E7E04h */ case    9:  		/* extsw R4, R30 */
		/* 821E7E04h case    9:*/		cpu::op::extsw<0>(regs,&regs.R4,regs.R30);
		/* 821E7E04h case    9:*/		return 0x821E7E08;
		  /* 821E7E08h */ case   10:  		/* sld R30, R7, R4 */
		/* 821E7E08h case   10:*/		cpu::op::sld<0>(regs,&regs.R30,regs.R7,regs.R4);
		/* 821E7E08h case   10:*/		return 0x821E7E0C;
		  /* 821E7E0Ch */ case   11:  		/* b 12 */
		/* 821E7E0Ch case   11:*/		return 0x821E7E18;
		/* 821E7E0Ch case   11:*/		return 0x821E7E10;
	}
	return 0x821E7E10;
} // Block from 821E7DE0h-821E7E10h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E7E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7E10);
		  /* 821E7E10h */ case    0:  		/* extsw R30, R30 */
		/* 821E7E10h case    0:*/		cpu::op::extsw<0>(regs,&regs.R30,regs.R30);
		/* 821E7E10h case    0:*/		return 0x821E7E14;
		  /* 821E7E14h */ case    1:  		/* srad R30, R7, R30 */
		/* 821E7E14h case    1:*/		cpu::op::srad<0>(regs,&regs.R30,regs.R7,regs.R30);
		/* 821E7E14h case    1:*/		return 0x821E7E18;
	}
	return 0x821E7E18;
} // Block from 821E7E10h-821E7E18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E7E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7E18);
		  /* 821E7E18h */ case    0:  		/* addi R7, R11, -12 */
		/* 821E7E18h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFF4);
		/* 821E7E18h case    0:*/		return 0x821E7E1C;
		  /* 821E7E1Ch */ case    1:  		/* addi R4, R11, -11 */
		/* 821E7E1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFF5);
		/* 821E7E1Ch case    1:*/		return 0x821E7E20;
		  /* 821E7E20h */ case    2:  		/* cntlzw R7, R7 */
		/* 821E7E20h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R7,regs.R7);
		/* 821E7E20h case    2:*/		return 0x821E7E24;
		  /* 821E7E24h */ case    3:  		/* cntlzw R4, R4 */
		/* 821E7E24h case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R4,regs.R4);
		/* 821E7E24h case    3:*/		return 0x821E7E28;
		  /* 821E7E28h */ case    4:  		/* addi R27, R11, -8 */
		/* 821E7E28h case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFFFF8);
		/* 821E7E28h case    4:*/		return 0x821E7E2C;
		  /* 821E7E2Ch */ case    5:  		/* rlwinm R26, R7, 27, 31, 31 */
		/* 821E7E2Ch case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R26,regs.R7);
		/* 821E7E2Ch case    5:*/		return 0x821E7E30;
		  /* 821E7E30h */ case    6:  		/* rlwinm R4, R4, 27, 31, 31 */
		/* 821E7E30h case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R4,regs.R4);
		/* 821E7E30h case    6:*/		return 0x821E7E34;
		  /* 821E7E34h */ case    7:  		/* cntlzw R27, R27 */
		/* 821E7E34h case    7:*/		cpu::op::cntlzw<0>(regs,&regs.R27,regs.R27);
		/* 821E7E34h case    7:*/		return 0x821E7E38;
		  /* 821E7E38h */ case    8:  		/* addi R25, R11, -7 */
		/* 821E7E38h case    8:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFFFF9);
		/* 821E7E38h case    8:*/		return 0x821E7E3C;
		  /* 821E7E3Ch */ case    9:  		/* or R4, R26, R4 */
		/* 821E7E3Ch case    9:*/		cpu::op::or<0>(regs,&regs.R4,regs.R26,regs.R4);
		/* 821E7E3Ch case    9:*/		return 0x821E7E40;
		  /* 821E7E40h */ case   10:  		/* rlwinm R27, R27, 27, 31, 31 */
		/* 821E7E40h case   10:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R27,regs.R27);
		/* 821E7E40h case   10:*/		return 0x821E7E44;
		  /* 821E7E44h */ case   11:  		/* cntlzw R26, R25 */
		/* 821E7E44h case   11:*/		cpu::op::cntlzw<0>(regs,&regs.R26,regs.R25);
		/* 821E7E44h case   11:*/		return 0x821E7E48;
		  /* 821E7E48h */ case   12:  		/* li R7, 14 */
		/* 821E7E48h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0xE);
		/* 821E7E48h case   12:*/		return 0x821E7E4C;
		  /* 821E7E4Ch */ case   13:  		/* addi R25, R11, -4 */
		/* 821E7E4Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFFFFC);
		/* 821E7E4Ch case   13:*/		return 0x821E7E50;
		  /* 821E7E50h */ case   14:  		/* or R4, R4, R27 */
		/* 821E7E50h case   14:*/		cpu::op::or<0>(regs,&regs.R4,regs.R4,regs.R27);
		/* 821E7E50h case   14:*/		return 0x821E7E54;
		  /* 821E7E54h */ case   15:  		/* rlwinm R27, R26, 27, 31, 31 */
		/* 821E7E54h case   15:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R27,regs.R26);
		/* 821E7E54h case   15:*/		return 0x821E7E58;
		  /* 821E7E58h */ case   16:  		/* subfc R24, R11, R7 */
		/* 821E7E58h case   16:*/		cpu::op::subfc<0>(regs,&regs.R24,regs.R11,regs.R7);
		/* 821E7E58h case   16:*/		return 0x821E7E5C;
		  /* 821E7E5Ch */ case   17:  		/* cntlzw R26, R25 */
		/* 821E7E5Ch case   17:*/		cpu::op::cntlzw<0>(regs,&regs.R26,regs.R25);
		/* 821E7E5Ch case   17:*/		return 0x821E7E60;
		  /* 821E7E60h */ case   18:  		/* eqv R7, R11, R7 */
		/* 821E7E60h case   18:*/		cpu::op::eqv<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 821E7E60h case   18:*/		return 0x821E7E64;
		  /* 821E7E64h */ case   19:  		/* addi R25, R11, -3 */
		/* 821E7E64h case   19:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFFFFD);
		/* 821E7E64h case   19:*/		return 0x821E7E68;
		  /* 821E7E68h */ case   20:  		/* or R4, R4, R27 */
		/* 821E7E68h case   20:*/		cpu::op::or<0>(regs,&regs.R4,regs.R4,regs.R27);
		/* 821E7E68h case   20:*/		return 0x821E7E6C;
		  /* 821E7E6Ch */ case   21:  		/* rlwinm R27, R26, 27, 31, 31 */
		/* 821E7E6Ch case   21:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R27,regs.R26);
		/* 821E7E6Ch case   21:*/		return 0x821E7E70;
		  /* 821E7E70h */ case   22:  		/* rlwinm R7, R7, 1, 31, 31 */
		/* 821E7E70h case   22:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R7,regs.R7);
		/* 821E7E70h case   22:*/		return 0x821E7E74;
		  /* 821E7E74h */ case   23:  		/* cntlzw R26, R25 */
		/* 821E7E74h case   23:*/		cpu::op::cntlzw<0>(regs,&regs.R26,regs.R25);
		/* 821E7E74h case   23:*/		return 0x821E7E78;
		  /* 821E7E78h */ case   24:  		/* or R4, R4, R27 */
		/* 821E7E78h case   24:*/		cpu::op::or<0>(regs,&regs.R4,regs.R4,regs.R27);
		/* 821E7E78h case   24:*/		return 0x821E7E7C;
		  /* 821E7E7Ch */ case   25:  		/* addze R7, R7 */
		/* 821E7E7Ch case   25:*/		cpu::op::addze<0>(regs,&regs.R7,regs.R7);
		/* 821E7E7Ch case   25:*/		return 0x821E7E80;
		  /* 821E7E80h */ case   26:  		/* rlwinm R27, R26, 27, 31, 31 */
		/* 821E7E80h case   26:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R27,regs.R26);
		/* 821E7E80h case   26:*/		return 0x821E7E84;
		  /* 821E7E84h */ case   27:  		/* rlwinm R7, R7, 0, 31, 31 */
		/* 821E7E84h case   27:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R7,regs.R7);
		/* 821E7E84h case   27:*/		return 0x821E7E88;
		  /* 821E7E88h */ case   28:  		/* or R4, R4, R27 */
		/* 821E7E88h case   28:*/		cpu::op::or<0>(regs,&regs.R4,regs.R4,regs.R27);
		/* 821E7E88h case   28:*/		return 0x821E7E8C;
		  /* 821E7E8Ch */ case   29:  		/* or. R7, R4, R7 */
		/* 821E7E8Ch case   29:*/		cpu::op::or<1>(regs,&regs.R7,regs.R4,regs.R7);
		/* 821E7E8Ch case   29:*/		return 0x821E7E90;
		  /* 821E7E90h */ case   30:  		/* bc 12, CR0_EQ, 332 */
		/* 821E7E90h case   30:*/		if ( regs.CR[0].eq ) { return 0x821E7FDC;  }
		/* 821E7E90h case   30:*/		return 0x821E7E94;
		  /* 821E7E94h */ case   31:  		/* lwz R7, <#[R10 + 72]> */
		/* 821E7E94h case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000048) );
		/* 821E7E94h case   31:*/		return 0x821E7E98;
		  /* 821E7E98h */ case   32:  		/* rldicl R8, R8, 0, 32 */
		/* 821E7E98h case   32:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R8);
		/* 821E7E98h case   32:*/		return 0x821E7E9C;
		  /* 821E7E9Ch */ case   33:  		/* extsw R31, R31 */
		/* 821E7E9Ch case   33:*/		cpu::op::extsw<0>(regs,&regs.R31,regs.R31);
		/* 821E7E9Ch case   33:*/		return 0x821E7EA0;
		  /* 821E7EA0h */ case   34:  		/* addi R7, R7, -1 */
		/* 821E7EA0h case   34:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xFFFFFFFF);
		/* 821E7EA0h case   34:*/		return 0x821E7EA4;
		  /* 821E7EA4h */ case   35:  		/* mulld R4, R8, R8 */
		/* 821E7EA4h case   35:*/		cpu::op::mulld<0>(regs,&regs.R4,regs.R8,regs.R8);
		/* 821E7EA4h case   35:*/		return 0x821E7EA8;
		  /* 821E7EA8h */ case   36:  		/* extsw R8, R7 */
		/* 821E7EA8h case   36:*/		cpu::op::extsw<0>(regs,&regs.R8,regs.R7);
		/* 821E7EA8h case   36:*/		return 0x821E7EAC;
		  /* 821E7EACh */ case   37:  		/* rldicl R7, R5, 0, 32 */
		/* 821E7EACh case   37:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R7,regs.R5);
		/* 821E7EACh case   37:*/		return 0x821E7EB0;
		  /* 821E7EB0h */ case   38:  		/* srad R8, R4, R8 */
		/* 821E7EB0h case   38:*/		cpu::op::srad<0>(regs,&regs.R8,regs.R4,regs.R8);
		/* 821E7EB0h case   38:*/		return 0x821E7EB4;
		  /* 821E7EB4h */ case   39:  		/* sradi R5, R8, 1 */
		/* 821E7EB4h case   39:*/		cpu::op::sradi<0,1>(regs,&regs.R5,regs.R8);
		/* 821E7EB4h case   39:*/		return 0x821E7EB8;
		  /* 821E7EB8h */ case   40:  		/* rldicl R8, R8, 0, 63 */
		/* 821E7EB8h case   40:*/		cpu::op::rldicl<0,0,63>(regs,&regs.R8,regs.R8);
		/* 821E7EB8h case   40:*/		return 0x821E7EBC;
		  /* 821E7EBCh */ case   41:  		/* mulld R7, R31, R7 */
		/* 821E7EBCh case   41:*/		cpu::op::mulld<0>(regs,&regs.R7,regs.R31,regs.R7);
		/* 821E7EBCh case   41:*/		return 0x821E7EC0;
		  /* 821E7EC0h */ case   42:  		/* or R8, R5, R8 */
		/* 821E7EC0h case   42:*/		cpu::op::or<0>(regs,&regs.R8,regs.R5,regs.R8);
		/* 821E7EC0h case   42:*/		return 0x821E7EC4;
		  /* 821E7EC4h */ case   43:  		/* cmpwi CR6, R11, 16 */
		/* 821E7EC4h case   43:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000010);
		/* 821E7EC4h case   43:*/		return 0x821E7EC8;
		  /* 821E7EC8h */ case   44:  		/* mulld R31, R7, R8 */
		/* 821E7EC8h case   44:*/		cpu::op::mulld<0>(regs,&regs.R31,regs.R7,regs.R8);
		/* 821E7EC8h case   44:*/		return 0x821E7ECC;
		  /* 821E7ECCh */ case   45:  		/* bc 4, CR6_GT, 224 */
		/* 821E7ECCh case   45:*/		if ( !regs.CR[6].gt ) { return 0x821E7FAC;  }
		/* 821E7ECCh case   45:*/		return 0x821E7ED0;
		  /* 821E7ED0h */ case   46:  		/* lwz R11, <#[R10 + 76]> */
		/* 821E7ED0h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000004C) );
		/* 821E7ED0h case   46:*/		return 0x821E7ED4;
		  /* 821E7ED4h */ case   47:  		/* rldicl R6, R6, 0, 32 */
		/* 821E7ED4h case   47:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R6,regs.R6);
		/* 821E7ED4h case   47:*/		return 0x821E7ED8;
		  /* 821E7ED8h */ case   48:  		/* extsw R29, R29 */
		/* 821E7ED8h case   48:*/		cpu::op::extsw<0>(regs,&regs.R29,regs.R29);
		/* 821E7ED8h case   48:*/		return 0x821E7EDC;
		  /* 821E7EDCh */ case   49:  		/* lwz R5, <#[R10 + 80]> */
		/* 821E7EDCh case   49:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000050) );
		/* 821E7EDCh case   49:*/		return 0x821E7EE0;
		  /* 821E7EE0h */ case   50:  		/* addi R11, R11, -1 */
		/* 821E7EE0h case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E7EE0h case   50:*/		return 0x821E7EE4;
		  /* 821E7EE4h */ case   51:  		/* lwz R8, <#[R10 + 92]> */
		/* 821E7EE4h case   51:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x0000005C) );
		/* 821E7EE4h case   51:*/		return 0x821E7EE8;
		  /* 821E7EE8h */ case   52:  		/* mulld R6, R29, R6 */
		/* 821E7EE8h case   52:*/		cpu::op::mulld<0>(regs,&regs.R6,regs.R29,regs.R6);
		/* 821E7EE8h case   52:*/		return 0x821E7EEC;
		  /* 821E7EECh */ case   53:  		/* lwz R7, <#[R10 + 88]> */
		/* 821E7EECh case   53:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000058) );
		/* 821E7EECh case   53:*/		return 0x821E7EF0;
		  /* 821E7EF0h */ case   54:  		/* rldicl R9, R9, 0, 32 */
		/* 821E7EF0h case   54:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R9);
		/* 821E7EF0h case   54:*/		return 0x821E7EF4;
		  /* 821E7EF4h */ case   55:  		/* extsw R11, R11 */
		/* 821E7EF4h case   55:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E7EF4h case   55:*/		return 0x821E7EF8;
		  /* 821E7EF8h */ case   56:  		/* addi R5, R5, -1 */
		/* 821E7EF8h case   56:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFFFF);
		/* 821E7EF8h case   56:*/		return 0x821E7EFC;
		  /* 821E7EFCh */ case   57:  		/* mulld R9, R6, R9 */
		/* 821E7EFCh case   57:*/		cpu::op::mulld<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821E7EFCh case   57:*/		return 0x821E7F00;
		  /* 821E7F00h */ case   58:  		/* srad R11, R4, R11 */
		/* 821E7F00h case   58:*/		cpu::op::srad<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 821E7F00h case   58:*/		return 0x821E7F04;
		  /* 821E7F04h */ case   59:  		/* extsw R6, R5 */
		/* 821E7F04h case   59:*/		cpu::op::extsw<0>(regs,&regs.R6,regs.R5);
		/* 821E7F04h case   59:*/		return 0x821E7F08;
		  /* 821E7F08h */ case   60:  		/* sradi R5, R11, 1 */
		/* 821E7F08h case   60:*/		cpu::op::sradi<0,1>(regs,&regs.R5,regs.R11);
		/* 821E7F08h case   60:*/		return 0x821E7F0C;
		  /* 821E7F0Ch */ case   61:  		/* srad R9, R9, R6 */
		/* 821E7F0Ch case   61:*/		cpu::op::srad<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821E7F0Ch case   61:*/		return 0x821E7F10;
		  /* 821E7F10h */ case   62:  		/* rldicl R6, R11, 0, 63 */
		/* 821E7F10h case   62:*/		cpu::op::rldicl<0,0,63>(regs,&regs.R6,regs.R11);
		/* 821E7F10h case   62:*/		return 0x821E7F14;
		  /* 821E7F14h */ case   63:  		/* sradi R4, R9, 1 */
		/* 821E7F14h case   63:*/		cpu::op::sradi<0,1>(regs,&regs.R4,regs.R9);
		/* 821E7F14h case   63:*/		return 0x821E7F18;
		  /* 821E7F18h */ case   64:  		/* rldicl R29, R9, 0, 63 */
		/* 821E7F18h case   64:*/		cpu::op::rldicl<0,0,63>(regs,&regs.R29,regs.R9);
		/* 821E7F18h case   64:*/		return 0x821E7F1C;
		  /* 821E7F1Ch */ case   65:  		/* or R9, R5, R6 */
		/* 821E7F1Ch case   65:*/		cpu::op::or<0>(regs,&regs.R9,regs.R5,regs.R6);
		/* 821E7F1Ch case   65:*/		return 0x821E7F20;
		  /* 821E7F20h */ case   66:  		/* or R6, R4, R29 */
		/* 821E7F20h case   66:*/		cpu::op::or<0>(regs,&regs.R6,regs.R4,regs.R29);
		/* 821E7F20h case   66:*/		return 0x821E7F24;
		  /* 821E7F24h */ case   67:  		/* subf. R11, R7, R8 */
		/* 821E7F24h case   67:*/		cpu::op::subf<1>(regs,&regs.R11,regs.R7,regs.R8);
		/* 821E7F24h case   67:*/		return 0x821E7F28;
		  /* 821E7F28h */ case   68:  		/* mulld R9, R6, R9 */
		/* 821E7F28h case   68:*/		cpu::op::mulld<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821E7F28h case   68:*/		return 0x821E7F2C;
		  /* 821E7F2Ch */ case   69:  		/* bc 4, CR0_LT, 28 */
		/* 821E7F2Ch case   69:*/		if ( !regs.CR[0].lt ) { return 0x821E7F48;  }
		/* 821E7F2Ch case   69:*/		return 0x821E7F30;
		  /* 821E7F30h */ case   70:  		/* srawi R5, R11, 31 */
		/* 821E7F30h case   70:*/		cpu::op::srawi<0,31>(regs,&regs.R5,regs.R11);
		/* 821E7F30h case   70:*/		return 0x821E7F34;
		  /* 821E7F34h */ case   71:  		/* xor R6, R11, R5 */
		/* 821E7F34h case   71:*/		cpu::op::xor<0>(regs,&regs.R6,regs.R11,regs.R5);
		/* 821E7F34h case   71:*/		return 0x821E7F38;
		  /* 821E7F38h */ case   72:  		/* subf R6, R5, R6 */
		/* 821E7F38h case   72:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R5,regs.R6);
		/* 821E7F38h case   72:*/		return 0x821E7F3C;
		  /* 821E7F3Ch */ case   73:  		/* extsw R6, R6 */
		/* 821E7F3Ch case   73:*/		cpu::op::extsw<0>(regs,&regs.R6,regs.R6);
		/* 821E7F3Ch case   73:*/		return 0x821E7F40;
		  /* 821E7F40h */ case   74:  		/* sld R9, R9, R6 */
		/* 821E7F40h case   74:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821E7F40h case   74:*/		return 0x821E7F44;
		  /* 821E7F44h */ case   75:  		/* b 28 */
		/* 821E7F44h case   75:*/		return 0x821E7F60;
		/* 821E7F44h case   75:*/		return 0x821E7F48;
	}
	return 0x821E7F48;
} // Block from 821E7E18h-821E7F48h (76 instructions)

//////////////////////////////////////////////////////
// Block at 821E7F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7F48);
		  /* 821E7F48h */ case    0:  		/* subf R5, R8, R7 */
		/* 821E7F48h case    0:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R8,regs.R7);
		/* 821E7F48h case    0:*/		return 0x821E7F4C;
		  /* 821E7F4Ch */ case    1:  		/* srawi R6, R5, 31 */
		/* 821E7F4Ch case    1:*/		cpu::op::srawi<0,31>(regs,&regs.R6,regs.R5);
		/* 821E7F4Ch case    1:*/		return 0x821E7F50;
		  /* 821E7F50h */ case    2:  		/* xor R5, R5, R6 */
		/* 821E7F50h case    2:*/		cpu::op::xor<0>(regs,&regs.R5,regs.R5,regs.R6);
		/* 821E7F50h case    2:*/		return 0x821E7F54;
		  /* 821E7F54h */ case    3:  		/* subf R6, R6, R5 */
		/* 821E7F54h case    3:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R6,regs.R5);
		/* 821E7F54h case    3:*/		return 0x821E7F58;
		  /* 821E7F58h */ case    4:  		/* extsw R6, R6 */
		/* 821E7F58h case    4:*/		cpu::op::extsw<0>(regs,&regs.R6,regs.R6);
		/* 821E7F58h case    4:*/		return 0x821E7F5C;
		  /* 821E7F5Ch */ case    5:  		/* sld R31, R31, R6 */
		/* 821E7F5Ch case    5:*/		cpu::op::sld<0>(regs,&regs.R31,regs.R31,regs.R6);
		/* 821E7F5Ch case    5:*/		return 0x821E7F60;
	}
	return 0x821E7F60;
} // Block from 821E7F48h-821E7F60h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E7F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7F60);
		  /* 821E7F60h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 821E7F60h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821E7F60h case    0:*/		return 0x821E7F64;
		  /* 821E7F64h */ case    1:  		/* add R11, R9, R31 */
		/* 821E7F64h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R31);
		/* 821E7F64h case    1:*/		return 0x821E7F68;
		  /* 821E7F68h */ case    2:  		/* extsw R9, R7 */
		/* 821E7F68h case    2:*/		cpu::op::extsw<0>(regs,&regs.R9,regs.R7);
		/* 821E7F68h case    2:*/		return 0x821E7F6C;
		  /* 821E7F6Ch */ case    3:  		/* bc 12, CR6_LT, 8 */
		/* 821E7F6Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x821E7F74;  }
		/* 821E7F6Ch case    3:*/		return 0x821E7F70;
		  /* 821E7F70h */ case    4:  		/* extsw R9, R8 */
		/* 821E7F70h case    4:*/		cpu::op::extsw<0>(regs,&regs.R9,regs.R8);
		/* 821E7F70h case    4:*/		return 0x821E7F74;
	}
	return 0x821E7F74;
} // Block from 821E7F60h-821E7F74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E7F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7F74);
		  /* 821E7F74h */ case    0:  		/* srad R9, R11, R9 */
		/* 821E7F74h case    0:*/		cpu::op::srad<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821E7F74h case    0:*/		return 0x821E7F78;
		  /* 821E7F78h */ case    1:  		/* lwz R11, <#[R10 + 32]> */
		/* 821E7F78h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000020) );
		/* 821E7F78h case    1:*/		return 0x821E7F7C;
		  /* 821E7F7Ch */ case    2:  		/* ld R7, <#[R10 + 112]> */
		/* 821E7F7Ch case    2:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R10 + 0x00000070) );
		/* 821E7F7Ch case    2:*/		return 0x821E7F80;
		  /* 821E7F80h */ case    3:  		/* subfic R11, R11, 40 */
		/* 821E7F80h case    3:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821E7F80h case    3:*/		return 0x821E7F84;
		  /* 821E7F84h */ case    4:  		/* extsw R10, R28 */
		/* 821E7F84h case    4:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R28);
		/* 821E7F84h case    4:*/		return 0x821E7F88;
		  /* 821E7F88h */ case    5:  		/* and R6, R7, R30 */
		/* 821E7F88h case    5:*/		cpu::op::and<0>(regs,&regs.R6,regs.R7,regs.R30);
		/* 821E7F88h case    5:*/		return 0x821E7F8C;
		  /* 821E7F8Ch */ case    6:  		/* extsw R5, R11 */
		/* 821E7F8Ch case    6:*/		cpu::op::extsw<0>(regs,&regs.R5,regs.R11);
		/* 821E7F8Ch case    6:*/		return 0x821E7F90;
		  /* 821E7F90h */ case    7:  		/* rldicl R8, R3, 0, 32 */
		/* 821E7F90h case    7:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R3);
		/* 821E7F90h case    7:*/		return 0x821E7F94;
		  /* 821E7F94h */ case    8:  		/* mulld R11, R6, R10 */
		/* 821E7F94h case    8:*/		cpu::op::mulld<0>(regs,&regs.R11,regs.R6,regs.R10);
		/* 821E7F94h case    8:*/		return 0x821E7F98;
		  /* 821E7F98h */ case    9:  		/* sld R10, R8, R5 */
		/* 821E7F98h case    9:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R8,regs.R5);
		/* 821E7F98h case    9:*/		return 0x821E7F9C;
		  /* 821E7F9Ch */ case   10:  		/* add R10, R10, R11 */
		/* 821E7F9Ch case   10:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821E7F9Ch case   10:*/		return 0x821E7FA0;
		  /* 821E7FA0h */ case   11:  		/* and R11, R7, R9 */
		/* 821E7FA0h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R7,regs.R9);
		/* 821E7FA0h case   11:*/		return 0x821E7FA4;
		  /* 821E7FA4h */ case   12:  		/* add R3, R10, R11 */
		/* 821E7FA4h case   12:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 821E7FA4h case   12:*/		return 0x821E7FA8;
		  /* 821E7FA8h */ case   13:  		/* b 92 */
		/* 821E7FA8h case   13:*/		return 0x821E8004;
		/* 821E7FA8h case   13:*/		return 0x821E7FAC;
	}
	return 0x821E7FAC;
} // Block from 821E7F74h-821E7FACh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E7FACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7FAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7FAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7FAC);
		  /* 821E7FACh */ case    0:  		/* lwz R11, <#[R10 + 32]> */
		/* 821E7FACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000020) );
		/* 821E7FACh case    0:*/		return 0x821E7FB0;
		  /* 821E7FB0h */ case    1:  		/* rldicl R9, R3, 0, 32 */
		/* 821E7FB0h case    1:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R3);
		/* 821E7FB0h case    1:*/		return 0x821E7FB4;
		  /* 821E7FB4h */ case    2:  		/* ld R8, <#[R10 + 112]> */
		/* 821E7FB4h case    2:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + 0x00000070) );
		/* 821E7FB4h case    2:*/		return 0x821E7FB8;
		  /* 821E7FB8h */ case    3:  		/* extsw R10, R28 */
		/* 821E7FB8h case    3:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R28);
		/* 821E7FB8h case    3:*/		return 0x821E7FBC;
		  /* 821E7FBCh */ case    4:  		/* subfic R11, R11, 40 */
		/* 821E7FBCh case    4:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821E7FBCh case    4:*/		return 0x821E7FC0;
		  /* 821E7FC0h */ case    5:  		/* and R7, R8, R30 */
		/* 821E7FC0h case    5:*/		cpu::op::and<0>(regs,&regs.R7,regs.R8,regs.R30);
		/* 821E7FC0h case    5:*/		return 0x821E7FC4;
		  /* 821E7FC4h */ case    6:  		/* extsw R11, R11 */
		/* 821E7FC4h case    6:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E7FC4h case    6:*/		return 0x821E7FC8;
		  /* 821E7FC8h */ case    7:  		/* mulld R10, R7, R10 */
		/* 821E7FC8h case    7:*/		cpu::op::mulld<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 821E7FC8h case    7:*/		return 0x821E7FCC;
		  /* 821E7FCCh */ case    8:  		/* sld R11, R9, R11 */
		/* 821E7FCCh case    8:*/		cpu::op::sld<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821E7FCCh case    8:*/		return 0x821E7FD0;
		  /* 821E7FD0h */ case    9:  		/* add R11, R11, R10 */
		/* 821E7FD0h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E7FD0h case    9:*/		return 0x821E7FD4;
		  /* 821E7FD4h */ case   10:  		/* and R10, R8, R31 */
		/* 821E7FD4h case   10:*/		cpu::op::and<0>(regs,&regs.R10,regs.R8,regs.R31);
		/* 821E7FD4h case   10:*/		return 0x821E7FD8;
		  /* 821E7FD8h */ case   11:  		/* b 40 */
		/* 821E7FD8h case   11:*/		return 0x821E8000;
		/* 821E7FD8h case   11:*/		return 0x821E7FDC;
	}
	return 0x821E7FDC;
} // Block from 821E7FACh-821E7FDCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E7FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E7FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E7FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E7FDC);
		  /* 821E7FDCh */ case    0:  		/* lwz R11, <#[R10 + 32]> */
		/* 821E7FDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000020) );
		/* 821E7FDCh case    0:*/		return 0x821E7FE0;
		  /* 821E7FE0h */ case    1:  		/* rldicl R9, R3, 0, 32 */
		/* 821E7FE0h case    1:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R3);
		/* 821E7FE0h case    1:*/		return 0x821E7FE4;
		  /* 821E7FE4h */ case    2:  		/* ld R10, <#[R10 + 112]> */
		/* 821E7FE4h case    2:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R10 + 0x00000070) );
		/* 821E7FE4h case    2:*/		return 0x821E7FE8;
		  /* 821E7FE8h */ case    3:  		/* extsw R8, R28 */
		/* 821E7FE8h case    3:*/		cpu::op::extsw<0>(regs,&regs.R8,regs.R28);
		/* 821E7FE8h case    3:*/		return 0x821E7FEC;
		  /* 821E7FECh */ case    4:  		/* subfic R11, R11, 40 */
		/* 821E7FECh case    4:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821E7FECh case    4:*/		return 0x821E7FF0;
		  /* 821E7FF0h */ case    5:  		/* and R10, R10, R30 */
		/* 821E7FF0h case    5:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 821E7FF0h case    5:*/		return 0x821E7FF4;
		  /* 821E7FF4h */ case    6:  		/* extsw R11, R11 */
		/* 821E7FF4h case    6:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 821E7FF4h case    6:*/		return 0x821E7FF8;
		  /* 821E7FF8h */ case    7:  		/* mulld R10, R10, R8 */
		/* 821E7FF8h case    7:*/		cpu::op::mulld<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821E7FF8h case    7:*/		return 0x821E7FFC;
		  /* 821E7FFCh */ case    8:  		/* sld R11, R9, R11 */
		/* 821E7FFCh case    8:*/		cpu::op::sld<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821E7FFCh case    8:*/		return 0x821E8000;
	}
	return 0x821E8000;
} // Block from 821E7FDCh-821E8000h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E8000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8000);
		  /* 821E8000h */ case    0:  		/* add R3, R11, R10 */
		/* 821E8000h case    0:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 821E8000h case    0:*/		return 0x821E8004;
	}
	return 0x821E8004;
} // Block from 821E8000h-821E8004h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E8004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8004);
		  /* 821E8004h */ case    0:  		/* b -1404268 */
		/* 821E8004h case    0:*/		return 0x82091298;
		/* 821E8004h case    0:*/		return 0x821E8008;
	}
	return 0x821E8008;
} // Block from 821E8004h-821E8008h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E8008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8008);
		  /* 821E8008h */ case    0:  		/* mfspr R12, LR */
		/* 821E8008h case    0:*/		regs.R12 = regs.LR;
		/* 821E8008h case    0:*/		return 0x821E800C;
		  /* 821E800Ch */ case    1:  		/* bl -1404368 */
		/* 821E800Ch case    1:*/		regs.LR = 0x821E8010; return 0x8209123C;
		/* 821E800Ch case    1:*/		return 0x821E8010;
		  /* 821E8010h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821E8010h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821E8010h case    2:*/		return 0x821E8014;
		  /* 821E8014h */ case    3:  		/* mr R27, R7 */
		/* 821E8014h case    3:*/		regs.R27 = regs.R7;
		/* 821E8014h case    3:*/		return 0x821E8018;
		  /* 821E8018h */ case    4:  		/* lwz R31, <#[R5 + 120]> */
		/* 821E8018h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R5 + 0x00000078) );
		/* 821E8018h case    4:*/		return 0x821E801C;
		  /* 821E801Ch */ case    5:  		/* rlwinm R7, R3, 0, 1, 8 */
		/* 821E801Ch case    5:*/		cpu::op::rlwinm<0,0,1,8>(regs,&regs.R7,regs.R3);
		/* 821E801Ch case    5:*/		return 0x821E8020;
		  /* 821E8020h */ case    6:  		/* mr R22, R9 */
		/* 821E8020h case    6:*/		regs.R22 = regs.R9;
		/* 821E8020h case    6:*/		return 0x821E8024;
		  /* 821E8024h */ case    7:  		/* addis R11, R7, -16256 */
		/* 821E8024h case    7:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R7,0xFFFFC080);
		/* 821E8024h case    7:*/		return 0x821E8028;
		  /* 821E8028h */ case    8:  		/* xoris R9, R31, 511 */
		/* 821E8028h case    8:*/		cpu::op::xoris<0>(regs,&regs.R9,regs.R31,0x1FF);
		/* 821E8028h case    8:*/		return 0x821E802C;
		  /* 821E802Ch */ case    9:  		/* mr R24, R8 */
		/* 821E802Ch case    9:*/		regs.R24 = regs.R8;
		/* 821E802Ch case    9:*/		return 0x821E8030;
		  /* 821E8030h */ case   10:  		/* li R21, 1 */
		/* 821E8030h case   10:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821E8030h case   10:*/		return 0x821E8034;
		  /* 821E8034h */ case   11:  		/* srawi. R11, R11, 23 */
		/* 821E8034h case   11:*/		cpu::op::srawi<1,23>(regs,&regs.R11,regs.R11);
		/* 821E8034h case   11:*/		return 0x821E8038;
		  /* 821E8038h */ case   12:  		/* xori R9, R9, 65535 */
		/* 821E8038h case   12:*/		cpu::op::xori<0>(regs,&regs.R9,regs.R9,0xFFFF);
		/* 821E8038h case   12:*/		return 0x821E803C;
		  /* 821E803Ch */ case   13:  		/* bc 4, CR0_LT, 52 */
		/* 821E803Ch case   13:*/		if ( !regs.CR[0].lt ) { return 0x821E8070;  }
		/* 821E803Ch case   13:*/		return 0x821E8040;
		  /* 821E8040h */ case   14:  		/* cmpwi CR6, R11, -25 */
		/* 821E8040h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFE7);
		/* 821E8040h case   14:*/		return 0x821E8044;
		  /* 821E8044h */ case   15:  		/* bc 4, CR6_LT, 12 */
		/* 821E8044h case   15:*/		if ( !regs.CR[6].lt ) { return 0x821E8050;  }
		/* 821E8044h case   15:*/		return 0x821E8048;
		  /* 821E8048h */ case   16:  		/* li R11, 0 */
		/* 821E8048h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E8048h case   16:*/		return 0x821E804C;
		  /* 821E804Ch */ case   17:  		/* b 52 */
		/* 821E804Ch case   17:*/		return 0x821E8080;
		/* 821E804Ch case   17:*/		return 0x821E8050;
	}
	return 0x821E8050;
} // Block from 821E8008h-821E8050h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821E8050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8050);
		  /* 821E8050h */ case    0:  		/* srawi R8, R11, 31 */
		/* 821E8050h case    0:*/		cpu::op::srawi<0,31>(regs,&regs.R8,regs.R11);
		/* 821E8050h case    0:*/		return 0x821E8054;
		  /* 821E8054h */ case    1:  		/* mr R4, R3 */
		/* 821E8054h case    1:*/		regs.R4 = regs.R3;
		/* 821E8054h case    1:*/		return 0x821E8058;
		  /* 821E8058h */ case    2:  		/* xor R11, R11, R8 */
		/* 821E8058h case    2:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821E8058h case    2:*/		return 0x821E805C;
		  /* 821E805Ch */ case    3:  		/* rlwimi R4, R21, 23, 0, 8 */
		/* 821E805Ch case    3:*/		cpu::op::rlwimi<0,23,0,8>(regs,&regs.R4,regs.R21);
		/* 821E805Ch case    3:*/		return 0x821E8060;
		  /* 821E8060h */ case    4:  		/* subf R11, R8, R11 */
		/* 821E8060h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821E8060h case    4:*/		return 0x821E8064;
		  /* 821E8064h */ case    5:  		/* addi R11, R11, -1 */
		/* 821E8064h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E8064h case    5:*/		return 0x821E8068;
		  /* 821E8068h */ case    6:  		/* sraw R11, R4, R11 */
		/* 821E8068h case    6:*/		cpu::op::sraw<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 821E8068h case    6:*/		return 0x821E806C;
		  /* 821E806Ch */ case    7:  		/* b 20 */
		/* 821E806Ch case    7:*/		return 0x821E8080;
		/* 821E806Ch case    7:*/		return 0x821E8070;
	}
	return 0x821E8070;
} // Block from 821E8050h-821E8070h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E8070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8070);
		  /* 821E8070h */ case    0:  		/* mr R8, R3 */
		/* 821E8070h case    0:*/		regs.R8 = regs.R3;
		/* 821E8070h case    0:*/		return 0x821E8074;
		  /* 821E8074h */ case    1:  		/* addi R11, R11, 1 */
		/* 821E8074h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E8074h case    1:*/		return 0x821E8078;
		  /* 821E8078h */ case    2:  		/* rlwimi R8, R21, 23, 0, 8 */
		/* 821E8078h case    2:*/		cpu::op::rlwimi<0,23,0,8>(regs,&regs.R8,regs.R21);
		/* 821E8078h case    2:*/		return 0x821E807C;
		  /* 821E807Ch */ case    3:  		/* slw R11, R8, R11 */
		/* 821E807Ch case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821E807Ch case    3:*/		return 0x821E8080;
	}
	return 0x821E8080;
} // Block from 821E8070h-821E8080h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E8080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8080);
		  /* 821E8080h */ case    0:  		/* lwz R29, <#[R1 + 276]> */
		/* 821E8080h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000114) );
		/* 821E8080h case    0:*/		return 0x821E8084;
		  /* 821E8084h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821E8084h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E8084h case    1:*/		return 0x821E8088;
		  /* 821E8088h */ case    2:  		/* bc 4, CR6_EQ, 236 */
		/* 821E8088h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E8174;  }
		/* 821E8088h case    2:*/		return 0x821E808C;
		  /* 821E808Ch */ case    3:  		/* lis R8, 16406 */
		/* 821E808Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0x4016);
		/* 821E808Ch case    3:*/		return 0x821E8090;
		  /* 821E8090h */ case    4:  		/* cmpwi CR6, R6, 23 */
		/* 821E8090h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000017);
		/* 821E8090h case    4:*/		return 0x821E8094;
		  /* 821E8094h */ case    5:  		/* rlwinm R4, R3, 0, 1, 31 */
		/* 821E8094h case    5:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R4,regs.R3);
		/* 821E8094h case    5:*/		return 0x821E8098;
		  /* 821E8098h */ case    6:  		/* ori R8, R8, 52195 */
		/* 821E8098h case    6:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0xCBE3);
		/* 821E8098h case    6:*/		return 0x821E809C;
		  /* 821E809Ch */ case    7:  		/* bc 4, CR6_EQ, 92 */
		/* 821E809Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821E80F8;  }
		/* 821E809Ch case    7:*/		return 0x821E80A0;
		  /* 821E80A0h */ case    8:  		/* rlwinm R23, R3, 0, 0, 0 */
		/* 821E80A0h case    8:*/		cpu::op::rlwinm<0,0,0,0>(regs,&regs.R23,regs.R3);
		/* 821E80A0h case    8:*/		return 0x821E80A4;
		  /* 821E80A4h */ case    9:  		/* cmpw CR6, R4, R8 */
		/* 821E80A4h case    9:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R8);
		/* 821E80A4h case    9:*/		return 0x821E80A8;
		  /* 821E80A8h */ case   10:  		/* bc 4, CR6_GT, 16 */
		/* 821E80A8h case   10:*/		if ( !regs.CR[6].gt ) { return 0x821E80B8;  }
		/* 821E80A8h case   10:*/		return 0x821E80AC;
		  /* 821E80ACh */ case   11:  		/* lis R8, 804 */
		/* 821E80ACh case   11:*/		cpu::op::lis<0>(regs,&regs.R8,0x324);
		/* 821E80ACh case   11:*/		return 0x821E80B0;
		  /* 821E80B0h */ case   12:  		/* ori R8, R8, 16234 */
		/* 821E80B0h case   12:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x3F6A);
		/* 821E80B0h case   12:*/		return 0x821E80B4;
		  /* 821E80B4h */ case   13:  		/* b 168 */
		/* 821E80B4h case   13:*/		return 0x821E815C;
		/* 821E80B4h case   13:*/		return 0x821E80B8;
	}
	return 0x821E80B8;
} // Block from 821E8080h-821E80B8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E80B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E80B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E80B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E80B8);
		  /* 821E80B8h */ case    0:  		/* lis R8, 16329 */
		/* 821E80B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0x3FC9);
		/* 821E80B8h case    0:*/		return 0x821E80BC;
		  /* 821E80BCh */ case    1:  		/* ori R8, R8, 4058 */
		/* 821E80BCh case    1:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0xFDA);
		/* 821E80BCh case    1:*/		return 0x821E80C0;
		  /* 821E80C0h */ case    2:  		/* cmpw CR6, R4, R8 */
		/* 821E80C0h case    2:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R8);
		/* 821E80C0h case    2:*/		return 0x821E80C4;
		  /* 821E80C4h */ case    3:  		/* bc 4, CR6_GT, 16 */
		/* 821E80C4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E80D4;  }
		/* 821E80C4h case    3:*/		return 0x821E80C8;
		  /* 821E80C8h */ case    4:  		/* addis R11, R11, -402 */
		/* 821E80C8h case    4:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R11,0xFFFFFE6E);
		/* 821E80C8h case    4:*/		return 0x821E80CC;
		  /* 821E80CCh */ case    5:  		/* addi R11, R11, -8117 */
		/* 821E80CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFE04B);
		/* 821E80CCh case    5:*/		return 0x821E80D0;
		  /* 821E80D0h */ case    6:  		/* b 64 */
		/* 821E80D0h case    6:*/		return 0x821E8110;
		/* 821E80D0h case    6:*/		return 0x821E80D4;
	}
	return 0x821E80D4;
} // Block from 821E80B8h-821E80D4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E80D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E80D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E80D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E80D4);
		  /* 821E80D4h */ case    0:  		/* lis R8, 16201 */
		/* 821E80D4h case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0x3F49);
		/* 821E80D4h case    0:*/		return 0x821E80D8;
		  /* 821E80D8h */ case    1:  		/* ori R8, R8, 4058 */
		/* 821E80D8h case    1:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0xFDA);
		/* 821E80D8h case    1:*/		return 0x821E80DC;
		  /* 821E80DCh */ case    2:  		/* cmpw CR6, R4, R8 */
		/* 821E80DCh case    2:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R8);
		/* 821E80DCh case    2:*/		return 0x821E80E0;
		  /* 821E80E0h */ case    3:  		/* bc 4, CR6_GT, 16 */
		/* 821E80E0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E80F0;  }
		/* 821E80E0h case    3:*/		return 0x821E80E4;
		  /* 821E80E4h */ case    4:  		/* lis R8, 402 */
		/* 821E80E4h case    4:*/		cpu::op::lis<0>(regs,&regs.R8,0x192);
		/* 821E80E4h case    4:*/		return 0x821E80E8;
		  /* 821E80E8h */ case    5:  		/* ori R8, R8, 8117 */
		/* 821E80E8h case    5:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1FB5);
		/* 821E80E8h case    5:*/		return 0x821E80EC;
		  /* 821E80ECh */ case    6:  		/* b 32 */
		/* 821E80ECh case    6:*/		return 0x821E810C;
		/* 821E80ECh case    6:*/		return 0x821E80F0;
	}
	return 0x821E80F0;
} // Block from 821E80D4h-821E80F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E80F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E80F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E80F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E80F0);
		  /* 821E80F0h */ case    0:  		/* li R28, 23 */
		/* 821E80F0h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x17);
		/* 821E80F0h case    0:*/		return 0x821E80F4;
		  /* 821E80F4h */ case    1:  		/* b 136 */
		/* 821E80F4h case    1:*/		return 0x821E817C;
		/* 821E80F4h case    1:*/		return 0x821E80F8;
	}
	return 0x821E80F8;
} // Block from 821E80F0h-821E80F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E80F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E80F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E80F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E80F8);
		  /* 821E80F8h */ case    0:  		/* cmpw CR6, R4, R8 */
		/* 821E80F8h case    0:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R8);
		/* 821E80F8h case    0:*/		return 0x821E80FC;
		  /* 821E80FCh */ case    1:  		/* bc 4, CR6_GT, 32 */
		/* 821E80FCh case    1:*/		if ( !regs.CR[6].gt ) { return 0x821E811C;  }
		/* 821E80FCh case    1:*/		return 0x821E8100;
		  /* 821E8100h */ case    2:  		/* lis R8, 804 */
		/* 821E8100h case    2:*/		cpu::op::lis<0>(regs,&regs.R8,0x324);
		/* 821E8100h case    2:*/		return 0x821E8104;
		  /* 821E8104h */ case    3:  		/* lis R23, -32768 */
		/* 821E8104h case    3:*/		cpu::op::lis<0>(regs,&regs.R23,0xFFFF8000);
		/* 821E8104h case    3:*/		return 0x821E8108;
		  /* 821E8108h */ case    4:  		/* ori R8, R8, 16234 */
		/* 821E8108h case    4:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x3F6A);
		/* 821E8108h case    4:*/		return 0x821E810C;
	}
	return 0x821E810C;
} // Block from 821E80F8h-821E810Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E810Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E810C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E810C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E810C);
		  /* 821E810Ch */ case    0:  		/* subf R11, R11, R8 */
		/* 821E810Ch case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821E810Ch case    0:*/		return 0x821E8110;
	}
	return 0x821E8110;
} // Block from 821E810Ch-821E8110h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E8110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8110);
		  /* 821E8110h */ case    0:  		/* li R28, 24 */
		/* 821E8110h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x18);
		/* 821E8110h case    0:*/		return 0x821E8114;
		  /* 821E8114h */ case    1:  		/* oris R11, R11, 256 */
		/* 821E8114h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821E8114h case    1:*/		return 0x821E8118;
		  /* 821E8118h */ case    2:  		/* b 100 */
		/* 821E8118h case    2:*/		return 0x821E817C;
		/* 821E8118h case    2:*/		return 0x821E811C;
	}
	return 0x821E811C;
} // Block from 821E8110h-821E811Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E811Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E811C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E811C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E811C);
		  /* 821E811Ch */ case    0:  		/* lis R8, 16329 */
		/* 821E811Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0x3FC9);
		/* 821E811Ch case    0:*/		return 0x821E8120;
		  /* 821E8120h */ case    1:  		/* ori R8, R8, 4058 */
		/* 821E8120h case    1:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0xFDA);
		/* 821E8120h case    1:*/		return 0x821E8124;
		  /* 821E8124h */ case    2:  		/* cmpw CR6, R4, R8 */
		/* 821E8124h case    2:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R8);
		/* 821E8124h case    2:*/		return 0x821E8128;
		  /* 821E8128h */ case    3:  		/* bc 4, CR6_GT, 24 */
		/* 821E8128h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E8140;  }
		/* 821E8128h case    3:*/		return 0x821E812C;
		  /* 821E812Ch */ case    4:  		/* addis R11, R11, -402 */
		/* 821E812Ch case    4:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R11,0xFFFFFE6E);
		/* 821E812Ch case    4:*/		return 0x821E8130;
		  /* 821E8130h */ case    5:  		/* li R28, 23 */
		/* 821E8130h case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x17);
		/* 821E8130h case    5:*/		return 0x821E8134;
		  /* 821E8134h */ case    6:  		/* addi R11, R11, -8117 */
		/* 821E8134h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFE04B);
		/* 821E8134h case    6:*/		return 0x821E8138;
		  /* 821E8138h */ case    7:  		/* lis R23, -32768 */
		/* 821E8138h case    7:*/		cpu::op::lis<0>(regs,&regs.R23,0xFFFF8000);
		/* 821E8138h case    7:*/		return 0x821E813C;
		  /* 821E813Ch */ case    8:  		/* b 64 */
		/* 821E813Ch case    8:*/		return 0x821E817C;
		/* 821E813Ch case    8:*/		return 0x821E8140;
	}
	return 0x821E8140;
} // Block from 821E811Ch-821E8140h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E8140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8140);
		  /* 821E8140h */ case    0:  		/* lis R8, 16201 */
		/* 821E8140h case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0x3F49);
		/* 821E8140h case    0:*/		return 0x821E8144;
		  /* 821E8144h */ case    1:  		/* li R23, 0 */
		/* 821E8144h case    1:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821E8144h case    1:*/		return 0x821E8148;
		  /* 821E8148h */ case    2:  		/* ori R8, R8, 4058 */
		/* 821E8148h case    2:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0xFDA);
		/* 821E8148h case    2:*/		return 0x821E814C;
		  /* 821E814Ch */ case    3:  		/* cmpw CR6, R4, R8 */
		/* 821E814Ch case    3:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R8);
		/* 821E814Ch case    3:*/		return 0x821E8150;
		  /* 821E8150h */ case    4:  		/* bc 4, CR6_GT, 24 */
		/* 821E8150h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821E8168;  }
		/* 821E8150h case    4:*/		return 0x821E8154;
		  /* 821E8154h */ case    5:  		/* lis R8, 402 */
		/* 821E8154h case    5:*/		cpu::op::lis<0>(regs,&regs.R8,0x192);
		/* 821E8154h case    5:*/		return 0x821E8158;
		  /* 821E8158h */ case    6:  		/* ori R8, R8, 8117 */
		/* 821E8158h case    6:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1FB5);
		/* 821E8158h case    6:*/		return 0x821E815C;
	}
	return 0x821E815C;
} // Block from 821E8140h-821E815Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E815Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E815C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E815C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E815C);
		  /* 821E815Ch */ case    0:  		/* li R28, 23 */
		/* 821E815Ch case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x17);
		/* 821E815Ch case    0:*/		return 0x821E8160;
		  /* 821E8160h */ case    1:  		/* subf R11, R11, R8 */
		/* 821E8160h case    1:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821E8160h case    1:*/		return 0x821E8164;
		  /* 821E8164h */ case    2:  		/* b 24 */
		/* 821E8164h case    2:*/		return 0x821E817C;
		/* 821E8164h case    2:*/		return 0x821E8168;
	}
	return 0x821E8168;
} // Block from 821E815Ch-821E8168h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E8168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8168);
		  /* 821E8168h */ case    0:  		/* oris R11, R11, 256 */
		/* 821E8168h case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821E8168h case    0:*/		return 0x821E816C;
		  /* 821E816Ch */ case    1:  		/* li R28, 24 */
		/* 821E816Ch case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x18);
		/* 821E816Ch case    1:*/		return 0x821E8170;
		  /* 821E8170h */ case    2:  		/* b 12 */
		/* 821E8170h case    2:*/		return 0x821E817C;
		/* 821E8170h case    2:*/		return 0x821E8174;
	}
	return 0x821E8174;
} // Block from 821E8168h-821E8174h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E8174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8174);
		  /* 821E8174h */ case    0:  		/* mr R28, R6 */
		/* 821E8174h case    0:*/		regs.R28 = regs.R6;
		/* 821E8174h case    0:*/		return 0x821E8178;
		  /* 821E8178h */ case    1:  		/* li R23, 0 */
		/* 821E8178h case    1:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821E8178h case    1:*/		return 0x821E817C;
	}
	return 0x821E817C;
} // Block from 821E8174h-821E817Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E817Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E817C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E817C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E817C);
		  /* 821E817Ch */ case    0:  		/* lis R4, 16457 */
		/* 821E817Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x4049);
		/* 821E817Ch case    0:*/		return 0x821E8180;
		  /* 821E8180h */ case    1:  		/* rlwinm R8, R3, 0, 1, 31 */
		/* 821E8180h case    1:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R8,regs.R3);
		/* 821E8180h case    1:*/		return 0x821E8184;
		  /* 821E8184h */ case    2:  		/* ori R4, R4, 4058 */
		/* 821E8184h case    2:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0xFDA);
		/* 821E8184h case    2:*/		return 0x821E8188;
		  /* 821E8188h */ case    3:  		/* cntlzw R7, R7 */
		/* 821E8188h case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R7,regs.R7);
		/* 821E8188h case    3:*/		return 0x821E818C;
		  /* 821E818Ch */ case    4:  		/* subfc R3, R8, R4 */
		/* 821E818Ch case    4:*/		cpu::op::subfc<0>(regs,&regs.R3,regs.R8,regs.R4);
		/* 821E818Ch case    4:*/		return 0x821E8190;
		  /* 821E8190h */ case    5:  		/* eqv R8, R8, R4 */
		/* 821E8190h case    5:*/		cpu::op::eqv<0>(regs,&regs.R8,regs.R8,regs.R4);
		/* 821E8190h case    5:*/		return 0x821E8194;
		  /* 821E8194h */ case    6:  		/* rlwinm R7, R7, 27, 31, 31 */
		/* 821E8194h case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R7,regs.R7);
		/* 821E8194h case    6:*/		return 0x821E8198;
		  /* 821E8198h */ case    7:  		/* rlwinm R8, R8, 1, 31, 31 */
		/* 821E8198h case    7:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R8,regs.R8);
		/* 821E8198h case    7:*/		return 0x821E819C;
		  /* 821E819Ch */ case    8:  		/* addze R8, R8 */
		/* 821E819Ch case    8:*/		cpu::op::addze<0>(regs,&regs.R8,regs.R8);
		/* 821E819Ch case    8:*/		return 0x821E81A0;
		  /* 821E81A0h */ case    9:  		/* rlwinm R8, R8, 0, 31, 31 */
		/* 821E81A0h case    9:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R8);
		/* 821E81A0h case    9:*/		return 0x821E81A4;
		  /* 821E81A4h */ case   10:  		/* or. R8, R7, R8 */
		/* 821E81A4h case   10:*/		cpu::op::or<1>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821E81A4h case   10:*/		return 0x821E81A8;
		  /* 821E81A8h */ case   11:  		/* bc 12, CR0_EQ, 32 */
		/* 821E81A8h case   11:*/		if ( regs.CR[0].eq ) { return 0x821E81C8;  }
		/* 821E81A8h case   11:*/		return 0x821E81AC;
		  /* 821E81ACh */ case   12:  		/* cmpwi CR6, R6, 23 */
		/* 821E81ACh case   12:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000017);
		/* 821E81ACh case   12:*/		return 0x821E81B0;
		  /* 821E81B0h */ case   13:  		/* bc 4, CR6_EQ, 12 */
		/* 821E81B0h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821E81BC;  }
		/* 821E81B0h case   13:*/		return 0x821E81B4;
		  /* 821E81B4h */ case   14:  		/* mr R25, R21 */
		/* 821E81B4h case   14:*/		regs.R25 = regs.R21;
		/* 821E81B4h case   14:*/		return 0x821E81B8;
		  /* 821E81B8h */ case   15:  		/* b 20 */
		/* 821E81B8h case   15:*/		return 0x821E81CC;
		/* 821E81B8h case   15:*/		return 0x821E81BC;
	}
	return 0x821E81BC;
} // Block from 821E817Ch-821E81BCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E81BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E81BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E81BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E81BC);
		  /* 821E81BCh */ case    0:  		/* li R25, 0 */
		/* 821E81BCh case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821E81BCh case    0:*/		return 0x821E81C0;
		  /* 821E81C0h */ case    1:  		/* mr R26, R21 */
		/* 821E81C0h case    1:*/		regs.R26 = regs.R21;
		/* 821E81C0h case    1:*/		return 0x821E81C4;
		  /* 821E81C4h */ case    2:  		/* b 12 */
		/* 821E81C4h case    2:*/		return 0x821E81D0;
		/* 821E81C4h case    2:*/		return 0x821E81C8;
	}
	return 0x821E81C8;
} // Block from 821E81BCh-821E81C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E81C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E81C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E81C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E81C8);
		  /* 821E81C8h */ case    0:  		/* li R25, 0 */
		/* 821E81C8h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821E81C8h case    0:*/		return 0x821E81CC;
	}
	return 0x821E81CC;
} // Block from 821E81C8h-821E81CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E81CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E81CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E81CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E81CC);
		  /* 821E81CCh */ case    0:  		/* li R26, 0 */
		/* 821E81CCh case    0:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821E81CCh case    0:*/		return 0x821E81D0;
	}
	return 0x821E81D0;
} // Block from 821E81CCh-821E81D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E81D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E81D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E81D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E81D0);
		  /* 821E81D0h */ case    0:  		/* and R7, R11, R9 */
		/* 821E81D0h case    0:*/		cpu::op::and<0>(regs,&regs.R7,regs.R11,regs.R9);
		/* 821E81D0h case    0:*/		return 0x821E81D4;
		  /* 821E81D4h */ case    1:  		/* lwz R9, <#[R5 + 124]> */
		/* 821E81D4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x0000007C) );
		/* 821E81D4h case    1:*/		return 0x821E81D8;
		  /* 821E81D8h */ case    2:  		/* and R11, R31, R11 */
		/* 821E81D8h case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821E81D8h case    2:*/		return 0x821E81DC;
		  /* 821E81DCh */ case    3:  		/* lwz R4, <#[R5 + 60]> */
		/* 821E81DCh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000003C) );
		/* 821E81DCh case    3:*/		return 0x821E81E0;
		  /* 821E81E0h */ case    4:  		/* mr R8, R7 */
		/* 821E81E0h case    4:*/		regs.R8 = regs.R7;
		/* 821E81E0h case    4:*/		return 0x821E81E4;
		  /* 821E81E4h */ case    5:  		/* sraw R30, R11, R9 */
		/* 821E81E4h case    5:*/		cpu::op::sraw<0>(regs,&regs.R30,regs.R11,regs.R9);
		/* 821E81E4h case    5:*/		return 0x821E81E8;
		  /* 821E81E8h */ case    6:  		/* mr R9, R7 */
		/* 821E81E8h case    6:*/		regs.R9 = regs.R7;
		/* 821E81E8h case    6:*/		return 0x821E81EC;
		  /* 821E81ECh */ case    7:  		/* cmpwi CR6, R4, 0 */
		/* 821E81ECh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 821E81ECh case    7:*/		return 0x821E81F0;
		  /* 821E81F0h */ case    8:  		/* bc 4, CR6_LT, 24 */
		/* 821E81F0h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821E8208;  }
		/* 821E81F0h case    8:*/		return 0x821E81F4;
		  /* 821E81F4h */ case    9:  		/* srawi R11, R4, 31 */
		/* 821E81F4h case    9:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R4);
		/* 821E81F4h case    9:*/		return 0x821E81F8;
		  /* 821E81F8h */ case   10:  		/* xor R4, R4, R11 */
		/* 821E81F8h case   10:*/		cpu::op::xor<0>(regs,&regs.R4,regs.R4,regs.R11);
		/* 821E81F8h case   10:*/		return 0x821E81FC;
		  /* 821E81FCh */ case   11:  		/* subf R11, R11, R4 */
		/* 821E81FCh case   11:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 821E81FCh case   11:*/		return 0x821E8200;
		  /* 821E8200h */ case   12:  		/* slw R7, R7, R11 */
		/* 821E8200h case   12:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R11);
		/* 821E8200h case   12:*/		return 0x821E8204;
		  /* 821E8204h */ case   13:  		/* b 40 */
		/* 821E8204h case   13:*/		return 0x821E822C;
		/* 821E8204h case   13:*/		return 0x821E8208;
	}
	return 0x821E8208;
} // Block from 821E81D0h-821E8208h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E8208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8208);
		  /* 821E8208h */ case    0:  		/* li R11, 0 */
		/* 821E8208h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E8208h case    0:*/		return 0x821E820C;
		  /* 821E820Ch */ case    1:  		/* cmpwi CR6, R4, 0 */
		/* 821E820Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 821E820Ch case    1:*/		return 0x821E8210;
		  /* 821E8210h */ case    2:  		/* bc 4, CR6_GT, 28 */
		/* 821E8210h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821E822C;  }
		/* 821E8210h case    2:*/		return 0x821E8214;
		  /* 821E8214h */ case    3:  		/* rlwinm R3, R7, 31, 1, 31 */
		/* 821E8214h case    3:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R3,regs.R7);
		/* 821E8214h case    3:*/		return 0x821E8218;
		  /* 821E8218h */ case    4:  		/* rlwinm R7, R7, 0, 31, 31 */
		/* 821E8218h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R7,regs.R7);
		/* 821E8218h case    4:*/		return 0x821E821C;
		  /* 821E821Ch */ case    5:  		/* addi R11, R11, 1 */
		/* 821E821Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E821Ch case    5:*/		return 0x821E8220;
		  /* 821E8220h */ case    6:  		/* or R7, R3, R7 */
		/* 821E8220h case    6:*/		cpu::op::or<0>(regs,&regs.R7,regs.R3,regs.R7);
		/* 821E8220h case    6:*/		return 0x821E8224;
		  /* 821E8224h */ case    7:  		/* cmpw CR6, R11, R4 */
		/* 821E8224h case    7:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R4);
		/* 821E8224h case    7:*/		return 0x821E8228;
		  /* 821E8228h */ case    8:  		/* bc 12, CR6_LT, -20 */
		/* 821E8228h case    8:*/		if ( regs.CR[6].lt ) { return 0x821E8214;  }
		/* 821E8228h case    8:*/		return 0x821E822C;
	}
	return 0x821E822C;
} // Block from 821E8208h-821E822Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E822Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E822C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E822C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E822C);
		  /* 821E822Ch */ case    0:  		/* lwz R11, <#[R5 + 64]> */
		/* 821E822Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000040) );
		/* 821E822Ch case    0:*/		return 0x821E8230;
		  /* 821E8230h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821E8230h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821E8230h case    1:*/		return 0x821E8234;
		  /* 821E8234h */ case    2:  		/* bc 4, CR6_LT, 24 */
		/* 821E8234h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821E824C;  }
		/* 821E8234h case    2:*/		return 0x821E8238;
		  /* 821E8238h */ case    3:  		/* srawi R4, R11, 31 */
		/* 821E8238h case    3:*/		cpu::op::srawi<0,31>(regs,&regs.R4,regs.R11);
		/* 821E8238h case    3:*/		return 0x821E823C;
		  /* 821E823Ch */ case    4:  		/* xor R11, R11, R4 */
		/* 821E823Ch case    4:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 821E823Ch case    4:*/		return 0x821E8240;
		  /* 821E8240h */ case    5:  		/* subf R11, R4, R11 */
		/* 821E8240h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 821E8240h case    5:*/		return 0x821E8244;
		  /* 821E8244h */ case    6:  		/* slw R8, R8, R11 */
		/* 821E8244h case    6:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 821E8244h case    6:*/		return 0x821E8248;
		  /* 821E8248h */ case    7:  		/* b 40 */
		/* 821E8248h case    7:*/		return 0x821E8270;
		/* 821E8248h case    7:*/		return 0x821E824C;
	}
	return 0x821E824C;
} // Block from 821E822Ch-821E824Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E824Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E824C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E824C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E824C);
		  /* 821E824Ch */ case    0:  		/* li R4, 0 */
		/* 821E824Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E824Ch case    0:*/		return 0x821E8250;
		  /* 821E8250h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821E8250h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821E8250h case    1:*/		return 0x821E8254;
		  /* 821E8254h */ case    2:  		/* bc 4, CR6_GT, 28 */
		/* 821E8254h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821E8270;  }
		/* 821E8254h case    2:*/		return 0x821E8258;
		  /* 821E8258h */ case    3:  		/* rlwinm R3, R8, 31, 1, 31 */
		/* 821E8258h case    3:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R3,regs.R8);
		/* 821E8258h case    3:*/		return 0x821E825C;
		  /* 821E825Ch */ case    4:  		/* rlwinm R8, R8, 0, 31, 31 */
		/* 821E825Ch case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R8);
		/* 821E825Ch case    4:*/		return 0x821E8260;
		  /* 821E8260h */ case    5:  		/* addi R4, R4, 1 */
		/* 821E8260h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 821E8260h case    5:*/		return 0x821E8264;
		  /* 821E8264h */ case    6:  		/* or R8, R3, R8 */
		/* 821E8264h case    6:*/		cpu::op::or<0>(regs,&regs.R8,regs.R3,regs.R8);
		/* 821E8264h case    6:*/		return 0x821E8268;
		  /* 821E8268h */ case    7:  		/* cmpw CR6, R4, R11 */
		/* 821E8268h case    7:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R11);
		/* 821E8268h case    7:*/		return 0x821E826C;
		  /* 821E826Ch */ case    8:  		/* bc 12, CR6_LT, -20 */
		/* 821E826Ch case    8:*/		if ( regs.CR[6].lt ) { return 0x821E8258;  }
		/* 821E826Ch case    8:*/		return 0x821E8270;
	}
	return 0x821E8270;
} // Block from 821E824Ch-821E8270h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E8270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8270);
		  /* 821E8270h */ case    0:  		/* lwz R11, <#[R5 + 68]> */
		/* 821E8270h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000044) );
		/* 821E8270h case    0:*/		return 0x821E8274;
		  /* 821E8274h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821E8274h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821E8274h case    1:*/		return 0x821E8278;
		  /* 821E8278h */ case    2:  		/* bc 4, CR6_LT, 24 */
		/* 821E8278h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821E8290;  }
		/* 821E8278h case    2:*/		return 0x821E827C;
		  /* 821E827Ch */ case    3:  		/* srawi R4, R11, 31 */
		/* 821E827Ch case    3:*/		cpu::op::srawi<0,31>(regs,&regs.R4,regs.R11);
		/* 821E827Ch case    3:*/		return 0x821E8280;
		  /* 821E8280h */ case    4:  		/* xor R11, R11, R4 */
		/* 821E8280h case    4:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 821E8280h case    4:*/		return 0x821E8284;
		  /* 821E8284h */ case    5:  		/* subf R11, R4, R11 */
		/* 821E8284h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 821E8284h case    5:*/		return 0x821E8288;
		  /* 821E8288h */ case    6:  		/* slw R9, R9, R11 */
		/* 821E8288h case    6:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821E8288h case    6:*/		return 0x821E828C;
		  /* 821E828Ch */ case    7:  		/* b 40 */
		/* 821E828Ch case    7:*/		return 0x821E82B4;
		/* 821E828Ch case    7:*/		return 0x821E8290;
	}
	return 0x821E8290;
} // Block from 821E8270h-821E8290h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E8290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8290);
		  /* 821E8290h */ case    0:  		/* li R4, 0 */
		/* 821E8290h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E8290h case    0:*/		return 0x821E8294;
		  /* 821E8294h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821E8294h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821E8294h case    1:*/		return 0x821E8298;
		  /* 821E8298h */ case    2:  		/* bc 4, CR6_GT, 28 */
		/* 821E8298h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821E82B4;  }
		/* 821E8298h case    2:*/		return 0x821E829C;
		  /* 821E829Ch */ case    3:  		/* rlwinm R3, R9, 31, 1, 31 */
		/* 821E829Ch case    3:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R3,regs.R9);
		/* 821E829Ch case    3:*/		return 0x821E82A0;
		  /* 821E82A0h */ case    4:  		/* rlwinm R9, R9, 0, 31, 31 */
		/* 821E82A0h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821E82A0h case    4:*/		return 0x821E82A4;
		  /* 821E82A4h */ case    5:  		/* addi R4, R4, 1 */
		/* 821E82A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 821E82A4h case    5:*/		return 0x821E82A8;
		  /* 821E82A8h */ case    6:  		/* or R9, R3, R9 */
		/* 821E82A8h case    6:*/		cpu::op::or<0>(regs,&regs.R9,regs.R3,regs.R9);
		/* 821E82A8h case    6:*/		return 0x821E82AC;
		  /* 821E82ACh */ case    7:  		/* cmpw CR6, R4, R11 */
		/* 821E82ACh case    7:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R11);
		/* 821E82ACh case    7:*/		return 0x821E82B0;
		  /* 821E82B0h */ case    8:  		/* bc 12, CR6_LT, -20 */
		/* 821E82B0h case    8:*/		if ( regs.CR[6].lt ) { return 0x821E829C;  }
		/* 821E82B0h case    8:*/		return 0x821E82B4;
	}
	return 0x821E82B4;
} // Block from 821E8290h-821E82B4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E82B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E82B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E82B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E82B4);
		  /* 821E82B4h */ case    0:  		/* rlwinm R31, R30, 2, 0, 29 */
		/* 821E82B4h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R30);
		/* 821E82B4h case    0:*/		return 0x821E82B8;
		  /* 821E82B8h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821E82B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E82B8h case    1:*/		return 0x821E82BC;
		  /* 821E82BCh */ case    2:  		/* lwzx R3, <#[R31 + R27]> */
		/* 821E82BCh case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + regs.R27 + 0x00000000) );
		/* 821E82BCh case    2:*/		return 0x821E82C0;
		  /* 821E82C0h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 821E82C0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E82DC;  }
		/* 821E82C0h case    3:*/		return 0x821E82C4;
		  /* 821E82C4h */ case    4:  		/* mulli R11, R30, 12 */
		/* 821E82C4h case    4:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0xC);
		/* 821E82C4h case    4:*/		return 0x821E82C8;
		  /* 821E82C8h */ case    5:  		/* add R11, R11, R29 */
		/* 821E82C8h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 821E82C8h case    5:*/		return 0x821E82CC;
		  /* 821E82CCh */ case    6:  		/* lwz R4, <#[R11]> */
		/* 821E82CCh case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821E82CCh case    6:*/		return 0x821E82D0;
		  /* 821E82D0h */ case    7:  		/* lwz R30, <#[R11 + 4]> */
		/* 821E82D0h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821E82D0h case    7:*/		return 0x821E82D4;
		  /* 821E82D4h */ case    8:  		/* lwz R29, <#[R11 + 8]> */
		/* 821E82D4h case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 821E82D4h case    8:*/		return 0x821E82D8;
		  /* 821E82D8h */ case    9:  		/* b 16 */
		/* 821E82D8h case    9:*/		return 0x821E82E8;
		/* 821E82D8h case    9:*/		return 0x821E82DC;
	}
	return 0x821E82DC;
} // Block from 821E82B4h-821E82DCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E82DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E82DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E82DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E82DC);
		  /* 821E82DCh */ case    0:  		/* li R4, 0 */
		/* 821E82DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E82DCh case    0:*/		return 0x821E82E0;
		  /* 821E82E0h */ case    1:  		/* li R30, 0 */
		/* 821E82E0h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821E82E0h case    1:*/		return 0x821E82E4;
		  /* 821E82E4h */ case    2:  		/* li R29, 0 */
		/* 821E82E4h case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821E82E4h case    2:*/		return 0x821E82E8;
	}
	return 0x821E82E8;
} // Block from 821E82DCh-821E82E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E82E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E82E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E82E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E82E8);
		  /* 821E82E8h */ case    0:  		/* lwzx R11, <#[R31 + R24]> */
		/* 821E82E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R24 + 0x00000000) );
		/* 821E82E8h case    0:*/		return 0x821E82EC;
		  /* 821E82ECh */ case    1:  		/* cmpwi CR6, R28, 23 */
		/* 821E82ECh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000017);
		/* 821E82ECh case    1:*/		return 0x821E82F0;
		  /* 821E82F0h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821E82F0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E82FC;  }
		/* 821E82F0h case    2:*/		return 0x821E82F4;
		  /* 821E82F4h */ case    3:  		/* subf R4, R4, R11 */
		/* 821E82F4h case    3:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R4,regs.R11);
		/* 821E82F4h case    3:*/		return 0x821E82F8;
		  /* 821E82F8h */ case    4:  		/* b 8 */
		/* 821E82F8h case    4:*/		return 0x821E8300;
		/* 821E82F8h case    4:*/		return 0x821E82FC;
	}
	return 0x821E82FC;
} // Block from 821E82E8h-821E82FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E82FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E82FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E82FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E82FC);
		  /* 821E82FCh */ case    0:  		/* add R4, R11, R4 */
		/* 821E82FCh case    0:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R4);
		/* 821E82FCh case    0:*/		return 0x821E8300;
	}
	return 0x821E8300;
} // Block from 821E82FCh-821E8300h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E8300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8300);
		  /* 821E8300h */ case    0:  		/* addi R11, R6, -24 */
		/* 821E8300h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFE8);
		/* 821E8300h case    0:*/		return 0x821E8304;
		  /* 821E8304h */ case    1:  		/* addi R6, R6, -23 */
		/* 821E8304h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0xFFFFFFE9);
		/* 821E8304h case    1:*/		return 0x821E8308;
		  /* 821E8308h */ case    2:  		/* cntlzw R11, R11 */
		/* 821E8308h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821E8308h case    2:*/		return 0x821E830C;
		  /* 821E830Ch */ case    3:  		/* cntlzw R6, R6 */
		/* 821E830Ch case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R6,regs.R6);
		/* 821E830Ch case    3:*/		return 0x821E8310;
		  /* 821E8310h */ case    4:  		/* rlwinm R27, R11, 27, 31, 31 */
		/* 821E8310h case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R27,regs.R11);
		/* 821E8310h case    4:*/		return 0x821E8314;
		  /* 821E8314h */ case    5:  		/* rlwinm R6, R6, 27, 31, 31 */
		/* 821E8314h case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R6,regs.R6);
		/* 821E8314h case    5:*/		return 0x821E8318;
		  /* 821E8318h */ case    6:  		/* li R11, 0 */
		/* 821E8318h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E8318h case    6:*/		return 0x821E831C;
		  /* 821E831Ch */ case    7:  		/* or. R27, R27, R6 */
		/* 821E831Ch case    7:*/		cpu::op::or<1>(regs,&regs.R27,regs.R27,regs.R6);
		/* 821E831Ch case    7:*/		return 0x821E8320;
		  /* 821E8320h */ case    8:  		/* li R6, 0 */
		/* 821E8320h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E8320h case    8:*/		return 0x821E8324;
		  /* 821E8324h */ case    9:  		/* bc 12, CR0_EQ, 32 */
		/* 821E8324h case    9:*/		if ( regs.CR[0].eq ) { return 0x821E8344;  }
		/* 821E8324h case    9:*/		return 0x821E8328;
		  /* 821E8328h */ case   10:  		/* lwzx R11, <#[R31 + R22]> */
		/* 821E8328h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R22 + 0x00000000) );
		/* 821E8328h case   10:*/		return 0x821E832C;
		  /* 821E832Ch */ case   11:  		/* cmpwi CR6, R28, 23 */
		/* 821E832Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000017);
		/* 821E832Ch case   11:*/		return 0x821E8330;
		  /* 821E8330h */ case   12:  		/* lwzx R10, <#[R31 + R10]> */
		/* 821E8330h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 821E8330h case   12:*/		return 0x821E8334;
		  /* 821E8334h */ case   13:  		/* add R11, R11, R30 */
		/* 821E8334h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821E8334h case   13:*/		return 0x821E8338;
		  /* 821E8338h */ case   14:  		/* add R6, R10, R29 */
		/* 821E8338h case   14:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R29);
		/* 821E8338h case   14:*/		return 0x821E833C;
		  /* 821E833Ch */ case   15:  		/* bc 12, CR6_EQ, 8 */
		/* 821E833Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821E8344;  }
		/* 821E833Ch case   15:*/		return 0x821E8340;
		  /* 821E8340h */ case   16:  		/* subf R6, R29, R10 */
		/* 821E8340h case   16:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R29,regs.R10);
		/* 821E8340h case   16:*/		return 0x821E8344;
	}
	return 0x821E8344;
} // Block from 821E8300h-821E8344h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E8344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8344);
		  /* 821E8344h */ case    0:  		/* mr R10, R5 */
		/* 821E8344h case    0:*/		regs.R10 = regs.R5;
		/* 821E8344h case    0:*/		return 0x821E8348;
		  /* 821E8348h */ case    1:  		/* stw R28, <#[R1 + 84]> */
		/* 821E8348h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 821E8348h case    1:*/		return 0x821E834C;
		  /* 821E834Ch */ case    2:  		/* mr R5, R11 */
		/* 821E834Ch case    2:*/		regs.R5 = regs.R11;
		/* 821E834Ch case    2:*/		return 0x821E8350;
		  /* 821E8350h */ case    3:  		/* bl -1624 */
		/* 821E8350h case    3:*/		regs.LR = 0x821E8354; return 0x821E7CF8;
		/* 821E8350h case    3:*/		return 0x821E8354;
		  /* 821E8354h */ case    4:  		/* sradi R11, R3, 12 */
		/* 821E8354h case    4:*/		cpu::op::sradi<0,12>(regs,&regs.R11,regs.R3);
		/* 821E8354h case    4:*/		return 0x821E8358;
		  /* 821E8358h */ case    5:  		/* extsw. R11, R11 */
		/* 821E8358h case    5:*/		cpu::op::extsw<1>(regs,&regs.R11,regs.R11);
		/* 821E8358h case    5:*/		return 0x821E835C;
		  /* 821E835Ch */ case    6:  		/* li R10, 127 */
		/* 821E835Ch case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x7F);
		/* 821E835Ch case    6:*/		return 0x821E8360;
		  /* 821E8360h */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 821E8360h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E8388;  }
		/* 821E8360h case    7:*/		return 0x821E8364;
		  /* 821E8364h */ case    8:  		/* rlwinm. R9, R11, 0, 4, 4 */
		/* 821E8364h case    8:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R9,regs.R11);
		/* 821E8364h case    8:*/		return 0x821E8368;
		  /* 821E8368h */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 821E8368h case    9:*/		if ( regs.CR[0].eq ) { return 0x821E8374;  }
		/* 821E8368h case    9:*/		return 0x821E836C;
		  /* 821E836Ch */ case   10:  		/* mr R26, R21 */
		/* 821E836Ch case   10:*/		regs.R26 = regs.R21;
		/* 821E836Ch case   10:*/		return 0x821E8370;
		  /* 821E8370h */ case   11:  		/* b 28 */
		/* 821E8370h case   11:*/		return 0x821E838C;
		/* 821E8370h case   11:*/		return 0x821E8374;
	}
	return 0x821E8374;
} // Block from 821E8344h-821E8374h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E8374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8374);
		  /* 821E8374h */ case    0:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821E8374h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821E8374h case    0:*/		return 0x821E8378;
		  /* 821E8378h */ case    1:  		/* addi R10, R10, -1 */
		/* 821E8378h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821E8378h case    1:*/		return 0x821E837C;
		  /* 821E837Ch */ case    2:  		/* rlwinm. R9, R11, 0, 4, 4 */
		/* 821E837Ch case    2:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R9,regs.R11);
		/* 821E837Ch case    2:*/		return 0x821E8380;
		  /* 821E8380h */ case    3:  		/* bc 12, CR0_EQ, -12 */
		/* 821E8380h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E8374;  }
		/* 821E8380h case    3:*/		return 0x821E8384;
		  /* 821E8384h */ case    4:  		/* b 8 */
		/* 821E8384h case    4:*/		return 0x821E838C;
		/* 821E8384h case    4:*/		return 0x821E8388;
	}
	return 0x821E8388;
} // Block from 821E8374h-821E8388h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E8388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8388);
		  /* 821E8388h */ case    0:  		/* li R10, 103 */
		/* 821E8388h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x67);
		/* 821E8388h case    0:*/		return 0x821E838C;
	}
	return 0x821E838C;
} // Block from 821E8388h-821E838Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E838Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E838C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E838C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E838C);
		  /* 821E838Ch */ case    0:  		/* cmpwi CR6, R25, 1 */
		/* 821E838Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000001);
		/* 821E838Ch case    0:*/		return 0x821E8390;
		  /* 821E8390h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821E8390h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E839C;  }
		/* 821E8390h case    1:*/		return 0x821E8394;
		  /* 821E8394h */ case    2:  		/* li R3, 0 */
		/* 821E8394h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821E8394h case    2:*/		return 0x821E8398;
		  /* 821E8398h */ case    3:  		/* b 36 */
		/* 821E8398h case    3:*/		return 0x821E83BC;
		/* 821E8398h case    3:*/		return 0x821E839C;
	}
	return 0x821E839C;
} // Block from 821E838Ch-821E839Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E839Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E839C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E839C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E839C);
		  /* 821E839Ch */ case    0:  		/* cmpwi CR6, R26, 1 */
		/* 821E839Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 821E839Ch case    0:*/		return 0x821E83A0;
		  /* 821E83A0h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821E83A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E83AC;  }
		/* 821E83A0h case    1:*/		return 0x821E83A4;
		  /* 821E83A4h */ case    2:  		/* oris R3, R23, 16256 */
		/* 821E83A4h case    2:*/		cpu::op::oris<0>(regs,&regs.R3,regs.R23,0x3F80);
		/* 821E83A4h case    2:*/		return 0x821E83A8;
		  /* 821E83A8h */ case    3:  		/* b 20 */
		/* 821E83A8h case    3:*/		return 0x821E83BC;
		/* 821E83A8h case    3:*/		return 0x821E83AC;
	}
	return 0x821E83AC;
} // Block from 821E839Ch-821E83ACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E83ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E83AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E83AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E83AC);
		  /* 821E83ACh */ case    0:  		/* srawi R11, R11, 4 */
		/* 821E83ACh case    0:*/		cpu::op::srawi<0,4>(regs,&regs.R11,regs.R11);
		/* 821E83ACh case    0:*/		return 0x821E83B0;
		  /* 821E83B0h */ case    1:  		/* rlwimi R11, R10, 23, 1, 8 */
		/* 821E83B0h case    1:*/		cpu::op::rlwimi<0,23,1,8>(regs,&regs.R11,regs.R10);
		/* 821E83B0h case    1:*/		return 0x821E83B4;
		  /* 821E83B4h */ case    2:  		/* rlwinm R11, R11, 0, 1, 31 */
		/* 821E83B4h case    2:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R11,regs.R11);
		/* 821E83B4h case    2:*/		return 0x821E83B8;
		  /* 821E83B8h */ case    3:  		/* or R3, R11, R23 */
		/* 821E83B8h case    3:*/		cpu::op::or<0>(regs,&regs.R3,regs.R11,regs.R23);
		/* 821E83B8h case    3:*/		return 0x821E83BC;
	}
	return 0x821E83BC;
} // Block from 821E83ACh-821E83BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E83BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E83BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E83BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E83BC);
		  /* 821E83BCh */ case    0:  		/* addi R1, R1, 192 */
		/* 821E83BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821E83BCh case    0:*/		return 0x821E83C0;
		  /* 821E83C0h */ case    1:  		/* b -1405236 */
		/* 821E83C0h case    1:*/		return 0x8209128C;
		/* 821E83C0h case    1:*/		return 0x821E83C4;
		  /* 821E83C4h */ case    2:  		/* nop */
		/* 821E83C4h case    2:*/		cpu::op::nop();
		/* 821E83C4h case    2:*/		return 0x821E83C8;
	}
	return 0x821E83C8;
} // Block from 821E83BCh-821E83C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E83C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E83C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E83C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E83C8);
		  /* 821E83C8h */ case    0:  		/* mfspr R12, LR */
		/* 821E83C8h case    0:*/		regs.R12 = regs.LR;
		/* 821E83C8h case    0:*/		return 0x821E83CC;
		  /* 821E83CCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821E83CCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821E83CCh case    1:*/		return 0x821E83D0;
		  /* 821E83D0h */ case    2:  		/* stfd FR31, <#[R1 - 16]> */
		/* 821E83D0h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E83D0h case    2:*/		return 0x821E83D4;
		  /* 821E83D4h */ case    3:  		/* stwu R1, <#[R1 - 128]> */
		/* 821E83D4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821E83D4h case    3:*/		return 0x821E83D8;
		  /* 821E83D8h */ case    4:  		/* fmr FR31, FR1 */
		/* 821E83D8h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821E83D8h case    4:*/		return 0x821E83DC;
		  /* 821E83DCh */ case    5:  		/* bl -1377188 */
		/* 821E83DCh case    5:*/		regs.LR = 0x821E83E0; return 0x82098038;
		/* 821E83DCh case    5:*/		return 0x821E83E0;
		  /* 821E83E0h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 821E83E0h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821E83E0h case    6:*/		return 0x821E83E4;
		  /* 821E83E4h */ case    7:  		/* bc 4, CR0_GT, 36 */
		/* 821E83E4h case    7:*/		if ( !regs.CR[0].gt ) { return 0x821E8408;  }
		/* 821E83E4h case    7:*/		return 0x821E83E8;
		  /* 821E83E8h */ case    8:  		/* cmpwi CR6, R3, 2 */
		/* 821E83E8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 821E83E8h case    8:*/		return 0x821E83EC;
		  /* 821E83ECh */ case    9:  		/* bc 4, CR6_GT, 20 */
		/* 821E83ECh case    9:*/		if ( !regs.CR[6].gt ) { return 0x821E8400;  }
		/* 821E83ECh case    9:*/		return 0x821E83F0;
		  /* 821E83F0h */ case   10:  		/* cmpwi CR6, R3, 4 */
		/* 821E83F0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 821E83F0h case   10:*/		return 0x821E83F4;
		  /* 821E83F4h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 821E83F4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821E8400;  }
		/* 821E83F4h case   11:*/		return 0x821E83F8;
		  /* 821E83F8h */ case   12:  		/* cmpwi CR6, R3, 512 */
		/* 821E83F8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000200);
		/* 821E83F8h case   12:*/		return 0x821E83FC;
		  /* 821E83FCh */ case   13:  		/* bc 4, CR6_EQ, 12 */
		/* 821E83FCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x821E8408;  }
		/* 821E83FCh case   13:*/		return 0x821E8400;
	}
	return 0x821E8400;
} // Block from 821E83C8h-821E8400h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E8400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8400);
		  /* 821E8400h */ case    0:  		/* bl -5456 */
		/* 821E8400h case    0:*/		regs.LR = 0x821E8404; return 0x821E6EB0;
		/* 821E8400h case    0:*/		return 0x821E8404;
		  /* 821E8404h */ case    1:  		/* b 76 */
		/* 821E8404h case    1:*/		return 0x821E8450;
		/* 821E8404h case    1:*/		return 0x821E8408;
	}
	return 0x821E8408;
} // Block from 821E8400h-821E8408h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E8408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8408);
		  /* 821E8408h */ case    0:  		/* frsp FR0, FR31 */
		/* 821E8408h case    0:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR31);
		/* 821E8408h case    0:*/		return 0x821E840C;
		  /* 821E840Ch */ case    1:  		/* stfs FR0, <#[R1 + 96]> */
		/* 821E840Ch case    1:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 821E840Ch case    1:*/		return 0x821E8410;
		  /* 821E8410h */ case    2:  		/* lwz R3, <#[R1 + 96]> */
		/* 821E8410h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 821E8410h case    2:*/		return 0x821E8414;
		  /* 821E8414h */ case    3:  		/* lis R11, -32252 */
		/* 821E8414h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821E8414h case    3:*/		return 0x821E8418;
		  /* 821E8418h */ case    4:  		/* lis R10, -32215 */
		/* 821E8418h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 821E8418h case    4:*/		return 0x821E841C;
		  /* 821E841Ch */ case    5:  		/* addi R7, R11, -15760 */
		/* 821E841Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFC270);
		/* 821E841Ch case    5:*/		return 0x821E8420;
		  /* 821E8420h */ case    6:  		/* li R5, 0 */
		/* 821E8420h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E8420h case    6:*/		return 0x821E8424;
		  /* 821E8424h */ case    7:  		/* addi R11, R10, -26024 */
		/* 821E8424h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFF9A58);
		/* 821E8424h case    7:*/		return 0x821E8428;
		  /* 821E8428h */ case    8:  		/* stw R5, <#[R1 + 84]> */
		/* 821E8428h case    8:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821E8428h case    8:*/		return 0x821E842C;
		  /* 821E842Ch */ case    9:  		/* addi R10, R7, 768 */
		/* 821E842Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R7,0x300);
		/* 821E842Ch case    9:*/		return 0x821E8430;
		  /* 821E8430h */ case   10:  		/* addi R9, R7, 512 */
		/* 821E8430h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x200);
		/* 821E8430h case   10:*/		return 0x821E8434;
		  /* 821E8434h */ case   11:  		/* addi R8, R7, 256 */
		/* 821E8434h case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R7,0x100);
		/* 821E8434h case   11:*/		return 0x821E8438;
		  /* 821E8438h */ case   12:  		/* li R6, 23 */
		/* 821E8438h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x17);
		/* 821E8438h case   12:*/		return 0x821E843C;
		  /* 821E843Ch */ case   13:  		/* addi R5, R11, 128 */
		/* 821E843Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x80);
		/* 821E843Ch case   13:*/		return 0x821E8440;
		  /* 821E8440h */ case   14:  		/* li R4, 5 */
		/* 821E8440h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 821E8440h case   14:*/		return 0x821E8444;
		  /* 821E8444h */ case   15:  		/* bl -1084 */
		/* 821E8444h case   15:*/		regs.LR = 0x821E8448; return 0x821E8008;
		/* 821E8444h case   15:*/		return 0x821E8448;
		  /* 821E8448h */ case   16:  		/* stw R3, <#[R1 + 96]> */
		/* 821E8448h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 821E8448h case   16:*/		return 0x821E844C;
		  /* 821E844Ch */ case   17:  		/* lfs FR1, <#[R1 + 96]> */
		/* 821E844Ch case   17:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000060) );
		/* 821E844Ch case   17:*/		return 0x821E8450;
	}
	return 0x821E8450;
} // Block from 821E8408h-821E8450h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821E8450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8450);
		  /* 821E8450h */ case    0:  		/* addi R1, R1, 128 */
		/* 821E8450h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821E8450h case    0:*/		return 0x821E8454;
		  /* 821E8454h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821E8454h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821E8454h case    1:*/		return 0x821E8458;
		  /* 821E8458h */ case    2:  		/* mtspr LR, R12 */
		/* 821E8458h case    2:*/		regs.LR = regs.R12;
		/* 821E8458h case    2:*/		return 0x821E845C;
		  /* 821E845Ch */ case    3:  		/* lfd FR31, <#[R1 - 16]> */
		/* 821E845Ch case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E845Ch case    3:*/		return 0x821E8460;
		  /* 821E8460h */ case    4:  		/* bclr 20, CR0_LT */
		/* 821E8460h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821E8460h case    4:*/		return 0x821E8464;
	}
	return 0x821E8464;
} // Block from 821E8450h-821E8464h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E8464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8464);
		  /* 821E8464h */ case    0:  		/* nop */
		/* 821E8464h case    0:*/		cpu::op::nop();
		/* 821E8464h case    0:*/		return 0x821E8468;
	}
	return 0x821E8468;
} // Block from 821E8464h-821E8468h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E8468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8468);
		  /* 821E8468h */ case    0:  		/* mfspr R12, LR */
		/* 821E8468h case    0:*/		regs.R12 = regs.LR;
		/* 821E8468h case    0:*/		return 0x821E846C;
		  /* 821E846Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821E846Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821E846Ch case    1:*/		return 0x821E8470;
		  /* 821E8470h */ case    2:  		/* stfd FR31, <#[R1 - 16]> */
		/* 821E8470h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E8470h case    2:*/		return 0x821E8474;
		  /* 821E8474h */ case    3:  		/* stwu R1, <#[R1 - 128]> */
		/* 821E8474h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821E8474h case    3:*/		return 0x821E8478;
		  /* 821E8478h */ case    4:  		/* fmr FR31, FR1 */
		/* 821E8478h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821E8478h case    4:*/		return 0x821E847C;
		  /* 821E847Ch */ case    5:  		/* bl -1377348 */
		/* 821E847Ch case    5:*/		regs.LR = 0x821E8480; return 0x82098038;
		/* 821E847Ch case    5:*/		return 0x821E8480;
		  /* 821E8480h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 821E8480h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821E8480h case    6:*/		return 0x821E8484;
		  /* 821E8484h */ case    7:  		/* bc 4, CR0_GT, 36 */
		/* 821E8484h case    7:*/		if ( !regs.CR[0].gt ) { return 0x821E84A8;  }
		/* 821E8484h case    7:*/		return 0x821E8488;
		  /* 821E8488h */ case    8:  		/* cmpwi CR6, R3, 2 */
		/* 821E8488h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 821E8488h case    8:*/		return 0x821E848C;
		  /* 821E848Ch */ case    9:  		/* bc 4, CR6_GT, 20 */
		/* 821E848Ch case    9:*/		if ( !regs.CR[6].gt ) { return 0x821E84A0;  }
		/* 821E848Ch case    9:*/		return 0x821E8490;
		  /* 821E8490h */ case   10:  		/* cmpwi CR6, R3, 4 */
		/* 821E8490h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 821E8490h case   10:*/		return 0x821E8494;
		  /* 821E8494h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 821E8494h case   11:*/		if ( regs.CR[6].eq ) { return 0x821E84A0;  }
		/* 821E8494h case   11:*/		return 0x821E8498;
		  /* 821E8498h */ case   12:  		/* cmpwi CR6, R3, 512 */
		/* 821E8498h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000200);
		/* 821E8498h case   12:*/		return 0x821E849C;
		  /* 821E849Ch */ case   13:  		/* bc 4, CR6_EQ, 12 */
		/* 821E849Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x821E84A8;  }
		/* 821E849Ch case   13:*/		return 0x821E84A0;
	}
	return 0x821E84A0;
} // Block from 821E8468h-821E84A0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E84A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E84A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E84A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E84A0);
		  /* 821E84A0h */ case    0:  		/* bl -5616 */
		/* 821E84A0h case    0:*/		regs.LR = 0x821E84A4; return 0x821E6EB0;
		/* 821E84A0h case    0:*/		return 0x821E84A4;
		  /* 821E84A4h */ case    1:  		/* b 72 */
		/* 821E84A4h case    1:*/		return 0x821E84EC;
		/* 821E84A4h case    1:*/		return 0x821E84A8;
	}
	return 0x821E84A8;
} // Block from 821E84A0h-821E84A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E84A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E84A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E84A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E84A8);
		  /* 821E84A8h */ case    0:  		/* frsp FR0, FR31 */
		/* 821E84A8h case    0:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR31);
		/* 821E84A8h case    0:*/		return 0x821E84AC;
		  /* 821E84ACh */ case    1:  		/* stfs FR0, <#[R1 + 96]> */
		/* 821E84ACh case    1:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 821E84ACh case    1:*/		return 0x821E84B0;
		  /* 821E84B0h */ case    2:  		/* lwz R3, <#[R1 + 96]> */
		/* 821E84B0h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 821E84B0h case    2:*/		return 0x821E84B4;
		  /* 821E84B4h */ case    3:  		/* lis R11, -32252 */
		/* 821E84B4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821E84B4h case    3:*/		return 0x821E84B8;
		  /* 821E84B8h */ case    4:  		/* lis R6, -32215 */
		/* 821E84B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8229);
		/* 821E84B8h case    4:*/		return 0x821E84BC;
		  /* 821E84BCh */ case    5:  		/* addi R7, R11, -15760 */
		/* 821E84BCh case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFC270);
		/* 821E84BCh case    5:*/		return 0x821E84C0;
		  /* 821E84C0h */ case    6:  		/* li R11, 0 */
		/* 821E84C0h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E84C0h case    6:*/		return 0x821E84C4;
		  /* 821E84C4h */ case    7:  		/* addi R5, R6, -26024 */
		/* 821E84C4h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R6,0xFFFF9A58);
		/* 821E84C4h case    7:*/		return 0x821E84C8;
		  /* 821E84C8h */ case    8:  		/* addi R10, R7, 768 */
		/* 821E84C8h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R7,0x300);
		/* 821E84C8h case    8:*/		return 0x821E84CC;
		  /* 821E84CCh */ case    9:  		/* stw R11, <#[R1 + 84]> */
		/* 821E84CCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821E84CCh case    9:*/		return 0x821E84D0;
		  /* 821E84D0h */ case   10:  		/* addi R9, R7, 512 */
		/* 821E84D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x200);
		/* 821E84D0h case   10:*/		return 0x821E84D4;
		  /* 821E84D4h */ case   11:  		/* addi R8, R7, 256 */
		/* 821E84D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R7,0x100);
		/* 821E84D4h case   11:*/		return 0x821E84D8;
		  /* 821E84D8h */ case   12:  		/* li R6, 24 */
		/* 821E84D8h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x18);
		/* 821E84D8h case   12:*/		return 0x821E84DC;
		  /* 821E84DCh */ case   13:  		/* li R4, 5 */
		/* 821E84DCh case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 821E84DCh case   13:*/		return 0x821E84E0;
		  /* 821E84E0h */ case   14:  		/* bl -1240 */
		/* 821E84E0h case   14:*/		regs.LR = 0x821E84E4; return 0x821E8008;
		/* 821E84E0h case   14:*/		return 0x821E84E4;
		  /* 821E84E4h */ case   15:  		/* stw R3, <#[R1 + 96]> */
		/* 821E84E4h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 821E84E4h case   15:*/		return 0x821E84E8;
		  /* 821E84E8h */ case   16:  		/* lfs FR1, <#[R1 + 96]> */
		/* 821E84E8h case   16:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000060) );
		/* 821E84E8h case   16:*/		return 0x821E84EC;
	}
	return 0x821E84EC;
} // Block from 821E84A8h-821E84ECh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E84ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E84EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E84EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E84EC);
		  /* 821E84ECh */ case    0:  		/* addi R1, R1, 128 */
		/* 821E84ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821E84ECh case    0:*/		return 0x821E84F0;
		  /* 821E84F0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821E84F0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821E84F0h case    1:*/		return 0x821E84F4;
		  /* 821E84F4h */ case    2:  		/* mtspr LR, R12 */
		/* 821E84F4h case    2:*/		regs.LR = regs.R12;
		/* 821E84F4h case    2:*/		return 0x821E84F8;
		  /* 821E84F8h */ case    3:  		/* lfd FR31, <#[R1 - 16]> */
		/* 821E84F8h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E84F8h case    3:*/		return 0x821E84FC;
		  /* 821E84FCh */ case    4:  		/* bclr 20, CR0_LT */
		/* 821E84FCh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821E84FCh case    4:*/		return 0x821E8500;
	}
	return 0x821E8500;
} // Block from 821E84ECh-821E8500h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E8500h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8500);
		  /* 821E8500h */ case    0:  		/* mfspr R12, LR */
		/* 821E8500h case    0:*/		regs.R12 = regs.LR;
		/* 821E8500h case    0:*/		return 0x821E8504;
		  /* 821E8504h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821E8504h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821E8504h case    1:*/		return 0x821E8508;
		  /* 821E8508h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821E8508h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821E8508h case    2:*/		return 0x821E850C;
		  /* 821E850Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821E850Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E850Ch case    3:*/		return 0x821E8510;
		  /* 821E8510h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821E8510h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821E8510h case    4:*/		return 0x821E8514;
		  /* 821E8514h */ case    5:  		/* lwz R9, <#[R4]> */
		/* 821E8514h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 821E8514h case    5:*/		return 0x821E8518;
		  /* 821E8518h */ case    6:  		/* li R7, 0 */
		/* 821E8518h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E8518h case    6:*/		return 0x821E851C;
		  /* 821E851Ch */ case    7:  		/* li R8, 0 */
		/* 821E851Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E851Ch case    7:*/		return 0x821E8520;
		  /* 821E8520h */ case    8:  		/* li R4, 1 */
		/* 821E8520h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E8520h case    8:*/		return 0x821E8524;
		  /* 821E8524h */ case    9:  		/* cmplwi CR6, R9, 0 */
		/* 821E8524h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E8524h case    9:*/		return 0x821E8528;
		  /* 821E8528h */ case   10:  		/* bc 12, CR6_EQ, 164 */
		/* 821E8528h case   10:*/		if ( regs.CR[6].eq ) { return 0x821E85CC;  }
		/* 821E8528h case   10:*/		return 0x821E852C;
		  /* 821E852Ch */ case   11:  		/* lwz R11, <#[R9 + 12]> */
		/* 821E852Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 821E852Ch case   11:*/		return 0x821E8530;
		  /* 821E8530h */ case   12:  		/* lwz R31, <#[R5 + 40]> */
		/* 821E8530h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R5 + 0x00000028) );
		/* 821E8530h case   12:*/		return 0x821E8534;
		  /* 821E8534h */ case   13:  		/* lwz R11, <#[R11 + 28]> */
		/* 821E8534h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821E8534h case   13:*/		return 0x821E8538;
		  /* 821E8538h */ case   14:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E8538h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E8538h case   14:*/		return 0x821E853C;
		  /* 821E853Ch */ case   15:  		/* rlwinm R30, R10, 0, 13, 31 */
		/* 821E853Ch case   15:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R30,regs.R10);
		/* 821E853Ch case   15:*/		return 0x821E8540;
		  /* 821E8540h */ case   16:  		/* rlwinm R10, R30, 27, 5, 31 */
		/* 821E8540h case   16:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R30);
		/* 821E8540h case   16:*/		return 0x821E8544;
		  /* 821E8544h */ case   17:  		/* rlwinm R30, R30, 0, 27, 31 */
		/* 821E8544h case   17:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R30,regs.R30);
		/* 821E8544h case   17:*/		return 0x821E8548;
		  /* 821E8548h */ case   18:  		/* addi R10, R10, 1 */
		/* 821E8548h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E8548h case   18:*/		return 0x821E854C;
		  /* 821E854Ch */ case   19:  		/* slw R30, R4, R30 */
		/* 821E854Ch case   19:*/		cpu::op::slw<0>(regs,&regs.R30,regs.R4,regs.R30);
		/* 821E854Ch case   19:*/		return 0x821E8550;
		  /* 821E8550h */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E8550h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E8550h case   20:*/		return 0x821E8554;
		  /* 821E8554h */ case   21:  		/* lwzx R10, <#[R10 + R31]> */
		/* 821E8554h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821E8554h case   21:*/		return 0x821E8558;
		  /* 821E8558h */ case   22:  		/* and. R10, R10, R30 */
		/* 821E8558h case   22:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R30);
		/* 821E8558h case   22:*/		return 0x821E855C;
		  /* 821E855Ch */ case   23:  		/* bc 12, CR0_EQ, 96 */
		/* 821E855Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x821E85BC;  }
		/* 821E855Ch case   23:*/		return 0x821E8560;
		  /* 821E8560h */ case   24:  		/* cmplwi CR6, R8, 0 */
		/* 821E8560h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821E8560h case   24:*/		return 0x821E8564;
		  /* 821E8564h */ case   25:  		/* bc 12, CR6_EQ, 48 */
		/* 821E8564h case   25:*/		if ( regs.CR[6].eq ) { return 0x821E8594;  }
		/* 821E8564h case   25:*/		return 0x821E8568;
		  /* 821E8568h */ case   26:  		/* lwz R10, <#[R8 + 48]> */
		/* 821E8568h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000030) );
		/* 821E8568h case   26:*/		return 0x821E856C;
		  /* 821E856Ch */ case   27:  		/* lwz R31, <#[R11 + 40]> */
		/* 821E856Ch case   27:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821E856Ch case   27:*/		return 0x821E8570;
		  /* 821E8570h */ case   28:  		/* rlwinm R30, R10, 0, 13, 31 */
		/* 821E8570h case   28:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R30,regs.R10);
		/* 821E8570h case   28:*/		return 0x821E8574;
		  /* 821E8574h */ case   29:  		/* rlwinm R10, R30, 27, 5, 31 */
		/* 821E8574h case   29:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R30);
		/* 821E8574h case   29:*/		return 0x821E8578;
		  /* 821E8578h */ case   30:  		/* rlwinm R30, R30, 0, 27, 31 */
		/* 821E8578h case   30:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R30,regs.R30);
		/* 821E8578h case   30:*/		return 0x821E857C;
		  /* 821E857Ch */ case   31:  		/* addi R10, R10, 1 */
		/* 821E857Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E857Ch case   31:*/		return 0x821E8580;
		  /* 821E8580h */ case   32:  		/* slw R30, R4, R30 */
		/* 821E8580h case   32:*/		cpu::op::slw<0>(regs,&regs.R30,regs.R4,regs.R30);
		/* 821E8580h case   32:*/		return 0x821E8584;
		  /* 821E8584h */ case   33:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E8584h case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E8584h case   33:*/		return 0x821E8588;
		  /* 821E8588h */ case   34:  		/* lwzx R10, <#[R10 + R31]> */
		/* 821E8588h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821E8588h case   34:*/		return 0x821E858C;
		  /* 821E858Ch */ case   35:  		/* and. R10, R10, R30 */
		/* 821E858Ch case   35:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R30);
		/* 821E858Ch case   35:*/		return 0x821E8590;
		  /* 821E8590h */ case   36:  		/* bc 12, CR0_EQ, 44 */
		/* 821E8590h case   36:*/		if ( regs.CR[0].eq ) { return 0x821E85BC;  }
		/* 821E8590h case   36:*/		return 0x821E8594;
	}
	return 0x821E8594;
} // Block from 821E8500h-821E8594h (37 instructions)

//////////////////////////////////////////////////////
// Block at 821E8594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8594);
		  /* 821E8594h */ case    0:  		/* cmplw CR6, R8, R11 */
		/* 821E8594h case    0:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821E8594h case    0:*/		return 0x821E8598;
		  /* 821E8598h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821E8598h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E85B4;  }
		/* 821E8598h case    1:*/		return 0x821E859C;
		  /* 821E859Ch */ case    2:  		/* cmplw CR6, R9, R6 */
		/* 821E859Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 821E859Ch case    2:*/		return 0x821E85A0;
		  /* 821E85A0h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 821E85A0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821E85AC;  }
		/* 821E85A0h case    3:*/		return 0x821E85A4;
		  /* 821E85A4h */ case    4:  		/* mr R7, R6 */
		/* 821E85A4h case    4:*/		regs.R7 = regs.R6;
		/* 821E85A4h case    4:*/		return 0x821E85A8;
		  /* 821E85A8h */ case    5:  		/* b 20 */
		/* 821E85A8h case    5:*/		return 0x821E85BC;
		/* 821E85A8h case    5:*/		return 0x821E85AC;
	}
	return 0x821E85AC;
} // Block from 821E8594h-821E85ACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E85ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E85AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E85AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E85AC);
		  /* 821E85ACh */ case    0:  		/* cmplw CR6, R7, R6 */
		/* 821E85ACh case    0:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 821E85ACh case    0:*/		return 0x821E85B0;
		  /* 821E85B0h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821E85B0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E85C4;  }
		/* 821E85B0h case    1:*/		return 0x821E85B4;
	}
	return 0x821E85B4;
} // Block from 821E85ACh-821E85B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E85B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E85B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E85B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E85B4);
		  /* 821E85B4h */ case    0:  		/* mr R7, R9 */
		/* 821E85B4h case    0:*/		regs.R7 = regs.R9;
		/* 821E85B4h case    0:*/		return 0x821E85B8;
		  /* 821E85B8h */ case    1:  		/* mr R8, R11 */
		/* 821E85B8h case    1:*/		regs.R8 = regs.R11;
		/* 821E85B8h case    1:*/		return 0x821E85BC;
	}
	return 0x821E85BC;
} // Block from 821E85B4h-821E85BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E85BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E85BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E85BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E85BC);
		  /* 821E85BCh */ case    0:  		/* lwz R9, <#[R9 + 4]> */
		/* 821E85BCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821E85BCh case    0:*/		return 0x821E85C0;
		  /* 821E85C0h */ case    1:  		/* b -156 */
		/* 821E85C0h case    1:*/		return 0x821E8524;
		/* 821E85C0h case    1:*/		return 0x821E85C4;
	}
	return 0x821E85C4;
} // Block from 821E85BCh-821E85C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E85C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E85C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E85C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E85C4);
		  /* 821E85C4h */ case    0:  		/* li R4, 4800 */
		/* 821E85C4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E85C4h case    0:*/		return 0x821E85C8;
		  /* 821E85C8h */ case    1:  		/* bl -616288 */
		/* 821E85C8h case    1:*/		regs.LR = 0x821E85CC; return 0x82151E68;
		/* 821E85C8h case    1:*/		return 0x821E85CC;
	}
	return 0x821E85CC;
} // Block from 821E85C4h-821E85CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E85CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E85CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E85CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E85CC);
		  /* 821E85CCh */ case    0:  		/* mr R3, R7 */
		/* 821E85CCh case    0:*/		regs.R3 = regs.R7;
		/* 821E85CCh case    0:*/		return 0x821E85D0;
		  /* 821E85D0h */ case    1:  		/* addi R1, R1, 112 */
		/* 821E85D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821E85D0h case    1:*/		return 0x821E85D4;
		  /* 821E85D4h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 821E85D4h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821E85D4h case    2:*/		return 0x821E85D8;
		  /* 821E85D8h */ case    3:  		/* mtspr LR, R12 */
		/* 821E85D8h case    3:*/		regs.LR = regs.R12;
		/* 821E85D8h case    3:*/		return 0x821E85DC;
		  /* 821E85DCh */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 821E85DCh case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821E85DCh case    4:*/		return 0x821E85E0;
		  /* 821E85E0h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 821E85E0h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821E85E0h case    5:*/		return 0x821E85E4;
		  /* 821E85E4h */ case    6:  		/* bclr 20, CR0_LT */
		/* 821E85E4h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821E85E4h case    6:*/		return 0x821E85E8;
	}
	return 0x821E85E8;
} // Block from 821E85CCh-821E85E8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E85E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E85E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E85E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E85E8);
		  /* 821E85E8h */ case    0:  		/* lwz R10, <#[R3]> */
		/* 821E85E8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821E85E8h case    0:*/		return 0x821E85EC;
		  /* 821E85ECh */ case    1:  		/* addi R11, R4, 1 */
		/* 821E85ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x1);
		/* 821E85ECh case    1:*/		return 0x821E85F0;
		  /* 821E85F0h */ case    2:  		/* li R3, -1 */
		/* 821E85F0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 821E85F0h case    2:*/		return 0x821E85F4;
		  /* 821E85F4h */ case    3:  		/* nor R9, R10, R10 */
		/* 821E85F4h case    3:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R10,regs.R10);
		/* 821E85F4h case    3:*/		return 0x821E85F8;
		  /* 821E85F8h */ case    4:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 821E85F8h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 821E85F8h case    4:*/		return 0x821E85FC;
		  /* 821E85FCh */ case    5:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821E85FCh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821E85FCh case    5:*/		return 0x821E8600;
		  /* 821E8600h */ case    6:  		/* slw R7, R3, R8 */
		/* 821E8600h case    6:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R3,regs.R8);
		/* 821E8600h case    6:*/		return 0x821E8604;
		  /* 821E8604h */ case    7:  		/* bc 4, CR0_EQ, 32 */
		/* 821E8604h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821E8624;  }
		/* 821E8604h case    7:*/		return 0x821E8608;
		  /* 821E8608h */ case    8:  		/* and. R11, R10, R7 */
		/* 821E8608h case    8:*/		cpu::op::and<1>(regs,&regs.R11,regs.R10,regs.R7);
		/* 821E8608h case    8:*/		return 0x821E860C;
		  /* 821E860Ch */ case    9:  		/* bclr 12, CR0_EQ */
		/* 821E860Ch case    9:*/		if ( regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 821E860Ch case    9:*/		return 0x821E8610;
	}
	return 0x821E8610;
} // Block from 821E85E8h-821E8610h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E8610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8610);
		  /* 821E8610h */ case    0:  		/* addi R10, R11, -1 */
		/* 821E8610h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821E8610h case    0:*/		return 0x821E8614;
		  /* 821E8614h */ case    1:  		/* andc R11, R11, R10 */
		/* 821E8614h case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E8614h case    1:*/		return 0x821E8618;
		  /* 821E8618h */ case    2:  		/* cntlzw R11, R11 */
		/* 821E8618h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821E8618h case    2:*/		return 0x821E861C;
		  /* 821E861Ch */ case    3:  		/* subfic R3, R11, 30 */
		/* 821E861Ch case    3:*/		cpu::op::subfic<0>(regs,&regs.R3,regs.R11,0x1E);
		/* 821E861Ch case    3:*/		return 0x821E8620;
		  /* 821E8620h */ case    4:  		/* bclr 20, CR0_LT */
		/* 821E8620h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821E8620h case    4:*/		return 0x821E8624;
	}
	return 0x821E8624;
} // Block from 821E8610h-821E8624h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E8624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8624);
		  /* 821E8624h */ case    0:  		/* lwz R8, <#[R10]> */
		/* 821E8624h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821E8624h case    0:*/		return 0x821E8628;
		  /* 821E8628h */ case    1:  		/* addi R9, R10, 4 */
		/* 821E8628h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821E8628h case    1:*/		return 0x821E862C;
		  /* 821E862Ch */ case    2:  		/* rlwinm R11, R11, 29, 3, 29 */
		/* 821E862Ch case    2:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R11);
		/* 821E862Ch case    2:*/		return 0x821E8630;
		  /* 821E8630h */ case    3:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821E8630h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821E8630h case    3:*/		return 0x821E8634;
		  /* 821E8634h */ case    4:  		/* add R11, R11, R9 */
		/* 821E8634h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E8634h case    4:*/		return 0x821E8638;
		  /* 821E8638h */ case    5:  		/* add R9, R8, R10 */
		/* 821E8638h case    5:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R10);
		/* 821E8638h case    5:*/		return 0x821E863C;
		  /* 821E863Ch */ case    6:  		/* b 24 */
		/* 821E863Ch case    6:*/		return 0x821E8654;
		/* 821E863Ch case    6:*/		return 0x821E8640;
		  /* 821E8640h */ case    7:  		/* lwz R8, <#[R11]> */
		/* 821E8640h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821E8640h case    7:*/		return 0x821E8644;
		  /* 821E8644h */ case    8:  		/* and. R8, R8, R7 */
		/* 821E8644h case    8:*/		cpu::op::and<1>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821E8644h case    8:*/		return 0x821E8648;
		  /* 821E8648h */ case    9:  		/* bc 4, CR0_EQ, 72 */
		/* 821E8648h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821E8690;  }
		/* 821E8648h case    9:*/		return 0x821E864C;
		  /* 821E864Ch */ case   10:  		/* addi R11, R11, 4 */
		/* 821E864Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E864Ch case   10:*/		return 0x821E8650;
		  /* 821E8650h */ case   11:  		/* mr R7, R3 */
		/* 821E8650h case   11:*/		regs.R7 = regs.R3;
		/* 821E8650h case   11:*/		return 0x821E8654;
	}
	return 0x821E8654;
} // Block from 821E8624h-821E8654h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E8654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8654);
		  /* 821E8654h */ case    0:  		/* cmplw CR6, R11, R9 */
		/* 821E8654h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821E8654h case    0:*/		return 0x821E8658;
		  /* 821E8658h */ case    1:  		/* bc 12, CR6_LT, -24 */
		/* 821E8658h case    1:*/		if ( regs.CR[6].lt ) { return 0x821E8640;  }
		/* 821E8658h case    1:*/		return 0x821E865C;
		  /* 821E865Ch */ case    2:  		/* lwz R11, <#[R9]> */
		/* 821E865Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821E865Ch case    2:*/		return 0x821E8660;
		  /* 821E8660h */ case    3:  		/* and. R11, R11, R7 */
		/* 821E8660h case    3:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R7);
		/* 821E8660h case    3:*/		return 0x821E8664;
		  /* 821E8664h */ case    4:  		/* bclr 12, CR0_EQ */
		/* 821E8664h case    4:*/		if ( regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 821E8664h case    4:*/		return 0x821E8668;
	}
	return 0x821E8668;
} // Block from 821E8654h-821E8668h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E8668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8668);
		  /* 821E8668h */ case    0:  		/* subf R10, R10, R9 */
		/* 821E8668h case    0:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821E8668h case    0:*/		return 0x821E866C;
		  /* 821E866Ch */ case    1:  		/* addi R9, R11, -1 */
		/* 821E866Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821E866Ch case    1:*/		return 0x821E8670;
		  /* 821E8670h */ case    2:  		/* srawi R10, R10, 2 */
		/* 821E8670h case    2:*/		cpu::op::srawi<0,2>(regs,&regs.R10,regs.R10);
		/* 821E8670h case    2:*/		return 0x821E8674;
		  /* 821E8674h */ case    3:  		/* andc R11, R11, R9 */
		/* 821E8674h case    3:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E8674h case    3:*/		return 0x821E8678;
		  /* 821E8678h */ case    4:  		/* addi R10, R10, -1 */
		/* 821E8678h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821E8678h case    4:*/		return 0x821E867C;
		  /* 821E867Ch */ case    5:  		/* cntlzw R11, R11 */
		/* 821E867Ch case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821E867Ch case    5:*/		return 0x821E8680;
		  /* 821E8680h */ case    6:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821E8680h case    6:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821E8680h case    6:*/		return 0x821E8684;
		  /* 821E8684h */ case    7:  		/* subf R11, R11, R10 */
		/* 821E8684h case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E8684h case    7:*/		return 0x821E8688;
		  /* 821E8688h */ case    8:  		/* addi R3, R11, 30 */
		/* 821E8688h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x1E);
		/* 821E8688h case    8:*/		return 0x821E868C;
		  /* 821E868Ch */ case    9:  		/* bclr 20, CR0_LT */
		/* 821E868Ch case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821E868Ch case    9:*/		return 0x821E8690;
	}
	return 0x821E8690;
} // Block from 821E8668h-821E8690h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E8690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8690);
		  /* 821E8690h */ case    0:  		/* subf R11, R10, R11 */
		/* 821E8690h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E8690h case    0:*/		return 0x821E8694;
		  /* 821E8694h */ case    1:  		/* addi R10, R8, -1 */
		/* 821E8694h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0xFFFFFFFF);
		/* 821E8694h case    1:*/		return 0x821E8698;
		  /* 821E8698h */ case    2:  		/* srawi R11, R11, 2 */
		/* 821E8698h case    2:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 821E8698h case    2:*/		return 0x821E869C;
		  /* 821E869Ch */ case    3:  		/* andc R10, R8, R10 */
		/* 821E869Ch case    3:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821E869Ch case    3:*/		return 0x821E86A0;
		  /* 821E86A0h */ case    4:  		/* addi R11, R11, -1 */
		/* 821E86A0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E86A0h case    4:*/		return 0x821E86A4;
		  /* 821E86A4h */ case    5:  		/* cntlzw R10, R10 */
		/* 821E86A4h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821E86A4h case    5:*/		return 0x821E86A8;
		  /* 821E86A8h */ case    6:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821E86A8h case    6:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821E86A8h case    6:*/		return 0x821E86AC;
		  /* 821E86ACh */ case    7:  		/* subf R11, R10, R11 */
		/* 821E86ACh case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E86ACh case    7:*/		return 0x821E86B0;
		  /* 821E86B0h */ case    8:  		/* b -40 */
		/* 821E86B0h case    8:*/		return 0x821E8688;
		/* 821E86B0h case    8:*/		return 0x821E86B4;
		  /* 821E86B4h */ case    9:  		/* nop */
		/* 821E86B4h case    9:*/		cpu::op::nop();
		/* 821E86B4h case    9:*/		return 0x821E86B8;
	}
	return 0x821E86B8;
} // Block from 821E8690h-821E86B8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E86B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E86B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E86B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E86B8);
		  /* 821E86B8h */ case    0:  		/* mfspr R12, LR */
		/* 821E86B8h case    0:*/		regs.R12 = regs.LR;
		/* 821E86B8h case    0:*/		return 0x821E86BC;
		  /* 821E86BCh */ case    1:  		/* bl -1406048 */
		/* 821E86BCh case    1:*/		regs.LR = 0x821E86C0; return 0x8209125C;
		/* 821E86BCh case    1:*/		return 0x821E86C0;
		  /* 821E86C0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821E86C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821E86C0h case    2:*/		return 0x821E86C4;
		  /* 821E86C4h */ case    3:  		/* std R4, <#[R1 + 152]> */
		/* 821E86C4h case    3:*/		cpu::mem::store64( regs, regs.R4, (uint32)(regs.R1 + 0x00000098) );
		/* 821E86C4h case    3:*/		return 0x821E86C8;
		  /* 821E86C8h */ case    4:  		/* mr R31, R5 */
		/* 821E86C8h case    4:*/		regs.R31 = regs.R5;
		/* 821E86C8h case    4:*/		return 0x821E86CC;
		  /* 821E86CCh */ case    5:  		/* lwz R29, <#[R1 + 152]> */
		/* 821E86CCh case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000098) );
		/* 821E86CCh case    5:*/		return 0x821E86D0;
		  /* 821E86D0h */ case    6:  		/* mr R30, R6 */
		/* 821E86D0h case    6:*/		regs.R30 = regs.R6;
		/* 821E86D0h case    6:*/		return 0x821E86D4;
		  /* 821E86D4h */ case    7:  		/* cmplwi CR6, R29, 0 */
		/* 821E86D4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E86D4h case    7:*/		return 0x821E86D8;
		  /* 821E86D8h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 821E86D8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E86E4;  }
		/* 821E86D8h case    8:*/		return 0x821E86DC;
		  /* 821E86DCh */ case    9:  		/* li R3, 0 */
		/* 821E86DCh case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821E86DCh case    9:*/		return 0x821E86E0;
		  /* 821E86E0h */ case   10:  		/* b 324 */
		/* 821E86E0h case   10:*/		return 0x821E8824;
		/* 821E86E0h case   10:*/		return 0x821E86E4;
	}
	return 0x821E86E4;
} // Block from 821E86B8h-821E86E4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E86E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E86E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E86E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E86E4);
		  /* 821E86E4h */ case    0:  		/* lwz R11, <#[R3 + 12]> */
		/* 821E86E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E86E4h case    0:*/		return 0x821E86E8;
		  /* 821E86E8h */ case    1:  		/* mulli R10, R31, 40 */
		/* 821E86E8h case    1:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R31,0x28);
		/* 821E86E8h case    1:*/		return 0x821E86EC;
		  /* 821E86ECh */ case    2:  		/* add R9, R10, R11 */
		/* 821E86ECh case    2:*/		cpu::op::add<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 821E86ECh case    2:*/		return 0x821E86F0;
		  /* 821E86F0h */ case    3:  		/* lwz R11, <#[R9 + 16]> */
		/* 821E86F0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000010) );
		/* 821E86F0h case    3:*/		return 0x821E86F4;
		  /* 821E86F4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E86F4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E86F4h case    4:*/		return 0x821E86F8;
		  /* 821E86F8h */ case    5:  		/* bc 12, CR6_EQ, -28 */
		/* 821E86F8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E86DC;  }
		/* 821E86F8h case    5:*/		return 0x821E86FC;
		  /* 821E86FCh */ case    6:  		/* lwz R11, <#[R3 + 40]> */
		/* 821E86FCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 821E86FCh case    6:*/		return 0x821E8700;
		  /* 821E8700h */ case    7:  		/* andis. R10, R11, 5 */
		/* 821E8700h case    7:*/		cpu::op::andis<1>(regs,&regs.R10,regs.R11,0x5);
		/* 821E8700h case    7:*/		return 0x821E8704;
		  /* 821E8704h */ case    8:  		/* cmplwi CR0, R10, 0 */
		/* 821E8704h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 821E8704h case    8:*/		return 0x821E8708;
		  /* 821E8708h */ case    9:  		/* bc 12, CR0_EQ, 64 */
		/* 821E8708h case    9:*/		if ( regs.CR[0].eq ) { return 0x821E8748;  }
		/* 821E8708h case    9:*/		return 0x821E870C;
		  /* 821E870Ch */ case   10:  		/* rlwinm. R11, R11, 0, 15, 15 */
		/* 821E870Ch case   10:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R11,regs.R11);
		/* 821E870Ch case   10:*/		return 0x821E8710;
		  /* 821E8710h */ case   11:  		/* bc 12, CR0_EQ, 32 */
		/* 821E8710h case   11:*/		if ( regs.CR[0].eq ) { return 0x821E8730;  }
		/* 821E8710h case   11:*/		return 0x821E8714;
		  /* 821E8714h */ case   12:  		/* lwz R11, <#[R3 + 792]> */
		/* 821E8714h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000318) );
		/* 821E8714h case   12:*/		return 0x821E8718;
		  /* 821E8718h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821E8718h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E8718h case   13:*/		return 0x821E871C;
		  /* 821E871Ch */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 821E871Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x821E8724;  }
		/* 821E871Ch case   14:*/		return 0x821E8720;
		  /* 821E8720h */ case   15:  		/* li R11, 32 */
		/* 821E8720h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 821E8720h case   15:*/		return 0x821E8724;
	}
	return 0x821E8724;
} // Block from 821E86E4h-821E8724h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E8724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8724);
		  /* 821E8724h */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821E8724h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821E8724h case    0:*/		return 0x821E8728;
		  /* 821E8728h */ case    1:  		/* bc 12, CR6_LT, 32 */
		/* 821E8728h case    1:*/		if ( regs.CR[6].lt ) { return 0x821E8748;  }
		/* 821E8728h case    1:*/		return 0x821E872C;
		  /* 821E872Ch */ case    2:  		/* b -80 */
		/* 821E872Ch case    2:*/		return 0x821E86DC;
		/* 821E872Ch case    2:*/		return 0x821E8730;
	}
	return 0x821E8730;
} // Block from 821E8724h-821E8730h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E8730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8730);
		  /* 821E8730h */ case    0:  		/* lwz R11, <#[R3 + 600]> */
		/* 821E8730h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000258) );
		/* 821E8730h case    0:*/		return 0x821E8734;
		  /* 821E8734h */ case    1:  		/* cmplw CR6, R31, R11 */
		/* 821E8734h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821E8734h case    1:*/		return 0x821E8738;
		  /* 821E8738h */ case    2:  		/* bc 12, CR6_LT, 16 */
		/* 821E8738h case    2:*/		if ( regs.CR[6].lt ) { return 0x821E8748;  }
		/* 821E8738h case    2:*/		return 0x821E873C;
		  /* 821E873Ch */ case    3:  		/* addi R11, R11, 12 */
		/* 821E873Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821E873Ch case    3:*/		return 0x821E8740;
	}
	return 0x821E8740;
} // Block from 821E8730h-821E8740h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E8740h
// Function '?InitMathEnTables6X@D3DXShader@@YAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8740);
		  /* 821E8740h */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821E8740h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821E8740h case    0:*/		return 0x821E8744;
		  /* 821E8744h */ case    1:  		/* bc 12, CR6_LT, -104 */
		/* 821E8744h case    1:*/		if ( regs.CR[6].lt ) { return 0x821E86DC;  }
		/* 821E8744h case    1:*/		return 0x821E8748;
	}
	return 0x821E8748;
} // Block from 821E8740h-821E8748h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E8748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8748);
		  /* 821E8748h */ case    0:  		/* lwz R10, <#[R1 + 156]> */
		/* 821E8748h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000009C) );
		/* 821E8748h case    0:*/		return 0x821E874C;
		  /* 821E874Ch */ case    1:  		/* rlwinm. R8, R10, 0, 30, 31 */
		/* 821E874Ch case    1:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R8,regs.R10);
		/* 821E874Ch case    1:*/		return 0x821E8750;
		  /* 821E8750h */ case    2:  		/* bc 4, CR0_EQ, 32 */
		/* 821E8750h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E8770;  }
		/* 821E8750h case    2:*/		return 0x821E8754;
		  /* 821E8754h */ case    3:  		/* rlwinm R11, R10, 15, 17, 31 */
		/* 821E8754h case    3:*/		cpu::op::rlwinm<0,15,17,31>(regs,&regs.R11,regs.R10);
		/* 821E8754h case    3:*/		return 0x821E8758;
		  /* 821E8758h */ case    4:  		/* cmplw CR6, R11, R31 */
		/* 821E8758h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821E8758h case    4:*/		return 0x821E875C;
		  /* 821E875Ch */ case    5:  		/* bc 4, CR6_EQ, 120 */
		/* 821E875Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E87D4;  }
		/* 821E875Ch case    5:*/		return 0x821E8760;
		  /* 821E8760h */ case    6:  		/* rlwinm R11, R10, 30, 18, 31 */
		/* 821E8760h case    6:*/		cpu::op::rlwinm<0,30,18,31>(regs,&regs.R11,regs.R10);
		/* 821E8760h case    6:*/		return 0x821E8764;
		  /* 821E8764h */ case    7:  		/* cmplw CR6, R11, R30 */
		/* 821E8764h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821E8764h case    7:*/		return 0x821E8768;
		  /* 821E8768h */ case    8:  		/* bc 4, CR6_EQ, 108 */
		/* 821E8768h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E87D4;  }
		/* 821E8768h case    8:*/		return 0x821E876C;
		  /* 821E876Ch */ case    9:  		/* b -144 */
		/* 821E876Ch case    9:*/		return 0x821E86DC;
		/* 821E876Ch case    9:*/		return 0x821E8770;
	}
	return 0x821E8770;
} // Block from 821E8748h-821E8770h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E8770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8770);
		  /* 821E8770h */ case    0:  		/* cmpwi CR6, R8, 1 */
		/* 821E8770h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000001);
		/* 821E8770h case    0:*/		return 0x821E8774;
		  /* 821E8774h */ case    1:  		/* bc 4, CR6_EQ, 172 */
		/* 821E8774h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E8820;  }
		/* 821E8774h case    1:*/		return 0x821E8778;
		  /* 821E8778h */ case    2:  		/* lwz R11, <#[R9 + 24]> */
		/* 821E8778h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000018) );
		/* 821E8778h case    2:*/		return 0x821E877C;
		  /* 821E877Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821E877Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E877Ch case    3:*/		return 0x821E8780;
		  /* 821E8780h */ case    4:  		/* bc 12, CR6_EQ, 84 */
		/* 821E8780h case    4:*/		if ( regs.CR[6].eq ) { return 0x821E87D4;  }
		/* 821E8780h case    4:*/		return 0x821E8784;
		  /* 821E8784h */ case    5:  		/* lwz R9, <#[R3 + 4]> */
		/* 821E8784h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 821E8784h case    5:*/		return 0x821E8788;
		  /* 821E8788h */ case    6:  		/* rlwinm R6, R9, 0, 31, 31 */
		/* 821E8788h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R6,regs.R9);
		/* 821E8788h case    6:*/		return 0x821E878C;
		  /* 821E878Ch */ case    7:  		/* addic R6, R6, -1 */
		/* 821E878Ch case    7:*/		cpu::op::addic<0>(regs,&regs.R6,regs.R6,0xFFFFFFFF);
		/* 821E878Ch case    7:*/		return 0x821E8790;
		  /* 821E8790h */ case    8:  		/* subfe R6, R6, R6 */
		/* 821E8790h case    8:*/		cpu::op::subfe<0>(regs,&regs.R6,regs.R6,regs.R6);
		/* 821E8790h case    8:*/		return 0x821E8794;
		  /* 821E8794h */ case    9:  		/* and R9, R6, R9 */
		/* 821E8794h case    9:*/		cpu::op::and<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821E8794h case    9:*/		return 0x821E8798;
		  /* 821E8798h */ case   10:  		/* cmplw CR6, R7, R9 */
		/* 821E8798h case   10:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R9);
		/* 821E8798h case   10:*/		return 0x821E879C;
		  /* 821E879Ch */ case   11:  		/* bc 12, CR6_EQ, 56 */
		/* 821E879Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821E87D4;  }
		/* 821E879Ch case   11:*/		return 0x821E87A0;
		  /* 821E87A0h */ case   12:  		/* rlwinm R9, R30, 3, 0, 28 */
		/* 821E87A0h case   12:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R30);
		/* 821E87A0h case   12:*/		return 0x821E87A4;
		  /* 821E87A4h */ case   13:  		/* ldx R11, <#[R9 + R11]> */
		/* 821E87A4h case   13:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821E87A4h case   13:*/		return 0x821E87A8;
		  /* 821E87A8h */ case   14:  		/* std R11, <#[R1 + 80]> */
		/* 821E87A8h case   14:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E87A8h case   14:*/		return 0x821E87AC;
		  /* 821E87ACh */ case   15:  		/* lwz R11, <#[R1 + 84]> */
		/* 821E87ACh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821E87ACh case   15:*/		return 0x821E87B0;
		  /* 821E87B0h */ case   16:  		/* rlwinm R9, R11, 0, 30, 31 */
		/* 821E87B0h case   16:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R11);
		/* 821E87B0h case   16:*/		return 0x821E87B4;
		  /* 821E87B4h */ case   17:  		/* cmpwi CR6, R9, 1 */
		/* 821E87B4h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000001);
		/* 821E87B4h case   17:*/		return 0x821E87B8;
		  /* 821E87B8h */ case   18:  		/* bc 4, CR6_EQ, 28 */
		/* 821E87B8h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821E87D4;  }
		/* 821E87B8h case   18:*/		return 0x821E87BC;
		  /* 821E87BCh */ case   19:  		/* lwz R9, <#[R1 + 80]> */
		/* 821E87BCh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821E87BCh case   19:*/		return 0x821E87C0;
		  /* 821E87C0h */ case   20:  		/* cmplw CR6, R29, R9 */
		/* 821E87C0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R9);
		/* 821E87C0h case   20:*/		return 0x821E87C4;
		  /* 821E87C4h */ case   21:  		/* bc 4, CR6_EQ, 16 */
		/* 821E87C4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821E87D4;  }
		/* 821E87C4h case   21:*/		return 0x821E87C8;
		  /* 821E87C8h */ case   22:  		/* xor R11, R10, R11 */
		/* 821E87C8h case   22:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E87C8h case   22:*/		return 0x821E87CC;
		  /* 821E87CCh */ case   23:  		/* rlwinm. R11, R11, 0, 16, 29 */
		/* 821E87CCh case   23:*/		cpu::op::rlwinm<1,0,16,29>(regs,&regs.R11,regs.R11);
		/* 821E87CCh case   23:*/		return 0x821E87D0;
	}
	return 0x821E87D0;
} // Block from 821E8770h-821E87D0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E87D0h
// Function '?ComputeMantissa6X@D3DXShader@@YA_JIIIIIIIPAUMeParam2@1@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E87D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E87D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E87D0);
		  /* 821E87D0h */ case    0:  		/* bc 12, CR0_EQ, -244 */
		/* 821E87D0h case    0:*/		if ( regs.CR[0].eq ) { return 0x821E86DC;  }
		/* 821E87D0h case    0:*/		return 0x821E87D4;
	}
	return 0x821E87D4;
} // Block from 821E87D0h-821E87D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E87D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E87D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E87D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E87D4);
		  /* 821E87D4h */ case    0:  		/* cmpwi CR6, R8, 1 */
		/* 821E87D4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000001);
		/* 821E87D4h case    0:*/		return 0x821E87D8;
		  /* 821E87D8h */ case    1:  		/* bc 4, CR6_EQ, 72 */
		/* 821E87D8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E8820;  }
		/* 821E87D8h case    1:*/		return 0x821E87DC;
		  /* 821E87DCh */ case    2:  		/* lwz R11, <#[R29 + 8]> */
		/* 821E87DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821E87DCh case    2:*/		return 0x821E87E0;
		  /* 821E87E0h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E87E0h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E87E0h case    3:*/		return 0x821E87E4;
		  /* 821E87E4h */ case    4:  		/* cmplwi CR6, R11, 14336 */
		/* 821E87E4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E87E4h case    4:*/		return 0x821E87E8;
		  /* 821E87E8h */ case    5:  		/* bc 4, CR6_EQ, 56 */
		/* 821E87E8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E8820;  }
		/* 821E87E8h case    5:*/		return 0x821E87EC;
		  /* 821E87ECh */ case    6:  		/* li R6, 1 */
		/* 821E87ECh case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E87ECh case    6:*/		return 0x821E87F0;
		  /* 821E87F0h */ case    7:  		/* li R5, 0 */
		/* 821E87F0h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E87F0h case    7:*/		return 0x821E87F4;
		  /* 821E87F4h */ case    8:  		/* li R4, 112 */
		/* 821E87F4h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x70);
		/* 821E87F4h case    8:*/		return 0x821E87F8;
		  /* 821E87F8h */ case    9:  		/* bl -541640 */
		/* 821E87F8h case    9:*/		regs.LR = 0x821E87FC; return 0x82164430;
		/* 821E87F8h case    9:*/		return 0x821E87FC;
		  /* 821E87FCh */ case   10:  		/* addi R11, R29, -8 */
		/* 821E87FCh case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFF8);
		/* 821E87FCh case   10:*/		return 0x821E8800;
		  /* 821E8800h */ case   11:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821E8800h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821E8800h case   11:*/		return 0x821E8804;
		  /* 821E8804h */ case   12:  		/* rlwinm R10, R11, 0, 17, 31 */
		/* 821E8804h case   12:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R10,regs.R11);
		/* 821E8804h case   12:*/		return 0x821E8808;
		  /* 821E8808h */ case   13:  		/* cmplw CR6, R31, R10 */
		/* 821E8808h case   13:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821E8808h case   13:*/		return 0x821E880C;
		  /* 821E880Ch */ case   14:  		/* bc 4, CR6_EQ, 20 */
		/* 821E880Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x821E8820;  }
		/* 821E880Ch case   14:*/		return 0x821E8810;
		  /* 821E8810h */ case   15:  		/* rlwinm R11, R11, 17, 18, 31 */
		/* 821E8810h case   15:*/		cpu::op::rlwinm<0,17,18,31>(regs,&regs.R11,regs.R11);
		/* 821E8810h case   15:*/		return 0x821E8814;
		  /* 821E8814h */ case   16:  		/* li R3, 0 */
		/* 821E8814h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821E8814h case   16:*/		return 0x821E8818;
		  /* 821E8818h */ case   17:  		/* cmplw CR6, R30, R11 */
		/* 821E8818h case   17:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821E8818h case   17:*/		return 0x821E881C;
		  /* 821E881Ch */ case   18:  		/* bc 12, CR6_EQ, 8 */
		/* 821E881Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x821E8824;  }
		/* 821E881Ch case   18:*/		return 0x821E8820;
	}
	return 0x821E8820;
} // Block from 821E87D4h-821E8820h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821E8820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8820);
		  /* 821E8820h */ case    0:  		/* li R3, 1 */
		/* 821E8820h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821E8820h case    0:*/		return 0x821E8824;
	}
	return 0x821E8824;
} // Block from 821E8820h-821E8824h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E8824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8824);
		  /* 821E8824h */ case    0:  		/* addi R1, R1, 128 */
		/* 821E8824h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821E8824h case    0:*/		return 0x821E8828;
		  /* 821E8828h */ case    1:  		/* b -1406332 */
		/* 821E8828h case    1:*/		return 0x820912AC;
		/* 821E8828h case    1:*/		return 0x821E882C;
		  /* 821E882Ch */ case    2:  		/* nop */
		/* 821E882Ch case    2:*/		cpu::op::nop();
		/* 821E882Ch case    2:*/		return 0x821E8830;
	}
	return 0x821E8830;
} // Block from 821E8824h-821E8830h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E8830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8830);
		  /* 821E8830h */ case    0:  		/* mfspr R12, LR */
		/* 821E8830h case    0:*/		regs.R12 = regs.LR;
		/* 821E8830h case    0:*/		return 0x821E8834;
		  /* 821E8834h */ case    1:  		/* bl -1406456 */
		/* 821E8834h case    1:*/		regs.LR = 0x821E8838; return 0x8209123C;
		/* 821E8834h case    1:*/		return 0x821E8838;
		  /* 821E8838h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821E8838h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821E8838h case    2:*/		return 0x821E883C;
		  /* 821E883Ch */ case    3:  		/* mr R31, R3 */
		/* 821E883Ch case    3:*/		regs.R31 = regs.R3;
		/* 821E883Ch case    3:*/		return 0x821E8840;
		  /* 821E8840h */ case    4:  		/* mr R24, R5 */
		/* 821E8840h case    4:*/		regs.R24 = regs.R5;
		/* 821E8840h case    4:*/		return 0x821E8844;
		  /* 821E8844h */ case    5:  		/* mr R25, R4 */
		/* 821E8844h case    5:*/		regs.R25 = regs.R4;
		/* 821E8844h case    5:*/		return 0x821E8848;
		  /* 821E8848h */ case    6:  		/* mr R3, R4 */
		/* 821E8848h case    6:*/		regs.R3 = regs.R4;
		/* 821E8848h case    6:*/		return 0x821E884C;
		  /* 821E884Ch */ case    7:  		/* mr R5, R31 */
		/* 821E884Ch case    7:*/		regs.R5 = regs.R31;
		/* 821E884Ch case    7:*/		return 0x821E8850;
		  /* 821E8850h */ case    8:  		/* mr R4, R24 */
		/* 821E8850h case    8:*/		regs.R4 = regs.R24;
		/* 821E8850h case    8:*/		return 0x821E8854;
		  /* 821E8854h */ case    9:  		/* mr R29, R6 */
		/* 821E8854h case    9:*/		regs.R29 = regs.R6;
		/* 821E8854h case    9:*/		return 0x821E8858;
		  /* 821E8858h */ case   10:  		/* mr R30, R7 */
		/* 821E8858h case   10:*/		regs.R30 = regs.R7;
		/* 821E8858h case   10:*/		return 0x821E885C;
		  /* 821E885Ch */ case   11:  		/* bl 33108 */
		/* 821E885Ch case   11:*/		regs.LR = 0x821E8860; return 0x821F09B0;
		/* 821E885Ch case   11:*/		return 0x821E8860;
		  /* 821E8860h */ case   12:  		/* addi R11, R25, 24 */
		/* 821E8860h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x18);
		/* 821E8860h case   12:*/		return 0x821E8864;
		  /* 821E8864h */ case   13:  		/* mr R28, R3 */
		/* 821E8864h case   13:*/		regs.R28 = regs.R3;
		/* 821E8864h case   13:*/		return 0x821E8868;
		  /* 821E8868h */ case   14:  		/* ori R9, R11, 3 */
		/* 821E8868h case   14:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R11,0x3);
		/* 821E8868h case   14:*/		return 0x821E886C;
		  /* 821E886Ch */ case   15:  		/* mr R8, R25 */
		/* 821E886Ch case   15:*/		regs.R8 = regs.R25;
		/* 821E886Ch case   15:*/		return 0x821E8870;
		  /* 821E8870h */ case   16:  		/* li R7, 104 */
		/* 821E8870h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x68);
		/* 821E8870h case   16:*/		return 0x821E8874;
		  /* 821E8874h */ case   17:  		/* li R6, 1 */
		/* 821E8874h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E8874h case   17:*/		return 0x821E8878;
		  /* 821E8878h */ case   18:  		/* mr R5, R29 */
		/* 821E8878h case   18:*/		regs.R5 = regs.R29;
		/* 821E8878h case   18:*/		return 0x821E887C;
		  /* 821E887Ch */ case   19:  		/* mr R4, R24 */
		/* 821E887Ch case   19:*/		regs.R4 = regs.R24;
		/* 821E887Ch case   19:*/		return 0x821E8880;
		  /* 821E8880h */ case   20:  		/* mr R3, R31 */
		/* 821E8880h case   20:*/		regs.R3 = regs.R31;
		/* 821E8880h case   20:*/		return 0x821E8884;
		  /* 821E8884h */ case   21:  		/* bl 248764 */
		/* 821E8884h case   21:*/		regs.LR = 0x821E8888; return 0x82225440;
		/* 821E8884h case   21:*/		return 0x821E8888;
		  /* 821E8888h */ case   22:  		/* lwz R11, <#[R31 + 12]> */
		/* 821E8888h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E8888h case   22:*/		return 0x821E888C;
		  /* 821E888Ch */ case   23:  		/* mulli R10, R24, 40 */
		/* 821E888Ch case   23:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R24,0x28);
		/* 821E888Ch case   23:*/		return 0x821E8890;
		  /* 821E8890h */ case   24:  		/* rlwinm. R9, R30, 0, 24, 31 */
		/* 821E8890h case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R30);
		/* 821E8890h case   24:*/		return 0x821E8894;
		  /* 821E8894h */ case   25:  		/* mr R30, R3 */
		/* 821E8894h case   25:*/		regs.R30 = regs.R3;
		/* 821E8894h case   25:*/		return 0x821E8898;
		  /* 821E8898h */ case   26:  		/* add R23, R10, R11 */
		/* 821E8898h case   26:*/		cpu::op::add<0>(regs,&regs.R23,regs.R10,regs.R11);
		/* 821E8898h case   26:*/		return 0x821E889C;
		  /* 821E889Ch */ case   27:  		/* bc 12, CR0_EQ, 16 */
		/* 821E889Ch case   27:*/		if ( regs.CR[0].eq ) { return 0x821E88AC;  }
		/* 821E889Ch case   27:*/		return 0x821E88A0;
		  /* 821E88A0h */ case   28:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E88A0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E88A0h case   28:*/		return 0x821E88A4;
		  /* 821E88A4h */ case   29:  		/* oris R11, R11, 512 */
		/* 821E88A4h case   29:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821E88A4h case   29:*/		return 0x821E88A8;
		  /* 821E88A8h */ case   30:  		/* stw R11, <#[R3 + 8]> */
		/* 821E88A8h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E88A8h case   30:*/		return 0x821E88AC;
	}
	return 0x821E88AC;
} // Block from 821E8830h-821E88ACh (31 instructions)

//////////////////////////////////////////////////////
// Block at 821E88ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E88AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E88AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E88AC);
		  /* 821E88ACh */ case    0:  		/* lwz R11, <#[R23 + 28]> */
		/* 821E88ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 821E88ACh case    0:*/		return 0x821E88B0;
		  /* 821E88B0h */ case    1:  		/* rlwinm R10, R29, 3, 0, 28 */
		/* 821E88B0h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R29);
		/* 821E88B0h case    1:*/		return 0x821E88B4;
		  /* 821E88B4h */ case    2:  		/* lwz R9, <#[R30 + 8]> */
		/* 821E88B4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 821E88B4h case    2:*/		return 0x821E88B8;
		  /* 821E88B8h */ case    3:  		/* li R27, 0 */
		/* 821E88B8h case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821E88B8h case    3:*/		return 0x821E88BC;
		  /* 821E88BCh */ case    4:  		/* rlwinm R6, R9, 18, 29, 31 */
		/* 821E88BCh case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R9);
		/* 821E88BCh case    4:*/		return 0x821E88C0;
		  /* 821E88C0h */ case    5:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821E88C0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E88C0h case    5:*/		return 0x821E88C4;
		  /* 821E88C4h */ case    6:  		/* cmplwi CR6, R6, 1 */
		/* 821E88C4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 821E88C4h case    6:*/		return 0x821E88C8;
		  /* 821E88C8h */ case    7:  		/* rlwinm R21, R11, 28, 18, 31 */
		/* 821E88C8h case    7:*/		cpu::op::rlwinm<0,28,18,31>(regs,&regs.R21,regs.R11);
		/* 821E88C8h case    7:*/		return 0x821E88CC;
		  /* 821E88CCh */ case    8:  		/* bc 4, CR6_GT, 80 */
		/* 821E88CCh case    8:*/		if ( !regs.CR[6].gt ) { return 0x821E891C;  }
		/* 821E88CCh case    8:*/		return 0x821E88D0;
		  /* 821E88D0h */ case    9:  		/* li R5, 0 */
		/* 821E88D0h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E88D0h case    9:*/		return 0x821E88D4;
		  /* 821E88D4h */ case   10:  		/* lwz R4, <#[R30 + 28]> */
		/* 821E88D4h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000001C) );
		/* 821E88D4h case   10:*/		return 0x821E88D8;
		  /* 821E88D8h */ case   11:  		/* mr R3, R31 */
		/* 821E88D8h case   11:*/		regs.R3 = regs.R31;
		/* 821E88D8h case   11:*/		return 0x821E88DC;
		  /* 821E88DCh */ case   12:  		/* bl 246308 */
		/* 821E88DCh case   12:*/		regs.LR = 0x821E88E0; return 0x82224B00;
		/* 821E88DCh case   12:*/		return 0x821E88E0;
		  /* 821E88E0h */ case   13:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821E88E0h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821E88E0h case   13:*/		return 0x821E88E4;
		  /* 821E88E4h */ case   14:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821E88E4h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821E88E4h case   14:*/		return 0x821E88E8;
		  /* 821E88E8h */ case   15:  		/* addi R11, R11, 36 */
		/* 821E88E8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821E88E8h case   15:*/		return 0x821E88EC;
		  /* 821E88ECh */ case   16:  		/* addi R10, R10, 36 */
		/* 821E88ECh case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821E88ECh case   16:*/		return 0x821E88F0;
		  /* 821E88F0h */ case   17:  		/* addi R8, R11, -36 */
		/* 821E88F0h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821E88F0h case   17:*/		return 0x821E88F4;
		  /* 821E88F4h */ case   18:  		/* addi R6, R10, -36 */
		/* 821E88F4h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821E88F4h case   18:*/		return 0x821E88F8;
		  /* 821E88F8h */ case   19:  		/* addi R9, R10, 4 */
		/* 821E88F8h case   19:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821E88F8h case   19:*/		return 0x821E88FC;
		  /* 821E88FCh */ case   20:  		/* lwz R7, <#[R11]> */
		/* 821E88FCh case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821E88FCh case   20:*/		return 0x821E8900;
		  /* 821E8900h */ case   21:  		/* mr R27, R3 */
		/* 821E8900h case   21:*/		regs.R27 = regs.R3;
		/* 821E8900h case   21:*/		return 0x821E8904;
		  /* 821E8904h */ case   22:  		/* stw R7, <#[R10]> */
		/* 821E8904h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821E8904h case   22:*/		return 0x821E8908;
		  /* 821E8908h */ case   23:  		/* lwz R7, <#[R11]> */
		/* 821E8908h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821E8908h case   23:*/		return 0x821E890C;
		  /* 821E890Ch */ case   24:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821E890Ch case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821E890Ch case   24:*/		return 0x821E8910;
		  /* 821E8910h */ case   25:  		/* stw R6, <#[R7]> */
		/* 821E8910h case   25:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821E8910h case   25:*/		return 0x821E8914;
		  /* 821E8914h */ case   26:  		/* stw R8, <#[R10 + 4]> */
		/* 821E8914h case   26:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821E8914h case   26:*/		return 0x821E8918;
		  /* 821E8918h */ case   27:  		/* stw R9, <#[R11]> */
		/* 821E8918h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E8918h case   27:*/		return 0x821E891C;
	}
	return 0x821E891C;
} // Block from 821E88ACh-821E891Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 821E891Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E891C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E891C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E891C);
		  /* 821E891Ch */ case    0:  		/* lwz R11, <#[R23]> */
		/* 821E891Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821E891Ch case    0:*/		return 0x821E8920;
		  /* 821E8920h */ case    1:  		/* li R26, 0 */
		/* 821E8920h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821E8920h case    1:*/		return 0x821E8924;
		  /* 821E8924h */ case    2:  		/* rlwinm. R11, R11, 0, 15, 28 */
		/* 821E8924h case    2:*/		cpu::op::rlwinm<1,0,15,28>(regs,&regs.R11,regs.R11);
		/* 821E8924h case    2:*/		return 0x821E8928;
		  /* 821E8928h */ case    3:  		/* bc 12, CR0_EQ, 180 */
		/* 821E8928h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E89DC;  }
		/* 821E8928h case    3:*/		return 0x821E892C;
		  /* 821E892Ch */ case    4:  		/* addi R29, R28, 4 */
		/* 821E892Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0x4);
		/* 821E892Ch case    4:*/		return 0x821E8930;
		  /* 821E8930h */ case    5:  		/* subfic R22, R28, -4 */
		/* 821E8930h case    5:*/		cpu::op::subfic<0>(regs,&regs.R22,regs.R28,0xFFFFFFFC);
		/* 821E8930h case    5:*/		return 0x821E8934;
		  /* 821E8934h */ case    6:  		/* lwz R11, <#[R23 + 28]> */
		/* 821E8934h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 821E8934h case    6:*/		return 0x821E8938;
		  /* 821E8938h */ case    7:  		/* add R10, R22, R29 */
		/* 821E8938h case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R22,regs.R29);
		/* 821E8938h case    7:*/		return 0x821E893C;
		  /* 821E893Ch */ case    8:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821E893Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E893Ch case    8:*/		return 0x821E8940;
		  /* 821E8940h */ case    9:  		/* rlwinm R10, R11, 28, 18, 31 */
		/* 821E8940h case    9:*/		cpu::op::rlwinm<0,28,18,31>(regs,&regs.R10,regs.R11);
		/* 821E8940h case    9:*/		return 0x821E8944;
		  /* 821E8944h */ case   10:  		/* cmplw CR6, R21, R10 */
		/* 821E8944h case   10:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R10);
		/* 821E8944h case   10:*/		return 0x821E8948;
		  /* 821E8948h */ case   11:  		/* bc 4, CR6_EQ, 124 */
		/* 821E8948h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821E89C4;  }
		/* 821E8948h case   11:*/		return 0x821E894C;
		  /* 821E894Ch */ case   12:  		/* rlwinm R11, R11, 0, 28, 31 */
		/* 821E894Ch case   12:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R11);
		/* 821E894Ch case   12:*/		return 0x821E8950;
		  /* 821E8950h */ case   13:  		/* lwz R10, <#[R29]> */
		/* 821E8950h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821E8950h case   13:*/		return 0x821E8954;
		  /* 821E8954h */ case   14:  		/* li R9, 1 */
		/* 821E8954h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821E8954h case   14:*/		return 0x821E8958;
		  /* 821E8958h */ case   15:  		/* stw R30, <#[R29 - 4]> */
		/* 821E8958h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0xFFFFFFFC) );
		/* 821E8958h case   15:*/		return 0x821E895C;
		  /* 821E895Ch */ case   16:  		/* cntlzw R11, R11 */
		/* 821E895Ch case   16:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821E895Ch case   16:*/		return 0x821E8960;
		  /* 821E8960h */ case   17:  		/* mr R7, R26 */
		/* 821E8960h case   17:*/		regs.R7 = regs.R26;
		/* 821E8960h case   17:*/		return 0x821E8964;
		  /* 821E8964h */ case   18:  		/* subfic R28, R11, 31 */
		/* 821E8964h case   18:*/		cpu::op::subfic<0>(regs,&regs.R28,regs.R11,0x1F);
		/* 821E8964h case   18:*/		return 0x821E8968;
		  /* 821E8968h */ case   19:  		/* mr R6, R24 */
		/* 821E8968h case   19:*/		regs.R6 = regs.R24;
		/* 821E8968h case   19:*/		return 0x821E896C;
		  /* 821E896Ch */ case   20:  		/* rlwimi R10, R28, 2, 16, 29 */
		/* 821E896Ch case   20:*/		cpu::op::rlwimi<0,2,16,29>(regs,&regs.R10,regs.R28);
		/* 821E896Ch case   20:*/		return 0x821E8970;
		  /* 821E8970h */ case   21:  		/* mr R5, R25 */
		/* 821E8970h case   21:*/		regs.R5 = regs.R25;
		/* 821E8970h case   21:*/		return 0x821E8974;
		  /* 821E8974h */ case   22:  		/* rlwimi R10, R9, 0, 30, 14 */
		/* 821E8974h case   22:*/		cpu::op::rlwimi<0,0,30,14>(regs,&regs.R10,regs.R9);
		/* 821E8974h case   22:*/		return 0x821E8978;
		  /* 821E8978h */ case   23:  		/* mr R4, R31 */
		/* 821E8978h case   23:*/		regs.R4 = regs.R31;
		/* 821E8978h case   23:*/		return 0x821E897C;
		  /* 821E897Ch */ case   24:  		/* stw R10, <#[R29]> */
		/* 821E897Ch case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821E897Ch case   24:*/		return 0x821E8980;
		  /* 821E8980h */ case   25:  		/* addi R3, R1, 80 */
		/* 821E8980h case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821E8980h case   25:*/		return 0x821E8984;
		  /* 821E8984h */ case   26:  		/* bl 250052 */
		/* 821E8984h case   26:*/		regs.LR = 0x821E8988; return 0x82225A48;
		/* 821E8984h case   26:*/		return 0x821E8988;
		  /* 821E8988h */ case   27:  		/* addi R4, R1, 80 */
		/* 821E8988h case   27:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821E8988h case   27:*/		return 0x821E898C;
		  /* 821E898Ch */ case   28:  		/* mr R3, R31 */
		/* 821E898Ch case   28:*/		regs.R3 = regs.R31;
		/* 821E898Ch case   28:*/		return 0x821E8990;
		  /* 821E8990h */ case   29:  		/* bl 39408 */
		/* 821E8990h case   29:*/		regs.LR = 0x821E8994; return 0x821F2380;
		/* 821E8990h case   29:*/		return 0x821E8994;
		  /* 821E8994h */ case   30:  		/* mr R4, R3 */
		/* 821E8994h case   30:*/		regs.R4 = regs.R3;
		/* 821E8994h case   30:*/		return 0x821E8998;
		  /* 821E8998h */ case   31:  		/* cmplwi CR6, R27, 0 */
		/* 821E8998h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821E8998h case   31:*/		return 0x821E899C;
		  /* 821E899Ch */ case   32:  		/* bc 12, CR6_EQ, 28 */
		/* 821E899Ch case   32:*/		if ( regs.CR[6].eq ) { return 0x821E89B8;  }
		/* 821E899Ch case   32:*/		return 0x821E89A0;
		  /* 821E89A0h */ case   33:  		/* mr R3, R27 */
		/* 821E89A0h case   33:*/		regs.R3 = regs.R27;
		/* 821E89A0h case   33:*/		return 0x821E89A4;
		  /* 821E89A4h */ case   34:  		/* bl -460764 */
		/* 821E89A4h case   34:*/		regs.LR = 0x821E89A8; return 0x821781C8;
		/* 821E89A4h case   34:*/		return 0x821E89A8;
		  /* 821E89A8h */ case   35:  		/* addi R11, R28, 11 */
		/* 821E89A8h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xB);
		/* 821E89A8h case   35:*/		return 0x821E89AC;
		  /* 821E89ACh */ case   36:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E89ACh case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E89ACh case   36:*/		return 0x821E89B0;
		  /* 821E89B0h */ case   37:  		/* stwx R3, <#[R11 + R27]> */
		/* 821E89B0h case   37:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 821E89B0h case   37:*/		return 0x821E89B4;
		  /* 821E89B4h */ case   38:  		/* b 16 */
		/* 821E89B4h case   38:*/		return 0x821E89C4;
		/* 821E89B4h case   38:*/		return 0x821E89B8;
	}
	return 0x821E89B8;
} // Block from 821E891Ch-821E89B8h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821E89B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E89B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E89B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E89B8);
		  /* 821E89B8h */ case    0:  		/* mr R3, R30 */
		/* 821E89B8h case    0:*/		regs.R3 = regs.R30;
		/* 821E89B8h case    0:*/		return 0x821E89BC;
		  /* 821E89BCh */ case    1:  		/* bl -460788 */
		/* 821E89BCh case    1:*/		regs.LR = 0x821E89C0; return 0x821781C8;
		/* 821E89BCh case    1:*/		return 0x821E89C0;
		  /* 821E89C0h */ case    2:  		/* stw R3, <#[R30 + 44]> */
		/* 821E89C0h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821E89C0h case    2:*/		return 0x821E89C4;
	}
	return 0x821E89C4;
} // Block from 821E89B8h-821E89C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E89C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E89C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E89C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E89C4);
		  /* 821E89C4h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 821E89C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821E89C4h case    0:*/		return 0x821E89C8;
		  /* 821E89C8h */ case    1:  		/* addi R26, R26, 1 */
		/* 821E89C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821E89C8h case    1:*/		return 0x821E89CC;
		  /* 821E89CCh */ case    2:  		/* addi R29, R29, 8 */
		/* 821E89CCh case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x8);
		/* 821E89CCh case    2:*/		return 0x821E89D0;
		  /* 821E89D0h */ case    3:  		/* rlwinm R11, R11, 29, 18, 31 */
		/* 821E89D0h case    3:*/		cpu::op::rlwinm<0,29,18,31>(regs,&regs.R11,regs.R11);
		/* 821E89D0h case    3:*/		return 0x821E89D4;
		  /* 821E89D4h */ case    4:  		/* cmplw CR6, R26, R11 */
		/* 821E89D4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 821E89D4h case    4:*/		return 0x821E89D8;
		  /* 821E89D8h */ case    5:  		/* bc 12, CR6_LT, -164 */
		/* 821E89D8h case    5:*/		if ( regs.CR[6].lt ) { return 0x821E8934;  }
		/* 821E89D8h case    5:*/		return 0x821E89DC;
	}
	return 0x821E89DC;
} // Block from 821E89C4h-821E89DCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E89DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E89DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E89DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E89DC);
		  /* 821E89DCh */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821E89DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821E89DCh case    0:*/		return 0x821E89E0;
		  /* 821E89E0h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 821E89E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E8A00;  }
		/* 821E89E0h case    1:*/		return 0x821E89E4;
		  /* 821E89E4h */ case    2:  		/* mr R4, R27 */
		/* 821E89E4h case    2:*/		regs.R4 = regs.R27;
		/* 821E89E4h case    2:*/		return 0x821E89E8;
		  /* 821E89E8h */ case    3:  		/* mr R3, R31 */
		/* 821E89E8h case    3:*/		regs.R3 = regs.R31;
		/* 821E89E8h case    3:*/		return 0x821E89EC;
		  /* 821E89ECh */ case    4:  		/* bl -461292 */
		/* 821E89ECh case    4:*/		regs.LR = 0x821E89F0; return 0x82178000;
		/* 821E89ECh case    4:*/		return 0x821E89F0;
		  /* 821E89F0h */ case    5:  		/* mr R4, R3 */
		/* 821E89F0h case    5:*/		regs.R4 = regs.R3;
		/* 821E89F0h case    5:*/		return 0x821E89F4;
		  /* 821E89F4h */ case    6:  		/* mr R3, R30 */
		/* 821E89F4h case    6:*/		regs.R3 = regs.R30;
		/* 821E89F4h case    6:*/		return 0x821E89F8;
		  /* 821E89F8h */ case    7:  		/* bl -460848 */
		/* 821E89F8h case    7:*/		regs.LR = 0x821E89FC; return 0x821781C8;
		/* 821E89F8h case    7:*/		return 0x821E89FC;
		  /* 821E89FCh */ case    8:  		/* stw R3, <#[R30 + 44]> */
		/* 821E89FCh case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821E89FCh case    8:*/		return 0x821E8A00;
	}
	return 0x821E8A00;
} // Block from 821E89DCh-821E8A00h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E8A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8A00);
		  /* 821E8A00h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 821E8A00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E8A00h case    0:*/		return 0x821E8A04;
		  /* 821E8A04h */ case    1:  		/* ori R11, R11, 4 */
		/* 821E8A04h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E8A04h case    1:*/		return 0x821E8A08;
		  /* 821E8A08h */ case    2:  		/* stw R11, <#[R31 + 44]> */
		/* 821E8A08h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E8A08h case    2:*/		return 0x821E8A0C;
		  /* 821E8A0Ch */ case    3:  		/* addi R1, R1, 192 */
		/* 821E8A0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821E8A0Ch case    3:*/		return 0x821E8A10;
		  /* 821E8A10h */ case    4:  		/* b -1406852 */
		/* 821E8A10h case    4:*/		return 0x8209128C;
		/* 821E8A10h case    4:*/		return 0x821E8A14;
		  /* 821E8A14h */ case    5:  		/* nop */
		/* 821E8A14h case    5:*/		cpu::op::nop();
		/* 821E8A14h case    5:*/		return 0x821E8A18;
	}
	return 0x821E8A18;
} // Block from 821E8A00h-821E8A18h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E8A18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8A18);
		  /* 821E8A18h */ case    0:  		/* mfspr R12, LR */
		/* 821E8A18h case    0:*/		regs.R12 = regs.LR;
		/* 821E8A18h case    0:*/		return 0x821E8A1C;
		  /* 821E8A1Ch */ case    1:  		/* bl -1406940 */
		/* 821E8A1Ch case    1:*/		regs.LR = 0x821E8A20; return 0x82091240;
		/* 821E8A1Ch case    1:*/		return 0x821E8A20;
		  /* 821E8A20h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 821E8A20h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821E8A20h case    2:*/		return 0x821E8A24;
		  /* 821E8A24h */ case    3:  		/* mr R22, R4 */
		/* 821E8A24h case    3:*/		regs.R22 = regs.R4;
		/* 821E8A24h case    3:*/		return 0x821E8A28;
		  /* 821E8A28h */ case    4:  		/* mr R26, R5 */
		/* 821E8A28h case    4:*/		regs.R26 = regs.R5;
		/* 821E8A28h case    4:*/		return 0x821E8A2C;
		  /* 821E8A2Ch */ case    5:  		/* mr R23, R6 */
		/* 821E8A2Ch case    5:*/		regs.R23 = regs.R6;
		/* 821E8A2Ch case    5:*/		return 0x821E8A30;
		  /* 821E8A30h */ case    6:  		/* li R6, 1 */
		/* 821E8A30h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E8A30h case    6:*/		return 0x821E8A34;
		  /* 821E8A34h */ case    7:  		/* li R5, 0 */
		/* 821E8A34h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E8A34h case    7:*/		return 0x821E8A38;
		  /* 821E8A38h */ case    8:  		/* li R4, 112 */
		/* 821E8A38h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x70);
		/* 821E8A38h case    8:*/		return 0x821E8A3C;
		  /* 821E8A3Ch */ case    9:  		/* mr R31, R3 */
		/* 821E8A3Ch case    9:*/		regs.R31 = regs.R3;
		/* 821E8A3Ch case    9:*/		return 0x821E8A40;
		  /* 821E8A40h */ case   10:  		/* mr R25, R7 */
		/* 821E8A40h case   10:*/		regs.R25 = regs.R7;
		/* 821E8A40h case   10:*/		return 0x821E8A44;
		  /* 821E8A44h */ case   11:  		/* bl -542228 */
		/* 821E8A44h case   11:*/		regs.LR = 0x821E8A48; return 0x82164430;
		/* 821E8A44h case   11:*/		return 0x821E8A48;
		  /* 821E8A48h */ case   12:  		/* add R27, R3, R22 */
		/* 821E8A48h case   12:*/		cpu::op::add<0>(regs,&regs.R27,regs.R3,regs.R22);
		/* 821E8A48h case   12:*/		return 0x821E8A4C;
		  /* 821E8A4Ch */ case   13:  		/* mr R24, R3 */
		/* 821E8A4Ch case   13:*/		regs.R24 = regs.R3;
		/* 821E8A4Ch case   13:*/		return 0x821E8A50;
		  /* 821E8A50h */ case   14:  		/* lwz R11, <#[R27 - 8]> */
		/* 821E8A50h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0xFFFFFFF8) );
		/* 821E8A50h case   14:*/		return 0x821E8A54;
		  /* 821E8A54h */ case   15:  		/* rlwinm R29, R11, 0, 17, 31 */
		/* 821E8A54h case   15:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R29,regs.R11);
		/* 821E8A54h case   15:*/		return 0x821E8A58;
		  /* 821E8A58h */ case   16:  		/* mr R30, R26 */
		/* 821E8A58h case   16:*/		regs.R30 = regs.R26;
		/* 821E8A58h case   16:*/		return 0x821E8A5C;
		  /* 821E8A5Ch */ case   17:  		/* lwz R11, <#[R30 + 80]> */
		/* 821E8A5Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000050) );
		/* 821E8A5Ch case   17:*/		return 0x821E8A60;
		  /* 821E8A60h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821E8A60h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E8A60h case   18:*/		return 0x821E8A64;
		  /* 821E8A64h */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 821E8A64h case   19:*/		if ( regs.CR[6].eq ) { return 0x821E8A74;  }
		/* 821E8A64h case   19:*/		return 0x821E8A68;
		  /* 821E8A68h */ case   20:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 821E8A68h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 821E8A68h case   20:*/		return 0x821E8A6C;
		  /* 821E8A6Ch */ case   21:  		/* lwzx R28, <#[R10 + R11]> */
		/* 821E8A6Ch case   21:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E8A6Ch case   21:*/		return 0x821E8A70;
		  /* 821E8A70h */ case   22:  		/* b 8 */
		/* 821E8A70h case   22:*/		return 0x821E8A78;
		/* 821E8A70h case   22:*/		return 0x821E8A74;
	}
	return 0x821E8A74;
} // Block from 821E8A18h-821E8A74h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821E8A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8A74);
		  /* 821E8A74h */ case    0:  		/* li R28, 0 */
		/* 821E8A74h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821E8A74h case    0:*/		return 0x821E8A78;
	}
	return 0x821E8A78;
} // Block from 821E8A74h-821E8A78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E8A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8A78);
		  /* 821E8A78h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821E8A78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821E8A78h case    0:*/		return 0x821E8A7C;
		  /* 821E8A7Ch */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 821E8A7Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821E8A9C;  }
		/* 821E8A7Ch case    1:*/		return 0x821E8A80;
		  /* 821E8A80h */ case    2:  		/* lwz R11, <#[R27 - 8]> */
		/* 821E8A80h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0xFFFFFFF8) );
		/* 821E8A80h case    2:*/		return 0x821E8A84;
		  /* 821E8A84h */ case    3:  		/* rlwinm R11, R11, 20, 15, 28 */
		/* 821E8A84h case    3:*/		cpu::op::rlwinm<0,20,15,28>(regs,&regs.R11,regs.R11);
		/* 821E8A84h case    3:*/		return 0x821E8A88;
		  /* 821E8A88h */ case    4:  		/* ldx R11, <#[R11 + R28]> */
		/* 821E8A88h case    4:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 821E8A88h case    4:*/		return 0x821E8A8C;
		  /* 821E8A8Ch */ case    5:  		/* std R11, <#[R1 + 80]> */
		/* 821E8A8Ch case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E8A8Ch case    5:*/		return 0x821E8A90;
		  /* 821E8A90h */ case    6:  		/* lwz R11, <#[R1 + 80]> */
		/* 821E8A90h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E8A90h case    6:*/		return 0x821E8A94;
		  /* 821E8A94h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821E8A94h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E8A94h case    7:*/		return 0x821E8A98;
		  /* 821E8A98h */ case    8:  		/* bc 4, CR6_EQ, 540 */
		/* 821E8A98h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E8CB4;  }
		/* 821E8A98h case    8:*/		return 0x821E8A9C;
	}
	return 0x821E8A9C;
} // Block from 821E8A78h-821E8A9Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E8A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8A9C);
		  /* 821E8A9Ch */ case    0:  		/* lwz R11, <#[R22 + 28]> */
		/* 821E8A9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000001C) );
		/* 821E8A9Ch case    0:*/		return 0x821E8AA0;
		  /* 821E8AA0h */ case    1:  		/* li R8, 1 */
		/* 821E8AA0h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821E8AA0h case    1:*/		return 0x821E8AA4;
		  /* 821E8AA4h */ case    2:  		/* lwz R9, <#[R30 + 40]> */
		/* 821E8AA4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000028) );
		/* 821E8AA4h case    2:*/		return 0x821E8AA8;
		  /* 821E8AA8h */ case    3:  		/* lwz R10, <#[R11 + 48]> */
		/* 821E8AA8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821E8AA8h case    3:*/		return 0x821E8AAC;
		  /* 821E8AACh */ case    4:  		/* rlwinm R7, R10, 0, 13, 31 */
		/* 821E8AACh case    4:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R7,regs.R10);
		/* 821E8AACh case    4:*/		return 0x821E8AB0;
		  /* 821E8AB0h */ case    5:  		/* rlwinm R10, R7, 27, 5, 31 */
		/* 821E8AB0h case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R7);
		/* 821E8AB0h case    5:*/		return 0x821E8AB4;
		  /* 821E8AB4h */ case    6:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 821E8AB4h case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 821E8AB4h case    6:*/		return 0x821E8AB8;
		  /* 821E8AB8h */ case    7:  		/* addi R10, R10, 1 */
		/* 821E8AB8h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E8AB8h case    7:*/		return 0x821E8ABC;
		  /* 821E8ABCh */ case    8:  		/* slw R8, R8, R7 */
		/* 821E8ABCh case    8:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821E8ABCh case    8:*/		return 0x821E8AC0;
		  /* 821E8AC0h */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E8AC0h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E8AC0h case    9:*/		return 0x821E8AC4;
		  /* 821E8AC4h */ case   10:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821E8AC4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821E8AC4h case   10:*/		return 0x821E8AC8;
		  /* 821E8AC8h */ case   11:  		/* and. R10, R8, R10 */
		/* 821E8AC8h case   11:*/		cpu::op::and<1>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821E8AC8h case   11:*/		return 0x821E8ACC;
		  /* 821E8ACCh */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 821E8ACCh case   12:*/		if ( regs.CR[0].eq ) { return 0x821E8AD8;  }
		/* 821E8ACCh case   12:*/		return 0x821E8AD0;
		  /* 821E8AD0h */ case   13:  		/* addi R3, R1, 88 */
		/* 821E8AD0h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 821E8AD0h case   13:*/		return 0x821E8AD4;
		  /* 821E8AD4h */ case   14:  		/* b 264 */
		/* 821E8AD4h case   14:*/		return 0x821E8BDC;
		/* 821E8AD4h case   14:*/		return 0x821E8AD8;
	}
	return 0x821E8AD8;
} // Block from 821E8A9Ch-821E8AD8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821E8AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8AD8);
		  /* 821E8AD8h */ case    0:  		/* lwz R10, <#[R30 + 76]> */
		/* 821E8AD8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000004C) );
		/* 821E8AD8h case    0:*/		return 0x821E8ADC;
		  /* 821E8ADCh */ case    1:  		/* rlwinm. R10, R10, 0, 11, 11 */
		/* 821E8ADCh case    1:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R10,regs.R10);
		/* 821E8ADCh case    1:*/		return 0x821E8AE0;
	}
	return 0x821E8AE0;
} // Block from 821E8AD8h-821E8AE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E8AE0h
// Function '?sin_cos_lut@D3DXShader@@YAHHHPAUMeParam2@1@HPBI111PBH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8AE0);
		  /* 821E8AE0h */ case    0:  		/* bc 12, CR0_EQ, 128 */
		/* 821E8AE0h case    0:*/		if ( regs.CR[0].eq ) { return 0x821E8B60;  }
		/* 821E8AE0h case    0:*/		return 0x821E8AE4;
		  /* 821E8AE4h */ case    1:  		/* lwz R11, <#[R11 + 76]> */
		/* 821E8AE4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000004C) );
		/* 821E8AE4h case    1:*/		return 0x821E8AE8;
		  /* 821E8AE8h */ case    2:  		/* rlwinm. R10, R11, 0, 11, 11 */
		/* 821E8AE8h case    2:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R10,regs.R11);
		/* 821E8AE8h case    2:*/		return 0x821E8AEC;
		  /* 821E8AECh */ case    3:  		/* bc 4, CR0_EQ, 116 */
		/* 821E8AECh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E8B60;  }
		/* 821E8AECh case    3:*/		return 0x821E8AF0;
		  /* 821E8AF0h */ case    4:  		/* lwz R10, <#[R9 + 4]> */
		/* 821E8AF0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 821E8AF0h case    4:*/		return 0x821E8AF4;
		  /* 821E8AF4h */ case    5:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E8AF4h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E8AF4h case    5:*/		return 0x821E8AF8;
		  /* 821E8AF8h */ case    6:  		/* bc 4, CR0_EQ, 104 */
		/* 821E8AF8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E8B60;  }
		/* 821E8AF8h case    6:*/		return 0x821E8AFC;
		  /* 821E8AFCh */ case    7:  		/* lwz R10, <#[R30 + 52]> */
		/* 821E8AFCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000034) );
		/* 821E8AFCh case    7:*/		return 0x821E8B00;
		  /* 821E8B00h */ case    8:  		/* lwz R10, <#[R10 + 76]> */
		/* 821E8B00h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000004C) );
		/* 821E8B00h case    8:*/		return 0x821E8B04;
		  /* 821E8B04h */ case    9:  		/* xor R11, R10, R11 */
		/* 821E8B04h case    9:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E8B04h case    9:*/		return 0x821E8B08;
		  /* 821E8B08h */ case   10:  		/* rlwinm. R11, R11, 0, 13, 31 */
		/* 821E8B08h case   10:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821E8B08h case   10:*/		return 0x821E8B0C;
		  /* 821E8B0Ch */ case   11:  		/* bc 12, CR0_EQ, 84 */
		/* 821E8B0Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821E8B60;  }
		/* 821E8B0Ch case   11:*/		return 0x821E8B10;
		  /* 821E8B10h */ case   12:  		/* lwz R11, <#[R31 + 12]> */
		/* 821E8B10h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E8B10h case   12:*/		return 0x821E8B14;
		  /* 821E8B14h */ case   13:  		/* mulli R10, R29, 40 */
		/* 821E8B14h case   13:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R29,0x28);
		/* 821E8B14h case   13:*/		return 0x821E8B18;
		  /* 821E8B18h */ case   14:  		/* add R11, R10, R11 */
		/* 821E8B18h case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E8B18h case   14:*/		return 0x821E8B1C;
		  /* 821E8B1Ch */ case   15:  		/* lwz R11, <#[R11 + 16]> */
		/* 821E8B1Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821E8B1Ch case   15:*/		return 0x821E8B20;
		  /* 821E8B20h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821E8B20h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E8B20h case   16:*/		return 0x821E8B24;
		  /* 821E8B24h */ case   17:  		/* bc 12, CR6_EQ, 28 */
		/* 821E8B24h case   17:*/		if ( regs.CR[6].eq ) { return 0x821E8B40;  }
		/* 821E8B24h case   17:*/		return 0x821E8B28;
		  /* 821E8B28h */ case   18:  		/* lwz R10, <#[R11 + 44]> */
		/* 821E8B28h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 821E8B28h case   18:*/		return 0x821E8B2C;
		  /* 821E8B2Ch */ case   19:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 821E8B2Ch case   19:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 821E8B2Ch case   19:*/		return 0x821E8B30;
		  /* 821E8B30h */ case   20:  		/* bc 12, CR0_EQ, 16 */
		/* 821E8B30h case   20:*/		if ( regs.CR[0].eq ) { return 0x821E8B40;  }
		/* 821E8B30h case   20:*/		return 0x821E8B34;
		  /* 821E8B34h */ case   21:  		/* lwz R11, <#[R11 + 52]> */
		/* 821E8B34h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 821E8B34h case   21:*/		return 0x821E8B38;
		  /* 821E8B38h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821E8B38h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E8B38h case   22:*/		return 0x821E8B3C;
		  /* 821E8B3Ch */ case   23:  		/* bc 4, CR6_EQ, 36 */
		/* 821E8B3Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x821E8B60;  }
		/* 821E8B3Ch case   23:*/		return 0x821E8B40;
	}
	return 0x821E8B40;
} // Block from 821E8AE0h-821E8B40h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E8B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8B40);
		  /* 821E8B40h */ case    0:  		/* lwz R11, <#[R27 - 8]> */
		/* 821E8B40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0xFFFFFFF8) );
		/* 821E8B40h case    0:*/		return 0x821E8B44;
		  /* 821E8B44h */ case    1:  		/* li R7, 0 */
		/* 821E8B44h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E8B44h case    1:*/		return 0x821E8B48;
		  /* 821E8B48h */ case    2:  		/* mr R5, R29 */
		/* 821E8B48h case    2:*/		regs.R5 = regs.R29;
		/* 821E8B48h case    2:*/		return 0x821E8B4C;
		  /* 821E8B4Ch */ case    3:  		/* rlwinm R6, R11, 17, 18, 31 */
		/* 821E8B4Ch case    3:*/		cpu::op::rlwinm<0,17,18,31>(regs,&regs.R6,regs.R11);
		/* 821E8B4Ch case    3:*/		return 0x821E8B50;
		  /* 821E8B50h */ case    4:  		/* mr R4, R30 */
		/* 821E8B50h case    4:*/		regs.R4 = regs.R30;
		/* 821E8B50h case    4:*/		return 0x821E8B54;
		  /* 821E8B54h */ case    5:  		/* mr R3, R31 */
		/* 821E8B54h case    5:*/		regs.R3 = regs.R31;
		/* 821E8B54h case    5:*/		return 0x821E8B58;
		  /* 821E8B58h */ case    6:  		/* bl -808 */
		/* 821E8B58h case    6:*/		regs.LR = 0x821E8B5C; return 0x821E8830;
		/* 821E8B58h case    6:*/		return 0x821E8B5C;
		  /* 821E8B5Ch */ case    7:  		/* b -256 */
		/* 821E8B5Ch case    7:*/		return 0x821E8A5C;
		/* 821E8B5Ch case    7:*/		return 0x821E8B60;
	}
	return 0x821E8B60;
} // Block from 821E8B40h-821E8B60h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E8B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8B60);
		  /* 821E8B60h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821E8B60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821E8B60h case    0:*/		return 0x821E8B64;
		  /* 821E8B64h */ case    1:  		/* bc 4, CR6_EQ, 148 */
		/* 821E8B64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E8BF8;  }
		/* 821E8B64h case    1:*/		return 0x821E8B68;
		  /* 821E8B68h */ case    2:  		/* lwz R9, <#[R30 + 48]> */
		/* 821E8B68h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000030) );
		/* 821E8B68h case    2:*/		return 0x821E8B6C;
		  /* 821E8B6Ch */ case    3:  		/* rlwinm. R11, R9, 13, 31, 31 */
		/* 821E8B6Ch case    3:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R9);
		/* 821E8B6Ch case    3:*/		return 0x821E8B70;
		  /* 821E8B70h */ case    4:  		/* bc 12, CR0_EQ, 72 */
		/* 821E8B70h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E8BB8;  }
		/* 821E8B70h case    4:*/		return 0x821E8B74;
		  /* 821E8B74h */ case    5:  		/* lwz R11, <#[R31 + 12]> */
		/* 821E8B74h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E8B74h case    5:*/		return 0x821E8B78;
		  /* 821E8B78h */ case    6:  		/* mulli R10, R29, 40 */
		/* 821E8B78h case    6:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R29,0x28);
		/* 821E8B78h case    6:*/		return 0x821E8B7C;
		  /* 821E8B7Ch */ case    7:  		/* add R11, R10, R11 */
		/* 821E8B7Ch case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E8B7Ch case    7:*/		return 0x821E8B80;
		  /* 821E8B80h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E8B80h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E8B80h case    8:*/		return 0x821E8B84;
		  /* 821E8B84h */ case    9:  		/* rlwinm. R10, R10, 0, 3, 3 */
		/* 821E8B84h case    9:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R10,regs.R10);
		/* 821E8B84h case    9:*/		return 0x821E8B88;
		  /* 821E8B88h */ case   10:  		/* bc 4, CR0_EQ, 16 */
		/* 821E8B88h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821E8B98;  }
		/* 821E8B88h case   10:*/		return 0x821E8B8C;
		  /* 821E8B8Ch */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E8B8Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E8B8Ch case   11:*/		return 0x821E8B90;
		  /* 821E8B90h */ case   12:  		/* rlwinm. R11, R11, 0, 10, 12 */
		/* 821E8B90h case   12:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821E8B90h case   12:*/		return 0x821E8B94;
		  /* 821E8B94h */ case   13:  		/* bc 4, CR0_EQ, 36 */
		/* 821E8B94h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821E8BB8;  }
		/* 821E8B94h case   13:*/		return 0x821E8B98;
	}
	return 0x821E8B98;
} // Block from 821E8B60h-821E8B98h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E8B98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8B98);
		  /* 821E8B98h */ case    0:  		/* lwz R11, <#[R27 - 8]> */
		/* 821E8B98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0xFFFFFFF8) );
		/* 821E8B98h case    0:*/		return 0x821E8B9C;
		  /* 821E8B9Ch */ case    1:  		/* mr R6, R29 */
		/* 821E8B9Ch case    1:*/		regs.R6 = regs.R29;
		/* 821E8B9Ch case    1:*/		return 0x821E8BA0;
		  /* 821E8BA0h */ case    2:  		/* mr R5, R26 */
		/* 821E8BA0h case    2:*/		regs.R5 = regs.R26;
		/* 821E8BA0h case    2:*/		return 0x821E8BA4;
		  /* 821E8BA4h */ case    3:  		/* rlwinm R7, R11, 17, 18, 31 */
		/* 821E8BA4h case    3:*/		cpu::op::rlwinm<0,17,18,31>(regs,&regs.R7,regs.R11);
		/* 821E8BA4h case    3:*/		return 0x821E8BA8;
		  /* 821E8BA8h */ case    4:  		/* mr R4, R31 */
		/* 821E8BA8h case    4:*/		regs.R4 = regs.R31;
		/* 821E8BA8h case    4:*/		return 0x821E8BAC;
		  /* 821E8BACh */ case    5:  		/* addi R3, R1, 96 */
		/* 821E8BACh case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821E8BACh case    5:*/		return 0x821E8BB0;
		  /* 821E8BB0h */ case    6:  		/* bl 249496 */
		/* 821E8BB0h case    6:*/		regs.LR = 0x821E8BB4; return 0x82225A48;
		/* 821E8BB0h case    6:*/		return 0x821E8BB4;
		  /* 821E8BB4h */ case    7:  		/* b -348 */
		/* 821E8BB4h case    7:*/		return 0x821E8A58;
		/* 821E8BB4h case    7:*/		return 0x821E8BB8;
	}
	return 0x821E8BB8;
} // Block from 821E8B98h-821E8BB8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E8BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8BB8);
		  /* 821E8BB8h */ case    0:  		/* rlwinm. R11, R9, 11, 31, 31 */
		/* 821E8BB8h case    0:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R11,regs.R9);
		/* 821E8BB8h case    0:*/		return 0x821E8BBC;
		  /* 821E8BBCh */ case    1:  		/* bc 12, CR0_EQ, 60 */
		/* 821E8BBCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821E8BF8;  }
		/* 821E8BBCh case    1:*/		return 0x821E8BC0;
		  /* 821E8BC0h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 821E8BC0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E8BC0h case    2:*/		return 0x821E8BC4;
		  /* 821E8BC4h */ case    3:  		/* mulli R10, R29, 40 */
		/* 821E8BC4h case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R29,0x28);
		/* 821E8BC4h case    3:*/		return 0x821E8BC8;
		  /* 821E8BC8h */ case    4:  		/* add R11, R10, R11 */
		/* 821E8BC8h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E8BC8h case    4:*/		return 0x821E8BCC;
		  /* 821E8BCCh */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E8BCCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E8BCCh case    5:*/		return 0x821E8BD0;
		  /* 821E8BD0h */ case    6:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 821E8BD0h case    6:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 821E8BD0h case    6:*/		return 0x821E8BD4;
		  /* 821E8BD4h */ case    7:  		/* bc 12, CR0_EQ, 36 */
		/* 821E8BD4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E8BF8;  }
		/* 821E8BD4h case    7:*/		return 0x821E8BD8;
		  /* 821E8BD8h */ case    8:  		/* addi R3, R1, 104 */
		/* 821E8BD8h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821E8BD8h case    8:*/		return 0x821E8BDC;
	}
	return 0x821E8BDC;
} // Block from 821E8BB8h-821E8BDCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E8BDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8BDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8BDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8BDC);
		  /* 821E8BDCh */ case    0:  		/* lwz R11, <#[R27 - 8]> */
		/* 821E8BDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0xFFFFFFF8) );
		/* 821E8BDCh case    0:*/		return 0x821E8BE0;
		  /* 821E8BE0h */ case    1:  		/* mr R4, R31 */
		/* 821E8BE0h case    1:*/		regs.R4 = regs.R31;
		/* 821E8BE0h case    1:*/		return 0x821E8BE4;
		  /* 821E8BE4h */ case    2:  		/* mr R5, R30 */
		/* 821E8BE4h case    2:*/		regs.R5 = regs.R30;
		/* 821E8BE4h case    2:*/		return 0x821E8BE8;
		  /* 821E8BE8h */ case    3:  		/* rlwinm R7, R11, 17, 18, 31 */
		/* 821E8BE8h case    3:*/		cpu::op::rlwinm<0,17,18,31>(regs,&regs.R7,regs.R11);
		/* 821E8BE8h case    3:*/		return 0x821E8BEC;
		  /* 821E8BECh */ case    4:  		/* mr R6, R29 */
		/* 821E8BECh case    4:*/		regs.R6 = regs.R29;
		/* 821E8BECh case    4:*/		return 0x821E8BF0;
		  /* 821E8BF0h */ case    5:  		/* bl 249432 */
		/* 821E8BF0h case    5:*/		regs.LR = 0x821E8BF4; return 0x82225A48;
		/* 821E8BF0h case    5:*/		return 0x821E8BF4;
		  /* 821E8BF4h */ case    6:  		/* b -408 */
		/* 821E8BF4h case    6:*/		return 0x821E8A5C;
		/* 821E8BF4h case    6:*/		return 0x821E8BF8;
	}
	return 0x821E8BF8;
} // Block from 821E8BDCh-821E8BF8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E8BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8BF8);
		  /* 821E8BF8h */ case    0:  		/* cmplw CR6, R30, R23 */
		/* 821E8BF8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R23);
		/* 821E8BF8h case    0:*/		return 0x821E8BFC;
		  /* 821E8BFCh */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 821E8BFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E8C14;  }
		/* 821E8BFCh case    1:*/		return 0x821E8C00;
		  /* 821E8C00h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 821E8C00h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821E8C00h case    2:*/		return 0x821E8C04;
		  /* 821E8C04h */ case    3:  		/* bc 12, CR6_EQ, 448 */
		/* 821E8C04h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E8DC4;  }
		/* 821E8C04h case    3:*/		return 0x821E8C08;
		  /* 821E8C08h */ case    4:  		/* mr R30, R25 */
		/* 821E8C08h case    4:*/		regs.R30 = regs.R25;
		/* 821E8C08h case    4:*/		return 0x821E8C0C;
		  /* 821E8C0Ch */ case    5:  		/* li R25, 0 */
		/* 821E8C0Ch case    5:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821E8C0Ch case    5:*/		return 0x821E8C10;
		  /* 821E8C10h */ case    6:  		/* b -436 */
		/* 821E8C10h case    6:*/		return 0x821E8A5C;
		/* 821E8C10h case    6:*/		return 0x821E8C14;
	}
	return 0x821E8C14;
} // Block from 821E8BF8h-821E8C14h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E8C14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8C14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8C14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8C14);
		  /* 821E8C14h */ case    0:  		/* lwz R11, <#[R30 + 52]> */
		/* 821E8C14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821E8C14h case    0:*/		return 0x821E8C18;
		  /* 821E8C18h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E8C18h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E8C18h case    1:*/		return 0x821E8C1C;
		  /* 821E8C1Ch */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 821E8C1Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821E8C28;  }
		/* 821E8C1Ch case    2:*/		return 0x821E8C20;
		  /* 821E8C20h */ case    3:  		/* mr R30, R11 */
		/* 821E8C20h case    3:*/		regs.R30 = regs.R11;
		/* 821E8C20h case    3:*/		return 0x821E8C24;
		  /* 821E8C24h */ case    4:  		/* b -456 */
		/* 821E8C24h case    4:*/		return 0x821E8A5C;
		/* 821E8C24h case    4:*/		return 0x821E8C28;
	}
	return 0x821E8C28;
} // Block from 821E8C14h-821E8C28h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E8C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8C28);
		  /* 821E8C28h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E8C28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E8C28h case    0:*/		return 0x821E8C2C;
		  /* 821E8C2Ch */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821E8C2Ch case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E8C2Ch case    1:*/		return 0x821E8C30;
		  /* 821E8C30h */ case    2:  		/* addic R10, R10, -1 */
		/* 821E8C30h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821E8C30h case    2:*/		return 0x821E8C34;
		  /* 821E8C34h */ case    3:  		/* subfe R10, R10, R10 */
		/* 821E8C34h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821E8C34h case    3:*/		return 0x821E8C38;
		  /* 821E8C38h */ case    4:  		/* and R11, R10, R11 */
		/* 821E8C38h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E8C38h case    4:*/		return 0x821E8C3C;
		  /* 821E8C3Ch */ case    5:  		/* cmplw CR6, R30, R11 */
		/* 821E8C3Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821E8C3Ch case    5:*/		return 0x821E8C40;
		  /* 821E8C40h */ case    6:  		/* bc 4, CR6_EQ, 388 */
		/* 821E8C40h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E8DC4;  }
		/* 821E8C40h case    6:*/		return 0x821E8C44;
		  /* 821E8C44h */ case    7:  		/* lwz R11, <#[R31 + 12]> */
		/* 821E8C44h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E8C44h case    7:*/		return 0x821E8C48;
		  /* 821E8C48h */ case    8:  		/* mulli R10, R29, 40 */
		/* 821E8C48h case    8:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R29,0x28);
		/* 821E8C48h case    8:*/		return 0x821E8C4C;
		  /* 821E8C4Ch */ case    9:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821E8C4Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E8C4Ch case    9:*/		return 0x821E8C50;
		  /* 821E8C50h */ case   10:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821E8C50h case   10:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821E8C50h case   10:*/		return 0x821E8C54;
		  /* 821E8C54h */ case   11:  		/* cmplwi CR6, R11, 3 */
		/* 821E8C54h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821E8C54h case   11:*/		return 0x821E8C58;
		  /* 821E8C58h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 821E8C58h case   12:*/		if ( regs.CR[6].eq ) { return 0x821E8C64;  }
		/* 821E8C58h case   12:*/		return 0x821E8C5C;
		  /* 821E8C5Ch */ case   13:  		/* cmplwi CR6, R11, 1 */
		/* 821E8C5Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821E8C5Ch case   13:*/		return 0x821E8C60;
		  /* 821E8C60h */ case   14:  		/* bc 4, CR6_EQ, 356 */
		/* 821E8C60h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821E8DC4;  }
		/* 821E8C60h case   14:*/		return 0x821E8C64;
	}
	return 0x821E8C64;
} // Block from 821E8C28h-821E8C64h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821E8C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8C64);
		  /* 821E8C64h */ case    0:  		/* mr R5, R31 */
		/* 821E8C64h case    0:*/		regs.R5 = regs.R31;
		/* 821E8C64h case    0:*/		return 0x821E8C68;
		  /* 821E8C68h */ case    1:  		/* mr R4, R29 */
		/* 821E8C68h case    1:*/		regs.R4 = regs.R29;
		/* 821E8C68h case    1:*/		return 0x821E8C6C;
		  /* 821E8C6Ch */ case    2:  		/* mr R3, R30 */
		/* 821E8C6Ch case    2:*/		regs.R3 = regs.R30;
		/* 821E8C6Ch case    2:*/		return 0x821E8C70;
		  /* 821E8C70h */ case    3:  		/* bl 32064 */
		/* 821E8C70h case    3:*/		regs.LR = 0x821E8C74; return 0x821F09B0;
		/* 821E8C70h case    3:*/		return 0x821E8C74;
		  /* 821E8C74h */ case    4:  		/* stw R30, <#[R31 + 564]> */
		/* 821E8C74h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 821E8C74h case    4:*/		return 0x821E8C78;
		  /* 821E8C78h */ case    5:  		/* lwz R11, <#[R27 - 8]> */
		/* 821E8C78h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0xFFFFFFF8) );
		/* 821E8C78h case    5:*/		return 0x821E8C7C;
		  /* 821E8C7Ch */ case    6:  		/* mr R28, R3 */
		/* 821E8C7Ch case    6:*/		regs.R28 = regs.R3;
		/* 821E8C7Ch case    6:*/		return 0x821E8C80;
		  /* 821E8C80h */ case    7:  		/* mr R5, R29 */
		/* 821E8C80h case    7:*/		regs.R5 = regs.R29;
		/* 821E8C80h case    7:*/		return 0x821E8C84;
		  /* 821E8C84h */ case    8:  		/* mr R4, R31 */
		/* 821E8C84h case    8:*/		regs.R4 = regs.R31;
		/* 821E8C84h case    8:*/		return 0x821E8C88;
		  /* 821E8C88h */ case    9:  		/* addi R3, R1, 112 */
		/* 821E8C88h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821E8C88h case    9:*/		return 0x821E8C8C;
		  /* 821E8C8Ch */ case   10:  		/* rlwinm R6, R11, 17, 18, 31 */
		/* 821E8C8Ch case   10:*/		cpu::op::rlwinm<0,17,18,31>(regs,&regs.R6,regs.R11);
		/* 821E8C8Ch case   10:*/		return 0x821E8C90;
		  /* 821E8C90h */ case   11:  		/* bl 272008 */
		/* 821E8C90h case   11:*/		regs.LR = 0x821E8C94; return 0x8222B318;
		/* 821E8C90h case   11:*/		return 0x821E8C94;
		  /* 821E8C94h */ case   12:  		/* lwz R11, <#[R27 - 8]> */
		/* 821E8C94h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0xFFFFFFF8) );
		/* 821E8C94h case   12:*/		return 0x821E8C98;
		  /* 821E8C98h */ case   13:  		/* lwz R10, <#[R3]> */
		/* 821E8C98h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821E8C98h case   13:*/		return 0x821E8C9C;
		  /* 821E8C9Ch */ case   14:  		/* rlwinm R11, R11, 20, 15, 28 */
		/* 821E8C9Ch case   14:*/		cpu::op::rlwinm<0,20,15,28>(regs,&regs.R11,regs.R11);
		/* 821E8C9Ch case   14:*/		return 0x821E8CA0;
		  /* 821E8CA0h */ case   15:  		/* add R9, R11, R28 */
		/* 821E8CA0h case   15:*/		cpu::op::add<0>(regs,&regs.R9,regs.R11,regs.R28);
		/* 821E8CA0h case   15:*/		return 0x821E8CA4;
		  /* 821E8CA4h */ case   16:  		/* stwx R10, <#[R11 + R28]> */
		/* 821E8CA4h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 821E8CA4h case   16:*/		return 0x821E8CA8;
		  /* 821E8CA8h */ case   17:  		/* lwz R11, <#[R3 + 4]> */
		/* 821E8CA8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E8CA8h case   17:*/		return 0x821E8CAC;
		  /* 821E8CACh */ case   18:  		/* stw R11, <#[R9 + 4]> */
		/* 821E8CACh case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821E8CACh case   18:*/		return 0x821E8CB0;
		  /* 821E8CB0h */ case   19:  		/* b -596 */
		/* 821E8CB0h case   19:*/		return 0x821E8A5C;
		/* 821E8CB0h case   19:*/		return 0x821E8CB4;
	}
	return 0x821E8CB4;
} // Block from 821E8C64h-821E8CB4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821E8CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8CB4);
		  /* 821E8CB4h */ case    0:  		/* lwz R11, <#[R22]> */
		/* 821E8CB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821E8CB4h case    0:*/		return 0x821E8CB8;
		  /* 821E8CB8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E8CB8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E8CB8h case    1:*/		return 0x821E8CBC;
		  /* 821E8CBCh */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821E8CBCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821E8CD8;  }
		/* 821E8CBCh case    2:*/		return 0x821E8CC0;
		  /* 821E8CC0h */ case    3:  		/* lwz R10, <#[R11 + 12]> */
		/* 821E8CC0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E8CC0h case    3:*/		return 0x821E8CC4;
		  /* 821E8CC4h */ case    4:  		/* lwz R10, <#[R10 + 28]> */
		/* 821E8CC4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 821E8CC4h case    4:*/		return 0x821E8CC8;
		  /* 821E8CC8h */ case    5:  		/* cmplw CR6, R10, R30 */
		/* 821E8CC8h case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 821E8CC8h case    5:*/		return 0x821E8CCC;
		  /* 821E8CCCh */ case    6:  		/* bc 12, CR6_EQ, 360 */
		/* 821E8CCCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821E8E34;  }
		/* 821E8CCCh case    6:*/		return 0x821E8CD0;
		  /* 821E8CD0h */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E8CD0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E8CD0h case    7:*/		return 0x821E8CD4;
		  /* 821E8CD4h */ case    8:  		/* b -28 */
		/* 821E8CD4h case    8:*/		return 0x821E8CB8;
		/* 821E8CD4h case    8:*/		return 0x821E8CD8;
	}
	return 0x821E8CD8;
} // Block from 821E8CB4h-821E8CD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E8CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8CD8);
		  /* 821E8CD8h */ case    0:  		/* stw R30, <#[R31 + 564]> */
		/* 821E8CD8h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 821E8CD8h case    0:*/		return 0x821E8CDC;
		  /* 821E8CDCh */ case    1:  		/* addi R4, R1, 80 */
		/* 821E8CDCh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821E8CDCh case    1:*/		return 0x821E8CE0;
		  /* 821E8CE0h */ case    2:  		/* mr R3, R31 */
		/* 821E8CE0h case    2:*/		regs.R3 = regs.R31;
		/* 821E8CE0h case    2:*/		return 0x821E8CE4;
		  /* 821E8CE4h */ case    3:  		/* bl 38556 */
		/* 821E8CE4h case    3:*/		regs.LR = 0x821E8CE8; return 0x821F2380;
		/* 821E8CE4h case    3:*/		return 0x821E8CE8;
		  /* 821E8CE8h */ case    4:  		/* lwz R11, <#[R3 + 12]> */
		/* 821E8CE8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E8CE8h case    4:*/		return 0x821E8CEC;
		  /* 821E8CECh */ case    5:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E8CECh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E8CECh case    5:*/		return 0x821E8CF0;
		  /* 821E8CF0h */ case    6:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821E8CF0h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821E8CF0h case    6:*/		return 0x821E8CF4;
		  /* 821E8CF4h */ case    7:  		/* cmplwi CR6, R10, 14720 */
		/* 821E8CF4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003980);
		/* 821E8CF4h case    7:*/		return 0x821E8CF8;
		  /* 821E8CF8h */ case    8:  		/* bc 4, CR6_EQ, 64 */
		/* 821E8CF8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E8D38;  }
		/* 821E8CF8h case    8:*/		return 0x821E8CFC;
		  /* 821E8CFCh */ case    9:  		/* add R11, R24, R11 */
		/* 821E8CFCh case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R24,regs.R11);
		/* 821E8CFCh case    9:*/		return 0x821E8D00;
		  /* 821E8D00h */ case   10:  		/* mr R4, R31 */
		/* 821E8D00h case   10:*/		regs.R4 = regs.R31;
		/* 821E8D00h case   10:*/		return 0x821E8D04;
		  /* 821E8D04h */ case   11:  		/* addi R10, R11, -8 */
		/* 821E8D04h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFF8);
		/* 821E8D04h case   11:*/		return 0x821E8D08;
		  /* 821E8D08h */ case   12:  		/* addi R3, R1, 112 */
		/* 821E8D08h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821E8D08h case   12:*/		return 0x821E8D0C;
		  /* 821E8D0Ch */ case   13:  		/* lwz R11, <#[R11 - 8]> */
		/* 821E8D0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 821E8D0Ch case   13:*/		return 0x821E8D10;
		  /* 821E8D10h */ case   14:  		/* rlwinm R6, R11, 17, 18, 31 */
		/* 821E8D10h case   14:*/		cpu::op::rlwinm<0,17,18,31>(regs,&regs.R6,regs.R11);
		/* 821E8D10h case   14:*/		return 0x821E8D14;
		  /* 821E8D14h */ case   15:  		/* rlwinm R5, R11, 0, 17, 31 */
		/* 821E8D14h case   15:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R5,regs.R11);
		/* 821E8D14h case   15:*/		return 0x821E8D18;
		  /* 821E8D18h */ case   16:  		/* bl 271872 */
		/* 821E8D18h case   16:*/		regs.LR = 0x821E8D1C; return 0x8222B318;
		/* 821E8D18h case   16:*/		return 0x821E8D1C;
		  /* 821E8D1Ch */ case   17:  		/* mr R11, R3 */
		/* 821E8D1Ch case   17:*/		regs.R11 = regs.R3;
		/* 821E8D1Ch case   17:*/		return 0x821E8D20;
		  /* 821E8D20h */ case   18:  		/* addi R4, R1, 80 */
		/* 821E8D20h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821E8D20h case   18:*/		return 0x821E8D24;
		  /* 821E8D24h */ case   19:  		/* mr R3, R31 */
		/* 821E8D24h case   19:*/		regs.R3 = regs.R31;
		/* 821E8D24h case   19:*/		return 0x821E8D28;
		  /* 821E8D28h */ case   20:  		/* ld R11, <#[R11]> */
		/* 821E8D28h case   20:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821E8D28h case   20:*/		return 0x821E8D2C;
		  /* 821E8D2Ch */ case   21:  		/* std R11, <#[R1 + 80]> */
		/* 821E8D2Ch case   21:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E8D2Ch case   21:*/		return 0x821E8D30;
		  /* 821E8D30h */ case   22:  		/* bl 38480 */
		/* 821E8D30h case   22:*/		regs.LR = 0x821E8D34; return 0x821F2380;
		/* 821E8D30h case   22:*/		return 0x821E8D34;
		  /* 821E8D34h */ case   23:  		/* lwz R11, <#[R3 + 12]> */
		/* 821E8D34h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E8D34h case   23:*/		return 0x821E8D38;
	}
	return 0x821E8D38;
} // Block from 821E8CD8h-821E8D38h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E8D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8D38);
		  /* 821E8D38h */ case    0:  		/* lwz R10, <#[R11 + 28]> */
		/* 821E8D38h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821E8D38h case    0:*/		return 0x821E8D3C;
		  /* 821E8D3Ch */ case    1:  		/* cmplw CR6, R10, R30 */
		/* 821E8D3Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 821E8D3Ch case    1:*/		return 0x821E8D40;
		  /* 821E8D40h */ case    2:  		/* bc 4, CR6_EQ, 44 */
		/* 821E8D40h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E8D6C;  }
		/* 821E8D40h case    2:*/		return 0x821E8D44;
		  /* 821E8D44h */ case    3:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E8D44h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E8D44h case    3:*/		return 0x821E8D48;
		  /* 821E8D48h */ case    4:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821E8D48h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821E8D48h case    4:*/		return 0x821E8D4C;
		  /* 821E8D4Ch */ case    5:  		/* cmplwi CR6, R10, 125 */
		/* 821E8D4Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007D);
		/* 821E8D4Ch case    5:*/		return 0x821E8D50;
		  /* 821E8D50h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 821E8D50h case    6:*/		if ( regs.CR[6].eq ) { return 0x821E8D60;  }
		/* 821E8D50h case    6:*/		return 0x821E8D54;
		  /* 821E8D54h */ case    7:  		/* cmplwi CR6, R10, 124 */
		/* 821E8D54h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007C);
		/* 821E8D54h case    7:*/		return 0x821E8D58;
		  /* 821E8D58h */ case    8:  		/* li R10, 0 */
		/* 821E8D58h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821E8D58h case    8:*/		return 0x821E8D5C;
		  /* 821E8D5Ch */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 821E8D5Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821E8D64;  }
		/* 821E8D5Ch case    9:*/		return 0x821E8D60;
	}
	return 0x821E8D60;
} // Block from 821E8D38h-821E8D60h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E8D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8D60);
		  /* 821E8D60h */ case    0:  		/* li R10, 1 */
		/* 821E8D60h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821E8D60h case    0:*/		return 0x821E8D64;
	}
	return 0x821E8D64;
} // Block from 821E8D60h-821E8D64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E8D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8D64);
		  /* 821E8D64h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821E8D64h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821E8D64h case    0:*/		return 0x821E8D68;
		  /* 821E8D68h */ case    1:  		/* bc 12, CR0_EQ, 80 */
		/* 821E8D68h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E8DB8;  }
		/* 821E8D68h case    1:*/		return 0x821E8D6C;
	}
	return 0x821E8D6C;
} // Block from 821E8D64h-821E8D6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E8D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8D6C);
		  /* 821E8D6Ch */ case    0:  		/* mr R7, R3 */
		/* 821E8D6Ch case    0:*/		regs.R7 = regs.R3;
		/* 821E8D6Ch case    0:*/		return 0x821E8D70;
		  /* 821E8D70h */ case    1:  		/* mr R6, R3 */
		/* 821E8D70h case    1:*/		regs.R6 = regs.R3;
		/* 821E8D70h case    1:*/		return 0x821E8D74;
		  /* 821E8D74h */ case    2:  		/* addi R5, R30, 24 */
		/* 821E8D74h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0x18);
		/* 821E8D74h case    2:*/		return 0x821E8D78;
		  /* 821E8D78h */ case    3:  		/* mr R4, R30 */
		/* 821E8D78h case    3:*/		regs.R4 = regs.R30;
		/* 821E8D78h case    3:*/		return 0x821E8D7C;
		  /* 821E8D7Ch */ case    4:  		/* mr R3, R31 */
		/* 821E8D7Ch case    4:*/		regs.R3 = regs.R31;
		/* 821E8D7Ch case    4:*/		return 0x821E8D80;
		  /* 821E8D80h */ case    5:  		/* bl -454472 */
		/* 821E8D80h case    5:*/		regs.LR = 0x821E8D84; return 0x82179E38;
		/* 821E8D80h case    5:*/		return 0x821E8D84;
		  /* 821E8D84h */ case    6:  		/* lwz R11, <#[R1 + 84]> */
		/* 821E8D84h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821E8D84h case    6:*/		return 0x821E8D88;
		  /* 821E8D88h */ case    7:  		/* stw R3, <#[R1 + 80]> */
		/* 821E8D88h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 821E8D88h case    7:*/		return 0x821E8D8C;
		  /* 821E8D8Ch */ case    8:  		/* addi R4, R1, 80 */
		/* 821E8D8Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821E8D8Ch case    8:*/		return 0x821E8D90;
		  /* 821E8D90h */ case    9:  		/* rlwinm R11, R11, 0, 15, 15 */
		/* 821E8D90h case    9:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R11,regs.R11);
		/* 821E8D90h case    9:*/		return 0x821E8D94;
		  /* 821E8D94h */ case   10:  		/* mr R3, R31 */
		/* 821E8D94h case   10:*/		regs.R3 = regs.R31;
		/* 821E8D94h case   10:*/		return 0x821E8D98;
		  /* 821E8D98h */ case   11:  		/* ori R11, R11, 1 */
		/* 821E8D98h case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E8D98h case   11:*/		return 0x821E8D9C;
		  /* 821E8D9Ch */ case   12:  		/* stw R11, <#[R1 + 84]> */
		/* 821E8D9Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821E8D9Ch case   12:*/		return 0x821E8DA0;
		  /* 821E8DA0h */ case   13:  		/* ld R11, <#[R1 + 80]> */
		/* 821E8DA0h case   13:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E8DA0h case   13:*/		return 0x821E8DA4;
		  /* 821E8DA4h */ case   14:  		/* lwz R10, <#[R27 - 8]> */
		/* 821E8DA4h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0xFFFFFFF8) );
		/* 821E8DA4h case   14:*/		return 0x821E8DA8;
		  /* 821E8DA8h */ case   15:  		/* rlwinm R10, R10, 20, 15, 28 */
		/* 821E8DA8h case   15:*/		cpu::op::rlwinm<0,20,15,28>(regs,&regs.R10,regs.R10);
		/* 821E8DA8h case   15:*/		return 0x821E8DAC;
		  /* 821E8DACh */ case   16:  		/* stdx R11, <#[R10 + R28]> */
		/* 821E8DACh case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + regs.R28 + 0x00000000) );
		/* 821E8DACh case   16:*/		return 0x821E8DB0;
		  /* 821E8DB0h */ case   17:  		/* bl 38352 */
		/* 821E8DB0h case   17:*/		regs.LR = 0x821E8DB4; return 0x821F2380;
		/* 821E8DB0h case   17:*/		return 0x821E8DB4;
		  /* 821E8DB4h */ case   18:  		/* lwz R11, <#[R3 + 12]> */
		/* 821E8DB4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E8DB4h case   18:*/		return 0x821E8DB8;
	}
	return 0x821E8DB8;
} // Block from 821E8D6Ch-821E8DB8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821E8DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8DB8);
		  /* 821E8DB8h */ case    0:  		/* cmplw CR6, R11, R22 */
		/* 821E8DB8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821E8DB8h case    0:*/		return 0x821E8DBC;
		  /* 821E8DBCh */ case    1:  		/* bc 12, CR6_EQ, 120 */
		/* 821E8DBCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821E8E34;  }
		/* 821E8DBCh case    1:*/		return 0x821E8DC0;
		  /* 821E8DC0h */ case    2:  		/* b 104 */
		/* 821E8DC0h case    2:*/		return 0x821E8E28;
		/* 821E8DC0h case    2:*/		return 0x821E8DC4;
	}
	return 0x821E8DC4;
} // Block from 821E8DB8h-821E8DC4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E8DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8DC4);
		  /* 821E8DC4h */ case    0:  		/* li R8, 1 */
		/* 821E8DC4h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821E8DC4h case    0:*/		return 0x821E8DC8;
		  /* 821E8DC8h */ case    1:  		/* li R7, 0 */
		/* 821E8DC8h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E8DC8h case    1:*/		return 0x821E8DCC;
		  /* 821E8DCCh */ case    2:  		/* li R6, 116 */
		/* 821E8DCCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x74);
		/* 821E8DCCh case    2:*/		return 0x821E8DD0;
		  /* 821E8DD0h */ case    3:  		/* addi R5, R26, 16 */
		/* 821E8DD0h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R26,0x10);
		/* 821E8DD0h case    3:*/		return 0x821E8DD4;
		  /* 821E8DD4h */ case    4:  		/* mr R4, R26 */
		/* 821E8DD4h case    4:*/		regs.R4 = regs.R26;
		/* 821E8DD4h case    4:*/		return 0x821E8DD8;
		  /* 821E8DD8h */ case    5:  		/* mr R3, R31 */
		/* 821E8DD8h case    5:*/		regs.R3 = regs.R31;
		/* 821E8DD8h case    5:*/		return 0x821E8DDC;
		  /* 821E8DDCh */ case    6:  		/* bl 244668 */
		/* 821E8DDCh case    6:*/		regs.LR = 0x821E8DE0; return 0x82224998;
		/* 821E8DDCh case    6:*/		return 0x821E8DE0;
		  /* 821E8DE0h */ case    7:  		/* mr R30, R3 */
		/* 821E8DE0h case    7:*/		regs.R30 = regs.R3;
		/* 821E8DE0h case    7:*/		return 0x821E8DE4;
		  /* 821E8DE4h */ case    8:  		/* li R6, 1 */
		/* 821E8DE4h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E8DE4h case    8:*/		return 0x821E8DE8;
		  /* 821E8DE8h */ case    9:  		/* li R5, 0 */
		/* 821E8DE8h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E8DE8h case    9:*/		return 0x821E8DEC;
		  /* 821E8DECh */ case   10:  		/* li R4, 116 */
		/* 821E8DECh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x74);
		/* 821E8DECh case   10:*/		return 0x821E8DF0;
		  /* 821E8DF0h */ case   11:  		/* mr R3, R31 */
		/* 821E8DF0h case   11:*/		regs.R3 = regs.R31;
		/* 821E8DF0h case   11:*/		return 0x821E8DF4;
		  /* 821E8DF4h */ case   12:  		/* bl -543172 */
		/* 821E8DF4h case   12:*/		regs.LR = 0x821E8DF8; return 0x82164430;
		/* 821E8DF4h case   12:*/		return 0x821E8DF8;
		  /* 821E8DF8h */ case   13:  		/* addi R11, R30, -4 */
		/* 821E8DF8h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFC);
		/* 821E8DF8h case   13:*/		return 0x821E8DFC;
		  /* 821E8DFCh */ case   14:  		/* mr R4, R30 */
		/* 821E8DFCh case   14:*/		regs.R4 = regs.R30;
		/* 821E8DFCh case   14:*/		return 0x821E8E00;
		  /* 821E8E00h */ case   15:  		/* add R11, R3, R11 */
		/* 821E8E00h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821E8E00h case   15:*/		return 0x821E8E04;
		  /* 821E8E04h */ case   16:  		/* mr R3, R31 */
		/* 821E8E04h case   16:*/		regs.R3 = regs.R31;
		/* 821E8E04h case   16:*/		return 0x821E8E08;
		  /* 821E8E08h */ case   17:  		/* lwz R10, <#[R11]> */
		/* 821E8E08h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E8E08h case   17:*/		return 0x821E8E0C;
		  /* 821E8E0Ch */ case   18:  		/* rlwimi R10, R29, 0, 17, 31 */
		/* 821E8E0Ch case   18:*/		cpu::op::rlwimi<0,0,17,31>(regs,&regs.R10,regs.R29);
		/* 821E8E0Ch case   18:*/		return 0x821E8E10;
		  /* 821E8E10h */ case   19:  		/* mr R9, R10 */
		/* 821E8E10h case   19:*/		regs.R9 = regs.R10;
		/* 821E8E10h case   19:*/		return 0x821E8E14;
		  /* 821E8E14h */ case   20:  		/* stw R10, <#[R11]> */
		/* 821E8E14h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E8E14h case   20:*/		return 0x821E8E18;
		  /* 821E8E18h */ case   21:  		/* lwz R10, <#[R27 - 8]> */
		/* 821E8E18h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0xFFFFFFF8) );
		/* 821E8E18h case   21:*/		return 0x821E8E1C;
		  /* 821E8E1Ch */ case   22:  		/* rlwimi R9, R10, 0, 3, 16 */
		/* 821E8E1Ch case   22:*/		cpu::op::rlwimi<0,0,3,16>(regs,&regs.R9,regs.R10);
		/* 821E8E1Ch case   22:*/		return 0x821E8E20;
		  /* 821E8E20h */ case   23:  		/* stw R9, <#[R11]> */
		/* 821E8E20h case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E8E20h case   23:*/		return 0x821E8E24;
		  /* 821E8E24h */ case   24:  		/* bl -462372 */
		/* 821E8E24h case   24:*/		regs.LR = 0x821E8E28; return 0x82178000;
		/* 821E8E24h case   24:*/		return 0x821E8E28;
	}
	return 0x821E8E28;
} // Block from 821E8DC4h-821E8E28h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821E8E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8E28);
		  /* 821E8E28h */ case    0:  		/* mr R4, R3 */
		/* 821E8E28h case    0:*/		regs.R4 = regs.R3;
		/* 821E8E28h case    0:*/		return 0x821E8E2C;
		  /* 821E8E2Ch */ case    1:  		/* mr R3, R22 */
		/* 821E8E2Ch case    1:*/		regs.R3 = regs.R22;
		/* 821E8E2Ch case    1:*/		return 0x821E8E30;
		  /* 821E8E30h */ case    2:  		/* bl -461928 */
		/* 821E8E30h case    2:*/		regs.LR = 0x821E8E34; return 0x821781C8;
		/* 821E8E30h case    2:*/		return 0x821E8E34;
	}
	return 0x821E8E34;
} // Block from 821E8E28h-821E8E34h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E8E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8E34);
		  /* 821E8E34h */ case    0:  		/* addi R1, R1, 208 */
		/* 821E8E34h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 821E8E34h case    0:*/		return 0x821E8E38;
		  /* 821E8E38h */ case    1:  		/* b -1407912 */
		/* 821E8E38h case    1:*/		return 0x82091290;
		/* 821E8E38h case    1:*/		return 0x821E8E3C;
		  /* 821E8E3Ch */ case    2:  		/* nop */
		/* 821E8E3Ch case    2:*/		cpu::op::nop();
		/* 821E8E3Ch case    2:*/		return 0x821E8E40;
	}
	return 0x821E8E40;
} // Block from 821E8E34h-821E8E40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E8E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8E40);
		  /* 821E8E40h */ case    0:  		/* mfspr R12, LR */
		/* 821E8E40h case    0:*/		regs.R12 = regs.LR;
		/* 821E8E40h case    0:*/		return 0x821E8E44;
		  /* 821E8E44h */ case    1:  		/* bl -1408000 */
		/* 821E8E44h case    1:*/		regs.LR = 0x821E8E48; return 0x82091244;
		/* 821E8E44h case    1:*/		return 0x821E8E48;
		  /* 821E8E48h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821E8E48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821E8E48h case    2:*/		return 0x821E8E4C;
		  /* 821E8E4Ch */ case    3:  		/* mr R27, R4 */
		/* 821E8E4Ch case    3:*/		regs.R27 = regs.R4;
		/* 821E8E4Ch case    3:*/		return 0x821E8E50;
		  /* 821E8E50h */ case    4:  		/* li R6, 1 */
		/* 821E8E50h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E8E50h case    4:*/		return 0x821E8E54;
		  /* 821E8E54h */ case    5:  		/* li R5, 0 */
		/* 821E8E54h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E8E54h case    5:*/		return 0x821E8E58;
		  /* 821E8E58h */ case    6:  		/* li R4, 112 */
		/* 821E8E58h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x70);
		/* 821E8E58h case    6:*/		return 0x821E8E5C;
		  /* 821E8E5Ch */ case    7:  		/* mr R30, R3 */
		/* 821E8E5Ch case    7:*/		regs.R30 = regs.R3;
		/* 821E8E5Ch case    7:*/		return 0x821E8E60;
		  /* 821E8E60h */ case    8:  		/* bl -543280 */
		/* 821E8E60h case    8:*/		regs.LR = 0x821E8E64; return 0x82164430;
		/* 821E8E60h case    8:*/		return 0x821E8E64;
		  /* 821E8E64h */ case    9:  		/* addi R10, R27, -8 */
		/* 821E8E64h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0xFFFFFFF8);
		/* 821E8E64h case    9:*/		return 0x821E8E68;
		  /* 821E8E68h */ case   10:  		/* lwz R11, <#[R30 + 12]> */
		/* 821E8E68h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E8E68h case   10:*/		return 0x821E8E6C;
		  /* 821E8E6Ch */ case   11:  		/* add R24, R3, R10 */
		/* 821E8E6Ch case   11:*/		cpu::op::add<0>(regs,&regs.R24,regs.R3,regs.R10);
		/* 821E8E6Ch case   11:*/		return 0x821E8E70;
		  /* 821E8E70h */ case   12:  		/* lwz R10, <#[R24]> */
		/* 821E8E70h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 821E8E70h case   12:*/		return 0x821E8E74;
		  /* 821E8E74h */ case   13:  		/* rlwinm R25, R10, 0, 17, 31 */
		/* 821E8E74h case   13:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R25,regs.R10);
		/* 821E8E74h case   13:*/		return 0x821E8E78;
		  /* 821E8E78h */ case   14:  		/* mulli R23, R25, 40 */
		/* 821E8E78h case   14:*/		cpu::op::mulli<0>(regs,&regs.R23,regs.R25,0x28);
		/* 821E8E78h case   14:*/		return 0x821E8E7C;
		  /* 821E8E7Ch */ case   15:  		/* add R11, R11, R23 */
		/* 821E8E7Ch case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 821E8E7Ch case   15:*/		return 0x821E8E80;
		  /* 821E8E80h */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E8E80h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E8E80h case   16:*/		return 0x821E8E84;
		  /* 821E8E84h */ case   17:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 821E8E84h case   17:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 821E8E84h case   17:*/		return 0x821E8E88;
		  /* 821E8E88h */ case   18:  		/* bc 4, CR0_EQ, 368 */
		/* 821E8E88h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821E8FF8;  }
		/* 821E8E88h case   18:*/		return 0x821E8E8C;
		  /* 821E8E8Ch */ case   19:  		/* lwz R11, <#[R11]> */
		/* 821E8E8Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821E8E8Ch case   19:*/		return 0x821E8E90;
		  /* 821E8E90h */ case   20:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821E8E90h case   20:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821E8E90h case   20:*/		return 0x821E8E94;
		  /* 821E8E94h */ case   21:  		/* cmplwi CR6, R11, 3 */
		/* 821E8E94h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821E8E94h case   21:*/		return 0x821E8E98;
		  /* 821E8E98h */ case   22:  		/* bc 4, CR6_EQ, 20 */
		/* 821E8E98h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821E8EAC;  }
		/* 821E8E98h case   22:*/		return 0x821E8E9C;
		  /* 821E8E9Ch */ case   23:  		/* lwz R10, <#[R27 + 28]> */
		/* 821E8E9Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000001C) );
		/* 821E8E9Ch case   23:*/		return 0x821E8EA0;
	}
	return 0x821E8EA0;
} // Block from 821E8E40h-821E8EA0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E8EA0h
// Function '?XenosSin@D3DXShader@@YANN@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8EA0);
		  /* 821E8EA0h */ case    0:  		/* lwz R10, <#[R10 + 76]> */
		/* 821E8EA0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000004C) );
		/* 821E8EA0h case    0:*/		return 0x821E8EA4;
		  /* 821E8EA4h */ case    1:  		/* rlwinm. R10, R10, 0, 13, 31 */
		/* 821E8EA4h case    1:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821E8EA4h case    1:*/		return 0x821E8EA8;
		  /* 821E8EA8h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821E8EA8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E8EB4;  }
		/* 821E8EA8h case    2:*/		return 0x821E8EAC;
	}
	return 0x821E8EAC;
} // Block from 821E8EA0h-821E8EACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E8EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8EAC);
		  /* 821E8EACh */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 821E8EACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821E8EACh case    0:*/		return 0x821E8EB0;
		  /* 821E8EB0h */ case    1:  		/* bc 4, CR6_EQ, 328 */
		/* 821E8EB0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E8FF8;  }
		/* 821E8EB0h case    1:*/		return 0x821E8EB4;
	}
	return 0x821E8EB4;
} // Block from 821E8EACh-821E8EB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E8EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8EB4);
		  /* 821E8EB4h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821E8EB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821E8EB4h case    0:*/		return 0x821E8EB8;
		  /* 821E8EB8h */ case    1:  		/* mr R5, R25 */
		/* 821E8EB8h case    1:*/		regs.R5 = regs.R25;
		/* 821E8EB8h case    1:*/		return 0x821E8EBC;
		  /* 821E8EBCh */ case    2:  		/* mr R4, R30 */
		/* 821E8EBCh case    2:*/		regs.R4 = regs.R30;
		/* 821E8EBCh case    2:*/		return 0x821E8EC0;
		  /* 821E8EC0h */ case    3:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821E8EC0h case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E8EC0h case    3:*/		return 0x821E8EC4;
		  /* 821E8EC4h */ case    4:  		/* addi R3, R1, 80 */
		/* 821E8EC4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821E8EC4h case    4:*/		return 0x821E8EC8;
		  /* 821E8EC8h */ case    5:  		/* addic R10, R10, -1 */
		/* 821E8EC8h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821E8EC8h case    5:*/		return 0x821E8ECC;
		  /* 821E8ECCh */ case    6:  		/* subfe R10, R10, R10 */
		/* 821E8ECCh case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821E8ECCh case    6:*/		return 0x821E8ED0;
		  /* 821E8ED0h */ case    7:  		/* and R11, R10, R11 */
		/* 821E8ED0h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E8ED0h case    7:*/		return 0x821E8ED4;
		  /* 821E8ED4h */ case    8:  		/* stw R11, <#[R30 + 564]> */
		/* 821E8ED4h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000234) );
		/* 821E8ED4h case    8:*/		return 0x821E8ED8;
		  /* 821E8ED8h */ case    9:  		/* lwz R11, <#[R24]> */
		/* 821E8ED8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821E8ED8h case    9:*/		return 0x821E8EDC;
		  /* 821E8EDCh */ case   10:  		/* rlwinm R6, R11, 17, 18, 31 */
		/* 821E8EDCh case   10:*/		cpu::op::rlwinm<0,17,18,31>(regs,&regs.R6,regs.R11);
		/* 821E8EDCh case   10:*/		return 0x821E8EE0;
		  /* 821E8EE0h */ case   11:  		/* bl 271416 */
		/* 821E8EE0h case   11:*/		regs.LR = 0x821E8EE4; return 0x8222B318;
		/* 821E8EE0h case   11:*/		return 0x821E8EE4;
		  /* 821E8EE4h */ case   12:  		/* addi R28, R27, 4 */
		/* 821E8EE4h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R27,0x4);
		/* 821E8EE4h case   12:*/		return 0x821E8EE8;
		  /* 821E8EE8h */ case   13:  		/* mr R29, R28 */
		/* 821E8EE8h case   13:*/		regs.R29 = regs.R28;
		/* 821E8EE8h case   13:*/		return 0x821E8EEC;
		  /* 821E8EECh */ case   14:  		/* lwz R31, <#[R29]> */
		/* 821E8EECh case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821E8EECh case   14:*/		return 0x821E8EF0;
		  /* 821E8EF0h */ case   15:  		/* cmplwi CR6, R31, 0 */
		/* 821E8EF0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E8EF0h case   15:*/		return 0x821E8EF4;
		  /* 821E8EF4h */ case   16:  		/* bc 12, CR6_EQ, 208 */
		/* 821E8EF4h case   16:*/		if ( regs.CR[6].eq ) { return 0x821E8FC4;  }
		/* 821E8EF4h case   16:*/		return 0x821E8EF8;
		  /* 821E8EF8h */ case   17:  		/* lwz R11, <#[R31 + 16]> */
		/* 821E8EF8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821E8EF8h case   17:*/		return 0x821E8EFC;
		  /* 821E8EFCh */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821E8EFCh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E8EFCh case   18:*/		return 0x821E8F00;
		  /* 821E8F00h */ case   19:  		/* bc 12, CR6_EQ, 176 */
		/* 821E8F00h case   19:*/		if ( regs.CR[6].eq ) { return 0x821E8FB0;  }
		/* 821E8F00h case   19:*/		return 0x821E8F04;
		  /* 821E8F04h */ case   20:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E8F04h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E8F04h case   20:*/		return 0x821E8F08;
		  /* 821E8F08h */ case   21:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E8F08h case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E8F08h case   21:*/		return 0x821E8F0C;
		  /* 821E8F0Ch */ case   22:  		/* cmplwi CR6, R11, 14336 */
		/* 821E8F0Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E8F0Ch case   22:*/		return 0x821E8F10;
		  /* 821E8F10h */ case   23:  		/* bc 12, CR6_EQ, 160 */
		/* 821E8F10h case   23:*/		if ( regs.CR[6].eq ) { return 0x821E8FB0;  }
		/* 821E8F10h case   23:*/		return 0x821E8F14;
		  /* 821E8F14h */ case   24:  		/* addi R4, R1, 80 */
		/* 821E8F14h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821E8F14h case   24:*/		return 0x821E8F18;
		  /* 821E8F18h */ case   25:  		/* mr R3, R30 */
		/* 821E8F18h case   25:*/		regs.R3 = regs.R30;
		/* 821E8F18h case   25:*/		return 0x821E8F1C;
		  /* 821E8F1Ch */ case   26:  		/* bl 37732 */
		/* 821E8F1Ch case   26:*/		regs.LR = 0x821E8F20; return 0x821F2280;
		/* 821E8F1Ch case   26:*/		return 0x821E8F20;
		  /* 821E8F20h */ case   27:  		/* lwz R11, <#[R31 + 12]> */
		/* 821E8F20h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E8F20h case   27:*/		return 0x821E8F24;
		  /* 821E8F24h */ case   28:  		/* addi R11, R11, 4 */
		/* 821E8F24h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E8F24h case   28:*/		return 0x821E8F28;
		  /* 821E8F28h */ case   29:  		/* lwz R10, <#[R11]> */
		/* 821E8F28h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E8F28h case   29:*/		return 0x821E8F2C;
		  /* 821E8F2Ch */ case   30:  		/* b 12 */
		/* 821E8F2Ch case   30:*/		return 0x821E8F38;
		/* 821E8F2Ch case   30:*/		return 0x821E8F30;
		  /* 821E8F30h */ case   31:  		/* addi R11, R10, 8 */
		/* 821E8F30h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821E8F30h case   31:*/		return 0x821E8F34;
		  /* 821E8F34h */ case   32:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E8F34h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E8F34h case   32:*/		return 0x821E8F38;
	}
	return 0x821E8F38;
} // Block from 821E8EB4h-821E8F38h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821E8F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8F38);
		  /* 821E8F38h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821E8F38h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821E8F38h case    0:*/		return 0x821E8F3C;
		  /* 821E8F3Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821E8F3Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E8F30;  }
		/* 821E8F3Ch case    1:*/		return 0x821E8F40;
	}
	return 0x821E8F40;
} // Block from 821E8F38h-821E8F40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E8F40h
// Function '?XenosCos@D3DXShader@@YANN@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8F40);
		  /* 821E8F40h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 821E8F40h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821E8F40h case    0:*/		return 0x821E8F44;
		  /* 821E8F44h */ case    1:  		/* stw R10, <#[R11]> */
		/* 821E8F44h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E8F44h case    1:*/		return 0x821E8F48;
		  /* 821E8F48h */ case    2:  		/* lwz R11, <#[R3 + 4]> */
		/* 821E8F48h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E8F48h case    2:*/		return 0x821E8F4C;
		  /* 821E8F4Ch */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 821E8F4Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E8F4Ch case    3:*/		return 0x821E8F50;
		  /* 821E8F50h */ case    4:  		/* stw R31, <#[R3 + 4]> */
		/* 821E8F50h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 821E8F50h case    4:*/		return 0x821E8F54;
		  /* 821E8F54h */ case    5:  		/* stw R3, <#[R31 + 12]> */
		/* 821E8F54h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E8F54h case    5:*/		return 0x821E8F58;
		  /* 821E8F58h */ case    6:  		/* lwz R10, <#[R31]> */
		/* 821E8F58h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821E8F58h case    6:*/		return 0x821E8F5C;
		  /* 821E8F5Ch */ case    7:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821E8F5Ch case    7:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821E8F5Ch case    7:*/		return 0x821E8F60;
		  /* 821E8F60h */ case    8:  		/* lwz R11, <#[R1 + 84]> */
		/* 821E8F60h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821E8F60h case    8:*/		return 0x821E8F64;
		  /* 821E8F64h */ case    9:  		/* rlwinm R11, R11, 30, 18, 31 */
		/* 821E8F64h case    9:*/		cpu::op::rlwinm<0,30,18,31>(regs,&regs.R11,regs.R11);
		/* 821E8F64h case    9:*/		return 0x821E8F68;
		  /* 821E8F68h */ case   10:  		/* rlwinm R11, R11, 0, 30, 28 */
		/* 821E8F68h case   10:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R11,regs.R11);
		/* 821E8F68h case   10:*/		return 0x821E8F6C;
		  /* 821E8F6Ch */ case   11:  		/* rlwinm R8, R10, 24, 29, 30 */
		/* 821E8F6Ch case   11:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R8,regs.R10);
		/* 821E8F6Ch case   11:*/		return 0x821E8F70;
		  /* 821E8F70h */ case   12:  		/* rlwinm R11, R11, 0, 27, 23 */
		/* 821E8F70h case   12:*/		cpu::op::rlwinm<0,0,27,23>(regs,&regs.R11,regs.R11);
		/* 821E8F70h case   12:*/		return 0x821E8F74;
		  /* 821E8F74h */ case   13:  		/* rlwinm R7, R10, 26, 29, 30 */
		/* 821E8F74h case   13:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R7,regs.R10);
		/* 821E8F74h case   13:*/		return 0x821E8F78;
		  /* 821E8F78h */ case   14:  		/* ori R11, R11, 228 */
		/* 821E8F78h case   14:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE4);
		/* 821E8F78h case   14:*/		return 0x821E8F7C;
		  /* 821E8F7Ch */ case   15:  		/* srw R9, R11, R9 */
		/* 821E8F7Ch case   15:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821E8F7Ch case   15:*/		return 0x821E8F80;
		  /* 821E8F80h */ case   16:  		/* srw R8, R11, R8 */
		/* 821E8F80h case   16:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 821E8F80h case   16:*/		return 0x821E8F84;
		  /* 821E8F84h */ case   17:  		/* rlwimi R8, R9, 2, 28, 29 */
		/* 821E8F84h case   17:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 821E8F84h case   17:*/		return 0x821E8F88;
		  /* 821E8F88h */ case   18:  		/* srw R7, R11, R7 */
		/* 821E8F88h case   18:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 821E8F88h case   18:*/		return 0x821E8F8C;
		  /* 821E8F8Ch */ case   19:  		/* rlwinm R9, R10, 28, 29, 30 */
		/* 821E8F8Ch case   19:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R9,regs.R10);
		/* 821E8F8Ch case   19:*/		return 0x821E8F90;
		  /* 821E8F90h */ case   20:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821E8F90h case   20:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821E8F90h case   20:*/		return 0x821E8F94;
		  /* 821E8F94h */ case   21:  		/* srw R11, R11, R9 */
		/* 821E8F94h case   21:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E8F94h case   21:*/		return 0x821E8F98;
		  /* 821E8F98h */ case   22:  		/* rlwimi R7, R8, 2, 0, 29 */
		/* 821E8F98h case   22:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R8);
		/* 821E8F98h case   22:*/		return 0x821E8F9C;
		  /* 821E8F9Ch */ case   23:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821E8F9Ch case   23:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821E8F9Ch case   23:*/		return 0x821E8FA0;
		  /* 821E8FA0h */ case   24:  		/* rlwimi R11, R7, 2, 0, 29 */
		/* 821E8FA0h case   24:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 821E8FA0h case   24:*/		return 0x821E8FA4;
		  /* 821E8FA4h */ case   25:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821E8FA4h case   25:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821E8FA4h case   25:*/		return 0x821E8FA8;
		  /* 821E8FA8h */ case   26:  		/* or R11, R11, R10 */
		/* 821E8FA8h case   26:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E8FA8h case   26:*/		return 0x821E8FAC;
		  /* 821E8FACh */ case   27:  		/* stw R11, <#[R31]> */
		/* 821E8FACh case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E8FACh case   27:*/		return 0x821E8FB0;
	}
	return 0x821E8FB0;
} // Block from 821E8F40h-821E8FB0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821E8FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8FB0);
		  /* 821E8FB0h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821E8FB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E8FB0h case    0:*/		return 0x821E8FB4;
		  /* 821E8FB4h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821E8FB4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821E8FB4h case    1:*/		return 0x821E8FB8;
		  /* 821E8FB8h */ case    2:  		/* bc 4, CR6_EQ, -204 */
		/* 821E8FB8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E8EEC;  }
		/* 821E8FB8h case    2:*/		return 0x821E8FBC;
		  /* 821E8FBCh */ case    3:  		/* addi R29, R31, 8 */
		/* 821E8FBCh case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x8);
		/* 821E8FBCh case    3:*/		return 0x821E8FC0;
		  /* 821E8FC0h */ case    4:  		/* b -212 */
		/* 821E8FC0h case    4:*/		return 0x821E8EEC;
		/* 821E8FC0h case    4:*/		return 0x821E8FC4;
	}
	return 0x821E8FC4;
} // Block from 821E8FB0h-821E8FC4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E8FC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8FC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8FC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8FC4);
		  /* 821E8FC4h */ case    0:  		/* mr R3, R27 */
		/* 821E8FC4h case    0:*/		regs.R3 = regs.R27;
		/* 821E8FC4h case    0:*/		return 0x821E8FC8;
		  /* 821E8FC8h */ case    1:  		/* bl -542280 */
		/* 821E8FC8h case    1:*/		regs.LR = 0x821E8FCC; return 0x82164980;
		/* 821E8FC8h case    1:*/		return 0x821E8FCC;
		  /* 821E8FCCh */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E8FCCh case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E8FCCh case    2:*/		return 0x821E8FD0;
		  /* 821E8FD0h */ case    3:  		/* bc 12, CR0_EQ, 40 */
		/* 821E8FD0h case    3:*/		if ( regs.CR[0].eq ) { return 0x821E8FF8;  }
		/* 821E8FD0h case    3:*/		return 0x821E8FD4;
		  /* 821E8FD4h */ case    4:  		/* lwz R11, <#[R28]> */
		/* 821E8FD4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821E8FD4h case    4:*/		return 0x821E8FD8;
	}
	return 0x821E8FD8;
} // Block from 821E8FC4h-821E8FD8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E8FD8h
// Function '?FindPHIUseForPredecessor@Compiler@D3DXShader@@AAAPAVDependency@2@PAVInstruction@2@PAVBlock@2@PAV32@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8FD8);
		  /* 821E8FD8h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 821E8FD8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821E8FD8h case    0:*/		return 0x821E8FDC;
		  /* 821E8FDCh */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821E8FDCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E8FF8;  }
		/* 821E8FDCh case    1:*/		return 0x821E8FE0;
		  /* 821E8FE0h */ case    2:  		/* li R6, 1 */
		/* 821E8FE0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E8FE0h case    2:*/		return 0x821E8FE4;
		  /* 821E8FE4h */ case    3:  		/* li R5, 0 */
		/* 821E8FE4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E8FE4h case    3:*/		return 0x821E8FE8;
		  /* 821E8FE8h */ case    4:  		/* mr R4, R27 */
		/* 821E8FE8h case    4:*/		regs.R4 = regs.R27;
		/* 821E8FE8h case    4:*/		return 0x821E8FEC;
		  /* 821E8FECh */ case    5:  		/* mr R3, R30 */
		/* 821E8FECh case    5:*/		regs.R3 = regs.R30;
		/* 821E8FECh case    5:*/		return 0x821E8FF0;
		  /* 821E8FF0h */ case    6:  		/* bl 271320 */
		/* 821E8FF0h case    6:*/		regs.LR = 0x821E8FF4; return 0x8222B3C8;
		/* 821E8FF0h case    6:*/		return 0x821E8FF4;
		  /* 821E8FF4h */ case    7:  		/* b 528 */
		/* 821E8FF4h case    7:*/		return 0x821E9204;
		/* 821E8FF4h case    7:*/		return 0x821E8FF8;
	}
	return 0x821E8FF8;
} // Block from 821E8FD8h-821E8FF8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E8FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E8FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E8FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E8FF8);
		  /* 821E8FF8h */ case    0:  		/* lwz R26, <#[R27 + 28]> */
		/* 821E8FF8h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R27 + 0x0000001C) );
		/* 821E8FF8h case    0:*/		return 0x821E8FFC;
		  /* 821E8FFCh */ case    1:  		/* lwz R11, <#[R26 + 48]> */
		/* 821E8FFCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 821E8FFCh case    1:*/		return 0x821E9000;
		  /* 821E9000h */ case    2:  		/* lwz R31, <#[R26 + 8]> */
		/* 821E9000h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000008) );
		/* 821E9000h case    2:*/		return 0x821E9004;
		  /* 821E9004h */ case    3:  		/* rlwinm. R11, R11, 11, 31, 31 */
		/* 821E9004h case    3:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R11,regs.R11);
		/* 821E9004h case    3:*/		return 0x821E9008;
		  /* 821E9008h */ case    4:  		/* bc 4, CR0_EQ, 44 */
		/* 821E9008h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E9034;  }
		/* 821E9008h case    4:*/		return 0x821E900C;
		  /* 821E900Ch */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821E900Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E900Ch case    5:*/		return 0x821E9010;
		  /* 821E9010h */ case    6:  		/* bc 12, CR6_EQ, 500 */
		/* 821E9010h case    6:*/		if ( regs.CR[6].eq ) { return 0x821E9204;  }
		/* 821E9010h case    6:*/		return 0x821E9014;
		  /* 821E9014h */ case    7:  		/* li R7, 0 */
		/* 821E9014h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E9014h case    7:*/		return 0x821E9018;
		  /* 821E9018h */ case    8:  		/* lwz R5, <#[R31 + 4]> */
		/* 821E9018h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 821E9018h case    8:*/		return 0x821E901C;
		  /* 821E901Ch */ case    9:  		/* li R6, 0 */
		/* 821E901Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E901Ch case    9:*/		return 0x821E9020;
		  /* 821E9020h */ case   10:  		/* mr R4, R27 */
		/* 821E9020h case   10:*/		regs.R4 = regs.R27;
		/* 821E9020h case   10:*/		return 0x821E9024;
		  /* 821E9024h */ case   11:  		/* mr R3, R30 */
		/* 821E9024h case   11:*/		regs.R3 = regs.R30;
		/* 821E9024h case   11:*/		return 0x821E9028;
		  /* 821E9028h */ case   12:  		/* bl -1552 */
		/* 821E9028h case   12:*/		regs.LR = 0x821E902C; return 0x821E8A18;
		/* 821E9028h case   12:*/		return 0x821E902C;
		  /* 821E902Ch */ case   13:  		/* lwz R31, <#[R31 + 12]> */
		/* 821E902Ch case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E902Ch case   13:*/		return 0x821E9030;
		  /* 821E9030h */ case   14:  		/* b -36 */
		/* 821E9030h case   14:*/		return 0x821E900C;
		/* 821E9030h case   14:*/		return 0x821E9034;
	}
	return 0x821E9034;
} // Block from 821E8FF8h-821E9034h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821E9034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9034);
		  /* 821E9034h */ case    0:  		/* li R28, 0 */
		/* 821E9034h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821E9034h case    0:*/		return 0x821E9038;
		  /* 821E9038h */ case    1:  		/* li R29, 0 */
		/* 821E9038h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821E9038h case    1:*/		return 0x821E903C;
		  /* 821E903Ch */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821E903Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E903Ch case    2:*/		return 0x821E9040;
		  /* 821E9040h */ case    3:  		/* bc 12, CR6_EQ, 84 */
		/* 821E9040h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E9094;  }
		/* 821E9040h case    3:*/		return 0x821E9044;
		  /* 821E9044h */ case    4:  		/* lwz R5, <#[R31 + 4]> */
		/* 821E9044h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 821E9044h case    4:*/		return 0x821E9048;
		  /* 821E9048h */ case    5:  		/* lwz R11, <#[R5 + 12]> */
		/* 821E9048h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x0000000C) );
		/* 821E9048h case    5:*/		return 0x821E904C;
		  /* 821E904Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821E904Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E904Ch case    6:*/		return 0x821E9050;
		  /* 821E9050h */ case    7:  		/* bc 12, CR6_EQ, 40 */
		/* 821E9050h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E9078;  }
		/* 821E9050h case    7:*/		return 0x821E9054;
		  /* 821E9054h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 821E9054h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E9054h case    8:*/		return 0x821E9058;
		  /* 821E9058h */ case    9:  		/* lwz R9, <#[R10 + 48]> */
		/* 821E9058h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000030) );
		/* 821E9058h case    9:*/		return 0x821E905C;
		  /* 821E905Ch */ case   10:  		/* rlwinm. R9, R9, 13, 31, 31 */
		/* 821E905Ch case   10:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R9,regs.R9);
		/* 821E905Ch case   10:*/		return 0x821E9060;
		  /* 821E9060h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 821E9060h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821E906C;  }
		/* 821E9060h case   11:*/		return 0x821E9064;
		  /* 821E9064h */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E9064h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E9064h case   12:*/		return 0x821E9068;
		  /* 821E9068h */ case   13:  		/* b -28 */
		/* 821E9068h case   13:*/		return 0x821E904C;
		/* 821E9068h case   13:*/		return 0x821E906C;
	}
	return 0x821E906C;
} // Block from 821E9034h-821E906Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E906Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E906C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E906C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E906C);
		  /* 821E906Ch */ case    0:  		/* mr R28, R5 */
		/* 821E906Ch case    0:*/		regs.R28 = regs.R5;
		/* 821E906Ch case    0:*/		return 0x821E9070;
		  /* 821E9070h */ case    1:  		/* mr R29, R10 */
		/* 821E9070h case    1:*/		regs.R29 = regs.R10;
		/* 821E9070h case    1:*/		return 0x821E9074;
		  /* 821E9074h */ case    2:  		/* b 24 */
		/* 821E9074h case    2:*/		return 0x821E908C;
		/* 821E9074h case    2:*/		return 0x821E9078;
	}
	return 0x821E9078;
} // Block from 821E906Ch-821E9078h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E9078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9078);
		  /* 821E9078h */ case    0:  		/* li R7, 0 */
		/* 821E9078h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E9078h case    0:*/		return 0x821E907C;
		  /* 821E907Ch */ case    1:  		/* li R6, 0 */
		/* 821E907Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E907Ch case    1:*/		return 0x821E9080;
		  /* 821E9080h */ case    2:  		/* mr R4, R27 */
		/* 821E9080h case    2:*/		regs.R4 = regs.R27;
		/* 821E9080h case    2:*/		return 0x821E9084;
		  /* 821E9084h */ case    3:  		/* mr R3, R30 */
		/* 821E9084h case    3:*/		regs.R3 = regs.R30;
		/* 821E9084h case    3:*/		return 0x821E9088;
		  /* 821E9088h */ case    4:  		/* bl -1648 */
		/* 821E9088h case    4:*/		regs.LR = 0x821E908C; return 0x821E8A18;
		/* 821E9088h case    4:*/		return 0x821E908C;
	}
	return 0x821E908C;
} // Block from 821E9078h-821E908Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E908Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E908C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E908C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E908C);
		  /* 821E908Ch */ case    0:  		/* lwz R31, <#[R31 + 12]> */
		/* 821E908Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E908Ch case    0:*/		return 0x821E9090;
		  /* 821E9090h */ case    1:  		/* b -84 */
		/* 821E9090h case    1:*/		return 0x821E903C;
		/* 821E9090h case    1:*/		return 0x821E9094;
	}
	return 0x821E9094;
} // Block from 821E908Ch-821E9094h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E9094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9094);
		  /* 821E9094h */ case    0:  		/* lwz R11, <#[R29 + 116]> */
		/* 821E9094h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000074) );
		/* 821E9094h case    0:*/		return 0x821E9098;
		  /* 821E9098h */ case    1:  		/* addi R31, R11, 16 */
		/* 821E9098h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x10);
		/* 821E9098h case    1:*/		return 0x821E909C;
		  /* 821E909Ch */ case    2:  		/* lwz R11, <#[R11 + 16]> */
		/* 821E909Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821E909Ch case    2:*/		return 0x821E90A0;
		  /* 821E90A0h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 821E90A0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821E90A0h case    3:*/		return 0x821E90A4;
		  /* 821E90A4h */ case    4:  		/* bc 12, CR6_EQ, 120 */
		/* 821E90A4h case    4:*/		if ( regs.CR[6].eq ) { return 0x821E911C;  }
		/* 821E90A4h case    4:*/		return 0x821E90A8;
		  /* 821E90A8h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821E90A8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E90A8h case    5:*/		return 0x821E90AC;
		  /* 821E90ACh */ case    6:  		/* bc 12, CR6_EQ, 112 */
		/* 821E90ACh case    6:*/		if ( regs.CR[6].eq ) { return 0x821E911C;  }
		/* 821E90ACh case    6:*/		return 0x821E90B0;
		  /* 821E90B0h */ case    7:  		/* lwz R5, <#[R31]> */
		/* 821E90B0h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 821E90B0h case    7:*/		return 0x821E90B4;
		  /* 821E90B4h */ case    8:  		/* lwz R11, <#[R5 + 48]> */
		/* 821E90B4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000030) );
		/* 821E90B4h case    8:*/		return 0x821E90B8;
		  /* 821E90B8h */ case    9:  		/* rlwinm. R10, R11, 10, 31, 31 */
		/* 821E90B8h case    9:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R11);
		/* 821E90B8h case    9:*/		return 0x821E90BC;
		  /* 821E90BCh */ case   10:  		/* bc 4, CR0_EQ, 88 */
		/* 821E90BCh case   10:*/		if ( !regs.CR[0].eq ) { return 0x821E9114;  }
		/* 821E90BCh case   10:*/		return 0x821E90C0;
	}
	return 0x821E90C0;
} // Block from 821E9094h-821E90C0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E90C0h
// Function '?FindSetBit@?$DynamicBitSet@I$1?AllocInContext@CompilerHeap@D3DXShader@@SAPAXPAXK@Z$1?FreeInContext@23@SAX00K@Z@D3DXShader@@QAAII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E90C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E90C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E90C0);
		  /* 821E90C0h */ case    0:  		/* rlwinm. R11, R11, 12, 31, 31 */
		/* 821E90C0h case    0:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R11,regs.R11);
		/* 821E90C0h case    0:*/		return 0x821E90C4;
		  /* 821E90C4h */ case    1:  		/* bc 12, CR0_EQ, 80 */
		/* 821E90C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E9114;  }
		/* 821E90C4h case    1:*/		return 0x821E90C8;
		  /* 821E90C8h */ case    2:  		/* lwz R11, <#[R30 + 12]> */
		/* 821E90C8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E90C8h case    2:*/		return 0x821E90CC;
		  /* 821E90CCh */ case    3:  		/* add R11, R11, R23 */
		/* 821E90CCh case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 821E90CCh case    3:*/		return 0x821E90D0;
		  /* 821E90D0h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E90D0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E90D0h case    4:*/		return 0x821E90D4;
		  /* 821E90D4h */ case    5:  		/* rlwinm. R11, R11, 0, 4, 4 */
		/* 821E90D4h case    5:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R11);
		/* 821E90D4h case    5:*/		return 0x821E90D8;
		  /* 821E90D8h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 821E90D8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E90E8;  }
		/* 821E90D8h case    6:*/		return 0x821E90DC;
		  /* 821E90DCh */ case    7:  		/* mr R7, R28 */
		/* 821E90DCh case    7:*/		regs.R7 = regs.R28;
		/* 821E90DCh case    7:*/		return 0x821E90E0;
		  /* 821E90E0h */ case    8:  		/* mr R6, R29 */
		/* 821E90E0h case    8:*/		regs.R6 = regs.R29;
		/* 821E90E0h case    8:*/		return 0x821E90E4;
		  /* 821E90E4h */ case    9:  		/* b 36 */
		/* 821E90E4h case    9:*/		return 0x821E9108;
		/* 821E90E4h case    9:*/		return 0x821E90E8;
	}
	return 0x821E90E8;
} // Block from 821E90C0h-821E90E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E90E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E90E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E90E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E90E8);
		  /* 821E90E8h */ case    0:  		/* lwz R11, <#[R29 + 116]> */
		/* 821E90E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000074) );
		/* 821E90E8h case    0:*/		return 0x821E90EC;
		  /* 821E90ECh */ case    1:  		/* li R7, 0 */
		/* 821E90ECh case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E90ECh case    1:*/		return 0x821E90F0;
		  /* 821E90F0h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E90F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E90F0h case    2:*/		return 0x821E90F4;
		  /* 821E90F4h */ case    3:  		/* lwz R11, <#[R11 + 16]> */
		/* 821E90F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821E90F4h case    3:*/		return 0x821E90F8;
		  /* 821E90F8h */ case    4:  		/* cmplw CR6, R25, R11 */
		/* 821E90F8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 821E90F8h case    4:*/		return 0x821E90FC;
		  /* 821E90FCh */ case    5:  		/* bc 12, CR6_EQ, -28 */
		/* 821E90FCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821E90E0;  }
		/* 821E90FCh case    5:*/		return 0x821E9100;
		  /* 821E9100h */ case    6:  		/* li R6, 0 */
		/* 821E9100h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E9100h case    6:*/		return 0x821E9104;
		  /* 821E9104h */ case    7:  		/* mr R5, R28 */
		/* 821E9104h case    7:*/		regs.R5 = regs.R28;
		/* 821E9104h case    7:*/		return 0x821E9108;
	}
	return 0x821E9108;
} // Block from 821E90E8h-821E9108h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E9108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9108);
		  /* 821E9108h */ case    0:  		/* mr R4, R27 */
		/* 821E9108h case    0:*/		regs.R4 = regs.R27;
		/* 821E9108h case    0:*/		return 0x821E910C;
		  /* 821E910Ch */ case    1:  		/* mr R3, R30 */
		/* 821E910Ch case    1:*/		regs.R3 = regs.R30;
		/* 821E910Ch case    1:*/		return 0x821E9110;
		  /* 821E9110h */ case    2:  		/* bl -1784 */
		/* 821E9110h case    2:*/		regs.LR = 0x821E9114; return 0x821E8A18;
		/* 821E9110h case    2:*/		return 0x821E9114;
	}
	return 0x821E9114;
} // Block from 821E9108h-821E9114h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E9114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9114);
		  /* 821E9114h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821E9114h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821E9114h case    0:*/		return 0x821E9118;
		  /* 821E9118h */ case    1:  		/* b -112 */
		/* 821E9118h case    1:*/		return 0x821E90A8;
		/* 821E9118h case    1:*/		return 0x821E911C;
	}
	return 0x821E911C;
} // Block from 821E9114h-821E911Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E911Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E911C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E911C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E911C);
		  /* 821E911Ch */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821E911Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821E911Ch case    0:*/		return 0x821E9120;
		  /* 821E9120h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821E9120h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821E9120h case    1:*/		return 0x821E9124;
		  /* 821E9124h */ case    2:  		/* bc 4, CR6_EQ, 224 */
		/* 821E9124h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E9204;  }
		/* 821E9124h case    2:*/		return 0x821E9128;
		  /* 821E9128h */ case    3:  		/* lwz R11, <#[R26 + 8]> */
		/* 821E9128h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821E9128h case    3:*/		return 0x821E912C;
		  /* 821E912Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E912Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E912Ch case    4:*/		return 0x821E9130;
		  /* 821E9130h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821E9130h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E9150;  }
		/* 821E9130h case    5:*/		return 0x821E9134;
		  /* 821E9134h */ case    6:  		/* lwz R31, <#[R11 + 4]> */
		/* 821E9134h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821E9134h case    6:*/		return 0x821E9138;
		  /* 821E9138h */ case    7:  		/* lwz R10, <#[R31 + 40]> */
		/* 821E9138h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 821E9138h case    7:*/		return 0x821E913C;
		  /* 821E913Ch */ case    8:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E913Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E913Ch case    8:*/		return 0x821E9140;
		  /* 821E9140h */ case    9:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E9140h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E9140h case    9:*/		return 0x821E9144;
		  /* 821E9144h */ case   10:  		/* bc 4, CR0_EQ, 84 */
		/* 821E9144h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821E9198;  }
		/* 821E9144h case   10:*/		return 0x821E9148;
		  /* 821E9148h */ case   11:  		/* lwz R11, <#[R11 + 12]> */
		/* 821E9148h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E9148h case   11:*/		return 0x821E914C;
		  /* 821E914Ch */ case   12:  		/* b -32 */
		/* 821E914Ch case   12:*/		return 0x821E912C;
		/* 821E914Ch case   12:*/		return 0x821E9150;
	}
	return 0x821E9150;
} // Block from 821E911Ch-821E9150h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E9150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9150);
		  /* 821E9150h */ case    0:  		/* mr R3, R30 */
		/* 821E9150h case    0:*/		regs.R3 = regs.R30;
		/* 821E9150h case    0:*/		return 0x821E9154;
		  /* 821E9154h */ case    1:  		/* bl -508444 */
		/* 821E9154h case    1:*/		regs.LR = 0x821E9158; return 0x8216CF38;
		/* 821E9154h case    1:*/		return 0x821E9158;
		  /* 821E9158h */ case    2:  		/* rlwinm R9, R26, 0, 0, 30 */
		/* 821E9158h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R26);
		/* 821E9158h case    2:*/		return 0x821E915C;
		  /* 821E915Ch */ case    3:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821E915Ch case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821E915Ch case    3:*/		return 0x821E9160;
		  /* 821E9160h */ case    4:  		/* mr R5, R30 */
		/* 821E9160h case    4:*/		regs.R5 = regs.R30;
		/* 821E9160h case    4:*/		return 0x821E9164;
		  /* 821E9164h */ case    5:  		/* addi R10, R11, 4 */
		/* 821E9164h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E9164h case    5:*/		return 0x821E9168;
		  /* 821E9168h */ case    6:  		/* mr R4, R26 */
		/* 821E9168h case    6:*/		regs.R4 = regs.R26;
		/* 821E9168h case    6:*/		return 0x821E916C;
		  /* 821E916Ch */ case    7:  		/* lwz R8, <#[R9]> */
		/* 821E916Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821E916Ch case    7:*/		return 0x821E9170;
		  /* 821E9170h */ case    8:  		/* mr R31, R3 */
		/* 821E9170h case    8:*/		regs.R31 = regs.R3;
		/* 821E9170h case    8:*/		return 0x821E9174;
		  /* 821E9174h */ case    9:  		/* stw R8, <#[R11]> */
		/* 821E9174h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821E9174h case    9:*/		return 0x821E9178;
		  /* 821E9178h */ case   10:  		/* lwz R8, <#[R9]> */
		/* 821E9178h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821E9178h case   10:*/		return 0x821E917C;
		  /* 821E917Ch */ case   11:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821E917Ch case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821E917Ch case   11:*/		return 0x821E9180;
		  /* 821E9180h */ case   12:  		/* stw R11, <#[R8]> */
		/* 821E9180h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821E9180h case   12:*/		return 0x821E9184;
		  /* 821E9184h */ case   13:  		/* stw R9, <#[R11 + 4]> */
		/* 821E9184h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821E9184h case   13:*/		return 0x821E9188;
		  /* 821E9188h */ case   14:  		/* stw R10, <#[R9]> */
		/* 821E9188h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821E9188h case   14:*/		return 0x821E918C;
		  /* 821E918Ch */ case   15:  		/* bl 289108 */
		/* 821E918Ch case   15:*/		regs.LR = 0x821E9190; return 0x8222FAE0;
		/* 821E918Ch case   15:*/		return 0x821E9190;
	}
	return 0x821E9190;
} // Block from 821E9150h-821E9190h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E9190h
// Function '?MustPropagateVariableDefinition@Compiler@D3DXShader@@AAA_NVResult@2@IIPAVBlock@2@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9190);
		  /* 821E9190h */ case    0:  		/* mr R3, R30 */
		/* 821E9190h case    0:*/		regs.R3 = regs.R30;
		/* 821E9190h case    0:*/		return 0x821E9194;
		  /* 821E9194h */ case    1:  		/* bl 8588 */
		/* 821E9194h case    1:*/		regs.LR = 0x821E9198; return 0x821EB320;
		/* 821E9194h case    1:*/		return 0x821E9198;
	}
	return 0x821E9198;
} // Block from 821E9190h-821E9198h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E9198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9198);
		  /* 821E9198h */ case    0:  		/* li R8, 1 */
		/* 821E9198h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821E9198h case    0:*/		return 0x821E919C;
		  /* 821E919Ch */ case    1:  		/* li R7, 0 */
		/* 821E919Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821E919Ch case    1:*/		return 0x821E91A0;
		  /* 821E91A0h */ case    2:  		/* li R6, 116 */
		/* 821E91A0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x74);
		/* 821E91A0h case    2:*/		return 0x821E91A4;
		  /* 821E91A4h */ case    3:  		/* addi R5, R31, 16 */
		/* 821E91A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x10);
		/* 821E91A4h case    3:*/		return 0x821E91A8;
		  /* 821E91A8h */ case    4:  		/* mr R4, R31 */
		/* 821E91A8h case    4:*/		regs.R4 = regs.R31;
		/* 821E91A8h case    4:*/		return 0x821E91AC;
		  /* 821E91ACh */ case    5:  		/* mr R3, R30 */
		/* 821E91ACh case    5:*/		regs.R3 = regs.R30;
		/* 821E91ACh case    5:*/		return 0x821E91B0;
		  /* 821E91B0h */ case    6:  		/* bl 243688 */
		/* 821E91B0h case    6:*/		regs.LR = 0x821E91B4; return 0x82224998;
		/* 821E91B0h case    6:*/		return 0x821E91B4;
		  /* 821E91B4h */ case    7:  		/* mr R31, R3 */
		/* 821E91B4h case    7:*/		regs.R31 = regs.R3;
		/* 821E91B4h case    7:*/		return 0x821E91B8;
		  /* 821E91B8h */ case    8:  		/* li R6, 1 */
		/* 821E91B8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E91B8h case    8:*/		return 0x821E91BC;
		  /* 821E91BCh */ case    9:  		/* li R5, 0 */
		/* 821E91BCh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E91BCh case    9:*/		return 0x821E91C0;
		  /* 821E91C0h */ case   10:  		/* li R4, 116 */
		/* 821E91C0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x74);
		/* 821E91C0h case   10:*/		return 0x821E91C4;
		  /* 821E91C4h */ case   11:  		/* mr R3, R30 */
		/* 821E91C4h case   11:*/		regs.R3 = regs.R30;
		/* 821E91C4h case   11:*/		return 0x821E91C8;
		  /* 821E91C8h */ case   12:  		/* bl -544152 */
		/* 821E91C8h case   12:*/		regs.LR = 0x821E91CC; return 0x82164430;
		/* 821E91C8h case   12:*/		return 0x821E91CC;
		  /* 821E91CCh */ case   13:  		/* addi R11, R31, -4 */
		/* 821E91CCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFC);
		/* 821E91CCh case   13:*/		return 0x821E91D0;
		  /* 821E91D0h */ case   14:  		/* mr R4, R31 */
		/* 821E91D0h case   14:*/		regs.R4 = regs.R31;
		/* 821E91D0h case   14:*/		return 0x821E91D4;
		  /* 821E91D4h */ case   15:  		/* add R11, R3, R11 */
		/* 821E91D4h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821E91D4h case   15:*/		return 0x821E91D8;
		  /* 821E91D8h */ case   16:  		/* mr R3, R30 */
		/* 821E91D8h case   16:*/		regs.R3 = regs.R30;
		/* 821E91D8h case   16:*/		return 0x821E91DC;
		  /* 821E91DCh */ case   17:  		/* lwz R10, <#[R11]> */
		/* 821E91DCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E91DCh case   17:*/		return 0x821E91E0;
		  /* 821E91E0h */ case   18:  		/* rlwimi R10, R25, 0, 17, 31 */
		/* 821E91E0h case   18:*/		cpu::op::rlwimi<0,0,17,31>(regs,&regs.R10,regs.R25);
		/* 821E91E0h case   18:*/		return 0x821E91E4;
		  /* 821E91E4h */ case   19:  		/* stw R10, <#[R11]> */
		/* 821E91E4h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E91E4h case   19:*/		return 0x821E91E8;
		  /* 821E91E8h */ case   20:  		/* lwz R9, <#[R24]> */
		/* 821E91E8h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R24 + 0x00000000) );
		/* 821E91E8h case   20:*/		return 0x821E91EC;
		  /* 821E91ECh */ case   21:  		/* rlwimi R9, R10, 0, 17, 2 */
		/* 821E91ECh case   21:*/		cpu::op::rlwimi<0,0,17,2>(regs,&regs.R9,regs.R10);
		/* 821E91ECh case   21:*/		return 0x821E91F0;
		  /* 821E91F0h */ case   22:  		/* stw R9, <#[R11]> */
		/* 821E91F0h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E91F0h case   22:*/		return 0x821E91F4;
		  /* 821E91F4h */ case   23:  		/* bl -463348 */
		/* 821E91F4h case   23:*/		regs.LR = 0x821E91F8; return 0x82178000;
		/* 821E91F4h case   23:*/		return 0x821E91F8;
		  /* 821E91F8h */ case   24:  		/* mr R4, R3 */
		/* 821E91F8h case   24:*/		regs.R4 = regs.R3;
		/* 821E91F8h case   24:*/		return 0x821E91FC;
		  /* 821E91FCh */ case   25:  		/* mr R3, R27 */
		/* 821E91FCh case   25:*/		regs.R3 = regs.R27;
		/* 821E91FCh case   25:*/		return 0x821E9200;
		  /* 821E9200h */ case   26:  		/* bl -462904 */
		/* 821E9200h case   26:*/		regs.LR = 0x821E9204; return 0x821781C8;
		/* 821E9200h case   26:*/		return 0x821E9204;
	}
	return 0x821E9204;
} // Block from 821E9198h-821E9204h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821E9204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9204);
		  /* 821E9204h */ case    0:  		/* addi R1, R1, 176 */
		/* 821E9204h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821E9204h case    0:*/		return 0x821E9208;
		  /* 821E9208h */ case    1:  		/* b -1408884 */
		/* 821E9208h case    1:*/		return 0x82091294;
		/* 821E9208h case    1:*/		return 0x821E920C;
		  /* 821E920Ch */ case    2:  		/* nop */
		/* 821E920Ch case    2:*/		cpu::op::nop();
		/* 821E920Ch case    2:*/		return 0x821E9210;
	}
	return 0x821E9210;
} // Block from 821E9204h-821E9210h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E9210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9210);
		  /* 821E9210h */ case    0:  		/* mfspr R12, LR */
		/* 821E9210h case    0:*/		regs.R12 = regs.LR;
		/* 821E9210h case    0:*/		return 0x821E9214;
		  /* 821E9214h */ case    1:  		/* bl -1408976 */
		/* 821E9214h case    1:*/		regs.LR = 0x821E9218; return 0x82091244;
		/* 821E9214h case    1:*/		return 0x821E9218;
		  /* 821E9218h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821E9218h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821E9218h case    2:*/		return 0x821E921C;
		  /* 821E921Ch */ case    3:  		/* mr R27, R4 */
		/* 821E921Ch case    3:*/		regs.R27 = regs.R4;
		/* 821E921Ch case    3:*/		return 0x821E9220;
		  /* 821E9220h */ case    4:  		/* mr R25, R5 */
		/* 821E9220h case    4:*/		regs.R25 = regs.R5;
		/* 821E9220h case    4:*/		return 0x821E9224;
		  /* 821E9224h */ case    5:  		/* li R5, 6 */
		/* 821E9224h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 821E9224h case    5:*/		return 0x821E9228;
		  /* 821E9228h */ case    6:  		/* li R4, 8 */
		/* 821E9228h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821E9228h case    6:*/		return 0x821E922C;
		  /* 821E922Ch */ case    7:  		/* mr R28, R3 */
		/* 821E922Ch case    7:*/		regs.R28 = regs.R3;
		/* 821E922Ch case    7:*/		return 0x821E9230;
		  /* 821E9230h */ case    8:  		/* mr R24, R6 */
		/* 821E9230h case    8:*/		regs.R24 = regs.R6;
		/* 821E9230h case    8:*/		return 0x821E9234;
		  /* 821E9234h */ case    9:  		/* bl -543044 */
		/* 821E9234h case    9:*/		regs.LR = 0x821E9238; return 0x821648F0;
		/* 821E9234h case    9:*/		return 0x821E9238;
		  /* 821E9238h */ case   10:  		/* addi R23, R3, 4 */
		/* 821E9238h case   10:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R3,0x4);
		/* 821E9238h case   10:*/		return 0x821E923C;
		  /* 821E923Ch */ case   11:  		/* ori R11, R3, 1 */
		/* 821E923Ch case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821E923Ch case   11:*/		return 0x821E9240;
		  /* 821E9240h */ case   12:  		/* ori R10, R23, 1 */
		/* 821E9240h case   12:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R23,0x1);
		/* 821E9240h case   12:*/		return 0x821E9244;
		  /* 821E9244h */ case   13:  		/* mr R29, R3 */
		/* 821E9244h case   13:*/		regs.R29 = regs.R3;
		/* 821E9244h case   13:*/		return 0x821E9248;
		  /* 821E9248h */ case   14:  		/* stw R11, <#[R3 + 4]> */
		/* 821E9248h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E9248h case   14:*/		return 0x821E924C;
		  /* 821E924Ch */ case   15:  		/* stw R10, <#[R3]> */
		/* 821E924Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821E924Ch case   15:*/		return 0x821E9250;
		  /* 821E9250h */ case   16:  		/* lwz R26, <#[R27 + 8]> */
		/* 821E9250h case   16:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R27 + 0x00000008) );
		/* 821E9250h case   16:*/		return 0x821E9254;
		  /* 821E9254h */ case   17:  		/* cmplwi CR6, R26, 0 */
		/* 821E9254h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821E9254h case   17:*/		return 0x821E9258;
		  /* 821E9258h */ case   18:  		/* bc 12, CR6_EQ, 284 */
		/* 821E9258h case   18:*/		if ( regs.CR[6].eq ) { return 0x821E9374;  }
		/* 821E9258h case   18:*/		return 0x821E925C;
		  /* 821E925Ch */ case   19:  		/* lwz R30, <#[R26 + 4]> */
		/* 821E925Ch case   19:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000004) );
		/* 821E925Ch case   19:*/		return 0x821E9260;
		  /* 821E9260h */ case   20:  		/* lwz R11, <#[R30 + 12]> */
		/* 821E9260h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E9260h case   20:*/		return 0x821E9264;
		  /* 821E9264h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821E9264h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9264h case   21:*/		return 0x821E9268;
		  /* 821E9268h */ case   22:  		/* bc 12, CR6_EQ, 392 */
		/* 821E9268h case   22:*/		if ( regs.CR[6].eq ) { return 0x821E93F0;  }
		/* 821E9268h case   22:*/		return 0x821E926C;
		  /* 821E926Ch */ case   23:  		/* lwz R31, <#[R11]> */
		/* 821E926Ch case   23:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821E926Ch case   23:*/		return 0x821E9270;
		  /* 821E9270h */ case   24:  		/* cmplw CR6, R31, R27 */
		/* 821E9270h case   24:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R27);
		/* 821E9270h case   24:*/		return 0x821E9274;
		  /* 821E9274h */ case   25:  		/* bc 4, CR6_EQ, 12 */
		/* 821E9274h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821E9280;  }
		/* 821E9274h case   25:*/		return 0x821E9278;
		  /* 821E9278h */ case   26:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E9278h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E9278h case   26:*/		return 0x821E927C;
		  /* 821E927Ch */ case   27:  		/* b -24 */
		/* 821E927Ch case   27:*/		return 0x821E9264;
		/* 821E927Ch case   27:*/		return 0x821E9280;
	}
	return 0x821E9280;
} // Block from 821E9210h-821E9280h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821E9280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9280);
		  /* 821E9280h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821E9280h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E9280h case    0:*/		return 0x821E9284;
		  /* 821E9284h */ case    1:  		/* bc 12, CR6_EQ, 364 */
		/* 821E9284h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E93F0;  }
		/* 821E9284h case    1:*/		return 0x821E9288;
		  /* 821E9288h */ case    2:  		/* mr R7, R24 */
		/* 821E9288h case    2:*/		regs.R7 = regs.R24;
		/* 821E9288h case    2:*/		return 0x821E928C;
		  /* 821E928Ch */ case    3:  		/* mr R6, R25 */
		/* 821E928Ch case    3:*/		regs.R6 = regs.R25;
		/* 821E928Ch case    3:*/		return 0x821E9290;
		  /* 821E9290h */ case    4:  		/* mr R5, R31 */
		/* 821E9290h case    4:*/		regs.R5 = regs.R31;
		/* 821E9290h case    4:*/		return 0x821E9294;
		  /* 821E9294h */ case    5:  		/* mr R4, R28 */
		/* 821E9294h case    5:*/		regs.R4 = regs.R28;
		/* 821E9294h case    5:*/		return 0x821E9298;
		  /* 821E9298h */ case    6:  		/* addi R3, R1, 80 */
		/* 821E9298h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821E9298h case    6:*/		return 0x821E929C;
		  /* 821E929Ch */ case    7:  		/* bl 247724 */
		/* 821E929Ch case    7:*/		regs.LR = 0x821E92A0; return 0x82225A48;
		/* 821E929Ch case    7:*/		return 0x821E92A0;
		  /* 821E92A0h */ case    8:  		/* addi R4, R1, 80 */
		/* 821E92A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821E92A0h case    8:*/		return 0x821E92A4;
		  /* 821E92A4h */ case    9:  		/* mr R3, R28 */
		/* 821E92A4h case    9:*/		regs.R3 = regs.R28;
		/* 821E92A4h case    9:*/		return 0x821E92A8;
		  /* 821E92A8h */ case   10:  		/* bl 37080 */
		/* 821E92A8h case   10:*/		regs.LR = 0x821E92AC; return 0x821F2380;
		/* 821E92A8h case   10:*/		return 0x821E92AC;
		  /* 821E92ACh */ case   11:  		/* mr R7, R3 */
		/* 821E92ACh case   11:*/		regs.R7 = regs.R3;
		/* 821E92ACh case   11:*/		return 0x821E92B0;
		  /* 821E92B0h */ case   12:  		/* mr R6, R3 */
		/* 821E92B0h case   12:*/		regs.R6 = regs.R3;
		/* 821E92B0h case   12:*/		return 0x821E92B4;
		  /* 821E92B4h */ case   13:  		/* addi R5, R31, 24 */
		/* 821E92B4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x18);
		/* 821E92B4h case   13:*/		return 0x821E92B8;
		  /* 821E92B8h */ case   14:  		/* mr R4, R31 */
		/* 821E92B8h case   14:*/		regs.R4 = regs.R31;
		/* 821E92B8h case   14:*/		return 0x821E92BC;
		  /* 821E92BCh */ case   15:  		/* mr R3, R28 */
		/* 821E92BCh case   15:*/		regs.R3 = regs.R28;
		/* 821E92BCh case   15:*/		return 0x821E92C0;
		  /* 821E92C0h */ case   16:  		/* bl -455816 */
		/* 821E92C0h case   16:*/		regs.LR = 0x821E92C4; return 0x82179E38;
		/* 821E92C0h case   16:*/		return 0x821E92C4;
		  /* 821E92C4h */ case   17:  		/* lwz R11, <#[R1 + 84]> */
		/* 821E92C4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821E92C4h case   17:*/		return 0x821E92C8;
		  /* 821E92C8h */ case   18:  		/* stw R3, <#[R1 + 80]> */
		/* 821E92C8h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 821E92C8h case   18:*/		return 0x821E92CC;
		  /* 821E92CCh */ case   19:  		/* mr R5, R28 */
		/* 821E92CCh case   19:*/		regs.R5 = regs.R28;
		/* 821E92CCh case   19:*/		return 0x821E92D0;
		  /* 821E92D0h */ case   20:  		/* rlwinm R11, R11, 0, 15, 15 */
		/* 821E92D0h case   20:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R11,regs.R11);
		/* 821E92D0h case   20:*/		return 0x821E92D4;
		  /* 821E92D4h */ case   21:  		/* mr R4, R25 */
		/* 821E92D4h case   21:*/		regs.R4 = regs.R25;
		/* 821E92D4h case   21:*/		return 0x821E92D8;
		  /* 821E92D8h */ case   22:  		/* ori R11, R11, 1 */
		/* 821E92D8h case   22:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E92D8h case   22:*/		return 0x821E92DC;
		  /* 821E92DCh */ case   23:  		/* mr R3, R31 */
		/* 821E92DCh case   23:*/		regs.R3 = regs.R31;
		/* 821E92DCh case   23:*/		return 0x821E92E0;
		  /* 821E92E0h */ case   24:  		/* stw R11, <#[R1 + 84]> */
		/* 821E92E0h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821E92E0h case   24:*/		return 0x821E92E4;
		  /* 821E92E4h */ case   25:  		/* bl 30412 */
		/* 821E92E4h case   25:*/		regs.LR = 0x821E92E8; return 0x821F09B0;
		/* 821E92E4h case   25:*/		return 0x821E92E8;
		  /* 821E92E8h */ case   26:  		/* ld R11, <#[R1 + 80]> */
		/* 821E92E8h case   26:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821E92E8h case   26:*/		return 0x821E92EC;
		  /* 821E92ECh */ case   27:  		/* rlwinm R10, R24, 3, 0, 28 */
		/* 821E92ECh case   27:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R24);
		/* 821E92ECh case   27:*/		return 0x821E92F0;
		  /* 821E92F0h */ case   28:  		/* mr R31, R30 */
		/* 821E92F0h case   28:*/		regs.R31 = regs.R30;
		/* 821E92F0h case   28:*/		return 0x821E92F4;
		  /* 821E92F4h */ case   29:  		/* stdx R11, <#[R3 + R10]> */
		/* 821E92F4h case   29:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 821E92F4h case   29:*/		return 0x821E92F8;
		  /* 821E92F8h */ case   30:  		/* lwz R11, <#[R31 + 48]> */
		/* 821E92F8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821E92F8h case   30:*/		return 0x821E92FC;
		  /* 821E92FCh */ case   31:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821E92FCh case   31:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821E92FCh case   31:*/		return 0x821E9300;
		  /* 821E9300h */ case   32:  		/* bc 4, CR0_EQ, 16 */
		/* 821E9300h case   32:*/		if ( !regs.CR[0].eq ) { return 0x821E9310;  }
		/* 821E9300h case   32:*/		return 0x821E9304;
		  /* 821E9304h */ case   33:  		/* lwz R31, <#[R31 + 52]> */
		/* 821E9304h case   33:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000034) );
		/* 821E9304h case   33:*/		return 0x821E9308;
	}
	return 0x821E9308;
} // Block from 821E9280h-821E9308h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821E9308h
// Function '?IsolateVariable@Compiler@D3DXShader@@AAAXPAVBlock@2@II_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9308);
		  /* 821E9308h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821E9308h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E9308h case    0:*/		return 0x821E930C;
		  /* 821E930Ch */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821E930Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E92F8;  }
		/* 821E930Ch case    1:*/		return 0x821E9310;
	}
	return 0x821E9310;
} // Block from 821E9308h-821E9310h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E9310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9310);
		  /* 821E9310h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821E9310h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E9310h case    0:*/		return 0x821E9314;
		  /* 821E9314h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 821E9314h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E936C;  }
		/* 821E9314h case    1:*/		return 0x821E9318;
		  /* 821E9318h */ case    2:  		/* lwz R11, <#[R23]> */
		/* 821E9318h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821E9318h case    2:*/		return 0x821E931C;
		  /* 821E931Ch */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E931Ch case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E931Ch case    3:*/		return 0x821E9320;
		  /* 821E9320h */ case    4:  		/* bc 4, CR0_EQ, 40 */
		/* 821E9320h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E9348;  }
		/* 821E9320h case    4:*/		return 0x821E9324;
		  /* 821E9324h */ case    5:  		/* lwz R11, <#[R29]> */
		/* 821E9324h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E9324h case    5:*/		return 0x821E9328;
		  /* 821E9328h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E9328h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E9328h case    6:*/		return 0x821E932C;
		  /* 821E932Ch */ case    7:  		/* addic. R3, R11, -4 */
		/* 821E932Ch case    7:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821E932Ch case    7:*/		return 0x821E9330;
		  /* 821E9330h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 821E9330h case    8:*/		if ( regs.CR[0].eq ) { return 0x821E9348;  }
		/* 821E9330h case    8:*/		return 0x821E9334;
		  /* 821E9334h */ case    9:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E9334h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E9334h case    9:*/		return 0x821E9338;
		  /* 821E9338h */ case   10:  		/* lwz R10, <#[R3 + 12]> */
		/* 821E9338h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821E9338h case   10:*/		return 0x821E933C;
		  /* 821E933Ch */ case   11:  		/* addi R11, R11, 1 */
		/* 821E933Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E933Ch case   11:*/		return 0x821E9340;
		  /* 821E9340h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 821E9340h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821E9340h case   12:*/		return 0x821E9344;
		  /* 821E9344h */ case   13:  		/* bc 4, CR6_GT, 16 */
		/* 821E9344h case   13:*/		if ( !regs.CR[6].gt ) { return 0x821E9354;  }
		/* 821E9344h case   13:*/		return 0x821E9348;
	}
	return 0x821E9348;
} // Block from 821E9310h-821E9348h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E9348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9348);
		  /* 821E9348h */ case    0:  		/* li R4, 1 */
		/* 821E9348h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E9348h case    0:*/		return 0x821E934C;
		  /* 821E934Ch */ case    1:  		/* mr R3, R29 */
		/* 821E934Ch case    1:*/		regs.R3 = regs.R29;
		/* 821E934Ch case    1:*/		return 0x821E9350;
		  /* 821E9350h */ case    2:  		/* bl -377480 */
		/* 821E9350h case    2:*/		regs.LR = 0x821E9354; return 0x8218D0C8;
		/* 821E9350h case    2:*/		return 0x821E9354;
	}
	return 0x821E9354;
} // Block from 821E9348h-821E9354h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E9354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9354);
		  /* 821E9354h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821E9354h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821E9354h case    0:*/		return 0x821E9358;
		  /* 821E9358h */ case    1:  		/* addi R10, R11, 4 */
		/* 821E9358h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E9358h case    1:*/		return 0x821E935C;
		  /* 821E935Ch */ case    2:  		/* addi R9, R11, 1 */
		/* 821E935Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821E935Ch case    2:*/		return 0x821E9360;
		  /* 821E9360h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821E9360h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821E9360h case    3:*/		return 0x821E9364;
		  /* 821E9364h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821E9364h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821E9364h case    4:*/		return 0x821E9368;
		  /* 821E9368h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821E9368h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821E9368h case    5:*/		return 0x821E936C;
	}
	return 0x821E936C;
} // Block from 821E9354h-821E936Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E936Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E936C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E936C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E936C);
		  /* 821E936Ch */ case    0:  		/* lwz R26, <#[R26 + 12]> */
		/* 821E936Ch case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R26 + 0x0000000C) );
		/* 821E936Ch case    0:*/		return 0x821E9370;
		  /* 821E9370h */ case    1:  		/* b -284 */
		/* 821E9370h case    1:*/		return 0x821E9254;
		/* 821E9370h case    1:*/		return 0x821E9374;
	}
	return 0x821E9374;
} // Block from 821E936Ch-821E9374h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E9374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9374);
		  /* 821E9374h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 821E9374h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821E9374h case    0:*/		return 0x821E9378;
		  /* 821E9378h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E9378h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9378h case    1:*/		return 0x821E937C;
		  /* 821E937Ch */ case    2:  		/* bc 4, CR0_EQ, 128 */
		/* 821E937Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E93FC;  }
		/* 821E937Ch case    2:*/		return 0x821E9380;
		  /* 821E9380h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821E9380h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E9380h case    3:*/		return 0x821E9384;
		  /* 821E9384h */ case    4:  		/* bc 12, CR0_EQ, 120 */
		/* 821E9384h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E93FC;  }
		/* 821E9384h case    4:*/		return 0x821E9388;
		  /* 821E9388h */ case    5:  		/* lwz R11, <#[R29]> */
		/* 821E9388h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E9388h case    5:*/		return 0x821E938C;
		  /* 821E938Ch */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E938Ch case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E938Ch case    6:*/		return 0x821E9390;
		  /* 821E9390h */ case    7:  		/* addi R4, R11, -4 */
		/* 821E9390h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821E9390h case    7:*/		return 0x821E9394;
		  /* 821E9394h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E9394h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E9394h case    8:*/		return 0x821E9398;
		  /* 821E9398h */ case    9:  		/* addi R10, R11, 3 */
		/* 821E9398h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821E9398h case    9:*/		return 0x821E939C;
		  /* 821E939Ch */ case   10:  		/* addic. R11, R11, -1 */
		/* 821E939Ch case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E939Ch case   10:*/		return 0x821E93A0;
		  /* 821E93A0h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E93A0h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E93A0h case   11:*/		return 0x821E93A4;
		  /* 821E93A4h */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821E93A4h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821E93A4h case   12:*/		return 0x821E93A8;
		  /* 821E93A8h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821E93A8h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821E93A8h case   13:*/		return 0x821E93AC;
		  /* 821E93ACh */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 821E93ACh case   14:*/		if ( !regs.CR[0].eq ) { return 0x821E93E8;  }
		/* 821E93ACh case   14:*/		return 0x821E93B0;
		  /* 821E93B0h */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821E93B0h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821E93B0h case   15:*/		return 0x821E93B4;
		  /* 821E93B4h */ case   16:  		/* mr R3, R29 */
		/* 821E93B4h case   16:*/		regs.R3 = regs.R29;
		/* 821E93B4h case   16:*/		return 0x821E93B8;
		  /* 821E93B8h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E93B8h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E93B8h case   17:*/		return 0x821E93BC;
		  /* 821E93BCh */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821E93BCh case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821E93BCh case   18:*/		return 0x821E93C0;
		  /* 821E93C0h */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821E93C0h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821E93C0h case   19:*/		return 0x821E93C4;
		  /* 821E93C4h */ case   20:  		/* stw R9, <#[R10]> */
		/* 821E93C4h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E93C4h case   20:*/		return 0x821E93C8;
		  /* 821E93C8h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E93C8h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E93C8h case   21:*/		return 0x821E93CC;
		  /* 821E93CCh */ case   22:  		/* lwz R11, <#[R11]> */
		/* 821E93CCh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821E93CCh case   22:*/		return 0x821E93D0;
		  /* 821E93D0h */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E93D0h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E93D0h case   23:*/		return 0x821E93D4;
		  /* 821E93D4h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821E93D4h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E93D4h case   24:*/		return 0x821E93D8;
		  /* 821E93D8h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821E93D8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821E93D8h case   25:*/		return 0x821E93DC;
		  /* 821E93DCh */ case   26:  		/* addi R11, R11, 4 */
		/* 821E93DCh case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821E93DCh case   26:*/		return 0x821E93E0;
		  /* 821E93E0h */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821E93E0h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821E93E0h case   27:*/		return 0x821E93E4;
		  /* 821E93E4h */ case   28:  		/* bl -619996 */
		/* 821E93E4h case   28:*/		regs.LR = 0x821E93E8; return 0x82151E08;
		/* 821E93E4h case   28:*/		return 0x821E93E8;
	}
	return 0x821E93E8;
} // Block from 821E9374h-821E93E8h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E93E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E93E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E93E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E93E8);
		  /* 821E93E8h */ case    0:  		/* mr R27, R31 */
		/* 821E93E8h case    0:*/		regs.R27 = regs.R31;
		/* 821E93E8h case    0:*/		return 0x821E93EC;
		  /* 821E93ECh */ case    1:  		/* b -412 */
		/* 821E93ECh case    1:*/		return 0x821E9250;
		/* 821E93ECh case    1:*/		return 0x821E93F0;
	}
	return 0x821E93F0;
} // Block from 821E93E8h-821E93F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E93F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E93F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E93F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E93F0);
		  /* 821E93F0h */ case    0:  		/* li R4, 4800 */
		/* 821E93F0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E93F0h case    0:*/		return 0x821E93F4;
		  /* 821E93F4h */ case    1:  		/* mr R3, R28 */
		/* 821E93F4h case    1:*/		regs.R3 = regs.R28;
		/* 821E93F4h case    1:*/		return 0x821E93F8;
		  /* 821E93F8h */ case    2:  		/* bl -619920 */
		/* 821E93F8h case    2:*/		regs.LR = 0x821E93FC; return 0x82151E68;
		/* 821E93F8h case    2:*/		return 0x821E93FC;
	}
	return 0x821E93FC;
} // Block from 821E93F0h-821E93FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E93FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E93FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E93FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E93FC);
		  /* 821E93FCh */ case    0:  		/* addi R1, R1, 176 */
		/* 821E93FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821E93FCh case    0:*/		return 0x821E9400;
		  /* 821E9400h */ case    1:  		/* b -1409388 */
		/* 821E9400h case    1:*/		return 0x82091294;
		/* 821E9400h case    1:*/		return 0x821E9404;
		  /* 821E9404h */ case    2:  		/* nop */
		/* 821E9404h case    2:*/		cpu::op::nop();
		/* 821E9404h case    2:*/		return 0x821E9408;
	}
	return 0x821E9408;
} // Block from 821E93FCh-821E9408h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E9408h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9408);
		  /* 821E9408h */ case    0:  		/* mfspr R12, LR */
		/* 821E9408h case    0:*/		regs.R12 = regs.LR;
		/* 821E9408h case    0:*/		return 0x821E940C;
		  /* 821E940Ch */ case    1:  		/* bl -1409492 */
		/* 821E940Ch case    1:*/		regs.LR = 0x821E9410; return 0x82091238;
		/* 821E940Ch case    1:*/		return 0x821E9410;
		  /* 821E9410h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821E9410h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821E9410h case    2:*/		return 0x821E9414;
		  /* 821E9414h */ case    3:  		/* mr R22, R3 */
		/* 821E9414h case    3:*/		regs.R22 = regs.R3;
		/* 821E9414h case    3:*/		return 0x821E9418;
		  /* 821E9418h */ case    4:  		/* mr R21, R4 */
		/* 821E9418h case    4:*/		regs.R21 = regs.R4;
		/* 821E9418h case    4:*/		return 0x821E941C;
		  /* 821E941Ch */ case    5:  		/* mr R23, R5 */
		/* 821E941Ch case    5:*/		regs.R23 = regs.R5;
		/* 821E941Ch case    5:*/		return 0x821E9420;
		  /* 821E9420h */ case    6:  		/* mr R30, R6 */
		/* 821E9420h case    6:*/		regs.R30 = regs.R6;
		/* 821E9420h case    6:*/		return 0x821E9424;
		  /* 821E9424h */ case    7:  		/* mr R31, R7 */
		/* 821E9424h case    7:*/		regs.R31 = regs.R7;
		/* 821E9424h case    7:*/		return 0x821E9428;
		  /* 821E9428h */ case    8:  		/* rlwinm. R11, R8, 0, 24, 31 */
		/* 821E9428h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R8);
		/* 821E9428h case    8:*/		return 0x821E942C;
		  /* 821E942Ch */ case    9:  		/* li R20, 1 */
		/* 821E942Ch case    9:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 821E942Ch case    9:*/		return 0x821E9430;
		  /* 821E9430h */ case   10:  		/* bc 4, CR0_EQ, 216 */
		/* 821E9430h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821E9508;  }
		/* 821E9430h case   10:*/		return 0x821E9434;
		  /* 821E9434h */ case   11:  		/* lwz R11, <#[R4 + 48]> */
		/* 821E9434h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 821E9434h case   11:*/		return 0x821E9438;
		  /* 821E9438h */ case   12:  		/* lwz R10, <#[R5 + 40]> */
		/* 821E9438h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000028) );
		/* 821E9438h case   12:*/		return 0x821E943C;
		  /* 821E943Ch */ case   13:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 821E943Ch case   13:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 821E943Ch case   13:*/		return 0x821E9440;
		  /* 821E9440h */ case   14:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 821E9440h case   14:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 821E9440h case   14:*/		return 0x821E9444;
		  /* 821E9444h */ case   15:  		/* rlwinm R9, R8, 0, 27, 31 */
		/* 821E9444h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R8);
		/* 821E9444h case   15:*/		return 0x821E9448;
		  /* 821E9448h */ case   16:  		/* addi R11, R11, 1 */
		/* 821E9448h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E9448h case   16:*/		return 0x821E944C;
		  /* 821E944Ch */ case   17:  		/* slw R9, R20, R9 */
		/* 821E944Ch case   17:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R20,regs.R9);
		/* 821E944Ch case   17:*/		return 0x821E9450;
		  /* 821E9450h */ case   18:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E9450h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E9450h case   18:*/		return 0x821E9454;
		  /* 821E9454h */ case   19:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821E9454h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821E9454h case   19:*/		return 0x821E9458;
		  /* 821E9458h */ case   20:  		/* and. R11, R11, R9 */
		/* 821E9458h case   20:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821E9458h case   20:*/		return 0x821E945C;
		  /* 821E945Ch */ case   21:  		/* bc 12, CR0_EQ, 12 */
		/* 821E945Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x821E9468;  }
		/* 821E945Ch case   21:*/		return 0x821E9460;
		  /* 821E9460h */ case   22:  		/* mr R3, R5 */
		/* 821E9460h case   22:*/		regs.R3 = regs.R5;
		/* 821E9460h case   22:*/		return 0x821E9464;
		  /* 821E9464h */ case   23:  		/* b 1692 */
		/* 821E9464h case   23:*/		return 0x821E9B00;
		/* 821E9464h case   23:*/		return 0x821E9468;
	}
	return 0x821E9468;
} // Block from 821E9408h-821E9468h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821E9468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9468);
		  /* 821E9468h */ case    0:  		/* lwz R10, <#[R21 + 12]> */
		/* 821E9468h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x0000000C) );
		/* 821E9468h case    0:*/		return 0x821E946C;
		  /* 821E946Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821E946Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E946Ch case    1:*/		return 0x821E9470;
		  /* 821E9470h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821E9470h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E9484;  }
		/* 821E9470h case    2:*/		return 0x821E9474;
		  /* 821E9474h */ case    3:  		/* lwz R11, <#[R10 + 8]> */
		/* 821E9474h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821E9474h case    3:*/		return 0x821E9478;
		  /* 821E9478h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E9478h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9478h case    4:*/		return 0x821E947C;
		  /* 821E947Ch */ case    5:  		/* mr R11, R20 */
		/* 821E947Ch case    5:*/		regs.R11 = regs.R20;
		/* 821E947Ch case    5:*/		return 0x821E9480;
		  /* 821E9480h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821E9480h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E9488;  }
		/* 821E9480h case    6:*/		return 0x821E9484;
	}
	return 0x821E9484;
} // Block from 821E9468h-821E9484h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E9484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9484);
		  /* 821E9484h */ case    0:  		/* li R11, 0 */
		/* 821E9484h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E9484h case    0:*/		return 0x821E9488;
	}
	return 0x821E9488;
} // Block from 821E9484h-821E9488h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E9488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9488);
		  /* 821E9488h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E9488h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E9488h case    0:*/		return 0x821E948C;
		  /* 821E948Ch */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 821E948Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E94B0;  }
		/* 821E948Ch case    1:*/		return 0x821E9490;
		  /* 821E9490h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821E9490h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E9490h case    2:*/		return 0x821E9494;
		  /* 821E9494h */ case    3:  		/* li R11, 0 */
		/* 821E9494h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E9494h case    3:*/		return 0x821E9498;
		  /* 821E9498h */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 821E9498h case    4:*/		if ( regs.CR[6].eq ) { return 0x821E94A0;  }
		/* 821E9498h case    4:*/		return 0x821E949C;
		  /* 821E949Ch */ case    5:  		/* lwz R11, <#[R10]> */
		/* 821E949Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821E949Ch case    5:*/		return 0x821E94A0;
	}
	return 0x821E94A0;
} // Block from 821E9488h-821E94A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E94A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E94A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E94A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E94A0);
		  /* 821E94A0h */ case    0:  		/* cmplw CR6, R11, R23 */
		/* 821E94A0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821E94A0h case    0:*/		return 0x821E94A4;
		  /* 821E94A4h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821E94A4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E94B0;  }
		/* 821E94A4h case    1:*/		return 0x821E94A8;
		  /* 821E94A8h */ case    2:  		/* mr R3, R21 */
		/* 821E94A8h case    2:*/		regs.R3 = regs.R21;
		/* 821E94A8h case    2:*/		return 0x821E94AC;
		  /* 821E94ACh */ case    3:  		/* b 1620 */
		/* 821E94ACh case    3:*/		return 0x821E9B00;
		/* 821E94ACh case    3:*/		return 0x821E94B0;
	}
	return 0x821E94B0;
} // Block from 821E94A0h-821E94B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E94B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E94B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E94B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E94B0);
		  /* 821E94B0h */ case    0:  		/* lwz R9, <#[R23 + 8]> */
		/* 821E94B0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000008) );
		/* 821E94B0h case    0:*/		return 0x821E94B4;
		  /* 821E94B4h */ case    1:  		/* li R3, 0 */
		/* 821E94B4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821E94B4h case    1:*/		return 0x821E94B8;
		  /* 821E94B8h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821E94B8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E94B8h case    2:*/		return 0x821E94BC;
		  /* 821E94BCh */ case    3:  		/* bc 12, CR6_EQ, 68 */
		/* 821E94BCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821E9500;  }
		/* 821E94BCh case    3:*/		return 0x821E94C0;
		  /* 821E94C0h */ case    4:  		/* lwz R11, <#[R9 + 4]> */
		/* 821E94C0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821E94C0h case    4:*/		return 0x821E94C4;
		  /* 821E94C4h */ case    5:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 821E94C4h case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 821E94C4h case    5:*/		return 0x821E94C8;
		  /* 821E94C8h */ case    6:  		/* rlwinm R7, R8, 0, 27, 31 */
		/* 821E94C8h case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R8);
		/* 821E94C8h case    6:*/		return 0x821E94CC;
		  /* 821E94CCh */ case    7:  		/* addi R10, R10, 1 */
		/* 821E94CCh case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E94CCh case    7:*/		return 0x821E94D0;
		  /* 821E94D0h */ case    8:  		/* slw R7, R20, R7 */
		/* 821E94D0h case    8:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R20,regs.R7);
		/* 821E94D0h case    8:*/		return 0x821E94D4;
		  /* 821E94D4h */ case    9:  		/* lwz R6, <#[R11 + 40]> */
		/* 821E94D4h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000028) );
		/* 821E94D4h case    9:*/		return 0x821E94D8;
		  /* 821E94D8h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E94D8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E94D8h case   10:*/		return 0x821E94DC;
		  /* 821E94DCh */ case   11:  		/* lwzx R10, <#[R10 + R6]> */
		/* 821E94DCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 821E94DCh case   11:*/		return 0x821E94E0;
		  /* 821E94E0h */ case   12:  		/* and. R10, R10, R7 */
		/* 821E94E0h case   12:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R7);
		/* 821E94E0h case   12:*/		return 0x821E94E4;
		  /* 821E94E4h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 821E94E4h case   13:*/		if ( regs.CR[0].eq ) { return 0x821E94F4;  }
		/* 821E94E4h case   13:*/		return 0x821E94E8;
		  /* 821E94E8h */ case   14:  		/* cmplwi CR6, R3, 0 */
		/* 821E94E8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821E94E8h case   14:*/		return 0x821E94EC;
		  /* 821E94ECh */ case   15:  		/* bc 4, CR6_EQ, 16 */
		/* 821E94ECh case   15:*/		if ( !regs.CR[6].eq ) { return 0x821E94FC;  }
		/* 821E94ECh case   15:*/		return 0x821E94F0;
	}
	return 0x821E94F0;
} // Block from 821E94B0h-821E94F0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E94F0h
// Function '?ResolvePredDef@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAVBlock@2@11@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E94F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E94F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E94F0);
		  /* 821E94F0h */ case    0:  		/* mr R3, R11 */
		/* 821E94F0h case    0:*/		regs.R3 = regs.R11;
		/* 821E94F0h case    0:*/		return 0x821E94F4;
	}
	return 0x821E94F4;
} // Block from 821E94F0h-821E94F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E94F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E94F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E94F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E94F4);
		  /* 821E94F4h */ case    0:  		/* lwz R9, <#[R9 + 12]> */
		/* 821E94F4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821E94F4h case    0:*/		return 0x821E94F8;
		  /* 821E94F8h */ case    1:  		/* b -64 */
		/* 821E94F8h case    1:*/		return 0x821E94B8;
		/* 821E94F8h case    1:*/		return 0x821E94FC;
	}
	return 0x821E94FC;
} // Block from 821E94F4h-821E94FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E94FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E94FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E94FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E94FC);
		  /* 821E94FCh */ case    0:  		/* li R3, 0 */
		/* 821E94FCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821E94FCh case    0:*/		return 0x821E9500;
	}
	return 0x821E9500;
} // Block from 821E94FCh-821E9500h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E9500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9500);
		  /* 821E9500h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 821E9500h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821E9500h case    0:*/		return 0x821E9504;
		  /* 821E9504h */ case    1:  		/* bc 4, CR6_EQ, 1532 */
		/* 821E9504h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E9B00;  }
		/* 821E9504h case    1:*/		return 0x821E9508;
	}
	return 0x821E9508;
} // Block from 821E9500h-821E9508h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E9508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9508);
		  /* 821E9508h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821E9508h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E9508h case    0:*/		return 0x821E950C;
		  /* 821E950Ch */ case    1:  		/* mr R3, R22 */
		/* 821E950Ch case    1:*/		regs.R3 = regs.R22;
		/* 821E950Ch case    1:*/		return 0x821E9510;
		  /* 821E9510h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821E9510h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E951C;  }
		/* 821E9510h case    2:*/		return 0x821E9514;
		  /* 821E9514h */ case    3:  		/* li R4, 4800 */
		/* 821E9514h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E9514h case    3:*/		return 0x821E9518;
		  /* 821E9518h */ case    4:  		/* bl -620208 */
		/* 821E9518h case    4:*/		regs.LR = 0x821E951C; return 0x82151E68;
		/* 821E9518h case    4:*/		return 0x821E951C;
	}
	return 0x821E951C;
} // Block from 821E9508h-821E951Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E951Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E951C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E951C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E951C);
		  /* 821E951Ch */ case    0:  		/* bl -509412 */
		/* 821E951Ch case    0:*/		regs.LR = 0x821E9520; return 0x8216CF38;
		/* 821E951Ch case    0:*/		return 0x821E9520;
		  /* 821E9520h */ case    1:  		/* mr R25, R3 */
		/* 821E9520h case    1:*/		regs.R25 = regs.R3;
		/* 821E9520h case    1:*/		return 0x821E9524;
		  /* 821E9524h */ case    2:  		/* cmpwi CR6, R30, 0 */
		/* 821E9524h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 821E9524h case    2:*/		return 0x821E9528;
		  /* 821E9528h */ case    3:  		/* bc 4, CR6_EQ, 48 */
		/* 821E9528h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821E9558;  }
		/* 821E9528h case    3:*/		return 0x821E952C;
		  /* 821E952Ch */ case    4:  		/* rlwinm R9, R31, 0, 0, 30 */
		/* 821E952Ch case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R31);
		/* 821E952Ch case    4:*/		return 0x821E9530;
		  /* 821E9530h */ case    5:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821E9530h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821E9530h case    5:*/		return 0x821E9534;
		  /* 821E9534h */ case    6:  		/* addi R10, R11, 4 */
		/* 821E9534h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821E9534h case    6:*/		return 0x821E9538;
		  /* 821E9538h */ case    7:  		/* lwz R8, <#[R9]> */
		/* 821E9538h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821E9538h case    7:*/		return 0x821E953C;
		  /* 821E953Ch */ case    8:  		/* stw R8, <#[R11]> */
		/* 821E953Ch case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821E953Ch case    8:*/		return 0x821E9540;
		  /* 821E9540h */ case    9:  		/* lwz R8, <#[R9]> */
		/* 821E9540h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821E9540h case    9:*/		return 0x821E9544;
		  /* 821E9544h */ case   10:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821E9544h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821E9544h case   10:*/		return 0x821E9548;
		  /* 821E9548h */ case   11:  		/* stw R11, <#[R8]> */
		/* 821E9548h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821E9548h case   11:*/		return 0x821E954C;
		  /* 821E954Ch */ case   12:  		/* stw R9, <#[R11 + 4]> */
		/* 821E954Ch case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821E954Ch case   12:*/		return 0x821E9550;
		  /* 821E9550h */ case   13:  		/* stw R10, <#[R9]> */
		/* 821E9550h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821E9550h case   13:*/		return 0x821E9554;
		  /* 821E9554h */ case   14:  		/* b 48 */
		/* 821E9554h case   14:*/		return 0x821E9584;
		/* 821E9554h case   14:*/		return 0x821E9558;
	}
	return 0x821E9558;
} // Block from 821E951Ch-821E9558h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821E9558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9558);
		  /* 821E9558h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821E9558h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821E9558h case    0:*/		return 0x821E955C;
		  /* 821E955Ch */ case    1:  		/* rlwinm R10, R25, 0, 0, 30 */
		/* 821E955Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R25);
		/* 821E955Ch case    1:*/		return 0x821E9560;
		  /* 821E9560h */ case    2:  		/* addi R9, R11, 4 */
		/* 821E9560h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821E9560h case    2:*/		return 0x821E9564;
		  /* 821E9564h */ case    3:  		/* addi R8, R10, 4 */
		/* 821E9564h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821E9564h case    3:*/		return 0x821E9568;
		  /* 821E9568h */ case    4:  		/* lwz R7, <#[R11 + 4]> */
		/* 821E9568h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821E9568h case    4:*/		return 0x821E956C;
		  /* 821E956Ch */ case    5:  		/* stw R7, <#[R10 + 4]> */
		/* 821E956Ch case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821E956Ch case    5:*/		return 0x821E9570;
		  /* 821E9570h */ case    6:  		/* lwz R7, <#[R11 + 4]> */
		/* 821E9570h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821E9570h case    6:*/		return 0x821E9574;
		  /* 821E9574h */ case    7:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821E9574h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821E9574h case    7:*/		return 0x821E9578;
		  /* 821E9578h */ case    8:  		/* stw R8, <#[R7]> */
		/* 821E9578h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 821E9578h case    8:*/		return 0x821E957C;
		  /* 821E957Ch */ case    9:  		/* stw R9, <#[R10]> */
		/* 821E957Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E957Ch case    9:*/		return 0x821E9580;
		  /* 821E9580h */ case   10:  		/* stw R10, <#[R11 + 4]> */
		/* 821E9580h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E9580h case   10:*/		return 0x821E9584;
	}
	return 0x821E9584;
} // Block from 821E9558h-821E9584h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E9584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9584);
		  /* 821E9584h */ case    0:  		/* lwz R11, <#[R23 + 20]> */
		/* 821E9584h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 821E9584h case    0:*/		return 0x821E9588;
		  /* 821E9588h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E9588h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9588h case    1:*/		return 0x821E958C;
		  /* 821E958Ch */ case    2:  		/* bc 4, CR0_EQ, 460 */
		/* 821E958Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E9758;  }
		/* 821E958Ch case    2:*/		return 0x821E9590;
		  /* 821E9590h */ case    3:  		/* mr R29, R11 */
		/* 821E9590h case    3:*/		regs.R29 = regs.R11;
		/* 821E9590h case    3:*/		return 0x821E9594;
		  /* 821E9594h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821E9594h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E9594h case    4:*/		return 0x821E9598;
		  /* 821E9598h */ case    5:  		/* bc 12, CR0_EQ, 448 */
		/* 821E9598h case    5:*/		if ( regs.CR[0].eq ) { return 0x821E9758;  }
		/* 821E9598h case    5:*/		return 0x821E959C;
		  /* 821E959Ch */ case    6:  		/* lwz R11, <#[R29 + 8]> */
		/* 821E959Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821E959Ch case    6:*/		return 0x821E95A0;
		  /* 821E95A0h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E95A0h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E95A0h case    7:*/		return 0x821E95A4;
		  /* 821E95A4h */ case    8:  		/* cmplwi CR6, R11, 14336 */
		/* 821E95A4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821E95A4h case    8:*/		return 0x821E95A8;
		  /* 821E95A8h */ case    9:  		/* bc 4, CR6_EQ, 404 */
		/* 821E95A8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821E973C;  }
		/* 821E95A8h case    9:*/		return 0x821E95AC;
		  /* 821E95ACh */ case   10:  		/* li R31, 0 */
		/* 821E95ACh case   10:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821E95ACh case   10:*/		return 0x821E95B0;
		  /* 821E95B0h */ case   11:  		/* mr R28, R29 */
		/* 821E95B0h case   11:*/		regs.R28 = regs.R29;
		/* 821E95B0h case   11:*/		return 0x821E95B4;
		  /* 821E95B4h */ case   12:  		/* lwz R30, <#[R28]> */
		/* 821E95B4h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 821E95B4h case   12:*/		return 0x821E95B8;
		  /* 821E95B8h */ case   13:  		/* cmplwi CR6, R30, 0 */
		/* 821E95B8h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E95B8h case   13:*/		return 0x821E95BC;
		  /* 821E95BCh */ case   14:  		/* bc 12, CR6_EQ, 352 */
		/* 821E95BCh case   14:*/		if ( regs.CR[6].eq ) { return 0x821E971C;  }
		/* 821E95BCh case   14:*/		return 0x821E95C0;
		  /* 821E95C0h */ case   15:  		/* lwz R11, <#[R30 + 12]> */
		/* 821E95C0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E95C0h case   15:*/		return 0x821E95C4;
		  /* 821E95C4h */ case   16:  		/* lwz R11, <#[R11 + 28]> */
		/* 821E95C4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821E95C4h case   16:*/		return 0x821E95C8;
		  /* 821E95C8h */ case   17:  		/* cmplw CR6, R11, R25 */
		/* 821E95C8h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821E95C8h case   17:*/		return 0x821E95CC;
		  /* 821E95CCh */ case   18:  		/* bc 12, CR6_EQ, 316 */
		/* 821E95CCh case   18:*/		if ( regs.CR[6].eq ) { return 0x821E9708;  }
		/* 821E95CCh case   18:*/		return 0x821E95D0;
		  /* 821E95D0h */ case   19:  		/* lwz R10, <#[R21 + 48]> */
		/* 821E95D0h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000030) );
		/* 821E95D0h case   19:*/		return 0x821E95D4;
		  /* 821E95D4h */ case   20:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E95D4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E95D4h case   20:*/		return 0x821E95D8;
		  /* 821E95D8h */ case   21:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 821E95D8h case   21:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 821E95D8h case   21:*/		return 0x821E95DC;
		  /* 821E95DCh */ case   22:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 821E95DCh case   22:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 821E95DCh case   22:*/		return 0x821E95E0;
		  /* 821E95E0h */ case   23:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821E95E0h case   23:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821E95E0h case   23:*/		return 0x821E95E4;
		  /* 821E95E4h */ case   24:  		/* addi R10, R10, 1 */
		/* 821E95E4h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E95E4h case   24:*/		return 0x821E95E8;
		  /* 821E95E8h */ case   25:  		/* slw R9, R20, R9 */
		/* 821E95E8h case   25:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R20,regs.R9);
		/* 821E95E8h case   25:*/		return 0x821E95EC;
		  /* 821E95ECh */ case   26:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E95ECh case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E95ECh case   26:*/		return 0x821E95F0;
		  /* 821E95F0h */ case   27:  		/* lwzx R10, <#[R10 + R11]> */
		/* 821E95F0h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E95F0h case   27:*/		return 0x821E95F4;
		  /* 821E95F4h */ case   28:  		/* and. R10, R9, R10 */
		/* 821E95F4h case   28:*/		cpu::op::and<1>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821E95F4h case   28:*/		return 0x821E95F8;
		  /* 821E95F8h */ case   29:  		/* bc 12, CR0_EQ, 272 */
		/* 821E95F8h case   29:*/		if ( regs.CR[0].eq ) { return 0x821E9708;  }
		/* 821E95F8h case   29:*/		return 0x821E95FC;
		  /* 821E95FCh */ case   30:  		/* lwz R10, <#[R23 + 48]> */
		/* 821E95FCh case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000030) );
		/* 821E95FCh case   30:*/		return 0x821E9600;
		  /* 821E9600h */ case   31:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 821E9600h case   31:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 821E9600h case   31:*/		return 0x821E9604;
		  /* 821E9604h */ case   32:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 821E9604h case   32:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 821E9604h case   32:*/		return 0x821E9608;
		  /* 821E9608h */ case   33:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821E9608h case   33:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821E9608h case   33:*/		return 0x821E960C;
		  /* 821E960Ch */ case   34:  		/* addi R10, R10, 1 */
		/* 821E960Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E960Ch case   34:*/		return 0x821E9610;
		  /* 821E9610h */ case   35:  		/* slw R9, R20, R9 */
		/* 821E9610h case   35:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R20,regs.R9);
		/* 821E9610h case   35:*/		return 0x821E9614;
		  /* 821E9614h */ case   36:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E9614h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E9614h case   36:*/		return 0x821E9618;
		  /* 821E9618h */ case   37:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821E9618h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E9618h case   37:*/		return 0x821E961C;
		  /* 821E961Ch */ case   38:  		/* and. R11, R9, R11 */
		/* 821E961Ch case   38:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821E961Ch case   38:*/		return 0x821E9620;
		  /* 821E9620h */ case   39:  		/* bc 4, CR0_EQ, 232 */
		/* 821E9620h case   39:*/		if ( !regs.CR[0].eq ) { return 0x821E9708;  }
		/* 821E9620h case   39:*/		return 0x821E9624;
		  /* 821E9624h */ case   40:  		/* cmplwi CR6, R31, 0 */
		/* 821E9624h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E9624h case   40:*/		return 0x821E9628;
		  /* 821E9628h */ case   41:  		/* bc 4, CR6_EQ, 172 */
		/* 821E9628h case   41:*/		if ( !regs.CR[6].eq ) { return 0x821E96D4;  }
		/* 821E9628h case   41:*/		return 0x821E962C;
		  /* 821E962Ch */ case   42:  		/* mr R4, R25 */
		/* 821E962Ch case   42:*/		regs.R4 = regs.R25;
		/* 821E962Ch case   42:*/		return 0x821E9630;
		  /* 821E9630h */ case   43:  		/* mr R3, R22 */
		/* 821E9630h case   43:*/		regs.R3 = regs.R22;
		/* 821E9630h case   43:*/		return 0x821E9634;
		  /* 821E9634h */ case   44:  		/* bl 242700 */
		/* 821E9634h case   44:*/		regs.LR = 0x821E9638; return 0x82224A40;
		/* 821E9634h case   44:*/		return 0x821E9638;
		  /* 821E9638h */ case   45:  		/* lwz R11, <#[R22 + 660]> */
		/* 821E9638h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000294) );
		/* 821E9638h case   45:*/		return 0x821E963C;
		  /* 821E963Ch */ case   46:  		/* mr R31, R3 */
		/* 821E963Ch case   46:*/		regs.R31 = regs.R3;
		/* 821E963Ch case   46:*/		return 0x821E9640;
		  /* 821E9640h */ case   47:  		/* cmplwi CR6, R11, 0 */
		/* 821E9640h case   47:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9640h case   47:*/		return 0x821E9644;
		  /* 821E9644h */ case   48:  		/* bc 12, CR6_EQ, 112 */
		/* 821E9644h case   48:*/		if ( regs.CR[6].eq ) { return 0x821E96B4;  }
		/* 821E9644h case   48:*/		return 0x821E9648;
		  /* 821E9648h */ case   49:  		/* lwz R11, <#[R29 + 16]> */
		/* 821E9648h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821E9648h case   49:*/		return 0x821E964C;
		  /* 821E964Ch */ case   50:  		/* sth R11, <#[R3 + 18]> */
		/* 821E964Ch case   50:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R3 + 0x00000012) );
		/* 821E964Ch case   50:*/		return 0x821E9650;
		  /* 821E9650h */ case   51:  		/* lwz R11, <#[R3 + 16]> */
		/* 821E9650h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 821E9650h case   51:*/		return 0x821E9654;
		  /* 821E9654h */ case   52:  		/* rlwimi R11, R20, 16, 13, 15 */
		/* 821E9654h case   52:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R11,regs.R20);
		/* 821E9654h case   52:*/		return 0x821E9658;
		  /* 821E9658h */ case   53:  		/* stw R11, <#[R3 + 16]> */
		/* 821E9658h case   53:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 821E9658h case   53:*/		return 0x821E965C;
		  /* 821E965Ch */ case   54:  		/* lwz R3, <#[R22 + 660]> */
		/* 821E965Ch case   54:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R22 + 0x00000294) );
		/* 821E965Ch case   54:*/		return 0x821E9660;
		  /* 821E9660h */ case   55:  		/* lwz R11, <#[R3 + 4]> */
		/* 821E9660h case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E9660h case   55:*/		return 0x821E9664;
		  /* 821E9664h */ case   56:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E9664h case   56:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E9664h case   56:*/		return 0x821E9668;
		  /* 821E9668h */ case   57:  		/* bc 4, CR0_EQ, 40 */
		/* 821E9668h case   57:*/		if ( !regs.CR[0].eq ) { return 0x821E9690;  }
		/* 821E9668h case   57:*/		return 0x821E966C;
		  /* 821E966Ch */ case   58:  		/* lwz R11, <#[R3]> */
		/* 821E966Ch case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821E966Ch case   58:*/		return 0x821E9670;
		  /* 821E9670h */ case   59:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E9670h case   59:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E9670h case   59:*/		return 0x821E9674;
		  /* 821E9674h */ case   60:  		/* addic. R11, R11, -4 */
		/* 821E9674h case   60:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821E9674h case   60:*/		return 0x821E9678;
		  /* 821E9678h */ case   61:  		/* bc 12, CR0_EQ, 24 */
		/* 821E9678h case   61:*/		if ( regs.CR[0].eq ) { return 0x821E9690;  }
		/* 821E9678h case   61:*/		return 0x821E967C;
		  /* 821E967Ch */ case   62:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E967Ch case   62:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E967Ch case   62:*/		return 0x821E9680;
		  /* 821E9680h */ case   63:  		/* lwz R9, <#[R11 + 12]> */
		/* 821E9680h case   63:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E9680h case   63:*/		return 0x821E9684;
		  /* 821E9684h */ case   64:  		/* addi R10, R10, 1 */
		/* 821E9684h case   64:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E9684h case   64:*/		return 0x821E9688;
		  /* 821E9688h */ case   65:  		/* cmplw CR6, R10, R9 */
		/* 821E9688h case   65:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821E9688h case   65:*/		return 0x821E968C;
		  /* 821E968Ch */ case   66:  		/* bc 4, CR6_GT, 16 */
		/* 821E968Ch case   66:*/		if ( !regs.CR[6].gt ) { return 0x821E969C;  }
		/* 821E968Ch case   66:*/		return 0x821E9690;
	}
	return 0x821E9690;
} // Block from 821E9584h-821E9690h (67 instructions)

//////////////////////////////////////////////////////
// Block at 821E9690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9690);
		  /* 821E9690h */ case    0:  		/* li R4, 1 */
		/* 821E9690h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E9690h case    0:*/		return 0x821E9694;
		  /* 821E9694h */ case    1:  		/* bl -378316 */
		/* 821E9694h case    1:*/		regs.LR = 0x821E9698; return 0x8218D0C8;
		/* 821E9694h case    1:*/		return 0x821E9698;
		  /* 821E9698h */ case    2:  		/* mr R11, R3 */
		/* 821E9698h case    2:*/		regs.R11 = regs.R3;
		/* 821E9698h case    2:*/		return 0x821E969C;
	}
	return 0x821E969C;
} // Block from 821E9690h-821E969Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E969Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E969C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E969C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E969C);
		  /* 821E969Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E969Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E969Ch case    0:*/		return 0x821E96A0;
		  /* 821E96A0h */ case    1:  		/* addi R9, R10, 4 */
		/* 821E96A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821E96A0h case    1:*/		return 0x821E96A4;
		  /* 821E96A4h */ case    2:  		/* addi R8, R10, 1 */
		/* 821E96A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821E96A4h case    2:*/		return 0x821E96A8;
		  /* 821E96A8h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821E96A8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821E96A8h case    3:*/		return 0x821E96AC;
		  /* 821E96ACh */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821E96ACh case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821E96ACh case    4:*/		return 0x821E96B0;
		  /* 821E96B0h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821E96B0h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E96B0h case    5:*/		return 0x821E96B4;
	}
	return 0x821E96B4;
} // Block from 821E969Ch-821E96B4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E96B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E96B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E96B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E96B4);
		  /* 821E96B4h */ case    0:  		/* lwz R11, <#[R22 + 40]> */
		/* 821E96B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000028) );
		/* 821E96B4h case    0:*/		return 0x821E96B8;
		  /* 821E96B8h */ case    1:  		/* rlwinm. R11, R11, 0, 17, 17 */
		/* 821E96B8h case    1:*/		cpu::op::rlwinm<1,0,17,17>(regs,&regs.R11,regs.R11);
		/* 821E96B8h case    1:*/		return 0x821E96BC;
		  /* 821E96BCh */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 821E96BCh case    2:*/		if ( regs.CR[0].eq ) { return 0x821E96D4;  }
		/* 821E96BCh case    2:*/		return 0x821E96C0;
		  /* 821E96C0h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E96C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E96C0h case    3:*/		return 0x821E96C4;
		  /* 821E96C4h */ case    4:  		/* li R10, 513 */
		/* 821E96C4h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x201);
		/* 821E96C4h case    4:*/		return 0x821E96C8;
		  /* 821E96C8h */ case    5:  		/* rlwimi R11, R10, 24, 27, 30 */
		/* 821E96C8h case    5:*/		cpu::op::rlwimi<0,24,27,30>(regs,&regs.R11,regs.R10);
		/* 821E96C8h case    5:*/		return 0x821E96CC;
		  /* 821E96CCh */ case    6:  		/* rlwimi R11, R10, 24, 7, 7 */
		/* 821E96CCh case    6:*/		cpu::op::rlwimi<0,24,7,7>(regs,&regs.R11,regs.R10);
		/* 821E96CCh case    6:*/		return 0x821E96D0;
		  /* 821E96D0h */ case    7:  		/* stw R11, <#[R31 + 8]> */
		/* 821E96D0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E96D0h case    7:*/		return 0x821E96D4;
	}
	return 0x821E96D4;
} // Block from 821E96B4h-821E96D4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E96D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E96D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E96D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E96D4);
		  /* 821E96D4h */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 821E96D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821E96D4h case    0:*/		return 0x821E96D8;
		  /* 821E96D8h */ case    1:  		/* lwz R10, <#[R11]> */
		/* 821E96D8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E96D8h case    1:*/		return 0x821E96DC;
		  /* 821E96DCh */ case    2:  		/* b 12 */
		/* 821E96DCh case    2:*/		return 0x821E96E8;
		/* 821E96DCh case    2:*/		return 0x821E96E0;
		  /* 821E96E0h */ case    3:  		/* addi R11, R10, 4 */
		/* 821E96E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 821E96E0h case    3:*/		return 0x821E96E4;
		  /* 821E96E4h */ case    4:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E96E4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E96E4h case    4:*/		return 0x821E96E8;
	}
	return 0x821E96E8;
} // Block from 821E96D4h-821E96E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E96E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E96E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E96E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E96E8);
		  /* 821E96E8h */ case    0:  		/* cmplw CR6, R10, R30 */
		/* 821E96E8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 821E96E8h case    0:*/		return 0x821E96EC;
		  /* 821E96ECh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821E96ECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E96E0;  }
		/* 821E96ECh case    1:*/		return 0x821E96F0;
		  /* 821E96F0h */ case    2:  		/* lwz R10, <#[R30 + 4]> */
		/* 821E96F0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821E96F0h case    2:*/		return 0x821E96F4;
		  /* 821E96F4h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821E96F4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E96F4h case    3:*/		return 0x821E96F8;
		  /* 821E96F8h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 821E96F8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E96F8h case    4:*/		return 0x821E96FC;
		  /* 821E96FCh */ case    5:  		/* stw R11, <#[R30 + 4]> */
		/* 821E96FCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821E96FCh case    5:*/		return 0x821E9700;
		  /* 821E9700h */ case    6:  		/* stw R30, <#[R31]> */
		/* 821E9700h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 821E9700h case    6:*/		return 0x821E9704;
		  /* 821E9704h */ case    7:  		/* stw R31, <#[R30 + 16]> */
		/* 821E9704h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 821E9704h case    7:*/		return 0x821E9708;
	}
	return 0x821E9708;
} // Block from 821E96E8h-821E9708h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E9708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9708);
		  /* 821E9708h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821E9708h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821E9708h case    0:*/		return 0x821E970C;
		  /* 821E970Ch */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821E970Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821E970Ch case    1:*/		return 0x821E9710;
		  /* 821E9710h */ case    2:  		/* bc 4, CR6_EQ, -348 */
		/* 821E9710h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E95B4;  }
		/* 821E9710h case    2:*/		return 0x821E9714;
		  /* 821E9714h */ case    3:  		/* addi R28, R30, 4 */
		/* 821E9714h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x4);
		/* 821E9714h case    3:*/		return 0x821E9718;
		  /* 821E9718h */ case    4:  		/* b -356 */
		/* 821E9718h case    4:*/		return 0x821E95B4;
		/* 821E9718h case    4:*/		return 0x821E971C;
	}
	return 0x821E971C;
} // Block from 821E9708h-821E971Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E971Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E971C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E971C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E971C);
		  /* 821E971Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821E971Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E971Ch case    0:*/		return 0x821E9720;
		  /* 821E9720h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 821E9720h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E973C;  }
		/* 821E9720h case    1:*/		return 0x821E9724;
		  /* 821E9724h */ case    2:  		/* mr R4, R31 */
		/* 821E9724h case    2:*/		regs.R4 = regs.R31;
		/* 821E9724h case    2:*/		return 0x821E9728;
		  /* 821E9728h */ case    3:  		/* mr R3, R22 */
		/* 821E9728h case    3:*/		regs.R3 = regs.R22;
		/* 821E9728h case    3:*/		return 0x821E972C;
		  /* 821E972Ch */ case    4:  		/* bl -464684 */
		/* 821E972Ch case    4:*/		regs.LR = 0x821E9730; return 0x82178000;
		/* 821E972Ch case    4:*/		return 0x821E9730;
		  /* 821E9730h */ case    5:  		/* mr R4, R3 */
		/* 821E9730h case    5:*/		regs.R4 = regs.R3;
		/* 821E9730h case    5:*/		return 0x821E9734;
		  /* 821E9734h */ case    6:  		/* mr R3, R29 */
		/* 821E9734h case    6:*/		regs.R3 = regs.R29;
		/* 821E9734h case    6:*/		return 0x821E9738;
		  /* 821E9738h */ case    7:  		/* bl -464240 */
		/* 821E9738h case    7:*/		regs.LR = 0x821E973C; return 0x821781C8;
		/* 821E9738h case    7:*/		return 0x821E973C;
	}
	return 0x821E973C;
} // Block from 821E971Ch-821E973Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E973Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E973C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E973C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E973C);
		  /* 821E973Ch */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821E973Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821E973Ch case    0:*/		return 0x821E9740;
		  /* 821E9740h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E9740h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E9740h case    1:*/		return 0x821E9744;
		  /* 821E9744h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E9744h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9744h case    2:*/		return 0x821E9748;
		  /* 821E9748h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E9748h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E9758;  }
		/* 821E9748h case    3:*/		return 0x821E974C;
		  /* 821E974Ch */ case    4:  		/* mr R29, R11 */
		/* 821E974Ch case    4:*/		regs.R29 = regs.R11;
		/* 821E974Ch case    4:*/		return 0x821E9750;
		  /* 821E9750h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E9750h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9750h case    5:*/		return 0x821E9754;
		  /* 821E9754h */ case    6:  		/* bc 4, CR6_EQ, -440 */
		/* 821E9754h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E959C;  }
		/* 821E9754h case    6:*/		return 0x821E9758;
	}
	return 0x821E9758;
} // Block from 821E973Ch-821E9758h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E9758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9758);
		  /* 821E9758h */ case    0:  		/* addi R24, R23, 8 */
		/* 821E9758h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R23,0x8);
		/* 821E9758h case    0:*/		return 0x821E975C;
		  /* 821E975Ch */ case    1:  		/* lwz R28, <#[R23 + 8]> */
		/* 821E975Ch case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R23 + 0x00000008) );
		/* 821E975Ch case    1:*/		return 0x821E9760;
		  /* 821E9760h */ case    2:  		/* li R27, 0 */
		/* 821E9760h case    2:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821E9760h case    2:*/		return 0x821E9764;
		  /* 821E9764h */ case    3:  		/* mr R26, R24 */
		/* 821E9764h case    3:*/		regs.R26 = regs.R24;
		/* 821E9764h case    3:*/		return 0x821E9768;
		  /* 821E9768h */ case    4:  		/* cmplwi CR6, R28, 0 */
		/* 821E9768h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821E9768h case    4:*/		return 0x821E976C;
		  /* 821E976Ch */ case    5:  		/* bc 12, CR6_EQ, 400 */
		/* 821E976Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821E98FC;  }
		/* 821E976Ch case    5:*/		return 0x821E9770;
		  /* 821E9770h */ case    6:  		/* lwz R11, <#[R21 + 48]> */
		/* 821E9770h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821E9770h case    6:*/		return 0x821E9774;
		  /* 821E9774h */ case    7:  		/* lwz R29, <#[R28 + 4]> */
		/* 821E9774h case    7:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000004) );
		/* 821E9774h case    7:*/		return 0x821E9778;
		  /* 821E9778h */ case    8:  		/* rlwinm R10, R11, 0, 13, 31 */
		/* 821E9778h case    8:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R11);
		/* 821E9778h case    8:*/		return 0x821E977C;
		  /* 821E977Ch */ case    9:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E977Ch case    9:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E977Ch case    9:*/		return 0x821E9780;
		  /* 821E9780h */ case   10:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821E9780h case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821E9780h case   10:*/		return 0x821E9784;
		  /* 821E9784h */ case   11:  		/* addi R9, R11, 1 */
		/* 821E9784h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821E9784h case   11:*/		return 0x821E9788;
		  /* 821E9788h */ case   12:  		/* lwz R11, <#[R29 + 40]> */
		/* 821E9788h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 821E9788h case   12:*/		return 0x821E978C;
		  /* 821E978Ch */ case   13:  		/* slw R10, R20, R10 */
		/* 821E978Ch case   13:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R20,regs.R10);
		/* 821E978Ch case   13:*/		return 0x821E9790;
		  /* 821E9790h */ case   14:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821E9790h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821E9790h case   14:*/		return 0x821E9794;
		  /* 821E9794h */ case   15:  		/* lwzx R9, <#[R9 + R11]> */
		/* 821E9794h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821E9794h case   15:*/		return 0x821E9798;
		  /* 821E9798h */ case   16:  		/* and. R10, R10, R9 */
		/* 821E9798h case   16:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821E9798h case   16:*/		return 0x821E979C;
		  /* 821E979Ch */ case   17:  		/* bc 12, CR0_EQ, 328 */
		/* 821E979Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x821E98E4;  }
		/* 821E979Ch case   17:*/		return 0x821E97A0;
		  /* 821E97A0h */ case   18:  		/* lwz R10, <#[R23 + 48]> */
		/* 821E97A0h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000030) );
		/* 821E97A0h case   18:*/		return 0x821E97A4;
		  /* 821E97A4h */ case   19:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 821E97A4h case   19:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 821E97A4h case   19:*/		return 0x821E97A8;
		  /* 821E97A8h */ case   20:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 821E97A8h case   20:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 821E97A8h case   20:*/		return 0x821E97AC;
		  /* 821E97ACh */ case   21:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821E97ACh case   21:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821E97ACh case   21:*/		return 0x821E97B0;
		  /* 821E97B0h */ case   22:  		/* addi R10, R10, 1 */
		/* 821E97B0h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E97B0h case   22:*/		return 0x821E97B4;
		  /* 821E97B4h */ case   23:  		/* slw R9, R20, R9 */
		/* 821E97B4h case   23:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R20,regs.R9);
		/* 821E97B4h case   23:*/		return 0x821E97B8;
		  /* 821E97B8h */ case   24:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E97B8h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E97B8h case   24:*/		return 0x821E97BC;
		  /* 821E97BCh */ case   25:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821E97BCh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E97BCh case   25:*/		return 0x821E97C0;
		  /* 821E97C0h */ case   26:  		/* and. R11, R9, R11 */
		/* 821E97C0h case   26:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821E97C0h case   26:*/		return 0x821E97C4;
		  /* 821E97C4h */ case   27:  		/* bc 4, CR0_EQ, 288 */
		/* 821E97C4h case   27:*/		if ( !regs.CR[0].eq ) { return 0x821E98E4;  }
		/* 821E97C4h case   27:*/		return 0x821E97C8;
		  /* 821E97C8h */ case   28:  		/* lwz R11, <#[R28 + 16]> */
		/* 821E97C8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821E97C8h case   28:*/		return 0x821E97CC;
		  /* 821E97CCh */ case   29:  		/* cmplw CR6, R11, R27 */
		/* 821E97CCh case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 821E97CCh case   29:*/		return 0x821E97D0;
		  /* 821E97D0h */ case   30:  		/* bc 4, CR6_GT, 8 */
		/* 821E97D0h case   30:*/		if ( !regs.CR[6].gt ) { return 0x821E97D8;  }
		/* 821E97D0h case   30:*/		return 0x821E97D4;
		  /* 821E97D4h */ case   31:  		/* mr R27, R11 */
		/* 821E97D4h case   31:*/		regs.R27 = regs.R11;
		/* 821E97D4h case   31:*/		return 0x821E97D8;
	}
	return 0x821E97D8;
} // Block from 821E9758h-821E97D8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821E97D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E97D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E97D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E97D8);
		  /* 821E97D8h */ case    0:  		/* mr R5, R25 */
		/* 821E97D8h case    0:*/		regs.R5 = regs.R25;
		/* 821E97D8h case    0:*/		return 0x821E97DC;
		  /* 821E97DCh */ case    1:  		/* mr R4, R28 */
		/* 821E97DCh case    1:*/		regs.R4 = regs.R28;
		/* 821E97DCh case    1:*/		return 0x821E97E0;
		  /* 821E97E0h */ case    2:  		/* mr R3, R29 */
		/* 821E97E0h case    2:*/		regs.R3 = regs.R29;
		/* 821E97E0h case    2:*/		return 0x821E97E4;
		  /* 821E97E4h */ case    3:  		/* bl 287044 */
		/* 821E97E4h case    3:*/		regs.LR = 0x821E97E8; return 0x8222F928;
		/* 821E97E4h case    3:*/		return 0x821E97E8;
		  /* 821E97E8h */ case    4:  		/* lwz R11, <#[R29 + 36]> */
		/* 821E97E8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821E97E8h case    4:*/		return 0x821E97EC;
		  /* 821E97ECh */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E97ECh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E97ECh case    5:*/		return 0x821E97F0;
		  /* 821E97F0h */ case    6:  		/* bc 4, CR0_EQ, 244 */
		/* 821E97F0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821E98E4;  }
		/* 821E97F0h case    6:*/		return 0x821E97F4;
		  /* 821E97F4h */ case    7:  		/* lwz R11, <#[R29 + 32]> */
		/* 821E97F4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000020) );
		/* 821E97F4h case    7:*/		return 0x821E97F8;
		  /* 821E97F8h */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E97F8h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E97F8h case    8:*/		return 0x821E97FC;
		  /* 821E97FCh */ case    9:  		/* addic. R30, R11, -40 */
		/* 821E97FCh case    9:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 821E97FCh case    9:*/		return 0x821E9800;
		  /* 821E9800h */ case   10:  		/* bc 12, CR0_EQ, 228 */
		/* 821E9800h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E98E4;  }
		/* 821E9800h case   10:*/		return 0x821E9804;
		  /* 821E9804h */ case   11:  		/* lwz R11, <#[R30 + 8]> */
		/* 821E9804h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E9804h case   11:*/		return 0x821E9808;
		  /* 821E9808h */ case   12:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821E9808h case   12:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821E9808h case   12:*/		return 0x821E980C;
		  /* 821E980Ch */ case   13:  		/* cmplwi CR6, R11, 86 */
		/* 821E980Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821E980Ch case   13:*/		return 0x821E9810;
		  /* 821E9810h */ case   14:  		/* bc 12, CR6_EQ, 48 */
		/* 821E9810h case   14:*/		if ( regs.CR[6].eq ) { return 0x821E9840;  }
		/* 821E9810h case   14:*/		return 0x821E9814;
		  /* 821E9814h */ case   15:  		/* cmplwi CR6, R11, 87 */
		/* 821E9814h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821E9814h case   15:*/		return 0x821E9818;
		  /* 821E9818h */ case   16:  		/* bc 12, CR6_EQ, 40 */
		/* 821E9818h case   16:*/		if ( regs.CR[6].eq ) { return 0x821E9840;  }
		/* 821E9818h case   16:*/		return 0x821E981C;
		  /* 821E981Ch */ case   17:  		/* cmplwi CR6, R11, 89 */
		/* 821E981Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821E981Ch case   17:*/		return 0x821E9820;
		  /* 821E9820h */ case   18:  		/* bc 12, CR6_EQ, 32 */
		/* 821E9820h case   18:*/		if ( regs.CR[6].eq ) { return 0x821E9840;  }
		/* 821E9820h case   18:*/		return 0x821E9824;
		  /* 821E9824h */ case   19:  		/* cmplwi CR6, R11, 90 */
		/* 821E9824h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821E9824h case   19:*/		return 0x821E9828;
		  /* 821E9828h */ case   20:  		/* bc 12, CR6_EQ, 24 */
		/* 821E9828h case   20:*/		if ( regs.CR[6].eq ) { return 0x821E9840;  }
		/* 821E9828h case   20:*/		return 0x821E982C;
		  /* 821E982Ch */ case   21:  		/* cmplwi CR6, R11, 84 */
		/* 821E982Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821E982Ch case   21:*/		return 0x821E9830;
		  /* 821E9830h */ case   22:  		/* bc 12, CR6_EQ, 16 */
		/* 821E9830h case   22:*/		if ( regs.CR[6].eq ) { return 0x821E9840;  }
		/* 821E9830h case   22:*/		return 0x821E9834;
		  /* 821E9834h */ case   23:  		/* cmplwi CR6, R11, 85 */
		/* 821E9834h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821E9834h case   23:*/		return 0x821E9838;
		  /* 821E9838h */ case   24:  		/* li R11, 0 */
		/* 821E9838h case   24:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E9838h case   24:*/		return 0x821E983C;
		  /* 821E983Ch */ case   25:  		/* bc 4, CR6_EQ, 8 */
		/* 821E983Ch case   25:*/		if ( !regs.CR[6].eq ) { return 0x821E9844;  }
		/* 821E983Ch case   25:*/		return 0x821E9840;
	}
	return 0x821E9840;
} // Block from 821E97D8h-821E9840h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821E9840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9840);
		  /* 821E9840h */ case    0:  		/* mr R11, R20 */
		/* 821E9840h case    0:*/		regs.R11 = regs.R20;
		/* 821E9840h case    0:*/		return 0x821E9844;
	}
	return 0x821E9844;
} // Block from 821E9840h-821E9844h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E9844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9844);
		  /* 821E9844h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E9844h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E9844h case    0:*/		return 0x821E9848;
		  /* 821E9848h */ case    1:  		/* bc 12, CR0_EQ, 156 */
		/* 821E9848h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E98E4;  }
		/* 821E9848h case    1:*/		return 0x821E984C;
		  /* 821E984Ch */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821E984Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E984Ch case    2:*/		return 0x821E9850;
		  /* 821E9850h */ case    3:  		/* mr R3, R22 */
		/* 821E9850h case    3:*/		regs.R3 = regs.R22;
		/* 821E9850h case    3:*/		return 0x821E9854;
		  /* 821E9854h */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821E9854h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821E9854h case    4:*/		return 0x821E9858;
		  /* 821E9858h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821E9858h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821E9858h case    5:*/		return 0x821E985C;
		  /* 821E985Ch */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821E985Ch case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821E985Ch case    6:*/		return 0x821E9860;
		  /* 821E9860h */ case    7:  		/* bl -545840 */
		/* 821E9860h case    7:*/		regs.LR = 0x821E9864; return 0x82164430;
		/* 821E9860h case    7:*/		return 0x821E9864;
		  /* 821E9864h */ case    8:  		/* addi R11, R30, -16 */
		/* 821E9864h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 821E9864h case    8:*/		return 0x821E9868;
		  /* 821E9868h */ case    9:  		/* add R31, R3, R11 */
		/* 821E9868h case    9:*/		cpu::op::add<0>(regs,&regs.R31,regs.R3,regs.R11);
		/* 821E9868h case    9:*/		return 0x821E986C;
		  /* 821E986Ch */ case   10:  		/* lwz R11, <#[R31]> */
		/* 821E986Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821E986Ch case   10:*/		return 0x821E9870;
		  /* 821E9870h */ case   11:  		/* cmplw CR6, R11, R23 */
		/* 821E9870h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821E9870h case   11:*/		return 0x821E9874;
		  /* 821E9874h */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 821E9874h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821E987C;  }
		/* 821E9874h case   12:*/		return 0x821E9878;
		  /* 821E9878h */ case   13:  		/* stw R25, <#[R31]> */
		/* 821E9878h case   13:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000000) );
		/* 821E9878h case   13:*/		return 0x821E987C;
	}
	return 0x821E987C;
} // Block from 821E9844h-821E987Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E987Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E987C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E987C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E987C);
		  /* 821E987Ch */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821E987Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821E987Ch case    0:*/		return 0x821E9880;
		  /* 821E9880h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821E9880h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821E9880h case    1:*/		return 0x821E9884;
		  /* 821E9884h */ case    2:  		/* cmplwi CR6, R11, 10880 */
		/* 821E9884h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A80);
		/* 821E9884h case    2:*/		return 0x821E9888;
		  /* 821E9888h */ case    3:  		/* bc 4, CR6_EQ, 92 */
		/* 821E9888h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821E98E4;  }
		/* 821E9888h case    3:*/		return 0x821E988C;
		  /* 821E988Ch */ case    4:  		/* lwz R11, <#[R29 + 12]> */
		/* 821E988Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821E988Ch case    4:*/		return 0x821E9890;
		  /* 821E9890h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E9890h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9890h case    5:*/		return 0x821E9894;
		  /* 821E9894h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 821E9894h case    6:*/		if ( regs.CR[6].eq ) { return 0x821E98B8;  }
		/* 821E9894h case    6:*/		return 0x821E9898;
		  /* 821E9898h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821E9898h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E9898h case    7:*/		return 0x821E989C;
		  /* 821E989Ch */ case    8:  		/* lwz R9, <#[R31]> */
		/* 821E989Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821E989Ch case    8:*/		return 0x821E98A0;
		  /* 821E98A0h */ case    9:  		/* cmplw CR6, R9, R10 */
		/* 821E98A0h case    9:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821E98A0h case    9:*/		return 0x821E98A4;
		  /* 821E98A4h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 821E98A4h case   10:*/		if ( regs.CR[6].eq ) { return 0x821E98B0;  }
		/* 821E98A4h case   10:*/		return 0x821E98A8;
		  /* 821E98A8h */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E98A8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E98A8h case   11:*/		return 0x821E98AC;
		  /* 821E98ACh */ case   12:  		/* b -28 */
		/* 821E98ACh case   12:*/		return 0x821E9890;
		/* 821E98ACh case   12:*/		return 0x821E98B0;
	}
	return 0x821E98B0;
} // Block from 821E987Ch-821E98B0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E98B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E98B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E98B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E98B0);
		  /* 821E98B0h */ case    0:  		/* mr R11, R20 */
		/* 821E98B0h case    0:*/		regs.R11 = regs.R20;
		/* 821E98B0h case    0:*/		return 0x821E98B4;
		  /* 821E98B4h */ case    1:  		/* b 8 */
		/* 821E98B4h case    1:*/		return 0x821E98BC;
		/* 821E98B4h case    1:*/		return 0x821E98B8;
	}
	return 0x821E98B8;
} // Block from 821E98B0h-821E98B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E98B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E98B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E98B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E98B8);
		  /* 821E98B8h */ case    0:  		/* li R11, 0 */
		/* 821E98B8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E98B8h case    0:*/		return 0x821E98BC;
	}
	return 0x821E98BC;
} // Block from 821E98B8h-821E98BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E98BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E98BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E98BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E98BC);
		  /* 821E98BCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E98BCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E98BCh case    0:*/		return 0x821E98C0;
		  /* 821E98C0h */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 821E98C0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E98E4;  }
		/* 821E98C0h case    1:*/		return 0x821E98C4;
		  /* 821E98C4h */ case    2:  		/* li R6, 0 */
		/* 821E98C4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E98C4h case    2:*/		return 0x821E98C8;
		  /* 821E98C8h */ case    3:  		/* li R5, 0 */
		/* 821E98C8h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E98C8h case    3:*/		return 0x821E98CC;
		  /* 821E98CCh */ case    4:  		/* li R4, 84 */
		/* 821E98CCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 821E98CCh case    4:*/		return 0x821E98D0;
		  /* 821E98D0h */ case    5:  		/* mr R3, R22 */
		/* 821E98D0h case    5:*/		regs.R3 = regs.R22;
		/* 821E98D0h case    5:*/		return 0x821E98D4;
		  /* 821E98D4h */ case    6:  		/* bl -545956 */
		/* 821E98D4h case    6:*/		regs.LR = 0x821E98D8; return 0x82164430;
		/* 821E98D4h case    6:*/		return 0x821E98D8;
		  /* 821E98D8h */ case    7:  		/* lwz R11, <#[R31 - 4]> */
		/* 821E98D8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 821E98D8h case    7:*/		return 0x821E98DC;
		  /* 821E98DCh */ case    8:  		/* addi R11, R11, -16 */
		/* 821E98DCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF0);
		/* 821E98DCh case    8:*/		return 0x821E98E0;
		  /* 821E98E0h */ case    9:  		/* stwx R25, <#[R3 + R11]> */
		/* 821E98E0h case    9:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821E98E0h case    9:*/		return 0x821E98E4;
	}
	return 0x821E98E4;
} // Block from 821E98BCh-821E98E4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E98E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E98E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E98E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E98E4);
		  /* 821E98E4h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821E98E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821E98E4h case    0:*/		return 0x821E98E8;
		  /* 821E98E8h */ case    1:  		/* cmplw CR6, R11, R28 */
		/* 821E98E8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821E98E8h case    1:*/		return 0x821E98EC;
		  /* 821E98ECh */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821E98ECh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E98F4;  }
		/* 821E98ECh case    2:*/		return 0x821E98F0;
		  /* 821E98F0h */ case    3:  		/* addi R26, R28, 12 */
		/* 821E98F0h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R28,0xC);
		/* 821E98F0h case    3:*/		return 0x821E98F4;
	}
	return 0x821E98F4;
} // Block from 821E98E4h-821E98F4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E98F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E98F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E98F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E98F4);
		  /* 821E98F4h */ case    0:  		/* lwz R28, <#[R26]> */
		/* 821E98F4h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R26 + 0x00000000) );
		/* 821E98F4h case    0:*/		return 0x821E98F8;
		  /* 821E98F8h */ case    1:  		/* b -400 */
		/* 821E98F8h case    1:*/		return 0x821E9768;
		/* 821E98F8h case    1:*/		return 0x821E98FC;
	}
	return 0x821E98FC;
} // Block from 821E98F4h-821E98FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E98FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E98FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E98FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E98FC);
		  /* 821E98FCh */ case    0:  		/* mr R5, R22 */
		/* 821E98FCh case    0:*/		regs.R5 = regs.R22;
		/* 821E98FCh case    0:*/		return 0x821E9900;
		  /* 821E9900h */ case    1:  		/* mr R4, R23 */
		/* 821E9900h case    1:*/		regs.R4 = regs.R23;
		/* 821E9900h case    1:*/		return 0x821E9904;
		  /* 821E9904h */ case    2:  		/* mr R3, R25 */
		/* 821E9904h case    2:*/		regs.R3 = regs.R25;
		/* 821E9904h case    2:*/		return 0x821E9908;
		  /* 821E9908h */ case    3:  		/* bl 287192 */
		/* 821E9908h case    3:*/		regs.LR = 0x821E990C; return 0x8222FAE0;
		/* 821E9908h case    3:*/		return 0x821E990C;
		  /* 821E990Ch */ case    4:  		/* stw R27, <#[R3 + 16]> */
		/* 821E990Ch case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000010) );
		/* 821E990Ch case    4:*/		return 0x821E9910;
		  /* 821E9910h */ case    5:  		/* lwz R10, <#[R23 + 76]> */
		/* 821E9910h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x0000004C) );
		/* 821E9910h case    5:*/		return 0x821E9914;
		  /* 821E9914h */ case    6:  		/* mr R3, R22 */
		/* 821E9914h case    6:*/		regs.R3 = regs.R22;
		/* 821E9914h case    6:*/		return 0x821E9918;
	}
	return 0x821E9918;
} // Block from 821E98FCh-821E9918h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E9918h
// Function '?ResolvePHI@Compiler@D3DXShader@@AAAXPAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9918);
		  /* 821E9918h */ case    0:  		/* lwz R11, <#[R25 + 76]> */
		/* 821E9918h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000004C) );
		/* 821E9918h case    0:*/		return 0x821E991C;
		  /* 821E991Ch */ case    1:  		/* rlwimi R10, R11, 0, 0, 12 */
		/* 821E991Ch case    1:*/		cpu::op::rlwimi<0,0,0,12>(regs,&regs.R10,regs.R11);
		/* 821E991Ch case    1:*/		return 0x821E9920;
		  /* 821E9920h */ case    2:  		/* stw R10, <#[R25 + 76]> */
		/* 821E9920h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x0000004C) );
		/* 821E9920h case    2:*/		return 0x821E9924;
		  /* 821E9924h */ case    3:  		/* bl 6652 */
		/* 821E9924h case    3:*/		regs.LR = 0x821E9928; return 0x821EB320;
		/* 821E9924h case    3:*/		return 0x821E9928;
		  /* 821E9928h */ case    4:  		/* lwz R11, <#[R21 + 48]> */
		/* 821E9928h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821E9928h case    4:*/		return 0x821E992C;
		  /* 821E992Ch */ case    5:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821E992Ch case    5:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821E992Ch case    5:*/		return 0x821E9930;
		  /* 821E9930h */ case    6:  		/* bc 12, CR0_EQ, 108 */
		/* 821E9930h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E999C;  }
		/* 821E9930h case    6:*/		return 0x821E9934;
		  /* 821E9934h */ case    7:  		/* lwz R10, <#[R25 + 48]> */
		/* 821E9934h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000030) );
		/* 821E9934h case    7:*/		return 0x821E9938;
		  /* 821E9938h */ case    8:  		/* lwz R9, <#[R25 + 76]> */
		/* 821E9938h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x0000004C) );
		/* 821E9938h case    8:*/		return 0x821E993C;
		  /* 821E993Ch */ case    9:  		/* rlwimi R11, R10, 0, 9, 7 */
		/* 821E993Ch case    9:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R11,regs.R10);
		/* 821E993Ch case    9:*/		return 0x821E9940;
		  /* 821E9940h */ case   10:  		/* stw R11, <#[R25 + 48]> */
		/* 821E9940h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000030) );
		/* 821E9940h case   10:*/		return 0x821E9944;
		  /* 821E9944h */ case   11:  		/* lwz R11, <#[R21 + 76]> */
		/* 821E9944h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000004C) );
		/* 821E9944h case   11:*/		return 0x821E9948;
		  /* 821E9948h */ case   12:  		/* rlwimi R11, R9, 0, 10, 8 */
		/* 821E9948h case   12:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R11,regs.R9);
		/* 821E9948h case   12:*/		return 0x821E994C;
		  /* 821E994Ch */ case   13:  		/* lwz R10, <#[R25 + 48]> */
		/* 821E994Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000030) );
		/* 821E994Ch case   13:*/		return 0x821E9950;
		  /* 821E9950h */ case   14:  		/* stw R11, <#[R25 + 76]> */
		/* 821E9950h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x0000004C) );
		/* 821E9950h case   14:*/		return 0x821E9954;
		  /* 821E9954h */ case   15:  		/* lwz R9, <#[R21 + 76]> */
		/* 821E9954h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x0000004C) );
		/* 821E9954h case   15:*/		return 0x821E9958;
		  /* 821E9958h */ case   16:  		/* rlwimi R9, R11, 0, 9, 7 */
		/* 821E9958h case   16:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R11);
		/* 821E9958h case   16:*/		return 0x821E995C;
		  /* 821E995Ch */ case   17:  		/* stw R9, <#[R25 + 76]> */
		/* 821E995Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R25 + 0x0000004C) );
		/* 821E995Ch case   17:*/		return 0x821E9960;
		  /* 821E9960h */ case   18:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 821E9960h case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 821E9960h case   18:*/		return 0x821E9964;
		  /* 821E9964h */ case   19:  		/* lwz R9, <#[R21 + 112]> */
		/* 821E9964h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000070) );
		/* 821E9964h case   19:*/		return 0x821E9968;
		  /* 821E9968h */ case   20:  		/* oris R10, R10, 2048 */
		/* 821E9968h case   20:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x800);
		/* 821E9968h case   20:*/		return 0x821E996C;
		  /* 821E996Ch */ case   21:  		/* stw R9, <#[R25 + 112]> */
		/* 821E996Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R25 + 0x00000070) );
		/* 821E996Ch case   21:*/		return 0x821E9970;
		  /* 821E9970h */ case   22:  		/* lwz R9, <#[R21 + 76]> */
		/* 821E9970h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x0000004C) );
		/* 821E9970h case   22:*/		return 0x821E9974;
		  /* 821E9974h */ case   23:  		/* rlwimi R9, R11, 0, 8, 6 */
		/* 821E9974h case   23:*/		cpu::op::rlwimi<0,0,8,6>(regs,&regs.R9,regs.R11);
		/* 821E9974h case   23:*/		return 0x821E9978;
		  /* 821E9978h */ case   24:  		/* stw R9, <#[R25 + 76]> */
		/* 821E9978h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R25 + 0x0000004C) );
		/* 821E9978h case   24:*/		return 0x821E997C;
		  /* 821E997Ch */ case   25:  		/* lwz R11, <#[R21 + 76]> */
		/* 821E997Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000004C) );
		/* 821E997Ch case   25:*/		return 0x821E9980;
		  /* 821E9980h */ case   26:  		/* rlwimi R11, R9, 0, 7, 5 */
		/* 821E9980h case   26:*/		cpu::op::rlwimi<0,0,7,5>(regs,&regs.R11,regs.R9);
		/* 821E9980h case   26:*/		return 0x821E9984;
		  /* 821E9984h */ case   27:  		/* stw R11, <#[R25 + 76]> */
		/* 821E9984h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x0000004C) );
		/* 821E9984h case   27:*/		return 0x821E9988;
		  /* 821E9988h */ case   28:  		/* lwz R11, <#[R21 + 108]> */
		/* 821E9988h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000006C) );
		/* 821E9988h case   28:*/		return 0x821E998C;
		  /* 821E998Ch */ case   29:  		/* stw R11, <#[R25 + 108]> */
		/* 821E998Ch case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x0000006C) );
		/* 821E998Ch case   29:*/		return 0x821E9990;
		  /* 821E9990h */ case   30:  		/* lwz R11, <#[R21 + 72]> */
		/* 821E9990h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000048) );
		/* 821E9990h case   30:*/		return 0x821E9994;
		  /* 821E9994h */ case   31:  		/* stw R11, <#[R25 + 72]> */
		/* 821E9994h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000048) );
		/* 821E9994h case   31:*/		return 0x821E9998;
		  /* 821E9998h */ case   32:  		/* stw R10, <#[R25 + 48]> */
		/* 821E9998h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000030) );
		/* 821E9998h case   32:*/		return 0x821E999C;
	}
	return 0x821E999C;
} // Block from 821E9918h-821E999Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 821E999Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E999C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E999C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E999C);
		  /* 821E999Ch */ case    0:  		/* lwz R11, <#[R25 + 20]> */
		/* 821E999Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000014) );
		/* 821E999Ch case    0:*/		return 0x821E99A0;
		  /* 821E99A0h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E99A0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E99A0h case    1:*/		return 0x821E99A4;
		  /* 821E99A4h */ case    2:  		/* bc 4, CR0_EQ, 344 */
		/* 821E99A4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E9AFC;  }
		/* 821E99A4h case    2:*/		return 0x821E99A8;
		  /* 821E99A8h */ case    3:  		/* mr R27, R11 */
		/* 821E99A8h case    3:*/		regs.R27 = regs.R11;
		/* 821E99A8h case    3:*/		return 0x821E99AC;
		  /* 821E99ACh */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821E99ACh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E99ACh case    4:*/		return 0x821E99B0;
		  /* 821E99B0h */ case    5:  		/* bc 12, CR0_EQ, 332 */
		/* 821E99B0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821E9AFC;  }
		/* 821E99B0h case    5:*/		return 0x821E99B4;
		  /* 821E99B4h */ case    6:  		/* lwz R31, <#[R25 + 8]> */
		/* 821E99B4h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x00000008) );
		/* 821E99B4h case    6:*/		return 0x821E99B8;
		  /* 821E99B8h */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 821E99B8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E99B8h case    7:*/		return 0x821E99BC;
		  /* 821E99BCh */ case    8:  		/* bc 12, CR6_EQ, 292 */
		/* 821E99BCh case    8:*/		if ( regs.CR[6].eq ) { return 0x821E9AE0;  }
		/* 821E99BCh case    8:*/		return 0x821E99C0;
		  /* 821E99C0h */ case    9:  		/* li R7, 1 */
		/* 821E99C0h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821E99C0h case    9:*/		return 0x821E99C4;
		  /* 821E99C4h */ case   10:  		/* lwz R5, <#[R31 + 4]> */
		/* 821E99C4h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 821E99C4h case   10:*/		return 0x821E99C8;
		  /* 821E99C8h */ case   11:  		/* li R6, 0 */
		/* 821E99C8h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E99C8h case   11:*/		return 0x821E99CC;
		  /* 821E99CCh */ case   12:  		/* mr R4, R27 */
		/* 821E99CCh case   12:*/		regs.R4 = regs.R27;
		/* 821E99CCh case   12:*/		return 0x821E99D0;
		  /* 821E99D0h */ case   13:  		/* mr R3, R22 */
		/* 821E99D0h case   13:*/		regs.R3 = regs.R22;
		/* 821E99D0h case   13:*/		return 0x821E99D4;
		  /* 821E99D4h */ case   14:  		/* bl -5332 */
		/* 821E99D4h case   14:*/		regs.LR = 0x821E99D8; return 0x821E8500;
		/* 821E99D4h case   14:*/		return 0x821E99D8;
		  /* 821E99D8h */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 821E99D8h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821E99D8h case   15:*/		return 0x821E99DC;
		  /* 821E99DCh */ case   16:  		/* bc 12, CR0_EQ, 12 */
		/* 821E99DCh case   16:*/		if ( regs.CR[0].eq ) { return 0x821E99E8;  }
		/* 821E99DCh case   16:*/		return 0x821E99E0;
		  /* 821E99E0h */ case   17:  		/* lwz R31, <#[R31 + 12]> */
		/* 821E99E0h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E99E0h case   17:*/		return 0x821E99E4;
		  /* 821E99E4h */ case   18:  		/* b -44 */
		/* 821E99E4h case   18:*/		return 0x821E99B8;
		/* 821E99E4h case   18:*/		return 0x821E99E8;
	}
	return 0x821E99E8;
} // Block from 821E999Ch-821E99E8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821E99E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E99E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E99E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E99E8);
		  /* 821E99E8h */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 821E99E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821E99E8h case    0:*/		return 0x821E99EC;
		  /* 821E99ECh */ case    1:  		/* li R29, 0 */
		/* 821E99ECh case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821E99ECh case    1:*/		return 0x821E99F0;
		  /* 821E99F0h */ case    2:  		/* li R8, 0 */
		/* 821E99F0h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E99F0h case    2:*/		return 0x821E99F4;
		  /* 821E99F4h */ case    3:  		/* lwz R28, <#[R11 + 16]> */
		/* 821E99F4h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000010) );
		/* 821E99F4h case    3:*/		return 0x821E99F8;
		  /* 821E99F8h */ case    4:  		/* lwz R10, <#[R28]> */
		/* 821E99F8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821E99F8h case    4:*/		return 0x821E99FC;
		  /* 821E99FCh */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821E99FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E99FCh case    5:*/		return 0x821E9A00;
		  /* 821E9A00h */ case    6:  		/* bc 12, CR6_EQ, 124 */
		/* 821E9A00h case    6:*/		if ( regs.CR[6].eq ) { return 0x821E9A7C;  }
		/* 821E9A00h case    6:*/		return 0x821E9A04;
		  /* 821E9A04h */ case    7:  		/* lwz R11, <#[R10 + 12]> */
		/* 821E9A04h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 821E9A04h case    7:*/		return 0x821E9A08;
		  /* 821E9A08h */ case    8:  		/* lwz R7, <#[R21 + 40]> */
		/* 821E9A08h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R21 + 0x00000028) );
		/* 821E9A08h case    8:*/		return 0x821E9A0C;
		  /* 821E9A0Ch */ case    9:  		/* lwz R11, <#[R11 + 28]> */
		/* 821E9A0Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821E9A0Ch case    9:*/		return 0x821E9A10;
		  /* 821E9A10h */ case   10:  		/* lwz R9, <#[R11 + 48]> */
		/* 821E9A10h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 821E9A10h case   10:*/		return 0x821E9A14;
		  /* 821E9A14h */ case   11:  		/* rlwinm R6, R9, 0, 13, 31 */
		/* 821E9A14h case   11:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R6,regs.R9);
		/* 821E9A14h case   11:*/		return 0x821E9A18;
		  /* 821E9A18h */ case   12:  		/* rlwinm R9, R6, 27, 5, 31 */
		/* 821E9A18h case   12:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R6);
		/* 821E9A18h case   12:*/		return 0x821E9A1C;
		  /* 821E9A1Ch */ case   13:  		/* rlwinm R6, R6, 0, 27, 31 */
		/* 821E9A1Ch case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R6);
		/* 821E9A1Ch case   13:*/		return 0x821E9A20;
		  /* 821E9A20h */ case   14:  		/* addi R9, R9, 1 */
		/* 821E9A20h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821E9A20h case   14:*/		return 0x821E9A24;
		  /* 821E9A24h */ case   15:  		/* slw R6, R20, R6 */
		/* 821E9A24h case   15:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R20,regs.R6);
		/* 821E9A24h case   15:*/		return 0x821E9A28;
		  /* 821E9A28h */ case   16:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821E9A28h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821E9A28h case   16:*/		return 0x821E9A2C;
		  /* 821E9A2Ch */ case   17:  		/* lwzx R9, <#[R9 + R7]> */
		/* 821E9A2Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 821E9A2Ch case   17:*/		return 0x821E9A30;
		  /* 821E9A30h */ case   18:  		/* and. R9, R9, R6 */
		/* 821E9A30h case   18:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821E9A30h case   18:*/		return 0x821E9A34;
		  /* 821E9A34h */ case   19:  		/* bc 12, CR0_EQ, 64 */
		/* 821E9A34h case   19:*/		if ( regs.CR[0].eq ) { return 0x821E9A74;  }
		/* 821E9A34h case   19:*/		return 0x821E9A38;
		  /* 821E9A38h */ case   20:  		/* cmplwi CR6, R8, 0 */
		/* 821E9A38h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821E9A38h case   20:*/		return 0x821E9A3C;
		  /* 821E9A3Ch */ case   21:  		/* bc 12, CR6_EQ, 48 */
		/* 821E9A3Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x821E9A6C;  }
		/* 821E9A3Ch case   21:*/		return 0x821E9A40;
		  /* 821E9A40h */ case   22:  		/* lwz R9, <#[R8 + 48]> */
		/* 821E9A40h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000030) );
		/* 821E9A40h case   22:*/		return 0x821E9A44;
		  /* 821E9A44h */ case   23:  		/* lwz R7, <#[R11 + 40]> */
		/* 821E9A44h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000028) );
		/* 821E9A44h case   23:*/		return 0x821E9A48;
		  /* 821E9A48h */ case   24:  		/* rlwinm R6, R9, 0, 13, 31 */
		/* 821E9A48h case   24:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R6,regs.R9);
		/* 821E9A48h case   24:*/		return 0x821E9A4C;
		  /* 821E9A4Ch */ case   25:  		/* rlwinm R9, R6, 27, 5, 31 */
		/* 821E9A4Ch case   25:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R6);
		/* 821E9A4Ch case   25:*/		return 0x821E9A50;
		  /* 821E9A50h */ case   26:  		/* rlwinm R6, R6, 0, 27, 31 */
		/* 821E9A50h case   26:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R6);
		/* 821E9A50h case   26:*/		return 0x821E9A54;
		  /* 821E9A54h */ case   27:  		/* addi R9, R9, 1 */
		/* 821E9A54h case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821E9A54h case   27:*/		return 0x821E9A58;
		  /* 821E9A58h */ case   28:  		/* slw R6, R20, R6 */
		/* 821E9A58h case   28:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R20,regs.R6);
		/* 821E9A58h case   28:*/		return 0x821E9A5C;
		  /* 821E9A5Ch */ case   29:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821E9A5Ch case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821E9A5Ch case   29:*/		return 0x821E9A60;
		  /* 821E9A60h */ case   30:  		/* lwzx R9, <#[R9 + R7]> */
		/* 821E9A60h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 821E9A60h case   30:*/		return 0x821E9A64;
		  /* 821E9A64h */ case   31:  		/* and. R9, R9, R6 */
		/* 821E9A64h case   31:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821E9A64h case   31:*/		return 0x821E9A68;
		  /* 821E9A68h */ case   32:  		/* bc 12, CR0_EQ, 12 */
		/* 821E9A68h case   32:*/		if ( regs.CR[0].eq ) { return 0x821E9A74;  }
		/* 821E9A68h case   32:*/		return 0x821E9A6C;
	}
	return 0x821E9A6C;
} // Block from 821E99E8h-821E9A6Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 821E9A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9A6C);
		  /* 821E9A6Ch */ case    0:  		/* mr R29, R10 */
		/* 821E9A6Ch case    0:*/		regs.R29 = regs.R10;
		/* 821E9A6Ch case    0:*/		return 0x821E9A70;
		  /* 821E9A70h */ case    1:  		/* mr R8, R11 */
		/* 821E9A70h case    1:*/		regs.R8 = regs.R11;
		/* 821E9A70h case    1:*/		return 0x821E9A74;
	}
	return 0x821E9A74;
} // Block from 821E9A6Ch-821E9A74h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E9A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9A74);
		  /* 821E9A74h */ case    0:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E9A74h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E9A74h case    0:*/		return 0x821E9A78;
		  /* 821E9A78h */ case    1:  		/* b -124 */
		/* 821E9A78h case    1:*/		return 0x821E99FC;
		/* 821E9A78h case    1:*/		return 0x821E9A7C;
	}
	return 0x821E9A7C;
} // Block from 821E9A74h-821E9A7Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E9A7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9A7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9A7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9A7C);
		  /* 821E9A7Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821E9A7Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E9A7Ch case    0:*/		return 0x821E9A80;
		  /* 821E9A80h */ case    1:  		/* bc 12, CR6_EQ, 136 */
		/* 821E9A80h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E9B08;  }
		/* 821E9A80h case    1:*/		return 0x821E9A84;
		  /* 821E9A84h */ case    2:  		/* mr R4, R29 */
		/* 821E9A84h case    2:*/		regs.R4 = regs.R29;
		/* 821E9A84h case    2:*/		return 0x821E9A88;
		  /* 821E9A88h */ case    3:  		/* mr R3, R27 */
		/* 821E9A88h case    3:*/		regs.R3 = regs.R27;
		/* 821E9A88h case    3:*/		return 0x821E9A8C;
		  /* 821E9A8Ch */ case    4:  		/* bl -465092 */
		/* 821E9A8Ch case    4:*/		regs.LR = 0x821E9A90; return 0x821781C8;
		/* 821E9A8Ch case    4:*/		return 0x821E9A90;
		  /* 821E9A90h */ case    5:  		/* lwz R31, <#[R24]> */
		/* 821E9A90h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R24 + 0x00000000) );
		/* 821E9A90h case    5:*/		return 0x821E9A94;
		  /* 821E9A94h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821E9A94h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E9A94h case    6:*/		return 0x821E9A98;
		  /* 821E9A98h */ case    7:  		/* bc 12, CR6_EQ, 56 */
		/* 821E9A98h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E9AD0;  }
		/* 821E9A98h case    7:*/		return 0x821E9A9C;
		  /* 821E9A9Ch */ case    8:  		/* lwz R30, <#[R31 + 4]> */
		/* 821E9A9Ch case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 821E9A9Ch case    8:*/		return 0x821E9AA0;
		  /* 821E9AA0h */ case    9:  		/* li R7, 1 */
		/* 821E9AA0h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821E9AA0h case    9:*/		return 0x821E9AA4;
		  /* 821E9AA4h */ case   10:  		/* li R6, 0 */
		/* 821E9AA4h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E9AA4h case   10:*/		return 0x821E9AA8;
		  /* 821E9AA8h */ case   11:  		/* mr R5, R30 */
		/* 821E9AA8h case   11:*/		regs.R5 = regs.R30;
		/* 821E9AA8h case   11:*/		return 0x821E9AAC;
		  /* 821E9AACh */ case   12:  		/* mr R4, R28 */
		/* 821E9AACh case   12:*/		regs.R4 = regs.R28;
		/* 821E9AACh case   12:*/		return 0x821E9AB0;
		  /* 821E9AB0h */ case   13:  		/* mr R3, R22 */
		/* 821E9AB0h case   13:*/		regs.R3 = regs.R22;
		/* 821E9AB0h case   13:*/		return 0x821E9AB4;
		  /* 821E9AB4h */ case   14:  		/* bl -5556 */
		/* 821E9AB4h case   14:*/		regs.LR = 0x821E9AB8; return 0x821E8500;
		/* 821E9AB4h case   14:*/		return 0x821E9AB8;
		  /* 821E9AB8h */ case   15:  		/* cmplw CR6, R29, R3 */
		/* 821E9AB8h case   15:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R3);
		/* 821E9AB8h case   15:*/		return 0x821E9ABC;
		  /* 821E9ABCh */ case   16:  		/* bc 12, CR6_EQ, 12 */
		/* 821E9ABCh case   16:*/		if ( regs.CR[6].eq ) { return 0x821E9AC8;  }
		/* 821E9ABCh case   16:*/		return 0x821E9AC0;
		  /* 821E9AC0h */ case   17:  		/* lwz R31, <#[R31 + 12]> */
		/* 821E9AC0h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821E9AC0h case   17:*/		return 0x821E9AC4;
		  /* 821E9AC4h */ case   18:  		/* b -48 */
		/* 821E9AC4h case   18:*/		return 0x821E9A94;
		/* 821E9AC4h case   18:*/		return 0x821E9AC8;
	}
	return 0x821E9AC8;
} // Block from 821E9A7Ch-821E9AC8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821E9AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9AC8);
		  /* 821E9AC8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821E9AC8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E9AC8h case    0:*/		return 0x821E9ACC;
		  /* 821E9ACCh */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821E9ACCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E9AE0;  }
		/* 821E9ACCh case    1:*/		return 0x821E9AD0;
	}
	return 0x821E9AD0;
} // Block from 821E9AC8h-821E9AD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E9AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9AD0);
		  /* 821E9AD0h */ case    0:  		/* mr R5, R22 */
		/* 821E9AD0h case    0:*/		regs.R5 = regs.R22;
		/* 821E9AD0h case    0:*/		return 0x821E9AD4;
		  /* 821E9AD4h */ case    1:  		/* mr R4, R29 */
		/* 821E9AD4h case    1:*/		regs.R4 = regs.R29;
		/* 821E9AD4h case    1:*/		return 0x821E9AD8;
		  /* 821E9AD8h */ case    2:  		/* mr R3, R28 */
		/* 821E9AD8h case    2:*/		regs.R3 = regs.R28;
		/* 821E9AD8h case    2:*/		return 0x821E9ADC;
		  /* 821E9ADCh */ case    3:  		/* bl -463308 */
		/* 821E9ADCh case    3:*/		regs.LR = 0x821E9AE0; return 0x82178910;
		/* 821E9ADCh case    3:*/		return 0x821E9AE0;
	}
	return 0x821E9AE0;
} // Block from 821E9AD0h-821E9AE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E9AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9AE0);
		  /* 821E9AE0h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821E9AE0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821E9AE0h case    0:*/		return 0x821E9AE4;
		  /* 821E9AE4h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E9AE4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E9AE4h case    1:*/		return 0x821E9AE8;
		  /* 821E9AE8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E9AE8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9AE8h case    2:*/		return 0x821E9AEC;
		  /* 821E9AECh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E9AECh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E9AFC;  }
		/* 821E9AECh case    3:*/		return 0x821E9AF0;
		  /* 821E9AF0h */ case    4:  		/* mr R27, R11 */
		/* 821E9AF0h case    4:*/		regs.R27 = regs.R11;
		/* 821E9AF0h case    4:*/		return 0x821E9AF4;
		  /* 821E9AF4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E9AF4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9AF4h case    5:*/		return 0x821E9AF8;
		  /* 821E9AF8h */ case    6:  		/* bc 4, CR6_EQ, -324 */
		/* 821E9AF8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E99B4;  }
		/* 821E9AF8h case    6:*/		return 0x821E9AFC;
	}
	return 0x821E9AFC;
} // Block from 821E9AE0h-821E9AFCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E9AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9AFC);
		  /* 821E9AFCh */ case    0:  		/* mr R3, R25 */
		/* 821E9AFCh case    0:*/		regs.R3 = regs.R25;
		/* 821E9AFCh case    0:*/		return 0x821E9B00;
	}
	return 0x821E9B00;
} // Block from 821E9AFCh-821E9B00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E9B00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9B00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9B00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9B00);
		  /* 821E9B00h */ case    0:  		/* addi R1, R1, 192 */
		/* 821E9B00h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821E9B00h case    0:*/		return 0x821E9B04;
		  /* 821E9B04h */ case    1:  		/* b -1411196 */
		/* 821E9B04h case    1:*/		return 0x82091288;
		/* 821E9B04h case    1:*/		return 0x821E9B08;
	}
	return 0x821E9B08;
} // Block from 821E9B00h-821E9B08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E9B08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9B08);
		  /* 821E9B08h */ case    0:  		/* li R4, 4800 */
		/* 821E9B08h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821E9B08h case    0:*/		return 0x821E9B0C;
		  /* 821E9B0Ch */ case    1:  		/* mr R3, R22 */
		/* 821E9B0Ch case    1:*/		regs.R3 = regs.R22;
		/* 821E9B0Ch case    1:*/		return 0x821E9B10;
		  /* 821E9B10h */ case    2:  		/* bl -621736 */
		/* 821E9B10h case    2:*/		regs.LR = 0x821E9B14; return 0x82151E68;
		/* 821E9B10h case    2:*/		return 0x821E9B14;
		  /* 821E9B14h */ case    3:  		/* nop */
		/* 821E9B14h case    3:*/		cpu::op::nop();
		/* 821E9B14h case    3:*/		return 0x821E9B18;
	}
	return 0x821E9B18;
} // Block from 821E9B08h-821E9B18h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E9B18h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9B18);
		  /* 821E9B18h */ case    0:  		/* mfspr R12, LR */
		/* 821E9B18h case    0:*/		regs.R12 = regs.LR;
		/* 821E9B18h case    0:*/		return 0x821E9B1C;
		  /* 821E9B1Ch */ case    1:  		/* bl -1411292 */
		/* 821E9B1Ch case    1:*/		regs.LR = 0x821E9B20; return 0x82091240;
		/* 821E9B1Ch case    1:*/		return 0x821E9B20;
		  /* 821E9B20h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821E9B20h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821E9B20h case    2:*/		return 0x821E9B24;
		  /* 821E9B24h */ case    3:  		/* lwz R11, <#[R3 + 16]> */
		/* 821E9B24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 821E9B24h case    3:*/		return 0x821E9B28;
		  /* 821E9B28h */ case    4:  		/* mr R27, R3 */
		/* 821E9B28h case    4:*/		regs.R27 = regs.R3;
		/* 821E9B28h case    4:*/		return 0x821E9B2C;
		  /* 821E9B2Ch */ case    5:  		/* li R24, 0 */
		/* 821E9B2Ch case    5:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821E9B2Ch case    5:*/		return 0x821E9B30;
		  /* 821E9B30h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821E9B30h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9B30h case    6:*/		return 0x821E9B34;
		  /* 821E9B34h */ case    7:  		/* bc 4, CR6_GT, 372 */
		/* 821E9B34h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821E9CA8;  }
		/* 821E9B34h case    7:*/		return 0x821E9B38;
		  /* 821E9B38h */ case    8:  		/* li R22, 0 */
		/* 821E9B38h case    8:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821E9B38h case    8:*/		return 0x821E9B3C;
		  /* 821E9B3Ch */ case    9:  		/* li R23, 0 */
		/* 821E9B3Ch case    9:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821E9B3Ch case    9:*/		return 0x821E9B40;
		  /* 821E9B40h */ case   10:  		/* lwz R11, <#[R27 + 12]> */
		/* 821E9B40h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821E9B40h case   10:*/		return 0x821E9B44;
		  /* 821E9B44h */ case   11:  		/* add R11, R23, R11 */
		/* 821E9B44h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R23,regs.R11);
		/* 821E9B44h case   11:*/		return 0x821E9B48;
		  /* 821E9B48h */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E9B48h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E9B48h case   12:*/		return 0x821E9B4C;
		  /* 821E9B4Ch */ case   13:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 821E9B4Ch case   13:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 821E9B4Ch case   13:*/		return 0x821E9B50;
		  /* 821E9B50h */ case   14:  		/* bc 12, CR0_EQ, 320 */
		/* 821E9B50h case   14:*/		if ( regs.CR[0].eq ) { return 0x821E9C90;  }
		/* 821E9B50h case   14:*/		return 0x821E9B54;
		  /* 821E9B54h */ case   15:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E9B54h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E9B54h case   15:*/		return 0x821E9B58;
		  /* 821E9B58h */ case   16:  		/* rlwinm. R11, R11, 0, 10, 12 */
		/* 821E9B58h case   16:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821E9B58h case   16:*/		return 0x821E9B5C;
		  /* 821E9B5Ch */ case   17:  		/* bc 4, CR0_EQ, 308 */
		/* 821E9B5Ch case   17:*/		if ( !regs.CR[0].eq ) { return 0x821E9C90;  }
		/* 821E9B5Ch case   17:*/		return 0x821E9B60;
		  /* 821E9B60h */ case   18:  		/* lwz R11, <#[R27 + 4]> */
		/* 821E9B60h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821E9B60h case   18:*/		return 0x821E9B64;
		  /* 821E9B64h */ case   19:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E9B64h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9B64h case   19:*/		return 0x821E9B68;
		  /* 821E9B68h */ case   20:  		/* bc 4, CR0_EQ, 296 */
		/* 821E9B68h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821E9C90;  }
		/* 821E9B68h case   20:*/		return 0x821E9B6C;
		  /* 821E9B6Ch */ case   21:  		/* mr R25, R11 */
		/* 821E9B6Ch case   21:*/		regs.R25 = regs.R11;
		/* 821E9B6Ch case   21:*/		return 0x821E9B70;
		  /* 821E9B70h */ case   22:  		/* cmplwi CR0, R11, 0 */
		/* 821E9B70h case   22:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E9B70h case   22:*/		return 0x821E9B74;
		  /* 821E9B74h */ case   23:  		/* bc 12, CR0_EQ, 284 */
		/* 821E9B74h case   23:*/		if ( regs.CR[0].eq ) { return 0x821E9C90;  }
		/* 821E9B74h case   23:*/		return 0x821E9B78;
		  /* 821E9B78h */ case   24:  		/* lwz R11, <#[R25 + 48]> */
		/* 821E9B78h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000030) );
		/* 821E9B78h case   24:*/		return 0x821E9B7C;
		  /* 821E9B7Ch */ case   25:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821E9B7Ch case   25:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821E9B7Ch case   25:*/		return 0x821E9B80;
		  /* 821E9B80h */ case   26:  		/* bc 12, CR0_EQ, 244 */
		/* 821E9B80h case   26:*/		if ( regs.CR[0].eq ) { return 0x821E9C74;  }
		/* 821E9B80h case   26:*/		return 0x821E9B84;
		  /* 821E9B84h */ case   27:  		/* lwz R11, <#[R27 + 4]> */
		/* 821E9B84h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821E9B84h case   27:*/		return 0x821E9B88;
		  /* 821E9B88h */ case   28:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E9B88h case   28:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9B88h case   28:*/		return 0x821E9B8C;
		  /* 821E9B8Ch */ case   29:  		/* bc 4, CR0_EQ, 232 */
		/* 821E9B8Ch case   29:*/		if ( !regs.CR[0].eq ) { return 0x821E9C74;  }
		/* 821E9B8Ch case   29:*/		return 0x821E9B90;
		  /* 821E9B90h */ case   30:  		/* mr R26, R11 */
		/* 821E9B90h case   30:*/		regs.R26 = regs.R11;
		/* 821E9B90h case   30:*/		return 0x821E9B94;
		  /* 821E9B94h */ case   31:  		/* cmplwi CR0, R11, 0 */
		/* 821E9B94h case   31:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E9B94h case   31:*/		return 0x821E9B98;
		  /* 821E9B98h */ case   32:  		/* bc 12, CR0_EQ, 220 */
		/* 821E9B98h case   32:*/		if ( regs.CR[0].eq ) { return 0x821E9C74;  }
		/* 821E9B98h case   32:*/		return 0x821E9B9C;
		  /* 821E9B9Ch */ case   33:  		/* lwz R11, <#[R25 + 48]> */
		/* 821E9B9Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000030) );
		/* 821E9B9Ch case   33:*/		return 0x821E9BA0;
		  /* 821E9BA0h */ case   34:  		/* li R10, 1 */
		/* 821E9BA0h case   34:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821E9BA0h case   34:*/		return 0x821E9BA4;
		  /* 821E9BA4h */ case   35:  		/* lwz R9, <#[R26 + 40]> */
		/* 821E9BA4h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000028) );
		/* 821E9BA4h case   35:*/		return 0x821E9BA8;
		  /* 821E9BA8h */ case   36:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 821E9BA8h case   36:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 821E9BA8h case   36:*/		return 0x821E9BAC;
		  /* 821E9BACh */ case   37:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 821E9BACh case   37:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 821E9BACh case   37:*/		return 0x821E9BB0;
		  /* 821E9BB0h */ case   38:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821E9BB0h case   38:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821E9BB0h case   38:*/		return 0x821E9BB4;
		  /* 821E9BB4h */ case   39:  		/* addi R11, R11, 1 */
		/* 821E9BB4h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E9BB4h case   39:*/		return 0x821E9BB8;
		  /* 821E9BB8h */ case   40:  		/* slw R10, R10, R8 */
		/* 821E9BB8h case   40:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821E9BB8h case   40:*/		return 0x821E9BBC;
		  /* 821E9BBCh */ case   41:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E9BBCh case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E9BBCh case   41:*/		return 0x821E9BC0;
		  /* 821E9BC0h */ case   42:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821E9BC0h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821E9BC0h case   42:*/		return 0x821E9BC4;
		  /* 821E9BC4h */ case   43:  		/* and. R11, R11, R10 */
		/* 821E9BC4h case   43:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E9BC4h case   43:*/		return 0x821E9BC8;
		  /* 821E9BC8h */ case   44:  		/* bc 12, CR0_EQ, 144 */
		/* 821E9BC8h case   44:*/		if ( regs.CR[0].eq ) { return 0x821E9C58;  }
		/* 821E9BC8h case   44:*/		return 0x821E9BCC;
		  /* 821E9BCCh */ case   45:  		/* lwz R11, <#[R26 + 80]> */
		/* 821E9BCCh case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000050) );
		/* 821E9BCCh case   45:*/		return 0x821E9BD0;
		  /* 821E9BD0h */ case   46:  		/* cmplwi CR6, R11, 0 */
		/* 821E9BD0h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9BD0h case   46:*/		return 0x821E9BD4;
		  /* 821E9BD4h */ case   47:  		/* bc 12, CR6_EQ, 12 */
		/* 821E9BD4h case   47:*/		if ( regs.CR[6].eq ) { return 0x821E9BE0;  }
		/* 821E9BD4h case   47:*/		return 0x821E9BD8;
		  /* 821E9BD8h */ case   48:  		/* lwzx R30, <#[R22 + R11]> */
		/* 821E9BD8h case   48:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R22 + regs.R11 + 0x00000000) );
		/* 821E9BD8h case   48:*/		return 0x821E9BDC;
		  /* 821E9BDCh */ case   49:  		/* b 8 */
		/* 821E9BDCh case   49:*/		return 0x821E9BE4;
		/* 821E9BDCh case   49:*/		return 0x821E9BE0;
	}
	return 0x821E9BE0;
} // Block from 821E9B18h-821E9BE0h (50 instructions)

//////////////////////////////////////////////////////
// Block at 821E9BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9BE0);
		  /* 821E9BE0h */ case    0:  		/* li R30, 0 */
		/* 821E9BE0h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821E9BE0h case    0:*/		return 0x821E9BE4;
	}
	return 0x821E9BE4;
} // Block from 821E9BE0h-821E9BE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E9BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9BE4);
		  /* 821E9BE4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821E9BE4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821E9BE4h case    0:*/		return 0x821E9BE8;
		  /* 821E9BE8h */ case    1:  		/* bc 12, CR6_EQ, 112 */
		/* 821E9BE8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E9C58;  }
		/* 821E9BE8h case    1:*/		return 0x821E9BEC;
		  /* 821E9BECh */ case    2:  		/* lwz R11, <#[R27 + 12]> */
		/* 821E9BECh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821E9BECh case    2:*/		return 0x821E9BF0;
		  /* 821E9BF0h */ case    3:  		/* li R29, 0 */
		/* 821E9BF0h case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821E9BF0h case    3:*/		return 0x821E9BF4;
		  /* 821E9BF4h */ case    4:  		/* li R31, 0 */
		/* 821E9BF4h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821E9BF4h case    4:*/		return 0x821E9BF8;
		  /* 821E9BF8h */ case    5:  		/* lwzx R11, <#[R23 + R11]> */
		/* 821E9BF8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + regs.R11 + 0x00000000) );
		/* 821E9BF8h case    5:*/		return 0x821E9BFC;
		  /* 821E9BFCh */ case    6:  		/* rlwinm. R28, R11, 29, 18, 31 */
		/* 821E9BFCh case    6:*/		cpu::op::rlwinm<1,29,18,31>(regs,&regs.R28,regs.R11);
		/* 821E9BFCh case    6:*/		return 0x821E9C00;
		  /* 821E9C00h */ case    7:  		/* bc 12, CR0_EQ, 80 */
		/* 821E9C00h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E9C50;  }
		/* 821E9C00h case    7:*/		return 0x821E9C04;
		  /* 821E9C04h */ case    8:  		/* li R8, 0 */
		/* 821E9C04h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E9C04h case    8:*/		return 0x821E9C08;
		  /* 821E9C08h */ case    9:  		/* ld R4, <#[R30]> */
		/* 821E9C08h case    9:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821E9C08h case    9:*/		return 0x821E9C0C;
		  /* 821E9C0Ch */ case   10:  		/* mr R7, R26 */
		/* 821E9C0Ch case   10:*/		regs.R7 = regs.R26;
		/* 821E9C0Ch case   10:*/		return 0x821E9C10;
		  /* 821E9C10h */ case   11:  		/* mr R6, R31 */
		/* 821E9C10h case   11:*/		regs.R6 = regs.R31;
		/* 821E9C10h case   11:*/		return 0x821E9C14;
		  /* 821E9C14h */ case   12:  		/* mr R5, R24 */
		/* 821E9C14h case   12:*/		regs.R5 = regs.R24;
		/* 821E9C14h case   12:*/		return 0x821E9C18;
		  /* 821E9C18h */ case   13:  		/* mr R3, R27 */
		/* 821E9C18h case   13:*/		regs.R3 = regs.R27;
		/* 821E9C18h case   13:*/		return 0x821E9C1C;
		  /* 821E9C1Ch */ case   14:  		/* bl -5476 */
		/* 821E9C1Ch case   14:*/		regs.LR = 0x821E9C20; return 0x821E86B8;
		/* 821E9C1Ch case   14:*/		return 0x821E9C20;
		  /* 821E9C20h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E9C20h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E9C20h case   15:*/		return 0x821E9C24;
		  /* 821E9C24h */ case   16:  		/* bc 12, CR0_EQ, 28 */
		/* 821E9C24h case   16:*/		if ( regs.CR[0].eq ) { return 0x821E9C40;  }
		/* 821E9C24h case   16:*/		return 0x821E9C28;
		  /* 821E9C28h */ case   17:  		/* mr R6, R31 */
		/* 821E9C28h case   17:*/		regs.R6 = regs.R31;
		/* 821E9C28h case   17:*/		return 0x821E9C2C;
		  /* 821E9C2Ch */ case   18:  		/* mr R5, R24 */
		/* 821E9C2Ch case   18:*/		regs.R5 = regs.R24;
		/* 821E9C2Ch case   18:*/		return 0x821E9C30;
		  /* 821E9C30h */ case   19:  		/* mr R4, R25 */
		/* 821E9C30h case   19:*/		regs.R4 = regs.R25;
		/* 821E9C30h case   19:*/		return 0x821E9C34;
		  /* 821E9C34h */ case   20:  		/* mr R3, R27 */
		/* 821E9C34h case   20:*/		regs.R3 = regs.R27;
		/* 821E9C34h case   20:*/		return 0x821E9C38;
		  /* 821E9C38h */ case   21:  		/* bl -2600 */
		/* 821E9C38h case   21:*/		regs.LR = 0x821E9C3C; return 0x821E9210;
		/* 821E9C38h case   21:*/		return 0x821E9C3C;
		  /* 821E9C3Ch */ case   22:  		/* li R29, 1 */
		/* 821E9C3Ch case   22:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821E9C3Ch case   22:*/		return 0x821E9C40;
	}
	return 0x821E9C40;
} // Block from 821E9BE4h-821E9C40h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821E9C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9C40);
		  /* 821E9C40h */ case    0:  		/* addi R31, R31, 1 */
		/* 821E9C40h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821E9C40h case    0:*/		return 0x821E9C44;
		  /* 821E9C44h */ case    1:  		/* addi R30, R30, 8 */
		/* 821E9C44h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 821E9C44h case    1:*/		return 0x821E9C48;
		  /* 821E9C48h */ case    2:  		/* cmplw CR6, R31, R28 */
		/* 821E9C48h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R28);
		/* 821E9C48h case    2:*/		return 0x821E9C4C;
		  /* 821E9C4Ch */ case    3:  		/* bc 12, CR6_LT, -72 */
		/* 821E9C4Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x821E9C04;  }
		/* 821E9C4Ch case    3:*/		return 0x821E9C50;
	}
	return 0x821E9C50;
} // Block from 821E9C40h-821E9C50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E9C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9C50);
		  /* 821E9C50h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821E9C50h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821E9C50h case    0:*/		return 0x821E9C54;
		  /* 821E9C54h */ case    1:  		/* bc 4, CR0_EQ, 32 */
		/* 821E9C54h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E9C74;  }
		/* 821E9C54h case    1:*/		return 0x821E9C58;
	}
	return 0x821E9C58;
} // Block from 821E9C50h-821E9C58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E9C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9C58);
		  /* 821E9C58h */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821E9C58h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821E9C58h case    0:*/		return 0x821E9C5C;
		  /* 821E9C5Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E9C5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E9C5Ch case    1:*/		return 0x821E9C60;
		  /* 821E9C60h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E9C60h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9C60h case    2:*/		return 0x821E9C64;
		  /* 821E9C64h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E9C64h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E9C74;  }
		/* 821E9C64h case    3:*/		return 0x821E9C68;
		  /* 821E9C68h */ case    4:  		/* mr R26, R11 */
		/* 821E9C68h case    4:*/		regs.R26 = regs.R11;
		/* 821E9C68h case    4:*/		return 0x821E9C6C;
		  /* 821E9C6Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E9C6Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9C6Ch case    5:*/		return 0x821E9C70;
		  /* 821E9C70h */ case    6:  		/* bc 4, CR6_EQ, -212 */
		/* 821E9C70h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E9B9C;  }
		/* 821E9C70h case    6:*/		return 0x821E9C74;
	}
	return 0x821E9C74;
} // Block from 821E9C58h-821E9C74h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E9C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9C74);
		  /* 821E9C74h */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821E9C74h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821E9C74h case    0:*/		return 0x821E9C78;
		  /* 821E9C78h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E9C78h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E9C78h case    1:*/		return 0x821E9C7C;
		  /* 821E9C7Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E9C7Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9C7Ch case    2:*/		return 0x821E9C80;
		  /* 821E9C80h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E9C80h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E9C90;  }
		/* 821E9C80h case    3:*/		return 0x821E9C84;
		  /* 821E9C84h */ case    4:  		/* mr R25, R11 */
		/* 821E9C84h case    4:*/		regs.R25 = regs.R11;
		/* 821E9C84h case    4:*/		return 0x821E9C88;
		  /* 821E9C88h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E9C88h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9C88h case    5:*/		return 0x821E9C8C;
		  /* 821E9C8Ch */ case    6:  		/* bc 4, CR6_EQ, -276 */
		/* 821E9C8Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E9B78;  }
		/* 821E9C8Ch case    6:*/		return 0x821E9C90;
	}
	return 0x821E9C90;
} // Block from 821E9C74h-821E9C90h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E9C90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9C90);
		  /* 821E9C90h */ case    0:  		/* lwz R11, <#[R27 + 16]> */
		/* 821E9C90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 821E9C90h case    0:*/		return 0x821E9C94;
		  /* 821E9C94h */ case    1:  		/* addi R24, R24, 1 */
		/* 821E9C94h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821E9C94h case    1:*/		return 0x821E9C98;
		  /* 821E9C98h */ case    2:  		/* addi R23, R23, 40 */
		/* 821E9C98h case    2:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x28);
		/* 821E9C98h case    2:*/		return 0x821E9C9C;
		  /* 821E9C9Ch */ case    3:  		/* addi R22, R22, 4 */
		/* 821E9C9Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 821E9C9Ch case    3:*/		return 0x821E9CA0;
		  /* 821E9CA0h */ case    4:  		/* cmplw CR6, R24, R11 */
		/* 821E9CA0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 821E9CA0h case    4:*/		return 0x821E9CA4;
		  /* 821E9CA4h */ case    5:  		/* bc 12, CR6_LT, -356 */
		/* 821E9CA4h case    5:*/		if ( regs.CR[6].lt ) { return 0x821E9B40;  }
		/* 821E9CA4h case    5:*/		return 0x821E9CA8;
	}
	return 0x821E9CA8;
} // Block from 821E9C90h-821E9CA8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E9CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9CA8);
		  /* 821E9CA8h */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 821E9CA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821E9CA8h case    0:*/		return 0x821E9CAC;
		  /* 821E9CACh */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E9CACh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9CACh case    1:*/		return 0x821E9CB0;
		  /* 821E9CB0h */ case    2:  		/* bc 4, CR0_EQ, 368 */
		/* 821E9CB0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E9E20;  }
		/* 821E9CB0h case    2:*/		return 0x821E9CB4;
		  /* 821E9CB4h */ case    3:  		/* mr R22, R11 */
		/* 821E9CB4h case    3:*/		regs.R22 = regs.R11;
		/* 821E9CB4h case    3:*/		return 0x821E9CB8;
		  /* 821E9CB8h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821E9CB8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E9CB8h case    4:*/		return 0x821E9CBC;
		  /* 821E9CBCh */ case    5:  		/* bc 12, CR0_EQ, 356 */
		/* 821E9CBCh case    5:*/		if ( regs.CR[0].eq ) { return 0x821E9E20;  }
		/* 821E9CBCh case    5:*/		return 0x821E9CC0;
		  /* 821E9CC0h */ case    6:  		/* lwz R11, <#[R27 + 20]> */
		/* 821E9CC0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 821E9CC0h case    6:*/		return 0x821E9CC4;
		  /* 821E9CC4h */ case    7:  		/* li R28, 0 */
		/* 821E9CC4h case    7:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821E9CC4h case    7:*/		return 0x821E9CC8;
		  /* 821E9CC8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821E9CC8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9CC8h case    8:*/		return 0x821E9CCC;
		  /* 821E9CCCh */ case    9:  		/* bc 4, CR6_GT, 312 */
		/* 821E9CCCh case    9:*/		if ( !regs.CR[6].gt ) { return 0x821E9E04;  }
		/* 821E9CCCh case    9:*/		return 0x821E9CD0;
		  /* 821E9CD0h */ case   10:  		/* li R24, 0 */
		/* 821E9CD0h case   10:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821E9CD0h case   10:*/		return 0x821E9CD4;
		  /* 821E9CD4h */ case   11:  		/* li R23, 0 */
		/* 821E9CD4h case   11:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821E9CD4h case   11:*/		return 0x821E9CD8;
		  /* 821E9CD8h */ case   12:  		/* lwz R11, <#[R22 + 80]> */
		/* 821E9CD8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000050) );
		/* 821E9CD8h case   12:*/		return 0x821E9CDC;
		  /* 821E9CDCh */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821E9CDCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9CDCh case   13:*/		return 0x821E9CE0;
		  /* 821E9CE0h */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 821E9CE0h case   14:*/		if ( regs.CR[6].eq ) { return 0x821E9CEC;  }
		/* 821E9CE0h case   14:*/		return 0x821E9CE4;
		  /* 821E9CE4h */ case   15:  		/* lwzx R11, <#[R23 + R11]> */
		/* 821E9CE4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + regs.R11 + 0x00000000) );
		/* 821E9CE4h case   15:*/		return 0x821E9CE8;
	}
	return 0x821E9CE8;
} // Block from 821E9CA8h-821E9CE8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821E9CE8h
// Function '?PropagateVariableDefinitionToReturnSites@Compiler@D3DXShader@@AAAXPAVBlock@2@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9CE8);
		  /* 821E9CE8h */ case    0:  		/* b 8 */
		/* 821E9CE8h case    0:*/		return 0x821E9CF0;
		/* 821E9CE8h case    0:*/		return 0x821E9CEC;
	}
	return 0x821E9CEC;
} // Block from 821E9CE8h-821E9CECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E9CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9CEC);
		  /* 821E9CECh */ case    0:  		/* li R11, 0 */
		/* 821E9CECh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E9CECh case    0:*/		return 0x821E9CF0;
	}
	return 0x821E9CF0;
} // Block from 821E9CECh-821E9CF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E9CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9CF0);
		  /* 821E9CF0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E9CF0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9CF0h case    0:*/		return 0x821E9CF4;
		  /* 821E9CF4h */ case    1:  		/* bc 12, CR6_EQ, 248 */
		/* 821E9CF4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E9DEC;  }
		/* 821E9CF4h case    1:*/		return 0x821E9CF8;
		  /* 821E9CF8h */ case    2:  		/* lwz R10, <#[R27 + 12]> */
		/* 821E9CF8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000000C) );
		/* 821E9CF8h case    2:*/		return 0x821E9CFC;
		  /* 821E9CFCh */ case    3:  		/* li R30, 0 */
		/* 821E9CFCh case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821E9CFCh case    3:*/		return 0x821E9D00;
		  /* 821E9D00h */ case    4:  		/* lwzx R10, <#[R10 + R24]> */
		/* 821E9D00h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R24 + 0x00000000) );
		/* 821E9D00h case    4:*/		return 0x821E9D04;
		  /* 821E9D04h */ case    5:  		/* rlwinm. R25, R10, 29, 18, 31 */
		/* 821E9D04h case    5:*/		cpu::op::rlwinm<1,29,18,31>(regs,&regs.R25,regs.R10);
		/* 821E9D04h case    5:*/		return 0x821E9D08;
		  /* 821E9D08h */ case    6:  		/* bc 12, CR0_EQ, 228 */
		/* 821E9D08h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E9DEC;  }
		/* 821E9D08h case    6:*/		return 0x821E9D0C;
		  /* 821E9D0Ch */ case    7:  		/* mr R26, R11 */
		/* 821E9D0Ch case    7:*/		regs.R26 = regs.R11;
		/* 821E9D0Ch case    7:*/		return 0x821E9D10;
		  /* 821E9D10h */ case    8:  		/* li R8, 0 */
		/* 821E9D10h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821E9D10h case    8:*/		return 0x821E9D14;
		  /* 821E9D14h */ case    9:  		/* ld R4, <#[R26]> */
		/* 821E9D14h case    9:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R26 + 0x00000000) );
		/* 821E9D14h case    9:*/		return 0x821E9D18;
		  /* 821E9D18h */ case   10:  		/* mr R7, R22 */
		/* 821E9D18h case   10:*/		regs.R7 = regs.R22;
		/* 821E9D18h case   10:*/		return 0x821E9D1C;
		  /* 821E9D1Ch */ case   11:  		/* mr R6, R30 */
		/* 821E9D1Ch case   11:*/		regs.R6 = regs.R30;
		/* 821E9D1Ch case   11:*/		return 0x821E9D20;
		  /* 821E9D20h */ case   12:  		/* mr R5, R28 */
		/* 821E9D20h case   12:*/		regs.R5 = regs.R28;
		/* 821E9D20h case   12:*/		return 0x821E9D24;
		  /* 821E9D24h */ case   13:  		/* mr R3, R27 */
		/* 821E9D24h case   13:*/		regs.R3 = regs.R27;
		/* 821E9D24h case   13:*/		return 0x821E9D28;
		  /* 821E9D28h */ case   14:  		/* bl -5744 */
		/* 821E9D28h case   14:*/		regs.LR = 0x821E9D2C; return 0x821E86B8;
		/* 821E9D28h case   14:*/		return 0x821E9D2C;
		  /* 821E9D2Ch */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E9D2Ch case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E9D2Ch case   15:*/		return 0x821E9D30;
		  /* 821E9D30h */ case   16:  		/* bc 12, CR0_EQ, 172 */
		/* 821E9D30h case   16:*/		if ( regs.CR[0].eq ) { return 0x821E9DDC;  }
		/* 821E9D30h case   16:*/		return 0x821E9D34;
		  /* 821E9D34h */ case   17:  		/* addi R29, R22, 84 */
		/* 821E9D34h case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R22,0x54);
		/* 821E9D34h case   17:*/		return 0x821E9D38;
		  /* 821E9D38h */ case   18:  		/* li R4, 0 */
		/* 821E9D38h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E9D38h case   18:*/		return 0x821E9D3C;
		  /* 821E9D3Ch */ case   19:  		/* mr R3, R29 */
		/* 821E9D3Ch case   19:*/		regs.R3 = regs.R29;
		/* 821E9D3Ch case   19:*/		return 0x821E9D40;
		  /* 821E9D40h */ case   20:  		/* bl -5976 */
		/* 821E9D40h case   20:*/		regs.LR = 0x821E9D44; return 0x821E85E8;
		/* 821E9D40h case   20:*/		return 0x821E9D44;
		  /* 821E9D44h */ case   21:  		/* mr R31, R3 */
		/* 821E9D44h case   21:*/		regs.R31 = regs.R3;
		/* 821E9D44h case   21:*/		return 0x821E9D48;
		  /* 821E9D48h */ case   22:  		/* lwz R11, <#[R29]> */
		/* 821E9D48h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E9D48h case   22:*/		return 0x821E9D4C;
		  /* 821E9D4Ch */ case   23:  		/* nor R10, R11, R11 */
		/* 821E9D4Ch case   23:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 821E9D4Ch case   23:*/		return 0x821E9D50;
		  /* 821E9D50h */ case   24:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E9D50h case   24:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E9D50h case   24:*/		return 0x821E9D54;
		  /* 821E9D54h */ case   25:  		/* bc 4, CR0_EQ, 12 */
		/* 821E9D54h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821E9D60;  }
		/* 821E9D54h case   25:*/		return 0x821E9D58;
		  /* 821E9D58h */ case   26:  		/* li R11, 31 */
		/* 821E9D58h case   26:*/		cpu::op::li<0>(regs,&regs.R11,0x1F);
		/* 821E9D58h case   26:*/		return 0x821E9D5C;
		  /* 821E9D5Ch */ case   27:  		/* b 16 */
		/* 821E9D5Ch case   27:*/		return 0x821E9D6C;
		/* 821E9D5Ch case   27:*/		return 0x821E9D60;
	}
	return 0x821E9D60;
} // Block from 821E9CF0h-821E9D60h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821E9D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9D60);
		  /* 821E9D60h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 821E9D60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821E9D60h case    0:*/		return 0x821E9D64;
		  /* 821E9D64h */ case    1:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821E9D64h case    1:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821E9D64h case    1:*/		return 0x821E9D68;
		  /* 821E9D68h */ case    2:  		/* addi R11, R11, -1 */
		/* 821E9D68h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E9D68h case    2:*/		return 0x821E9D6C;
	}
	return 0x821E9D6C;
} // Block from 821E9D60h-821E9D6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E9D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9D6C);
		  /* 821E9D6Ch */ case    0:  		/* addi R11, R11, -1 */
		/* 821E9D6Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E9D6Ch case    0:*/		return 0x821E9D70;
		  /* 821E9D70h */ case    1:  		/* cmplw CR6, R31, R11 */
		/* 821E9D70h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821E9D70h case    1:*/		return 0x821E9D74;
		  /* 821E9D74h */ case    2:  		/* bc 12, CR6_GT, 104 */
		/* 821E9D74h case    2:*/		if ( regs.CR[6].gt ) { return 0x821E9DDC;  }
		/* 821E9D74h case    2:*/		return 0x821E9D78;
		  /* 821E9D78h */ case    3:  		/* lwz R11, <#[R27 + 96]> */
		/* 821E9D78h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000060) );
		/* 821E9D78h case    3:*/		return 0x821E9D7C;
		  /* 821E9D7Ch */ case    4:  		/* rlwinm R10, R31, 2, 0, 29 */
		/* 821E9D7Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R31);
		/* 821E9D7Ch case    4:*/		return 0x821E9D80;
		  /* 821E9D80h */ case    5:  		/* mr R7, R30 */
		/* 821E9D80h case    5:*/		regs.R7 = regs.R30;
		/* 821E9D80h case    5:*/		return 0x821E9D84;
		  /* 821E9D84h */ case    6:  		/* add R11, R10, R11 */
		/* 821E9D84h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E9D84h case    6:*/		return 0x821E9D88;
		  /* 821E9D88h */ case    7:  		/* mr R6, R28 */
		/* 821E9D88h case    7:*/		regs.R6 = regs.R28;
		/* 821E9D88h case    7:*/		return 0x821E9D8C;
		  /* 821E9D8Ch */ case    8:  		/* mr R4, R27 */
		/* 821E9D8Ch case    8:*/		regs.R4 = regs.R27;
		/* 821E9D8Ch case    8:*/		return 0x821E9D90;
		  /* 821E9D90h */ case    9:  		/* addi R3, R1, 80 */
		/* 821E9D90h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821E9D90h case    9:*/		return 0x821E9D94;
		  /* 821E9D94h */ case   10:  		/* lwz R5, <#[R11 - 4]> */
		/* 821E9D94h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821E9D94h case   10:*/		return 0x821E9D98;
		  /* 821E9D98h */ case   11:  		/* bl 244912 */
		/* 821E9D98h case   11:*/		regs.LR = 0x821E9D9C; return 0x82225A48;
		/* 821E9D98h case   11:*/		return 0x821E9D9C;
		  /* 821E9D9Ch */ case   12:  		/* lwz R11, <#[R29]> */
		/* 821E9D9Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E9D9Ch case   12:*/		return 0x821E9DA0;
		  /* 821E9DA0h */ case   13:  		/* nor R10, R11, R11 */
		/* 821E9DA0h case   13:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 821E9DA0h case   13:*/		return 0x821E9DA4;
		  /* 821E9DA4h */ case   14:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E9DA4h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E9DA4h case   14:*/		return 0x821E9DA8;
		  /* 821E9DA8h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 821E9DA8h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821E9DB4;  }
		/* 821E9DA8h case   15:*/		return 0x821E9DAC;
		  /* 821E9DACh */ case   16:  		/* li R11, 31 */
		/* 821E9DACh case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x1F);
		/* 821E9DACh case   16:*/		return 0x821E9DB0;
		  /* 821E9DB0h */ case   17:  		/* b 16 */
		/* 821E9DB0h case   17:*/		return 0x821E9DC0;
		/* 821E9DB0h case   17:*/		return 0x821E9DB4;
	}
	return 0x821E9DB4;
} // Block from 821E9D6Ch-821E9DB4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821E9DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9DB4);
		  /* 821E9DB4h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 821E9DB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821E9DB4h case    0:*/		return 0x821E9DB8;
		  /* 821E9DB8h */ case    1:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821E9DB8h case    1:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821E9DB8h case    1:*/		return 0x821E9DBC;
		  /* 821E9DBCh */ case    2:  		/* addi R11, R11, -1 */
		/* 821E9DBCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E9DBCh case    2:*/		return 0x821E9DC0;
	}
	return 0x821E9DC0;
} // Block from 821E9DB4h-821E9DC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E9DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9DC0);
		  /* 821E9DC0h */ case    0:  		/* addi R11, R11, -1 */
		/* 821E9DC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821E9DC0h case    0:*/		return 0x821E9DC4;
		  /* 821E9DC4h */ case    1:  		/* cmplw CR6, R31, R11 */
		/* 821E9DC4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821E9DC4h case    1:*/		return 0x821E9DC8;
		  /* 821E9DC8h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821E9DC8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E9DD4;  }
		/* 821E9DC8h case    2:*/		return 0x821E9DCC;
		  /* 821E9DCCh */ case    3:  		/* li R31, -1 */
		/* 821E9DCCh case    3:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 821E9DCCh case    3:*/		return 0x821E9DD0;
		  /* 821E9DD0h */ case    4:  		/* b -136 */
		/* 821E9DD0h case    4:*/		return 0x821E9D48;
		/* 821E9DD0h case    4:*/		return 0x821E9DD4;
	}
	return 0x821E9DD4;
} // Block from 821E9DC0h-821E9DD4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E9DD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9DD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9DD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9DD4);
		  /* 821E9DD4h */ case    0:  		/* addi R4, R31, 1 */
		/* 821E9DD4h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x1);
		/* 821E9DD4h case    0:*/		return 0x821E9DD8;
		  /* 821E9DD8h */ case    1:  		/* b -156 */
		/* 821E9DD8h case    1:*/		return 0x821E9D3C;
		/* 821E9DD8h case    1:*/		return 0x821E9DDC;
	}
	return 0x821E9DDC;
} // Block from 821E9DD4h-821E9DDCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E9DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9DDC);
		  /* 821E9DDCh */ case    0:  		/* addi R30, R30, 1 */
		/* 821E9DDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821E9DDCh case    0:*/		return 0x821E9DE0;
		  /* 821E9DE0h */ case    1:  		/* addi R26, R26, 8 */
		/* 821E9DE0h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x8);
		/* 821E9DE0h case    1:*/		return 0x821E9DE4;
		  /* 821E9DE4h */ case    2:  		/* cmplw CR6, R30, R25 */
		/* 821E9DE4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R25);
		/* 821E9DE4h case    2:*/		return 0x821E9DE8;
		  /* 821E9DE8h */ case    3:  		/* bc 12, CR6_LT, -216 */
		/* 821E9DE8h case    3:*/		if ( regs.CR[6].lt ) { return 0x821E9D10;  }
		/* 821E9DE8h case    3:*/		return 0x821E9DEC;
	}
	return 0x821E9DEC;
} // Block from 821E9DDCh-821E9DECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E9DECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9DEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9DEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9DEC);
		  /* 821E9DECh */ case    0:  		/* lwz R11, <#[R27 + 20]> */
		/* 821E9DECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 821E9DECh case    0:*/		return 0x821E9DF0;
		  /* 821E9DF0h */ case    1:  		/* addi R28, R28, 1 */
		/* 821E9DF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821E9DF0h case    1:*/		return 0x821E9DF4;
		  /* 821E9DF4h */ case    2:  		/* addi R23, R23, 4 */
		/* 821E9DF4h case    2:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x4);
		/* 821E9DF4h case    2:*/		return 0x821E9DF8;
		  /* 821E9DF8h */ case    3:  		/* addi R24, R24, 40 */
		/* 821E9DF8h case    3:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x28);
		/* 821E9DF8h case    3:*/		return 0x821E9DFC;
		  /* 821E9DFCh */ case    4:  		/* cmplw CR6, R28, R11 */
		/* 821E9DFCh case    4:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821E9DFCh case    4:*/		return 0x821E9E00;
		  /* 821E9E00h */ case    5:  		/* bc 12, CR6_LT, -296 */
		/* 821E9E00h case    5:*/		if ( regs.CR[6].lt ) { return 0x821E9CD8;  }
		/* 821E9E00h case    5:*/		return 0x821E9E04;
	}
	return 0x821E9E04;
} // Block from 821E9DECh-821E9E04h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E9E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9E04);
		  /* 821E9E04h */ case    0:  		/* rlwinm R11, R22, 0, 0, 30 */
		/* 821E9E04h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R22);
		/* 821E9E04h case    0:*/		return 0x821E9E08;
		  /* 821E9E08h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E9E08h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E9E08h case    1:*/		return 0x821E9E0C;
		  /* 821E9E0Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E9E0Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9E0Ch case    2:*/		return 0x821E9E10;
		  /* 821E9E10h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E9E10h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E9E20;  }
		/* 821E9E10h case    3:*/		return 0x821E9E14;
		  /* 821E9E14h */ case    4:  		/* mr R22, R11 */
		/* 821E9E14h case    4:*/		regs.R22 = regs.R11;
		/* 821E9E14h case    4:*/		return 0x821E9E18;
		  /* 821E9E18h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E9E18h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9E18h case    5:*/		return 0x821E9E1C;
		  /* 821E9E1Ch */ case    6:  		/* bc 4, CR6_EQ, -348 */
		/* 821E9E1Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E9CC0;  }
		/* 821E9E1Ch case    6:*/		return 0x821E9E20;
	}
	return 0x821E9E20;
} // Block from 821E9E04h-821E9E20h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E9E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9E20);
		  /* 821E9E20h */ case    0:  		/* lwz R31, <#[R27 + 100]> */
		/* 821E9E20h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000064) );
		/* 821E9E20h case    0:*/		return 0x821E9E24;
		  /* 821E9E24h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821E9E24h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E9E24h case    1:*/		return 0x821E9E28;
		  /* 821E9E28h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821E9E28h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E9E5C;  }
		/* 821E9E28h case    2:*/		return 0x821E9E2C;
		  /* 821E9E2Ch */ case    3:  		/* li R6, 1 */
		/* 821E9E2Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821E9E2Ch case    3:*/		return 0x821E9E30;
		  /* 821E9E30h */ case    4:  		/* li R5, 0 */
		/* 821E9E30h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E9E30h case    4:*/		return 0x821E9E34;
		  /* 821E9E34h */ case    5:  		/* li R4, 112 */
		/* 821E9E34h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x70);
		/* 821E9E34h case    5:*/		return 0x821E9E38;
		  /* 821E9E38h */ case    6:  		/* mr R3, R27 */
		/* 821E9E38h case    6:*/		regs.R3 = regs.R27;
		/* 821E9E38h case    6:*/		return 0x821E9E3C;
		  /* 821E9E3Ch */ case    7:  		/* bl -547340 */
		/* 821E9E3Ch case    7:*/		regs.LR = 0x821E9E40; return 0x82164430;
		/* 821E9E3Ch case    7:*/		return 0x821E9E40;
		  /* 821E9E40h */ case    8:  		/* addi R30, R3, -4 */
		/* 821E9E40h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0xFFFFFFFC);
		/* 821E9E40h case    8:*/		return 0x821E9E44;
		  /* 821E9E44h */ case    9:  		/* mr R4, R31 */
		/* 821E9E44h case    9:*/		regs.R4 = regs.R31;
		/* 821E9E44h case    9:*/		return 0x821E9E48;
		  /* 821E9E48h */ case   10:  		/* mr R3, R27 */
		/* 821E9E48h case   10:*/		regs.R3 = regs.R27;
		/* 821E9E48h case   10:*/		return 0x821E9E4C;
		  /* 821E9E4Ch */ case   11:  		/* bl -4108 */
		/* 821E9E4Ch case   11:*/		regs.LR = 0x821E9E50; return 0x821E8E40;
		/* 821E9E4Ch case   11:*/		return 0x821E9E50;
		  /* 821E9E50h */ case   12:  		/* lwzx R31, <#[R30 + R31]> */
		/* 821E9E50h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + regs.R31 + 0x00000000) );
		/* 821E9E50h case   12:*/		return 0x821E9E54;
		  /* 821E9E54h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 821E9E54h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E9E54h case   13:*/		return 0x821E9E58;
		  /* 821E9E58h */ case   14:  		/* bc 4, CR6_EQ, -20 */
		/* 821E9E58h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821E9E44;  }
		/* 821E9E58h case   14:*/		return 0x821E9E5C;
	}
	return 0x821E9E5C;
} // Block from 821E9E20h-821E9E5Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821E9E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9E5C);
		  /* 821E9E5Ch */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 821E9E5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821E9E5Ch case    0:*/		return 0x821E9E60;
		  /* 821E9E60h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821E9E60h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9E60h case    1:*/		return 0x821E9E64;
		  /* 821E9E64h */ case    2:  		/* addic R10, R10, -1 */
		/* 821E9E64h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821E9E64h case    2:*/		return 0x821E9E68;
		  /* 821E9E68h */ case    3:  		/* subfe R10, R10, R10 */
		/* 821E9E68h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821E9E68h case    3:*/		return 0x821E9E6C;
		  /* 821E9E6Ch */ case    4:  		/* and R11, R10, R11 */
		/* 821E9E6Ch case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E9E6Ch case    4:*/		return 0x821E9E70;
		  /* 821E9E70h */ case    5:  		/* lwz R11, <#[R11 + 20]> */
		/* 821E9E70h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821E9E70h case    5:*/		return 0x821E9E74;
		  /* 821E9E74h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E9E74h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E9E74h case    6:*/		return 0x821E9E78;
		  /* 821E9E78h */ case    7:  		/* bc 4, CR0_EQ, 540 */
		/* 821E9E78h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821EA094;  }
		/* 821E9E78h case    7:*/		return 0x821E9E7C;
		  /* 821E9E7Ch */ case    8:  		/* mr R4, R11 */
		/* 821E9E7Ch case    8:*/		regs.R4 = regs.R11;
		/* 821E9E7Ch case    8:*/		return 0x821E9E80;
		  /* 821E9E80h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 821E9E80h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E9E80h case    9:*/		return 0x821E9E84;
		  /* 821E9E84h */ case   10:  		/* bc 12, CR0_EQ, 528 */
		/* 821E9E84h case   10:*/		if ( regs.CR[0].eq ) { return 0x821EA094;  }
		/* 821E9E84h case   10:*/		return 0x821E9E88;
		  /* 821E9E88h */ case   11:  		/* lwz R11, <#[R4 + 8]> */
		/* 821E9E88h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821E9E88h case   11:*/		return 0x821E9E8C;
		  /* 821E9E8Ch */ case   12:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821E9E8Ch case   12:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821E9E8Ch case   12:*/		return 0x821E9E90;
		  /* 821E9E90h */ case   13:  		/* cmplwi CR6, R11, 125 */
		/* 821E9E90h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821E9E90h case   13:*/		return 0x821E9E94;
		  /* 821E9E94h */ case   14:  		/* bc 12, CR6_EQ, 16 */
		/* 821E9E94h case   14:*/		if ( regs.CR[6].eq ) { return 0x821E9EA4;  }
		/* 821E9E94h case   14:*/		return 0x821E9E98;
		  /* 821E9E98h */ case   15:  		/* cmplwi CR6, R11, 124 */
		/* 821E9E98h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821E9E98h case   15:*/		return 0x821E9E9C;
		  /* 821E9E9Ch */ case   16:  		/* li R11, 0 */
		/* 821E9E9Ch case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821E9E9Ch case   16:*/		return 0x821E9EA0;
		  /* 821E9EA0h */ case   17:  		/* bc 4, CR6_EQ, 8 */
		/* 821E9EA0h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821E9EA8;  }
		/* 821E9EA0h case   17:*/		return 0x821E9EA4;
	}
	return 0x821E9EA4;
} // Block from 821E9E5Ch-821E9EA4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821E9EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9EA4);
		  /* 821E9EA4h */ case    0:  		/* li R11, 1 */
		/* 821E9EA4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E9EA4h case    0:*/		return 0x821E9EA8;
	}
	return 0x821E9EA8;
} // Block from 821E9EA4h-821E9EA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E9EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9EA8);
		  /* 821E9EA8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E9EA8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E9EA8h case    0:*/		return 0x821E9EAC;
		  /* 821E9EACh */ case    1:  		/* bc 12, CR0_EQ, 460 */
		/* 821E9EACh case    1:*/		if ( regs.CR[0].eq ) { return 0x821EA078;  }
		/* 821E9EACh case    1:*/		return 0x821E9EB0;
		  /* 821E9EB0h */ case    2:  		/* lwz R5, <#[R4 + 4]> */
		/* 821E9EB0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x00000004) );
		/* 821E9EB0h case    2:*/		return 0x821E9EB4;
		  /* 821E9EB4h */ case    3:  		/* cmplwi CR6, R5, 0 */
		/* 821E9EB4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821E9EB4h case    3:*/		return 0x821E9EB8;
		  /* 821E9EB8h */ case    4:  		/* bc 12, CR6_EQ, 448 */
		/* 821E9EB8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821EA078;  }
		/* 821E9EB8h case    4:*/		return 0x821E9EBC;
		  /* 821E9EBCh */ case    5:  		/* lwz R11, <#[R5 + 16]> */
		/* 821E9EBCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000010) );
		/* 821E9EBCh case    5:*/		return 0x821E9EC0;
		  /* 821E9EC0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821E9EC0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9EC0h case    6:*/		return 0x821E9EC4;
		  /* 821E9EC4h */ case    7:  		/* bc 12, CR6_EQ, 428 */
		/* 821E9EC4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821EA070;  }
		/* 821E9EC4h case    7:*/		return 0x821E9EC8;
		  /* 821E9EC8h */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 821E9EC8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E9EC8h case    8:*/		return 0x821E9ECC;
		  /* 821E9ECCh */ case    9:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821E9ECCh case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821E9ECCh case    9:*/		return 0x821E9ED0;
		  /* 821E9ED0h */ case   10:  		/* cmplwi CR6, R10, 14336 */
		/* 821E9ED0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 821E9ED0h case   10:*/		return 0x821E9ED4;
		  /* 821E9ED4h */ case   11:  		/* bc 4, CR6_EQ, 412 */
		/* 821E9ED4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821EA070;  }
		/* 821E9ED4h case   11:*/		return 0x821E9ED8;
		  /* 821E9ED8h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821E9ED8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E9ED8h case   12:*/		return 0x821E9EDC;
		  /* 821E9EDCh */ case   13:  		/* cmplwi CR6, R10, 0 */
		/* 821E9EDCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E9EDCh case   13:*/		return 0x821E9EE0;
	}
	return 0x821E9EE0;
} // Block from 821E9EA8h-821E9EE0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821E9EE0h
// Function '?GetOrCreateScopeExitBlock@Compiler@D3DXShader@@AAAPAVBlock@2@PAV32@0W4PlacementMethod@12@0_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9EE0);
		  /* 821E9EE0h */ case    0:  		/* bc 12, CR6_EQ, 20 */
		/* 821E9EE0h case    0:*/		if ( regs.CR[6].eq ) { return 0x821E9EF4;  }
		/* 821E9EE0h case    0:*/		return 0x821E9EE4;
		  /* 821E9EE4h */ case    1:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E9EE4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E9EE4h case    1:*/		return 0x821E9EE8;
		  /* 821E9EE8h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821E9EE8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E9EE8h case    2:*/		return 0x821E9EEC;
		  /* 821E9EECh */ case    3:  		/* li R10, 1 */
		/* 821E9EECh case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821E9EECh case    3:*/		return 0x821E9EF0;
		  /* 821E9EF0h */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 821E9EF0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821E9EF8;  }
		/* 821E9EF0h case    4:*/		return 0x821E9EF4;
	}
	return 0x821E9EF4;
} // Block from 821E9EE0h-821E9EF4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E9EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9EF4);
		  /* 821E9EF4h */ case    0:  		/* li R10, 0 */
		/* 821E9EF4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821E9EF4h case    0:*/		return 0x821E9EF8;
	}
	return 0x821E9EF8;
} // Block from 821E9EF4h-821E9EF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E9EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9EF8);
		  /* 821E9EF8h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821E9EF8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821E9EF8h case    0:*/		return 0x821E9EFC;
		  /* 821E9EFCh */ case    1:  		/* bc 4, CR0_EQ, 372 */
		/* 821E9EFCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821EA070;  }
		/* 821E9EFCh case    1:*/		return 0x821E9F00;
		  /* 821E9F00h */ case    2:  		/* lwz R10, <#[R5]> */
		/* 821E9F00h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000000) );
		/* 821E9F00h case    2:*/		return 0x821E9F04;
		  /* 821E9F04h */ case    3:  		/* li R6, 0 */
		/* 821E9F04h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E9F04h case    3:*/		return 0x821E9F08;
		  /* 821E9F08h */ case    4:  		/* addi R3, R11, 4 */
		/* 821E9F08h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 821E9F08h case    4:*/		return 0x821E9F0C;
		  /* 821E9F0Ch */ case    5:  		/* rlwinm R7, R10, 0, 27, 31 */
		/* 821E9F0Ch case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R10);
		/* 821E9F0Ch case    5:*/		return 0x821E9F10;
		  /* 821E9F10h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 821E9F10h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821E9F10h case    6:*/		return 0x821E9F14;
		  /* 821E9F14h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821E9F14h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E9F14h case    7:*/		return 0x821E9F18;
		  /* 821E9F18h */ case    8:  		/* bc 12, CR6_EQ, 336 */
		/* 821E9F18h case    8:*/		if ( regs.CR[6].eq ) { return 0x821EA068;  }
		/* 821E9F18h case    8:*/		return 0x821E9F1C;
		  /* 821E9F1Ch */ case    9:  		/* lwz R10, <#[R11 + 16]> */
		/* 821E9F1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821E9F1Ch case    9:*/		return 0x821E9F20;
		  /* 821E9F20h */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 821E9F20h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E9F20h case   10:*/		return 0x821E9F24;
		  /* 821E9F24h */ case   11:  		/* bc 12, CR6_EQ, 304 */
		/* 821E9F24h case   11:*/		if ( regs.CR[6].eq ) { return 0x821EA054;  }
		/* 821E9F24h case   11:*/		return 0x821E9F28;
		  /* 821E9F28h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821E9F28h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821E9F28h case   12:*/		return 0x821E9F2C;
		  /* 821E9F2Ch */ case   13:  		/* rlwinm. R9, R7, 0, 27, 28 */
		/* 821E9F2Ch case   13:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R9,regs.R7);
		/* 821E9F2Ch case   13:*/		return 0x821E9F30;
		  /* 821E9F30h */ case   14:  		/* rlwinm R8, R10, 0, 27, 31 */
		/* 821E9F30h case   14:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R10);
		/* 821E9F30h case   14:*/		return 0x821E9F34;
		  /* 821E9F34h */ case   15:  		/* bc 12, CR0_EQ, 20 */
		/* 821E9F34h case   15:*/		if ( regs.CR[0].eq ) { return 0x821E9F48;  }
		/* 821E9F34h case   15:*/		return 0x821E9F38;
		  /* 821E9F38h */ case   16:  		/* rlwinm. R10, R8, 0, 27, 28 */
		/* 821E9F38h case   16:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R8);
		/* 821E9F38h case   16:*/		return 0x821E9F3C;
		  /* 821E9F3Ch */ case   17:  		/* bc 12, CR0_EQ, 12 */
		/* 821E9F3Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x821E9F48;  }
		/* 821E9F3Ch case   17:*/		return 0x821E9F40;
		  /* 821E9F40h */ case   18:  		/* li R10, 0 */
		/* 821E9F40h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821E9F40h case   18:*/		return 0x821E9F44;
		  /* 821E9F44h */ case   19:  		/* b 44 */
		/* 821E9F44h case   19:*/		return 0x821E9F70;
		/* 821E9F44h case   19:*/		return 0x821E9F48;
	}
	return 0x821E9F48;
} // Block from 821E9EF8h-821E9F48h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821E9F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9F48);
		  /* 821E9F48h */ case    0:  		/* rlwinm. R10, R7, 0, 30, 30 */
		/* 821E9F48h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R7);
		/* 821E9F48h case    0:*/		return 0x821E9F4C;
		  /* 821E9F4Ch */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821E9F4Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821E9F58;  }
		/* 821E9F4Ch case    1:*/		return 0x821E9F50;
		  /* 821E9F50h */ case    2:  		/* rlwinm. R10, R8, 0, 31, 31 */
		/* 821E9F50h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R8);
		/* 821E9F50h case    2:*/		return 0x821E9F54;
		  /* 821E9F54h */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 821E9F54h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E9F40;  }
		/* 821E9F54h case    3:*/		return 0x821E9F58;
	}
	return 0x821E9F58;
} // Block from 821E9F48h-821E9F58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E9F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9F58);
		  /* 821E9F58h */ case    0:  		/* rlwinm. R10, R7, 0, 29, 29 */
		/* 821E9F58h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R7);
		/* 821E9F58h case    0:*/		return 0x821E9F5C;
		  /* 821E9F5Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821E9F5Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821E9F6C;  }
		/* 821E9F5Ch case    1:*/		return 0x821E9F60;
		  /* 821E9F60h */ case    2:  		/* rlwinm. R10, R8, 0, 31, 31 */
		/* 821E9F60h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R8);
		/* 821E9F60h case    2:*/		return 0x821E9F64;
		  /* 821E9F64h */ case    3:  		/* li R10, 0 */
		/* 821E9F64h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821E9F64h case    3:*/		return 0x821E9F68;
		  /* 821E9F68h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 821E9F68h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E9F70;  }
		/* 821E9F68h case    4:*/		return 0x821E9F6C;
	}
	return 0x821E9F6C;
} // Block from 821E9F58h-821E9F6Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E9F6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9F6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9F6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9F6C);
		  /* 821E9F6Ch */ case    0:  		/* li R10, 1 */
		/* 821E9F6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821E9F6Ch case    0:*/		return 0x821E9F70;
	}
	return 0x821E9F70;
} // Block from 821E9F6Ch-821E9F70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E9F70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9F70);
		  /* 821E9F70h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821E9F70h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821E9F70h case    0:*/		return 0x821E9F74;
		  /* 821E9F74h */ case    1:  		/* bc 12, CR0_EQ, 224 */
		/* 821E9F74h case    1:*/		if ( regs.CR[0].eq ) { return 0x821EA054;  }
		/* 821E9F74h case    1:*/		return 0x821E9F78;
		  /* 821E9F78h */ case    2:  		/* lwz R10, <#[R11 + 12]> */
		/* 821E9F78h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E9F78h case    2:*/		return 0x821E9F7C;
		  /* 821E9F7Ch */ case    3:  		/* addi R9, R10, 4 */
		/* 821E9F7Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821E9F7Ch case    3:*/		return 0x821E9F80;
		  /* 821E9F80h */ case    4:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E9F80h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E9F80h case    4:*/		return 0x821E9F84;
		  /* 821E9F84h */ case    5:  		/* b 12 */
		/* 821E9F84h case    5:*/		return 0x821E9F90;
		/* 821E9F84h case    5:*/		return 0x821E9F88;
		  /* 821E9F88h */ case    6:  		/* addi R9, R10, 8 */
		/* 821E9F88h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x8);
		/* 821E9F88h case    6:*/		return 0x821E9F8C;
		  /* 821E9F8Ch */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E9F8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E9F8Ch case    7:*/		return 0x821E9F90;
	}
	return 0x821E9F90;
} // Block from 821E9F70h-821E9F90h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E9F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E9F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E9F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E9F90);
		  /* 821E9F90h */ case    0:  		/* cmplw CR6, R10, R11 */
		/* 821E9F90h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821E9F90h case    0:*/		return 0x821E9F94;
		  /* 821E9F94h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821E9F94h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E9F88;  }
		/* 821E9F94h case    1:*/		return 0x821E9F98;
		  /* 821E9F98h */ case    2:  		/* lwz R6, <#[R11 + 8]> */
		/* 821E9F98h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 821E9F98h case    2:*/		return 0x821E9F9C;
		  /* 821E9F9Ch */ case    3:  		/* rlwinm. R31, R7, 0, 29, 29 */
		/* 821E9F9Ch case    3:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R31,regs.R7);
		/* 821E9F9Ch case    3:*/		return 0x821E9FA0;
		  /* 821E9FA0h */ case    4:  		/* stw R6, <#[R9]> */
		/* 821E9FA0h case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R9 + 0x00000000) );
		/* 821E9FA0h case    4:*/		return 0x821E9FA4;
		  /* 821E9FA4h */ case    5:  		/* mr R10, R7 */
		/* 821E9FA4h case    5:*/		regs.R10 = regs.R7;
		/* 821E9FA4h case    5:*/		return 0x821E9FA8;
		  /* 821E9FA8h */ case    6:  		/* lwz R9, <#[R4 + 4]> */
		/* 821E9FA8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000004) );
		/* 821E9FA8h case    6:*/		return 0x821E9FAC;
		  /* 821E9FACh */ case    7:  		/* stw R9, <#[R11 + 8]> */
		/* 821E9FACh case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E9FACh case    7:*/		return 0x821E9FB0;
		  /* 821E9FB0h */ case    8:  		/* stw R11, <#[R4 + 4]> */
		/* 821E9FB0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821E9FB0h case    8:*/		return 0x821E9FB4;
		  /* 821E9FB4h */ case    9:  		/* stw R4, <#[R11 + 12]> */
		/* 821E9FB4h case    9:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821E9FB4h case    9:*/		return 0x821E9FB8;
		  /* 821E9FB8h */ case   10:  		/* lwz R9, <#[R5]> */
		/* 821E9FB8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000000) );
		/* 821E9FB8h case   10:*/		return 0x821E9FBC;
		  /* 821E9FBCh */ case   11:  		/* lwz R6, <#[R11]> */
		/* 821E9FBCh case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821E9FBCh case   11:*/		return 0x821E9FC0;
		  /* 821E9FC0h */ case   12:  		/* mr R31, R6 */
		/* 821E9FC0h case   12:*/		regs.R31 = regs.R6;
		/* 821E9FC0h case   12:*/		return 0x821E9FC4;
		  /* 821E9FC4h */ case   13:  		/* rlwinm R31, R31, 27, 24, 31 */
		/* 821E9FC4h case   13:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R31,regs.R31);
		/* 821E9FC4h case   13:*/		return 0x821E9FC8;
		  /* 821E9FC8h */ case   14:  		/* rlwinm R9, R9, 27, 24, 31 */
		/* 821E9FC8h case   14:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R9);
		/* 821E9FC8h case   14:*/		return 0x821E9FCC;
		  /* 821E9FCCh */ case   15:  		/* rlwinm R30, R31, 27, 29, 30 */
		/* 821E9FCCh case   15:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R30,regs.R31);
		/* 821E9FCCh case   15:*/		return 0x821E9FD0;
		  /* 821E9FD0h */ case   16:  		/* rlwinm R29, R31, 29, 29, 30 */
		/* 821E9FD0h case   16:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R29,regs.R31);
		/* 821E9FD0h case   16:*/		return 0x821E9FD4;
		  /* 821E9FD4h */ case   17:  		/* srw R30, R9, R30 */
		/* 821E9FD4h case   17:*/		cpu::op::srw<0>(regs,&regs.R30,regs.R9,regs.R30);
		/* 821E9FD4h case   17:*/		return 0x821E9FD8;
		  /* 821E9FD8h */ case   18:  		/* srw R29, R9, R29 */
		/* 821E9FD8h case   18:*/		cpu::op::srw<0>(regs,&regs.R29,regs.R9,regs.R29);
		/* 821E9FD8h case   18:*/		return 0x821E9FDC;
		  /* 821E9FDCh */ case   19:  		/* rlwimi R29, R30, 2, 28, 29 */
		/* 821E9FDCh case   19:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R29,regs.R30);
		/* 821E9FDCh case   19:*/		return 0x821E9FE0;
		  /* 821E9FE0h */ case   20:  		/* rlwinm R30, R31, 31, 29, 30 */
		/* 821E9FE0h case   20:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R30,regs.R31);
		/* 821E9FE0h case   20:*/		return 0x821E9FE4;
		  /* 821E9FE4h */ case   21:  		/* rlwinm R29, R29, 0, 28, 31 */
		/* 821E9FE4h case   21:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R29,regs.R29);
		/* 821E9FE4h case   21:*/		return 0x821E9FE8;
		  /* 821E9FE8h */ case   22:  		/* srw R30, R9, R30 */
		/* 821E9FE8h case   22:*/		cpu::op::srw<0>(regs,&regs.R30,regs.R9,regs.R30);
		/* 821E9FE8h case   22:*/		return 0x821E9FEC;
		  /* 821E9FECh */ case   23:  		/* rlwinm R31, R31, 1, 29, 30 */
		/* 821E9FECh case   23:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R31,regs.R31);
		/* 821E9FECh case   23:*/		return 0x821E9FF0;
		  /* 821E9FF0h */ case   24:  		/* rlwimi R30, R29, 2, 0, 29 */
		/* 821E9FF0h case   24:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R30,regs.R29);
		/* 821E9FF0h case   24:*/		return 0x821E9FF4;
		  /* 821E9FF4h */ case   25:  		/* srw R9, R9, R31 */
		/* 821E9FF4h case   25:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R31);
		/* 821E9FF4h case   25:*/		return 0x821E9FF8;
		  /* 821E9FF8h */ case   26:  		/* rlwimi R9, R30, 2, 0, 29 */
		/* 821E9FF8h case   26:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R30);
		/* 821E9FF8h case   26:*/		return 0x821E9FFC;
		  /* 821E9FFCh */ case   27:  		/* rlwinm R6, R6, 0, 27, 18 */
		/* 821E9FFCh case   27:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R6,regs.R6);
		/* 821E9FFCh case   27:*/		return 0x821EA000;
		  /* 821EA000h */ case   28:  		/* rlwinm R9, R9, 5, 0, 26 */
		/* 821EA000h case   28:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R9);
		/* 821EA000h case   28:*/		return 0x821EA004;
		  /* 821EA004h */ case   29:  		/* or R9, R9, R6 */
		/* 821EA004h case   29:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821EA004h case   29:*/		return 0x821EA008;
		  /* 821EA008h */ case   30:  		/* stw R9, <#[R11]> */
		/* 821EA008h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821EA008h case   30:*/		return 0x821EA00C;
		  /* 821EA00Ch */ case   31:  		/* bc 12, CR0_EQ, 16 */
		/* 821EA00Ch case   31:*/		if ( regs.CR[0].eq ) { return 0x821EA01C;  }
		/* 821EA00Ch case   31:*/		return 0x821EA010;
		  /* 821EA010h */ case   32:  		/* rlwinm. R6, R8, 0, 30, 30 */
		/* 821EA010h case   32:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R6,regs.R8);
		/* 821EA010h case   32:*/		return 0x821EA014;
		  /* 821EA014h */ case   33:  		/* bc 12, CR0_EQ, 8 */
		/* 821EA014h case   33:*/		if ( regs.CR[0].eq ) { return 0x821EA01C;  }
		/* 821EA014h case   33:*/		return 0x821EA018;
		  /* 821EA018h */ case   34:  		/* addi R10, R7, -4 */
		/* 821EA018h case   34:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R7,0xFFFFFFFC);
		/* 821EA018h case   34:*/		return 0x821EA01C;
	}
	return 0x821EA01C;
} // Block from 821E9F90h-821EA01Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 821EA01Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA01C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA01C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA01C);
		  /* 821EA01Ch */ case    0:  		/* and R6, R10, R8 */
		/* 821EA01Ch case    0:*/		cpu::op::and<0>(regs,&regs.R6,regs.R10,regs.R8);
		/* 821EA01Ch case    0:*/		return 0x821EA020;
		  /* 821EA020h */ case    1:  		/* rlwinm. R6, R6, 0, 29, 29 */
		/* 821EA020h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R6,regs.R6);
		/* 821EA020h case    1:*/		return 0x821EA024;
		  /* 821EA024h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821EA024h case    2:*/		if ( regs.CR[0].eq ) { return 0x821EA030;  }
		/* 821EA024h case    2:*/		return 0x821EA028;
		  /* 821EA028h */ case    3:  		/* addi R10, R10, -4 */
		/* 821EA028h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821EA028h case    3:*/		return 0x821EA02C;
		  /* 821EA02Ch */ case    4:  		/* addi R8, R8, -4 */
		/* 821EA02Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFC);
		/* 821EA02Ch case    4:*/		return 0x821EA030;
	}
	return 0x821EA030;
} // Block from 821EA01Ch-821EA030h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821EA030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA030);
		  /* 821EA030h */ case    0:  		/* rlwinm. R6, R10, 0, 31, 31 */
		/* 821EA030h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R6,regs.R10);
		/* 821EA030h case    0:*/		return 0x821EA034;
		  /* 821EA034h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821EA034h case    1:*/		if ( regs.CR[0].eq ) { return 0x821EA044;  }
		/* 821EA034h case    1:*/		return 0x821EA038;
		  /* 821EA038h */ case    2:  		/* rlwinm. R6, R8, 0, 30, 30 */
		/* 821EA038h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R6,regs.R8);
		/* 821EA038h case    2:*/		return 0x821EA03C;
		  /* 821EA03Ch */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821EA03Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821EA044;  }
		/* 821EA03Ch case    3:*/		return 0x821EA040;
		  /* 821EA040h */ case    4:  		/* addi R8, R8, -2 */
		/* 821EA040h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFE);
		/* 821EA040h case    4:*/		return 0x821EA044;
	}
	return 0x821EA044;
} // Block from 821EA030h-821EA044h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821EA044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA044);
		  /* 821EA044h */ case    0:  		/* or R10, R10, R8 */
		/* 821EA044h case    0:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821EA044h case    0:*/		return 0x821EA048;
		  /* 821EA048h */ case    1:  		/* li R6, 1 */
		/* 821EA048h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821EA048h case    1:*/		return 0x821EA04C;
		  /* 821EA04Ch */ case    2:  		/* rlwimi R10, R9, 0, 0, 26 */
		/* 821EA04Ch case    2:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R10,regs.R9);
		/* 821EA04Ch case    2:*/		return 0x821EA050;
		  /* 821EA050h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821EA050h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EA050h case    3:*/		return 0x821EA054;
	}
	return 0x821EA054;
} // Block from 821EA044h-821EA054h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821EA054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA054);
		  /* 821EA054h */ case    0:  		/* lwz R10, <#[R3]> */
		/* 821EA054h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821EA054h case    0:*/		return 0x821EA058;
		  /* 821EA058h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821EA058h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821EA058h case    1:*/		return 0x821EA05C;
		  /* 821EA05Ch */ case    2:  		/* bc 4, CR6_EQ, -332 */
		/* 821EA05Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E9F10;  }
		/* 821EA05Ch case    2:*/		return 0x821EA060;
		  /* 821EA060h */ case    3:  		/* addi R3, R11, 8 */
		/* 821EA060h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x8);
		/* 821EA060h case    3:*/		return 0x821EA064;
		  /* 821EA064h */ case    4:  		/* b -340 */
		/* 821EA064h case    4:*/		return 0x821E9F10;
		/* 821EA064h case    4:*/		return 0x821EA068;
	}
	return 0x821EA068;
} // Block from 821EA054h-821EA068h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821EA068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA068);
		  /* 821EA068h */ case    0:  		/* rlwinm. R11, R6, 0, 24, 31 */
		/* 821EA068h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R6);
		/* 821EA068h case    0:*/		return 0x821EA06C;
		  /* 821EA06Ch */ case    1:  		/* bc 4, CR0_EQ, -444 */
		/* 821EA06Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E9EB0;  }
		/* 821EA06Ch case    1:*/		return 0x821EA070;
	}
	return 0x821EA070;
} // Block from 821EA068h-821EA070h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EA070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA070);
		  /* 821EA070h */ case    0:  		/* lwz R5, <#[R5 + 8]> */
		/* 821EA070h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000008) );
		/* 821EA070h case    0:*/		return 0x821EA074;
		  /* 821EA074h */ case    1:  		/* b -448 */
		/* 821EA074h case    1:*/		return 0x821E9EB4;
		/* 821EA074h case    1:*/		return 0x821EA078;
	}
	return 0x821EA078;
} // Block from 821EA070h-821EA078h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EA078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA078);
		  /* 821EA078h */ case    0:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821EA078h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821EA078h case    0:*/		return 0x821EA07C;
		  /* 821EA07Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821EA07Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821EA07Ch case    1:*/		return 0x821EA080;
		  /* 821EA080h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EA080h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EA080h case    2:*/		return 0x821EA084;
		  /* 821EA084h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821EA084h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EA094;  }
		/* 821EA084h case    3:*/		return 0x821EA088;
		  /* 821EA088h */ case    4:  		/* mr R4, R11 */
		/* 821EA088h case    4:*/		regs.R4 = regs.R11;
		/* 821EA088h case    4:*/		return 0x821EA08C;
		  /* 821EA08Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821EA08Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821EA08Ch case    5:*/		return 0x821EA090;
		  /* 821EA090h */ case    6:  		/* bc 4, CR6_EQ, -520 */
		/* 821EA090h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E9E88;  }
		/* 821EA090h case    6:*/		return 0x821EA094;
	}
	return 0x821EA094;
} // Block from 821EA078h-821EA094h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821EA094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA094);
		  /* 821EA094h */ case    0:  		/* addi R1, R1, 176 */
		/* 821EA094h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821EA094h case    0:*/		return 0x821EA098;
		  /* 821EA098h */ case    1:  		/* b -1412616 */
		/* 821EA098h case    1:*/		return 0x82091290;
		/* 821EA098h case    1:*/		return 0x821EA09C;
		  /* 821EA09Ch */ case    2:  		/* nop */
		/* 821EA09Ch case    2:*/		cpu::op::nop();
		/* 821EA09Ch case    2:*/		return 0x821EA0A0;
		  /* 821EA0A0h */ case    3:  		/* rlwinm R11, R5, 2, 0, 29 */
		/* 821EA0A0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R5);
		/* 821EA0A0h case    3:*/		return 0x821EA0A4;
		  /* 821EA0A4h */ case    4:  		/* rlwinm R8, R4, 29, 3, 29 */
		/* 821EA0A4h case    4:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R8,regs.R4);
		/* 821EA0A4h case    4:*/		return 0x821EA0A8;
		  /* 821EA0A8h */ case    5:  		/* add R11, R11, R3 */
		/* 821EA0A8h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821EA0A8h case    5:*/		return 0x821EA0AC;
		  /* 821EA0ACh */ case    6:  		/* mr R9, R3 */
		/* 821EA0ACh case    6:*/		regs.R9 = regs.R3;
		/* 821EA0ACh case    6:*/		return 0x821EA0B0;
		  /* 821EA0B0h */ case    7:  		/* addi R10, R11, -4 */
		/* 821EA0B0h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFC);
		/* 821EA0B0h case    7:*/		return 0x821EA0B4;
		  /* 821EA0B4h */ case    8:  		/* add R11, R8, R3 */
		/* 821EA0B4h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R3);
		/* 821EA0B4h case    8:*/		return 0x821EA0B8;
		  /* 821EA0B8h */ case    9:  		/* li R3, -1 */
		/* 821EA0B8h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 821EA0B8h case    9:*/		return 0x821EA0BC;
		  /* 821EA0BCh */ case   10:  		/* rlwinm R8, R4, 0, 27, 31 */
		/* 821EA0BCh case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R4);
		/* 821EA0BCh case   10:*/		return 0x821EA0C0;
		  /* 821EA0C0h */ case   11:  		/* slw R8, R3, R8 */
		/* 821EA0C0h case   11:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R3,regs.R8);
		/* 821EA0C0h case   11:*/		return 0x821EA0C4;
		  /* 821EA0C4h */ case   12:  		/* b 24 */
		/* 821EA0C4h case   12:*/		return 0x821EA0DC;
		/* 821EA0C4h case   12:*/		return 0x821EA0C8;
		  /* 821EA0C8h */ case   13:  		/* lwz R7, <#[R11]> */
		/* 821EA0C8h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821EA0C8h case   13:*/		return 0x821EA0CC;
		  /* 821EA0CCh */ case   14:  		/* and. R8, R8, R7 */
		/* 821EA0CCh case   14:*/		cpu::op::and<1>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821EA0CCh case   14:*/		return 0x821EA0D0;
		  /* 821EA0D0h */ case   15:  		/* bc 4, CR0_EQ, 68 */
		/* 821EA0D0h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821EA114;  }
		/* 821EA0D0h case   15:*/		return 0x821EA0D4;
		  /* 821EA0D4h */ case   16:  		/* addi R11, R11, 4 */
		/* 821EA0D4h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821EA0D4h case   16:*/		return 0x821EA0D8;
		  /* 821EA0D8h */ case   17:  		/* mr R8, R3 */
		/* 821EA0D8h case   17:*/		regs.R8 = regs.R3;
		/* 821EA0D8h case   17:*/		return 0x821EA0DC;
	}
	return 0x821EA0DC;
} // Block from 821EA094h-821EA0DCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 821EA0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA0DC);
		  /* 821EA0DCh */ case    0:  		/* cmplw CR6, R11, R10 */
		/* 821EA0DCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821EA0DCh case    0:*/		return 0x821EA0E0;
		  /* 821EA0E0h */ case    1:  		/* bc 12, CR6_LT, -24 */
		/* 821EA0E0h case    1:*/		if ( regs.CR[6].lt ) { return 0x821EA0C8;  }
		/* 821EA0E0h case    1:*/		return 0x821EA0E4;
		  /* 821EA0E4h */ case    2:  		/* lwz R11, <#[R10]> */
		/* 821EA0E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821EA0E4h case    2:*/		return 0x821EA0E8;
		  /* 821EA0E8h */ case    3:  		/* and. R11, R11, R8 */
		/* 821EA0E8h case    3:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821EA0E8h case    3:*/		return 0x821EA0EC;
		  /* 821EA0ECh */ case    4:  		/* bclr 12, CR0_EQ */
		/* 821EA0ECh case    4:*/		if ( regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 821EA0ECh case    4:*/		return 0x821EA0F0;
	}
	return 0x821EA0F0;
} // Block from 821EA0DCh-821EA0F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821EA0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA0F0);
		  /* 821EA0F0h */ case    0:  		/* addi R8, R11, -1 */
		/* 821EA0F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 821EA0F0h case    0:*/		return 0x821EA0F4;
		  /* 821EA0F4h */ case    1:  		/* subf R10, R9, R10 */
		/* 821EA0F4h case    1:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821EA0F4h case    1:*/		return 0x821EA0F8;
		  /* 821EA0F8h */ case    2:  		/* andc R11, R11, R8 */
		/* 821EA0F8h case    2:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821EA0F8h case    2:*/		return 0x821EA0FC;
		  /* 821EA0FCh */ case    3:  		/* srawi R10, R10, 2 */
		/* 821EA0FCh case    3:*/		cpu::op::srawi<0,2>(regs,&regs.R10,regs.R10);
		/* 821EA0FCh case    3:*/		return 0x821EA100;
		  /* 821EA100h */ case    4:  		/* cntlzw R11, R11 */
		/* 821EA100h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821EA100h case    4:*/		return 0x821EA104;
		  /* 821EA104h */ case    5:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821EA104h case    5:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821EA104h case    5:*/		return 0x821EA108;
		  /* 821EA108h */ case    6:  		/* subf R11, R11, R10 */
		/* 821EA108h case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821EA108h case    6:*/		return 0x821EA10C;
		  /* 821EA10Ch */ case    7:  		/* addi R3, R11, 31 */
		/* 821EA10Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x1F);
		/* 821EA10Ch case    7:*/		return 0x821EA110;
		  /* 821EA110h */ case    8:  		/* bclr 20, CR0_LT */
		/* 821EA110h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821EA110h case    8:*/		return 0x821EA114;
	}
	return 0x821EA114;
} // Block from 821EA0F0h-821EA114h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821EA114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA114);
		  /* 821EA114h */ case    0:  		/* subf R11, R9, R11 */
		/* 821EA114h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821EA114h case    0:*/		return 0x821EA118;
		  /* 821EA118h */ case    1:  		/* addi R10, R8, -1 */
		/* 821EA118h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0xFFFFFFFF);
		/* 821EA118h case    1:*/		return 0x821EA11C;
		  /* 821EA11Ch */ case    2:  		/* srawi R11, R11, 2 */
		/* 821EA11Ch case    2:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 821EA11Ch case    2:*/		return 0x821EA120;
		  /* 821EA120h */ case    3:  		/* andc R10, R8, R10 */
		/* 821EA120h case    3:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821EA120h case    3:*/		return 0x821EA124;
		  /* 821EA124h */ case    4:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821EA124h case    4:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821EA124h case    4:*/		return 0x821EA128;
		  /* 821EA128h */ case    5:  		/* cntlzw R10, R10 */
		/* 821EA128h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821EA128h case    5:*/		return 0x821EA12C;
		  /* 821EA12Ch */ case    6:  		/* subf R11, R10, R11 */
		/* 821EA12Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EA12Ch case    6:*/		return 0x821EA130;
		  /* 821EA130h */ case    7:  		/* b -36 */
		/* 821EA130h case    7:*/		return 0x821EA10C;
		/* 821EA130h case    7:*/		return 0x821EA134;
		  /* 821EA134h */ case    8:  		/* nop */
		/* 821EA134h case    8:*/		cpu::op::nop();
		/* 821EA134h case    8:*/		return 0x821EA138;
	}
	return 0x821EA138;
} // Block from 821EA114h-821EA138h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821EA138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA138);
		  /* 821EA138h */ case    0:  		/* mfspr R12, LR */
		/* 821EA138h case    0:*/		regs.R12 = regs.LR;
		/* 821EA138h case    0:*/		return 0x821EA13C;
		  /* 821EA13Ch */ case    1:  		/* bl -1412836 */
		/* 821EA13Ch case    1:*/		regs.LR = 0x821EA140; return 0x82091258;
		/* 821EA13Ch case    1:*/		return 0x821EA140;
		  /* 821EA140h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821EA140h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821EA140h case    2:*/		return 0x821EA144;
		  /* 821EA144h */ case    3:  		/* mr R28, R3 */
		/* 821EA144h case    3:*/		regs.R28 = regs.R3;
		/* 821EA144h case    3:*/		return 0x821EA148;
		  /* 821EA148h */ case    4:  		/* mr R31, R4 */
		/* 821EA148h case    4:*/		regs.R31 = regs.R4;
		/* 821EA148h case    4:*/		return 0x821EA14C;
		  /* 821EA14Ch */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 821EA14Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821EA14Ch case    5:*/		return 0x821EA150;
		  /* 821EA150h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 821EA150h case    6:*/		if ( regs.CR[6].eq ) { return 0x821EA18C;  }
		/* 821EA150h case    6:*/		return 0x821EA154;
		  /* 821EA154h */ case    7:  		/* rlwinm. R30, R4, 27, 5, 31 */
		/* 821EA154h case    7:*/		cpu::op::rlwinm<1,27,5,31>(regs,&regs.R30,regs.R4);
		/* 821EA154h case    7:*/		return 0x821EA158;
		  /* 821EA158h */ case    8:  		/* rlwinm R29, R4, 0, 0, 26 */
		/* 821EA158h case    8:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R29,regs.R4);
		/* 821EA158h case    8:*/		return 0x821EA15C;
		  /* 821EA15Ch */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821EA15Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821EA16C;  }
		/* 821EA15Ch case    9:*/		return 0x821EA160;
		  /* 821EA160h */ case   10:  		/* rlwinm R5, R30, 2, 0, 29 */
		/* 821EA160h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R30);
		/* 821EA160h case   10:*/		return 0x821EA164;
		  /* 821EA164h */ case   11:  		/* li R4, 255 */
		/* 821EA164h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 821EA164h case   11:*/		return 0x821EA168;
		  /* 821EA168h */ case   12:  		/* bl -1412648 */
		/* 821EA168h case   12:*/		regs.LR = 0x821EA16C; return 0x82091340;
		/* 821EA168h case   12:*/		return 0x821EA16C;
	}
	return 0x821EA16C;
} // Block from 821EA138h-821EA16Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821EA16Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA16C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA16C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA16C);
		  /* 821EA16Ch */ case    0:  		/* cmplw CR6, R29, R31 */
		/* 821EA16Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R31);
		/* 821EA16Ch case    0:*/		return 0x821EA170;
		  /* 821EA170h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 821EA170h case    1:*/		if ( regs.CR[6].eq ) { return 0x821EA18C;  }
		/* 821EA170h case    1:*/		return 0x821EA174;
		  /* 821EA174h */ case    2:  		/* subf R11, R29, R31 */
		/* 821EA174h case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R29,regs.R31);
		/* 821EA174h case    2:*/		return 0x821EA178;
		  /* 821EA178h */ case    3:  		/* li R10, 1 */
		/* 821EA178h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821EA178h case    3:*/		return 0x821EA17C;
		  /* 821EA17Ch */ case    4:  		/* rlwinm R9, R30, 2, 0, 29 */
		/* 821EA17Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R30);
		/* 821EA17Ch case    4:*/		return 0x821EA180;
		  /* 821EA180h */ case    5:  		/* slw R11, R10, R11 */
		/* 821EA180h case    5:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EA180h case    5:*/		return 0x821EA184;
		  /* 821EA184h */ case    6:  		/* addi R11, R11, -1 */
		/* 821EA184h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821EA184h case    6:*/		return 0x821EA188;
		  /* 821EA188h */ case    7:  		/* stwx R11, <#[R9 + R28]> */
		/* 821EA188h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R28 + 0x00000000) );
		/* 821EA188h case    7:*/		return 0x821EA18C;
	}
	return 0x821EA18C;
} // Block from 821EA16Ch-821EA18Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821EA18Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA18C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA18C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA18C);
		  /* 821EA18Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 821EA18Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821EA18Ch case    0:*/		return 0x821EA190;
		  /* 821EA190h */ case    1:  		/* b -1412840 */
		/* 821EA190h case    1:*/		return 0x820912A8;
		/* 821EA190h case    1:*/		return 0x821EA194;
		  /* 821EA194h */ case    2:  		/* nop */
		/* 821EA194h case    2:*/		cpu::op::nop();
		/* 821EA194h case    2:*/		return 0x821EA198;
		  /* 821EA198h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 821EA198h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821EA198h case    3:*/		return 0x821EA19C;
		  /* 821EA19Ch */ case    4:  		/* nor R10, R11, R11 */
		/* 821EA19Ch case    4:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 821EA19Ch case    4:*/		return 0x821EA1A0;
		  /* 821EA1A0h */ case    5:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821EA1A0h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821EA1A0h case    5:*/		return 0x821EA1A4;
		  /* 821EA1A4h */ case    6:  		/* bc 4, CR0_EQ, 20 */
		/* 821EA1A4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821EA1B8;  }
		/* 821EA1A4h case    6:*/		return 0x821EA1A8;
		  /* 821EA1A8h */ case    7:  		/* lwz R10, <#[R4]> */
		/* 821EA1A8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 821EA1A8h case    7:*/		return 0x821EA1AC;
		  /* 821EA1ACh */ case    8:  		/* or R11, R10, R11 */
		/* 821EA1ACh case    8:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EA1ACh case    8:*/		return 0x821EA1B0;
		  /* 821EA1B0h */ case    9:  		/* stw R11, <#[R3]> */
		/* 821EA1B0h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821EA1B0h case    9:*/		return 0x821EA1B4;
		  /* 821EA1B4h */ case   10:  		/* bclr 20, CR0_LT */
		/* 821EA1B4h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821EA1B4h case   10:*/		return 0x821EA1B8;
	}
	return 0x821EA1B8;
} // Block from 821EA18Ch-821EA1B8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821EA1B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA1B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA1B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA1B8);
		  /* 821EA1B8h */ case    0:  		/* lwz R9, <#[R11]> */
		/* 821EA1B8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821EA1B8h case    0:*/		return 0x821EA1BC;
		  /* 821EA1BCh */ case    1:  		/* addi R10, R11, 4 */
		/* 821EA1BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821EA1BCh case    1:*/		return 0x821EA1C0;
		  /* 821EA1C0h */ case    2:  		/* lwz R8, <#[R4]> */
		/* 821EA1C0h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 821EA1C0h case    2:*/		return 0x821EA1C4;
		  /* 821EA1C4h */ case    3:  		/* addi R7, R9, 1 */
		/* 821EA1C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R9,0x1);
		/* 821EA1C4h case    3:*/		return 0x821EA1C8;
		  /* 821EA1C8h */ case    4:  		/* addi R9, R8, 4 */
		/* 821EA1C8h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x4);
		/* 821EA1C8h case    4:*/		return 0x821EA1CC;
		  /* 821EA1CCh */ case    5:  		/* rlwinm R8, R7, 2, 0, 29 */
		/* 821EA1CCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R7);
		/* 821EA1CCh case    5:*/		return 0x821EA1D0;
		  /* 821EA1D0h */ case    6:  		/* add R11, R8, R11 */
		/* 821EA1D0h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821EA1D0h case    6:*/		return 0x821EA1D4;
		  /* 821EA1D4h */ case    7:  		/* cmplw CR6, R10, R11 */
		/* 821EA1D4h case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821EA1D4h case    7:*/		return 0x821EA1D8;
		  /* 821EA1D8h */ case    8:  		/* bclr 4, CR6_LT */
		/* 821EA1D8h case    8:*/		if ( !regs.CR[6].lt ) { return (uint32)regs.LR; }
		/* 821EA1D8h case    8:*/		return 0x821EA1DC;
	}
	return 0x821EA1DC;
} // Block from 821EA1B8h-821EA1DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821EA1DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA1DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA1DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA1DC);
		  /* 821EA1DCh */ case    0:  		/* subf R11, R10, R11 */
		/* 821EA1DCh case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EA1DCh case    0:*/		return 0x821EA1E0;
		  /* 821EA1E0h */ case    1:  		/* addi R9, R9, -4 */
		/* 821EA1E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFC);
		/* 821EA1E0h case    1:*/		return 0x821EA1E4;
		  /* 821EA1E4h */ case    2:  		/* addi R8, R11, -1 */
		/* 821EA1E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 821EA1E4h case    2:*/		return 0x821EA1E8;
		  /* 821EA1E8h */ case    3:  		/* addi R11, R10, -4 */
		/* 821EA1E8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFFC);
		/* 821EA1E8h case    3:*/		return 0x821EA1EC;
		  /* 821EA1ECh */ case    4:  		/* rlwinm R10, R8, 30, 2, 31 */
		/* 821EA1ECh case    4:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R10,regs.R8);
		/* 821EA1ECh case    4:*/		return 0x821EA1F0;
		  /* 821EA1F0h */ case    5:  		/* addi R10, R10, 1 */
		/* 821EA1F0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EA1F0h case    5:*/		return 0x821EA1F4;
		  /* 821EA1F4h */ case    6:  		/* mtspr CTR, R10 */
		/* 821EA1F4h case    6:*/		regs.CTR = regs.R10;
		/* 821EA1F4h case    6:*/		return 0x821EA1F8;
		  /* 821EA1F8h */ case    7:  		/* lwzu R10, <#[R9 + 4]> */
		/* 821EA1F8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 821EA1F8h case    7:*/		return 0x821EA1FC;
		  /* 821EA1FCh */ case    8:  		/* lwz R8, <#[R11 + 4]> */
		/* 821EA1FCh case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821EA1FCh case    8:*/		return 0x821EA200;
		  /* 821EA200h */ case    9:  		/* or R10, R10, R8 */
		/* 821EA200h case    9:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821EA200h case    9:*/		return 0x821EA204;
		  /* 821EA204h */ case   10:  		/* stwu R10, <#[R11 + 4]> */
		/* 821EA204h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821EA204h case   10:*/		return 0x821EA208;
		  /* 821EA208h */ case   11:  		/* bc 16, CR0_LT, -16 */
		/* 821EA208h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821EA1F8;  }
		/* 821EA208h case   11:*/		return 0x821EA20C;
		  /* 821EA20Ch */ case   12:  		/* bclr 20, CR0_LT */
		/* 821EA20Ch case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821EA20Ch case   12:*/		return 0x821EA210;
	}
	return 0x821EA210;
} // Block from 821EA1DCh-821EA210h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821EA210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA210);
		  /* 821EA210h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821EA210h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821EA210h case    0:*/		return 0x821EA214;
		  /* 821EA214h */ case    1:  		/* nor R10, R11, R11 */
		/* 821EA214h case    1:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 821EA214h case    1:*/		return 0x821EA218;
		  /* 821EA218h */ case    2:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821EA218h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821EA218h case    2:*/		return 0x821EA21C;
		  /* 821EA21Ch */ case    3:  		/* bc 4, CR0_EQ, 24 */
		/* 821EA21Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EA234;  }
		/* 821EA21Ch case    3:*/		return 0x821EA220;
		  /* 821EA220h */ case    4:  		/* lwz R10, <#[R4]> */
		/* 821EA220h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 821EA220h case    4:*/		return 0x821EA224;
		  /* 821EA224h */ case    5:  		/* subf R11, R11, R10 */
		/* 821EA224h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821EA224h case    5:*/		return 0x821EA228;
		  /* 821EA228h */ case    6:  		/* cntlzw R11, R11 */
		/* 821EA228h case    6:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821EA228h case    6:*/		return 0x821EA22C;
		  /* 821EA22Ch */ case    7:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 821EA22Ch case    7:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 821EA22Ch case    7:*/		return 0x821EA230;
		  /* 821EA230h */ case    8:  		/* bclr 20, CR0_LT */
		/* 821EA230h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821EA230h case    8:*/		return 0x821EA234;
	}
	return 0x821EA234;
} // Block from 821EA210h-821EA234h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821EA234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA234);
		  /* 821EA234h */ case    0:  		/* lwz R9, <#[R11]> */
		/* 821EA234h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821EA234h case    0:*/		return 0x821EA238;
		  /* 821EA238h */ case    1:  		/* addi R10, R11, 4 */
		/* 821EA238h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821EA238h case    1:*/		return 0x821EA23C;
		  /* 821EA23Ch */ case    2:  		/* lwz R8, <#[R4]> */
		/* 821EA23Ch case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 821EA23Ch case    2:*/		return 0x821EA240;
		  /* 821EA240h */ case    3:  		/* addi R9, R9, 1 */
		/* 821EA240h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821EA240h case    3:*/		return 0x821EA244;
		  /* 821EA244h */ case    4:  		/* addi R8, R8, 4 */
		/* 821EA244h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821EA244h case    4:*/		return 0x821EA248;
		  /* 821EA248h */ case    5:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821EA248h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821EA248h case    5:*/		return 0x821EA24C;
		  /* 821EA24Ch */ case    6:  		/* add R11, R9, R11 */
		/* 821EA24Ch case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821EA24Ch case    6:*/		return 0x821EA250;
		  /* 821EA250h */ case    7:  		/* cmplw CR6, R10, R11 */
		/* 821EA250h case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821EA250h case    7:*/		return 0x821EA254;
		  /* 821EA254h */ case    8:  		/* bc 4, CR6_LT, 36 */
		/* 821EA254h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821EA278;  }
		/* 821EA254h case    8:*/		return 0x821EA258;
		  /* 821EA258h */ case    9:  		/* subf R9, R10, R8 */
		/* 821EA258h case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R8);
		/* 821EA258h case    9:*/		return 0x821EA25C;
		  /* 821EA25Ch */ case   10:  		/* lwz R8, <#[R10]> */
		/* 821EA25Ch case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821EA25Ch case   10:*/		return 0x821EA260;
		  /* 821EA260h */ case   11:  		/* lwzx R7, <#[R9 + R10]> */
		/* 821EA260h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821EA260h case   11:*/		return 0x821EA264;
		  /* 821EA264h */ case   12:  		/* cmplw CR6, R8, R7 */
		/* 821EA264h case   12:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 821EA264h case   12:*/		return 0x821EA268;
		  /* 821EA268h */ case   13:  		/* bc 4, CR6_EQ, 24 */
		/* 821EA268h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821EA280;  }
		/* 821EA268h case   13:*/		return 0x821EA26C;
		  /* 821EA26Ch */ case   14:  		/* addi R10, R10, 4 */
		/* 821EA26Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821EA26Ch case   14:*/		return 0x821EA270;
		  /* 821EA270h */ case   15:  		/* cmplw CR6, R10, R11 */
		/* 821EA270h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821EA270h case   15:*/		return 0x821EA274;
		  /* 821EA274h */ case   16:  		/* bc 12, CR6_LT, -24 */
		/* 821EA274h case   16:*/		if ( regs.CR[6].lt ) { return 0x821EA25C;  }
		/* 821EA274h case   16:*/		return 0x821EA278;
	}
	return 0x821EA278;
} // Block from 821EA234h-821EA278h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821EA278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA278);
		  /* 821EA278h */ case    0:  		/* li R3, 1 */
		/* 821EA278h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821EA278h case    0:*/		return 0x821EA27C;
		  /* 821EA27Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 821EA27Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821EA27Ch case    1:*/		return 0x821EA280;
	}
	return 0x821EA280;
} // Block from 821EA278h-821EA280h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EA280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA280);
		  /* 821EA280h */ case    0:  		/* li R3, 0 */
		/* 821EA280h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821EA280h case    0:*/		return 0x821EA284;
		  /* 821EA284h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821EA284h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821EA284h case    1:*/		return 0x821EA288;
	}
	return 0x821EA288;
} // Block from 821EA280h-821EA288h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EA288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA288);
		  /* 821EA288h */ case    0:  		/* lwz R10, <#[R3 + 4]> */
		/* 821EA288h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821EA288h case    0:*/		return 0x821EA28C;
		  /* 821EA28Ch */ case    1:  		/* lwz R11, <#[R3]> */
		/* 821EA28Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821EA28Ch case    1:*/		return 0x821EA290;
		  /* 821EA290h */ case    2:  		/* addi R10, R10, 31 */
		/* 821EA290h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EA290h case    2:*/		return 0x821EA294;
		  /* 821EA294h */ case    3:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EA294h case    3:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EA294h case    3:*/		return 0x821EA298;
		  /* 821EA298h */ case    4:  		/* add R10, R10, R11 */
		/* 821EA298h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821EA298h case    4:*/		return 0x821EA29C;
		  /* 821EA29Ch */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 821EA29Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821EA29Ch case    5:*/		return 0x821EA2A0;
		  /* 821EA2A0h */ case    6:  		/* bclr 4, CR6_LT */
		/* 821EA2A0h case    6:*/		if ( !regs.CR[6].lt ) { return (uint32)regs.LR; }
		/* 821EA2A0h case    6:*/		return 0x821EA2A4;
	}
	return 0x821EA2A4;
} // Block from 821EA288h-821EA2A4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821EA2A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA2A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA2A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA2A4);
		  /* 821EA2A4h */ case    0:  		/* subf R10, R11, R10 */
		/* 821EA2A4h case    0:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821EA2A4h case    0:*/		return 0x821EA2A8;
		  /* 821EA2A8h */ case    1:  		/* addi R11, R11, -4 */
		/* 821EA2A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821EA2A8h case    1:*/		return 0x821EA2AC;
		  /* 821EA2ACh */ case    2:  		/* addi R10, R10, -1 */
		/* 821EA2ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821EA2ACh case    2:*/		return 0x821EA2B0;
		  /* 821EA2B0h */ case    3:  		/* addi R9, R4, -4 */
		/* 821EA2B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R4,0xFFFFFFFC);
		/* 821EA2B0h case    3:*/		return 0x821EA2B4;
		  /* 821EA2B4h */ case    4:  		/* rlwinm R10, R10, 30, 2, 31 */
		/* 821EA2B4h case    4:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R10,regs.R10);
		/* 821EA2B4h case    4:*/		return 0x821EA2B8;
		  /* 821EA2B8h */ case    5:  		/* addi R10, R10, 1 */
		/* 821EA2B8h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EA2B8h case    5:*/		return 0x821EA2BC;
		  /* 821EA2BCh */ case    6:  		/* mtspr CTR, R10 */
		/* 821EA2BCh case    6:*/		regs.CTR = regs.R10;
		/* 821EA2BCh case    6:*/		return 0x821EA2C0;
		  /* 821EA2C0h */ case    7:  		/* lwz R8, <#[R11 + 4]> */
		/* 821EA2C0h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821EA2C0h case    7:*/		return 0x821EA2C4;
		  /* 821EA2C4h */ case    8:  		/* lwzu R10, <#[R9 + 4]> */
		/* 821EA2C4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 821EA2C4h case    8:*/		return 0x821EA2C8;
		  /* 821EA2C8h */ case    9:  		/* and R10, R8, R10 */
		/* 821EA2C8h case    9:*/		cpu::op::and<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821EA2C8h case    9:*/		return 0x821EA2CC;
		  /* 821EA2CCh */ case   10:  		/* stwu R10, <#[R11 + 4]> */
		/* 821EA2CCh case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821EA2CCh case   10:*/		return 0x821EA2D0;
		  /* 821EA2D0h */ case   11:  		/* bc 16, CR0_LT, -16 */
		/* 821EA2D0h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821EA2C0;  }
		/* 821EA2D0h case   11:*/		return 0x821EA2D4;
		  /* 821EA2D4h */ case   12:  		/* bclr 20, CR0_LT */
		/* 821EA2D4h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821EA2D4h case   12:*/		return 0x821EA2D8;
	}
	return 0x821EA2D8;
} // Block from 821EA2A4h-821EA2D8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821EA2D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA2D8);
		  /* 821EA2D8h */ case    0:  		/* lwz R10, <#[R3 + 4]> */
		/* 821EA2D8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821EA2D8h case    0:*/		return 0x821EA2DC;
		  /* 821EA2DCh */ case    1:  		/* lwz R11, <#[R3]> */
		/* 821EA2DCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821EA2DCh case    1:*/		return 0x821EA2E0;
		  /* 821EA2E0h */ case    2:  		/* addi R10, R10, 31 */
		/* 821EA2E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EA2E0h case    2:*/		return 0x821EA2E4;
		  /* 821EA2E4h */ case    3:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EA2E4h case    3:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EA2E4h case    3:*/		return 0x821EA2E8;
		  /* 821EA2E8h */ case    4:  		/* add R10, R10, R11 */
		/* 821EA2E8h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821EA2E8h case    4:*/		return 0x821EA2EC;
		  /* 821EA2ECh */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 821EA2ECh case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821EA2ECh case    5:*/		return 0x821EA2F0;
		  /* 821EA2F0h */ case    6:  		/* bclr 4, CR6_LT */
		/* 821EA2F0h case    6:*/		if ( !regs.CR[6].lt ) { return (uint32)regs.LR; }
		/* 821EA2F0h case    6:*/		return 0x821EA2F4;
	}
	return 0x821EA2F4;
} // Block from 821EA2D8h-821EA2F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821EA2F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA2F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA2F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA2F4);
		  /* 821EA2F4h */ case    0:  		/* subf R10, R11, R10 */
		/* 821EA2F4h case    0:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821EA2F4h case    0:*/		return 0x821EA2F8;
		  /* 821EA2F8h */ case    1:  		/* addi R11, R11, -4 */
		/* 821EA2F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821EA2F8h case    1:*/		return 0x821EA2FC;
		  /* 821EA2FCh */ case    2:  		/* addi R10, R10, -1 */
		/* 821EA2FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821EA2FCh case    2:*/		return 0x821EA300;
		  /* 821EA300h */ case    3:  		/* addi R9, R4, -4 */
		/* 821EA300h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R4,0xFFFFFFFC);
		/* 821EA300h case    3:*/		return 0x821EA304;
		  /* 821EA304h */ case    4:  		/* rlwinm R10, R10, 30, 2, 31 */
		/* 821EA304h case    4:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R10,regs.R10);
		/* 821EA304h case    4:*/		return 0x821EA308;
		  /* 821EA308h */ case    5:  		/* addi R10, R10, 1 */
		/* 821EA308h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EA308h case    5:*/		return 0x821EA30C;
		  /* 821EA30Ch */ case    6:  		/* mtspr CTR, R10 */
		/* 821EA30Ch case    6:*/		regs.CTR = regs.R10;
		/* 821EA30Ch case    6:*/		return 0x821EA310;
		  /* 821EA310h */ case    7:  		/* lwz R8, <#[R11 + 4]> */
		/* 821EA310h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821EA310h case    7:*/		return 0x821EA314;
		  /* 821EA314h */ case    8:  		/* lwzu R10, <#[R9 + 4]> */
		/* 821EA314h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 821EA314h case    8:*/		return 0x821EA318;
		  /* 821EA318h */ case    9:  		/* or R10, R8, R10 */
		/* 821EA318h case    9:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821EA318h case    9:*/		return 0x821EA31C;
		  /* 821EA31Ch */ case   10:  		/* stwu R10, <#[R11 + 4]> */
		/* 821EA31Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821EA31Ch case   10:*/		return 0x821EA320;
		  /* 821EA320h */ case   11:  		/* bc 16, CR0_LT, -16 */
		/* 821EA320h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821EA310;  }
		/* 821EA320h case   11:*/		return 0x821EA324;
		  /* 821EA324h */ case   12:  		/* bclr 20, CR0_LT */
		/* 821EA324h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821EA324h case   12:*/		return 0x821EA328;
	}
	return 0x821EA328;
} // Block from 821EA2F4h-821EA328h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821EA328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA328);
		  /* 821EA328h */ case    0:  		/* mfspr R12, LR */
		/* 821EA328h case    0:*/		regs.R12 = regs.LR;
		/* 821EA328h case    0:*/		return 0x821EA32C;
		  /* 821EA32Ch */ case    1:  		/* bl -1413384 */
		/* 821EA32Ch case    1:*/		regs.LR = 0x821EA330; return 0x82091224;
		/* 821EA32Ch case    1:*/		return 0x821EA330;
		  /* 821EA330h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821EA330h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821EA330h case    2:*/		return 0x821EA334;
		  /* 821EA334h */ case    3:  		/* lwz R30, <#[R3 + 4]> */
		/* 821EA334h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000004) );
		/* 821EA334h case    3:*/		return 0x821EA338;
		  /* 821EA338h */ case    4:  		/* addi R29, R4, 1 */
		/* 821EA338h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R4,0x1);
		/* 821EA338h case    4:*/		return 0x821EA33C;
		  /* 821EA33Ch */ case    5:  		/* li R17, 0 */
		/* 821EA33Ch case    5:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 821EA33Ch case    5:*/		return 0x821EA340;
		  /* 821EA340h */ case    6:  		/* mr R20, R3 */
		/* 821EA340h case    6:*/		regs.R20 = regs.R3;
		/* 821EA340h case    6:*/		return 0x821EA344;
		  /* 821EA344h */ case    7:  		/* stw R29, <#[R1 + 92]> */
		/* 821EA344h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000005C) );
		/* 821EA344h case    7:*/		return 0x821EA348;
		  /* 821EA348h */ case    8:  		/* mr R16, R4 */
		/* 821EA348h case    8:*/		regs.R16 = regs.R4;
		/* 821EA348h case    8:*/		return 0x821EA34C;
		  /* 821EA34Ch */ case    9:  		/* stw R17, <#[R1 + 80]> */
		/* 821EA34Ch case    9:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000050) );
		/* 821EA34Ch case    9:*/		return 0x821EA350;
		  /* 821EA350h */ case   10:  		/* mr R18, R29 */
		/* 821EA350h case   10:*/		regs.R18 = regs.R29;
		/* 821EA350h case   10:*/		return 0x821EA354;
		  /* 821EA354h */ case   11:  		/* stw R29, <#[R1 + 84]> */
		/* 821EA354h case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 821EA354h case   11:*/		return 0x821EA358;
		  /* 821EA358h */ case   12:  		/* mr R15, R29 */
		/* 821EA358h case   12:*/		regs.R15 = regs.R29;
		/* 821EA358h case   12:*/		return 0x821EA35C;
		  /* 821EA35Ch */ case   13:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 821EA35Ch case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 821EA35Ch case   13:*/		return 0x821EA360;
		  /* 821EA360h */ case   14:  		/* bc 4, CR0_EQ, 220 */
		/* 821EA360h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821EA43C;  }
		/* 821EA360h case   14:*/		return 0x821EA364;
		  /* 821EA364h */ case   15:  		/* cmplwi CR0, R30, 0 */
		/* 821EA364h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 821EA364h case   15:*/		return 0x821EA368;
		  /* 821EA368h */ case   16:  		/* bc 12, CR0_EQ, 212 */
		/* 821EA368h case   16:*/		if ( regs.CR[0].eq ) { return 0x821EA43C;  }
		/* 821EA368h case   16:*/		return 0x821EA36C;
		  /* 821EA36Ch */ case   17:  		/* rlwinm R27, R29, 0, 13, 31 */
		/* 821EA36Ch case   17:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R27,regs.R29);
		/* 821EA36Ch case   17:*/		return 0x821EA370;
		  /* 821EA370h */ case   18:  		/* addi R11, R29, 31 */
		/* 821EA370h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x1F);
		/* 821EA370h case   18:*/		return 0x821EA374;
		  /* 821EA374h */ case   19:  		/* lwz R31, <#[R30 + 40]> */
		/* 821EA374h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000028) );
		/* 821EA374h case   19:*/		return 0x821EA378;
		  /* 821EA378h */ case   20:  		/* rlwinm R10, R29, 1, 0, 30 */
		/* 821EA378h case   20:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R29);
		/* 821EA378h case   20:*/		return 0x821EA37C;
		  /* 821EA37Ch */ case   21:  		/* rlwinm R11, R11, 29, 3, 29 */
		/* 821EA37Ch case   21:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R11);
		/* 821EA37Ch case   21:*/		return 0x821EA380;
		  /* 821EA380h */ case   22:  		/* addi R10, R10, 31 */
		/* 821EA380h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EA380h case   22:*/		return 0x821EA384;
		  /* 821EA384h */ case   23:  		/* addi R9, R11, 2 */
		/* 821EA384h case   23:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x2);
		/* 821EA384h case   23:*/		return 0x821EA388;
		  /* 821EA388h */ case   24:  		/* rlwinm R11, R10, 29, 3, 29 */
		/* 821EA388h case   24:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R10);
		/* 821EA388h case   24:*/		return 0x821EA38C;
		  /* 821EA38Ch */ case   25:  		/* rlwinm R10, R9, 1, 0, 30 */
		/* 821EA38Ch case   25:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R9);
		/* 821EA38Ch case   25:*/		return 0x821EA390;
		  /* 821EA390h */ case   26:  		/* cmplwi CR6, R31, 0 */
		/* 821EA390h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821EA390h case   26:*/		return 0x821EA394;
		  /* 821EA394h */ case   27:  		/* add R28, R10, R11 */
		/* 821EA394h case   27:*/		cpu::op::add<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 821EA394h case   27:*/		return 0x821EA398;
		  /* 821EA398h */ case   28:  		/* bc 12, CR6_EQ, 68 */
		/* 821EA398h case   28:*/		if ( regs.CR[6].eq ) { return 0x821EA3DC;  }
		/* 821EA398h case   28:*/		return 0x821EA39C;
		  /* 821EA39Ch */ case   29:  		/* lwz R11, <#[R31]> */
		/* 821EA39Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821EA39Ch case   29:*/		return 0x821EA3A0;
		  /* 821EA3A0h */ case   30:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821EA3A0h case   30:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821EA3A0h case   30:*/		return 0x821EA3A4;
		  /* 821EA3A4h */ case   31:  		/* cmplw CR6, R11, R29 */
		/* 821EA3A4h case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821EA3A4h case   31:*/		return 0x821EA3A8;
		  /* 821EA3A8h */ case   32:  		/* bc 4, CR6_LT, 76 */
		/* 821EA3A8h case   32:*/		if ( !regs.CR[6].lt ) { return 0x821EA3F4;  }
		/* 821EA3A8h case   32:*/		return 0x821EA3AC;
		  /* 821EA3ACh */ case   33:  		/* addi R10, R11, 31 */
		/* 821EA3ACh case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1F);
		/* 821EA3ACh case   33:*/		return 0x821EA3B0;
		  /* 821EA3B0h */ case   34:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821EA3B0h case   34:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821EA3B0h case   34:*/		return 0x821EA3B4;
		  /* 821EA3B4h */ case   35:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EA3B4h case   35:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EA3B4h case   35:*/		return 0x821EA3B8;
		  /* 821EA3B8h */ case   36:  		/* addi R11, R11, 31 */
		/* 821EA3B8h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821EA3B8h case   36:*/		return 0x821EA3BC;
		  /* 821EA3BCh */ case   37:  		/* addi R10, R10, 2 */
		/* 821EA3BCh case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821EA3BCh case   37:*/		return 0x821EA3C0;
		  /* 821EA3C0h */ case   38:  		/* rlwinm R11, R11, 29, 3, 29 */
		/* 821EA3C0h case   38:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R11);
		/* 821EA3C0h case   38:*/		return 0x821EA3C4;
		  /* 821EA3C4h */ case   39:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821EA3C4h case   39:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821EA3C4h case   39:*/		return 0x821EA3C8;
		  /* 821EA3C8h */ case   40:  		/* li R6, 0 */
		/* 821EA3C8h case   40:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821EA3C8h case   40:*/		return 0x821EA3CC;
		  /* 821EA3CCh */ case   41:  		/* add R5, R10, R11 */
		/* 821EA3CCh case   41:*/		cpu::op::add<0>(regs,&regs.R5,regs.R10,regs.R11);
		/* 821EA3CCh case   41:*/		return 0x821EA3D0;
		  /* 821EA3D0h */ case   42:  		/* mr R4, R31 */
		/* 821EA3D0h case   42:*/		regs.R4 = regs.R31;
		/* 821EA3D0h case   42:*/		return 0x821EA3D4;
		  /* 821EA3D4h */ case   43:  		/* mr R3, R20 */
		/* 821EA3D4h case   43:*/		regs.R3 = regs.R20;
		/* 821EA3D4h case   43:*/		return 0x821EA3D8;
		  /* 821EA3D8h */ case   44:  		/* bl -546624 */
		/* 821EA3D8h case   44:*/		regs.LR = 0x821EA3DC; return 0x82164C98;
		/* 821EA3D8h case   44:*/		return 0x821EA3DC;
	}
	return 0x821EA3DC;
} // Block from 821EA328h-821EA3DCh (45 instructions)

//////////////////////////////////////////////////////
// Block at 821EA3DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA3DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA3DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA3DC);
		  /* 821EA3DCh */ case    0:  		/* li R5, 0 */
		/* 821EA3DCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821EA3DCh case    0:*/		return 0x821EA3E0;
		  /* 821EA3E0h */ case    1:  		/* mr R4, R28 */
		/* 821EA3E0h case    1:*/		regs.R4 = regs.R28;
		/* 821EA3E0h case    1:*/		return 0x821EA3E4;
		  /* 821EA3E4h */ case    2:  		/* mr R3, R20 */
		/* 821EA3E4h case    2:*/		regs.R3 = regs.R20;
		/* 821EA3E4h case    2:*/		return 0x821EA3E8;
		  /* 821EA3E8h */ case    3:  		/* bl -384448 */
		/* 821EA3E8h case    3:*/		regs.LR = 0x821EA3EC; return 0x8218C628;
		/* 821EA3E8h case    3:*/		return 0x821EA3EC;
		  /* 821EA3ECh */ case    4:  		/* mr R31, R3 */
		/* 821EA3ECh case    4:*/		regs.R31 = regs.R3;
		/* 821EA3ECh case    4:*/		return 0x821EA3F0;
		  /* 821EA3F0h */ case    5:  		/* stw R3, <#[R30 + 40]> */
		/* 821EA3F0h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000028) );
		/* 821EA3F0h case    5:*/		return 0x821EA3F4;
	}
	return 0x821EA3F4;
} // Block from 821EA3DCh-821EA3F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821EA3F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA3F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA3F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA3F4);
		  /* 821EA3F4h */ case    0:  		/* mr R5, R28 */
		/* 821EA3F4h case    0:*/		regs.R5 = regs.R28;
		/* 821EA3F4h case    0:*/		return 0x821EA3F8;
		  /* 821EA3F8h */ case    1:  		/* li R4, 0 */
		/* 821EA3F8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821EA3F8h case    1:*/		return 0x821EA3FC;
		  /* 821EA3FCh */ case    2:  		/* mr R3, R31 */
		/* 821EA3FCh case    2:*/		regs.R3 = regs.R31;
		/* 821EA3FCh case    2:*/		return 0x821EA400;
		  /* 821EA400h */ case    3:  		/* bl -1413312 */
		/* 821EA400h case    3:*/		regs.LR = 0x821EA404; return 0x82091340;
		/* 821EA400h case    3:*/		return 0x821EA404;
		  /* 821EA404h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 821EA404h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821EA404h case    4:*/		return 0x821EA408;
		  /* 821EA408h */ case    5:  		/* mr R4, R18 */
		/* 821EA408h case    5:*/		regs.R4 = regs.R18;
		/* 821EA408h case    5:*/		return 0x821EA40C;
		  /* 821EA40Ch */ case    6:  		/* rlwinm R11, R11, 0, 0, 12 */
		/* 821EA40Ch case    6:*/		cpu::op::rlwinm<0,0,0,12>(regs,&regs.R11,regs.R11);
		/* 821EA40Ch case    6:*/		return 0x821EA410;
		  /* 821EA410h */ case    7:  		/* or R11, R11, R27 */
		/* 821EA410h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 821EA410h case    7:*/		return 0x821EA414;
		  /* 821EA414h */ case    8:  		/* stw R11, <#[R31]> */
		/* 821EA414h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821EA414h case    8:*/		return 0x821EA418;
		  /* 821EA418h */ case    9:  		/* lwz R11, <#[R30 + 40]> */
		/* 821EA418h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 821EA418h case    9:*/		return 0x821EA41C;
		  /* 821EA41Ch */ case   10:  		/* addi R3, R11, 4 */
		/* 821EA41Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 821EA41Ch case   10:*/		return 0x821EA420;
		  /* 821EA420h */ case   11:  		/* bl -744 */
		/* 821EA420h case   11:*/		regs.LR = 0x821EA424; return 0x821EA138;
		/* 821EA420h case   11:*/		return 0x821EA424;
		  /* 821EA424h */ case   12:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821EA424h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821EA424h case   12:*/		return 0x821EA428;
		  /* 821EA428h */ case   13:  		/* lwz R30, <#[R11 + 4]> */
		/* 821EA428h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821EA428h case   13:*/		return 0x821EA42C;
		  /* 821EA42Ch */ case   14:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 821EA42Ch case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 821EA42Ch case   14:*/		return 0x821EA430;
		  /* 821EA430h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 821EA430h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821EA43C;  }
		/* 821EA430h case   15:*/		return 0x821EA434;
		  /* 821EA434h */ case   16:  		/* cmplwi CR6, R30, 0 */
		/* 821EA434h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821EA434h case   16:*/		return 0x821EA438;
		  /* 821EA438h */ case   17:  		/* bc 4, CR6_EQ, -200 */
		/* 821EA438h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821EA370;  }
		/* 821EA438h case   17:*/		return 0x821EA43C;
	}
	return 0x821EA43C;
} // Block from 821EA3F4h-821EA43Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 821EA43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA43C);
		  /* 821EA43Ch */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821EA43Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821EA43Ch case    0:*/		return 0x821EA440;
		  /* 821EA440h */ case    1:  		/* addi R10, R18, 31 */
		/* 821EA440h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R18,0x1F);
		/* 821EA440h case    1:*/		return 0x821EA444;
		  /* 821EA444h */ case    2:  		/* li R4, 0 */
		/* 821EA444h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821EA444h case    2:*/		return 0x821EA448;
		  /* 821EA448h */ case    3:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821EA448h case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821EA448h case    3:*/		return 0x821EA44C;
		  /* 821EA44Ch */ case    4:  		/* rlwinm R19, R10, 27, 5, 31 */
		/* 821EA44Ch case    4:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R19,regs.R10);
		/* 821EA44Ch case    4:*/		return 0x821EA450;
		  /* 821EA450h */ case    5:  		/* addic R10, R9, -1 */
		/* 821EA450h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R9,0xFFFFFFFF);
		/* 821EA450h case    5:*/		return 0x821EA454;
		  /* 821EA454h */ case    6:  		/* rlwinm R27, R19, 2, 0, 29 */
		/* 821EA454h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R19);
		/* 821EA454h case    6:*/		return 0x821EA458;
		  /* 821EA458h */ case    7:  		/* subfe R10, R10, R10 */
		/* 821EA458h case    7:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821EA458h case    7:*/		return 0x821EA45C;
		  /* 821EA45Ch */ case    8:  		/* mr R5, R27 */
		/* 821EA45Ch case    8:*/		regs.R5 = regs.R27;
		/* 821EA45Ch case    8:*/		return 0x821EA460;
		  /* 821EA460h */ case    9:  		/* and R11, R10, R11 */
		/* 821EA460h case    9:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EA460h case    9:*/		return 0x821EA464;
		  /* 821EA464h */ case   10:  		/* lwz R11, <#[R11 + 40]> */
		/* 821EA464h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821EA464h case   10:*/		return 0x821EA468;
		  /* 821EA468h */ case   11:  		/* addi R31, R11, 4 */
		/* 821EA468h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 821EA468h case   11:*/		return 0x821EA46C;
		  /* 821EA46Ch */ case   12:  		/* mr R3, R31 */
		/* 821EA46Ch case   12:*/		regs.R3 = regs.R31;
		/* 821EA46Ch case   12:*/		return 0x821EA470;
		  /* 821EA470h */ case   13:  		/* bl -1413424 */
		/* 821EA470h case   13:*/		regs.LR = 0x821EA474; return 0x82091340;
		/* 821EA470h case   13:*/		return 0x821EA474;
		  /* 821EA474h */ case   14:  		/* addi R11, R16, 32 */
		/* 821EA474h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R16,0x20);
		/* 821EA474h case   14:*/		return 0x821EA478;
		  /* 821EA478h */ case   15:  		/* li R5, 0 */
		/* 821EA478h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821EA478h case   15:*/		return 0x821EA47C;
		  /* 821EA47Ch */ case   16:  		/* rlwinm R4, R11, 29, 3, 29 */
		/* 821EA47Ch case   16:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R11);
		/* 821EA47Ch case   16:*/		return 0x821EA480;
		  /* 821EA480h */ case   17:  		/* mr R3, R20 */
		/* 821EA480h case   17:*/		regs.R3 = regs.R20;
		/* 821EA480h case   17:*/		return 0x821EA484;
		  /* 821EA484h */ case   18:  		/* lwz R11, <#[R31]> */
		/* 821EA484h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821EA484h case   18:*/		return 0x821EA488;
		  /* 821EA488h */ case   19:  		/* ori R11, R11, 2 */
		/* 821EA488h case   19:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821EA488h case   19:*/		return 0x821EA48C;
		  /* 821EA48Ch */ case   20:  		/* stw R11, <#[R31]> */
		/* 821EA48Ch case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821EA48Ch case   20:*/		return 0x821EA490;
		  /* 821EA490h */ case   21:  		/* bl -545880 */
		/* 821EA490h case   21:*/		regs.LR = 0x821EA494; return 0x82165038;
		/* 821EA490h case   21:*/		return 0x821EA494;
		  /* 821EA494h */ case   22:  		/* mr R21, R3 */
		/* 821EA494h case   22:*/		regs.R21 = regs.R3;
		/* 821EA494h case   22:*/		return 0x821EA498;
		  /* 821EA498h */ case   23:  		/* stw R3, <#[R1 + 88]> */
		/* 821EA498h case   23:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000058) );
		/* 821EA498h case   23:*/		return 0x821EA49C;
		  /* 821EA49Ch */ case   24:  		/* li R24, 1 */
		/* 821EA49Ch case   24:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 821EA49Ch case   24:*/		return 0x821EA4A0;
		  /* 821EA4A0h */ case   25:  		/* lwz R11, <#[R20 + 4]> */
		/* 821EA4A0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821EA4A0h case   25:*/		return 0x821EA4A4;
		  /* 821EA4A4h */ case   26:  		/* mr R29, R17 */
		/* 821EA4A4h case   26:*/		regs.R29 = regs.R17;
		/* 821EA4A4h case   26:*/		return 0x821EA4A8;
		  /* 821EA4A8h */ case   27:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821EA4A8h case   27:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EA4A8h case   27:*/		return 0x821EA4AC;
		  /* 821EA4ACh */ case   28:  		/* addic R10, R10, -1 */
		/* 821EA4ACh case   28:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821EA4ACh case   28:*/		return 0x821EA4B0;
		  /* 821EA4B0h */ case   29:  		/* subfe R10, R10, R10 */
		/* 821EA4B0h case   29:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821EA4B0h case   29:*/		return 0x821EA4B4;
		  /* 821EA4B4h */ case   30:  		/* and R11, R10, R11 */
		/* 821EA4B4h case   30:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EA4B4h case   30:*/		return 0x821EA4B8;
		  /* 821EA4B8h */ case   31:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821EA4B8h case   31:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821EA4B8h case   31:*/		return 0x821EA4BC;
		  /* 821EA4BCh */ case   32:  		/* b 180 */
		/* 821EA4BCh case   32:*/		return 0x821EA570;
		/* 821EA4BCh case   32:*/		return 0x821EA4C0;
		  /* 821EA4C0h */ case   33:  		/* mr R4, R18 */
		/* 821EA4C0h case   33:*/		regs.R4 = regs.R18;
		/* 821EA4C0h case   33:*/		return 0x821EA4C4;
		  /* 821EA4C4h */ case   34:  		/* mr R3, R21 */
		/* 821EA4C4h case   34:*/		regs.R3 = regs.R21;
		/* 821EA4C4h case   34:*/		return 0x821EA4C8;
		  /* 821EA4C8h */ case   35:  		/* bl -912 */
		/* 821EA4C8h case   35:*/		regs.LR = 0x821EA4CC; return 0x821EA138;
		/* 821EA4C8h case   35:*/		return 0x821EA4CC;
		  /* 821EA4CCh */ case   36:  		/* lwz R30, <#[R31 + 8]> */
		/* 821EA4CCh case   36:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821EA4CCh case   36:*/		return 0x821EA4D0;
		  /* 821EA4D0h */ case   37:  		/* cmplwi CR6, R30, 0 */
		/* 821EA4D0h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821EA4D0h case   37:*/		return 0x821EA4D4;
		  /* 821EA4D4h */ case   38:  		/* bc 12, CR6_EQ, 32 */
		/* 821EA4D4h case   38:*/		if ( regs.CR[6].eq ) { return 0x821EA4F4;  }
		/* 821EA4D4h case   38:*/		return 0x821EA4D8;
		  /* 821EA4D8h */ case   39:  		/* lwz R11, <#[R30 + 4]> */
		/* 821EA4D8h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821EA4D8h case   39:*/		return 0x821EA4DC;
		  /* 821EA4DCh */ case   40:  		/* addi R3, R1, 88 */
		/* 821EA4DCh case   40:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 821EA4DCh case   40:*/		return 0x821EA4E0;
		  /* 821EA4E0h */ case   41:  		/* lwz R11, <#[R11 + 40]> */
		/* 821EA4E0h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821EA4E0h case   41:*/		return 0x821EA4E4;
		  /* 821EA4E4h */ case   42:  		/* addi R4, R11, 4 */
		/* 821EA4E4h case   42:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4);
		/* 821EA4E4h case   42:*/		return 0x821EA4E8;
		  /* 821EA4E8h */ case   43:  		/* bl -608 */
		/* 821EA4E8h case   43:*/		regs.LR = 0x821EA4EC; return 0x821EA288;
		/* 821EA4E8h case   43:*/		return 0x821EA4EC;
		  /* 821EA4ECh */ case   44:  		/* lwz R30, <#[R30 + 12]> */
		/* 821EA4ECh case   44:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 821EA4ECh case   44:*/		return 0x821EA4F0;
		  /* 821EA4F0h */ case   45:  		/* b -32 */
		/* 821EA4F0h case   45:*/		return 0x821EA4D0;
		/* 821EA4F0h case   45:*/		return 0x821EA4F4;
	}
	return 0x821EA4F4;
} // Block from 821EA43Ch-821EA4F4h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821EA4F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA4F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA4F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA4F4);
		  /* 821EA4F4h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 821EA4F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821EA4F4h case    0:*/		return 0x821EA4F8;
		  /* 821EA4F8h */ case    1:  		/* mr R10, R21 */
		/* 821EA4F8h case    1:*/		regs.R10 = regs.R21;
		/* 821EA4F8h case    1:*/		return 0x821EA4FC;
		  /* 821EA4FCh */ case    2:  		/* mr R9, R17 */
		/* 821EA4FCh case    2:*/		regs.R9 = regs.R17;
		/* 821EA4FCh case    2:*/		return 0x821EA500;
		  /* 821EA500h */ case    3:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 821EA500h case    3:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 821EA500h case    3:*/		return 0x821EA504;
		  /* 821EA504h */ case    4:  		/* cmplwi CR0, R27, 0 */
		/* 821EA504h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R27,0x00000000);
		/* 821EA504h case    4:*/		return 0x821EA508;
		  /* 821EA508h */ case    5:  		/* rlwinm R11, R8, 29, 3, 29 */
		/* 821EA508h case    5:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R8);
		/* 821EA508h case    5:*/		return 0x821EA50C;
		  /* 821EA50Ch */ case    6:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821EA50Ch case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821EA50Ch case    6:*/		return 0x821EA510;
		  /* 821EA510h */ case    7:  		/* slw R8, R24, R8 */
		/* 821EA510h case    7:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R8);
		/* 821EA510h case    7:*/		return 0x821EA514;
		  /* 821EA514h */ case    8:  		/* lwzx R7, <#[R11 + R21]> */
		/* 821EA514h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R21 + 0x00000000) );
		/* 821EA514h case    8:*/		return 0x821EA518;
		  /* 821EA518h */ case    9:  		/* or R8, R8, R7 */
		/* 821EA518h case    9:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821EA518h case    9:*/		return 0x821EA51C;
		  /* 821EA51Ch */ case   10:  		/* stwx R8, <#[R11 + R21]> */
		/* 821EA51Ch case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R21 + 0x00000000) );
		/* 821EA51Ch case   10:*/		return 0x821EA520;
		  /* 821EA520h */ case   11:  		/* lwz R11, <#[R31 + 40]> */
		/* 821EA520h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821EA520h case   11:*/		return 0x821EA524;
		  /* 821EA524h */ case   12:  		/* addi R3, R11, 4 */
		/* 821EA524h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 821EA524h case   12:*/		return 0x821EA528;
		  /* 821EA528h */ case   13:  		/* mr R11, R3 */
		/* 821EA528h case   13:*/		regs.R11 = regs.R3;
		/* 821EA528h case   13:*/		return 0x821EA52C;
		  /* 821EA52Ch */ case   14:  		/* bc 12, CR0_EQ, 40 */
		/* 821EA52Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x821EA554;  }
		/* 821EA52Ch case   14:*/		return 0x821EA530;
		  /* 821EA530h */ case   15:  		/* add R8, R3, R27 */
		/* 821EA530h case   15:*/		cpu::op::add<0>(regs,&regs.R8,regs.R3,regs.R27);
		/* 821EA530h case   15:*/		return 0x821EA534;
		  /* 821EA534h */ case   16:  		/* lbz R9, <#[R11]> */
		/* 821EA534h case   16:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821EA534h case   16:*/		return 0x821EA538;
		  /* 821EA538h */ case   17:  		/* lbz R7, <#[R10]> */
		/* 821EA538h case   17:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821EA538h case   17:*/		return 0x821EA53C;
		  /* 821EA53Ch */ case   18:  		/* subf. R9, R7, R9 */
		/* 821EA53Ch case   18:*/		cpu::op::subf<1>(regs,&regs.R9,regs.R7,regs.R9);
		/* 821EA53Ch case   18:*/		return 0x821EA540;
		  /* 821EA540h */ case   19:  		/* bc 4, CR0_EQ, 20 */
		/* 821EA540h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821EA554;  }
		/* 821EA540h case   19:*/		return 0x821EA544;
		  /* 821EA544h */ case   20:  		/* addi R11, R11, 1 */
		/* 821EA544h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821EA544h case   20:*/		return 0x821EA548;
		  /* 821EA548h */ case   21:  		/* addi R10, R10, 1 */
		/* 821EA548h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EA548h case   21:*/		return 0x821EA54C;
		  /* 821EA54Ch */ case   22:  		/* cmpw CR6, R11, R8 */
		/* 821EA54Ch case   22:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R8);
		/* 821EA54Ch case   22:*/		return 0x821EA550;
		  /* 821EA550h */ case   23:  		/* bc 4, CR6_EQ, -28 */
		/* 821EA550h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821EA534;  }
		/* 821EA550h case   23:*/		return 0x821EA554;
	}
	return 0x821EA554;
} // Block from 821EA4F4h-821EA554h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821EA554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA554);
		  /* 821EA554h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821EA554h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821EA554h case    0:*/		return 0x821EA558;
		  /* 821EA558h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821EA558h case    1:*/		if ( regs.CR[0].eq ) { return 0x821EA56C;  }
		/* 821EA558h case    1:*/		return 0x821EA55C;
		  /* 821EA55Ch */ case    2:  		/* mr R5, R27 */
		/* 821EA55Ch case    2:*/		regs.R5 = regs.R27;
		/* 821EA55Ch case    2:*/		return 0x821EA560;
		  /* 821EA560h */ case    3:  		/* mr R4, R21 */
		/* 821EA560h case    3:*/		regs.R4 = regs.R21;
		/* 821EA560h case    3:*/		return 0x821EA564;
		  /* 821EA564h */ case    4:  		/* bl -1412020 */
		/* 821EA564h case    4:*/		regs.LR = 0x821EA568; return 0x820919B0;
		/* 821EA564h case    4:*/		return 0x821EA568;
		  /* 821EA568h */ case    5:  		/* mr R29, R24 */
		/* 821EA568h case    5:*/		regs.R29 = regs.R24;
		/* 821EA568h case    5:*/		return 0x821EA56C;
	}
	return 0x821EA56C;
} // Block from 821EA554h-821EA56Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821EA56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA56C);
		  /* 821EA56Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821EA56Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821EA56Ch case    0:*/		return 0x821EA570;
	}
	return 0x821EA570;
} // Block from 821EA56Ch-821EA570h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821EA570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA570);
		  /* 821EA570h */ case    0:  		/* lwz R31, <#[R11 + 4]> */
		/* 821EA570h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821EA570h case    0:*/		return 0x821EA574;
		  /* 821EA574h */ case    1:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821EA574h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821EA574h case    1:*/		return 0x821EA578;
		  /* 821EA578h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 821EA578h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821EA584;  }
		/* 821EA578h case    2:*/		return 0x821EA57C;
		  /* 821EA57Ch */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821EA57Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821EA57Ch case    3:*/		return 0x821EA580;
		  /* 821EA580h */ case    4:  		/* bc 4, CR6_EQ, -192 */
		/* 821EA580h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821EA4C0;  }
		/* 821EA580h case    4:*/		return 0x821EA584;
	}
	return 0x821EA584;
} // Block from 821EA570h-821EA584h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821EA584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA584);
		  /* 821EA584h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821EA584h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821EA584h case    0:*/		return 0x821EA588;
		  /* 821EA588h */ case    1:  		/* bc 4, CR0_EQ, -232 */
		/* 821EA588h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821EA4A0;  }
		/* 821EA588h case    1:*/		return 0x821EA58C;
		  /* 821EA58Ch */ case    2:  		/* lwz R11, <#[R20 + 4]> */
		/* 821EA58Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821EA58Ch case    2:*/		return 0x821EA590;
		  /* 821EA590h */ case    3:  		/* mr R29, R17 */
		/* 821EA590h case    3:*/		regs.R29 = regs.R17;
		/* 821EA590h case    3:*/		return 0x821EA594;
		  /* 821EA594h */ case    4:  		/* mr R28, R17 */
		/* 821EA594h case    4:*/		regs.R28 = regs.R17;
		/* 821EA594h case    4:*/		return 0x821EA598;
		  /* 821EA598h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EA598h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EA598h case    5:*/		return 0x821EA59C;
		  /* 821EA59Ch */ case    6:  		/* bc 4, CR0_EQ, 96 */
		/* 821EA59Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821EA5FC;  }
		/* 821EA59Ch case    6:*/		return 0x821EA5A0;
		  /* 821EA5A0h */ case    7:  		/* mr R30, R11 */
		/* 821EA5A0h case    7:*/		regs.R30 = regs.R11;
		/* 821EA5A0h case    7:*/		return 0x821EA5A4;
		  /* 821EA5A4h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821EA5A4h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821EA5A4h case    8:*/		return 0x821EA5A8;
		  /* 821EA5A8h */ case    9:  		/* bc 12, CR0_EQ, 84 */
		/* 821EA5A8h case    9:*/		if ( regs.CR[0].eq ) { return 0x821EA5FC;  }
		/* 821EA5A8h case    9:*/		return 0x821EA5AC;
		  /* 821EA5ACh */ case   10:  		/* lwz R6, <#[R30 + 40]> */
		/* 821EA5ACh case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000028) );
		/* 821EA5ACh case   10:*/		return 0x821EA5B0;
		  /* 821EA5B0h */ case   11:  		/* addi R31, R6, 4 */
		/* 821EA5B0h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R6,0x4);
		/* 821EA5B0h case   11:*/		return 0x821EA5B4;
		  /* 821EA5B4h */ case   12:  		/* lwz R11, <#[R6 + 4]> */
		/* 821EA5B4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 821EA5B4h case   12:*/		return 0x821EA5B8;
		  /* 821EA5B8h */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821EA5B8h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821EA5B8h case   13:*/		return 0x821EA5BC;
		  /* 821EA5BCh */ case   14:  		/* bc 12, CR0_EQ, 112 */
		/* 821EA5BCh case   14:*/		if ( regs.CR[0].eq ) { return 0x821EA62C;  }
		/* 821EA5BCh case   14:*/		return 0x821EA5C0;
		  /* 821EA5C0h */ case   15:  		/* mr R5, R27 */
		/* 821EA5C0h case   15:*/		regs.R5 = regs.R27;
		/* 821EA5C0h case   15:*/		return 0x821EA5C4;
		  /* 821EA5C4h */ case   16:  		/* li R4, 0 */
		/* 821EA5C4h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821EA5C4h case   16:*/		return 0x821EA5C8;
		  /* 821EA5C8h */ case   17:  		/* mr R3, R31 */
		/* 821EA5C8h case   17:*/		regs.R3 = regs.R31;
		/* 821EA5C8h case   17:*/		return 0x821EA5CC;
		  /* 821EA5CCh */ case   18:  		/* bl -1413772 */
		/* 821EA5CCh case   18:*/		regs.LR = 0x821EA5D0; return 0x82091340;
		/* 821EA5CCh case   18:*/		return 0x821EA5D0;
		  /* 821EA5D0h */ case   19:  		/* lwz R11, <#[R31]> */
		/* 821EA5D0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821EA5D0h case   19:*/		return 0x821EA5D4;
		  /* 821EA5D4h */ case   20:  		/* ori R11, R11, 1 */
		/* 821EA5D4h case   20:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821EA5D4h case   20:*/		return 0x821EA5D8;
		  /* 821EA5D8h */ case   21:  		/* stw R11, <#[R31]> */
		/* 821EA5D8h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821EA5D8h case   21:*/		return 0x821EA5DC;
		  /* 821EA5DCh */ case   22:  		/* stw R17, <#[R30 + 52]> */
		/* 821EA5DCh case   22:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R30 + 0x00000034) );
		/* 821EA5DCh case   22:*/		return 0x821EA5E0;
		  /* 821EA5E0h */ case   23:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821EA5E0h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821EA5E0h case   23:*/		return 0x821EA5E4;
		  /* 821EA5E4h */ case   24:  		/* lwz R11, <#[R11 + 4]> */
		/* 821EA5E4h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821EA5E4h case   24:*/		return 0x821EA5E8;
		  /* 821EA5E8h */ case   25:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EA5E8h case   25:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EA5E8h case   25:*/		return 0x821EA5EC;
		  /* 821EA5ECh */ case   26:  		/* bc 4, CR0_EQ, 16 */
		/* 821EA5ECh case   26:*/		if ( !regs.CR[0].eq ) { return 0x821EA5FC;  }
		/* 821EA5ECh case   26:*/		return 0x821EA5F0;
	}
	return 0x821EA5F0;
} // Block from 821EA584h-821EA5F0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821EA5F0h
// Function '?GlobalSSA@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA5F0);
		  /* 821EA5F0h */ case    0:  		/* mr R30, R11 */
		/* 821EA5F0h case    0:*/		regs.R30 = regs.R11;
		/* 821EA5F0h case    0:*/		return 0x821EA5F4;
		  /* 821EA5F4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821EA5F4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821EA5F4h case    1:*/		return 0x821EA5F8;
		  /* 821EA5F8h */ case    2:  		/* bc 4, CR6_EQ, -76 */
		/* 821EA5F8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821EA5AC;  }
		/* 821EA5F8h case    2:*/		return 0x821EA5FC;
	}
	return 0x821EA5FC;
} // Block from 821EA5F0h-821EA5FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821EA5FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA5FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA5FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA5FC);
		  /* 821EA5FCh */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821EA5FCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821EA5FCh case    0:*/		return 0x821EA600;
		  /* 821EA600h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821EA600h case    1:*/		if ( regs.CR[0].eq ) { return 0x821EA60C;  }
		/* 821EA600h case    1:*/		return 0x821EA604;
		  /* 821EA604h */ case    2:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821EA604h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821EA604h case    2:*/		return 0x821EA608;
		  /* 821EA608h */ case    3:  		/* bc 12, CR0_EQ, 432 */
		/* 821EA608h case    3:*/		if ( regs.CR[0].eq ) { return 0x821EA7B8;  }
		/* 821EA608h case    3:*/		return 0x821EA60C;
	}
	return 0x821EA60C;
} // Block from 821EA5FCh-821EA60Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821EA60Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA60C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA60C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA60C);
		  /* 821EA60Ch */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821EA60Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821EA60Ch case    0:*/		return 0x821EA610;
		  /* 821EA610h */ case    1:  		/* bc 4, CR0_EQ, -132 */
		/* 821EA610h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821EA58C;  }
		/* 821EA610h case    1:*/		return 0x821EA614;
		  /* 821EA614h */ case    2:  		/* lwz R11, <#[R20 + 4]> */
		/* 821EA614h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821EA614h case    2:*/		return 0x821EA618;
		  /* 821EA618h */ case    3:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821EA618h case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EA618h case    3:*/		return 0x821EA61C;
		  /* 821EA61Ch */ case    4:  		/* addic R10, R10, -1 */
		/* 821EA61Ch case    4:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821EA61Ch case    4:*/		return 0x821EA620;
		  /* 821EA620h */ case    5:  		/* subfe R10, R10, R10 */
		/* 821EA620h case    5:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821EA620h case    5:*/		return 0x821EA624;
		  /* 821EA624h */ case    6:  		/* and R11, R10, R11 */
		/* 821EA624h case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EA624h case    6:*/		return 0x821EA628;
		  /* 821EA628h */ case    7:  		/* b 460 */
		/* 821EA628h case    7:*/		return 0x821EA7F4;
		/* 821EA628h case    7:*/		return 0x821EA62C;
	}
	return 0x821EA62C;
} // Block from 821EA60Ch-821EA62Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821EA62Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA62C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA62C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA62C);
		  /* 821EA62Ch */ case    0:  		/* lwz R8, <#[R30 + 8]> */
		/* 821EA62Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000008) );
		/* 821EA62Ch case    0:*/		return 0x821EA630;
		  /* 821EA630h */ case    1:  		/* mr R9, R8 */
		/* 821EA630h case    1:*/		regs.R9 = regs.R8;
		/* 821EA630h case    1:*/		return 0x821EA634;
		  /* 821EA634h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821EA634h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821EA634h case    2:*/		return 0x821EA638;
		  /* 821EA638h */ case    3:  		/* bc 12, CR6_EQ, 108 */
		/* 821EA638h case    3:*/		if ( regs.CR[6].eq ) { return 0x821EA6A4;  }
		/* 821EA638h case    3:*/		return 0x821EA63C;
		  /* 821EA63Ch */ case    4:  		/* lwz R11, <#[R9 + 4]> */
		/* 821EA63Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821EA63Ch case    4:*/		return 0x821EA640;
		  /* 821EA640h */ case    5:  		/* cmplw CR6, R11, R30 */
		/* 821EA640h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821EA640h case    5:*/		return 0x821EA644;
		  /* 821EA644h */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 821EA644h case    6:*/		if ( regs.CR[6].eq ) { return 0x821EA674;  }
		/* 821EA644h case    6:*/		return 0x821EA648;
		  /* 821EA648h */ case    7:  		/* lwz R10, <#[R11 + 48]> */
		/* 821EA648h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821EA648h case    7:*/		return 0x821EA64C;
		  /* 821EA64Ch */ case    8:  		/* rlwinm R7, R10, 0, 13, 31 */
		/* 821EA64Ch case    8:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R7,regs.R10);
		/* 821EA64Ch case    8:*/		return 0x821EA650;
		  /* 821EA650h */ case    9:  		/* rlwinm R10, R7, 27, 5, 31 */
		/* 821EA650h case    9:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R7);
		/* 821EA650h case    9:*/		return 0x821EA654;
		  /* 821EA654h */ case   10:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 821EA654h case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 821EA654h case   10:*/		return 0x821EA658;
		  /* 821EA658h */ case   11:  		/* addi R10, R10, 1 */
		/* 821EA658h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EA658h case   11:*/		return 0x821EA65C;
		  /* 821EA65Ch */ case   12:  		/* slw R7, R24, R7 */
		/* 821EA65Ch case   12:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R24,regs.R7);
		/* 821EA65Ch case   12:*/		return 0x821EA660;
		  /* 821EA660h */ case   13:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821EA660h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821EA660h case   13:*/		return 0x821EA664;
		  /* 821EA664h */ case   14:  		/* lwzx R10, <#[R10 + R6]> */
		/* 821EA664h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 821EA664h case   14:*/		return 0x821EA668;
		  /* 821EA668h */ case   15:  		/* and. R10, R7, R10 */
		/* 821EA668h case   15:*/		cpu::op::and<1>(regs,&regs.R10,regs.R7,regs.R10);
		/* 821EA668h case   15:*/		return 0x821EA66C;
		  /* 821EA66Ch */ case   16:  		/* mr R10, R24 */
		/* 821EA66Ch case   16:*/		regs.R10 = regs.R24;
		/* 821EA66Ch case   16:*/		return 0x821EA670;
		  /* 821EA670h */ case   17:  		/* bc 4, CR0_EQ, 8 */
		/* 821EA670h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821EA678;  }
		/* 821EA670h case   17:*/		return 0x821EA674;
	}
	return 0x821EA674;
} // Block from 821EA62Ch-821EA674h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821EA674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA674);
		  /* 821EA674h */ case    0:  		/* mr R10, R17 */
		/* 821EA674h case    0:*/		regs.R10 = regs.R17;
		/* 821EA674h case    0:*/		return 0x821EA678;
	}
	return 0x821EA678;
} // Block from 821EA674h-821EA678h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821EA678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA678);
		  /* 821EA678h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821EA678h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821EA678h case    0:*/		return 0x821EA67C;
		  /* 821EA67Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821EA67Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821EA688;  }
		/* 821EA67Ch case    1:*/		return 0x821EA680;
		  /* 821EA680h */ case    2:  		/* lwz R9, <#[R9 + 12]> */
		/* 821EA680h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821EA680h case    2:*/		return 0x821EA684;
		  /* 821EA684h */ case    3:  		/* b -80 */
		/* 821EA684h case    3:*/		return 0x821EA634;
		/* 821EA684h case    3:*/		return 0x821EA688;
	}
	return 0x821EA688;
} // Block from 821EA678h-821EA688h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821EA688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA688);
		  /* 821EA688h */ case    0:  		/* lwz R10, <#[R30 + 52]> */
		/* 821EA688h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000034) );
		/* 821EA688h case    0:*/		return 0x821EA68C;
		  /* 821EA68Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821EA68Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821EA68Ch case    1:*/		return 0x821EA690;
		  /* 821EA690h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821EA690h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821EA69C;  }
		/* 821EA690h case    2:*/		return 0x821EA694;
		  /* 821EA694h */ case    3:  		/* stw R11, <#[R30 + 52]> */
		/* 821EA694h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 821EA694h case    3:*/		return 0x821EA698;
		  /* 821EA698h */ case    4:  		/* mr R29, R24 */
		/* 821EA698h case    4:*/		regs.R29 = regs.R24;
		/* 821EA698h case    4:*/		return 0x821EA69C;
	}
	return 0x821EA69C;
} // Block from 821EA688h-821EA69Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821EA69Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA69C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA69C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA69C);
		  /* 821EA69Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821EA69Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821EA69Ch case    0:*/		return 0x821EA6A0;
		  /* 821EA6A0h */ case    1:  		/* bc 4, CR6_EQ, -192 */
		/* 821EA6A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821EA5E0;  }
		/* 821EA6A0h case    1:*/		return 0x821EA6A4;
	}
	return 0x821EA6A4;
} // Block from 821EA69Ch-821EA6A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EA6A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA6A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA6A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA6A4);
		  /* 821EA6A4h */ case    0:  		/* mr R7, R8 */
		/* 821EA6A4h case    0:*/		regs.R7 = regs.R8;
		/* 821EA6A4h case    0:*/		return 0x821EA6A8;
		  /* 821EA6A8h */ case    1:  		/* cmplwi CR6, R7, 0 */
		/* 821EA6A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821EA6A8h case    1:*/		return 0x821EA6AC;
		  /* 821EA6ACh */ case    2:  		/* bc 12, CR6_EQ, -204 */
		/* 821EA6ACh case    2:*/		if ( regs.CR[6].eq ) { return 0x821EA5E0;  }
		/* 821EA6ACh case    2:*/		return 0x821EA6B0;
		  /* 821EA6B0h */ case    3:  		/* lwz R9, <#[R7 + 4]> */
		/* 821EA6B0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000004) );
		/* 821EA6B0h case    3:*/		return 0x821EA6B4;
		  /* 821EA6B4h */ case    4:  		/* lwz R11, <#[R9 + 40]> */
		/* 821EA6B4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000028) );
		/* 821EA6B4h case    4:*/		return 0x821EA6B8;
		  /* 821EA6B8h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 821EA6B8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821EA6B8h case    5:*/		return 0x821EA6BC;
		  /* 821EA6BCh */ case    6:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821EA6BCh case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821EA6BCh case    6:*/		return 0x821EA6C0;
		  /* 821EA6C0h */ case    7:  		/* bc 4, CR0_EQ, 240 */
		/* 821EA6C0h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821EA7B0;  }
		/* 821EA6C0h case    7:*/		return 0x821EA6C4;
		  /* 821EA6C4h */ case    8:  		/* lwz R10, <#[R30 + 48]> */
		/* 821EA6C4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 821EA6C4h case    8:*/		return 0x821EA6C8;
		  /* 821EA6C8h */ case    9:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 821EA6C8h case    9:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 821EA6C8h case    9:*/		return 0x821EA6CC;
		  /* 821EA6CCh */ case   10:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 821EA6CCh case   10:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 821EA6CCh case   10:*/		return 0x821EA6D0;
		  /* 821EA6D0h */ case   11:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821EA6D0h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821EA6D0h case   11:*/		return 0x821EA6D4;
		  /* 821EA6D4h */ case   12:  		/* addi R10, R10, 1 */
		/* 821EA6D4h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EA6D4h case   12:*/		return 0x821EA6D8;
		  /* 821EA6D8h */ case   13:  		/* slw R8, R24, R8 */
		/* 821EA6D8h case   13:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R8);
		/* 821EA6D8h case   13:*/		return 0x821EA6DC;
		  /* 821EA6DCh */ case   14:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821EA6DCh case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821EA6DCh case   14:*/		return 0x821EA6E0;
		  /* 821EA6E0h */ case   15:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821EA6E0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821EA6E0h case   15:*/		return 0x821EA6E4;
		  /* 821EA6E4h */ case   16:  		/* and. R11, R8, R11 */
		/* 821EA6E4h case   16:*/		cpu::op::and<1>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821EA6E4h case   16:*/		return 0x821EA6E8;
		  /* 821EA6E8h */ case   17:  		/* bc 4, CR0_EQ, 200 */
		/* 821EA6E8h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821EA7B0;  }
		/* 821EA6E8h case   17:*/		return 0x821EA6EC;
		  /* 821EA6ECh */ case   18:  		/* lwz R10, <#[R9 + 52]> */
		/* 821EA6ECh case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000034) );
		/* 821EA6ECh case   18:*/		return 0x821EA6F0;
		  /* 821EA6F0h */ case   19:  		/* cmplwi CR6, R10, 0 */
		/* 821EA6F0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821EA6F0h case   19:*/		return 0x821EA6F4;
		  /* 821EA6F4h */ case   20:  		/* bc 12, CR6_EQ, 184 */
		/* 821EA6F4h case   20:*/		if ( regs.CR[6].eq ) { return 0x821EA7AC;  }
		/* 821EA6F4h case   20:*/		return 0x821EA6F8;
		  /* 821EA6F8h */ case   21:  		/* lwz R11, <#[R10 + 48]> */
		/* 821EA6F8h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000030) );
		/* 821EA6F8h case   21:*/		return 0x821EA6FC;
		  /* 821EA6FCh */ case   22:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821EA6FCh case   22:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821EA6FCh case   22:*/		return 0x821EA700;
		  /* 821EA700h */ case   23:  		/* rlwinm R9, R11, 27, 5, 31 */
		/* 821EA700h case   23:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R11);
		/* 821EA700h case   23:*/		return 0x821EA704;
		  /* 821EA704h */ case   24:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 821EA704h case   24:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 821EA704h case   24:*/		return 0x821EA708;
		  /* 821EA708h */ case   25:  		/* addi R9, R9, 1 */
		/* 821EA708h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821EA708h case   25:*/		return 0x821EA70C;
		  /* 821EA70Ch */ case   26:  		/* slw R8, R24, R8 */
		/* 821EA70Ch case   26:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R8);
		/* 821EA70Ch case   26:*/		return 0x821EA710;
		  /* 821EA710h */ case   27:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821EA710h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821EA710h case   27:*/		return 0x821EA714;
		  /* 821EA714h */ case   28:  		/* lwzx R9, <#[R9 + R6]> */
		/* 821EA714h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 821EA714h case   28:*/		return 0x821EA718;
		  /* 821EA718h */ case   29:  		/* and. R9, R8, R9 */
		/* 821EA718h case   29:*/		cpu::op::and<1>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821EA718h case   29:*/		return 0x821EA71C;
		  /* 821EA71Ch */ case   30:  		/* bc 4, CR0_EQ, 60 */
		/* 821EA71Ch case   30:*/		if ( !regs.CR[0].eq ) { return 0x821EA758;  }
		/* 821EA71Ch case   30:*/		return 0x821EA720;
		  /* 821EA720h */ case   31:  		/* lwz R10, <#[R10 + 52]> */
		/* 821EA720h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000034) );
		/* 821EA720h case   31:*/		return 0x821EA724;
		  /* 821EA724h */ case   32:  		/* cmplwi CR6, R10, 0 */
		/* 821EA724h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821EA724h case   32:*/		return 0x821EA728;
		  /* 821EA728h */ case   33:  		/* bc 12, CR6_EQ, 132 */
		/* 821EA728h case   33:*/		if ( regs.CR[6].eq ) { return 0x821EA7AC;  }
		/* 821EA728h case   33:*/		return 0x821EA72C;
		  /* 821EA72Ch */ case   34:  		/* lwz R11, <#[R10 + 48]> */
		/* 821EA72Ch case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000030) );
		/* 821EA72Ch case   34:*/		return 0x821EA730;
		  /* 821EA730h */ case   35:  		/* lwz R8, <#[R30 + 40]> */
		/* 821EA730h case   35:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000028) );
		/* 821EA730h case   35:*/		return 0x821EA734;
		  /* 821EA734h */ case   36:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821EA734h case   36:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821EA734h case   36:*/		return 0x821EA738;
		  /* 821EA738h */ case   37:  		/* rlwinm R9, R11, 27, 5, 31 */
		/* 821EA738h case   37:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R11);
		/* 821EA738h case   37:*/		return 0x821EA73C;
		  /* 821EA73Ch */ case   38:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 821EA73Ch case   38:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 821EA73Ch case   38:*/		return 0x821EA740;
		  /* 821EA740h */ case   39:  		/* addi R9, R9, 1 */
		/* 821EA740h case   39:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821EA740h case   39:*/		return 0x821EA744;
		  /* 821EA744h */ case   40:  		/* slw R5, R24, R5 */
		/* 821EA744h case   40:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R24,regs.R5);
		/* 821EA744h case   40:*/		return 0x821EA748;
		  /* 821EA748h */ case   41:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821EA748h case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821EA748h case   41:*/		return 0x821EA74C;
		  /* 821EA74Ch */ case   42:  		/* lwzx R9, <#[R9 + R8]> */
		/* 821EA74Ch case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 821EA74Ch case   42:*/		return 0x821EA750;
		  /* 821EA750h */ case   43:  		/* and. R9, R5, R9 */
		/* 821EA750h case   43:*/		cpu::op::and<1>(regs,&regs.R9,regs.R5,regs.R9);
		/* 821EA750h case   43:*/		return 0x821EA754;
		  /* 821EA754h */ case   44:  		/* bc 12, CR0_EQ, -52 */
		/* 821EA754h case   44:*/		if ( regs.CR[0].eq ) { return 0x821EA720;  }
		/* 821EA754h case   44:*/		return 0x821EA758;
	}
	return 0x821EA758;
} // Block from 821EA6A4h-821EA758h (45 instructions)

//////////////////////////////////////////////////////
// Block at 821EA758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA758);
		  /* 821EA758h */ case    0:  		/* lwz R9, <#[R30 + 52]> */
		/* 821EA758h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000034) );
		/* 821EA758h case    0:*/		return 0x821EA75C;
		  /* 821EA75Ch */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 821EA75Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821EA75Ch case    1:*/		return 0x821EA760;
		  /* 821EA760h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821EA760h case    2:*/		if ( regs.CR[6].eq ) { return 0x821EA7A0;  }
		/* 821EA760h case    2:*/		return 0x821EA764;
		  /* 821EA764h */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 821EA764h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821EA764h case    3:*/		return 0x821EA768;
		  /* 821EA768h */ case    4:  		/* bc 12, CR6_EQ, 44 */
		/* 821EA768h case    4:*/		if ( regs.CR[6].eq ) { return 0x821EA794;  }
		/* 821EA768h case    4:*/		return 0x821EA76C;
		  /* 821EA76Ch */ case    5:  		/* rlwinm R8, R11, 27, 5, 31 */
		/* 821EA76Ch case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R8,regs.R11);
		/* 821EA76Ch case    5:*/		return 0x821EA770;
		  /* 821EA770h */ case    6:  		/* lwz R9, <#[R9 + 40]> */
		/* 821EA770h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000028) );
		/* 821EA770h case    6:*/		return 0x821EA774;
		  /* 821EA774h */ case    7:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821EA774h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821EA774h case    7:*/		return 0x821EA778;
		  /* 821EA778h */ case    8:  		/* addi R8, R8, 1 */
		/* 821EA778h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821EA778h case    8:*/		return 0x821EA77C;
		  /* 821EA77Ch */ case    9:  		/* slw R11, R24, R11 */
		/* 821EA77Ch case    9:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R24,regs.R11);
		/* 821EA77Ch case    9:*/		return 0x821EA780;
		  /* 821EA780h */ case   10:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821EA780h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821EA780h case   10:*/		return 0x821EA784;
		  /* 821EA784h */ case   11:  		/* lwzx R9, <#[R8 + R9]> */
		/* 821EA784h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 821EA784h case   11:*/		return 0x821EA788;
		  /* 821EA788h */ case   12:  		/* and. R11, R9, R11 */
		/* 821EA788h case   12:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821EA788h case   12:*/		return 0x821EA78C;
		  /* 821EA78Ch */ case   13:  		/* mr R11, R24 */
		/* 821EA78Ch case   13:*/		regs.R11 = regs.R24;
		/* 821EA78Ch case   13:*/		return 0x821EA790;
		  /* 821EA790h */ case   14:  		/* bc 4, CR0_EQ, 8 */
		/* 821EA790h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821EA798;  }
		/* 821EA790h case   14:*/		return 0x821EA794;
	}
	return 0x821EA794;
} // Block from 821EA758h-821EA794h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821EA794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA794);
		  /* 821EA794h */ case    0:  		/* mr R11, R17 */
		/* 821EA794h case    0:*/		regs.R11 = regs.R17;
		/* 821EA794h case    0:*/		return 0x821EA798;
	}
	return 0x821EA798;
} // Block from 821EA794h-821EA798h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821EA798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA798);
		  /* 821EA798h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821EA798h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821EA798h case    0:*/		return 0x821EA79C;
		  /* 821EA79Ch */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821EA79Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821EA7B0;  }
		/* 821EA79Ch case    1:*/		return 0x821EA7A0;
	}
	return 0x821EA7A0;
} // Block from 821EA798h-821EA7A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EA7A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA7A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA7A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA7A0);
		  /* 821EA7A0h */ case    0:  		/* stw R10, <#[R30 + 52]> */
		/* 821EA7A0h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000034) );
		/* 821EA7A0h case    0:*/		return 0x821EA7A4;
		  /* 821EA7A4h */ case    1:  		/* mr R29, R24 */
		/* 821EA7A4h case    1:*/		regs.R29 = regs.R24;
		/* 821EA7A4h case    1:*/		return 0x821EA7A8;
		  /* 821EA7A8h */ case    2:  		/* b 8 */
		/* 821EA7A8h case    2:*/		return 0x821EA7B0;
		/* 821EA7A8h case    2:*/		return 0x821EA7AC;
	}
	return 0x821EA7AC;
} // Block from 821EA7A0h-821EA7ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821EA7ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA7AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA7AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA7AC);
		  /* 821EA7ACh */ case    0:  		/* mr R28, R24 */
		/* 821EA7ACh case    0:*/		regs.R28 = regs.R24;
		/* 821EA7ACh case    0:*/		return 0x821EA7B0;
	}
	return 0x821EA7B0;
} // Block from 821EA7ACh-821EA7B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821EA7B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA7B0);
		  /* 821EA7B0h */ case    0:  		/* lwz R7, <#[R7 + 12]> */
		/* 821EA7B0h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x0000000C) );
		/* 821EA7B0h case    0:*/		return 0x821EA7B4;
		  /* 821EA7B4h */ case    1:  		/* b -268 */
		/* 821EA7B4h case    1:*/		return 0x821EA6A8;
		/* 821EA7B4h case    1:*/		return 0x821EA7B8;
	}
	return 0x821EA7B8;
} // Block from 821EA7B0h-821EA7B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EA7B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA7B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA7B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA7B8);
		  /* 821EA7B8h */ case    0:  		/* li R4, 4800 */
		/* 821EA7B8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821EA7B8h case    0:*/		return 0x821EA7BC;
		  /* 821EA7BCh */ case    1:  		/* mr R3, R20 */
		/* 821EA7BCh case    1:*/		regs.R3 = regs.R20;
		/* 821EA7BCh case    1:*/		return 0x821EA7C0;
		  /* 821EA7C0h */ case    2:  		/* bl -624984 */
		/* 821EA7C0h case    2:*/		regs.LR = 0x821EA7C4; return 0x82151E68;
		/* 821EA7C0h case    2:*/		return 0x821EA7C4;
		  /* 821EA7C4h */ case    3:  		/* lwz R10, <#[R11 + 52]> */
		/* 821EA7C4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000034) );
		/* 821EA7C4h case    3:*/		return 0x821EA7C8;
		  /* 821EA7C8h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821EA7C8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821EA7C8h case    4:*/		return 0x821EA7CC;
		  /* 821EA7CCh */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821EA7CCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821EA7E0;  }
		/* 821EA7CCh case    5:*/		return 0x821EA7D0;
		  /* 821EA7D0h */ case    6:  		/* lwz R9, <#[R10 + 56]> */
		/* 821EA7D0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000038) );
		/* 821EA7D0h case    6:*/		return 0x821EA7D4;
		  /* 821EA7D4h */ case    7:  		/* stw R9, <#[R11 + 60]> */
		/* 821EA7D4h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000003C) );
		/* 821EA7D4h case    7:*/		return 0x821EA7D8;
		  /* 821EA7D8h */ case    8:  		/* stw R11, <#[R10 + 56]> */
		/* 821EA7D8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000038) );
		/* 821EA7D8h case    8:*/		return 0x821EA7DC;
		  /* 821EA7DCh */ case    9:  		/* b 24 */
		/* 821EA7DCh case    9:*/		return 0x821EA7F4;
		/* 821EA7DCh case    9:*/		return 0x821EA7E0;
	}
	return 0x821EA7E0;
} // Block from 821EA7B8h-821EA7E0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821EA7E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA7E0);
		  /* 821EA7E0h */ case    0:  		/* lwz R10, <#[R11 + 48]> */
		/* 821EA7E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821EA7E0h case    0:*/		return 0x821EA7E4;
		  /* 821EA7E4h */ case    1:  		/* rlwinm. R9, R10, 12, 31, 31 */
		/* 821EA7E4h case    1:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R9,regs.R10);
		/* 821EA7E4h case    1:*/		return 0x821EA7E8;
		  /* 821EA7E8h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821EA7E8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821EA7F4;  }
		/* 821EA7E8h case    2:*/		return 0x821EA7EC;
		  /* 821EA7ECh */ case    3:  		/* rlwinm R10, R10, 0, 12, 10 */
		/* 821EA7ECh case    3:*/		cpu::op::rlwinm<0,0,12,10>(regs,&regs.R10,regs.R10);
		/* 821EA7ECh case    3:*/		return 0x821EA7F0;
		  /* 821EA7F0h */ case    4:  		/* stw R10, <#[R11 + 48]> */
		/* 821EA7F0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821EA7F0h case    4:*/		return 0x821EA7F4;
	}
	return 0x821EA7F4;
} // Block from 821EA7E0h-821EA7F4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821EA7F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA7F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA7F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA7F4);
		  /* 821EA7F4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821EA7F4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821EA7F4h case    0:*/		return 0x821EA7F8;
		  /* 821EA7F8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821EA7F8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821EA7F8h case    1:*/		return 0x821EA7FC;
		  /* 821EA7FCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EA7FCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EA7FCh case    2:*/		return 0x821EA800;
		  /* 821EA800h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821EA800h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EA80C;  }
		/* 821EA800h case    3:*/		return 0x821EA804;
		  /* 821EA804h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821EA804h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821EA804h case    4:*/		return 0x821EA808;
		  /* 821EA808h */ case    5:  		/* bc 4, CR6_EQ, -68 */
		/* 821EA808h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821EA7C4;  }
		/* 821EA808h case    5:*/		return 0x821EA80C;
	}
	return 0x821EA80C;
} // Block from 821EA7F4h-821EA80Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821EA80Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA80C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA80C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA80C);
		  /* 821EA80Ch */ case    0:  		/* lwz R11, <#[R20 + 44]> */
		/* 821EA80Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821EA80Ch case    0:*/		return 0x821EA810;
		  /* 821EA810h */ case    1:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821EA810h case    1:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821EA810h case    1:*/		return 0x821EA814;
		  /* 821EA814h */ case    2:  		/* bc 12, CR0_EQ, 2808 */
		/* 821EA814h case    2:*/		if ( regs.CR[0].eq ) { return 0x821EB30C;  }
		/* 821EA814h case    2:*/		return 0x821EA818;
		  /* 821EA818h */ case    3:  		/* rlwinm R25, R16, 1, 0, 30 */
		/* 821EA818h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R25,regs.R16);
		/* 821EA818h case    3:*/		return 0x821EA81C;
		  /* 821EA81Ch */ case    4:  		/* li R5, 0 */
		/* 821EA81Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821EA81Ch case    4:*/		return 0x821EA820;
		  /* 821EA820h */ case    5:  		/* addi R11, R25, 33 */
		/* 821EA820h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x21);
		/* 821EA820h case    5:*/		return 0x821EA824;
		  /* 821EA824h */ case    6:  		/* mr R3, R20 */
		/* 821EA824h case    6:*/		regs.R3 = regs.R20;
		/* 821EA824h case    6:*/		return 0x821EA828;
		  /* 821EA828h */ case    7:  		/* rlwinm R4, R11, 29, 3, 29 */
		/* 821EA828h case    7:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R4,regs.R11);
		/* 821EA828h case    7:*/		return 0x821EA82C;
		  /* 821EA82Ch */ case    8:  		/* bl -546804 */
		/* 821EA82Ch case    8:*/		regs.LR = 0x821EA830; return 0x82165038;
		/* 821EA82Ch case    8:*/		return 0x821EA830;
		  /* 821EA830h */ case    9:  		/* mr R31, R3 */
		/* 821EA830h case    9:*/		regs.R31 = regs.R3;
		/* 821EA830h case    9:*/		return 0x821EA834;
		  /* 821EA834h */ case   10:  		/* lwz R28, <#[R20 + 4]> */
		/* 821EA834h case   10:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R20 + 0x00000004) );
		/* 821EA834h case   10:*/		return 0x821EA838;
		  /* 821EA838h */ case   11:  		/* mr R26, R17 */
		/* 821EA838h case   11:*/		regs.R26 = regs.R17;
		/* 821EA838h case   11:*/		return 0x821EA83C;
		  /* 821EA83Ch */ case   12:  		/* rlwinm. R11, R28, 0, 31, 31 */
		/* 821EA83Ch case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R28);
		/* 821EA83Ch case   12:*/		return 0x821EA840;
		  /* 821EA840h */ case   13:  		/* bc 4, CR0_EQ, 992 */
		/* 821EA840h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821EAC20;  }
		/* 821EA840h case   13:*/		return 0x821EA844;
		  /* 821EA844h */ case   14:  		/* cmplwi CR0, R28, 0 */
		/* 821EA844h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R28,0x00000000);
		/* 821EA844h case   14:*/		return 0x821EA848;
		  /* 821EA848h */ case   15:  		/* bc 12, CR0_EQ, 984 */
		/* 821EA848h case   15:*/		if ( regs.CR[0].eq ) { return 0x821EAC20;  }
		/* 821EA848h case   15:*/		return 0x821EA84C;
		  /* 821EA84Ch */ case   16:  		/* lwz R29, <#[R28 + 40]> */
		/* 821EA84Ch case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000028) );
		/* 821EA84Ch case   16:*/		return 0x821EA850;
		  /* 821EA850h */ case   17:  		/* lwz R11, <#[R29 + 4]> */
		/* 821EA850h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821EA850h case   17:*/		return 0x821EA854;
		  /* 821EA854h */ case   18:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821EA854h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821EA854h case   18:*/		return 0x821EA858;
		  /* 821EA858h */ case   19:  		/* bc 4, CR0_EQ, 944 */
		/* 821EA858h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821EAC08;  }
		/* 821EA858h case   19:*/		return 0x821EA85C;
		  /* 821EA85Ch */ case   20:  		/* mr R4, R28 */
		/* 821EA85Ch case   20:*/		regs.R4 = regs.R28;
		/* 821EA85Ch case   20:*/		return 0x821EA860;
		  /* 821EA860h */ case   21:  		/* mr R3, R20 */
		/* 821EA860h case   21:*/		regs.R3 = regs.R20;
		/* 821EA860h case   21:*/		return 0x821EA864;
		  /* 821EA864h */ case   22:  		/* bl -466932 */
		/* 821EA864h case   22:*/		regs.LR = 0x821EA868; return 0x82178870;
		/* 821EA864h case   22:*/		return 0x821EA868;
		  /* 821EA868h */ case   23:  		/* cmplwi CR0, R3, 0 */
		/* 821EA868h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821EA868h case   23:*/		return 0x821EA86C;
		  /* 821EA86Ch */ case   24:  		/* bc 12, CR0_EQ, 540 */
		/* 821EA86Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x821EAA88;  }
		/* 821EA86Ch case   24:*/		return 0x821EA870;
		  /* 821EA870h */ case   25:  		/* lwz R11, <#[R3 + 8]> */
		/* 821EA870h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821EA870h case   25:*/		return 0x821EA874;
		  /* 821EA874h */ case   26:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821EA874h case   26:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821EA874h case   26:*/		return 0x821EA878;
		  /* 821EA878h */ case   27:  		/* cmplwi CR6, R11, 86 */
		/* 821EA878h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821EA878h case   27:*/		return 0x821EA87C;
		  /* 821EA87Ch */ case   28:  		/* bc 12, CR6_EQ, 16 */
		/* 821EA87Ch case   28:*/		if ( regs.CR[6].eq ) { return 0x821EA88C;  }
		/* 821EA87Ch case   28:*/		return 0x821EA880;
		  /* 821EA880h */ case   29:  		/* cmplwi CR6, R11, 87 */
		/* 821EA880h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821EA880h case   29:*/		return 0x821EA884;
		  /* 821EA884h */ case   30:  		/* mr R11, R17 */
		/* 821EA884h case   30:*/		regs.R11 = regs.R17;
		/* 821EA884h case   30:*/		return 0x821EA888;
		  /* 821EA888h */ case   31:  		/* bc 4, CR6_EQ, 8 */
		/* 821EA888h case   31:*/		if ( !regs.CR[6].eq ) { return 0x821EA890;  }
		/* 821EA888h case   31:*/		return 0x821EA88C;
	}
	return 0x821EA88C;
} // Block from 821EA80Ch-821EA88Ch (32 instructions)

//////////////////////////////////////////////////////
// Block at 821EA88Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA88C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA88C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA88C);
		  /* 821EA88Ch */ case    0:  		/* mr R11, R24 */
		/* 821EA88Ch case    0:*/		regs.R11 = regs.R24;
		/* 821EA88Ch case    0:*/		return 0x821EA890;
	}
	return 0x821EA890;
} // Block from 821EA88Ch-821EA890h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821EA890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA890);
		  /* 821EA890h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821EA890h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821EA890h case    0:*/		return 0x821EA894;
		  /* 821EA894h */ case    1:  		/* addic R11, R11, -1 */
		/* 821EA894h case    1:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821EA894h case    1:*/		return 0x821EA898;
		  /* 821EA898h */ case    2:  		/* subfe R11, R11, R11 */
		/* 821EA898h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821EA898h case    2:*/		return 0x821EA89C;
		  /* 821EA89Ch */ case    3:  		/* and R30, R11, R3 */
		/* 821EA89Ch case    3:*/		cpu::op::and<0>(regs,&regs.R30,regs.R11,regs.R3);
		/* 821EA89Ch case    3:*/		return 0x821EA8A0;
		  /* 821EA8A0h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821EA8A0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821EA8A0h case    4:*/		return 0x821EA8A4;
		  /* 821EA8A4h */ case    5:  		/* bc 12, CR6_EQ, 484 */
		/* 821EA8A4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821EAA88;  }
		/* 821EA8A4h case    5:*/		return 0x821EA8A8;
		  /* 821EA8A8h */ case    6:  		/* lwz R11, <#[R30 + 8]> */
		/* 821EA8A8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821EA8A8h case    6:*/		return 0x821EA8AC;
		  /* 821EA8ACh */ case    7:  		/* mr R3, R20 */
		/* 821EA8ACh case    7:*/		regs.R3 = regs.R20;
		/* 821EA8ACh case    7:*/		return 0x821EA8B0;
		  /* 821EA8B0h */ case    8:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821EA8B0h case    8:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821EA8B0h case    8:*/		return 0x821EA8B4;
		  /* 821EA8B4h */ case    9:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821EA8B4h case    9:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821EA8B4h case    9:*/		return 0x821EA8B8;
		  /* 821EA8B8h */ case   10:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821EA8B8h case   10:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821EA8B8h case   10:*/		return 0x821EA8BC;
		  /* 821EA8BCh */ case   11:  		/* bl -550028 */
		/* 821EA8BCh case   11:*/		regs.LR = 0x821EA8C0; return 0x82164430;
		/* 821EA8BCh case   11:*/		return 0x821EA8C0;
		  /* 821EA8C0h */ case   12:  		/* addi R10, R30, -16 */
		/* 821EA8C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFF0);
		/* 821EA8C0h case   12:*/		return 0x821EA8C4;
		  /* 821EA8C4h */ case   13:  		/* lwz R11, <#[R20 + 44]> */
		/* 821EA8C4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821EA8C4h case   13:*/		return 0x821EA8C8;
		  /* 821EA8C8h */ case   14:  		/* add R8, R3, R10 */
		/* 821EA8C8h case   14:*/		cpu::op::add<0>(regs,&regs.R8,regs.R3,regs.R10);
		/* 821EA8C8h case   14:*/		return 0x821EA8CC;
		  /* 821EA8CCh */ case   15:  		/* rlwinm. R11, R11, 0, 17, 17 */
		/* 821EA8CCh case   15:*/		cpu::op::rlwinm<1,0,17,17>(regs,&regs.R11,regs.R11);
		/* 821EA8CCh case   15:*/		return 0x821EA8D0;
		  /* 821EA8D0h */ case   16:  		/* lwz R11, <#[R8]> */
		/* 821EA8D0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821EA8D0h case   16:*/		return 0x821EA8D4;
		  /* 821EA8D4h */ case   17:  		/* bc 12, CR0_EQ, 12 */
		/* 821EA8D4h case   17:*/		if ( regs.CR[0].eq ) { return 0x821EA8E0;  }
		/* 821EA8D4h case   17:*/		return 0x821EA8D8;
		  /* 821EA8D8h */ case   18:  		/* rlwinm R11, R11, 0, 0, 29 */
		/* 821EA8D8h case   18:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R11);
		/* 821EA8D8h case   18:*/		return 0x821EA8DC;
		  /* 821EA8DCh */ case   19:  		/* lwz R11, <#[R11 + 28]> */
		/* 821EA8DCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821EA8DCh case   19:*/		return 0x821EA8E0;
	}
	return 0x821EA8E0;
} // Block from 821EA890h-821EA8E0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821EA8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA8E0);
		  /* 821EA8E0h */ case    0:  		/* lwz R10, <#[R28 + 12]> */
		/* 821EA8E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000000C) );
		/* 821EA8E0h case    0:*/		return 0x821EA8E4;
		  /* 821EA8E4h */ case    1:  		/* mr R9, R10 */
		/* 821EA8E4h case    1:*/		regs.R9 = regs.R10;
		/* 821EA8E4h case    1:*/		return 0x821EA8E8;
		  /* 821EA8E8h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821EA8E8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821EA8E8h case    2:*/		return 0x821EA8EC;
		  /* 821EA8ECh */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 821EA8ECh case    3:*/		if ( regs.CR[6].eq ) { return 0x821EA90C;  }
		/* 821EA8ECh case    3:*/		return 0x821EA8F0;
		  /* 821EA8F0h */ case    4:  		/* lwz R7, <#[R9]> */
		/* 821EA8F0h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821EA8F0h case    4:*/		return 0x821EA8F4;
		  /* 821EA8F4h */ case    5:  		/* cmplw CR6, R11, R7 */
		/* 821EA8F4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 821EA8F4h case    5:*/		return 0x821EA8F8;
		  /* 821EA8F8h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 821EA8F8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821EA904;  }
		/* 821EA8F8h case    6:*/		return 0x821EA8FC;
		  /* 821EA8FCh */ case    7:  		/* lwz R9, <#[R9 + 8]> */
		/* 821EA8FCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821EA8FCh case    7:*/		return 0x821EA900;
		  /* 821EA900h */ case    8:  		/* b -24 */
		/* 821EA900h case    8:*/		return 0x821EA8E8;
		/* 821EA900h case    8:*/		return 0x821EA904;
	}
	return 0x821EA904;
} // Block from 821EA8E0h-821EA904h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821EA904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA904);
		  /* 821EA904h */ case    0:  		/* mr R9, R24 */
		/* 821EA904h case    0:*/		regs.R9 = regs.R24;
		/* 821EA904h case    0:*/		return 0x821EA908;
		  /* 821EA908h */ case    1:  		/* b 8 */
		/* 821EA908h case    1:*/		return 0x821EA910;
		/* 821EA908h case    1:*/		return 0x821EA90C;
	}
	return 0x821EA90C;
} // Block from 821EA904h-821EA90Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EA90Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA90C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA90C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA90C);
		  /* 821EA90Ch */ case    0:  		/* mr R9, R17 */
		/* 821EA90Ch case    0:*/		regs.R9 = regs.R17;
		/* 821EA90Ch case    0:*/		return 0x821EA910;
	}
	return 0x821EA910;
} // Block from 821EA90Ch-821EA910h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821EA910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA910);
		  /* 821EA910h */ case    0:  		/* rlwinm. R9, R9, 0, 24, 31 */
		/* 821EA910h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R9);
		/* 821EA910h case    0:*/		return 0x821EA914;
		  /* 821EA914h */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 821EA914h case    1:*/		if ( regs.CR[0].eq ) { return 0x821EA934;  }
		/* 821EA914h case    1:*/		return 0x821EA918;
		  /* 821EA918h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821EA918h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821EA918h case    2:*/		return 0x821EA91C;
		  /* 821EA91Ch */ case    3:  		/* bc 12, CR6_EQ, 364 */
		/* 821EA91Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821EAA88;  }
		/* 821EA91Ch case    3:*/		return 0x821EA920;
		  /* 821EA920h */ case    4:  		/* lwz R5, <#[R10]> */
		/* 821EA920h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000000) );
		/* 821EA920h case    4:*/		return 0x821EA924;
		  /* 821EA924h */ case    5:  		/* cmplw CR6, R5, R11 */
		/* 821EA924h case    5:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821EA924h case    5:*/		return 0x821EA928;
		  /* 821EA928h */ case    6:  		/* bc 4, CR6_EQ, 76 */
		/* 821EA928h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821EA974;  }
		/* 821EA928h case    6:*/		return 0x821EA92C;
		  /* 821EA92Ch */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 821EA92Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821EA92Ch case    7:*/		return 0x821EA930;
		  /* 821EA930h */ case    8:  		/* b -24 */
		/* 821EA930h case    8:*/		return 0x821EA918;
		/* 821EA930h case    8:*/		return 0x821EA934;
	}
	return 0x821EA934;
} // Block from 821EA910h-821EA934h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821EA934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA934);
		  /* 821EA934h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821EA934h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821EA934h case    0:*/		return 0x821EA938;
		  /* 821EA938h */ case    1:  		/* bc 12, CR6_EQ, 336 */
		/* 821EA938h case    1:*/		if ( regs.CR[6].eq ) { return 0x821EAA88;  }
		/* 821EA938h case    1:*/		return 0x821EA93C;
		  /* 821EA93Ch */ case    2:  		/* lwz R5, <#[R10]> */
		/* 821EA93Ch case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000000) );
		/* 821EA93Ch case    2:*/		return 0x821EA940;
		  /* 821EA940h */ case    3:  		/* lwz R7, <#[R11 + 40]> */
		/* 821EA940h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000028) );
		/* 821EA940h case    3:*/		return 0x821EA944;
		  /* 821EA944h */ case    4:  		/* lwz R9, <#[R5 + 48]> */
		/* 821EA944h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000030) );
		/* 821EA944h case    4:*/		return 0x821EA948;
		  /* 821EA948h */ case    5:  		/* rlwinm R6, R9, 0, 13, 31 */
		/* 821EA948h case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R6,regs.R9);
		/* 821EA948h case    5:*/		return 0x821EA94C;
		  /* 821EA94Ch */ case    6:  		/* rlwinm R9, R6, 27, 5, 31 */
		/* 821EA94Ch case    6:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R6);
		/* 821EA94Ch case    6:*/		return 0x821EA950;
		  /* 821EA950h */ case    7:  		/* rlwinm R6, R6, 0, 27, 31 */
		/* 821EA950h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R6);
		/* 821EA950h case    7:*/		return 0x821EA954;
		  /* 821EA954h */ case    8:  		/* addi R9, R9, 1 */
		/* 821EA954h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821EA954h case    8:*/		return 0x821EA958;
		  /* 821EA958h */ case    9:  		/* slw R6, R24, R6 */
		/* 821EA958h case    9:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R24,regs.R6);
		/* 821EA958h case    9:*/		return 0x821EA95C;
		  /* 821EA95Ch */ case   10:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821EA95Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821EA95Ch case   10:*/		return 0x821EA960;
		  /* 821EA960h */ case   11:  		/* lwzx R9, <#[R9 + R7]> */
		/* 821EA960h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 821EA960h case   11:*/		return 0x821EA964;
		  /* 821EA964h */ case   12:  		/* and. R9, R9, R6 */
		/* 821EA964h case   12:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821EA964h case   12:*/		return 0x821EA968;
		  /* 821EA968h */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 821EA968h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821EA974;  }
		/* 821EA968h case   13:*/		return 0x821EA96C;
		  /* 821EA96Ch */ case   14:  		/* lwz R10, <#[R10 + 8]> */
		/* 821EA96Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821EA96Ch case   14:*/		return 0x821EA970;
		  /* 821EA970h */ case   15:  		/* b -60 */
		/* 821EA970h case   15:*/		return 0x821EA934;
		/* 821EA970h case   15:*/		return 0x821EA974;
	}
	return 0x821EA974;
} // Block from 821EA934h-821EA974h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821EA974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EA974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EA974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EA974);
		  /* 821EA974h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 821EA974h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821EA974h case    0:*/		return 0x821EA978;
		  /* 821EA978h */ case    1:  		/* bc 12, CR6_EQ, 272 */
		/* 821EA978h case    1:*/		if ( regs.CR[6].eq ) { return 0x821EAA88;  }
		/* 821EA978h case    1:*/		return 0x821EA97C;
		  /* 821EA97Ch */ case    2:  		/* lwz R10, <#[R5 + 48]> */
		/* 821EA97Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000030) );
		/* 821EA97Ch case    2:*/		return 0x821EA980;
		  /* 821EA980h */ case    3:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 821EA980h case    3:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 821EA980h case    3:*/		return 0x821EA984;
		  /* 821EA984h */ case    4:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 821EA984h case    4:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 821EA984h case    4:*/		return 0x821EA988;
		  /* 821EA988h */ case    5:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821EA988h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821EA988h case    5:*/		return 0x821EA98C;
		  /* 821EA98Ch */ case    6:  		/* addi R10, R10, 1 */
		/* 821EA98Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EA98Ch case    6:*/		return 0x821EA990;
		  /* 821EA990h */ case    7:  		/* slw R9, R24, R9 */
		/* 821EA990h case    7:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R24,regs.R9);
		/* 821EA990h case    7:*/		return 0x821EA994;
		  /* 821EA994h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821EA994h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821EA994h case    8:*/		return 0x821EA998;
		  /* 821EA998h */ case    9:  		/* lwzx R10, <#[R10 + R29]> */
		/* 821EA998h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 821EA998h case    9:*/		return 0x821EA99C;
		  /* 821EA99Ch */ case   10:  		/* and. R10, R9, R10 */
		/* 821EA99Ch case   10:*/		cpu::op::and<1>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821EA99Ch case   10:*/		return 0x821EA9A0;
		  /* 821EA9A0h */ case   11:  		/* bc 4, CR0_EQ, 232 */
		/* 821EA9A0h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821EAA88;  }
		/* 821EA9A0h case   11:*/		return 0x821EA9A4;
		  /* 821EA9A4h */ case   12:  		/* lwz R10, <#[R11 + 48]> */
		/* 821EA9A4h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821EA9A4h case   12:*/		return 0x821EA9A8;
		  /* 821EA9A8h */ case   13:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 821EA9A8h case   13:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 821EA9A8h case   13:*/		return 0x821EA9AC;
		  /* 821EA9ACh */ case   14:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 821EA9ACh case   14:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 821EA9ACh case   14:*/		return 0x821EA9B0;
		  /* 821EA9B0h */ case   15:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821EA9B0h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821EA9B0h case   15:*/		return 0x821EA9B4;
		  /* 821EA9B4h */ case   16:  		/* addi R10, R10, 1 */
		/* 821EA9B4h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EA9B4h case   16:*/		return 0x821EA9B8;
		  /* 821EA9B8h */ case   17:  		/* slw R9, R24, R9 */
		/* 821EA9B8h case   17:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R24,regs.R9);
		/* 821EA9B8h case   17:*/		return 0x821EA9BC;
		  /* 821EA9BCh */ case   18:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821EA9BCh case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821EA9BCh case   18:*/		return 0x821EA9C0;
		  /* 821EA9C0h */ case   19:  		/* lwzx R10, <#[R10 + R29]> */
		/* 821EA9C0h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 821EA9C0h case   19:*/		return 0x821EA9C4;
		  /* 821EA9C4h */ case   20:  		/* and. R10, R9, R10 */
		/* 821EA9C4h case   20:*/		cpu::op::and<1>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821EA9C4h case   20:*/		return 0x821EA9C8;
		  /* 821EA9C8h */ case   21:  		/* bc 4, CR0_EQ, 192 */
		/* 821EA9C8h case   21:*/		if ( !regs.CR[0].eq ) { return 0x821EAA88;  }
		/* 821EA9C8h case   21:*/		return 0x821EA9CC;
		  /* 821EA9CCh */ case   22:  		/* lwz R10, <#[R28 + 40]> */
		/* 821EA9CCh case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000028) );
		/* 821EA9CCh case   22:*/		return 0x821EA9D0;
		  /* 821EA9D0h */ case   23:  		/* lwz R9, <#[R10]> */
		/* 821EA9D0h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821EA9D0h case   23:*/		return 0x821EA9D4;
		  /* 821EA9D4h */ case   24:  		/* oris R9, R9, 8 */
		/* 821EA9D4h case   24:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x8);
		/* 821EA9D4h case   24:*/		return 0x821EA9D8;
		  /* 821EA9D8h */ case   25:  		/* stw R9, <#[R10]> */
		/* 821EA9D8h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821EA9D8h case   25:*/		return 0x821EA9DC;
		  /* 821EA9DCh */ case   26:  		/* lwz R10, <#[R8 + 12]> */
		/* 821EA9DCh case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000000C) );
		/* 821EA9DCh case   26:*/		return 0x821EA9E0;
		  /* 821EA9E0h */ case   27:  		/* rlwinm R10, R10, 31, 31, 31 */
		/* 821EA9E0h case   27:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R10,regs.R10);
		/* 821EA9E0h case   27:*/		return 0x821EA9E4;
		  /* 821EA9E4h */ case   28:  		/* lwz R8, <#[R11 + 40]> */
		/* 821EA9E4h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000028) );
		/* 821EA9E4h case   28:*/		return 0x821EA9E8;
		  /* 821EA9E8h */ case   29:  		/* lwz R11, <#[R28 + 48]> */
		/* 821EA9E8h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 821EA9E8h case   29:*/		return 0x821EA9EC;
		  /* 821EA9ECh */ case   30:  		/* rlwinm R9, R11, 1, 12, 30 */
		/* 821EA9ECh case   30:*/		cpu::op::rlwinm<0,1,12,30>(regs,&regs.R9,regs.R11);
		/* 821EA9ECh case   30:*/		return 0x821EA9F0;
		  /* 821EA9F0h */ case   31:  		/* lwz R11, <#[R8]> */
		/* 821EA9F0h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821EA9F0h case   31:*/		return 0x821EA9F4;
		  /* 821EA9F4h */ case   32:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821EA9F4h case   32:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821EA9F4h case   32:*/		return 0x821EA9F8;
		  /* 821EA9F8h */ case   33:  		/* addi R7, R11, 31 */
		/* 821EA9F8h case   33:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x1F);
		/* 821EA9F8h case   33:*/		return 0x821EA9FC;
		  /* 821EA9FCh */ case   34:  		/* add R11, R9, R10 */
		/* 821EA9FCh case   34:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R10);
		/* 821EA9FCh case   34:*/		return 0x821EAA00;
		  /* 821EAA00h */ case   35:  		/* rlwinm R7, R7, 29, 3, 29 */
		/* 821EAA00h case   35:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R7,regs.R7);
		/* 821EAA00h case   35:*/		return 0x821EAA04;
		  /* 821EAA04h */ case   36:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821EAA04h case   36:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821EAA04h case   36:*/		return 0x821EAA08;
		  /* 821EAA08h */ case   37:  		/* addi R6, R7, 2 */
		/* 821EAA08h case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R7,0x2);
		/* 821EAA08h case   37:*/		return 0x821EAA0C;
		  /* 821EAA0Ch */ case   38:  		/* rlwinm R7, R11, 29, 3, 29 */
		/* 821EAA0Ch case   38:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R7,regs.R11);
		/* 821EAA0Ch case   38:*/		return 0x821EAA10;
		  /* 821EAA10h */ case   39:  		/* rlwinm R6, R6, 1, 0, 30 */
		/* 821EAA10h case   39:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R6,regs.R6);
		/* 821EAA10h case   39:*/		return 0x821EAA14;
		  /* 821EAA14h */ case   40:  		/* subf R10, R10, R9 */
		/* 821EAA14h case   40:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821EAA14h case   40:*/		return 0x821EAA18;
		  /* 821EAA18h */ case   41:  		/* add R11, R6, R8 */
		/* 821EAA18h case   41:*/		cpu::op::add<0>(regs,&regs.R11,regs.R6,regs.R8);
		/* 821EAA18h case   41:*/		return 0x821EAA1C;
		  /* 821EAA1Ch */ case   42:  		/* slw R8, R24, R4 */
		/* 821EAA1Ch case   42:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R4);
		/* 821EAA1Ch case   42:*/		return 0x821EAA20;
		  /* 821EAA20h */ case   43:  		/* lwzx R9, <#[R7 + R11]> */
		/* 821EAA20h case   43:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 821EAA20h case   43:*/		return 0x821EAA24;
		  /* 821EAA24h */ case   44:  		/* and. R9, R9, R8 */
		/* 821EAA24h case   44:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821EAA24h case   44:*/		return 0x821EAA28;
		  /* 821EAA28h */ case   45:  		/* addi R10, R10, 1 */
		/* 821EAA28h case   45:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EAA28h case   45:*/		return 0x821EAA2C;
		  /* 821EAA2Ch */ case   46:  		/* bc 4, CR0_EQ, 20 */
		/* 821EAA2Ch case   46:*/		if ( !regs.CR[0].eq ) { return 0x821EAA40;  }
		/* 821EAA2Ch case   46:*/		return 0x821EAA30;
		  /* 821EAA30h */ case   47:  		/* lwzx R9, <#[R7 + R11]> */
		/* 821EAA30h case   47:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 821EAA30h case   47:*/		return 0x821EAA34;
		  /* 821EAA34h */ case   48:  		/* mr R26, R24 */
		/* 821EAA34h case   48:*/		regs.R26 = regs.R24;
		/* 821EAA34h case   48:*/		return 0x821EAA38;
		  /* 821EAA38h */ case   49:  		/* or R9, R9, R8 */
		/* 821EAA38h case   49:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821EAA38h case   49:*/		return 0x821EAA3C;
		  /* 821EAA3Ch */ case   50:  		/* stwx R9, <#[R7 + R11]> */
		/* 821EAA3Ch case   50:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 821EAA3Ch case   50:*/		return 0x821EAA40;
	}
	return 0x821EAA40;
} // Block from 821EA974h-821EAA40h (51 instructions)

//////////////////////////////////////////////////////
// Block at 821EAA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAA40);
		  /* 821EAA40h */ case    0:  		/* lwz R11, <#[R5 + 40]> */
		/* 821EAA40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000028) );
		/* 821EAA40h case    0:*/		return 0x821EAA44;
		  /* 821EAA44h */ case    1:  		/* rlwinm R9, R10, 29, 3, 29 */
		/* 821EAA44h case    1:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R10);
		/* 821EAA44h case    1:*/		return 0x821EAA48;
		  /* 821EAA48h */ case    2:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821EAA48h case    2:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821EAA48h case    2:*/		return 0x821EAA4C;
		  /* 821EAA4Ch */ case    3:  		/* slw R10, R24, R10 */
		/* 821EAA4Ch case    3:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R10);
		/* 821EAA4Ch case    3:*/		return 0x821EAA50;
		  /* 821EAA50h */ case    4:  		/* lwz R8, <#[R11]> */
		/* 821EAA50h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821EAA50h case    4:*/		return 0x821EAA54;
		  /* 821EAA54h */ case    5:  		/* rlwinm R8, R8, 0, 13, 31 */
		/* 821EAA54h case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R8);
		/* 821EAA54h case    5:*/		return 0x821EAA58;
		  /* 821EAA58h */ case    6:  		/* addi R8, R8, 31 */
		/* 821EAA58h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1F);
		/* 821EAA58h case    6:*/		return 0x821EAA5C;
		  /* 821EAA5Ch */ case    7:  		/* rlwinm R8, R8, 29, 3, 29 */
		/* 821EAA5Ch case    7:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R8,regs.R8);
		/* 821EAA5Ch case    7:*/		return 0x821EAA60;
		  /* 821EAA60h */ case    8:  		/* addi R8, R8, 2 */
		/* 821EAA60h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x2);
		/* 821EAA60h case    8:*/		return 0x821EAA64;
		  /* 821EAA64h */ case    9:  		/* rlwinm R8, R8, 1, 0, 30 */
		/* 821EAA64h case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R8);
		/* 821EAA64h case    9:*/		return 0x821EAA68;
		  /* 821EAA68h */ case   10:  		/* add R11, R8, R11 */
		/* 821EAA68h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821EAA68h case   10:*/		return 0x821EAA6C;
		  /* 821EAA6Ch */ case   11:  		/* lwzx R8, <#[R9 + R11]> */
		/* 821EAA6Ch case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821EAA6Ch case   11:*/		return 0x821EAA70;
		  /* 821EAA70h */ case   12:  		/* and. R8, R10, R8 */
		/* 821EAA70h case   12:*/		cpu::op::and<1>(regs,&regs.R8,regs.R10,regs.R8);
		/* 821EAA70h case   12:*/		return 0x821EAA74;
		  /* 821EAA74h */ case   13:  		/* bc 4, CR0_EQ, 20 */
		/* 821EAA74h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821EAA88;  }
		/* 821EAA74h case   13:*/		return 0x821EAA78;
		  /* 821EAA78h */ case   14:  		/* lwzx R8, <#[R9 + R11]> */
		/* 821EAA78h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821EAA78h case   14:*/		return 0x821EAA7C;
		  /* 821EAA7Ch */ case   15:  		/* mr R26, R24 */
		/* 821EAA7Ch case   15:*/		regs.R26 = regs.R24;
		/* 821EAA7Ch case   15:*/		return 0x821EAA80;
		  /* 821EAA80h */ case   16:  		/* or R10, R10, R8 */
		/* 821EAA80h case   16:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821EAA80h case   16:*/		return 0x821EAA84;
		  /* 821EAA84h */ case   17:  		/* stwx R10, <#[R9 + R11]> */
		/* 821EAA84h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821EAA84h case   17:*/		return 0x821EAA88;
	}
	return 0x821EAA88;
} // Block from 821EAA40h-821EAA88h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821EAA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAA88);
		  /* 821EAA88h */ case    0:  		/* lwz R27, <#[R28 + 12]> */
		/* 821EAA88h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R28 + 0x0000000C) );
		/* 821EAA88h case    0:*/		return 0x821EAA8C;
		  /* 821EAA8Ch */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 821EAA8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821EAA8Ch case    1:*/		return 0x821EAA90;
		  /* 821EAA90h */ case    2:  		/* bc 12, CR6_EQ, 376 */
		/* 821EAA90h case    2:*/		if ( regs.CR[6].eq ) { return 0x821EAC08;  }
		/* 821EAA90h case    2:*/		return 0x821EAA94;
		  /* 821EAA94h */ case    3:  		/* lwz R29, <#[R27]> */
		/* 821EAA94h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + 0x00000000) );
		/* 821EAA94h case    3:*/		return 0x821EAA98;
		  /* 821EAA98h */ case    4:  		/* lwz R9, <#[R28 + 40]> */
		/* 821EAA98h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000028) );
		/* 821EAA98h case    4:*/		return 0x821EAA9C;
		  /* 821EAA9Ch */ case    5:  		/* lwz R11, <#[R29 + 48]> */
		/* 821EAA9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821EAA9Ch case    5:*/		return 0x821EAAA0;
		  /* 821EAAA0h */ case    6:  		/* rlwinm R10, R11, 27, 18, 31 */
		/* 821EAAA0h case    6:*/		cpu::op::rlwinm<0,27,18,31>(regs,&regs.R10,regs.R11);
		/* 821EAAA0h case    6:*/		return 0x821EAAA4;
		  /* 821EAAA4h */ case    7:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 821EAAA4h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 821EAAA4h case    7:*/		return 0x821EAAA8;
		  /* 821EAAA8h */ case    8:  		/* addi R10, R10, 1 */
		/* 821EAAA8h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EAAA8h case    8:*/		return 0x821EAAAC;
		  /* 821EAAACh */ case    9:  		/* slw R8, R24, R8 */
		/* 821EAAACh case    9:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R8);
		/* 821EAAACh case    9:*/		return 0x821EAAB0;
		  /* 821EAAB0h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821EAAB0h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821EAAB0h case   10:*/		return 0x821EAAB4;
		  /* 821EAAB4h */ case   11:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821EAAB4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821EAAB4h case   11:*/		return 0x821EAAB8;
		  /* 821EAAB8h */ case   12:  		/* and. R10, R8, R10 */
		/* 821EAAB8h case   12:*/		cpu::op::and<1>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821EAAB8h case   12:*/		return 0x821EAABC;
		  /* 821EAABCh */ case   13:  		/* bc 4, CR0_EQ, 324 */
		/* 821EAABCh case   13:*/		if ( !regs.CR[0].eq ) { return 0x821EAC00;  }
		/* 821EAABCh case   13:*/		return 0x821EAAC0;
		  /* 821EAAC0h */ case   14:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821EAAC0h case   14:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821EAAC0h case   14:*/		return 0x821EAAC4;
		  /* 821EAAC4h */ case   15:  		/* bc 4, CR0_EQ, 316 */
		/* 821EAAC4h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821EAC00;  }
		/* 821EAAC4h case   15:*/		return 0x821EAAC8;
		  /* 821EAAC8h */ case   16:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 821EAAC8h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 821EAAC8h case   16:*/		return 0x821EAACC;
		  /* 821EAACCh */ case   17:  		/* stw R31, <#[R1 + 88]> */
		/* 821EAACCh case   17:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000058) );
		/* 821EAACCh case   17:*/		return 0x821EAAD0;
		  /* 821EAAD0h */ case   18:  		/* addi R10, R25, 2 */
		/* 821EAAD0h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R25,0x2);
		/* 821EAAD0h case   18:*/		return 0x821EAAD4;
		  /* 821EAAD4h */ case   19:  		/* mr R3, R31 */
		/* 821EAAD4h case   19:*/		regs.R3 = regs.R31;
		/* 821EAAD4h case   19:*/		return 0x821EAAD8;
		  /* 821EAAD8h */ case   20:  		/* addi R9, R10, 31 */
		/* 821EAAD8h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x1F);
		/* 821EAAD8h case   20:*/		return 0x821EAADC;
		  /* 821EAADCh */ case   21:  		/* stw R10, <#[R1 + 92]> */
		/* 821EAADCh case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821EAADCh case   21:*/		return 0x821EAAE0;
		  /* 821EAAE0h */ case   22:  		/* lwz R10, <#[R11]> */
		/* 821EAAE0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EAAE0h case   22:*/		return 0x821EAAE4;
		  /* 821EAAE4h */ case   23:  		/* rlwinm R30, R9, 29, 3, 29 */
		/* 821EAAE4h case   23:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R30,regs.R9);
		/* 821EAAE4h case   23:*/		return 0x821EAAE8;
		  /* 821EAAE8h */ case   24:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 821EAAE8h case   24:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 821EAAE8h case   24:*/		return 0x821EAAEC;
		  /* 821EAAECh */ case   25:  		/* mr R5, R30 */
		/* 821EAAECh case   25:*/		regs.R5 = regs.R30;
		/* 821EAAECh case   25:*/		return 0x821EAAF0;
		  /* 821EAAF0h */ case   26:  		/* addi R10, R9, 31 */
		/* 821EAAF0h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x1F);
		/* 821EAAF0h case   26:*/		return 0x821EAAF4;
		  /* 821EAAF4h */ case   27:  		/* rlwinm R9, R10, 29, 3, 29 */
		/* 821EAAF4h case   27:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R10);
		/* 821EAAF4h case   27:*/		return 0x821EAAF8;
		  /* 821EAAF8h */ case   28:  		/* addi R10, R9, 2 */
		/* 821EAAF8h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x2);
		/* 821EAAF8h case   28:*/		return 0x821EAAFC;
		  /* 821EAAFCh */ case   29:  		/* rlwinm R9, R10, 1, 0, 30 */
		/* 821EAAFCh case   29:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821EAAFCh case   29:*/		return 0x821EAB00;
		  /* 821EAB00h */ case   30:  		/* add R4, R9, R11 */
		/* 821EAB00h case   30:*/		cpu::op::add<0>(regs,&regs.R4,regs.R9,regs.R11);
		/* 821EAB00h case   30:*/		return 0x821EAB04;
		  /* 821EAB04h */ case   31:  		/* bl -1413460 */
		/* 821EAB04h case   31:*/		regs.LR = 0x821EAB08; return 0x820919B0;
		/* 821EAB04h case   31:*/		return 0x821EAB08;
		  /* 821EAB08h */ case   32:  		/* lwz R11, <#[R28 + 48]> */
		/* 821EAB08h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 821EAB08h case   32:*/		return 0x821EAB0C;
		  /* 821EAB0Ch */ case   33:  		/* addi R3, R1, 88 */
		/* 821EAB0Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 821EAB0Ch case   33:*/		return 0x821EAB10;
		  /* 821EAB10h */ case   34:  		/* rlwinm R10, R11, 1, 12, 30 */
		/* 821EAB10h case   34:*/		cpu::op::rlwinm<0,1,12,30>(regs,&regs.R10,regs.R11);
		/* 821EAB10h case   34:*/		return 0x821EAB14;
		  /* 821EAB14h */ case   35:  		/* rlwinm R11, R10, 29, 3, 29 */
		/* 821EAB14h case   35:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R10);
		/* 821EAB14h case   35:*/		return 0x821EAB18;
		  /* 821EAB18h */ case   36:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821EAB18h case   36:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821EAB18h case   36:*/		return 0x821EAB1C;
		  /* 821EAB1Ch */ case   37:  		/* slw R10, R24, R10 */
		/* 821EAB1Ch case   37:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R10);
		/* 821EAB1Ch case   37:*/		return 0x821EAB20;
		  /* 821EAB20h */ case   38:  		/* lwzx R9, <#[R11 + R31]> */
		/* 821EAB20h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821EAB20h case   38:*/		return 0x821EAB24;
		  /* 821EAB24h */ case   39:  		/* andc R10, R9, R10 */
		/* 821EAB24h case   39:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821EAB24h case   39:*/		return 0x821EAB28;
		  /* 821EAB28h */ case   40:  		/* stwx R10, <#[R11 + R31]> */
		/* 821EAB28h case   40:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821EAB28h case   40:*/		return 0x821EAB2C;
		  /* 821EAB2Ch */ case   41:  		/* lwz R11, <#[R28 + 48]> */
		/* 821EAB2Ch case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 821EAB2Ch case   41:*/		return 0x821EAB30;
		  /* 821EAB30h */ case   42:  		/* rlwinm R11, R11, 1, 12, 30 */
		/* 821EAB30h case   42:*/		cpu::op::rlwinm<0,1,12,30>(regs,&regs.R11,regs.R11);
		/* 821EAB30h case   42:*/		return 0x821EAB34;
		  /* 821EAB34h */ case   43:  		/* addi R11, R11, 1 */
		/* 821EAB34h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821EAB34h case   43:*/		return 0x821EAB38;
		  /* 821EAB38h */ case   44:  		/* rlwinm R10, R11, 29, 3, 29 */
		/* 821EAB38h case   44:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R11);
		/* 821EAB38h case   44:*/		return 0x821EAB3C;
		  /* 821EAB3Ch */ case   45:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821EAB3Ch case   45:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821EAB3Ch case   45:*/		return 0x821EAB40;
		  /* 821EAB40h */ case   46:  		/* slw R11, R24, R11 */
		/* 821EAB40h case   46:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R24,regs.R11);
		/* 821EAB40h case   46:*/		return 0x821EAB44;
		  /* 821EAB44h */ case   47:  		/* lwzx R9, <#[R10 + R31]> */
		/* 821EAB44h case   47:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821EAB44h case   47:*/		return 0x821EAB48;
		  /* 821EAB48h */ case   48:  		/* andc R11, R9, R11 */
		/* 821EAB48h case   48:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821EAB48h case   48:*/		return 0x821EAB4C;
		  /* 821EAB4Ch */ case   49:  		/* stwx R11, <#[R10 + R31]> */
		/* 821EAB4Ch case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821EAB4Ch case   49:*/		return 0x821EAB50;
		  /* 821EAB50h */ case   50:  		/* lwz R11, <#[R29 + 40]> */
		/* 821EAB50h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 821EAB50h case   50:*/		return 0x821EAB54;
		  /* 821EAB54h */ case   51:  		/* lwz R10, <#[R11]> */
		/* 821EAB54h case   51:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EAB54h case   51:*/		return 0x821EAB58;
		  /* 821EAB58h */ case   52:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821EAB58h case   52:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821EAB58h case   52:*/		return 0x821EAB5C;
		  /* 821EAB5Ch */ case   53:  		/* addi R10, R10, 31 */
		/* 821EAB5Ch case   53:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EAB5Ch case   53:*/		return 0x821EAB60;
		  /* 821EAB60h */ case   54:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EAB60h case   54:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EAB60h case   54:*/		return 0x821EAB64;
		  /* 821EAB64h */ case   55:  		/* addi R10, R10, 2 */
		/* 821EAB64h case   55:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821EAB64h case   55:*/		return 0x821EAB68;
		  /* 821EAB68h */ case   56:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821EAB68h case   56:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821EAB68h case   56:*/		return 0x821EAB6C;
		  /* 821EAB6Ch */ case   57:  		/* add R4, R10, R11 */
		/* 821EAB6Ch case   57:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 821EAB6Ch case   57:*/		return 0x821EAB70;
		  /* 821EAB70h */ case   58:  		/* bl -2200 */
		/* 821EAB70h case   58:*/		regs.LR = 0x821EAB74; return 0x821EA2D8;
		/* 821EAB70h case   58:*/		return 0x821EAB74;
		  /* 821EAB74h */ case   59:  		/* lwz R11, <#[R29 + 40]> */
		/* 821EAB74h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 821EAB74h case   59:*/		return 0x821EAB78;
	}
	return 0x821EAB78;
} // Block from 821EAA88h-821EAB78h (60 instructions)

//////////////////////////////////////////////////////
// Block at 821EAB78h
// Function '??$FindSetBitInArray@I@D3DXShader@@YAIPAIIK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAB78);
		  /* 821EAB78h */ case    0:  		/* mr R9, R31 */
		/* 821EAB78h case    0:*/		regs.R9 = regs.R31;
		/* 821EAB78h case    0:*/		return 0x821EAB7C;
		  /* 821EAB7Ch */ case    1:  		/* mr R8, R17 */
		/* 821EAB7Ch case    1:*/		regs.R8 = regs.R17;
		/* 821EAB7Ch case    1:*/		return 0x821EAB80;
		  /* 821EAB80h */ case    2:  		/* cmplwi CR0, R30, 0 */
		/* 821EAB80h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 821EAB80h case    2:*/		return 0x821EAB84;
		  /* 821EAB84h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 821EAB84h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EAB84h case    3:*/		return 0x821EAB88;
		  /* 821EAB88h */ case    4:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821EAB88h case    4:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821EAB88h case    4:*/		return 0x821EAB8C;
		  /* 821EAB8Ch */ case    5:  		/* addi R10, R10, 31 */
		/* 821EAB8Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EAB8Ch case    5:*/		return 0x821EAB90;
		  /* 821EAB90h */ case    6:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EAB90h case    6:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EAB90h case    6:*/		return 0x821EAB94;
		  /* 821EAB94h */ case    7:  		/* addi R10, R10, 2 */
		/* 821EAB94h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821EAB94h case    7:*/		return 0x821EAB98;
		  /* 821EAB98h */ case    8:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821EAB98h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821EAB98h case    8:*/		return 0x821EAB9C;
		  /* 821EAB9Ch */ case    9:  		/* add R11, R10, R11 */
		/* 821EAB9Ch case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EAB9Ch case    9:*/		return 0x821EABA0;
		  /* 821EABA0h */ case   10:  		/* bc 12, CR0_EQ, 40 */
		/* 821EABA0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821EABC8;  }
		/* 821EABA0h case   10:*/		return 0x821EABA4;
		  /* 821EABA4h */ case   11:  		/* add R10, R11, R30 */
		/* 821EABA4h case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R30);
		/* 821EABA4h case   11:*/		return 0x821EABA8;
		  /* 821EABA8h */ case   12:  		/* lbz R8, <#[R11]> */
		/* 821EABA8h case   12:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821EABA8h case   12:*/		return 0x821EABAC;
		  /* 821EABACh */ case   13:  		/* lbz R7, <#[R9]> */
		/* 821EABACh case   13:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821EABACh case   13:*/		return 0x821EABB0;
		  /* 821EABB0h */ case   14:  		/* subf. R8, R7, R8 */
		/* 821EABB0h case   14:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821EABB0h case   14:*/		return 0x821EABB4;
		  /* 821EABB4h */ case   15:  		/* bc 4, CR0_EQ, 20 */
		/* 821EABB4h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821EABC8;  }
		/* 821EABB4h case   15:*/		return 0x821EABB8;
		  /* 821EABB8h */ case   16:  		/* addi R11, R11, 1 */
		/* 821EABB8h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821EABB8h case   16:*/		return 0x821EABBC;
		  /* 821EABBCh */ case   17:  		/* addi R9, R9, 1 */
		/* 821EABBCh case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821EABBCh case   17:*/		return 0x821EABC0;
		  /* 821EABC0h */ case   18:  		/* cmpw CR6, R11, R10 */
		/* 821EABC0h case   18:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821EABC0h case   18:*/		return 0x821EABC4;
		  /* 821EABC4h */ case   19:  		/* bc 4, CR6_EQ, -28 */
		/* 821EABC4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821EABA8;  }
		/* 821EABC4h case   19:*/		return 0x821EABC8;
	}
	return 0x821EABC8;
} // Block from 821EAB78h-821EABC8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821EABC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EABC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EABC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EABC8);
		  /* 821EABC8h */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 821EABC8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 821EABC8h case    0:*/		return 0x821EABCC;
		  /* 821EABCCh */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821EABCCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821EAC00;  }
		/* 821EABCCh case    1:*/		return 0x821EABD0;
		  /* 821EABD0h */ case    2:  		/* lwz R11, <#[R29 + 40]> */
		/* 821EABD0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 821EABD0h case    2:*/		return 0x821EABD4;
		  /* 821EABD4h */ case    3:  		/* mr R5, R30 */
		/* 821EABD4h case    3:*/		regs.R5 = regs.R30;
		/* 821EABD4h case    3:*/		return 0x821EABD8;
		  /* 821EABD8h */ case    4:  		/* mr R4, R31 */
		/* 821EABD8h case    4:*/		regs.R4 = regs.R31;
		/* 821EABD8h case    4:*/		return 0x821EABDC;
		  /* 821EABDCh */ case    5:  		/* lwz R10, <#[R11]> */
		/* 821EABDCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EABDCh case    5:*/		return 0x821EABE0;
		  /* 821EABE0h */ case    6:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821EABE0h case    6:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821EABE0h case    6:*/		return 0x821EABE4;
		  /* 821EABE4h */ case    7:  		/* addi R10, R10, 31 */
		/* 821EABE4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EABE4h case    7:*/		return 0x821EABE8;
		  /* 821EABE8h */ case    8:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EABE8h case    8:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EABE8h case    8:*/		return 0x821EABEC;
		  /* 821EABECh */ case    9:  		/* addi R10, R10, 2 */
		/* 821EABECh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821EABECh case    9:*/		return 0x821EABF0;
		  /* 821EABF0h */ case   10:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821EABF0h case   10:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821EABF0h case   10:*/		return 0x821EABF4;
		  /* 821EABF4h */ case   11:  		/* add R3, R10, R11 */
		/* 821EABF4h case   11:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 821EABF4h case   11:*/		return 0x821EABF8;
		  /* 821EABF8h */ case   12:  		/* bl -1413704 */
		/* 821EABF8h case   12:*/		regs.LR = 0x821EABFC; return 0x820919B0;
		/* 821EABF8h case   12:*/		return 0x821EABFC;
		  /* 821EABFCh */ case   13:  		/* mr R26, R24 */
		/* 821EABFCh case   13:*/		regs.R26 = regs.R24;
		/* 821EABFCh case   13:*/		return 0x821EAC00;
	}
	return 0x821EAC00;
} // Block from 821EABC8h-821EAC00h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821EAC00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAC00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAC00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAC00);
		  /* 821EAC00h */ case    0:  		/* lwz R27, <#[R27 + 8]> */
		/* 821EAC00h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R27 + 0x00000008) );
		/* 821EAC00h case    0:*/		return 0x821EAC04;
		  /* 821EAC04h */ case    1:  		/* b -376 */
		/* 821EAC04h case    1:*/		return 0x821EAA8C;
		/* 821EAC04h case    1:*/		return 0x821EAC08;
	}
	return 0x821EAC08;
} // Block from 821EAC00h-821EAC08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EAC08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAC08);
		  /* 821EAC08h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821EAC08h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821EAC08h case    0:*/		return 0x821EAC0C;
		  /* 821EAC0Ch */ case    1:  		/* lwz R28, <#[R11 + 4]> */
		/* 821EAC0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000004) );
		/* 821EAC0Ch case    1:*/		return 0x821EAC10;
	}
	return 0x821EAC10;
} // Block from 821EAC08h-821EAC10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EAC10h
// Function '??$SetAllBitsInArray@I@D3DXShader@@YAXPAII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAC10);
		  /* 821EAC10h */ case    0:  		/* rlwinm. R11, R28, 0, 31, 31 */
		/* 821EAC10h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R28);
		/* 821EAC10h case    0:*/		return 0x821EAC14;
		  /* 821EAC14h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821EAC14h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821EAC20;  }
		/* 821EAC14h case    1:*/		return 0x821EAC18;
		  /* 821EAC18h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 821EAC18h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821EAC18h case    2:*/		return 0x821EAC1C;
		  /* 821EAC1Ch */ case    3:  		/* bc 4, CR6_EQ, -976 */
		/* 821EAC1Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821EA84C;  }
		/* 821EAC1Ch case    3:*/		return 0x821EAC20;
	}
	return 0x821EAC20;
} // Block from 821EAC10h-821EAC20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821EAC20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAC20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAC20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAC20);
		  /* 821EAC20h */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821EAC20h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821EAC20h case    0:*/		return 0x821EAC24;
		  /* 821EAC24h */ case    1:  		/* bc 4, CR0_EQ, -1008 */
		/* 821EAC24h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821EA834;  }
		/* 821EAC24h case    1:*/		return 0x821EAC28;
		  /* 821EAC28h */ case    2:  		/* lwz R11, <#[R20 + 4]> */
		/* 821EAC28h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821EAC28h case    2:*/		return 0x821EAC2C;
		  /* 821EAC2Ch */ case    3:  		/* li R23, 2 */
		/* 821EAC2Ch case    3:*/		cpu::op::li<0>(regs,&regs.R23,0x2);
		/* 821EAC2Ch case    3:*/		return 0x821EAC30;
		  /* 821EAC30h */ case    4:  		/* li R22, -1 */
		/* 821EAC30h case    4:*/		cpu::op::li<0>(regs,&regs.R22,0xFFFFFFFF);
		/* 821EAC30h case    4:*/		return 0x821EAC34;
		  /* 821EAC34h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EAC34h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EAC34h case    5:*/		return 0x821EAC38;
		  /* 821EAC38h */ case    6:  		/* bc 4, CR0_EQ, 824 */
		/* 821EAC38h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821EAF70;  }
		/* 821EAC38h case    6:*/		return 0x821EAC3C;
		  /* 821EAC3Ch */ case    7:  		/* mr R5, R11 */
		/* 821EAC3Ch case    7:*/		regs.R5 = regs.R11;
		/* 821EAC3Ch case    7:*/		return 0x821EAC40;
		  /* 821EAC40h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821EAC40h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821EAC40h case    8:*/		return 0x821EAC44;
		  /* 821EAC44h */ case    9:  		/* bc 12, CR0_EQ, 812 */
		/* 821EAC44h case    9:*/		if ( regs.CR[0].eq ) { return 0x821EAF70;  }
		/* 821EAC44h case    9:*/		return 0x821EAC48;
		  /* 821EAC48h */ case   10:  		/* lwz R11, <#[R5 + 40]> */
		/* 821EAC48h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000028) );
		/* 821EAC48h case   10:*/		return 0x821EAC4C;
		  /* 821EAC4Ch */ case   11:  		/* lwz R11, <#[R11]> */
		/* 821EAC4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821EAC4Ch case   11:*/		return 0x821EAC50;
		  /* 821EAC50h */ case   12:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821EAC50h case   12:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821EAC50h case   12:*/		return 0x821EAC54;
		  /* 821EAC54h */ case   13:  		/* bc 12, CR0_EQ, 316 */
		/* 821EAC54h case   13:*/		if ( regs.CR[0].eq ) { return 0x821EAD90;  }
		/* 821EAC54h case   13:*/		return 0x821EAC58;
		  /* 821EAC58h */ case   14:  		/* lwz R4, <#[R5 + 8]> */
		/* 821EAC58h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x00000008) );
		/* 821EAC58h case   14:*/		return 0x821EAC5C;
		  /* 821EAC5Ch */ case   15:  		/* cmplwi CR6, R4, 0 */
		/* 821EAC5Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821EAC5Ch case   15:*/		return 0x821EAC60;
		  /* 821EAC60h */ case   16:  		/* bc 12, CR6_EQ, 304 */
		/* 821EAC60h case   16:*/		if ( regs.CR[6].eq ) { return 0x821EAD90;  }
		/* 821EAC60h case   16:*/		return 0x821EAC64;
		  /* 821EAC64h */ case   17:  		/* lwz R11, <#[R5 + 48]> */
		/* 821EAC64h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000030) );
		/* 821EAC64h case   17:*/		return 0x821EAC68;
		  /* 821EAC68h */ case   18:  		/* lwz R10, <#[R4 + 4]> */
		/* 821EAC68h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 821EAC68h case   18:*/		return 0x821EAC6C;
		  /* 821EAC6Ch */ case   19:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821EAC6Ch case   19:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821EAC6Ch case   19:*/		return 0x821EAC70;
	}
	return 0x821EAC70;
} // Block from 821EAC20h-821EAC70h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821EAC70h
// Function '?Or@?$DynamicBitSet@I$1?AllocInContext@CompilerHeap@D3DXShader@@SAPAXPAXK@Z$1?FreeInContext@23@SAX00K@Z@D3DXShader@@QAAXPAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAC70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAC70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAC70);
		  /* 821EAC70h */ case    0:  		/* rlwinm R9, R11, 27, 5, 31 */
		/* 821EAC70h case    0:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R11);
		/* 821EAC70h case    0:*/		return 0x821EAC74;
		  /* 821EAC74h */ case    1:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 821EAC74h case    1:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 821EAC74h case    1:*/		return 0x821EAC78;
		  /* 821EAC78h */ case    2:  		/* addi R9, R9, 1 */
		/* 821EAC78h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821EAC78h case    2:*/		return 0x821EAC7C;
		  /* 821EAC7Ch */ case    3:  		/* lwz R7, <#[R10 + 40]> */
		/* 821EAC7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000028) );
		/* 821EAC7Ch case    3:*/		return 0x821EAC80;
		  /* 821EAC80h */ case    4:  		/* slw R8, R24, R8 */
		/* 821EAC80h case    4:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R8);
		/* 821EAC80h case    4:*/		return 0x821EAC84;
		  /* 821EAC84h */ case    5:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821EAC84h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821EAC84h case    5:*/		return 0x821EAC88;
		  /* 821EAC88h */ case    6:  		/* lwzx R9, <#[R9 + R7]> */
		/* 821EAC88h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 821EAC88h case    6:*/		return 0x821EAC8C;
		  /* 821EAC8Ch */ case    7:  		/* and. R9, R8, R9 */
		/* 821EAC8Ch case    7:*/		cpu::op::and<1>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821EAC8Ch case    7:*/		return 0x821EAC90;
		  /* 821EAC90h */ case    8:  		/* bc 12, CR0_EQ, 248 */
		/* 821EAC90h case    8:*/		if ( regs.CR[0].eq ) { return 0x821EAD88;  }
		/* 821EAC90h case    8:*/		return 0x821EAC94;
		  /* 821EAC94h */ case    9:  		/* lwz R9, <#[R10 + 12]> */
		/* 821EAC94h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 821EAC94h case    9:*/		return 0x821EAC98;
		  /* 821EAC98h */ case   10:  		/* cmplwi CR6, R9, 0 */
		/* 821EAC98h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821EAC98h case   10:*/		return 0x821EAC9C;
		  /* 821EAC9Ch */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 821EAC9Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821EACB0;  }
		/* 821EAC9Ch case   11:*/		return 0x821EACA0;
		  /* 821EACA0h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821EACA0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821EACA0h case   12:*/		return 0x821EACA4;
		  /* 821EACA4h */ case   13:  		/* cmplwi CR6, R9, 0 */
		/* 821EACA4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821EACA4h case   13:*/		return 0x821EACA8;
		  /* 821EACA8h */ case   14:  		/* mr R9, R24 */
		/* 821EACA8h case   14:*/		regs.R9 = regs.R24;
		/* 821EACA8h case   14:*/		return 0x821EACAC;
		  /* 821EACACh */ case   15:  		/* bc 4, CR6_EQ, 8 */
		/* 821EACACh case   15:*/		if ( !regs.CR[6].eq ) { return 0x821EACB4;  }
		/* 821EACACh case   15:*/		return 0x821EACB0;
	}
	return 0x821EACB0;
} // Block from 821EAC70h-821EACB0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821EACB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EACB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EACB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EACB0);
		  /* 821EACB0h */ case    0:  		/* mr R9, R17 */
		/* 821EACB0h case    0:*/		regs.R9 = regs.R17;
		/* 821EACB0h case    0:*/		return 0x821EACB4;
	}
	return 0x821EACB4;
} // Block from 821EACB0h-821EACB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821EACB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EACB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EACB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EACB4);
		  /* 821EACB4h */ case    0:  		/* rlwinm. R9, R9, 0, 24, 31 */
		/* 821EACB4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R9);
		/* 821EACB4h case    0:*/		return 0x821EACB8;
		  /* 821EACB8h */ case    1:  		/* bc 4, CR0_EQ, 208 */
		/* 821EACB8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821EAD88;  }
		/* 821EACB8h case    1:*/		return 0x821EACBC;
		  /* 821EACBCh */ case    2:  		/* lwz R7, <#[R10 + 40]> */
		/* 821EACBCh case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000028) );
		/* 821EACBCh case    2:*/		return 0x821EACC0;
		  /* 821EACC0h */ case    3:  		/* rlwinm R10, R11, 28, 5, 31 */
		/* 821EACC0h case    3:*/		cpu::op::rlwinm<0,28,5,31>(regs,&regs.R10,regs.R11);
		/* 821EACC0h case    3:*/		return 0x821EACC4;
		  /* 821EACC4h */ case    4:  		/* rlwinm R9, R11, 1, 0, 30 */
		/* 821EACC4h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R11);
		/* 821EACC4h case    4:*/		return 0x821EACC8;
		  /* 821EACC8h */ case    5:  		/* addi R10, R10, 1 */
		/* 821EACC8h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EACC8h case    5:*/		return 0x821EACCC;
		  /* 821EACCCh */ case    6:  		/* rlwinm R6, R11, 1, 27, 30 */
		/* 821EACCCh case    6:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R6,regs.R11);
		/* 821EACCCh case    6:*/		return 0x821EACD0;
		  /* 821EACD0h */ case    7:  		/* addi R9, R9, 1 */
		/* 821EACD0h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821EACD0h case    7:*/		return 0x821EACD4;
		  /* 821EACD4h */ case    8:  		/* lwz R11, <#[R7]> */
		/* 821EACD4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821EACD4h case    8:*/		return 0x821EACD8;
		  /* 821EACD8h */ case    9:  		/* rlwinm R8, R10, 1, 0, 30 */
		/* 821EACD8h case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R10);
		/* 821EACD8h case    9:*/		return 0x821EACDC;
		  /* 821EACDCh */ case   10:  		/* rlwinm R10, R9, 0, 27, 31 */
		/* 821EACDCh case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R9);
		/* 821EACDCh case   10:*/		return 0x821EACE0;
		  /* 821EACE0h */ case   11:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821EACE0h case   11:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821EACE0h case   11:*/		return 0x821EACE4;
		  /* 821EACE4h */ case   12:  		/* slw R10, R23, R10 */
		/* 821EACE4h case   12:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R23,regs.R10);
		/* 821EACE4h case   12:*/		return 0x821EACE8;
	}
	return 0x821EACE8;
} // Block from 821EACB4h-821EACE8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821EACE8h
// Function '?Equals@?$DynamicBitSet@I$1?AllocInContext@CompilerHeap@D3DXShader@@SAPAXPAXK@Z$1?FreeInContext@23@SAX00K@Z@D3DXShader@@QAA_NPAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EACE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EACE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EACE8);
		  /* 821EACE8h */ case    0:  		/* addi R11, R9, 31 */
		/* 821EACE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x1F);
		/* 821EACE8h case    0:*/		return 0x821EACEC;
		  /* 821EACECh */ case    1:  		/* addi R10, R10, -1 */
		/* 821EACECh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821EACECh case    1:*/		return 0x821EACF0;
		  /* 821EACF0h */ case    2:  		/* rlwinm R11, R11, 29, 3, 29 */
		/* 821EACF0h case    2:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R11);
		/* 821EACF0h case    2:*/		return 0x821EACF4;
		  /* 821EACF4h */ case    3:  		/* slw R9, R22, R6 */
		/* 821EACF4h case    3:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R22,regs.R6);
		/* 821EACF4h case    3:*/		return 0x821EACF8;
		  /* 821EACF8h */ case    4:  		/* add R11, R11, R8 */
		/* 821EACF8h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821EACF8h case    4:*/		return 0x821EACFC;
		  /* 821EACFCh */ case    5:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821EACFCh case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821EACFCh case    5:*/		return 0x821EAD00;
		  /* 821EAD00h */ case    6:  		/* lwzx R11, <#[R11 + R7]> */
		/* 821EAD00h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 821EAD00h case    6:*/		return 0x821EAD04;
		  /* 821EAD04h */ case    7:  		/* and R11, R11, R10 */
		/* 821EAD04h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821EAD04h case    7:*/		return 0x821EAD08;
		  /* 821EAD08h */ case    8:  		/* and R11, R11, R9 */
		/* 821EAD08h case    8:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821EAD08h case    8:*/		return 0x821EAD0C;
		  /* 821EAD0Ch */ case    9:  		/* srw R7, R11, R6 */
		/* 821EAD0Ch case    9:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R11,regs.R6);
		/* 821EAD0Ch case    9:*/		return 0x821EAD10;
		  /* 821EAD10h */ case   10:  		/* cmplwi CR6, R7, 3 */
		/* 821EAD10h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000003);
		/* 821EAD10h case   10:*/		return 0x821EAD14;
		  /* 821EAD14h */ case   11:  		/* bc 12, CR6_EQ, 116 */
		/* 821EAD14h case   11:*/		if ( regs.CR[6].eq ) { return 0x821EAD88;  }
		/* 821EAD14h case   11:*/		return 0x821EAD18;
		  /* 821EAD18h */ case   12:  		/* lwz R6, <#[R5 + 12]> */
		/* 821EAD18h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + 0x0000000C) );
		/* 821EAD18h case   12:*/		return 0x821EAD1C;
		  /* 821EAD1Ch */ case   13:  		/* cmplwi CR6, R6, 0 */
		/* 821EAD1Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821EAD1Ch case   13:*/		return 0x821EAD20;
		  /* 821EAD20h */ case   14:  		/* bc 12, CR6_EQ, 104 */
		/* 821EAD20h case   14:*/		if ( regs.CR[6].eq ) { return 0x821EAD88;  }
		/* 821EAD20h case   14:*/		return 0x821EAD24;
		  /* 821EAD24h */ case   15:  		/* lwz R10, <#[R6]> */
		/* 821EAD24h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 821EAD24h case   15:*/		return 0x821EAD28;
		  /* 821EAD28h */ case   16:  		/* lwz R11, <#[R5 + 48]> */
		/* 821EAD28h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000030) );
		/* 821EAD28h case   16:*/		return 0x821EAD2C;
		  /* 821EAD2Ch */ case   17:  		/* rlwinm R11, R11, 1, 12, 30 */
		/* 821EAD2Ch case   17:*/		cpu::op::rlwinm<0,1,12,30>(regs,&regs.R11,regs.R11);
		/* 821EAD2Ch case   17:*/		return 0x821EAD30;
		  /* 821EAD30h */ case   18:  		/* lwz R10, <#[R10 + 40]> */
		/* 821EAD30h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 821EAD30h case   18:*/		return 0x821EAD34;
		  /* 821EAD34h */ case   19:  		/* add R11, R11, R7 */
		/* 821EAD34h case   19:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 821EAD34h case   19:*/		return 0x821EAD38;
		  /* 821EAD38h */ case   20:  		/* addi R11, R11, -1 */
		/* 821EAD38h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821EAD38h case   20:*/		return 0x821EAD3C;
		  /* 821EAD3Ch */ case   21:  		/* rlwinm R9, R11, 29, 3, 29 */
		/* 821EAD3Ch case   21:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R11);
		/* 821EAD3Ch case   21:*/		return 0x821EAD40;
		  /* 821EAD40h */ case   22:  		/* lwz R8, <#[R10]> */
		/* 821EAD40h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821EAD40h case   22:*/		return 0x821EAD44;
		  /* 821EAD44h */ case   23:  		/* rlwinm R3, R11, 0, 27, 31 */
		/* 821EAD44h case   23:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R11);
		/* 821EAD44h case   23:*/		return 0x821EAD48;
		  /* 821EAD48h */ case   24:  		/* rlwinm R11, R8, 0, 13, 31 */
		/* 821EAD48h case   24:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R8);
		/* 821EAD48h case   24:*/		return 0x821EAD4C;
		  /* 821EAD4Ch */ case   25:  		/* slw R8, R24, R3 */
		/* 821EAD4Ch case   25:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R3);
		/* 821EAD4Ch case   25:*/		return 0x821EAD50;
		  /* 821EAD50h */ case   26:  		/* addi R11, R11, 31 */
		/* 821EAD50h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821EAD50h case   26:*/		return 0x821EAD54;
		  /* 821EAD54h */ case   27:  		/* rlwinm R11, R11, 29, 3, 29 */
		/* 821EAD54h case   27:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R11);
		/* 821EAD54h case   27:*/		return 0x821EAD58;
		  /* 821EAD58h */ case   28:  		/* addi R11, R11, 2 */
		/* 821EAD58h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821EAD58h case   28:*/		return 0x821EAD5C;
		  /* 821EAD5Ch */ case   29:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821EAD5Ch case   29:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821EAD5Ch case   29:*/		return 0x821EAD60;
	}
	return 0x821EAD60;
} // Block from 821EACE8h-821EAD60h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821EAD60h
// Function '?And@?$ArrayBitSet@I@D3DXShader@@QAAXPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAD60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAD60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAD60);
		  /* 821EAD60h */ case    0:  		/* add R11, R11, R10 */
		/* 821EAD60h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821EAD60h case    0:*/		return 0x821EAD64;
		  /* 821EAD64h */ case    1:  		/* lwzx R10, <#[R9 + R11]> */
		/* 821EAD64h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821EAD64h case    1:*/		return 0x821EAD68;
		  /* 821EAD68h */ case    2:  		/* and. R10, R8, R10 */
		/* 821EAD68h case    2:*/		cpu::op::and<1>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821EAD68h case    2:*/		return 0x821EAD6C;
		  /* 821EAD6Ch */ case    3:  		/* bc 4, CR0_EQ, 20 */
		/* 821EAD6Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EAD80;  }
		/* 821EAD6Ch case    3:*/		return 0x821EAD70;
		  /* 821EAD70h */ case    4:  		/* lwzx R10, <#[R9 + R11]> */
		/* 821EAD70h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821EAD70h case    4:*/		return 0x821EAD74;
		  /* 821EAD74h */ case    5:  		/* mr R26, R24 */
		/* 821EAD74h case    5:*/		regs.R26 = regs.R24;
		/* 821EAD74h case    5:*/		return 0x821EAD78;
		  /* 821EAD78h */ case    6:  		/* or R10, R8, R10 */
		/* 821EAD78h case    6:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821EAD78h case    6:*/		return 0x821EAD7C;
		  /* 821EAD7Ch */ case    7:  		/* stwx R10, <#[R9 + R11]> */
		/* 821EAD7Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821EAD7Ch case    7:*/		return 0x821EAD80;
	}
	return 0x821EAD80;
} // Block from 821EAD60h-821EAD80h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821EAD80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAD80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAD80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAD80);
		  /* 821EAD80h */ case    0:  		/* lwz R6, <#[R6 + 8]> */
		/* 821EAD80h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000008) );
		/* 821EAD80h case    0:*/		return 0x821EAD84;
		  /* 821EAD84h */ case    1:  		/* b -104 */
		/* 821EAD84h case    1:*/		return 0x821EAD1C;
		/* 821EAD84h case    1:*/		return 0x821EAD88;
	}
	return 0x821EAD88;
} // Block from 821EAD80h-821EAD88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EAD88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAD88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAD88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAD88);
		  /* 821EAD88h */ case    0:  		/* lwz R4, <#[R4 + 12]> */
		/* 821EAD88h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000000C) );
		/* 821EAD88h case    0:*/		return 0x821EAD8C;
		  /* 821EAD8Ch */ case    1:  		/* b -304 */
		/* 821EAD8Ch case    1:*/		return 0x821EAC5C;
		/* 821EAD8Ch case    1:*/		return 0x821EAD90;
	}
	return 0x821EAD90;
} // Block from 821EAD88h-821EAD90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EAD90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAD90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAD90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAD90);
		  /* 821EAD90h */ case    0:  		/* rlwinm R11, R5, 0, 0, 30 */
		/* 821EAD90h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R5);
		/* 821EAD90h case    0:*/		return 0x821EAD94;
		  /* 821EAD94h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821EAD94h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821EAD94h case    1:*/		return 0x821EAD98;
		  /* 821EAD98h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EAD98h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EAD98h case    2:*/		return 0x821EAD9C;
		  /* 821EAD9Ch */ case    3:  		/* bc 4, CR0_EQ, 468 */
		/* 821EAD9Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EAF70;  }
		/* 821EAD9Ch case    3:*/		return 0x821EADA0;
		  /* 821EADA0h */ case    4:  		/* mr R5, R11 */
		/* 821EADA0h case    4:*/		regs.R5 = regs.R11;
		/* 821EADA0h case    4:*/		return 0x821EADA4;
		  /* 821EADA4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821EADA4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821EADA4h case    5:*/		return 0x821EADA8;
		  /* 821EADA8h */ case    6:  		/* bc 4, CR6_EQ, -352 */
		/* 821EADA8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821EAC48;  }
		/* 821EADA8h case    6:*/		return 0x821EADAC;
		  /* 821EADACh */ case    7:  		/* b 452 */
		/* 821EADACh case    7:*/		return 0x821EAF70;
		/* 821EADACh case    7:*/		return 0x821EADB0;
	}
	return 0x821EADB0;
} // Block from 821EAD90h-821EADB0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821EADB0h
// Function '?Or@?$ArrayBitSet@I@D3DXShader@@QAAXPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EADB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EADB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EADB0);
		  /* 821EADB0h */ case    0:  		/* lwz R29, <#[R20 + 4]> */
		/* 821EADB0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R20 + 0x00000004) );
		/* 821EADB0h case    0:*/		return 0x821EADB4;
		  /* 821EADB4h */ case    1:  		/* mr R26, R17 */
		/* 821EADB4h case    1:*/		regs.R26 = regs.R17;
		/* 821EADB4h case    1:*/		return 0x821EADB8;
		  /* 821EADB8h */ case    2:  		/* rlwinm. R11, R29, 0, 31, 31 */
		/* 821EADB8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R29);
		/* 821EADB8h case    2:*/		return 0x821EADBC;
		  /* 821EADBCh */ case    3:  		/* bc 4, CR0_EQ, 436 */
		/* 821EADBCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EAF70;  }
		/* 821EADBCh case    3:*/		return 0x821EADC0;
		  /* 821EADC0h */ case    4:  		/* cmplwi CR0, R29, 0 */
		/* 821EADC0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R29,0x00000000);
		/* 821EADC0h case    4:*/		return 0x821EADC4;
		  /* 821EADC4h */ case    5:  		/* bc 12, CR0_EQ, 428 */
		/* 821EADC4h case    5:*/		if ( regs.CR[0].eq ) { return 0x821EAF70;  }
		/* 821EADC4h case    5:*/		return 0x821EADC8;
		  /* 821EADC8h */ case    6:  		/* lwz R11, <#[R29 + 40]> */
		/* 821EADC8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 821EADC8h case    6:*/		return 0x821EADCC;
		  /* 821EADCCh */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 821EADCCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821EADCCh case    7:*/		return 0x821EADD0;
		  /* 821EADD0h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821EADD0h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821EADD0h case    8:*/		return 0x821EADD4;
		  /* 821EADD4h */ case    9:  		/* bc 4, CR0_EQ, 388 */
		/* 821EADD4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821EAF58;  }
		/* 821EADD4h case    9:*/		return 0x821EADD8;
		  /* 821EADD8h */ case   10:  		/* lwz R27, <#[R29 + 12]> */
		/* 821EADD8h case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R29 + 0x0000000C) );
		/* 821EADD8h case   10:*/		return 0x821EADDC;
		  /* 821EADDCh */ case   11:  		/* cmplwi CR6, R27, 0 */
		/* 821EADDCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821EADDCh case   11:*/		return 0x821EADE0;
		  /* 821EADE0h */ case   12:  		/* bc 12, CR6_EQ, 376 */
		/* 821EADE0h case   12:*/		if ( regs.CR[6].eq ) { return 0x821EAF58;  }
		/* 821EADE0h case   12:*/		return 0x821EADE4;
		  /* 821EADE4h */ case   13:  		/* lwz R28, <#[R27]> */
		/* 821EADE4h case   13:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000000) );
		/* 821EADE4h case   13:*/		return 0x821EADE8;
		  /* 821EADE8h */ case   14:  		/* lwz R9, <#[R29 + 40]> */
		/* 821EADE8h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000028) );
		/* 821EADE8h case   14:*/		return 0x821EADEC;
		  /* 821EADECh */ case   15:  		/* lwz R11, <#[R28 + 48]> */
		/* 821EADECh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 821EADECh case   15:*/		return 0x821EADF0;
		  /* 821EADF0h */ case   16:  		/* rlwinm R10, R11, 27, 18, 31 */
		/* 821EADF0h case   16:*/		cpu::op::rlwinm<0,27,18,31>(regs,&regs.R10,regs.R11);
		/* 821EADF0h case   16:*/		return 0x821EADF4;
		  /* 821EADF4h */ case   17:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 821EADF4h case   17:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 821EADF4h case   17:*/		return 0x821EADF8;
		  /* 821EADF8h */ case   18:  		/* addi R10, R10, 1 */
		/* 821EADF8h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EADF8h case   18:*/		return 0x821EADFC;
		  /* 821EADFCh */ case   19:  		/* slw R8, R24, R8 */
		/* 821EADFCh case   19:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R8);
		/* 821EADFCh case   19:*/		return 0x821EAE00;
	}
	return 0x821EAE00;
} // Block from 821EADB0h-821EAE00h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821EAE00h
// Function '?BuildDominanceGraph@Compiler@D3DXShader@@AAAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAE00);
		  /* 821EAE00h */ case    0:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821EAE00h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821EAE00h case    0:*/		return 0x821EAE04;
		  /* 821EAE04h */ case    1:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821EAE04h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821EAE04h case    1:*/		return 0x821EAE08;
		  /* 821EAE08h */ case    2:  		/* and. R10, R8, R10 */
		/* 821EAE08h case    2:*/		cpu::op::and<1>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821EAE08h case    2:*/		return 0x821EAE0C;
		  /* 821EAE0Ch */ case    3:  		/* bc 4, CR0_EQ, 324 */
		/* 821EAE0Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EAF50;  }
		/* 821EAE0Ch case    3:*/		return 0x821EAE10;
		  /* 821EAE10h */ case    4:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821EAE10h case    4:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821EAE10h case    4:*/		return 0x821EAE14;
		  /* 821EAE14h */ case    5:  		/* bc 4, CR0_EQ, 316 */
		/* 821EAE14h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821EAF50;  }
		/* 821EAE14h case    5:*/		return 0x821EAE18;
		  /* 821EAE18h */ case    6:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 821EAE18h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 821EAE18h case    6:*/		return 0x821EAE1C;
		  /* 821EAE1Ch */ case    7:  		/* stw R31, <#[R1 + 88]> */
		/* 821EAE1Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000058) );
		/* 821EAE1Ch case    7:*/		return 0x821EAE20;
		  /* 821EAE20h */ case    8:  		/* addi R10, R25, 2 */
		/* 821EAE20h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R25,0x2);
		/* 821EAE20h case    8:*/		return 0x821EAE24;
		  /* 821EAE24h */ case    9:  		/* mr R3, R31 */
		/* 821EAE24h case    9:*/		regs.R3 = regs.R31;
		/* 821EAE24h case    9:*/		return 0x821EAE28;
		  /* 821EAE28h */ case   10:  		/* addi R9, R10, 31 */
		/* 821EAE28h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x1F);
		/* 821EAE28h case   10:*/		return 0x821EAE2C;
		  /* 821EAE2Ch */ case   11:  		/* stw R10, <#[R1 + 92]> */
		/* 821EAE2Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821EAE2Ch case   11:*/		return 0x821EAE30;
		  /* 821EAE30h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821EAE30h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EAE30h case   12:*/		return 0x821EAE34;
		  /* 821EAE34h */ case   13:  		/* rlwinm R30, R9, 29, 3, 29 */
		/* 821EAE34h case   13:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R30,regs.R9);
		/* 821EAE34h case   13:*/		return 0x821EAE38;
		  /* 821EAE38h */ case   14:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 821EAE38h case   14:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 821EAE38h case   14:*/		return 0x821EAE3C;
		  /* 821EAE3Ch */ case   15:  		/* mr R5, R30 */
		/* 821EAE3Ch case   15:*/		regs.R5 = regs.R30;
		/* 821EAE3Ch case   15:*/		return 0x821EAE40;
		  /* 821EAE40h */ case   16:  		/* addi R10, R9, 31 */
		/* 821EAE40h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x1F);
		/* 821EAE40h case   16:*/		return 0x821EAE44;
		  /* 821EAE44h */ case   17:  		/* rlwinm R9, R10, 29, 3, 29 */
		/* 821EAE44h case   17:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R10);
		/* 821EAE44h case   17:*/		return 0x821EAE48;
		  /* 821EAE48h */ case   18:  		/* addi R10, R9, 2 */
		/* 821EAE48h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x2);
		/* 821EAE48h case   18:*/		return 0x821EAE4C;
		  /* 821EAE4Ch */ case   19:  		/* rlwinm R9, R10, 1, 0, 30 */
		/* 821EAE4Ch case   19:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R10);
		/* 821EAE4Ch case   19:*/		return 0x821EAE50;
		  /* 821EAE50h */ case   20:  		/* add R4, R9, R11 */
		/* 821EAE50h case   20:*/		cpu::op::add<0>(regs,&regs.R4,regs.R9,regs.R11);
		/* 821EAE50h case   20:*/		return 0x821EAE54;
		  /* 821EAE54h */ case   21:  		/* bl -1414308 */
		/* 821EAE54h case   21:*/		regs.LR = 0x821EAE58; return 0x820919B0;
		/* 821EAE54h case   21:*/		return 0x821EAE58;
		  /* 821EAE58h */ case   22:  		/* lwz R11, <#[R29 + 48]> */
		/* 821EAE58h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821EAE58h case   22:*/		return 0x821EAE5C;
		  /* 821EAE5Ch */ case   23:  		/* addi R3, R1, 88 */
		/* 821EAE5Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 821EAE5Ch case   23:*/		return 0x821EAE60;
		  /* 821EAE60h */ case   24:  		/* rlwinm R10, R11, 1, 12, 30 */
		/* 821EAE60h case   24:*/		cpu::op::rlwinm<0,1,12,30>(regs,&regs.R10,regs.R11);
		/* 821EAE60h case   24:*/		return 0x821EAE64;
		  /* 821EAE64h */ case   25:  		/* rlwinm R11, R10, 29, 3, 29 */
		/* 821EAE64h case   25:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R10);
		/* 821EAE64h case   25:*/		return 0x821EAE68;
		  /* 821EAE68h */ case   26:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821EAE68h case   26:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821EAE68h case   26:*/		return 0x821EAE6C;
		  /* 821EAE6Ch */ case   27:  		/* slw R10, R24, R10 */
		/* 821EAE6Ch case   27:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R10);
		/* 821EAE6Ch case   27:*/		return 0x821EAE70;
		  /* 821EAE70h */ case   28:  		/* lwzx R9, <#[R11 + R31]> */
		/* 821EAE70h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821EAE70h case   28:*/		return 0x821EAE74;
		  /* 821EAE74h */ case   29:  		/* andc R10, R9, R10 */
		/* 821EAE74h case   29:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821EAE74h case   29:*/		return 0x821EAE78;
		  /* 821EAE78h */ case   30:  		/* stwx R10, <#[R11 + R31]> */
		/* 821EAE78h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821EAE78h case   30:*/		return 0x821EAE7C;
		  /* 821EAE7Ch */ case   31:  		/* lwz R11, <#[R29 + 48]> */
		/* 821EAE7Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821EAE7Ch case   31:*/		return 0x821EAE80;
		  /* 821EAE80h */ case   32:  		/* rlwinm R11, R11, 1, 12, 30 */
		/* 821EAE80h case   32:*/		cpu::op::rlwinm<0,1,12,30>(regs,&regs.R11,regs.R11);
		/* 821EAE80h case   32:*/		return 0x821EAE84;
		  /* 821EAE84h */ case   33:  		/* addi R11, R11, 1 */
		/* 821EAE84h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821EAE84h case   33:*/		return 0x821EAE88;
		  /* 821EAE88h */ case   34:  		/* rlwinm R10, R11, 29, 3, 29 */
		/* 821EAE88h case   34:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R11);
		/* 821EAE88h case   34:*/		return 0x821EAE8C;
		  /* 821EAE8Ch */ case   35:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821EAE8Ch case   35:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821EAE8Ch case   35:*/		return 0x821EAE90;
		  /* 821EAE90h */ case   36:  		/* slw R11, R24, R11 */
		/* 821EAE90h case   36:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R24,regs.R11);
		/* 821EAE90h case   36:*/		return 0x821EAE94;
		  /* 821EAE94h */ case   37:  		/* lwzx R9, <#[R10 + R31]> */
		/* 821EAE94h case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821EAE94h case   37:*/		return 0x821EAE98;
		  /* 821EAE98h */ case   38:  		/* andc R11, R9, R11 */
		/* 821EAE98h case   38:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821EAE98h case   38:*/		return 0x821EAE9C;
		  /* 821EAE9Ch */ case   39:  		/* stwx R11, <#[R10 + R31]> */
		/* 821EAE9Ch case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821EAE9Ch case   39:*/		return 0x821EAEA0;
		  /* 821EAEA0h */ case   40:  		/* lwz R11, <#[R28 + 40]> */
		/* 821EAEA0h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 821EAEA0h case   40:*/		return 0x821EAEA4;
		  /* 821EAEA4h */ case   41:  		/* lwz R10, <#[R11]> */
		/* 821EAEA4h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EAEA4h case   41:*/		return 0x821EAEA8;
		  /* 821EAEA8h */ case   42:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821EAEA8h case   42:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821EAEA8h case   42:*/		return 0x821EAEAC;
		  /* 821EAEACh */ case   43:  		/* addi R10, R10, 31 */
		/* 821EAEACh case   43:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EAEACh case   43:*/		return 0x821EAEB0;
		  /* 821EAEB0h */ case   44:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EAEB0h case   44:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EAEB0h case   44:*/		return 0x821EAEB4;
		  /* 821EAEB4h */ case   45:  		/* addi R10, R10, 2 */
		/* 821EAEB4h case   45:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821EAEB4h case   45:*/		return 0x821EAEB8;
		  /* 821EAEB8h */ case   46:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821EAEB8h case   46:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821EAEB8h case   46:*/		return 0x821EAEBC;
		  /* 821EAEBCh */ case   47:  		/* add R4, R10, R11 */
		/* 821EAEBCh case   47:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 821EAEBCh case   47:*/		return 0x821EAEC0;
		  /* 821EAEC0h */ case   48:  		/* bl -3048 */
		/* 821EAEC0h case   48:*/		regs.LR = 0x821EAEC4; return 0x821EA2D8;
		/* 821EAEC0h case   48:*/		return 0x821EAEC4;
		  /* 821EAEC4h */ case   49:  		/* lwz R11, <#[R28 + 40]> */
		/* 821EAEC4h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 821EAEC4h case   49:*/		return 0x821EAEC8;
		  /* 821EAEC8h */ case   50:  		/* mr R9, R31 */
		/* 821EAEC8h case   50:*/		regs.R9 = regs.R31;
		/* 821EAEC8h case   50:*/		return 0x821EAECC;
		  /* 821EAECCh */ case   51:  		/* mr R8, R17 */
		/* 821EAECCh case   51:*/		regs.R8 = regs.R17;
		/* 821EAECCh case   51:*/		return 0x821EAED0;
		  /* 821EAED0h */ case   52:  		/* cmplwi CR0, R30, 0 */
		/* 821EAED0h case   52:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 821EAED0h case   52:*/		return 0x821EAED4;
		  /* 821EAED4h */ case   53:  		/* lwz R10, <#[R11]> */
		/* 821EAED4h case   53:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EAED4h case   53:*/		return 0x821EAED8;
		  /* 821EAED8h */ case   54:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821EAED8h case   54:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821EAED8h case   54:*/		return 0x821EAEDC;
		  /* 821EAEDCh */ case   55:  		/* addi R10, R10, 31 */
		/* 821EAEDCh case   55:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EAEDCh case   55:*/		return 0x821EAEE0;
		  /* 821EAEE0h */ case   56:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EAEE0h case   56:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EAEE0h case   56:*/		return 0x821EAEE4;
		  /* 821EAEE4h */ case   57:  		/* addi R10, R10, 2 */
		/* 821EAEE4h case   57:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821EAEE4h case   57:*/		return 0x821EAEE8;
		  /* 821EAEE8h */ case   58:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821EAEE8h case   58:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821EAEE8h case   58:*/		return 0x821EAEEC;
		  /* 821EAEECh */ case   59:  		/* add R11, R10, R11 */
		/* 821EAEECh case   59:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EAEECh case   59:*/		return 0x821EAEF0;
		  /* 821EAEF0h */ case   60:  		/* bc 12, CR0_EQ, 40 */
		/* 821EAEF0h case   60:*/		if ( regs.CR[0].eq ) { return 0x821EAF18;  }
		/* 821EAEF0h case   60:*/		return 0x821EAEF4;
		  /* 821EAEF4h */ case   61:  		/* add R10, R11, R30 */
		/* 821EAEF4h case   61:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R30);
		/* 821EAEF4h case   61:*/		return 0x821EAEF8;
		  /* 821EAEF8h */ case   62:  		/* lbz R8, <#[R11]> */
		/* 821EAEF8h case   62:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821EAEF8h case   62:*/		return 0x821EAEFC;
		  /* 821EAEFCh */ case   63:  		/* lbz R7, <#[R9]> */
		/* 821EAEFCh case   63:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821EAEFCh case   63:*/		return 0x821EAF00;
		  /* 821EAF00h */ case   64:  		/* subf. R8, R7, R8 */
		/* 821EAF00h case   64:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821EAF00h case   64:*/		return 0x821EAF04;
		  /* 821EAF04h */ case   65:  		/* bc 4, CR0_EQ, 20 */
		/* 821EAF04h case   65:*/		if ( !regs.CR[0].eq ) { return 0x821EAF18;  }
		/* 821EAF04h case   65:*/		return 0x821EAF08;
		  /* 821EAF08h */ case   66:  		/* addi R11, R11, 1 */
		/* 821EAF08h case   66:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821EAF08h case   66:*/		return 0x821EAF0C;
		  /* 821EAF0Ch */ case   67:  		/* addi R9, R9, 1 */
		/* 821EAF0Ch case   67:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821EAF0Ch case   67:*/		return 0x821EAF10;
		  /* 821EAF10h */ case   68:  		/* cmpw CR6, R11, R10 */
		/* 821EAF10h case   68:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821EAF10h case   68:*/		return 0x821EAF14;
		  /* 821EAF14h */ case   69:  		/* bc 4, CR6_EQ, -28 */
		/* 821EAF14h case   69:*/		if ( !regs.CR[6].eq ) { return 0x821EAEF8;  }
		/* 821EAF14h case   69:*/		return 0x821EAF18;
	}
	return 0x821EAF18;
} // Block from 821EAE00h-821EAF18h (70 instructions)

//////////////////////////////////////////////////////
// Block at 821EAF18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAF18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAF18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAF18);
		  /* 821EAF18h */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 821EAF18h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 821EAF18h case    0:*/		return 0x821EAF1C;
		  /* 821EAF1Ch */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821EAF1Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821EAF50;  }
		/* 821EAF1Ch case    1:*/		return 0x821EAF20;
		  /* 821EAF20h */ case    2:  		/* lwz R11, <#[R28 + 40]> */
		/* 821EAF20h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 821EAF20h case    2:*/		return 0x821EAF24;
		  /* 821EAF24h */ case    3:  		/* mr R5, R30 */
		/* 821EAF24h case    3:*/		regs.R5 = regs.R30;
		/* 821EAF24h case    3:*/		return 0x821EAF28;
		  /* 821EAF28h */ case    4:  		/* mr R4, R31 */
		/* 821EAF28h case    4:*/		regs.R4 = regs.R31;
		/* 821EAF28h case    4:*/		return 0x821EAF2C;
		  /* 821EAF2Ch */ case    5:  		/* lwz R10, <#[R11]> */
		/* 821EAF2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EAF2Ch case    5:*/		return 0x821EAF30;
		  /* 821EAF30h */ case    6:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821EAF30h case    6:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821EAF30h case    6:*/		return 0x821EAF34;
		  /* 821EAF34h */ case    7:  		/* addi R10, R10, 31 */
		/* 821EAF34h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EAF34h case    7:*/		return 0x821EAF38;
		  /* 821EAF38h */ case    8:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EAF38h case    8:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EAF38h case    8:*/		return 0x821EAF3C;
		  /* 821EAF3Ch */ case    9:  		/* addi R10, R10, 2 */
		/* 821EAF3Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821EAF3Ch case    9:*/		return 0x821EAF40;
		  /* 821EAF40h */ case   10:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821EAF40h case   10:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821EAF40h case   10:*/		return 0x821EAF44;
		  /* 821EAF44h */ case   11:  		/* add R3, R10, R11 */
		/* 821EAF44h case   11:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 821EAF44h case   11:*/		return 0x821EAF48;
		  /* 821EAF48h */ case   12:  		/* bl -1414552 */
		/* 821EAF48h case   12:*/		regs.LR = 0x821EAF4C; return 0x820919B0;
		/* 821EAF48h case   12:*/		return 0x821EAF4C;
		  /* 821EAF4Ch */ case   13:  		/* mr R26, R24 */
		/* 821EAF4Ch case   13:*/		regs.R26 = regs.R24;
		/* 821EAF4Ch case   13:*/		return 0x821EAF50;
	}
	return 0x821EAF50;
} // Block from 821EAF18h-821EAF50h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821EAF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAF50);
		  /* 821EAF50h */ case    0:  		/* lwz R27, <#[R27 + 8]> */
		/* 821EAF50h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R27 + 0x00000008) );
		/* 821EAF50h case    0:*/		return 0x821EAF54;
		  /* 821EAF54h */ case    1:  		/* b -376 */
		/* 821EAF54h case    1:*/		return 0x821EADDC;
		/* 821EAF54h case    1:*/		return 0x821EAF58;
	}
	return 0x821EAF58;
} // Block from 821EAF50h-821EAF58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EAF58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAF58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAF58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAF58);
		  /* 821EAF58h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821EAF58h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821EAF58h case    0:*/		return 0x821EAF5C;
		  /* 821EAF5Ch */ case    1:  		/* lwz R29, <#[R11 + 4]> */
		/* 821EAF5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000004) );
		/* 821EAF5Ch case    1:*/		return 0x821EAF60;
		  /* 821EAF60h */ case    2:  		/* rlwinm. R11, R29, 0, 31, 31 */
		/* 821EAF60h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R29);
		/* 821EAF60h case    2:*/		return 0x821EAF64;
		  /* 821EAF64h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821EAF64h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EAF70;  }
		/* 821EAF64h case    3:*/		return 0x821EAF68;
		  /* 821EAF68h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 821EAF68h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821EAF68h case    4:*/		return 0x821EAF6C;
		  /* 821EAF6Ch */ case    5:  		/* bc 4, CR6_EQ, -420 */
		/* 821EAF6Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821EADC8;  }
		/* 821EAF6Ch case    5:*/		return 0x821EAF70;
	}
	return 0x821EAF70;
} // Block from 821EAF58h-821EAF70h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821EAF70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EAF70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EAF70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EAF70);
		  /* 821EAF70h */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821EAF70h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821EAF70h case    0:*/		return 0x821EAF74;
		  /* 821EAF74h */ case    1:  		/* bc 4, CR0_EQ, -452 */
		/* 821EAF74h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821EADB0;  }
		/* 821EAF74h case    1:*/		return 0x821EAF78;
		  /* 821EAF78h */ case    2:  		/* lwz R31, <#[R20 + 4]> */
		/* 821EAF78h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R20 + 0x00000004) );
		/* 821EAF78h case    2:*/		return 0x821EAF7C;
		  /* 821EAF7Ch */ case    3:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821EAF7Ch case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821EAF7Ch case    3:*/		return 0x821EAF80;
		  /* 821EAF80h */ case    4:  		/* bc 4, CR0_EQ, 236 */
		/* 821EAF80h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821EB06C;  }
		/* 821EAF80h case    4:*/		return 0x821EAF84;
		  /* 821EAF84h */ case    5:  		/* cmplwi CR0, R31, 0 */
		/* 821EAF84h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821EAF84h case    5:*/		return 0x821EAF88;
		  /* 821EAF88h */ case    6:  		/* bc 12, CR0_EQ, 228 */
		/* 821EAF88h case    6:*/		if ( regs.CR[0].eq ) { return 0x821EB06C;  }
		/* 821EAF88h case    6:*/		return 0x821EAF8C;
		  /* 821EAF8Ch */ case    7:  		/* lwz R11, <#[R31 + 40]> */
		/* 821EAF8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821EAF8Ch case    7:*/		return 0x821EAF90;
		  /* 821EAF90h */ case    8:  		/* addi R3, R11, 4 */
		/* 821EAF90h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 821EAF90h case    8:*/		return 0x821EAF94;
		  /* 821EAF94h */ case    9:  		/* lwz R11, <#[R11 + 4]> */
		/* 821EAF94h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821EAF94h case    9:*/		return 0x821EAF98;
		  /* 821EAF98h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821EAF98h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821EAF98h case   10:*/		return 0x821EAF9C;
		  /* 821EAF9Ch */ case   11:  		/* bc 4, CR0_EQ, 184 */
		/* 821EAF9Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x821EB054;  }
		/* 821EAF9Ch case   11:*/		return 0x821EAFA0;
		  /* 821EAFA0h */ case   12:  		/* mr R5, R19 */
		/* 821EAFA0h case   12:*/		regs.R5 = regs.R19;
		/* 821EAFA0h case   12:*/		return 0x821EAFA4;
		  /* 821EAFA4h */ case   13:  		/* li R4, 0 */
		/* 821EAFA4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821EAFA4h case   13:*/		return 0x821EAFA8;
		  /* 821EAFA8h */ case   14:  		/* bl -3848 */
		/* 821EAFA8h case   14:*/		regs.LR = 0x821EAFAC; return 0x821EA0A0;
		/* 821EAFA8h case   14:*/		return 0x821EAFAC;
		  /* 821EAFACh */ case   15:  		/* addi R30, R18, -1 */
		/* 821EAFACh case   15:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R18,0xFFFFFFFF);
		/* 821EAFACh case   15:*/		return 0x821EAFB0;
		  /* 821EAFB0h */ case   16:  		/* b 156 */
		/* 821EAFB0h case   16:*/		return 0x821EB04C;
		/* 821EAFB0h case   16:*/		return 0x821EAFB4;
		  /* 821EAFB4h */ case   17:  		/* lwz R10, <#[R20 + 96]> */
		/* 821EAFB4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000060) );
		/* 821EAFB4h case   17:*/		return 0x821EAFB8;
		  /* 821EAFB8h */ case   18:  		/* rlwinm R11, R3, 2, 0, 29 */
		/* 821EAFB8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R3);
		/* 821EAFB8h case   18:*/		return 0x821EAFBC;
		  /* 821EAFBCh */ case   19:  		/* lwz R9, <#[R31 + 48]> */
		/* 821EAFBCh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 821EAFBCh case   19:*/		return 0x821EAFC0;
		  /* 821EAFC0h */ case   20:  		/* cmplw CR6, R3, R30 */
		/* 821EAFC0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 821EAFC0h case   20:*/		return 0x821EAFC4;
		  /* 821EAFC4h */ case   21:  		/* add R11, R11, R10 */
		/* 821EAFC4h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821EAFC4h case   21:*/		return 0x821EAFC8;
		  /* 821EAFC8h */ case   22:  		/* rlwinm R9, R9, 1, 12, 30 */
		/* 821EAFC8h case   22:*/		cpu::op::rlwinm<0,1,12,30>(regs,&regs.R9,regs.R9);
		/* 821EAFC8h case   22:*/		return 0x821EAFCC;
		  /* 821EAFCCh */ case   23:  		/* rlwinm R10, R9, 29, 3, 29 */
		/* 821EAFCCh case   23:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R9);
		/* 821EAFCCh case   23:*/		return 0x821EAFD0;
		  /* 821EAFD0h */ case   24:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821EAFD0h case   24:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821EAFD0h case   24:*/		return 0x821EAFD4;
		  /* 821EAFD4h */ case   25:  		/* lwz R11, <#[R11 - 4]> */
		/* 821EAFD4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821EAFD4h case   25:*/		return 0x821EAFD8;
		  /* 821EAFD8h */ case   26:  		/* slw R8, R24, R9 */
		/* 821EAFD8h case   26:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R9);
		/* 821EAFD8h case   26:*/		return 0x821EAFDC;
		  /* 821EAFDCh */ case   27:  		/* lwz R11, <#[R11 + 40]> */
		/* 821EAFDCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821EAFDCh case   27:*/		return 0x821EAFE0;
		  /* 821EAFE0h */ case   28:  		/* lwz R9, <#[R11]> */
		/* 821EAFE0h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821EAFE0h case   28:*/		return 0x821EAFE4;
		  /* 821EAFE4h */ case   29:  		/* rlwinm R9, R9, 0, 13, 31 */
		/* 821EAFE4h case   29:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R9);
		/* 821EAFE4h case   29:*/		return 0x821EAFE8;
		  /* 821EAFE8h */ case   30:  		/* addi R9, R9, 31 */
		/* 821EAFE8h case   30:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1F);
		/* 821EAFE8h case   30:*/		return 0x821EAFEC;
		  /* 821EAFECh */ case   31:  		/* rlwinm R9, R9, 29, 3, 29 */
		/* 821EAFECh case   31:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R9);
		/* 821EAFECh case   31:*/		return 0x821EAFF0;
		  /* 821EAFF0h */ case   32:  		/* addi R9, R9, 2 */
		/* 821EAFF0h case   32:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x2);
		/* 821EAFF0h case   32:*/		return 0x821EAFF4;
		  /* 821EAFF4h */ case   33:  		/* rlwinm R9, R9, 1, 0, 30 */
		/* 821EAFF4h case   33:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R9);
		/* 821EAFF4h case   33:*/		return 0x821EAFF8;
		  /* 821EAFF8h */ case   34:  		/* add R11, R9, R11 */
		/* 821EAFF8h case   34:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821EAFF8h case   34:*/		return 0x821EAFFC;
		  /* 821EAFFCh */ case   35:  		/* lwzx R9, <#[R10 + R11]> */
		/* 821EAFFCh case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821EAFFCh case   35:*/		return 0x821EB000;
		  /* 821EB000h */ case   36:  		/* andc R9, R9, R8 */
		/* 821EB000h case   36:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821EB000h case   36:*/		return 0x821EB004;
		  /* 821EB004h */ case   37:  		/* stwx R9, <#[R10 + R11]> */
		/* 821EB004h case   37:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821EB004h case   37:*/		return 0x821EB008;
		  /* 821EB008h */ case   38:  		/* lwz R10, <#[R31 + 48]> */
		/* 821EB008h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821EB008h case   38:*/		return 0x821EB00C;
		  /* 821EB00Ch */ case   39:  		/* rlwinm R10, R10, 1, 12, 30 */
		/* 821EB00Ch case   39:*/		cpu::op::rlwinm<0,1,12,30>(regs,&regs.R10,regs.R10);
		/* 821EB00Ch case   39:*/		return 0x821EB010;
		  /* 821EB010h */ case   40:  		/* addi R10, R10, 1 */
		/* 821EB010h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EB010h case   40:*/		return 0x821EB014;
		  /* 821EB014h */ case   41:  		/* rlwinm R9, R10, 29, 3, 29 */
		/* 821EB014h case   41:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R10);
		/* 821EB014h case   41:*/		return 0x821EB018;
		  /* 821EB018h */ case   42:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821EB018h case   42:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821EB018h case   42:*/		return 0x821EB01C;
		  /* 821EB01Ch */ case   43:  		/* slw R10, R24, R10 */
		/* 821EB01Ch case   43:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R10);
		/* 821EB01Ch case   43:*/		return 0x821EB020;
		  /* 821EB020h */ case   44:  		/* lwzx R8, <#[R9 + R11]> */
		/* 821EB020h case   44:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821EB020h case   44:*/		return 0x821EB024;
		  /* 821EB024h */ case   45:  		/* andc R10, R8, R10 */
		/* 821EB024h case   45:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821EB024h case   45:*/		return 0x821EB028;
		  /* 821EB028h */ case   46:  		/* stwx R10, <#[R9 + R11]> */
		/* 821EB028h case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821EB028h case   46:*/		return 0x821EB02C;
		  /* 821EB02Ch */ case   47:  		/* bc 4, CR6_EQ, 12 */
		/* 821EB02Ch case   47:*/		if ( !regs.CR[6].eq ) { return 0x821EB038;  }
		/* 821EB02Ch case   47:*/		return 0x821EB030;
		  /* 821EB030h */ case   48:  		/* mr R3, R22 */
		/* 821EB030h case   48:*/		regs.R3 = regs.R22;
		/* 821EB030h case   48:*/		return 0x821EB034;
		  /* 821EB034h */ case   49:  		/* b 24 */
		/* 821EB034h case   49:*/		return 0x821EB04C;
		/* 821EB034h case   49:*/		return 0x821EB038;
	}
	return 0x821EB038;
} // Block from 821EAF70h-821EB038h (50 instructions)

//////////////////////////////////////////////////////
// Block at 821EB038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB038);
		  /* 821EB038h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 821EB038h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821EB038h case    0:*/		return 0x821EB03C;
		  /* 821EB03Ch */ case    1:  		/* addi R4, R3, 1 */
		/* 821EB03Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x1);
		/* 821EB03Ch case    1:*/		return 0x821EB040;
		  /* 821EB040h */ case    2:  		/* mr R5, R19 */
		/* 821EB040h case    2:*/		regs.R5 = regs.R19;
		/* 821EB040h case    2:*/		return 0x821EB044;
		  /* 821EB044h */ case    3:  		/* addi R3, R11, 4 */
		/* 821EB044h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 821EB044h case    3:*/		return 0x821EB048;
		  /* 821EB048h */ case    4:  		/* bl -4008 */
		/* 821EB048h case    4:*/		regs.LR = 0x821EB04C; return 0x821EA0A0;
		/* 821EB048h case    4:*/		return 0x821EB04C;
	}
	return 0x821EB04C;
} // Block from 821EB038h-821EB04Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821EB04Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB04C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB04C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB04C);
		  /* 821EB04Ch */ case    0:  		/* cmplw CR6, R3, R30 */
		/* 821EB04Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 821EB04Ch case    0:*/		return 0x821EB050;
		  /* 821EB050h */ case    1:  		/* bc 4, CR6_GT, -156 */
		/* 821EB050h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821EAFB4;  }
		/* 821EB050h case    1:*/		return 0x821EB054;
	}
	return 0x821EB054;
} // Block from 821EB04Ch-821EB054h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EB054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB054);
		  /* 821EB054h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821EB054h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821EB054h case    0:*/		return 0x821EB058;
		  /* 821EB058h */ case    1:  		/* lwz R31, <#[R11 + 4]> */
		/* 821EB058h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821EB058h case    1:*/		return 0x821EB05C;
		  /* 821EB05Ch */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821EB05Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821EB05Ch case    2:*/		return 0x821EB060;
		  /* 821EB060h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821EB060h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EB06C;  }
		/* 821EB060h case    3:*/		return 0x821EB064;
		  /* 821EB064h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821EB064h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821EB064h case    4:*/		return 0x821EB068;
		  /* 821EB068h */ case    5:  		/* bc 4, CR6_EQ, -220 */
		/* 821EB068h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821EAF8C;  }
		/* 821EB068h case    5:*/		return 0x821EB06C;
	}
	return 0x821EB06C;
} // Block from 821EB054h-821EB06Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821EB06Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB06C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB06C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB06C);
		  /* 821EB06Ch */ case    0:  		/* stw R21, <#[R1 + 80]> */
		/* 821EB06Ch case    0:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000050) );
		/* 821EB06Ch case    0:*/		return 0x821EB070;
		  /* 821EB070h */ case    1:  		/* lwz R11, <#[R20 + 4]> */
		/* 821EB070h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821EB070h case    1:*/		return 0x821EB074;
		  /* 821EB074h */ case    2:  		/* mr R25, R17 */
		/* 821EB074h case    2:*/		regs.R25 = regs.R17;
		/* 821EB074h case    2:*/		return 0x821EB078;
		  /* 821EB078h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EB078h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EB078h case    3:*/		return 0x821EB07C;
		  /* 821EB07Ch */ case    4:  		/* bc 4, CR0_EQ, 396 */
		/* 821EB07Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821EB208;  }
		/* 821EB07Ch case    4:*/		return 0x821EB080;
		  /* 821EB080h */ case    5:  		/* mr R28, R11 */
		/* 821EB080h case    5:*/		regs.R28 = regs.R11;
		/* 821EB080h case    5:*/		return 0x821EB084;
		  /* 821EB084h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821EB084h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821EB084h case    6:*/		return 0x821EB088;
		  /* 821EB088h */ case    7:  		/* bc 12, CR0_EQ, 384 */
		/* 821EB088h case    7:*/		if ( regs.CR[0].eq ) { return 0x821EB208;  }
		/* 821EB088h case    7:*/		return 0x821EB08C;
		  /* 821EB08Ch */ case    8:  		/* addi R11, R15, 31 */
		/* 821EB08Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0x1F);
		/* 821EB08Ch case    8:*/		return 0x821EB090;
		  /* 821EB090h */ case    9:  		/* rlwinm R27, R11, 29, 3, 29 */
		/* 821EB090h case    9:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R27,regs.R11);
		/* 821EB090h case    9:*/		return 0x821EB094;
		  /* 821EB094h */ case   10:  		/* lwz R11, <#[R28 + 40]> */
		/* 821EB094h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 821EB094h case   10:*/		return 0x821EB098;
		  /* 821EB098h */ case   11:  		/* mr R5, R27 */
		/* 821EB098h case   11:*/		regs.R5 = regs.R27;
		/* 821EB098h case   11:*/		return 0x821EB09C;
		  /* 821EB09Ch */ case   12:  		/* mr R3, R21 */
		/* 821EB09Ch case   12:*/		regs.R3 = regs.R21;
		/* 821EB09Ch case   12:*/		return 0x821EB0A0;
		  /* 821EB0A0h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821EB0A0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EB0A0h case   13:*/		return 0x821EB0A4;
		  /* 821EB0A4h */ case   14:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821EB0A4h case   14:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821EB0A4h case   14:*/		return 0x821EB0A8;
		  /* 821EB0A8h */ case   15:  		/* addi R10, R10, 31 */
		/* 821EB0A8h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EB0A8h case   15:*/		return 0x821EB0AC;
		  /* 821EB0ACh */ case   16:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EB0ACh case   16:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EB0ACh case   16:*/		return 0x821EB0B0;
		  /* 821EB0B0h */ case   17:  		/* addi R8, R10, 2 */
		/* 821EB0B0h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x2);
		/* 821EB0B0h case   17:*/		return 0x821EB0B4;
		  /* 821EB0B4h */ case   18:  		/* add R9, R10, R11 */
		/* 821EB0B4h case   18:*/		cpu::op::add<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 821EB0B4h case   18:*/		return 0x821EB0B8;
		  /* 821EB0B8h */ case   19:  		/* rlwinm R10, R8, 1, 0, 30 */
		/* 821EB0B8h case   19:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R8);
		/* 821EB0B8h case   19:*/		return 0x821EB0BC;
		  /* 821EB0BCh */ case   20:  		/* addi R4, R9, 4 */
		/* 821EB0BCh case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x4);
		/* 821EB0BCh case   20:*/		return 0x821EB0C0;
		  /* 821EB0C0h */ case   21:  		/* add R26, R10, R11 */
		/* 821EB0C0h case   21:*/		cpu::op::add<0>(regs,&regs.R26,regs.R10,regs.R11);
		/* 821EB0C0h case   21:*/		return 0x821EB0C4;
		  /* 821EB0C4h */ case   22:  		/* bl -1414932 */
		/* 821EB0C4h case   22:*/		regs.LR = 0x821EB0C8; return 0x820919B0;
		/* 821EB0C4h case   22:*/		return 0x821EB0C8;
		  /* 821EB0C8h */ case   23:  		/* mr R31, R17 */
		/* 821EB0C8h case   23:*/		regs.R31 = regs.R17;
		/* 821EB0C8h case   23:*/		return 0x821EB0CC;
		  /* 821EB0CCh */ case   24:  		/* mr R29, R17 */
		/* 821EB0CCh case   24:*/		regs.R29 = regs.R17;
		/* 821EB0CCh case   24:*/		return 0x821EB0D0;
		  /* 821EB0D0h */ case   25:  		/* mr R30, R17 */
		/* 821EB0D0h case   25:*/		regs.R30 = regs.R17;
		/* 821EB0D0h case   25:*/		return 0x821EB0D4;
		  /* 821EB0D4h */ case   26:  		/* addi R11, R30, 1 */
		/* 821EB0D4h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x1);
		/* 821EB0D4h case   26:*/		return 0x821EB0D8;
		  /* 821EB0D8h */ case   27:  		/* rlwinm R10, R30, 29, 3, 29 */
		/* 821EB0D8h case   27:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R30);
		/* 821EB0D8h case   27:*/		return 0x821EB0DC;
		  /* 821EB0DCh */ case   28:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821EB0DCh case   28:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821EB0DCh case   28:*/		return 0x821EB0E0;
		  /* 821EB0E0h */ case   29:  		/* rlwinm R9, R30, 0, 27, 31 */
		/* 821EB0E0h case   29:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R30);
		/* 821EB0E0h case   29:*/		return 0x821EB0E4;
		  /* 821EB0E4h */ case   30:  		/* slw R11, R23, R11 */
		/* 821EB0E4h case   30:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R23,regs.R11);
		/* 821EB0E4h case   30:*/		return 0x821EB0E8;
		  /* 821EB0E8h */ case   31:  		/* lwzx R10, <#[R10 + R26]> */
		/* 821EB0E8h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 821EB0E8h case   31:*/		return 0x821EB0EC;
		  /* 821EB0ECh */ case   32:  		/* addi R11, R11, -1 */
		/* 821EB0ECh case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821EB0ECh case   32:*/		return 0x821EB0F0;
		  /* 821EB0F0h */ case   33:  		/* slw R8, R22, R9 */
		/* 821EB0F0h case   33:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R22,regs.R9);
		/* 821EB0F0h case   33:*/		return 0x821EB0F4;
		  /* 821EB0F4h */ case   34:  		/* and R11, R11, R10 */
		/* 821EB0F4h case   34:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821EB0F4h case   34:*/		return 0x821EB0F8;
		  /* 821EB0F8h */ case   35:  		/* and R11, R11, R8 */
		/* 821EB0F8h case   35:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821EB0F8h case   35:*/		return 0x821EB0FC;
		  /* 821EB0FCh */ case   36:  		/* srw. R11, R11, R9 */
		/* 821EB0FCh case   36:*/		cpu::op::srw<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821EB0FCh case   36:*/		return 0x821EB100;
		  /* 821EB100h */ case   37:  		/* bc 12, CR0_EQ, 84 */
		/* 821EB100h case   37:*/		if ( regs.CR[0].eq ) { return 0x821EB154;  }
		/* 821EB100h case   37:*/		return 0x821EB104;
		  /* 821EB104h */ case   38:  		/* cmplwi CR6, R11, 3 */
		/* 821EB104h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821EB104h case   38:*/		return 0x821EB108;
		  /* 821EB108h */ case   39:  		/* bc 12, CR6_EQ, 76 */
		/* 821EB108h case   39:*/		if ( regs.CR[6].eq ) { return 0x821EB154;  }
		/* 821EB108h case   39:*/		return 0x821EB10C;
		  /* 821EB10Ch */ case   40:  		/* rlwinm R11, R31, 29, 3, 29 */
		/* 821EB10Ch case   40:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R31);
		/* 821EB10Ch case   40:*/		return 0x821EB110;
		  /* 821EB110h */ case   41:  		/* rlwinm R10, R31, 0, 27, 31 */
		/* 821EB110h case   41:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R31);
		/* 821EB110h case   41:*/		return 0x821EB114;
		  /* 821EB114h */ case   42:  		/* addi R3, R1, 80 */
		/* 821EB114h case   42:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821EB114h case   42:*/		return 0x821EB118;
		  /* 821EB118h */ case   43:  		/* slw R10, R24, R10 */
		/* 821EB118h case   43:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R10);
		/* 821EB118h case   43:*/		return 0x821EB11C;
		  /* 821EB11Ch */ case   44:  		/* lwzx R9, <#[R11 + R21]> */
		/* 821EB11Ch case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R21 + 0x00000000) );
		/* 821EB11Ch case   44:*/		return 0x821EB120;
		  /* 821EB120h */ case   45:  		/* or R10, R10, R9 */
		/* 821EB120h case   45:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821EB120h case   45:*/		return 0x821EB124;
		  /* 821EB124h */ case   46:  		/* stwx R10, <#[R11 + R21]> */
		/* 821EB124h case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R21 + 0x00000000) );
		/* 821EB124h case   46:*/		return 0x821EB128;
		  /* 821EB128h */ case   47:  		/* lwz R11, <#[R20 + 96]> */
		/* 821EB128h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000060) );
		/* 821EB128h case   47:*/		return 0x821EB12C;
		  /* 821EB12Ch */ case   48:  		/* add R11, R11, R29 */
		/* 821EB12Ch case   48:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 821EB12Ch case   48:*/		return 0x821EB130;
		  /* 821EB130h */ case   49:  		/* lwz R11, <#[R11 - 4]> */
		/* 821EB130h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821EB130h case   49:*/		return 0x821EB134;
		  /* 821EB134h */ case   50:  		/* lwz R11, <#[R11 + 40]> */
		/* 821EB134h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821EB134h case   50:*/		return 0x821EB138;
		  /* 821EB138h */ case   51:  		/* lwz R10, <#[R11]> */
		/* 821EB138h case   51:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EB138h case   51:*/		return 0x821EB13C;
		  /* 821EB13Ch */ case   52:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821EB13Ch case   52:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821EB13Ch case   52:*/		return 0x821EB140;
		  /* 821EB140h */ case   53:  		/* addi R10, R10, 31 */
		/* 821EB140h case   53:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EB140h case   53:*/		return 0x821EB144;
		  /* 821EB144h */ case   54:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EB144h case   54:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EB144h case   54:*/		return 0x821EB148;
		  /* 821EB148h */ case   55:  		/* add R11, R10, R11 */
		/* 821EB148h case   55:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EB148h case   55:*/		return 0x821EB14C;
		  /* 821EB14Ch */ case   56:  		/* addi R4, R11, 4 */
		/* 821EB14Ch case   56:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4);
		/* 821EB14Ch case   56:*/		return 0x821EB150;
		  /* 821EB150h */ case   57:  		/* bl -3704 */
		/* 821EB150h case   57:*/		regs.LR = 0x821EB154; return 0x821EA2D8;
		/* 821EB150h case   57:*/		return 0x821EB154;
	}
	return 0x821EB154;
} // Block from 821EB06Ch-821EB154h (58 instructions)

//////////////////////////////////////////////////////
// Block at 821EB154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB154);
		  /* 821EB154h */ case    0:  		/* addi R31, R31, 1 */
		/* 821EB154h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821EB154h case    0:*/		return 0x821EB158;
		  /* 821EB158h */ case    1:  		/* addi R30, R30, 2 */
		/* 821EB158h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x2);
		/* 821EB158h case    1:*/		return 0x821EB15C;
		  /* 821EB15Ch */ case    2:  		/* addi R29, R29, 4 */
		/* 821EB15Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821EB15Ch case    2:*/		return 0x821EB160;
		  /* 821EB160h */ case    3:  		/* cmplw CR6, R31, R16 */
		/* 821EB160h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R16);
		/* 821EB160h case    3:*/		return 0x821EB164;
		  /* 821EB164h */ case    4:  		/* bc 4, CR6_GT, -144 */
		/* 821EB164h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821EB0D4;  }
		/* 821EB164h case    4:*/		return 0x821EB168;
		  /* 821EB168h */ case    5:  		/* lwz R11, <#[R28 + 40]> */
		/* 821EB168h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 821EB168h case    5:*/		return 0x821EB16C;
		  /* 821EB16Ch */ case    6:  		/* mr R9, R21 */
		/* 821EB16Ch case    6:*/		regs.R9 = regs.R21;
		/* 821EB16Ch case    6:*/		return 0x821EB170;
		  /* 821EB170h */ case    7:  		/* mr R8, R17 */
		/* 821EB170h case    7:*/		regs.R8 = regs.R17;
		/* 821EB170h case    7:*/		return 0x821EB174;
		  /* 821EB174h */ case    8:  		/* cmplwi CR0, R27, 0 */
		/* 821EB174h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R27,0x00000000);
		/* 821EB174h case    8:*/		return 0x821EB178;
		  /* 821EB178h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821EB178h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EB178h case    9:*/		return 0x821EB17C;
		  /* 821EB17Ch */ case   10:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821EB17Ch case   10:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821EB17Ch case   10:*/		return 0x821EB180;
		  /* 821EB180h */ case   11:  		/* addi R10, R10, 31 */
		/* 821EB180h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EB180h case   11:*/		return 0x821EB184;
		  /* 821EB184h */ case   12:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EB184h case   12:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EB184h case   12:*/		return 0x821EB188;
		  /* 821EB188h */ case   13:  		/* add R11, R10, R11 */
		/* 821EB188h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EB188h case   13:*/		return 0x821EB18C;
		  /* 821EB18Ch */ case   14:  		/* addi R11, R11, 4 */
		/* 821EB18Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821EB18Ch case   14:*/		return 0x821EB190;
		  /* 821EB190h */ case   15:  		/* bc 12, CR0_EQ, 40 */
		/* 821EB190h case   15:*/		if ( regs.CR[0].eq ) { return 0x821EB1B8;  }
		/* 821EB190h case   15:*/		return 0x821EB194;
		  /* 821EB194h */ case   16:  		/* add R10, R11, R27 */
		/* 821EB194h case   16:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R27);
		/* 821EB194h case   16:*/		return 0x821EB198;
		  /* 821EB198h */ case   17:  		/* lbz R8, <#[R11]> */
		/* 821EB198h case   17:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821EB198h case   17:*/		return 0x821EB19C;
		  /* 821EB19Ch */ case   18:  		/* lbz R7, <#[R9]> */
		/* 821EB19Ch case   18:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821EB19Ch case   18:*/		return 0x821EB1A0;
		  /* 821EB1A0h */ case   19:  		/* subf. R8, R7, R8 */
		/* 821EB1A0h case   19:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821EB1A0h case   19:*/		return 0x821EB1A4;
		  /* 821EB1A4h */ case   20:  		/* bc 4, CR0_EQ, 20 */
		/* 821EB1A4h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821EB1B8;  }
		/* 821EB1A4h case   20:*/		return 0x821EB1A8;
		  /* 821EB1A8h */ case   21:  		/* addi R11, R11, 1 */
		/* 821EB1A8h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821EB1A8h case   21:*/		return 0x821EB1AC;
		  /* 821EB1ACh */ case   22:  		/* addi R9, R9, 1 */
		/* 821EB1ACh case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821EB1ACh case   22:*/		return 0x821EB1B0;
		  /* 821EB1B0h */ case   23:  		/* cmpw CR6, R11, R10 */
		/* 821EB1B0h case   23:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821EB1B0h case   23:*/		return 0x821EB1B4;
		  /* 821EB1B4h */ case   24:  		/* bc 4, CR6_EQ, -28 */
		/* 821EB1B4h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821EB198;  }
		/* 821EB1B4h case   24:*/		return 0x821EB1B8;
	}
	return 0x821EB1B8;
} // Block from 821EB154h-821EB1B8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821EB1B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB1B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB1B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB1B8);
		  /* 821EB1B8h */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 821EB1B8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 821EB1B8h case    0:*/		return 0x821EB1BC;
		  /* 821EB1BCh */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 821EB1BCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821EB1EC;  }
		/* 821EB1BCh case    1:*/		return 0x821EB1C0;
		  /* 821EB1C0h */ case    2:  		/* lwz R11, <#[R28 + 40]> */
		/* 821EB1C0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 821EB1C0h case    2:*/		return 0x821EB1C4;
		  /* 821EB1C4h */ case    3:  		/* mr R5, R27 */
		/* 821EB1C4h case    3:*/		regs.R5 = regs.R27;
		/* 821EB1C4h case    3:*/		return 0x821EB1C8;
		  /* 821EB1C8h */ case    4:  		/* mr R4, R21 */
		/* 821EB1C8h case    4:*/		regs.R4 = regs.R21;
		/* 821EB1C8h case    4:*/		return 0x821EB1CC;
		  /* 821EB1CCh */ case    5:  		/* lwz R10, <#[R11]> */
		/* 821EB1CCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EB1CCh case    5:*/		return 0x821EB1D0;
		  /* 821EB1D0h */ case    6:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821EB1D0h case    6:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821EB1D0h case    6:*/		return 0x821EB1D4;
		  /* 821EB1D4h */ case    7:  		/* addi R10, R10, 31 */
		/* 821EB1D4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EB1D4h case    7:*/		return 0x821EB1D8;
		  /* 821EB1D8h */ case    8:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EB1D8h case    8:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EB1D8h case    8:*/		return 0x821EB1DC;
		  /* 821EB1DCh */ case    9:  		/* add R11, R10, R11 */
		/* 821EB1DCh case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EB1DCh case    9:*/		return 0x821EB1E0;
		  /* 821EB1E0h */ case   10:  		/* addi R3, R11, 4 */
		/* 821EB1E0h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 821EB1E0h case   10:*/		return 0x821EB1E4;
		  /* 821EB1E4h */ case   11:  		/* bl -1415220 */
		/* 821EB1E4h case   11:*/		regs.LR = 0x821EB1E8; return 0x820919B0;
		/* 821EB1E4h case   11:*/		return 0x821EB1E8;
		  /* 821EB1E8h */ case   12:  		/* mr R25, R24 */
		/* 821EB1E8h case   12:*/		regs.R25 = regs.R24;
		/* 821EB1E8h case   12:*/		return 0x821EB1EC;
	}
	return 0x821EB1EC;
} // Block from 821EB1B8h-821EB1ECh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821EB1ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB1EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB1EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB1EC);
		  /* 821EB1ECh */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821EB1ECh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821EB1ECh case    0:*/		return 0x821EB1F0;
		  /* 821EB1F0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821EB1F0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821EB1F0h case    1:*/		return 0x821EB1F4;
		  /* 821EB1F4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EB1F4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EB1F4h case    2:*/		return 0x821EB1F8;
		  /* 821EB1F8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821EB1F8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EB208;  }
		/* 821EB1F8h case    3:*/		return 0x821EB1FC;
		  /* 821EB1FCh */ case    4:  		/* mr R28, R11 */
		/* 821EB1FCh case    4:*/		regs.R28 = regs.R11;
		/* 821EB1FCh case    4:*/		return 0x821EB200;
		  /* 821EB200h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821EB200h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821EB200h case    5:*/		return 0x821EB204;
		  /* 821EB204h */ case    6:  		/* bc 4, CR6_EQ, -368 */
		/* 821EB204h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821EB094;  }
		/* 821EB204h case    6:*/		return 0x821EB208;
	}
	return 0x821EB208;
} // Block from 821EB1ECh-821EB208h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821EB208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB208);
		  /* 821EB208h */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 821EB208h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 821EB208h case    0:*/		return 0x821EB20C;
		  /* 821EB20Ch */ case    1:  		/* bc 4, CR0_EQ, -412 */
		/* 821EB20Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821EB070;  }
		/* 821EB20Ch case    1:*/		return 0x821EB210;
		  /* 821EB210h */ case    2:  		/* lwz R11, <#[R20 + 4]> */
		/* 821EB210h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821EB210h case    2:*/		return 0x821EB214;
		  /* 821EB214h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EB214h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EB214h case    3:*/		return 0x821EB218;
		  /* 821EB218h */ case    4:  		/* bc 4, CR0_EQ, 244 */
		/* 821EB218h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821EB30C;  }
		/* 821EB218h case    4:*/		return 0x821EB21C;
		  /* 821EB21Ch */ case    5:  		/* mr R29, R11 */
		/* 821EB21Ch case    5:*/		regs.R29 = regs.R11;
		/* 821EB21Ch case    5:*/		return 0x821EB220;
		  /* 821EB220h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821EB220h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821EB220h case    6:*/		return 0x821EB224;
		  /* 821EB224h */ case    7:  		/* bc 12, CR0_EQ, 232 */
		/* 821EB224h case    7:*/		if ( regs.CR[0].eq ) { return 0x821EB30C;  }
		/* 821EB224h case    7:*/		return 0x821EB228;
		  /* 821EB228h */ case    8:  		/* addi R11, R15, 31 */
		/* 821EB228h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0x1F);
		/* 821EB228h case    8:*/		return 0x821EB22C;
		  /* 821EB22Ch */ case    9:  		/* addi R28, R15, -1 */
		/* 821EB22Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R15,0xFFFFFFFF);
		/* 821EB22Ch case    9:*/		return 0x821EB230;
		  /* 821EB230h */ case   10:  		/* rlwinm R27, R11, 27, 5, 31 */
		/* 821EB230h case   10:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R27,regs.R11);
		/* 821EB230h case   10:*/		return 0x821EB234;
		  /* 821EB234h */ case   11:  		/* lwz R11, <#[R29 + 40]> */
		/* 821EB234h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 821EB234h case   11:*/		return 0x821EB238;
		  /* 821EB238h */ case   12:  		/* mr R5, R27 */
		/* 821EB238h case   12:*/		regs.R5 = regs.R27;
		/* 821EB238h case   12:*/		return 0x821EB23C;
		  /* 821EB23Ch */ case   13:  		/* li R4, 0 */
		/* 821EB23Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821EB23Ch case   13:*/		return 0x821EB240;
		  /* 821EB240h */ case   14:  		/* mr R31, R17 */
		/* 821EB240h case   14:*/		regs.R31 = regs.R17;
		/* 821EB240h case   14:*/		return 0x821EB244;
		  /* 821EB244h */ case   15:  		/* lwz R10, <#[R11]> */
		/* 821EB244h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821EB244h case   15:*/		return 0x821EB248;
		  /* 821EB248h */ case   16:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821EB248h case   16:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821EB248h case   16:*/		return 0x821EB24C;
		  /* 821EB24Ch */ case   17:  		/* addi R10, R10, 31 */
		/* 821EB24Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821EB24Ch case   17:*/		return 0x821EB250;
		  /* 821EB250h */ case   18:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 821EB250h case   18:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 821EB250h case   18:*/		return 0x821EB254;
		  /* 821EB254h */ case   19:  		/* add R11, R10, R11 */
		/* 821EB254h case   19:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EB254h case   19:*/		return 0x821EB258;
		  /* 821EB258h */ case   20:  		/* addi R30, R11, 4 */
		/* 821EB258h case   20:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4);
		/* 821EB258h case   20:*/		return 0x821EB25C;
		  /* 821EB25Ch */ case   21:  		/* mr R3, R30 */
		/* 821EB25Ch case   21:*/		regs.R3 = regs.R30;
		/* 821EB25Ch case   21:*/		return 0x821EB260;
		  /* 821EB260h */ case   22:  		/* bl -4544 */
		/* 821EB260h case   22:*/		regs.LR = 0x821EB264; return 0x821EA0A0;
		/* 821EB260h case   22:*/		return 0x821EB264;
		  /* 821EB264h */ case   23:  		/* cmplw CR6, R3, R28 */
		/* 821EB264h case   23:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 821EB264h case   23:*/		return 0x821EB268;
		  /* 821EB268h */ case   24:  		/* bc 12, CR6_GT, 132 */
		/* 821EB268h case   24:*/		if ( regs.CR[6].gt ) { return 0x821EB2EC;  }
		/* 821EB268h case   24:*/		return 0x821EB26C;
		  /* 821EB26Ch */ case   25:  		/* lwz R11, <#[R29 + 48]> */
		/* 821EB26Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821EB26Ch case   25:*/		return 0x821EB270;
		  /* 821EB270h */ case   26:  		/* rlwinm R26, R11, 0, 13, 31 */
		/* 821EB270h case   26:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R26,regs.R11);
		/* 821EB270h case   26:*/		return 0x821EB274;
		  /* 821EB274h */ case   27:  		/* cmplw CR6, R3, R26 */
		/* 821EB274h case   27:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R26);
		/* 821EB274h case   27:*/		return 0x821EB278;
		  /* 821EB278h */ case   28:  		/* bc 12, CR6_EQ, 156 */
		/* 821EB278h case   28:*/		if ( regs.CR[6].eq ) { return 0x821EB314;  }
		/* 821EB278h case   28:*/		return 0x821EB27C;
		  /* 821EB27Ch */ case   29:  		/* lwz R10, <#[R20 + 96]> */
		/* 821EB27Ch case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000060) );
		/* 821EB27Ch case   29:*/		return 0x821EB280;
		  /* 821EB280h */ case   30:  		/* rlwinm R11, R3, 2, 0, 29 */
		/* 821EB280h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R3);
		/* 821EB280h case   30:*/		return 0x821EB284;
		  /* 821EB284h */ case   31:  		/* cmplwi CR6, R31, 0 */
		/* 821EB284h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821EB284h case   31:*/		return 0x821EB288;
		  /* 821EB288h */ case   32:  		/* add R11, R11, R10 */
		/* 821EB288h case   32:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821EB288h case   32:*/		return 0x821EB28C;
		  /* 821EB28Ch */ case   33:  		/* lwz R11, <#[R11 - 4]> */
		/* 821EB28Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821EB28Ch case   33:*/		return 0x821EB290;
		  /* 821EB290h */ case   34:  		/* bc 12, CR6_EQ, 48 */
		/* 821EB290h case   34:*/		if ( regs.CR[6].eq ) { return 0x821EB2C0;  }
		/* 821EB290h case   34:*/		return 0x821EB294;
		  /* 821EB294h */ case   35:  		/* lwz R10, <#[R31 + 48]> */
		/* 821EB294h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821EB294h case   35:*/		return 0x821EB298;
		  /* 821EB298h */ case   36:  		/* lwz R9, <#[R11 + 40]> */
		/* 821EB298h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 821EB298h case   36:*/		return 0x821EB29C;
		  /* 821EB29Ch */ case   37:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 821EB29Ch case   37:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 821EB29Ch case   37:*/		return 0x821EB2A0;
		  /* 821EB2A0h */ case   38:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 821EB2A0h case   38:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 821EB2A0h case   38:*/		return 0x821EB2A4;
		  /* 821EB2A4h */ case   39:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821EB2A4h case   39:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821EB2A4h case   39:*/		return 0x821EB2A8;
		  /* 821EB2A8h */ case   40:  		/* addi R10, R10, 1 */
		/* 821EB2A8h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821EB2A8h case   40:*/		return 0x821EB2AC;
		  /* 821EB2ACh */ case   41:  		/* slw R8, R24, R8 */
		/* 821EB2ACh case   41:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R8);
		/* 821EB2ACh case   41:*/		return 0x821EB2B0;
		  /* 821EB2B0h */ case   42:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821EB2B0h case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821EB2B0h case   42:*/		return 0x821EB2B4;
		  /* 821EB2B4h */ case   43:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821EB2B4h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821EB2B4h case   43:*/		return 0x821EB2B8;
		  /* 821EB2B8h */ case   44:  		/* and. R10, R10, R8 */
		/* 821EB2B8h case   44:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821EB2B8h case   44:*/		return 0x821EB2BC;
		  /* 821EB2BCh */ case   45:  		/* bc 12, CR0_EQ, 8 */
		/* 821EB2BCh case   45:*/		if ( regs.CR[0].eq ) { return 0x821EB2C4;  }
		/* 821EB2BCh case   45:*/		return 0x821EB2C0;
	}
	return 0x821EB2C0;
} // Block from 821EB208h-821EB2C0h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821EB2C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB2C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB2C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB2C0);
		  /* 821EB2C0h */ case    0:  		/* mr R31, R11 */
		/* 821EB2C0h case    0:*/		regs.R31 = regs.R11;
		/* 821EB2C0h case    0:*/		return 0x821EB2C4;
	}
	return 0x821EB2C4;
} // Block from 821EB2C0h-821EB2C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821EB2C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB2C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB2C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB2C4);
		  /* 821EB2C4h */ case    0:  		/* cmplw CR6, R3, R28 */
		/* 821EB2C4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 821EB2C4h case    0:*/		return 0x821EB2C8;
		  /* 821EB2C8h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821EB2C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821EB2D4;  }
		/* 821EB2C8h case    1:*/		return 0x821EB2CC;
		  /* 821EB2CCh */ case    2:  		/* mr R3, R22 */
		/* 821EB2CCh case    2:*/		regs.R3 = regs.R22;
		/* 821EB2CCh case    2:*/		return 0x821EB2D0;
		  /* 821EB2D0h */ case    3:  		/* b 20 */
		/* 821EB2D0h case    3:*/		return 0x821EB2E4;
		/* 821EB2D0h case    3:*/		return 0x821EB2D4;
	}
	return 0x821EB2D4;
} // Block from 821EB2C4h-821EB2D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821EB2D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB2D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB2D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB2D4);
		  /* 821EB2D4h */ case    0:  		/* addi R4, R3, 1 */
		/* 821EB2D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x1);
		/* 821EB2D4h case    0:*/		return 0x821EB2D8;
		  /* 821EB2D8h */ case    1:  		/* mr R5, R27 */
		/* 821EB2D8h case    1:*/		regs.R5 = regs.R27;
		/* 821EB2D8h case    1:*/		return 0x821EB2DC;
		  /* 821EB2DCh */ case    2:  		/* mr R3, R30 */
		/* 821EB2DCh case    2:*/		regs.R3 = regs.R30;
		/* 821EB2DCh case    2:*/		return 0x821EB2E0;
		  /* 821EB2E0h */ case    3:  		/* bl -4672 */
		/* 821EB2E0h case    3:*/		regs.LR = 0x821EB2E4; return 0x821EA0A0;
		/* 821EB2E0h case    3:*/		return 0x821EB2E4;
	}
	return 0x821EB2E4;
} // Block from 821EB2D4h-821EB2E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821EB2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB2E4);
		  /* 821EB2E4h */ case    0:  		/* cmplw CR6, R3, R28 */
		/* 821EB2E4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 821EB2E4h case    0:*/		return 0x821EB2E8;
		  /* 821EB2E8h */ case    1:  		/* bc 4, CR6_GT, -116 */
		/* 821EB2E8h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821EB274;  }
		/* 821EB2E8h case    1:*/		return 0x821EB2EC;
	}
	return 0x821EB2EC;
} // Block from 821EB2E4h-821EB2ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EB2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB2EC);
		  /* 821EB2ECh */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821EB2ECh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821EB2ECh case    0:*/		return 0x821EB2F0;
		  /* 821EB2F0h */ case    1:  		/* stw R31, <#[R29 + 64]> */
		/* 821EB2F0h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000040) );
		/* 821EB2F0h case    1:*/		return 0x821EB2F4;
		  /* 821EB2F4h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 821EB2F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821EB2F4h case    2:*/		return 0x821EB2F8;
		  /* 821EB2F8h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EB2F8h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EB2F8h case    3:*/		return 0x821EB2FC;
		  /* 821EB2FCh */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 821EB2FCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x821EB30C;  }
		/* 821EB2FCh case    4:*/		return 0x821EB300;
		  /* 821EB300h */ case    5:  		/* mr R29, R11 */
		/* 821EB300h case    5:*/		regs.R29 = regs.R11;
		/* 821EB300h case    5:*/		return 0x821EB304;
		  /* 821EB304h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821EB304h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821EB304h case    6:*/		return 0x821EB308;
		  /* 821EB308h */ case    7:  		/* bc 4, CR6_EQ, -212 */
		/* 821EB308h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821EB234;  }
		/* 821EB308h case    7:*/		return 0x821EB30C;
	}
	return 0x821EB30C;
} // Block from 821EB2ECh-821EB30Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821EB30Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB30C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB30C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB30C);
		  /* 821EB30Ch */ case    0:  		/* addi R1, R1, 240 */
		/* 821EB30Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 821EB30Ch case    0:*/		return 0x821EB310;
		  /* 821EB310h */ case    1:  		/* b -1417372 */
		/* 821EB310h case    1:*/		return 0x82091274;
		/* 821EB310h case    1:*/		return 0x821EB314;
	}
	return 0x821EB314;
} // Block from 821EB30Ch-821EB314h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EB314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB314);
		  /* 821EB314h */ case    0:  		/* li R4, 4800 */
		/* 821EB314h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821EB314h case    0:*/		return 0x821EB318;
		  /* 821EB318h */ case    1:  		/* mr R3, R20 */
		/* 821EB318h case    1:*/		regs.R3 = regs.R20;
		/* 821EB318h case    1:*/		return 0x821EB31C;
		  /* 821EB31Ch */ case    2:  		/* bl -627892 */
		/* 821EB31Ch case    2:*/		regs.LR = 0x821EB320; return 0x82151E68;
		/* 821EB31Ch case    2:*/		return 0x821EB320;
	}
	return 0x821EB320;
} // Block from 821EB314h-821EB320h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821EB320h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB320);
		  /* 821EB320h */ case    0:  		/* mfspr R12, LR */
		/* 821EB320h case    0:*/		regs.R12 = regs.LR;
		/* 821EB320h case    0:*/		return 0x821EB324;
		  /* 821EB324h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821EB324h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821EB324h case    1:*/		return 0x821EB328;
		  /* 821EB328h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821EB328h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821EB328h case    2:*/		return 0x821EB32C;
		  /* 821EB32Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 821EB32Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821EB32Ch case    3:*/		return 0x821EB330;
		  /* 821EB330h */ case    4:  		/* lwz R11, <#[R3 + 92]> */
		/* 821EB330h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000005C) );
		/* 821EB330h case    4:*/		return 0x821EB334;
		  /* 821EB334h */ case    5:  		/* li R5, 0 */
		/* 821EB334h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821EB334h case    5:*/		return 0x821EB338;
		  /* 821EB338h */ case    6:  		/* mr R31, R3 */
		/* 821EB338h case    6:*/		regs.R31 = regs.R3;
		/* 821EB338h case    6:*/		return 0x821EB33C;
		  /* 821EB33Ch */ case    7:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 821EB33Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 821EB33Ch case    7:*/		return 0x821EB340;
		  /* 821EB340h */ case    8:  		/* bl -549640 */
		/* 821EB340h case    8:*/		regs.LR = 0x821EB344; return 0x82165038;
		/* 821EB340h case    8:*/		return 0x821EB344;
		  /* 821EB344h */ case    9:  		/* lwz R11, <#[R31 + 4]> */
		/* 821EB344h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821EB344h case    9:*/		return 0x821EB348;
		  /* 821EB348h */ case   10:  		/* stw R3, <#[R31 + 96]> */
		/* 821EB348h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000060) );
		/* 821EB348h case   10:*/		return 0x821EB34C;
		  /* 821EB34Ch */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EB34Ch case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EB34Ch case   11:*/		return 0x821EB350;
		  /* 821EB350h */ case   12:  		/* bc 4, CR0_EQ, 72 */
		/* 821EB350h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821EB398;  }
		/* 821EB350h case   12:*/		return 0x821EB354;
		  /* 821EB354h */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 821EB354h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821EB354h case   13:*/		return 0x821EB358;
		  /* 821EB358h */ case   14:  		/* bc 12, CR0_EQ, 64 */
		/* 821EB358h case   14:*/		if ( regs.CR[0].eq ) { return 0x821EB398;  }
		/* 821EB358h case   14:*/		return 0x821EB35C;
		  /* 821EB35Ch */ case   15:  		/* li R10, 0 */
		/* 821EB35Ch case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821EB35Ch case   15:*/		return 0x821EB360;
		  /* 821EB360h */ case   16:  		/* lwz R9, <#[R11 + 48]> */
		/* 821EB360h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 821EB360h case   16:*/		return 0x821EB364;
		  /* 821EB364h */ case   17:  		/* rlwinm R7, R11, 0, 0, 30 */
		/* 821EB364h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R11);
		/* 821EB364h case   17:*/		return 0x821EB368;
		  /* 821EB368h */ case   18:  		/* stw R10, <#[R11 + 52]> */
		/* 821EB368h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000034) );
		/* 821EB368h case   18:*/		return 0x821EB36C;
		  /* 821EB36Ch */ case   19:  		/* rlwinm R9, R9, 2, 11, 29 */
		/* 821EB36Ch case   19:*/		cpu::op::rlwinm<0,2,11,29>(regs,&regs.R9,regs.R9);
		/* 821EB36Ch case   19:*/		return 0x821EB370;
		  /* 821EB370h */ case   20:  		/* stw R10, <#[R11 + 56]> */
		/* 821EB370h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000038) );
		/* 821EB370h case   20:*/		return 0x821EB374;
		  /* 821EB374h */ case   21:  		/* stw R10, <#[R11 + 60]> */
		/* 821EB374h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 821EB374h case   21:*/		return 0x821EB378;
		  /* 821EB378h */ case   22:  		/* lwz R8, <#[R31 + 96]> */
		/* 821EB378h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000060) );
		/* 821EB378h case   22:*/		return 0x821EB37C;
		  /* 821EB37Ch */ case   23:  		/* add R9, R9, R8 */
		/* 821EB37Ch case   23:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821EB37Ch case   23:*/		return 0x821EB380;
		  /* 821EB380h */ case   24:  		/* stw R11, <#[R9 - 4]> */
		/* 821EB380h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0xFFFFFFFC) );
		/* 821EB380h case   24:*/		return 0x821EB384;
		  /* 821EB384h */ case   25:  		/* lwz R11, <#[R7 + 4]> */
		/* 821EB384h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 821EB384h case   25:*/		return 0x821EB388;
		  /* 821EB388h */ case   26:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821EB388h case   26:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821EB388h case   26:*/		return 0x821EB38C;
		  /* 821EB38Ch */ case   27:  		/* bc 4, CR0_EQ, 12 */
		/* 821EB38Ch case   27:*/		if ( !regs.CR[0].eq ) { return 0x821EB398;  }
		/* 821EB38Ch case   27:*/		return 0x821EB390;
		  /* 821EB390h */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 821EB390h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821EB390h case   28:*/		return 0x821EB394;
		  /* 821EB394h */ case   29:  		/* bc 4, CR6_EQ, -52 */
		/* 821EB394h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821EB360;  }
		/* 821EB394h case   29:*/		return 0x821EB398;
	}
	return 0x821EB398;
} // Block from 821EB320h-821EB398h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821EB398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB398);
		  /* 821EB398h */ case    0:  		/* mr R3, R31 */
		/* 821EB398h case    0:*/		regs.R3 = regs.R31;
		/* 821EB398h case    0:*/		return 0x821EB39C;
		  /* 821EB39Ch */ case    1:  		/* lwz R4, <#[R31 + 92]> */
		/* 821EB39Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000005C) );
		/* 821EB39Ch case    1:*/		return 0x821EB3A0;
		  /* 821EB3A0h */ case    2:  		/* bl -4216 */
		/* 821EB3A0h case    2:*/		regs.LR = 0x821EB3A4; return 0x821EA328;
		/* 821EB3A0h case    2:*/		return 0x821EB3A4;
		  /* 821EB3A4h */ case    3:  		/* lwz R11, <#[R31 + 92]> */
		/* 821EB3A4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 821EB3A4h case    3:*/		return 0x821EB3A8;
		  /* 821EB3A8h */ case    4:  		/* li R6, 0 */
		/* 821EB3A8h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821EB3A8h case    4:*/		return 0x821EB3AC;
		  /* 821EB3ACh */ case    5:  		/* lwz R4, <#[R31 + 96]> */
		/* 821EB3ACh case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000060) );
		/* 821EB3ACh case    5:*/		return 0x821EB3B0;
		  /* 821EB3B0h */ case    6:  		/* mr R3, R31 */
		/* 821EB3B0h case    6:*/		regs.R3 = regs.R31;
		/* 821EB3B0h case    6:*/		return 0x821EB3B4;
		  /* 821EB3B4h */ case    7:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821EB3B4h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821EB3B4h case    7:*/		return 0x821EB3B8;
		  /* 821EB3B8h */ case    8:  		/* bl -517480 */
		/* 821EB3B8h case    8:*/		regs.LR = 0x821EB3BC; return 0x8216CE50;
		/* 821EB3B8h case    8:*/		return 0x821EB3BC;
		  /* 821EB3BCh */ case    9:  		/* addi R1, R1, 96 */
		/* 821EB3BCh case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821EB3BCh case    9:*/		return 0x821EB3C0;
		  /* 821EB3C0h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 821EB3C0h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821EB3C0h case   10:*/		return 0x821EB3C4;
		  /* 821EB3C4h */ case   11:  		/* mtspr LR, R12 */
		/* 821EB3C4h case   11:*/		regs.LR = regs.R12;
		/* 821EB3C4h case   11:*/		return 0x821EB3C8;
		  /* 821EB3C8h */ case   12:  		/* ld R31, <#[R1 - 16]> */
		/* 821EB3C8h case   12:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821EB3C8h case   12:*/		return 0x821EB3CC;
		  /* 821EB3CCh */ case   13:  		/* bclr 20, CR0_LT */
		/* 821EB3CCh case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821EB3CCh case   13:*/		return 0x821EB3D0;
	}
	return 0x821EB3D0;
} // Block from 821EB398h-821EB3D0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821EB3D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB3D0);
		  /* 821EB3D0h */ case    0:  		/* mfspr R12, LR */
		/* 821EB3D0h case    0:*/		regs.R12 = regs.LR;
		/* 821EB3D0h case    0:*/		return 0x821EB3D4;
		  /* 821EB3D4h */ case    1:  		/* bl -1417612 */
		/* 821EB3D4h case    1:*/		regs.LR = 0x821EB3D8; return 0x82091248;
		/* 821EB3D4h case    1:*/		return 0x821EB3D8;
		  /* 821EB3D8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821EB3D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821EB3D8h case    2:*/		return 0x821EB3DC;
		  /* 821EB3DCh */ case    3:  		/* lis R11, -32231 */
		/* 821EB3DCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8219);
		/* 821EB3DCh case    3:*/		return 0x821EB3E0;
		  /* 821EB3E0h */ case    4:  		/* mr R25, R3 */
		/* 821EB3E0h case    4:*/		regs.R25 = regs.R3;
		/* 821EB3E0h case    4:*/		return 0x821EB3E4;
		  /* 821EB3E4h */ case    5:  		/* mr R6, R3 */
		/* 821EB3E4h case    5:*/		regs.R6 = regs.R3;
		/* 821EB3E4h case    5:*/		return 0x821EB3E8;
		  /* 821EB3E8h */ case    6:  		/* addi R5, R11, 28352 */
		/* 821EB3E8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6EC0);
		/* 821EB3E8h case    6:*/		return 0x821EB3EC;
		  /* 821EB3ECh */ case    7:  		/* addi R4, R4, 1 */
		/* 821EB3ECh case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 821EB3ECh case    7:*/		return 0x821EB3F0;
		  /* 821EB3F0h */ case    8:  		/* addi R3, R1, 80 */
		/* 821EB3F0h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821EB3F0h case    8:*/		return 0x821EB3F4;
		  /* 821EB3F4h */ case    9:  		/* bl -348404 */
		/* 821EB3F4h case    9:*/		regs.LR = 0x821EB3F8; return 0x82196300;
		/* 821EB3F4h case    9:*/		return 0x821EB3F8;
		  /* 821EB3F8h */ case   10:  		/* li R26, 1 */
		/* 821EB3F8h case   10:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821EB3F8h case   10:*/		return 0x821EB3FC;
		  /* 821EB3FCh */ case   11:  		/* lwz R27, <#[R1 + 80]> */
		/* 821EB3FCh case   11:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821EB3FCh case   11:*/		return 0x821EB400;
		  /* 821EB400h */ case   12:  		/* lwz R11, <#[R25 + 4]> */
		/* 821EB400h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821EB400h case   12:*/		return 0x821EB404;
		  /* 821EB404h */ case   13:  		/* li R24, 0 */
		/* 821EB404h case   13:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821EB404h case   13:*/		return 0x821EB408;
		  /* 821EB408h */ case   14:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821EB408h case   14:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EB408h case   14:*/		return 0x821EB40C;
		  /* 821EB40Ch */ case   15:  		/* addic R10, R10, -1 */
		/* 821EB40Ch case   15:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821EB40Ch case   15:*/		return 0x821EB410;
		  /* 821EB410h */ case   16:  		/* subfe R10, R10, R10 */
		/* 821EB410h case   16:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821EB410h case   16:*/		return 0x821EB414;
		  /* 821EB414h */ case   17:  		/* and R29, R10, R11 */
		/* 821EB414h case   17:*/		cpu::op::and<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 821EB414h case   17:*/		return 0x821EB418;
		  /* 821EB418h */ case   18:  		/* lwz R11, <#[R29 + 56]> */
		/* 821EB418h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000038) );
		/* 821EB418h case   18:*/		return 0x821EB41C;
		  /* 821EB41Ch */ case   19:  		/* b 12 */
		/* 821EB41Ch case   19:*/		return 0x821EB428;
		/* 821EB41Ch case   19:*/		return 0x821EB420;
		  /* 821EB420h */ case   20:  		/* mr R29, R11 */
		/* 821EB420h case   20:*/		regs.R29 = regs.R11;
		/* 821EB420h case   20:*/		return 0x821EB424;
		  /* 821EB424h */ case   21:  		/* lwz R11, <#[R11 + 56]> */
		/* 821EB424h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 821EB424h case   21:*/		return 0x821EB428;
	}
	return 0x821EB428;
} // Block from 821EB3D0h-821EB428h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821EB428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB428);
		  /* 821EB428h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821EB428h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821EB428h case    0:*/		return 0x821EB42C;
		  /* 821EB42Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821EB42Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821EB420;  }
		/* 821EB42Ch case    1:*/		return 0x821EB430;
		  /* 821EB430h */ case    2:  		/* nor R11, R27, R27 */
		/* 821EB430h case    2:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R27,regs.R27);
		/* 821EB430h case    2:*/		return 0x821EB434;
		  /* 821EB434h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821EB434h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821EB434h case    3:*/		return 0x821EB438;
		  /* 821EB438h */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 821EB438h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821EB448;  }
		/* 821EB438h case    4:*/		return 0x821EB43C;
		  /* 821EB43Ch */ case    5:  		/* mr R27, R26 */
		/* 821EB43Ch case    5:*/		regs.R27 = regs.R26;
		/* 821EB43Ch case    5:*/		return 0x821EB440;
		  /* 821EB440h */ case    6:  		/* stw R26, <#[R1 + 80]> */
		/* 821EB440h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000050) );
		/* 821EB440h case    6:*/		return 0x821EB444;
		  /* 821EB444h */ case    7:  		/* b 24 */
		/* 821EB444h case    7:*/		return 0x821EB45C;
		/* 821EB444h case    7:*/		return 0x821EB448;
	}
	return 0x821EB448;
} // Block from 821EB428h-821EB448h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821EB448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB448);
		  /* 821EB448h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821EB448h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821EB448h case    0:*/		return 0x821EB44C;
		  /* 821EB44Ch */ case    1:  		/* li R4, 0 */
		/* 821EB44Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821EB44Ch case    1:*/		return 0x821EB450;
		  /* 821EB450h */ case    2:  		/* addi R3, R27, 4 */
		/* 821EB450h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R27,0x4);
		/* 821EB450h case    2:*/		return 0x821EB454;
		  /* 821EB454h */ case    3:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821EB454h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821EB454h case    3:*/		return 0x821EB458;
		  /* 821EB458h */ case    4:  		/* bl -1417496 */
		/* 821EB458h case    4:*/		regs.LR = 0x821EB45C; return 0x82091340;
		/* 821EB458h case    4:*/		return 0x821EB45C;
	}
	return 0x821EB45C;
} // Block from 821EB448h-821EB45Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821EB45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB45C);
		  /* 821EB45Ch */ case    0:  		/* lwz R31, <#[R29 + 12]> */
		/* 821EB45Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x0000000C) );
		/* 821EB45Ch case    0:*/		return 0x821EB460;
		  /* 821EB460h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821EB460h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821EB460h case    1:*/		return 0x821EB464;
		  /* 821EB464h */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 821EB464h case    2:*/		if ( regs.CR[6].eq ) { return 0x821EB4D0;  }
		/* 821EB464h case    2:*/		return 0x821EB468;
		  /* 821EB468h */ case    3:  		/* lwz R8, <#[R31]> */
		/* 821EB468h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 821EB468h case    3:*/		return 0x821EB46C;
		  /* 821EB46Ch */ case    4:  		/* lwz R11, <#[R8 + 52]> */
		/* 821EB46Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000034) );
		/* 821EB46Ch case    4:*/		return 0x821EB470;
		  /* 821EB470h */ case    5:  		/* cmplw CR6, R11, R29 */
		/* 821EB470h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821EB470h case    5:*/		return 0x821EB474;
		  /* 821EB474h */ case    6:  		/* bc 12, CR6_EQ, 84 */
		/* 821EB474h case    6:*/		if ( regs.CR[6].eq ) { return 0x821EB4C8;  }
		/* 821EB474h case    6:*/		return 0x821EB478;
		  /* 821EB478h */ case    7:  		/* lwz R11, <#[R8 + 48]> */
		/* 821EB478h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000030) );
		/* 821EB478h case    7:*/		return 0x821EB47C;
		  /* 821EB47Ch */ case    8:  		/* rlwinm. R10, R11, 13, 31, 31 */
		/* 821EB47Ch case    8:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R11);
		/* 821EB47Ch case    8:*/		return 0x821EB480;
		  /* 821EB480h */ case    9:  		/* bc 4, CR0_EQ, 72 */
		/* 821EB480h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821EB4C8;  }
		/* 821EB480h case    9:*/		return 0x821EB484;
		  /* 821EB484h */ case   10:  		/* nor R10, R27, R27 */
		/* 821EB484h case   10:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R27,regs.R27);
		/* 821EB484h case   10:*/		return 0x821EB488;
		  /* 821EB488h */ case   11:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821EB488h case   11:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821EB488h case   11:*/		return 0x821EB48C;
		  /* 821EB48Ch */ case   12:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821EB48Ch case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821EB48Ch case   12:*/		return 0x821EB490;
		  /* 821EB490h */ case   13:  		/* addi R9, R27, 4 */
		/* 821EB490h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0x4);
		/* 821EB490h case   13:*/		return 0x821EB494;
		  /* 821EB494h */ case   14:  		/* bc 4, CR0_EQ, 8 */
		/* 821EB494h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821EB49C;  }
		/* 821EB494h case   14:*/		return 0x821EB498;
		  /* 821EB498h */ case   15:  		/* addi R9, R1, 80 */
		/* 821EB498h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 821EB498h case   15:*/		return 0x821EB49C;
	}
	return 0x821EB49C;
} // Block from 821EB45Ch-821EB49Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821EB49Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB49C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB49C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB49C);
		  /* 821EB49Ch */ case    0:  		/* addi R11, R11, 1 */
		/* 821EB49Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821EB49Ch case    0:*/		return 0x821EB4A0;
		  /* 821EB4A0h */ case    1:  		/* addi R4, R8, 84 */
		/* 821EB4A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R8,0x54);
		/* 821EB4A0h case    1:*/		return 0x821EB4A4;
		  /* 821EB4A4h */ case    2:  		/* rlwinm R10, R11, 29, 3, 29 */
		/* 821EB4A4h case    2:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R11);
		/* 821EB4A4h case    2:*/		return 0x821EB4A8;
		  /* 821EB4A8h */ case    3:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821EB4A8h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821EB4A8h case    3:*/		return 0x821EB4AC;
		  /* 821EB4ACh */ case    4:  		/* addi R3, R1, 80 */
		/* 821EB4ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821EB4ACh case    4:*/		return 0x821EB4B0;
		  /* 821EB4B0h */ case    5:  		/* slw R11, R26, R11 */
		/* 821EB4B0h case    5:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 821EB4B0h case    5:*/		return 0x821EB4B4;
		  /* 821EB4B4h */ case    6:  		/* lwzx R8, <#[R10 + R9]> */
		/* 821EB4B4h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821EB4B4h case    6:*/		return 0x821EB4B8;
		  /* 821EB4B8h */ case    7:  		/* or R11, R11, R8 */
		/* 821EB4B8h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821EB4B8h case    7:*/		return 0x821EB4BC;
		  /* 821EB4BCh */ case    8:  		/* stwx R11, <#[R10 + R9]> */
		/* 821EB4BCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821EB4BCh case    8:*/		return 0x821EB4C0;
		  /* 821EB4C0h */ case    9:  		/* bl -4904 */
		/* 821EB4C0h case    9:*/		regs.LR = 0x821EB4C4; return 0x821EA198;
		/* 821EB4C0h case    9:*/		return 0x821EB4C4;
		  /* 821EB4C4h */ case   10:  		/* lwz R27, <#[R1 + 80]> */
		/* 821EB4C4h case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821EB4C4h case   10:*/		return 0x821EB4C8;
	}
	return 0x821EB4C8;
} // Block from 821EB49Ch-821EB4C8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821EB4C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB4C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB4C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB4C8);
		  /* 821EB4C8h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821EB4C8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821EB4C8h case    0:*/		return 0x821EB4CC;
		  /* 821EB4CCh */ case    1:  		/* b -108 */
		/* 821EB4CCh case    1:*/		return 0x821EB460;
		/* 821EB4CCh case    1:*/		return 0x821EB4D0;
	}
	return 0x821EB4D0;
} // Block from 821EB4C8h-821EB4D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EB4D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB4D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB4D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB4D0);
		  /* 821EB4D0h */ case    0:  		/* lwz R28, <#[R29 + 56]> */
		/* 821EB4D0h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000038) );
		/* 821EB4D0h case    0:*/		return 0x821EB4D4;
		  /* 821EB4D4h */ case    1:  		/* b 252 */
		/* 821EB4D4h case    1:*/		return 0x821EB5D0;
		/* 821EB4D4h case    1:*/		return 0x821EB4D8;
		  /* 821EB4D8h */ case    2:  		/* lwz R11, <#[R28 + 48]> */
		/* 821EB4D8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 821EB4D8h case    2:*/		return 0x821EB4DC;
		  /* 821EB4DCh */ case    3:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821EB4DCh case    3:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821EB4DCh case    3:*/		return 0x821EB4E0;
		  /* 821EB4E0h */ case    4:  		/* bc 4, CR0_EQ, 236 */
		/* 821EB4E0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821EB5CC;  }
		/* 821EB4E0h case    4:*/		return 0x821EB4E4;
		  /* 821EB4E4h */ case    5:  		/* addi R30, R28, 84 */
		/* 821EB4E4h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R28,0x54);
		/* 821EB4E4h case    5:*/		return 0x821EB4E8;
		  /* 821EB4E8h */ case    6:  		/* li R4, 0 */
		/* 821EB4E8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821EB4E8h case    6:*/		return 0x821EB4EC;
		  /* 821EB4ECh */ case    7:  		/* mr R3, R30 */
		/* 821EB4ECh case    7:*/		regs.R3 = regs.R30;
		/* 821EB4ECh case    7:*/		return 0x821EB4F0;
		  /* 821EB4F0h */ case    8:  		/* bl -12040 */
		/* 821EB4F0h case    8:*/		regs.LR = 0x821EB4F4; return 0x821E85E8;
		/* 821EB4F0h case    8:*/		return 0x821EB4F4;
		  /* 821EB4F4h */ case    9:  		/* mr R31, R3 */
		/* 821EB4F4h case    9:*/		regs.R31 = regs.R3;
		/* 821EB4F4h case    9:*/		return 0x821EB4F8;
		  /* 821EB4F8h */ case   10:  		/* lwz R11, <#[R30]> */
		/* 821EB4F8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821EB4F8h case   10:*/		return 0x821EB4FC;
		  /* 821EB4FCh */ case   11:  		/* nor R10, R11, R11 */
		/* 821EB4FCh case   11:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 821EB4FCh case   11:*/		return 0x821EB500;
		  /* 821EB500h */ case   12:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821EB500h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821EB500h case   12:*/		return 0x821EB504;
		  /* 821EB504h */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 821EB504h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821EB510;  }
		/* 821EB504h case   13:*/		return 0x821EB508;
		  /* 821EB508h */ case   14:  		/* li R11, 31 */
		/* 821EB508h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x1F);
		/* 821EB508h case   14:*/		return 0x821EB50C;
		  /* 821EB50Ch */ case   15:  		/* b 16 */
		/* 821EB50Ch case   15:*/		return 0x821EB51C;
		/* 821EB50Ch case   15:*/		return 0x821EB510;
	}
	return 0x821EB510;
} // Block from 821EB4D0h-821EB510h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821EB510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB510);
		  /* 821EB510h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 821EB510h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821EB510h case    0:*/		return 0x821EB514;
		  /* 821EB514h */ case    1:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821EB514h case    1:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821EB514h case    1:*/		return 0x821EB518;
		  /* 821EB518h */ case    2:  		/* addi R11, R11, -1 */
		/* 821EB518h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821EB518h case    2:*/		return 0x821EB51C;
	}
	return 0x821EB51C;
} // Block from 821EB510h-821EB51Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821EB51Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB51C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB51C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB51C);
		  /* 821EB51Ch */ case    0:  		/* addi R11, R11, -1 */
		/* 821EB51Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821EB51Ch case    0:*/		return 0x821EB520;
		  /* 821EB520h */ case    1:  		/* cmplw CR6, R31, R11 */
		/* 821EB520h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821EB520h case    1:*/		return 0x821EB524;
		  /* 821EB524h */ case    2:  		/* bc 12, CR6_GT, 168 */
		/* 821EB524h case    2:*/		if ( regs.CR[6].gt ) { return 0x821EB5CC;  }
		/* 821EB524h case    2:*/		return 0x821EB528;
		  /* 821EB528h */ case    3:  		/* lwz R11, <#[R25 + 96]> */
		/* 821EB528h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000060) );
		/* 821EB528h case    3:*/		return 0x821EB52C;
		  /* 821EB52Ch */ case    4:  		/* rlwinm R10, R31, 2, 0, 29 */
		/* 821EB52Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R31);
		/* 821EB52Ch case    4:*/		return 0x821EB530;
		  /* 821EB530h */ case    5:  		/* add R11, R10, R11 */
		/* 821EB530h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821EB530h case    5:*/		return 0x821EB534;
		  /* 821EB534h */ case    6:  		/* lwz R9, <#[R11 - 4]> */
		/* 821EB534h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821EB534h case    6:*/		return 0x821EB538;
		  /* 821EB538h */ case    7:  		/* lwz R11, <#[R9 + 52]> */
		/* 821EB538h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000034) );
		/* 821EB538h case    7:*/		return 0x821EB53C;
		  /* 821EB53Ch */ case    8:  		/* cmplw CR6, R11, R29 */
		/* 821EB53Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821EB53Ch case    8:*/		return 0x821EB540;
		  /* 821EB540h */ case    9:  		/* bc 12, CR6_EQ, 76 */
		/* 821EB540h case    9:*/		if ( regs.CR[6].eq ) { return 0x821EB58C;  }
		/* 821EB540h case    9:*/		return 0x821EB544;
		  /* 821EB544h */ case   10:  		/* nor R11, R27, R27 */
		/* 821EB544h case   10:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R27,regs.R27);
		/* 821EB544h case   10:*/		return 0x821EB548;
		  /* 821EB548h */ case   11:  		/* lwz R10, <#[R9 + 48]> */
		/* 821EB548h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000030) );
		/* 821EB548h case   11:*/		return 0x821EB54C;
		  /* 821EB54Ch */ case   12:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 821EB54Ch case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 821EB54Ch case   12:*/		return 0x821EB550;
		  /* 821EB550h */ case   13:  		/* rlwinm R11, R10, 0, 13, 31 */
		/* 821EB550h case   13:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R10);
		/* 821EB550h case   13:*/		return 0x821EB554;
		  /* 821EB554h */ case   14:  		/* addi R8, R27, 4 */
		/* 821EB554h case   14:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R27,0x4);
		/* 821EB554h case   14:*/		return 0x821EB558;
		  /* 821EB558h */ case   15:  		/* bc 4, CR0_EQ, 8 */
		/* 821EB558h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821EB560;  }
		/* 821EB558h case   15:*/		return 0x821EB55C;
		  /* 821EB55Ch */ case   16:  		/* addi R8, R1, 80 */
		/* 821EB55Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 821EB55Ch case   16:*/		return 0x821EB560;
	}
	return 0x821EB560;
} // Block from 821EB51Ch-821EB560h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821EB560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB560);
		  /* 821EB560h */ case    0:  		/* addi R11, R11, 1 */
		/* 821EB560h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821EB560h case    0:*/		return 0x821EB564;
		  /* 821EB564h */ case    1:  		/* addi R4, R9, 84 */
		/* 821EB564h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x54);
		/* 821EB564h case    1:*/		return 0x821EB568;
		  /* 821EB568h */ case    2:  		/* rlwinm R10, R11, 29, 3, 29 */
		/* 821EB568h case    2:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R11);
		/* 821EB568h case    2:*/		return 0x821EB56C;
		  /* 821EB56Ch */ case    3:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821EB56Ch case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821EB56Ch case    3:*/		return 0x821EB570;
		  /* 821EB570h */ case    4:  		/* addi R3, R1, 80 */
		/* 821EB570h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821EB570h case    4:*/		return 0x821EB574;
		  /* 821EB574h */ case    5:  		/* slw R11, R26, R11 */
		/* 821EB574h case    5:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 821EB574h case    5:*/		return 0x821EB578;
		  /* 821EB578h */ case    6:  		/* lwzx R9, <#[R10 + R8]> */
		/* 821EB578h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821EB578h case    6:*/		return 0x821EB57C;
		  /* 821EB57Ch */ case    7:  		/* or R11, R11, R9 */
		/* 821EB57Ch case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821EB57Ch case    7:*/		return 0x821EB580;
		  /* 821EB580h */ case    8:  		/* stwx R11, <#[R10 + R8]> */
		/* 821EB580h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821EB580h case    8:*/		return 0x821EB584;
		  /* 821EB584h */ case    9:  		/* bl -5100 */
		/* 821EB584h case    9:*/		regs.LR = 0x821EB588; return 0x821EA198;
		/* 821EB584h case    9:*/		return 0x821EB588;
		  /* 821EB588h */ case   10:  		/* lwz R27, <#[R1 + 80]> */
		/* 821EB588h case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821EB588h case   10:*/		return 0x821EB58C;
	}
	return 0x821EB58C;
} // Block from 821EB560h-821EB58Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821EB58Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB58C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB58C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB58C);
		  /* 821EB58Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821EB58Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821EB58Ch case    0:*/		return 0x821EB590;
		  /* 821EB590h */ case    1:  		/* nor R10, R11, R11 */
		/* 821EB590h case    1:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 821EB590h case    1:*/		return 0x821EB594;
		  /* 821EB594h */ case    2:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821EB594h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821EB594h case    2:*/		return 0x821EB598;
		  /* 821EB598h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821EB598h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EB5A4;  }
		/* 821EB598h case    3:*/		return 0x821EB59C;
		  /* 821EB59Ch */ case    4:  		/* li R11, 31 */
		/* 821EB59Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1F);
		/* 821EB59Ch case    4:*/		return 0x821EB5A0;
		  /* 821EB5A0h */ case    5:  		/* b 16 */
		/* 821EB5A0h case    5:*/		return 0x821EB5B0;
		/* 821EB5A0h case    5:*/		return 0x821EB5A4;
	}
	return 0x821EB5A4;
} // Block from 821EB58Ch-821EB5A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821EB5A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB5A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB5A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB5A4);
		  /* 821EB5A4h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 821EB5A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821EB5A4h case    0:*/		return 0x821EB5A8;
		  /* 821EB5A8h */ case    1:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821EB5A8h case    1:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821EB5A8h case    1:*/		return 0x821EB5AC;
		  /* 821EB5ACh */ case    2:  		/* addi R11, R11, -1 */
		/* 821EB5ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821EB5ACh case    2:*/		return 0x821EB5B0;
	}
	return 0x821EB5B0;
} // Block from 821EB5A4h-821EB5B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821EB5B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB5B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB5B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB5B0);
		  /* 821EB5B0h */ case    0:  		/* addi R11, R11, -1 */
		/* 821EB5B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821EB5B0h case    0:*/		return 0x821EB5B4;
		  /* 821EB5B4h */ case    1:  		/* cmplw CR6, R31, R11 */
		/* 821EB5B4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821EB5B4h case    1:*/		return 0x821EB5B8;
		  /* 821EB5B8h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821EB5B8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821EB5C4;  }
		/* 821EB5B8h case    2:*/		return 0x821EB5BC;
		  /* 821EB5BCh */ case    3:  		/* li R31, -1 */
		/* 821EB5BCh case    3:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 821EB5BCh case    3:*/		return 0x821EB5C0;
		  /* 821EB5C0h */ case    4:  		/* b -200 */
		/* 821EB5C0h case    4:*/		return 0x821EB4F8;
		/* 821EB5C0h case    4:*/		return 0x821EB5C4;
	}
	return 0x821EB5C4;
} // Block from 821EB5B0h-821EB5C4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821EB5C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB5C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB5C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB5C4);
		  /* 821EB5C4h */ case    0:  		/* addi R4, R31, 1 */
		/* 821EB5C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x1);
		/* 821EB5C4h case    0:*/		return 0x821EB5C8;
		  /* 821EB5C8h */ case    1:  		/* b -220 */
		/* 821EB5C8h case    1:*/		return 0x821EB4EC;
		/* 821EB5C8h case    1:*/		return 0x821EB5CC;
	}
	return 0x821EB5CC;
} // Block from 821EB5C4h-821EB5CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821EB5CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB5CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB5CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB5CC);
		  /* 821EB5CCh */ case    0:  		/* lwz R28, <#[R28 + 60]> */
		/* 821EB5CCh case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000003C) );
		/* 821EB5CCh case    0:*/		return 0x821EB5D0;
	}
	return 0x821EB5D0;
} // Block from 821EB5CCh-821EB5D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821EB5D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB5D0);
		  /* 821EB5D0h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821EB5D0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821EB5D0h case    0:*/		return 0x821EB5D4;
		  /* 821EB5D4h */ case    1:  		/* bc 4, CR6_EQ, -252 */
		/* 821EB5D4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821EB4D8;  }
		/* 821EB5D4h case    1:*/		return 0x821EB5D8;
		  /* 821EB5D8h */ case    2:  		/* addi R31, R29, 84 */
		/* 821EB5D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R29,0x54);
		/* 821EB5D8h case    2:*/		return 0x821EB5DC;
		  /* 821EB5DCh */ case    3:  		/* addi R4, R1, 80 */
		/* 821EB5DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821EB5DCh case    3:*/		return 0x821EB5E0;
		  /* 821EB5E0h */ case    4:  		/* mr R3, R31 */
		/* 821EB5E0h case    4:*/		regs.R3 = regs.R31;
		/* 821EB5E0h case    4:*/		return 0x821EB5E4;
		  /* 821EB5E4h */ case    5:  		/* bl -5076 */
		/* 821EB5E4h case    5:*/		regs.LR = 0x821EB5E8; return 0x821EA210;
		/* 821EB5E4h case    5:*/		return 0x821EB5E8;
		  /* 821EB5E8h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821EB5E8h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821EB5E8h case    6:*/		return 0x821EB5EC;
		  /* 821EB5ECh */ case    7:  		/* bc 4, CR0_EQ, 20 */
		/* 821EB5ECh case    7:*/		if ( !regs.CR[0].eq ) { return 0x821EB600;  }
		/* 821EB5ECh case    7:*/		return 0x821EB5F0;
		  /* 821EB5F0h */ case    8:  		/* addi R4, R1, 80 */
		/* 821EB5F0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821EB5F0h case    8:*/		return 0x821EB5F4;
		  /* 821EB5F4h */ case    9:  		/* mr R3, R31 */
		/* 821EB5F4h case    9:*/		regs.R3 = regs.R31;
		/* 821EB5F4h case    9:*/		return 0x821EB5F8;
		  /* 821EB5F8h */ case   10:  		/* bl -500208 */
		/* 821EB5F8h case   10:*/		regs.LR = 0x821EB5FC; return 0x82171408;
		/* 821EB5F8h case   10:*/		return 0x821EB5FC;
		  /* 821EB5FCh */ case   11:  		/* mr R24, R26 */
		/* 821EB5FCh case   11:*/		regs.R24 = regs.R26;
		/* 821EB5FCh case   11:*/		return 0x821EB600;
	}
	return 0x821EB600;
} // Block from 821EB5D0h-821EB600h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821EB600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB600);
		  /* 821EB600h */ case    0:  		/* lwz R10, <#[R29 + 60]> */
		/* 821EB600h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000003C) );
		/* 821EB600h case    0:*/		return 0x821EB604;
		  /* 821EB604h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821EB604h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821EB604h case    1:*/		return 0x821EB608;
		  /* 821EB608h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 821EB608h case    2:*/		if ( regs.CR[6].eq ) { return 0x821EB62C;  }
		/* 821EB608h case    2:*/		return 0x821EB60C;
		  /* 821EB60Ch */ case    3:  		/* lwz R11, <#[R10 + 56]> */
		/* 821EB60Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000038) );
		/* 821EB60Ch case    3:*/		return 0x821EB610;
		  /* 821EB610h */ case    4:  		/* mr R29, R10 */
		/* 821EB610h case    4:*/		regs.R29 = regs.R10;
		/* 821EB610h case    4:*/		return 0x821EB614;
		  /* 821EB614h */ case    5:  		/* b 12 */
		/* 821EB614h case    5:*/		return 0x821EB620;
		/* 821EB614h case    5:*/		return 0x821EB618;
		  /* 821EB618h */ case    6:  		/* mr R29, R11 */
		/* 821EB618h case    6:*/		regs.R29 = regs.R11;
		/* 821EB618h case    6:*/		return 0x821EB61C;
		  /* 821EB61Ch */ case    7:  		/* lwz R11, <#[R11 + 56]> */
		/* 821EB61Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 821EB61Ch case    7:*/		return 0x821EB620;
	}
	return 0x821EB620;
} // Block from 821EB600h-821EB620h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821EB620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB620);
		  /* 821EB620h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821EB620h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821EB620h case    0:*/		return 0x821EB624;
		  /* 821EB624h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821EB624h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821EB618;  }
		/* 821EB624h case    1:*/		return 0x821EB628;
		  /* 821EB628h */ case    2:  		/* b 8 */
		/* 821EB628h case    2:*/		return 0x821EB630;
		/* 821EB628h case    2:*/		return 0x821EB62C;
	}
	return 0x821EB62C;
} // Block from 821EB620h-821EB62Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821EB62Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB62C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB62C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB62C);
		  /* 821EB62Ch */ case    0:  		/* lwz R29, <#[R29 + 52]> */
		/* 821EB62Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000034) );
		/* 821EB62Ch case    0:*/		return 0x821EB630;
	}
	return 0x821EB630;
} // Block from 821EB62Ch-821EB630h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821EB630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB630);
		  /* 821EB630h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821EB630h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821EB630h case    0:*/		return 0x821EB634;
		  /* 821EB634h */ case    1:  		/* bc 4, CR6_EQ, -516 */
		/* 821EB634h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821EB430;  }
		/* 821EB634h case    1:*/		return 0x821EB638;
		  /* 821EB638h */ case    2:  		/* rlwinm. R11, R24, 0, 24, 31 */
		/* 821EB638h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R24);
		/* 821EB638h case    2:*/		return 0x821EB63C;
		  /* 821EB63Ch */ case    3:  		/* bc 4, CR0_EQ, -572 */
		/* 821EB63Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821EB400;  }
		/* 821EB63Ch case    3:*/		return 0x821EB640;
		  /* 821EB640h */ case    4:  		/* addi R1, R1, 160 */
		/* 821EB640h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821EB640h case    4:*/		return 0x821EB644;
		  /* 821EB644h */ case    5:  		/* b -1418156 */
		/* 821EB644h case    5:*/		return 0x82091298;
		/* 821EB644h case    5:*/		return 0x821EB648;
	}
	return 0x821EB648;
} // Block from 821EB630h-821EB648h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821EB648h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB648);
		  /* 821EB648h */ case    0:  		/* mfspr R12, LR */
		/* 821EB648h case    0:*/		regs.R12 = regs.LR;
		/* 821EB648h case    0:*/		return 0x821EB64C;
		  /* 821EB64Ch */ case    1:  		/* bl -1418248 */
		/* 821EB64Ch case    1:*/		regs.LR = 0x821EB650; return 0x82091244;
		/* 821EB64Ch case    1:*/		return 0x821EB650;
		  /* 821EB650h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821EB650h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821EB650h case    2:*/		return 0x821EB654;
		  /* 821EB654h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821EB654h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821EB654h case    3:*/		return 0x821EB658;
		  /* 821EB658h */ case    4:  		/* mr R27, R3 */
		/* 821EB658h case    4:*/		regs.R27 = regs.R3;
		/* 821EB658h case    4:*/		return 0x821EB65C;
		  /* 821EB65Ch */ case    5:  		/* li R28, 0 */
		/* 821EB65Ch case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821EB65Ch case    5:*/		return 0x821EB660;
		  /* 821EB660h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EB660h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EB660h case    6:*/		return 0x821EB664;
		  /* 821EB664h */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 821EB664h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821EB68C;  }
		/* 821EB664h case    7:*/		return 0x821EB668;
		  /* 821EB668h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821EB668h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821EB668h case    8:*/		return 0x821EB66C;
		  /* 821EB66Ch */ case    9:  		/* bc 12, CR0_EQ, 32 */
		/* 821EB66Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821EB68C;  }
		/* 821EB66Ch case    9:*/		return 0x821EB670;
		  /* 821EB670h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821EB670h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821EB670h case   10:*/		return 0x821EB674;
		  /* 821EB674h */ case   11:  		/* addi R28, R28, 1 */
		/* 821EB674h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821EB674h case   11:*/		return 0x821EB678;
		  /* 821EB678h */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 821EB678h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821EB678h case   12:*/		return 0x821EB67C;
		  /* 821EB67Ch */ case   13:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821EB67Ch case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821EB67Ch case   13:*/		return 0x821EB680;
		  /* 821EB680h */ case   14:  		/* bc 4, CR0_EQ, 12 */
		/* 821EB680h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821EB68C;  }
		/* 821EB680h case   14:*/		return 0x821EB684;
		  /* 821EB684h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821EB684h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821EB684h case   15:*/		return 0x821EB688;
		  /* 821EB688h */ case   16:  		/* bc 4, CR6_EQ, -24 */
		/* 821EB688h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821EB670;  }
		/* 821EB688h case   16:*/		return 0x821EB68C;
	}
	return 0x821EB68C;
} // Block from 821EB648h-821EB68Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821EB68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821EB68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821EB68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821EB68C);
		  /* 821EB68Ch */ case    0:  		/* li R5, 0 */
		/* 821EB68Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821EB68Ch case    0:*/		return 0x821EB690;
		  /* 821EB690h */ case    1:  		/* rlwinm R4, R28, 2, 0, 29 */
		/* 821EB690h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R28);
		/* 821EB690h case    1:*/		return 0x821EB694;
		  /* 821EB694h */ case    2:  		/* mr R3, R27 */
		/* 821EB694h case    2:*/		regs.R3 = regs.R27;
		/* 821EB694h case    2:*/		return 0x821EB698;
		  /* 821EB698h */ case    3:  		/* bl -550496 */
		/* 821EB698h case    3:*/		regs.LR = 0x821EB69C; return 0x82165038;
		/* 821EB698h case    3:*/		return 0x821EB69C;
		  /* 821EB69Ch */ case    4:  		/* lwz R31, <#[R27 + 4]> */
		/* 821EB69Ch case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000004) );
		/* 821EB69Ch case    4:*/		return 0x821EB6A0;
		  /* 821EB6A0h */ case    5:  		/* li R23, 1 */
		/* 821EB6A0h case    5:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821EB6A0h case    5:*/		return 0x821EB6A4;
		  /* 821EB6A4h */ case    6:  		/* stw R3, <#[R27 + 96]> */
		/* 821EB6A4h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000060) );
		/* 821EB6A4h case    6:*/		return 0x821EB6A8;
		  /* 821EB6A8h */ case    7:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821EB6A8h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821EB6A8h case    7:*/		return 0x821EB6AC;
		  /* 821EB6ACh */ case    8:  		/* mr R30, R23 */
		/* 821EB6ACh case    8:*/		regs.R30 = regs.R23;
		/* 821EB6ACh case    8:*/		return 0x821EB6B0;
		  /* 821EB6B0h */ case    9:  		/* bc 4, CR0_EQ, 104 */
		/* 821EB6B0h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821EB718;  }
		/* 821EB6B0h case    9:*/		return 0x821EB6B4;
		  /* 821EB6B4h */ case   10:  		/* cmplwi CR0, R31, 0 */
		/* 821EB6B4h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821EB6B4h case   10:*/		return 0x821EB6B8;
		  /* 821EB6B8h */ case   11:  		/* bc 12, CR0_EQ, 96 */
		/* 821EB6B8h case   11:*/		if ( regs.CR[0].eq ) { return 0x821EB718;  }
		/* 821EB6B8h case   11:*/		return 0x821EB6BC;
		  /* 821EB6BCh */ case   12:  		/* li R29, 4 */
		/* 821EB6BCh case   12:*/		cpu::op::li<0>(regs,&regs.R29,0x4);
		/* 821EB6BCh case   12:*/		return 0x821EB6C0;
		  /* 821EB6C0h */ case   13:  		/* lis R11, 31 */
		/* 821EB6C0h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0x1F);
		/* 821EB6C0h case   13:*/		return 0x821EB6C4;
		  /* 821EB6C4h */ case   14:  		/* ori R11, R11, 65532 */
		/* 821EB6C4h case   14:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFC);
		/* 821EB6C4h case   14:*/		return 0x821EB6C8;
		  /* 821EB6C8h */ case   15:  		/* cmplw CR6, R29, R11 */
		/* 821EB6C8h case   15:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821EB6C8h case   15:*/		return 0x821EB6CC;
		  /* 821EB6CCh */ case   16:  		/* bc 12, CR6_GT, 264 */
		/* 821EB6CCh case   16:*/		if ( regs.CR[6].gt ) { return 0x821EB7D4;  }
		/* 821EB6CCh case   16:*/		return 0x821EB6D0;
		  /* 821EB6D0h */ case   17:  		/* lwz R11, <#[R31 + 48]> */
		/* 821EB6D0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821EB6D0h case   17:*/		return 0x821EB6D4;
		  /* 821EB6D4h */ case   18:  		/* addi R3, R31, 84 */
		/* 821EB6D4h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x54);
		/* 821EB6D4h case   18:*/		return 0x821EB6D8;
		  /* 821EB6D8h */ case   19:  		/* stw R23, <#[R31 + 84]> */
		/* 821EB6D8h case   19:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000054) );
		/* 821EB6D8h case   19:*/		return 0x821EB6DC;
		  /* 821EB6DCh */ case   20:  		/* addi R4, R28, 1 */
		/* 821EB6DCh case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R28,0x1);
		/* 821EB6DCh case   20:*/		return 0x821EB6E0;
		  /* 821EB6E0h */ case   21:  		/* rlwimi R11, R30, 0, 13, 31 */
		/* 821EB6E0h case   21:*/		cpu::op::rlwimi<0,0,13,31>(regs,&regs.R11,regs.R30);
		/* 821EB6E0h case   21:*/		return 0x821EB6E4;
		  /* 821EB6E4h */ case   22:  		/* stw R11, <#[R31 + 48]> */
		/* 821EB6E4h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821EB6E4h case   22:*/		return 0x821EB6E8;
		  /* 821EB6E8h */ case   23:  		/* bl -496680 */
		/* 821EB6E8h case   23:*/		regs.LR = 0x821EB6EC; return 0x821722C0;
		/* 821EB6E8h case   23:*/		return 0x821EB6EC;
		  /* 821EB6ECh */ case   24:  		/* lwz R11, <#[R27 + 96]> */
		/* 821EB6ECh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000060) );
		/* 821EB6ECh case   24:*/		return 0x821EB6F0;
		  /* 821EB6F0h */ case   25:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 821EB6F0h case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 821EB6F0h case   25:*/		return 0x821EB6F4;
		  /* 821EB6F4h */ case   26:  		/* add R11, R11, R29 */
		/* 821EB6F4h case   26:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 821EB6F4h case   26:*/		return 0x821EB6F8;
		  /* 821EB6F8h */ case   27:  		/* addi R30, R30, 1 */
		/* 821EB6F8h case   27:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821EB6F8h case   27:*/		return 0x821EB6FC;
		  /* 821EB6FCh */ case   28:  		/* addi R29, R29, 4 */
		/* 821EB6FCh case   28:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821EB6FCh case   28:*/		return 0x821EB700;
		  /* 821EB700h */ case   29:  		/* stw R31, <#[R11 - 4]> */
		/* 821EB700h case   29:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821EB700h case   29:*/		return 0x821EB704;
		  /* 821EB704h */ case   30:  		/* lwz R31, <#[R10 + 4]> */
		/* 821EB704h case   30:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 821EB704h case   30:*/		return 0x821EB708;
		  /* 821EB708h */ case   31:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821EB708h case   31:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821EB708h case   31:*/		return 0x821EB70C;
		  /* 821EB70Ch */ case   32:  		/* bc 4, CR0_EQ, 12 */
		/* 821EB70Ch case   32:*/		if ( !regs.CR[0].eq ) { return 0x821EB718;  }
		/* 821EB70Ch case   32:*/		return 0x821EB710;
		  /* 821EB710h */ case   33:  		/* cmplwi CR6, R31, 0 */
		/* 821EB710h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821EB710h case   33:*/		return 0x821EB714;
		  /* 821EB714h */ case   34:  		/* bc 4, CR6_EQ, -84 */
		/* 821EB714h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821EB6C0;  }
		/* 821EB714h case   34:*/		return 0x821EB718;
	}
	return 0x821EB718;
} // Block from 821EB68Ch-821EB718h (35 instructions)

