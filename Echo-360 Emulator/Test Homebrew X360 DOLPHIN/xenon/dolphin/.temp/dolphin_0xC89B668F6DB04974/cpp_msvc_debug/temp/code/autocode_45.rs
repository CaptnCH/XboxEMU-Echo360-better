#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 82236408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236408);
		  /* 82236408h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82236408h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236408h case    0:*/		return 0x8223640C;
		  /* 8223640Ch */ case    1:  		/* addi R26, R26, 1 */
		/* 8223640Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8223640Ch case    1:*/		return 0x82236410;
		  /* 82236410h */ case    2:  		/* addi R29, R29, 4 */
		/* 82236410h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82236410h case    2:*/		return 0x82236414;
		  /* 82236414h */ case    3:  		/* lwz R11, <#[R11 + 1360]> */
		/* 82236414h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000550) );
		/* 82236414h case    3:*/		return 0x82236418;
		  /* 82236418h */ case    4:  		/* lwz R11, <#[R11 + 28]> */
		/* 82236418h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82236418h case    4:*/		return 0x8223641C;
		  /* 8223641Ch */ case    5:  		/* cmpw CR6, R26, R11 */
		/* 8223641Ch case    5:*/		cpu::op::cmpw<6>(regs,regs.R26,regs.R11);
		/* 8223641Ch case    5:*/		return 0x82236420;
		  /* 82236420h */ case    6:  		/* bc 4, CR6_GT, -84 */
		/* 82236420h case    6:*/		if ( !regs.CR[6].gt ) { return 0x822363CC;  }
		/* 82236420h case    6:*/		return 0x82236424;
	}
	return 0x82236424;
} // Block from 82236408h-82236424h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82236424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236424);
		  /* 82236424h */ case    0:  		/* lwz R3, <#[R31 + 160]> */
		/* 82236424h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A0) );
		/* 82236424h case    0:*/		return 0x82236428;
		  /* 82236428h */ case    1:  		/* addi R1, R1, 400 */
		/* 82236428h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x190);
		/* 82236428h case    1:*/		return 0x8223642C;
		  /* 8223642Ch */ case    2:  		/* b -1724812 */
		/* 8223642Ch case    2:*/		return 0x820912A0;
		/* 8223642Ch case    2:*/		return 0x82236430;
	}
	return 0x82236430;
} // Block from 82236424h-82236430h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82236430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236430);
		  /* 82236430h */ case    0:  		/* mfspr R12, LR */
		/* 82236430h case    0:*/		regs.R12 = regs.LR;
		/* 82236430h case    0:*/		return 0x82236434;
		  /* 82236434h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82236434h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82236434h case    1:*/		return 0x82236438;
		  /* 82236438h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82236438h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82236438h case    2:*/		return 0x8223643C;
		  /* 8223643Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8223643Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8223643Ch case    3:*/		return 0x82236440;
		  /* 82236440h */ case    4:  		/* li R5, 0 */
		/* 82236440h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82236440h case    4:*/		return 0x82236444;
		  /* 82236444h */ case    5:  		/* li R4, 18 */
		/* 82236444h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x12);
		/* 82236444h case    5:*/		return 0x82236448;
		  /* 82236448h */ case    6:  		/* mr R31, R3 */
		/* 82236448h case    6:*/		regs.R31 = regs.R3;
		/* 82236448h case    6:*/		return 0x8223644C;
		  /* 8223644Ch */ case    7:  		/* lwz R3, <#[R3 + 172]> */
		/* 8223644Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000000AC) );
		/* 8223644Ch case    7:*/		return 0x82236450;
		  /* 82236450h */ case    8:  		/* bl 62400 */
		/* 82236450h case    8:*/		regs.LR = 0x82236454; return 0x82245810;
		/* 82236450h case    8:*/		return 0x82236454;
		  /* 82236454h */ case    9:  		/* li R11, 1 */
		/* 82236454h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82236454h case    9:*/		return 0x82236458;
		  /* 82236458h */ case   10:  		/* stb R11, <#[R31 + 2072]> */
		/* 82236458h case   10:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000818) );
		/* 82236458h case   10:*/		return 0x8223645C;
		  /* 8223645Ch */ case   11:  		/* lwz R11, <#[R3 + 16]> */
		/* 8223645Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8223645Ch case   11:*/		return 0x82236460;
		  /* 82236460h */ case   12:  		/* stw R11, <#[R31 + 2076]> */
		/* 82236460h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000081C) );
		/* 82236460h case   12:*/		return 0x82236464;
		  /* 82236464h */ case   13:  		/* addi R1, R1, 96 */
		/* 82236464h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82236464h case   13:*/		return 0x82236468;
		  /* 82236468h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 82236468h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82236468h case   14:*/		return 0x8223646C;
		  /* 8223646Ch */ case   15:  		/* mtspr LR, R12 */
		/* 8223646Ch case   15:*/		regs.LR = regs.R12;
		/* 8223646Ch case   15:*/		return 0x82236470;
		  /* 82236470h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 82236470h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82236470h case   16:*/		return 0x82236474;
		  /* 82236474h */ case   17:  		/* bclr 20, CR0_LT */
		/* 82236474h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82236474h case   17:*/		return 0x82236478;
	}
	return 0x82236478;
} // Block from 82236430h-82236478h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82236478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236478);
		  /* 82236478h */ case    0:  		/* mfspr R12, LR */
		/* 82236478h case    0:*/		regs.R12 = regs.LR;
		/* 82236478h case    0:*/		return 0x8223647C;
		  /* 8223647Ch */ case    1:  		/* bl -1724980 */
		/* 8223647Ch case    1:*/		regs.LR = 0x82236480; return 0x82091248;
		/* 8223647Ch case    1:*/		return 0x82236480;
		  /* 82236480h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82236480h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82236480h case    2:*/		return 0x82236484;
		  /* 82236484h */ case    3:  		/* mr R30, R3 */
		/* 82236484h case    3:*/		regs.R30 = regs.R3;
		/* 82236484h case    3:*/		return 0x82236488;
		  /* 82236488h */ case    4:  		/* bl -88 */
		/* 82236488h case    4:*/		regs.LR = 0x8223648C; return 0x82236430;
		/* 82236488h case    4:*/		return 0x8223648C;
		  /* 8223648Ch */ case    5:  		/* li R11, 1 */
		/* 8223648Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223648Ch case    5:*/		return 0x82236490;
		  /* 82236490h */ case    6:  		/* lwz R10, <#[R30 + 172]> */
		/* 82236490h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000000AC) );
		/* 82236490h case    6:*/		return 0x82236494;
		  /* 82236494h */ case    7:  		/* mr R24, R3 */
		/* 82236494h case    7:*/		regs.R24 = regs.R3;
		/* 82236494h case    7:*/		return 0x82236498;
		  /* 82236498h */ case    8:  		/* stb R11, <#[R30 + 2073]> */
		/* 82236498h case    8:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000819) );
		/* 82236498h case    8:*/		return 0x8223649C;
		  /* 8223649Ch */ case    9:  		/* addi R3, R1, 80 */
		/* 8223649Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8223649Ch case    9:*/		return 0x822364A0;
		  /* 822364A0h */ case   10:  		/* lwz R4, <#[R10 + 4]> */
		/* 822364A0h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000004) );
		/* 822364A0h case   10:*/		return 0x822364A4;
		  /* 822364A4h */ case   11:  		/* bl 121956 */
		/* 822364A4h case   11:*/		regs.LR = 0x822364A8; return 0x82254108;
		/* 822364A4h case   11:*/		return 0x822364A8;
		  /* 822364A8h */ case   12:  		/* b 224 */
		/* 822364A8h case   12:*/		return 0x82236588;
		/* 822364A8h case   12:*/		return 0x822364AC;
		  /* 822364ACh */ case   13:  		/* li R26, 0 */
		/* 822364ACh case   13:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 822364ACh case   13:*/		return 0x822364B0;
		  /* 822364B0h */ case   14:  		/* addi R25, R11, 32 */
		/* 822364B0h case   14:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x20);
		/* 822364B0h case   14:*/		return 0x822364B4;
		  /* 822364B4h */ case   15:  		/* cntlzw R11, R26 */
		/* 822364B4h case   15:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R26);
		/* 822364B4h case   15:*/		return 0x822364B8;
		  /* 822364B8h */ case   16:  		/* lwz R10, <#[R25]> */
		/* 822364B8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 822364B8h case   16:*/		return 0x822364BC;
		  /* 822364BCh */ case   17:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 822364BCh case   17:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 822364BCh case   17:*/		return 0x822364C0;
		  /* 822364C0h */ case   18:  		/* xori R11, R11, 1 */
		/* 822364C0h case   18:*/		cpu::op::xori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 822364C0h case   18:*/		return 0x822364C4;
		  /* 822364C4h */ case   19:  		/* addi R27, R11, 21 */
		/* 822364C4h case   19:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x15);
		/* 822364C4h case   19:*/		return 0x822364C8;
		  /* 822364C8h */ case   20:  		/* cmpw CR6, R10, R27 */
		/* 822364C8h case   20:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R27);
		/* 822364C8h case   20:*/		return 0x822364CC;
		  /* 822364CCh */ case   21:  		/* bc 4, CR6_EQ, 168 */
		/* 822364CCh case   21:*/		if ( !regs.CR[6].eq ) { return 0x82236574;  }
		/* 822364CCh case   21:*/		return 0x822364D0;
		  /* 822364D0h */ case   22:  		/* lwz R11, <#[R28 + 12]> */
		/* 822364D0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 822364D0h case   22:*/		return 0x822364D4;
		  /* 822364D4h */ case   23:  		/* cmpwi CR6, R11, 0 */
		/* 822364D4h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 822364D4h case   23:*/		return 0x822364D8;
		  /* 822364D8h */ case   24:  		/* bc 4, CR6_EQ, 156 */
		/* 822364D8h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82236574;  }
		/* 822364D8h case   24:*/		return 0x822364DC;
		  /* 822364DCh */ case   25:  		/* li R3, 38 */
		/* 822364DCh case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x26);
		/* 822364DCh case   25:*/		return 0x822364E0;
		  /* 822364E0h */ case   26:  		/* lwz R4, <#[R30 + 12]> */
		/* 822364E0h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 822364E0h case   26:*/		return 0x822364E4;
		  /* 822364E4h */ case   27:  		/* bl 129612 */
		/* 822364E4h case   27:*/		regs.LR = 0x822364E8; return 0x82255F30;
		/* 822364E4h case   27:*/		return 0x822364E8;
		  /* 822364E8h */ case   28:  		/* mr R5, R28 */
		/* 822364E8h case   28:*/		regs.R5 = regs.R28;
		/* 822364E8h case   28:*/		return 0x822364EC;
		  /* 822364ECh */ case   29:  		/* li R4, 0 */
		/* 822364ECh case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822364ECh case   29:*/		return 0x822364F0;
		  /* 822364F0h */ case   30:  		/* mr R31, R3 */
		/* 822364F0h case   30:*/		regs.R31 = regs.R3;
		/* 822364F0h case   30:*/		return 0x822364F4;
		  /* 822364F4h */ case   31:  		/* bl 130724 */
		/* 822364F4h case   31:*/		regs.LR = 0x822364F8; return 0x82256398;
		/* 822364F4h case   31:*/		return 0x822364F8;
		  /* 822364F8h */ case   32:  		/* mr R5, R24 */
		/* 822364F8h case   32:*/		regs.R5 = regs.R24;
		/* 822364F8h case   32:*/		return 0x822364FC;
		  /* 822364FCh */ case   33:  		/* li R4, 1 */
		/* 822364FCh case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822364FCh case   33:*/		return 0x82236500;
		  /* 82236500h */ case   34:  		/* mr R3, R31 */
		/* 82236500h case   34:*/		regs.R3 = regs.R31;
		/* 82236500h case   34:*/		return 0x82236504;
		  /* 82236504h */ case   35:  		/* bl 130708 */
		/* 82236504h case   35:*/		regs.LR = 0x82236508; return 0x82256398;
		/* 82236504h case   35:*/		return 0x82236508;
		  /* 82236508h */ case   36:  		/* li R29, 0 */
		/* 82236508h case   36:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82236508h case   36:*/		return 0x8223650C;
		  /* 8223650Ch */ case   37:  		/* lwz R11, <#[R31]> */
		/* 8223650Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223650Ch case   37:*/		return 0x82236510;
		  /* 82236510h */ case   38:  		/* li R6, 0 */
		/* 82236510h case   38:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82236510h case   38:*/		return 0x82236514;
		  /* 82236514h */ case   39:  		/* mr R5, R29 */
		/* 82236514h case   39:*/		regs.R5 = regs.R29;
		/* 82236514h case   39:*/		return 0x82236518;
		  /* 82236518h */ case   40:  		/* li R4, 1 */
		/* 82236518h case   40:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82236518h case   40:*/		return 0x8223651C;
		  /* 8223651Ch */ case   41:  		/* mr R3, R31 */
		/* 8223651Ch case   41:*/		regs.R3 = regs.R31;
		/* 8223651Ch case   41:*/		return 0x82236520;
		  /* 82236520h */ case   42:  		/* lwz R11, <#[R11 + 88]> */
		/* 82236520h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82236520h case   42:*/		return 0x82236524;
		  /* 82236524h */ case   43:  		/* mtspr CTR, R11 */
		/* 82236524h case   43:*/		regs.CTR = regs.R11;
		/* 82236524h case   43:*/		return 0x82236528;
		  /* 82236528h */ case   44:  		/* bcctrl 20, CR0_LT */
		/* 82236528h case   44:*/		if ( 1 ) { regs.LR = 0x8223652C; return (uint32)regs.CTR; }
		/* 82236528h case   44:*/		return 0x8223652C;
		  /* 8223652Ch */ case   45:  		/* addi R29, R29, 1 */
		/* 8223652Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223652Ch case   45:*/		return 0x82236530;
		  /* 82236530h */ case   46:  		/* cmpwi CR6, R29, 4 */
		/* 82236530h case   46:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 82236530h case   46:*/		return 0x82236534;
		  /* 82236534h */ case   47:  		/* bc 12, CR6_LT, -40 */
		/* 82236534h case   47:*/		if ( regs.CR[6].lt ) { return 0x8223650C;  }
		/* 82236534h case   47:*/		return 0x82236538;
		  /* 82236538h */ case   48:  		/* mr R5, R28 */
		/* 82236538h case   48:*/		regs.R5 = regs.R28;
		/* 82236538h case   48:*/		return 0x8223653C;
		  /* 8223653Ch */ case   49:  		/* li R4, 2 */
		/* 8223653Ch case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8223653Ch case   49:*/		return 0x82236540;
		  /* 82236540h */ case   50:  		/* mr R3, R31 */
		/* 82236540h case   50:*/		regs.R3 = regs.R31;
		/* 82236540h case   50:*/		return 0x82236544;
		  /* 82236544h */ case   51:  		/* bl 130644 */
		/* 82236544h case   51:*/		regs.LR = 0x82236548; return 0x82256398;
		/* 82236544h case   51:*/		return 0x82236548;
		  /* 82236548h */ case   52:  		/* li R5, 1 */
		/* 82236548h case   52:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82236548h case   52:*/		return 0x8223654C;
		  /* 8223654Ch */ case   53:  		/* mr R4, R27 */
		/* 8223654Ch case   53:*/		regs.R4 = regs.R27;
		/* 8223654Ch case   53:*/		return 0x82236550;
		  /* 82236550h */ case   54:  		/* lwz R3, <#[R30 + 172]> */
		/* 82236550h case   54:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000000AC) );
		/* 82236550h case   54:*/		return 0x82236554;
		  /* 82236554h */ case   55:  		/* bl 62140 */
		/* 82236554h case   55:*/		regs.LR = 0x82236558; return 0x82245810;
		/* 82236554h case   55:*/		return 0x82236558;
		  /* 82236558h */ case   56:  		/* mr R5, R3 */
		/* 82236558h case   56:*/		regs.R5 = regs.R3;
		/* 82236558h case   56:*/		return 0x8223655C;
		  /* 8223655Ch */ case   57:  		/* li R4, 3 */
		/* 8223655Ch case   57:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8223655Ch case   57:*/		return 0x82236560;
		  /* 82236560h */ case   58:  		/* mr R3, R31 */
		/* 82236560h case   58:*/		regs.R3 = regs.R31;
		/* 82236560h case   58:*/		return 0x82236564;
		  /* 82236564h */ case   59:  		/* bl 130612 */
		/* 82236564h case   59:*/		regs.LR = 0x82236568; return 0x82256398;
		/* 82236564h case   59:*/		return 0x82236568;
		  /* 82236568h */ case   60:  		/* mr R4, R31 */
		/* 82236568h case   60:*/		regs.R4 = regs.R31;
		/* 82236568h case   60:*/		return 0x8223656C;
		  /* 8223656Ch */ case   61:  		/* lwz R3, <#[R30 + 164]> */
		/* 8223656Ch case   61:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000000A4) );
		/* 8223656Ch case   61:*/		return 0x82236570;
		  /* 82236570h */ case   62:  		/* bl 141760 */
		/* 82236570h case   62:*/		regs.LR = 0x82236574; return 0x82258F30;
		/* 82236570h case   62:*/		return 0x82236574;
	}
	return 0x82236574;
} // Block from 82236478h-82236574h (63 instructions)

//////////////////////////////////////////////////////
// Block at 82236574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236574);
		  /* 82236574h */ case    0:  		/* addi R26, R26, 1 */
		/* 82236574h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82236574h case    0:*/		return 0x82236578;
		  /* 82236578h */ case    1:  		/* cmpwi CR6, R26, 2 */
		/* 82236578h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000002);
		/* 82236578h case    1:*/		return 0x8223657C;
		  /* 8223657Ch */ case    2:  		/* bc 12, CR6_LT, -200 */
		/* 8223657Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x822364B4;  }
		/* 8223657Ch case    2:*/		return 0x82236580;
		  /* 82236580h */ case    3:  		/* addi R3, R1, 80 */
		/* 82236580h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82236580h case    3:*/		return 0x82236584;
		  /* 82236584h */ case    4:  		/* bl 121548 */
		/* 82236584h case    4:*/		regs.LR = 0x82236588; return 0x82254050;
		/* 82236584h case    4:*/		return 0x82236588;
	}
	return 0x82236588;
} // Block from 82236574h-82236588h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82236588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236588);
		  /* 82236588h */ case    0:  		/* lwz R11, <#[R1 + 96]> */
		/* 82236588h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82236588h case    0:*/		return 0x8223658C;
		  /* 8223658Ch */ case    1:  		/* mr R28, R11 */
		/* 8223658Ch case    1:*/		regs.R28 = regs.R11;
		/* 8223658Ch case    1:*/		return 0x82236590;
		  /* 82236590h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82236590h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82236590h case    2:*/		return 0x82236594;
		  /* 82236594h */ case    3:  		/* stw R11, <#[R1 + 100]> */
		/* 82236594h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 82236594h case    3:*/		return 0x82236598;
		  /* 82236598h */ case    4:  		/* bc 4, CR6_EQ, -236 */
		/* 82236598h case    4:*/		if ( !regs.CR[6].eq ) { return 0x822364AC;  }
		/* 82236598h case    4:*/		return 0x8223659C;
		  /* 8223659Ch */ case    5:  		/* addi R1, R1, 176 */
		/* 8223659Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8223659Ch case    5:*/		return 0x822365A0;
		  /* 822365A0h */ case    6:  		/* b -1725192 */
		/* 822365A0h case    6:*/		return 0x82091298;
		/* 822365A0h case    6:*/		return 0x822365A4;
		  /* 822365A4h */ case    7:  		/* nop */
		/* 822365A4h case    7:*/		cpu::op::nop();
		/* 822365A4h case    7:*/		return 0x822365A8;
	}
	return 0x822365A8;
} // Block from 82236588h-822365A8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822365A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822365A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822365A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822365A8);
		  /* 822365A8h */ case    0:  		/* mfspr R12, LR */
		/* 822365A8h case    0:*/		regs.R12 = regs.LR;
		/* 822365A8h case    0:*/		return 0x822365AC;
		  /* 822365ACh */ case    1:  		/* bl -1725300 */
		/* 822365ACh case    1:*/		regs.LR = 0x822365B0; return 0x82091238;
		/* 822365ACh case    1:*/		return 0x822365B0;
		  /* 822365B0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 822365B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 822365B0h case    2:*/		return 0x822365B4;
		  /* 822365B4h */ case    3:  		/* lwz R9, <#[R4 + 16]> */
		/* 822365B4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000010) );
		/* 822365B4h case    3:*/		return 0x822365B8;
		  /* 822365B8h */ case    4:  		/* lis R11, -32253 */
		/* 822365B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822365B8h case    4:*/		return 0x822365BC;
		  /* 822365BCh */ case    5:  		/* lis R10, -32252 */
		/* 822365BCh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822365BCh case    5:*/		return 0x822365C0;
		  /* 822365C0h */ case    6:  		/* mr R31, R3 */
		/* 822365C0h case    6:*/		regs.R31 = regs.R3;
		/* 822365C0h case    6:*/		return 0x822365C4;
		  /* 822365C4h */ case    7:  		/* mr R29, R4 */
		/* 822365C4h case    7:*/		regs.R29 = regs.R4;
		/* 822365C4h case    7:*/		return 0x822365C8;
		  /* 822365C8h */ case    8:  		/* cmpwi CR6, R9, 0 */
		/* 822365C8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 822365C8h case    8:*/		return 0x822365CC;
		  /* 822365CCh */ case    9:  		/* addi R23, R11, 27460 */
		/* 822365CCh case    9:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x6B44);
		/* 822365CCh case    9:*/		return 0x822365D0;
		  /* 822365D0h */ case   10:  		/* addi R22, R10, 8520 */
		/* 822365D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0x2148);
		/* 822365D0h case   10:*/		return 0x822365D4;
		  /* 822365D4h */ case   11:  		/* bc 12, CR6_EQ, 160 */
		/* 822365D4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82236674;  }
		/* 822365D4h case   11:*/		return 0x822365D8;
		  /* 822365D8h */ case   12:  		/* li R5, 0 */
		/* 822365D8h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822365D8h case   12:*/		return 0x822365DC;
		  /* 822365DCh */ case   13:  		/* lwz R3, <#[R3 + 172]> */
		/* 822365DCh case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000000AC) );
		/* 822365DCh case   13:*/		return 0x822365E0;
		  /* 822365E0h */ case   14:  		/* bl 59632 */
		/* 822365E0h case   14:*/		regs.LR = 0x822365E4; return 0x82244ED0;
		/* 822365E0h case   14:*/		return 0x822365E4;
		  /* 822365E4h */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 822365E4h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 822365E4h case   15:*/		return 0x822365E8;
	}
	return 0x822365E8;
} // Block from 822365A8h-822365E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822365E8h
// Function '?CP_GetXenosColorElementFmt@XGRAPHICS@@YAXPAU_ABSTRACT_STATE@1@IPAU_XENOS_COLOR_ELEMENT_FMT@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822365E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822365E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822365E8);
		  /* 822365E8h */ case    0:  		/* bc 4, CR0_EQ, 52 */
		/* 822365E8h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8223661C;  }
		/* 822365E8h case    0:*/		return 0x822365EC;
		  /* 822365ECh */ case    1:  		/* lwz R5, <#[R29 + 56]> */
		/* 822365ECh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000038) );
		/* 822365ECh case    1:*/		return 0x822365F0;
		  /* 822365F0h */ case    2:  		/* lwz R4, <#[R29 + 80]> */
		/* 822365F0h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000050) );
		/* 822365F0h case    2:*/		return 0x822365F4;
		  /* 822365F4h */ case    3:  		/* lwz R3, <#[R31 + 172]> */
		/* 822365F4h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 822365F4h case    3:*/		return 0x822365F8;
		  /* 822365F8h */ case    4:  		/* bl 59696 */
		/* 822365F8h case    4:*/		regs.LR = 0x822365FC; return 0x82244F28;
		/* 822365F8h case    4:*/		return 0x822365FC;
		  /* 822365FCh */ case    5:  		/* lwz R11, <#[R3]> */
		/* 822365FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 822365FCh case    5:*/		return 0x82236600;
		  /* 82236600h */ case    6:  		/* mr R5, R31 */
		/* 82236600h case    6:*/		regs.R5 = regs.R31;
		/* 82236600h case    6:*/		return 0x82236604;
		  /* 82236604h */ case    7:  		/* lwz R4, <#[R29 + 128]> */
		/* 82236604h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000080) );
		/* 82236604h case    7:*/		return 0x82236608;
		  /* 82236608h */ case    8:  		/* lwz R6, <#[R31 + 12]> */
		/* 82236608h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236608h case    8:*/		return 0x8223660C;
		  /* 8223660Ch */ case    9:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223660Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223660Ch case    9:*/		return 0x82236610;
		  /* 82236610h */ case   10:  		/* mtspr CTR, R11 */
		/* 82236610h case   10:*/		regs.CTR = regs.R11;
		/* 82236610h case   10:*/		return 0x82236614;
		  /* 82236614h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 82236614h case   11:*/		if ( 1 ) { regs.LR = 0x82236618; return (uint32)regs.CTR; }
		/* 82236614h case   11:*/		return 0x82236618;
		  /* 82236618h */ case   12:  		/* b 28 */
		/* 82236618h case   12:*/		return 0x82236634;
		/* 82236618h case   12:*/		return 0x8223661C;
	}
	return 0x8223661C;
} // Block from 822365E8h-8223661Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223661Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223661C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223661C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223661C);
		  /* 8223661Ch */ case    0:  		/* lwz R11, <#[R3]> */
		/* 8223661Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223661Ch case    0:*/		return 0x82236620;
		  /* 82236620h */ case    1:  		/* mr R5, R31 */
		/* 82236620h case    1:*/		regs.R5 = regs.R31;
		/* 82236620h case    1:*/		return 0x82236624;
		  /* 82236624h */ case    2:  		/* lwz R4, <#[R29 + 128]> */
		/* 82236624h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000080) );
		/* 82236624h case    2:*/		return 0x82236628;
		  /* 82236628h */ case    3:  		/* lwz R11, <#[R11 + 32]> */
		/* 82236628h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 82236628h case    3:*/		return 0x8223662C;
		  /* 8223662Ch */ case    4:  		/* mtspr CTR, R11 */
		/* 8223662Ch case    4:*/		regs.CTR = regs.R11;
		/* 8223662Ch case    4:*/		return 0x82236630;
		  /* 82236630h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 82236630h case    5:*/		if ( 1 ) { regs.LR = 0x82236634; return (uint32)regs.CTR; }
		/* 82236630h case    5:*/		return 0x82236634;
	}
	return 0x82236634;
} // Block from 8223661Ch-82236634h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82236634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236634);
		  /* 82236634h */ case    0:  		/* mr R30, R3 */
		/* 82236634h case    0:*/		regs.R30 = regs.R3;
		/* 82236634h case    0:*/		return 0x82236638;
		  /* 82236638h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82236638h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82236638h case    1:*/		return 0x8223663C;
		  /* 8223663Ch */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 8223663Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82236658;  }
		/* 8223663Ch case    2:*/		return 0x82236640;
		  /* 82236640h */ case    3:  		/* lis R11, -32252 */
		/* 82236640h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82236640h case    3:*/		return 0x82236644;
		  /* 82236644h */ case    4:  		/* mr R6, R22 */
		/* 82236644h case    4:*/		regs.R6 = regs.R22;
		/* 82236644h case    4:*/		return 0x82236648;
		  /* 82236648h */ case    5:  		/* addi R5, R11, 8928 */
		/* 82236648h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x22E0);
		/* 82236648h case    5:*/		return 0x8223664C;
		  /* 8223664Ch */ case    6:  		/* mr R4, R23 */
		/* 8223664Ch case    6:*/		regs.R4 = regs.R23;
		/* 8223664Ch case    6:*/		return 0x82236650;
		  /* 82236650h */ case    7:  		/* li R7, 649 */
		/* 82236650h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x289);
		/* 82236650h case    7:*/		return 0x82236654;
		  /* 82236654h */ case    8:  		/* bl -911948 */
		/* 82236654h case    8:*/		regs.LR = 0x82236658; return 0x82157C08;
		/* 82236654h case    8:*/		return 0x82236658;
	}
	return 0x82236658;
} // Block from 82236634h-82236658h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82236658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236658);
		  /* 82236658h */ case    0:  		/* mr R4, R29 */
		/* 82236658h case    0:*/		regs.R4 = regs.R29;
		/* 82236658h case    0:*/		return 0x8223665C;
		  /* 8223665Ch */ case    1:  		/* mr R3, R30 */
		/* 8223665Ch case    1:*/		regs.R3 = regs.R30;
		/* 8223665Ch case    1:*/		return 0x82236660;
		  /* 82236660h */ case    2:  		/* bl 122376 */
		/* 82236660h case    2:*/		regs.LR = 0x82236664; return 0x82254468;
		/* 82236660h case    2:*/		return 0x82236664;
		  /* 82236664h */ case    3:  		/* mr R5, R30 */
		/* 82236664h case    3:*/		regs.R5 = regs.R30;
		/* 82236664h case    3:*/		return 0x82236668;
		  /* 82236668h */ case    4:  		/* li R4, 0 */
		/* 82236668h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236668h case    4:*/		return 0x8223666C;
		  /* 8223666Ch */ case    5:  		/* mr R3, R29 */
		/* 8223666Ch case    5:*/		regs.R3 = regs.R29;
		/* 8223666Ch case    5:*/		return 0x82236670;
		  /* 82236670h */ case    6:  		/* bl 130344 */
		/* 82236670h case    6:*/		regs.LR = 0x82236674; return 0x82256398;
		/* 82236670h case    6:*/		return 0x82236674;
	}
	return 0x82236674;
} // Block from 82236658h-82236674h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82236674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236674);
		  /* 82236674h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 82236674h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 82236674h case    0:*/		return 0x82236678;
		  /* 82236678h */ case    1:  		/* li R26, 1 */
		/* 82236678h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82236678h case    1:*/		return 0x8223667C;
		  /* 8223667Ch */ case    2:  		/* cmpwi CR6, R11, 1 */
		/* 8223667Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8223667Ch case    2:*/		return 0x82236680;
		  /* 82236680h */ case    3:  		/* bc 12, CR6_LT, 692 */
		/* 82236680h case    3:*/		if ( regs.CR[6].lt ) { return 0x82236934;  }
		/* 82236680h case    3:*/		return 0x82236684;
		  /* 82236684h */ case    4:  		/* lis R11, -32252 */
		/* 82236684h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82236684h case    4:*/		return 0x82236688;
		  /* 82236688h */ case    5:  		/* lis R10, -32216 */
		/* 82236688h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8228);
		/* 82236688h case    5:*/		return 0x8223668C;
		  /* 8223668Ch */ case    6:  		/* lis R9, -32252 */
		/* 8223668Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8223668Ch case    6:*/		return 0x82236690;
		  /* 82236690h */ case    7:  		/* addi R28, R29, 84 */
		/* 82236690h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x54);
		/* 82236690h case    7:*/		return 0x82236694;
		  /* 82236694h */ case    8:  		/* addi R27, R11, 8480 */
		/* 82236694h case    8:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x2120);
		/* 82236694h case    8:*/		return 0x82236698;
		  /* 82236698h */ case    9:  		/* addi R24, R10, 17992 */
		/* 82236698h case    9:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0x4648);
		/* 82236698h case    9:*/		return 0x8223669C;
		  /* 8223669Ch */ case   10:  		/* addi R25, R9, 8912 */
		/* 8223669Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R9,0x22D0);
		/* 8223669Ch case   10:*/		return 0x822366A0;
		  /* 822366A0h */ case   11:  		/* lwz R10, <#[R28]> */
		/* 822366A0h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 822366A0h case   11:*/		return 0x822366A4;
		  /* 822366A4h */ case   12:  		/* cmpwi CR6, R10, 26 */
		/* 822366A4h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000001A);
		/* 822366A4h case   12:*/		return 0x822366A8;
		  /* 822366A8h */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 822366A8h case   13:*/		if ( regs.CR[6].eq ) { return 0x822366B4;  }
		/* 822366A8h case   13:*/		return 0x822366AC;
		  /* 822366ACh */ case   14:  		/* cmpwi CR6, R10, 27 */
		/* 822366ACh case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000001B);
		/* 822366ACh case   14:*/		return 0x822366B0;
		  /* 822366B0h */ case   15:  		/* bc 4, CR6_EQ, 28 */
		/* 822366B0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x822366CC;  }
		/* 822366B0h case   15:*/		return 0x822366B4;
	}
	return 0x822366B4;
} // Block from 82236674h-822366B4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822366B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822366B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822366B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822366B4);
		  /* 822366B4h */ case    0:  		/* lwz R9, <#[R31 + 12]> */
		/* 822366B4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 822366B4h case    0:*/		return 0x822366B8;
		  /* 822366B8h */ case    1:  		/* lwz R11, <#[R9 + 1508]> */
		/* 822366B8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x000005E4) );
		/* 822366B8h case    1:*/		return 0x822366BC;
		  /* 822366BCh */ case    2:  		/* addi R11, R11, -1 */
		/* 822366BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 822366BCh case    2:*/		return 0x822366C0;
		  /* 822366C0h */ case    3:  		/* stw R11, <#[R9 + 1508]> */
		/* 822366C0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x000005E4) );
		/* 822366C0h case    3:*/		return 0x822366C4;
		  /* 822366C4h */ case    4:  		/* stw R11, <#[R28 - 24]> */
		/* 822366C4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0xFFFFFFE8) );
		/* 822366C4h case    4:*/		return 0x822366C8;
		  /* 822366C8h */ case    5:  		/* stw R10, <#[R28]> */
		/* 822366C8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 822366C8h case    5:*/		return 0x822366CC;
	}
	return 0x822366CC;
} // Block from 822366B4h-822366CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 822366CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822366CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822366CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822366CC);
		  /* 822366CCh */ case    0:  		/* mr R5, R26 */
		/* 822366CCh case    0:*/		regs.R5 = regs.R26;
		/* 822366CCh case    0:*/		return 0x822366D0;
		  /* 822366D0h */ case    1:  		/* lwz R3, <#[R31 + 172]> */
		/* 822366D0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 822366D0h case    1:*/		return 0x822366D4;
		  /* 822366D4h */ case    2:  		/* mr R4, R29 */
		/* 822366D4h case    2:*/		regs.R4 = regs.R29;
		/* 822366D4h case    2:*/		return 0x822366D8;
		  /* 822366D8h */ case    3:  		/* bl 59384 */
		/* 822366D8h case    3:*/		regs.LR = 0x822366DC; return 0x82244ED0;
		/* 822366D8h case    3:*/		return 0x822366DC;
		  /* 822366DCh */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 822366DCh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 822366DCh case    4:*/		return 0x822366E0;
		  /* 822366E0h */ case    5:  		/* bc 4, CR0_EQ, 52 */
		/* 822366E0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82236714;  }
		/* 822366E0h case    5:*/		return 0x822366E4;
		  /* 822366E4h */ case    6:  		/* lwz R5, <#[R28 - 24]> */
		/* 822366E4h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0xFFFFFFE8) );
		/* 822366E4h case    6:*/		return 0x822366E8;
		  /* 822366E8h */ case    7:  		/* lwz R4, <#[R28]> */
		/* 822366E8h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000000) );
		/* 822366E8h case    7:*/		return 0x822366EC;
		  /* 822366ECh */ case    8:  		/* lwz R3, <#[R31 + 172]> */
		/* 822366ECh case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 822366ECh case    8:*/		return 0x822366F0;
		  /* 822366F0h */ case    9:  		/* bl 59448 */
		/* 822366F0h case    9:*/		regs.LR = 0x822366F4; return 0x82244F28;
		/* 822366F0h case    9:*/		return 0x822366F4;
		  /* 822366F4h */ case   10:  		/* lwz R11, <#[R3]> */
		/* 822366F4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 822366F4h case   10:*/		return 0x822366F8;
		  /* 822366F8h */ case   11:  		/* mr R5, R31 */
		/* 822366F8h case   11:*/		regs.R5 = regs.R31;
		/* 822366F8h case   11:*/		return 0x822366FC;
		  /* 822366FCh */ case   12:  		/* lwz R4, <#[R27 - 16]> */
		/* 822366FCh case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0xFFFFFFF0) );
		/* 822366FCh case   12:*/		return 0x82236700;
		  /* 82236700h */ case   13:  		/* lwz R6, <#[R31 + 12]> */
		/* 82236700h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236700h case   13:*/		return 0x82236704;
		  /* 82236704h */ case   14:  		/* lwz R11, <#[R11 + 28]> */
		/* 82236704h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82236704h case   14:*/		return 0x82236708;
		  /* 82236708h */ case   15:  		/* mtspr CTR, R11 */
		/* 82236708h case   15:*/		regs.CTR = regs.R11;
		/* 82236708h case   15:*/		return 0x8223670C;
		  /* 8223670Ch */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 8223670Ch case   16:*/		if ( 1 ) { regs.LR = 0x82236710; return (uint32)regs.CTR; }
		/* 8223670Ch case   16:*/		return 0x82236710;
		  /* 82236710h */ case   17:  		/* b 28 */
		/* 82236710h case   17:*/		return 0x8223672C;
		/* 82236710h case   17:*/		return 0x82236714;
	}
	return 0x82236714;
} // Block from 822366CCh-82236714h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82236714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236714);
		  /* 82236714h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 82236714h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82236714h case    0:*/		return 0x82236718;
		  /* 82236718h */ case    1:  		/* mr R5, R31 */
		/* 82236718h case    1:*/		regs.R5 = regs.R31;
		/* 82236718h case    1:*/		return 0x8223671C;
		  /* 8223671Ch */ case    2:  		/* lwz R4, <#[R27 - 16]> */
		/* 8223671Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0xFFFFFFF0) );
		/* 8223671Ch case    2:*/		return 0x82236720;
	}
	return 0x82236720;
} // Block from 82236714h-82236720h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82236720h
// Function '?InsertAfter@CFG@XGRAPHICS@@QAAXAAVBlock@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236720);
		  /* 82236720h */ case    0:  		/* lwz R11, <#[R11 + 32]> */
		/* 82236720h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 82236720h case    0:*/		return 0x82236724;
		  /* 82236724h */ case    1:  		/* mtspr CTR, R11 */
		/* 82236724h case    1:*/		regs.CTR = regs.R11;
		/* 82236724h case    1:*/		return 0x82236728;
		  /* 82236728h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 82236728h case    2:*/		if ( 1 ) { regs.LR = 0x8223672C; return (uint32)regs.CTR; }
		/* 82236728h case    2:*/		return 0x8223672C;
	}
	return 0x8223672C;
} // Block from 82236720h-8223672Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223672Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223672C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223672C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223672C);
		  /* 8223672Ch */ case    0:  		/* mr R5, R29 */
		/* 8223672Ch case    0:*/		regs.R5 = regs.R29;
		/* 8223672Ch case    0:*/		return 0x82236730;
		  /* 82236730h */ case    1:  		/* mr R4, R26 */
		/* 82236730h case    1:*/		regs.R4 = regs.R26;
		/* 82236730h case    1:*/		return 0x82236734;
		  /* 82236734h */ case    2:  		/* mr R30, R3 */
		/* 82236734h case    2:*/		regs.R30 = regs.R3;
		/* 82236734h case    2:*/		return 0x82236738;
		  /* 82236738h */ case    3:  		/* bl 122240 */
		/* 82236738h case    3:*/		regs.LR = 0x8223673C; return 0x822544B8;
		/* 82236738h case    3:*/		return 0x8223673C;
		  /* 8223673Ch */ case    4:  		/* mr R5, R30 */
		/* 8223673Ch case    4:*/		regs.R5 = regs.R30;
		/* 8223673Ch case    4:*/		return 0x82236740;
		  /* 82236740h */ case    5:  		/* mr R4, R26 */
		/* 82236740h case    5:*/		regs.R4 = regs.R26;
		/* 82236740h case    5:*/		return 0x82236744;
		  /* 82236744h */ case    6:  		/* mr R3, R29 */
		/* 82236744h case    6:*/		regs.R3 = regs.R29;
		/* 82236744h case    6:*/		return 0x82236748;
		  /* 82236748h */ case    7:  		/* bl 130128 */
		/* 82236748h case    7:*/		regs.LR = 0x8223674C; return 0x82256398;
		/* 82236748h case    7:*/		return 0x8223674C;
		  /* 8223674Ch */ case    8:  		/* lwz R11, <#[R30 + 32]> */
		/* 8223674Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8223674Ch case    8:*/		return 0x82236750;
		  /* 82236750h */ case    9:  		/* cmpwi CR6, R11, 26 */
		/* 82236750h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001A);
		/* 82236750h case    9:*/		return 0x82236754;
		  /* 82236754h */ case   10:  		/* bc 4, CR6_EQ, 124 */
		/* 82236754h case   10:*/		if ( !regs.CR[6].eq ) { return 0x822367D0;  }
		/* 82236754h case   10:*/		return 0x82236758;
		  /* 82236758h */ case   11:  		/* mr R3, R31 */
		/* 82236758h case   11:*/		regs.R3 = regs.R31;
		/* 82236758h case   11:*/		return 0x8223675C;
		  /* 8223675Ch */ case   12:  		/* bl -812 */
		/* 8223675Ch case   12:*/		regs.LR = 0x82236760; return 0x82236430;
		/* 8223675Ch case   12:*/		return 0x82236760;
		  /* 82236760h */ case   13:  		/* mr R21, R3 */
		/* 82236760h case   13:*/		regs.R21 = regs.R3;
		/* 82236760h case   13:*/		return 0x82236764;
		  /* 82236764h */ case   14:  		/* li R3, 62 */
		/* 82236764h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x3E);
		/* 82236764h case   14:*/		return 0x82236768;
		  /* 82236768h */ case   15:  		/* lwz R4, <#[R31 + 12]> */
		/* 82236768h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236768h case   15:*/		return 0x8223676C;
		  /* 8223676Ch */ case   16:  		/* bl 128964 */
		/* 8223676Ch case   16:*/		regs.LR = 0x82236770; return 0x82255F30;
		/* 8223676Ch case   16:*/		return 0x82236770;
		  /* 82236770h */ case   17:  		/* li R11, 1 */
		/* 82236770h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82236770h case   17:*/		return 0x82236774;
		  /* 82236774h */ case   18:  		/* mr R5, R30 */
		/* 82236774h case   18:*/		regs.R5 = regs.R30;
		/* 82236774h case   18:*/		return 0x82236778;
		  /* 82236778h */ case   19:  		/* stb R11, <#[R31 + 2073]> */
		/* 82236778h case   19:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000819) );
		/* 82236778h case   19:*/		return 0x8223677C;
		  /* 8223677Ch */ case   20:  		/* li R4, 0 */
		/* 8223677Ch case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223677Ch case   20:*/		return 0x82236780;
	}
	return 0x82236780;
} // Block from 8223672Ch-82236780h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82236780h
// Function '?IsVertexShader@CFG@XGRAPHICS@@QAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236780);
		  /* 82236780h */ case    0:  		/* mr R20, R3 */
		/* 82236780h case    0:*/		regs.R20 = regs.R3;
		/* 82236780h case    0:*/		return 0x82236784;
		  /* 82236784h */ case    1:  		/* bl 130068 */
		/* 82236784h case    1:*/		regs.LR = 0x82236788; return 0x82256398;
		/* 82236784h case    1:*/		return 0x82236788;
	}
	return 0x82236788;
} // Block from 82236780h-82236788h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82236788h
// Function '?ClearSymbolTable@CFG@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236788);
		  /* 82236788h */ case    0:  		/* mr R3, R20 */
		/* 82236788h case    0:*/		regs.R3 = regs.R20;
		/* 82236788h case    0:*/		return 0x8223678C;
		  /* 8223678Ch */ case    1:  		/* mr R5, R21 */
		/* 8223678Ch case    1:*/		regs.R5 = regs.R21;
		/* 8223678Ch case    1:*/		return 0x82236790;
		  /* 82236790h */ case    2:  		/* li R4, 1 */
		/* 82236790h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82236790h case    2:*/		return 0x82236794;
		  /* 82236794h */ case    3:  		/* bl 130052 */
		/* 82236794h case    3:*/		regs.LR = 0x82236798; return 0x82256398;
		/* 82236794h case    3:*/		return 0x82236798;
		  /* 82236798h */ case    4:  		/* lwz R11, <#[R27]> */
		/* 82236798h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82236798h case    4:*/		return 0x8223679C;
		  /* 8223679Ch */ case    5:  		/* mr R4, R20 */
		/* 8223679Ch case    5:*/		regs.R4 = regs.R20;
		/* 8223679Ch case    5:*/		return 0x822367A0;
		  /* 822367A0h */ case    6:  		/* mr R3, R31 */
		/* 822367A0h case    6:*/		regs.R3 = regs.R31;
		/* 822367A0h case    6:*/		return 0x822367A4;
		  /* 822367A4h */ case    7:  		/* stw R11, <#[R20 + 132]> */
		/* 822367A4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000084) );
		/* 822367A4h case    7:*/		return 0x822367A8;
		  /* 822367A8h */ case    8:  		/* bl -512 */
		/* 822367A8h case    8:*/		regs.LR = 0x822367AC; return 0x822365A8;
		/* 822367A8h case    8:*/		return 0x822367AC;
		  /* 822367ACh */ case    9:  		/* mr R4, R20 */
		/* 822367ACh case    9:*/		regs.R4 = regs.R20;
		/* 822367ACh case    9:*/		return 0x822367B0;
		  /* 822367B0h */ case   10:  		/* lwz R3, <#[R31 + 164]> */
		/* 822367B0h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A4) );
		/* 822367B0h case   10:*/		return 0x822367B4;
		  /* 822367B4h */ case   11:  		/* bl 141180 */
		/* 822367B4h case   11:*/		regs.LR = 0x822367B8; return 0x82258F30;
		/* 822367B4h case   11:*/		return 0x822367B8;
		  /* 822367B8h */ case   12:  		/* mr R3, R20 */
		/* 822367B8h case   12:*/		regs.R3 = regs.R20;
		/* 822367B8h case   12:*/		return 0x822367BC;
		  /* 822367BCh */ case   13:  		/* bl 129028 */
		/* 822367BCh case   13:*/		regs.LR = 0x822367C0; return 0x82255FC0;
		/* 822367BCh case   13:*/		return 0x822367C0;
		  /* 822367C0h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822367C0h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822367C0h case   14:*/		return 0x822367C4;
		  /* 822367C4h */ case   15:  		/* bc 4, CR0_EQ, 204 */
		/* 822367C4h case   15:*/		if ( !regs.CR[0].eq ) { return 0x82236890;  }
		/* 822367C4h case   15:*/		return 0x822367C8;
	}
	return 0x822367C8;
} // Block from 82236788h-822367C8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822367C8h
// Function '?BuildOutputLinkage@CFG@XGRAPHICS@@QAAXAAVLinkageInfo@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822367C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822367C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822367C8);
		  /* 822367C8h */ case    0:  		/* li R7, 704 */
		/* 822367C8h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x2C0);
		/* 822367C8h case    0:*/		return 0x822367CC;
		  /* 822367CCh */ case    1:  		/* b 176 */
		/* 822367CCh case    1:*/		return 0x8223687C;
		/* 822367CCh case    1:*/		return 0x822367D0;
	}
	return 0x822367D0;
} // Block from 822367C8h-822367D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822367D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822367D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822367D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822367D0);
		  /* 822367D0h */ case    0:  		/* cmpwi CR6, R11, 27 */
		/* 822367D0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 822367D0h case    0:*/		return 0x822367D4;
		  /* 822367D4h */ case    1:  		/* bc 4, CR6_EQ, 188 */
		/* 822367D4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82236890;  }
		/* 822367D4h case    1:*/		return 0x822367D8;
		  /* 822367D8h */ case    2:  		/* mr R3, R31 */
		/* 822367D8h case    2:*/		regs.R3 = regs.R31;
		/* 822367D8h case    2:*/		return 0x822367DC;
		  /* 822367DCh */ case    3:  		/* bl -940 */
		/* 822367DCh case    3:*/		regs.LR = 0x822367E0; return 0x82236430;
		/* 822367DCh case    3:*/		return 0x822367E0;
		  /* 822367E0h */ case    4:  		/* mr R21, R3 */
		/* 822367E0h case    4:*/		regs.R21 = regs.R3;
		/* 822367E0h case    4:*/		return 0x822367E4;
		  /* 822367E4h */ case    5:  		/* li R3, 49 */
		/* 822367E4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 822367E4h case    5:*/		return 0x822367E8;
		  /* 822367E8h */ case    6:  		/* lwz R4, <#[R31 + 12]> */
		/* 822367E8h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 822367E8h case    6:*/		return 0x822367EC;
		  /* 822367ECh */ case    7:  		/* bl 128836 */
		/* 822367ECh case    7:*/		regs.LR = 0x822367F0; return 0x82255F30;
		/* 822367ECh case    7:*/		return 0x822367F0;
		  /* 822367F0h */ case    8:  		/* mr R5, R30 */
		/* 822367F0h case    8:*/		regs.R5 = regs.R30;
		/* 822367F0h case    8:*/		return 0x822367F4;
		  /* 822367F4h */ case    9:  		/* li R4, 0 */
		/* 822367F4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822367F4h case    9:*/		return 0x822367F8;
		  /* 822367F8h */ case   10:  		/* mr R20, R3 */
		/* 822367F8h case   10:*/		regs.R20 = regs.R3;
		/* 822367F8h case   10:*/		return 0x822367FC;
		  /* 822367FCh */ case   11:  		/* bl 129948 */
		/* 822367FCh case   11:*/		regs.LR = 0x82236800; return 0x82256398;
		/* 822367FCh case   11:*/		return 0x82236800;
		  /* 82236800h */ case   12:  		/* mr R3, R20 */
		/* 82236800h case   12:*/		regs.R3 = regs.R20;
		/* 82236800h case   12:*/		return 0x82236804;
		  /* 82236804h */ case   13:  		/* mr R5, R21 */
		/* 82236804h case   13:*/		regs.R5 = regs.R21;
		/* 82236804h case   13:*/		return 0x82236808;
		  /* 82236808h */ case   14:  		/* li R4, 1 */
		/* 82236808h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82236808h case   14:*/		return 0x8223680C;
		  /* 8223680Ch */ case   15:  		/* bl 129932 */
		/* 8223680Ch case   15:*/		regs.LR = 0x82236810; return 0x82256398;
		/* 8223680Ch case   15:*/		return 0x82236810;
	}
	return 0x82236810;
} // Block from 822367D0h-82236810h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82236810h
// Function '?GetEnableParameterGeneration@CFG@XGRAPHICS@@QAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236810);
		  /* 82236810h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82236810h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82236810h case    0:*/		return 0x82236814;
		  /* 82236814h */ case    1:  		/* mr R3, R20 */
		/* 82236814h case    1:*/		regs.R3 = regs.R20;
		/* 82236814h case    1:*/		return 0x82236818;
	}
	return 0x82236818;
} // Block from 82236810h-82236818h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82236818h
// Function '?GetParameterGenerationPosition@CFG@XGRAPHICS@@QAAHXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236818);
		  /* 82236818h */ case    0:  		/* li R6, 2 */
		/* 82236818h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82236818h case    0:*/		return 0x8223681C;
		  /* 8223681Ch */ case    1:  		/* li R5, 0 */
		/* 8223681Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223681Ch case    1:*/		return 0x82236820;
	}
	return 0x82236820;
} // Block from 82236818h-82236820h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82236820h
// Function '?GetScreenXYFaceness@CFG@XGRAPHICS@@QAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236820);
		  /* 82236820h */ case    0:  		/* li R4, 1 */
		/* 82236820h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82236820h case    0:*/		return 0x82236824;
		  /* 82236824h */ case    1:  		/* lwz R11, <#[R11 + 88]> */
		/* 82236824h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82236824h case    1:*/		return 0x82236828;
	}
	return 0x82236828;
} // Block from 82236820h-82236828h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82236828h
// Function '??0InternalVector@XGRAPHICS@@IAA@PAVArena@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236828);
		  /* 82236828h */ case    0:  		/* mtspr CTR, R11 */
		/* 82236828h case    0:*/		regs.CTR = regs.R11;
		/* 82236828h case    0:*/		return 0x8223682C;
		  /* 8223682Ch */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 8223682Ch case    1:*/		if ( 1 ) { regs.LR = 0x82236830; return (uint32)regs.CTR; }
		/* 8223682Ch case    1:*/		return 0x82236830;
		  /* 82236830h */ case    2:  		/* lwz R11, <#[R20]> */
		/* 82236830h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82236830h case    2:*/		return 0x82236834;
		  /* 82236834h */ case    3:  		/* mr R3, R20 */
		/* 82236834h case    3:*/		regs.R3 = regs.R20;
		/* 82236834h case    3:*/		return 0x82236838;
		  /* 82236838h */ case    4:  		/* li R6, 3 */
		/* 82236838h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82236838h case    4:*/		return 0x8223683C;
		  /* 8223683Ch */ case    5:  		/* li R5, 1 */
		/* 8223683Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223683Ch case    5:*/		return 0x82236840;
		  /* 82236840h */ case    6:  		/* li R4, 1 */
		/* 82236840h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82236840h case    6:*/		return 0x82236844;
		  /* 82236844h */ case    7:  		/* lwz R11, <#[R11 + 88]> */
		/* 82236844h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82236844h case    7:*/		return 0x82236848;
		  /* 82236848h */ case    8:  		/* mtspr CTR, R11 */
		/* 82236848h case    8:*/		regs.CTR = regs.R11;
		/* 82236848h case    8:*/		return 0x8223684C;
		  /* 8223684Ch */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8223684Ch case    9:*/		if ( 1 ) { regs.LR = 0x82236850; return (uint32)regs.CTR; }
		/* 8223684Ch case    9:*/		return 0x82236850;
		  /* 82236850h */ case   10:  		/* mr R4, R20 */
		/* 82236850h case   10:*/		regs.R4 = regs.R20;
		/* 82236850h case   10:*/		return 0x82236854;
		  /* 82236854h */ case   11:  		/* mr R3, R31 */
		/* 82236854h case   11:*/		regs.R3 = regs.R31;
		/* 82236854h case   11:*/		return 0x82236858;
		  /* 82236858h */ case   12:  		/* bl -688 */
		/* 82236858h case   12:*/		regs.LR = 0x8223685C; return 0x822365A8;
		/* 82236858h case   12:*/		return 0x8223685C;
		  /* 8223685Ch */ case   13:  		/* mr R4, R20 */
		/* 8223685Ch case   13:*/		regs.R4 = regs.R20;
		/* 8223685Ch case   13:*/		return 0x82236860;
		  /* 82236860h */ case   14:  		/* lwz R3, <#[R31 + 164]> */
		/* 82236860h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A4) );
		/* 82236860h case   14:*/		return 0x82236864;
		  /* 82236864h */ case   15:  		/* bl 141004 */
		/* 82236864h case   15:*/		regs.LR = 0x82236868; return 0x82258F30;
		/* 82236864h case   15:*/		return 0x82236868;
		  /* 82236868h */ case   16:  		/* mr R3, R20 */
		/* 82236868h case   16:*/		regs.R3 = regs.R20;
		/* 82236868h case   16:*/		return 0x8223686C;
		  /* 8223686Ch */ case   17:  		/* bl 128852 */
		/* 8223686Ch case   17:*/		regs.LR = 0x82236870; return 0x82255FC0;
		/* 8223686Ch case   17:*/		return 0x82236870;
		  /* 82236870h */ case   18:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82236870h case   18:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82236870h case   18:*/		return 0x82236874;
		  /* 82236874h */ case   19:  		/* bc 4, CR0_EQ, 28 */
		/* 82236874h case   19:*/		if ( !regs.CR[0].eq ) { return 0x82236890;  }
		/* 82236874h case   19:*/		return 0x82236878;
		  /* 82236878h */ case   20:  		/* li R7, 718 */
		/* 82236878h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x2CE);
		/* 82236878h case   20:*/		return 0x8223687C;
	}
	return 0x8223687C;
} // Block from 82236828h-8223687Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8223687Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223687C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223687C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223687C);
		  /* 8223687Ch */ case    0:  		/* mr R6, R22 */
		/* 8223687Ch case    0:*/		regs.R6 = regs.R22;
		/* 8223687Ch case    0:*/		return 0x82236880;
	}
	return 0x82236880;
} // Block from 8223687Ch-82236880h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82236880h
// Function '??2COND_DIR@XGRAPHICS@@SAPAXIPBVArena@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236880);
		  /* 82236880h */ case    0:  		/* mr R5, R25 */
		/* 82236880h case    0:*/		regs.R5 = regs.R25;
		/* 82236880h case    0:*/		return 0x82236884;
		  /* 82236884h */ case    1:  		/* mr R4, R23 */
		/* 82236884h case    1:*/		regs.R4 = regs.R23;
		/* 82236884h case    1:*/		return 0x82236888;
		  /* 82236888h */ case    2:  		/* li R3, 0 */
		/* 82236888h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82236888h case    2:*/		return 0x8223688C;
		  /* 8223688Ch */ case    3:  		/* bl -912516 */
		/* 8223688Ch case    3:*/		regs.LR = 0x82236890; return 0x82157C08;
		/* 8223688Ch case    3:*/		return 0x82236890;
	}
	return 0x82236890;
} // Block from 82236880h-82236890h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82236890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236890);
		  /* 82236890h */ case    0:  		/* lwz R11, <#[R29 + 24]> */
		/* 82236890h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 82236890h case    0:*/		return 0x82236894;
		  /* 82236894h */ case    1:  		/* mulli R11, R11, 52 */
		/* 82236894h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x34);
		/* 82236894h case    1:*/		return 0x82236898;
		  /* 82236898h */ case    2:  		/* lwzx R11, <#[R11 + R24]> */
		/* 82236898h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R24 + 0x00000000) );
		/* 82236898h case    2:*/		return 0x8223689C;
		  /* 8223689Ch */ case    3:  		/* rlwinm. R10, R11, 26, 31, 31 */
		/* 8223689Ch case    3:*/		cpu::op::rlwinm<1,26,31,31>(regs,&regs.R10,regs.R11);
		/* 8223689Ch case    3:*/		return 0x822368A0;
		  /* 822368A0h */ case    4:  		/* bc 4, CR0_EQ, 128 */
		/* 822368A0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82236920;  }
		/* 822368A0h case    4:*/		return 0x822368A4;
		  /* 822368A4h */ case    5:  		/* rlwinm. R11, R11, 31, 31, 31 */
		/* 822368A4h case    5:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R11,regs.R11);
		/* 822368A4h case    5:*/		return 0x822368A8;
		  /* 822368A8h */ case    6:  		/* bc 12, CR0_EQ, 120 */
		/* 822368A8h case    6:*/		if ( regs.CR[0].eq ) { return 0x82236920;  }
		/* 822368A8h case    6:*/		return 0x822368AC;
		  /* 822368ACh */ case    7:  		/* lwz R11, <#[R30 + 32]> */
		/* 822368ACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 822368ACh case    7:*/		return 0x822368B0;
		  /* 822368B0h */ case    8:  		/* cmpwi CR6, R11, 11 */
		/* 822368B0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 822368B0h case    8:*/		return 0x822368B4;
		  /* 822368B4h */ case    9:  		/* bc 12, CR6_EQ, 108 */
		/* 822368B4h case    9:*/		if ( regs.CR[6].eq ) { return 0x82236920;  }
		/* 822368B4h case    9:*/		return 0x822368B8;
		  /* 822368B8h */ case   10:  		/* lbz R11, <#[R29 + 128]> */
		/* 822368B8h case   10:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000080) );
		/* 822368B8h case   10:*/		return 0x822368BC;
		  /* 822368BCh */ case   11:  		/* cmplwi CR6, R11, 1 */
		/* 822368BCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 822368BCh case   11:*/		return 0x822368C0;
	}
	return 0x822368C0;
} // Block from 82236890h-822368C0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822368C0h
// Function '?GetPWInput@IRInst@XGRAPHICS@@QAAPAV12@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822368C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822368C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822368C0);
		  /* 822368C0h */ case    0:  		/* bc 4, CR6_EQ, 12 */
		/* 822368C0h case    0:*/		if ( !regs.CR[6].eq ) { return 0x822368CC;  }
		/* 822368C0h case    0:*/		return 0x822368C4;
		  /* 822368C4h */ case    1:  		/* li R11, 0 */
		/* 822368C4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 822368C4h case    1:*/		return 0x822368C8;
		  /* 822368C8h */ case    2:  		/* b 8 */
		/* 822368C8h case    2:*/		return 0x822368D0;
		/* 822368C8h case    2:*/		return 0x822368CC;
	}
	return 0x822368CC;
} // Block from 822368C0h-822368CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822368CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822368CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822368CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822368CC);
		  /* 822368CCh */ case    0:  		/* lbz R11, <#[R28 + 48]> */
		/* 822368CCh case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 822368CCh case    0:*/		return 0x822368D0;
	}
	return 0x822368D0;
} // Block from 822368CCh-822368D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822368D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822368D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822368D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822368D0);
		  /* 822368D0h */ case    0:  		/* stb R11, <#[R28 + 48]> */
		/* 822368D0h case    0:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 822368D0h case    0:*/		return 0x822368D4;
		  /* 822368D4h */ case    1:  		/* lbz R11, <#[R29 + 129]> */
		/* 822368D4h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000081) );
		/* 822368D4h case    1:*/		return 0x822368D8;
		  /* 822368D8h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 822368D8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 822368D8h case    2:*/		return 0x822368DC;
		  /* 822368DCh */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 822368DCh case    3:*/		if ( regs.CR[6].eq ) { return 0x822368E4;  }
		/* 822368DCh case    3:*/		return 0x822368E0;
		  /* 822368E0h */ case    4:  		/* lbz R11, <#[R28 + 49]> */
		/* 822368E0h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000031) );
		/* 822368E0h case    4:*/		return 0x822368E4;
	}
	return 0x822368E4;
} // Block from 822368D0h-822368E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822368E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822368E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822368E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822368E4);
		  /* 822368E4h */ case    0:  		/* stb R11, <#[R28 + 49]> */
		/* 822368E4h case    0:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R28 + 0x00000031) );
		/* 822368E4h case    0:*/		return 0x822368E8;
		  /* 822368E8h */ case    1:  		/* lbz R11, <#[R29 + 130]> */
		/* 822368E8h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000082) );
		/* 822368E8h case    1:*/		return 0x822368EC;
		  /* 822368ECh */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 822368ECh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 822368ECh case    2:*/		return 0x822368F0;
		  /* 822368F0h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 822368F0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x822368FC;  }
		/* 822368F0h case    3:*/		return 0x822368F4;
		  /* 822368F4h */ case    4:  		/* li R11, 2 */
		/* 822368F4h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 822368F4h case    4:*/		return 0x822368F8;
		  /* 822368F8h */ case    5:  		/* b 8 */
		/* 822368F8h case    5:*/		return 0x82236900;
		/* 822368F8h case    5:*/		return 0x822368FC;
	}
	return 0x822368FC;
} // Block from 822368E4h-822368FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 822368FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822368FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822368FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822368FC);
		  /* 822368FCh */ case    0:  		/* lbz R11, <#[R28 + 50]> */
		/* 822368FCh case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000032) );
		/* 822368FCh case    0:*/		return 0x82236900;
	}
	return 0x82236900;
} // Block from 822368FCh-82236900h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82236900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236900);
		  /* 82236900h */ case    0:  		/* stb R11, <#[R28 + 50]> */
		/* 82236900h case    0:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R28 + 0x00000032) );
		/* 82236900h case    0:*/		return 0x82236904;
		  /* 82236904h */ case    1:  		/* lbz R11, <#[R29 + 131]> */
		/* 82236904h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000083) );
		/* 82236904h case    1:*/		return 0x82236908;
		  /* 82236908h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 82236908h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82236908h case    2:*/		return 0x8223690C;
		  /* 8223690Ch */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8223690Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82236918;  }
		/* 8223690Ch case    3:*/		return 0x82236910;
		  /* 82236910h */ case    4:  		/* li R11, 3 */
		/* 82236910h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82236910h case    4:*/		return 0x82236914;
		  /* 82236914h */ case    5:  		/* b 8 */
		/* 82236914h case    5:*/		return 0x8223691C;
		/* 82236914h case    5:*/		return 0x82236918;
	}
	return 0x82236918;
} // Block from 82236900h-82236918h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82236918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236918);
		  /* 82236918h */ case    0:  		/* lbz R11, <#[R28 + 51]> */
		/* 82236918h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000033) );
		/* 82236918h case    0:*/		return 0x8223691C;
	}
	return 0x8223691C;
} // Block from 82236918h-8223691Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223691Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223691C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223691C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223691C);
		  /* 8223691Ch */ case    0:  		/* stb R11, <#[R28 + 51]> */
		/* 8223691Ch case    0:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R28 + 0x00000033) );
		/* 8223691Ch case    0:*/		return 0x82236920;
	}
	return 0x82236920;
} // Block from 8223691Ch-82236920h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82236920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236920);
		  /* 82236920h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 82236920h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 82236920h case    0:*/		return 0x82236924;
		  /* 82236924h */ case    1:  		/* addi R26, R26, 1 */
		/* 82236924h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82236924h case    1:*/		return 0x82236928;
	}
	return 0x82236928;
} // Block from 82236920h-82236928h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82236928h
// Function '?RemovePWInput@IRInst@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236928);
		  /* 82236928h */ case    0:  		/* addi R28, R28, 4 */
		/* 82236928h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 82236928h case    0:*/		return 0x8223692C;
		  /* 8223692Ch */ case    1:  		/* cmpw CR6, R26, R11 */
		/* 8223692Ch case    1:*/		cpu::op::cmpw<6>(regs,regs.R26,regs.R11);
		/* 8223692Ch case    1:*/		return 0x82236930;
		  /* 82236930h */ case    2:  		/* bc 4, CR6_GT, -656 */
		/* 82236930h case    2:*/		if ( !regs.CR[6].gt ) { return 0x822366A0;  }
		/* 82236930h case    2:*/		return 0x82236934;
	}
	return 0x82236934;
} // Block from 82236928h-82236934h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82236934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236934);
		  /* 82236934h */ case    0:  		/* addi R1, R1, 192 */
		/* 82236934h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82236934h case    0:*/		return 0x82236938;
		  /* 82236938h */ case    1:  		/* b -1726128 */
		/* 82236938h case    1:*/		return 0x82091288;
		/* 82236938h case    1:*/		return 0x8223693C;
		  /* 8223693Ch */ case    2:  		/* nop */
		/* 8223693Ch case    2:*/		cpu::op::nop();
		/* 8223693Ch case    2:*/		return 0x82236940;
	}
	return 0x82236940;
} // Block from 82236934h-82236940h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82236940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236940);
		  /* 82236940h */ case    0:  		/* mfspr R12, LR */
		/* 82236940h case    0:*/		regs.R12 = regs.LR;
		/* 82236940h case    0:*/		return 0x82236944;
		  /* 82236944h */ case    1:  		/* bl -1726184 */
		/* 82236944h case    1:*/		regs.LR = 0x82236948; return 0x8209125C;
		/* 82236944h case    1:*/		return 0x82236948;
		  /* 82236948h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82236948h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82236948h case    2:*/		return 0x8223694C;
		  /* 8223694Ch */ case    3:  		/* addi R11, R3, 31 */
		/* 8223694Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x1F);
		/* 8223694Ch case    3:*/		return 0x82236950;
		  /* 82236950h */ case    4:  		/* mr R30, R3 */
		/* 82236950h case    4:*/		regs.R30 = regs.R3;
		/* 82236950h case    4:*/		return 0x82236954;
		  /* 82236954h */ case    5:  		/* rlwinm R31, R11, 27, 5, 31 */
		/* 82236954h case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R31,regs.R11);
		/* 82236954h case    5:*/		return 0x82236958;
		  /* 82236958h */ case    6:  		/* mr R29, R4 */
		/* 82236958h case    6:*/		regs.R29 = regs.R4;
		/* 82236958h case    6:*/		return 0x8223695C;
		  /* 8223695Ch */ case    7:  		/* addi R11, R31, 3 */
		/* 8223695Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x3);
		/* 8223695Ch case    7:*/		return 0x82236960;
		  /* 82236960h */ case    8:  		/* mr R3, R4 */
		/* 82236960h case    8:*/		regs.R3 = regs.R4;
		/* 82236960h case    8:*/		return 0x82236964;
		  /* 82236964h */ case    9:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 82236964h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 82236964h case    9:*/		return 0x82236968;
		  /* 82236968h */ case   10:  		/* bl -107696 */
		/* 82236968h case   10:*/		regs.LR = 0x8223696C; return 0x8221C4B8;
		/* 82236968h case   10:*/		return 0x8223696C;
		  /* 8223696Ch */ case   11:  		/* stw R29, <#[R3]> */
		/* 8223696Ch case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 8223696Ch case   11:*/		return 0x82236970;
		  /* 82236970h */ case   12:  		/* li R10, 0 */
		/* 82236970h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82236970h case   12:*/		return 0x82236974;
		  /* 82236974h */ case   13:  		/* stw R30, <#[R3 + 8]> */
		/* 82236974h case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000008) );
		/* 82236974h case   13:*/		return 0x82236978;
		  /* 82236978h */ case   14:  		/* addi R11, R3, 4 */
		/* 82236978h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 82236978h case   14:*/		return 0x8223697C;
		  /* 8223697Ch */ case   15:  		/* stw R31, <#[R3 + 4]> */
		/* 8223697Ch case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 8223697Ch case   15:*/		return 0x82236980;
		  /* 82236980h */ case   16:  		/* cmplwi CR6, R31, 0 */
		/* 82236980h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82236980h case   16:*/		return 0x82236984;
		  /* 82236984h */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 82236984h case   17:*/		if ( regs.CR[6].eq ) { return 0x822369A4;  }
		/* 82236984h case   17:*/		return 0x82236988;
		  /* 82236988h */ case   18:  		/* addi R9, R11, 4 */
		/* 82236988h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 82236988h case   18:*/		return 0x8223698C;
		  /* 8223698Ch */ case   19:  		/* li R8, 0 */
		/* 8223698Ch case   19:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8223698Ch case   19:*/		return 0x82236990;
		  /* 82236990h */ case   20:  		/* addi R10, R10, 1 */
		/* 82236990h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82236990h case   20:*/		return 0x82236994;
		  /* 82236994h */ case   21:  		/* stwu R8, <#[R9 + 4]> */
		/* 82236994h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 82236994h case   21:*/		return 0x82236998;
		  /* 82236998h */ case   22:  		/* lwz R8, <#[R11]> */
		/* 82236998h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82236998h case   22:*/		return 0x8223699C;
		  /* 8223699Ch */ case   23:  		/* cmplw CR6, R10, R8 */
		/* 8223699Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8223699Ch case   23:*/		return 0x822369A0;
		  /* 822369A0h */ case   24:  		/* bc 12, CR6_LT, -20 */
		/* 822369A0h case   24:*/		if ( regs.CR[6].lt ) { return 0x8223698C;  }
		/* 822369A0h case   24:*/		return 0x822369A4;
	}
	return 0x822369A4;
} // Block from 82236940h-822369A4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 822369A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822369A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822369A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822369A4);
		  /* 822369A4h */ case    0:  		/* mr R3, R11 */
		/* 822369A4h case    0:*/		regs.R3 = regs.R11;
		/* 822369A4h case    0:*/		return 0x822369A8;
		  /* 822369A8h */ case    1:  		/* addi R1, R1, 112 */
		/* 822369A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 822369A8h case    1:*/		return 0x822369AC;
		  /* 822369ACh */ case    2:  		/* b -1726208 */
		/* 822369ACh case    2:*/		return 0x820912AC;
		/* 822369ACh case    2:*/		return 0x822369B0;
	}
	return 0x822369B0;
} // Block from 822369A4h-822369B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822369B0h
// Function '?AddResource@IRInst@XGRAPHICS@@QAAXPAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822369B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822369B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822369B0);
		  /* 822369B0h */ case    0:  		/* mfspr R12, LR */
		/* 822369B0h case    0:*/		regs.R12 = regs.LR;
		/* 822369B0h case    0:*/		return 0x822369B4;
		  /* 822369B4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 822369B4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 822369B4h case    1:*/		return 0x822369B8;
		  /* 822369B8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 822369B8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822369B8h case    2:*/		return 0x822369BC;
		  /* 822369BCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 822369BCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 822369BCh case    3:*/		return 0x822369C0;
		  /* 822369C0h */ case    4:  		/* lwz R31, <#[R3 + 136]> */
		/* 822369C0h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000088) );
		/* 822369C0h case    4:*/		return 0x822369C4;
		  /* 822369C4h */ case    5:  		/* b 24 */
		/* 822369C4h case    5:*/		return 0x822369DC;
		/* 822369C4h case    5:*/		return 0x822369C8;
		  /* 822369C8h */ case    6:  		/* mr R3, R31 */
		/* 822369C8h case    6:*/		regs.R3 = regs.R31;
		/* 822369C8h case    6:*/		return 0x822369CC;
		  /* 822369CCh */ case    7:  		/* bl 141052 */
		/* 822369CCh case    7:*/		regs.LR = 0x822369D0; return 0x822590C8;
		/* 822369CCh case    7:*/		return 0x822369D0;
		  /* 822369D0h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822369D0h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822369D0h case    8:*/		return 0x822369D4;
		  /* 822369D4h */ case    9:  		/* bc 12, CR0_EQ, 44 */
		/* 822369D4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82236A00;  }
		/* 822369D4h case    9:*/		return 0x822369D8;
		  /* 822369D8h */ case   10:  		/* lwz R31, <#[R31 + 8]> */
		/* 822369D8h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 822369D8h case   10:*/		return 0x822369DC;
	}
	return 0x822369DC;
} // Block from 822369B0h-822369DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 822369DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822369DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822369DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822369DC);
		  /* 822369DCh */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 822369DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 822369DCh case    0:*/		return 0x822369E0;
		  /* 822369E0h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 822369E0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 822369E0h case    1:*/		return 0x822369E4;
		  /* 822369E4h */ case    2:  		/* bc 4, CR6_EQ, -28 */
		/* 822369E4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x822369C8;  }
		/* 822369E4h case    2:*/		return 0x822369E8;
		  /* 822369E8h */ case    3:  		/* li R3, 1 */
		/* 822369E8h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822369E8h case    3:*/		return 0x822369EC;
		  /* 822369ECh */ case    4:  		/* addi R1, R1, 96 */
		/* 822369ECh case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 822369ECh case    4:*/		return 0x822369F0;
		  /* 822369F0h */ case    5:  		/* lwz R12, <#[R1 - 8]> */
		/* 822369F0h case    5:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 822369F0h case    5:*/		return 0x822369F4;
		  /* 822369F4h */ case    6:  		/* mtspr LR, R12 */
		/* 822369F4h case    6:*/		regs.LR = regs.R12;
		/* 822369F4h case    6:*/		return 0x822369F8;
		  /* 822369F8h */ case    7:  		/* ld R31, <#[R1 - 16]> */
		/* 822369F8h case    7:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822369F8h case    7:*/		return 0x822369FC;
		  /* 822369FCh */ case    8:  		/* bclr 20, CR0_LT */
		/* 822369FCh case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822369FCh case    8:*/		return 0x82236A00;
	}
	return 0x82236A00;
} // Block from 822369DCh-82236A00h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82236A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236A00);
		  /* 82236A00h */ case    0:  		/* li R3, 0 */
		/* 82236A00h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82236A00h case    0:*/		return 0x82236A04;
		  /* 82236A04h */ case    1:  		/* b -24 */
		/* 82236A04h case    1:*/		return 0x822369EC;
		/* 82236A04h case    1:*/		return 0x82236A08;
	}
	return 0x82236A08;
} // Block from 82236A00h-82236A08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82236A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236A08);
		  /* 82236A08h */ case    0:  		/* mfspr R12, LR */
		/* 82236A08h case    0:*/		regs.R12 = regs.LR;
		/* 82236A08h case    0:*/		return 0x82236A0C;
		  /* 82236A0Ch */ case    1:  		/* bl -1726392 */
		/* 82236A0Ch case    1:*/		regs.LR = 0x82236A10; return 0x82091254;
		/* 82236A0Ch case    1:*/		return 0x82236A10;
		  /* 82236A10h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82236A10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82236A10h case    2:*/		return 0x82236A14;
		  /* 82236A14h */ case    3:  		/* li R5, 0 */
		/* 82236A14h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82236A14h case    3:*/		return 0x82236A18;
		  /* 82236A18h */ case    4:  		/* li R4, 23 */
		/* 82236A18h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 82236A18h case    4:*/		return 0x82236A1C;
		  /* 82236A1Ch */ case    5:  		/* mr R30, R3 */
		/* 82236A1Ch case    5:*/		regs.R30 = regs.R3;
		/* 82236A1Ch case    5:*/		return 0x82236A20;
		  /* 82236A20h */ case    6:  		/* lwz R3, <#[R3 + 172]> */
		/* 82236A20h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000000AC) );
		/* 82236A20h case    6:*/		return 0x82236A24;
		  /* 82236A24h */ case    7:  		/* bl 60908 */
		/* 82236A24h case    7:*/		regs.LR = 0x82236A28; return 0x82245810;
		/* 82236A24h case    7:*/		return 0x82236A28;
		  /* 82236A28h */ case    8:  		/* lwz R11, <#[R30 + 12]> */
		/* 82236A28h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82236A28h case    8:*/		return 0x82236A2C;
		  /* 82236A2Ch */ case    9:  		/* lwz R10, <#[R30 + 108]> */
		/* 82236A2Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000006C) );
		/* 82236A2Ch case    9:*/		return 0x82236A30;
		  /* 82236A30h */ case   10:  		/* mr R29, R3 */
		/* 82236A30h case   10:*/		regs.R29 = regs.R3;
		/* 82236A30h case   10:*/		return 0x82236A34;
		  /* 82236A34h */ case   11:  		/* li R4, 964 */
		/* 82236A34h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3C4);
		/* 82236A34h case   11:*/		return 0x82236A38;
		  /* 82236A38h */ case   12:  		/* lwz R31, <#[R11 + 1452]> */
		/* 82236A38h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x000005AC) );
		/* 82236A38h case   12:*/		return 0x82236A3C;
		  /* 82236A3Ch */ case   13:  		/* lwz R27, <#[R10 + 28]> */
		/* 82236A3Ch case   13:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + 0x0000001C) );
		/* 82236A3Ch case   13:*/		return 0x82236A40;
		  /* 82236A40h */ case   14:  		/* mr R3, R31 */
		/* 82236A40h case   14:*/		regs.R3 = regs.R31;
		/* 82236A40h case   14:*/		return 0x82236A44;
		  /* 82236A44h */ case   15:  		/* lwz R28, <#[R10 + 32]> */
		/* 82236A44h case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + 0x00000020) );
		/* 82236A44h case   15:*/		return 0x82236A48;
		  /* 82236A48h */ case   16:  		/* bl -107920 */
		/* 82236A48h case   16:*/		regs.LR = 0x82236A4C; return 0x8221C4B8;
		/* 82236A48h case   16:*/		return 0x82236A4C;
		  /* 82236A4Ch */ case   17:  		/* mr R11, R3 */
		/* 82236A4Ch case   17:*/		regs.R11 = regs.R3;
		/* 82236A4Ch case   17:*/		return 0x82236A50;
		  /* 82236A50h */ case   18:  		/* addic. R3, R3, 4 */
		/* 82236A50h case   18:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 82236A50h case   18:*/		return 0x82236A54;
		  /* 82236A54h */ case   19:  		/* stw R31, <#[R11]> */
		/* 82236A54h case   19:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 82236A54h case   19:*/		return 0x82236A58;
	}
	return 0x82236A58;
} // Block from 82236A08h-82236A58h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82236A58h
// Function '?SetParm@IRInst@XGRAPHICS@@QAAXHPAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236A58);
		  /* 82236A58h */ case    0:  		/* bc 12, CR0_EQ, 20 */
		/* 82236A58h case    0:*/		if ( regs.CR[0].eq ) { return 0x82236A6C;  }
		/* 82236A58h case    0:*/		return 0x82236A5C;
		  /* 82236A5Ch */ case    1:  		/* lwz R4, <#[R30 + 12]> */
		/* 82236A5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 82236A5Ch case    1:*/		return 0x82236A60;
		  /* 82236A60h */ case    2:  		/* bl 134792 */
		/* 82236A60h case    2:*/		regs.LR = 0x82236A64; return 0x822578E8;
		/* 82236A60h case    2:*/		return 0x82236A64;
		  /* 82236A64h */ case    3:  		/* mr R31, R3 */
		/* 82236A64h case    3:*/		regs.R31 = regs.R3;
		/* 82236A64h case    3:*/		return 0x82236A68;
		  /* 82236A68h */ case    4:  		/* b 8 */
		/* 82236A68h case    4:*/		return 0x82236A70;
		/* 82236A68h case    4:*/		return 0x82236A6C;
	}
	return 0x82236A6C;
} // Block from 82236A58h-82236A6Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82236A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236A6C);
		  /* 82236A6Ch */ case    0:  		/* li R31, 0 */
		/* 82236A6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82236A6Ch case    0:*/		return 0x82236A70;
	}
	return 0x82236A70;
} // Block from 82236A6Ch-82236A70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82236A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236A70);
		  /* 82236A70h */ case    0:  		/* mr R5, R27 */
		/* 82236A70h case    0:*/		regs.R5 = regs.R27;
		/* 82236A70h case    0:*/		return 0x82236A74;
		  /* 82236A74h */ case    1:  		/* li R4, 0 */
		/* 82236A74h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236A74h case    1:*/		return 0x82236A78;
		  /* 82236A78h */ case    2:  		/* mr R3, R31 */
		/* 82236A78h case    2:*/		regs.R3 = regs.R31;
		/* 82236A78h case    2:*/		return 0x82236A7C;
		  /* 82236A7Ch */ case    3:  		/* bl 129308 */
		/* 82236A7Ch case    3:*/		regs.LR = 0x82236A80; return 0x82256398;
		/* 82236A7Ch case    3:*/		return 0x82236A80;
		  /* 82236A80h */ case    4:  		/* mr R5, R28 */
		/* 82236A80h case    4:*/		regs.R5 = regs.R28;
		/* 82236A80h case    4:*/		return 0x82236A84;
		  /* 82236A84h */ case    5:  		/* li R4, 1 */
		/* 82236A84h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82236A84h case    5:*/		return 0x82236A88;
		  /* 82236A88h */ case    6:  		/* mr R3, R31 */
		/* 82236A88h case    6:*/		regs.R3 = regs.R31;
		/* 82236A88h case    6:*/		return 0x82236A8C;
		  /* 82236A8Ch */ case    7:  		/* bl 129292 */
		/* 82236A8Ch case    7:*/		regs.LR = 0x82236A90; return 0x82256398;
		/* 82236A8Ch case    7:*/		return 0x82236A90;
		  /* 82236A90h */ case    8:  		/* mr R5, R29 */
		/* 82236A90h case    8:*/		regs.R5 = regs.R29;
		/* 82236A90h case    8:*/		return 0x82236A94;
		  /* 82236A94h */ case    9:  		/* li R4, 2 */
		/* 82236A94h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82236A94h case    9:*/		return 0x82236A98;
		  /* 82236A98h */ case   10:  		/* mr R3, R31 */
		/* 82236A98h case   10:*/		regs.R3 = regs.R31;
		/* 82236A98h case   10:*/		return 0x82236A9C;
		  /* 82236A9Ch */ case   11:  		/* bl 129276 */
		/* 82236A9Ch case   11:*/		regs.LR = 0x82236AA0; return 0x82256398;
		/* 82236A9Ch case   11:*/		return 0x82236AA0;
		  /* 82236AA0h */ case   12:  		/* li R29, 0 */
		/* 82236AA0h case   12:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82236AA0h case   12:*/		return 0x82236AA4;
		  /* 82236AA4h */ case   13:  		/* lwz R11, <#[R31]> */
		/* 82236AA4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82236AA4h case   13:*/		return 0x82236AA8;
		  /* 82236AA8h */ case   14:  		/* li R6, 0 */
		/* 82236AA8h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82236AA8h case   14:*/		return 0x82236AAC;
		  /* 82236AACh */ case   15:  		/* mr R5, R29 */
		/* 82236AACh case   15:*/		regs.R5 = regs.R29;
		/* 82236AACh case   15:*/		return 0x82236AB0;
		  /* 82236AB0h */ case   16:  		/* li R4, 2 */
		/* 82236AB0h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82236AB0h case   16:*/		return 0x82236AB4;
		  /* 82236AB4h */ case   17:  		/* mr R3, R31 */
		/* 82236AB4h case   17:*/		regs.R3 = regs.R31;
		/* 82236AB4h case   17:*/		return 0x82236AB8;
		  /* 82236AB8h */ case   18:  		/* lwz R11, <#[R11 + 88]> */
		/* 82236AB8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82236AB8h case   18:*/		return 0x82236ABC;
		  /* 82236ABCh */ case   19:  		/* mtspr CTR, R11 */
		/* 82236ABCh case   19:*/		regs.CTR = regs.R11;
		/* 82236ABCh case   19:*/		return 0x82236AC0;
		  /* 82236AC0h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 82236AC0h case   20:*/		if ( 1 ) { regs.LR = 0x82236AC4; return (uint32)regs.CTR; }
		/* 82236AC0h case   20:*/		return 0x82236AC4;
		  /* 82236AC4h */ case   21:  		/* addi R29, R29, 1 */
		/* 82236AC4h case   21:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82236AC4h case   21:*/		return 0x82236AC8;
		  /* 82236AC8h */ case   22:  		/* cmpwi CR6, R29, 4 */
		/* 82236AC8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 82236AC8h case   22:*/		return 0x82236ACC;
		  /* 82236ACCh */ case   23:  		/* bc 12, CR6_LT, -40 */
		/* 82236ACCh case   23:*/		if ( regs.CR[6].lt ) { return 0x82236AA4;  }
		/* 82236ACCh case   23:*/		return 0x82236AD0;
		  /* 82236AD0h */ case   24:  		/* mr R5, R31 */
		/* 82236AD0h case   24:*/		regs.R5 = regs.R31;
		/* 82236AD0h case   24:*/		return 0x82236AD4;
		  /* 82236AD4h */ case   25:  		/* lwz R4, <#[R30 + 108]> */
		/* 82236AD4h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000006C) );
		/* 82236AD4h case   25:*/		return 0x82236AD8;
		  /* 82236AD8h */ case   26:  		/* mr R3, R28 */
		/* 82236AD8h case   26:*/		regs.R3 = regs.R28;
		/* 82236AD8h case   26:*/		return 0x82236ADC;
		  /* 82236ADCh */ case   27:  		/* bl 122164 */
		/* 82236ADCh case   27:*/		regs.LR = 0x82236AE0; return 0x82254810;
		/* 82236ADCh case   27:*/		return 0x82236AE0;
		  /* 82236AE0h */ case   28:  		/* lwz R3, <#[R30 + 108]> */
		/* 82236AE0h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000006C) );
		/* 82236AE0h case   28:*/		return 0x82236AE4;
		  /* 82236AE4h */ case   29:  		/* bl 130412 */
		/* 82236AE4h case   29:*/		regs.LR = 0x82236AE8; return 0x82256850;
		/* 82236AE4h case   29:*/		return 0x82236AE8;
		  /* 82236AE8h */ case   30:  		/* lwz R3, <#[R30 + 108]> */
		/* 82236AE8h case   30:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000006C) );
		/* 82236AE8h case   30:*/		return 0x82236AEC;
		  /* 82236AECh */ case   31:  		/* lwz R11, <#[R3]> */
		/* 82236AECh case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82236AECh case   31:*/		return 0x82236AF0;
		  /* 82236AF0h */ case   32:  		/* lwz R11, <#[R11 + 96]> */
		/* 82236AF0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000060) );
		/* 82236AF0h case   32:*/		return 0x82236AF4;
		  /* 82236AF4h */ case   33:  		/* mtspr CTR, R11 */
		/* 82236AF4h case   33:*/		regs.CTR = regs.R11;
		/* 82236AF4h case   33:*/		return 0x82236AF8;
		  /* 82236AF8h */ case   34:  		/* bcctrl 20, CR0_LT */
		/* 82236AF8h case   34:*/		if ( 1 ) { regs.LR = 0x82236AFC; return (uint32)regs.CTR; }
		/* 82236AF8h case   34:*/		return 0x82236AFC;
		  /* 82236AFCh */ case   35:  		/* mr R4, R31 */
		/* 82236AFCh case   35:*/		regs.R4 = regs.R31;
		/* 82236AFCh case   35:*/		return 0x82236B00;
	}
	return 0x82236B00;
} // Block from 82236A70h-82236B00h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82236B00h
// Function '??_G?$stack@I@XGRAPHICS@@QAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236B00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236B00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236B00);
		  /* 82236B00h */ case    0:  		/* lwz R3, <#[R30 + 168]> */
		/* 82236B00h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000000A8) );
		/* 82236B00h case    0:*/		return 0x82236B04;
		  /* 82236B04h */ case    1:  		/* bl 140332 */
		/* 82236B04h case    1:*/		regs.LR = 0x82236B08; return 0x82258F30;
		/* 82236B04h case    1:*/		return 0x82236B08;
		  /* 82236B08h */ case    2:  		/* mr R3, R31 */
		/* 82236B08h case    2:*/		regs.R3 = regs.R31;
		/* 82236B08h case    2:*/		return 0x82236B0C;
		  /* 82236B0Ch */ case    3:  		/* bl 128180 */
		/* 82236B0Ch case    3:*/		regs.LR = 0x82236B10; return 0x82255FC0;
		/* 82236B0Ch case    3:*/		return 0x82236B10;
		  /* 82236B10h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82236B10h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82236B10h case    4:*/		return 0x82236B14;
		  /* 82236B14h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 82236B14h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82236B3C;  }
		/* 82236B14h case    5:*/		return 0x82236B18;
		  /* 82236B18h */ case    6:  		/* lis R11, -32252 */
		/* 82236B18h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82236B18h case    6:*/		return 0x82236B1C;
		  /* 82236B1Ch */ case    7:  		/* lis R10, -32252 */
		/* 82236B1Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82236B1Ch case    7:*/		return 0x82236B20;
		  /* 82236B20h */ case    8:  		/* lis R9, -32253 */
		/* 82236B20h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82236B20h case    8:*/		return 0x82236B24;
		  /* 82236B24h */ case    9:  		/* addi R6, R11, 8520 */
		/* 82236B24h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 82236B24h case    9:*/		return 0x82236B28;
		  /* 82236B28h */ case   10:  		/* addi R5, R10, 8936 */
		/* 82236B28h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x22E8);
		/* 82236B28h case   10:*/		return 0x82236B2C;
		  /* 82236B2Ch */ case   11:  		/* addi R4, R9, 27460 */
		/* 82236B2Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82236B2Ch case   11:*/		return 0x82236B30;
		  /* 82236B30h */ case   12:  		/* li R7, 1198 */
		/* 82236B30h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x4AE);
		/* 82236B30h case   12:*/		return 0x82236B34;
		  /* 82236B34h */ case   13:  		/* li R3, 0 */
		/* 82236B34h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82236B34h case   13:*/		return 0x82236B38;
		  /* 82236B38h */ case   14:  		/* bl -913200 */
		/* 82236B38h case   14:*/		regs.LR = 0x82236B3C; return 0x82157C08;
		/* 82236B38h case   14:*/		return 0x82236B3C;
	}
	return 0x82236B3C;
} // Block from 82236B00h-82236B3Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82236B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236B3C);
		  /* 82236B3Ch */ case    0:  		/* stw R31, <#[R30 + 108]> */
		/* 82236B3Ch case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000006C) );
		/* 82236B3Ch case    0:*/		return 0x82236B40;
		  /* 82236B40h */ case    1:  		/* lwz R3, <#[R30 + 96]> */
		/* 82236B40h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000060) );
		/* 82236B40h case    1:*/		return 0x82236B44;
		  /* 82236B44h */ case    2:  		/* lwz R4, <#[R3 + 4]> */
		/* 82236B44h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 82236B44h case    2:*/		return 0x82236B48;
		  /* 82236B48h */ case    3:  		/* bl 118648 */
		/* 82236B48h case    3:*/		regs.LR = 0x82236B4C; return 0x82253AC0;
		/* 82236B48h case    3:*/		return 0x82236B4C;
		  /* 82236B4Ch */ case    4:  		/* stw R31, <#[R3]> */
		/* 82236B4Ch case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 82236B4Ch case    4:*/		return 0x82236B50;
		  /* 82236B50h */ case    5:  		/* addi R1, R1, 128 */
		/* 82236B50h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82236B50h case    5:*/		return 0x82236B54;
		  /* 82236B54h */ case    6:  		/* b -1726640 */
		/* 82236B54h case    6:*/		return 0x820912A4;
		/* 82236B54h case    6:*/		return 0x82236B58;
	}
	return 0x82236B58;
} // Block from 82236B3Ch-82236B58h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82236B58h
// Function '?AddToRootSet@CFG@XGRAPHICS@@QAAXPAVIRInst@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236B58);
		  /* 82236B58h */ case    0:  		/* mfspr R12, LR */
		/* 82236B58h case    0:*/		regs.R12 = regs.LR;
		/* 82236B58h case    0:*/		return 0x82236B5C;
		  /* 82236B5Ch */ case    1:  		/* bl -1726724 */
		/* 82236B5Ch case    1:*/		regs.LR = 0x82236B60; return 0x82091258;
		/* 82236B5Ch case    1:*/		return 0x82236B60;
		  /* 82236B60h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82236B60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82236B60h case    2:*/		return 0x82236B64;
		  /* 82236B64h */ case    3:  		/* lis R11, -32222 */
		/* 82236B64h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82236B64h case    3:*/		return 0x82236B68;
		  /* 82236B68h */ case    4:  		/* lwz R7, <#[R3 + 12]> */
		/* 82236B68h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x0000000C) );
		/* 82236B68h case    4:*/		return 0x82236B6C;
		  /* 82236B6Ch */ case    5:  		/* addi R5, R1, 92 */
		/* 82236B6Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5C);
		/* 82236B6Ch case    5:*/		return 0x82236B70;
		  /* 82236B70h */ case    6:  		/* addi R6, R11, -12392 */
		/* 82236B70h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82236B70h case    6:*/		return 0x82236B74;
		  /* 82236B74h */ case    7:  		/* li R4, 0 */
		/* 82236B74h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236B74h case    7:*/		return 0x82236B78;
		  /* 82236B78h */ case    8:  		/* mr R31, R3 */
		/* 82236B78h case    8:*/		regs.R31 = regs.R3;
		/* 82236B78h case    8:*/		return 0x82236B7C;
		  /* 82236B7Ch */ case    9:  		/* lwz R3, <#[R3 + 16]> */
		/* 82236B7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 82236B7Ch case    9:*/		return 0x82236B80;
		  /* 82236B80h */ case   10:  		/* bl -14232 */
		/* 82236B80h case   10:*/		regs.LR = 0x82236B84; return 0x822333E8;
		/* 82236B80h case   10:*/		return 0x82236B84;
		  /* 82236B84h */ case   11:  		/* lis R11, -32222 */
		/* 82236B84h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82236B84h case   11:*/		return 0x82236B88;
		  /* 82236B88h */ case   12:  		/* addi R5, R1, 88 */
		/* 82236B88h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 82236B88h case   12:*/		return 0x82236B8C;
		  /* 82236B8Ch */ case   13:  		/* lwz R7, <#[R31 + 12]> */
		/* 82236B8Ch case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236B8Ch case   13:*/		return 0x82236B90;
	}
	return 0x82236B90;
} // Block from 82236B58h-82236B90h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82236B90h
// Function '?RemoveFromRootSet@CFG@XGRAPHICS@@QAAXPAVIRInst@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236B90);
		  /* 82236B90h */ case    0:  		/* addi R6, R11, -12392 */
		/* 82236B90h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82236B90h case    0:*/		return 0x82236B94;
		  /* 82236B94h */ case    1:  		/* lwz R3, <#[R31 + 16]> */
		/* 82236B94h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82236B94h case    1:*/		return 0x82236B98;
		  /* 82236B98h */ case    2:  		/* li R4, 0 */
		/* 82236B98h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236B98h case    2:*/		return 0x82236B9C;
		  /* 82236B9Ch */ case    3:  		/* bl -14100 */
		/* 82236B9Ch case    3:*/		regs.LR = 0x82236BA0; return 0x82233488;
		/* 82236B9Ch case    3:*/		return 0x82236BA0;
		  /* 82236BA0h */ case    4:  		/* lis R11, -32222 */
		/* 82236BA0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82236BA0h case    4:*/		return 0x82236BA4;
		  /* 82236BA4h */ case    5:  		/* addi R5, R1, 84 */
		/* 82236BA4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82236BA4h case    5:*/		return 0x82236BA8;
		  /* 82236BA8h */ case    6:  		/* lwz R7, <#[R31 + 12]> */
		/* 82236BA8h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236BA8h case    6:*/		return 0x82236BAC;
		  /* 82236BACh */ case    7:  		/* addi R6, R11, -12392 */
		/* 82236BACh case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82236BACh case    7:*/		return 0x82236BB0;
		  /* 82236BB0h */ case    8:  		/* lwz R3, <#[R31 + 16]> */
		/* 82236BB0h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82236BB0h case    8:*/		return 0x82236BB4;
		  /* 82236BB4h */ case    9:  		/* li R4, 0 */
		/* 82236BB4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236BB4h case    9:*/		return 0x82236BB8;
		  /* 82236BB8h */ case   10:  		/* bl -13968 */
		/* 82236BB8h case   10:*/		regs.LR = 0x82236BBC; return 0x82233528;
		/* 82236BB8h case   10:*/		return 0x82236BBC;
		  /* 82236BBCh */ case   11:  		/* lis R11, -32222 */
		/* 82236BBCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82236BBCh case   11:*/		return 0x82236BC0;
		  /* 82236BC0h */ case   12:  		/* addi R5, R1, 80 */
		/* 82236BC0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82236BC0h case   12:*/		return 0x82236BC4;
		  /* 82236BC4h */ case   13:  		/* lwz R7, <#[R31 + 12]> */
		/* 82236BC4h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236BC4h case   13:*/		return 0x82236BC8;
		  /* 82236BC8h */ case   14:  		/* addi R6, R11, -12392 */
		/* 82236BC8h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82236BC8h case   14:*/		return 0x82236BCC;
		  /* 82236BCCh */ case   15:  		/* lwz R3, <#[R31 + 16]> */
		/* 82236BCCh case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82236BCCh case   15:*/		return 0x82236BD0;
		  /* 82236BD0h */ case   16:  		/* li R4, 0 */
		/* 82236BD0h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236BD0h case   16:*/		return 0x82236BD4;
		  /* 82236BD4h */ case   17:  		/* bl -13836 */
		/* 82236BD4h case   17:*/		regs.LR = 0x82236BD8; return 0x822335C8;
		/* 82236BD4h case   17:*/		return 0x82236BD8;
		  /* 82236BD8h */ case   18:  		/* lwz R11, <#[R31 + 108]> */
		/* 82236BD8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 82236BD8h case   18:*/		return 0x82236BDC;
		  /* 82236BDCh */ case   19:  		/* li R3, 18 */
		/* 82236BDCh case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x12);
		/* 82236BDCh case   19:*/		return 0x82236BE0;
		  /* 82236BE0h */ case   20:  		/* lwz R4, <#[R31 + 12]> */
		/* 82236BE0h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236BE0h case   20:*/		return 0x82236BE4;
		  /* 82236BE4h */ case   21:  		/* lwz R29, <#[R11 + 32]> */
		/* 82236BE4h case   21:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000020) );
		/* 82236BE4h case   21:*/		return 0x82236BE8;
		  /* 82236BE8h */ case   22:  		/* bl 137192 */
		/* 82236BE8h case   22:*/		regs.LR = 0x82236BEC; return 0x822583D0;
		/* 82236BE8h case   22:*/		return 0x82236BEC;
		  /* 82236BECh */ case   23:  		/* mr R5, R29 */
		/* 82236BECh case   23:*/		regs.R5 = regs.R29;
		/* 82236BECh case   23:*/		return 0x82236BF0;
		  /* 82236BF0h */ case   24:  		/* li R4, 0 */
		/* 82236BF0h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236BF0h case   24:*/		return 0x82236BF4;
		  /* 82236BF4h */ case   25:  		/* mr R30, R3 */
		/* 82236BF4h case   25:*/		regs.R30 = regs.R3;
		/* 82236BF4h case   25:*/		return 0x82236BF8;
		  /* 82236BF8h */ case   26:  		/* bl 128928 */
		/* 82236BF8h case   26:*/		regs.LR = 0x82236BFC; return 0x82256398;
		/* 82236BF8h case   26:*/		return 0x82236BFC;
		  /* 82236BFCh */ case   27:  		/* mr R5, R29 */
		/* 82236BFCh case   27:*/		regs.R5 = regs.R29;
		/* 82236BFCh case   27:*/		return 0x82236C00;
		  /* 82236C00h */ case   28:  		/* mr R3, R30 */
		/* 82236C00h case   28:*/		regs.R3 = regs.R30;
		/* 82236C00h case   28:*/		return 0x82236C04;
		  /* 82236C04h */ case   29:  		/* li R4, 1 */
		/* 82236C04h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82236C04h case   29:*/		return 0x82236C08;
		  /* 82236C08h */ case   30:  		/* bl 128912 */
		/* 82236C08h case   30:*/		regs.LR = 0x82236C0C; return 0x82256398;
		/* 82236C08h case   30:*/		return 0x82236C0C;
		  /* 82236C0Ch */ case   31:  		/* mr R3, R30 */
		/* 82236C0Ch case   31:*/		regs.R3 = regs.R30;
		/* 82236C0Ch case   31:*/		return 0x82236C10;
		  /* 82236C10h */ case   32:  		/* li R5, 2 */
		/* 82236C10h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82236C10h case   32:*/		return 0x82236C14;
		  /* 82236C14h */ case   33:  		/* lfs FR4, <#[R1 + 80]> */
		/* 82236C14h case   33:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000050) );
		/* 82236C14h case   33:*/		return 0x82236C18;
	}
	return 0x82236C18;
} // Block from 82236B90h-82236C18h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82236C18h
// Function '?AddImplicitInputs@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236C18);
		  /* 82236C18h */ case    0:  		/* mr R4, R31 */
		/* 82236C18h case    0:*/		regs.R4 = regs.R31;
		/* 82236C18h case    0:*/		return 0x82236C1C;
		  /* 82236C1Ch */ case    1:  		/* lfs FR3, <#[R1 + 84]> */
		/* 82236C1Ch case    1:*/		cpu::mem::load32f( regs, &regs.FR3, (uint32)(regs.R1 + 0x00000054) );
		/* 82236C1Ch case    1:*/		return 0x82236C20;
		  /* 82236C20h */ case    2:  		/* lfs FR2, <#[R1 + 88]> */
		/* 82236C20h case    2:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000058) );
		/* 82236C20h case    2:*/		return 0x82236C24;
		  /* 82236C24h */ case    3:  		/* lfs FR1, <#[R1 + 92]> */
		/* 82236C24h case    3:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x0000005C) );
		/* 82236C24h case    3:*/		return 0x82236C28;
		  /* 82236C28h */ case    4:  		/* bl 131824 */
		/* 82236C28h case    4:*/		regs.LR = 0x82236C2C; return 0x82256F18;
		/* 82236C28h case    4:*/		return 0x82236C2C;
		  /* 82236C2Ch */ case    5:  		/* lwz R11, <#[R30]> */
		/* 82236C2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82236C2Ch case    5:*/		return 0x82236C30;
		  /* 82236C30h */ case    6:  		/* mr R3, R30 */
		/* 82236C30h case    6:*/		regs.R3 = regs.R30;
		/* 82236C30h case    6:*/		return 0x82236C34;
		  /* 82236C34h */ case    7:  		/* li R6, 1 */
		/* 82236C34h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82236C34h case    7:*/		return 0x82236C38;
		  /* 82236C38h */ case    8:  		/* li R5, 3 */
		/* 82236C38h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82236C38h case    8:*/		return 0x82236C3C;
		  /* 82236C3Ch */ case    9:  		/* li R4, 0 */
		/* 82236C3Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236C3Ch case    9:*/		return 0x82236C40;
		  /* 82236C40h */ case   10:  		/* lwz R11, <#[R11 + 84]> */
		/* 82236C40h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82236C40h case   10:*/		return 0x82236C44;
		  /* 82236C44h */ case   11:  		/* mtspr CTR, R11 */
		/* 82236C44h case   11:*/		regs.CTR = regs.R11;
		/* 82236C44h case   11:*/		return 0x82236C48;
		  /* 82236C48h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 82236C48h case   12:*/		if ( 1 ) { regs.LR = 0x82236C4C; return (uint32)regs.CTR; }
		/* 82236C48h case   12:*/		return 0x82236C4C;
		  /* 82236C4Ch */ case   13:  		/* li R11, 1 */
		/* 82236C4Ch case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82236C4Ch case   13:*/		return 0x82236C50;
		  /* 82236C50h */ case   14:  		/* mr R5, R30 */
		/* 82236C50h case   14:*/		regs.R5 = regs.R30;
		/* 82236C50h case   14:*/		return 0x82236C54;
		  /* 82236C54h */ case   15:  		/* stb R11, <#[R30 + 154]> */
		/* 82236C54h case   15:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x0000009A) );
		/* 82236C54h case   15:*/		return 0x82236C58;
		  /* 82236C58h */ case   16:  		/* lwz R11, <#[R31 + 108]> */
		/* 82236C58h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 82236C58h case   16:*/		return 0x82236C5C;
		  /* 82236C5Ch */ case   17:  		/* mr R4, R11 */
		/* 82236C5Ch case   17:*/		regs.R4 = regs.R11;
		/* 82236C5Ch case   17:*/		return 0x82236C60;
		  /* 82236C60h */ case   18:  		/* lwz R3, <#[R11 + 948]> */
		/* 82236C60h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000003B4) );
		/* 82236C60h case   18:*/		return 0x82236C64;
		  /* 82236C64h */ case   19:  		/* bl 140220 */
		/* 82236C64h case   19:*/		regs.LR = 0x82236C68; return 0x82259020;
		/* 82236C64h case   19:*/		return 0x82236C68;
		  /* 82236C68h */ case   20:  		/* li R5, 0 */
		/* 82236C68h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82236C68h case   20:*/		return 0x82236C6C;
		  /* 82236C6Ch */ case   21:  		/* lwz R3, <#[R31 + 172]> */
		/* 82236C6Ch case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 82236C6Ch case   21:*/		return 0x82236C70;
		  /* 82236C70h */ case   22:  		/* li R4, 23 */
		/* 82236C70h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 82236C70h case   22:*/		return 0x82236C74;
		  /* 82236C74h */ case   23:  		/* bl 60316 */
		/* 82236C74h case   23:*/		regs.LR = 0x82236C78; return 0x82245810;
		/* 82236C74h case   23:*/		return 0x82236C78;
		  /* 82236C78h */ case   24:  		/* mr R28, R3 */
		/* 82236C78h case   24:*/		regs.R28 = regs.R3;
		/* 82236C78h case   24:*/		return 0x82236C7C;
		  /* 82236C7Ch */ case   25:  		/* li R3, 20 */
		/* 82236C7Ch case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82236C7Ch case   25:*/		return 0x82236C80;
		  /* 82236C80h */ case   26:  		/* lwz R4, <#[R31 + 12]> */
		/* 82236C80h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236C80h case   26:*/		return 0x82236C84;
		  /* 82236C84h */ case   27:  		/* bl 137148 */
		/* 82236C84h case   27:*/		regs.LR = 0x82236C88; return 0x82258440;
		/* 82236C84h case   27:*/		return 0x82236C88;
		  /* 82236C88h */ case   28:  		/* mr R5, R29 */
		/* 82236C88h case   28:*/		regs.R5 = regs.R29;
		/* 82236C88h case   28:*/		return 0x82236C8C;
		  /* 82236C8Ch */ case   29:  		/* li R4, 0 */
		/* 82236C8Ch case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236C8Ch case   29:*/		return 0x82236C90;
		  /* 82236C90h */ case   30:  		/* mr R30, R3 */
		/* 82236C90h case   30:*/		regs.R30 = regs.R3;
		/* 82236C90h case   30:*/		return 0x82236C94;
		  /* 82236C94h */ case   31:  		/* bl 128772 */
		/* 82236C94h case   31:*/		regs.LR = 0x82236C98; return 0x82256398;
		/* 82236C94h case   31:*/		return 0x82236C98;
		  /* 82236C98h */ case   32:  		/* mr R5, R28 */
		/* 82236C98h case   32:*/		regs.R5 = regs.R28;
		/* 82236C98h case   32:*/		return 0x82236C9C;
		  /* 82236C9Ch */ case   33:  		/* li R4, 1 */
		/* 82236C9Ch case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82236C9Ch case   33:*/		return 0x82236CA0;
		  /* 82236CA0h */ case   34:  		/* mr R3, R30 */
		/* 82236CA0h case   34:*/		regs.R3 = regs.R30;
		/* 82236CA0h case   34:*/		return 0x82236CA4;
		  /* 82236CA4h */ case   35:  		/* bl 128756 */
		/* 82236CA4h case   35:*/		regs.LR = 0x82236CA8; return 0x82256398;
		/* 82236CA4h case   35:*/		return 0x82236CA8;
		  /* 82236CA8h */ case   36:  		/* li R28, 0 */
		/* 82236CA8h case   36:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82236CA8h case   36:*/		return 0x82236CAC;
		  /* 82236CACh */ case   37:  		/* lwz R11, <#[R30]> */
		/* 82236CACh case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82236CACh case   37:*/		return 0x82236CB0;
		  /* 82236CB0h */ case   38:  		/* li R6, 0 */
		/* 82236CB0h case   38:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82236CB0h case   38:*/		return 0x82236CB4;
		  /* 82236CB4h */ case   39:  		/* mr R5, R28 */
		/* 82236CB4h case   39:*/		regs.R5 = regs.R28;
		/* 82236CB4h case   39:*/		return 0x82236CB8;
		  /* 82236CB8h */ case   40:  		/* li R4, 1 */
		/* 82236CB8h case   40:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82236CB8h case   40:*/		return 0x82236CBC;
		  /* 82236CBCh */ case   41:  		/* mr R3, R30 */
		/* 82236CBCh case   41:*/		regs.R3 = regs.R30;
		/* 82236CBCh case   41:*/		return 0x82236CC0;
		  /* 82236CC0h */ case   42:  		/* lwz R11, <#[R11 + 88]> */
		/* 82236CC0h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82236CC0h case   42:*/		return 0x82236CC4;
		  /* 82236CC4h */ case   43:  		/* mtspr CTR, R11 */
		/* 82236CC4h case   43:*/		regs.CTR = regs.R11;
		/* 82236CC4h case   43:*/		return 0x82236CC8;
		  /* 82236CC8h */ case   44:  		/* bcctrl 20, CR0_LT */
		/* 82236CC8h case   44:*/		if ( 1 ) { regs.LR = 0x82236CCC; return (uint32)regs.CTR; }
		/* 82236CC8h case   44:*/		return 0x82236CCC;
		  /* 82236CCCh */ case   45:  		/* addi R28, R28, 1 */
		/* 82236CCCh case   45:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82236CCCh case   45:*/		return 0x82236CD0;
		  /* 82236CD0h */ case   46:  		/* cmpwi CR6, R28, 4 */
		/* 82236CD0h case   46:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000004);
		/* 82236CD0h case   46:*/		return 0x82236CD4;
		  /* 82236CD4h */ case   47:  		/* bc 12, CR6_LT, -40 */
		/* 82236CD4h case   47:*/		if ( regs.CR[6].lt ) { return 0x82236CAC;  }
		/* 82236CD4h case   47:*/		return 0x82236CD8;
		  /* 82236CD8h */ case   48:  		/* mr R5, R29 */
		/* 82236CD8h case   48:*/		regs.R5 = regs.R29;
		/* 82236CD8h case   48:*/		return 0x82236CDC;
		  /* 82236CDCh */ case   49:  		/* li R4, 2 */
		/* 82236CDCh case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82236CDCh case   49:*/		return 0x82236CE0;
		  /* 82236CE0h */ case   50:  		/* mr R3, R30 */
		/* 82236CE0h case   50:*/		regs.R3 = regs.R30;
		/* 82236CE0h case   50:*/		return 0x82236CE4;
		  /* 82236CE4h */ case   51:  		/* bl 128692 */
		/* 82236CE4h case   51:*/		regs.LR = 0x82236CE8; return 0x82256398;
		/* 82236CE4h case   51:*/		return 0x82236CE8;
		  /* 82236CE8h */ case   52:  		/* li R5, 3 */
		/* 82236CE8h case   52:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82236CE8h case   52:*/		return 0x82236CEC;
		  /* 82236CECh */ case   53:  		/* mr R4, R31 */
		/* 82236CECh case   53:*/		regs.R4 = regs.R31;
		/* 82236CECh case   53:*/		return 0x82236CF0;
		  /* 82236CF0h */ case   54:  		/* lfs FR4, <#[R1 + 80]> */
		/* 82236CF0h case   54:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000050) );
		/* 82236CF0h case   54:*/		return 0x82236CF4;
		  /* 82236CF4h */ case   55:  		/* mr R3, R30 */
		/* 82236CF4h case   55:*/		regs.R3 = regs.R30;
		/* 82236CF4h case   55:*/		return 0x82236CF8;
		  /* 82236CF8h */ case   56:  		/* lfs FR3, <#[R1 + 84]> */
		/* 82236CF8h case   56:*/		cpu::mem::load32f( regs, &regs.FR3, (uint32)(regs.R1 + 0x00000054) );
		/* 82236CF8h case   56:*/		return 0x82236CFC;
		  /* 82236CFCh */ case   57:  		/* lfs FR2, <#[R1 + 88]> */
		/* 82236CFCh case   57:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000058) );
		/* 82236CFCh case   57:*/		return 0x82236D00;
		  /* 82236D00h */ case   58:  		/* lfs FR1, <#[R1 + 92]> */
		/* 82236D00h case   58:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x0000005C) );
		/* 82236D00h case   58:*/		return 0x82236D04;
		  /* 82236D04h */ case   59:  		/* bl 131604 */
		/* 82236D04h case   59:*/		regs.LR = 0x82236D08; return 0x82256F18;
		/* 82236D04h case   59:*/		return 0x82236D08;
		  /* 82236D08h */ case   60:  		/* lwz R11, <#[R30]> */
		/* 82236D08h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82236D08h case   60:*/		return 0x82236D0C;
		  /* 82236D0Ch */ case   61:  		/* li R6, 1 */
		/* 82236D0Ch case   61:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82236D0Ch case   61:*/		return 0x82236D10;
		  /* 82236D10h */ case   62:  		/* li R5, 3 */
		/* 82236D10h case   62:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82236D10h case   62:*/		return 0x82236D14;
		  /* 82236D14h */ case   63:  		/* li R4, 0 */
		/* 82236D14h case   63:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236D14h case   63:*/		return 0x82236D18;
		  /* 82236D18h */ case   64:  		/* mr R3, R30 */
		/* 82236D18h case   64:*/		regs.R3 = regs.R30;
		/* 82236D18h case   64:*/		return 0x82236D1C;
		  /* 82236D1Ch */ case   65:  		/* lwz R11, <#[R11 + 84]> */
		/* 82236D1Ch case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82236D1Ch case   65:*/		return 0x82236D20;
		  /* 82236D20h */ case   66:  		/* mtspr CTR, R11 */
		/* 82236D20h case   66:*/		regs.CTR = regs.R11;
		/* 82236D20h case   66:*/		return 0x82236D24;
		  /* 82236D24h */ case   67:  		/* bcctrl 20, CR0_LT */
		/* 82236D24h case   67:*/		if ( 1 ) { regs.LR = 0x82236D28; return (uint32)regs.CTR; }
		/* 82236D24h case   67:*/		return 0x82236D28;
		  /* 82236D28h */ case   68:  		/* lwz R11, <#[R31 + 108]> */
		/* 82236D28h case   68:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 82236D28h case   68:*/		return 0x82236D2C;
		  /* 82236D2Ch */ case   69:  		/* mr R5, R30 */
		/* 82236D2Ch case   69:*/		regs.R5 = regs.R30;
		/* 82236D2Ch case   69:*/		return 0x82236D30;
		  /* 82236D30h */ case   70:  		/* mr R4, R11 */
		/* 82236D30h case   70:*/		regs.R4 = regs.R11;
		/* 82236D30h case   70:*/		return 0x82236D34;
		  /* 82236D34h */ case   71:  		/* lwz R3, <#[R11 + 948]> */
		/* 82236D34h case   71:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000003B4) );
		/* 82236D34h case   71:*/		return 0x82236D38;
		  /* 82236D38h */ case   72:  		/* bl 140008 */
		/* 82236D38h case   72:*/		regs.LR = 0x82236D3C; return 0x82259020;
		/* 82236D38h case   72:*/		return 0x82236D3C;
		  /* 82236D3Ch */ case   73:  		/* addi R1, R1, 144 */
		/* 82236D3Ch case   73:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82236D3Ch case   73:*/		return 0x82236D40;
		  /* 82236D40h */ case   74:  		/* b -1727128 */
		/* 82236D40h case   74:*/		return 0x820912A8;
		/* 82236D40h case   74:*/		return 0x82236D44;
		  /* 82236D44h */ case   75:  		/* nop */
		/* 82236D44h case   75:*/		cpu::op::nop();
		/* 82236D44h case   75:*/		return 0x82236D48;
	}
	return 0x82236D48;
} // Block from 82236C18h-82236D48h (76 instructions)

//////////////////////////////////////////////////////
// Block at 82236D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236D48);
		  /* 82236D48h */ case    0:  		/* mfspr R12, LR */
		/* 82236D48h case    0:*/		regs.R12 = regs.LR;
		/* 82236D48h case    0:*/		return 0x82236D4C;
		  /* 82236D4Ch */ case    1:  		/* bl -1727244 */
		/* 82236D4Ch case    1:*/		regs.LR = 0x82236D50; return 0x82091240;
		/* 82236D4Ch case    1:*/		return 0x82236D50;
		  /* 82236D50h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82236D50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82236D50h case    2:*/		return 0x82236D54;
		  /* 82236D54h */ case    3:  		/* lwz R30, <#[R3 + 12]> */
		/* 82236D54h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 82236D54h case    3:*/		return 0x82236D58;
		  /* 82236D58h */ case    4:  		/* mr R31, R3 */
		/* 82236D58h case    4:*/		regs.R31 = regs.R3;
		/* 82236D58h case    4:*/		return 0x82236D5C;
		  /* 82236D5Ch */ case    5:  		/* lwz R3, <#[R30 + 1488]> */
		/* 82236D5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 82236D5Ch case    5:*/		return 0x82236D60;
		  /* 82236D60h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 82236D60h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82236D60h case    6:*/		return 0x82236D64;
		  /* 82236D64h */ case    7:  		/* lwz R11, <#[R11 + 28]> */
		/* 82236D64h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82236D64h case    7:*/		return 0x82236D68;
		  /* 82236D68h */ case    8:  		/* mtspr CTR, R11 */
		/* 82236D68h case    8:*/		regs.CTR = regs.R11;
		/* 82236D68h case    8:*/		return 0x82236D6C;
		  /* 82236D6Ch */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82236D6Ch case    9:*/		if ( 1 ) { regs.LR = 0x82236D70; return (uint32)regs.CTR; }
		/* 82236D6Ch case    9:*/		return 0x82236D70;
		  /* 82236D70h */ case   10:  		/* lis R11, -32222 */
		/* 82236D70h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82236D70h case   10:*/		return 0x82236D74;
		  /* 82236D74h */ case   11:  		/* mr R5, R3 */
		/* 82236D74h case   11:*/		regs.R5 = regs.R3;
		/* 82236D74h case   11:*/		return 0x82236D78;
		  /* 82236D78h */ case   12:  		/* lwz R3, <#[R31 + 16]> */
		/* 82236D78h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82236D78h case   12:*/		return 0x82236D7C;
		  /* 82236D7Ch */ case   13:  		/* li R4, 0 */
		/* 82236D7Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236D7Ch case   13:*/		return 0x82236D80;
		  /* 82236D80h */ case   14:  		/* addi R6, R11, -12392 */
		/* 82236D80h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82236D80h case   14:*/		return 0x82236D84;
		  /* 82236D84h */ case   15:  		/* mr R7, R30 */
		/* 82236D84h case   15:*/		regs.R7 = regs.R30;
		/* 82236D84h case   15:*/		return 0x82236D88;
		  /* 82236D88h */ case   16:  		/* bl -26088 */
		/* 82236D88h case   16:*/		regs.LR = 0x82236D8C; return 0x822307A0;
		/* 82236D88h case   16:*/		return 0x82236D8C;
		  /* 82236D8Ch */ case   17:  		/* lwz R30, <#[R31 + 12]> */
		/* 82236D8Ch case   17:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236D8Ch case   17:*/		return 0x82236D90;
		  /* 82236D90h */ case   18:  		/* mr R24, R3 */
		/* 82236D90h case   18:*/		regs.R24 = regs.R3;
		/* 82236D90h case   18:*/		return 0x82236D94;
		  /* 82236D94h */ case   19:  		/* lwz R3, <#[R30 + 1488]> */
		/* 82236D94h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 82236D94h case   19:*/		return 0x82236D98;
		  /* 82236D98h */ case   20:  		/* lwz R11, <#[R3]> */
		/* 82236D98h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82236D98h case   20:*/		return 0x82236D9C;
		  /* 82236D9Ch */ case   21:  		/* lwz R11, <#[R11 + 28]> */
		/* 82236D9Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82236D9Ch case   21:*/		return 0x82236DA0;
		  /* 82236DA0h */ case   22:  		/* mtspr CTR, R11 */
		/* 82236DA0h case   22:*/		regs.CTR = regs.R11;
		/* 82236DA0h case   22:*/		return 0x82236DA4;
		  /* 82236DA4h */ case   23:  		/* bcctrl 20, CR0_LT */
		/* 82236DA4h case   23:*/		if ( 1 ) { regs.LR = 0x82236DA8; return (uint32)regs.CTR; }
		/* 82236DA4h case   23:*/		return 0x82236DA8;
		  /* 82236DA8h */ case   24:  		/* lis R11, -32222 */
		/* 82236DA8h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82236DA8h case   24:*/		return 0x82236DAC;
		  /* 82236DACh */ case   25:  		/* mr R5, R3 */
		/* 82236DACh case   25:*/		regs.R5 = regs.R3;
		/* 82236DACh case   25:*/		return 0x82236DB0;
		  /* 82236DB0h */ case   26:  		/* lwz R3, <#[R31 + 16]> */
		/* 82236DB0h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82236DB0h case   26:*/		return 0x82236DB4;
		  /* 82236DB4h */ case   27:  		/* li R4, 0 */
		/* 82236DB4h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236DB4h case   27:*/		return 0x82236DB8;
		  /* 82236DB8h */ case   28:  		/* addi R6, R11, -12392 */
		/* 82236DB8h case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82236DB8h case   28:*/		return 0x82236DBC;
		  /* 82236DBCh */ case   29:  		/* mr R7, R30 */
		/* 82236DBCh case   29:*/		regs.R7 = regs.R30;
		/* 82236DBCh case   29:*/		return 0x82236DC0;
	}
	return 0x82236DC0;
} // Block from 82236D48h-82236DC0h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82236DC0h
// Function '?SetDfOrder@CFG@XGRAPHICS@@QAAXPAPAVBlock@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236DC0);
		  /* 82236DC0h */ case    0:  		/* bl -25864 */
		/* 82236DC0h case    0:*/		regs.LR = 0x82236DC4; return 0x822308B8;
		/* 82236DC0h case    0:*/		return 0x82236DC4;
		  /* 82236DC4h */ case    1:  		/* lwz R30, <#[R31 + 12]> */
		/* 82236DC4h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236DC4h case    1:*/		return 0x82236DC8;
		  /* 82236DC8h */ case    2:  		/* mr R25, R3 */
		/* 82236DC8h case    2:*/		regs.R25 = regs.R3;
		/* 82236DC8h case    2:*/		return 0x82236DCC;
		  /* 82236DCCh */ case    3:  		/* lwz R3, <#[R30 + 1488]> */
		/* 82236DCCh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 82236DCCh case    3:*/		return 0x82236DD0;
		  /* 82236DD0h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 82236DD0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82236DD0h case    4:*/		return 0x82236DD4;
		  /* 82236DD4h */ case    5:  		/* lwz R11, <#[R11 + 28]> */
		/* 82236DD4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82236DD4h case    5:*/		return 0x82236DD8;
		  /* 82236DD8h */ case    6:  		/* mtspr CTR, R11 */
		/* 82236DD8h case    6:*/		regs.CTR = regs.R11;
		/* 82236DD8h case    6:*/		return 0x82236DDC;
		  /* 82236DDCh */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 82236DDCh case    7:*/		if ( 1 ) { regs.LR = 0x82236DE0; return (uint32)regs.CTR; }
		/* 82236DDCh case    7:*/		return 0x82236DE0;
		  /* 82236DE0h */ case    8:  		/* lis R11, -32222 */
		/* 82236DE0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82236DE0h case    8:*/		return 0x82236DE4;
		  /* 82236DE4h */ case    9:  		/* mr R5, R3 */
		/* 82236DE4h case    9:*/		regs.R5 = regs.R3;
		/* 82236DE4h case    9:*/		return 0x82236DE8;
		  /* 82236DE8h */ case   10:  		/* lwz R3, <#[R31 + 16]> */
		/* 82236DE8h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82236DE8h case   10:*/		return 0x82236DEC;
		  /* 82236DECh */ case   11:  		/* li R4, 0 */
		/* 82236DECh case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236DECh case   11:*/		return 0x82236DF0;
		  /* 82236DF0h */ case   12:  		/* addi R6, R11, -12392 */
		/* 82236DF0h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82236DF0h case   12:*/		return 0x82236DF4;
		  /* 82236DF4h */ case   13:  		/* mr R7, R30 */
		/* 82236DF4h case   13:*/		regs.R7 = regs.R30;
		/* 82236DF4h case   13:*/		return 0x82236DF8;
		  /* 82236DF8h */ case   14:  		/* bl -25648 */
		/* 82236DF8h case   14:*/		regs.LR = 0x82236DFC; return 0x822309C8;
		/* 82236DF8h case   14:*/		return 0x82236DFC;
		  /* 82236DFCh */ case   15:  		/* lwz R10, <#[R31 + 12]> */
		/* 82236DFCh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236DFCh case   15:*/		return 0x82236E00;
		  /* 82236E00h */ case   16:  		/* li R4, 0 */
		/* 82236E00h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236E00h case   16:*/		return 0x82236E04;
		  /* 82236E04h */ case   17:  		/* mr R30, R3 */
		/* 82236E04h case   17:*/		regs.R30 = regs.R3;
		/* 82236E04h case   17:*/		return 0x82236E08;
		  /* 82236E08h */ case   18:  		/* lwz R11, <#[R10 + 1508]> */
		/* 82236E08h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 82236E08h case   18:*/		return 0x82236E0C;
		  /* 82236E0Ch */ case   19:  		/* addi R5, R11, -1 */
		/* 82236E0Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 82236E0Ch case   19:*/		return 0x82236E10;
		  /* 82236E10h */ case   20:  		/* stw R5, <#[R10 + 1508]> */
		/* 82236E10h case   20:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 82236E10h case   20:*/		return 0x82236E14;
		  /* 82236E14h */ case   21:  		/* lwz R3, <#[R31 + 172]> */
		/* 82236E14h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 82236E14h case   21:*/		return 0x82236E18;
		  /* 82236E18h */ case   22:  		/* bl 59896 */
		/* 82236E18h case   22:*/		regs.LR = 0x82236E1C; return 0x82245810;
		/* 82236E18h case   22:*/		return 0x82236E1C;
		  /* 82236E1Ch */ case   23:  		/* mr R27, R3 */
		/* 82236E1Ch case   23:*/		regs.R27 = regs.R3;
		/* 82236E1Ch case   23:*/		return 0x82236E20;
		  /* 82236E20h */ case   24:  		/* lwz R3, <#[R31 + 168]> */
		/* 82236E20h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A8) );
		/* 82236E20h case   24:*/		return 0x82236E24;
		  /* 82236E24h */ case   25:  		/* bl 140948 */
		/* 82236E24h case   25:*/		regs.LR = 0x82236E28; return 0x822594B8;
		/* 82236E24h case   25:*/		return 0x82236E28;
		  /* 82236E28h */ case   26:  		/* lis R11, -32253 */
		/* 82236E28h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82236E28h case   26:*/		return 0x82236E2C;
		  /* 82236E2Ch */ case   27:  		/* lis R10, -32252 */
		/* 82236E2Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82236E2Ch case   27:*/		return 0x82236E30;
	}
	return 0x82236E30;
} // Block from 82236DC0h-82236E30h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82236E30h
// Function '?GetExecutionOrder@CFG@XGRAPHICS@@QAAPAPAVBlock@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236E30);
		  /* 82236E30h */ case    0:  		/* cmpwi CR6, R3, 1 */
		/* 82236E30h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82236E30h case    0:*/		return 0x82236E34;
		  /* 82236E34h */ case    1:  		/* addi R23, R11, 27460 */
		/* 82236E34h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x6B44);
		/* 82236E34h case    1:*/		return 0x82236E38;
		  /* 82236E38h */ case    2:  		/* addi R22, R10, 8520 */
		/* 82236E38h case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0x2148);
		/* 82236E38h case    2:*/		return 0x82236E3C;
		  /* 82236E3Ch */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82236E3Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82236E5C;  }
		/* 82236E3Ch case    3:*/		return 0x82236E40;
		  /* 82236E40h */ case    4:  		/* lis R11, -32252 */
		/* 82236E40h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82236E40h case    4:*/		return 0x82236E44;
		  /* 82236E44h */ case    5:  		/* mr R6, R22 */
		/* 82236E44h case    5:*/		regs.R6 = regs.R22;
		/* 82236E44h case    5:*/		return 0x82236E48;
		  /* 82236E48h */ case    6:  		/* addi R5, R11, 9004 */
		/* 82236E48h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x232C);
		/* 82236E48h case    6:*/		return 0x82236E4C;
		  /* 82236E4Ch */ case    7:  		/* mr R4, R23 */
		/* 82236E4Ch case    7:*/		regs.R4 = regs.R23;
		/* 82236E4Ch case    7:*/		return 0x82236E50;
		  /* 82236E50h */ case    8:  		/* li R7, 1338 */
		/* 82236E50h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x53A);
		/* 82236E50h case    8:*/		return 0x82236E54;
		  /* 82236E54h */ case    9:  		/* li R3, 0 */
		/* 82236E54h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82236E54h case    9:*/		return 0x82236E58;
		  /* 82236E58h */ case   10:  		/* bl -914000 */
		/* 82236E58h case   10:*/		regs.LR = 0x82236E5C; return 0x82157C08;
		/* 82236E58h case   10:*/		return 0x82236E5C;
	}
	return 0x82236E5C;
} // Block from 82236E30h-82236E5Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82236E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236E5C);
		  /* 82236E5Ch */ case    0:  		/* lwz R9, <#[R31 + 168]> */
		/* 82236E5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000000A8) );
		/* 82236E5Ch case    0:*/		return 0x82236E60;
		  /* 82236E60h */ case    1:  		/* li R26, 0 */
		/* 82236E60h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82236E60h case    1:*/		return 0x82236E64;
		  /* 82236E64h */ case    2:  		/* lwz R29, <#[R1 + 84]> */
		/* 82236E64h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 82236E64h case    2:*/		return 0x82236E68;
		  /* 82236E68h */ case    3:  		/* li R8, 1 */
		/* 82236E68h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82236E68h case    3:*/		return 0x82236E6C;
		  /* 82236E6Ch */ case    4:  		/* mr R10, R26 */
		/* 82236E6Ch case    4:*/		regs.R10 = regs.R26;
		/* 82236E6Ch case    4:*/		return 0x82236E70;
		  /* 82236E70h */ case    5:  		/* mr R11, R26 */
		/* 82236E70h case    5:*/		regs.R11 = regs.R26;
		/* 82236E70h case    5:*/		return 0x82236E74;
		  /* 82236E74h */ case    6:  		/* lwz R9, <#[R9 + 60]> */
		/* 82236E74h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000003C) );
		/* 82236E74h case    6:*/		return 0x82236E78;
		  /* 82236E78h */ case    7:  		/* lwz R6, <#[R9 + 4]> */
		/* 82236E78h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000004) );
		/* 82236E78h case    7:*/		return 0x82236E7C;
		  /* 82236E7Ch */ case    8:  		/* cmplw CR6, R8, R6 */
		/* 82236E7Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R6);
		/* 82236E7Ch case    8:*/		return 0x82236E80;
		  /* 82236E80h */ case    9:  		/* bc 4, CR6_GT, 12 */
		/* 82236E80h case    9:*/		if ( !regs.CR[6].gt ) { return 0x82236E8C;  }
		/* 82236E80h case    9:*/		return 0x82236E84;
		  /* 82236E84h */ case   10:  		/* mr R7, R26 */
		/* 82236E84h case   10:*/		regs.R7 = regs.R26;
		/* 82236E84h case   10:*/		return 0x82236E88;
		  /* 82236E88h */ case   11:  		/* b 16 */
		/* 82236E88h case   11:*/		return 0x82236E98;
		/* 82236E88h case   11:*/		return 0x82236E8C;
	}
	return 0x82236E8C;
} // Block from 82236E5Ch-82236E8Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82236E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236E8C);
		  /* 82236E8Ch */ case    0:  		/* lwz R10, <#[R9 + 8]> */
		/* 82236E8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 82236E8Ch case    0:*/		return 0x82236E90;
		  /* 82236E90h */ case    1:  		/* li R7, 1 */
		/* 82236E90h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82236E90h case    1:*/		return 0x82236E94;
		  /* 82236E94h */ case    2:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82236E94h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82236E94h case    2:*/		return 0x82236E98;
	}
	return 0x82236E98;
} // Block from 82236E8Ch-82236E98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82236E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236E98);
		  /* 82236E98h */ case    0:  		/* rlwinm. R7, R7, 0, 24, 31 */
		/* 82236E98h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R7,regs.R7);
		/* 82236E98h case    0:*/		return 0x82236E9C;
		  /* 82236E9Ch */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82236E9Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82236EB0;  }
		/* 82236E9Ch case    1:*/		return 0x82236EA0;
		  /* 82236EA0h */ case    2:  		/* mr R29, R10 */
		/* 82236EA0h case    2:*/		regs.R29 = regs.R10;
		/* 82236EA0h case    2:*/		return 0x82236EA4;
		  /* 82236EA4h */ case    3:  		/* addi R8, R8, 1 */
		/* 82236EA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82236EA4h case    3:*/		return 0x82236EA8;
		  /* 82236EA8h */ case    4:  		/* addi R11, R11, 4 */
		/* 82236EA8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82236EA8h case    4:*/		return 0x82236EAC;
		  /* 82236EACh */ case    5:  		/* b -48 */
		/* 82236EACh case    5:*/		return 0x82236E7C;
		/* 82236EACh case    5:*/		return 0x82236EB0;
	}
	return 0x82236EB0;
} // Block from 82236E98h-82236EB0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82236EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236EB0);
		  /* 82236EB0h */ case    0:  		/* lwz R11, <#[R31 + 116]> */
		/* 82236EB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000074) );
		/* 82236EB0h case    0:*/		return 0x82236EB4;
		  /* 82236EB4h */ case    1:  		/* cmpwi CR6, R30, 1 */
		/* 82236EB4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000001);
		/* 82236EB4h case    1:*/		return 0x82236EB8;
		  /* 82236EB8h */ case    2:  		/* lwz R28, <#[R11 + 32]> */
		/* 82236EB8h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000020) );
		/* 82236EB8h case    2:*/		return 0x82236EBC;
		  /* 82236EBCh */ case    3:  		/* bc 4, CR6_EQ, 568 */
		/* 82236EBCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x822370F4;  }
		/* 82236EBCh case    3:*/		return 0x82236EC0;
		  /* 82236EC0h */ case    4:  		/* lwz R30, <#[R31 + 12]> */
		/* 82236EC0h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236EC0h case    4:*/		return 0x82236EC4;
		  /* 82236EC4h */ case    5:  		/* lwz R3, <#[R30 + 1488]> */
		/* 82236EC4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 82236EC4h case    5:*/		return 0x82236EC8;
		  /* 82236EC8h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 82236EC8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82236EC8h case    6:*/		return 0x82236ECC;
		  /* 82236ECCh */ case    7:  		/* lwz R11, <#[R11 + 28]> */
		/* 82236ECCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82236ECCh case    7:*/		return 0x82236ED0;
		  /* 82236ED0h */ case    8:  		/* mtspr CTR, R11 */
		/* 82236ED0h case    8:*/		regs.CTR = regs.R11;
		/* 82236ED0h case    8:*/		return 0x82236ED4;
		  /* 82236ED4h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82236ED4h case    9:*/		if ( 1 ) { regs.LR = 0x82236ED8; return (uint32)regs.CTR; }
		/* 82236ED4h case    9:*/		return 0x82236ED8;
		  /* 82236ED8h */ case   10:  		/* lis R11, -32222 */
		/* 82236ED8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82236ED8h case   10:*/		return 0x82236EDC;
		  /* 82236EDCh */ case   11:  		/* mr R5, R3 */
		/* 82236EDCh case   11:*/		regs.R5 = regs.R3;
		/* 82236EDCh case   11:*/		return 0x82236EE0;
		  /* 82236EE0h */ case   12:  		/* lwz R3, <#[R31 + 16]> */
		/* 82236EE0h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82236EE0h case   12:*/		return 0x82236EE4;
		  /* 82236EE4h */ case   13:  		/* li R4, 0 */
		/* 82236EE4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236EE4h case   13:*/		return 0x82236EE8;
		  /* 82236EE8h */ case   14:  		/* addi R6, R11, -12392 */
		/* 82236EE8h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82236EE8h case   14:*/		return 0x82236EEC;
		  /* 82236EECh */ case   15:  		/* mr R7, R30 */
		/* 82236EECh case   15:*/		regs.R7 = regs.R30;
		/* 82236EECh case   15:*/		return 0x82236EF0;
		  /* 82236EF0h */ case   16:  		/* bl -25616 */
		/* 82236EF0h case   16:*/		regs.LR = 0x82236EF4; return 0x82230AE0;
		/* 82236EF0h case   16:*/		return 0x82236EF4;
		  /* 82236EF4h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 82236EF4h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82236EF4h case   17:*/		return 0x82236EF8;
		  /* 82236EF8h */ case   18:  		/* bc 4, CR0_EQ, 380 */
		/* 82236EF8h case   18:*/		if ( !regs.CR[0].eq ) { return 0x82237074;  }
		/* 82236EF8h case   18:*/		return 0x82236EFC;
		  /* 82236EFCh */ case   19:  		/* lis R11, -32222 */
		/* 82236EFCh case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82236EFCh case   19:*/		return 0x82236F00;
		  /* 82236F00h */ case   20:  		/* lwz R7, <#[R31 + 12]> */
		/* 82236F00h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236F00h case   20:*/		return 0x82236F04;
		  /* 82236F04h */ case   21:  		/* addi R5, R1, 80 */
		/* 82236F04h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82236F04h case   21:*/		return 0x82236F08;
		  /* 82236F08h */ case   22:  		/* lwz R3, <#[R31 + 16]> */
		/* 82236F08h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82236F08h case   22:*/		return 0x82236F0C;
		  /* 82236F0Ch */ case   23:  		/* addi R6, R11, -12392 */
		/* 82236F0Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82236F0Ch case   23:*/		return 0x82236F10;
		  /* 82236F10h */ case   24:  		/* li R4, 0 */
		/* 82236F10h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236F10h case   24:*/		return 0x82236F14;
		  /* 82236F14h */ case   25:  		/* bl -13940 */
		/* 82236F14h case   25:*/		regs.LR = 0x82236F18; return 0x822338A0;
		/* 82236F14h case   25:*/		return 0x82236F18;
		  /* 82236F18h */ case   26:  		/* lis R11, -32222 */
		/* 82236F18h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82236F18h case   26:*/		return 0x82236F1C;
		  /* 82236F1Ch */ case   27:  		/* addi R5, R1, 84 */
		/* 82236F1Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82236F1Ch case   27:*/		return 0x82236F20;
		  /* 82236F20h */ case   28:  		/* lwz R7, <#[R31 + 12]> */
		/* 82236F20h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236F20h case   28:*/		return 0x82236F24;
		  /* 82236F24h */ case   29:  		/* addi R6, R11, -12392 */
		/* 82236F24h case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82236F24h case   29:*/		return 0x82236F28;
		  /* 82236F28h */ case   30:  		/* lwz R3, <#[R31 + 16]> */
		/* 82236F28h case   30:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82236F28h case   30:*/		return 0x82236F2C;
		  /* 82236F2Ch */ case   31:  		/* li R4, 0 */
		/* 82236F2Ch case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236F2Ch case   31:*/		return 0x82236F30;
		  /* 82236F30h */ case   32:  		/* bl -13704 */
		/* 82236F30h case   32:*/		regs.LR = 0x82236F34; return 0x822339A8;
		/* 82236F30h case   32:*/		return 0x82236F34;
		  /* 82236F34h */ case   33:  		/* li R3, 18 */
		/* 82236F34h case   33:*/		cpu::op::li<0>(regs,&regs.R3,0x12);
		/* 82236F34h case   33:*/		return 0x82236F38;
		  /* 82236F38h */ case   34:  		/* lwz R4, <#[R31 + 12]> */
		/* 82236F38h case   34:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236F38h case   34:*/		return 0x82236F3C;
		  /* 82236F3Ch */ case   35:  		/* bl 136340 */
		/* 82236F3Ch case   35:*/		regs.LR = 0x82236F40; return 0x822583D0;
		/* 82236F3Ch case   35:*/		return 0x82236F40;
		  /* 82236F40h */ case   36:  		/* mr R5, R27 */
		/* 82236F40h case   36:*/		regs.R5 = regs.R27;
		/* 82236F40h case   36:*/		return 0x82236F44;
		  /* 82236F44h */ case   37:  		/* li R4, 0 */
		/* 82236F44h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82236F44h case   37:*/		return 0x82236F48;
		  /* 82236F48h */ case   38:  		/* mr R25, R3 */
		/* 82236F48h case   38:*/		regs.R25 = regs.R3;
		/* 82236F48h case   38:*/		return 0x82236F4C;
		  /* 82236F4Ch */ case   39:  		/* bl 128076 */
		/* 82236F4Ch case   39:*/		regs.LR = 0x82236F50; return 0x82256398;
		/* 82236F4Ch case   39:*/		return 0x82236F50;
		  /* 82236F50h */ case   40:  		/* lis R11, -32252 */
		/* 82236F50h case   40:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82236F50h case   40:*/		return 0x82236F54;
		  /* 82236F54h */ case   41:  		/* mr R3, R25 */
		/* 82236F54h case   41:*/		regs.R3 = regs.R25;
		/* 82236F54h case   41:*/		return 0x82236F58;
		  /* 82236F58h */ case   42:  		/* addi R30, R11, 8484 */
		/* 82236F58h case   42:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x2124);
		/* 82236F58h case   42:*/		return 0x82236F5C;
		  /* 82236F5Ch */ case   43:  		/* li R5, 1 */
		/* 82236F5Ch case   43:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82236F5Ch case   43:*/		return 0x82236F60;
		  /* 82236F60h */ case   44:  		/* mr R4, R31 */
		/* 82236F60h case   44:*/		regs.R4 = regs.R31;
		/* 82236F60h case   44:*/		return 0x82236F64;
		  /* 82236F64h */ case   45:  		/* lwz R11, <#[R30 - 16]> */
		/* 82236F64h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 82236F64h case   45:*/		return 0x82236F68;
		  /* 82236F68h */ case   46:  		/* stw R11, <#[R25 + 128]> */
		/* 82236F68h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000080) );
		/* 82236F68h case   46:*/		return 0x82236F6C;
		  /* 82236F6Ch */ case   47:  		/* lfs FR4, <#[R1 + 80]> */
		/* 82236F6Ch case   47:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000050) );
		/* 82236F6Ch case   47:*/		return 0x82236F70;
		  /* 82236F70h */ case   48:  		/* fmr FR3, FR4 */
		/* 82236F70h case   48:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 82236F70h case   48:*/		return 0x82236F74;
		  /* 82236F74h */ case   49:  		/* fmr FR2, FR4 */
		/* 82236F74h case   49:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 82236F74h case   49:*/		return 0x82236F78;
		  /* 82236F78h */ case   50:  		/* fmr FR1, FR4 */
		/* 82236F78h case   50:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 82236F78h case   50:*/		return 0x82236F7C;
		  /* 82236F7Ch */ case   51:  		/* bl 130972 */
		/* 82236F7Ch case   51:*/		regs.LR = 0x82236F80; return 0x82256F18;
		/* 82236F7Ch case   51:*/		return 0x82236F80;
		  /* 82236F80h */ case   52:  		/* li R11, 1 */
		/* 82236F80h case   52:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82236F80h case   52:*/		return 0x82236F84;
		  /* 82236F84h */ case   53:  		/* mr R3, R25 */
		/* 82236F84h case   53:*/		regs.R3 = regs.R25;
		/* 82236F84h case   53:*/		return 0x82236F88;
		  /* 82236F88h */ case   54:  		/* stb R11, <#[R25 + 153]> */
		/* 82236F88h case   54:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R25 + 0x00000099) );
		/* 82236F88h case   54:*/		return 0x82236F8C;
		  /* 82236F8Ch */ case   55:  		/* mr R5, R28 */
		/* 82236F8Ch case   55:*/		regs.R5 = regs.R28;
		/* 82236F8Ch case   55:*/		return 0x82236F90;
	}
	return 0x82236F90;
} // Block from 82236EB0h-82236F90h (56 instructions)

//////////////////////////////////////////////////////
// Block at 82236F90h
// Function '?SetUpParamGen@CFG@XGRAPHICS@@AAAPAVVRegInfo@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236F90);
		  /* 82236F90h */ case    0:  		/* li R4, 2 */
		/* 82236F90h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82236F90h case    0:*/		return 0x82236F94;
		  /* 82236F94h */ case    1:  		/* bl 128004 */
		/* 82236F94h case    1:*/		regs.LR = 0x82236F98; return 0x82256398;
		/* 82236F94h case    1:*/		return 0x82236F98;
		  /* 82236F98h */ case    2:  		/* lwz R11, <#[R30 + 4]> */
		/* 82236F98h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82236F98h case    2:*/		return 0x82236F9C;
		  /* 82236F9Ch */ case    3:  		/* mr R4, R25 */
		/* 82236F9Ch case    3:*/		regs.R4 = regs.R25;
		/* 82236F9Ch case    3:*/		return 0x82236FA0;
		  /* 82236FA0h */ case    4:  		/* mr R3, R31 */
		/* 82236FA0h case    4:*/		regs.R3 = regs.R31;
		/* 82236FA0h case    4:*/		return 0x82236FA4;
		  /* 82236FA4h */ case    5:  		/* stw R11, <#[R25 + 136]> */
		/* 82236FA4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000088) );
		/* 82236FA4h case    5:*/		return 0x82236FA8;
		  /* 82236FA8h */ case    6:  		/* bl -2560 */
		/* 82236FA8h case    6:*/		regs.LR = 0x82236FAC; return 0x822365A8;
		/* 82236FA8h case    6:*/		return 0x82236FAC;
		  /* 82236FACh */ case    7:  		/* mr R4, R25 */
		/* 82236FACh case    7:*/		regs.R4 = regs.R25;
		/* 82236FACh case    7:*/		return 0x82236FB0;
		  /* 82236FB0h */ case    8:  		/* mr R3, R29 */
		/* 82236FB0h case    8:*/		regs.R3 = regs.R29;
		/* 82236FB0h case    8:*/		return 0x82236FB4;
		  /* 82236FB4h */ case    9:  		/* bl 139132 */
		/* 82236FB4h case    9:*/		regs.LR = 0x82236FB8; return 0x82258F30;
		/* 82236FB4h case    9:*/		return 0x82236FB8;
		  /* 82236FB8h */ case   10:  		/* mr R3, R25 */
		/* 82236FB8h case   10:*/		regs.R3 = regs.R25;
		/* 82236FB8h case   10:*/		return 0x82236FBC;
		  /* 82236FBCh */ case   11:  		/* bl 126980 */
		/* 82236FBCh case   11:*/		regs.LR = 0x82236FC0; return 0x82255FC0;
		/* 82236FBCh case   11:*/		return 0x82236FC0;
		  /* 82236FC0h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82236FC0h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82236FC0h case   12:*/		return 0x82236FC4;
		  /* 82236FC4h */ case   13:  		/* bc 4, CR0_EQ, 32 */
		/* 82236FC4h case   13:*/		if ( !regs.CR[0].eq ) { return 0x82236FE4;  }
		/* 82236FC4h case   13:*/		return 0x82236FC8;
		  /* 82236FC8h */ case   14:  		/* lis R11, -32252 */
		/* 82236FC8h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82236FC8h case   14:*/		return 0x82236FCC;
		  /* 82236FCCh */ case   15:  		/* mr R6, R22 */
		/* 82236FCCh case   15:*/		regs.R6 = regs.R22;
		/* 82236FCCh case   15:*/		return 0x82236FD0;
		  /* 82236FD0h */ case   16:  		/* addi R5, R11, 8988 */
		/* 82236FD0h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x231C);
		/* 82236FD0h case   16:*/		return 0x82236FD4;
		  /* 82236FD4h */ case   17:  		/* mr R4, R23 */
		/* 82236FD4h case   17:*/		regs.R4 = regs.R23;
		/* 82236FD4h case   17:*/		return 0x82236FD8;
	}
	return 0x82236FD8;
} // Block from 82236F90h-82236FD8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82236FD8h
// Function '?InsertInstructionsForTwoSidedLighting@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236FD8);
		  /* 82236FD8h */ case    0:  		/* li R7, 1372 */
		/* 82236FD8h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x55C);
		/* 82236FD8h case    0:*/		return 0x82236FDC;
		  /* 82236FDCh */ case    1:  		/* li R3, 0 */
		/* 82236FDCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82236FDCh case    1:*/		return 0x82236FE0;
		  /* 82236FE0h */ case    2:  		/* bl -914392 */
		/* 82236FE0h case    2:*/		regs.LR = 0x82236FE4; return 0x82157C08;
		/* 82236FE0h case    2:*/		return 0x82236FE4;
	}
	return 0x82236FE4;
} // Block from 82236FD8h-82236FE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82236FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82236FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82236FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82236FE4);
		  /* 82236FE4h */ case    0:  		/* li R3, 19 */
		/* 82236FE4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 82236FE4h case    0:*/		return 0x82236FE8;
		  /* 82236FE8h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 82236FE8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82236FE8h case    1:*/		return 0x82236FEC;
		  /* 82236FECh */ case    2:  		/* bl 136164 */
		/* 82236FECh case    2:*/		regs.LR = 0x82236FF0; return 0x822583D0;
		/* 82236FECh case    2:*/		return 0x82236FF0;
		  /* 82236FF0h */ case    3:  		/* lwz R11, <#[R30 - 16]> */
		/* 82236FF0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 82236FF0h case    3:*/		return 0x82236FF4;
		  /* 82236FF4h */ case    4:  		/* li R10, 23 */
		/* 82236FF4h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x17);
		/* 82236FF4h case    4:*/		return 0x82236FF8;
		  /* 82236FF8h */ case    5:  		/* stw R26, <#[R3 + 56]> */
		/* 82236FF8h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000038) );
		/* 82236FF8h case    5:*/		return 0x82236FFC;
		  /* 82236FFCh */ case    6:  		/* mr R5, R27 */
		/* 82236FFCh case    6:*/		regs.R5 = regs.R27;
		/* 82236FFCh case    6:*/		return 0x82237000;
		  /* 82237000h */ case    7:  		/* stw R10, <#[R3 + 80]> */
		/* 82237000h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000050) );
		/* 82237000h case    7:*/		return 0x82237004;
		  /* 82237004h */ case    8:  		/* li R4, 1 */
		/* 82237004h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82237004h case    8:*/		return 0x82237008;
		  /* 82237008h */ case    9:  		/* mr R28, R3 */
		/* 82237008h case    9:*/		regs.R28 = regs.R3;
		/* 82237008h case    9:*/		return 0x8223700C;
		  /* 8223700Ch */ case   10:  		/* stw R11, <#[R3 + 128]> */
		/* 8223700Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 8223700Ch case   10:*/		return 0x82237010;
		  /* 82237010h */ case   11:  		/* bl 127880 */
		/* 82237010h case   11:*/		regs.LR = 0x82237014; return 0x82256398;
		/* 82237010h case   11:*/		return 0x82237014;
		  /* 82237014h */ case   12:  		/* lwz R11, <#[R30 - 4]> */
		/* 82237014h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 82237014h case   12:*/		return 0x82237018;
		  /* 82237018h */ case   13:  		/* mr R3, R28 */
		/* 82237018h case   13:*/		regs.R3 = regs.R28;
		/* 82237018h case   13:*/		return 0x8223701C;
		  /* 8223701Ch */ case   14:  		/* li R5, 2 */
		/* 8223701Ch case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223701Ch case   14:*/		return 0x82237020;
		  /* 82237020h */ case   15:  		/* mr R4, R31 */
		/* 82237020h case   15:*/		regs.R4 = regs.R31;
		/* 82237020h case   15:*/		return 0x82237024;
		  /* 82237024h */ case   16:  		/* stw R11, <#[R28 + 132]> */
		/* 82237024h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000084) );
		/* 82237024h case   16:*/		return 0x82237028;
		  /* 82237028h */ case   17:  		/* lfs FR4, <#[R1 + 84]> */
		/* 82237028h case   17:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000054) );
		/* 82237028h case   17:*/		return 0x8223702C;
		  /* 8223702Ch */ case   18:  		/* fmr FR3, FR4 */
		/* 8223702Ch case   18:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 8223702Ch case   18:*/		return 0x82237030;
		  /* 82237030h */ case   19:  		/* fmr FR2, FR4 */
		/* 82237030h case   19:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 82237030h case   19:*/		return 0x82237034;
		  /* 82237034h */ case   20:  		/* fmr FR1, FR4 */
		/* 82237034h case   20:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 82237034h case   20:*/		return 0x82237038;
		  /* 82237038h */ case   21:  		/* bl 130784 */
		/* 82237038h case   21:*/		regs.LR = 0x8223703C; return 0x82256F18;
		/* 82237038h case   21:*/		return 0x8223703C;
		  /* 8223703Ch */ case   22:  		/* mr R4, R28 */
		/* 8223703Ch case   22:*/		regs.R4 = regs.R28;
		/* 8223703Ch case   22:*/		return 0x82237040;
		  /* 82237040h */ case   23:  		/* mr R3, R31 */
		/* 82237040h case   23:*/		regs.R3 = regs.R31;
		/* 82237040h case   23:*/		return 0x82237044;
		  /* 82237044h */ case   24:  		/* bl -2716 */
		/* 82237044h case   24:*/		regs.LR = 0x82237048; return 0x822365A8;
		/* 82237044h case   24:*/		return 0x82237048;
		  /* 82237048h */ case   25:  		/* mr R4, R28 */
		/* 82237048h case   25:*/		regs.R4 = regs.R28;
		/* 82237048h case   25:*/		return 0x8223704C;
		  /* 8223704Ch */ case   26:  		/* mr R3, R29 */
		/* 8223704Ch case   26:*/		regs.R3 = regs.R29;
		/* 8223704Ch case   26:*/		return 0x82237050;
		  /* 82237050h */ case   27:  		/* bl 138976 */
		/* 82237050h case   27:*/		regs.LR = 0x82237054; return 0x82258F30;
		/* 82237050h case   27:*/		return 0x82237054;
		  /* 82237054h */ case   28:  		/* mr R3, R28 */
		/* 82237054h case   28:*/		regs.R3 = regs.R28;
		/* 82237054h case   28:*/		return 0x82237058;
		  /* 82237058h */ case   29:  		/* bl 126824 */
		/* 82237058h case   29:*/		regs.LR = 0x8223705C; return 0x82255FC0;
		/* 82237058h case   29:*/		return 0x8223705C;
		  /* 8223705Ch */ case   30:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223705Ch case   30:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223705Ch case   30:*/		return 0x82237060;
		  /* 82237060h */ case   31:  		/* bc 4, CR0_EQ, 636 */
		/* 82237060h case   31:*/		if ( !regs.CR[0].eq ) { return 0x822372DC;  }
		/* 82237060h case   31:*/		return 0x82237064;
		  /* 82237064h */ case   32:  		/* lis R11, -32252 */
		/* 82237064h case   32:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82237064h case   32:*/		return 0x82237068;
		  /* 82237068h */ case   33:  		/* li R7, 1383 */
		/* 82237068h case   33:*/		cpu::op::li<0>(regs,&regs.R7,0x567);
		/* 82237068h case   33:*/		return 0x8223706C;
		  /* 8223706Ch */ case   34:  		/* addi R5, R11, 8972 */
		/* 8223706Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x230C);
		/* 8223706Ch case   34:*/		return 0x82237070;
		  /* 82237070h */ case   35:  		/* b 604 */
		/* 82237070h case   35:*/		return 0x822372CC;
		/* 82237070h case   35:*/		return 0x82237074;
	}
	return 0x82237074;
} // Block from 82236FE4h-82237074h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82237074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237074);
		  /* 82237074h */ case    0:  		/* li R3, 49 */
		/* 82237074h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 82237074h case    0:*/		return 0x82237078;
		  /* 82237078h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 82237078h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237078h case    1:*/		return 0x8223707C;
		  /* 8223707Ch */ case    2:  		/* bl 126644 */
		/* 8223707Ch case    2:*/		regs.LR = 0x82237080; return 0x82255F30;
		/* 8223707Ch case    2:*/		return 0x82237080;
		  /* 82237080h */ case    3:  		/* lis R11, -32252 */
		/* 82237080h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82237080h case    3:*/		return 0x82237084;
		  /* 82237084h */ case    4:  		/* li R10, 23 */
		/* 82237084h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x17);
		/* 82237084h case    4:*/		return 0x82237088;
		  /* 82237088h */ case    5:  		/* stw R26, <#[R3 + 56]> */
		/* 82237088h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000038) );
		/* 82237088h case    5:*/		return 0x8223708C;
		  /* 8223708Ch */ case    6:  		/* addi R27, R11, 8484 */
		/* 8223708Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x2124);
		/* 8223708Ch case    6:*/		return 0x82237090;
		  /* 82237090h */ case    7:  		/* stw R10, <#[R3 + 80]> */
		/* 82237090h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000050) );
		/* 82237090h case    7:*/		return 0x82237094;
		  /* 82237094h */ case    8:  		/* mr R5, R28 */
		/* 82237094h case    8:*/		regs.R5 = regs.R28;
		/* 82237094h case    8:*/		return 0x82237098;
		  /* 82237098h */ case    9:  		/* li R4, 1 */
		/* 82237098h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82237098h case    9:*/		return 0x8223709C;
		  /* 8223709Ch */ case   10:  		/* mr R30, R3 */
		/* 8223709Ch case   10:*/		regs.R30 = regs.R3;
		/* 8223709Ch case   10:*/		return 0x822370A0;
		  /* 822370A0h */ case   11:  		/* lwz R11, <#[R27 - 16]> */
		/* 822370A0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0xFFFFFFF0) );
		/* 822370A0h case   11:*/		return 0x822370A4;
		  /* 822370A4h */ case   12:  		/* stw R11, <#[R3 + 128]> */
		/* 822370A4h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 822370A4h case   12:*/		return 0x822370A8;
		  /* 822370A8h */ case   13:  		/* bl 127728 */
		/* 822370A8h case   13:*/		regs.LR = 0x822370AC; return 0x82256398;
		/* 822370A8h case   13:*/		return 0x822370AC;
		  /* 822370ACh */ case   14:  		/* lwz R11, <#[R27 + 4]> */
		/* 822370ACh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 822370ACh case   14:*/		return 0x822370B0;
		  /* 822370B0h */ case   15:  		/* mr R4, R30 */
		/* 822370B0h case   15:*/		regs.R4 = regs.R30;
		/* 822370B0h case   15:*/		return 0x822370B4;
		  /* 822370B4h */ case   16:  		/* mr R3, R31 */
		/* 822370B4h case   16:*/		regs.R3 = regs.R31;
		/* 822370B4h case   16:*/		return 0x822370B8;
		  /* 822370B8h */ case   17:  		/* stw R11, <#[R30 + 132]> */
		/* 822370B8h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000084) );
		/* 822370B8h case   17:*/		return 0x822370BC;
		  /* 822370BCh */ case   18:  		/* bl -2836 */
		/* 822370BCh case   18:*/		regs.LR = 0x822370C0; return 0x822365A8;
		/* 822370BCh case   18:*/		return 0x822370C0;
		  /* 822370C0h */ case   19:  		/* mr R3, R30 */
		/* 822370C0h case   19:*/		regs.R3 = regs.R30;
		/* 822370C0h case   19:*/		return 0x822370C4;
		  /* 822370C4h */ case   20:  		/* bl 126716 */
		/* 822370C4h case   20:*/		regs.LR = 0x822370C8; return 0x82255FC0;
		/* 822370C4h case   20:*/		return 0x822370C8;
		  /* 822370C8h */ case   21:  		/* mr R4, R30 */
		/* 822370C8h case   21:*/		regs.R4 = regs.R30;
		/* 822370C8h case   21:*/		return 0x822370CC;
		  /* 822370CCh */ case   22:  		/* mr R3, R29 */
		/* 822370CCh case   22:*/		regs.R3 = regs.R29;
		/* 822370CCh case   22:*/		return 0x822370D0;
		  /* 822370D0h */ case   23:  		/* bl 138848 */
		/* 822370D0h case   23:*/		regs.LR = 0x822370D4; return 0x82258F30;
		/* 822370D0h case   23:*/		return 0x822370D4;
		  /* 822370D4h */ case   24:  		/* mr R3, R30 */
		/* 822370D4h case   24:*/		regs.R3 = regs.R30;
		/* 822370D4h case   24:*/		return 0x822370D8;
		  /* 822370D8h */ case   25:  		/* bl 126696 */
		/* 822370D8h case   25:*/		regs.LR = 0x822370DC; return 0x82255FC0;
		/* 822370D8h case   25:*/		return 0x822370DC;
		  /* 822370DCh */ case   26:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822370DCh case   26:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822370DCh case   26:*/		return 0x822370E0;
		  /* 822370E0h */ case   27:  		/* bc 4, CR0_EQ, 508 */
		/* 822370E0h case   27:*/		if ( !regs.CR[0].eq ) { return 0x822372DC;  }
		/* 822370E0h case   27:*/		return 0x822370E4;
		  /* 822370E4h */ case   28:  		/* lis R11, -32252 */
		/* 822370E4h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822370E4h case   28:*/		return 0x822370E8;
		  /* 822370E8h */ case   29:  		/* li R7, 1394 */
		/* 822370E8h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x572);
		/* 822370E8h case   29:*/		return 0x822370EC;
		  /* 822370ECh */ case   30:  		/* addi R5, R11, 8912 */
		/* 822370ECh case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x22D0);
		/* 822370ECh case   30:*/		return 0x822370F0;
		  /* 822370F0h */ case   31:  		/* b 476 */
		/* 822370F0h case   31:*/		return 0x822372CC;
		/* 822370F0h case   31:*/		return 0x822370F4;
	}
	return 0x822370F4;
} // Block from 82237074h-822370F4h (32 instructions)

//////////////////////////////////////////////////////
// Block at 822370F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822370F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822370F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822370F4);
		  /* 822370F4h */ case    0:  		/* cmpwi CR6, R25, 0 */
		/* 822370F4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 822370F4h case    0:*/		return 0x822370F8;
		  /* 822370F8h */ case    1:  		/* bc 12, CR6_EQ, 448 */
		/* 822370F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x822372B8;  }
		/* 822370F8h case    1:*/		return 0x822370FC;
		  /* 822370FCh */ case    2:  		/* lis R11, -32222 */
		/* 822370FCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 822370FCh case    2:*/		return 0x82237100;
		  /* 82237100h */ case    3:  		/* lwz R7, <#[R31 + 12]> */
		/* 82237100h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237100h case    3:*/		return 0x82237104;
		  /* 82237104h */ case    4:  		/* addi R5, R1, 80 */
		/* 82237104h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82237104h case    4:*/		return 0x82237108;
	}
	return 0x82237108;
} // Block from 822370F4h-82237108h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82237108h
// Function '?BuildUsesAndDefs@CFG@XGRAPHICS@@AAAXAAVIRInst@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237108);
		  /* 82237108h */ case    0:  		/* lwz R3, <#[R31 + 16]> */
		/* 82237108h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82237108h case    0:*/		return 0x8223710C;
		  /* 8223710Ch */ case    1:  		/* addi R6, R11, -12392 */
		/* 8223710Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223710Ch case    1:*/		return 0x82237110;
		  /* 82237110h */ case    2:  		/* li R4, 0 */
		/* 82237110h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237110h case    2:*/		return 0x82237114;
		  /* 82237114h */ case    3:  		/* bl -13676 */
		/* 82237114h case    3:*/		regs.LR = 0x82237118; return 0x82233BA8;
		/* 82237114h case    3:*/		return 0x82237118;
		  /* 82237118h */ case    4:  		/* lis R11, -32222 */
		/* 82237118h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82237118h case    4:*/		return 0x8223711C;
		  /* 8223711Ch */ case    5:  		/* addi R5, R1, 84 */
		/* 8223711Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 8223711Ch case    5:*/		return 0x82237120;
		  /* 82237120h */ case    6:  		/* lwz R7, <#[R31 + 12]> */
		/* 82237120h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237120h case    6:*/		return 0x82237124;
		  /* 82237124h */ case    7:  		/* addi R6, R11, -12392 */
		/* 82237124h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82237124h case    7:*/		return 0x82237128;
		  /* 82237128h */ case    8:  		/* lwz R3, <#[R31 + 16]> */
		/* 82237128h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82237128h case    8:*/		return 0x8223712C;
		  /* 8223712Ch */ case    9:  		/* li R4, 0 */
		/* 8223712Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223712Ch case    9:*/		return 0x82237130;
		  /* 82237130h */ case   10:  		/* bl -13864 */
		/* 82237130h case   10:*/		regs.LR = 0x82237134; return 0x82233B08;
		/* 82237130h case   10:*/		return 0x82237134;
		  /* 82237134h */ case   11:  		/* li R3, 64 */
		/* 82237134h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x40);
		/* 82237134h case   11:*/		return 0x82237138;
		  /* 82237138h */ case   12:  		/* lwz R4, <#[R31 + 12]> */
		/* 82237138h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237138h case   12:*/		return 0x8223713C;
		  /* 8223713Ch */ case   13:  		/* bl 135724 */
		/* 8223713Ch case   13:*/		regs.LR = 0x82237140; return 0x82258368;
		/* 8223713Ch case   13:*/		return 0x82237140;
		  /* 82237140h */ case   14:  		/* li R30, 23 */
		/* 82237140h case   14:*/		cpu::op::li<0>(regs,&regs.R30,0x17);
		/* 82237140h case   14:*/		return 0x82237144;
		  /* 82237144h */ case   15:  		/* stw R26, <#[R3 + 56]> */
		/* 82237144h case   15:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000038) );
		/* 82237144h case   15:*/		return 0x82237148;
		  /* 82237148h */ case   16:  		/* mr R5, R28 */
		/* 82237148h case   16:*/		regs.R5 = regs.R28;
		/* 82237148h case   16:*/		return 0x8223714C;
		  /* 8223714Ch */ case   17:  		/* stw R30, <#[R3 + 80]> */
		/* 8223714Ch case   17:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000050) );
		/* 8223714Ch case   17:*/		return 0x82237150;
		  /* 82237150h */ case   18:  		/* li R4, 1 */
		/* 82237150h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82237150h case   18:*/		return 0x82237154;
		  /* 82237154h */ case   19:  		/* mr R25, R3 */
		/* 82237154h case   19:*/		regs.R25 = regs.R3;
		/* 82237154h case   19:*/		return 0x82237158;
		  /* 82237158h */ case   20:  		/* bl 127552 */
		/* 82237158h case   20:*/		regs.LR = 0x8223715C; return 0x82256398;
		/* 82237158h case   20:*/		return 0x8223715C;
		  /* 8223715Ch */ case   21:  		/* lis R11, -32252 */
		/* 8223715Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223715Ch case   21:*/		return 0x82237160;
		  /* 82237160h */ case   22:  		/* mr R4, R25 */
		/* 82237160h case   22:*/		regs.R4 = regs.R25;
		/* 82237160h case   22:*/		return 0x82237164;
		  /* 82237164h */ case   23:  		/* addi R27, R11, 8484 */
		/* 82237164h case   23:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x2124);
		/* 82237164h case   23:*/		return 0x82237168;
		  /* 82237168h */ case   24:  		/* mr R3, R31 */
		/* 82237168h case   24:*/		regs.R3 = regs.R31;
		/* 82237168h case   24:*/		return 0x8223716C;
		  /* 8223716Ch */ case   25:  		/* lwz R11, <#[R27 + 4]> */
		/* 8223716Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 8223716Ch case   25:*/		return 0x82237170;
		  /* 82237170h */ case   26:  		/* stw R11, <#[R25 + 132]> */
		/* 82237170h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000084) );
		/* 82237170h case   26:*/		return 0x82237174;
		  /* 82237174h */ case   27:  		/* bl -3020 */
		/* 82237174h case   27:*/		regs.LR = 0x82237178; return 0x822365A8;
		/* 82237174h case   27:*/		return 0x82237178;
		  /* 82237178h */ case   28:  		/* mr R4, R25 */
		/* 82237178h case   28:*/		regs.R4 = regs.R25;
		/* 82237178h case   28:*/		return 0x8223717C;
		  /* 8223717Ch */ case   29:  		/* mr R3, R29 */
		/* 8223717Ch case   29:*/		regs.R3 = regs.R29;
		/* 8223717Ch case   29:*/		return 0x82237180;
		  /* 82237180h */ case   30:  		/* bl 138672 */
		/* 82237180h case   30:*/		regs.LR = 0x82237184; return 0x82258F30;
		/* 82237180h case   30:*/		return 0x82237184;
		  /* 82237184h */ case   31:  		/* mr R3, R25 */
		/* 82237184h case   31:*/		regs.R3 = regs.R25;
		/* 82237184h case   31:*/		return 0x82237188;
		  /* 82237188h */ case   32:  		/* bl 126520 */
		/* 82237188h case   32:*/		regs.LR = 0x8223718C; return 0x82255FC0;
		/* 82237188h case   32:*/		return 0x8223718C;
		  /* 8223718Ch */ case   33:  		/* lis R11, -32252 */
		/* 8223718Ch case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223718Ch case   33:*/		return 0x82237190;
		  /* 82237190h */ case   34:  		/* rlwinm. R10, R3, 0, 24, 31 */
		/* 82237190h case   34:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R3);
		/* 82237190h case   34:*/		return 0x82237194;
		  /* 82237194h */ case   35:  		/* addi R25, R11, 8972 */
		/* 82237194h case   35:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x230C);
		/* 82237194h case   35:*/		return 0x82237198;
		  /* 82237198h */ case   36:  		/* bc 4, CR0_EQ, 28 */
		/* 82237198h case   36:*/		if ( !regs.CR[0].eq ) { return 0x822371B4;  }
		/* 82237198h case   36:*/		return 0x8223719C;
		  /* 8223719Ch */ case   37:  		/* mr R6, R22 */
		/* 8223719Ch case   37:*/		regs.R6 = regs.R22;
		/* 8223719Ch case   37:*/		return 0x822371A0;
		  /* 822371A0h */ case   38:  		/* mr R5, R25 */
		/* 822371A0h case   38:*/		regs.R5 = regs.R25;
		/* 822371A0h case   38:*/		return 0x822371A4;
		  /* 822371A4h */ case   39:  		/* mr R4, R23 */
		/* 822371A4h case   39:*/		regs.R4 = regs.R23;
		/* 822371A4h case   39:*/		return 0x822371A8;
		  /* 822371A8h */ case   40:  		/* li R7, 1412 */
		/* 822371A8h case   40:*/		cpu::op::li<0>(regs,&regs.R7,0x584);
		/* 822371A8h case   40:*/		return 0x822371AC;
		  /* 822371ACh */ case   41:  		/* li R3, 0 */
		/* 822371ACh case   41:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822371ACh case   41:*/		return 0x822371B0;
		  /* 822371B0h */ case   42:  		/* bl -914856 */
		/* 822371B0h case   42:*/		regs.LR = 0x822371B4; return 0x82157C08;
		/* 822371B0h case   42:*/		return 0x822371B4;
	}
	return 0x822371B4;
} // Block from 82237108h-822371B4h (43 instructions)

//////////////////////////////////////////////////////
// Block at 822371B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822371B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822371B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822371B4);
		  /* 822371B4h */ case    0:  		/* li R3, 19 */
		/* 822371B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 822371B4h case    0:*/		return 0x822371B8;
		  /* 822371B8h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 822371B8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 822371B8h case    1:*/		return 0x822371BC;
		  /* 822371BCh */ case    2:  		/* bl 135700 */
		/* 822371BCh case    2:*/		regs.LR = 0x822371C0; return 0x822583D0;
		/* 822371BCh case    2:*/		return 0x822371C0;
		  /* 822371C0h */ case    3:  		/* stw R26, <#[R3 + 56]> */
		/* 822371C0h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000038) );
		/* 822371C0h case    3:*/		return 0x822371C4;
		  /* 822371C4h */ case    4:  		/* stw R30, <#[R3 + 80]> */
		/* 822371C4h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000050) );
		/* 822371C4h case    4:*/		return 0x822371C8;
		  /* 822371C8h */ case    5:  		/* li R5, 2 */
		/* 822371C8h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 822371C8h case    5:*/		return 0x822371CC;
		  /* 822371CCh */ case    6:  		/* stw R26, <#[R3 + 60]> */
		/* 822371CCh case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x0000003C) );
		/* 822371CCh case    6:*/		return 0x822371D0;
		  /* 822371D0h */ case    7:  		/* mr R4, R31 */
		/* 822371D0h case    7:*/		regs.R4 = regs.R31;
		/* 822371D0h case    7:*/		return 0x822371D4;
		  /* 822371D4h */ case    8:  		/* stw R30, <#[R3 + 84]> */
		/* 822371D4h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000054) );
		/* 822371D4h case    8:*/		return 0x822371D8;
		  /* 822371D8h */ case    9:  		/* lfs FR4, <#[R1 + 84]> */
		/* 822371D8h case    9:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000054) );
		/* 822371D8h case    9:*/		return 0x822371DC;
		  /* 822371DCh */ case   10:  		/* mr R24, R3 */
		/* 822371DCh case   10:*/		regs.R24 = regs.R3;
		/* 822371DCh case   10:*/		return 0x822371E0;
		  /* 822371E0h */ case   11:  		/* fmr FR3, FR4 */
		/* 822371E0h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 822371E0h case   11:*/		return 0x822371E4;
		  /* 822371E4h */ case   12:  		/* fmr FR2, FR4 */
		/* 822371E4h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 822371E4h case   12:*/		return 0x822371E8;
		  /* 822371E8h */ case   13:  		/* fmr FR1, FR4 */
		/* 822371E8h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 822371E8h case   13:*/		return 0x822371EC;
		  /* 822371ECh */ case   14:  		/* bl 130348 */
		/* 822371ECh case   14:*/		regs.LR = 0x822371F0; return 0x82256F18;
		/* 822371ECh case   14:*/		return 0x822371F0;
		  /* 822371F0h */ case   15:  		/* mr R4, R24 */
		/* 822371F0h case   15:*/		regs.R4 = regs.R24;
		/* 822371F0h case   15:*/		return 0x822371F4;
		  /* 822371F4h */ case   16:  		/* mr R3, R31 */
		/* 822371F4h case   16:*/		regs.R3 = regs.R31;
		/* 822371F4h case   16:*/		return 0x822371F8;
		  /* 822371F8h */ case   17:  		/* bl -3152 */
		/* 822371F8h case   17:*/		regs.LR = 0x822371FC; return 0x822365A8;
		/* 822371F8h case   17:*/		return 0x822371FC;
		  /* 822371FCh */ case   18:  		/* mr R4, R24 */
		/* 822371FCh case   18:*/		regs.R4 = regs.R24;
		/* 822371FCh case   18:*/		return 0x82237200;
		  /* 82237200h */ case   19:  		/* mr R3, R29 */
		/* 82237200h case   19:*/		regs.R3 = regs.R29;
		/* 82237200h case   19:*/		return 0x82237204;
		  /* 82237204h */ case   20:  		/* bl 138540 */
		/* 82237204h case   20:*/		regs.LR = 0x82237208; return 0x82258F30;
		/* 82237204h case   20:*/		return 0x82237208;
		  /* 82237208h */ case   21:  		/* mr R3, R24 */
		/* 82237208h case   21:*/		regs.R3 = regs.R24;
		/* 82237208h case   21:*/		return 0x8223720C;
		  /* 8223720Ch */ case   22:  		/* bl 126388 */
		/* 8223720Ch case   22:*/		regs.LR = 0x82237210; return 0x82255FC0;
		/* 8223720Ch case   22:*/		return 0x82237210;
		  /* 82237210h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82237210h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82237210h case   23:*/		return 0x82237214;
		  /* 82237214h */ case   24:  		/* bc 4, CR0_EQ, 28 */
		/* 82237214h case   24:*/		if ( !regs.CR[0].eq ) { return 0x82237230;  }
		/* 82237214h case   24:*/		return 0x82237218;
		  /* 82237218h */ case   25:  		/* mr R6, R22 */
		/* 82237218h case   25:*/		regs.R6 = regs.R22;
		/* 82237218h case   25:*/		return 0x8223721C;
		  /* 8223721Ch */ case   26:  		/* mr R5, R25 */
		/* 8223721Ch case   26:*/		regs.R5 = regs.R25;
		/* 8223721Ch case   26:*/		return 0x82237220;
		  /* 82237220h */ case   27:  		/* mr R4, R23 */
		/* 82237220h case   27:*/		regs.R4 = regs.R23;
		/* 82237220h case   27:*/		return 0x82237224;
		  /* 82237224h */ case   28:  		/* li R7, 1420 */
		/* 82237224h case   28:*/		cpu::op::li<0>(regs,&regs.R7,0x58C);
		/* 82237224h case   28:*/		return 0x82237228;
		  /* 82237228h */ case   29:  		/* li R3, 0 */
		/* 82237228h case   29:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237228h case   29:*/		return 0x8223722C;
		  /* 8223722Ch */ case   30:  		/* bl -914980 */
		/* 8223722Ch case   30:*/		regs.LR = 0x82237230; return 0x82157C08;
		/* 8223722Ch case   30:*/		return 0x82237230;
	}
	return 0x82237230;
} // Block from 822371B4h-82237230h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82237230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237230);
		  /* 82237230h */ case    0:  		/* li R3, 20 */
		/* 82237230h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82237230h case    0:*/		return 0x82237234;
		  /* 82237234h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 82237234h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237234h case    1:*/		return 0x82237238;
		  /* 82237238h */ case    2:  		/* bl 135688 */
		/* 82237238h case    2:*/		regs.LR = 0x8223723C; return 0x82258440;
		/* 82237238h case    2:*/		return 0x8223723C;
		  /* 8223723Ch */ case    3:  		/* stw R26, <#[R3 + 56]> */
		/* 8223723Ch case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000038) );
		/* 8223723Ch case    3:*/		return 0x82237240;
		  /* 82237240h */ case    4:  		/* stw R30, <#[R3 + 80]> */
		/* 82237240h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000050) );
		/* 82237240h case    4:*/		return 0x82237244;
		  /* 82237244h */ case    5:  		/* mr R5, R28 */
		/* 82237244h case    5:*/		regs.R5 = regs.R28;
		/* 82237244h case    5:*/		return 0x82237248;
		  /* 82237248h */ case    6:  		/* stw R26, <#[R3 + 60]> */
		/* 82237248h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x0000003C) );
		/* 82237248h case    6:*/		return 0x8223724C;
		  /* 8223724Ch */ case    7:  		/* li R4, 2 */
		/* 8223724Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8223724Ch case    7:*/		return 0x82237250;
		  /* 82237250h */ case    8:  		/* stw R30, <#[R3 + 84]> */
		/* 82237250h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000054) );
		/* 82237250h case    8:*/		return 0x82237254;
		  /* 82237254h */ case    9:  		/* mr R24, R3 */
		/* 82237254h case    9:*/		regs.R24 = regs.R3;
		/* 82237254h case    9:*/		return 0x82237258;
		  /* 82237258h */ case   10:  		/* bl 127296 */
		/* 82237258h case   10:*/		regs.LR = 0x8223725C; return 0x82256398;
		/* 82237258h case   10:*/		return 0x8223725C;
		  /* 8223725Ch */ case   11:  		/* lwz R11, <#[R27]> */
		/* 8223725Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8223725Ch case   11:*/		return 0x82237260;
		  /* 82237260h */ case   12:  		/* mr R3, R24 */
		/* 82237260h case   12:*/		regs.R3 = regs.R24;
		/* 82237260h case   12:*/		return 0x82237264;
		  /* 82237264h */ case   13:  		/* li R5, 3 */
		/* 82237264h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82237264h case   13:*/		return 0x82237268;
		  /* 82237268h */ case   14:  		/* mr R4, R31 */
		/* 82237268h case   14:*/		regs.R4 = regs.R31;
		/* 82237268h case   14:*/		return 0x8223726C;
		  /* 8223726Ch */ case   15:  		/* stw R11, <#[R24 + 136]> */
		/* 8223726Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000088) );
		/* 8223726Ch case   15:*/		return 0x82237270;
		  /* 82237270h */ case   16:  		/* lfs FR4, <#[R1 + 80]> */
		/* 82237270h case   16:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000050) );
		/* 82237270h case   16:*/		return 0x82237274;
		  /* 82237274h */ case   17:  		/* fmr FR3, FR4 */
		/* 82237274h case   17:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 82237274h case   17:*/		return 0x82237278;
		  /* 82237278h */ case   18:  		/* fmr FR2, FR4 */
		/* 82237278h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 82237278h case   18:*/		return 0x8223727C;
		  /* 8223727Ch */ case   19:  		/* fmr FR1, FR4 */
		/* 8223727Ch case   19:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 8223727Ch case   19:*/		return 0x82237280;
		  /* 82237280h */ case   20:  		/* bl 130200 */
		/* 82237280h case   20:*/		regs.LR = 0x82237284; return 0x82256F18;
		/* 82237280h case   20:*/		return 0x82237284;
		  /* 82237284h */ case   21:  		/* mr R4, R24 */
		/* 82237284h case   21:*/		regs.R4 = regs.R24;
		/* 82237284h case   21:*/		return 0x82237288;
		  /* 82237288h */ case   22:  		/* mr R3, R31 */
		/* 82237288h case   22:*/		regs.R3 = regs.R31;
		/* 82237288h case   22:*/		return 0x8223728C;
		  /* 8223728Ch */ case   23:  		/* bl -3300 */
		/* 8223728Ch case   23:*/		regs.LR = 0x82237290; return 0x822365A8;
		/* 8223728Ch case   23:*/		return 0x82237290;
		  /* 82237290h */ case   24:  		/* mr R4, R24 */
		/* 82237290h case   24:*/		regs.R4 = regs.R24;
		/* 82237290h case   24:*/		return 0x82237294;
		  /* 82237294h */ case   25:  		/* mr R3, R29 */
		/* 82237294h case   25:*/		regs.R3 = regs.R29;
		/* 82237294h case   25:*/		return 0x82237298;
		  /* 82237298h */ case   26:  		/* bl 138392 */
		/* 82237298h case   26:*/		regs.LR = 0x8223729C; return 0x82258F30;
		/* 82237298h case   26:*/		return 0x8223729C;
		  /* 8223729Ch */ case   27:  		/* mr R3, R24 */
		/* 8223729Ch case   27:*/		regs.R3 = regs.R24;
		/* 8223729Ch case   27:*/		return 0x822372A0;
		  /* 822372A0h */ case   28:  		/* bl 126240 */
		/* 822372A0h case   28:*/		regs.LR = 0x822372A4; return 0x82255FC0;
		/* 822372A0h case   28:*/		return 0x822372A4;
		  /* 822372A4h */ case   29:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822372A4h case   29:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822372A4h case   29:*/		return 0x822372A8;
		  /* 822372A8h */ case   30:  		/* bc 4, CR0_EQ, 52 */
		/* 822372A8h case   30:*/		if ( !regs.CR[0].eq ) { return 0x822372DC;  }
		/* 822372A8h case   30:*/		return 0x822372AC;
		  /* 822372ACh */ case   31:  		/* mr R5, R25 */
		/* 822372ACh case   31:*/		regs.R5 = regs.R25;
		/* 822372ACh case   31:*/		return 0x822372B0;
		  /* 822372B0h */ case   32:  		/* li R7, 1430 */
		/* 822372B0h case   32:*/		cpu::op::li<0>(regs,&regs.R7,0x596);
		/* 822372B0h case   32:*/		return 0x822372B4;
		  /* 822372B4h */ case   33:  		/* b 24 */
		/* 822372B4h case   33:*/		return 0x822372CC;
		/* 822372B4h case   33:*/		return 0x822372B8;
	}
	return 0x822372B8;
} // Block from 82237230h-822372B8h (34 instructions)

//////////////////////////////////////////////////////
// Block at 822372B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822372B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822372B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822372B8);
		  /* 822372B8h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 822372B8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 822372B8h case    0:*/		return 0x822372BC;
		  /* 822372BCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 822372BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x822372DC;  }
		/* 822372BCh case    1:*/		return 0x822372C0;
		  /* 822372C0h */ case    2:  		/* lis R11, -32252 */
		/* 822372C0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822372C0h case    2:*/		return 0x822372C4;
		  /* 822372C4h */ case    3:  		/* li R7, 1432 */
		/* 822372C4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x598);
		/* 822372C4h case    3:*/		return 0x822372C8;
		  /* 822372C8h */ case    4:  		/* addi R5, R11, 8956 */
		/* 822372C8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x22FC);
		/* 822372C8h case    4:*/		return 0x822372CC;
	}
	return 0x822372CC;
} // Block from 822372B8h-822372CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 822372CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822372CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822372CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822372CC);
		  /* 822372CCh */ case    0:  		/* mr R6, R22 */
		/* 822372CCh case    0:*/		regs.R6 = regs.R22;
		/* 822372CCh case    0:*/		return 0x822372D0;
		  /* 822372D0h */ case    1:  		/* mr R4, R23 */
		/* 822372D0h case    1:*/		regs.R4 = regs.R23;
		/* 822372D0h case    1:*/		return 0x822372D4;
		  /* 822372D4h */ case    2:  		/* li R3, 0 */
		/* 822372D4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822372D4h case    2:*/		return 0x822372D8;
		  /* 822372D8h */ case    3:  		/* bl -915152 */
		/* 822372D8h case    3:*/		regs.LR = 0x822372DC; return 0x82157C08;
		/* 822372D8h case    3:*/		return 0x822372DC;
	}
	return 0x822372DC;
} // Block from 822372CCh-822372DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 822372DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822372DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822372DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822372DC);
		  /* 822372DCh */ case    0:  		/* addi R1, R1, 176 */
		/* 822372DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 822372DCh case    0:*/		return 0x822372E0;
		  /* 822372E0h */ case    1:  		/* b -1728592 */
		/* 822372E0h case    1:*/		return 0x82091290;
		/* 822372E0h case    1:*/		return 0x822372E4;
		  /* 822372E4h */ case    2:  		/* nop */
		/* 822372E4h case    2:*/		cpu::op::nop();
		/* 822372E4h case    2:*/		return 0x822372E8;
	}
	return 0x822372E8;
} // Block from 822372DCh-822372E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822372E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822372E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822372E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822372E8);
		  /* 822372E8h */ case    0:  		/* mfspr R12, LR */
		/* 822372E8h case    0:*/		regs.R12 = regs.LR;
		/* 822372E8h case    0:*/		return 0x822372EC;
		  /* 822372ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 822372ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 822372ECh case    1:*/		return 0x822372F0;
		  /* 822372F0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 822372F0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 822372F0h case    2:*/		return 0x822372F4;
		  /* 822372F4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 822372F4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822372F4h case    3:*/		return 0x822372F8;
		  /* 822372F8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 822372F8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 822372F8h case    4:*/		return 0x822372FC;
		  /* 822372FCh */ case    5:  		/* mr R31, R3 */
		/* 822372FCh case    5:*/		regs.R31 = regs.R3;
		/* 822372FCh case    5:*/		return 0x82237300;
		  /* 82237300h */ case    6:  		/* li R3, 49 */
		/* 82237300h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 82237300h case    6:*/		return 0x82237304;
		  /* 82237304h */ case    7:  		/* lwz R4, <#[R31 + 12]> */
		/* 82237304h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237304h case    7:*/		return 0x82237308;
		  /* 82237308h */ case    8:  		/* bl 125992 */
		/* 82237308h case    8:*/		regs.LR = 0x8223730C; return 0x82255F30;
		/* 82237308h case    8:*/		return 0x8223730C;
		  /* 8223730Ch */ case    9:  		/* li R11, 0 */
		/* 8223730Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223730Ch case    9:*/		return 0x82237310;
		  /* 82237310h */ case   10:  		/* li R10, 23 */
		/* 82237310h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x17);
		/* 82237310h case   10:*/		return 0x82237314;
		  /* 82237314h */ case   11:  		/* stw R11, <#[R3 + 56]> */
		/* 82237314h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 82237314h case   11:*/		return 0x82237318;
		  /* 82237318h */ case   12:  		/* lis R9, -32256 */
		/* 82237318h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 82237318h case   12:*/		return 0x8223731C;
		  /* 8223731Ch */ case   13:  		/* stw R10, <#[R3 + 80]> */
		/* 8223731Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000050) );
		/* 8223731Ch case   13:*/		return 0x82237320;
		  /* 82237320h */ case   14:  		/* lis R8, -32256 */
		/* 82237320h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 82237320h case   14:*/		return 0x82237324;
		  /* 82237324h */ case   15:  		/* li R5, 1 */
		/* 82237324h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82237324h case   15:*/		return 0x82237328;
		  /* 82237328h */ case   16:  		/* mr R4, R31 */
		/* 82237328h case   16:*/		regs.R4 = regs.R31;
		/* 82237328h case   16:*/		return 0x8223732C;
		  /* 8223732Ch */ case   17:  		/* mr R30, R3 */
		/* 8223732Ch case   17:*/		regs.R30 = regs.R3;
		/* 8223732Ch case   17:*/		return 0x82237330;
		  /* 82237330h */ case   18:  		/* lfs FR3, <#[R9 + 1816]> */
		/* 82237330h case   18:*/		cpu::mem::load32f( regs, &regs.FR3, (uint32)(regs.R9 + 0x00000718) );
		/* 82237330h case   18:*/		return 0x82237334;
		  /* 82237334h */ case   19:  		/* lfs FR4, <#[R8 + 1792]> */
		/* 82237334h case   19:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R8 + 0x00000700) );
		/* 82237334h case   19:*/		return 0x82237338;
		  /* 82237338h */ case   20:  		/* fmr FR2, FR3 */
		/* 82237338h case   20:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR3);
		/* 82237338h case   20:*/		return 0x8223733C;
		  /* 8223733Ch */ case   21:  		/* fmr FR1, FR3 */
		/* 8223733Ch case   21:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR3);
		/* 8223733Ch case   21:*/		return 0x82237340;
		  /* 82237340h */ case   22:  		/* bl 130008 */
		/* 82237340h case   22:*/		regs.LR = 0x82237344; return 0x82256F18;
		/* 82237340h case   22:*/		return 0x82237344;
		  /* 82237344h */ case   23:  		/* mr R4, R30 */
		/* 82237344h case   23:*/		regs.R4 = regs.R30;
		/* 82237344h case   23:*/		return 0x82237348;
		  /* 82237348h */ case   24:  		/* mr R3, R31 */
		/* 82237348h case   24:*/		regs.R3 = regs.R31;
		/* 82237348h case   24:*/		return 0x8223734C;
		  /* 8223734Ch */ case   25:  		/* bl -3492 */
		/* 8223734Ch case   25:*/		regs.LR = 0x82237350; return 0x822365A8;
		/* 8223734Ch case   25:*/		return 0x82237350;
		  /* 82237350h */ case   26:  		/* mr R4, R30 */
		/* 82237350h case   26:*/		regs.R4 = regs.R30;
		/* 82237350h case   26:*/		return 0x82237354;
		  /* 82237354h */ case   27:  		/* lwz R3, <#[R31 + 168]> */
		/* 82237354h case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A8) );
		/* 82237354h case   27:*/		return 0x82237358;
		  /* 82237358h */ case   28:  		/* bl 138200 */
		/* 82237358h case   28:*/		regs.LR = 0x8223735C; return 0x82258F30;
		/* 82237358h case   28:*/		return 0x8223735C;
		  /* 8223735Ch */ case   29:  		/* mr R3, R30 */
		/* 8223735Ch case   29:*/		regs.R3 = regs.R30;
		/* 8223735Ch case   29:*/		return 0x82237360;
		  /* 82237360h */ case   30:  		/* bl 126048 */
		/* 82237360h case   30:*/		regs.LR = 0x82237364; return 0x82255FC0;
		/* 82237360h case   30:*/		return 0x82237364;
		  /* 82237364h */ case   31:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82237364h case   31:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82237364h case   31:*/		return 0x82237368;
		  /* 82237368h */ case   32:  		/* bc 4, CR0_EQ, 40 */
		/* 82237368h case   32:*/		if ( !regs.CR[0].eq ) { return 0x82237390;  }
		/* 82237368h case   32:*/		return 0x8223736C;
		  /* 8223736Ch */ case   33:  		/* lis R11, -32252 */
		/* 8223736Ch case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223736Ch case   33:*/		return 0x82237370;
		  /* 82237370h */ case   34:  		/* lis R10, -32252 */
		/* 82237370h case   34:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82237370h case   34:*/		return 0x82237374;
		  /* 82237374h */ case   35:  		/* lis R9, -32253 */
		/* 82237374h case   35:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82237374h case   35:*/		return 0x82237378;
		  /* 82237378h */ case   36:  		/* addi R6, R11, 8520 */
		/* 82237378h case   36:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 82237378h case   36:*/		return 0x8223737C;
		  /* 8223737Ch */ case   37:  		/* addi R5, R10, 8912 */
		/* 8223737Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x22D0);
		/* 8223737Ch case   37:*/		return 0x82237380;
		  /* 82237380h */ case   38:  		/* addi R4, R9, 27460 */
		/* 82237380h case   38:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82237380h case   38:*/		return 0x82237384;
		  /* 82237384h */ case   39:  		/* li R7, 1445 */
		/* 82237384h case   39:*/		cpu::op::li<0>(regs,&regs.R7,0x5A5);
		/* 82237384h case   39:*/		return 0x82237388;
		  /* 82237388h */ case   40:  		/* li R3, 0 */
		/* 82237388h case   40:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237388h case   40:*/		return 0x8223738C;
		  /* 8223738Ch */ case   41:  		/* bl -915332 */
		/* 8223738Ch case   41:*/		regs.LR = 0x82237390; return 0x82157C08;
		/* 8223738Ch case   41:*/		return 0x82237390;
	}
	return 0x82237390;
} // Block from 822372E8h-82237390h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82237390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237390);
		  /* 82237390h */ case    0:  		/* addi R1, R1, 112 */
		/* 82237390h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82237390h case    0:*/		return 0x82237394;
		  /* 82237394h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82237394h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82237394h case    1:*/		return 0x82237398;
		  /* 82237398h */ case    2:  		/* mtspr LR, R12 */
		/* 82237398h case    2:*/		regs.LR = regs.R12;
		/* 82237398h case    2:*/		return 0x8223739C;
		  /* 8223739Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8223739Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223739Ch case    3:*/		return 0x822373A0;
		  /* 822373A0h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 822373A0h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822373A0h case    4:*/		return 0x822373A4;
		  /* 822373A4h */ case    5:  		/* bclr 20, CR0_LT */
		/* 822373A4h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822373A4h case    5:*/		return 0x822373A8;
	}
	return 0x822373A8;
} // Block from 82237390h-822373A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822373A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822373A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822373A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822373A8);
		  /* 822373A8h */ case    0:  		/* mfspr R12, LR */
		/* 822373A8h case    0:*/		regs.R12 = regs.LR;
		/* 822373A8h case    0:*/		return 0x822373AC;
		  /* 822373ACh */ case    1:  		/* bl -1728888 */
		/* 822373ACh case    1:*/		regs.LR = 0x822373B0; return 0x82091234;
		/* 822373ACh case    1:*/		return 0x822373B0;
		  /* 822373B0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 822373B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 822373B0h case    2:*/		return 0x822373B4;
		  /* 822373B4h */ case    3:  		/* lwz R22, <#[R3 + 136]> */
		/* 822373B4h case    3:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R3 + 0x00000088) );
		/* 822373B4h case    3:*/		return 0x822373B8;
		  /* 822373B8h */ case    4:  		/* mr R26, R3 */
		/* 822373B8h case    4:*/		regs.R26 = regs.R3;
		/* 822373B8h case    4:*/		return 0x822373BC;
		  /* 822373BCh */ case    5:  		/* lwz R11, <#[R22 + 8]> */
		/* 822373BCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 822373BCh case    5:*/		return 0x822373C0;
		  /* 822373C0h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 822373C0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 822373C0h case    6:*/		return 0x822373C4;
		  /* 822373C4h */ case    7:  		/* bc 12, CR6_EQ, 444 */
		/* 822373C4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82237580;  }
		/* 822373C4h case    7:*/		return 0x822373C8;
		  /* 822373C8h */ case    8:  		/* lis R11, -32253 */
		/* 822373C8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822373C8h case    8:*/		return 0x822373CC;
		  /* 822373CCh */ case    9:  		/* lis R10, -32252 */
		/* 822373CCh case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822373CCh case    9:*/		return 0x822373D0;
		  /* 822373D0h */ case   10:  		/* lis R9, -32252 */
		/* 822373D0h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 822373D0h case   10:*/		return 0x822373D4;
		  /* 822373D4h */ case   11:  		/* addi R25, R11, 27460 */
		/* 822373D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6B44);
		/* 822373D4h case   11:*/		return 0x822373D8;
		  /* 822373D8h */ case   12:  		/* addi R24, R10, 9040 */
		/* 822373D8h case   12:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0x2350);
		/* 822373D8h case   12:*/		return 0x822373DC;
		  /* 822373DCh */ case   13:  		/* addi R23, R9, 8520 */
		/* 822373DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R9,0x2148);
		/* 822373DCh case   13:*/		return 0x822373E0;
		  /* 822373E0h */ case   14:  		/* lwz R31, <#[R22 + 28]> */
		/* 822373E0h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R22 + 0x0000001C) );
		/* 822373E0h case   14:*/		return 0x822373E4;
		  /* 822373E4h */ case   15:  		/* b 384 */
		/* 822373E4h case   15:*/		return 0x82237564;
		/* 822373E4h case   15:*/		return 0x822373E8;
		  /* 822373E8h */ case   16:  		/* lwz R11, <#[R31 + 228]> */
		/* 822373E8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 822373E8h case   16:*/		return 0x822373EC;
		  /* 822373ECh */ case   17:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822373ECh case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822373ECh case   17:*/		return 0x822373F0;
		  /* 822373F0h */ case   18:  		/* bc 12, CR0_EQ, 368 */
		/* 822373F0h case   18:*/		if ( regs.CR[0].eq ) { return 0x82237560;  }
		/* 822373F0h case   18:*/		return 0x822373F4;
		  /* 822373F4h */ case   19:  		/* lwz R28, <#[R31 + 20]> */
		/* 822373F4h case   19:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000014) );
		/* 822373F4h case   19:*/		return 0x822373F8;
		  /* 822373F8h */ case   20:  		/* li R10, 0 */
		/* 822373F8h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 822373F8h case   20:*/		return 0x822373FC;
		  /* 822373FCh */ case   21:  		/* li R9, 0 */
		/* 822373FCh case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 822373FCh case   21:*/		return 0x82237400;
		  /* 82237400h */ case   22:  		/* cmpwi CR6, R28, 0 */
		/* 82237400h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82237400h case   22:*/		return 0x82237404;
		  /* 82237404h */ case   23:  		/* bc 4, CR6_GT, 348 */
		/* 82237404h case   23:*/		if ( !regs.CR[6].gt ) { return 0x82237560;  }
		/* 82237404h case   23:*/		return 0x82237408;
		  /* 82237408h */ case   24:  		/* addi R8, R31, 84 */
		/* 82237408h case   24:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x54);
		/* 82237408h case   24:*/		return 0x8223740C;
		  /* 8223740Ch */ case   25:  		/* mtspr CTR, R28 */
		/* 8223740Ch case   25:*/		regs.CTR = regs.R28;
		/* 8223740Ch case   25:*/		return 0x82237410;
		  /* 82237410h */ case   26:  		/* lwz R11, <#[R8]> */
		/* 82237410h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 82237410h case   26:*/		return 0x82237414;
		  /* 82237414h */ case   27:  		/* cmpwi CR6, R11, 1 */
		/* 82237414h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82237414h case   27:*/		return 0x82237418;
		  /* 82237418h */ case   28:  		/* bc 12, CR6_EQ, 36 */
		/* 82237418h case   28:*/		if ( regs.CR[6].eq ) { return 0x8223743C;  }
		/* 82237418h case   28:*/		return 0x8223741C;
		  /* 8223741Ch */ case   29:  		/* cmpwi CR6, R11, 2 */
		/* 8223741Ch case   29:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8223741Ch case   29:*/		return 0x82237420;
		  /* 82237420h */ case   30:  		/* bc 12, CR6_EQ, 28 */
		/* 82237420h case   30:*/		if ( regs.CR[6].eq ) { return 0x8223743C;  }
		/* 82237420h case   30:*/		return 0x82237424;
		  /* 82237424h */ case   31:  		/* cmpwi CR6, R11, 3 */
		/* 82237424h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82237424h case   31:*/		return 0x82237428;
		  /* 82237428h */ case   32:  		/* bc 12, CR6_EQ, 20 */
		/* 82237428h case   32:*/		if ( regs.CR[6].eq ) { return 0x8223743C;  }
		/* 82237428h case   32:*/		return 0x8223742C;
		  /* 8223742Ch */ case   33:  		/* cmpwi CR6, R11, 11 */
		/* 8223742Ch case   33:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 8223742Ch case   33:*/		return 0x82237430;
		  /* 82237430h */ case   34:  		/* bc 4, CR6_EQ, 16 */
		/* 82237430h case   34:*/		if ( !regs.CR[6].eq ) { return 0x82237440;  }
		/* 82237430h case   34:*/		return 0x82237434;
		  /* 82237434h */ case   35:  		/* addi R10, R10, 1 */
		/* 82237434h case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82237434h case   35:*/		return 0x82237438;
		  /* 82237438h */ case   36:  		/* b 8 */
		/* 82237438h case   36:*/		return 0x82237440;
		/* 82237438h case   36:*/		return 0x8223743C;
	}
	return 0x8223743C;
} // Block from 822373A8h-8223743Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 8223743Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223743C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223743C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223743C);
		  /* 8223743Ch */ case    0:  		/* addi R9, R9, 1 */
		/* 8223743Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8223743Ch case    0:*/		return 0x82237440;
	}
	return 0x82237440;
} // Block from 8223743Ch-82237440h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82237440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237440);
		  /* 82237440h */ case    0:  		/* addi R8, R8, 4 */
		/* 82237440h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82237440h case    0:*/		return 0x82237444;
		  /* 82237444h */ case    1:  		/* bc 16, CR0_LT, -52 */
		/* 82237444h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82237410;  }
		/* 82237444h case    1:*/		return 0x82237448;
		  /* 82237448h */ case    2:  		/* cmpwi CR6, R9, 0 */
		/* 82237448h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82237448h case    2:*/		return 0x8223744C;
		  /* 8223744Ch */ case    3:  		/* bc 12, CR6_EQ, 276 */
		/* 8223744Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82237560;  }
		/* 8223744Ch case    3:*/		return 0x82237450;
		  /* 82237450h */ case    4:  		/* cmpwi CR6, R10, 0 */
		/* 82237450h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 82237450h case    4:*/		return 0x82237454;
		  /* 82237454h */ case    5:  		/* bc 12, CR6_EQ, 268 */
		/* 82237454h case    5:*/		if ( regs.CR[6].eq ) { return 0x82237560;  }
		/* 82237454h case    5:*/		return 0x82237458;
		  /* 82237458h */ case    6:  		/* srawi R11, R10, 31 */
		/* 82237458h case    6:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R10);
		/* 82237458h case    6:*/		return 0x8223745C;
		  /* 8223745Ch */ case    7:  		/* rlwinm R8, R9, 1, 31, 31 */
		/* 8223745Ch case    7:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R8,regs.R9);
		/* 8223745Ch case    7:*/		return 0x82237460;
		  /* 82237460h */ case    8:  		/* subfc R7, R9, R10 */
		/* 82237460h case    8:*/		cpu::op::subfc<0>(regs,&regs.R7,regs.R9,regs.R10);
		/* 82237460h case    8:*/		return 0x82237464;
		  /* 82237464h */ case    9:  		/* cmpwi CR6, R10, 1 */
		/* 82237464h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82237464h case    9:*/		return 0x82237468;
		  /* 82237468h */ case   10:  		/* adde R27, R8, R11 */
		/* 82237468h case   10:*/		cpu::op::adde<0>(regs,&regs.R27,regs.R8,regs.R11);
		/* 82237468h case   10:*/		return 0x8223746C;
		  /* 8223746Ch */ case   11:  		/* bc 12, CR6_EQ, 36 */
		/* 8223746Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82237490;  }
		/* 8223746Ch case   11:*/		return 0x82237470;
		  /* 82237470h */ case   12:  		/* cmpwi CR6, R9, 1 */
		/* 82237470h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000001);
		/* 82237470h case   12:*/		return 0x82237474;
		  /* 82237474h */ case   13:  		/* bc 12, CR6_EQ, 28 */
		/* 82237474h case   13:*/		if ( regs.CR[6].eq ) { return 0x82237490;  }
		/* 82237474h case   13:*/		return 0x82237478;
		  /* 82237478h */ case   14:  		/* mr R6, R23 */
		/* 82237478h case   14:*/		regs.R6 = regs.R23;
		/* 82237478h case   14:*/		return 0x8223747C;
		  /* 8223747Ch */ case   15:  		/* mr R5, R24 */
		/* 8223747Ch case   15:*/		regs.R5 = regs.R24;
		/* 8223747Ch case   15:*/		return 0x82237480;
		  /* 82237480h */ case   16:  		/* mr R4, R25 */
		/* 82237480h case   16:*/		regs.R4 = regs.R25;
		/* 82237480h case   16:*/		return 0x82237484;
		  /* 82237484h */ case   17:  		/* li R7, 1915 */
		/* 82237484h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x77B);
		/* 82237484h case   17:*/		return 0x82237488;
		  /* 82237488h */ case   18:  		/* li R3, 0 */
		/* 82237488h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237488h case   18:*/		return 0x8223748C;
		  /* 8223748Ch */ case   19:  		/* bl -915588 */
		/* 8223748Ch case   19:*/		regs.LR = 0x82237490; return 0x82157C08;
		/* 8223748Ch case   19:*/		return 0x82237490;
	}
	return 0x82237490;
} // Block from 82237440h-82237490h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82237490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237490);
		  /* 82237490h */ case    0:  		/* li R29, 0 */
		/* 82237490h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82237490h case    0:*/		return 0x82237494;
		  /* 82237494h */ case    1:  		/* addi R30, R31, 32 */
		/* 82237494h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x20);
		/* 82237494h case    1:*/		return 0x82237498;
		  /* 82237498h */ case    2:  		/* lwz R11, <#[R30 + 52]> */
		/* 82237498h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 82237498h case    2:*/		return 0x8223749C;
		  /* 8223749Ch */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 8223749Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8223749Ch case    3:*/		return 0x822374A0;
	}
	return 0x822374A0;
} // Block from 82237490h-822374A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822374A0h
// Function '?MakeBitSet@bitset@XGRAPHICS@@SAPAV12@IPBVArena@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822374A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822374A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822374A0);
		  /* 822374A0h */ case    0:  		/* bc 12, CR6_EQ, 20 */
		/* 822374A0h case    0:*/		if ( regs.CR[6].eq ) { return 0x822374B4;  }
		/* 822374A0h case    0:*/		return 0x822374A4;
		  /* 822374A4h */ case    1:  		/* cmpwi CR6, R11, 2 */
		/* 822374A4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 822374A4h case    1:*/		return 0x822374A8;
		  /* 822374A8h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 822374A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x822374B4;  }
		/* 822374A8h case    2:*/		return 0x822374AC;
		  /* 822374ACh */ case    3:  		/* cmpwi CR6, R11, 3 */
		/* 822374ACh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 822374ACh case    3:*/		return 0x822374B0;
		  /* 822374B0h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 822374B0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x822374BC;  }
		/* 822374B0h case    4:*/		return 0x822374B4;
	}
	return 0x822374B4;
} // Block from 822374A0h-822374B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822374B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822374B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822374B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822374B4);
		  /* 822374B4h */ case    0:  		/* rlwinm. R10, R27, 0, 24, 31 */
		/* 822374B4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R27);
		/* 822374B4h case    0:*/		return 0x822374B8;
		  /* 822374B8h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 822374B8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x822374CC;  }
		/* 822374B8h case    1:*/		return 0x822374BC;
	}
	return 0x822374BC;
} // Block from 822374B4h-822374BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 822374BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822374BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822374BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822374BC);
		  /* 822374BCh */ case    0:  		/* cmpwi CR6, R11, 11 */
		/* 822374BCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 822374BCh case    0:*/		return 0x822374C0;
		  /* 822374C0h */ case    1:  		/* bc 4, CR6_EQ, 144 */
		/* 822374C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82237550;  }
		/* 822374C0h case    1:*/		return 0x822374C4;
		  /* 822374C4h */ case    2:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 822374C4h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 822374C4h case    2:*/		return 0x822374C8;
		  /* 822374C8h */ case    3:  		/* bc 4, CR0_EQ, 136 */
		/* 822374C8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82237550;  }
		/* 822374C8h case    3:*/		return 0x822374CC;
	}
	return 0x822374CC;
} // Block from 822374BCh-822374CCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 822374CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822374CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822374CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822374CC);
		  /* 822374CCh */ case    0:  		/* li R3, 49 */
		/* 822374CCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 822374CCh case    0:*/		return 0x822374D0;
		  /* 822374D0h */ case    1:  		/* lwz R4, <#[R26 + 12]> */
		/* 822374D0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x0000000C) );
		/* 822374D0h case    1:*/		return 0x822374D4;
		  /* 822374D4h */ case    2:  		/* bl 125532 */
		/* 822374D4h case    2:*/		regs.LR = 0x822374D8; return 0x82255F30;
		/* 822374D4h case    2:*/		return 0x822374D8;
		  /* 822374D8h */ case    3:  		/* lwz R10, <#[R26 + 12]> */
		/* 822374D8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x0000000C) );
		/* 822374D8h case    3:*/		return 0x822374DC;
		  /* 822374DCh */ case    4:  		/* lwz R21, <#[R30]> */
		/* 822374DCh case    4:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R30 + 0x00000000) );
		/* 822374DCh case    4:*/		return 0x822374E0;
		  /* 822374E0h */ case    5:  		/* li R4, 0 */
		/* 822374E0h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822374E0h case    5:*/		return 0x822374E4;
		  /* 822374E4h */ case    6:  		/* mr R20, R3 */
		/* 822374E4h case    6:*/		regs.R20 = regs.R3;
		/* 822374E4h case    6:*/		return 0x822374E8;
		  /* 822374E8h */ case    7:  		/* lwz R11, <#[R10 + 1508]> */
		/* 822374E8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 822374E8h case    7:*/		return 0x822374EC;
		  /* 822374ECh */ case    8:  		/* addi R5, R11, -1 */
		/* 822374ECh case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 822374ECh case    8:*/		return 0x822374F0;
		  /* 822374F0h */ case    9:  		/* stw R5, <#[R10 + 1508]> */
		/* 822374F0h case    9:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 822374F0h case    9:*/		return 0x822374F4;
		  /* 822374F4h */ case   10:  		/* lwz R3, <#[R26 + 172]> */
		/* 822374F4h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x000000AC) );
		/* 822374F4h case   10:*/		return 0x822374F8;
		  /* 822374F8h */ case   11:  		/* bl 58136 */
		/* 822374F8h case   11:*/		regs.LR = 0x822374FC; return 0x82245810;
		/* 822374F8h case   11:*/		return 0x822374FC;
		  /* 822374FCh */ case   12:  		/* mr R19, R3 */
		/* 822374FCh case   12:*/		regs.R19 = regs.R3;
		/* 822374FCh case   12:*/		return 0x82237500;
		  /* 82237500h */ case   13:  		/* mr R5, R3 */
		/* 82237500h case   13:*/		regs.R5 = regs.R3;
		/* 82237500h case   13:*/		return 0x82237504;
		  /* 82237504h */ case   14:  		/* mr R3, R20 */
		/* 82237504h case   14:*/		regs.R3 = regs.R20;
		/* 82237504h case   14:*/		return 0x82237508;
		  /* 82237508h */ case   15:  		/* li R4, 0 */
		/* 82237508h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237508h case   15:*/		return 0x8223750C;
		  /* 8223750Ch */ case   16:  		/* bl 126604 */
		/* 8223750Ch case   16:*/		regs.LR = 0x82237510; return 0x82256398;
		/* 8223750Ch case   16:*/		return 0x82237510;
	}
	return 0x82237510;
} // Block from 822374CCh-82237510h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82237510h
// Function '?Validate@CFG@XGRAPHICS@@QBA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237510);
		  /* 82237510h */ case    0:  		/* mr R5, R21 */
		/* 82237510h case    0:*/		regs.R5 = regs.R21;
		/* 82237510h case    0:*/		return 0x82237514;
		  /* 82237514h */ case    1:  		/* mr R3, R20 */
		/* 82237514h case    1:*/		regs.R3 = regs.R20;
		/* 82237514h case    1:*/		return 0x82237518;
		  /* 82237518h */ case    2:  		/* li R4, 1 */
		/* 82237518h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82237518h case    2:*/		return 0x8223751C;
		  /* 8223751Ch */ case    3:  		/* bl 126588 */
		/* 8223751Ch case    3:*/		regs.LR = 0x82237520; return 0x82256398;
		/* 8223751Ch case    3:*/		return 0x82237520;
		  /* 82237520h */ case    4:  		/* mr R5, R20 */
		/* 82237520h case    4:*/		regs.R5 = regs.R20;
		/* 82237520h case    4:*/		return 0x82237524;
		  /* 82237524h */ case    5:  		/* mr R4, R31 */
		/* 82237524h case    5:*/		regs.R4 = regs.R31;
		/* 82237524h case    5:*/		return 0x82237528;
		  /* 82237528h */ case    6:  		/* mr R3, R21 */
		/* 82237528h case    6:*/		regs.R3 = regs.R21;
		/* 82237528h case    6:*/		return 0x8223752C;
		  /* 8223752Ch */ case    7:  		/* bl 119524 */
		/* 8223752Ch case    7:*/		regs.LR = 0x82237530; return 0x82254810;
		/* 8223752Ch case    7:*/		return 0x82237530;
		  /* 82237530h */ case    8:  		/* mr R5, R19 */
		/* 82237530h case    8:*/		regs.R5 = regs.R19;
		/* 82237530h case    8:*/		return 0x82237534;
		  /* 82237534h */ case    9:  		/* addi R4, R29, 1 */
		/* 82237534h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x1);
		/* 82237534h case    9:*/		return 0x82237538;
		  /* 82237538h */ case   10:  		/* mr R3, R31 */
		/* 82237538h case   10:*/		regs.R3 = regs.R31;
		/* 82237538h case   10:*/		return 0x8223753C;
		  /* 8223753Ch */ case   11:  		/* bl 126556 */
		/* 8223753Ch case   11:*/		regs.LR = 0x82237540; return 0x82256398;
		/* 8223753Ch case   11:*/		return 0x82237540;
		  /* 82237540h */ case   12:  		/* mr R5, R20 */
		/* 82237540h case   12:*/		regs.R5 = regs.R20;
		/* 82237540h case   12:*/		return 0x82237544;
		  /* 82237544h */ case   13:  		/* mr R4, R31 */
		/* 82237544h case   13:*/		regs.R4 = regs.R31;
		/* 82237544h case   13:*/		return 0x82237548;
		  /* 82237548h */ case   14:  		/* lwz R3, <#[R31 + 948]> */
		/* 82237548h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000003B4) );
		/* 82237548h case   14:*/		return 0x8223754C;
		  /* 8223754Ch */ case   15:  		/* bl 137940 */
		/* 8223754Ch case   15:*/		regs.LR = 0x82237550; return 0x82259020;
		/* 8223754Ch case   15:*/		return 0x82237550;
	}
	return 0x82237550;
} // Block from 82237510h-82237550h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82237550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237550);
		  /* 82237550h */ case    0:  		/* addi R29, R29, 1 */
		/* 82237550h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82237550h case    0:*/		return 0x82237554;
		  /* 82237554h */ case    1:  		/* addi R30, R30, 4 */
		/* 82237554h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82237554h case    1:*/		return 0x82237558;
		  /* 82237558h */ case    2:  		/* cmpw CR6, R29, R28 */
		/* 82237558h case    2:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R28);
		/* 82237558h case    2:*/		return 0x8223755C;
		  /* 8223755Ch */ case    3:  		/* bc 12, CR6_LT, -196 */
		/* 8223755Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82237498;  }
		/* 8223755Ch case    3:*/		return 0x82237560;
	}
	return 0x82237560;
} // Block from 82237550h-82237560h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82237560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237560);
		  /* 82237560h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 82237560h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 82237560h case    0:*/		return 0x82237564;
	}
	return 0x82237564;
} // Block from 82237560h-82237564h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82237564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237564);
		  /* 82237564h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82237564h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82237564h case    0:*/		return 0x82237568;
	}
	return 0x82237568;
} // Block from 82237564h-82237568h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82237568h
// Function '?InsertInstructionsForVertexFog@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237568);
		  /* 82237568h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 82237568h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82237568h case    0:*/		return 0x8223756C;
		  /* 8223756Ch */ case    1:  		/* bc 4, CR6_EQ, -388 */
		/* 8223756Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x822373E8;  }
		/* 8223756Ch case    1:*/		return 0x82237570;
		  /* 82237570h */ case    2:  		/* lwz R22, <#[R22 + 8]> */
		/* 82237570h case    2:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R22 + 0x00000008) );
		/* 82237570h case    2:*/		return 0x82237574;
		  /* 82237574h */ case    3:  		/* lwz R11, <#[R22 + 8]> */
		/* 82237574h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 82237574h case    3:*/		return 0x82237578;
		  /* 82237578h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 82237578h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82237578h case    4:*/		return 0x8223757C;
		  /* 8223757Ch */ case    5:  		/* bc 4, CR6_EQ, -412 */
		/* 8223757Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x822373E0;  }
		/* 8223757Ch case    5:*/		return 0x82237580;
	}
	return 0x82237580;
} // Block from 82237568h-82237580h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82237580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237580);
		  /* 82237580h */ case    0:  		/* addi R1, R1, 192 */
		/* 82237580h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82237580h case    0:*/		return 0x82237584;
		  /* 82237584h */ case    1:  		/* b -1729280 */
		/* 82237584h case    1:*/		return 0x82091284;
		/* 82237584h case    1:*/		return 0x82237588;
	}
	return 0x82237588;
} // Block from 82237580h-82237588h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82237588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237588);
		  /* 82237588h */ case    0:  		/* mfspr R12, LR */
		/* 82237588h case    0:*/		regs.R12 = regs.LR;
		/* 82237588h case    0:*/		return 0x8223758C;
		  /* 8223758Ch */ case    1:  		/* bl -1729360 */
		/* 8223758Ch case    1:*/		regs.LR = 0x82237590; return 0x8209123C;
		/* 8223758Ch case    1:*/		return 0x82237590;
		  /* 82237590h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82237590h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82237590h case    2:*/		return 0x82237594;
		  /* 82237594h */ case    3:  		/* mr R31, R3 */
		/* 82237594h case    3:*/		regs.R31 = regs.R3;
		/* 82237594h case    3:*/		return 0x82237598;
		  /* 82237598h */ case    4:  		/* addi R6, R1, 88 */
		/* 82237598h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 82237598h case    4:*/		return 0x8223759C;
		  /* 8223759Ch */ case    5:  		/* li R5, 0 */
		/* 8223759Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223759Ch case    5:*/		return 0x822375A0;
		  /* 822375A0h */ case    6:  		/* li R4, 32 */
		/* 822375A0h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 822375A0h case    6:*/		return 0x822375A4;
		  /* 822375A4h */ case    7:  		/* addi R3, R3, 184 */
		/* 822375A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0xB8);
		/* 822375A4h case    7:*/		return 0x822375A8;
		  /* 822375A8h */ case    8:  		/* bl 109744 */
		/* 822375A8h case    8:*/		regs.LR = 0x822375AC; return 0x82252258;
		/* 822375A8h case    8:*/		return 0x822375AC;
		  /* 822375ACh */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822375ACh case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822375ACh case    9:*/		return 0x822375B0;
		  /* 822375B0h */ case   10:  		/* bc 12, CR0_EQ, 1184 */
		/* 822375B0h case   10:*/		if ( regs.CR[0].eq ) { return 0x82237A50;  }
		/* 822375B0h case   10:*/		return 0x822375B4;
		  /* 822375B4h */ case   11:  		/* li R5, 0 */
		/* 822375B4h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822375B4h case   11:*/		return 0x822375B8;
		  /* 822375B8h */ case   12:  		/* lwz R3, <#[R31 + 172]> */
		/* 822375B8h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 822375B8h case   12:*/		return 0x822375BC;
		  /* 822375BCh */ case   13:  		/* li R4, 32 */
		/* 822375BCh case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 822375BCh case   13:*/		return 0x822375C0;
		  /* 822375C0h */ case   14:  		/* bl 57936 */
		/* 822375C0h case   14:*/		regs.LR = 0x822375C4; return 0x82245810;
		/* 822375C0h case   14:*/		return 0x822375C4;
		  /* 822375C4h */ case   15:  		/* lwz R11, <#[R3]> */
		/* 822375C4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 822375C4h case   15:*/		return 0x822375C8;
		  /* 822375C8h */ case   16:  		/* mr R27, R3 */
		/* 822375C8h case   16:*/		regs.R27 = regs.R3;
		/* 822375C8h case   16:*/		return 0x822375CC;
		  /* 822375CCh */ case   17:  		/* lwz R11, <#[R11 + 8]> */
		/* 822375CCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 822375CCh case   17:*/		return 0x822375D0;
		  /* 822375D0h */ case   18:  		/* mtspr CTR, R11 */
		/* 822375D0h case   18:*/		regs.CTR = regs.R11;
		/* 822375D0h case   18:*/		return 0x822375D4;
		  /* 822375D4h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 822375D4h case   19:*/		if ( 1 ) { regs.LR = 0x822375D8; return (uint32)regs.CTR; }
		/* 822375D4h case   19:*/		return 0x822375D8;
		  /* 822375D8h */ case   20:  		/* lis R11, -32253 */
		/* 822375D8h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822375D8h case   20:*/		return 0x822375DC;
		  /* 822375DCh */ case   21:  		/* lis R10, -32252 */
		/* 822375DCh case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822375DCh case   21:*/		return 0x822375E0;
		  /* 822375E0h */ case   22:  		/* rlwinm. R9, R3, 0, 24, 31 */
		/* 822375E0h case   22:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R3);
		/* 822375E0h case   22:*/		return 0x822375E4;
		  /* 822375E4h */ case   23:  		/* addi R23, R11, 27460 */
		/* 822375E4h case   23:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x6B44);
		/* 822375E4h case   23:*/		return 0x822375E8;
		  /* 822375E8h */ case   24:  		/* addi R22, R10, 8520 */
		/* 822375E8h case   24:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0x2148);
		/* 822375E8h case   24:*/		return 0x822375EC;
		  /* 822375ECh */ case   25:  		/* bc 4, CR0_EQ, 32 */
		/* 822375ECh case   25:*/		if ( !regs.CR[0].eq ) { return 0x8223760C;  }
		/* 822375ECh case   25:*/		return 0x822375F0;
		  /* 822375F0h */ case   26:  		/* lis R11, -32252 */
		/* 822375F0h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822375F0h case   26:*/		return 0x822375F4;
		  /* 822375F4h */ case   27:  		/* mr R6, R22 */
		/* 822375F4h case   27:*/		regs.R6 = regs.R22;
		/* 822375F4h case   27:*/		return 0x822375F8;
		  /* 822375F8h */ case   28:  		/* addi R5, R11, 9136 */
		/* 822375F8h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x23B0);
		/* 822375F8h case   28:*/		return 0x822375FC;
		  /* 822375FCh */ case   29:  		/* mr R4, R23 */
		/* 822375FCh case   29:*/		regs.R4 = regs.R23;
		/* 822375FCh case   29:*/		return 0x82237600;
		  /* 82237600h */ case   30:  		/* li R7, 1977 */
		/* 82237600h case   30:*/		cpu::op::li<0>(regs,&regs.R7,0x7B9);
		/* 82237600h case   30:*/		return 0x82237604;
		  /* 82237604h */ case   31:  		/* li R3, 0 */
		/* 82237604h case   31:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237604h case   31:*/		return 0x82237608;
		  /* 82237608h */ case   32:  		/* bl -915968 */
		/* 82237608h case   32:*/		regs.LR = 0x8223760C; return 0x82157C08;
		/* 82237608h case   32:*/		return 0x8223760C;
	}
	return 0x8223760C;
} // Block from 82237588h-8223760Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 8223760Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223760C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223760C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223760C);
		  /* 8223760Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223760Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223760Ch case    0:*/		return 0x82237610;
		  /* 82237610h */ case    1:  		/* li R4, 20 */
		/* 82237610h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 82237610h case    1:*/		return 0x82237614;
		  /* 82237614h */ case    2:  		/* lwz R29, <#[R11 + 1452]> */
		/* 82237614h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x000005AC) );
		/* 82237614h case    2:*/		return 0x82237618;
		  /* 82237618h */ case    3:  		/* mr R3, R29 */
		/* 82237618h case    3:*/		regs.R3 = regs.R29;
		/* 82237618h case    3:*/		return 0x8223761C;
		  /* 8223761Ch */ case    4:  		/* bl -110948 */
		/* 8223761Ch case    4:*/		regs.LR = 0x82237620; return 0x8221C4B8;
		/* 8223761Ch case    4:*/		return 0x82237620;
		  /* 82237620h */ case    5:  		/* addic. R30, R3, 4 */
		/* 82237620h case    5:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R3,0x4);
		/* 82237620h case    5:*/		return 0x82237624;
		  /* 82237624h */ case    6:  		/* stw R29, <#[R3]> */
		/* 82237624h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 82237624h case    6:*/		return 0x82237628;
		  /* 82237628h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82237628h case    7:*/		if ( regs.CR[0].eq ) { return 0x82237644;  }
		/* 82237628h case    7:*/		return 0x8223762C;
		  /* 8223762Ch */ case    8:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223762Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223762Ch case    8:*/		return 0x82237630;
		  /* 82237630h */ case    9:  		/* mr R3, R30 */
		/* 82237630h case    9:*/		regs.R3 = regs.R30;
		/* 82237630h case    9:*/		return 0x82237634;
		  /* 82237634h */ case   10:  		/* lwz R4, <#[R11 + 1452]> */
		/* 82237634h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005AC) );
		/* 82237634h case   10:*/		return 0x82237638;
		  /* 82237638h */ case   11:  		/* bl -6360 */
		/* 82237638h case   11:*/		regs.LR = 0x8223763C; return 0x82235D60;
		/* 82237638h case   11:*/		return 0x8223763C;
		  /* 8223763Ch */ case   12:  		/* mr R21, R30 */
		/* 8223763Ch case   12:*/		regs.R21 = regs.R30;
		/* 8223763Ch case   12:*/		return 0x82237640;
		  /* 82237640h */ case   13:  		/* b 8 */
		/* 82237640h case   13:*/		return 0x82237648;
		/* 82237640h case   13:*/		return 0x82237644;
	}
	return 0x82237644;
} // Block from 8223760Ch-82237644h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82237644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237644);
		  /* 82237644h */ case    0:  		/* li R21, 0 */
		/* 82237644h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 82237644h case    0:*/		return 0x82237648;
	}
	return 0x82237648;
} // Block from 82237644h-82237648h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82237648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237648);
		  /* 82237648h */ case    0:  		/* li R24, 1 */
		/* 82237648h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 82237648h case    0:*/		return 0x8223764C;
		  /* 8223764Ch */ case    1:  		/* li R30, 0 */
		/* 8223764Ch case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223764Ch case    1:*/		return 0x82237650;
		  /* 82237650h */ case    2:  		/* li R26, 0 */
		/* 82237650h case    2:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82237650h case    2:*/		return 0x82237654;
		  /* 82237654h */ case    3:  		/* mr R25, R24 */
		/* 82237654h case    3:*/		regs.R25 = regs.R24;
		/* 82237654h case    3:*/		return 0x82237658;
		  /* 82237658h */ case    4:  		/* lwz R11, <#[R27 + 36]> */
		/* 82237658h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000024) );
		/* 82237658h case    4:*/		return 0x8223765C;
		  /* 8223765Ch */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 8223765Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8223765Ch case    5:*/		return 0x82237660;
		  /* 82237660h */ case    6:  		/* cmplw CR6, R25, R10 */
		/* 82237660h case    6:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R10);
		/* 82237660h case    6:*/		return 0x82237664;
		  /* 82237664h */ case    7:  		/* bc 4, CR6_GT, 12 */
		/* 82237664h case    7:*/		if ( !regs.CR[6].gt ) { return 0x82237670;  }
		/* 82237664h case    7:*/		return 0x82237668;
		  /* 82237668h */ case    8:  		/* li R11, 0 */
		/* 82237668h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82237668h case    8:*/		return 0x8223766C;
		  /* 8223766Ch */ case    9:  		/* b 16 */
		/* 8223766Ch case    9:*/		return 0x8223767C;
		/* 8223766Ch case    9:*/		return 0x82237670;
	}
	return 0x82237670;
} // Block from 82237648h-82237670h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82237670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237670);
		  /* 82237670h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82237670h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82237670h case    0:*/		return 0x82237674;
		  /* 82237674h */ case    1:  		/* mr R11, R24 */
		/* 82237674h case    1:*/		regs.R11 = regs.R24;
		/* 82237674h case    1:*/		return 0x82237678;
		  /* 82237678h */ case    2:  		/* lwzx R30, <#[R10 + R26]> */
		/* 82237678h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 82237678h case    2:*/		return 0x8223767C;
	}
	return 0x8223767C;
} // Block from 82237670h-8223767Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223767Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223767C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223767C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223767C);
		  /* 8223767Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8223767Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8223767Ch case    0:*/		return 0x82237680;
		  /* 82237680h */ case    1:  		/* bc 12, CR0_EQ, 96 */
		/* 82237680h case    1:*/		if ( regs.CR[0].eq ) { return 0x822376E0;  }
		/* 82237680h case    1:*/		return 0x82237684;
		  /* 82237684h */ case    2:  		/* lwz R11, <#[R30 + 228]> */
		/* 82237684h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000E4) );
		/* 82237684h case    2:*/		return 0x82237688;
		  /* 82237688h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82237688h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82237688h case    3:*/		return 0x8223768C;
		  /* 8223768Ch */ case    4:  		/* bc 12, CR0_EQ, 72 */
		/* 8223768Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x822376D4;  }
		/* 8223768Ch case    4:*/		return 0x82237690;
		  /* 82237690h */ case    5:  		/* lwz R11, <#[R30 + 20]> */
		/* 82237690h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82237690h case    5:*/		return 0x82237694;
		  /* 82237694h */ case    6:  		/* li R29, 0 */
		/* 82237694h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82237694h case    6:*/		return 0x82237698;
		  /* 82237698h */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 82237698h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82237698h case    7:*/		return 0x8223769C;
		  /* 8223769Ch */ case    8:  		/* bc 4, CR6_GT, 56 */
		/* 8223769Ch case    8:*/		if ( !regs.CR[6].gt ) { return 0x822376D4;  }
		/* 8223769Ch case    8:*/		return 0x822376A0;
		  /* 822376A0h */ case    9:  		/* addi R28, R30, 84 */
		/* 822376A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x54);
		/* 822376A0h case    9:*/		return 0x822376A4;
		  /* 822376A4h */ case   10:  		/* lwz R11, <#[R28]> */
		/* 822376A4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 822376A4h case   10:*/		return 0x822376A8;
		  /* 822376A8h */ case   11:  		/* cmpwi CR6, R11, 32 */
		/* 822376A8h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 822376A8h case   11:*/		return 0x822376AC;
		  /* 822376ACh */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 822376ACh case   12:*/		if ( !regs.CR[6].eq ) { return 0x822376C0;  }
		/* 822376ACh case   12:*/		return 0x822376B0;
		  /* 822376B0h */ case   13:  		/* mr R3, R21 */
		/* 822376B0h case   13:*/		regs.R3 = regs.R21;
		/* 822376B0h case   13:*/		return 0x822376B4;
		  /* 822376B4h */ case   14:  		/* lwz R4, <#[R21 + 4]> */
		/* 822376B4h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000004) );
		/* 822376B4h case   14:*/		return 0x822376B8;
	}
	return 0x822376B8;
} // Block from 8223767Ch-822376B8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822376B8h
// Function '?InsertInstructionsForVertexFogWithBlend@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822376B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822376B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822376B8);
		  /* 822376B8h */ case    0:  		/* bl 115720 */
		/* 822376B8h case    0:*/		regs.LR = 0x822376BC; return 0x82253AC0;
		/* 822376B8h case    0:*/		return 0x822376BC;
		  /* 822376BCh */ case    1:  		/* stw R30, <#[R3]> */
		/* 822376BCh case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 822376BCh case    1:*/		return 0x822376C0;
	}
	return 0x822376C0;
} // Block from 822376B8h-822376C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822376C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822376C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822376C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822376C0);
		  /* 822376C0h */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 822376C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 822376C0h case    0:*/		return 0x822376C4;
		  /* 822376C4h */ case    1:  		/* addi R29, R29, 1 */
		/* 822376C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 822376C4h case    1:*/		return 0x822376C8;
		  /* 822376C8h */ case    2:  		/* addi R28, R28, 4 */
		/* 822376C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 822376C8h case    2:*/		return 0x822376CC;
		  /* 822376CCh */ case    3:  		/* cmpw CR6, R29, R11 */
		/* 822376CCh case    3:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R11);
		/* 822376CCh case    3:*/		return 0x822376D0;
		  /* 822376D0h */ case    4:  		/* bc 12, CR6_LT, -44 */
		/* 822376D0h case    4:*/		if ( regs.CR[6].lt ) { return 0x822376A4;  }
		/* 822376D0h case    4:*/		return 0x822376D4;
	}
	return 0x822376D4;
} // Block from 822376C0h-822376D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822376D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822376D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822376D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822376D4);
		  /* 822376D4h */ case    0:  		/* addi R25, R25, 1 */
		/* 822376D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 822376D4h case    0:*/		return 0x822376D8;
		  /* 822376D8h */ case    1:  		/* addi R26, R26, 4 */
		/* 822376D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 822376D8h case    1:*/		return 0x822376DC;
		  /* 822376DCh */ case    2:  		/* b -132 */
		/* 822376DCh case    2:*/		return 0x82237658;
		/* 822376DCh case    2:*/		return 0x822376E0;
	}
	return 0x822376E0;
} // Block from 822376D4h-822376E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822376E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822376E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822376E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822376E0);
		  /* 822376E0h */ case    0:  		/* lwz R10, <#[R31 + 12]> */
		/* 822376E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 822376E0h case    0:*/		return 0x822376E4;
		  /* 822376E4h */ case    1:  		/* li R4, 0 */
		/* 822376E4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822376E4h case    1:*/		return 0x822376E8;
		  /* 822376E8h */ case    2:  		/* stb R24, <#[R31 + 2073]> */
		/* 822376E8h case    2:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R31 + 0x00000819) );
		/* 822376E8h case    2:*/		return 0x822376EC;
		  /* 822376ECh */ case    3:  		/* lwz R11, <#[R10 + 1508]> */
		/* 822376ECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 822376ECh case    3:*/		return 0x822376F0;
		  /* 822376F0h */ case    4:  		/* addi R5, R11, -1 */
		/* 822376F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 822376F0h case    4:*/		return 0x822376F4;
		  /* 822376F4h */ case    5:  		/* stw R5, <#[R10 + 1508]> */
		/* 822376F4h case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 822376F4h case    5:*/		return 0x822376F8;
		  /* 822376F8h */ case    6:  		/* lwz R3, <#[R31 + 172]> */
		/* 822376F8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 822376F8h case    6:*/		return 0x822376FC;
		  /* 822376FCh */ case    7:  		/* bl 57620 */
		/* 822376FCh case    7:*/		regs.LR = 0x82237700; return 0x82245810;
		/* 822376FCh case    7:*/		return 0x82237700;
		  /* 82237700h */ case    8:  		/* lwz R11, <#[R27 + 52]> */
		/* 82237700h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000034) );
		/* 82237700h case    8:*/		return 0x82237704;
		  /* 82237704h */ case    9:  		/* lwz R10, <#[R27 + 48]> */
		/* 82237704h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000030) );
		/* 82237704h case    9:*/		return 0x82237708;
		  /* 82237708h */ case   10:  		/* mr R26, R3 */
		/* 82237708h case   10:*/		regs.R26 = regs.R3;
		/* 82237708h case   10:*/		return 0x8223770C;
		  /* 8223770Ch */ case   11:  		/* cmpw CR6, R11, R10 */
		/* 8223770Ch case   11:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8223770Ch case   11:*/		return 0x82237710;
		  /* 82237710h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 82237710h case   12:*/		if ( regs.CR[6].eq ) { return 0x82237730;  }
		/* 82237710h case   12:*/		return 0x82237714;
		  /* 82237714h */ case   13:  		/* lis R11, -32252 */
		/* 82237714h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82237714h case   13:*/		return 0x82237718;
		  /* 82237718h */ case   14:  		/* mr R6, R22 */
		/* 82237718h case   14:*/		regs.R6 = regs.R22;
		/* 82237718h case   14:*/		return 0x8223771C;
		  /* 8223771Ch */ case   15:  		/* addi R5, R11, 9096 */
		/* 8223771Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2388);
		/* 8223771Ch case   15:*/		return 0x82237720;
		  /* 82237720h */ case   16:  		/* mr R4, R23 */
		/* 82237720h case   16:*/		regs.R4 = regs.R23;
		/* 82237720h case   16:*/		return 0x82237724;
		  /* 82237724h */ case   17:  		/* li R7, 1996 */
		/* 82237724h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x7CC);
		/* 82237724h case   17:*/		return 0x82237728;
		  /* 82237728h */ case   18:  		/* li R3, 0 */
		/* 82237728h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237728h case   18:*/		return 0x8223772C;
		  /* 8223772Ch */ case   19:  		/* bl -916260 */
		/* 8223772Ch case   19:*/		regs.LR = 0x82237730; return 0x82157C08;
		/* 8223772Ch case   19:*/		return 0x82237730;
	}
	return 0x82237730;
} // Block from 822376E0h-82237730h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82237730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237730);
		  /* 82237730h */ case    0:  		/* li R3, 49 */
		/* 82237730h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 82237730h case    0:*/		return 0x82237734;
		  /* 82237734h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 82237734h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237734h case    1:*/		return 0x82237738;
		  /* 82237738h */ case    2:  		/* bl 124920 */
		/* 82237738h case    2:*/		regs.LR = 0x8223773C; return 0x82255F30;
		/* 82237738h case    2:*/		return 0x8223773C;
		  /* 8223773Ch */ case    3:  		/* mr R5, R26 */
		/* 8223773Ch case    3:*/		regs.R5 = regs.R26;
		/* 8223773Ch case    3:*/		return 0x82237740;
		  /* 82237740h */ case    4:  		/* li R4, 0 */
		/* 82237740h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237740h case    4:*/		return 0x82237744;
		  /* 82237744h */ case    5:  		/* mr R30, R3 */
		/* 82237744h case    5:*/		regs.R30 = regs.R3;
		/* 82237744h case    5:*/		return 0x82237748;
		  /* 82237748h */ case    6:  		/* bl 126032 */
		/* 82237748h case    6:*/		regs.LR = 0x8223774C; return 0x82256398;
		/* 82237748h case    6:*/		return 0x8223774C;
		  /* 8223774Ch */ case    7:  		/* mr R3, R30 */
		/* 8223774Ch case    7:*/		regs.R3 = regs.R30;
		/* 8223774Ch case    7:*/		return 0x82237750;
		  /* 82237750h */ case    8:  		/* mr R5, R27 */
		/* 82237750h case    8:*/		regs.R5 = regs.R27;
		/* 82237750h case    8:*/		return 0x82237754;
		  /* 82237754h */ case    9:  		/* li R4, 1 */
		/* 82237754h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82237754h case    9:*/		return 0x82237758;
		  /* 82237758h */ case   10:  		/* bl 126016 */
		/* 82237758h case   10:*/		regs.LR = 0x8223775C; return 0x82256398;
		/* 82237758h case   10:*/		return 0x8223775C;
		  /* 8223775Ch */ case   11:  		/* lwz R11, <#[R30]> */
		/* 8223775Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223775Ch case   11:*/		return 0x82237760;
		  /* 82237760h */ case   12:  		/* mr R3, R30 */
		/* 82237760h case   12:*/		regs.R3 = regs.R30;
		/* 82237760h case   12:*/		return 0x82237764;
		  /* 82237764h */ case   13:  		/* li R6, 0 */
		/* 82237764h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82237764h case   13:*/		return 0x82237768;
		  /* 82237768h */ case   14:  		/* li R5, 2 */
		/* 82237768h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82237768h case   14:*/		return 0x8223776C;
		  /* 8223776Ch */ case   15:  		/* li R4, 1 */
		/* 8223776Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223776Ch case   15:*/		return 0x82237770;
		  /* 82237770h */ case   16:  		/* lwz R11, <#[R11 + 88]> */
		/* 82237770h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82237770h case   16:*/		return 0x82237774;
		  /* 82237774h */ case   17:  		/* mtspr CTR, R11 */
		/* 82237774h case   17:*/		regs.CTR = regs.R11;
		/* 82237774h case   17:*/		return 0x82237778;
		  /* 82237778h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 82237778h case   18:*/		if ( 1 ) { regs.LR = 0x8223777C; return (uint32)regs.CTR; }
		/* 82237778h case   18:*/		return 0x8223777C;
		  /* 8223777Ch */ case   19:  		/* lwz R11, <#[R30]> */
		/* 8223777Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223777Ch case   19:*/		return 0x82237780;
		  /* 82237780h */ case   20:  		/* mr R3, R30 */
		/* 82237780h case   20:*/		regs.R3 = regs.R30;
		/* 82237780h case   20:*/		return 0x82237784;
		  /* 82237784h */ case   21:  		/* li R6, 1 */
		/* 82237784h case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82237784h case   21:*/		return 0x82237788;
		  /* 82237788h */ case   22:  		/* li R5, 3 */
		/* 82237788h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82237788h case   22:*/		return 0x8223778C;
		  /* 8223778Ch */ case   23:  		/* li R4, 1 */
		/* 8223778Ch case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223778Ch case   23:*/		return 0x82237790;
		  /* 82237790h */ case   24:  		/* lwz R11, <#[R11 + 88]> */
		/* 82237790h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82237790h case   24:*/		return 0x82237794;
		  /* 82237794h */ case   25:  		/* mtspr CTR, R11 */
		/* 82237794h case   25:*/		regs.CTR = regs.R11;
		/* 82237794h case   25:*/		return 0x82237798;
		  /* 82237798h */ case   26:  		/* bcctrl 20, CR0_LT */
		/* 82237798h case   26:*/		if ( 1 ) { regs.LR = 0x8223779C; return (uint32)regs.CTR; }
		/* 82237798h case   26:*/		return 0x8223779C;
		  /* 8223779Ch */ case   27:  		/* mr R4, R30 */
		/* 8223779Ch case   27:*/		regs.R4 = regs.R30;
		/* 8223779Ch case   27:*/		return 0x822377A0;
		  /* 822377A0h */ case   28:  		/* mr R3, R31 */
		/* 822377A0h case   28:*/		regs.R3 = regs.R31;
		/* 822377A0h case   28:*/		return 0x822377A4;
		  /* 822377A4h */ case   29:  		/* bl -4604 */
		/* 822377A4h case   29:*/		regs.LR = 0x822377A8; return 0x822365A8;
		/* 822377A4h case   29:*/		return 0x822377A8;
		  /* 822377A8h */ case   30:  		/* mr R4, R30 */
		/* 822377A8h case   30:*/		regs.R4 = regs.R30;
		/* 822377A8h case   30:*/		return 0x822377AC;
		  /* 822377ACh */ case   31:  		/* lwz R3, <#[R31 + 164]> */
		/* 822377ACh case   31:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A4) );
		/* 822377ACh case   31:*/		return 0x822377B0;
		  /* 822377B0h */ case   32:  		/* bl 137088 */
		/* 822377B0h case   32:*/		regs.LR = 0x822377B4; return 0x82258F30;
		/* 822377B0h case   32:*/		return 0x822377B4;
		  /* 822377B4h */ case   33:  		/* mr R3, R30 */
		/* 822377B4h case   33:*/		regs.R3 = regs.R30;
		/* 822377B4h case   33:*/		return 0x822377B8;
		  /* 822377B8h */ case   34:  		/* bl 124936 */
		/* 822377B8h case   34:*/		regs.LR = 0x822377BC; return 0x82255FC0;
		/* 822377B8h case   34:*/		return 0x822377BC;
		  /* 822377BCh */ case   35:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822377BCh case   35:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822377BCh case   35:*/		return 0x822377C0;
		  /* 822377C0h */ case   36:  		/* bc 4, CR0_EQ, 32 */
		/* 822377C0h case   36:*/		if ( !regs.CR[0].eq ) { return 0x822377E0;  }
		/* 822377C0h case   36:*/		return 0x822377C4;
		  /* 822377C4h */ case   37:  		/* lis R11, -32252 */
		/* 822377C4h case   37:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822377C4h case   37:*/		return 0x822377C8;
		  /* 822377C8h */ case   38:  		/* mr R6, R22 */
		/* 822377C8h case   38:*/		regs.R6 = regs.R22;
		/* 822377C8h case   38:*/		return 0x822377CC;
		  /* 822377CCh */ case   39:  		/* addi R5, R11, 8912 */
		/* 822377CCh case   39:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x22D0);
		/* 822377CCh case   39:*/		return 0x822377D0;
		  /* 822377D0h */ case   40:  		/* mr R4, R23 */
		/* 822377D0h case   40:*/		regs.R4 = regs.R23;
		/* 822377D0h case   40:*/		return 0x822377D4;
		  /* 822377D4h */ case   41:  		/* li R7, 2008 */
		/* 822377D4h case   41:*/		cpu::op::li<0>(regs,&regs.R7,0x7D8);
		/* 822377D4h case   41:*/		return 0x822377D8;
		  /* 822377D8h */ case   42:  		/* li R3, 0 */
		/* 822377D8h case   42:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822377D8h case   42:*/		return 0x822377DC;
		  /* 822377DCh */ case   43:  		/* bl -916436 */
		/* 822377DCh case   43:*/		regs.LR = 0x822377E0; return 0x82157C08;
		/* 822377DCh case   43:*/		return 0x822377E0;
	}
	return 0x822377E0;
} // Block from 82237730h-822377E0h (44 instructions)

//////////////////////////////////////////////////////
// Block at 822377E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822377E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822377E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822377E0);
		  /* 822377E0h */ case    0:  		/* mr R3, R31 */
		/* 822377E0h case    0:*/		regs.R3 = regs.R31;
		/* 822377E0h case    0:*/		return 0x822377E4;
		  /* 822377E4h */ case    1:  		/* bl -5044 */
		/* 822377E4h case    1:*/		regs.LR = 0x822377E8; return 0x82236430;
		/* 822377E4h case    1:*/		return 0x822377E8;
		  /* 822377E8h */ case    2:  		/* lwz R11, <#[R27 + 48]> */
		/* 822377E8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 822377E8h case    2:*/		return 0x822377EC;
		  /* 822377ECh */ case    3:  		/* lwz R4, <#[R31 + 12]> */
		/* 822377ECh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 822377ECh case    3:*/		return 0x822377F0;
		  /* 822377F0h */ case    4:  		/* mr R30, R3 */
		/* 822377F0h case    4:*/		regs.R30 = regs.R3;
		/* 822377F0h case    4:*/		return 0x822377F4;
		  /* 822377F4h */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 822377F4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 822377F4h case    5:*/		return 0x822377F8;
		  /* 822377F8h */ case    6:  		/* bc 12, CR6_EQ, 336 */
		/* 822377F8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82237948;  }
		/* 822377F8h case    6:*/		return 0x822377FC;
		  /* 822377FCh */ case    7:  		/* li R3, 18 */
		/* 822377FCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x12);
		/* 822377FCh case    7:*/		return 0x82237800;
		  /* 82237800h */ case    8:  		/* bl 124720 */
		/* 82237800h case    8:*/		regs.LR = 0x82237804; return 0x82255F30;
		/* 82237800h case    8:*/		return 0x82237804;
		  /* 82237804h */ case    9:  		/* mr R5, R26 */
		/* 82237804h case    9:*/		regs.R5 = regs.R26;
		/* 82237804h case    9:*/		return 0x82237808;
		  /* 82237808h */ case   10:  		/* li R4, 0 */
		/* 82237808h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237808h case   10:*/		return 0x8223780C;
		  /* 8223780Ch */ case   11:  		/* mr R29, R3 */
		/* 8223780Ch case   11:*/		regs.R29 = regs.R3;
		/* 8223780Ch case   11:*/		return 0x82237810;
		  /* 82237810h */ case   12:  		/* bl 125832 */
		/* 82237810h case   12:*/		regs.LR = 0x82237814; return 0x82256398;
		/* 82237810h case   12:*/		return 0x82237814;
		  /* 82237814h */ case   13:  		/* lwz R11, <#[R29]> */
		/* 82237814h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82237814h case   13:*/		return 0x82237818;
		  /* 82237818h */ case   14:  		/* mr R3, R29 */
		/* 82237818h case   14:*/		regs.R3 = regs.R29;
		/* 82237818h case   14:*/		return 0x8223781C;
		  /* 8223781Ch */ case   15:  		/* li R6, 1 */
		/* 8223781Ch case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223781Ch case   15:*/		return 0x82237820;
		  /* 82237820h */ case   16:  		/* li R5, 2 */
		/* 82237820h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82237820h case   16:*/		return 0x82237824;
		  /* 82237824h */ case   17:  		/* li R4, 0 */
		/* 82237824h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237824h case   17:*/		return 0x82237828;
		  /* 82237828h */ case   18:  		/* lwz R11, <#[R11 + 84]> */
		/* 82237828h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82237828h case   18:*/		return 0x8223782C;
		  /* 8223782Ch */ case   19:  		/* mtspr CTR, R11 */
		/* 8223782Ch case   19:*/		regs.CTR = regs.R11;
		/* 8223782Ch case   19:*/		return 0x82237830;
		  /* 82237830h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 82237830h case   20:*/		if ( 1 ) { regs.LR = 0x82237834; return (uint32)regs.CTR; }
		/* 82237830h case   20:*/		return 0x82237834;
		  /* 82237834h */ case   21:  		/* lwz R11, <#[R29]> */
		/* 82237834h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82237834h case   21:*/		return 0x82237838;
		  /* 82237838h */ case   22:  		/* mr R3, R29 */
		/* 82237838h case   22:*/		regs.R3 = regs.R29;
		/* 82237838h case   22:*/		return 0x8223783C;
		  /* 8223783Ch */ case   23:  		/* li R6, 1 */
		/* 8223783Ch case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223783Ch case   23:*/		return 0x82237840;
		  /* 82237840h */ case   24:  		/* li R5, 3 */
		/* 82237840h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82237840h case   24:*/		return 0x82237844;
		  /* 82237844h */ case   25:  		/* li R4, 0 */
		/* 82237844h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237844h case   25:*/		return 0x82237848;
		  /* 82237848h */ case   26:  		/* lwz R11, <#[R11 + 84]> */
		/* 82237848h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82237848h case   26:*/		return 0x8223784C;
		  /* 8223784Ch */ case   27:  		/* mtspr CTR, R11 */
		/* 8223784Ch case   27:*/		regs.CTR = regs.R11;
		/* 8223784Ch case   27:*/		return 0x82237850;
		  /* 82237850h */ case   28:  		/* bcctrl 20, CR0_LT */
		/* 82237850h case   28:*/		if ( 1 ) { regs.LR = 0x82237854; return (uint32)regs.CTR; }
		/* 82237850h case   28:*/		return 0x82237854;
		  /* 82237854h */ case   29:  		/* mr R3, R29 */
		/* 82237854h case   29:*/		regs.R3 = regs.R29;
		/* 82237854h case   29:*/		return 0x82237858;
		  /* 82237858h */ case   30:  		/* mr R5, R30 */
		/* 82237858h case   30:*/		regs.R5 = regs.R30;
		/* 82237858h case   30:*/		return 0x8223785C;
		  /* 8223785Ch */ case   31:  		/* li R4, 1 */
		/* 8223785Ch case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223785Ch case   31:*/		return 0x82237860;
		  /* 82237860h */ case   32:  		/* bl 125752 */
		/* 82237860h case   32:*/		regs.LR = 0x82237864; return 0x82256398;
		/* 82237860h case   32:*/		return 0x82237864;
		  /* 82237864h */ case   33:  		/* stb R24, <#[R29 + 159]> */
		/* 82237864h case   33:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R29 + 0x0000009F) );
		/* 82237864h case   33:*/		return 0x82237868;
		  /* 82237868h */ case   34:  		/* lis R11, -32222 */
		/* 82237868h case   34:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82237868h case   34:*/		return 0x8223786C;
		  /* 8223786Ch */ case   35:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223786Ch case   35:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223786Ch case   35:*/		return 0x82237870;
		  /* 82237870h */ case   36:  		/* addi R5, R1, 84 */
		/* 82237870h case   36:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82237870h case   36:*/		return 0x82237874;
		  /* 82237874h */ case   37:  		/* lwz R3, <#[R31 + 16]> */
		/* 82237874h case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82237874h case   37:*/		return 0x82237878;
		  /* 82237878h */ case   38:  		/* addi R6, R11, -12392 */
		/* 82237878h case   38:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82237878h case   38:*/		return 0x8223787C;
		  /* 8223787Ch */ case   39:  		/* li R4, 0 */
		/* 8223787Ch case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223787Ch case   39:*/		return 0x82237880;
		  /* 82237880h */ case   40:  		/* bl -17848 */
		/* 82237880h case   40:*/		regs.LR = 0x82237884; return 0x822332C8;
		/* 82237880h case   40:*/		return 0x82237884;
		  /* 82237884h */ case   41:  		/* lis R11, -32222 */
		/* 82237884h case   41:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82237884h case   41:*/		return 0x82237888;
		  /* 82237888h */ case   42:  		/* addi R6, R11, -12392 */
		/* 82237888h case   42:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82237888h case   42:*/		return 0x8223788C;
		  /* 8223788Ch */ case   43:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223788Ch case   43:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223788Ch case   43:*/		return 0x82237890;
		  /* 82237890h */ case   44:  		/* addi R5, R1, 80 */
		/* 82237890h case   44:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82237890h case   44:*/		return 0x82237894;
		  /* 82237894h */ case   45:  		/* lwz R3, <#[R31 + 16]> */
		/* 82237894h case   45:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82237894h case   45:*/		return 0x82237898;
		  /* 82237898h */ case   46:  		/* li R4, 0 */
		/* 82237898h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237898h case   46:*/		return 0x8223789C;
		  /* 8223789Ch */ case   47:  		/* bl -17852 */
		/* 8223789Ch case   47:*/		regs.LR = 0x822378A0; return 0x822332E0;
		/* 8223789Ch case   47:*/		return 0x822378A0;
		  /* 822378A0h */ case   48:  		/* lfs FR4, <#[R1 + 80]> */
		/* 822378A0h case   48:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000050) );
		/* 822378A0h case   48:*/		return 0x822378A4;
		  /* 822378A4h */ case   49:  		/* lfs FR3, <#[R1 + 84]> */
		/* 822378A4h case   49:*/		cpu::mem::load32f( regs, &regs.FR3, (uint32)(regs.R1 + 0x00000054) );
		/* 822378A4h case   49:*/		return 0x822378A8;
	}
	return 0x822378A8;
} // Block from 822377E0h-822378A8h (50 instructions)

//////////////////////////////////////////////////////
// Block at 822378A8h
// Function '?InsertInstructionsForWritePixelFogInterps@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822378A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822378A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822378A8);
		  /* 822378A8h */ case    0:  		/* mr R3, R29 */
		/* 822378A8h case    0:*/		regs.R3 = regs.R29;
		/* 822378A8h case    0:*/		return 0x822378AC;
		  /* 822378ACh */ case    1:  		/* li R5, 2 */
		/* 822378ACh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 822378ACh case    1:*/		return 0x822378B0;
		  /* 822378B0h */ case    2:  		/* fmr FR2, FR4 */
		/* 822378B0h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 822378B0h case    2:*/		return 0x822378B4;
		  /* 822378B4h */ case    3:  		/* mr R4, R31 */
		/* 822378B4h case    3:*/		regs.R4 = regs.R31;
		/* 822378B4h case    3:*/		return 0x822378B8;
		  /* 822378B8h */ case    4:  		/* fmr FR1, FR3 */
		/* 822378B8h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR3);
		/* 822378B8h case    4:*/		return 0x822378BC;
		  /* 822378BCh */ case    5:  		/* bl 128604 */
		/* 822378BCh case    5:*/		regs.LR = 0x822378C0; return 0x82256F18;
		/* 822378BCh case    5:*/		return 0x822378C0;
		  /* 822378C0h */ case    6:  		/* stb R24, <#[R29 + 154]> */
		/* 822378C0h case    6:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R29 + 0x0000009A) );
		/* 822378C0h case    6:*/		return 0x822378C4;
		  /* 822378C4h */ case    7:  		/* mr R4, R29 */
		/* 822378C4h case    7:*/		regs.R4 = regs.R29;
		/* 822378C4h case    7:*/		return 0x822378C8;
		  /* 822378C8h */ case    8:  		/* lwz R3, <#[R31 + 164]> */
		/* 822378C8h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A4) );
		/* 822378C8h case    8:*/		return 0x822378CC;
		  /* 822378CCh */ case    9:  		/* bl 136804 */
		/* 822378CCh case    9:*/		regs.LR = 0x822378D0; return 0x82258F30;
		/* 822378CCh case    9:*/		return 0x822378D0;
		  /* 822378D0h */ case   10:  		/* li R3, 49 */
		/* 822378D0h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 822378D0h case   10:*/		return 0x822378D4;
		  /* 822378D4h */ case   11:  		/* lwz R4, <#[R31 + 12]> */
		/* 822378D4h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 822378D4h case   11:*/		return 0x822378D8;
		  /* 822378D8h */ case   12:  		/* bl 124504 */
		/* 822378D8h case   12:*/		regs.LR = 0x822378DC; return 0x82255F30;
		/* 822378D8h case   12:*/		return 0x822378DC;
		  /* 822378DCh */ case   13:  		/* mr R5, R26 */
		/* 822378DCh case   13:*/		regs.R5 = regs.R26;
		/* 822378DCh case   13:*/		return 0x822378E0;
		  /* 822378E0h */ case   14:  		/* li R4, 0 */
		/* 822378E0h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822378E0h case   14:*/		return 0x822378E4;
		  /* 822378E4h */ case   15:  		/* mr R30, R3 */
		/* 822378E4h case   15:*/		regs.R30 = regs.R3;
		/* 822378E4h case   15:*/		return 0x822378E8;
		  /* 822378E8h */ case   16:  		/* bl 125616 */
		/* 822378E8h case   16:*/		regs.LR = 0x822378EC; return 0x82256398;
		/* 822378E8h case   16:*/		return 0x822378EC;
		  /* 822378ECh */ case   17:  		/* lwz R11, <#[R30]> */
		/* 822378ECh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822378ECh case   17:*/		return 0x822378F0;
		  /* 822378F0h */ case   18:  		/* mr R3, R30 */
		/* 822378F0h case   18:*/		regs.R3 = regs.R30;
		/* 822378F0h case   18:*/		return 0x822378F4;
		  /* 822378F4h */ case   19:  		/* li R6, 1 */
		/* 822378F4h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822378F4h case   19:*/		return 0x822378F8;
		  /* 822378F8h */ case   20:  		/* li R5, 2 */
		/* 822378F8h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 822378F8h case   20:*/		return 0x822378FC;
		  /* 822378FCh */ case   21:  		/* li R4, 0 */
		/* 822378FCh case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822378FCh case   21:*/		return 0x82237900;
		  /* 82237900h */ case   22:  		/* lwz R11, <#[R11 + 84]> */
		/* 82237900h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82237900h case   22:*/		return 0x82237904;
		  /* 82237904h */ case   23:  		/* mtspr CTR, R11 */
		/* 82237904h case   23:*/		regs.CTR = regs.R11;
		/* 82237904h case   23:*/		return 0x82237908;
		  /* 82237908h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 82237908h case   24:*/		if ( 1 ) { regs.LR = 0x8223790C; return (uint32)regs.CTR; }
		/* 82237908h case   24:*/		return 0x8223790C;
		  /* 8223790Ch */ case   25:  		/* lwz R11, <#[R30]> */
		/* 8223790Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223790Ch case   25:*/		return 0x82237910;
		  /* 82237910h */ case   26:  		/* li R6, 1 */
		/* 82237910h case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82237910h case   26:*/		return 0x82237914;
		  /* 82237914h */ case   27:  		/* li R5, 3 */
		/* 82237914h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82237914h case   27:*/		return 0x82237918;
		  /* 82237918h */ case   28:  		/* li R4, 0 */
		/* 82237918h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237918h case   28:*/		return 0x8223791C;
		  /* 8223791Ch */ case   29:  		/* mr R3, R30 */
		/* 8223791Ch case   29:*/		regs.R3 = regs.R30;
		/* 8223791Ch case   29:*/		return 0x82237920;
		  /* 82237920h */ case   30:  		/* lwz R11, <#[R11 + 84]> */
		/* 82237920h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82237920h case   30:*/		return 0x82237924;
		  /* 82237924h */ case   31:  		/* mtspr CTR, R11 */
		/* 82237924h case   31:*/		regs.CTR = regs.R11;
		/* 82237924h case   31:*/		return 0x82237928;
		  /* 82237928h */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 82237928h case   32:*/		if ( 1 ) { regs.LR = 0x8223792C; return (uint32)regs.CTR; }
		/* 82237928h case   32:*/		return 0x8223792C;
		  /* 8223792Ch */ case   33:  		/* mr R3, R30 */
		/* 8223792Ch case   33:*/		regs.R3 = regs.R30;
		/* 8223792Ch case   33:*/		return 0x82237930;
		  /* 82237930h */ case   34:  		/* mr R5, R27 */
		/* 82237930h case   34:*/		regs.R5 = regs.R27;
		/* 82237930h case   34:*/		return 0x82237934;
		  /* 82237934h */ case   35:  		/* li R4, 1 */
		/* 82237934h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82237934h case   35:*/		return 0x82237938;
		  /* 82237938h */ case   36:  		/* bl 125536 */
		/* 82237938h case   36:*/		regs.LR = 0x8223793C; return 0x82256398;
		/* 82237938h case   36:*/		return 0x8223793C;
		  /* 8223793Ch */ case   37:  		/* stb R24, <#[R30 + 153]> */
		/* 8223793Ch case   37:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R30 + 0x00000099) );
		/* 8223793Ch case   37:*/		return 0x82237940;
		  /* 82237940h */ case   38:  		/* mr R4, R30 */
		/* 82237940h case   38:*/		regs.R4 = regs.R30;
		/* 82237940h case   38:*/		return 0x82237944;
		  /* 82237944h */ case   39:  		/* b 116 */
		/* 82237944h case   39:*/		return 0x822379B8;
		/* 82237944h case   39:*/		return 0x82237948;
	}
	return 0x82237948;
} // Block from 822378A8h-82237948h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82237948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237948);
		  /* 82237948h */ case    0:  		/* li R3, 49 */
		/* 82237948h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 82237948h case    0:*/		return 0x8223794C;
		  /* 8223794Ch */ case    1:  		/* bl 124388 */
		/* 8223794Ch case    1:*/		regs.LR = 0x82237950; return 0x82255F30;
		/* 8223794Ch case    1:*/		return 0x82237950;
		  /* 82237950h */ case    2:  		/* mr R5, R26 */
		/* 82237950h case    2:*/		regs.R5 = regs.R26;
		/* 82237950h case    2:*/		return 0x82237954;
		  /* 82237954h */ case    3:  		/* li R4, 0 */
		/* 82237954h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237954h case    3:*/		return 0x82237958;
		  /* 82237958h */ case    4:  		/* mr R29, R3 */
		/* 82237958h case    4:*/		regs.R29 = regs.R3;
		/* 82237958h case    4:*/		return 0x8223795C;
		  /* 8223795Ch */ case    5:  		/* bl 125500 */
		/* 8223795Ch case    5:*/		regs.LR = 0x82237960; return 0x82256398;
		/* 8223795Ch case    5:*/		return 0x82237960;
		  /* 82237960h */ case    6:  		/* lwz R11, <#[R29]> */
		/* 82237960h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82237960h case    6:*/		return 0x82237964;
		  /* 82237964h */ case    7:  		/* mr R3, R29 */
		/* 82237964h case    7:*/		regs.R3 = regs.R29;
		/* 82237964h case    7:*/		return 0x82237968;
		  /* 82237968h */ case    8:  		/* li R6, 1 */
		/* 82237968h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82237968h case    8:*/		return 0x8223796C;
		  /* 8223796Ch */ case    9:  		/* li R5, 2 */
		/* 8223796Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223796Ch case    9:*/		return 0x82237970;
		  /* 82237970h */ case   10:  		/* li R4, 0 */
		/* 82237970h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237970h case   10:*/		return 0x82237974;
		  /* 82237974h */ case   11:  		/* lwz R11, <#[R11 + 84]> */
		/* 82237974h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82237974h case   11:*/		return 0x82237978;
		  /* 82237978h */ case   12:  		/* mtspr CTR, R11 */
		/* 82237978h case   12:*/		regs.CTR = regs.R11;
		/* 82237978h case   12:*/		return 0x8223797C;
		  /* 8223797Ch */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8223797Ch case   13:*/		if ( 1 ) { regs.LR = 0x82237980; return (uint32)regs.CTR; }
		/* 8223797Ch case   13:*/		return 0x82237980;
		  /* 82237980h */ case   14:  		/* lwz R11, <#[R29]> */
		/* 82237980h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82237980h case   14:*/		return 0x82237984;
		  /* 82237984h */ case   15:  		/* mr R3, R29 */
		/* 82237984h case   15:*/		regs.R3 = regs.R29;
		/* 82237984h case   15:*/		return 0x82237988;
		  /* 82237988h */ case   16:  		/* li R6, 1 */
		/* 82237988h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82237988h case   16:*/		return 0x8223798C;
		  /* 8223798Ch */ case   17:  		/* li R5, 3 */
		/* 8223798Ch case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223798Ch case   17:*/		return 0x82237990;
		  /* 82237990h */ case   18:  		/* li R4, 0 */
		/* 82237990h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237990h case   18:*/		return 0x82237994;
		  /* 82237994h */ case   19:  		/* lwz R11, <#[R11 + 84]> */
		/* 82237994h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82237994h case   19:*/		return 0x82237998;
		  /* 82237998h */ case   20:  		/* mtspr CTR, R11 */
		/* 82237998h case   20:*/		regs.CTR = regs.R11;
		/* 82237998h case   20:*/		return 0x8223799C;
		  /* 8223799Ch */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 8223799Ch case   21:*/		if ( 1 ) { regs.LR = 0x822379A0; return (uint32)regs.CTR; }
		/* 8223799Ch case   21:*/		return 0x822379A0;
		  /* 822379A0h */ case   22:  		/* stb R24, <#[R29 + 159]> */
		/* 822379A0h case   22:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R29 + 0x0000009F) );
		/* 822379A0h case   22:*/		return 0x822379A4;
		  /* 822379A4h */ case   23:  		/* mr R3, R29 */
		/* 822379A4h case   23:*/		regs.R3 = regs.R29;
		/* 822379A4h case   23:*/		return 0x822379A8;
		  /* 822379A8h */ case   24:  		/* mr R5, R30 */
		/* 822379A8h case   24:*/		regs.R5 = regs.R30;
		/* 822379A8h case   24:*/		return 0x822379AC;
		  /* 822379ACh */ case   25:  		/* li R4, 1 */
		/* 822379ACh case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822379ACh case   25:*/		return 0x822379B0;
		  /* 822379B0h */ case   26:  		/* bl 125416 */
		/* 822379B0h case   26:*/		regs.LR = 0x822379B4; return 0x82256398;
		/* 822379B0h case   26:*/		return 0x822379B4;
		  /* 822379B4h */ case   27:  		/* mr R4, R29 */
		/* 822379B4h case   27:*/		regs.R4 = regs.R29;
		/* 822379B4h case   27:*/		return 0x822379B8;
	}
	return 0x822379B8;
} // Block from 82237948h-822379B8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 822379B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822379B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822379B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822379B8);
		  /* 822379B8h */ case    0:  		/* lwz R3, <#[R31 + 164]> */
		/* 822379B8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A4) );
		/* 822379B8h case    0:*/		return 0x822379BC;
		  /* 822379BCh */ case    1:  		/* bl 136564 */
		/* 822379BCh case    1:*/		regs.LR = 0x822379C0; return 0x82258F30;
		/* 822379BCh case    1:*/		return 0x822379C0;
		  /* 822379C0h */ case    2:  		/* lwz R11, <#[R21 + 4]> */
		/* 822379C0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 822379C0h case    2:*/		return 0x822379C4;
		  /* 822379C4h */ case    3:  		/* li R28, 0 */
		/* 822379C4h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 822379C4h case    3:*/		return 0x822379C8;
		  /* 822379C8h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 822379C8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822379C8h case    4:*/		return 0x822379CC;
		  /* 822379CCh */ case    5:  		/* bc 12, CR6_EQ, 132 */
		/* 822379CCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82237A50;  }
		/* 822379CCh case    5:*/		return 0x822379D0;
		  /* 822379D0h */ case    6:  		/* li R27, 0 */
		/* 822379D0h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 822379D0h case    6:*/		return 0x822379D4;
		  /* 822379D4h */ case    7:  		/* cmplw CR6, R28, R11 */
		/* 822379D4h case    7:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 822379D4h case    7:*/		return 0x822379D8;
		  /* 822379D8h */ case    8:  		/* bc 4, CR6_LT, 16 */
		/* 822379D8h case    8:*/		if ( !regs.CR[6].lt ) { return 0x822379E8;  }
		/* 822379D8h case    8:*/		return 0x822379DC;
		  /* 822379DCh */ case    9:  		/* lwz R11, <#[R21 + 8]> */
		/* 822379DCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 822379DCh case    9:*/		return 0x822379E0;
		  /* 822379E0h */ case   10:  		/* add R3, R11, R27 */
		/* 822379E0h case   10:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R27);
		/* 822379E0h case   10:*/		return 0x822379E4;
		  /* 822379E4h */ case   11:  		/* b 16 */
		/* 822379E4h case   11:*/		return 0x822379F4;
		/* 822379E4h case   11:*/		return 0x822379E8;
	}
	return 0x822379E8;
} // Block from 822379B8h-822379E8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822379E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822379E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822379E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822379E8);
		  /* 822379E8h */ case    0:  		/* mr R4, R28 */
		/* 822379E8h case    0:*/		regs.R4 = regs.R28;
		/* 822379E8h case    0:*/		return 0x822379EC;
		  /* 822379ECh */ case    1:  		/* mr R3, R21 */
		/* 822379ECh case    1:*/		regs.R3 = regs.R21;
		/* 822379ECh case    1:*/		return 0x822379F0;
		  /* 822379F0h */ case    2:  		/* bl 114896 */
		/* 822379F0h case    2:*/		regs.LR = 0x822379F4; return 0x82253AC0;
		/* 822379F0h case    2:*/		return 0x822379F4;
	}
	return 0x822379F4;
} // Block from 822379E8h-822379F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822379F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822379F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822379F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822379F4);
		  /* 822379F4h */ case    0:  		/* lwz R31, <#[R3]> */
		/* 822379F4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 822379F4h case    0:*/		return 0x822379F8;
		  /* 822379F8h */ case    1:  		/* mr R30, R24 */
		/* 822379F8h case    1:*/		regs.R30 = regs.R24;
		/* 822379F8h case    1:*/		return 0x822379FC;
		  /* 822379FCh */ case    2:  		/* lwz R11, <#[R31 + 20]> */
		/* 822379FCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 822379FCh case    2:*/		return 0x82237A00;
		  /* 82237A00h */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 82237A00h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82237A00h case    3:*/		return 0x82237A04;
		  /* 82237A04h */ case    4:  		/* bc 12, CR6_LT, 56 */
		/* 82237A04h case    4:*/		if ( regs.CR[6].lt ) { return 0x82237A3C;  }
		/* 82237A04h case    4:*/		return 0x82237A08;
		  /* 82237A08h */ case    5:  		/* addi R29, R31, 84 */
		/* 82237A08h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x54);
		/* 82237A08h case    5:*/		return 0x82237A0C;
		  /* 82237A0Ch */ case    6:  		/* lwz R11, <#[R29]> */
		/* 82237A0Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82237A0Ch case    6:*/		return 0x82237A10;
		  /* 82237A10h */ case    7:  		/* cmpwi CR6, R11, 32 */
		/* 82237A10h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 82237A10h case    7:*/		return 0x82237A14;
		  /* 82237A14h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 82237A14h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82237A28;  }
		/* 82237A14h case    8:*/		return 0x82237A18;
		  /* 82237A18h */ case    9:  		/* mr R5, R26 */
		/* 82237A18h case    9:*/		regs.R5 = regs.R26;
		/* 82237A18h case    9:*/		return 0x82237A1C;
		  /* 82237A1Ch */ case   10:  		/* mr R4, R30 */
		/* 82237A1Ch case   10:*/		regs.R4 = regs.R30;
		/* 82237A1Ch case   10:*/		return 0x82237A20;
		  /* 82237A20h */ case   11:  		/* mr R3, R31 */
		/* 82237A20h case   11:*/		regs.R3 = regs.R31;
		/* 82237A20h case   11:*/		return 0x82237A24;
		  /* 82237A24h */ case   12:  		/* bl 125300 */
		/* 82237A24h case   12:*/		regs.LR = 0x82237A28; return 0x82256398;
		/* 82237A24h case   12:*/		return 0x82237A28;
	}
	return 0x82237A28;
} // Block from 822379F4h-82237A28h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82237A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237A28);
		  /* 82237A28h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82237A28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82237A28h case    0:*/		return 0x82237A2C;
		  /* 82237A2Ch */ case    1:  		/* addi R30, R30, 1 */
		/* 82237A2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82237A2Ch case    1:*/		return 0x82237A30;
		  /* 82237A30h */ case    2:  		/* addi R29, R29, 4 */
		/* 82237A30h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82237A30h case    2:*/		return 0x82237A34;
		  /* 82237A34h */ case    3:  		/* cmpw CR6, R30, R11 */
		/* 82237A34h case    3:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 82237A34h case    3:*/		return 0x82237A38;
		  /* 82237A38h */ case    4:  		/* bc 4, CR6_GT, -44 */
		/* 82237A38h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82237A0C;  }
		/* 82237A38h case    4:*/		return 0x82237A3C;
	}
	return 0x82237A3C;
} // Block from 82237A28h-82237A3Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82237A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237A3C);
		  /* 82237A3Ch */ case    0:  		/* lwz R11, <#[R21 + 4]> */
		/* 82237A3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 82237A3Ch case    0:*/		return 0x82237A40;
		  /* 82237A40h */ case    1:  		/* addi R28, R28, 1 */
		/* 82237A40h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82237A40h case    1:*/		return 0x82237A44;
		  /* 82237A44h */ case    2:  		/* addi R27, R27, 4 */
		/* 82237A44h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 82237A44h case    2:*/		return 0x82237A48;
		  /* 82237A48h */ case    3:  		/* cmplw CR6, R28, R11 */
		/* 82237A48h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82237A48h case    3:*/		return 0x82237A4C;
		  /* 82237A4Ch */ case    4:  		/* bc 12, CR6_LT, -112 */
		/* 82237A4Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x822379DC;  }
		/* 82237A4Ch case    4:*/		return 0x82237A50;
	}
	return 0x82237A50;
} // Block from 82237A3Ch-82237A50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82237A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237A50);
		  /* 82237A50h */ case    0:  		/* addi R1, R1, 192 */
		/* 82237A50h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82237A50h case    0:*/		return 0x82237A54;
		  /* 82237A54h */ case    1:  		/* b -1730504 */
		/* 82237A54h case    1:*/		return 0x8209128C;
		/* 82237A54h case    1:*/		return 0x82237A58;
	}
	return 0x82237A58;
} // Block from 82237A50h-82237A58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82237A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237A58);
		  /* 82237A58h */ case    0:  		/* mfspr R12, LR */
		/* 82237A58h case    0:*/		regs.R12 = regs.LR;
		/* 82237A58h case    0:*/		return 0x82237A5C;
		  /* 82237A5Ch */ case    1:  		/* bl -1730588 */
		/* 82237A5Ch case    1:*/		regs.LR = 0x82237A60; return 0x82091240;
		/* 82237A5Ch case    1:*/		return 0x82237A60;
		  /* 82237A60h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82237A60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82237A60h case    2:*/		return 0x82237A64;
		  /* 82237A64h */ case    3:  		/* mr R31, R3 */
		/* 82237A64h case    3:*/		regs.R31 = regs.R3;
		/* 82237A64h case    3:*/		return 0x82237A68;
		  /* 82237A68h */ case    4:  		/* addi R6, R1, 88 */
		/* 82237A68h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 82237A68h case    4:*/		return 0x82237A6C;
		  /* 82237A6Ch */ case    5:  		/* li R5, 0 */
		/* 82237A6Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82237A6Ch case    5:*/		return 0x82237A70;
		  /* 82237A70h */ case    6:  		/* li R4, 32 */
		/* 82237A70h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 82237A70h case    6:*/		return 0x82237A74;
		  /* 82237A74h */ case    7:  		/* addi R3, R3, 184 */
		/* 82237A74h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0xB8);
		/* 82237A74h case    7:*/		return 0x82237A78;
		  /* 82237A78h */ case    8:  		/* bl 108512 */
		/* 82237A78h case    8:*/		regs.LR = 0x82237A7C; return 0x82252258;
		/* 82237A78h case    8:*/		return 0x82237A7C;
		  /* 82237A7Ch */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82237A7Ch case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82237A7Ch case    9:*/		return 0x82237A80;
		  /* 82237A80h */ case   10:  		/* bc 12, CR0_EQ, 740 */
		/* 82237A80h case   10:*/		if ( regs.CR[0].eq ) { return 0x82237D64;  }
		/* 82237A80h case   10:*/		return 0x82237A84;
		  /* 82237A84h */ case   11:  		/* lwz R3, <#[R31 + 168]> */
		/* 82237A84h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A8) );
		/* 82237A84h case   11:*/		return 0x82237A88;
		  /* 82237A88h */ case   12:  		/* bl 137776 */
		/* 82237A88h case   12:*/		regs.LR = 0x82237A8C; return 0x822594B8;
		/* 82237A88h case   12:*/		return 0x82237A8C;
		  /* 82237A8Ch */ case   13:  		/* lis R11, -32253 */
		/* 82237A8Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82237A8Ch case   13:*/		return 0x82237A90;
		  /* 82237A90h */ case   14:  		/* lis R10, -32252 */
		/* 82237A90h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82237A90h case   14:*/		return 0x82237A94;
		  /* 82237A94h */ case   15:  		/* cmpwi CR6, R3, 1 */
		/* 82237A94h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82237A94h case   15:*/		return 0x82237A98;
		  /* 82237A98h */ case   16:  		/* addi R24, R11, 27460 */
		/* 82237A98h case   16:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x6B44);
		/* 82237A98h case   16:*/		return 0x82237A9C;
		  /* 82237A9Ch */ case   17:  		/* addi R23, R10, 8520 */
		/* 82237A9Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x2148);
		/* 82237A9Ch case   17:*/		return 0x82237AA0;
		  /* 82237AA0h */ case   18:  		/* bc 12, CR6_EQ, 32 */
		/* 82237AA0h case   18:*/		if ( regs.CR[6].eq ) { return 0x82237AC0;  }
		/* 82237AA0h case   18:*/		return 0x82237AA4;
		  /* 82237AA4h */ case   19:  		/* lis R11, -32252 */
		/* 82237AA4h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82237AA4h case   19:*/		return 0x82237AA8;
		  /* 82237AA8h */ case   20:  		/* mr R6, R23 */
		/* 82237AA8h case   20:*/		regs.R6 = regs.R23;
		/* 82237AA8h case   20:*/		return 0x82237AAC;
		  /* 82237AACh */ case   21:  		/* addi R5, R11, 9004 */
		/* 82237AACh case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x232C);
		/* 82237AACh case   21:*/		return 0x82237AB0;
		  /* 82237AB0h */ case   22:  		/* mr R4, R24 */
		/* 82237AB0h case   22:*/		regs.R4 = regs.R24;
		/* 82237AB0h case   22:*/		return 0x82237AB4;
		  /* 82237AB4h */ case   23:  		/* li R7, 2104 */
		/* 82237AB4h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x838);
		/* 82237AB4h case   23:*/		return 0x82237AB8;
		  /* 82237AB8h */ case   24:  		/* li R3, 0 */
		/* 82237AB8h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237AB8h case   24:*/		return 0x82237ABC;
		  /* 82237ABCh */ case   25:  		/* bl -917172 */
		/* 82237ABCh case   25:*/		regs.LR = 0x82237AC0; return 0x82157C08;
		/* 82237ABCh case   25:*/		return 0x82237AC0;
	}
	return 0x82237AC0;
} // Block from 82237A58h-82237AC0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82237AC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237AC0);
		  /* 82237AC0h */ case    0:  		/* lwz R9, <#[R31 + 168]> */
		/* 82237AC0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000000A8) );
		/* 82237AC0h case    0:*/		return 0x82237AC4;
		  /* 82237AC4h */ case    1:  		/* li R27, 0 */
		/* 82237AC4h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82237AC4h case    1:*/		return 0x82237AC8;
		  /* 82237AC8h */ case    2:  		/* lwz R26, <#[R1 + 88]> */
		/* 82237AC8h case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000058) );
		/* 82237AC8h case    2:*/		return 0x82237ACC;
		  /* 82237ACCh */ case    3:  		/* li R8, 1 */
		/* 82237ACCh case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82237ACCh case    3:*/		return 0x82237AD0;
		  /* 82237AD0h */ case    4:  		/* mr R10, R27 */
		/* 82237AD0h case    4:*/		regs.R10 = regs.R27;
		/* 82237AD0h case    4:*/		return 0x82237AD4;
		  /* 82237AD4h */ case    5:  		/* mr R11, R27 */
		/* 82237AD4h case    5:*/		regs.R11 = regs.R27;
		/* 82237AD4h case    5:*/		return 0x82237AD8;
		  /* 82237AD8h */ case    6:  		/* lwz R9, <#[R9 + 60]> */
		/* 82237AD8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000003C) );
		/* 82237AD8h case    6:*/		return 0x82237ADC;
		  /* 82237ADCh */ case    7:  		/* lwz R6, <#[R9 + 4]> */
		/* 82237ADCh case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000004) );
		/* 82237ADCh case    7:*/		return 0x82237AE0;
		  /* 82237AE0h */ case    8:  		/* cmplw CR6, R8, R6 */
		/* 82237AE0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R6);
		/* 82237AE0h case    8:*/		return 0x82237AE4;
		  /* 82237AE4h */ case    9:  		/* bc 4, CR6_GT, 12 */
		/* 82237AE4h case    9:*/		if ( !regs.CR[6].gt ) { return 0x82237AF0;  }
		/* 82237AE4h case    9:*/		return 0x82237AE8;
		  /* 82237AE8h */ case   10:  		/* mr R7, R27 */
		/* 82237AE8h case   10:*/		regs.R7 = regs.R27;
		/* 82237AE8h case   10:*/		return 0x82237AEC;
		  /* 82237AECh */ case   11:  		/* b 16 */
		/* 82237AECh case   11:*/		return 0x82237AFC;
		/* 82237AECh case   11:*/		return 0x82237AF0;
	}
	return 0x82237AF0;
} // Block from 82237AC0h-82237AF0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82237AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237AF0);
		  /* 82237AF0h */ case    0:  		/* lwz R10, <#[R9 + 8]> */
		/* 82237AF0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 82237AF0h case    0:*/		return 0x82237AF4;
		  /* 82237AF4h */ case    1:  		/* li R7, 1 */
		/* 82237AF4h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82237AF4h case    1:*/		return 0x82237AF8;
		  /* 82237AF8h */ case    2:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82237AF8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82237AF8h case    2:*/		return 0x82237AFC;
	}
	return 0x82237AFC;
} // Block from 82237AF0h-82237AFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82237AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237AFC);
		  /* 82237AFCh */ case    0:  		/* rlwinm. R7, R7, 0, 24, 31 */
		/* 82237AFCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R7,regs.R7);
		/* 82237AFCh case    0:*/		return 0x82237B00;
		  /* 82237B00h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82237B00h case    1:*/		if ( regs.CR[0].eq ) { return 0x82237B14;  }
		/* 82237B00h case    1:*/		return 0x82237B04;
		  /* 82237B04h */ case    2:  		/* mr R26, R10 */
		/* 82237B04h case    2:*/		regs.R26 = regs.R10;
		/* 82237B04h case    2:*/		return 0x82237B08;
		  /* 82237B08h */ case    3:  		/* addi R8, R8, 1 */
		/* 82237B08h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82237B08h case    3:*/		return 0x82237B0C;
		  /* 82237B0Ch */ case    4:  		/* addi R11, R11, 4 */
		/* 82237B0Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82237B0Ch case    4:*/		return 0x82237B10;
		  /* 82237B10h */ case    5:  		/* b -48 */
		/* 82237B10h case    5:*/		return 0x82237AE0;
		/* 82237B10h case    5:*/		return 0x82237B14;
	}
	return 0x82237B14;
} // Block from 82237AFCh-82237B14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82237B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237B14);
		  /* 82237B14h */ case    0:  		/* lwz R11, <#[R31 + 116]> */
		/* 82237B14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000074) );
		/* 82237B14h case    0:*/		return 0x82237B18;
		  /* 82237B18h */ case    1:  		/* lis R10, -32222 */
		/* 82237B18h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8222);
		/* 82237B18h case    1:*/		return 0x82237B1C;
		  /* 82237B1Ch */ case    2:  		/* addi R5, R1, 84 */
		/* 82237B1Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82237B1Ch case    2:*/		return 0x82237B20;
		  /* 82237B20h */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 82237B20h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82237B20h case    3:*/		return 0x82237B24;
		  /* 82237B24h */ case    4:  		/* addi R6, R10, -12392 */
		/* 82237B24h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFCF98);
		/* 82237B24h case    4:*/		return 0x82237B28;
		  /* 82237B28h */ case    5:  		/* lwz R7, <#[R31 + 12]> */
		/* 82237B28h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237B28h case    5:*/		return 0x82237B2C;
		  /* 82237B2Ch */ case    6:  		/* li R4, 0 */
		/* 82237B2Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237B2Ch case    6:*/		return 0x82237B30;
		  /* 82237B30h */ case    7:  		/* lwz R28, <#[R11 + 32]> */
		/* 82237B30h case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000020) );
		/* 82237B30h case    7:*/		return 0x82237B34;
		  /* 82237B34h */ case    8:  		/* bl -16268 */
		/* 82237B34h case    8:*/		regs.LR = 0x82237B38; return 0x82233BA8;
		/* 82237B34h case    8:*/		return 0x82237B38;
		  /* 82237B38h */ case    9:  		/* lis R11, -32222 */
		/* 82237B38h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82237B38h case    9:*/		return 0x82237B3C;
		  /* 82237B3Ch */ case   10:  		/* lwz R7, <#[R31 + 12]> */
		/* 82237B3Ch case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237B3Ch case   10:*/		return 0x82237B40;
		  /* 82237B40h */ case   11:  		/* addi R5, R1, 80 */
		/* 82237B40h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82237B40h case   11:*/		return 0x82237B44;
		  /* 82237B44h */ case   12:  		/* lwz R3, <#[R31 + 16]> */
		/* 82237B44h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82237B44h case   12:*/		return 0x82237B48;
		  /* 82237B48h */ case   13:  		/* addi R6, R11, -12392 */
		/* 82237B48h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82237B48h case   13:*/		return 0x82237B4C;
		  /* 82237B4Ch */ case   14:  		/* li R4, 0 */
		/* 82237B4Ch case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237B4Ch case   14:*/		return 0x82237B50;
		  /* 82237B50h */ case   15:  		/* bl -16456 */
		/* 82237B50h case   15:*/		regs.LR = 0x82237B54; return 0x82233B08;
		/* 82237B50h case   15:*/		return 0x82237B54;
		  /* 82237B54h */ case   16:  		/* li R3, 64 */
		/* 82237B54h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x40);
		/* 82237B54h case   16:*/		return 0x82237B58;
		  /* 82237B58h */ case   17:  		/* lwz R4, <#[R31 + 12]> */
		/* 82237B58h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237B58h case   17:*/		return 0x82237B5C;
		  /* 82237B5Ch */ case   18:  		/* bl 133132 */
		/* 82237B5Ch case   18:*/		regs.LR = 0x82237B60; return 0x82258368;
		/* 82237B5Ch case   18:*/		return 0x82237B60;
		  /* 82237B60h */ case   19:  		/* li R29, 32 */
		/* 82237B60h case   19:*/		cpu::op::li<0>(regs,&regs.R29,0x20);
		/* 82237B60h case   19:*/		return 0x82237B64;
		  /* 82237B64h */ case   20:  		/* stw R27, <#[R3 + 56]> */
		/* 82237B64h case   20:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000038) );
		/* 82237B64h case   20:*/		return 0x82237B68;
		  /* 82237B68h */ case   21:  		/* mr R5, R28 */
		/* 82237B68h case   21:*/		regs.R5 = regs.R28;
		/* 82237B68h case   21:*/		return 0x82237B6C;
		  /* 82237B6Ch */ case   22:  		/* stw R29, <#[R3 + 80]> */
		/* 82237B6Ch case   22:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000050) );
		/* 82237B6Ch case   22:*/		return 0x82237B70;
		  /* 82237B70h */ case   23:  		/* li R4, 1 */
		/* 82237B70h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82237B70h case   23:*/		return 0x82237B74;
		  /* 82237B74h */ case   24:  		/* mr R25, R3 */
		/* 82237B74h case   24:*/		regs.R25 = regs.R3;
		/* 82237B74h case   24:*/		return 0x82237B78;
		  /* 82237B78h */ case   25:  		/* bl 124960 */
		/* 82237B78h case   25:*/		regs.LR = 0x82237B7C; return 0x82256398;
		/* 82237B78h case   25:*/		return 0x82237B7C;
		  /* 82237B7Ch */ case   26:  		/* lis R11, -32252 */
		/* 82237B7Ch case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82237B7Ch case   26:*/		return 0x82237B80;
		  /* 82237B80h */ case   27:  		/* mr R4, R25 */
		/* 82237B80h case   27:*/		regs.R4 = regs.R25;
		/* 82237B80h case   27:*/		return 0x82237B84;
		  /* 82237B84h */ case   28:  		/* addi R30, R11, 8472 */
		/* 82237B84h case   28:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x2118);
		/* 82237B84h case   28:*/		return 0x82237B88;
		  /* 82237B88h */ case   29:  		/* mr R3, R31 */
		/* 82237B88h case   29:*/		regs.R3 = regs.R31;
		/* 82237B88h case   29:*/		return 0x82237B8C;
		  /* 82237B8Ch */ case   30:  		/* lwz R11, <#[R30 + 16]> */
		/* 82237B8Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82237B8Ch case   30:*/		return 0x82237B90;
		  /* 82237B90h */ case   31:  		/* stw R11, <#[R25 + 132]> */
		/* 82237B90h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000084) );
		/* 82237B90h case   31:*/		return 0x82237B94;
		  /* 82237B94h */ case   32:  		/* bl -5612 */
		/* 82237B94h case   32:*/		regs.LR = 0x82237B98; return 0x822365A8;
		/* 82237B94h case   32:*/		return 0x82237B98;
		  /* 82237B98h */ case   33:  		/* mr R4, R25 */
		/* 82237B98h case   33:*/		regs.R4 = regs.R25;
		/* 82237B98h case   33:*/		return 0x82237B9C;
		  /* 82237B9Ch */ case   34:  		/* mr R3, R26 */
		/* 82237B9Ch case   34:*/		regs.R3 = regs.R26;
		/* 82237B9Ch case   34:*/		return 0x82237BA0;
		  /* 82237BA0h */ case   35:  		/* bl 136080 */
		/* 82237BA0h case   35:*/		regs.LR = 0x82237BA4; return 0x82258F30;
		/* 82237BA0h case   35:*/		return 0x82237BA4;
		  /* 82237BA4h */ case   36:  		/* mr R3, R25 */
		/* 82237BA4h case   36:*/		regs.R3 = regs.R25;
		/* 82237BA4h case   36:*/		return 0x82237BA8;
		  /* 82237BA8h */ case   37:  		/* bl 123928 */
		/* 82237BA8h case   37:*/		regs.LR = 0x82237BAC; return 0x82255FC0;
		/* 82237BA8h case   37:*/		return 0x82237BAC;
		  /* 82237BACh */ case   38:  		/* lis R11, -32252 */
		/* 82237BACh case   38:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82237BACh case   38:*/		return 0x82237BB0;
		  /* 82237BB0h */ case   39:  		/* rlwinm. R10, R3, 0, 24, 31 */
		/* 82237BB0h case   39:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R3);
		/* 82237BB0h case   39:*/		return 0x82237BB4;
		  /* 82237BB4h */ case   40:  		/* addi R25, R11, 8972 */
		/* 82237BB4h case   40:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x230C);
		/* 82237BB4h case   40:*/		return 0x82237BB8;
		  /* 82237BB8h */ case   41:  		/* bc 4, CR0_EQ, 28 */
		/* 82237BB8h case   41:*/		if ( !regs.CR[0].eq ) { return 0x82237BD4;  }
		/* 82237BB8h case   41:*/		return 0x82237BBC;
		  /* 82237BBCh */ case   42:  		/* mr R6, R23 */
		/* 82237BBCh case   42:*/		regs.R6 = regs.R23;
		/* 82237BBCh case   42:*/		return 0x82237BC0;
		  /* 82237BC0h */ case   43:  		/* mr R5, R25 */
		/* 82237BC0h case   43:*/		regs.R5 = regs.R25;
		/* 82237BC0h case   43:*/		return 0x82237BC4;
		  /* 82237BC4h */ case   44:  		/* mr R4, R24 */
		/* 82237BC4h case   44:*/		regs.R4 = regs.R24;
		/* 82237BC4h case   44:*/		return 0x82237BC8;
		  /* 82237BC8h */ case   45:  		/* li R7, 2130 */
		/* 82237BC8h case   45:*/		cpu::op::li<0>(regs,&regs.R7,0x852);
		/* 82237BC8h case   45:*/		return 0x82237BCC;
		  /* 82237BCCh */ case   46:  		/* li R3, 0 */
		/* 82237BCCh case   46:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237BCCh case   46:*/		return 0x82237BD0;
		  /* 82237BD0h */ case   47:  		/* bl -917448 */
		/* 82237BD0h case   47:*/		regs.LR = 0x82237BD4; return 0x82157C08;
		/* 82237BD0h case   47:*/		return 0x82237BD4;
	}
	return 0x82237BD4;
} // Block from 82237B14h-82237BD4h (48 instructions)

//////////////////////////////////////////////////////
// Block at 82237BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237BD4);
		  /* 82237BD4h */ case    0:  		/* li R3, 19 */
		/* 82237BD4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 82237BD4h case    0:*/		return 0x82237BD8;
		  /* 82237BD8h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 82237BD8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237BD8h case    1:*/		return 0x82237BDC;
		  /* 82237BDCh */ case    2:  		/* bl 133108 */
		/* 82237BDCh case    2:*/		regs.LR = 0x82237BE0; return 0x822583D0;
		/* 82237BDCh case    2:*/		return 0x82237BE0;
		  /* 82237BE0h */ case    3:  		/* stw R27, <#[R3 + 56]> */
		/* 82237BE0h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000038) );
		/* 82237BE0h case    3:*/		return 0x82237BE4;
		  /* 82237BE4h */ case    4:  		/* stw R29, <#[R3 + 80]> */
		/* 82237BE4h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000050) );
		/* 82237BE4h case    4:*/		return 0x82237BE8;
		  /* 82237BE8h */ case    5:  		/* li R5, 2 */
		/* 82237BE8h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82237BE8h case    5:*/		return 0x82237BEC;
		  /* 82237BECh */ case    6:  		/* stw R27, <#[R3 + 60]> */
		/* 82237BECh case    6:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x0000003C) );
		/* 82237BECh case    6:*/		return 0x82237BF0;
		  /* 82237BF0h */ case    7:  		/* mr R4, R31 */
		/* 82237BF0h case    7:*/		regs.R4 = regs.R31;
		/* 82237BF0h case    7:*/		return 0x82237BF4;
		  /* 82237BF4h */ case    8:  		/* stw R29, <#[R3 + 84]> */
		/* 82237BF4h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000054) );
		/* 82237BF4h case    8:*/		return 0x82237BF8;
		  /* 82237BF8h */ case    9:  		/* lfs FR4, <#[R1 + 80]> */
		/* 82237BF8h case    9:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000050) );
		/* 82237BF8h case    9:*/		return 0x82237BFC;
		  /* 82237BFCh */ case   10:  		/* mr R22, R3 */
		/* 82237BFCh case   10:*/		regs.R22 = regs.R3;
		/* 82237BFCh case   10:*/		return 0x82237C00;
		  /* 82237C00h */ case   11:  		/* fmr FR3, FR4 */
		/* 82237C00h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 82237C00h case   11:*/		return 0x82237C04;
		  /* 82237C04h */ case   12:  		/* fmr FR2, FR4 */
		/* 82237C04h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 82237C04h case   12:*/		return 0x82237C08;
		  /* 82237C08h */ case   13:  		/* fmr FR1, FR4 */
		/* 82237C08h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 82237C08h case   13:*/		return 0x82237C0C;
		  /* 82237C0Ch */ case   14:  		/* bl 127756 */
		/* 82237C0Ch case   14:*/		regs.LR = 0x82237C10; return 0x82256F18;
		/* 82237C0Ch case   14:*/		return 0x82237C10;
		  /* 82237C10h */ case   15:  		/* mr R4, R22 */
		/* 82237C10h case   15:*/		regs.R4 = regs.R22;
		/* 82237C10h case   15:*/		return 0x82237C14;
		  /* 82237C14h */ case   16:  		/* mr R3, R31 */
		/* 82237C14h case   16:*/		regs.R3 = regs.R31;
		/* 82237C14h case   16:*/		return 0x82237C18;
		  /* 82237C18h */ case   17:  		/* bl -5744 */
		/* 82237C18h case   17:*/		regs.LR = 0x82237C1C; return 0x822365A8;
		/* 82237C18h case   17:*/		return 0x82237C1C;
		  /* 82237C1Ch */ case   18:  		/* mr R4, R22 */
		/* 82237C1Ch case   18:*/		regs.R4 = regs.R22;
		/* 82237C1Ch case   18:*/		return 0x82237C20;
		  /* 82237C20h */ case   19:  		/* mr R3, R26 */
		/* 82237C20h case   19:*/		regs.R3 = regs.R26;
		/* 82237C20h case   19:*/		return 0x82237C24;
		  /* 82237C24h */ case   20:  		/* bl 135948 */
		/* 82237C24h case   20:*/		regs.LR = 0x82237C28; return 0x82258F30;
		/* 82237C24h case   20:*/		return 0x82237C28;
		  /* 82237C28h */ case   21:  		/* mr R3, R22 */
		/* 82237C28h case   21:*/		regs.R3 = regs.R22;
		/* 82237C28h case   21:*/		return 0x82237C2C;
		  /* 82237C2Ch */ case   22:  		/* bl 123796 */
		/* 82237C2Ch case   22:*/		regs.LR = 0x82237C30; return 0x82255FC0;
		/* 82237C2Ch case   22:*/		return 0x82237C30;
		  /* 82237C30h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82237C30h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82237C30h case   23:*/		return 0x82237C34;
		  /* 82237C34h */ case   24:  		/* bc 4, CR0_EQ, 28 */
		/* 82237C34h case   24:*/		if ( !regs.CR[0].eq ) { return 0x82237C50;  }
		/* 82237C34h case   24:*/		return 0x82237C38;
		  /* 82237C38h */ case   25:  		/* mr R6, R23 */
		/* 82237C38h case   25:*/		regs.R6 = regs.R23;
		/* 82237C38h case   25:*/		return 0x82237C3C;
		  /* 82237C3Ch */ case   26:  		/* mr R5, R25 */
		/* 82237C3Ch case   26:*/		regs.R5 = regs.R25;
		/* 82237C3Ch case   26:*/		return 0x82237C40;
		  /* 82237C40h */ case   27:  		/* mr R4, R24 */
		/* 82237C40h case   27:*/		regs.R4 = regs.R24;
		/* 82237C40h case   27:*/		return 0x82237C44;
		  /* 82237C44h */ case   28:  		/* li R7, 2139 */
		/* 82237C44h case   28:*/		cpu::op::li<0>(regs,&regs.R7,0x85B);
		/* 82237C44h case   28:*/		return 0x82237C48;
		  /* 82237C48h */ case   29:  		/* li R3, 0 */
		/* 82237C48h case   29:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237C48h case   29:*/		return 0x82237C4C;
		  /* 82237C4Ch */ case   30:  		/* bl -917572 */
		/* 82237C4Ch case   30:*/		regs.LR = 0x82237C50; return 0x82157C08;
		/* 82237C4Ch case   30:*/		return 0x82237C50;
	}
	return 0x82237C50;
} // Block from 82237BD4h-82237C50h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82237C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237C50);
		  /* 82237C50h */ case    0:  		/* li R3, 20 */
		/* 82237C50h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82237C50h case    0:*/		return 0x82237C54;
		  /* 82237C54h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 82237C54h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237C54h case    1:*/		return 0x82237C58;
		  /* 82237C58h */ case    2:  		/* bl 133096 */
		/* 82237C58h case    2:*/		regs.LR = 0x82237C5C; return 0x82258440;
		/* 82237C58h case    2:*/		return 0x82237C5C;
		  /* 82237C5Ch */ case    3:  		/* lwz R11, <#[R30 - 4]> */
		/* 82237C5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 82237C5Ch case    3:*/		return 0x82237C60;
		  /* 82237C60h */ case    4:  		/* stw R27, <#[R3 + 56]> */
		/* 82237C60h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000038) );
		/* 82237C60h case    4:*/		return 0x82237C64;
		  /* 82237C64h */ case    5:  		/* mr R5, R28 */
		/* 82237C64h case    5:*/		regs.R5 = regs.R28;
		/* 82237C64h case    5:*/		return 0x82237C68;
		  /* 82237C68h */ case    6:  		/* stw R29, <#[R3 + 80]> */
		/* 82237C68h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000050) );
		/* 82237C68h case    6:*/		return 0x82237C6C;
		  /* 82237C6Ch */ case    7:  		/* li R4, 2 */
		/* 82237C6Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82237C6Ch case    7:*/		return 0x82237C70;
		  /* 82237C70h */ case    8:  		/* stw R27, <#[R3 + 60]> */
		/* 82237C70h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x0000003C) );
		/* 82237C70h case    8:*/		return 0x82237C74;
		  /* 82237C74h */ case    9:  		/* mr R22, R3 */
		/* 82237C74h case    9:*/		regs.R22 = regs.R3;
		/* 82237C74h case    9:*/		return 0x82237C78;
		  /* 82237C78h */ case   10:  		/* stw R29, <#[R3 + 84]> */
		/* 82237C78h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000054) );
		/* 82237C78h case   10:*/		return 0x82237C7C;
		  /* 82237C7Ch */ case   11:  		/* stw R11, <#[R3 + 128]> */
		/* 82237C7Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 82237C7Ch case   11:*/		return 0x82237C80;
		  /* 82237C80h */ case   12:  		/* bl 124696 */
		/* 82237C80h case   12:*/		regs.LR = 0x82237C84; return 0x82256398;
		/* 82237C80h case   12:*/		return 0x82237C84;
		  /* 82237C84h */ case   13:  		/* lwz R11, <#[R30 + 12]> */
		/* 82237C84h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82237C84h case   13:*/		return 0x82237C88;
		  /* 82237C88h */ case   14:  		/* mr R3, R22 */
		/* 82237C88h case   14:*/		regs.R3 = regs.R22;
		/* 82237C88h case   14:*/		return 0x82237C8C;
		  /* 82237C8Ch */ case   15:  		/* li R5, 3 */
		/* 82237C8Ch case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82237C8Ch case   15:*/		return 0x82237C90;
		  /* 82237C90h */ case   16:  		/* mr R4, R31 */
		/* 82237C90h case   16:*/		regs.R4 = regs.R31;
		/* 82237C90h case   16:*/		return 0x82237C94;
		  /* 82237C94h */ case   17:  		/* stw R11, <#[R22 + 136]> */
		/* 82237C94h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000088) );
		/* 82237C94h case   17:*/		return 0x82237C98;
		  /* 82237C98h */ case   18:  		/* lfs FR4, <#[R1 + 84]> */
		/* 82237C98h case   18:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000054) );
		/* 82237C98h case   18:*/		return 0x82237C9C;
		  /* 82237C9Ch */ case   19:  		/* fmr FR3, FR4 */
		/* 82237C9Ch case   19:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 82237C9Ch case   19:*/		return 0x82237CA0;
		  /* 82237CA0h */ case   20:  		/* fmr FR2, FR4 */
		/* 82237CA0h case   20:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 82237CA0h case   20:*/		return 0x82237CA4;
		  /* 82237CA4h */ case   21:  		/* fmr FR1, FR4 */
		/* 82237CA4h case   21:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 82237CA4h case   21:*/		return 0x82237CA8;
		  /* 82237CA8h */ case   22:  		/* bl 127600 */
		/* 82237CA8h case   22:*/		regs.LR = 0x82237CAC; return 0x82256F18;
		/* 82237CA8h case   22:*/		return 0x82237CAC;
		  /* 82237CACh */ case   23:  		/* mr R4, R22 */
		/* 82237CACh case   23:*/		regs.R4 = regs.R22;
		/* 82237CACh case   23:*/		return 0x82237CB0;
		  /* 82237CB0h */ case   24:  		/* mr R3, R31 */
		/* 82237CB0h case   24:*/		regs.R3 = regs.R31;
		/* 82237CB0h case   24:*/		return 0x82237CB4;
		  /* 82237CB4h */ case   25:  		/* bl -5900 */
		/* 82237CB4h case   25:*/		regs.LR = 0x82237CB8; return 0x822365A8;
		/* 82237CB4h case   25:*/		return 0x82237CB8;
		  /* 82237CB8h */ case   26:  		/* mr R4, R22 */
		/* 82237CB8h case   26:*/		regs.R4 = regs.R22;
		/* 82237CB8h case   26:*/		return 0x82237CBC;
		  /* 82237CBCh */ case   27:  		/* mr R3, R26 */
		/* 82237CBCh case   27:*/		regs.R3 = regs.R26;
		/* 82237CBCh case   27:*/		return 0x82237CC0;
		  /* 82237CC0h */ case   28:  		/* bl 135792 */
		/* 82237CC0h case   28:*/		regs.LR = 0x82237CC4; return 0x82258F30;
		/* 82237CC0h case   28:*/		return 0x82237CC4;
		  /* 82237CC4h */ case   29:  		/* mr R3, R22 */
		/* 82237CC4h case   29:*/		regs.R3 = regs.R22;
		/* 82237CC4h case   29:*/		return 0x82237CC8;
		  /* 82237CC8h */ case   30:  		/* bl 123640 */
		/* 82237CC8h case   30:*/		regs.LR = 0x82237CCC; return 0x82255FC0;
		/* 82237CC8h case   30:*/		return 0x82237CCC;
		  /* 82237CCCh */ case   31:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82237CCCh case   31:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82237CCCh case   31:*/		return 0x82237CD0;
		  /* 82237CD0h */ case   32:  		/* bc 4, CR0_EQ, 28 */
		/* 82237CD0h case   32:*/		if ( !regs.CR[0].eq ) { return 0x82237CEC;  }
		/* 82237CD0h case   32:*/		return 0x82237CD4;
		  /* 82237CD4h */ case   33:  		/* mr R6, R23 */
		/* 82237CD4h case   33:*/		regs.R6 = regs.R23;
		/* 82237CD4h case   33:*/		return 0x82237CD8;
		  /* 82237CD8h */ case   34:  		/* mr R5, R25 */
		/* 82237CD8h case   34:*/		regs.R5 = regs.R25;
		/* 82237CD8h case   34:*/		return 0x82237CDC;
		  /* 82237CDCh */ case   35:  		/* mr R4, R24 */
		/* 82237CDCh case   35:*/		regs.R4 = regs.R24;
		/* 82237CDCh case   35:*/		return 0x82237CE0;
		  /* 82237CE0h */ case   36:  		/* li R7, 2151 */
		/* 82237CE0h case   36:*/		cpu::op::li<0>(regs,&regs.R7,0x867);
		/* 82237CE0h case   36:*/		return 0x82237CE4;
		  /* 82237CE4h */ case   37:  		/* li R3, 0 */
		/* 82237CE4h case   37:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237CE4h case   37:*/		return 0x82237CE8;
		  /* 82237CE8h */ case   38:  		/* bl -917728 */
		/* 82237CE8h case   38:*/		regs.LR = 0x82237CEC; return 0x82157C08;
		/* 82237CE8h case   38:*/		return 0x82237CEC;
	}
	return 0x82237CEC;
} // Block from 82237C50h-82237CECh (39 instructions)

//////////////////////////////////////////////////////
// Block at 82237CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237CEC);
		  /* 82237CECh */ case    0:  		/* li R3, 49 */
		/* 82237CECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 82237CECh case    0:*/		return 0x82237CF0;
		  /* 82237CF0h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 82237CF0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237CF0h case    1:*/		return 0x82237CF4;
		  /* 82237CF4h */ case    2:  		/* bl 123452 */
		/* 82237CF4h case    2:*/		regs.LR = 0x82237CF8; return 0x82255F30;
		/* 82237CF4h case    2:*/		return 0x82237CF8;
		  /* 82237CF8h */ case    3:  		/* lwz R11, <#[R30]> */
		/* 82237CF8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82237CF8h case    3:*/		return 0x82237CFC;
		  /* 82237CFCh */ case    4:  		/* stw R27, <#[R3 + 56]> */
		/* 82237CFCh case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000038) );
		/* 82237CFCh case    4:*/		return 0x82237D00;
		  /* 82237D00h */ case    5:  		/* mr R5, R28 */
		/* 82237D00h case    5:*/		regs.R5 = regs.R28;
		/* 82237D00h case    5:*/		return 0x82237D04;
		  /* 82237D04h */ case    6:  		/* stw R29, <#[R3 + 80]> */
		/* 82237D04h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000050) );
		/* 82237D04h case    6:*/		return 0x82237D08;
		  /* 82237D08h */ case    7:  		/* li R4, 1 */
		/* 82237D08h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82237D08h case    7:*/		return 0x82237D0C;
		  /* 82237D0Ch */ case    8:  		/* mr R25, R3 */
		/* 82237D0Ch case    8:*/		regs.R25 = regs.R3;
		/* 82237D0Ch case    8:*/		return 0x82237D10;
		  /* 82237D10h */ case    9:  		/* stw R11, <#[R3 + 128]> */
		/* 82237D10h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 82237D10h case    9:*/		return 0x82237D14;
		  /* 82237D14h */ case   10:  		/* bl 124548 */
		/* 82237D14h case   10:*/		regs.LR = 0x82237D18; return 0x82256398;
		/* 82237D14h case   10:*/		return 0x82237D18;
		  /* 82237D18h */ case   11:  		/* lwz R11, <#[R30 + 16]> */
		/* 82237D18h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82237D18h case   11:*/		return 0x82237D1C;
		  /* 82237D1Ch */ case   12:  		/* mr R4, R25 */
		/* 82237D1Ch case   12:*/		regs.R4 = regs.R25;
		/* 82237D1Ch case   12:*/		return 0x82237D20;
		  /* 82237D20h */ case   13:  		/* mr R3, R31 */
		/* 82237D20h case   13:*/		regs.R3 = regs.R31;
		/* 82237D20h case   13:*/		return 0x82237D24;
		  /* 82237D24h */ case   14:  		/* stw R11, <#[R25 + 132]> */
		/* 82237D24h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000084) );
		/* 82237D24h case   14:*/		return 0x82237D28;
		  /* 82237D28h */ case   15:  		/* bl -6016 */
		/* 82237D28h case   15:*/		regs.LR = 0x82237D2C; return 0x822365A8;
		/* 82237D28h case   15:*/		return 0x82237D2C;
		  /* 82237D2Ch */ case   16:  		/* mr R4, R25 */
		/* 82237D2Ch case   16:*/		regs.R4 = regs.R25;
		/* 82237D2Ch case   16:*/		return 0x82237D30;
		  /* 82237D30h */ case   17:  		/* mr R3, R26 */
		/* 82237D30h case   17:*/		regs.R3 = regs.R26;
		/* 82237D30h case   17:*/		return 0x82237D34;
		  /* 82237D34h */ case   18:  		/* bl 135676 */
		/* 82237D34h case   18:*/		regs.LR = 0x82237D38; return 0x82258F30;
		/* 82237D34h case   18:*/		return 0x82237D38;
		  /* 82237D38h */ case   19:  		/* mr R3, R25 */
		/* 82237D38h case   19:*/		regs.R3 = regs.R25;
		/* 82237D38h case   19:*/		return 0x82237D3C;
		  /* 82237D3Ch */ case   20:  		/* bl 123524 */
		/* 82237D3Ch case   20:*/		regs.LR = 0x82237D40; return 0x82255FC0;
		/* 82237D3Ch case   20:*/		return 0x82237D40;
		  /* 82237D40h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82237D40h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82237D40h case   21:*/		return 0x82237D44;
		  /* 82237D44h */ case   22:  		/* bc 4, CR0_EQ, 32 */
		/* 82237D44h case   22:*/		if ( !regs.CR[0].eq ) { return 0x82237D64;  }
		/* 82237D44h case   22:*/		return 0x82237D48;
		  /* 82237D48h */ case   23:  		/* lis R11, -32252 */
		/* 82237D48h case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82237D48h case   23:*/		return 0x82237D4C;
		  /* 82237D4Ch */ case   24:  		/* mr R6, R23 */
		/* 82237D4Ch case   24:*/		regs.R6 = regs.R23;
		/* 82237D4Ch case   24:*/		return 0x82237D50;
		  /* 82237D50h */ case   25:  		/* addi R5, R11, 8912 */
		/* 82237D50h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x22D0);
		/* 82237D50h case   25:*/		return 0x82237D54;
		  /* 82237D54h */ case   26:  		/* mr R4, R24 */
		/* 82237D54h case   26:*/		regs.R4 = regs.R24;
		/* 82237D54h case   26:*/		return 0x82237D58;
		  /* 82237D58h */ case   27:  		/* li R7, 2161 */
		/* 82237D58h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x871);
		/* 82237D58h case   27:*/		return 0x82237D5C;
		  /* 82237D5Ch */ case   28:  		/* li R3, 0 */
		/* 82237D5Ch case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237D5Ch case   28:*/		return 0x82237D60;
		  /* 82237D60h */ case   29:  		/* bl -917848 */
		/* 82237D60h case   29:*/		regs.LR = 0x82237D64; return 0x82157C08;
		/* 82237D60h case   29:*/		return 0x82237D64;
	}
	return 0x82237D64;
} // Block from 82237CECh-82237D64h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82237D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237D64);
		  /* 82237D64h */ case    0:  		/* addi R1, R1, 192 */
		/* 82237D64h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82237D64h case    0:*/		return 0x82237D68;
		  /* 82237D68h */ case    1:  		/* b -1731288 */
		/* 82237D68h case    1:*/		return 0x82091290;
		/* 82237D68h case    1:*/		return 0x82237D6C;
		  /* 82237D6Ch */ case    2:  		/* nop */
		/* 82237D6Ch case    2:*/		cpu::op::nop();
		/* 82237D6Ch case    2:*/		return 0x82237D70;
	}
	return 0x82237D70;
} // Block from 82237D64h-82237D70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82237D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237D70);
		  /* 82237D70h */ case    0:  		/* mfspr R12, LR */
		/* 82237D70h case    0:*/		regs.R12 = regs.LR;
		/* 82237D70h case    0:*/		return 0x82237D74;
		  /* 82237D74h */ case    1:  		/* bl -1731360 */
		/* 82237D74h case    1:*/		regs.LR = 0x82237D78; return 0x82091254;
		/* 82237D74h case    1:*/		return 0x82237D78;
		  /* 82237D78h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82237D78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82237D78h case    2:*/		return 0x82237D7C;
		  /* 82237D7Ch */ case    3:  		/* lwz R31, <#[R3 + 12]> */
		/* 82237D7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x0000000C) );
		/* 82237D7Ch case    3:*/		return 0x82237D80;
		  /* 82237D80h */ case    4:  		/* mr R30, R3 */
		/* 82237D80h case    4:*/		regs.R30 = regs.R3;
		/* 82237D80h case    4:*/		return 0x82237D84;
		  /* 82237D84h */ case    5:  		/* lwz R3, <#[R31 + 1488]> */
		/* 82237D84h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005D0) );
		/* 82237D84h case    5:*/		return 0x82237D88;
		  /* 82237D88h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 82237D88h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82237D88h case    6:*/		return 0x82237D8C;
		  /* 82237D8Ch */ case    7:  		/* lwz R11, <#[R11 + 28]> */
		/* 82237D8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82237D8Ch case    7:*/		return 0x82237D90;
		  /* 82237D90h */ case    8:  		/* mtspr CTR, R11 */
		/* 82237D90h case    8:*/		regs.CTR = regs.R11;
		/* 82237D90h case    8:*/		return 0x82237D94;
		  /* 82237D94h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82237D94h case    9:*/		if ( 1 ) { regs.LR = 0x82237D98; return (uint32)regs.CTR; }
		/* 82237D94h case    9:*/		return 0x82237D98;
		  /* 82237D98h */ case   10:  		/* lis R11, -32222 */
		/* 82237D98h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82237D98h case   10:*/		return 0x82237D9C;
		  /* 82237D9Ch */ case   11:  		/* mr R5, R3 */
		/* 82237D9Ch case   11:*/		regs.R5 = regs.R3;
		/* 82237D9Ch case   11:*/		return 0x82237DA0;
		  /* 82237DA0h */ case   12:  		/* lwz R3, <#[R30 + 16]> */
		/* 82237DA0h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82237DA0h case   12:*/		return 0x82237DA4;
		  /* 82237DA4h */ case   13:  		/* li R4, 0 */
		/* 82237DA4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237DA4h case   13:*/		return 0x82237DA8;
		  /* 82237DA8h */ case   14:  		/* addi R6, R11, -12392 */
		/* 82237DA8h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82237DA8h case   14:*/		return 0x82237DAC;
		  /* 82237DACh */ case   15:  		/* mr R7, R31 */
		/* 82237DACh case   15:*/		regs.R7 = regs.R31;
		/* 82237DACh case   15:*/		return 0x82237DB0;
		  /* 82237DB0h */ case   16:  		/* bl -23440 */
		/* 82237DB0h case   16:*/		regs.LR = 0x82237DB4; return 0x82232220;
		/* 82237DB0h case   16:*/		return 0x82237DB4;
		  /* 82237DB4h */ case   17:  		/* cmpwi CR6, R3, 1 */
		/* 82237DB4h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82237DB4h case   17:*/		return 0x82237DB8;
		  /* 82237DB8h */ case   18:  		/* bc 4, CR6_EQ, 420 */
		/* 82237DB8h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82237F5C;  }
		/* 82237DB8h case   18:*/		return 0x82237DBC;
		  /* 82237DBCh */ case   19:  		/* lis R11, -32222 */
		/* 82237DBCh case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82237DBCh case   19:*/		return 0x82237DC0;
		  /* 82237DC0h */ case   20:  		/* lwz R6, <#[R30 + 12]> */
		/* 82237DC0h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x0000000C) );
		/* 82237DC0h case   20:*/		return 0x82237DC4;
		  /* 82237DC4h */ case   21:  		/* addi R4, R1, 80 */
		/* 82237DC4h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82237DC4h case   21:*/		return 0x82237DC8;
		  /* 82237DC8h */ case   22:  		/* lwz R3, <#[R30 + 16]> */
		/* 82237DC8h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82237DC8h case   22:*/		return 0x82237DCC;
		  /* 82237DCCh */ case   23:  		/* addi R5, R11, -12392 */
		/* 82237DCCh case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCF98);
		/* 82237DCCh case   23:*/		return 0x82237DD0;
		  /* 82237DD0h */ case   24:  		/* bl -21992 */
		/* 82237DD0h case   24:*/		regs.LR = 0x82237DD4; return 0x822327E8;
		/* 82237DD0h case   24:*/		return 0x82237DD4;
		  /* 82237DD4h */ case   25:  		/* lis R11, -32253 */
		/* 82237DD4h case   25:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82237DD4h case   25:*/		return 0x82237DD8;
		  /* 82237DD8h */ case   26:  		/* lis R10, -32252 */
		/* 82237DD8h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82237DD8h case   26:*/		return 0x82237DDC;
		  /* 82237DDCh */ case   27:  		/* cmpwi CR6, R3, 1 */
		/* 82237DDCh case   27:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82237DDCh case   27:*/		return 0x82237DE0;
		  /* 82237DE0h */ case   28:  		/* addi R28, R11, 27460 */
		/* 82237DE0h case   28:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 82237DE0h case   28:*/		return 0x82237DE4;
		  /* 82237DE4h */ case   29:  		/* addi R27, R10, 8520 */
		/* 82237DE4h case   29:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x2148);
		/* 82237DE4h case   29:*/		return 0x82237DE8;
		  /* 82237DE8h */ case   30:  		/* bc 12, CR6_EQ, 32 */
		/* 82237DE8h case   30:*/		if ( regs.CR[6].eq ) { return 0x82237E08;  }
		/* 82237DE8h case   30:*/		return 0x82237DEC;
		  /* 82237DECh */ case   31:  		/* lis R11, -32252 */
		/* 82237DECh case   31:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82237DECh case   31:*/		return 0x82237DF0;
		  /* 82237DF0h */ case   32:  		/* mr R6, R27 */
		/* 82237DF0h case   32:*/		regs.R6 = regs.R27;
		/* 82237DF0h case   32:*/		return 0x82237DF4;
		  /* 82237DF4h */ case   33:  		/* addi R5, R11, 9164 */
		/* 82237DF4h case   33:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x23CC);
		/* 82237DF4h case   33:*/		return 0x82237DF8;
		  /* 82237DF8h */ case   34:  		/* mr R4, R28 */
		/* 82237DF8h case   34:*/		regs.R4 = regs.R28;
		/* 82237DF8h case   34:*/		return 0x82237DFC;
		  /* 82237DFCh */ case   35:  		/* li R7, 2364 */
		/* 82237DFCh case   35:*/		cpu::op::li<0>(regs,&regs.R7,0x93C);
		/* 82237DFCh case   35:*/		return 0x82237E00;
		  /* 82237E00h */ case   36:  		/* li R3, 0 */
		/* 82237E00h case   36:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237E00h case   36:*/		return 0x82237E04;
		  /* 82237E04h */ case   37:  		/* bl -918012 */
		/* 82237E04h case   37:*/		regs.LR = 0x82237E08; return 0x82157C08;
		/* 82237E04h case   37:*/		return 0x82237E08;
	}
	return 0x82237E08;
} // Block from 82237D70h-82237E08h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82237E08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237E08);
		  /* 82237E08h */ case    0:  		/* lwz R4, <#[R1 + 80]> */
		/* 82237E08h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 82237E08h case    0:*/		return 0x82237E0C;
		  /* 82237E0Ch */ case    1:  		/* lis R11, -32252 */
		/* 82237E0Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82237E0Ch case    1:*/		return 0x82237E10;
		  /* 82237E10h */ case    2:  		/* li R9, 0 */
		/* 82237E10h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82237E10h case    2:*/		return 0x82237E14;
		  /* 82237E14h */ case    3:  		/* lwz R7, <#[R30 + 164]> */
		/* 82237E14h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x000000A4) );
		/* 82237E14h case    3:*/		return 0x82237E18;
		  /* 82237E18h */ case    4:  		/* rlwinm R10, R4, 0, 16, 31 */
		/* 82237E18h case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R4);
		/* 82237E18h case    4:*/		return 0x82237E1C;
		  /* 82237E1Ch */ case    5:  		/* li R8, 1 */
		/* 82237E1Ch case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82237E1Ch case    5:*/		return 0x82237E20;
		  /* 82237E20h */ case    6:  		/* oris R10, R10, 5 */
		/* 82237E20h case    6:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x5);
		/* 82237E20h case    6:*/		return 0x82237E24;
		  /* 82237E24h */ case    7:  		/* addi R5, R1, 84 */
		/* 82237E24h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82237E24h case    7:*/		return 0x82237E28;
		  /* 82237E28h */ case    8:  		/* lwz R6, <#[R11 + 8460]> */
		/* 82237E28h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000210C) );
		/* 82237E28h case    8:*/		return 0x82237E2C;
		  /* 82237E2Ch */ case    9:  		/* stw R10, <#[R1 + 84]> */
		/* 82237E2Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82237E2Ch case    9:*/		return 0x82237E30;
		  /* 82237E30h */ case   10:  		/* mr R3, R30 */
		/* 82237E30h case   10:*/		regs.R3 = regs.R30;
		/* 82237E30h case   10:*/		return 0x82237E34;
		  /* 82237E34h */ case   11:  		/* bl 149548 */
		/* 82237E34h case   11:*/		regs.LR = 0x82237E38; return 0x8225C660;
		/* 82237E34h case   11:*/		return 0x82237E38;
		  /* 82237E38h */ case   12:  		/* li R3, 49 */
		/* 82237E38h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 82237E38h case   12:*/		return 0x82237E3C;
		  /* 82237E3Ch */ case   13:  		/* lwz R4, <#[R30 + 12]> */
		/* 82237E3Ch case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 82237E3Ch case   13:*/		return 0x82237E40;
		  /* 82237E40h */ case   14:  		/* bl 123120 */
		/* 82237E40h case   14:*/		regs.LR = 0x82237E44; return 0x82255F30;
		/* 82237E40h case   14:*/		return 0x82237E44;
		  /* 82237E44h */ case   15:  		/* li R11, 6 */
		/* 82237E44h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 82237E44h case   15:*/		return 0x82237E48;
	}
	return 0x82237E48;
} // Block from 82237E08h-82237E48h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82237E48h
// Function '?InsertInstructionsForExportVertexFogFactor@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237E48);
		  /* 82237E48h */ case    0:  		/* li R29, 0 */
		/* 82237E48h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82237E48h case    0:*/		return 0x82237E4C;
		  /* 82237E4Ch */ case    1:  		/* stw R11, <#[R3 + 80]> */
		/* 82237E4Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 82237E4Ch case    1:*/		return 0x82237E50;
		  /* 82237E50h */ case    2:  		/* li R6, 1 */
		/* 82237E50h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82237E50h case    2:*/		return 0x82237E54;
		  /* 82237E54h */ case    3:  		/* stw R29, <#[R3 + 56]> */
		/* 82237E54h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000038) );
		/* 82237E54h case    3:*/		return 0x82237E58;
		  /* 82237E58h */ case    4:  		/* li R5, 0 */
		/* 82237E58h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82237E58h case    4:*/		return 0x82237E5C;
		  /* 82237E5Ch */ case    5:  		/* lwz R11, <#[R3]> */
		/* 82237E5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82237E5Ch case    5:*/		return 0x82237E60;
		  /* 82237E60h */ case    6:  		/* li R4, 0 */
		/* 82237E60h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237E60h case    6:*/		return 0x82237E64;
		  /* 82237E64h */ case    7:  		/* mr R31, R3 */
		/* 82237E64h case    7:*/		regs.R31 = regs.R3;
		/* 82237E64h case    7:*/		return 0x82237E68;
		  /* 82237E68h */ case    8:  		/* lwz R11, <#[R11 + 84]> */
		/* 82237E68h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82237E68h case    8:*/		return 0x82237E6C;
		  /* 82237E6Ch */ case    9:  		/* mtspr CTR, R11 */
		/* 82237E6Ch case    9:*/		regs.CTR = regs.R11;
		/* 82237E6Ch case    9:*/		return 0x82237E70;
		  /* 82237E70h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 82237E70h case   10:*/		if ( 1 ) { regs.LR = 0x82237E74; return (uint32)regs.CTR; }
		/* 82237E70h case   10:*/		return 0x82237E74;
		  /* 82237E74h */ case   11:  		/* lwz R11, <#[R31]> */
		/* 82237E74h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82237E74h case   11:*/		return 0x82237E78;
		  /* 82237E78h */ case   12:  		/* li R6, 0 */
		/* 82237E78h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82237E78h case   12:*/		return 0x82237E7C;
		  /* 82237E7Ch */ case   13:  		/* li R5, 1 */
		/* 82237E7Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82237E7Ch case   13:*/		return 0x82237E80;
		  /* 82237E80h */ case   14:  		/* li R4, 0 */
		/* 82237E80h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237E80h case   14:*/		return 0x82237E84;
		  /* 82237E84h */ case   15:  		/* mr R3, R31 */
		/* 82237E84h case   15:*/		regs.R3 = regs.R31;
		/* 82237E84h case   15:*/		return 0x82237E88;
		  /* 82237E88h */ case   16:  		/* lwz R11, <#[R11 + 84]> */
		/* 82237E88h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82237E88h case   16:*/		return 0x82237E8C;
		  /* 82237E8Ch */ case   17:  		/* mtspr CTR, R11 */
		/* 82237E8Ch case   17:*/		regs.CTR = regs.R11;
		/* 82237E8Ch case   17:*/		return 0x82237E90;
		  /* 82237E90h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 82237E90h case   18:*/		if ( 1 ) { regs.LR = 0x82237E94; return (uint32)regs.CTR; }
		/* 82237E90h case   18:*/		return 0x82237E94;
		  /* 82237E94h */ case   19:  		/* lwz R11, <#[R31]> */
		/* 82237E94h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82237E94h case   19:*/		return 0x82237E98;
		  /* 82237E98h */ case   20:  		/* li R6, 1 */
		/* 82237E98h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82237E98h case   20:*/		return 0x82237E9C;
		  /* 82237E9Ch */ case   21:  		/* li R5, 2 */
		/* 82237E9Ch case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82237E9Ch case   21:*/		return 0x82237EA0;
		  /* 82237EA0h */ case   22:  		/* li R4, 0 */
		/* 82237EA0h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237EA0h case   22:*/		return 0x82237EA4;
		  /* 82237EA4h */ case   23:  		/* mr R3, R31 */
		/* 82237EA4h case   23:*/		regs.R3 = regs.R31;
		/* 82237EA4h case   23:*/		return 0x82237EA8;
		  /* 82237EA8h */ case   24:  		/* lwz R11, <#[R11 + 84]> */
		/* 82237EA8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82237EA8h case   24:*/		return 0x82237EAC;
		  /* 82237EACh */ case   25:  		/* mtspr CTR, R11 */
		/* 82237EACh case   25:*/		regs.CTR = regs.R11;
		/* 82237EACh case   25:*/		return 0x82237EB0;
		  /* 82237EB0h */ case   26:  		/* bcctrl 20, CR0_LT */
		/* 82237EB0h case   26:*/		if ( 1 ) { regs.LR = 0x82237EB4; return (uint32)regs.CTR; }
		/* 82237EB0h case   26:*/		return 0x82237EB4;
		  /* 82237EB4h */ case   27:  		/* lwz R11, <#[R31]> */
		/* 82237EB4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82237EB4h case   27:*/		return 0x82237EB8;
		  /* 82237EB8h */ case   28:  		/* li R6, 1 */
		/* 82237EB8h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82237EB8h case   28:*/		return 0x82237EBC;
		  /* 82237EBCh */ case   29:  		/* li R5, 3 */
		/* 82237EBCh case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82237EBCh case   29:*/		return 0x82237EC0;
		  /* 82237EC0h */ case   30:  		/* li R4, 0 */
		/* 82237EC0h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82237EC0h case   30:*/		return 0x82237EC4;
		  /* 82237EC4h */ case   31:  		/* mr R3, R31 */
		/* 82237EC4h case   31:*/		regs.R3 = regs.R31;
		/* 82237EC4h case   31:*/		return 0x82237EC8;
		  /* 82237EC8h */ case   32:  		/* lwz R11, <#[R11 + 84]> */
		/* 82237EC8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82237EC8h case   32:*/		return 0x82237ECC;
		  /* 82237ECCh */ case   33:  		/* mtspr CTR, R11 */
		/* 82237ECCh case   33:*/		regs.CTR = regs.R11;
		/* 82237ECCh case   33:*/		return 0x82237ED0;
		  /* 82237ED0h */ case   34:  		/* bcctrl 20, CR0_LT */
		/* 82237ED0h case   34:*/		if ( 1 ) { regs.LR = 0x82237ED4; return (uint32)regs.CTR; }
		/* 82237ED0h case   34:*/		return 0x82237ED4;
		  /* 82237ED4h */ case   35:  		/* lwz R10, <#[R1 + 80]> */
		/* 82237ED4h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82237ED4h case   35:*/		return 0x82237ED8;
		  /* 82237ED8h */ case   36:  		/* li R11, 25 */
		/* 82237ED8h case   36:*/		cpu::op::li<0>(regs,&regs.R11,0x19);
		/* 82237ED8h case   36:*/		return 0x82237EDC;
		  /* 82237EDCh */ case   37:  		/* stw R11, <#[R31 + 84]> */
		/* 82237EDCh case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 82237EDCh case   37:*/		return 0x82237EE0;
		  /* 82237EE0h */ case   38:  		/* stw R10, <#[R31 + 60]> */
		/* 82237EE0h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000003C) );
		/* 82237EE0h case   38:*/		return 0x82237EE4;
		  /* 82237EE4h */ case   39:  		/* lwz R11, <#[R31]> */
		/* 82237EE4h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82237EE4h case   39:*/		return 0x82237EE8;
		  /* 82237EE8h */ case   40:  		/* li R6, 0 */
		/* 82237EE8h case   40:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82237EE8h case   40:*/		return 0x82237EEC;
		  /* 82237EECh */ case   41:  		/* mr R5, R29 */
		/* 82237EECh case   41:*/		regs.R5 = regs.R29;
		/* 82237EECh case   41:*/		return 0x82237EF0;
		  /* 82237EF0h */ case   42:  		/* li R4, 1 */
		/* 82237EF0h case   42:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82237EF0h case   42:*/		return 0x82237EF4;
		  /* 82237EF4h */ case   43:  		/* mr R3, R31 */
		/* 82237EF4h case   43:*/		regs.R3 = regs.R31;
		/* 82237EF4h case   43:*/		return 0x82237EF8;
		  /* 82237EF8h */ case   44:  		/* lwz R11, <#[R11 + 88]> */
		/* 82237EF8h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82237EF8h case   44:*/		return 0x82237EFC;
		  /* 82237EFCh */ case   45:  		/* mtspr CTR, R11 */
		/* 82237EFCh case   45:*/		regs.CTR = regs.R11;
		/* 82237EFCh case   45:*/		return 0x82237F00;
		  /* 82237F00h */ case   46:  		/* bcctrl 20, CR0_LT */
		/* 82237F00h case   46:*/		if ( 1 ) { regs.LR = 0x82237F04; return (uint32)regs.CTR; }
		/* 82237F00h case   46:*/		return 0x82237F04;
		  /* 82237F04h */ case   47:  		/* addi R29, R29, 1 */
		/* 82237F04h case   47:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82237F04h case   47:*/		return 0x82237F08;
	}
	return 0x82237F08;
} // Block from 82237E48h-82237F08h (48 instructions)

//////////////////////////////////////////////////////
// Block at 82237F08h
// Function '?FixupMultipleConstants@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237F08);
		  /* 82237F08h */ case    0:  		/* cmpwi CR6, R29, 4 */
		/* 82237F08h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 82237F08h case    0:*/		return 0x82237F0C;
		  /* 82237F0Ch */ case    1:  		/* bc 12, CR6_LT, -40 */
		/* 82237F0Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x82237EE4;  }
		/* 82237F0Ch case    1:*/		return 0x82237F10;
		  /* 82237F10h */ case    2:  		/* mr R4, R31 */
		/* 82237F10h case    2:*/		regs.R4 = regs.R31;
		/* 82237F10h case    2:*/		return 0x82237F14;
		  /* 82237F14h */ case    3:  		/* mr R3, R30 */
		/* 82237F14h case    3:*/		regs.R3 = regs.R30;
		/* 82237F14h case    3:*/		return 0x82237F18;
		  /* 82237F18h */ case    4:  		/* bl -6512 */
		/* 82237F18h case    4:*/		regs.LR = 0x82237F1C; return 0x822365A8;
		/* 82237F18h case    4:*/		return 0x82237F1C;
		  /* 82237F1Ch */ case    5:  		/* mr R4, R31 */
		/* 82237F1Ch case    5:*/		regs.R4 = regs.R31;
		/* 82237F1Ch case    5:*/		return 0x82237F20;
		  /* 82237F20h */ case    6:  		/* lwz R3, <#[R30 + 168]> */
		/* 82237F20h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000000A8) );
		/* 82237F20h case    6:*/		return 0x82237F24;
		  /* 82237F24h */ case    7:  		/* bl 135252 */
		/* 82237F24h case    7:*/		regs.LR = 0x82237F28; return 0x82258F78;
		/* 82237F24h case    7:*/		return 0x82237F28;
		  /* 82237F28h */ case    8:  		/* mr R3, R31 */
		/* 82237F28h case    8:*/		regs.R3 = regs.R31;
		/* 82237F28h case    8:*/		return 0x82237F2C;
		  /* 82237F2Ch */ case    9:  		/* bl 123028 */
		/* 82237F2Ch case    9:*/		regs.LR = 0x82237F30; return 0x82255FC0;
		/* 82237F2Ch case    9:*/		return 0x82237F30;
		  /* 82237F30h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82237F30h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82237F30h case   10:*/		return 0x82237F34;
		  /* 82237F34h */ case   11:  		/* bc 4, CR0_EQ, 32 */
		/* 82237F34h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82237F54;  }
		/* 82237F34h case   11:*/		return 0x82237F38;
		  /* 82237F38h */ case   12:  		/* lis R11, -32252 */
		/* 82237F38h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82237F38h case   12:*/		return 0x82237F3C;
		  /* 82237F3Ch */ case   13:  		/* mr R6, R27 */
		/* 82237F3Ch case   13:*/		regs.R6 = regs.R27;
		/* 82237F3Ch case   13:*/		return 0x82237F40;
		  /* 82237F40h */ case   14:  		/* addi R5, R11, 8912 */
		/* 82237F40h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x22D0);
		/* 82237F40h case   14:*/		return 0x82237F44;
		  /* 82237F44h */ case   15:  		/* mr R4, R28 */
		/* 82237F44h case   15:*/		regs.R4 = regs.R28;
		/* 82237F44h case   15:*/		return 0x82237F48;
		  /* 82237F48h */ case   16:  		/* li R7, 2382 */
		/* 82237F48h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x94E);
		/* 82237F48h case   16:*/		return 0x82237F4C;
		  /* 82237F4Ch */ case   17:  		/* li R3, 0 */
		/* 82237F4Ch case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82237F4Ch case   17:*/		return 0x82237F50;
		  /* 82237F50h */ case   18:  		/* bl -918344 */
		/* 82237F50h case   18:*/		regs.LR = 0x82237F54; return 0x82157C08;
		/* 82237F50h case   18:*/		return 0x82237F54;
	}
	return 0x82237F54;
} // Block from 82237F08h-82237F54h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82237F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237F54);
		  /* 82237F54h */ case    0:  		/* li R11, 1 */
		/* 82237F54h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82237F54h case    0:*/		return 0x82237F58;
		  /* 82237F58h */ case    1:  		/* stb R11, <#[R30 + 124]> */
		/* 82237F58h case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x0000007C) );
		/* 82237F58h case    1:*/		return 0x82237F5C;
	}
	return 0x82237F5C;
} // Block from 82237F54h-82237F5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82237F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237F5C);
		  /* 82237F5Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 82237F5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82237F5Ch case    0:*/		return 0x82237F60;
		  /* 82237F60h */ case    1:  		/* b -1731772 */
		/* 82237F60h case    1:*/		return 0x820912A4;
		/* 82237F60h case    1:*/		return 0x82237F64;
		  /* 82237F64h */ case    2:  		/* nop */
		/* 82237F64h case    2:*/		cpu::op::nop();
		/* 82237F64h case    2:*/		return 0x82237F68;
	}
	return 0x82237F68;
} // Block from 82237F5Ch-82237F68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82237F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82237F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82237F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82237F68);
		  /* 82237F68h */ case    0:  		/* mfspr R12, LR */
		/* 82237F68h case    0:*/		regs.R12 = regs.LR;
		/* 82237F68h case    0:*/		return 0x82237F6C;
		  /* 82237F6Ch */ case    1:  		/* bl -1731864 */
		/* 82237F6Ch case    1:*/		regs.LR = 0x82237F70; return 0x82091254;
		/* 82237F6Ch case    1:*/		return 0x82237F70;
		  /* 82237F70h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82237F70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82237F70h case    2:*/		return 0x82237F74;
		  /* 82237F74h */ case    3:  		/* lis R11, -32256 */
		/* 82237F74h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82237F74h case    3:*/		return 0x82237F78;
		  /* 82237F78h */ case    4:  		/* mr R31, R3 */
		/* 82237F78h case    4:*/		regs.R31 = regs.R3;
		/* 82237F78h case    4:*/		return 0x82237F7C;
		  /* 82237F7Ch */ case    5:  		/* mr R28, R4 */
		/* 82237F7Ch case    5:*/		regs.R28 = regs.R4;
		/* 82237F7Ch case    5:*/		return 0x82237F80;
		  /* 82237F80h */ case    6:  		/* li R29, 0 */
		/* 82237F80h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82237F80h case    6:*/		return 0x82237F84;
		  /* 82237F84h */ case    7:  		/* li R30, 0 */
		/* 82237F84h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82237F84h case    7:*/		return 0x82237F88;
		  /* 82237F88h */ case    8:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 82237F88h case    8:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 82237F88h case    8:*/		return 0x82237F8C;
		  /* 82237F8Ch */ case    9:  		/* stfs FR0, <#[R1 + 80]> */
		/* 82237F8Ch case    9:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82237F8Ch case    9:*/		return 0x82237F90;
		  /* 82237F90h */ case   10:  		/* stfs FR0, <#[R1 + 84]> */
		/* 82237F90h case   10:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000054) );
		/* 82237F90h case   10:*/		return 0x82237F94;
		  /* 82237F94h */ case   11:  		/* lwz R27, <#[R31 + 12]> */
		/* 82237F94h case   11:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x0000000C) );
		/* 82237F94h case   11:*/		return 0x82237F98;
		  /* 82237F98h */ case   12:  		/* lwz R3, <#[R27 + 1488]> */
		/* 82237F98h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x000005D0) );
		/* 82237F98h case   12:*/		return 0x82237F9C;
		  /* 82237F9Ch */ case   13:  		/* lwz R11, <#[R3]> */
		/* 82237F9Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82237F9Ch case   13:*/		return 0x82237FA0;
		  /* 82237FA0h */ case   14:  		/* lwz R11, <#[R11 + 28]> */
		/* 82237FA0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82237FA0h case   14:*/		return 0x82237FA4;
		  /* 82237FA4h */ case   15:  		/* mtspr CTR, R11 */
		/* 82237FA4h case   15:*/		regs.CTR = regs.R11;
		/* 82237FA4h case   15:*/		return 0x82237FA8;
		  /* 82237FA8h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 82237FA8h case   16:*/		if ( 1 ) { regs.LR = 0x82237FAC; return (uint32)regs.CTR; }
		/* 82237FA8h case   16:*/		return 0x82237FAC;
		  /* 82237FACh */ case   17:  		/* lis R11, -32222 */
		/* 82237FACh case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82237FACh case   17:*/		return 0x82237FB0;
		  /* 82237FB0h */ case   18:  		/* mr R5, R3 */
		/* 82237FB0h case   18:*/		regs.R5 = regs.R3;
		/* 82237FB0h case   18:*/		return 0x82237FB4;
		  /* 82237FB4h */ case   19:  		/* lwz R3, <#[R31 + 16]> */
		/* 82237FB4h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82237FB4h case   19:*/		return 0x82237FB8;
		  /* 82237FB8h */ case   20:  		/* mr R4, R30 */
		/* 82237FB8h case   20:*/		regs.R4 = regs.R30;
		/* 82237FB8h case   20:*/		return 0x82237FBC;
		  /* 82237FBCh */ case   21:  		/* addi R6, R11, -12392 */
		/* 82237FBCh case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82237FBCh case   21:*/		return 0x82237FC0;
		  /* 82237FC0h */ case   22:  		/* mr R7, R27 */
		/* 82237FC0h case   22:*/		regs.R7 = regs.R27;
		/* 82237FC0h case   22:*/		return 0x82237FC4;
		  /* 82237FC4h */ case   23:  		/* bl -14884 */
		/* 82237FC4h case   23:*/		regs.LR = 0x82237FC8; return 0x822345A0;
		/* 82237FC4h case   23:*/		return 0x82237FC8;
		  /* 82237FC8h */ case   24:  		/* addi R11, R3, -1 */
		/* 82237FC8h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFFF);
		/* 82237FC8h case   24:*/		return 0x82237FCC;
		  /* 82237FCCh */ case   25:  		/* addi R30, R30, 1 */
		/* 82237FCCh case   25:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82237FCCh case   25:*/		return 0x82237FD0;
		  /* 82237FD0h */ case   26:  		/* cntlzw R11, R11 */
		/* 82237FD0h case   26:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82237FD0h case   26:*/		return 0x82237FD4;
		  /* 82237FD4h */ case   27:  		/* cmpwi CR6, R30, 5 */
		/* 82237FD4h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000005);
		/* 82237FD4h case   27:*/		return 0x82237FD8;
		  /* 82237FD8h */ case   28:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82237FD8h case   28:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82237FD8h case   28:*/		return 0x82237FDC;
		  /* 82237FDCh */ case   29:  		/* or R29, R11, R29 */
		/* 82237FDCh case   29:*/		cpu::op::or<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 82237FDCh case   29:*/		return 0x82237FE0;
		  /* 82237FE0h */ case   30:  		/* bc 12, CR6_LT, -76 */
		/* 82237FE0h case   30:*/		if ( regs.CR[6].lt ) { return 0x82237F94;  }
		/* 82237FE0h case   30:*/		return 0x82237FE4;
		  /* 82237FE4h */ case   31:  		/* lbz R11, <#[R31 + 126]> */
		/* 82237FE4h case   31:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000007E) );
		/* 82237FE4h case   31:*/		return 0x82237FE8;
		  /* 82237FE8h */ case   32:  		/* cmplwi CR0, R11, 0 */
		/* 82237FE8h case   32:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82237FE8h case   32:*/		return 0x82237FEC;
		  /* 82237FECh */ case   33:  		/* bc 12, CR0_EQ, 404 */
		/* 82237FECh case   33:*/		if ( regs.CR[0].eq ) { return 0x82238180;  }
		/* 82237FECh case   33:*/		return 0x82237FF0;
		  /* 82237FF0h */ case   34:  		/* lwz R11, <#[R28 + 4]> */
		/* 82237FF0h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82237FF0h case   34:*/		return 0x82237FF4;
		  /* 82237FF4h */ case   35:  		/* lbz R11, <#[R11 + 3]> */
		/* 82237FF4h case   35:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000003) );
		/* 82237FF4h case   35:*/		return 0x82237FF8;
		  /* 82237FF8h */ case   36:  		/* cmplwi CR6, R11, 3 */
		/* 82237FF8h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82237FF8h case   36:*/		return 0x82237FFC;
		  /* 82237FFCh */ case   37:  		/* bc 12, CR6_EQ, 388 */
		/* 82237FFCh case   37:*/		if ( regs.CR[6].eq ) { return 0x82238180;  }
		/* 82237FFCh case   37:*/		return 0x82238000;
		  /* 82238000h */ case   38:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 82238000h case   38:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 82238000h case   38:*/		return 0x82238004;
		  /* 82238004h */ case   39:  		/* bc 12, CR0_EQ, 380 */
		/* 82238004h case   39:*/		if ( regs.CR[0].eq ) { return 0x82238180;  }
		/* 82238004h case   39:*/		return 0x82238008;
		  /* 82238008h */ case   40:  		/* lis R11, -32222 */
		/* 82238008h case   40:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82238008h case   40:*/		return 0x8223800C;
		  /* 8223800Ch */ case   41:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223800Ch case   41:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223800Ch case   41:*/		return 0x82238010;
		  /* 82238010h */ case   42:  		/* addi R5, R1, 84 */
		/* 82238010h case   42:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82238010h case   42:*/		return 0x82238014;
		  /* 82238014h */ case   43:  		/* lwz R3, <#[R31 + 16]> */
		/* 82238014h case   43:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82238014h case   43:*/		return 0x82238018;
		  /* 82238018h */ case   44:  		/* addi R6, R11, -12392 */
		/* 82238018h case   44:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82238018h case   44:*/		return 0x8223801C;
		  /* 8223801Ch */ case   45:  		/* li R4, 0 */
		/* 8223801Ch case   45:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223801Ch case   45:*/		return 0x82238020;
		  /* 82238020h */ case   46:  		/* bl -20120 */
		/* 82238020h case   46:*/		regs.LR = 0x82238024; return 0x82233188;
		/* 82238020h case   46:*/		return 0x82238024;
		  /* 82238024h */ case   47:  		/* lis R11, -32222 */
		/* 82238024h case   47:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82238024h case   47:*/		return 0x82238028;
		  /* 82238028h */ case   48:  		/* addi R5, R1, 80 */
		/* 82238028h case   48:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82238028h case   48:*/		return 0x8223802C;
		  /* 8223802Ch */ case   49:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223802Ch case   49:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223802Ch case   49:*/		return 0x82238030;
		  /* 82238030h */ case   50:  		/* addi R6, R11, -12392 */
		/* 82238030h case   50:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82238030h case   50:*/		return 0x82238034;
		  /* 82238034h */ case   51:  		/* lwz R3, <#[R31 + 16]> */
		/* 82238034h case   51:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82238034h case   51:*/		return 0x82238038;
		  /* 82238038h */ case   52:  		/* li R4, 0 */
		/* 82238038h case   52:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82238038h case   52:*/		return 0x8223803C;
		  /* 8223803Ch */ case   53:  		/* bl -20148 */
		/* 8223803Ch case   53:*/		regs.LR = 0x82238040; return 0x82233188;
		/* 8223803Ch case   53:*/		return 0x82238040;
		  /* 82238040h */ case   54:  		/* lwz R11, <#[R31 + 120]> */
		/* 82238040h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82238040h case   54:*/		return 0x82238044;
		  /* 82238044h */ case   55:  		/* li R3, 23 */
		/* 82238044h case   55:*/		cpu::op::li<0>(regs,&regs.R3,0x17);
		/* 82238044h case   55:*/		return 0x82238048;
		  /* 82238048h */ case   56:  		/* lwz R4, <#[R31 + 12]> */
		/* 82238048h case   56:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82238048h case   56:*/		return 0x8223804C;
		  /* 8223804Ch */ case   57:  		/* lwz R30, <#[R11 + 32]> */
		/* 8223804Ch case   57:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000020) );
		/* 8223804Ch case   57:*/		return 0x82238050;
		  /* 82238050h */ case   58:  		/* bl 122592 */
		/* 82238050h case   58:*/		regs.LR = 0x82238054; return 0x82255F30;
		/* 82238050h case   58:*/		return 0x82238054;
		  /* 82238054h */ case   59:  		/* mr R5, R30 */
		/* 82238054h case   59:*/		regs.R5 = regs.R30;
		/* 82238054h case   59:*/		return 0x82238058;
		  /* 82238058h */ case   60:  		/* li R4, 0 */
		/* 82238058h case   60:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82238058h case   60:*/		return 0x8223805C;
		  /* 8223805Ch */ case   61:  		/* mr R29, R3 */
		/* 8223805Ch case   61:*/		regs.R29 = regs.R3;
		/* 8223805Ch case   61:*/		return 0x82238060;
		  /* 82238060h */ case   62:  		/* bl 123704 */
		/* 82238060h case   62:*/		regs.LR = 0x82238064; return 0x82256398;
		/* 82238060h case   62:*/		return 0x82238064;
		  /* 82238064h */ case   63:  		/* mr R3, R29 */
		/* 82238064h case   63:*/		regs.R3 = regs.R29;
		/* 82238064h case   63:*/		return 0x82238068;
		  /* 82238068h */ case   64:  		/* mr R5, R30 */
		/* 82238068h case   64:*/		regs.R5 = regs.R30;
		/* 82238068h case   64:*/		return 0x8223806C;
		  /* 8223806Ch */ case   65:  		/* li R4, 1 */
		/* 8223806Ch case   65:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223806Ch case   65:*/		return 0x82238070;
		  /* 82238070h */ case   66:  		/* bl 123688 */
		/* 82238070h case   66:*/		regs.LR = 0x82238074; return 0x82256398;
		/* 82238070h case   66:*/		return 0x82238074;
		  /* 82238074h */ case   67:  		/* lfs FR4, <#[R1 + 80]> */
		/* 82238074h case   67:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000050) );
		/* 82238074h case   67:*/		return 0x82238078;
		  /* 82238078h */ case   68:  		/* mr R3, R29 */
		/* 82238078h case   68:*/		regs.R3 = regs.R29;
		/* 82238078h case   68:*/		return 0x8223807C;
		  /* 8223807Ch */ case   69:  		/* fmr FR3, FR4 */
		/* 8223807Ch case   69:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 8223807Ch case   69:*/		return 0x82238080;
		  /* 82238080h */ case   70:  		/* li R5, 2 */
		/* 82238080h case   70:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82238080h case   70:*/		return 0x82238084;
		  /* 82238084h */ case   71:  		/* fmr FR2, FR4 */
		/* 82238084h case   71:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 82238084h case   71:*/		return 0x82238088;
		  /* 82238088h */ case   72:  		/* mr R4, R31 */
		/* 82238088h case   72:*/		regs.R4 = regs.R31;
		/* 82238088h case   72:*/		return 0x8223808C;
		  /* 8223808Ch */ case   73:  		/* fmr FR1, FR4 */
		/* 8223808Ch case   73:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 8223808Ch case   73:*/		return 0x82238090;
		  /* 82238090h */ case   74:  		/* bl 126600 */
		/* 82238090h case   74:*/		regs.LR = 0x82238094; return 0x82256F18;
		/* 82238090h case   74:*/		return 0x82238094;
		  /* 82238094h */ case   75:  		/* mr R4, R29 */
		/* 82238094h case   75:*/		regs.R4 = regs.R29;
		/* 82238094h case   75:*/		return 0x82238098;
		  /* 82238098h */ case   76:  		/* mr R3, R31 */
		/* 82238098h case   76:*/		regs.R3 = regs.R31;
		/* 82238098h case   76:*/		return 0x8223809C;
		  /* 8223809Ch */ case   77:  		/* bl -6900 */
		/* 8223809Ch case   77:*/		regs.LR = 0x822380A0; return 0x822365A8;
		/* 8223809Ch case   77:*/		return 0x822380A0;
		  /* 822380A0h */ case   78:  		/* mr R5, R29 */
		/* 822380A0h case   78:*/		regs.R5 = regs.R29;
		/* 822380A0h case   78:*/		return 0x822380A4;
		  /* 822380A4h */ case   79:  		/* lwz R4, <#[R31 + 120]> */
		/* 822380A4h case   79:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000078) );
		/* 822380A4h case   79:*/		return 0x822380A8;
		  /* 822380A8h */ case   80:  		/* lwz R3, <#[R31 + 168]> */
		/* 822380A8h case   80:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A8) );
		/* 822380A8h case   80:*/		return 0x822380AC;
		  /* 822380ACh */ case   81:  		/* bl 135028 */
		/* 822380ACh case   81:*/		regs.LR = 0x822380B0; return 0x82259020;
		/* 822380ACh case   81:*/		return 0x822380B0;
		  /* 822380B0h */ case   82:  		/* mr R3, R29 */
		/* 822380B0h case   82:*/		regs.R3 = regs.R29;
		/* 822380B0h case   82:*/		return 0x822380B4;
		  /* 822380B4h */ case   83:  		/* bl 122636 */
		/* 822380B4h case   83:*/		regs.LR = 0x822380B8; return 0x82255FC0;
		/* 822380B4h case   83:*/		return 0x822380B8;
		  /* 822380B8h */ case   84:  		/* lis R11, -32253 */
		/* 822380B8h case   84:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822380B8h case   84:*/		return 0x822380BC;
		  /* 822380BCh */ case   85:  		/* lis R10, -32252 */
		/* 822380BCh case   85:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822380BCh case   85:*/		return 0x822380C0;
		  /* 822380C0h */ case   86:  		/* rlwinm. R9, R3, 0, 24, 31 */
		/* 822380C0h case   86:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R3);
		/* 822380C0h case   86:*/		return 0x822380C4;
		  /* 822380C4h */ case   87:  		/* addi R29, R11, 27460 */
		/* 822380C4h case   87:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 822380C4h case   87:*/		return 0x822380C8;
		  /* 822380C8h */ case   88:  		/* addi R28, R10, 8520 */
		/* 822380C8h case   88:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x2148);
		/* 822380C8h case   88:*/		return 0x822380CC;
		  /* 822380CCh */ case   89:  		/* bc 4, CR0_EQ, 32 */
		/* 822380CCh case   89:*/		if ( !regs.CR[0].eq ) { return 0x822380EC;  }
		/* 822380CCh case   89:*/		return 0x822380D0;
		  /* 822380D0h */ case   90:  		/* lis R11, -32252 */
		/* 822380D0h case   90:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822380D0h case   90:*/		return 0x822380D4;
		  /* 822380D4h */ case   91:  		/* mr R6, R28 */
		/* 822380D4h case   91:*/		regs.R6 = regs.R28;
		/* 822380D4h case   91:*/		return 0x822380D8;
		  /* 822380D8h */ case   92:  		/* addi R5, R11, 9204 */
		/* 822380D8h case   92:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x23F4);
		/* 822380D8h case   92:*/		return 0x822380DC;
		  /* 822380DCh */ case   93:  		/* mr R4, R29 */
		/* 822380DCh case   93:*/		regs.R4 = regs.R29;
		/* 822380DCh case   93:*/		return 0x822380E0;
		  /* 822380E0h */ case   94:  		/* li R7, 2421 */
		/* 822380E0h case   94:*/		cpu::op::li<0>(regs,&regs.R7,0x975);
		/* 822380E0h case   94:*/		return 0x822380E4;
		  /* 822380E4h */ case   95:  		/* li R3, 0 */
		/* 822380E4h case   95:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822380E4h case   95:*/		return 0x822380E8;
	}
	return 0x822380E8;
} // Block from 82237F68h-822380E8h (96 instructions)

//////////////////////////////////////////////////////
// Block at 822380E8h
// Function '?MaybeWriteWincoord@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822380E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822380E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822380E8);
		  /* 822380E8h */ case    0:  		/* bl -918752 */
		/* 822380E8h case    0:*/		regs.LR = 0x822380EC; return 0x82157C08;
		/* 822380E8h case    0:*/		return 0x822380EC;
	}
	return 0x822380EC;
} // Block from 822380E8h-822380ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822380ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822380EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822380EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822380EC);
		  /* 822380ECh */ case    0:  		/* li R3, 25 */
		/* 822380ECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x19);
		/* 822380ECh case    0:*/		return 0x822380F0;
		  /* 822380F0h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 822380F0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 822380F0h case    1:*/		return 0x822380F4;
		  /* 822380F4h */ case    2:  		/* bl 122428 */
		/* 822380F4h case    2:*/		regs.LR = 0x822380F8; return 0x82255F30;
		/* 822380F4h case    2:*/		return 0x822380F8;
		  /* 822380F8h */ case    3:  		/* mr R5, R30 */
		/* 822380F8h case    3:*/		regs.R5 = regs.R30;
		/* 822380F8h case    3:*/		return 0x822380FC;
		  /* 822380FCh */ case    4:  		/* li R4, 0 */
		/* 822380FCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822380FCh case    4:*/		return 0x82238100;
		  /* 82238100h */ case    5:  		/* mr R27, R3 */
		/* 82238100h case    5:*/		regs.R27 = regs.R3;
		/* 82238100h case    5:*/		return 0x82238104;
		  /* 82238104h */ case    6:  		/* bl 123540 */
		/* 82238104h case    6:*/		regs.LR = 0x82238108; return 0x82256398;
		/* 82238104h case    6:*/		return 0x82238108;
		  /* 82238108h */ case    7:  		/* mr R3, R27 */
		/* 82238108h case    7:*/		regs.R3 = regs.R27;
		/* 82238108h case    7:*/		return 0x8223810C;
		  /* 8223810Ch */ case    8:  		/* mr R5, R30 */
		/* 8223810Ch case    8:*/		regs.R5 = regs.R30;
		/* 8223810Ch case    8:*/		return 0x82238110;
		  /* 82238110h */ case    9:  		/* li R4, 1 */
		/* 82238110h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82238110h case    9:*/		return 0x82238114;
		  /* 82238114h */ case   10:  		/* bl 123524 */
		/* 82238114h case   10:*/		regs.LR = 0x82238118; return 0x82256398;
		/* 82238114h case   10:*/		return 0x82238118;
		  /* 82238118h */ case   11:  		/* lfs FR4, <#[R1 + 84]> */
		/* 82238118h case   11:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000054) );
		/* 82238118h case   11:*/		return 0x8223811C;
		  /* 8223811Ch */ case   12:  		/* mr R3, R27 */
		/* 8223811Ch case   12:*/		regs.R3 = regs.R27;
		/* 8223811Ch case   12:*/		return 0x82238120;
		  /* 82238120h */ case   13:  		/* fmr FR3, FR4 */
		/* 82238120h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 82238120h case   13:*/		return 0x82238124;
		  /* 82238124h */ case   14:  		/* li R5, 2 */
		/* 82238124h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82238124h case   14:*/		return 0x82238128;
		  /* 82238128h */ case   15:  		/* fmr FR2, FR4 */
		/* 82238128h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 82238128h case   15:*/		return 0x8223812C;
		  /* 8223812Ch */ case   16:  		/* mr R4, R31 */
		/* 8223812Ch case   16:*/		regs.R4 = regs.R31;
		/* 8223812Ch case   16:*/		return 0x82238130;
		  /* 82238130h */ case   17:  		/* fmr FR1, FR4 */
		/* 82238130h case   17:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 82238130h case   17:*/		return 0x82238134;
		  /* 82238134h */ case   18:  		/* bl 126436 */
		/* 82238134h case   18:*/		regs.LR = 0x82238138; return 0x82256F18;
		/* 82238134h case   18:*/		return 0x82238138;
		  /* 82238138h */ case   19:  		/* mr R4, R27 */
		/* 82238138h case   19:*/		regs.R4 = regs.R27;
		/* 82238138h case   19:*/		return 0x8223813C;
		  /* 8223813Ch */ case   20:  		/* mr R3, R31 */
		/* 8223813Ch case   20:*/		regs.R3 = regs.R31;
		/* 8223813Ch case   20:*/		return 0x82238140;
		  /* 82238140h */ case   21:  		/* bl -7064 */
		/* 82238140h case   21:*/		regs.LR = 0x82238144; return 0x822365A8;
		/* 82238140h case   21:*/		return 0x82238144;
		  /* 82238144h */ case   22:  		/* mr R5, R27 */
		/* 82238144h case   22:*/		regs.R5 = regs.R27;
		/* 82238144h case   22:*/		return 0x82238148;
		  /* 82238148h */ case   23:  		/* lwz R4, <#[R31 + 120]> */
		/* 82238148h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000078) );
		/* 82238148h case   23:*/		return 0x8223814C;
		  /* 8223814Ch */ case   24:  		/* lwz R3, <#[R31 + 168]> */
		/* 8223814Ch case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A8) );
		/* 8223814Ch case   24:*/		return 0x82238150;
		  /* 82238150h */ case   25:  		/* bl 134864 */
		/* 82238150h case   25:*/		regs.LR = 0x82238154; return 0x82259020;
		/* 82238150h case   25:*/		return 0x82238154;
		  /* 82238154h */ case   26:  		/* mr R3, R27 */
		/* 82238154h case   26:*/		regs.R3 = regs.R27;
		/* 82238154h case   26:*/		return 0x82238158;
		  /* 82238158h */ case   27:  		/* bl 122472 */
		/* 82238158h case   27:*/		regs.LR = 0x8223815C; return 0x82255FC0;
		/* 82238158h case   27:*/		return 0x8223815C;
		  /* 8223815Ch */ case   28:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223815Ch case   28:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223815Ch case   28:*/		return 0x82238160;
		  /* 82238160h */ case   29:  		/* bc 4, CR0_EQ, 32 */
		/* 82238160h case   29:*/		if ( !regs.CR[0].eq ) { return 0x82238180;  }
		/* 82238160h case   29:*/		return 0x82238164;
		  /* 82238164h */ case   30:  		/* lis R11, -32252 */
		/* 82238164h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82238164h case   30:*/		return 0x82238168;
		  /* 82238168h */ case   31:  		/* mr R6, R28 */
		/* 82238168h case   31:*/		regs.R6 = regs.R28;
		/* 82238168h case   31:*/		return 0x8223816C;
		  /* 8223816Ch */ case   32:  		/* addi R5, R11, 9188 */
		/* 8223816Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x23E4);
		/* 8223816Ch case   32:*/		return 0x82238170;
		  /* 82238170h */ case   33:  		/* mr R4, R29 */
		/* 82238170h case   33:*/		regs.R4 = regs.R29;
		/* 82238170h case   33:*/		return 0x82238174;
		  /* 82238174h */ case   34:  		/* li R7, 2429 */
		/* 82238174h case   34:*/		cpu::op::li<0>(regs,&regs.R7,0x97D);
		/* 82238174h case   34:*/		return 0x82238178;
		  /* 82238178h */ case   35:  		/* li R3, 0 */
		/* 82238178h case   35:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82238178h case   35:*/		return 0x8223817C;
		  /* 8223817Ch */ case   36:  		/* bl -918900 */
		/* 8223817Ch case   36:*/		regs.LR = 0x82238180; return 0x82157C08;
		/* 8223817Ch case   36:*/		return 0x82238180;
	}
	return 0x82238180;
} // Block from 822380ECh-82238180h (37 instructions)

//////////////////////////////////////////////////////
// Block at 82238180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238180);
		  /* 82238180h */ case    0:  		/* addi R1, R1, 144 */
		/* 82238180h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82238180h case    0:*/		return 0x82238184;
		  /* 82238184h */ case    1:  		/* b -1732320 */
		/* 82238184h case    1:*/		return 0x820912A4;
		/* 82238184h case    1:*/		return 0x82238188;
	}
	return 0x82238188;
} // Block from 82238180h-82238188h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82238188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238188);
		  /* 82238188h */ case    0:  		/* mfspr R12, LR */
		/* 82238188h case    0:*/		regs.R12 = regs.LR;
		/* 82238188h case    0:*/		return 0x8223818C;
		  /* 8223818Ch */ case    1:  		/* bl -1732460 */
		/* 8223818Ch case    1:*/		regs.LR = 0x82238190; return 0x82091220;
		/* 8223818Ch case    1:*/		return 0x82238190;
		  /* 82238190h */ case    2:  		/* stfd FR30, <#[R1 - 168]> */
		/* 82238190h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82238190h case    2:*/		return 0x82238194;
		  /* 82238194h */ case    3:  		/* stfd FR31, <#[R1 - 160]> */
		/* 82238194h case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82238194h case    3:*/		return 0x82238198;
		  /* 82238198h */ case    4:  		/* stwu R1, <#[R1 - 272]> */
		/* 82238198h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 82238198h case    4:*/		return 0x8223819C;
		  /* 8223819Ch */ case    5:  		/* mr R30, R3 */
		/* 8223819Ch case    5:*/		regs.R30 = regs.R3;
		/* 8223819Ch case    5:*/		return 0x822381A0;
		  /* 822381A0h */ case    6:  		/* bl -7536 */
		/* 822381A0h case    6:*/		regs.LR = 0x822381A4; return 0x82236430;
		/* 822381A0h case    6:*/		return 0x822381A4;
		  /* 822381A4h */ case    7:  		/* lis R8, -32256 */
		/* 822381A4h case    7:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 822381A4h case    7:*/		return 0x822381A8;
		  /* 822381A8h */ case    8:  		/* stw R3, <#[R1 + 88]> */
		/* 822381A8h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000058) );
		/* 822381A8h case    8:*/		return 0x822381AC;
		  /* 822381ACh */ case    9:  		/* lis R6, -32256 */
		/* 822381ACh case    9:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 822381ACh case    9:*/		return 0x822381B0;
		  /* 822381B0h */ case   10:  		/* lis R11, -32255 */
		/* 822381B0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 822381B0h case   10:*/		return 0x822381B4;
		  /* 822381B4h */ case   11:  		/* lis R9, -32252 */
		/* 822381B4h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 822381B4h case   11:*/		return 0x822381B8;
		  /* 822381B8h */ case   12:  		/* lis R7, -32252 */
		/* 822381B8h case   12:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 822381B8h case   12:*/		return 0x822381BC;
		  /* 822381BCh */ case   13:  		/* lfs FR30, <#[R8 + 1792]> */
		/* 822381BCh case   13:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R8 + 0x00000700) );
		/* 822381BCh case   13:*/		return 0x822381C0;
		  /* 822381C0h */ case   14:  		/* addi R29, R30, 1096 */
		/* 822381C0h case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x448);
		/* 822381C0h case   14:*/		return 0x822381C4;
		  /* 822381C4h */ case   15:  		/* lfs FR31, <#[R6 + 1816]> */
		/* 822381C4h case   15:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R6 + 0x00000718) );
		/* 822381C4h case   15:*/		return 0x822381C8;
		  /* 822381C8h */ case   16:  		/* li R28, 16 */
		/* 822381C8h case   16:*/		cpu::op::li<0>(regs,&regs.R28,0x10);
		/* 822381C8h case   16:*/		return 0x822381CC;
		  /* 822381CCh */ case   17:  		/* lis R10, -32252 */
		/* 822381CCh case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822381CCh case   17:*/		return 0x822381D0;
		  /* 822381D0h */ case   18:  		/* stw R29, <#[R1 + 80]> */
		/* 822381D0h case   18:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 822381D0h case   18:*/		return 0x822381D4;
		  /* 822381D4h */ case   19:  		/* lis R8, -32253 */
		/* 822381D4h case   19:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 822381D4h case   19:*/		return 0x822381D8;
		  /* 822381D8h */ case   20:  		/* stw R28, <#[R1 + 96]> */
		/* 822381D8h case   20:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000060) );
		/* 822381D8h case   20:*/		return 0x822381DC;
		  /* 822381DCh */ case   21:  		/* lis R6, -32252 */
		/* 822381DCh case   21:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8204);
		/* 822381DCh case   21:*/		return 0x822381E0;
		  /* 822381E0h */ case   22:  		/* addi R11, R11, 5216 */
		/* 822381E0h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1460);
		/* 822381E0h case   22:*/		return 0x822381E4;
		  /* 822381E4h */ case   23:  		/* addi R9, R9, 9244 */
		/* 822381E4h case   23:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x241C);
		/* 822381E4h case   23:*/		return 0x822381E8;
		  /* 822381E8h */ case   24:  		/* addi R7, R7, 9220 */
		/* 822381E8h case   24:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x2404);
		/* 822381E8h case   24:*/		return 0x822381EC;
		  /* 822381ECh */ case   25:  		/* stw R11, <#[R1 + 100]> */
		/* 822381ECh case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 822381ECh case   25:*/		return 0x822381F0;
		  /* 822381F0h */ case   26:  		/* li R16, 0 */
		/* 822381F0h case   26:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 822381F0h case   26:*/		return 0x822381F4;
		  /* 822381F4h */ case   27:  		/* stw R9, <#[R1 + 92]> */
		/* 822381F4h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 822381F4h case   27:*/		return 0x822381F8;
		  /* 822381F8h */ case   28:  		/* li R17, 1 */
		/* 822381F8h case   28:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 822381F8h case   28:*/		return 0x822381FC;
		  /* 822381FCh */ case   29:  		/* stw R7, <#[R1 + 84]> */
		/* 822381FCh case   29:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 822381FCh case   29:*/		return 0x82238200;
		  /* 82238200h */ case   30:  		/* addi R15, R10, 8912 */
		/* 82238200h case   30:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R10,0x22D0);
		/* 82238200h case   30:*/		return 0x82238204;
		  /* 82238204h */ case   31:  		/* addi R23, R8, 27460 */
		/* 82238204h case   31:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R8,0x6B44);
		/* 82238204h case   31:*/		return 0x82238208;
		  /* 82238208h */ case   32:  		/* addi R22, R6, 8520 */
		/* 82238208h case   32:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R6,0x2148);
		/* 82238208h case   32:*/		return 0x8223820C;
		  /* 8223820Ch */ case   33:  		/* lwz R20, <#[R29]> */
		/* 8223820Ch case   33:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R29 + 0x00000000) );
		/* 8223820Ch case   33:*/		return 0x82238210;
		  /* 82238210h */ case   34:  		/* cmplwi CR6, R20, 0 */
		/* 82238210h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82238210h case   34:*/		return 0x82238214;
		  /* 82238214h */ case   35:  		/* bc 12, CR6_EQ, 1516 */
		/* 82238214h case   35:*/		if ( regs.CR[6].eq ) { return 0x82238800;  }
		/* 82238214h case   35:*/		return 0x82238218;
		  /* 82238218h */ case   36:  		/* lwz R11, <#[R20 + 32]> */
		/* 82238218h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000020) );
		/* 82238218h case   36:*/		return 0x8223821C;
		  /* 8223821Ch */ case   37:  		/* cmpwi CR6, R11, 20 */
		/* 8223821Ch case   37:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000014);
		/* 8223821Ch case   37:*/		return 0x82238220;
		  /* 82238220h */ case   38:  		/* bc 4, CR6_EQ, 1504 */
		/* 82238220h case   38:*/		if ( !regs.CR[6].eq ) { return 0x82238800;  }
		/* 82238220h case   38:*/		return 0x82238224;
		  /* 82238224h */ case   39:  		/* lwz R25, <#[R20 + 36]> */
		/* 82238224h case   39:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R20 + 0x00000024) );
		/* 82238224h case   39:*/		return 0x82238228;
		  /* 82238228h */ case   40:  		/* li R27, 0 */
		/* 82238228h case   40:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82238228h case   40:*/		return 0x8223822C;
		  /* 8223822Ch */ case   41:  		/* li R21, 0 */
		/* 8223822Ch case   41:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8223822Ch case   41:*/		return 0x82238230;
		  /* 82238230h */ case   42:  		/* mr R18, R17 */
		/* 82238230h case   42:*/		regs.R18 = regs.R17;
		/* 82238230h case   42:*/		return 0x82238234;
		  /* 82238234h */ case   43:  		/* lwz R19, <#[R25 + 4]> */
		/* 82238234h case   43:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R25 + 0x00000004) );
		/* 82238234h case   43:*/		return 0x82238238;
		  /* 82238238h */ case   44:  		/* lwz R11, <#[R25 + 4]> */
		/* 82238238h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 82238238h case   44:*/		return 0x8223823C;
		  /* 8223823Ch */ case   45:  		/* cmplw CR6, R18, R11 */
		/* 8223823Ch case   45:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R11);
		/* 8223823Ch case   45:*/		return 0x82238240;
		  /* 82238240h */ case   46:  		/* bc 4, CR6_GT, 12 */
		/* 82238240h case   46:*/		if ( !regs.CR[6].gt ) { return 0x8223824C;  }
		/* 82238240h case   46:*/		return 0x82238244;
		  /* 82238244h */ case   47:  		/* li R11, 0 */
		/* 82238244h case   47:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82238244h case   47:*/		return 0x82238248;
		  /* 82238248h */ case   48:  		/* b 16 */
		/* 82238248h case   48:*/		return 0x82238258;
		/* 82238248h case   48:*/		return 0x8223824C;
	}
	return 0x8223824C;
} // Block from 82238188h-8223824Ch (49 instructions)

//////////////////////////////////////////////////////
// Block at 8223824Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223824C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223824C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223824C);
		  /* 8223824Ch */ case    0:  		/* lwz R10, <#[R25 + 8]> */
		/* 8223824Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000008) );
		/* 8223824Ch case    0:*/		return 0x82238250;
		  /* 82238250h */ case    1:  		/* mr R11, R17 */
		/* 82238250h case    1:*/		regs.R11 = regs.R17;
		/* 82238250h case    1:*/		return 0x82238254;
		  /* 82238254h */ case    2:  		/* lwzx R27, <#[R10 + R21]> */
		/* 82238254h case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + regs.R21 + 0x00000000) );
		/* 82238254h case    2:*/		return 0x82238258;
	}
	return 0x82238258;
} // Block from 8223824Ch-82238258h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82238258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238258);
		  /* 82238258h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82238258h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82238258h case    0:*/		return 0x8223825C;
		  /* 8223825Ch */ case    1:  		/* bc 12, CR0_EQ, 1364 */
		/* 8223825Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x822387B0;  }
		/* 8223825Ch case    1:*/		return 0x82238260;
		  /* 82238260h */ case    2:  		/* lwz R11, <#[R27 + 228]> */
		/* 82238260h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000E4) );
		/* 82238260h case    2:*/		return 0x82238264;
		  /* 82238264h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82238264h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82238264h case    3:*/		return 0x82238268;
		  /* 82238268h */ case    4:  		/* bc 12, CR0_EQ, 1340 */
		/* 82238268h case    4:*/		if ( regs.CR[0].eq ) { return 0x822387A4;  }
		/* 82238268h case    4:*/		return 0x8223826C;
		  /* 8223826Ch */ case    5:  		/* lwz R11, <#[R27 + 20]> */
		/* 8223826Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 8223826Ch case    5:*/		return 0x82238270;
		  /* 82238270h */ case    6:  		/* mr R26, R17 */
		/* 82238270h case    6:*/		regs.R26 = regs.R17;
		/* 82238270h case    6:*/		return 0x82238274;
		  /* 82238274h */ case    7:  		/* cmpwi CR6, R11, 1 */
		/* 82238274h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82238274h case    7:*/		return 0x82238278;
		  /* 82238278h */ case    8:  		/* bc 12, CR6_LT, 1324 */
		/* 82238278h case    8:*/		if ( regs.CR[6].lt ) { return 0x822387A4;  }
		/* 82238278h case    8:*/		return 0x8223827C;
		  /* 8223827Ch */ case    9:  		/* addi R24, R27, 32 */
		/* 8223827Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R27,0x20);
		/* 8223827Ch case    9:*/		return 0x82238280;
		  /* 82238280h */ case   10:  		/* lwz R11, <#[R24]> */
		/* 82238280h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82238280h case   10:*/		return 0x82238284;
		  /* 82238284h */ case   11:  		/* cmplw CR6, R20, R11 */
		/* 82238284h case   11:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R11);
		/* 82238284h case   11:*/		return 0x82238288;
		  /* 82238288h */ case   12:  		/* bc 4, CR6_EQ, 1284 */
		/* 82238288h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8223878C;  }
		/* 82238288h case   12:*/		return 0x8223828C;
		  /* 8223828Ch */ case   13:  		/* lwz R31, <#[R30 + 12]> */
		/* 8223828Ch case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000000C) );
		/* 8223828Ch case   13:*/		return 0x82238290;
		  /* 82238290h */ case   14:  		/* lwz R28, <#[R20 + 12]> */
		/* 82238290h case   14:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R20 + 0x0000000C) );
		/* 82238290h case   14:*/		return 0x82238294;
		  /* 82238294h */ case   15:  		/* lwz R3, <#[R31 + 1488]> */
		/* 82238294h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005D0) );
		/* 82238294h case   15:*/		return 0x82238298;
		  /* 82238298h */ case   16:  		/* lwz R11, <#[R3]> */
		/* 82238298h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82238298h case   16:*/		return 0x8223829C;
		  /* 8223829Ch */ case   17:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223829Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223829Ch case   17:*/		return 0x822382A0;
		  /* 822382A0h */ case   18:  		/* mtspr CTR, R11 */
		/* 822382A0h case   18:*/		regs.CTR = regs.R11;
		/* 822382A0h case   18:*/		return 0x822382A4;
		  /* 822382A4h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 822382A4h case   19:*/		if ( 1 ) { regs.LR = 0x822382A8; return (uint32)regs.CTR; }
		/* 822382A4h case   19:*/		return 0x822382A8;
		  /* 822382A8h */ case   20:  		/* lis R11, -32222 */
		/* 822382A8h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 822382A8h case   20:*/		return 0x822382AC;
		  /* 822382ACh */ case   21:  		/* mr R5, R3 */
		/* 822382ACh case   21:*/		regs.R5 = regs.R3;
		/* 822382ACh case   21:*/		return 0x822382B0;
		  /* 822382B0h */ case   22:  		/* lwz R3, <#[R30 + 16]> */
		/* 822382B0h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 822382B0h case   22:*/		return 0x822382B4;
		  /* 822382B4h */ case   23:  		/* mr R4, R28 */
		/* 822382B4h case   23:*/		regs.R4 = regs.R28;
		/* 822382B4h case   23:*/		return 0x822382B8;
		  /* 822382B8h */ case   24:  		/* addi R6, R11, -12392 */
		/* 822382B8h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 822382B8h case   24:*/		return 0x822382BC;
		  /* 822382BCh */ case   25:  		/* mr R7, R31 */
		/* 822382BCh case   25:*/		regs.R7 = regs.R31;
		/* 822382BCh case   25:*/		return 0x822382C0;
		  /* 822382C0h */ case   26:  		/* bl -14984 */
		/* 822382C0h case   26:*/		regs.LR = 0x822382C4; return 0x82234838;
		/* 822382C0h case   26:*/		return 0x822382C4;
		  /* 822382C4h */ case   27:  		/* cmpwi CR6, R3, 1 */
		/* 822382C4h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 822382C4h case   27:*/		return 0x822382C8;
		  /* 822382C8h */ case   28:  		/* bc 4, CR6_EQ, 484 */
		/* 822382C8h case   28:*/		if ( !regs.CR[6].eq ) { return 0x822384AC;  }
		/* 822382C8h case   28:*/		return 0x822382CC;
		  /* 822382CCh */ case   29:  		/* cmplwi CR6, R16, 0 */
		/* 822382CCh case   29:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 822382CCh case   29:*/		return 0x822382D0;
		  /* 822382D0h */ case   30:  		/* bc 4, CR6_EQ, 404 */
		/* 822382D0h case   30:*/		if ( !regs.CR[6].eq ) { return 0x82238464;  }
		/* 822382D0h case   30:*/		return 0x822382D4;
		  /* 822382D4h */ case   31:  		/* li R3, 49 */
		/* 822382D4h case   31:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 822382D4h case   31:*/		return 0x822382D8;
		  /* 822382D8h */ case   32:  		/* lwz R4, <#[R30 + 12]> */
		/* 822382D8h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 822382D8h case   32:*/		return 0x822382DC;
		  /* 822382DCh */ case   33:  		/* bl 121940 */
		/* 822382DCh case   33:*/		regs.LR = 0x822382E0; return 0x82255F30;
		/* 822382DCh case   33:*/		return 0x822382E0;
		  /* 822382E0h */ case   34:  		/* lwz R10, <#[R30 + 12]> */
		/* 822382E0h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 822382E0h case   34:*/		return 0x822382E4;
		  /* 822382E4h */ case   35:  		/* li R4, 0 */
		/* 822382E4h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822382E4h case   35:*/		return 0x822382E8;
		  /* 822382E8h */ case   36:  		/* mr R31, R3 */
		/* 822382E8h case   36:*/		regs.R31 = regs.R3;
		/* 822382E8h case   36:*/		return 0x822382EC;
		  /* 822382ECh */ case   37:  		/* lwz R11, <#[R10 + 1508]> */
		/* 822382ECh case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 822382ECh case   37:*/		return 0x822382F0;
		  /* 822382F0h */ case   38:  		/* addi R5, R11, -1 */
		/* 822382F0h case   38:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 822382F0h case   38:*/		return 0x822382F4;
		  /* 822382F4h */ case   39:  		/* stw R5, <#[R10 + 1508]> */
		/* 822382F4h case   39:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 822382F4h case   39:*/		return 0x822382F8;
		  /* 822382F8h */ case   40:  		/* lwz R3, <#[R30 + 172]> */
		/* 822382F8h case   40:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000000AC) );
		/* 822382F8h case   40:*/		return 0x822382FC;
		  /* 822382FCh */ case   41:  		/* bl 54548 */
		/* 822382FCh case   41:*/		regs.LR = 0x82238300; return 0x82245810;
		/* 822382FCh case   41:*/		return 0x82238300;
		  /* 82238300h */ case   42:  		/* mr R16, R3 */
		/* 82238300h case   42:*/		regs.R16 = regs.R3;
		/* 82238300h case   42:*/		return 0x82238304;
		  /* 82238304h */ case   43:  		/* mr R3, R31 */
		/* 82238304h case   43:*/		regs.R3 = regs.R31;
		/* 82238304h case   43:*/		return 0x82238308;
		  /* 82238308h */ case   44:  		/* mr R5, R16 */
		/* 82238308h case   44:*/		regs.R5 = regs.R16;
		/* 82238308h case   44:*/		return 0x8223830C;
		  /* 8223830Ch */ case   45:  		/* li R4, 0 */
		/* 8223830Ch case   45:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223830Ch case   45:*/		return 0x82238310;
		  /* 82238310h */ case   46:  		/* bl 123016 */
		/* 82238310h case   46:*/		regs.LR = 0x82238314; return 0x82256398;
		/* 82238310h case   46:*/		return 0x82238314;
		  /* 82238314h */ case   47:  		/* mr R3, R31 */
		/* 82238314h case   47:*/		regs.R3 = regs.R31;
		/* 82238314h case   47:*/		return 0x82238318;
		  /* 82238318h */ case   48:  		/* li R4, 1 */
		/* 82238318h case   48:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82238318h case   48:*/		return 0x8223831C;
		  /* 8223831Ch */ case   49:  		/* lwz R5, <#[R1 + 88]> */
		/* 8223831Ch case   49:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000058) );
		/* 8223831Ch case   49:*/		return 0x82238320;
		  /* 82238320h */ case   50:  		/* bl 123000 */
		/* 82238320h case   50:*/		regs.LR = 0x82238324; return 0x82256398;
		/* 82238320h case   50:*/		return 0x82238324;
		  /* 82238324h */ case   51:  		/* lwz R11, <#[R31]> */
		/* 82238324h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238324h case   51:*/		return 0x82238328;
		  /* 82238328h */ case   52:  		/* mr R3, R31 */
		/* 82238328h case   52:*/		regs.R3 = regs.R31;
		/* 82238328h case   52:*/		return 0x8223832C;
		  /* 8223832Ch */ case   53:  		/* li R6, 2 */
		/* 8223832Ch case   53:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8223832Ch case   53:*/		return 0x82238330;
		  /* 82238330h */ case   54:  		/* li R5, 0 */
		/* 82238330h case   54:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82238330h case   54:*/		return 0x82238334;
		  /* 82238334h */ case   55:  		/* li R4, 1 */
		/* 82238334h case   55:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82238334h case   55:*/		return 0x82238338;
		  /* 82238338h */ case   56:  		/* lwz R11, <#[R11 + 88]> */
		/* 82238338h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82238338h case   56:*/		return 0x8223833C;
		  /* 8223833Ch */ case   57:  		/* mtspr CTR, R11 */
		/* 8223833Ch case   57:*/		regs.CTR = regs.R11;
		/* 8223833Ch case   57:*/		return 0x82238340;
		  /* 82238340h */ case   58:  		/* bcctrl 20, CR0_LT */
		/* 82238340h case   58:*/		if ( 1 ) { regs.LR = 0x82238344; return (uint32)regs.CTR; }
		/* 82238340h case   58:*/		return 0x82238344;
		  /* 82238344h */ case   59:  		/* lwz R11, <#[R31]> */
		/* 82238344h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238344h case   59:*/		return 0x82238348;
		  /* 82238348h */ case   60:  		/* mr R3, R31 */
		/* 82238348h case   60:*/		regs.R3 = regs.R31;
		/* 82238348h case   60:*/		return 0x8223834C;
		  /* 8223834Ch */ case   61:  		/* li R6, 3 */
		/* 8223834Ch case   61:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8223834Ch case   61:*/		return 0x82238350;
		  /* 82238350h */ case   62:  		/* li R5, 1 */
		/* 82238350h case   62:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82238350h case   62:*/		return 0x82238354;
		  /* 82238354h */ case   63:  		/* li R4, 1 */
		/* 82238354h case   63:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82238354h case   63:*/		return 0x82238358;
		  /* 82238358h */ case   64:  		/* lwz R11, <#[R11 + 88]> */
		/* 82238358h case   64:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82238358h case   64:*/		return 0x8223835C;
		  /* 8223835Ch */ case   65:  		/* mtspr CTR, R11 */
		/* 8223835Ch case   65:*/		regs.CTR = regs.R11;
		/* 8223835Ch case   65:*/		return 0x82238360;
		  /* 82238360h */ case   66:  		/* bcctrl 20, CR0_LT */
		/* 82238360h case   66:*/		if ( 1 ) { regs.LR = 0x82238364; return (uint32)regs.CTR; }
		/* 82238360h case   66:*/		return 0x82238364;
		  /* 82238364h */ case   67:  		/* stb R17, <#[R31 + 159]> */
		/* 82238364h case   67:*/		cpu::mem::store8( regs, regs.R17, (uint32)(regs.R31 + 0x0000009F) );
		/* 82238364h case   67:*/		return 0x82238368;
		  /* 82238368h */ case   68:  		/* mr R4, R31 */
		/* 82238368h case   68:*/		regs.R4 = regs.R31;
		/* 82238368h case   68:*/		return 0x8223836C;
		  /* 8223836Ch */ case   69:  		/* mr R3, R30 */
		/* 8223836Ch case   69:*/		regs.R3 = regs.R30;
		/* 8223836Ch case   69:*/		return 0x82238370;
		  /* 82238370h */ case   70:  		/* bl -7624 */
		/* 82238370h case   70:*/		regs.LR = 0x82238374; return 0x822365A8;
		/* 82238370h case   70:*/		return 0x82238374;
		  /* 82238374h */ case   71:  		/* mr R4, R31 */
		/* 82238374h case   71:*/		regs.R4 = regs.R31;
		/* 82238374h case   71:*/		return 0x82238378;
		  /* 82238378h */ case   72:  		/* lwz R3, <#[R30 + 164]> */
		/* 82238378h case   72:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000000A4) );
		/* 82238378h case   72:*/		return 0x8223837C;
		  /* 8223837Ch */ case   73:  		/* bl 134068 */
		/* 8223837Ch case   73:*/		regs.LR = 0x82238380; return 0x82258F30;
		/* 8223837Ch case   73:*/		return 0x82238380;
		  /* 82238380h */ case   74:  		/* mr R3, R31 */
		/* 82238380h case   74:*/		regs.R3 = regs.R31;
		/* 82238380h case   74:*/		return 0x82238384;
		  /* 82238384h */ case   75:  		/* bl 121916 */
		/* 82238384h case   75:*/		regs.LR = 0x82238388; return 0x82255FC0;
		/* 82238384h case   75:*/		return 0x82238388;
		  /* 82238388h */ case   76:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238388h case   76:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238388h case   76:*/		return 0x8223838C;
		  /* 8223838Ch */ case   77:  		/* bc 4, CR0_EQ, 28 */
		/* 8223838Ch case   77:*/		if ( !regs.CR[0].eq ) { return 0x822383A8;  }
		/* 8223838Ch case   77:*/		return 0x82238390;
		  /* 82238390h */ case   78:  		/* mr R6, R22 */
		/* 82238390h case   78:*/		regs.R6 = regs.R22;
		/* 82238390h case   78:*/		return 0x82238394;
		  /* 82238394h */ case   79:  		/* lwz R5, <#[R1 + 84]> */
		/* 82238394h case   79:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 82238394h case   79:*/		return 0x82238398;
		  /* 82238398h */ case   80:  		/* mr R4, R23 */
		/* 82238398h case   80:*/		regs.R4 = regs.R23;
		/* 82238398h case   80:*/		return 0x8223839C;
		  /* 8223839Ch */ case   81:  		/* li R7, 2501 */
		/* 8223839Ch case   81:*/		cpu::op::li<0>(regs,&regs.R7,0x9C5);
		/* 8223839Ch case   81:*/		return 0x822383A0;
		  /* 822383A0h */ case   82:  		/* li R3, 0 */
		/* 822383A0h case   82:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822383A0h case   82:*/		return 0x822383A4;
		  /* 822383A4h */ case   83:  		/* bl -919452 */
		/* 822383A4h case   83:*/		regs.LR = 0x822383A8; return 0x82157C08;
		/* 822383A4h case   83:*/		return 0x822383A8;
	}
	return 0x822383A8;
} // Block from 82238258h-822383A8h (84 instructions)

//////////////////////////////////////////////////////
// Block at 822383A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822383A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822383A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822383A8);
		  /* 822383A8h */ case    0:  		/* li R3, 49 */
		/* 822383A8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 822383A8h case    0:*/		return 0x822383AC;
		  /* 822383ACh */ case    1:  		/* lwz R4, <#[R30 + 12]> */
		/* 822383ACh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 822383ACh case    1:*/		return 0x822383B0;
		  /* 822383B0h */ case    2:  		/* bl 121728 */
		/* 822383B0h case    2:*/		regs.LR = 0x822383B4; return 0x82255F30;
		/* 822383B0h case    2:*/		return 0x822383B4;
		  /* 822383B4h */ case    3:  		/* mr R5, R16 */
		/* 822383B4h case    3:*/		regs.R5 = regs.R16;
		/* 822383B4h case    3:*/		return 0x822383B8;
		  /* 822383B8h */ case    4:  		/* li R4, 0 */
		/* 822383B8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822383B8h case    4:*/		return 0x822383BC;
		  /* 822383BCh */ case    5:  		/* mr R31, R3 */
		/* 822383BCh case    5:*/		regs.R31 = regs.R3;
		/* 822383BCh case    5:*/		return 0x822383C0;
		  /* 822383C0h */ case    6:  		/* bl 122840 */
		/* 822383C0h case    6:*/		regs.LR = 0x822383C4; return 0x82256398;
		/* 822383C0h case    6:*/		return 0x822383C4;
		  /* 822383C4h */ case    7:  		/* mr R3, R31 */
		/* 822383C4h case    7:*/		regs.R3 = regs.R31;
		/* 822383C4h case    7:*/		return 0x822383C8;
		  /* 822383C8h */ case    8:  		/* li R5, 1 */
		/* 822383C8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 822383C8h case    8:*/		return 0x822383CC;
		  /* 822383CCh */ case    9:  		/* fmr FR4, FR30 */
		/* 822383CCh case    9:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR30);
		/* 822383CCh case    9:*/		return 0x822383D0;
		  /* 822383D0h */ case   10:  		/* mr R4, R30 */
		/* 822383D0h case   10:*/		regs.R4 = regs.R30;
		/* 822383D0h case   10:*/		return 0x822383D4;
		  /* 822383D4h */ case   11:  		/* fmr FR3, FR31 */
		/* 822383D4h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 822383D4h case   11:*/		return 0x822383D8;
		  /* 822383D8h */ case   12:  		/* fmr FR2, FR31 */
		/* 822383D8h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 822383D8h case   12:*/		return 0x822383DC;
		  /* 822383DCh */ case   13:  		/* fmr FR1, FR31 */
		/* 822383DCh case   13:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 822383DCh case   13:*/		return 0x822383E0;
		  /* 822383E0h */ case   14:  		/* bl 125752 */
		/* 822383E0h case   14:*/		regs.LR = 0x822383E4; return 0x82256F18;
		/* 822383E0h case   14:*/		return 0x822383E4;
		  /* 822383E4h */ case   15:  		/* lwz R11, <#[R31]> */
		/* 822383E4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 822383E4h case   15:*/		return 0x822383E8;
		  /* 822383E8h */ case   16:  		/* mr R3, R31 */
		/* 822383E8h case   16:*/		regs.R3 = regs.R31;
		/* 822383E8h case   16:*/		return 0x822383EC;
		  /* 822383ECh */ case   17:  		/* li R6, 1 */
		/* 822383ECh case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822383ECh case   17:*/		return 0x822383F0;
		  /* 822383F0h */ case   18:  		/* li R5, 0 */
		/* 822383F0h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822383F0h case   18:*/		return 0x822383F4;
		  /* 822383F4h */ case   19:  		/* li R4, 0 */
		/* 822383F4h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822383F4h case   19:*/		return 0x822383F8;
		  /* 822383F8h */ case   20:  		/* lwz R11, <#[R11 + 84]> */
		/* 822383F8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 822383F8h case   20:*/		return 0x822383FC;
		  /* 822383FCh */ case   21:  		/* mtspr CTR, R11 */
		/* 822383FCh case   21:*/		regs.CTR = regs.R11;
		/* 822383FCh case   21:*/		return 0x82238400;
		  /* 82238400h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 82238400h case   22:*/		if ( 1 ) { regs.LR = 0x82238404; return (uint32)regs.CTR; }
		/* 82238400h case   22:*/		return 0x82238404;
		  /* 82238404h */ case   23:  		/* lwz R11, <#[R31]> */
		/* 82238404h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238404h case   23:*/		return 0x82238408;
		  /* 82238408h */ case   24:  		/* mr R3, R31 */
		/* 82238408h case   24:*/		regs.R3 = regs.R31;
		/* 82238408h case   24:*/		return 0x8223840C;
		  /* 8223840Ch */ case   25:  		/* li R6, 1 */
		/* 8223840Ch case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223840Ch case   25:*/		return 0x82238410;
		  /* 82238410h */ case   26:  		/* li R5, 1 */
		/* 82238410h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82238410h case   26:*/		return 0x82238414;
		  /* 82238414h */ case   27:  		/* li R4, 0 */
		/* 82238414h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82238414h case   27:*/		return 0x82238418;
		  /* 82238418h */ case   28:  		/* lwz R11, <#[R11 + 84]> */
		/* 82238418h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82238418h case   28:*/		return 0x8223841C;
		  /* 8223841Ch */ case   29:  		/* mtspr CTR, R11 */
		/* 8223841Ch case   29:*/		regs.CTR = regs.R11;
		/* 8223841Ch case   29:*/		return 0x82238420;
		  /* 82238420h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 82238420h case   30:*/		if ( 1 ) { regs.LR = 0x82238424; return (uint32)regs.CTR; }
		/* 82238420h case   30:*/		return 0x82238424;
		  /* 82238424h */ case   31:  		/* mr R4, R31 */
		/* 82238424h case   31:*/		regs.R4 = regs.R31;
		/* 82238424h case   31:*/		return 0x82238428;
		  /* 82238428h */ case   32:  		/* mr R3, R30 */
		/* 82238428h case   32:*/		regs.R3 = regs.R30;
		/* 82238428h case   32:*/		return 0x8223842C;
		  /* 8223842Ch */ case   33:  		/* bl -7812 */
		/* 8223842Ch case   33:*/		regs.LR = 0x82238430; return 0x822365A8;
		/* 8223842Ch case   33:*/		return 0x82238430;
		  /* 82238430h */ case   34:  		/* mr R4, R31 */
		/* 82238430h case   34:*/		regs.R4 = regs.R31;
		/* 82238430h case   34:*/		return 0x82238434;
		  /* 82238434h */ case   35:  		/* lwz R3, <#[R30 + 164]> */
		/* 82238434h case   35:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000000A4) );
		/* 82238434h case   35:*/		return 0x82238438;
		  /* 82238438h */ case   36:  		/* bl 133880 */
		/* 82238438h case   36:*/		regs.LR = 0x8223843C; return 0x82258F30;
		/* 82238438h case   36:*/		return 0x8223843C;
		  /* 8223843Ch */ case   37:  		/* mr R3, R31 */
		/* 8223843Ch case   37:*/		regs.R3 = regs.R31;
		/* 8223843Ch case   37:*/		return 0x82238440;
		  /* 82238440h */ case   38:  		/* bl 121728 */
		/* 82238440h case   38:*/		regs.LR = 0x82238444; return 0x82255FC0;
		/* 82238440h case   38:*/		return 0x82238444;
		  /* 82238444h */ case   39:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238444h case   39:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238444h case   39:*/		return 0x82238448;
		  /* 82238448h */ case   40:  		/* bc 4, CR0_EQ, 28 */
		/* 82238448h case   40:*/		if ( !regs.CR[0].eq ) { return 0x82238464;  }
		/* 82238448h case   40:*/		return 0x8223844C;
		  /* 8223844Ch */ case   41:  		/* mr R6, R22 */
		/* 8223844Ch case   41:*/		regs.R6 = regs.R22;
		/* 8223844Ch case   41:*/		return 0x82238450;
		  /* 82238450h */ case   42:  		/* lwz R5, <#[R1 + 84]> */
		/* 82238450h case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 82238450h case   42:*/		return 0x82238454;
		  /* 82238454h */ case   43:  		/* mr R4, R23 */
		/* 82238454h case   43:*/		regs.R4 = regs.R23;
		/* 82238454h case   43:*/		return 0x82238458;
		  /* 82238458h */ case   44:  		/* li R7, 2511 */
		/* 82238458h case   44:*/		cpu::op::li<0>(regs,&regs.R7,0x9CF);
		/* 82238458h case   44:*/		return 0x8223845C;
		  /* 8223845Ch */ case   45:  		/* li R3, 0 */
		/* 8223845Ch case   45:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223845Ch case   45:*/		return 0x82238460;
		  /* 82238460h */ case   46:  		/* bl -919640 */
		/* 82238460h case   46:*/		regs.LR = 0x82238464; return 0x82157C08;
		/* 82238460h case   46:*/		return 0x82238464;
	}
	return 0x82238464;
} // Block from 822383A8h-82238464h (47 instructions)

//////////////////////////////////////////////////////
// Block at 82238464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238464);
		  /* 82238464h */ case    0:  		/* mr R5, R16 */
		/* 82238464h case    0:*/		regs.R5 = regs.R16;
		/* 82238464h case    0:*/		return 0x82238468;
		  /* 82238468h */ case    1:  		/* mr R4, R26 */
		/* 82238468h case    1:*/		regs.R4 = regs.R26;
		/* 82238468h case    1:*/		return 0x8223846C;
		  /* 8223846Ch */ case    2:  		/* mr R3, R27 */
		/* 8223846Ch case    2:*/		regs.R3 = regs.R27;
		/* 8223846Ch case    2:*/		return 0x82238470;
		  /* 82238470h */ case    3:  		/* bl 122664 */
		/* 82238470h case    3:*/		regs.LR = 0x82238474; return 0x82256398;
		/* 82238470h case    3:*/		return 0x82238474;
		  /* 82238474h */ case    4:  		/* mr R4, R27 */
		/* 82238474h case    4:*/		regs.R4 = regs.R27;
		/* 82238474h case    4:*/		return 0x82238478;
		  /* 82238478h */ case    5:  		/* mr R3, R30 */
		/* 82238478h case    5:*/		regs.R3 = regs.R30;
		/* 82238478h case    5:*/		return 0x8223847C;
		  /* 8223847Ch */ case    6:  		/* bl -7892 */
		/* 8223847Ch case    6:*/		regs.LR = 0x82238480; return 0x822365A8;
		/* 8223847Ch case    6:*/		return 0x82238480;
		  /* 82238480h */ case    7:  		/* mr R3, R27 */
		/* 82238480h case    7:*/		regs.R3 = regs.R27;
		/* 82238480h case    7:*/		return 0x82238484;
		  /* 82238484h */ case    8:  		/* bl 121660 */
		/* 82238484h case    8:*/		regs.LR = 0x82238488; return 0x82255FC0;
		/* 82238484h case    8:*/		return 0x82238488;
		  /* 82238488h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238488h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238488h case    9:*/		return 0x8223848C;
		  /* 8223848Ch */ case   10:  		/* bc 4, CR0_EQ, 768 */
		/* 8223848Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x8223878C;  }
		/* 8223848Ch case   10:*/		return 0x82238490;
		  /* 82238490h */ case   11:  		/* mr R6, R22 */
		/* 82238490h case   11:*/		regs.R6 = regs.R22;
		/* 82238490h case   11:*/		return 0x82238494;
		  /* 82238494h */ case   12:  		/* lwz R5, <#[R1 + 92]> */
		/* 82238494h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000005C) );
		/* 82238494h case   12:*/		return 0x82238498;
		  /* 82238498h */ case   13:  		/* mr R4, R23 */
		/* 82238498h case   13:*/		regs.R4 = regs.R23;
		/* 82238498h case   13:*/		return 0x8223849C;
		  /* 8223849Ch */ case   14:  		/* li R7, 2516 */
		/* 8223849Ch case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x9D4);
		/* 8223849Ch case   14:*/		return 0x822384A0;
		  /* 822384A0h */ case   15:  		/* li R3, 0 */
		/* 822384A0h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822384A0h case   15:*/		return 0x822384A4;
		  /* 822384A4h */ case   16:  		/* bl -919708 */
		/* 822384A4h case   16:*/		regs.LR = 0x822384A8; return 0x82157C08;
		/* 822384A4h case   16:*/		return 0x822384A8;
		  /* 822384A8h */ case   17:  		/* b 740 */
		/* 822384A8h case   17:*/		return 0x8223878C;
		/* 822384A8h case   17:*/		return 0x822384AC;
	}
	return 0x822384AC;
} // Block from 82238464h-822384ACh (18 instructions)

//////////////////////////////////////////////////////
// Block at 822384ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822384AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822384AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822384AC);
		  /* 822384ACh */ case    0:  		/* lwz R31, <#[R30 + 12]> */
		/* 822384ACh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000000C) );
		/* 822384ACh case    0:*/		return 0x822384B0;
		  /* 822384B0h */ case    1:  		/* lwz R3, <#[R31 + 1488]> */
		/* 822384B0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005D0) );
		/* 822384B0h case    1:*/		return 0x822384B4;
		  /* 822384B4h */ case    2:  		/* lwz R11, <#[R3]> */
		/* 822384B4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 822384B4h case    2:*/		return 0x822384B8;
		  /* 822384B8h */ case    3:  		/* lwz R11, <#[R11 + 28]> */
		/* 822384B8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 822384B8h case    3:*/		return 0x822384BC;
		  /* 822384BCh */ case    4:  		/* mtspr CTR, R11 */
		/* 822384BCh case    4:*/		regs.CTR = regs.R11;
		/* 822384BCh case    4:*/		return 0x822384C0;
		  /* 822384C0h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 822384C0h case    5:*/		if ( 1 ) { regs.LR = 0x822384C4; return (uint32)regs.CTR; }
		/* 822384C0h case    5:*/		return 0x822384C4;
		  /* 822384C4h */ case    6:  		/* lis R11, -32222 */
		/* 822384C4h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 822384C4h case    6:*/		return 0x822384C8;
		  /* 822384C8h */ case    7:  		/* mr R5, R3 */
		/* 822384C8h case    7:*/		regs.R5 = regs.R3;
		/* 822384C8h case    7:*/		return 0x822384CC;
		  /* 822384CCh */ case    8:  		/* lwz R3, <#[R30 + 16]> */
		/* 822384CCh case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 822384CCh case    8:*/		return 0x822384D0;
		  /* 822384D0h */ case    9:  		/* mr R4, R28 */
		/* 822384D0h case    9:*/		regs.R4 = regs.R28;
		/* 822384D0h case    9:*/		return 0x822384D4;
		  /* 822384D4h */ case   10:  		/* addi R6, R11, -12392 */
		/* 822384D4h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 822384D4h case   10:*/		return 0x822384D8;
		  /* 822384D8h */ case   11:  		/* mr R7, R31 */
		/* 822384D8h case   11:*/		regs.R7 = regs.R31;
		/* 822384D8h case   11:*/		return 0x822384DC;
		  /* 822384DCh */ case   12:  		/* bl -15892 */
		/* 822384DCh case   12:*/		regs.LR = 0x822384E0; return 0x822346C8;
		/* 822384DCh case   12:*/		return 0x822384E0;
		  /* 822384E0h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 822384E0h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822384E0h case   13:*/		return 0x822384E4;
		  /* 822384E4h */ case   14:  		/* bc 4, CR0_EQ, 680 */
		/* 822384E4h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8223878C;  }
		/* 822384E4h case   14:*/		return 0x822384E8;
		  /* 822384E8h */ case   15:  		/* li R3, 49 */
		/* 822384E8h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 822384E8h case   15:*/		return 0x822384EC;
		  /* 822384ECh */ case   16:  		/* lwz R4, <#[R30 + 12]> */
		/* 822384ECh case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 822384ECh case   16:*/		return 0x822384F0;
		  /* 822384F0h */ case   17:  		/* bl 121408 */
		/* 822384F0h case   17:*/		regs.LR = 0x822384F4; return 0x82255F30;
		/* 822384F0h case   17:*/		return 0x822384F4;
		  /* 822384F4h */ case   18:  		/* lwz R10, <#[R30 + 12]> */
		/* 822384F4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 822384F4h case   18:*/		return 0x822384F8;
		  /* 822384F8h */ case   19:  		/* li R4, 0 */
		/* 822384F8h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822384F8h case   19:*/		return 0x822384FC;
		  /* 822384FCh */ case   20:  		/* mr R31, R3 */
		/* 822384FCh case   20:*/		regs.R31 = regs.R3;
		/* 822384FCh case   20:*/		return 0x82238500;
		  /* 82238500h */ case   21:  		/* lwz R11, <#[R10 + 1508]> */
		/* 82238500h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 82238500h case   21:*/		return 0x82238504;
		  /* 82238504h */ case   22:  		/* addi R5, R11, -1 */
		/* 82238504h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 82238504h case   22:*/		return 0x82238508;
		  /* 82238508h */ case   23:  		/* stw R5, <#[R10 + 1508]> */
		/* 82238508h case   23:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 82238508h case   23:*/		return 0x8223850C;
		  /* 8223850Ch */ case   24:  		/* lwz R3, <#[R30 + 172]> */
		/* 8223850Ch case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000000AC) );
		/* 8223850Ch case   24:*/		return 0x82238510;
		  /* 82238510h */ case   25:  		/* bl 54016 */
		/* 82238510h case   25:*/		regs.LR = 0x82238514; return 0x82245810;
		/* 82238510h case   25:*/		return 0x82238514;
		  /* 82238514h */ case   26:  		/* mr R29, R3 */
		/* 82238514h case   26:*/		regs.R29 = regs.R3;
		/* 82238514h case   26:*/		return 0x82238518;
		  /* 82238518h */ case   27:  		/* mr R3, R31 */
		/* 82238518h case   27:*/		regs.R3 = regs.R31;
		/* 82238518h case   27:*/		return 0x8223851C;
		  /* 8223851Ch */ case   28:  		/* mr R5, R29 */
		/* 8223851Ch case   28:*/		regs.R5 = regs.R29;
		/* 8223851Ch case   28:*/		return 0x82238520;
		  /* 82238520h */ case   29:  		/* li R4, 0 */
		/* 82238520h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82238520h case   29:*/		return 0x82238524;
		  /* 82238524h */ case   30:  		/* bl 122484 */
		/* 82238524h case   30:*/		regs.LR = 0x82238528; return 0x82256398;
		/* 82238524h case   30:*/		return 0x82238528;
		  /* 82238528h */ case   31:  		/* mr R3, R31 */
		/* 82238528h case   31:*/		regs.R3 = regs.R31;
		/* 82238528h case   31:*/		return 0x8223852C;
		  /* 8223852Ch */ case   32:  		/* li R4, 1 */
		/* 8223852Ch case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223852Ch case   32:*/		return 0x82238530;
		  /* 82238530h */ case   33:  		/* lwz R5, <#[R1 + 88]> */
		/* 82238530h case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000058) );
		/* 82238530h case   33:*/		return 0x82238534;
		  /* 82238534h */ case   34:  		/* bl 122468 */
		/* 82238534h case   34:*/		regs.LR = 0x82238538; return 0x82256398;
		/* 82238534h case   34:*/		return 0x82238538;
		  /* 82238538h */ case   35:  		/* lwz R11, <#[R31]> */
		/* 82238538h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238538h case   35:*/		return 0x8223853C;
		  /* 8223853Ch */ case   36:  		/* mr R3, R31 */
		/* 8223853Ch case   36:*/		regs.R3 = regs.R31;
		/* 8223853Ch case   36:*/		return 0x82238540;
		  /* 82238540h */ case   37:  		/* li R6, 2 */
		/* 82238540h case   37:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82238540h case   37:*/		return 0x82238544;
		  /* 82238544h */ case   38:  		/* li R5, 0 */
		/* 82238544h case   38:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82238544h case   38:*/		return 0x82238548;
		  /* 82238548h */ case   39:  		/* li R4, 1 */
		/* 82238548h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82238548h case   39:*/		return 0x8223854C;
		  /* 8223854Ch */ case   40:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223854Ch case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223854Ch case   40:*/		return 0x82238550;
		  /* 82238550h */ case   41:  		/* mtspr CTR, R11 */
		/* 82238550h case   41:*/		regs.CTR = regs.R11;
		/* 82238550h case   41:*/		return 0x82238554;
		  /* 82238554h */ case   42:  		/* bcctrl 20, CR0_LT */
		/* 82238554h case   42:*/		if ( 1 ) { regs.LR = 0x82238558; return (uint32)regs.CTR; }
		/* 82238554h case   42:*/		return 0x82238558;
		  /* 82238558h */ case   43:  		/* lwz R11, <#[R31]> */
		/* 82238558h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238558h case   43:*/		return 0x8223855C;
		  /* 8223855Ch */ case   44:  		/* mr R3, R31 */
		/* 8223855Ch case   44:*/		regs.R3 = regs.R31;
		/* 8223855Ch case   44:*/		return 0x82238560;
		  /* 82238560h */ case   45:  		/* li R6, 3 */
		/* 82238560h case   45:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82238560h case   45:*/		return 0x82238564;
		  /* 82238564h */ case   46:  		/* li R5, 1 */
		/* 82238564h case   46:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82238564h case   46:*/		return 0x82238568;
		  /* 82238568h */ case   47:  		/* li R4, 1 */
		/* 82238568h case   47:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82238568h case   47:*/		return 0x8223856C;
		  /* 8223856Ch */ case   48:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223856Ch case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223856Ch case   48:*/		return 0x82238570;
		  /* 82238570h */ case   49:  		/* mtspr CTR, R11 */
		/* 82238570h case   49:*/		regs.CTR = regs.R11;
		/* 82238570h case   49:*/		return 0x82238574;
		  /* 82238574h */ case   50:  		/* bcctrl 20, CR0_LT */
		/* 82238574h case   50:*/		if ( 1 ) { regs.LR = 0x82238578; return (uint32)regs.CTR; }
		/* 82238574h case   50:*/		return 0x82238578;
		  /* 82238578h */ case   51:  		/* stb R17, <#[R31 + 159]> */
		/* 82238578h case   51:*/		cpu::mem::store8( regs, regs.R17, (uint32)(regs.R31 + 0x0000009F) );
		/* 82238578h case   51:*/		return 0x8223857C;
		  /* 8223857Ch */ case   52:  		/* mr R4, R31 */
		/* 8223857Ch case   52:*/		regs.R4 = regs.R31;
		/* 8223857Ch case   52:*/		return 0x82238580;
		  /* 82238580h */ case   53:  		/* mr R3, R30 */
		/* 82238580h case   53:*/		regs.R3 = regs.R30;
		/* 82238580h case   53:*/		return 0x82238584;
		  /* 82238584h */ case   54:  		/* bl -8156 */
		/* 82238584h case   54:*/		regs.LR = 0x82238588; return 0x822365A8;
		/* 82238584h case   54:*/		return 0x82238588;
		  /* 82238588h */ case   55:  		/* mr R4, R31 */
		/* 82238588h case   55:*/		regs.R4 = regs.R31;
		/* 82238588h case   55:*/		return 0x8223858C;
		  /* 8223858Ch */ case   56:  		/* lwz R3, <#[R30 + 164]> */
		/* 8223858Ch case   56:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000000A4) );
		/* 8223858Ch case   56:*/		return 0x82238590;
		  /* 82238590h */ case   57:  		/* bl 133536 */
		/* 82238590h case   57:*/		regs.LR = 0x82238594; return 0x82258F30;
		/* 82238590h case   57:*/		return 0x82238594;
		  /* 82238594h */ case   58:  		/* mr R3, R31 */
		/* 82238594h case   58:*/		regs.R3 = regs.R31;
		/* 82238594h case   58:*/		return 0x82238598;
		  /* 82238598h */ case   59:  		/* bl 121384 */
		/* 82238598h case   59:*/		regs.LR = 0x8223859C; return 0x82255FC0;
		/* 82238598h case   59:*/		return 0x8223859C;
		  /* 8223859Ch */ case   60:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223859Ch case   60:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223859Ch case   60:*/		return 0x822385A0;
		  /* 822385A0h */ case   61:  		/* bc 4, CR0_EQ, 28 */
		/* 822385A0h case   61:*/		if ( !regs.CR[0].eq ) { return 0x822385BC;  }
		/* 822385A0h case   61:*/		return 0x822385A4;
		  /* 822385A4h */ case   62:  		/* mr R6, R22 */
		/* 822385A4h case   62:*/		regs.R6 = regs.R22;
		/* 822385A4h case   62:*/		return 0x822385A8;
		  /* 822385A8h */ case   63:  		/* mr R5, R15 */
		/* 822385A8h case   63:*/		regs.R5 = regs.R15;
		/* 822385A8h case   63:*/		return 0x822385AC;
		  /* 822385ACh */ case   64:  		/* mr R4, R23 */
		/* 822385ACh case   64:*/		regs.R4 = regs.R23;
		/* 822385ACh case   64:*/		return 0x822385B0;
		  /* 822385B0h */ case   65:  		/* li R7, 2536 */
		/* 822385B0h case   65:*/		cpu::op::li<0>(regs,&regs.R7,0x9E8);
		/* 822385B0h case   65:*/		return 0x822385B4;
		  /* 822385B4h */ case   66:  		/* li R3, 0 */
		/* 822385B4h case   66:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822385B4h case   66:*/		return 0x822385B8;
	}
	return 0x822385B8;
} // Block from 822384ACh-822385B8h (67 instructions)

//////////////////////////////////////////////////////
// Block at 822385B8h
// Function '?MaybeExportZAndW@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822385B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822385B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822385B8);
		  /* 822385B8h */ case    0:  		/* bl -919984 */
		/* 822385B8h case    0:*/		regs.LR = 0x822385BC; return 0x82157C08;
		/* 822385B8h case    0:*/		return 0x822385BC;
	}
	return 0x822385BC;
} // Block from 822385B8h-822385BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822385BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822385BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822385BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822385BC);
		  /* 822385BCh */ case    0:  		/* li R3, 49 */
		/* 822385BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 822385BCh case    0:*/		return 0x822385C0;
		  /* 822385C0h */ case    1:  		/* lwz R4, <#[R30 + 12]> */
		/* 822385C0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 822385C0h case    1:*/		return 0x822385C4;
		  /* 822385C4h */ case    2:  		/* bl 121196 */
		/* 822385C4h case    2:*/		regs.LR = 0x822385C8; return 0x82255F30;
		/* 822385C4h case    2:*/		return 0x822385C8;
		  /* 822385C8h */ case    3:  		/* mr R5, R29 */
		/* 822385C8h case    3:*/		regs.R5 = regs.R29;
		/* 822385C8h case    3:*/		return 0x822385CC;
		  /* 822385CCh */ case    4:  		/* li R4, 0 */
		/* 822385CCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822385CCh case    4:*/		return 0x822385D0;
		  /* 822385D0h */ case    5:  		/* mr R31, R3 */
		/* 822385D0h case    5:*/		regs.R31 = regs.R3;
		/* 822385D0h case    5:*/		return 0x822385D4;
		  /* 822385D4h */ case    6:  		/* bl 122308 */
		/* 822385D4h case    6:*/		regs.LR = 0x822385D8; return 0x82256398;
		/* 822385D4h case    6:*/		return 0x822385D8;
		  /* 822385D8h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 822385D8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 822385D8h case    7:*/		return 0x822385DC;
		  /* 822385DCh */ case    8:  		/* mr R3, R31 */
		/* 822385DCh case    8:*/		regs.R3 = regs.R31;
		/* 822385DCh case    8:*/		return 0x822385E0;
		  /* 822385E0h */ case    9:  		/* li R6, 1 */
		/* 822385E0h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822385E0h case    9:*/		return 0x822385E4;
		  /* 822385E4h */ case   10:  		/* li R5, 0 */
		/* 822385E4h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822385E4h case   10:*/		return 0x822385E8;
		  /* 822385E8h */ case   11:  		/* li R4, 0 */
		/* 822385E8h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822385E8h case   11:*/		return 0x822385EC;
		  /* 822385ECh */ case   12:  		/* lwz R11, <#[R11 + 84]> */
		/* 822385ECh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 822385ECh case   12:*/		return 0x822385F0;
		  /* 822385F0h */ case   13:  		/* mtspr CTR, R11 */
		/* 822385F0h case   13:*/		regs.CTR = regs.R11;
		/* 822385F0h case   13:*/		return 0x822385F4;
		  /* 822385F4h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822385F4h case   14:*/		if ( 1 ) { regs.LR = 0x822385F8; return (uint32)regs.CTR; }
		/* 822385F4h case   14:*/		return 0x822385F8;
		  /* 822385F8h */ case   15:  		/* lwz R11, <#[R31]> */
		/* 822385F8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 822385F8h case   15:*/		return 0x822385FC;
		  /* 822385FCh */ case   16:  		/* mr R3, R31 */
		/* 822385FCh case   16:*/		regs.R3 = regs.R31;
		/* 822385FCh case   16:*/		return 0x82238600;
		  /* 82238600h */ case   17:  		/* li R6, 1 */
		/* 82238600h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82238600h case   17:*/		return 0x82238604;
		  /* 82238604h */ case   18:  		/* li R5, 1 */
		/* 82238604h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82238604h case   18:*/		return 0x82238608;
		  /* 82238608h */ case   19:  		/* li R4, 0 */
		/* 82238608h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82238608h case   19:*/		return 0x8223860C;
		  /* 8223860Ch */ case   20:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223860Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223860Ch case   20:*/		return 0x82238610;
		  /* 82238610h */ case   21:  		/* mtspr CTR, R11 */
		/* 82238610h case   21:*/		regs.CTR = regs.R11;
		/* 82238610h case   21:*/		return 0x82238614;
		  /* 82238614h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 82238614h case   22:*/		if ( 1 ) { regs.LR = 0x82238618; return (uint32)regs.CTR; }
		/* 82238614h case   22:*/		return 0x82238618;
		  /* 82238618h */ case   23:  		/* mr R5, R20 */
		/* 82238618h case   23:*/		regs.R5 = regs.R20;
		/* 82238618h case   23:*/		return 0x8223861C;
		  /* 8223861Ch */ case   24:  		/* li R4, 1 */
		/* 8223861Ch case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223861Ch case   24:*/		return 0x82238620;
		  /* 82238620h */ case   25:  		/* mr R3, R31 */
		/* 82238620h case   25:*/		regs.R3 = regs.R31;
		/* 82238620h case   25:*/		return 0x82238624;
		  /* 82238624h */ case   26:  		/* bl 122228 */
		/* 82238624h case   26:*/		regs.LR = 0x82238628; return 0x82256398;
		/* 82238624h case   26:*/		return 0x82238628;
		  /* 82238628h */ case   27:  		/* lwz R14, <#[R30 + 12]> */
		/* 82238628h case   27:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R30 + 0x0000000C) );
		/* 82238628h case   27:*/		return 0x8223862C;
		  /* 8223862Ch */ case   28:  		/* lwz R3, <#[R14 + 1488]> */
		/* 8223862Ch case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x000005D0) );
		/* 8223862Ch case   28:*/		return 0x82238630;
		  /* 82238630h */ case   29:  		/* lwz R11, <#[R3]> */
		/* 82238630h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82238630h case   29:*/		return 0x82238634;
		  /* 82238634h */ case   30:  		/* lwz R11, <#[R11 + 28]> */
		/* 82238634h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82238634h case   30:*/		return 0x82238638;
		  /* 82238638h */ case   31:  		/* mtspr CTR, R11 */
		/* 82238638h case   31:*/		regs.CTR = regs.R11;
		/* 82238638h case   31:*/		return 0x8223863C;
		  /* 8223863Ch */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 8223863Ch case   32:*/		if ( 1 ) { regs.LR = 0x82238640; return (uint32)regs.CTR; }
		/* 8223863Ch case   32:*/		return 0x82238640;
		  /* 82238640h */ case   33:  		/* lis R11, -32222 */
		/* 82238640h case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82238640h case   33:*/		return 0x82238644;
		  /* 82238644h */ case   34:  		/* mr R5, R3 */
		/* 82238644h case   34:*/		regs.R5 = regs.R3;
		/* 82238644h case   34:*/		return 0x82238648;
		  /* 82238648h */ case   35:  		/* lwz R3, <#[R30 + 16]> */
		/* 82238648h case   35:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82238648h case   35:*/		return 0x8223864C;
		  /* 8223864Ch */ case   36:  		/* mr R4, R28 */
		/* 8223864Ch case   36:*/		regs.R4 = regs.R28;
		/* 8223864Ch case   36:*/		return 0x82238650;
		  /* 82238650h */ case   37:  		/* addi R6, R11, -12392 */
		/* 82238650h case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82238650h case   37:*/		return 0x82238654;
		  /* 82238654h */ case   38:  		/* mr R7, R14 */
		/* 82238654h case   38:*/		regs.R7 = regs.R14;
		/* 82238654h case   38:*/		return 0x82238658;
		  /* 82238658h */ case   39:  		/* bl -15504 */
		/* 82238658h case   39:*/		regs.LR = 0x8223865C; return 0x822349C8;
		/* 82238658h case   39:*/		return 0x8223865C;
		  /* 8223865Ch */ case   40:  		/* cmpwi CR6, R3, 1 */
		/* 8223865Ch case   40:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223865Ch case   40:*/		return 0x82238660;
		  /* 82238660h */ case   41:  		/* bc 4, CR6_EQ, 12 */
		/* 82238660h case   41:*/		if ( !regs.CR[6].eq ) { return 0x8223866C;  }
		/* 82238660h case   41:*/		return 0x82238664;
		  /* 82238664h */ case   42:  		/* li R6, 0 */
		/* 82238664h case   42:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82238664h case   42:*/		return 0x82238668;
		  /* 82238668h */ case   43:  		/* b 68 */
		/* 82238668h case   43:*/		return 0x822386AC;
		/* 82238668h case   43:*/		return 0x8223866C;
	}
	return 0x8223866C;
} // Block from 822385BCh-8223866Ch (44 instructions)

//////////////////////////////////////////////////////
// Block at 8223866Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223866C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223866C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223866C);
		  /* 8223866Ch */ case    0:  		/* lwz R14, <#[R30 + 12]> */
		/* 8223866Ch case    0:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R30 + 0x0000000C) );
		/* 8223866Ch case    0:*/		return 0x82238670;
		  /* 82238670h */ case    1:  		/* lwz R3, <#[R14 + 1488]> */
		/* 82238670h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x000005D0) );
		/* 82238670h case    1:*/		return 0x82238674;
		  /* 82238674h */ case    2:  		/* lwz R11, <#[R3]> */
		/* 82238674h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82238674h case    2:*/		return 0x82238678;
		  /* 82238678h */ case    3:  		/* lwz R11, <#[R11 + 28]> */
		/* 82238678h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82238678h case    3:*/		return 0x8223867C;
		  /* 8223867Ch */ case    4:  		/* mtspr CTR, R11 */
		/* 8223867Ch case    4:*/		regs.CTR = regs.R11;
		/* 8223867Ch case    4:*/		return 0x82238680;
		  /* 82238680h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 82238680h case    5:*/		if ( 1 ) { regs.LR = 0x82238684; return (uint32)regs.CTR; }
		/* 82238680h case    5:*/		return 0x82238684;
		  /* 82238684h */ case    6:  		/* lis R11, -32222 */
		/* 82238684h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82238684h case    6:*/		return 0x82238688;
		  /* 82238688h */ case    7:  		/* mr R5, R3 */
		/* 82238688h case    7:*/		regs.R5 = regs.R3;
		/* 82238688h case    7:*/		return 0x8223868C;
		  /* 8223868Ch */ case    8:  		/* lwz R3, <#[R30 + 16]> */
		/* 8223868Ch case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 8223868Ch case    8:*/		return 0x82238690;
		  /* 82238690h */ case    9:  		/* mr R4, R28 */
		/* 82238690h case    9:*/		regs.R4 = regs.R28;
		/* 82238690h case    9:*/		return 0x82238694;
		  /* 82238694h */ case   10:  		/* addi R6, R11, -12392 */
		/* 82238694h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82238694h case   10:*/		return 0x82238698;
		  /* 82238698h */ case   11:  		/* mr R7, R14 */
		/* 82238698h case   11:*/		regs.R7 = regs.R14;
		/* 82238698h case   11:*/		return 0x8223869C;
		  /* 8223869Ch */ case   12:  		/* bl -15172 */
		/* 8223869Ch case   12:*/		regs.LR = 0x822386A0; return 0x82234B58;
		/* 8223869Ch case   12:*/		return 0x822386A0;
		  /* 822386A0h */ case   13:  		/* cmpwi CR6, R3, 1 */
		/* 822386A0h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 822386A0h case   13:*/		return 0x822386A4;
		  /* 822386A4h */ case   14:  		/* bc 4, CR6_EQ, 72 */
		/* 822386A4h case   14:*/		if ( !regs.CR[6].eq ) { return 0x822386EC;  }
		/* 822386A4h case   14:*/		return 0x822386A8;
		  /* 822386A8h */ case   15:  		/* li R6, 2 */
		/* 822386A8h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 822386A8h case   15:*/		return 0x822386AC;
	}
	return 0x822386AC;
} // Block from 8223866Ch-822386ACh (16 instructions)

//////////////////////////////////////////////////////
// Block at 822386ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822386AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822386AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822386AC);
		  /* 822386ACh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 822386ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 822386ACh case    0:*/		return 0x822386B0;
		  /* 822386B0h */ case    1:  		/* li R5, 2 */
		/* 822386B0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 822386B0h case    1:*/		return 0x822386B4;
		  /* 822386B4h */ case    2:  		/* li R4, 1 */
		/* 822386B4h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822386B4h case    2:*/		return 0x822386B8;
		  /* 822386B8h */ case    3:  		/* mr R3, R31 */
		/* 822386B8h case    3:*/		regs.R3 = regs.R31;
		/* 822386B8h case    3:*/		return 0x822386BC;
		  /* 822386BCh */ case    4:  		/* lwz R11, <#[R11 + 88]> */
		/* 822386BCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 822386BCh case    4:*/		return 0x822386C0;
		  /* 822386C0h */ case    5:  		/* mtspr CTR, R11 */
		/* 822386C0h case    5:*/		regs.CTR = regs.R11;
		/* 822386C0h case    5:*/		return 0x822386C4;
		  /* 822386C4h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 822386C4h case    6:*/		if ( 1 ) { regs.LR = 0x822386C8; return (uint32)regs.CTR; }
		/* 822386C4h case    6:*/		return 0x822386C8;
		  /* 822386C8h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 822386C8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 822386C8h case    7:*/		return 0x822386CC;
		  /* 822386CCh */ case    8:  		/* li R6, 3 */
		/* 822386CCh case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 822386CCh case    8:*/		return 0x822386D0;
		  /* 822386D0h */ case    9:  		/* li R5, 3 */
		/* 822386D0h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 822386D0h case    9:*/		return 0x822386D4;
		  /* 822386D4h */ case   10:  		/* li R4, 1 */
		/* 822386D4h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822386D4h case   10:*/		return 0x822386D8;
		  /* 822386D8h */ case   11:  		/* mr R3, R31 */
		/* 822386D8h case   11:*/		regs.R3 = regs.R31;
		/* 822386D8h case   11:*/		return 0x822386DC;
		  /* 822386DCh */ case   12:  		/* lwz R11, <#[R11 + 88]> */
		/* 822386DCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 822386DCh case   12:*/		return 0x822386E0;
		  /* 822386E0h */ case   13:  		/* mtspr CTR, R11 */
		/* 822386E0h case   13:*/		regs.CTR = regs.R11;
		/* 822386E0h case   13:*/		return 0x822386E4;
		  /* 822386E4h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822386E4h case   14:*/		if ( 1 ) { regs.LR = 0x822386E8; return (uint32)regs.CTR; }
		/* 822386E4h case   14:*/		return 0x822386E8;
		  /* 822386E8h */ case   15:  		/* b 28 */
		/* 822386E8h case   15:*/		return 0x82238704;
		/* 822386E8h case   15:*/		return 0x822386EC;
	}
	return 0x822386EC;
} // Block from 822386ACh-822386ECh (16 instructions)

//////////////////////////////////////////////////////
// Block at 822386ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822386EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822386EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822386EC);
		  /* 822386ECh */ case    0:  		/* mr R6, R22 */
		/* 822386ECh case    0:*/		regs.R6 = regs.R22;
		/* 822386ECh case    0:*/		return 0x822386F0;
		  /* 822386F0h */ case    1:  		/* lwz R5, <#[R1 + 100]> */
		/* 822386F0h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 822386F0h case    1:*/		return 0x822386F4;
		  /* 822386F4h */ case    2:  		/* mr R4, R23 */
		/* 822386F4h case    2:*/		regs.R4 = regs.R23;
		/* 822386F4h case    2:*/		return 0x822386F8;
		  /* 822386F8h */ case    3:  		/* li R7, 2565 */
		/* 822386F8h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0xA05);
		/* 822386F8h case    3:*/		return 0x822386FC;
		  /* 822386FCh */ case    4:  		/* li R3, 0 */
		/* 822386FCh case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822386FCh case    4:*/		return 0x82238700;
		  /* 82238700h */ case    5:  		/* bl -920312 */
		/* 82238700h case    5:*/		regs.LR = 0x82238704; return 0x82157C08;
		/* 82238700h case    5:*/		return 0x82238704;
	}
	return 0x82238704;
} // Block from 822386ECh-82238704h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82238704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238704);
		  /* 82238704h */ case    0:  		/* mr R4, R31 */
		/* 82238704h case    0:*/		regs.R4 = regs.R31;
		/* 82238704h case    0:*/		return 0x82238708;
		  /* 82238708h */ case    1:  		/* mr R3, R30 */
		/* 82238708h case    1:*/		regs.R3 = regs.R30;
		/* 82238708h case    1:*/		return 0x8223870C;
		  /* 8223870Ch */ case    2:  		/* bl -8548 */
		/* 8223870Ch case    2:*/		regs.LR = 0x82238710; return 0x822365A8;
		/* 8223870Ch case    2:*/		return 0x82238710;
		  /* 82238710h */ case    3:  		/* mr R4, R31 */
		/* 82238710h case    3:*/		regs.R4 = regs.R31;
		/* 82238710h case    3:*/		return 0x82238714;
		  /* 82238714h */ case    4:  		/* lwz R3, <#[R30 + 164]> */
		/* 82238714h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000000A4) );
		/* 82238714h case    4:*/		return 0x82238718;
		  /* 82238718h */ case    5:  		/* bl 133144 */
		/* 82238718h case    5:*/		regs.LR = 0x8223871C; return 0x82258F30;
		/* 82238718h case    5:*/		return 0x8223871C;
		  /* 8223871Ch */ case    6:  		/* mr R3, R31 */
		/* 8223871Ch case    6:*/		regs.R3 = regs.R31;
		/* 8223871Ch case    6:*/		return 0x82238720;
		  /* 82238720h */ case    7:  		/* bl 120992 */
		/* 82238720h case    7:*/		regs.LR = 0x82238724; return 0x82255FC0;
		/* 82238720h case    7:*/		return 0x82238724;
		  /* 82238724h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238724h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238724h case    8:*/		return 0x82238728;
		  /* 82238728h */ case    9:  		/* bc 4, CR0_EQ, 28 */
		/* 82238728h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82238744;  }
		/* 82238728h case    9:*/		return 0x8223872C;
		  /* 8223872Ch */ case   10:  		/* mr R6, R22 */
		/* 8223872Ch case   10:*/		regs.R6 = regs.R22;
		/* 8223872Ch case   10:*/		return 0x82238730;
		  /* 82238730h */ case   11:  		/* mr R5, R15 */
		/* 82238730h case   11:*/		regs.R5 = regs.R15;
		/* 82238730h case   11:*/		return 0x82238734;
		  /* 82238734h */ case   12:  		/* mr R4, R23 */
		/* 82238734h case   12:*/		regs.R4 = regs.R23;
		/* 82238734h case   12:*/		return 0x82238738;
		  /* 82238738h */ case   13:  		/* li R7, 2570 */
		/* 82238738h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0xA0A);
		/* 82238738h case   13:*/		return 0x8223873C;
		  /* 8223873Ch */ case   14:  		/* li R3, 0 */
		/* 8223873Ch case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223873Ch case   14:*/		return 0x82238740;
		  /* 82238740h */ case   15:  		/* bl -920376 */
		/* 82238740h case   15:*/		regs.LR = 0x82238744; return 0x82157C08;
		/* 82238740h case   15:*/		return 0x82238744;
	}
	return 0x82238744;
} // Block from 82238704h-82238744h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82238744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238744);
		  /* 82238744h */ case    0:  		/* mr R5, R29 */
		/* 82238744h case    0:*/		regs.R5 = regs.R29;
		/* 82238744h case    0:*/		return 0x82238748;
		  /* 82238748h */ case    1:  		/* mr R4, R26 */
		/* 82238748h case    1:*/		regs.R4 = regs.R26;
		/* 82238748h case    1:*/		return 0x8223874C;
		  /* 8223874Ch */ case    2:  		/* mr R3, R27 */
		/* 8223874Ch case    2:*/		regs.R3 = regs.R27;
		/* 8223874Ch case    2:*/		return 0x82238750;
		  /* 82238750h */ case    3:  		/* bl 121928 */
		/* 82238750h case    3:*/		regs.LR = 0x82238754; return 0x82256398;
		/* 82238750h case    3:*/		return 0x82238754;
		  /* 82238754h */ case    4:  		/* mr R4, R27 */
		/* 82238754h case    4:*/		regs.R4 = regs.R27;
		/* 82238754h case    4:*/		return 0x82238758;
		  /* 82238758h */ case    5:  		/* mr R3, R30 */
		/* 82238758h case    5:*/		regs.R3 = regs.R30;
		/* 82238758h case    5:*/		return 0x8223875C;
		  /* 8223875Ch */ case    6:  		/* bl -8628 */
		/* 8223875Ch case    6:*/		regs.LR = 0x82238760; return 0x822365A8;
		/* 8223875Ch case    6:*/		return 0x82238760;
		  /* 82238760h */ case    7:  		/* mr R3, R27 */
		/* 82238760h case    7:*/		regs.R3 = regs.R27;
		/* 82238760h case    7:*/		return 0x82238764;
		  /* 82238764h */ case    8:  		/* bl 120924 */
		/* 82238764h case    8:*/		regs.LR = 0x82238768; return 0x82255FC0;
		/* 82238764h case    8:*/		return 0x82238768;
		  /* 82238768h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238768h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238768h case    9:*/		return 0x8223876C;
		  /* 8223876Ch */ case   10:  		/* bc 4, CR0_EQ, 28 */
		/* 8223876Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x82238788;  }
		/* 8223876Ch case   10:*/		return 0x82238770;
		  /* 82238770h */ case   11:  		/* mr R6, R22 */
		/* 82238770h case   11:*/		regs.R6 = regs.R22;
		/* 82238770h case   11:*/		return 0x82238774;
		  /* 82238774h */ case   12:  		/* lwz R5, <#[R1 + 92]> */
		/* 82238774h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000005C) );
		/* 82238774h case   12:*/		return 0x82238778;
		  /* 82238778h */ case   13:  		/* mr R4, R23 */
		/* 82238778h case   13:*/		regs.R4 = regs.R23;
		/* 82238778h case   13:*/		return 0x8223877C;
		  /* 8223877Ch */ case   14:  		/* li R7, 2575 */
		/* 8223877Ch case   14:*/		cpu::op::li<0>(regs,&regs.R7,0xA0F);
		/* 8223877Ch case   14:*/		return 0x82238780;
		  /* 82238780h */ case   15:  		/* li R3, 0 */
		/* 82238780h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82238780h case   15:*/		return 0x82238784;
		  /* 82238784h */ case   16:  		/* bl -920444 */
		/* 82238784h case   16:*/		regs.LR = 0x82238788; return 0x82157C08;
		/* 82238784h case   16:*/		return 0x82238788;
	}
	return 0x82238788;
} // Block from 82238744h-82238788h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82238788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238788);
		  /* 82238788h */ case    0:  		/* lwz R29, <#[R1 + 80]> */
		/* 82238788h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82238788h case    0:*/		return 0x8223878C;
	}
	return 0x8223878C;
} // Block from 82238788h-8223878Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223878Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223878C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223878C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223878C);
		  /* 8223878Ch */ case    0:  		/* lwz R11, <#[R27 + 20]> */
		/* 8223878Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 8223878Ch case    0:*/		return 0x82238790;
		  /* 82238790h */ case    1:  		/* addi R26, R26, 1 */
		/* 82238790h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82238790h case    1:*/		return 0x82238794;
		  /* 82238794h */ case    2:  		/* addi R24, R24, 4 */
		/* 82238794h case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 82238794h case    2:*/		return 0x82238798;
		  /* 82238798h */ case    3:  		/* cmpw CR6, R26, R11 */
		/* 82238798h case    3:*/		cpu::op::cmpw<6>(regs,regs.R26,regs.R11);
		/* 82238798h case    3:*/		return 0x8223879C;
		  /* 8223879Ch */ case    4:  		/* bc 4, CR6_GT, -1308 */
		/* 8223879Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x82238280;  }
		/* 8223879Ch case    4:*/		return 0x822387A0;
		  /* 822387A0h */ case    5:  		/* lwz R28, <#[R1 + 96]> */
		/* 822387A0h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000060) );
		/* 822387A0h case    5:*/		return 0x822387A4;
	}
	return 0x822387A4;
} // Block from 8223878Ch-822387A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822387A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822387A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822387A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822387A4);
		  /* 822387A4h */ case    0:  		/* addi R18, R18, 1 */
		/* 822387A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 822387A4h case    0:*/		return 0x822387A8;
		  /* 822387A8h */ case    1:  		/* addi R21, R21, 4 */
		/* 822387A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 822387A8h case    1:*/		return 0x822387AC;
		  /* 822387ACh */ case    2:  		/* b -1396 */
		/* 822387ACh case    2:*/		return 0x82238238;
		/* 822387ACh case    2:*/		return 0x822387B0;
	}
	return 0x822387B0;
} // Block from 822387A4h-822387B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822387B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822387B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822387B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822387B0);
		  /* 822387B0h */ case    0:  		/* cmpwi CR6, R19, 0 */
		/* 822387B0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000000);
		/* 822387B0h case    0:*/		return 0x822387B4;
		  /* 822387B4h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 822387B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82238800;  }
		/* 822387B4h case    1:*/		return 0x822387B8;
		  /* 822387B8h */ case    2:  		/* rlwinm R31, R19, 2, 0, 29 */
		/* 822387B8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R19);
		/* 822387B8h case    2:*/		return 0x822387BC;
		  /* 822387BCh */ case    3:  		/* lwz R11, <#[R25 + 4]> */
		/* 822387BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 822387BCh case    3:*/		return 0x822387C0;
		  /* 822387C0h */ case    4:  		/* addi R19, R19, -1 */
		/* 822387C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0xFFFFFFFF);
		/* 822387C0h case    4:*/		return 0x822387C4;
		  /* 822387C4h */ case    5:  		/* addi R31, R31, -4 */
		/* 822387C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFFFFFFFC);
		/* 822387C4h case    5:*/		return 0x822387C8;
		  /* 822387C8h */ case    6:  		/* cmplw CR6, R19, R11 */
		/* 822387C8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R11);
		/* 822387C8h case    6:*/		return 0x822387CC;
		  /* 822387CCh */ case    7:  		/* bc 4, CR6_LT, 16 */
		/* 822387CCh case    7:*/		if ( !regs.CR[6].lt ) { return 0x822387DC;  }
		/* 822387CCh case    7:*/		return 0x822387D0;
		  /* 822387D0h */ case    8:  		/* lwz R11, <#[R25 + 8]> */
		/* 822387D0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 822387D0h case    8:*/		return 0x822387D4;
		  /* 822387D4h */ case    9:  		/* add R11, R11, R31 */
		/* 822387D4h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 822387D4h case    9:*/		return 0x822387D8;
		  /* 822387D8h */ case   10:  		/* b 20 */
		/* 822387D8h case   10:*/		return 0x822387EC;
		/* 822387D8h case   10:*/		return 0x822387DC;
	}
	return 0x822387DC;
} // Block from 822387B0h-822387DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 822387DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822387DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822387DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822387DC);
		  /* 822387DCh */ case    0:  		/* mr R4, R19 */
		/* 822387DCh case    0:*/		regs.R4 = regs.R19;
		/* 822387DCh case    0:*/		return 0x822387E0;
		  /* 822387E0h */ case    1:  		/* mr R3, R25 */
		/* 822387E0h case    1:*/		regs.R3 = regs.R25;
		/* 822387E0h case    1:*/		return 0x822387E4;
		  /* 822387E4h */ case    2:  		/* bl 111324 */
		/* 822387E4h case    2:*/		regs.LR = 0x822387E8; return 0x82253AC0;
		/* 822387E4h case    2:*/		return 0x822387E8;
		  /* 822387E8h */ case    3:  		/* mr R11, R3 */
		/* 822387E8h case    3:*/		regs.R11 = regs.R3;
		/* 822387E8h case    3:*/		return 0x822387EC;
	}
	return 0x822387EC;
} // Block from 822387DCh-822387ECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 822387ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822387EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822387EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822387EC);
		  /* 822387ECh */ case    0:  		/* mr R3, R20 */
		/* 822387ECh case    0:*/		regs.R3 = regs.R20;
		/* 822387ECh case    0:*/		return 0x822387F0;
		  /* 822387F0h */ case    1:  		/* lwz R4, <#[R11]> */
		/* 822387F0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822387F0h case    1:*/		return 0x822387F4;
		  /* 822387F4h */ case    2:  		/* bl 114884 */
		/* 822387F4h case    2:*/		regs.LR = 0x822387F8; return 0x822548B8;
		/* 822387F4h case    2:*/		return 0x822387F8;
		  /* 822387F8h */ case    3:  		/* cmpwi CR6, R19, 0 */
		/* 822387F8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000000);
		/* 822387F8h case    3:*/		return 0x822387FC;
		  /* 822387FCh */ case    4:  		/* bc 4, CR6_EQ, -64 */
		/* 822387FCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x822387BC;  }
		/* 822387FCh case    4:*/		return 0x82238800;
	}
	return 0x82238800;
} // Block from 822387ECh-82238800h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82238800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238800);
		  /* 82238800h */ case    0:  		/* addic. R28, R28, -1 */
		/* 82238800h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82238800h case    0:*/		return 0x82238804;
		  /* 82238804h */ case    1:  		/* addi R29, R29, 4 */
		/* 82238804h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82238804h case    1:*/		return 0x82238808;
		  /* 82238808h */ case    2:  		/* stw R28, <#[R1 + 96]> */
		/* 82238808h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000060) );
		/* 82238808h case    2:*/		return 0x8223880C;
		  /* 8223880Ch */ case    3:  		/* stw R29, <#[R1 + 80]> */
		/* 8223880Ch case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 8223880Ch case    3:*/		return 0x82238810;
		  /* 82238810h */ case    4:  		/* bc 4, CR0_EQ, -1540 */
		/* 82238810h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8223820C;  }
		/* 82238810h case    4:*/		return 0x82238814;
		  /* 82238814h */ case    5:  		/* addi R1, R1, 272 */
		/* 82238814h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 82238814h case    5:*/		return 0x82238818;
		  /* 82238818h */ case    6:  		/* lfd FR30, <#[R1 - 168]> */
		/* 82238818h case    6:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82238818h case    6:*/		return 0x8223881C;
		  /* 8223881Ch */ case    7:  		/* lfd FR31, <#[R1 - 160]> */
		/* 8223881Ch case    7:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8223881Ch case    7:*/		return 0x82238820;
		  /* 82238820h */ case    8:  		/* b -1734064 */
		/* 82238820h case    8:*/		return 0x82091270;
		/* 82238820h case    8:*/		return 0x82238824;
		  /* 82238824h */ case    9:  		/* nop */
		/* 82238824h case    9:*/		cpu::op::nop();
		/* 82238824h case    9:*/		return 0x82238828;
	}
	return 0x82238828;
} // Block from 82238800h-82238828h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82238828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238828);
		  /* 82238828h */ case    0:  		/* mfspr R12, LR */
		/* 82238828h case    0:*/		regs.R12 = regs.LR;
		/* 82238828h case    0:*/		return 0x8223882C;
		  /* 8223882Ch */ case    1:  		/* bl -1734104 */
		/* 8223882Ch case    1:*/		regs.LR = 0x82238830; return 0x82091254;
		/* 8223882Ch case    1:*/		return 0x82238830;
		  /* 82238830h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82238830h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82238830h case    2:*/		return 0x82238834;
		  /* 82238834h */ case    3:  		/* lwz R11, <#[R3 + 116]> */
		/* 82238834h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000074) );
		/* 82238834h case    3:*/		return 0x82238838;
		  /* 82238838h */ case    4:  		/* mr R31, R3 */
		/* 82238838h case    4:*/		regs.R31 = regs.R3;
		/* 82238838h case    4:*/		return 0x8223883C;
		  /* 8223883Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8223883Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223883Ch case    5:*/		return 0x82238840;
		  /* 82238840h */ case    6:  		/* bc 4, CR6_EQ, 276 */
		/* 82238840h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82238954;  }
		/* 82238840h case    6:*/		return 0x82238844;
		  /* 82238844h */ case    7:  		/* lwz R3, <#[R3 + 168]> */
		/* 82238844h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000000A8) );
		/* 82238844h case    7:*/		return 0x82238848;
		  /* 82238848h */ case    8:  		/* bl 134256 */
		/* 82238848h case    8:*/		regs.LR = 0x8223884C; return 0x822594B8;
		/* 82238848h case    8:*/		return 0x8223884C;
		  /* 8223884Ch */ case    9:  		/* lis R11, -32253 */
		/* 8223884Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8223884Ch case    9:*/		return 0x82238850;
		  /* 82238850h */ case   10:  		/* lis R10, -32252 */
		/* 82238850h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82238850h case   10:*/		return 0x82238854;
		  /* 82238854h */ case   11:  		/* cmpwi CR6, R3, 1 */
		/* 82238854h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82238854h case   11:*/		return 0x82238858;
		  /* 82238858h */ case   12:  		/* addi R29, R11, 27460 */
		/* 82238858h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 82238858h case   12:*/		return 0x8223885C;
		  /* 8223885Ch */ case   13:  		/* addi R28, R10, 8520 */
		/* 8223885Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x2148);
		/* 8223885Ch case   13:*/		return 0x82238860;
		  /* 82238860h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 82238860h case   14:*/		if ( regs.CR[6].eq ) { return 0x82238880;  }
		/* 82238860h case   14:*/		return 0x82238864;
		  /* 82238864h */ case   15:  		/* lis R11, -32252 */
		/* 82238864h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82238864h case   15:*/		return 0x82238868;
		  /* 82238868h */ case   16:  		/* mr R6, R28 */
		/* 82238868h case   16:*/		regs.R6 = regs.R28;
		/* 82238868h case   16:*/		return 0x8223886C;
		  /* 8223886Ch */ case   17:  		/* addi R5, R11, 9004 */
		/* 8223886Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x232C);
		/* 8223886Ch case   17:*/		return 0x82238870;
		  /* 82238870h */ case   18:  		/* mr R4, R29 */
		/* 82238870h case   18:*/		regs.R4 = regs.R29;
		/* 82238870h case   18:*/		return 0x82238874;
		  /* 82238874h */ case   19:  		/* li R7, 2604 */
		/* 82238874h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0xA2C);
		/* 82238874h case   19:*/		return 0x82238878;
		  /* 82238878h */ case   20:  		/* li R3, 0 */
		/* 82238878h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82238878h case   20:*/		return 0x8223887C;
		  /* 8223887Ch */ case   21:  		/* bl -920692 */
		/* 8223887Ch case   21:*/		regs.LR = 0x82238880; return 0x82157C08;
		/* 8223887Ch case   21:*/		return 0x82238880;
	}
	return 0x82238880;
} // Block from 82238828h-82238880h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82238880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238880);
		  /* 82238880h */ case    0:  		/* lwz R9, <#[R31 + 168]> */
		/* 82238880h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000000A8) );
		/* 82238880h case    0:*/		return 0x82238884;
		  /* 82238884h */ case    1:  		/* li R10, 0 */
		/* 82238884h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82238884h case    1:*/		return 0x82238888;
		  /* 82238888h */ case    2:  		/* lwz R30, <#[R1 + 80]> */
		/* 82238888h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 82238888h case    2:*/		return 0x8223888C;
		  /* 8223888Ch */ case    3:  		/* li R11, 0 */
		/* 8223888Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223888Ch case    3:*/		return 0x82238890;
		  /* 82238890h */ case    4:  		/* li R8, 1 */
		/* 82238890h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82238890h case    4:*/		return 0x82238894;
		  /* 82238894h */ case    5:  		/* lwz R9, <#[R9 + 60]> */
		/* 82238894h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000003C) );
		/* 82238894h case    5:*/		return 0x82238898;
		  /* 82238898h */ case    6:  		/* lwz R6, <#[R9 + 4]> */
		/* 82238898h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000004) );
		/* 82238898h case    6:*/		return 0x8223889C;
		  /* 8223889Ch */ case    7:  		/* cmplw CR6, R8, R6 */
		/* 8223889Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R6);
		/* 8223889Ch case    7:*/		return 0x822388A0;
		  /* 822388A0h */ case    8:  		/* bc 4, CR6_GT, 12 */
		/* 822388A0h case    8:*/		if ( !regs.CR[6].gt ) { return 0x822388AC;  }
		/* 822388A0h case    8:*/		return 0x822388A4;
		  /* 822388A4h */ case    9:  		/* li R7, 0 */
		/* 822388A4h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822388A4h case    9:*/		return 0x822388A8;
		  /* 822388A8h */ case   10:  		/* b 16 */
		/* 822388A8h case   10:*/		return 0x822388B8;
		/* 822388A8h case   10:*/		return 0x822388AC;
	}
	return 0x822388AC;
} // Block from 82238880h-822388ACh (11 instructions)

//////////////////////////////////////////////////////
// Block at 822388ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822388AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822388AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822388AC);
		  /* 822388ACh */ case    0:  		/* lwz R10, <#[R9 + 8]> */
		/* 822388ACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 822388ACh case    0:*/		return 0x822388B0;
		  /* 822388B0h */ case    1:  		/* li R7, 1 */
		/* 822388B0h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 822388B0h case    1:*/		return 0x822388B4;
		  /* 822388B4h */ case    2:  		/* lwzx R10, <#[R10 + R11]> */
		/* 822388B4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 822388B4h case    2:*/		return 0x822388B8;
	}
	return 0x822388B8;
} // Block from 822388ACh-822388B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822388B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822388B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822388B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822388B8);
		  /* 822388B8h */ case    0:  		/* rlwinm. R7, R7, 0, 24, 31 */
		/* 822388B8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R7,regs.R7);
		/* 822388B8h case    0:*/		return 0x822388BC;
		  /* 822388BCh */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 822388BCh case    1:*/		if ( regs.CR[0].eq ) { return 0x822388D0;  }
		/* 822388BCh case    1:*/		return 0x822388C0;
		  /* 822388C0h */ case    2:  		/* mr R30, R10 */
		/* 822388C0h case    2:*/		regs.R30 = regs.R10;
		/* 822388C0h case    2:*/		return 0x822388C4;
		  /* 822388C4h */ case    3:  		/* addi R8, R8, 1 */
		/* 822388C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 822388C4h case    3:*/		return 0x822388C8;
		  /* 822388C8h */ case    4:  		/* addi R11, R11, 4 */
		/* 822388C8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822388C8h case    4:*/		return 0x822388CC;
		  /* 822388CCh */ case    5:  		/* b -48 */
		/* 822388CCh case    5:*/		return 0x8223889C;
		/* 822388CCh case    5:*/		return 0x822388D0;
	}
	return 0x822388D0;
} // Block from 822388B8h-822388D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822388D0h
// Function '?MaybeExportEdgeFlags@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822388D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822388D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822388D0);
		  /* 822388D0h */ case    0:  		/* li R3, 49 */
		/* 822388D0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 822388D0h case    0:*/		return 0x822388D4;
		  /* 822388D4h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 822388D4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 822388D4h case    1:*/		return 0x822388D8;
		  /* 822388D8h */ case    2:  		/* bl 120408 */
		/* 822388D8h case    2:*/		regs.LR = 0x822388DC; return 0x82255F30;
		/* 822388D8h case    2:*/		return 0x822388DC;
		  /* 822388DCh */ case    3:  		/* li R11, 5 */
		/* 822388DCh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 822388DCh case    3:*/		return 0x822388E0;
		  /* 822388E0h */ case    4:  		/* li R10, 0 */
		/* 822388E0h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 822388E0h case    4:*/		return 0x822388E4;
		  /* 822388E4h */ case    5:  		/* stw R11, <#[R3 + 80]> */
		/* 822388E4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 822388E4h case    5:*/		return 0x822388E8;
		  /* 822388E8h */ case    6:  		/* lis R9, -32256 */
		/* 822388E8h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 822388E8h case    6:*/		return 0x822388EC;
		  /* 822388ECh */ case    7:  		/* stw R10, <#[R3 + 56]> */
		/* 822388ECh case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000038) );
		/* 822388ECh case    7:*/		return 0x822388F0;
		  /* 822388F0h */ case    8:  		/* li R5, 1 */
		/* 822388F0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 822388F0h case    8:*/		return 0x822388F4;
		  /* 822388F4h */ case    9:  		/* mr R4, R31 */
		/* 822388F4h case    9:*/		regs.R4 = regs.R31;
		/* 822388F4h case    9:*/		return 0x822388F8;
		  /* 822388F8h */ case   10:  		/* mr R27, R3 */
		/* 822388F8h case   10:*/		regs.R27 = regs.R3;
		/* 822388F8h case   10:*/		return 0x822388FC;
		  /* 822388FCh */ case   11:  		/* lfs FR4, <#[R9 + 1816]> */
		/* 822388FCh case   11:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R9 + 0x00000718) );
		/* 822388FCh case   11:*/		return 0x82238900;
		  /* 82238900h */ case   12:  		/* fmr FR3, FR4 */
		/* 82238900h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 82238900h case   12:*/		return 0x82238904;
		  /* 82238904h */ case   13:  		/* fmr FR2, FR4 */
		/* 82238904h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 82238904h case   13:*/		return 0x82238908;
		  /* 82238908h */ case   14:  		/* fmr FR1, FR4 */
		/* 82238908h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 82238908h case   14:*/		return 0x8223890C;
		  /* 8223890Ch */ case   15:  		/* bl 124428 */
		/* 8223890Ch case   15:*/		regs.LR = 0x82238910; return 0x82256F18;
		/* 8223890Ch case   15:*/		return 0x82238910;
		  /* 82238910h */ case   16:  		/* mr R4, R27 */
		/* 82238910h case   16:*/		regs.R4 = regs.R27;
		/* 82238910h case   16:*/		return 0x82238914;
		  /* 82238914h */ case   17:  		/* mr R3, R31 */
		/* 82238914h case   17:*/		regs.R3 = regs.R31;
		/* 82238914h case   17:*/		return 0x82238918;
		  /* 82238918h */ case   18:  		/* bl -9072 */
		/* 82238918h case   18:*/		regs.LR = 0x8223891C; return 0x822365A8;
		/* 82238918h case   18:*/		return 0x8223891C;
		  /* 8223891Ch */ case   19:  		/* mr R4, R27 */
		/* 8223891Ch case   19:*/		regs.R4 = regs.R27;
		/* 8223891Ch case   19:*/		return 0x82238920;
		  /* 82238920h */ case   20:  		/* mr R3, R30 */
		/* 82238920h case   20:*/		regs.R3 = regs.R30;
		/* 82238920h case   20:*/		return 0x82238924;
		  /* 82238924h */ case   21:  		/* bl 132620 */
		/* 82238924h case   21:*/		regs.LR = 0x82238928; return 0x82258F30;
		/* 82238924h case   21:*/		return 0x82238928;
		  /* 82238928h */ case   22:  		/* mr R3, R27 */
		/* 82238928h case   22:*/		regs.R3 = regs.R27;
		/* 82238928h case   22:*/		return 0x8223892C;
		  /* 8223892Ch */ case   23:  		/* bl 120468 */
		/* 8223892Ch case   23:*/		regs.LR = 0x82238930; return 0x82255FC0;
		/* 8223892Ch case   23:*/		return 0x82238930;
		  /* 82238930h */ case   24:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238930h case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238930h case   24:*/		return 0x82238934;
		  /* 82238934h */ case   25:  		/* bc 4, CR0_EQ, 32 */
		/* 82238934h case   25:*/		if ( !regs.CR[0].eq ) { return 0x82238954;  }
		/* 82238934h case   25:*/		return 0x82238938;
		  /* 82238938h */ case   26:  		/* lis R11, -32252 */
		/* 82238938h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82238938h case   26:*/		return 0x8223893C;
		  /* 8223893Ch */ case   27:  		/* mr R6, R28 */
		/* 8223893Ch case   27:*/		regs.R6 = regs.R28;
		/* 8223893Ch case   27:*/		return 0x82238940;
		  /* 82238940h */ case   28:  		/* addi R5, R11, 8912 */
		/* 82238940h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x22D0);
		/* 82238940h case   28:*/		return 0x82238944;
		  /* 82238944h */ case   29:  		/* mr R4, R29 */
		/* 82238944h case   29:*/		regs.R4 = regs.R29;
		/* 82238944h case   29:*/		return 0x82238948;
		  /* 82238948h */ case   30:  		/* li R7, 2616 */
		/* 82238948h case   30:*/		cpu::op::li<0>(regs,&regs.R7,0xA38);
		/* 82238948h case   30:*/		return 0x8223894C;
		  /* 8223894Ch */ case   31:  		/* li R3, 0 */
		/* 8223894Ch case   31:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223894Ch case   31:*/		return 0x82238950;
		  /* 82238950h */ case   32:  		/* bl -920904 */
		/* 82238950h case   32:*/		regs.LR = 0x82238954; return 0x82157C08;
		/* 82238950h case   32:*/		return 0x82238954;
	}
	return 0x82238954;
} // Block from 822388D0h-82238954h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82238954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238954);
		  /* 82238954h */ case    0:  		/* lwz R11, <#[R31 + 168]> */
		/* 82238954h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000A8) );
		/* 82238954h case    0:*/		return 0x82238958;
		  /* 82238958h */ case    1:  		/* lwz R11, <#[R11 + 28]> */
		/* 82238958h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82238958h case    1:*/		return 0x8223895C;
		  /* 8223895Ch */ case    2:  		/* lwz R10, <#[R11 + 8]> */
		/* 8223895Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8223895Ch case    2:*/		return 0x82238960;
		  /* 82238960h */ case    3:  		/* b 36 */
		/* 82238960h case    3:*/		return 0x82238984;
		/* 82238960h case    3:*/		return 0x82238964;
		  /* 82238964h */ case    4:  		/* lwz R9, <#[R11 + 228]> */
		/* 82238964h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x000000E4) );
		/* 82238964h case    4:*/		return 0x82238968;
		  /* 82238968h */ case    5:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 82238968h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 82238968h case    5:*/		return 0x8223896C;
		  /* 8223896Ch */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 8223896Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x8223897C;  }
		/* 8223896Ch case    6:*/		return 0x82238970;
		  /* 82238970h */ case    7:  		/* lwz R9, <#[R11 + 80]> */
		/* 82238970h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000050) );
		/* 82238970h case    7:*/		return 0x82238974;
		  /* 82238974h */ case    8:  		/* cmpwi CR6, R9, 5 */
		/* 82238974h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000005);
		/* 82238974h case    8:*/		return 0x82238978;
		  /* 82238978h */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 82238978h case    9:*/		if ( regs.CR[6].eq ) { return 0x82238990;  }
		/* 82238978h case    9:*/		return 0x8223897C;
	}
	return 0x8223897C;
} // Block from 82238954h-8223897Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223897Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223897C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223897C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223897C);
		  /* 8223897Ch */ case    0:  		/* mr R11, R10 */
		/* 8223897Ch case    0:*/		regs.R11 = regs.R10;
		/* 8223897Ch case    0:*/		return 0x82238980;
		  /* 82238980h */ case    1:  		/* lwz R10, <#[R10 + 8]> */
		/* 82238980h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82238980h case    1:*/		return 0x82238984;
	}
	return 0x82238984;
} // Block from 8223897Ch-82238984h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82238984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238984);
		  /* 82238984h */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 82238984h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 82238984h case    0:*/		return 0x82238988;
		  /* 82238988h */ case    1:  		/* bc 4, CR6_EQ, -36 */
		/* 82238988h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82238964;  }
		/* 82238988h case    1:*/		return 0x8223898C;
		  /* 8223898Ch */ case    2:  		/* b 8 */
		/* 8223898Ch case    2:*/		return 0x82238994;
		/* 8223898Ch case    2:*/		return 0x82238990;
	}
	return 0x82238990;
} // Block from 82238984h-82238990h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82238990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238990);
		  /* 82238990h */ case    0:  		/* stw R11, <#[R31 + 116]> */
		/* 82238990h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000074) );
		/* 82238990h case    0:*/		return 0x82238994;
	}
	return 0x82238994;
} // Block from 82238990h-82238994h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82238994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238994);
		  /* 82238994h */ case    0:  		/* addi R1, R1, 144 */
		/* 82238994h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82238994h case    0:*/		return 0x82238998;
		  /* 82238998h */ case    1:  		/* b -1734388 */
		/* 82238998h case    1:*/		return 0x820912A4;
		/* 82238998h case    1:*/		return 0x8223899C;
		  /* 8223899Ch */ case    2:  		/* nop */
		/* 8223899Ch case    2:*/		cpu::op::nop();
		/* 8223899Ch case    2:*/		return 0x822389A0;
	}
	return 0x822389A0;
} // Block from 82238994h-822389A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822389A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822389A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822389A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822389A0);
		  /* 822389A0h */ case    0:  		/* mfspr R12, LR */
		/* 822389A0h case    0:*/		regs.R12 = regs.LR;
		/* 822389A0h case    0:*/		return 0x822389A4;
		  /* 822389A4h */ case    1:  		/* bl -1734472 */
		/* 822389A4h case    1:*/		regs.LR = 0x822389A8; return 0x8209125C;
		/* 822389A4h case    1:*/		return 0x822389A8;
		  /* 822389A8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 822389A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 822389A8h case    2:*/		return 0x822389AC;
		  /* 822389ACh */ case    3:  		/* lis R11, -32216 */
		/* 822389ACh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822389ACh case    3:*/		return 0x822389B0;
		  /* 822389B0h */ case    4:  		/* lwz R4, <#[R3 + 12]> */
		/* 822389B0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x0000000C) );
		/* 822389B0h case    4:*/		return 0x822389B4;
		  /* 822389B4h */ case    5:  		/* lis R10, -32252 */
		/* 822389B4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822389B4h case    5:*/		return 0x822389B8;
		  /* 822389B8h */ case    6:  		/* addi R11, R11, 17992 */
		/* 822389B8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4648);
		/* 822389B8h case    6:*/		return 0x822389BC;
		  /* 822389BCh */ case    7:  		/* addi R10, R10, 28696 */
		/* 822389BCh case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x7018);
		/* 822389BCh case    7:*/		return 0x822389C0;
		  /* 822389C0h */ case    8:  		/* mr R31, R3 */
		/* 822389C0h case    8:*/		regs.R31 = regs.R3;
		/* 822389C0h case    8:*/		return 0x822389C4;
		  /* 822389C4h */ case    9:  		/* li R3, 142 */
		/* 822389C4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x8E);
		/* 822389C4h case    9:*/		return 0x822389C8;
		  /* 822389C8h */ case   10:  		/* lwz R11, <#[R11 + 7432]> */
		/* 822389C8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00001D08) );
		/* 822389C8h case   10:*/		return 0x822389CC;
		  /* 822389CCh */ case   11:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 822389CCh case   11:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 822389CCh case   11:*/		return 0x822389D0;
		  /* 822389D0h */ case   12:  		/* lwzx R11, <#[R11 + R10]> */
		/* 822389D0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 822389D0h case   12:*/		return 0x822389D4;
		  /* 822389D4h */ case   13:  		/* mtspr CTR, R11 */
		/* 822389D4h case   13:*/		regs.CTR = regs.R11;
		/* 822389D4h case   13:*/		return 0x822389D8;
		  /* 822389D8h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 822389D8h case   14:*/		if ( 1 ) { regs.LR = 0x822389DC; return (uint32)regs.CTR; }
		/* 822389D8h case   14:*/		return 0x822389DC;
		  /* 822389DCh */ case   15:  		/* li R11, 0 */
		/* 822389DCh case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 822389DCh case   15:*/		return 0x822389E0;
		  /* 822389E0h */ case   16:  		/* li R10, 46 */
		/* 822389E0h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x2E);
		/* 822389E0h case   16:*/		return 0x822389E4;
		  /* 822389E4h */ case   17:  		/* stw R11, <#[R3 + 56]> */
		/* 822389E4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 822389E4h case   17:*/		return 0x822389E8;
		  /* 822389E8h */ case   18:  		/* mr R30, R3 */
		/* 822389E8h case   18:*/		regs.R30 = regs.R3;
		/* 822389E8h case   18:*/		return 0x822389EC;
		  /* 822389ECh */ case   19:  		/* stw R10, <#[R3 + 80]> */
		/* 822389ECh case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000050) );
		/* 822389ECh case   19:*/		return 0x822389F0;
		  /* 822389F0h */ case   20:  		/* stw R11, <#[R3 + 168]> */
		/* 822389F0h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000000A8) );
		/* 822389F0h case   20:*/		return 0x822389F4;
		  /* 822389F4h */ case   21:  		/* lbz R11, <#[R31 + 2144]> */
		/* 822389F4h case   21:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000860) );
		/* 822389F4h case   21:*/		return 0x822389F8;
		  /* 822389F8h */ case   22:  		/* cmplwi CR0, R11, 0 */
		/* 822389F8h case   22:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 822389F8h case   22:*/		return 0x822389FC;
		  /* 822389FCh */ case   23:  		/* bc 12, CR0_EQ, 128 */
		/* 822389FCh case   23:*/		if ( regs.CR[0].eq ) { return 0x82238A7C;  }
		/* 822389FCh case   23:*/		return 0x82238A00;
		  /* 82238A00h */ case   24:  		/* lwz R11, <#[R31 + 116]> */
		/* 82238A00h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000074) );
		/* 82238A00h case   24:*/		return 0x82238A04;
		  /* 82238A04h */ case   25:  		/* cmplwi CR6, R11, 0 */
		/* 82238A04h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82238A04h case   25:*/		return 0x82238A08;
		  /* 82238A08h */ case   26:  		/* bc 12, CR6_EQ, 116 */
		/* 82238A08h case   26:*/		if ( regs.CR[6].eq ) { return 0x82238A7C;  }
		/* 82238A08h case   26:*/		return 0x82238A0C;
		  /* 82238A0Ch */ case   27:  		/* lwz R29, <#[R11 + 948]> */
		/* 82238A0Ch case   27:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x000003B4) );
		/* 82238A0Ch case   27:*/		return 0x82238A10;
		  /* 82238A10h */ case   28:  		/* mr R4, R3 */
		/* 82238A10h case   28:*/		regs.R4 = regs.R3;
		/* 82238A10h case   28:*/		return 0x82238A14;
		  /* 82238A14h */ case   29:  		/* mr R3, R29 */
		/* 82238A14h case   29:*/		regs.R3 = regs.R29;
		/* 82238A14h case   29:*/		return 0x82238A18;
		  /* 82238A18h */ case   30:  		/* bl 132448 */
		/* 82238A18h case   30:*/		regs.LR = 0x82238A1C; return 0x82258F78;
		/* 82238A18h case   30:*/		return 0x82238A1C;
		  /* 82238A1Ch */ case   31:  		/* mr R4, R30 */
		/* 82238A1Ch case   31:*/		regs.R4 = regs.R30;
		/* 82238A1Ch case   31:*/		return 0x82238A20;
		  /* 82238A20h */ case   32:  		/* lwz R3, <#[R31 + 116]> */
		/* 82238A20h case   32:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000074) );
		/* 82238A20h case   32:*/		return 0x82238A24;
		  /* 82238A24h */ case   33:  		/* bl -11132 */
		/* 82238A24h case   33:*/		regs.LR = 0x82238A28; return 0x82235EA8;
		/* 82238A24h case   33:*/		return 0x82238A28;
		  /* 82238A28h */ case   34:  		/* lwz R11, <#[R31 + 120]> */
		/* 82238A28h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82238A28h case   34:*/		return 0x82238A2C;
		  /* 82238A2Ch */ case   35:  		/* cmplwi CR6, R11, 0 */
		/* 82238A2Ch case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82238A2Ch case   35:*/		return 0x82238A30;
		  /* 82238A30h */ case   36:  		/* bc 12, CR6_EQ, 76 */
		/* 82238A30h case   36:*/		if ( regs.CR[6].eq ) { return 0x82238A7C;  }
		/* 82238A30h case   36:*/		return 0x82238A34;
		  /* 82238A34h */ case   37:  		/* li R11, 1 */
		/* 82238A34h case   37:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82238A34h case   37:*/		return 0x82238A38;
		  /* 82238A38h */ case   38:  		/* stw R11, <#[R30 + 168]> */
		/* 82238A38h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000000A8) );
		/* 82238A38h case   38:*/		return 0x82238A3C;
		  /* 82238A3Ch */ case   39:  		/* lwz R11, <#[R31 + 120]> */
		/* 82238A3Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82238A3Ch case   39:*/		return 0x82238A40;
		  /* 82238A40h */ case   40:  		/* lwz R11, <#[R11 + 948]> */
		/* 82238A40h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000003B4) );
		/* 82238A40h case   40:*/		return 0x82238A44;
		  /* 82238A44h */ case   41:  		/* cmplw CR6, R11, R29 */
		/* 82238A44h case   41:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82238A44h case   41:*/		return 0x82238A48;
		  /* 82238A48h */ case   42:  		/* bc 12, CR6_EQ, 40 */
		/* 82238A48h case   42:*/		if ( regs.CR[6].eq ) { return 0x82238A70;  }
		/* 82238A48h case   42:*/		return 0x82238A4C;
		  /* 82238A4Ch */ case   43:  		/* lis R11, -32252 */
		/* 82238A4Ch case   43:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82238A4Ch case   43:*/		return 0x82238A50;
		  /* 82238A50h */ case   44:  		/* lis R10, -32252 */
		/* 82238A50h case   44:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82238A50h case   44:*/		return 0x82238A54;
		  /* 82238A54h */ case   45:  		/* lis R9, -32253 */
		/* 82238A54h case   45:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82238A54h case   45:*/		return 0x82238A58;
		  /* 82238A58h */ case   46:  		/* addi R6, R11, 8520 */
		/* 82238A58h case   46:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 82238A58h case   46:*/		return 0x82238A5C;
		  /* 82238A5Ch */ case   47:  		/* addi R5, R10, 9260 */
		/* 82238A5Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x242C);
		/* 82238A5Ch case   47:*/		return 0x82238A60;
		  /* 82238A60h */ case   48:  		/* addi R4, R9, 27460 */
		/* 82238A60h case   48:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82238A60h case   48:*/		return 0x82238A64;
		  /* 82238A64h */ case   49:  		/* li R7, 2823 */
		/* 82238A64h case   49:*/		cpu::op::li<0>(regs,&regs.R7,0xB07);
		/* 82238A64h case   49:*/		return 0x82238A68;
		  /* 82238A68h */ case   50:  		/* li R3, 0 */
		/* 82238A68h case   50:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82238A68h case   50:*/		return 0x82238A6C;
		  /* 82238A6Ch */ case   51:  		/* bl -921188 */
		/* 82238A6Ch case   51:*/		regs.LR = 0x82238A70; return 0x82157C08;
		/* 82238A6Ch case   51:*/		return 0x82238A70;
	}
	return 0x82238A70;
} // Block from 822389A0h-82238A70h (52 instructions)

//////////////////////////////////////////////////////
// Block at 82238A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238A70);
		  /* 82238A70h */ case    0:  		/* mr R4, R30 */
		/* 82238A70h case    0:*/		regs.R4 = regs.R30;
		/* 82238A70h case    0:*/		return 0x82238A74;
		  /* 82238A74h */ case    1:  		/* lwz R3, <#[R31 + 120]> */
		/* 82238A74h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000078) );
		/* 82238A74h case    1:*/		return 0x82238A78;
		  /* 82238A78h */ case    2:  		/* bl -11216 */
		/* 82238A78h case    2:*/		regs.LR = 0x82238A7C; return 0x82235EA8;
		/* 82238A78h case    2:*/		return 0x82238A7C;
	}
	return 0x82238A7C;
} // Block from 82238A70h-82238A7Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82238A7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238A7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238A7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238A7C);
		  /* 82238A7Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 82238A7Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82238A7Ch case    0:*/		return 0x82238A80;
		  /* 82238A80h */ case    1:  		/* b -1734612 */
		/* 82238A80h case    1:*/		return 0x820912AC;
		/* 82238A80h case    1:*/		return 0x82238A84;
		  /* 82238A84h */ case    2:  		/* nop */
		/* 82238A84h case    2:*/		cpu::op::nop();
		/* 82238A84h case    2:*/		return 0x82238A88;
	}
	return 0x82238A88;
} // Block from 82238A7Ch-82238A88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82238A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238A88);
		  /* 82238A88h */ case    0:  		/* mfspr R12, LR */
		/* 82238A88h case    0:*/		regs.R12 = regs.LR;
		/* 82238A88h case    0:*/		return 0x82238A8C;
		  /* 82238A8Ch */ case    1:  		/* bl -1734704 */
		/* 82238A8Ch case    1:*/		regs.LR = 0x82238A90; return 0x8209125C;
		/* 82238A8Ch case    1:*/		return 0x82238A90;
		  /* 82238A90h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82238A90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82238A90h case    2:*/		return 0x82238A94;
		  /* 82238A94h */ case    3:  		/* lwz R11, <#[R3 + 948]> */
		/* 82238A94h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000003B4) );
		/* 82238A94h case    3:*/		return 0x82238A98;
		  /* 82238A98h */ case    4:  		/* mr R31, R3 */
		/* 82238A98h case    4:*/		regs.R31 = regs.R3;
		/* 82238A98h case    4:*/		return 0x82238A9C;
		  /* 82238A9Ch */ case    5:  		/* mr R29, R4 */
		/* 82238A9Ch case    5:*/		regs.R29 = regs.R4;
		/* 82238A9Ch case    5:*/		return 0x82238AA0;
		  /* 82238AA0h */ case    6:  		/* lwz R11, <#[R11 + 132]> */
		/* 82238AA0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000084) );
		/* 82238AA0h case    6:*/		return 0x82238AA4;
		  /* 82238AA4h */ case    7:  		/* rlwinm. R30, R11, 29, 31, 31 */
		/* 82238AA4h case    7:*/		cpu::op::rlwinm<1,29,31,31>(regs,&regs.R30,regs.R11);
		/* 82238AA4h case    7:*/		return 0x82238AA8;
		  /* 82238AA8h */ case    8:  		/* bc 12, CR0_EQ, 48 */
		/* 82238AA8h case    8:*/		if ( regs.CR[0].eq ) { return 0x82238AD8;  }
		/* 82238AA8h case    8:*/		return 0x82238AAC;
		  /* 82238AACh */ case    9:  		/* lwz R11, <#[R3]> */
		/* 82238AACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82238AACh case    9:*/		return 0x82238AB0;
		  /* 82238AB0h */ case   10:  		/* lwz R11, <#[R11 + 44]> */
		/* 82238AB0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82238AB0h case   10:*/		return 0x82238AB4;
		  /* 82238AB4h */ case   11:  		/* mtspr CTR, R11 */
		/* 82238AB4h case   11:*/		regs.CTR = regs.R11;
		/* 82238AB4h case   11:*/		return 0x82238AB8;
		  /* 82238AB8h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 82238AB8h case   12:*/		if ( 1 ) { regs.LR = 0x82238ABC; return (uint32)regs.CTR; }
		/* 82238AB8h case   12:*/		return 0x82238ABC;
		  /* 82238ABCh */ case   13:  		/* cmplwi CR0, R3, 0 */
		/* 82238ABCh case   13:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82238ABCh case   13:*/		return 0x82238AC0;
		  /* 82238AC0h */ case   14:  		/* bc 12, CR0_EQ, 24 */
		/* 82238AC0h case   14:*/		if ( regs.CR[0].eq ) { return 0x82238AD8;  }
		/* 82238AC0h case   14:*/		return 0x82238AC4;
		  /* 82238AC4h */ case   15:  		/* lwz R10, <#[R29 + 948]> */
		/* 82238AC4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x000003B4) );
		/* 82238AC4h case   15:*/		return 0x82238AC8;
	}
	return 0x82238AC8;
} // Block from 82238A88h-82238AC8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82238AC8h
// Function '?MaybeClampPointSize@CFG@XGRAPHICS@@AAAXAAVILInstIterator@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238AC8);
		  /* 82238AC8h */ case    0:  		/* lwz R11, <#[R31 + 948]> */
		/* 82238AC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000003B4) );
		/* 82238AC8h case    0:*/		return 0x82238ACC;
		  /* 82238ACCh */ case    1:  		/* subf R11, R11, R10 */
		/* 82238ACCh case    1:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82238ACCh case    1:*/		return 0x82238AD0;
		  /* 82238AD0h */ case    2:  		/* addic R10, R11, -1 */
		/* 82238AD0h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82238AD0h case    2:*/		return 0x82238AD4;
		  /* 82238AD4h */ case    3:  		/* subfe R30, R10, R11 */
		/* 82238AD4h case    3:*/		cpu::op::subfe<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 82238AD4h case    3:*/		return 0x82238AD8;
	}
	return 0x82238AD8;
} // Block from 82238AC8h-82238AD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82238AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238AD8);
		  /* 82238AD8h */ case    0:  		/* mr R3, R30 */
		/* 82238AD8h case    0:*/		regs.R3 = regs.R30;
		/* 82238AD8h case    0:*/		return 0x82238ADC;
		  /* 82238ADCh */ case    1:  		/* addi R1, R1, 112 */
		/* 82238ADCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82238ADCh case    1:*/		return 0x82238AE0;
		  /* 82238AE0h */ case    2:  		/* b -1734708 */
		/* 82238AE0h case    2:*/		return 0x820912AC;
		/* 82238AE0h case    2:*/		return 0x82238AE4;
		  /* 82238AE4h */ case    3:  		/* nop */
		/* 82238AE4h case    3:*/		cpu::op::nop();
		/* 82238AE4h case    3:*/		return 0x82238AE8;
	}
	return 0x82238AE8;
} // Block from 82238AD8h-82238AE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82238AE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238AE8);
		  /* 82238AE8h */ case    0:  		/* mfspr R12, LR */
		/* 82238AE8h case    0:*/		regs.R12 = regs.LR;
		/* 82238AE8h case    0:*/		return 0x82238AEC;
		  /* 82238AECh */ case    1:  		/* bl -1734844 */
		/* 82238AECh case    1:*/		regs.LR = 0x82238AF0; return 0x82091230;
		/* 82238AECh case    1:*/		return 0x82238AF0;
		  /* 82238AF0h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 82238AF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82238AF0h case    2:*/		return 0x82238AF4;
		  /* 82238AF4h */ case    3:  		/* lwz R11, <#[R3 + 2148]> */
		/* 82238AF4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000864) );
		/* 82238AF4h case    3:*/		return 0x82238AF8;
		  /* 82238AF8h */ case    4:  		/* mr R25, R3 */
		/* 82238AF8h case    4:*/		regs.R25 = regs.R3;
		/* 82238AF8h case    4:*/		return 0x82238AFC;
		  /* 82238AFCh */ case    5:  		/* lwz R10, <#[R3 + 12]> */
		/* 82238AFCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 82238AFCh case    5:*/		return 0x82238B00;
		  /* 82238B00h */ case    6:  		/* li R4, 20 */
		/* 82238B00h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 82238B00h case    6:*/		return 0x82238B04;
		  /* 82238B04h */ case    7:  		/* addi R11, R11, 1 */
		/* 82238B04h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82238B04h case    7:*/		return 0x82238B08;
		  /* 82238B08h */ case    8:  		/* stw R11, <#[R3 + 2148]> */
		/* 82238B08h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000864) );
		/* 82238B08h case    8:*/		return 0x82238B0C;
		  /* 82238B0Ch */ case    9:  		/* lwz R30, <#[R10 + 1456]> */
		/* 82238B0Ch case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x000005B0) );
		/* 82238B0Ch case    9:*/		return 0x82238B10;
		  /* 82238B10h */ case   10:  		/* mr R3, R30 */
		/* 82238B10h case   10:*/		regs.R3 = regs.R30;
		/* 82238B10h case   10:*/		return 0x82238B14;
		  /* 82238B14h */ case   11:  		/* bl -116316 */
		/* 82238B14h case   11:*/		regs.LR = 0x82238B18; return 0x8221C4B8;
		/* 82238B14h case   11:*/		return 0x82238B18;
		  /* 82238B18h */ case   12:  		/* addic. R31, R3, 4 */
		/* 82238B18h case   12:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R3,0x4);
		/* 82238B18h case   12:*/		return 0x82238B1C;
		  /* 82238B1Ch */ case   13:  		/* stw R30, <#[R3]> */
		/* 82238B1Ch case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 82238B1Ch case   13:*/		return 0x82238B20;
		  /* 82238B20h */ case   14:  		/* bc 12, CR0_EQ, 28 */
		/* 82238B20h case   14:*/		if ( regs.CR[0].eq ) { return 0x82238B3C;  }
		/* 82238B20h case   14:*/		return 0x82238B24;
		  /* 82238B24h */ case   15:  		/* lwz R11, <#[R25 + 12]> */
		/* 82238B24h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 82238B24h case   15:*/		return 0x82238B28;
		  /* 82238B28h */ case   16:  		/* mr R3, R31 */
		/* 82238B28h case   16:*/		regs.R3 = regs.R31;
		/* 82238B28h case   16:*/		return 0x82238B2C;
		  /* 82238B2Ch */ case   17:  		/* lwz R4, <#[R11 + 1456]> */
		/* 82238B2Ch case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 82238B2Ch case   17:*/		return 0x82238B30;
		  /* 82238B30h */ case   18:  		/* bl -11728 */
		/* 82238B30h case   18:*/		regs.LR = 0x82238B34; return 0x82235D60;
		/* 82238B30h case   18:*/		return 0x82238B34;
		  /* 82238B34h */ case   19:  		/* mr R24, R31 */
		/* 82238B34h case   19:*/		regs.R24 = regs.R31;
		/* 82238B34h case   19:*/		return 0x82238B38;
		  /* 82238B38h */ case   20:  		/* b 8 */
		/* 82238B38h case   20:*/		return 0x82238B40;
		/* 82238B38h case   20:*/		return 0x82238B3C;
	}
	return 0x82238B3C;
} // Block from 82238AE8h-82238B3Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82238B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238B3C);
		  /* 82238B3Ch */ case    0:  		/* li R24, 0 */
		/* 82238B3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82238B3Ch case    0:*/		return 0x82238B40;
	}
	return 0x82238B40;
} // Block from 82238B3Ch-82238B40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82238B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238B40);
		  /* 82238B40h */ case    0:  		/* lwz R11, <#[R25 + 96]> */
		/* 82238B40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000060) );
		/* 82238B40h case    0:*/		return 0x82238B44;
		  /* 82238B44h */ case    1:  		/* lwz R22, <#[R11 + 4]> */
		/* 82238B44h case    1:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x00000004) );
		/* 82238B44h case    1:*/		return 0x82238B48;
		  /* 82238B48h */ case    2:  		/* cmpwi CR6, R22, 0 */
		/* 82238B48h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 82238B48h case    2:*/		return 0x82238B4C;
		  /* 82238B4Ch */ case    3:  		/* bc 4, CR6_GT, 1392 */
		/* 82238B4Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x822390BC;  }
		/* 82238B4Ch case    3:*/		return 0x82238B50;
		  /* 82238B50h */ case    4:  		/* rlwinm R11, R22, 2, 0, 29 */
		/* 82238B50h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R22);
		/* 82238B50h case    4:*/		return 0x82238B54;
		  /* 82238B54h */ case    5:  		/* lis R10, -32252 */
		/* 82238B54h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82238B54h case    5:*/		return 0x82238B58;
		  /* 82238B58h */ case    6:  		/* addi R21, R11, -4 */
		/* 82238B58h case    6:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0xFFFFFFFC);
		/* 82238B58h case    6:*/		return 0x82238B5C;
		  /* 82238B5Ch */ case    7:  		/* lis R11, -32253 */
		/* 82238B5Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82238B5Ch case    7:*/		return 0x82238B60;
		  /* 82238B60h */ case    8:  		/* lis R9, -32252 */
		/* 82238B60h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82238B60h case    8:*/		return 0x82238B64;
		  /* 82238B64h */ case    9:  		/* addi R23, R22, -1 */
		/* 82238B64h case    9:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R22,0xFFFFFFFF);
		/* 82238B64h case    9:*/		return 0x82238B68;
		  /* 82238B68h */ case   10:  		/* addi R20, R11, 27460 */
		/* 82238B68h case   10:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R11,0x6B44);
		/* 82238B68h case   10:*/		return 0x82238B6C;
		  /* 82238B6Ch */ case   11:  		/* addi R19, R10, 9312 */
		/* 82238B6Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R10,0x2460);
		/* 82238B6Ch case   11:*/		return 0x82238B70;
		  /* 82238B70h */ case   12:  		/* addi R18, R9, 8520 */
		/* 82238B70h case   12:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R9,0x2148);
		/* 82238B70h case   12:*/		return 0x82238B74;
		  /* 82238B74h */ case   13:  		/* lwz R11, <#[R24 + 4]> */
		/* 82238B74h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 82238B74h case   13:*/		return 0x82238B78;
		  /* 82238B78h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 82238B78h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82238B78h case   14:*/		return 0x82238B7C;
		  /* 82238B7Ch */ case   15:  		/* bc 12, CR6_EQ, 28 */
		/* 82238B7Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x82238B98;  }
		/* 82238B7Ch case   15:*/		return 0x82238B80;
		  /* 82238B80h */ case   16:  		/* mr R6, R18 */
		/* 82238B80h case   16:*/		regs.R6 = regs.R18;
		/* 82238B80h case   16:*/		return 0x82238B84;
		  /* 82238B84h */ case   17:  		/* mr R5, R19 */
		/* 82238B84h case   17:*/		regs.R5 = regs.R19;
		/* 82238B84h case   17:*/		return 0x82238B88;
		  /* 82238B88h */ case   18:  		/* mr R4, R20 */
		/* 82238B88h case   18:*/		regs.R4 = regs.R20;
		/* 82238B88h case   18:*/		return 0x82238B8C;
		  /* 82238B8Ch */ case   19:  		/* li R7, 2864 */
		/* 82238B8Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0xB30);
		/* 82238B8Ch case   19:*/		return 0x82238B90;
		  /* 82238B90h */ case   20:  		/* li R3, 0 */
		/* 82238B90h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82238B90h case   20:*/		return 0x82238B94;
		  /* 82238B94h */ case   21:  		/* bl -921484 */
		/* 82238B94h case   21:*/		regs.LR = 0x82238B98; return 0x82157C08;
		/* 82238B94h case   21:*/		return 0x82238B98;
	}
	return 0x82238B98;
} // Block from 82238B40h-82238B98h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82238B98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238B98);
		  /* 82238B98h */ case    0:  		/* lwz R3, <#[R25 + 96]> */
		/* 82238B98h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000060) );
		/* 82238B98h case    0:*/		return 0x82238B9C;
		  /* 82238B9Ch */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 82238B9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82238B9Ch case    1:*/		return 0x82238BA0;
		  /* 82238BA0h */ case    2:  		/* cmplw CR6, R23, R11 */
		/* 82238BA0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 82238BA0h case    2:*/		return 0x82238BA4;
		  /* 82238BA4h */ case    3:  		/* bc 4, CR6_LT, 16 */
		/* 82238BA4h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82238BB4;  }
		/* 82238BA4h case    3:*/		return 0x82238BA8;
		  /* 82238BA8h */ case    4:  		/* lwz R11, <#[R3 + 8]> */
		/* 82238BA8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82238BA8h case    4:*/		return 0x82238BAC;
		  /* 82238BACh */ case    5:  		/* add R3, R11, R21 */
		/* 82238BACh case    5:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R21);
		/* 82238BACh case    5:*/		return 0x82238BB0;
		  /* 82238BB0h */ case    6:  		/* b 12 */
		/* 82238BB0h case    6:*/		return 0x82238BBC;
		/* 82238BB0h case    6:*/		return 0x82238BB4;
	}
	return 0x82238BB4;
} // Block from 82238B98h-82238BB4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82238BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238BB4);
		  /* 82238BB4h */ case    0:  		/* mr R4, R23 */
		/* 82238BB4h case    0:*/		regs.R4 = regs.R23;
		/* 82238BB4h case    0:*/		return 0x82238BB8;
		  /* 82238BB8h */ case    1:  		/* bl 110344 */
		/* 82238BB8h case    1:*/		regs.LR = 0x82238BBC; return 0x82253AC0;
		/* 82238BB8h case    1:*/		return 0x82238BBC;
	}
	return 0x82238BBC;
} // Block from 82238BB4h-82238BBCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82238BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238BBC);
		  /* 82238BBCh */ case    0:  		/* lwz R28, <#[R3]> */
		/* 82238BBCh case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 82238BBCh case    0:*/		return 0x82238BC0;
		  /* 82238BC0h */ case    1:  		/* mr R3, R28 */
		/* 82238BC0h case    1:*/		regs.R3 = regs.R28;
		/* 82238BC0h case    1:*/		return 0x82238BC4;
		  /* 82238BC4h */ case    2:  		/* lwz R11, <#[R28]> */
		/* 82238BC4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82238BC4h case    2:*/		return 0x82238BC8;
		  /* 82238BC8h */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 82238BC8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82238BC8h case    3:*/		return 0x82238BCC;
		  /* 82238BCCh */ case    4:  		/* mtspr CTR, R11 */
		/* 82238BCCh case    4:*/		regs.CTR = regs.R11;
		/* 82238BCCh case    4:*/		return 0x82238BD0;
		  /* 82238BD0h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 82238BD0h case    5:*/		if ( 1 ) { regs.LR = 0x82238BD4; return (uint32)regs.CTR; }
		/* 82238BD0h case    5:*/		return 0x82238BD4;
		  /* 82238BD4h */ case    6:  		/* cmpwi CR6, R3, 1 */
		/* 82238BD4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82238BD4h case    6:*/		return 0x82238BD8;
		  /* 82238BD8h */ case    7:  		/* bc 12, CR6_GT, 1224 */
		/* 82238BD8h case    7:*/		if ( regs.CR[6].gt ) { return 0x822390A0;  }
		/* 82238BD8h case    7:*/		return 0x82238BDC;
		  /* 82238BDCh */ case    8:  		/* lwz R11, <#[R28]> */
		/* 82238BDCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82238BDCh case    8:*/		return 0x82238BE0;
		  /* 82238BE0h */ case    9:  		/* mr R3, R28 */
		/* 82238BE0h case    9:*/		regs.R3 = regs.R28;
		/* 82238BE0h case    9:*/		return 0x82238BE4;
		  /* 82238BE4h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 82238BE4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82238BE4h case   10:*/		return 0x82238BE8;
		  /* 82238BE8h */ case   11:  		/* mtspr CTR, R11 */
		/* 82238BE8h case   11:*/		regs.CTR = regs.R11;
		/* 82238BE8h case   11:*/		return 0x82238BEC;
		  /* 82238BECh */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 82238BECh case   12:*/		if ( 1 ) { regs.LR = 0x82238BF0; return (uint32)regs.CTR; }
		/* 82238BECh case   12:*/		return 0x82238BF0;
		  /* 82238BF0h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82238BF0h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82238BF0h case   13:*/		return 0x82238BF4;
		  /* 82238BF4h */ case   14:  		/* bc 12, CR0_EQ, 1196 */
		/* 82238BF4h case   14:*/		if ( regs.CR[0].eq ) { return 0x822390A0;  }
		/* 82238BF4h case   14:*/		return 0x82238BF8;
		  /* 82238BF8h */ case   15:  		/* lwz R11, <#[R28 + 228]> */
		/* 82238BF8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x000000E4) );
		/* 82238BF8h case   15:*/		return 0x82238BFC;
		  /* 82238BFCh */ case   16:  		/* rlwinm. R11, R11, 29, 31, 31 */
		/* 82238BFCh case   16:*/		cpu::op::rlwinm<1,29,31,31>(regs,&regs.R11,regs.R11);
		/* 82238BFCh case   16:*/		return 0x82238C00;
		  /* 82238C00h */ case   17:  		/* bc 4, CR0_EQ, 1184 */
		/* 82238C00h case   17:*/		if ( !regs.CR[0].eq ) { return 0x822390A0;  }
		/* 82238C00h case   17:*/		return 0x82238C04;
		  /* 82238C04h */ case   18:  		/* lwz R3, <#[R28 + 236]> */
		/* 82238C04h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x000000EC) );
		/* 82238C04h case   18:*/		return 0x82238C08;
		  /* 82238C08h */ case   19:  		/* lwz R11, <#[R3]> */
		/* 82238C08h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82238C08h case   19:*/		return 0x82238C0C;
		  /* 82238C0Ch */ case   20:  		/* lwz R11, <#[R11 + 24]> */
		/* 82238C0Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82238C0Ch case   20:*/		return 0x82238C10;
		  /* 82238C10h */ case   21:  		/* mtspr CTR, R11 */
		/* 82238C10h case   21:*/		regs.CTR = regs.R11;
		/* 82238C10h case   21:*/		return 0x82238C14;
		  /* 82238C14h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 82238C14h case   22:*/		if ( 1 ) { regs.LR = 0x82238C18; return (uint32)regs.CTR; }
		/* 82238C14h case   22:*/		return 0x82238C18;
		  /* 82238C18h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238C18h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238C18h case   23:*/		return 0x82238C1C;
		  /* 82238C1Ch */ case   24:  		/* bc 4, CR0_EQ, 1156 */
		/* 82238C1Ch case   24:*/		if ( !regs.CR[0].eq ) { return 0x822390A0;  }
		/* 82238C1Ch case   24:*/		return 0x82238C20;
		  /* 82238C20h */ case   25:  		/* lwz R31, <#[R28 + 236]> */
		/* 82238C20h case   25:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x000000EC) );
		/* 82238C20h case   25:*/		return 0x82238C24;
		  /* 82238C24h */ case   26:  		/* mr R4, R25 */
		/* 82238C24h case   26:*/		regs.R4 = regs.R25;
		/* 82238C24h case   26:*/		return 0x82238C28;
		  /* 82238C28h */ case   27:  		/* mr R3, R31 */
		/* 82238C28h case   27:*/		regs.R3 = regs.R31;
		/* 82238C28h case   27:*/		return 0x82238C2C;
		  /* 82238C2Ch */ case   28:  		/* bl 122012 */
		/* 82238C2Ch case   28:*/		regs.LR = 0x82238C30; return 0x822568C8;
		/* 82238C2Ch case   28:*/		return 0x82238C30;
		  /* 82238C30h */ case   29:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238C30h case   29:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238C30h case   29:*/		return 0x82238C34;
		  /* 82238C34h */ case   30:  		/* bc 12, CR0_EQ, 504 */
		/* 82238C34h case   30:*/		if ( regs.CR[0].eq ) { return 0x82238E2C;  }
		/* 82238C34h case   30:*/		return 0x82238C38;
		  /* 82238C38h */ case   31:  		/* mr R3, R31 */
		/* 82238C38h case   31:*/		regs.R3 = regs.R31;
		/* 82238C38h case   31:*/		return 0x82238C3C;
		  /* 82238C3Ch */ case   32:  		/* lwz R4, <#[R25 + 100]> */
		/* 82238C3Ch case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000064) );
		/* 82238C3Ch case   32:*/		return 0x82238C40;
		  /* 82238C40h */ case   33:  		/* bl -440 */
		/* 82238C40h case   33:*/		regs.LR = 0x82238C44; return 0x82238A88;
		/* 82238C40h case   33:*/		return 0x82238C44;
		  /* 82238C44h */ case   34:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238C44h case   34:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238C44h case   34:*/		return 0x82238C48;
		  /* 82238C48h */ case   35:  		/* bc 12, CR0_EQ, 484 */
		/* 82238C48h case   35:*/		if ( regs.CR[0].eq ) { return 0x82238E2C;  }
		/* 82238C48h case   35:*/		return 0x82238C4C;
		  /* 82238C4Ch */ case   36:  		/* lwz R11, <#[R31]> */
		/* 82238C4Ch case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238C4Ch case   36:*/		return 0x82238C50;
		  /* 82238C50h */ case   37:  		/* mr R3, R31 */
		/* 82238C50h case   37:*/		regs.R3 = regs.R31;
		/* 82238C50h case   37:*/		return 0x82238C54;
		  /* 82238C54h */ case   38:  		/* lwz R11, <#[R11 + 44]> */
		/* 82238C54h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82238C54h case   38:*/		return 0x82238C58;
		  /* 82238C58h */ case   39:  		/* mtspr CTR, R11 */
		/* 82238C58h case   39:*/		regs.CTR = regs.R11;
		/* 82238C58h case   39:*/		return 0x82238C5C;
		  /* 82238C5Ch */ case   40:  		/* bcctrl 20, CR0_LT */
		/* 82238C5Ch case   40:*/		if ( 1 ) { regs.LR = 0x82238C60; return (uint32)regs.CTR; }
		/* 82238C5Ch case   40:*/		return 0x82238C60;
		  /* 82238C60h */ case   41:  		/* cmplwi CR0, R3, 0 */
		/* 82238C60h case   41:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82238C60h case   41:*/		return 0x82238C64;
		  /* 82238C64h */ case   42:  		/* bc 12, CR0_EQ, 312 */
		/* 82238C64h case   42:*/		if ( regs.CR[0].eq ) { return 0x82238D9C;  }
		/* 82238C64h case   42:*/		return 0x82238C68;
		  /* 82238C68h */ case   43:  		/* lwz R11, <#[R31 + 20]> */
		/* 82238C68h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82238C68h case   43:*/		return 0x82238C6C;
		  /* 82238C6Ch */ case   44:  		/* li R26, 1 */
		/* 82238C6Ch case   44:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82238C6Ch case   44:*/		return 0x82238C70;
		  /* 82238C70h */ case   45:  		/* li R27, 1 */
		/* 82238C70h case   45:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82238C70h case   45:*/		return 0x82238C74;
		  /* 82238C74h */ case   46:  		/* cmpwi CR6, R11, 1 */
		/* 82238C74h case   46:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82238C74h case   46:*/		return 0x82238C78;
		  /* 82238C78h */ case   47:  		/* bc 12, CR6_LT, 148 */
		/* 82238C78h case   47:*/		if ( regs.CR[6].lt ) { return 0x82238D0C;  }
		/* 82238C78h case   47:*/		return 0x82238C7C;
		  /* 82238C7Ch */ case   48:  		/* addi R29, R31, 236 */
		/* 82238C7Ch case   48:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0xEC);
		/* 82238C7Ch case   48:*/		return 0x82238C80;
		  /* 82238C80h */ case   49:  		/* lwz R30, <#[R29]> */
		/* 82238C80h case   49:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 82238C80h case   49:*/		return 0x82238C84;
		  /* 82238C84h */ case   50:  		/* mr R3, R30 */
		/* 82238C84h case   50:*/		regs.R3 = regs.R30;
		/* 82238C84h case   50:*/		return 0x82238C88;
		  /* 82238C88h */ case   51:  		/* lwz R11, <#[R30]> */
		/* 82238C88h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82238C88h case   51:*/		return 0x82238C8C;
		  /* 82238C8Ch */ case   52:  		/* lwz R11, <#[R11 + 44]> */
		/* 82238C8Ch case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82238C8Ch case   52:*/		return 0x82238C90;
		  /* 82238C90h */ case   53:  		/* mtspr CTR, R11 */
		/* 82238C90h case   53:*/		regs.CTR = regs.R11;
		/* 82238C90h case   53:*/		return 0x82238C94;
		  /* 82238C94h */ case   54:  		/* bcctrl 20, CR0_LT */
		/* 82238C94h case   54:*/		if ( 1 ) { regs.LR = 0x82238C98; return (uint32)regs.CTR; }
		/* 82238C94h case   54:*/		return 0x82238C98;
		  /* 82238C98h */ case   55:  		/* cmplwi CR0, R3, 0 */
		/* 82238C98h case   55:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82238C98h case   55:*/		return 0x82238C9C;
		  /* 82238C9Ch */ case   56:  		/* bc 4, CR0_EQ, 88 */
		/* 82238C9Ch case   56:*/		if ( !regs.CR[0].eq ) { return 0x82238CF4;  }
		/* 82238C9Ch case   56:*/		return 0x82238CA0;
		  /* 82238CA0h */ case   57:  		/* mr R3, R30 */
		/* 82238CA0h case   57:*/		regs.R3 = regs.R30;
		/* 82238CA0h case   57:*/		return 0x82238CA4;
		  /* 82238CA4h */ case   58:  		/* lwz R4, <#[R25 + 100]> */
		/* 82238CA4h case   58:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000064) );
		/* 82238CA4h case   58:*/		return 0x82238CA8;
		  /* 82238CA8h */ case   59:  		/* bl -544 */
		/* 82238CA8h case   59:*/		regs.LR = 0x82238CAC; return 0x82238A88;
		/* 82238CA8h case   59:*/		return 0x82238CAC;
		  /* 82238CACh */ case   60:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238CACh case   60:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238CACh case   60:*/		return 0x82238CB0;
		  /* 82238CB0h */ case   61:  		/* bc 12, CR0_EQ, 68 */
		/* 82238CB0h case   61:*/		if ( regs.CR[0].eq ) { return 0x82238CF4;  }
		/* 82238CB0h case   61:*/		return 0x82238CB4;
		  /* 82238CB4h */ case   62:  		/* lwz R11, <#[R30 + 24]> */
		/* 82238CB4h case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 82238CB4h case   62:*/		return 0x82238CB8;
		  /* 82238CB8h */ case   63:  		/* cmpwi CR6, R11, 50 */
		/* 82238CB8h case   63:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000032);
		/* 82238CB8h case   63:*/		return 0x82238CBC;
		  /* 82238CBCh */ case   64:  		/* bc 12, CR6_EQ, 56 */
		/* 82238CBCh case   64:*/		if ( regs.CR[6].eq ) { return 0x82238CF4;  }
		/* 82238CBCh case   64:*/		return 0x82238CC0;
		  /* 82238CC0h */ case   65:  		/* lwz R11, <#[R30 + 20]> */
		/* 82238CC0h case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82238CC0h case   65:*/		return 0x82238CC4;
		  /* 82238CC4h */ case   66:  		/* cmpwi CR6, R11, 0 */
		/* 82238CC4h case   66:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82238CC4h case   66:*/		return 0x82238CC8;
		  /* 82238CC8h */ case   67:  		/* bc 12, CR6_EQ, 44 */
		/* 82238CC8h case   67:*/		if ( regs.CR[6].eq ) { return 0x82238CF4;  }
		/* 82238CC8h case   67:*/		return 0x82238CCC;
		  /* 82238CCCh */ case   68:  		/* lwz R11, <#[R30]> */
		/* 82238CCCh case   68:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82238CCCh case   68:*/		return 0x82238CD0;
		  /* 82238CD0h */ case   69:  		/* mr R3, R30 */
		/* 82238CD0h case   69:*/		regs.R3 = regs.R30;
		/* 82238CD0h case   69:*/		return 0x82238CD4;
		  /* 82238CD4h */ case   70:  		/* lwz R11, <#[R11 + 24]> */
		/* 82238CD4h case   70:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82238CD4h case   70:*/		return 0x82238CD8;
		  /* 82238CD8h */ case   71:  		/* mtspr CTR, R11 */
		/* 82238CD8h case   71:*/		regs.CTR = regs.R11;
		/* 82238CD8h case   71:*/		return 0x82238CDC;
		  /* 82238CDCh */ case   72:  		/* bcctrl 20, CR0_LT */
		/* 82238CDCh case   72:*/		if ( 1 ) { regs.LR = 0x82238CE0; return (uint32)regs.CTR; }
		/* 82238CDCh case   72:*/		return 0x82238CE0;
		  /* 82238CE0h */ case   73:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238CE0h case   73:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238CE0h case   73:*/		return 0x82238CE4;
		  /* 82238CE4h */ case   74:  		/* bc 4, CR0_EQ, 16 */
		/* 82238CE4h case   74:*/		if ( !regs.CR[0].eq ) { return 0x82238CF4;  }
		/* 82238CE4h case   74:*/		return 0x82238CE8;
	}
	return 0x82238CE8;
} // Block from 82238BBCh-82238CE8h (75 instructions)

//////////////////////////////////////////////////////
// Block at 82238CE8h
// Function '?InsertInstructionsForPointSprites@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238CE8);
		  /* 82238CE8h */ case    0:  		/* lwz R11, <#[R30 + 24]> */
		/* 82238CE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 82238CE8h case    0:*/		return 0x82238CEC;
		  /* 82238CECh */ case    1:  		/* cmpwi CR6, R11, 128 */
		/* 82238CECh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000080);
		/* 82238CECh case    1:*/		return 0x82238CF0;
		  /* 82238CF0h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 82238CF0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82238CF8;  }
		/* 82238CF0h case    2:*/		return 0x82238CF4;
	}
	return 0x82238CF4;
} // Block from 82238CE8h-82238CF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82238CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238CF4);
		  /* 82238CF4h */ case    0:  		/* li R26, 0 */
		/* 82238CF4h case    0:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82238CF4h case    0:*/		return 0x82238CF8;
	}
	return 0x82238CF8;
} // Block from 82238CF4h-82238CF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82238CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238CF8);
		  /* 82238CF8h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82238CF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82238CF8h case    0:*/		return 0x82238CFC;
		  /* 82238CFCh */ case    1:  		/* addi R27, R27, 1 */
		/* 82238CFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82238CFCh case    1:*/		return 0x82238D00;
		  /* 82238D00h */ case    2:  		/* addi R29, R29, 4 */
		/* 82238D00h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82238D00h case    2:*/		return 0x82238D04;
		  /* 82238D04h */ case    3:  		/* cmpw CR6, R27, R11 */
		/* 82238D04h case    3:*/		cpu::op::cmpw<6>(regs,regs.R27,regs.R11);
		/* 82238D04h case    3:*/		return 0x82238D08;
		  /* 82238D08h */ case    4:  		/* bc 4, CR6_GT, -136 */
		/* 82238D08h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82238C80;  }
		/* 82238D08h case    4:*/		return 0x82238D0C;
	}
	return 0x82238D0C;
} // Block from 82238CF8h-82238D0Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82238D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238D0C);
		  /* 82238D0Ch */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 82238D0Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 82238D0Ch case    0:*/		return 0x82238D10;
		  /* 82238D10h */ case    1:  		/* bc 12, CR0_EQ, 912 */
		/* 82238D10h case    1:*/		if ( regs.CR[0].eq ) { return 0x822390A0;  }
		/* 82238D10h case    1:*/		return 0x82238D14;
		  /* 82238D14h */ case    2:  		/* lwz R11, <#[R31 + 20]> */
		/* 82238D14h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82238D14h case    2:*/		return 0x82238D18;
		  /* 82238D18h */ case    3:  		/* li R27, 1 */
		/* 82238D18h case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82238D18h case    3:*/		return 0x82238D1C;
		  /* 82238D1Ch */ case    4:  		/* cmpwi CR6, R11, 1 */
		/* 82238D1Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82238D1Ch case    4:*/		return 0x82238D20;
		  /* 82238D20h */ case    5:  		/* bc 12, CR6_LT, 68 */
		/* 82238D20h case    5:*/		if ( regs.CR[6].lt ) { return 0x82238D64;  }
		/* 82238D20h case    5:*/		return 0x82238D24;
		  /* 82238D24h */ case    6:  		/* addi R29, R31, 236 */
		/* 82238D24h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0xEC);
		/* 82238D24h case    6:*/		return 0x82238D28;
		  /* 82238D28h */ case    7:  		/* lwz R30, <#[R29]> */
		/* 82238D28h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 82238D28h case    7:*/		return 0x82238D2C;
		  /* 82238D2Ch */ case    8:  		/* lwz R11, <#[R25 + 2148]> */
		/* 82238D2Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000864) );
		/* 82238D2Ch case    8:*/		return 0x82238D30;
		  /* 82238D30h */ case    9:  		/* lwz R10, <#[R30 + 892]> */
		/* 82238D30h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000037C) );
		/* 82238D30h case    9:*/		return 0x82238D34;
		  /* 82238D34h */ case   10:  		/* cmpw CR6, R10, R11 */
		/* 82238D34h case   10:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 82238D34h case   10:*/		return 0x82238D38;
		  /* 82238D38h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 82238D38h case   11:*/		if ( regs.CR[6].eq ) { return 0x82238D50;  }
		/* 82238D38h case   11:*/		return 0x82238D3C;
		  /* 82238D3Ch */ case   12:  		/* stw R11, <#[R30 + 892]> */
		/* 82238D3Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000037C) );
		/* 82238D3Ch case   12:*/		return 0x82238D40;
		  /* 82238D40h */ case   13:  		/* mr R3, R24 */
		/* 82238D40h case   13:*/		regs.R3 = regs.R24;
		/* 82238D40h case   13:*/		return 0x82238D44;
		  /* 82238D44h */ case   14:  		/* lwz R4, <#[R24 + 4]> */
		/* 82238D44h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000004) );
		/* 82238D44h case   14:*/		return 0x82238D48;
		  /* 82238D48h */ case   15:  		/* bl 109944 */
		/* 82238D48h case   15:*/		regs.LR = 0x82238D4C; return 0x82253AC0;
		/* 82238D48h case   15:*/		return 0x82238D4C;
		  /* 82238D4Ch */ case   16:  		/* stw R30, <#[R3]> */
		/* 82238D4Ch case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 82238D4Ch case   16:*/		return 0x82238D50;
	}
	return 0x82238D50;
} // Block from 82238D0Ch-82238D50h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82238D50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238D50);
		  /* 82238D50h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82238D50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82238D50h case    0:*/		return 0x82238D54;
		  /* 82238D54h */ case    1:  		/* addi R27, R27, 1 */
		/* 82238D54h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 82238D54h case    1:*/		return 0x82238D58;
		  /* 82238D58h */ case    2:  		/* addi R29, R29, 4 */
		/* 82238D58h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82238D58h case    2:*/		return 0x82238D5C;
		  /* 82238D5Ch */ case    3:  		/* cmpw CR6, R27, R11 */
		/* 82238D5Ch case    3:*/		cpu::op::cmpw<6>(regs,regs.R27,regs.R11);
		/* 82238D5Ch case    3:*/		return 0x82238D60;
		  /* 82238D60h */ case    4:  		/* bc 4, CR6_GT, -56 */
		/* 82238D60h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82238D28;  }
		/* 82238D60h case    4:*/		return 0x82238D64;
	}
	return 0x82238D64;
} // Block from 82238D50h-82238D64h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82238D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238D64);
		  /* 82238D64h */ case    0:  		/* mr R4, R28 */
		/* 82238D64h case    0:*/		regs.R4 = regs.R28;
		/* 82238D64h case    0:*/		return 0x82238D68;
		  /* 82238D68h */ case    1:  		/* mr R3, R25 */
		/* 82238D68h case    1:*/		regs.R3 = regs.R25;
		/* 82238D68h case    1:*/		return 0x82238D6C;
		  /* 82238D6Ch */ case    2:  		/* bl -11580 */
		/* 82238D6Ch case    2:*/		regs.LR = 0x82238D70; return 0x82236030;
		/* 82238D6Ch case    2:*/		return 0x82238D70;
		  /* 82238D70h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 82238D70h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238D70h case    3:*/		return 0x82238D74;
		  /* 82238D74h */ case    4:  		/* mr R3, R31 */
		/* 82238D74h case    4:*/		regs.R3 = regs.R31;
		/* 82238D74h case    4:*/		return 0x82238D78;
		  /* 82238D78h */ case    5:  		/* lwz R11, <#[R11 + 96]> */
		/* 82238D78h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000060) );
		/* 82238D78h case    5:*/		return 0x82238D7C;
		  /* 82238D7Ch */ case    6:  		/* mtspr CTR, R11 */
		/* 82238D7Ch case    6:*/		regs.CTR = regs.R11;
		/* 82238D7Ch case    6:*/		return 0x82238D80;
		  /* 82238D80h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 82238D80h case    7:*/		if ( 1 ) { regs.LR = 0x82238D84; return (uint32)regs.CTR; }
		/* 82238D80h case    7:*/		return 0x82238D84;
		  /* 82238D84h */ case    8:  		/* lwz R11, <#[R28]> */
		/* 82238D84h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82238D84h case    8:*/		return 0x82238D88;
		  /* 82238D88h */ case    9:  		/* mr R3, R28 */
		/* 82238D88h case    9:*/		regs.R3 = regs.R28;
		/* 82238D88h case    9:*/		return 0x82238D8C;
		  /* 82238D8Ch */ case   10:  		/* lwz R11, <#[R11 + 96]> */
		/* 82238D8Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000060) );
		/* 82238D8Ch case   10:*/		return 0x82238D90;
		  /* 82238D90h */ case   11:  		/* mtspr CTR, R11 */
		/* 82238D90h case   11:*/		regs.CTR = regs.R11;
		/* 82238D90h case   11:*/		return 0x82238D94;
		  /* 82238D94h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 82238D94h case   12:*/		if ( 1 ) { regs.LR = 0x82238D98; return (uint32)regs.CTR; }
		/* 82238D94h case   12:*/		return 0x82238D98;
		  /* 82238D98h */ case   13:  		/* b 148 */
		/* 82238D98h case   13:*/		return 0x82238E2C;
		/* 82238D98h case   13:*/		return 0x82238D9C;
	}
	return 0x82238D9C;
} // Block from 82238D64h-82238D9Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 82238D9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238D9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238D9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238D9C);
		  /* 82238D9Ch */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 82238D9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82238D9Ch case    0:*/		return 0x82238DA0;
		  /* 82238DA0h */ case    1:  		/* cmpwi CR6, R11, 50 */
		/* 82238DA0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000032);
		/* 82238DA0h case    1:*/		return 0x82238DA4;
		  /* 82238DA4h */ case    2:  		/* bc 12, CR6_EQ, 764 */
		/* 82238DA4h case    2:*/		if ( regs.CR[6].eq ) { return 0x822390A0;  }
		/* 82238DA4h case    2:*/		return 0x82238DA8;
		  /* 82238DA8h */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 82238DA8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82238DA8h case    3:*/		return 0x82238DAC;
		  /* 82238DACh */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 82238DACh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82238DACh case    4:*/		return 0x82238DB0;
		  /* 82238DB0h */ case    5:  		/* bc 12, CR6_EQ, 752 */
		/* 82238DB0h case    5:*/		if ( regs.CR[6].eq ) { return 0x822390A0;  }
		/* 82238DB0h case    5:*/		return 0x82238DB4;
		  /* 82238DB4h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 82238DB4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238DB4h case    6:*/		return 0x82238DB8;
		  /* 82238DB8h */ case    7:  		/* mr R3, R31 */
		/* 82238DB8h case    7:*/		regs.R3 = regs.R31;
		/* 82238DB8h case    7:*/		return 0x82238DBC;
		  /* 82238DBCh */ case    8:  		/* lwz R11, <#[R11 + 24]> */
		/* 82238DBCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82238DBCh case    8:*/		return 0x82238DC0;
		  /* 82238DC0h */ case    9:  		/* mtspr CTR, R11 */
		/* 82238DC0h case    9:*/		regs.CTR = regs.R11;
		/* 82238DC0h case    9:*/		return 0x82238DC4;
		  /* 82238DC4h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 82238DC4h case   10:*/		if ( 1 ) { regs.LR = 0x82238DC8; return (uint32)regs.CTR; }
		/* 82238DC4h case   10:*/		return 0x82238DC8;
		  /* 82238DC8h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238DC8h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238DC8h case   11:*/		return 0x82238DCC;
		  /* 82238DCCh */ case   12:  		/* bc 4, CR0_EQ, 724 */
		/* 82238DCCh case   12:*/		if ( !regs.CR[0].eq ) { return 0x822390A0;  }
		/* 82238DCCh case   12:*/		return 0x82238DD0;
		  /* 82238DD0h */ case   13:  		/* lwz R11, <#[R31 + 24]> */
		/* 82238DD0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82238DD0h case   13:*/		return 0x82238DD4;
		  /* 82238DD4h */ case   14:  		/* cmpwi CR6, R11, 128 */
		/* 82238DD4h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000080);
		/* 82238DD4h case   14:*/		return 0x82238DD8;
		  /* 82238DD8h */ case   15:  		/* bc 12, CR6_EQ, 712 */
		/* 82238DD8h case   15:*/		if ( regs.CR[6].eq ) { return 0x822390A0;  }
		/* 82238DD8h case   15:*/		return 0x82238DDC;
		  /* 82238DDCh */ case   16:  		/* lwz R11, <#[R31 + 228]> */
		/* 82238DDCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 82238DDCh case   16:*/		return 0x82238DE0;
		  /* 82238DE0h */ case   17:  		/* rlwinm. R11, R11, 23, 31, 31 */
		/* 82238DE0h case   17:*/		cpu::op::rlwinm<1,23,31,31>(regs,&regs.R11,regs.R11);
		/* 82238DE0h case   17:*/		return 0x82238DE4;
		  /* 82238DE4h */ case   18:  		/* bc 4, CR0_EQ, 700 */
		/* 82238DE4h case   18:*/		if ( !regs.CR[0].eq ) { return 0x822390A0;  }
		/* 82238DE4h case   18:*/		return 0x82238DE8;
		  /* 82238DE8h */ case   19:  		/* mr R4, R28 */
		/* 82238DE8h case   19:*/		regs.R4 = regs.R28;
		/* 82238DE8h case   19:*/		return 0x82238DEC;
		  /* 82238DECh */ case   20:  		/* mr R3, R25 */
		/* 82238DECh case   20:*/		regs.R3 = regs.R25;
		/* 82238DECh case   20:*/		return 0x82238DF0;
		  /* 82238DF0h */ case   21:  		/* bl -11712 */
		/* 82238DF0h case   21:*/		regs.LR = 0x82238DF4; return 0x82236030;
		/* 82238DF0h case   21:*/		return 0x82238DF4;
		  /* 82238DF4h */ case   22:  		/* lwz R11, <#[R28]> */
		/* 82238DF4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82238DF4h case   22:*/		return 0x82238DF8;
		  /* 82238DF8h */ case   23:  		/* mr R3, R28 */
		/* 82238DF8h case   23:*/		regs.R3 = regs.R28;
		/* 82238DF8h case   23:*/		return 0x82238DFC;
		  /* 82238DFCh */ case   24:  		/* lwz R11, <#[R11 + 96]> */
		/* 82238DFCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000060) );
		/* 82238DFCh case   24:*/		return 0x82238E00;
		  /* 82238E00h */ case   25:  		/* mtspr CTR, R11 */
		/* 82238E00h case   25:*/		regs.CTR = regs.R11;
		/* 82238E00h case   25:*/		return 0x82238E04;
		  /* 82238E04h */ case   26:  		/* bcctrl 20, CR0_LT */
		/* 82238E04h case   26:*/		if ( 1 ) { regs.LR = 0x82238E08; return (uint32)regs.CTR; }
		/* 82238E04h case   26:*/		return 0x82238E08;
		  /* 82238E08h */ case   27:  		/* lwz R11, <#[R25 + 2148]> */
		/* 82238E08h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000864) );
		/* 82238E08h case   27:*/		return 0x82238E0C;
		  /* 82238E0Ch */ case   28:  		/* lwz R10, <#[R31 + 892]> */
		/* 82238E0Ch case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000037C) );
		/* 82238E0Ch case   28:*/		return 0x82238E10;
		  /* 82238E10h */ case   29:  		/* cmpw CR6, R10, R11 */
		/* 82238E10h case   29:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 82238E10h case   29:*/		return 0x82238E14;
		  /* 82238E14h */ case   30:  		/* bc 12, CR6_EQ, 24 */
		/* 82238E14h case   30:*/		if ( regs.CR[6].eq ) { return 0x82238E2C;  }
		/* 82238E14h case   30:*/		return 0x82238E18;
		  /* 82238E18h */ case   31:  		/* stw R11, <#[R31 + 892]> */
		/* 82238E18h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000037C) );
		/* 82238E18h case   31:*/		return 0x82238E1C;
		  /* 82238E1Ch */ case   32:  		/* mr R3, R24 */
		/* 82238E1Ch case   32:*/		regs.R3 = regs.R24;
		/* 82238E1Ch case   32:*/		return 0x82238E20;
		  /* 82238E20h */ case   33:  		/* lwz R4, <#[R24 + 4]> */
		/* 82238E20h case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000004) );
		/* 82238E20h case   33:*/		return 0x82238E24;
		  /* 82238E24h */ case   34:  		/* bl 109724 */
		/* 82238E24h case   34:*/		regs.LR = 0x82238E28; return 0x82253AC0;
		/* 82238E24h case   34:*/		return 0x82238E28;
		  /* 82238E28h */ case   35:  		/* stw R31, <#[R3]> */
		/* 82238E28h case   35:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 82238E28h case   35:*/		return 0x82238E2C;
	}
	return 0x82238E2C;
} // Block from 82238D9Ch-82238E2Ch (36 instructions)

//////////////////////////////////////////////////////
// Block at 82238E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238E2C);
		  /* 82238E2Ch */ case    0:  		/* lwz R27, <#[R28 + 80]> */
		/* 82238E2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R28 + 0x00000050) );
		/* 82238E2Ch case    0:*/		return 0x82238E30;
		  /* 82238E30h */ case    1:  		/* lwz R26, <#[R28 + 56]> */
		/* 82238E30h case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R28 + 0x00000038) );
		/* 82238E30h case    1:*/		return 0x82238E34;
		  /* 82238E34h */ case    2:  		/* b 604 */
		/* 82238E34h case    2:*/		return 0x82239090;
		/* 82238E34h case    2:*/		return 0x82238E38;
		  /* 82238E38h */ case    3:  		/* lwz R3, <#[R24 + 8]> */
		/* 82238E38h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R24 + 0x00000008) );
		/* 82238E38h case    3:*/		return 0x82238E3C;
		  /* 82238E3Ch */ case    4:  		/* lwz R31, <#[R3]> */
		/* 82238E3Ch case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 82238E3Ch case    4:*/		return 0x82238E40;
		  /* 82238E40h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 82238E40h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82238E40h case    5:*/		return 0x82238E44;
		  /* 82238E44h */ case    6:  		/* bc 12, CR6_EQ, 616 */
		/* 82238E44h case    6:*/		if ( regs.CR[6].eq ) { return 0x822390AC;  }
		/* 82238E44h case    6:*/		return 0x82238E48;
		  /* 82238E48h */ case    7:  		/* li R4, 0 */
		/* 82238E48h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82238E48h case    7:*/		return 0x82238E4C;
		  /* 82238E4Ch */ case    8:  		/* mr R3, R24 */
		/* 82238E4Ch case    8:*/		regs.R3 = regs.R24;
		/* 82238E4Ch case    8:*/		return 0x82238E50;
		  /* 82238E50h */ case    9:  		/* bl 109488 */
		/* 82238E50h case    9:*/		regs.LR = 0x82238E54; return 0x82253A00;
		/* 82238E50h case    9:*/		return 0x82238E54;
		  /* 82238E54h */ case   10:  		/* mr R4, R25 */
		/* 82238E54h case   10:*/		regs.R4 = regs.R25;
		/* 82238E54h case   10:*/		return 0x82238E58;
		  /* 82238E58h */ case   11:  		/* mr R3, R31 */
		/* 82238E58h case   11:*/		regs.R3 = regs.R31;
		/* 82238E58h case   11:*/		return 0x82238E5C;
		  /* 82238E5Ch */ case   12:  		/* bl 121452 */
		/* 82238E5Ch case   12:*/		regs.LR = 0x82238E60; return 0x822568C8;
		/* 82238E5Ch case   12:*/		return 0x82238E60;
		  /* 82238E60h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238E60h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238E60h case   13:*/		return 0x82238E64;
		  /* 82238E64h */ case   14:  		/* bc 12, CR0_EQ, 336 */
		/* 82238E64h case   14:*/		if ( regs.CR[0].eq ) { return 0x82238FB4;  }
		/* 82238E64h case   14:*/		return 0x82238E68;
		  /* 82238E68h */ case   15:  		/* mr R3, R31 */
		/* 82238E68h case   15:*/		regs.R3 = regs.R31;
		/* 82238E68h case   15:*/		return 0x82238E6C;
		  /* 82238E6Ch */ case   16:  		/* lwz R4, <#[R25 + 100]> */
		/* 82238E6Ch case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000064) );
		/* 82238E6Ch case   16:*/		return 0x82238E70;
		  /* 82238E70h */ case   17:  		/* bl -1000 */
		/* 82238E70h case   17:*/		regs.LR = 0x82238E74; return 0x82238A88;
		/* 82238E70h case   17:*/		return 0x82238E74;
		  /* 82238E74h */ case   18:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238E74h case   18:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238E74h case   18:*/		return 0x82238E78;
		  /* 82238E78h */ case   19:  		/* bc 12, CR0_EQ, 316 */
		/* 82238E78h case   19:*/		if ( regs.CR[0].eq ) { return 0x82238FB4;  }
		/* 82238E78h case   19:*/		return 0x82238E7C;
		  /* 82238E7Ch */ case   20:  		/* lwz R11, <#[R31 + 24]> */
		/* 82238E7Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82238E7Ch case   20:*/		return 0x82238E80;
		  /* 82238E80h */ case   21:  		/* cmpwi CR6, R11, 50 */
		/* 82238E80h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000032);
		/* 82238E80h case   21:*/		return 0x82238E84;
		  /* 82238E84h */ case   22:  		/* bc 12, CR6_EQ, 304 */
		/* 82238E84h case   22:*/		if ( regs.CR[6].eq ) { return 0x82238FB4;  }
		/* 82238E84h case   22:*/		return 0x82238E88;
		  /* 82238E88h */ case   23:  		/* lwz R11, <#[R31 + 20]> */
		/* 82238E88h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82238E88h case   23:*/		return 0x82238E8C;
		  /* 82238E8Ch */ case   24:  		/* cmpwi CR6, R11, 0 */
		/* 82238E8Ch case   24:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82238E8Ch case   24:*/		return 0x82238E90;
		  /* 82238E90h */ case   25:  		/* bc 12, CR6_EQ, 292 */
		/* 82238E90h case   25:*/		if ( regs.CR[6].eq ) { return 0x82238FB4;  }
		/* 82238E90h case   25:*/		return 0x82238E94;
		  /* 82238E94h */ case   26:  		/* lwz R11, <#[R31]> */
		/* 82238E94h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238E94h case   26:*/		return 0x82238E98;
		  /* 82238E98h */ case   27:  		/* mr R3, R31 */
		/* 82238E98h case   27:*/		regs.R3 = regs.R31;
		/* 82238E98h case   27:*/		return 0x82238E9C;
		  /* 82238E9Ch */ case   28:  		/* lwz R11, <#[R11 + 24]> */
		/* 82238E9Ch case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82238E9Ch case   28:*/		return 0x82238EA0;
		  /* 82238EA0h */ case   29:  		/* mtspr CTR, R11 */
		/* 82238EA0h case   29:*/		regs.CTR = regs.R11;
		/* 82238EA0h case   29:*/		return 0x82238EA4;
		  /* 82238EA4h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 82238EA4h case   30:*/		if ( 1 ) { regs.LR = 0x82238EA8; return (uint32)regs.CTR; }
		/* 82238EA4h case   30:*/		return 0x82238EA8;
		  /* 82238EA8h */ case   31:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82238EA8h case   31:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82238EA8h case   31:*/		return 0x82238EAC;
		  /* 82238EACh */ case   32:  		/* bc 4, CR0_EQ, 264 */
		/* 82238EACh case   32:*/		if ( !regs.CR[0].eq ) { return 0x82238FB4;  }
		/* 82238EACh case   32:*/		return 0x82238EB0;
		  /* 82238EB0h */ case   33:  		/* lwz R11, <#[R31 + 24]> */
		/* 82238EB0h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82238EB0h case   33:*/		return 0x82238EB4;
		  /* 82238EB4h */ case   34:  		/* cmpwi CR6, R11, 128 */
		/* 82238EB4h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000080);
		/* 82238EB4h case   34:*/		return 0x82238EB8;
		  /* 82238EB8h */ case   35:  		/* bc 12, CR6_EQ, 252 */
		/* 82238EB8h case   35:*/		if ( regs.CR[6].eq ) { return 0x82238FB4;  }
		/* 82238EB8h case   35:*/		return 0x82238EBC;
		  /* 82238EBCh */ case   36:  		/* lwz R11, <#[R31]> */
		/* 82238EBCh case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238EBCh case   36:*/		return 0x82238EC0;
		  /* 82238EC0h */ case   37:  		/* mr R3, R31 */
		/* 82238EC0h case   37:*/		regs.R3 = regs.R31;
		/* 82238EC0h case   37:*/		return 0x82238EC4;
		  /* 82238EC4h */ case   38:  		/* lwz R11, <#[R11 + 44]> */
		/* 82238EC4h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82238EC4h case   38:*/		return 0x82238EC8;
		  /* 82238EC8h */ case   39:  		/* mtspr CTR, R11 */
		/* 82238EC8h case   39:*/		regs.CTR = regs.R11;
		/* 82238EC8h case   39:*/		return 0x82238ECC;
		  /* 82238ECCh */ case   40:  		/* bcctrl 20, CR0_LT */
		/* 82238ECCh case   40:*/		if ( 1 ) { regs.LR = 0x82238ED0; return (uint32)regs.CTR; }
		/* 82238ECCh case   40:*/		return 0x82238ED0;
		  /* 82238ED0h */ case   41:  		/* cmplwi CR0, R3, 0 */
		/* 82238ED0h case   41:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82238ED0h case   41:*/		return 0x82238ED4;
		  /* 82238ED4h */ case   42:  		/* bc 12, CR0_EQ, 108 */
		/* 82238ED4h case   42:*/		if ( regs.CR[0].eq ) { return 0x82238F40;  }
		/* 82238ED4h case   42:*/		return 0x82238ED8;
		  /* 82238ED8h */ case   43:  		/* lwz R11, <#[R31 + 20]> */
		/* 82238ED8h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82238ED8h case   43:*/		return 0x82238EDC;
		  /* 82238EDCh */ case   44:  		/* li R28, 1 */
		/* 82238EDCh case   44:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 82238EDCh case   44:*/		return 0x82238EE0;
		  /* 82238EE0h */ case   45:  		/* cmpwi CR6, R11, 1 */
		/* 82238EE0h case   45:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82238EE0h case   45:*/		return 0x82238EE4;
		  /* 82238EE4h */ case   46:  		/* bc 12, CR6_LT, 68 */
		/* 82238EE4h case   46:*/		if ( regs.CR[6].lt ) { return 0x82238F28;  }
		/* 82238EE4h case   46:*/		return 0x82238EE8;
		  /* 82238EE8h */ case   47:  		/* addi R29, R31, 236 */
		/* 82238EE8h case   47:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0xEC);
		/* 82238EE8h case   47:*/		return 0x82238EEC;
		  /* 82238EECh */ case   48:  		/* lwz R30, <#[R29]> */
		/* 82238EECh case   48:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 82238EECh case   48:*/		return 0x82238EF0;
		  /* 82238EF0h */ case   49:  		/* lwz R11, <#[R25 + 2148]> */
		/* 82238EF0h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000864) );
		/* 82238EF0h case   49:*/		return 0x82238EF4;
		  /* 82238EF4h */ case   50:  		/* lwz R10, <#[R30 + 892]> */
		/* 82238EF4h case   50:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000037C) );
		/* 82238EF4h case   50:*/		return 0x82238EF8;
		  /* 82238EF8h */ case   51:  		/* cmpw CR6, R10, R11 */
		/* 82238EF8h case   51:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 82238EF8h case   51:*/		return 0x82238EFC;
		  /* 82238EFCh */ case   52:  		/* bc 12, CR6_EQ, 24 */
		/* 82238EFCh case   52:*/		if ( regs.CR[6].eq ) { return 0x82238F14;  }
		/* 82238EFCh case   52:*/		return 0x82238F00;
		  /* 82238F00h */ case   53:  		/* stw R11, <#[R30 + 892]> */
		/* 82238F00h case   53:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000037C) );
		/* 82238F00h case   53:*/		return 0x82238F04;
		  /* 82238F04h */ case   54:  		/* mr R3, R24 */
		/* 82238F04h case   54:*/		regs.R3 = regs.R24;
		/* 82238F04h case   54:*/		return 0x82238F08;
		  /* 82238F08h */ case   55:  		/* lwz R4, <#[R24 + 4]> */
		/* 82238F08h case   55:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000004) );
		/* 82238F08h case   55:*/		return 0x82238F0C;
		  /* 82238F0Ch */ case   56:  		/* bl 109492 */
		/* 82238F0Ch case   56:*/		regs.LR = 0x82238F10; return 0x82253AC0;
		/* 82238F0Ch case   56:*/		return 0x82238F10;
		  /* 82238F10h */ case   57:  		/* stw R30, <#[R3]> */
		/* 82238F10h case   57:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 82238F10h case   57:*/		return 0x82238F14;
	}
	return 0x82238F14;
} // Block from 82238E2Ch-82238F14h (58 instructions)

//////////////////////////////////////////////////////
// Block at 82238F14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238F14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238F14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238F14);
		  /* 82238F14h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82238F14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82238F14h case    0:*/		return 0x82238F18;
		  /* 82238F18h */ case    1:  		/* addi R28, R28, 1 */
		/* 82238F18h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82238F18h case    1:*/		return 0x82238F1C;
		  /* 82238F1Ch */ case    2:  		/* addi R29, R29, 4 */
		/* 82238F1Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82238F1Ch case    2:*/		return 0x82238F20;
		  /* 82238F20h */ case    3:  		/* cmpw CR6, R28, R11 */
		/* 82238F20h case    3:*/		cpu::op::cmpw<6>(regs,regs.R28,regs.R11);
		/* 82238F20h case    3:*/		return 0x82238F24;
		  /* 82238F24h */ case    4:  		/* bc 4, CR6_GT, -56 */
		/* 82238F24h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82238EEC;  }
		/* 82238F24h case    4:*/		return 0x82238F28;
	}
	return 0x82238F28;
} // Block from 82238F14h-82238F28h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82238F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238F28);
		  /* 82238F28h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82238F28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238F28h case    0:*/		return 0x82238F2C;
		  /* 82238F2Ch */ case    1:  		/* mr R3, R31 */
		/* 82238F2Ch case    1:*/		regs.R3 = regs.R31;
		/* 82238F2Ch case    1:*/		return 0x82238F30;
		  /* 82238F30h */ case    2:  		/* lwz R11, <#[R11 + 96]> */
		/* 82238F30h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000060) );
		/* 82238F30h case    2:*/		return 0x82238F34;
		  /* 82238F34h */ case    3:  		/* mtspr CTR, R11 */
		/* 82238F34h case    3:*/		regs.CTR = regs.R11;
		/* 82238F34h case    3:*/		return 0x82238F38;
		  /* 82238F38h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82238F38h case    4:*/		if ( 1 ) { regs.LR = 0x82238F3C; return (uint32)regs.CTR; }
		/* 82238F38h case    4:*/		return 0x82238F3C;
		  /* 82238F3Ch */ case    5:  		/* b 340 */
		/* 82238F3Ch case    5:*/		return 0x82239090;
		/* 82238F3Ch case    5:*/		return 0x82238F40;
	}
	return 0x82238F40;
} // Block from 82238F28h-82238F40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82238F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238F40);
		  /* 82238F40h */ case    0:  		/* lwz R11, <#[R31 + 228]> */
		/* 82238F40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 82238F40h case    0:*/		return 0x82238F44;
		  /* 82238F44h */ case    1:  		/* rlwinm. R11, R11, 23, 31, 31 */
		/* 82238F44h case    1:*/		cpu::op::rlwinm<1,23,31,31>(regs,&regs.R11,regs.R11);
		/* 82238F44h case    1:*/		return 0x82238F48;
		  /* 82238F48h */ case    2:  		/* bc 12, CR0_EQ, 60 */
		/* 82238F48h case    2:*/		if ( regs.CR[0].eq ) { return 0x82238F84;  }
		/* 82238F48h case    2:*/		return 0x82238F4C;
		  /* 82238F4Ch */ case    3:  		/* mr R3, R31 */
		/* 82238F4Ch case    3:*/		regs.R3 = regs.R31;
		/* 82238F4Ch case    3:*/		return 0x82238F50;
		  /* 82238F50h */ case    4:  		/* bl -12696 */
		/* 82238F50h case    4:*/		regs.LR = 0x82238F54; return 0x82235DB8;
		/* 82238F50h case    4:*/		return 0x82238F54;
		  /* 82238F54h */ case    5:  		/* lwz R11, <#[R25 + 2148]> */
		/* 82238F54h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000864) );
		/* 82238F54h case    5:*/		return 0x82238F58;
		  /* 82238F58h */ case    6:  		/* lwz R10, <#[R3 + 892]> */
		/* 82238F58h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000037C) );
		/* 82238F58h case    6:*/		return 0x82238F5C;
		  /* 82238F5Ch */ case    7:  		/* mr R30, R3 */
		/* 82238F5Ch case    7:*/		regs.R30 = regs.R3;
		/* 82238F5Ch case    7:*/		return 0x82238F60;
		  /* 82238F60h */ case    8:  		/* cmpw CR6, R10, R11 */
		/* 82238F60h case    8:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 82238F60h case    8:*/		return 0x82238F64;
		  /* 82238F64h */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 82238F64h case    9:*/		if ( regs.CR[6].eq ) { return 0x82238F7C;  }
		/* 82238F64h case    9:*/		return 0x82238F68;
		  /* 82238F68h */ case   10:  		/* stw R11, <#[R3 + 892]> */
		/* 82238F68h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000037C) );
		/* 82238F68h case   10:*/		return 0x82238F6C;
		  /* 82238F6Ch */ case   11:  		/* mr R3, R24 */
		/* 82238F6Ch case   11:*/		regs.R3 = regs.R24;
		/* 82238F6Ch case   11:*/		return 0x82238F70;
		  /* 82238F70h */ case   12:  		/* lwz R4, <#[R24 + 4]> */
		/* 82238F70h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000004) );
		/* 82238F70h case   12:*/		return 0x82238F74;
		  /* 82238F74h */ case   13:  		/* bl 109388 */
		/* 82238F74h case   13:*/		regs.LR = 0x82238F78; return 0x82253AC0;
		/* 82238F74h case   13:*/		return 0x82238F78;
		  /* 82238F78h */ case   14:  		/* stw R30, <#[R3]> */
		/* 82238F78h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 82238F78h case   14:*/		return 0x82238F7C;
	}
	return 0x82238F7C;
} // Block from 82238F40h-82238F7Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82238F7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238F7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238F7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238F7C);
		  /* 82238F7Ch */ case    0:  		/* mr R3, R31 */
		/* 82238F7Ch case    0:*/		regs.R3 = regs.R31;
		/* 82238F7Ch case    0:*/		return 0x82238F80;
		  /* 82238F80h */ case    1:  		/* bl -12640 */
		/* 82238F80h case    1:*/		regs.LR = 0x82238F84; return 0x82235E20;
		/* 82238F80h case    1:*/		return 0x82238F84;
	}
	return 0x82238F84;
} // Block from 82238F7Ch-82238F84h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82238F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238F84);
		  /* 82238F84h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82238F84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82238F84h case    0:*/		return 0x82238F88;
		  /* 82238F88h */ case    1:  		/* mr R6, R26 */
		/* 82238F88h case    1:*/		regs.R6 = regs.R26;
		/* 82238F88h case    1:*/		return 0x82238F8C;
		  /* 82238F8Ch */ case    2:  		/* mr R5, R27 */
		/* 82238F8Ch case    2:*/		regs.R5 = regs.R27;
		/* 82238F8Ch case    2:*/		return 0x82238F90;
		  /* 82238F90h */ case    3:  		/* mr R4, R25 */
		/* 82238F90h case    3:*/		regs.R4 = regs.R25;
		/* 82238F90h case    3:*/		return 0x82238F94;
		  /* 82238F94h */ case    4:  		/* mr R3, R31 */
		/* 82238F94h case    4:*/		regs.R3 = regs.R31;
		/* 82238F94h case    4:*/		return 0x82238F98;
		  /* 82238F98h */ case    5:  		/* lwz R11, <#[R11 + 100]> */
		/* 82238F98h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000064) );
		/* 82238F98h case    5:*/		return 0x82238F9C;
		  /* 82238F9Ch */ case    6:  		/* mtspr CTR, R11 */
		/* 82238F9Ch case    6:*/		regs.CTR = regs.R11;
		/* 82238F9Ch case    6:*/		return 0x82238FA0;
		  /* 82238FA0h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 82238FA0h case    7:*/		if ( 1 ) { regs.LR = 0x82238FA4; return (uint32)regs.CTR; }
		/* 82238FA0h case    7:*/		return 0x82238FA4;
		  /* 82238FA4h */ case    8:  		/* mr R3, R31 */
		/* 82238FA4h case    8:*/		regs.R3 = regs.R31;
		/* 82238FA4h case    8:*/		return 0x82238FA8;
		  /* 82238FA8h */ case    9:  		/* lwz R4, <#[R25 + 100]> */
		/* 82238FA8h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000064) );
		/* 82238FA8h case    9:*/		return 0x82238FAC;
		  /* 82238FACh */ case   10:  		/* bl -12548 */
		/* 82238FACh case   10:*/		regs.LR = 0x82238FB0; return 0x82235EA8;
		/* 82238FACh case   10:*/		return 0x82238FB0;
		  /* 82238FB0h */ case   11:  		/* b 224 */
		/* 82238FB0h case   11:*/		return 0x82239090;
		/* 82238FB0h case   11:*/		return 0x82238FB4;
	}
	return 0x82238FB4;
} // Block from 82238F84h-82238FB4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82238FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82238FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82238FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82238FB4);
		  /* 82238FB4h */ case    0:  		/* li R3, 49 */
		/* 82238FB4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 82238FB4h case    0:*/		return 0x82238FB8;
		  /* 82238FB8h */ case    1:  		/* lwz R4, <#[R25 + 12]> */
		/* 82238FB8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x0000000C) );
		/* 82238FB8h case    1:*/		return 0x82238FBC;
		  /* 82238FBCh */ case    2:  		/* bl 126380 */
		/* 82238FBCh case    2:*/		regs.LR = 0x82238FC0; return 0x82257D68;
		/* 82238FBCh case    2:*/		return 0x82238FC0;
		  /* 82238FC0h */ case    3:  		/* mr R5, R31 */
		/* 82238FC0h case    3:*/		regs.R5 = regs.R31;
		/* 82238FC0h case    3:*/		return 0x82238FC4;
		  /* 82238FC4h */ case    4:  		/* li R4, 1 */
		/* 82238FC4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82238FC4h case    4:*/		return 0x82238FC8;
		  /* 82238FC8h */ case    5:  		/* mr R30, R3 */
		/* 82238FC8h case    5:*/		regs.R30 = regs.R3;
		/* 82238FC8h case    5:*/		return 0x82238FCC;
		  /* 82238FCCh */ case    6:  		/* bl -12412 */
		/* 82238FCCh case    6:*/		regs.LR = 0x82238FD0; return 0x82235F50;
		/* 82238FCCh case    6:*/		return 0x82238FD0;
		  /* 82238FD0h */ case    7:  		/* lwz R11, <#[R30]> */
		/* 82238FD0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82238FD0h case    7:*/		return 0x82238FD4;
		  /* 82238FD4h */ case    8:  		/* mr R3, R30 */
		/* 82238FD4h case    8:*/		regs.R3 = regs.R30;
		/* 82238FD4h case    8:*/		return 0x82238FD8;
		  /* 82238FD8h */ case    9:  		/* mr R6, R26 */
		/* 82238FD8h case    9:*/		regs.R6 = regs.R26;
		/* 82238FD8h case    9:*/		return 0x82238FDC;
		  /* 82238FDCh */ case   10:  		/* mr R5, R27 */
		/* 82238FDCh case   10:*/		regs.R5 = regs.R27;
		/* 82238FDCh case   10:*/		return 0x82238FE0;
		  /* 82238FE0h */ case   11:  		/* mr R4, R25 */
		/* 82238FE0h case   11:*/		regs.R4 = regs.R25;
		/* 82238FE0h case   11:*/		return 0x82238FE4;
		  /* 82238FE4h */ case   12:  		/* lwz R11, <#[R11 + 100]> */
		/* 82238FE4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000064) );
		/* 82238FE4h case   12:*/		return 0x82238FE8;
		  /* 82238FE8h */ case   13:  		/* mtspr CTR, R11 */
		/* 82238FE8h case   13:*/		regs.CTR = regs.R11;
		/* 82238FE8h case   13:*/		return 0x82238FEC;
		  /* 82238FECh */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82238FECh case   14:*/		if ( 1 ) { regs.LR = 0x82238FF0; return (uint32)regs.CTR; }
		/* 82238FECh case   14:*/		return 0x82238FF0;
		  /* 82238FF0h */ case   15:  		/* mr R3, R30 */
		/* 82238FF0h case   15:*/		regs.R3 = regs.R30;
		/* 82238FF0h case   15:*/		return 0x82238FF4;
		  /* 82238FF4h */ case   16:  		/* lwz R4, <#[R25 + 100]> */
		/* 82238FF4h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000064) );
		/* 82238FF4h case   16:*/		return 0x82238FF8;
		  /* 82238FF8h */ case   17:  		/* bl -12624 */
		/* 82238FF8h case   17:*/		regs.LR = 0x82238FFC; return 0x82235EA8;
		/* 82238FF8h case   17:*/		return 0x82238FFC;
		  /* 82238FFCh */ case   18:  		/* mr R3, R31 */
		/* 82238FFCh case   18:*/		regs.R3 = regs.R31;
		/* 82238FFCh case   18:*/		return 0x82239000;
		  /* 82239000h */ case   19:  		/* lwz R4, <#[R25 + 100]> */
		/* 82239000h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000064) );
		/* 82239000h case   19:*/		return 0x82239004;
		  /* 82239004h */ case   20:  		/* bl -1404 */
		/* 82239004h case   20:*/		regs.LR = 0x82239008; return 0x82238A88;
		/* 82239004h case   20:*/		return 0x82239008;
		  /* 82239008h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82239008h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82239008h case   21:*/		return 0x8223900C;
		  /* 8223900Ch */ case   22:  		/* lwz R11, <#[R25 + 100]> */
		/* 8223900Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000064) );
		/* 8223900Ch case   22:*/		return 0x82239010;
		  /* 82239010h */ case   23:  		/* bc 12, CR0_EQ, 112 */
		/* 82239010h case   23:*/		if ( regs.CR[0].eq ) { return 0x82239080;  }
		/* 82239010h case   23:*/		return 0x82239014;
		  /* 82239014h */ case   24:  		/* lwz R3, <#[R31 + 948]> */
		/* 82239014h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000003B4) );
		/* 82239014h case   24:*/		return 0x82239018;
		  /* 82239018h */ case   25:  		/* lwz R11, <#[R11 + 948]> */
		/* 82239018h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000003B4) );
		/* 82239018h case   25:*/		return 0x8223901C;
		  /* 8223901Ch */ case   26:  		/* cmpw CR6, R3, R11 */
		/* 8223901Ch case   26:*/		cpu::op::cmpw<6>(regs,regs.R3,regs.R11);
		/* 8223901Ch case   26:*/		return 0x82239020;
		  /* 82239020h */ case   27:  		/* bc 4, CR6_EQ, 88 */
		/* 82239020h case   27:*/		if ( !regs.CR[6].eq ) { return 0x82239078;  }
		/* 82239020h case   27:*/		return 0x82239024;
		  /* 82239024h */ case   28:  		/* lwz R11, <#[R31]> */
		/* 82239024h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82239024h case   28:*/		return 0x82239028;
		  /* 82239028h */ case   29:  		/* mr R3, R31 */
		/* 82239028h case   29:*/		regs.R3 = regs.R31;
		/* 82239028h case   29:*/		return 0x8223902C;
		  /* 8223902Ch */ case   30:  		/* mr R28, R31 */
		/* 8223902Ch case   30:*/		regs.R28 = regs.R31;
		/* 8223902Ch case   30:*/		return 0x82239030;
		  /* 82239030h */ case   31:  		/* mr R29, R31 */
		/* 82239030h case   31:*/		regs.R29 = regs.R31;
		/* 82239030h case   31:*/		return 0x82239034;
		  /* 82239034h */ case   32:  		/* b 28 */
		/* 82239034h case   32:*/		return 0x82239050;
		/* 82239034h case   32:*/		return 0x82239038;
		  /* 82239038h */ case   33:  		/* lwz R11, <#[R25 + 100]> */
		/* 82239038h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000064) );
		/* 82239038h case   33:*/		return 0x8223903C;
		  /* 8223903Ch */ case   34:  		/* cmplw CR6, R29, R11 */
		/* 8223903Ch case   34:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8223903Ch case   34:*/		return 0x82239040;
		  /* 82239040h */ case   35:  		/* bc 12, CR6_EQ, 40 */
		/* 82239040h case   35:*/		if ( regs.CR[6].eq ) { return 0x82239068;  }
		/* 82239040h case   35:*/		return 0x82239044;
		  /* 82239044h */ case   36:  		/* lwz R29, <#[R29 + 8]> */
		/* 82239044h case   36:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 82239044h case   36:*/		return 0x82239048;
		  /* 82239048h */ case   37:  		/* mr R3, R29 */
		/* 82239048h case   37:*/		regs.R3 = regs.R29;
		/* 82239048h case   37:*/		return 0x8223904C;
		  /* 8223904Ch */ case   38:  		/* lwz R11, <#[R29]> */
		/* 8223904Ch case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8223904Ch case   38:*/		return 0x82239050;
	}
	return 0x82239050;
} // Block from 82238FB4h-82239050h (39 instructions)

//////////////////////////////////////////////////////
// Block at 82239050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239050);
		  /* 82239050h */ case    0:  		/* lwz R11, <#[R11 + 40]> */
		/* 82239050h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82239050h case    0:*/		return 0x82239054;
		  /* 82239054h */ case    1:  		/* mtspr CTR, R11 */
		/* 82239054h case    1:*/		regs.CTR = regs.R11;
		/* 82239054h case    1:*/		return 0x82239058;
		  /* 82239058h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 82239058h case    2:*/		if ( 1 ) { regs.LR = 0x8223905C; return (uint32)regs.CTR; }
		/* 82239058h case    2:*/		return 0x8223905C;
		  /* 8223905Ch */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223905Ch case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223905Ch case    3:*/		return 0x82239060;
		  /* 82239060h */ case    4:  		/* bc 12, CR0_EQ, -40 */
		/* 82239060h case    4:*/		if ( regs.CR[0].eq ) { return 0x82239038;  }
		/* 82239060h case    4:*/		return 0x82239064;
		  /* 82239064h */ case    5:  		/* b 8 */
		/* 82239064h case    5:*/		return 0x8223906C;
		/* 82239064h case    5:*/		return 0x82239068;
	}
	return 0x82239068;
} // Block from 82239050h-82239068h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82239068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239068);
		  /* 82239068h */ case    0:  		/* mr R28, R29 */
		/* 82239068h case    0:*/		regs.R28 = regs.R29;
		/* 82239068h case    0:*/		return 0x8223906C;
	}
	return 0x8223906C;
} // Block from 82239068h-8223906Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223906Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223906C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223906C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223906C);
		  /* 8223906Ch */ case    0:  		/* lwz R3, <#[R31 + 948]> */
		/* 8223906Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000003B4) );
		/* 8223906Ch case    0:*/		return 0x82239070;
		  /* 82239070h */ case    1:  		/* mr R4, R28 */
		/* 82239070h case    1:*/		regs.R4 = regs.R28;
		/* 82239070h case    1:*/		return 0x82239074;
		  /* 82239074h */ case    2:  		/* b 20 */
		/* 82239074h case    2:*/		return 0x82239088;
		/* 82239074h case    2:*/		return 0x82239078;
	}
	return 0x82239078;
} // Block from 8223906Ch-82239078h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82239078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239078);
		  /* 82239078h */ case    0:  		/* mr R4, R31 */
		/* 82239078h case    0:*/		regs.R4 = regs.R31;
		/* 82239078h case    0:*/		return 0x8223907C;
		  /* 8223907Ch */ case    1:  		/* b 12 */
		/* 8223907Ch case    1:*/		return 0x82239088;
		/* 8223907Ch case    1:*/		return 0x82239080;
	}
	return 0x82239080;
} // Block from 82239078h-82239080h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82239080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239080);
		  /* 82239080h */ case    0:  		/* lwz R3, <#[R11 + 948]> */
		/* 82239080h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000003B4) );
		/* 82239080h case    0:*/		return 0x82239084;
		  /* 82239084h */ case    1:  		/* mr R4, R11 */
		/* 82239084h case    1:*/		regs.R4 = regs.R11;
		/* 82239084h case    1:*/		return 0x82239088;
	}
	return 0x82239088;
} // Block from 82239080h-82239088h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82239088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239088);
		  /* 82239088h */ case    0:  		/* mr R5, R30 */
		/* 82239088h case    0:*/		regs.R5 = regs.R30;
		/* 82239088h case    0:*/		return 0x8223908C;
		  /* 8223908Ch */ case    1:  		/* bl 130868 */
		/* 8223908Ch case    1:*/		regs.LR = 0x82239090; return 0x82258FC0;
		/* 8223908Ch case    1:*/		return 0x82239090;
	}
	return 0x82239090;
} // Block from 82239088h-82239090h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82239090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239090);
		  /* 82239090h */ case    0:  		/* lwz R11, <#[R24 + 4]> */
		/* 82239090h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 82239090h case    0:*/		return 0x82239094;
		  /* 82239094h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82239094h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82239094h case    1:*/		return 0x82239098;
		  /* 82239098h */ case    2:  		/* bc 4, CR6_EQ, -608 */
		/* 82239098h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82238E38;  }
		/* 82239098h case    2:*/		return 0x8223909C;
		  /* 8223909Ch */ case    3:  		/* b 16 */
		/* 8223909Ch case    3:*/		return 0x822390AC;
		/* 8223909Ch case    3:*/		return 0x822390A0;
	}
	return 0x822390A0;
} // Block from 82239090h-822390A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822390A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822390A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822390A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822390A0);
		  /* 822390A0h */ case    0:  		/* mr R3, R28 */
		/* 822390A0h case    0:*/		regs.R3 = regs.R28;
		/* 822390A0h case    0:*/		return 0x822390A4;
		  /* 822390A4h */ case    1:  		/* lwz R4, <#[R25 + 100]> */
		/* 822390A4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000064) );
		/* 822390A4h case    1:*/		return 0x822390A8;
		  /* 822390A8h */ case    2:  		/* bl -12800 */
		/* 822390A8h case    2:*/		regs.LR = 0x822390AC; return 0x82235EA8;
		/* 822390A8h case    2:*/		return 0x822390AC;
	}
	return 0x822390AC;
} // Block from 822390A0h-822390ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822390ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822390AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822390AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822390AC);
		  /* 822390ACh */ case    0:  		/* addic. R22, R22, -1 */
		/* 822390ACh case    0:*/		cpu::op::addic<1>(regs,&regs.R22,regs.R22,0xFFFFFFFF);
		/* 822390ACh case    0:*/		return 0x822390B0;
		  /* 822390B0h */ case    1:  		/* addi R23, R23, -1 */
		/* 822390B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0xFFFFFFFF);
		/* 822390B0h case    1:*/		return 0x822390B4;
		  /* 822390B4h */ case    2:  		/* addi R21, R21, -4 */
		/* 822390B4h case    2:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0xFFFFFFFC);
		/* 822390B4h case    2:*/		return 0x822390B8;
		  /* 822390B8h */ case    3:  		/* bc 12, CR0_GT, -1348 */
		/* 822390B8h case    3:*/		if ( regs.CR[0].gt ) { return 0x82238B74;  }
		/* 822390B8h case    3:*/		return 0x822390BC;
	}
	return 0x822390BC;
} // Block from 822390ACh-822390BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 822390BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822390BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822390BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822390BC);
		  /* 822390BCh */ case    0:  		/* addi R1, R1, 208 */
		/* 822390BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 822390BCh case    0:*/		return 0x822390C0;
		  /* 822390C0h */ case    1:  		/* b -1736256 */
		/* 822390C0h case    1:*/		return 0x82091280;
		/* 822390C0h case    1:*/		return 0x822390C4;
		  /* 822390C4h */ case    2:  		/* nop */
		/* 822390C4h case    2:*/		cpu::op::nop();
		/* 822390C4h case    2:*/		return 0x822390C8;
	}
	return 0x822390C8;
} // Block from 822390BCh-822390C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822390C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822390C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822390C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822390C8);
		  /* 822390C8h */ case    0:  		/* mfspr R12, LR */
		/* 822390C8h case    0:*/		regs.R12 = regs.LR;
		/* 822390C8h case    0:*/		return 0x822390CC;
		  /* 822390CCh */ case    1:  		/* bl -1736320 */
		/* 822390CCh case    1:*/		regs.LR = 0x822390D0; return 0x8209124C;
		/* 822390CCh case    1:*/		return 0x822390D0;
		  /* 822390D0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 822390D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 822390D0h case    2:*/		return 0x822390D4;
		  /* 822390D4h */ case    3:  		/* lbz R11, <#[R3 + 2144]> */
		/* 822390D4h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000860) );
		/* 822390D4h case    3:*/		return 0x822390D8;
		  /* 822390D8h */ case    4:  		/* mr R27, R3 */
		/* 822390D8h case    4:*/		regs.R27 = regs.R3;
		/* 822390D8h case    4:*/		return 0x822390DC;
		  /* 822390DCh */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 822390DCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 822390DCh case    5:*/		return 0x822390E0;
		  /* 822390E0h */ case    6:  		/* lis R11, -32216 */
		/* 822390E0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 822390E0h case    6:*/		return 0x822390E4;
		  /* 822390E4h */ case    7:  		/* addi R11, R11, 17992 */
		/* 822390E4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4648);
		/* 822390E4h case    7:*/		return 0x822390E8;
		  /* 822390E8h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 822390E8h case    8:*/		if ( regs.CR[0].eq ) { return 0x822390F4;  }
		/* 822390E8h case    8:*/		return 0x822390EC;
		  /* 822390ECh */ case    9:  		/* lwz R11, <#[R11 + 7588]> */
		/* 822390ECh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00001DA4) );
		/* 822390ECh case    9:*/		return 0x822390F0;
		  /* 822390F0h */ case   10:  		/* b 8 */
		/* 822390F0h case   10:*/		return 0x822390F8;
		/* 822390F0h case   10:*/		return 0x822390F4;
	}
	return 0x822390F4;
} // Block from 822390C8h-822390F4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 822390F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822390F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822390F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822390F4);
		  /* 822390F4h */ case    0:  		/* lwz R11, <#[R11 + 7536]> */
		/* 822390F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00001D70) );
		/* 822390F4h case    0:*/		return 0x822390F8;
	}
	return 0x822390F8;
} // Block from 822390F4h-822390F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822390F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822390F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822390F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822390F8);
		  /* 822390F8h */ case    0:  		/* lis R10, -32252 */
		/* 822390F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822390F8h case    0:*/		return 0x822390FC;
		  /* 822390FCh */ case    1:  		/* lwz R4, <#[R27 + 12]> */
		/* 822390FCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x0000000C) );
		/* 822390FCh case    1:*/		return 0x82239100;
		  /* 82239100h */ case    2:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82239100h case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82239100h case    2:*/		return 0x82239104;
		  /* 82239104h */ case    3:  		/* addi R10, R10, 28696 */
		/* 82239104h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x7018);
		/* 82239104h case    3:*/		return 0x82239108;
		  /* 82239108h */ case    4:  		/* li R3, 144 */
		/* 82239108h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x90);
		/* 82239108h case    4:*/		return 0x8223910C;
		  /* 8223910Ch */ case    5:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8223910Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8223910Ch case    5:*/		return 0x82239110;
		  /* 82239110h */ case    6:  		/* mtspr CTR, R11 */
		/* 82239110h case    6:*/		regs.CTR = regs.R11;
		/* 82239110h case    6:*/		return 0x82239114;
		  /* 82239114h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 82239114h case    7:*/		if ( 1 ) { regs.LR = 0x82239118; return (uint32)regs.CTR; }
		/* 82239114h case    7:*/		return 0x82239118;
		  /* 82239118h */ case    8:  		/* li R11, 45 */
		/* 82239118h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x2D);
		/* 82239118h case    8:*/		return 0x8223911C;
		  /* 8223911Ch */ case    9:  		/* stw R3, <#[R27 + 100]> */
		/* 8223911Ch case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000064) );
		/* 8223911Ch case    9:*/		return 0x82239120;
		  /* 82239120h */ case   10:  		/* li R10, 0 */
		/* 82239120h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82239120h case   10:*/		return 0x82239124;
		  /* 82239124h */ case   11:  		/* stw R11, <#[R3 + 80]> */
		/* 82239124h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 82239124h case   11:*/		return 0x82239128;
		  /* 82239128h */ case   12:  		/* stw R10, <#[R3 + 56]> */
		/* 82239128h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000038) );
		/* 82239128h case   12:*/		return 0x8223912C;
		  /* 8223912Ch */ case   13:  		/* lwz R11, <#[R27 + 96]> */
		/* 8223912Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000060) );
		/* 8223912Ch case   13:*/		return 0x82239130;
		  /* 82239130h */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 82239130h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82239130h case   14:*/		return 0x82239134;
		  /* 82239134h */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 82239134h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82239134h case   15:*/		return 0x82239138;
		  /* 82239138h */ case   16:  		/* bc 12, CR6_EQ, 8 */
		/* 82239138h case   16:*/		if ( regs.CR[6].eq ) { return 0x82239140;  }
		/* 82239138h case   16:*/		return 0x8223913C;
		  /* 8223913Ch */ case   17:  		/* addi R11, R11, -1 */
		/* 8223913Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8223913Ch case   17:*/		return 0x82239140;
	}
	return 0x82239140;
} // Block from 822390F8h-82239140h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82239140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239140);
		  /* 82239140h */ case    0:  		/* lwz R10, <#[R27 + 100]> */
		/* 82239140h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000064) );
		/* 82239140h case    0:*/		return 0x82239144;
		  /* 82239144h */ case    1:  		/* stw R11, <#[R10 + 168]> */
		/* 82239144h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x000000A8) );
		/* 82239144h case    1:*/		return 0x82239148;
		  /* 82239148h */ case    2:  		/* lwz R25, <#[R27 + 168]> */
		/* 82239148h case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R27 + 0x000000A8) );
		/* 82239148h case    2:*/		return 0x8223914C;
		  /* 8223914Ch */ case    3:  		/* lwz R11, <#[R25 + 132]> */
		/* 8223914Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000084) );
		/* 8223914Ch case    3:*/		return 0x82239150;
		  /* 82239150h */ case    4:  		/* ori R11, R11, 8 */
		/* 82239150h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82239150h case    4:*/		return 0x82239154;
		  /* 82239154h */ case    5:  		/* stw R11, <#[R25 + 132]> */
		/* 82239154h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000084) );
		/* 82239154h case    5:*/		return 0x82239158;
		  /* 82239158h */ case    6:  		/* lwz R29, <#[R25 + 84]> */
		/* 82239158h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R25 + 0x00000054) );
		/* 82239158h case    6:*/		return 0x8223915C;
		  /* 8223915Ch */ case    7:  		/* cmplwi CR6, R29, 0 */
		/* 8223915Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223915Ch case    7:*/		return 0x82239160;
		  /* 82239160h */ case    8:  		/* bc 12, CR6_EQ, 568 */
		/* 82239160h case    8:*/		if ( regs.CR[6].eq ) { return 0x82239398;  }
		/* 82239160h case    8:*/		return 0x82239164;
		  /* 82239164h */ case    9:  		/* lwz R11, <#[R25 + 132]> */
		/* 82239164h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000084) );
		/* 82239164h case    9:*/		return 0x82239168;
		  /* 82239168h */ case   10:  		/* ori R11, R11, 8 */
		/* 82239168h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82239168h case   10:*/		return 0x8223916C;
		  /* 8223916Ch */ case   11:  		/* stw R11, <#[R25 + 132]> */
		/* 8223916Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000084) );
		/* 8223916Ch case   11:*/		return 0x82239170;
		  /* 82239170h */ case   12:  		/* lwz R11, <#[R29 + 132]> */
		/* 82239170h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000084) );
		/* 82239170h case   12:*/		return 0x82239174;
		  /* 82239174h */ case   13:  		/* rlwinm. R10, R11, 31, 31, 31 */
		/* 82239174h case   13:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R10,regs.R11);
		/* 82239174h case   13:*/		return 0x82239178;
		  /* 82239178h */ case   14:  		/* bc 4, CR0_EQ, 36 */
		/* 82239178h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8223919C;  }
		/* 82239178h case   14:*/		return 0x8223917C;
		  /* 8223917Ch */ case   15:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8223917Ch case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8223917Ch case   15:*/		return 0x82239180;
		  /* 82239180h */ case   16:  		/* bc 4, CR0_EQ, 28 */
		/* 82239180h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8223919C;  }
		/* 82239180h case   16:*/		return 0x82239184;
		  /* 82239184h */ case   17:  		/* rlwinm. R11, R11, 30, 31, 31 */
		/* 82239184h case   17:*/		cpu::op::rlwinm<1,30,31,31>(regs,&regs.R11,regs.R11);
		/* 82239184h case   17:*/		return 0x82239188;
		  /* 82239188h */ case   18:  		/* bc 4, CR0_EQ, 20 */
		/* 82239188h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8223919C;  }
		/* 82239188h case   18:*/		return 0x8223918C;
		  /* 8223918Ch */ case   19:  		/* mr R25, R29 */
		/* 8223918Ch case   19:*/		regs.R25 = regs.R29;
		/* 8223918Ch case   19:*/		return 0x82239190;
		  /* 82239190h */ case   20:  		/* lwz R29, <#[R29 + 84]> */
		/* 82239190h case   20:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000054) );
		/* 82239190h case   20:*/		return 0x82239194;
		  /* 82239194h */ case   21:  		/* cmplwi CR6, R29, 0 */
		/* 82239194h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82239194h case   21:*/		return 0x82239198;
		  /* 82239198h */ case   22:  		/* bc 4, CR6_EQ, -52 */
		/* 82239198h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82239164;  }
		/* 82239198h case   22:*/		return 0x8223919C;
	}
	return 0x8223919C;
} // Block from 82239140h-8223919Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8223919Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223919C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223919C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223919C);
		  /* 8223919Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8223919Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223919Ch case    0:*/		return 0x822391A0;
		  /* 822391A0h */ case    1:  		/* bc 12, CR6_EQ, 504 */
		/* 822391A0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82239398;  }
		/* 822391A0h case    1:*/		return 0x822391A4;
		  /* 822391A4h */ case    2:  		/* lwz R11, <#[R25 + 60]> */
		/* 822391A4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000003C) );
		/* 822391A4h case    2:*/		return 0x822391A8;
		  /* 822391A8h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 822391A8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 822391A8h case    3:*/		return 0x822391AC;
		  /* 822391ACh */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 822391ACh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 822391ACh case    4:*/		return 0x822391B0;
		  /* 822391B0h */ case    5:  		/* bc 4, CR6_EQ, 488 */
		/* 822391B0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82239398;  }
		/* 822391B0h case    5:*/		return 0x822391B4;
		  /* 822391B4h */ case    6:  		/* lwz R11, <#[R29 + 132]> */
		/* 822391B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000084) );
		/* 822391B4h case    6:*/		return 0x822391B8;
		  /* 822391B8h */ case    7:  		/* mr R25, R29 */
		/* 822391B8h case    7:*/		regs.R25 = regs.R29;
		/* 822391B8h case    7:*/		return 0x822391BC;
		  /* 822391BCh */ case    8:  		/* ori R11, R11, 8 */
		/* 822391BCh case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 822391BCh case    8:*/		return 0x822391C0;
		  /* 822391C0h */ case    9:  		/* stw R11, <#[R29 + 132]> */
		/* 822391C0h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000084) );
		/* 822391C0h case    9:*/		return 0x822391C4;
		  /* 822391C4h */ case   10:  		/* lwz R11, <#[R27 + 12]> */
		/* 822391C4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 822391C4h case   10:*/		return 0x822391C8;
		  /* 822391C8h */ case   11:  		/* lwz R4, <#[R11 + 1456]> */
		/* 822391C8h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 822391C8h case   11:*/		return 0x822391CC;
		  /* 822391CCh */ case   12:  		/* lwz R3, <#[R11 + 1376]> */
		/* 822391CCh case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000560) );
		/* 822391CCh case   12:*/		return 0x822391D0;
		  /* 822391D0h */ case   13:  		/* bl -10384 */
		/* 822391D0h case   13:*/		regs.LR = 0x822391D4; return 0x82236940;
		/* 822391D0h case   13:*/		return 0x822391D4;
		  /* 822391D4h */ case   14:  		/* lwz R31, <#[R29 + 36]> */
		/* 822391D4h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000024) );
		/* 822391D4h case   14:*/		return 0x822391D8;
		  /* 822391D8h */ case   15:  		/* b 112 */
		/* 822391D8h case   15:*/		return 0x82239248;
		/* 822391D8h case   15:*/		return 0x822391DC;
		  /* 822391DCh */ case   16:  		/* lwz R11, <#[R31]> */
		/* 822391DCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 822391DCh case   16:*/		return 0x822391E0;
		  /* 822391E0h */ case   17:  		/* mr R3, R31 */
		/* 822391E0h case   17:*/		regs.R3 = regs.R31;
		/* 822391E0h case   17:*/		return 0x822391E4;
		  /* 822391E4h */ case   18:  		/* lwz R11, <#[R11 + 24]> */
		/* 822391E4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 822391E4h case   18:*/		return 0x822391E8;
		  /* 822391E8h */ case   19:  		/* mtspr CTR, R11 */
		/* 822391E8h case   19:*/		regs.CTR = regs.R11;
		/* 822391E8h case   19:*/		return 0x822391EC;
		  /* 822391ECh */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 822391ECh case   20:*/		if ( 1 ) { regs.LR = 0x822391F0; return (uint32)regs.CTR; }
		/* 822391ECh case   20:*/		return 0x822391F0;
		  /* 822391F0h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822391F0h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822391F0h case   21:*/		return 0x822391F4;
		  /* 822391F4h */ case   22:  		/* bc 4, CR0_EQ, 16 */
		/* 822391F4h case   22:*/		if ( !regs.CR[0].eq ) { return 0x82239204;  }
		/* 822391F4h case   22:*/		return 0x822391F8;
		  /* 822391F8h */ case   23:  		/* lwz R11, <#[R31 + 228]> */
		/* 822391F8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 822391F8h case   23:*/		return 0x822391FC;
		  /* 822391FCh */ case   24:  		/* rlwinm. R11, R11, 19, 31, 31 */
		/* 822391FCh case   24:*/		cpu::op::rlwinm<1,19,31,31>(regs,&regs.R11,regs.R11);
		/* 822391FCh case   24:*/		return 0x82239200;
		  /* 82239200h */ case   25:  		/* bc 12, CR0_EQ, 68 */
		/* 82239200h case   25:*/		if ( regs.CR[0].eq ) { return 0x82239244;  }
		/* 82239200h case   25:*/		return 0x82239204;
	}
	return 0x82239204;
} // Block from 8223919Ch-82239204h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82239204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239204);
		  /* 82239204h */ case    0:  		/* lwz R11, <#[R31 + 228]> */
		/* 82239204h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 82239204h case    0:*/		return 0x82239208;
		  /* 82239208h */ case    1:  		/* li R10, 1 */
		/* 82239208h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82239208h case    1:*/		return 0x8223920C;
		  /* 8223920Ch */ case    2:  		/* lwz R9, <#[R31 + 20]> */
		/* 8223920Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8223920Ch case    2:*/		return 0x82239210;
		  /* 82239210h */ case    3:  		/* ori R11, R11, 8192 */
		/* 82239210h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 82239210h case    3:*/		return 0x82239214;
		  /* 82239214h */ case    4:  		/* cmpwi CR6, R9, 1 */
		/* 82239214h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000001);
		/* 82239214h case    4:*/		return 0x82239218;
		  /* 82239218h */ case    5:  		/* stw R11, <#[R31 + 228]> */
		/* 82239218h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 82239218h case    5:*/		return 0x8223921C;
		  /* 8223921Ch */ case    6:  		/* bc 12, CR6_LT, 40 */
		/* 8223921Ch case    6:*/		if ( regs.CR[6].lt ) { return 0x82239244;  }
		/* 8223921Ch case    6:*/		return 0x82239220;
		  /* 82239220h */ case    7:  		/* addi R9, R31, 232 */
		/* 82239220h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0xE8);
		/* 82239220h case    7:*/		return 0x82239224;
		  /* 82239224h */ case    8:  		/* lwzu R11, <#[R9 + 4]> */
		/* 82239224h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 82239224h case    8:*/		return 0x82239228;
		  /* 82239228h */ case    9:  		/* addi R10, R10, 1 */
		/* 82239228h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82239228h case    9:*/		return 0x8223922C;
		  /* 8223922Ch */ case   10:  		/* lwz R8, <#[R11 + 228]> */
		/* 8223922Ch case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x000000E4) );
		/* 8223922Ch case   10:*/		return 0x82239230;
		  /* 82239230h */ case   11:  		/* ori R8, R8, 8192 */
		/* 82239230h case   11:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x2000);
		/* 82239230h case   11:*/		return 0x82239234;
		  /* 82239234h */ case   12:  		/* stw R8, <#[R11 + 228]> */
		/* 82239234h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x000000E4) );
		/* 82239234h case   12:*/		return 0x82239238;
		  /* 82239238h */ case   13:  		/* lwz R11, <#[R31 + 20]> */
		/* 82239238h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82239238h case   13:*/		return 0x8223923C;
		  /* 8223923Ch */ case   14:  		/* cmpw CR6, R10, R11 */
		/* 8223923Ch case   14:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 8223923Ch case   14:*/		return 0x82239240;
		  /* 82239240h */ case   15:  		/* bc 4, CR6_GT, -28 */
		/* 82239240h case   15:*/		if ( !regs.CR[6].gt ) { return 0x82239224;  }
		/* 82239240h case   15:*/		return 0x82239244;
	}
	return 0x82239244;
} // Block from 82239204h-82239244h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82239244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239244);
		  /* 82239244h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 82239244h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 82239244h case    0:*/		return 0x82239248;
	}
	return 0x82239248;
} // Block from 82239244h-82239248h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239248);
		  /* 82239248h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82239248h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82239248h case    0:*/		return 0x8223924C;
		  /* 8223924Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8223924Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223924Ch case    1:*/		return 0x82239250;
		  /* 82239250h */ case    2:  		/* bc 4, CR6_EQ, -116 */
		/* 82239250h case    2:*/		if ( !regs.CR[6].eq ) { return 0x822391DC;  }
		/* 82239250h case    2:*/		return 0x82239254;
		  /* 82239254h */ case    3:  		/* lwz R31, <#[R29 + 28]> */
		/* 82239254h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x0000001C) );
		/* 82239254h case    3:*/		return 0x82239258;
		  /* 82239258h */ case    4:  		/* lwz R26, <#[R29 + 112]> */
		/* 82239258h case    4:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R29 + 0x00000070) );
		/* 82239258h case    4:*/		return 0x8223925C;
		  /* 8223925Ch */ case    5:  		/* b 80 */
		/* 8223925Ch case    5:*/		return 0x822392AC;
		/* 8223925Ch case    5:*/		return 0x82239260;
		  /* 82239260h */ case    6:  		/* lwz R11, <#[R31 + 228]> */
		/* 82239260h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 82239260h case    6:*/		return 0x82239264;
		  /* 82239264h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82239264h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82239264h case    7:*/		return 0x82239268;
		  /* 82239268h */ case    8:  		/* bc 12, CR0_EQ, 64 */
		/* 82239268h case    8:*/		if ( regs.CR[0].eq ) { return 0x822392A8;  }
		/* 82239268h case    8:*/		return 0x8223926C;
		  /* 8223926Ch */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223926Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223926Ch case    9:*/		return 0x82239270;
		  /* 82239270h */ case   10:  		/* mr R3, R31 */
		/* 82239270h case   10:*/		regs.R3 = regs.R31;
		/* 82239270h case   10:*/		return 0x82239274;
		  /* 82239274h */ case   11:  		/* lwz R11, <#[R11 + 44]> */
		/* 82239274h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82239274h case   11:*/		return 0x82239278;
		  /* 82239278h */ case   12:  		/* mtspr CTR, R11 */
		/* 82239278h case   12:*/		regs.CTR = regs.R11;
		/* 82239278h case   12:*/		return 0x8223927C;
		  /* 8223927Ch */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8223927Ch case   13:*/		if ( 1 ) { regs.LR = 0x82239280; return (uint32)regs.CTR; }
		/* 8223927Ch case   13:*/		return 0x82239280;
		  /* 82239280h */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 82239280h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82239280h case   14:*/		return 0x82239284;
		  /* 82239284h */ case   15:  		/* bc 4, CR0_EQ, 32 */
		/* 82239284h case   15:*/		if ( !regs.CR[0].eq ) { return 0x822392A4;  }
		/* 82239284h case   15:*/		return 0x82239288;
		  /* 82239288h */ case   16:  		/* lwz R11, <#[R31]> */
		/* 82239288h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82239288h case   16:*/		return 0x8223928C;
		  /* 8223928Ch */ case   17:  		/* mr R3, R31 */
		/* 8223928Ch case   17:*/		regs.R3 = regs.R31;
		/* 8223928Ch case   17:*/		return 0x82239290;
		  /* 82239290h */ case   18:  		/* lwz R11, <#[R11 + 36]> */
		/* 82239290h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 82239290h case   18:*/		return 0x82239294;
		  /* 82239294h */ case   19:  		/* mtspr CTR, R11 */
		/* 82239294h case   19:*/		regs.CTR = regs.R11;
		/* 82239294h case   19:*/		return 0x82239298;
		  /* 82239298h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 82239298h case   20:*/		if ( 1 ) { regs.LR = 0x8223929C; return (uint32)regs.CTR; }
		/* 82239298h case   20:*/		return 0x8223929C;
		  /* 8223929Ch */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223929Ch case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223929Ch case   21:*/		return 0x822392A0;
		  /* 822392A0h */ case   22:  		/* bc 12, CR0_EQ, 24 */
		/* 822392A0h case   22:*/		if ( regs.CR[0].eq ) { return 0x822392B8;  }
		/* 822392A0h case   22:*/		return 0x822392A4;
	}
	return 0x822392A4;
} // Block from 82239248h-822392A4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 822392A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822392A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822392A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822392A4);
		  /* 822392A4h */ case    0:  		/* mr R26, R31 */
		/* 822392A4h case    0:*/		regs.R26 = regs.R31;
		/* 822392A4h case    0:*/		return 0x822392A8;
	}
	return 0x822392A8;
} // Block from 822392A4h-822392A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822392A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822392A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822392A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822392A8);
		  /* 822392A8h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 822392A8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 822392A8h case    0:*/		return 0x822392AC;
	}
	return 0x822392AC;
} // Block from 822392A8h-822392ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822392ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822392AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822392AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822392AC);
		  /* 822392ACh */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 822392ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 822392ACh case    0:*/		return 0x822392B0;
		  /* 822392B0h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 822392B0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 822392B0h case    1:*/		return 0x822392B4;
		  /* 822392B4h */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 822392B4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82239260;  }
		/* 822392B4h case    2:*/		return 0x822392B8;
	}
	return 0x822392B8;
} // Block from 822392ACh-822392B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822392B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822392B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822392B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822392B8);
		  /* 822392B8h */ case    0:  		/* lwz R11, <#[R27 + 12]> */
		/* 822392B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 822392B8h case    0:*/		return 0x822392BC;
		  /* 822392BCh */ case    1:  		/* li R4, 20 */
		/* 822392BCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 822392BCh case    1:*/		return 0x822392C0;
		  /* 822392C0h */ case    2:  		/* lwz R31, <#[R11 + 1456]> */
		/* 822392C0h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x000005B0) );
		/* 822392C0h case    2:*/		return 0x822392C4;
		  /* 822392C4h */ case    3:  		/* mr R3, R31 */
		/* 822392C4h case    3:*/		regs.R3 = regs.R31;
		/* 822392C4h case    3:*/		return 0x822392C8;
		  /* 822392C8h */ case    4:  		/* bl -118288 */
		/* 822392C8h case    4:*/		regs.LR = 0x822392CC; return 0x8221C4B8;
		/* 822392C8h case    4:*/		return 0x822392CC;
		  /* 822392CCh */ case    5:  		/* addic. R30, R3, 4 */
		/* 822392CCh case    5:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R3,0x4);
		/* 822392CCh case    5:*/		return 0x822392D0;
		  /* 822392D0h */ case    6:  		/* stw R31, <#[R3]> */
		/* 822392D0h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 822392D0h case    6:*/		return 0x822392D4;
		  /* 822392D4h */ case    7:  		/* bc 12, CR0_EQ, 24 */
		/* 822392D4h case    7:*/		if ( regs.CR[0].eq ) { return 0x822392EC;  }
		/* 822392D4h case    7:*/		return 0x822392D8;
		  /* 822392D8h */ case    8:  		/* lwz R11, <#[R27 + 12]> */
		/* 822392D8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 822392D8h case    8:*/		return 0x822392DC;
		  /* 822392DCh */ case    9:  		/* mr R3, R30 */
		/* 822392DCh case    9:*/		regs.R3 = regs.R30;
		/* 822392DCh case    9:*/		return 0x822392E0;
		  /* 822392E0h */ case   10:  		/* lwz R4, <#[R11 + 1456]> */
		/* 822392E0h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 822392E0h case   10:*/		return 0x822392E4;
		  /* 822392E4h */ case   11:  		/* bl -13700 */
		/* 822392E4h case   11:*/		regs.LR = 0x822392E8; return 0x82235D60;
		/* 822392E4h case   11:*/		return 0x822392E8;
		  /* 822392E8h */ case   12:  		/* b 8 */
		/* 822392E8h case   12:*/		return 0x822392F0;
		/* 822392E8h case   12:*/		return 0x822392EC;
	}
	return 0x822392EC;
} // Block from 822392B8h-822392ECh (13 instructions)

//////////////////////////////////////////////////////
// Block at 822392ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822392EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822392EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822392EC);
		  /* 822392ECh */ case    0:  		/* li R30, 0 */
		/* 822392ECh case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 822392ECh case    0:*/		return 0x822392F0;
	}
	return 0x822392F0;
} // Block from 822392ECh-822392F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822392F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822392F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822392F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822392F0);
		  /* 822392F0h */ case    0:  		/* lwz R31, <#[R29 + 36]> */
		/* 822392F0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000024) );
		/* 822392F0h case    0:*/		return 0x822392F4;
		  /* 822392F4h */ case    1:  		/* b 24 */
		/* 822392F4h case    1:*/		return 0x8223930C;
		/* 822392F4h case    1:*/		return 0x822392F8;
		  /* 822392F8h */ case    2:  		/* mr R3, R30 */
		/* 822392F8h case    2:*/		regs.R3 = regs.R30;
		/* 822392F8h case    2:*/		return 0x822392FC;
		  /* 822392FCh */ case    3:  		/* lwz R4, <#[R30 + 4]> */
		/* 822392FCh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 822392FCh case    3:*/		return 0x82239300;
		  /* 82239300h */ case    4:  		/* bl 108480 */
		/* 82239300h case    4:*/		regs.LR = 0x82239304; return 0x82253AC0;
		/* 82239300h case    4:*/		return 0x82239304;
		  /* 82239304h */ case    5:  		/* stw R31, <#[R3]> */
		/* 82239304h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 82239304h case    5:*/		return 0x82239308;
		  /* 82239308h */ case    6:  		/* lwz R31, <#[R31 + 4]> */
		/* 82239308h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 82239308h case    6:*/		return 0x8223930C;
	}
	return 0x8223930C;
} // Block from 822392F0h-8223930Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223930Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223930C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223930C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223930C);
		  /* 8223930Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8223930Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8223930Ch case    0:*/		return 0x82239310;
		  /* 82239310h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82239310h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82239310h case    1:*/		return 0x82239314;
		  /* 82239314h */ case    2:  		/* bc 4, CR6_EQ, -28 */
		/* 82239314h case    2:*/		if ( !regs.CR[6].eq ) { return 0x822392F8;  }
		/* 82239314h case    2:*/		return 0x82239318;
		  /* 82239318h */ case    3:  		/* lwz R11, <#[R30 + 4]> */
		/* 82239318h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82239318h case    3:*/		return 0x8223931C;
		  /* 8223931Ch */ case    4:  		/* li R28, 0 */
		/* 8223931Ch case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8223931Ch case    4:*/		return 0x82239320;
		  /* 82239320h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82239320h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82239320h case    5:*/		return 0x82239324;
		  /* 82239324h */ case    6:  		/* bc 12, CR6_EQ, 96 */
		/* 82239324h case    6:*/		if ( regs.CR[6].eq ) { return 0x82239384;  }
		/* 82239324h case    6:*/		return 0x82239328;
		  /* 82239328h */ case    7:  		/* lwz R3, <#[R30 + 8]> */
		/* 82239328h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 82239328h case    7:*/		return 0x8223932C;
		  /* 8223932Ch */ case    8:  		/* li R4, 0 */
		/* 8223932Ch case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223932Ch case    8:*/		return 0x82239330;
		  /* 82239330h */ case    9:  		/* lwz R31, <#[R3]> */
		/* 82239330h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 82239330h case    9:*/		return 0x82239334;
		  /* 82239334h */ case   10:  		/* mr R3, R30 */
		/* 82239334h case   10:*/		regs.R3 = regs.R30;
		/* 82239334h case   10:*/		return 0x82239338;
		  /* 82239338h */ case   11:  		/* bl 108232 */
		/* 82239338h case   11:*/		regs.LR = 0x8223933C; return 0x82253A00;
		/* 82239338h case   11:*/		return 0x8223933C;
		  /* 8223933Ch */ case   12:  		/* lwz R11, <#[R31 + 228]> */
		/* 8223933Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 8223933Ch case   12:*/		return 0x82239340;
		  /* 82239340h */ case   13:  		/* rlwinm. R11, R11, 19, 31, 31 */
		/* 82239340h case   13:*/		cpu::op::rlwinm<1,19,31,31>(regs,&regs.R11,regs.R11);
		/* 82239340h case   13:*/		return 0x82239344;
		  /* 82239344h */ case   14:  		/* bc 12, CR0_EQ, 40 */
		/* 82239344h case   14:*/		if ( regs.CR[0].eq ) { return 0x8223936C;  }
		/* 82239344h case   14:*/		return 0x82239348;
		  /* 82239348h */ case   15:  		/* cmplwi CR6, R28, 0 */
		/* 82239348h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82239348h case   15:*/		return 0x8223934C;
		  /* 8223934Ch */ case   16:  		/* bc 4, CR6_EQ, 8 */
		/* 8223934Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x82239354;  }
		/* 8223934Ch case   16:*/		return 0x82239350;
		  /* 82239350h */ case   17:  		/* mr R28, R31 */
		/* 82239350h case   17:*/		regs.R28 = regs.R31;
		/* 82239350h case   17:*/		return 0x82239354;
	}
	return 0x82239354;
} // Block from 8223930Ch-82239354h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82239354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239354);
		  /* 82239354h */ case    0:  		/* mr R3, R31 */
		/* 82239354h case    0:*/		regs.R3 = regs.R31;
		/* 82239354h case    0:*/		return 0x82239358;
		  /* 82239358h */ case    1:  		/* bl 107696 */
		/* 82239358h case    1:*/		regs.LR = 0x8223935C; return 0x82253808;
		/* 82239358h case    1:*/		return 0x8223935C;
		  /* 8223935Ch */ case    2:  		/* mr R5, R31 */
		/* 8223935Ch case    2:*/		regs.R5 = regs.R31;
		/* 8223935Ch case    2:*/		return 0x82239360;
		  /* 82239360h */ case    3:  		/* mr R4, R26 */
		/* 82239360h case    3:*/		regs.R4 = regs.R26;
		/* 82239360h case    3:*/		return 0x82239364;
		  /* 82239364h */ case    4:  		/* mr R3, R29 */
		/* 82239364h case    4:*/		regs.R3 = regs.R29;
		/* 82239364h case    4:*/		return 0x82239368;
		  /* 82239368h */ case    5:  		/* bl 130136 */
		/* 82239368h case    5:*/		regs.LR = 0x8223936C; return 0x82258FC0;
		/* 82239368h case    5:*/		return 0x8223936C;
	}
	return 0x8223936C;
} // Block from 82239354h-8223936Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223936Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223936C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223936C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223936C);
		  /* 8223936Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8223936Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8223936Ch case    0:*/		return 0x82239370;
		  /* 82239370h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82239370h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82239370h case    1:*/		return 0x82239374;
		  /* 82239374h */ case    2:  		/* bc 4, CR6_EQ, -76 */
		/* 82239374h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82239328;  }
		/* 82239374h case    2:*/		return 0x82239378;
		  /* 82239378h */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 82239378h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82239378h case    3:*/		return 0x8223937C;
		  /* 8223937Ch */ case    4:  		/* mr R4, R28 */
		/* 8223937Ch case    4:*/		regs.R4 = regs.R28;
		/* 8223937Ch case    4:*/		return 0x82239380;
		  /* 82239380h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82239380h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82239388;  }
		/* 82239380h case    5:*/		return 0x82239384;
	}
	return 0x82239384;
} // Block from 8223936Ch-82239384h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82239384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239384);
		  /* 82239384h */ case    0:  		/* mr R4, R26 */
		/* 82239384h case    0:*/		regs.R4 = regs.R26;
		/* 82239384h case    0:*/		return 0x82239388;
	}
	return 0x82239388;
} // Block from 82239384h-82239388h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239388h
// Function '?EnsurePositionExport@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239388);
		  /* 82239388h */ case    0:  		/* mr R3, R29 */
		/* 82239388h case    0:*/		regs.R3 = regs.R29;
		/* 82239388h case    0:*/		return 0x8223938C;
		  /* 8223938Ch */ case    1:  		/* lwz R5, <#[R27 + 100]> */
		/* 8223938Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000064) );
		/* 8223938Ch case    1:*/		return 0x82239390;
		  /* 82239390h */ case    2:  		/* bl 130096 */
		/* 82239390h case    2:*/		regs.LR = 0x82239394; return 0x82258FC0;
		/* 82239390h case    2:*/		return 0x82239394;
		  /* 82239394h */ case    3:  		/* b 116 */
		/* 82239394h case    3:*/		return 0x82239408;
		/* 82239394h case    3:*/		return 0x82239398;
	}
	return 0x82239398;
} // Block from 82239388h-82239398h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82239398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239398);
		  /* 82239398h */ case    0:  		/* lwz R31, <#[R25 + 28]> */
		/* 82239398h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x0000001C) );
		/* 82239398h case    0:*/		return 0x8223939C;
		  /* 8223939Ch */ case    1:  		/* b 76 */
		/* 8223939Ch case    1:*/		return 0x822393E8;
		/* 8223939Ch case    1:*/		return 0x822393A0;
		  /* 822393A0h */ case    2:  		/* lwz R11, <#[R31 + 228]> */
		/* 822393A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 822393A0h case    2:*/		return 0x822393A4;
		  /* 822393A4h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 822393A4h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822393A4h case    3:*/		return 0x822393A8;
		  /* 822393A8h */ case    4:  		/* bc 12, CR0_EQ, 60 */
		/* 822393A8h case    4:*/		if ( regs.CR[0].eq ) { return 0x822393E4;  }
		/* 822393A8h case    4:*/		return 0x822393AC;
		  /* 822393ACh */ case    5:  		/* lwz R11, <#[R31]> */
		/* 822393ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 822393ACh case    5:*/		return 0x822393B0;
		  /* 822393B0h */ case    6:  		/* mr R3, R31 */
		/* 822393B0h case    6:*/		regs.R3 = regs.R31;
		/* 822393B0h case    6:*/		return 0x822393B4;
		  /* 822393B4h */ case    7:  		/* lwz R11, <#[R11 + 44]> */
		/* 822393B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 822393B4h case    7:*/		return 0x822393B8;
		  /* 822393B8h */ case    8:  		/* mtspr CTR, R11 */
		/* 822393B8h case    8:*/		regs.CTR = regs.R11;
		/* 822393B8h case    8:*/		return 0x822393BC;
		  /* 822393BCh */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 822393BCh case    9:*/		if ( 1 ) { regs.LR = 0x822393C0; return (uint32)regs.CTR; }
		/* 822393BCh case    9:*/		return 0x822393C0;
		  /* 822393C0h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 822393C0h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 822393C0h case   10:*/		return 0x822393C4;
		  /* 822393C4h */ case   11:  		/* bc 4, CR0_EQ, 32 */
		/* 822393C4h case   11:*/		if ( !regs.CR[0].eq ) { return 0x822393E4;  }
		/* 822393C4h case   11:*/		return 0x822393C8;
		  /* 822393C8h */ case   12:  		/* lwz R11, <#[R31]> */
		/* 822393C8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 822393C8h case   12:*/		return 0x822393CC;
		  /* 822393CCh */ case   13:  		/* mr R3, R31 */
		/* 822393CCh case   13:*/		regs.R3 = regs.R31;
		/* 822393CCh case   13:*/		return 0x822393D0;
		  /* 822393D0h */ case   14:  		/* lwz R11, <#[R11 + 36]> */
		/* 822393D0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 822393D0h case   14:*/		return 0x822393D4;
		  /* 822393D4h */ case   15:  		/* mtspr CTR, R11 */
		/* 822393D4h case   15:*/		regs.CTR = regs.R11;
		/* 822393D4h case   15:*/		return 0x822393D8;
		  /* 822393D8h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 822393D8h case   16:*/		if ( 1 ) { regs.LR = 0x822393DC; return (uint32)regs.CTR; }
		/* 822393D8h case   16:*/		return 0x822393DC;
		  /* 822393DCh */ case   17:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822393DCh case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822393DCh case   17:*/		return 0x822393E0;
		  /* 822393E0h */ case   18:  		/* bc 12, CR0_EQ, 24 */
		/* 822393E0h case   18:*/		if ( regs.CR[0].eq ) { return 0x822393F8;  }
		/* 822393E0h case   18:*/		return 0x822393E4;
	}
	return 0x822393E4;
} // Block from 82239398h-822393E4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 822393E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822393E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822393E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822393E4);
		  /* 822393E4h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 822393E4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 822393E4h case    0:*/		return 0x822393E8;
	}
	return 0x822393E8;
} // Block from 822393E4h-822393E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822393E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822393E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822393E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822393E8);
		  /* 822393E8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 822393E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 822393E8h case    0:*/		return 0x822393EC;
		  /* 822393ECh */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 822393ECh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 822393ECh case    1:*/		return 0x822393F0;
		  /* 822393F0h */ case    2:  		/* bc 4, CR6_EQ, -80 */
		/* 822393F0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x822393A0;  }
		/* 822393F0h case    2:*/		return 0x822393F4;
		  /* 822393F4h */ case    3:  		/* b 20 */
		/* 822393F4h case    3:*/		return 0x82239408;
		/* 822393F4h case    3:*/		return 0x822393F8;
	}
	return 0x822393F8;
} // Block from 822393E8h-822393F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822393F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822393F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822393F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822393F8);
		  /* 822393F8h */ case    0:  		/* mr R4, R31 */
		/* 822393F8h case    0:*/		regs.R4 = regs.R31;
		/* 822393F8h case    0:*/		return 0x822393FC;
		  /* 822393FCh */ case    1:  		/* lwz R5, <#[R27 + 100]> */
		/* 822393FCh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000064) );
		/* 822393FCh case    1:*/		return 0x82239400;
		  /* 82239400h */ case    2:  		/* mr R3, R25 */
		/* 82239400h case    2:*/		regs.R3 = regs.R25;
		/* 82239400h case    2:*/		return 0x82239404;
		  /* 82239404h */ case    3:  		/* bl 130076 */
		/* 82239404h case    3:*/		regs.LR = 0x82239408; return 0x82259020;
		/* 82239404h case    3:*/		return 0x82239408;
	}
	return 0x82239408;
} // Block from 822393F8h-82239408h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82239408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239408);
		  /* 82239408h */ case    0:  		/* lwz R11, <#[R25 + 132]> */
		/* 82239408h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000084) );
		/* 82239408h case    0:*/		return 0x8223940C;
		  /* 8223940Ch */ case    1:  		/* ori R11, R11, 8 */
		/* 8223940Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8223940Ch case    1:*/		return 0x82239410;
		  /* 82239410h */ case    2:  		/* stw R11, <#[R25 + 132]> */
		/* 82239410h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000084) );
		/* 82239410h case    2:*/		return 0x82239414;
		  /* 82239414h */ case    3:  		/* lwz R4, <#[R27 + 104]> */
		/* 82239414h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000068) );
		/* 82239414h case    3:*/		return 0x82239418;
		  /* 82239418h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 82239418h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82239418h case    4:*/		return 0x8223941C;
		  /* 8223941Ch */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 8223941Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82239428;  }
		/* 8223941Ch case    5:*/		return 0x82239420;
		  /* 82239420h */ case    6:  		/* lwz R3, <#[R27 + 100]> */
		/* 82239420h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000064) );
		/* 82239420h case    6:*/		return 0x82239424;
		  /* 82239424h */ case    7:  		/* bl -13692 */
		/* 82239424h case    7:*/		regs.LR = 0x82239428; return 0x82235EA8;
		/* 82239424h case    7:*/		return 0x82239428;
	}
	return 0x82239428;
} // Block from 82239408h-82239428h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82239428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239428);
		  /* 82239428h */ case    0:  		/* lwz R11, <#[R27 + 12]> */
		/* 82239428h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 82239428h case    0:*/		return 0x8223942C;
		  /* 8223942Ch */ case    1:  		/* li R4, 20 */
		/* 8223942Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8223942Ch case    1:*/		return 0x82239430;
		  /* 82239430h */ case    2:  		/* lwz R30, <#[R11 + 1456]> */
		/* 82239430h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x000005B0) );
		/* 82239430h case    2:*/		return 0x82239434;
		  /* 82239434h */ case    3:  		/* mr R3, R30 */
		/* 82239434h case    3:*/		regs.R3 = regs.R30;
		/* 82239434h case    3:*/		return 0x82239438;
		  /* 82239438h */ case    4:  		/* bl -118656 */
		/* 82239438h case    4:*/		regs.LR = 0x8223943C; return 0x8221C4B8;
		/* 82239438h case    4:*/		return 0x8223943C;
		  /* 8223943Ch */ case    5:  		/* addic. R31, R3, 4 */
		/* 8223943Ch case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R3,0x4);
		/* 8223943Ch case    5:*/		return 0x82239440;
		  /* 82239440h */ case    6:  		/* stw R30, <#[R3]> */
		/* 82239440h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 82239440h case    6:*/		return 0x82239444;
		  /* 82239444h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82239444h case    7:*/		if ( regs.CR[0].eq ) { return 0x82239460;  }
		/* 82239444h case    7:*/		return 0x82239448;
		  /* 82239448h */ case    8:  		/* lwz R11, <#[R27 + 12]> */
		/* 82239448h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 82239448h case    8:*/		return 0x8223944C;
		  /* 8223944Ch */ case    9:  		/* mr R3, R31 */
		/* 8223944Ch case    9:*/		regs.R3 = regs.R31;
		/* 8223944Ch case    9:*/		return 0x82239450;
		  /* 82239450h */ case   10:  		/* lwz R4, <#[R11 + 1456]> */
		/* 82239450h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 82239450h case   10:*/		return 0x82239454;
		  /* 82239454h */ case   11:  		/* bl -14068 */
		/* 82239454h case   11:*/		regs.LR = 0x82239458; return 0x82235D60;
		/* 82239454h case   11:*/		return 0x82239458;
		  /* 82239458h */ case   12:  		/* mr R27, R31 */
		/* 82239458h case   12:*/		regs.R27 = regs.R31;
		/* 82239458h case   12:*/		return 0x8223945C;
		  /* 8223945Ch */ case   13:  		/* b 8 */
		/* 8223945Ch case   13:*/		return 0x82239464;
		/* 8223945Ch case   13:*/		return 0x82239460;
	}
	return 0x82239460;
} // Block from 82239428h-82239460h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82239460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239460);
		  /* 82239460h */ case    0:  		/* li R27, 0 */
		/* 82239460h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82239460h case    0:*/		return 0x82239464;
	}
	return 0x82239464;
} // Block from 82239460h-82239464h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239464);
		  /* 82239464h */ case    0:  		/* li R29, 0 */
		/* 82239464h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82239464h case    0:*/		return 0x82239468;
		  /* 82239468h */ case    1:  		/* li R31, 0 */
		/* 82239468h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82239468h case    1:*/		return 0x8223946C;
		  /* 8223946Ch */ case    2:  		/* li R30, 1 */
		/* 8223946Ch case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8223946Ch case    2:*/		return 0x82239470;
		  /* 82239470h */ case    3:  		/* lwz R11, <#[R25 + 88]> */
		/* 82239470h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000058) );
		/* 82239470h case    3:*/		return 0x82239474;
		  /* 82239474h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 82239474h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82239474h case    4:*/		return 0x82239478;
		  /* 82239478h */ case    5:  		/* cmplw CR6, R30, R10 */
		/* 82239478h case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 82239478h case    5:*/		return 0x8223947C;
		  /* 8223947Ch */ case    6:  		/* bc 4, CR6_GT, 12 */
		/* 8223947Ch case    6:*/		if ( !regs.CR[6].gt ) { return 0x82239488;  }
		/* 8223947Ch case    6:*/		return 0x82239480;
		  /* 82239480h */ case    7:  		/* li R11, 0 */
		/* 82239480h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82239480h case    7:*/		return 0x82239484;
		  /* 82239484h */ case    8:  		/* b 16 */
		/* 82239484h case    8:*/		return 0x82239494;
		/* 82239484h case    8:*/		return 0x82239488;
	}
	return 0x82239488;
} // Block from 82239464h-82239488h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82239488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239488);
		  /* 82239488h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 82239488h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82239488h case    0:*/		return 0x8223948C;
		  /* 8223948Ch */ case    1:  		/* li R11, 1 */
		/* 8223948Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223948Ch case    1:*/		return 0x82239490;
		  /* 82239490h */ case    2:  		/* lwzx R29, <#[R10 + R31]> */
		/* 82239490h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 82239490h case    2:*/		return 0x82239494;
	}
	return 0x82239494;
} // Block from 82239488h-82239494h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82239494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239494);
		  /* 82239494h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82239494h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82239494h case    0:*/		return 0x82239498;
		  /* 82239498h */ case    1:  		/* bc 12, CR0_EQ, 148 */
		/* 82239498h case    1:*/		if ( regs.CR[0].eq ) { return 0x8223952C;  }
		/* 82239498h case    1:*/		return 0x8223949C;
		  /* 8223949Ch */ case    2:  		/* mr R3, R27 */
		/* 8223949Ch case    2:*/		regs.R3 = regs.R27;
		/* 8223949Ch case    2:*/		return 0x822394A0;
		  /* 822394A0h */ case    3:  		/* lwz R4, <#[R27 + 4]> */
		/* 822394A0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000004) );
		/* 822394A0h case    3:*/		return 0x822394A4;
		  /* 822394A4h */ case    4:  		/* bl 108060 */
		/* 822394A4h case    4:*/		regs.LR = 0x822394A8; return 0x82253AC0;
		/* 822394A4h case    4:*/		return 0x822394A8;
		  /* 822394A8h */ case    5:  		/* addi R30, R30, 1 */
		/* 822394A8h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 822394A8h case    5:*/		return 0x822394AC;
		  /* 822394ACh */ case    6:  		/* addi R31, R31, 4 */
		/* 822394ACh case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 822394ACh case    6:*/		return 0x822394B0;
		  /* 822394B0h */ case    7:  		/* stw R29, <#[R3]> */
		/* 822394B0h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 822394B0h case    7:*/		return 0x822394B4;
		  /* 822394B4h */ case    8:  		/* b -68 */
		/* 822394B4h case    8:*/		return 0x82239470;
		/* 822394B4h case    8:*/		return 0x822394B8;
		  /* 822394B8h */ case    9:  		/* lwz R3, <#[R27 + 8]> */
		/* 822394B8h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000008) );
		/* 822394B8h case    9:*/		return 0x822394BC;
		  /* 822394BCh */ case   10:  		/* li R4, 0 */
		/* 822394BCh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822394BCh case   10:*/		return 0x822394C0;
		  /* 822394C0h */ case   11:  		/* lwz R31, <#[R3]> */
		/* 822394C0h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 822394C0h case   11:*/		return 0x822394C4;
		  /* 822394C4h */ case   12:  		/* mr R3, R27 */
		/* 822394C4h case   12:*/		regs.R3 = regs.R27;
		/* 822394C4h case   12:*/		return 0x822394C8;
		  /* 822394C8h */ case   13:  		/* bl 107832 */
		/* 822394C8h case   13:*/		regs.LR = 0x822394CC; return 0x82253A00;
		/* 822394C8h case   13:*/		return 0x822394CC;
		  /* 822394CCh */ case   14:  		/* lwz R11, <#[R31 + 132]> */
		/* 822394CCh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 822394CCh case   14:*/		return 0x822394D0;
		  /* 822394D0h */ case   15:  		/* li R28, 0 */
		/* 822394D0h case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 822394D0h case   15:*/		return 0x822394D4;
		  /* 822394D4h */ case   16:  		/* ori R11, R11, 8 */
		/* 822394D4h case   16:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 822394D4h case   16:*/		return 0x822394D8;
		  /* 822394D8h */ case   17:  		/* li R30, 0 */
		/* 822394D8h case   17:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 822394D8h case   17:*/		return 0x822394DC;
		  /* 822394DCh */ case   18:  		/* li R29, 1 */
		/* 822394DCh case   18:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 822394DCh case   18:*/		return 0x822394E0;
		  /* 822394E0h */ case   19:  		/* stw R11, <#[R31 + 132]> */
		/* 822394E0h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 822394E0h case   19:*/		return 0x822394E4;
		  /* 822394E4h */ case   20:  		/* lwz R11, <#[R31 + 88]> */
		/* 822394E4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 822394E4h case   20:*/		return 0x822394E8;
		  /* 822394E8h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 822394E8h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822394E8h case   21:*/		return 0x822394EC;
		  /* 822394ECh */ case   22:  		/* cmplw CR6, R29, R10 */
		/* 822394ECh case   22:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 822394ECh case   22:*/		return 0x822394F0;
		  /* 822394F0h */ case   23:  		/* bc 4, CR6_GT, 12 */
		/* 822394F0h case   23:*/		if ( !regs.CR[6].gt ) { return 0x822394FC;  }
		/* 822394F0h case   23:*/		return 0x822394F4;
		  /* 822394F4h */ case   24:  		/* li R11, 0 */
		/* 822394F4h case   24:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 822394F4h case   24:*/		return 0x822394F8;
		  /* 822394F8h */ case   25:  		/* b 16 */
		/* 822394F8h case   25:*/		return 0x82239508;
		/* 822394F8h case   25:*/		return 0x822394FC;
	}
	return 0x822394FC;
} // Block from 82239494h-822394FCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 822394FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822394FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822394FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822394FC);
		  /* 822394FCh */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 822394FCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822394FCh case    0:*/		return 0x82239500;
	}
	return 0x82239500;
} // Block from 822394FCh-82239500h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239500h
// Function '?InsertPosAllocInstruction@CFG@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239500);
		  /* 82239500h */ case    0:  		/* li R11, 1 */
		/* 82239500h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82239500h case    0:*/		return 0x82239504;
		  /* 82239504h */ case    1:  		/* lwzx R28, <#[R10 + R30]> */
		/* 82239504h case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82239504h case    1:*/		return 0x82239508;
	}
	return 0x82239508;
} // Block from 82239500h-82239508h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82239508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239508);
		  /* 82239508h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82239508h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82239508h case    0:*/		return 0x8223950C;
		  /* 8223950Ch */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 8223950Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8223952C;  }
		/* 8223950Ch case    1:*/		return 0x82239510;
		  /* 82239510h */ case    2:  		/* mr R3, R27 */
		/* 82239510h case    2:*/		regs.R3 = regs.R27;
		/* 82239510h case    2:*/		return 0x82239514;
		  /* 82239514h */ case    3:  		/* lwz R4, <#[R27 + 4]> */
		/* 82239514h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000004) );
		/* 82239514h case    3:*/		return 0x82239518;
		  /* 82239518h */ case    4:  		/* bl 107944 */
		/* 82239518h case    4:*/		regs.LR = 0x8223951C; return 0x82253AC0;
		/* 82239518h case    4:*/		return 0x8223951C;
		  /* 8223951Ch */ case    5:  		/* addi R29, R29, 1 */
		/* 8223951Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223951Ch case    5:*/		return 0x82239520;
		  /* 82239520h */ case    6:  		/* addi R30, R30, 4 */
		/* 82239520h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82239520h case    6:*/		return 0x82239524;
		  /* 82239524h */ case    7:  		/* stw R28, <#[R3]> */
		/* 82239524h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 82239524h case    7:*/		return 0x82239528;
		  /* 82239528h */ case    8:  		/* b -68 */
		/* 82239528h case    8:*/		return 0x822394E4;
		/* 82239528h case    8:*/		return 0x8223952C;
	}
	return 0x8223952C;
} // Block from 82239508h-8223952Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223952Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223952C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223952C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223952C);
		  /* 8223952Ch */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 8223952Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 8223952Ch case    0:*/		return 0x82239530;
		  /* 82239530h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82239530h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82239530h case    1:*/		return 0x82239534;
		  /* 82239534h */ case    2:  		/* bc 4, CR6_EQ, -124 */
		/* 82239534h case    2:*/		if ( !regs.CR[6].eq ) { return 0x822394B8;  }
		/* 82239534h case    2:*/		return 0x82239538;
		  /* 82239538h */ case    3:  		/* addi R1, R1, 144 */
		/* 82239538h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82239538h case    3:*/		return 0x8223953C;
		  /* 8223953Ch */ case    4:  		/* b -1737376 */
		/* 8223953Ch case    4:*/		return 0x8209129C;
		/* 8223953Ch case    4:*/		return 0x82239540;
	}
	return 0x82239540;
} // Block from 8223952Ch-82239540h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82239540h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239540);
		  /* 82239540h */ case    0:  		/* mfspr R12, LR */
		/* 82239540h case    0:*/		regs.R12 = regs.LR;
		/* 82239540h case    0:*/		return 0x82239544;
		  /* 82239544h */ case    1:  		/* bl -1737460 */
		/* 82239544h case    1:*/		regs.LR = 0x82239548; return 0x82091250;
		/* 82239544h case    1:*/		return 0x82239548;
		  /* 82239548h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82239548h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82239548h case    2:*/		return 0x8223954C;
		  /* 8223954Ch */ case    3:  		/* mr R31, R3 */
		/* 8223954Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223954Ch case    3:*/		return 0x82239550;
		  /* 82239550h */ case    4:  		/* stw R5, <#[R3 + 16]> */
		/* 82239550h case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000010) );
		/* 82239550h case    4:*/		return 0x82239554;
		  /* 82239554h */ case    5:  		/* li R30, 0 */
		/* 82239554h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82239554h case    5:*/		return 0x82239558;
		  /* 82239558h */ case    6:  		/* addi R27, R3, 128 */
		/* 82239558h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x80);
		/* 82239558h case    6:*/		return 0x8223955C;
		  /* 8223955Ch */ case    7:  		/* stb R30, <#[R3]> */
		/* 8223955Ch case    7:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 8223955Ch case    7:*/		return 0x82239560;
		  /* 82239560h */ case    8:  		/* mr R28, R4 */
		/* 82239560h case    8:*/		regs.R28 = regs.R4;
		/* 82239560h case    8:*/		return 0x82239564;
		  /* 82239564h */ case    9:  		/* stw R30, <#[R3 + 8]> */
		/* 82239564h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000008) );
		/* 82239564h case    9:*/		return 0x82239568;
		  /* 82239568h */ case   10:  		/* mr R3, R27 */
		/* 82239568h case   10:*/		regs.R3 = regs.R27;
		/* 82239568h case   10:*/		return 0x8223956C;
		  /* 8223956Ch */ case   11:  		/* stw R30, <#[R31 + 100]> */
		/* 8223956Ch case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000064) );
		/* 8223956Ch case   11:*/		return 0x82239570;
		  /* 82239570h */ case   12:  		/* mr R29, R6 */
		/* 82239570h case   12:*/		regs.R29 = regs.R6;
		/* 82239570h case   12:*/		return 0x82239574;
		  /* 82239574h */ case   13:  		/* stw R30, <#[R31 + 104]> */
		/* 82239574h case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000068) );
		/* 82239574h case   13:*/		return 0x82239578;
		  /* 82239578h */ case   14:  		/* stw R30, <#[R31 + 108]> */
		/* 82239578h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000006C) );
		/* 82239578h case   14:*/		return 0x8223957C;
		  /* 8223957Ch */ case   15:  		/* stw R30, <#[R31 + 112]> */
		/* 8223957Ch case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000070) );
		/* 8223957Ch case   15:*/		return 0x82239580;
		  /* 82239580h */ case   16:  		/* stw R30, <#[R31 + 116]> */
		/* 82239580h case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000074) );
		/* 82239580h case   16:*/		return 0x82239584;
		  /* 82239584h */ case   17:  		/* stw R30, <#[R31 + 120]> */
		/* 82239584h case   17:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000078) );
		/* 82239584h case   17:*/		return 0x82239588;
		  /* 82239588h */ case   18:  		/* stb R30, <#[R31 + 124]> */
		/* 82239588h case   18:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R31 + 0x0000007C) );
		/* 82239588h case   18:*/		return 0x8223958C;
		  /* 8223958Ch */ case   19:  		/* stb R30, <#[R31 + 125]> */
		/* 8223958Ch case   19:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R31 + 0x0000007D) );
		/* 8223958Ch case   19:*/		return 0x82239590;
		  /* 82239590h */ case   20:  		/* stb R30, <#[R31 + 126]> */
		/* 82239590h case   20:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R31 + 0x0000007E) );
		/* 82239590h case   20:*/		return 0x82239594;
		  /* 82239594h */ case   21:  		/* bl 107156 */
		/* 82239594h case   21:*/		regs.LR = 0x82239598; return 0x82253828;
		/* 82239594h case   21:*/		return 0x82239598;
		  /* 82239598h */ case   22:  		/* stw R30, <#[R31 + 152]> */
		/* 82239598h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000098) );
		/* 82239598h case   22:*/		return 0x8223959C;
		  /* 8223959Ch */ case   23:  		/* stw R30, <#[R31 + 156]> */
		/* 8223959Ch case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000009C) );
		/* 8223959Ch case   23:*/		return 0x822395A0;
		  /* 822395A0h */ case   24:  		/* addi R3, R31, 184 */
		/* 822395A0h case   24:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0xB8);
		/* 822395A0h case   24:*/		return 0x822395A4;
		  /* 822395A4h */ case   25:  		/* stw R30, <#[R31 + 160]> */
		/* 822395A4h case   25:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000000A0) );
		/* 822395A4h case   25:*/		return 0x822395A8;
		  /* 822395A8h */ case   26:  		/* li R5, 1880 */
		/* 822395A8h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x758);
		/* 822395A8h case   26:*/		return 0x822395AC;
		  /* 822395ACh */ case   27:  		/* mr R4, R28 */
		/* 822395ACh case   27:*/		regs.R4 = regs.R28;
		/* 822395ACh case   27:*/		return 0x822395B0;
		  /* 822395B0h */ case   28:  		/* bl -1735680 */
		/* 822395B0h case   28:*/		regs.LR = 0x822395B4; return 0x820919B0;
		/* 822395B0h case   28:*/		return 0x822395B4;
		  /* 822395B4h */ case   29:  		/* li R11, 16 */
		/* 822395B4h case   29:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 822395B4h case   29:*/		return 0x822395B8;
		  /* 822395B8h */ case   30:  		/* li R8, -1 */
		/* 822395B8h case   30:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 822395B8h case   30:*/		return 0x822395BC;
		  /* 822395BCh */ case   31:  		/* stw R30, <#[R31 + 2064]> */
		/* 822395BCh case   31:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000810) );
		/* 822395BCh case   31:*/		return 0x822395C0;
		  /* 822395C0h */ case   32:  		/* addi R10, R31, 24 */
		/* 822395C0h case   32:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x18);
		/* 822395C0h case   32:*/		return 0x822395C4;
		  /* 822395C4h */ case   33:  		/* stb R30, <#[R31 + 2072]> */
		/* 822395C4h case   33:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R31 + 0x00000818) );
		/* 822395C4h case   33:*/		return 0x822395C8;
		  /* 822395C8h */ case   34:  		/* stb R30, <#[R31 + 2073]> */
		/* 822395C8h case   34:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R31 + 0x00000819) );
		/* 822395C8h case   34:*/		return 0x822395CC;
		  /* 822395CCh */ case   35:  		/* mr R9, R30 */
		/* 822395CCh case   35:*/		regs.R9 = regs.R30;
		/* 822395CCh case   35:*/		return 0x822395D0;
		  /* 822395D0h */ case   36:  		/* stw R30, <#[R31 + 2076]> */
		/* 822395D0h case   36:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000081C) );
		/* 822395D0h case   36:*/		return 0x822395D4;
		  /* 822395D4h */ case   37:  		/* addi R10, R10, -4 */
		/* 822395D4h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 822395D4h case   37:*/		return 0x822395D8;
		  /* 822395D8h */ case   38:  		/* stw R30, <#[R31 + 2084]> */
		/* 822395D8h case   38:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000824) );
		/* 822395D8h case   38:*/		return 0x822395DC;
		  /* 822395DCh */ case   39:  		/* mtspr CTR, R11 */
		/* 822395DCh case   39:*/		regs.CTR = regs.R11;
		/* 822395DCh case   39:*/		return 0x822395E0;
		  /* 822395E0h */ case   40:  		/* stw R30, <#[R31 + 2088]> */
		/* 822395E0h case   40:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000828) );
		/* 822395E0h case   40:*/		return 0x822395E4;
		  /* 822395E4h */ case   41:  		/* stw R30, <#[R31 + 2092]> */
		/* 822395E4h case   41:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000082C) );
		/* 822395E4h case   41:*/		return 0x822395E8;
	}
	return 0x822395E8;
} // Block from 82239540h-822395E8h (42 instructions)

//////////////////////////////////////////////////////
// Block at 822395E8h
// Function '?DomTest@XGRAPHICS@@YA_NPAVIRInst@1@PAVIRAlloc@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822395E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822395E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822395E8);
		  /* 822395E8h */ case    0:  		/* stw R30, <#[R31 + 2096]> */
		/* 822395E8h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000830) );
		/* 822395E8h case    0:*/		return 0x822395EC;
		  /* 822395ECh */ case    1:  		/* stw R30, <#[R31 + 2148]> */
		/* 822395ECh case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000864) );
		/* 822395ECh case    1:*/		return 0x822395F0;
		  /* 822395F0h */ case    2:  		/* stw R30, <#[R31 + 2152]> */
		/* 822395F0h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000868) );
		/* 822395F0h case    2:*/		return 0x822395F4;
		  /* 822395F4h */ case    3:  		/* stw R30, <#[R31 + 2156]> */
		/* 822395F4h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000086C) );
		/* 822395F4h case    3:*/		return 0x822395F8;
		  /* 822395F8h */ case    4:  		/* stw R30, <#[R31 + 2160]> */
		/* 822395F8h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000870) );
		/* 822395F8h case    4:*/		return 0x822395FC;
		  /* 822395FCh */ case    5:  		/* stw R30, <#[R31 + 2164]> */
		/* 822395FCh case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000874) );
		/* 822395FCh case    5:*/		return 0x82239600;
		  /* 82239600h */ case    6:  		/* stw R30, <#[R31 + 2168]> */
		/* 82239600h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000878) );
		/* 82239600h case    6:*/		return 0x82239604;
		  /* 82239604h */ case    7:  		/* stw R30, <#[R31 + 2172]> */
		/* 82239604h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000087C) );
		/* 82239604h case    7:*/		return 0x82239608;
		  /* 82239608h */ case    8:  		/* stw R29, <#[R31 + 12]> */
		/* 82239608h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 82239608h case    8:*/		return 0x8223960C;
		  /* 8223960Ch */ case    9:  		/* stw R8, <#[R31 + 2080]> */
		/* 8223960Ch case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000820) );
		/* 8223960Ch case    9:*/		return 0x82239610;
		  /* 82239610h */ case   10:  		/* stwu R9, <#[R10 + 4]> */
		/* 82239610h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82239610h case   10:*/		return 0x82239614;
		  /* 82239614h */ case   11:  		/* bc 16, CR0_LT, -4 */
		/* 82239614h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82239610;  }
		/* 82239614h case   11:*/		return 0x82239618;
		  /* 82239618h */ case   12:  		/* stw R31, <#[R29 + 2736]> */
		/* 82239618h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000AB0) );
		/* 82239618h case   12:*/		return 0x8223961C;
		  /* 8223961Ch */ case   13:  		/* li R4, 48 */
		/* 8223961Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x30);
		/* 8223961Ch case   13:*/		return 0x82239620;
		  /* 82239620h */ case   14:  		/* lwz R28, <#[R29 + 1452]> */
		/* 82239620h case   14:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x000005AC) );
		/* 82239620h case   14:*/		return 0x82239624;
		  /* 82239624h */ case   15:  		/* mr R3, R28 */
		/* 82239624h case   15:*/		regs.R3 = regs.R28;
		/* 82239624h case   15:*/		return 0x82239628;
		  /* 82239628h */ case   16:  		/* bl -119152 */
		/* 82239628h case   16:*/		regs.LR = 0x8223962C; return 0x8221C4B8;
		/* 82239628h case   16:*/		return 0x8223962C;
		  /* 8223962Ch */ case   17:  		/* mr R11, R3 */
		/* 8223962Ch case   17:*/		regs.R11 = regs.R3;
		/* 8223962Ch case   17:*/		return 0x82239630;
		  /* 82239630h */ case   18:  		/* addic. R3, R3, 4 */
		/* 82239630h case   18:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 82239630h case   18:*/		return 0x82239634;
		  /* 82239634h */ case   19:  		/* stw R28, <#[R11]> */
		/* 82239634h case   19:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82239634h case   19:*/		return 0x82239638;
		  /* 82239638h */ case   20:  		/* bc 12, CR0_EQ, 20 */
		/* 82239638h case   20:*/		if ( regs.CR[0].eq ) { return 0x8223964C;  }
		/* 82239638h case   20:*/		return 0x8223963C;
		  /* 8223963Ch */ case   21:  		/* mr R4, R29 */
		/* 8223963Ch case   21:*/		regs.R4 = regs.R29;
		/* 8223963Ch case   21:*/		return 0x82239640;
		  /* 82239640h */ case   22:  		/* bl 46696 */
		/* 82239640h case   22:*/		regs.LR = 0x82239644; return 0x82244CA8;
		/* 82239640h case   22:*/		return 0x82239644;
		  /* 82239644h */ case   23:  		/* mr R11, R3 */
		/* 82239644h case   23:*/		regs.R11 = regs.R3;
		/* 82239644h case   23:*/		return 0x82239648;
	}
	return 0x82239648;
} // Block from 822395E8h-82239648h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82239648h
// Function '?InsertICExportInstructions@CFG@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239648);
		  /* 82239648h */ case    0:  		/* b 8 */
		/* 82239648h case    0:*/		return 0x82239650;
		/* 82239648h case    0:*/		return 0x8223964C;
	}
	return 0x8223964C;
} // Block from 82239648h-8223964Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223964Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223964C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223964C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223964C);
		  /* 8223964Ch */ case    0:  		/* mr R11, R30 */
		/* 8223964Ch case    0:*/		regs.R11 = regs.R30;
		/* 8223964Ch case    0:*/		return 0x82239650;
	}
	return 0x82239650;
} // Block from 8223964Ch-82239650h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239650);
		  /* 82239650h */ case    0:  		/* stw R11, <#[R31 + 172]> */
		/* 82239650h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000000AC) );
		/* 82239650h case    0:*/		return 0x82239654;
		  /* 82239654h */ case    1:  		/* li R3, 1024 */
		/* 82239654h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x400);
		/* 82239654h case    1:*/		return 0x82239658;
		  /* 82239658h */ case    2:  		/* lwz R4, <#[R29 + 1452]> */
		/* 82239658h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x000005AC) );
		/* 82239658h case    2:*/		return 0x8223965C;
		  /* 8223965Ch */ case    3:  		/* bl -11548 */
		/* 8223965Ch case    3:*/		regs.LR = 0x82239660; return 0x82236940;
		/* 8223965Ch case    3:*/		return 0x82239660;
		  /* 82239660h */ case    4:  		/* stw R3, <#[R31 + 176]> */
		/* 82239660h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000000B0) );
		/* 82239660h case    4:*/		return 0x82239664;
		  /* 82239664h */ case    5:  		/* lwz R28, <#[R29 + 1452]> */
		/* 82239664h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x000005AC) );
		/* 82239664h case    5:*/		return 0x82239668;
		  /* 82239668h */ case    6:  		/* li R4, 144 */
		/* 82239668h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x90);
		/* 82239668h case    6:*/		return 0x8223966C;
		  /* 8223966Ch */ case    7:  		/* mr R3, R28 */
		/* 8223966Ch case    7:*/		regs.R3 = regs.R28;
		/* 8223966Ch case    7:*/		return 0x82239670;
		  /* 82239670h */ case    8:  		/* bl -119224 */
		/* 82239670h case    8:*/		regs.LR = 0x82239674; return 0x8221C4B8;
		/* 82239670h case    8:*/		return 0x82239674;
		  /* 82239674h */ case    9:  		/* mr R11, R3 */
		/* 82239674h case    9:*/		regs.R11 = regs.R3;
		/* 82239674h case    9:*/		return 0x82239678;
		  /* 82239678h */ case   10:  		/* addic. R3, R3, 4 */
		/* 82239678h case   10:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 82239678h case   10:*/		return 0x8223967C;
		  /* 8223967Ch */ case   11:  		/* stw R28, <#[R11]> */
		/* 8223967Ch case   11:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 8223967Ch case   11:*/		return 0x82239680;
		  /* 82239680h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 82239680h case   12:*/		if ( regs.CR[0].eq ) { return 0x82239690;  }
		/* 82239680h case   12:*/		return 0x82239684;
		  /* 82239684h */ case   13:  		/* mr R4, R29 */
		/* 82239684h case   13:*/		regs.R4 = regs.R29;
		/* 82239684h case   13:*/		return 0x82239688;
		  /* 82239688h */ case   14:  		/* bl 132400 */
		/* 82239688h case   14:*/		regs.LR = 0x8223968C; return 0x82259BB8;
		/* 82239688h case   14:*/		return 0x8223968C;
		  /* 8223968Ch */ case   15:  		/* b 8 */
		/* 8223968Ch case   15:*/		return 0x82239694;
		/* 8223968Ch case   15:*/		return 0x82239690;
	}
	return 0x82239690;
} // Block from 82239650h-82239690h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82239690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239690);
		  /* 82239690h */ case    0:  		/* mr R3, R30 */
		/* 82239690h case    0:*/		regs.R3 = regs.R30;
		/* 82239690h case    0:*/		return 0x82239694;
	}
	return 0x82239694;
} // Block from 82239690h-82239694h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239694);
		  /* 82239694h */ case    0:  		/* stw R3, <#[R31 + 164]> */
		/* 82239694h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000000A4) );
		/* 82239694h case    0:*/		return 0x82239698;
		  /* 82239698h */ case    1:  		/* li R4, 140 */
		/* 82239698h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8C);
		/* 82239698h case    1:*/		return 0x8223969C;
		  /* 8223969Ch */ case    2:  		/* lwz R28, <#[R29 + 1452]> */
		/* 8223969Ch case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x000005AC) );
		/* 8223969Ch case    2:*/		return 0x822396A0;
		  /* 822396A0h */ case    3:  		/* mr R3, R28 */
		/* 822396A0h case    3:*/		regs.R3 = regs.R28;
		/* 822396A0h case    3:*/		return 0x822396A4;
		  /* 822396A4h */ case    4:  		/* bl -119276 */
		/* 822396A4h case    4:*/		regs.LR = 0x822396A8; return 0x8221C4B8;
		/* 822396A4h case    4:*/		return 0x822396A8;
		  /* 822396A8h */ case    5:  		/* mr R11, R3 */
		/* 822396A8h case    5:*/		regs.R11 = regs.R3;
		/* 822396A8h case    5:*/		return 0x822396AC;
		  /* 822396ACh */ case    6:  		/* addic. R3, R3, 4 */
		/* 822396ACh case    6:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 822396ACh case    6:*/		return 0x822396B0;
		  /* 822396B0h */ case    7:  		/* stw R28, <#[R11]> */
		/* 822396B0h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 822396B0h case    7:*/		return 0x822396B4;
		  /* 822396B4h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 822396B4h case    8:*/		if ( regs.CR[0].eq ) { return 0x822396C4;  }
		/* 822396B4h case    8:*/		return 0x822396B8;
		  /* 822396B8h */ case    9:  		/* mr R4, R29 */
		/* 822396B8h case    9:*/		regs.R4 = regs.R29;
		/* 822396B8h case    9:*/		return 0x822396BC;
		  /* 822396BCh */ case   10:  		/* bl 132436 */
		/* 822396BCh case   10:*/		regs.LR = 0x822396C0; return 0x82259C10;
		/* 822396BCh case   10:*/		return 0x822396C0;
		  /* 822396C0h */ case   11:  		/* b 8 */
		/* 822396C0h case   11:*/		return 0x822396C8;
		/* 822396C0h case   11:*/		return 0x822396C4;
	}
	return 0x822396C4;
} // Block from 82239694h-822396C4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822396C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822396C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822396C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822396C4);
		  /* 822396C4h */ case    0:  		/* mr R3, R30 */
		/* 822396C4h case    0:*/		regs.R3 = regs.R30;
		/* 822396C4h case    0:*/		return 0x822396C8;
	}
	return 0x822396C8;
} // Block from 822396C4h-822396C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822396C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822396C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822396C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822396C8);
		  /* 822396C8h */ case    0:  		/* stw R3, <#[R31 + 168]> */
		/* 822396C8h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000000A8) );
		/* 822396C8h case    0:*/		return 0x822396CC;
		  /* 822396CCh */ case    1:  		/* li R4, 20 */
		/* 822396CCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 822396CCh case    1:*/		return 0x822396D0;
		  /* 822396D0h */ case    2:  		/* lwz R26, <#[R29 + 1452]> */
		/* 822396D0h case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R29 + 0x000005AC) );
		/* 822396D0h case    2:*/		return 0x822396D4;
		  /* 822396D4h */ case    3:  		/* mr R3, R26 */
		/* 822396D4h case    3:*/		regs.R3 = regs.R26;
		/* 822396D4h case    3:*/		return 0x822396D8;
		  /* 822396D8h */ case    4:  		/* bl -119328 */
		/* 822396D8h case    4:*/		regs.LR = 0x822396DC; return 0x8221C4B8;
		/* 822396D8h case    4:*/		return 0x822396DC;
		  /* 822396DCh */ case    5:  		/* addic. R28, R3, 4 */
		/* 822396DCh case    5:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R3,0x4);
		/* 822396DCh case    5:*/		return 0x822396E0;
		  /* 822396E0h */ case    6:  		/* stw R26, <#[R3]> */
		/* 822396E0h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000000) );
		/* 822396E0h case    6:*/		return 0x822396E4;
		  /* 822396E4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 822396E4h case    7:*/		if ( regs.CR[0].eq ) { return 0x822396F8;  }
		/* 822396E4h case    7:*/		return 0x822396E8;
		  /* 822396E8h */ case    8:  		/* mr R3, R28 */
		/* 822396E8h case    8:*/		regs.R3 = regs.R28;
		/* 822396E8h case    8:*/		return 0x822396EC;
		  /* 822396ECh */ case    9:  		/* lwz R4, <#[R29 + 1452]> */
		/* 822396ECh case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x000005AC) );
		/* 822396ECh case    9:*/		return 0x822396F0;
		  /* 822396F0h */ case   10:  		/* bl -14736 */
		/* 822396F0h case   10:*/		regs.LR = 0x822396F4; return 0x82235D60;
		/* 822396F0h case   10:*/		return 0x822396F4;
		  /* 822396F4h */ case   11:  		/* b 8 */
		/* 822396F4h case   11:*/		return 0x822396FC;
		/* 822396F4h case   11:*/		return 0x822396F8;
	}
	return 0x822396F8;
} // Block from 822396C8h-822396F8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822396F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822396F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822396F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822396F8);
		  /* 822396F8h */ case    0:  		/* mr R28, R30 */
		/* 822396F8h case    0:*/		regs.R28 = regs.R30;
		/* 822396F8h case    0:*/		return 0x822396FC;
	}
	return 0x822396FC;
} // Block from 822396F8h-822396FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822396FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822396FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822396FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822396FC);
		  /* 822396FCh */ case    0:  		/* stw R28, <#[R31 + 2068]> */
		/* 822396FCh case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000814) );
		/* 822396FCh case    0:*/		return 0x82239700;
		  /* 82239700h */ case    1:  		/* li R4, 20 */
		/* 82239700h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 82239700h case    1:*/		return 0x82239704;
		  /* 82239704h */ case    2:  		/* lwz R26, <#[R29 + 1452]> */
		/* 82239704h case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R29 + 0x000005AC) );
		/* 82239704h case    2:*/		return 0x82239708;
		  /* 82239708h */ case    3:  		/* mr R3, R26 */
		/* 82239708h case    3:*/		regs.R3 = regs.R26;
		/* 82239708h case    3:*/		return 0x8223970C;
		  /* 8223970Ch */ case    4:  		/* bl -119380 */
		/* 8223970Ch case    4:*/		regs.LR = 0x82239710; return 0x8221C4B8;
		/* 8223970Ch case    4:*/		return 0x82239710;
		  /* 82239710h */ case    5:  		/* addic. R28, R3, 4 */
		/* 82239710h case    5:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R3,0x4);
		/* 82239710h case    5:*/		return 0x82239714;
		  /* 82239714h */ case    6:  		/* stw R26, <#[R3]> */
		/* 82239714h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000000) );
		/* 82239714h case    6:*/		return 0x82239718;
		  /* 82239718h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82239718h case    7:*/		if ( regs.CR[0].eq ) { return 0x8223972C;  }
		/* 82239718h case    7:*/		return 0x8223971C;
		  /* 8223971Ch */ case    8:  		/* mr R3, R28 */
		/* 8223971Ch case    8:*/		regs.R3 = regs.R28;
		/* 8223971Ch case    8:*/		return 0x82239720;
		  /* 82239720h */ case    9:  		/* lwz R4, <#[R29 + 1452]> */
		/* 82239720h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x000005AC) );
		/* 82239720h case    9:*/		return 0x82239724;
		  /* 82239724h */ case   10:  		/* bl -14788 */
		/* 82239724h case   10:*/		regs.LR = 0x82239728; return 0x82235D60;
		/* 82239724h case   10:*/		return 0x82239728;
		  /* 82239728h */ case   11:  		/* b 8 */
		/* 82239728h case   11:*/		return 0x82239730;
		/* 82239728h case   11:*/		return 0x8223972C;
	}
	return 0x8223972C;
} // Block from 822396FCh-8223972Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8223972Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223972C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223972C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223972C);
		  /* 8223972Ch */ case    0:  		/* mr R28, R30 */
		/* 8223972Ch case    0:*/		regs.R28 = regs.R30;
		/* 8223972Ch case    0:*/		return 0x82239730;
	}
	return 0x82239730;
} // Block from 8223972Ch-82239730h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239730);
		  /* 82239730h */ case    0:  		/* stw R28, <#[R31 + 96]> */
		/* 82239730h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000060) );
		/* 82239730h case    0:*/		return 0x82239734;
		  /* 82239734h */ case    1:  		/* lwz R3, <#[R31 + 172]> */
		/* 82239734h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 82239734h case    1:*/		return 0x82239738;
		  /* 82239738h */ case    2:  		/* lbz R4, <#[R29 + 1380]> */
		/* 82239738h case    2:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000564) );
		/* 82239738h case    2:*/		return 0x8223973C;
		  /* 8223973Ch */ case    3:  		/* stb R4, <#[R31 + 2144]> */
		/* 8223973Ch case    3:*/		cpu::mem::store8( regs, regs.R4, (uint32)(regs.R31 + 0x00000860) );
		/* 8223973Ch case    3:*/		return 0x82239740;
		  /* 82239740h */ case    4:  		/* bl 48400 */
		/* 82239740h case    4:*/		regs.LR = 0x82239744; return 0x82245450;
		/* 82239740h case    4:*/		return 0x82239744;
		  /* 82239744h */ case    5:  		/* mr R3, R27 */
		/* 82239744h case    5:*/		regs.R3 = regs.R27;
		/* 82239744h case    5:*/		return 0x82239748;
		  /* 82239748h */ case    6:  		/* lwz R28, <#[R31 + 164]> */
		/* 82239748h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x000000A4) );
		/* 82239748h case    6:*/		return 0x8223974C;
		  /* 8223974Ch */ case    7:  		/* mr R4, R28 */
		/* 8223974Ch case    7:*/		regs.R4 = regs.R28;
		/* 8223974Ch case    7:*/		return 0x82239750;
		  /* 82239750h */ case    8:  		/* bl 106848 */
		/* 82239750h case    8:*/		regs.LR = 0x82239754; return 0x822538B0;
		/* 82239750h case    8:*/		return 0x82239754;
		  /* 82239754h */ case    9:  		/* stw R31, <#[R28 + 16]> */
		/* 82239754h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x00000010) );
		/* 82239754h case    9:*/		return 0x82239758;
		  /* 82239758h */ case   10:  		/* mr R3, R27 */
		/* 82239758h case   10:*/		regs.R3 = regs.R27;
		/* 82239758h case   10:*/		return 0x8223975C;
		  /* 8223975Ch */ case   11:  		/* lwz R28, <#[R31 + 168]> */
		/* 8223975Ch case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x000000A8) );
		/* 8223975Ch case   11:*/		return 0x82239760;
		  /* 82239760h */ case   12:  		/* mr R4, R28 */
		/* 82239760h case   12:*/		regs.R4 = regs.R28;
		/* 82239760h case   12:*/		return 0x82239764;
		  /* 82239764h */ case   13:  		/* bl 106788 */
		/* 82239764h case   13:*/		regs.LR = 0x82239768; return 0x82253888;
		/* 82239764h case   13:*/		return 0x82239768;
		  /* 82239768h */ case   14:  		/* stw R31, <#[R28 + 16]> */
		/* 82239768h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x00000010) );
		/* 82239768h case   14:*/		return 0x8223976C;
		  /* 8223976Ch */ case   15:  		/* lbz R11, <#[R31 + 2144]> */
		/* 8223976Ch case   15:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000860) );
		/* 8223976Ch case   15:*/		return 0x82239770;
		  /* 82239770h */ case   16:  		/* cmplwi CR0, R11, 0 */
		/* 82239770h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82239770h case   16:*/		return 0x82239774;
		  /* 82239774h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 82239774h case   17:*/		if ( regs.CR[0].eq ) { return 0x82239784;  }
		/* 82239774h case   17:*/		return 0x82239778;
		  /* 82239778h */ case   18:  		/* lis R11, -32252 */
		/* 82239778h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82239778h case   18:*/		return 0x8223977C;
		  /* 8223977Ch */ case   19:  		/* addi R11, R11, 26712 */
		/* 8223977Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6858);
		/* 8223977Ch case   19:*/		return 0x82239780;
		  /* 82239780h */ case   20:  		/* b 12 */
		/* 82239780h case   20:*/		return 0x8223978C;
		/* 82239780h case   20:*/		return 0x82239784;
	}
	return 0x82239784;
} // Block from 82239730h-82239784h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82239784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239784);
		  /* 82239784h */ case    0:  		/* lis R11, -32252 */
		/* 82239784h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82239784h case    0:*/		return 0x82239788;
		  /* 82239788h */ case    1:  		/* addi R11, R11, 26448 */
		/* 82239788h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6750);
		/* 82239788h case    1:*/		return 0x8223978C;
	}
	return 0x8223978C;
} // Block from 82239784h-8223978Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223978Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223978C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223978C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223978C);
		  /* 8223978Ch */ case    0:  		/* stw R11, <#[R31 + 92]> */
		/* 8223978Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 8223978Ch case    0:*/		return 0x82239790;
		  /* 82239790h */ case    1:  		/* lwz R11, <#[R29 + 1360]> */
		/* 82239790h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000550) );
		/* 82239790h case    1:*/		return 0x82239794;
		  /* 82239794h */ case    2:  		/* lwz R28, <#[R11 + 4]> */
		/* 82239794h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000004) );
		/* 82239794h case    2:*/		return 0x82239798;
		  /* 82239798h */ case    3:  		/* lwz R4, <#[R29 + 1452]> */
		/* 82239798h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x000005AC) );
		/* 82239798h case    3:*/		return 0x8223979C;
		  /* 8223979Ch */ case    4:  		/* mr R3, R28 */
		/* 8223979Ch case    4:*/		regs.R3 = regs.R28;
		/* 8223979Ch case    4:*/		return 0x822397A0;
		  /* 822397A0h */ case    5:  		/* bl -11872 */
		/* 822397A0h case    5:*/		regs.LR = 0x822397A4; return 0x82236940;
		/* 822397A0h case    5:*/		return 0x822397A4;
		  /* 822397A4h */ case    6:  		/* stw R3, <#[R31 + 2136]> */
		/* 822397A4h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000858) );
		/* 822397A4h case    6:*/		return 0x822397A8;
		  /* 822397A8h */ case    7:  		/* mr R3, R28 */
		/* 822397A8h case    7:*/		regs.R3 = regs.R28;
		/* 822397A8h case    7:*/		return 0x822397AC;
		  /* 822397ACh */ case    8:  		/* lwz R4, <#[R29 + 1452]> */
		/* 822397ACh case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x000005AC) );
		/* 822397ACh case    8:*/		return 0x822397B0;
		  /* 822397B0h */ case    9:  		/* bl -11888 */
		/* 822397B0h case    9:*/		regs.LR = 0x822397B4; return 0x82236940;
		/* 822397B0h case    9:*/		return 0x822397B4;
		  /* 822397B4h */ case   10:  		/* lwz R11, <#[R31 + 2136]> */
		/* 822397B4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000858) );
		/* 822397B4h case   10:*/		return 0x822397B8;
		  /* 822397B8h */ case   11:  		/* stw R3, <#[R31 + 2140]> */
		/* 822397B8h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000085C) );
		/* 822397B8h case   11:*/		return 0x822397BC;
		  /* 822397BCh */ case   12:  		/* li R8, -1 */
		/* 822397BCh case   12:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 822397BCh case   12:*/		return 0x822397C0;
		  /* 822397C0h */ case   13:  		/* lwz R9, <#[R11]> */
		/* 822397C0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822397C0h case   13:*/		return 0x822397C4;
		  /* 822397C4h */ case   14:  		/* mr R10, R30 */
		/* 822397C4h case   14:*/		regs.R10 = regs.R30;
		/* 822397C4h case   14:*/		return 0x822397C8;
		  /* 822397C8h */ case   15:  		/* cmplwi CR6, R9, 0 */
		/* 822397C8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 822397C8h case   15:*/		return 0x822397CC;
		  /* 822397CCh */ case   16:  		/* bc 4, CR6_GT, 28 */
		/* 822397CCh case   16:*/		if ( !regs.CR[6].gt ) { return 0x822397E8;  }
		/* 822397CCh case   16:*/		return 0x822397D0;
		  /* 822397D0h */ case   17:  		/* addi R9, R11, 4 */
		/* 822397D0h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 822397D0h case   17:*/		return 0x822397D4;
		  /* 822397D4h */ case   18:  		/* stwu R8, <#[R9 + 4]> */
		/* 822397D4h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 822397D4h case   18:*/		return 0x822397D8;
		  /* 822397D8h */ case   19:  		/* addi R10, R10, 1 */
		/* 822397D8h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 822397D8h case   19:*/		return 0x822397DC;
		  /* 822397DCh */ case   20:  		/* lwz R7, <#[R11]> */
		/* 822397DCh case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822397DCh case   20:*/		return 0x822397E0;
		  /* 822397E0h */ case   21:  		/* cmplw CR6, R10, R7 */
		/* 822397E0h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 822397E0h case   21:*/		return 0x822397E4;
		  /* 822397E4h */ case   22:  		/* bc 12, CR6_LT, -16 */
		/* 822397E4h case   22:*/		if ( regs.CR[6].lt ) { return 0x822397D4;  }
		/* 822397E4h case   22:*/		return 0x822397E8;
	}
	return 0x822397E8;
} // Block from 8223978Ch-822397E8h (23 instructions)

//////////////////////////////////////////////////////
// Block at 822397E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822397E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822397E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822397E8);
		  /* 822397E8h */ case    0:  		/* lwz R11, <#[R31 + 2140]> */
		/* 822397E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000085C) );
		/* 822397E8h case    0:*/		return 0x822397EC;
		  /* 822397ECh */ case    1:  		/* lwz R10, <#[R11]> */
		/* 822397ECh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822397ECh case    1:*/		return 0x822397F0;
		  /* 822397F0h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 822397F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 822397F0h case    2:*/		return 0x822397F4;
		  /* 822397F4h */ case    3:  		/* bc 4, CR6_GT, 28 */
		/* 822397F4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82239810;  }
		/* 822397F4h case    3:*/		return 0x822397F8;
		  /* 822397F8h */ case    4:  		/* addi R10, R11, 4 */
		/* 822397F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 822397F8h case    4:*/		return 0x822397FC;
		  /* 822397FCh */ case    5:  		/* stwu R8, <#[R10 + 4]> */
		/* 822397FCh case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 822397FCh case    5:*/		return 0x82239800;
		  /* 82239800h */ case    6:  		/* addi R30, R30, 1 */
		/* 82239800h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82239800h case    6:*/		return 0x82239804;
		  /* 82239804h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82239804h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82239804h case    7:*/		return 0x82239808;
		  /* 82239808h */ case    8:  		/* cmplw CR6, R30, R9 */
		/* 82239808h case    8:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R9);
		/* 82239808h case    8:*/		return 0x8223980C;
		  /* 8223980Ch */ case    9:  		/* bc 12, CR6_LT, -16 */
		/* 8223980Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x822397FC;  }
		/* 8223980Ch case    9:*/		return 0x82239810;
	}
	return 0x82239810;
} // Block from 822397E8h-82239810h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82239810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239810);
		  /* 82239810h */ case    0:  		/* lwz R11, <#[R29 + 1360]> */
		/* 82239810h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000550) );
		/* 82239810h case    0:*/		return 0x82239814;
		  /* 82239814h */ case    1:  		/* lwz R3, <#[R29 + 1452]> */
		/* 82239814h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x000005AC) );
		/* 82239814h case    1:*/		return 0x82239818;
		  /* 82239818h */ case    2:  		/* lwz R11, <#[R11 + 24]> */
		/* 82239818h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82239818h case    2:*/		return 0x8223981C;
		  /* 8223981Ch */ case    3:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 8223981Ch case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 8223981Ch case    3:*/		return 0x82239820;
		  /* 82239820h */ case    4:  		/* bl -119656 */
		/* 82239820h case    4:*/		regs.LR = 0x82239824; return 0x8221C4B8;
		/* 82239820h case    4:*/		return 0x82239824;
		  /* 82239824h */ case    5:  		/* stw R3, <#[R31 + 88]> */
		/* 82239824h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000058) );
		/* 82239824h case    5:*/		return 0x82239828;
		  /* 82239828h */ case    6:  		/* mr R3, R31 */
		/* 82239828h case    6:*/		regs.R3 = regs.R31;
		/* 82239828h case    6:*/		return 0x8223982C;
		  /* 8223982Ch */ case    7:  		/* addi R1, R1, 144 */
		/* 8223982Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8223982Ch case    7:*/		return 0x82239830;
		  /* 82239830h */ case    8:  		/* b -1738128 */
		/* 82239830h case    8:*/		return 0x820912A0;
		/* 82239830h case    8:*/		return 0x82239834;
		  /* 82239834h */ case    9:  		/* nop */
		/* 82239834h case    9:*/		cpu::op::nop();
		/* 82239834h case    9:*/		return 0x82239838;
	}
	return 0x82239838;
} // Block from 82239810h-82239838h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82239838h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239838);
		  /* 82239838h */ case    0:  		/* mfspr R12, LR */
		/* 82239838h case    0:*/		regs.R12 = regs.LR;
		/* 82239838h case    0:*/		return 0x8223983C;
		  /* 8223983Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223983Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223983Ch case    1:*/		return 0x82239840;
		  /* 82239840h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82239840h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82239840h case    2:*/		return 0x82239844;
		  /* 82239844h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82239844h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82239844h case    3:*/		return 0x82239848;
		  /* 82239848h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82239848h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82239848h case    4:*/		return 0x8223984C;
		  /* 8223984Ch */ case    5:  		/* lwz R11, <#[R3 + 2140]> */
		/* 8223984Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000085C) );
		/* 8223984Ch case    5:*/		return 0x82239850;
		  /* 82239850h */ case    6:  		/* mr R31, R3 */
		/* 82239850h case    6:*/		regs.R31 = regs.R3;
		/* 82239850h case    6:*/		return 0x82239854;
		  /* 82239854h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82239854h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82239854h case    7:*/		return 0x82239858;
		  /* 82239858h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 82239858h case    8:*/		if ( regs.CR[6].eq ) { return 0x82239868;  }
		/* 82239858h case    8:*/		return 0x8223985C;
		  /* 8223985Ch */ case    9:  		/* addi R4, R11, -4 */
		/* 8223985Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8223985Ch case    9:*/		return 0x82239860;
		  /* 82239860h */ case   10:  		/* lwz R3, <#[R11 - 4]> */
		/* 82239860h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 82239860h case   10:*/		return 0x82239864;
		  /* 82239864h */ case   11:  		/* bl -119332 */
		/* 82239864h case   11:*/		regs.LR = 0x82239868; return 0x8221C640;
		/* 82239864h case   11:*/		return 0x82239868;
	}
	return 0x82239868;
} // Block from 82239838h-82239868h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82239868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239868);
		  /* 82239868h */ case    0:  		/* lwz R11, <#[R31 + 2136]> */
		/* 82239868h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000858) );
		/* 82239868h case    0:*/		return 0x8223986C;
		  /* 8223986Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8223986Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223986Ch case    1:*/		return 0x82239870;
		  /* 82239870h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82239870h case    2:*/		if ( regs.CR[6].eq ) { return 0x82239880;  }
		/* 82239870h case    2:*/		return 0x82239874;
		  /* 82239874h */ case    3:  		/* addi R4, R11, -4 */
		/* 82239874h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82239874h case    3:*/		return 0x82239878;
		  /* 82239878h */ case    4:  		/* lwz R3, <#[R11 - 4]> */
		/* 82239878h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 82239878h case    4:*/		return 0x8223987C;
		  /* 8223987Ch */ case    5:  		/* bl -119356 */
		/* 8223987Ch case    5:*/		regs.LR = 0x82239880; return 0x8221C640;
		/* 8223987Ch case    5:*/		return 0x82239880;
	}
	return 0x82239880;
} // Block from 82239868h-82239880h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82239880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239880);
		  /* 82239880h */ case    0:  		/* lwz R3, <#[R31 + 2068]> */
		/* 82239880h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000814) );
		/* 82239880h case    0:*/		return 0x82239884;
		  /* 82239884h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82239884h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82239884h case    1:*/		return 0x82239888;
		  /* 82239888h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 82239888h case    2:*/		if ( regs.CR[6].eq ) { return 0x82239894;  }
		/* 82239888h case    2:*/		return 0x8223988C;
		  /* 8223988Ch */ case    3:  		/* li R4, 1 */
		/* 8223988Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223988Ch case    3:*/		return 0x82239890;
		  /* 82239890h */ case    4:  		/* bl 25352 */
		/* 82239890h case    4:*/		regs.LR = 0x82239894; return 0x8223FB98;
		/* 82239890h case    4:*/		return 0x82239894;
	}
	return 0x82239894;
} // Block from 82239880h-82239894h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82239894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239894);
		  /* 82239894h */ case    0:  		/* lwz R30, <#[R31 + 172]> */
		/* 82239894h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x000000AC) );
		/* 82239894h case    0:*/		return 0x82239898;
		  /* 82239898h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 82239898h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82239898h case    1:*/		return 0x8223989C;
		  /* 8223989Ch */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8223989Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x822398B4;  }
		/* 8223989Ch case    2:*/		return 0x822398A0;
		  /* 822398A0h */ case    3:  		/* mr R3, R30 */
		/* 822398A0h case    3:*/		regs.R3 = regs.R30;
		/* 822398A0h case    3:*/		return 0x822398A4;
		  /* 822398A4h */ case    4:  		/* bl 48868 */
		/* 822398A4h case    4:*/		regs.LR = 0x822398A8; return 0x82245788;
		/* 822398A4h case    4:*/		return 0x822398A8;
		  /* 822398A8h */ case    5:  		/* addi R4, R30, -4 */
		/* 822398A8h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0xFFFFFFFC);
		/* 822398A8h case    5:*/		return 0x822398AC;
		  /* 822398ACh */ case    6:  		/* lwz R3, <#[R30 - 4]> */
		/* 822398ACh case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 822398ACh case    6:*/		return 0x822398B0;
		  /* 822398B0h */ case    7:  		/* bl -119408 */
		/* 822398B0h case    7:*/		regs.LR = 0x822398B4; return 0x8221C640;
		/* 822398B0h case    7:*/		return 0x822398B4;
	}
	return 0x822398B4;
} // Block from 82239894h-822398B4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822398B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822398B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822398B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822398B4);
		  /* 822398B4h */ case    0:  		/* addi R3, R31, 128 */
		/* 822398B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x80);
		/* 822398B4h case    0:*/		return 0x822398B8;
		  /* 822398B8h */ case    1:  		/* bl 106520 */
		/* 822398B8h case    1:*/		regs.LR = 0x822398BC; return 0x822538D0;
		/* 822398B8h case    1:*/		return 0x822398BC;
		  /* 822398BCh */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 822398BCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 822398BCh case    2:*/		return 0x822398C0;
		  /* 822398C0h */ case    3:  		/* lwz R4, <#[R31 + 152]> */
		/* 822398C0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000098) );
		/* 822398C0h case    3:*/		return 0x822398C4;
		  /* 822398C4h */ case    4:  		/* lwz R3, <#[R11 + 1452]> */
		/* 822398C4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005AC) );
		/* 822398C4h case    4:*/		return 0x822398C8;
		  /* 822398C8h */ case    5:  		/* bl -119432 */
		/* 822398C8h case    5:*/		regs.LR = 0x822398CC; return 0x8221C640;
		/* 822398C8h case    5:*/		return 0x822398CC;
		  /* 822398CCh */ case    6:  		/* lwz R11, <#[R31 + 12]> */
		/* 822398CCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 822398CCh case    6:*/		return 0x822398D0;
		  /* 822398D0h */ case    7:  		/* lwz R4, <#[R31 + 156]> */
		/* 822398D0h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000009C) );
		/* 822398D0h case    7:*/		return 0x822398D4;
		  /* 822398D4h */ case    8:  		/* lwz R3, <#[R11 + 1452]> */
		/* 822398D4h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005AC) );
		/* 822398D4h case    8:*/		return 0x822398D8;
		  /* 822398D8h */ case    9:  		/* bl -119448 */
		/* 822398D8h case    9:*/		regs.LR = 0x822398DC; return 0x8221C640;
		/* 822398D8h case    9:*/		return 0x822398DC;
		  /* 822398DCh */ case   10:  		/* lwz R11, <#[R31 + 12]> */
		/* 822398DCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 822398DCh case   10:*/		return 0x822398E0;
		  /* 822398E0h */ case   11:  		/* lwz R4, <#[R31 + 160]> */
		/* 822398E0h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000A0) );
		/* 822398E0h case   11:*/		return 0x822398E4;
		  /* 822398E4h */ case   12:  		/* lwz R3, <#[R11 + 1452]> */
		/* 822398E4h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005AC) );
		/* 822398E4h case   12:*/		return 0x822398E8;
		  /* 822398E8h */ case   13:  		/* bl -119464 */
		/* 822398E8h case   13:*/		regs.LR = 0x822398EC; return 0x8221C640;
		/* 822398E8h case   13:*/		return 0x822398EC;
		  /* 822398ECh */ case   14:  		/* lis R11, -32252 */
		/* 822398ECh case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822398ECh case   14:*/		return 0x822398F0;
		  /* 822398F0h */ case   15:  		/* addi R11, R11, 14380 */
		/* 822398F0h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x382C);
		/* 822398F0h case   15:*/		return 0x822398F4;
		  /* 822398F4h */ case   16:  		/* stw R11, <#[R31 + 140]> */
		/* 822398F4h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000008C) );
		/* 822398F4h case   16:*/		return 0x822398F8;
		  /* 822398F8h */ case   17:  		/* stw R11, <#[R31 + 128]> */
		/* 822398F8h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 822398F8h case   17:*/		return 0x822398FC;
		  /* 822398FCh */ case   18:  		/* addi R1, R1, 112 */
		/* 822398FCh case   18:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 822398FCh case   18:*/		return 0x82239900;
		  /* 82239900h */ case   19:  		/* lwz R12, <#[R1 - 8]> */
		/* 82239900h case   19:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82239900h case   19:*/		return 0x82239904;
		  /* 82239904h */ case   20:  		/* mtspr LR, R12 */
		/* 82239904h case   20:*/		regs.LR = regs.R12;
		/* 82239904h case   20:*/		return 0x82239908;
		  /* 82239908h */ case   21:  		/* ld R30, <#[R1 - 24]> */
		/* 82239908h case   21:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82239908h case   21:*/		return 0x8223990C;
		  /* 8223990Ch */ case   22:  		/* ld R31, <#[R1 - 16]> */
		/* 8223990Ch case   22:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223990Ch case   22:*/		return 0x82239910;
		  /* 82239910h */ case   23:  		/* bclr 20, CR0_LT */
		/* 82239910h case   23:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82239910h case   23:*/		return 0x82239914;
	}
	return 0x82239914;
} // Block from 822398B4h-82239914h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82239914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239914);
		  /* 82239914h */ case    0:  		/* nop */
		/* 82239914h case    0:*/		cpu::op::nop();
		/* 82239914h case    0:*/		return 0x82239918;
	}
	return 0x82239918;
} // Block from 82239914h-82239918h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239918);
		  /* 82239918h */ case    0:  		/* mfspr R12, LR */
		/* 82239918h case    0:*/		regs.R12 = regs.LR;
		/* 82239918h case    0:*/		return 0x8223991C;
		  /* 8223991Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223991Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223991Ch case    1:*/		return 0x82239920;
		  /* 82239920h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82239920h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82239920h case    2:*/		return 0x82239924;
		  /* 82239924h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82239924h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82239924h case    3:*/		return 0x82239928;
		  /* 82239928h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82239928h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82239928h case    4:*/		return 0x8223992C;
		  /* 8223992Ch */ case    5:  		/* lwz R11, <#[R3 + 152]> */
		/* 8223992Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000098) );
		/* 8223992Ch case    5:*/		return 0x82239930;
		  /* 82239930h */ case    6:  		/* mr R30, R3 */
		/* 82239930h case    6:*/		regs.R30 = regs.R3;
		/* 82239930h case    6:*/		return 0x82239934;
		  /* 82239934h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82239934h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82239934h case    7:*/		return 0x82239938;
		  /* 82239938h */ case    8:  		/* bc 4, CR6_EQ, 108 */
		/* 82239938h case    8:*/		if ( !regs.CR[6].eq ) { return 0x822399A4;  }
		/* 82239938h case    8:*/		return 0x8223993C;
		  /* 8223993Ch */ case    9:  		/* lwz R11, <#[R3 + 12]> */
		/* 8223993Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223993Ch case    9:*/		return 0x82239940;
		  /* 82239940h */ case   10:  		/* li R4, 44 */
		/* 82239940h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 82239940h case   10:*/		return 0x82239944;
		  /* 82239944h */ case   11:  		/* lwz R31, <#[R11 + 1456]> */
		/* 82239944h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x000005B0) );
		/* 82239944h case   11:*/		return 0x82239948;
		  /* 82239948h */ case   12:  		/* mr R3, R31 */
		/* 82239948h case   12:*/		regs.R3 = regs.R31;
		/* 82239948h case   12:*/		return 0x8223994C;
		  /* 8223994Ch */ case   13:  		/* bl -119956 */
		/* 8223994Ch case   13:*/		regs.LR = 0x82239950; return 0x8221C4B8;
		/* 8223994Ch case   13:*/		return 0x82239950;
		  /* 82239950h */ case   14:  		/* mr R11, R3 */
		/* 82239950h case   14:*/		regs.R11 = regs.R3;
		/* 82239950h case   14:*/		return 0x82239954;
		  /* 82239954h */ case   15:  		/* addic. R3, R3, 4 */
		/* 82239954h case   15:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 82239954h case   15:*/		return 0x82239958;
		  /* 82239958h */ case   16:  		/* stw R31, <#[R11]> */
		/* 82239958h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 82239958h case   16:*/		return 0x8223995C;
		  /* 8223995Ch */ case   17:  		/* bc 12, CR0_EQ, 20 */
		/* 8223995Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x82239970;  }
		/* 8223995Ch case   17:*/		return 0x82239960;
		  /* 82239960h */ case   18:  		/* mr R4, R30 */
		/* 82239960h case   18:*/		regs.R4 = regs.R30;
		/* 82239960h case   18:*/		return 0x82239964;
		  /* 82239964h */ case   19:  		/* bl 126036 */
		/* 82239964h case   19:*/		regs.LR = 0x82239968; return 0x822585B8;
		/* 82239964h case   19:*/		return 0x82239968;
		  /* 82239968h */ case   20:  		/* mr R31, R3 */
		/* 82239968h case   20:*/		regs.R31 = regs.R3;
		/* 82239968h case   20:*/		return 0x8223996C;
		  /* 8223996Ch */ case   21:  		/* b 8 */
		/* 8223996Ch case   21:*/		return 0x82239974;
		/* 8223996Ch case   21:*/		return 0x82239970;
	}
	return 0x82239970;
} // Block from 82239918h-82239970h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82239970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239970);
		  /* 82239970h */ case    0:  		/* li R31, 0 */
		/* 82239970h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82239970h case    0:*/		return 0x82239974;
	}
	return 0x82239974;
} // Block from 82239970h-82239974h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239974);
		  /* 82239974h */ case    0:  		/* mr R3, R31 */
		/* 82239974h case    0:*/		regs.R3 = regs.R31;
		/* 82239974h case    0:*/		return 0x82239978;
		  /* 82239978h */ case    1:  		/* lwz R4, <#[R30 + 164]> */
		/* 82239978h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x000000A4) );
		/* 82239978h case    1:*/		return 0x8223997C;
		  /* 8223997Ch */ case    2:  		/* bl 127228 */
		/* 8223997Ch case    2:*/		regs.LR = 0x82239980; return 0x82258A78;
		/* 8223997Ch case    2:*/		return 0x82239980;
		  /* 82239980h */ case    3:  		/* mr R3, R30 */
		/* 82239980h case    3:*/		regs.R3 = regs.R30;
		/* 82239980h case    3:*/		return 0x82239984;
		  /* 82239984h */ case    4:  		/* lwz R5, <#[R31 + 28]> */
		/* 82239984h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000001C) );
		/* 82239984h case    4:*/		return 0x82239988;
		  /* 82239988h */ case    5:  		/* lwz R4, <#[R31 + 24]> */
		/* 82239988h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 82239988h case    5:*/		return 0x8223998C;
		  /* 8223998Ch */ case    6:  		/* bl -14124 */
		/* 8223998Ch case    6:*/		regs.LR = 0x82239990; return 0x82236260;
		/* 8223998Ch case    6:*/		return 0x82239990;
		  /* 82239990h */ case    7:  		/* mr R3, R31 */
		/* 82239990h case    7:*/		regs.R3 = regs.R31;
		/* 82239990h case    7:*/		return 0x82239994;
		  /* 82239994h */ case    8:  		/* bl 126228 */
		/* 82239994h case    8:*/		regs.LR = 0x82239998; return 0x822586A8;
		/* 82239994h case    8:*/		return 0x82239998;
		  /* 82239998h */ case    9:  		/* addi R4, R31, -4 */
		/* 82239998h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0xFFFFFFFC);
		/* 82239998h case    9:*/		return 0x8223999C;
		  /* 8223999Ch */ case   10:  		/* lwz R3, <#[R31 - 4]> */
		/* 8223999Ch case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8223999Ch case   10:*/		return 0x822399A0;
		  /* 822399A0h */ case   11:  		/* bl -119648 */
		/* 822399A0h case   11:*/		regs.LR = 0x822399A4; return 0x8221C640;
		/* 822399A0h case   11:*/		return 0x822399A4;
	}
	return 0x822399A4;
} // Block from 82239974h-822399A4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822399A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822399A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822399A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822399A4);
		  /* 822399A4h */ case    0:  		/* lwz R3, <#[R30 + 152]> */
		/* 822399A4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000098) );
		/* 822399A4h case    0:*/		return 0x822399A8;
		  /* 822399A8h */ case    1:  		/* addi R1, R1, 112 */
		/* 822399A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 822399A8h case    1:*/		return 0x822399AC;
		  /* 822399ACh */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 822399ACh case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 822399ACh case    2:*/		return 0x822399B0;
		  /* 822399B0h */ case    3:  		/* mtspr LR, R12 */
		/* 822399B0h case    3:*/		regs.LR = regs.R12;
		/* 822399B0h case    3:*/		return 0x822399B4;
		  /* 822399B4h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 822399B4h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 822399B4h case    4:*/		return 0x822399B8;
		  /* 822399B8h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 822399B8h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 822399B8h case    5:*/		return 0x822399BC;
		  /* 822399BCh */ case    6:  		/* bclr 20, CR0_LT */
		/* 822399BCh case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822399BCh case    6:*/		return 0x822399C0;
	}
	return 0x822399C0;
} // Block from 822399A4h-822399C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822399C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822399C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822399C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822399C0);
		  /* 822399C0h */ case    0:  		/* mfspr R12, LR */
		/* 822399C0h case    0:*/		regs.R12 = regs.LR;
		/* 822399C0h case    0:*/		return 0x822399C4;
		  /* 822399C4h */ case    1:  		/* bl -1738600 */
		/* 822399C4h case    1:*/		regs.LR = 0x822399C8; return 0x8209125C;
		/* 822399C4h case    1:*/		return 0x822399C8;
		  /* 822399C8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 822399C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 822399C8h case    2:*/		return 0x822399CC;
		  /* 822399CCh */ case    3:  		/* lwz R11, <#[R3 + 156]> */
		/* 822399CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000009C) );
		/* 822399CCh case    3:*/		return 0x822399D0;
		  /* 822399D0h */ case    4:  		/* mr R31, R3 */
		/* 822399D0h case    4:*/		regs.R31 = regs.R3;
		/* 822399D0h case    4:*/		return 0x822399D4;
		  /* 822399D4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 822399D4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822399D4h case    5:*/		return 0x822399D8;
		  /* 822399D8h */ case    6:  		/* bc 4, CR6_EQ, 104 */
		/* 822399D8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82239A40;  }
		/* 822399D8h case    6:*/		return 0x822399DC;
		  /* 822399DCh */ case    7:  		/* addi R3, R3, 128 */
		/* 822399DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 822399DCh case    7:*/		return 0x822399E0;
		  /* 822399E0h */ case    8:  		/* bl 106112 */
		/* 822399E0h case    8:*/		regs.LR = 0x822399E4; return 0x82253860;
		/* 822399E0h case    8:*/		return 0x822399E4;
		  /* 822399E4h */ case    9:  		/* lwz R11, <#[R31 + 12]> */
		/* 822399E4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 822399E4h case    9:*/		return 0x822399E8;
		  /* 822399E8h */ case   10:  		/* rlwinm R29, R3, 2, 0, 29 */
		/* 822399E8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R3);
		/* 822399E8h case   10:*/		return 0x822399EC;
		  /* 822399ECh */ case   11:  		/* mr R30, R3 */
		/* 822399ECh case   11:*/		regs.R30 = regs.R3;
		/* 822399ECh case   11:*/		return 0x822399F0;
		  /* 822399F0h */ case   12:  		/* addi R4, R29, 4 */
		/* 822399F0h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x4);
		/* 822399F0h case   12:*/		return 0x822399F4;
		  /* 822399F4h */ case   13:  		/* lwz R3, <#[R11 + 1452]> */
		/* 822399F4h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005AC) );
		/* 822399F4h case   13:*/		return 0x822399F8;
		  /* 822399F8h */ case   14:  		/* bl -120128 */
		/* 822399F8h case   14:*/		regs.LR = 0x822399FC; return 0x8221C4B8;
		/* 822399F8h case   14:*/		return 0x822399FC;
		  /* 822399FCh */ case   15:  		/* stw R3, <#[R31 + 156]> */
		/* 822399FCh case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000009C) );
		/* 822399FCh case   15:*/		return 0x82239A00;
		  /* 82239A00h */ case   16:  		/* mr R3, R31 */
		/* 82239A00h case   16:*/		regs.R3 = regs.R31;
		/* 82239A00h case   16:*/		return 0x82239A04;
		  /* 82239A04h */ case   17:  		/* bl -236 */
		/* 82239A04h case   17:*/		regs.LR = 0x82239A08; return 0x82239918;
		/* 82239A04h case   17:*/		return 0x82239A08;
		  /* 82239A08h */ case   18:  		/* lwz R11, <#[R31 + 156]> */
		/* 82239A08h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000009C) );
		/* 82239A08h case   18:*/		return 0x82239A0C;
		  /* 82239A0Ch */ case   19:  		/* lwz R10, <#[R3]> */
		/* 82239A0Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82239A0Ch case   19:*/		return 0x82239A10;
		  /* 82239A10h */ case   20:  		/* cmpwi CR6, R30, 1 */
		/* 82239A10h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000001);
		/* 82239A10h case   20:*/		return 0x82239A14;
		  /* 82239A14h */ case   21:  		/* stw R10, <#[R11]> */
		/* 82239A14h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82239A14h case   21:*/		return 0x82239A18;
		  /* 82239A18h */ case   22:  		/* bc 12, CR6_LT, 40 */
		/* 82239A18h case   22:*/		if ( regs.CR[6].lt ) { return 0x82239A40;  }
		/* 82239A18h case   22:*/		return 0x82239A1C;
		  /* 82239A1Ch */ case   23:  		/* add R10, R29, R3 */
		/* 82239A1Ch case   23:*/		cpu::op::add<0>(regs,&regs.R10,regs.R29,regs.R3);
		/* 82239A1Ch case   23:*/		return 0x82239A20;
		  /* 82239A20h */ case   24:  		/* mtspr CTR, R30 */
		/* 82239A20h case   24:*/		regs.CTR = regs.R30;
		/* 82239A20h case   24:*/		return 0x82239A24;
		  /* 82239A24h */ case   25:  		/* li R11, 4 */
		/* 82239A24h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82239A24h case   25:*/		return 0x82239A28;
		  /* 82239A28h */ case   26:  		/* addi R10, R10, 4 */
		/* 82239A28h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82239A28h case   26:*/		return 0x82239A2C;
		  /* 82239A2Ch */ case   27:  		/* lwzu R9, <#[R10 - 4]> */
		/* 82239A2Ch case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0xFFFFFFFC) );
		regs.R10 = (uint32)(regs.R10 + 0xFFFFFFFC);
		/* 82239A2Ch case   27:*/		return 0x82239A30;
		  /* 82239A30h */ case   28:  		/* lwz R8, <#[R31 + 156]> */
		/* 82239A30h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000009C) );
		/* 82239A30h case   28:*/		return 0x82239A34;
		  /* 82239A34h */ case   29:  		/* stwx R9, <#[R11 + R8]> */
		/* 82239A34h case   29:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82239A34h case   29:*/		return 0x82239A38;
		  /* 82239A38h */ case   30:  		/* addi R11, R11, 4 */
		/* 82239A38h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82239A38h case   30:*/		return 0x82239A3C;
		  /* 82239A3Ch */ case   31:  		/* bc 16, CR0_LT, -16 */
		/* 82239A3Ch case   31:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82239A2C;  }
		/* 82239A3Ch case   31:*/		return 0x82239A40;
	}
	return 0x82239A40;
} // Block from 822399C0h-82239A40h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82239A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239A40);
		  /* 82239A40h */ case    0:  		/* lwz R3, <#[R31 + 156]> */
		/* 82239A40h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000009C) );
		/* 82239A40h case    0:*/		return 0x82239A44;
		  /* 82239A44h */ case    1:  		/* addi R1, R1, 112 */
		/* 82239A44h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82239A44h case    1:*/		return 0x82239A48;
		  /* 82239A48h */ case    2:  		/* b -1738652 */
		/* 82239A48h case    2:*/		return 0x820912AC;
		/* 82239A48h case    2:*/		return 0x82239A4C;
		  /* 82239A4Ch */ case    3:  		/* nop */
		/* 82239A4Ch case    3:*/		cpu::op::nop();
		/* 82239A4Ch case    3:*/		return 0x82239A50;
	}
	return 0x82239A50;
} // Block from 82239A40h-82239A50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82239A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239A50);
		  /* 82239A50h */ case    0:  		/* mfspr R12, LR */
		/* 82239A50h case    0:*/		regs.R12 = regs.LR;
		/* 82239A50h case    0:*/		return 0x82239A54;
		  /* 82239A54h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82239A54h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82239A54h case    1:*/		return 0x82239A58;
		  /* 82239A58h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82239A58h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82239A58h case    2:*/		return 0x82239A5C;
		  /* 82239A5Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82239A5Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82239A5Ch case    3:*/		return 0x82239A60;
		  /* 82239A60h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82239A60h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82239A60h case    4:*/		return 0x82239A64;
		  /* 82239A64h */ case    5:  		/* lwz R30, <#[R3 + 12]> */
		/* 82239A64h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 82239A64h case    5:*/		return 0x82239A68;
		  /* 82239A68h */ case    6:  		/* mr R31, R3 */
		/* 82239A68h case    6:*/		regs.R31 = regs.R3;
		/* 82239A68h case    6:*/		return 0x82239A6C;
		  /* 82239A6Ch */ case    7:  		/* lwz R3, <#[R30 + 1488]> */
		/* 82239A6Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 82239A6Ch case    7:*/		return 0x82239A70;
		  /* 82239A70h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 82239A70h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82239A70h case    8:*/		return 0x82239A74;
		  /* 82239A74h */ case    9:  		/* lwz R11, <#[R11 + 28]> */
		/* 82239A74h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82239A74h case    9:*/		return 0x82239A78;
		  /* 82239A78h */ case   10:  		/* mtspr CTR, R11 */
		/* 82239A78h case   10:*/		regs.CTR = regs.R11;
		/* 82239A78h case   10:*/		return 0x82239A7C;
		  /* 82239A7Ch */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 82239A7Ch case   11:*/		if ( 1 ) { regs.LR = 0x82239A80; return (uint32)regs.CTR; }
		/* 82239A7Ch case   11:*/		return 0x82239A80;
		  /* 82239A80h */ case   12:  		/* lis R11, -32222 */
		/* 82239A80h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82239A80h case   12:*/		return 0x82239A84;
		  /* 82239A84h */ case   13:  		/* mr R5, R3 */
		/* 82239A84h case   13:*/		regs.R5 = regs.R3;
		/* 82239A84h case   13:*/		return 0x82239A88;
		  /* 82239A88h */ case   14:  		/* lwz R3, <#[R31 + 16]> */
		/* 82239A88h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82239A88h case   14:*/		return 0x82239A8C;
		  /* 82239A8Ch */ case   15:  		/* li R4, 0 */
		/* 82239A8Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239A8Ch case   15:*/		return 0x82239A90;
		  /* 82239A90h */ case   16:  		/* addi R6, R11, -12392 */
		/* 82239A90h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82239A90h case   16:*/		return 0x82239A94;
		  /* 82239A94h */ case   17:  		/* mr R7, R30 */
		/* 82239A94h case   17:*/		regs.R7 = regs.R30;
		/* 82239A94h case   17:*/		return 0x82239A98;
		  /* 82239A98h */ case   18:  		/* bl -35672 */
		/* 82239A98h case   18:*/		regs.LR = 0x82239A9C; return 0x82230F40;
		/* 82239A98h case   18:*/		return 0x82239A9C;
		  /* 82239A9Ch */ case   19:  		/* cmpwi CR6, R3, 1 */
		/* 82239A9Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82239A9Ch case   19:*/		return 0x82239AA0;
		  /* 82239AA0h */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 82239AA0h case   20:*/		if ( regs.CR[6].eq ) { return 0x82239AD4;  }
		/* 82239AA0h case   20:*/		return 0x82239AA4;
		  /* 82239AA4h */ case   21:  		/* cmpwi CR6, R3, 3 */
		/* 82239AA4h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 82239AA4h case   21:*/		return 0x82239AA8;
		  /* 82239AA8h */ case   22:  		/* bc 4, CR6_EQ, 52 */
		/* 82239AA8h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82239ADC;  }
		/* 82239AA8h case   22:*/		return 0x82239AAC;
		  /* 82239AACh */ case   23:  		/* lis R11, -32252 */
		/* 82239AACh case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82239AACh case   23:*/		return 0x82239AB0;
		  /* 82239AB0h */ case   24:  		/* lis R10, -32255 */
		/* 82239AB0h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82239AB0h case   24:*/		return 0x82239AB4;
		  /* 82239AB4h */ case   25:  		/* lis R9, -32253 */
		/* 82239AB4h case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82239AB4h case   25:*/		return 0x82239AB8;
		  /* 82239AB8h */ case   26:  		/* addi R6, R11, 8520 */
		/* 82239AB8h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 82239AB8h case   26:*/		return 0x82239ABC;
		  /* 82239ABCh */ case   27:  		/* addi R5, R10, 5216 */
		/* 82239ABCh case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 82239ABCh case   27:*/		return 0x82239AC0;
		  /* 82239AC0h */ case   28:  		/* addi R4, R9, 27460 */
		/* 82239AC0h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82239AC0h case   28:*/		return 0x82239AC4;
		  /* 82239AC4h */ case   29:  		/* li R7, 553 */
		/* 82239AC4h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x229);
		/* 82239AC4h case   29:*/		return 0x82239AC8;
		  /* 82239AC8h */ case   30:  		/* li R3, 0 */
		/* 82239AC8h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82239AC8h case   30:*/		return 0x82239ACC;
		  /* 82239ACCh */ case   31:  		/* bl -925380 */
		/* 82239ACCh case   31:*/		regs.LR = 0x82239AD0; return 0x82157C08;
		/* 82239ACCh case   31:*/		return 0x82239AD0;
		  /* 82239AD0h */ case   32:  		/* b 12 */
		/* 82239AD0h case   32:*/		return 0x82239ADC;
		/* 82239AD0h case   32:*/		return 0x82239AD4;
	}
	return 0x82239AD4;
} // Block from 82239A50h-82239AD4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82239AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239AD4);
		  /* 82239AD4h */ case    0:  		/* mr R3, R31 */
		/* 82239AD4h case    0:*/		regs.R3 = regs.R31;
		/* 82239AD4h case    0:*/		return 0x82239AD8;
		  /* 82239AD8h */ case    1:  		/* bl -13920 */
		/* 82239AD8h case    1:*/		regs.LR = 0x82239ADC; return 0x82236478;
		/* 82239AD8h case    1:*/		return 0x82239ADC;
	}
	return 0x82239ADC;
} // Block from 82239AD4h-82239ADCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82239ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239ADC);
		  /* 82239ADCh */ case    0:  		/* addi R1, R1, 112 */
		/* 82239ADCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82239ADCh case    0:*/		return 0x82239AE0;
		  /* 82239AE0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82239AE0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82239AE0h case    1:*/		return 0x82239AE4;
		  /* 82239AE4h */ case    2:  		/* mtspr LR, R12 */
		/* 82239AE4h case    2:*/		regs.LR = regs.R12;
		/* 82239AE4h case    2:*/		return 0x82239AE8;
		  /* 82239AE8h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82239AE8h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82239AE8h case    3:*/		return 0x82239AEC;
		  /* 82239AECh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82239AECh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82239AECh case    4:*/		return 0x82239AF0;
		  /* 82239AF0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82239AF0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82239AF0h case    5:*/		return 0x82239AF4;
	}
	return 0x82239AF4;
} // Block from 82239ADCh-82239AF4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82239AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239AF4);
		  /* 82239AF4h */ case    0:  		/* nop */
		/* 82239AF4h case    0:*/		cpu::op::nop();
		/* 82239AF4h case    0:*/		return 0x82239AF8;
	}
	return 0x82239AF8;
} // Block from 82239AF4h-82239AF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239AF8);
		  /* 82239AF8h */ case    0:  		/* mfspr R12, LR */
		/* 82239AF8h case    0:*/		regs.R12 = regs.LR;
		/* 82239AF8h case    0:*/		return 0x82239AFC;
		  /* 82239AFCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82239AFCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82239AFCh case    1:*/		return 0x82239B00;
		  /* 82239B00h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82239B00h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82239B00h case    2:*/		return 0x82239B04;
		  /* 82239B04h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82239B04h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82239B04h case    3:*/		return 0x82239B08;
		  /* 82239B08h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82239B08h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82239B08h case    4:*/		return 0x82239B0C;
		  /* 82239B0Ch */ case    5:  		/* lwz R30, <#[R3 + 12]> */
		/* 82239B0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 82239B0Ch case    5:*/		return 0x82239B10;
		  /* 82239B10h */ case    6:  		/* mr R31, R3 */
		/* 82239B10h case    6:*/		regs.R31 = regs.R3;
		/* 82239B10h case    6:*/		return 0x82239B14;
		  /* 82239B14h */ case    7:  		/* lwz R3, <#[R30 + 1488]> */
		/* 82239B14h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 82239B14h case    7:*/		return 0x82239B18;
		  /* 82239B18h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 82239B18h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82239B18h case    8:*/		return 0x82239B1C;
		  /* 82239B1Ch */ case    9:  		/* lwz R11, <#[R11 + 28]> */
		/* 82239B1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82239B1Ch case    9:*/		return 0x82239B20;
		  /* 82239B20h */ case   10:  		/* mtspr CTR, R11 */
		/* 82239B20h case   10:*/		regs.CTR = regs.R11;
		/* 82239B20h case   10:*/		return 0x82239B24;
		  /* 82239B24h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 82239B24h case   11:*/		if ( 1 ) { regs.LR = 0x82239B28; return (uint32)regs.CTR; }
		/* 82239B24h case   11:*/		return 0x82239B28;
		  /* 82239B28h */ case   12:  		/* lis R11, -32222 */
		/* 82239B28h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82239B28h case   12:*/		return 0x82239B2C;
		  /* 82239B2Ch */ case   13:  		/* mr R5, R3 */
		/* 82239B2Ch case   13:*/		regs.R5 = regs.R3;
		/* 82239B2Ch case   13:*/		return 0x82239B30;
		  /* 82239B30h */ case   14:  		/* lwz R3, <#[R31 + 16]> */
		/* 82239B30h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82239B30h case   14:*/		return 0x82239B34;
		  /* 82239B34h */ case   15:  		/* li R4, 0 */
		/* 82239B34h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239B34h case   15:*/		return 0x82239B38;
		  /* 82239B38h */ case   16:  		/* addi R6, R11, -12392 */
		/* 82239B38h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82239B38h case   16:*/		return 0x82239B3C;
		  /* 82239B3Ch */ case   17:  		/* mr R7, R30 */
		/* 82239B3Ch case   17:*/		regs.R7 = regs.R30;
		/* 82239B3Ch case   17:*/		return 0x82239B40;
		  /* 82239B40h */ case   18:  		/* bl -39632 */
		/* 82239B40h case   18:*/		regs.LR = 0x82239B44; return 0x82230070;
		/* 82239B40h case   18:*/		return 0x82239B44;
		  /* 82239B44h */ case   19:  		/* cmpwi CR6, R3, 1 */
		/* 82239B44h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82239B44h case   19:*/		return 0x82239B48;
		  /* 82239B48h */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 82239B48h case   20:*/		if ( regs.CR[6].eq ) { return 0x82239B7C;  }
		/* 82239B48h case   20:*/		return 0x82239B4C;
		  /* 82239B4Ch */ case   21:  		/* cmpwi CR6, R3, 3 */
		/* 82239B4Ch case   21:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 82239B4Ch case   21:*/		return 0x82239B50;
		  /* 82239B50h */ case   22:  		/* bc 4, CR6_EQ, 120 */
		/* 82239B50h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82239BC8;  }
		/* 82239B50h case   22:*/		return 0x82239B54;
		  /* 82239B54h */ case   23:  		/* lis R11, -32252 */
		/* 82239B54h case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82239B54h case   23:*/		return 0x82239B58;
		  /* 82239B58h */ case   24:  		/* lis R10, -32255 */
		/* 82239B58h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82239B58h case   24:*/		return 0x82239B5C;
		  /* 82239B5Ch */ case   25:  		/* lis R9, -32253 */
		/* 82239B5Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82239B5Ch case   25:*/		return 0x82239B60;
		  /* 82239B60h */ case   26:  		/* addi R6, R11, 8520 */
		/* 82239B60h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 82239B60h case   26:*/		return 0x82239B64;
		  /* 82239B64h */ case   27:  		/* addi R5, R10, 5216 */
		/* 82239B64h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 82239B64h case   27:*/		return 0x82239B68;
		  /* 82239B68h */ case   28:  		/* addi R4, R9, 27460 */
		/* 82239B68h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82239B68h case   28:*/		return 0x82239B6C;
		  /* 82239B6Ch */ case   29:  		/* li R7, 1013 */
		/* 82239B6Ch case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x3F5);
		/* 82239B6Ch case   29:*/		return 0x82239B70;
		  /* 82239B70h */ case   30:  		/* li R3, 0 */
		/* 82239B70h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82239B70h case   30:*/		return 0x82239B74;
		  /* 82239B74h */ case   31:  		/* bl -925548 */
		/* 82239B74h case   31:*/		regs.LR = 0x82239B78; return 0x82157C08;
		/* 82239B74h case   31:*/		return 0x82239B78;
		  /* 82239B78h */ case   32:  		/* b 80 */
		/* 82239B78h case   32:*/		return 0x82239BC8;
		/* 82239B78h case   32:*/		return 0x82239B7C;
	}
	return 0x82239B7C;
} // Block from 82239AF8h-82239B7Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 82239B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239B7C);
		  /* 82239B7Ch */ case    0:  		/* lwz R30, <#[R31 + 12]> */
		/* 82239B7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82239B7Ch case    0:*/		return 0x82239B80;
		  /* 82239B80h */ case    1:  		/* lwz R3, <#[R30 + 1488]> */
		/* 82239B80h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 82239B80h case    1:*/		return 0x82239B84;
		  /* 82239B84h */ case    2:  		/* lwz R11, <#[R3]> */
		/* 82239B84h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82239B84h case    2:*/		return 0x82239B88;
		  /* 82239B88h */ case    3:  		/* lwz R11, <#[R11 + 28]> */
		/* 82239B88h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82239B88h case    3:*/		return 0x82239B8C;
		  /* 82239B8Ch */ case    4:  		/* mtspr CTR, R11 */
		/* 82239B8Ch case    4:*/		regs.CTR = regs.R11;
		/* 82239B8Ch case    4:*/		return 0x82239B90;
		  /* 82239B90h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 82239B90h case    5:*/		if ( 1 ) { regs.LR = 0x82239B94; return (uint32)regs.CTR; }
		/* 82239B90h case    5:*/		return 0x82239B94;
		  /* 82239B94h */ case    6:  		/* lis R11, -32222 */
		/* 82239B94h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 82239B94h case    6:*/		return 0x82239B98;
		  /* 82239B98h */ case    7:  		/* mr R5, R3 */
		/* 82239B98h case    7:*/		regs.R5 = regs.R3;
		/* 82239B98h case    7:*/		return 0x82239B9C;
		  /* 82239B9Ch */ case    8:  		/* lwz R3, <#[R31 + 16]> */
		/* 82239B9Ch case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82239B9Ch case    8:*/		return 0x82239BA0;
		  /* 82239BA0h */ case    9:  		/* li R4, 0 */
		/* 82239BA0h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239BA0h case    9:*/		return 0x82239BA4;
		  /* 82239BA4h */ case   10:  		/* addi R6, R11, -12392 */
		/* 82239BA4h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 82239BA4h case   10:*/		return 0x82239BA8;
		  /* 82239BA8h */ case   11:  		/* mr R7, R30 */
		/* 82239BA8h case   11:*/		regs.R7 = regs.R30;
		/* 82239BA8h case   11:*/		return 0x82239BAC;
		  /* 82239BACh */ case   12:  		/* bl -39436 */
		/* 82239BACh case   12:*/		regs.LR = 0x82239BB0; return 0x822301A0;
		/* 82239BACh case   12:*/		return 0x82239BB0;
		  /* 82239BB0h */ case   13:  		/* cmpwi CR6, R3, 1 */
		/* 82239BB0h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82239BB0h case   13:*/		return 0x82239BB4;
		  /* 82239BB4h */ case   14:  		/* mr R3, R31 */
		/* 82239BB4h case   14:*/		regs.R3 = regs.R31;
		/* 82239BB4h case   14:*/		return 0x82239BB8;
		  /* 82239BB8h */ case   15:  		/* bc 4, CR6_EQ, 12 */
		/* 82239BB8h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82239BC4;  }
		/* 82239BB8h case   15:*/		return 0x82239BBC;
		  /* 82239BBCh */ case   16:  		/* bl -12724 */
		/* 82239BBCh case   16:*/		regs.LR = 0x82239BC0; return 0x82236A08;
		/* 82239BBCh case   16:*/		return 0x82239BC0;
		  /* 82239BC0h */ case   17:  		/* b 8 */
		/* 82239BC0h case   17:*/		return 0x82239BC8;
		/* 82239BC0h case   17:*/		return 0x82239BC4;
	}
	return 0x82239BC4;
} // Block from 82239B7Ch-82239BC4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82239BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239BC4);
		  /* 82239BC4h */ case    0:  		/* bl -12396 */
		/* 82239BC4h case    0:*/		regs.LR = 0x82239BC8; return 0x82236B58;
		/* 82239BC4h case    0:*/		return 0x82239BC8;
	}
	return 0x82239BC8;
} // Block from 82239BC4h-82239BC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239BC8);
		  /* 82239BC8h */ case    0:  		/* addi R1, R1, 112 */
		/* 82239BC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82239BC8h case    0:*/		return 0x82239BCC;
		  /* 82239BCCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82239BCCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82239BCCh case    1:*/		return 0x82239BD0;
		  /* 82239BD0h */ case    2:  		/* mtspr LR, R12 */
		/* 82239BD0h case    2:*/		regs.LR = regs.R12;
		/* 82239BD0h case    2:*/		return 0x82239BD4;
		  /* 82239BD4h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82239BD4h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82239BD4h case    3:*/		return 0x82239BD8;
		  /* 82239BD8h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82239BD8h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82239BD8h case    4:*/		return 0x82239BDC;
		  /* 82239BDCh */ case    5:  		/* bclr 20, CR0_LT */
		/* 82239BDCh case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82239BDCh case    5:*/		return 0x82239BE0;
	}
	return 0x82239BE0;
} // Block from 82239BC8h-82239BE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82239BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239BE0);
		  /* 82239BE0h */ case    0:  		/* mfspr R12, LR */
		/* 82239BE0h case    0:*/		regs.R12 = regs.LR;
		/* 82239BE0h case    0:*/		return 0x82239BE4;
		  /* 82239BE4h */ case    1:  		/* bl -1739176 */
		/* 82239BE4h case    1:*/		regs.LR = 0x82239BE8; return 0x8209123C;
		/* 82239BE4h case    1:*/		return 0x82239BE8;
		  /* 82239BE8h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82239BE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82239BE8h case    2:*/		return 0x82239BEC;
		  /* 82239BECh */ case    3:  		/* mr R31, R3 */
		/* 82239BECh case    3:*/		regs.R31 = regs.R3;
		/* 82239BECh case    3:*/		return 0x82239BF0;
		  /* 82239BF0h */ case    4:  		/* bl -14272 */
		/* 82239BF0h case    4:*/		regs.LR = 0x82239BF4; return 0x82236430;
		/* 82239BF0h case    4:*/		return 0x82239BF4;
		  /* 82239BF4h */ case    5:  		/* lwz R10, <#[R31 + 12]> */
		/* 82239BF4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82239BF4h case    5:*/		return 0x82239BF8;
		  /* 82239BF8h */ case    6:  		/* li R4, 0 */
		/* 82239BF8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239BF8h case    6:*/		return 0x82239BFC;
		  /* 82239BFCh */ case    7:  		/* mr R28, R3 */
		/* 82239BFCh case    7:*/		regs.R28 = regs.R3;
		/* 82239BFCh case    7:*/		return 0x82239C00;
		  /* 82239C00h */ case    8:  		/* lwz R11, <#[R10 + 1508]> */
		/* 82239C00h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 82239C00h case    8:*/		return 0x82239C04;
		  /* 82239C04h */ case    9:  		/* addi R5, R11, -1 */
		/* 82239C04h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 82239C04h case    9:*/		return 0x82239C08;
		  /* 82239C08h */ case   10:  		/* stw R5, <#[R10 + 1508]> */
		/* 82239C08h case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 82239C08h case   10:*/		return 0x82239C0C;
		  /* 82239C0Ch */ case   11:  		/* lwz R3, <#[R31 + 172]> */
		/* 82239C0Ch case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 82239C0Ch case   11:*/		return 0x82239C10;
		  /* 82239C10h */ case   12:  		/* bl 48128 */
		/* 82239C10h case   12:*/		regs.LR = 0x82239C14; return 0x82245810;
		/* 82239C10h case   12:*/		return 0x82239C14;
		  /* 82239C14h */ case   13:  		/* lwz R10, <#[R31 + 12]> */
		/* 82239C14h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82239C14h case   13:*/		return 0x82239C18;
		  /* 82239C18h */ case   14:  		/* lwz R11, <#[R10 + 1508]> */
		/* 82239C18h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 82239C18h case   14:*/		return 0x82239C1C;
		  /* 82239C1Ch */ case   15:  		/* li R4, 0 */
		/* 82239C1Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239C1Ch case   15:*/		return 0x82239C20;
		  /* 82239C20h */ case   16:  		/* mr R25, R3 */
		/* 82239C20h case   16:*/		regs.R25 = regs.R3;
		/* 82239C20h case   16:*/		return 0x82239C24;
		  /* 82239C24h */ case   17:  		/* addi R5, R11, -1 */
		/* 82239C24h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 82239C24h case   17:*/		return 0x82239C28;
	}
	return 0x82239C28;
} // Block from 82239BE0h-82239C28h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82239C28h
// Function '?InsertICAllocInstruction@CFG@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239C28);
		  /* 82239C28h */ case    0:  		/* stw R5, <#[R10 + 1508]> */
		/* 82239C28h case    0:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 82239C28h case    0:*/		return 0x82239C2C;
		  /* 82239C2Ch */ case    1:  		/* lwz R3, <#[R31 + 172]> */
		/* 82239C2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 82239C2Ch case    1:*/		return 0x82239C30;
		  /* 82239C30h */ case    2:  		/* bl 48096 */
		/* 82239C30h case    2:*/		regs.LR = 0x82239C34; return 0x82245810;
		/* 82239C30h case    2:*/		return 0x82239C34;
		  /* 82239C34h */ case    3:  		/* lwz R3, <#[R31 + 168]> */
		/* 82239C34h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A8) );
		/* 82239C34h case    3:*/		return 0x82239C38;
		  /* 82239C38h */ case    4:  		/* bl 129152 */
		/* 82239C38h case    4:*/		regs.LR = 0x82239C3C; return 0x822594B8;
		/* 82239C38h case    4:*/		return 0x82239C3C;
		  /* 82239C3Ch */ case    5:  		/* lis R11, -32253 */
		/* 82239C3Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82239C3Ch case    5:*/		return 0x82239C40;
		  /* 82239C40h */ case    6:  		/* lis R10, -32252 */
		/* 82239C40h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82239C40h case    6:*/		return 0x82239C44;
		  /* 82239C44h */ case    7:  		/* cmpwi CR6, R3, 1 */
		/* 82239C44h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82239C44h case    7:*/		return 0x82239C48;
		  /* 82239C48h */ case    8:  		/* addi R24, R11, 27460 */
		/* 82239C48h case    8:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x6B44);
		/* 82239C48h case    8:*/		return 0x82239C4C;
		  /* 82239C4Ch */ case    9:  		/* addi R23, R10, 8520 */
		/* 82239C4Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x2148);
		/* 82239C4Ch case    9:*/		return 0x82239C50;
		  /* 82239C50h */ case   10:  		/* bc 12, CR6_EQ, 32 */
		/* 82239C50h case   10:*/		if ( regs.CR[6].eq ) { return 0x82239C70;  }
		/* 82239C50h case   10:*/		return 0x82239C54;
		  /* 82239C54h */ case   11:  		/* lis R11, -32252 */
		/* 82239C54h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82239C54h case   11:*/		return 0x82239C58;
		  /* 82239C58h */ case   12:  		/* mr R6, R23 */
		/* 82239C58h case   12:*/		regs.R6 = regs.R23;
		/* 82239C58h case   12:*/		return 0x82239C5C;
		  /* 82239C5Ch */ case   13:  		/* addi R5, R11, 9004 */
		/* 82239C5Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x232C);
		/* 82239C5Ch case   13:*/		return 0x82239C60;
		  /* 82239C60h */ case   14:  		/* mr R4, R24 */
		/* 82239C60h case   14:*/		regs.R4 = regs.R24;
		/* 82239C60h case   14:*/		return 0x82239C64;
		  /* 82239C64h */ case   15:  		/* li R7, 1083 */
		/* 82239C64h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x43B);
		/* 82239C64h case   15:*/		return 0x82239C68;
		  /* 82239C68h */ case   16:  		/* li R3, 0 */
		/* 82239C68h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82239C68h case   16:*/		return 0x82239C6C;
		  /* 82239C6Ch */ case   17:  		/* bl -925796 */
		/* 82239C6Ch case   17:*/		regs.LR = 0x82239C70; return 0x82157C08;
		/* 82239C6Ch case   17:*/		return 0x82239C70;
	}
	return 0x82239C70;
} // Block from 82239C28h-82239C70h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82239C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239C70);
		  /* 82239C70h */ case    0:  		/* lwz R22, <#[R31 + 168]> */
		/* 82239C70h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R31 + 0x000000A8) );
		/* 82239C70h case    0:*/		return 0x82239C74;
		  /* 82239C74h */ case    1:  		/* li R9, 0 */
		/* 82239C74h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82239C74h case    1:*/		return 0x82239C78;
		  /* 82239C78h */ case    2:  		/* lwz R21, <#[R1 + 80]> */
		/* 82239C78h case    2:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x00000050) );
		/* 82239C78h case    2:*/		return 0x82239C7C;
		  /* 82239C7Ch */ case    3:  		/* li R11, 0 */
		/* 82239C7Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82239C7Ch case    3:*/		return 0x82239C80;
		  /* 82239C80h */ case    4:  		/* li R8, 1 */
		/* 82239C80h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82239C80h case    4:*/		return 0x82239C84;
		  /* 82239C84h */ case    5:  		/* lwz R10, <#[R22 + 60]> */
		/* 82239C84h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x0000003C) );
		/* 82239C84h case    5:*/		return 0x82239C88;
		  /* 82239C88h */ case    6:  		/* lwz R6, <#[R10 + 4]> */
		/* 82239C88h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 82239C88h case    6:*/		return 0x82239C8C;
		  /* 82239C8Ch */ case    7:  		/* cmplw CR6, R8, R6 */
		/* 82239C8Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R6);
		/* 82239C8Ch case    7:*/		return 0x82239C90;
		  /* 82239C90h */ case    8:  		/* bc 4, CR6_GT, 12 */
		/* 82239C90h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82239C9C;  }
		/* 82239C90h case    8:*/		return 0x82239C94;
		  /* 82239C94h */ case    9:  		/* li R7, 0 */
		/* 82239C94h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82239C94h case    9:*/		return 0x82239C98;
		  /* 82239C98h */ case   10:  		/* b 16 */
		/* 82239C98h case   10:*/		return 0x82239CA8;
		/* 82239C98h case   10:*/		return 0x82239C9C;
	}
	return 0x82239C9C;
} // Block from 82239C70h-82239C9Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82239C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239C9C);
		  /* 82239C9Ch */ case    0:  		/* lwz R9, <#[R10 + 8]> */
		/* 82239C9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 82239C9Ch case    0:*/		return 0x82239CA0;
		  /* 82239CA0h */ case    1:  		/* li R7, 1 */
		/* 82239CA0h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82239CA0h case    1:*/		return 0x82239CA4;
		  /* 82239CA4h */ case    2:  		/* lwzx R9, <#[R9 + R11]> */
		/* 82239CA4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82239CA4h case    2:*/		return 0x82239CA8;
	}
	return 0x82239CA8;
} // Block from 82239C9Ch-82239CA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82239CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239CA8);
		  /* 82239CA8h */ case    0:  		/* rlwinm. R7, R7, 0, 24, 31 */
		/* 82239CA8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R7,regs.R7);
		/* 82239CA8h case    0:*/		return 0x82239CAC;
		  /* 82239CACh */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82239CACh case    1:*/		if ( regs.CR[0].eq ) { return 0x82239CC0;  }
		/* 82239CACh case    1:*/		return 0x82239CB0;
		  /* 82239CB0h */ case    2:  		/* mr R21, R9 */
		/* 82239CB0h case    2:*/		regs.R21 = regs.R9;
		/* 82239CB0h case    2:*/		return 0x82239CB4;
		  /* 82239CB4h */ case    3:  		/* addi R8, R8, 1 */
		/* 82239CB4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82239CB4h case    3:*/		return 0x82239CB8;
		  /* 82239CB8h */ case    4:  		/* addi R11, R11, 4 */
		/* 82239CB8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82239CB8h case    4:*/		return 0x82239CBC;
		  /* 82239CBCh */ case    5:  		/* b -48 */
		/* 82239CBCh case    5:*/		return 0x82239C8C;
		/* 82239CBCh case    5:*/		return 0x82239CC0;
	}
	return 0x82239CC0;
} // Block from 82239CA8h-82239CC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82239CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239CC0);
		  /* 82239CC0h */ case    0:  		/* li R3, 135 */
		/* 82239CC0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x87);
		/* 82239CC0h case    0:*/		return 0x82239CC4;
		  /* 82239CC4h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 82239CC4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82239CC4h case    1:*/		return 0x82239CC8;
		  /* 82239CC8h */ case    2:  		/* bl 115304 */
		/* 82239CC8h case    2:*/		regs.LR = 0x82239CCC; return 0x82255F30;
		/* 82239CC8h case    2:*/		return 0x82239CCC;
		  /* 82239CCCh */ case    3:  		/* mr R5, R28 */
		/* 82239CCCh case    3:*/		regs.R5 = regs.R28;
		/* 82239CCCh case    3:*/		return 0x82239CD0;
		  /* 82239CD0h */ case    4:  		/* li R4, 1 */
		/* 82239CD0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82239CD0h case    4:*/		return 0x82239CD4;
		  /* 82239CD4h */ case    5:  		/* mr R30, R3 */
		/* 82239CD4h case    5:*/		regs.R30 = regs.R3;
		/* 82239CD4h case    5:*/		return 0x82239CD8;
		  /* 82239CD8h */ case    6:  		/* bl 116416 */
		/* 82239CD8h case    6:*/		regs.LR = 0x82239CDC; return 0x82256398;
		/* 82239CD8h case    6:*/		return 0x82239CDC;
		  /* 82239CDCh */ case    7:  		/* li R11, 4 */
		/* 82239CDCh case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82239CDCh case    7:*/		return 0x82239CE0;
		  /* 82239CE0h */ case    8:  		/* li R29, 0 */
		/* 82239CE0h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82239CE0h case    8:*/		return 0x82239CE4;
		  /* 82239CE4h */ case    9:  		/* stw R11, <#[R30 + 168]> */
		/* 82239CE4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000000A8) );
		/* 82239CE4h case    9:*/		return 0x82239CE8;
		  /* 82239CE8h */ case   10:  		/* lwz R11, <#[R30]> */
		/* 82239CE8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82239CE8h case   10:*/		return 0x82239CEC;
		  /* 82239CECh */ case   11:  		/* li R6, 1 */
		/* 82239CECh case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82239CECh case   11:*/		return 0x82239CF0;
		  /* 82239CF0h */ case   12:  		/* mr R5, R29 */
		/* 82239CF0h case   12:*/		regs.R5 = regs.R29;
		/* 82239CF0h case   12:*/		return 0x82239CF4;
		  /* 82239CF4h */ case   13:  		/* li R4, 1 */
		/* 82239CF4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82239CF4h case   13:*/		return 0x82239CF8;
		  /* 82239CF8h */ case   14:  		/* mr R3, R30 */
		/* 82239CF8h case   14:*/		regs.R3 = regs.R30;
		/* 82239CF8h case   14:*/		return 0x82239CFC;
		  /* 82239CFCh */ case   15:  		/* lwz R11, <#[R11 + 88]> */
		/* 82239CFCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82239CFCh case   15:*/		return 0x82239D00;
		  /* 82239D00h */ case   16:  		/* mtspr CTR, R11 */
		/* 82239D00h case   16:*/		regs.CTR = regs.R11;
		/* 82239D00h case   16:*/		return 0x82239D04;
		  /* 82239D04h */ case   17:  		/* bcctrl 20, CR0_LT */
		/* 82239D04h case   17:*/		if ( 1 ) { regs.LR = 0x82239D08; return (uint32)regs.CTR; }
		/* 82239D04h case   17:*/		return 0x82239D08;
		  /* 82239D08h */ case   18:  		/* addi R29, R29, 1 */
		/* 82239D08h case   18:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82239D08h case   18:*/		return 0x82239D0C;
		  /* 82239D0Ch */ case   19:  		/* cmpwi CR6, R29, 4 */
		/* 82239D0Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 82239D0Ch case   19:*/		return 0x82239D10;
		  /* 82239D10h */ case   20:  		/* bc 12, CR6_LT, -40 */
		/* 82239D10h case   20:*/		if ( regs.CR[6].lt ) { return 0x82239CE8;  }
		/* 82239D10h case   20:*/		return 0x82239D14;
		  /* 82239D14h */ case   21:  		/* mr R4, R30 */
		/* 82239D14h case   21:*/		regs.R4 = regs.R30;
		/* 82239D14h case   21:*/		return 0x82239D18;
		  /* 82239D18h */ case   22:  		/* mr R3, R31 */
		/* 82239D18h case   22:*/		regs.R3 = regs.R31;
		/* 82239D18h case   22:*/		return 0x82239D1C;
		  /* 82239D1Ch */ case   23:  		/* bl -14196 */
		/* 82239D1Ch case   23:*/		regs.LR = 0x82239D20; return 0x822365A8;
		/* 82239D1Ch case   23:*/		return 0x82239D20;
		  /* 82239D20h */ case   24:  		/* lwz R11, <#[R31 + 12]> */
		/* 82239D20h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82239D20h case   24:*/		return 0x82239D24;
		  /* 82239D24h */ case   25:  		/* li R4, 164 */
		/* 82239D24h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0xA4);
		/* 82239D24h case   25:*/		return 0x82239D28;
		  /* 82239D28h */ case   26:  		/* lwz R29, <#[R11 + 1452]> */
		/* 82239D28h case   26:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x000005AC) );
		/* 82239D28h case   26:*/		return 0x82239D2C;
		  /* 82239D2Ch */ case   27:  		/* mr R3, R29 */
		/* 82239D2Ch case   27:*/		regs.R3 = regs.R29;
		/* 82239D2Ch case   27:*/		return 0x82239D30;
		  /* 82239D30h */ case   28:  		/* bl -120952 */
		/* 82239D30h case   28:*/		regs.LR = 0x82239D34; return 0x8221C4B8;
		/* 82239D30h case   28:*/		return 0x82239D34;
		  /* 82239D34h */ case   29:  		/* mr R11, R3 */
		/* 82239D34h case   29:*/		regs.R11 = regs.R3;
		/* 82239D34h case   29:*/		return 0x82239D38;
		  /* 82239D38h */ case   30:  		/* addic. R3, R3, 4 */
		/* 82239D38h case   30:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 82239D38h case   30:*/		return 0x82239D3C;
		  /* 82239D3Ch */ case   31:  		/* stw R29, <#[R11]> */
		/* 82239D3Ch case   31:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 82239D3Ch case   31:*/		return 0x82239D40;
		  /* 82239D40h */ case   32:  		/* bc 12, CR0_EQ, 32 */
		/* 82239D40h case   32:*/		if ( regs.CR[0].eq ) { return 0x82239D60;  }
		/* 82239D40h case   32:*/		return 0x82239D44;
		  /* 82239D44h */ case   33:  		/* mr R7, R31 */
		/* 82239D44h case   33:*/		regs.R7 = regs.R31;
		/* 82239D44h case   33:*/		return 0x82239D48;
		  /* 82239D48h */ case   34:  		/* lwz R6, <#[R31 + 12]> */
		/* 82239D48h case   34:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000000C) );
		/* 82239D48h case   34:*/		return 0x82239D4C;
		  /* 82239D4Ch */ case   35:  		/* li R5, 0 */
		/* 82239D4Ch case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82239D4Ch case   35:*/		return 0x82239D50;
		  /* 82239D50h */ case   36:  		/* mr R4, R30 */
		/* 82239D50h case   36:*/		regs.R4 = regs.R30;
		/* 82239D50h case   36:*/		return 0x82239D54;
		  /* 82239D54h */ case   37:  		/* bl 131628 */
		/* 82239D54h case   37:*/		regs.LR = 0x82239D58; return 0x82259F80;
		/* 82239D54h case   37:*/		return 0x82239D58;
		  /* 82239D58h */ case   38:  		/* mr R29, R3 */
		/* 82239D58h case   38:*/		regs.R29 = regs.R3;
		/* 82239D58h case   38:*/		return 0x82239D5C;
		  /* 82239D5Ch */ case   39:  		/* b 8 */
		/* 82239D5Ch case   39:*/		return 0x82239D64;
		/* 82239D5Ch case   39:*/		return 0x82239D60;
	}
	return 0x82239D60;
} // Block from 82239CC0h-82239D60h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82239D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239D60);
		  /* 82239D60h */ case    0:  		/* li R29, 0 */
		/* 82239D60h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82239D60h case    0:*/		return 0x82239D64;
	}
	return 0x82239D64;
} // Block from 82239D60h-82239D64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82239D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239D64);
		  /* 82239D64h */ case    0:  		/* mr R3, R30 */
		/* 82239D64h case    0:*/		regs.R3 = regs.R30;
		/* 82239D64h case    0:*/		return 0x82239D68;
		  /* 82239D68h */ case    1:  		/* bl 115288 */
		/* 82239D68h case    1:*/		regs.LR = 0x82239D6C; return 0x82255FC0;
		/* 82239D68h case    1:*/		return 0x82239D6C;
		  /* 82239D6Ch */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82239D6Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82239D6Ch case    2:*/		return 0x82239D70;
		  /* 82239D70h */ case    3:  		/* bc 4, CR0_EQ, 32 */
		/* 82239D70h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82239D90;  }
		/* 82239D70h case    3:*/		return 0x82239D74;
		  /* 82239D74h */ case    4:  		/* lis R11, -32252 */
		/* 82239D74h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82239D74h case    4:*/		return 0x82239D78;
		  /* 82239D78h */ case    5:  		/* mr R6, R23 */
		/* 82239D78h case    5:*/		regs.R6 = regs.R23;
		/* 82239D78h case    5:*/		return 0x82239D7C;
		  /* 82239D7Ch */ case    6:  		/* addi R5, R11, 9348 */
		/* 82239D7Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2484);
		/* 82239D7Ch case    6:*/		return 0x82239D80;
		  /* 82239D80h */ case    7:  		/* mr R4, R24 */
		/* 82239D80h case    7:*/		regs.R4 = regs.R24;
		/* 82239D80h case    7:*/		return 0x82239D84;
		  /* 82239D84h */ case    8:  		/* li R7, 1100 */
		/* 82239D84h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x44C);
		/* 82239D84h case    8:*/		return 0x82239D88;
		  /* 82239D88h */ case    9:  		/* li R3, 0 */
		/* 82239D88h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82239D88h case    9:*/		return 0x82239D8C;
		  /* 82239D8Ch */ case   10:  		/* bl -926084 */
		/* 82239D8Ch case   10:*/		regs.LR = 0x82239D90; return 0x82157C08;
		/* 82239D8Ch case   10:*/		return 0x82239D90;
	}
	return 0x82239D90;
} // Block from 82239D64h-82239D90h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82239D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239D90);
		  /* 82239D90h */ case    0:  		/* li R3, 105 */
		/* 82239D90h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x69);
		/* 82239D90h case    0:*/		return 0x82239D94;
		  /* 82239D94h */ case    1:  		/* lwz R27, <#[R29 + 144]> */
		/* 82239D94h case    1:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R29 + 0x00000090) );
		/* 82239D94h case    1:*/		return 0x82239D98;
		  /* 82239D98h */ case    2:  		/* lwz R4, <#[R31 + 12]> */
		/* 82239D98h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82239D98h case    2:*/		return 0x82239D9C;
		  /* 82239D9Ch */ case    3:  		/* bl 115092 */
		/* 82239D9Ch case    3:*/		regs.LR = 0x82239DA0; return 0x82255F30;
		/* 82239D9Ch case    3:*/		return 0x82239DA0;
		  /* 82239DA0h */ case    4:  		/* mr R5, R25 */
		/* 82239DA0h case    4:*/		regs.R5 = regs.R25;
		/* 82239DA0h case    4:*/		return 0x82239DA4;
		  /* 82239DA4h */ case    5:  		/* li R4, 0 */
		/* 82239DA4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239DA4h case    5:*/		return 0x82239DA8;
		  /* 82239DA8h */ case    6:  		/* mr R30, R3 */
		/* 82239DA8h case    6:*/		regs.R30 = regs.R3;
		/* 82239DA8h case    6:*/		return 0x82239DAC;
		  /* 82239DACh */ case    7:  		/* bl 116204 */
		/* 82239DACh case    7:*/		regs.LR = 0x82239DB0; return 0x82256398;
		/* 82239DACh case    7:*/		return 0x82239DB0;
		  /* 82239DB0h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 82239DB0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82239DB0h case    8:*/		return 0x82239DB4;
		  /* 82239DB4h */ case    9:  		/* mr R3, R30 */
		/* 82239DB4h case    9:*/		regs.R3 = regs.R30;
		/* 82239DB4h case    9:*/		return 0x82239DB8;
		  /* 82239DB8h */ case   10:  		/* li R6, 4 */
		/* 82239DB8h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82239DB8h case   10:*/		return 0x82239DBC;
		  /* 82239DBCh */ case   11:  		/* li R5, 0 */
		/* 82239DBCh case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82239DBCh case   11:*/		return 0x82239DC0;
		  /* 82239DC0h */ case   12:  		/* li R4, 0 */
		/* 82239DC0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239DC0h case   12:*/		return 0x82239DC4;
		  /* 82239DC4h */ case   13:  		/* lwz R11, <#[R11 + 84]> */
		/* 82239DC4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82239DC4h case   13:*/		return 0x82239DC8;
		  /* 82239DC8h */ case   14:  		/* mtspr CTR, R11 */
		/* 82239DC8h case   14:*/		regs.CTR = regs.R11;
		/* 82239DC8h case   14:*/		return 0x82239DCC;
		  /* 82239DCCh */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 82239DCCh case   15:*/		if ( 1 ) { regs.LR = 0x82239DD0; return (uint32)regs.CTR; }
		/* 82239DCCh case   15:*/		return 0x82239DD0;
		  /* 82239DD0h */ case   16:  		/* lwz R11, <#[R30]> */
		/* 82239DD0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82239DD0h case   16:*/		return 0x82239DD4;
		  /* 82239DD4h */ case   17:  		/* mr R3, R30 */
		/* 82239DD4h case   17:*/		regs.R3 = regs.R30;
		/* 82239DD4h case   17:*/		return 0x82239DD8;
		  /* 82239DD8h */ case   18:  		/* li R6, 4 */
		/* 82239DD8h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82239DD8h case   18:*/		return 0x82239DDC;
		  /* 82239DDCh */ case   19:  		/* li R5, 1 */
		/* 82239DDCh case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82239DDCh case   19:*/		return 0x82239DE0;
		  /* 82239DE0h */ case   20:  		/* li R4, 0 */
		/* 82239DE0h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239DE0h case   20:*/		return 0x82239DE4;
		  /* 82239DE4h */ case   21:  		/* lwz R11, <#[R11 + 84]> */
		/* 82239DE4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82239DE4h case   21:*/		return 0x82239DE8;
		  /* 82239DE8h */ case   22:  		/* mtspr CTR, R11 */
		/* 82239DE8h case   22:*/		regs.CTR = regs.R11;
		/* 82239DE8h case   22:*/		return 0x82239DEC;
		  /* 82239DECh */ case   23:  		/* bcctrl 20, CR0_LT */
		/* 82239DECh case   23:*/		if ( 1 ) { regs.LR = 0x82239DF0; return (uint32)regs.CTR; }
		/* 82239DECh case   23:*/		return 0x82239DF0;
		  /* 82239DF0h */ case   24:  		/* lwz R11, <#[R30]> */
		/* 82239DF0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82239DF0h case   24:*/		return 0x82239DF4;
		  /* 82239DF4h */ case   25:  		/* mr R3, R30 */
		/* 82239DF4h case   25:*/		regs.R3 = regs.R30;
		/* 82239DF4h case   25:*/		return 0x82239DF8;
		  /* 82239DF8h */ case   26:  		/* li R6, 4 */
		/* 82239DF8h case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82239DF8h case   26:*/		return 0x82239DFC;
		  /* 82239DFCh */ case   27:  		/* li R5, 2 */
		/* 82239DFCh case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82239DFCh case   27:*/		return 0x82239E00;
		  /* 82239E00h */ case   28:  		/* li R4, 0 */
		/* 82239E00h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239E00h case   28:*/		return 0x82239E04;
		  /* 82239E04h */ case   29:  		/* lwz R11, <#[R11 + 84]> */
		/* 82239E04h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82239E04h case   29:*/		return 0x82239E08;
		  /* 82239E08h */ case   30:  		/* mtspr CTR, R11 */
		/* 82239E08h case   30:*/		regs.CTR = regs.R11;
		/* 82239E08h case   30:*/		return 0x82239E0C;
		  /* 82239E0Ch */ case   31:  		/* bcctrl 20, CR0_LT */
		/* 82239E0Ch case   31:*/		if ( 1 ) { regs.LR = 0x82239E10; return (uint32)regs.CTR; }
		/* 82239E0Ch case   31:*/		return 0x82239E10;
		  /* 82239E10h */ case   32:  		/* lwz R11, <#[R30]> */
		/* 82239E10h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82239E10h case   32:*/		return 0x82239E14;
		  /* 82239E14h */ case   33:  		/* mr R3, R30 */
		/* 82239E14h case   33:*/		regs.R3 = regs.R30;
		/* 82239E14h case   33:*/		return 0x82239E18;
		  /* 82239E18h */ case   34:  		/* li R6, 4 */
		/* 82239E18h case   34:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82239E18h case   34:*/		return 0x82239E1C;
		  /* 82239E1Ch */ case   35:  		/* li R5, 3 */
		/* 82239E1Ch case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82239E1Ch case   35:*/		return 0x82239E20;
		  /* 82239E20h */ case   36:  		/* li R4, 0 */
		/* 82239E20h case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239E20h case   36:*/		return 0x82239E24;
		  /* 82239E24h */ case   37:  		/* lwz R11, <#[R11 + 84]> */
		/* 82239E24h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82239E24h case   37:*/		return 0x82239E28;
		  /* 82239E28h */ case   38:  		/* mtspr CTR, R11 */
		/* 82239E28h case   38:*/		regs.CTR = regs.R11;
		/* 82239E28h case   38:*/		return 0x82239E2C;
		  /* 82239E2Ch */ case   39:  		/* bcctrl 20, CR0_LT */
		/* 82239E2Ch case   39:*/		if ( 1 ) { regs.LR = 0x82239E30; return (uint32)regs.CTR; }
		/* 82239E2Ch case   39:*/		return 0x82239E30;
		  /* 82239E30h */ case   40:  		/* mr R3, R30 */
		/* 82239E30h case   40:*/		regs.R3 = regs.R30;
		/* 82239E30h case   40:*/		return 0x82239E34;
		  /* 82239E34h */ case   41:  		/* mr R5, R28 */
		/* 82239E34h case   41:*/		regs.R5 = regs.R28;
		/* 82239E34h case   41:*/		return 0x82239E38;
		  /* 82239E38h */ case   42:  		/* li R4, 1 */
		/* 82239E38h case   42:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82239E38h case   42:*/		return 0x82239E3C;
		  /* 82239E3Ch */ case   43:  		/* bl 116060 */
		/* 82239E3Ch case   43:*/		regs.LR = 0x82239E40; return 0x82256398;
		/* 82239E3Ch case   43:*/		return 0x82239E40;
		  /* 82239E40h */ case   44:  		/* lwz R11, <#[R30]> */
		/* 82239E40h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82239E40h case   44:*/		return 0x82239E44;
		  /* 82239E44h */ case   45:  		/* mr R3, R30 */
		/* 82239E44h case   45:*/		regs.R3 = regs.R30;
		/* 82239E44h case   45:*/		return 0x82239E48;
		  /* 82239E48h */ case   46:  		/* li R6, 2 */
		/* 82239E48h case   46:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82239E48h case   46:*/		return 0x82239E4C;
		  /* 82239E4Ch */ case   47:  		/* li R5, 0 */
		/* 82239E4Ch case   47:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82239E4Ch case   47:*/		return 0x82239E50;
		  /* 82239E50h */ case   48:  		/* li R4, 1 */
		/* 82239E50h case   48:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82239E50h case   48:*/		return 0x82239E54;
		  /* 82239E54h */ case   49:  		/* lwz R11, <#[R11 + 88]> */
		/* 82239E54h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82239E54h case   49:*/		return 0x82239E58;
		  /* 82239E58h */ case   50:  		/* mtspr CTR, R11 */
		/* 82239E58h case   50:*/		regs.CTR = regs.R11;
		/* 82239E58h case   50:*/		return 0x82239E5C;
		  /* 82239E5Ch */ case   51:  		/* bcctrl 20, CR0_LT */
		/* 82239E5Ch case   51:*/		if ( 1 ) { regs.LR = 0x82239E60; return (uint32)regs.CTR; }
		/* 82239E5Ch case   51:*/		return 0x82239E60;
		  /* 82239E60h */ case   52:  		/* lwz R11, <#[R30]> */
		/* 82239E60h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82239E60h case   52:*/		return 0x82239E64;
		  /* 82239E64h */ case   53:  		/* mr R3, R30 */
		/* 82239E64h case   53:*/		regs.R3 = regs.R30;
		/* 82239E64h case   53:*/		return 0x82239E68;
		  /* 82239E68h */ case   54:  		/* li R6, 3 */
		/* 82239E68h case   54:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82239E68h case   54:*/		return 0x82239E6C;
		  /* 82239E6Ch */ case   55:  		/* li R5, 1 */
		/* 82239E6Ch case   55:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82239E6Ch case   55:*/		return 0x82239E70;
		  /* 82239E70h */ case   56:  		/* li R4, 1 */
		/* 82239E70h case   56:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82239E70h case   56:*/		return 0x82239E74;
		  /* 82239E74h */ case   57:  		/* lwz R11, <#[R11 + 88]> */
		/* 82239E74h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82239E74h case   57:*/		return 0x82239E78;
		  /* 82239E78h */ case   58:  		/* mtspr CTR, R11 */
		/* 82239E78h case   58:*/		regs.CTR = regs.R11;
		/* 82239E78h case   58:*/		return 0x82239E7C;
		  /* 82239E7Ch */ case   59:  		/* bcctrl 20, CR0_LT */
		/* 82239E7Ch case   59:*/		if ( 1 ) { regs.LR = 0x82239E80; return (uint32)regs.CTR; }
		/* 82239E7Ch case   59:*/		return 0x82239E80;
		  /* 82239E80h */ case   60:  		/* lwz R3, <#[R31 + 12]> */
		/* 82239E80h case   60:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 82239E80h case   60:*/		return 0x82239E84;
		  /* 82239E84h */ case   61:  		/* bl -121604 */
		/* 82239E84h case   61:*/		regs.LR = 0x82239E88; return 0x8221C380;
		/* 82239E84h case   61:*/		return 0x82239E88;
		  /* 82239E88h */ case   62:  		/* stw R3, <#[R30 + 172]> */
		/* 82239E88h case   62:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x000000AC) );
		/* 82239E88h case   62:*/		return 0x82239E8C;
		  /* 82239E8Ch */ case   63:  		/* mr R4, R30 */
		/* 82239E8Ch case   63:*/		regs.R4 = regs.R30;
		/* 82239E8Ch case   63:*/		return 0x82239E90;
		  /* 82239E90h */ case   64:  		/* mr R3, R31 */
		/* 82239E90h case   64:*/		regs.R3 = regs.R31;
		/* 82239E90h case   64:*/		return 0x82239E94;
		  /* 82239E94h */ case   65:  		/* bl -14572 */
		/* 82239E94h case   65:*/		regs.LR = 0x82239E98; return 0x822365A8;
		/* 82239E94h case   65:*/		return 0x82239E98;
		  /* 82239E98h */ case   66:  		/* mr R4, R30 */
		/* 82239E98h case   66:*/		regs.R4 = regs.R30;
		/* 82239E98h case   66:*/		return 0x82239E9C;
		  /* 82239E9Ch */ case   67:  		/* mr R3, R27 */
		/* 82239E9Ch case   67:*/		regs.R3 = regs.R27;
		/* 82239E9Ch case   67:*/		return 0x82239EA0;
		  /* 82239EA0h */ case   68:  		/* bl 127120 */
		/* 82239EA0h case   68:*/		regs.LR = 0x82239EA4; return 0x82258F30;
		/* 82239EA0h case   68:*/		return 0x82239EA4;
		  /* 82239EA4h */ case   69:  		/* mr R3, R30 */
		/* 82239EA4h case   69:*/		regs.R3 = regs.R30;
		/* 82239EA4h case   69:*/		return 0x82239EA8;
		  /* 82239EA8h */ case   70:  		/* bl 114968 */
		/* 82239EA8h case   70:*/		regs.LR = 0x82239EAC; return 0x82255FC0;
		/* 82239EA8h case   70:*/		return 0x82239EAC;
		  /* 82239EACh */ case   71:  		/* lis R11, -32252 */
		/* 82239EACh case   71:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82239EACh case   71:*/		return 0x82239EB0;
		  /* 82239EB0h */ case   72:  		/* rlwinm. R10, R3, 0, 24, 31 */
		/* 82239EB0h case   72:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R3);
		/* 82239EB0h case   72:*/		return 0x82239EB4;
		  /* 82239EB4h */ case   73:  		/* addi R26, R11, 9328 */
		/* 82239EB4h case   73:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x2470);
		/* 82239EB4h case   73:*/		return 0x82239EB8;
		  /* 82239EB8h */ case   74:  		/* bc 4, CR0_EQ, 28 */
		/* 82239EB8h case   74:*/		if ( !regs.CR[0].eq ) { return 0x82239ED4;  }
		/* 82239EB8h case   74:*/		return 0x82239EBC;
		  /* 82239EBCh */ case   75:  		/* mr R6, R23 */
		/* 82239EBCh case   75:*/		regs.R6 = regs.R23;
		/* 82239EBCh case   75:*/		return 0x82239EC0;
		  /* 82239EC0h */ case   76:  		/* mr R5, R26 */
		/* 82239EC0h case   76:*/		regs.R5 = regs.R26;
		/* 82239EC0h case   76:*/		return 0x82239EC4;
		  /* 82239EC4h */ case   77:  		/* mr R4, R24 */
		/* 82239EC4h case   77:*/		regs.R4 = regs.R24;
		/* 82239EC4h case   77:*/		return 0x82239EC8;
		  /* 82239EC8h */ case   78:  		/* li R7, 1121 */
		/* 82239EC8h case   78:*/		cpu::op::li<0>(regs,&regs.R7,0x461);
		/* 82239EC8h case   78:*/		return 0x82239ECC;
		  /* 82239ECCh */ case   79:  		/* li R3, 0 */
		/* 82239ECCh case   79:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82239ECCh case   79:*/		return 0x82239ED0;
		  /* 82239ED0h */ case   80:  		/* bl -926408 */
		/* 82239ED0h case   80:*/		regs.LR = 0x82239ED4; return 0x82157C08;
		/* 82239ED0h case   80:*/		return 0x82239ED4;
	}
	return 0x82239ED4;
} // Block from 82239D90h-82239ED4h (81 instructions)

//////////////////////////////////////////////////////
// Block at 82239ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239ED4);
		  /* 82239ED4h */ case    0:  		/* li R3, 78 */
		/* 82239ED4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x4E);
		/* 82239ED4h case    0:*/		return 0x82239ED8;
		  /* 82239ED8h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 82239ED8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82239ED8h case    1:*/		return 0x82239EDC;
		  /* 82239EDCh */ case    2:  		/* bl 114772 */
		/* 82239EDCh case    2:*/		regs.LR = 0x82239EE0; return 0x82255F30;
		/* 82239EDCh case    2:*/		return 0x82239EE0;
		  /* 82239EE0h */ case    3:  		/* li R11, 2 */
		/* 82239EE0h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82239EE0h case    3:*/		return 0x82239EE4;
		  /* 82239EE4h */ case    4:  		/* li R10, 31 */
		/* 82239EE4h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1F);
		/* 82239EE4h case    4:*/		return 0x82239EE8;
		  /* 82239EE8h */ case    5:  		/* stw R11, <#[R3 + 56]> */
		/* 82239EE8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 82239EE8h case    5:*/		return 0x82239EEC;
		  /* 82239EECh */ case    6:  		/* mr R5, R25 */
		/* 82239EECh case    6:*/		regs.R5 = regs.R25;
		/* 82239EECh case    6:*/		return 0x82239EF0;
		  /* 82239EF0h */ case    7:  		/* stw R10, <#[R3 + 80]> */
		/* 82239EF0h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000050) );
		/* 82239EF0h case    7:*/		return 0x82239EF4;
		  /* 82239EF4h */ case    8:  		/* li R4, 1 */
		/* 82239EF4h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82239EF4h case    8:*/		return 0x82239EF8;
		  /* 82239EF8h */ case    9:  		/* mr R30, R3 */
		/* 82239EF8h case    9:*/		regs.R30 = regs.R3;
		/* 82239EF8h case    9:*/		return 0x82239EFC;
		  /* 82239EFCh */ case   10:  		/* bl 115868 */
		/* 82239EFCh case   10:*/		regs.LR = 0x82239F00; return 0x82256398;
		/* 82239EFCh case   10:*/		return 0x82239F00;
		  /* 82239F00h */ case   11:  		/* mr R4, R30 */
		/* 82239F00h case   11:*/		regs.R4 = regs.R30;
		/* 82239F00h case   11:*/		return 0x82239F04;
		  /* 82239F04h */ case   12:  		/* mr R3, R31 */
		/* 82239F04h case   12:*/		regs.R3 = regs.R31;
		/* 82239F04h case   12:*/		return 0x82239F08;
		  /* 82239F08h */ case   13:  		/* bl -14688 */
		/* 82239F08h case   13:*/		regs.LR = 0x82239F0C; return 0x822365A8;
		/* 82239F08h case   13:*/		return 0x82239F0C;
		  /* 82239F0Ch */ case   14:  		/* mr R4, R30 */
		/* 82239F0Ch case   14:*/		regs.R4 = regs.R30;
		/* 82239F0Ch case   14:*/		return 0x82239F10;
		  /* 82239F10h */ case   15:  		/* mr R3, R27 */
		/* 82239F10h case   15:*/		regs.R3 = regs.R27;
		/* 82239F10h case   15:*/		return 0x82239F14;
		  /* 82239F14h */ case   16:  		/* bl 127004 */
		/* 82239F14h case   16:*/		regs.LR = 0x82239F18; return 0x82258F30;
		/* 82239F14h case   16:*/		return 0x82239F18;
		  /* 82239F18h */ case   17:  		/* mr R3, R30 */
		/* 82239F18h case   17:*/		regs.R3 = regs.R30;
		/* 82239F18h case   17:*/		return 0x82239F1C;
		  /* 82239F1Ch */ case   18:  		/* bl 114852 */
		/* 82239F1Ch case   18:*/		regs.LR = 0x82239F20; return 0x82255FC0;
		/* 82239F1Ch case   18:*/		return 0x82239F20;
		  /* 82239F20h */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82239F20h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82239F20h case   19:*/		return 0x82239F24;
		  /* 82239F24h */ case   20:  		/* bc 4, CR0_EQ, 28 */
		/* 82239F24h case   20:*/		if ( !regs.CR[0].eq ) { return 0x82239F40;  }
		/* 82239F24h case   20:*/		return 0x82239F28;
		  /* 82239F28h */ case   21:  		/* mr R6, R23 */
		/* 82239F28h case   21:*/		regs.R6 = regs.R23;
		/* 82239F28h case   21:*/		return 0x82239F2C;
		  /* 82239F2Ch */ case   22:  		/* mr R5, R26 */
		/* 82239F2Ch case   22:*/		regs.R5 = regs.R26;
		/* 82239F2Ch case   22:*/		return 0x82239F30;
		  /* 82239F30h */ case   23:  		/* mr R4, R24 */
		/* 82239F30h case   23:*/		regs.R4 = regs.R24;
		/* 82239F30h case   23:*/		return 0x82239F34;
		  /* 82239F34h */ case   24:  		/* li R7, 1129 */
		/* 82239F34h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x469);
		/* 82239F34h case   24:*/		return 0x82239F38;
		  /* 82239F38h */ case   25:  		/* li R3, 0 */
		/* 82239F38h case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82239F38h case   25:*/		return 0x82239F3C;
		  /* 82239F3Ch */ case   26:  		/* bl -926516 */
		/* 82239F3Ch case   26:*/		regs.LR = 0x82239F40; return 0x82157C08;
		/* 82239F3Ch case   26:*/		return 0x82239F40;
	}
	return 0x82239F40;
} // Block from 82239ED4h-82239F40h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82239F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82239F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82239F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82239F40);
		  /* 82239F40h */ case    0:  		/* lwz R11, <#[R31 + 108]> */
		/* 82239F40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 82239F40h case    0:*/		return 0x82239F44;
		  /* 82239F44h */ case    1:  		/* li R3, 19 */
		/* 82239F44h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 82239F44h case    1:*/		return 0x82239F48;
		  /* 82239F48h */ case    2:  		/* lwz R4, <#[R31 + 12]> */
		/* 82239F48h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 82239F48h case    2:*/		return 0x82239F4C;
		  /* 82239F4Ch */ case    3:  		/* lwz R28, <#[R11 + 32]> */
		/* 82239F4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000020) );
		/* 82239F4Ch case    3:*/		return 0x82239F50;
		  /* 82239F50h */ case    4:  		/* bl 114656 */
		/* 82239F50h case    4:*/		regs.LR = 0x82239F54; return 0x82255F30;
		/* 82239F50h case    4:*/		return 0x82239F54;
		  /* 82239F54h */ case    5:  		/* mr R5, R28 */
		/* 82239F54h case    5:*/		regs.R5 = regs.R28;
		/* 82239F54h case    5:*/		return 0x82239F58;
		  /* 82239F58h */ case    6:  		/* li R4, 0 */
		/* 82239F58h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239F58h case    6:*/		return 0x82239F5C;
		  /* 82239F5Ch */ case    7:  		/* mr R30, R3 */
		/* 82239F5Ch case    7:*/		regs.R30 = regs.R3;
		/* 82239F5Ch case    7:*/		return 0x82239F60;
		  /* 82239F60h */ case    8:  		/* bl 115768 */
		/* 82239F60h case    8:*/		regs.LR = 0x82239F64; return 0x82256398;
		/* 82239F60h case    8:*/		return 0x82239F64;
		  /* 82239F64h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 82239F64h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82239F64h case    9:*/		return 0x82239F68;
		  /* 82239F68h */ case   10:  		/* mr R3, R30 */
		/* 82239F68h case   10:*/		regs.R3 = regs.R30;
		/* 82239F68h case   10:*/		return 0x82239F6C;
		  /* 82239F6Ch */ case   11:  		/* li R6, 1 */
		/* 82239F6Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82239F6Ch case   11:*/		return 0x82239F70;
		  /* 82239F70h */ case   12:  		/* li R5, 0 */
		/* 82239F70h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82239F70h case   12:*/		return 0x82239F74;
		  /* 82239F74h */ case   13:  		/* li R4, 0 */
		/* 82239F74h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239F74h case   13:*/		return 0x82239F78;
		  /* 82239F78h */ case   14:  		/* lwz R11, <#[R11 + 84]> */
		/* 82239F78h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82239F78h case   14:*/		return 0x82239F7C;
		  /* 82239F7Ch */ case   15:  		/* mtspr CTR, R11 */
		/* 82239F7Ch case   15:*/		regs.CTR = regs.R11;
		/* 82239F7Ch case   15:*/		return 0x82239F80;
		  /* 82239F80h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 82239F80h case   16:*/		if ( 1 ) { regs.LR = 0x82239F84; return (uint32)regs.CTR; }
		/* 82239F80h case   16:*/		return 0x82239F84;
		  /* 82239F84h */ case   17:  		/* lwz R11, <#[R30]> */
		/* 82239F84h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82239F84h case   17:*/		return 0x82239F88;
		  /* 82239F88h */ case   18:  		/* mr R3, R30 */
		/* 82239F88h case   18:*/		regs.R3 = regs.R30;
		/* 82239F88h case   18:*/		return 0x82239F8C;
		  /* 82239F8Ch */ case   19:  		/* li R6, 1 */
		/* 82239F8Ch case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82239F8Ch case   19:*/		return 0x82239F90;
		  /* 82239F90h */ case   20:  		/* li R5, 1 */
		/* 82239F90h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82239F90h case   20:*/		return 0x82239F94;
		  /* 82239F94h */ case   21:  		/* li R4, 0 */
		/* 82239F94h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239F94h case   21:*/		return 0x82239F98;
		  /* 82239F98h */ case   22:  		/* lwz R11, <#[R11 + 84]> */
		/* 82239F98h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82239F98h case   22:*/		return 0x82239F9C;
		  /* 82239F9Ch */ case   23:  		/* mtspr CTR, R11 */
		/* 82239F9Ch case   23:*/		regs.CTR = regs.R11;
		/* 82239F9Ch case   23:*/		return 0x82239FA0;
		  /* 82239FA0h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 82239FA0h case   24:*/		if ( 1 ) { regs.LR = 0x82239FA4; return (uint32)regs.CTR; }
		/* 82239FA0h case   24:*/		return 0x82239FA4;
		  /* 82239FA4h */ case   25:  		/* lwz R11, <#[R30]> */
		/* 82239FA4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82239FA4h case   25:*/		return 0x82239FA8;
		  /* 82239FA8h */ case   26:  		/* mr R3, R30 */
		/* 82239FA8h case   26:*/		regs.R3 = regs.R30;
		/* 82239FA8h case   26:*/		return 0x82239FAC;
		  /* 82239FACh */ case   27:  		/* li R6, 1 */
		/* 82239FACh case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82239FACh case   27:*/		return 0x82239FB0;
		  /* 82239FB0h */ case   28:  		/* li R5, 2 */
		/* 82239FB0h case   28:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82239FB0h case   28:*/		return 0x82239FB4;
		  /* 82239FB4h */ case   29:  		/* li R4, 0 */
		/* 82239FB4h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239FB4h case   29:*/		return 0x82239FB8;
		  /* 82239FB8h */ case   30:  		/* lwz R11, <#[R11 + 84]> */
		/* 82239FB8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82239FB8h case   30:*/		return 0x82239FBC;
		  /* 82239FBCh */ case   31:  		/* mtspr CTR, R11 */
		/* 82239FBCh case   31:*/		regs.CTR = regs.R11;
		/* 82239FBCh case   31:*/		return 0x82239FC0;
		  /* 82239FC0h */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 82239FC0h case   32:*/		if ( 1 ) { regs.LR = 0x82239FC4; return (uint32)regs.CTR; }
		/* 82239FC0h case   32:*/		return 0x82239FC4;
		  /* 82239FC4h */ case   33:  		/* lwz R11, <#[R30]> */
		/* 82239FC4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82239FC4h case   33:*/		return 0x82239FC8;
		  /* 82239FC8h */ case   34:  		/* mr R3, R30 */
		/* 82239FC8h case   34:*/		regs.R3 = regs.R30;
		/* 82239FC8h case   34:*/		return 0x82239FCC;
		  /* 82239FCCh */ case   35:  		/* li R6, 0 */
		/* 82239FCCh case   35:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82239FCCh case   35:*/		return 0x82239FD0;
		  /* 82239FD0h */ case   36:  		/* li R5, 3 */
		/* 82239FD0h case   36:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82239FD0h case   36:*/		return 0x82239FD4;
		  /* 82239FD4h */ case   37:  		/* li R4, 0 */
		/* 82239FD4h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82239FD4h case   37:*/		return 0x82239FD8;
		  /* 82239FD8h */ case   38:  		/* lwz R11, <#[R11 + 84]> */
		/* 82239FD8h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82239FD8h case   38:*/		return 0x82239FDC;
		  /* 82239FDCh */ case   39:  		/* mtspr CTR, R11 */
		/* 82239FDCh case   39:*/		regs.CTR = regs.R11;
		/* 82239FDCh case   39:*/		return 0x82239FE0;
		  /* 82239FE0h */ case   40:  		/* bcctrl 20, CR0_LT */
		/* 82239FE0h case   40:*/		if ( 1 ) { regs.LR = 0x82239FE4; return (uint32)regs.CTR; }
		/* 82239FE0h case   40:*/		return 0x82239FE4;
		  /* 82239FE4h */ case   41:  		/* mr R3, R30 */
		/* 82239FE4h case   41:*/		regs.R3 = regs.R30;
		/* 82239FE4h case   41:*/		return 0x82239FE8;
		  /* 82239FE8h */ case   42:  		/* mr R5, R28 */
		/* 82239FE8h case   42:*/		regs.R5 = regs.R28;
		/* 82239FE8h case   42:*/		return 0x82239FEC;
		  /* 82239FECh */ case   43:  		/* li R4, 1 */
		/* 82239FECh case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82239FECh case   43:*/		return 0x82239FF0;
		  /* 82239FF0h */ case   44:  		/* bl 115624 */
		/* 82239FF0h case   44:*/		regs.LR = 0x82239FF4; return 0x82256398;
		/* 82239FF0h case   44:*/		return 0x82239FF4;
		  /* 82239FF4h */ case   45:  		/* mr R5, R25 */
		/* 82239FF4h case   45:*/		regs.R5 = regs.R25;
		/* 82239FF4h case   45:*/		return 0x82239FF8;
		  /* 82239FF8h */ case   46:  		/* li R4, 2 */
		/* 82239FF8h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82239FF8h case   46:*/		return 0x82239FFC;
		  /* 82239FFCh */ case   47:  		/* mr R3, R30 */
		/* 82239FFCh case   47:*/		regs.R3 = regs.R30;
		/* 82239FFCh case   47:*/		return 0x8223A000;
		  /* 8223A000h */ case   48:  		/* bl 115608 */
		/* 8223A000h case   48:*/		regs.LR = 0x8223A004; return 0x82256398;
		/* 8223A000h case   48:*/		return 0x8223A004;
		  /* 8223A004h */ case   49:  		/* li R28, 0 */
		/* 8223A004h case   49:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8223A004h case   49:*/		return 0x8223A008;
		  /* 8223A008h */ case   50:  		/* lwz R11, <#[R30]> */
		/* 8223A008h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223A008h case   50:*/		return 0x8223A00C;
		  /* 8223A00Ch */ case   51:  		/* li R6, 3 */
		/* 8223A00Ch case   51:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8223A00Ch case   51:*/		return 0x8223A010;
		  /* 8223A010h */ case   52:  		/* mr R5, R28 */
		/* 8223A010h case   52:*/		regs.R5 = regs.R28;
		/* 8223A010h case   52:*/		return 0x8223A014;
		  /* 8223A014h */ case   53:  		/* li R4, 1 */
		/* 8223A014h case   53:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223A014h case   53:*/		return 0x8223A018;
		  /* 8223A018h */ case   54:  		/* mr R3, R30 */
		/* 8223A018h case   54:*/		regs.R3 = regs.R30;
		/* 8223A018h case   54:*/		return 0x8223A01C;
		  /* 8223A01Ch */ case   55:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223A01Ch case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223A01Ch case   55:*/		return 0x8223A020;
		  /* 8223A020h */ case   56:  		/* mtspr CTR, R11 */
		/* 8223A020h case   56:*/		regs.CTR = regs.R11;
		/* 8223A020h case   56:*/		return 0x8223A024;
		  /* 8223A024h */ case   57:  		/* bcctrl 20, CR0_LT */
		/* 8223A024h case   57:*/		if ( 1 ) { regs.LR = 0x8223A028; return (uint32)regs.CTR; }
		/* 8223A024h case   57:*/		return 0x8223A028;
		  /* 8223A028h */ case   58:  		/* lwz R11, <#[R30]> */
		/* 8223A028h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223A028h case   58:*/		return 0x8223A02C;
		  /* 8223A02Ch */ case   59:  		/* li R6, 3 */
		/* 8223A02Ch case   59:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8223A02Ch case   59:*/		return 0x8223A030;
		  /* 8223A030h */ case   60:  		/* mr R5, R28 */
		/* 8223A030h case   60:*/		regs.R5 = regs.R28;
		/* 8223A030h case   60:*/		return 0x8223A034;
		  /* 8223A034h */ case   61:  		/* li R4, 2 */
		/* 8223A034h case   61:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8223A034h case   61:*/		return 0x8223A038;
		  /* 8223A038h */ case   62:  		/* mr R3, R30 */
		/* 8223A038h case   62:*/		regs.R3 = regs.R30;
		/* 8223A038h case   62:*/		return 0x8223A03C;
		  /* 8223A03Ch */ case   63:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223A03Ch case   63:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223A03Ch case   63:*/		return 0x8223A040;
		  /* 8223A040h */ case   64:  		/* mtspr CTR, R11 */
		/* 8223A040h case   64:*/		regs.CTR = regs.R11;
		/* 8223A040h case   64:*/		return 0x8223A044;
		  /* 8223A044h */ case   65:  		/* bcctrl 20, CR0_LT */
		/* 8223A044h case   65:*/		if ( 1 ) { regs.LR = 0x8223A048; return (uint32)regs.CTR; }
		/* 8223A044h case   65:*/		return 0x8223A048;
		  /* 8223A048h */ case   66:  		/* addi R28, R28, 1 */
		/* 8223A048h case   66:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8223A048h case   66:*/		return 0x8223A04C;
		  /* 8223A04Ch */ case   67:  		/* cmpwi CR6, R28, 4 */
		/* 8223A04Ch case   67:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000004);
		/* 8223A04Ch case   67:*/		return 0x8223A050;
		  /* 8223A050h */ case   68:  		/* bc 12, CR6_LT, -72 */
		/* 8223A050h case   68:*/		if ( regs.CR[6].lt ) { return 0x8223A008;  }
		/* 8223A050h case   68:*/		return 0x8223A054;
		  /* 8223A054h */ case   69:  		/* mr R4, R30 */
		/* 8223A054h case   69:*/		regs.R4 = regs.R30;
		/* 8223A054h case   69:*/		return 0x8223A058;
		  /* 8223A058h */ case   70:  		/* mr R3, R31 */
		/* 8223A058h case   70:*/		regs.R3 = regs.R31;
		/* 8223A058h case   70:*/		return 0x8223A05C;
		  /* 8223A05Ch */ case   71:  		/* bl -15028 */
		/* 8223A05Ch case   71:*/		regs.LR = 0x8223A060; return 0x822365A8;
		/* 8223A05Ch case   71:*/		return 0x8223A060;
		  /* 8223A060h */ case   72:  		/* mr R4, R30 */
		/* 8223A060h case   72:*/		regs.R4 = regs.R30;
		/* 8223A060h case   72:*/		return 0x8223A064;
		  /* 8223A064h */ case   73:  		/* mr R3, R27 */
		/* 8223A064h case   73:*/		regs.R3 = regs.R27;
		/* 8223A064h case   73:*/		return 0x8223A068;
		  /* 8223A068h */ case   74:  		/* bl 126664 */
		/* 8223A068h case   74:*/		regs.LR = 0x8223A06C; return 0x82258F30;
		/* 8223A068h case   74:*/		return 0x8223A06C;
		  /* 8223A06Ch */ case   75:  		/* mr R3, R30 */
		/* 8223A06Ch case   75:*/		regs.R3 = regs.R30;
		/* 8223A06Ch case   75:*/		return 0x8223A070;
		  /* 8223A070h */ case   76:  		/* bl 114512 */
		/* 8223A070h case   76:*/		regs.LR = 0x8223A074; return 0x82255FC0;
		/* 8223A070h case   76:*/		return 0x8223A074;
		  /* 8223A074h */ case   77:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223A074h case   77:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223A074h case   77:*/		return 0x8223A078;
		  /* 8223A078h */ case   78:  		/* bc 4, CR0_EQ, 28 */
		/* 8223A078h case   78:*/		if ( !regs.CR[0].eq ) { return 0x8223A094;  }
		/* 8223A078h case   78:*/		return 0x8223A07C;
		  /* 8223A07Ch */ case   79:  		/* mr R6, R23 */
		/* 8223A07Ch case   79:*/		regs.R6 = regs.R23;
		/* 8223A07Ch case   79:*/		return 0x8223A080;
		  /* 8223A080h */ case   80:  		/* mr R5, R26 */
		/* 8223A080h case   80:*/		regs.R5 = regs.R26;
		/* 8223A080h case   80:*/		return 0x8223A084;
		  /* 8223A084h */ case   81:  		/* mr R4, R24 */
		/* 8223A084h case   81:*/		regs.R4 = regs.R24;
		/* 8223A084h case   81:*/		return 0x8223A088;
		  /* 8223A088h */ case   82:  		/* li R7, 1151 */
		/* 8223A088h case   82:*/		cpu::op::li<0>(regs,&regs.R7,0x47F);
		/* 8223A088h case   82:*/		return 0x8223A08C;
		  /* 8223A08Ch */ case   83:  		/* li R3, 0 */
		/* 8223A08Ch case   83:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A08Ch case   83:*/		return 0x8223A090;
		  /* 8223A090h */ case   84:  		/* bl -926856 */
		/* 8223A090h case   84:*/		regs.LR = 0x8223A094; return 0x82157C08;
		/* 8223A090h case   84:*/		return 0x8223A094;
	}
	return 0x8223A094;
} // Block from 82239F40h-8223A094h (85 instructions)

//////////////////////////////////////////////////////
// Block at 8223A094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A094);
		  /* 8223A094h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223A094h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A094h case    0:*/		return 0x8223A098;
		  /* 8223A098h */ case    1:  		/* li R4, 140 */
		/* 8223A098h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8C);
		/* 8223A098h case    1:*/		return 0x8223A09C;
		  /* 8223A09Ch */ case    2:  		/* lwz R30, <#[R11 + 1452]> */
		/* 8223A09Ch case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x000005AC) );
		/* 8223A09Ch case    2:*/		return 0x8223A0A0;
	}
	return 0x8223A0A0;
} // Block from 8223A094h-8223A0A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223A0A0h
// Function '??0CFG@XGRAPHICS@@QAA@AAVLinkageInfo@1@PAUCompAState@1@PAVCompiler@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A0A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A0A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A0A0);
		  /* 8223A0A0h */ case    0:  		/* mr R3, R30 */
		/* 8223A0A0h case    0:*/		regs.R3 = regs.R30;
		/* 8223A0A0h case    0:*/		return 0x8223A0A4;
		  /* 8223A0A4h */ case    1:  		/* bl -121836 */
		/* 8223A0A4h case    1:*/		regs.LR = 0x8223A0A8; return 0x8221C4B8;
		/* 8223A0A4h case    1:*/		return 0x8223A0A8;
		  /* 8223A0A8h */ case    2:  		/* mr R11, R3 */
		/* 8223A0A8h case    2:*/		regs.R11 = regs.R3;
		/* 8223A0A8h case    2:*/		return 0x8223A0AC;
		  /* 8223A0ACh */ case    3:  		/* addic. R3, R3, 4 */
		/* 8223A0ACh case    3:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 8223A0ACh case    3:*/		return 0x8223A0B0;
		  /* 8223A0B0h */ case    4:  		/* stw R30, <#[R11]> */
		/* 8223A0B0h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8223A0B0h case    4:*/		return 0x8223A0B4;
		  /* 8223A0B4h */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 8223A0B4h case    5:*/		if ( regs.CR[0].eq ) { return 0x8223A0C8;  }
		/* 8223A0B4h case    5:*/		return 0x8223A0B8;
		  /* 8223A0B8h */ case    6:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223A0B8h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A0B8h case    6:*/		return 0x8223A0BC;
		  /* 8223A0BCh */ case    7:  		/* bl 127124 */
		/* 8223A0BCh case    7:*/		regs.LR = 0x8223A0C0; return 0x82259150;
		/* 8223A0BCh case    7:*/		return 0x8223A0C0;
		  /* 8223A0C0h */ case    8:  		/* mr R30, R3 */
		/* 8223A0C0h case    8:*/		regs.R30 = regs.R3;
		/* 8223A0C0h case    8:*/		return 0x8223A0C4;
		  /* 8223A0C4h */ case    9:  		/* b 8 */
		/* 8223A0C4h case    9:*/		return 0x8223A0CC;
		/* 8223A0C4h case    9:*/		return 0x8223A0C8;
	}
	return 0x8223A0C8;
} // Block from 8223A0A0h-8223A0C8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223A0C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A0C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A0C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A0C8);
		  /* 8223A0C8h */ case    0:  		/* li R30, 0 */
		/* 8223A0C8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223A0C8h case    0:*/		return 0x8223A0CC;
	}
	return 0x8223A0CC;
} // Block from 8223A0C8h-8223A0CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223A0CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A0CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A0CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A0CC);
		  /* 8223A0CCh */ case    0:  		/* stw R30, <#[R29 + 148]> */
		/* 8223A0CCh case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000094) );
		/* 8223A0CCh case    0:*/		return 0x8223A0D0;
		  /* 8223A0D0h */ case    1:  		/* mr R4, R30 */
		/* 8223A0D0h case    1:*/		regs.R4 = regs.R30;
		/* 8223A0D0h case    1:*/		return 0x8223A0D4;
		  /* 8223A0D4h */ case    2:  		/* mr R3, R29 */
		/* 8223A0D4h case    2:*/		regs.R3 = regs.R29;
		/* 8223A0D4h case    2:*/		return 0x8223A0D8;
		  /* 8223A0D8h */ case    3:  		/* bl 129016 */
		/* 8223A0D8h case    3:*/		regs.LR = 0x8223A0DC; return 0x822598D0;
		/* 8223A0D8h case    3:*/		return 0x8223A0DC;
		  /* 8223A0DCh */ case    4:  		/* mr R3, R27 */
		/* 8223A0DCh case    4:*/		regs.R3 = regs.R27;
		/* 8223A0DCh case    4:*/		return 0x8223A0E0;
		  /* 8223A0E0h */ case    5:  		/* lwz R28, <#[R29 + 152]> */
		/* 8223A0E0h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000098) );
		/* 8223A0E0h case    5:*/		return 0x8223A0E4;
		  /* 8223A0E4h */ case    6:  		/* mr R4, R28 */
		/* 8223A0E4h case    6:*/		regs.R4 = regs.R28;
		/* 8223A0E4h case    6:*/		return 0x8223A0E8;
		  /* 8223A0E8h */ case    7:  		/* bl 129000 */
		/* 8223A0E8h case    7:*/		regs.LR = 0x8223A0EC; return 0x822598D0;
		/* 8223A0E8h case    7:*/		return 0x8223A0EC;
		  /* 8223A0ECh */ case    8:  		/* mr R4, R28 */
		/* 8223A0ECh case    8:*/		regs.R4 = regs.R28;
		/* 8223A0ECh case    8:*/		return 0x8223A0F0;
		  /* 8223A0F0h */ case    9:  		/* mr R3, R30 */
		/* 8223A0F0h case    9:*/		regs.R3 = regs.R30;
		/* 8223A0F0h case    9:*/		return 0x8223A0F4;
		  /* 8223A0F4h */ case   10:  		/* bl 128988 */
		/* 8223A0F4h case   10:*/		regs.LR = 0x8223A0F8; return 0x822598D0;
		/* 8223A0F4h case   10:*/		return 0x8223A0F8;
		  /* 8223A0F8h */ case   11:  		/* mr R6, R28 */
		/* 8223A0F8h case   11:*/		regs.R6 = regs.R28;
		/* 8223A0F8h case   11:*/		return 0x8223A0FC;
		  /* 8223A0FCh */ case   12:  		/* mr R5, R29 */
		/* 8223A0FCh case   12:*/		regs.R5 = regs.R29;
		/* 8223A0FCh case   12:*/		return 0x8223A100;
		  /* 8223A100h */ case   13:  		/* mr R4, R22 */
		/* 8223A100h case   13:*/		regs.R4 = regs.R22;
		/* 8223A100h case   13:*/		return 0x8223A104;
		  /* 8223A104h */ case   14:  		/* mr R3, R21 */
		/* 8223A104h case   14:*/		regs.R3 = regs.R21;
		/* 8223A104h case   14:*/		return 0x8223A108;
		  /* 8223A108h */ case   15:  		/* bl 130304 */
		/* 8223A108h case   15:*/		regs.LR = 0x8223A10C; return 0x82259E08;
		/* 8223A108h case   15:*/		return 0x8223A10C;
		  /* 8223A10Ch */ case   16:  		/* mr R5, R29 */
		/* 8223A10Ch case   16:*/		regs.R5 = regs.R29;
		/* 8223A10Ch case   16:*/		return 0x8223A110;
		  /* 8223A110h */ case   17:  		/* mr R4, R21 */
		/* 8223A110h case   17:*/		regs.R4 = regs.R21;
		/* 8223A110h case   17:*/		return 0x8223A114;
		  /* 8223A114h */ case   18:  		/* mr R3, R31 */
		/* 8223A114h case   18:*/		regs.R3 = regs.R31;
		/* 8223A114h case   18:*/		return 0x8223A118;
		  /* 8223A118h */ case   19:  		/* bl -17600 */
		/* 8223A118h case   19:*/		regs.LR = 0x8223A11C; return 0x82235C58;
		/* 8223A118h case   19:*/		return 0x8223A11C;
		  /* 8223A11Ch */ case   20:  		/* mr R5, R27 */
		/* 8223A11Ch case   20:*/		regs.R5 = regs.R27;
		/* 8223A11Ch case   20:*/		return 0x8223A120;
		  /* 8223A120h */ case   21:  		/* mr R4, R29 */
		/* 8223A120h case   21:*/		regs.R4 = regs.R29;
		/* 8223A120h case   21:*/		return 0x8223A124;
		  /* 8223A124h */ case   22:  		/* mr R3, R31 */
		/* 8223A124h case   22:*/		regs.R3 = regs.R31;
		/* 8223A124h case   22:*/		return 0x8223A128;
		  /* 8223A128h */ case   23:  		/* bl -17616 */
		/* 8223A128h case   23:*/		regs.LR = 0x8223A12C; return 0x82235C58;
		/* 8223A128h case   23:*/		return 0x8223A12C;
		  /* 8223A12Ch */ case   24:  		/* mr R5, R30 */
		/* 8223A12Ch case   24:*/		regs.R5 = regs.R30;
		/* 8223A12Ch case   24:*/		return 0x8223A130;
		  /* 8223A130h */ case   25:  		/* mr R4, R27 */
		/* 8223A130h case   25:*/		regs.R4 = regs.R27;
		/* 8223A130h case   25:*/		return 0x8223A134;
		  /* 8223A134h */ case   26:  		/* mr R3, R31 */
		/* 8223A134h case   26:*/		regs.R3 = regs.R31;
		/* 8223A134h case   26:*/		return 0x8223A138;
		  /* 8223A138h */ case   27:  		/* bl -17632 */
		/* 8223A138h case   27:*/		regs.LR = 0x8223A13C; return 0x82235C58;
		/* 8223A138h case   27:*/		return 0x8223A13C;
		  /* 8223A13Ch */ case   28:  		/* mr R5, R28 */
		/* 8223A13Ch case   28:*/		regs.R5 = regs.R28;
		/* 8223A13Ch case   28:*/		return 0x8223A140;
		  /* 8223A140h */ case   29:  		/* mr R4, R30 */
		/* 8223A140h case   29:*/		regs.R4 = regs.R30;
		/* 8223A140h case   29:*/		return 0x8223A144;
		  /* 8223A144h */ case   30:  		/* mr R3, R31 */
		/* 8223A144h case   30:*/		regs.R3 = regs.R31;
		/* 8223A144h case   30:*/		return 0x8223A148;
		  /* 8223A148h */ case   31:  		/* bl -17648 */
		/* 8223A148h case   31:*/		regs.LR = 0x8223A14C; return 0x82235C58;
		/* 8223A148h case   31:*/		return 0x8223A14C;
		  /* 8223A14Ch */ case   32:  		/* addi R1, R1, 192 */
		/* 8223A14Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8223A14Ch case   32:*/		return 0x8223A150;
		  /* 8223A150h */ case   33:  		/* b -1740484 */
		/* 8223A150h case   33:*/		return 0x8209128C;
		/* 8223A150h case   33:*/		return 0x8223A154;
		  /* 8223A154h */ case   34:  		/* nop */
		/* 8223A154h case   34:*/		cpu::op::nop();
		/* 8223A154h case   34:*/		return 0x8223A158;
	}
	return 0x8223A158;
} // Block from 8223A0CCh-8223A158h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8223A158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A158);
		  /* 8223A158h */ case    0:  		/* mfspr R12, LR */
		/* 8223A158h case    0:*/		regs.R12 = regs.LR;
		/* 8223A158h case    0:*/		return 0x8223A15C;
		  /* 8223A15Ch */ case    1:  		/* bl -1740548 */
		/* 8223A15Ch case    1:*/		regs.LR = 0x8223A160; return 0x82091258;
		/* 8223A15Ch case    1:*/		return 0x8223A160;
		  /* 8223A160h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8223A160h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8223A160h case    2:*/		return 0x8223A164;
		  /* 8223A164h */ case    3:  		/* lwz R31, <#[R3 + 12]> */
		/* 8223A164h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223A164h case    3:*/		return 0x8223A168;
		  /* 8223A168h */ case    4:  		/* mr R29, R3 */
		/* 8223A168h case    4:*/		regs.R29 = regs.R3;
		/* 8223A168h case    4:*/		return 0x8223A16C;
		  /* 8223A16Ch */ case    5:  		/* lwz R3, <#[R31 + 1488]> */
		/* 8223A16Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005D0) );
		/* 8223A16Ch case    5:*/		return 0x8223A170;
		  /* 8223A170h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 8223A170h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223A170h case    6:*/		return 0x8223A174;
		  /* 8223A174h */ case    7:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223A174h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223A174h case    7:*/		return 0x8223A178;
		  /* 8223A178h */ case    8:  		/* mtspr CTR, R11 */
		/* 8223A178h case    8:*/		regs.CTR = regs.R11;
		/* 8223A178h case    8:*/		return 0x8223A17C;
		  /* 8223A17Ch */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8223A17Ch case    9:*/		if ( 1 ) { regs.LR = 0x8223A180; return (uint32)regs.CTR; }
		/* 8223A17Ch case    9:*/		return 0x8223A180;
		  /* 8223A180h */ case   10:  		/* lis R11, -32222 */
		/* 8223A180h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A180h case   10:*/		return 0x8223A184;
		  /* 8223A184h */ case   11:  		/* mr R5, R3 */
		/* 8223A184h case   11:*/		regs.R5 = regs.R3;
		/* 8223A184h case   11:*/		return 0x8223A188;
		  /* 8223A188h */ case   12:  		/* lwz R3, <#[R29 + 16]> */
		/* 8223A188h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000010) );
		/* 8223A188h case   12:*/		return 0x8223A18C;
		  /* 8223A18Ch */ case   13:  		/* li R4, 0 */
		/* 8223A18Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A18Ch case   13:*/		return 0x8223A190;
		  /* 8223A190h */ case   14:  		/* addi R6, R11, -12392 */
		/* 8223A190h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A190h case   14:*/		return 0x8223A194;
		  /* 8223A194h */ case   15:  		/* mr R7, R31 */
		/* 8223A194h case   15:*/		regs.R7 = regs.R31;
		/* 8223A194h case   15:*/		return 0x8223A198;
		  /* 8223A198h */ case   16:  		/* bl -41256 */
		/* 8223A198h case   16:*/		regs.LR = 0x8223A19C; return 0x82230070;
		/* 8223A198h case   16:*/		return 0x8223A19C;
		  /* 8223A19Ch */ case   17:  		/* cmpwi CR6, R3, 1 */
		/* 8223A19Ch case   17:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223A19Ch case   17:*/		return 0x8223A1A0;
		  /* 8223A1A0h */ case   18:  		/* bc 12, CR6_EQ, 52 */
		/* 8223A1A0h case   18:*/		if ( regs.CR[6].eq ) { return 0x8223A1D4;  }
		/* 8223A1A0h case   18:*/		return 0x8223A1A4;
		  /* 8223A1A4h */ case   19:  		/* cmpwi CR6, R3, 3 */
		/* 8223A1A4h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8223A1A4h case   19:*/		return 0x8223A1A8;
		  /* 8223A1A8h */ case   20:  		/* bc 4, CR6_EQ, 168 */
		/* 8223A1A8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8223A250;  }
		/* 8223A1A8h case   20:*/		return 0x8223A1AC;
		  /* 8223A1ACh */ case   21:  		/* lis R11, -32252 */
		/* 8223A1ACh case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223A1ACh case   21:*/		return 0x8223A1B0;
		  /* 8223A1B0h */ case   22:  		/* lis R10, -32255 */
		/* 8223A1B0h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8223A1B0h case   22:*/		return 0x8223A1B4;
		  /* 8223A1B4h */ case   23:  		/* lis R9, -32253 */
		/* 8223A1B4h case   23:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223A1B4h case   23:*/		return 0x8223A1B8;
		  /* 8223A1B8h */ case   24:  		/* addi R6, R11, 8520 */
		/* 8223A1B8h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 8223A1B8h case   24:*/		return 0x8223A1BC;
		  /* 8223A1BCh */ case   25:  		/* addi R5, R10, 5216 */
		/* 8223A1BCh case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 8223A1BCh case   25:*/		return 0x8223A1C0;
		  /* 8223A1C0h */ case   26:  		/* addi R4, R9, 27460 */
		/* 8223A1C0h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223A1C0h case   26:*/		return 0x8223A1C4;
		  /* 8223A1C4h */ case   27:  		/* li R7, 1282 */
		/* 8223A1C4h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x502);
		/* 8223A1C4h case   27:*/		return 0x8223A1C8;
		  /* 8223A1C8h */ case   28:  		/* li R3, 0 */
		/* 8223A1C8h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A1C8h case   28:*/		return 0x8223A1CC;
		  /* 8223A1CCh */ case   29:  		/* bl -927172 */
		/* 8223A1CCh case   29:*/		regs.LR = 0x8223A1D0; return 0x82157C08;
		/* 8223A1CCh case   29:*/		return 0x8223A1D0;
		  /* 8223A1D0h */ case   30:  		/* b 128 */
		/* 8223A1D0h case   30:*/		return 0x8223A250;
		/* 8223A1D0h case   30:*/		return 0x8223A1D4;
	}
	return 0x8223A1D4;
} // Block from 8223A158h-8223A1D4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8223A1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A1D4);
		  /* 8223A1D4h */ case    0:  		/* lwz R3, <#[R29 + 96]> */
		/* 8223A1D4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000060) );
		/* 8223A1D4h case    0:*/		return 0x8223A1D8;
		  /* 8223A1D8h */ case    1:  		/* li R28, 0 */
		/* 8223A1D8h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8223A1D8h case    1:*/		return 0x8223A1DC;
		  /* 8223A1DCh */ case    2:  		/* li R31, 0 */
		/* 8223A1DCh case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8223A1DCh case    2:*/		return 0x8223A1E0;
		  /* 8223A1E0h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 8223A1E0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8223A1E0h case    3:*/		return 0x8223A1E4;
		  /* 8223A1E4h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 8223A1E4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223A1E4h case    4:*/		return 0x8223A1E8;
		  /* 8223A1E8h */ case    5:  		/* bc 4, CR6_GT, 88 */
		/* 8223A1E8h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8223A240;  }
		/* 8223A1E8h case    5:*/		return 0x8223A1EC;
		  /* 8223A1ECh */ case    6:  		/* li R30, 0 */
		/* 8223A1ECh case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223A1ECh case    6:*/		return 0x8223A1F0;
		  /* 8223A1F0h */ case    7:  		/* lwz R11, <#[R3 + 4]> */
		/* 8223A1F0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8223A1F0h case    7:*/		return 0x8223A1F4;
		  /* 8223A1F4h */ case    8:  		/* cmplw CR6, R31, R11 */
		/* 8223A1F4h case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8223A1F4h case    8:*/		return 0x8223A1F8;
		  /* 8223A1F8h */ case    9:  		/* bc 4, CR6_LT, 16 */
		/* 8223A1F8h case    9:*/		if ( !regs.CR[6].lt ) { return 0x8223A208;  }
		/* 8223A1F8h case    9:*/		return 0x8223A1FC;
		  /* 8223A1FCh */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 8223A1FCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8223A1FCh case   10:*/		return 0x8223A200;
		  /* 8223A200h */ case   11:  		/* add R3, R11, R30 */
		/* 8223A200h case   11:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R30);
		/* 8223A200h case   11:*/		return 0x8223A204;
		  /* 8223A204h */ case   12:  		/* b 12 */
		/* 8223A204h case   12:*/		return 0x8223A210;
		/* 8223A204h case   12:*/		return 0x8223A208;
	}
	return 0x8223A208;
} // Block from 8223A1D4h-8223A208h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223A208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A208);
		  /* 8223A208h */ case    0:  		/* mr R4, R31 */
		/* 8223A208h case    0:*/		regs.R4 = regs.R31;
		/* 8223A208h case    0:*/		return 0x8223A20C;
		  /* 8223A20Ch */ case    1:  		/* bl 104628 */
		/* 8223A20Ch case    1:*/		regs.LR = 0x8223A210; return 0x82253AC0;
		/* 8223A20Ch case    1:*/		return 0x8223A210;
	}
	return 0x8223A210;
} // Block from 8223A208h-8223A210h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223A210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A210);
		  /* 8223A210h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 8223A210h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223A210h case    0:*/		return 0x8223A214;
		  /* 8223A214h */ case    1:  		/* lwz R11, <#[R11 + 80]> */
		/* 8223A214h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8223A214h case    1:*/		return 0x8223A218;
		  /* 8223A218h */ case    2:  		/* cmpwi CR6, R11, 23 */
		/* 8223A218h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000017);
		/* 8223A218h case    2:*/		return 0x8223A21C;
		  /* 8223A21Ch */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 8223A21Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8223A23C;  }
		/* 8223A21Ch case    3:*/		return 0x8223A220;
		  /* 8223A220h */ case    4:  		/* lwz R3, <#[R29 + 96]> */
		/* 8223A220h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000060) );
		/* 8223A220h case    4:*/		return 0x8223A224;
		  /* 8223A224h */ case    5:  		/* addi R31, R31, 1 */
		/* 8223A224h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8223A224h case    5:*/		return 0x8223A228;
		  /* 8223A228h */ case    6:  		/* addi R30, R30, 4 */
		/* 8223A228h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8223A228h case    6:*/		return 0x8223A22C;
		  /* 8223A22Ch */ case    7:  		/* lwz R11, <#[R3 + 4]> */
		/* 8223A22Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8223A22Ch case    7:*/		return 0x8223A230;
		  /* 8223A230h */ case    8:  		/* cmpw CR6, R31, R11 */
		/* 8223A230h case    8:*/		cpu::op::cmpw<6>(regs,regs.R31,regs.R11);
		/* 8223A230h case    8:*/		return 0x8223A234;
		  /* 8223A234h */ case    9:  		/* bc 12, CR6_LT, -68 */
		/* 8223A234h case    9:*/		if ( regs.CR[6].lt ) { return 0x8223A1F0;  }
		/* 8223A234h case    9:*/		return 0x8223A238;
		  /* 8223A238h */ case   10:  		/* b 8 */
		/* 8223A238h case   10:*/		return 0x8223A240;
		/* 8223A238h case   10:*/		return 0x8223A23C;
	}
	return 0x8223A23C;
} // Block from 8223A210h-8223A23Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8223A23Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A23C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A23C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A23C);
		  /* 8223A23Ch */ case    0:  		/* li R28, 1 */
		/* 8223A23Ch case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 8223A23Ch case    0:*/		return 0x8223A240;
	}
	return 0x8223A240;
} // Block from 8223A23Ch-8223A240h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223A240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A240);
		  /* 8223A240h */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8223A240h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8223A240h case    0:*/		return 0x8223A244;
		  /* 8223A244h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8223A244h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8223A250;  }
		/* 8223A244h case    1:*/		return 0x8223A248;
		  /* 8223A248h */ case    2:  		/* mr R3, R29 */
		/* 8223A248h case    2:*/		regs.R3 = regs.R29;
		/* 8223A248h case    2:*/		return 0x8223A24C;
		  /* 8223A24Ch */ case    3:  		/* bl -12132 */
		/* 8223A24Ch case    3:*/		regs.LR = 0x8223A250; return 0x822372E8;
		/* 8223A24Ch case    3:*/		return 0x8223A250;
	}
	return 0x8223A250;
} // Block from 8223A240h-8223A250h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223A250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A250);
		  /* 8223A250h */ case    0:  		/* addi R1, R1, 128 */
		/* 8223A250h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223A250h case    0:*/		return 0x8223A254;
		  /* 8223A254h */ case    1:  		/* b -1740716 */
		/* 8223A254h case    1:*/		return 0x820912A8;
		/* 8223A254h case    1:*/		return 0x8223A258;
	}
	return 0x8223A258;
} // Block from 8223A250h-8223A258h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223A258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A258);
		  /* 8223A258h */ case    0:  		/* mfspr R12, LR */
		/* 8223A258h case    0:*/		regs.R12 = regs.LR;
		/* 8223A258h case    0:*/		return 0x8223A25C;
		  /* 8223A25Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223A25Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223A25Ch case    1:*/		return 0x8223A260;
		  /* 8223A260h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223A260h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223A260h case    2:*/		return 0x8223A264;
		  /* 8223A264h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223A264h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223A264h case    3:*/		return 0x8223A268;
		  /* 8223A268h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223A268h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223A268h case    4:*/		return 0x8223A26C;
		  /* 8223A26Ch */ case    5:  		/* lwz R30, <#[R3 + 12]> */
		/* 8223A26Ch case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223A26Ch case    5:*/		return 0x8223A270;
		  /* 8223A270h */ case    6:  		/* mr R31, R3 */
		/* 8223A270h case    6:*/		regs.R31 = regs.R3;
		/* 8223A270h case    6:*/		return 0x8223A274;
		  /* 8223A274h */ case    7:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223A274h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223A274h case    7:*/		return 0x8223A278;
		  /* 8223A278h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 8223A278h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223A278h case    8:*/		return 0x8223A27C;
		  /* 8223A27Ch */ case    9:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223A27Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223A27Ch case    9:*/		return 0x8223A280;
		  /* 8223A280h */ case   10:  		/* mtspr CTR, R11 */
		/* 8223A280h case   10:*/		regs.CTR = regs.R11;
		/* 8223A280h case   10:*/		return 0x8223A284;
		  /* 8223A284h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8223A284h case   11:*/		if ( 1 ) { regs.LR = 0x8223A288; return (uint32)regs.CTR; }
		/* 8223A284h case   11:*/		return 0x8223A288;
		  /* 8223A288h */ case   12:  		/* lis R11, -32222 */
		/* 8223A288h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A288h case   12:*/		return 0x8223A28C;
		  /* 8223A28Ch */ case   13:  		/* mr R5, R3 */
		/* 8223A28Ch case   13:*/		regs.R5 = regs.R3;
		/* 8223A28Ch case   13:*/		return 0x8223A290;
		  /* 8223A290h */ case   14:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A290h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A290h case   14:*/		return 0x8223A294;
		  /* 8223A294h */ case   15:  		/* li R4, 0 */
		/* 8223A294h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A294h case   15:*/		return 0x8223A298;
		  /* 8223A298h */ case   16:  		/* addi R6, R11, -12392 */
		/* 8223A298h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A298h case   16:*/		return 0x8223A29C;
		  /* 8223A29Ch */ case   17:  		/* mr R7, R30 */
		/* 8223A29Ch case   17:*/		regs.R7 = regs.R30;
		/* 8223A29Ch case   17:*/		return 0x8223A2A0;
		  /* 8223A2A0h */ case   18:  		/* bl -40528 */
		/* 8223A2A0h case   18:*/		regs.LR = 0x8223A2A4; return 0x82230450;
		/* 8223A2A0h case   18:*/		return 0x8223A2A4;
		  /* 8223A2A4h */ case   19:  		/* cmpwi CR6, R3, 1 */
		/* 8223A2A4h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223A2A4h case   19:*/		return 0x8223A2A8;
		  /* 8223A2A8h */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 8223A2A8h case   20:*/		if ( regs.CR[6].eq ) { return 0x8223A2DC;  }
		/* 8223A2A8h case   20:*/		return 0x8223A2AC;
		  /* 8223A2ACh */ case   21:  		/* cmpwi CR6, R3, 3 */
		/* 8223A2ACh case   21:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8223A2ACh case   21:*/		return 0x8223A2B0;
		  /* 8223A2B0h */ case   22:  		/* bc 4, CR6_EQ, 52 */
		/* 8223A2B0h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8223A2E4;  }
		/* 8223A2B0h case   22:*/		return 0x8223A2B4;
		  /* 8223A2B4h */ case   23:  		/* lis R11, -32252 */
		/* 8223A2B4h case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223A2B4h case   23:*/		return 0x8223A2B8;
		  /* 8223A2B8h */ case   24:  		/* lis R10, -32255 */
		/* 8223A2B8h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8223A2B8h case   24:*/		return 0x8223A2BC;
		  /* 8223A2BCh */ case   25:  		/* lis R9, -32253 */
		/* 8223A2BCh case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223A2BCh case   25:*/		return 0x8223A2C0;
		  /* 8223A2C0h */ case   26:  		/* addi R6, R11, 8520 */
		/* 8223A2C0h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 8223A2C0h case   26:*/		return 0x8223A2C4;
		  /* 8223A2C4h */ case   27:  		/* addi R5, R10, 5216 */
		/* 8223A2C4h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 8223A2C4h case   27:*/		return 0x8223A2C8;
		  /* 8223A2C8h */ case   28:  		/* addi R4, R9, 27460 */
		/* 8223A2C8h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223A2C8h case   28:*/		return 0x8223A2CC;
		  /* 8223A2CCh */ case   29:  		/* li R7, 1307 */
		/* 8223A2CCh case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x51B);
		/* 8223A2CCh case   29:*/		return 0x8223A2D0;
		  /* 8223A2D0h */ case   30:  		/* li R3, 0 */
		/* 8223A2D0h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A2D0h case   30:*/		return 0x8223A2D4;
		  /* 8223A2D4h */ case   31:  		/* bl -927436 */
		/* 8223A2D4h case   31:*/		regs.LR = 0x8223A2D8; return 0x82157C08;
		/* 8223A2D4h case   31:*/		return 0x8223A2D8;
		  /* 8223A2D8h */ case   32:  		/* b 12 */
		/* 8223A2D8h case   32:*/		return 0x8223A2E4;
		/* 8223A2D8h case   32:*/		return 0x8223A2DC;
	}
	return 0x8223A2DC;
} // Block from 8223A258h-8223A2DCh (33 instructions)

//////////////////////////////////////////////////////
// Block at 8223A2DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A2DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A2DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A2DC);
		  /* 8223A2DCh */ case    0:  		/* mr R3, R31 */
		/* 8223A2DCh case    0:*/		regs.R3 = regs.R31;
		/* 8223A2DCh case    0:*/		return 0x8223A2E0;
		  /* 8223A2E0h */ case    1:  		/* bl -13720 */
		/* 8223A2E0h case    1:*/		regs.LR = 0x8223A2E4; return 0x82236D48;
		/* 8223A2E0h case    1:*/		return 0x8223A2E4;
	}
	return 0x8223A2E4;
} // Block from 8223A2DCh-8223A2E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223A2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A2E4);
		  /* 8223A2E4h */ case    0:  		/* addi R1, R1, 112 */
		/* 8223A2E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223A2E4h case    0:*/		return 0x8223A2E8;
		  /* 8223A2E8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223A2E8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223A2E8h case    1:*/		return 0x8223A2EC;
		  /* 8223A2ECh */ case    2:  		/* mtspr LR, R12 */
		/* 8223A2ECh case    2:*/		regs.LR = regs.R12;
		/* 8223A2ECh case    2:*/		return 0x8223A2F0;
		  /* 8223A2F0h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8223A2F0h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223A2F0h case    3:*/		return 0x8223A2F4;
		  /* 8223A2F4h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8223A2F4h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223A2F4h case    4:*/		return 0x8223A2F8;
		  /* 8223A2F8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8223A2F8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223A2F8h case    5:*/		return 0x8223A2FC;
	}
	return 0x8223A2FC;
} // Block from 8223A2E4h-8223A2FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223A2FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A2FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A2FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A2FC);
		  /* 8223A2FCh */ case    0:  		/* nop */
		/* 8223A2FCh case    0:*/		cpu::op::nop();
		/* 8223A2FCh case    0:*/		return 0x8223A300;
	}
	return 0x8223A300;
} // Block from 8223A2FCh-8223A300h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223A300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A300);
		  /* 8223A300h */ case    0:  		/* mfspr R12, LR */
		/* 8223A300h case    0:*/		regs.R12 = regs.LR;
		/* 8223A300h case    0:*/		return 0x8223A304;
		  /* 8223A304h */ case    1:  		/* bl -1741000 */
		/* 8223A304h case    1:*/		regs.LR = 0x8223A308; return 0x8209123C;
		/* 8223A304h case    1:*/		return 0x8223A308;
		  /* 8223A308h */ case    2:  		/* stfd FR31, <#[R1 - 104]> */
		/* 8223A308h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 8223A308h case    2:*/		return 0x8223A30C;
		  /* 8223A30Ch */ case    3:  		/* stwu R1, <#[R1 - 208]> */
		/* 8223A30Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8223A30Ch case    3:*/		return 0x8223A310;
		  /* 8223A310h */ case    4:  		/* lwz R10, <#[R3 + 12]> */
		/* 8223A310h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223A310h case    4:*/		return 0x8223A314;
		  /* 8223A314h */ case    5:  		/* li R4, 0 */
		/* 8223A314h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A314h case    5:*/		return 0x8223A318;
		  /* 8223A318h */ case    6:  		/* mr R31, R3 */
		/* 8223A318h case    6:*/		regs.R31 = regs.R3;
		/* 8223A318h case    6:*/		return 0x8223A31C;
		  /* 8223A31Ch */ case    7:  		/* lwz R11, <#[R10 + 1508]> */
		/* 8223A31Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 8223A31Ch case    7:*/		return 0x8223A320;
		  /* 8223A320h */ case    8:  		/* addi R5, R11, -1 */
		/* 8223A320h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 8223A320h case    8:*/		return 0x8223A324;
		  /* 8223A324h */ case    9:  		/* stw R5, <#[R10 + 1508]> */
		/* 8223A324h case    9:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 8223A324h case    9:*/		return 0x8223A328;
		  /* 8223A328h */ case   10:  		/* lwz R3, <#[R3 + 172]> */
		/* 8223A328h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000000AC) );
		/* 8223A328h case   10:*/		return 0x8223A32C;
		  /* 8223A32Ch */ case   11:  		/* bl 46308 */
		/* 8223A32Ch case   11:*/		regs.LR = 0x8223A330; return 0x82245810;
		/* 8223A32Ch case   11:*/		return 0x8223A330;
		  /* 8223A330h */ case   12:  		/* lwz R30, <#[R31 + 12]> */
		/* 8223A330h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A330h case   12:*/		return 0x8223A334;
		  /* 8223A334h */ case   13:  		/* lwz R11, <#[R30 + 1488]> */
		/* 8223A334h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223A334h case   13:*/		return 0x8223A338;
		  /* 8223A338h */ case   14:  		/* mr R26, R3 */
		/* 8223A338h case   14:*/		regs.R26 = regs.R3;
		/* 8223A338h case   14:*/		return 0x8223A33C;
		  /* 8223A33Ch */ case   15:  		/* mr R3, R11 */
		/* 8223A33Ch case   15:*/		regs.R3 = regs.R11;
		/* 8223A33Ch case   15:*/		return 0x8223A340;
		  /* 8223A340h */ case   16:  		/* lwz R10, <#[R11]> */
		/* 8223A340h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8223A340h case   16:*/		return 0x8223A344;
		  /* 8223A344h */ case   17:  		/* lwz R11, <#[R10 + 28]> */
		/* 8223A344h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000001C) );
		/* 8223A344h case   17:*/		return 0x8223A348;
		  /* 8223A348h */ case   18:  		/* mtspr CTR, R11 */
		/* 8223A348h case   18:*/		regs.CTR = regs.R11;
		/* 8223A348h case   18:*/		return 0x8223A34C;
		  /* 8223A34Ch */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8223A34Ch case   19:*/		if ( 1 ) { regs.LR = 0x8223A350; return (uint32)regs.CTR; }
		/* 8223A34Ch case   19:*/		return 0x8223A350;
		  /* 8223A350h */ case   20:  		/* lis R11, -32222 */
		/* 8223A350h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A350h case   20:*/		return 0x8223A354;
		  /* 8223A354h */ case   21:  		/* mr R5, R3 */
		/* 8223A354h case   21:*/		regs.R5 = regs.R3;
		/* 8223A354h case   21:*/		return 0x8223A358;
		  /* 8223A358h */ case   22:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A358h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A358h case   22:*/		return 0x8223A35C;
		  /* 8223A35Ch */ case   23:  		/* mr R7, R30 */
		/* 8223A35Ch case   23:*/		regs.R7 = regs.R30;
		/* 8223A35Ch case   23:*/		return 0x8223A360;
		  /* 8223A360h */ case   24:  		/* li R4, 0 */
		/* 8223A360h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A360h case   24:*/		return 0x8223A364;
		  /* 8223A364h */ case   25:  		/* addi R6, R11, -12392 */
		/* 8223A364h case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A364h case   25:*/		return 0x8223A368;
		  /* 8223A368h */ case   26:  		/* bl -32352 */
		/* 8223A368h case   26:*/		regs.LR = 0x8223A36C; return 0x82232508;
		/* 8223A368h case   26:*/		return 0x8223A36C;
		  /* 8223A36Ch */ case   27:  		/* lwz R30, <#[R31 + 12]> */
		/* 8223A36Ch case   27:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A36Ch case   27:*/		return 0x8223A370;
		  /* 8223A370h */ case   28:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223A370h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223A370h case   28:*/		return 0x8223A374;
		  /* 8223A374h */ case   29:  		/* lwz R11, <#[R3]> */
		/* 8223A374h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223A374h case   29:*/		return 0x8223A378;
		  /* 8223A378h */ case   30:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223A378h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223A378h case   30:*/		return 0x8223A37C;
		  /* 8223A37Ch */ case   31:  		/* mtspr CTR, R11 */
		/* 8223A37Ch case   31:*/		regs.CTR = regs.R11;
		/* 8223A37Ch case   31:*/		return 0x8223A380;
		  /* 8223A380h */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 8223A380h case   32:*/		if ( 1 ) { regs.LR = 0x8223A384; return (uint32)regs.CTR; }
		/* 8223A380h case   32:*/		return 0x8223A384;
		  /* 8223A384h */ case   33:  		/* lis R11, -32222 */
		/* 8223A384h case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A384h case   33:*/		return 0x8223A388;
		  /* 8223A388h */ case   34:  		/* mr R5, R3 */
		/* 8223A388h case   34:*/		regs.R5 = regs.R3;
		/* 8223A388h case   34:*/		return 0x8223A38C;
		  /* 8223A38Ch */ case   35:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A38Ch case   35:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A38Ch case   35:*/		return 0x8223A390;
		  /* 8223A390h */ case   36:  		/* mr R7, R30 */
		/* 8223A390h case   36:*/		regs.R7 = regs.R30;
		/* 8223A390h case   36:*/		return 0x8223A394;
		  /* 8223A394h */ case   37:  		/* li R4, 0 */
		/* 8223A394h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A394h case   37:*/		return 0x8223A398;
	}
	return 0x8223A398;
} // Block from 8223A300h-8223A398h (38 instructions)

//////////////////////////////////////////////////////
// Block at 8223A398h
// Function '??1CFG@XGRAPHICS@@QAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A398);
		  /* 8223A398h */ case    0:  		/* addi R6, R11, -12392 */
		/* 8223A398h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A398h case    0:*/		return 0x8223A39C;
		  /* 8223A39Ch */ case    1:  		/* bl -39932 */
		/* 8223A39Ch case    1:*/		regs.LR = 0x8223A3A0; return 0x822307A0;
		/* 8223A39Ch case    1:*/		return 0x8223A3A0;
		  /* 8223A3A0h */ case    2:  		/* lwz R30, <#[R31 + 12]> */
		/* 8223A3A0h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A3A0h case    2:*/		return 0x8223A3A4;
		  /* 8223A3A4h */ case    3:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223A3A4h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223A3A4h case    3:*/		return 0x8223A3A8;
		  /* 8223A3A8h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 8223A3A8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223A3A8h case    4:*/		return 0x8223A3AC;
		  /* 8223A3ACh */ case    5:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223A3ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223A3ACh case    5:*/		return 0x8223A3B0;
		  /* 8223A3B0h */ case    6:  		/* mtspr CTR, R11 */
		/* 8223A3B0h case    6:*/		regs.CTR = regs.R11;
		/* 8223A3B0h case    6:*/		return 0x8223A3B4;
		  /* 8223A3B4h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8223A3B4h case    7:*/		if ( 1 ) { regs.LR = 0x8223A3B8; return (uint32)regs.CTR; }
		/* 8223A3B4h case    7:*/		return 0x8223A3B8;
		  /* 8223A3B8h */ case    8:  		/* lis R11, -32222 */
		/* 8223A3B8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A3B8h case    8:*/		return 0x8223A3BC;
		  /* 8223A3BCh */ case    9:  		/* mr R5, R3 */
		/* 8223A3BCh case    9:*/		regs.R5 = regs.R3;
		/* 8223A3BCh case    9:*/		return 0x8223A3C0;
		  /* 8223A3C0h */ case   10:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A3C0h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A3C0h case   10:*/		return 0x8223A3C4;
		  /* 8223A3C4h */ case   11:  		/* mr R7, R30 */
		/* 8223A3C4h case   11:*/		regs.R7 = regs.R30;
		/* 8223A3C4h case   11:*/		return 0x8223A3C8;
		  /* 8223A3C8h */ case   12:  		/* li R4, 0 */
		/* 8223A3C8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A3C8h case   12:*/		return 0x8223A3CC;
		  /* 8223A3CCh */ case   13:  		/* addi R6, R11, -12392 */
		/* 8223A3CCh case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A3CCh case   13:*/		return 0x8223A3D0;
		  /* 8223A3D0h */ case   14:  		/* bl -39704 */
		/* 8223A3D0h case   14:*/		regs.LR = 0x8223A3D4; return 0x822308B8;
		/* 8223A3D0h case   14:*/		return 0x8223A3D4;
		  /* 8223A3D4h */ case   15:  		/* lwz R30, <#[R31 + 12]> */
		/* 8223A3D4h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A3D4h case   15:*/		return 0x8223A3D8;
		  /* 8223A3D8h */ case   16:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223A3D8h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223A3D8h case   16:*/		return 0x8223A3DC;
		  /* 8223A3DCh */ case   17:  		/* lwz R11, <#[R3]> */
		/* 8223A3DCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223A3DCh case   17:*/		return 0x8223A3E0;
		  /* 8223A3E0h */ case   18:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223A3E0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223A3E0h case   18:*/		return 0x8223A3E4;
		  /* 8223A3E4h */ case   19:  		/* mtspr CTR, R11 */
		/* 8223A3E4h case   19:*/		regs.CTR = regs.R11;
		/* 8223A3E4h case   19:*/		return 0x8223A3E8;
		  /* 8223A3E8h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 8223A3E8h case   20:*/		if ( 1 ) { regs.LR = 0x8223A3EC; return (uint32)regs.CTR; }
		/* 8223A3E8h case   20:*/		return 0x8223A3EC;
		  /* 8223A3ECh */ case   21:  		/* lis R11, -32222 */
		/* 8223A3ECh case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A3ECh case   21:*/		return 0x8223A3F0;
		  /* 8223A3F0h */ case   22:  		/* mr R5, R3 */
		/* 8223A3F0h case   22:*/		regs.R5 = regs.R3;
		/* 8223A3F0h case   22:*/		return 0x8223A3F4;
		  /* 8223A3F4h */ case   23:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A3F4h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A3F4h case   23:*/		return 0x8223A3F8;
		  /* 8223A3F8h */ case   24:  		/* li R4, 0 */
		/* 8223A3F8h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A3F8h case   24:*/		return 0x8223A3FC;
		  /* 8223A3FCh */ case   25:  		/* addi R6, R11, -12392 */
		/* 8223A3FCh case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A3FCh case   25:*/		return 0x8223A400;
		  /* 8223A400h */ case   26:  		/* mr R7, R30 */
		/* 8223A400h case   26:*/		regs.R7 = regs.R30;
		/* 8223A400h case   26:*/		return 0x8223A404;
		  /* 8223A404h */ case   27:  		/* bl -39484 */
		/* 8223A404h case   27:*/		regs.LR = 0x8223A408; return 0x822309C8;
		/* 8223A404h case   27:*/		return 0x8223A408;
		  /* 8223A408h */ case   28:  		/* lwz R3, <#[R31 + 168]> */
		/* 8223A408h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A8) );
		/* 8223A408h case   28:*/		return 0x8223A40C;
		  /* 8223A40Ch */ case   29:  		/* bl 127148 */
		/* 8223A40Ch case   29:*/		regs.LR = 0x8223A410; return 0x822594B8;
		/* 8223A40Ch case   29:*/		return 0x8223A410;
		  /* 8223A410h */ case   30:  		/* lis R11, -32253 */
		/* 8223A410h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8223A410h case   30:*/		return 0x8223A414;
		  /* 8223A414h */ case   31:  		/* lis R10, -32252 */
		/* 8223A414h case   31:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223A414h case   31:*/		return 0x8223A418;
		  /* 8223A418h */ case   32:  		/* cmpwi CR6, R3, 1 */
		/* 8223A418h case   32:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223A418h case   32:*/		return 0x8223A41C;
		  /* 8223A41Ch */ case   33:  		/* addi R24, R11, 27460 */
		/* 8223A41Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x6B44);
		/* 8223A41Ch case   33:*/		return 0x8223A420;
		  /* 8223A420h */ case   34:  		/* addi R23, R10, 8520 */
		/* 8223A420h case   34:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0x2148);
		/* 8223A420h case   34:*/		return 0x8223A424;
		  /* 8223A424h */ case   35:  		/* bc 12, CR6_EQ, 32 */
		/* 8223A424h case   35:*/		if ( regs.CR[6].eq ) { return 0x8223A444;  }
		/* 8223A424h case   35:*/		return 0x8223A428;
		  /* 8223A428h */ case   36:  		/* lis R11, -32252 */
		/* 8223A428h case   36:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223A428h case   36:*/		return 0x8223A42C;
		  /* 8223A42Ch */ case   37:  		/* mr R6, R23 */
		/* 8223A42Ch case   37:*/		regs.R6 = regs.R23;
		/* 8223A42Ch case   37:*/		return 0x8223A430;
		  /* 8223A430h */ case   38:  		/* addi R5, R11, 9004 */
		/* 8223A430h case   38:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x232C);
		/* 8223A430h case   38:*/		return 0x8223A434;
		  /* 8223A434h */ case   39:  		/* mr R4, R24 */
		/* 8223A434h case   39:*/		regs.R4 = regs.R24;
		/* 8223A434h case   39:*/		return 0x8223A438;
		  /* 8223A438h */ case   40:  		/* li R7, 1505 */
		/* 8223A438h case   40:*/		cpu::op::li<0>(regs,&regs.R7,0x5E1);
		/* 8223A438h case   40:*/		return 0x8223A43C;
		  /* 8223A43Ch */ case   41:  		/* li R3, 0 */
		/* 8223A43Ch case   41:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A43Ch case   41:*/		return 0x8223A440;
		  /* 8223A440h */ case   42:  		/* bl -927800 */
		/* 8223A440h case   42:*/		regs.LR = 0x8223A444; return 0x82157C08;
		/* 8223A440h case   42:*/		return 0x8223A444;
	}
	return 0x8223A444;
} // Block from 8223A398h-8223A444h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8223A444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A444);
		  /* 8223A444h */ case    0:  		/* lwz R9, <#[R31 + 168]> */
		/* 8223A444h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000000A8) );
		/* 8223A444h case    0:*/		return 0x8223A448;
		  /* 8223A448h */ case    1:  		/* li R29, 0 */
		/* 8223A448h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8223A448h case    1:*/		return 0x8223A44C;
		  /* 8223A44Ch */ case    2:  		/* li R22, 1 */
		/* 8223A44Ch case    2:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 8223A44Ch case    2:*/		return 0x8223A450;
		  /* 8223A450h */ case    3:  		/* lwz R27, <#[R1 + 92]> */
		/* 8223A450h case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000005C) );
		/* 8223A450h case    3:*/		return 0x8223A454;
		  /* 8223A454h */ case    4:  		/* mr R10, R29 */
		/* 8223A454h case    4:*/		regs.R10 = regs.R29;
		/* 8223A454h case    4:*/		return 0x8223A458;
		  /* 8223A458h */ case    5:  		/* mr R11, R29 */
		/* 8223A458h case    5:*/		regs.R11 = regs.R29;
		/* 8223A458h case    5:*/		return 0x8223A45C;
		  /* 8223A45Ch */ case    6:  		/* mr R8, R22 */
		/* 8223A45Ch case    6:*/		regs.R8 = regs.R22;
		/* 8223A45Ch case    6:*/		return 0x8223A460;
		  /* 8223A460h */ case    7:  		/* lwz R9, <#[R9 + 60]> */
		/* 8223A460h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000003C) );
		/* 8223A460h case    7:*/		return 0x8223A464;
		  /* 8223A464h */ case    8:  		/* lwz R6, <#[R9 + 4]> */
		/* 8223A464h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000004) );
		/* 8223A464h case    8:*/		return 0x8223A468;
		  /* 8223A468h */ case    9:  		/* cmplw CR6, R8, R6 */
		/* 8223A468h case    9:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R6);
		/* 8223A468h case    9:*/		return 0x8223A46C;
		  /* 8223A46Ch */ case   10:  		/* bc 4, CR6_GT, 12 */
		/* 8223A46Ch case   10:*/		if ( !regs.CR[6].gt ) { return 0x8223A478;  }
		/* 8223A46Ch case   10:*/		return 0x8223A470;
		  /* 8223A470h */ case   11:  		/* mr R7, R29 */
		/* 8223A470h case   11:*/		regs.R7 = regs.R29;
		/* 8223A470h case   11:*/		return 0x8223A474;
		  /* 8223A474h */ case   12:  		/* b 16 */
		/* 8223A474h case   12:*/		return 0x8223A484;
		/* 8223A474h case   12:*/		return 0x8223A478;
	}
	return 0x8223A478;
} // Block from 8223A444h-8223A478h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223A478h
// Function '?GetDfOrder@CFG@XGRAPHICS@@QAAPAPAVBlock@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A478);
		  /* 8223A478h */ case    0:  		/* lwz R10, <#[R9 + 8]> */
		/* 8223A478h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 8223A478h case    0:*/		return 0x8223A47C;
		  /* 8223A47Ch */ case    1:  		/* mr R7, R22 */
		/* 8223A47Ch case    1:*/		regs.R7 = regs.R22;
		/* 8223A47Ch case    1:*/		return 0x8223A480;
		  /* 8223A480h */ case    2:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8223A480h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8223A480h case    2:*/		return 0x8223A484;
	}
	return 0x8223A484;
} // Block from 8223A478h-8223A484h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223A484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A484);
		  /* 8223A484h */ case    0:  		/* rlwinm. R7, R7, 0, 24, 31 */
		/* 8223A484h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R7,regs.R7);
		/* 8223A484h case    0:*/		return 0x8223A488;
		  /* 8223A488h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 8223A488h case    1:*/		if ( regs.CR[0].eq ) { return 0x8223A49C;  }
		/* 8223A488h case    1:*/		return 0x8223A48C;
		  /* 8223A48Ch */ case    2:  		/* mr R27, R10 */
		/* 8223A48Ch case    2:*/		regs.R27 = regs.R10;
		/* 8223A48Ch case    2:*/		return 0x8223A490;
		  /* 8223A490h */ case    3:  		/* addi R8, R8, 1 */
		/* 8223A490h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8223A490h case    3:*/		return 0x8223A494;
		  /* 8223A494h */ case    4:  		/* addi R11, R11, 4 */
		/* 8223A494h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223A494h case    4:*/		return 0x8223A498;
		  /* 8223A498h */ case    5:  		/* b -48 */
		/* 8223A498h case    5:*/		return 0x8223A468;
		/* 8223A498h case    5:*/		return 0x8223A49C;
	}
	return 0x8223A49C;
} // Block from 8223A484h-8223A49Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223A49Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A49C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A49C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A49C);
		  /* 8223A49Ch */ case    0:  		/* lwz R30, <#[R31 + 12]> */
		/* 8223A49Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A49Ch case    0:*/		return 0x8223A4A0;
		  /* 8223A4A0h */ case    1:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223A4A0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223A4A0h case    1:*/		return 0x8223A4A4;
		  /* 8223A4A4h */ case    2:  		/* lwz R11, <#[R3]> */
		/* 8223A4A4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223A4A4h case    2:*/		return 0x8223A4A8;
		  /* 8223A4A8h */ case    3:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223A4A8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223A4A8h case    3:*/		return 0x8223A4AC;
		  /* 8223A4ACh */ case    4:  		/* mtspr CTR, R11 */
		/* 8223A4ACh case    4:*/		regs.CTR = regs.R11;
		/* 8223A4ACh case    4:*/		return 0x8223A4B0;
		  /* 8223A4B0h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8223A4B0h case    5:*/		if ( 1 ) { regs.LR = 0x8223A4B4; return (uint32)regs.CTR; }
		/* 8223A4B0h case    5:*/		return 0x8223A4B4;
		  /* 8223A4B4h */ case    6:  		/* lis R11, -32222 */
		/* 8223A4B4h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A4B4h case    6:*/		return 0x8223A4B8;
		  /* 8223A4B8h */ case    7:  		/* mr R5, R3 */
		/* 8223A4B8h case    7:*/		regs.R5 = regs.R3;
		/* 8223A4B8h case    7:*/		return 0x8223A4BC;
		  /* 8223A4BCh */ case    8:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A4BCh case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A4BCh case    8:*/		return 0x8223A4C0;
		  /* 8223A4C0h */ case    9:  		/* li R4, 0 */
		/* 8223A4C0h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A4C0h case    9:*/		return 0x8223A4C4;
		  /* 8223A4C4h */ case   10:  		/* addi R6, R11, -12392 */
		/* 8223A4C4h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A4C4h case   10:*/		return 0x8223A4C8;
		  /* 8223A4C8h */ case   11:  		/* mr R7, R30 */
		/* 8223A4C8h case   11:*/		regs.R7 = regs.R30;
		/* 8223A4C8h case   11:*/		return 0x8223A4CC;
		  /* 8223A4CCh */ case   12:  		/* bl -39404 */
		/* 8223A4CCh case   12:*/		regs.LR = 0x8223A4D0; return 0x82230AE0;
		/* 8223A4CCh case   12:*/		return 0x8223A4D0;
		  /* 8223A4D0h */ case   13:  		/* lis R11, -32252 */
		/* 8223A4D0h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223A4D0h case   13:*/		return 0x8223A4D4;
		  /* 8223A4D4h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 8223A4D4h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8223A4D4h case   14:*/		return 0x8223A4D8;
		  /* 8223A4D8h */ case   15:  		/* addi R25, R11, 9328 */
		/* 8223A4D8h case   15:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x2470);
		/* 8223A4D8h case   15:*/		return 0x8223A4DC;
		  /* 8223A4DCh */ case   16:  		/* bc 4, CR0_EQ, 128 */
		/* 8223A4DCh case   16:*/		if ( !regs.CR[0].eq ) { return 0x8223A55C;  }
		/* 8223A4DCh case   16:*/		return 0x8223A4E0;
		  /* 8223A4E0h */ case   17:  		/* li R3, 105 */
		/* 8223A4E0h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x69);
		/* 8223A4E0h case   17:*/		return 0x8223A4E4;
		  /* 8223A4E4h */ case   18:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223A4E4h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A4E4h case   18:*/		return 0x8223A4E8;
		  /* 8223A4E8h */ case   19:  		/* bl 113224 */
		/* 8223A4E8h case   19:*/		regs.LR = 0x8223A4EC; return 0x82255F30;
		/* 8223A4E8h case   19:*/		return 0x8223A4EC;
		  /* 8223A4ECh */ case   20:  		/* mr R5, R26 */
		/* 8223A4ECh case   20:*/		regs.R5 = regs.R26;
		/* 8223A4ECh case   20:*/		return 0x8223A4F0;
		  /* 8223A4F0h */ case   21:  		/* li R4, 0 */
		/* 8223A4F0h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A4F0h case   21:*/		return 0x8223A4F4;
		  /* 8223A4F4h */ case   22:  		/* mr R30, R3 */
		/* 8223A4F4h case   22:*/		regs.R30 = regs.R3;
		/* 8223A4F4h case   22:*/		return 0x8223A4F8;
		  /* 8223A4F8h */ case   23:  		/* bl 114336 */
		/* 8223A4F8h case   23:*/		regs.LR = 0x8223A4FC; return 0x82256398;
		/* 8223A4F8h case   23:*/		return 0x8223A4FC;
		  /* 8223A4FCh */ case   24:  		/* lis R11, -32252 */
		/* 8223A4FCh case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223A4FCh case   24:*/		return 0x8223A500;
		  /* 8223A500h */ case   25:  		/* li R10, 23 */
		/* 8223A500h case   25:*/		cpu::op::li<0>(regs,&regs.R10,0x17);
		/* 8223A500h case   25:*/		return 0x8223A504;
		  /* 8223A504h */ case   26:  		/* stw R29, <#[R30 + 60]> */
		/* 8223A504h case   26:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x0000003C) );
		/* 8223A504h case   26:*/		return 0x8223A508;
		  /* 8223A508h */ case   27:  		/* addi R9, R11, 8480 */
		/* 8223A508h case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x2120);
		/* 8223A508h case   27:*/		return 0x8223A50C;
		  /* 8223A50Ch */ case   28:  		/* stw R10, <#[R30 + 84]> */
		/* 8223A50Ch case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000054) );
		/* 8223A50Ch case   28:*/		return 0x8223A510;
		  /* 8223A510h */ case   29:  		/* lwz R10, <#[R11 + 8480]> */
		/* 8223A510h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00002120) );
		/* 8223A510h case   29:*/		return 0x8223A514;
		  /* 8223A514h */ case   30:  		/* lwz R11, <#[R9 - 4]> */
		/* 8223A514h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0xFFFFFFFC) );
		/* 8223A514h case   30:*/		return 0x8223A518;
		  /* 8223A518h */ case   31:  		/* stw R10, <#[R30 + 132]> */
		/* 8223A518h case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000084) );
		/* 8223A518h case   31:*/		return 0x8223A51C;
		  /* 8223A51Ch */ case   32:  		/* stw R11, <#[R30 + 128]> */
		/* 8223A51Ch case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000080) );
		/* 8223A51Ch case   32:*/		return 0x8223A520;
	}
	return 0x8223A520;
} // Block from 8223A49Ch-8223A520h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8223A520h
// Function '?GetPostOrder@CFG@XGRAPHICS@@QAAPAPAVBlock@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A520);
		  /* 8223A520h */ case    0:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223A520h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A520h case    0:*/		return 0x8223A524;
		  /* 8223A524h */ case    1:  		/* bl -123196 */
		/* 8223A524h case    1:*/		regs.LR = 0x8223A528; return 0x8221C3E8;
		/* 8223A524h case    1:*/		return 0x8223A528;
		  /* 8223A528h */ case    2:  		/* stw R3, <#[R30 + 172]> */
		/* 8223A528h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x000000AC) );
		/* 8223A528h case    2:*/		return 0x8223A52C;
		  /* 8223A52Ch */ case    3:  		/* mr R4, R30 */
		/* 8223A52Ch case    3:*/		regs.R4 = regs.R30;
		/* 8223A52Ch case    3:*/		return 0x8223A530;
		  /* 8223A530h */ case    4:  		/* mr R3, R31 */
		/* 8223A530h case    4:*/		regs.R3 = regs.R31;
		/* 8223A530h case    4:*/		return 0x8223A534;
		  /* 8223A534h */ case    5:  		/* bl -16268 */
		/* 8223A534h case    5:*/		regs.LR = 0x8223A538; return 0x822365A8;
		/* 8223A534h case    5:*/		return 0x8223A538;
		  /* 8223A538h */ case    6:  		/* mr R4, R30 */
		/* 8223A538h case    6:*/		regs.R4 = regs.R30;
		/* 8223A538h case    6:*/		return 0x8223A53C;
		  /* 8223A53Ch */ case    7:  		/* mr R3, R27 */
		/* 8223A53Ch case    7:*/		regs.R3 = regs.R27;
		/* 8223A53Ch case    7:*/		return 0x8223A540;
		  /* 8223A540h */ case    8:  		/* bl 125424 */
		/* 8223A540h case    8:*/		regs.LR = 0x8223A544; return 0x82258F30;
		/* 8223A540h case    8:*/		return 0x8223A544;
		  /* 8223A544h */ case    9:  		/* mr R3, R30 */
		/* 8223A544h case    9:*/		regs.R3 = regs.R30;
		/* 8223A544h case    9:*/		return 0x8223A548;
		  /* 8223A548h */ case   10:  		/* bl 113272 */
		/* 8223A548h case   10:*/		regs.LR = 0x8223A54C; return 0x82255FC0;
		/* 8223A548h case   10:*/		return 0x8223A54C;
		  /* 8223A54Ch */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223A54Ch case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223A54Ch case   11:*/		return 0x8223A550;
		  /* 8223A550h */ case   12:  		/* bc 4, CR0_EQ, 1380 */
		/* 8223A550h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8223AAB4;  }
		/* 8223A550h case   12:*/		return 0x8223A554;
		  /* 8223A554h */ case   13:  		/* li R7, 1527 */
		/* 8223A554h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x5F7);
		/* 8223A554h case   13:*/		return 0x8223A558;
		  /* 8223A558h */ case   14:  		/* b 608 */
		/* 8223A558h case   14:*/		return 0x8223A7B8;
		/* 8223A558h case   14:*/		return 0x8223A55C;
	}
	return 0x8223A55C;
} // Block from 8223A520h-8223A55Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223A55Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A55C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A55C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A55C);
		  /* 8223A55Ch */ case    0:  		/* lwz R30, <#[R31 + 12]> */
		/* 8223A55Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A55Ch case    0:*/		return 0x8223A560;
		  /* 8223A560h */ case    1:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223A560h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223A560h case    1:*/		return 0x8223A564;
		  /* 8223A564h */ case    2:  		/* lwz R11, <#[R3]> */
		/* 8223A564h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223A564h case    2:*/		return 0x8223A568;
		  /* 8223A568h */ case    3:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223A568h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223A568h case    3:*/		return 0x8223A56C;
		  /* 8223A56Ch */ case    4:  		/* mtspr CTR, R11 */
		/* 8223A56Ch case    4:*/		regs.CTR = regs.R11;
		/* 8223A56Ch case    4:*/		return 0x8223A570;
		  /* 8223A570h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8223A570h case    5:*/		if ( 1 ) { regs.LR = 0x8223A574; return (uint32)regs.CTR; }
		/* 8223A570h case    5:*/		return 0x8223A574;
		  /* 8223A574h */ case    6:  		/* lis R11, -32222 */
		/* 8223A574h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A574h case    6:*/		return 0x8223A578;
		  /* 8223A578h */ case    7:  		/* mr R5, R3 */
		/* 8223A578h case    7:*/		regs.R5 = regs.R3;
		/* 8223A578h case    7:*/		return 0x8223A57C;
		  /* 8223A57Ch */ case    8:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A57Ch case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A57Ch case    8:*/		return 0x8223A580;
		  /* 8223A580h */ case    9:  		/* mr R7, R30 */
		/* 8223A580h case    9:*/		regs.R7 = regs.R30;
		/* 8223A580h case    9:*/		return 0x8223A584;
		  /* 8223A584h */ case   10:  		/* li R4, 0 */
		/* 8223A584h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A584h case   10:*/		return 0x8223A588;
		  /* 8223A588h */ case   11:  		/* addi R6, R11, -12392 */
		/* 8223A588h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A588h case   11:*/		return 0x8223A58C;
		  /* 8223A58Ch */ case   12:  		/* bl -39316 */
		/* 8223A58Ch case   12:*/		regs.LR = 0x8223A590; return 0x82230BF8;
		/* 8223A58Ch case   12:*/		return 0x8223A590;
		  /* 8223A590h */ case   13:  		/* lwz R30, <#[R31 + 12]> */
		/* 8223A590h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A590h case   13:*/		return 0x8223A594;
		  /* 8223A594h */ case   14:  		/* mr R21, R3 */
		/* 8223A594h case   14:*/		regs.R21 = regs.R3;
		/* 8223A594h case   14:*/		return 0x8223A598;
		  /* 8223A598h */ case   15:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223A598h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223A598h case   15:*/		return 0x8223A59C;
		  /* 8223A59Ch */ case   16:  		/* lwz R11, <#[R3]> */
		/* 8223A59Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223A59Ch case   16:*/		return 0x8223A5A0;
		  /* 8223A5A0h */ case   17:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223A5A0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223A5A0h case   17:*/		return 0x8223A5A4;
		  /* 8223A5A4h */ case   18:  		/* mtspr CTR, R11 */
		/* 8223A5A4h case   18:*/		regs.CTR = regs.R11;
		/* 8223A5A4h case   18:*/		return 0x8223A5A8;
		  /* 8223A5A8h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8223A5A8h case   19:*/		if ( 1 ) { regs.LR = 0x8223A5AC; return (uint32)regs.CTR; }
		/* 8223A5A8h case   19:*/		return 0x8223A5AC;
		  /* 8223A5ACh */ case   20:  		/* lis R11, -32222 */
		/* 8223A5ACh case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A5ACh case   20:*/		return 0x8223A5B0;
	}
	return 0x8223A5B0;
} // Block from 8223A55Ch-8223A5B0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8223A5B0h
// Function '?MaybeExpandTwoSidedLighting@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A5B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A5B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A5B0);
		  /* 8223A5B0h */ case    0:  		/* mr R5, R3 */
		/* 8223A5B0h case    0:*/		regs.R5 = regs.R3;
		/* 8223A5B0h case    0:*/		return 0x8223A5B4;
		  /* 8223A5B4h */ case    1:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A5B4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A5B4h case    1:*/		return 0x8223A5B8;
		  /* 8223A5B8h */ case    2:  		/* mr R7, R30 */
		/* 8223A5B8h case    2:*/		regs.R7 = regs.R30;
		/* 8223A5B8h case    2:*/		return 0x8223A5BC;
		  /* 8223A5BCh */ case    3:  		/* li R4, 0 */
		/* 8223A5BCh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A5BCh case    3:*/		return 0x8223A5C0;
		  /* 8223A5C0h */ case    4:  		/* addi R6, R11, -12392 */
		/* 8223A5C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A5C0h case    4:*/		return 0x8223A5C4;
		  /* 8223A5C4h */ case    5:  		/* bl -39092 */
		/* 8223A5C4h case    5:*/		regs.LR = 0x8223A5C8; return 0x82230D10;
		/* 8223A5C4h case    5:*/		return 0x8223A5C8;
		  /* 8223A5C8h */ case    6:  		/* lwz R28, <#[R31 + 12]> */
		/* 8223A5C8h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A5C8h case    6:*/		return 0x8223A5CC;
		  /* 8223A5CCh */ case    7:  		/* mr R30, R3 */
		/* 8223A5CCh case    7:*/		regs.R30 = regs.R3;
		/* 8223A5CCh case    7:*/		return 0x8223A5D0;
		  /* 8223A5D0h */ case    8:  		/* lwz R3, <#[R28 + 1488]> */
		/* 8223A5D0h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x000005D0) );
		/* 8223A5D0h case    8:*/		return 0x8223A5D4;
		  /* 8223A5D4h */ case    9:  		/* lwz R11, <#[R3]> */
		/* 8223A5D4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223A5D4h case    9:*/		return 0x8223A5D8;
		  /* 8223A5D8h */ case   10:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223A5D8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223A5D8h case   10:*/		return 0x8223A5DC;
		  /* 8223A5DCh */ case   11:  		/* mtspr CTR, R11 */
		/* 8223A5DCh case   11:*/		regs.CTR = regs.R11;
		/* 8223A5DCh case   11:*/		return 0x8223A5E0;
		  /* 8223A5E0h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 8223A5E0h case   12:*/		if ( 1 ) { regs.LR = 0x8223A5E4; return (uint32)regs.CTR; }
		/* 8223A5E0h case   12:*/		return 0x8223A5E4;
		  /* 8223A5E4h */ case   13:  		/* lis R11, -32222 */
		/* 8223A5E4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A5E4h case   13:*/		return 0x8223A5E8;
		  /* 8223A5E8h */ case   14:  		/* mr R5, R3 */
		/* 8223A5E8h case   14:*/		regs.R5 = regs.R3;
		/* 8223A5E8h case   14:*/		return 0x8223A5EC;
		  /* 8223A5ECh */ case   15:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A5ECh case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A5ECh case   15:*/		return 0x8223A5F0;
		  /* 8223A5F0h */ case   16:  		/* li R4, 0 */
		/* 8223A5F0h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A5F0h case   16:*/		return 0x8223A5F4;
		  /* 8223A5F4h */ case   17:  		/* addi R6, R11, -12392 */
		/* 8223A5F4h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A5F4h case   17:*/		return 0x8223A5F8;
		  /* 8223A5F8h */ case   18:  		/* mr R7, R28 */
		/* 8223A5F8h case   18:*/		regs.R7 = regs.R28;
		/* 8223A5F8h case   18:*/		return 0x8223A5FC;
		  /* 8223A5FCh */ case   19:  		/* bl -38868 */
		/* 8223A5FCh case   19:*/		regs.LR = 0x8223A600; return 0x82230E28;
		/* 8223A5FCh case   19:*/		return 0x8223A600;
		  /* 8223A600h */ case   20:  		/* mr R28, R3 */
		/* 8223A600h case   20:*/		regs.R28 = regs.R3;
		/* 8223A600h case   20:*/		return 0x8223A604;
		  /* 8223A604h */ case   21:  		/* cmpwi CR6, R21, 1 */
		/* 8223A604h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000001);
		/* 8223A604h case   21:*/		return 0x8223A608;
		  /* 8223A608h */ case   22:  		/* bc 4, CR6_EQ, 456 */
		/* 8223A608h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8223A7D0;  }
		/* 8223A608h case   22:*/		return 0x8223A60C;
		  /* 8223A60Ch */ case   23:  		/* lis R11, -32222 */
		/* 8223A60Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A60Ch case   23:*/		return 0x8223A610;
		  /* 8223A610h */ case   24:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223A610h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A610h case   24:*/		return 0x8223A614;
		  /* 8223A614h */ case   25:  		/* addi R5, R1, 92 */
		/* 8223A614h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5C);
		/* 8223A614h case   25:*/		return 0x8223A618;
		  /* 8223A618h */ case   26:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A618h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A618h case   26:*/		return 0x8223A61C;
		  /* 8223A61Ch */ case   27:  		/* addi R6, R11, -12392 */
		/* 8223A61Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A61Ch case   27:*/		return 0x8223A620;
		  /* 8223A620h */ case   28:  		/* li R4, 0 */
		/* 8223A620h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A620h case   28:*/		return 0x8223A624;
		  /* 8223A624h */ case   29:  		/* bl -26516 */
		/* 8223A624h case   29:*/		regs.LR = 0x8223A628; return 0x82233E90;
		/* 8223A624h case   29:*/		return 0x8223A628;
		  /* 8223A628h */ case   30:  		/* lis R11, -32252 */
		/* 8223A628h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223A628h case   30:*/		return 0x8223A62C;
		  /* 8223A62Ch */ case   31:  		/* cmpwi CR6, R3, 1 */
		/* 8223A62Ch case   31:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223A62Ch case   31:*/		return 0x8223A630;
		  /* 8223A630h */ case   32:  		/* addi R30, R11, 9164 */
		/* 8223A630h case   32:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x23CC);
		/* 8223A630h case   32:*/		return 0x8223A634;
		  /* 8223A634h */ case   33:  		/* bc 12, CR6_EQ, 28 */
		/* 8223A634h case   33:*/		if ( regs.CR[6].eq ) { return 0x8223A650;  }
		/* 8223A634h case   33:*/		return 0x8223A638;
		  /* 8223A638h */ case   34:  		/* mr R6, R23 */
		/* 8223A638h case   34:*/		regs.R6 = regs.R23;
		/* 8223A638h case   34:*/		return 0x8223A63C;
		  /* 8223A63Ch */ case   35:  		/* mr R5, R30 */
		/* 8223A63Ch case   35:*/		regs.R5 = regs.R30;
		/* 8223A63Ch case   35:*/		return 0x8223A640;
		  /* 8223A640h */ case   36:  		/* mr R4, R24 */
		/* 8223A640h case   36:*/		regs.R4 = regs.R24;
		/* 8223A640h case   36:*/		return 0x8223A644;
		  /* 8223A644h */ case   37:  		/* li R7, 1554 */
		/* 8223A644h case   37:*/		cpu::op::li<0>(regs,&regs.R7,0x612);
		/* 8223A644h case   37:*/		return 0x8223A648;
		  /* 8223A648h */ case   38:  		/* li R3, 0 */
		/* 8223A648h case   38:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A648h case   38:*/		return 0x8223A64C;
		  /* 8223A64Ch */ case   39:  		/* bl -928324 */
		/* 8223A64Ch case   39:*/		regs.LR = 0x8223A650; return 0x82157C08;
		/* 8223A64Ch case   39:*/		return 0x8223A650;
	}
	return 0x8223A650;
} // Block from 8223A5B0h-8223A650h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8223A650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A650);
		  /* 8223A650h */ case    0:  		/* lis R11, -32222 */
		/* 8223A650h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A650h case    0:*/		return 0x8223A654;
		  /* 8223A654h */ case    1:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223A654h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A654h case    1:*/		return 0x8223A658;
	}
	return 0x8223A658;
} // Block from 8223A650h-8223A658h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223A658h
// Function '?MaybeExpandVertexFog@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A658);
		  /* 8223A658h */ case    0:  		/* addi R5, R1, 80 */
		/* 8223A658h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8223A658h case    0:*/		return 0x8223A65C;
		  /* 8223A65Ch */ case    1:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A65Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A65Ch case    1:*/		return 0x8223A660;
		  /* 8223A660h */ case    2:  		/* addi R6, R11, -12392 */
		/* 8223A660h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A660h case    2:*/		return 0x8223A664;
		  /* 8223A664h */ case    3:  		/* li R4, 0 */
		/* 8223A664h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A664h case    3:*/		return 0x8223A668;
		  /* 8223A668h */ case    4:  		/* bl -26424 */
		/* 8223A668h case    4:*/		regs.LR = 0x8223A66C; return 0x82233F30;
		/* 8223A668h case    4:*/		return 0x8223A66C;
		  /* 8223A66Ch */ case    5:  		/* cmpwi CR6, R3, 1 */
		/* 8223A66Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223A66Ch case    5:*/		return 0x8223A670;
		  /* 8223A670h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 8223A670h case    6:*/		if ( regs.CR[6].eq ) { return 0x8223A68C;  }
		/* 8223A670h case    6:*/		return 0x8223A674;
		  /* 8223A674h */ case    7:  		/* mr R6, R23 */
		/* 8223A674h case    7:*/		regs.R6 = regs.R23;
		/* 8223A674h case    7:*/		return 0x8223A678;
		  /* 8223A678h */ case    8:  		/* mr R5, R30 */
		/* 8223A678h case    8:*/		regs.R5 = regs.R30;
		/* 8223A678h case    8:*/		return 0x8223A67C;
		  /* 8223A67Ch */ case    9:  		/* mr R4, R24 */
		/* 8223A67Ch case    9:*/		regs.R4 = regs.R24;
		/* 8223A67Ch case    9:*/		return 0x8223A680;
		  /* 8223A680h */ case   10:  		/* li R7, 1558 */
		/* 8223A680h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x616);
		/* 8223A680h case   10:*/		return 0x8223A684;
		  /* 8223A684h */ case   11:  		/* li R3, 0 */
		/* 8223A684h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A684h case   11:*/		return 0x8223A688;
		  /* 8223A688h */ case   12:  		/* bl -928384 */
		/* 8223A688h case   12:*/		regs.LR = 0x8223A68C; return 0x82157C08;
		/* 8223A688h case   12:*/		return 0x8223A68C;
	}
	return 0x8223A68C;
} // Block from 8223A658h-8223A68Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223A68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A68C);
		  /* 8223A68Ch */ case    0:  		/* lfs FR0, <#[R1 + 80]> */
		/* 8223A68Ch case    0:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8223A68Ch case    0:*/		return 0x8223A690;
		  /* 8223A690h */ case    1:  		/* lis R11, -32256 */
		/* 8223A690h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8223A690h case    1:*/		return 0x8223A694;
		  /* 8223A694h */ case    2:  		/* lfs FR13, <#[R1 + 92]> */
		/* 8223A694h case    2:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R1 + 0x0000005C) );
		/* 8223A694h case    2:*/		return 0x8223A698;
		  /* 8223A698h */ case    3:  		/* li R3, 18 */
		/* 8223A698h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x12);
		/* 8223A698h case    3:*/		return 0x8223A69C;
		  /* 8223A69Ch */ case    4:  		/* fsubs FR13, FR0, FR13 */
		/* 8223A69Ch case    4:*/		cpu::op::fsubs<0>(regs,&regs.FR13,regs.FR0,regs.FR13);
		/* 8223A69Ch case    4:*/		return 0x8223A6A0;
		  /* 8223A6A0h */ case    5:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223A6A0h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A6A0h case    5:*/		return 0x8223A6A4;
		  /* 8223A6A4h */ case    6:  		/* lfs FR0, <#[R11 + 1792]> */
		/* 8223A6A4h case    6:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000700) );
		/* 8223A6A4h case    6:*/		return 0x8223A6A8;
		  /* 8223A6A8h */ case    7:  		/* fdivs FR31, FR0, FR13 */
		/* 8223A6A8h case    7:*/		cpu::op::fdivs<0>(regs,&regs.FR31,regs.FR0,regs.FR13);
		/* 8223A6A8h case    7:*/		return 0x8223A6AC;
		  /* 8223A6ACh */ case    8:  		/* bl 112772 */
		/* 8223A6ACh case    8:*/		regs.LR = 0x8223A6B0; return 0x82255F30;
		/* 8223A6ACh case    8:*/		return 0x8223A6B0;
		  /* 8223A6B0h */ case    9:  		/* mr R5, R26 */
		/* 8223A6B0h case    9:*/		regs.R5 = regs.R26;
		/* 8223A6B0h case    9:*/		return 0x8223A6B4;
		  /* 8223A6B4h */ case   10:  		/* li R4, 0 */
		/* 8223A6B4h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A6B4h case   10:*/		return 0x8223A6B8;
		  /* 8223A6B8h */ case   11:  		/* mr R30, R3 */
		/* 8223A6B8h case   11:*/		regs.R30 = regs.R3;
		/* 8223A6B8h case   11:*/		return 0x8223A6BC;
		  /* 8223A6BCh */ case   12:  		/* bl 113884 */
		/* 8223A6BCh case   12:*/		regs.LR = 0x8223A6C0; return 0x82256398;
		/* 8223A6BCh case   12:*/		return 0x8223A6C0;
		  /* 8223A6C0h */ case   13:  		/* lfs FR4, <#[R1 + 80]> */
		/* 8223A6C0h case   13:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000050) );
		/* 8223A6C0h case   13:*/		return 0x8223A6C4;
		  /* 8223A6C4h */ case   14:  		/* mr R3, R30 */
		/* 8223A6C4h case   14:*/		regs.R3 = regs.R30;
		/* 8223A6C4h case   14:*/		return 0x8223A6C8;
		  /* 8223A6C8h */ case   15:  		/* fmr FR3, FR4 */
		/* 8223A6C8h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 8223A6C8h case   15:*/		return 0x8223A6CC;
		  /* 8223A6CCh */ case   16:  		/* li R5, 1 */
		/* 8223A6CCh case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223A6CCh case   16:*/		return 0x8223A6D0;
		  /* 8223A6D0h */ case   17:  		/* fmr FR2, FR4 */
		/* 8223A6D0h case   17:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 8223A6D0h case   17:*/		return 0x8223A6D4;
		  /* 8223A6D4h */ case   18:  		/* mr R4, R31 */
		/* 8223A6D4h case   18:*/		regs.R4 = regs.R31;
		/* 8223A6D4h case   18:*/		return 0x8223A6D8;
		  /* 8223A6D8h */ case   19:  		/* fmr FR1, FR4 */
		/* 8223A6D8h case   19:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 8223A6D8h case   19:*/		return 0x8223A6DC;
		  /* 8223A6DCh */ case   20:  		/* bl 116796 */
		/* 8223A6DCh case   20:*/		regs.LR = 0x8223A6E0; return 0x82256F18;
		/* 8223A6DCh case   20:*/		return 0x8223A6E0;
		  /* 8223A6E0h */ case   21:  		/* lis R11, -32252 */
		/* 8223A6E0h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223A6E0h case   21:*/		return 0x8223A6E4;
		  /* 8223A6E4h */ case   22:  		/* li R10, 23 */
		/* 8223A6E4h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x17);
		/* 8223A6E4h case   22:*/		return 0x8223A6E8;
		  /* 8223A6E8h */ case   23:  		/* stw R29, <#[R30 + 64]> */
		/* 8223A6E8h case   23:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000040) );
		/* 8223A6E8h case   23:*/		return 0x8223A6EC;
		  /* 8223A6ECh */ case   24:  		/* stb R22, <#[R30 + 154]> */
		/* 8223A6ECh case   24:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R30 + 0x0000009A) );
		/* 8223A6ECh case   24:*/		return 0x8223A6F0;
		  /* 8223A6F0h */ case   25:  		/* mr R4, R30 */
		/* 8223A6F0h case   25:*/		regs.R4 = regs.R30;
		/* 8223A6F0h case   25:*/		return 0x8223A6F4;
		  /* 8223A6F4h */ case   26:  		/* stw R10, <#[R30 + 88]> */
		/* 8223A6F4h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000058) );
		/* 8223A6F4h case   26:*/		return 0x8223A6F8;
		  /* 8223A6F8h */ case   27:  		/* mr R3, R31 */
		/* 8223A6F8h case   27:*/		regs.R3 = regs.R31;
		/* 8223A6F8h case   27:*/		return 0x8223A6FC;
		  /* 8223A6FCh */ case   28:  		/* lwz R11, <#[R11 + 8480]> */
		/* 8223A6FCh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00002120) );
		/* 8223A6FCh case   28:*/		return 0x8223A700;
		  /* 8223A700h */ case   29:  		/* stw R11, <#[R30 + 136]> */
		/* 8223A700h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000088) );
		/* 8223A700h case   29:*/		return 0x8223A704;
		  /* 8223A704h */ case   30:  		/* bl -16732 */
		/* 8223A704h case   30:*/		regs.LR = 0x8223A708; return 0x822365A8;
		/* 8223A704h case   30:*/		return 0x8223A708;
		  /* 8223A708h */ case   31:  		/* mr R4, R30 */
		/* 8223A708h case   31:*/		regs.R4 = regs.R30;
		/* 8223A708h case   31:*/		return 0x8223A70C;
		  /* 8223A70Ch */ case   32:  		/* mr R3, R27 */
		/* 8223A70Ch case   32:*/		regs.R3 = regs.R27;
		/* 8223A70Ch case   32:*/		return 0x8223A710;
		  /* 8223A710h */ case   33:  		/* bl 124960 */
		/* 8223A710h case   33:*/		regs.LR = 0x8223A714; return 0x82258F30;
		/* 8223A710h case   33:*/		return 0x8223A714;
		  /* 8223A714h */ case   34:  		/* mr R3, R30 */
		/* 8223A714h case   34:*/		regs.R3 = regs.R30;
		/* 8223A714h case   34:*/		return 0x8223A718;
		  /* 8223A718h */ case   35:  		/* bl 112808 */
		/* 8223A718h case   35:*/		regs.LR = 0x8223A71C; return 0x82255FC0;
		/* 8223A718h case   35:*/		return 0x8223A71C;
		  /* 8223A71Ch */ case   36:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223A71Ch case   36:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223A71Ch case   36:*/		return 0x8223A720;
		  /* 8223A720h */ case   37:  		/* bc 4, CR0_EQ, 28 */
		/* 8223A720h case   37:*/		if ( !regs.CR[0].eq ) { return 0x8223A73C;  }
		/* 8223A720h case   37:*/		return 0x8223A724;
		  /* 8223A724h */ case   38:  		/* mr R6, R23 */
		/* 8223A724h case   38:*/		regs.R6 = regs.R23;
		/* 8223A724h case   38:*/		return 0x8223A728;
		  /* 8223A728h */ case   39:  		/* mr R5, R25 */
		/* 8223A728h case   39:*/		regs.R5 = regs.R25;
		/* 8223A728h case   39:*/		return 0x8223A72C;
		  /* 8223A72Ch */ case   40:  		/* mr R4, R24 */
		/* 8223A72Ch case   40:*/		regs.R4 = regs.R24;
		/* 8223A72Ch case   40:*/		return 0x8223A730;
		  /* 8223A730h */ case   41:  		/* li R7, 1570 */
		/* 8223A730h case   41:*/		cpu::op::li<0>(regs,&regs.R7,0x622);
		/* 8223A730h case   41:*/		return 0x8223A734;
		  /* 8223A734h */ case   42:  		/* li R3, 0 */
		/* 8223A734h case   42:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A734h case   42:*/		return 0x8223A738;
		  /* 8223A738h */ case   43:  		/* bl -928560 */
		/* 8223A738h case   43:*/		regs.LR = 0x8223A73C; return 0x82157C08;
		/* 8223A738h case   43:*/		return 0x8223A73C;
	}
	return 0x8223A73C;
} // Block from 8223A68Ch-8223A73Ch (44 instructions)

//////////////////////////////////////////////////////
// Block at 8223A73Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A73C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A73C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A73C);
		  /* 8223A73Ch */ case    0:  		/* li R3, 19 */
		/* 8223A73Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 8223A73Ch case    0:*/		return 0x8223A740;
	}
	return 0x8223A740;
} // Block from 8223A73Ch-8223A740h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223A740h
// Function '?InsertInstructionsForPointAA@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A740);
		  /* 8223A740h */ case    0:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223A740h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A740h case    0:*/		return 0x8223A744;
		  /* 8223A744h */ case    1:  		/* bl 112620 */
		/* 8223A744h case    1:*/		regs.LR = 0x8223A748; return 0x82255F30;
		/* 8223A744h case    1:*/		return 0x8223A748;
		  /* 8223A748h */ case    2:  		/* mr R5, R26 */
		/* 8223A748h case    2:*/		regs.R5 = regs.R26;
		/* 8223A748h case    2:*/		return 0x8223A74C;
		  /* 8223A74Ch */ case    3:  		/* li R4, 0 */
		/* 8223A74Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A74Ch case    3:*/		return 0x8223A750;
		  /* 8223A750h */ case    4:  		/* mr R30, R3 */
		/* 8223A750h case    4:*/		regs.R30 = regs.R3;
		/* 8223A750h case    4:*/		return 0x8223A754;
		  /* 8223A754h */ case    5:  		/* bl 113732 */
		/* 8223A754h case    5:*/		regs.LR = 0x8223A758; return 0x82256398;
		/* 8223A754h case    5:*/		return 0x8223A758;
		  /* 8223A758h */ case    6:  		/* stb R22, <#[R30 + 164]> */
		/* 8223A758h case    6:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R30 + 0x000000A4) );
		/* 8223A758h case    6:*/		return 0x8223A75C;
		  /* 8223A75Ch */ case    7:  		/* mr R3, R30 */
		/* 8223A75Ch case    7:*/		regs.R3 = regs.R30;
		/* 8223A75Ch case    7:*/		return 0x8223A760;
		  /* 8223A760h */ case    8:  		/* mr R5, R26 */
		/* 8223A760h case    8:*/		regs.R5 = regs.R26;
		/* 8223A760h case    8:*/		return 0x8223A764;
		  /* 8223A764h */ case    9:  		/* li R4, 1 */
		/* 8223A764h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223A764h case    9:*/		return 0x8223A768;
		  /* 8223A768h */ case   10:  		/* bl 113712 */
		/* 8223A768h case   10:*/		regs.LR = 0x8223A76C; return 0x82256398;
		/* 8223A768h case   10:*/		return 0x8223A76C;
		  /* 8223A76Ch */ case   11:  		/* mr R3, R30 */
		/* 8223A76Ch case   11:*/		regs.R3 = regs.R30;
		/* 8223A76Ch case   11:*/		return 0x8223A770;
		  /* 8223A770h */ case   12:  		/* li R5, 2 */
		/* 8223A770h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223A770h case   12:*/		return 0x8223A774;
		  /* 8223A774h */ case   13:  		/* fmr FR4, FR31 */
		/* 8223A774h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 8223A774h case   13:*/		return 0x8223A778;
		  /* 8223A778h */ case   14:  		/* mr R4, R31 */
		/* 8223A778h case   14:*/		regs.R4 = regs.R31;
		/* 8223A778h case   14:*/		return 0x8223A77C;
		  /* 8223A77Ch */ case   15:  		/* fmr FR3, FR31 */
		/* 8223A77Ch case   15:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 8223A77Ch case   15:*/		return 0x8223A780;
		  /* 8223A780h */ case   16:  		/* fmr FR2, FR31 */
		/* 8223A780h case   16:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 8223A780h case   16:*/		return 0x8223A784;
		  /* 8223A784h */ case   17:  		/* fmr FR1, FR31 */
		/* 8223A784h case   17:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8223A784h case   17:*/		return 0x8223A788;
		  /* 8223A788h */ case   18:  		/* bl 116624 */
		/* 8223A788h case   18:*/		regs.LR = 0x8223A78C; return 0x82256F18;
		/* 8223A788h case   18:*/		return 0x8223A78C;
		  /* 8223A78Ch */ case   19:  		/* mr R4, R30 */
		/* 8223A78Ch case   19:*/		regs.R4 = regs.R30;
		/* 8223A78Ch case   19:*/		return 0x8223A790;
		  /* 8223A790h */ case   20:  		/* mr R3, R31 */
		/* 8223A790h case   20:*/		regs.R3 = regs.R31;
		/* 8223A790h case   20:*/		return 0x8223A794;
		  /* 8223A794h */ case   21:  		/* bl -16876 */
		/* 8223A794h case   21:*/		regs.LR = 0x8223A798; return 0x822365A8;
		/* 8223A794h case   21:*/		return 0x8223A798;
		  /* 8223A798h */ case   22:  		/* mr R4, R30 */
		/* 8223A798h case   22:*/		regs.R4 = regs.R30;
		/* 8223A798h case   22:*/		return 0x8223A79C;
		  /* 8223A79Ch */ case   23:  		/* mr R3, R27 */
		/* 8223A79Ch case   23:*/		regs.R3 = regs.R27;
		/* 8223A79Ch case   23:*/		return 0x8223A7A0;
		  /* 8223A7A0h */ case   24:  		/* bl 124816 */
		/* 8223A7A0h case   24:*/		regs.LR = 0x8223A7A4; return 0x82258F30;
		/* 8223A7A0h case   24:*/		return 0x8223A7A4;
		  /* 8223A7A4h */ case   25:  		/* mr R3, R30 */
		/* 8223A7A4h case   25:*/		regs.R3 = regs.R30;
		/* 8223A7A4h case   25:*/		return 0x8223A7A8;
		  /* 8223A7A8h */ case   26:  		/* bl 112664 */
		/* 8223A7A8h case   26:*/		regs.LR = 0x8223A7AC; return 0x82255FC0;
		/* 8223A7A8h case   26:*/		return 0x8223A7AC;
		  /* 8223A7ACh */ case   27:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223A7ACh case   27:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223A7ACh case   27:*/		return 0x8223A7B0;
		  /* 8223A7B0h */ case   28:  		/* bc 4, CR0_EQ, 772 */
		/* 8223A7B0h case   28:*/		if ( !regs.CR[0].eq ) { return 0x8223AAB4;  }
		/* 8223A7B0h case   28:*/		return 0x8223A7B4;
		  /* 8223A7B4h */ case   29:  		/* li R7, 1579 */
		/* 8223A7B4h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x62B);
		/* 8223A7B4h case   29:*/		return 0x8223A7B8;
	}
	return 0x8223A7B8;
} // Block from 8223A740h-8223A7B8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8223A7B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A7B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A7B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A7B8);
		  /* 8223A7B8h */ case    0:  		/* mr R6, R23 */
		/* 8223A7B8h case    0:*/		regs.R6 = regs.R23;
		/* 8223A7B8h case    0:*/		return 0x8223A7BC;
		  /* 8223A7BCh */ case    1:  		/* mr R5, R25 */
		/* 8223A7BCh case    1:*/		regs.R5 = regs.R25;
		/* 8223A7BCh case    1:*/		return 0x8223A7C0;
		  /* 8223A7C0h */ case    2:  		/* mr R4, R24 */
		/* 8223A7C0h case    2:*/		regs.R4 = regs.R24;
		/* 8223A7C0h case    2:*/		return 0x8223A7C4;
		  /* 8223A7C4h */ case    3:  		/* li R3, 0 */
		/* 8223A7C4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A7C4h case    3:*/		return 0x8223A7C8;
		  /* 8223A7C8h */ case    4:  		/* bl -928704 */
		/* 8223A7C8h case    4:*/		regs.LR = 0x8223A7CC; return 0x82157C08;
		/* 8223A7C8h case    4:*/		return 0x8223A7CC;
		  /* 8223A7CCh */ case    5:  		/* b 744 */
		/* 8223A7CCh case    5:*/		return 0x8223AAB4;
		/* 8223A7CCh case    5:*/		return 0x8223A7D0;
	}
	return 0x8223A7D0;
} // Block from 8223A7B8h-8223A7D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223A7D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A7D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A7D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A7D0);
		  /* 8223A7D0h */ case    0:  		/* cmpwi CR6, R30, 1 */
		/* 8223A7D0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000001);
		/* 8223A7D0h case    0:*/		return 0x8223A7D4;
		  /* 8223A7D4h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8223A7D4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223A7E0;  }
		/* 8223A7D4h case    1:*/		return 0x8223A7D8;
		  /* 8223A7D8h */ case    2:  		/* cmpwi CR6, R28, 1 */
		/* 8223A7D8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000001);
		/* 8223A7D8h case    2:*/		return 0x8223A7DC;
		  /* 8223A7DCh */ case    3:  		/* bc 4, CR6_EQ, 724 */
		/* 8223A7DCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x8223AAB0;  }
		/* 8223A7DCh case    3:*/		return 0x8223A7E0;
	}
	return 0x8223A7E0;
} // Block from 8223A7D0h-8223A7E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223A7E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A7E0);
		  /* 8223A7E0h */ case    0:  		/* lis R11, -32222 */
		/* 8223A7E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223A7E0h case    0:*/		return 0x8223A7E4;
		  /* 8223A7E4h */ case    1:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223A7E4h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A7E4h case    1:*/		return 0x8223A7E8;
		  /* 8223A7E8h */ case    2:  		/* addi R5, R1, 88 */
		/* 8223A7E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 8223A7E8h case    2:*/		return 0x8223A7EC;
		  /* 8223A7ECh */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223A7ECh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223A7ECh case    3:*/		return 0x8223A7F0;
		  /* 8223A7F0h */ case    4:  		/* addi R6, R11, -12392 */
		/* 8223A7F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223A7F0h case    4:*/		return 0x8223A7F4;
		  /* 8223A7F4h */ case    5:  		/* li R4, 0 */
		/* 8223A7F4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A7F4h case    5:*/		return 0x8223A7F8;
		  /* 8223A7F8h */ case    6:  		/* bl -26664 */
		/* 8223A7F8h case    6:*/		regs.LR = 0x8223A7FC; return 0x82233FD0;
		/* 8223A7F8h case    6:*/		return 0x8223A7FC;
		  /* 8223A7FCh */ case    7:  		/* cmpwi CR6, R3, 1 */
		/* 8223A7FCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223A7FCh case    7:*/		return 0x8223A800;
		  /* 8223A800h */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 8223A800h case    8:*/		if ( regs.CR[6].eq ) { return 0x8223A820;  }
		/* 8223A800h case    8:*/		return 0x8223A804;
		  /* 8223A804h */ case    9:  		/* lis R11, -32252 */
		/* 8223A804h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223A804h case    9:*/		return 0x8223A808;
		  /* 8223A808h */ case   10:  		/* mr R6, R23 */
		/* 8223A808h case   10:*/		regs.R6 = regs.R23;
		/* 8223A808h case   10:*/		return 0x8223A80C;
		  /* 8223A80Ch */ case   11:  		/* addi R5, R11, 9164 */
		/* 8223A80Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x23CC);
		/* 8223A80Ch case   11:*/		return 0x8223A810;
		  /* 8223A810h */ case   12:  		/* mr R4, R24 */
		/* 8223A810h case   12:*/		regs.R4 = regs.R24;
		/* 8223A810h case   12:*/		return 0x8223A814;
		  /* 8223A814h */ case   13:  		/* li R7, 1588 */
		/* 8223A814h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x634);
		/* 8223A814h case   13:*/		return 0x8223A818;
		  /* 8223A818h */ case   14:  		/* li R3, 0 */
		/* 8223A818h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A818h case   14:*/		return 0x8223A81C;
		  /* 8223A81Ch */ case   15:  		/* bl -928788 */
		/* 8223A81Ch case   15:*/		regs.LR = 0x8223A820; return 0x82157C08;
		/* 8223A81Ch case   15:*/		return 0x8223A820;
	}
	return 0x8223A820;
} // Block from 8223A7E0h-8223A820h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8223A820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A820);
		  /* 8223A820h */ case    0:  		/* li R3, 19 */
		/* 8223A820h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 8223A820h case    0:*/		return 0x8223A824;
		  /* 8223A824h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223A824h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A824h case    1:*/		return 0x8223A828;
		  /* 8223A828h */ case    2:  		/* bl 112392 */
		/* 8223A828h case    2:*/		regs.LR = 0x8223A82C; return 0x82255F30;
		/* 8223A828h case    2:*/		return 0x8223A82C;
		  /* 8223A82Ch */ case    3:  		/* mr R5, R26 */
		/* 8223A82Ch case    3:*/		regs.R5 = regs.R26;
		/* 8223A82Ch case    3:*/		return 0x8223A830;
		  /* 8223A830h */ case    4:  		/* li R4, 0 */
		/* 8223A830h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A830h case    4:*/		return 0x8223A834;
		  /* 8223A834h */ case    5:  		/* mr R30, R3 */
		/* 8223A834h case    5:*/		regs.R30 = regs.R3;
		/* 8223A834h case    5:*/		return 0x8223A838;
		  /* 8223A838h */ case    6:  		/* bl 113504 */
		/* 8223A838h case    6:*/		regs.LR = 0x8223A83C; return 0x82256398;
		/* 8223A838h case    6:*/		return 0x8223A83C;
		  /* 8223A83Ch */ case    7:  		/* lis R11, -32252 */
		/* 8223A83Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223A83Ch case    7:*/		return 0x8223A840;
		  /* 8223A840h */ case    8:  		/* li R10, 23 */
		/* 8223A840h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x17);
		/* 8223A840h case    8:*/		return 0x8223A844;
		  /* 8223A844h */ case    9:  		/* stw R29, <#[R30 + 60]> */
		/* 8223A844h case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x0000003C) );
		/* 8223A844h case    9:*/		return 0x8223A848;
		  /* 8223A848h */ case   10:  		/* mr R3, R30 */
		/* 8223A848h case   10:*/		regs.R3 = regs.R30;
		/* 8223A848h case   10:*/		return 0x8223A84C;
		  /* 8223A84Ch */ case   11:  		/* stw R10, <#[R30 + 84]> */
		/* 8223A84Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000054) );
		/* 8223A84Ch case   11:*/		return 0x8223A850;
		  /* 8223A850h */ case   12:  		/* li R5, 2 */
		/* 8223A850h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223A850h case   12:*/		return 0x8223A854;
		  /* 8223A854h */ case   13:  		/* mr R4, R31 */
		/* 8223A854h case   13:*/		regs.R4 = regs.R31;
		/* 8223A854h case   13:*/		return 0x8223A858;
		  /* 8223A858h */ case   14:  		/* lwz R11, <#[R11 + 8480]> */
		/* 8223A858h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00002120) );
		/* 8223A858h case   14:*/		return 0x8223A85C;
		  /* 8223A85Ch */ case   15:  		/* stw R11, <#[R30 + 132]> */
		/* 8223A85Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000084) );
		/* 8223A85Ch case   15:*/		return 0x8223A860;
		  /* 8223A860h */ case   16:  		/* lfs FR4, <#[R1 + 88]> */
		/* 8223A860h case   16:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000058) );
		/* 8223A860h case   16:*/		return 0x8223A864;
		  /* 8223A864h */ case   17:  		/* fmr FR3, FR4 */
		/* 8223A864h case   17:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 8223A864h case   17:*/		return 0x8223A868;
		  /* 8223A868h */ case   18:  		/* fmr FR2, FR4 */
		/* 8223A868h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 8223A868h case   18:*/		return 0x8223A86C;
		  /* 8223A86Ch */ case   19:  		/* fmr FR1, FR4 */
		/* 8223A86Ch case   19:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 8223A86Ch case   19:*/		return 0x8223A870;
		  /* 8223A870h */ case   20:  		/* bl 116392 */
		/* 8223A870h case   20:*/		regs.LR = 0x8223A874; return 0x82256F18;
		/* 8223A870h case   20:*/		return 0x8223A874;
		  /* 8223A874h */ case   21:  		/* mr R4, R30 */
		/* 8223A874h case   21:*/		regs.R4 = regs.R30;
		/* 8223A874h case   21:*/		return 0x8223A878;
		  /* 8223A878h */ case   22:  		/* mr R3, R31 */
		/* 8223A878h case   22:*/		regs.R3 = regs.R31;
		/* 8223A878h case   22:*/		return 0x8223A87C;
		  /* 8223A87Ch */ case   23:  		/* bl -17108 */
		/* 8223A87Ch case   23:*/		regs.LR = 0x8223A880; return 0x822365A8;
		/* 8223A87Ch case   23:*/		return 0x8223A880;
		  /* 8223A880h */ case   24:  		/* mr R4, R30 */
		/* 8223A880h case   24:*/		regs.R4 = regs.R30;
		/* 8223A880h case   24:*/		return 0x8223A884;
		  /* 8223A884h */ case   25:  		/* mr R3, R27 */
		/* 8223A884h case   25:*/		regs.R3 = regs.R27;
		/* 8223A884h case   25:*/		return 0x8223A888;
		  /* 8223A888h */ case   26:  		/* bl 124584 */
		/* 8223A888h case   26:*/		regs.LR = 0x8223A88C; return 0x82258F30;
		/* 8223A888h case   26:*/		return 0x8223A88C;
		  /* 8223A88Ch */ case   27:  		/* mr R3, R30 */
		/* 8223A88Ch case   27:*/		regs.R3 = regs.R30;
		/* 8223A88Ch case   27:*/		return 0x8223A890;
		  /* 8223A890h */ case   28:  		/* bl 112432 */
		/* 8223A890h case   28:*/		regs.LR = 0x8223A894; return 0x82255FC0;
		/* 8223A890h case   28:*/		return 0x8223A894;
		  /* 8223A894h */ case   29:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223A894h case   29:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223A894h case   29:*/		return 0x8223A898;
		  /* 8223A898h */ case   30:  		/* bc 4, CR0_EQ, 28 */
		/* 8223A898h case   30:*/		if ( !regs.CR[0].eq ) { return 0x8223A8B4;  }
		/* 8223A898h case   30:*/		return 0x8223A89C;
		  /* 8223A89Ch */ case   31:  		/* mr R6, R23 */
		/* 8223A89Ch case   31:*/		regs.R6 = regs.R23;
		/* 8223A89Ch case   31:*/		return 0x8223A8A0;
		  /* 8223A8A0h */ case   32:  		/* mr R5, R25 */
		/* 8223A8A0h case   32:*/		regs.R5 = regs.R25;
		/* 8223A8A0h case   32:*/		return 0x8223A8A4;
		  /* 8223A8A4h */ case   33:  		/* mr R4, R24 */
		/* 8223A8A4h case   33:*/		regs.R4 = regs.R24;
		/* 8223A8A4h case   33:*/		return 0x8223A8A8;
		  /* 8223A8A8h */ case   34:  		/* li R7, 1596 */
		/* 8223A8A8h case   34:*/		cpu::op::li<0>(regs,&regs.R7,0x63C);
		/* 8223A8A8h case   34:*/		return 0x8223A8AC;
		  /* 8223A8ACh */ case   35:  		/* li R3, 0 */
		/* 8223A8ACh case   35:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A8ACh case   35:*/		return 0x8223A8B0;
		  /* 8223A8B0h */ case   36:  		/* bl -928936 */
		/* 8223A8B0h case   36:*/		regs.LR = 0x8223A8B4; return 0x82157C08;
		/* 8223A8B0h case   36:*/		return 0x8223A8B4;
	}
	return 0x8223A8B4;
} // Block from 8223A820h-8223A8B4h (37 instructions)

//////////////////////////////////////////////////////
// Block at 8223A8B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A8B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A8B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A8B4);
		  /* 8223A8B4h */ case    0:  		/* cmpwi CR6, R28, 1 */
		/* 8223A8B4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000001);
		/* 8223A8B4h case    0:*/		return 0x8223A8B8;
		  /* 8223A8B8h */ case    1:  		/* bc 4, CR6_EQ, 128 */
		/* 8223A8B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223A938;  }
		/* 8223A8B8h case    1:*/		return 0x8223A8BC;
		  /* 8223A8BCh */ case    2:  		/* li R3, 19 */
		/* 8223A8BCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 8223A8BCh case    2:*/		return 0x8223A8C0;
		  /* 8223A8C0h */ case    3:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223A8C0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A8C0h case    3:*/		return 0x8223A8C4;
		  /* 8223A8C4h */ case    4:  		/* bl 112236 */
		/* 8223A8C4h case    4:*/		regs.LR = 0x8223A8C8; return 0x82255F30;
		/* 8223A8C4h case    4:*/		return 0x8223A8C8;
		  /* 8223A8C8h */ case    5:  		/* mr R5, R26 */
		/* 8223A8C8h case    5:*/		regs.R5 = regs.R26;
		/* 8223A8C8h case    5:*/		return 0x8223A8CC;
		  /* 8223A8CCh */ case    6:  		/* li R4, 0 */
		/* 8223A8CCh case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A8CCh case    6:*/		return 0x8223A8D0;
		  /* 8223A8D0h */ case    7:  		/* mr R30, R3 */
		/* 8223A8D0h case    7:*/		regs.R30 = regs.R3;
		/* 8223A8D0h case    7:*/		return 0x8223A8D4;
		  /* 8223A8D4h */ case    8:  		/* bl 113348 */
		/* 8223A8D4h case    8:*/		regs.LR = 0x8223A8D8; return 0x82256398;
		/* 8223A8D4h case    8:*/		return 0x8223A8D8;
		  /* 8223A8D8h */ case    9:  		/* mr R3, R30 */
		/* 8223A8D8h case    9:*/		regs.R3 = regs.R30;
		/* 8223A8D8h case    9:*/		return 0x8223A8DC;
		  /* 8223A8DCh */ case   10:  		/* mr R5, R26 */
		/* 8223A8DCh case   10:*/		regs.R5 = regs.R26;
		/* 8223A8DCh case   10:*/		return 0x8223A8E0;
		  /* 8223A8E0h */ case   11:  		/* li R4, 1 */
		/* 8223A8E0h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223A8E0h case   11:*/		return 0x8223A8E4;
		  /* 8223A8E4h */ case   12:  		/* bl 113332 */
		/* 8223A8E4h case   12:*/		regs.LR = 0x8223A8E8; return 0x82256398;
		/* 8223A8E4h case   12:*/		return 0x8223A8E8;
		  /* 8223A8E8h */ case   13:  		/* mr R3, R30 */
		/* 8223A8E8h case   13:*/		regs.R3 = regs.R30;
		/* 8223A8E8h case   13:*/		return 0x8223A8EC;
		  /* 8223A8ECh */ case   14:  		/* mr R5, R26 */
		/* 8223A8ECh case   14:*/		regs.R5 = regs.R26;
		/* 8223A8ECh case   14:*/		return 0x8223A8F0;
		  /* 8223A8F0h */ case   15:  		/* li R4, 2 */
		/* 8223A8F0h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8223A8F0h case   15:*/		return 0x8223A8F4;
		  /* 8223A8F4h */ case   16:  		/* bl 113316 */
		/* 8223A8F4h case   16:*/		regs.LR = 0x8223A8F8; return 0x82256398;
		/* 8223A8F4h case   16:*/		return 0x8223A8F8;
		  /* 8223A8F8h */ case   17:  		/* mr R4, R30 */
		/* 8223A8F8h case   17:*/		regs.R4 = regs.R30;
		/* 8223A8F8h case   17:*/		return 0x8223A8FC;
		  /* 8223A8FCh */ case   18:  		/* mr R3, R31 */
		/* 8223A8FCh case   18:*/		regs.R3 = regs.R31;
		/* 8223A8FCh case   18:*/		return 0x8223A900;
		  /* 8223A900h */ case   19:  		/* bl -17240 */
		/* 8223A900h case   19:*/		regs.LR = 0x8223A904; return 0x822365A8;
		/* 8223A900h case   19:*/		return 0x8223A904;
		  /* 8223A904h */ case   20:  		/* mr R4, R30 */
		/* 8223A904h case   20:*/		regs.R4 = regs.R30;
		/* 8223A904h case   20:*/		return 0x8223A908;
		  /* 8223A908h */ case   21:  		/* mr R3, R27 */
		/* 8223A908h case   21:*/		regs.R3 = regs.R27;
		/* 8223A908h case   21:*/		return 0x8223A90C;
		  /* 8223A90Ch */ case   22:  		/* bl 124452 */
		/* 8223A90Ch case   22:*/		regs.LR = 0x8223A910; return 0x82258F30;
		/* 8223A90Ch case   22:*/		return 0x8223A910;
		  /* 8223A910h */ case   23:  		/* mr R3, R30 */
		/* 8223A910h case   23:*/		regs.R3 = regs.R30;
		/* 8223A910h case   23:*/		return 0x8223A914;
		  /* 8223A914h */ case   24:  		/* bl 112300 */
		/* 8223A914h case   24:*/		regs.LR = 0x8223A918; return 0x82255FC0;
		/* 8223A914h case   24:*/		return 0x8223A918;
		  /* 8223A918h */ case   25:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223A918h case   25:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223A918h case   25:*/		return 0x8223A91C;
		  /* 8223A91Ch */ case   26:  		/* bc 4, CR0_EQ, 28 */
		/* 8223A91Ch case   26:*/		if ( !regs.CR[0].eq ) { return 0x8223A938;  }
		/* 8223A91Ch case   26:*/		return 0x8223A920;
		  /* 8223A920h */ case   27:  		/* mr R6, R23 */
		/* 8223A920h case   27:*/		regs.R6 = regs.R23;
		/* 8223A920h case   27:*/		return 0x8223A924;
		  /* 8223A924h */ case   28:  		/* mr R5, R25 */
		/* 8223A924h case   28:*/		regs.R5 = regs.R25;
		/* 8223A924h case   28:*/		return 0x8223A928;
		  /* 8223A928h */ case   29:  		/* mr R4, R24 */
		/* 8223A928h case   29:*/		regs.R4 = regs.R24;
		/* 8223A928h case   29:*/		return 0x8223A92C;
		  /* 8223A92Ch */ case   30:  		/* li R7, 1605 */
		/* 8223A92Ch case   30:*/		cpu::op::li<0>(regs,&regs.R7,0x645);
		/* 8223A92Ch case   30:*/		return 0x8223A930;
		  /* 8223A930h */ case   31:  		/* li R3, 0 */
		/* 8223A930h case   31:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A930h case   31:*/		return 0x8223A934;
		  /* 8223A934h */ case   32:  		/* bl -929068 */
		/* 8223A934h case   32:*/		regs.LR = 0x8223A938; return 0x82157C08;
		/* 8223A934h case   32:*/		return 0x8223A938;
	}
	return 0x8223A938;
} // Block from 8223A8B4h-8223A938h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8223A938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A938);
		  /* 8223A938h */ case    0:  		/* lis R11, -32252 */
		/* 8223A938h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223A938h case    0:*/		return 0x8223A93C;
		  /* 8223A93Ch */ case    1:  		/* lfd FR1, <#[R11 + 9392]> */
		/* 8223A93Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x000024B0) );
		/* 8223A93Ch case    1:*/		return 0x8223A940;
		  /* 8223A940h */ case    2:  		/* bl -1715048 */
		/* 8223A940h case    2:*/		regs.LR = 0x8223A944; return 0x82097DD8;
		/* 8223A940h case    2:*/		return 0x8223A944;
		  /* 8223A944h */ case    3:  		/* lis R11, -32255 */
		/* 8223A944h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8223A944h case    3:*/		return 0x8223A948;
		  /* 8223A948h */ case    4:  		/* fmr FR31, FR1 */
		/* 8223A948h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 8223A948h case    4:*/		return 0x8223A94C;
		  /* 8223A94Ch */ case    5:  		/* lfd FR1, <#[R11 - 24504]> */
		/* 8223A94Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 8223A94Ch case    5:*/		return 0x8223A950;
		  /* 8223A950h */ case    6:  		/* bl -1715064 */
		/* 8223A950h case    6:*/		regs.LR = 0x8223A954; return 0x82097DD8;
		/* 8223A950h case    6:*/		return 0x8223A954;
		  /* 8223A954h */ case    7:  		/* fdiv FR0, FR31, FR1 */
		/* 8223A954h case    7:*/		cpu::op::fdiv<0>(regs,&regs.FR0,regs.FR31,regs.FR1);
		/* 8223A954h case    7:*/		return 0x8223A958;
		  /* 8223A958h */ case    8:  		/* li R3, 19 */
		/* 8223A958h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 8223A958h case    8:*/		return 0x8223A95C;
		  /* 8223A95Ch */ case    9:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223A95Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A95Ch case    9:*/		return 0x8223A960;
		  /* 8223A960h */ case   10:  		/* frsp FR31, FR0 */
		/* 8223A960h case   10:*/		cpu::op::frsp<0>(regs,&regs.FR31,regs.FR0);
		/* 8223A960h case   10:*/		return 0x8223A964;
		  /* 8223A964h */ case   11:  		/* bl 112076 */
		/* 8223A964h case   11:*/		regs.LR = 0x8223A968; return 0x82255F30;
		/* 8223A964h case   11:*/		return 0x8223A968;
		  /* 8223A968h */ case   12:  		/* mr R5, R26 */
		/* 8223A968h case   12:*/		regs.R5 = regs.R26;
		/* 8223A968h case   12:*/		return 0x8223A96C;
		  /* 8223A96Ch */ case   13:  		/* li R4, 0 */
		/* 8223A96Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A96Ch case   13:*/		return 0x8223A970;
		  /* 8223A970h */ case   14:  		/* mr R30, R3 */
		/* 8223A970h case   14:*/		regs.R30 = regs.R3;
		/* 8223A970h case   14:*/		return 0x8223A974;
		  /* 8223A974h */ case   15:  		/* bl 113188 */
		/* 8223A974h case   15:*/		regs.LR = 0x8223A978; return 0x82256398;
		/* 8223A974h case   15:*/		return 0x8223A978;
		  /* 8223A978h */ case   16:  		/* mr R3, R30 */
		/* 8223A978h case   16:*/		regs.R3 = regs.R30;
		/* 8223A978h case   16:*/		return 0x8223A97C;
		  /* 8223A97Ch */ case   17:  		/* mr R5, R26 */
		/* 8223A97Ch case   17:*/		regs.R5 = regs.R26;
		/* 8223A97Ch case   17:*/		return 0x8223A980;
		  /* 8223A980h */ case   18:  		/* li R4, 1 */
		/* 8223A980h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223A980h case   18:*/		return 0x8223A984;
		  /* 8223A984h */ case   19:  		/* bl 113172 */
		/* 8223A984h case   19:*/		regs.LR = 0x8223A988; return 0x82256398;
		/* 8223A984h case   19:*/		return 0x8223A988;
		  /* 8223A988h */ case   20:  		/* mr R3, R30 */
		/* 8223A988h case   20:*/		regs.R3 = regs.R30;
		/* 8223A988h case   20:*/		return 0x8223A98C;
		  /* 8223A98Ch */ case   21:  		/* li R5, 2 */
		/* 8223A98Ch case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223A98Ch case   21:*/		return 0x8223A990;
		  /* 8223A990h */ case   22:  		/* fmr FR4, FR31 */
		/* 8223A990h case   22:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 8223A990h case   22:*/		return 0x8223A994;
		  /* 8223A994h */ case   23:  		/* mr R4, R31 */
		/* 8223A994h case   23:*/		regs.R4 = regs.R31;
		/* 8223A994h case   23:*/		return 0x8223A998;
		  /* 8223A998h */ case   24:  		/* fmr FR3, FR31 */
		/* 8223A998h case   24:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 8223A998h case   24:*/		return 0x8223A99C;
		  /* 8223A99Ch */ case   25:  		/* fmr FR2, FR31 */
		/* 8223A99Ch case   25:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 8223A99Ch case   25:*/		return 0x8223A9A0;
		  /* 8223A9A0h */ case   26:  		/* fmr FR1, FR31 */
		/* 8223A9A0h case   26:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8223A9A0h case   26:*/		return 0x8223A9A4;
		  /* 8223A9A4h */ case   27:  		/* bl 116084 */
		/* 8223A9A4h case   27:*/		regs.LR = 0x8223A9A8; return 0x82256F18;
		/* 8223A9A4h case   27:*/		return 0x8223A9A8;
		  /* 8223A9A8h */ case   28:  		/* mr R4, R30 */
		/* 8223A9A8h case   28:*/		regs.R4 = regs.R30;
		/* 8223A9A8h case   28:*/		return 0x8223A9AC;
		  /* 8223A9ACh */ case   29:  		/* mr R3, R31 */
		/* 8223A9ACh case   29:*/		regs.R3 = regs.R31;
		/* 8223A9ACh case   29:*/		return 0x8223A9B0;
		  /* 8223A9B0h */ case   30:  		/* bl -17416 */
		/* 8223A9B0h case   30:*/		regs.LR = 0x8223A9B4; return 0x822365A8;
		/* 8223A9B0h case   30:*/		return 0x8223A9B4;
		  /* 8223A9B4h */ case   31:  		/* mr R4, R30 */
		/* 8223A9B4h case   31:*/		regs.R4 = regs.R30;
		/* 8223A9B4h case   31:*/		return 0x8223A9B8;
		  /* 8223A9B8h */ case   32:  		/* mr R3, R27 */
		/* 8223A9B8h case   32:*/		regs.R3 = regs.R27;
		/* 8223A9B8h case   32:*/		return 0x8223A9BC;
		  /* 8223A9BCh */ case   33:  		/* bl 124276 */
		/* 8223A9BCh case   33:*/		regs.LR = 0x8223A9C0; return 0x82258F30;
		/* 8223A9BCh case   33:*/		return 0x8223A9C0;
		  /* 8223A9C0h */ case   34:  		/* mr R3, R30 */
		/* 8223A9C0h case   34:*/		regs.R3 = regs.R30;
		/* 8223A9C0h case   34:*/		return 0x8223A9C4;
		  /* 8223A9C4h */ case   35:  		/* bl 112124 */
		/* 8223A9C4h case   35:*/		regs.LR = 0x8223A9C8; return 0x82255FC0;
		/* 8223A9C4h case   35:*/		return 0x8223A9C8;
		  /* 8223A9C8h */ case   36:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223A9C8h case   36:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223A9C8h case   36:*/		return 0x8223A9CC;
		  /* 8223A9CCh */ case   37:  		/* bc 4, CR0_EQ, 28 */
		/* 8223A9CCh case   37:*/		if ( !regs.CR[0].eq ) { return 0x8223A9E8;  }
		/* 8223A9CCh case   37:*/		return 0x8223A9D0;
		  /* 8223A9D0h */ case   38:  		/* mr R6, R23 */
		/* 8223A9D0h case   38:*/		regs.R6 = regs.R23;
		/* 8223A9D0h case   38:*/		return 0x8223A9D4;
		  /* 8223A9D4h */ case   39:  		/* mr R5, R25 */
		/* 8223A9D4h case   39:*/		regs.R5 = regs.R25;
		/* 8223A9D4h case   39:*/		return 0x8223A9D8;
		  /* 8223A9D8h */ case   40:  		/* mr R4, R24 */
		/* 8223A9D8h case   40:*/		regs.R4 = regs.R24;
		/* 8223A9D8h case   40:*/		return 0x8223A9DC;
		  /* 8223A9DCh */ case   41:  		/* li R7, 1634 */
		/* 8223A9DCh case   41:*/		cpu::op::li<0>(regs,&regs.R7,0x662);
		/* 8223A9DCh case   41:*/		return 0x8223A9E0;
		  /* 8223A9E0h */ case   42:  		/* li R3, 0 */
		/* 8223A9E0h case   42:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223A9E0h case   42:*/		return 0x8223A9E4;
		  /* 8223A9E4h */ case   43:  		/* bl -929244 */
		/* 8223A9E4h case   43:*/		regs.LR = 0x8223A9E8; return 0x82157C08;
		/* 8223A9E4h case   43:*/		return 0x8223A9E8;
	}
	return 0x8223A9E8;
} // Block from 8223A938h-8223A9E8h (44 instructions)

//////////////////////////////////////////////////////
// Block at 8223A9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223A9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223A9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223A9E8);
		  /* 8223A9E8h */ case    0:  		/* li R3, 55 */
		/* 8223A9E8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x37);
		/* 8223A9E8h case    0:*/		return 0x8223A9EC;
		  /* 8223A9ECh */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223A9ECh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223A9ECh case    1:*/		return 0x8223A9F0;
		  /* 8223A9F0h */ case    2:  		/* bl 111936 */
		/* 8223A9F0h case    2:*/		regs.LR = 0x8223A9F4; return 0x82255F30;
		/* 8223A9F0h case    2:*/		return 0x8223A9F4;
		  /* 8223A9F4h */ case    3:  		/* mr R5, R26 */
		/* 8223A9F4h case    3:*/		regs.R5 = regs.R26;
		/* 8223A9F4h case    3:*/		return 0x8223A9F8;
		  /* 8223A9F8h */ case    4:  		/* li R4, 0 */
		/* 8223A9F8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223A9F8h case    4:*/		return 0x8223A9FC;
		  /* 8223A9FCh */ case    5:  		/* mr R30, R3 */
		/* 8223A9FCh case    5:*/		regs.R30 = regs.R3;
		/* 8223A9FCh case    5:*/		return 0x8223AA00;
		  /* 8223AA00h */ case    6:  		/* bl 113048 */
		/* 8223AA00h case    6:*/		regs.LR = 0x8223AA04; return 0x82256398;
		/* 8223AA00h case    6:*/		return 0x8223AA04;
		  /* 8223AA04h */ case    7:  		/* mr R3, R30 */
		/* 8223AA04h case    7:*/		regs.R3 = regs.R30;
		/* 8223AA04h case    7:*/		return 0x8223AA08;
		  /* 8223AA08h */ case    8:  		/* mr R5, R26 */
		/* 8223AA08h case    8:*/		regs.R5 = regs.R26;
		/* 8223AA08h case    8:*/		return 0x8223AA0C;
		  /* 8223AA0Ch */ case    9:  		/* li R4, 1 */
		/* 8223AA0Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223AA0Ch case    9:*/		return 0x8223AA10;
		  /* 8223AA10h */ case   10:  		/* bl 113032 */
		/* 8223AA10h case   10:*/		regs.LR = 0x8223AA14; return 0x82256398;
		/* 8223AA10h case   10:*/		return 0x8223AA14;
		  /* 8223AA14h */ case   11:  		/* mr R4, R30 */
		/* 8223AA14h case   11:*/		regs.R4 = regs.R30;
		/* 8223AA14h case   11:*/		return 0x8223AA18;
		  /* 8223AA18h */ case   12:  		/* mr R3, R31 */
		/* 8223AA18h case   12:*/		regs.R3 = regs.R31;
		/* 8223AA18h case   12:*/		return 0x8223AA1C;
		  /* 8223AA1Ch */ case   13:  		/* bl -17524 */
		/* 8223AA1Ch case   13:*/		regs.LR = 0x8223AA20; return 0x822365A8;
		/* 8223AA1Ch case   13:*/		return 0x8223AA20;
		  /* 8223AA20h */ case   14:  		/* mr R4, R30 */
		/* 8223AA20h case   14:*/		regs.R4 = regs.R30;
		/* 8223AA20h case   14:*/		return 0x8223AA24;
		  /* 8223AA24h */ case   15:  		/* mr R3, R27 */
		/* 8223AA24h case   15:*/		regs.R3 = regs.R27;
		/* 8223AA24h case   15:*/		return 0x8223AA28;
		  /* 8223AA28h */ case   16:  		/* bl 124168 */
		/* 8223AA28h case   16:*/		regs.LR = 0x8223AA2C; return 0x82258F30;
		/* 8223AA28h case   16:*/		return 0x8223AA2C;
		  /* 8223AA2Ch */ case   17:  		/* mr R3, R30 */
		/* 8223AA2Ch case   17:*/		regs.R3 = regs.R30;
		/* 8223AA2Ch case   17:*/		return 0x8223AA30;
		  /* 8223AA30h */ case   18:  		/* bl 112016 */
		/* 8223AA30h case   18:*/		regs.LR = 0x8223AA34; return 0x82255FC0;
		/* 8223AA30h case   18:*/		return 0x8223AA34;
		  /* 8223AA34h */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223AA34h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223AA34h case   19:*/		return 0x8223AA38;
		  /* 8223AA38h */ case   20:  		/* bc 4, CR0_EQ, 28 */
		/* 8223AA38h case   20:*/		if ( !regs.CR[0].eq ) { return 0x8223AA54;  }
		/* 8223AA38h case   20:*/		return 0x8223AA3C;
		  /* 8223AA3Ch */ case   21:  		/* mr R6, R23 */
		/* 8223AA3Ch case   21:*/		regs.R6 = regs.R23;
		/* 8223AA3Ch case   21:*/		return 0x8223AA40;
		  /* 8223AA40h */ case   22:  		/* mr R5, R25 */
		/* 8223AA40h case   22:*/		regs.R5 = regs.R25;
		/* 8223AA40h case   22:*/		return 0x8223AA44;
		  /* 8223AA44h */ case   23:  		/* mr R4, R24 */
		/* 8223AA44h case   23:*/		regs.R4 = regs.R24;
		/* 8223AA44h case   23:*/		return 0x8223AA48;
		  /* 8223AA48h */ case   24:  		/* li R7, 1642 */
		/* 8223AA48h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x66A);
		/* 8223AA48h case   24:*/		return 0x8223AA4C;
		  /* 8223AA4Ch */ case   25:  		/* li R3, 0 */
		/* 8223AA4Ch case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223AA4Ch case   25:*/		return 0x8223AA50;
		  /* 8223AA50h */ case   26:  		/* bl -929352 */
		/* 8223AA50h case   26:*/		regs.LR = 0x8223AA54; return 0x82157C08;
		/* 8223AA50h case   26:*/		return 0x8223AA54;
	}
	return 0x8223AA54;
} // Block from 8223A9E8h-8223AA54h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8223AA54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AA54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AA54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AA54);
		  /* 8223AA54h */ case    0:  		/* li R3, 64 */
		/* 8223AA54h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x40);
		/* 8223AA54h case    0:*/		return 0x8223AA58;
		  /* 8223AA58h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223AA58h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AA58h case    1:*/		return 0x8223AA5C;
		  /* 8223AA5Ch */ case    2:  		/* bl 111828 */
		/* 8223AA5Ch case    2:*/		regs.LR = 0x8223AA60; return 0x82255F30;
		/* 8223AA5Ch case    2:*/		return 0x8223AA60;
		  /* 8223AA60h */ case    3:  		/* mr R5, R26 */
		/* 8223AA60h case    3:*/		regs.R5 = regs.R26;
		/* 8223AA60h case    3:*/		return 0x8223AA64;
		  /* 8223AA64h */ case    4:  		/* li R4, 0 */
		/* 8223AA64h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AA64h case    4:*/		return 0x8223AA68;
		  /* 8223AA68h */ case    5:  		/* mr R30, R3 */
		/* 8223AA68h case    5:*/		regs.R30 = regs.R3;
		/* 8223AA68h case    5:*/		return 0x8223AA6C;
		  /* 8223AA6Ch */ case    6:  		/* bl 112940 */
		/* 8223AA6Ch case    6:*/		regs.LR = 0x8223AA70; return 0x82256398;
		/* 8223AA6Ch case    6:*/		return 0x8223AA70;
		  /* 8223AA70h */ case    7:  		/* mr R3, R30 */
		/* 8223AA70h case    7:*/		regs.R3 = regs.R30;
		/* 8223AA70h case    7:*/		return 0x8223AA74;
		  /* 8223AA74h */ case    8:  		/* mr R5, R26 */
		/* 8223AA74h case    8:*/		regs.R5 = regs.R26;
		/* 8223AA74h case    8:*/		return 0x8223AA78;
		  /* 8223AA78h */ case    9:  		/* li R4, 1 */
		/* 8223AA78h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223AA78h case    9:*/		return 0x8223AA7C;
		  /* 8223AA7Ch */ case   10:  		/* bl 112924 */
		/* 8223AA7Ch case   10:*/		regs.LR = 0x8223AA80; return 0x82256398;
		/* 8223AA7Ch case   10:*/		return 0x8223AA80;
		  /* 8223AA80h */ case   11:  		/* mr R4, R30 */
		/* 8223AA80h case   11:*/		regs.R4 = regs.R30;
		/* 8223AA80h case   11:*/		return 0x8223AA84;
		  /* 8223AA84h */ case   12:  		/* mr R3, R31 */
		/* 8223AA84h case   12:*/		regs.R3 = regs.R31;
		/* 8223AA84h case   12:*/		return 0x8223AA88;
		  /* 8223AA88h */ case   13:  		/* bl -17632 */
		/* 8223AA88h case   13:*/		regs.LR = 0x8223AA8C; return 0x822365A8;
		/* 8223AA88h case   13:*/		return 0x8223AA8C;
		  /* 8223AA8Ch */ case   14:  		/* mr R4, R30 */
		/* 8223AA8Ch case   14:*/		regs.R4 = regs.R30;
		/* 8223AA8Ch case   14:*/		return 0x8223AA90;
		  /* 8223AA90h */ case   15:  		/* mr R3, R27 */
		/* 8223AA90h case   15:*/		regs.R3 = regs.R27;
		/* 8223AA90h case   15:*/		return 0x8223AA94;
		  /* 8223AA94h */ case   16:  		/* bl 124060 */
		/* 8223AA94h case   16:*/		regs.LR = 0x8223AA98; return 0x82258F30;
		/* 8223AA94h case   16:*/		return 0x8223AA98;
		  /* 8223AA98h */ case   17:  		/* mr R3, R30 */
		/* 8223AA98h case   17:*/		regs.R3 = regs.R30;
		/* 8223AA98h case   17:*/		return 0x8223AA9C;
		  /* 8223AA9Ch */ case   18:  		/* bl 111908 */
		/* 8223AA9Ch case   18:*/		regs.LR = 0x8223AAA0; return 0x82255FC0;
		/* 8223AA9Ch case   18:*/		return 0x8223AAA0;
		  /* 8223AAA0h */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223AAA0h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223AAA0h case   19:*/		return 0x8223AAA4;
		  /* 8223AAA4h */ case   20:  		/* bc 4, CR0_EQ, 16 */
		/* 8223AAA4h case   20:*/		if ( !regs.CR[0].eq ) { return 0x8223AAB4;  }
		/* 8223AAA4h case   20:*/		return 0x8223AAA8;
		  /* 8223AAA8h */ case   21:  		/* li R7, 1649 */
		/* 8223AAA8h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x671);
		/* 8223AAA8h case   21:*/		return 0x8223AAAC;
		  /* 8223AAACh */ case   22:  		/* b -756 */
		/* 8223AAACh case   22:*/		return 0x8223A7B8;
		/* 8223AAACh case   22:*/		return 0x8223AAB0;
	}
	return 0x8223AAB0;
} // Block from 8223AA54h-8223AAB0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8223AAB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AAB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AAB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AAB0);
		  /* 8223AAB0h */ case    0:  		/* lwz R30, <#[R1 + 92]> */
		/* 8223AAB0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 8223AAB0h case    0:*/		return 0x8223AAB4;
	}
	return 0x8223AAB4;
} // Block from 8223AAB0h-8223AAB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223AAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AAB4);
		  /* 8223AAB4h */ case    0:  		/* lwz R28, <#[R31 + 12]> */
		/* 8223AAB4h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AAB4h case    0:*/		return 0x8223AAB8;
		  /* 8223AAB8h */ case    1:  		/* lwz R3, <#[R28 + 1488]> */
		/* 8223AAB8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x000005D0) );
		/* 8223AAB8h case    1:*/		return 0x8223AABC;
		  /* 8223AABCh */ case    2:  		/* lwz R11, <#[R3]> */
		/* 8223AABCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223AABCh case    2:*/		return 0x8223AAC0;
		  /* 8223AAC0h */ case    3:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223AAC0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223AAC0h case    3:*/		return 0x8223AAC4;
		  /* 8223AAC4h */ case    4:  		/* mtspr CTR, R11 */
		/* 8223AAC4h case    4:*/		regs.CTR = regs.R11;
		/* 8223AAC4h case    4:*/		return 0x8223AAC8;
		  /* 8223AAC8h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8223AAC8h case    5:*/		if ( 1 ) { regs.LR = 0x8223AACC; return (uint32)regs.CTR; }
		/* 8223AAC8h case    5:*/		return 0x8223AACC;
		  /* 8223AACCh */ case    6:  		/* lis R11, -32222 */
		/* 8223AACCh case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223AACCh case    6:*/		return 0x8223AAD0;
		  /* 8223AAD0h */ case    7:  		/* mr R5, R3 */
		/* 8223AAD0h case    7:*/		regs.R5 = regs.R3;
		/* 8223AAD0h case    7:*/		return 0x8223AAD4;
		  /* 8223AAD4h */ case    8:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223AAD4h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223AAD4h case    8:*/		return 0x8223AAD8;
		  /* 8223AAD8h */ case    9:  		/* li R4, 0 */
		/* 8223AAD8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AAD8h case    9:*/		return 0x8223AADC;
		  /* 8223AADCh */ case   10:  		/* addi R6, R11, -12392 */
		/* 8223AADCh case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223AADCh case   10:*/		return 0x8223AAE0;
		  /* 8223AAE0h */ case   11:  		/* mr R7, R28 */
		/* 8223AAE0h case   11:*/		regs.R7 = regs.R28;
		/* 8223AAE0h case   11:*/		return 0x8223AAE4;
		  /* 8223AAE4h */ case   12:  		/* bl -43332 */
		/* 8223AAE4h case   12:*/		regs.LR = 0x8223AAE8; return 0x822301A0;
		/* 8223AAE4h case   12:*/		return 0x8223AAE8;
		  /* 8223AAE8h */ case   13:  		/* cmpwi CR6, R3, 1 */
		/* 8223AAE8h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223AAE8h case   13:*/		return 0x8223AAEC;
		  /* 8223AAECh */ case   14:  		/* bc 4, CR6_EQ, 244 */
		/* 8223AAECh case   14:*/		if ( !regs.CR[6].eq ) { return 0x8223ABE0;  }
		/* 8223AAECh case   14:*/		return 0x8223AAF0;
		  /* 8223AAF0h */ case   15:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223AAF0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AAF0h case   15:*/		return 0x8223AAF4;
		  /* 8223AAF4h */ case   16:  		/* li R4, 964 */
		/* 8223AAF4h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x3C4);
		/* 8223AAF4h case   16:*/		return 0x8223AAF8;
		  /* 8223AAF8h */ case   17:  		/* lwz R10, <#[R31 + 108]> */
		/* 8223AAF8h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223AAF8h case   17:*/		return 0x8223AAFC;
		  /* 8223AAFCh */ case   18:  		/* lwz R22, <#[R11 + 1452]> */
		/* 8223AAFCh case   18:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x000005AC) );
		/* 8223AAFCh case   18:*/		return 0x8223AB00;
		  /* 8223AB00h */ case   19:  		/* lwz R27, <#[R10 + 28]> */
		/* 8223AB00h case   19:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + 0x0000001C) );
		/* 8223AB00h case   19:*/		return 0x8223AB04;
		  /* 8223AB04h */ case   20:  		/* mr R3, R22 */
		/* 8223AB04h case   20:*/		regs.R3 = regs.R22;
		/* 8223AB04h case   20:*/		return 0x8223AB08;
		  /* 8223AB08h */ case   21:  		/* lwz R28, <#[R10 + 32]> */
		/* 8223AB08h case   21:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + 0x00000020) );
		/* 8223AB08h case   21:*/		return 0x8223AB0C;
		  /* 8223AB0Ch */ case   22:  		/* bl -124500 */
		/* 8223AB0Ch case   22:*/		regs.LR = 0x8223AB10; return 0x8221C4B8;
		/* 8223AB0Ch case   22:*/		return 0x8223AB10;
		  /* 8223AB10h */ case   23:  		/* mr R11, R3 */
		/* 8223AB10h case   23:*/		regs.R11 = regs.R3;
		/* 8223AB10h case   23:*/		return 0x8223AB14;
		  /* 8223AB14h */ case   24:  		/* addic. R3, R3, 4 */
		/* 8223AB14h case   24:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 8223AB14h case   24:*/		return 0x8223AB18;
		  /* 8223AB18h */ case   25:  		/* stw R22, <#[R11]> */
		/* 8223AB18h case   25:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 8223AB18h case   25:*/		return 0x8223AB1C;
		  /* 8223AB1Ch */ case   26:  		/* bc 12, CR0_EQ, 16 */
		/* 8223AB1Ch case   26:*/		if ( regs.CR[0].eq ) { return 0x8223AB2C;  }
		/* 8223AB1Ch case   26:*/		return 0x8223AB20;
		  /* 8223AB20h */ case   27:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223AB20h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AB20h case   27:*/		return 0x8223AB24;
		  /* 8223AB24h */ case   28:  		/* bl 118212 */
		/* 8223AB24h case   28:*/		regs.LR = 0x8223AB28; return 0x822578E8;
		/* 8223AB24h case   28:*/		return 0x8223AB28;
		  /* 8223AB28h */ case   29:  		/* mr R29, R3 */
		/* 8223AB28h case   29:*/		regs.R29 = regs.R3;
		/* 8223AB28h case   29:*/		return 0x8223AB2C;
	}
	return 0x8223AB2C;
} // Block from 8223AAB4h-8223AB2Ch (30 instructions)

//////////////////////////////////////////////////////
// Block at 8223AB2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AB2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AB2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AB2C);
		  /* 8223AB2Ch */ case    0:  		/* mr R5, R27 */
		/* 8223AB2Ch case    0:*/		regs.R5 = regs.R27;
		/* 8223AB2Ch case    0:*/		return 0x8223AB30;
		  /* 8223AB30h */ case    1:  		/* li R4, 0 */
		/* 8223AB30h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AB30h case    1:*/		return 0x8223AB34;
		  /* 8223AB34h */ case    2:  		/* mr R3, R29 */
		/* 8223AB34h case    2:*/		regs.R3 = regs.R29;
		/* 8223AB34h case    2:*/		return 0x8223AB38;
		  /* 8223AB38h */ case    3:  		/* bl 112736 */
		/* 8223AB38h case    3:*/		regs.LR = 0x8223AB3C; return 0x82256398;
		/* 8223AB38h case    3:*/		return 0x8223AB3C;
		  /* 8223AB3Ch */ case    4:  		/* mr R5, R28 */
		/* 8223AB3Ch case    4:*/		regs.R5 = regs.R28;
		/* 8223AB3Ch case    4:*/		return 0x8223AB40;
		  /* 8223AB40h */ case    5:  		/* li R4, 1 */
		/* 8223AB40h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223AB40h case    5:*/		return 0x8223AB44;
		  /* 8223AB44h */ case    6:  		/* mr R3, R29 */
		/* 8223AB44h case    6:*/		regs.R3 = regs.R29;
		/* 8223AB44h case    6:*/		return 0x8223AB48;
		  /* 8223AB48h */ case    7:  		/* bl 112720 */
		/* 8223AB48h case    7:*/		regs.LR = 0x8223AB4C; return 0x82256398;
		/* 8223AB48h case    7:*/		return 0x8223AB4C;
		  /* 8223AB4Ch */ case    8:  		/* mr R5, R26 */
		/* 8223AB4Ch case    8:*/		regs.R5 = regs.R26;
		/* 8223AB4Ch case    8:*/		return 0x8223AB50;
		  /* 8223AB50h */ case    9:  		/* li R4, 2 */
		/* 8223AB50h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8223AB50h case    9:*/		return 0x8223AB54;
		  /* 8223AB54h */ case   10:  		/* mr R3, R29 */
		/* 8223AB54h case   10:*/		regs.R3 = regs.R29;
		/* 8223AB54h case   10:*/		return 0x8223AB58;
		  /* 8223AB58h */ case   11:  		/* bl 112704 */
		/* 8223AB58h case   11:*/		regs.LR = 0x8223AB5C; return 0x82256398;
		/* 8223AB58h case   11:*/		return 0x8223AB5C;
		  /* 8223AB5Ch */ case   12:  		/* mr R5, R29 */
		/* 8223AB5Ch case   12:*/		regs.R5 = regs.R29;
		/* 8223AB5Ch case   12:*/		return 0x8223AB60;
		  /* 8223AB60h */ case   13:  		/* mr R3, R28 */
		/* 8223AB60h case   13:*/		regs.R3 = regs.R28;
		/* 8223AB60h case   13:*/		return 0x8223AB64;
		  /* 8223AB64h */ case   14:  		/* lwz R4, <#[R31 + 108]> */
		/* 8223AB64h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223AB64h case   14:*/		return 0x8223AB68;
		  /* 8223AB68h */ case   15:  		/* bl 105640 */
		/* 8223AB68h case   15:*/		regs.LR = 0x8223AB6C; return 0x82254810;
		/* 8223AB68h case   15:*/		return 0x8223AB6C;
		  /* 8223AB6Ch */ case   16:  		/* lwz R3, <#[R31 + 108]> */
		/* 8223AB6Ch case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223AB6Ch case   16:*/		return 0x8223AB70;
		  /* 8223AB70h */ case   17:  		/* bl 113888 */
		/* 8223AB70h case   17:*/		regs.LR = 0x8223AB74; return 0x82256850;
		/* 8223AB70h case   17:*/		return 0x8223AB74;
		  /* 8223AB74h */ case   18:  		/* lwz R3, <#[R31 + 108]> */
		/* 8223AB74h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223AB74h case   18:*/		return 0x8223AB78;
		  /* 8223AB78h */ case   19:  		/* lwz R11, <#[R3]> */
		/* 8223AB78h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223AB78h case   19:*/		return 0x8223AB7C;
		  /* 8223AB7Ch */ case   20:  		/* lwz R11, <#[R11 + 96]> */
		/* 8223AB7Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000060) );
		/* 8223AB7Ch case   20:*/		return 0x8223AB80;
		  /* 8223AB80h */ case   21:  		/* mtspr CTR, R11 */
		/* 8223AB80h case   21:*/		regs.CTR = regs.R11;
		/* 8223AB80h case   21:*/		return 0x8223AB84;
		  /* 8223AB84h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 8223AB84h case   22:*/		if ( 1 ) { regs.LR = 0x8223AB88; return (uint32)regs.CTR; }
		/* 8223AB84h case   22:*/		return 0x8223AB88;
		  /* 8223AB88h */ case   23:  		/* mr R4, R29 */
		/* 8223AB88h case   23:*/		regs.R4 = regs.R29;
		/* 8223AB88h case   23:*/		return 0x8223AB8C;
		  /* 8223AB8Ch */ case   24:  		/* mr R3, R31 */
		/* 8223AB8Ch case   24:*/		regs.R3 = regs.R31;
		/* 8223AB8Ch case   24:*/		return 0x8223AB90;
		  /* 8223AB90h */ case   25:  		/* bl -17896 */
		/* 8223AB90h case   25:*/		regs.LR = 0x8223AB94; return 0x822365A8;
		/* 8223AB90h case   25:*/		return 0x8223AB94;
		  /* 8223AB94h */ case   26:  		/* mr R4, R29 */
		/* 8223AB94h case   26:*/		regs.R4 = regs.R29;
		/* 8223AB94h case   26:*/		return 0x8223AB98;
		  /* 8223AB98h */ case   27:  		/* lwz R3, <#[R31 + 168]> */
		/* 8223AB98h case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A8) );
		/* 8223AB98h case   27:*/		return 0x8223AB9C;
		  /* 8223AB9Ch */ case   28:  		/* bl 123796 */
		/* 8223AB9Ch case   28:*/		regs.LR = 0x8223ABA0; return 0x82258F30;
		/* 8223AB9Ch case   28:*/		return 0x8223ABA0;
		  /* 8223ABA0h */ case   29:  		/* mr R3, R30 */
		/* 8223ABA0h case   29:*/		regs.R3 = regs.R30;
		/* 8223ABA0h case   29:*/		return 0x8223ABA4;
		  /* 8223ABA4h */ case   30:  		/* bl 111644 */
		/* 8223ABA4h case   30:*/		regs.LR = 0x8223ABA8; return 0x82255FC0;
		/* 8223ABA4h case   30:*/		return 0x8223ABA8;
		  /* 8223ABA8h */ case   31:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223ABA8h case   31:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223ABA8h case   31:*/		return 0x8223ABAC;
		  /* 8223ABACh */ case   32:  		/* bc 4, CR0_EQ, 28 */
		/* 8223ABACh case   32:*/		if ( !regs.CR[0].eq ) { return 0x8223ABC8;  }
		/* 8223ABACh case   32:*/		return 0x8223ABB0;
		  /* 8223ABB0h */ case   33:  		/* mr R6, R23 */
		/* 8223ABB0h case   33:*/		regs.R6 = regs.R23;
		/* 8223ABB0h case   33:*/		return 0x8223ABB4;
		  /* 8223ABB4h */ case   34:  		/* mr R5, R25 */
		/* 8223ABB4h case   34:*/		regs.R5 = regs.R25;
		/* 8223ABB4h case   34:*/		return 0x8223ABB8;
		  /* 8223ABB8h */ case   35:  		/* mr R4, R24 */
		/* 8223ABB8h case   35:*/		regs.R4 = regs.R24;
		/* 8223ABB8h case   35:*/		return 0x8223ABBC;
		  /* 8223ABBCh */ case   36:  		/* li R7, 1672 */
		/* 8223ABBCh case   36:*/		cpu::op::li<0>(regs,&regs.R7,0x688);
		/* 8223ABBCh case   36:*/		return 0x8223ABC0;
		  /* 8223ABC0h */ case   37:  		/* li R3, 0 */
		/* 8223ABC0h case   37:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223ABC0h case   37:*/		return 0x8223ABC4;
		  /* 8223ABC4h */ case   38:  		/* bl -929724 */
		/* 8223ABC4h case   38:*/		regs.LR = 0x8223ABC8; return 0x82157C08;
		/* 8223ABC4h case   38:*/		return 0x8223ABC8;
	}
	return 0x8223ABC8;
} // Block from 8223AB2Ch-8223ABC8h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8223ABC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223ABC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223ABC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223ABC8);
		  /* 8223ABC8h */ case    0:  		/* stw R29, <#[R31 + 108]> */
		/* 8223ABC8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223ABC8h case    0:*/		return 0x8223ABCC;
		  /* 8223ABCCh */ case    1:  		/* lwz R3, <#[R31 + 96]> */
		/* 8223ABCCh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000060) );
		/* 8223ABCCh case    1:*/		return 0x8223ABD0;
		  /* 8223ABD0h */ case    2:  		/* lwz R4, <#[R3 + 4]> */
		/* 8223ABD0h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8223ABD0h case    2:*/		return 0x8223ABD4;
		  /* 8223ABD4h */ case    3:  		/* bl 102124 */
		/* 8223ABD4h case    3:*/		regs.LR = 0x8223ABD8; return 0x82253AC0;
		/* 8223ABD4h case    3:*/		return 0x8223ABD8;
		  /* 8223ABD8h */ case    4:  		/* stw R29, <#[R3]> */
		/* 8223ABD8h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 8223ABD8h case    4:*/		return 0x8223ABDC;
		  /* 8223ABDCh */ case    5:  		/* b 512 */
		/* 8223ABDCh case    5:*/		return 0x8223ADDC;
		/* 8223ABDCh case    5:*/		return 0x8223ABE0;
	}
	return 0x8223ABE0;
} // Block from 8223ABC8h-8223ABE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223ABE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223ABE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223ABE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223ABE0);
		  /* 8223ABE0h */ case    0:  		/* lis R11, -32222 */
		/* 8223ABE0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223ABE0h case    0:*/		return 0x8223ABE4;
		  /* 8223ABE4h */ case    1:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223ABE4h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223ABE4h case    1:*/		return 0x8223ABE8;
		  /* 8223ABE8h */ case    2:  		/* addi R5, R1, 92 */
		/* 8223ABE8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5C);
		/* 8223ABE8h case    2:*/		return 0x8223ABEC;
		  /* 8223ABECh */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223ABECh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223ABECh case    3:*/		return 0x8223ABF0;
		  /* 8223ABF0h */ case    4:  		/* addi R6, R11, -12392 */
		/* 8223ABF0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223ABF0h case    4:*/		return 0x8223ABF4;
		  /* 8223ABF4h */ case    5:  		/* li R4, 0 */
		/* 8223ABF4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223ABF4h case    5:*/		return 0x8223ABF8;
		  /* 8223ABF8h */ case    6:  		/* bl -30736 */
		/* 8223ABF8h case    6:*/		regs.LR = 0x8223ABFC; return 0x822333E8;
		/* 8223ABF8h case    6:*/		return 0x8223ABFC;
		  /* 8223ABFCh */ case    7:  		/* lis R11, -32222 */
		/* 8223ABFCh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223ABFCh case    7:*/		return 0x8223AC00;
		  /* 8223AC00h */ case    8:  		/* addi R5, R1, 88 */
		/* 8223AC00h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 8223AC00h case    8:*/		return 0x8223AC04;
		  /* 8223AC04h */ case    9:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223AC04h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AC04h case    9:*/		return 0x8223AC08;
		  /* 8223AC08h */ case   10:  		/* addi R6, R11, -12392 */
		/* 8223AC08h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223AC08h case   10:*/		return 0x8223AC0C;
		  /* 8223AC0Ch */ case   11:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223AC0Ch case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223AC0Ch case   11:*/		return 0x8223AC10;
		  /* 8223AC10h */ case   12:  		/* li R4, 0 */
		/* 8223AC10h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AC10h case   12:*/		return 0x8223AC14;
		  /* 8223AC14h */ case   13:  		/* bl -30604 */
		/* 8223AC14h case   13:*/		regs.LR = 0x8223AC18; return 0x82233488;
		/* 8223AC14h case   13:*/		return 0x8223AC18;
		  /* 8223AC18h */ case   14:  		/* lis R11, -32222 */
		/* 8223AC18h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223AC18h case   14:*/		return 0x8223AC1C;
		  /* 8223AC1Ch */ case   15:  		/* addi R5, R1, 84 */
		/* 8223AC1Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 8223AC1Ch case   15:*/		return 0x8223AC20;
		  /* 8223AC20h */ case   16:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223AC20h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AC20h case   16:*/		return 0x8223AC24;
		  /* 8223AC24h */ case   17:  		/* addi R6, R11, -12392 */
		/* 8223AC24h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223AC24h case   17:*/		return 0x8223AC28;
		  /* 8223AC28h */ case   18:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223AC28h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223AC28h case   18:*/		return 0x8223AC2C;
		  /* 8223AC2Ch */ case   19:  		/* li R4, 0 */
		/* 8223AC2Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AC2Ch case   19:*/		return 0x8223AC30;
		  /* 8223AC30h */ case   20:  		/* bl -30472 */
		/* 8223AC30h case   20:*/		regs.LR = 0x8223AC34; return 0x82233528;
		/* 8223AC30h case   20:*/		return 0x8223AC34;
		  /* 8223AC34h */ case   21:  		/* lis R11, -32222 */
		/* 8223AC34h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223AC34h case   21:*/		return 0x8223AC38;
		  /* 8223AC38h */ case   22:  		/* addi R5, R1, 80 */
		/* 8223AC38h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8223AC38h case   22:*/		return 0x8223AC3C;
		  /* 8223AC3Ch */ case   23:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223AC3Ch case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AC3Ch case   23:*/		return 0x8223AC40;
		  /* 8223AC40h */ case   24:  		/* addi R6, R11, -12392 */
		/* 8223AC40h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223AC40h case   24:*/		return 0x8223AC44;
		  /* 8223AC44h */ case   25:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223AC44h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223AC44h case   25:*/		return 0x8223AC48;
		  /* 8223AC48h */ case   26:  		/* li R4, 0 */
		/* 8223AC48h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AC48h case   26:*/		return 0x8223AC4C;
		  /* 8223AC4Ch */ case   27:  		/* bl -30340 */
		/* 8223AC4Ch case   27:*/		regs.LR = 0x8223AC50; return 0x822335C8;
		/* 8223AC4Ch case   27:*/		return 0x8223AC50;
		  /* 8223AC50h */ case   28:  		/* lwz R11, <#[R31 + 108]> */
		/* 8223AC50h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223AC50h case   28:*/		return 0x8223AC54;
		  /* 8223AC54h */ case   29:  		/* li R3, 18 */
		/* 8223AC54h case   29:*/		cpu::op::li<0>(regs,&regs.R3,0x12);
		/* 8223AC54h case   29:*/		return 0x8223AC58;
		  /* 8223AC58h */ case   30:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223AC58h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AC58h case   30:*/		return 0x8223AC5C;
		  /* 8223AC5Ch */ case   31:  		/* lwz R30, <#[R11 + 32]> */
		/* 8223AC5Ch case   31:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000020) );
		/* 8223AC5Ch case   31:*/		return 0x8223AC60;
		  /* 8223AC60h */ case   32:  		/* bl 120688 */
		/* 8223AC60h case   32:*/		regs.LR = 0x8223AC64; return 0x822583D0;
		/* 8223AC60h case   32:*/		return 0x8223AC64;
		  /* 8223AC64h */ case   33:  		/* mr R5, R30 */
		/* 8223AC64h case   33:*/		regs.R5 = regs.R30;
		/* 8223AC64h case   33:*/		return 0x8223AC68;
		  /* 8223AC68h */ case   34:  		/* li R4, 0 */
		/* 8223AC68h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AC68h case   34:*/		return 0x8223AC6C;
		  /* 8223AC6Ch */ case   35:  		/* mr R29, R3 */
		/* 8223AC6Ch case   35:*/		regs.R29 = regs.R3;
		/* 8223AC6Ch case   35:*/		return 0x8223AC70;
		  /* 8223AC70h */ case   36:  		/* bl 112424 */
		/* 8223AC70h case   36:*/		regs.LR = 0x8223AC74; return 0x82256398;
		/* 8223AC70h case   36:*/		return 0x8223AC74;
		  /* 8223AC74h */ case   37:  		/* mr R3, R29 */
		/* 8223AC74h case   37:*/		regs.R3 = regs.R29;
		/* 8223AC74h case   37:*/		return 0x8223AC78;
		  /* 8223AC78h */ case   38:  		/* mr R5, R30 */
		/* 8223AC78h case   38:*/		regs.R5 = regs.R30;
		/* 8223AC78h case   38:*/		return 0x8223AC7C;
		  /* 8223AC7Ch */ case   39:  		/* li R4, 1 */
		/* 8223AC7Ch case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223AC7Ch case   39:*/		return 0x8223AC80;
		  /* 8223AC80h */ case   40:  		/* bl 112408 */
		/* 8223AC80h case   40:*/		regs.LR = 0x8223AC84; return 0x82256398;
		/* 8223AC80h case   40:*/		return 0x8223AC84;
		  /* 8223AC84h */ case   41:  		/* mr R3, R29 */
		/* 8223AC84h case   41:*/		regs.R3 = regs.R29;
		/* 8223AC84h case   41:*/		return 0x8223AC88;
		  /* 8223AC88h */ case   42:  		/* li R5, 2 */
		/* 8223AC88h case   42:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223AC88h case   42:*/		return 0x8223AC8C;
		  /* 8223AC8Ch */ case   43:  		/* lfs FR4, <#[R1 + 80]> */
		/* 8223AC8Ch case   43:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000050) );
		/* 8223AC8Ch case   43:*/		return 0x8223AC90;
		  /* 8223AC90h */ case   44:  		/* mr R4, R31 */
		/* 8223AC90h case   44:*/		regs.R4 = regs.R31;
		/* 8223AC90h case   44:*/		return 0x8223AC94;
		  /* 8223AC94h */ case   45:  		/* lfs FR3, <#[R1 + 84]> */
		/* 8223AC94h case   45:*/		cpu::mem::load32f( regs, &regs.FR3, (uint32)(regs.R1 + 0x00000054) );
		/* 8223AC94h case   45:*/		return 0x8223AC98;
		  /* 8223AC98h */ case   46:  		/* lfs FR2, <#[R1 + 88]> */
		/* 8223AC98h case   46:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000058) );
		/* 8223AC98h case   46:*/		return 0x8223AC9C;
		  /* 8223AC9Ch */ case   47:  		/* lfs FR1, <#[R1 + 92]> */
		/* 8223AC9Ch case   47:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x0000005C) );
		/* 8223AC9Ch case   47:*/		return 0x8223ACA0;
		  /* 8223ACA0h */ case   48:  		/* bl 115320 */
		/* 8223ACA0h case   48:*/		regs.LR = 0x8223ACA4; return 0x82256F18;
		/* 8223ACA0h case   48:*/		return 0x8223ACA4;
		  /* 8223ACA4h */ case   49:  		/* lwz R11, <#[R29]> */
		/* 8223ACA4h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8223ACA4h case   49:*/		return 0x8223ACA8;
		  /* 8223ACA8h */ case   50:  		/* mr R3, R29 */
		/* 8223ACA8h case   50:*/		regs.R3 = regs.R29;
		/* 8223ACA8h case   50:*/		return 0x8223ACAC;
		  /* 8223ACACh */ case   51:  		/* li R6, 1 */
		/* 8223ACACh case   51:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223ACACh case   51:*/		return 0x8223ACB0;
		  /* 8223ACB0h */ case   52:  		/* li R5, 3 */
		/* 8223ACB0h case   52:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223ACB0h case   52:*/		return 0x8223ACB4;
		  /* 8223ACB4h */ case   53:  		/* li R4, 0 */
		/* 8223ACB4h case   53:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223ACB4h case   53:*/		return 0x8223ACB8;
	}
	return 0x8223ACB8;
} // Block from 8223ABE0h-8223ACB8h (54 instructions)

//////////////////////////////////////////////////////
// Block at 8223ACB8h
// Function '?MaybeExportVertexFogFactor@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223ACB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223ACB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223ACB8);
		  /* 8223ACB8h */ case    0:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223ACB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223ACB8h case    0:*/		return 0x8223ACBC;
		  /* 8223ACBCh */ case    1:  		/* mtspr CTR, R11 */
		/* 8223ACBCh case    1:*/		regs.CTR = regs.R11;
		/* 8223ACBCh case    1:*/		return 0x8223ACC0;
		  /* 8223ACC0h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 8223ACC0h case    2:*/		if ( 1 ) { regs.LR = 0x8223ACC4; return (uint32)regs.CTR; }
		/* 8223ACC0h case    2:*/		return 0x8223ACC4;
		  /* 8223ACC4h */ case    3:  		/* stb R22, <#[R29 + 154]> */
		/* 8223ACC4h case    3:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R29 + 0x0000009A) );
		/* 8223ACC4h case    3:*/		return 0x8223ACC8;
		  /* 8223ACC8h */ case    4:  		/* mr R4, R29 */
		/* 8223ACC8h case    4:*/		regs.R4 = regs.R29;
		/* 8223ACC8h case    4:*/		return 0x8223ACCC;
		  /* 8223ACCCh */ case    5:  		/* mr R3, R31 */
		/* 8223ACCCh case    5:*/		regs.R3 = regs.R31;
		/* 8223ACCCh case    5:*/		return 0x8223ACD0;
		  /* 8223ACD0h */ case    6:  		/* bl -18216 */
		/* 8223ACD0h case    6:*/		regs.LR = 0x8223ACD4; return 0x822365A8;
		/* 8223ACD0h case    6:*/		return 0x8223ACD4;
		  /* 8223ACD4h */ case    7:  		/* lwz R11, <#[R31 + 108]> */
		/* 8223ACD4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223ACD4h case    7:*/		return 0x8223ACD8;
		  /* 8223ACD8h */ case    8:  		/* mr R5, R29 */
		/* 8223ACD8h case    8:*/		regs.R5 = regs.R29;
		/* 8223ACD8h case    8:*/		return 0x8223ACDC;
		  /* 8223ACDCh */ case    9:  		/* mr R4, R11 */
		/* 8223ACDCh case    9:*/		regs.R4 = regs.R11;
		/* 8223ACDCh case    9:*/		return 0x8223ACE0;
		  /* 8223ACE0h */ case   10:  		/* lwz R3, <#[R11 + 948]> */
		/* 8223ACE0h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000003B4) );
		/* 8223ACE0h case   10:*/		return 0x8223ACE4;
		  /* 8223ACE4h */ case   11:  		/* bl 123708 */
		/* 8223ACE4h case   11:*/		regs.LR = 0x8223ACE8; return 0x82259020;
		/* 8223ACE4h case   11:*/		return 0x8223ACE8;
		  /* 8223ACE8h */ case   12:  		/* mr R3, R29 */
		/* 8223ACE8h case   12:*/		regs.R3 = regs.R29;
		/* 8223ACE8h case   12:*/		return 0x8223ACEC;
		  /* 8223ACECh */ case   13:  		/* bl 111316 */
		/* 8223ACECh case   13:*/		regs.LR = 0x8223ACF0; return 0x82255FC0;
		/* 8223ACECh case   13:*/		return 0x8223ACF0;
		  /* 8223ACF0h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223ACF0h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223ACF0h case   14:*/		return 0x8223ACF4;
		  /* 8223ACF4h */ case   15:  		/* bc 4, CR0_EQ, 32 */
		/* 8223ACF4h case   15:*/		if ( !regs.CR[0].eq ) { return 0x8223AD14;  }
		/* 8223ACF4h case   15:*/		return 0x8223ACF8;
		  /* 8223ACF8h */ case   16:  		/* lis R11, -32252 */
		/* 8223ACF8h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223ACF8h case   16:*/		return 0x8223ACFC;
		  /* 8223ACFCh */ case   17:  		/* mr R6, R23 */
		/* 8223ACFCh case   17:*/		regs.R6 = regs.R23;
		/* 8223ACFCh case   17:*/		return 0x8223AD00;
		  /* 8223AD00h */ case   18:  		/* addi R5, R11, 8988 */
		/* 8223AD00h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x231C);
		/* 8223AD00h case   18:*/		return 0x8223AD04;
		  /* 8223AD04h */ case   19:  		/* mr R4, R24 */
		/* 8223AD04h case   19:*/		regs.R4 = regs.R24;
		/* 8223AD04h case   19:*/		return 0x8223AD08;
		  /* 8223AD08h */ case   20:  		/* li R7, 1706 */
		/* 8223AD08h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x6AA);
		/* 8223AD08h case   20:*/		return 0x8223AD0C;
		  /* 8223AD0Ch */ case   21:  		/* li R3, 0 */
		/* 8223AD0Ch case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223AD0Ch case   21:*/		return 0x8223AD10;
		  /* 8223AD10h */ case   22:  		/* bl -930056 */
		/* 8223AD10h case   22:*/		regs.LR = 0x8223AD14; return 0x82157C08;
		/* 8223AD10h case   22:*/		return 0x8223AD14;
	}
	return 0x8223AD14;
} // Block from 8223ACB8h-8223AD14h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8223AD14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AD14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AD14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AD14);
		  /* 8223AD14h */ case    0:  		/* li R3, 20 */
		/* 8223AD14h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8223AD14h case    0:*/		return 0x8223AD18;
		  /* 8223AD18h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223AD18h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AD18h case    1:*/		return 0x8223AD1C;
		  /* 8223AD1Ch */ case    2:  		/* bl 120612 */
		/* 8223AD1Ch case    2:*/		regs.LR = 0x8223AD20; return 0x82258440;
		/* 8223AD1Ch case    2:*/		return 0x8223AD20;
		  /* 8223AD20h */ case    3:  		/* mr R5, R30 */
		/* 8223AD20h case    3:*/		regs.R5 = regs.R30;
		/* 8223AD20h case    3:*/		return 0x8223AD24;
		  /* 8223AD24h */ case    4:  		/* li R4, 0 */
		/* 8223AD24h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AD24h case    4:*/		return 0x8223AD28;
		  /* 8223AD28h */ case    5:  		/* mr R29, R3 */
		/* 8223AD28h case    5:*/		regs.R29 = regs.R3;
		/* 8223AD28h case    5:*/		return 0x8223AD2C;
		  /* 8223AD2Ch */ case    6:  		/* bl 112236 */
		/* 8223AD2Ch case    6:*/		regs.LR = 0x8223AD30; return 0x82256398;
		/* 8223AD2Ch case    6:*/		return 0x8223AD30;
		  /* 8223AD30h */ case    7:  		/* mr R3, R29 */
		/* 8223AD30h case    7:*/		regs.R3 = regs.R29;
		/* 8223AD30h case    7:*/		return 0x8223AD34;
		  /* 8223AD34h */ case    8:  		/* mr R5, R26 */
		/* 8223AD34h case    8:*/		regs.R5 = regs.R26;
		/* 8223AD34h case    8:*/		return 0x8223AD38;
		  /* 8223AD38h */ case    9:  		/* li R4, 1 */
		/* 8223AD38h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223AD38h case    9:*/		return 0x8223AD3C;
		  /* 8223AD3Ch */ case   10:  		/* bl 112220 */
		/* 8223AD3Ch case   10:*/		regs.LR = 0x8223AD40; return 0x82256398;
		/* 8223AD3Ch case   10:*/		return 0x8223AD40;
		  /* 8223AD40h */ case   11:  		/* mr R3, R29 */
		/* 8223AD40h case   11:*/		regs.R3 = regs.R29;
		/* 8223AD40h case   11:*/		return 0x8223AD44;
		  /* 8223AD44h */ case   12:  		/* mr R5, R30 */
		/* 8223AD44h case   12:*/		regs.R5 = regs.R30;
		/* 8223AD44h case   12:*/		return 0x8223AD48;
		  /* 8223AD48h */ case   13:  		/* li R4, 2 */
		/* 8223AD48h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8223AD48h case   13:*/		return 0x8223AD4C;
		  /* 8223AD4Ch */ case   14:  		/* bl 112204 */
		/* 8223AD4Ch case   14:*/		regs.LR = 0x8223AD50; return 0x82256398;
		/* 8223AD4Ch case   14:*/		return 0x8223AD50;
		  /* 8223AD50h */ case   15:  		/* mr R3, R29 */
		/* 8223AD50h case   15:*/		regs.R3 = regs.R29;
		/* 8223AD50h case   15:*/		return 0x8223AD54;
		  /* 8223AD54h */ case   16:  		/* li R5, 3 */
		/* 8223AD54h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223AD54h case   16:*/		return 0x8223AD58;
		  /* 8223AD58h */ case   17:  		/* lfs FR4, <#[R1 + 80]> */
		/* 8223AD58h case   17:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000050) );
		/* 8223AD58h case   17:*/		return 0x8223AD5C;
		  /* 8223AD5Ch */ case   18:  		/* mr R4, R31 */
		/* 8223AD5Ch case   18:*/		regs.R4 = regs.R31;
		/* 8223AD5Ch case   18:*/		return 0x8223AD60;
		  /* 8223AD60h */ case   19:  		/* lfs FR3, <#[R1 + 84]> */
		/* 8223AD60h case   19:*/		cpu::mem::load32f( regs, &regs.FR3, (uint32)(regs.R1 + 0x00000054) );
		/* 8223AD60h case   19:*/		return 0x8223AD64;
		  /* 8223AD64h */ case   20:  		/* lfs FR2, <#[R1 + 88]> */
		/* 8223AD64h case   20:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000058) );
		/* 8223AD64h case   20:*/		return 0x8223AD68;
		  /* 8223AD68h */ case   21:  		/* lfs FR1, <#[R1 + 92]> */
		/* 8223AD68h case   21:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x0000005C) );
		/* 8223AD68h case   21:*/		return 0x8223AD6C;
		  /* 8223AD6Ch */ case   22:  		/* bl 115116 */
		/* 8223AD6Ch case   22:*/		regs.LR = 0x8223AD70; return 0x82256F18;
		/* 8223AD6Ch case   22:*/		return 0x8223AD70;
		  /* 8223AD70h */ case   23:  		/* lwz R11, <#[R29]> */
		/* 8223AD70h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8223AD70h case   23:*/		return 0x8223AD74;
		  /* 8223AD74h */ case   24:  		/* mr R3, R29 */
		/* 8223AD74h case   24:*/		regs.R3 = regs.R29;
		/* 8223AD74h case   24:*/		return 0x8223AD78;
		  /* 8223AD78h */ case   25:  		/* li R6, 1 */
		/* 8223AD78h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223AD78h case   25:*/		return 0x8223AD7C;
		  /* 8223AD7Ch */ case   26:  		/* li R5, 3 */
		/* 8223AD7Ch case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223AD7Ch case   26:*/		return 0x8223AD80;
		  /* 8223AD80h */ case   27:  		/* li R4, 0 */
		/* 8223AD80h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AD80h case   27:*/		return 0x8223AD84;
		  /* 8223AD84h */ case   28:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223AD84h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223AD84h case   28:*/		return 0x8223AD88;
		  /* 8223AD88h */ case   29:  		/* mtspr CTR, R11 */
		/* 8223AD88h case   29:*/		regs.CTR = regs.R11;
		/* 8223AD88h case   29:*/		return 0x8223AD8C;
		  /* 8223AD8Ch */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 8223AD8Ch case   30:*/		if ( 1 ) { regs.LR = 0x8223AD90; return (uint32)regs.CTR; }
		/* 8223AD8Ch case   30:*/		return 0x8223AD90;
		  /* 8223AD90h */ case   31:  		/* mr R4, R29 */
		/* 8223AD90h case   31:*/		regs.R4 = regs.R29;
		/* 8223AD90h case   31:*/		return 0x8223AD94;
		  /* 8223AD94h */ case   32:  		/* mr R3, R31 */
		/* 8223AD94h case   32:*/		regs.R3 = regs.R31;
		/* 8223AD94h case   32:*/		return 0x8223AD98;
		  /* 8223AD98h */ case   33:  		/* bl -18416 */
		/* 8223AD98h case   33:*/		regs.LR = 0x8223AD9C; return 0x822365A8;
		/* 8223AD98h case   33:*/		return 0x8223AD9C;
		  /* 8223AD9Ch */ case   34:  		/* lwz R11, <#[R31 + 108]> */
		/* 8223AD9Ch case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223AD9Ch case   34:*/		return 0x8223ADA0;
		  /* 8223ADA0h */ case   35:  		/* mr R5, R29 */
		/* 8223ADA0h case   35:*/		regs.R5 = regs.R29;
		/* 8223ADA0h case   35:*/		return 0x8223ADA4;
		  /* 8223ADA4h */ case   36:  		/* mr R4, R11 */
		/* 8223ADA4h case   36:*/		regs.R4 = regs.R11;
		/* 8223ADA4h case   36:*/		return 0x8223ADA8;
		  /* 8223ADA8h */ case   37:  		/* lwz R3, <#[R11 + 948]> */
		/* 8223ADA8h case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000003B4) );
		/* 8223ADA8h case   37:*/		return 0x8223ADAC;
		  /* 8223ADACh */ case   38:  		/* bl 123508 */
		/* 8223ADACh case   38:*/		regs.LR = 0x8223ADB0; return 0x82259020;
		/* 8223ADACh case   38:*/		return 0x8223ADB0;
		  /* 8223ADB0h */ case   39:  		/* mr R3, R29 */
		/* 8223ADB0h case   39:*/		regs.R3 = regs.R29;
		/* 8223ADB0h case   39:*/		return 0x8223ADB4;
		  /* 8223ADB4h */ case   40:  		/* bl 111116 */
		/* 8223ADB4h case   40:*/		regs.LR = 0x8223ADB8; return 0x82255FC0;
		/* 8223ADB4h case   40:*/		return 0x8223ADB8;
	}
	return 0x8223ADB8;
} // Block from 8223AD14h-8223ADB8h (41 instructions)

//////////////////////////////////////////////////////
// Block at 8223ADB8h
// Function '?MaybeWritePixelFogInterps@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223ADB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223ADB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223ADB8);
		  /* 8223ADB8h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223ADB8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223ADB8h case    0:*/		return 0x8223ADBC;
		  /* 8223ADBCh */ case    1:  		/* bc 4, CR0_EQ, 32 */
		/* 8223ADBCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x8223ADDC;  }
		/* 8223ADBCh case    1:*/		return 0x8223ADC0;
		  /* 8223ADC0h */ case    2:  		/* lis R11, -32252 */
		/* 8223ADC0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223ADC0h case    2:*/		return 0x8223ADC4;
		  /* 8223ADC4h */ case    3:  		/* mr R6, R23 */
		/* 8223ADC4h case    3:*/		regs.R6 = regs.R23;
		/* 8223ADC4h case    3:*/		return 0x8223ADC8;
		  /* 8223ADC8h */ case    4:  		/* addi R5, R11, 9368 */
		/* 8223ADC8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2498);
		/* 8223ADC8h case    4:*/		return 0x8223ADCC;
		  /* 8223ADCCh */ case    5:  		/* mr R4, R24 */
		/* 8223ADCCh case    5:*/		regs.R4 = regs.R24;
		/* 8223ADCCh case    5:*/		return 0x8223ADD0;
		  /* 8223ADD0h */ case    6:  		/* li R7, 1720 */
		/* 8223ADD0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x6B8);
		/* 8223ADD0h case    6:*/		return 0x8223ADD4;
		  /* 8223ADD4h */ case    7:  		/* li R3, 0 */
		/* 8223ADD4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223ADD4h case    7:*/		return 0x8223ADD8;
		  /* 8223ADD8h */ case    8:  		/* bl -930256 */
		/* 8223ADD8h case    8:*/		regs.LR = 0x8223ADDC; return 0x82157C08;
		/* 8223ADD8h case    8:*/		return 0x8223ADDC;
	}
	return 0x8223ADDC;
} // Block from 8223ADB8h-8223ADDCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223ADDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223ADDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223ADDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223ADDC);
		  /* 8223ADDCh */ case    0:  		/* addi R1, R1, 208 */
		/* 8223ADDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8223ADDCh case    0:*/		return 0x8223ADE0;
		  /* 8223ADE0h */ case    1:  		/* lfd FR31, <#[R1 - 104]> */
		/* 8223ADE0h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 8223ADE0h case    1:*/		return 0x8223ADE4;
		  /* 8223ADE4h */ case    2:  		/* b -1743704 */
		/* 8223ADE4h case    2:*/		return 0x8209128C;
		/* 8223ADE4h case    2:*/		return 0x8223ADE8;
	}
	return 0x8223ADE8;
} // Block from 8223ADDCh-8223ADE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223ADE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223ADE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223ADE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223ADE8);
		  /* 8223ADE8h */ case    0:  		/* mfspr R12, LR */
		/* 8223ADE8h case    0:*/		regs.R12 = regs.LR;
		/* 8223ADE8h case    0:*/		return 0x8223ADEC;
		  /* 8223ADECh */ case    1:  		/* bl -1743804 */
		/* 8223ADECh case    1:*/		regs.LR = 0x8223ADF0; return 0x82091230;
		/* 8223ADECh case    1:*/		return 0x8223ADF0;
		  /* 8223ADF0h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8223ADF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8223ADF0h case    2:*/		return 0x8223ADF4;
		  /* 8223ADF4h */ case    3:  		/* mr R31, R3 */
		/* 8223ADF4h case    3:*/		regs.R31 = regs.R3;
		/* 8223ADF4h case    3:*/		return 0x8223ADF8;
		  /* 8223ADF8h */ case    4:  		/* bl -18888 */
		/* 8223ADF8h case    4:*/		regs.LR = 0x8223ADFC; return 0x82236430;
		/* 8223ADF8h case    4:*/		return 0x8223ADFC;
		  /* 8223ADFCh */ case    5:  		/* lwz R10, <#[R31 + 12]> */
		/* 8223ADFCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223ADFCh case    5:*/		return 0x8223AE00;
		  /* 8223AE00h */ case    6:  		/* li R4, 0 */
		/* 8223AE00h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AE00h case    6:*/		return 0x8223AE04;
		  /* 8223AE04h */ case    7:  		/* mr R23, R3 */
		/* 8223AE04h case    7:*/		regs.R23 = regs.R3;
		/* 8223AE04h case    7:*/		return 0x8223AE08;
		  /* 8223AE08h */ case    8:  		/* lwz R11, <#[R10 + 1508]> */
		/* 8223AE08h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 8223AE08h case    8:*/		return 0x8223AE0C;
		  /* 8223AE0Ch */ case    9:  		/* addi R5, R11, -1 */
		/* 8223AE0Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 8223AE0Ch case    9:*/		return 0x8223AE10;
		  /* 8223AE10h */ case   10:  		/* stw R5, <#[R10 + 1508]> */
		/* 8223AE10h case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 8223AE10h case   10:*/		return 0x8223AE14;
		  /* 8223AE14h */ case   11:  		/* lwz R3, <#[R31 + 172]> */
		/* 8223AE14h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 8223AE14h case   11:*/		return 0x8223AE18;
		  /* 8223AE18h */ case   12:  		/* bl 43512 */
		/* 8223AE18h case   12:*/		regs.LR = 0x8223AE1C; return 0x82245810;
		/* 8223AE18h case   12:*/		return 0x8223AE1C;
		  /* 8223AE1Ch */ case   13:  		/* lwz R10, <#[R31 + 12]> */
		/* 8223AE1Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AE1Ch case   13:*/		return 0x8223AE20;
		  /* 8223AE20h */ case   14:  		/* lwz R11, <#[R10 + 1508]> */
		/* 8223AE20h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 8223AE20h case   14:*/		return 0x8223AE24;
		  /* 8223AE24h */ case   15:  		/* li R4, 0 */
		/* 8223AE24h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AE24h case   15:*/		return 0x8223AE28;
		  /* 8223AE28h */ case   16:  		/* mr R20, R3 */
		/* 8223AE28h case   16:*/		regs.R20 = regs.R3;
		/* 8223AE28h case   16:*/		return 0x8223AE2C;
		  /* 8223AE2Ch */ case   17:  		/* addi R5, R11, -1 */
		/* 8223AE2Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 8223AE2Ch case   17:*/		return 0x8223AE30;
		  /* 8223AE30h */ case   18:  		/* stw R5, <#[R10 + 1508]> */
		/* 8223AE30h case   18:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 8223AE30h case   18:*/		return 0x8223AE34;
		  /* 8223AE34h */ case   19:  		/* lwz R3, <#[R31 + 172]> */
		/* 8223AE34h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 8223AE34h case   19:*/		return 0x8223AE38;
		  /* 8223AE38h */ case   20:  		/* bl 43480 */
		/* 8223AE38h case   20:*/		regs.LR = 0x8223AE3C; return 0x82245810;
		/* 8223AE38h case   20:*/		return 0x8223AE3C;
		  /* 8223AE3Ch */ case   21:  		/* mr R26, R3 */
		/* 8223AE3Ch case   21:*/		regs.R26 = regs.R3;
		/* 8223AE3Ch case   21:*/		return 0x8223AE40;
		  /* 8223AE40h */ case   22:  		/* lwz R3, <#[R31 + 168]> */
		/* 8223AE40h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A8) );
		/* 8223AE40h case   22:*/		return 0x8223AE44;
		  /* 8223AE44h */ case   23:  		/* bl 124532 */
		/* 8223AE44h case   23:*/		regs.LR = 0x8223AE48; return 0x822594B8;
		/* 8223AE44h case   23:*/		return 0x8223AE48;
		  /* 8223AE48h */ case   24:  		/* lis R11, -32253 */
		/* 8223AE48h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8223AE48h case   24:*/		return 0x8223AE4C;
		  /* 8223AE4Ch */ case   25:  		/* lis R10, -32252 */
		/* 8223AE4Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223AE4Ch case   25:*/		return 0x8223AE50;
		  /* 8223AE50h */ case   26:  		/* cmpwi CR6, R3, 1 */
		/* 8223AE50h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223AE50h case   26:*/		return 0x8223AE54;
		  /* 8223AE54h */ case   27:  		/* addi R22, R11, 27460 */
		/* 8223AE54h case   27:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x6B44);
		/* 8223AE54h case   27:*/		return 0x8223AE58;
		  /* 8223AE58h */ case   28:  		/* addi R21, R10, 8520 */
		/* 8223AE58h case   28:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R10,0x2148);
		/* 8223AE58h case   28:*/		return 0x8223AE5C;
		  /* 8223AE5Ch */ case   29:  		/* bc 12, CR6_EQ, 32 */
		/* 8223AE5Ch case   29:*/		if ( regs.CR[6].eq ) { return 0x8223AE7C;  }
		/* 8223AE5Ch case   29:*/		return 0x8223AE60;
	}
	return 0x8223AE60;
} // Block from 8223ADE8h-8223AE60h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8223AE60h
// Function '?InsertInstructionsForPixelFog@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AE60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AE60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AE60);
		  /* 8223AE60h */ case    0:  		/* lis R11, -32252 */
		/* 8223AE60h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223AE60h case    0:*/		return 0x8223AE64;
		  /* 8223AE64h */ case    1:  		/* mr R6, R21 */
		/* 8223AE64h case    1:*/		regs.R6 = regs.R21;
		/* 8223AE64h case    1:*/		return 0x8223AE68;
		  /* 8223AE68h */ case    2:  		/* addi R5, R11, 9004 */
		/* 8223AE68h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x232C);
		/* 8223AE68h case    2:*/		return 0x8223AE6C;
		  /* 8223AE6Ch */ case    3:  		/* mr R4, R22 */
		/* 8223AE6Ch case    3:*/		regs.R4 = regs.R22;
		/* 8223AE6Ch case    3:*/		return 0x8223AE70;
		  /* 8223AE70h */ case    4:  		/* li R7, 1765 */
		/* 8223AE70h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x6E5);
		/* 8223AE70h case    4:*/		return 0x8223AE74;
		  /* 8223AE74h */ case    5:  		/* li R3, 0 */
		/* 8223AE74h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223AE74h case    5:*/		return 0x8223AE78;
		  /* 8223AE78h */ case    6:  		/* bl -930416 */
		/* 8223AE78h case    6:*/		regs.LR = 0x8223AE7C; return 0x82157C08;
		/* 8223AE78h case    6:*/		return 0x8223AE7C;
	}
	return 0x8223AE7C;
} // Block from 8223AE60h-8223AE7Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223AE7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AE7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AE7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AE7C);
		  /* 8223AE7Ch */ case    0:  		/* lwz R18, <#[R31 + 168]> */
		/* 8223AE7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R31 + 0x000000A8) );
		/* 8223AE7Ch case    0:*/		return 0x8223AE80;
		  /* 8223AE80h */ case    1:  		/* li R24, 1 */
		/* 8223AE80h case    1:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8223AE80h case    1:*/		return 0x8223AE84;
		  /* 8223AE84h */ case    2:  		/* lwz R19, <#[R1 + 80]> */
		/* 8223AE84h case    2:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x00000050) );
		/* 8223AE84h case    2:*/		return 0x8223AE88;
		  /* 8223AE88h */ case    3:  		/* li R9, 0 */
		/* 8223AE88h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8223AE88h case    3:*/		return 0x8223AE8C;
		  /* 8223AE8Ch */ case    4:  		/* li R11, 0 */
		/* 8223AE8Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223AE8Ch case    4:*/		return 0x8223AE90;
		  /* 8223AE90h */ case    5:  		/* mr R8, R24 */
		/* 8223AE90h case    5:*/		regs.R8 = regs.R24;
		/* 8223AE90h case    5:*/		return 0x8223AE94;
		  /* 8223AE94h */ case    6:  		/* lwz R10, <#[R18 + 60]> */
		/* 8223AE94h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x0000003C) );
		/* 8223AE94h case    6:*/		return 0x8223AE98;
		  /* 8223AE98h */ case    7:  		/* lwz R6, <#[R10 + 4]> */
		/* 8223AE98h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 8223AE98h case    7:*/		return 0x8223AE9C;
		  /* 8223AE9Ch */ case    8:  		/* cmplw CR6, R8, R6 */
		/* 8223AE9Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R6);
		/* 8223AE9Ch case    8:*/		return 0x8223AEA0;
		  /* 8223AEA0h */ case    9:  		/* bc 4, CR6_GT, 12 */
		/* 8223AEA0h case    9:*/		if ( !regs.CR[6].gt ) { return 0x8223AEAC;  }
		/* 8223AEA0h case    9:*/		return 0x8223AEA4;
		  /* 8223AEA4h */ case   10:  		/* li R7, 0 */
		/* 8223AEA4h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8223AEA4h case   10:*/		return 0x8223AEA8;
		  /* 8223AEA8h */ case   11:  		/* b 16 */
		/* 8223AEA8h case   11:*/		return 0x8223AEB8;
		/* 8223AEA8h case   11:*/		return 0x8223AEAC;
	}
	return 0x8223AEAC;
} // Block from 8223AE7Ch-8223AEACh (12 instructions)

//////////////////////////////////////////////////////
// Block at 8223AEACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AEAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AEAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AEAC);
		  /* 8223AEACh */ case    0:  		/* lwz R9, <#[R10 + 8]> */
		/* 8223AEACh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 8223AEACh case    0:*/		return 0x8223AEB0;
		  /* 8223AEB0h */ case    1:  		/* mr R7, R24 */
		/* 8223AEB0h case    1:*/		regs.R7 = regs.R24;
		/* 8223AEB0h case    1:*/		return 0x8223AEB4;
		  /* 8223AEB4h */ case    2:  		/* lwzx R9, <#[R9 + R11]> */
		/* 8223AEB4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8223AEB4h case    2:*/		return 0x8223AEB8;
	}
	return 0x8223AEB8;
} // Block from 8223AEACh-8223AEB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223AEB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AEB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AEB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AEB8);
		  /* 8223AEB8h */ case    0:  		/* rlwinm. R7, R7, 0, 24, 31 */
		/* 8223AEB8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R7,regs.R7);
		/* 8223AEB8h case    0:*/		return 0x8223AEBC;
		  /* 8223AEBCh */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 8223AEBCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8223AED0;  }
		/* 8223AEBCh case    1:*/		return 0x8223AEC0;
		  /* 8223AEC0h */ case    2:  		/* mr R19, R9 */
		/* 8223AEC0h case    2:*/		regs.R19 = regs.R9;
		/* 8223AEC0h case    2:*/		return 0x8223AEC4;
		  /* 8223AEC4h */ case    3:  		/* addi R8, R8, 1 */
		/* 8223AEC4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8223AEC4h case    3:*/		return 0x8223AEC8;
		  /* 8223AEC8h */ case    4:  		/* addi R11, R11, 4 */
		/* 8223AEC8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223AEC8h case    4:*/		return 0x8223AECC;
		  /* 8223AECCh */ case    5:  		/* b -48 */
		/* 8223AECCh case    5:*/		return 0x8223AE9C;
		/* 8223AECCh case    5:*/		return 0x8223AED0;
	}
	return 0x8223AED0;
} // Block from 8223AEB8h-8223AED0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223AED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AED0);
		  /* 8223AED0h */ case    0:  		/* li R3, 64 */
		/* 8223AED0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x40);
		/* 8223AED0h case    0:*/		return 0x8223AED4;
		  /* 8223AED4h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223AED4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AED4h case    1:*/		return 0x8223AED8;
		  /* 8223AED8h */ case    2:  		/* bl 110680 */
		/* 8223AED8h case    2:*/		regs.LR = 0x8223AEDC; return 0x82255F30;
		/* 8223AED8h case    2:*/		return 0x8223AEDC;
		  /* 8223AEDCh */ case    3:  		/* mr R5, R26 */
		/* 8223AEDCh case    3:*/		regs.R5 = regs.R26;
		/* 8223AEDCh case    3:*/		return 0x8223AEE0;
		  /* 8223AEE0h */ case    4:  		/* li R4, 0 */
		/* 8223AEE0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223AEE0h case    4:*/		return 0x8223AEE4;
		  /* 8223AEE4h */ case    5:  		/* mr R30, R3 */
		/* 8223AEE4h case    5:*/		regs.R30 = regs.R3;
		/* 8223AEE4h case    5:*/		return 0x8223AEE8;
		  /* 8223AEE8h */ case    6:  		/* bl 111792 */
		/* 8223AEE8h case    6:*/		regs.LR = 0x8223AEEC; return 0x82256398;
		/* 8223AEE8h case    6:*/		return 0x8223AEEC;
		  /* 8223AEECh */ case    7:  		/* lis R11, -32252 */
		/* 8223AEECh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223AEECh case    7:*/		return 0x8223AEF0;
		  /* 8223AEF0h */ case    8:  		/* stb R24, <#[R30 + 164]> */
		/* 8223AEF0h case    8:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R30 + 0x000000A4) );
		/* 8223AEF0h case    8:*/		return 0x8223AEF4;
		  /* 8223AEF4h */ case    9:  		/* mr R5, R23 */
		/* 8223AEF4h case    9:*/		regs.R5 = regs.R23;
		/* 8223AEF4h case    9:*/		return 0x8223AEF8;
		  /* 8223AEF8h */ case   10:  		/* li R4, 1 */
		/* 8223AEF8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223AEF8h case   10:*/		return 0x8223AEFC;
		  /* 8223AEFCh */ case   11:  		/* mr R3, R30 */
		/* 8223AEFCh case   11:*/		regs.R3 = regs.R30;
		/* 8223AEFCh case   11:*/		return 0x8223AF00;
		  /* 8223AF00h */ case   12:  		/* lwz R11, <#[R11 + 8468]> */
		/* 8223AF00h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00002114) );
		/* 8223AF00h case   12:*/		return 0x8223AF04;
		  /* 8223AF04h */ case   13:  		/* stw R11, <#[R30 + 128]> */
		/* 8223AF04h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000080) );
		/* 8223AF04h case   13:*/		return 0x8223AF08;
		  /* 8223AF08h */ case   14:  		/* bl 111760 */
		/* 8223AF08h case   14:*/		regs.LR = 0x8223AF0C; return 0x82256398;
		/* 8223AF08h case   14:*/		return 0x8223AF0C;
		  /* 8223AF0Ch */ case   15:  		/* li R29, 0 */
		/* 8223AF0Ch case   15:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8223AF0Ch case   15:*/		return 0x8223AF10;
		  /* 8223AF10h */ case   16:  		/* lwz R11, <#[R30]> */
		/* 8223AF10h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223AF10h case   16:*/		return 0x8223AF14;
		  /* 8223AF14h */ case   17:  		/* li R6, 2 */
		/* 8223AF14h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8223AF14h case   17:*/		return 0x8223AF18;
		  /* 8223AF18h */ case   18:  		/* mr R5, R29 */
		/* 8223AF18h case   18:*/		regs.R5 = regs.R29;
		/* 8223AF18h case   18:*/		return 0x8223AF1C;
		  /* 8223AF1Ch */ case   19:  		/* li R4, 1 */
		/* 8223AF1Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223AF1Ch case   19:*/		return 0x8223AF20;
		  /* 8223AF20h */ case   20:  		/* mr R3, R30 */
		/* 8223AF20h case   20:*/		regs.R3 = regs.R30;
		/* 8223AF20h case   20:*/		return 0x8223AF24;
		  /* 8223AF24h */ case   21:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223AF24h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223AF24h case   21:*/		return 0x8223AF28;
		  /* 8223AF28h */ case   22:  		/* mtspr CTR, R11 */
		/* 8223AF28h case   22:*/		regs.CTR = regs.R11;
		/* 8223AF28h case   22:*/		return 0x8223AF2C;
		  /* 8223AF2Ch */ case   23:  		/* bcctrl 20, CR0_LT */
		/* 8223AF2Ch case   23:*/		if ( 1 ) { regs.LR = 0x8223AF30; return (uint32)regs.CTR; }
		/* 8223AF2Ch case   23:*/		return 0x8223AF30;
		  /* 8223AF30h */ case   24:  		/* addi R29, R29, 1 */
		/* 8223AF30h case   24:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223AF30h case   24:*/		return 0x8223AF34;
		  /* 8223AF34h */ case   25:  		/* cmpwi CR6, R29, 4 */
		/* 8223AF34h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 8223AF34h case   25:*/		return 0x8223AF38;
		  /* 8223AF38h */ case   26:  		/* bc 12, CR6_LT, -40 */
		/* 8223AF38h case   26:*/		if ( regs.CR[6].lt ) { return 0x8223AF10;  }
		/* 8223AF38h case   26:*/		return 0x8223AF3C;
		  /* 8223AF3Ch */ case   27:  		/* mr R4, R30 */
		/* 8223AF3Ch case   27:*/		regs.R4 = regs.R30;
		/* 8223AF3Ch case   27:*/		return 0x8223AF40;
		  /* 8223AF40h */ case   28:  		/* mr R3, R31 */
		/* 8223AF40h case   28:*/		regs.R3 = regs.R31;
		/* 8223AF40h case   28:*/		return 0x8223AF44;
		  /* 8223AF44h */ case   29:  		/* bl -18844 */
		/* 8223AF44h case   29:*/		regs.LR = 0x8223AF48; return 0x822365A8;
		/* 8223AF44h case   29:*/		return 0x8223AF48;
		  /* 8223AF48h */ case   30:  		/* mr R4, R30 */
		/* 8223AF48h case   30:*/		regs.R4 = regs.R30;
		/* 8223AF48h case   30:*/		return 0x8223AF4C;
		  /* 8223AF4Ch */ case   31:  		/* mr R3, R19 */
		/* 8223AF4Ch case   31:*/		regs.R3 = regs.R19;
		/* 8223AF4Ch case   31:*/		return 0x8223AF50;
		  /* 8223AF50h */ case   32:  		/* bl 122848 */
		/* 8223AF50h case   32:*/		regs.LR = 0x8223AF54; return 0x82258F30;
		/* 8223AF50h case   32:*/		return 0x8223AF54;
		  /* 8223AF54h */ case   33:  		/* mr R3, R30 */
		/* 8223AF54h case   33:*/		regs.R3 = regs.R30;
		/* 8223AF54h case   33:*/		return 0x8223AF58;
		  /* 8223AF58h */ case   34:  		/* bl 110696 */
		/* 8223AF58h case   34:*/		regs.LR = 0x8223AF5C; return 0x82255FC0;
		/* 8223AF58h case   34:*/		return 0x8223AF5C;
		  /* 8223AF5Ch */ case   35:  		/* lis R11, -32252 */
		/* 8223AF5Ch case   35:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223AF5Ch case   35:*/		return 0x8223AF60;
		  /* 8223AF60h */ case   36:  		/* rlwinm. R10, R3, 0, 24, 31 */
		/* 8223AF60h case   36:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R3);
		/* 8223AF60h case   36:*/		return 0x8223AF64;
		  /* 8223AF64h */ case   37:  		/* addi R25, R11, 9328 */
		/* 8223AF64h case   37:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x2470);
		/* 8223AF64h case   37:*/		return 0x8223AF68;
		  /* 8223AF68h */ case   38:  		/* bc 4, CR0_EQ, 28 */
		/* 8223AF68h case   38:*/		if ( !regs.CR[0].eq ) { return 0x8223AF84;  }
		/* 8223AF68h case   38:*/		return 0x8223AF6C;
		  /* 8223AF6Ch */ case   39:  		/* mr R6, R21 */
		/* 8223AF6Ch case   39:*/		regs.R6 = regs.R21;
		/* 8223AF6Ch case   39:*/		return 0x8223AF70;
		  /* 8223AF70h */ case   40:  		/* mr R5, R25 */
		/* 8223AF70h case   40:*/		regs.R5 = regs.R25;
		/* 8223AF70h case   40:*/		return 0x8223AF74;
		  /* 8223AF74h */ case   41:  		/* mr R4, R22 */
		/* 8223AF74h case   41:*/		regs.R4 = regs.R22;
		/* 8223AF74h case   41:*/		return 0x8223AF78;
		  /* 8223AF78h */ case   42:  		/* li R7, 1783 */
		/* 8223AF78h case   42:*/		cpu::op::li<0>(regs,&regs.R7,0x6F7);
		/* 8223AF78h case   42:*/		return 0x8223AF7C;
		  /* 8223AF7Ch */ case   43:  		/* li R3, 0 */
		/* 8223AF7Ch case   43:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223AF7Ch case   43:*/		return 0x8223AF80;
		  /* 8223AF80h */ case   44:  		/* bl -930680 */
		/* 8223AF80h case   44:*/		regs.LR = 0x8223AF84; return 0x82157C08;
		/* 8223AF80h case   44:*/		return 0x8223AF84;
	}
	return 0x8223AF84;
} // Block from 8223AED0h-8223AF84h (45 instructions)

//////////////////////////////////////////////////////
// Block at 8223AF84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AF84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AF84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AF84);
		  /* 8223AF84h */ case    0:  		/* li R3, 135 */
		/* 8223AF84h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x87);
		/* 8223AF84h case    0:*/		return 0x8223AF88;
		  /* 8223AF88h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223AF88h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AF88h case    1:*/		return 0x8223AF8C;
		  /* 8223AF8Ch */ case    2:  		/* bl 110500 */
		/* 8223AF8Ch case    2:*/		regs.LR = 0x8223AF90; return 0x82255F30;
		/* 8223AF8Ch case    2:*/		return 0x8223AF90;
		  /* 8223AF90h */ case    3:  		/* mr R5, R26 */
		/* 8223AF90h case    3:*/		regs.R5 = regs.R26;
		/* 8223AF90h case    3:*/		return 0x8223AF94;
		  /* 8223AF94h */ case    4:  		/* li R4, 1 */
		/* 8223AF94h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223AF94h case    4:*/		return 0x8223AF98;
		  /* 8223AF98h */ case    5:  		/* mr R30, R3 */
		/* 8223AF98h case    5:*/		regs.R30 = regs.R3;
		/* 8223AF98h case    5:*/		return 0x8223AF9C;
		  /* 8223AF9Ch */ case    6:  		/* bl 111612 */
		/* 8223AF9Ch case    6:*/		regs.LR = 0x8223AFA0; return 0x82256398;
		/* 8223AF9Ch case    6:*/		return 0x8223AFA0;
		  /* 8223AFA0h */ case    7:  		/* li R11, 0 */
		/* 8223AFA0h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223AFA0h case    7:*/		return 0x8223AFA4;
		  /* 8223AFA4h */ case    8:  		/* li R4, 164 */
		/* 8223AFA4h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0xA4);
		/* 8223AFA4h case    8:*/		return 0x8223AFA8;
		  /* 8223AFA8h */ case    9:  		/* stw R11, <#[R30 + 168]> */
		/* 8223AFA8h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000000A8) );
		/* 8223AFA8h case    9:*/		return 0x8223AFAC;
		  /* 8223AFACh */ case   10:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223AFACh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AFACh case   10:*/		return 0x8223AFB0;
		  /* 8223AFB0h */ case   11:  		/* lwz R29, <#[R11 + 1452]> */
		/* 8223AFB0h case   11:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x000005AC) );
		/* 8223AFB0h case   11:*/		return 0x8223AFB4;
		  /* 8223AFB4h */ case   12:  		/* mr R3, R29 */
		/* 8223AFB4h case   12:*/		regs.R3 = regs.R29;
		/* 8223AFB4h case   12:*/		return 0x8223AFB8;
		  /* 8223AFB8h */ case   13:  		/* bl -125696 */
		/* 8223AFB8h case   13:*/		regs.LR = 0x8223AFBC; return 0x8221C4B8;
		/* 8223AFB8h case   13:*/		return 0x8223AFBC;
		  /* 8223AFBCh */ case   14:  		/* mr R11, R3 */
		/* 8223AFBCh case   14:*/		regs.R11 = regs.R3;
		/* 8223AFBCh case   14:*/		return 0x8223AFC0;
		  /* 8223AFC0h */ case   15:  		/* addic. R3, R3, 4 */
		/* 8223AFC0h case   15:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 8223AFC0h case   15:*/		return 0x8223AFC4;
		  /* 8223AFC4h */ case   16:  		/* stw R29, <#[R11]> */
		/* 8223AFC4h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8223AFC4h case   16:*/		return 0x8223AFC8;
		  /* 8223AFC8h */ case   17:  		/* bc 12, CR0_EQ, 32 */
		/* 8223AFC8h case   17:*/		if ( regs.CR[0].eq ) { return 0x8223AFE8;  }
		/* 8223AFC8h case   17:*/		return 0x8223AFCC;
		  /* 8223AFCCh */ case   18:  		/* mr R7, R31 */
		/* 8223AFCCh case   18:*/		regs.R7 = regs.R31;
		/* 8223AFCCh case   18:*/		return 0x8223AFD0;
		  /* 8223AFD0h */ case   19:  		/* lwz R6, <#[R31 + 12]> */
		/* 8223AFD0h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223AFD0h case   19:*/		return 0x8223AFD4;
		  /* 8223AFD4h */ case   20:  		/* li R5, 0 */
		/* 8223AFD4h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223AFD4h case   20:*/		return 0x8223AFD8;
		  /* 8223AFD8h */ case   21:  		/* mr R4, R30 */
		/* 8223AFD8h case   21:*/		regs.R4 = regs.R30;
		/* 8223AFD8h case   21:*/		return 0x8223AFDC;
		  /* 8223AFDCh */ case   22:  		/* bl 126884 */
		/* 8223AFDCh case   22:*/		regs.LR = 0x8223AFE0; return 0x82259F80;
		/* 8223AFDCh case   22:*/		return 0x8223AFE0;
		  /* 8223AFE0h */ case   23:  		/* mr R27, R3 */
		/* 8223AFE0h case   23:*/		regs.R27 = regs.R3;
		/* 8223AFE0h case   23:*/		return 0x8223AFE4;
		  /* 8223AFE4h */ case   24:  		/* b 8 */
		/* 8223AFE4h case   24:*/		return 0x8223AFEC;
		/* 8223AFE4h case   24:*/		return 0x8223AFE8;
	}
	return 0x8223AFE8;
} // Block from 8223AF84h-8223AFE8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8223AFE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AFE8);
		  /* 8223AFE8h */ case    0:  		/* li R27, 0 */
		/* 8223AFE8h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8223AFE8h case    0:*/		return 0x8223AFEC;
	}
	return 0x8223AFEC;
} // Block from 8223AFE8h-8223AFECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223AFECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223AFEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223AFEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223AFEC);
		  /* 8223AFECh */ case    0:  		/* li R29, 0 */
		/* 8223AFECh case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8223AFECh case    0:*/		return 0x8223AFF0;
		  /* 8223AFF0h */ case    1:  		/* lwz R11, <#[R30]> */
		/* 8223AFF0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223AFF0h case    1:*/		return 0x8223AFF4;
		  /* 8223AFF4h */ case    2:  		/* li R6, 0 */
		/* 8223AFF4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223AFF4h case    2:*/		return 0x8223AFF8;
		  /* 8223AFF8h */ case    3:  		/* mr R5, R29 */
		/* 8223AFF8h case    3:*/		regs.R5 = regs.R29;
		/* 8223AFF8h case    3:*/		return 0x8223AFFC;
		  /* 8223AFFCh */ case    4:  		/* li R4, 1 */
		/* 8223AFFCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223AFFCh case    4:*/		return 0x8223B000;
		  /* 8223B000h */ case    5:  		/* mr R3, R30 */
		/* 8223B000h case    5:*/		regs.R3 = regs.R30;
		/* 8223B000h case    5:*/		return 0x8223B004;
		  /* 8223B004h */ case    6:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223B004h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223B004h case    6:*/		return 0x8223B008;
		  /* 8223B008h */ case    7:  		/* mtspr CTR, R11 */
		/* 8223B008h case    7:*/		regs.CTR = regs.R11;
		/* 8223B008h case    7:*/		return 0x8223B00C;
		  /* 8223B00Ch */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8223B00Ch case    8:*/		if ( 1 ) { regs.LR = 0x8223B010; return (uint32)regs.CTR; }
		/* 8223B00Ch case    8:*/		return 0x8223B010;
		  /* 8223B010h */ case    9:  		/* addi R29, R29, 1 */
		/* 8223B010h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223B010h case    9:*/		return 0x8223B014;
		  /* 8223B014h */ case   10:  		/* cmpwi CR6, R29, 4 */
		/* 8223B014h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 8223B014h case   10:*/		return 0x8223B018;
		  /* 8223B018h */ case   11:  		/* bc 12, CR6_LT, -40 */
		/* 8223B018h case   11:*/		if ( regs.CR[6].lt ) { return 0x8223AFF0;  }
		/* 8223B018h case   11:*/		return 0x8223B01C;
		  /* 8223B01Ch */ case   12:  		/* mr R4, R30 */
		/* 8223B01Ch case   12:*/		regs.R4 = regs.R30;
		/* 8223B01Ch case   12:*/		return 0x8223B020;
		  /* 8223B020h */ case   13:  		/* mr R3, R31 */
		/* 8223B020h case   13:*/		regs.R3 = regs.R31;
		/* 8223B020h case   13:*/		return 0x8223B024;
		  /* 8223B024h */ case   14:  		/* bl -19068 */
		/* 8223B024h case   14:*/		regs.LR = 0x8223B028; return 0x822365A8;
		/* 8223B024h case   14:*/		return 0x8223B028;
		  /* 8223B028h */ case   15:  		/* mr R3, R30 */
		/* 8223B028h case   15:*/		regs.R3 = regs.R30;
		/* 8223B028h case   15:*/		return 0x8223B02C;
		  /* 8223B02Ch */ case   16:  		/* bl 110484 */
		/* 8223B02Ch case   16:*/		regs.LR = 0x8223B030; return 0x82255FC0;
		/* 8223B02Ch case   16:*/		return 0x8223B030;
		  /* 8223B030h */ case   17:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223B030h case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223B030h case   17:*/		return 0x8223B034;
		  /* 8223B034h */ case   18:  		/* bc 4, CR0_EQ, 32 */
		/* 8223B034h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8223B054;  }
		/* 8223B034h case   18:*/		return 0x8223B038;
		  /* 8223B038h */ case   19:  		/* lis R11, -32252 */
		/* 8223B038h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223B038h case   19:*/		return 0x8223B03C;
		  /* 8223B03Ch */ case   20:  		/* mr R6, R21 */
		/* 8223B03Ch case   20:*/		regs.R6 = regs.R21;
		/* 8223B03Ch case   20:*/		return 0x8223B040;
		  /* 8223B040h */ case   21:  		/* addi R5, R11, 9400 */
		/* 8223B040h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x24B8);
		/* 8223B040h case   21:*/		return 0x8223B044;
		  /* 8223B044h */ case   22:  		/* mr R4, R22 */
		/* 8223B044h case   22:*/		regs.R4 = regs.R22;
		/* 8223B044h case   22:*/		return 0x8223B048;
		  /* 8223B048h */ case   23:  		/* li R7, 1794 */
		/* 8223B048h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x702);
		/* 8223B048h case   23:*/		return 0x8223B04C;
		  /* 8223B04Ch */ case   24:  		/* li R3, 0 */
		/* 8223B04Ch case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223B04Ch case   24:*/		return 0x8223B050;
		  /* 8223B050h */ case   25:  		/* bl -930888 */
		/* 8223B050h case   25:*/		regs.LR = 0x8223B054; return 0x82157C08;
		/* 8223B050h case   25:*/		return 0x8223B054;
	}
	return 0x8223B054;
} // Block from 8223AFECh-8223B054h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8223B054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B054);
		  /* 8223B054h */ case    0:  		/* li R3, 49 */
		/* 8223B054h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 8223B054h case    0:*/		return 0x8223B058;
		  /* 8223B058h */ case    1:  		/* lwz R28, <#[R27 + 144]> */
		/* 8223B058h case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000090) );
		/* 8223B058h case    1:*/		return 0x8223B05C;
		  /* 8223B05Ch */ case    2:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223B05Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B05Ch case    2:*/		return 0x8223B060;
		  /* 8223B060h */ case    3:  		/* bl 110288 */
		/* 8223B060h case    3:*/		regs.LR = 0x8223B064; return 0x82255F30;
		/* 8223B060h case    3:*/		return 0x8223B064;
		  /* 8223B064h */ case    4:  		/* mr R5, R26 */
		/* 8223B064h case    4:*/		regs.R5 = regs.R26;
		/* 8223B064h case    4:*/		return 0x8223B068;
		  /* 8223B068h */ case    5:  		/* li R4, 0 */
		/* 8223B068h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B068h case    5:*/		return 0x8223B06C;
		  /* 8223B06Ch */ case    6:  		/* mr R30, R3 */
		/* 8223B06Ch case    6:*/		regs.R30 = regs.R3;
		/* 8223B06Ch case    6:*/		return 0x8223B070;
		  /* 8223B070h */ case    7:  		/* bl 111400 */
		/* 8223B070h case    7:*/		regs.LR = 0x8223B074; return 0x82256398;
		/* 8223B070h case    7:*/		return 0x8223B074;
		  /* 8223B074h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 8223B074h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B074h case    8:*/		return 0x8223B078;
		  /* 8223B078h */ case    9:  		/* mr R3, R30 */
		/* 8223B078h case    9:*/		regs.R3 = regs.R30;
		/* 8223B078h case    9:*/		return 0x8223B07C;
		  /* 8223B07Ch */ case   10:  		/* li R6, 0 */
		/* 8223B07Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223B07Ch case   10:*/		return 0x8223B080;
		  /* 8223B080h */ case   11:  		/* li R5, 0 */
		/* 8223B080h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223B080h case   11:*/		return 0x8223B084;
		  /* 8223B084h */ case   12:  		/* li R4, 0 */
		/* 8223B084h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B084h case   12:*/		return 0x8223B088;
		  /* 8223B088h */ case   13:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B088h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B088h case   13:*/		return 0x8223B08C;
		  /* 8223B08Ch */ case   14:  		/* mtspr CTR, R11 */
		/* 8223B08Ch case   14:*/		regs.CTR = regs.R11;
		/* 8223B08Ch case   14:*/		return 0x8223B090;
		  /* 8223B090h */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 8223B090h case   15:*/		if ( 1 ) { regs.LR = 0x8223B094; return (uint32)regs.CTR; }
		/* 8223B090h case   15:*/		return 0x8223B094;
		  /* 8223B094h */ case   16:  		/* lwz R11, <#[R30]> */
		/* 8223B094h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B094h case   16:*/		return 0x8223B098;
		  /* 8223B098h */ case   17:  		/* mr R3, R30 */
		/* 8223B098h case   17:*/		regs.R3 = regs.R30;
		/* 8223B098h case   17:*/		return 0x8223B09C;
		  /* 8223B09Ch */ case   18:  		/* li R6, 0 */
		/* 8223B09Ch case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223B09Ch case   18:*/		return 0x8223B0A0;
		  /* 8223B0A0h */ case   19:  		/* li R5, 1 */
		/* 8223B0A0h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223B0A0h case   19:*/		return 0x8223B0A4;
		  /* 8223B0A4h */ case   20:  		/* li R4, 0 */
		/* 8223B0A4h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B0A4h case   20:*/		return 0x8223B0A8;
		  /* 8223B0A8h */ case   21:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B0A8h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B0A8h case   21:*/		return 0x8223B0AC;
		  /* 8223B0ACh */ case   22:  		/* mtspr CTR, R11 */
		/* 8223B0ACh case   22:*/		regs.CTR = regs.R11;
		/* 8223B0ACh case   22:*/		return 0x8223B0B0;
		  /* 8223B0B0h */ case   23:  		/* bcctrl 20, CR0_LT */
		/* 8223B0B0h case   23:*/		if ( 1 ) { regs.LR = 0x8223B0B4; return (uint32)regs.CTR; }
		/* 8223B0B0h case   23:*/		return 0x8223B0B4;
		  /* 8223B0B4h */ case   24:  		/* lwz R11, <#[R30]> */
		/* 8223B0B4h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B0B4h case   24:*/		return 0x8223B0B8;
		  /* 8223B0B8h */ case   25:  		/* mr R3, R30 */
		/* 8223B0B8h case   25:*/		regs.R3 = regs.R30;
		/* 8223B0B8h case   25:*/		return 0x8223B0BC;
		  /* 8223B0BCh */ case   26:  		/* li R6, 1 */
		/* 8223B0BCh case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B0BCh case   26:*/		return 0x8223B0C0;
		  /* 8223B0C0h */ case   27:  		/* li R5, 2 */
		/* 8223B0C0h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223B0C0h case   27:*/		return 0x8223B0C4;
		  /* 8223B0C4h */ case   28:  		/* li R4, 0 */
		/* 8223B0C4h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B0C4h case   28:*/		return 0x8223B0C8;
		  /* 8223B0C8h */ case   29:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B0C8h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B0C8h case   29:*/		return 0x8223B0CC;
		  /* 8223B0CCh */ case   30:  		/* mtspr CTR, R11 */
		/* 8223B0CCh case   30:*/		regs.CTR = regs.R11;
		/* 8223B0CCh case   30:*/		return 0x8223B0D0;
		  /* 8223B0D0h */ case   31:  		/* bcctrl 20, CR0_LT */
		/* 8223B0D0h case   31:*/		if ( 1 ) { regs.LR = 0x8223B0D4; return (uint32)regs.CTR; }
		/* 8223B0D0h case   31:*/		return 0x8223B0D4;
		  /* 8223B0D4h */ case   32:  		/* lwz R11, <#[R30]> */
		/* 8223B0D4h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B0D4h case   32:*/		return 0x8223B0D8;
		  /* 8223B0D8h */ case   33:  		/* mr R3, R30 */
		/* 8223B0D8h case   33:*/		regs.R3 = regs.R30;
		/* 8223B0D8h case   33:*/		return 0x8223B0DC;
		  /* 8223B0DCh */ case   34:  		/* li R6, 1 */
		/* 8223B0DCh case   34:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B0DCh case   34:*/		return 0x8223B0E0;
		  /* 8223B0E0h */ case   35:  		/* li R5, 3 */
		/* 8223B0E0h case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223B0E0h case   35:*/		return 0x8223B0E4;
		  /* 8223B0E4h */ case   36:  		/* li R4, 0 */
		/* 8223B0E4h case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B0E4h case   36:*/		return 0x8223B0E8;
		  /* 8223B0E8h */ case   37:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B0E8h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B0E8h case   37:*/		return 0x8223B0EC;
		  /* 8223B0ECh */ case   38:  		/* mtspr CTR, R11 */
		/* 8223B0ECh case   38:*/		regs.CTR = regs.R11;
		/* 8223B0ECh case   38:*/		return 0x8223B0F0;
		  /* 8223B0F0h */ case   39:  		/* bcctrl 20, CR0_LT */
		/* 8223B0F0h case   39:*/		if ( 1 ) { regs.LR = 0x8223B0F4; return (uint32)regs.CTR; }
		/* 8223B0F0h case   39:*/		return 0x8223B0F4;
		  /* 8223B0F4h */ case   40:  		/* stb R24, <#[R30 + 159]> */
		/* 8223B0F4h case   40:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R30 + 0x0000009F) );
		/* 8223B0F4h case   40:*/		return 0x8223B0F8;
		  /* 8223B0F8h */ case   41:  		/* mr R3, R30 */
		/* 8223B0F8h case   41:*/		regs.R3 = regs.R30;
		/* 8223B0F8h case   41:*/		return 0x8223B0FC;
		  /* 8223B0FCh */ case   42:  		/* mr R5, R23 */
		/* 8223B0FCh case   42:*/		regs.R5 = regs.R23;
		/* 8223B0FCh case   42:*/		return 0x8223B100;
		  /* 8223B100h */ case   43:  		/* li R4, 1 */
		/* 8223B100h case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B100h case   43:*/		return 0x8223B104;
		  /* 8223B104h */ case   44:  		/* bl 111252 */
		/* 8223B104h case   44:*/		regs.LR = 0x8223B108; return 0x82256398;
		/* 8223B104h case   44:*/		return 0x8223B108;
		  /* 8223B108h */ case   45:  		/* lwz R11, <#[R30]> */
		/* 8223B108h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B108h case   45:*/		return 0x8223B10C;
		  /* 8223B10Ch */ case   46:  		/* mr R3, R30 */
		/* 8223B10Ch case   46:*/		regs.R3 = regs.R30;
		/* 8223B10Ch case   46:*/		return 0x8223B110;
		  /* 8223B110h */ case   47:  		/* li R6, 3 */
		/* 8223B110h case   47:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8223B110h case   47:*/		return 0x8223B114;
		  /* 8223B114h */ case   48:  		/* li R5, 0 */
		/* 8223B114h case   48:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223B114h case   48:*/		return 0x8223B118;
		  /* 8223B118h */ case   49:  		/* li R4, 1 */
		/* 8223B118h case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B118h case   49:*/		return 0x8223B11C;
		  /* 8223B11Ch */ case   50:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223B11Ch case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223B11Ch case   50:*/		return 0x8223B120;
		  /* 8223B120h */ case   51:  		/* mtspr CTR, R11 */
		/* 8223B120h case   51:*/		regs.CTR = regs.R11;
		/* 8223B120h case   51:*/		return 0x8223B124;
		  /* 8223B124h */ case   52:  		/* bcctrl 20, CR0_LT */
		/* 8223B124h case   52:*/		if ( 1 ) { regs.LR = 0x8223B128; return (uint32)regs.CTR; }
		/* 8223B124h case   52:*/		return 0x8223B128;
		  /* 8223B128h */ case   53:  		/* lwz R11, <#[R30]> */
		/* 8223B128h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B128h case   53:*/		return 0x8223B12C;
		  /* 8223B12Ch */ case   54:  		/* mr R3, R30 */
		/* 8223B12Ch case   54:*/		regs.R3 = regs.R30;
		/* 8223B12Ch case   54:*/		return 0x8223B130;
		  /* 8223B130h */ case   55:  		/* li R6, 2 */
		/* 8223B130h case   55:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8223B130h case   55:*/		return 0x8223B134;
		  /* 8223B134h */ case   56:  		/* li R5, 1 */
		/* 8223B134h case   56:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223B134h case   56:*/		return 0x8223B138;
		  /* 8223B138h */ case   57:  		/* li R4, 1 */
		/* 8223B138h case   57:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B138h case   57:*/		return 0x8223B13C;
		  /* 8223B13Ch */ case   58:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223B13Ch case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223B13Ch case   58:*/		return 0x8223B140;
		  /* 8223B140h */ case   59:  		/* mtspr CTR, R11 */
		/* 8223B140h case   59:*/		regs.CTR = regs.R11;
		/* 8223B140h case   59:*/		return 0x8223B144;
		  /* 8223B144h */ case   60:  		/* bcctrl 20, CR0_LT */
		/* 8223B144h case   60:*/		if ( 1 ) { regs.LR = 0x8223B148; return (uint32)regs.CTR; }
		/* 8223B144h case   60:*/		return 0x8223B148;
		  /* 8223B148h */ case   61:  		/* mr R4, R30 */
		/* 8223B148h case   61:*/		regs.R4 = regs.R30;
		/* 8223B148h case   61:*/		return 0x8223B14C;
		  /* 8223B14Ch */ case   62:  		/* mr R3, R31 */
		/* 8223B14Ch case   62:*/		regs.R3 = regs.R31;
		/* 8223B14Ch case   62:*/		return 0x8223B150;
		  /* 8223B150h */ case   63:  		/* bl -19368 */
		/* 8223B150h case   63:*/		regs.LR = 0x8223B154; return 0x822365A8;
		/* 8223B150h case   63:*/		return 0x8223B154;
		  /* 8223B154h */ case   64:  		/* mr R4, R30 */
		/* 8223B154h case   64:*/		regs.R4 = regs.R30;
		/* 8223B154h case   64:*/		return 0x8223B158;
		  /* 8223B158h */ case   65:  		/* mr R3, R28 */
		/* 8223B158h case   65:*/		regs.R3 = regs.R28;
		/* 8223B158h case   65:*/		return 0x8223B15C;
		  /* 8223B15Ch */ case   66:  		/* bl 122324 */
		/* 8223B15Ch case   66:*/		regs.LR = 0x8223B160; return 0x82258F30;
		/* 8223B15Ch case   66:*/		return 0x8223B160;
		  /* 8223B160h */ case   67:  		/* mr R3, R30 */
		/* 8223B160h case   67:*/		regs.R3 = regs.R30;
		/* 8223B160h case   67:*/		return 0x8223B164;
		  /* 8223B164h */ case   68:  		/* bl 110172 */
		/* 8223B164h case   68:*/		regs.LR = 0x8223B168; return 0x82255FC0;
		/* 8223B164h case   68:*/		return 0x8223B168;
		  /* 8223B168h */ case   69:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223B168h case   69:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223B168h case   69:*/		return 0x8223B16C;
		  /* 8223B16Ch */ case   70:  		/* bc 4, CR0_EQ, 28 */
		/* 8223B16Ch case   70:*/		if ( !regs.CR[0].eq ) { return 0x8223B188;  }
		/* 8223B16Ch case   70:*/		return 0x8223B170;
		  /* 8223B170h */ case   71:  		/* mr R6, R21 */
		/* 8223B170h case   71:*/		regs.R6 = regs.R21;
		/* 8223B170h case   71:*/		return 0x8223B174;
		  /* 8223B174h */ case   72:  		/* mr R5, R25 */
		/* 8223B174h case   72:*/		regs.R5 = regs.R25;
		/* 8223B174h case   72:*/		return 0x8223B178;
		  /* 8223B178h */ case   73:  		/* mr R4, R22 */
		/* 8223B178h case   73:*/		regs.R4 = regs.R22;
		/* 8223B178h case   73:*/		return 0x8223B17C;
		  /* 8223B17Ch */ case   74:  		/* li R7, 1810 */
		/* 8223B17Ch case   74:*/		cpu::op::li<0>(regs,&regs.R7,0x712);
		/* 8223B17Ch case   74:*/		return 0x8223B180;
		  /* 8223B180h */ case   75:  		/* li R3, 0 */
		/* 8223B180h case   75:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223B180h case   75:*/		return 0x8223B184;
		  /* 8223B184h */ case   76:  		/* bl -931196 */
		/* 8223B184h case   76:*/		regs.LR = 0x8223B188; return 0x82157C08;
		/* 8223B184h case   76:*/		return 0x8223B188;
	}
	return 0x8223B188;
} // Block from 8223B054h-8223B188h (77 instructions)

//////////////////////////////////////////////////////
// Block at 8223B188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B188);
		  /* 8223B188h */ case    0:  		/* li R3, 105 */
		/* 8223B188h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x69);
		/* 8223B188h case    0:*/		return 0x8223B18C;
		  /* 8223B18Ch */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223B18Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B18Ch case    1:*/		return 0x8223B190;
		  /* 8223B190h */ case    2:  		/* bl 109984 */
		/* 8223B190h case    2:*/		regs.LR = 0x8223B194; return 0x82255F30;
		/* 8223B190h case    2:*/		return 0x8223B194;
		  /* 8223B194h */ case    3:  		/* mr R5, R20 */
		/* 8223B194h case    3:*/		regs.R5 = regs.R20;
		/* 8223B194h case    3:*/		return 0x8223B198;
		  /* 8223B198h */ case    4:  		/* li R4, 0 */
		/* 8223B198h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B198h case    4:*/		return 0x8223B19C;
		  /* 8223B19Ch */ case    5:  		/* mr R30, R3 */
		/* 8223B19Ch case    5:*/		regs.R30 = regs.R3;
		/* 8223B19Ch case    5:*/		return 0x8223B1A0;
		  /* 8223B1A0h */ case    6:  		/* bl 111096 */
		/* 8223B1A0h case    6:*/		regs.LR = 0x8223B1A4; return 0x82256398;
		/* 8223B1A0h case    6:*/		return 0x8223B1A4;
		  /* 8223B1A4h */ case    7:  		/* lwz R11, <#[R30]> */
		/* 8223B1A4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B1A4h case    7:*/		return 0x8223B1A8;
		  /* 8223B1A8h */ case    8:  		/* mr R3, R30 */
		/* 8223B1A8h case    8:*/		regs.R3 = regs.R30;
		/* 8223B1A8h case    8:*/		return 0x8223B1AC;
		  /* 8223B1ACh */ case    9:  		/* li R6, 4 */
		/* 8223B1ACh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8223B1ACh case    9:*/		return 0x8223B1B0;
		  /* 8223B1B0h */ case   10:  		/* li R5, 0 */
		/* 8223B1B0h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223B1B0h case   10:*/		return 0x8223B1B4;
		  /* 8223B1B4h */ case   11:  		/* li R4, 0 */
		/* 8223B1B4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B1B4h case   11:*/		return 0x8223B1B8;
		  /* 8223B1B8h */ case   12:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B1B8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B1B8h case   12:*/		return 0x8223B1BC;
		  /* 8223B1BCh */ case   13:  		/* mtspr CTR, R11 */
		/* 8223B1BCh case   13:*/		regs.CTR = regs.R11;
		/* 8223B1BCh case   13:*/		return 0x8223B1C0;
		  /* 8223B1C0h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223B1C0h case   14:*/		if ( 1 ) { regs.LR = 0x8223B1C4; return (uint32)regs.CTR; }
		/* 8223B1C0h case   14:*/		return 0x8223B1C4;
		  /* 8223B1C4h */ case   15:  		/* lwz R11, <#[R30]> */
		/* 8223B1C4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B1C4h case   15:*/		return 0x8223B1C8;
		  /* 8223B1C8h */ case   16:  		/* mr R3, R30 */
		/* 8223B1C8h case   16:*/		regs.R3 = regs.R30;
		/* 8223B1C8h case   16:*/		return 0x8223B1CC;
		  /* 8223B1CCh */ case   17:  		/* li R6, 4 */
		/* 8223B1CCh case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8223B1CCh case   17:*/		return 0x8223B1D0;
		  /* 8223B1D0h */ case   18:  		/* li R5, 1 */
		/* 8223B1D0h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223B1D0h case   18:*/		return 0x8223B1D4;
		  /* 8223B1D4h */ case   19:  		/* li R4, 0 */
		/* 8223B1D4h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B1D4h case   19:*/		return 0x8223B1D8;
		  /* 8223B1D8h */ case   20:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B1D8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B1D8h case   20:*/		return 0x8223B1DC;
		  /* 8223B1DCh */ case   21:  		/* mtspr CTR, R11 */
		/* 8223B1DCh case   21:*/		regs.CTR = regs.R11;
		/* 8223B1DCh case   21:*/		return 0x8223B1E0;
		  /* 8223B1E0h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 8223B1E0h case   22:*/		if ( 1 ) { regs.LR = 0x8223B1E4; return (uint32)regs.CTR; }
		/* 8223B1E0h case   22:*/		return 0x8223B1E4;
		  /* 8223B1E4h */ case   23:  		/* lwz R11, <#[R30]> */
		/* 8223B1E4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B1E4h case   23:*/		return 0x8223B1E8;
		  /* 8223B1E8h */ case   24:  		/* mr R3, R30 */
		/* 8223B1E8h case   24:*/		regs.R3 = regs.R30;
		/* 8223B1E8h case   24:*/		return 0x8223B1EC;
		  /* 8223B1ECh */ case   25:  		/* li R6, 4 */
		/* 8223B1ECh case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8223B1ECh case   25:*/		return 0x8223B1F0;
		  /* 8223B1F0h */ case   26:  		/* li R5, 2 */
		/* 8223B1F0h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223B1F0h case   26:*/		return 0x8223B1F4;
		  /* 8223B1F4h */ case   27:  		/* li R4, 0 */
		/* 8223B1F4h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B1F4h case   27:*/		return 0x8223B1F8;
		  /* 8223B1F8h */ case   28:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B1F8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B1F8h case   28:*/		return 0x8223B1FC;
		  /* 8223B1FCh */ case   29:  		/* mtspr CTR, R11 */
		/* 8223B1FCh case   29:*/		regs.CTR = regs.R11;
		/* 8223B1FCh case   29:*/		return 0x8223B200;
		  /* 8223B200h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 8223B200h case   30:*/		if ( 1 ) { regs.LR = 0x8223B204; return (uint32)regs.CTR; }
		/* 8223B200h case   30:*/		return 0x8223B204;
		  /* 8223B204h */ case   31:  		/* lwz R11, <#[R30]> */
		/* 8223B204h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B204h case   31:*/		return 0x8223B208;
		  /* 8223B208h */ case   32:  		/* mr R3, R30 */
		/* 8223B208h case   32:*/		regs.R3 = regs.R30;
		/* 8223B208h case   32:*/		return 0x8223B20C;
		  /* 8223B20Ch */ case   33:  		/* li R6, 4 */
		/* 8223B20Ch case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8223B20Ch case   33:*/		return 0x8223B210;
		  /* 8223B210h */ case   34:  		/* li R5, 3 */
		/* 8223B210h case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223B210h case   34:*/		return 0x8223B214;
		  /* 8223B214h */ case   35:  		/* li R4, 0 */
		/* 8223B214h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B214h case   35:*/		return 0x8223B218;
		  /* 8223B218h */ case   36:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B218h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B218h case   36:*/		return 0x8223B21C;
		  /* 8223B21Ch */ case   37:  		/* mtspr CTR, R11 */
		/* 8223B21Ch case   37:*/		regs.CTR = regs.R11;
		/* 8223B21Ch case   37:*/		return 0x8223B220;
		  /* 8223B220h */ case   38:  		/* bcctrl 20, CR0_LT */
		/* 8223B220h case   38:*/		if ( 1 ) { regs.LR = 0x8223B224; return (uint32)regs.CTR; }
		/* 8223B220h case   38:*/		return 0x8223B224;
		  /* 8223B224h */ case   39:  		/* mr R3, R30 */
		/* 8223B224h case   39:*/		regs.R3 = regs.R30;
		/* 8223B224h case   39:*/		return 0x8223B228;
		  /* 8223B228h */ case   40:  		/* mr R5, R26 */
		/* 8223B228h case   40:*/		regs.R5 = regs.R26;
		/* 8223B228h case   40:*/		return 0x8223B22C;
		  /* 8223B22Ch */ case   41:  		/* li R4, 1 */
		/* 8223B22Ch case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B22Ch case   41:*/		return 0x8223B230;
		  /* 8223B230h */ case   42:  		/* bl 110952 */
		/* 8223B230h case   42:*/		regs.LR = 0x8223B234; return 0x82256398;
		/* 8223B230h case   42:*/		return 0x8223B234;
		  /* 8223B234h */ case   43:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223B234h case   43:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B234h case   43:*/		return 0x8223B238;
		  /* 8223B238h */ case   44:  		/* bl -126440 */
		/* 8223B238h case   44:*/		regs.LR = 0x8223B23C; return 0x8221C450;
		/* 8223B238h case   44:*/		return 0x8223B23C;
		  /* 8223B23Ch */ case   45:  		/* stw R3, <#[R30 + 172]> */
		/* 8223B23Ch case   45:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x000000AC) );
		/* 8223B23Ch case   45:*/		return 0x8223B240;
		  /* 8223B240h */ case   46:  		/* mr R4, R30 */
		/* 8223B240h case   46:*/		regs.R4 = regs.R30;
		/* 8223B240h case   46:*/		return 0x8223B244;
		  /* 8223B244h */ case   47:  		/* mr R3, R31 */
		/* 8223B244h case   47:*/		regs.R3 = regs.R31;
		/* 8223B244h case   47:*/		return 0x8223B248;
		  /* 8223B248h */ case   48:  		/* bl -19616 */
		/* 8223B248h case   48:*/		regs.LR = 0x8223B24C; return 0x822365A8;
		/* 8223B248h case   48:*/		return 0x8223B24C;
		  /* 8223B24Ch */ case   49:  		/* mr R4, R30 */
		/* 8223B24Ch case   49:*/		regs.R4 = regs.R30;
		/* 8223B24Ch case   49:*/		return 0x8223B250;
		  /* 8223B250h */ case   50:  		/* mr R3, R28 */
		/* 8223B250h case   50:*/		regs.R3 = regs.R28;
		/* 8223B250h case   50:*/		return 0x8223B254;
		  /* 8223B254h */ case   51:  		/* bl 122076 */
		/* 8223B254h case   51:*/		regs.LR = 0x8223B258; return 0x82258F30;
		/* 8223B254h case   51:*/		return 0x8223B258;
		  /* 8223B258h */ case   52:  		/* mr R3, R30 */
		/* 8223B258h case   52:*/		regs.R3 = regs.R30;
		/* 8223B258h case   52:*/		return 0x8223B25C;
		  /* 8223B25Ch */ case   53:  		/* bl 109924 */
		/* 8223B25Ch case   53:*/		regs.LR = 0x8223B260; return 0x82255FC0;
		/* 8223B25Ch case   53:*/		return 0x8223B260;
		  /* 8223B260h */ case   54:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223B260h case   54:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223B260h case   54:*/		return 0x8223B264;
		  /* 8223B264h */ case   55:  		/* bc 4, CR0_EQ, 28 */
		/* 8223B264h case   55:*/		if ( !regs.CR[0].eq ) { return 0x8223B280;  }
		/* 8223B264h case   55:*/		return 0x8223B268;
		  /* 8223B268h */ case   56:  		/* mr R6, R21 */
		/* 8223B268h case   56:*/		regs.R6 = regs.R21;
		/* 8223B268h case   56:*/		return 0x8223B26C;
		  /* 8223B26Ch */ case   57:  		/* mr R5, R25 */
		/* 8223B26Ch case   57:*/		regs.R5 = regs.R25;
		/* 8223B26Ch case   57:*/		return 0x8223B270;
		  /* 8223B270h */ case   58:  		/* mr R4, R22 */
		/* 8223B270h case   58:*/		regs.R4 = regs.R22;
		/* 8223B270h case   58:*/		return 0x8223B274;
		  /* 8223B274h */ case   59:  		/* li R7, 1825 */
		/* 8223B274h case   59:*/		cpu::op::li<0>(regs,&regs.R7,0x721);
		/* 8223B274h case   59:*/		return 0x8223B278;
		  /* 8223B278h */ case   60:  		/* li R3, 0 */
		/* 8223B278h case   60:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223B278h case   60:*/		return 0x8223B27C;
		  /* 8223B27Ch */ case   61:  		/* bl -931444 */
		/* 8223B27Ch case   61:*/		regs.LR = 0x8223B280; return 0x82157C08;
		/* 8223B27Ch case   61:*/		return 0x8223B280;
	}
	return 0x8223B280;
} // Block from 8223B188h-8223B280h (62 instructions)

//////////////////////////////////////////////////////
// Block at 8223B280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B280);
		  /* 8223B280h */ case    0:  		/* li R3, 78 */
		/* 8223B280h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x4E);
		/* 8223B280h case    0:*/		return 0x8223B284;
		  /* 8223B284h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223B284h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B284h case    1:*/		return 0x8223B288;
		  /* 8223B288h */ case    2:  		/* bl 109736 */
		/* 8223B288h case    2:*/		regs.LR = 0x8223B28C; return 0x82255F30;
		/* 8223B288h case    2:*/		return 0x8223B28C;
		  /* 8223B28Ch */ case    3:  		/* li R11, 2 */
		/* 8223B28Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8223B28Ch case    3:*/		return 0x8223B290;
		  /* 8223B290h */ case    4:  		/* li R10, 31 */
		/* 8223B290h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1F);
		/* 8223B290h case    4:*/		return 0x8223B294;
		  /* 8223B294h */ case    5:  		/* stw R11, <#[R3 + 56]> */
		/* 8223B294h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 8223B294h case    5:*/		return 0x8223B298;
		  /* 8223B298h */ case    6:  		/* mr R5, R20 */
		/* 8223B298h case    6:*/		regs.R5 = regs.R20;
		/* 8223B298h case    6:*/		return 0x8223B29C;
		  /* 8223B29Ch */ case    7:  		/* stw R10, <#[R3 + 80]> */
		/* 8223B29Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000050) );
		/* 8223B29Ch case    7:*/		return 0x8223B2A0;
		  /* 8223B2A0h */ case    8:  		/* li R4, 1 */
		/* 8223B2A0h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B2A0h case    8:*/		return 0x8223B2A4;
		  /* 8223B2A4h */ case    9:  		/* mr R30, R3 */
		/* 8223B2A4h case    9:*/		regs.R30 = regs.R3;
		/* 8223B2A4h case    9:*/		return 0x8223B2A8;
		  /* 8223B2A8h */ case   10:  		/* bl 110832 */
		/* 8223B2A8h case   10:*/		regs.LR = 0x8223B2AC; return 0x82256398;
		/* 8223B2A8h case   10:*/		return 0x8223B2AC;
		  /* 8223B2ACh */ case   11:  		/* mr R4, R30 */
		/* 8223B2ACh case   11:*/		regs.R4 = regs.R30;
		/* 8223B2ACh case   11:*/		return 0x8223B2B0;
		  /* 8223B2B0h */ case   12:  		/* mr R3, R31 */
		/* 8223B2B0h case   12:*/		regs.R3 = regs.R31;
		/* 8223B2B0h case   12:*/		return 0x8223B2B4;
		  /* 8223B2B4h */ case   13:  		/* bl -19724 */
		/* 8223B2B4h case   13:*/		regs.LR = 0x8223B2B8; return 0x822365A8;
		/* 8223B2B4h case   13:*/		return 0x8223B2B8;
		  /* 8223B2B8h */ case   14:  		/* mr R4, R30 */
		/* 8223B2B8h case   14:*/		regs.R4 = regs.R30;
		/* 8223B2B8h case   14:*/		return 0x8223B2BC;
		  /* 8223B2BCh */ case   15:  		/* mr R3, R28 */
		/* 8223B2BCh case   15:*/		regs.R3 = regs.R28;
		/* 8223B2BCh case   15:*/		return 0x8223B2C0;
		  /* 8223B2C0h */ case   16:  		/* bl 121968 */
		/* 8223B2C0h case   16:*/		regs.LR = 0x8223B2C4; return 0x82258F30;
		/* 8223B2C0h case   16:*/		return 0x8223B2C4;
		  /* 8223B2C4h */ case   17:  		/* mr R3, R30 */
		/* 8223B2C4h case   17:*/		regs.R3 = regs.R30;
		/* 8223B2C4h case   17:*/		return 0x8223B2C8;
		  /* 8223B2C8h */ case   18:  		/* bl 109816 */
		/* 8223B2C8h case   18:*/		regs.LR = 0x8223B2CC; return 0x82255FC0;
		/* 8223B2C8h case   18:*/		return 0x8223B2CC;
		  /* 8223B2CCh */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223B2CCh case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223B2CCh case   19:*/		return 0x8223B2D0;
		  /* 8223B2D0h */ case   20:  		/* bc 4, CR0_EQ, 28 */
		/* 8223B2D0h case   20:*/		if ( !regs.CR[0].eq ) { return 0x8223B2EC;  }
		/* 8223B2D0h case   20:*/		return 0x8223B2D4;
		  /* 8223B2D4h */ case   21:  		/* mr R6, R21 */
		/* 8223B2D4h case   21:*/		regs.R6 = regs.R21;
		/* 8223B2D4h case   21:*/		return 0x8223B2D8;
		  /* 8223B2D8h */ case   22:  		/* mr R5, R25 */
		/* 8223B2D8h case   22:*/		regs.R5 = regs.R25;
		/* 8223B2D8h case   22:*/		return 0x8223B2DC;
		  /* 8223B2DCh */ case   23:  		/* mr R4, R22 */
		/* 8223B2DCh case   23:*/		regs.R4 = regs.R22;
		/* 8223B2DCh case   23:*/		return 0x8223B2E0;
		  /* 8223B2E0h */ case   24:  		/* li R7, 1833 */
		/* 8223B2E0h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x729);
		/* 8223B2E0h case   24:*/		return 0x8223B2E4;
		  /* 8223B2E4h */ case   25:  		/* li R3, 0 */
		/* 8223B2E4h case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223B2E4h case   25:*/		return 0x8223B2E8;
		  /* 8223B2E8h */ case   26:  		/* bl -931552 */
		/* 8223B2E8h case   26:*/		regs.LR = 0x8223B2EC; return 0x82157C08;
		/* 8223B2E8h case   26:*/		return 0x8223B2EC;
	}
	return 0x8223B2EC;
} // Block from 8223B280h-8223B2ECh (27 instructions)

//////////////////////////////////////////////////////
// Block at 8223B2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B2EC);
		  /* 8223B2ECh */ case    0:  		/* lwz R11, <#[R31 + 108]> */
		/* 8223B2ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223B2ECh case    0:*/		return 0x8223B2F0;
		  /* 8223B2F0h */ case    1:  		/* li R3, 19 */
		/* 8223B2F0h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 8223B2F0h case    1:*/		return 0x8223B2F4;
		  /* 8223B2F4h */ case    2:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223B2F4h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B2F4h case    2:*/		return 0x8223B2F8;
		  /* 8223B2F8h */ case    3:  		/* lwz R29, <#[R11 + 32]> */
		/* 8223B2F8h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000020) );
		/* 8223B2F8h case    3:*/		return 0x8223B2FC;
		  /* 8223B2FCh */ case    4:  		/* bl 109620 */
		/* 8223B2FCh case    4:*/		regs.LR = 0x8223B300; return 0x82255F30;
		/* 8223B2FCh case    4:*/		return 0x8223B300;
		  /* 8223B300h */ case    5:  		/* mr R5, R29 */
		/* 8223B300h case    5:*/		regs.R5 = regs.R29;
		/* 8223B300h case    5:*/		return 0x8223B304;
		  /* 8223B304h */ case    6:  		/* li R4, 0 */
		/* 8223B304h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B304h case    6:*/		return 0x8223B308;
		  /* 8223B308h */ case    7:  		/* mr R30, R3 */
		/* 8223B308h case    7:*/		regs.R30 = regs.R3;
		/* 8223B308h case    7:*/		return 0x8223B30C;
		  /* 8223B30Ch */ case    8:  		/* bl 110732 */
		/* 8223B30Ch case    8:*/		regs.LR = 0x8223B310; return 0x82256398;
		/* 8223B30Ch case    8:*/		return 0x8223B310;
		  /* 8223B310h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 8223B310h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B310h case    9:*/		return 0x8223B314;
		  /* 8223B314h */ case   10:  		/* mr R3, R30 */
		/* 8223B314h case   10:*/		regs.R3 = regs.R30;
		/* 8223B314h case   10:*/		return 0x8223B318;
		  /* 8223B318h */ case   11:  		/* li R6, 1 */
		/* 8223B318h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B318h case   11:*/		return 0x8223B31C;
		  /* 8223B31Ch */ case   12:  		/* li R5, 0 */
		/* 8223B31Ch case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223B31Ch case   12:*/		return 0x8223B320;
		  /* 8223B320h */ case   13:  		/* li R4, 0 */
		/* 8223B320h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B320h case   13:*/		return 0x8223B324;
		  /* 8223B324h */ case   14:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B324h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B324h case   14:*/		return 0x8223B328;
		  /* 8223B328h */ case   15:  		/* mtspr CTR, R11 */
		/* 8223B328h case   15:*/		regs.CTR = regs.R11;
		/* 8223B328h case   15:*/		return 0x8223B32C;
		  /* 8223B32Ch */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 8223B32Ch case   16:*/		if ( 1 ) { regs.LR = 0x8223B330; return (uint32)regs.CTR; }
		/* 8223B32Ch case   16:*/		return 0x8223B330;
		  /* 8223B330h */ case   17:  		/* lwz R11, <#[R30]> */
		/* 8223B330h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B330h case   17:*/		return 0x8223B334;
		  /* 8223B334h */ case   18:  		/* mr R3, R30 */
		/* 8223B334h case   18:*/		regs.R3 = regs.R30;
		/* 8223B334h case   18:*/		return 0x8223B338;
		  /* 8223B338h */ case   19:  		/* li R6, 1 */
		/* 8223B338h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B338h case   19:*/		return 0x8223B33C;
		  /* 8223B33Ch */ case   20:  		/* li R5, 1 */
		/* 8223B33Ch case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223B33Ch case   20:*/		return 0x8223B340;
		  /* 8223B340h */ case   21:  		/* li R4, 0 */
		/* 8223B340h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B340h case   21:*/		return 0x8223B344;
		  /* 8223B344h */ case   22:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B344h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B344h case   22:*/		return 0x8223B348;
		  /* 8223B348h */ case   23:  		/* mtspr CTR, R11 */
		/* 8223B348h case   23:*/		regs.CTR = regs.R11;
		/* 8223B348h case   23:*/		return 0x8223B34C;
		  /* 8223B34Ch */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 8223B34Ch case   24:*/		if ( 1 ) { regs.LR = 0x8223B350; return (uint32)regs.CTR; }
		/* 8223B34Ch case   24:*/		return 0x8223B350;
		  /* 8223B350h */ case   25:  		/* lwz R11, <#[R30]> */
		/* 8223B350h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B350h case   25:*/		return 0x8223B354;
		  /* 8223B354h */ case   26:  		/* mr R3, R30 */
		/* 8223B354h case   26:*/		regs.R3 = regs.R30;
		/* 8223B354h case   26:*/		return 0x8223B358;
		  /* 8223B358h */ case   27:  		/* li R6, 1 */
		/* 8223B358h case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B358h case   27:*/		return 0x8223B35C;
		  /* 8223B35Ch */ case   28:  		/* li R5, 2 */
		/* 8223B35Ch case   28:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223B35Ch case   28:*/		return 0x8223B360;
		  /* 8223B360h */ case   29:  		/* li R4, 0 */
		/* 8223B360h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B360h case   29:*/		return 0x8223B364;
		  /* 8223B364h */ case   30:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B364h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B364h case   30:*/		return 0x8223B368;
		  /* 8223B368h */ case   31:  		/* mtspr CTR, R11 */
		/* 8223B368h case   31:*/		regs.CTR = regs.R11;
		/* 8223B368h case   31:*/		return 0x8223B36C;
		  /* 8223B36Ch */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 8223B36Ch case   32:*/		if ( 1 ) { regs.LR = 0x8223B370; return (uint32)regs.CTR; }
		/* 8223B36Ch case   32:*/		return 0x8223B370;
		  /* 8223B370h */ case   33:  		/* lwz R11, <#[R30]> */
		/* 8223B370h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B370h case   33:*/		return 0x8223B374;
		  /* 8223B374h */ case   34:  		/* mr R3, R30 */
		/* 8223B374h case   34:*/		regs.R3 = regs.R30;
		/* 8223B374h case   34:*/		return 0x8223B378;
		  /* 8223B378h */ case   35:  		/* li R6, 0 */
		/* 8223B378h case   35:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223B378h case   35:*/		return 0x8223B37C;
		  /* 8223B37Ch */ case   36:  		/* li R5, 3 */
		/* 8223B37Ch case   36:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223B37Ch case   36:*/		return 0x8223B380;
		  /* 8223B380h */ case   37:  		/* li R4, 0 */
		/* 8223B380h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B380h case   37:*/		return 0x8223B384;
		  /* 8223B384h */ case   38:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B384h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B384h case   38:*/		return 0x8223B388;
		  /* 8223B388h */ case   39:  		/* mtspr CTR, R11 */
		/* 8223B388h case   39:*/		regs.CTR = regs.R11;
		/* 8223B388h case   39:*/		return 0x8223B38C;
		  /* 8223B38Ch */ case   40:  		/* bcctrl 20, CR0_LT */
		/* 8223B38Ch case   40:*/		if ( 1 ) { regs.LR = 0x8223B390; return (uint32)regs.CTR; }
		/* 8223B38Ch case   40:*/		return 0x8223B390;
		  /* 8223B390h */ case   41:  		/* mr R3, R30 */
		/* 8223B390h case   41:*/		regs.R3 = regs.R30;
		/* 8223B390h case   41:*/		return 0x8223B394;
		  /* 8223B394h */ case   42:  		/* mr R5, R29 */
		/* 8223B394h case   42:*/		regs.R5 = regs.R29;
		/* 8223B394h case   42:*/		return 0x8223B398;
		  /* 8223B398h */ case   43:  		/* li R4, 1 */
		/* 8223B398h case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B398h case   43:*/		return 0x8223B39C;
		  /* 8223B39Ch */ case   44:  		/* bl 110588 */
		/* 8223B39Ch case   44:*/		regs.LR = 0x8223B3A0; return 0x82256398;
		/* 8223B39Ch case   44:*/		return 0x8223B3A0;
		  /* 8223B3A0h */ case   45:  		/* mr R5, R20 */
		/* 8223B3A0h case   45:*/		regs.R5 = regs.R20;
		/* 8223B3A0h case   45:*/		return 0x8223B3A4;
		  /* 8223B3A4h */ case   46:  		/* li R4, 2 */
		/* 8223B3A4h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8223B3A4h case   46:*/		return 0x8223B3A8;
		  /* 8223B3A8h */ case   47:  		/* mr R3, R30 */
		/* 8223B3A8h case   47:*/		regs.R3 = regs.R30;
		/* 8223B3A8h case   47:*/		return 0x8223B3AC;
		  /* 8223B3ACh */ case   48:  		/* bl 110572 */
		/* 8223B3ACh case   48:*/		regs.LR = 0x8223B3B0; return 0x82256398;
		/* 8223B3ACh case   48:*/		return 0x8223B3B0;
		  /* 8223B3B0h */ case   49:  		/* li R29, 0 */
		/* 8223B3B0h case   49:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8223B3B0h case   49:*/		return 0x8223B3B4;
		  /* 8223B3B4h */ case   50:  		/* lwz R11, <#[R30]> */
		/* 8223B3B4h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B3B4h case   50:*/		return 0x8223B3B8;
		  /* 8223B3B8h */ case   51:  		/* li R6, 3 */
		/* 8223B3B8h case   51:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8223B3B8h case   51:*/		return 0x8223B3BC;
		  /* 8223B3BCh */ case   52:  		/* mr R5, R29 */
		/* 8223B3BCh case   52:*/		regs.R5 = regs.R29;
		/* 8223B3BCh case   52:*/		return 0x8223B3C0;
		  /* 8223B3C0h */ case   53:  		/* li R4, 1 */
		/* 8223B3C0h case   53:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B3C0h case   53:*/		return 0x8223B3C4;
		  /* 8223B3C4h */ case   54:  		/* mr R3, R30 */
		/* 8223B3C4h case   54:*/		regs.R3 = regs.R30;
		/* 8223B3C4h case   54:*/		return 0x8223B3C8;
		  /* 8223B3C8h */ case   55:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223B3C8h case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223B3C8h case   55:*/		return 0x8223B3CC;
		  /* 8223B3CCh */ case   56:  		/* mtspr CTR, R11 */
		/* 8223B3CCh case   56:*/		regs.CTR = regs.R11;
		/* 8223B3CCh case   56:*/		return 0x8223B3D0;
		  /* 8223B3D0h */ case   57:  		/* bcctrl 20, CR0_LT */
		/* 8223B3D0h case   57:*/		if ( 1 ) { regs.LR = 0x8223B3D4; return (uint32)regs.CTR; }
		/* 8223B3D0h case   57:*/		return 0x8223B3D4;
		  /* 8223B3D4h */ case   58:  		/* lwz R11, <#[R30]> */
		/* 8223B3D4h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B3D4h case   58:*/		return 0x8223B3D8;
		  /* 8223B3D8h */ case   59:  		/* li R6, 3 */
		/* 8223B3D8h case   59:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8223B3D8h case   59:*/		return 0x8223B3DC;
		  /* 8223B3DCh */ case   60:  		/* mr R5, R29 */
		/* 8223B3DCh case   60:*/		regs.R5 = regs.R29;
		/* 8223B3DCh case   60:*/		return 0x8223B3E0;
		  /* 8223B3E0h */ case   61:  		/* li R4, 2 */
		/* 8223B3E0h case   61:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8223B3E0h case   61:*/		return 0x8223B3E4;
		  /* 8223B3E4h */ case   62:  		/* mr R3, R30 */
		/* 8223B3E4h case   62:*/		regs.R3 = regs.R30;
		/* 8223B3E4h case   62:*/		return 0x8223B3E8;
		  /* 8223B3E8h */ case   63:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223B3E8h case   63:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223B3E8h case   63:*/		return 0x8223B3EC;
		  /* 8223B3ECh */ case   64:  		/* mtspr CTR, R11 */
		/* 8223B3ECh case   64:*/		regs.CTR = regs.R11;
		/* 8223B3ECh case   64:*/		return 0x8223B3F0;
		  /* 8223B3F0h */ case   65:  		/* bcctrl 20, CR0_LT */
		/* 8223B3F0h case   65:*/		if ( 1 ) { regs.LR = 0x8223B3F4; return (uint32)regs.CTR; }
		/* 8223B3F0h case   65:*/		return 0x8223B3F4;
		  /* 8223B3F4h */ case   66:  		/* addi R29, R29, 1 */
		/* 8223B3F4h case   66:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223B3F4h case   66:*/		return 0x8223B3F8;
		  /* 8223B3F8h */ case   67:  		/* cmpwi CR6, R29, 4 */
		/* 8223B3F8h case   67:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 8223B3F8h case   67:*/		return 0x8223B3FC;
		  /* 8223B3FCh */ case   68:  		/* bc 12, CR6_LT, -72 */
		/* 8223B3FCh case   68:*/		if ( regs.CR[6].lt ) { return 0x8223B3B4;  }
		/* 8223B3FCh case   68:*/		return 0x8223B400;
		  /* 8223B400h */ case   69:  		/* mr R4, R30 */
		/* 8223B400h case   69:*/		regs.R4 = regs.R30;
		/* 8223B400h case   69:*/		return 0x8223B404;
		  /* 8223B404h */ case   70:  		/* mr R3, R31 */
		/* 8223B404h case   70:*/		regs.R3 = regs.R31;
		/* 8223B404h case   70:*/		return 0x8223B408;
		  /* 8223B408h */ case   71:  		/* bl -20064 */
		/* 8223B408h case   71:*/		regs.LR = 0x8223B40C; return 0x822365A8;
		/* 8223B408h case   71:*/		return 0x8223B40C;
		  /* 8223B40Ch */ case   72:  		/* mr R4, R30 */
		/* 8223B40Ch case   72:*/		regs.R4 = regs.R30;
		/* 8223B40Ch case   72:*/		return 0x8223B410;
		  /* 8223B410h */ case   73:  		/* mr R3, R28 */
		/* 8223B410h case   73:*/		regs.R3 = regs.R28;
		/* 8223B410h case   73:*/		return 0x8223B414;
		  /* 8223B414h */ case   74:  		/* bl 121628 */
		/* 8223B414h case   74:*/		regs.LR = 0x8223B418; return 0x82258F30;
		/* 8223B414h case   74:*/		return 0x8223B418;
		  /* 8223B418h */ case   75:  		/* mr R3, R30 */
		/* 8223B418h case   75:*/		regs.R3 = regs.R30;
		/* 8223B418h case   75:*/		return 0x8223B41C;
		  /* 8223B41Ch */ case   76:  		/* bl 109476 */
		/* 8223B41Ch case   76:*/		regs.LR = 0x8223B420; return 0x82255FC0;
		/* 8223B41Ch case   76:*/		return 0x8223B420;
		  /* 8223B420h */ case   77:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223B420h case   77:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223B420h case   77:*/		return 0x8223B424;
		  /* 8223B424h */ case   78:  		/* bc 4, CR0_EQ, 28 */
		/* 8223B424h case   78:*/		if ( !regs.CR[0].eq ) { return 0x8223B440;  }
		/* 8223B424h case   78:*/		return 0x8223B428;
		  /* 8223B428h */ case   79:  		/* mr R6, R21 */
		/* 8223B428h case   79:*/		regs.R6 = regs.R21;
		/* 8223B428h case   79:*/		return 0x8223B42C;
		  /* 8223B42Ch */ case   80:  		/* mr R5, R25 */
		/* 8223B42Ch case   80:*/		regs.R5 = regs.R25;
		/* 8223B42Ch case   80:*/		return 0x8223B430;
		  /* 8223B430h */ case   81:  		/* mr R4, R22 */
		/* 8223B430h case   81:*/		regs.R4 = regs.R22;
		/* 8223B430h case   81:*/		return 0x8223B434;
		  /* 8223B434h */ case   82:  		/* li R7, 1856 */
		/* 8223B434h case   82:*/		cpu::op::li<0>(regs,&regs.R7,0x740);
		/* 8223B434h case   82:*/		return 0x8223B438;
		  /* 8223B438h */ case   83:  		/* li R3, 0 */
		/* 8223B438h case   83:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223B438h case   83:*/		return 0x8223B43C;
		  /* 8223B43Ch */ case   84:  		/* bl -931892 */
		/* 8223B43Ch case   84:*/		regs.LR = 0x8223B440; return 0x82157C08;
		/* 8223B43Ch case   84:*/		return 0x8223B440;
	}
	return 0x8223B440;
} // Block from 8223B2ECh-8223B440h (85 instructions)

//////////////////////////////////////////////////////
// Block at 8223B440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B440);
		  /* 8223B440h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223B440h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B440h case    0:*/		return 0x8223B444;
		  /* 8223B444h */ case    1:  		/* li R4, 140 */
		/* 8223B444h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8C);
		/* 8223B444h case    1:*/		return 0x8223B448;
		  /* 8223B448h */ case    2:  		/* lwz R30, <#[R11 + 1452]> */
		/* 8223B448h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x000005AC) );
		/* 8223B448h case    2:*/		return 0x8223B44C;
		  /* 8223B44Ch */ case    3:  		/* mr R3, R30 */
		/* 8223B44Ch case    3:*/		regs.R3 = regs.R30;
		/* 8223B44Ch case    3:*/		return 0x8223B450;
		  /* 8223B450h */ case    4:  		/* bl -126872 */
		/* 8223B450h case    4:*/		regs.LR = 0x8223B454; return 0x8221C4B8;
		/* 8223B450h case    4:*/		return 0x8223B454;
		  /* 8223B454h */ case    5:  		/* mr R11, R3 */
		/* 8223B454h case    5:*/		regs.R11 = regs.R3;
		/* 8223B454h case    5:*/		return 0x8223B458;
		  /* 8223B458h */ case    6:  		/* addic. R3, R3, 4 */
		/* 8223B458h case    6:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 8223B458h case    6:*/		return 0x8223B45C;
		  /* 8223B45Ch */ case    7:  		/* stw R30, <#[R11]> */
		/* 8223B45Ch case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8223B45Ch case    7:*/		return 0x8223B460;
		  /* 8223B460h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 8223B460h case    8:*/		if ( regs.CR[0].eq ) { return 0x8223B474;  }
		/* 8223B460h case    8:*/		return 0x8223B464;
		  /* 8223B464h */ case    9:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223B464h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B464h case    9:*/		return 0x8223B468;
		  /* 8223B468h */ case   10:  		/* bl 122088 */
		/* 8223B468h case   10:*/		regs.LR = 0x8223B46C; return 0x82259150;
		/* 8223B468h case   10:*/		return 0x8223B46C;
		  /* 8223B46Ch */ case   11:  		/* mr R30, R3 */
		/* 8223B46Ch case   11:*/		regs.R30 = regs.R3;
		/* 8223B46Ch case   11:*/		return 0x8223B470;
		  /* 8223B470h */ case   12:  		/* b 8 */
		/* 8223B470h case   12:*/		return 0x8223B478;
		/* 8223B470h case   12:*/		return 0x8223B474;
	}
	return 0x8223B474;
} // Block from 8223B440h-8223B474h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223B474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B474);
		  /* 8223B474h */ case    0:  		/* li R30, 0 */
		/* 8223B474h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223B474h case    0:*/		return 0x8223B478;
	}
	return 0x8223B478;
} // Block from 8223B474h-8223B478h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223B478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B478);
		  /* 8223B478h */ case    0:  		/* stw R30, <#[R27 + 148]> */
		/* 8223B478h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x00000094) );
		/* 8223B478h case    0:*/		return 0x8223B47C;
		  /* 8223B47Ch */ case    1:  		/* mr R4, R30 */
		/* 8223B47Ch case    1:*/		regs.R4 = regs.R30;
		/* 8223B47Ch case    1:*/		return 0x8223B480;
		  /* 8223B480h */ case    2:  		/* mr R3, R27 */
		/* 8223B480h case    2:*/		regs.R3 = regs.R27;
		/* 8223B480h case    2:*/		return 0x8223B484;
		  /* 8223B484h */ case    3:  		/* bl 123980 */
		/* 8223B484h case    3:*/		regs.LR = 0x8223B488; return 0x822598D0;
		/* 8223B484h case    3:*/		return 0x8223B488;
		  /* 8223B488h */ case    4:  		/* mr R3, R28 */
		/* 8223B488h case    4:*/		regs.R3 = regs.R28;
		/* 8223B488h case    4:*/		return 0x8223B48C;
		  /* 8223B48Ch */ case    5:  		/* lwz R29, <#[R27 + 152]> */
		/* 8223B48Ch case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + 0x00000098) );
		/* 8223B48Ch case    5:*/		return 0x8223B490;
		  /* 8223B490h */ case    6:  		/* mr R4, R29 */
		/* 8223B490h case    6:*/		regs.R4 = regs.R29;
		/* 8223B490h case    6:*/		return 0x8223B494;
		  /* 8223B494h */ case    7:  		/* bl 123964 */
		/* 8223B494h case    7:*/		regs.LR = 0x8223B498; return 0x822598D0;
		/* 8223B494h case    7:*/		return 0x8223B498;
		  /* 8223B498h */ case    8:  		/* mr R4, R29 */
		/* 8223B498h case    8:*/		regs.R4 = regs.R29;
		/* 8223B498h case    8:*/		return 0x8223B49C;
		  /* 8223B49Ch */ case    9:  		/* mr R3, R30 */
		/* 8223B49Ch case    9:*/		regs.R3 = regs.R30;
		/* 8223B49Ch case    9:*/		return 0x8223B4A0;
		  /* 8223B4A0h */ case   10:  		/* bl 123952 */
		/* 8223B4A0h case   10:*/		regs.LR = 0x8223B4A4; return 0x822598D0;
		/* 8223B4A0h case   10:*/		return 0x8223B4A4;
		  /* 8223B4A4h */ case   11:  		/* mr R6, R29 */
		/* 8223B4A4h case   11:*/		regs.R6 = regs.R29;
		/* 8223B4A4h case   11:*/		return 0x8223B4A8;
		  /* 8223B4A8h */ case   12:  		/* mr R5, R27 */
		/* 8223B4A8h case   12:*/		regs.R5 = regs.R27;
		/* 8223B4A8h case   12:*/		return 0x8223B4AC;
		  /* 8223B4ACh */ case   13:  		/* mr R4, R18 */
		/* 8223B4ACh case   13:*/		regs.R4 = regs.R18;
		/* 8223B4ACh case   13:*/		return 0x8223B4B0;
		  /* 8223B4B0h */ case   14:  		/* mr R3, R19 */
		/* 8223B4B0h case   14:*/		regs.R3 = regs.R19;
		/* 8223B4B0h case   14:*/		return 0x8223B4B4;
		  /* 8223B4B4h */ case   15:  		/* bl 125268 */
		/* 8223B4B4h case   15:*/		regs.LR = 0x8223B4B8; return 0x82259E08;
		/* 8223B4B4h case   15:*/		return 0x8223B4B8;
		  /* 8223B4B8h */ case   16:  		/* mr R5, R27 */
		/* 8223B4B8h case   16:*/		regs.R5 = regs.R27;
		/* 8223B4B8h case   16:*/		return 0x8223B4BC;
		  /* 8223B4BCh */ case   17:  		/* mr R4, R19 */
		/* 8223B4BCh case   17:*/		regs.R4 = regs.R19;
		/* 8223B4BCh case   17:*/		return 0x8223B4C0;
		  /* 8223B4C0h */ case   18:  		/* mr R3, R31 */
		/* 8223B4C0h case   18:*/		regs.R3 = regs.R31;
		/* 8223B4C0h case   18:*/		return 0x8223B4C4;
		  /* 8223B4C4h */ case   19:  		/* bl -22636 */
		/* 8223B4C4h case   19:*/		regs.LR = 0x8223B4C8; return 0x82235C58;
		/* 8223B4C4h case   19:*/		return 0x8223B4C8;
		  /* 8223B4C8h */ case   20:  		/* mr R5, R28 */
		/* 8223B4C8h case   20:*/		regs.R5 = regs.R28;
		/* 8223B4C8h case   20:*/		return 0x8223B4CC;
		  /* 8223B4CCh */ case   21:  		/* mr R4, R27 */
		/* 8223B4CCh case   21:*/		regs.R4 = regs.R27;
		/* 8223B4CCh case   21:*/		return 0x8223B4D0;
		  /* 8223B4D0h */ case   22:  		/* mr R3, R31 */
		/* 8223B4D0h case   22:*/		regs.R3 = regs.R31;
		/* 8223B4D0h case   22:*/		return 0x8223B4D4;
		  /* 8223B4D4h */ case   23:  		/* bl -22652 */
		/* 8223B4D4h case   23:*/		regs.LR = 0x8223B4D8; return 0x82235C58;
		/* 8223B4D4h case   23:*/		return 0x8223B4D8;
		  /* 8223B4D8h */ case   24:  		/* mr R5, R30 */
		/* 8223B4D8h case   24:*/		regs.R5 = regs.R30;
		/* 8223B4D8h case   24:*/		return 0x8223B4DC;
		  /* 8223B4DCh */ case   25:  		/* mr R4, R28 */
		/* 8223B4DCh case   25:*/		regs.R4 = regs.R28;
		/* 8223B4DCh case   25:*/		return 0x8223B4E0;
		  /* 8223B4E0h */ case   26:  		/* mr R3, R31 */
		/* 8223B4E0h case   26:*/		regs.R3 = regs.R31;
		/* 8223B4E0h case   26:*/		return 0x8223B4E4;
		  /* 8223B4E4h */ case   27:  		/* bl -22668 */
		/* 8223B4E4h case   27:*/		regs.LR = 0x8223B4E8; return 0x82235C58;
		/* 8223B4E4h case   27:*/		return 0x8223B4E8;
		  /* 8223B4E8h */ case   28:  		/* mr R5, R29 */
		/* 8223B4E8h case   28:*/		regs.R5 = regs.R29;
		/* 8223B4E8h case   28:*/		return 0x8223B4EC;
		  /* 8223B4ECh */ case   29:  		/* mr R4, R30 */
		/* 8223B4ECh case   29:*/		regs.R4 = regs.R30;
		/* 8223B4ECh case   29:*/		return 0x8223B4F0;
		  /* 8223B4F0h */ case   30:  		/* mr R3, R31 */
		/* 8223B4F0h case   30:*/		regs.R3 = regs.R31;
		/* 8223B4F0h case   30:*/		return 0x8223B4F4;
		  /* 8223B4F4h */ case   31:  		/* bl -22684 */
		/* 8223B4F4h case   31:*/		regs.LR = 0x8223B4F8; return 0x82235C58;
		/* 8223B4F4h case   31:*/		return 0x8223B4F8;
		  /* 8223B4F8h */ case   32:  		/* addi R1, R1, 208 */
		/* 8223B4F8h case   32:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8223B4F8h case   32:*/		return 0x8223B4FC;
		  /* 8223B4FCh */ case   33:  		/* b -1745532 */
		/* 8223B4FCh case   33:*/		return 0x82091280;
		/* 8223B4FCh case   33:*/		return 0x8223B500;
	}
	return 0x8223B500;
} // Block from 8223B478h-8223B500h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8223B500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B500);
		  /* 8223B500h */ case    0:  		/* mfspr R12, LR */
		/* 8223B500h case    0:*/		regs.R12 = regs.LR;
		/* 8223B500h case    0:*/		return 0x8223B504;
		  /* 8223B504h */ case    1:  		/* bl -1745616 */
		/* 8223B504h case    1:*/		regs.LR = 0x8223B508; return 0x82091234;
		/* 8223B504h case    1:*/		return 0x8223B508;
		  /* 8223B508h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8223B508h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8223B508h case    2:*/		return 0x8223B50C;
		  /* 8223B50Ch */ case    3:  		/* mr R31, R3 */
		/* 8223B50Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223B50Ch case    3:*/		return 0x8223B510;
		  /* 8223B510h */ case    4:  		/* bl -20704 */
		/* 8223B510h case    4:*/		regs.LR = 0x8223B514; return 0x82236430;
		/* 8223B510h case    4:*/		return 0x8223B514;
		  /* 8223B514h */ case    5:  		/* lwz R10, <#[R31 + 12]> */
		/* 8223B514h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B514h case    5:*/		return 0x8223B518;
		  /* 8223B518h */ case    6:  		/* li R26, 1 */
		/* 8223B518h case    6:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 8223B518h case    6:*/		return 0x8223B51C;
		  /* 8223B51Ch */ case    7:  		/* li R4, 0 */
		/* 8223B51Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B51Ch case    7:*/		return 0x8223B520;
		  /* 8223B520h */ case    8:  		/* stb R26, <#[R31 + 2073]> */
		/* 8223B520h case    8:*/		cpu::mem::store8( regs, regs.R26, (uint32)(regs.R31 + 0x00000819) );
		/* 8223B520h case    8:*/		return 0x8223B524;
		  /* 8223B524h */ case    9:  		/* mr R25, R3 */
		/* 8223B524h case    9:*/		regs.R25 = regs.R3;
		/* 8223B524h case    9:*/		return 0x8223B528;
		  /* 8223B528h */ case   10:  		/* lwz R11, <#[R10 + 1508]> */
		/* 8223B528h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 8223B528h case   10:*/		return 0x8223B52C;
		  /* 8223B52Ch */ case   11:  		/* addi R5, R11, -1 */
		/* 8223B52Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 8223B52Ch case   11:*/		return 0x8223B530;
		  /* 8223B530h */ case   12:  		/* stw R5, <#[R10 + 1508]> */
		/* 8223B530h case   12:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 8223B530h case   12:*/		return 0x8223B534;
		  /* 8223B534h */ case   13:  		/* lwz R3, <#[R31 + 172]> */
		/* 8223B534h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 8223B534h case   13:*/		return 0x8223B538;
		  /* 8223B538h */ case   14:  		/* bl 41688 */
		/* 8223B538h case   14:*/		regs.LR = 0x8223B53C; return 0x82245810;
		/* 8223B538h case   14:*/		return 0x8223B53C;
		  /* 8223B53Ch */ case   15:  		/* lwz R10, <#[R31 + 12]> */
		/* 8223B53Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B53Ch case   15:*/		return 0x8223B540;
		  /* 8223B540h */ case   16:  		/* lwz R11, <#[R10 + 1508]> */
		/* 8223B540h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000005E4) );
		/* 8223B540h case   16:*/		return 0x8223B544;
		  /* 8223B544h */ case   17:  		/* li R4, 0 */
		/* 8223B544h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B544h case   17:*/		return 0x8223B548;
		  /* 8223B548h */ case   18:  		/* mr R20, R3 */
		/* 8223B548h case   18:*/		regs.R20 = regs.R3;
		/* 8223B548h case   18:*/		return 0x8223B54C;
		  /* 8223B54Ch */ case   19:  		/* addi R5, R11, -1 */
		/* 8223B54Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 8223B54Ch case   19:*/		return 0x8223B550;
		  /* 8223B550h */ case   20:  		/* stw R5, <#[R10 + 1508]> */
		/* 8223B550h case   20:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x000005E4) );
		/* 8223B550h case   20:*/		return 0x8223B554;
		  /* 8223B554h */ case   21:  		/* lwz R3, <#[R31 + 172]> */
		/* 8223B554h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000AC) );
		/* 8223B554h case   21:*/		return 0x8223B558;
		  /* 8223B558h */ case   22:  		/* bl 41656 */
		/* 8223B558h case   22:*/		regs.LR = 0x8223B55C; return 0x82245810;
		/* 8223B558h case   22:*/		return 0x8223B55C;
		  /* 8223B55Ch */ case   23:  		/* mr R28, R3 */
		/* 8223B55Ch case   23:*/		regs.R28 = regs.R3;
		/* 8223B55Ch case   23:*/		return 0x8223B560;
		  /* 8223B560h */ case   24:  		/* lwz R3, <#[R31 + 168]> */
		/* 8223B560h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000A8) );
		/* 8223B560h case   24:*/		return 0x8223B564;
		  /* 8223B564h */ case   25:  		/* bl 122708 */
		/* 8223B564h case   25:*/		regs.LR = 0x8223B568; return 0x822594B8;
		/* 8223B564h case   25:*/		return 0x8223B568;
		  /* 8223B568h */ case   26:  		/* lis R11, -32253 */
		/* 8223B568h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8223B568h case   26:*/		return 0x8223B56C;
		  /* 8223B56Ch */ case   27:  		/* lis R10, -32252 */
		/* 8223B56Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223B56Ch case   27:*/		return 0x8223B570;
		  /* 8223B570h */ case   28:  		/* cmpwi CR6, R3, 1 */
		/* 8223B570h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223B570h case   28:*/		return 0x8223B574;
		  /* 8223B574h */ case   29:  		/* addi R23, R11, 27460 */
		/* 8223B574h case   29:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x6B44);
		/* 8223B574h case   29:*/		return 0x8223B578;
		  /* 8223B578h */ case   30:  		/* addi R22, R10, 8520 */
		/* 8223B578h case   30:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0x2148);
		/* 8223B578h case   30:*/		return 0x8223B57C;
		  /* 8223B57Ch */ case   31:  		/* bc 12, CR6_EQ, 32 */
		/* 8223B57Ch case   31:*/		if ( regs.CR[6].eq ) { return 0x8223B59C;  }
		/* 8223B57Ch case   31:*/		return 0x8223B580;
		  /* 8223B580h */ case   32:  		/* lis R11, -32252 */
		/* 8223B580h case   32:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223B580h case   32:*/		return 0x8223B584;
		  /* 8223B584h */ case   33:  		/* mr R6, R22 */
		/* 8223B584h case   33:*/		regs.R6 = regs.R22;
		/* 8223B584h case   33:*/		return 0x8223B588;
		  /* 8223B588h */ case   34:  		/* addi R5, R11, 9004 */
		/* 8223B588h case   34:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x232C);
		/* 8223B588h case   34:*/		return 0x8223B58C;
		  /* 8223B58Ch */ case   35:  		/* mr R4, R23 */
		/* 8223B58Ch case   35:*/		regs.R4 = regs.R23;
		/* 8223B58Ch case   35:*/		return 0x8223B590;
		  /* 8223B590h */ case   36:  		/* li R7, 2205 */
		/* 8223B590h case   36:*/		cpu::op::li<0>(regs,&regs.R7,0x89D);
		/* 8223B590h case   36:*/		return 0x8223B594;
		  /* 8223B594h */ case   37:  		/* li R3, 0 */
		/* 8223B594h case   37:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223B594h case   37:*/		return 0x8223B598;
		  /* 8223B598h */ case   38:  		/* bl -932240 */
		/* 8223B598h case   38:*/		regs.LR = 0x8223B59C; return 0x82157C08;
		/* 8223B598h case   38:*/		return 0x8223B59C;
	}
	return 0x8223B59C;
} // Block from 8223B500h-8223B59Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 8223B59Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B59C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B59C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B59C);
		  /* 8223B59Ch */ case    0:  		/* lwz R19, <#[R31 + 168]> */
		/* 8223B59Ch case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R31 + 0x000000A8) );
		/* 8223B59Ch case    0:*/		return 0x8223B5A0;
		  /* 8223B5A0h */ case    1:  		/* li R9, 0 */
		/* 8223B5A0h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8223B5A0h case    1:*/		return 0x8223B5A4;
		  /* 8223B5A4h */ case    2:  		/* lwz R21, <#[R1 + 84]> */
		/* 8223B5A4h case    2:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x00000054) );
		/* 8223B5A4h case    2:*/		return 0x8223B5A8;
		  /* 8223B5A8h */ case    3:  		/* li R11, 0 */
		/* 8223B5A8h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223B5A8h case    3:*/		return 0x8223B5AC;
		  /* 8223B5ACh */ case    4:  		/* mr R8, R26 */
		/* 8223B5ACh case    4:*/		regs.R8 = regs.R26;
		/* 8223B5ACh case    4:*/		return 0x8223B5B0;
		  /* 8223B5B0h */ case    5:  		/* lwz R10, <#[R19 + 60]> */
		/* 8223B5B0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x0000003C) );
		/* 8223B5B0h case    5:*/		return 0x8223B5B4;
		  /* 8223B5B4h */ case    6:  		/* lwz R6, <#[R10 + 4]> */
		/* 8223B5B4h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 8223B5B4h case    6:*/		return 0x8223B5B8;
		  /* 8223B5B8h */ case    7:  		/* cmplw CR6, R8, R6 */
		/* 8223B5B8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R6);
		/* 8223B5B8h case    7:*/		return 0x8223B5BC;
		  /* 8223B5BCh */ case    8:  		/* bc 4, CR6_GT, 12 */
		/* 8223B5BCh case    8:*/		if ( !regs.CR[6].gt ) { return 0x8223B5C8;  }
		/* 8223B5BCh case    8:*/		return 0x8223B5C0;
		  /* 8223B5C0h */ case    9:  		/* li R7, 0 */
		/* 8223B5C0h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8223B5C0h case    9:*/		return 0x8223B5C4;
		  /* 8223B5C4h */ case   10:  		/* b 16 */
		/* 8223B5C4h case   10:*/		return 0x8223B5D4;
		/* 8223B5C4h case   10:*/		return 0x8223B5C8;
	}
	return 0x8223B5C8;
} // Block from 8223B59Ch-8223B5C8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8223B5C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B5C8);
		  /* 8223B5C8h */ case    0:  		/* lwz R9, <#[R10 + 8]> */
		/* 8223B5C8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 8223B5C8h case    0:*/		return 0x8223B5CC;
		  /* 8223B5CCh */ case    1:  		/* mr R7, R26 */
		/* 8223B5CCh case    1:*/		regs.R7 = regs.R26;
		/* 8223B5CCh case    1:*/		return 0x8223B5D0;
		  /* 8223B5D0h */ case    2:  		/* lwzx R9, <#[R9 + R11]> */
		/* 8223B5D0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8223B5D0h case    2:*/		return 0x8223B5D4;
	}
	return 0x8223B5D4;
} // Block from 8223B5C8h-8223B5D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223B5D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B5D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B5D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B5D4);
		  /* 8223B5D4h */ case    0:  		/* rlwinm. R7, R7, 0, 24, 31 */
		/* 8223B5D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R7,regs.R7);
		/* 8223B5D4h case    0:*/		return 0x8223B5D8;
		  /* 8223B5D8h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 8223B5D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8223B5EC;  }
		/* 8223B5D8h case    1:*/		return 0x8223B5DC;
		  /* 8223B5DCh */ case    2:  		/* mr R21, R9 */
		/* 8223B5DCh case    2:*/		regs.R21 = regs.R9;
		/* 8223B5DCh case    2:*/		return 0x8223B5E0;
		  /* 8223B5E0h */ case    3:  		/* addi R8, R8, 1 */
		/* 8223B5E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8223B5E0h case    3:*/		return 0x8223B5E4;
		  /* 8223B5E4h */ case    4:  		/* addi R11, R11, 4 */
		/* 8223B5E4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223B5E4h case    4:*/		return 0x8223B5E8;
		  /* 8223B5E8h */ case    5:  		/* b -48 */
		/* 8223B5E8h case    5:*/		return 0x8223B5B8;
		/* 8223B5E8h case    5:*/		return 0x8223B5EC;
	}
	return 0x8223B5EC;
} // Block from 8223B5D4h-8223B5ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223B5ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B5EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B5EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B5EC);
		  /* 8223B5ECh */ case    0:  		/* li R3, 64 */
		/* 8223B5ECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x40);
		/* 8223B5ECh case    0:*/		return 0x8223B5F0;
		  /* 8223B5F0h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223B5F0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B5F0h case    1:*/		return 0x8223B5F4;
		  /* 8223B5F4h */ case    2:  		/* bl 108860 */
		/* 8223B5F4h case    2:*/		regs.LR = 0x8223B5F8; return 0x82255F30;
		/* 8223B5F4h case    2:*/		return 0x8223B5F8;
		  /* 8223B5F8h */ case    3:  		/* mr R5, R28 */
		/* 8223B5F8h case    3:*/		regs.R5 = regs.R28;
		/* 8223B5F8h case    3:*/		return 0x8223B5FC;
		  /* 8223B5FCh */ case    4:  		/* li R4, 0 */
		/* 8223B5FCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B5FCh case    4:*/		return 0x8223B600;
		  /* 8223B600h */ case    5:  		/* mr R30, R3 */
		/* 8223B600h case    5:*/		regs.R30 = regs.R3;
		/* 8223B600h case    5:*/		return 0x8223B604;
		  /* 8223B604h */ case    6:  		/* bl 109972 */
		/* 8223B604h case    6:*/		regs.LR = 0x8223B608; return 0x82256398;
		/* 8223B604h case    6:*/		return 0x8223B608;
		  /* 8223B608h */ case    7:  		/* lwz R11, <#[R30]> */
		/* 8223B608h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B608h case    7:*/		return 0x8223B60C;
		  /* 8223B60Ch */ case    8:  		/* mr R3, R30 */
		/* 8223B60Ch case    8:*/		regs.R3 = regs.R30;
		/* 8223B60Ch case    8:*/		return 0x8223B610;
		  /* 8223B610h */ case    9:  		/* li R6, 0 */
		/* 8223B610h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223B610h case    9:*/		return 0x8223B614;
		  /* 8223B614h */ case   10:  		/* li R5, 0 */
		/* 8223B614h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223B614h case   10:*/		return 0x8223B618;
		  /* 8223B618h */ case   11:  		/* li R4, 0 */
		/* 8223B618h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B618h case   11:*/		return 0x8223B61C;
		  /* 8223B61Ch */ case   12:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B61Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B61Ch case   12:*/		return 0x8223B620;
		  /* 8223B620h */ case   13:  		/* mtspr CTR, R11 */
		/* 8223B620h case   13:*/		regs.CTR = regs.R11;
		/* 8223B620h case   13:*/		return 0x8223B624;
		  /* 8223B624h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223B624h case   14:*/		if ( 1 ) { regs.LR = 0x8223B628; return (uint32)regs.CTR; }
		/* 8223B624h case   14:*/		return 0x8223B628;
		  /* 8223B628h */ case   15:  		/* lwz R11, <#[R30]> */
		/* 8223B628h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B628h case   15:*/		return 0x8223B62C;
		  /* 8223B62Ch */ case   16:  		/* mr R3, R30 */
		/* 8223B62Ch case   16:*/		regs.R3 = regs.R30;
		/* 8223B62Ch case   16:*/		return 0x8223B630;
		  /* 8223B630h */ case   17:  		/* li R6, 1 */
		/* 8223B630h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B630h case   17:*/		return 0x8223B634;
		  /* 8223B634h */ case   18:  		/* li R5, 1 */
		/* 8223B634h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223B634h case   18:*/		return 0x8223B638;
		  /* 8223B638h */ case   19:  		/* li R4, 0 */
		/* 8223B638h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B638h case   19:*/		return 0x8223B63C;
		  /* 8223B63Ch */ case   20:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B63Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B63Ch case   20:*/		return 0x8223B640;
		  /* 8223B640h */ case   21:  		/* mtspr CTR, R11 */
		/* 8223B640h case   21:*/		regs.CTR = regs.R11;
		/* 8223B640h case   21:*/		return 0x8223B644;
		  /* 8223B644h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 8223B644h case   22:*/		if ( 1 ) { regs.LR = 0x8223B648; return (uint32)regs.CTR; }
		/* 8223B644h case   22:*/		return 0x8223B648;
		  /* 8223B648h */ case   23:  		/* lwz R11, <#[R30]> */
		/* 8223B648h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B648h case   23:*/		return 0x8223B64C;
		  /* 8223B64Ch */ case   24:  		/* mr R3, R30 */
		/* 8223B64Ch case   24:*/		regs.R3 = regs.R30;
		/* 8223B64Ch case   24:*/		return 0x8223B650;
		  /* 8223B650h */ case   25:  		/* li R6, 1 */
		/* 8223B650h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B650h case   25:*/		return 0x8223B654;
		  /* 8223B654h */ case   26:  		/* li R5, 2 */
		/* 8223B654h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223B654h case   26:*/		return 0x8223B658;
		  /* 8223B658h */ case   27:  		/* li R4, 0 */
		/* 8223B658h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B658h case   27:*/		return 0x8223B65C;
		  /* 8223B65Ch */ case   28:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B65Ch case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B65Ch case   28:*/		return 0x8223B660;
		  /* 8223B660h */ case   29:  		/* mtspr CTR, R11 */
		/* 8223B660h case   29:*/		regs.CTR = regs.R11;
		/* 8223B660h case   29:*/		return 0x8223B664;
		  /* 8223B664h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 8223B664h case   30:*/		if ( 1 ) { regs.LR = 0x8223B668; return (uint32)regs.CTR; }
		/* 8223B664h case   30:*/		return 0x8223B668;
		  /* 8223B668h */ case   31:  		/* lwz R11, <#[R30]> */
		/* 8223B668h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B668h case   31:*/		return 0x8223B66C;
		  /* 8223B66Ch */ case   32:  		/* mr R3, R30 */
		/* 8223B66Ch case   32:*/		regs.R3 = regs.R30;
		/* 8223B66Ch case   32:*/		return 0x8223B670;
		  /* 8223B670h */ case   33:  		/* li R6, 1 */
		/* 8223B670h case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B670h case   33:*/		return 0x8223B674;
		  /* 8223B674h */ case   34:  		/* li R5, 3 */
		/* 8223B674h case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223B674h case   34:*/		return 0x8223B678;
		  /* 8223B678h */ case   35:  		/* li R4, 0 */
		/* 8223B678h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B678h case   35:*/		return 0x8223B67C;
		  /* 8223B67Ch */ case   36:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B67Ch case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B67Ch case   36:*/		return 0x8223B680;
		  /* 8223B680h */ case   37:  		/* mtspr CTR, R11 */
		/* 8223B680h case   37:*/		regs.CTR = regs.R11;
		/* 8223B680h case   37:*/		return 0x8223B684;
		  /* 8223B684h */ case   38:  		/* bcctrl 20, CR0_LT */
		/* 8223B684h case   38:*/		if ( 1 ) { regs.LR = 0x8223B688; return (uint32)regs.CTR; }
		/* 8223B684h case   38:*/		return 0x8223B688;
		  /* 8223B688h */ case   39:  		/* mr R5, R25 */
		/* 8223B688h case   39:*/		regs.R5 = regs.R25;
		/* 8223B688h case   39:*/		return 0x8223B68C;
		  /* 8223B68Ch */ case   40:  		/* li R4, 1 */
		/* 8223B68Ch case   40:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B68Ch case   40:*/		return 0x8223B690;
		  /* 8223B690h */ case   41:  		/* mr R3, R30 */
		/* 8223B690h case   41:*/		regs.R3 = regs.R30;
		/* 8223B690h case   41:*/		return 0x8223B694;
		  /* 8223B694h */ case   42:  		/* bl 109828 */
		/* 8223B694h case   42:*/		regs.LR = 0x8223B698; return 0x82256398;
		/* 8223B694h case   42:*/		return 0x8223B698;
		  /* 8223B698h */ case   43:  		/* li R29, 0 */
		/* 8223B698h case   43:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8223B698h case   43:*/		return 0x8223B69C;
		  /* 8223B69Ch */ case   44:  		/* lwz R11, <#[R30]> */
		/* 8223B69Ch case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B69Ch case   44:*/		return 0x8223B6A0;
		  /* 8223B6A0h */ case   45:  		/* li R6, 2 */
		/* 8223B6A0h case   45:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8223B6A0h case   45:*/		return 0x8223B6A4;
		  /* 8223B6A4h */ case   46:  		/* mr R5, R29 */
		/* 8223B6A4h case   46:*/		regs.R5 = regs.R29;
		/* 8223B6A4h case   46:*/		return 0x8223B6A8;
		  /* 8223B6A8h */ case   47:  		/* li R4, 1 */
		/* 8223B6A8h case   47:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B6A8h case   47:*/		return 0x8223B6AC;
		  /* 8223B6ACh */ case   48:  		/* mr R3, R30 */
		/* 8223B6ACh case   48:*/		regs.R3 = regs.R30;
		/* 8223B6ACh case   48:*/		return 0x8223B6B0;
		  /* 8223B6B0h */ case   49:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223B6B0h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223B6B0h case   49:*/		return 0x8223B6B4;
		  /* 8223B6B4h */ case   50:  		/* mtspr CTR, R11 */
		/* 8223B6B4h case   50:*/		regs.CTR = regs.R11;
		/* 8223B6B4h case   50:*/		return 0x8223B6B8;
		  /* 8223B6B8h */ case   51:  		/* bcctrl 20, CR0_LT */
		/* 8223B6B8h case   51:*/		if ( 1 ) { regs.LR = 0x8223B6BC; return (uint32)regs.CTR; }
		/* 8223B6B8h case   51:*/		return 0x8223B6BC;
		  /* 8223B6BCh */ case   52:  		/* addi R29, R29, 1 */
		/* 8223B6BCh case   52:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223B6BCh case   52:*/		return 0x8223B6C0;
		  /* 8223B6C0h */ case   53:  		/* cmpwi CR6, R29, 4 */
		/* 8223B6C0h case   53:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 8223B6C0h case   53:*/		return 0x8223B6C4;
		  /* 8223B6C4h */ case   54:  		/* bc 12, CR6_LT, -40 */
		/* 8223B6C4h case   54:*/		if ( regs.CR[6].lt ) { return 0x8223B69C;  }
		/* 8223B6C4h case   54:*/		return 0x8223B6C8;
		  /* 8223B6C8h */ case   55:  		/* stb R26, <#[R30 + 164]> */
		/* 8223B6C8h case   55:*/		cpu::mem::store8( regs, regs.R26, (uint32)(regs.R30 + 0x000000A4) );
		/* 8223B6C8h case   55:*/		return 0x8223B6CC;
		  /* 8223B6CCh */ case   56:  		/* mr R4, R30 */
		/* 8223B6CCh case   56:*/		regs.R4 = regs.R30;
		/* 8223B6CCh case   56:*/		return 0x8223B6D0;
		  /* 8223B6D0h */ case   57:  		/* mr R3, R31 */
		/* 8223B6D0h case   57:*/		regs.R3 = regs.R31;
		/* 8223B6D0h case   57:*/		return 0x8223B6D4;
		  /* 8223B6D4h */ case   58:  		/* bl -20780 */
		/* 8223B6D4h case   58:*/		regs.LR = 0x8223B6D8; return 0x822365A8;
		/* 8223B6D4h case   58:*/		return 0x8223B6D8;
		  /* 8223B6D8h */ case   59:  		/* mr R4, R30 */
		/* 8223B6D8h case   59:*/		regs.R4 = regs.R30;
		/* 8223B6D8h case   59:*/		return 0x8223B6DC;
		  /* 8223B6DCh */ case   60:  		/* mr R3, R21 */
		/* 8223B6DCh case   60:*/		regs.R3 = regs.R21;
		/* 8223B6DCh case   60:*/		return 0x8223B6E0;
		  /* 8223B6E0h */ case   61:  		/* bl 120912 */
		/* 8223B6E0h case   61:*/		regs.LR = 0x8223B6E4; return 0x82258F30;
		/* 8223B6E0h case   61:*/		return 0x8223B6E4;
		  /* 8223B6E4h */ case   62:  		/* mr R3, R30 */
		/* 8223B6E4h case   62:*/		regs.R3 = regs.R30;
		/* 8223B6E4h case   62:*/		return 0x8223B6E8;
		  /* 8223B6E8h */ case   63:  		/* bl 108760 */
		/* 8223B6E8h case   63:*/		regs.LR = 0x8223B6EC; return 0x82255FC0;
		/* 8223B6E8h case   63:*/		return 0x8223B6EC;
		  /* 8223B6ECh */ case   64:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223B6ECh case   64:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223B6ECh case   64:*/		return 0x8223B6F0;
		  /* 8223B6F0h */ case   65:  		/* bc 4, CR0_EQ, 32 */
		/* 8223B6F0h case   65:*/		if ( !regs.CR[0].eq ) { return 0x8223B710;  }
		/* 8223B6F0h case   65:*/		return 0x8223B6F4;
		  /* 8223B6F4h */ case   66:  		/* lis R11, -32252 */
		/* 8223B6F4h case   66:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223B6F4h case   66:*/		return 0x8223B6F8;
		  /* 8223B6F8h */ case   67:  		/* mr R6, R22 */
		/* 8223B6F8h case   67:*/		regs.R6 = regs.R22;
		/* 8223B6F8h case   67:*/		return 0x8223B6FC;
		  /* 8223B6FCh */ case   68:  		/* addi R5, R11, 9484 */
		/* 8223B6FCh case   68:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x250C);
		/* 8223B6FCh case   68:*/		return 0x8223B700;
		  /* 8223B700h */ case   69:  		/* mr R4, R23 */
		/* 8223B700h case   69:*/		regs.R4 = regs.R23;
		/* 8223B700h case   69:*/		return 0x8223B704;
		  /* 8223B704h */ case   70:  		/* li R7, 2226 */
		/* 8223B704h case   70:*/		cpu::op::li<0>(regs,&regs.R7,0x8B2);
		/* 8223B704h case   70:*/		return 0x8223B708;
		  /* 8223B708h */ case   71:  		/* li R3, 0 */
		/* 8223B708h case   71:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223B708h case   71:*/		return 0x8223B70C;
		  /* 8223B70Ch */ case   72:  		/* bl -932612 */
		/* 8223B70Ch case   72:*/		regs.LR = 0x8223B710; return 0x82157C08;
		/* 8223B70Ch case   72:*/		return 0x8223B710;
	}
	return 0x8223B710;
} // Block from 8223B5ECh-8223B710h (73 instructions)

//////////////////////////////////////////////////////
// Block at 8223B710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B710);
		  /* 8223B710h */ case    0:  		/* li R3, 36 */
		/* 8223B710h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x24);
		/* 8223B710h case    0:*/		return 0x8223B714;
		  /* 8223B714h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223B714h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B714h case    1:*/		return 0x8223B718;
		  /* 8223B718h */ case    2:  		/* bl 108568 */
		/* 8223B718h case    2:*/		regs.LR = 0x8223B71C; return 0x82255F30;
		/* 8223B718h case    2:*/		return 0x8223B71C;
		  /* 8223B71Ch */ case    3:  		/* mr R5, R28 */
		/* 8223B71Ch case    3:*/		regs.R5 = regs.R28;
		/* 8223B71Ch case    3:*/		return 0x8223B720;
		  /* 8223B720h */ case    4:  		/* li R4, 0 */
		/* 8223B720h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B720h case    4:*/		return 0x8223B724;
		  /* 8223B724h */ case    5:  		/* mr R30, R3 */
		/* 8223B724h case    5:*/		regs.R30 = regs.R3;
		/* 8223B724h case    5:*/		return 0x8223B728;
		  /* 8223B728h */ case    6:  		/* bl 109680 */
		/* 8223B728h case    6:*/		regs.LR = 0x8223B72C; return 0x82256398;
		/* 8223B728h case    6:*/		return 0x8223B72C;
		  /* 8223B72Ch */ case    7:  		/* lwz R11, <#[R30]> */
		/* 8223B72Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B72Ch case    7:*/		return 0x8223B730;
		  /* 8223B730h */ case    8:  		/* mr R3, R30 */
		/* 8223B730h case    8:*/		regs.R3 = regs.R30;
		/* 8223B730h case    8:*/		return 0x8223B734;
		  /* 8223B734h */ case    9:  		/* li R6, 0 */
		/* 8223B734h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223B734h case    9:*/		return 0x8223B738;
		  /* 8223B738h */ case   10:  		/* li R5, 0 */
		/* 8223B738h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223B738h case   10:*/		return 0x8223B73C;
		  /* 8223B73Ch */ case   11:  		/* li R4, 0 */
		/* 8223B73Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B73Ch case   11:*/		return 0x8223B740;
		  /* 8223B740h */ case   12:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B740h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B740h case   12:*/		return 0x8223B744;
		  /* 8223B744h */ case   13:  		/* mtspr CTR, R11 */
		/* 8223B744h case   13:*/		regs.CTR = regs.R11;
		/* 8223B744h case   13:*/		return 0x8223B748;
		  /* 8223B748h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223B748h case   14:*/		if ( 1 ) { regs.LR = 0x8223B74C; return (uint32)regs.CTR; }
		/* 8223B748h case   14:*/		return 0x8223B74C;
		  /* 8223B74Ch */ case   15:  		/* lwz R11, <#[R30]> */
		/* 8223B74Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B74Ch case   15:*/		return 0x8223B750;
		  /* 8223B750h */ case   16:  		/* mr R3, R30 */
		/* 8223B750h case   16:*/		regs.R3 = regs.R30;
		/* 8223B750h case   16:*/		return 0x8223B754;
		  /* 8223B754h */ case   17:  		/* li R6, 1 */
		/* 8223B754h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B754h case   17:*/		return 0x8223B758;
		  /* 8223B758h */ case   18:  		/* li R5, 1 */
		/* 8223B758h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223B758h case   18:*/		return 0x8223B75C;
		  /* 8223B75Ch */ case   19:  		/* li R4, 0 */
		/* 8223B75Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B75Ch case   19:*/		return 0x8223B760;
		  /* 8223B760h */ case   20:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B760h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B760h case   20:*/		return 0x8223B764;
		  /* 8223B764h */ case   21:  		/* mtspr CTR, R11 */
		/* 8223B764h case   21:*/		regs.CTR = regs.R11;
		/* 8223B764h case   21:*/		return 0x8223B768;
		  /* 8223B768h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 8223B768h case   22:*/		if ( 1 ) { regs.LR = 0x8223B76C; return (uint32)regs.CTR; }
		/* 8223B768h case   22:*/		return 0x8223B76C;
		  /* 8223B76Ch */ case   23:  		/* lwz R11, <#[R30]> */
		/* 8223B76Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B76Ch case   23:*/		return 0x8223B770;
		  /* 8223B770h */ case   24:  		/* mr R3, R30 */
		/* 8223B770h case   24:*/		regs.R3 = regs.R30;
		/* 8223B770h case   24:*/		return 0x8223B774;
		  /* 8223B774h */ case   25:  		/* li R6, 1 */
		/* 8223B774h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B774h case   25:*/		return 0x8223B778;
		  /* 8223B778h */ case   26:  		/* li R5, 2 */
		/* 8223B778h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223B778h case   26:*/		return 0x8223B77C;
		  /* 8223B77Ch */ case   27:  		/* li R4, 0 */
		/* 8223B77Ch case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B77Ch case   27:*/		return 0x8223B780;
		  /* 8223B780h */ case   28:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B780h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B780h case   28:*/		return 0x8223B784;
		  /* 8223B784h */ case   29:  		/* mtspr CTR, R11 */
		/* 8223B784h case   29:*/		regs.CTR = regs.R11;
		/* 8223B784h case   29:*/		return 0x8223B788;
		  /* 8223B788h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 8223B788h case   30:*/		if ( 1 ) { regs.LR = 0x8223B78C; return (uint32)regs.CTR; }
		/* 8223B788h case   30:*/		return 0x8223B78C;
		  /* 8223B78Ch */ case   31:  		/* lwz R11, <#[R30]> */
		/* 8223B78Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B78Ch case   31:*/		return 0x8223B790;
		  /* 8223B790h */ case   32:  		/* mr R3, R30 */
		/* 8223B790h case   32:*/		regs.R3 = regs.R30;
		/* 8223B790h case   32:*/		return 0x8223B794;
		  /* 8223B794h */ case   33:  		/* li R6, 1 */
		/* 8223B794h case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B794h case   33:*/		return 0x8223B798;
		  /* 8223B798h */ case   34:  		/* li R5, 3 */
		/* 8223B798h case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223B798h case   34:*/		return 0x8223B79C;
		  /* 8223B79Ch */ case   35:  		/* li R4, 0 */
		/* 8223B79Ch case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B79Ch case   35:*/		return 0x8223B7A0;
		  /* 8223B7A0h */ case   36:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223B7A0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223B7A0h case   36:*/		return 0x8223B7A4;
		  /* 8223B7A4h */ case   37:  		/* mtspr CTR, R11 */
		/* 8223B7A4h case   37:*/		regs.CTR = regs.R11;
		/* 8223B7A4h case   37:*/		return 0x8223B7A8;
		  /* 8223B7A8h */ case   38:  		/* bcctrl 20, CR0_LT */
		/* 8223B7A8h case   38:*/		if ( 1 ) { regs.LR = 0x8223B7AC; return (uint32)regs.CTR; }
		/* 8223B7A8h case   38:*/		return 0x8223B7AC;
		  /* 8223B7ACh */ case   39:  		/* mr R3, R30 */
		/* 8223B7ACh case   39:*/		regs.R3 = regs.R30;
		/* 8223B7ACh case   39:*/		return 0x8223B7B0;
		  /* 8223B7B0h */ case   40:  		/* mr R5, R28 */
		/* 8223B7B0h case   40:*/		regs.R5 = regs.R28;
		/* 8223B7B0h case   40:*/		return 0x8223B7B4;
		  /* 8223B7B4h */ case   41:  		/* li R4, 1 */
		/* 8223B7B4h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B7B4h case   41:*/		return 0x8223B7B8;
		  /* 8223B7B8h */ case   42:  		/* bl 109536 */
		/* 8223B7B8h case   42:*/		regs.LR = 0x8223B7BC; return 0x82256398;
		/* 8223B7B8h case   42:*/		return 0x8223B7BC;
		  /* 8223B7BCh */ case   43:  		/* mr R3, R30 */
		/* 8223B7BCh case   43:*/		regs.R3 = regs.R30;
		/* 8223B7BCh case   43:*/		return 0x8223B7C0;
		  /* 8223B7C0h */ case   44:  		/* mr R5, R25 */
		/* 8223B7C0h case   44:*/		regs.R5 = regs.R25;
		/* 8223B7C0h case   44:*/		return 0x8223B7C4;
		  /* 8223B7C4h */ case   45:  		/* li R4, 2 */
		/* 8223B7C4h case   45:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8223B7C4h case   45:*/		return 0x8223B7C8;
		  /* 8223B7C8h */ case   46:  		/* bl 109520 */
		/* 8223B7C8h case   46:*/		regs.LR = 0x8223B7CC; return 0x82256398;
		/* 8223B7C8h case   46:*/		return 0x8223B7CC;
		  /* 8223B7CCh */ case   47:  		/* mr R5, R28 */
		/* 8223B7CCh case   47:*/		regs.R5 = regs.R28;
		/* 8223B7CCh case   47:*/		return 0x8223B7D0;
		  /* 8223B7D0h */ case   48:  		/* li R4, 3 */
		/* 8223B7D0h case   48:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8223B7D0h case   48:*/		return 0x8223B7D4;
		  /* 8223B7D4h */ case   49:  		/* mr R3, R30 */
		/* 8223B7D4h case   49:*/		regs.R3 = regs.R30;
		/* 8223B7D4h case   49:*/		return 0x8223B7D8;
		  /* 8223B7D8h */ case   50:  		/* bl 109504 */
		/* 8223B7D8h case   50:*/		regs.LR = 0x8223B7DC; return 0x82256398;
		/* 8223B7D8h case   50:*/		return 0x8223B7DC;
		  /* 8223B7DCh */ case   51:  		/* li R29, 0 */
		/* 8223B7DCh case   51:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8223B7DCh case   51:*/		return 0x8223B7E0;
		  /* 8223B7E0h */ case   52:  		/* lwz R11, <#[R30]> */
		/* 8223B7E0h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B7E0h case   52:*/		return 0x8223B7E4;
		  /* 8223B7E4h */ case   53:  		/* li R6, 0 */
		/* 8223B7E4h case   53:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223B7E4h case   53:*/		return 0x8223B7E8;
		  /* 8223B7E8h */ case   54:  		/* mr R5, R29 */
		/* 8223B7E8h case   54:*/		regs.R5 = regs.R29;
		/* 8223B7E8h case   54:*/		return 0x8223B7EC;
		  /* 8223B7ECh */ case   55:  		/* li R4, 1 */
		/* 8223B7ECh case   55:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B7ECh case   55:*/		return 0x8223B7F0;
		  /* 8223B7F0h */ case   56:  		/* mr R3, R30 */
		/* 8223B7F0h case   56:*/		regs.R3 = regs.R30;
		/* 8223B7F0h case   56:*/		return 0x8223B7F4;
		  /* 8223B7F4h */ case   57:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223B7F4h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223B7F4h case   57:*/		return 0x8223B7F8;
		  /* 8223B7F8h */ case   58:  		/* mtspr CTR, R11 */
		/* 8223B7F8h case   58:*/		regs.CTR = regs.R11;
		/* 8223B7F8h case   58:*/		return 0x8223B7FC;
		  /* 8223B7FCh */ case   59:  		/* bcctrl 20, CR0_LT */
		/* 8223B7FCh case   59:*/		if ( 1 ) { regs.LR = 0x8223B800; return (uint32)regs.CTR; }
		/* 8223B7FCh case   59:*/		return 0x8223B800;
		  /* 8223B800h */ case   60:  		/* lwz R11, <#[R30]> */
		/* 8223B800h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B800h case   60:*/		return 0x8223B804;
		  /* 8223B804h */ case   61:  		/* li R6, 1 */
		/* 8223B804h case   61:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223B804h case   61:*/		return 0x8223B808;
		  /* 8223B808h */ case   62:  		/* mr R5, R29 */
		/* 8223B808h case   62:*/		regs.R5 = regs.R29;
		/* 8223B808h case   62:*/		return 0x8223B80C;
		  /* 8223B80Ch */ case   63:  		/* li R4, 2 */
		/* 8223B80Ch case   63:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8223B80Ch case   63:*/		return 0x8223B810;
		  /* 8223B810h */ case   64:  		/* mr R3, R30 */
		/* 8223B810h case   64:*/		regs.R3 = regs.R30;
		/* 8223B810h case   64:*/		return 0x8223B814;
		  /* 8223B814h */ case   65:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223B814h case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223B814h case   65:*/		return 0x8223B818;
		  /* 8223B818h */ case   66:  		/* mtspr CTR, R11 */
		/* 8223B818h case   66:*/		regs.CTR = regs.R11;
		/* 8223B818h case   66:*/		return 0x8223B81C;
		  /* 8223B81Ch */ case   67:  		/* bcctrl 20, CR0_LT */
		/* 8223B81Ch case   67:*/		if ( 1 ) { regs.LR = 0x8223B820; return (uint32)regs.CTR; }
		/* 8223B81Ch case   67:*/		return 0x8223B820;
		  /* 8223B820h */ case   68:  		/* lwz R11, <#[R30]> */
		/* 8223B820h case   68:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B820h case   68:*/		return 0x8223B824;
		  /* 8223B824h */ case   69:  		/* li R6, 0 */
		/* 8223B824h case   69:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223B824h case   69:*/		return 0x8223B828;
		  /* 8223B828h */ case   70:  		/* mr R5, R29 */
		/* 8223B828h case   70:*/		regs.R5 = regs.R29;
		/* 8223B828h case   70:*/		return 0x8223B82C;
		  /* 8223B82Ch */ case   71:  		/* li R4, 3 */
		/* 8223B82Ch case   71:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8223B82Ch case   71:*/		return 0x8223B830;
		  /* 8223B830h */ case   72:  		/* mr R3, R30 */
		/* 8223B830h case   72:*/		regs.R3 = regs.R30;
		/* 8223B830h case   72:*/		return 0x8223B834;
		  /* 8223B834h */ case   73:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223B834h case   73:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223B834h case   73:*/		return 0x8223B838;
		  /* 8223B838h */ case   74:  		/* mtspr CTR, R11 */
		/* 8223B838h case   74:*/		regs.CTR = regs.R11;
		/* 8223B838h case   74:*/		return 0x8223B83C;
		  /* 8223B83Ch */ case   75:  		/* bcctrl 20, CR0_LT */
		/* 8223B83Ch case   75:*/		if ( 1 ) { regs.LR = 0x8223B840; return (uint32)regs.CTR; }
		/* 8223B83Ch case   75:*/		return 0x8223B840;
		  /* 8223B840h */ case   76:  		/* addi R29, R29, 1 */
		/* 8223B840h case   76:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223B840h case   76:*/		return 0x8223B844;
		  /* 8223B844h */ case   77:  		/* cmpwi CR6, R29, 4 */
		/* 8223B844h case   77:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 8223B844h case   77:*/		return 0x8223B848;
		  /* 8223B848h */ case   78:  		/* bc 12, CR6_LT, -104 */
		/* 8223B848h case   78:*/		if ( regs.CR[6].lt ) { return 0x8223B7E0;  }
		/* 8223B848h case   78:*/		return 0x8223B84C;
		  /* 8223B84Ch */ case   79:  		/* mr R4, R30 */
		/* 8223B84Ch case   79:*/		regs.R4 = regs.R30;
		/* 8223B84Ch case   79:*/		return 0x8223B850;
		  /* 8223B850h */ case   80:  		/* mr R3, R31 */
		/* 8223B850h case   80:*/		regs.R3 = regs.R31;
		/* 8223B850h case   80:*/		return 0x8223B854;
		  /* 8223B854h */ case   81:  		/* bl -21164 */
		/* 8223B854h case   81:*/		regs.LR = 0x8223B858; return 0x822365A8;
		/* 8223B854h case   81:*/		return 0x8223B858;
		  /* 8223B858h */ case   82:  		/* mr R4, R30 */
		/* 8223B858h case   82:*/		regs.R4 = regs.R30;
		/* 8223B858h case   82:*/		return 0x8223B85C;
		  /* 8223B85Ch */ case   83:  		/* mr R3, R21 */
		/* 8223B85Ch case   83:*/		regs.R3 = regs.R21;
		/* 8223B85Ch case   83:*/		return 0x8223B860;
		  /* 8223B860h */ case   84:  		/* bl 120528 */
		/* 8223B860h case   84:*/		regs.LR = 0x8223B864; return 0x82258F30;
		/* 8223B860h case   84:*/		return 0x8223B864;
		  /* 8223B864h */ case   85:  		/* mr R3, R30 */
		/* 8223B864h case   85:*/		regs.R3 = regs.R30;
		/* 8223B864h case   85:*/		return 0x8223B868;
		  /* 8223B868h */ case   86:  		/* bl 108376 */
		/* 8223B868h case   86:*/		regs.LR = 0x8223B86C; return 0x82255FC0;
		/* 8223B868h case   86:*/		return 0x8223B86C;
		  /* 8223B86Ch */ case   87:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223B86Ch case   87:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223B86Ch case   87:*/		return 0x8223B870;
		  /* 8223B870h */ case   88:  		/* bc 4, CR0_EQ, 32 */
		/* 8223B870h case   88:*/		if ( !regs.CR[0].eq ) { return 0x8223B890;  }
		/* 8223B870h case   88:*/		return 0x8223B874;
		  /* 8223B874h */ case   89:  		/* lis R11, -32252 */
		/* 8223B874h case   89:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223B874h case   89:*/		return 0x8223B878;
		  /* 8223B878h */ case   90:  		/* mr R6, R22 */
		/* 8223B878h case   90:*/		regs.R6 = regs.R22;
		/* 8223B878h case   90:*/		return 0x8223B87C;
		  /* 8223B87Ch */ case   91:  		/* addi R5, R11, 9464 */
		/* 8223B87Ch case   91:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x24F8);
		/* 8223B87Ch case   91:*/		return 0x8223B880;
		  /* 8223B880h */ case   92:  		/* mr R4, R23 */
		/* 8223B880h case   92:*/		regs.R4 = regs.R23;
		/* 8223B880h case   92:*/		return 0x8223B884;
		  /* 8223B884h */ case   93:  		/* li R7, 2245 */
		/* 8223B884h case   93:*/		cpu::op::li<0>(regs,&regs.R7,0x8C5);
		/* 8223B884h case   93:*/		return 0x8223B888;
		  /* 8223B888h */ case   94:  		/* li R3, 0 */
		/* 8223B888h case   94:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223B888h case   94:*/		return 0x8223B88C;
		  /* 8223B88Ch */ case   95:  		/* bl -932996 */
		/* 8223B88Ch case   95:*/		regs.LR = 0x8223B890; return 0x82157C08;
		/* 8223B88Ch case   95:*/		return 0x8223B890;
	}
	return 0x8223B890;
} // Block from 8223B710h-8223B890h (96 instructions)

//////////////////////////////////////////////////////
// Block at 8223B890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B890);
		  /* 8223B890h */ case    0:  		/* li R3, 135 */
		/* 8223B890h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x87);
		/* 8223B890h case    0:*/		return 0x8223B894;
		  /* 8223B894h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223B894h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B894h case    1:*/		return 0x8223B898;
		  /* 8223B898h */ case    2:  		/* bl 108184 */
		/* 8223B898h case    2:*/		regs.LR = 0x8223B89C; return 0x82255F30;
		/* 8223B898h case    2:*/		return 0x8223B89C;
		  /* 8223B89Ch */ case    3:  		/* mr R5, R28 */
		/* 8223B89Ch case    3:*/		regs.R5 = regs.R28;
		/* 8223B89Ch case    3:*/		return 0x8223B8A0;
		  /* 8223B8A0h */ case    4:  		/* li R4, 1 */
		/* 8223B8A0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B8A0h case    4:*/		return 0x8223B8A4;
		  /* 8223B8A4h */ case    5:  		/* mr R30, R3 */
		/* 8223B8A4h case    5:*/		regs.R30 = regs.R3;
		/* 8223B8A4h case    5:*/		return 0x8223B8A8;
		  /* 8223B8A8h */ case    6:  		/* bl 109296 */
		/* 8223B8A8h case    6:*/		regs.LR = 0x8223B8AC; return 0x82256398;
		/* 8223B8A8h case    6:*/		return 0x8223B8AC;
		  /* 8223B8ACh */ case    7:  		/* li R24, 2 */
		/* 8223B8ACh case    7:*/		cpu::op::li<0>(regs,&regs.R24,0x2);
		/* 8223B8ACh case    7:*/		return 0x8223B8B0;
		  /* 8223B8B0h */ case    8:  		/* li R4, 164 */
		/* 8223B8B0h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0xA4);
		/* 8223B8B0h case    8:*/		return 0x8223B8B4;
		  /* 8223B8B4h */ case    9:  		/* stw R24, <#[R30 + 168]> */
		/* 8223B8B4h case    9:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R30 + 0x000000A8) );
		/* 8223B8B4h case    9:*/		return 0x8223B8B8;
		  /* 8223B8B8h */ case   10:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223B8B8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B8B8h case   10:*/		return 0x8223B8BC;
		  /* 8223B8BCh */ case   11:  		/* lwz R29, <#[R11 + 1452]> */
		/* 8223B8BCh case   11:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x000005AC) );
		/* 8223B8BCh case   11:*/		return 0x8223B8C0;
		  /* 8223B8C0h */ case   12:  		/* mr R3, R29 */
		/* 8223B8C0h case   12:*/		regs.R3 = regs.R29;
		/* 8223B8C0h case   12:*/		return 0x8223B8C4;
		  /* 8223B8C4h */ case   13:  		/* bl -128012 */
		/* 8223B8C4h case   13:*/		regs.LR = 0x8223B8C8; return 0x8221C4B8;
		/* 8223B8C4h case   13:*/		return 0x8223B8C8;
		  /* 8223B8C8h */ case   14:  		/* mr R11, R3 */
		/* 8223B8C8h case   14:*/		regs.R11 = regs.R3;
		/* 8223B8C8h case   14:*/		return 0x8223B8CC;
		  /* 8223B8CCh */ case   15:  		/* addic. R3, R3, 4 */
		/* 8223B8CCh case   15:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 8223B8CCh case   15:*/		return 0x8223B8D0;
		  /* 8223B8D0h */ case   16:  		/* stw R29, <#[R11]> */
		/* 8223B8D0h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8223B8D0h case   16:*/		return 0x8223B8D4;
		  /* 8223B8D4h */ case   17:  		/* bc 12, CR0_EQ, 32 */
		/* 8223B8D4h case   17:*/		if ( regs.CR[0].eq ) { return 0x8223B8F4;  }
		/* 8223B8D4h case   17:*/		return 0x8223B8D8;
		  /* 8223B8D8h */ case   18:  		/* mr R7, R31 */
		/* 8223B8D8h case   18:*/		regs.R7 = regs.R31;
		/* 8223B8D8h case   18:*/		return 0x8223B8DC;
		  /* 8223B8DCh */ case   19:  		/* lwz R6, <#[R31 + 12]> */
		/* 8223B8DCh case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B8DCh case   19:*/		return 0x8223B8E0;
		  /* 8223B8E0h */ case   20:  		/* li R5, 0 */
		/* 8223B8E0h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223B8E0h case   20:*/		return 0x8223B8E4;
		  /* 8223B8E4h */ case   21:  		/* mr R4, R30 */
		/* 8223B8E4h case   21:*/		regs.R4 = regs.R30;
		/* 8223B8E4h case   21:*/		return 0x8223B8E8;
		  /* 8223B8E8h */ case   22:  		/* bl 124568 */
		/* 8223B8E8h case   22:*/		regs.LR = 0x8223B8EC; return 0x82259F80;
		/* 8223B8E8h case   22:*/		return 0x8223B8EC;
		  /* 8223B8ECh */ case   23:  		/* mr R27, R3 */
		/* 8223B8ECh case   23:*/		regs.R27 = regs.R3;
		/* 8223B8ECh case   23:*/		return 0x8223B8F0;
		  /* 8223B8F0h */ case   24:  		/* b 8 */
		/* 8223B8F0h case   24:*/		return 0x8223B8F8;
		/* 8223B8F0h case   24:*/		return 0x8223B8F4;
	}
	return 0x8223B8F4;
} // Block from 8223B890h-8223B8F4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8223B8F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B8F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B8F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B8F4);
		  /* 8223B8F4h */ case    0:  		/* li R27, 0 */
		/* 8223B8F4h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8223B8F4h case    0:*/		return 0x8223B8F8;
	}
	return 0x8223B8F8;
} // Block from 8223B8F4h-8223B8F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223B8F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B8F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B8F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B8F8);
		  /* 8223B8F8h */ case    0:  		/* li R29, 0 */
		/* 8223B8F8h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8223B8F8h case    0:*/		return 0x8223B8FC;
		  /* 8223B8FCh */ case    1:  		/* lwz R11, <#[R30]> */
		/* 8223B8FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B8FCh case    1:*/		return 0x8223B900;
		  /* 8223B900h */ case    2:  		/* li R6, 0 */
		/* 8223B900h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223B900h case    2:*/		return 0x8223B904;
		  /* 8223B904h */ case    3:  		/* mr R5, R29 */
		/* 8223B904h case    3:*/		regs.R5 = regs.R29;
		/* 8223B904h case    3:*/		return 0x8223B908;
		  /* 8223B908h */ case    4:  		/* li R4, 1 */
		/* 8223B908h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B908h case    4:*/		return 0x8223B90C;
		  /* 8223B90Ch */ case    5:  		/* mr R3, R30 */
		/* 8223B90Ch case    5:*/		regs.R3 = regs.R30;
		/* 8223B90Ch case    5:*/		return 0x8223B910;
		  /* 8223B910h */ case    6:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223B910h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223B910h case    6:*/		return 0x8223B914;
		  /* 8223B914h */ case    7:  		/* mtspr CTR, R11 */
		/* 8223B914h case    7:*/		regs.CTR = regs.R11;
		/* 8223B914h case    7:*/		return 0x8223B918;
		  /* 8223B918h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8223B918h case    8:*/		if ( 1 ) { regs.LR = 0x8223B91C; return (uint32)regs.CTR; }
		/* 8223B918h case    8:*/		return 0x8223B91C;
		  /* 8223B91Ch */ case    9:  		/* addi R29, R29, 1 */
		/* 8223B91Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223B91Ch case    9:*/		return 0x8223B920;
		  /* 8223B920h */ case   10:  		/* cmpwi CR6, R29, 4 */
		/* 8223B920h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 8223B920h case   10:*/		return 0x8223B924;
		  /* 8223B924h */ case   11:  		/* bc 12, CR6_LT, -40 */
		/* 8223B924h case   11:*/		if ( regs.CR[6].lt ) { return 0x8223B8FC;  }
		/* 8223B924h case   11:*/		return 0x8223B928;
		  /* 8223B928h */ case   12:  		/* mr R4, R30 */
		/* 8223B928h case   12:*/		regs.R4 = regs.R30;
		/* 8223B928h case   12:*/		return 0x8223B92C;
		  /* 8223B92Ch */ case   13:  		/* mr R3, R31 */
		/* 8223B92Ch case   13:*/		regs.R3 = regs.R31;
		/* 8223B92Ch case   13:*/		return 0x8223B930;
		  /* 8223B930h */ case   14:  		/* bl -21384 */
		/* 8223B930h case   14:*/		regs.LR = 0x8223B934; return 0x822365A8;
		/* 8223B930h case   14:*/		return 0x8223B934;
		  /* 8223B934h */ case   15:  		/* mr R3, R30 */
		/* 8223B934h case   15:*/		regs.R3 = regs.R30;
		/* 8223B934h case   15:*/		return 0x8223B938;
		  /* 8223B938h */ case   16:  		/* bl 108168 */
		/* 8223B938h case   16:*/		regs.LR = 0x8223B93C; return 0x82255FC0;
		/* 8223B938h case   16:*/		return 0x8223B93C;
		  /* 8223B93Ch */ case   17:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223B93Ch case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223B93Ch case   17:*/		return 0x8223B940;
		  /* 8223B940h */ case   18:  		/* bc 4, CR0_EQ, 32 */
		/* 8223B940h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8223B960;  }
		/* 8223B940h case   18:*/		return 0x8223B944;
		  /* 8223B944h */ case   19:  		/* lis R11, -32252 */
		/* 8223B944h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223B944h case   19:*/		return 0x8223B948;
	}
	return 0x8223B948;
} // Block from 8223B8F8h-8223B948h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8223B948h
// Function '?InsertInstructionsForLineAA@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B948);
		  /* 8223B948h */ case    0:  		/* mr R6, R22 */
		/* 8223B948h case    0:*/		regs.R6 = regs.R22;
		/* 8223B948h case    0:*/		return 0x8223B94C;
		  /* 8223B94Ch */ case    1:  		/* addi R5, R11, 9348 */
		/* 8223B94Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2484);
		/* 8223B94Ch case    1:*/		return 0x8223B950;
		  /* 8223B950h */ case    2:  		/* mr R4, R23 */
		/* 8223B950h case    2:*/		regs.R4 = regs.R23;
		/* 8223B950h case    2:*/		return 0x8223B954;
		  /* 8223B954h */ case    3:  		/* li R7, 2256 */
		/* 8223B954h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x8D0);
		/* 8223B954h case    3:*/		return 0x8223B958;
		  /* 8223B958h */ case    4:  		/* li R3, 0 */
		/* 8223B958h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223B958h case    4:*/		return 0x8223B95C;
		  /* 8223B95Ch */ case    5:  		/* bl -933204 */
		/* 8223B95Ch case    5:*/		regs.LR = 0x8223B960; return 0x82157C08;
		/* 8223B95Ch case    5:*/		return 0x8223B960;
	}
	return 0x8223B960;
} // Block from 8223B948h-8223B960h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223B960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B960);
		  /* 8223B960h */ case    0:  		/* li R3, 49 */
		/* 8223B960h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 8223B960h case    0:*/		return 0x8223B964;
		  /* 8223B964h */ case    1:  		/* lwz R29, <#[R27 + 144]> */
		/* 8223B964h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + 0x00000090) );
		/* 8223B964h case    1:*/		return 0x8223B968;
		  /* 8223B968h */ case    2:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223B968h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B968h case    2:*/		return 0x8223B96C;
		  /* 8223B96Ch */ case    3:  		/* bl 107972 */
		/* 8223B96Ch case    3:*/		regs.LR = 0x8223B970; return 0x82255F30;
		/* 8223B96Ch case    3:*/		return 0x8223B970;
		  /* 8223B970h */ case    4:  		/* mr R5, R28 */
		/* 8223B970h case    4:*/		regs.R5 = regs.R28;
		/* 8223B970h case    4:*/		return 0x8223B974;
		  /* 8223B974h */ case    5:  		/* li R4, 0 */
		/* 8223B974h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B974h case    5:*/		return 0x8223B978;
		  /* 8223B978h */ case    6:  		/* mr R30, R3 */
		/* 8223B978h case    6:*/		regs.R30 = regs.R3;
		/* 8223B978h case    6:*/		return 0x8223B97C;
		  /* 8223B97Ch */ case    7:  		/* bl 109084 */
		/* 8223B97Ch case    7:*/		regs.LR = 0x8223B980; return 0x82256398;
		/* 8223B97Ch case    7:*/		return 0x8223B980;
		  /* 8223B980h */ case    8:  		/* mr R3, R30 */
		/* 8223B980h case    8:*/		regs.R3 = regs.R30;
		/* 8223B980h case    8:*/		return 0x8223B984;
		  /* 8223B984h */ case    9:  		/* mr R5, R25 */
		/* 8223B984h case    9:*/		regs.R5 = regs.R25;
		/* 8223B984h case    9:*/		return 0x8223B988;
		  /* 8223B988h */ case   10:  		/* li R4, 1 */
		/* 8223B988h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223B988h case   10:*/		return 0x8223B98C;
		  /* 8223B98Ch */ case   11:  		/* bl 109068 */
		/* 8223B98Ch case   11:*/		regs.LR = 0x8223B990; return 0x82256398;
		/* 8223B98Ch case   11:*/		return 0x8223B990;
		  /* 8223B990h */ case   12:  		/* stb R26, <#[R30 + 159]> */
		/* 8223B990h case   12:*/		cpu::mem::store8( regs, regs.R26, (uint32)(regs.R30 + 0x0000009F) );
		/* 8223B990h case   12:*/		return 0x8223B994;
		  /* 8223B994h */ case   13:  		/* mr R4, R30 */
		/* 8223B994h case   13:*/		regs.R4 = regs.R30;
		/* 8223B994h case   13:*/		return 0x8223B998;
		  /* 8223B998h */ case   14:  		/* mr R3, R31 */
		/* 8223B998h case   14:*/		regs.R3 = regs.R31;
		/* 8223B998h case   14:*/		return 0x8223B99C;
		  /* 8223B99Ch */ case   15:  		/* bl -21492 */
		/* 8223B99Ch case   15:*/		regs.LR = 0x8223B9A0; return 0x822365A8;
		/* 8223B99Ch case   15:*/		return 0x8223B9A0;
		  /* 8223B9A0h */ case   16:  		/* mr R4, R30 */
		/* 8223B9A0h case   16:*/		regs.R4 = regs.R30;
		/* 8223B9A0h case   16:*/		return 0x8223B9A4;
		  /* 8223B9A4h */ case   17:  		/* mr R3, R29 */
		/* 8223B9A4h case   17:*/		regs.R3 = regs.R29;
		/* 8223B9A4h case   17:*/		return 0x8223B9A8;
		  /* 8223B9A8h */ case   18:  		/* bl 120200 */
		/* 8223B9A8h case   18:*/		regs.LR = 0x8223B9AC; return 0x82258F30;
		/* 8223B9A8h case   18:*/		return 0x8223B9AC;
		  /* 8223B9ACh */ case   19:  		/* mr R3, R30 */
		/* 8223B9ACh case   19:*/		regs.R3 = regs.R30;
		/* 8223B9ACh case   19:*/		return 0x8223B9B0;
		  /* 8223B9B0h */ case   20:  		/* bl 108048 */
		/* 8223B9B0h case   20:*/		regs.LR = 0x8223B9B4; return 0x82255FC0;
		/* 8223B9B0h case   20:*/		return 0x8223B9B4;
		  /* 8223B9B4h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223B9B4h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223B9B4h case   21:*/		return 0x8223B9B8;
		  /* 8223B9B8h */ case   22:  		/* bc 4, CR0_EQ, 32 */
		/* 8223B9B8h case   22:*/		if ( !regs.CR[0].eq ) { return 0x8223B9D8;  }
		/* 8223B9B8h case   22:*/		return 0x8223B9BC;
		  /* 8223B9BCh */ case   23:  		/* lis R11, -32252 */
		/* 8223B9BCh case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223B9BCh case   23:*/		return 0x8223B9C0;
		  /* 8223B9C0h */ case   24:  		/* mr R6, R22 */
		/* 8223B9C0h case   24:*/		regs.R6 = regs.R22;
		/* 8223B9C0h case   24:*/		return 0x8223B9C4;
		  /* 8223B9C4h */ case   25:  		/* addi R5, R11, 8912 */
		/* 8223B9C4h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x22D0);
		/* 8223B9C4h case   25:*/		return 0x8223B9C8;
		  /* 8223B9C8h */ case   26:  		/* mr R4, R23 */
		/* 8223B9C8h case   26:*/		regs.R4 = regs.R23;
		/* 8223B9C8h case   26:*/		return 0x8223B9CC;
		  /* 8223B9CCh */ case   27:  		/* li R7, 2266 */
		/* 8223B9CCh case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x8DA);
		/* 8223B9CCh case   27:*/		return 0x8223B9D0;
		  /* 8223B9D0h */ case   28:  		/* li R3, 0 */
		/* 8223B9D0h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223B9D0h case   28:*/		return 0x8223B9D4;
		  /* 8223B9D4h */ case   29:  		/* bl -933324 */
		/* 8223B9D4h case   29:*/		regs.LR = 0x8223B9D8; return 0x82157C08;
		/* 8223B9D4h case   29:*/		return 0x8223B9D8;
	}
	return 0x8223B9D8;
} // Block from 8223B960h-8223B9D8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8223B9D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223B9D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223B9D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223B9D8);
		  /* 8223B9D8h */ case    0:  		/* li R3, 18 */
		/* 8223B9D8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x12);
		/* 8223B9D8h case    0:*/		return 0x8223B9DC;
		  /* 8223B9DCh */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223B9DCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223B9DCh case    1:*/		return 0x8223B9E0;
		  /* 8223B9E0h */ case    2:  		/* bl 107856 */
		/* 8223B9E0h case    2:*/		regs.LR = 0x8223B9E4; return 0x82255F30;
		/* 8223B9E0h case    2:*/		return 0x8223B9E4;
		  /* 8223B9E4h */ case    3:  		/* mr R5, R28 */
		/* 8223B9E4h case    3:*/		regs.R5 = regs.R28;
		/* 8223B9E4h case    3:*/		return 0x8223B9E8;
		  /* 8223B9E8h */ case    4:  		/* li R4, 0 */
		/* 8223B9E8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223B9E8h case    4:*/		return 0x8223B9EC;
		  /* 8223B9ECh */ case    5:  		/* mr R30, R3 */
		/* 8223B9ECh case    5:*/		regs.R30 = regs.R3;
		/* 8223B9ECh case    5:*/		return 0x8223B9F0;
		  /* 8223B9F0h */ case    6:  		/* bl 108968 */
		/* 8223B9F0h case    6:*/		regs.LR = 0x8223B9F4; return 0x82256398;
		/* 8223B9F0h case    6:*/		return 0x8223B9F4;
		  /* 8223B9F4h */ case    7:  		/* lwz R11, <#[R30]> */
		/* 8223B9F4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223B9F4h case    7:*/		return 0x8223B9F8;
		  /* 8223B9F8h */ case    8:  		/* mr R3, R30 */
		/* 8223B9F8h case    8:*/		regs.R3 = regs.R30;
		/* 8223B9F8h case    8:*/		return 0x8223B9FC;
		  /* 8223B9FCh */ case    9:  		/* li R6, 0 */
		/* 8223B9FCh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223B9FCh case    9:*/		return 0x8223BA00;
		  /* 8223BA00h */ case   10:  		/* li R5, 0 */
		/* 8223BA00h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223BA00h case   10:*/		return 0x8223BA04;
		  /* 8223BA04h */ case   11:  		/* li R4, 0 */
		/* 8223BA04h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BA04h case   11:*/		return 0x8223BA08;
		  /* 8223BA08h */ case   12:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BA08h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BA08h case   12:*/		return 0x8223BA0C;
		  /* 8223BA0Ch */ case   13:  		/* mtspr CTR, R11 */
		/* 8223BA0Ch case   13:*/		regs.CTR = regs.R11;
		/* 8223BA0Ch case   13:*/		return 0x8223BA10;
		  /* 8223BA10h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223BA10h case   14:*/		if ( 1 ) { regs.LR = 0x8223BA14; return (uint32)regs.CTR; }
		/* 8223BA10h case   14:*/		return 0x8223BA14;
		  /* 8223BA14h */ case   15:  		/* lwz R11, <#[R30]> */
		/* 8223BA14h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BA14h case   15:*/		return 0x8223BA18;
		  /* 8223BA18h */ case   16:  		/* mr R3, R30 */
		/* 8223BA18h case   16:*/		regs.R3 = regs.R30;
		/* 8223BA18h case   16:*/		return 0x8223BA1C;
		  /* 8223BA1Ch */ case   17:  		/* li R6, 0 */
		/* 8223BA1Ch case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223BA1Ch case   17:*/		return 0x8223BA20;
		  /* 8223BA20h */ case   18:  		/* li R5, 1 */
		/* 8223BA20h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223BA20h case   18:*/		return 0x8223BA24;
		  /* 8223BA24h */ case   19:  		/* li R4, 0 */
		/* 8223BA24h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BA24h case   19:*/		return 0x8223BA28;
		  /* 8223BA28h */ case   20:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BA28h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BA28h case   20:*/		return 0x8223BA2C;
		  /* 8223BA2Ch */ case   21:  		/* mtspr CTR, R11 */
		/* 8223BA2Ch case   21:*/		regs.CTR = regs.R11;
		/* 8223BA2Ch case   21:*/		return 0x8223BA30;
		  /* 8223BA30h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 8223BA30h case   22:*/		if ( 1 ) { regs.LR = 0x8223BA34; return (uint32)regs.CTR; }
		/* 8223BA30h case   22:*/		return 0x8223BA34;
		  /* 8223BA34h */ case   23:  		/* lwz R11, <#[R30]> */
		/* 8223BA34h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BA34h case   23:*/		return 0x8223BA38;
		  /* 8223BA38h */ case   24:  		/* mr R3, R30 */
		/* 8223BA38h case   24:*/		regs.R3 = regs.R30;
		/* 8223BA38h case   24:*/		return 0x8223BA3C;
		  /* 8223BA3Ch */ case   25:  		/* li R6, 1 */
		/* 8223BA3Ch case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223BA3Ch case   25:*/		return 0x8223BA40;
		  /* 8223BA40h */ case   26:  		/* li R5, 2 */
		/* 8223BA40h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223BA40h case   26:*/		return 0x8223BA44;
		  /* 8223BA44h */ case   27:  		/* li R4, 0 */
		/* 8223BA44h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BA44h case   27:*/		return 0x8223BA48;
		  /* 8223BA48h */ case   28:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BA48h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BA48h case   28:*/		return 0x8223BA4C;
		  /* 8223BA4Ch */ case   29:  		/* mtspr CTR, R11 */
		/* 8223BA4Ch case   29:*/		regs.CTR = regs.R11;
		/* 8223BA4Ch case   29:*/		return 0x8223BA50;
		  /* 8223BA50h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 8223BA50h case   30:*/		if ( 1 ) { regs.LR = 0x8223BA54; return (uint32)regs.CTR; }
		/* 8223BA50h case   30:*/		return 0x8223BA54;
		  /* 8223BA54h */ case   31:  		/* lwz R11, <#[R30]> */
		/* 8223BA54h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BA54h case   31:*/		return 0x8223BA58;
		  /* 8223BA58h */ case   32:  		/* mr R3, R30 */
		/* 8223BA58h case   32:*/		regs.R3 = regs.R30;
		/* 8223BA58h case   32:*/		return 0x8223BA5C;
		  /* 8223BA5Ch */ case   33:  		/* li R6, 1 */
		/* 8223BA5Ch case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223BA5Ch case   33:*/		return 0x8223BA60;
		  /* 8223BA60h */ case   34:  		/* li R5, 3 */
		/* 8223BA60h case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223BA60h case   34:*/		return 0x8223BA64;
		  /* 8223BA64h */ case   35:  		/* li R4, 0 */
		/* 8223BA64h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BA64h case   35:*/		return 0x8223BA68;
		  /* 8223BA68h */ case   36:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BA68h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BA68h case   36:*/		return 0x8223BA6C;
		  /* 8223BA6Ch */ case   37:  		/* mtspr CTR, R11 */
		/* 8223BA6Ch case   37:*/		regs.CTR = regs.R11;
		/* 8223BA6Ch case   37:*/		return 0x8223BA70;
		  /* 8223BA70h */ case   38:  		/* bcctrl 20, CR0_LT */
		/* 8223BA70h case   38:*/		if ( 1 ) { regs.LR = 0x8223BA74; return (uint32)regs.CTR; }
		/* 8223BA70h case   38:*/		return 0x8223BA74;
		  /* 8223BA74h */ case   39:  		/* mr R3, R30 */
		/* 8223BA74h case   39:*/		regs.R3 = regs.R30;
		/* 8223BA74h case   39:*/		return 0x8223BA78;
		  /* 8223BA78h */ case   40:  		/* mr R5, R28 */
		/* 8223BA78h case   40:*/		regs.R5 = regs.R28;
		/* 8223BA78h case   40:*/		return 0x8223BA7C;
		  /* 8223BA7Ch */ case   41:  		/* li R4, 1 */
		/* 8223BA7Ch case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223BA7Ch case   41:*/		return 0x8223BA80;
		  /* 8223BA80h */ case   42:  		/* bl 108824 */
		/* 8223BA80h case   42:*/		regs.LR = 0x8223BA84; return 0x82256398;
		/* 8223BA80h case   42:*/		return 0x8223BA84;
		  /* 8223BA84h */ case   43:  		/* stb R26, <#[R30 + 153]> */
		/* 8223BA84h case   43:*/		cpu::mem::store8( regs, regs.R26, (uint32)(regs.R30 + 0x00000099) );
		/* 8223BA84h case   43:*/		return 0x8223BA88;
		  /* 8223BA88h */ case   44:  		/* lis R11, -32222 */
		/* 8223BA88h case   44:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223BA88h case   44:*/		return 0x8223BA8C;
		  /* 8223BA8Ch */ case   45:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223BA8Ch case   45:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223BA8Ch case   45:*/		return 0x8223BA90;
		  /* 8223BA90h */ case   46:  		/* addi R5, R1, 84 */
		/* 8223BA90h case   46:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 8223BA90h case   46:*/		return 0x8223BA94;
		  /* 8223BA94h */ case   47:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223BA94h case   47:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223BA94h case   47:*/		return 0x8223BA98;
		  /* 8223BA98h */ case   48:  		/* addi R6, R11, -12392 */
		/* 8223BA98h case   48:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223BA98h case   48:*/		return 0x8223BA9C;
		  /* 8223BA9Ch */ case   49:  		/* li R4, 0 */
		/* 8223BA9Ch case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BA9Ch case   49:*/		return 0x8223BAA0;
		  /* 8223BAA0h */ case   50:  		/* bl -34776 */
		/* 8223BAA0h case   50:*/		regs.LR = 0x8223BAA4; return 0x822332C8;
		/* 8223BAA0h case   50:*/		return 0x8223BAA4;
		  /* 8223BAA4h */ case   51:  		/* lis R11, -32222 */
		/* 8223BAA4h case   51:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223BAA4h case   51:*/		return 0x8223BAA8;
		  /* 8223BAA8h */ case   52:  		/* addi R6, R11, -12392 */
		/* 8223BAA8h case   52:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223BAA8h case   52:*/		return 0x8223BAAC;
		  /* 8223BAACh */ case   53:  		/* lwz R7, <#[R31 + 12]> */
		/* 8223BAACh case   53:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223BAACh case   53:*/		return 0x8223BAB0;
		  /* 8223BAB0h */ case   54:  		/* addi R5, R1, 80 */
		/* 8223BAB0h case   54:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8223BAB0h case   54:*/		return 0x8223BAB4;
		  /* 8223BAB4h */ case   55:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223BAB4h case   55:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223BAB4h case   55:*/		return 0x8223BAB8;
		  /* 8223BAB8h */ case   56:  		/* li R4, 0 */
		/* 8223BAB8h case   56:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BAB8h case   56:*/		return 0x8223BABC;
		  /* 8223BABCh */ case   57:  		/* bl -34780 */
		/* 8223BABCh case   57:*/		regs.LR = 0x8223BAC0; return 0x822332E0;
		/* 8223BABCh case   57:*/		return 0x8223BAC0;
		  /* 8223BAC0h */ case   58:  		/* lfs FR4, <#[R1 + 80]> */
		/* 8223BAC0h case   58:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000050) );
		/* 8223BAC0h case   58:*/		return 0x8223BAC4;
		  /* 8223BAC4h */ case   59:  		/* lfs FR3, <#[R1 + 84]> */
		/* 8223BAC4h case   59:*/		cpu::mem::load32f( regs, &regs.FR3, (uint32)(regs.R1 + 0x00000054) );
		/* 8223BAC4h case   59:*/		return 0x8223BAC8;
		  /* 8223BAC8h */ case   60:  		/* mr R3, R30 */
		/* 8223BAC8h case   60:*/		regs.R3 = regs.R30;
		/* 8223BAC8h case   60:*/		return 0x8223BACC;
		  /* 8223BACCh */ case   61:  		/* li R5, 2 */
		/* 8223BACCh case   61:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223BACCh case   61:*/		return 0x8223BAD0;
		  /* 8223BAD0h */ case   62:  		/* fmr FR2, FR4 */
		/* 8223BAD0h case   62:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 8223BAD0h case   62:*/		return 0x8223BAD4;
		  /* 8223BAD4h */ case   63:  		/* mr R4, R31 */
		/* 8223BAD4h case   63:*/		regs.R4 = regs.R31;
		/* 8223BAD4h case   63:*/		return 0x8223BAD8;
		  /* 8223BAD8h */ case   64:  		/* fmr FR1, FR3 */
		/* 8223BAD8h case   64:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR3);
		/* 8223BAD8h case   64:*/		return 0x8223BADC;
		  /* 8223BADCh */ case   65:  		/* bl 111676 */
		/* 8223BADCh case   65:*/		regs.LR = 0x8223BAE0; return 0x82256F18;
		/* 8223BADCh case   65:*/		return 0x8223BAE0;
		  /* 8223BAE0h */ case   66:  		/* mr R4, R30 */
		/* 8223BAE0h case   66:*/		regs.R4 = regs.R30;
		/* 8223BAE0h case   66:*/		return 0x8223BAE4;
		  /* 8223BAE4h */ case   67:  		/* mr R3, R31 */
		/* 8223BAE4h case   67:*/		regs.R3 = regs.R31;
		/* 8223BAE4h case   67:*/		return 0x8223BAE8;
		  /* 8223BAE8h */ case   68:  		/* bl -21824 */
		/* 8223BAE8h case   68:*/		regs.LR = 0x8223BAEC; return 0x822365A8;
		/* 8223BAE8h case   68:*/		return 0x8223BAEC;
		  /* 8223BAECh */ case   69:  		/* mr R4, R30 */
		/* 8223BAECh case   69:*/		regs.R4 = regs.R30;
		/* 8223BAECh case   69:*/		return 0x8223BAF0;
		  /* 8223BAF0h */ case   70:  		/* mr R3, R29 */
		/* 8223BAF0h case   70:*/		regs.R3 = regs.R29;
		/* 8223BAF0h case   70:*/		return 0x8223BAF4;
		  /* 8223BAF4h */ case   71:  		/* bl 119868 */
		/* 8223BAF4h case   71:*/		regs.LR = 0x8223BAF8; return 0x82258F30;
		/* 8223BAF4h case   71:*/		return 0x8223BAF8;
		  /* 8223BAF8h */ case   72:  		/* mr R3, R30 */
		/* 8223BAF8h case   72:*/		regs.R3 = regs.R30;
		/* 8223BAF8h case   72:*/		return 0x8223BAFC;
		  /* 8223BAFCh */ case   73:  		/* bl 107716 */
		/* 8223BAFCh case   73:*/		regs.LR = 0x8223BB00; return 0x82255FC0;
		/* 8223BAFCh case   73:*/		return 0x8223BB00;
		  /* 8223BB00h */ case   74:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223BB00h case   74:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223BB00h case   74:*/		return 0x8223BB04;
		  /* 8223BB04h */ case   75:  		/* bc 4, CR0_EQ, 32 */
		/* 8223BB04h case   75:*/		if ( !regs.CR[0].eq ) { return 0x8223BB24;  }
		/* 8223BB04h case   75:*/		return 0x8223BB08;
		  /* 8223BB08h */ case   76:  		/* lis R11, -32252 */
		/* 8223BB08h case   76:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223BB08h case   76:*/		return 0x8223BB0C;
		  /* 8223BB0Ch */ case   77:  		/* mr R6, R22 */
		/* 8223BB0Ch case   77:*/		regs.R6 = regs.R22;
		/* 8223BB0Ch case   77:*/		return 0x8223BB10;
		  /* 8223BB10h */ case   78:  		/* addi R5, R11, 8988 */
		/* 8223BB10h case   78:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x231C);
		/* 8223BB10h case   78:*/		return 0x8223BB14;
		  /* 8223BB14h */ case   79:  		/* mr R4, R23 */
		/* 8223BB14h case   79:*/		regs.R4 = regs.R23;
		/* 8223BB14h case   79:*/		return 0x8223BB18;
		  /* 8223BB18h */ case   80:  		/* li R7, 2291 */
		/* 8223BB18h case   80:*/		cpu::op::li<0>(regs,&regs.R7,0x8F3);
		/* 8223BB18h case   80:*/		return 0x8223BB1C;
		  /* 8223BB1Ch */ case   81:  		/* li R3, 0 */
		/* 8223BB1Ch case   81:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223BB1Ch case   81:*/		return 0x8223BB20;
		  /* 8223BB20h */ case   82:  		/* bl -933656 */
		/* 8223BB20h case   82:*/		regs.LR = 0x8223BB24; return 0x82157C08;
		/* 8223BB20h case   82:*/		return 0x8223BB24;
	}
	return 0x8223BB24;
} // Block from 8223B9D8h-8223BB24h (83 instructions)

//////////////////////////////////////////////////////
// Block at 8223BB24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BB24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BB24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BB24);
		  /* 8223BB24h */ case    0:  		/* li R3, 19 */
		/* 8223BB24h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 8223BB24h case    0:*/		return 0x8223BB28;
		  /* 8223BB28h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223BB28h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223BB28h case    1:*/		return 0x8223BB2C;
		  /* 8223BB2Ch */ case    2:  		/* bl 107524 */
		/* 8223BB2Ch case    2:*/		regs.LR = 0x8223BB30; return 0x82255F30;
		/* 8223BB2Ch case    2:*/		return 0x8223BB30;
		  /* 8223BB30h */ case    3:  		/* mr R5, R28 */
		/* 8223BB30h case    3:*/		regs.R5 = regs.R28;
		/* 8223BB30h case    3:*/		return 0x8223BB34;
		  /* 8223BB34h */ case    4:  		/* li R4, 0 */
		/* 8223BB34h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BB34h case    4:*/		return 0x8223BB38;
		  /* 8223BB38h */ case    5:  		/* mr R30, R3 */
		/* 8223BB38h case    5:*/		regs.R30 = regs.R3;
		/* 8223BB38h case    5:*/		return 0x8223BB3C;
		  /* 8223BB3Ch */ case    6:  		/* bl 108636 */
		/* 8223BB3Ch case    6:*/		regs.LR = 0x8223BB40; return 0x82256398;
		/* 8223BB3Ch case    6:*/		return 0x8223BB40;
		  /* 8223BB40h */ case    7:  		/* lwz R11, <#[R30]> */
		/* 8223BB40h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BB40h case    7:*/		return 0x8223BB44;
		  /* 8223BB44h */ case    8:  		/* mr R3, R30 */
		/* 8223BB44h case    8:*/		regs.R3 = regs.R30;
		/* 8223BB44h case    8:*/		return 0x8223BB48;
		  /* 8223BB48h */ case    9:  		/* li R6, 0 */
		/* 8223BB48h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223BB48h case    9:*/		return 0x8223BB4C;
		  /* 8223BB4Ch */ case   10:  		/* li R5, 0 */
		/* 8223BB4Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223BB4Ch case   10:*/		return 0x8223BB50;
		  /* 8223BB50h */ case   11:  		/* li R4, 0 */
		/* 8223BB50h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BB50h case   11:*/		return 0x8223BB54;
		  /* 8223BB54h */ case   12:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BB54h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BB54h case   12:*/		return 0x8223BB58;
		  /* 8223BB58h */ case   13:  		/* mtspr CTR, R11 */
		/* 8223BB58h case   13:*/		regs.CTR = regs.R11;
		/* 8223BB58h case   13:*/		return 0x8223BB5C;
		  /* 8223BB5Ch */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223BB5Ch case   14:*/		if ( 1 ) { regs.LR = 0x8223BB60; return (uint32)regs.CTR; }
		/* 8223BB5Ch case   14:*/		return 0x8223BB60;
		  /* 8223BB60h */ case   15:  		/* lwz R11, <#[R30]> */
		/* 8223BB60h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BB60h case   15:*/		return 0x8223BB64;
		  /* 8223BB64h */ case   16:  		/* mr R3, R30 */
		/* 8223BB64h case   16:*/		regs.R3 = regs.R30;
		/* 8223BB64h case   16:*/		return 0x8223BB68;
		  /* 8223BB68h */ case   17:  		/* li R6, 0 */
		/* 8223BB68h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223BB68h case   17:*/		return 0x8223BB6C;
		  /* 8223BB6Ch */ case   18:  		/* li R5, 1 */
		/* 8223BB6Ch case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223BB6Ch case   18:*/		return 0x8223BB70;
		  /* 8223BB70h */ case   19:  		/* li R4, 0 */
		/* 8223BB70h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BB70h case   19:*/		return 0x8223BB74;
		  /* 8223BB74h */ case   20:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BB74h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BB74h case   20:*/		return 0x8223BB78;
		  /* 8223BB78h */ case   21:  		/* mtspr CTR, R11 */
		/* 8223BB78h case   21:*/		regs.CTR = regs.R11;
		/* 8223BB78h case   21:*/		return 0x8223BB7C;
		  /* 8223BB7Ch */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 8223BB7Ch case   22:*/		if ( 1 ) { regs.LR = 0x8223BB80; return (uint32)regs.CTR; }
		/* 8223BB7Ch case   22:*/		return 0x8223BB80;
		  /* 8223BB80h */ case   23:  		/* lwz R11, <#[R30]> */
		/* 8223BB80h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BB80h case   23:*/		return 0x8223BB84;
		  /* 8223BB84h */ case   24:  		/* mr R3, R30 */
		/* 8223BB84h case   24:*/		regs.R3 = regs.R30;
		/* 8223BB84h case   24:*/		return 0x8223BB88;
		  /* 8223BB88h */ case   25:  		/* li R6, 1 */
		/* 8223BB88h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223BB88h case   25:*/		return 0x8223BB8C;
		  /* 8223BB8Ch */ case   26:  		/* li R5, 2 */
		/* 8223BB8Ch case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223BB8Ch case   26:*/		return 0x8223BB90;
		  /* 8223BB90h */ case   27:  		/* li R4, 0 */
		/* 8223BB90h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BB90h case   27:*/		return 0x8223BB94;
		  /* 8223BB94h */ case   28:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BB94h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BB94h case   28:*/		return 0x8223BB98;
		  /* 8223BB98h */ case   29:  		/* mtspr CTR, R11 */
		/* 8223BB98h case   29:*/		regs.CTR = regs.R11;
		/* 8223BB98h case   29:*/		return 0x8223BB9C;
		  /* 8223BB9Ch */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 8223BB9Ch case   30:*/		if ( 1 ) { regs.LR = 0x8223BBA0; return (uint32)regs.CTR; }
		/* 8223BB9Ch case   30:*/		return 0x8223BBA0;
		  /* 8223BBA0h */ case   31:  		/* lwz R11, <#[R30]> */
		/* 8223BBA0h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BBA0h case   31:*/		return 0x8223BBA4;
		  /* 8223BBA4h */ case   32:  		/* mr R3, R30 */
		/* 8223BBA4h case   32:*/		regs.R3 = regs.R30;
		/* 8223BBA4h case   32:*/		return 0x8223BBA8;
		  /* 8223BBA8h */ case   33:  		/* li R6, 1 */
		/* 8223BBA8h case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223BBA8h case   33:*/		return 0x8223BBAC;
		  /* 8223BBACh */ case   34:  		/* li R5, 3 */
		/* 8223BBACh case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223BBACh case   34:*/		return 0x8223BBB0;
		  /* 8223BBB0h */ case   35:  		/* li R4, 0 */
		/* 8223BBB0h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BBB0h case   35:*/		return 0x8223BBB4;
		  /* 8223BBB4h */ case   36:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BBB4h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BBB4h case   36:*/		return 0x8223BBB8;
		  /* 8223BBB8h */ case   37:  		/* mtspr CTR, R11 */
		/* 8223BBB8h case   37:*/		regs.CTR = regs.R11;
		/* 8223BBB8h case   37:*/		return 0x8223BBBC;
		  /* 8223BBBCh */ case   38:  		/* bcctrl 20, CR0_LT */
		/* 8223BBBCh case   38:*/		if ( 1 ) { regs.LR = 0x8223BBC0; return (uint32)regs.CTR; }
		/* 8223BBBCh case   38:*/		return 0x8223BBC0;
		  /* 8223BBC0h */ case   39:  		/* mr R3, R30 */
		/* 8223BBC0h case   39:*/		regs.R3 = regs.R30;
		/* 8223BBC0h case   39:*/		return 0x8223BBC4;
		  /* 8223BBC4h */ case   40:  		/* mr R5, R28 */
		/* 8223BBC4h case   40:*/		regs.R5 = regs.R28;
		/* 8223BBC4h case   40:*/		return 0x8223BBC8;
		  /* 8223BBC8h */ case   41:  		/* li R4, 1 */
		/* 8223BBC8h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223BBC8h case   41:*/		return 0x8223BBCC;
		  /* 8223BBCCh */ case   42:  		/* bl 108492 */
		/* 8223BBCCh case   42:*/		regs.LR = 0x8223BBD0; return 0x82256398;
		/* 8223BBCCh case   42:*/		return 0x8223BBD0;
		  /* 8223BBD0h */ case   43:  		/* stb R26, <#[R30 + 159]> */
		/* 8223BBD0h case   43:*/		cpu::mem::store8( regs, regs.R26, (uint32)(regs.R30 + 0x0000009F) );
		/* 8223BBD0h case   43:*/		return 0x8223BBD4;
		  /* 8223BBD4h */ case   44:  		/* lis R11, -32256 */
		/* 8223BBD4h case   44:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8223BBD4h case   44:*/		return 0x8223BBD8;
		  /* 8223BBD8h */ case   45:  		/* mr R3, R30 */
		/* 8223BBD8h case   45:*/		regs.R3 = regs.R30;
		/* 8223BBD8h case   45:*/		return 0x8223BBDC;
		  /* 8223BBDCh */ case   46:  		/* li R5, 2 */
		/* 8223BBDCh case   46:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223BBDCh case   46:*/		return 0x8223BBE0;
		  /* 8223BBE0h */ case   47:  		/* mr R4, R31 */
		/* 8223BBE0h case   47:*/		regs.R4 = regs.R31;
		/* 8223BBE0h case   47:*/		return 0x8223BBE4;
		  /* 8223BBE4h */ case   48:  		/* lfs FR4, <#[R11 + 2988]> */
		/* 8223BBE4h case   48:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R11 + 0x00000BAC) );
		/* 8223BBE4h case   48:*/		return 0x8223BBE8;
		  /* 8223BBE8h */ case   49:  		/* fmr FR3, FR4 */
		/* 8223BBE8h case   49:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 8223BBE8h case   49:*/		return 0x8223BBEC;
		  /* 8223BBECh */ case   50:  		/* fmr FR2, FR4 */
		/* 8223BBECh case   50:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 8223BBECh case   50:*/		return 0x8223BBF0;
		  /* 8223BBF0h */ case   51:  		/* fmr FR1, FR4 */
		/* 8223BBF0h case   51:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 8223BBF0h case   51:*/		return 0x8223BBF4;
		  /* 8223BBF4h */ case   52:  		/* bl 111396 */
		/* 8223BBF4h case   52:*/		regs.LR = 0x8223BBF8; return 0x82256F18;
		/* 8223BBF4h case   52:*/		return 0x8223BBF8;
		  /* 8223BBF8h */ case   53:  		/* mr R4, R30 */
		/* 8223BBF8h case   53:*/		regs.R4 = regs.R30;
		/* 8223BBF8h case   53:*/		return 0x8223BBFC;
		  /* 8223BBFCh */ case   54:  		/* mr R3, R31 */
		/* 8223BBFCh case   54:*/		regs.R3 = regs.R31;
		/* 8223BBFCh case   54:*/		return 0x8223BC00;
		  /* 8223BC00h */ case   55:  		/* bl -22104 */
		/* 8223BC00h case   55:*/		regs.LR = 0x8223BC04; return 0x822365A8;
		/* 8223BC00h case   55:*/		return 0x8223BC04;
		  /* 8223BC04h */ case   56:  		/* mr R4, R30 */
		/* 8223BC04h case   56:*/		regs.R4 = regs.R30;
		/* 8223BC04h case   56:*/		return 0x8223BC08;
		  /* 8223BC08h */ case   57:  		/* mr R3, R29 */
		/* 8223BC08h case   57:*/		regs.R3 = regs.R29;
		/* 8223BC08h case   57:*/		return 0x8223BC0C;
		  /* 8223BC0Ch */ case   58:  		/* bl 119588 */
		/* 8223BC0Ch case   58:*/		regs.LR = 0x8223BC10; return 0x82258F30;
		/* 8223BC0Ch case   58:*/		return 0x8223BC10;
		  /* 8223BC10h */ case   59:  		/* mr R3, R30 */
		/* 8223BC10h case   59:*/		regs.R3 = regs.R30;
		/* 8223BC10h case   59:*/		return 0x8223BC14;
		  /* 8223BC14h */ case   60:  		/* bl 107436 */
		/* 8223BC14h case   60:*/		regs.LR = 0x8223BC18; return 0x82255FC0;
		/* 8223BC14h case   60:*/		return 0x8223BC18;
		  /* 8223BC18h */ case   61:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223BC18h case   61:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223BC18h case   61:*/		return 0x8223BC1C;
		  /* 8223BC1Ch */ case   62:  		/* bc 4, CR0_EQ, 32 */
		/* 8223BC1Ch case   62:*/		if ( !regs.CR[0].eq ) { return 0x8223BC3C;  }
		/* 8223BC1Ch case   62:*/		return 0x8223BC20;
		  /* 8223BC20h */ case   63:  		/* lis R11, -32252 */
		/* 8223BC20h case   63:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223BC20h case   63:*/		return 0x8223BC24;
		  /* 8223BC24h */ case   64:  		/* mr R6, R22 */
		/* 8223BC24h case   64:*/		regs.R6 = regs.R22;
		/* 8223BC24h case   64:*/		return 0x8223BC28;
		  /* 8223BC28h */ case   65:  		/* addi R5, R11, 8972 */
		/* 8223BC28h case   65:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x230C);
		/* 8223BC28h case   65:*/		return 0x8223BC2C;
		  /* 8223BC2Ch */ case   66:  		/* mr R4, R23 */
		/* 8223BC2Ch case   66:*/		regs.R4 = regs.R23;
		/* 8223BC2Ch case   66:*/		return 0x8223BC30;
		  /* 8223BC30h */ case   67:  		/* li R7, 2305 */
		/* 8223BC30h case   67:*/		cpu::op::li<0>(regs,&regs.R7,0x901);
		/* 8223BC30h case   67:*/		return 0x8223BC34;
		  /* 8223BC34h */ case   68:  		/* li R3, 0 */
		/* 8223BC34h case   68:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223BC34h case   68:*/		return 0x8223BC38;
		  /* 8223BC38h */ case   69:  		/* bl -933936 */
		/* 8223BC38h case   69:*/		regs.LR = 0x8223BC3C; return 0x82157C08;
		/* 8223BC38h case   69:*/		return 0x8223BC3C;
	}
	return 0x8223BC3C;
} // Block from 8223BB24h-8223BC3Ch (70 instructions)

//////////////////////////////////////////////////////
// Block at 8223BC3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BC3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BC3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BC3C);
		  /* 8223BC3Ch */ case    0:  		/* li R3, 105 */
		/* 8223BC3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x69);
		/* 8223BC3Ch case    0:*/		return 0x8223BC40;
		  /* 8223BC40h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223BC40h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223BC40h case    1:*/		return 0x8223BC44;
		  /* 8223BC44h */ case    2:  		/* bl 107244 */
		/* 8223BC44h case    2:*/		regs.LR = 0x8223BC48; return 0x82255F30;
		/* 8223BC44h case    2:*/		return 0x8223BC48;
		  /* 8223BC48h */ case    3:  		/* mr R5, R20 */
		/* 8223BC48h case    3:*/		regs.R5 = regs.R20;
		/* 8223BC48h case    3:*/		return 0x8223BC4C;
		  /* 8223BC4Ch */ case    4:  		/* li R4, 0 */
		/* 8223BC4Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BC4Ch case    4:*/		return 0x8223BC50;
		  /* 8223BC50h */ case    5:  		/* mr R30, R3 */
		/* 8223BC50h case    5:*/		regs.R30 = regs.R3;
		/* 8223BC50h case    5:*/		return 0x8223BC54;
		  /* 8223BC54h */ case    6:  		/* bl 108356 */
		/* 8223BC54h case    6:*/		regs.LR = 0x8223BC58; return 0x82256398;
		/* 8223BC54h case    6:*/		return 0x8223BC58;
		  /* 8223BC58h */ case    7:  		/* lwz R11, <#[R30]> */
		/* 8223BC58h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BC58h case    7:*/		return 0x8223BC5C;
		  /* 8223BC5Ch */ case    8:  		/* mr R3, R30 */
		/* 8223BC5Ch case    8:*/		regs.R3 = regs.R30;
		/* 8223BC5Ch case    8:*/		return 0x8223BC60;
		  /* 8223BC60h */ case    9:  		/* li R6, 4 */
		/* 8223BC60h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8223BC60h case    9:*/		return 0x8223BC64;
		  /* 8223BC64h */ case   10:  		/* li R5, 0 */
		/* 8223BC64h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223BC64h case   10:*/		return 0x8223BC68;
		  /* 8223BC68h */ case   11:  		/* li R4, 0 */
		/* 8223BC68h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BC68h case   11:*/		return 0x8223BC6C;
		  /* 8223BC6Ch */ case   12:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BC6Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BC6Ch case   12:*/		return 0x8223BC70;
		  /* 8223BC70h */ case   13:  		/* mtspr CTR, R11 */
		/* 8223BC70h case   13:*/		regs.CTR = regs.R11;
		/* 8223BC70h case   13:*/		return 0x8223BC74;
		  /* 8223BC74h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223BC74h case   14:*/		if ( 1 ) { regs.LR = 0x8223BC78; return (uint32)regs.CTR; }
		/* 8223BC74h case   14:*/		return 0x8223BC78;
		  /* 8223BC78h */ case   15:  		/* lwz R11, <#[R30]> */
		/* 8223BC78h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BC78h case   15:*/		return 0x8223BC7C;
		  /* 8223BC7Ch */ case   16:  		/* mr R3, R30 */
		/* 8223BC7Ch case   16:*/		regs.R3 = regs.R30;
		/* 8223BC7Ch case   16:*/		return 0x8223BC80;
		  /* 8223BC80h */ case   17:  		/* li R6, 0 */
		/* 8223BC80h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223BC80h case   17:*/		return 0x8223BC84;
		  /* 8223BC84h */ case   18:  		/* li R5, 1 */
		/* 8223BC84h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223BC84h case   18:*/		return 0x8223BC88;
		  /* 8223BC88h */ case   19:  		/* li R4, 0 */
		/* 8223BC88h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BC88h case   19:*/		return 0x8223BC8C;
		  /* 8223BC8Ch */ case   20:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BC8Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BC8Ch case   20:*/		return 0x8223BC90;
		  /* 8223BC90h */ case   21:  		/* mtspr CTR, R11 */
		/* 8223BC90h case   21:*/		regs.CTR = regs.R11;
		/* 8223BC90h case   21:*/		return 0x8223BC94;
		  /* 8223BC94h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 8223BC94h case   22:*/		if ( 1 ) { regs.LR = 0x8223BC98; return (uint32)regs.CTR; }
		/* 8223BC94h case   22:*/		return 0x8223BC98;
		  /* 8223BC98h */ case   23:  		/* lwz R11, <#[R30]> */
		/* 8223BC98h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BC98h case   23:*/		return 0x8223BC9C;
		  /* 8223BC9Ch */ case   24:  		/* mr R3, R30 */
		/* 8223BC9Ch case   24:*/		regs.R3 = regs.R30;
		/* 8223BC9Ch case   24:*/		return 0x8223BCA0;
		  /* 8223BCA0h */ case   25:  		/* li R6, 0 */
		/* 8223BCA0h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223BCA0h case   25:*/		return 0x8223BCA4;
		  /* 8223BCA4h */ case   26:  		/* li R5, 2 */
		/* 8223BCA4h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223BCA4h case   26:*/		return 0x8223BCA8;
		  /* 8223BCA8h */ case   27:  		/* li R4, 0 */
		/* 8223BCA8h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BCA8h case   27:*/		return 0x8223BCAC;
		  /* 8223BCACh */ case   28:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BCACh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BCACh case   28:*/		return 0x8223BCB0;
		  /* 8223BCB0h */ case   29:  		/* mtspr CTR, R11 */
		/* 8223BCB0h case   29:*/		regs.CTR = regs.R11;
		/* 8223BCB0h case   29:*/		return 0x8223BCB4;
		  /* 8223BCB4h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 8223BCB4h case   30:*/		if ( 1 ) { regs.LR = 0x8223BCB8; return (uint32)regs.CTR; }
		/* 8223BCB4h case   30:*/		return 0x8223BCB8;
		  /* 8223BCB8h */ case   31:  		/* lwz R11, <#[R30]> */
		/* 8223BCB8h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BCB8h case   31:*/		return 0x8223BCBC;
		  /* 8223BCBCh */ case   32:  		/* mr R3, R30 */
		/* 8223BCBCh case   32:*/		regs.R3 = regs.R30;
		/* 8223BCBCh case   32:*/		return 0x8223BCC0;
		  /* 8223BCC0h */ case   33:  		/* li R6, 0 */
		/* 8223BCC0h case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223BCC0h case   33:*/		return 0x8223BCC4;
		  /* 8223BCC4h */ case   34:  		/* li R5, 3 */
		/* 8223BCC4h case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223BCC4h case   34:*/		return 0x8223BCC8;
		  /* 8223BCC8h */ case   35:  		/* li R4, 0 */
		/* 8223BCC8h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BCC8h case   35:*/		return 0x8223BCCC;
		  /* 8223BCCCh */ case   36:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223BCCCh case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223BCCCh case   36:*/		return 0x8223BCD0;
		  /* 8223BCD0h */ case   37:  		/* mtspr CTR, R11 */
		/* 8223BCD0h case   37:*/		regs.CTR = regs.R11;
		/* 8223BCD0h case   37:*/		return 0x8223BCD4;
		  /* 8223BCD4h */ case   38:  		/* bcctrl 20, CR0_LT */
		/* 8223BCD4h case   38:*/		if ( 1 ) { regs.LR = 0x8223BCD8; return (uint32)regs.CTR; }
		/* 8223BCD4h case   38:*/		return 0x8223BCD8;
		  /* 8223BCD8h */ case   39:  		/* mr R3, R30 */
		/* 8223BCD8h case   39:*/		regs.R3 = regs.R30;
		/* 8223BCD8h case   39:*/		return 0x8223BCDC;
		  /* 8223BCDCh */ case   40:  		/* mr R5, R28 */
		/* 8223BCDCh case   40:*/		regs.R5 = regs.R28;
		/* 8223BCDCh case   40:*/		return 0x8223BCE0;
		  /* 8223BCE0h */ case   41:  		/* li R4, 1 */
		/* 8223BCE0h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223BCE0h case   41:*/		return 0x8223BCE4;
		  /* 8223BCE4h */ case   42:  		/* bl 108212 */
		/* 8223BCE4h case   42:*/		regs.LR = 0x8223BCE8; return 0x82256398;
		/* 8223BCE4h case   42:*/		return 0x8223BCE8;
		  /* 8223BCE8h */ case   43:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223BCE8h case   43:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223BCE8h case   43:*/		return 0x8223BCEC;
		  /* 8223BCECh */ case   44:  		/* bl -128876 */
		/* 8223BCECh case   44:*/		regs.LR = 0x8223BCF0; return 0x8221C580;
		/* 8223BCECh case   44:*/		return 0x8223BCF0;
		  /* 8223BCF0h */ case   45:  		/* stw R3, <#[R30 + 172]> */
		/* 8223BCF0h case   45:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x000000AC) );
		/* 8223BCF0h case   45:*/		return 0x8223BCF4;
		  /* 8223BCF4h */ case   46:  		/* mr R4, R30 */
		/* 8223BCF4h case   46:*/		regs.R4 = regs.R30;
		/* 8223BCF4h case   46:*/		return 0x8223BCF8;
		  /* 8223BCF8h */ case   47:  		/* mr R3, R31 */
		/* 8223BCF8h case   47:*/		regs.R3 = regs.R31;
		/* 8223BCF8h case   47:*/		return 0x8223BCFC;
		  /* 8223BCFCh */ case   48:  		/* bl -22356 */
		/* 8223BCFCh case   48:*/		regs.LR = 0x8223BD00; return 0x822365A8;
		/* 8223BCFCh case   48:*/		return 0x8223BD00;
		  /* 8223BD00h */ case   49:  		/* mr R4, R30 */
		/* 8223BD00h case   49:*/		regs.R4 = regs.R30;
		/* 8223BD00h case   49:*/		return 0x8223BD04;
		  /* 8223BD04h */ case   50:  		/* mr R3, R29 */
		/* 8223BD04h case   50:*/		regs.R3 = regs.R29;
		/* 8223BD04h case   50:*/		return 0x8223BD08;
		  /* 8223BD08h */ case   51:  		/* bl 119336 */
		/* 8223BD08h case   51:*/		regs.LR = 0x8223BD0C; return 0x82258F30;
		/* 8223BD08h case   51:*/		return 0x8223BD0C;
		  /* 8223BD0Ch */ case   52:  		/* mr R3, R30 */
		/* 8223BD0Ch case   52:*/		regs.R3 = regs.R30;
		/* 8223BD0Ch case   52:*/		return 0x8223BD10;
		  /* 8223BD10h */ case   53:  		/* bl 107184 */
		/* 8223BD10h case   53:*/		regs.LR = 0x8223BD14; return 0x82255FC0;
		/* 8223BD10h case   53:*/		return 0x8223BD14;
		  /* 8223BD14h */ case   54:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223BD14h case   54:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223BD14h case   54:*/		return 0x8223BD18;
		  /* 8223BD18h */ case   55:  		/* bc 4, CR0_EQ, 32 */
		/* 8223BD18h case   55:*/		if ( !regs.CR[0].eq ) { return 0x8223BD38;  }
		/* 8223BD18h case   55:*/		return 0x8223BD1C;
		  /* 8223BD1Ch */ case   56:  		/* lis R11, -32252 */
		/* 8223BD1Ch case   56:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223BD1Ch case   56:*/		return 0x8223BD20;
		  /* 8223BD20h */ case   57:  		/* mr R6, R22 */
		/* 8223BD20h case   57:*/		regs.R6 = regs.R22;
		/* 8223BD20h case   57:*/		return 0x8223BD24;
		  /* 8223BD24h */ case   58:  		/* addi R5, R11, 9444 */
		/* 8223BD24h case   58:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x24E4);
		/* 8223BD24h case   58:*/		return 0x8223BD28;
		  /* 8223BD28h */ case   59:  		/* mr R4, R23 */
		/* 8223BD28h case   59:*/		regs.R4 = regs.R23;
		/* 8223BD28h case   59:*/		return 0x8223BD2C;
		  /* 8223BD2Ch */ case   60:  		/* li R7, 2318 */
		/* 8223BD2Ch case   60:*/		cpu::op::li<0>(regs,&regs.R7,0x90E);
		/* 8223BD2Ch case   60:*/		return 0x8223BD30;
		  /* 8223BD30h */ case   61:  		/* li R3, 0 */
		/* 8223BD30h case   61:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223BD30h case   61:*/		return 0x8223BD34;
		  /* 8223BD34h */ case   62:  		/* bl -934188 */
		/* 8223BD34h case   62:*/		regs.LR = 0x8223BD38; return 0x82157C08;
		/* 8223BD34h case   62:*/		return 0x8223BD38;
	}
	return 0x8223BD38;
} // Block from 8223BC3Ch-8223BD38h (63 instructions)

//////////////////////////////////////////////////////
// Block at 8223BD38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BD38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BD38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BD38);
		  /* 8223BD38h */ case    0:  		/* li R3, 78 */
		/* 8223BD38h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x4E);
		/* 8223BD38h case    0:*/		return 0x8223BD3C;
		  /* 8223BD3Ch */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223BD3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223BD3Ch case    1:*/		return 0x8223BD40;
		  /* 8223BD40h */ case    2:  		/* bl 106992 */
		/* 8223BD40h case    2:*/		regs.LR = 0x8223BD44; return 0x82255F30;
		/* 8223BD40h case    2:*/		return 0x8223BD44;
		  /* 8223BD44h */ case    3:  		/* li R11, 31 */
		/* 8223BD44h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1F);
		/* 8223BD44h case    3:*/		return 0x8223BD48;
		  /* 8223BD48h */ case    4:  		/* mr R30, R3 */
		/* 8223BD48h case    4:*/		regs.R30 = regs.R3;
		/* 8223BD48h case    4:*/		return 0x8223BD4C;
		  /* 8223BD4Ch */ case    5:  		/* stw R24, <#[R3 + 56]> */
		/* 8223BD4Ch case    5:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000038) );
		/* 8223BD4Ch case    5:*/		return 0x8223BD50;
		  /* 8223BD50h */ case    6:  		/* li R28, 0 */
		/* 8223BD50h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8223BD50h case    6:*/		return 0x8223BD54;
		  /* 8223BD54h */ case    7:  		/* stw R11, <#[R3 + 80]> */
		/* 8223BD54h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 8223BD54h case    7:*/		return 0x8223BD58;
		  /* 8223BD58h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 8223BD58h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223BD58h case    8:*/		return 0x8223BD5C;
		  /* 8223BD5Ch */ case    9:  		/* li R6, 0 */
		/* 8223BD5Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223BD5Ch case    9:*/		return 0x8223BD60;
		  /* 8223BD60h */ case   10:  		/* mr R5, R28 */
		/* 8223BD60h case   10:*/		regs.R5 = regs.R28;
		/* 8223BD60h case   10:*/		return 0x8223BD64;
		  /* 8223BD64h */ case   11:  		/* li R4, 1 */
		/* 8223BD64h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223BD64h case   11:*/		return 0x8223BD68;
		  /* 8223BD68h */ case   12:  		/* mr R3, R30 */
		/* 8223BD68h case   12:*/		regs.R3 = regs.R30;
		/* 8223BD68h case   12:*/		return 0x8223BD6C;
		  /* 8223BD6Ch */ case   13:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223BD6Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223BD6Ch case   13:*/		return 0x8223BD70;
		  /* 8223BD70h */ case   14:  		/* mtspr CTR, R11 */
		/* 8223BD70h case   14:*/		regs.CTR = regs.R11;
		/* 8223BD70h case   14:*/		return 0x8223BD74;
		  /* 8223BD74h */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 8223BD74h case   15:*/		if ( 1 ) { regs.LR = 0x8223BD78; return (uint32)regs.CTR; }
		/* 8223BD74h case   15:*/		return 0x8223BD78;
		  /* 8223BD78h */ case   16:  		/* addi R28, R28, 1 */
		/* 8223BD78h case   16:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8223BD78h case   16:*/		return 0x8223BD7C;
		  /* 8223BD7Ch */ case   17:  		/* cmpwi CR6, R28, 4 */
		/* 8223BD7Ch case   17:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000004);
		/* 8223BD7Ch case   17:*/		return 0x8223BD80;
		  /* 8223BD80h */ case   18:  		/* bc 12, CR6_LT, -40 */
		/* 8223BD80h case   18:*/		if ( regs.CR[6].lt ) { return 0x8223BD58;  }
		/* 8223BD80h case   18:*/		return 0x8223BD84;
		  /* 8223BD84h */ case   19:  		/* mr R5, R20 */
		/* 8223BD84h case   19:*/		regs.R5 = regs.R20;
		/* 8223BD84h case   19:*/		return 0x8223BD88;
		  /* 8223BD88h */ case   20:  		/* li R4, 1 */
		/* 8223BD88h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223BD88h case   20:*/		return 0x8223BD8C;
		  /* 8223BD8Ch */ case   21:  		/* mr R3, R30 */
		/* 8223BD8Ch case   21:*/		regs.R3 = regs.R30;
		/* 8223BD8Ch case   21:*/		return 0x8223BD90;
		  /* 8223BD90h */ case   22:  		/* bl 108040 */
		/* 8223BD90h case   22:*/		regs.LR = 0x8223BD94; return 0x82256398;
		/* 8223BD90h case   22:*/		return 0x8223BD94;
		  /* 8223BD94h */ case   23:  		/* mr R4, R30 */
		/* 8223BD94h case   23:*/		regs.R4 = regs.R30;
		/* 8223BD94h case   23:*/		return 0x8223BD98;
		  /* 8223BD98h */ case   24:  		/* mr R3, R31 */
		/* 8223BD98h case   24:*/		regs.R3 = regs.R31;
		/* 8223BD98h case   24:*/		return 0x8223BD9C;
		  /* 8223BD9Ch */ case   25:  		/* bl -22516 */
		/* 8223BD9Ch case   25:*/		regs.LR = 0x8223BDA0; return 0x822365A8;
		/* 8223BD9Ch case   25:*/		return 0x8223BDA0;
		  /* 8223BDA0h */ case   26:  		/* mr R4, R30 */
		/* 8223BDA0h case   26:*/		regs.R4 = regs.R30;
		/* 8223BDA0h case   26:*/		return 0x8223BDA4;
		  /* 8223BDA4h */ case   27:  		/* mr R3, R29 */
		/* 8223BDA4h case   27:*/		regs.R3 = regs.R29;
		/* 8223BDA4h case   27:*/		return 0x8223BDA8;
		  /* 8223BDA8h */ case   28:  		/* bl 119176 */
		/* 8223BDA8h case   28:*/		regs.LR = 0x8223BDAC; return 0x82258F30;
		/* 8223BDA8h case   28:*/		return 0x8223BDAC;
		  /* 8223BDACh */ case   29:  		/* mr R3, R30 */
		/* 8223BDACh case   29:*/		regs.R3 = regs.R30;
		/* 8223BDACh case   29:*/		return 0x8223BDB0;
		  /* 8223BDB0h */ case   30:  		/* bl 107024 */
		/* 8223BDB0h case   30:*/		regs.LR = 0x8223BDB4; return 0x82255FC0;
		/* 8223BDB0h case   30:*/		return 0x8223BDB4;
		  /* 8223BDB4h */ case   31:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223BDB4h case   31:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223BDB4h case   31:*/		return 0x8223BDB8;
		  /* 8223BDB8h */ case   32:  		/* bc 4, CR0_EQ, 32 */
		/* 8223BDB8h case   32:*/		if ( !regs.CR[0].eq ) { return 0x8223BDD8;  }
		/* 8223BDB8h case   32:*/		return 0x8223BDBC;
		  /* 8223BDBCh */ case   33:  		/* lis R11, -32252 */
		/* 8223BDBCh case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223BDBCh case   33:*/		return 0x8223BDC0;
		  /* 8223BDC0h */ case   34:  		/* mr R6, R22 */
		/* 8223BDC0h case   34:*/		regs.R6 = regs.R22;
		/* 8223BDC0h case   34:*/		return 0x8223BDC4;
		  /* 8223BDC4h */ case   35:  		/* addi R5, R11, 9424 */
		/* 8223BDC4h case   35:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x24D0);
		/* 8223BDC4h case   35:*/		return 0x8223BDC8;
		  /* 8223BDC8h */ case   36:  		/* mr R4, R23 */
		/* 8223BDC8h case   36:*/		regs.R4 = regs.R23;
		/* 8223BDC8h case   36:*/		return 0x8223BDCC;
		  /* 8223BDCCh */ case   37:  		/* li R7, 2329 */
		/* 8223BDCCh case   37:*/		cpu::op::li<0>(regs,&regs.R7,0x919);
		/* 8223BDCCh case   37:*/		return 0x8223BDD0;
		  /* 8223BDD0h */ case   38:  		/* li R3, 0 */
		/* 8223BDD0h case   38:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223BDD0h case   38:*/		return 0x8223BDD4;
		  /* 8223BDD4h */ case   39:  		/* bl -934348 */
		/* 8223BDD4h case   39:*/		regs.LR = 0x8223BDD8; return 0x82157C08;
		/* 8223BDD4h case   39:*/		return 0x8223BDD8;
	}
	return 0x8223BDD8;
} // Block from 8223BD38h-8223BDD8h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8223BDD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BDD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BDD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BDD8);
		  /* 8223BDD8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223BDD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223BDD8h case    0:*/		return 0x8223BDDC;
		  /* 8223BDDCh */ case    1:  		/* li R4, 140 */
		/* 8223BDDCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8C);
		/* 8223BDDCh case    1:*/		return 0x8223BDE0;
		  /* 8223BDE0h */ case    2:  		/* lwz R30, <#[R11 + 1452]> */
		/* 8223BDE0h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x000005AC) );
		/* 8223BDE0h case    2:*/		return 0x8223BDE4;
		  /* 8223BDE4h */ case    3:  		/* mr R3, R30 */
		/* 8223BDE4h case    3:*/		regs.R3 = regs.R30;
		/* 8223BDE4h case    3:*/		return 0x8223BDE8;
		  /* 8223BDE8h */ case    4:  		/* bl -129328 */
		/* 8223BDE8h case    4:*/		regs.LR = 0x8223BDEC; return 0x8221C4B8;
		/* 8223BDE8h case    4:*/		return 0x8223BDEC;
		  /* 8223BDECh */ case    5:  		/* mr R11, R3 */
		/* 8223BDECh case    5:*/		regs.R11 = regs.R3;
		/* 8223BDECh case    5:*/		return 0x8223BDF0;
		  /* 8223BDF0h */ case    6:  		/* addic. R3, R3, 4 */
		/* 8223BDF0h case    6:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 8223BDF0h case    6:*/		return 0x8223BDF4;
		  /* 8223BDF4h */ case    7:  		/* stw R30, <#[R11]> */
		/* 8223BDF4h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8223BDF4h case    7:*/		return 0x8223BDF8;
		  /* 8223BDF8h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 8223BDF8h case    8:*/		if ( regs.CR[0].eq ) { return 0x8223BE0C;  }
		/* 8223BDF8h case    8:*/		return 0x8223BDFC;
		  /* 8223BDFCh */ case    9:  		/* lwz R4, <#[R31 + 12]> */
		/* 8223BDFCh case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223BDFCh case    9:*/		return 0x8223BE00;
		  /* 8223BE00h */ case   10:  		/* bl 119632 */
		/* 8223BE00h case   10:*/		regs.LR = 0x8223BE04; return 0x82259150;
		/* 8223BE00h case   10:*/		return 0x8223BE04;
		  /* 8223BE04h */ case   11:  		/* mr R30, R3 */
		/* 8223BE04h case   11:*/		regs.R30 = regs.R3;
		/* 8223BE04h case   11:*/		return 0x8223BE08;
		  /* 8223BE08h */ case   12:  		/* b 8 */
		/* 8223BE08h case   12:*/		return 0x8223BE10;
		/* 8223BE08h case   12:*/		return 0x8223BE0C;
	}
	return 0x8223BE0C;
} // Block from 8223BDD8h-8223BE0Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223BE0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BE0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BE0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BE0C);
		  /* 8223BE0Ch */ case    0:  		/* li R30, 0 */
		/* 8223BE0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223BE0Ch case    0:*/		return 0x8223BE10;
	}
	return 0x8223BE10;
} // Block from 8223BE0Ch-8223BE10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223BE10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BE10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BE10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BE10);
		  /* 8223BE10h */ case    0:  		/* stw R30, <#[R27 + 148]> */
		/* 8223BE10h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x00000094) );
		/* 8223BE10h case    0:*/		return 0x8223BE14;
		  /* 8223BE14h */ case    1:  		/* mr R4, R30 */
		/* 8223BE14h case    1:*/		regs.R4 = regs.R30;
		/* 8223BE14h case    1:*/		return 0x8223BE18;
		  /* 8223BE18h */ case    2:  		/* mr R3, R27 */
		/* 8223BE18h case    2:*/		regs.R3 = regs.R27;
		/* 8223BE18h case    2:*/		return 0x8223BE1C;
		  /* 8223BE1Ch */ case    3:  		/* bl 121524 */
		/* 8223BE1Ch case    3:*/		regs.LR = 0x8223BE20; return 0x822598D0;
		/* 8223BE1Ch case    3:*/		return 0x8223BE20;
		  /* 8223BE20h */ case    4:  		/* mr R3, R29 */
		/* 8223BE20h case    4:*/		regs.R3 = regs.R29;
		/* 8223BE20h case    4:*/		return 0x8223BE24;
		  /* 8223BE24h */ case    5:  		/* lwz R28, <#[R27 + 152]> */
		/* 8223BE24h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000098) );
		/* 8223BE24h case    5:*/		return 0x8223BE28;
		  /* 8223BE28h */ case    6:  		/* mr R4, R28 */
		/* 8223BE28h case    6:*/		regs.R4 = regs.R28;
		/* 8223BE28h case    6:*/		return 0x8223BE2C;
		  /* 8223BE2Ch */ case    7:  		/* bl 121508 */
		/* 8223BE2Ch case    7:*/		regs.LR = 0x8223BE30; return 0x822598D0;
		/* 8223BE2Ch case    7:*/		return 0x8223BE30;
		  /* 8223BE30h */ case    8:  		/* mr R4, R28 */
		/* 8223BE30h case    8:*/		regs.R4 = regs.R28;
		/* 8223BE30h case    8:*/		return 0x8223BE34;
		  /* 8223BE34h */ case    9:  		/* mr R3, R30 */
		/* 8223BE34h case    9:*/		regs.R3 = regs.R30;
		/* 8223BE34h case    9:*/		return 0x8223BE38;
		  /* 8223BE38h */ case   10:  		/* bl 121496 */
		/* 8223BE38h case   10:*/		regs.LR = 0x8223BE3C; return 0x822598D0;
		/* 8223BE38h case   10:*/		return 0x8223BE3C;
		  /* 8223BE3Ch */ case   11:  		/* mr R6, R28 */
		/* 8223BE3Ch case   11:*/		regs.R6 = regs.R28;
		/* 8223BE3Ch case   11:*/		return 0x8223BE40;
		  /* 8223BE40h */ case   12:  		/* mr R5, R27 */
		/* 8223BE40h case   12:*/		regs.R5 = regs.R27;
		/* 8223BE40h case   12:*/		return 0x8223BE44;
		  /* 8223BE44h */ case   13:  		/* mr R4, R19 */
		/* 8223BE44h case   13:*/		regs.R4 = regs.R19;
		/* 8223BE44h case   13:*/		return 0x8223BE48;
		  /* 8223BE48h */ case   14:  		/* mr R3, R21 */
		/* 8223BE48h case   14:*/		regs.R3 = regs.R21;
		/* 8223BE48h case   14:*/		return 0x8223BE4C;
		  /* 8223BE4Ch */ case   15:  		/* bl 122812 */
		/* 8223BE4Ch case   15:*/		regs.LR = 0x8223BE50; return 0x82259E08;
		/* 8223BE4Ch case   15:*/		return 0x8223BE50;
		  /* 8223BE50h */ case   16:  		/* mr R5, R27 */
		/* 8223BE50h case   16:*/		regs.R5 = regs.R27;
		/* 8223BE50h case   16:*/		return 0x8223BE54;
		  /* 8223BE54h */ case   17:  		/* mr R4, R21 */
		/* 8223BE54h case   17:*/		regs.R4 = regs.R21;
		/* 8223BE54h case   17:*/		return 0x8223BE58;
		  /* 8223BE58h */ case   18:  		/* mr R3, R31 */
		/* 8223BE58h case   18:*/		regs.R3 = regs.R31;
		/* 8223BE58h case   18:*/		return 0x8223BE5C;
		  /* 8223BE5Ch */ case   19:  		/* bl -25092 */
		/* 8223BE5Ch case   19:*/		regs.LR = 0x8223BE60; return 0x82235C58;
		/* 8223BE5Ch case   19:*/		return 0x8223BE60;
		  /* 8223BE60h */ case   20:  		/* mr R5, R29 */
		/* 8223BE60h case   20:*/		regs.R5 = regs.R29;
		/* 8223BE60h case   20:*/		return 0x8223BE64;
		  /* 8223BE64h */ case   21:  		/* mr R4, R27 */
		/* 8223BE64h case   21:*/		regs.R4 = regs.R27;
		/* 8223BE64h case   21:*/		return 0x8223BE68;
		  /* 8223BE68h */ case   22:  		/* mr R3, R31 */
		/* 8223BE68h case   22:*/		regs.R3 = regs.R31;
		/* 8223BE68h case   22:*/		return 0x8223BE6C;
		  /* 8223BE6Ch */ case   23:  		/* bl -25108 */
		/* 8223BE6Ch case   23:*/		regs.LR = 0x8223BE70; return 0x82235C58;
		/* 8223BE6Ch case   23:*/		return 0x8223BE70;
		  /* 8223BE70h */ case   24:  		/* mr R5, R30 */
		/* 8223BE70h case   24:*/		regs.R5 = regs.R30;
		/* 8223BE70h case   24:*/		return 0x8223BE74;
		  /* 8223BE74h */ case   25:  		/* mr R4, R29 */
		/* 8223BE74h case   25:*/		regs.R4 = regs.R29;
		/* 8223BE74h case   25:*/		return 0x8223BE78;
		  /* 8223BE78h */ case   26:  		/* mr R3, R31 */
		/* 8223BE78h case   26:*/		regs.R3 = regs.R31;
		/* 8223BE78h case   26:*/		return 0x8223BE7C;
		  /* 8223BE7Ch */ case   27:  		/* bl -25124 */
		/* 8223BE7Ch case   27:*/		regs.LR = 0x8223BE80; return 0x82235C58;
		/* 8223BE7Ch case   27:*/		return 0x8223BE80;
		  /* 8223BE80h */ case   28:  		/* mr R5, R28 */
		/* 8223BE80h case   28:*/		regs.R5 = regs.R28;
		/* 8223BE80h case   28:*/		return 0x8223BE84;
		  /* 8223BE84h */ case   29:  		/* mr R4, R30 */
		/* 8223BE84h case   29:*/		regs.R4 = regs.R30;
		/* 8223BE84h case   29:*/		return 0x8223BE88;
		  /* 8223BE88h */ case   30:  		/* mr R3, R31 */
		/* 8223BE88h case   30:*/		regs.R3 = regs.R31;
		/* 8223BE88h case   30:*/		return 0x8223BE8C;
		  /* 8223BE8Ch */ case   31:  		/* bl -25140 */
		/* 8223BE8Ch case   31:*/		regs.LR = 0x8223BE90; return 0x82235C58;
		/* 8223BE8Ch case   31:*/		return 0x8223BE90;
		  /* 8223BE90h */ case   32:  		/* addi R1, R1, 208 */
		/* 8223BE90h case   32:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8223BE90h case   32:*/		return 0x8223BE94;
		  /* 8223BE94h */ case   33:  		/* b -1747984 */
		/* 8223BE94h case   33:*/		return 0x82091284;
		/* 8223BE94h case   33:*/		return 0x8223BE98;
	}
	return 0x8223BE98;
} // Block from 8223BE10h-8223BE98h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8223BE98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BE98);
		  /* 8223BE98h */ case    0:  		/* mfspr R12, LR */
		/* 8223BE98h case    0:*/		regs.R12 = regs.LR;
		/* 8223BE98h case    0:*/		return 0x8223BE9C;
		  /* 8223BE9Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223BE9Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223BE9Ch case    1:*/		return 0x8223BEA0;
		  /* 8223BEA0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223BEA0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223BEA0h case    2:*/		return 0x8223BEA4;
		  /* 8223BEA4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223BEA4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223BEA4h case    3:*/		return 0x8223BEA8;
		  /* 8223BEA8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223BEA8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223BEA8h case    4:*/		return 0x8223BEAC;
		  /* 8223BEACh */ case    5:  		/* lwz R30, <#[R3 + 12]> */
		/* 8223BEACh case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223BEACh case    5:*/		return 0x8223BEB0;
		  /* 8223BEB0h */ case    6:  		/* mr R31, R3 */
		/* 8223BEB0h case    6:*/		regs.R31 = regs.R3;
		/* 8223BEB0h case    6:*/		return 0x8223BEB4;
		  /* 8223BEB4h */ case    7:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223BEB4h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223BEB4h case    7:*/		return 0x8223BEB8;
		  /* 8223BEB8h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 8223BEB8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223BEB8h case    8:*/		return 0x8223BEBC;
		  /* 8223BEBCh */ case    9:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223BEBCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223BEBCh case    9:*/		return 0x8223BEC0;
		  /* 8223BEC0h */ case   10:  		/* mtspr CTR, R11 */
		/* 8223BEC0h case   10:*/		regs.CTR = regs.R11;
		/* 8223BEC0h case   10:*/		return 0x8223BEC4;
		  /* 8223BEC4h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8223BEC4h case   11:*/		if ( 1 ) { regs.LR = 0x8223BEC8; return (uint32)regs.CTR; }
		/* 8223BEC4h case   11:*/		return 0x8223BEC8;
		  /* 8223BEC8h */ case   12:  		/* lis R11, -32222 */
		/* 8223BEC8h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223BEC8h case   12:*/		return 0x8223BECC;
		  /* 8223BECCh */ case   13:  		/* mr R5, R3 */
		/* 8223BECCh case   13:*/		regs.R5 = regs.R3;
		/* 8223BECCh case   13:*/		return 0x8223BED0;
		  /* 8223BED0h */ case   14:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223BED0h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223BED0h case   14:*/		return 0x8223BED4;
		  /* 8223BED4h */ case   15:  		/* li R4, 0 */
		/* 8223BED4h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223BED4h case   15:*/		return 0x8223BED8;
		  /* 8223BED8h */ case   16:  		/* addi R6, R11, -12392 */
		/* 8223BED8h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223BED8h case   16:*/		return 0x8223BEDC;
		  /* 8223BEDCh */ case   17:  		/* mr R7, R30 */
		/* 8223BEDCh case   17:*/		regs.R7 = regs.R30;
		/* 8223BEDCh case   17:*/		return 0x8223BEE0;
		  /* 8223BEE0h */ case   18:  		/* bl -49032 */
		/* 8223BEE0h case   18:*/		regs.LR = 0x8223BEE4; return 0x8222FF58;
		/* 8223BEE0h case   18:*/		return 0x8223BEE4;
		  /* 8223BEE4h */ case   19:  		/* cmpwi CR6, R3, 1 */
		/* 8223BEE4h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223BEE4h case   19:*/		return 0x8223BEE8;
		  /* 8223BEE8h */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 8223BEE8h case   20:*/		if ( regs.CR[6].eq ) { return 0x8223BF1C;  }
		/* 8223BEE8h case   20:*/		return 0x8223BEEC;
		  /* 8223BEECh */ case   21:  		/* cmpwi CR6, R3, 3 */
		/* 8223BEECh case   21:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8223BEECh case   21:*/		return 0x8223BEF0;
		  /* 8223BEF0h */ case   22:  		/* bc 4, CR6_EQ, 52 */
		/* 8223BEF0h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8223BF24;  }
		/* 8223BEF0h case   22:*/		return 0x8223BEF4;
		  /* 8223BEF4h */ case   23:  		/* lis R11, -32252 */
		/* 8223BEF4h case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223BEF4h case   23:*/		return 0x8223BEF8;
		  /* 8223BEF8h */ case   24:  		/* lis R10, -32255 */
		/* 8223BEF8h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8223BEF8h case   24:*/		return 0x8223BEFC;
		  /* 8223BEFCh */ case   25:  		/* lis R9, -32253 */
		/* 8223BEFCh case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223BEFCh case   25:*/		return 0x8223BF00;
		  /* 8223BF00h */ case   26:  		/* addi R6, R11, 8520 */
		/* 8223BF00h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 8223BF00h case   26:*/		return 0x8223BF04;
		  /* 8223BF04h */ case   27:  		/* addi R5, R10, 5216 */
		/* 8223BF04h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 8223BF04h case   27:*/		return 0x8223BF08;
		  /* 8223BF08h */ case   28:  		/* addi R4, R9, 27460 */
		/* 8223BF08h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223BF08h case   28:*/		return 0x8223BF0C;
		  /* 8223BF0Ch */ case   29:  		/* li R7, 2453 */
		/* 8223BF0Ch case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x995);
		/* 8223BF0Ch case   29:*/		return 0x8223BF10;
		  /* 8223BF10h */ case   30:  		/* li R3, 0 */
		/* 8223BF10h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223BF10h case   30:*/		return 0x8223BF14;
		  /* 8223BF14h */ case   31:  		/* bl -934668 */
		/* 8223BF14h case   31:*/		regs.LR = 0x8223BF18; return 0x82157C08;
		/* 8223BF14h case   31:*/		return 0x8223BF18;
		  /* 8223BF18h */ case   32:  		/* b 12 */
		/* 8223BF18h case   32:*/		return 0x8223BF24;
		/* 8223BF18h case   32:*/		return 0x8223BF1C;
	}
	return 0x8223BF1C;
} // Block from 8223BE98h-8223BF1Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 8223BF1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BF1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BF1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BF1C);
		  /* 8223BF1Ch */ case    0:  		/* mr R3, R31 */
		/* 8223BF1Ch case    0:*/		regs.R3 = regs.R31;
		/* 8223BF1Ch case    0:*/		return 0x8223BF20;
		  /* 8223BF20h */ case    1:  		/* bl -15768 */
		/* 8223BF20h case    1:*/		regs.LR = 0x8223BF24; return 0x82238188;
		/* 8223BF20h case    1:*/		return 0x8223BF24;
	}
	return 0x8223BF24;
} // Block from 8223BF1Ch-8223BF24h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223BF24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BF24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BF24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BF24);
		  /* 8223BF24h */ case    0:  		/* addi R1, R1, 112 */
		/* 8223BF24h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223BF24h case    0:*/		return 0x8223BF28;
		  /* 8223BF28h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223BF28h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223BF28h case    1:*/		return 0x8223BF2C;
		  /* 8223BF2Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8223BF2Ch case    2:*/		regs.LR = regs.R12;
		/* 8223BF2Ch case    2:*/		return 0x8223BF30;
		  /* 8223BF30h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8223BF30h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223BF30h case    3:*/		return 0x8223BF34;
		  /* 8223BF34h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8223BF34h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223BF34h case    4:*/		return 0x8223BF38;
		  /* 8223BF38h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8223BF38h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223BF38h case    5:*/		return 0x8223BF3C;
	}
	return 0x8223BF3C;
} // Block from 8223BF24h-8223BF3Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223BF3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BF3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BF3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BF3C);
		  /* 8223BF3Ch */ case    0:  		/* nop */
		/* 8223BF3Ch case    0:*/		cpu::op::nop();
		/* 8223BF3Ch case    0:*/		return 0x8223BF40;
	}
	return 0x8223BF40;
} // Block from 8223BF3Ch-8223BF40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223BF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BF40);
		  /* 8223BF40h */ case    0:  		/* mfspr R12, LR */
		/* 8223BF40h case    0:*/		regs.R12 = regs.LR;
		/* 8223BF40h case    0:*/		return 0x8223BF44;
		  /* 8223BF44h */ case    1:  		/* bl -1748212 */
		/* 8223BF44h case    1:*/		regs.LR = 0x8223BF48; return 0x82091250;
		/* 8223BF44h case    1:*/		return 0x8223BF48;
		  /* 8223BF48h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8223BF48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8223BF48h case    2:*/		return 0x8223BF4C;
		  /* 8223BF4Ch */ case    3:  		/* mr R31, R3 */
		/* 8223BF4Ch case    3:*/		regs.R31 = regs.R3;
		/* 8223BF4Ch case    3:*/		return 0x8223BF50;
		  /* 8223BF50h */ case    4:  		/* bl -9616 */
		/* 8223BF50h case    4:*/		regs.LR = 0x8223BF54; return 0x822399C0;
		/* 8223BF50h case    4:*/		return 0x8223BF54;
		  /* 8223BF54h */ case    5:  		/* mr R26, R3 */
		/* 8223BF54h case    5:*/		regs.R26 = regs.R3;
		/* 8223BF54h case    5:*/		return 0x8223BF58;
		  /* 8223BF58h */ case    6:  		/* addi R27, R31, 128 */
		/* 8223BF58h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R31,0x80);
		/* 8223BF58h case    6:*/		return 0x8223BF5C;
		  /* 8223BF5Ch */ case    7:  		/* mr R3, R27 */
		/* 8223BF5Ch case    7:*/		regs.R3 = regs.R27;
		/* 8223BF5Ch case    7:*/		return 0x8223BF60;
		  /* 8223BF60h */ case    8:  		/* li R30, 0 */
		/* 8223BF60h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223BF60h case    8:*/		return 0x8223BF64;
		  /* 8223BF64h */ case    9:  		/* li R29, 1 */
		/* 8223BF64h case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8223BF64h case    9:*/		return 0x8223BF68;
		  /* 8223BF68h */ case   10:  		/* bl 96504 */
		/* 8223BF68h case   10:*/		regs.LR = 0x8223BF6C; return 0x82253860;
		/* 8223BF68h case   10:*/		return 0x8223BF6C;
		  /* 8223BF6Ch */ case   11:  		/* cmpwi CR6, R3, 1 */
		/* 8223BF6Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223BF6Ch case   11:*/		return 0x8223BF70;
		  /* 8223BF70h */ case   12:  		/* bc 12, CR6_LT, 168 */
		/* 8223BF70h case   12:*/		if ( regs.CR[6].lt ) { return 0x8223C018;  }
		/* 8223BF70h case   12:*/		return 0x8223BF74;
		  /* 8223BF74h */ case   13:  		/* addi R28, R26, 4 */
		/* 8223BF74h case   13:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R26,0x4);
		/* 8223BF74h case   13:*/		return 0x8223BF78;
		  /* 8223BF78h */ case   14:  		/* lwz R31, <#[R28]> */
		/* 8223BF78h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 8223BF78h case   14:*/		return 0x8223BF7C;
		  /* 8223BF7Ch */ case   15:  		/* mr R3, R31 */
		/* 8223BF7Ch case   15:*/		regs.R3 = regs.R31;
		/* 8223BF7Ch case   15:*/		return 0x8223BF80;
		  /* 8223BF80h */ case   16:  		/* lwz R11, <#[R31]> */
		/* 8223BF80h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223BF80h case   16:*/		return 0x8223BF84;
		  /* 8223BF84h */ case   17:  		/* lwz R11, <#[R11 + 8]> */
		/* 8223BF84h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8223BF84h case   17:*/		return 0x8223BF88;
		  /* 8223BF88h */ case   18:  		/* mtspr CTR, R11 */
		/* 8223BF88h case   18:*/		regs.CTR = regs.R11;
		/* 8223BF88h case   18:*/		return 0x8223BF8C;
		  /* 8223BF8Ch */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8223BF8Ch case   19:*/		if ( 1 ) { regs.LR = 0x8223BF90; return (uint32)regs.CTR; }
		/* 8223BF8Ch case   19:*/		return 0x8223BF90;
		  /* 8223BF90h */ case   20:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223BF90h case   20:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223BF90h case   20:*/		return 0x8223BF94;
		  /* 8223BF94h */ case   21:  		/* bc 4, CR0_EQ, 108 */
		/* 8223BF94h case   21:*/		if ( !regs.CR[0].eq ) { return 0x8223C000;  }
		/* 8223BF94h case   21:*/		return 0x8223BF98;
		  /* 8223BF98h */ case   22:  		/* lwz R7, <#[R31 + 56]> */
		/* 8223BF98h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000038) );
		/* 8223BF98h case   22:*/		return 0x8223BF9C;
		  /* 8223BF9Ch */ case   23:  		/* li R10, 0 */
		/* 8223BF9Ch case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8223BF9Ch case   23:*/		return 0x8223BFA0;
		  /* 8223BFA0h */ case   24:  		/* lwz R6, <#[R31 + 132]> */
		/* 8223BFA0h case   24:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000084) );
		/* 8223BFA0h case   24:*/		return 0x8223BFA4;
		  /* 8223BFA4h */ case   25:  		/* li R11, 0 */
		/* 8223BFA4h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223BFA4h case   25:*/		return 0x8223BFA8;
		  /* 8223BFA8h */ case   26:  		/* li R9, 1 */
		/* 8223BFA8h case   26:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8223BFA8h case   26:*/		return 0x8223BFAC;
		  /* 8223BFACh */ case   27:  		/* lwz R8, <#[R7 + 4]> */
		/* 8223BFACh case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000004) );
		/* 8223BFACh case   27:*/		return 0x8223BFB0;
		  /* 8223BFB0h */ case   28:  		/* cmplw CR6, R9, R8 */
		/* 8223BFB0h case   28:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 8223BFB0h case   28:*/		return 0x8223BFB4;
		  /* 8223BFB4h */ case   29:  		/* bc 4, CR6_GT, 12 */
		/* 8223BFB4h case   29:*/		if ( !regs.CR[6].gt ) { return 0x8223BFC0;  }
		/* 8223BFB4h case   29:*/		return 0x8223BFB8;
		  /* 8223BFB8h */ case   30:  		/* li R8, 0 */
		/* 8223BFB8h case   30:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8223BFB8h case   30:*/		return 0x8223BFBC;
		  /* 8223BFBCh */ case   31:  		/* b 16 */
		/* 8223BFBCh case   31:*/		return 0x8223BFCC;
		/* 8223BFBCh case   31:*/		return 0x8223BFC0;
	}
	return 0x8223BFC0;
} // Block from 8223BF40h-8223BFC0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8223BFC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BFC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BFC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BFC0);
		  /* 8223BFC0h */ case    0:  		/* lwz R10, <#[R7 + 8]> */
		/* 8223BFC0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000008) );
		/* 8223BFC0h case    0:*/		return 0x8223BFC4;
		  /* 8223BFC4h */ case    1:  		/* li R8, 1 */
		/* 8223BFC4h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8223BFC4h case    1:*/		return 0x8223BFC8;
		  /* 8223BFC8h */ case    2:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8223BFC8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8223BFC8h case    2:*/		return 0x8223BFCC;
	}
	return 0x8223BFCC;
} // Block from 8223BFC0h-8223BFCCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223BFCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BFCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BFCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BFCC);
		  /* 8223BFCCh */ case    0:  		/* rlwinm. R8, R8, 0, 24, 31 */
		/* 8223BFCCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R8,regs.R8);
		/* 8223BFCCh case    0:*/		return 0x8223BFD0;
		  /* 8223BFD0h */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 8223BFD0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8223BFF0;  }
		/* 8223BFD0h case    1:*/		return 0x8223BFD4;
		  /* 8223BFD4h */ case    2:  		/* lwz R8, <#[R10 + 132]> */
		/* 8223BFD4h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000084) );
		/* 8223BFD4h case    2:*/		return 0x8223BFD8;
		  /* 8223BFD8h */ case    3:  		/* addi R9, R9, 1 */
		/* 8223BFD8h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8223BFD8h case    3:*/		return 0x8223BFDC;
		  /* 8223BFDCh */ case    4:  		/* lwz R5, <#[R31 + 132]> */
		/* 8223BFDCh case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000084) );
		/* 8223BFDCh case    4:*/		return 0x8223BFE0;
		  /* 8223BFE0h */ case    5:  		/* addi R11, R11, 4 */
		/* 8223BFE0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223BFE0h case    5:*/		return 0x8223BFE4;
		  /* 8223BFE4h */ case    6:  		/* or R8, R8, R5 */
		/* 8223BFE4h case    6:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R5);
		/* 8223BFE4h case    6:*/		return 0x8223BFE8;
		  /* 8223BFE8h */ case    7:  		/* stw R8, <#[R31 + 132]> */
		/* 8223BFE8h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000084) );
		/* 8223BFE8h case    7:*/		return 0x8223BFEC;
		  /* 8223BFECh */ case    8:  		/* b -64 */
		/* 8223BFECh case    8:*/		return 0x8223BFAC;
		/* 8223BFECh case    8:*/		return 0x8223BFF0;
	}
	return 0x8223BFF0;
} // Block from 8223BFCCh-8223BFF0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223BFF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223BFF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223BFF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223BFF0);
		  /* 8223BFF0h */ case    0:  		/* lwz R11, <#[R31 + 132]> */
		/* 8223BFF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 8223BFF0h case    0:*/		return 0x8223BFF4;
		  /* 8223BFF4h */ case    1:  		/* subf R11, R11, R6 */
		/* 8223BFF4h case    1:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 8223BFF4h case    1:*/		return 0x8223BFF8;
		  /* 8223BFF8h */ case    2:  		/* addic R10, R11, -1 */
		/* 8223BFF8h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 8223BFF8h case    2:*/		return 0x8223BFFC;
		  /* 8223BFFCh */ case    3:  		/* subfe R30, R10, R11 */
		/* 8223BFFCh case    3:*/		cpu::op::subfe<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 8223BFFCh case    3:*/		return 0x8223C000;
	}
	return 0x8223C000;
} // Block from 8223BFF0h-8223C000h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223C000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C000);
		  /* 8223C000h */ case    0:  		/* mr R3, R27 */
		/* 8223C000h case    0:*/		regs.R3 = regs.R27;
		/* 8223C000h case    0:*/		return 0x8223C004;
		  /* 8223C004h */ case    1:  		/* addi R29, R29, 1 */
		/* 8223C004h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223C004h case    1:*/		return 0x8223C008;
		  /* 8223C008h */ case    2:  		/* addi R28, R28, 4 */
		/* 8223C008h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8223C008h case    2:*/		return 0x8223C00C;
		  /* 8223C00Ch */ case    3:  		/* bl 96340 */
		/* 8223C00Ch case    3:*/		regs.LR = 0x8223C010; return 0x82253860;
		/* 8223C00Ch case    3:*/		return 0x8223C010;
		  /* 8223C010h */ case    4:  		/* cmpw CR6, R29, R3 */
		/* 8223C010h case    4:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R3);
		/* 8223C010h case    4:*/		return 0x8223C014;
		  /* 8223C014h */ case    5:  		/* bc 4, CR6_GT, -156 */
		/* 8223C014h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8223BF78;  }
		/* 8223C014h case    5:*/		return 0x8223C018;
	}
	return 0x8223C018;
} // Block from 8223C000h-8223C018h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223C018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C018);
		  /* 8223C018h */ case    0:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 8223C018h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 8223C018h case    0:*/		return 0x8223C01C;
		  /* 8223C01Ch */ case    1:  		/* bc 4, CR0_EQ, -192 */
		/* 8223C01Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8223BF5C;  }
		/* 8223C01Ch case    1:*/		return 0x8223C020;
		  /* 8223C020h */ case    2:  		/* addi R1, R1, 144 */
		/* 8223C020h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8223C020h case    2:*/		return 0x8223C024;
		  /* 8223C024h */ case    3:  		/* b -1748356 */
		/* 8223C024h case    3:*/		return 0x820912A0;
		/* 8223C024h case    3:*/		return 0x8223C028;
	}
	return 0x8223C028;
} // Block from 8223C018h-8223C028h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223C028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C028);
		  /* 8223C028h */ case    0:  		/* mfspr R12, LR */
		/* 8223C028h case    0:*/		regs.R12 = regs.LR;
		/* 8223C028h case    0:*/		return 0x8223C02C;
		  /* 8223C02Ch */ case    1:  		/* bl -1748492 */
		/* 8223C02Ch case    1:*/		regs.LR = 0x8223C030; return 0x82091220;
		/* 8223C02Ch case    1:*/		return 0x8223C030;
		  /* 8223C030h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 8223C030h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 8223C030h case    2:*/		return 0x8223C034;
		  /* 8223C034h */ case    3:  		/* lwz R16, <#[R3 + 136]> */
		/* 8223C034h case    3:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R3 + 0x00000088) );
		/* 8223C034h case    3:*/		return 0x8223C038;
		  /* 8223C038h */ case    4:  		/* mr R21, R3 */
		/* 8223C038h case    4:*/		regs.R21 = regs.R3;
		/* 8223C038h case    4:*/		return 0x8223C03C;
		  /* 8223C03Ch */ case    5:  		/* lwz R11, <#[R16 + 8]> */
		/* 8223C03Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 8223C03Ch case    5:*/		return 0x8223C040;
		  /* 8223C040h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 8223C040h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223C040h case    6:*/		return 0x8223C044;
		  /* 8223C044h */ case    7:  		/* bc 12, CR6_EQ, 1240 */
		/* 8223C044h case    7:*/		if ( regs.CR[6].eq ) { return 0x8223C51C;  }
		/* 8223C044h case    7:*/		return 0x8223C048;
		  /* 8223C048h */ case    8:  		/* lis R10, -32252 */
		/* 8223C048h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223C048h case    8:*/		return 0x8223C04C;
		  /* 8223C04Ch */ case    9:  		/* lis R11, -32252 */
		/* 8223C04Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223C04Ch case    9:*/		return 0x8223C050;
		  /* 8223C050h */ case   10:  		/* lis R9, -32253 */
		/* 8223C050h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223C050h case   10:*/		return 0x8223C054;
		  /* 8223C054h */ case   11:  		/* lis R8, -32252 */
		/* 8223C054h case   11:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8223C054h case   11:*/		return 0x8223C058;
		  /* 8223C058h */ case   12:  		/* lis R7, -32252 */
		/* 8223C058h case   12:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 8223C058h case   12:*/		return 0x8223C05C;
		  /* 8223C05Ch */ case   13:  		/* addi R10, R10, 9544 */
		/* 8223C05Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2548);
		/* 8223C05Ch case   13:*/		return 0x8223C060;
	}
	return 0x8223C060;
} // Block from 8223C028h-8223C060h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223C060h
// Function '?InsertInstructionsForPolyStipple@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C060);
		  /* 8223C060h */ case    0:  		/* lis R17, -32252 */
		/* 8223C060h case    0:*/		cpu::op::lis<0>(regs,&regs.R17,0xFFFF8204);
		/* 8223C060h case    0:*/		return 0x8223C064;
		  /* 8223C064h */ case    1:  		/* li R22, 0 */
		/* 8223C064h case    1:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 8223C064h case    1:*/		return 0x8223C068;
		  /* 8223C068h */ case    2:  		/* stw R10, <#[R1 + 92]> */
		/* 8223C068h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8223C068h case    2:*/		return 0x8223C06C;
		  /* 8223C06Ch */ case    3:  		/* li R20, 1 */
		/* 8223C06Ch case    3:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 8223C06Ch case    3:*/		return 0x8223C070;
		  /* 8223C070h */ case    4:  		/* addi R14, R11, 9520 */
		/* 8223C070h case    4:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R11,0x2530);
		/* 8223C070h case    4:*/		return 0x8223C074;
		  /* 8223C074h */ case    5:  		/* addi R19, R9, 27460 */
		/* 8223C074h case    5:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R9,0x6B44);
		/* 8223C074h case    5:*/		return 0x8223C078;
		  /* 8223C078h */ case    6:  		/* addi R15, R8, 9504 */
		/* 8223C078h case    6:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R8,0x2520);
		/* 8223C078h case    6:*/		return 0x8223C07C;
		  /* 8223C07Ch */ case    7:  		/* addi R18, R7, 8520 */
		/* 8223C07Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R7,0x2148);
		/* 8223C07Ch case    7:*/		return 0x8223C080;
		  /* 8223C080h */ case    8:  		/* lwz R31, <#[R16 + 28]> */
		/* 8223C080h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x0000001C) );
		/* 8223C080h case    8:*/		return 0x8223C084;
		  /* 8223C084h */ case    9:  		/* mr R25, R22 */
		/* 8223C084h case    9:*/		regs.R25 = regs.R22;
		/* 8223C084h case    9:*/		return 0x8223C088;
		  /* 8223C088h */ case   10:  		/* mr R24, R22 */
		/* 8223C088h case   10:*/		regs.R24 = regs.R22;
		/* 8223C088h case   10:*/		return 0x8223C08C;
		  /* 8223C08Ch */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 8223C08Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8223C08Ch case   11:*/		return 0x8223C090;
		  /* 8223C090h */ case   12:  		/* cmpwi CR6, R11, 0 */
		/* 8223C090h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223C090h case   12:*/		return 0x8223C094;
		  /* 8223C094h */ case   13:  		/* bc 12, CR6_EQ, 1144 */
		/* 8223C094h case   13:*/		if ( regs.CR[6].eq ) { return 0x8223C50C;  }
		/* 8223C094h case   13:*/		return 0x8223C098;
		  /* 8223C098h */ case   14:  		/* lwz R11, <#[R31 + 228]> */
		/* 8223C098h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000E4) );
		/* 8223C098h case   14:*/		return 0x8223C09C;
		  /* 8223C09Ch */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8223C09Ch case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223C09Ch case   15:*/		return 0x8223C0A0;
		  /* 8223C0A0h */ case   16:  		/* bc 12, CR0_EQ, 448 */
		/* 8223C0A0h case   16:*/		if ( regs.CR[0].eq ) { return 0x8223C260;  }
		/* 8223C0A0h case   16:*/		return 0x8223C0A4;
		  /* 8223C0A4h */ case   17:  		/* lwz R11, <#[R31]> */
		/* 8223C0A4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223C0A4h case   17:*/		return 0x8223C0A8;
		  /* 8223C0A8h */ case   18:  		/* mr R3, R31 */
		/* 8223C0A8h case   18:*/		regs.R3 = regs.R31;
		/* 8223C0A8h case   18:*/		return 0x8223C0AC;
		  /* 8223C0ACh */ case   19:  		/* lwz R28, <#[R31 + 84]> */
		/* 8223C0ACh case   19:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000054) );
		/* 8223C0ACh case   19:*/		return 0x8223C0B0;
		  /* 8223C0B0h */ case   20:  		/* lwz R11, <#[R11 + 24]> */
		/* 8223C0B0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8223C0B0h case   20:*/		return 0x8223C0B4;
		  /* 8223C0B4h */ case   21:  		/* mtspr CTR, R11 */
		/* 8223C0B4h case   21:*/		regs.CTR = regs.R11;
		/* 8223C0B4h case   21:*/		return 0x8223C0B8;
		  /* 8223C0B8h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 8223C0B8h case   22:*/		if ( 1 ) { regs.LR = 0x8223C0BC; return (uint32)regs.CTR; }
		/* 8223C0B8h case   22:*/		return 0x8223C0BC;
		  /* 8223C0BCh */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223C0BCh case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223C0BCh case   23:*/		return 0x8223C0C0;
		  /* 8223C0C0h */ case   24:  		/* bc 12, CR0_EQ, 416 */
		/* 8223C0C0h case   24:*/		if ( regs.CR[0].eq ) { return 0x8223C260;  }
		/* 8223C0C0h case   24:*/		return 0x8223C0C4;
		  /* 8223C0C4h */ case   25:  		/* lwz R11, <#[R31]> */
		/* 8223C0C4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223C0C4h case   25:*/		return 0x8223C0C8;
		  /* 8223C0C8h */ case   26:  		/* mr R3, R31 */
		/* 8223C0C8h case   26:*/		regs.R3 = regs.R31;
		/* 8223C0C8h case   26:*/		return 0x8223C0CC;
		  /* 8223C0CCh */ case   27:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223C0CCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223C0CCh case   27:*/		return 0x8223C0D0;
		  /* 8223C0D0h */ case   28:  		/* mtspr CTR, R11 */
		/* 8223C0D0h case   28:*/		regs.CTR = regs.R11;
		/* 8223C0D0h case   28:*/		return 0x8223C0D4;
		  /* 8223C0D4h */ case   29:  		/* bcctrl 20, CR0_LT */
		/* 8223C0D4h case   29:*/		if ( 1 ) { regs.LR = 0x8223C0D8; return (uint32)regs.CTR; }
		/* 8223C0D4h case   29:*/		return 0x8223C0D8;
		  /* 8223C0D8h */ case   30:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223C0D8h case   30:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223C0D8h case   30:*/		return 0x8223C0DC;
		  /* 8223C0DCh */ case   31:  		/* bc 12, CR0_EQ, 388 */
		/* 8223C0DCh case   31:*/		if ( regs.CR[0].eq ) { return 0x8223C260;  }
		/* 8223C0DCh case   31:*/		return 0x8223C0E0;
		  /* 8223C0E0h */ case   32:  		/* cmpwi CR6, R28, 30 */
		/* 8223C0E0h case   32:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x0000001E);
		/* 8223C0E0h case   32:*/		return 0x8223C0E4;
		  /* 8223C0E4h */ case   33:  		/* bc 12, CR6_EQ, 28 */
		/* 8223C0E4h case   33:*/		if ( regs.CR[6].eq ) { return 0x8223C100;  }
		/* 8223C0E4h case   33:*/		return 0x8223C0E8;
		  /* 8223C0E8h */ case   34:  		/* cmpwi CR6, R28, 12 */
		/* 8223C0E8h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x0000000C);
		/* 8223C0E8h case   34:*/		return 0x8223C0EC;
		  /* 8223C0ECh */ case   35:  		/* bc 12, CR6_EQ, 20 */
		/* 8223C0ECh case   35:*/		if ( regs.CR[6].eq ) { return 0x8223C100;  }
		/* 8223C0ECh case   35:*/		return 0x8223C0F0;
		  /* 8223C0F0h */ case   36:  		/* cmpwi CR6, R28, 13 */
		/* 8223C0F0h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x0000000D);
		/* 8223C0F0h case   36:*/		return 0x8223C0F4;
		  /* 8223C0F4h */ case   37:  		/* bc 12, CR6_EQ, 12 */
		/* 8223C0F4h case   37:*/		if ( regs.CR[6].eq ) { return 0x8223C100;  }
		/* 8223C0F4h case   37:*/		return 0x8223C0F8;
		  /* 8223C0F8h */ case   38:  		/* cmpwi CR6, R28, 14 */
		/* 8223C0F8h case   38:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x0000000E);
		/* 8223C0F8h case   38:*/		return 0x8223C0FC;
		  /* 8223C0FCh */ case   39:  		/* bc 4, CR6_EQ, 356 */
		/* 8223C0FCh case   39:*/		if ( !regs.CR[6].eq ) { return 0x8223C260;  }
		/* 8223C0FCh case   39:*/		return 0x8223C100;
	}
	return 0x8223C100;
} // Block from 8223C060h-8223C100h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8223C100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C100);
		  /* 8223C100h */ case    0:  		/* lwz R11, <#[R21 + 12]> */
		/* 8223C100h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 8223C100h case    0:*/		return 0x8223C104;
		  /* 8223C104h */ case    1:  		/* li R4, 24 */
		/* 8223C104h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8223C104h case    1:*/		return 0x8223C108;
		  /* 8223C108h */ case    2:  		/* lwz R29, <#[R11 + 1456]> */
		/* 8223C108h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223C108h case    2:*/		return 0x8223C10C;
		  /* 8223C10Ch */ case    3:  		/* mr R3, R29 */
		/* 8223C10Ch case    3:*/		regs.R3 = regs.R29;
		/* 8223C10Ch case    3:*/		return 0x8223C110;
		  /* 8223C110h */ case    4:  		/* bl -130136 */
		/* 8223C110h case    4:*/		regs.LR = 0x8223C114; return 0x8221C4B8;
		/* 8223C110h case    4:*/		return 0x8223C114;
		  /* 8223C114h */ case    5:  		/* addi R30, R3, 4 */
		/* 8223C114h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x4);
		/* 8223C114h case    5:*/		return 0x8223C118;
		  /* 8223C118h */ case    6:  		/* stw R29, <#[R3]> */
		/* 8223C118h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 8223C118h case    6:*/		return 0x8223C11C;
		  /* 8223C11Ch */ case    7:  		/* addi R6, R1, 84 */
		/* 8223C11Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 8223C11Ch case    7:*/		return 0x8223C120;
		  /* 8223C120h */ case    8:  		/* addi R5, R1, 80 */
		/* 8223C120h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8223C120h case    8:*/		return 0x8223C124;
		  /* 8223C124h */ case    9:  		/* addi R4, R1, 88 */
		/* 8223C124h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 8223C124h case    9:*/		return 0x8223C128;
		  /* 8223C128h */ case   10:  		/* mr R3, R31 */
		/* 8223C128h case   10:*/		regs.R3 = regs.R31;
		/* 8223C128h case   10:*/		return 0x8223C12C;
		  /* 8223C12Ch */ case   11:  		/* stw R24, <#[R30 + 16]> */
		/* 8223C12Ch case   11:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R30 + 0x00000010) );
		/* 8223C12Ch case   11:*/		return 0x8223C130;
		  /* 8223C130h */ case   12:  		/* mr R24, R30 */
		/* 8223C130h case   12:*/		regs.R24 = regs.R30;
		/* 8223C130h case   12:*/		return 0x8223C134;
		  /* 8223C134h */ case   13:  		/* stw R31, <#[R30 + 4]> */
		/* 8223C134h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 8223C134h case   13:*/		return 0x8223C138;
		  /* 8223C138h */ case   14:  		/* stb R20, <#[R31 + 176]> */
		/* 8223C138h case   14:*/		cpu::mem::store8( regs, regs.R20, (uint32)(regs.R31 + 0x000000B0) );
		/* 8223C138h case   14:*/		return 0x8223C13C;
		  /* 8223C13Ch */ case   15:  		/* lwz R29, <#[R31 + 132]> */
		/* 8223C13Ch case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000084) );
		/* 8223C13Ch case   15:*/		return 0x8223C140;
		  /* 8223C140h */ case   16:  		/* bl 109112 */
		/* 8223C140h case   16:*/		regs.LR = 0x8223C144; return 0x82256B78;
		/* 8223C140h case   16:*/		return 0x8223C144;
		  /* 8223C144h */ case   17:  		/* lwz R11, <#[R1 + 80]> */
		/* 8223C144h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8223C144h case   17:*/		return 0x8223C148;
		  /* 8223C148h */ case   18:  		/* stw R11, <#[R30 + 8]> */
		/* 8223C148h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8223C148h case   18:*/		return 0x8223C14C;
		  /* 8223C14Ch */ case   19:  		/* lwz R11, <#[R1 + 84]> */
		/* 8223C14Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8223C14Ch case   19:*/		return 0x8223C150;
		  /* 8223C150h */ case   20:  		/* stw R11, <#[R30 + 12]> */
		/* 8223C150h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8223C150h case   20:*/		return 0x8223C154;
		  /* 8223C154h */ case   21:  		/* lwz R11, <#[R1 + 84]> */
		/* 8223C154h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8223C154h case   21:*/		return 0x8223C158;
		  /* 8223C158h */ case   22:  		/* cmpwi CR6, R11, 8 */
		/* 8223C158h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8223C158h case   22:*/		return 0x8223C15C;
		  /* 8223C15Ch */ case   23:  		/* bc 4, CR6_GT, 28 */
		/* 8223C15Ch case   23:*/		if ( !regs.CR[6].gt ) { return 0x8223C178;  }
		/* 8223C15Ch case   23:*/		return 0x8223C160;
		  /* 8223C160h */ case   24:  		/* mr R6, R18 */
		/* 8223C160h case   24:*/		regs.R6 = regs.R18;
		/* 8223C160h case   24:*/		return 0x8223C164;
		  /* 8223C164h */ case   25:  		/* mr R5, R15 */
		/* 8223C164h case   25:*/		regs.R5 = regs.R15;
		/* 8223C164h case   25:*/		return 0x8223C168;
		  /* 8223C168h */ case   26:  		/* mr R4, R19 */
		/* 8223C168h case   26:*/		regs.R4 = regs.R19;
		/* 8223C168h case   26:*/		return 0x8223C16C;
		  /* 8223C16Ch */ case   27:  		/* li R7, 3304 */
		/* 8223C16Ch case   27:*/		cpu::op::li<0>(regs,&regs.R7,0xCE8);
		/* 8223C16Ch case   27:*/		return 0x8223C170;
		  /* 8223C170h */ case   28:  		/* li R3, 0 */
		/* 8223C170h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223C170h case   28:*/		return 0x8223C174;
		  /* 8223C174h */ case   29:  		/* bl -935276 */
		/* 8223C174h case   29:*/		regs.LR = 0x8223C178; return 0x82157C08;
		/* 8223C174h case   29:*/		return 0x8223C178;
	}
	return 0x8223C178;
} // Block from 8223C100h-8223C178h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8223C178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C178);
		  /* 8223C178h */ case    0:  		/* mr R11, R25 */
		/* 8223C178h case    0:*/		regs.R11 = regs.R25;
		/* 8223C178h case    0:*/		return 0x8223C17C;
		  /* 8223C17Ch */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 8223C17Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8223C17Ch case    1:*/		return 0x8223C180;
		  /* 8223C180h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 8223C180h case    2:*/		if ( regs.CR[6].eq ) { return 0x8223C1C0;  }
		/* 8223C180h case    2:*/		return 0x8223C184;
		  /* 8223C184h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 8223C184h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8223C184h case    3:*/		return 0x8223C188;
		  /* 8223C188h */ case    4:  		/* lwz R9, <#[R1 + 88]> */
		/* 8223C188h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8223C188h case    4:*/		return 0x8223C18C;
		  /* 8223C18Ch */ case    5:  		/* cmplw CR6, R10, R9 */
		/* 8223C18Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8223C18Ch case    5:*/		return 0x8223C190;
		  /* 8223C190h */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 8223C190h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8223C1AC;  }
		/* 8223C190h case    6:*/		return 0x8223C194;
		  /* 8223C194h */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 8223C194h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8223C194h case    7:*/		return 0x8223C198;
		  /* 8223C198h */ case    8:  		/* cmpw CR6, R10, R28 */
		/* 8223C198h case    8:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R28);
		/* 8223C198h case    8:*/		return 0x8223C19C;
		  /* 8223C19Ch */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 8223C19Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8223C1AC;  }
		/* 8223C19Ch case    9:*/		return 0x8223C1A0;
		  /* 8223C1A0h */ case   10:  		/* lwz R10, <#[R11 + 8]> */
		/* 8223C1A0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8223C1A0h case   10:*/		return 0x8223C1A4;
		  /* 8223C1A4h */ case   11:  		/* cmplw CR6, R10, R29 */
		/* 8223C1A4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 8223C1A4h case   11:*/		return 0x8223C1A8;
		  /* 8223C1A8h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 8223C1A8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8223C1B8;  }
		/* 8223C1A8h case   12:*/		return 0x8223C1AC;
	}
	return 0x8223C1AC;
} // Block from 8223C178h-8223C1ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223C1ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C1AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C1AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C1AC);
		  /* 8223C1ACh */ case    0:  		/* lwz R11, <#[R11 + 44]> */
		/* 8223C1ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 8223C1ACh case    0:*/		return 0x8223C1B0;
		  /* 8223C1B0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8223C1B0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223C1B0h case    1:*/		return 0x8223C1B4;
		  /* 8223C1B4h */ case    2:  		/* bc 4, CR6_EQ, -48 */
		/* 8223C1B4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8223C184;  }
		/* 8223C1B4h case    2:*/		return 0x8223C1B8;
	}
	return 0x8223C1B8;
} // Block from 8223C1ACh-8223C1B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223C1B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C1B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C1B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C1B8);
		  /* 8223C1B8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8223C1B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223C1B8h case    0:*/		return 0x8223C1BC;
		  /* 8223C1BCh */ case    1:  		/* bc 4, CR6_EQ, 92 */
		/* 8223C1BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223C218;  }
		/* 8223C1BCh case    1:*/		return 0x8223C1C0;
	}
	return 0x8223C1C0;
} // Block from 8223C1B8h-8223C1C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223C1C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C1C0);
		  /* 8223C1C0h */ case    0:  		/* lwz R11, <#[R21 + 12]> */
		/* 8223C1C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 8223C1C0h case    0:*/		return 0x8223C1C4;
		  /* 8223C1C4h */ case    1:  		/* li R4, 52 */
		/* 8223C1C4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x34);
		/* 8223C1C4h case    1:*/		return 0x8223C1C8;
		  /* 8223C1C8h */ case    2:  		/* lwz R27, <#[R11 + 1456]> */
		/* 8223C1C8h case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223C1C8h case    2:*/		return 0x8223C1CC;
		  /* 8223C1CCh */ case    3:  		/* mr R3, R27 */
		/* 8223C1CCh case    3:*/		regs.R3 = regs.R27;
		/* 8223C1CCh case    3:*/		return 0x8223C1D0;
		  /* 8223C1D0h */ case    4:  		/* bl -130328 */
		/* 8223C1D0h case    4:*/		regs.LR = 0x8223C1D4; return 0x8221C4B8;
		/* 8223C1D0h case    4:*/		return 0x8223C1D4;
		  /* 8223C1D4h */ case    5:  		/* stw R27, <#[R3]> */
		/* 8223C1D4h case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000000) );
		/* 8223C1D4h case    5:*/		return 0x8223C1D8;
		  /* 8223C1D8h */ case    6:  		/* lwz R10, <#[R1 + 88]> */
		/* 8223C1D8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 8223C1D8h case    6:*/		return 0x8223C1DC;
		  /* 8223C1DCh */ case    7:  		/* addi R11, R3, 4 */
		/* 8223C1DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 8223C1DCh case    7:*/		return 0x8223C1E0;
		  /* 8223C1E0h */ case    8:  		/* stw R10, <#[R3 + 4]> */
		/* 8223C1E0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 8223C1E0h case    8:*/		return 0x8223C1E4;
		  /* 8223C1E4h */ case    9:  		/* stw R28, <#[R3 + 8]> */
		/* 8223C1E4h case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000008) );
		/* 8223C1E4h case    9:*/		return 0x8223C1E8;
		  /* 8223C1E8h */ case   10:  		/* stw R29, <#[R3 + 12]> */
		/* 8223C1E8h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223C1E8h case   10:*/		return 0x8223C1EC;
		  /* 8223C1ECh */ case   11:  		/* lwz R10, <#[R1 + 80]> */
		/* 8223C1ECh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8223C1ECh case   11:*/		return 0x8223C1F0;
		  /* 8223C1F0h */ case   12:  		/* stw R10, <#[R3 + 24]> */
		/* 8223C1F0h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000018) );
		/* 8223C1F0h case   12:*/		return 0x8223C1F4;
		  /* 8223C1F4h */ case   13:  		/* lwz R9, <#[R1 + 84]> */
		/* 8223C1F4h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8223C1F4h case   13:*/		return 0x8223C1F8;
		  /* 8223C1F8h */ case   14:  		/* lwz R10, <#[R1 + 80]> */
		/* 8223C1F8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8223C1F8h case   14:*/		return 0x8223C1FC;
		  /* 8223C1FCh */ case   15:  		/* add R10, R10, R9 */
		/* 8223C1FCh case   15:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8223C1FCh case   15:*/		return 0x8223C200;
		  /* 8223C200h */ case   16:  		/* stw R25, <#[R3 + 48]> */
		/* 8223C200h case   16:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000030) );
		/* 8223C200h case   16:*/		return 0x8223C204;
		  /* 8223C204h */ case   17:  		/* mr R25, R11 */
		/* 8223C204h case   17:*/		regs.R25 = regs.R11;
		/* 8223C204h case   17:*/		return 0x8223C208;
		  /* 8223C208h */ case   18:  		/* stw R31, <#[R3 + 16]> */
		/* 8223C208h case   18:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000010) );
		/* 8223C208h case   18:*/		return 0x8223C20C;
		  /* 8223C20Ch */ case   19:  		/* stw R20, <#[R3 + 20]> */
		/* 8223C20Ch case   19:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R3 + 0x00000014) );
		/* 8223C20Ch case   19:*/		return 0x8223C210;
		  /* 8223C210h */ case   20:  		/* stw R10, <#[R3 + 28]> */
		/* 8223C210h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 8223C210h case   20:*/		return 0x8223C214;
		  /* 8223C214h */ case   21:  		/* b 72 */
		/* 8223C214h case   21:*/		return 0x8223C25C;
		/* 8223C214h case   21:*/		return 0x8223C218;
	}
	return 0x8223C218;
} // Block from 8223C1C0h-8223C218h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8223C218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C218);
		  /* 8223C218h */ case    0:  		/* lwz R10, <#[R11 + 20]> */
		/* 8223C218h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 8223C218h case    0:*/		return 0x8223C21C;
		  /* 8223C21Ch */ case    1:  		/* lwz R9, <#[R1 + 80]> */
		/* 8223C21Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8223C21Ch case    1:*/		return 0x8223C220;
		  /* 8223C220h */ case    2:  		/* cmpw CR6, R9, R10 */
		/* 8223C220h case    2:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R10);
		/* 8223C220h case    2:*/		return 0x8223C224;
		  /* 8223C224h */ case    3:  		/* bc 4, CR6_LT, 16 */
		/* 8223C224h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8223C234;  }
		/* 8223C224h case    3:*/		return 0x8223C228;
		  /* 8223C228h */ case    4:  		/* stw R31, <#[R11 + 12]> */
		/* 8223C228h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 8223C228h case    4:*/		return 0x8223C22C;
		  /* 8223C22Ch */ case    5:  		/* lwz R10, <#[R1 + 80]> */
		/* 8223C22Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8223C22Ch case    5:*/		return 0x8223C230;
		  /* 8223C230h */ case    6:  		/* stw R10, <#[R11 + 20]> */
		/* 8223C230h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 8223C230h case    6:*/		return 0x8223C234;
	}
	return 0x8223C234;
} // Block from 8223C218h-8223C234h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223C234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C234);
		  /* 8223C234h */ case    0:  		/* lwz R10, <#[R1 + 80]> */
		/* 8223C234h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8223C234h case    0:*/		return 0x8223C238;
		  /* 8223C238h */ case    1:  		/* lwz R9, <#[R1 + 84]> */
		/* 8223C238h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8223C238h case    1:*/		return 0x8223C23C;
		  /* 8223C23Ch */ case    2:  		/* lwz R8, <#[R11 + 24]> */
		/* 8223C23Ch case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000018) );
		/* 8223C23Ch case    2:*/		return 0x8223C240;
		  /* 8223C240h */ case    3:  		/* add R10, R10, R9 */
		/* 8223C240h case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8223C240h case    3:*/		return 0x8223C244;
		  /* 8223C244h */ case    4:  		/* cmpw CR6, R10, R8 */
		/* 8223C244h case    4:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R8);
		/* 8223C244h case    4:*/		return 0x8223C248;
		  /* 8223C248h */ case    5:  		/* bc 4, CR6_GT, 8 */
		/* 8223C248h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8223C250;  }
		/* 8223C248h case    5:*/		return 0x8223C24C;
		  /* 8223C24Ch */ case    6:  		/* stw R10, <#[R11 + 24]> */
		/* 8223C24Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8223C24Ch case    6:*/		return 0x8223C250;
	}
	return 0x8223C250;
} // Block from 8223C234h-8223C250h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223C250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C250);
		  /* 8223C250h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 8223C250h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8223C250h case    0:*/		return 0x8223C254;
		  /* 8223C254h */ case    1:  		/* addi R10, R10, 1 */
		/* 8223C254h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8223C254h case    1:*/		return 0x8223C258;
		  /* 8223C258h */ case    2:  		/* stw R10, <#[R11 + 16]> */
		/* 8223C258h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8223C258h case    2:*/		return 0x8223C25C;
	}
	return 0x8223C25C;
} // Block from 8223C250h-8223C25Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223C25Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C25C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C25C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C25C);
		  /* 8223C25Ch */ case    0:  		/* stw R11, <#[R30]> */
		/* 8223C25Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223C25Ch case    0:*/		return 0x8223C260;
	}
	return 0x8223C260;
} // Block from 8223C25Ch-8223C260h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223C260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C260);
		  /* 8223C260h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 8223C260h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 8223C260h case    0:*/		return 0x8223C264;
		  /* 8223C264h */ case    1:  		/* lwz R11, <#[R31 + 8]> */
		/* 8223C264h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8223C264h case    1:*/		return 0x8223C268;
		  /* 8223C268h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8223C268h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223C268h case    2:*/		return 0x8223C26C;
		  /* 8223C26Ch */ case    3:  		/* bc 4, CR6_EQ, -468 */
		/* 8223C26Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8223C098;  }
		/* 8223C26Ch case    3:*/		return 0x8223C270;
		  /* 8223C270h */ case    4:  		/* cmplwi CR6, R25, 0 */
		/* 8223C270h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8223C270h case    4:*/		return 0x8223C274;
		  /* 8223C274h */ case    5:  		/* bc 12, CR6_EQ, 664 */
		/* 8223C274h case    5:*/		if ( regs.CR[6].eq ) { return 0x8223C50C;  }
		/* 8223C274h case    5:*/		return 0x8223C278;
		  /* 8223C278h */ case    6:  		/* cmplwi CR6, R24, 0 */
		/* 8223C278h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8223C278h case    6:*/		return 0x8223C27C;
		  /* 8223C27Ch */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 8223C27Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x8223C298;  }
		/* 8223C27Ch case    7:*/		return 0x8223C280;
		  /* 8223C280h */ case    8:  		/* mr R6, R18 */
		/* 8223C280h case    8:*/		regs.R6 = regs.R18;
		/* 8223C280h case    8:*/		return 0x8223C284;
		  /* 8223C284h */ case    9:  		/* lwz R5, <#[R1 + 92]> */
		/* 8223C284h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000005C) );
		/* 8223C284h case    9:*/		return 0x8223C288;
		  /* 8223C288h */ case   10:  		/* mr R4, R19 */
		/* 8223C288h case   10:*/		regs.R4 = regs.R19;
		/* 8223C288h case   10:*/		return 0x8223C28C;
		  /* 8223C28Ch */ case   11:  		/* li R7, 3348 */
		/* 8223C28Ch case   11:*/		cpu::op::li<0>(regs,&regs.R7,0xD14);
		/* 8223C28Ch case   11:*/		return 0x8223C290;
		  /* 8223C290h */ case   12:  		/* li R3, 0 */
		/* 8223C290h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223C290h case   12:*/		return 0x8223C294;
		  /* 8223C294h */ case   13:  		/* bl -935564 */
		/* 8223C294h case   13:*/		regs.LR = 0x8223C298; return 0x82157C08;
		/* 8223C294h case   13:*/		return 0x8223C298;
	}
	return 0x8223C298;
} // Block from 8223C260h-8223C298h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223C298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C298);
		  /* 8223C298h */ case    0:  		/* li R5, 3 */
		/* 8223C298h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223C298h case    0:*/		return 0x8223C29C;
		  /* 8223C29Ch */ case    1:  		/* lwz R3, <#[R21 + 172]> */
		/* 8223C29Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x000000AC) );
		/* 8223C29Ch case    1:*/		return 0x8223C2A0;
		  /* 8223C2A0h */ case    2:  		/* li R4, 31 */
		/* 8223C2A0h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1F);
		/* 8223C2A0h case    2:*/		return 0x8223C2A4;
		  /* 8223C2A4h */ case    3:  		/* mr R23, R22 */
		/* 8223C2A4h case    3:*/		regs.R23 = regs.R22;
		/* 8223C2A4h case    3:*/		return 0x8223C2A8;
		  /* 8223C2A8h */ case    4:  		/* bl 38248 */
		/* 8223C2A8h case    4:*/		regs.LR = 0x8223C2AC; return 0x82245810;
		/* 8223C2A8h case    4:*/		return 0x8223C2AC;
		  /* 8223C2ACh */ case    5:  		/* mr R26, R3 */
		/* 8223C2ACh case    5:*/		regs.R26 = regs.R3;
		/* 8223C2ACh case    5:*/		return 0x8223C2B0;
		  /* 8223C2B0h */ case    6:  		/* b 328 */
		/* 8223C2B0h case    6:*/		return 0x8223C3F8;
		/* 8223C2B0h case    6:*/		return 0x8223C2B4;
		  /* 8223C2B4h */ case    7:  		/* mr R31, R25 */
		/* 8223C2B4h case    7:*/		regs.R31 = regs.R25;
		/* 8223C2B4h case    7:*/		return 0x8223C2B8;
		  /* 8223C2B8h */ case    8:  		/* addi R27, R25, 44 */
		/* 8223C2B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R25,0x2C);
		/* 8223C2B8h case    8:*/		return 0x8223C2BC;
		  /* 8223C2BCh */ case    9:  		/* lwz R25, <#[R25 + 44]> */
		/* 8223C2BCh case    9:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R25 + 0x0000002C) );
		/* 8223C2BCh case    9:*/		return 0x8223C2C0;
		  /* 8223C2C0h */ case   10:  		/* lwz R11, <#[R31 + 16]> */
		/* 8223C2C0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8223C2C0h case   10:*/		return 0x8223C2C4;
		  /* 8223C2C4h */ case   11:  		/* stw R22, <#[R27]> */
		/* 8223C2C4h case   11:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R27 + 0x00000000) );
		/* 8223C2C4h case   11:*/		return 0x8223C2C8;
		  /* 8223C2C8h */ case   12:  		/* cmpwi CR6, R11, 0 */
		/* 8223C2C8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223C2C8h case   12:*/		return 0x8223C2CC;
		  /* 8223C2CCh */ case   13:  		/* bc 12, CR6_GT, 28 */
		/* 8223C2CCh case   13:*/		if ( regs.CR[6].gt ) { return 0x8223C2E8;  }
		/* 8223C2CCh case   13:*/		return 0x8223C2D0;
		  /* 8223C2D0h */ case   14:  		/* mr R6, R18 */
		/* 8223C2D0h case   14:*/		regs.R6 = regs.R18;
		/* 8223C2D0h case   14:*/		return 0x8223C2D4;
		  /* 8223C2D4h */ case   15:  		/* mr R5, R14 */
		/* 8223C2D4h case   15:*/		regs.R5 = regs.R14;
		/* 8223C2D4h case   15:*/		return 0x8223C2D8;
		  /* 8223C2D8h */ case   16:  		/* mr R4, R19 */
		/* 8223C2D8h case   16:*/		regs.R4 = regs.R19;
		/* 8223C2D8h case   16:*/		return 0x8223C2DC;
		  /* 8223C2DCh */ case   17:  		/* li R7, 3359 */
		/* 8223C2DCh case   17:*/		cpu::op::li<0>(regs,&regs.R7,0xD1F);
		/* 8223C2DCh case   17:*/		return 0x8223C2E0;
		  /* 8223C2E0h */ case   18:  		/* li R3, 0 */
		/* 8223C2E0h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223C2E0h case   18:*/		return 0x8223C2E4;
		  /* 8223C2E4h */ case   19:  		/* bl -935644 */
		/* 8223C2E4h case   19:*/		regs.LR = 0x8223C2E8; return 0x82157C08;
		/* 8223C2E4h case   19:*/		return 0x8223C2E8;
	}
	return 0x8223C2E8;
} // Block from 8223C298h-8223C2E8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8223C2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C2E8);
		  /* 8223C2E8h */ case    0:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223C2E8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223C2E8h case    0:*/		return 0x8223C2EC;
		  /* 8223C2ECh */ case    1:  		/* mr R5, R26 */
		/* 8223C2ECh case    1:*/		regs.R5 = regs.R26;
		/* 8223C2ECh case    1:*/		return 0x8223C2F0;
		  /* 8223C2F0h */ case    2:  		/* li R4, 0 */
		/* 8223C2F0h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223C2F0h case    2:*/		return 0x8223C2F4;
		  /* 8223C2F4h */ case    3:  		/* stw R3, <#[R31 + 28]> */
		/* 8223C2F4h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8223C2F4h case    3:*/		return 0x8223C2F8;
		  /* 8223C2F8h */ case    4:  		/* lwz R29, <#[R3 + 28]> */
		/* 8223C2F8h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000001C) );
		/* 8223C2F8h case    4:*/		return 0x8223C2FC;
		  /* 8223C2FCh */ case    5:  		/* lwz R28, <#[R3 + 128]> */
		/* 8223C2FCh case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000080) );
		/* 8223C2FCh case    5:*/		return 0x8223C300;
		  /* 8223C300h */ case    6:  		/* bl 106648 */
		/* 8223C300h case    6:*/		regs.LR = 0x8223C304; return 0x82256398;
		/* 8223C300h case    6:*/		return 0x8223C304;
		  /* 8223C304h */ case    7:  		/* lwz R11, <#[R17 + 8460]> */
		/* 8223C304h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x0000210C) );
		/* 8223C304h case    7:*/		return 0x8223C308;
		  /* 8223C308h */ case    8:  		/* lwz R10, <#[R31 + 28]> */
		/* 8223C308h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8223C308h case    8:*/		return 0x8223C30C;
		  /* 8223C30Ch */ case    9:  		/* mr R3, R26 */
		/* 8223C30Ch case    9:*/		regs.R3 = regs.R26;
		/* 8223C30Ch case    9:*/		return 0x8223C310;
		  /* 8223C310h */ case   10:  		/* stw R11, <#[R10 + 128]> */
		/* 8223C310h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000080) );
		/* 8223C310h case   10:*/		return 0x8223C314;
		  /* 8223C314h */ case   11:  		/* lwz R4, <#[R31 + 28]> */
		/* 8223C314h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 8223C314h case   11:*/		return 0x8223C318;
		  /* 8223C318h */ case   12:  		/* bl 98640 */
		/* 8223C318h case   12:*/		regs.LR = 0x8223C31C; return 0x82254468;
		/* 8223C318h case   12:*/		return 0x8223C31C;
		  /* 8223C31Ch */ case   13:  		/* lwz R11, <#[R21 + 12]> */
		/* 8223C31Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 8223C31Ch case   13:*/		return 0x8223C320;
		  /* 8223C320h */ case   14:  		/* lwz R30, <#[R11 + 1452]> */
		/* 8223C320h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x000005AC) );
		/* 8223C320h case   14:*/		return 0x8223C324;
		  /* 8223C324h */ case   15:  		/* li R4, 964 */
		/* 8223C324h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x3C4);
		/* 8223C324h case   15:*/		return 0x8223C328;
		  /* 8223C328h */ case   16:  		/* mr R3, R30 */
		/* 8223C328h case   16:*/		regs.R3 = regs.R30;
		/* 8223C328h case   16:*/		return 0x8223C32C;
		  /* 8223C32Ch */ case   17:  		/* bl -130676 */
		/* 8223C32Ch case   17:*/		regs.LR = 0x8223C330; return 0x8221C4B8;
		/* 8223C32Ch case   17:*/		return 0x8223C330;
		  /* 8223C330h */ case   18:  		/* mr R11, R3 */
		/* 8223C330h case   18:*/		regs.R11 = regs.R3;
		/* 8223C330h case   18:*/		return 0x8223C334;
		  /* 8223C334h */ case   19:  		/* addic. R3, R3, 4 */
		/* 8223C334h case   19:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 8223C334h case   19:*/		return 0x8223C338;
		  /* 8223C338h */ case   20:  		/* stw R30, <#[R11]> */
		/* 8223C338h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8223C338h case   20:*/		return 0x8223C33C;
		  /* 8223C33Ch */ case   21:  		/* bc 12, CR0_EQ, 24 */
		/* 8223C33Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x8223C354;  }
		/* 8223C33Ch case   21:*/		return 0x8223C340;
		  /* 8223C340h */ case   22:  		/* li R4, 128 */
		/* 8223C340h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x80);
		/* 8223C340h case   22:*/		return 0x8223C344;
		  /* 8223C344h */ case   23:  		/* lwz R5, <#[R21 + 12]> */
		/* 8223C344h case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R21 + 0x0000000C) );
		/* 8223C344h case   23:*/		return 0x8223C348;
		  /* 8223C348h */ case   24:  		/* bl 111104 */
		/* 8223C348h case   24:*/		regs.LR = 0x8223C34C; return 0x82257548;
		/* 8223C348h case   24:*/		return 0x8223C34C;
		  /* 8223C34Ch */ case   25:  		/* mr R30, R3 */
		/* 8223C34Ch case   25:*/		regs.R30 = regs.R3;
		/* 8223C34Ch case   25:*/		return 0x8223C350;
		  /* 8223C350h */ case   26:  		/* b 8 */
		/* 8223C350h case   26:*/		return 0x8223C358;
		/* 8223C350h case   26:*/		return 0x8223C354;
	}
	return 0x8223C354;
} // Block from 8223C2E8h-8223C354h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8223C354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C354);
		  /* 8223C354h */ case    0:  		/* mr R30, R22 */
		/* 8223C354h case    0:*/		regs.R30 = regs.R22;
		/* 8223C354h case    0:*/		return 0x8223C358;
	}
	return 0x8223C358;
} // Block from 8223C354h-8223C358h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223C358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C358);
		  /* 8223C358h */ case    0:  		/* mr R5, R29 */
		/* 8223C358h case    0:*/		regs.R5 = regs.R29;
		/* 8223C358h case    0:*/		return 0x8223C35C;
		  /* 8223C35Ch */ case    1:  		/* li R4, 0 */
		/* 8223C35Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223C35Ch case    1:*/		return 0x8223C360;
		  /* 8223C360h */ case    2:  		/* mr R3, R30 */
		/* 8223C360h case    2:*/		regs.R3 = regs.R30;
		/* 8223C360h case    2:*/		return 0x8223C364;
		  /* 8223C364h */ case    3:  		/* bl 106548 */
		/* 8223C364h case    3:*/		regs.LR = 0x8223C368; return 0x82256398;
		/* 8223C364h case    3:*/		return 0x8223C368;
		  /* 8223C368h */ case    4:  		/* stw R28, <#[R30 + 128]> */
		/* 8223C368h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000080) );
		/* 8223C368h case    4:*/		return 0x8223C36C;
		  /* 8223C36Ch */ case    5:  		/* mr R5, R26 */
		/* 8223C36Ch case    5:*/		regs.R5 = regs.R26;
		/* 8223C36Ch case    5:*/		return 0x8223C370;
		  /* 8223C370h */ case    6:  		/* li R4, 1 */
		/* 8223C370h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223C370h case    6:*/		return 0x8223C374;
		  /* 8223C374h */ case    7:  		/* mr R3, R30 */
		/* 8223C374h case    7:*/		regs.R3 = regs.R30;
		/* 8223C374h case    7:*/		return 0x8223C378;
		  /* 8223C378h */ case    8:  		/* bl 106528 */
		/* 8223C378h case    8:*/		regs.LR = 0x8223C37C; return 0x82256398;
		/* 8223C378h case    8:*/		return 0x8223C37C;
		  /* 8223C37Ch */ case    9:  		/* mr R4, R30 */
		/* 8223C37Ch case    9:*/		regs.R4 = regs.R30;
		/* 8223C37Ch case    9:*/		return 0x8223C380;
		  /* 8223C380h */ case   10:  		/* mr R3, R29 */
		/* 8223C380h case   10:*/		regs.R3 = regs.R29;
		/* 8223C380h case   10:*/		return 0x8223C384;
		  /* 8223C384h */ case   11:  		/* bl 98532 */
		/* 8223C384h case   11:*/		regs.LR = 0x8223C388; return 0x82254468;
		/* 8223C384h case   11:*/		return 0x8223C388;
		  /* 8223C388h */ case   12:  		/* mr R5, R30 */
		/* 8223C388h case   12:*/		regs.R5 = regs.R30;
		/* 8223C388h case   12:*/		return 0x8223C38C;
		  /* 8223C38Ch */ case   13:  		/* li R4, 1 */
		/* 8223C38Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223C38Ch case   13:*/		return 0x8223C390;
		  /* 8223C390h */ case   14:  		/* mr R3, R26 */
		/* 8223C390h case   14:*/		regs.R3 = regs.R26;
		/* 8223C390h case   14:*/		return 0x8223C394;
		  /* 8223C394h */ case   15:  		/* bl 98596 */
		/* 8223C394h case   15:*/		regs.LR = 0x8223C398; return 0x822544B8;
		/* 8223C394h case   15:*/		return 0x8223C398;
		  /* 8223C398h */ case   16:  		/* mr R5, R30 */
		/* 8223C398h case   16:*/		regs.R5 = regs.R30;
		/* 8223C398h case   16:*/		return 0x8223C39C;
		  /* 8223C39Ch */ case   17:  		/* mr R3, R16 */
		/* 8223C39Ch case   17:*/		regs.R3 = regs.R16;
		/* 8223C39Ch case   17:*/		return 0x8223C3A0;
		  /* 8223C3A0h */ case   18:  		/* lwz R4, <#[R31 + 28]> */
		/* 8223C3A0h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 8223C3A0h case   18:*/		return 0x8223C3A4;
		  /* 8223C3A4h */ case   19:  		/* bl 117788 */
		/* 8223C3A4h case   19:*/		regs.LR = 0x8223C3A8; return 0x82258FC0;
		/* 8223C3A4h case   19:*/		return 0x8223C3A8;
		  /* 8223C3A8h */ case   20:  		/* lwz R11, <#[R31 + 28]> */
		/* 8223C3A8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8223C3A8h case   20:*/		return 0x8223C3AC;
		  /* 8223C3ACh */ case   21:  		/* stw R30, <#[R11 + 180]> */
		/* 8223C3ACh case   21:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x000000B4) );
		/* 8223C3ACh case   21:*/		return 0x8223C3B0;
		  /* 8223C3B0h */ case   22:  		/* lwz R10, <#[R31 + 28]> */
		/* 8223C3B0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8223C3B0h case   22:*/		return 0x8223C3B4;
		  /* 8223C3B4h */ case   23:  		/* stw R30, <#[R31 + 32]> */
		/* 8223C3B4h case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 8223C3B4h case   23:*/		return 0x8223C3B8;
		  /* 8223C3B8h */ case   24:  		/* stw R22, <#[R31 + 40]> */
		/* 8223C3B8h case   24:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000028) );
		/* 8223C3B8h case   24:*/		return 0x8223C3BC;
		  /* 8223C3BCh */ case   25:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223C3BCh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223C3BCh case   25:*/		return 0x8223C3C0;
		  /* 8223C3C0h */ case   26:  		/* stw R11, <#[R31 + 36]> */
		/* 8223C3C0h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8223C3C0h case   26:*/		return 0x8223C3C4;
		  /* 8223C3C4h */ case   27:  		/* stw R22, <#[R10 + 184]> */
		/* 8223C3C4h case   27:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R10 + 0x000000B8) );
		/* 8223C3C4h case   27:*/		return 0x8223C3C8;
		  /* 8223C3C8h */ case   28:  		/* lwz R10, <#[R31 + 20]> */
		/* 8223C3C8h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223C3C8h case   28:*/		return 0x8223C3CC;
		  /* 8223C3CCh */ case   29:  		/* lwz R11, <#[R31 + 24]> */
		/* 8223C3CCh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8223C3CCh case   29:*/		return 0x8223C3D0;
		  /* 8223C3D0h */ case   30:  		/* subf R10, R10, R11 */
		/* 8223C3D0h case   30:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8223C3D0h case   30:*/		return 0x8223C3D4;
		  /* 8223C3D4h */ case   31:  		/* cmpwi CR6, R10, 8 */
		/* 8223C3D4h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000008);
		/* 8223C3D4h case   31:*/		return 0x8223C3D8;
		  /* 8223C3D8h */ case   32:  		/* bc 4, CR6_GT, 32 */
		/* 8223C3D8h case   32:*/		if ( !regs.CR[6].gt ) { return 0x8223C3F8;  }
		/* 8223C3D8h case   32:*/		return 0x8223C3DC;
		  /* 8223C3DCh */ case   33:  		/* addi R11, R11, 1 */
		/* 8223C3DCh case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223C3DCh case   33:*/		return 0x8223C3E0;
		  /* 8223C3E0h */ case   34:  		/* stw R23, <#[R27]> */
		/* 8223C3E0h case   34:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R27 + 0x00000000) );
		/* 8223C3E0h case   34:*/		return 0x8223C3E4;
		  /* 8223C3E4h */ case   35:  		/* stw R22, <#[R31 + 12]> */
		/* 8223C3E4h case   35:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223C3E4h case   35:*/		return 0x8223C3E8;
		  /* 8223C3E8h */ case   36:  		/* mr R23, R31 */
		/* 8223C3E8h case   36:*/		regs.R23 = regs.R31;
		/* 8223C3E8h case   36:*/		return 0x8223C3EC;
		  /* 8223C3ECh */ case   37:  		/* stw R22, <#[R31 + 16]> */
		/* 8223C3ECh case   37:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000010) );
		/* 8223C3ECh case   37:*/		return 0x8223C3F0;
		  /* 8223C3F0h */ case   38:  		/* stw R11, <#[R31 + 20]> */
		/* 8223C3F0h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223C3F0h case   38:*/		return 0x8223C3F4;
		  /* 8223C3F4h */ case   39:  		/* stw R22, <#[R31 + 24]> */
		/* 8223C3F4h case   39:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000018) );
		/* 8223C3F4h case   39:*/		return 0x8223C3F8;
	}
	return 0x8223C3F8;
} // Block from 8223C358h-8223C3F8h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8223C3F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C3F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C3F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C3F8);
		  /* 8223C3F8h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8223C3F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8223C3F8h case    0:*/		return 0x8223C3FC;
		  /* 8223C3FCh */ case    1:  		/* bc 4, CR6_EQ, -328 */
		/* 8223C3FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223C2B4;  }
		/* 8223C3FCh case    1:*/		return 0x8223C400;
		  /* 8223C400h */ case    2:  		/* mr R29, R22 */
		/* 8223C400h case    2:*/		regs.R29 = regs.R22;
		/* 8223C400h case    2:*/		return 0x8223C404;
		  /* 8223C404h */ case    3:  		/* b 240 */
		/* 8223C404h case    3:*/		return 0x8223C4F4;
		/* 8223C404h case    3:*/		return 0x8223C408;
		  /* 8223C408h */ case    4:  		/* addi R6, R24, 16 */
		/* 8223C408h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R24,0x10);
		/* 8223C408h case    4:*/		return 0x8223C40C;
		  /* 8223C40Ch */ case    5:  		/* lwz R31, <#[R24]> */
		/* 8223C40Ch case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R24 + 0x00000000) );
		/* 8223C40Ch case    5:*/		return 0x8223C410;
		  /* 8223C410h */ case    6:  		/* mr R30, R24 */
		/* 8223C410h case    6:*/		regs.R30 = regs.R24;
		/* 8223C410h case    6:*/		return 0x8223C414;
		  /* 8223C414h */ case    7:  		/* lwz R24, <#[R24 + 16]> */
		/* 8223C414h case    7:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R24 + 0x00000010) );
		/* 8223C414h case    7:*/		return 0x8223C418;
		  /* 8223C418h */ case    8:  		/* stw R22, <#[R6]> */
		/* 8223C418h case    8:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R6 + 0x00000000) );
		/* 8223C418h case    8:*/		return 0x8223C41C;
		  /* 8223C41Ch */ case    9:  		/* lwz R10, <#[R30 + 8]> */
		/* 8223C41Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 8223C41Ch case    9:*/		return 0x8223C420;
		  /* 8223C420h */ case   10:  		/* lwz R7, <#[R30 + 12]> */
		/* 8223C420h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x0000000C) );
		/* 8223C420h case   10:*/		return 0x8223C424;
		  /* 8223C424h */ case   11:  		/* lwz R8, <#[R30 + 4]> */
		/* 8223C424h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 8223C424h case   11:*/		return 0x8223C428;
		  /* 8223C428h */ case   12:  		/* lwz R9, <#[R31 + 28]> */
		/* 8223C428h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 8223C428h case   12:*/		return 0x8223C42C;
		  /* 8223C42Ch */ case   13:  		/* cmplw CR6, R8, R9 */
		/* 8223C42Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 8223C42Ch case   13:*/		return 0x8223C430;
		  /* 8223C430h */ case   14:  		/* lwz R11, <#[R31 + 36]> */
		/* 8223C430h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8223C430h case   14:*/		return 0x8223C434;
		  /* 8223C434h */ case   15:  		/* subf R11, R11, R10 */
		/* 8223C434h case   15:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223C434h case   15:*/		return 0x8223C438;
		  /* 8223C438h */ case   16:  		/* add R11, R11, R7 */
		/* 8223C438h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 8223C438h case   16:*/		return 0x8223C43C;
		  /* 8223C43Ch */ case   17:  		/* bc 12, CR6_EQ, 164 */
		/* 8223C43Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8223C4E0;  }
		/* 8223C43Ch case   17:*/		return 0x8223C440;
		  /* 8223C440h */ case   18:  		/* cmpwi CR6, R11, 8 */
		/* 8223C440h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8223C440h case   18:*/		return 0x8223C444;
		  /* 8223C444h */ case   19:  		/* bc 12, CR6_GT, 80 */
		/* 8223C444h case   19:*/		if ( regs.CR[6].gt ) { return 0x8223C494;  }
		/* 8223C444h case   19:*/		return 0x8223C448;
		  /* 8223C448h */ case   20:  		/* lwz R10, <#[R31 + 40]> */
		/* 8223C448h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 8223C448h case   20:*/		return 0x8223C44C;
		  /* 8223C44Ch */ case   21:  		/* cmpw CR6, R10, R11 */
		/* 8223C44Ch case   21:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 8223C44Ch case   21:*/		return 0x8223C450;
		  /* 8223C450h */ case   22:  		/* bc 4, CR6_LT, 12 */
		/* 8223C450h case   22:*/		if ( !regs.CR[6].lt ) { return 0x8223C45C;  }
		/* 8223C450h case   22:*/		return 0x8223C454;
		  /* 8223C454h */ case   23:  		/* stw R11, <#[R31 + 40]> */
		/* 8223C454h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8223C454h case   23:*/		return 0x8223C458;
		  /* 8223C458h */ case   24:  		/* stw R11, <#[R9 + 184]> */
		/* 8223C458h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x000000B8) );
		/* 8223C458h case   24:*/		return 0x8223C45C;
	}
	return 0x8223C45C;
} // Block from 8223C3F8h-8223C45Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8223C45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C45C);
		  /* 8223C45Ch */ case    0:  		/* lwz R3, <#[R30 + 4]> */
		/* 8223C45Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 8223C45Ch case    0:*/		return 0x8223C460;
		  /* 8223C460h */ case    1:  		/* bl 95144 */
		/* 8223C460h case    1:*/		regs.LR = 0x8223C464; return 0x82253808;
		/* 8223C460h case    1:*/		return 0x8223C464;
		  /* 8223C464h */ case    2:  		/* lwz R4, <#[R31 + 32]> */
		/* 8223C464h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000020) );
		/* 8223C464h case    2:*/		return 0x8223C468;
		  /* 8223C468h */ case    3:  		/* lwz R3, <#[R30 + 4]> */
		/* 8223C468h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 8223C468h case    3:*/		return 0x8223C46C;
		  /* 8223C46Ch */ case    4:  		/* bl 95100 */
		/* 8223C46Ch case    4:*/		regs.LR = 0x8223C470; return 0x822537E8;
		/* 8223C46Ch case    4:*/		return 0x8223C470;
		  /* 8223C470h */ case    5:  		/* mr R4, R26 */
		/* 8223C470h case    5:*/		regs.R4 = regs.R26;
		/* 8223C470h case    5:*/		return 0x8223C474;
		  /* 8223C474h */ case    6:  		/* lwz R3, <#[R30 + 4]> */
		/* 8223C474h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 8223C474h case    6:*/		return 0x8223C478;
		  /* 8223C478h */ case    7:  		/* bl 109040 */
		/* 8223C478h case    7:*/		regs.LR = 0x8223C47C; return 0x82256E68;
		/* 8223C478h case    7:*/		return 0x8223C47C;
		  /* 8223C47Ch */ case    8:  		/* lwz R11, <#[R30 + 4]> */
		/* 8223C47Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8223C47Ch case    8:*/		return 0x8223C480;
		  /* 8223C480h */ case    9:  		/* mr R3, R26 */
		/* 8223C480h case    9:*/		regs.R3 = regs.R26;
		/* 8223C480h case    9:*/		return 0x8223C484;
		  /* 8223C484h */ case   10:  		/* mr R5, R11 */
		/* 8223C484h case   10:*/		regs.R5 = regs.R11;
		/* 8223C484h case   10:*/		return 0x8223C488;
		  /* 8223C488h */ case   11:  		/* lwz R4, <#[R11 + 20]> */
		/* 8223C488h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000014) );
		/* 8223C488h case   11:*/		return 0x8223C48C;
		  /* 8223C48Ch */ case   12:  		/* bl 98348 */
		/* 8223C48Ch case   12:*/		regs.LR = 0x8223C490; return 0x822544B8;
		/* 8223C48Ch case   12:*/		return 0x8223C490;
		  /* 8223C490h */ case   13:  		/* b 100 */
		/* 8223C490h case   13:*/		return 0x8223C4F4;
		/* 8223C490h case   13:*/		return 0x8223C494;
	}
	return 0x8223C494;
} // Block from 8223C45Ch-8223C494h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223C494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C494);
		  /* 8223C494h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223C494h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223C494h case    0:*/		return 0x8223C498;
		  /* 8223C498h */ case    1:  		/* cmpw CR6, R10, R11 */
		/* 8223C498h case    1:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 8223C498h case    1:*/		return 0x8223C49C;
		  /* 8223C49Ch */ case    2:  		/* bc 4, CR6_LT, 16 */
		/* 8223C49Ch case    2:*/		if ( !regs.CR[6].lt ) { return 0x8223C4AC;  }
		/* 8223C49Ch case    2:*/		return 0x8223C4A0;
		  /* 8223C4A0h */ case    3:  		/* stw R8, <#[R31 + 12]> */
		/* 8223C4A0h case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223C4A0h case    3:*/		return 0x8223C4A4;
		  /* 8223C4A4h */ case    4:  		/* lwz R11, <#[R30 + 8]> */
		/* 8223C4A4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8223C4A4h case    4:*/		return 0x8223C4A8;
		  /* 8223C4A8h */ case    5:  		/* stw R11, <#[R31 + 20]> */
		/* 8223C4A8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223C4A8h case    5:*/		return 0x8223C4AC;
	}
	return 0x8223C4AC;
} // Block from 8223C494h-8223C4ACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223C4ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C4AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C4AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C4AC);
		  /* 8223C4ACh */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8223C4ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8223C4ACh case    0:*/		return 0x8223C4B0;
		  /* 8223C4B0h */ case    1:  		/* lwz R10, <#[R30 + 12]> */
		/* 8223C4B0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 8223C4B0h case    1:*/		return 0x8223C4B4;
		  /* 8223C4B4h */ case    2:  		/* lwz R9, <#[R31 + 24]> */
		/* 8223C4B4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 8223C4B4h case    2:*/		return 0x8223C4B8;
		  /* 8223C4B8h */ case    3:  		/* add R11, R11, R10 */
		/* 8223C4B8h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223C4B8h case    3:*/		return 0x8223C4BC;
		  /* 8223C4BCh */ case    4:  		/* cmpw CR6, R11, R9 */
		/* 8223C4BCh case    4:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 8223C4BCh case    4:*/		return 0x8223C4C0;
		  /* 8223C4C0h */ case    5:  		/* bc 4, CR6_GT, 8 */
		/* 8223C4C0h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8223C4C8;  }
		/* 8223C4C0h case    5:*/		return 0x8223C4C4;
		  /* 8223C4C4h */ case    6:  		/* stw R11, <#[R31 + 24]> */
		/* 8223C4C4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8223C4C4h case    6:*/		return 0x8223C4C8;
	}
	return 0x8223C4C8;
} // Block from 8223C4ACh-8223C4C8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223C4C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C4C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C4C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C4C8);
		  /* 8223C4C8h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8223C4C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8223C4C8h case    0:*/		return 0x8223C4CC;
		  /* 8223C4CCh */ case    1:  		/* addi R11, R11, 1 */
		/* 8223C4CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223C4CCh case    1:*/		return 0x8223C4D0;
		  /* 8223C4D0h */ case    2:  		/* stw R11, <#[R31 + 16]> */
		/* 8223C4D0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8223C4D0h case    2:*/		return 0x8223C4D4;
		  /* 8223C4D4h */ case    3:  		/* stw R29, <#[R6]> */
		/* 8223C4D4h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R6 + 0x00000000) );
		/* 8223C4D4h case    3:*/		return 0x8223C4D8;
		  /* 8223C4D8h */ case    4:  		/* mr R29, R30 */
		/* 8223C4D8h case    4:*/		regs.R29 = regs.R30;
		/* 8223C4D8h case    4:*/		return 0x8223C4DC;
		  /* 8223C4DCh */ case    5:  		/* b 24 */
		/* 8223C4DCh case    5:*/		return 0x8223C4F4;
		/* 8223C4DCh case    5:*/		return 0x8223C4E0;
	}
	return 0x8223C4E0;
} // Block from 8223C4C8h-8223C4E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223C4E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C4E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C4E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C4E0);
		  /* 8223C4E0h */ case    0:  		/* lwz R10, <#[R31 + 40]> */
		/* 8223C4E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 8223C4E0h case    0:*/		return 0x8223C4E4;
		  /* 8223C4E4h */ case    1:  		/* cmpw CR6, R10, R11 */
		/* 8223C4E4h case    1:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 8223C4E4h case    1:*/		return 0x8223C4E8;
		  /* 8223C4E8h */ case    2:  		/* bc 4, CR6_LT, 12 */
		/* 8223C4E8h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8223C4F4;  }
		/* 8223C4E8h case    2:*/		return 0x8223C4EC;
		  /* 8223C4ECh */ case    3:  		/* stw R11, <#[R31 + 40]> */
		/* 8223C4ECh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8223C4ECh case    3:*/		return 0x8223C4F0;
		  /* 8223C4F0h */ case    4:  		/* stw R11, <#[R9 + 184]> */
		/* 8223C4F0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x000000B8) );
		/* 8223C4F0h case    4:*/		return 0x8223C4F4;
	}
	return 0x8223C4F4;
} // Block from 8223C4E0h-8223C4F4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223C4F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C4F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C4F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C4F4);
		  /* 8223C4F4h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8223C4F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8223C4F4h case    0:*/		return 0x8223C4F8;
		  /* 8223C4F8h */ case    1:  		/* bc 4, CR6_EQ, -240 */
		/* 8223C4F8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223C408;  }
		/* 8223C4F8h case    1:*/		return 0x8223C4FC;
		  /* 8223C4FCh */ case    2:  		/* mr R25, R23 */
		/* 8223C4FCh case    2:*/		regs.R25 = regs.R23;
		/* 8223C4FCh case    2:*/		return 0x8223C500;
		  /* 8223C500h */ case    3:  		/* mr R24, R29 */
		/* 8223C500h case    3:*/		regs.R24 = regs.R29;
		/* 8223C500h case    3:*/		return 0x8223C504;
		  /* 8223C504h */ case    4:  		/* cmplwi CR6, R23, 0 */
		/* 8223C504h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8223C504h case    4:*/		return 0x8223C508;
		  /* 8223C508h */ case    5:  		/* bc 4, CR6_EQ, -656 */
		/* 8223C508h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8223C278;  }
		/* 8223C508h case    5:*/		return 0x8223C50C;
	}
	return 0x8223C50C;
} // Block from 8223C4F4h-8223C50Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223C50Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C50C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C50C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C50C);
		  /* 8223C50Ch */ case    0:  		/* lwz R16, <#[R16 + 8]> */
		/* 8223C50Ch case    0:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R16 + 0x00000008) );
		/* 8223C50Ch case    0:*/		return 0x8223C510;
		  /* 8223C510h */ case    1:  		/* lwz R11, <#[R16 + 8]> */
		/* 8223C510h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 8223C510h case    1:*/		return 0x8223C514;
		  /* 8223C514h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8223C514h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223C514h case    2:*/		return 0x8223C518;
		  /* 8223C518h */ case    3:  		/* bc 4, CR6_EQ, -1176 */
		/* 8223C518h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8223C080;  }
		/* 8223C518h case    3:*/		return 0x8223C51C;
	}
	return 0x8223C51C;
} // Block from 8223C50Ch-8223C51Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223C51Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C51C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C51C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C51C);
		  /* 8223C51Ch */ case    0:  		/* addi R1, R1, 256 */
		/* 8223C51Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 8223C51Ch case    0:*/		return 0x8223C520;
		  /* 8223C520h */ case    1:  		/* b -1749680 */
		/* 8223C520h case    1:*/		return 0x82091270;
		/* 8223C520h case    1:*/		return 0x8223C524;
		  /* 8223C524h */ case    2:  		/* nop */
		/* 8223C524h case    2:*/		cpu::op::nop();
		/* 8223C524h case    2:*/		return 0x8223C528;
	}
	return 0x8223C528;
} // Block from 8223C51Ch-8223C528h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223C528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C528);
		  /* 8223C528h */ case    0:  		/* mfspr R12, LR */
		/* 8223C528h case    0:*/		regs.R12 = regs.LR;
		/* 8223C528h case    0:*/		return 0x8223C52C;
		  /* 8223C52Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223C52Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C52Ch case    1:*/		return 0x8223C530;
		  /* 8223C530h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223C530h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223C530h case    2:*/		return 0x8223C534;
		  /* 8223C534h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223C534h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C534h case    3:*/		return 0x8223C538;
		  /* 8223C538h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223C538h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223C538h case    4:*/		return 0x8223C53C;
		  /* 8223C53Ch */ case    5:  		/* lwz R30, <#[R3 + 12]> */
		/* 8223C53Ch case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223C53Ch case    5:*/		return 0x8223C540;
		  /* 8223C540h */ case    6:  		/* mr R31, R3 */
		/* 8223C540h case    6:*/		regs.R31 = regs.R3;
		/* 8223C540h case    6:*/		return 0x8223C544;
		  /* 8223C544h */ case    7:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223C544h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223C544h case    7:*/		return 0x8223C548;
		  /* 8223C548h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 8223C548h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223C548h case    8:*/		return 0x8223C54C;
		  /* 8223C54Ch */ case    9:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223C54Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223C54Ch case    9:*/		return 0x8223C550;
		  /* 8223C550h */ case   10:  		/* mtspr CTR, R11 */
		/* 8223C550h case   10:*/		regs.CTR = regs.R11;
		/* 8223C550h case   10:*/		return 0x8223C554;
		  /* 8223C554h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8223C554h case   11:*/		if ( 1 ) { regs.LR = 0x8223C558; return (uint32)regs.CTR; }
		/* 8223C554h case   11:*/		return 0x8223C558;
		  /* 8223C558h */ case   12:  		/* lis R11, -32222 */
		/* 8223C558h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223C558h case   12:*/		return 0x8223C55C;
		  /* 8223C55Ch */ case   13:  		/* mr R5, R3 */
		/* 8223C55Ch case   13:*/		regs.R5 = regs.R3;
		/* 8223C55Ch case   13:*/		return 0x8223C560;
		  /* 8223C560h */ case   14:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223C560h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223C560h case   14:*/		return 0x8223C564;
		  /* 8223C564h */ case   15:  		/* li R4, 0 */
		/* 8223C564h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223C564h case   15:*/		return 0x8223C568;
		  /* 8223C568h */ case   16:  		/* addi R6, R11, -12392 */
		/* 8223C568h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223C568h case   16:*/		return 0x8223C56C;
		  /* 8223C56Ch */ case   17:  		/* mr R7, R30 */
		/* 8223C56Ch case   17:*/		regs.R7 = regs.R30;
		/* 8223C56Ch case   17:*/		return 0x8223C570;
		  /* 8223C570h */ case   18:  		/* bl -49136 */
		/* 8223C570h case   18:*/		regs.LR = 0x8223C574; return 0x82230580;
		/* 8223C570h case   18:*/		return 0x8223C574;
		  /* 8223C574h */ case   19:  		/* cmpwi CR6, R3, 1 */
		/* 8223C574h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223C574h case   19:*/		return 0x8223C578;
		  /* 8223C578h */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 8223C578h case   20:*/		if ( regs.CR[6].eq ) { return 0x8223C5AC;  }
		/* 8223C578h case   20:*/		return 0x8223C57C;
		  /* 8223C57Ch */ case   21:  		/* cmpwi CR6, R3, 3 */
		/* 8223C57Ch case   21:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8223C57Ch case   21:*/		return 0x8223C580;
		  /* 8223C580h */ case   22:  		/* bc 4, CR6_EQ, 52 */
		/* 8223C580h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8223C5B4;  }
		/* 8223C580h case   22:*/		return 0x8223C584;
		  /* 8223C584h */ case   23:  		/* lis R11, -32252 */
		/* 8223C584h case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223C584h case   23:*/		return 0x8223C588;
		  /* 8223C588h */ case   24:  		/* lis R10, -32255 */
		/* 8223C588h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8223C588h case   24:*/		return 0x8223C58C;
		  /* 8223C58Ch */ case   25:  		/* lis R9, -32253 */
		/* 8223C58Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223C58Ch case   25:*/		return 0x8223C590;
		  /* 8223C590h */ case   26:  		/* addi R6, R11, 8520 */
		/* 8223C590h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 8223C590h case   26:*/		return 0x8223C594;
		  /* 8223C594h */ case   27:  		/* addi R5, R10, 5216 */
		/* 8223C594h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 8223C594h case   27:*/		return 0x8223C598;
		  /* 8223C598h */ case   28:  		/* addi R4, R9, 27460 */
		/* 8223C598h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223C598h case   28:*/		return 0x8223C59C;
		  /* 8223C59Ch */ case   29:  		/* li R7, 1054 */
		/* 8223C59Ch case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x41E);
		/* 8223C59Ch case   29:*/		return 0x8223C5A0;
		  /* 8223C5A0h */ case   30:  		/* li R3, 0 */
		/* 8223C5A0h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223C5A0h case   30:*/		return 0x8223C5A4;
		  /* 8223C5A4h */ case   31:  		/* bl -936348 */
		/* 8223C5A4h case   31:*/		regs.LR = 0x8223C5A8; return 0x82157C08;
		/* 8223C5A4h case   31:*/		return 0x8223C5A8;
		  /* 8223C5A8h */ case   32:  		/* b 12 */
		/* 8223C5A8h case   32:*/		return 0x8223C5B4;
		/* 8223C5A8h case   32:*/		return 0x8223C5AC;
	}
	return 0x8223C5AC;
} // Block from 8223C528h-8223C5ACh (33 instructions)

//////////////////////////////////////////////////////
// Block at 8223C5ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C5AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C5AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C5AC);
		  /* 8223C5ACh */ case    0:  		/* mr R3, R31 */
		/* 8223C5ACh case    0:*/		regs.R3 = regs.R31;
		/* 8223C5ACh case    0:*/		return 0x8223C5B0;
		  /* 8223C5B0h */ case    1:  		/* bl -10704 */
		/* 8223C5B0h case    1:*/		regs.LR = 0x8223C5B4; return 0x82239BE0;
		/* 8223C5B0h case    1:*/		return 0x8223C5B4;
	}
	return 0x8223C5B4;
} // Block from 8223C5ACh-8223C5B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223C5B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C5B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C5B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C5B4);
		  /* 8223C5B4h */ case    0:  		/* addi R1, R1, 112 */
		/* 8223C5B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223C5B4h case    0:*/		return 0x8223C5B8;
		  /* 8223C5B8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223C5B8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C5B8h case    1:*/		return 0x8223C5BC;
		  /* 8223C5BCh */ case    2:  		/* mtspr LR, R12 */
		/* 8223C5BCh case    2:*/		regs.LR = regs.R12;
		/* 8223C5BCh case    2:*/		return 0x8223C5C0;
		  /* 8223C5C0h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8223C5C0h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223C5C0h case    3:*/		return 0x8223C5C4;
		  /* 8223C5C4h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8223C5C4h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C5C4h case    4:*/		return 0x8223C5C8;
		  /* 8223C5C8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8223C5C8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223C5C8h case    5:*/		return 0x8223C5CC;
	}
	return 0x8223C5CC;
} // Block from 8223C5B4h-8223C5CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223C5CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C5CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C5CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C5CC);
		  /* 8223C5CCh */ case    0:  		/* nop */
		/* 8223C5CCh case    0:*/		cpu::op::nop();
		/* 8223C5CCh case    0:*/		return 0x8223C5D0;
	}
	return 0x8223C5D0;
} // Block from 8223C5CCh-8223C5D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223C5D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C5D0);
		  /* 8223C5D0h */ case    0:  		/* mfspr R12, LR */
		/* 8223C5D0h case    0:*/		regs.R12 = regs.LR;
		/* 8223C5D0h case    0:*/		return 0x8223C5D4;
		  /* 8223C5D4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223C5D4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C5D4h case    1:*/		return 0x8223C5D8;
		  /* 8223C5D8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223C5D8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223C5D8h case    2:*/		return 0x8223C5DC;
		  /* 8223C5DCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223C5DCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C5DCh case    3:*/		return 0x8223C5E0;
		  /* 8223C5E0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223C5E0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223C5E0h case    4:*/		return 0x8223C5E4;
		  /* 8223C5E4h */ case    5:  		/* lwz R30, <#[R3 + 12]> */
		/* 8223C5E4h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223C5E4h case    5:*/		return 0x8223C5E8;
		  /* 8223C5E8h */ case    6:  		/* mr R31, R3 */
		/* 8223C5E8h case    6:*/		regs.R31 = regs.R3;
		/* 8223C5E8h case    6:*/		return 0x8223C5EC;
		  /* 8223C5ECh */ case    7:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223C5ECh case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223C5ECh case    7:*/		return 0x8223C5F0;
		  /* 8223C5F0h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 8223C5F0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223C5F0h case    8:*/		return 0x8223C5F4;
		  /* 8223C5F4h */ case    9:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223C5F4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223C5F4h case    9:*/		return 0x8223C5F8;
		  /* 8223C5F8h */ case   10:  		/* mtspr CTR, R11 */
		/* 8223C5F8h case   10:*/		regs.CTR = regs.R11;
		/* 8223C5F8h case   10:*/		return 0x8223C5FC;
		  /* 8223C5FCh */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8223C5FCh case   11:*/		if ( 1 ) { regs.LR = 0x8223C600; return (uint32)regs.CTR; }
		/* 8223C5FCh case   11:*/		return 0x8223C600;
		  /* 8223C600h */ case   12:  		/* lis R11, -32222 */
		/* 8223C600h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223C600h case   12:*/		return 0x8223C604;
		  /* 8223C604h */ case   13:  		/* mr R5, R3 */
		/* 8223C604h case   13:*/		regs.R5 = regs.R3;
		/* 8223C604h case   13:*/		return 0x8223C608;
		  /* 8223C608h */ case   14:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223C608h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223C608h case   14:*/		return 0x8223C60C;
		  /* 8223C60Ch */ case   15:  		/* li R4, 0 */
		/* 8223C60Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223C60Ch case   15:*/		return 0x8223C610;
		  /* 8223C610h */ case   16:  		/* addi R6, R11, -12392 */
		/* 8223C610h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223C610h case   16:*/		return 0x8223C614;
		  /* 8223C614h */ case   17:  		/* mr R7, R30 */
		/* 8223C614h case   17:*/		regs.R7 = regs.R30;
		/* 8223C614h case   17:*/		return 0x8223C618;
		  /* 8223C618h */ case   18:  		/* bl -49608 */
		/* 8223C618h case   18:*/		regs.LR = 0x8223C61C; return 0x82230450;
		/* 8223C618h case   18:*/		return 0x8223C61C;
		  /* 8223C61Ch */ case   19:  		/* cmpwi CR6, R3, 1 */
		/* 8223C61Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223C61Ch case   19:*/		return 0x8223C620;
		  /* 8223C620h */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 8223C620h case   20:*/		if ( regs.CR[6].eq ) { return 0x8223C654;  }
		/* 8223C620h case   20:*/		return 0x8223C624;
		  /* 8223C624h */ case   21:  		/* cmpwi CR6, R3, 3 */
		/* 8223C624h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8223C624h case   21:*/		return 0x8223C628;
		  /* 8223C628h */ case   22:  		/* bc 4, CR6_EQ, 52 */
		/* 8223C628h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8223C65C;  }
		/* 8223C628h case   22:*/		return 0x8223C62C;
		  /* 8223C62Ch */ case   23:  		/* lis R11, -32252 */
		/* 8223C62Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223C62Ch case   23:*/		return 0x8223C630;
		  /* 8223C630h */ case   24:  		/* lis R10, -32255 */
		/* 8223C630h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8223C630h case   24:*/		return 0x8223C634;
		  /* 8223C634h */ case   25:  		/* lis R9, -32253 */
		/* 8223C634h case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223C634h case   25:*/		return 0x8223C638;
		  /* 8223C638h */ case   26:  		/* addi R6, R11, 8520 */
		/* 8223C638h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 8223C638h case   26:*/		return 0x8223C63C;
		  /* 8223C63Ch */ case   27:  		/* addi R5, R10, 5216 */
		/* 8223C63Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 8223C63Ch case   27:*/		return 0x8223C640;
		  /* 8223C640h */ case   28:  		/* addi R4, R9, 27460 */
		/* 8223C640h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223C640h case   28:*/		return 0x8223C644;
		  /* 8223C644h */ case   29:  		/* li R7, 1465 */
		/* 8223C644h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x5B9);
		/* 8223C644h case   29:*/		return 0x8223C648;
		  /* 8223C648h */ case   30:  		/* li R3, 0 */
		/* 8223C648h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223C648h case   30:*/		return 0x8223C64C;
		  /* 8223C64Ch */ case   31:  		/* bl -936516 */
		/* 8223C64Ch case   31:*/		regs.LR = 0x8223C650; return 0x82157C08;
		/* 8223C64Ch case   31:*/		return 0x8223C650;
		  /* 8223C650h */ case   32:  		/* b 12 */
		/* 8223C650h case   32:*/		return 0x8223C65C;
		/* 8223C650h case   32:*/		return 0x8223C654;
	}
	return 0x8223C654;
} // Block from 8223C5D0h-8223C654h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8223C654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C654);
		  /* 8223C654h */ case    0:  		/* mr R3, R31 */
		/* 8223C654h case    0:*/		regs.R3 = regs.R31;
		/* 8223C654h case    0:*/		return 0x8223C658;
		  /* 8223C658h */ case    1:  		/* bl -9048 */
		/* 8223C658h case    1:*/		regs.LR = 0x8223C65C; return 0x8223A300;
		/* 8223C658h case    1:*/		return 0x8223C65C;
	}
	return 0x8223C65C;
} // Block from 8223C654h-8223C65Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223C65Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C65C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C65C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C65C);
		  /* 8223C65Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8223C65Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223C65Ch case    0:*/		return 0x8223C660;
		  /* 8223C660h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223C660h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C660h case    1:*/		return 0x8223C664;
		  /* 8223C664h */ case    2:  		/* mtspr LR, R12 */
		/* 8223C664h case    2:*/		regs.LR = regs.R12;
		/* 8223C664h case    2:*/		return 0x8223C668;
		  /* 8223C668h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8223C668h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223C668h case    3:*/		return 0x8223C66C;
		  /* 8223C66Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8223C66Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C66Ch case    4:*/		return 0x8223C670;
		  /* 8223C670h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8223C670h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223C670h case    5:*/		return 0x8223C674;
	}
	return 0x8223C674;
} // Block from 8223C65Ch-8223C674h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223C674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C674);
		  /* 8223C674h */ case    0:  		/* nop */
		/* 8223C674h case    0:*/		cpu::op::nop();
		/* 8223C674h case    0:*/		return 0x8223C678;
	}
	return 0x8223C678;
} // Block from 8223C674h-8223C678h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223C678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C678);
		  /* 8223C678h */ case    0:  		/* mfspr R12, LR */
		/* 8223C678h case    0:*/		regs.R12 = regs.LR;
		/* 8223C678h case    0:*/		return 0x8223C67C;
		  /* 8223C67Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223C67Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C67Ch case    1:*/		return 0x8223C680;
		  /* 8223C680h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223C680h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223C680h case    2:*/		return 0x8223C684;
		  /* 8223C684h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223C684h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C684h case    3:*/		return 0x8223C688;
		  /* 8223C688h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223C688h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223C688h case    4:*/		return 0x8223C68C;
		  /* 8223C68Ch */ case    5:  		/* lwz R30, <#[R3 + 12]> */
		/* 8223C68Ch case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223C68Ch case    5:*/		return 0x8223C690;
		  /* 8223C690h */ case    6:  		/* mr R31, R3 */
		/* 8223C690h case    6:*/		regs.R31 = regs.R3;
		/* 8223C690h case    6:*/		return 0x8223C694;
		  /* 8223C694h */ case    7:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223C694h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223C694h case    7:*/		return 0x8223C698;
		  /* 8223C698h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 8223C698h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223C698h case    8:*/		return 0x8223C69C;
		  /* 8223C69Ch */ case    9:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223C69Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223C69Ch case    9:*/		return 0x8223C6A0;
		  /* 8223C6A0h */ case   10:  		/* mtspr CTR, R11 */
		/* 8223C6A0h case   10:*/		regs.CTR = regs.R11;
		/* 8223C6A0h case   10:*/		return 0x8223C6A4;
		  /* 8223C6A4h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8223C6A4h case   11:*/		if ( 1 ) { regs.LR = 0x8223C6A8; return (uint32)regs.CTR; }
		/* 8223C6A4h case   11:*/		return 0x8223C6A8;
		  /* 8223C6A8h */ case   12:  		/* lis R11, -32222 */
		/* 8223C6A8h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223C6A8h case   12:*/		return 0x8223C6AC;
		  /* 8223C6ACh */ case   13:  		/* mr R5, R3 */
		/* 8223C6ACh case   13:*/		regs.R5 = regs.R3;
		/* 8223C6ACh case   13:*/		return 0x8223C6B0;
		  /* 8223C6B0h */ case   14:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223C6B0h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223C6B0h case   14:*/		return 0x8223C6B4;
		  /* 8223C6B4h */ case   15:  		/* li R4, 0 */
		/* 8223C6B4h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223C6B4h case   15:*/		return 0x8223C6B8;
		  /* 8223C6B8h */ case   16:  		/* addi R6, R11, -12392 */
		/* 8223C6B8h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223C6B8h case   16:*/		return 0x8223C6BC;
		  /* 8223C6BCh */ case   17:  		/* mr R7, R30 */
		/* 8223C6BCh case   17:*/		regs.R7 = regs.R30;
		/* 8223C6BCh case   17:*/		return 0x8223C6C0;
		  /* 8223C6C0h */ case   18:  		/* bl -49200 */
		/* 8223C6C0h case   18:*/		regs.LR = 0x8223C6C4; return 0x82230690;
		/* 8223C6C0h case   18:*/		return 0x8223C6C4;
		  /* 8223C6C4h */ case   19:  		/* cmpwi CR6, R3, 1 */
		/* 8223C6C4h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223C6C4h case   19:*/		return 0x8223C6C8;
		  /* 8223C6C8h */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 8223C6C8h case   20:*/		if ( regs.CR[6].eq ) { return 0x8223C6FC;  }
		/* 8223C6C8h case   20:*/		return 0x8223C6CC;
		  /* 8223C6CCh */ case   21:  		/* cmpwi CR6, R3, 3 */
		/* 8223C6CCh case   21:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8223C6CCh case   21:*/		return 0x8223C6D0;
		  /* 8223C6D0h */ case   22:  		/* bc 4, CR6_EQ, 52 */
		/* 8223C6D0h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8223C704;  }
		/* 8223C6D0h case   22:*/		return 0x8223C6D4;
		  /* 8223C6D4h */ case   23:  		/* lis R11, -32252 */
		/* 8223C6D4h case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223C6D4h case   23:*/		return 0x8223C6D8;
		  /* 8223C6D8h */ case   24:  		/* lis R10, -32255 */
		/* 8223C6D8h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8223C6D8h case   24:*/		return 0x8223C6DC;
		  /* 8223C6DCh */ case   25:  		/* lis R9, -32253 */
		/* 8223C6DCh case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223C6DCh case   25:*/		return 0x8223C6E0;
		  /* 8223C6E0h */ case   26:  		/* addi R6, R11, 8520 */
		/* 8223C6E0h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 8223C6E0h case   26:*/		return 0x8223C6E4;
		  /* 8223C6E4h */ case   27:  		/* addi R5, R10, 5216 */
		/* 8223C6E4h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 8223C6E4h case   27:*/		return 0x8223C6E8;
		  /* 8223C6E8h */ case   28:  		/* addi R4, R9, 27460 */
		/* 8223C6E8h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223C6E8h case   28:*/		return 0x8223C6EC;
		  /* 8223C6ECh */ case   29:  		/* li R7, 1741 */
		/* 8223C6ECh case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x6CD);
		/* 8223C6ECh case   29:*/		return 0x8223C6F0;
		  /* 8223C6F0h */ case   30:  		/* li R3, 0 */
		/* 8223C6F0h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223C6F0h case   30:*/		return 0x8223C6F4;
		  /* 8223C6F4h */ case   31:  		/* bl -936684 */
		/* 8223C6F4h case   31:*/		regs.LR = 0x8223C6F8; return 0x82157C08;
		/* 8223C6F4h case   31:*/		return 0x8223C6F8;
		  /* 8223C6F8h */ case   32:  		/* b 12 */
		/* 8223C6F8h case   32:*/		return 0x8223C704;
		/* 8223C6F8h case   32:*/		return 0x8223C6FC;
	}
	return 0x8223C6FC;
} // Block from 8223C678h-8223C6FCh (33 instructions)

//////////////////////////////////////////////////////
// Block at 8223C6FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C6FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C6FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C6FC);
		  /* 8223C6FCh */ case    0:  		/* mr R3, R31 */
		/* 8223C6FCh case    0:*/		regs.R3 = regs.R31;
		/* 8223C6FCh case    0:*/		return 0x8223C700;
		  /* 8223C700h */ case    1:  		/* bl -6424 */
		/* 8223C700h case    1:*/		regs.LR = 0x8223C704; return 0x8223ADE8;
		/* 8223C700h case    1:*/		return 0x8223C704;
	}
	return 0x8223C704;
} // Block from 8223C6FCh-8223C704h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223C704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C704);
		  /* 8223C704h */ case    0:  		/* addi R1, R1, 112 */
		/* 8223C704h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223C704h case    0:*/		return 0x8223C708;
		  /* 8223C708h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223C708h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C708h case    1:*/		return 0x8223C70C;
		  /* 8223C70Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8223C70Ch case    2:*/		regs.LR = regs.R12;
		/* 8223C70Ch case    2:*/		return 0x8223C710;
		  /* 8223C710h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8223C710h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223C710h case    3:*/		return 0x8223C714;
		  /* 8223C714h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8223C714h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C714h case    4:*/		return 0x8223C718;
		  /* 8223C718h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8223C718h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223C718h case    5:*/		return 0x8223C71C;
	}
	return 0x8223C71C;
} // Block from 8223C704h-8223C71Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223C71Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C71C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C71C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C71C);
		  /* 8223C71Ch */ case    0:  		/* nop */
		/* 8223C71Ch case    0:*/		cpu::op::nop();
		/* 8223C71Ch case    0:*/		return 0x8223C720;
	}
	return 0x8223C720;
} // Block from 8223C71Ch-8223C720h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223C720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C720);
		  /* 8223C720h */ case    0:  		/* mfspr R12, LR */
		/* 8223C720h case    0:*/		regs.R12 = regs.LR;
		/* 8223C720h case    0:*/		return 0x8223C724;
		  /* 8223C724h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223C724h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C724h case    1:*/		return 0x8223C728;
		  /* 8223C728h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223C728h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223C728h case    2:*/		return 0x8223C72C;
		  /* 8223C72Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223C72Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C72Ch case    3:*/		return 0x8223C730;
		  /* 8223C730h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223C730h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223C730h case    4:*/		return 0x8223C734;
		  /* 8223C734h */ case    5:  		/* lwz R30, <#[R3 + 12]> */
		/* 8223C734h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223C734h case    5:*/		return 0x8223C738;
		  /* 8223C738h */ case    6:  		/* mr R31, R3 */
		/* 8223C738h case    6:*/		regs.R31 = regs.R3;
		/* 8223C738h case    6:*/		return 0x8223C73C;
		  /* 8223C73Ch */ case    7:  		/* lwz R3, <#[R30 + 1488]> */
		/* 8223C73Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005D0) );
		/* 8223C73Ch case    7:*/		return 0x8223C740;
		  /* 8223C740h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 8223C740h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223C740h case    8:*/		return 0x8223C744;
		  /* 8223C744h */ case    9:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223C744h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223C744h case    9:*/		return 0x8223C748;
		  /* 8223C748h */ case   10:  		/* mtspr CTR, R11 */
		/* 8223C748h case   10:*/		regs.CTR = regs.R11;
		/* 8223C748h case   10:*/		return 0x8223C74C;
		  /* 8223C74Ch */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8223C74Ch case   11:*/		if ( 1 ) { regs.LR = 0x8223C750; return (uint32)regs.CTR; }
		/* 8223C74Ch case   11:*/		return 0x8223C750;
		  /* 8223C750h */ case   12:  		/* lis R11, -32222 */
		/* 8223C750h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8222);
		/* 8223C750h case   12:*/		return 0x8223C754;
		  /* 8223C754h */ case   13:  		/* mr R5, R3 */
		/* 8223C754h case   13:*/		regs.R5 = regs.R3;
		/* 8223C754h case   13:*/		return 0x8223C758;
		  /* 8223C758h */ case   14:  		/* lwz R3, <#[R31 + 16]> */
		/* 8223C758h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223C758h case   14:*/		return 0x8223C75C;
		  /* 8223C75Ch */ case   15:  		/* li R4, 0 */
		/* 8223C75Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223C75Ch case   15:*/		return 0x8223C760;
		  /* 8223C760h */ case   16:  		/* addi R6, R11, -12392 */
		/* 8223C760h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCF98);
		/* 8223C760h case   16:*/		return 0x8223C764;
		  /* 8223C764h */ case   17:  		/* mr R7, R30 */
		/* 8223C764h case   17:*/		regs.R7 = regs.R30;
		/* 8223C764h case   17:*/		return 0x8223C768;
		  /* 8223C768h */ case   18:  		/* bl -45976 */
		/* 8223C768h case   18:*/		regs.LR = 0x8223C76C; return 0x822313D0;
		/* 8223C768h case   18:*/		return 0x8223C76C;
		  /* 8223C76Ch */ case   19:  		/* cmpwi CR6, R3, 1 */
		/* 8223C76Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223C76Ch case   19:*/		return 0x8223C770;
		  /* 8223C770h */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 8223C770h case   20:*/		if ( regs.CR[6].eq ) { return 0x8223C7A4;  }
		/* 8223C770h case   20:*/		return 0x8223C774;
		  /* 8223C774h */ case   21:  		/* cmpwi CR6, R3, 3 */
		/* 8223C774h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8223C774h case   21:*/		return 0x8223C778;
		  /* 8223C778h */ case   22:  		/* bc 4, CR6_EQ, 52 */
		/* 8223C778h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8223C7AC;  }
		/* 8223C778h case   22:*/		return 0x8223C77C;
		  /* 8223C77Ch */ case   23:  		/* lis R11, -32252 */
		/* 8223C77Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223C77Ch case   23:*/		return 0x8223C780;
		  /* 8223C780h */ case   24:  		/* lis R10, -32255 */
		/* 8223C780h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8223C780h case   24:*/		return 0x8223C784;
		  /* 8223C784h */ case   25:  		/* lis R9, -32253 */
		/* 8223C784h case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223C784h case   25:*/		return 0x8223C788;
		  /* 8223C788h */ case   26:  		/* addi R6, R11, 8520 */
		/* 8223C788h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 8223C788h case   26:*/		return 0x8223C78C;
		  /* 8223C78Ch */ case   27:  		/* addi R5, R10, 5216 */
		/* 8223C78Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 8223C78Ch case   27:*/		return 0x8223C790;
		  /* 8223C790h */ case   28:  		/* addi R4, R9, 27460 */
		/* 8223C790h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223C790h case   28:*/		return 0x8223C794;
		  /* 8223C794h */ case   29:  		/* li R7, 2182 */
		/* 8223C794h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x886);
		/* 8223C794h case   29:*/		return 0x8223C798;
		  /* 8223C798h */ case   30:  		/* li R3, 0 */
		/* 8223C798h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223C798h case   30:*/		return 0x8223C79C;
		  /* 8223C79Ch */ case   31:  		/* bl -936852 */
		/* 8223C79Ch case   31:*/		regs.LR = 0x8223C7A0; return 0x82157C08;
		/* 8223C79Ch case   31:*/		return 0x8223C7A0;
		  /* 8223C7A0h */ case   32:  		/* b 12 */
		/* 8223C7A0h case   32:*/		return 0x8223C7AC;
		/* 8223C7A0h case   32:*/		return 0x8223C7A4;
	}
	return 0x8223C7A4;
} // Block from 8223C720h-8223C7A4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8223C7A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C7A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C7A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C7A4);
		  /* 8223C7A4h */ case    0:  		/* mr R3, R31 */
		/* 8223C7A4h case    0:*/		regs.R3 = regs.R31;
		/* 8223C7A4h case    0:*/		return 0x8223C7A8;
		  /* 8223C7A8h */ case    1:  		/* bl -4776 */
		/* 8223C7A8h case    1:*/		regs.LR = 0x8223C7AC; return 0x8223B500;
		/* 8223C7A8h case    1:*/		return 0x8223C7AC;
	}
	return 0x8223C7AC;
} // Block from 8223C7A4h-8223C7ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223C7ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C7AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C7AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C7AC);
		  /* 8223C7ACh */ case    0:  		/* addi R1, R1, 112 */
		/* 8223C7ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223C7ACh case    0:*/		return 0x8223C7B0;
		  /* 8223C7B0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223C7B0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C7B0h case    1:*/		return 0x8223C7B4;
		  /* 8223C7B4h */ case    2:  		/* mtspr LR, R12 */
		/* 8223C7B4h case    2:*/		regs.LR = regs.R12;
		/* 8223C7B4h case    2:*/		return 0x8223C7B8;
		  /* 8223C7B8h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8223C7B8h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223C7B8h case    3:*/		return 0x8223C7BC;
		  /* 8223C7BCh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8223C7BCh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C7BCh case    4:*/		return 0x8223C7C0;
		  /* 8223C7C0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8223C7C0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223C7C0h case    5:*/		return 0x8223C7C4;
	}
	return 0x8223C7C4;
} // Block from 8223C7ACh-8223C7C4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223C7C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C7C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C7C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C7C4);
		  /* 8223C7C4h */ case    0:  		/* nop */
		/* 8223C7C4h case    0:*/		cpu::op::nop();
		/* 8223C7C4h case    0:*/		return 0x8223C7C8;
	}
	return 0x8223C7C8;
} // Block from 8223C7C4h-8223C7C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223C7C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C7C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C7C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C7C8);
		  /* 8223C7C8h */ case    0:  		/* mfspr R12, LR */
		/* 8223C7C8h case    0:*/		regs.R12 = regs.LR;
		/* 8223C7C8h case    0:*/		return 0x8223C7CC;
		  /* 8223C7CCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223C7CCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C7CCh case    1:*/		return 0x8223C7D0;
		  /* 8223C7D0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8223C7D0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C7D0h case    2:*/		return 0x8223C7D4;
		  /* 8223C7D4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8223C7D4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8223C7D4h case    3:*/		return 0x8223C7D8;
		  /* 8223C7D8h */ case    4:  		/* mr R31, R3 */
		/* 8223C7D8h case    4:*/		regs.R31 = regs.R3;
		/* 8223C7D8h case    4:*/		return 0x8223C7DC;
		  /* 8223C7DCh */ case    5:  		/* bl -2204 */
		/* 8223C7DCh case    5:*/		regs.LR = 0x8223C7E0; return 0x8223BF40;
		/* 8223C7DCh case    5:*/		return 0x8223C7E0;
		  /* 8223C7E0h */ case    6:  		/* mr R3, R31 */
		/* 8223C7E0h case    6:*/		regs.R3 = regs.R31;
		/* 8223C7E0h case    6:*/		return 0x8223C7E4;
		  /* 8223C7E4h */ case    7:  		/* bl -14108 */
		/* 8223C7E4h case    7:*/		regs.LR = 0x8223C7E8; return 0x822390C8;
		/* 8223C7E4h case    7:*/		return 0x8223C7E8;
		  /* 8223C7E8h */ case    8:  		/* mr R3, R31 */
		/* 8223C7E8h case    8:*/		regs.R3 = regs.R31;
		/* 8223C7E8h case    8:*/		return 0x8223C7EC;
		  /* 8223C7ECh */ case    9:  		/* bl -15948 */
		/* 8223C7ECh case    9:*/		regs.LR = 0x8223C7F0; return 0x822389A0;
		/* 8223C7ECh case    9:*/		return 0x8223C7F0;
		  /* 8223C7F0h */ case   10:  		/* mr R3, R31 */
		/* 8223C7F0h case   10:*/		regs.R3 = regs.R31;
		/* 8223C7F0h case   10:*/		return 0x8223C7F4;
		  /* 8223C7F4h */ case   11:  		/* bl -15628 */
		/* 8223C7F4h case   11:*/		regs.LR = 0x8223C7F8; return 0x82238AE8;
		/* 8223C7F4h case   11:*/		return 0x8223C7F8;
		  /* 8223C7F8h */ case   12:  		/* addi R1, R1, 96 */
		/* 8223C7F8h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8223C7F8h case   12:*/		return 0x8223C7FC;
		  /* 8223C7FCh */ case   13:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223C7FCh case   13:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C7FCh case   13:*/		return 0x8223C800;
		  /* 8223C800h */ case   14:  		/* mtspr LR, R12 */
		/* 8223C800h case   14:*/		regs.LR = regs.R12;
		/* 8223C800h case   14:*/		return 0x8223C804;
		  /* 8223C804h */ case   15:  		/* ld R31, <#[R1 - 16]> */
		/* 8223C804h case   15:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C804h case   15:*/		return 0x8223C808;
		  /* 8223C808h */ case   16:  		/* bclr 20, CR0_LT */
		/* 8223C808h case   16:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223C808h case   16:*/		return 0x8223C80C;
	}
	return 0x8223C80C;
} // Block from 8223C7C8h-8223C80Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8223C80Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C80C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C80C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C80C);
		  /* 8223C80Ch */ case    0:  		/* nop */
		/* 8223C80Ch case    0:*/		cpu::op::nop();
		/* 8223C80Ch case    0:*/		return 0x8223C810;
	}
	return 0x8223C810;
} // Block from 8223C80Ch-8223C810h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223C810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C810);
		  /* 8223C810h */ case    0:  		/* mfspr R12, LR */
		/* 8223C810h case    0:*/		regs.R12 = regs.LR;
		/* 8223C810h case    0:*/		return 0x8223C814;
		  /* 8223C814h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223C814h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C814h case    1:*/		return 0x8223C818;
		  /* 8223C818h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8223C818h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C818h case    2:*/		return 0x8223C81C;
		  /* 8223C81Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8223C81Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8223C81Ch case    3:*/		return 0x8223C820;
		  /* 8223C820h */ case    4:  		/* mr R31, R3 */
		/* 8223C820h case    4:*/		regs.R31 = regs.R3;
		/* 8223C820h case    4:*/		return 0x8223C824;
		  /* 8223C824h */ case    5:  		/* bl -764 */
		/* 8223C824h case    5:*/		regs.LR = 0x8223C828; return 0x8223C528;
		/* 8223C824h case    5:*/		return 0x8223C828;
		  /* 8223C828h */ case    6:  		/* mr R3, R31 */
		/* 8223C828h case    6:*/		regs.R3 = regs.R31;
		/* 8223C828h case    6:*/		return 0x8223C82C;
		  /* 8223C82Ch */ case    7:  		/* bl -436 */
		/* 8223C82Ch case    7:*/		regs.LR = 0x8223C830; return 0x8223C678;
		/* 8223C82Ch case    7:*/		return 0x8223C830;
		  /* 8223C830h */ case    8:  		/* mr R3, R31 */
		/* 8223C830h case    8:*/		regs.R3 = regs.R31;
		/* 8223C830h case    8:*/		return 0x8223C834;
		  /* 8223C834h */ case    9:  		/* bl -276 */
		/* 8223C834h case    9:*/		regs.LR = 0x8223C838; return 0x8223C720;
		/* 8223C834h case    9:*/		return 0x8223C838;
		  /* 8223C838h */ case   10:  		/* mr R3, R31 */
		/* 8223C838h case   10:*/		regs.R3 = regs.R31;
		/* 8223C838h case   10:*/		return 0x8223C83C;
		  /* 8223C83Ch */ case   11:  		/* bl -11588 */
		/* 8223C83Ch case   11:*/		regs.LR = 0x8223C840; return 0x82239AF8;
		/* 8223C83Ch case   11:*/		return 0x8223C840;
		  /* 8223C840h */ case   12:  		/* mr R3, R31 */
		/* 8223C840h case   12:*/		regs.R3 = regs.R31;
		/* 8223C840h case   12:*/		return 0x8223C844;
		  /* 8223C844h */ case   13:  		/* bl -628 */
		/* 8223C844h case   13:*/		regs.LR = 0x8223C848; return 0x8223C5D0;
		/* 8223C844h case   13:*/		return 0x8223C848;
		  /* 8223C848h */ case   14:  		/* lwz R8, <#[R31 + 2068]> */
		/* 8223C848h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000814) );
		/* 8223C848h case   14:*/		return 0x8223C84C;
		  /* 8223C84Ch */ case   15:  		/* li R10, 0 */
		/* 8223C84Ch case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8223C84Ch case   15:*/		return 0x8223C850;
		  /* 8223C850h */ case   16:  		/* li R9, 0 */
		/* 8223C850h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8223C850h case   16:*/		return 0x8223C854;
		  /* 8223C854h */ case   17:  		/* li R7, 1 */
		/* 8223C854h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8223C854h case   17:*/		return 0x8223C858;
		  /* 8223C858h */ case   18:  		/* lwz R11, <#[R8 + 4]> */
		/* 8223C858h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 8223C858h case   18:*/		return 0x8223C85C;
		  /* 8223C85Ch */ case   19:  		/* cmplw CR6, R7, R11 */
		/* 8223C85Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 8223C85Ch case   19:*/		return 0x8223C860;
		  /* 8223C860h */ case   20:  		/* bc 4, CR6_GT, 12 */
		/* 8223C860h case   20:*/		if ( !regs.CR[6].gt ) { return 0x8223C86C;  }
		/* 8223C860h case   20:*/		return 0x8223C864;
		  /* 8223C864h */ case   21:  		/* li R11, 0 */
		/* 8223C864h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223C864h case   21:*/		return 0x8223C868;
		  /* 8223C868h */ case   22:  		/* b 16 */
		/* 8223C868h case   22:*/		return 0x8223C878;
		/* 8223C868h case   22:*/		return 0x8223C86C;
	}
	return 0x8223C86C;
} // Block from 8223C810h-8223C86Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8223C86Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C86C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C86C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C86C);
		  /* 8223C86Ch */ case    0:  		/* lwz R10, <#[R8 + 8]> */
		/* 8223C86Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000008) );
		/* 8223C86Ch case    0:*/		return 0x8223C870;
		  /* 8223C870h */ case    1:  		/* li R11, 1 */
		/* 8223C870h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223C870h case    1:*/		return 0x8223C874;
		  /* 8223C874h */ case    2:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8223C874h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8223C874h case    2:*/		return 0x8223C878;
	}
	return 0x8223C878;
} // Block from 8223C86Ch-8223C878h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223C878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C878);
		  /* 8223C878h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8223C878h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8223C878h case    0:*/		return 0x8223C87C;
		  /* 8223C87Ch */ case    1:  		/* bc 12, CR0_EQ, 60 */
		/* 8223C87Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8223C8B8;  }
		/* 8223C87Ch case    1:*/		return 0x8223C880;
		  /* 8223C880h */ case    2:  		/* lwz R11, <#[R10 + 228]> */
		/* 8223C880h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x000000E4) );
		/* 8223C880h case    2:*/		return 0x8223C884;
		  /* 8223C884h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8223C884h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223C884h case    3:*/		return 0x8223C888;
		  /* 8223C888h */ case    4:  		/* bc 12, CR0_EQ, 36 */
		/* 8223C888h case    4:*/		if ( regs.CR[0].eq ) { return 0x8223C8AC;  }
		/* 8223C888h case    4:*/		return 0x8223C88C;
		  /* 8223C88Ch */ case    5:  		/* lwz R11, <#[R10 + 80]> */
		/* 8223C88Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000050) );
		/* 8223C88Ch case    5:*/		return 0x8223C890;
		  /* 8223C890h */ case    6:  		/* cmpwi CR6, R11, 8 */
		/* 8223C890h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8223C890h case    6:*/		return 0x8223C894;
		  /* 8223C894h */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 8223C894h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8223C8AC;  }
		/* 8223C894h case    7:*/		return 0x8223C898;
		  /* 8223C898h */ case    8:  		/* lwz R11, <#[R10 + 56]> */
		/* 8223C898h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000038) );
		/* 8223C898h case    8:*/		return 0x8223C89C;
		  /* 8223C89Ch */ case    9:  		/* lwz R6, <#[R31 + 2096]> */
		/* 8223C89Ch case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000830) );
		/* 8223C89Ch case    9:*/		return 0x8223C8A0;
		  /* 8223C8A0h */ case   10:  		/* cmpw CR6, R11, R6 */
		/* 8223C8A0h case   10:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R6);
		/* 8223C8A0h case   10:*/		return 0x8223C8A4;
		  /* 8223C8A4h */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 8223C8A4h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8223C8AC;  }
		/* 8223C8A4h case   11:*/		return 0x8223C8A8;
		  /* 8223C8A8h */ case   12:  		/* stw R11, <#[R31 + 2096]> */
		/* 8223C8A8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000830) );
		/* 8223C8A8h case   12:*/		return 0x8223C8AC;
	}
	return 0x8223C8AC;
} // Block from 8223C878h-8223C8ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223C8ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C8AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C8AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C8AC);
		  /* 8223C8ACh */ case    0:  		/* addi R7, R7, 1 */
		/* 8223C8ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 8223C8ACh case    0:*/		return 0x8223C8B0;
		  /* 8223C8B0h */ case    1:  		/* addi R9, R9, 4 */
		/* 8223C8B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8223C8B0h case    1:*/		return 0x8223C8B4;
		  /* 8223C8B4h */ case    2:  		/* b -92 */
		/* 8223C8B4h case    2:*/		return 0x8223C858;
		/* 8223C8B4h case    2:*/		return 0x8223C8B8;
	}
	return 0x8223C8B8;
} // Block from 8223C8ACh-8223C8B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223C8B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C8B8);
		  /* 8223C8B8h */ case    0:  		/* addi R1, R1, 96 */
		/* 8223C8B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8223C8B8h case    0:*/		return 0x8223C8BC;
		  /* 8223C8BCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223C8BCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C8BCh case    1:*/		return 0x8223C8C0;
		  /* 8223C8C0h */ case    2:  		/* mtspr LR, R12 */
		/* 8223C8C0h case    2:*/		regs.LR = regs.R12;
		/* 8223C8C0h case    2:*/		return 0x8223C8C4;
		  /* 8223C8C4h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8223C8C4h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C8C4h case    3:*/		return 0x8223C8C8;
		  /* 8223C8C8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8223C8C8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223C8C8h case    4:*/		return 0x8223C8CC;
	}
	return 0x8223C8CC;
} // Block from 8223C8B8h-8223C8CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223C8CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C8CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C8CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C8CC);
		  /* 8223C8CCh */ case    0:  		/* nop */
		/* 8223C8CCh case    0:*/		cpu::op::nop();
		/* 8223C8CCh case    0:*/		return 0x8223C8D0;
	}
	return 0x8223C8D0;
} // Block from 8223C8CCh-8223C8D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223C8D0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C8D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C8D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C8D0);
		  /* 8223C8D0h */ case    0:  		/* mfspr R12, LR */
		/* 8223C8D0h case    0:*/		regs.R12 = regs.LR;
		/* 8223C8D0h case    0:*/		return 0x8223C8D4;
		  /* 8223C8D4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223C8D4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C8D4h case    1:*/		return 0x8223C8D8;
		  /* 8223C8D8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223C8D8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223C8D8h case    2:*/		return 0x8223C8DC;
		  /* 8223C8DCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223C8DCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223C8DCh case    3:*/		return 0x8223C8E0;
		  /* 8223C8E0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223C8E0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223C8E0h case    4:*/		return 0x8223C8E4;
		  /* 8223C8E4h */ case    5:  		/* mr R31, R3 */
		/* 8223C8E4h case    5:*/		regs.R31 = regs.R3;
		/* 8223C8E4h case    5:*/		return 0x8223C8E8;
		  /* 8223C8E8h */ case    6:  		/* mr R30, R4 */
		/* 8223C8E8h case    6:*/		regs.R30 = regs.R4;
		/* 8223C8E8h case    6:*/		return 0x8223C8EC;
		  /* 8223C8ECh */ case    7:  		/* bl 133004 */
		/* 8223C8ECh case    7:*/		regs.LR = 0x8223C8F0; return 0x8225D078;
		/* 8223C8ECh case    7:*/		return 0x8223C8F0;
		  /* 8223C8F0h */ case    8:  		/* lbz R11, <#[R31 + 2144]> */
		/* 8223C8F0h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000860) );
		/* 8223C8F0h case    8:*/		return 0x8223C8F4;
		  /* 8223C8F4h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8223C8F4h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223C8F4h case    9:*/		return 0x8223C8F8;
		  /* 8223C8F8h */ case   10:  		/* bc 12, CR0_EQ, 112 */
		/* 8223C8F8h case   10:*/		if ( regs.CR[0].eq ) { return 0x8223C968;  }
		/* 8223C8F8h case   10:*/		return 0x8223C8FC;
		  /* 8223C8FCh */ case   11:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223C8FCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223C8FCh case   11:*/		return 0x8223C900;
		  /* 8223C900h */ case   12:  		/* lbz R11, <#[R11 + 2028]> */
		/* 8223C900h case   12:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x000007EC) );
		/* 8223C900h case   12:*/		return 0x8223C904;
		  /* 8223C904h */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 8223C904h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223C904h case   13:*/		return 0x8223C908;
		  /* 8223C908h */ case   14:  		/* bc 12, CR0_EQ, 12 */
		/* 8223C908h case   14:*/		if ( regs.CR[0].eq ) { return 0x8223C914;  }
		/* 8223C908h case   14:*/		return 0x8223C90C;
		  /* 8223C90Ch */ case   15:  		/* mr R3, R31 */
		/* 8223C90Ch case   15:*/		regs.R3 = regs.R31;
		/* 8223C90Ch case   15:*/		return 0x8223C910;
		  /* 8223C910h */ case   16:  		/* bl -16616 */
		/* 8223C910h case   16:*/		regs.LR = 0x8223C914; return 0x82238828;
		/* 8223C910h case   16:*/		return 0x8223C914;
	}
	return 0x8223C914;
} // Block from 8223C8D0h-8223C914h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8223C914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C914);
		  /* 8223C914h */ case    0:  		/* mr R3, R31 */
		/* 8223C914h case    0:*/		regs.R3 = regs.R31;
		/* 8223C914h case    0:*/		return 0x8223C918;
		  /* 8223C918h */ case    1:  		/* bl -10176 */
		/* 8223C918h case    1:*/		regs.LR = 0x8223C91C; return 0x8223A158;
		/* 8223C918h case    1:*/		return 0x8223C91C;
		  /* 8223C91Ch */ case    2:  		/* mr R3, R31 */
		/* 8223C91Ch case    2:*/		regs.R3 = regs.R31;
		/* 8223C91Ch case    2:*/		return 0x8223C920;
		  /* 8223C920h */ case    3:  		/* bl -9928 */
		/* 8223C920h case    3:*/		regs.LR = 0x8223C924; return 0x8223A258;
		/* 8223C920h case    3:*/		return 0x8223C924;
		  /* 8223C924h */ case    4:  		/* mr R3, R31 */
		/* 8223C924h case    4:*/		regs.R3 = regs.R31;
		/* 8223C924h case    4:*/		return 0x8223C928;
		  /* 8223C928h */ case    5:  		/* bl -20176 */
		/* 8223C928h case    5:*/		regs.LR = 0x8223C92C; return 0x82237A58;
		/* 8223C928h case    5:*/		return 0x8223C92C;
		  /* 8223C92Ch */ case    6:  		/* mr R3, R31 */
		/* 8223C92Ch case    6:*/		regs.R3 = regs.R31;
		/* 8223C92Ch case    6:*/		return 0x8223C930;
		  /* 8223C930h */ case    7:  		/* bl -19392 */
		/* 8223C930h case    7:*/		regs.LR = 0x8223C934; return 0x82237D70;
		/* 8223C930h case    7:*/		return 0x8223C934;
		  /* 8223C934h */ case    8:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223C934h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223C934h case    8:*/		return 0x8223C938;
		  /* 8223C938h */ case    9:  		/* lwz R11, <#[R11 + 2136]> */
		/* 8223C938h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000858) );
		/* 8223C938h case    9:*/		return 0x8223C93C;
		  /* 8223C93Ch */ case   10:  		/* rlwinm. R11, R11, 17, 31, 31 */
		/* 8223C93Ch case   10:*/		cpu::op::rlwinm<1,17,31,31>(regs,&regs.R11,regs.R11);
		/* 8223C93Ch case   10:*/		return 0x8223C940;
		  /* 8223C940h */ case   11:  		/* bc 12, CR0_EQ, 12 */
		/* 8223C940h case   11:*/		if ( regs.CR[0].eq ) { return 0x8223C94C;  }
		/* 8223C940h case   11:*/		return 0x8223C944;
		  /* 8223C944h */ case   12:  		/* mr R3, R31 */
		/* 8223C944h case   12:*/		regs.R3 = regs.R31;
		/* 8223C944h case   12:*/		return 0x8223C948;
		  /* 8223C948h */ case   13:  		/* bl -2336 */
		/* 8223C948h case   13:*/		regs.LR = 0x8223C94C; return 0x8223C028;
		/* 8223C948h case   13:*/		return 0x8223C94C;
	}
	return 0x8223C94C;
} // Block from 8223C914h-8223C94Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223C94Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C94C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C94C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C94C);
		  /* 8223C94Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223C94Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223C94Ch case    0:*/		return 0x8223C950;
		  /* 8223C950h */ case    1:  		/* mr R4, R30 */
		/* 8223C950h case    1:*/		regs.R4 = regs.R30;
		/* 8223C950h case    1:*/		return 0x8223C954;
		  /* 8223C954h */ case    2:  		/* mr R3, R31 */
		/* 8223C954h case    2:*/		regs.R3 = regs.R31;
		/* 8223C954h case    2:*/		return 0x8223C958;
		  /* 8223C958h */ case    3:  		/* lwz R11, <#[R11 + 1404]> */
		/* 8223C958h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000057C) );
		/* 8223C958h case    3:*/		return 0x8223C95C;
		  /* 8223C95Ch */ case    4:  		/* stw R11, <#[R31 + 2088]> */
		/* 8223C95Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000828) );
		/* 8223C95Ch case    4:*/		return 0x8223C960;
		  /* 8223C960h */ case    5:  		/* bl -18936 */
		/* 8223C960h case    5:*/		regs.LR = 0x8223C964; return 0x82237F68;
		/* 8223C960h case    5:*/		return 0x8223C964;
		  /* 8223C964h */ case    6:  		/* b 96 */
		/* 8223C964h case    6:*/		return 0x8223C9C4;
		/* 8223C964h case    6:*/		return 0x8223C968;
	}
	return 0x8223C968;
} // Block from 8223C94Ch-8223C968h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223C968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C968);
		  /* 8223C968h */ case    0:  		/* lwz R11, <#[R31 + 108]> */
		/* 8223C968h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223C968h case    0:*/		return 0x8223C96C;
		  /* 8223C96Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8223C96Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223C96Ch case    1:*/		return 0x8223C970;
		  /* 8223C970h */ case    2:  		/* bc 4, CR6_EQ, 52 */
		/* 8223C970h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8223C9A4;  }
		/* 8223C970h case    2:*/		return 0x8223C974;
		  /* 8223C974h */ case    3:  		/* lwz R11, <#[R31 + 112]> */
		/* 8223C974h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 8223C974h case    3:*/		return 0x8223C978;
		  /* 8223C978h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8223C978h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223C978h case    4:*/		return 0x8223C97C;
		  /* 8223C97Ch */ case    5:  		/* bc 4, CR6_EQ, 40 */
		/* 8223C97Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8223C9A4;  }
		/* 8223C97Ch case    5:*/		return 0x8223C980;
		  /* 8223C980h */ case    6:  		/* lis R11, -32252 */
		/* 8223C980h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223C980h case    6:*/		return 0x8223C984;
		  /* 8223C984h */ case    7:  		/* lis R10, -32252 */
		/* 8223C984h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223C984h case    7:*/		return 0x8223C988;
		  /* 8223C988h */ case    8:  		/* lis R9, -32253 */
		/* 8223C988h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223C988h case    8:*/		return 0x8223C98C;
		  /* 8223C98Ch */ case    9:  		/* addi R6, R11, 8520 */
		/* 8223C98Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2148);
		/* 8223C98Ch case    9:*/		return 0x8223C990;
		  /* 8223C990h */ case   10:  		/* addi R5, R10, 8612 */
		/* 8223C990h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x21A4);
		/* 8223C990h case   10:*/		return 0x8223C994;
		  /* 8223C994h */ case   11:  		/* addi R4, R9, 27460 */
		/* 8223C994h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223C994h case   11:*/		return 0x8223C998;
		  /* 8223C998h */ case   12:  		/* li R7, 532 */
		/* 8223C998h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x214);
		/* 8223C998h case   12:*/		return 0x8223C99C;
		  /* 8223C99Ch */ case   13:  		/* li R3, 0 */
		/* 8223C99Ch case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223C99Ch case   13:*/		return 0x8223C9A0;
		  /* 8223C9A0h */ case   14:  		/* bl -937368 */
		/* 8223C9A0h case   14:*/		regs.LR = 0x8223C9A4; return 0x82157C08;
		/* 8223C9A0h case   14:*/		return 0x8223C9A4;
	}
	return 0x8223C9A4;
} // Block from 8223C968h-8223C9A4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223C9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C9A4);
		  /* 8223C9A4h */ case    0:  		/* mr R3, R31 */
		/* 8223C9A4h case    0:*/		regs.R3 = regs.R31;
		/* 8223C9A4h case    0:*/		return 0x8223C9A8;
		  /* 8223C9A8h */ case    1:  		/* bl -12120 */
		/* 8223C9A8h case    1:*/		regs.LR = 0x8223C9AC; return 0x82239A50;
		/* 8223C9A8h case    1:*/		return 0x8223C9AC;
		  /* 8223C9ACh */ case    2:  		/* mr R3, R31 */
		/* 8223C9ACh case    2:*/		regs.R3 = regs.R31;
		/* 8223C9ACh case    2:*/		return 0x8223C9B0;
		  /* 8223C9B0h */ case    3:  		/* bl -416 */
		/* 8223C9B0h case    3:*/		regs.LR = 0x8223C9B4; return 0x8223C810;
		/* 8223C9B0h case    3:*/		return 0x8223C9B4;
		  /* 8223C9B4h */ case    4:  		/* mr R3, R31 */
		/* 8223C9B4h case    4:*/		regs.R3 = regs.R31;
		/* 8223C9B4h case    4:*/		return 0x8223C9B8;
		  /* 8223C9B8h */ case    5:  		/* bl -21552 */
		/* 8223C9B8h case    5:*/		regs.LR = 0x8223C9BC; return 0x82237588;
		/* 8223C9B8h case    5:*/		return 0x8223C9BC;
		  /* 8223C9BCh */ case    6:  		/* mr R3, R31 */
		/* 8223C9BCh case    6:*/		regs.R3 = regs.R31;
		/* 8223C9BCh case    6:*/		return 0x8223C9C0;
		  /* 8223C9C0h */ case    7:  		/* bl -2856 */
		/* 8223C9C0h case    7:*/		regs.LR = 0x8223C9C4; return 0x8223BE98;
		/* 8223C9C0h case    7:*/		return 0x8223C9C4;
	}
	return 0x8223C9C4;
} // Block from 8223C9A4h-8223C9C4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8223C9C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C9C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C9C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C9C4);
		  /* 8223C9C4h */ case    0:  		/* mr R3, R31 */
		/* 8223C9C4h case    0:*/		regs.R3 = regs.R31;
		/* 8223C9C4h case    0:*/		return 0x8223C9C8;
		  /* 8223C9C8h */ case    1:  		/* bl 122960 */
		/* 8223C9C8h case    1:*/		regs.LR = 0x8223C9CC; return 0x8225AA18;
		/* 8223C9C8h case    1:*/		return 0x8223C9CC;
		  /* 8223C9CCh */ case    2:  		/* mr R3, R31 */
		/* 8223C9CCh case    2:*/		regs.R3 = regs.R31;
		/* 8223C9CCh case    2:*/		return 0x8223C9D0;
		  /* 8223C9D0h */ case    3:  		/* bl -26904 */
		/* 8223C9D0h case    3:*/		regs.LR = 0x8223C9D4; return 0x822360B8;
		/* 8223C9D0h case    3:*/		return 0x8223C9D4;
		  /* 8223C9D4h */ case    4:  		/* mr R3, R31 */
		/* 8223C9D4h case    4:*/		regs.R3 = regs.R31;
		/* 8223C9D4h case    4:*/		return 0x8223C9D8;
		  /* 8223C9D8h */ case    5:  		/* bl 158808 */
		/* 8223C9D8h case    5:*/		regs.LR = 0x8223C9DC; return 0x82263630;
		/* 8223C9D8h case    5:*/		return 0x8223C9DC;
		  /* 8223C9DCh */ case    6:  		/* lwz R5, <#[R31 + 2156]> */
		/* 8223C9DCh case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000086C) );
		/* 8223C9DCh case    6:*/		return 0x8223C9E0;
		  /* 8223C9E0h */ case    7:  		/* cmpwi CR6, R5, 0 */
		/* 8223C9E0h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8223C9E0h case    7:*/		return 0x8223C9E4;
		  /* 8223C9E4h */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 8223C9E4h case    8:*/		if ( regs.CR[6].eq ) { return 0x8223C9F8;  }
		/* 8223C9E4h case    8:*/		return 0x8223C9E8;
		  /* 8223C9E8h */ case    9:  		/* lis R11, -32252 */
		/* 8223C9E8h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223C9E8h case    9:*/		return 0x8223C9EC;
		  /* 8223C9ECh */ case   10:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223C9ECh case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223C9ECh case   10:*/		return 0x8223C9F0;
		  /* 8223C9F0h */ case   11:  		/* addi R4, R11, 9560 */
		/* 8223C9F0h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x2558);
		/* 8223C9F0h case   11:*/		return 0x8223C9F4;
		  /* 8223C9F4h */ case   12:  		/* bl -128564 */
		/* 8223C9F4h case   12:*/		regs.LR = 0x8223C9F8; return 0x8221D3C0;
		/* 8223C9F4h case   12:*/		return 0x8223C9F8;
	}
	return 0x8223C9F8;
} // Block from 8223C9C4h-8223C9F8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223C9F8h
// Function '?MaybeExpandPointSprites@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223C9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223C9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223C9F8);
		  /* 8223C9F8h */ case    0:  		/* addi R1, R1, 112 */
		/* 8223C9F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223C9F8h case    0:*/		return 0x8223C9FC;
		  /* 8223C9FCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223C9FCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223C9FCh case    1:*/		return 0x8223CA00;
		  /* 8223CA00h */ case    2:  		/* mtspr LR, R12 */
		/* 8223CA00h case    2:*/		regs.LR = regs.R12;
		/* 8223CA00h case    2:*/		return 0x8223CA04;
		  /* 8223CA04h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8223CA04h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223CA04h case    3:*/		return 0x8223CA08;
		  /* 8223CA08h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8223CA08h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223CA08h case    4:*/		return 0x8223CA0C;
		  /* 8223CA0Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 8223CA0Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223CA0Ch case    5:*/		return 0x8223CA10;
	}
	return 0x8223CA10;
} // Block from 8223C9F8h-8223CA10h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223CA10h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CA10);
		  /* 8223CA10h */ case    0:  		/* mfspr R12, LR */
		/* 8223CA10h case    0:*/		regs.R12 = regs.LR;
		/* 8223CA10h case    0:*/		return 0x8223CA14;
		  /* 8223CA14h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223CA14h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223CA14h case    1:*/		return 0x8223CA18;
		  /* 8223CA18h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223CA18h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223CA18h case    2:*/		return 0x8223CA1C;
		  /* 8223CA1Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223CA1Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223CA1Ch case    3:*/		return 0x8223CA20;
		  /* 8223CA20h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223CA20h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223CA20h case    4:*/		return 0x8223CA24;
		  /* 8223CA24h */ case    5:  		/* lwz R4, <#[R3 + 4]> */
		/* 8223CA24h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8223CA24h case    5:*/		return 0x8223CA28;
		  /* 8223CA28h */ case    6:  		/* mr R31, R3 */
		/* 8223CA28h case    6:*/		regs.R31 = regs.R3;
		/* 8223CA28h case    6:*/		return 0x8223CA2C;
		  /* 8223CA2Ch */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 8223CA2Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8223CA2Ch case    7:*/		return 0x8223CA30;
		  /* 8223CA30h */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 8223CA30h case    8:*/		if ( regs.CR[6].eq ) { return 0x8223CA58;  }
		/* 8223CA30h case    8:*/		return 0x8223CA34;
		  /* 8223CA34h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223CA34h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223CA34h case    9:*/		return 0x8223CA38;
		  /* 8223CA38h */ case   10:  		/* lwz R30, <#[R4]> */
		/* 8223CA38h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R4 + 0x00000000) );
		/* 8223CA38h case   10:*/		return 0x8223CA3C;
		  /* 8223CA3Ch */ case   11:  		/* lwz R10, <#[R11 + 1436]> */
		/* 8223CA3Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000059C) );
		/* 8223CA3Ch case   11:*/		return 0x8223CA40;
		  /* 8223CA40h */ case   12:  		/* lwz R3, <#[R11 + 1444]> */
		/* 8223CA40h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005A4) );
		/* 8223CA40h case   12:*/		return 0x8223CA44;
		  /* 8223CA44h */ case   13:  		/* mtspr CTR, R10 */
		/* 8223CA44h case   13:*/		regs.CTR = regs.R10;
		/* 8223CA44h case   13:*/		return 0x8223CA48;
		  /* 8223CA48h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8223CA48h case   14:*/		if ( 1 ) { regs.LR = 0x8223CA4C; return (uint32)regs.CTR; }
		/* 8223CA48h case   14:*/		return 0x8223CA4C;
		  /* 8223CA4Ch */ case   15:  		/* mr R4, R30 */
		/* 8223CA4Ch case   15:*/		regs.R4 = regs.R30;
		/* 8223CA4Ch case   15:*/		return 0x8223CA50;
		  /* 8223CA50h */ case   16:  		/* cmplwi CR6, R30, 0 */
		/* 8223CA50h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223CA50h case   16:*/		return 0x8223CA54;
		  /* 8223CA54h */ case   17:  		/* bc 4, CR6_EQ, -32 */
		/* 8223CA54h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8223CA34;  }
		/* 8223CA54h case   17:*/		return 0x8223CA58;
	}
	return 0x8223CA58;
} // Block from 8223CA10h-8223CA58h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8223CA58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CA58);
		  /* 8223CA58h */ case    0:  		/* li R11, 0 */
		/* 8223CA58h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223CA58h case    0:*/		return 0x8223CA5C;
		  /* 8223CA5Ch */ case    1:  		/* stw R11, <#[R31 + 4]> */
		/* 8223CA5Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8223CA5Ch case    1:*/		return 0x8223CA60;
		  /* 8223CA60h */ case    2:  		/* stw R11, <#[R31 + 20]> */
		/* 8223CA60h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CA60h case    2:*/		return 0x8223CA64;
		  /* 8223CA64h */ case    3:  		/* stw R11, <#[R31 + 16]> */
		/* 8223CA64h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8223CA64h case    3:*/		return 0x8223CA68;
		  /* 8223CA68h */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 8223CA68h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8223CA68h case    4:*/		return 0x8223CA6C;
		  /* 8223CA6Ch */ case    5:  		/* stw R11, <#[R31 + 12]> */
		/* 8223CA6Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223CA6Ch case    5:*/		return 0x8223CA70;
		  /* 8223CA70h */ case    6:  		/* addi R1, R1, 112 */
		/* 8223CA70h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223CA70h case    6:*/		return 0x8223CA74;
		  /* 8223CA74h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223CA74h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223CA74h case    7:*/		return 0x8223CA78;
		  /* 8223CA78h */ case    8:  		/* mtspr LR, R12 */
		/* 8223CA78h case    8:*/		regs.LR = regs.R12;
		/* 8223CA78h case    8:*/		return 0x8223CA7C;
		  /* 8223CA7Ch */ case    9:  		/* ld R30, <#[R1 - 24]> */
		/* 8223CA7Ch case    9:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223CA7Ch case    9:*/		return 0x8223CA80;
		  /* 8223CA80h */ case   10:  		/* ld R31, <#[R1 - 16]> */
		/* 8223CA80h case   10:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223CA80h case   10:*/		return 0x8223CA84;
		  /* 8223CA84h */ case   11:  		/* bclr 20, CR0_LT */
		/* 8223CA84h case   11:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223CA84h case   11:*/		return 0x8223CA88;
	}
	return 0x8223CA88;
} // Block from 8223CA58h-8223CA88h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8223CA88h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CA88);
		  /* 8223CA88h */ case    0:  		/* lwz R11, <#[R3 + 4]> */
		/* 8223CA88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8223CA88h case    0:*/		return 0x8223CA8C;
		  /* 8223CA8Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8223CA8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223CA8Ch case    1:*/		return 0x8223CA90;
		  /* 8223CA90h */ case    2:  		/* bc 12, CR6_EQ, 56 */
		/* 8223CA90h case    2:*/		if ( regs.CR[6].eq ) { return 0x8223CAC8;  }
		/* 8223CA90h case    2:*/		return 0x8223CA94;
		  /* 8223CA94h */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8223CA94h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8223CA94h case    3:*/		return 0x8223CA98;
		  /* 8223CA98h */ case    4:  		/* lwz R10, <#[R3 + 16]> */
		/* 8223CA98h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 8223CA98h case    4:*/		return 0x8223CA9C;
		  /* 8223CA9Ch */ case    5:  		/* lwz R9, <#[R3 + 8]> */
		/* 8223CA9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8223CA9Ch case    5:*/		return 0x8223CAA0;
	}
	return 0x8223CAA0;
} // Block from 8223CA88h-8223CAA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223CAA0h
// Function '?MarkBlocksForFetchesAndMemexports@CFG@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CAA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CAA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CAA0);
		  /* 8223CAA0h */ case    0:  		/* lwz R8, <#[R11 + 4]> */
		/* 8223CAA0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8223CAA0h case    0:*/		return 0x8223CAA4;
		  /* 8223CAA4h */ case    1:  		/* subf R10, R10, R8 */
		/* 8223CAA4h case    1:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8223CAA4h case    1:*/		return 0x8223CAA8;
		  /* 8223CAA8h */ case    2:  		/* add R3, R10, R9 */
		/* 8223CAA8h case    2:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R9);
		/* 8223CAA8h case    2:*/		return 0x8223CAAC;
		  /* 8223CAACh */ case    3:  		/* b 12 */
		/* 8223CAACh case    3:*/		return 0x8223CAB8;
		/* 8223CAACh case    3:*/		return 0x8223CAB0;
		  /* 8223CAB0h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 8223CAB0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8223CAB0h case    4:*/		return 0x8223CAB4;
		  /* 8223CAB4h */ case    5:  		/* add R3, R10, R3 */
		/* 8223CAB4h case    5:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R3);
		/* 8223CAB4h case    5:*/		return 0x8223CAB8;
	}
	return 0x8223CAB8;
} // Block from 8223CAA0h-8223CAB8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223CAB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CAB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CAB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CAB8);
		  /* 8223CAB8h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 8223CAB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8223CAB8h case    0:*/		return 0x8223CABC;
		  /* 8223CABCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8223CABCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223CABCh case    1:*/		return 0x8223CAC0;
		  /* 8223CAC0h */ case    2:  		/* bc 4, CR6_EQ, -16 */
		/* 8223CAC0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8223CAB0;  }
		/* 8223CAC0h case    2:*/		return 0x8223CAC4;
		  /* 8223CAC4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8223CAC4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223CAC4h case    3:*/		return 0x8223CAC8;
	}
	return 0x8223CAC8;
} // Block from 8223CAB8h-8223CAC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223CAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CAC8);
		  /* 8223CAC8h */ case    0:  		/* li R3, 0 */
		/* 8223CAC8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223CAC8h case    0:*/		return 0x8223CACC;
		  /* 8223CACCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 8223CACCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223CACCh case    1:*/		return 0x8223CAD0;
	}
	return 0x8223CAD0;
} // Block from 8223CAC8h-8223CAD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223CAD0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CAD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CAD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CAD0);
		  /* 8223CAD0h */ case    0:  		/* mfspr R12, LR */
		/* 8223CAD0h case    0:*/		regs.R12 = regs.LR;
		/* 8223CAD0h case    0:*/		return 0x8223CAD4;
		  /* 8223CAD4h */ case    1:  		/* bl -1751160 */
		/* 8223CAD4h case    1:*/		regs.LR = 0x8223CAD8; return 0x8209125C;
		/* 8223CAD4h case    1:*/		return 0x8223CAD8;
		  /* 8223CAD8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223CAD8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223CAD8h case    2:*/		return 0x8223CADC;
		  /* 8223CADCh */ case    3:  		/* mr R31, R3 */
		/* 8223CADCh case    3:*/		regs.R31 = regs.R3;
		/* 8223CADCh case    3:*/		return 0x8223CAE0;
		  /* 8223CAE0h */ case    4:  		/* cmpwi CR6, R4, 12248 */
		/* 8223CAE0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00002FD8);
		/* 8223CAE0h case    4:*/		return 0x8223CAE4;
		  /* 8223CAE4h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 8223CAE4h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8223CAEC;  }
		/* 8223CAE4h case    5:*/		return 0x8223CAE8;
		  /* 8223CAE8h */ case    6:  		/* li R4, 12248 */
		/* 8223CAE8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x2FD8);
		/* 8223CAE8h case    6:*/		return 0x8223CAEC;
	}
	return 0x8223CAEC;
} // Block from 8223CAD0h-8223CAECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223CAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CAEC);
		  /* 8223CAECh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8223CAECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223CAECh case    0:*/		return 0x8223CAF0;
		  /* 8223CAF0h */ case    1:  		/* addi R30, R4, 8 */
		/* 8223CAF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R4,0x8);
		/* 8223CAF0h case    1:*/		return 0x8223CAF4;
		  /* 8223CAF4h */ case    2:  		/* lwz R29, <#[R31 + 4]> */
		/* 8223CAF4h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 8223CAF4h case    2:*/		return 0x8223CAF8;
		  /* 8223CAF8h */ case    3:  		/* mr R4, R30 */
		/* 8223CAF8h case    3:*/		regs.R4 = regs.R30;
		/* 8223CAF8h case    3:*/		return 0x8223CAFC;
		  /* 8223CAFCh */ case    4:  		/* lwz R10, <#[R11 + 1440]> */
		/* 8223CAFCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x000005A0) );
		/* 8223CAFCh case    4:*/		return 0x8223CB00;
		  /* 8223CB00h */ case    5:  		/* lwz R3, <#[R11 + 1444]> */
		/* 8223CB00h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005A4) );
		/* 8223CB00h case    5:*/		return 0x8223CB04;
		  /* 8223CB04h */ case    6:  		/* mtspr CTR, R10 */
		/* 8223CB04h case    6:*/		regs.CTR = regs.R10;
		/* 8223CB04h case    6:*/		return 0x8223CB08;
		  /* 8223CB08h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8223CB08h case    7:*/		if ( 1 ) { regs.LR = 0x8223CB0C; return (uint32)regs.CTR; }
		/* 8223CB08h case    7:*/		return 0x8223CB0C;
		  /* 8223CB0Ch */ case    8:  		/* stw R3, <#[R31 + 4]> */
		/* 8223CB0Ch case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8223CB0Ch case    8:*/		return 0x8223CB10;
		  /* 8223CB10h */ case    9:  		/* stw R29, <#[R3]> */
		/* 8223CB10h case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 8223CB10h case    9:*/		return 0x8223CB14;
		  /* 8223CB14h */ case   10:  		/* lwz R11, <#[R31 + 4]> */
		/* 8223CB14h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8223CB14h case   10:*/		return 0x8223CB18;
		  /* 8223CB18h */ case   11:  		/* stw R30, <#[R11 + 4]> */
		/* 8223CB18h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 8223CB18h case   11:*/		return 0x8223CB1C;
		  /* 8223CB1Ch */ case   12:  		/* lwz R10, <#[R31 + 4]> */
		/* 8223CB1Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8223CB1Ch case   12:*/		return 0x8223CB20;
		  /* 8223CB20h */ case   13:  		/* addi R11, R10, 8 */
		/* 8223CB20h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8223CB20h case   13:*/		return 0x8223CB24;
		  /* 8223CB24h */ case   14:  		/* add R10, R10, R30 */
		/* 8223CB24h case   14:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 8223CB24h case   14:*/		return 0x8223CB28;
		  /* 8223CB28h */ case   15:  		/* stw R11, <#[R31 + 8]> */
		/* 8223CB28h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8223CB28h case   15:*/		return 0x8223CB2C;
		  /* 8223CB2Ch */ case   16:  		/* stw R11, <#[R31 + 20]> */
		/* 8223CB2Ch case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CB2Ch case   16:*/		return 0x8223CB30;
		  /* 8223CB30h */ case   17:  		/* stw R10, <#[R31 + 16]> */
		/* 8223CB30h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8223CB30h case   17:*/		return 0x8223CB34;
		  /* 8223CB34h */ case   18:  		/* addi R1, R1, 112 */
		/* 8223CB34h case   18:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223CB34h case   18:*/		return 0x8223CB38;
		  /* 8223CB38h */ case   19:  		/* b -1751180 */
		/* 8223CB38h case   19:*/		return 0x820912AC;
		/* 8223CB38h case   19:*/		return 0x8223CB3C;
		  /* 8223CB3Ch */ case   20:  		/* nop */
		/* 8223CB3Ch case   20:*/		cpu::op::nop();
		/* 8223CB3Ch case   20:*/		return 0x8223CB40;
	}
	return 0x8223CB40;
} // Block from 8223CAECh-8223CB40h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8223CB40h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CB40);
		  /* 8223CB40h */ case    0:  		/* lwz R4, <#[R3 + 20]> */
		/* 8223CB40h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000014) );
		/* 8223CB40h case    0:*/		return 0x8223CB44;
		  /* 8223CB44h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8223CB44h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8223CB44h case    1:*/		return 0x8223CB48;
		  /* 8223CB48h */ case    2:  		/* bclr 12, CR6_EQ */
		/* 8223CB48h case    2:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8223CB48h case    2:*/		return 0x8223CB4C;
	}
	return 0x8223CB4C;
} // Block from 8223CB40h-8223CB4Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223CB4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CB4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CB4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CB4C);
		  /* 8223CB4Ch */ case    0:  		/* lwz R11, <#[R3]> */
		/* 8223CB4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223CB4Ch case    0:*/		return 0x8223CB50;
		  /* 8223CB50h */ case    1:  		/* lwz R3, <#[R11 + 1448]> */
		/* 8223CB50h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005A8) );
		/* 8223CB50h case    1:*/		return 0x8223CB54;
		  /* 8223CB54h */ case    2:  		/* b -132372 */
		/* 8223CB54h case    2:*/		return 0x8221C640;
		/* 8223CB54h case    2:*/		return 0x8223CB58;
		  /* 8223CB58h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8223CB58h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223CB58h case    3:*/		return 0x8223CB5C;
	}
	return 0x8223CB5C;
} // Block from 8223CB4Ch-8223CB5Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223CB5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CB5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CB5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CB5C);
		  /* 8223CB5Ch */ case    0:  		/* nop */
		/* 8223CB5Ch case    0:*/		cpu::op::nop();
		/* 8223CB5Ch case    0:*/		return 0x8223CB60;
	}
	return 0x8223CB60;
} // Block from 8223CB5Ch-8223CB60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223CB60h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CB60);
		  /* 8223CB60h */ case    0:  		/* mfspr R12, LR */
		/* 8223CB60h case    0:*/		regs.R12 = regs.LR;
		/* 8223CB60h case    0:*/		return 0x8223CB64;
		  /* 8223CB64h */ case    1:  		/* bl -1751308 */
		/* 8223CB64h case    1:*/		regs.LR = 0x8223CB68; return 0x82091258;
		/* 8223CB64h case    1:*/		return 0x8223CB68;
		  /* 8223CB68h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8223CB68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8223CB68h case    2:*/		return 0x8223CB6C;
		  /* 8223CB6Ch */ case    3:  		/* lbz R11, <#[R3 + 5]> */
		/* 8223CB6Ch case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000005) );
		/* 8223CB6Ch case    3:*/		return 0x8223CB70;
		  /* 8223CB70h */ case    4:  		/* mr R29, R3 */
		/* 8223CB70h case    4:*/		regs.R29 = regs.R3;
		/* 8223CB70h case    4:*/		return 0x8223CB74;
		  /* 8223CB74h */ case    5:  		/* mr R31, R4 */
		/* 8223CB74h case    5:*/		regs.R31 = regs.R4;
		/* 8223CB74h case    5:*/		return 0x8223CB78;
		  /* 8223CB78h */ case    6:  		/* li R30, 4 */
		/* 8223CB78h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 8223CB78h case    6:*/		return 0x8223CB7C;
		  /* 8223CB7Ch */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 8223CB7Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223CB7Ch case    7:*/		return 0x8223CB80;
		  /* 8223CB80h */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 8223CB80h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8223CB88;  }
		/* 8223CB80h case    8:*/		return 0x8223CB84;
		  /* 8223CB84h */ case    9:  		/* li R30, 2 */
		/* 8223CB84h case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x2);
		/* 8223CB84h case    9:*/		return 0x8223CB88;
	}
	return 0x8223CB88;
} // Block from 8223CB60h-8223CB88h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223CB88h
// Function '?GroupDeclaredVFetches@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CB88);
		  /* 8223CB88h */ case    0:  		/* lwz R28, <#[R31 + 1448]> */
		/* 8223CB88h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x000005A8) );
		/* 8223CB88h case    0:*/		return 0x8223CB8C;
		  /* 8223CB8Ch */ case    1:  		/* li R4, 28 */
		/* 8223CB8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8223CB8Ch case    1:*/		return 0x8223CB90;
		  /* 8223CB90h */ case    2:  		/* mr R3, R28 */
		/* 8223CB90h case    2:*/		regs.R3 = regs.R28;
		/* 8223CB90h case    2:*/		return 0x8223CB94;
		  /* 8223CB94h */ case    3:  		/* bl -132828 */
		/* 8223CB94h case    3:*/		regs.LR = 0x8223CB98; return 0x8221C4B8;
		/* 8223CB94h case    3:*/		return 0x8223CB98;
		  /* 8223CB98h */ case    4:  		/* li R10, 1 */
		/* 8223CB98h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8223CB98h case    4:*/		return 0x8223CB9C;
		  /* 8223CB9Ch */ case    5:  		/* addic. R11, R3, 4 */
		/* 8223CB9Ch case    5:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R3,0x4);
		/* 8223CB9Ch case    5:*/		return 0x8223CBA0;
		  /* 8223CBA0h */ case    6:  		/* stw R28, <#[R3]> */
		/* 8223CBA0h case    6:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8223CBA0h case    6:*/		return 0x8223CBA4;
		  /* 8223CBA4h */ case    7:  		/* bc 12, CR0_EQ, 32 */
		/* 8223CBA4h case    7:*/		if ( regs.CR[0].eq ) { return 0x8223CBC4;  }
		/* 8223CBA4h case    7:*/		return 0x8223CBA8;
		  /* 8223CBA8h */ case    8:  		/* li R9, 0 */
		/* 8223CBA8h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8223CBA8h case    8:*/		return 0x8223CBAC;
		  /* 8223CBACh */ case    9:  		/* stw R31, <#[R11]> */
		/* 8223CBACh case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8223CBACh case    9:*/		return 0x8223CBB0;
		  /* 8223CBB0h */ case   10:  		/* stw R30, <#[R11 + 4]> */
		/* 8223CBB0h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 8223CBB0h case   10:*/		return 0x8223CBB4;
		  /* 8223CBB4h */ case   11:  		/* mr R3, R11 */
		/* 8223CBB4h case   11:*/		regs.R3 = regs.R11;
		/* 8223CBB4h case   11:*/		return 0x8223CBB8;
		  /* 8223CBB8h */ case   12:  		/* stw R10, <#[R11 + 8]> */
		/* 8223CBB8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8223CBB8h case   12:*/		return 0x8223CBBC;
		  /* 8223CBBCh */ case   13:  		/* stw R9, <#[R11 + 20]> */
		/* 8223CBBCh case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 8223CBBCh case   13:*/		return 0x8223CBC0;
		  /* 8223CBC0h */ case   14:  		/* b 8 */
		/* 8223CBC0h case   14:*/		return 0x8223CBC8;
		/* 8223CBC0h case   14:*/		return 0x8223CBC4;
	}
	return 0x8223CBC4;
} // Block from 8223CB88h-8223CBC4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223CBC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CBC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CBC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CBC4);
		  /* 8223CBC4h */ case    0:  		/* li R3, 0 */
		/* 8223CBC4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223CBC4h case    0:*/		return 0x8223CBC8;
	}
	return 0x8223CBC8;
} // Block from 8223CBC4h-8223CBC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223CBC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CBC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CBC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CBC8);
		  /* 8223CBC8h */ case    0:  		/* li R11, 0 */
		/* 8223CBC8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223CBC8h case    0:*/		return 0x8223CBCC;
		  /* 8223CBCCh */ case    1:  		/* stw R29, <#[R3 + 12]> */
		/* 8223CBCCh case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223CBCCh case    1:*/		return 0x8223CBD0;
		  /* 8223CBD0h */ case    2:  		/* stw R10, <#[R3 + 8]> */
		/* 8223CBD0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 8223CBD0h case    2:*/		return 0x8223CBD4;
		  /* 8223CBD4h */ case    3:  		/* stw R11, <#[R3 + 16]> */
		/* 8223CBD4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8223CBD4h case    3:*/		return 0x8223CBD8;
		  /* 8223CBD8h */ case    4:  		/* addi R1, R1, 128 */
		/* 8223CBD8h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223CBD8h case    4:*/		return 0x8223CBDC;
		  /* 8223CBDCh */ case    5:  		/* b -1751348 */
		/* 8223CBDCh case    5:*/		return 0x820912A8;
		/* 8223CBDCh case    5:*/		return 0x8223CBE0;
	}
	return 0x8223CBE0;
} // Block from 8223CBC8h-8223CBE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223CBE0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CBE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CBE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CBE0);
		  /* 8223CBE0h */ case    0:  		/* mfspr R12, LR */
		/* 8223CBE0h case    0:*/		regs.R12 = regs.LR;
		/* 8223CBE0h case    0:*/		return 0x8223CBE4;
		  /* 8223CBE4h */ case    1:  		/* bl -1751436 */
		/* 8223CBE4h case    1:*/		regs.LR = 0x8223CBE8; return 0x82091258;
		/* 8223CBE4h case    1:*/		return 0x8223CBE8;
		  /* 8223CBE8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8223CBE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8223CBE8h case    2:*/		return 0x8223CBEC;
		  /* 8223CBECh */ case    3:  		/* mr R30, R3 */
		/* 8223CBECh case    3:*/		regs.R30 = regs.R3;
		/* 8223CBECh case    3:*/		return 0x8223CBF0;
		  /* 8223CBF0h */ case    4:  		/* mr R29, R4 */
		/* 8223CBF0h case    4:*/		regs.R29 = regs.R4;
		/* 8223CBF0h case    4:*/		return 0x8223CBF4;
		  /* 8223CBF4h */ case    5:  		/* mr R31, R5 */
		/* 8223CBF4h case    5:*/		regs.R31 = regs.R5;
		/* 8223CBF4h case    5:*/		return 0x8223CBF8;
		  /* 8223CBF8h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8223CBF8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8223CBF8h case    6:*/		return 0x8223CBFC;
		  /* 8223CBFCh */ case    7:  		/* bc 12, CR6_EQ, 100 */
		/* 8223CBFCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8223CC60;  }
		/* 8223CBFCh case    7:*/		return 0x8223CC00;
		  /* 8223CC00h */ case    8:  		/* cmplwi CR6, R4, 0 */
		/* 8223CC00h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8223CC00h case    8:*/		return 0x8223CC04;
		  /* 8223CC04h */ case    9:  		/* bc 12, CR6_EQ, 92 */
		/* 8223CC04h case    9:*/		if ( regs.CR[6].eq ) { return 0x8223CC60;  }
		/* 8223CC04h case    9:*/		return 0x8223CC08;
		  /* 8223CC08h */ case   10:  		/* lwz R28, <#[R5 + 1448]> */
		/* 8223CC08h case   10:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R5 + 0x000005A8) );
		/* 8223CC08h case   10:*/		return 0x8223CC0C;
		  /* 8223CC0Ch */ case   11:  		/* li R4, 28 */
		/* 8223CC0Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8223CC0Ch case   11:*/		return 0x8223CC10;
		  /* 8223CC10h */ case   12:  		/* mr R3, R28 */
		/* 8223CC10h case   12:*/		regs.R3 = regs.R28;
		/* 8223CC10h case   12:*/		return 0x8223CC14;
		  /* 8223CC14h */ case   13:  		/* bl -132956 */
		/* 8223CC14h case   13:*/		regs.LR = 0x8223CC18; return 0x8221C4B8;
		/* 8223CC14h case   13:*/		return 0x8223CC18;
		  /* 8223CC18h */ case   14:  		/* addic. R11, R3, 4 */
		/* 8223CC18h case   14:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R3,0x4);
		/* 8223CC18h case   14:*/		return 0x8223CC1C;
		  /* 8223CC1Ch */ case   15:  		/* stw R28, <#[R3]> */
		/* 8223CC1Ch case   15:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8223CC1Ch case   15:*/		return 0x8223CC20;
		  /* 8223CC20h */ case   16:  		/* bc 12, CR0_EQ, 40 */
		/* 8223CC20h case   16:*/		if ( regs.CR[0].eq ) { return 0x8223CC48;  }
		/* 8223CC20h case   16:*/		return 0x8223CC24;
		  /* 8223CC24h */ case   17:  		/* li R10, 14 */
		/* 8223CC24h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0xE);
		/* 8223CC24h case   17:*/		return 0x8223CC28;
		  /* 8223CC28h */ case   18:  		/* stw R31, <#[R11]> */
		/* 8223CC28h case   18:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8223CC28h case   18:*/		return 0x8223CC2C;
		  /* 8223CC2Ch */ case   19:  		/* li R9, 1 */
		/* 8223CC2Ch case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8223CC2Ch case   19:*/		return 0x8223CC30;
		  /* 8223CC30h */ case   20:  		/* li R8, 0 */
		/* 8223CC30h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8223CC30h case   20:*/		return 0x8223CC34;
		  /* 8223CC34h */ case   21:  		/* stw R10, <#[R11 + 4]> */
		/* 8223CC34h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8223CC34h case   21:*/		return 0x8223CC38;
		  /* 8223CC38h */ case   22:  		/* stw R9, <#[R11 + 8]> */
		/* 8223CC38h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8223CC38h case   22:*/		return 0x8223CC3C;
		  /* 8223CC3Ch */ case   23:  		/* mr R3, R11 */
		/* 8223CC3Ch case   23:*/		regs.R3 = regs.R11;
		/* 8223CC3Ch case   23:*/		return 0x8223CC40;
		  /* 8223CC40h */ case   24:  		/* stw R8, <#[R11 + 20]> */
		/* 8223CC40h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000014) );
		/* 8223CC40h case   24:*/		return 0x8223CC44;
		  /* 8223CC44h */ case   25:  		/* b 8 */
		/* 8223CC44h case   25:*/		return 0x8223CC4C;
		/* 8223CC44h case   25:*/		return 0x8223CC48;
	}
	return 0x8223CC48;
} // Block from 8223CBE0h-8223CC48h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8223CC48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CC48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CC48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CC48);
		  /* 8223CC48h */ case    0:  		/* li R3, 0 */
		/* 8223CC48h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223CC48h case    0:*/		return 0x8223CC4C;
	}
	return 0x8223CC4C;
} // Block from 8223CC48h-8223CC4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223CC4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CC4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CC4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CC4C);
		  /* 8223CC4Ch */ case    0:  		/* li R11, 2 */
		/* 8223CC4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8223CC4Ch case    0:*/		return 0x8223CC50;
		  /* 8223CC50h */ case    1:  		/* stw R30, <#[R3 + 12]> */
		/* 8223CC50h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223CC50h case    1:*/		return 0x8223CC54;
		  /* 8223CC54h */ case    2:  		/* stw R29, <#[R3 + 16]> */
		/* 8223CC54h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000010) );
		/* 8223CC54h case    2:*/		return 0x8223CC58;
		  /* 8223CC58h */ case    3:  		/* stw R11, <#[R3 + 8]> */
		/* 8223CC58h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8223CC58h case    3:*/		return 0x8223CC5C;
		  /* 8223CC5Ch */ case    4:  		/* b 16 */
		/* 8223CC5Ch case    4:*/		return 0x8223CC6C;
		/* 8223CC5Ch case    4:*/		return 0x8223CC60;
	}
	return 0x8223CC60;
} // Block from 8223CC4Ch-8223CC60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223CC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CC60);
		  /* 8223CC60h */ case    0:  		/* mr R4, R31 */
		/* 8223CC60h case    0:*/		regs.R4 = regs.R31;
		/* 8223CC60h case    0:*/		return 0x8223CC64;
		  /* 8223CC64h */ case    1:  		/* mr R3, R30 */
		/* 8223CC64h case    1:*/		regs.R3 = regs.R30;
		/* 8223CC64h case    1:*/		return 0x8223CC68;
		  /* 8223CC68h */ case    2:  		/* bl -264 */
		/* 8223CC68h case    2:*/		regs.LR = 0x8223CC6C; return 0x8223CB60;
		/* 8223CC68h case    2:*/		return 0x8223CC6C;
	}
	return 0x8223CC6C;
} // Block from 8223CC60h-8223CC6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223CC6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CC6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CC6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CC6C);
		  /* 8223CC6Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8223CC6Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223CC6Ch case    0:*/		return 0x8223CC70;
		  /* 8223CC70h */ case    1:  		/* b -1751496 */
		/* 8223CC70h case    1:*/		return 0x820912A8;
		/* 8223CC70h case    1:*/		return 0x8223CC74;
		  /* 8223CC74h */ case    2:  		/* nop */
		/* 8223CC74h case    2:*/		cpu::op::nop();
		/* 8223CC74h case    2:*/		return 0x8223CC78;
		  /* 8223CC78h */ case    3:  		/* li R10, 0 */
		/* 8223CC78h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8223CC78h case    3:*/		return 0x8223CC7C;
		  /* 8223CC7Ch */ case    4:  		/* mr R11, R3 */
		/* 8223CC7Ch case    4:*/		regs.R11 = regs.R3;
		/* 8223CC7Ch case    4:*/		return 0x8223CC80;
		  /* 8223CC80h */ case    5:  		/* lwz R9, <#[R11]> */
		/* 8223CC80h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8223CC80h case    5:*/		return 0x8223CC84;
		  /* 8223CC84h */ case    6:  		/* cmpw CR6, R9, R4 */
		/* 8223CC84h case    6:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R4);
		/* 8223CC84h case    6:*/		return 0x8223CC88;
		  /* 8223CC88h */ case    7:  		/* bclr 12, CR6_EQ */
		/* 8223CC88h case    7:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8223CC88h case    7:*/		return 0x8223CC8C;
	}
	return 0x8223CC8C;
} // Block from 8223CC6Ch-8223CC8Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8223CC8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CC8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CC8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CC8C);
		  /* 8223CC8Ch */ case    0:  		/* cmpwi CR6, R9, -1 */
		/* 8223CC8Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8223CC8Ch case    0:*/		return 0x8223CC90;
		  /* 8223CC90h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 8223CC90h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223CCC8;  }
		/* 8223CC90h case    1:*/		return 0x8223CC94;
		  /* 8223CC94h */ case    2:  		/* addi R10, R10, 1 */
		/* 8223CC94h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8223CC94h case    2:*/		return 0x8223CC98;
		  /* 8223CC98h */ case    3:  		/* addi R11, R11, 4 */
		/* 8223CC98h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223CC98h case    3:*/		return 0x8223CC9C;
		  /* 8223CC9Ch */ case    4:  		/* cmpwi CR6, R10, 64 */
		/* 8223CC9Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000040);
		/* 8223CC9Ch case    4:*/		return 0x8223CCA0;
		  /* 8223CCA0h */ case    5:  		/* bc 12, CR6_LT, -32 */
		/* 8223CCA0h case    5:*/		if ( regs.CR[6].lt ) { return 0x8223CC80;  }
		/* 8223CCA0h case    5:*/		return 0x8223CCA4;
		  /* 8223CCA4h */ case    6:  		/* lis R11, -32252 */
		/* 8223CCA4h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223CCA4h case    6:*/		return 0x8223CCA8;
		  /* 8223CCA8h */ case    7:  		/* lis R10, -32255 */
		/* 8223CCA8h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8223CCA8h case    7:*/		return 0x8223CCAC;
		  /* 8223CCACh */ case    8:  		/* lis R9, -32253 */
		/* 8223CCACh case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223CCACh case    8:*/		return 0x8223CCB0;
		  /* 8223CCB0h */ case    9:  		/* addi R6, R11, 9640 */
		/* 8223CCB0h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x25A8);
		/* 8223CCB0h case    9:*/		return 0x8223CCB4;
		  /* 8223CCB4h */ case   10:  		/* addi R5, R10, 5216 */
		/* 8223CCB4h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 8223CCB4h case   10:*/		return 0x8223CCB8;
		  /* 8223CCB8h */ case   11:  		/* addi R4, R9, 27460 */
		/* 8223CCB8h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223CCB8h case   11:*/		return 0x8223CCBC;
		  /* 8223CCBCh */ case   12:  		/* li R7, 214 */
		/* 8223CCBCh case   12:*/		cpu::op::li<0>(regs,&regs.R7,0xD6);
		/* 8223CCBCh case   12:*/		return 0x8223CCC0;
		  /* 8223CCC0h */ case   13:  		/* li R3, 0 */
		/* 8223CCC0h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223CCC0h case   13:*/		return 0x8223CCC4;
		  /* 8223CCC4h */ case   14:  		/* b -938172 */
		/* 8223CCC4h case   14:*/		return 0x82157C08;
		/* 8223CCC4h case   14:*/		return 0x8223CCC8;
	}
	return 0x8223CCC8;
} // Block from 8223CC8Ch-8223CCC8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223CCC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CCC8);
		  /* 8223CCC8h */ case    0:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8223CCC8h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8223CCC8h case    0:*/		return 0x8223CCCC;
		  /* 8223CCCCh */ case    1:  		/* stwx R4, <#[R11 + R3]> */
		/* 8223CCCCh case    1:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8223CCCCh case    1:*/		return 0x8223CCD0;
		  /* 8223CCD0h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8223CCD0h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223CCD0h case    2:*/		return 0x8223CCD4;
	}
	return 0x8223CCD4;
} // Block from 8223CCC8h-8223CCD4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223CCD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CCD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CCD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CCD4);
		  /* 8223CCD4h */ case    0:  		/* nop */
		/* 8223CCD4h case    0:*/		cpu::op::nop();
		/* 8223CCD4h case    0:*/		return 0x8223CCD8;
	}
	return 0x8223CCD8;
} // Block from 8223CCD4h-8223CCD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223CCD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CCD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CCD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CCD8);
		  /* 8223CCD8h */ case    0:  		/* mfspr R12, LR */
		/* 8223CCD8h case    0:*/		regs.R12 = regs.LR;
		/* 8223CCD8h case    0:*/		return 0x8223CCDC;
		  /* 8223CCDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223CCDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223CCDCh case    1:*/		return 0x8223CCE0;
		  /* 8223CCE0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223CCE0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223CCE0h case    2:*/		return 0x8223CCE4;
		  /* 8223CCE4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223CCE4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223CCE4h case    3:*/		return 0x8223CCE8;
		  /* 8223CCE8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223CCE8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223CCE8h case    4:*/		return 0x8223CCEC;
		  /* 8223CCECh */ case    5:  		/* lbz R11, <#[R3 + 1]> */
		/* 8223CCECh case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000001) );
		/* 8223CCECh case    5:*/		return 0x8223CCF0;
		  /* 8223CCF0h */ case    6:  		/* mr R30, R3 */
		/* 8223CCF0h case    6:*/		regs.R30 = regs.R3;
		/* 8223CCF0h case    6:*/		return 0x8223CCF4;
		  /* 8223CCF4h */ case    7:  		/* lwz R3, <#[R4 + 1360]> */
		/* 8223CCF4h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000550) );
		/* 8223CCF4h case    7:*/		return 0x8223CCF8;
		  /* 8223CCF8h */ case    8:  		/* mr R31, R4 */
		/* 8223CCF8h case    8:*/		regs.R31 = regs.R4;
		/* 8223CCF8h case    8:*/		return 0x8223CCFC;
		  /* 8223CCFCh */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8223CCFCh case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223CCFCh case    9:*/		return 0x8223CD00;
		  /* 8223CD00h */ case   10:  		/* bc 4, CR0_EQ, 24 */
		/* 8223CD00h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8223CD18;  }
		/* 8223CD00h case   10:*/		return 0x8223CD04;
		  /* 8223CD04h */ case   11:  		/* li R11, 1 */
		/* 8223CD04h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223CD04h case   11:*/		return 0x8223CD08;
		  /* 8223CD08h */ case   12:  		/* stb R11, <#[R4 + 1380]> */
		/* 8223CD08h case   12:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R4 + 0x00000564) );
		/* 8223CD08h case   12:*/		return 0x8223CD0C;
		  /* 8223CD0Ch */ case   13:  		/* lwz R11, <#[R3]> */
		/* 8223CD0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223CD0Ch case   13:*/		return 0x8223CD10;
		  /* 8223CD10h */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 8223CD10h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8223CD10h case   14:*/		return 0x8223CD14;
		  /* 8223CD14h */ case   15:  		/* b 20 */
		/* 8223CD14h case   15:*/		return 0x8223CD28;
		/* 8223CD14h case   15:*/		return 0x8223CD18;
	}
	return 0x8223CD18;
} // Block from 8223CCD8h-8223CD18h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8223CD18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CD18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CD18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CD18);
		  /* 8223CD18h */ case    0:  		/* li R11, 0 */
		/* 8223CD18h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223CD18h case    0:*/		return 0x8223CD1C;
		  /* 8223CD1Ch */ case    1:  		/* stb R11, <#[R31 + 1380]> */
		/* 8223CD1Ch case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000564) );
		/* 8223CD1Ch case    1:*/		return 0x8223CD20;
		  /* 8223CD20h */ case    2:  		/* lwz R11, <#[R3]> */
		/* 8223CD20h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223CD20h case    2:*/		return 0x8223CD24;
		  /* 8223CD24h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 8223CD24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8223CD24h case    3:*/		return 0x8223CD28;
	}
	return 0x8223CD28;
} // Block from 8223CD18h-8223CD28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223CD28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CD28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CD28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CD28);
		  /* 8223CD28h */ case    0:  		/* mtspr CTR, R11 */
		/* 8223CD28h case    0:*/		regs.CTR = regs.R11;
		/* 8223CD28h case    0:*/		return 0x8223CD2C;
		  /* 8223CD2Ch */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 8223CD2Ch case    1:*/		if ( 1 ) { regs.LR = 0x8223CD30; return (uint32)regs.CTR; }
		/* 8223CD2Ch case    1:*/		return 0x8223CD30;
		  /* 8223CD30h */ case    2:  		/* lbz R11, <#[R30]> */
		/* 8223CD30h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223CD30h case    2:*/		return 0x8223CD34;
		  /* 8223CD34h */ case    3:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223CD34h case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223CD34h case    3:*/		return 0x8223CD38;
		  /* 8223CD38h */ case    4:  		/* stb R11, <#[R31 + 2028]> */
		/* 8223CD38h case    4:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x000007EC) );
		/* 8223CD38h case    4:*/		return 0x8223CD3C;
		  /* 8223CD3Ch */ case    5:  		/* addi R1, R1, 112 */
		/* 8223CD3Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223CD3Ch case    5:*/		return 0x8223CD40;
		  /* 8223CD40h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223CD40h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223CD40h case    6:*/		return 0x8223CD44;
		  /* 8223CD44h */ case    7:  		/* mtspr LR, R12 */
		/* 8223CD44h case    7:*/		regs.LR = regs.R12;
		/* 8223CD44h case    7:*/		return 0x8223CD48;
		  /* 8223CD48h */ case    8:  		/* ld R30, <#[R1 - 24]> */
		/* 8223CD48h case    8:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223CD48h case    8:*/		return 0x8223CD4C;
		  /* 8223CD4Ch */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 8223CD4Ch case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223CD4Ch case    9:*/		return 0x8223CD50;
		  /* 8223CD50h */ case   10:  		/* bclr 20, CR0_LT */
		/* 8223CD50h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223CD50h case   10:*/		return 0x8223CD54;
	}
	return 0x8223CD54;
} // Block from 8223CD28h-8223CD54h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8223CD54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CD54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CD54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CD54);
		  /* 8223CD54h */ case    0:  		/* nop */
		/* 8223CD54h case    0:*/		cpu::op::nop();
		/* 8223CD54h case    0:*/		return 0x8223CD58;
		  /* 8223CD58h */ case    1:  		/* lwz R10, <#[R3]> */
		/* 8223CD58h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8223CD58h case    1:*/		return 0x8223CD5C;
		  /* 8223CD5Ch */ case    2:  		/* li R11, 100 */
		/* 8223CD5Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223CD5Ch case    2:*/		return 0x8223CD60;
		  /* 8223CD60h */ case    3:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223CD60h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223CD60h case    3:*/		return 0x8223CD64;
		  /* 8223CD64h */ case    4:  		/* subfc R9, R11, R10 */
		/* 8223CD64h case    4:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223CD64h case    4:*/		return 0x8223CD68;
		  /* 8223CD68h */ case    5:  		/* eqv R11, R11, R10 */
		/* 8223CD68h case    5:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223CD68h case    5:*/		return 0x8223CD6C;
		  /* 8223CD6Ch */ case    6:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223CD6Ch case    6:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223CD6Ch case    6:*/		return 0x8223CD70;
		  /* 8223CD70h */ case    7:  		/* addze R11, R11 */
		/* 8223CD70h case    7:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223CD70h case    7:*/		return 0x8223CD74;
		  /* 8223CD74h */ case    8:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223CD74h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223CD74h case    8:*/		return 0x8223CD78;
		  /* 8223CD78h */ case    9:  		/* subfic R11, R11, 0 */
		/* 8223CD78h case    9:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223CD78h case    9:*/		return 0x8223CD7C;
		  /* 8223CD7Ch */ case   10:  		/* subfe R11, R11, R11 */
		/* 8223CD7Ch case   10:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223CD7Ch case   10:*/		return 0x8223CD80;
		  /* 8223CD80h */ case   11:  		/* and R11, R11, R10 */
		/* 8223CD80h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223CD80h case   11:*/		return 0x8223CD84;
		  /* 8223CD84h */ case   12:  		/* cmpwi CR6, R11, 8 */
		/* 8223CD84h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8223CD84h case   12:*/		return 0x8223CD88;
		  /* 8223CD88h */ case   13:  		/* bc 12, CR6_EQ, 44 */
		/* 8223CD88h case   13:*/		if ( regs.CR[6].eq ) { return 0x8223CDB4;  }
		/* 8223CD88h case   13:*/		return 0x8223CD8C;
		  /* 8223CD8Ch */ case   14:  		/* cmpwi CR6, R11, 9 */
		/* 8223CD8Ch case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8223CD8Ch case   14:*/		return 0x8223CD90;
		  /* 8223CD90h */ case   15:  		/* bc 12, CR6_EQ, 28 */
		/* 8223CD90h case   15:*/		if ( regs.CR[6].eq ) { return 0x8223CDAC;  }
		/* 8223CD90h case   15:*/		return 0x8223CD94;
		  /* 8223CD94h */ case   16:  		/* cmpwi CR6, R11, 113 */
		/* 8223CD94h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000071);
		/* 8223CD94h case   16:*/		return 0x8223CD98;
		  /* 8223CD98h */ case   17:  		/* bc 12, CR6_EQ, 28 */
		/* 8223CD98h case   17:*/		if ( regs.CR[6].eq ) { return 0x8223CDB4;  }
		/* 8223CD98h case   17:*/		return 0x8223CD9C;
		  /* 8223CD9Ch */ case   18:  		/* cmpwi CR6, R11, 114 */
		/* 8223CD9Ch case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000072);
		/* 8223CD9Ch case   18:*/		return 0x8223CDA0;
		  /* 8223CDA0h */ case   19:  		/* bc 12, CR6_EQ, 12 */
		/* 8223CDA0h case   19:*/		if ( regs.CR[6].eq ) { return 0x8223CDAC;  }
		/* 8223CDA0h case   19:*/		return 0x8223CDA4;
		  /* 8223CDA4h */ case   20:  		/* li R3, 0 */
		/* 8223CDA4h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223CDA4h case   20:*/		return 0x8223CDA8;
		  /* 8223CDA8h */ case   21:  		/* bclr 20, CR0_LT */
		/* 8223CDA8h case   21:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223CDA8h case   21:*/		return 0x8223CDAC;
	}
	return 0x8223CDAC;
} // Block from 8223CD54h-8223CDACh (22 instructions)

//////////////////////////////////////////////////////
// Block at 8223CDACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CDAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CDAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CDAC);
		  /* 8223CDACh */ case    0:  		/* lhz R3, <#[R3 + 10]> */
		/* 8223CDACh case    0:*/		cpu::mem::load16z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000A) );
		/* 8223CDACh case    0:*/		return 0x8223CDB0;
		  /* 8223CDB0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8223CDB0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223CDB0h case    1:*/		return 0x8223CDB4;
	}
	return 0x8223CDB4;
} // Block from 8223CDACh-8223CDB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223CDB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CDB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CDB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CDB4);
		  /* 8223CDB4h */ case    0:  		/* lhz R3, <#[R3 + 6]> */
		/* 8223CDB4h case    0:*/		cpu::mem::load16z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000006) );
		/* 8223CDB4h case    0:*/		return 0x8223CDB8;
		  /* 8223CDB8h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8223CDB8h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223CDB8h case    1:*/		return 0x8223CDBC;
	}
	return 0x8223CDBC;
} // Block from 8223CDB4h-8223CDBCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223CDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CDBC);
		  /* 8223CDBCh */ case    0:  		/* nop */
		/* 8223CDBCh case    0:*/		cpu::op::nop();
		/* 8223CDBCh case    0:*/		return 0x8223CDC0;
		  /* 8223CDC0h */ case    1:  		/* lwz R10, <#[R3]> */
		/* 8223CDC0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8223CDC0h case    1:*/		return 0x8223CDC4;
		  /* 8223CDC4h */ case    2:  		/* li R11, 100 */
		/* 8223CDC4h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223CDC4h case    2:*/		return 0x8223CDC8;
		  /* 8223CDC8h */ case    3:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223CDC8h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223CDC8h case    3:*/		return 0x8223CDCC;
		  /* 8223CDCCh */ case    4:  		/* subfc R9, R11, R10 */
		/* 8223CDCCh case    4:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223CDCCh case    4:*/		return 0x8223CDD0;
		  /* 8223CDD0h */ case    5:  		/* eqv R11, R11, R10 */
		/* 8223CDD0h case    5:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223CDD0h case    5:*/		return 0x8223CDD4;
		  /* 8223CDD4h */ case    6:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223CDD4h case    6:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223CDD4h case    6:*/		return 0x8223CDD8;
		  /* 8223CDD8h */ case    7:  		/* addze R11, R11 */
		/* 8223CDD8h case    7:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223CDD8h case    7:*/		return 0x8223CDDC;
		  /* 8223CDDCh */ case    8:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223CDDCh case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223CDDCh case    8:*/		return 0x8223CDE0;
		  /* 8223CDE0h */ case    9:  		/* subfic R11, R11, 0 */
		/* 8223CDE0h case    9:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223CDE0h case    9:*/		return 0x8223CDE4;
		  /* 8223CDE4h */ case   10:  		/* subfe R11, R11, R11 */
		/* 8223CDE4h case   10:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223CDE4h case   10:*/		return 0x8223CDE8;
		  /* 8223CDE8h */ case   11:  		/* and R11, R11, R10 */
		/* 8223CDE8h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223CDE8h case   11:*/		return 0x8223CDEC;
		  /* 8223CDECh */ case   12:  		/* cmpwi CR6, R11, 52 */
		/* 8223CDECh case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000034);
		/* 8223CDECh case   12:*/		return 0x8223CDF0;
		  /* 8223CDF0h */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 8223CDF0h case   13:*/		if ( regs.CR[6].eq ) { return 0x8223CE00;  }
		/* 8223CDF0h case   13:*/		return 0x8223CDF4;
		  /* 8223CDF4h */ case   14:  		/* cmpwi CR6, R11, 53 */
		/* 8223CDF4h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 8223CDF4h case   14:*/		return 0x8223CDF8;
		  /* 8223CDF8h */ case   15:  		/* li R11, 0 */
		/* 8223CDF8h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223CDF8h case   15:*/		return 0x8223CDFC;
		  /* 8223CDFCh */ case   16:  		/* bc 4, CR6_EQ, 8 */
		/* 8223CDFCh case   16:*/		if ( !regs.CR[6].eq ) { return 0x8223CE04;  }
		/* 8223CDFCh case   16:*/		return 0x8223CE00;
	}
	return 0x8223CE00;
} // Block from 8223CDBCh-8223CE00h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8223CE00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CE00);
		  /* 8223CE00h */ case    0:  		/* li R11, 1 */
		/* 8223CE00h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223CE00h case    0:*/		return 0x8223CE04;
	}
	return 0x8223CE04;
} // Block from 8223CE00h-8223CE04h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223CE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CE04);
		  /* 8223CE04h */ case    0:  		/* rlwinm R3, R11, 0, 24, 31 */
		/* 8223CE04h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R3,regs.R11);
		/* 8223CE04h case    0:*/		return 0x8223CE08;
		  /* 8223CE08h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8223CE08h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223CE08h case    1:*/		return 0x8223CE0C;
	}
	return 0x8223CE0C;
} // Block from 8223CE04h-8223CE0Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223CE0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CE0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CE0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CE0C);
		  /* 8223CE0Ch */ case    0:  		/* nop */
		/* 8223CE0Ch case    0:*/		cpu::op::nop();
		/* 8223CE0Ch case    0:*/		return 0x8223CE10;
	}
	return 0x8223CE10;
} // Block from 8223CE0Ch-8223CE10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223CE10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CE10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CE10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CE10);
		  /* 8223CE10h */ case    0:  		/* mfspr R12, LR */
		/* 8223CE10h case    0:*/		regs.R12 = regs.LR;
		/* 8223CE10h case    0:*/		return 0x8223CE14;
		  /* 8223CE14h */ case    1:  		/* bl -1751992 */
		/* 8223CE14h case    1:*/		regs.LR = 0x8223CE18; return 0x8209125C;
		/* 8223CE14h case    1:*/		return 0x8223CE18;
		  /* 8223CE18h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223CE18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223CE18h case    2:*/		return 0x8223CE1C;
		  /* 8223CE1Ch */ case    3:  		/* lwz R11, <#[R3 + 20]> */
		/* 8223CE1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8223CE1Ch case    3:*/		return 0x8223CE20;
		  /* 8223CE20h */ case    4:  		/* li R10, 100 */
		/* 8223CE20h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x64);
		/* 8223CE20h case    4:*/		return 0x8223CE24;
		  /* 8223CE24h */ case    5:  		/* mr R31, R3 */
		/* 8223CE24h case    5:*/		regs.R31 = regs.R3;
		/* 8223CE24h case    5:*/		return 0x8223CE28;
		  /* 8223CE28h */ case    6:  		/* lwz R9, <#[R11]> */
		/* 8223CE28h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8223CE28h case    6:*/		return 0x8223CE2C;
		  /* 8223CE2Ch */ case    7:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 8223CE2Ch case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 8223CE2Ch case    7:*/		return 0x8223CE30;
		  /* 8223CE30h */ case    8:  		/* subfc R8, R10, R9 */
		/* 8223CE30h case    8:*/		cpu::op::subfc<0>(regs,&regs.R8,regs.R10,regs.R9);
		/* 8223CE30h case    8:*/		return 0x8223CE34;
		  /* 8223CE34h */ case    9:  		/* eqv R10, R10, R9 */
		/* 8223CE34h case    9:*/		cpu::op::eqv<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8223CE34h case    9:*/		return 0x8223CE38;
		  /* 8223CE38h */ case   10:  		/* rlwinm R10, R10, 1, 31, 31 */
		/* 8223CE38h case   10:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R10);
		/* 8223CE38h case   10:*/		return 0x8223CE3C;
		  /* 8223CE3Ch */ case   11:  		/* addze R10, R10 */
		/* 8223CE3Ch case   11:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8223CE3Ch case   11:*/		return 0x8223CE40;
		  /* 8223CE40h */ case   12:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 8223CE40h case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8223CE40h case   12:*/		return 0x8223CE44;
		  /* 8223CE44h */ case   13:  		/* subfic R10, R10, 0 */
		/* 8223CE44h case   13:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 8223CE44h case   13:*/		return 0x8223CE48;
		  /* 8223CE48h */ case   14:  		/* subfe R10, R10, R10 */
		/* 8223CE48h case   14:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8223CE48h case   14:*/		return 0x8223CE4C;
		  /* 8223CE4Ch */ case   15:  		/* and R29, R10, R9 */
		/* 8223CE4Ch case   15:*/		cpu::op::and<0>(regs,&regs.R29,regs.R10,regs.R9);
		/* 8223CE4Ch case   15:*/		return 0x8223CE50;
		  /* 8223CE50h */ case   16:  		/* cmpwi CR6, R29, 15 */
		/* 8223CE50h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x0000000F);
		/* 8223CE50h case   16:*/		return 0x8223CE54;
		  /* 8223CE54h */ case   17:  		/* bc 12, CR6_EQ, 348 */
		/* 8223CE54h case   17:*/		if ( regs.CR[6].eq ) { return 0x8223CFB0;  }
		/* 8223CE54h case   17:*/		return 0x8223CE58;
		  /* 8223CE58h */ case   18:  		/* cmpwi CR6, R29, 79 */
		/* 8223CE58h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x0000004F);
		/* 8223CE58h case   18:*/		return 0x8223CE5C;
		  /* 8223CE5Ch */ case   19:  		/* bc 12, CR6_EQ, 260 */
		/* 8223CE5Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x8223CF60;  }
		/* 8223CE5Ch case   19:*/		return 0x8223CE60;
		  /* 8223CE60h */ case   20:  		/* addi R11, R11, 4 */
		/* 8223CE60h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223CE60h case   20:*/		return 0x8223CE64;
		  /* 8223CE64h */ case   21:  		/* mr R3, R29 */
		/* 8223CE64h case   21:*/		regs.R3 = regs.R29;
		/* 8223CE64h case   21:*/		return 0x8223CE68;
		  /* 8223CE68h */ case   22:  		/* stw R11, <#[R31 + 20]> */
		/* 8223CE68h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CE68h case   22:*/		return 0x8223CE6C;
		  /* 8223CE6Ch */ case   23:  		/* li R30, 0 */
		/* 8223CE6Ch case   23:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223CE6Ch case   23:*/		return 0x8223CE70;
		  /* 8223CE70h */ case   24:  		/* bl 119992 */
		/* 8223CE70h case   24:*/		regs.LR = 0x8223CE74; return 0x8225A328;
		/* 8223CE70h case   24:*/		return 0x8223CE74;
		  /* 8223CE74h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 8223CE74h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8223CE74h case   25:*/		return 0x8223CE78;
		  /* 8223CE78h */ case   26:  		/* bc 4, CR0_GT, 80 */
		/* 8223CE78h case   26:*/		if ( !regs.CR[0].gt ) { return 0x8223CEC8;  }
		/* 8223CE78h case   26:*/		return 0x8223CE7C;
		  /* 8223CE7Ch */ case   27:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223CE7Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CE7Ch case   27:*/		return 0x8223CE80;
		  /* 8223CE80h */ case   28:  		/* addi R10, R11, 4 */
		/* 8223CE80h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8223CE80h case   28:*/		return 0x8223CE84;
		  /* 8223CE84h */ case   29:  		/* stw R10, <#[R31 + 20]> */
		/* 8223CE84h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CE84h case   29:*/		return 0x8223CE88;
		  /* 8223CE88h */ case   30:  		/* lwz R9, <#[R11]> */
		/* 8223CE88h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8223CE88h case   30:*/		return 0x8223CE8C;
		  /* 8223CE8Ch */ case   31:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 8223CE8Ch case   31:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 8223CE8Ch case   31:*/		return 0x8223CE90;
		  /* 8223CE90h */ case   32:  		/* bc 12, CR0_EQ, 12 */
		/* 8223CE90h case   32:*/		if ( regs.CR[0].eq ) { return 0x8223CE9C;  }
		/* 8223CE90h case   32:*/		return 0x8223CE94;
		  /* 8223CE94h */ case   33:  		/* addi R10, R10, 4 */
		/* 8223CE94h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8223CE94h case   33:*/		return 0x8223CE98;
		  /* 8223CE98h */ case   34:  		/* stw R10, <#[R31 + 20]> */
		/* 8223CE98h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CE98h case   34:*/		return 0x8223CE9C;
	}
	return 0x8223CE9C;
} // Block from 8223CE10h-8223CE9Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 8223CE9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CE9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CE9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CE9C);
		  /* 8223CE9Ch */ case    0:  		/* lwz R11, <#[R11]> */
		/* 8223CE9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8223CE9Ch case    0:*/		return 0x8223CEA0;
		  /* 8223CEA0h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 8223CEA0h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 8223CEA0h case    1:*/		return 0x8223CEA4;
		  /* 8223CEA4h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8223CEA4h case    2:*/		if ( regs.CR[0].eq ) { return 0x8223CEB4;  }
		/* 8223CEA4h case    2:*/		return 0x8223CEA8;
		  /* 8223CEA8h */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223CEA8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CEA8h case    3:*/		return 0x8223CEAC;
		  /* 8223CEACh */ case    4:  		/* addi R11, R11, 4 */
		/* 8223CEACh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223CEACh case    4:*/		return 0x8223CEB0;
		  /* 8223CEB0h */ case    5:  		/* stw R11, <#[R31 + 20]> */
		/* 8223CEB0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CEB0h case    5:*/		return 0x8223CEB4;
	}
	return 0x8223CEB4;
} // Block from 8223CE9Ch-8223CEB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223CEB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CEB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CEB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CEB4);
		  /* 8223CEB4h */ case    0:  		/* mr R3, R29 */
		/* 8223CEB4h case    0:*/		regs.R3 = regs.R29;
		/* 8223CEB4h case    0:*/		return 0x8223CEB8;
		  /* 8223CEB8h */ case    1:  		/* addi R30, R30, 1 */
		/* 8223CEB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8223CEB8h case    1:*/		return 0x8223CEBC;
		  /* 8223CEBCh */ case    2:  		/* bl 119916 */
		/* 8223CEBCh case    2:*/		regs.LR = 0x8223CEC0; return 0x8225A328;
		/* 8223CEBCh case    2:*/		return 0x8223CEC0;
		  /* 8223CEC0h */ case    3:  		/* cmpw CR6, R30, R3 */
		/* 8223CEC0h case    3:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R3);
		/* 8223CEC0h case    3:*/		return 0x8223CEC4;
		  /* 8223CEC4h */ case    4:  		/* bc 12, CR6_LT, -72 */
		/* 8223CEC4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8223CE7C;  }
		/* 8223CEC4h case    4:*/		return 0x8223CEC8;
	}
	return 0x8223CEC8;
} // Block from 8223CEB4h-8223CEC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223CEC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CEC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CEC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CEC8);
		  /* 8223CEC8h */ case    0:  		/* mr R3, R29 */
		/* 8223CEC8h case    0:*/		regs.R3 = regs.R29;
		/* 8223CEC8h case    0:*/		return 0x8223CECC;
		  /* 8223CECCh */ case    1:  		/* li R30, 0 */
		/* 8223CECCh case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223CECCh case    1:*/		return 0x8223CED0;
		  /* 8223CED0h */ case    2:  		/* bl 120024 */
		/* 8223CED0h case    2:*/		regs.LR = 0x8223CED4; return 0x8225A3A8;
		/* 8223CED0h case    2:*/		return 0x8223CED4;
		  /* 8223CED4h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 8223CED4h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8223CED4h case    3:*/		return 0x8223CED8;
		  /* 8223CED8h */ case    4:  		/* bc 4, CR0_GT, 80 */
		/* 8223CED8h case    4:*/		if ( !regs.CR[0].gt ) { return 0x8223CF28;  }
		/* 8223CED8h case    4:*/		return 0x8223CEDC;
		  /* 8223CEDCh */ case    5:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223CEDCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CEDCh case    5:*/		return 0x8223CEE0;
		  /* 8223CEE0h */ case    6:  		/* addi R10, R11, 4 */
		/* 8223CEE0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8223CEE0h case    6:*/		return 0x8223CEE4;
		  /* 8223CEE4h */ case    7:  		/* stw R10, <#[R31 + 20]> */
		/* 8223CEE4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CEE4h case    7:*/		return 0x8223CEE8;
		  /* 8223CEE8h */ case    8:  		/* lwz R9, <#[R11]> */
		/* 8223CEE8h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8223CEE8h case    8:*/		return 0x8223CEEC;
		  /* 8223CEECh */ case    9:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 8223CEECh case    9:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 8223CEECh case    9:*/		return 0x8223CEF0;
		  /* 8223CEF0h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 8223CEF0h case   10:*/		if ( regs.CR[0].eq ) { return 0x8223CEFC;  }
		/* 8223CEF0h case   10:*/		return 0x8223CEF4;
		  /* 8223CEF4h */ case   11:  		/* addi R10, R10, 4 */
		/* 8223CEF4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8223CEF4h case   11:*/		return 0x8223CEF8;
		  /* 8223CEF8h */ case   12:  		/* stw R10, <#[R31 + 20]> */
		/* 8223CEF8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CEF8h case   12:*/		return 0x8223CEFC;
	}
	return 0x8223CEFC;
} // Block from 8223CEC8h-8223CEFCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223CEFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CEFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CEFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CEFC);
		  /* 8223CEFCh */ case    0:  		/* lwz R11, <#[R11]> */
		/* 8223CEFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8223CEFCh case    0:*/		return 0x8223CF00;
		  /* 8223CF00h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 8223CF00h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 8223CF00h case    1:*/		return 0x8223CF04;
		  /* 8223CF04h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8223CF04h case    2:*/		if ( regs.CR[0].eq ) { return 0x8223CF14;  }
		/* 8223CF04h case    2:*/		return 0x8223CF08;
		  /* 8223CF08h */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223CF08h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CF08h case    3:*/		return 0x8223CF0C;
		  /* 8223CF0Ch */ case    4:  		/* addi R11, R11, 4 */
		/* 8223CF0Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223CF0Ch case    4:*/		return 0x8223CF10;
		  /* 8223CF10h */ case    5:  		/* stw R11, <#[R31 + 20]> */
		/* 8223CF10h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CF10h case    5:*/		return 0x8223CF14;
	}
	return 0x8223CF14;
} // Block from 8223CEFCh-8223CF14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223CF14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CF14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CF14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CF14);
		  /* 8223CF14h */ case    0:  		/* mr R3, R29 */
		/* 8223CF14h case    0:*/		regs.R3 = regs.R29;
		/* 8223CF14h case    0:*/		return 0x8223CF18;
		  /* 8223CF18h */ case    1:  		/* addi R30, R30, 1 */
		/* 8223CF18h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8223CF18h case    1:*/		return 0x8223CF1C;
		  /* 8223CF1Ch */ case    2:  		/* bl 119948 */
		/* 8223CF1Ch case    2:*/		regs.LR = 0x8223CF20; return 0x8225A3A8;
		/* 8223CF1Ch case    2:*/		return 0x8223CF20;
		  /* 8223CF20h */ case    3:  		/* cmpw CR6, R30, R3 */
		/* 8223CF20h case    3:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R3);
		/* 8223CF20h case    3:*/		return 0x8223CF24;
		  /* 8223CF24h */ case    4:  		/* bc 12, CR6_LT, -72 */
		/* 8223CF24h case    4:*/		if ( regs.CR[6].lt ) { return 0x8223CEDC;  }
		/* 8223CF24h case    4:*/		return 0x8223CF28;
	}
	return 0x8223CF28;
} // Block from 8223CF14h-8223CF28h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223CF28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CF28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CF28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CF28);
		  /* 8223CF28h */ case    0:  		/* mr R3, R29 */
		/* 8223CF28h case    0:*/		regs.R3 = regs.R29;
		/* 8223CF28h case    0:*/		return 0x8223CF2C;
		  /* 8223CF2Ch */ case    1:  		/* li R30, 0 */
		/* 8223CF2Ch case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223CF2Ch case    1:*/		return 0x8223CF30;
		  /* 8223CF30h */ case    2:  		/* bl 120040 */
		/* 8223CF30h case    2:*/		regs.LR = 0x8223CF34; return 0x8225A418;
		/* 8223CF30h case    2:*/		return 0x8223CF34;
		  /* 8223CF34h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 8223CF34h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8223CF34h case    3:*/		return 0x8223CF38;
		  /* 8223CF38h */ case    4:  		/* bc 4, CR0_GT, 196 */
		/* 8223CF38h case    4:*/		if ( !regs.CR[0].gt ) { return 0x8223CFFC;  }
		/* 8223CF38h case    4:*/		return 0x8223CF3C;
		  /* 8223CF3Ch */ case    5:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223CF3Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CF3Ch case    5:*/		return 0x8223CF40;
		  /* 8223CF40h */ case    6:  		/* mr R3, R29 */
		/* 8223CF40h case    6:*/		regs.R3 = regs.R29;
		/* 8223CF40h case    6:*/		return 0x8223CF44;
		  /* 8223CF44h */ case    7:  		/* addi R30, R30, 1 */
		/* 8223CF44h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8223CF44h case    7:*/		return 0x8223CF48;
		  /* 8223CF48h */ case    8:  		/* addi R11, R11, 4 */
		/* 8223CF48h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223CF48h case    8:*/		return 0x8223CF4C;
		  /* 8223CF4Ch */ case    9:  		/* stw R11, <#[R31 + 20]> */
		/* 8223CF4Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CF4Ch case    9:*/		return 0x8223CF50;
		  /* 8223CF50h */ case   10:  		/* bl 120008 */
		/* 8223CF50h case   10:*/		regs.LR = 0x8223CF54; return 0x8225A418;
		/* 8223CF50h case   10:*/		return 0x8223CF54;
		  /* 8223CF54h */ case   11:  		/* cmpw CR6, R30, R3 */
		/* 8223CF54h case   11:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R3);
		/* 8223CF54h case   11:*/		return 0x8223CF58;
		  /* 8223CF58h */ case   12:  		/* bc 12, CR6_LT, -28 */
		/* 8223CF58h case   12:*/		if ( regs.CR[6].lt ) { return 0x8223CF3C;  }
		/* 8223CF58h case   12:*/		return 0x8223CF5C;
		  /* 8223CF5Ch */ case   13:  		/* b 160 */
		/* 8223CF5Ch case   13:*/		return 0x8223CFFC;
		/* 8223CF5Ch case   13:*/		return 0x8223CF60;
	}
	return 0x8223CF60;
} // Block from 8223CF28h-8223CF60h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223CF60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CF60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CF60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CF60);
		  /* 8223CF60h */ case    0:  		/* lhz R10, <#[R11 + 2]> */
		/* 8223CF60h case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8223CF60h case    0:*/		return 0x8223CF64;
		  /* 8223CF64h */ case    1:  		/* addi R8, R11, 4 */
		/* 8223CF64h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 8223CF64h case    1:*/		return 0x8223CF68;
		  /* 8223CF68h */ case    2:  		/* cmplwi CR6, R10, 79 */
		/* 8223CF68h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000004F);
		/* 8223CF68h case    2:*/		return 0x8223CF6C;
		  /* 8223CF6Ch */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 8223CF6Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8223CF74;  }
		/* 8223CF6Ch case    3:*/		return 0x8223CF70;
		  /* 8223CF70h */ case    4:  		/* li R8, 0 */
		/* 8223CF70h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8223CF70h case    4:*/		return 0x8223CF74;
	}
	return 0x8223CF74;
} // Block from 8223CF60h-8223CF74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223CF74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CF74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CF74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CF74);
		  /* 8223CF74h */ case    0:  		/* addi R11, R11, 4 */
		/* 8223CF74h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223CF74h case    0:*/		return 0x8223CF78;
		  /* 8223CF78h */ case    1:  		/* li R9, 0 */
		/* 8223CF78h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8223CF78h case    1:*/		return 0x8223CF7C;
		  /* 8223CF7Ch */ case    2:  		/* addi R10, R11, 4 */
		/* 8223CF7Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8223CF7Ch case    2:*/		return 0x8223CF80;
		  /* 8223CF80h */ case    3:  		/* stw R11, <#[R31 + 20]> */
		/* 8223CF80h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CF80h case    3:*/		return 0x8223CF84;
		  /* 8223CF84h */ case    4:  		/* stw R10, <#[R31 + 20]> */
		/* 8223CF84h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CF84h case    4:*/		return 0x8223CF88;
		  /* 8223CF88h */ case    5:  		/* lhz R11, <#[R8 + 2]> */
		/* 8223CF88h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000002) );
		/* 8223CF88h case    5:*/		return 0x8223CF8C;
		  /* 8223CF8Ch */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 8223CF8Ch case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223CF8Ch case    6:*/		return 0x8223CF90;
		  /* 8223CF90h */ case    7:  		/* bc 12, CR0_EQ, 108 */
		/* 8223CF90h case    7:*/		if ( regs.CR[0].eq ) { return 0x8223CFFC;  }
		/* 8223CF90h case    7:*/		return 0x8223CF94;
		  /* 8223CF94h */ case    8:  		/* addi R10, R10, 4 */
		/* 8223CF94h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8223CF94h case    8:*/		return 0x8223CF98;
		  /* 8223CF98h */ case    9:  		/* addi R9, R9, 1 */
		/* 8223CF98h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8223CF98h case    9:*/		return 0x8223CF9C;
		  /* 8223CF9Ch */ case   10:  		/* stw R10, <#[R31 + 20]> */
		/* 8223CF9Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CF9Ch case   10:*/		return 0x8223CFA0;
		  /* 8223CFA0h */ case   11:  		/* lhz R11, <#[R8 + 2]> */
		/* 8223CFA0h case   11:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000002) );
		/* 8223CFA0h case   11:*/		return 0x8223CFA4;
		  /* 8223CFA4h */ case   12:  		/* cmplw CR6, R9, R11 */
		/* 8223CFA4h case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8223CFA4h case   12:*/		return 0x8223CFA8;
		  /* 8223CFA8h */ case   13:  		/* bc 12, CR6_LT, -20 */
		/* 8223CFA8h case   13:*/		if ( regs.CR[6].lt ) { return 0x8223CF94;  }
		/* 8223CFA8h case   13:*/		return 0x8223CFAC;
		  /* 8223CFACh */ case   14:  		/* b 80 */
		/* 8223CFACh case   14:*/		return 0x8223CFFC;
		/* 8223CFACh case   14:*/		return 0x8223CFB0;
	}
	return 0x8223CFB0;
} // Block from 8223CF74h-8223CFB0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223CFB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CFB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CFB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CFB0);
		  /* 8223CFB0h */ case    0:  		/* lhz R10, <#[R11 + 2]> */
		/* 8223CFB0h case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8223CFB0h case    0:*/		return 0x8223CFB4;
		  /* 8223CFB4h */ case    1:  		/* addi R8, R11, 4 */
		/* 8223CFB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 8223CFB4h case    1:*/		return 0x8223CFB8;
		  /* 8223CFB8h */ case    2:  		/* cmplwi CR6, R10, 15 */
		/* 8223CFB8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000F);
		/* 8223CFB8h case    2:*/		return 0x8223CFBC;
		  /* 8223CFBCh */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 8223CFBCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8223CFC4;  }
		/* 8223CFBCh case    3:*/		return 0x8223CFC0;
		  /* 8223CFC0h */ case    4:  		/* li R8, 0 */
		/* 8223CFC0h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8223CFC0h case    4:*/		return 0x8223CFC4;
	}
	return 0x8223CFC4;
} // Block from 8223CFB0h-8223CFC4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223CFC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CFC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CFC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CFC4);
		  /* 8223CFC4h */ case    0:  		/* addi R11, R11, 4 */
		/* 8223CFC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223CFC4h case    0:*/		return 0x8223CFC8;
		  /* 8223CFC8h */ case    1:  		/* li R9, 0 */
		/* 8223CFC8h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8223CFC8h case    1:*/		return 0x8223CFCC;
		  /* 8223CFCCh */ case    2:  		/* addi R10, R11, 4 */
		/* 8223CFCCh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8223CFCCh case    2:*/		return 0x8223CFD0;
		  /* 8223CFD0h */ case    3:  		/* stw R11, <#[R31 + 20]> */
		/* 8223CFD0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CFD0h case    3:*/		return 0x8223CFD4;
		  /* 8223CFD4h */ case    4:  		/* stw R10, <#[R31 + 20]> */
		/* 8223CFD4h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CFD4h case    4:*/		return 0x8223CFD8;
		  /* 8223CFD8h */ case    5:  		/* lhz R11, <#[R8 + 2]> */
		/* 8223CFD8h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000002) );
		/* 8223CFD8h case    5:*/		return 0x8223CFDC;
		  /* 8223CFDCh */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 8223CFDCh case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223CFDCh case    6:*/		return 0x8223CFE0;
		  /* 8223CFE0h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 8223CFE0h case    7:*/		if ( regs.CR[0].eq ) { return 0x8223CFFC;  }
		/* 8223CFE0h case    7:*/		return 0x8223CFE4;
		  /* 8223CFE4h */ case    8:  		/* addi R10, R10, 4 */
		/* 8223CFE4h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8223CFE4h case    8:*/		return 0x8223CFE8;
		  /* 8223CFE8h */ case    9:  		/* addi R9, R9, 1 */
		/* 8223CFE8h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8223CFE8h case    9:*/		return 0x8223CFEC;
		  /* 8223CFECh */ case   10:  		/* stw R10, <#[R31 + 20]> */
		/* 8223CFECh case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223CFECh case   10:*/		return 0x8223CFF0;
		  /* 8223CFF0h */ case   11:  		/* lhz R11, <#[R8 + 2]> */
		/* 8223CFF0h case   11:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000002) );
		/* 8223CFF0h case   11:*/		return 0x8223CFF4;
		  /* 8223CFF4h */ case   12:  		/* cmplw CR6, R9, R11 */
		/* 8223CFF4h case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8223CFF4h case   12:*/		return 0x8223CFF8;
		  /* 8223CFF8h */ case   13:  		/* bc 12, CR6_LT, -20 */
		/* 8223CFF8h case   13:*/		if ( regs.CR[6].lt ) { return 0x8223CFE4;  }
		/* 8223CFF8h case   13:*/		return 0x8223CFFC;
	}
	return 0x8223CFFC;
} // Block from 8223CFC4h-8223CFFCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223CFFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223CFFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223CFFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223CFFC);
		  /* 8223CFFCh */ case    0:  		/* addi R1, R1, 112 */
		/* 8223CFFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223CFFCh case    0:*/		return 0x8223D000;
		  /* 8223D000h */ case    1:  		/* b -1752404 */
		/* 8223D000h case    1:*/		return 0x820912AC;
		/* 8223D000h case    1:*/		return 0x8223D004;
		  /* 8223D004h */ case    2:  		/* nop */
		/* 8223D004h case    2:*/		cpu::op::nop();
		/* 8223D004h case    2:*/		return 0x8223D008;
	}
	return 0x8223D008;
} // Block from 8223CFFCh-8223D008h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223D008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D008);
		  /* 8223D008h */ case    0:  		/* mfspr R12, LR */
		/* 8223D008h case    0:*/		regs.R12 = regs.LR;
		/* 8223D008h case    0:*/		return 0x8223D00C;
		  /* 8223D00Ch */ case    1:  		/* bl -1752496 */
		/* 8223D00Ch case    1:*/		regs.LR = 0x8223D010; return 0x8209125C;
		/* 8223D00Ch case    1:*/		return 0x8223D010;
		  /* 8223D010h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223D010h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223D010h case    2:*/		return 0x8223D014;
		  /* 8223D014h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8223D014h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D014h case    3:*/		return 0x8223D018;
		  /* 8223D018h */ case    4:  		/* mr R30, R4 */
		/* 8223D018h case    4:*/		regs.R30 = regs.R4;
		/* 8223D018h case    4:*/		return 0x8223D01C;
		  /* 8223D01Ch */ case    5:  		/* li R4, 12 */
		/* 8223D01Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 8223D01Ch case    5:*/		return 0x8223D020;
		  /* 8223D020h */ case    6:  		/* mr R31, R3 */
		/* 8223D020h case    6:*/		regs.R31 = regs.R3;
		/* 8223D020h case    6:*/		return 0x8223D024;
		  /* 8223D024h */ case    7:  		/* mr R29, R5 */
		/* 8223D024h case    7:*/		regs.R29 = regs.R5;
		/* 8223D024h case    7:*/		return 0x8223D028;
		  /* 8223D028h */ case    8:  		/* lwz R3, <#[R11 + 1456]> */
		/* 8223D028h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223D028h case    8:*/		return 0x8223D02C;
		  /* 8223D02Ch */ case    9:  		/* bl -134004 */
		/* 8223D02Ch case    9:*/		regs.LR = 0x8223D030; return 0x8221C4B8;
		/* 8223D02Ch case    9:*/		return 0x8223D030;
		  /* 8223D030h */ case   10:  		/* li R11, 0 */
		/* 8223D030h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223D030h case   10:*/		return 0x8223D034;
		  /* 8223D034h */ case   11:  		/* stw R30, <#[R3]> */
		/* 8223D034h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D034h case   11:*/		return 0x8223D038;
		  /* 8223D038h */ case   12:  		/* stb R29, <#[R3 + 4]> */
		/* 8223D038h case   12:*/		cpu::mem::store8( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		/* 8223D038h case   12:*/		return 0x8223D03C;
		  /* 8223D03Ch */ case   13:  		/* stw R11, <#[R3 + 8]> */
		/* 8223D03Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8223D03Ch case   13:*/		return 0x8223D040;
		  /* 8223D040h */ case   14:  		/* lwz R11, <#[R31 + 16]> */
		/* 8223D040h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8223D040h case   14:*/		return 0x8223D044;
		  /* 8223D044h */ case   15:  		/* stw R3, <#[R11 + 8]> */
		/* 8223D044h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 8223D044h case   15:*/		return 0x8223D048;
		  /* 8223D048h */ case   16:  		/* stw R3, <#[R31 + 16]> */
		/* 8223D048h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8223D048h case   16:*/		return 0x8223D04C;
		  /* 8223D04Ch */ case   17:  		/* addi R1, R1, 112 */
		/* 8223D04Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223D04Ch case   17:*/		return 0x8223D050;
		  /* 8223D050h */ case   18:  		/* b -1752484 */
		/* 8223D050h case   18:*/		return 0x820912AC;
		/* 8223D050h case   18:*/		return 0x8223D054;
		  /* 8223D054h */ case   19:  		/* nop */
		/* 8223D054h case   19:*/		cpu::op::nop();
		/* 8223D054h case   19:*/		return 0x8223D058;
		  /* 8223D058h */ case   20:  		/* lwz R10, <#[R3]> */
		/* 8223D058h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D058h case   20:*/		return 0x8223D05C;
		  /* 8223D05Ch */ case   21:  		/* li R11, 100 */
		/* 8223D05Ch case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D05Ch case   21:*/		return 0x8223D060;
		  /* 8223D060h */ case   22:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223D060h case   22:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223D060h case   22:*/		return 0x8223D064;
		  /* 8223D064h */ case   23:  		/* subfc R9, R11, R10 */
		/* 8223D064h case   23:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223D064h case   23:*/		return 0x8223D068;
		  /* 8223D068h */ case   24:  		/* eqv R11, R11, R10 */
		/* 8223D068h case   24:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D068h case   24:*/		return 0x8223D06C;
		  /* 8223D06Ch */ case   25:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D06Ch case   25:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D06Ch case   25:*/		return 0x8223D070;
		  /* 8223D070h */ case   26:  		/* addze R11, R11 */
		/* 8223D070h case   26:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D070h case   26:*/		return 0x8223D074;
		  /* 8223D074h */ case   27:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D074h case   27:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D074h case   27:*/		return 0x8223D078;
		  /* 8223D078h */ case   28:  		/* subfic R11, R11, 0 */
		/* 8223D078h case   28:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D078h case   28:*/		return 0x8223D07C;
		  /* 8223D07Ch */ case   29:  		/* subfe R11, R11, R11 */
		/* 8223D07Ch case   29:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D07Ch case   29:*/		return 0x8223D080;
		  /* 8223D080h */ case   30:  		/* and R11, R11, R10 */
		/* 8223D080h case   30:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D080h case   30:*/		return 0x8223D084;
		  /* 8223D084h */ case   31:  		/* cmpwi CR6, R11, 8 */
		/* 8223D084h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8223D084h case   31:*/		return 0x8223D088;
	}
	return 0x8223D088;
} // Block from 8223D008h-8223D088h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8223D088h
// Function '?MaybeExpandPointAA@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D088);
		  /* 8223D088h */ case    0:  		/* bc 12, CR6_EQ, 16 */
		/* 8223D088h case    0:*/		if ( regs.CR[6].eq ) { return 0x8223D098;  }
		/* 8223D088h case    0:*/		return 0x8223D08C;
		  /* 8223D08Ch */ case    1:  		/* cmpwi CR6, R11, 9 */
		/* 8223D08Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8223D08Ch case    1:*/		return 0x8223D090;
		  /* 8223D090h */ case    2:  		/* li R11, 0 */
		/* 8223D090h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223D090h case    2:*/		return 0x8223D094;
		  /* 8223D094h */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 8223D094h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8223D09C;  }
		/* 8223D094h case    3:*/		return 0x8223D098;
	}
	return 0x8223D098;
} // Block from 8223D088h-8223D098h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223D098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D098);
		  /* 8223D098h */ case    0:  		/* li R11, 1 */
		/* 8223D098h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223D098h case    0:*/		return 0x8223D09C;
	}
	return 0x8223D09C;
} // Block from 8223D098h-8223D09Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223D09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D09C);
		  /* 8223D09Ch */ case    0:  		/* rlwinm R3, R11, 0, 24, 31 */
		/* 8223D09Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R3,regs.R11);
		/* 8223D09Ch case    0:*/		return 0x8223D0A0;
		  /* 8223D0A0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8223D0A0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223D0A0h case    1:*/		return 0x8223D0A4;
	}
	return 0x8223D0A4;
} // Block from 8223D09Ch-8223D0A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223D0A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D0A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D0A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D0A4);
		  /* 8223D0A4h */ case    0:  		/* nop */
		/* 8223D0A4h case    0:*/		cpu::op::nop();
		/* 8223D0A4h case    0:*/		return 0x8223D0A8;
		  /* 8223D0A8h */ case    1:  		/* lwz R10, <#[R3]> */
		/* 8223D0A8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D0A8h case    1:*/		return 0x8223D0AC;
		  /* 8223D0ACh */ case    2:  		/* li R11, 100 */
		/* 8223D0ACh case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D0ACh case    2:*/		return 0x8223D0B0;
		  /* 8223D0B0h */ case    3:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223D0B0h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223D0B0h case    3:*/		return 0x8223D0B4;
		  /* 8223D0B4h */ case    4:  		/* subfc R9, R11, R10 */
		/* 8223D0B4h case    4:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223D0B4h case    4:*/		return 0x8223D0B8;
		  /* 8223D0B8h */ case    5:  		/* eqv R11, R11, R10 */
		/* 8223D0B8h case    5:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D0B8h case    5:*/		return 0x8223D0BC;
		  /* 8223D0BCh */ case    6:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D0BCh case    6:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D0BCh case    6:*/		return 0x8223D0C0;
		  /* 8223D0C0h */ case    7:  		/* addze R11, R11 */
		/* 8223D0C0h case    7:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D0C0h case    7:*/		return 0x8223D0C4;
		  /* 8223D0C4h */ case    8:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D0C4h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D0C4h case    8:*/		return 0x8223D0C8;
		  /* 8223D0C8h */ case    9:  		/* subfic R11, R11, 0 */
		/* 8223D0C8h case    9:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D0C8h case    9:*/		return 0x8223D0CC;
		  /* 8223D0CCh */ case   10:  		/* subfe R11, R11, R11 */
		/* 8223D0CCh case   10:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D0CCh case   10:*/		return 0x8223D0D0;
		  /* 8223D0D0h */ case   11:  		/* and R11, R11, R10 */
		/* 8223D0D0h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D0D0h case   11:*/		return 0x8223D0D4;
		  /* 8223D0D4h */ case   12:  		/* cmpwi CR6, R11, 113 */
		/* 8223D0D4h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000071);
		/* 8223D0D4h case   12:*/		return 0x8223D0D8;
		  /* 8223D0D8h */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 8223D0D8h case   13:*/		if ( regs.CR[6].eq ) { return 0x8223D0E8;  }
		/* 8223D0D8h case   13:*/		return 0x8223D0DC;
		  /* 8223D0DCh */ case   14:  		/* cmpwi CR6, R11, 114 */
		/* 8223D0DCh case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000072);
		/* 8223D0DCh case   14:*/		return 0x8223D0E0;
		  /* 8223D0E0h */ case   15:  		/* li R11, 0 */
		/* 8223D0E0h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223D0E0h case   15:*/		return 0x8223D0E4;
		  /* 8223D0E4h */ case   16:  		/* bc 4, CR6_EQ, 8 */
		/* 8223D0E4h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8223D0EC;  }
		/* 8223D0E4h case   16:*/		return 0x8223D0E8;
	}
	return 0x8223D0E8;
} // Block from 8223D0A4h-8223D0E8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8223D0E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D0E8);
		  /* 8223D0E8h */ case    0:  		/* li R11, 1 */
		/* 8223D0E8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223D0E8h case    0:*/		return 0x8223D0EC;
	}
	return 0x8223D0EC;
} // Block from 8223D0E8h-8223D0ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223D0ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D0EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D0EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D0EC);
		  /* 8223D0ECh */ case    0:  		/* rlwinm R3, R11, 0, 24, 31 */
		/* 8223D0ECh case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R3,regs.R11);
		/* 8223D0ECh case    0:*/		return 0x8223D0F0;
		  /* 8223D0F0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8223D0F0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223D0F0h case    1:*/		return 0x8223D0F4;
	}
	return 0x8223D0F4;
} // Block from 8223D0ECh-8223D0F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223D0F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D0F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D0F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D0F4);
		  /* 8223D0F4h */ case    0:  		/* nop */
		/* 8223D0F4h case    0:*/		cpu::op::nop();
		/* 8223D0F4h case    0:*/		return 0x8223D0F8;
		  /* 8223D0F8h */ case    1:  		/* lwz R10, <#[R3]> */
		/* 8223D0F8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D0F8h case    1:*/		return 0x8223D0FC;
		  /* 8223D0FCh */ case    2:  		/* li R11, 100 */
		/* 8223D0FCh case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D0FCh case    2:*/		return 0x8223D100;
		  /* 8223D100h */ case    3:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223D100h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223D100h case    3:*/		return 0x8223D104;
		  /* 8223D104h */ case    4:  		/* subfc R9, R11, R10 */
		/* 8223D104h case    4:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223D104h case    4:*/		return 0x8223D108;
		  /* 8223D108h */ case    5:  		/* eqv R11, R11, R10 */
		/* 8223D108h case    5:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D108h case    5:*/		return 0x8223D10C;
		  /* 8223D10Ch */ case    6:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D10Ch case    6:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D10Ch case    6:*/		return 0x8223D110;
		  /* 8223D110h */ case    7:  		/* addze R11, R11 */
		/* 8223D110h case    7:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D110h case    7:*/		return 0x8223D114;
		  /* 8223D114h */ case    8:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D114h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D114h case    8:*/		return 0x8223D118;
		  /* 8223D118h */ case    9:  		/* subfic R11, R11, 0 */
		/* 8223D118h case    9:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D118h case    9:*/		return 0x8223D11C;
		  /* 8223D11Ch */ case   10:  		/* subfe R11, R11, R11 */
		/* 8223D11Ch case   10:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D11Ch case   10:*/		return 0x8223D120;
		  /* 8223D120h */ case   11:  		/* and R11, R11, R10 */
		/* 8223D120h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D120h case   11:*/		return 0x8223D124;
		  /* 8223D124h */ case   12:  		/* cmpwi CR6, R11, 40 */
		/* 8223D124h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000028);
		/* 8223D124h case   12:*/		return 0x8223D128;
		  /* 8223D128h */ case   13:  		/* bc 12, CR6_EQ, 48 */
		/* 8223D128h case   13:*/		if ( regs.CR[6].eq ) { return 0x8223D158;  }
		/* 8223D128h case   13:*/		return 0x8223D12C;
		  /* 8223D12Ch */ case   14:  		/* cmpwi CR6, R11, 43 */
		/* 8223D12Ch case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000002B);
		/* 8223D12Ch case   14:*/		return 0x8223D130;
	}
	return 0x8223D130;
} // Block from 8223D0F4h-8223D130h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223D130h
// Function '?MaybeExpandPixelFog@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D130);
		  /* 8223D130h */ case    0:  		/* bc 12, CR6_EQ, 40 */
		/* 8223D130h case    0:*/		if ( regs.CR[6].eq ) { return 0x8223D158;  }
		/* 8223D130h case    0:*/		return 0x8223D134;
		  /* 8223D134h */ case    1:  		/* cmpwi CR6, R11, 41 */
		/* 8223D134h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000029);
		/* 8223D134h case    1:*/		return 0x8223D138;
		  /* 8223D138h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8223D138h case    2:*/		if ( regs.CR[6].eq ) { return 0x8223D158;  }
		/* 8223D138h case    2:*/		return 0x8223D13C;
		  /* 8223D13Ch */ case    3:  		/* cmpwi CR6, R11, 42 */
		/* 8223D13Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000002A);
		/* 8223D13Ch case    3:*/		return 0x8223D140;
		  /* 8223D140h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 8223D140h case    4:*/		if ( regs.CR[6].eq ) { return 0x8223D158;  }
		/* 8223D140h case    4:*/		return 0x8223D144;
		  /* 8223D144h */ case    5:  		/* cmpwi CR6, R11, 39 */
		/* 8223D144h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000027);
		/* 8223D144h case    5:*/		return 0x8223D148;
		  /* 8223D148h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 8223D148h case    6:*/		if ( regs.CR[6].eq ) { return 0x8223D158;  }
		/* 8223D148h case    6:*/		return 0x8223D14C;
		  /* 8223D14Ch */ case    7:  		/* cmpwi CR6, R11, 83 */
		/* 8223D14Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000053);
		/* 8223D14Ch case    7:*/		return 0x8223D150;
		  /* 8223D150h */ case    8:  		/* li R11, 0 */
		/* 8223D150h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223D150h case    8:*/		return 0x8223D154;
		  /* 8223D154h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 8223D154h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8223D15C;  }
		/* 8223D154h case    9:*/		return 0x8223D158;
	}
	return 0x8223D158;
} // Block from 8223D130h-8223D158h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223D158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D158);
		  /* 8223D158h */ case    0:  		/* li R11, 1 */
		/* 8223D158h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223D158h case    0:*/		return 0x8223D15C;
	}
	return 0x8223D15C;
} // Block from 8223D158h-8223D15Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223D15Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D15C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D15C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D15C);
		  /* 8223D15Ch */ case    0:  		/* rlwinm R3, R11, 0, 24, 31 */
		/* 8223D15Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R3,regs.R11);
		/* 8223D15Ch case    0:*/		return 0x8223D160;
		  /* 8223D160h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8223D160h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223D160h case    1:*/		return 0x8223D164;
	}
	return 0x8223D164;
} // Block from 8223D15Ch-8223D164h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223D164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D164);
		  /* 8223D164h */ case    0:  		/* nop */
		/* 8223D164h case    0:*/		cpu::op::nop();
		/* 8223D164h case    0:*/		return 0x8223D168;
		  /* 8223D168h */ case    1:  		/* lwz R10, <#[R3]> */
		/* 8223D168h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D168h case    1:*/		return 0x8223D16C;
		  /* 8223D16Ch */ case    2:  		/* li R11, 100 */
		/* 8223D16Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D16Ch case    2:*/		return 0x8223D170;
		  /* 8223D170h */ case    3:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223D170h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223D170h case    3:*/		return 0x8223D174;
		  /* 8223D174h */ case    4:  		/* subfc R9, R11, R10 */
		/* 8223D174h case    4:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223D174h case    4:*/		return 0x8223D178;
		  /* 8223D178h */ case    5:  		/* eqv R11, R11, R10 */
		/* 8223D178h case    5:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D178h case    5:*/		return 0x8223D17C;
		  /* 8223D17Ch */ case    6:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D17Ch case    6:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D17Ch case    6:*/		return 0x8223D180;
		  /* 8223D180h */ case    7:  		/* addze R11, R11 */
		/* 8223D180h case    7:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D180h case    7:*/		return 0x8223D184;
		  /* 8223D184h */ case    8:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D184h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D184h case    8:*/		return 0x8223D188;
		  /* 8223D188h */ case    9:  		/* subfic R11, R11, 0 */
		/* 8223D188h case    9:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D188h case    9:*/		return 0x8223D18C;
		  /* 8223D18Ch */ case   10:  		/* subfe R11, R11, R11 */
		/* 8223D18Ch case   10:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D18Ch case   10:*/		return 0x8223D190;
		  /* 8223D190h */ case   11:  		/* and R11, R11, R10 */
		/* 8223D190h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D190h case   11:*/		return 0x8223D194;
		  /* 8223D194h */ case   12:  		/* cmpwi CR6, R11, 53 */
		/* 8223D194h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 8223D194h case   12:*/		return 0x8223D198;
		  /* 8223D198h */ case   13:  		/* bc 12, CR6_EQ, 40 */
		/* 8223D198h case   13:*/		if ( regs.CR[6].eq ) { return 0x8223D1C0;  }
		/* 8223D198h case   13:*/		return 0x8223D19C;
		  /* 8223D19Ch */ case   14:  		/* cmpwi CR6, R11, 52 */
		/* 8223D19Ch case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000034);
		/* 8223D19Ch case   14:*/		return 0x8223D1A0;
		  /* 8223D1A0h */ case   15:  		/* bc 12, CR6_EQ, 32 */
		/* 8223D1A0h case   15:*/		if ( regs.CR[6].eq ) { return 0x8223D1C0;  }
		/* 8223D1A0h case   15:*/		return 0x8223D1A4;
		  /* 8223D1A4h */ case   16:  		/* cmpwi CR6, R11, 39 */
		/* 8223D1A4h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000027);
		/* 8223D1A4h case   16:*/		return 0x8223D1A8;
		  /* 8223D1A8h */ case   17:  		/* bc 12, CR6_EQ, 24 */
		/* 8223D1A8h case   17:*/		if ( regs.CR[6].eq ) { return 0x8223D1C0;  }
		/* 8223D1A8h case   17:*/		return 0x8223D1AC;
		  /* 8223D1ACh */ case   18:  		/* cmpwi CR6, R11, 62 */
		/* 8223D1ACh case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003E);
		/* 8223D1ACh case   18:*/		return 0x8223D1B0;
		  /* 8223D1B0h */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 8223D1B0h case   19:*/		if ( regs.CR[6].eq ) { return 0x8223D1C0;  }
		/* 8223D1B0h case   19:*/		return 0x8223D1B4;
		  /* 8223D1B4h */ case   20:  		/* cmpwi CR6, R11, 50 */
		/* 8223D1B4h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000032);
		/* 8223D1B4h case   20:*/		return 0x8223D1B8;
		  /* 8223D1B8h */ case   21:  		/* li R11, 0 */
		/* 8223D1B8h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223D1B8h case   21:*/		return 0x8223D1BC;
		  /* 8223D1BCh */ case   22:  		/* bc 4, CR6_EQ, 8 */
		/* 8223D1BCh case   22:*/		if ( !regs.CR[6].eq ) { return 0x8223D1C4;  }
		/* 8223D1BCh case   22:*/		return 0x8223D1C0;
	}
	return 0x8223D1C0;
} // Block from 8223D164h-8223D1C0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8223D1C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D1C0);
		  /* 8223D1C0h */ case    0:  		/* li R11, 1 */
		/* 8223D1C0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223D1C0h case    0:*/		return 0x8223D1C4;
	}
	return 0x8223D1C4;
} // Block from 8223D1C0h-8223D1C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223D1C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D1C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D1C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D1C4);
		  /* 8223D1C4h */ case    0:  		/* rlwinm R3, R11, 0, 24, 31 */
		/* 8223D1C4h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R3,regs.R11);
		/* 8223D1C4h case    0:*/		return 0x8223D1C8;
		  /* 8223D1C8h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8223D1C8h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223D1C8h case    1:*/		return 0x8223D1CC;
	}
	return 0x8223D1CC;
} // Block from 8223D1C4h-8223D1CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223D1CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D1CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D1CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D1CC);
		  /* 8223D1CCh */ case    0:  		/* nop */
		/* 8223D1CCh case    0:*/		cpu::op::nop();
		/* 8223D1CCh case    0:*/		return 0x8223D1D0;
	}
	return 0x8223D1D0;
} // Block from 8223D1CCh-8223D1D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223D1D0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D1D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D1D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D1D0);
		  /* 8223D1D0h */ case    0:  		/* mfspr R12, LR */
		/* 8223D1D0h case    0:*/		regs.R12 = regs.LR;
		/* 8223D1D0h case    0:*/		return 0x8223D1D4;
		  /* 8223D1D4h */ case    1:  		/* bl -1752960 */
		/* 8223D1D4h case    1:*/		regs.LR = 0x8223D1D8; return 0x82091254;
		/* 8223D1D4h case    1:*/		return 0x8223D1D8;
	}
	return 0x8223D1D8;
} // Block from 8223D1D0h-8223D1D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223D1D8h
// Function '?MaybeExpandLineAA@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D1D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D1D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D1D8);
		  /* 8223D1D8h */ case    0:  		/* stwu R1, <#[R1 - 128]> */
		/* 8223D1D8h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8223D1D8h case    0:*/		return 0x8223D1DC;
		  /* 8223D1DCh */ case    1:  		/* li R30, 0 */
		/* 8223D1DCh case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223D1DCh case    1:*/		return 0x8223D1E0;
		  /* 8223D1E0h */ case    2:  		/* stw R4, <#[R3 + 24]> */
		/* 8223D1E0h case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000018) );
		/* 8223D1E0h case    2:*/		return 0x8223D1E4;
		  /* 8223D1E4h */ case    3:  		/* mr R11, R4 */
		/* 8223D1E4h case    3:*/		regs.R11 = regs.R4;
		/* 8223D1E4h case    3:*/		return 0x8223D1E8;
		  /* 8223D1E8h */ case    4:  		/* stw R5, <#[R3]> */
		/* 8223D1E8h case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D1E8h case    4:*/		return 0x8223D1EC;
		  /* 8223D1ECh */ case    5:  		/* stw R30, <#[R3 + 36]> */
		/* 8223D1ECh case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000024) );
		/* 8223D1ECh case    5:*/		return 0x8223D1F0;
		  /* 8223D1F0h */ case    6:  		/* mr R31, R3 */
		/* 8223D1F0h case    6:*/		regs.R31 = regs.R3;
		/* 8223D1F0h case    6:*/		return 0x8223D1F4;
		  /* 8223D1F4h */ case    7:  		/* stw R30, <#[R3 + 40]> */
		/* 8223D1F4h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000028) );
		/* 8223D1F4h case    7:*/		return 0x8223D1F8;
		  /* 8223D1F8h */ case    8:  		/* li R4, 20 */
		/* 8223D1F8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8223D1F8h case    8:*/		return 0x8223D1FC;
		  /* 8223D1FCh */ case    9:  		/* stw R11, <#[R3 + 20]> */
		/* 8223D1FCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8223D1FCh case    9:*/		return 0x8223D200;
		  /* 8223D200h */ case   10:  		/* stw R30, <#[R3 + 44]> */
		/* 8223D200h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x0000002C) );
		/* 8223D200h case   10:*/		return 0x8223D204;
		  /* 8223D204h */ case   11:  		/* stw R30, <#[R3 + 48]> */
		/* 8223D204h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000030) );
		/* 8223D204h case   11:*/		return 0x8223D208;
		  /* 8223D208h */ case   12:  		/* stw R30, <#[R3 + 52]> */
		/* 8223D208h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000034) );
		/* 8223D208h case   12:*/		return 0x8223D20C;
		  /* 8223D20Ch */ case   13:  		/* lwz R28, <#[R5 + 1456]> */
		/* 8223D20Ch case   13:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R5 + 0x000005B0) );
		/* 8223D20Ch case   13:*/		return 0x8223D210;
		  /* 8223D210h */ case   14:  		/* mr R3, R28 */
		/* 8223D210h case   14:*/		regs.R3 = regs.R28;
		/* 8223D210h case   14:*/		return 0x8223D214;
		  /* 8223D214h */ case   15:  		/* bl -134492 */
		/* 8223D214h case   15:*/		regs.LR = 0x8223D218; return 0x8221C4B8;
		/* 8223D214h case   15:*/		return 0x8223D218;
		  /* 8223D218h */ case   16:  		/* addic. R29, R3, 4 */
		/* 8223D218h case   16:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R3,0x4);
		/* 8223D218h case   16:*/		return 0x8223D21C;
		  /* 8223D21Ch */ case   17:  		/* stw R28, <#[R3]> */
		/* 8223D21Ch case   17:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D21Ch case   17:*/		return 0x8223D220;
		  /* 8223D220h */ case   18:  		/* bc 12, CR0_EQ, 24 */
		/* 8223D220h case   18:*/		if ( regs.CR[0].eq ) { return 0x8223D238;  }
		/* 8223D220h case   18:*/		return 0x8223D224;
		  /* 8223D224h */ case   19:  		/* lwz R11, <#[R31]> */
		/* 8223D224h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223D224h case   19:*/		return 0x8223D228;
		  /* 8223D228h */ case   20:  		/* mr R3, R29 */
		/* 8223D228h case   20:*/		regs.R3 = regs.R29;
		/* 8223D228h case   20:*/		return 0x8223D22C;
		  /* 8223D22Ch */ case   21:  		/* lwz R4, <#[R11 + 1456]> */
		/* 8223D22Ch case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223D22Ch case   21:*/		return 0x8223D230;
		  /* 8223D230h */ case   22:  		/* bl -29904 */
		/* 8223D230h case   22:*/		regs.LR = 0x8223D234; return 0x82235D60;
		/* 8223D230h case   22:*/		return 0x8223D234;
		  /* 8223D234h */ case   23:  		/* b 8 */
		/* 8223D234h case   23:*/		return 0x8223D23C;
		/* 8223D234h case   23:*/		return 0x8223D238;
	}
	return 0x8223D238;
} // Block from 8223D1D8h-8223D238h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8223D238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D238);
		  /* 8223D238h */ case    0:  		/* mr R29, R30 */
		/* 8223D238h case    0:*/		regs.R29 = regs.R30;
		/* 8223D238h case    0:*/		return 0x8223D23C;
	}
	return 0x8223D23C;
} // Block from 8223D238h-8223D23Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223D23Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D23C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D23C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D23C);
		  /* 8223D23Ch */ case    0:  		/* stw R29, <#[R31 + 60]> */
		/* 8223D23Ch case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x0000003C) );
		/* 8223D23Ch case    0:*/		return 0x8223D240;
		  /* 8223D240h */ case    1:  		/* li R4, 20 */
		/* 8223D240h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8223D240h case    1:*/		return 0x8223D244;
		  /* 8223D244h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8223D244h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223D244h case    2:*/		return 0x8223D248;
		  /* 8223D248h */ case    3:  		/* lwz R28, <#[R11 + 1456]> */
		/* 8223D248h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223D248h case    3:*/		return 0x8223D24C;
		  /* 8223D24Ch */ case    4:  		/* mr R3, R28 */
		/* 8223D24Ch case    4:*/		regs.R3 = regs.R28;
		/* 8223D24Ch case    4:*/		return 0x8223D250;
		  /* 8223D250h */ case    5:  		/* bl -134552 */
		/* 8223D250h case    5:*/		regs.LR = 0x8223D254; return 0x8221C4B8;
		/* 8223D250h case    5:*/		return 0x8223D254;
		  /* 8223D254h */ case    6:  		/* addic. R29, R3, 4 */
		/* 8223D254h case    6:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R3,0x4);
		/* 8223D254h case    6:*/		return 0x8223D258;
		  /* 8223D258h */ case    7:  		/* stw R28, <#[R3]> */
		/* 8223D258h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D258h case    7:*/		return 0x8223D25C;
		  /* 8223D25Ch */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 8223D25Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x8223D274;  }
		/* 8223D25Ch case    8:*/		return 0x8223D260;
		  /* 8223D260h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223D260h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223D260h case    9:*/		return 0x8223D264;
		  /* 8223D264h */ case   10:  		/* mr R3, R29 */
		/* 8223D264h case   10:*/		regs.R3 = regs.R29;
		/* 8223D264h case   10:*/		return 0x8223D268;
		  /* 8223D268h */ case   11:  		/* lwz R4, <#[R11 + 1456]> */
		/* 8223D268h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223D268h case   11:*/		return 0x8223D26C;
		  /* 8223D26Ch */ case   12:  		/* bl -29964 */
		/* 8223D26Ch case   12:*/		regs.LR = 0x8223D270; return 0x82235D60;
		/* 8223D26Ch case   12:*/		return 0x8223D270;
		  /* 8223D270h */ case   13:  		/* b 8 */
		/* 8223D270h case   13:*/		return 0x8223D278;
		/* 8223D270h case   13:*/		return 0x8223D274;
	}
	return 0x8223D274;
} // Block from 8223D23Ch-8223D274h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223D274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D274);
		  /* 8223D274h */ case    0:  		/* mr R29, R30 */
		/* 8223D274h case    0:*/		regs.R29 = regs.R30;
		/* 8223D274h case    0:*/		return 0x8223D278;
	}
	return 0x8223D278;
} // Block from 8223D274h-8223D278h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223D278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D278);
		  /* 8223D278h */ case    0:  		/* stw R29, <#[R31 + 64]> */
		/* 8223D278h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000040) );
		/* 8223D278h case    0:*/		return 0x8223D27C;
		  /* 8223D27Ch */ case    1:  		/* li R4, 20 */
		/* 8223D27Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8223D27Ch case    1:*/		return 0x8223D280;
	}
	return 0x8223D280;
} // Block from 8223D278h-8223D280h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223D280h
// Function '?MaybeExpandPolyStipple@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D280);
		  /* 8223D280h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8223D280h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223D280h case    0:*/		return 0x8223D284;
		  /* 8223D284h */ case    1:  		/* lwz R28, <#[R11 + 1456]> */
		/* 8223D284h case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223D284h case    1:*/		return 0x8223D288;
		  /* 8223D288h */ case    2:  		/* mr R3, R28 */
		/* 8223D288h case    2:*/		regs.R3 = regs.R28;
		/* 8223D288h case    2:*/		return 0x8223D28C;
		  /* 8223D28Ch */ case    3:  		/* bl -134612 */
		/* 8223D28Ch case    3:*/		regs.LR = 0x8223D290; return 0x8221C4B8;
		/* 8223D28Ch case    3:*/		return 0x8223D290;
		  /* 8223D290h */ case    4:  		/* addic. R29, R3, 4 */
		/* 8223D290h case    4:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R3,0x4);
		/* 8223D290h case    4:*/		return 0x8223D294;
		  /* 8223D294h */ case    5:  		/* stw R28, <#[R3]> */
		/* 8223D294h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D294h case    5:*/		return 0x8223D298;
		  /* 8223D298h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8223D298h case    6:*/		if ( regs.CR[0].eq ) { return 0x8223D2B4;  }
		/* 8223D298h case    6:*/		return 0x8223D29C;
		  /* 8223D29Ch */ case    7:  		/* lwz R11, <#[R31]> */
		/* 8223D29Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223D29Ch case    7:*/		return 0x8223D2A0;
		  /* 8223D2A0h */ case    8:  		/* mr R3, R29 */
		/* 8223D2A0h case    8:*/		regs.R3 = regs.R29;
		/* 8223D2A0h case    8:*/		return 0x8223D2A4;
		  /* 8223D2A4h */ case    9:  		/* lwz R4, <#[R11 + 1456]> */
		/* 8223D2A4h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223D2A4h case    9:*/		return 0x8223D2A8;
		  /* 8223D2A8h */ case   10:  		/* bl -30024 */
		/* 8223D2A8h case   10:*/		regs.LR = 0x8223D2AC; return 0x82235D60;
		/* 8223D2A8h case   10:*/		return 0x8223D2AC;
		  /* 8223D2ACh */ case   11:  		/* mr R11, R29 */
		/* 8223D2ACh case   11:*/		regs.R11 = regs.R29;
		/* 8223D2ACh case   11:*/		return 0x8223D2B0;
		  /* 8223D2B0h */ case   12:  		/* b 8 */
		/* 8223D2B0h case   12:*/		return 0x8223D2B8;
		/* 8223D2B0h case   12:*/		return 0x8223D2B4;
	}
	return 0x8223D2B4;
} // Block from 8223D280h-8223D2B4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223D2B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D2B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D2B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D2B4);
		  /* 8223D2B4h */ case    0:  		/* mr R11, R30 */
		/* 8223D2B4h case    0:*/		regs.R11 = regs.R30;
		/* 8223D2B4h case    0:*/		return 0x8223D2B8;
	}
	return 0x8223D2B8;
} // Block from 8223D2B4h-8223D2B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223D2B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D2B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D2B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D2B8);
		  /* 8223D2B8h */ case    0:  		/* stw R11, <#[R31 + 68]> */
		/* 8223D2B8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 8223D2B8h case    0:*/		return 0x8223D2BC;
		  /* 8223D2BCh */ case    1:  		/* li R4, 12 */
		/* 8223D2BCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 8223D2BCh case    1:*/		return 0x8223D2C0;
		  /* 8223D2C0h */ case    2:  		/* stw R30, <#[R31 + 56]> */
		/* 8223D2C0h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000038) );
		/* 8223D2C0h case    2:*/		return 0x8223D2C4;
		  /* 8223D2C4h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 8223D2C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223D2C4h case    3:*/		return 0x8223D2C8;
		  /* 8223D2C8h */ case    4:  		/* lwz R3, <#[R11 + 1456]> */
		/* 8223D2C8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223D2C8h case    4:*/		return 0x8223D2CC;
		  /* 8223D2CCh */ case    5:  		/* bl -134676 */
		/* 8223D2CCh case    5:*/		regs.LR = 0x8223D2D0; return 0x8221C4B8;
		/* 8223D2CCh case    5:*/		return 0x8223D2D0;
		  /* 8223D2D0h */ case    6:  		/* li R10, -1 */
		/* 8223D2D0h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8223D2D0h case    6:*/		return 0x8223D2D4;
		  /* 8223D2D4h */ case    7:  		/* stw R3, <#[R31 + 12]> */
		/* 8223D2D4h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223D2D4h case    7:*/		return 0x8223D2D8;
		  /* 8223D2D8h */ case    8:  		/* lis R11, -32253 */
		/* 8223D2D8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8223D2D8h case    8:*/		return 0x8223D2DC;
		  /* 8223D2DCh */ case    9:  		/* stw R10, <#[R3]> */
		/* 8223D2DCh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D2DCh case    9:*/		return 0x8223D2E0;
		  /* 8223D2E0h */ case   10:  		/* lis R10, -32255 */
		/* 8223D2E0h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8223D2E0h case   10:*/		return 0x8223D2E4;
		  /* 8223D2E4h */ case   11:  		/* addi R29, R11, 27460 */
		/* 8223D2E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8223D2E4h case   11:*/		return 0x8223D2E8;
		  /* 8223D2E8h */ case   12:  		/* lis R9, -32252 */
		/* 8223D2E8h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8223D2E8h case   12:*/		return 0x8223D2EC;
		  /* 8223D2ECh */ case   13:  		/* addi R28, R10, 5216 */
		/* 8223D2ECh case   13:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x1460);
		/* 8223D2ECh case   13:*/		return 0x8223D2F0;
		  /* 8223D2F0h */ case   14:  		/* addi R27, R9, 9640 */
		/* 8223D2F0h case   14:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0x25A8);
		/* 8223D2F0h case   14:*/		return 0x8223D2F4;
		  /* 8223D2F4h */ case   15:  		/* lwz R8, <#[R31 + 12]> */
		/* 8223D2F4h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223D2F4h case   15:*/		return 0x8223D2F8;
		  /* 8223D2F8h */ case   16:  		/* stb R30, <#[R8 + 4]> */
		/* 8223D2F8h case   16:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R8 + 0x00000004) );
		/* 8223D2F8h case   16:*/		return 0x8223D2FC;
		  /* 8223D2FCh */ case   17:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223D2FCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223D2FCh case   17:*/		return 0x8223D300;
		  /* 8223D300h */ case   18:  		/* stw R30, <#[R11 + 8]> */
		/* 8223D300h case   18:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8223D300h case   18:*/		return 0x8223D304;
		  /* 8223D304h */ case   19:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223D304h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223D304h case   19:*/		return 0x8223D308;
		  /* 8223D308h */ case   20:  		/* stw R11, <#[R31 + 16]> */
		/* 8223D308h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8223D308h case   20:*/		return 0x8223D30C;
		  /* 8223D30Ch */ case   21:  		/* stw R11, <#[R11 + 8]> */
		/* 8223D30Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8223D30Ch case   21:*/		return 0x8223D310;
		  /* 8223D310h */ case   22:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223D310h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D310h case   22:*/		return 0x8223D314;
		  /* 8223D314h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 8223D314h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223D314h case   23:*/		return 0x8223D318;
		  /* 8223D318h */ case   24:  		/* stw R11, <#[R31 + 4]> */
		/* 8223D318h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8223D318h case   24:*/		return 0x8223D31C;
		  /* 8223D31Ch */ case   25:  		/* bc 12, CR6_EQ, 16 */
		/* 8223D31Ch case   25:*/		if ( regs.CR[6].eq ) { return 0x8223D32C;  }
		/* 8223D31Ch case   25:*/		return 0x8223D320;
		  /* 8223D320h */ case   26:  		/* addi R11, R11, 4 */
		/* 8223D320h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223D320h case   26:*/		return 0x8223D324;
		  /* 8223D324h */ case   27:  		/* stw R11, <#[R31 + 20]> */
		/* 8223D324h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D324h case   27:*/		return 0x8223D328;
	}
	return 0x8223D328;
} // Block from 8223D2B8h-8223D328h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8223D328h
// Function '?SetUpAllocs@CFG@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D328);
		  /* 8223D328h */ case    0:  		/* b 28 */
		/* 8223D328h case    0:*/		return 0x8223D344;
		/* 8223D328h case    0:*/		return 0x8223D32C;
	}
	return 0x8223D32C;
} // Block from 8223D328h-8223D32Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223D32Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D32C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D32C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D32C);
		  /* 8223D32Ch */ case    0:  		/* mr R6, R27 */
		/* 8223D32Ch case    0:*/		regs.R6 = regs.R27;
		/* 8223D32Ch case    0:*/		return 0x8223D330;
		  /* 8223D330h */ case    1:  		/* mr R5, R28 */
		/* 8223D330h case    1:*/		regs.R5 = regs.R28;
		/* 8223D330h case    1:*/		return 0x8223D334;
		  /* 8223D334h */ case    2:  		/* mr R4, R29 */
		/* 8223D334h case    2:*/		regs.R4 = regs.R29;
		/* 8223D334h case    2:*/		return 0x8223D338;
		  /* 8223D338h */ case    3:  		/* li R7, 132 */
		/* 8223D338h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x84);
		/* 8223D338h case    3:*/		return 0x8223D33C;
		  /* 8223D33Ch */ case    4:  		/* li R3, 0 */
		/* 8223D33Ch case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223D33Ch case    4:*/		return 0x8223D340;
		  /* 8223D340h */ case    5:  		/* bl -939832 */
		/* 8223D340h case    5:*/		regs.LR = 0x8223D344; return 0x82157C08;
		/* 8223D340h case    5:*/		return 0x8223D344;
	}
	return 0x8223D344;
} // Block from 8223D32Ch-8223D344h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223D344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D344);
		  /* 8223D344h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223D344h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D344h case    0:*/		return 0x8223D348;
		  /* 8223D348h */ case    1:  		/* lbz R10, <#[R11 + 1]> */
		/* 8223D348h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000001) );
		/* 8223D348h case    1:*/		return 0x8223D34C;
		  /* 8223D34Ch */ case    2:  		/* cmplwi CR0, R10, 0 */
		/* 8223D34Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8223D34Ch case    2:*/		return 0x8223D350;
		  /* 8223D350h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 8223D350h case    3:*/		if ( regs.CR[0].eq ) { return 0x8223D35C;  }
		/* 8223D350h case    3:*/		return 0x8223D354;
		  /* 8223D354h */ case    4:  		/* cmplwi CR6, R10, 1 */
		/* 8223D354h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8223D354h case    4:*/		return 0x8223D358;
		  /* 8223D358h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 8223D358h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8223D360;  }
		/* 8223D358h case    5:*/		return 0x8223D35C;
	}
	return 0x8223D35C;
} // Block from 8223D344h-8223D35Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223D35Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D35C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D35C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D35C);
		  /* 8223D35Ch */ case    0:  		/* mr R30, R11 */
		/* 8223D35Ch case    0:*/		regs.R30 = regs.R11;
		/* 8223D35Ch case    0:*/		return 0x8223D360;
	}
	return 0x8223D360;
} // Block from 8223D35Ch-8223D360h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223D360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D360);
		  /* 8223D360h */ case    0:  		/* stw R30, <#[R31 + 8]> */
		/* 8223D360h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 8223D360h case    0:*/		return 0x8223D364;
		  /* 8223D364h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8223D364h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223D364h case    1:*/		return 0x8223D368;
		  /* 8223D368h */ case    2:  		/* bc 12, CR6_EQ, 84 */
		/* 8223D368h case    2:*/		if ( regs.CR[6].eq ) { return 0x8223D3BC;  }
		/* 8223D368h case    2:*/		return 0x8223D36C;
		  /* 8223D36Ch */ case    3:  		/* lbz R11, <#[R30 + 3]> */
		/* 8223D36Ch case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000003) );
		/* 8223D36Ch case    3:*/		return 0x8223D370;
	}
	return 0x8223D370;
} // Block from 8223D360h-8223D370h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223D370h
// Function '?MaybeExpandColor@CFG@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D370);
		  /* 8223D370h */ case    0:  		/* cmplwi CR0, R11, 0 */
		/* 8223D370h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223D370h case    0:*/		return 0x8223D374;
		  /* 8223D374h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 8223D374h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8223D384;  }
		/* 8223D374h case    1:*/		return 0x8223D378;
		  /* 8223D378h */ case    2:  		/* lbz R11, <#[R30 + 2]> */
		/* 8223D378h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 8223D378h case    2:*/		return 0x8223D37C;
		  /* 8223D37Ch */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 8223D37Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8223D37Ch case    3:*/		return 0x8223D380;
		  /* 8223D380h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 8223D380h case    4:*/		if ( regs.CR[6].eq ) { return 0x8223D3A0;  }
		/* 8223D380h case    4:*/		return 0x8223D384;
	}
	return 0x8223D384;
} // Block from 8223D370h-8223D384h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223D384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D384);
		  /* 8223D384h */ case    0:  		/* lis R11, -32252 */
		/* 8223D384h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223D384h case    0:*/		return 0x8223D388;
		  /* 8223D388h */ case    1:  		/* mr R6, R27 */
		/* 8223D388h case    1:*/		regs.R6 = regs.R27;
		/* 8223D388h case    1:*/		return 0x8223D38C;
		  /* 8223D38Ch */ case    2:  		/* addi R5, R11, 9744 */
		/* 8223D38Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2610);
		/* 8223D38Ch case    2:*/		return 0x8223D390;
		  /* 8223D390h */ case    3:  		/* mr R4, R29 */
		/* 8223D390h case    3:*/		regs.R4 = regs.R29;
		/* 8223D390h case    3:*/		return 0x8223D394;
		  /* 8223D394h */ case    4:  		/* li R7, 139 */
		/* 8223D394h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x8B);
		/* 8223D394h case    4:*/		return 0x8223D398;
		  /* 8223D398h */ case    5:  		/* li R3, 0 */
		/* 8223D398h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223D398h case    5:*/		return 0x8223D39C;
		  /* 8223D39Ch */ case    6:  		/* bl -939924 */
		/* 8223D39Ch case    6:*/		regs.LR = 0x8223D3A0; return 0x82157C08;
		/* 8223D39Ch case    6:*/		return 0x8223D3A0;
	}
	return 0x8223D3A0;
} // Block from 8223D384h-8223D3A0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223D3A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D3A0);
		  /* 8223D3A0h */ case    0:  		/* lwz R4, <#[R31]> */
		/* 8223D3A0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8223D3A0h case    0:*/		return 0x8223D3A4;
		  /* 8223D3A4h */ case    1:  		/* lwz R3, <#[R31 + 20]> */
		/* 8223D3A4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D3A4h case    1:*/		return 0x8223D3A8;
		  /* 8223D3A8h */ case    2:  		/* bl -1744 */
		/* 8223D3A8h case    2:*/		regs.LR = 0x8223D3AC; return 0x8223CCD8;
		/* 8223D3A8h case    2:*/		return 0x8223D3AC;
		  /* 8223D3ACh */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223D3ACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D3ACh case    3:*/		return 0x8223D3B0;
		  /* 8223D3B0h */ case    4:  		/* addi R11, R11, 4 */
		/* 8223D3B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223D3B0h case    4:*/		return 0x8223D3B4;
		  /* 8223D3B4h */ case    5:  		/* stw R11, <#[R31 + 20]> */
		/* 8223D3B4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D3B4h case    5:*/		return 0x8223D3B8;
		  /* 8223D3B8h */ case    6:  		/* b 28 */
		/* 8223D3B8h case    6:*/		return 0x8223D3D4;
		/* 8223D3B8h case    6:*/		return 0x8223D3BC;
	}
	return 0x8223D3BC;
} // Block from 8223D3A0h-8223D3BCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223D3BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D3BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D3BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D3BC);
		  /* 8223D3BCh */ case    0:  		/* mr R6, R27 */
		/* 8223D3BCh case    0:*/		regs.R6 = regs.R27;
		/* 8223D3BCh case    0:*/		return 0x8223D3C0;
		  /* 8223D3C0h */ case    1:  		/* mr R5, R28 */
		/* 8223D3C0h case    1:*/		regs.R5 = regs.R28;
		/* 8223D3C0h case    1:*/		return 0x8223D3C4;
		  /* 8223D3C4h */ case    2:  		/* mr R4, R29 */
		/* 8223D3C4h case    2:*/		regs.R4 = regs.R29;
		/* 8223D3C4h case    2:*/		return 0x8223D3C8;
		  /* 8223D3C8h */ case    3:  		/* li R7, 144 */
		/* 8223D3C8h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x90);
		/* 8223D3C8h case    3:*/		return 0x8223D3CC;
		  /* 8223D3CCh */ case    4:  		/* li R3, 0 */
		/* 8223D3CCh case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223D3CCh case    4:*/		return 0x8223D3D0;
		  /* 8223D3D0h */ case    5:  		/* bl -939976 */
		/* 8223D3D0h case    5:*/		regs.LR = 0x8223D3D4; return 0x82157C08;
		/* 8223D3D0h case    5:*/		return 0x8223D3D4;
	}
	return 0x8223D3D4;
} // Block from 8223D3BCh-8223D3D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223D3D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D3D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D3D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D3D4);
		  /* 8223D3D4h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223D3D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D3D4h case    0:*/		return 0x8223D3D8;
		  /* 8223D3D8h */ case    1:  		/* mr R3, R31 */
		/* 8223D3D8h case    1:*/		regs.R3 = regs.R31;
		/* 8223D3D8h case    1:*/		return 0x8223D3DC;
		  /* 8223D3DCh */ case    2:  		/* stw R11, <#[R31 + 28]> */
		/* 8223D3DCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8223D3DCh case    2:*/		return 0x8223D3E0;
		  /* 8223D3E0h */ case    3:  		/* addi R1, R1, 128 */
		/* 8223D3E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223D3E0h case    3:*/		return 0x8223D3E4;
		  /* 8223D3E4h */ case    4:  		/* b -1753408 */
		/* 8223D3E4h case    4:*/		return 0x820912A4;
		/* 8223D3E4h case    4:*/		return 0x8223D3E8;
	}
	return 0x8223D3E8;
} // Block from 8223D3D4h-8223D3E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223D3E8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D3E8);
		  /* 8223D3E8h */ case    0:  		/* mfspr R12, LR */
		/* 8223D3E8h case    0:*/		regs.R12 = regs.LR;
		/* 8223D3E8h case    0:*/		return 0x8223D3EC;
		  /* 8223D3ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223D3ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223D3ECh case    1:*/		return 0x8223D3F0;
		  /* 8223D3F0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8223D3F0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223D3F0h case    2:*/		return 0x8223D3F4;
		  /* 8223D3F4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8223D3F4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8223D3F4h case    3:*/		return 0x8223D3F8;
		  /* 8223D3F8h */ case    4:  		/* mr R31, R3 */
		/* 8223D3F8h case    4:*/		regs.R31 = regs.R3;
		/* 8223D3F8h case    4:*/		return 0x8223D3FC;
		  /* 8223D3FCh */ case    5:  		/* lwz R3, <#[R3 + 68]> */
		/* 8223D3FCh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000044) );
		/* 8223D3FCh case    5:*/		return 0x8223D400;
		  /* 8223D400h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8223D400h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8223D400h case    6:*/		return 0x8223D404;
		  /* 8223D404h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 8223D404h case    7:*/		if ( regs.CR[6].eq ) { return 0x8223D410;  }
		/* 8223D404h case    7:*/		return 0x8223D408;
		  /* 8223D408h */ case    8:  		/* li R4, 1 */
		/* 8223D408h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223D408h case    8:*/		return 0x8223D40C;
		  /* 8223D40Ch */ case    9:  		/* bl 10124 */
		/* 8223D40Ch case    9:*/		regs.LR = 0x8223D410; return 0x8223FB98;
		/* 8223D40Ch case    9:*/		return 0x8223D410;
	}
	return 0x8223D410;
} // Block from 8223D3E8h-8223D410h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223D410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D410);
		  /* 8223D410h */ case    0:  		/* lwz R3, <#[R31 + 64]> */
		/* 8223D410h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000040) );
		/* 8223D410h case    0:*/		return 0x8223D414;
		  /* 8223D414h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8223D414h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8223D414h case    1:*/		return 0x8223D418;
		  /* 8223D418h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8223D418h case    2:*/		if ( regs.CR[6].eq ) { return 0x8223D424;  }
		/* 8223D418h case    2:*/		return 0x8223D41C;
		  /* 8223D41Ch */ case    3:  		/* li R4, 1 */
		/* 8223D41Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223D41Ch case    3:*/		return 0x8223D420;
		  /* 8223D420h */ case    4:  		/* bl 10104 */
		/* 8223D420h case    4:*/		regs.LR = 0x8223D424; return 0x8223FB98;
		/* 8223D420h case    4:*/		return 0x8223D424;
	}
	return 0x8223D424;
} // Block from 8223D410h-8223D424h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223D424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D424);
		  /* 8223D424h */ case    0:  		/* lwz R3, <#[R31 + 60]> */
		/* 8223D424h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000003C) );
		/* 8223D424h case    0:*/		return 0x8223D428;
		  /* 8223D428h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8223D428h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8223D428h case    1:*/		return 0x8223D42C;
		  /* 8223D42Ch */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8223D42Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8223D438;  }
		/* 8223D42Ch case    2:*/		return 0x8223D430;
	}
	return 0x8223D430;
} // Block from 8223D424h-8223D430h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223D430h
// Function '?InitialInput@CFG@XGRAPHICS@@QAAXAAVILInstIterator@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D430);
		  /* 8223D430h */ case    0:  		/* li R4, 1 */
		/* 8223D430h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223D430h case    0:*/		return 0x8223D434;
		  /* 8223D434h */ case    1:  		/* bl 10084 */
		/* 8223D434h case    1:*/		regs.LR = 0x8223D438; return 0x8223FB98;
		/* 8223D434h case    1:*/		return 0x8223D438;
	}
	return 0x8223D438;
} // Block from 8223D430h-8223D438h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223D438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D438);
		  /* 8223D438h */ case    0:  		/* lis R11, -32252 */
		/* 8223D438h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223D438h case    0:*/		return 0x8223D43C;
		  /* 8223D43Ch */ case    1:  		/* lwz R5, <#[R31 + 52]> */
		/* 8223D43Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000034) );
		/* 8223D43Ch case    1:*/		return 0x8223D440;
		  /* 8223D440h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8223D440h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8223D440h case    2:*/		return 0x8223D444;
		  /* 8223D444h */ case    3:  		/* addi R4, R11, 9828 */
		/* 8223D444h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x2664);
		/* 8223D444h case    3:*/		return 0x8223D448;
		  /* 8223D448h */ case    4:  		/* bl -131208 */
		/* 8223D448h case    4:*/		regs.LR = 0x8223D44C; return 0x8221D3C0;
		/* 8223D448h case    4:*/		return 0x8223D44C;
		  /* 8223D44Ch */ case    5:  		/* addi R1, R1, 96 */
		/* 8223D44Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8223D44Ch case    5:*/		return 0x8223D450;
		  /* 8223D450h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223D450h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223D450h case    6:*/		return 0x8223D454;
		  /* 8223D454h */ case    7:  		/* mtspr LR, R12 */
		/* 8223D454h case    7:*/		regs.LR = regs.R12;
		/* 8223D454h case    7:*/		return 0x8223D458;
		  /* 8223D458h */ case    8:  		/* ld R31, <#[R1 - 16]> */
		/* 8223D458h case    8:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223D458h case    8:*/		return 0x8223D45C;
		  /* 8223D45Ch */ case    9:  		/* bclr 20, CR0_LT */
		/* 8223D45Ch case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223D45Ch case    9:*/		return 0x8223D460;
	}
	return 0x8223D460;
} // Block from 8223D438h-8223D460h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223D460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D460);
		  /* 8223D460h */ case    0:  		/* mfspr R12, LR */
		/* 8223D460h case    0:*/		regs.R12 = regs.LR;
		/* 8223D460h case    0:*/		return 0x8223D464;
		  /* 8223D464h */ case    1:  		/* bl -1753668 */
		/* 8223D464h case    1:*/		regs.LR = 0x8223D468; return 0x82091220;
		/* 8223D464h case    1:*/		return 0x8223D468;
		  /* 8223D468h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 8223D468h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8223D468h case    2:*/		return 0x8223D46C;
		  /* 8223D46Ch */ case    3:  		/* lwz R9, <#[R3 + 20]> */
		/* 8223D46Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 8223D46Ch case    3:*/		return 0x8223D470;
		  /* 8223D470h */ case    4:  		/* li R11, 100 */
		/* 8223D470h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D470h case    4:*/		return 0x8223D474;
		  /* 8223D474h */ case    5:  		/* lwz R10, <#[R3 + 52]> */
		/* 8223D474h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000034) );
		/* 8223D474h case    5:*/		return 0x8223D478;
		  /* 8223D478h */ case    6:  		/* lis R8, -32252 */
		/* 8223D478h case    6:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8223D478h case    6:*/		return 0x8223D47C;
		  /* 8223D47Ch */ case    7:  		/* li R15, 1 */
		/* 8223D47Ch case    7:*/		cpu::op::li<0>(regs,&regs.R15,0x1);
		/* 8223D47Ch case    7:*/		return 0x8223D480;
		  /* 8223D480h */ case    8:  		/* addi R10, R10, 1 */
		/* 8223D480h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8223D480h case    8:*/		return 0x8223D484;
		  /* 8223D484h */ case    9:  		/* addi R8, R8, 9616 */
		/* 8223D484h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x2590);
		/* 8223D484h case    9:*/		return 0x8223D488;
		  /* 8223D488h */ case   10:  		/* lwz R9, <#[R9]> */
		/* 8223D488h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 8223D488h case   10:*/		return 0x8223D48C;
		  /* 8223D48Ch */ case   11:  		/* mr R31, R3 */
		/* 8223D48Ch case   11:*/		regs.R31 = regs.R3;
		/* 8223D48Ch case   11:*/		return 0x8223D490;
		  /* 8223D490h */ case   12:  		/* stw R10, <#[R3 + 52]> */
		/* 8223D490h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000034) );
		/* 8223D490h case   12:*/		return 0x8223D494;
		  /* 8223D494h */ case   13:  		/* rlwinm R10, R9, 0, 16, 31 */
		/* 8223D494h case   13:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R9);
		/* 8223D494h case   13:*/		return 0x8223D498;
		  /* 8223D498h */ case   14:  		/* subfc R9, R11, R10 */
		/* 8223D498h case   14:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223D498h case   14:*/		return 0x8223D49C;
		  /* 8223D49Ch */ case   15:  		/* eqv R11, R11, R10 */
		/* 8223D49Ch case   15:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D49Ch case   15:*/		return 0x8223D4A0;
		  /* 8223D4A0h */ case   16:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D4A0h case   16:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D4A0h case   16:*/		return 0x8223D4A4;
		  /* 8223D4A4h */ case   17:  		/* addze R11, R11 */
		/* 8223D4A4h case   17:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D4A4h case   17:*/		return 0x8223D4A8;
		  /* 8223D4A8h */ case   18:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D4A8h case   18:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D4A8h case   18:*/		return 0x8223D4AC;
		  /* 8223D4ACh */ case   19:  		/* subfic R11, R11, 0 */
		/* 8223D4ACh case   19:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D4ACh case   19:*/		return 0x8223D4B0;
		  /* 8223D4B0h */ case   20:  		/* subfe R11, R11, R11 */
		/* 8223D4B0h case   20:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D4B0h case   20:*/		return 0x8223D4B4;
		  /* 8223D4B4h */ case   21:  		/* and R11, R11, R10 */
		/* 8223D4B4h case   21:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D4B4h case   21:*/		return 0x8223D4B8;
		  /* 8223D4B8h */ case   22:  		/* srawi R10, R11, 5 */
		/* 8223D4B8h case   22:*/		cpu::op::srawi<0,5>(regs,&regs.R10,regs.R11);
		/* 8223D4B8h case   22:*/		return 0x8223D4BC;
		  /* 8223D4BCh */ case   23:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8223D4BCh case   23:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8223D4BCh case   23:*/		return 0x8223D4C0;
		  /* 8223D4C0h */ case   24:  		/* addze R10, R10 */
		/* 8223D4C0h case   24:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8223D4C0h case   24:*/		return 0x8223D4C4;
		  /* 8223D4C4h */ case   25:  		/* slw R11, R15, R11 */
		/* 8223D4C4h case   25:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R15,regs.R11);
		/* 8223D4C4h case   25:*/		return 0x8223D4C8;
		  /* 8223D4C8h */ case   26:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8223D4C8h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8223D4C8h case   26:*/		return 0x8223D4CC;
		  /* 8223D4CCh */ case   27:  		/* lwzx R10, <#[R10 + R8]> */
		/* 8223D4CCh case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8223D4CCh case   27:*/		return 0x8223D4D0;
		  /* 8223D4D0h */ case   28:  		/* and. R11, R11, R10 */
		/* 8223D4D0h case   28:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D4D0h case   28:*/		return 0x8223D4D4;
		  /* 8223D4D4h */ case   29:  		/* bc 4, CR0_EQ, 12 */
		/* 8223D4D4h case   29:*/		if ( !regs.CR[0].eq ) { return 0x8223D4E0;  }
		/* 8223D4D4h case   29:*/		return 0x8223D4D8;
		  /* 8223D4D8h */ case   30:  		/* li R3, 1 */
		/* 8223D4D8h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223D4D8h case   30:*/		return 0x8223D4DC;
		  /* 8223D4DCh */ case   31:  		/* b 3804 */
		/* 8223D4DCh case   31:*/		return 0x8223E3B8;
		/* 8223D4DCh case   31:*/		return 0x8223D4E0;
	}
	return 0x8223D4E0;
} // Block from 8223D460h-8223D4E0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8223D4E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D4E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D4E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D4E0);
		  /* 8223D4E0h */ case    0:  		/* li R27, 0 */
		/* 8223D4E0h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8223D4E0h case    0:*/		return 0x8223D4E4;
		  /* 8223D4E4h */ case    1:  		/* lwz R29, <#[R31 + 20]> */
		/* 8223D4E4h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D4E4h case    1:*/		return 0x8223D4E8;
		  /* 8223D4E8h */ case    2:  		/* addi R10, R29, 4 */
		/* 8223D4E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4);
		/* 8223D4E8h case    2:*/		return 0x8223D4EC;
		  /* 8223D4ECh */ case    3:  		/* lhz R11, <#[R29 + 2]> */
		/* 8223D4ECh case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000002) );
		/* 8223D4ECh case    3:*/		return 0x8223D4F0;
		  /* 8223D4F0h */ case    4:  		/* cmplwi CR6, R11, 15 */
		/* 8223D4F0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 8223D4F0h case    4:*/		return 0x8223D4F4;
		  /* 8223D4F4h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 8223D4F4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8223D4FC;  }
		/* 8223D4F4h case    5:*/		return 0x8223D4F8;
		  /* 8223D4F8h */ case    6:  		/* mr R10, R27 */
		/* 8223D4F8h case    6:*/		regs.R10 = regs.R27;
		/* 8223D4F8h case    6:*/		return 0x8223D4FC;
	}
	return 0x8223D4FC;
} // Block from 8223D4E0h-8223D4FCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223D4FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D4FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D4FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D4FC);
		  /* 8223D4FCh */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8223D4FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8223D4FCh case    0:*/		return 0x8223D500;
		  /* 8223D500h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8223D500h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223D520;  }
		/* 8223D500h case    1:*/		return 0x8223D504;
		  /* 8223D504h */ case    2:  		/* addi R11, R29, 8 */
		/* 8223D504h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x8);
		/* 8223D504h case    2:*/		return 0x8223D508;
		  /* 8223D508h */ case    3:  		/* stw R11, <#[R31 + 20]> */
		/* 8223D508h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D508h case    3:*/		return 0x8223D50C;
		  /* 8223D50Ch */ case    4:  		/* lwz R10, <#[R10]> */
		/* 8223D50Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8223D50Ch case    4:*/		return 0x8223D510;
		  /* 8223D510h */ case    5:  		/* rlwinm R10, R10, 2, 14, 29 */
		/* 8223D510h case    5:*/		cpu::op::rlwinm<0,2,14,29>(regs,&regs.R10,regs.R10);
		/* 8223D510h case    5:*/		return 0x8223D514;
		  /* 8223D514h */ case    6:  		/* add R11, R10, R11 */
		/* 8223D514h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223D514h case    6:*/		return 0x8223D518;
		  /* 8223D518h */ case    7:  		/* stw R11, <#[R31 + 20]> */
		/* 8223D518h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D518h case    7:*/		return 0x8223D51C;
		  /* 8223D51Ch */ case    8:  		/* b -56 */
		/* 8223D51Ch case    8:*/		return 0x8223D4E4;
		/* 8223D51Ch case    8:*/		return 0x8223D520;
	}
	return 0x8223D520;
} // Block from 8223D4FCh-8223D520h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223D520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D520);
		  /* 8223D520h */ case    0:  		/* lis R11, -32255 */
		/* 8223D520h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8223D520h case    0:*/		return 0x8223D524;
		  /* 8223D524h */ case    1:  		/* lwz R19, <#[R1 + 80]> */
		/* 8223D524h case    1:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x00000050) );
		/* 8223D524h case    1:*/		return 0x8223D528;
		  /* 8223D528h */ case    2:  		/* lis R10, -32252 */
		/* 8223D528h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223D528h case    2:*/		return 0x8223D52C;
		  /* 8223D52Ch */ case    3:  		/* lis R9, -32253 */
		/* 8223D52Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223D52Ch case    3:*/		return 0x8223D530;
		  /* 8223D530h */ case    4:  		/* lis R8, -32252 */
		/* 8223D530h case    4:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8223D530h case    4:*/		return 0x8223D534;
		  /* 8223D534h */ case    5:  		/* lis R7, -32252 */
		/* 8223D534h case    5:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 8223D534h case    5:*/		return 0x8223D538;
		  /* 8223D538h */ case    6:  		/* li R22, -1 */
		/* 8223D538h case    6:*/		cpu::op::li<0>(regs,&regs.R22,0xFFFFFFFF);
		/* 8223D538h case    6:*/		return 0x8223D53C;
		  /* 8223D53Ch */ case    7:  		/* addi R18, R11, 5216 */
		/* 8223D53Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R11,0x1460);
		/* 8223D53Ch case    7:*/		return 0x8223D540;
		  /* 8223D540h */ case    8:  		/* addi R17, R10, 9904 */
		/* 8223D540h case    8:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R10,0x26B0);
		/* 8223D540h case    8:*/		return 0x8223D544;
		  /* 8223D544h */ case    9:  		/* addi R21, R9, 27460 */
		/* 8223D544h case    9:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R9,0x6B44);
		/* 8223D544h case    9:*/		return 0x8223D548;
		  /* 8223D548h */ case   10:  		/* addi R16, R8, 9888 */
		/* 8223D548h case   10:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R8,0x26A0);
		/* 8223D548h case   10:*/		return 0x8223D54C;
		  /* 8223D54Ch */ case   11:  		/* addi R20, R7, 9640 */
		/* 8223D54Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R7,0x25A8);
		/* 8223D54Ch case   11:*/		return 0x8223D550;
		  /* 8223D550h */ case   12:  		/* mr R3, R29 */
		/* 8223D550h case   12:*/		regs.R3 = regs.R29;
		/* 8223D550h case   12:*/		return 0x8223D554;
		  /* 8223D554h */ case   13:  		/* bl -1276 */
		/* 8223D554h case   13:*/		regs.LR = 0x8223D558; return 0x8223D058;
		/* 8223D554h case   13:*/		return 0x8223D558;
		  /* 8223D558h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223D558h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223D558h case   14:*/		return 0x8223D55C;
		  /* 8223D55Ch */ case   15:  		/* bc 4, CR0_EQ, 264 */
		/* 8223D55Ch case   15:*/		if ( !regs.CR[0].eq ) { return 0x8223D664;  }
		/* 8223D55Ch case   15:*/		return 0x8223D560;
		  /* 8223D560h */ case   16:  		/* lwz R10, <#[R29]> */
		/* 8223D560h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8223D560h case   16:*/		return 0x8223D564;
		  /* 8223D564h */ case   17:  		/* li R11, 100 */
		/* 8223D564h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D564h case   17:*/		return 0x8223D568;
		  /* 8223D568h */ case   18:  		/* rlwinm R30, R10, 0, 16, 31 */
		/* 8223D568h case   18:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R30,regs.R10);
		/* 8223D568h case   18:*/		return 0x8223D56C;
		  /* 8223D56Ch */ case   19:  		/* subfc R10, R11, R30 */
		/* 8223D56Ch case   19:*/		cpu::op::subfc<0>(regs,&regs.R10,regs.R11,regs.R30);
		/* 8223D56Ch case   19:*/		return 0x8223D570;
	}
	return 0x8223D570;
} // Block from 8223D520h-8223D570h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8223D570h
// Function '?ReleaseInternal@Arena@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D570);
		  /* 8223D570h */ case    0:  		/* eqv R11, R11, R30 */
		/* 8223D570h case    0:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8223D570h case    0:*/		return 0x8223D574;
		  /* 8223D574h */ case    1:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D574h case    1:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D574h case    1:*/		return 0x8223D578;
		  /* 8223D578h */ case    2:  		/* addze R11, R11 */
		/* 8223D578h case    2:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D578h case    2:*/		return 0x8223D57C;
		  /* 8223D57Ch */ case    3:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D57Ch case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D57Ch case    3:*/		return 0x8223D580;
		  /* 8223D580h */ case    4:  		/* subfic R11, R11, 0 */
		/* 8223D580h case    4:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D580h case    4:*/		return 0x8223D584;
		  /* 8223D584h */ case    5:  		/* subfe R11, R11, R11 */
		/* 8223D584h case    5:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D584h case    5:*/		return 0x8223D588;
		  /* 8223D588h */ case    6:  		/* and R11, R11, R30 */
		/* 8223D588h case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8223D588h case    6:*/		return 0x8223D58C;
		  /* 8223D58Ch */ case    7:  		/* cmpwi CR6, R11, 83 */
		/* 8223D58Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000053);
		/* 8223D58Ch case    7:*/		return 0x8223D590;
		  /* 8223D590h */ case    8:  		/* bc 12, CR6_EQ, 212 */
		/* 8223D590h case    8:*/		if ( regs.CR[6].eq ) { return 0x8223D664;  }
		/* 8223D590h case    8:*/		return 0x8223D594;
		  /* 8223D594h */ case    9:  		/* mr R3, R29 */
		/* 8223D594h case    9:*/		regs.R3 = regs.R29;
		/* 8223D594h case    9:*/		return 0x8223D598;
		  /* 8223D598h */ case   10:  		/* bl -1264 */
		/* 8223D598h case   10:*/		regs.LR = 0x8223D59C; return 0x8223D0A8;
		/* 8223D598h case   10:*/		return 0x8223D59C;
		  /* 8223D59Ch */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223D59Ch case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223D59Ch case   11:*/		return 0x8223D5A0;
		  /* 8223D5A0h */ case   12:  		/* bc 4, CR0_EQ, 196 */
		/* 8223D5A0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8223D664;  }
		/* 8223D5A0h case   12:*/		return 0x8223D5A4;
		  /* 8223D5A4h */ case   13:  		/* li R11, 100 */
		/* 8223D5A4h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D5A4h case   13:*/		return 0x8223D5A8;
		  /* 8223D5A8h */ case   14:  		/* subfc R10, R11, R30 */
		/* 8223D5A8h case   14:*/		cpu::op::subfc<0>(regs,&regs.R10,regs.R11,regs.R30);
		/* 8223D5A8h case   14:*/		return 0x8223D5AC;
		  /* 8223D5ACh */ case   15:  		/* eqv R11, R11, R30 */
		/* 8223D5ACh case   15:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8223D5ACh case   15:*/		return 0x8223D5B0;
		  /* 8223D5B0h */ case   16:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D5B0h case   16:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D5B0h case   16:*/		return 0x8223D5B4;
		  /* 8223D5B4h */ case   17:  		/* addze R11, R11 */
		/* 8223D5B4h case   17:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D5B4h case   17:*/		return 0x8223D5B8;
		  /* 8223D5B8h */ case   18:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D5B8h case   18:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D5B8h case   18:*/		return 0x8223D5BC;
		  /* 8223D5BCh */ case   19:  		/* subfic R11, R11, 0 */
		/* 8223D5BCh case   19:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D5BCh case   19:*/		return 0x8223D5C0;
		  /* 8223D5C0h */ case   20:  		/* subfe R11, R11, R11 */
		/* 8223D5C0h case   20:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D5C0h case   20:*/		return 0x8223D5C4;
		  /* 8223D5C4h */ case   21:  		/* and R11, R11, R30 */
		/* 8223D5C4h case   21:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8223D5C4h case   21:*/		return 0x8223D5C8;
		  /* 8223D5C8h */ case   22:  		/* cmpwi CR6, R11, 132 */
		/* 8223D5C8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000084);
		/* 8223D5C8h case   22:*/		return 0x8223D5CC;
		  /* 8223D5CCh */ case   23:  		/* bc 12, CR6_EQ, 152 */
		/* 8223D5CCh case   23:*/		if ( regs.CR[6].eq ) { return 0x8223D664;  }
		/* 8223D5CCh case   23:*/		return 0x8223D5D0;
		  /* 8223D5D0h */ case   24:  		/* mr R3, R29 */
		/* 8223D5D0h case   24:*/		regs.R3 = regs.R29;
		/* 8223D5D0h case   24:*/		return 0x8223D5D4;
		  /* 8223D5D4h */ case   25:  		/* bl -2068 */
		/* 8223D5D4h case   25:*/		regs.LR = 0x8223D5D8; return 0x8223CDC0;
		/* 8223D5D4h case   25:*/		return 0x8223D5D8;
		  /* 8223D5D8h */ case   26:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223D5D8h case   26:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223D5D8h case   26:*/		return 0x8223D5DC;
		  /* 8223D5DCh */ case   27:  		/* bc 4, CR0_EQ, 136 */
		/* 8223D5DCh case   27:*/		if ( !regs.CR[0].eq ) { return 0x8223D664;  }
		/* 8223D5DCh case   27:*/		return 0x8223D5E0;
		  /* 8223D5E0h */ case   28:  		/* li R11, 100 */
		/* 8223D5E0h case   28:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D5E0h case   28:*/		return 0x8223D5E4;
		  /* 8223D5E4h */ case   29:  		/* subfc R10, R11, R30 */
		/* 8223D5E4h case   29:*/		cpu::op::subfc<0>(regs,&regs.R10,regs.R11,regs.R30);
		/* 8223D5E4h case   29:*/		return 0x8223D5E8;
	}
	return 0x8223D5E8;
} // Block from 8223D570h-8223D5E8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8223D5E8h
// Function '?Size@Arena@XGRAPHICS@@QBAHXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D5E8);
		  /* 8223D5E8h */ case    0:  		/* eqv R11, R11, R30 */
		/* 8223D5E8h case    0:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8223D5E8h case    0:*/		return 0x8223D5EC;
		  /* 8223D5ECh */ case    1:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D5ECh case    1:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D5ECh case    1:*/		return 0x8223D5F0;
		  /* 8223D5F0h */ case    2:  		/* addze R11, R11 */
		/* 8223D5F0h case    2:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D5F0h case    2:*/		return 0x8223D5F4;
		  /* 8223D5F4h */ case    3:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D5F4h case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D5F4h case    3:*/		return 0x8223D5F8;
		  /* 8223D5F8h */ case    4:  		/* subfic R11, R11, 0 */
		/* 8223D5F8h case    4:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D5F8h case    4:*/		return 0x8223D5FC;
		  /* 8223D5FCh */ case    5:  		/* subfe R11, R11, R11 */
		/* 8223D5FCh case    5:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D5FCh case    5:*/		return 0x8223D600;
		  /* 8223D600h */ case    6:  		/* and R11, R11, R30 */
		/* 8223D600h case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8223D600h case    6:*/		return 0x8223D604;
		  /* 8223D604h */ case    7:  		/* cmpwi CR6, R11, 39 */
		/* 8223D604h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000027);
		/* 8223D604h case    7:*/		return 0x8223D608;
		  /* 8223D608h */ case    8:  		/* bc 12, CR6_EQ, 92 */
		/* 8223D608h case    8:*/		if ( regs.CR[6].eq ) { return 0x8223D664;  }
		/* 8223D608h case    8:*/		return 0x8223D60C;
		  /* 8223D60Ch */ case    9:  		/* li R11, 100 */
		/* 8223D60Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D60Ch case    9:*/		return 0x8223D610;
		  /* 8223D610h */ case   10:  		/* subfc R10, R11, R30 */
		/* 8223D610h case   10:*/		cpu::op::subfc<0>(regs,&regs.R10,regs.R11,regs.R30);
		/* 8223D610h case   10:*/		return 0x8223D614;
		  /* 8223D614h */ case   11:  		/* eqv R11, R11, R30 */
		/* 8223D614h case   11:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8223D614h case   11:*/		return 0x8223D618;
		  /* 8223D618h */ case   12:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D618h case   12:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D618h case   12:*/		return 0x8223D61C;
		  /* 8223D61Ch */ case   13:  		/* addze R11, R11 */
		/* 8223D61Ch case   13:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D61Ch case   13:*/		return 0x8223D620;
		  /* 8223D620h */ case   14:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D620h case   14:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D620h case   14:*/		return 0x8223D624;
		  /* 8223D624h */ case   15:  		/* subfic R11, R11, 0 */
		/* 8223D624h case   15:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D624h case   15:*/		return 0x8223D628;
		  /* 8223D628h */ case   16:  		/* subfe R11, R11, R11 */
		/* 8223D628h case   16:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D628h case   16:*/		return 0x8223D62C;
		  /* 8223D62Ch */ case   17:  		/* and R11, R11, R30 */
		/* 8223D62Ch case   17:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8223D62Ch case   17:*/		return 0x8223D630;
	}
	return 0x8223D630;
} // Block from 8223D5E8h-8223D630h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8223D630h
// Function '?Grow@Arena@XGRAPHICS@@QBAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D630);
		  /* 8223D630h */ case    0:  		/* cmpwi CR6, R11, 41 */
		/* 8223D630h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000029);
		/* 8223D630h case    0:*/		return 0x8223D634;
		  /* 8223D634h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 8223D634h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223D664;  }
		/* 8223D634h case    1:*/		return 0x8223D638;
		  /* 8223D638h */ case    2:  		/* li R11, 100 */
		/* 8223D638h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D638h case    2:*/		return 0x8223D63C;
		  /* 8223D63Ch */ case    3:  		/* subfc R10, R11, R30 */
		/* 8223D63Ch case    3:*/		cpu::op::subfc<0>(regs,&regs.R10,regs.R11,regs.R30);
		/* 8223D63Ch case    3:*/		return 0x8223D640;
		  /* 8223D640h */ case    4:  		/* eqv R11, R11, R30 */
		/* 8223D640h case    4:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8223D640h case    4:*/		return 0x8223D644;
		  /* 8223D644h */ case    5:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D644h case    5:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D644h case    5:*/		return 0x8223D648;
		  /* 8223D648h */ case    6:  		/* addze R11, R11 */
		/* 8223D648h case    6:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D648h case    6:*/		return 0x8223D64C;
		  /* 8223D64Ch */ case    7:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D64Ch case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D64Ch case    7:*/		return 0x8223D650;
		  /* 8223D650h */ case    8:  		/* subfic R11, R11, 0 */
		/* 8223D650h case    8:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D650h case    8:*/		return 0x8223D654;
		  /* 8223D654h */ case    9:  		/* subfe R11, R11, R11 */
		/* 8223D654h case    9:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D654h case    9:*/		return 0x8223D658;
		  /* 8223D658h */ case   10:  		/* and R11, R11, R30 */
		/* 8223D658h case   10:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8223D658h case   10:*/		return 0x8223D65C;
		  /* 8223D65Ch */ case   11:  		/* cmpwi CR6, R11, 29 */
		/* 8223D65Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 8223D65Ch case   11:*/		return 0x8223D660;
		  /* 8223D660h */ case   12:  		/* bc 4, CR6_EQ, 3212 */
		/* 8223D660h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8223E2EC;  }
		/* 8223D660h case   12:*/		return 0x8223D664;
	}
	return 0x8223D664;
} // Block from 8223D630h-8223D664h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223D664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D664);
		  /* 8223D664h */ case    0:  		/* lwz R10, <#[R29]> */
		/* 8223D664h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8223D664h case    0:*/		return 0x8223D668;
		  /* 8223D668h */ case    1:  		/* li R11, 100 */
		/* 8223D668h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D668h case    1:*/		return 0x8223D66C;
		  /* 8223D66Ch */ case    2:  		/* mr R23, R27 */
		/* 8223D66Ch case    2:*/		regs.R23 = regs.R27;
		/* 8223D66Ch case    2:*/		return 0x8223D670;
		  /* 8223D670h */ case    3:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223D670h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223D670h case    3:*/		return 0x8223D674;
		  /* 8223D674h */ case    4:  		/* subfc R9, R11, R10 */
		/* 8223D674h case    4:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223D674h case    4:*/		return 0x8223D678;
		  /* 8223D678h */ case    5:  		/* eqv R11, R11, R10 */
		/* 8223D678h case    5:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D678h case    5:*/		return 0x8223D67C;
		  /* 8223D67Ch */ case    6:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D67Ch case    6:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D67Ch case    6:*/		return 0x8223D680;
		  /* 8223D680h */ case    7:  		/* addze R11, R11 */
		/* 8223D680h case    7:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D680h case    7:*/		return 0x8223D684;
		  /* 8223D684h */ case    8:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D684h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D684h case    8:*/		return 0x8223D688;
		  /* 8223D688h */ case    9:  		/* subfic R11, R11, 0 */
		/* 8223D688h case    9:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D688h case    9:*/		return 0x8223D68C;
		  /* 8223D68Ch */ case   10:  		/* subfe R11, R11, R11 */
		/* 8223D68Ch case   10:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D68Ch case   10:*/		return 0x8223D690;
		  /* 8223D690h */ case   11:  		/* and R11, R11, R10 */
		/* 8223D690h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D690h case   11:*/		return 0x8223D694;
		  /* 8223D694h */ case   12:  		/* cmpwi CR6, R11, 52 */
		/* 8223D694h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000034);
		/* 8223D694h case   12:*/		return 0x8223D698;
		  /* 8223D698h */ case   13:  		/* bc 12, CR6_GT, 1296 */
		/* 8223D698h case   13:*/		if ( regs.CR[6].gt ) { return 0x8223DBA8;  }
		/* 8223D698h case   13:*/		return 0x8223D69C;
		  /* 8223D69Ch */ case   14:  		/* bc 12, CR6_EQ, 3064 */
		/* 8223D69Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x8223E294;  }
		/* 8223D69Ch case   14:*/		return 0x8223D6A0;
	}
	return 0x8223D6A0;
} // Block from 8223D664h-8223D6A0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223D6A0h
// Function '??1ILProgram@XGRAPHICS@@QAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D6A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D6A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D6A0);
		  /* 8223D6A0h */ case    0:  		/* cmpwi CR6, R11, 8 */
		/* 8223D6A0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8223D6A0h case    0:*/		return 0x8223D6A4;
		  /* 8223D6A4h */ case    1:  		/* bc 12, CR6_EQ, 1064 */
		/* 8223D6A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223DACC;  }
		/* 8223D6A4h case    1:*/		return 0x8223D6A8;
		  /* 8223D6A8h */ case    2:  		/* cmpwi CR6, R11, 9 */
		/* 8223D6A8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8223D6A8h case    2:*/		return 0x8223D6AC;
		  /* 8223D6ACh */ case    3:  		/* bc 12, CR6_EQ, 396 */
		/* 8223D6ACh case    3:*/		if ( regs.CR[6].eq ) { return 0x8223D838;  }
		/* 8223D6ACh case    3:*/		return 0x8223D6B0;
		  /* 8223D6B0h */ case    4:  		/* cmpwi CR6, R11, 29 */
		/* 8223D6B0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 8223D6B0h case    4:*/		return 0x8223D6B4;
		  /* 8223D6B4h */ case    5:  		/* bc 12, CR6_EQ, 348 */
		/* 8223D6B4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8223D810;  }
		/* 8223D6B4h case    5:*/		return 0x8223D6B8;
		  /* 8223D6B8h */ case    6:  		/* cmpwi CR6, R11, 39 */
		/* 8223D6B8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000027);
		/* 8223D6B8h case    6:*/		return 0x8223D6BC;
		  /* 8223D6BCh */ case    7:  		/* bc 12, CR6_EQ, 116 */
		/* 8223D6BCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8223D730;  }
		/* 8223D6BCh case    7:*/		return 0x8223D6C0;
	}
	return 0x8223D6C0;
} // Block from 8223D6A0h-8223D6C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8223D6C0h
// Function '?Make@ILProgram@XGRAPHICS@@SAPAV12@PAEPAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D6C0);
		  /* 8223D6C0h */ case    0:  		/* cmpwi CR6, R11, 41 */
		/* 8223D6C0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000029);
		/* 8223D6C0h case    0:*/		return 0x8223D6C4;
		  /* 8223D6C4h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 8223D6C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223D71C;  }
		/* 8223D6C4h case    1:*/		return 0x8223D6C8;
		  /* 8223D6C8h */ case    2:  		/* cmpwi CR6, R11, 50 */
		/* 8223D6C8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000032);
		/* 8223D6C8h case    2:*/		return 0x8223D6CC;
		  /* 8223D6CCh */ case    3:  		/* bc 4, CR6_EQ, 3036 */
		/* 8223D6CCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x8223E2A8;  }
		/* 8223D6CCh case    3:*/		return 0x8223D6D0;
		  /* 8223D6D0h */ case    4:  		/* addi R11, R29, 8 */
		/* 8223D6D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x8);
		/* 8223D6D0h case    4:*/		return 0x8223D6D4;
		  /* 8223D6D4h */ case    5:  		/* stw R11, <#[R31 + 20]> */
		/* 8223D6D4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D6D4h case    5:*/		return 0x8223D6D8;
		  /* 8223D6D8h */ case    6:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223D6D8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D6D8h case    6:*/		return 0x8223D6DC;
		  /* 8223D6DCh */ case    7:  		/* li R10, 100 */
		/* 8223D6DCh case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x64);
		/* 8223D6DCh case    7:*/		return 0x8223D6E0;
		  /* 8223D6E0h */ case    8:  		/* lwz R9, <#[R11]> */
		/* 8223D6E0h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8223D6E0h case    8:*/		return 0x8223D6E4;
		  /* 8223D6E4h */ case    9:  		/* addi R11, R11, 4 */
		/* 8223D6E4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223D6E4h case    9:*/		return 0x8223D6E8;
		  /* 8223D6E8h */ case   10:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 8223D6E8h case   10:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 8223D6E8h case   10:*/		return 0x8223D6EC;
		  /* 8223D6ECh */ case   11:  		/* stw R11, <#[R31 + 20]> */
		/* 8223D6ECh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D6ECh case   11:*/		return 0x8223D6F0;
		  /* 8223D6F0h */ case   12:  		/* subfc R8, R10, R9 */
		/* 8223D6F0h case   12:*/		cpu::op::subfc<0>(regs,&regs.R8,regs.R10,regs.R9);
		/* 8223D6F0h case   12:*/		return 0x8223D6F4;
		  /* 8223D6F4h */ case   13:  		/* eqv R10, R10, R9 */
		/* 8223D6F4h case   13:*/		cpu::op::eqv<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8223D6F4h case   13:*/		return 0x8223D6F8;
		  /* 8223D6F8h */ case   14:  		/* rlwinm R10, R10, 1, 31, 31 */
		/* 8223D6F8h case   14:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R10);
		/* 8223D6F8h case   14:*/		return 0x8223D6FC;
		  /* 8223D6FCh */ case   15:  		/* addze R10, R10 */
		/* 8223D6FCh case   15:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8223D6FCh case   15:*/		return 0x8223D700;
		  /* 8223D700h */ case   16:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 8223D700h case   16:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8223D700h case   16:*/		return 0x8223D704;
		  /* 8223D704h */ case   17:  		/* subfic R10, R10, 0 */
		/* 8223D704h case   17:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 8223D704h case   17:*/		return 0x8223D708;
		  /* 8223D708h */ case   18:  		/* subfe R10, R10, R10 */
		/* 8223D708h case   18:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8223D708h case   18:*/		return 0x8223D70C;
		  /* 8223D70Ch */ case   19:  		/* and R10, R10, R9 */
		/* 8223D70Ch case   19:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8223D70Ch case   19:*/		return 0x8223D710;
		  /* 8223D710h */ case   20:  		/* cmpwi CR6, R10, 83 */
		/* 8223D710h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000053);
		/* 8223D710h case   20:*/		return 0x8223D714;
		  /* 8223D714h */ case   21:  		/* bc 4, CR6_EQ, -60 */
		/* 8223D714h case   21:*/		if ( !regs.CR[6].eq ) { return 0x8223D6D8;  }
		/* 8223D714h case   21:*/		return 0x8223D718;
		  /* 8223D718h */ case   22:  		/* b 2960 */
		/* 8223D718h case   22:*/		return 0x8223E2A8;
		/* 8223D718h case   22:*/		return 0x8223D71C;
	}
	return 0x8223D71C;
} // Block from 8223D6C0h-8223D71Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8223D71Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D71C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D71C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D71C);
		  /* 8223D71Ch */ case    0:  		/* lwz R3, <#[R31 + 68]> */
		/* 8223D71Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000044) );
		/* 8223D71Ch case    0:*/		return 0x8223D720;
		  /* 8223D720h */ case    1:  		/* bl 120368 */
		/* 8223D720h case    1:*/		regs.LR = 0x8223D724; return 0x8225AD50;
		/* 8223D720h case    1:*/		return 0x8223D724;
		  /* 8223D724h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8223D724h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8223D724h case    2:*/		return 0x8223D728;
		  /* 8223D728h */ case    3:  		/* bc 12, CR0_EQ, 2940 */
		/* 8223D728h case    3:*/		if ( regs.CR[0].eq ) { return 0x8223E2A4;  }
		/* 8223D728h case    3:*/		return 0x8223D72C;
		  /* 8223D72Ch */ case    4:  		/* b 256 */
		/* 8223D72Ch case    4:*/		return 0x8223D82C;
		/* 8223D72Ch case    4:*/		return 0x8223D730;
	}
	return 0x8223D730;
} // Block from 8223D71Ch-8223D730h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223D730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D730);
		  /* 8223D730h */ case    0:  		/* lwz R11, <#[R31 + 68]> */
		/* 8223D730h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 8223D730h case    0:*/		return 0x8223D734;
		  /* 8223D734h */ case    1:  		/* lwz R9, <#[R11 + 4]> */
		/* 8223D734h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8223D734h case    1:*/		return 0x8223D738;
		  /* 8223D738h */ case    2:  		/* addi R10, R9, -1 */
		/* 8223D738h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0xFFFFFFFF);
		/* 8223D738h case    2:*/		return 0x8223D73C;
		  /* 8223D73Ch */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 8223D73Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8223D73Ch case    3:*/		return 0x8223D740;
	}
	return 0x8223D740;
} // Block from 8223D730h-8223D740h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223D740h
// Function '?MakePair@ILProgram@XGRAPHICS@@SAPAV12@PAE0PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D740);
		  /* 8223D740h */ case    0:  		/* bc 4, CR6_LT, 20 */
		/* 8223D740h case    0:*/		if ( !regs.CR[6].lt ) { return 0x8223D754;  }
		/* 8223D740h case    0:*/		return 0x8223D744;
		  /* 8223D744h */ case    1:  		/* lwz R11, <#[R11 + 8]> */
		/* 8223D744h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8223D744h case    1:*/		return 0x8223D748;
		  /* 8223D748h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8223D748h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8223D748h case    2:*/		return 0x8223D74C;
		  /* 8223D74Ch */ case    3:  		/* add R11, R10, R11 */
		/* 8223D74Ch case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223D74Ch case    3:*/		return 0x8223D750;
		  /* 8223D750h */ case    4:  		/* b 8 */
		/* 8223D750h case    4:*/		return 0x8223D758;
		/* 8223D750h case    4:*/		return 0x8223D754;
	}
	return 0x8223D754;
} // Block from 8223D740h-8223D754h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223D754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D754);
		  /* 8223D754h */ case    0:  		/* mr R11, R27 */
		/* 8223D754h case    0:*/		regs.R11 = regs.R27;
		/* 8223D754h case    0:*/		return 0x8223D758;
	}
	return 0x8223D758;
} // Block from 8223D754h-8223D758h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223D758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D758);
		  /* 8223D758h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 8223D758h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8223D758h case    0:*/		return 0x8223D75C;
		  /* 8223D75Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8223D75Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223D75Ch case    1:*/		return 0x8223D760;
		  /* 8223D760h */ case    2:  		/* bc 12, CR6_EQ, 2884 */
		/* 8223D760h case    2:*/		if ( regs.CR[6].eq ) { return 0x8223E2A4;  }
		/* 8223D760h case    2:*/		return 0x8223D764;
		  /* 8223D764h */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 8223D764h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8223D764h case    3:*/		return 0x8223D768;
		  /* 8223D768h */ case    4:  		/* bc 4, CR6_EQ, 196 */
		/* 8223D768h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8223D82C;  }
		/* 8223D768h case    4:*/		return 0x8223D76C;
		  /* 8223D76Ch */ case    5:  		/* mr R29, R27 */
		/* 8223D76Ch case    5:*/		regs.R29 = regs.R27;
		/* 8223D76Ch case    5:*/		return 0x8223D770;
		  /* 8223D770h */ case    6:  		/* cmpwi CR6, R29, 0 */
		/* 8223D770h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8223D770h case    6:*/		return 0x8223D774;
		  /* 8223D774h */ case    7:  		/* bc 4, CR6_EQ, 60 */
		/* 8223D774h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8223D7B0;  }
		/* 8223D774h case    7:*/		return 0x8223D778;
		  /* 8223D778h */ case    8:  		/* lwz R10, <#[R31 + 20]> */
		/* 8223D778h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D778h case    8:*/		return 0x8223D77C;
		  /* 8223D77Ch */ case    9:  		/* li R11, 100 */
		/* 8223D77Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D77Ch case    9:*/		return 0x8223D780;
		  /* 8223D780h */ case   10:  		/* lwz R10, <#[R10]> */
		/* 8223D780h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8223D780h case   10:*/		return 0x8223D784;
		  /* 8223D784h */ case   11:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223D784h case   11:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223D784h case   11:*/		return 0x8223D788;
		  /* 8223D788h */ case   12:  		/* subfc R9, R11, R10 */
		/* 8223D788h case   12:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223D788h case   12:*/		return 0x8223D78C;
		  /* 8223D78Ch */ case   13:  		/* eqv R11, R11, R10 */
		/* 8223D78Ch case   13:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D78Ch case   13:*/		return 0x8223D790;
		  /* 8223D790h */ case   14:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D790h case   14:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D790h case   14:*/		return 0x8223D794;
		  /* 8223D794h */ case   15:  		/* addze R11, R11 */
		/* 8223D794h case   15:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D794h case   15:*/		return 0x8223D798;
		  /* 8223D798h */ case   16:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D798h case   16:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D798h case   16:*/		return 0x8223D79C;
		  /* 8223D79Ch */ case   17:  		/* subfic R11, R11, 0 */
		/* 8223D79Ch case   17:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D79Ch case   17:*/		return 0x8223D7A0;
		  /* 8223D7A0h */ case   18:  		/* subfe R11, R11, R11 */
		/* 8223D7A0h case   18:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D7A0h case   18:*/		return 0x8223D7A4;
		  /* 8223D7A4h */ case   19:  		/* and R11, R11, R10 */
		/* 8223D7A4h case   19:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D7A4h case   19:*/		return 0x8223D7A8;
		  /* 8223D7A8h */ case   20:  		/* cmpwi CR6, R11, 41 */
		/* 8223D7A8h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000029);
		/* 8223D7A8h case   20:*/		return 0x8223D7AC;
		  /* 8223D7ACh */ case   21:  		/* bc 12, CR6_EQ, 2812 */
		/* 8223D7ACh case   21:*/		if ( regs.CR[6].eq ) { return 0x8223E2A8;  }
		/* 8223D7ACh case   21:*/		return 0x8223D7B0;
	}
	return 0x8223D7B0;
} // Block from 8223D758h-8223D7B0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8223D7B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D7B0);
		  /* 8223D7B0h */ case    0:  		/* lwz R30, <#[R31 + 20]> */
		/* 8223D7B0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D7B0h case    0:*/		return 0x8223D7B4;
		  /* 8223D7B4h */ case    1:  		/* mr R3, R30 */
		/* 8223D7B4h case    1:*/		regs.R3 = regs.R30;
		/* 8223D7B4h case    1:*/		return 0x8223D7B8;
		  /* 8223D7B8h */ case    2:  		/* bl -2552 */
		/* 8223D7B8h case    2:*/		regs.LR = 0x8223D7BC; return 0x8223CDC0;
		/* 8223D7B8h case    2:*/		return 0x8223D7BC;
		  /* 8223D7BCh */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223D7BCh case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223D7BCh case    3:*/		return 0x8223D7C0;
		  /* 8223D7C0h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 8223D7C0h case    4:*/		if ( regs.CR[0].eq ) { return 0x8223D7CC;  }
		/* 8223D7C0h case    4:*/		return 0x8223D7C4;
		  /* 8223D7C4h */ case    5:  		/* addi R29, R29, 1 */
		/* 8223D7C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223D7C4h case    5:*/		return 0x8223D7C8;
		  /* 8223D7C8h */ case    6:  		/* b 60 */
		/* 8223D7C8h case    6:*/		return 0x8223D804;
		/* 8223D7C8h case    6:*/		return 0x8223D7CC;
	}
	return 0x8223D7CC;
} // Block from 8223D7B0h-8223D7CCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223D7CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D7CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D7CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D7CC);
		  /* 8223D7CCh */ case    0:  		/* lwz R10, <#[R30]> */
		/* 8223D7CCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8223D7CCh case    0:*/		return 0x8223D7D0;
		  /* 8223D7D0h */ case    1:  		/* li R11, 100 */
		/* 8223D7D0h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223D7D0h case    1:*/		return 0x8223D7D4;
		  /* 8223D7D4h */ case    2:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223D7D4h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223D7D4h case    2:*/		return 0x8223D7D8;
	}
	return 0x8223D7D8;
} // Block from 8223D7CCh-8223D7D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223D7D8h
// Function '?AddTarget@XGRAPHICS@@YAXPAHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D7D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D7D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D7D8);
		  /* 8223D7D8h */ case    0:  		/* subfc R9, R11, R10 */
		/* 8223D7D8h case    0:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223D7D8h case    0:*/		return 0x8223D7DC;
		  /* 8223D7DCh */ case    1:  		/* eqv R11, R11, R10 */
		/* 8223D7DCh case    1:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D7DCh case    1:*/		return 0x8223D7E0;
		  /* 8223D7E0h */ case    2:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223D7E0h case    2:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D7E0h case    2:*/		return 0x8223D7E4;
		  /* 8223D7E4h */ case    3:  		/* addze R11, R11 */
		/* 8223D7E4h case    3:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223D7E4h case    3:*/		return 0x8223D7E8;
		  /* 8223D7E8h */ case    4:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223D7E8h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223D7E8h case    4:*/		return 0x8223D7EC;
		  /* 8223D7ECh */ case    5:  		/* subfic R11, R11, 0 */
		/* 8223D7ECh case    5:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223D7ECh case    5:*/		return 0x8223D7F0;
		  /* 8223D7F0h */ case    6:  		/* subfe R11, R11, R11 */
		/* 8223D7F0h case    6:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223D7F0h case    6:*/		return 0x8223D7F4;
		  /* 8223D7F4h */ case    7:  		/* and R11, R11, R10 */
		/* 8223D7F4h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223D7F4h case    7:*/		return 0x8223D7F8;
		  /* 8223D7F8h */ case    8:  		/* cmpwi CR6, R11, 41 */
		/* 8223D7F8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000029);
		/* 8223D7F8h case    8:*/		return 0x8223D7FC;
		  /* 8223D7FCh */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 8223D7FCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8223D804;  }
		/* 8223D7FCh case    9:*/		return 0x8223D800;
		  /* 8223D800h */ case   10:  		/* addi R29, R29, -1 */
		/* 8223D800h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8223D800h case   10:*/		return 0x8223D804;
	}
	return 0x8223D804;
} // Block from 8223D7D8h-8223D804h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8223D804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D804);
		  /* 8223D804h */ case    0:  		/* mr R3, R31 */
		/* 8223D804h case    0:*/		regs.R3 = regs.R31;
		/* 8223D804h case    0:*/		return 0x8223D808;
		  /* 8223D808h */ case    1:  		/* bl -2552 */
		/* 8223D808h case    1:*/		regs.LR = 0x8223D80C; return 0x8223CE10;
		/* 8223D808h case    1:*/		return 0x8223D80C;
		  /* 8223D80Ch */ case    2:  		/* b -156 */
		/* 8223D80Ch case    2:*/		return 0x8223D770;
		/* 8223D80Ch case    2:*/		return 0x8223D810;
	}
	return 0x8223D810;
} // Block from 8223D804h-8223D810h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223D810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D810);
		  /* 8223D810h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 8223D810h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8223D810h case    0:*/		return 0x8223D814;
		  /* 8223D814h */ case    1:  		/* mr R3, R31 */
		/* 8223D814h case    1:*/		regs.R3 = regs.R31;
		/* 8223D814h case    1:*/		return 0x8223D818;
		  /* 8223D818h */ case    2:  		/* lwz R10, <#[R29 + 4]> */
		/* 8223D818h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 8223D818h case    2:*/		return 0x8223D81C;
		  /* 8223D81Ch */ case    3:  		/* addic R9, R11, -1 */
		/* 8223D81Ch case    3:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 8223D81Ch case    3:*/		return 0x8223D820;
		  /* 8223D820h */ case    4:  		/* rlwinm R4, R10, 0, 16, 31 */
		/* 8223D820h case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R4,regs.R10);
		/* 8223D820h case    4:*/		return 0x8223D824;
		  /* 8223D824h */ case    5:  		/* subfe R5, R9, R11 */
		/* 8223D824h case    5:*/		cpu::op::subfe<0>(regs,&regs.R5,regs.R9,regs.R11);
		/* 8223D824h case    5:*/		return 0x8223D828;
		  /* 8223D828h */ case    6:  		/* bl -2080 */
		/* 8223D828h case    6:*/		regs.LR = 0x8223D82C; return 0x8223D008;
		/* 8223D828h case    6:*/		return 0x8223D82C;
	}
	return 0x8223D82C;
} // Block from 8223D810h-8223D82Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223D82Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D82C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D82C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D82C);
		  /* 8223D82Ch */ case    0:  		/* mr R3, R31 */
		/* 8223D82Ch case    0:*/		regs.R3 = regs.R31;
		/* 8223D82Ch case    0:*/		return 0x8223D830;
		  /* 8223D830h */ case    1:  		/* bl -2592 */
		/* 8223D830h case    1:*/		regs.LR = 0x8223D834; return 0x8223CE10;
		/* 8223D830h case    1:*/		return 0x8223D834;
		  /* 8223D834h */ case    2:  		/* b 2676 */
		/* 8223D834h case    2:*/		return 0x8223E2A8;
		/* 8223D834h case    2:*/		return 0x8223D838;
	}
	return 0x8223D838;
} // Block from 8223D82Ch-8223D838h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223D838h
// Function '?SetVersion@ILFormatDecode@XGRAPHICS@@SAXPBIPAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D838);
		  /* 8223D838h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8223D838h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223D838h case    0:*/		return 0x8223D83C;
		  /* 8223D83Ch */ case    1:  		/* lwz R10, <#[R31 + 56]> */
		/* 8223D83Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8223D83Ch case    1:*/		return 0x8223D840;
		  /* 8223D840h */ case    2:  		/* lwz R9, <#[R11 + 1360]> */
		/* 8223D840h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000550) );
		/* 8223D840h case    2:*/		return 0x8223D844;
		  /* 8223D844h */ case    3:  		/* lwz R9, <#[R9 + 16]> */
		/* 8223D844h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 8223D844h case    3:*/		return 0x8223D848;
		  /* 8223D848h */ case    4:  		/* cmpw CR6, R10, R9 */
		/* 8223D848h case    4:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R9);
		/* 8223D848h case    4:*/		return 0x8223D84C;
		  /* 8223D84Ch */ case    5:  		/* bc 12, CR6_GT, 2820 */
		/* 8223D84Ch case    5:*/		if ( regs.CR[6].gt ) { return 0x8223E350;  }
		/* 8223D84Ch case    5:*/		return 0x8223D850;
		  /* 8223D850h */ case    6:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223D850h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223D850h case    6:*/		return 0x8223D854;
		  /* 8223D854h */ case    7:  		/* lwz R9, <#[R29 + 4]> */
		/* 8223D854h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000004) );
		/* 8223D854h case    7:*/		return 0x8223D858;
		  /* 8223D858h */ case    8:  		/* extsh R9, R9 */
		/* 8223D858h case    8:*/		cpu::op::extsh<0>(regs,&regs.R9,regs.R9);
		/* 8223D858h case    8:*/		return 0x8223D85C;
		  /* 8223D85Ch */ case    9:  		/* lwz R10, <#[R11 + 8]> */
		/* 8223D85Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8223D85Ch case    9:*/		return 0x8223D860;
		  /* 8223D860h */ case   10:  		/* mr R11, R10 */
		/* 8223D860h case   10:*/		regs.R11 = regs.R10;
		/* 8223D860h case   10:*/		return 0x8223D864;
		  /* 8223D864h */ case   11:  		/* lwz R8, <#[R11]> */
		/* 8223D864h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8223D864h case   11:*/		return 0x8223D868;
		  /* 8223D868h */ case   12:  		/* cmpw CR6, R8, R9 */
		/* 8223D868h case   12:*/		cpu::op::cmpw<6>(regs,regs.R8,regs.R9);
		/* 8223D868h case   12:*/		return 0x8223D86C;
		  /* 8223D86Ch */ case   13:  		/* bc 12, CR6_EQ, 288 */
		/* 8223D86Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8223D98C;  }
		/* 8223D86Ch case   13:*/		return 0x8223D870;
		  /* 8223D870h */ case   14:  		/* lwz R8, <#[R31 + 16]> */
		/* 8223D870h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 8223D870h case   14:*/		return 0x8223D874;
		  /* 8223D874h */ case   15:  		/* cmplw CR6, R11, R8 */
		/* 8223D874h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8223D874h case   15:*/		return 0x8223D878;
		  /* 8223D878h */ case   16:  		/* bc 12, CR6_EQ, 16 */
		/* 8223D878h case   16:*/		if ( regs.CR[6].eq ) { return 0x8223D888;  }
		/* 8223D878h case   16:*/		return 0x8223D87C;
		  /* 8223D87Ch */ case   17:  		/* lwz R11, <#[R11 + 8]> */
		/* 8223D87Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8223D87Ch case   17:*/		return 0x8223D880;
		  /* 8223D880h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 8223D880h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223D880h case   18:*/		return 0x8223D884;
		  /* 8223D884h */ case   19:  		/* bc 4, CR6_EQ, -32 */
		/* 8223D884h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8223D864;  }
		/* 8223D884h case   19:*/		return 0x8223D888;
	}
	return 0x8223D888;
} // Block from 8223D838h-8223D888h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8223D888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D888);
		  /* 8223D888h */ case    0:  		/* mr R11, R22 */
		/* 8223D888h case    0:*/		regs.R11 = regs.R22;
		/* 8223D888h case    0:*/		return 0x8223D88C;
		  /* 8223D88Ch */ case    1:  		/* addi R8, R11, -1 */
		/* 8223D88Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 8223D88Ch case    1:*/		return 0x8223D890;
		  /* 8223D890h */ case    2:  		/* mr R11, R10 */
		/* 8223D890h case    2:*/		regs.R11 = regs.R10;
		/* 8223D890h case    2:*/		return 0x8223D894;
		  /* 8223D894h */ case    3:  		/* cntlzw R10, R8 */
		/* 8223D894h case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R8);
		/* 8223D894h case    3:*/		return 0x8223D898;
		  /* 8223D898h */ case    4:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 8223D898h case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 8223D898h case    4:*/		return 0x8223D89C;
		  /* 8223D89Ch */ case    5:  		/* lwz R8, <#[R11]> */
		/* 8223D89Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8223D89Ch case    5:*/		return 0x8223D8A0;
		  /* 8223D8A0h */ case    6:  		/* cmpw CR6, R8, R9 */
		/* 8223D8A0h case    6:*/		cpu::op::cmpw<6>(regs,regs.R8,regs.R9);
		/* 8223D8A0h case    6:*/		return 0x8223D8A4;
		  /* 8223D8A4h */ case    7:  		/* bc 12, CR6_EQ, 240 */
		/* 8223D8A4h case    7:*/		if ( regs.CR[6].eq ) { return 0x8223D994;  }
		/* 8223D8A4h case    7:*/		return 0x8223D8A8;
		  /* 8223D8A8h */ case    8:  		/* lwz R8, <#[R31 + 16]> */
		/* 8223D8A8h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 8223D8A8h case    8:*/		return 0x8223D8AC;
		  /* 8223D8ACh */ case    9:  		/* cmplw CR6, R11, R8 */
		/* 8223D8ACh case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8223D8ACh case    9:*/		return 0x8223D8B0;
		  /* 8223D8B0h */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 8223D8B0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8223D8C0;  }
		/* 8223D8B0h case   10:*/		return 0x8223D8B4;
		  /* 8223D8B4h */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 8223D8B4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8223D8B4h case   11:*/		return 0x8223D8B8;
	}
	return 0x8223D8B8;
} // Block from 8223D888h-8223D8B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8223D8B8h
// Function '?GetTarget@ILFormatDecode@XGRAPHICS@@SAIPBI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D8B8);
		  /* 8223D8B8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8223D8B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223D8B8h case    0:*/		return 0x8223D8BC;
		  /* 8223D8BCh */ case    1:  		/* bc 4, CR6_EQ, -32 */
		/* 8223D8BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223D89C;  }
		/* 8223D8BCh case    1:*/		return 0x8223D8C0;
	}
	return 0x8223D8C0;
} // Block from 8223D8B8h-8223D8C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223D8C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D8C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D8C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D8C0);
		  /* 8223D8C0h */ case    0:  		/* mr R11, R22 */
		/* 8223D8C0h case    0:*/		regs.R11 = regs.R22;
		/* 8223D8C0h case    0:*/		return 0x8223D8C4;
		  /* 8223D8C4h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8223D8C4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8223D8C4h case    1:*/		return 0x8223D8C8;
		  /* 8223D8C8h */ case    2:  		/* bc 12, CR6_EQ, 212 */
		/* 8223D8C8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8223D99C;  }
		/* 8223D8C8h case    2:*/		return 0x8223D8CC;
		  /* 8223D8CCh */ case    3:  		/* rlwinm. R11, R10, 0, 24, 31 */
		/* 8223D8CCh case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R10);
		/* 8223D8CCh case    3:*/		return 0x8223D8D0;
		  /* 8223D8D0h */ case    4:  		/* bc 12, CR0_EQ, -164 */
		/* 8223D8D0h case    4:*/		if ( regs.CR[0].eq ) { return 0x8223D82C;  }
		/* 8223D8D0h case    4:*/		return 0x8223D8D4;
		  /* 8223D8D4h */ case    5:  		/* lwz R3, <#[R31 + 60]> */
		/* 8223D8D4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000003C) );
		/* 8223D8D4h case    5:*/		return 0x8223D8D8;
		  /* 8223D8D8h */ case    6:  		/* lwz R30, <#[R31 + 20]> */
		/* 8223D8D8h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D8D8h case    6:*/		return 0x8223D8DC;
		  /* 8223D8DCh */ case    7:  		/* lwz R4, <#[R3 + 4]> */
		/* 8223D8DCh case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8223D8DCh case    7:*/		return 0x8223D8E0;
		  /* 8223D8E0h */ case    8:  		/* bl 90592 */
		/* 8223D8E0h case    8:*/		regs.LR = 0x8223D8E4; return 0x82253AC0;
		/* 8223D8E0h case    8:*/		return 0x8223D8E4;
		  /* 8223D8E4h */ case    9:  		/* stw R30, <#[R3]> */
		/* 8223D8E4h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D8E4h case    9:*/		return 0x8223D8E8;
		  /* 8223D8E8h */ case   10:  		/* li R4, 12 */
		/* 8223D8E8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 8223D8E8h case   10:*/		return 0x8223D8EC;
		  /* 8223D8ECh */ case   11:  		/* lwz R10, <#[R31]> */
		/* 8223D8ECh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8223D8ECh case   11:*/		return 0x8223D8F0;
		  /* 8223D8F0h */ case   12:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223D8F0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D8F0h case   12:*/		return 0x8223D8F4;
		  /* 8223D8F4h */ case   13:  		/* addi R11, R11, 8 */
		/* 8223D8F4h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8223D8F4h case   13:*/		return 0x8223D8F8;
		  /* 8223D8F8h */ case   14:  		/* stw R11, <#[R31 + 20]> */
		/* 8223D8F8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D8F8h case   14:*/		return 0x8223D8FC;
		  /* 8223D8FCh */ case   15:  		/* lwz R3, <#[R10 + 1456]> */
		/* 8223D8FCh case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x000005B0) );
		/* 8223D8FCh case   15:*/		return 0x8223D900;
		  /* 8223D900h */ case   16:  		/* bl -136264 */
		/* 8223D900h case   16:*/		regs.LR = 0x8223D904; return 0x8221C4B8;
		/* 8223D900h case   16:*/		return 0x8223D904;
		  /* 8223D904h */ case   17:  		/* lwz R11, <#[R31 + 64]> */
		/* 8223D904h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000040) );
		/* 8223D904h case   17:*/		return 0x8223D908;
		  /* 8223D908h */ case   18:  		/* mr R30, R3 */
		/* 8223D908h case   18:*/		regs.R30 = regs.R3;
		/* 8223D908h case   18:*/		return 0x8223D90C;
		  /* 8223D90Ch */ case   19:  		/* lwz R4, <#[R11 + 4]> */
		/* 8223D90Ch case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 8223D90Ch case   19:*/		return 0x8223D910;
		  /* 8223D910h */ case   20:  		/* mr R3, R11 */
		/* 8223D910h case   20:*/		regs.R3 = regs.R11;
		/* 8223D910h case   20:*/		return 0x8223D914;
		  /* 8223D914h */ case   21:  		/* bl 90540 */
		/* 8223D914h case   21:*/		regs.LR = 0x8223D918; return 0x82253AC0;
		/* 8223D914h case   21:*/		return 0x8223D918;
		  /* 8223D918h */ case   22:  		/* stw R30, <#[R3]> */
		/* 8223D918h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D918h case   22:*/		return 0x8223D91C;
		  /* 8223D91Ch */ case   23:  		/* stb R27, <#[R30]> */
		/* 8223D91Ch case   23:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000000) );
		/* 8223D91Ch case   23:*/		return 0x8223D920;
	}
	return 0x8223D920;
} // Block from 8223D8C0h-8223D920h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8223D920h
// Function '?IsIf@ILFormatDecode@XGRAPHICS@@SA_NPBI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D920);
		  /* 8223D920h */ case    0:  		/* addi R11, R30, 4 */
		/* 8223D920h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 8223D920h case    0:*/		return 0x8223D924;
		  /* 8223D924h */ case    1:  		/* stb R27, <#[R30 + 1]> */
		/* 8223D924h case    1:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000001) );
		/* 8223D924h case    1:*/		return 0x8223D928;
		  /* 8223D928h */ case    2:  		/* stb R27, <#[R30 + 2]> */
		/* 8223D928h case    2:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000002) );
		/* 8223D928h case    2:*/		return 0x8223D92C;
		  /* 8223D92Ch */ case    3:  		/* stb R27, <#[R30 + 3]> */
		/* 8223D92Ch case    3:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000003) );
		/* 8223D92Ch case    3:*/		return 0x8223D930;
		  /* 8223D930h */ case    4:  		/* lwz R10, <#[R30]> */
		/* 8223D930h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8223D930h case    4:*/		return 0x8223D934;
		  /* 8223D934h */ case    5:  		/* ori R10, R10, 8 */
		/* 8223D934h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8);
		/* 8223D934h case    5:*/		return 0x8223D938;
		  /* 8223D938h */ case    6:  		/* stw R10, <#[R30]> */
		/* 8223D938h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8223D938h case    6:*/		return 0x8223D93C;
		  /* 8223D93Ch */ case    7:  		/* lwz R10, <#[R31 + 20]> */
		/* 8223D93Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D93Ch case    7:*/		return 0x8223D940;
		  /* 8223D940h */ case    8:  		/* lbz R9, <#[R10]> */
		/* 8223D940h case    8:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8223D940h case    8:*/		return 0x8223D944;
		  /* 8223D944h */ case    9:  		/* stb R9, <#[R30 + 4]> */
		/* 8223D944h case    9:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 8223D944h case    9:*/		return 0x8223D948;
		  /* 8223D948h */ case   10:  		/* lbz R9, <#[R10 + 1]> */
		/* 8223D948h case   10:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000001) );
		/* 8223D948h case   10:*/		return 0x8223D94C;
		  /* 8223D94Ch */ case   11:  		/* stb R9, <#[R30 + 5]> */
		/* 8223D94Ch case   11:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R30 + 0x00000005) );
		/* 8223D94Ch case   11:*/		return 0x8223D950;
		  /* 8223D950h */ case   12:  		/* lbz R9, <#[R10 + 2]> */
		/* 8223D950h case   12:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 8223D950h case   12:*/		return 0x8223D954;
		  /* 8223D954h */ case   13:  		/* stb R9, <#[R30 + 6]> */
		/* 8223D954h case   13:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R30 + 0x00000006) );
		/* 8223D954h case   13:*/		return 0x8223D958;
		  /* 8223D958h */ case   14:  		/* lbz R10, <#[R10 + 3]> */
		/* 8223D958h case   14:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000003) );
		/* 8223D958h case   14:*/		return 0x8223D95C;
		  /* 8223D95Ch */ case   15:  		/* stb R10, <#[R30 + 7]> */
		/* 8223D95Ch case   15:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R30 + 0x00000007) );
		/* 8223D95Ch case   15:*/		return 0x8223D960;
		  /* 8223D960h */ case   16:  		/* lwz R10, <#[R31 + 20]> */
		/* 8223D960h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D960h case   16:*/		return 0x8223D964;
		  /* 8223D964h */ case   17:  		/* addi R10, R10, 4 */
		/* 8223D964h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8223D964h case   17:*/		return 0x8223D968;
		  /* 8223D968h */ case   18:  		/* stw R10, <#[R31 + 20]> */
		/* 8223D968h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D968h case   18:*/		return 0x8223D96C;
		  /* 8223D96Ch */ case   19:  		/* stb R27, <#[R30 + 8]> */
		/* 8223D96Ch case   19:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000008) );
		/* 8223D96Ch case   19:*/		return 0x8223D970;
	}
	return 0x8223D970;
} // Block from 8223D920h-8223D970h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8223D970h
// Function '?NextStatement@ILInstIterator@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D970);
		  /* 8223D970h */ case    0:  		/* stb R27, <#[R30 + 9]> */
		/* 8223D970h case    0:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000009) );
		/* 8223D970h case    0:*/		return 0x8223D974;
		  /* 8223D974h */ case    1:  		/* stb R27, <#[R30 + 10]> */
		/* 8223D974h case    1:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x0000000A) );
		/* 8223D974h case    1:*/		return 0x8223D978;
		  /* 8223D978h */ case    2:  		/* stb R27, <#[R30 + 11]> */
		/* 8223D978h case    2:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x0000000B) );
		/* 8223D978h case    2:*/		return 0x8223D97C;
		  /* 8223D97Ch */ case    3:  		/* lwz R10, <#[R30 + 8]> */
		/* 8223D97Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 8223D97Ch case    3:*/		return 0x8223D980;
		  /* 8223D980h */ case    4:  		/* ori R10, R10, 83 */
		/* 8223D980h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x53);
		/* 8223D980h case    4:*/		return 0x8223D984;
		  /* 8223D984h */ case    5:  		/* stw R10, <#[R30 + 8]> */
		/* 8223D984h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 8223D984h case    5:*/		return 0x8223D988;
		  /* 8223D988h */ case    6:  		/* b 316 */
		/* 8223D988h case    6:*/		return 0x8223DAC4;
		/* 8223D988h case    6:*/		return 0x8223D98C;
	}
	return 0x8223D98C;
} // Block from 8223D970h-8223D98Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223D98Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D98C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D98C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D98C);
		  /* 8223D98Ch */ case    0:  		/* lbz R11, <#[R11 + 4]> */
		/* 8223D98Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8223D98Ch case    0:*/		return 0x8223D990;
		  /* 8223D990h */ case    1:  		/* b -260 */
		/* 8223D990h case    1:*/		return 0x8223D88C;
		/* 8223D990h case    1:*/		return 0x8223D994;
	}
	return 0x8223D994;
} // Block from 8223D98Ch-8223D994h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223D994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D994);
		  /* 8223D994h */ case    0:  		/* lbz R11, <#[R11 + 4]> */
		/* 8223D994h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8223D994h case    0:*/		return 0x8223D998;
		  /* 8223D998h */ case    1:  		/* b -212 */
		/* 8223D998h case    1:*/		return 0x8223D8C4;
		/* 8223D998h case    1:*/		return 0x8223D99C;
	}
	return 0x8223D99C;
} // Block from 8223D994h-8223D99Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223D99Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223D99C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223D99C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223D99C);
		  /* 8223D99Ch */ case    0:  		/* lwz R3, <#[R31 + 60]> */
		/* 8223D99Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000003C) );
		/* 8223D99Ch case    0:*/		return 0x8223D9A0;
		  /* 8223D9A0h */ case    1:  		/* lwz R30, <#[R31 + 20]> */
		/* 8223D9A0h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D9A0h case    1:*/		return 0x8223D9A4;
		  /* 8223D9A4h */ case    2:  		/* lwz R4, <#[R3 + 4]> */
		/* 8223D9A4h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8223D9A4h case    2:*/		return 0x8223D9A8;
		  /* 8223D9A8h */ case    3:  		/* bl 90392 */
		/* 8223D9A8h case    3:*/		regs.LR = 0x8223D9AC; return 0x82253AC0;
		/* 8223D9A8h case    3:*/		return 0x8223D9AC;
		  /* 8223D9ACh */ case    4:  		/* stw R30, <#[R3]> */
		/* 8223D9ACh case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D9ACh case    4:*/		return 0x8223D9B0;
		  /* 8223D9B0h */ case    5:  		/* li R4, 24 */
		/* 8223D9B0h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8223D9B0h case    5:*/		return 0x8223D9B4;
		  /* 8223D9B4h */ case    6:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223D9B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D9B4h case    6:*/		return 0x8223D9B8;
		  /* 8223D9B8h */ case    7:  		/* addi R11, R11, 4 */
		/* 8223D9B8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223D9B8h case    7:*/		return 0x8223D9BC;
		  /* 8223D9BCh */ case    8:  		/* stw R11, <#[R31 + 20]> */
		/* 8223D9BCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223D9BCh case    8:*/		return 0x8223D9C0;
		  /* 8223D9C0h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223D9C0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223D9C0h case    9:*/		return 0x8223D9C4;
		  /* 8223D9C4h */ case   10:  		/* lwz R3, <#[R11 + 1456]> */
		/* 8223D9C4h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223D9C4h case   10:*/		return 0x8223D9C8;
		  /* 8223D9C8h */ case   11:  		/* bl -136464 */
		/* 8223D9C8h case   11:*/		regs.LR = 0x8223D9CC; return 0x8221C4B8;
		/* 8223D9C8h case   11:*/		return 0x8223D9CC;
		  /* 8223D9CCh */ case   12:  		/* lwz R11, <#[R31 + 64]> */
		/* 8223D9CCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000040) );
		/* 8223D9CCh case   12:*/		return 0x8223D9D0;
		  /* 8223D9D0h */ case   13:  		/* mr R30, R3 */
		/* 8223D9D0h case   13:*/		regs.R30 = regs.R3;
		/* 8223D9D0h case   13:*/		return 0x8223D9D4;
		  /* 8223D9D4h */ case   14:  		/* mr R3, R11 */
		/* 8223D9D4h case   14:*/		regs.R3 = regs.R11;
		/* 8223D9D4h case   14:*/		return 0x8223D9D8;
		  /* 8223D9D8h */ case   15:  		/* lwz R4, <#[R11 + 4]> */
		/* 8223D9D8h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 8223D9D8h case   15:*/		return 0x8223D9DC;
		  /* 8223D9DCh */ case   16:  		/* bl 90340 */
		/* 8223D9DCh case   16:*/		regs.LR = 0x8223D9E0; return 0x82253AC0;
		/* 8223D9DCh case   16:*/		return 0x8223D9E0;
		  /* 8223D9E0h */ case   17:  		/* stw R30, <#[R3]> */
		/* 8223D9E0h case   17:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 8223D9E0h case   17:*/		return 0x8223D9E4;
		  /* 8223D9E4h */ case   18:  		/* addi R11, R30, 4 */
		/* 8223D9E4h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 8223D9E4h case   18:*/		return 0x8223D9E8;
		  /* 8223D9E8h */ case   19:  		/* stb R27, <#[R30]> */
		/* 8223D9E8h case   19:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000000) );
		/* 8223D9E8h case   19:*/		return 0x8223D9EC;
		  /* 8223D9ECh */ case   20:  		/* stb R27, <#[R30 + 1]> */
		/* 8223D9ECh case   20:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000001) );
		/* 8223D9ECh case   20:*/		return 0x8223D9F0;
		  /* 8223D9F0h */ case   21:  		/* addi R11, R11, 4 */
		/* 8223D9F0h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223D9F0h case   21:*/		return 0x8223D9F4;
		  /* 8223D9F4h */ case   22:  		/* stb R27, <#[R30 + 2]> */
		/* 8223D9F4h case   22:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000002) );
		/* 8223D9F4h case   22:*/		return 0x8223D9F8;
		  /* 8223D9F8h */ case   23:  		/* stb R27, <#[R30 + 3]> */
		/* 8223D9F8h case   23:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000003) );
		/* 8223D9F8h case   23:*/		return 0x8223D9FC;
		  /* 8223D9FCh */ case   24:  		/* lwz R10, <#[R30]> */
		/* 8223D9FCh case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8223D9FCh case   24:*/		return 0x8223DA00;
		  /* 8223DA00h */ case   25:  		/* ori R10, R10, 53 */
		/* 8223DA00h case   25:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x35);
		/* 8223DA00h case   25:*/		return 0x8223DA04;
		  /* 8223DA04h */ case   26:  		/* stw R10, <#[R30]> */
		/* 8223DA04h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8223DA04h case   26:*/		return 0x8223DA08;
		  /* 8223DA08h */ case   27:  		/* lwz R10, <#[R31 + 20]> */
		/* 8223DA08h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DA08h case   27:*/		return 0x8223DA0C;
		  /* 8223DA0Ch */ case   28:  		/* lbz R9, <#[R10]> */
		/* 8223DA0Ch case   28:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8223DA0Ch case   28:*/		return 0x8223DA10;
		  /* 8223DA10h */ case   29:  		/* stb R9, <#[R30 + 4]> */
		/* 8223DA10h case   29:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 8223DA10h case   29:*/		return 0x8223DA14;
		  /* 8223DA14h */ case   30:  		/* lbz R9, <#[R10 + 1]> */
		/* 8223DA14h case   30:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000001) );
		/* 8223DA14h case   30:*/		return 0x8223DA18;
		  /* 8223DA18h */ case   31:  		/* stb R9, <#[R30 + 5]> */
		/* 8223DA18h case   31:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R30 + 0x00000005) );
		/* 8223DA18h case   31:*/		return 0x8223DA1C;
		  /* 8223DA1Ch */ case   32:  		/* lbz R9, <#[R10 + 2]> */
		/* 8223DA1Ch case   32:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 8223DA1Ch case   32:*/		return 0x8223DA20;
		  /* 8223DA20h */ case   33:  		/* stb R9, <#[R30 + 6]> */
		/* 8223DA20h case   33:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R30 + 0x00000006) );
		/* 8223DA20h case   33:*/		return 0x8223DA24;
		  /* 8223DA24h */ case   34:  		/* lbz R10, <#[R10 + 3]> */
		/* 8223DA24h case   34:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000003) );
		/* 8223DA24h case   34:*/		return 0x8223DA28;
		  /* 8223DA28h */ case   35:  		/* stb R10, <#[R30 + 7]> */
		/* 8223DA28h case   35:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R30 + 0x00000007) );
		/* 8223DA28h case   35:*/		return 0x8223DA2C;
		  /* 8223DA2Ch */ case   36:  		/* lwz R10, <#[R31 + 20]> */
		/* 8223DA2Ch case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DA2Ch case   36:*/		return 0x8223DA30;
		  /* 8223DA30h */ case   37:  		/* addi R10, R10, 4 */
		/* 8223DA30h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8223DA30h case   37:*/		return 0x8223DA34;
		  /* 8223DA34h */ case   38:  		/* stw R10, <#[R31 + 20]> */
		/* 8223DA34h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DA34h case   38:*/		return 0x8223DA38;
		  /* 8223DA38h */ case   39:  		/* stb R27, <#[R11]> */
		/* 8223DA38h case   39:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 8223DA38h case   39:*/		return 0x8223DA3C;
		  /* 8223DA3Ch */ case   40:  		/* stb R27, <#[R11 + 1]> */
		/* 8223DA3Ch case   40:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000001) );
		/* 8223DA3Ch case   40:*/		return 0x8223DA40;
		  /* 8223DA40h */ case   41:  		/* stb R27, <#[R11 + 2]> */
		/* 8223DA40h case   41:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000002) );
		/* 8223DA40h case   41:*/		return 0x8223DA44;
		  /* 8223DA44h */ case   42:  		/* stb R27, <#[R11 + 3]> */
		/* 8223DA44h case   42:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000003) );
		/* 8223DA44h case   42:*/		return 0x8223DA48;
		  /* 8223DA48h */ case   43:  		/* lwz R10, <#[R11]> */
		/* 8223DA48h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8223DA48h case   43:*/		return 0x8223DA4C;
		  /* 8223DA4Ch */ case   44:  		/* ori R10, R10, 8 */
		/* 8223DA4Ch case   44:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8);
		/* 8223DA4Ch case   44:*/		return 0x8223DA50;
		  /* 8223DA50h */ case   45:  		/* stw R10, <#[R11]> */
		/* 8223DA50h case   45:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8223DA50h case   45:*/		return 0x8223DA54;
		  /* 8223DA54h */ case   46:  		/* addi R11, R11, 4 */
		/* 8223DA54h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223DA54h case   46:*/		return 0x8223DA58;
		  /* 8223DA58h */ case   47:  		/* lwz R10, <#[R31 + 20]> */
		/* 8223DA58h case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DA58h case   47:*/		return 0x8223DA5C;
		  /* 8223DA5Ch */ case   48:  		/* lbz R9, <#[R10]> */
		/* 8223DA5Ch case   48:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8223DA5Ch case   48:*/		return 0x8223DA60;
		  /* 8223DA60h */ case   49:  		/* stb R9, <#[R11]> */
		/* 8223DA60h case   49:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8223DA60h case   49:*/		return 0x8223DA64;
		  /* 8223DA64h */ case   50:  		/* lbz R9, <#[R10 + 1]> */
		/* 8223DA64h case   50:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000001) );
		/* 8223DA64h case   50:*/		return 0x8223DA68;
		  /* 8223DA68h */ case   51:  		/* stb R9, <#[R11 + 1]> */
		/* 8223DA68h case   51:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000001) );
		/* 8223DA68h case   51:*/		return 0x8223DA6C;
		  /* 8223DA6Ch */ case   52:  		/* lbz R9, <#[R10 + 2]> */
		/* 8223DA6Ch case   52:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 8223DA6Ch case   52:*/		return 0x8223DA70;
		  /* 8223DA70h */ case   53:  		/* stb R9, <#[R11 + 2]> */
		/* 8223DA70h case   53:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 8223DA70h case   53:*/		return 0x8223DA74;
		  /* 8223DA74h */ case   54:  		/* lbz R10, <#[R10 + 3]> */
		/* 8223DA74h case   54:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000003) );
		/* 8223DA74h case   54:*/		return 0x8223DA78;
		  /* 8223DA78h */ case   55:  		/* stb R10, <#[R11 + 3]> */
		/* 8223DA78h case   55:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000003) );
		/* 8223DA78h case   55:*/		return 0x8223DA7C;
		  /* 8223DA7Ch */ case   56:  		/* addi R11, R11, 4 */
		/* 8223DA7Ch case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223DA7Ch case   56:*/		return 0x8223DA80;
		  /* 8223DA80h */ case   57:  		/* lwz R10, <#[R31 + 20]> */
		/* 8223DA80h case   57:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DA80h case   57:*/		return 0x8223DA84;
		  /* 8223DA84h */ case   58:  		/* addi R10, R10, 4 */
		/* 8223DA84h case   58:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8223DA84h case   58:*/		return 0x8223DA88;
		  /* 8223DA88h */ case   59:  		/* stw R10, <#[R31 + 20]> */
		/* 8223DA88h case   59:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DA88h case   59:*/		return 0x8223DA8C;
		  /* 8223DA8Ch */ case   60:  		/* stb R27, <#[R11]> */
		/* 8223DA8Ch case   60:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 8223DA8Ch case   60:*/		return 0x8223DA90;
		  /* 8223DA90h */ case   61:  		/* stb R27, <#[R11 + 1]> */
		/* 8223DA90h case   61:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000001) );
		/* 8223DA90h case   61:*/		return 0x8223DA94;
		  /* 8223DA94h */ case   62:  		/* stb R27, <#[R11 + 2]> */
		/* 8223DA94h case   62:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000002) );
		/* 8223DA94h case   62:*/		return 0x8223DA98;
		  /* 8223DA98h */ case   63:  		/* stb R27, <#[R11 + 3]> */
		/* 8223DA98h case   63:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000003) );
		/* 8223DA98h case   63:*/		return 0x8223DA9C;
		  /* 8223DA9Ch */ case   64:  		/* lwz R10, <#[R11]> */
		/* 8223DA9Ch case   64:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8223DA9Ch case   64:*/		return 0x8223DAA0;
		  /* 8223DAA0h */ case   65:  		/* ori R10, R10, 41 */
		/* 8223DAA0h case   65:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x29);
		/* 8223DAA0h case   65:*/		return 0x8223DAA4;
		  /* 8223DAA4h */ case   66:  		/* stw R10, <#[R11]> */
		/* 8223DAA4h case   66:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8223DAA4h case   66:*/		return 0x8223DAA8;
		  /* 8223DAA8h */ case   67:  		/* stb R27, <#[R11 + 4]> */
		/* 8223DAA8h case   67:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000004) );
		/* 8223DAA8h case   67:*/		return 0x8223DAAC;
		  /* 8223DAACh */ case   68:  		/* stb R27, <#[R11 + 5]> */
		/* 8223DAACh case   68:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000005) );
		/* 8223DAACh case   68:*/		return 0x8223DAB0;
		  /* 8223DAB0h */ case   69:  		/* stb R27, <#[R11 + 6]> */
		/* 8223DAB0h case   69:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000006) );
		/* 8223DAB0h case   69:*/		return 0x8223DAB4;
		  /* 8223DAB4h */ case   70:  		/* stb R27, <#[R11 + 7]> */
		/* 8223DAB4h case   70:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000007) );
		/* 8223DAB4h case   70:*/		return 0x8223DAB8;
		  /* 8223DAB8h */ case   71:  		/* lwz R10, <#[R11 + 4]> */
		/* 8223DAB8h case   71:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8223DAB8h case   71:*/		return 0x8223DABC;
		  /* 8223DABCh */ case   72:  		/* ori R10, R10, 83 */
		/* 8223DABCh case   72:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x53);
		/* 8223DABCh case   72:*/		return 0x8223DAC0;
		  /* 8223DAC0h */ case   73:  		/* stw R10, <#[R11 + 4]> */
		/* 8223DAC0h case   73:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8223DAC0h case   73:*/		return 0x8223DAC4;
	}
	return 0x8223DAC4;
} // Block from 8223D99Ch-8223DAC4h (74 instructions)

//////////////////////////////////////////////////////
// Block at 8223DAC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DAC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DAC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DAC4);
		  /* 8223DAC4h */ case    0:  		/* stw R30, <#[R31 + 20]> */
		/* 8223DAC4h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DAC4h case    0:*/		return 0x8223DAC8;
		  /* 8223DAC8h */ case    1:  		/* b 2016 */
		/* 8223DAC8h case    1:*/		return 0x8223E2A8;
		/* 8223DAC8h case    1:*/		return 0x8223DACC;
	}
	return 0x8223DACC;
} // Block from 8223DAC4h-8223DACCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223DACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DACC);
		  /* 8223DACCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8223DACCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223DACCh case    0:*/		return 0x8223DAD0;
		  /* 8223DAD0h */ case    1:  		/* lwz R10, <#[R31 + 56]> */
		/* 8223DAD0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8223DAD0h case    1:*/		return 0x8223DAD4;
		  /* 8223DAD4h */ case    2:  		/* lwz R9, <#[R11 + 1360]> */
		/* 8223DAD4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000550) );
		/* 8223DAD4h case    2:*/		return 0x8223DAD8;
		  /* 8223DAD8h */ case    3:  		/* lwz R9, <#[R9 + 16]> */
		/* 8223DAD8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 8223DAD8h case    3:*/		return 0x8223DADC;
		  /* 8223DADCh */ case    4:  		/* cmpw CR6, R10, R9 */
		/* 8223DADCh case    4:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R9);
		/* 8223DADCh case    4:*/		return 0x8223DAE0;
		  /* 8223DAE0h */ case    5:  		/* bc 12, CR6_GT, 2180 */
		/* 8223DAE0h case    5:*/		if ( regs.CR[6].gt ) { return 0x8223E364;  }
		/* 8223DAE0h case    5:*/		return 0x8223DAE4;
		  /* 8223DAE4h */ case    6:  		/* mr R3, R29 */
		/* 8223DAE4h case    6:*/		regs.R3 = regs.R29;
		/* 8223DAE4h case    6:*/		return 0x8223DAE8;
		  /* 8223DAE8h */ case    7:  		/* bl -3472 */
		/* 8223DAE8h case    7:*/		regs.LR = 0x8223DAEC; return 0x8223CD58;
		/* 8223DAE8h case    7:*/		return 0x8223DAEC;
		  /* 8223DAECh */ case    8:  		/* lwz R11, <#[R31 + 60]> */
		/* 8223DAECh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 8223DAECh case    8:*/		return 0x8223DAF0;
		  /* 8223DAF0h */ case    9:  		/* mr R30, R3 */
		/* 8223DAF0h case    9:*/		regs.R30 = regs.R3;
		/* 8223DAF0h case    9:*/		return 0x8223DAF4;
		  /* 8223DAF4h */ case   10:  		/* mr R3, R11 */
		/* 8223DAF4h case   10:*/		regs.R3 = regs.R11;
		/* 8223DAF4h case   10:*/		return 0x8223DAF8;
		  /* 8223DAF8h */ case   11:  		/* lwz R4, <#[R11 + 4]> */
		/* 8223DAF8h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 8223DAF8h case   11:*/		return 0x8223DAFC;
		  /* 8223DAFCh */ case   12:  		/* bl 90052 */
		/* 8223DAFCh case   12:*/		regs.LR = 0x8223DB00; return 0x82253AC0;
		/* 8223DAFCh case   12:*/		return 0x8223DB00;
		  /* 8223DB00h */ case   13:  		/* stw R29, <#[R3]> */
		/* 8223DB00h case   13:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 8223DB00h case   13:*/		return 0x8223DB04;
		  /* 8223DB04h */ case   14:  		/* lwz R10, <#[R31 + 28]> */
		/* 8223DB04h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8223DB04h case   14:*/		return 0x8223DB08;
		  /* 8223DB08h */ case   15:  		/* lwz R11, <#[R31 + 56]> */
		/* 8223DB08h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8223DB08h case   15:*/		return 0x8223DB0C;
		  /* 8223DB0Ch */ case   16:  		/* addi R11, R11, 1 */
		/* 8223DB0Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223DB0Ch case   16:*/		return 0x8223DB10;
		  /* 8223DB10h */ case   17:  		/* stw R10, <#[R31 + 20]> */
		/* 8223DB10h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DB10h case   17:*/		return 0x8223DB14;
		  /* 8223DB14h */ case   18:  		/* stw R11, <#[R31 + 56]> */
		/* 8223DB14h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8223DB14h case   18:*/		return 0x8223DB18;
		  /* 8223DB18h */ case   19:  		/* lwz R9, <#[R31 + 20]> */
		/* 8223DB18h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DB18h case   19:*/		return 0x8223DB1C;
		  /* 8223DB1Ch */ case   20:  		/* li R10, 100 */
		/* 8223DB1Ch case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x64);
		/* 8223DB1Ch case   20:*/		return 0x8223DB20;
		  /* 8223DB20h */ case   21:  		/* lwz R11, <#[R9]> */
		/* 8223DB20h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8223DB20h case   21:*/		return 0x8223DB24;
		  /* 8223DB24h */ case   22:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8223DB24h case   22:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8223DB24h case   22:*/		return 0x8223DB28;
		  /* 8223DB28h */ case   23:  		/* subfc R8, R10, R11 */
		/* 8223DB28h case   23:*/		cpu::op::subfc<0>(regs,&regs.R8,regs.R10,regs.R11);
		/* 8223DB28h case   23:*/		return 0x8223DB2C;
		  /* 8223DB2Ch */ case   24:  		/* eqv R10, R10, R11 */
		/* 8223DB2Ch case   24:*/		cpu::op::eqv<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8223DB2Ch case   24:*/		return 0x8223DB30;
		  /* 8223DB30h */ case   25:  		/* rlwinm R10, R10, 1, 31, 31 */
		/* 8223DB30h case   25:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R10);
		/* 8223DB30h case   25:*/		return 0x8223DB34;
		  /* 8223DB34h */ case   26:  		/* addze R10, R10 */
		/* 8223DB34h case   26:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8223DB34h case   26:*/		return 0x8223DB38;
		  /* 8223DB38h */ case   27:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 8223DB38h case   27:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8223DB38h case   27:*/		return 0x8223DB3C;
		  /* 8223DB3Ch */ case   28:  		/* subfic R10, R10, 0 */
		/* 8223DB3Ch case   28:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 8223DB3Ch case   28:*/		return 0x8223DB40;
		  /* 8223DB40h */ case   29:  		/* subfe R10, R10, R10 */
		/* 8223DB40h case   29:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8223DB40h case   29:*/		return 0x8223DB44;
		  /* 8223DB44h */ case   30:  		/* and R10, R10, R11 */
		/* 8223DB44h case   30:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8223DB44h case   30:*/		return 0x8223DB48;
		  /* 8223DB48h */ case   31:  		/* cmpwi CR6, R10, 40 */
		/* 8223DB48h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000028);
		/* 8223DB48h case   31:*/		return 0x8223DB4C;
		  /* 8223DB4Ch */ case   32:  		/* bc 12, CR6_EQ, 1884 */
		/* 8223DB4Ch case   32:*/		if ( regs.CR[6].eq ) { return 0x8223E2A8;  }
		/* 8223DB4Ch case   32:*/		return 0x8223DB50;
		  /* 8223DB50h */ case   33:  		/* li R10, 100 */
		/* 8223DB50h case   33:*/		cpu::op::li<0>(regs,&regs.R10,0x64);
		/* 8223DB50h case   33:*/		return 0x8223DB54;
		  /* 8223DB54h */ case   34:  		/* subfc R8, R10, R11 */
		/* 8223DB54h case   34:*/		cpu::op::subfc<0>(regs,&regs.R8,regs.R10,regs.R11);
		/* 8223DB54h case   34:*/		return 0x8223DB58;
		  /* 8223DB58h */ case   35:  		/* eqv R10, R10, R11 */
		/* 8223DB58h case   35:*/		cpu::op::eqv<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8223DB58h case   35:*/		return 0x8223DB5C;
		  /* 8223DB5Ch */ case   36:  		/* rlwinm R10, R10, 1, 31, 31 */
		/* 8223DB5Ch case   36:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R10);
		/* 8223DB5Ch case   36:*/		return 0x8223DB60;
		  /* 8223DB60h */ case   37:  		/* addze R10, R10 */
		/* 8223DB60h case   37:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8223DB60h case   37:*/		return 0x8223DB64;
		  /* 8223DB64h */ case   38:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 8223DB64h case   38:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8223DB64h case   38:*/		return 0x8223DB68;
	}
	return 0x8223DB68;
} // Block from 8223DACCh-8223DB68h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8223DB68h
// Function '?SetBool@ILInstIterator@XGRAPHICS@@AAAXH_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DB68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DB68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DB68);
		  /* 8223DB68h */ case    0:  		/* subfic R10, R10, 0 */
		/* 8223DB68h case    0:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 8223DB68h case    0:*/		return 0x8223DB6C;
		  /* 8223DB6Ch */ case    1:  		/* subfe R10, R10, R10 */
		/* 8223DB6Ch case    1:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8223DB6Ch case    1:*/		return 0x8223DB70;
		  /* 8223DB70h */ case    2:  		/* and R11, R10, R11 */
		/* 8223DB70h case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223DB70h case    2:*/		return 0x8223DB74;
		  /* 8223DB74h */ case    3:  		/* cmpwi CR6, R11, 50 */
		/* 8223DB74h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000032);
		/* 8223DB74h case    3:*/		return 0x8223DB78;
		  /* 8223DB78h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 8223DB78h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8223DB9C;  }
		/* 8223DB78h case    4:*/		return 0x8223DB7C;
		  /* 8223DB7Ch */ case    5:  		/* addi R11, R9, 4 */
		/* 8223DB7Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x4);
		/* 8223DB7Ch case    5:*/		return 0x8223DB80;
		  /* 8223DB80h */ case    6:  		/* stw R11, <#[R31 + 20]> */
		/* 8223DB80h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DB80h case    6:*/		return 0x8223DB84;
		  /* 8223DB84h */ case    7:  		/* addi R11, R11, 4 */
		/* 8223DB84h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223DB84h case    7:*/		return 0x8223DB88;
		  /* 8223DB88h */ case    8:  		/* lwz R10, <#[R9 + 4]> */
		/* 8223DB88h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 8223DB88h case    8:*/		return 0x8223DB8C;
		  /* 8223DB8Ch */ case    9:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223DB8Ch case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223DB8Ch case    9:*/		return 0x8223DB90;
		  /* 8223DB90h */ case   10:  		/* cmpw CR6, R10, R30 */
		/* 8223DB90h case   10:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R30);
		/* 8223DB90h case   10:*/		return 0x8223DB94;
		  /* 8223DB94h */ case   11:  		/* stw R11, <#[R31 + 20]> */
		/* 8223DB94h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DB94h case   11:*/		return 0x8223DB98;
		  /* 8223DB98h */ case   12:  		/* bc 12, CR6_EQ, 1808 */
		/* 8223DB98h case   12:*/		if ( regs.CR[6].eq ) { return 0x8223E2A8;  }
		/* 8223DB98h case   12:*/		return 0x8223DB9C;
	}
	return 0x8223DB9C;
} // Block from 8223DB68h-8223DB9Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223DB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DB9C);
		  /* 8223DB9Ch */ case    0:  		/* mr R3, R31 */
		/* 8223DB9Ch case    0:*/		regs.R3 = regs.R31;
		/* 8223DB9Ch case    0:*/		return 0x8223DBA0;
		  /* 8223DBA0h */ case    1:  		/* bl -3472 */
		/* 8223DBA0h case    1:*/		regs.LR = 0x8223DBA4; return 0x8223CE10;
		/* 8223DBA0h case    1:*/		return 0x8223DBA4;
		  /* 8223DBA4h */ case    2:  		/* b -140 */
		/* 8223DBA4h case    2:*/		return 0x8223DB18;
		/* 8223DBA4h case    2:*/		return 0x8223DBA8;
	}
	return 0x8223DBA8;
} // Block from 8223DB9Ch-8223DBA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223DBA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DBA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DBA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DBA8);
		  /* 8223DBA8h */ case    0:  		/* cmpwi CR6, R11, 53 */
		/* 8223DBA8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 8223DBA8h case    0:*/		return 0x8223DBAC;
		  /* 8223DBACh */ case    1:  		/* bc 12, CR6_EQ, 1372 */
		/* 8223DBACh case    1:*/		if ( regs.CR[6].eq ) { return 0x8223E108;  }
		/* 8223DBACh case    1:*/		return 0x8223DBB0;
		  /* 8223DBB0h */ case    2:  		/* cmpwi CR6, R11, 83 */
		/* 8223DBB0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000053);
		/* 8223DBB0h case    2:*/		return 0x8223DBB4;
		  /* 8223DBB4h */ case    3:  		/* bc 12, CR6_EQ, 1148 */
		/* 8223DBB4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8223E030;  }
		/* 8223DBB4h case    3:*/		return 0x8223DBB8;
	}
	return 0x8223DBB8;
} // Block from 8223DBA8h-8223DBB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223DBB8h
// Function '?IsCall@ILFormatDecode@XGRAPHICS@@SA_NPBI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DBB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DBB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DBB8);
		  /* 8223DBB8h */ case    0:  		/* cmpwi CR6, R11, 113 */
		/* 8223DBB8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000071);
		/* 8223DBB8h case    0:*/		return 0x8223DBBC;
		  /* 8223DBBCh */ case    1:  		/* bc 12, CR6_EQ, 916 */
		/* 8223DBBCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8223DF50;  }
		/* 8223DBBCh case    1:*/		return 0x8223DBC0;
		  /* 8223DBC0h */ case    2:  		/* cmpwi CR6, R11, 114 */
		/* 8223DBC0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000072);
		/* 8223DBC0h case    2:*/		return 0x8223DBC4;
		  /* 8223DBC4h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 8223DBC4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8223DBD4;  }
		/* 8223DBC4h case    3:*/		return 0x8223DBC8;
		  /* 8223DBC8h */ case    4:  		/* cmpwi CR6, R11, 132 */
		/* 8223DBC8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000084);
		/* 8223DBC8h case    4:*/		return 0x8223DBCC;
		  /* 8223DBCCh */ case    5:  		/* bc 4, CR6_EQ, 1756 */
		/* 8223DBCCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x8223E2A8;  }
		/* 8223DBCCh case    5:*/		return 0x8223DBD0;
		  /* 8223DBD0h */ case    6:  		/* b -932 */
		/* 8223DBD0h case    6:*/		return 0x8223D82C;
		/* 8223DBD0h case    6:*/		return 0x8223DBD4;
	}
	return 0x8223DBD4;
} // Block from 8223DBB8h-8223DBD4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223DBD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DBD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DBD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DBD4);
		  /* 8223DBD4h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8223DBD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223DBD4h case    0:*/		return 0x8223DBD8;
		  /* 8223DBD8h */ case    1:  		/* lwz R10, <#[R31 + 56]> */
		/* 8223DBD8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8223DBD8h case    1:*/		return 0x8223DBDC;
		  /* 8223DBDCh */ case    2:  		/* lwz R9, <#[R11 + 1360]> */
		/* 8223DBDCh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000550) );
		/* 8223DBDCh case    2:*/		return 0x8223DBE0;
		  /* 8223DBE0h */ case    3:  		/* lwz R9, <#[R9 + 16]> */
		/* 8223DBE0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 8223DBE0h case    3:*/		return 0x8223DBE4;
		  /* 8223DBE4h */ case    4:  		/* cmpw CR6, R10, R9 */
		/* 8223DBE4h case    4:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R9);
		/* 8223DBE4h case    4:*/		return 0x8223DBE8;
		  /* 8223DBE8h */ case    5:  		/* bc 12, CR6_GT, 1936 */
		/* 8223DBE8h case    5:*/		if ( regs.CR[6].gt ) { return 0x8223E378;  }
		/* 8223DBE8h case    5:*/		return 0x8223DBEC;
		  /* 8223DBECh */ case    6:  		/* li R4, 20000 */
		/* 8223DBECh case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x4E20);
		/* 8223DBECh case    6:*/		return 0x8223DBF0;
		  /* 8223DBF0h */ case    7:  		/* lwz R3, <#[R11 + 1456]> */
		/* 8223DBF0h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223DBF0h case    7:*/		return 0x8223DBF4;
		  /* 8223DBF4h */ case    8:  		/* bl -137020 */
		/* 8223DBF4h case    8:*/		regs.LR = 0x8223DBF8; return 0x8221C4B8;
		/* 8223DBF4h case    8:*/		return 0x8223DBF8;
		  /* 8223DBF8h */ case    9:  		/* lwz R11, <#[R31 + 64]> */
		/* 8223DBF8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000040) );
		/* 8223DBF8h case    9:*/		return 0x8223DBFC;
		  /* 8223DBFCh */ case   10:  		/* mr R30, R3 */
		/* 8223DBFCh case   10:*/		regs.R30 = regs.R3;
		/* 8223DBFCh case   10:*/		return 0x8223DC00;
		  /* 8223DC00h */ case   11:  		/* mr R24, R3 */
		/* 8223DC00h case   11:*/		regs.R24 = regs.R3;
		/* 8223DC00h case   11:*/		return 0x8223DC04;
		  /* 8223DC04h */ case   12:  		/* mr R3, R11 */
		/* 8223DC04h case   12:*/		regs.R3 = regs.R11;
		/* 8223DC04h case   12:*/		return 0x8223DC08;
	}
	return 0x8223DC08;
} // Block from 8223DBD4h-8223DC08h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223DC08h
// Function '?IsJmp@ILFormatDecode@XGRAPHICS@@SA_NPBI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DC08);
		  /* 8223DC08h */ case    0:  		/* lwz R4, <#[R11 + 4]> */
		/* 8223DC08h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 8223DC08h case    0:*/		return 0x8223DC0C;
		  /* 8223DC0Ch */ case    1:  		/* bl 89780 */
		/* 8223DC0Ch case    1:*/		regs.LR = 0x8223DC10; return 0x82253AC0;
		/* 8223DC0Ch case    1:*/		return 0x8223DC10;
		  /* 8223DC10h */ case    2:  		/* stw R24, <#[R3]> */
		/* 8223DC10h case    2:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000000) );
		/* 8223DC10h case    2:*/		return 0x8223DC14;
		  /* 8223DC14h */ case    3:  		/* lwz R29, <#[R31 + 20]> */
		/* 8223DC14h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DC14h case    3:*/		return 0x8223DC18;
		  /* 8223DC18h */ case    4:  		/* mr R3, R29 */
		/* 8223DC18h case    4:*/		regs.R3 = regs.R29;
		/* 8223DC18h case    4:*/		return 0x8223DC1C;
		  /* 8223DC1Ch */ case    5:  		/* bl -3780 */
		/* 8223DC1Ch case    5:*/		regs.LR = 0x8223DC20; return 0x8223CD58;
		/* 8223DC1Ch case    5:*/		return 0x8223DC20;
		  /* 8223DC20h */ case    6:  		/* addi R10, R29, 4 */
		/* 8223DC20h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4);
		/* 8223DC20h case    6:*/		return 0x8223DC24;
		  /* 8223DC24h */ case    7:  		/* addi R11, R24, 4 */
		/* 8223DC24h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0x4);
		/* 8223DC24h case    7:*/		return 0x8223DC28;
		  /* 8223DC28h */ case    8:  		/* stw R10, <#[R31 + 20]> */
		/* 8223DC28h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DC28h case    8:*/		return 0x8223DC2C;
		  /* 8223DC2Ch */ case    9:  		/* li R4, 256 */
		/* 8223DC2Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 8223DC2Ch case    9:*/		return 0x8223DC30;
		  /* 8223DC30h */ case   10:  		/* stb R27, <#[R24]> */
		/* 8223DC30h case   10:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R24 + 0x00000000) );
		/* 8223DC30h case   10:*/		return 0x8223DC34;
		  /* 8223DC34h */ case   11:  		/* addi R30, R11, 4 */
		/* 8223DC34h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4);
		/* 8223DC34h case   11:*/		return 0x8223DC38;
		  /* 8223DC38h */ case   12:  		/* stb R27, <#[R24 + 1]> */
		/* 8223DC38h case   12:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R24 + 0x00000001) );
		/* 8223DC38h case   12:*/		return 0x8223DC3C;
		  /* 8223DC3Ch */ case   13:  		/* mr R28, R3 */
		/* 8223DC3Ch case   13:*/		regs.R28 = regs.R3;
		/* 8223DC3Ch case   13:*/		return 0x8223DC40;
		  /* 8223DC40h */ case   14:  		/* stb R27, <#[R24 + 2]> */
		/* 8223DC40h case   14:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R24 + 0x00000002) );
		/* 8223DC40h case   14:*/		return 0x8223DC44;
		  /* 8223DC44h */ case   15:  		/* stb R27, <#[R24 + 3]> */
		/* 8223DC44h case   15:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R24 + 0x00000003) );
		/* 8223DC44h case   15:*/		return 0x8223DC48;
		  /* 8223DC48h */ case   16:  		/* lwz R10, <#[R24]> */
		/* 8223DC48h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 8223DC48h case   16:*/		return 0x8223DC4C;
		  /* 8223DC4Ch */ case   17:  		/* ori R10, R10, 53 */
		/* 8223DC4Ch case   17:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x35);
		/* 8223DC4Ch case   17:*/		return 0x8223DC50;
		  /* 8223DC50h */ case   18:  		/* stw R10, <#[R24]> */
		/* 8223DC50h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 8223DC50h case   18:*/		return 0x8223DC54;
		  /* 8223DC54h */ case   19:  		/* lwz R10, <#[R31 + 20]> */
		/* 8223DC54h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DC54h case   19:*/		return 0x8223DC58;
	}
	return 0x8223DC58;
} // Block from 8223DC08h-8223DC58h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8223DC58h
// Function '?IsCloseScope@ILFormatDecode@XGRAPHICS@@SA_NPBI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DC58);
		  /* 8223DC58h */ case    0:  		/* lbz R9, <#[R10]> */
		/* 8223DC58h case    0:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8223DC58h case    0:*/		return 0x8223DC5C;
		  /* 8223DC5Ch */ case    1:  		/* stb R9, <#[R24 + 4]> */
		/* 8223DC5Ch case    1:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R24 + 0x00000004) );
		/* 8223DC5Ch case    1:*/		return 0x8223DC60;
		  /* 8223DC60h */ case    2:  		/* lbz R9, <#[R10 + 1]> */
		/* 8223DC60h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000001) );
		/* 8223DC60h case    2:*/		return 0x8223DC64;
		  /* 8223DC64h */ case    3:  		/* stb R9, <#[R24 + 5]> */
		/* 8223DC64h case    3:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R24 + 0x00000005) );
		/* 8223DC64h case    3:*/		return 0x8223DC68;
		  /* 8223DC68h */ case    4:  		/* lbz R9, <#[R10 + 2]> */
		/* 8223DC68h case    4:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 8223DC68h case    4:*/		return 0x8223DC6C;
		  /* 8223DC6Ch */ case    5:  		/* stb R9, <#[R24 + 6]> */
		/* 8223DC6Ch case    5:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R24 + 0x00000006) );
		/* 8223DC6Ch case    5:*/		return 0x8223DC70;
		  /* 8223DC70h */ case    6:  		/* lbz R10, <#[R10 + 3]> */
		/* 8223DC70h case    6:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000003) );
		/* 8223DC70h case    6:*/		return 0x8223DC74;
		  /* 8223DC74h */ case    7:  		/* stb R10, <#[R24 + 7]> */
		/* 8223DC74h case    7:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R24 + 0x00000007) );
		/* 8223DC74h case    7:*/		return 0x8223DC78;
		  /* 8223DC78h */ case    8:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223DC78h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DC78h case    8:*/		return 0x8223DC7C;
		  /* 8223DC7Ch */ case    9:  		/* lwz R10, <#[R31]> */
		/* 8223DC7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8223DC7Ch case    9:*/		return 0x8223DC80;
		  /* 8223DC80h */ case   10:  		/* addi R11, R11, 8 */
		/* 8223DC80h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8223DC80h case   10:*/		return 0x8223DC84;
		  /* 8223DC84h */ case   11:  		/* stw R11, <#[R31 + 20]> */
		/* 8223DC84h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DC84h case   11:*/		return 0x8223DC88;
		  /* 8223DC88h */ case   12:  		/* lwz R3, <#[R10 + 1456]> */
		/* 8223DC88h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x000005B0) );
		/* 8223DC88h case   12:*/		return 0x8223DC8C;
		  /* 8223DC8Ch */ case   13:  		/* bl -137172 */
		/* 8223DC8Ch case   13:*/		regs.LR = 0x8223DC90; return 0x8221C4B8;
		/* 8223DC8Ch case   13:*/		return 0x8223DC90;
		  /* 8223DC90h */ case   14:  		/* li R11, 64 */
		/* 8223DC90h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x40);
		/* 8223DC90h case   14:*/		return 0x8223DC94;
		  /* 8223DC94h */ case   15:  		/* mr R26, R3 */
		/* 8223DC94h case   15:*/		regs.R26 = regs.R3;
		/* 8223DC94h case   15:*/		return 0x8223DC98;
		  /* 8223DC98h */ case   16:  		/* mtspr CTR, R11 */
		/* 8223DC98h case   16:*/		regs.CTR = regs.R11;
		/* 8223DC98h case   16:*/		return 0x8223DC9C;
		  /* 8223DC9Ch */ case   17:  		/* mr R9, R22 */
		/* 8223DC9Ch case   17:*/		regs.R9 = regs.R22;
		/* 8223DC9Ch case   17:*/		return 0x8223DCA0;
		  /* 8223DCA0h */ case   18:  		/* addi R10, R3, -4 */
		/* 8223DCA0h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xFFFFFFFC);
		/* 8223DCA0h case   18:*/		return 0x8223DCA4;
		  /* 8223DCA4h */ case   19:  		/* stwu R9, <#[R10 + 4]> */
		/* 8223DCA4h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8223DCA4h case   19:*/		return 0x8223DCA8;
		  /* 8223DCA8h */ case   20:  		/* bc 16, CR0_LT, -4 */
		/* 8223DCA8h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8223DCA4;  }
		/* 8223DCA8h case   20:*/		return 0x8223DCAC;
		  /* 8223DCACh */ case   21:  		/* mr R4, R28 */
		/* 8223DCACh case   21:*/		regs.R4 = regs.R28;
		/* 8223DCACh case   21:*/		return 0x8223DCB0;
		  /* 8223DCB0h */ case   22:  		/* mr R3, R26 */
		/* 8223DCB0h case   22:*/		regs.R3 = regs.R26;
		/* 8223DCB0h case   22:*/		return 0x8223DCB4;
		  /* 8223DCB4h */ case   23:  		/* bl -4156 */
		/* 8223DCB4h case   23:*/		regs.LR = 0x8223DCB8; return 0x8223CC78;
		/* 8223DCB4h case   23:*/		return 0x8223DCB8;
		  /* 8223DCB8h */ case   24:  		/* lwz R25, <#[R31 + 20]> */
		/* 8223DCB8h case   24:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DCB8h case   24:*/		return 0x8223DCBC;
		  /* 8223DCBCh */ case   25:  		/* lwz R29, <#[R31 + 20]> */
		/* 8223DCBCh case   25:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DCBCh case   25:*/		return 0x8223DCC0;
		  /* 8223DCC0h */ case   26:  		/* mr R3, R29 */
		/* 8223DCC0h case   26:*/		regs.R3 = regs.R29;
		/* 8223DCC0h case   26:*/		return 0x8223DCC4;
		  /* 8223DCC4h */ case   27:  		/* bl -3100 */
		/* 8223DCC4h case   27:*/		regs.LR = 0x8223DCC8; return 0x8223D0A8;
		/* 8223DCC4h case   27:*/		return 0x8223DCC8;
	}
	return 0x8223DCC8;
} // Block from 8223DC58h-8223DCC8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8223DCC8h
// Function '?IsOpenScope@ILFormatDecode@XGRAPHICS@@SA_NPBI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DCC8);
		  /* 8223DCC8h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223DCC8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223DCC8h case    0:*/		return 0x8223DCCC;
		  /* 8223DCCCh */ case    1:  		/* bc 12, CR0_EQ, 104 */
		/* 8223DCCCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8223DD34;  }
		/* 8223DCCCh case    1:*/		return 0x8223DCD0;
		  /* 8223DCD0h */ case    2:  		/* lwz R10, <#[R29]> */
		/* 8223DCD0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8223DCD0h case    2:*/		return 0x8223DCD4;
		  /* 8223DCD4h */ case    3:  		/* li R11, 100 */
		/* 8223DCD4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223DCD4h case    3:*/		return 0x8223DCD8;
		  /* 8223DCD8h */ case    4:  		/* mr R3, R29 */
		/* 8223DCD8h case    4:*/		regs.R3 = regs.R29;
		/* 8223DCD8h case    4:*/		return 0x8223DCDC;
		  /* 8223DCDCh */ case    5:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223DCDCh case    5:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223DCDCh case    5:*/		return 0x8223DCE0;
		  /* 8223DCE0h */ case    6:  		/* subfc R9, R11, R10 */
		/* 8223DCE0h case    6:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223DCE0h case    6:*/		return 0x8223DCE4;
		  /* 8223DCE4h */ case    7:  		/* eqv R11, R11, R10 */
		/* 8223DCE4h case    7:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223DCE4h case    7:*/		return 0x8223DCE8;
		  /* 8223DCE8h */ case    8:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223DCE8h case    8:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223DCE8h case    8:*/		return 0x8223DCEC;
		  /* 8223DCECh */ case    9:  		/* addze R11, R11 */
		/* 8223DCECh case    9:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223DCECh case    9:*/		return 0x8223DCF0;
		  /* 8223DCF0h */ case   10:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223DCF0h case   10:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223DCF0h case   10:*/		return 0x8223DCF4;
		  /* 8223DCF4h */ case   11:  		/* subfic R11, R11, 0 */
		/* 8223DCF4h case   11:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223DCF4h case   11:*/		return 0x8223DCF8;
		  /* 8223DCF8h */ case   12:  		/* subfe R11, R11, R11 */
		/* 8223DCF8h case   12:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223DCF8h case   12:*/		return 0x8223DCFC;
		  /* 8223DCFCh */ case   13:  		/* and R14, R11, R10 */
		/* 8223DCFCh case   13:*/		cpu::op::and<0>(regs,&regs.R14,regs.R11,regs.R10);
		/* 8223DCFCh case   13:*/		return 0x8223DD00;
		  /* 8223DD00h */ case   14:  		/* bl -4008 */
		/* 8223DD00h case   14:*/		regs.LR = 0x8223DD04; return 0x8223CD58;
		/* 8223DD00h case   14:*/		return 0x8223DD04;
		  /* 8223DD04h */ case   15:  		/* addi R11, R29, 4 */
		/* 8223DD04h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x4);
		/* 8223DD04h case   15:*/		return 0x8223DD08;
		  /* 8223DD08h */ case   16:  		/* mr R4, R3 */
		/* 8223DD08h case   16:*/		regs.R4 = regs.R3;
		/* 8223DD08h case   16:*/		return 0x8223DD0C;
		  /* 8223DD0Ch */ case   17:  		/* stw R11, <#[R31 + 20]> */
		/* 8223DD0Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DD0Ch case   17:*/		return 0x8223DD10;
		  /* 8223DD10h */ case   18:  		/* cmpwi CR6, R14, 114 */
		/* 8223DD10h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R14,0x00000072);
		/* 8223DD10h case   18:*/		return 0x8223DD14;
		  /* 8223DD14h */ case   19:  		/* bc 4, CR6_EQ, 12 */
		/* 8223DD14h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8223DD20;  }
		/* 8223DD14h case   19:*/		return 0x8223DD18;
		  /* 8223DD18h */ case   20:  		/* addi R11, R11, 4 */
		/* 8223DD18h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223DD18h case   20:*/		return 0x8223DD1C;
		  /* 8223DD1Ch */ case   21:  		/* stw R11, <#[R31 + 20]> */
		/* 8223DD1Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DD1Ch case   21:*/		return 0x8223DD20;
	}
	return 0x8223DD20;
} // Block from 8223DCC8h-8223DD20h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8223DD20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DD20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DD20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DD20);
		  /* 8223DD20h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223DD20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DD20h case    0:*/		return 0x8223DD24;
		  /* 8223DD24h */ case    1:  		/* mr R3, R26 */
		/* 8223DD24h case    1:*/		regs.R3 = regs.R26;
		/* 8223DD24h case    1:*/		return 0x8223DD28;
		  /* 8223DD28h */ case    2:  		/* addi R11, R11, 4 */
		/* 8223DD28h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223DD28h case    2:*/		return 0x8223DD2C;
		  /* 8223DD2Ch */ case    3:  		/* stw R11, <#[R31 + 20]> */
		/* 8223DD2Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DD2Ch case    3:*/		return 0x8223DD30;
	}
	return 0x8223DD30;
} // Block from 8223DD20h-8223DD30h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223DD30h
// Function '??0ILInstIterator@XGRAPHICS@@QAA@PAIPAVCompiler@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DD30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DD30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DD30);
		  /* 8223DD30h */ case    0:  		/* bl -4280 */
		/* 8223DD30h case    0:*/		regs.LR = 0x8223DD34; return 0x8223CC78;
		/* 8223DD30h case    0:*/		return 0x8223DD34;
	}
	return 0x8223DD34;
} // Block from 8223DD30h-8223DD34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223DD34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DD34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DD34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DD34);
		  /* 8223DD34h */ case    0:  		/* lwz R10, <#[R31 + 20]> */
		/* 8223DD34h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DD34h case    0:*/		return 0x8223DD38;
		  /* 8223DD38h */ case    1:  		/* li R11, 100 */
		/* 8223DD38h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223DD38h case    1:*/		return 0x8223DD3C;
		  /* 8223DD3Ch */ case    2:  		/* lwz R9, <#[R10]> */
		/* 8223DD3Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8223DD3Ch case    2:*/		return 0x8223DD40;
		  /* 8223DD40h */ case    3:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 8223DD40h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 8223DD40h case    3:*/		return 0x8223DD44;
		  /* 8223DD44h */ case    4:  		/* subfc R8, R11, R9 */
		/* 8223DD44h case    4:*/		cpu::op::subfc<0>(regs,&regs.R8,regs.R11,regs.R9);
		/* 8223DD44h case    4:*/		return 0x8223DD48;
		  /* 8223DD48h */ case    5:  		/* eqv R11, R11, R9 */
		/* 8223DD48h case    5:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8223DD48h case    5:*/		return 0x8223DD4C;
		  /* 8223DD4Ch */ case    6:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223DD4Ch case    6:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223DD4Ch case    6:*/		return 0x8223DD50;
		  /* 8223DD50h */ case    7:  		/* addze R11, R11 */
		/* 8223DD50h case    7:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223DD50h case    7:*/		return 0x8223DD54;
		  /* 8223DD54h */ case    8:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223DD54h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223DD54h case    8:*/		return 0x8223DD58;
		  /* 8223DD58h */ case    9:  		/* subfic R11, R11, 0 */
		/* 8223DD58h case    9:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223DD58h case    9:*/		return 0x8223DD5C;
		  /* 8223DD5Ch */ case   10:  		/* subfe R11, R11, R11 */
		/* 8223DD5Ch case   10:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223DD5Ch case   10:*/		return 0x8223DD60;
		  /* 8223DD60h */ case   11:  		/* and R11, R11, R9 */
		/* 8223DD60h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8223DD60h case   11:*/		return 0x8223DD64;
		  /* 8223DD64h */ case   12:  		/* cmpwi CR6, R11, 132 */
		/* 8223DD64h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000084);
		/* 8223DD64h case   12:*/		return 0x8223DD68;
		  /* 8223DD68h */ case   13:  		/* bc 4, CR6_EQ, 140 */
		/* 8223DD68h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8223DDF4;  }
		/* 8223DD68h case   13:*/		return 0x8223DD6C;
		  /* 8223DD6Ch */ case   14:  		/* lwz R11, <#[R10 + 4]> */
		/* 8223DD6Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8223DD6Ch case   14:*/		return 0x8223DD70;
		  /* 8223DD70h */ case   15:  		/* rlwinm R7, R11, 0, 16, 31 */
		/* 8223DD70h case   15:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R7,regs.R11);
		/* 8223DD70h case   15:*/		return 0x8223DD74;
		  /* 8223DD74h */ case   16:  		/* cmpw CR6, R7, R28 */
		/* 8223DD74h case   16:*/		cpu::op::cmpw<6>(regs,regs.R7,regs.R28);
		/* 8223DD74h case   16:*/		return 0x8223DD78;
		  /* 8223DD78h */ case   17:  		/* bc 4, CR6_EQ, 8 */
		/* 8223DD78h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8223DD80;  }
		/* 8223DD78h case   17:*/		return 0x8223DD7C;
		  /* 8223DD7Ch */ case   18:  		/* rlwinm R19, R10, 0, 0, 31 */
		/* 8223DD7Ch case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R19,regs.R10);
		/* 8223DD7Ch case   18:*/		return 0x8223DD80;
	}
	return 0x8223DD80;
} // Block from 8223DD34h-8223DD80h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8223DD80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DD80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DD80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DD80);
		  /* 8223DD80h */ case    0:  		/* mr R9, R22 */
		/* 8223DD80h case    0:*/		regs.R9 = regs.R22;
		/* 8223DD80h case    0:*/		return 0x8223DD84;
		  /* 8223DD84h */ case    1:  		/* mr R10, R27 */
		/* 8223DD84h case    1:*/		regs.R10 = regs.R27;
		/* 8223DD84h case    1:*/		return 0x8223DD88;
		  /* 8223DD88h */ case    2:  		/* mr R11, R26 */
		/* 8223DD88h case    2:*/		regs.R11 = regs.R26;
		/* 8223DD88h case    2:*/		return 0x8223DD8C;
		  /* 8223DD8Ch */ case    3:  		/* lwz R8, <#[R11]> */
		/* 8223DD8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8223DD8Ch case    3:*/		return 0x8223DD90;
		  /* 8223DD90h */ case    4:  		/* cmpwi CR6, R8, -1 */
		/* 8223DD90h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R8,0xFFFFFFFF);
		/* 8223DD90h case    4:*/		return 0x8223DD94;
		  /* 8223DD94h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 8223DD94h case    5:*/		if ( regs.CR[6].eq ) { return 0x8223DDA4;  }
		/* 8223DD94h case    5:*/		return 0x8223DD98;
		  /* 8223DD98h */ case    6:  		/* cmpwi CR6, R9, -1 */
		/* 8223DD98h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8223DD98h case    6:*/		return 0x8223DD9C;
		  /* 8223DD9Ch */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 8223DD9Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x8223DDB8;  }
		/* 8223DD9Ch case    7:*/		return 0x8223DDA0;
		  /* 8223DDA0h */ case    8:  		/* mr R9, R8 */
		/* 8223DDA0h case    8:*/		regs.R9 = regs.R8;
		/* 8223DDA0h case    8:*/		return 0x8223DDA4;
	}
	return 0x8223DDA4;
} // Block from 8223DD80h-8223DDA4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223DDA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DDA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DDA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DDA4);
		  /* 8223DDA4h */ case    0:  		/* addi R10, R10, 1 */
		/* 8223DDA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8223DDA4h case    0:*/		return 0x8223DDA8;
		  /* 8223DDA8h */ case    1:  		/* addi R11, R11, 4 */
		/* 8223DDA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223DDA8h case    1:*/		return 0x8223DDAC;
		  /* 8223DDACh */ case    2:  		/* cmpwi CR6, R10, 64 */
		/* 8223DDACh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000040);
		/* 8223DDACh case    2:*/		return 0x8223DDB0;
		  /* 8223DDB0h */ case    3:  		/* bc 12, CR6_LT, -36 */
		/* 8223DDB0h case    3:*/		if ( regs.CR[6].lt ) { return 0x8223DD8C;  }
		/* 8223DDB0h case    3:*/		return 0x8223DDB4;
		  /* 8223DDB4h */ case    4:  		/* b 8 */
		/* 8223DDB4h case    4:*/		return 0x8223DDBC;
		/* 8223DDB4h case    4:*/		return 0x8223DDB8;
	}
	return 0x8223DDB8;
} // Block from 8223DDA4h-8223DDB8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223DDB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DDB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DDB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DDB8);
		  /* 8223DDB8h */ case    0:  		/* mr R9, R22 */
		/* 8223DDB8h case    0:*/		regs.R9 = regs.R22;
		/* 8223DDB8h case    0:*/		return 0x8223DDBC;
	}
	return 0x8223DDBC;
} // Block from 8223DDB8h-8223DDBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223DDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DDBC);
		  /* 8223DDBCh */ case    0:  		/* cmpw CR6, R9, R7 */
		/* 8223DDBCh case    0:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R7);
		/* 8223DDBCh case    0:*/		return 0x8223DDC0;
		  /* 8223DDC0h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 8223DDC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223DE00;  }
		/* 8223DDC0h case    1:*/		return 0x8223DDC4;
		  /* 8223DDC4h */ case    2:  		/* mr R11, R27 */
		/* 8223DDC4h case    2:*/		regs.R11 = regs.R27;
		/* 8223DDC4h case    2:*/		return 0x8223DDC8;
		  /* 8223DDC8h */ case    3:  		/* mr R10, R26 */
		/* 8223DDC8h case    3:*/		regs.R10 = regs.R26;
		/* 8223DDC8h case    3:*/		return 0x8223DDCC;
		  /* 8223DDCCh */ case    4:  		/* lwz R9, <#[R10]> */
		/* 8223DDCCh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8223DDCCh case    4:*/		return 0x8223DDD0;
		  /* 8223DDD0h */ case    5:  		/* cmpw CR6, R9, R7 */
		/* 8223DDD0h case    5:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R7);
		/* 8223DDD0h case    5:*/		return 0x8223DDD4;
		  /* 8223DDD4h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 8223DDD4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8223DDEC;  }
		/* 8223DDD4h case    6:*/		return 0x8223DDD8;
		  /* 8223DDD8h */ case    7:  		/* addi R11, R11, 1 */
		/* 8223DDD8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223DDD8h case    7:*/		return 0x8223DDDC;
		  /* 8223DDDCh */ case    8:  		/* addi R10, R10, 4 */
		/* 8223DDDCh case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8223DDDCh case    8:*/		return 0x8223DDE0;
		  /* 8223DDE0h */ case    9:  		/* cmpwi CR6, R11, 64 */
		/* 8223DDE0h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000040);
		/* 8223DDE0h case    9:*/		return 0x8223DDE4;
		  /* 8223DDE4h */ case   10:  		/* bc 12, CR6_LT, -24 */
		/* 8223DDE4h case   10:*/		if ( regs.CR[6].lt ) { return 0x8223DDCC;  }
		/* 8223DDE4h case   10:*/		return 0x8223DDE8;
		  /* 8223DDE8h */ case   11:  		/* b 12 */
		/* 8223DDE8h case   11:*/		return 0x8223DDF4;
		/* 8223DDE8h case   11:*/		return 0x8223DDEC;
	}
	return 0x8223DDEC;
} // Block from 8223DDBCh-8223DDECh (12 instructions)

//////////////////////////////////////////////////////
// Block at 8223DDECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DDEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DDEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DDEC);
		  /* 8223DDECh */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8223DDECh case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8223DDECh case    0:*/		return 0x8223DDF0;
		  /* 8223DDF0h */ case    1:  		/* stwx R22, <#[R11 + R26]> */
		/* 8223DDF0h case    1:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 8223DDF0h case    1:*/		return 0x8223DDF4;
	}
	return 0x8223DDF4;
} // Block from 8223DDECh-8223DDF4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223DDF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DDF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DDF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DDF4);
		  /* 8223DDF4h */ case    0:  		/* mr R3, R31 */
		/* 8223DDF4h case    0:*/		regs.R3 = regs.R31;
		/* 8223DDF4h case    0:*/		return 0x8223DDF8;
		  /* 8223DDF8h */ case    1:  		/* bl -4072 */
		/* 8223DDF8h case    1:*/		regs.LR = 0x8223DDFC; return 0x8223CE10;
		/* 8223DDF8h case    1:*/		return 0x8223DDFC;
		  /* 8223DDFCh */ case    2:  		/* b -320 */
		/* 8223DDFCh case    2:*/		return 0x8223DCBC;
		/* 8223DDFCh case    2:*/		return 0x8223DE00;
	}
	return 0x8223DE00;
} // Block from 8223DDF4h-8223DE00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223DE00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DE00);
		  /* 8223DE00h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223DE00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DE00h case    0:*/		return 0x8223DE04;
		  /* 8223DE04h */ case    1:  		/* stw R25, <#[R31 + 20]> */
		/* 8223DE04h case    1:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DE04h case    1:*/		return 0x8223DE08;
		  /* 8223DE08h */ case    2:  		/* addi R28, R11, 8 */
		/* 8223DE08h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x8);
		/* 8223DE08h case    2:*/		return 0x8223DE0C;
		  /* 8223DE0Ch */ case    3:  		/* cmplw CR6, R25, R28 */
		/* 8223DE0Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R28);
		/* 8223DE0Ch case    3:*/		return 0x8223DE10;
		  /* 8223DE10h */ case    4:  		/* bc 12, CR6_EQ, 84 */
		/* 8223DE10h case    4:*/		if ( regs.CR[6].eq ) { return 0x8223DE64;  }
		/* 8223DE10h case    4:*/		return 0x8223DE14;
		  /* 8223DE14h */ case    5:  		/* mr R3, R31 */
		/* 8223DE14h case    5:*/		regs.R3 = regs.R31;
		/* 8223DE14h case    5:*/		return 0x8223DE18;
		  /* 8223DE18h */ case    6:  		/* lwz R29, <#[R31 + 20]> */
		/* 8223DE18h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DE18h case    6:*/		return 0x8223DE1C;
		  /* 8223DE1Ch */ case    7:  		/* bl -4108 */
		/* 8223DE1Ch case    7:*/		regs.LR = 0x8223DE20; return 0x8223CE10;
		/* 8223DE1Ch case    7:*/		return 0x8223DE20;
		  /* 8223DE20h */ case    8:  		/* b 44 */
		/* 8223DE20h case    8:*/		return 0x8223DE4C;
		/* 8223DE20h case    8:*/		return 0x8223DE24;
		  /* 8223DE24h */ case    9:  		/* lbz R11, <#[R29]> */
		/* 8223DE24h case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8223DE24h case    9:*/		return 0x8223DE28;
		  /* 8223DE28h */ case   10:  		/* stb R11, <#[R30]> */
		/* 8223DE28h case   10:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223DE28h case   10:*/		return 0x8223DE2C;
		  /* 8223DE2Ch */ case   11:  		/* lbz R11, <#[R29 + 1]> */
		/* 8223DE2Ch case   11:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000001) );
		/* 8223DE2Ch case   11:*/		return 0x8223DE30;
		  /* 8223DE30h */ case   12:  		/* stb R11, <#[R30 + 1]> */
		/* 8223DE30h case   12:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000001) );
		/* 8223DE30h case   12:*/		return 0x8223DE34;
		  /* 8223DE34h */ case   13:  		/* lbz R11, <#[R29 + 2]> */
		/* 8223DE34h case   13:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000002) );
		/* 8223DE34h case   13:*/		return 0x8223DE38;
		  /* 8223DE38h */ case   14:  		/* stb R11, <#[R30 + 2]> */
		/* 8223DE38h case   14:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 8223DE38h case   14:*/		return 0x8223DE3C;
		  /* 8223DE3Ch */ case   15:  		/* lbz R11, <#[R29 + 3]> */
		/* 8223DE3Ch case   15:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000003) );
		/* 8223DE3Ch case   15:*/		return 0x8223DE40;
		  /* 8223DE40h */ case   16:  		/* addi R29, R29, 4 */
		/* 8223DE40h case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8223DE40h case   16:*/		return 0x8223DE44;
		  /* 8223DE44h */ case   17:  		/* stb R11, <#[R30 + 3]> */
		/* 8223DE44h case   17:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000003) );
		/* 8223DE44h case   17:*/		return 0x8223DE48;
		  /* 8223DE48h */ case   18:  		/* addi R30, R30, 4 */
		/* 8223DE48h case   18:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8223DE48h case   18:*/		return 0x8223DE4C;
	}
	return 0x8223DE4C;
} // Block from 8223DE00h-8223DE4Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8223DE4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DE4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DE4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DE4C);
		  /* 8223DE4Ch */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223DE4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DE4Ch case    0:*/		return 0x8223DE50;
		  /* 8223DE50h */ case    1:  		/* cmplw CR6, R29, R11 */
		/* 8223DE50h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8223DE50h case    1:*/		return 0x8223DE54;
		  /* 8223DE54h */ case    2:  		/* bc 4, CR6_EQ, -48 */
		/* 8223DE54h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8223DE24;  }
		/* 8223DE54h case    2:*/		return 0x8223DE58;
		  /* 8223DE58h */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8223DE58h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8223DE58h case    3:*/		return 0x8223DE5C;
		  /* 8223DE5Ch */ case    4:  		/* cmplw CR6, R11, R28 */
		/* 8223DE5Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8223DE5Ch case    4:*/		return 0x8223DE60;
		  /* 8223DE60h */ case    5:  		/* bc 4, CR6_EQ, -76 */
		/* 8223DE60h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8223DE14;  }
		/* 8223DE60h case    5:*/		return 0x8223DE64;
	}
	return 0x8223DE64;
} // Block from 8223DE4Ch-8223DE64h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223DE64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DE64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DE64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DE64);
		  /* 8223DE64h */ case    0:  		/* cmplw CR6, R28, R19 */
		/* 8223DE64h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R19);
		/* 8223DE64h case    0:*/		return 0x8223DE68;
		  /* 8223DE68h */ case    1:  		/* bc 12, CR6_EQ, 132 */
		/* 8223DE68h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223DEEC;  }
		/* 8223DE68h case    1:*/		return 0x8223DE6C;
		  /* 8223DE6Ch */ case    2:  		/* stb R27, <#[R30]> */
		/* 8223DE6Ch case    2:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000000) );
		/* 8223DE6Ch case    2:*/		return 0x8223DE70;
		  /* 8223DE70h */ case    3:  		/* mr R3, R31 */
		/* 8223DE70h case    3:*/		regs.R3 = regs.R31;
		/* 8223DE70h case    3:*/		return 0x8223DE74;
		  /* 8223DE74h */ case    4:  		/* stb R27, <#[R30 + 1]> */
		/* 8223DE74h case    4:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000001) );
		/* 8223DE74h case    4:*/		return 0x8223DE78;
		  /* 8223DE78h */ case    5:  		/* stb R27, <#[R30 + 2]> */
		/* 8223DE78h case    5:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000002) );
		/* 8223DE78h case    5:*/		return 0x8223DE7C;
		  /* 8223DE7Ch */ case    6:  		/* stb R27, <#[R30 + 3]> */
		/* 8223DE7Ch case    6:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000003) );
		/* 8223DE7Ch case    6:*/		return 0x8223DE80;
		  /* 8223DE80h */ case    7:  		/* lwz R11, <#[R30]> */
		/* 8223DE80h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223DE80h case    7:*/		return 0x8223DE84;
		  /* 8223DE84h */ case    8:  		/* ori R11, R11, 39 */
		/* 8223DE84h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x27);
		/* 8223DE84h case    8:*/		return 0x8223DE88;
		  /* 8223DE88h */ case    9:  		/* stw R11, <#[R30]> */
		/* 8223DE88h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223DE88h case    9:*/		return 0x8223DE8C;
		  /* 8223DE8Ch */ case   10:  		/* addi R30, R30, 4 */
		/* 8223DE8Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8223DE8Ch case   10:*/		return 0x8223DE90;
		  /* 8223DE90h */ case   11:  		/* stw R19, <#[R31 + 20]> */
		/* 8223DE90h case   11:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DE90h case   11:*/		return 0x8223DE94;
		  /* 8223DE94h */ case   12:  		/* bl -4228 */
		/* 8223DE94h case   12:*/		regs.LR = 0x8223DE98; return 0x8223CE10;
		/* 8223DE94h case   12:*/		return 0x8223DE98;
		  /* 8223DE98h */ case   13:  		/* b 72 */
		/* 8223DE98h case   13:*/		return 0x8223DEE0;
		/* 8223DE98h case   13:*/		return 0x8223DE9C;
		  /* 8223DE9Ch */ case   14:  		/* mr R3, R31 */
		/* 8223DE9Ch case   14:*/		regs.R3 = regs.R31;
		/* 8223DE9Ch case   14:*/		return 0x8223DEA0;
		  /* 8223DEA0h */ case   15:  		/* lwz R29, <#[R31 + 20]> */
		/* 8223DEA0h case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DEA0h case   15:*/		return 0x8223DEA4;
		  /* 8223DEA4h */ case   16:  		/* bl -4244 */
		/* 8223DEA4h case   16:*/		regs.LR = 0x8223DEA8; return 0x8223CE10;
		/* 8223DEA4h case   16:*/		return 0x8223DEA8;
		  /* 8223DEA8h */ case   17:  		/* b 44 */
		/* 8223DEA8h case   17:*/		return 0x8223DED4;
		/* 8223DEA8h case   17:*/		return 0x8223DEAC;
		  /* 8223DEACh */ case   18:  		/* lbz R11, <#[R29]> */
		/* 8223DEACh case   18:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8223DEACh case   18:*/		return 0x8223DEB0;
		  /* 8223DEB0h */ case   19:  		/* stb R11, <#[R30]> */
		/* 8223DEB0h case   19:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223DEB0h case   19:*/		return 0x8223DEB4;
		  /* 8223DEB4h */ case   20:  		/* lbz R11, <#[R29 + 1]> */
		/* 8223DEB4h case   20:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000001) );
		/* 8223DEB4h case   20:*/		return 0x8223DEB8;
		  /* 8223DEB8h */ case   21:  		/* stb R11, <#[R30 + 1]> */
		/* 8223DEB8h case   21:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000001) );
		/* 8223DEB8h case   21:*/		return 0x8223DEBC;
		  /* 8223DEBCh */ case   22:  		/* lbz R11, <#[R29 + 2]> */
		/* 8223DEBCh case   22:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000002) );
		/* 8223DEBCh case   22:*/		return 0x8223DEC0;
		  /* 8223DEC0h */ case   23:  		/* stb R11, <#[R30 + 2]> */
		/* 8223DEC0h case   23:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 8223DEC0h case   23:*/		return 0x8223DEC4;
		  /* 8223DEC4h */ case   24:  		/* lbz R11, <#[R29 + 3]> */
		/* 8223DEC4h case   24:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000003) );
		/* 8223DEC4h case   24:*/		return 0x8223DEC8;
		  /* 8223DEC8h */ case   25:  		/* addi R29, R29, 4 */
		/* 8223DEC8h case   25:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8223DEC8h case   25:*/		return 0x8223DECC;
		  /* 8223DECCh */ case   26:  		/* stb R11, <#[R30 + 3]> */
		/* 8223DECCh case   26:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000003) );
		/* 8223DECCh case   26:*/		return 0x8223DED0;
		  /* 8223DED0h */ case   27:  		/* addi R30, R30, 4 */
		/* 8223DED0h case   27:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8223DED0h case   27:*/		return 0x8223DED4;
	}
	return 0x8223DED4;
} // Block from 8223DE64h-8223DED4h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8223DED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DED4);
		  /* 8223DED4h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223DED4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DED4h case    0:*/		return 0x8223DED8;
		  /* 8223DED8h */ case    1:  		/* cmplw CR6, R29, R11 */
		/* 8223DED8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8223DED8h case    1:*/		return 0x8223DEDC;
		  /* 8223DEDCh */ case    2:  		/* bc 4, CR6_EQ, -48 */
		/* 8223DEDCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8223DEAC;  }
		/* 8223DEDCh case    2:*/		return 0x8223DEE0;
	}
	return 0x8223DEE0;
} // Block from 8223DED4h-8223DEE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223DEE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DEE0);
		  /* 8223DEE0h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223DEE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DEE0h case    0:*/		return 0x8223DEE4;
		  /* 8223DEE4h */ case    1:  		/* cmplw CR6, R11, R28 */
		/* 8223DEE4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8223DEE4h case    1:*/		return 0x8223DEE8;
		  /* 8223DEE8h */ case    2:  		/* bc 4, CR6_EQ, -76 */
		/* 8223DEE8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8223DE9C;  }
		/* 8223DEE8h case    2:*/		return 0x8223DEEC;
	}
	return 0x8223DEEC;
} // Block from 8223DEE0h-8223DEECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223DEECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DEEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DEEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DEEC);
		  /* 8223DEECh */ case    0:  		/* stb R27, <#[R30]> */
		/* 8223DEECh case    0:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000000) );
		/* 8223DEECh case    0:*/		return 0x8223DEF0;
		  /* 8223DEF0h */ case    1:  		/* stb R27, <#[R30 + 1]> */
		/* 8223DEF0h case    1:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000001) );
		/* 8223DEF0h case    1:*/		return 0x8223DEF4;
		  /* 8223DEF4h */ case    2:  		/* stb R27, <#[R30 + 2]> */
		/* 8223DEF4h case    2:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000002) );
		/* 8223DEF4h case    2:*/		return 0x8223DEF8;
		  /* 8223DEF8h */ case    3:  		/* stb R27, <#[R30 + 3]> */
		/* 8223DEF8h case    3:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000003) );
		/* 8223DEF8h case    3:*/		return 0x8223DEFC;
		  /* 8223DEFCh */ case    4:  		/* lwz R11, <#[R30]> */
		/* 8223DEFCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223DEFCh case    4:*/		return 0x8223DF00;
		  /* 8223DF00h */ case    5:  		/* ori R11, R11, 41 */
		/* 8223DF00h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x29);
		/* 8223DF00h case    5:*/		return 0x8223DF04;
		  /* 8223DF04h */ case    6:  		/* stw R11, <#[R30]> */
		/* 8223DF04h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223DF04h case    6:*/		return 0x8223DF08;
		  /* 8223DF08h */ case    7:  		/* stb R27, <#[R30 + 4]> */
		/* 8223DF08h case    7:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000004) );
		/* 8223DF08h case    7:*/		return 0x8223DF0C;
		  /* 8223DF0Ch */ case    8:  		/* stb R27, <#[R30 + 5]> */
		/* 8223DF0Ch case    8:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000005) );
		/* 8223DF0Ch case    8:*/		return 0x8223DF10;
		  /* 8223DF10h */ case    9:  		/* stb R27, <#[R30 + 6]> */
		/* 8223DF10h case    9:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000006) );
		/* 8223DF10h case    9:*/		return 0x8223DF14;
		  /* 8223DF14h */ case   10:  		/* stb R27, <#[R30 + 7]> */
		/* 8223DF14h case   10:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R30 + 0x00000007) );
		/* 8223DF14h case   10:*/		return 0x8223DF18;
		  /* 8223DF18h */ case   11:  		/* lwz R11, <#[R30 + 4]> */
		/* 8223DF18h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8223DF18h case   11:*/		return 0x8223DF1C;
		  /* 8223DF1Ch */ case   12:  		/* ori R11, R11, 83 */
		/* 8223DF1Ch case   12:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x53);
		/* 8223DF1Ch case   12:*/		return 0x8223DF20;
		  /* 8223DF20h */ case   13:  		/* stw R11, <#[R30 + 4]> */
		/* 8223DF20h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8223DF20h case   13:*/		return 0x8223DF24;
		  /* 8223DF24h */ case   14:  		/* stw R28, <#[R31 + 20]> */
		/* 8223DF24h case   14:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DF24h case   14:*/		return 0x8223DF28;
		  /* 8223DF28h */ case   15:  		/* lwz R3, <#[R31 + 60]> */
		/* 8223DF28h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000003C) );
		/* 8223DF28h case   15:*/		return 0x8223DF2C;
		  /* 8223DF2Ch */ case   16:  		/* lwz R4, <#[R3 + 4]> */
		/* 8223DF2Ch case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8223DF2Ch case   16:*/		return 0x8223DF30;
		  /* 8223DF30h */ case   17:  		/* bl 88976 */
		/* 8223DF30h case   17:*/		regs.LR = 0x8223DF34; return 0x82253AC0;
		/* 8223DF30h case   17:*/		return 0x8223DF34;
		  /* 8223DF34h */ case   18:  		/* stw R28, <#[R3]> */
		/* 8223DF34h case   18:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8223DF34h case   18:*/		return 0x8223DF38;
		  /* 8223DF38h */ case   19:  		/* mr R4, R26 */
		/* 8223DF38h case   19:*/		regs.R4 = regs.R26;
		/* 8223DF38h case   19:*/		return 0x8223DF3C;
		  /* 8223DF3Ch */ case   20:  		/* stw R24, <#[R31 + 20]> */
		/* 8223DF3Ch case   20:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DF3Ch case   20:*/		return 0x8223DF40;
		  /* 8223DF40h */ case   21:  		/* lwz R11, <#[R31]> */
		/* 8223DF40h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223DF40h case   21:*/		return 0x8223DF44;
		  /* 8223DF44h */ case   22:  		/* lwz R3, <#[R11 + 1456]> */
		/* 8223DF44h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223DF44h case   22:*/		return 0x8223DF48;
	}
	return 0x8223DF48;
} // Block from 8223DEECh-8223DF48h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8223DF48h
// Function '??1ILInstIterator@XGRAPHICS@@QAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DF48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DF48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DF48);
		  /* 8223DF48h */ case    0:  		/* bl -137480 */
		/* 8223DF48h case    0:*/		regs.LR = 0x8223DF4C; return 0x8221C640;
		/* 8223DF48h case    0:*/		return 0x8223DF4C;
		  /* 8223DF4Ch */ case    1:  		/* b 860 */
		/* 8223DF4Ch case    1:*/		return 0x8223E2A8;
		/* 8223DF4Ch case    1:*/		return 0x8223DF50;
	}
	return 0x8223DF50;
} // Block from 8223DF48h-8223DF50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223DF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DF50);
		  /* 8223DF50h */ case    0:  		/* mr R3, R29 */
		/* 8223DF50h case    0:*/		regs.R3 = regs.R29;
		/* 8223DF50h case    0:*/		return 0x8223DF54;
		  /* 8223DF54h */ case    1:  		/* bl -4604 */
		/* 8223DF54h case    1:*/		regs.LR = 0x8223DF58; return 0x8223CD58;
		/* 8223DF54h case    1:*/		return 0x8223DF58;
		  /* 8223DF58h */ case    2:  		/* addi R11, R29, 8 */
		/* 8223DF58h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x8);
		/* 8223DF58h case    2:*/		return 0x8223DF5C;
		  /* 8223DF5Ch */ case    3:  		/* mr R28, R3 */
		/* 8223DF5Ch case    3:*/		regs.R28 = regs.R3;
		/* 8223DF5Ch case    3:*/		return 0x8223DF60;
		  /* 8223DF60h */ case    4:  		/* stw R11, <#[R31 + 20]> */
		/* 8223DF60h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DF60h case    4:*/		return 0x8223DF64;
		  /* 8223DF64h */ case    5:  		/* mr R3, R11 */
		/* 8223DF64h case    5:*/		regs.R3 = regs.R11;
		/* 8223DF64h case    5:*/		return 0x8223DF68;
		  /* 8223DF68h */ case    6:  		/* b 184 */
		/* 8223DF68h case    6:*/		return 0x8223E020;
		/* 8223DF68h case    6:*/		return 0x8223DF6C;
		  /* 8223DF6Ch */ case    7:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223DF6Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DF6Ch case    7:*/		return 0x8223DF70;
		  /* 8223DF70h */ case    8:  		/* li R10, 100 */
		/* 8223DF70h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x64);
		/* 8223DF70h case    8:*/		return 0x8223DF74;
		  /* 8223DF74h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 8223DF74h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8223DF74h case    9:*/		return 0x8223DF78;
		  /* 8223DF78h */ case   10:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 8223DF78h case   10:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 8223DF78h case   10:*/		return 0x8223DF7C;
		  /* 8223DF7Ch */ case   11:  		/* subfc R8, R10, R9 */
		/* 8223DF7Ch case   11:*/		cpu::op::subfc<0>(regs,&regs.R8,regs.R10,regs.R9);
		/* 8223DF7Ch case   11:*/		return 0x8223DF80;
		  /* 8223DF80h */ case   12:  		/* eqv R10, R10, R9 */
		/* 8223DF80h case   12:*/		cpu::op::eqv<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8223DF80h case   12:*/		return 0x8223DF84;
		  /* 8223DF84h */ case   13:  		/* rlwinm R10, R10, 1, 31, 31 */
		/* 8223DF84h case   13:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R10);
		/* 8223DF84h case   13:*/		return 0x8223DF88;
		  /* 8223DF88h */ case   14:  		/* addze R10, R10 */
		/* 8223DF88h case   14:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8223DF88h case   14:*/		return 0x8223DF8C;
		  /* 8223DF8Ch */ case   15:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 8223DF8Ch case   15:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8223DF8Ch case   15:*/		return 0x8223DF90;
		  /* 8223DF90h */ case   16:  		/* subfic R10, R10, 0 */
		/* 8223DF90h case   16:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 8223DF90h case   16:*/		return 0x8223DF94;
		  /* 8223DF94h */ case   17:  		/* subfe R10, R10, R10 */
		/* 8223DF94h case   17:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8223DF94h case   17:*/		return 0x8223DF98;
		  /* 8223DF98h */ case   18:  		/* and R10, R10, R9 */
		/* 8223DF98h case   18:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8223DF98h case   18:*/		return 0x8223DF9C;
		  /* 8223DF9Ch */ case   19:  		/* cmpwi CR6, R10, 132 */
		/* 8223DF9Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000084);
		/* 8223DF9Ch case   19:*/		return 0x8223DFA0;
		  /* 8223DFA0h */ case   20:  		/* bc 4, CR6_EQ, 36 */
		/* 8223DFA0h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8223DFC4;  }
		/* 8223DFA0h case   20:*/		return 0x8223DFA4;
		  /* 8223DFA4h */ case   21:  		/* addi R11, R11, 4 */
		/* 8223DFA4h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223DFA4h case   21:*/		return 0x8223DFA8;
		  /* 8223DFA8h */ case   22:  		/* stw R11, <#[R31 + 20]> */
		/* 8223DFA8h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DFA8h case   22:*/		return 0x8223DFAC;
		  /* 8223DFACh */ case   23:  		/* addi R10, R11, 4 */
		/* 8223DFACh case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8223DFACh case   23:*/		return 0x8223DFB0;
		  /* 8223DFB0h */ case   24:  		/* lwz R11, <#[R11]> */
		/* 8223DFB0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8223DFB0h case   24:*/		return 0x8223DFB4;
		  /* 8223DFB4h */ case   25:  		/* stw R10, <#[R31 + 20]> */
		/* 8223DFB4h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DFB4h case   25:*/		return 0x8223DFB8;
		  /* 8223DFB8h */ case   26:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8223DFB8h case   26:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8223DFB8h case   26:*/		return 0x8223DFBC;
		  /* 8223DFBCh */ case   27:  		/* cmpw CR6, R11, R28 */
		/* 8223DFBCh case   27:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R28);
		/* 8223DFBCh case   27:*/		return 0x8223DFC0;
	}
	return 0x8223DFC0;
} // Block from 8223DF50h-8223DFC0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8223DFC0h
// Function '?Step@ILInstIterator@XGRAPHICS@@QAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DFC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DFC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DFC0);
		  /* 8223DFC0h */ case    0:  		/* bc 12, CR6_EQ, 744 */
		/* 8223DFC0h case    0:*/		if ( regs.CR[6].eq ) { return 0x8223E2A8;  }
		/* 8223DFC0h case    0:*/		return 0x8223DFC4;
	}
	return 0x8223DFC4;
} // Block from 8223DFC0h-8223DFC4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223DFC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DFC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DFC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DFC4);
		  /* 8223DFC4h */ case    0:  		/* lwz R3, <#[R31 + 20]> */
		/* 8223DFC4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DFC4h case    0:*/		return 0x8223DFC8;
		  /* 8223DFC8h */ case    1:  		/* bl -3680 */
		/* 8223DFC8h case    1:*/		regs.LR = 0x8223DFCC; return 0x8223D168;
		/* 8223DFC8h case    1:*/		return 0x8223DFCC;
		  /* 8223DFCCh */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223DFCCh case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223DFCCh case    2:*/		return 0x8223DFD0;
		  /* 8223DFD0h */ case    3:  		/* bc 12, CR0_EQ, 68 */
		/* 8223DFD0h case    3:*/		if ( regs.CR[0].eq ) { return 0x8223E014;  }
		/* 8223DFD0h case    3:*/		return 0x8223DFD4;
		  /* 8223DFD4h */ case    4:  		/* mr R30, R27 */
		/* 8223DFD4h case    4:*/		regs.R30 = regs.R27;
		/* 8223DFD4h case    4:*/		return 0x8223DFD8;
		  /* 8223DFD8h */ case    5:  		/* mr R3, R31 */
		/* 8223DFD8h case    5:*/		regs.R3 = regs.R31;
		/* 8223DFD8h case    5:*/		return 0x8223DFDC;
		  /* 8223DFDCh */ case    6:  		/* bl -4556 */
		/* 8223DFDCh case    6:*/		regs.LR = 0x8223DFE0; return 0x8223CE10;
		/* 8223DFDCh case    6:*/		return 0x8223DFE0;
		  /* 8223DFE0h */ case    7:  		/* lwz R29, <#[R31 + 20]> */
		/* 8223DFE0h case    7:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000014) );
		/* 8223DFE0h case    7:*/		return 0x8223DFE4;
		  /* 8223DFE4h */ case    8:  		/* mr R3, R29 */
		/* 8223DFE4h case    8:*/		regs.R3 = regs.R29;
		/* 8223DFE4h case    8:*/		return 0x8223DFE8;
		  /* 8223DFE8h */ case    9:  		/* bl -3712 */
		/* 8223DFE8h case    9:*/		regs.LR = 0x8223DFEC; return 0x8223D168;
		/* 8223DFE8h case    9:*/		return 0x8223DFEC;
		  /* 8223DFECh */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223DFECh case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223DFECh case   10:*/		return 0x8223DFF0;
		  /* 8223DFF0h */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 8223DFF0h case   11:*/		if ( regs.CR[0].eq ) { return 0x8223DFF8;  }
		/* 8223DFF0h case   11:*/		return 0x8223DFF4;
		  /* 8223DFF4h */ case   12:  		/* addi R30, R30, -1 */
		/* 8223DFF4h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8223DFF4h case   12:*/		return 0x8223DFF8;
	}
	return 0x8223DFF8;
} // Block from 8223DFC4h-8223DFF8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223DFF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223DFF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223DFF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223DFF8);
		  /* 8223DFF8h */ case    0:  		/* mr R3, R29 */
		/* 8223DFF8h case    0:*/		regs.R3 = regs.R29;
		/* 8223DFF8h case    0:*/		return 0x8223DFFC;
		  /* 8223DFFCh */ case    1:  		/* bl -3844 */
		/* 8223DFFCh case    1:*/		regs.LR = 0x8223E000; return 0x8223D0F8;
		/* 8223DFFCh case    1:*/		return 0x8223E000;
		  /* 8223E000h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223E000h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223E000h case    2:*/		return 0x8223E004;
		  /* 8223E004h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 8223E004h case    3:*/		if ( regs.CR[0].eq ) { return 0x8223E00C;  }
		/* 8223E004h case    3:*/		return 0x8223E008;
		  /* 8223E008h */ case    4:  		/* addi R30, R30, 1 */
		/* 8223E008h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8223E008h case    4:*/		return 0x8223E00C;
	}
	return 0x8223E00C;
} // Block from 8223DFF8h-8223E00Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223E00Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E00C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E00C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E00C);
		  /* 8223E00Ch */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 8223E00Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8223E00Ch case    0:*/		return 0x8223E010;
		  /* 8223E010h */ case    1:  		/* bc 4, CR6_GT, -56 */
		/* 8223E010h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8223DFD8;  }
		/* 8223E010h case    1:*/		return 0x8223E014;
	}
	return 0x8223E014;
} // Block from 8223E00Ch-8223E014h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E014);
		  /* 8223E014h */ case    0:  		/* mr R3, R31 */
		/* 8223E014h case    0:*/		regs.R3 = regs.R31;
		/* 8223E014h case    0:*/		return 0x8223E018;
		  /* 8223E018h */ case    1:  		/* bl -4616 */
		/* 8223E018h case    1:*/		regs.LR = 0x8223E01C; return 0x8223CE10;
		/* 8223E018h case    1:*/		return 0x8223E01C;
		  /* 8223E01Ch */ case    2:  		/* lwz R3, <#[R31 + 20]> */
		/* 8223E01Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8223E01Ch case    2:*/		return 0x8223E020;
	}
	return 0x8223E020;
} // Block from 8223E014h-8223E020h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223E020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E020);
		  /* 8223E020h */ case    0:  		/* bl -3880 */
		/* 8223E020h case    0:*/		regs.LR = 0x8223E024; return 0x8223D0F8;
		/* 8223E020h case    0:*/		return 0x8223E024;
		  /* 8223E024h */ case    1:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223E024h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223E024h case    1:*/		return 0x8223E028;
		  /* 8223E028h */ case    2:  		/* bc 12, CR0_EQ, -188 */
		/* 8223E028h case    2:*/		if ( regs.CR[0].eq ) { return 0x8223DF6C;  }
		/* 8223E028h case    2:*/		return 0x8223E02C;
		  /* 8223E02Ch */ case    3:  		/* b 636 */
		/* 8223E02Ch case    3:*/		return 0x8223E2A8;
		/* 8223E02Ch case    3:*/		return 0x8223E030;
	}
	return 0x8223E030;
} // Block from 8223E020h-8223E030h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223E030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E030);
		  /* 8223E030h */ case    0:  		/* lwz R11, <#[R31 + 60]> */
		/* 8223E030h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 8223E030h case    0:*/		return 0x8223E034;
		  /* 8223E034h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8223E034h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223E034h case    1:*/		return 0x8223E038;
		  /* 8223E038h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 8223E038h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8223E054;  }
		/* 8223E038h case    2:*/		return 0x8223E03C;
		  /* 8223E03Ch */ case    3:  		/* mr R6, R20 */
		/* 8223E03Ch case    3:*/		regs.R6 = regs.R20;
		/* 8223E03Ch case    3:*/		return 0x8223E040;
		  /* 8223E040h */ case    4:  		/* mr R5, R16 */
		/* 8223E040h case    4:*/		regs.R5 = regs.R16;
		/* 8223E040h case    4:*/		return 0x8223E044;
		  /* 8223E044h */ case    5:  		/* mr R4, R21 */
		/* 8223E044h case    5:*/		regs.R4 = regs.R21;
		/* 8223E044h case    5:*/		return 0x8223E048;
		  /* 8223E048h */ case    6:  		/* li R7, 794 */
		/* 8223E048h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x31A);
		/* 8223E048h case    6:*/		return 0x8223E04C;
		  /* 8223E04Ch */ case    7:  		/* li R3, 0 */
		/* 8223E04Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223E04Ch case    7:*/		return 0x8223E050;
		  /* 8223E050h */ case    8:  		/* bl -943176 */
		/* 8223E050h case    8:*/		regs.LR = 0x8223E054; return 0x82157C08;
		/* 8223E050h case    8:*/		return 0x8223E054;
	}
	return 0x8223E054;
} // Block from 8223E030h-8223E054h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223E054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E054);
		  /* 8223E054h */ case    0:  		/* lwz R3, <#[R31 + 60]> */
		/* 8223E054h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000003C) );
		/* 8223E054h case    0:*/		return 0x8223E058;
		  /* 8223E058h */ case    1:  		/* bl 118008 */
		/* 8223E058h case    1:*/		regs.LR = 0x8223E05C; return 0x8225AD50;
		/* 8223E058h case    1:*/		return 0x8223E05C;
		  /* 8223E05Ch */ case    2:  		/* stw R3, <#[R31 + 20]> */
		/* 8223E05Ch case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8223E05Ch case    2:*/		return 0x8223E060;
		  /* 8223E060h */ case    3:  		/* li R11, 100 */
		/* 8223E060h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223E060h case    3:*/		return 0x8223E064;
		  /* 8223E064h */ case    4:  		/* addi R10, R3, 4 */
		/* 8223E064h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x4);
		/* 8223E064h case    4:*/		return 0x8223E068;
		  /* 8223E068h */ case    5:  		/* lwz R9, <#[R3]> */
		/* 8223E068h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 8223E068h case    5:*/		return 0x8223E06C;
		  /* 8223E06Ch */ case    6:  		/* stw R10, <#[R31 + 20]> */
		/* 8223E06Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8223E06Ch case    6:*/		return 0x8223E070;
		  /* 8223E070h */ case    7:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 8223E070h case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 8223E070h case    7:*/		return 0x8223E074;
		  /* 8223E074h */ case    8:  		/* subfc R8, R11, R9 */
		/* 8223E074h case    8:*/		cpu::op::subfc<0>(regs,&regs.R8,regs.R11,regs.R9);
		/* 8223E074h case    8:*/		return 0x8223E078;
		  /* 8223E078h */ case    9:  		/* eqv R11, R11, R9 */
		/* 8223E078h case    9:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8223E078h case    9:*/		return 0x8223E07C;
		  /* 8223E07Ch */ case   10:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223E07Ch case   10:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223E07Ch case   10:*/		return 0x8223E080;
		  /* 8223E080h */ case   11:  		/* addze R11, R11 */
		/* 8223E080h case   11:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223E080h case   11:*/		return 0x8223E084;
		  /* 8223E084h */ case   12:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223E084h case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223E084h case   12:*/		return 0x8223E088;
		  /* 8223E088h */ case   13:  		/* subfic R11, R11, 0 */
		/* 8223E088h case   13:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223E088h case   13:*/		return 0x8223E08C;
		  /* 8223E08Ch */ case   14:  		/* subfe R11, R11, R11 */
		/* 8223E08Ch case   14:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223E08Ch case   14:*/		return 0x8223E090;
		  /* 8223E090h */ case   15:  		/* and R11, R11, R9 */
		/* 8223E090h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8223E090h case   15:*/		return 0x8223E094;
		  /* 8223E094h */ case   16:  		/* cmpwi CR6, R11, 8 */
		/* 8223E094h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8223E094h case   16:*/		return 0x8223E098;
		  /* 8223E098h */ case   17:  		/* bc 4, CR6_EQ, 56 */
		/* 8223E098h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8223E0D0;  }
		/* 8223E098h case   17:*/		return 0x8223E09C;
		  /* 8223E09Ch */ case   18:  		/* lwz R11, <#[R31 + 56]> */
		/* 8223E09Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8223E09Ch case   18:*/		return 0x8223E0A0;
		  /* 8223E0A0h */ case   19:  		/* cmpwi CR6, R11, 0 */
		/* 8223E0A0h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223E0A0h case   19:*/		return 0x8223E0A4;
		  /* 8223E0A4h */ case   20:  		/* bc 12, CR6_GT, 28 */
		/* 8223E0A4h case   20:*/		if ( regs.CR[6].gt ) { return 0x8223E0C0;  }
		/* 8223E0A4h case   20:*/		return 0x8223E0A8;
		  /* 8223E0A8h */ case   21:  		/* mr R6, R20 */
		/* 8223E0A8h case   21:*/		regs.R6 = regs.R20;
		/* 8223E0A8h case   21:*/		return 0x8223E0AC;
		  /* 8223E0ACh */ case   22:  		/* mr R5, R17 */
		/* 8223E0ACh case   22:*/		regs.R5 = regs.R17;
		/* 8223E0ACh case   22:*/		return 0x8223E0B0;
		  /* 8223E0B0h */ case   23:  		/* mr R4, R21 */
		/* 8223E0B0h case   23:*/		regs.R4 = regs.R21;
		/* 8223E0B0h case   23:*/		return 0x8223E0B4;
		  /* 8223E0B4h */ case   24:  		/* li R7, 801 */
		/* 8223E0B4h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x321);
		/* 8223E0B4h case   24:*/		return 0x8223E0B8;
		  /* 8223E0B8h */ case   25:  		/* li R3, 0 */
		/* 8223E0B8h case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223E0B8h case   25:*/		return 0x8223E0BC;
		  /* 8223E0BCh */ case   26:  		/* bl -943284 */
		/* 8223E0BCh case   26:*/		regs.LR = 0x8223E0C0; return 0x82157C08;
		/* 8223E0BCh case   26:*/		return 0x8223E0C0;
	}
	return 0x8223E0C0;
} // Block from 8223E054h-8223E0C0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8223E0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E0C0);
		  /* 8223E0C0h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 8223E0C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8223E0C0h case    0:*/		return 0x8223E0C4;
		  /* 8223E0C4h */ case    1:  		/* addi R11, R11, -1 */
		/* 8223E0C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8223E0C4h case    1:*/		return 0x8223E0C8;
		  /* 8223E0C8h */ case    2:  		/* stw R11, <#[R31 + 56]> */
		/* 8223E0C8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8223E0C8h case    2:*/		return 0x8223E0CC;
		  /* 8223E0CCh */ case    3:  		/* b 48 */
		/* 8223E0CCh case    3:*/		return 0x8223E0FC;
		/* 8223E0CCh case    3:*/		return 0x8223E0D0;
	}
	return 0x8223E0D0;
} // Block from 8223E0C0h-8223E0D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223E0D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E0D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E0D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E0D0);
		  /* 8223E0D0h */ case    0:  		/* cmpwi CR6, R11, 9 */
		/* 8223E0D0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8223E0D0h case    0:*/		return 0x8223E0D4;
		  /* 8223E0D4h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8223E0D4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223E0E4;  }
		/* 8223E0D4h case    1:*/		return 0x8223E0D8;
		  /* 8223E0D8h */ case    2:  		/* addi R11, R10, 4 */
		/* 8223E0D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 8223E0D8h case    2:*/		return 0x8223E0DC;
		  /* 8223E0DCh */ case    3:  		/* stw R11, <#[R31 + 20]> */
		/* 8223E0DCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223E0DCh case    3:*/		return 0x8223E0E0;
		  /* 8223E0E0h */ case    4:  		/* b 28 */
		/* 8223E0E0h case    4:*/		return 0x8223E0FC;
		/* 8223E0E0h case    4:*/		return 0x8223E0E4;
	}
	return 0x8223E0E4;
} // Block from 8223E0D0h-8223E0E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223E0E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E0E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E0E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E0E4);
		  /* 8223E0E4h */ case    0:  		/* mr R6, R20 */
		/* 8223E0E4h case    0:*/		regs.R6 = regs.R20;
		/* 8223E0E4h case    0:*/		return 0x8223E0E8;
		  /* 8223E0E8h */ case    1:  		/* mr R5, R18 */
		/* 8223E0E8h case    1:*/		regs.R5 = regs.R18;
		/* 8223E0E8h case    1:*/		return 0x8223E0EC;
		  /* 8223E0ECh */ case    2:  		/* mr R4, R21 */
		/* 8223E0ECh case    2:*/		regs.R4 = regs.R21;
		/* 8223E0ECh case    2:*/		return 0x8223E0F0;
		  /* 8223E0F0h */ case    3:  		/* li R7, 806 */
		/* 8223E0F0h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x326);
		/* 8223E0F0h case    3:*/		return 0x8223E0F4;
		  /* 8223E0F4h */ case    4:  		/* li R3, 0 */
		/* 8223E0F4h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223E0F4h case    4:*/		return 0x8223E0F8;
		  /* 8223E0F8h */ case    5:  		/* bl -943344 */
		/* 8223E0F8h case    5:*/		regs.LR = 0x8223E0FC; return 0x82157C08;
		/* 8223E0F8h case    5:*/		return 0x8223E0FC;
	}
	return 0x8223E0FC;
} // Block from 8223E0E4h-8223E0FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223E0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E0FC);
		  /* 8223E0FCh */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223E0FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223E0FCh case    0:*/		return 0x8223E100;
		  /* 8223E100h */ case    1:  		/* addi R11, R11, 4 */
		/* 8223E100h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223E100h case    1:*/		return 0x8223E104;
		  /* 8223E104h */ case    2:  		/* b 472 */
		/* 8223E104h case    2:*/		return 0x8223E2DC;
		/* 8223E104h case    2:*/		return 0x8223E108;
	}
	return 0x8223E108;
} // Block from 8223E0FCh-8223E108h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223E108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E108);
		  /* 8223E108h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223E108h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E108h case    0:*/		return 0x8223E10C;
		  /* 8223E10Ch */ case    1:  		/* lwz R9, <#[R29 + 4]> */
		/* 8223E10Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000004) );
		/* 8223E10Ch case    1:*/		return 0x8223E110;
		  /* 8223E110h */ case    2:  		/* extsh R9, R9 */
		/* 8223E110h case    2:*/		cpu::op::extsh<0>(regs,&regs.R9,regs.R9);
		/* 8223E110h case    2:*/		return 0x8223E114;
		  /* 8223E114h */ case    3:  		/* lwz R10, <#[R11 + 8]> */
		/* 8223E114h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8223E114h case    3:*/		return 0x8223E118;
		  /* 8223E118h */ case    4:  		/* mr R11, R10 */
		/* 8223E118h case    4:*/		regs.R11 = regs.R10;
		/* 8223E118h case    4:*/		return 0x8223E11C;
		  /* 8223E11Ch */ case    5:  		/* lwz R8, <#[R11]> */
		/* 8223E11Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8223E11Ch case    5:*/		return 0x8223E120;
		  /* 8223E120h */ case    6:  		/* cmpw CR6, R8, R9 */
		/* 8223E120h case    6:*/		cpu::op::cmpw<6>(regs,regs.R8,regs.R9);
		/* 8223E120h case    6:*/		return 0x8223E124;
		  /* 8223E124h */ case    7:  		/* bc 12, CR6_EQ, 272 */
		/* 8223E124h case    7:*/		if ( regs.CR[6].eq ) { return 0x8223E234;  }
		/* 8223E124h case    7:*/		return 0x8223E128;
		  /* 8223E128h */ case    8:  		/* lwz R8, <#[R31 + 16]> */
		/* 8223E128h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 8223E128h case    8:*/		return 0x8223E12C;
		  /* 8223E12Ch */ case    9:  		/* cmplw CR6, R11, R8 */
		/* 8223E12Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8223E12Ch case    9:*/		return 0x8223E130;
		  /* 8223E130h */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 8223E130h case   10:*/		if ( regs.CR[6].eq ) { return 0x8223E140;  }
		/* 8223E130h case   10:*/		return 0x8223E134;
		  /* 8223E134h */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 8223E134h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8223E134h case   11:*/		return 0x8223E138;
		  /* 8223E138h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8223E138h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223E138h case   12:*/		return 0x8223E13C;
		  /* 8223E13Ch */ case   13:  		/* bc 4, CR6_EQ, -32 */
		/* 8223E13Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x8223E11C;  }
		/* 8223E13Ch case   13:*/		return 0x8223E140;
	}
	return 0x8223E140;
} // Block from 8223E108h-8223E140h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223E140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E140);
		  /* 8223E140h */ case    0:  		/* mr R11, R22 */
		/* 8223E140h case    0:*/		regs.R11 = regs.R22;
		/* 8223E140h case    0:*/		return 0x8223E144;
		  /* 8223E144h */ case    1:  		/* addi R8, R11, -1 */
		/* 8223E144h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 8223E144h case    1:*/		return 0x8223E148;
		  /* 8223E148h */ case    2:  		/* mr R11, R10 */
		/* 8223E148h case    2:*/		regs.R11 = regs.R10;
		/* 8223E148h case    2:*/		return 0x8223E14C;
		  /* 8223E14Ch */ case    3:  		/* cntlzw R10, R8 */
		/* 8223E14Ch case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R8);
		/* 8223E14Ch case    3:*/		return 0x8223E150;
		  /* 8223E150h */ case    4:  		/* rlwinm R30, R10, 27, 31, 31 */
		/* 8223E150h case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R30,regs.R10);
		/* 8223E150h case    4:*/		return 0x8223E154;
		  /* 8223E154h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 8223E154h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8223E154h case    5:*/		return 0x8223E158;
		  /* 8223E158h */ case    6:  		/* cmpw CR6, R10, R9 */
		/* 8223E158h case    6:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R9);
		/* 8223E158h case    6:*/		return 0x8223E15C;
		  /* 8223E15Ch */ case    7:  		/* bc 12, CR6_EQ, 224 */
		/* 8223E15Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8223E23C;  }
		/* 8223E15Ch case    7:*/		return 0x8223E160;
		  /* 8223E160h */ case    8:  		/* lwz R10, <#[R31 + 16]> */
		/* 8223E160h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8223E160h case    8:*/		return 0x8223E164;
		  /* 8223E164h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 8223E164h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8223E164h case    9:*/		return 0x8223E168;
		  /* 8223E168h */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 8223E168h case   10:*/		if ( regs.CR[6].eq ) { return 0x8223E178;  }
		/* 8223E168h case   10:*/		return 0x8223E16C;
		  /* 8223E16Ch */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 8223E16Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8223E16Ch case   11:*/		return 0x8223E170;
		  /* 8223E170h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8223E170h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223E170h case   12:*/		return 0x8223E174;
		  /* 8223E174h */ case   13:  		/* bc 4, CR6_EQ, -32 */
		/* 8223E174h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8223E154;  }
		/* 8223E174h case   13:*/		return 0x8223E178;
	}
	return 0x8223E178;
} // Block from 8223E140h-8223E178h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223E178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E178);
		  /* 8223E178h */ case    0:  		/* mr R11, R22 */
		/* 8223E178h case    0:*/		regs.R11 = regs.R22;
		/* 8223E178h case    0:*/		return 0x8223E17C;
		  /* 8223E17Ch */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8223E17Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8223E17Ch case    1:*/		return 0x8223E180;
		  /* 8223E180h */ case    2:  		/* bc 12, CR6_EQ, 276 */
		/* 8223E180h case    2:*/		if ( regs.CR[6].eq ) { return 0x8223E294;  }
		/* 8223E180h case    2:*/		return 0x8223E184;
		  /* 8223E184h */ case    3:  		/* mr R3, R31 */
		/* 8223E184h case    3:*/		regs.R3 = regs.R31;
		/* 8223E184h case    3:*/		return 0x8223E188;
		  /* 8223E188h */ case    4:  		/* bl -4984 */
		/* 8223E188h case    4:*/		regs.LR = 0x8223E18C; return 0x8223CE10;
		/* 8223E188h case    4:*/		return 0x8223E18C;
		  /* 8223E18Ch */ case    5:  		/* lwz R3, <#[R31 + 68]> */
		/* 8223E18Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000044) );
		/* 8223E18Ch case    5:*/		return 0x8223E190;
		  /* 8223E190h */ case    6:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 8223E190h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 8223E190h case    6:*/		return 0x8223E194;
		  /* 8223E194h */ case    7:  		/* lwz R4, <#[R3 + 4]> */
		/* 8223E194h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8223E194h case    7:*/		return 0x8223E198;
		  /* 8223E198h */ case    8:  		/* bc 4, CR0_EQ, 240 */
		/* 8223E198h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8223E288;  }
		/* 8223E198h case    8:*/		return 0x8223E19C;
		  /* 8223E19Ch */ case    9:  		/* bl 88356 */
		/* 8223E19Ch case    9:*/		regs.LR = 0x8223E1A0; return 0x82253AC0;
		/* 8223E19Ch case    9:*/		return 0x8223E1A0;
		  /* 8223E1A0h */ case   10:  		/* li R11, 2 */
		/* 8223E1A0h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8223E1A0h case   10:*/		return 0x8223E1A4;
		  /* 8223E1A4h */ case   11:  		/* mr R29, R27 */
		/* 8223E1A4h case   11:*/		regs.R29 = regs.R27;
		/* 8223E1A4h case   11:*/		return 0x8223E1A8;
		  /* 8223E1A8h */ case   12:  		/* stw R11, <#[R3]> */
		/* 8223E1A8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223E1A8h case   12:*/		return 0x8223E1AC;
		  /* 8223E1ACh */ case   13:  		/* cmpwi CR6, R29, 0 */
		/* 8223E1ACh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8223E1ACh case   13:*/		return 0x8223E1B0;
		  /* 8223E1B0h */ case   14:  		/* bc 4, CR6_EQ, 104 */
		/* 8223E1B0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8223E218;  }
		/* 8223E1B0h case   14:*/		return 0x8223E1B4;
		  /* 8223E1B4h */ case   15:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223E1B4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223E1B4h case   15:*/		return 0x8223E1B8;
		  /* 8223E1B8h */ case   16:  		/* li R10, 100 */
		/* 8223E1B8h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x64);
		/* 8223E1B8h case   16:*/		return 0x8223E1BC;
		  /* 8223E1BCh */ case   17:  		/* lwz R11, <#[R11]> */
		/* 8223E1BCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8223E1BCh case   17:*/		return 0x8223E1C0;
		  /* 8223E1C0h */ case   18:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8223E1C0h case   18:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8223E1C0h case   18:*/		return 0x8223E1C4;
		  /* 8223E1C4h */ case   19:  		/* subfc R9, R10, R11 */
		/* 8223E1C4h case   19:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 8223E1C4h case   19:*/		return 0x8223E1C8;
		  /* 8223E1C8h */ case   20:  		/* eqv R10, R10, R11 */
		/* 8223E1C8h case   20:*/		cpu::op::eqv<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8223E1C8h case   20:*/		return 0x8223E1CC;
		  /* 8223E1CCh */ case   21:  		/* rlwinm R10, R10, 1, 31, 31 */
		/* 8223E1CCh case   21:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R10);
		/* 8223E1CCh case   21:*/		return 0x8223E1D0;
		  /* 8223E1D0h */ case   22:  		/* addze R10, R10 */
		/* 8223E1D0h case   22:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8223E1D0h case   22:*/		return 0x8223E1D4;
		  /* 8223E1D4h */ case   23:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 8223E1D4h case   23:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8223E1D4h case   23:*/		return 0x8223E1D8;
		  /* 8223E1D8h */ case   24:  		/* subfic R10, R10, 0 */
		/* 8223E1D8h case   24:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 8223E1D8h case   24:*/		return 0x8223E1DC;
		  /* 8223E1DCh */ case   25:  		/* subfe R10, R10, R10 */
		/* 8223E1DCh case   25:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8223E1DCh case   25:*/		return 0x8223E1E0;
		  /* 8223E1E0h */ case   26:  		/* and R10, R10, R11 */
		/* 8223E1E0h case   26:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8223E1E0h case   26:*/		return 0x8223E1E4;
		  /* 8223E1E4h */ case   27:  		/* cmpwi CR6, R10, 39 */
		/* 8223E1E4h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000027);
		/* 8223E1E4h case   27:*/		return 0x8223E1E8;
		  /* 8223E1E8h */ case   28:  		/* bc 12, CR6_EQ, 192 */
		/* 8223E1E8h case   28:*/		if ( regs.CR[6].eq ) { return 0x8223E2A8;  }
		/* 8223E1E8h case   28:*/		return 0x8223E1EC;
		  /* 8223E1ECh */ case   29:  		/* li R10, 100 */
		/* 8223E1ECh case   29:*/		cpu::op::li<0>(regs,&regs.R10,0x64);
		/* 8223E1ECh case   29:*/		return 0x8223E1F0;
		  /* 8223E1F0h */ case   30:  		/* subfc R9, R10, R11 */
		/* 8223E1F0h case   30:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 8223E1F0h case   30:*/		return 0x8223E1F4;
		  /* 8223E1F4h */ case   31:  		/* eqv R10, R10, R11 */
		/* 8223E1F4h case   31:*/		cpu::op::eqv<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8223E1F4h case   31:*/		return 0x8223E1F8;
		  /* 8223E1F8h */ case   32:  		/* rlwinm R10, R10, 1, 31, 31 */
		/* 8223E1F8h case   32:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R10);
		/* 8223E1F8h case   32:*/		return 0x8223E1FC;
		  /* 8223E1FCh */ case   33:  		/* addze R10, R10 */
		/* 8223E1FCh case   33:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8223E1FCh case   33:*/		return 0x8223E200;
		  /* 8223E200h */ case   34:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 8223E200h case   34:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8223E200h case   34:*/		return 0x8223E204;
		  /* 8223E204h */ case   35:  		/* subfic R10, R10, 0 */
		/* 8223E204h case   35:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 8223E204h case   35:*/		return 0x8223E208;
		  /* 8223E208h */ case   36:  		/* subfe R10, R10, R10 */
		/* 8223E208h case   36:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8223E208h case   36:*/		return 0x8223E20C;
		  /* 8223E20Ch */ case   37:  		/* and R11, R10, R11 */
		/* 8223E20Ch case   37:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223E20Ch case   37:*/		return 0x8223E210;
		  /* 8223E210h */ case   38:  		/* cmpwi CR6, R11, 41 */
		/* 8223E210h case   38:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000029);
		/* 8223E210h case   38:*/		return 0x8223E214;
		  /* 8223E214h */ case   39:  		/* bc 12, CR6_EQ, 148 */
		/* 8223E214h case   39:*/		if ( regs.CR[6].eq ) { return 0x8223E2A8;  }
		/* 8223E214h case   39:*/		return 0x8223E218;
	}
	return 0x8223E218;
} // Block from 8223E178h-8223E218h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8223E218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E218);
		  /* 8223E218h */ case    0:  		/* lwz R30, <#[R31 + 20]> */
		/* 8223E218h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 8223E218h case    0:*/		return 0x8223E21C;
		  /* 8223E21Ch */ case    1:  		/* mr R3, R30 */
		/* 8223E21Ch case    1:*/		regs.R3 = regs.R30;
		/* 8223E21Ch case    1:*/		return 0x8223E220;
		  /* 8223E220h */ case    2:  		/* bl -5216 */
		/* 8223E220h case    2:*/		regs.LR = 0x8223E224; return 0x8223CDC0;
		/* 8223E220h case    2:*/		return 0x8223E224;
		  /* 8223E224h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223E224h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223E224h case    3:*/		return 0x8223E228;
		  /* 8223E228h */ case    4:  		/* bc 12, CR0_EQ, 28 */
		/* 8223E228h case    4:*/		if ( regs.CR[0].eq ) { return 0x8223E244;  }
		/* 8223E228h case    4:*/		return 0x8223E22C;
		  /* 8223E22Ch */ case    5:  		/* addi R29, R29, 1 */
		/* 8223E22Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223E22Ch case    5:*/		return 0x8223E230;
		  /* 8223E230h */ case    6:  		/* b 76 */
		/* 8223E230h case    6:*/		return 0x8223E27C;
		/* 8223E230h case    6:*/		return 0x8223E234;
	}
	return 0x8223E234;
} // Block from 8223E218h-8223E234h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223E234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E234);
		  /* 8223E234h */ case    0:  		/* lbz R11, <#[R11 + 4]> */
		/* 8223E234h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8223E234h case    0:*/		return 0x8223E238;
		  /* 8223E238h */ case    1:  		/* b -244 */
		/* 8223E238h case    1:*/		return 0x8223E144;
		/* 8223E238h case    1:*/		return 0x8223E23C;
	}
	return 0x8223E23C;
} // Block from 8223E234h-8223E23Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E23Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E23C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E23C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E23C);
		  /* 8223E23Ch */ case    0:  		/* lbz R11, <#[R11 + 4]> */
		/* 8223E23Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8223E23Ch case    0:*/		return 0x8223E240;
		  /* 8223E240h */ case    1:  		/* b -196 */
		/* 8223E240h case    1:*/		return 0x8223E17C;
		/* 8223E240h case    1:*/		return 0x8223E244;
	}
	return 0x8223E244;
} // Block from 8223E23Ch-8223E244h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E244);
		  /* 8223E244h */ case    0:  		/* lwz R10, <#[R30]> */
		/* 8223E244h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8223E244h case    0:*/		return 0x8223E248;
		  /* 8223E248h */ case    1:  		/* li R11, 100 */
		/* 8223E248h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8223E248h case    1:*/		return 0x8223E24C;
		  /* 8223E24Ch */ case    2:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8223E24Ch case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8223E24Ch case    2:*/		return 0x8223E250;
		  /* 8223E250h */ case    3:  		/* subfc R9, R11, R10 */
		/* 8223E250h case    3:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223E250h case    3:*/		return 0x8223E254;
		  /* 8223E254h */ case    4:  		/* eqv R11, R11, R10 */
		/* 8223E254h case    4:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223E254h case    4:*/		return 0x8223E258;
		  /* 8223E258h */ case    5:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8223E258h case    5:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8223E258h case    5:*/		return 0x8223E25C;
		  /* 8223E25Ch */ case    6:  		/* addze R11, R11 */
		/* 8223E25Ch case    6:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8223E25Ch case    6:*/		return 0x8223E260;
		  /* 8223E260h */ case    7:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8223E260h case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223E260h case    7:*/		return 0x8223E264;
		  /* 8223E264h */ case    8:  		/* subfic R11, R11, 0 */
		/* 8223E264h case    8:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8223E264h case    8:*/		return 0x8223E268;
		  /* 8223E268h */ case    9:  		/* subfe R11, R11, R11 */
		/* 8223E268h case    9:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223E268h case    9:*/		return 0x8223E26C;
		  /* 8223E26Ch */ case   10:  		/* and R11, R11, R10 */
		/* 8223E26Ch case   10:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8223E26Ch case   10:*/		return 0x8223E270;
		  /* 8223E270h */ case   11:  		/* cmpwi CR6, R11, 41 */
		/* 8223E270h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000029);
		/* 8223E270h case   11:*/		return 0x8223E274;
		  /* 8223E274h */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 8223E274h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8223E27C;  }
		/* 8223E274h case   12:*/		return 0x8223E278;
		  /* 8223E278h */ case   13:  		/* addi R29, R29, -1 */
		/* 8223E278h case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8223E278h case   13:*/		return 0x8223E27C;
	}
	return 0x8223E27C;
} // Block from 8223E244h-8223E27Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223E27Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E27C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E27C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E27C);
		  /* 8223E27Ch */ case    0:  		/* mr R3, R31 */
		/* 8223E27Ch case    0:*/		regs.R3 = regs.R31;
		/* 8223E27Ch case    0:*/		return 0x8223E280;
		  /* 8223E280h */ case    1:  		/* bl -5232 */
		/* 8223E280h case    1:*/		regs.LR = 0x8223E284; return 0x8223CE10;
		/* 8223E280h case    1:*/		return 0x8223E284;
		  /* 8223E284h */ case    2:  		/* b -216 */
		/* 8223E284h case    2:*/		return 0x8223E1AC;
		/* 8223E284h case    2:*/		return 0x8223E288;
	}
	return 0x8223E288;
} // Block from 8223E27Ch-8223E288h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223E288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E288);
		  /* 8223E288h */ case    0:  		/* bl 88120 */
		/* 8223E288h case    0:*/		regs.LR = 0x8223E28C; return 0x82253AC0;
		/* 8223E288h case    0:*/		return 0x8223E28C;
		  /* 8223E28Ch */ case    1:  		/* stw R15, <#[R3]> */
		/* 8223E28Ch case    1:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R3 + 0x00000000) );
		/* 8223E28Ch case    1:*/		return 0x8223E290;
		  /* 8223E290h */ case    2:  		/* b 24 */
		/* 8223E290h case    2:*/		return 0x8223E2A8;
		/* 8223E290h case    2:*/		return 0x8223E294;
	}
	return 0x8223E294;
} // Block from 8223E288h-8223E294h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223E294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E294);
		  /* 8223E294h */ case    0:  		/* lwz R3, <#[R31 + 68]> */
		/* 8223E294h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000044) );
		/* 8223E294h case    0:*/		return 0x8223E298;
		  /* 8223E298h */ case    1:  		/* lwz R4, <#[R3 + 4]> */
		/* 8223E298h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8223E298h case    1:*/		return 0x8223E29C;
		  /* 8223E29Ch */ case    2:  		/* bl 88100 */
		/* 8223E29Ch case    2:*/		regs.LR = 0x8223E2A0; return 0x82253AC0;
		/* 8223E29Ch case    2:*/		return 0x8223E2A0;
		  /* 8223E2A0h */ case    3:  		/* stw R27, <#[R3]> */
		/* 8223E2A0h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000000) );
		/* 8223E2A0h case    3:*/		return 0x8223E2A4;
	}
	return 0x8223E2A4;
} // Block from 8223E294h-8223E2A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223E2A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E2A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E2A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E2A4);
		  /* 8223E2A4h */ case    0:  		/* mr R23, R15 */
		/* 8223E2A4h case    0:*/		regs.R23 = regs.R15;
		/* 8223E2A4h case    0:*/		return 0x8223E2A8;
	}
	return 0x8223E2A8;
} // Block from 8223E2A4h-8223E2A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223E2A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E2A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E2A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E2A8);
		  /* 8223E2A8h */ case    0:  		/* lwz R29, <#[R31 + 20]> */
		/* 8223E2A8h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000014) );
		/* 8223E2A8h case    0:*/		return 0x8223E2AC;
		  /* 8223E2ACh */ case    1:  		/* addi R10, R29, 4 */
		/* 8223E2ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4);
		/* 8223E2ACh case    1:*/		return 0x8223E2B0;
		  /* 8223E2B0h */ case    2:  		/* lhz R11, <#[R29 + 2]> */
		/* 8223E2B0h case    2:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000002) );
		/* 8223E2B0h case    2:*/		return 0x8223E2B4;
		  /* 8223E2B4h */ case    3:  		/* cmplwi CR6, R11, 15 */
		/* 8223E2B4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 8223E2B4h case    3:*/		return 0x8223E2B8;
		  /* 8223E2B8h */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 8223E2B8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8223E2C0;  }
		/* 8223E2B8h case    4:*/		return 0x8223E2BC;
		  /* 8223E2BCh */ case    5:  		/* mr R10, R27 */
		/* 8223E2BCh case    5:*/		regs.R10 = regs.R27;
		/* 8223E2BCh case    5:*/		return 0x8223E2C0;
	}
	return 0x8223E2C0;
} // Block from 8223E2A8h-8223E2C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223E2C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E2C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E2C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E2C0);
		  /* 8223E2C0h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8223E2C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8223E2C0h case    0:*/		return 0x8223E2C4;
		  /* 8223E2C4h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8223E2C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223E2E4;  }
		/* 8223E2C4h case    1:*/		return 0x8223E2C8;
		  /* 8223E2C8h */ case    2:  		/* addi R11, R29, 8 */
		/* 8223E2C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x8);
		/* 8223E2C8h case    2:*/		return 0x8223E2CC;
		  /* 8223E2CCh */ case    3:  		/* stw R11, <#[R31 + 20]> */
		/* 8223E2CCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223E2CCh case    3:*/		return 0x8223E2D0;
		  /* 8223E2D0h */ case    4:  		/* lwz R10, <#[R10]> */
		/* 8223E2D0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8223E2D0h case    4:*/		return 0x8223E2D4;
		  /* 8223E2D4h */ case    5:  		/* rlwinm R10, R10, 2, 14, 29 */
		/* 8223E2D4h case    5:*/		cpu::op::rlwinm<0,2,14,29>(regs,&regs.R10,regs.R10);
		/* 8223E2D4h case    5:*/		return 0x8223E2D8;
		  /* 8223E2D8h */ case    6:  		/* add R11, R10, R11 */
		/* 8223E2D8h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223E2D8h case    6:*/		return 0x8223E2DC;
	}
	return 0x8223E2DC;
} // Block from 8223E2C0h-8223E2DCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223E2DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E2DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E2DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E2DC);
		  /* 8223E2DCh */ case    0:  		/* stw R11, <#[R31 + 20]> */
		/* 8223E2DCh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223E2DCh case    0:*/		return 0x8223E2E0;
		  /* 8223E2E0h */ case    1:  		/* b -56 */
		/* 8223E2E0h case    1:*/		return 0x8223E2A8;
		/* 8223E2E0h case    1:*/		return 0x8223E2E4;
	}
	return 0x8223E2E4;
} // Block from 8223E2DCh-8223E2E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E2E4);
		  /* 8223E2E4h */ case    0:  		/* rlwinm. R11, R23, 0, 24, 31 */
		/* 8223E2E4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R23);
		/* 8223E2E4h case    0:*/		return 0x8223E2E8;
		  /* 8223E2E8h */ case    1:  		/* bc 12, CR0_EQ, -3480 */
		/* 8223E2E8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8223D550;  }
		/* 8223E2E8h case    1:*/		return 0x8223E2EC;
	}
	return 0x8223E2EC;
} // Block from 8223E2E4h-8223E2ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E2EC);
		  /* 8223E2ECh */ case    0:  		/* lwz R11, <#[R29]> */
		/* 8223E2ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8223E2ECh case    0:*/		return 0x8223E2F0;
		  /* 8223E2F0h */ case    1:  		/* li R10, 100 */
		/* 8223E2F0h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x64);
		/* 8223E2F0h case    1:*/		return 0x8223E2F4;
		  /* 8223E2F4h */ case    2:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8223E2F4h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8223E2F4h case    2:*/		return 0x8223E2F8;
		  /* 8223E2F8h */ case    3:  		/* subfc R9, R10, R11 */
		/* 8223E2F8h case    3:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 8223E2F8h case    3:*/		return 0x8223E2FC;
		  /* 8223E2FCh */ case    4:  		/* eqv R10, R10, R11 */
		/* 8223E2FCh case    4:*/		cpu::op::eqv<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8223E2FCh case    4:*/		return 0x8223E300;
		  /* 8223E300h */ case    5:  		/* rlwinm R10, R10, 1, 31, 31 */
		/* 8223E300h case    5:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R10);
		/* 8223E300h case    5:*/		return 0x8223E304;
		  /* 8223E304h */ case    6:  		/* addze R10, R10 */
		/* 8223E304h case    6:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8223E304h case    6:*/		return 0x8223E308;
		  /* 8223E308h */ case    7:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 8223E308h case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8223E308h case    7:*/		return 0x8223E30C;
		  /* 8223E30Ch */ case    8:  		/* subfic R10, R10, 0 */
		/* 8223E30Ch case    8:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 8223E30Ch case    8:*/		return 0x8223E310;
		  /* 8223E310h */ case    9:  		/* subfe R10, R10, R10 */
		/* 8223E310h case    9:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8223E310h case    9:*/		return 0x8223E314;
		  /* 8223E314h */ case   10:  		/* and R10, R10, R11 */
		/* 8223E314h case   10:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8223E314h case   10:*/		return 0x8223E318;
		  /* 8223E318h */ case   11:  		/* cmpwi CR6, R10, 40 */
		/* 8223E318h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000028);
		/* 8223E318h case   11:*/		return 0x8223E31C;
		  /* 8223E31Ch */ case   12:  		/* bc 12, CR6_EQ, 136 */
		/* 8223E31Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x8223E3A4;  }
		/* 8223E31Ch case   12:*/		return 0x8223E320;
		  /* 8223E320h */ case   13:  		/* li R10, 100 */
		/* 8223E320h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x64);
		/* 8223E320h case   13:*/		return 0x8223E324;
		  /* 8223E324h */ case   14:  		/* subfc R9, R10, R11 */
		/* 8223E324h case   14:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 8223E324h case   14:*/		return 0x8223E328;
		  /* 8223E328h */ case   15:  		/* eqv R10, R10, R11 */
		/* 8223E328h case   15:*/		cpu::op::eqv<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8223E328h case   15:*/		return 0x8223E32C;
		  /* 8223E32Ch */ case   16:  		/* rlwinm R10, R10, 1, 31, 31 */
		/* 8223E32Ch case   16:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R10);
		/* 8223E32Ch case   16:*/		return 0x8223E330;
		  /* 8223E330h */ case   17:  		/* addze R10, R10 */
		/* 8223E330h case   17:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8223E330h case   17:*/		return 0x8223E334;
		  /* 8223E334h */ case   18:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 8223E334h case   18:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8223E334h case   18:*/		return 0x8223E338;
		  /* 8223E338h */ case   19:  		/* subfic R10, R10, 0 */
		/* 8223E338h case   19:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 8223E338h case   19:*/		return 0x8223E33C;
		  /* 8223E33Ch */ case   20:  		/* subfe R10, R10, R10 */
		/* 8223E33Ch case   20:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8223E33Ch case   20:*/		return 0x8223E340;
		  /* 8223E340h */ case   21:  		/* and R11, R10, R11 */
		/* 8223E340h case   21:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223E340h case   21:*/		return 0x8223E344;
		  /* 8223E344h */ case   22:  		/* cmpwi CR6, R11, 43 */
		/* 8223E344h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000002B);
		/* 8223E344h case   22:*/		return 0x8223E348;
		  /* 8223E348h */ case   23:  		/* bc 12, CR6_EQ, 92 */
		/* 8223E348h case   23:*/		if ( regs.CR[6].eq ) { return 0x8223E3A4;  }
		/* 8223E348h case   23:*/		return 0x8223E34C;
		  /* 8223E34Ch */ case   24:  		/* b -3700 */
		/* 8223E34Ch case   24:*/		return 0x8223D4D8;
		/* 8223E34Ch case   24:*/		return 0x8223E350;
	}
	return 0x8223E350;
} // Block from 8223E2ECh-8223E350h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8223E350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E350);
		  /* 8223E350h */ case    0:  		/* li R10, 27 */
		/* 8223E350h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1B);
		/* 8223E350h case    0:*/		return 0x8223E354;
		  /* 8223E354h */ case    1:  		/* li R4, 1 */
		/* 8223E354h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223E354h case    1:*/		return 0x8223E358;
		  /* 8223E358h */ case    2:  		/* stw R10, <#[R11 + 1364]> */
		/* 8223E358h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000554) );
		/* 8223E358h case    2:*/		return 0x8223E35C;
		  /* 8223E35Ch */ case    3:  		/* addi R3, R11, 16 */
		/* 8223E35Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x10);
		/* 8223E35Ch case    3:*/		return 0x8223E360;
		  /* 8223E360h */ case    4:  		/* bl 174928 */
		/* 8223E360h case    4:*/		regs.LR = 0x8223E364; return 0x82268EB0;
		/* 8223E360h case    4:*/		return 0x8223E364;
	}
	return 0x8223E364;
} // Block from 8223E350h-8223E364h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223E364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E364);
		  /* 8223E364h */ case    0:  		/* li R10, 27 */
		/* 8223E364h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1B);
		/* 8223E364h case    0:*/		return 0x8223E368;
		  /* 8223E368h */ case    1:  		/* li R4, 1 */
		/* 8223E368h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223E368h case    1:*/		return 0x8223E36C;
		  /* 8223E36Ch */ case    2:  		/* stw R10, <#[R11 + 1364]> */
		/* 8223E36Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000554) );
		/* 8223E36Ch case    2:*/		return 0x8223E370;
		  /* 8223E370h */ case    3:  		/* addi R3, R11, 16 */
		/* 8223E370h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x10);
		/* 8223E370h case    3:*/		return 0x8223E374;
		  /* 8223E374h */ case    4:  		/* bl 174908 */
		/* 8223E374h case    4:*/		regs.LR = 0x8223E378; return 0x82268EB0;
		/* 8223E374h case    4:*/		return 0x8223E378;
	}
	return 0x8223E378;
} // Block from 8223E364h-8223E378h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223E378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E378);
		  /* 8223E378h */ case    0:  		/* li R10, 27 */
		/* 8223E378h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1B);
		/* 8223E378h case    0:*/		return 0x8223E37C;
		  /* 8223E37Ch */ case    1:  		/* li R4, 1 */
		/* 8223E37Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223E37Ch case    1:*/		return 0x8223E380;
		  /* 8223E380h */ case    2:  		/* stw R10, <#[R11 + 1364]> */
		/* 8223E380h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000554) );
		/* 8223E380h case    2:*/		return 0x8223E384;
		  /* 8223E384h */ case    3:  		/* addi R3, R11, 16 */
		/* 8223E384h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x10);
		/* 8223E384h case    3:*/		return 0x8223E388;
		  /* 8223E388h */ case    4:  		/* bl 174888 */
		/* 8223E388h case    4:*/		regs.LR = 0x8223E38C; return 0x82268EB0;
		/* 8223E388h case    4:*/		return 0x8223E38C;
		  /* 8223E38Ch */ case    5:  		/* lwz R3, <#[R31 + 64]> */
		/* 8223E38Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000040) );
		/* 8223E38Ch case    5:*/		return 0x8223E390;
		  /* 8223E390h */ case    6:  		/* bl 117184 */
		/* 8223E390h case    6:*/		regs.LR = 0x8223E394; return 0x8225AD50;
		/* 8223E390h case    6:*/		return 0x8223E394;
		  /* 8223E394h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 8223E394h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223E394h case    7:*/		return 0x8223E398;
		  /* 8223E398h */ case    8:  		/* mr R4, R3 */
		/* 8223E398h case    8:*/		regs.R4 = regs.R3;
		/* 8223E398h case    8:*/		return 0x8223E39C;
		  /* 8223E39Ch */ case    9:  		/* lwz R3, <#[R11 + 1456]> */
		/* 8223E39Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223E39Ch case    9:*/		return 0x8223E3A0;
		  /* 8223E3A0h */ case   10:  		/* bl -138592 */
		/* 8223E3A0h case   10:*/		regs.LR = 0x8223E3A4; return 0x8221C640;
		/* 8223E3A0h case   10:*/		return 0x8223E3A4;
	}
	return 0x8223E3A4;
} // Block from 8223E378h-8223E3A4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8223E3A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E3A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E3A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E3A4);
		  /* 8223E3A4h */ case    0:  		/* lwz R11, <#[R31 + 64]> */
		/* 8223E3A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000040) );
		/* 8223E3A4h case    0:*/		return 0x8223E3A8;
		  /* 8223E3A8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8223E3A8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8223E3A8h case    1:*/		return 0x8223E3AC;
		  /* 8223E3ACh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8223E3ACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223E3ACh case    2:*/		return 0x8223E3B0;
		  /* 8223E3B0h */ case    3:  		/* bc 4, CR6_EQ, -36 */
		/* 8223E3B0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8223E38C;  }
		/* 8223E3B0h case    3:*/		return 0x8223E3B4;
		  /* 8223E3B4h */ case    4:  		/* li R3, 0 */
		/* 8223E3B4h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223E3B4h case    4:*/		return 0x8223E3B8;
	}
	return 0x8223E3B8;
} // Block from 8223E3A4h-8223E3B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223E3B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E3B8);
		  /* 8223E3B8h */ case    0:  		/* addi R1, R1, 240 */
		/* 8223E3B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8223E3B8h case    0:*/		return 0x8223E3BC;
		  /* 8223E3BCh */ case    1:  		/* b -1757516 */
		/* 8223E3BCh case    1:*/		return 0x82091270;
		/* 8223E3BCh case    1:*/		return 0x8223E3C0;
	}
	return 0x8223E3C0;
} // Block from 8223E3B8h-8223E3C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E3C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E3C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E3C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E3C0);
		  /* 8223E3C0h */ case    0:  		/* mfspr R12, LR */
		/* 8223E3C0h case    0:*/		regs.R12 = regs.LR;
		/* 8223E3C0h case    0:*/		return 0x8223E3C4;
		  /* 8223E3C4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223E3C4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223E3C4h case    1:*/		return 0x8223E3C8;
		  /* 8223E3C8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223E3C8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223E3C8h case    2:*/		return 0x8223E3CC;
		  /* 8223E3CCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223E3CCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223E3CCh case    3:*/		return 0x8223E3D0;
		  /* 8223E3D0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223E3D0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223E3D0h case    4:*/		return 0x8223E3D4;
		  /* 8223E3D4h */ case    5:  		/* lwz R10, <#[R4 + 76]> */
		/* 8223E3D4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000004C) );
		/* 8223E3D4h case    5:*/		return 0x8223E3D8;
		  /* 8223E3D8h */ case    6:  		/* mr R31, R3 */
		/* 8223E3D8h case    6:*/		regs.R31 = regs.R3;
		/* 8223E3D8h case    6:*/		return 0x8223E3DC;
		  /* 8223E3DCh */ case    7:  		/* lwz R11, <#[R3 + 2160]> */
		/* 8223E3DCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000870) );
		/* 8223E3DCh case    7:*/		return 0x8223E3E0;
		  /* 8223E3E0h */ case    8:  		/* mr R30, R4 */
		/* 8223E3E0h case    8:*/		regs.R30 = regs.R4;
		/* 8223E3E0h case    8:*/		return 0x8223E3E4;
		  /* 8223E3E4h */ case    9:  		/* lwz R9, <#[R3 + 2164]> */
		/* 8223E3E4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000874) );
		/* 8223E3E4h case    9:*/		return 0x8223E3E8;
		  /* 8223E3E8h */ case   10:  		/* add R11, R10, R11 */
		/* 8223E3E8h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223E3E8h case   10:*/		return 0x8223E3EC;
		  /* 8223E3ECh */ case   11:  		/* lwz R8, <#[R3 + 2168]> */
		/* 8223E3ECh case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000878) );
		/* 8223E3ECh case   11:*/		return 0x8223E3F0;
		  /* 8223E3F0h */ case   12:  		/* lwz R7, <#[R3 + 2172]> */
		/* 8223E3F0h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x0000087C) );
		/* 8223E3F0h case   12:*/		return 0x8223E3F4;
		  /* 8223E3F4h */ case   13:  		/* stw R11, <#[R3 + 2160]> */
		/* 8223E3F4h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000870) );
		/* 8223E3F4h case   13:*/		return 0x8223E3F8;
		  /* 8223E3F8h */ case   14:  		/* lwz R11, <#[R4 + 80]> */
		/* 8223E3F8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000050) );
		/* 8223E3F8h case   14:*/		return 0x8223E3FC;
		  /* 8223E3FCh */ case   15:  		/* add R11, R9, R11 */
		/* 8223E3FCh case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8223E3FCh case   15:*/		return 0x8223E400;
		  /* 8223E400h */ case   16:  		/* stw R11, <#[R3 + 2164]> */
		/* 8223E400h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000874) );
		/* 8223E400h case   16:*/		return 0x8223E404;
		  /* 8223E404h */ case   17:  		/* lwz R11, <#[R4 + 84]> */
		/* 8223E404h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000054) );
		/* 8223E404h case   17:*/		return 0x8223E408;
		  /* 8223E408h */ case   18:  		/* add R11, R11, R8 */
		/* 8223E408h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8223E408h case   18:*/		return 0x8223E40C;
		  /* 8223E40Ch */ case   19:  		/* stw R11, <#[R3 + 2168]> */
		/* 8223E40Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000878) );
		/* 8223E40Ch case   19:*/		return 0x8223E410;
		  /* 8223E410h */ case   20:  		/* lwz R11, <#[R4 + 88]> */
		/* 8223E410h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000058) );
		/* 8223E410h case   20:*/		return 0x8223E414;
		  /* 8223E414h */ case   21:  		/* add R11, R11, R7 */
		/* 8223E414h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 8223E414h case   21:*/		return 0x8223E418;
		  /* 8223E418h */ case   22:  		/* stw R11, <#[R3 + 2172]> */
		/* 8223E418h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000087C) );
		/* 8223E418h case   22:*/		return 0x8223E41C;
		  /* 8223E41Ch */ case   23:  		/* lwz R11, <#[R4 + 76]> */
		/* 8223E41Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000004C) );
		/* 8223E41Ch case   23:*/		return 0x8223E420;
		  /* 8223E420h */ case   24:  		/* cmpwi CR6, R11, 0 */
		/* 8223E420h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223E420h case   24:*/		return 0x8223E424;
		  /* 8223E424h */ case   25:  		/* bc 4, CR6_GT, 24 */
		/* 8223E424h case   25:*/		if ( !regs.CR[6].gt ) { return 0x8223E43C;  }
		/* 8223E424h case   25:*/		return 0x8223E428;
		  /* 8223E428h */ case   26:  		/* lis R11, -32252 */
		/* 8223E428h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E428h case   26:*/		return 0x8223E42C;
		  /* 8223E42Ch */ case   27:  		/* lwz R5, <#[R4 + 76]> */
		/* 8223E42Ch case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000004C) );
		/* 8223E42Ch case   27:*/		return 0x8223E430;
		  /* 8223E430h */ case   28:  		/* lwz R3, <#[R3 + 12]> */
		/* 8223E430h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223E430h case   28:*/		return 0x8223E434;
		  /* 8223E434h */ case   29:  		/* addi R4, R11, 10288 */
		/* 8223E434h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x2830);
		/* 8223E434h case   29:*/		return 0x8223E438;
		  /* 8223E438h */ case   30:  		/* bl -135288 */
		/* 8223E438h case   30:*/		regs.LR = 0x8223E43C; return 0x8221D3C0;
		/* 8223E438h case   30:*/		return 0x8223E43C;
	}
	return 0x8223E43C;
} // Block from 8223E3C0h-8223E43Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 8223E43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E43C);
		  /* 8223E43Ch */ case    0:  		/* lwz R5, <#[R30 + 80]> */
		/* 8223E43Ch case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000050) );
		/* 8223E43Ch case    0:*/		return 0x8223E440;
		  /* 8223E440h */ case    1:  		/* cmpwi CR6, R5, 0 */
		/* 8223E440h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8223E440h case    1:*/		return 0x8223E444;
		  /* 8223E444h */ case    2:  		/* bc 4, CR6_GT, 20 */
		/* 8223E444h case    2:*/		if ( !regs.CR[6].gt ) { return 0x8223E458;  }
		/* 8223E444h case    2:*/		return 0x8223E448;
		  /* 8223E448h */ case    3:  		/* lis R11, -32252 */
		/* 8223E448h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E448h case    3:*/		return 0x8223E44C;
		  /* 8223E44Ch */ case    4:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223E44Ch case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E44Ch case    4:*/		return 0x8223E450;
		  /* 8223E450h */ case    5:  		/* addi R4, R11, 10224 */
		/* 8223E450h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x27F0);
		/* 8223E450h case    5:*/		return 0x8223E454;
		  /* 8223E454h */ case    6:  		/* bl -135316 */
		/* 8223E454h case    6:*/		regs.LR = 0x8223E458; return 0x8221D3C0;
		/* 8223E454h case    6:*/		return 0x8223E458;
	}
	return 0x8223E458;
} // Block from 8223E43Ch-8223E458h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223E458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E458);
		  /* 8223E458h */ case    0:  		/* lwz R5, <#[R30 + 84]> */
		/* 8223E458h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000054) );
		/* 8223E458h case    0:*/		return 0x8223E45C;
		  /* 8223E45Ch */ case    1:  		/* cmpwi CR6, R5, 0 */
		/* 8223E45Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8223E45Ch case    1:*/		return 0x8223E460;
		  /* 8223E460h */ case    2:  		/* bc 4, CR6_GT, 20 */
		/* 8223E460h case    2:*/		if ( !regs.CR[6].gt ) { return 0x8223E474;  }
		/* 8223E460h case    2:*/		return 0x8223E464;
		  /* 8223E464h */ case    3:  		/* lis R11, -32252 */
		/* 8223E464h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E464h case    3:*/		return 0x8223E468;
		  /* 8223E468h */ case    4:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223E468h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E468h case    4:*/		return 0x8223E46C;
		  /* 8223E46Ch */ case    5:  		/* addi R4, R11, 10180 */
		/* 8223E46Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x27C4);
		/* 8223E46Ch case    5:*/		return 0x8223E470;
		  /* 8223E470h */ case    6:  		/* bl -135344 */
		/* 8223E470h case    6:*/		regs.LR = 0x8223E474; return 0x8221D3C0;
		/* 8223E470h case    6:*/		return 0x8223E474;
	}
	return 0x8223E474;
} // Block from 8223E458h-8223E474h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223E474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E474);
		  /* 8223E474h */ case    0:  		/* lwz R5, <#[R30 + 88]> */
		/* 8223E474h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000058) );
		/* 8223E474h case    0:*/		return 0x8223E478;
		  /* 8223E478h */ case    1:  		/* cmpwi CR6, R5, 0 */
		/* 8223E478h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8223E478h case    1:*/		return 0x8223E47C;
		  /* 8223E47Ch */ case    2:  		/* bc 4, CR6_GT, 20 */
		/* 8223E47Ch case    2:*/		if ( !regs.CR[6].gt ) { return 0x8223E490;  }
		/* 8223E47Ch case    2:*/		return 0x8223E480;
		  /* 8223E480h */ case    3:  		/* lis R11, -32252 */
		/* 8223E480h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E480h case    3:*/		return 0x8223E484;
		  /* 8223E484h */ case    4:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223E484h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E484h case    4:*/		return 0x8223E488;
		  /* 8223E488h */ case    5:  		/* addi R4, R11, 10144 */
		/* 8223E488h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x27A0);
		/* 8223E488h case    5:*/		return 0x8223E48C;
		  /* 8223E48Ch */ case    6:  		/* bl -135372 */
		/* 8223E48Ch case    6:*/		regs.LR = 0x8223E490; return 0x8221D3C0;
		/* 8223E48Ch case    6:*/		return 0x8223E490;
	}
	return 0x8223E490;
} // Block from 8223E474h-8223E490h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223E490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E490);
		  /* 8223E490h */ case    0:  		/* lwz R10, <#[R30 + 56]> */
		/* 8223E490h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000038) );
		/* 8223E490h case    0:*/		return 0x8223E494;
		  /* 8223E494h */ case    1:  		/* lis R9, -32252 */
		/* 8223E494h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8223E494h case    1:*/		return 0x8223E498;
		  /* 8223E498h */ case    2:  		/* lwz R11, <#[R30 + 60]> */
		/* 8223E498h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 8223E498h case    2:*/		return 0x8223E49C;
		  /* 8223E49Ch */ case    3:  		/* srawi R10, R10, 1 */
		/* 8223E49Ch case    3:*/		cpu::op::srawi<0,1>(regs,&regs.R10,regs.R10);
		/* 8223E49Ch case    3:*/		return 0x8223E4A0;
		  /* 8223E4A0h */ case    4:  		/* lwz R6, <#[R30 + 64]> */
		/* 8223E4A0h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000040) );
		/* 8223E4A0h case    4:*/		return 0x8223E4A4;
		  /* 8223E4A4h */ case    5:  		/* addi R4, R9, 10072 */
		/* 8223E4A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x2758);
		/* 8223E4A4h case    5:*/		return 0x8223E4A8;
		  /* 8223E4A8h */ case    6:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223E4A8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E4A8h case    6:*/		return 0x8223E4AC;
		  /* 8223E4ACh */ case    7:  		/* addze R5, R10 */
		/* 8223E4ACh case    7:*/		cpu::op::addze<0>(regs,&regs.R5,regs.R10);
		/* 8223E4ACh case    7:*/		return 0x8223E4B0;
		  /* 8223E4B0h */ case    8:  		/* subf R7, R6, R11 */
		/* 8223E4B0h case    8:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R6,regs.R11);
		/* 8223E4B0h case    8:*/		return 0x8223E4B4;
		  /* 8223E4B4h */ case    9:  		/* add R8, R11, R5 */
		/* 8223E4B4h case    9:*/		cpu::op::add<0>(regs,&regs.R8,regs.R11,regs.R5);
		/* 8223E4B4h case    9:*/		return 0x8223E4B8;
		  /* 8223E4B8h */ case   10:  		/* bl -135416 */
		/* 8223E4B8h case   10:*/		regs.LR = 0x8223E4BC; return 0x8221D3C0;
		/* 8223E4B8h case   10:*/		return 0x8223E4BC;
		  /* 8223E4BCh */ case   11:  		/* lis R11, -32252 */
		/* 8223E4BCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E4BCh case   11:*/		return 0x8223E4C0;
		  /* 8223E4C0h */ case   12:  		/* lwz R6, <#[R30 + 60]> */
		/* 8223E4C0h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x0000003C) );
		/* 8223E4C0h case   12:*/		return 0x8223E4C4;
		  /* 8223E4C4h */ case   13:  		/* addi R4, R11, 10016 */
		/* 8223E4C4h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x2720);
		/* 8223E4C4h case   13:*/		return 0x8223E4C8;
		  /* 8223E4C8h */ case   14:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223E4C8h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E4C8h case   14:*/		return 0x8223E4CC;
		  /* 8223E4CCh */ case   15:  		/* lwz R11, <#[R30 + 56]> */
		/* 8223E4CCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 8223E4CCh case   15:*/		return 0x8223E4D0;
		  /* 8223E4D0h */ case   16:  		/* srawi R11, R11, 1 */
		/* 8223E4D0h case   16:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R11);
		/* 8223E4D0h case   16:*/		return 0x8223E4D4;
		  /* 8223E4D4h */ case   17:  		/* addze R5, R11 */
		/* 8223E4D4h case   17:*/		cpu::op::addze<0>(regs,&regs.R5,regs.R11);
		/* 8223E4D4h case   17:*/		return 0x8223E4D8;
		  /* 8223E4D8h */ case   18:  		/* bl -135448 */
		/* 8223E4D8h case   18:*/		regs.LR = 0x8223E4DC; return 0x8221D3C0;
		/* 8223E4D8h case   18:*/		return 0x8223E4DC;
		  /* 8223E4DCh */ case   19:  		/* lbz R11, <#[R31]> */
		/* 8223E4DCh case   19:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223E4DCh case   19:*/		return 0x8223E4E0;
		  /* 8223E4E0h */ case   20:  		/* cmplwi CR0, R11, 0 */
		/* 8223E4E0h case   20:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223E4E0h case   20:*/		return 0x8223E4E4;
		  /* 8223E4E4h */ case   21:  		/* bc 4, CR0_EQ, 76 */
		/* 8223E4E4h case   21:*/		if ( !regs.CR[0].eq ) { return 0x8223E530;  }
		/* 8223E4E4h case   21:*/		return 0x8223E4E8;
		  /* 8223E4E8h */ case   22:  		/* lwz R5, <#[R30 + 72]> */
		/* 8223E4E8h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000048) );
		/* 8223E4E8h case   22:*/		return 0x8223E4EC;
		  /* 8223E4ECh */ case   23:  		/* cmpwi CR6, R5, 0 */
		/* 8223E4ECh case   23:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8223E4ECh case   23:*/		return 0x8223E4F0;
		  /* 8223E4F0h */ case   24:  		/* bc 12, CR6_EQ, 40 */
		/* 8223E4F0h case   24:*/		if ( regs.CR[6].eq ) { return 0x8223E518;  }
		/* 8223E4F0h case   24:*/		return 0x8223E4F4;
		  /* 8223E4F4h */ case   25:  		/* lwz R11, <#[R30 + 68]> */
		/* 8223E4F4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000044) );
		/* 8223E4F4h case   25:*/		return 0x8223E4F8;
		  /* 8223E4F8h */ case   26:  		/* twi 6, R5, 0 */
		/* 8223E4F8h case   26:*/		cpu::op::tw<6>(regs, 0x8223E4F8, regs.R5, 0x00000000);
		/* 8223E4F8h case   26:*/		return 0x8223E4FC;
		  /* 8223E4FCh */ case   27:  		/* mulli R10, R11, 100 */
		/* 8223E4FCh case   27:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R11,0x64);
		/* 8223E4FCh case   27:*/		return 0x8223E500;
		  /* 8223E500h */ case   28:  		/* rlwinm R11, R10, 1, 0, 31 */
		/* 8223E500h case   28:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R11,regs.R10);
		/* 8223E500h case   28:*/		return 0x8223E504;
		  /* 8223E504h */ case   29:  		/* divw R7, R10, R5 */
		/* 8223E504h case   29:*/		cpu::op::divw<0>(regs,&regs.R7,regs.R10,regs.R5);
		/* 8223E504h case   29:*/		return 0x8223E508;
		  /* 8223E508h */ case   30:  		/* addi R11, R11, -1 */
		/* 8223E508h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8223E508h case   30:*/		return 0x8223E50C;
		  /* 8223E50Ch */ case   31:  		/* andc R11, R5, R11 */
		/* 8223E50Ch case   31:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 8223E50Ch case   31:*/		return 0x8223E510;
		  /* 8223E510h */ case   32:  		/* twi 5, R11, -1 */
		/* 8223E510h case   32:*/		cpu::op::tw<5>(regs, 0x8223E510, regs.R11, 0xFFFFFFFF);
		/* 8223E510h case   32:*/		return 0x8223E514;
		  /* 8223E514h */ case   33:  		/* b 8 */
		/* 8223E514h case   33:*/		return 0x8223E51C;
		/* 8223E514h case   33:*/		return 0x8223E518;
	}
	return 0x8223E518;
} // Block from 8223E490h-8223E518h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8223E518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E518);
		  /* 8223E518h */ case    0:  		/* li R7, 0 */
		/* 8223E518h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8223E518h case    0:*/		return 0x8223E51C;
	}
	return 0x8223E51C;
} // Block from 8223E518h-8223E51Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223E51Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E51C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E51C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E51C);
		  /* 8223E51Ch */ case    0:  		/* lis R11, -32252 */
		/* 8223E51Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E51Ch case    0:*/		return 0x8223E520;
		  /* 8223E520h */ case    1:  		/* lwz R6, <#[R30 + 68]> */
		/* 8223E520h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000044) );
		/* 8223E520h case    1:*/		return 0x8223E524;
		  /* 8223E524h */ case    2:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223E524h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E524h case    2:*/		return 0x8223E528;
		  /* 8223E528h */ case    3:  		/* addi R4, R11, 9944 */
		/* 8223E528h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x26D8);
		/* 8223E528h case    3:*/		return 0x8223E52C;
		  /* 8223E52Ch */ case    4:  		/* bl -135532 */
		/* 8223E52Ch case    4:*/		regs.LR = 0x8223E530; return 0x8221D3C0;
		/* 8223E52Ch case    4:*/		return 0x8223E530;
	}
	return 0x8223E530;
} // Block from 8223E51Ch-8223E530h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223E530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E530);
		  /* 8223E530h */ case    0:  		/* addi R1, R1, 112 */
		/* 8223E530h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223E530h case    0:*/		return 0x8223E534;
		  /* 8223E534h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223E534h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223E534h case    1:*/		return 0x8223E538;
		  /* 8223E538h */ case    2:  		/* mtspr LR, R12 */
		/* 8223E538h case    2:*/		regs.LR = regs.R12;
		/* 8223E538h case    2:*/		return 0x8223E53C;
		  /* 8223E53Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8223E53Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223E53Ch case    3:*/		return 0x8223E540;
		  /* 8223E540h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8223E540h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223E540h case    4:*/		return 0x8223E544;
		  /* 8223E544h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8223E544h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223E544h case    5:*/		return 0x8223E548;
	}
	return 0x8223E548;
} // Block from 8223E530h-8223E548h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223E548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E548);
		  /* 8223E548h */ case    0:  		/* mfspr R12, LR */
		/* 8223E548h case    0:*/		regs.R12 = regs.LR;
		/* 8223E548h case    0:*/		return 0x8223E54C;
		  /* 8223E54Ch */ case    1:  		/* bl -1757944 */
		/* 8223E54Ch case    1:*/		regs.LR = 0x8223E550; return 0x82091254;
		/* 8223E54Ch case    1:*/		return 0x8223E550;
		  /* 8223E550h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8223E550h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8223E550h case    2:*/		return 0x8223E554;
		  /* 8223E554h */ case    3:  		/* lwz R27, <#[R3 + 12]> */
		/* 8223E554h case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223E554h case    3:*/		return 0x8223E558;
		  /* 8223E558h */ case    4:  		/* mr R31, R3 */
		/* 8223E558h case    4:*/		regs.R31 = regs.R3;
		/* 8223E558h case    4:*/		return 0x8223E55C;
		  /* 8223E55Ch */ case    5:  		/* mr R30, R4 */
		/* 8223E55Ch case    5:*/		regs.R30 = regs.R4;
		/* 8223E55Ch case    5:*/		return 0x8223E560;
		  /* 8223E560h */ case    6:  		/* mr R29, R5 */
		/* 8223E560h case    6:*/		regs.R29 = regs.R5;
		/* 8223E560h case    6:*/		return 0x8223E564;
		  /* 8223E564h */ case    7:  		/* li R5, 12 */
		/* 8223E564h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 8223E564h case    7:*/		return 0x8223E568;
		  /* 8223E568h */ case    8:  		/* mr R3, R27 */
		/* 8223E568h case    8:*/		regs.R3 = regs.R27;
		/* 8223E568h case    8:*/		return 0x8223E56C;
		  /* 8223E56Ch */ case    9:  		/* li R4, 1 */
		/* 8223E56Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223E56Ch case    9:*/		return 0x8223E570;
		  /* 8223E570h */ case   10:  		/* mr R28, R7 */
		/* 8223E570h case   10:*/		regs.R28 = regs.R7;
		/* 8223E570h case   10:*/		return 0x8223E574;
		  /* 8223E574h */ case   11:  		/* bl -944652 */
		/* 8223E574h case   11:*/		regs.LR = 0x8223E578; return 0x82157B68;
		/* 8223E574h case   11:*/		return 0x8223E578;
		  /* 8223E578h */ case   12:  		/* mr R3, R27 */
		/* 8223E578h case   12:*/		regs.R3 = regs.R27;
		/* 8223E578h case   12:*/		return 0x8223E57C;
		  /* 8223E57Ch */ case   13:  		/* mr R6, R28 */
		/* 8223E57Ch case   13:*/		regs.R6 = regs.R28;
		/* 8223E57Ch case   13:*/		return 0x8223E580;
		  /* 8223E580h */ case   14:  		/* li R5, 4 */
		/* 8223E580h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8223E580h case   14:*/		return 0x8223E584;
		  /* 8223E584h */ case   15:  		/* li R4, 13 */
		/* 8223E584h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 8223E584h case   15:*/		return 0x8223E588;
		  /* 8223E588h */ case   16:  		/* bl -944672 */
		/* 8223E588h case   16:*/		regs.LR = 0x8223E58C; return 0x82157B68;
		/* 8223E588h case   16:*/		return 0x8223E58C;
		  /* 8223E58Ch */ case   17:  		/* mr R3, R27 */
		/* 8223E58Ch case   17:*/		regs.R3 = regs.R27;
		/* 8223E58Ch case   17:*/		return 0x8223E590;
		  /* 8223E590h */ case   18:  		/* mr R6, R30 */
		/* 8223E590h case   18:*/		regs.R6 = regs.R30;
		/* 8223E590h case   18:*/		return 0x8223E594;
		  /* 8223E594h */ case   19:  		/* li R5, 12 */
		/* 8223E594h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 8223E594h case   19:*/		return 0x8223E598;
		  /* 8223E598h */ case   20:  		/* li R4, 17 */
		/* 8223E598h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 8223E598h case   20:*/		return 0x8223E59C;
		  /* 8223E59Ch */ case   21:  		/* bl -944692 */
		/* 8223E59Ch case   21:*/		regs.LR = 0x8223E5A0; return 0x82157B68;
		/* 8223E59Ch case   21:*/		return 0x8223E5A0;
		  /* 8223E5A0h */ case   22:  		/* mr R3, R27 */
		/* 8223E5A0h case   22:*/		regs.R3 = regs.R27;
		/* 8223E5A0h case   22:*/		return 0x8223E5A4;
		  /* 8223E5A4h */ case   23:  		/* mr R6, R29 */
		/* 8223E5A4h case   23:*/		regs.R6 = regs.R29;
		/* 8223E5A4h case   23:*/		return 0x8223E5A8;
		  /* 8223E5A8h */ case   24:  		/* li R5, 6 */
		/* 8223E5A8h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8223E5A8h case   24:*/		return 0x8223E5AC;
		  /* 8223E5ACh */ case   25:  		/* li R4, 29 */
		/* 8223E5ACh case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x1D);
		/* 8223E5ACh case   25:*/		return 0x8223E5B0;
		  /* 8223E5B0h */ case   26:  		/* bl -944712 */
		/* 8223E5B0h case   26:*/		regs.LR = 0x8223E5B4; return 0x82157B68;
		/* 8223E5B0h case   26:*/		return 0x8223E5B4;
		  /* 8223E5B4h */ case   27:  		/* mr R3, R27 */
		/* 8223E5B4h case   27:*/		regs.R3 = regs.R27;
		/* 8223E5B4h case   27:*/		return 0x8223E5B8;
		  /* 8223E5B8h */ case   28:  		/* li R6, 0 */
		/* 8223E5B8h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223E5B8h case   28:*/		return 0x8223E5BC;
		  /* 8223E5BCh */ case   29:  		/* li R5, 9 */
		/* 8223E5BCh case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 8223E5BCh case   29:*/		return 0x8223E5C0;
		  /* 8223E5C0h */ case   30:  		/* li R4, 35 */
		/* 8223E5C0h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 8223E5C0h case   30:*/		return 0x8223E5C4;
		  /* 8223E5C4h */ case   31:  		/* bl -944732 */
		/* 8223E5C4h case   31:*/		regs.LR = 0x8223E5C8; return 0x82157B68;
		/* 8223E5C4h case   31:*/		return 0x8223E5C8;
		  /* 8223E5C8h */ case   32:  		/* mr R3, R27 */
		/* 8223E5C8h case   32:*/		regs.R3 = regs.R27;
		/* 8223E5C8h case   32:*/		return 0x8223E5CC;
		  /* 8223E5CCh */ case   33:  		/* li R6, 0 */
		/* 8223E5CCh case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223E5CCh case   33:*/		return 0x8223E5D0;
		  /* 8223E5D0h */ case   34:  		/* li R5, 1 */
		/* 8223E5D0h case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223E5D0h case   34:*/		return 0x8223E5D4;
		  /* 8223E5D4h */ case   35:  		/* li R4, 44 */
		/* 8223E5D4h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 8223E5D4h case   35:*/		return 0x8223E5D8;
		  /* 8223E5D8h */ case   36:  		/* bl -944752 */
		/* 8223E5D8h case   36:*/		regs.LR = 0x8223E5DC; return 0x82157B68;
		/* 8223E5D8h case   36:*/		return 0x8223E5DC;
		  /* 8223E5DCh */ case   37:  		/* lis R11, -32252 */
		/* 8223E5DCh case   37:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E5DCh case   37:*/		return 0x8223E5E0;
		  /* 8223E5E0h */ case   38:  		/* li R5, 4 */
		/* 8223E5E0h case   38:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8223E5E0h case   38:*/		return 0x8223E5E4;
		  /* 8223E5E4h */ case   39:  		/* addi R11, R11, 25976 */
		/* 8223E5E4h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6578);
		/* 8223E5E4h case   39:*/		return 0x8223E5E8;
		  /* 8223E5E8h */ case   40:  		/* li R4, 45 */
		/* 8223E5E8h case   40:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8223E5E8h case   40:*/		return 0x8223E5EC;
		  /* 8223E5ECh */ case   41:  		/* mr R3, R27 */
		/* 8223E5ECh case   41:*/		regs.R3 = regs.R27;
		/* 8223E5ECh case   41:*/		return 0x8223E5F0;
		  /* 8223E5F0h */ case   42:  		/* lwz R6, <#[R11 + 24]> */
		/* 8223E5F0h case   42:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000018) );
		/* 8223E5F0h case   42:*/		return 0x8223E5F4;
		  /* 8223E5F4h */ case   43:  		/* bl -944780 */
		/* 8223E5F4h case   43:*/		regs.LR = 0x8223E5F8; return 0x82157B68;
		/* 8223E5F4h case   43:*/		return 0x8223E5F8;
		  /* 8223E5F8h */ case   44:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223E5F8h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E5F8h case   44:*/		return 0x8223E5FC;
		  /* 8223E5FCh */ case   45:  		/* lwz R10, <#[R31 + 56]> */
		/* 8223E5FCh case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8223E5FCh case   45:*/		return 0x8223E600;
		  /* 8223E600h */ case   46:  		/* addi R9, R11, 6 */
		/* 8223E600h case   46:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x6);
		/* 8223E600h case   46:*/		return 0x8223E604;
		  /* 8223E604h */ case   47:  		/* addi R10, R10, 1 */
		/* 8223E604h case   47:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8223E604h case   47:*/		return 0x8223E608;
		  /* 8223E608h */ case   48:  		/* stw R9, <#[R31 + 12]> */
		/* 8223E608h case   48:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E608h case   48:*/		return 0x8223E60C;
		  /* 8223E60Ch */ case   49:  		/* stw R11, <#[R31 + 108]> */
		/* 8223E60Ch case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223E60Ch case   49:*/		return 0x8223E610;
		  /* 8223E610h */ case   50:  		/* stw R10, <#[R31 + 56]> */
		/* 8223E610h case   50:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8223E610h case   50:*/		return 0x8223E614;
		  /* 8223E614h */ case   51:  		/* addi R1, R1, 128 */
		/* 8223E614h case   51:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223E614h case   51:*/		return 0x8223E618;
		  /* 8223E618h */ case   52:  		/* b -1758068 */
		/* 8223E618h case   52:*/		return 0x820912A4;
		/* 8223E618h case   52:*/		return 0x8223E61C;
		  /* 8223E61Ch */ case   53:  		/* nop */
		/* 8223E61Ch case   53:*/		cpu::op::nop();
		/* 8223E61Ch case   53:*/		return 0x8223E620;
	}
	return 0x8223E620;
} // Block from 8223E548h-8223E620h (54 instructions)

//////////////////////////////////////////////////////
// Block at 8223E620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E620);
		  /* 8223E620h */ case    0:  		/* mfspr R12, LR */
		/* 8223E620h case    0:*/		regs.R12 = regs.LR;
		/* 8223E620h case    0:*/		return 0x8223E624;
		  /* 8223E624h */ case    1:  		/* bl -1758152 */
		/* 8223E624h case    1:*/		regs.LR = 0x8223E628; return 0x8209125C;
		/* 8223E624h case    1:*/		return 0x8223E628;
		  /* 8223E628h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223E628h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223E628h case    2:*/		return 0x8223E62C;
		  /* 8223E62Ch */ case    3:  		/* addi R10, R5, -3 */
		/* 8223E62Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R5,0xFFFFFFFD);
		/* 8223E62Ch case    3:*/		return 0x8223E630;
		  /* 8223E630h */ case    4:  		/* lwz R29, <#[R3 + 12]> */
		/* 8223E630h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223E630h case    4:*/		return 0x8223E634;
		  /* 8223E634h */ case    5:  		/* mr R11, R4 */
		/* 8223E634h case    5:*/		regs.R11 = regs.R4;
		/* 8223E634h case    5:*/		return 0x8223E638;
		  /* 8223E638h */ case    6:  		/* addic R10, R10, -1 */
		/* 8223E638h case    6:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8223E638h case    6:*/		return 0x8223E63C;
		  /* 8223E63Ch */ case    7:  		/* mr R30, R3 */
		/* 8223E63Ch case    7:*/		regs.R30 = regs.R3;
		/* 8223E63Ch case    7:*/		return 0x8223E640;
		  /* 8223E640h */ case    8:  		/* subfe R10, R10, R10 */
		/* 8223E640h case    8:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8223E640h case    8:*/		return 0x8223E644;
		  /* 8223E644h */ case    9:  		/* mr R31, R5 */
		/* 8223E644h case    9:*/		regs.R31 = regs.R5;
		/* 8223E644h case    9:*/		return 0x8223E648;
		  /* 8223E648h */ case   10:  		/* li R5, 3 */
		/* 8223E648h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223E648h case   10:*/		return 0x8223E64C;
		  /* 8223E64Ch */ case   11:  		/* mr R3, R29 */
		/* 8223E64Ch case   11:*/		regs.R3 = regs.R29;
		/* 8223E64Ch case   11:*/		return 0x8223E650;
		  /* 8223E650h */ case   12:  		/* li R4, 1 */
		/* 8223E650h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223E650h case   12:*/		return 0x8223E654;
		  /* 8223E654h */ case   13:  		/* and R6, R10, R11 */
		/* 8223E654h case   13:*/		cpu::op::and<0>(regs,&regs.R6,regs.R10,regs.R11);
		/* 8223E654h case   13:*/		return 0x8223E658;
		  /* 8223E658h */ case   14:  		/* bl -944880 */
		/* 8223E658h case   14:*/		regs.LR = 0x8223E65C; return 0x82157B68;
		/* 8223E658h case   14:*/		return 0x8223E65C;
		  /* 8223E65Ch */ case   15:  		/* mr R3, R29 */
		/* 8223E65Ch case   15:*/		regs.R3 = regs.R29;
		/* 8223E65Ch case   15:*/		return 0x8223E660;
		  /* 8223E660h */ case   16:  		/* li R6, 0 */
		/* 8223E660h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223E660h case   16:*/		return 0x8223E664;
		  /* 8223E664h */ case   17:  		/* li R5, 38 */
		/* 8223E664h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 8223E664h case   17:*/		return 0x8223E668;
		  /* 8223E668h */ case   18:  		/* li R4, 4 */
		/* 8223E668h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8223E668h case   18:*/		return 0x8223E66C;
		  /* 8223E66Ch */ case   19:  		/* bl -944900 */
		/* 8223E66Ch case   19:*/		regs.LR = 0x8223E670; return 0x82157B68;
		/* 8223E66Ch case   19:*/		return 0x8223E670;
		  /* 8223E670h */ case   20:  		/* mr R3, R29 */
		/* 8223E670h case   20:*/		regs.R3 = regs.R29;
		/* 8223E670h case   20:*/		return 0x8223E674;
		  /* 8223E674h */ case   21:  		/* mr R6, R31 */
		/* 8223E674h case   21:*/		regs.R6 = regs.R31;
		/* 8223E674h case   21:*/		return 0x8223E678;
		  /* 8223E678h */ case   22:  		/* li R5, 2 */
		/* 8223E678h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223E678h case   22:*/		return 0x8223E67C;
		  /* 8223E67Ch */ case   23:  		/* li R4, 42 */
		/* 8223E67Ch case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x2A);
		/* 8223E67Ch case   23:*/		return 0x8223E680;
		  /* 8223E680h */ case   24:  		/* bl -944920 */
		/* 8223E680h case   24:*/		regs.LR = 0x8223E684; return 0x82157B68;
		/* 8223E680h case   24:*/		return 0x8223E684;
		  /* 8223E684h */ case   25:  		/* mr R3, R29 */
		/* 8223E684h case   25:*/		regs.R3 = regs.R29;
		/* 8223E684h case   25:*/		return 0x8223E688;
		  /* 8223E688h */ case   26:  		/* li R6, 0 */
		/* 8223E688h case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223E688h case   26:*/		return 0x8223E68C;
		  /* 8223E68Ch */ case   27:  		/* li R5, 1 */
		/* 8223E68Ch case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223E68Ch case   27:*/		return 0x8223E690;
		  /* 8223E690h */ case   28:  		/* li R4, 44 */
		/* 8223E690h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 8223E690h case   28:*/		return 0x8223E694;
		  /* 8223E694h */ case   29:  		/* bl -944940 */
		/* 8223E694h case   29:*/		regs.LR = 0x8223E698; return 0x82157B68;
		/* 8223E694h case   29:*/		return 0x8223E698;
		  /* 8223E698h */ case   30:  		/* lis R11, -32252 */
		/* 8223E698h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E698h case   30:*/		return 0x8223E69C;
		  /* 8223E69Ch */ case   31:  		/* li R5, 4 */
		/* 8223E69Ch case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8223E69Ch case   31:*/		return 0x8223E6A0;
		  /* 8223E6A0h */ case   32:  		/* addi R11, R11, 25976 */
		/* 8223E6A0h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6578);
		/* 8223E6A0h case   32:*/		return 0x8223E6A4;
		  /* 8223E6A4h */ case   33:  		/* li R4, 45 */
		/* 8223E6A4h case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8223E6A4h case   33:*/		return 0x8223E6A8;
		  /* 8223E6A8h */ case   34:  		/* mr R3, R29 */
		/* 8223E6A8h case   34:*/		regs.R3 = regs.R29;
		/* 8223E6A8h case   34:*/		return 0x8223E6AC;
		  /* 8223E6ACh */ case   35:  		/* lwz R6, <#[R11 + 68]> */
		/* 8223E6ACh case   35:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000044) );
		/* 8223E6ACh case   35:*/		return 0x8223E6B0;
		  /* 8223E6B0h */ case   36:  		/* bl -944968 */
		/* 8223E6B0h case   36:*/		regs.LR = 0x8223E6B4; return 0x82157B68;
		/* 8223E6B0h case   36:*/		return 0x8223E6B4;
		  /* 8223E6B4h */ case   37:  		/* lwz R11, <#[R30 + 12]> */
		/* 8223E6B4h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8223E6B4h case   37:*/		return 0x8223E6B8;
		  /* 8223E6B8h */ case   38:  		/* lwz R10, <#[R30 + 56]> */
		/* 8223E6B8h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000038) );
		/* 8223E6B8h case   38:*/		return 0x8223E6BC;
		  /* 8223E6BCh */ case   39:  		/* addi R11, R11, 6 */
		/* 8223E6BCh case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6);
		/* 8223E6BCh case   39:*/		return 0x8223E6C0;
		  /* 8223E6C0h */ case   40:  		/* addi R10, R10, 1 */
		/* 8223E6C0h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8223E6C0h case   40:*/		return 0x8223E6C4;
		  /* 8223E6C4h */ case   41:  		/* stw R11, <#[R30 + 12]> */
		/* 8223E6C4h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8223E6C4h case   41:*/		return 0x8223E6C8;
		  /* 8223E6C8h */ case   42:  		/* stw R10, <#[R30 + 56]> */
		/* 8223E6C8h case   42:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000038) );
		/* 8223E6C8h case   42:*/		return 0x8223E6CC;
		  /* 8223E6CCh */ case   43:  		/* addi R1, R1, 112 */
		/* 8223E6CCh case   43:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223E6CCh case   43:*/		return 0x8223E6D0;
		  /* 8223E6D0h */ case   44:  		/* b -1758244 */
		/* 8223E6D0h case   44:*/		return 0x820912AC;
		/* 8223E6D0h case   44:*/		return 0x8223E6D4;
		  /* 8223E6D4h */ case   45:  		/* nop */
		/* 8223E6D4h case   45:*/		cpu::op::nop();
		/* 8223E6D4h case   45:*/		return 0x8223E6D8;
	}
	return 0x8223E6D8;
} // Block from 8223E620h-8223E6D8h (46 instructions)

//////////////////////////////////////////////////////
// Block at 8223E6D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E6D8);
		  /* 8223E6D8h */ case    0:  		/* mfspr R12, LR */
		/* 8223E6D8h case    0:*/		regs.R12 = regs.LR;
		/* 8223E6D8h case    0:*/		return 0x8223E6DC;
		  /* 8223E6DCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223E6DCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223E6DCh case    1:*/		return 0x8223E6E0;
		  /* 8223E6E0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223E6E0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223E6E0h case    2:*/		return 0x8223E6E4;
		  /* 8223E6E4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223E6E4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223E6E4h case    3:*/		return 0x8223E6E8;
		  /* 8223E6E8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223E6E8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223E6E8h case    4:*/		return 0x8223E6EC;
		  /* 8223E6ECh */ case    5:  		/* lwz R30, <#[R3 + 12]> */
		/* 8223E6ECh case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223E6ECh case    5:*/		return 0x8223E6F0;
		  /* 8223E6F0h */ case    6:  		/* mr R31, R3 */
		/* 8223E6F0h case    6:*/		regs.R31 = regs.R3;
		/* 8223E6F0h case    6:*/		return 0x8223E6F4;
		  /* 8223E6F4h */ case    7:  		/* li R6, 0 */
		/* 8223E6F4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223E6F4h case    7:*/		return 0x8223E6F8;
		  /* 8223E6F8h */ case    8:  		/* li R5, 32 */
		/* 8223E6F8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8223E6F8h case    8:*/		return 0x8223E6FC;
		  /* 8223E6FCh */ case    9:  		/* mr R3, R30 */
		/* 8223E6FCh case    9:*/		regs.R3 = regs.R30;
		/* 8223E6FCh case    9:*/		return 0x8223E700;
		  /* 8223E700h */ case   10:  		/* li R4, 1 */
		/* 8223E700h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223E700h case   10:*/		return 0x8223E704;
		  /* 8223E704h */ case   11:  		/* bl -945052 */
		/* 8223E704h case   11:*/		regs.LR = 0x8223E708; return 0x82157B68;
		/* 8223E704h case   11:*/		return 0x8223E708;
		  /* 8223E708h */ case   12:  		/* mr R3, R30 */
		/* 8223E708h case   12:*/		regs.R3 = regs.R30;
		/* 8223E708h case   12:*/		return 0x8223E70C;
		  /* 8223E70Ch */ case   13:  		/* li R6, 0 */
		/* 8223E70Ch case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223E70Ch case   13:*/		return 0x8223E710;
		  /* 8223E710h */ case   14:  		/* li R5, 11 */
		/* 8223E710h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0xB);
		/* 8223E710h case   14:*/		return 0x8223E714;
		  /* 8223E714h */ case   15:  		/* li R4, 33 */
		/* 8223E714h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x21);
		/* 8223E714h case   15:*/		return 0x8223E718;
		  /* 8223E718h */ case   16:  		/* bl -945072 */
		/* 8223E718h case   16:*/		regs.LR = 0x8223E71C; return 0x82157B68;
		/* 8223E718h case   16:*/		return 0x8223E71C;
		  /* 8223E71Ch */ case   17:  		/* mr R3, R30 */
		/* 8223E71Ch case   17:*/		regs.R3 = regs.R30;
		/* 8223E71Ch case   17:*/		return 0x8223E720;
		  /* 8223E720h */ case   18:  		/* li R6, 0 */
		/* 8223E720h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8223E720h case   18:*/		return 0x8223E724;
		  /* 8223E724h */ case   19:  		/* li R5, 1 */
		/* 8223E724h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223E724h case   19:*/		return 0x8223E728;
		  /* 8223E728h */ case   20:  		/* li R4, 44 */
		/* 8223E728h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 8223E728h case   20:*/		return 0x8223E72C;
		  /* 8223E72Ch */ case   21:  		/* bl -945092 */
		/* 8223E72Ch case   21:*/		regs.LR = 0x8223E730; return 0x82157B68;
		/* 8223E72Ch case   21:*/		return 0x8223E730;
		  /* 8223E730h */ case   22:  		/* lis R11, -32252 */
		/* 8223E730h case   22:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E730h case   22:*/		return 0x8223E734;
		  /* 8223E734h */ case   23:  		/* li R5, 4 */
		/* 8223E734h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8223E734h case   23:*/		return 0x8223E738;
		  /* 8223E738h */ case   24:  		/* addi R11, R11, 25976 */
		/* 8223E738h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6578);
		/* 8223E738h case   24:*/		return 0x8223E73C;
		  /* 8223E73Ch */ case   25:  		/* li R4, 45 */
		/* 8223E73Ch case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8223E73Ch case   25:*/		return 0x8223E740;
		  /* 8223E740h */ case   26:  		/* mr R3, R30 */
		/* 8223E740h case   26:*/		regs.R3 = regs.R30;
		/* 8223E740h case   26:*/		return 0x8223E744;
		  /* 8223E744h */ case   27:  		/* lwz R6, <#[R11 + 20]> */
		/* 8223E744h case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000014) );
		/* 8223E744h case   27:*/		return 0x8223E748;
		  /* 8223E748h */ case   28:  		/* bl -945120 */
		/* 8223E748h case   28:*/		regs.LR = 0x8223E74C; return 0x82157B68;
		/* 8223E748h case   28:*/		return 0x8223E74C;
		  /* 8223E74Ch */ case   29:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223E74Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E74Ch case   29:*/		return 0x8223E750;
		  /* 8223E750h */ case   30:  		/* lwz R10, <#[R31 + 56]> */
		/* 8223E750h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8223E750h case   30:*/		return 0x8223E754;
		  /* 8223E754h */ case   31:  		/* addi R11, R11, 6 */
		/* 8223E754h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6);
		/* 8223E754h case   31:*/		return 0x8223E758;
		  /* 8223E758h */ case   32:  		/* addi R10, R10, 1 */
		/* 8223E758h case   32:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8223E758h case   32:*/		return 0x8223E75C;
		  /* 8223E75Ch */ case   33:  		/* stw R11, <#[R31 + 12]> */
		/* 8223E75Ch case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E75Ch case   33:*/		return 0x8223E760;
		  /* 8223E760h */ case   34:  		/* stw R10, <#[R31 + 56]> */
		/* 8223E760h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8223E760h case   34:*/		return 0x8223E764;
		  /* 8223E764h */ case   35:  		/* addi R1, R1, 112 */
		/* 8223E764h case   35:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223E764h case   35:*/		return 0x8223E768;
		  /* 8223E768h */ case   36:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223E768h case   36:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223E768h case   36:*/		return 0x8223E76C;
		  /* 8223E76Ch */ case   37:  		/* mtspr LR, R12 */
		/* 8223E76Ch case   37:*/		regs.LR = regs.R12;
		/* 8223E76Ch case   37:*/		return 0x8223E770;
		  /* 8223E770h */ case   38:  		/* ld R30, <#[R1 - 24]> */
		/* 8223E770h case   38:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223E770h case   38:*/		return 0x8223E774;
		  /* 8223E774h */ case   39:  		/* ld R31, <#[R1 - 16]> */
		/* 8223E774h case   39:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223E774h case   39:*/		return 0x8223E778;
		  /* 8223E778h */ case   40:  		/* bclr 20, CR0_LT */
		/* 8223E778h case   40:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223E778h case   40:*/		return 0x8223E77C;
	}
	return 0x8223E77C;
} // Block from 8223E6D8h-8223E77Ch (41 instructions)

//////////////////////////////////////////////////////
// Block at 8223E77Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E77C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E77C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E77C);
		  /* 8223E77Ch */ case    0:  		/* nop */
		/* 8223E77Ch case    0:*/		cpu::op::nop();
		/* 8223E77Ch case    0:*/		return 0x8223E780;
	}
	return 0x8223E780;
} // Block from 8223E77Ch-8223E780h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223E780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E780);
		  /* 8223E780h */ case    0:  		/* mfspr R12, LR */
		/* 8223E780h case    0:*/		regs.R12 = regs.LR;
		/* 8223E780h case    0:*/		return 0x8223E784;
		  /* 8223E784h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223E784h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223E784h case    1:*/		return 0x8223E788;
		  /* 8223E788h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8223E788h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8223E788h case    2:*/		return 0x8223E78C;
		  /* 8223E78Ch */ case    3:  		/* lwz R4, <#[R3 + 952]> */
		/* 8223E78Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x000003B8) );
		/* 8223E78Ch case    3:*/		return 0x8223E790;
		  /* 8223E790h */ case    4:  		/* lwz R3, <#[R3 + 80]> */
		/* 8223E790h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000050) );
		/* 8223E790h case    4:*/		return 0x8223E794;
		  /* 8223E794h */ case    5:  		/* bl 98716 */
		/* 8223E794h case    5:*/		regs.LR = 0x8223E798; return 0x82256930;
		/* 8223E794h case    5:*/		return 0x8223E798;
		  /* 8223E798h */ case    6:  		/* cmpwi CR6, R3, 4 */
		/* 8223E798h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 8223E798h case    6:*/		return 0x8223E79C;
		  /* 8223E79Ch */ case    7:  		/* bc 12, CR6_EQ, 64 */
		/* 8223E79Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8223E7DC;  }
		/* 8223E79Ch case    7:*/		return 0x8223E7A0;
		  /* 8223E7A0h */ case    8:  		/* bc 4, CR6_GT, 52 */
		/* 8223E7A0h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8223E7D4;  }
		/* 8223E7A0h case    8:*/		return 0x8223E7A4;
		  /* 8223E7A4h */ case    9:  		/* cmpwi CR6, R3, 6 */
		/* 8223E7A4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000006);
		/* 8223E7A4h case    9:*/		return 0x8223E7A8;
		  /* 8223E7A8h */ case   10:  		/* bc 4, CR6_GT, 36 */
		/* 8223E7A8h case   10:*/		if ( !regs.CR[6].gt ) { return 0x8223E7CC;  }
		/* 8223E7A8h case   10:*/		return 0x8223E7AC;
		  /* 8223E7ACh */ case   11:  		/* cmpwi CR6, R3, 8 */
		/* 8223E7ACh case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000008);
		/* 8223E7ACh case   11:*/		return 0x8223E7B0;
		  /* 8223E7B0h */ case   12:  		/* bc 4, CR6_GT, 44 */
		/* 8223E7B0h case   12:*/		if ( !regs.CR[6].gt ) { return 0x8223E7DC;  }
		/* 8223E7B0h case   12:*/		return 0x8223E7B4;
		  /* 8223E7B4h */ case   13:  		/* cmpwi CR6, R3, 42 */
		/* 8223E7B4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x0000002A);
		/* 8223E7B4h case   13:*/		return 0x8223E7B8;
		  /* 8223E7B8h */ case   14:  		/* bc 4, CR6_GT, 28 */
		/* 8223E7B8h case   14:*/		if ( !regs.CR[6].gt ) { return 0x8223E7D4;  }
		/* 8223E7B8h case   14:*/		return 0x8223E7BC;
		  /* 8223E7BCh */ case   15:  		/* cmpwi CR6, R3, 44 */
		/* 8223E7BCh case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x0000002C);
		/* 8223E7BCh case   15:*/		return 0x8223E7C0;
		  /* 8223E7C0h */ case   16:  		/* bc 12, CR6_GT, 20 */
		/* 8223E7C0h case   16:*/		if ( regs.CR[6].gt ) { return 0x8223E7D4;  }
		/* 8223E7C0h case   16:*/		return 0x8223E7C4;
		  /* 8223E7C4h */ case   17:  		/* li R3, 3 */
		/* 8223E7C4h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 8223E7C4h case   17:*/		return 0x8223E7C8;
		  /* 8223E7C8h */ case   18:  		/* b 24 */
		/* 8223E7C8h case   18:*/		return 0x8223E7E0;
		/* 8223E7C8h case   18:*/		return 0x8223E7CC;
	}
	return 0x8223E7CC;
} // Block from 8223E780h-8223E7CCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 8223E7CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E7CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E7CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E7CC);
		  /* 8223E7CCh */ case    0:  		/* li R3, 1 */
		/* 8223E7CCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223E7CCh case    0:*/		return 0x8223E7D0;
		  /* 8223E7D0h */ case    1:  		/* b 16 */
		/* 8223E7D0h case    1:*/		return 0x8223E7E0;
		/* 8223E7D0h case    1:*/		return 0x8223E7D4;
	}
	return 0x8223E7D4;
} // Block from 8223E7CCh-8223E7D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E7D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E7D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E7D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E7D4);
		  /* 8223E7D4h */ case    0:  		/* li R3, 0 */
		/* 8223E7D4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223E7D4h case    0:*/		return 0x8223E7D8;
		  /* 8223E7D8h */ case    1:  		/* b 8 */
		/* 8223E7D8h case    1:*/		return 0x8223E7E0;
		/* 8223E7D8h case    1:*/		return 0x8223E7DC;
	}
	return 0x8223E7DC;
} // Block from 8223E7D4h-8223E7DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E7DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E7DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E7DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E7DC);
		  /* 8223E7DCh */ case    0:  		/* li R3, 2 */
		/* 8223E7DCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 8223E7DCh case    0:*/		return 0x8223E7E0;
	}
	return 0x8223E7E0;
} // Block from 8223E7DCh-8223E7E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223E7E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E7E0);
		  /* 8223E7E0h */ case    0:  		/* addi R1, R1, 96 */
		/* 8223E7E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8223E7E0h case    0:*/		return 0x8223E7E4;
		  /* 8223E7E4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223E7E4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223E7E4h case    1:*/		return 0x8223E7E8;
		  /* 8223E7E8h */ case    2:  		/* mtspr LR, R12 */
		/* 8223E7E8h case    2:*/		regs.LR = regs.R12;
		/* 8223E7E8h case    2:*/		return 0x8223E7EC;
		  /* 8223E7ECh */ case    3:  		/* bclr 20, CR0_LT */
		/* 8223E7ECh case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223E7ECh case    3:*/		return 0x8223E7F0;
	}
	return 0x8223E7F0;
} // Block from 8223E7E0h-8223E7F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223E7F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E7F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E7F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E7F0);
		  /* 8223E7F0h */ case    0:  		/* mfspr R12, LR */
		/* 8223E7F0h case    0:*/		regs.R12 = regs.LR;
		/* 8223E7F0h case    0:*/		return 0x8223E7F4;
		  /* 8223E7F4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223E7F4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223E7F4h case    1:*/		return 0x8223E7F8;
		  /* 8223E7F8h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8223E7F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8223E7F8h case    2:*/		return 0x8223E7FC;
		  /* 8223E7FCh */ case    3:  		/* cmpwi CR6, R3, 1 */
		/* 8223E7FCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223E7FCh case    3:*/		return 0x8223E800;
		  /* 8223E800h */ case    4:  		/* bc 12, CR6_EQ, 136 */
		/* 8223E800h case    4:*/		if ( regs.CR[6].eq ) { return 0x8223E888;  }
		/* 8223E800h case    4:*/		return 0x8223E804;
		  /* 8223E804h */ case    5:  		/* cmpwi CR6, R3, 2 */
		/* 8223E804h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8223E804h case    5:*/		return 0x8223E808;
		  /* 8223E808h */ case    6:  		/* bc 12, CR6_EQ, 120 */
		/* 8223E808h case    6:*/		if ( regs.CR[6].eq ) { return 0x8223E880;  }
		/* 8223E808h case    6:*/		return 0x8223E80C;
		  /* 8223E80Ch */ case    7:  		/* cmpwi CR6, R3, 3 */
		/* 8223E80Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8223E80Ch case    7:*/		return 0x8223E810;
		  /* 8223E810h */ case    8:  		/* bc 12, CR6_EQ, 104 */
		/* 8223E810h case    8:*/		if ( regs.CR[6].eq ) { return 0x8223E878;  }
		/* 8223E810h case    8:*/		return 0x8223E814;
		  /* 8223E814h */ case    9:  		/* cmpwi CR6, R3, 4 */
		/* 8223E814h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 8223E814h case    9:*/		return 0x8223E818;
		  /* 8223E818h */ case   10:  		/* bc 12, CR6_EQ, 64 */
		/* 8223E818h case   10:*/		if ( regs.CR[6].eq ) { return 0x8223E858;  }
		/* 8223E818h case   10:*/		return 0x8223E81C;
		  /* 8223E81Ch */ case   11:  		/* cmpwi CR6, R3, 5 */
		/* 8223E81Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000005);
		/* 8223E81Ch case   11:*/		return 0x8223E820;
		  /* 8223E820h */ case   12:  		/* bc 12, CR6_EQ, 80 */
		/* 8223E820h case   12:*/		if ( regs.CR[6].eq ) { return 0x8223E870;  }
		/* 8223E820h case   12:*/		return 0x8223E824;
		  /* 8223E824h */ case   13:  		/* cmpwi CR6, R3, 6 */
		/* 8223E824h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000006);
		/* 8223E824h case   13:*/		return 0x8223E828;
		  /* 8223E828h */ case   14:  		/* bc 12, CR6_EQ, 64 */
		/* 8223E828h case   14:*/		if ( regs.CR[6].eq ) { return 0x8223E868;  }
		/* 8223E828h case   14:*/		return 0x8223E82C;
		  /* 8223E82Ch */ case   15:  		/* cmpwi CR6, R3, 7 */
		/* 8223E82Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000007);
		/* 8223E82Ch case   15:*/		return 0x8223E830;
		  /* 8223E830h */ case   16:  		/* bc 12, CR6_EQ, 48 */
		/* 8223E830h case   16:*/		if ( regs.CR[6].eq ) { return 0x8223E860;  }
		/* 8223E830h case   16:*/		return 0x8223E834;
		  /* 8223E834h */ case   17:  		/* lis R11, -32252 */
		/* 8223E834h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E834h case   17:*/		return 0x8223E838;
		  /* 8223E838h */ case   18:  		/* lis R10, -32255 */
		/* 8223E838h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8223E838h case   18:*/		return 0x8223E83C;
		  /* 8223E83Ch */ case   19:  		/* lis R9, -32253 */
		/* 8223E83Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223E83Ch case   19:*/		return 0x8223E840;
		  /* 8223E840h */ case   20:  		/* addi R6, R11, 10344 */
		/* 8223E840h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2868);
		/* 8223E840h case   20:*/		return 0x8223E844;
		  /* 8223E844h */ case   21:  		/* addi R5, R10, 5216 */
		/* 8223E844h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 8223E844h case   21:*/		return 0x8223E848;
		  /* 8223E848h */ case   22:  		/* addi R4, R9, 27460 */
		/* 8223E848h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223E848h case   22:*/		return 0x8223E84C;
		  /* 8223E84Ch */ case   23:  		/* li R7, 2874 */
		/* 8223E84Ch case   23:*/		cpu::op::li<0>(regs,&regs.R7,0xB3A);
		/* 8223E84Ch case   23:*/		return 0x8223E850;
		  /* 8223E850h */ case   24:  		/* li R3, 0 */
		/* 8223E850h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223E850h case   24:*/		return 0x8223E854;
		  /* 8223E854h */ case   25:  		/* bl -945228 */
		/* 8223E854h case   25:*/		regs.LR = 0x8223E858; return 0x82157C08;
		/* 8223E854h case   25:*/		return 0x8223E858;
	}
	return 0x8223E858;
} // Block from 8223E7F0h-8223E858h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8223E858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E858);
		  /* 8223E858h */ case    0:  		/* li R3, 0 */
		/* 8223E858h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223E858h case    0:*/		return 0x8223E85C;
		  /* 8223E85Ch */ case    1:  		/* b 48 */
		/* 8223E85Ch case    1:*/		return 0x8223E88C;
		/* 8223E85Ch case    1:*/		return 0x8223E860;
	}
	return 0x8223E860;
} // Block from 8223E858h-8223E860h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E860);
		  /* 8223E860h */ case    0:  		/* li R3, 3 */
		/* 8223E860h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 8223E860h case    0:*/		return 0x8223E864;
		  /* 8223E864h */ case    1:  		/* b 40 */
		/* 8223E864h case    1:*/		return 0x8223E88C;
		/* 8223E864h case    1:*/		return 0x8223E868;
	}
	return 0x8223E868;
} // Block from 8223E860h-8223E868h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E868);
		  /* 8223E868h */ case    0:  		/* li R3, 2 */
		/* 8223E868h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 8223E868h case    0:*/		return 0x8223E86C;
		  /* 8223E86Ch */ case    1:  		/* b 32 */
		/* 8223E86Ch case    1:*/		return 0x8223E88C;
		/* 8223E86Ch case    1:*/		return 0x8223E870;
	}
	return 0x8223E870;
} // Block from 8223E868h-8223E870h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E870);
		  /* 8223E870h */ case    0:  		/* li R3, 1 */
		/* 8223E870h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223E870h case    0:*/		return 0x8223E874;
		  /* 8223E874h */ case    1:  		/* b 24 */
		/* 8223E874h case    1:*/		return 0x8223E88C;
		/* 8223E874h case    1:*/		return 0x8223E878;
	}
	return 0x8223E878;
} // Block from 8223E870h-8223E878h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E878);
		  /* 8223E878h */ case    0:  		/* li R3, 5 */
		/* 8223E878h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x5);
		/* 8223E878h case    0:*/		return 0x8223E87C;
		  /* 8223E87Ch */ case    1:  		/* b 16 */
		/* 8223E87Ch case    1:*/		return 0x8223E88C;
		/* 8223E87Ch case    1:*/		return 0x8223E880;
	}
	return 0x8223E880;
} // Block from 8223E878h-8223E880h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E880);
		  /* 8223E880h */ case    0:  		/* li R3, 4 */
		/* 8223E880h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x4);
		/* 8223E880h case    0:*/		return 0x8223E884;
		  /* 8223E884h */ case    1:  		/* b 8 */
		/* 8223E884h case    1:*/		return 0x8223E88C;
		/* 8223E884h case    1:*/		return 0x8223E888;
	}
	return 0x8223E888;
} // Block from 8223E880h-8223E888h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E888);
		  /* 8223E888h */ case    0:  		/* li R3, 7 */
		/* 8223E888h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x7);
		/* 8223E888h case    0:*/		return 0x8223E88C;
	}
	return 0x8223E88C;
} // Block from 8223E888h-8223E88Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223E88Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E88C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E88C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E88C);
		  /* 8223E88Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 8223E88Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8223E88Ch case    0:*/		return 0x8223E890;
		  /* 8223E890h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223E890h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223E890h case    1:*/		return 0x8223E894;
		  /* 8223E894h */ case    2:  		/* mtspr LR, R12 */
		/* 8223E894h case    2:*/		regs.LR = regs.R12;
		/* 8223E894h case    2:*/		return 0x8223E898;
		  /* 8223E898h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8223E898h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223E898h case    3:*/		return 0x8223E89C;
	}
	return 0x8223E89C;
} // Block from 8223E88Ch-8223E89Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223E89Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E89C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E89C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E89C);
		  /* 8223E89Ch */ case    0:  		/* nop */
		/* 8223E89Ch case    0:*/		cpu::op::nop();
		/* 8223E89Ch case    0:*/		return 0x8223E8A0;
	}
	return 0x8223E8A0;
} // Block from 8223E89Ch-8223E8A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223E8A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E8A0);
		  /* 8223E8A0h */ case    0:  		/* mfspr R12, LR */
		/* 8223E8A0h case    0:*/		regs.R12 = regs.LR;
		/* 8223E8A0h case    0:*/		return 0x8223E8A4;
		  /* 8223E8A4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223E8A4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223E8A4h case    1:*/		return 0x8223E8A8;
		  /* 8223E8A8h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8223E8A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8223E8A8h case    2:*/		return 0x8223E8AC;
		  /* 8223E8ACh */ case    3:  		/* cmplwi CR6, R4, 7 */
		/* 8223E8ACh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000007);
		/* 8223E8ACh case    3:*/		return 0x8223E8B0;
		  /* 8223E8B0h */ case    4:  		/* bc 12, CR6_GT, 92 */
		/* 8223E8B0h case    4:*/		if ( regs.CR[6].gt ) { return 0x8223E90C;  }
		/* 8223E8B0h case    4:*/		return 0x8223E8B4;
		  /* 8223E8B4h */ case    5:  		/* mtspr CTR, R4 */
		/* 8223E8B4h case    5:*/		regs.CTR = regs.R4;
		/* 8223E8B4h case    5:*/		return 0x8223E8B8;
		  /* 8223E8B8h */ case    6:  		/* cmpwi CR6, R4, 0 */
		/* 8223E8B8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 8223E8B8h case    6:*/		return 0x8223E8BC;
		  /* 8223E8BCh */ case    7:  		/* bc 12, CR6_EQ, 120 */
		/* 8223E8BCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8223E934;  }
		/* 8223E8BCh case    7:*/		return 0x8223E8C0;
		  /* 8223E8C0h */ case    8:  		/* bc 18, CR0_LT, 52 */
		/* 8223E8C0h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x8223E8F4;  }
		/* 8223E8C0h case    8:*/		return 0x8223E8C4;
		  /* 8223E8C4h */ case    9:  		/* bc 18, CR0_LT, 56 */
		/* 8223E8C4h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x8223E8FC;  }
		/* 8223E8C4h case    9:*/		return 0x8223E8C8;
		  /* 8223E8C8h */ case   10:  		/* bc 18, CR0_LT, 60 */
		/* 8223E8C8h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x8223E904;  }
		/* 8223E8C8h case   10:*/		return 0x8223E8CC;
		  /* 8223E8CCh */ case   11:  		/* bc 18, CR0_LT, 100 */
		/* 8223E8CCh case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x8223E930;  }
		/* 8223E8CCh case   11:*/		return 0x8223E8D0;
		  /* 8223E8D0h */ case   12:  		/* bc 18, CR0_LT, 12 */
		/* 8223E8D0h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x8223E8DC;  }
		/* 8223E8D0h case   12:*/		return 0x8223E8D4;
		  /* 8223E8D4h */ case   13:  		/* bc 18, CR0_LT, 16 */
		/* 8223E8D4h case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 ) { return 0x8223E8E4;  }
		/* 8223E8D4h case   13:*/		return 0x8223E8D8;
		  /* 8223E8D8h */ case   14:  		/* b 20 */
		/* 8223E8D8h case   14:*/		return 0x8223E8EC;
		/* 8223E8D8h case   14:*/		return 0x8223E8DC;
	}
	return 0x8223E8DC;
} // Block from 8223E8A0h-8223E8DCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223E8DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E8DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E8DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E8DC);
		  /* 8223E8DCh */ case    0:  		/* li R3, 1 */
		/* 8223E8DCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223E8DCh case    0:*/		return 0x8223E8E0;
		  /* 8223E8E0h */ case    1:  		/* b 84 */
		/* 8223E8E0h case    1:*/		return 0x8223E934;
		/* 8223E8E0h case    1:*/		return 0x8223E8E4;
	}
	return 0x8223E8E4;
} // Block from 8223E8DCh-8223E8E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E8E4);
		  /* 8223E8E4h */ case    0:  		/* li R3, 2 */
		/* 8223E8E4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 8223E8E4h case    0:*/		return 0x8223E8E8;
		  /* 8223E8E8h */ case    1:  		/* b 76 */
		/* 8223E8E8h case    1:*/		return 0x8223E934;
		/* 8223E8E8h case    1:*/		return 0x8223E8EC;
	}
	return 0x8223E8EC;
} // Block from 8223E8E4h-8223E8ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E8ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E8EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E8EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E8EC);
		  /* 8223E8ECh */ case    0:  		/* li R3, 3 */
		/* 8223E8ECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 8223E8ECh case    0:*/		return 0x8223E8F0;
		  /* 8223E8F0h */ case    1:  		/* b 68 */
		/* 8223E8F0h case    1:*/		return 0x8223E934;
		/* 8223E8F0h case    1:*/		return 0x8223E8F4;
	}
	return 0x8223E8F4;
} // Block from 8223E8ECh-8223E8F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E8F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E8F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E8F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E8F4);
		  /* 8223E8F4h */ case    0:  		/* li R3, 7 */
		/* 8223E8F4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x7);
		/* 8223E8F4h case    0:*/		return 0x8223E8F8;
		  /* 8223E8F8h */ case    1:  		/* b 60 */
		/* 8223E8F8h case    1:*/		return 0x8223E934;
		/* 8223E8F8h case    1:*/		return 0x8223E8FC;
	}
	return 0x8223E8FC;
} // Block from 8223E8F4h-8223E8FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E8FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E8FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E8FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E8FC);
		  /* 8223E8FCh */ case    0:  		/* li R3, 4 */
		/* 8223E8FCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x4);
		/* 8223E8FCh case    0:*/		return 0x8223E900;
		  /* 8223E900h */ case    1:  		/* b 52 */
		/* 8223E900h case    1:*/		return 0x8223E934;
		/* 8223E900h case    1:*/		return 0x8223E904;
	}
	return 0x8223E904;
} // Block from 8223E8FCh-8223E904h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E904);
		  /* 8223E904h */ case    0:  		/* li R3, 5 */
		/* 8223E904h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x5);
		/* 8223E904h case    0:*/		return 0x8223E908;
		  /* 8223E908h */ case    1:  		/* b 44 */
		/* 8223E908h case    1:*/		return 0x8223E934;
		/* 8223E908h case    1:*/		return 0x8223E90C;
	}
	return 0x8223E90C;
} // Block from 8223E904h-8223E90Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223E90Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E90C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E90C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E90C);
		  /* 8223E90Ch */ case    0:  		/* lis R11, -32252 */
		/* 8223E90Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E90Ch case    0:*/		return 0x8223E910;
		  /* 8223E910h */ case    1:  		/* lis R10, -32255 */
		/* 8223E910h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8223E910h case    1:*/		return 0x8223E914;
		  /* 8223E914h */ case    2:  		/* lis R9, -32253 */
		/* 8223E914h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223E914h case    2:*/		return 0x8223E918;
		  /* 8223E918h */ case    3:  		/* addi R6, R11, 10344 */
		/* 8223E918h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2868);
		/* 8223E918h case    3:*/		return 0x8223E91C;
		  /* 8223E91Ch */ case    4:  		/* addi R5, R10, 5216 */
		/* 8223E91Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1460);
		/* 8223E91Ch case    4:*/		return 0x8223E920;
		  /* 8223E920h */ case    5:  		/* addi R4, R9, 27460 */
		/* 8223E920h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223E920h case    5:*/		return 0x8223E924;
		  /* 8223E924h */ case    6:  		/* li R7, 2894 */
		/* 8223E924h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xB4E);
		/* 8223E924h case    6:*/		return 0x8223E928;
		  /* 8223E928h */ case    7:  		/* li R3, 0 */
		/* 8223E928h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223E928h case    7:*/		return 0x8223E92C;
		  /* 8223E92Ch */ case    8:  		/* bl -945444 */
		/* 8223E92Ch case    8:*/		regs.LR = 0x8223E930; return 0x82157C08;
		/* 8223E92Ch case    8:*/		return 0x8223E930;
	}
	return 0x8223E930;
} // Block from 8223E90Ch-8223E930h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223E930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E930);
		  /* 8223E930h */ case    0:  		/* li R3, 0 */
		/* 8223E930h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223E930h case    0:*/		return 0x8223E934;
	}
	return 0x8223E934;
} // Block from 8223E930h-8223E934h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223E934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E934);
		  /* 8223E934h */ case    0:  		/* addi R1, R1, 96 */
		/* 8223E934h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8223E934h case    0:*/		return 0x8223E938;
		  /* 8223E938h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223E938h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223E938h case    1:*/		return 0x8223E93C;
		  /* 8223E93Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8223E93Ch case    2:*/		regs.LR = regs.R12;
		/* 8223E93Ch case    2:*/		return 0x8223E940;
		  /* 8223E940h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8223E940h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223E940h case    3:*/		return 0x8223E944;
	}
	return 0x8223E944;
} // Block from 8223E934h-8223E944h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223E944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E944);
		  /* 8223E944h */ case    0:  		/* nop */
		/* 8223E944h case    0:*/		cpu::op::nop();
		/* 8223E944h case    0:*/		return 0x8223E948;
	}
	return 0x8223E948;
} // Block from 8223E944h-8223E948h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223E948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E948);
		  /* 8223E948h */ case    0:  		/* lwz R11, <#[R4 + 28]> */
		/* 8223E948h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 8223E948h case    0:*/		return 0x8223E94C;
		  /* 8223E94Ch */ case    1:  		/* lwz R10, <#[R4 + 40]> */
		/* 8223E94Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000028) );
		/* 8223E94Ch case    1:*/		return 0x8223E950;
		  /* 8223E950h */ case    2:  		/* lbz R9, <#[R4 + 48]> */
		/* 8223E950h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000030) );
		/* 8223E950h case    2:*/		return 0x8223E954;
		  /* 8223E954h */ case    3:  		/* cmplwi CR0, R9, 0 */
		/* 8223E954h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 8223E954h case    3:*/		return 0x8223E958;
		  /* 8223E958h */ case    4:  		/* stw R11, <#[R4 + 16]> */
		/* 8223E958h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 8223E958h case    4:*/		return 0x8223E95C;
		  /* 8223E95Ch */ case    5:  		/* stw R10, <#[R4 + 60]> */
		/* 8223E95Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x0000003C) );
		/* 8223E95Ch case    5:*/		return 0x8223E960;
		  /* 8223E960h */ case    6:  		/* bclr 12, CR0_EQ */
		/* 8223E960h case    6:*/		if ( regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 8223E960h case    6:*/		return 0x8223E964;
	}
	return 0x8223E964;
} // Block from 8223E948h-8223E964h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223E964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E964);
		  /* 8223E964h */ case    0:  		/* lwz R11, <#[R4 + 44]> */
		/* 8223E964h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000002C) );
		/* 8223E964h case    0:*/		return 0x8223E968;
		  /* 8223E968h */ case    1:  		/* li R10, 0 */
		/* 8223E968h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8223E968h case    1:*/		return 0x8223E96C;
		  /* 8223E96Ch */ case    2:  		/* lwz R9, <#[R4 + 32]> */
		/* 8223E96Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000020) );
		/* 8223E96Ch case    2:*/		return 0x8223E970;
		  /* 8223E970h */ case    3:  		/* lwz R8, <#[R4 + 36]> */
		/* 8223E970h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000024) );
		/* 8223E970h case    3:*/		return 0x8223E974;
		  /* 8223E974h */ case    4:  		/* stb R10, <#[R4 + 48]> */
		/* 8223E974h case    4:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R4 + 0x00000030) );
		/* 8223E974h case    4:*/		return 0x8223E978;
		  /* 8223E978h */ case    5:  		/* stw R11, <#[R4 + 56]> */
		/* 8223E978h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000038) );
		/* 8223E978h case    5:*/		return 0x8223E97C;
		  /* 8223E97Ch */ case    6:  		/* stw R9, <#[R4 + 24]> */
		/* 8223E97Ch case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R4 + 0x00000018) );
		/* 8223E97Ch case    6:*/		return 0x8223E980;
		  /* 8223E980h */ case    7:  		/* stw R8, <#[R4 + 12]> */
		/* 8223E980h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R4 + 0x0000000C) );
		/* 8223E980h case    7:*/		return 0x8223E984;
		  /* 8223E984h */ case    8:  		/* bclr 20, CR0_LT */
		/* 8223E984h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223E984h case    8:*/		return 0x8223E988;
	}
	return 0x8223E988;
} // Block from 8223E964h-8223E988h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223E988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223E988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223E988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223E988);
		  /* 8223E988h */ case    0:  		/* mfspr R12, LR */
		/* 8223E988h case    0:*/		regs.R12 = regs.LR;
		/* 8223E988h case    0:*/		return 0x8223E98C;
		  /* 8223E98Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223E98Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223E98Ch case    1:*/		return 0x8223E990;
		  /* 8223E990h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223E990h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223E990h case    2:*/		return 0x8223E994;
		  /* 8223E994h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223E994h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223E994h case    3:*/		return 0x8223E998;
		  /* 8223E998h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223E998h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223E998h case    4:*/		return 0x8223E99C;
		  /* 8223E99Ch */ case    5:  		/* li R11, 6 */
		/* 8223E99Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8223E99Ch case    5:*/		return 0x8223E9A0;
		  /* 8223E9A0h */ case    6:  		/* lwz R30, <#[R3 + 12]> */
		/* 8223E9A0h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223E9A0h case    6:*/		return 0x8223E9A4;
		  /* 8223E9A4h */ case    7:  		/* mr R31, R3 */
		/* 8223E9A4h case    7:*/		regs.R31 = regs.R3;
		/* 8223E9A4h case    7:*/		return 0x8223E9A8;
		  /* 8223E9A8h */ case    8:  		/* divw R6, R4, R11 */
		/* 8223E9A8h case    8:*/		cpu::op::divw<0>(regs,&regs.R6,regs.R4,regs.R11);
		/* 8223E9A8h case    8:*/		return 0x8223E9AC;
		  /* 8223E9ACh */ case    9:  		/* li R5, 13 */
		/* 8223E9ACh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 8223E9ACh case    9:*/		return 0x8223E9B0;
		  /* 8223E9B0h */ case   10:  		/* mr R3, R30 */
		/* 8223E9B0h case   10:*/		regs.R3 = regs.R30;
		/* 8223E9B0h case   10:*/		return 0x8223E9B4;
		  /* 8223E9B4h */ case   11:  		/* li R4, 1 */
		/* 8223E9B4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223E9B4h case   11:*/		return 0x8223E9B8;
		  /* 8223E9B8h */ case   12:  		/* bl -945744 */
		/* 8223E9B8h case   12:*/		regs.LR = 0x8223E9BC; return 0x82157B68;
		/* 8223E9B8h case   12:*/		return 0x8223E9BC;
		  /* 8223E9BCh */ case   13:  		/* mr R3, R30 */
		/* 8223E9BCh case   13:*/		regs.R3 = regs.R30;
		/* 8223E9BCh case   13:*/		return 0x8223E9C0;
		  /* 8223E9C0h */ case   14:  		/* li R6, 1 */
		/* 8223E9C0h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223E9C0h case   14:*/		return 0x8223E9C4;
		  /* 8223E9C4h */ case   15:  		/* li R5, 1 */
		/* 8223E9C4h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223E9C4h case   15:*/		return 0x8223E9C8;
		  /* 8223E9C8h */ case   16:  		/* li R4, 14 */
		/* 8223E9C8h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 8223E9C8h case   16:*/		return 0x8223E9CC;
		  /* 8223E9CCh */ case   17:  		/* bl -945764 */
		/* 8223E9CCh case   17:*/		regs.LR = 0x8223E9D0; return 0x82157B68;
		/* 8223E9CCh case   17:*/		return 0x8223E9D0;
		  /* 8223E9D0h */ case   18:  		/* lis R11, -32252 */
		/* 8223E9D0h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223E9D0h case   18:*/		return 0x8223E9D4;
		  /* 8223E9D4h */ case   19:  		/* li R5, 4 */
		/* 8223E9D4h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8223E9D4h case   19:*/		return 0x8223E9D8;
		  /* 8223E9D8h */ case   20:  		/* addi R11, R11, 25976 */
		/* 8223E9D8h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6578);
		/* 8223E9D8h case   20:*/		return 0x8223E9DC;
		  /* 8223E9DCh */ case   21:  		/* li R4, 45 */
		/* 8223E9DCh case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8223E9DCh case   21:*/		return 0x8223E9E0;
		  /* 8223E9E0h */ case   22:  		/* mr R3, R30 */
		/* 8223E9E0h case   22:*/		regs.R3 = regs.R30;
		/* 8223E9E0h case   22:*/		return 0x8223E9E4;
		  /* 8223E9E4h */ case   23:  		/* lwz R6, <#[R11 + 56]> */
		/* 8223E9E4h case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000038) );
		/* 8223E9E4h case   23:*/		return 0x8223E9E8;
		  /* 8223E9E8h */ case   24:  		/* bl -945792 */
		/* 8223E9E8h case   24:*/		regs.LR = 0x8223E9EC; return 0x82157B68;
		/* 8223E9E8h case   24:*/		return 0x8223E9EC;
		  /* 8223E9ECh */ case   25:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223E9ECh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E9ECh case   25:*/		return 0x8223E9F0;
		  /* 8223E9F0h */ case   26:  		/* lwz R10, <#[R31 + 56]> */
		/* 8223E9F0h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8223E9F0h case   26:*/		return 0x8223E9F4;
		  /* 8223E9F4h */ case   27:  		/* addi R11, R11, 6 */
		/* 8223E9F4h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6);
		/* 8223E9F4h case   27:*/		return 0x8223E9F8;
		  /* 8223E9F8h */ case   28:  		/* addi R10, R10, 1 */
		/* 8223E9F8h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8223E9F8h case   28:*/		return 0x8223E9FC;
		  /* 8223E9FCh */ case   29:  		/* stw R11, <#[R31 + 12]> */
		/* 8223E9FCh case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223E9FCh case   29:*/		return 0x8223EA00;
		  /* 8223EA00h */ case   30:  		/* stw R10, <#[R31 + 56]> */
		/* 8223EA00h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8223EA00h case   30:*/		return 0x8223EA04;
		  /* 8223EA04h */ case   31:  		/* addi R1, R1, 112 */
		/* 8223EA04h case   31:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223EA04h case   31:*/		return 0x8223EA08;
		  /* 8223EA08h */ case   32:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223EA08h case   32:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223EA08h case   32:*/		return 0x8223EA0C;
		  /* 8223EA0Ch */ case   33:  		/* mtspr LR, R12 */
		/* 8223EA0Ch case   33:*/		regs.LR = regs.R12;
		/* 8223EA0Ch case   33:*/		return 0x8223EA10;
		  /* 8223EA10h */ case   34:  		/* ld R30, <#[R1 - 24]> */
		/* 8223EA10h case   34:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223EA10h case   34:*/		return 0x8223EA14;
		  /* 8223EA14h */ case   35:  		/* ld R31, <#[R1 - 16]> */
		/* 8223EA14h case   35:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223EA14h case   35:*/		return 0x8223EA18;
		  /* 8223EA18h */ case   36:  		/* bclr 20, CR0_LT */
		/* 8223EA18h case   36:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223EA18h case   36:*/		return 0x8223EA1C;
	}
	return 0x8223EA1C;
} // Block from 8223E988h-8223EA1Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 8223EA1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EA1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EA1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EA1C);
		  /* 8223EA1Ch */ case    0:  		/* nop */
		/* 8223EA1Ch case    0:*/		cpu::op::nop();
		/* 8223EA1Ch case    0:*/		return 0x8223EA20;
	}
	return 0x8223EA20;
} // Block from 8223EA1Ch-8223EA20h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223EA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EA20);
		  /* 8223EA20h */ case    0:  		/* mfspr R12, LR */
		/* 8223EA20h case    0:*/		regs.R12 = regs.LR;
		/* 8223EA20h case    0:*/		return 0x8223EA24;
		  /* 8223EA24h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223EA24h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223EA24h case    1:*/		return 0x8223EA28;
		  /* 8223EA28h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8223EA28h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223EA28h case    2:*/		return 0x8223EA2C;
		  /* 8223EA2Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8223EA2Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8223EA2Ch case    3:*/		return 0x8223EA30;
		  /* 8223EA30h */ case    4:  		/* lis R11, -32252 */
		/* 8223EA30h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223EA30h case    4:*/		return 0x8223EA34;
		  /* 8223EA34h */ case    5:  		/* li R5, 4 */
		/* 8223EA34h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8223EA34h case    5:*/		return 0x8223EA38;
		  /* 8223EA38h */ case    6:  		/* addi R11, R11, 25976 */
		/* 8223EA38h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6578);
		/* 8223EA38h case    6:*/		return 0x8223EA3C;
		  /* 8223EA3Ch */ case    7:  		/* li R4, 45 */
		/* 8223EA3Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8223EA3Ch case    7:*/		return 0x8223EA40;
		  /* 8223EA40h */ case    8:  		/* mr R31, R3 */
		/* 8223EA40h case    8:*/		regs.R31 = regs.R3;
		/* 8223EA40h case    8:*/		return 0x8223EA44;
		  /* 8223EA44h */ case    9:  		/* lwz R3, <#[R3 + 12]> */
		/* 8223EA44h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223EA44h case    9:*/		return 0x8223EA48;
		  /* 8223EA48h */ case   10:  		/* lwz R6, <#[R11 + 60]> */
		/* 8223EA48h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000003C) );
		/* 8223EA48h case   10:*/		return 0x8223EA4C;
		  /* 8223EA4Ch */ case   11:  		/* bl -945892 */
		/* 8223EA4Ch case   11:*/		regs.LR = 0x8223EA50; return 0x82157B68;
		/* 8223EA4Ch case   11:*/		return 0x8223EA50;
		  /* 8223EA50h */ case   12:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223EA50h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223EA50h case   12:*/		return 0x8223EA54;
		  /* 8223EA54h */ case   13:  		/* lwz R10, <#[R31 + 56]> */
		/* 8223EA54h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8223EA54h case   13:*/		return 0x8223EA58;
		  /* 8223EA58h */ case   14:  		/* addi R11, R11, 6 */
		/* 8223EA58h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6);
		/* 8223EA58h case   14:*/		return 0x8223EA5C;
		  /* 8223EA5Ch */ case   15:  		/* addi R10, R10, 1 */
		/* 8223EA5Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8223EA5Ch case   15:*/		return 0x8223EA60;
		  /* 8223EA60h */ case   16:  		/* stw R11, <#[R31 + 12]> */
		/* 8223EA60h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223EA60h case   16:*/		return 0x8223EA64;
		  /* 8223EA64h */ case   17:  		/* stw R10, <#[R31 + 56]> */
		/* 8223EA64h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8223EA64h case   17:*/		return 0x8223EA68;
		  /* 8223EA68h */ case   18:  		/* addi R1, R1, 96 */
		/* 8223EA68h case   18:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8223EA68h case   18:*/		return 0x8223EA6C;
		  /* 8223EA6Ch */ case   19:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223EA6Ch case   19:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223EA6Ch case   19:*/		return 0x8223EA70;
		  /* 8223EA70h */ case   20:  		/* mtspr LR, R12 */
		/* 8223EA70h case   20:*/		regs.LR = regs.R12;
		/* 8223EA70h case   20:*/		return 0x8223EA74;
		  /* 8223EA74h */ case   21:  		/* ld R31, <#[R1 - 16]> */
		/* 8223EA74h case   21:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223EA74h case   21:*/		return 0x8223EA78;
		  /* 8223EA78h */ case   22:  		/* bclr 20, CR0_LT */
		/* 8223EA78h case   22:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223EA78h case   22:*/		return 0x8223EA7C;
	}
	return 0x8223EA7C;
} // Block from 8223EA20h-8223EA7Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8223EA7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EA7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EA7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EA7C);
		  /* 8223EA7Ch */ case    0:  		/* nop */
		/* 8223EA7Ch case    0:*/		cpu::op::nop();
		/* 8223EA7Ch case    0:*/		return 0x8223EA80;
		  /* 8223EA80h */ case    1:  		/* lwz R11, <#[R3 + 228]> */
		/* 8223EA80h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000E4) );
		/* 8223EA80h case    1:*/		return 0x8223EA84;
		  /* 8223EA84h */ case    2:  		/* rlwinm. R10, R11, 29, 31, 31 */
		/* 8223EA84h case    2:*/		cpu::op::rlwinm<1,29,31,31>(regs,&regs.R10,regs.R11);
		/* 8223EA84h case    2:*/		return 0x8223EA88;
		  /* 8223EA88h */ case    3:  		/* bc 4, CR0_EQ, 76 */
		/* 8223EA88h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8223EAD4;  }
		/* 8223EA88h case    3:*/		return 0x8223EA8C;
		  /* 8223EA8Ch */ case    4:  		/* rlwinm. R11, R11, 28, 31, 31 */
		/* 8223EA8Ch case    4:*/		cpu::op::rlwinm<1,28,31,31>(regs,&regs.R11,regs.R11);
		/* 8223EA8Ch case    4:*/		return 0x8223EA90;
		  /* 8223EA90h */ case    5:  		/* bc 4, CR0_EQ, 68 */
		/* 8223EA90h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8223EAD4;  }
		/* 8223EA90h case    5:*/		return 0x8223EA94;
		  /* 8223EA94h */ case    6:  		/* lwz R11, <#[R3 + 80]> */
		/* 8223EA94h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 8223EA94h case    6:*/		return 0x8223EA98;
		  /* 8223EA98h */ case    7:  		/* cmpwi CR6, R11, 31 */
		/* 8223EA98h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001F);
		/* 8223EA98h case    7:*/		return 0x8223EA9C;
		  /* 8223EA9Ch */ case    8:  		/* bc 12, CR6_EQ, 56 */
		/* 8223EA9Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8223EAD4;  }
		/* 8223EA9Ch case    8:*/		return 0x8223EAA0;
		  /* 8223EAA0h */ case    9:  		/* lis R11, -32252 */
		/* 8223EAA0h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223EAA0h case    9:*/		return 0x8223EAA4;
		  /* 8223EAA4h */ case   10:  		/* lwz R10, <#[R3 + 128]> */
		/* 8223EAA4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000080) );
		/* 8223EAA4h case   10:*/		return 0x8223EAA8;
		  /* 8223EAA8h */ case   11:  		/* lwz R11, <#[R11 + 9920]> */
		/* 8223EAA8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000026C0) );
		/* 8223EAA8h case   11:*/		return 0x8223EAAC;
		  /* 8223EAACh */ case   12:  		/* cmplw CR6, R10, R11 */
		/* 8223EAACh case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8223EAACh case   12:*/		return 0x8223EAB0;
		  /* 8223EAB0h */ case   13:  		/* bc 4, CR6_EQ, 36 */
		/* 8223EAB0h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8223EAD4;  }
		/* 8223EAB0h case   13:*/		return 0x8223EAB4;
		  /* 8223EAB4h */ case   14:  		/* lwz R11, <#[R3 + 24]> */
		/* 8223EAB4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 8223EAB4h case   14:*/		return 0x8223EAB8;
		  /* 8223EAB8h */ case   15:  		/* cmpwi CR6, R11, 43 */
		/* 8223EAB8h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000002B);
		/* 8223EAB8h case   15:*/		return 0x8223EABC;
		  /* 8223EABCh */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 8223EABCh case   16:*/		if ( regs.CR[6].eq ) { return 0x8223EAD4;  }
		/* 8223EABCh case   16:*/		return 0x8223EAC0;
		  /* 8223EAC0h */ case   17:  		/* cmpwi CR6, R11, 99 */
		/* 8223EAC0h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000063);
		/* 8223EAC0h case   17:*/		return 0x8223EAC4;
		  /* 8223EAC4h */ case   18:  		/* bc 12, CR6_EQ, 16 */
		/* 8223EAC4h case   18:*/		if ( regs.CR[6].eq ) { return 0x8223EAD4;  }
		/* 8223EAC4h case   18:*/		return 0x8223EAC8;
		  /* 8223EAC8h */ case   19:  		/* cmpwi CR6, R11, 100 */
		/* 8223EAC8h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000064);
		/* 8223EAC8h case   19:*/		return 0x8223EACC;
		  /* 8223EACCh */ case   20:  		/* li R11, 1 */
		/* 8223EACCh case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223EACCh case   20:*/		return 0x8223EAD0;
		  /* 8223EAD0h */ case   21:  		/* bc 4, CR6_EQ, 8 */
		/* 8223EAD0h case   21:*/		if ( !regs.CR[6].eq ) { return 0x8223EAD8;  }
		/* 8223EAD0h case   21:*/		return 0x8223EAD4;
	}
	return 0x8223EAD4;
} // Block from 8223EA7Ch-8223EAD4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8223EAD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EAD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EAD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EAD4);
		  /* 8223EAD4h */ case    0:  		/* li R11, 0 */
		/* 8223EAD4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223EAD4h case    0:*/		return 0x8223EAD8;
	}
	return 0x8223EAD8;
} // Block from 8223EAD4h-8223EAD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223EAD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EAD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EAD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EAD8);
		  /* 8223EAD8h */ case    0:  		/* rlwinm R3, R11, 0, 24, 31 */
		/* 8223EAD8h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R3,regs.R11);
		/* 8223EAD8h case    0:*/		return 0x8223EADC;
		  /* 8223EADCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 8223EADCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223EADCh case    1:*/		return 0x8223EAE0;
	}
	return 0x8223EAE0;
} // Block from 8223EAD8h-8223EAE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223EAE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EAE0);
		  /* 8223EAE0h */ case    0:  		/* mfspr R12, LR */
		/* 8223EAE0h case    0:*/		regs.R12 = regs.LR;
		/* 8223EAE0h case    0:*/		return 0x8223EAE4;
		  /* 8223EAE4h */ case    1:  		/* bl -1759376 */
		/* 8223EAE4h case    1:*/		regs.LR = 0x8223EAE8; return 0x82091254;
		/* 8223EAE4h case    1:*/		return 0x8223EAE8;
		  /* 8223EAE8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8223EAE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8223EAE8h case    2:*/		return 0x8223EAEC;
		  /* 8223EAECh */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8223EAECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223EAECh case    3:*/		return 0x8223EAF0;
		  /* 8223EAF0h */ case    4:  		/* mr R31, R3 */
		/* 8223EAF0h case    4:*/		regs.R31 = regs.R3;
		/* 8223EAF0h case    4:*/		return 0x8223EAF4;
		  /* 8223EAF4h */ case    5:  		/* mr R27, R4 */
		/* 8223EAF4h case    5:*/		regs.R27 = regs.R4;
		/* 8223EAF4h case    5:*/		return 0x8223EAF8;
		  /* 8223EAF8h */ case    6:  		/* li R29, 1 */
		/* 8223EAF8h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8223EAF8h case    6:*/		return 0x8223EAFC;
		  /* 8223EAFCh */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 8223EAFCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8223EAFCh case    7:*/		return 0x8223EB00;
		  /* 8223EB00h */ case    8:  		/* mtspr CTR, R11 */
		/* 8223EB00h case    8:*/		regs.CTR = regs.R11;
		/* 8223EB00h case    8:*/		return 0x8223EB04;
		  /* 8223EB04h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8223EB04h case    9:*/		if ( 1 ) { regs.LR = 0x8223EB08; return (uint32)regs.CTR; }
		/* 8223EB04h case    9:*/		return 0x8223EB08;
		  /* 8223EB08h */ case   10:  		/* cmpwi CR6, R3, 1 */
		/* 8223EB08h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223EB08h case   10:*/		return 0x8223EB0C;
		  /* 8223EB0Ch */ case   11:  		/* bc 12, CR6_LT, 116 */
		/* 8223EB0Ch case   11:*/		if ( regs.CR[6].lt ) { return 0x8223EB80;  }
		/* 8223EB0Ch case   11:*/		return 0x8223EB10;
		  /* 8223EB10h */ case   12:  		/* lis R11, -32251 */
		/* 8223EB10h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8205);
		/* 8223EB10h case   12:*/		return 0x8223EB14;
		  /* 8223EB14h */ case   13:  		/* addi R30, R31, 236 */
		/* 8223EB14h case   13:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xEC);
		/* 8223EB14h case   13:*/		return 0x8223EB18;
		  /* 8223EB18h */ case   14:  		/* addi R28, R11, -19064 */
		/* 8223EB18h case   14:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFB588);
		/* 8223EB18h case   14:*/		return 0x8223EB1C;
		  /* 8223EB1Ch */ case   15:  		/* lwz R11, <#[R30]> */
		/* 8223EB1Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223EB1Ch case   15:*/		return 0x8223EB20;
		  /* 8223EB20h */ case   16:  		/* lwz R10, <#[R11 + 56]> */
		/* 8223EB20h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000038) );
		/* 8223EB20h case   16:*/		return 0x8223EB24;
		  /* 8223EB24h */ case   17:  		/* cmpw CR6, R27, R10 */
		/* 8223EB24h case   17:*/		cpu::op::cmpw<6>(regs,regs.R27,regs.R10);
		/* 8223EB24h case   17:*/		return 0x8223EB28;
		  /* 8223EB28h */ case   18:  		/* bc 4, CR6_EQ, 52 */
		/* 8223EB28h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8223EB5C;  }
		/* 8223EB28h case   18:*/		return 0x8223EB2C;
		  /* 8223EB2Ch */ case   19:  		/* lwz R11, <#[R11 + 80]> */
		/* 8223EB2Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8223EB2Ch case   19:*/		return 0x8223EB30;
		  /* 8223EB30h */ case   20:  		/* addi R10, R28, 6 */
		/* 8223EB30h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R28,0x6);
		/* 8223EB30h case   20:*/		return 0x8223EB34;
		  /* 8223EB34h */ case   21:  		/* mulli R11, R11, 12 */
		/* 8223EB34h case   21:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8223EB34h case   21:*/		return 0x8223EB38;
		  /* 8223EB38h */ case   22:  		/* lbzx R11, <#[R11 + R10]> */
		/* 8223EB38h case   22:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8223EB38h case   22:*/		return 0x8223EB3C;
		  /* 8223EB3Ch */ case   23:  		/* cmplwi CR0, R11, 0 */
		/* 8223EB3Ch case   23:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223EB3Ch case   23:*/		return 0x8223EB40;
		  /* 8223EB40h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 8223EB40h case   24:*/		if ( regs.CR[0].eq ) { return 0x8223EB50;  }
		/* 8223EB40h case   24:*/		return 0x8223EB44;
		  /* 8223EB44h */ case   25:  		/* cmplwi CR6, R11, 4 */
		/* 8223EB44h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8223EB44h case   25:*/		return 0x8223EB48;
		  /* 8223EB48h */ case   26:  		/* li R11, 1 */
		/* 8223EB48h case   26:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223EB48h case   26:*/		return 0x8223EB4C;
		  /* 8223EB4Ch */ case   27:  		/* bc 4, CR6_GT, 8 */
		/* 8223EB4Ch case   27:*/		if ( !regs.CR[6].gt ) { return 0x8223EB54;  }
		/* 8223EB4Ch case   27:*/		return 0x8223EB50;
	}
	return 0x8223EB50;
} // Block from 8223EAE0h-8223EB50h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8223EB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EB50);
		  /* 8223EB50h */ case    0:  		/* li R11, 0 */
		/* 8223EB50h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223EB50h case    0:*/		return 0x8223EB54;
	}
	return 0x8223EB54;
} // Block from 8223EB50h-8223EB54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223EB54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EB54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EB54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EB54);
		  /* 8223EB54h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8223EB54h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8223EB54h case    0:*/		return 0x8223EB58;
		  /* 8223EB58h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 8223EB58h case    1:*/		if ( regs.CR[0].eq ) { return 0x8223EB8C;  }
		/* 8223EB58h case    1:*/		return 0x8223EB5C;
	}
	return 0x8223EB5C;
} // Block from 8223EB54h-8223EB5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223EB5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EB5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EB5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EB5C);
		  /* 8223EB5Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8223EB5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223EB5Ch case    0:*/		return 0x8223EB60;
		  /* 8223EB60h */ case    1:  		/* mr R3, R31 */
		/* 8223EB60h case    1:*/		regs.R3 = regs.R31;
		/* 8223EB60h case    1:*/		return 0x8223EB64;
		  /* 8223EB64h */ case    2:  		/* addi R29, R29, 1 */
		/* 8223EB64h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8223EB64h case    2:*/		return 0x8223EB68;
		  /* 8223EB68h */ case    3:  		/* addi R30, R30, 4 */
		/* 8223EB68h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8223EB68h case    3:*/		return 0x8223EB6C;
		  /* 8223EB6Ch */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 8223EB6Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8223EB6Ch case    4:*/		return 0x8223EB70;
		  /* 8223EB70h */ case    5:  		/* mtspr CTR, R11 */
		/* 8223EB70h case    5:*/		regs.CTR = regs.R11;
		/* 8223EB70h case    5:*/		return 0x8223EB74;
		  /* 8223EB74h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8223EB74h case    6:*/		if ( 1 ) { regs.LR = 0x8223EB78; return (uint32)regs.CTR; }
		/* 8223EB74h case    6:*/		return 0x8223EB78;
		  /* 8223EB78h */ case    7:  		/* cmpw CR6, R29, R3 */
		/* 8223EB78h case    7:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R3);
		/* 8223EB78h case    7:*/		return 0x8223EB7C;
		  /* 8223EB7Ch */ case    8:  		/* bc 4, CR6_GT, -96 */
		/* 8223EB7Ch case    8:*/		if ( !regs.CR[6].gt ) { return 0x8223EB1C;  }
		/* 8223EB7Ch case    8:*/		return 0x8223EB80;
	}
	return 0x8223EB80;
} // Block from 8223EB5Ch-8223EB80h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223EB80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EB80);
		  /* 8223EB80h */ case    0:  		/* li R3, 0 */
		/* 8223EB80h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223EB80h case    0:*/		return 0x8223EB84;
		  /* 8223EB84h */ case    1:  		/* addi R1, R1, 128 */
		/* 8223EB84h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223EB84h case    1:*/		return 0x8223EB88;
		  /* 8223EB88h */ case    2:  		/* b -1759460 */
		/* 8223EB88h case    2:*/		return 0x820912A4;
		/* 8223EB88h case    2:*/		return 0x8223EB8C;
	}
	return 0x8223EB8C;
} // Block from 8223EB80h-8223EB8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223EB8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EB8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EB8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EB8C);
		  /* 8223EB8Ch */ case    0:  		/* li R3, 1 */
		/* 8223EB8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223EB8Ch case    0:*/		return 0x8223EB90;
		  /* 8223EB90h */ case    1:  		/* b -12 */
		/* 8223EB90h case    1:*/		return 0x8223EB84;
		/* 8223EB90h case    1:*/		return 0x8223EB94;
		  /* 8223EB94h */ case    2:  		/* nop */
		/* 8223EB94h case    2:*/		cpu::op::nop();
		/* 8223EB94h case    2:*/		return 0x8223EB98;
		  /* 8223EB98h */ case    3:  		/* lwz R11, <#[R3 + 16]> */
		/* 8223EB98h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8223EB98h case    3:*/		return 0x8223EB9C;
		  /* 8223EB9Ch */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 8223EB9Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223EB9Ch case    4:*/		return 0x8223EBA0;
		  /* 8223EBA0h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 8223EBA0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8223EBD4;  }
		/* 8223EBA0h case    5:*/		return 0x8223EBA4;
		  /* 8223EBA4h */ case    6:  		/* lwz R11, <#[R3 + 228]> */
		/* 8223EBA4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000E4) );
		/* 8223EBA4h case    6:*/		return 0x8223EBA8;
		  /* 8223EBA8h */ case    7:  		/* rlwinm. R11, R11, 31, 31, 31 */
		/* 8223EBA8h case    7:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R11,regs.R11);
		/* 8223EBA8h case    7:*/		return 0x8223EBAC;
		  /* 8223EBACh */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 8223EBACh case    8:*/		if ( !regs.CR[0].eq ) { return 0x8223EBD4;  }
		/* 8223EBACh case    8:*/		return 0x8223EBB0;
		  /* 8223EBB0h */ case    9:  		/* lis R11, -32251 */
		/* 8223EBB0h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8205);
		/* 8223EBB0h case    9:*/		return 0x8223EBB4;
		  /* 8223EBB4h */ case   10:  		/* lwz R10, <#[R3 + 80]> */
		/* 8223EBB4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000050) );
		/* 8223EBB4h case   10:*/		return 0x8223EBB8;
		  /* 8223EBB8h */ case   11:  		/* addi R11, R11, -19064 */
		/* 8223EBB8h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFB588);
		/* 8223EBB8h case   11:*/		return 0x8223EBBC;
		  /* 8223EBBCh */ case   12:  		/* mulli R10, R10, 12 */
		/* 8223EBBCh case   12:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0xC);
		/* 8223EBBCh case   12:*/		return 0x8223EBC0;
		  /* 8223EBC0h */ case   13:  		/* addi R11, R11, 4 */
		/* 8223EBC0h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223EBC0h case   13:*/		return 0x8223EBC4;
		  /* 8223EBC4h */ case   14:  		/* lbzx R11, <#[R10 + R11]> */
		/* 8223EBC4h case   14:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8223EBC4h case   14:*/		return 0x8223EBC8;
		  /* 8223EBC8h */ case   15:  		/* cmplwi CR0, R11, 0 */
		/* 8223EBC8h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223EBC8h case   15:*/		return 0x8223EBCC;
		  /* 8223EBCCh */ case   16:  		/* li R11, 1 */
		/* 8223EBCCh case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223EBCCh case   16:*/		return 0x8223EBD0;
		  /* 8223EBD0h */ case   17:  		/* bc 4, CR0_EQ, 8 */
		/* 8223EBD0h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8223EBD8;  }
		/* 8223EBD0h case   17:*/		return 0x8223EBD4;
	}
	return 0x8223EBD4;
} // Block from 8223EB8Ch-8223EBD4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8223EBD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EBD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EBD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EBD4);
		  /* 8223EBD4h */ case    0:  		/* li R11, 0 */
		/* 8223EBD4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223EBD4h case    0:*/		return 0x8223EBD8;
	}
	return 0x8223EBD8;
} // Block from 8223EBD4h-8223EBD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223EBD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EBD8);
		  /* 8223EBD8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8223EBD8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8223EBD8h case    0:*/		return 0x8223EBDC;
		  /* 8223EBDCh */ case    1:  		/* bc 12, CR0_EQ, 44 */
		/* 8223EBDCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8223EC08;  }
		/* 8223EBDCh case    1:*/		return 0x8223EBE0;
		  /* 8223EBE0h */ case    2:  		/* li R11, 0 */
		/* 8223EBE0h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223EBE0h case    2:*/		return 0x8223EBE4;
		  /* 8223EBE4h */ case    3:  		/* addi R9, R3, 128 */
		/* 8223EBE4h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R3,0x80);
		/* 8223EBE4h case    3:*/		return 0x8223EBE8;
		  /* 8223EBE8h */ case    4:  		/* lbzx R10, <#[R9 + R11]> */
		/* 8223EBE8h case    4:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8223EBE8h case    4:*/		return 0x8223EBEC;
		  /* 8223EBECh */ case    5:  		/* cmplwi CR6, R10, 2 */
		/* 8223EBECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 8223EBECh case    5:*/		return 0x8223EBF0;
		  /* 8223EBF0h */ case    6:  		/* bc 12, CR6_LT, 12 */
		/* 8223EBF0h case    6:*/		if ( regs.CR[6].lt ) { return 0x8223EBFC;  }
		/* 8223EBF0h case    6:*/		return 0x8223EBF4;
		  /* 8223EBF4h */ case    7:  		/* cmplwi CR6, R10, 3 */
		/* 8223EBF4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 8223EBF4h case    7:*/		return 0x8223EBF8;
		  /* 8223EBF8h */ case    8:  		/* bc 4, CR6_GT, 24 */
		/* 8223EBF8h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8223EC10;  }
		/* 8223EBF8h case    8:*/		return 0x8223EBFC;
	}
	return 0x8223EBFC;
} // Block from 8223EBD8h-8223EBFCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223EBFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EBFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EBFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EBFC);
		  /* 8223EBFCh */ case    0:  		/* addi R11, R11, 1 */
		/* 8223EBFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223EBFCh case    0:*/		return 0x8223EC00;
		  /* 8223EC00h */ case    1:  		/* cmpwi CR6, R11, 4 */
		/* 8223EC00h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 8223EC00h case    1:*/		return 0x8223EC04;
		  /* 8223EC04h */ case    2:  		/* bc 12, CR6_LT, -28 */
		/* 8223EC04h case    2:*/		if ( regs.CR[6].lt ) { return 0x8223EBE8;  }
		/* 8223EC04h case    2:*/		return 0x8223EC08;
	}
	return 0x8223EC08;
} // Block from 8223EBFCh-8223EC08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223EC08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EC08);
		  /* 8223EC08h */ case    0:  		/* li R3, 0 */
		/* 8223EC08h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223EC08h case    0:*/		return 0x8223EC0C;
		  /* 8223EC0Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8223EC0Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223EC0Ch case    1:*/		return 0x8223EC10;
	}
	return 0x8223EC10;
} // Block from 8223EC08h-8223EC10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223EC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EC10);
		  /* 8223EC10h */ case    0:  		/* li R3, 1 */
		/* 8223EC10h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223EC10h case    0:*/		return 0x8223EC14;
		  /* 8223EC14h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8223EC14h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223EC14h case    1:*/		return 0x8223EC18;
	}
	return 0x8223EC18;
} // Block from 8223EC10h-8223EC18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223EC18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EC18);
		  /* 8223EC18h */ case    0:  		/* mfspr R12, LR */
		/* 8223EC18h case    0:*/		regs.R12 = regs.LR;
		/* 8223EC18h case    0:*/		return 0x8223EC1C;
		  /* 8223EC1Ch */ case    1:  		/* bl -1759680 */
		/* 8223EC1Ch case    1:*/		regs.LR = 0x8223EC20; return 0x8209125C;
		/* 8223EC1Ch case    1:*/		return 0x8223EC20;
		  /* 8223EC20h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223EC20h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223EC20h case    2:*/		return 0x8223EC24;
		  /* 8223EC24h */ case    3:  		/* lwz R11, <#[R3 + 128]> */
		/* 8223EC24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 8223EC24h case    3:*/		return 0x8223EC28;
		  /* 8223EC28h */ case    4:  		/* mr R31, R3 */
		/* 8223EC28h case    4:*/		regs.R31 = regs.R3;
		/* 8223EC28h case    4:*/		return 0x8223EC2C;
		  /* 8223EC2Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8223EC2Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223EC2Ch case    5:*/		return 0x8223EC30;
		  /* 8223EC30h */ case    6:  		/* bc 4, CR6_EQ, 84 */
		/* 8223EC30h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8223EC84;  }
		/* 8223EC30h case    6:*/		return 0x8223EC34;
		  /* 8223EC34h */ case    7:  		/* lwz R3, <#[R3 + 140]> */
		/* 8223EC34h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000008C) );
		/* 8223EC34h case    7:*/		return 0x8223EC38;
		  /* 8223EC38h */ case    8:  		/* bl 35632 */
		/* 8223EC38h case    8:*/		regs.LR = 0x8223EC3C; return 0x82247768;
		/* 8223EC38h case    8:*/		return 0x8223EC3C;
		  /* 8223EC3Ch */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223EC3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223EC3Ch case    9:*/		return 0x8223EC40;
		  /* 8223EC40h */ case   10:  		/* mr R30, R3 */
		/* 8223EC40h case   10:*/		regs.R30 = regs.R3;
		/* 8223EC40h case   10:*/		return 0x8223EC44;
		  /* 8223EC44h */ case   11:  		/* li R4, 964 */
		/* 8223EC44h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3C4);
		/* 8223EC44h case   11:*/		return 0x8223EC48;
		  /* 8223EC48h */ case   12:  		/* lwz R29, <#[R11 + 1456]> */
		/* 8223EC48h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223EC48h case   12:*/		return 0x8223EC4C;
		  /* 8223EC4Ch */ case   13:  		/* mr R3, R29 */
		/* 8223EC4Ch case   13:*/		regs.R3 = regs.R29;
		/* 8223EC4Ch case   13:*/		return 0x8223EC50;
		  /* 8223EC50h */ case   14:  		/* bl -141208 */
		/* 8223EC50h case   14:*/		regs.LR = 0x8223EC54; return 0x8221C4B8;
		/* 8223EC50h case   14:*/		return 0x8223EC54;
		  /* 8223EC54h */ case   15:  		/* mr R11, R3 */
		/* 8223EC54h case   15:*/		regs.R11 = regs.R3;
		/* 8223EC54h case   15:*/		return 0x8223EC58;
		  /* 8223EC58h */ case   16:  		/* addic. R3, R3, 4 */
		/* 8223EC58h case   16:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 8223EC58h case   16:*/		return 0x8223EC5C;
		  /* 8223EC5Ch */ case   17:  		/* stw R29, <#[R11]> */
		/* 8223EC5Ch case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8223EC5Ch case   17:*/		return 0x8223EC60;
		  /* 8223EC60h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 8223EC60h case   18:*/		if ( regs.CR[0].eq ) { return 0x8223EC70;  }
		/* 8223EC60h case   18:*/		return 0x8223EC64;
		  /* 8223EC64h */ case   19:  		/* lwz R4, <#[R31]> */
		/* 8223EC64h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8223EC64h case   19:*/		return 0x8223EC68;
		  /* 8223EC68h */ case   20:  		/* bl 100248 */
		/* 8223EC68h case   20:*/		regs.LR = 0x8223EC6C; return 0x82257400;
		/* 8223EC68h case   20:*/		return 0x8223EC6C;
		  /* 8223EC6Ch */ case   21:  		/* b 8 */
		/* 8223EC6Ch case   21:*/		return 0x8223EC74;
		/* 8223EC6Ch case   21:*/		return 0x8223EC70;
	}
	return 0x8223EC70;
} // Block from 8223EC18h-8223EC70h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8223EC70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EC70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EC70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EC70);
		  /* 8223EC70h */ case    0:  		/* li R3, 0 */
		/* 8223EC70h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223EC70h case    0:*/		return 0x8223EC74;
	}
	return 0x8223EC74;
} // Block from 8223EC70h-8223EC74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223EC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EC74);
		  /* 8223EC74h */ case    0:  		/* li R11, 0 */
		/* 8223EC74h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223EC74h case    0:*/		return 0x8223EC78;
		  /* 8223EC78h */ case    1:  		/* stw R3, <#[R31 + 128]> */
		/* 8223EC78h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000080) );
		/* 8223EC78h case    1:*/		return 0x8223EC7C;
		  /* 8223EC7Ch */ case    2:  		/* stw R30, <#[R3 + 56]> */
		/* 8223EC7Ch case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000038) );
		/* 8223EC7Ch case    2:*/		return 0x8223EC80;
		  /* 8223EC80h */ case    3:  		/* stw R11, <#[R3 + 80]> */
		/* 8223EC80h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 8223EC80h case    3:*/		return 0x8223EC84;
	}
	return 0x8223EC84;
} // Block from 8223EC74h-8223EC84h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223EC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EC84);
		  /* 8223EC84h */ case    0:  		/* lwz R3, <#[R31 + 128]> */
		/* 8223EC84h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000080) );
		/* 8223EC84h case    0:*/		return 0x8223EC88;
		  /* 8223EC88h */ case    1:  		/* addi R1, R1, 112 */
		/* 8223EC88h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223EC88h case    1:*/		return 0x8223EC8C;
		  /* 8223EC8Ch */ case    2:  		/* b -1759712 */
		/* 8223EC8Ch case    2:*/		return 0x820912AC;
		/* 8223EC8Ch case    2:*/		return 0x8223EC90;
	}
	return 0x8223EC90;
} // Block from 8223EC84h-8223EC90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223EC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EC90);
		  /* 8223EC90h */ case    0:  		/* mfspr R12, LR */
		/* 8223EC90h case    0:*/		regs.R12 = regs.LR;
		/* 8223EC90h case    0:*/		return 0x8223EC94;
		  /* 8223EC94h */ case    1:  		/* bl -1759808 */
		/* 8223EC94h case    1:*/		regs.LR = 0x8223EC98; return 0x82091254;
		/* 8223EC94h case    1:*/		return 0x8223EC98;
		  /* 8223EC98h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8223EC98h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8223EC98h case    2:*/		return 0x8223EC9C;
		  /* 8223EC9Ch */ case    3:  		/* lwz R10, <#[R3 + 16]> */
		/* 8223EC9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 8223EC9Ch case    3:*/		return 0x8223ECA0;
		  /* 8223ECA0h */ case    4:  		/* lis R11, -32252 */
		/* 8223ECA0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223ECA0h case    4:*/		return 0x8223ECA4;
		  /* 8223ECA4h */ case    5:  		/* lis R12, 783 */
		/* 8223ECA4h case    5:*/		cpu::op::lis<0>(regs,&regs.R12,0x30F);
		/* 8223ECA4h case    5:*/		return 0x8223ECA8;
		  /* 8223ECA8h */ case    6:  		/* addi R30, R11, 25976 */
		/* 8223ECA8h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6578);
		/* 8223ECA8h case    6:*/		return 0x8223ECAC;
		  /* 8223ECACh */ case    7:  		/* ori R12, R12, 49279 */
		/* 8223ECACh case    7:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xC07F);
		/* 8223ECACh case    7:*/		return 0x8223ECB0;
		  /* 8223ECB0h */ case    8:  		/* mr R31, R3 */
		/* 8223ECB0h case    8:*/		regs.R31 = regs.R3;
		/* 8223ECB0h case    8:*/		return 0x8223ECB4;
		  /* 8223ECB4h */ case    9:  		/* lwz R11, <#[R10]> */
		/* 8223ECB4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8223ECB4h case    9:*/		return 0x8223ECB8;
		  /* 8223ECB8h */ case   10:  		/* lwz R9, <#[R10 + 8]> */
		/* 8223ECB8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 8223ECB8h case   10:*/		return 0x8223ECBC;
		  /* 8223ECBCh */ case   11:  		/* and R11, R11, R12 */
		/* 8223ECBCh case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 8223ECBCh case   11:*/		return 0x8223ECC0;
		  /* 8223ECC0h */ case   12:  		/* oris R9, R9, 57344 */
		/* 8223ECC0h case   12:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0xE000);
		/* 8223ECC0h case   12:*/		return 0x8223ECC4;
		  /* 8223ECC4h */ case   13:  		/* oris R11, R11, 51200 */
		/* 8223ECC4h case   13:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xC800);
		/* 8223ECC4h case   13:*/		return 0x8223ECC8;
		  /* 8223ECC8h */ case   14:  		/* stw R9, <#[R10 + 8]> */
		/* 8223ECC8h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 8223ECC8h case   14:*/		return 0x8223ECCC;
		  /* 8223ECCCh */ case   15:  		/* mr R8, R9 */
		/* 8223ECCCh case   15:*/		regs.R8 = regs.R9;
		/* 8223ECCCh case   15:*/		return 0x8223ECD0;
		  /* 8223ECD0h */ case   16:  		/* rlwinm R9, R11, 0, 0, 25 */
		/* 8223ECD0h case   16:*/		cpu::op::rlwinm<0,0,0,25>(regs,&regs.R9,regs.R11);
		/* 8223ECD0h case   16:*/		return 0x8223ECD4;
		  /* 8223ECD4h */ case   17:  		/* stw R11, <#[R10]> */
		/* 8223ECD4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8223ECD4h case   17:*/		return 0x8223ECD8;
		  /* 8223ECD8h */ case   18:  		/* lwz R11, <#[R30 + 92]> */
		/* 8223ECD8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000005C) );
		/* 8223ECD8h case   18:*/		return 0x8223ECDC;
		  /* 8223ECDCh */ case   19:  		/* rlwimi R8, R11, 24, 3, 7 */
		/* 8223ECDCh case   19:*/		cpu::op::rlwimi<0,24,3,7>(regs,&regs.R8,regs.R11);
		/* 8223ECDCh case   19:*/		return 0x8223ECE0;
		  /* 8223ECE0h */ case   20:  		/* rlwinm R9, R9, 0, 17, 11 */
		/* 8223ECE0h case   20:*/		cpu::op::rlwinm<0,0,17,11>(regs,&regs.R9,regs.R9);
		/* 8223ECE0h case   20:*/		return 0x8223ECE4;
		  /* 8223ECE4h */ case   21:  		/* stw R8, <#[R10 + 8]> */
		/* 8223ECE4h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 8223ECE4h case   21:*/		return 0x8223ECE8;
		  /* 8223ECE8h */ case   22:  		/* stw R9, <#[R10]> */
		/* 8223ECE8h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8223ECE8h case   22:*/		return 0x8223ECEC;
		  /* 8223ECECh */ case   23:  		/* lwz R10, <#[R3]> */
		/* 8223ECECh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8223ECECh case   23:*/		return 0x8223ECF0;
		  /* 8223ECF0h */ case   24:  		/* lwz R11, <#[R3 + 60]> */
		/* 8223ECF0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000003C) );
		/* 8223ECF0h case   24:*/		return 0x8223ECF4;
		  /* 8223ECF4h */ case   25:  		/* addi R11, R11, 1 */
		/* 8223ECF4h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223ECF4h case   25:*/		return 0x8223ECF8;
		  /* 8223ECF8h */ case   26:  		/* stw R11, <#[R3 + 60]> */
		/* 8223ECF8h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000003C) );
		/* 8223ECF8h case   26:*/		return 0x8223ECFC;
		  /* 8223ECFCh */ case   27:  		/* lwz R10, <#[R10 + 1376]> */
		/* 8223ECFCh case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000560) );
		/* 8223ECFCh case   27:*/		return 0x8223ED00;
		  /* 8223ED00h */ case   28:  		/* mulli R10, R10, 3 */
		/* 8223ED00h case   28:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x3);
		/* 8223ED00h case   28:*/		return 0x8223ED04;
		  /* 8223ED04h */ case   29:  		/* cmpw CR6, R11, R10 */
		/* 8223ED04h case   29:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8223ED04h case   29:*/		return 0x8223ED08;
		  /* 8223ED08h */ case   30:  		/* bc 4, CR6_GT, 40 */
		/* 8223ED08h case   30:*/		if ( !regs.CR[6].gt ) { return 0x8223ED30;  }
		/* 8223ED08h case   30:*/		return 0x8223ED0C;
		  /* 8223ED0Ch */ case   31:  		/* lis R11, -32252 */
		/* 8223ED0Ch case   31:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223ED0Ch case   31:*/		return 0x8223ED10;
		  /* 8223ED10h */ case   32:  		/* lis R10, -32252 */
		/* 8223ED10h case   32:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223ED10h case   32:*/		return 0x8223ED14;
		  /* 8223ED14h */ case   33:  		/* lis R9, -32253 */
		/* 8223ED14h case   33:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223ED14h case   33:*/		return 0x8223ED18;
		  /* 8223ED18h */ case   34:  		/* addi R6, R11, 10344 */
		/* 8223ED18h case   34:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2868);
		/* 8223ED18h case   34:*/		return 0x8223ED1C;
		  /* 8223ED1Ch */ case   35:  		/* addi R5, R10, 10532 */
		/* 8223ED1Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x2924);
		/* 8223ED1Ch case   35:*/		return 0x8223ED20;
		  /* 8223ED20h */ case   36:  		/* addi R4, R9, 27460 */
		/* 8223ED20h case   36:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223ED20h case   36:*/		return 0x8223ED24;
		  /* 8223ED24h */ case   37:  		/* li R7, 109 */
		/* 8223ED24h case   37:*/		cpu::op::li<0>(regs,&regs.R7,0x6D);
		/* 8223ED24h case   37:*/		return 0x8223ED28;
		  /* 8223ED28h */ case   38:  		/* li R3, 0 */
		/* 8223ED28h case   38:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223ED28h case   38:*/		return 0x8223ED2C;
		  /* 8223ED2Ch */ case   39:  		/* bl -946468 */
		/* 8223ED2Ch case   39:*/		regs.LR = 0x8223ED30; return 0x82157C08;
		/* 8223ED2Ch case   39:*/		return 0x8223ED30;
	}
	return 0x8223ED30;
} // Block from 8223EC90h-8223ED30h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8223ED30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223ED30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223ED30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223ED30);
		  /* 8223ED30h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8223ED30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8223ED30h case    0:*/		return 0x8223ED34;
		  /* 8223ED34h */ case    1:  		/* li R27, 12 */
		/* 8223ED34h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0xC);
		/* 8223ED34h case    1:*/		return 0x8223ED38;
		  /* 8223ED38h */ case    2:  		/* lwz R10, <#[R31 + 4]> */
		/* 8223ED38h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8223ED38h case    2:*/		return 0x8223ED3C;
		  /* 8223ED3Ch */ case    3:  		/* li R7, 1 */
		/* 8223ED3Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8223ED3Ch case    3:*/		return 0x8223ED40;
		  /* 8223ED40h */ case    4:  		/* addi R11, R11, 12 */
		/* 8223ED40h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8223ED40h case    4:*/		return 0x8223ED44;
		  /* 8223ED44h */ case    5:  		/* li R5, 0 */
		/* 8223ED44h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223ED44h case    5:*/		return 0x8223ED48;
		  /* 8223ED48h */ case    6:  		/* stw R11, <#[R31 + 16]> */
		/* 8223ED48h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8223ED48h case    6:*/		return 0x8223ED4C;
		  /* 8223ED4Ch */ case    7:  		/* subf R11, R10, R11 */
		/* 8223ED4Ch case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223ED4Ch case    7:*/		return 0x8223ED50;
		  /* 8223ED50h */ case    8:  		/* li R4, 0 */
		/* 8223ED50h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223ED50h case    8:*/		return 0x8223ED54;
		  /* 8223ED54h */ case    9:  		/* divw R11, R11, R27 */
		/* 8223ED54h case    9:*/		cpu::op::divw<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 8223ED54h case    9:*/		return 0x8223ED58;
		  /* 8223ED58h */ case   10:  		/* mr R3, R31 */
		/* 8223ED58h case   10:*/		regs.R3 = regs.R31;
		/* 8223ED58h case   10:*/		return 0x8223ED5C;
		  /* 8223ED5Ch */ case   11:  		/* addi R6, R11, -1 */
		/* 8223ED5Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFFFF);
		/* 8223ED5Ch case   11:*/		return 0x8223ED60;
		  /* 8223ED60h */ case   12:  		/* bl -2072 */
		/* 8223ED60h case   12:*/		regs.LR = 0x8223ED64; return 0x8223E548;
		/* 8223ED60h case   12:*/		return 0x8223ED64;
		  /* 8223ED64h */ case   13:  		/* li R5, 4 */
		/* 8223ED64h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8223ED64h case   13:*/		return 0x8223ED68;
		  /* 8223ED68h */ case   14:  		/* li R4, 45 */
		/* 8223ED68h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8223ED68h case   14:*/		return 0x8223ED6C;
		  /* 8223ED6Ch */ case   15:  		/* lwz R6, <#[R30 + 28]> */
		/* 8223ED6Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x0000001C) );
		/* 8223ED6Ch case   15:*/		return 0x8223ED70;
		  /* 8223ED70h */ case   16:  		/* lwz R3, <#[R31 + 108]> */
		/* 8223ED70h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000006C) );
		/* 8223ED70h case   16:*/		return 0x8223ED74;
		  /* 8223ED74h */ case   17:  		/* bl -946700 */
		/* 8223ED74h case   17:*/		regs.LR = 0x8223ED78; return 0x82157B68;
		/* 8223ED74h case   17:*/		return 0x8223ED78;
		  /* 8223ED78h */ case   18:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223ED78h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223ED78h case   18:*/		return 0x8223ED7C;
		  /* 8223ED7Ch */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 8223ED7Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223ED7Ch case   19:*/		return 0x8223ED80;
		  /* 8223ED80h */ case   20:  		/* bc 12, CR6_EQ, 168 */
		/* 8223ED80h case   20:*/		if ( regs.CR[6].eq ) { return 0x8223EE28;  }
		/* 8223ED80h case   20:*/		return 0x8223ED84;
		  /* 8223ED84h */ case   21:  		/* lwz R10, <#[R31 + 24]> */
		/* 8223ED84h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8223ED84h case   21:*/		return 0x8223ED88;
		  /* 8223ED88h */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 8223ED88h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8223ED88h case   22:*/		return 0x8223ED8C;
		  /* 8223ED8Ch */ case   23:  		/* bc 12, CR6_EQ, 156 */
		/* 8223ED8Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x8223EE28;  }
		/* 8223ED8Ch case   23:*/		return 0x8223ED90;
		  /* 8223ED90h */ case   24:  		/* lwz R29, <#[R31 + 8]> */
		/* 8223ED90h case   24:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000008) );
		/* 8223ED90h case   24:*/		return 0x8223ED94;
		  /* 8223ED94h */ case   25:  		/* li R11, 6 */
		/* 8223ED94h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8223ED94h case   25:*/		return 0x8223ED98;
		  /* 8223ED98h */ case   26:  		/* lwz R10, <#[R31 + 12]> */
		/* 8223ED98h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223ED98h case   26:*/		return 0x8223ED9C;
		  /* 8223ED9Ch */ case   27:  		/* subf R9, R29, R10 */
		/* 8223ED9Ch case   27:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R29,regs.R10);
		/* 8223ED9Ch case   27:*/		return 0x8223EDA0;
		  /* 8223EDA0h */ case   28:  		/* cmplw CR6, R29, R10 */
		/* 8223EDA0h case   28:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 8223EDA0h case   28:*/		return 0x8223EDA4;
		  /* 8223EDA4h */ case   29:  		/* divw R28, R9, R11 */
		/* 8223EDA4h case   29:*/		cpu::op::divw<0>(regs,&regs.R28,regs.R9,regs.R11);
		/* 8223EDA4h case   29:*/		return 0x8223EDA8;
		  /* 8223EDA8h */ case   30:  		/* bc 4, CR6_LT, 84 */
		/* 8223EDA8h case   30:*/		if ( !regs.CR[6].lt ) { return 0x8223EDFC;  }
		/* 8223EDA8h case   30:*/		return 0x8223EDAC;
		  /* 8223EDACh */ case   31:  		/* li R5, 4 */
		/* 8223EDACh case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8223EDACh case   31:*/		return 0x8223EDB0;
		  /* 8223EDB0h */ case   32:  		/* li R4, 45 */
		/* 8223EDB0h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8223EDB0h case   32:*/		return 0x8223EDB4;
		  /* 8223EDB4h */ case   33:  		/* mr R3, R29 */
		/* 8223EDB4h case   33:*/		regs.R3 = regs.R29;
		/* 8223EDB4h case   33:*/		return 0x8223EDB8;
		  /* 8223EDB8h */ case   34:  		/* bl -946856 */
		/* 8223EDB8h case   34:*/		regs.LR = 0x8223EDBC; return 0x82157B10;
		/* 8223EDB8h case   34:*/		return 0x8223EDBC;
		  /* 8223EDBCh */ case   35:  		/* lwz R11, <#[R30 + 56]> */
		/* 8223EDBCh case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 8223EDBCh case   35:*/		return 0x8223EDC0;
		  /* 8223EDC0h */ case   36:  		/* cmplw CR6, R3, R11 */
		/* 8223EDC0h case   36:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8223EDC0h case   36:*/		return 0x8223EDC4;
		  /* 8223EDC4h */ case   37:  		/* bc 4, CR6_EQ, 40 */
		/* 8223EDC4h case   37:*/		if ( !regs.CR[6].eq ) { return 0x8223EDEC;  }
		/* 8223EDC4h case   37:*/		return 0x8223EDC8;
		  /* 8223EDC8h */ case   38:  		/* li R5, 13 */
		/* 8223EDC8h case   38:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 8223EDC8h case   38:*/		return 0x8223EDCC;
		  /* 8223EDCCh */ case   39:  		/* li R4, 1 */
		/* 8223EDCCh case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223EDCCh case   39:*/		return 0x8223EDD0;
		  /* 8223EDD0h */ case   40:  		/* mr R3, R29 */
		/* 8223EDD0h case   40:*/		regs.R3 = regs.R29;
		/* 8223EDD0h case   40:*/		return 0x8223EDD4;
		  /* 8223EDD4h */ case   41:  		/* bl -946884 */
		/* 8223EDD4h case   41:*/		regs.LR = 0x8223EDD8; return 0x82157B10;
		/* 8223EDD4h case   41:*/		return 0x8223EDD8;
		  /* 8223EDD8h */ case   42:  		/* add R6, R3, R28 */
		/* 8223EDD8h case   42:*/		cpu::op::add<0>(regs,&regs.R6,regs.R3,regs.R28);
		/* 8223EDD8h case   42:*/		return 0x8223EDDC;
		  /* 8223EDDCh */ case   43:  		/* li R5, 13 */
		/* 8223EDDCh case   43:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 8223EDDCh case   43:*/		return 0x8223EDE0;
		  /* 8223EDE0h */ case   44:  		/* li R4, 1 */
		/* 8223EDE0h case   44:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223EDE0h case   44:*/		return 0x8223EDE4;
		  /* 8223EDE4h */ case   45:  		/* mr R3, R29 */
		/* 8223EDE4h case   45:*/		regs.R3 = regs.R29;
		/* 8223EDE4h case   45:*/		return 0x8223EDE8;
		  /* 8223EDE8h */ case   46:  		/* bl -946816 */
		/* 8223EDE8h case   46:*/		regs.LR = 0x8223EDEC; return 0x82157B68;
		/* 8223EDE8h case   46:*/		return 0x8223EDEC;
	}
	return 0x8223EDEC;
} // Block from 8223ED30h-8223EDECh (47 instructions)

//////////////////////////////////////////////////////
// Block at 8223EDECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EDEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EDEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EDEC);
		  /* 8223EDECh */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223EDECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223EDECh case    0:*/		return 0x8223EDF0;
		  /* 8223EDF0h */ case    1:  		/* addi R29, R29, 6 */
		/* 8223EDF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x6);
		/* 8223EDF0h case    1:*/		return 0x8223EDF4;
		  /* 8223EDF4h */ case    2:  		/* cmplw CR6, R29, R11 */
		/* 8223EDF4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8223EDF4h case    2:*/		return 0x8223EDF8;
		  /* 8223EDF8h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 8223EDF8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8223EDAC;  }
		/* 8223EDF8h case    3:*/		return 0x8223EDFC;
	}
	return 0x8223EDFC;
} // Block from 8223EDECh-8223EDFCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223EDFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EDFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EDFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EDFC);
		  /* 8223EDFCh */ case    0:  		/* lwz R4, <#[R31 + 20]> */
		/* 8223EDFCh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8223EDFCh case    0:*/		return 0x8223EE00;
		  /* 8223EE00h */ case    1:  		/* lwz R11, <#[R31 + 24]> */
		/* 8223EE00h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8223EE00h case    1:*/		return 0x8223EE04;
		  /* 8223EE04h */ case    2:  		/* lwz R3, <#[R31 + 12]> */
		/* 8223EE04h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223EE04h case    2:*/		return 0x8223EE08;
		  /* 8223EE08h */ case    3:  		/* subf R5, R4, R11 */
		/* 8223EE08h case    3:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R4,regs.R11);
		/* 8223EE08h case    3:*/		return 0x8223EE0C;
		  /* 8223EE0Ch */ case    4:  		/* bl -1758300 */
		/* 8223EE0Ch case    4:*/		regs.LR = 0x8223EE10; return 0x820919B0;
		/* 8223EE0Ch case    4:*/		return 0x8223EE10;
		  /* 8223EE10h */ case    5:  		/* lwz R10, <#[R31 + 24]> */
		/* 8223EE10h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8223EE10h case    5:*/		return 0x8223EE14;
		  /* 8223EE14h */ case    6:  		/* lwz R9, <#[R31 + 20]> */
		/* 8223EE14h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8223EE14h case    6:*/		return 0x8223EE18;
		  /* 8223EE18h */ case    7:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223EE18h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223EE18h case    7:*/		return 0x8223EE1C;
		  /* 8223EE1Ch */ case    8:  		/* subf R10, R9, R10 */
		/* 8223EE1Ch case    8:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8223EE1Ch case    8:*/		return 0x8223EE20;
		  /* 8223EE20h */ case    9:  		/* add R11, R10, R11 */
		/* 8223EE20h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223EE20h case    9:*/		return 0x8223EE24;
		  /* 8223EE24h */ case   10:  		/* stw R11, <#[R31 + 12]> */
		/* 8223EE24h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223EE24h case   10:*/		return 0x8223EE28;
	}
	return 0x8223EE28;
} // Block from 8223EDFCh-8223EE28h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8223EE28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EE28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EE28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EE28);
		  /* 8223EE28h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 8223EE28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8223EE28h case    0:*/		return 0x8223EE2C;
		  /* 8223EE2Ch */ case    1:  		/* srawi R10, R11, 1 */
		/* 8223EE2Ch case    1:*/		cpu::op::srawi<0,1>(regs,&regs.R10,regs.R11);
		/* 8223EE2Ch case    1:*/		return 0x8223EE30;
		  /* 8223EE30h */ case    2:  		/* addze R10, R10 */
		/* 8223EE30h case    2:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8223EE30h case    2:*/		return 0x8223EE34;
		  /* 8223EE34h */ case    3:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 8223EE34h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 8223EE34h case    3:*/		return 0x8223EE38;
		  /* 8223EE38h */ case    4:  		/* subf. R11, R10, R11 */
		/* 8223EE38h case    4:*/		cpu::op::subf<1>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8223EE38h case    4:*/		return 0x8223EE3C;
		  /* 8223EE3Ch */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 8223EE3Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8223EE48;  }
		/* 8223EE3Ch case    5:*/		return 0x8223EE40;
		  /* 8223EE40h */ case    6:  		/* mr R3, R31 */
		/* 8223EE40h case    6:*/		regs.R3 = regs.R31;
		/* 8223EE40h case    6:*/		return 0x8223EE44;
		  /* 8223EE44h */ case    7:  		/* bl -1900 */
		/* 8223EE44h case    7:*/		regs.LR = 0x8223EE48; return 0x8223E6D8;
		/* 8223EE44h case    7:*/		return 0x8223EE48;
	}
	return 0x8223EE48;
} // Block from 8223EE28h-8223EE48h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8223EE48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EE48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EE48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EE48);
		  /* 8223EE48h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8223EE48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8223EE48h case    0:*/		return 0x8223EE4C;
		  /* 8223EE4Ch */ case    1:  		/* lwz R10, <#[R31 + 12]> */
		/* 8223EE4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223EE4Ch case    1:*/		return 0x8223EE50;
		  /* 8223EE50h */ case    2:  		/* mr R29, R11 */
		/* 8223EE50h case    2:*/		regs.R29 = regs.R11;
		/* 8223EE50h case    2:*/		return 0x8223EE54;
		  /* 8223EE54h */ case    3:  		/* subf R9, R11, R10 */
		/* 8223EE54h case    3:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8223EE54h case    3:*/		return 0x8223EE58;
		  /* 8223EE58h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8223EE58h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8223EE58h case    4:*/		return 0x8223EE5C;
		  /* 8223EE5Ch */ case    5:  		/* divwu R28, R9, R27 */
		/* 8223EE5Ch case    5:*/		cpu::op::divwu<0>(regs,&regs.R28,regs.R9,regs.R27);
		/* 8223EE5Ch case    5:*/		return 0x8223EE60;
		  /* 8223EE60h */ case    6:  		/* bc 4, CR6_LT, 144 */
		/* 8223EE60h case    6:*/		if ( !regs.CR[6].lt ) { return 0x8223EEF0;  }
		/* 8223EE60h case    6:*/		return 0x8223EE64;
		  /* 8223EE64h */ case    7:  		/* li R5, 4 */
		/* 8223EE64h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8223EE64h case    7:*/		return 0x8223EE68;
		  /* 8223EE68h */ case    8:  		/* li R4, 45 */
		/* 8223EE68h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8223EE68h case    8:*/		return 0x8223EE6C;
		  /* 8223EE6Ch */ case    9:  		/* mr R3, R29 */
		/* 8223EE6Ch case    9:*/		regs.R3 = regs.R29;
		/* 8223EE6Ch case    9:*/		return 0x8223EE70;
		  /* 8223EE70h */ case   10:  		/* bl -947040 */
		/* 8223EE70h case   10:*/		regs.LR = 0x8223EE74; return 0x82157B10;
		/* 8223EE70h case   10:*/		return 0x8223EE74;
		  /* 8223EE74h */ case   11:  		/* lwz R11, <#[R30 + 24]> */
		/* 8223EE74h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 8223EE74h case   11:*/		return 0x8223EE78;
		  /* 8223EE78h */ case   12:  		/* cmplw CR6, R3, R11 */
		/* 8223EE78h case   12:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8223EE78h case   12:*/		return 0x8223EE7C;
		  /* 8223EE7Ch */ case   13:  		/* bc 12, CR6_EQ, 64 */
		/* 8223EE7Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8223EEBC;  }
		/* 8223EE7Ch case   13:*/		return 0x8223EE80;
		  /* 8223EE80h */ case   14:  		/* lwz R11, <#[R30 + 28]> */
		/* 8223EE80h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8223EE80h case   14:*/		return 0x8223EE84;
		  /* 8223EE84h */ case   15:  		/* cmplw CR6, R3, R11 */
		/* 8223EE84h case   15:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8223EE84h case   15:*/		return 0x8223EE88;
		  /* 8223EE88h */ case   16:  		/* bc 12, CR6_EQ, 52 */
		/* 8223EE88h case   16:*/		if ( regs.CR[6].eq ) { return 0x8223EEBC;  }
		/* 8223EE88h case   16:*/		return 0x8223EE8C;
		  /* 8223EE8Ch */ case   17:  		/* lwz R11, <#[R30 + 32]> */
		/* 8223EE8Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8223EE8Ch case   17:*/		return 0x8223EE90;
		  /* 8223EE90h */ case   18:  		/* cmplw CR6, R3, R11 */
		/* 8223EE90h case   18:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8223EE90h case   18:*/		return 0x8223EE94;
		  /* 8223EE94h */ case   19:  		/* bc 12, CR6_EQ, 40 */
		/* 8223EE94h case   19:*/		if ( regs.CR[6].eq ) { return 0x8223EEBC;  }
		/* 8223EE94h case   19:*/		return 0x8223EE98;
		  /* 8223EE98h */ case   20:  		/* lwz R11, <#[R30 + 36]> */
		/* 8223EE98h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8223EE98h case   20:*/		return 0x8223EE9C;
		  /* 8223EE9Ch */ case   21:  		/* cmplw CR6, R3, R11 */
		/* 8223EE9Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8223EE9Ch case   21:*/		return 0x8223EEA0;
		  /* 8223EEA0h */ case   22:  		/* bc 12, CR6_EQ, 28 */
		/* 8223EEA0h case   22:*/		if ( regs.CR[6].eq ) { return 0x8223EEBC;  }
		/* 8223EEA0h case   22:*/		return 0x8223EEA4;
		  /* 8223EEA4h */ case   23:  		/* lwz R11, <#[R30 + 40]> */
		/* 8223EEA4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 8223EEA4h case   23:*/		return 0x8223EEA8;
		  /* 8223EEA8h */ case   24:  		/* cmplw CR6, R3, R11 */
		/* 8223EEA8h case   24:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8223EEA8h case   24:*/		return 0x8223EEAC;
		  /* 8223EEACh */ case   25:  		/* bc 12, CR6_EQ, 16 */
		/* 8223EEACh case   25:*/		if ( regs.CR[6].eq ) { return 0x8223EEBC;  }
		/* 8223EEACh case   25:*/		return 0x8223EEB0;
		  /* 8223EEB0h */ case   26:  		/* lwz R11, <#[R30 + 44]> */
		/* 8223EEB0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 8223EEB0h case   26:*/		return 0x8223EEB4;
		  /* 8223EEB4h */ case   27:  		/* cmplw CR6, R3, R11 */
		/* 8223EEB4h case   27:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8223EEB4h case   27:*/		return 0x8223EEB8;
		  /* 8223EEB8h */ case   28:  		/* bc 4, CR6_EQ, 40 */
		/* 8223EEB8h case   28:*/		if ( !regs.CR[6].eq ) { return 0x8223EEE0;  }
		/* 8223EEB8h case   28:*/		return 0x8223EEBC;
	}
	return 0x8223EEBC;
} // Block from 8223EE48h-8223EEBCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 8223EEBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EEBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EEBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EEBC);
		  /* 8223EEBCh */ case    0:  		/* li R5, 12 */
		/* 8223EEBCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 8223EEBCh case    0:*/		return 0x8223EEC0;
		  /* 8223EEC0h */ case    1:  		/* li R4, 1 */
		/* 8223EEC0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223EEC0h case    1:*/		return 0x8223EEC4;
		  /* 8223EEC4h */ case    2:  		/* mr R3, R29 */
		/* 8223EEC4h case    2:*/		regs.R3 = regs.R29;
		/* 8223EEC4h case    2:*/		return 0x8223EEC8;
		  /* 8223EEC8h */ case    3:  		/* bl -947128 */
		/* 8223EEC8h case    3:*/		regs.LR = 0x8223EECC; return 0x82157B10;
		/* 8223EEC8h case    3:*/		return 0x8223EECC;
		  /* 8223EECCh */ case    4:  		/* add R6, R3, R28 */
		/* 8223EECCh case    4:*/		cpu::op::add<0>(regs,&regs.R6,regs.R3,regs.R28);
		/* 8223EECCh case    4:*/		return 0x8223EED0;
		  /* 8223EED0h */ case    5:  		/* li R5, 12 */
		/* 8223EED0h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 8223EED0h case    5:*/		return 0x8223EED4;
		  /* 8223EED4h */ case    6:  		/* li R4, 1 */
		/* 8223EED4h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223EED4h case    6:*/		return 0x8223EED8;
		  /* 8223EED8h */ case    7:  		/* mr R3, R29 */
		/* 8223EED8h case    7:*/		regs.R3 = regs.R29;
		/* 8223EED8h case    7:*/		return 0x8223EEDC;
		  /* 8223EEDCh */ case    8:  		/* bl -947060 */
		/* 8223EEDCh case    8:*/		regs.LR = 0x8223EEE0; return 0x82157B68;
		/* 8223EEDCh case    8:*/		return 0x8223EEE0;
	}
	return 0x8223EEE0;
} // Block from 8223EEBCh-8223EEE0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223EEE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EEE0);
		  /* 8223EEE0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8223EEE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223EEE0h case    0:*/		return 0x8223EEE4;
		  /* 8223EEE4h */ case    1:  		/* addi R29, R29, 6 */
		/* 8223EEE4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x6);
		/* 8223EEE4h case    1:*/		return 0x8223EEE8;
		  /* 8223EEE8h */ case    2:  		/* cmplw CR6, R29, R11 */
		/* 8223EEE8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8223EEE8h case    2:*/		return 0x8223EEEC;
		  /* 8223EEECh */ case    3:  		/* bc 12, CR6_LT, -136 */
		/* 8223EEECh case    3:*/		if ( regs.CR[6].lt ) { return 0x8223EE64;  }
		/* 8223EEECh case    3:*/		return 0x8223EEF0;
	}
	return 0x8223EEF0;
} // Block from 8223EEE0h-8223EEF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223EEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EEF0);
		  /* 8223EEF0h */ case    0:  		/* addi R1, R1, 128 */
		/* 8223EEF0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223EEF0h case    0:*/		return 0x8223EEF4;
		  /* 8223EEF4h */ case    1:  		/* b -1760336 */
		/* 8223EEF4h case    1:*/		return 0x820912A4;
		/* 8223EEF4h case    1:*/		return 0x8223EEF8;
	}
	return 0x8223EEF8;
} // Block from 8223EEF0h-8223EEF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223EEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EEF8);
		  /* 8223EEF8h */ case    0:  		/* mfspr R12, LR */
		/* 8223EEF8h case    0:*/		regs.R12 = regs.LR;
		/* 8223EEF8h case    0:*/		return 0x8223EEFC;
		  /* 8223EEFCh */ case    1:  		/* bl -1760420 */
		/* 8223EEFCh case    1:*/		regs.LR = 0x8223EF00; return 0x82091258;
		/* 8223EEFCh case    1:*/		return 0x8223EF00;
		  /* 8223EF00h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8223EF00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8223EF00h case    2:*/		return 0x8223EF04;
		  /* 8223EF04h */ case    3:  		/* mr R29, R3 */
		/* 8223EF04h case    3:*/		regs.R29 = regs.R3;
		/* 8223EF04h case    3:*/		return 0x8223EF08;
		  /* 8223EF08h */ case    4:  		/* lwz R3, <#[R3 + 92]> */
		/* 8223EF08h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000005C) );
		/* 8223EF08h case    4:*/		return 0x8223EF0C;
		  /* 8223EF0Ch */ case    5:  		/* mr R28, R4 */
		/* 8223EF0Ch case    5:*/		regs.R28 = regs.R4;
		/* 8223EF0Ch case    5:*/		return 0x8223EF10;
		  /* 8223EF10h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8223EF10h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8223EF10h case    6:*/		return 0x8223EF14;
		  /* 8223EF14h */ case    7:  		/* bc 12, CR6_EQ, 108 */
		/* 8223EF14h case    7:*/		if ( regs.CR[6].eq ) { return 0x8223EF80;  }
		/* 8223EF14h case    7:*/		return 0x8223EF18;
		  /* 8223EF18h */ case    8:  		/* lwz R11, <#[R3 + 4]> */
		/* 8223EF18h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8223EF18h case    8:*/		return 0x8223EF1C;
		  /* 8223EF1Ch */ case    9:  		/* li R31, 0 */
		/* 8223EF1Ch case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8223EF1Ch case    9:*/		return 0x8223EF20;
	}
	return 0x8223EF20;
} // Block from 8223EEF8h-8223EF20h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223EF20h
// Function '?AssemblerStats@CFG@XGRAPHICS@@QAAXAAVAssembler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EF20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EF20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EF20);
		  /* 8223EF20h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8223EF20h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8223EF20h case    0:*/		return 0x8223EF24;
		  /* 8223EF24h */ case    1:  		/* bc 4, CR6_GT, 92 */
		/* 8223EF24h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8223EF80;  }
		/* 8223EF24h case    1:*/		return 0x8223EF28;
		  /* 8223EF28h */ case    2:  		/* li R30, 0 */
		/* 8223EF28h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223EF28h case    2:*/		return 0x8223EF2C;
		  /* 8223EF2Ch */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 8223EF2Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8223EF2Ch case    3:*/		return 0x8223EF30;
		  /* 8223EF30h */ case    4:  		/* cmplw CR6, R31, R11 */
		/* 8223EF30h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8223EF30h case    4:*/		return 0x8223EF34;
		  /* 8223EF34h */ case    5:  		/* bc 4, CR6_LT, 16 */
		/* 8223EF34h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8223EF44;  }
		/* 8223EF34h case    5:*/		return 0x8223EF38;
		  /* 8223EF38h */ case    6:  		/* lwz R11, <#[R3 + 8]> */
		/* 8223EF38h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8223EF38h case    6:*/		return 0x8223EF3C;
		  /* 8223EF3Ch */ case    7:  		/* add R3, R11, R30 */
		/* 8223EF3Ch case    7:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R30);
		/* 8223EF3Ch case    7:*/		return 0x8223EF40;
		  /* 8223EF40h */ case    8:  		/* b 12 */
		/* 8223EF40h case    8:*/		return 0x8223EF4C;
		/* 8223EF40h case    8:*/		return 0x8223EF44;
	}
	return 0x8223EF44;
} // Block from 8223EF20h-8223EF44h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223EF44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EF44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EF44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EF44);
		  /* 8223EF44h */ case    0:  		/* mr R4, R31 */
		/* 8223EF44h case    0:*/		regs.R4 = regs.R31;
		/* 8223EF44h case    0:*/		return 0x8223EF48;
		  /* 8223EF48h */ case    1:  		/* bl 84856 */
		/* 8223EF48h case    1:*/		regs.LR = 0x8223EF4C; return 0x82253AC0;
		/* 8223EF48h case    1:*/		return 0x8223EF4C;
	}
	return 0x8223EF4C;
} // Block from 8223EF44h-8223EF4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223EF4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EF4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EF4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EF4C);
		  /* 8223EF4Ch */ case    0:  		/* lwz R3, <#[R3]> */
		/* 8223EF4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8223EF4Ch case    0:*/		return 0x8223EF50;
		  /* 8223EF50h */ case    1:  		/* mr R4, R28 */
		/* 8223EF50h case    1:*/		regs.R4 = regs.R28;
		/* 8223EF50h case    1:*/		return 0x8223EF54;
		  /* 8223EF54h */ case    2:  		/* lwz R5, <#[R29]> */
		/* 8223EF54h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000000) );
		/* 8223EF54h case    2:*/		return 0x8223EF58;
		  /* 8223EF58h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8223EF58h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223EF58h case    3:*/		return 0x8223EF5C;
		  /* 8223EF5Ch */ case    4:  		/* lwz R11, <#[R11]> */
		/* 8223EF5Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8223EF5Ch case    4:*/		return 0x8223EF60;
		  /* 8223EF60h */ case    5:  		/* mtspr CTR, R11 */
		/* 8223EF60h case    5:*/		regs.CTR = regs.R11;
		/* 8223EF60h case    5:*/		return 0x8223EF64;
		  /* 8223EF64h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8223EF64h case    6:*/		if ( 1 ) { regs.LR = 0x8223EF68; return (uint32)regs.CTR; }
		/* 8223EF64h case    6:*/		return 0x8223EF68;
		  /* 8223EF68h */ case    7:  		/* lwz R3, <#[R29 + 92]> */
		/* 8223EF68h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000005C) );
		/* 8223EF68h case    7:*/		return 0x8223EF6C;
		  /* 8223EF6Ch */ case    8:  		/* addi R31, R31, 1 */
		/* 8223EF6Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8223EF6Ch case    8:*/		return 0x8223EF70;
		  /* 8223EF70h */ case    9:  		/* addi R30, R30, 4 */
		/* 8223EF70h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8223EF70h case    9:*/		return 0x8223EF74;
		  /* 8223EF74h */ case   10:  		/* lwz R11, <#[R3 + 4]> */
		/* 8223EF74h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8223EF74h case   10:*/		return 0x8223EF78;
		  /* 8223EF78h */ case   11:  		/* cmplw CR6, R31, R11 */
		/* 8223EF78h case   11:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8223EF78h case   11:*/		return 0x8223EF7C;
		  /* 8223EF7Ch */ case   12:  		/* bc 12, CR6_LT, -80 */
		/* 8223EF7Ch case   12:*/		if ( regs.CR[6].lt ) { return 0x8223EF2C;  }
		/* 8223EF7Ch case   12:*/		return 0x8223EF80;
	}
	return 0x8223EF80;
} // Block from 8223EF4Ch-8223EF80h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223EF80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EF80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EF80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EF80);
		  /* 8223EF80h */ case    0:  		/* addi R1, R1, 128 */
		/* 8223EF80h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223EF80h case    0:*/		return 0x8223EF84;
		  /* 8223EF84h */ case    1:  		/* b -1760476 */
		/* 8223EF84h case    1:*/		return 0x820912A8;
		/* 8223EF84h case    1:*/		return 0x8223EF88;
	}
	return 0x8223EF88;
} // Block from 8223EF80h-8223EF88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223EF88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223EF88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223EF88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223EF88);
		  /* 8223EF88h */ case    0:  		/* mfspr R12, LR */
		/* 8223EF88h case    0:*/		regs.R12 = regs.LR;
		/* 8223EF88h case    0:*/		return 0x8223EF8C;
		  /* 8223EF8Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223EF8Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223EF8Ch case    1:*/		return 0x8223EF90;
		  /* 8223EF90h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223EF90h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223EF90h case    2:*/		return 0x8223EF94;
		  /* 8223EF94h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223EF94h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223EF94h case    3:*/		return 0x8223EF98;
		  /* 8223EF98h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223EF98h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223EF98h case    4:*/		return 0x8223EF9C;
		  /* 8223EF9Ch */ case    5:  		/* li R11, 0 */
		/* 8223EF9Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223EF9Ch case    5:*/		return 0x8223EFA0;
		  /* 8223EFA0h */ case    6:  		/* mr R31, R3 */
		/* 8223EFA0h case    6:*/		regs.R31 = regs.R3;
		/* 8223EFA0h case    6:*/		return 0x8223EFA4;
		  /* 8223EFA4h */ case    7:  		/* stb R11, <#[R4]> */
		/* 8223EFA4h case    7:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8223EFA4h case    7:*/		return 0x8223EFA8;
		  /* 8223EFA8h */ case    8:  		/* mr R30, R4 */
		/* 8223EFA8h case    8:*/		regs.R30 = regs.R4;
		/* 8223EFA8h case    8:*/		return 0x8223EFAC;
		  /* 8223EFACh */ case    9:  		/* lwz R11, <#[R3 + 148]> */
		/* 8223EFACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000094) );
		/* 8223EFACh case    9:*/		return 0x8223EFB0;
		  /* 8223EFB0h */ case   10:  		/* addi R3, R11, 20 */
		/* 8223EFB0h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x14);
		/* 8223EFB0h case   10:*/		return 0x8223EFB4;
		  /* 8223EFB4h */ case   11:  		/* bl 84140 */
		/* 8223EFB4h case   11:*/		regs.LR = 0x8223EFB8; return 0x82253860;
		/* 8223EFB4h case   11:*/		return 0x8223EFB8;
		  /* 8223EFB8h */ case   12:  		/* cmpwi CR6, R3, 2 */
		/* 8223EFB8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8223EFB8h case   12:*/		return 0x8223EFBC;
		  /* 8223EFBCh */ case   13:  		/* bc 12, CR6_GT, 248 */
		/* 8223EFBCh case   13:*/		if ( regs.CR[6].gt ) { return 0x8223F0B4;  }
		/* 8223EFBCh case   13:*/		return 0x8223EFC0;
		  /* 8223EFC0h */ case   14:  		/* lwz R11, <#[R31 + 144]> */
		/* 8223EFC0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000090) );
		/* 8223EFC0h case   14:*/		return 0x8223EFC4;
		  /* 8223EFC4h */ case   15:  		/* addi R3, R11, 20 */
		/* 8223EFC4h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x14);
		/* 8223EFC4h case   15:*/		return 0x8223EFC8;
		  /* 8223EFC8h */ case   16:  		/* bl 84120 */
		/* 8223EFC8h case   16:*/		regs.LR = 0x8223EFCC; return 0x82253860;
		/* 8223EFC8h case   16:*/		return 0x8223EFCC;
		  /* 8223EFCCh */ case   17:  		/* cmpwi CR6, R3, 2 */
		/* 8223EFCCh case   17:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8223EFCCh case   17:*/		return 0x8223EFD0;
		  /* 8223EFD0h */ case   18:  		/* bc 12, CR6_GT, 228 */
		/* 8223EFD0h case   18:*/		if ( regs.CR[6].gt ) { return 0x8223F0B4;  }
		/* 8223EFD0h case   18:*/		return 0x8223EFD4;
		  /* 8223EFD4h */ case   19:  		/* lwz R3, <#[R31 + 148]> */
		/* 8223EFD4h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000094) );
		/* 8223EFD4h case   19:*/		return 0x8223EFD8;
		  /* 8223EFD8h */ case   20:  		/* bl 107728 */
		/* 8223EFD8h case   20:*/		regs.LR = 0x8223EFDC; return 0x822594A8;
		/* 8223EFD8h case   20:*/		return 0x8223EFDC;
		  /* 8223EFDCh */ case   21:  		/* cmpwi CR6, R3, 1 */
		/* 8223EFDCh case   21:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223EFDCh case   21:*/		return 0x8223EFE0;
		  /* 8223EFE0h */ case   22:  		/* bc 4, CR6_EQ, 212 */
		/* 8223EFE0h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8223F0B4;  }
		/* 8223EFE0h case   22:*/		return 0x8223EFE4;
		  /* 8223EFE4h */ case   23:  		/* lwz R11, <#[R31 + 148]> */
		/* 8223EFE4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000094) );
		/* 8223EFE4h case   23:*/		return 0x8223EFE8;
		  /* 8223EFE8h */ case   24:  		/* lwz R11, <#[R11 + 56]> */
		/* 8223EFE8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 8223EFE8h case   24:*/		return 0x8223EFEC;
		  /* 8223EFECh */ case   25:  		/* lwz R10, <#[R11 + 4]> */
		/* 8223EFECh case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8223EFECh case   25:*/		return 0x8223EFF0;
		  /* 8223EFF0h */ case   26:  		/* cmplwi CR6, R10, 0 */
		/* 8223EFF0h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8223EFF0h case   26:*/		return 0x8223EFF4;
		  /* 8223EFF4h */ case   27:  		/* bc 4, CR6_GT, 12 */
		/* 8223EFF4h case   27:*/		if ( !regs.CR[6].gt ) { return 0x8223F000;  }
		/* 8223EFF4h case   27:*/		return 0x8223EFF8;
		  /* 8223EFF8h */ case   28:  		/* lwz R11, <#[R11 + 8]> */
		/* 8223EFF8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8223EFF8h case   28:*/		return 0x8223EFFC;
		  /* 8223EFFCh */ case   29:  		/* b 8 */
		/* 8223EFFCh case   29:*/		return 0x8223F004;
		/* 8223EFFCh case   29:*/		return 0x8223F000;
	}
	return 0x8223F000;
} // Block from 8223EF88h-8223F000h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8223F000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F000);
		  /* 8223F000h */ case    0:  		/* li R11, 0 */
		/* 8223F000h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223F000h case    0:*/		return 0x8223F004;
	}
	return 0x8223F004;
} // Block from 8223F000h-8223F004h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223F004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F004);
		  /* 8223F004h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 8223F004h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8223F004h case    0:*/		return 0x8223F008;
		  /* 8223F008h */ case    1:  		/* lwz R10, <#[R31 + 152]> */
		/* 8223F008h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000098) );
		/* 8223F008h case    1:*/		return 0x8223F00C;
		  /* 8223F00Ch */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 8223F00Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8223F00Ch case    2:*/		return 0x8223F010;
		  /* 8223F010h */ case    3:  		/* bc 4, CR6_EQ, 164 */
		/* 8223F010h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8223F0B4;  }
		/* 8223F010h case    3:*/		return 0x8223F014;
		  /* 8223F014h */ case    4:  		/* lwz R3, <#[R31 + 144]> */
		/* 8223F014h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000090) );
		/* 8223F014h case    4:*/		return 0x8223F018;
		  /* 8223F018h */ case    5:  		/* bl 107664 */
		/* 8223F018h case    5:*/		regs.LR = 0x8223F01C; return 0x822594A8;
		/* 8223F018h case    5:*/		return 0x8223F01C;
		  /* 8223F01Ch */ case    6:  		/* cmpwi CR6, R3, 1 */
		/* 8223F01Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8223F01Ch case    6:*/		return 0x8223F020;
		  /* 8223F020h */ case    7:  		/* bc 4, CR6_EQ, 148 */
		/* 8223F020h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8223F0B4;  }
		/* 8223F020h case    7:*/		return 0x8223F024;
		  /* 8223F024h */ case    8:  		/* lwz R11, <#[R31 + 144]> */
		/* 8223F024h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000090) );
		/* 8223F024h case    8:*/		return 0x8223F028;
		  /* 8223F028h */ case    9:  		/* lwz R11, <#[R11 + 56]> */
		/* 8223F028h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 8223F028h case    9:*/		return 0x8223F02C;
		  /* 8223F02Ch */ case   10:  		/* lwz R10, <#[R11 + 4]> */
		/* 8223F02Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8223F02Ch case   10:*/		return 0x8223F030;
		  /* 8223F030h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 8223F030h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8223F030h case   11:*/		return 0x8223F034;
		  /* 8223F034h */ case   12:  		/* bc 4, CR6_GT, 12 */
		/* 8223F034h case   12:*/		if ( !regs.CR[6].gt ) { return 0x8223F040;  }
		/* 8223F034h case   12:*/		return 0x8223F038;
		  /* 8223F038h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 8223F038h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8223F038h case   13:*/		return 0x8223F03C;
		  /* 8223F03Ch */ case   14:  		/* b 8 */
		/* 8223F03Ch case   14:*/		return 0x8223F044;
		/* 8223F03Ch case   14:*/		return 0x8223F040;
	}
	return 0x8223F040;
} // Block from 8223F004h-8223F040h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223F040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F040);
		  /* 8223F040h */ case    0:  		/* li R11, 0 */
		/* 8223F040h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223F040h case    0:*/		return 0x8223F044;
	}
	return 0x8223F044;
} // Block from 8223F040h-8223F044h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223F044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F044);
		  /* 8223F044h */ case    0:  		/* lwz R3, <#[R11]> */
		/* 8223F044h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 8223F044h case    0:*/		return 0x8223F048;
		  /* 8223F048h */ case    1:  		/* lwz R11, <#[R3]> */
		/* 8223F048h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223F048h case    1:*/		return 0x8223F04C;
		  /* 8223F04Ch */ case    2:  		/* lwz R11, <#[R11 + 28]> */
		/* 8223F04Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8223F04Ch case    2:*/		return 0x8223F050;
		  /* 8223F050h */ case    3:  		/* mtspr CTR, R11 */
		/* 8223F050h case    3:*/		regs.CTR = regs.R11;
		/* 8223F050h case    3:*/		return 0x8223F054;
		  /* 8223F054h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8223F054h case    4:*/		if ( 1 ) { regs.LR = 0x8223F058; return (uint32)regs.CTR; }
		/* 8223F054h case    4:*/		return 0x8223F058;
		  /* 8223F058h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F058h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F058h case    5:*/		return 0x8223F05C;
		  /* 8223F05Ch */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 8223F05Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x8223F068;  }
		/* 8223F05Ch case    6:*/		return 0x8223F060;
		  /* 8223F060h */ case    7:  		/* li R3, 1 */
		/* 8223F060h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223F060h case    7:*/		return 0x8223F064;
		  /* 8223F064h */ case    8:  		/* b 84 */
		/* 8223F064h case    8:*/		return 0x8223F0B8;
		/* 8223F064h case    8:*/		return 0x8223F068;
	}
	return 0x8223F068;
} // Block from 8223F044h-8223F068h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223F068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F068);
		  /* 8223F068h */ case    0:  		/* lwz R11, <#[R31 + 144]> */
		/* 8223F068h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000090) );
		/* 8223F068h case    0:*/		return 0x8223F06C;
		  /* 8223F06Ch */ case    1:  		/* lwz R11, <#[R11 + 56]> */
		/* 8223F06Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 8223F06Ch case    1:*/		return 0x8223F070;
		  /* 8223F070h */ case    2:  		/* lwz R10, <#[R11 + 4]> */
		/* 8223F070h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8223F070h case    2:*/		return 0x8223F074;
		  /* 8223F074h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8223F074h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8223F074h case    3:*/		return 0x8223F078;
		  /* 8223F078h */ case    4:  		/* bc 4, CR6_GT, 12 */
		/* 8223F078h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8223F084;  }
		/* 8223F078h case    4:*/		return 0x8223F07C;
		  /* 8223F07Ch */ case    5:  		/* lwz R11, <#[R11 + 8]> */
		/* 8223F07Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8223F07Ch case    5:*/		return 0x8223F080;
		  /* 8223F080h */ case    6:  		/* b 8 */
		/* 8223F080h case    6:*/		return 0x8223F088;
		/* 8223F080h case    6:*/		return 0x8223F084;
	}
	return 0x8223F084;
} // Block from 8223F068h-8223F084h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223F084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F084);
		  /* 8223F084h */ case    0:  		/* li R11, 0 */
		/* 8223F084h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223F084h case    0:*/		return 0x8223F088;
	}
	return 0x8223F088;
} // Block from 8223F084h-8223F088h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223F088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F088);
		  /* 8223F088h */ case    0:  		/* lwz R3, <#[R11]> */
		/* 8223F088h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 8223F088h case    0:*/		return 0x8223F08C;
		  /* 8223F08Ch */ case    1:  		/* lwz R11, <#[R3]> */
		/* 8223F08Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223F08Ch case    1:*/		return 0x8223F090;
		  /* 8223F090h */ case    2:  		/* lwz R11, <#[R11 + 32]> */
		/* 8223F090h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 8223F090h case    2:*/		return 0x8223F094;
		  /* 8223F094h */ case    3:  		/* mtspr CTR, R11 */
		/* 8223F094h case    3:*/		regs.CTR = regs.R11;
		/* 8223F094h case    3:*/		return 0x8223F098;
		  /* 8223F098h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8223F098h case    4:*/		if ( 1 ) { regs.LR = 0x8223F09C; return (uint32)regs.CTR; }
		/* 8223F098h case    4:*/		return 0x8223F09C;
		  /* 8223F09Ch */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F09Ch case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F09Ch case    5:*/		return 0x8223F0A0;
		  /* 8223F0A0h */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 8223F0A0h case    6:*/		if ( regs.CR[0].eq ) { return 0x8223F0B4;  }
		/* 8223F0A0h case    6:*/		return 0x8223F0A4;
		  /* 8223F0A4h */ case    7:  		/* li R11, 1 */
		/* 8223F0A4h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223F0A4h case    7:*/		return 0x8223F0A8;
	}
	return 0x8223F0A8;
} // Block from 8223F088h-8223F0A8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8223F0A8h
// Function '?EmitExec_base@Assembler@XGRAPHICS@@QAAXIIHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F0A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F0A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F0A8);
		  /* 8223F0A8h */ case    0:  		/* li R3, 1 */
		/* 8223F0A8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223F0A8h case    0:*/		return 0x8223F0AC;
		  /* 8223F0ACh */ case    1:  		/* stb R11, <#[R30]> */
		/* 8223F0ACh case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223F0ACh case    1:*/		return 0x8223F0B0;
		  /* 8223F0B0h */ case    2:  		/* b 8 */
		/* 8223F0B0h case    2:*/		return 0x8223F0B8;
		/* 8223F0B0h case    2:*/		return 0x8223F0B4;
	}
	return 0x8223F0B4;
} // Block from 8223F0A8h-8223F0B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223F0B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F0B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F0B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F0B4);
		  /* 8223F0B4h */ case    0:  		/* li R3, 0 */
		/* 8223F0B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223F0B4h case    0:*/		return 0x8223F0B8;
	}
	return 0x8223F0B8;
} // Block from 8223F0B4h-8223F0B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223F0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F0B8);
		  /* 8223F0B8h */ case    0:  		/* addi R1, R1, 112 */
		/* 8223F0B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223F0B8h case    0:*/		return 0x8223F0BC;
		  /* 8223F0BCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223F0BCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223F0BCh case    1:*/		return 0x8223F0C0;
		  /* 8223F0C0h */ case    2:  		/* mtspr LR, R12 */
		/* 8223F0C0h case    2:*/		regs.LR = regs.R12;
		/* 8223F0C0h case    2:*/		return 0x8223F0C4;
		  /* 8223F0C4h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8223F0C4h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223F0C4h case    3:*/		return 0x8223F0C8;
		  /* 8223F0C8h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8223F0C8h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223F0C8h case    4:*/		return 0x8223F0CC;
		  /* 8223F0CCh */ case    5:  		/* bclr 20, CR0_LT */
		/* 8223F0CCh case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223F0CCh case    5:*/		return 0x8223F0D0;
	}
	return 0x8223F0D0;
} // Block from 8223F0B8h-8223F0D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223F0D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F0D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F0D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F0D0);
		  /* 8223F0D0h */ case    0:  		/* mfspr R12, LR */
		/* 8223F0D0h case    0:*/		regs.R12 = regs.LR;
		/* 8223F0D0h case    0:*/		return 0x8223F0D4;
		  /* 8223F0D4h */ case    1:  		/* bl -1760896 */
		/* 8223F0D4h case    1:*/		regs.LR = 0x8223F0D8; return 0x82091254;
		/* 8223F0D4h case    1:*/		return 0x8223F0D8;
		  /* 8223F0D8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8223F0D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8223F0D8h case    2:*/		return 0x8223F0DC;
		  /* 8223F0DCh */ case    3:  		/* mr R30, R3 */
		/* 8223F0DCh case    3:*/		regs.R30 = regs.R3;
		/* 8223F0DCh case    3:*/		return 0x8223F0E0;
		  /* 8223F0E0h */ case    4:  		/* mr R29, R4 */
		/* 8223F0E0h case    4:*/		regs.R29 = regs.R4;
		/* 8223F0E0h case    4:*/		return 0x8223F0E4;
		  /* 8223F0E4h */ case    5:  		/* mr R4, R6 */
		/* 8223F0E4h case    5:*/		regs.R4 = regs.R6;
		/* 8223F0E4h case    5:*/		return 0x8223F0E8;
		  /* 8223F0E8h */ case    6:  		/* li R3, 49 */
		/* 8223F0E8h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 8223F0E8h case    6:*/		return 0x8223F0EC;
		  /* 8223F0ECh */ case    7:  		/* mr R28, R5 */
		/* 8223F0ECh case    7:*/		regs.R28 = regs.R5;
		/* 8223F0ECh case    7:*/		return 0x8223F0F0;
		  /* 8223F0F0h */ case    8:  		/* bl 93760 */
		/* 8223F0F0h case    8:*/		regs.LR = 0x8223F0F4; return 0x82255F30;
		/* 8223F0F0h case    8:*/		return 0x8223F0F4;
		  /* 8223F0F4h */ case    9:  		/* li R31, 0 */
		/* 8223F0F4h case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8223F0F4h case    9:*/		return 0x8223F0F8;
		  /* 8223F0F8h */ case   10:  		/* stw R29, <#[R3 + 56]> */
		/* 8223F0F8h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000038) );
		/* 8223F0F8h case   10:*/		return 0x8223F0FC;
		  /* 8223F0FCh */ case   11:  		/* mr R5, R28 */
		/* 8223F0FCh case   11:*/		regs.R5 = regs.R28;
		/* 8223F0FCh case   11:*/		return 0x8223F100;
		  /* 8223F100h */ case   12:  		/* stw R31, <#[R3 + 80]> */
		/* 8223F100h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000050) );
		/* 8223F100h case   12:*/		return 0x8223F104;
		  /* 8223F104h */ case   13:  		/* li R4, 1 */
		/* 8223F104h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223F104h case   13:*/		return 0x8223F108;
		  /* 8223F108h */ case   14:  		/* mr R27, R3 */
		/* 8223F108h case   14:*/		regs.R27 = regs.R3;
		/* 8223F108h case   14:*/		return 0x8223F10C;
		  /* 8223F10Ch */ case   15:  		/* bl -37308 */
		/* 8223F10Ch case   15:*/		regs.LR = 0x8223F110; return 0x82235F50;
		/* 8223F10Ch case   15:*/		return 0x8223F110;
		  /* 8223F110h */ case   16:  		/* lwz R11, <#[R30 + 228]> */
		/* 8223F110h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000E4) );
		/* 8223F110h case   16:*/		return 0x8223F114;
		  /* 8223F114h */ case   17:  		/* stw R29, <#[R30 + 56]> */
		/* 8223F114h case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000038) );
		/* 8223F114h case   17:*/		return 0x8223F118;
		  /* 8223F118h */ case   18:  		/* mr R3, R27 */
		/* 8223F118h case   18:*/		regs.R3 = regs.R27;
		/* 8223F118h case   18:*/		return 0x8223F11C;
		  /* 8223F11Ch */ case   19:  		/* rlwinm R11, R11, 0, 25, 23 */
		/* 8223F11Ch case   19:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R11,regs.R11);
		/* 8223F11Ch case   19:*/		return 0x8223F120;
		  /* 8223F120h */ case   20:  		/* stw R31, <#[R30 + 80]> */
		/* 8223F120h case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000050) );
		/* 8223F120h case   20:*/		return 0x8223F124;
		  /* 8223F124h */ case   21:  		/* stw R11, <#[R30 + 228]> */
		/* 8223F124h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000000E4) );
		/* 8223F124h case   21:*/		return 0x8223F128;
		  /* 8223F128h */ case   22:  		/* addi R1, R1, 128 */
		/* 8223F128h case   22:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223F128h case   22:*/		return 0x8223F12C;
		  /* 8223F12Ch */ case   23:  		/* b -1760904 */
		/* 8223F12Ch case   23:*/		return 0x820912A4;
		/* 8223F12Ch case   23:*/		return 0x8223F130;
	}
	return 0x8223F130;
} // Block from 8223F0D0h-8223F130h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8223F130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F130);
		  /* 8223F130h */ case    0:  		/* mfspr R12, LR */
		/* 8223F130h case    0:*/		regs.R12 = regs.LR;
		/* 8223F130h case    0:*/		return 0x8223F134;
		  /* 8223F134h */ case    1:  		/* bl -1760984 */
		/* 8223F134h case    1:*/		regs.LR = 0x8223F138; return 0x8209125C;
		/* 8223F134h case    1:*/		return 0x8223F138;
		  /* 8223F138h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8223F138h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8223F138h case    2:*/		return 0x8223F13C;
		  /* 8223F13Ch */ case    3:  		/* lwz R9, <#[R3 + 128]> */
		/* 8223F13Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000080) );
		/* 8223F13Ch case    3:*/		return 0x8223F140;
		  /* 8223F140h */ case    4:  		/* li R10, 4 */
		/* 8223F140h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 8223F140h case    4:*/		return 0x8223F144;
		  /* 8223F144h */ case    5:  		/* mr R31, R4 */
		/* 8223F144h case    5:*/		regs.R31 = regs.R4;
		/* 8223F144h case    5:*/		return 0x8223F148;
		  /* 8223F148h */ case    6:  		/* mr R30, R5 */
		/* 8223F148h case    6:*/		regs.R30 = regs.R5;
		/* 8223F148h case    6:*/		return 0x8223F14C;
		  /* 8223F14Ch */ case    7:  		/* li R11, 0 */
		/* 8223F14Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8223F14Ch case    7:*/		return 0x8223F150;
		  /* 8223F150h */ case    8:  		/* stw R9, <#[R1 + 80]> */
		/* 8223F150h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8223F150h case    8:*/		return 0x8223F154;
		  /* 8223F154h */ case    9:  		/* mtspr CTR, R10 */
		/* 8223F154h case    9:*/		regs.CTR = regs.R10;
		/* 8223F154h case    9:*/		return 0x8223F158;
		  /* 8223F158h */ case   10:  		/* addi R10, R1, 80 */
		/* 8223F158h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 8223F158h case   10:*/		return 0x8223F15C;
		  /* 8223F15Ch */ case   11:  		/* add R10, R11, R10 */
		/* 8223F15Ch case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8223F15Ch case   11:*/		return 0x8223F160;
		  /* 8223F160h */ case   12:  		/* addi R11, R11, 1 */
		/* 8223F160h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223F160h case   12:*/		return 0x8223F164;
		  /* 8223F164h */ case   13:  		/* lbz R9, <#[R10]> */
		/* 8223F164h case   13:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8223F164h case   13:*/		return 0x8223F168;
		  /* 8223F168h */ case   14:  		/* addi R9, R9, -1 */
		/* 8223F168h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8223F168h case   14:*/		return 0x8223F16C;
		  /* 8223F16Ch */ case   15:  		/* addic R8, R9, -1 */
		/* 8223F16Ch case   15:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R9,0xFFFFFFFF);
		/* 8223F16Ch case   15:*/		return 0x8223F170;
		  /* 8223F170h */ case   16:  		/* subfe R9, R8, R9 */
		/* 8223F170h case   16:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8223F170h case   16:*/		return 0x8223F174;
		  /* 8223F174h */ case   17:  		/* stb R9, <#[R10]> */
		/* 8223F174h case   17:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8223F174h case   17:*/		return 0x8223F178;
		  /* 8223F178h */ case   18:  		/* bc 16, CR0_LT, -32 */
		/* 8223F178h case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8223F158;  }
		/* 8223F178h case   18:*/		return 0x8223F17C;
		  /* 8223F17Ch */ case   19:  		/* mr R4, R6 */
		/* 8223F17Ch case   19:*/		regs.R4 = regs.R6;
		/* 8223F17Ch case   19:*/		return 0x8223F180;
	}
	return 0x8223F180;
} // Block from 8223F130h-8223F180h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8223F180h
// Function '?EmitAlloc@Assembler@XGRAPHICS@@QAAXHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F180);
		  /* 8223F180h */ case    0:  		/* li R3, 49 */
		/* 8223F180h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x31);
		/* 8223F180h case    0:*/		return 0x8223F184;
		  /* 8223F184h */ case    1:  		/* bl 93612 */
		/* 8223F184h case    1:*/		regs.LR = 0x8223F188; return 0x82255F30;
		/* 8223F184h case    1:*/		return 0x8223F188;
		  /* 8223F188h */ case    2:  		/* lwz R11, <#[R1 + 80]> */
		/* 8223F188h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8223F188h case    2:*/		return 0x8223F18C;
		  /* 8223F18Ch */ case    3:  		/* li R10, 0 */
		/* 8223F18Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8223F18Ch case    3:*/		return 0x8223F190;
		  /* 8223F190h */ case    4:  		/* stw R31, <#[R3 + 56]> */
		/* 8223F190h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000038) );
		/* 8223F190h case    4:*/		return 0x8223F194;
		  /* 8223F194h */ case    5:  		/* mr R5, R30 */
		/* 8223F194h case    5:*/		regs.R5 = regs.R30;
		/* 8223F194h case    5:*/		return 0x8223F198;
		  /* 8223F198h */ case    6:  		/* stw R10, <#[R3 + 80]> */
		/* 8223F198h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000050) );
		/* 8223F198h case    6:*/		return 0x8223F19C;
		  /* 8223F19Ch */ case    7:  		/* li R4, 1 */
		/* 8223F19Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223F19Ch case    7:*/		return 0x8223F1A0;
		  /* 8223F1A0h */ case    8:  		/* mr R29, R3 */
		/* 8223F1A0h case    8:*/		regs.R29 = regs.R3;
		/* 8223F1A0h case    8:*/		return 0x8223F1A4;
		  /* 8223F1A4h */ case    9:  		/* stw R11, <#[R3 + 128]> */
		/* 8223F1A4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 8223F1A4h case    9:*/		return 0x8223F1A8;
		  /* 8223F1A8h */ case   10:  		/* bl -37464 */
		/* 8223F1A8h case   10:*/		regs.LR = 0x8223F1AC; return 0x82235F50;
		/* 8223F1A8h case   10:*/		return 0x8223F1AC;
		  /* 8223F1ACh */ case   11:  		/* mr R3, R29 */
		/* 8223F1ACh case   11:*/		regs.R3 = regs.R29;
		/* 8223F1ACh case   11:*/		return 0x8223F1B0;
		  /* 8223F1B0h */ case   12:  		/* addi R1, R1, 128 */
		/* 8223F1B0h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223F1B0h case   12:*/		return 0x8223F1B4;
		  /* 8223F1B4h */ case   13:  		/* b -1761032 */
		/* 8223F1B4h case   13:*/		return 0x820912AC;
		/* 8223F1B4h case   13:*/		return 0x8223F1B8;
	}
	return 0x8223F1B8;
} // Block from 8223F180h-8223F1B8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223F1B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F1B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F1B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F1B8);
		  /* 8223F1B8h */ case    0:  		/* mfspr R12, LR */
		/* 8223F1B8h case    0:*/		regs.R12 = regs.LR;
		/* 8223F1B8h case    0:*/		return 0x8223F1BC;
		  /* 8223F1BCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223F1BCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223F1BCh case    1:*/		return 0x8223F1C0;
		  /* 8223F1C0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223F1C0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223F1C0h case    2:*/		return 0x8223F1C4;
		  /* 8223F1C4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223F1C4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223F1C4h case    3:*/		return 0x8223F1C8;
		  /* 8223F1C8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223F1C8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223F1C8h case    4:*/		return 0x8223F1CC;
		  /* 8223F1CCh */ case    5:  		/* lwz R11, <#[R3 + 228]> */
		/* 8223F1CCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000E4) );
		/* 8223F1CCh case    5:*/		return 0x8223F1D0;
		  /* 8223F1D0h */ case    6:  		/* mr R31, R3 */
		/* 8223F1D0h case    6:*/		regs.R31 = regs.R3;
		/* 8223F1D0h case    6:*/		return 0x8223F1D4;
		  /* 8223F1D4h */ case    7:  		/* mr R30, R4 */
		/* 8223F1D4h case    7:*/		regs.R30 = regs.R4;
		/* 8223F1D4h case    7:*/		return 0x8223F1D8;
		  /* 8223F1D8h */ case    8:  		/* rlwinm. R11, R11, 23, 31, 31 */
		/* 8223F1D8h case    8:*/		cpu::op::rlwinm<1,23,31,31>(regs,&regs.R11,regs.R11);
		/* 8223F1D8h case    8:*/		return 0x8223F1DC;
		  /* 8223F1DCh */ case    9:  		/* bc 4, CR0_EQ, 40 */
		/* 8223F1DCh case    9:*/		if ( !regs.CR[0].eq ) { return 0x8223F204;  }
		/* 8223F1DCh case    9:*/		return 0x8223F1E0;
		  /* 8223F1E0h */ case   10:  		/* lis R11, -32252 */
		/* 8223F1E0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223F1E0h case   10:*/		return 0x8223F1E4;
		  /* 8223F1E4h */ case   11:  		/* lis R10, -32252 */
		/* 8223F1E4h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223F1E4h case   11:*/		return 0x8223F1E8;
		  /* 8223F1E8h */ case   12:  		/* lis R9, -32253 */
		/* 8223F1E8h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223F1E8h case   12:*/		return 0x8223F1EC;
		  /* 8223F1ECh */ case   13:  		/* addi R6, R11, 10344 */
		/* 8223F1ECh case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2868);
		/* 8223F1ECh case   13:*/		return 0x8223F1F0;
		  /* 8223F1F0h */ case   14:  		/* addi R5, R10, 8676 */
		/* 8223F1F0h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x21E4);
		/* 8223F1F0h case   14:*/		return 0x8223F1F4;
		  /* 8223F1F4h */ case   15:  		/* addi R4, R9, 27460 */
		/* 8223F1F4h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223F1F4h case   15:*/		return 0x8223F1F8;
		  /* 8223F1F8h */ case   16:  		/* li R7, 945 */
		/* 8223F1F8h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x3B1);
		/* 8223F1F8h case   16:*/		return 0x8223F1FC;
		  /* 8223F1FCh */ case   17:  		/* li R3, 0 */
		/* 8223F1FCh case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223F1FCh case   17:*/		return 0x8223F200;
		  /* 8223F200h */ case   18:  		/* bl -947704 */
		/* 8223F200h case   18:*/		regs.LR = 0x8223F204; return 0x82157C08;
		/* 8223F200h case   18:*/		return 0x8223F204;
	}
	return 0x8223F204;
} // Block from 8223F1B8h-8223F204h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8223F204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F204);
		  /* 8223F204h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8223F204h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8223F204h case    0:*/		return 0x8223F208;
		  /* 8223F208h */ case    1:  		/* lwz R10, <#[R31 + 952]> */
		/* 8223F208h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000003B8) );
		/* 8223F208h case    1:*/		return 0x8223F20C;
		  /* 8223F20Ch */ case    2:  		/* addi R11, R11, 58 */
		/* 8223F20Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3A);
		/* 8223F20Ch case    2:*/		return 0x8223F210;
		  /* 8223F210h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8223F210h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8223F210h case    3:*/		return 0x8223F214;
		  /* 8223F214h */ case    4:  		/* lwz R3, <#[R10 + 2736]> */
		/* 8223F214h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000AB0) );
		/* 8223F214h case    4:*/		return 0x8223F218;
		  /* 8223F218h */ case    5:  		/* lwzx R4, <#[R11 + R31]> */
		/* 8223F218h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8223F218h case    5:*/		return 0x8223F21C;
		  /* 8223F21Ch */ case    6:  		/* bl 152012 */
		/* 8223F21Ch case    6:*/		regs.LR = 0x8223F220; return 0x822643E8;
		/* 8223F21Ch case    6:*/		return 0x8223F220;
		  /* 8223F220h */ case    7:  		/* subf R11, R30, R3 */
		/* 8223F220h case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R30,regs.R3);
		/* 8223F220h case    7:*/		return 0x8223F224;
		  /* 8223F224h */ case    8:  		/* cntlzw R11, R11 */
		/* 8223F224h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8223F224h case    8:*/		return 0x8223F228;
		  /* 8223F228h */ case    9:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 8223F228h case    9:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 8223F228h case    9:*/		return 0x8223F22C;
		  /* 8223F22Ch */ case   10:  		/* addi R1, R1, 112 */
		/* 8223F22Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223F22Ch case   10:*/		return 0x8223F230;
		  /* 8223F230h */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223F230h case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223F230h case   11:*/		return 0x8223F234;
		  /* 8223F234h */ case   12:  		/* mtspr LR, R12 */
		/* 8223F234h case   12:*/		regs.LR = regs.R12;
		/* 8223F234h case   12:*/		return 0x8223F238;
	}
	return 0x8223F238;
} // Block from 8223F204h-8223F238h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223F238h
// Function '?EmitCfNop@Assembler@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F238);
		  /* 8223F238h */ case    0:  		/* ld R30, <#[R1 - 24]> */
		/* 8223F238h case    0:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223F238h case    0:*/		return 0x8223F23C;
		  /* 8223F23Ch */ case    1:  		/* ld R31, <#[R1 - 16]> */
		/* 8223F23Ch case    1:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223F23Ch case    1:*/		return 0x8223F240;
		  /* 8223F240h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8223F240h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223F240h case    2:*/		return 0x8223F244;
	}
	return 0x8223F244;
} // Block from 8223F238h-8223F244h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223F244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F244);
		  /* 8223F244h */ case    0:  		/* nop */
		/* 8223F244h case    0:*/		cpu::op::nop();
		/* 8223F244h case    0:*/		return 0x8223F248;
	}
	return 0x8223F248;
} // Block from 8223F244h-8223F248h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223F248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F248);
		  /* 8223F248h */ case    0:  		/* mfspr R12, LR */
		/* 8223F248h case    0:*/		regs.R12 = regs.LR;
		/* 8223F248h case    0:*/		return 0x8223F24C;
		  /* 8223F24Ch */ case    1:  		/* bl -1761308 */
		/* 8223F24Ch case    1:*/		regs.LR = 0x8223F250; return 0x82091230;
		/* 8223F24Ch case    1:*/		return 0x8223F250;
		  /* 8223F250h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 8223F250h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 8223F250h case    2:*/		return 0x8223F254;
		  /* 8223F254h */ case    3:  		/* lwz R11, <#[R5]> */
		/* 8223F254h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 8223F254h case    3:*/		return 0x8223F258;
		  /* 8223F258h */ case    4:  		/* mr R31, R3 */
		/* 8223F258h case    4:*/		regs.R31 = regs.R3;
		/* 8223F258h case    4:*/		return 0x8223F25C;
		  /* 8223F25Ch */ case    5:  		/* lwz R10, <#[R4 + 8]> */
		/* 8223F25Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 8223F25Ch case    5:*/		return 0x8223F260;
		  /* 8223F260h */ case    6:  		/* mr R20, R5 */
		/* 8223F260h case    6:*/		regs.R20 = regs.R5;
		/* 8223F260h case    6:*/		return 0x8223F264;
		  /* 8223F264h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8223F264h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8223F264h case    7:*/		return 0x8223F268;
		  /* 8223F268h */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 8223F268h case    8:*/		if ( regs.CR[6].eq ) { return 0x8223F27C;  }
		/* 8223F268h case    8:*/		return 0x8223F26C;
		  /* 8223F26Ch */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 8223F26Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8223F26Ch case    9:*/		return 0x8223F270;
		  /* 8223F270h */ case   10:  		/* lwz R10, <#[R10 + 228]> */
		/* 8223F270h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x000000E4) );
		/* 8223F270h case   10:*/		return 0x8223F274;
		  /* 8223F274h */ case   11:  		/* rlwinm. R10, R10, 30, 31, 31 */
		/* 8223F274h case   11:*/		cpu::op::rlwinm<1,30,31,31>(regs,&regs.R10,regs.R10);
		/* 8223F274h case   11:*/		return 0x8223F278;
		  /* 8223F278h */ case   12:  		/* bc 4, CR0_EQ, 1828 */
		/* 8223F278h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8223F99C;  }
		/* 8223F278h case   12:*/		return 0x8223F27C;
	}
	return 0x8223F27C;
} // Block from 8223F248h-8223F27Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8223F27Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F27C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F27C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F27C);
		  /* 8223F27Ch */ case    0:  		/* li R18, 0 */
		/* 8223F27Ch case    0:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 8223F27Ch case    0:*/		return 0x8223F280;
		  /* 8223F280h */ case    1:  		/* lis R10, -32253 */
		/* 8223F280h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8223F280h case    1:*/		return 0x8223F284;
		  /* 8223F284h */ case    2:  		/* lis R9, -32252 */
		/* 8223F284h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8223F284h case    2:*/		return 0x8223F288;
		  /* 8223F288h */ case    3:  		/* mr R26, R18 */
		/* 8223F288h case    3:*/		regs.R26 = regs.R18;
		/* 8223F288h case    3:*/		return 0x8223F28C;
		  /* 8223F28Ch */ case    4:  		/* mr R19, R18 */
		/* 8223F28Ch case    4:*/		regs.R19 = regs.R18;
		/* 8223F28Ch case    4:*/		return 0x8223F290;
		  /* 8223F290h */ case    5:  		/* mr R8, R18 */
		/* 8223F290h case    5:*/		regs.R8 = regs.R18;
		/* 8223F290h case    5:*/		return 0x8223F294;
		  /* 8223F294h */ case    6:  		/* mr R30, R11 */
		/* 8223F294h case    6:*/		regs.R30 = regs.R11;
		/* 8223F294h case    6:*/		return 0x8223F298;
		  /* 8223F298h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 8223F298h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223F298h case    7:*/		return 0x8223F29C;
		  /* 8223F29Ch */ case    8:  		/* addi R22, R10, 27460 */
		/* 8223F29Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0x6B44);
		/* 8223F29Ch case    8:*/		return 0x8223F2A0;
		  /* 8223F2A0h */ case    9:  		/* addi R21, R9, 10344 */
		/* 8223F2A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R9,0x2868);
		/* 8223F2A0h case    9:*/		return 0x8223F2A4;
		  /* 8223F2A4h */ case   10:  		/* bc 12, CR0_EQ, 228 */
		/* 8223F2A4h case   10:*/		if ( regs.CR[0].eq ) { return 0x8223F388;  }
		/* 8223F2A4h case   10:*/		return 0x8223F2A8;
		  /* 8223F2A8h */ case   11:  		/* addi R11, R1, 88 */
		/* 8223F2A8h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x58);
		/* 8223F2A8h case   11:*/		return 0x8223F2AC;
		  /* 8223F2ACh */ case   12:  		/* lis R10, -32252 */
		/* 8223F2ACh case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223F2ACh case   12:*/		return 0x8223F2B0;
		  /* 8223F2B0h */ case   13:  		/* addi R29, R11, -4 */
		/* 8223F2B0h case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFC);
		/* 8223F2B0h case   13:*/		return 0x8223F2B4;
		  /* 8223F2B4h */ case   14:  		/* lis R11, -32251 */
		/* 8223F2B4h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8205);
		/* 8223F2B4h case   14:*/		return 0x8223F2B8;
		  /* 8223F2B8h */ case   15:  		/* addi R28, R10, 10612 */
		/* 8223F2B8h case   15:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x2974);
		/* 8223F2B8h case   15:*/		return 0x8223F2BC;
		  /* 8223F2BCh */ case   16:  		/* addi R27, R11, -19064 */
		/* 8223F2BCh case   16:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFB588);
		/* 8223F2BCh case   16:*/		return 0x8223F2C0;
		  /* 8223F2C0h */ case   17:  		/* rlwinm. R11, R8, 0, 24, 31 */
		/* 8223F2C0h case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R8);
		/* 8223F2C0h case   17:*/		return 0x8223F2C4;
		  /* 8223F2C4h */ case   18:  		/* bc 4, CR0_EQ, 196 */
		/* 8223F2C4h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8223F388;  }
		/* 8223F2C4h case   18:*/		return 0x8223F2C8;
		  /* 8223F2C8h */ case   19:  		/* lwz R11, <#[R30 + 228]> */
		/* 8223F2C8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000E4) );
		/* 8223F2C8h case   19:*/		return 0x8223F2CC;
		  /* 8223F2CCh */ case   20:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8223F2CCh case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8223F2CCh case   20:*/		return 0x8223F2D0;
		  /* 8223F2D0h */ case   21:  		/* bc 12, CR0_EQ, 160 */
		/* 8223F2D0h case   21:*/		if ( regs.CR[0].eq ) { return 0x8223F370;  }
		/* 8223F2D0h case   21:*/		return 0x8223F2D4;
		  /* 8223F2D4h */ case   22:  		/* rlwinm. R11, R11, 23, 31, 31 */
		/* 8223F2D4h case   22:*/		cpu::op::rlwinm<1,23,31,31>(regs,&regs.R11,regs.R11);
		/* 8223F2D4h case   22:*/		return 0x8223F2D8;
		  /* 8223F2D8h */ case   23:  		/* stw R18, <#[R29 + 4]> */
		/* 8223F2D8h case   23:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R29 + 0x00000004) );
		/* 8223F2D8h case   23:*/		return 0x8223F2DC;
		  /* 8223F2DCh */ case   24:  		/* bc 12, CR0_EQ, 80 */
		/* 8223F2DCh case   24:*/		if ( regs.CR[0].eq ) { return 0x8223F32C;  }
		/* 8223F2DCh case   24:*/		return 0x8223F2E0;
	}
	return 0x8223F2E0;
} // Block from 8223F27Ch-8223F2E0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8223F2E0h
// Function '?ExportBuffer@IRExport@XGRAPHICS@@QBAHXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F2E0);
		  /* 8223F2E0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8223F2E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F2E0h case    0:*/		return 0x8223F2E4;
		  /* 8223F2E4h */ case    1:  		/* mr R4, R30 */
		/* 8223F2E4h case    1:*/		regs.R4 = regs.R30;
		/* 8223F2E4h case    1:*/		return 0x8223F2E8;
		  /* 8223F2E8h */ case    2:  		/* lwz R3, <#[R11 + 2736]> */
		/* 8223F2E8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 8223F2E8h case    2:*/		return 0x8223F2EC;
		  /* 8223F2ECh */ case    3:  		/* bl 151804 */
		/* 8223F2ECh case    3:*/		regs.LR = 0x8223F2F0; return 0x822643E8;
		/* 8223F2ECh case    3:*/		return 0x8223F2F0;
		  /* 8223F2F0h */ case    4:  		/* mr R4, R3 */
		/* 8223F2F0h case    4:*/		regs.R4 = regs.R3;
		/* 8223F2F0h case    4:*/		return 0x8223F2F4;
		  /* 8223F2F4h */ case    5:  		/* mr R3, R30 */
		/* 8223F2F4h case    5:*/		regs.R3 = regs.R30;
		/* 8223F2F4h case    5:*/		return 0x8223F2F8;
		  /* 8223F2F8h */ case    6:  		/* bl -320 */
		/* 8223F2F8h case    6:*/		regs.LR = 0x8223F2FC; return 0x8223F1B8;
		/* 8223F2F8h case    6:*/		return 0x8223F2FC;
		  /* 8223F2FCh */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F2FCh case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F2FCh case    7:*/		return 0x8223F300;
		  /* 8223F300h */ case    8:  		/* bc 4, CR0_EQ, 44 */
		/* 8223F300h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8223F32C;  }
		/* 8223F300h case    8:*/		return 0x8223F304;
		  /* 8223F304h */ case    9:  		/* cmpwi CR6, R19, 2 */
		/* 8223F304h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000002);
		/* 8223F304h case    9:*/		return 0x8223F308;
		  /* 8223F308h */ case   10:  		/* bc 12, CR6_LT, 28 */
		/* 8223F308h case   10:*/		if ( regs.CR[6].lt ) { return 0x8223F324;  }
		/* 8223F308h case   10:*/		return 0x8223F30C;
		  /* 8223F30Ch */ case   11:  		/* mr R6, R21 */
		/* 8223F30Ch case   11:*/		regs.R6 = regs.R21;
		/* 8223F30Ch case   11:*/		return 0x8223F310;
		  /* 8223F310h */ case   12:  		/* mr R5, R28 */
		/* 8223F310h case   12:*/		regs.R5 = regs.R28;
		/* 8223F310h case   12:*/		return 0x8223F314;
		  /* 8223F314h */ case   13:  		/* mr R4, R22 */
		/* 8223F314h case   13:*/		regs.R4 = regs.R22;
		/* 8223F314h case   13:*/		return 0x8223F318;
		  /* 8223F318h */ case   14:  		/* li R7, 1171 */
		/* 8223F318h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x493);
		/* 8223F318h case   14:*/		return 0x8223F31C;
		  /* 8223F31Ch */ case   15:  		/* li R3, 0 */
		/* 8223F31Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223F31Ch case   15:*/		return 0x8223F320;
		  /* 8223F320h */ case   16:  		/* bl -947992 */
		/* 8223F320h case   16:*/		regs.LR = 0x8223F324; return 0x82157C08;
		/* 8223F320h case   16:*/		return 0x8223F324;
	}
	return 0x8223F324;
} // Block from 8223F2E0h-8223F324h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8223F324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F324);
		  /* 8223F324h */ case    0:  		/* stwu R30, <#[R29 + 4]> */
		/* 8223F324h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8223F324h case    0:*/		return 0x8223F328;
		  /* 8223F328h */ case    1:  		/* addi R19, R19, 1 */
		/* 8223F328h case    1:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x1);
		/* 8223F328h case    1:*/		return 0x8223F32C;
	}
	return 0x8223F32C;
} // Block from 8223F324h-8223F32Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223F32Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F32C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F32C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F32C);
		  /* 8223F32Ch */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 8223F32Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8223F32Ch case    0:*/		return 0x8223F330;
		  /* 8223F330h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8223F330h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223F330h case    1:*/		return 0x8223F334;
		  /* 8223F334h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 8223F334h case    2:*/		if ( regs.CR[6].eq ) { return 0x8223F360;  }
		/* 8223F334h case    2:*/		return 0x8223F338;
		  /* 8223F338h */ case    3:  		/* lwz R11, <#[R30 + 228]> */
		/* 8223F338h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000E4) );
		/* 8223F338h case    3:*/		return 0x8223F33C;
		  /* 8223F33Ch */ case    4:  		/* rlwinm. R11, R11, 31, 31, 31 */
		/* 8223F33Ch case    4:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R11,regs.R11);
		/* 8223F33Ch case    4:*/		return 0x8223F340;
		  /* 8223F340h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 8223F340h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8223F360;  }
		/* 8223F340h case    5:*/		return 0x8223F344;
		  /* 8223F344h */ case    6:  		/* lwz R11, <#[R30 + 80]> */
		/* 8223F344h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000050) );
		/* 8223F344h case    6:*/		return 0x8223F348;
		  /* 8223F348h */ case    7:  		/* addi R10, R27, 4 */
		/* 8223F348h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x4);
		/* 8223F348h case    7:*/		return 0x8223F34C;
		  /* 8223F34Ch */ case    8:  		/* mulli R11, R11, 12 */
		/* 8223F34Ch case    8:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8223F34Ch case    8:*/		return 0x8223F350;
	}
	return 0x8223F350;
} // Block from 8223F32Ch-8223F350h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223F350h
// Function '?VFetchDstModifierToDstSel@XGRAPHICS@@YAHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F350);
		  /* 8223F350h */ case    0:  		/* lbzx R11, <#[R11 + R10]> */
		/* 8223F350h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8223F350h case    0:*/		return 0x8223F354;
		  /* 8223F354h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 8223F354h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223F354h case    1:*/		return 0x8223F358;
		  /* 8223F358h */ case    2:  		/* li R11, 1 */
		/* 8223F358h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223F358h case    2:*/		return 0x8223F35C;
		  /* 8223F35Ch */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 8223F35Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8223F364;  }
		/* 8223F35Ch case    3:*/		return 0x8223F360;
	}
	return 0x8223F360;
} // Block from 8223F350h-8223F360h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223F360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F360);
		  /* 8223F360h */ case    0:  		/* mr R11, R18 */
		/* 8223F360h case    0:*/		regs.R11 = regs.R18;
		/* 8223F360h case    0:*/		return 0x8223F364;
	}
	return 0x8223F364;
} // Block from 8223F360h-8223F364h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223F364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F364);
		  /* 8223F364h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8223F364h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8223F364h case    0:*/		return 0x8223F368;
		  /* 8223F368h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8223F368h case    1:*/		if ( regs.CR[0].eq ) { return 0x8223F370;  }
		/* 8223F368h case    1:*/		return 0x8223F36C;
		  /* 8223F36Ch */ case    2:  		/* addi R26, R26, 1 */
		/* 8223F36Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8223F36Ch case    2:*/		return 0x8223F370;
	}
	return 0x8223F370;
} // Block from 8223F364h-8223F370h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223F370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F370);
		  /* 8223F370h */ case    0:  		/* lwz R11, <#[R30 + 228]> */
		/* 8223F370h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000E4) );
		/* 8223F370h case    0:*/		return 0x8223F374;
		  /* 8223F374h */ case    1:  		/* lwz R30, <#[R30 + 8]> */
		/* 8223F374h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 8223F374h case    1:*/		return 0x8223F378;
		  /* 8223F378h */ case    2:  		/* nor R11, R11, R11 */
		/* 8223F378h case    2:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223F378h case    2:*/		return 0x8223F37C;
		  /* 8223F37Ch */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 8223F37Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223F37Ch case    3:*/		return 0x8223F380;
		  /* 8223F380h */ case    4:  		/* rlwinm R8, R11, 30, 31, 31 */
		/* 8223F380h case    4:*/		cpu::op::rlwinm<0,30,31,31>(regs,&regs.R8,regs.R11);
		/* 8223F380h case    4:*/		return 0x8223F384;
		  /* 8223F384h */ case    5:  		/* bc 4, CR6_EQ, -196 */
		/* 8223F384h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8223F2C0;  }
		/* 8223F384h case    5:*/		return 0x8223F388;
	}
	return 0x8223F388;
} // Block from 8223F370h-8223F388h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223F388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F388);
		  /* 8223F388h */ case    0:  		/* lwz R23, <#[R20]> */
		/* 8223F388h case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R20 + 0x00000000) );
		/* 8223F388h case    0:*/		return 0x8223F38C;
		  /* 8223F38Ch */ case    1:  		/* cmpwi CR6, R19, 0 */
		/* 8223F38Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000000);
		/* 8223F38Ch case    1:*/		return 0x8223F390;
		  /* 8223F390h */ case    2:  		/* lwz R27, <#[R30 + 4]> */
		/* 8223F390h case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R30 + 0x00000004) );
		/* 8223F390h case    2:*/		return 0x8223F394;
		  /* 8223F394h */ case    3:  		/* bc 12, CR6_EQ, 1544 */
		/* 8223F394h case    3:*/		if ( regs.CR[6].eq ) { return 0x8223F99C;  }
		/* 8223F394h case    3:*/		return 0x8223F398;
		  /* 8223F398h */ case    4:  		/* lwz R28, <#[R1 + 92]> */
		/* 8223F398h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000005C) );
		/* 8223F398h case    4:*/		return 0x8223F39C;
		  /* 8223F39Ch */ case    5:  		/* cmpwi CR6, R19, 1 */
		/* 8223F39Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000001);
		/* 8223F39Ch case    5:*/		return 0x8223F3A0;
		  /* 8223F3A0h */ case    6:  		/* lwz R30, <#[R1 + 88]> */
		/* 8223F3A0h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000058) );
		/* 8223F3A0h case    6:*/		return 0x8223F3A4;
		  /* 8223F3A4h */ case    7:  		/* bc 4, CR6_EQ, 464 */
		/* 8223F3A4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8223F574;  }
		/* 8223F3A4h case    7:*/		return 0x8223F3A8;
		  /* 8223F3A8h */ case    8:  		/* cmpwi CR6, R26, 1 */
		/* 8223F3A8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 8223F3A8h case    8:*/		return 0x8223F3AC;
		  /* 8223F3ACh */ case    9:  		/* bc 4, CR6_EQ, 88 */
		/* 8223F3ACh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8223F404;  }
		/* 8223F3ACh case    9:*/		return 0x8223F3B0;
		  /* 8223F3B0h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 8223F3B0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F3B0h case   10:*/		return 0x8223F3B4;
		  /* 8223F3B4h */ case   11:  		/* rlwinm R30, R30, 0, 0, 31 */
		/* 8223F3B4h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R30,regs.R30);
		/* 8223F3B4h case   11:*/		return 0x8223F3B8;
		  /* 8223F3B8h */ case   12:  		/* mr R4, R30 */
		/* 8223F3B8h case   12:*/		regs.R4 = regs.R30;
		/* 8223F3B8h case   12:*/		return 0x8223F3BC;
		  /* 8223F3BCh */ case   13:  		/* lwz R3, <#[R11 + 2736]> */
		/* 8223F3BCh case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 8223F3BCh case   13:*/		return 0x8223F3C0;
		  /* 8223F3C0h */ case   14:  		/* bl 151592 */
		/* 8223F3C0h case   14:*/		regs.LR = 0x8223F3C4; return 0x822643E8;
		/* 8223F3C0h case   14:*/		return 0x8223F3C4;
		  /* 8223F3C4h */ case   15:  		/* mr R29, R3 */
		/* 8223F3C4h case   15:*/		regs.R29 = regs.R3;
		/* 8223F3C4h case   15:*/		return 0x8223F3C8;
		  /* 8223F3C8h */ case   16:  		/* mr R3, R30 */
		/* 8223F3C8h case   16:*/		regs.R3 = regs.R30;
		/* 8223F3C8h case   16:*/		return 0x8223F3CC;
		  /* 8223F3CCh */ case   17:  		/* bl -38420 */
		/* 8223F3CCh case   17:*/		regs.LR = 0x8223F3D0; return 0x82235DB8;
		/* 8223F3CCh case   17:*/		return 0x8223F3D0;
		  /* 8223F3D0h */ case   18:  		/* mr R5, R3 */
		/* 8223F3D0h case   18:*/		regs.R5 = regs.R3;
		/* 8223F3D0h case   18:*/		return 0x8223F3D4;
		  /* 8223F3D4h */ case   19:  		/* mr R4, R29 */
		/* 8223F3D4h case   19:*/		regs.R4 = regs.R29;
		/* 8223F3D4h case   19:*/		return 0x8223F3D8;
		  /* 8223F3D8h */ case   20:  		/* mr R3, R30 */
		/* 8223F3D8h case   20:*/		regs.R3 = regs.R30;
		/* 8223F3D8h case   20:*/		return 0x8223F3DC;
		  /* 8223F3DCh */ case   21:  		/* lwz R6, <#[R31]> */
		/* 8223F3DCh case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F3DCh case   21:*/		return 0x8223F3E0;
		  /* 8223F3E0h */ case   22:  		/* bl -688 */
		/* 8223F3E0h case   22:*/		regs.LR = 0x8223F3E4; return 0x8223F130;
		/* 8223F3E0h case   22:*/		return 0x8223F3E4;
		  /* 8223F3E4h */ case   23:  		/* mr R4, R27 */
		/* 8223F3E4h case   23:*/		regs.R4 = regs.R27;
		/* 8223F3E4h case   23:*/		return 0x8223F3E8;
		  /* 8223F3E8h */ case   24:  		/* mr R5, R3 */
		/* 8223F3E8h case   24:*/		regs.R5 = regs.R3;
		/* 8223F3E8h case   24:*/		return 0x8223F3EC;
		  /* 8223F3ECh */ case   25:  		/* lwz R3, <#[R27 + 948]> */
		/* 8223F3ECh case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x000003B4) );
		/* 8223F3ECh case   25:*/		return 0x8223F3F0;
		  /* 8223F3F0h */ case   26:  		/* bl 105424 */
		/* 8223F3F0h case   26:*/		regs.LR = 0x8223F3F4; return 0x82258FC0;
		/* 8223F3F0h case   26:*/		return 0x8223F3F4;
		  /* 8223F3F4h */ case   27:  		/* lwz R11, <#[R31 + 76]> */
		/* 8223F3F4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F3F4h case   27:*/		return 0x8223F3F8;
		  /* 8223F3F8h */ case   28:  		/* addi R11, R11, 1 */
		/* 8223F3F8h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223F3F8h case   28:*/		return 0x8223F3FC;
		  /* 8223F3FCh */ case   29:  		/* stw R11, <#[R31 + 76]> */
		/* 8223F3FCh case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F3FCh case   29:*/		return 0x8223F400;
	}
	return 0x8223F400;
} // Block from 8223F388h-8223F400h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8223F400h
// Function '?TFetchDstModifierToDstSel@XGRAPHICS@@YAHHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F400);
		  /* 8223F400h */ case    0:  		/* b 1436 */
		/* 8223F400h case    0:*/		return 0x8223F99C;
		/* 8223F400h case    0:*/		return 0x8223F404;
	}
	return 0x8223F404;
} // Block from 8223F400h-8223F404h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223F404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F404);
		  /* 8223F404h */ case    0:  		/* cmpwi CR6, R26, 2 */
		/* 8223F404h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000002);
		/* 8223F404h case    0:*/		return 0x8223F408;
		  /* 8223F408h */ case    1:  		/* bc 4, CR6_EQ, 1084 */
		/* 8223F408h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223F844;  }
		/* 8223F408h case    1:*/		return 0x8223F40C;
		  /* 8223F40Ch */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8223F40Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F40Ch case    2:*/		return 0x8223F410;
		  /* 8223F410h */ case    3:  		/* mr R4, R30 */
		/* 8223F410h case    3:*/		regs.R4 = regs.R30;
		/* 8223F410h case    3:*/		return 0x8223F414;
		  /* 8223F414h */ case    4:  		/* lwz R3, <#[R11 + 2736]> */
		/* 8223F414h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 8223F414h case    4:*/		return 0x8223F418;
		  /* 8223F418h */ case    5:  		/* bl 151504 */
		/* 8223F418h case    5:*/		regs.LR = 0x8223F41C; return 0x822643E8;
		/* 8223F418h case    5:*/		return 0x8223F41C;
		  /* 8223F41Ch */ case    6:  		/* mr R22, R3 */
		/* 8223F41Ch case    6:*/		regs.R22 = regs.R3;
		/* 8223F41Ch case    6:*/		return 0x8223F420;
		  /* 8223F420h */ case    7:  		/* mr R3, R30 */
		/* 8223F420h case    7:*/		regs.R3 = regs.R30;
		/* 8223F420h case    7:*/		return 0x8223F424;
		  /* 8223F424h */ case    8:  		/* bl -38508 */
		/* 8223F424h case    8:*/		regs.LR = 0x8223F428; return 0x82235DB8;
		/* 8223F424h case    8:*/		return 0x8223F428;
		  /* 8223F428h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223F428h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F428h case    9:*/		return 0x8223F42C;
		  /* 8223F42Ch */ case   10:  		/* mr R4, R3 */
		/* 8223F42Ch case   10:*/		regs.R4 = regs.R3;
		/* 8223F42Ch case   10:*/		return 0x8223F430;
		  /* 8223F430h */ case   11:  		/* mr R24, R3 */
		/* 8223F430h case   11:*/		regs.R24 = regs.R3;
		/* 8223F430h case   11:*/		return 0x8223F434;
		  /* 8223F434h */ case   12:  		/* lwz R3, <#[R11 + 2736]> */
		/* 8223F434h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 8223F434h case   12:*/		return 0x8223F438;
		  /* 8223F438h */ case   13:  		/* bl 151472 */
		/* 8223F438h case   13:*/		regs.LR = 0x8223F43C; return 0x822643E8;
		/* 8223F438h case   13:*/		return 0x8223F43C;
		  /* 8223F43Ch */ case   14:  		/* lwz R29, <#[R20]> */
		/* 8223F43Ch case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R20 + 0x00000000) );
		/* 8223F43Ch case   14:*/		return 0x8223F440;
		  /* 8223F440h */ case   15:  		/* mr R26, R3 */
		/* 8223F440h case   15:*/		regs.R26 = regs.R3;
		/* 8223F440h case   15:*/		return 0x8223F444;
		  /* 8223F444h */ case   16:  		/* mr R25, R18 */
		/* 8223F444h case   16:*/		regs.R25 = regs.R18;
		/* 8223F444h case   16:*/		return 0x8223F448;
		  /* 8223F448h */ case   17:  		/* mr R11, R18 */
		/* 8223F448h case   17:*/		regs.R11 = regs.R18;
		/* 8223F448h case   17:*/		return 0x8223F44C;
		  /* 8223F44Ch */ case   18:  		/* b 64 */
		/* 8223F44Ch case   18:*/		return 0x8223F48C;
		/* 8223F44Ch case   18:*/		return 0x8223F450;
		  /* 8223F450h */ case   19:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8223F450h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8223F450h case   19:*/		return 0x8223F454;
		  /* 8223F454h */ case   20:  		/* bc 4, CR0_EQ, 72 */
		/* 8223F454h case   20:*/		if ( !regs.CR[0].eq ) { return 0x8223F49C;  }
		/* 8223F454h case   20:*/		return 0x8223F458;
		  /* 8223F458h */ case   21:  		/* lwz R11, <#[R29 + 228]> */
		/* 8223F458h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x000000E4) );
		/* 8223F458h case   21:*/		return 0x8223F45C;
		  /* 8223F45Ch */ case   22:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8223F45Ch case   22:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223F45Ch case   22:*/		return 0x8223F460;
		  /* 8223F460h */ case   23:  		/* bc 12, CR0_EQ, 28 */
		/* 8223F460h case   23:*/		if ( regs.CR[0].eq ) { return 0x8223F47C;  }
		/* 8223F460h case   23:*/		return 0x8223F464;
		  /* 8223F464h */ case   24:  		/* lwz R11, <#[R31]> */
		/* 8223F464h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F464h case   24:*/		return 0x8223F468;
		  /* 8223F468h */ case   25:  		/* mr R4, R29 */
		/* 8223F468h case   25:*/		regs.R4 = regs.R29;
		/* 8223F468h case   25:*/		return 0x8223F46C;
		  /* 8223F46Ch */ case   26:  		/* lwz R3, <#[R11 + 2736]> */
		/* 8223F46Ch case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 8223F46Ch case   26:*/		return 0x8223F470;
		  /* 8223F470h */ case   27:  		/* bl 151416 */
		/* 8223F470h case   27:*/		regs.LR = 0x8223F474; return 0x822643E8;
		/* 8223F470h case   27:*/		return 0x8223F474;
		  /* 8223F474h */ case   28:  		/* cmpw CR6, R26, R3 */
		/* 8223F474h case   28:*/		cpu::op::cmpw<6>(regs,regs.R26,regs.R3);
		/* 8223F474h case   28:*/		return 0x8223F478;
		  /* 8223F478h */ case   29:  		/* bc 12, CR6_EQ, 32 */
		/* 8223F478h case   29:*/		if ( regs.CR[6].eq ) { return 0x8223F498;  }
		/* 8223F478h case   29:*/		return 0x8223F47C;
	}
	return 0x8223F47C;
} // Block from 8223F404h-8223F47Ch (30 instructions)

//////////////////////////////////////////////////////
// Block at 8223F47Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F47C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F47C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F47C);
		  /* 8223F47Ch */ case    0:  		/* lwz R11, <#[R29 + 228]> */
		/* 8223F47Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x000000E4) );
		/* 8223F47Ch case    0:*/		return 0x8223F480;
		  /* 8223F480h */ case    1:  		/* lwz R29, <#[R29 + 8]> */
		/* 8223F480h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 8223F480h case    1:*/		return 0x8223F484;
		  /* 8223F484h */ case    2:  		/* nor R11, R11, R11 */
		/* 8223F484h case    2:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223F484h case    2:*/		return 0x8223F488;
		  /* 8223F488h */ case    3:  		/* rlwinm R11, R11, 30, 31, 31 */
		/* 8223F488h case    3:*/		cpu::op::rlwinm<0,30,31,31>(regs,&regs.R11,regs.R11);
		/* 8223F488h case    3:*/		return 0x8223F48C;
	}
	return 0x8223F48C;
} // Block from 8223F47Ch-8223F48Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223F48Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F48C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F48C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F48C);
		  /* 8223F48Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8223F48Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223F48Ch case    0:*/		return 0x8223F490;
		  /* 8223F490h */ case    1:  		/* bc 4, CR6_EQ, -64 */
		/* 8223F490h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223F450;  }
		/* 8223F490h case    1:*/		return 0x8223F494;
		  /* 8223F494h */ case    2:  		/* b 8 */
		/* 8223F494h case    2:*/		return 0x8223F49C;
		/* 8223F494h case    2:*/		return 0x8223F498;
	}
	return 0x8223F498;
} // Block from 8223F48Ch-8223F498h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223F498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F498);
		  /* 8223F498h */ case    0:  		/* li R25, 1 */
		/* 8223F498h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8223F498h case    0:*/		return 0x8223F49C;
	}
	return 0x8223F49C;
} // Block from 8223F498h-8223F49Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223F49Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F49C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F49C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F49C);
		  /* 8223F49Ch */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 8223F49Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 8223F49Ch case    0:*/		return 0x8223F4A0;
		  /* 8223F4A0h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 8223F4A0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8223F4B0;  }
		/* 8223F4A0h case    1:*/		return 0x8223F4A4;
		  /* 8223F4A4h */ case    2:  		/* mr R5, R24 */
		/* 8223F4A4h case    2:*/		regs.R5 = regs.R24;
		/* 8223F4A4h case    2:*/		return 0x8223F4A8;
	}
	return 0x8223F4A8;
} // Block from 8223F49Ch-8223F4A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223F4A8h
// Function '?PostAssemble@IREndMakeCall@XGRAPHICS@@UAAXPAVAssembler@2@PADPAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F4A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F4A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F4A8);
		  /* 8223F4A8h */ case    0:  		/* mr R4, R22 */
		/* 8223F4A8h case    0:*/		regs.R4 = regs.R22;
		/* 8223F4A8h case    0:*/		return 0x8223F4AC;
		  /* 8223F4ACh */ case    1:  		/* b -212 */
		/* 8223F4ACh case    1:*/		return 0x8223F3D8;
		/* 8223F4ACh case    1:*/		return 0x8223F4B0;
	}
	return 0x8223F4B0;
} // Block from 8223F4A8h-8223F4B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223F4B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F4B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F4B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F4B0);
		  /* 8223F4B0h */ case    0:  		/* lwz R29, <#[R20]> */
		/* 8223F4B0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R20 + 0x00000000) );
		/* 8223F4B0h case    0:*/		return 0x8223F4B4;
		  /* 8223F4B4h */ case    1:  		/* mr R26, R18 */
		/* 8223F4B4h case    1:*/		regs.R26 = regs.R18;
		/* 8223F4B4h case    1:*/		return 0x8223F4B8;
		  /* 8223F4B8h */ case    2:  		/* mr R11, R18 */
		/* 8223F4B8h case    2:*/		regs.R11 = regs.R18;
		/* 8223F4B8h case    2:*/		return 0x8223F4BC;
		  /* 8223F4BCh */ case    3:  		/* b 92 */
		/* 8223F4BCh case    3:*/		return 0x8223F518;
		/* 8223F4BCh case    3:*/		return 0x8223F4C0;
		  /* 8223F4C0h */ case    4:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8223F4C0h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8223F4C0h case    4:*/		return 0x8223F4C4;
		  /* 8223F4C4h */ case    5:  		/* bc 4, CR0_EQ, 100 */
		/* 8223F4C4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8223F528;  }
		/* 8223F4C4h case    5:*/		return 0x8223F4C8;
		  /* 8223F4C8h */ case    6:  		/* lwz R11, <#[R29 + 228]> */
		/* 8223F4C8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x000000E4) );
		/* 8223F4C8h case    6:*/		return 0x8223F4CC;
		  /* 8223F4CCh */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8223F4CCh case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8223F4CCh case    7:*/		return 0x8223F4D0;
		  /* 8223F4D0h */ case    8:  		/* bc 12, CR0_EQ, 56 */
		/* 8223F4D0h case    8:*/		if ( regs.CR[0].eq ) { return 0x8223F508;  }
		/* 8223F4D0h case    8:*/		return 0x8223F4D4;
		  /* 8223F4D4h */ case    9:  		/* mr R4, R22 */
		/* 8223F4D4h case    9:*/		regs.R4 = regs.R22;
		/* 8223F4D4h case    9:*/		return 0x8223F4D8;
		  /* 8223F4D8h */ case   10:  		/* mr R3, R29 */
		/* 8223F4D8h case   10:*/		regs.R3 = regs.R29;
		/* 8223F4D8h case   10:*/		return 0x8223F4DC;
		  /* 8223F4DCh */ case   11:  		/* bl -2556 */
		/* 8223F4DCh case   11:*/		regs.LR = 0x8223F4E0; return 0x8223EAE0;
		/* 8223F4DCh case   11:*/		return 0x8223F4E0;
		  /* 8223F4E0h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F4E0h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F4E0h case   12:*/		return 0x8223F4E4;
		  /* 8223F4E4h */ case   13:  		/* bc 4, CR0_EQ, 64 */
		/* 8223F4E4h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8223F524;  }
		/* 8223F4E4h case   13:*/		return 0x8223F4E8;
	}
	return 0x8223F4E8;
} // Block from 8223F4B0h-8223F4E8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223F4E8h
// Function '?EmitCall@Assembler@XGRAPHICS@@QAAXH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F4E8);
		  /* 8223F4E8h */ case    0:  		/* lwz R11, <#[R29 + 228]> */
		/* 8223F4E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x000000E4) );
		/* 8223F4E8h case    0:*/		return 0x8223F4EC;
		  /* 8223F4ECh */ case    1:  		/* rlwinm. R11, R11, 23, 31, 31 */
		/* 8223F4ECh case    1:*/		cpu::op::rlwinm<1,23,31,31>(regs,&regs.R11,regs.R11);
		/* 8223F4ECh case    1:*/		return 0x8223F4F0;
		  /* 8223F4F0h */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 8223F4F0h case    2:*/		if ( regs.CR[0].eq ) { return 0x8223F508;  }
		/* 8223F4F0h case    2:*/		return 0x8223F4F4;
		  /* 8223F4F4h */ case    3:  		/* mr R4, R22 */
		/* 8223F4F4h case    3:*/		regs.R4 = regs.R22;
		/* 8223F4F4h case    3:*/		return 0x8223F4F8;
		  /* 8223F4F8h */ case    4:  		/* mr R3, R29 */
		/* 8223F4F8h case    4:*/		regs.R3 = regs.R29;
		/* 8223F4F8h case    4:*/		return 0x8223F4FC;
		  /* 8223F4FCh */ case    5:  		/* bl -836 */
		/* 8223F4FCh case    5:*/		regs.LR = 0x8223F500; return 0x8223F1B8;
		/* 8223F4FCh case    5:*/		return 0x8223F500;
		  /* 8223F500h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F500h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F500h case    6:*/		return 0x8223F504;
		  /* 8223F504h */ case    7:  		/* bc 4, CR0_EQ, 32 */
		/* 8223F504h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8223F524;  }
		/* 8223F504h case    7:*/		return 0x8223F508;
	}
	return 0x8223F508;
} // Block from 8223F4E8h-8223F508h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8223F508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F508);
		  /* 8223F508h */ case    0:  		/* lwz R11, <#[R29 + 228]> */
		/* 8223F508h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x000000E4) );
		/* 8223F508h case    0:*/		return 0x8223F50C;
		  /* 8223F50Ch */ case    1:  		/* lwz R29, <#[R29 + 8]> */
		/* 8223F50Ch case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 8223F50Ch case    1:*/		return 0x8223F510;
		  /* 8223F510h */ case    2:  		/* nor R11, R11, R11 */
		/* 8223F510h case    2:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8223F510h case    2:*/		return 0x8223F514;
		  /* 8223F514h */ case    3:  		/* rlwinm R11, R11, 30, 31, 31 */
		/* 8223F514h case    3:*/		cpu::op::rlwinm<0,30,31,31>(regs,&regs.R11,regs.R11);
		/* 8223F514h case    3:*/		return 0x8223F518;
	}
	return 0x8223F518;
} // Block from 8223F508h-8223F518h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223F518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F518);
		  /* 8223F518h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8223F518h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8223F518h case    0:*/		return 0x8223F51C;
		  /* 8223F51Ch */ case    1:  		/* bc 4, CR6_EQ, -92 */
		/* 8223F51Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223F4C0;  }
		/* 8223F51Ch case    1:*/		return 0x8223F520;
		  /* 8223F520h */ case    2:  		/* b 8 */
		/* 8223F520h case    2:*/		return 0x8223F528;
		/* 8223F520h case    2:*/		return 0x8223F524;
	}
	return 0x8223F524;
} // Block from 8223F518h-8223F524h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223F524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F524);
		  /* 8223F524h */ case    0:  		/* li R26, 1 */
		/* 8223F524h case    0:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 8223F524h case    0:*/		return 0x8223F528;
	}
	return 0x8223F528;
} // Block from 8223F524h-8223F528h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223F528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F528);
		  /* 8223F528h */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 8223F528h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 8223F528h case    0:*/		return 0x8223F52C;
		  /* 8223F52Ch */ case    1:  		/* bc 4, CR0_EQ, 792 */
		/* 8223F52Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8223F844;  }
		/* 8223F52Ch case    1:*/		return 0x8223F530;
		  /* 8223F530h */ case    2:  		/* mr R5, R24 */
		/* 8223F530h case    2:*/		regs.R5 = regs.R24;
		/* 8223F530h case    2:*/		return 0x8223F534;
		  /* 8223F534h */ case    3:  		/* lwz R6, <#[R31]> */
		/* 8223F534h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F534h case    3:*/		return 0x8223F538;
		  /* 8223F538h */ case    4:  		/* mr R4, R22 */
		/* 8223F538h case    4:*/		regs.R4 = regs.R22;
		/* 8223F538h case    4:*/		return 0x8223F53C;
		  /* 8223F53Ch */ case    5:  		/* mr R3, R30 */
		/* 8223F53Ch case    5:*/		regs.R3 = regs.R30;
		/* 8223F53Ch case    5:*/		return 0x8223F540;
		  /* 8223F540h */ case    6:  		/* bl -1040 */
		/* 8223F540h case    6:*/		regs.LR = 0x8223F544; return 0x8223F130;
		/* 8223F540h case    6:*/		return 0x8223F544;
		  /* 8223F544h */ case    7:  		/* mr R29, R3 */
		/* 8223F544h case    7:*/		regs.R29 = regs.R3;
		/* 8223F544h case    7:*/		return 0x8223F548;
		  /* 8223F548h */ case    8:  		/* mr R4, R23 */
		/* 8223F548h case    8:*/		regs.R4 = regs.R23;
		/* 8223F548h case    8:*/		return 0x8223F54C;
		  /* 8223F54Ch */ case    9:  		/* lwz R3, <#[R23 + 948]> */
		/* 8223F54Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x000003B4) );
		/* 8223F54Ch case    9:*/		return 0x8223F550;
		  /* 8223F550h */ case   10:  		/* mr R5, R29 */
		/* 8223F550h case   10:*/		regs.R5 = regs.R29;
		/* 8223F550h case   10:*/		return 0x8223F554;
		  /* 8223F554h */ case   11:  		/* bl 105164 */
		/* 8223F554h case   11:*/		regs.LR = 0x8223F558; return 0x82259020;
		/* 8223F554h case   11:*/		return 0x8223F558;
		  /* 8223F558h */ case   12:  		/* lwz R11, <#[R31 + 76]> */
		/* 8223F558h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F558h case   12:*/		return 0x8223F55C;
		  /* 8223F55Ch */ case   13:  		/* mr R3, R30 */
		/* 8223F55Ch case   13:*/		regs.R3 = regs.R30;
		/* 8223F55Ch case   13:*/		return 0x8223F560;
		  /* 8223F560h */ case   14:  		/* addi R11, R11, 1 */
		/* 8223F560h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223F560h case   14:*/		return 0x8223F564;
		  /* 8223F564h */ case   15:  		/* stw R11, <#[R31 + 76]> */
		/* 8223F564h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F564h case   15:*/		return 0x8223F568;
		  /* 8223F568h */ case   16:  		/* bl -38728 */
		/* 8223F568h case   16:*/		regs.LR = 0x8223F56C; return 0x82235E20;
		/* 8223F568h case   16:*/		return 0x8223F56C;
		  /* 8223F56Ch */ case   17:  		/* stw R29, <#[R20]> */
		/* 8223F56Ch case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R20 + 0x00000000) );
		/* 8223F56Ch case   17:*/		return 0x8223F570;
		  /* 8223F570h */ case   18:  		/* b 1068 */
		/* 8223F570h case   18:*/		return 0x8223F99C;
		/* 8223F570h case   18:*/		return 0x8223F574;
	}
	return 0x8223F574;
} // Block from 8223F528h-8223F574h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8223F574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F574);
		  /* 8223F574h */ case    0:  		/* cmpwi CR6, R19, 2 */
		/* 8223F574h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000002);
		/* 8223F574h case    0:*/		return 0x8223F578;
		  /* 8223F578h */ case    1:  		/* bc 4, CR6_EQ, 716 */
		/* 8223F578h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8223F844;  }
		/* 8223F578h case    1:*/		return 0x8223F57C;
		  /* 8223F57Ch */ case    2:  		/* cmpwi CR6, R26, 2 */
		/* 8223F57Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000002);
		/* 8223F57Ch case    2:*/		return 0x8223F580;
	}
	return 0x8223F580;
} // Block from 8223F574h-8223F580h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223F580h
// Function '?EmitRet@Assembler@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F580);
		  /* 8223F580h */ case    0:  		/* bc 4, CR6_EQ, 708 */
		/* 8223F580h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8223F844;  }
		/* 8223F580h case    0:*/		return 0x8223F584;
		  /* 8223F584h */ case    1:  		/* lwz R11, <#[R31]> */
		/* 8223F584h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F584h case    1:*/		return 0x8223F588;
		  /* 8223F588h */ case    2:  		/* mr R4, R30 */
		/* 8223F588h case    2:*/		regs.R4 = regs.R30;
		/* 8223F588h case    2:*/		return 0x8223F58C;
		  /* 8223F58Ch */ case    3:  		/* lwz R3, <#[R11 + 2736]> */
		/* 8223F58Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 8223F58Ch case    3:*/		return 0x8223F590;
		  /* 8223F590h */ case    4:  		/* bl 151128 */
		/* 8223F590h case    4:*/		regs.LR = 0x8223F594; return 0x822643E8;
		/* 8223F590h case    4:*/		return 0x8223F594;
		  /* 8223F594h */ case    5:  		/* mr R26, R3 */
		/* 8223F594h case    5:*/		regs.R26 = regs.R3;
		/* 8223F594h case    5:*/		return 0x8223F598;
		  /* 8223F598h */ case    6:  		/* mr R3, R30 */
		/* 8223F598h case    6:*/		regs.R3 = regs.R30;
		/* 8223F598h case    6:*/		return 0x8223F59C;
		  /* 8223F59Ch */ case    7:  		/* bl -38884 */
		/* 8223F59Ch case    7:*/		regs.LR = 0x8223F5A0; return 0x82235DB8;
		/* 8223F59Ch case    7:*/		return 0x8223F5A0;
		  /* 8223F5A0h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 8223F5A0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F5A0h case    8:*/		return 0x8223F5A4;
		  /* 8223F5A4h */ case    9:  		/* mr R4, R28 */
		/* 8223F5A4h case    9:*/		regs.R4 = regs.R28;
		/* 8223F5A4h case    9:*/		return 0x8223F5A8;
		  /* 8223F5A8h */ case   10:  		/* mr R24, R3 */
		/* 8223F5A8h case   10:*/		regs.R24 = regs.R3;
		/* 8223F5A8h case   10:*/		return 0x8223F5AC;
		  /* 8223F5ACh */ case   11:  		/* lwz R3, <#[R11 + 2736]> */
		/* 8223F5ACh case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 8223F5ACh case   11:*/		return 0x8223F5B0;
		  /* 8223F5B0h */ case   12:  		/* bl 151096 */
		/* 8223F5B0h case   12:*/		regs.LR = 0x8223F5B4; return 0x822643E8;
		/* 8223F5B0h case   12:*/		return 0x8223F5B4;
		  /* 8223F5B4h */ case   13:  		/* mr R29, R3 */
		/* 8223F5B4h case   13:*/		regs.R29 = regs.R3;
		/* 8223F5B4h case   13:*/		return 0x8223F5B8;
		  /* 8223F5B8h */ case   14:  		/* mr R3, R28 */
		/* 8223F5B8h case   14:*/		regs.R3 = regs.R28;
		/* 8223F5B8h case   14:*/		return 0x8223F5BC;
		  /* 8223F5BCh */ case   15:  		/* bl -38916 */
		/* 8223F5BCh case   15:*/		regs.LR = 0x8223F5C0; return 0x82235DB8;
		/* 8223F5BCh case   15:*/		return 0x8223F5C0;
		  /* 8223F5C0h */ case   16:  		/* mr R25, R3 */
		/* 8223F5C0h case   16:*/		regs.R25 = regs.R3;
		/* 8223F5C0h case   16:*/		return 0x8223F5C4;
		  /* 8223F5C4h */ case   17:  		/* mr R4, R29 */
		/* 8223F5C4h case   17:*/		regs.R4 = regs.R29;
		/* 8223F5C4h case   17:*/		return 0x8223F5C8;
		  /* 8223F5C8h */ case   18:  		/* mr R3, R30 */
		/* 8223F5C8h case   18:*/		regs.R3 = regs.R30;
		/* 8223F5C8h case   18:*/		return 0x8223F5CC;
		  /* 8223F5CCh */ case   19:  		/* bl -1044 */
		/* 8223F5CCh case   19:*/		regs.LR = 0x8223F5D0; return 0x8223F1B8;
		/* 8223F5CCh case   19:*/		return 0x8223F5D0;
		  /* 8223F5D0h */ case   20:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F5D0h case   20:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F5D0h case   20:*/		return 0x8223F5D4;
		  /* 8223F5D4h */ case   21:  		/* bc 4, CR0_EQ, 104 */
		/* 8223F5D4h case   21:*/		if ( !regs.CR[0].eq ) { return 0x8223F63C;  }
		/* 8223F5D4h case   21:*/		return 0x8223F5D8;
		  /* 8223F5D8h */ case   22:  		/* mr R4, R26 */
		/* 8223F5D8h case   22:*/		regs.R4 = regs.R26;
		/* 8223F5D8h case   22:*/		return 0x8223F5DC;
		  /* 8223F5DCh */ case   23:  		/* mr R3, R28 */
		/* 8223F5DCh case   23:*/		regs.R3 = regs.R28;
		/* 8223F5DCh case   23:*/		return 0x8223F5E0;
	}
	return 0x8223F5E0;
} // Block from 8223F580h-8223F5E0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8223F5E0h
// Function '?Pop@?$stack@PAVVRegInfo@XGRAPHICS@@@XGRAPHICS@@QAAPAVVRegInfo@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F5E0);
		  /* 8223F5E0h */ case    0:  		/* bl -1064 */
		/* 8223F5E0h case    0:*/		regs.LR = 0x8223F5E4; return 0x8223F1B8;
		/* 8223F5E0h case    0:*/		return 0x8223F5E4;
		  /* 8223F5E4h */ case    1:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F5E4h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F5E4h case    1:*/		return 0x8223F5E8;
		  /* 8223F5E8h */ case    2:  		/* bc 4, CR0_EQ, 84 */
		/* 8223F5E8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8223F63C;  }
		/* 8223F5E8h case    2:*/		return 0x8223F5EC;
		  /* 8223F5ECh */ case    3:  		/* mr R5, R24 */
		/* 8223F5ECh case    3:*/		regs.R5 = regs.R24;
		/* 8223F5ECh case    3:*/		return 0x8223F5F0;
		  /* 8223F5F0h */ case    4:  		/* lwz R6, <#[R31]> */
		/* 8223F5F0h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F5F0h case    4:*/		return 0x8223F5F4;
		  /* 8223F5F4h */ case    5:  		/* mr R4, R26 */
		/* 8223F5F4h case    5:*/		regs.R4 = regs.R26;
		/* 8223F5F4h case    5:*/		return 0x8223F5F8;
		  /* 8223F5F8h */ case    6:  		/* mr R3, R30 */
		/* 8223F5F8h case    6:*/		regs.R3 = regs.R30;
		/* 8223F5F8h case    6:*/		return 0x8223F5FC;
		  /* 8223F5FCh */ case    7:  		/* bl -1228 */
		/* 8223F5FCh case    7:*/		regs.LR = 0x8223F600; return 0x8223F130;
		/* 8223F5FCh case    7:*/		return 0x8223F600;
		  /* 8223F600h */ case    8:  		/* mr R30, R3 */
		/* 8223F600h case    8:*/		regs.R30 = regs.R3;
		/* 8223F600h case    8:*/		return 0x8223F604;
		  /* 8223F604h */ case    9:  		/* mr R4, R27 */
		/* 8223F604h case    9:*/		regs.R4 = regs.R27;
		/* 8223F604h case    9:*/		return 0x8223F608;
		  /* 8223F608h */ case   10:  		/* lwz R3, <#[R27 + 948]> */
		/* 8223F608h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x000003B4) );
		/* 8223F608h case   10:*/		return 0x8223F60C;
		  /* 8223F60Ch */ case   11:  		/* mr R5, R30 */
		/* 8223F60Ch case   11:*/		regs.R5 = regs.R30;
		/* 8223F60Ch case   11:*/		return 0x8223F610;
		  /* 8223F610h */ case   12:  		/* bl 104880 */
		/* 8223F610h case   12:*/		regs.LR = 0x8223F614; return 0x82258FC0;
		/* 8223F610h case   12:*/		return 0x8223F614;
		  /* 8223F614h */ case   13:  		/* lwz R11, <#[R31 + 76]> */
		/* 8223F614h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F614h case   13:*/		return 0x8223F618;
		  /* 8223F618h */ case   14:  		/* mr R5, R25 */
		/* 8223F618h case   14:*/		regs.R5 = regs.R25;
		/* 8223F618h case   14:*/		return 0x8223F61C;
		  /* 8223F61Ch */ case   15:  		/* lwz R6, <#[R31]> */
		/* 8223F61Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F61Ch case   15:*/		return 0x8223F620;
		  /* 8223F620h */ case   16:  		/* addi R11, R11, 1 */
		/* 8223F620h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223F620h case   16:*/		return 0x8223F624;
		  /* 8223F624h */ case   17:  		/* mr R4, R29 */
		/* 8223F624h case   17:*/		regs.R4 = regs.R29;
		/* 8223F624h case   17:*/		return 0x8223F628;
		  /* 8223F628h */ case   18:  		/* stw R11, <#[R31 + 76]> */
		/* 8223F628h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F628h case   18:*/		return 0x8223F62C;
		  /* 8223F62Ch */ case   19:  		/* mr R3, R28 */
		/* 8223F62Ch case   19:*/		regs.R3 = regs.R28;
		/* 8223F62Ch case   19:*/		return 0x8223F630;
		  /* 8223F630h */ case   20:  		/* bl -1280 */
		/* 8223F630h case   20:*/		regs.LR = 0x8223F634; return 0x8223F130;
		/* 8223F630h case   20:*/		return 0x8223F634;
		  /* 8223F634h */ case   21:  		/* mr R4, R30 */
		/* 8223F634h case   21:*/		regs.R4 = regs.R30;
		/* 8223F634h case   21:*/		return 0x8223F638;
		  /* 8223F638h */ case   22:  		/* b -592 */
		/* 8223F638h case   22:*/		return 0x8223F3E8;
		/* 8223F638h case   22:*/		return 0x8223F63C;
	}
	return 0x8223F63C;
} // Block from 8223F5E0h-8223F63Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8223F63Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F63C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F63C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F63C);
		  /* 8223F63Ch */ case    0:  		/* cmpw CR6, R26, R29 */
		/* 8223F63Ch case    0:*/		cpu::op::cmpw<6>(regs,regs.R26,regs.R29);
		/* 8223F63Ch case    0:*/		return 0x8223F640;
	}
	return 0x8223F640;
} // Block from 8223F63Ch-8223F640h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223F640h
// Function '?DefIsDead@IRInst@XGRAPHICS@@QBA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F640);
		  /* 8223F640h */ case    0:  		/* bc 4, CR6_EQ, 192 */
		/* 8223F640h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8223F700;  }
		/* 8223F640h case    0:*/		return 0x8223F644;
		  /* 8223F644h */ case    1:  		/* lwz R10, <#[R30 + 128]> */
		/* 8223F644h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000080) );
		/* 8223F644h case    1:*/		return 0x8223F648;
		  /* 8223F648h */ case    2:  		/* mr R11, R18 */
		/* 8223F648h case    2:*/		regs.R11 = regs.R18;
		/* 8223F648h case    2:*/		return 0x8223F64C;
		  /* 8223F64Ch */ case    3:  		/* lwz R9, <#[R28 + 128]> */
		/* 8223F64Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000080) );
		/* 8223F64Ch case    3:*/		return 0x8223F650;
		  /* 8223F650h */ case    4:  		/* stw R10, <#[R1 + 80]> */
		/* 8223F650h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8223F650h case    4:*/		return 0x8223F654;
		  /* 8223F654h */ case    5:  		/* stw R9, <#[R1 + 88]> */
		/* 8223F654h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8223F654h case    5:*/		return 0x8223F658;
		  /* 8223F658h */ case    6:  		/* addi R10, R1, 80 */
		/* 8223F658h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 8223F658h case    6:*/		return 0x8223F65C;
		  /* 8223F65Ch */ case    7:  		/* lbzx R10, <#[R11 + R10]> */
		/* 8223F65Ch case    7:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8223F65Ch case    7:*/		return 0x8223F660;
		  /* 8223F660h */ case    8:  		/* cmplwi CR6, R10, 1 */
		/* 8223F660h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8223F660h case    8:*/		return 0x8223F664;
		  /* 8223F664h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 8223F664h case    9:*/		if ( regs.CR[6].eq ) { return 0x8223F678;  }
		/* 8223F664h case    9:*/		return 0x8223F668;
		  /* 8223F668h */ case   10:  		/* addi R10, R1, 88 */
		/* 8223F668h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x58);
		/* 8223F668h case   10:*/		return 0x8223F66C;
		  /* 8223F66Ch */ case   11:  		/* lbzx R10, <#[R11 + R10]> */
		/* 8223F66Ch case   11:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8223F66Ch case   11:*/		return 0x8223F670;
		  /* 8223F670h */ case   12:  		/* cmplwi CR6, R10, 1 */
		/* 8223F670h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8223F670h case   12:*/		return 0x8223F674;
		  /* 8223F674h */ case   13:  		/* bc 4, CR6_EQ, 132 */
		/* 8223F674h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8223F6F8;  }
		/* 8223F674h case   13:*/		return 0x8223F678;
	}
	return 0x8223F678;
} // Block from 8223F640h-8223F678h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223F678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F678);
		  /* 8223F678h */ case    0:  		/* addi R11, R11, 1 */
		/* 8223F678h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223F678h case    0:*/		return 0x8223F67C;
		  /* 8223F67Ch */ case    1:  		/* cmpwi CR6, R11, 4 */
		/* 8223F67Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 8223F67Ch case    1:*/		return 0x8223F680;
		  /* 8223F680h */ case    2:  		/* bc 12, CR6_LT, -40 */
		/* 8223F680h case    2:*/		if ( regs.CR[6].lt ) { return 0x8223F658;  }
		/* 8223F680h case    2:*/		return 0x8223F684;
		  /* 8223F684h */ case    3:  		/* li R11, 1 */
		/* 8223F684h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223F684h case    3:*/		return 0x8223F688;
		  /* 8223F688h */ case    4:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8223F688h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8223F688h case    4:*/		return 0x8223F68C;
		  /* 8223F68Ch */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 8223F68Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x8223F6AC;  }
		/* 8223F68Ch case    5:*/		return 0x8223F690;
		  /* 8223F690h */ case    6:  		/* lis R11, -32252 */
		/* 8223F690h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223F690h case    6:*/		return 0x8223F694;
		  /* 8223F694h */ case    7:  		/* mr R6, R21 */
		/* 8223F694h case    7:*/		regs.R6 = regs.R21;
		/* 8223F694h case    7:*/		return 0x8223F698;
		  /* 8223F698h */ case    8:  		/* addi R5, R11, 10596 */
		/* 8223F698h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2964);
		/* 8223F698h case    8:*/		return 0x8223F69C;
		  /* 8223F69Ch */ case    9:  		/* mr R4, R22 */
		/* 8223F69Ch case    9:*/		regs.R4 = regs.R22;
		/* 8223F69Ch case    9:*/		return 0x8223F6A0;
	}
	return 0x8223F6A0;
} // Block from 8223F678h-8223F6A0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223F6A0h
// Function '?IsUse@IRInst@XGRAPHICS@@QBA_NH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F6A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F6A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F6A0);
		  /* 8223F6A0h */ case    0:  		/* li R7, 1282 */
		/* 8223F6A0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x502);
		/* 8223F6A0h case    0:*/		return 0x8223F6A4;
		  /* 8223F6A4h */ case    1:  		/* li R3, 0 */
		/* 8223F6A4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223F6A4h case    1:*/		return 0x8223F6A8;
		  /* 8223F6A8h */ case    2:  		/* bl -948896 */
		/* 8223F6A8h case    2:*/		regs.LR = 0x8223F6AC; return 0x82157C08;
		/* 8223F6A8h case    2:*/		return 0x8223F6AC;
	}
	return 0x8223F6AC;
} // Block from 8223F6A0h-8223F6ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223F6ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F6AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F6AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F6AC);
		  /* 8223F6ACh */ case    0:  		/* li R10, 4 */
		/* 8223F6ACh case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 8223F6ACh case    0:*/		return 0x8223F6B0;
		  /* 8223F6B0h */ case    1:  		/* mr R11, R18 */
		/* 8223F6B0h case    1:*/		regs.R11 = regs.R18;
		/* 8223F6B0h case    1:*/		return 0x8223F6B4;
		  /* 8223F6B4h */ case    2:  		/* mtspr CTR, R10 */
		/* 8223F6B4h case    2:*/		regs.CTR = regs.R10;
		/* 8223F6B4h case    2:*/		return 0x8223F6B8;
		  /* 8223F6B8h */ case    3:  		/* addi R10, R1, 88 */
		/* 8223F6B8h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x58);
		/* 8223F6B8h case    3:*/		return 0x8223F6BC;
		  /* 8223F6BCh */ case    4:  		/* lbzx R10, <#[R11 + R10]> */
		/* 8223F6BCh case    4:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8223F6BCh case    4:*/		return 0x8223F6C0;
		  /* 8223F6C0h */ case    5:  		/* cmplwi CR6, R10, 1 */
		/* 8223F6C0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8223F6C0h case    5:*/		return 0x8223F6C4;
		  /* 8223F6C4h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 8223F6C4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8223F6D0;  }
		/* 8223F6C4h case    6:*/		return 0x8223F6C8;
		  /* 8223F6C8h */ case    7:  		/* addi R9, R1, 80 */
		/* 8223F6C8h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8223F6C8h case    7:*/		return 0x8223F6CC;
		  /* 8223F6CCh */ case    8:  		/* stbx R10, <#[R11 + R9]> */
		/* 8223F6CCh case    8:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8223F6CCh case    8:*/		return 0x8223F6D0;
	}
	return 0x8223F6D0;
} // Block from 8223F6ACh-8223F6D0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8223F6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F6D0);
		  /* 8223F6D0h */ case    0:  		/* addi R11, R11, 1 */
		/* 8223F6D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223F6D0h case    0:*/		return 0x8223F6D4;
		  /* 8223F6D4h */ case    1:  		/* bc 16, CR0_LT, -28 */
		/* 8223F6D4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8223F6B8;  }
		/* 8223F6D4h case    1:*/		return 0x8223F6D8;
		  /* 8223F6D8h */ case    2:  		/* mr R5, R24 */
		/* 8223F6D8h case    2:*/		regs.R5 = regs.R24;
		/* 8223F6D8h case    2:*/		return 0x8223F6DC;
		  /* 8223F6DCh */ case    3:  		/* lwz R6, <#[R31]> */
		/* 8223F6DCh case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F6DCh case    3:*/		return 0x8223F6E0;
		  /* 8223F6E0h */ case    4:  		/* mr R4, R26 */
		/* 8223F6E0h case    4:*/		regs.R4 = regs.R26;
		/* 8223F6E0h case    4:*/		return 0x8223F6E4;
		  /* 8223F6E4h */ case    5:  		/* mr R3, R30 */
		/* 8223F6E4h case    5:*/		regs.R3 = regs.R30;
		/* 8223F6E4h case    5:*/		return 0x8223F6E8;
		  /* 8223F6E8h */ case    6:  		/* bl -1464 */
		/* 8223F6E8h case    6:*/		regs.LR = 0x8223F6EC; return 0x8223F130;
		/* 8223F6E8h case    6:*/		return 0x8223F6EC;
		  /* 8223F6ECh */ case    7:  		/* lwz R11, <#[R1 + 80]> */
		/* 8223F6ECh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8223F6ECh case    7:*/		return 0x8223F6F0;
		  /* 8223F6F0h */ case    8:  		/* stw R11, <#[R3 + 128]> */
		/* 8223F6F0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 8223F6F0h case    8:*/		return 0x8223F6F4;
		  /* 8223F6F4h */ case    9:  		/* b -784 */
		/* 8223F6F4h case    9:*/		return 0x8223F3E4;
		/* 8223F6F4h case    9:*/		return 0x8223F6F8;
	}
	return 0x8223F6F8;
} // Block from 8223F6D0h-8223F6F8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223F6F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F6F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F6F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F6F8);
		  /* 8223F6F8h */ case    0:  		/* mr R11, R18 */
		/* 8223F6F8h case    0:*/		regs.R11 = regs.R18;
		/* 8223F6F8h case    0:*/		return 0x8223F6FC;
		  /* 8223F6FCh */ case    1:  		/* b -116 */
		/* 8223F6FCh case    1:*/		return 0x8223F688;
		/* 8223F6FCh case    1:*/		return 0x8223F700;
	}
	return 0x8223F700;
} // Block from 8223F6F8h-8223F700h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8223F700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F700);
		  /* 8223F700h */ case    0:  		/* mr R4, R26 */
		/* 8223F700h case    0:*/		regs.R4 = regs.R26;
		/* 8223F700h case    0:*/		return 0x8223F704;
		  /* 8223F704h */ case    1:  		/* mr R3, R28 */
		/* 8223F704h case    1:*/		regs.R3 = regs.R28;
		/* 8223F704h case    1:*/		return 0x8223F708;
		  /* 8223F708h */ case    2:  		/* bl -1360 */
		/* 8223F708h case    2:*/		regs.LR = 0x8223F70C; return 0x8223F1B8;
		/* 8223F708h case    2:*/		return 0x8223F70C;
		  /* 8223F70Ch */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F70Ch case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F70Ch case    3:*/		return 0x8223F710;
		  /* 8223F710h */ case    4:  		/* bc 12, CR0_EQ, 144 */
		/* 8223F710h case    4:*/		if ( regs.CR[0].eq ) { return 0x8223F7A0;  }
		/* 8223F710h case    4:*/		return 0x8223F714;
		  /* 8223F714h */ case    5:  		/* mr R4, R29 */
		/* 8223F714h case    5:*/		regs.R4 = regs.R29;
		/* 8223F714h case    5:*/		return 0x8223F718;
		  /* 8223F718h */ case    6:  		/* mr R3, R30 */
		/* 8223F718h case    6:*/		regs.R3 = regs.R30;
		/* 8223F718h case    6:*/		return 0x8223F71C;
		  /* 8223F71Ch */ case    7:  		/* bl -3132 */
		/* 8223F71Ch case    7:*/		regs.LR = 0x8223F720; return 0x8223EAE0;
		/* 8223F71Ch case    7:*/		return 0x8223F720;
		  /* 8223F720h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F720h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F720h case    8:*/		return 0x8223F724;
		  /* 8223F724h */ case    9:  		/* bc 4, CR0_EQ, 124 */
		/* 8223F724h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8223F7A0;  }
		/* 8223F724h case    9:*/		return 0x8223F728;
		  /* 8223F728h */ case   10:  		/* mr R4, R29 */
		/* 8223F728h case   10:*/		regs.R4 = regs.R29;
		/* 8223F728h case   10:*/		return 0x8223F72C;
		  /* 8223F72Ch */ case   11:  		/* mr R3, R28 */
		/* 8223F72Ch case   11:*/		regs.R3 = regs.R28;
		/* 8223F72Ch case   11:*/		return 0x8223F730;
		  /* 8223F730h */ case   12:  		/* bl -3152 */
		/* 8223F730h case   12:*/		regs.LR = 0x8223F734; return 0x8223EAE0;
		/* 8223F730h case   12:*/		return 0x8223F734;
		  /* 8223F734h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F734h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F734h case   13:*/		return 0x8223F738;
		  /* 8223F738h */ case   14:  		/* bc 4, CR0_EQ, 104 */
		/* 8223F738h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8223F7A0;  }
		/* 8223F738h case   14:*/		return 0x8223F73C;
		  /* 8223F73Ch */ case   15:  		/* mr R5, R25 */
		/* 8223F73Ch case   15:*/		regs.R5 = regs.R25;
		/* 8223F73Ch case   15:*/		return 0x8223F740;
		  /* 8223F740h */ case   16:  		/* lwz R6, <#[R31]> */
		/* 8223F740h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F740h case   16:*/		return 0x8223F744;
		  /* 8223F744h */ case   17:  		/* mr R4, R29 */
		/* 8223F744h case   17:*/		regs.R4 = regs.R29;
		/* 8223F744h case   17:*/		return 0x8223F748;
		  /* 8223F748h */ case   18:  		/* mr R3, R28 */
		/* 8223F748h case   18:*/		regs.R3 = regs.R28;
		/* 8223F748h case   18:*/		return 0x8223F74C;
		  /* 8223F74Ch */ case   19:  		/* bl -1564 */
		/* 8223F74Ch case   19:*/		regs.LR = 0x8223F750; return 0x8223F130;
		/* 8223F74Ch case   19:*/		return 0x8223F750;
		  /* 8223F750h */ case   20:  		/* mr R29, R3 */
		/* 8223F750h case   20:*/		regs.R29 = regs.R3;
		/* 8223F750h case   20:*/		return 0x8223F754;
		  /* 8223F754h */ case   21:  		/* mr R4, R23 */
		/* 8223F754h case   21:*/		regs.R4 = regs.R23;
		/* 8223F754h case   21:*/		return 0x8223F758;
	}
	return 0x8223F758;
} // Block from 8223F700h-8223F758h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8223F758h
// Function '?HasLiteralWrites@IRInst@XGRAPHICS@@QBA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F758);
		  /* 8223F758h */ case    0:  		/* lwz R3, <#[R23 + 948]> */
		/* 8223F758h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x000003B4) );
		/* 8223F758h case    0:*/		return 0x8223F75C;
		  /* 8223F75Ch */ case    1:  		/* mr R5, R29 */
		/* 8223F75Ch case    1:*/		regs.R5 = regs.R29;
		/* 8223F75Ch case    1:*/		return 0x8223F760;
		  /* 8223F760h */ case    2:  		/* bl 104640 */
		/* 8223F760h case    2:*/		regs.LR = 0x8223F764; return 0x82259020;
		/* 8223F760h case    2:*/		return 0x8223F764;
		  /* 8223F764h */ case    3:  		/* lwz R11, <#[R31 + 76]> */
		/* 8223F764h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F764h case    3:*/		return 0x8223F768;
		  /* 8223F768h */ case    4:  		/* mr R3, R28 */
		/* 8223F768h case    4:*/		regs.R3 = regs.R28;
		/* 8223F768h case    4:*/		return 0x8223F76C;
		  /* 8223F76Ch */ case    5:  		/* addi R11, R11, 1 */
		/* 8223F76Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223F76Ch case    5:*/		return 0x8223F770;
		  /* 8223F770h */ case    6:  		/* stw R11, <#[R31 + 76]> */
		/* 8223F770h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F770h case    6:*/		return 0x8223F774;
		  /* 8223F774h */ case    7:  		/* bl -39252 */
		/* 8223F774h case    7:*/		regs.LR = 0x8223F778; return 0x82235E20;
		/* 8223F774h case    7:*/		return 0x8223F778;
		  /* 8223F778h */ case    8:  		/* mr R5, R24 */
		/* 8223F778h case    8:*/		regs.R5 = regs.R24;
		/* 8223F778h case    8:*/		return 0x8223F77C;
		  /* 8223F77Ch */ case    9:  		/* mr R4, R26 */
		/* 8223F77Ch case    9:*/		regs.R4 = regs.R26;
		/* 8223F77Ch case    9:*/		return 0x8223F780;
		  /* 8223F780h */ case   10:  		/* lwz R6, <#[R31]> */
		/* 8223F780h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F780h case   10:*/		return 0x8223F784;
		  /* 8223F784h */ case   11:  		/* mr R3, R30 */
		/* 8223F784h case   11:*/		regs.R3 = regs.R30;
		/* 8223F784h case   11:*/		return 0x8223F788;
		  /* 8223F788h */ case   12:  		/* bl -1624 */
		/* 8223F788h case   12:*/		regs.LR = 0x8223F78C; return 0x8223F130;
		/* 8223F788h case   12:*/		return 0x8223F78C;
		  /* 8223F78Ch */ case   13:  		/* mr R5, R3 */
		/* 8223F78Ch case   13:*/		regs.R5 = regs.R3;
		/* 8223F78Ch case   13:*/		return 0x8223F790;
		  /* 8223F790h */ case   14:  		/* mr R4, R27 */
		/* 8223F790h case   14:*/		regs.R4 = regs.R27;
		/* 8223F790h case   14:*/		return 0x8223F794;
		  /* 8223F794h */ case   15:  		/* lwz R3, <#[R27 + 948]> */
		/* 8223F794h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x000003B4) );
		/* 8223F794h case   15:*/		return 0x8223F798;
		  /* 8223F798h */ case   16:  		/* bl 104488 */
		/* 8223F798h case   16:*/		regs.LR = 0x8223F79C; return 0x82258FC0;
		/* 8223F798h case   16:*/		return 0x8223F79C;
		  /* 8223F79Ch */ case   17:  		/* b -580 */
		/* 8223F79Ch case   17:*/		return 0x8223F558;
		/* 8223F79Ch case   17:*/		return 0x8223F7A0;
	}
	return 0x8223F7A0;
} // Block from 8223F758h-8223F7A0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8223F7A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F7A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F7A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F7A0);
		  /* 8223F7A0h */ case    0:  		/* mr R4, R29 */
		/* 8223F7A0h case    0:*/		regs.R4 = regs.R29;
		/* 8223F7A0h case    0:*/		return 0x8223F7A4;
		  /* 8223F7A4h */ case    1:  		/* mr R3, R30 */
		/* 8223F7A4h case    1:*/		regs.R3 = regs.R30;
		/* 8223F7A4h case    1:*/		return 0x8223F7A8;
		  /* 8223F7A8h */ case    2:  		/* bl -1520 */
		/* 8223F7A8h case    2:*/		regs.LR = 0x8223F7AC; return 0x8223F1B8;
		/* 8223F7A8h case    2:*/		return 0x8223F7AC;
		  /* 8223F7ACh */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F7ACh case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F7ACh case    3:*/		return 0x8223F7B0;
		  /* 8223F7B0h */ case    4:  		/* bc 12, CR0_EQ, 148 */
		/* 8223F7B0h case    4:*/		if ( regs.CR[0].eq ) { return 0x8223F844;  }
		/* 8223F7B0h case    4:*/		return 0x8223F7B4;
		  /* 8223F7B4h */ case    5:  		/* mr R4, R26 */
		/* 8223F7B4h case    5:*/		regs.R4 = regs.R26;
		/* 8223F7B4h case    5:*/		return 0x8223F7B8;
		  /* 8223F7B8h */ case    6:  		/* mr R3, R28 */
		/* 8223F7B8h case    6:*/		regs.R3 = regs.R28;
		/* 8223F7B8h case    6:*/		return 0x8223F7BC;
		  /* 8223F7BCh */ case    7:  		/* bl -3292 */
		/* 8223F7BCh case    7:*/		regs.LR = 0x8223F7C0; return 0x8223EAE0;
		/* 8223F7BCh case    7:*/		return 0x8223F7C0;
		  /* 8223F7C0h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F7C0h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F7C0h case    8:*/		return 0x8223F7C4;
		  /* 8223F7C4h */ case    9:  		/* bc 4, CR0_EQ, 128 */
		/* 8223F7C4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8223F844;  }
		/* 8223F7C4h case    9:*/		return 0x8223F7C8;
		  /* 8223F7C8h */ case   10:  		/* mr R4, R26 */
		/* 8223F7C8h case   10:*/		regs.R4 = regs.R26;
		/* 8223F7C8h case   10:*/		return 0x8223F7CC;
		  /* 8223F7CCh */ case   11:  		/* mr R3, R30 */
		/* 8223F7CCh case   11:*/		regs.R3 = regs.R30;
		/* 8223F7CCh case   11:*/		return 0x8223F7D0;
		  /* 8223F7D0h */ case   12:  		/* bl -3312 */
		/* 8223F7D0h case   12:*/		regs.LR = 0x8223F7D4; return 0x8223EAE0;
		/* 8223F7D0h case   12:*/		return 0x8223F7D4;
		  /* 8223F7D4h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8223F7D4h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8223F7D4h case   13:*/		return 0x8223F7D8;
	}
	return 0x8223F7D8;
} // Block from 8223F7A0h-8223F7D8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223F7D8h
// Function '?GetPrdStackRegIniter@Assembler@XGRAPHICS@@QAAPAVIRInst@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F7D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F7D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F7D8);
		  /* 8223F7D8h */ case    0:  		/* bc 4, CR0_EQ, 108 */
		/* 8223F7D8h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8223F844;  }
		/* 8223F7D8h case    0:*/		return 0x8223F7DC;
		  /* 8223F7DCh */ case    1:  		/* mr R5, R24 */
		/* 8223F7DCh case    1:*/		regs.R5 = regs.R24;
		/* 8223F7DCh case    1:*/		return 0x8223F7E0;
		  /* 8223F7E0h */ case    2:  		/* lwz R6, <#[R31]> */
		/* 8223F7E0h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F7E0h case    2:*/		return 0x8223F7E4;
		  /* 8223F7E4h */ case    3:  		/* mr R4, R26 */
		/* 8223F7E4h case    3:*/		regs.R4 = regs.R26;
		/* 8223F7E4h case    3:*/		return 0x8223F7E8;
		  /* 8223F7E8h */ case    4:  		/* mr R3, R30 */
		/* 8223F7E8h case    4:*/		regs.R3 = regs.R30;
		/* 8223F7E8h case    4:*/		return 0x8223F7EC;
		  /* 8223F7ECh */ case    5:  		/* bl -1724 */
		/* 8223F7ECh case    5:*/		regs.LR = 0x8223F7F0; return 0x8223F130;
		/* 8223F7ECh case    5:*/		return 0x8223F7F0;
		  /* 8223F7F0h */ case    6:  		/* mr R26, R3 */
		/* 8223F7F0h case    6:*/		regs.R26 = regs.R3;
		/* 8223F7F0h case    6:*/		return 0x8223F7F4;
		  /* 8223F7F4h */ case    7:  		/* mr R4, R23 */
		/* 8223F7F4h case    7:*/		regs.R4 = regs.R23;
		/* 8223F7F4h case    7:*/		return 0x8223F7F8;
		  /* 8223F7F8h */ case    8:  		/* lwz R3, <#[R23 + 948]> */
		/* 8223F7F8h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x000003B4) );
		/* 8223F7F8h case    8:*/		return 0x8223F7FC;
		  /* 8223F7FCh */ case    9:  		/* mr R5, R26 */
		/* 8223F7FCh case    9:*/		regs.R5 = regs.R26;
		/* 8223F7FCh case    9:*/		return 0x8223F800;
		  /* 8223F800h */ case   10:  		/* bl 104480 */
		/* 8223F800h case   10:*/		regs.LR = 0x8223F804; return 0x82259020;
		/* 8223F800h case   10:*/		return 0x8223F804;
		  /* 8223F804h */ case   11:  		/* lwz R11, <#[R31 + 76]> */
		/* 8223F804h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F804h case   11:*/		return 0x8223F808;
		  /* 8223F808h */ case   12:  		/* mr R3, R30 */
		/* 8223F808h case   12:*/		regs.R3 = regs.R30;
		/* 8223F808h case   12:*/		return 0x8223F80C;
		  /* 8223F80Ch */ case   13:  		/* addi R11, R11, 1 */
		/* 8223F80Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223F80Ch case   13:*/		return 0x8223F810;
		  /* 8223F810h */ case   14:  		/* stw R11, <#[R31 + 76]> */
		/* 8223F810h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F810h case   14:*/		return 0x8223F814;
		  /* 8223F814h */ case   15:  		/* bl -39412 */
		/* 8223F814h case   15:*/		regs.LR = 0x8223F818; return 0x82235E20;
		/* 8223F814h case   15:*/		return 0x8223F818;
		  /* 8223F818h */ case   16:  		/* mr R5, R25 */
		/* 8223F818h case   16:*/		regs.R5 = regs.R25;
		/* 8223F818h case   16:*/		return 0x8223F81C;
		  /* 8223F81Ch */ case   17:  		/* mr R4, R29 */
		/* 8223F81Ch case   17:*/		regs.R4 = regs.R29;
		/* 8223F81Ch case   17:*/		return 0x8223F820;
		  /* 8223F820h */ case   18:  		/* lwz R6, <#[R31]> */
		/* 8223F820h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F820h case   18:*/		return 0x8223F824;
		  /* 8223F824h */ case   19:  		/* mr R3, R28 */
		/* 8223F824h case   19:*/		regs.R3 = regs.R28;
		/* 8223F824h case   19:*/		return 0x8223F828;
		  /* 8223F828h */ case   20:  		/* bl -1784 */
		/* 8223F828h case   20:*/		regs.LR = 0x8223F82C; return 0x8223F130;
		/* 8223F828h case   20:*/		return 0x8223F82C;
		  /* 8223F82Ch */ case   21:  		/* mr R5, R3 */
		/* 8223F82Ch case   21:*/		regs.R5 = regs.R3;
		/* 8223F82Ch case   21:*/		return 0x8223F830;
		  /* 8223F830h */ case   22:  		/* mr R4, R27 */
		/* 8223F830h case   22:*/		regs.R4 = regs.R27;
		/* 8223F830h case   22:*/		return 0x8223F834;
		  /* 8223F834h */ case   23:  		/* lwz R3, <#[R27 + 948]> */
		/* 8223F834h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x000003B4) );
		/* 8223F834h case   23:*/		return 0x8223F838;
		  /* 8223F838h */ case   24:  		/* bl 104328 */
		/* 8223F838h case   24:*/		regs.LR = 0x8223F83C; return 0x82258FC0;
		/* 8223F838h case   24:*/		return 0x8223F83C;
		  /* 8223F83Ch */ case   25:  		/* mr R3, R28 */
		/* 8223F83Ch case   25:*/		regs.R3 = regs.R28;
		/* 8223F83Ch case   25:*/		return 0x8223F840;
		  /* 8223F840h */ case   26:  		/* b 328 */
		/* 8223F840h case   26:*/		return 0x8223F988;
		/* 8223F840h case   26:*/		return 0x8223F844;
	}
	return 0x8223F844;
} // Block from 8223F7D8h-8223F844h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8223F844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F844);
		  /* 8223F844h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8223F844h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F844h case    0:*/		return 0x8223F848;
		  /* 8223F848h */ case    1:  		/* mr R4, R30 */
		/* 8223F848h case    1:*/		regs.R4 = regs.R30;
		/* 8223F848h case    1:*/		return 0x8223F84C;
		  /* 8223F84Ch */ case    2:  		/* lwz R3, <#[R11 + 2736]> */
		/* 8223F84Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 8223F84Ch case    2:*/		return 0x8223F850;
	}
	return 0x8223F850;
} // Block from 8223F844h-8223F850h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223F850h
// Function '?FinishUp@Assembler@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F850);
		  /* 8223F850h */ case    0:  		/* bl 150424 */
		/* 8223F850h case    0:*/		regs.LR = 0x8223F854; return 0x822643E8;
		/* 8223F850h case    0:*/		return 0x8223F854;
		  /* 8223F854h */ case    1:  		/* mr R25, R3 */
		/* 8223F854h case    1:*/		regs.R25 = regs.R3;
		/* 8223F854h case    1:*/		return 0x8223F858;
		  /* 8223F858h */ case    2:  		/* mr R3, R30 */
		/* 8223F858h case    2:*/		regs.R3 = regs.R30;
		/* 8223F858h case    2:*/		return 0x8223F85C;
		  /* 8223F85Ch */ case    3:  		/* bl -39588 */
		/* 8223F85Ch case    3:*/		regs.LR = 0x8223F860; return 0x82235DB8;
		/* 8223F85Ch case    3:*/		return 0x8223F860;
		  /* 8223F860h */ case    4:  		/* lwz R11, <#[R31 + 132]> */
		/* 8223F860h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 8223F860h case    4:*/		return 0x8223F864;
		  /* 8223F864h */ case    5:  		/* mr R29, R3 */
		/* 8223F864h case    5:*/		regs.R29 = regs.R3;
		/* 8223F864h case    5:*/		return 0x8223F868;
		  /* 8223F868h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 8223F868h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223F868h case    6:*/		return 0x8223F86C;
		  /* 8223F86Ch */ case    7:  		/* bc 4, CR6_LT, 16 */
		/* 8223F86Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x8223F87C;  }
		/* 8223F86Ch case    7:*/		return 0x8223F870;
		  /* 8223F870h */ case    8:  		/* lwz R3, <#[R31 + 140]> */
		/* 8223F870h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000008C) );
		/* 8223F870h case    8:*/		return 0x8223F874;
		  /* 8223F874h */ case    9:  		/* bl 32500 */
		/* 8223F874h case    9:*/		regs.LR = 0x8223F878; return 0x82247768;
		/* 8223F874h case    9:*/		return 0x8223F878;
		  /* 8223F878h */ case   10:  		/* stw R3, <#[R31 + 132]> */
		/* 8223F878h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000084) );
		/* 8223F878h case   10:*/		return 0x8223F87C;
	}
	return 0x8223F87C;
} // Block from 8223F850h-8223F87Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8223F87Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F87C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F87C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F87C);
		  /* 8223F87Ch */ case    0:  		/* mr R5, R29 */
		/* 8223F87Ch case    0:*/		regs.R5 = regs.R29;
		/* 8223F87Ch case    0:*/		return 0x8223F880;
		  /* 8223F880h */ case    1:  		/* lwz R4, <#[R31 + 132]> */
		/* 8223F880h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000084) );
		/* 8223F880h case    1:*/		return 0x8223F884;
		  /* 8223F884h */ case    2:  		/* mr R3, R30 */
		/* 8223F884h case    2:*/		regs.R3 = regs.R30;
		/* 8223F884h case    2:*/		return 0x8223F888;
		  /* 8223F888h */ case    3:  		/* lwz R6, <#[R31]> */
		/* 8223F888h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F888h case    3:*/		return 0x8223F88C;
		  /* 8223F88Ch */ case    4:  		/* bl -1980 */
		/* 8223F88Ch case    4:*/		regs.LR = 0x8223F890; return 0x8223F0D0;
		/* 8223F88Ch case    4:*/		return 0x8223F890;
		  /* 8223F890h */ case    5:  		/* mr R26, R3 */
		/* 8223F890h case    5:*/		regs.R26 = regs.R3;
		/* 8223F890h case    5:*/		return 0x8223F894;
		  /* 8223F894h */ case    6:  		/* mr R4, R23 */
		/* 8223F894h case    6:*/		regs.R4 = regs.R23;
		/* 8223F894h case    6:*/		return 0x8223F898;
		  /* 8223F898h */ case    7:  		/* lwz R3, <#[R23 + 948]> */
		/* 8223F898h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x000003B4) );
		/* 8223F898h case    7:*/		return 0x8223F89C;
		  /* 8223F89Ch */ case    8:  		/* mr R5, R26 */
		/* 8223F89Ch case    8:*/		regs.R5 = regs.R26;
		/* 8223F89Ch case    8:*/		return 0x8223F8A0;
		  /* 8223F8A0h */ case    9:  		/* bl 104320 */
		/* 8223F8A0h case    9:*/		regs.LR = 0x8223F8A4; return 0x82259020;
		/* 8223F8A0h case    9:*/		return 0x8223F8A4;
		  /* 8223F8A4h */ case   10:  		/* lwz R11, <#[R31 + 80]> */
		/* 8223F8A4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 8223F8A4h case   10:*/		return 0x8223F8A8;
		  /* 8223F8A8h */ case   11:  		/* cmpwi CR6, R19, 2 */
		/* 8223F8A8h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000002);
		/* 8223F8A8h case   11:*/		return 0x8223F8AC;
		  /* 8223F8ACh */ case   12:  		/* addi R11, R11, 1 */
		/* 8223F8ACh case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223F8ACh case   12:*/		return 0x8223F8B0;
		  /* 8223F8B0h */ case   13:  		/* stw R11, <#[R31 + 80]> */
		/* 8223F8B0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 8223F8B0h case   13:*/		return 0x8223F8B4;
		  /* 8223F8B4h */ case   14:  		/* bc 4, CR6_EQ, 96 */
		/* 8223F8B4h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8223F914;  }
		/* 8223F8B4h case   14:*/		return 0x8223F8B8;
		  /* 8223F8B8h */ case   15:  		/* lwz R11, <#[R31]> */
		/* 8223F8B8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F8B8h case   15:*/		return 0x8223F8BC;
		  /* 8223F8BCh */ case   16:  		/* mr R4, R28 */
		/* 8223F8BCh case   16:*/		regs.R4 = regs.R28;
		/* 8223F8BCh case   16:*/		return 0x8223F8C0;
		  /* 8223F8C0h */ case   17:  		/* lwz R3, <#[R11 + 2736]> */
		/* 8223F8C0h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 8223F8C0h case   17:*/		return 0x8223F8C4;
		  /* 8223F8C4h */ case   18:  		/* bl 150308 */
		/* 8223F8C4h case   18:*/		regs.LR = 0x8223F8C8; return 0x822643E8;
		/* 8223F8C4h case   18:*/		return 0x8223F8C8;
		  /* 8223F8C8h */ case   19:  		/* mr R29, R3 */
		/* 8223F8C8h case   19:*/		regs.R29 = regs.R3;
		/* 8223F8C8h case   19:*/		return 0x8223F8CC;
		  /* 8223F8CCh */ case   20:  		/* mr R3, R28 */
		/* 8223F8CCh case   20:*/		regs.R3 = regs.R28;
		/* 8223F8CCh case   20:*/		return 0x8223F8D0;
		  /* 8223F8D0h */ case   21:  		/* bl -39704 */
		/* 8223F8D0h case   21:*/		regs.LR = 0x8223F8D4; return 0x82235DB8;
		/* 8223F8D0h case   21:*/		return 0x8223F8D4;
		  /* 8223F8D4h */ case   22:  		/* mr R5, R3 */
		/* 8223F8D4h case   22:*/		regs.R5 = regs.R3;
		/* 8223F8D4h case   22:*/		return 0x8223F8D8;
		  /* 8223F8D8h */ case   23:  		/* mr R4, R29 */
		/* 8223F8D8h case   23:*/		regs.R4 = regs.R29;
		/* 8223F8D8h case   23:*/		return 0x8223F8DC;
		  /* 8223F8DCh */ case   24:  		/* lwz R6, <#[R31]> */
		/* 8223F8DCh case   24:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F8DCh case   24:*/		return 0x8223F8E0;
		  /* 8223F8E0h */ case   25:  		/* mr R3, R28 */
		/* 8223F8E0h case   25:*/		regs.R3 = regs.R28;
		/* 8223F8E0h case   25:*/		return 0x8223F8E4;
		  /* 8223F8E4h */ case   26:  		/* bl -1972 */
		/* 8223F8E4h case   26:*/		regs.LR = 0x8223F8E8; return 0x8223F130;
		/* 8223F8E4h case   26:*/		return 0x8223F8E8;
		  /* 8223F8E8h */ case   27:  		/* mr R29, R3 */
		/* 8223F8E8h case   27:*/		regs.R29 = regs.R3;
		/* 8223F8E8h case   27:*/		return 0x8223F8EC;
		  /* 8223F8ECh */ case   28:  		/* mr R4, R27 */
		/* 8223F8ECh case   28:*/		regs.R4 = regs.R27;
		/* 8223F8ECh case   28:*/		return 0x8223F8F0;
		  /* 8223F8F0h */ case   29:  		/* lwz R3, <#[R27 + 948]> */
		/* 8223F8F0h case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x000003B4) );
		/* 8223F8F0h case   29:*/		return 0x8223F8F4;
		  /* 8223F8F4h */ case   30:  		/* mr R5, R29 */
		/* 8223F8F4h case   30:*/		regs.R5 = regs.R29;
		/* 8223F8F4h case   30:*/		return 0x8223F8F8;
		  /* 8223F8F8h */ case   31:  		/* bl 104136 */
		/* 8223F8F8h case   31:*/		regs.LR = 0x8223F8FC; return 0x82258FC0;
		/* 8223F8F8h case   31:*/		return 0x8223F8FC;
		  /* 8223F8FCh */ case   32:  		/* lwz R11, <#[R31 + 76]> */
		/* 8223F8FCh case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F8FCh case   32:*/		return 0x8223F900;
		  /* 8223F900h */ case   33:  		/* mr R3, R28 */
		/* 8223F900h case   33:*/		regs.R3 = regs.R28;
		/* 8223F900h case   33:*/		return 0x8223F904;
		  /* 8223F904h */ case   34:  		/* addi R11, R11, 1 */
		/* 8223F904h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223F904h case   34:*/		return 0x8223F908;
		  /* 8223F908h */ case   35:  		/* stw R11, <#[R31 + 76]> */
		/* 8223F908h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F908h case   35:*/		return 0x8223F90C;
		  /* 8223F90Ch */ case   36:  		/* bl -39660 */
		/* 8223F90Ch case   36:*/		regs.LR = 0x8223F910; return 0x82235E20;
		/* 8223F90Ch case   36:*/		return 0x8223F910;
		  /* 8223F910h */ case   37:  		/* mr R27, R29 */
		/* 8223F910h case   37:*/		regs.R27 = regs.R29;
		/* 8223F910h case   37:*/		return 0x8223F914;
	}
	return 0x8223F914;
} // Block from 8223F87Ch-8223F914h (38 instructions)

//////////////////////////////////////////////////////
// Block at 8223F914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F914);
		  /* 8223F914h */ case    0:  		/* mr R3, R30 */
		/* 8223F914h case    0:*/		regs.R3 = regs.R30;
		/* 8223F914h case    0:*/		return 0x8223F918;
		  /* 8223F918h */ case    1:  		/* lwz R4, <#[R31]> */
		/* 8223F918h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F918h case    1:*/		return 0x8223F91C;
		  /* 8223F91Ch */ case    2:  		/* bl 91716 */
		/* 8223F91Ch case    2:*/		regs.LR = 0x8223F920; return 0x82255F60;
		/* 8223F91Ch case    2:*/		return 0x8223F920;
		  /* 8223F920h */ case    3:  		/* mr R4, R30 */
		/* 8223F920h case    3:*/		regs.R4 = regs.R30;
		/* 8223F920h case    3:*/		return 0x8223F924;
		  /* 8223F924h */ case    4:  		/* mr R29, R3 */
		/* 8223F924h case    4:*/		regs.R29 = regs.R3;
		/* 8223F924h case    4:*/		return 0x8223F928;
		  /* 8223F928h */ case    5:  		/* bl 81568 */
		/* 8223F928h case    5:*/		regs.LR = 0x8223F92C; return 0x822537C8;
		/* 8223F928h case    5:*/		return 0x8223F92C;
		  /* 8223F92Ch */ case    6:  		/* mr R3, R30 */
		/* 8223F92Ch case    6:*/		regs.R3 = regs.R30;
		/* 8223F92Ch case    6:*/		return 0x8223F930;
		  /* 8223F930h */ case    7:  		/* bl 81624 */
		/* 8223F930h case    7:*/		regs.LR = 0x8223F934; return 0x82253808;
		/* 8223F930h case    7:*/		return 0x8223F934;
		  /* 8223F934h */ case    8:  		/* cmplw CR6, R27, R30 */
		/* 8223F934h case    8:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R30);
		/* 8223F934h case    8:*/		return 0x8223F938;
		  /* 8223F938h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 8223F938h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8223F940;  }
		/* 8223F938h case    9:*/		return 0x8223F93C;
		  /* 8223F93Ch */ case   10:  		/* mr R27, R29 */
		/* 8223F93Ch case   10:*/		regs.R27 = regs.R29;
		/* 8223F93Ch case   10:*/		return 0x8223F940;
	}
	return 0x8223F940;
} // Block from 8223F914h-8223F940h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8223F940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F940);
		  /* 8223F940h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8223F940h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8223F940h case    0:*/		return 0x8223F944;
		  /* 8223F944h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 8223F944h case    1:*/		if ( regs.CR[6].eq ) { return 0x8223F95C;  }
		/* 8223F944h case    1:*/		return 0x8223F948;
		  /* 8223F948h */ case    2:  		/* mr R3, R30 */
		/* 8223F948h case    2:*/		regs.R3 = regs.R30;
		/* 8223F948h case    2:*/		return 0x8223F94C;
		  /* 8223F94Ch */ case    3:  		/* lwz R4, <#[R31]> */
		/* 8223F94Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8223F94Ch case    3:*/		return 0x8223F950;
		  /* 8223F950h */ case    4:  		/* bl 96112 */
		/* 8223F950h case    4:*/		regs.LR = 0x8223F954; return 0x822570C0;
		/* 8223F950h case    4:*/		return 0x8223F954;
		  /* 8223F954h */ case    5:  		/* mr R30, R3 */
		/* 8223F954h case    5:*/		regs.R30 = regs.R3;
		/* 8223F954h case    5:*/		return 0x8223F958;
		  /* 8223F958h */ case    6:  		/* b 8 */
		/* 8223F958h case    6:*/		return 0x8223F960;
		/* 8223F958h case    6:*/		return 0x8223F95C;
	}
	return 0x8223F95C;
} // Block from 8223F940h-8223F95Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223F95Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F95C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F95C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F95C);
		  /* 8223F95Ch */ case    0:  		/* mr R30, R18 */
		/* 8223F95Ch case    0:*/		regs.R30 = regs.R18;
		/* 8223F95Ch case    0:*/		return 0x8223F960;
	}
	return 0x8223F960;
} // Block from 8223F95Ch-8223F960h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223F960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F960);
		  /* 8223F960h */ case    0:  		/* stw R25, <#[R30 + 56]> */
		/* 8223F960h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x00000038) );
		/* 8223F960h case    0:*/		return 0x8223F964;
		  /* 8223F964h */ case    1:  		/* mr R5, R29 */
		/* 8223F964h case    1:*/		regs.R5 = regs.R29;
		/* 8223F964h case    1:*/		return 0x8223F968;
		  /* 8223F968h */ case    2:  		/* stw R18, <#[R30 + 80]> */
		/* 8223F968h case    2:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R30 + 0x00000050) );
		/* 8223F968h case    2:*/		return 0x8223F96C;
		  /* 8223F96Ch */ case    3:  		/* li R4, 1 */
		/* 8223F96Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223F96Ch case    3:*/		return 0x8223F970;
		  /* 8223F970h */ case    4:  		/* mr R3, R30 */
		/* 8223F970h case    4:*/		regs.R3 = regs.R30;
		/* 8223F970h case    4:*/		return 0x8223F974;
		  /* 8223F974h */ case    5:  		/* bl -39460 */
		/* 8223F974h case    5:*/		regs.LR = 0x8223F978; return 0x82235F50;
		/* 8223F974h case    5:*/		return 0x8223F978;
		  /* 8223F978h */ case    6:  		/* mr R4, R27 */
		/* 8223F978h case    6:*/		regs.R4 = regs.R27;
		/* 8223F978h case    6:*/		return 0x8223F97C;
		  /* 8223F97Ch */ case    7:  		/* mr R3, R30 */
		/* 8223F97Ch case    7:*/		regs.R3 = regs.R30;
		/* 8223F97Ch case    7:*/		return 0x8223F980;
		  /* 8223F980h */ case    8:  		/* bl 81512 */
		/* 8223F980h case    8:*/		regs.LR = 0x8223F984; return 0x822537E8;
		/* 8223F980h case    8:*/		return 0x8223F984;
		  /* 8223F984h */ case    9:  		/* mr R3, R29 */
		/* 8223F984h case    9:*/		regs.R3 = regs.R29;
		/* 8223F984h case    9:*/		return 0x8223F988;
	}
	return 0x8223F988;
} // Block from 8223F960h-8223F988h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8223F988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F988);
		  /* 8223F988h */ case    0:  		/* lwz R11, <#[R31 + 76]> */
		/* 8223F988h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F988h case    0:*/		return 0x8223F98C;
		  /* 8223F98Ch */ case    1:  		/* addi R11, R11, 1 */
		/* 8223F98Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8223F98Ch case    1:*/		return 0x8223F990;
		  /* 8223F990h */ case    2:  		/* stw R11, <#[R31 + 76]> */
		/* 8223F990h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8223F990h case    2:*/		return 0x8223F994;
		  /* 8223F994h */ case    3:  		/* bl -39796 */
		/* 8223F994h case    3:*/		regs.LR = 0x8223F998; return 0x82235E20;
		/* 8223F994h case    3:*/		return 0x8223F998;
		  /* 8223F998h */ case    4:  		/* stw R26, <#[R20]> */
		/* 8223F998h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R20 + 0x00000000) );
		/* 8223F998h case    4:*/		return 0x8223F99C;
	}
	return 0x8223F99C;
} // Block from 8223F988h-8223F99Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8223F99Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F99C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F99C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F99C);
		  /* 8223F99Ch */ case    0:  		/* addi R1, R1, 224 */
		/* 8223F99Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 8223F99Ch case    0:*/		return 0x8223F9A0;
		  /* 8223F9A0h */ case    1:  		/* b -1763104 */
		/* 8223F9A0h case    1:*/		return 0x82091280;
		/* 8223F9A0h case    1:*/		return 0x8223F9A4;
		  /* 8223F9A4h */ case    2:  		/* nop */
		/* 8223F9A4h case    2:*/		cpu::op::nop();
		/* 8223F9A4h case    2:*/		return 0x8223F9A8;
	}
	return 0x8223F9A8;
} // Block from 8223F99Ch-8223F9A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223F9A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223F9A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223F9A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223F9A8);
		  /* 8223F9A8h */ case    0:  		/* mfspr R12, LR */
		/* 8223F9A8h case    0:*/		regs.R12 = regs.LR;
		/* 8223F9A8h case    0:*/		return 0x8223F9AC;
		  /* 8223F9ACh */ case    1:  		/* bl -1763156 */
		/* 8223F9ACh case    1:*/		regs.LR = 0x8223F9B0; return 0x82091258;
		/* 8223F9ACh case    1:*/		return 0x8223F9B0;
		  /* 8223F9B0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8223F9B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8223F9B0h case    2:*/		return 0x8223F9B4;
		  /* 8223F9B4h */ case    3:  		/* lwz R11, <#[R4 + 12]> */
		/* 8223F9B4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8223F9B4h case    3:*/		return 0x8223F9B8;
		  /* 8223F9B8h */ case    4:  		/* li R30, 0 */
		/* 8223F9B8h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8223F9B8h case    4:*/		return 0x8223F9BC;
		  /* 8223F9BCh */ case    5:  		/* stw R11, <#[R3]> */
		/* 8223F9BCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223F9BCh case    5:*/		return 0x8223F9C0;
		  /* 8223F9C0h */ case    6:  		/* li R11, -1 */
		/* 8223F9C0h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8223F9C0h case    6:*/		return 0x8223F9C4;
		  /* 8223F9C4h */ case    7:  		/* stw R11, <#[R3 + 132]> */
		/* 8223F9C4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000084) );
		/* 8223F9C4h case    7:*/		return 0x8223F9C8;
		  /* 8223F9C8h */ case    8:  		/* mr R10, R4 */
		/* 8223F9C8h case    8:*/		regs.R10 = regs.R4;
		/* 8223F9C8h case    8:*/		return 0x8223F9CC;
		  /* 8223F9CCh */ case    9:  		/* stw R11, <#[R3 + 136]> */
		/* 8223F9CCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000088) );
		/* 8223F9CCh case    9:*/		return 0x8223F9D0;
		  /* 8223F9D0h */ case   10:  		/* mr R31, R3 */
		/* 8223F9D0h case   10:*/		regs.R31 = regs.R3;
		/* 8223F9D0h case   10:*/		return 0x8223F9D4;
		  /* 8223F9D4h */ case   11:  		/* stw R30, <#[R3 + 20]> */
		/* 8223F9D4h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000014) );
		/* 8223F9D4h case   11:*/		return 0x8223F9D8;
		  /* 8223F9D8h */ case   12:  		/* li R4, 20 */
		/* 8223F9D8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8223F9D8h case   12:*/		return 0x8223F9DC;
		  /* 8223F9DCh */ case   13:  		/* stb R30, <#[R3 + 48]> */
		/* 8223F9DCh case   13:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x00000030) );
		/* 8223F9DCh case   13:*/		return 0x8223F9E0;
		  /* 8223F9E0h */ case   14:  		/* stw R30, <#[R3 + 56]> */
		/* 8223F9E0h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000038) );
		/* 8223F9E0h case   14:*/		return 0x8223F9E4;
		  /* 8223F9E4h */ case   15:  		/* stw R30, <#[R3 + 60]> */
		/* 8223F9E4h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x0000003C) );
		/* 8223F9E4h case   15:*/		return 0x8223F9E8;
		  /* 8223F9E8h */ case   16:  		/* stw R30, <#[R3 + 64]> */
		/* 8223F9E8h case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000040) );
		/* 8223F9E8h case   16:*/		return 0x8223F9EC;
		  /* 8223F9ECh */ case   17:  		/* stw R30, <#[R3 + 68]> */
		/* 8223F9ECh case   17:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000044) );
		/* 8223F9ECh case   17:*/		return 0x8223F9F0;
		  /* 8223F9F0h */ case   18:  		/* stw R30, <#[R3 + 72]> */
		/* 8223F9F0h case   18:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000048) );
		/* 8223F9F0h case   18:*/		return 0x8223F9F4;
		  /* 8223F9F4h */ case   19:  		/* stw R30, <#[R3 + 76]> */
		/* 8223F9F4h case   19:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x0000004C) );
		/* 8223F9F4h case   19:*/		return 0x8223F9F8;
		  /* 8223F9F8h */ case   20:  		/* stw R30, <#[R3 + 80]> */
		/* 8223F9F8h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000050) );
		/* 8223F9F8h case   20:*/		return 0x8223F9FC;
		  /* 8223F9FCh */ case   21:  		/* stw R30, <#[R3 + 84]> */
		/* 8223F9FCh case   21:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000054) );
		/* 8223F9FCh case   21:*/		return 0x8223FA00;
		  /* 8223FA00h */ case   22:  		/* stw R30, <#[R3 + 88]> */
		/* 8223FA00h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000058) );
		/* 8223FA00h case   22:*/		return 0x8223FA04;
		  /* 8223FA04h */ case   23:  		/* stw R30, <#[R3 + 92]> */
		/* 8223FA04h case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x0000005C) );
		/* 8223FA04h case   23:*/		return 0x8223FA08;
		  /* 8223FA08h */ case   24:  		/* stw R30, <#[R3 + 108]> */
		/* 8223FA08h case   24:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x0000006C) );
		/* 8223FA08h case   24:*/		return 0x8223FA0C;
		  /* 8223FA0Ch */ case   25:  		/* stb R30, <#[R3 + 124]> */
		/* 8223FA0Ch case   25:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x0000007C) );
		/* 8223FA0Ch case   25:*/		return 0x8223FA10;
		  /* 8223FA10h */ case   26:  		/* stb R30, <#[R3 + 125]> */
		/* 8223FA10h case   26:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x0000007D) );
		/* 8223FA10h case   26:*/		return 0x8223FA14;
		  /* 8223FA14h */ case   27:  		/* stw R30, <#[R3 + 128]> */
		/* 8223FA14h case   27:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000080) );
		/* 8223FA14h case   27:*/		return 0x8223FA18;
		  /* 8223FA18h */ case   28:  		/* stw R10, <#[R3 + 140]> */
		/* 8223FA18h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000008C) );
		/* 8223FA18h case   28:*/		return 0x8223FA1C;
		  /* 8223FA1Ch */ case   29:  		/* lwz R11, <#[R3]> */
		/* 8223FA1Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223FA1Ch case   29:*/		return 0x8223FA20;
		  /* 8223FA20h */ case   30:  		/* lwz R28, <#[R11 + 1456]> */
		/* 8223FA20h case   30:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223FA20h case   30:*/		return 0x8223FA24;
		  /* 8223FA24h */ case   31:  		/* mr R3, R28 */
		/* 8223FA24h case   31:*/		regs.R3 = regs.R28;
		/* 8223FA24h case   31:*/		return 0x8223FA28;
		  /* 8223FA28h */ case   32:  		/* bl -144752 */
		/* 8223FA28h case   32:*/		regs.LR = 0x8223FA2C; return 0x8221C4B8;
		/* 8223FA28h case   32:*/		return 0x8223FA2C;
		  /* 8223FA2Ch */ case   33:  		/* addic. R29, R3, 4 */
		/* 8223FA2Ch case   33:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R3,0x4);
		/* 8223FA2Ch case   33:*/		return 0x8223FA30;
		  /* 8223FA30h */ case   34:  		/* stw R28, <#[R3]> */
		/* 8223FA30h case   34:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8223FA30h case   34:*/		return 0x8223FA34;
		  /* 8223FA34h */ case   35:  		/* bc 12, CR0_EQ, 24 */
		/* 8223FA34h case   35:*/		if ( regs.CR[0].eq ) { return 0x8223FA4C;  }
		/* 8223FA34h case   35:*/		return 0x8223FA38;
		  /* 8223FA38h */ case   36:  		/* lwz R11, <#[R31]> */
		/* 8223FA38h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FA38h case   36:*/		return 0x8223FA3C;
		  /* 8223FA3Ch */ case   37:  		/* mr R3, R29 */
		/* 8223FA3Ch case   37:*/		regs.R3 = regs.R29;
		/* 8223FA3Ch case   37:*/		return 0x8223FA40;
		  /* 8223FA40h */ case   38:  		/* lwz R4, <#[R11 + 1456]> */
		/* 8223FA40h case   38:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223FA40h case   38:*/		return 0x8223FA44;
		  /* 8223FA44h */ case   39:  		/* bl -40164 */
		/* 8223FA44h case   39:*/		regs.LR = 0x8223FA48; return 0x82235D60;
		/* 8223FA44h case   39:*/		return 0x8223FA48;
		  /* 8223FA48h */ case   40:  		/* b 8 */
		/* 8223FA48h case   40:*/		return 0x8223FA50;
		/* 8223FA48h case   40:*/		return 0x8223FA4C;
	}
	return 0x8223FA4C;
} // Block from 8223F9A8h-8223FA4Ch (41 instructions)

//////////////////////////////////////////////////////
// Block at 8223FA4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FA4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FA4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FA4C);
		  /* 8223FA4Ch */ case    0:  		/* mr R29, R30 */
		/* 8223FA4Ch case    0:*/		regs.R29 = regs.R30;
		/* 8223FA4Ch case    0:*/		return 0x8223FA50;
	}
	return 0x8223FA50;
} // Block from 8223FA4Ch-8223FA50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223FA50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FA50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FA50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FA50);
		  /* 8223FA50h */ case    0:  		/* stw R29, <#[R31 + 112]> */
		/* 8223FA50h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000070) );
		/* 8223FA50h case    0:*/		return 0x8223FA54;
		  /* 8223FA54h */ case    1:  		/* li R4, 20 */
		/* 8223FA54h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8223FA54h case    1:*/		return 0x8223FA58;
		  /* 8223FA58h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8223FA58h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FA58h case    2:*/		return 0x8223FA5C;
		  /* 8223FA5Ch */ case    3:  		/* lwz R28, <#[R11 + 1456]> */
		/* 8223FA5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223FA5Ch case    3:*/		return 0x8223FA60;
		  /* 8223FA60h */ case    4:  		/* mr R3, R28 */
		/* 8223FA60h case    4:*/		regs.R3 = regs.R28;
		/* 8223FA60h case    4:*/		return 0x8223FA64;
		  /* 8223FA64h */ case    5:  		/* bl -144812 */
		/* 8223FA64h case    5:*/		regs.LR = 0x8223FA68; return 0x8221C4B8;
		/* 8223FA64h case    5:*/		return 0x8223FA68;
		  /* 8223FA68h */ case    6:  		/* addic. R29, R3, 4 */
		/* 8223FA68h case    6:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R3,0x4);
		/* 8223FA68h case    6:*/		return 0x8223FA6C;
		  /* 8223FA6Ch */ case    7:  		/* stw R28, <#[R3]> */
		/* 8223FA6Ch case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8223FA6Ch case    7:*/		return 0x8223FA70;
		  /* 8223FA70h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 8223FA70h case    8:*/		if ( regs.CR[0].eq ) { return 0x8223FA88;  }
		/* 8223FA70h case    8:*/		return 0x8223FA74;
		  /* 8223FA74h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223FA74h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FA74h case    9:*/		return 0x8223FA78;
		  /* 8223FA78h */ case   10:  		/* mr R3, R29 */
		/* 8223FA78h case   10:*/		regs.R3 = regs.R29;
		/* 8223FA78h case   10:*/		return 0x8223FA7C;
		  /* 8223FA7Ch */ case   11:  		/* lwz R4, <#[R11 + 1456]> */
		/* 8223FA7Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223FA7Ch case   11:*/		return 0x8223FA80;
		  /* 8223FA80h */ case   12:  		/* bl -40224 */
		/* 8223FA80h case   12:*/		regs.LR = 0x8223FA84; return 0x82235D60;
		/* 8223FA80h case   12:*/		return 0x8223FA84;
		  /* 8223FA84h */ case   13:  		/* b 8 */
		/* 8223FA84h case   13:*/		return 0x8223FA8C;
		/* 8223FA84h case   13:*/		return 0x8223FA88;
	}
	return 0x8223FA88;
} // Block from 8223FA50h-8223FA88h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223FA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FA88);
		  /* 8223FA88h */ case    0:  		/* mr R29, R30 */
		/* 8223FA88h case    0:*/		regs.R29 = regs.R30;
		/* 8223FA88h case    0:*/		return 0x8223FA8C;
	}
	return 0x8223FA8C;
} // Block from 8223FA88h-8223FA8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223FA8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FA8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FA8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FA8C);
		  /* 8223FA8Ch */ case    0:  		/* stw R29, <#[R31 + 116]> */
		/* 8223FA8Ch case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000074) );
		/* 8223FA8Ch case    0:*/		return 0x8223FA90;
		  /* 8223FA90h */ case    1:  		/* li R4, 20 */
		/* 8223FA90h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8223FA90h case    1:*/		return 0x8223FA94;
		  /* 8223FA94h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8223FA94h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FA94h case    2:*/		return 0x8223FA98;
		  /* 8223FA98h */ case    3:  		/* lwz R28, <#[R11 + 1456]> */
		/* 8223FA98h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223FA98h case    3:*/		return 0x8223FA9C;
		  /* 8223FA9Ch */ case    4:  		/* mr R3, R28 */
		/* 8223FA9Ch case    4:*/		regs.R3 = regs.R28;
		/* 8223FA9Ch case    4:*/		return 0x8223FAA0;
		  /* 8223FAA0h */ case    5:  		/* bl -144872 */
		/* 8223FAA0h case    5:*/		regs.LR = 0x8223FAA4; return 0x8221C4B8;
		/* 8223FAA0h case    5:*/		return 0x8223FAA4;
		  /* 8223FAA4h */ case    6:  		/* addic. R29, R3, 4 */
		/* 8223FAA4h case    6:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R3,0x4);
		/* 8223FAA4h case    6:*/		return 0x8223FAA8;
		  /* 8223FAA8h */ case    7:  		/* stw R28, <#[R3]> */
		/* 8223FAA8h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8223FAA8h case    7:*/		return 0x8223FAAC;
		  /* 8223FAACh */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 8223FAACh case    8:*/		if ( regs.CR[0].eq ) { return 0x8223FAC4;  }
		/* 8223FAACh case    8:*/		return 0x8223FAB0;
		  /* 8223FAB0h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223FAB0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FAB0h case    9:*/		return 0x8223FAB4;
		  /* 8223FAB4h */ case   10:  		/* mr R3, R29 */
		/* 8223FAB4h case   10:*/		regs.R3 = regs.R29;
		/* 8223FAB4h case   10:*/		return 0x8223FAB8;
	}
	return 0x8223FAB8;
} // Block from 8223FA8Ch-8223FAB8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8223FAB8h
// Function '?OutputPatches@Assembler@XGRAPHICS@@QAAXH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FAB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FAB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FAB8);
		  /* 8223FAB8h */ case    0:  		/* lwz R4, <#[R11 + 1456]> */
		/* 8223FAB8h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223FAB8h case    0:*/		return 0x8223FABC;
		  /* 8223FABCh */ case    1:  		/* bl -40284 */
		/* 8223FABCh case    1:*/		regs.LR = 0x8223FAC0; return 0x82235D60;
		/* 8223FABCh case    1:*/		return 0x8223FAC0;
		  /* 8223FAC0h */ case    2:  		/* b 8 */
		/* 8223FAC0h case    2:*/		return 0x8223FAC8;
		/* 8223FAC0h case    2:*/		return 0x8223FAC4;
	}
	return 0x8223FAC4;
} // Block from 8223FAB8h-8223FAC4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223FAC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FAC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FAC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FAC4);
		  /* 8223FAC4h */ case    0:  		/* mr R29, R30 */
		/* 8223FAC4h case    0:*/		regs.R29 = regs.R30;
		/* 8223FAC4h case    0:*/		return 0x8223FAC8;
	}
	return 0x8223FAC8;
} // Block from 8223FAC4h-8223FAC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223FAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FAC8);
		  /* 8223FAC8h */ case    0:  		/* stw R29, <#[R31 + 120]> */
		/* 8223FAC8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000078) );
		/* 8223FAC8h case    0:*/		return 0x8223FACC;
		  /* 8223FACCh */ case    1:  		/* li R4, 20 */
		/* 8223FACCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8223FACCh case    1:*/		return 0x8223FAD0;
		  /* 8223FAD0h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8223FAD0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FAD0h case    2:*/		return 0x8223FAD4;
		  /* 8223FAD4h */ case    3:  		/* lwz R28, <#[R11 + 1456]> */
		/* 8223FAD4h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223FAD4h case    3:*/		return 0x8223FAD8;
		  /* 8223FAD8h */ case    4:  		/* mr R3, R28 */
		/* 8223FAD8h case    4:*/		regs.R3 = regs.R28;
		/* 8223FAD8h case    4:*/		return 0x8223FADC;
		  /* 8223FADCh */ case    5:  		/* bl -144932 */
		/* 8223FADCh case    5:*/		regs.LR = 0x8223FAE0; return 0x8221C4B8;
		/* 8223FADCh case    5:*/		return 0x8223FAE0;
		  /* 8223FAE0h */ case    6:  		/* addic. R29, R3, 4 */
		/* 8223FAE0h case    6:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R3,0x4);
		/* 8223FAE0h case    6:*/		return 0x8223FAE4;
		  /* 8223FAE4h */ case    7:  		/* stw R28, <#[R3]> */
		/* 8223FAE4h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8223FAE4h case    7:*/		return 0x8223FAE8;
		  /* 8223FAE8h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 8223FAE8h case    8:*/		if ( regs.CR[0].eq ) { return 0x8223FB00;  }
		/* 8223FAE8h case    8:*/		return 0x8223FAEC;
		  /* 8223FAECh */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223FAECh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FAECh case    9:*/		return 0x8223FAF0;
		  /* 8223FAF0h */ case   10:  		/* mr R3, R29 */
		/* 8223FAF0h case   10:*/		regs.R3 = regs.R29;
		/* 8223FAF0h case   10:*/		return 0x8223FAF4;
		  /* 8223FAF4h */ case   11:  		/* lwz R4, <#[R11 + 1456]> */
		/* 8223FAF4h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223FAF4h case   11:*/		return 0x8223FAF8;
		  /* 8223FAF8h */ case   12:  		/* bl -40344 */
		/* 8223FAF8h case   12:*/		regs.LR = 0x8223FAFC; return 0x82235D60;
		/* 8223FAF8h case   12:*/		return 0x8223FAFC;
		  /* 8223FAFCh */ case   13:  		/* b 8 */
		/* 8223FAFCh case   13:*/		return 0x8223FB04;
		/* 8223FAFCh case   13:*/		return 0x8223FB00;
	}
	return 0x8223FB00;
} // Block from 8223FAC8h-8223FB00h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223FB00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FB00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FB00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FB00);
		  /* 8223FB00h */ case    0:  		/* mr R29, R30 */
		/* 8223FB00h case    0:*/		regs.R29 = regs.R30;
		/* 8223FB00h case    0:*/		return 0x8223FB04;
	}
	return 0x8223FB04;
} // Block from 8223FB00h-8223FB04h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223FB04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FB04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FB04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FB04);
		  /* 8223FB04h */ case    0:  		/* stw R29, <#[R31 + 100]> */
		/* 8223FB04h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000064) );
		/* 8223FB04h case    0:*/		return 0x8223FB08;
		  /* 8223FB08h */ case    1:  		/* li R4, 20 */
		/* 8223FB08h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8223FB08h case    1:*/		return 0x8223FB0C;
		  /* 8223FB0Ch */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8223FB0Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FB0Ch case    2:*/		return 0x8223FB10;
		  /* 8223FB10h */ case    3:  		/* lwz R28, <#[R11 + 1456]> */
		/* 8223FB10h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223FB10h case    3:*/		return 0x8223FB14;
		  /* 8223FB14h */ case    4:  		/* mr R3, R28 */
		/* 8223FB14h case    4:*/		regs.R3 = regs.R28;
		/* 8223FB14h case    4:*/		return 0x8223FB18;
		  /* 8223FB18h */ case    5:  		/* bl -144992 */
		/* 8223FB18h case    5:*/		regs.LR = 0x8223FB1C; return 0x8221C4B8;
		/* 8223FB18h case    5:*/		return 0x8223FB1C;
		  /* 8223FB1Ch */ case    6:  		/* addic. R29, R3, 4 */
		/* 8223FB1Ch case    6:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R3,0x4);
		/* 8223FB1Ch case    6:*/		return 0x8223FB20;
		  /* 8223FB20h */ case    7:  		/* stw R28, <#[R3]> */
		/* 8223FB20h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8223FB20h case    7:*/		return 0x8223FB24;
		  /* 8223FB24h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 8223FB24h case    8:*/		if ( regs.CR[0].eq ) { return 0x8223FB3C;  }
		/* 8223FB24h case    8:*/		return 0x8223FB28;
		  /* 8223FB28h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223FB28h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FB28h case    9:*/		return 0x8223FB2C;
		  /* 8223FB2Ch */ case   10:  		/* mr R3, R29 */
		/* 8223FB2Ch case   10:*/		regs.R3 = regs.R29;
		/* 8223FB2Ch case   10:*/		return 0x8223FB30;
		  /* 8223FB30h */ case   11:  		/* lwz R4, <#[R11 + 1456]> */
		/* 8223FB30h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000005B0) );
		/* 8223FB30h case   11:*/		return 0x8223FB34;
		  /* 8223FB34h */ case   12:  		/* bl -40404 */
		/* 8223FB34h case   12:*/		regs.LR = 0x8223FB38; return 0x82235D60;
		/* 8223FB34h case   12:*/		return 0x8223FB38;
		  /* 8223FB38h */ case   13:  		/* mr R30, R29 */
		/* 8223FB38h case   13:*/		regs.R30 = regs.R29;
		/* 8223FB38h case   13:*/		return 0x8223FB3C;
	}
	return 0x8223FB3C;
} // Block from 8223FB04h-8223FB3Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8223FB3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FB3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FB3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FB3C);
		  /* 8223FB3Ch */ case    0:  		/* stw R30, <#[R31 + 104]> */
		/* 8223FB3Ch case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000068) );
		/* 8223FB3Ch case    0:*/		return 0x8223FB40;
		  /* 8223FB40h */ case    1:  		/* lwz R3, <#[R31]> */
		/* 8223FB40h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FB40h case    1:*/		return 0x8223FB44;
		  /* 8223FB44h */ case    2:  		/* lwz R11, <#[R3 + 1376]> */
		/* 8223FB44h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000560) );
		/* 8223FB44h case    2:*/		return 0x8223FB48;
	}
	return 0x8223FB48;
} // Block from 8223FB3Ch-8223FB48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223FB48h
// Function '?IsHeadOfConditionalBreak@IfHeader@XGRAPHICS@@QAA_NAA_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FB48);
		  /* 8223FB48h */ case    0:  		/* mulli R30, R11, 3 */
		/* 8223FB48h case    0:*/		cpu::op::mulli<0>(regs,&regs.R30,regs.R11,0x3);
		/* 8223FB48h case    0:*/		return 0x8223FB4C;
		  /* 8223FB4Ch */ case    1:  		/* mulli R29, R30, 12 */
		/* 8223FB4Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R29,regs.R30,0xC);
		/* 8223FB4Ch case    1:*/		return 0x8223FB50;
		  /* 8223FB50h */ case    2:  		/* mr R4, R29 */
		/* 8223FB50h case    2:*/		regs.R4 = regs.R29;
		/* 8223FB50h case    2:*/		return 0x8223FB54;
		  /* 8223FB54h */ case    3:  		/* bl -143236 */
		/* 8223FB54h case    3:*/		regs.LR = 0x8223FB58; return 0x8221CBD0;
		/* 8223FB54h case    3:*/		return 0x8223FB58;
		  /* 8223FB58h */ case    4:  		/* stw R3, <#[R31 + 4]> */
		/* 8223FB58h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8223FB58h case    4:*/		return 0x8223FB5C;
		  /* 8223FB5Ch */ case    5:  		/* mr R4, R29 */
		/* 8223FB5Ch case    5:*/		regs.R4 = regs.R29;
		/* 8223FB5Ch case    5:*/		return 0x8223FB60;
		  /* 8223FB60h */ case    6:  		/* lwz R3, <#[R31]> */
		/* 8223FB60h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FB60h case    6:*/		return 0x8223FB64;
		  /* 8223FB64h */ case    7:  		/* bl -143252 */
		/* 8223FB64h case    7:*/		regs.LR = 0x8223FB68; return 0x8221CBD0;
		/* 8223FB64h case    7:*/		return 0x8223FB68;
		  /* 8223FB68h */ case    8:  		/* stw R3, <#[R31 + 8]> */
		/* 8223FB68h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8223FB68h case    8:*/		return 0x8223FB6C;
		  /* 8223FB6Ch */ case    9:  		/* rlwinm R4, R30, 3, 0, 28 */
		/* 8223FB6Ch case    9:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R30);
		/* 8223FB6Ch case    9:*/		return 0x8223FB70;
		  /* 8223FB70h */ case   10:  		/* lwz R3, <#[R31]> */
		/* 8223FB70h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FB70h case   10:*/		return 0x8223FB74;
		  /* 8223FB74h */ case   11:  		/* bl -143268 */
		/* 8223FB74h case   11:*/		regs.LR = 0x8223FB78; return 0x8221CBD0;
		/* 8223FB74h case   11:*/		return 0x8223FB78;
		  /* 8223FB78h */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 8223FB78h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8223FB78h case   12:*/		return 0x8223FB7C;
		  /* 8223FB7Ch */ case   13:  		/* lwz R10, <#[R31 + 4]> */
		/* 8223FB7Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8223FB7Ch case   13:*/		return 0x8223FB80;
		  /* 8223FB80h */ case   14:  		/* stw R3, <#[R31 + 52]> */
		/* 8223FB80h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8223FB80h case   14:*/		return 0x8223FB84;
		  /* 8223FB84h */ case   15:  		/* mr R3, R31 */
		/* 8223FB84h case   15:*/		regs.R3 = regs.R31;
		/* 8223FB84h case   15:*/		return 0x8223FB88;
		  /* 8223FB88h */ case   16:  		/* stw R11, <#[R31 + 12]> */
		/* 8223FB88h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8223FB88h case   16:*/		return 0x8223FB8C;
		  /* 8223FB8Ch */ case   17:  		/* stw R10, <#[R31 + 16]> */
		/* 8223FB8Ch case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8223FB8Ch case   17:*/		return 0x8223FB90;
		  /* 8223FB90h */ case   18:  		/* addi R1, R1, 128 */
		/* 8223FB90h case   18:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8223FB90h case   18:*/		return 0x8223FB94;
		  /* 8223FB94h */ case   19:  		/* b -1763564 */
		/* 8223FB94h case   19:*/		return 0x820912A8;
		/* 8223FB94h case   19:*/		return 0x8223FB98;
	}
	return 0x8223FB98;
} // Block from 8223FB48h-8223FB98h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8223FB98h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FB98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FB98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FB98);
		  /* 8223FB98h */ case    0:  		/* mfspr R12, LR */
		/* 8223FB98h case    0:*/		regs.R12 = regs.LR;
		/* 8223FB98h case    0:*/		return 0x8223FB9C;
		  /* 8223FB9Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223FB9Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223FB9Ch case    1:*/		return 0x8223FBA0;
		  /* 8223FBA0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8223FBA0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223FBA0h case    2:*/		return 0x8223FBA4;
		  /* 8223FBA4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8223FBA4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223FBA4h case    3:*/		return 0x8223FBA8;
		  /* 8223FBA8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8223FBA8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8223FBA8h case    4:*/		return 0x8223FBAC;
		  /* 8223FBACh */ case    5:  		/* mr R30, R4 */
		/* 8223FBACh case    5:*/		regs.R30 = regs.R4;
		/* 8223FBACh case    5:*/		return 0x8223FBB0;
		  /* 8223FBB0h */ case    6:  		/* lwz R4, <#[R3 + 8]> */
		/* 8223FBB0h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000008) );
		/* 8223FBB0h case    6:*/		return 0x8223FBB4;
		  /* 8223FBB4h */ case    7:  		/* mr R31, R3 */
		/* 8223FBB4h case    7:*/		regs.R31 = regs.R3;
		/* 8223FBB4h case    7:*/		return 0x8223FBB8;
		  /* 8223FBB8h */ case    8:  		/* lwz R3, <#[R3 + 12]> */
		/* 8223FBB8h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 8223FBB8h case    8:*/		return 0x8223FBBC;
		  /* 8223FBBCh */ case    9:  		/* bl -144764 */
		/* 8223FBBCh case    9:*/		regs.LR = 0x8223FBC0; return 0x8221C640;
		/* 8223FBBCh case    9:*/		return 0x8223FBC0;
		  /* 8223FBC0h */ case   10:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 8223FBC0h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 8223FBC0h case   10:*/		return 0x8223FBC4;
		  /* 8223FBC4h */ case   11:  		/* bc 12, CR0_EQ, 16 */
		/* 8223FBC4h case   11:*/		if ( regs.CR[0].eq ) { return 0x8223FBD4;  }
		/* 8223FBC4h case   11:*/		return 0x8223FBC8;
		  /* 8223FBC8h */ case   12:  		/* addi R4, R31, -4 */
		/* 8223FBC8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0xFFFFFFFC);
		/* 8223FBC8h case   12:*/		return 0x8223FBCC;
		  /* 8223FBCCh */ case   13:  		/* lwz R3, <#[R31 - 4]> */
		/* 8223FBCCh case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8223FBCCh case   13:*/		return 0x8223FBD0;
		  /* 8223FBD0h */ case   14:  		/* bl -144784 */
		/* 8223FBD0h case   14:*/		regs.LR = 0x8223FBD4; return 0x8221C640;
		/* 8223FBD0h case   14:*/		return 0x8223FBD4;
	}
	return 0x8223FBD4;
} // Block from 8223FB98h-8223FBD4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223FBD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FBD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FBD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FBD4);
		  /* 8223FBD4h */ case    0:  		/* mr R3, R31 */
		/* 8223FBD4h case    0:*/		regs.R3 = regs.R31;
		/* 8223FBD4h case    0:*/		return 0x8223FBD8;
		  /* 8223FBD8h */ case    1:  		/* addi R1, R1, 112 */
		/* 8223FBD8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8223FBD8h case    1:*/		return 0x8223FBDC;
		  /* 8223FBDCh */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223FBDCh case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223FBDCh case    2:*/		return 0x8223FBE0;
		  /* 8223FBE0h */ case    3:  		/* mtspr LR, R12 */
		/* 8223FBE0h case    3:*/		regs.LR = regs.R12;
		/* 8223FBE0h case    3:*/		return 0x8223FBE4;
		  /* 8223FBE4h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 8223FBE4h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8223FBE4h case    4:*/		return 0x8223FBE8;
		  /* 8223FBE8h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 8223FBE8h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223FBE8h case    5:*/		return 0x8223FBEC;
		  /* 8223FBECh */ case    6:  		/* bclr 20, CR0_LT */
		/* 8223FBECh case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223FBECh case    6:*/		return 0x8223FBF0;
	}
	return 0x8223FBF0;
} // Block from 8223FBD4h-8223FBF0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8223FBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FBF0);
		  /* 8223FBF0h */ case    0:  		/* mfspr R12, LR */
		/* 8223FBF0h case    0:*/		regs.R12 = regs.LR;
		/* 8223FBF0h case    0:*/		return 0x8223FBF4;
		  /* 8223FBF4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8223FBF4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223FBF4h case    1:*/		return 0x8223FBF8;
		  /* 8223FBF8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8223FBF8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223FBF8h case    2:*/		return 0x8223FBFC;
		  /* 8223FBFCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8223FBFCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8223FBFCh case    3:*/		return 0x8223FC00;
		  /* 8223FC00h */ case    4:  		/* mr R31, R3 */
		/* 8223FC00h case    4:*/		regs.R31 = regs.R3;
		/* 8223FC00h case    4:*/		return 0x8223FC04;
		  /* 8223FC04h */ case    5:  		/* mr R3, R4 */
		/* 8223FC04h case    5:*/		regs.R3 = regs.R4;
		/* 8223FC04h case    5:*/		return 0x8223FC08;
		  /* 8223FC08h */ case    6:  		/* lwz R4, <#[R31]> */
		/* 8223FC08h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FC08h case    6:*/		return 0x8223FC0C;
		  /* 8223FC0Ch */ case    7:  		/* bl 93476 */
		/* 8223FC0Ch case    7:*/		regs.LR = 0x8223FC10; return 0x82256930;
		/* 8223FC0Ch case    7:*/		return 0x8223FC10;
		  /* 8223FC10h */ case    8:  		/* cmpwi CR6, R3, 4 */
		/* 8223FC10h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 8223FC10h case    8:*/		return 0x8223FC14;
		  /* 8223FC14h */ case    9:  		/* bc 12, CR6_EQ, 108 */
		/* 8223FC14h case    9:*/		if ( regs.CR[6].eq ) { return 0x8223FC80;  }
		/* 8223FC14h case    9:*/		return 0x8223FC18;
		  /* 8223FC18h */ case   10:  		/* bc 4, CR6_GT, 20 */
		/* 8223FC18h case   10:*/		if ( !regs.CR[6].gt ) { return 0x8223FC2C;  }
		/* 8223FC18h case   10:*/		return 0x8223FC1C;
		  /* 8223FC1Ch */ case   11:  		/* cmpwi CR6, R3, 6 */
		/* 8223FC1Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000006);
		/* 8223FC1Ch case   11:*/		return 0x8223FC20;
		  /* 8223FC20h */ case   12:  		/* bc 4, CR6_GT, 36 */
		/* 8223FC20h case   12:*/		if ( !regs.CR[6].gt ) { return 0x8223FC44;  }
		/* 8223FC20h case   12:*/		return 0x8223FC24;
		  /* 8223FC24h */ case   13:  		/* cmpwi CR6, R3, 8 */
		/* 8223FC24h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000008);
		/* 8223FC24h case   13:*/		return 0x8223FC28;
		  /* 8223FC28h */ case   14:  		/* bc 4, CR6_GT, 88 */
		/* 8223FC28h case   14:*/		if ( !regs.CR[6].gt ) { return 0x8223FC80;  }
		/* 8223FC28h case   14:*/		return 0x8223FC2C;
	}
	return 0x8223FC2C;
} // Block from 8223FBF0h-8223FC2Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8223FC2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FC2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FC2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FC2C);
		  /* 8223FC2Ch */ case    0:  		/* li R3, 0 */
		/* 8223FC2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223FC2Ch case    0:*/		return 0x8223FC30;
		  /* 8223FC30h */ case    1:  		/* addi R1, R1, 96 */
		/* 8223FC30h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8223FC30h case    1:*/		return 0x8223FC34;
		  /* 8223FC34h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8223FC34h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8223FC34h case    2:*/		return 0x8223FC38;
		  /* 8223FC38h */ case    3:  		/* mtspr LR, R12 */
		/* 8223FC38h case    3:*/		regs.LR = regs.R12;
		/* 8223FC38h case    3:*/		return 0x8223FC3C;
		  /* 8223FC3Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8223FC3Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8223FC3Ch case    4:*/		return 0x8223FC40;
		  /* 8223FC40h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8223FC40h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8223FC40h case    5:*/		return 0x8223FC44;
	}
	return 0x8223FC44;
} // Block from 8223FC2Ch-8223FC44h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8223FC44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FC44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FC44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FC44);
		  /* 8223FC44h */ case    0:  		/* lbz R11, <#[R31 + 125]> */
		/* 8223FC44h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000007D) );
		/* 8223FC44h case    0:*/		return 0x8223FC48;
		  /* 8223FC48h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 8223FC48h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223FC48h case    1:*/		return 0x8223FC4C;
		  /* 8223FC4Ch */ case    2:  		/* bc 4, CR0_EQ, -32 */
		/* 8223FC4Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8223FC2C;  }
		/* 8223FC4Ch case    2:*/		return 0x8223FC50;
		  /* 8223FC50h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 8223FC50h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FC50h case    3:*/		return 0x8223FC54;
		  /* 8223FC54h */ case    4:  		/* lwz R11, <#[R11 + 2736]> */
		/* 8223FC54h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000AB0) );
		/* 8223FC54h case    4:*/		return 0x8223FC58;
		  /* 8223FC58h */ case    5:  		/* lwz R11, <#[R11 + 2084]> */
		/* 8223FC58h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000824) );
		/* 8223FC58h case    5:*/		return 0x8223FC5C;
		  /* 8223FC5Ch */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 8223FC5Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223FC5Ch case    6:*/		return 0x8223FC60;
		  /* 8223FC60h */ case    7:  		/* bc 4, CR6_EQ, 20 */
		/* 8223FC60h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8223FC74;  }
		/* 8223FC60h case    7:*/		return 0x8223FC64;
		  /* 8223FC64h */ case    8:  		/* li R5, 2 */
		/* 8223FC64h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223FC64h case    8:*/		return 0x8223FC68;
		  /* 8223FC68h */ case    9:  		/* li R4, 0 */
		/* 8223FC68h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FC68h case    9:*/		return 0x8223FC6C;
		  /* 8223FC6Ch */ case   10:  		/* mr R3, R31 */
		/* 8223FC6Ch case   10:*/		regs.R3 = regs.R31;
		/* 8223FC6Ch case   10:*/		return 0x8223FC70;
		  /* 8223FC70h */ case   11:  		/* bl -5712 */
		/* 8223FC70h case   11:*/		regs.LR = 0x8223FC74; return 0x8223E620;
		/* 8223FC70h case   11:*/		return 0x8223FC74;
	}
	return 0x8223FC74;
} // Block from 8223FC44h-8223FC74h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8223FC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FC74);
		  /* 8223FC74h */ case    0:  		/* li R11, 1 */
		/* 8223FC74h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223FC74h case    0:*/		return 0x8223FC78;
		  /* 8223FC78h */ case    1:  		/* stb R11, <#[R31 + 125]> */
		/* 8223FC78h case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x0000007D) );
		/* 8223FC78h case    1:*/		return 0x8223FC7C;
		  /* 8223FC7Ch */ case    2:  		/* b 24 */
		/* 8223FC7Ch case    2:*/		return 0x8223FC94;
		/* 8223FC7Ch case    2:*/		return 0x8223FC80;
	}
	return 0x8223FC80;
} // Block from 8223FC74h-8223FC80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223FC80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FC80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FC80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FC80);
		  /* 8223FC80h */ case    0:  		/* lbz R11, <#[R31 + 124]> */
		/* 8223FC80h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 8223FC80h case    0:*/		return 0x8223FC84;
		  /* 8223FC84h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 8223FC84h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8223FC84h case    1:*/		return 0x8223FC88;
		  /* 8223FC88h */ case    2:  		/* bc 4, CR0_EQ, -92 */
		/* 8223FC88h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8223FC2C;  }
		/* 8223FC88h case    2:*/		return 0x8223FC8C;
		  /* 8223FC8Ch */ case    3:  		/* li R11, 1 */
		/* 8223FC8Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223FC8Ch case    3:*/		return 0x8223FC90;
	}
	return 0x8223FC90;
} // Block from 8223FC80h-8223FC90h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8223FC90h
// Function '?MakePWCopy@IRMov@XGRAPHICS@@SAPAVIRInst@2@PAV32@H0PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FC90);
		  /* 8223FC90h */ case    0:  		/* stb R11, <#[R31 + 124]> */
		/* 8223FC90h case    0:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 8223FC90h case    0:*/		return 0x8223FC94;
	}
	return 0x8223FC94;
} // Block from 8223FC90h-8223FC94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8223FC94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FC94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FC94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FC94);
		  /* 8223FC94h */ case    0:  		/* li R3, 1 */
		/* 8223FC94h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8223FC94h case    0:*/		return 0x8223FC98;
		  /* 8223FC98h */ case    1:  		/* b -104 */
		/* 8223FC98h case    1:*/		return 0x8223FC30;
		/* 8223FC98h case    1:*/		return 0x8223FC9C;
		  /* 8223FC9Ch */ case    2:  		/* nop */
		/* 8223FC9Ch case    2:*/		cpu::op::nop();
		/* 8223FC9Ch case    2:*/		return 0x8223FCA0;
	}
	return 0x8223FCA0;
} // Block from 8223FC94h-8223FCA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223FCA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FCA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FCA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FCA0);
		  /* 8223FCA0h */ case    0:  		/* mfspr R12, LR */
		/* 8223FCA0h case    0:*/		regs.R12 = regs.LR;
		/* 8223FCA0h case    0:*/		return 0x8223FCA4;
		  /* 8223FCA4h */ case    1:  		/* bl -1763964 */
		/* 8223FCA4h case    1:*/		regs.LR = 0x8223FCA8; return 0x82091228;
		/* 8223FCA4h case    1:*/		return 0x8223FCA8;
		  /* 8223FCA8h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 8223FCA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 8223FCA8h case    2:*/		return 0x8223FCAC;
		  /* 8223FCACh */ case    3:  		/* lwz R11, <#[R4 + 80]> */
		/* 8223FCACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000050) );
		/* 8223FCACh case    3:*/		return 0x8223FCB0;
		  /* 8223FCB0h */ case    4:  		/* mr R30, R3 */
		/* 8223FCB0h case    4:*/		regs.R30 = regs.R3;
		/* 8223FCB0h case    4:*/		return 0x8223FCB4;
		  /* 8223FCB4h */ case    5:  		/* mr R31, R4 */
		/* 8223FCB4h case    5:*/		regs.R31 = regs.R4;
		/* 8223FCB4h case    5:*/		return 0x8223FCB8;
		  /* 8223FCB8h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 8223FCB8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8223FCB8h case    6:*/		return 0x8223FCBC;
		  /* 8223FCBCh */ case    7:  		/* bc 12, CR6_EQ, 40 */
		/* 8223FCBCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8223FCE4;  }
		/* 8223FCBCh case    7:*/		return 0x8223FCC0;
		  /* 8223FCC0h */ case    8:  		/* lis R11, -32252 */
		/* 8223FCC0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8223FCC0h case    8:*/		return 0x8223FCC4;
		  /* 8223FCC4h */ case    9:  		/* lis R10, -32252 */
		/* 8223FCC4h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8223FCC4h case    9:*/		return 0x8223FCC8;
		  /* 8223FCC8h */ case   10:  		/* lis R9, -32253 */
		/* 8223FCC8h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8223FCC8h case   10:*/		return 0x8223FCCC;
		  /* 8223FCCCh */ case   11:  		/* addi R6, R11, 10344 */
		/* 8223FCCCh case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2868);
		/* 8223FCCCh case   11:*/		return 0x8223FCD0;
		  /* 8223FCD0h */ case   12:  		/* addi R5, R10, 10632 */
		/* 8223FCD0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x2988);
		/* 8223FCD0h case   12:*/		return 0x8223FCD4;
		  /* 8223FCD4h */ case   13:  		/* addi R4, R9, 27460 */
		/* 8223FCD4h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8223FCD4h case   13:*/		return 0x8223FCD8;
		  /* 8223FCD8h */ case   14:  		/* li R7, 2011 */
		/* 8223FCD8h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x7DB);
		/* 8223FCD8h case   14:*/		return 0x8223FCDC;
		  /* 8223FCDCh */ case   15:  		/* li R3, 0 */
		/* 8223FCDCh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8223FCDCh case   15:*/		return 0x8223FCE0;
		  /* 8223FCE0h */ case   16:  		/* bl -950488 */
		/* 8223FCE0h case   16:*/		regs.LR = 0x8223FCE4; return 0x82157C08;
		/* 8223FCE0h case   16:*/		return 0x8223FCE4;
	}
	return 0x8223FCE4;
} // Block from 8223FCA0h-8223FCE4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8223FCE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FCE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FCE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FCE4);
		  /* 8223FCE4h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8223FCE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8223FCE4h case    0:*/		return 0x8223FCE8;
		  /* 8223FCE8h */ case    1:  		/* mr R4, R31 */
		/* 8223FCE8h case    1:*/		regs.R4 = regs.R31;
		/* 8223FCE8h case    1:*/		return 0x8223FCEC;
		  /* 8223FCECh */ case    2:  		/* lwz R3, <#[R11 + 2736]> */
		/* 8223FCECh case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 8223FCECh case    2:*/		return 0x8223FCF0;
	}
	return 0x8223FCF0;
} // Block from 8223FCE4h-8223FCF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8223FCF0h
// Function '?MakePWCorrection@XGRAPHICS@@YAPAVIRInst@1@PAV21@H0PAVCompiler@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FCF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FCF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FCF0);
		  /* 8223FCF0h */ case    0:  		/* bl 149240 */
		/* 8223FCF0h case    0:*/		regs.LR = 0x8223FCF4; return 0x822643E8;
		/* 8223FCF0h case    0:*/		return 0x8223FCF4;
		  /* 8223FCF4h */ case    1:  		/* lwz R11, <#[R31]> */
		/* 8223FCF4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FCF4h case    1:*/		return 0x8223FCF8;
		  /* 8223FCF8h */ case    2:  		/* mr R29, R3 */
		/* 8223FCF8h case    2:*/		regs.R29 = regs.R3;
		/* 8223FCF8h case    2:*/		return 0x8223FCFC;
		  /* 8223FCFCh */ case    3:  		/* li R5, 0 */
		/* 8223FCFCh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223FCFCh case    3:*/		return 0x8223FD00;
		  /* 8223FD00h */ case    4:  		/* li R4, 0 */
		/* 8223FD00h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FD00h case    4:*/		return 0x8223FD04;
		  /* 8223FD04h */ case    5:  		/* mr R3, R31 */
		/* 8223FD04h case    5:*/		regs.R3 = regs.R31;
		/* 8223FD04h case    5:*/		return 0x8223FD08;
		  /* 8223FD08h */ case    6:  		/* lwz R11, <#[R11 + 80]> */
		/* 8223FD08h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8223FD08h case    6:*/		return 0x8223FD0C;
		  /* 8223FD0Ch */ case    7:  		/* mtspr CTR, R11 */
		/* 8223FD0Ch case    7:*/		regs.CTR = regs.R11;
		/* 8223FD0Ch case    7:*/		return 0x8223FD10;
		  /* 8223FD10h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8223FD10h case    8:*/		if ( 1 ) { regs.LR = 0x8223FD14; return (uint32)regs.CTR; }
		/* 8223FD10h case    8:*/		return 0x8223FD14;
		  /* 8223FD14h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223FD14h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FD14h case    9:*/		return 0x8223FD18;
		  /* 8223FD18h */ case   10:  		/* mr R28, R3 */
		/* 8223FD18h case   10:*/		regs.R28 = regs.R3;
		/* 8223FD18h case   10:*/		return 0x8223FD1C;
		  /* 8223FD1Ch */ case   11:  		/* li R5, 1 */
		/* 8223FD1Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223FD1Ch case   11:*/		return 0x8223FD20;
		  /* 8223FD20h */ case   12:  		/* li R4, 0 */
		/* 8223FD20h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FD20h case   12:*/		return 0x8223FD24;
		  /* 8223FD24h */ case   13:  		/* mr R3, R31 */
		/* 8223FD24h case   13:*/		regs.R3 = regs.R31;
		/* 8223FD24h case   13:*/		return 0x8223FD28;
		  /* 8223FD28h */ case   14:  		/* lwz R11, <#[R11 + 80]> */
		/* 8223FD28h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8223FD28h case   14:*/		return 0x8223FD2C;
		  /* 8223FD2Ch */ case   15:  		/* mtspr CTR, R11 */
		/* 8223FD2Ch case   15:*/		regs.CTR = regs.R11;
		/* 8223FD2Ch case   15:*/		return 0x8223FD30;
		  /* 8223FD30h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 8223FD30h case   16:*/		if ( 1 ) { regs.LR = 0x8223FD34; return (uint32)regs.CTR; }
		/* 8223FD30h case   16:*/		return 0x8223FD34;
		  /* 8223FD34h */ case   17:  		/* lwz R11, <#[R31]> */
		/* 8223FD34h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FD34h case   17:*/		return 0x8223FD38;
		  /* 8223FD38h */ case   18:  		/* mr R27, R3 */
		/* 8223FD38h case   18:*/		regs.R27 = regs.R3;
		/* 8223FD38h case   18:*/		return 0x8223FD3C;
		  /* 8223FD3Ch */ case   19:  		/* li R5, 2 */
		/* 8223FD3Ch case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223FD3Ch case   19:*/		return 0x8223FD40;
		  /* 8223FD40h */ case   20:  		/* li R4, 0 */
		/* 8223FD40h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FD40h case   20:*/		return 0x8223FD44;
		  /* 8223FD44h */ case   21:  		/* mr R3, R31 */
		/* 8223FD44h case   21:*/		regs.R3 = regs.R31;
		/* 8223FD44h case   21:*/		return 0x8223FD48;
		  /* 8223FD48h */ case   22:  		/* lwz R11, <#[R11 + 80]> */
		/* 8223FD48h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8223FD48h case   22:*/		return 0x8223FD4C;
		  /* 8223FD4Ch */ case   23:  		/* mtspr CTR, R11 */
		/* 8223FD4Ch case   23:*/		regs.CTR = regs.R11;
		/* 8223FD4Ch case   23:*/		return 0x8223FD50;
		  /* 8223FD50h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 8223FD50h case   24:*/		if ( 1 ) { regs.LR = 0x8223FD54; return (uint32)regs.CTR; }
		/* 8223FD50h case   24:*/		return 0x8223FD54;
		  /* 8223FD54h */ case   25:  		/* lwz R11, <#[R31]> */
		/* 8223FD54h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FD54h case   25:*/		return 0x8223FD58;
		  /* 8223FD58h */ case   26:  		/* mr R26, R3 */
		/* 8223FD58h case   26:*/		regs.R26 = regs.R3;
		/* 8223FD58h case   26:*/		return 0x8223FD5C;
		  /* 8223FD5Ch */ case   27:  		/* li R5, 3 */
		/* 8223FD5Ch case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223FD5Ch case   27:*/		return 0x8223FD60;
		  /* 8223FD60h */ case   28:  		/* li R4, 0 */
		/* 8223FD60h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FD60h case   28:*/		return 0x8223FD64;
		  /* 8223FD64h */ case   29:  		/* mr R3, R31 */
		/* 8223FD64h case   29:*/		regs.R3 = regs.R31;
		/* 8223FD64h case   29:*/		return 0x8223FD68;
		  /* 8223FD68h */ case   30:  		/* lwz R11, <#[R11 + 80]> */
		/* 8223FD68h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8223FD68h case   30:*/		return 0x8223FD6C;
		  /* 8223FD6Ch */ case   31:  		/* mtspr CTR, R11 */
		/* 8223FD6Ch case   31:*/		regs.CTR = regs.R11;
		/* 8223FD6Ch case   31:*/		return 0x8223FD70;
		  /* 8223FD70h */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 8223FD70h case   32:*/		if ( 1 ) { regs.LR = 0x8223FD74; return (uint32)regs.CTR; }
		/* 8223FD70h case   32:*/		return 0x8223FD74;
		  /* 8223FD74h */ case   33:  		/* lwz R11, <#[R31]> */
		/* 8223FD74h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FD74h case   33:*/		return 0x8223FD78;
	}
	return 0x8223FD78;
} // Block from 8223FCF0h-8223FD78h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8223FD78h
// Function '?IsPWInput@IRInst@XGRAPHICS@@QBA_NH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FD78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FD78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FD78);
		  /* 8223FD78h */ case    0:  		/* mr R25, R3 */
		/* 8223FD78h case    0:*/		regs.R25 = regs.R3;
		/* 8223FD78h case    0:*/		return 0x8223FD7C;
		  /* 8223FD7Ch */ case    1:  		/* li R5, 0 */
		/* 8223FD7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223FD7Ch case    1:*/		return 0x8223FD80;
		  /* 8223FD80h */ case    2:  		/* lbz R24, <#[R31 + 164]> */
		/* 8223FD80h case    2:*/		cpu::mem::load8z( regs, &regs.R24, (uint32)(regs.R31 + 0x000000A4) );
		/* 8223FD80h case    2:*/		return 0x8223FD84;
		  /* 8223FD84h */ case    3:  		/* li R4, 1 */
		/* 8223FD84h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223FD84h case    3:*/		return 0x8223FD88;
		  /* 8223FD88h */ case    4:  		/* lwz R23, <#[R31 + 236]> */
		/* 8223FD88h case    4:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R31 + 0x000000EC) );
		/* 8223FD88h case    4:*/		return 0x8223FD8C;
		  /* 8223FD8Ch */ case    5:  		/* mr R3, R31 */
		/* 8223FD8Ch case    5:*/		regs.R3 = regs.R31;
		/* 8223FD8Ch case    5:*/		return 0x8223FD90;
		  /* 8223FD90h */ case    6:  		/* lwz R11, <#[R11 + 80]> */
		/* 8223FD90h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8223FD90h case    6:*/		return 0x8223FD94;
		  /* 8223FD94h */ case    7:  		/* mtspr CTR, R11 */
		/* 8223FD94h case    7:*/		regs.CTR = regs.R11;
		/* 8223FD94h case    7:*/		return 0x8223FD98;
		  /* 8223FD98h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8223FD98h case    8:*/		if ( 1 ) { regs.LR = 0x8223FD9C; return (uint32)regs.CTR; }
		/* 8223FD98h case    8:*/		return 0x8223FD9C;
		  /* 8223FD9Ch */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8223FD9Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FD9Ch case    9:*/		return 0x8223FDA0;
		  /* 8223FDA0h */ case   10:  		/* mr R22, R3 */
		/* 8223FDA0h case   10:*/		regs.R22 = regs.R3;
		/* 8223FDA0h case   10:*/		return 0x8223FDA4;
		  /* 8223FDA4h */ case   11:  		/* li R5, 1 */
		/* 8223FDA4h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223FDA4h case   11:*/		return 0x8223FDA8;
		  /* 8223FDA8h */ case   12:  		/* li R4, 1 */
		/* 8223FDA8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223FDA8h case   12:*/		return 0x8223FDAC;
		  /* 8223FDACh */ case   13:  		/* mr R3, R31 */
		/* 8223FDACh case   13:*/		regs.R3 = regs.R31;
		/* 8223FDACh case   13:*/		return 0x8223FDB0;
		  /* 8223FDB0h */ case   14:  		/* lwz R11, <#[R11 + 80]> */
		/* 8223FDB0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8223FDB0h case   14:*/		return 0x8223FDB4;
		  /* 8223FDB4h */ case   15:  		/* mtspr CTR, R11 */
		/* 8223FDB4h case   15:*/		regs.CTR = regs.R11;
		/* 8223FDB4h case   15:*/		return 0x8223FDB8;
		  /* 8223FDB8h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 8223FDB8h case   16:*/		if ( 1 ) { regs.LR = 0x8223FDBC; return (uint32)regs.CTR; }
		/* 8223FDB8h case   16:*/		return 0x8223FDBC;
		  /* 8223FDBCh */ case   17:  		/* lwz R11, <#[R31]> */
		/* 8223FDBCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FDBCh case   17:*/		return 0x8223FDC0;
		  /* 8223FDC0h */ case   18:  		/* mr R21, R3 */
		/* 8223FDC0h case   18:*/		regs.R21 = regs.R3;
		/* 8223FDC0h case   18:*/		return 0x8223FDC4;
		  /* 8223FDC4h */ case   19:  		/* li R5, 2 */
		/* 8223FDC4h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223FDC4h case   19:*/		return 0x8223FDC8;
		  /* 8223FDC8h */ case   20:  		/* li R4, 1 */
		/* 8223FDC8h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223FDC8h case   20:*/		return 0x8223FDCC;
		  /* 8223FDCCh */ case   21:  		/* mr R3, R31 */
		/* 8223FDCCh case   21:*/		regs.R3 = regs.R31;
		/* 8223FDCCh case   21:*/		return 0x8223FDD0;
		  /* 8223FDD0h */ case   22:  		/* lwz R11, <#[R11 + 80]> */
		/* 8223FDD0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8223FDD0h case   22:*/		return 0x8223FDD4;
		  /* 8223FDD4h */ case   23:  		/* mtspr CTR, R11 */
		/* 8223FDD4h case   23:*/		regs.CTR = regs.R11;
		/* 8223FDD4h case   23:*/		return 0x8223FDD8;
		  /* 8223FDD8h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 8223FDD8h case   24:*/		if ( 1 ) { regs.LR = 0x8223FDDC; return (uint32)regs.CTR; }
		/* 8223FDD8h case   24:*/		return 0x8223FDDC;
		  /* 8223FDDCh */ case   25:  		/* lwz R11, <#[R31]> */
		/* 8223FDDCh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8223FDDCh case   25:*/		return 0x8223FDE0;
		  /* 8223FDE0h */ case   26:  		/* li R5, 3 */
		/* 8223FDE0h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223FDE0h case   26:*/		return 0x8223FDE4;
		  /* 8223FDE4h */ case   27:  		/* li R4, 1 */
		/* 8223FDE4h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223FDE4h case   27:*/		return 0x8223FDE8;
		  /* 8223FDE8h */ case   28:  		/* mr R3, R31 */
		/* 8223FDE8h case   28:*/		regs.R3 = regs.R31;
		/* 8223FDE8h case   28:*/		return 0x8223FDEC;
		  /* 8223FDECh */ case   29:  		/* lwz R11, <#[R11 + 80]> */
		/* 8223FDECh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8223FDECh case   29:*/		return 0x8223FDF0;
		  /* 8223FDF0h */ case   30:  		/* mtspr CTR, R11 */
		/* 8223FDF0h case   30:*/		regs.CTR = regs.R11;
		/* 8223FDF0h case   30:*/		return 0x8223FDF4;
		  /* 8223FDF4h */ case   31:  		/* bcctrl 20, CR0_LT */
		/* 8223FDF4h case   31:*/		if ( 1 ) { regs.LR = 0x8223FDF8; return (uint32)regs.CTR; }
		/* 8223FDF4h case   31:*/		return 0x8223FDF8;
		  /* 8223FDF8h */ case   32:  		/* mr R20, R3 */
		/* 8223FDF8h case   32:*/		regs.R20 = regs.R3;
		/* 8223FDF8h case   32:*/		return 0x8223FDFC;
		  /* 8223FDFCh */ case   33:  		/* lbz R19, <#[R31 + 159]> */
		/* 8223FDFCh case   33:*/		cpu::mem::load8z( regs, &regs.R19, (uint32)(regs.R31 + 0x0000009F) );
		/* 8223FDFCh case   33:*/		return 0x8223FE00;
		  /* 8223FE00h */ case   34:  		/* li R3, 18 */
		/* 8223FE00h case   34:*/		cpu::op::li<0>(regs,&regs.R3,0x12);
		/* 8223FE00h case   34:*/		return 0x8223FE04;
		  /* 8223FE04h */ case   35:  		/* lbz R18, <#[R31 + 153]> */
		/* 8223FE04h case   35:*/		cpu::mem::load8z( regs, &regs.R18, (uint32)(regs.R31 + 0x00000099) );
		/* 8223FE04h case   35:*/		return 0x8223FE08;
	}
	return 0x8223FE08;
} // Block from 8223FD78h-8223FE08h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8223FE08h
// Function '?ProcessPartialWrites@Assembler@XGRAPHICS@@QAAXAAVDList@2@AAPAVIRInst@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8223FE08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8223FE08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8223FE08);
		  /* 8223FE08h */ case    0:  		/* lwz R4, <#[R30]> */
		/* 8223FE08h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 8223FE08h case    0:*/		return 0x8223FE0C;
		  /* 8223FE0Ch */ case    1:  		/* bl 90404 */
		/* 8223FE0Ch case    1:*/		regs.LR = 0x8223FE10; return 0x82255F30;
		/* 8223FE0Ch case    1:*/		return 0x8223FE10;
		  /* 8223FE10h */ case    2:  		/* lwz R11, <#[R31 + 80]> */
		/* 8223FE10h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 8223FE10h case    2:*/		return 0x8223FE14;
		  /* 8223FE14h */ case    3:  		/* lwz R10, <#[R3]> */
		/* 8223FE14h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8223FE14h case    3:*/		return 0x8223FE18;
		  /* 8223FE18h */ case    4:  		/* mr R17, R3 */
		/* 8223FE18h case    4:*/		regs.R17 = regs.R3;
		/* 8223FE18h case    4:*/		return 0x8223FE1C;
		  /* 8223FE1Ch */ case    5:  		/* stw R29, <#[R3 + 56]> */
		/* 8223FE1Ch case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000038) );
		/* 8223FE1Ch case    5:*/		return 0x8223FE20;
		  /* 8223FE20h */ case    6:  		/* stw R11, <#[R3 + 80]> */
		/* 8223FE20h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 8223FE20h case    6:*/		return 0x8223FE24;
		  /* 8223FE24h */ case    7:  		/* lwz R11, <#[R10 + 84]> */
		/* 8223FE24h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000054) );
		/* 8223FE24h case    7:*/		return 0x8223FE28;
		  /* 8223FE28h */ case    8:  		/* li R6, 1 */
		/* 8223FE28h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223FE28h case    8:*/		return 0x8223FE2C;
		  /* 8223FE2Ch */ case    9:  		/* mtspr CTR, R11 */
		/* 8223FE2Ch case    9:*/		regs.CTR = regs.R11;
		/* 8223FE2Ch case    9:*/		return 0x8223FE30;
		  /* 8223FE30h */ case   10:  		/* li R5, 0 */
		/* 8223FE30h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223FE30h case   10:*/		return 0x8223FE34;
		  /* 8223FE34h */ case   11:  		/* li R4, 0 */
		/* 8223FE34h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FE34h case   11:*/		return 0x8223FE38;
		  /* 8223FE38h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 8223FE38h case   12:*/		if ( 1 ) { regs.LR = 0x8223FE3C; return (uint32)regs.CTR; }
		/* 8223FE38h case   12:*/		return 0x8223FE3C;
		  /* 8223FE3Ch */ case   13:  		/* lwz R11, <#[R17]> */
		/* 8223FE3Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 8223FE3Ch case   13:*/		return 0x8223FE40;
		  /* 8223FE40h */ case   14:  		/* mr R3, R17 */
		/* 8223FE40h case   14:*/		regs.R3 = regs.R17;
		/* 8223FE40h case   14:*/		return 0x8223FE44;
		  /* 8223FE44h */ case   15:  		/* mr R6, R27 */
		/* 8223FE44h case   15:*/		regs.R6 = regs.R27;
		/* 8223FE44h case   15:*/		return 0x8223FE48;
		  /* 8223FE48h */ case   16:  		/* li R5, 1 */
		/* 8223FE48h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223FE48h case   16:*/		return 0x8223FE4C;
		  /* 8223FE4Ch */ case   17:  		/* li R4, 0 */
		/* 8223FE4Ch case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FE4Ch case   17:*/		return 0x8223FE50;
		  /* 8223FE50h */ case   18:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223FE50h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223FE50h case   18:*/		return 0x8223FE54;
		  /* 8223FE54h */ case   19:  		/* mtspr CTR, R11 */
		/* 8223FE54h case   19:*/		regs.CTR = regs.R11;
		/* 8223FE54h case   19:*/		return 0x8223FE58;
		  /* 8223FE58h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 8223FE58h case   20:*/		if ( 1 ) { regs.LR = 0x8223FE5C; return (uint32)regs.CTR; }
		/* 8223FE58h case   20:*/		return 0x8223FE5C;
		  /* 8223FE5Ch */ case   21:  		/* lwz R11, <#[R17]> */
		/* 8223FE5Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 8223FE5Ch case   21:*/		return 0x8223FE60;
		  /* 8223FE60h */ case   22:  		/* mr R3, R17 */
		/* 8223FE60h case   22:*/		regs.R3 = regs.R17;
		/* 8223FE60h case   22:*/		return 0x8223FE64;
		  /* 8223FE64h */ case   23:  		/* li R6, 1 */
		/* 8223FE64h case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223FE64h case   23:*/		return 0x8223FE68;
		  /* 8223FE68h */ case   24:  		/* li R5, 2 */
		/* 8223FE68h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223FE68h case   24:*/		return 0x8223FE6C;
		  /* 8223FE6Ch */ case   25:  		/* li R4, 0 */
		/* 8223FE6Ch case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FE6Ch case   25:*/		return 0x8223FE70;
		  /* 8223FE70h */ case   26:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223FE70h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223FE70h case   26:*/		return 0x8223FE74;
		  /* 8223FE74h */ case   27:  		/* mtspr CTR, R11 */
		/* 8223FE74h case   27:*/		regs.CTR = regs.R11;
		/* 8223FE74h case   27:*/		return 0x8223FE78;
		  /* 8223FE78h */ case   28:  		/* bcctrl 20, CR0_LT */
		/* 8223FE78h case   28:*/		if ( 1 ) { regs.LR = 0x8223FE7C; return (uint32)regs.CTR; }
		/* 8223FE78h case   28:*/		return 0x8223FE7C;
		  /* 8223FE7Ch */ case   29:  		/* lwz R11, <#[R17]> */
		/* 8223FE7Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 8223FE7Ch case   29:*/		return 0x8223FE80;
		  /* 8223FE80h */ case   30:  		/* mr R3, R17 */
		/* 8223FE80h case   30:*/		regs.R3 = regs.R17;
		/* 8223FE80h case   30:*/		return 0x8223FE84;
		  /* 8223FE84h */ case   31:  		/* li R6, 1 */
		/* 8223FE84h case   31:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223FE84h case   31:*/		return 0x8223FE88;
		  /* 8223FE88h */ case   32:  		/* li R5, 3 */
		/* 8223FE88h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223FE88h case   32:*/		return 0x8223FE8C;
		  /* 8223FE8Ch */ case   33:  		/* li R4, 0 */
		/* 8223FE8Ch case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FE8Ch case   33:*/		return 0x8223FE90;
		  /* 8223FE90h */ case   34:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223FE90h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223FE90h case   34:*/		return 0x8223FE94;
		  /* 8223FE94h */ case   35:  		/* mtspr CTR, R11 */
		/* 8223FE94h case   35:*/		regs.CTR = regs.R11;
		/* 8223FE94h case   35:*/		return 0x8223FE98;
		  /* 8223FE98h */ case   36:  		/* bcctrl 20, CR0_LT */
		/* 8223FE98h case   36:*/		if ( 1 ) { regs.LR = 0x8223FE9C; return (uint32)regs.CTR; }
		/* 8223FE98h case   36:*/		return 0x8223FE9C;
		  /* 8223FE9Ch */ case   37:  		/* mr R5, R23 */
		/* 8223FE9Ch case   37:*/		regs.R5 = regs.R23;
		/* 8223FE9Ch case   37:*/		return 0x8223FEA0;
		  /* 8223FEA0h */ case   38:  		/* mr R3, R17 */
		/* 8223FEA0h case   38:*/		regs.R3 = regs.R17;
		/* 8223FEA0h case   38:*/		return 0x8223FEA4;
		  /* 8223FEA4h */ case   39:  		/* li R4, 1 */
		/* 8223FEA4h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223FEA4h case   39:*/		return 0x8223FEA8;
		  /* 8223FEA8h */ case   40:  		/* bl -40792 */
		/* 8223FEA8h case   40:*/		regs.LR = 0x8223FEAC; return 0x82235F50;
		/* 8223FEA8h case   40:*/		return 0x8223FEAC;
		  /* 8223FEACh */ case   41:  		/* stb R19, <#[R17 + 159]> */
		/* 8223FEACh case   41:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R17 + 0x0000009F) );
		/* 8223FEACh case   41:*/		return 0x8223FEB0;
		  /* 8223FEB0h */ case   42:  		/* mr R3, R17 */
		/* 8223FEB0h case   42:*/		regs.R3 = regs.R17;
		/* 8223FEB0h case   42:*/		return 0x8223FEB4;
		  /* 8223FEB4h */ case   43:  		/* mr R5, R23 */
		/* 8223FEB4h case   43:*/		regs.R5 = regs.R23;
		/* 8223FEB4h case   43:*/		return 0x8223FEB8;
		  /* 8223FEB8h */ case   44:  		/* li R4, 2 */
		/* 8223FEB8h case   44:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8223FEB8h case   44:*/		return 0x8223FEBC;
		  /* 8223FEBCh */ case   45:  		/* bl -40812 */
		/* 8223FEBCh case   45:*/		regs.LR = 0x8223FEC0; return 0x82235F50;
		/* 8223FEBCh case   45:*/		return 0x8223FEC0;
		  /* 8223FEC0h */ case   46:  		/* li R11, 1 */
		/* 8223FEC0h case   46:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8223FEC0h case   46:*/		return 0x8223FEC4;
		  /* 8223FEC4h */ case   47:  		/* stb R19, <#[R17 + 160]> */
		/* 8223FEC4h case   47:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R17 + 0x000000A0) );
		/* 8223FEC4h case   47:*/		return 0x8223FEC8;
		  /* 8223FEC8h */ case   48:  		/* mr R4, R31 */
		/* 8223FEC8h case   48:*/		regs.R4 = regs.R31;
		/* 8223FEC8h case   48:*/		return 0x8223FECC;
		  /* 8223FECCh */ case   49:  		/* stb R11, <#[R17 + 154]> */
		/* 8223FECCh case   49:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R17 + 0x0000009A) );
		/* 8223FECCh case   49:*/		return 0x8223FED0;
		  /* 8223FED0h */ case   50:  		/* mr R5, R17 */
		/* 8223FED0h case   50:*/		regs.R5 = regs.R17;
		/* 8223FED0h case   50:*/		return 0x8223FED4;
		  /* 8223FED4h */ case   51:  		/* lwz R11, <#[R17 + 228]> */
		/* 8223FED4h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x000000E4) );
		/* 8223FED4h case   51:*/		return 0x8223FED8;
		  /* 8223FED8h */ case   52:  		/* ori R11, R11, 4 */
		/* 8223FED8h case   52:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8223FED8h case   52:*/		return 0x8223FEDC;
		  /* 8223FEDCh */ case   53:  		/* stw R11, <#[R17 + 228]> */
		/* 8223FEDCh case   53:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x000000E4) );
		/* 8223FEDCh case   53:*/		return 0x8223FEE0;
		  /* 8223FEE0h */ case   54:  		/* lwz R3, <#[R31 + 948]> */
		/* 8223FEE0h case   54:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000003B4) );
		/* 8223FEE0h case   54:*/		return 0x8223FEE4;
		  /* 8223FEE4h */ case   55:  		/* bl 102716 */
		/* 8223FEE4h case   55:*/		regs.LR = 0x8223FEE8; return 0x82259020;
		/* 8223FEE4h case   55:*/		return 0x8223FEE8;
		  /* 8223FEE8h */ case   56:  		/* li R3, 59 */
		/* 8223FEE8h case   56:*/		cpu::op::li<0>(regs,&regs.R3,0x3B);
		/* 8223FEE8h case   56:*/		return 0x8223FEEC;
		  /* 8223FEECh */ case   57:  		/* lwz R4, <#[R30]> */
		/* 8223FEECh case   57:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 8223FEECh case   57:*/		return 0x8223FEF0;
		  /* 8223FEF0h */ case   58:  		/* bl 90176 */
		/* 8223FEF0h case   58:*/		regs.LR = 0x8223FEF4; return 0x82255F30;
		/* 8223FEF0h case   58:*/		return 0x8223FEF4;
		  /* 8223FEF4h */ case   59:  		/* lwz R11, <#[R31 + 80]> */
		/* 8223FEF4h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 8223FEF4h case   59:*/		return 0x8223FEF8;
		  /* 8223FEF8h */ case   60:  		/* li R6, 1 */
		/* 8223FEF8h case   60:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223FEF8h case   60:*/		return 0x8223FEFC;
		  /* 8223FEFCh */ case   61:  		/* stw R29, <#[R3 + 56]> */
		/* 8223FEFCh case   61:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000038) );
		/* 8223FEFCh case   61:*/		return 0x8223FF00;
		  /* 8223FF00h */ case   62:  		/* li R5, 0 */
		/* 8223FF00h case   62:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223FF00h case   62:*/		return 0x8223FF04;
		  /* 8223FF04h */ case   63:  		/* li R4, 0 */
		/* 8223FF04h case   63:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FF04h case   63:*/		return 0x8223FF08;
		  /* 8223FF08h */ case   64:  		/* mr R16, R3 */
		/* 8223FF08h case   64:*/		regs.R16 = regs.R3;
		/* 8223FF08h case   64:*/		return 0x8223FF0C;
		  /* 8223FF0Ch */ case   65:  		/* stw R11, <#[R3 + 80]> */
		/* 8223FF0Ch case   65:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 8223FF0Ch case   65:*/		return 0x8223FF10;
		  /* 8223FF10h */ case   66:  		/* lwz R11, <#[R3]> */
		/* 8223FF10h case   66:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8223FF10h case   66:*/		return 0x8223FF14;
		  /* 8223FF14h */ case   67:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223FF14h case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223FF14h case   67:*/		return 0x8223FF18;
		  /* 8223FF18h */ case   68:  		/* mtspr CTR, R11 */
		/* 8223FF18h case   68:*/		regs.CTR = regs.R11;
		/* 8223FF18h case   68:*/		return 0x8223FF1C;
		  /* 8223FF1Ch */ case   69:  		/* bcctrl 20, CR0_LT */
		/* 8223FF1Ch case   69:*/		if ( 1 ) { regs.LR = 0x8223FF20; return (uint32)regs.CTR; }
		/* 8223FF1Ch case   69:*/		return 0x8223FF20;
		  /* 8223FF20h */ case   70:  		/* lwz R11, <#[R16]> */
		/* 8223FF20h case   70:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8223FF20h case   70:*/		return 0x8223FF24;
		  /* 8223FF24h */ case   71:  		/* mr R3, R16 */
		/* 8223FF24h case   71:*/		regs.R3 = regs.R16;
		/* 8223FF24h case   71:*/		return 0x8223FF28;
		  /* 8223FF28h */ case   72:  		/* li R6, 1 */
		/* 8223FF28h case   72:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223FF28h case   72:*/		return 0x8223FF2C;
		  /* 8223FF2Ch */ case   73:  		/* li R5, 1 */
		/* 8223FF2Ch case   73:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223FF2Ch case   73:*/		return 0x8223FF30;
		  /* 8223FF30h */ case   74:  		/* li R4, 0 */
		/* 8223FF30h case   74:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FF30h case   74:*/		return 0x8223FF34;
		  /* 8223FF34h */ case   75:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223FF34h case   75:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223FF34h case   75:*/		return 0x8223FF38;
		  /* 8223FF38h */ case   76:  		/* mtspr CTR, R11 */
		/* 8223FF38h case   76:*/		regs.CTR = regs.R11;
		/* 8223FF38h case   76:*/		return 0x8223FF3C;
		  /* 8223FF3Ch */ case   77:  		/* bcctrl 20, CR0_LT */
		/* 8223FF3Ch case   77:*/		if ( 1 ) { regs.LR = 0x8223FF40; return (uint32)regs.CTR; }
		/* 8223FF3Ch case   77:*/		return 0x8223FF40;
		  /* 8223FF40h */ case   78:  		/* lwz R11, <#[R16]> */
		/* 8223FF40h case   78:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8223FF40h case   78:*/		return 0x8223FF44;
		  /* 8223FF44h */ case   79:  		/* mr R3, R16 */
		/* 8223FF44h case   79:*/		regs.R3 = regs.R16;
		/* 8223FF44h case   79:*/		return 0x8223FF48;
		  /* 8223FF48h */ case   80:  		/* mr R6, R26 */
		/* 8223FF48h case   80:*/		regs.R6 = regs.R26;
		/* 8223FF48h case   80:*/		return 0x8223FF4C;
		  /* 8223FF4Ch */ case   81:  		/* li R5, 2 */
		/* 8223FF4Ch case   81:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223FF4Ch case   81:*/		return 0x8223FF50;
		  /* 8223FF50h */ case   82:  		/* li R4, 0 */
		/* 8223FF50h case   82:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FF50h case   82:*/		return 0x8223FF54;
		  /* 8223FF54h */ case   83:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223FF54h case   83:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223FF54h case   83:*/		return 0x8223FF58;
		  /* 8223FF58h */ case   84:  		/* mtspr CTR, R11 */
		/* 8223FF58h case   84:*/		regs.CTR = regs.R11;
		/* 8223FF58h case   84:*/		return 0x8223FF5C;
		  /* 8223FF5Ch */ case   85:  		/* bcctrl 20, CR0_LT */
		/* 8223FF5Ch case   85:*/		if ( 1 ) { regs.LR = 0x8223FF60; return (uint32)regs.CTR; }
		/* 8223FF5Ch case   85:*/		return 0x8223FF60;
		  /* 8223FF60h */ case   86:  		/* lwz R11, <#[R16]> */
		/* 8223FF60h case   86:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8223FF60h case   86:*/		return 0x8223FF64;
		  /* 8223FF64h */ case   87:  		/* mr R3, R16 */
		/* 8223FF64h case   87:*/		regs.R3 = regs.R16;
		/* 8223FF64h case   87:*/		return 0x8223FF68;
		  /* 8223FF68h */ case   88:  		/* li R6, 1 */
		/* 8223FF68h case   88:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8223FF68h case   88:*/		return 0x8223FF6C;
		  /* 8223FF6Ch */ case   89:  		/* lwz R11, <#[R11 + 84]> */
		/* 8223FF6Ch case   89:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8223FF6Ch case   89:*/		return 0x8223FF70;
		  /* 8223FF70h */ case   90:  		/* li R5, 3 */
		/* 8223FF70h case   90:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223FF70h case   90:*/		return 0x8223FF74;
		  /* 8223FF74h */ case   91:  		/* li R4, 0 */
		/* 8223FF74h case   91:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8223FF74h case   91:*/		return 0x8223FF78;
		  /* 8223FF78h */ case   92:  		/* mtspr CTR, R11 */
		/* 8223FF78h case   92:*/		regs.CTR = regs.R11;
		/* 8223FF78h case   92:*/		return 0x8223FF7C;
		  /* 8223FF7Ch */ case   93:  		/* bcctrl 20, CR0_LT */
		/* 8223FF7Ch case   93:*/		if ( 1 ) { regs.LR = 0x8223FF80; return (uint32)regs.CTR; }
		/* 8223FF7Ch case   93:*/		return 0x8223FF80;
		  /* 8223FF80h */ case   94:  		/* mr R3, R16 */
		/* 8223FF80h case   94:*/		regs.R3 = regs.R16;
		/* 8223FF80h case   94:*/		return 0x8223FF84;
		  /* 8223FF84h */ case   95:  		/* mr R5, R23 */
		/* 8223FF84h case   95:*/		regs.R5 = regs.R23;
		/* 8223FF84h case   95:*/		return 0x8223FF88;
		  /* 8223FF88h */ case   96:  		/* li R4, 1 */
		/* 8223FF88h case   96:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223FF88h case   96:*/		return 0x8223FF8C;
		  /* 8223FF8Ch */ case   97:  		/* bl -41020 */
		/* 8223FF8Ch case   97:*/		regs.LR = 0x8223FF90; return 0x82235F50;
		/* 8223FF8Ch case   97:*/		return 0x8223FF90;
		  /* 8223FF90h */ case   98:  		/* lwz R11, <#[R16]> */
		/* 8223FF90h case   98:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8223FF90h case   98:*/		return 0x8223FF94;
		  /* 8223FF94h */ case   99:  		/* mr R6, R21 */
		/* 8223FF94h case   99:*/		regs.R6 = regs.R21;
		/* 8223FF94h case   99:*/		return 0x8223FF98;
		  /* 8223FF98h */ case  100:  		/* mr R3, R16 */
		/* 8223FF98h case  100:*/		regs.R3 = regs.R16;
		/* 8223FF98h case  100:*/		return 0x8223FF9C;
		  /* 8223FF9Ch */ case  101:  		/* li R5, 0 */
		/* 8223FF9Ch case  101:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8223FF9Ch case  101:*/		return 0x8223FFA0;
		  /* 8223FFA0h */ case  102:  		/* li R4, 1 */
		/* 8223FFA0h case  102:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223FFA0h case  102:*/		return 0x8223FFA4;
		  /* 8223FFA4h */ case  103:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223FFA4h case  103:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223FFA4h case  103:*/		return 0x8223FFA8;
		  /* 8223FFA8h */ case  104:  		/* mtspr CTR, R11 */
		/* 8223FFA8h case  104:*/		regs.CTR = regs.R11;
		/* 8223FFA8h case  104:*/		return 0x8223FFAC;
		  /* 8223FFACh */ case  105:  		/* bcctrl 20, CR0_LT */
		/* 8223FFACh case  105:*/		if ( 1 ) { regs.LR = 0x8223FFB0; return (uint32)regs.CTR; }
		/* 8223FFACh case  105:*/		return 0x8223FFB0;
		  /* 8223FFB0h */ case  106:  		/* lwz R11, <#[R16]> */
		/* 8223FFB0h case  106:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8223FFB0h case  106:*/		return 0x8223FFB4;
		  /* 8223FFB4h */ case  107:  		/* mr R6, R21 */
		/* 8223FFB4h case  107:*/		regs.R6 = regs.R21;
		/* 8223FFB4h case  107:*/		return 0x8223FFB8;
		  /* 8223FFB8h */ case  108:  		/* mr R3, R16 */
		/* 8223FFB8h case  108:*/		regs.R3 = regs.R16;
		/* 8223FFB8h case  108:*/		return 0x8223FFBC;
		  /* 8223FFBCh */ case  109:  		/* li R5, 1 */
		/* 8223FFBCh case  109:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8223FFBCh case  109:*/		return 0x8223FFC0;
		  /* 8223FFC0h */ case  110:  		/* li R4, 1 */
		/* 8223FFC0h case  110:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223FFC0h case  110:*/		return 0x8223FFC4;
		  /* 8223FFC4h */ case  111:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223FFC4h case  111:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223FFC4h case  111:*/		return 0x8223FFC8;
		  /* 8223FFC8h */ case  112:  		/* mtspr CTR, R11 */
		/* 8223FFC8h case  112:*/		regs.CTR = regs.R11;
		/* 8223FFC8h case  112:*/		return 0x8223FFCC;
		  /* 8223FFCCh */ case  113:  		/* bcctrl 20, CR0_LT */
		/* 8223FFCCh case  113:*/		if ( 1 ) { regs.LR = 0x8223FFD0; return (uint32)regs.CTR; }
		/* 8223FFCCh case  113:*/		return 0x8223FFD0;
		  /* 8223FFD0h */ case  114:  		/* lwz R11, <#[R16]> */
		/* 8223FFD0h case  114:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8223FFD0h case  114:*/		return 0x8223FFD4;
		  /* 8223FFD4h */ case  115:  		/* mr R6, R21 */
		/* 8223FFD4h case  115:*/		regs.R6 = regs.R21;
		/* 8223FFD4h case  115:*/		return 0x8223FFD8;
		  /* 8223FFD8h */ case  116:  		/* mr R3, R16 */
		/* 8223FFD8h case  116:*/		regs.R3 = regs.R16;
		/* 8223FFD8h case  116:*/		return 0x8223FFDC;
		  /* 8223FFDCh */ case  117:  		/* li R5, 2 */
		/* 8223FFDCh case  117:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8223FFDCh case  117:*/		return 0x8223FFE0;
		  /* 8223FFE0h */ case  118:  		/* li R4, 1 */
		/* 8223FFE0h case  118:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8223FFE0h case  118:*/		return 0x8223FFE4;
		  /* 8223FFE4h */ case  119:  		/* lwz R11, <#[R11 + 88]> */
		/* 8223FFE4h case  119:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8223FFE4h case  119:*/		return 0x8223FFE8;
		  /* 8223FFE8h */ case  120:  		/* mtspr CTR, R11 */
		/* 8223FFE8h case  120:*/		regs.CTR = regs.R11;
		/* 8223FFE8h case  120:*/		return 0x8223FFEC;
		  /* 8223FFECh */ case  121:  		/* bcctrl 20, CR0_LT */
		/* 8223FFECh case  121:*/		if ( 1 ) { regs.LR = 0x8223FFF0; return (uint32)regs.CTR; }
		/* 8223FFECh case  121:*/		return 0x8223FFF0;
		  /* 8223FFF0h */ case  122:  		/* lwz R11, <#[R16]> */
		/* 8223FFF0h case  122:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8223FFF0h case  122:*/		return 0x8223FFF4;
		  /* 8223FFF4h */ case  123:  		/* mr R3, R16 */
		/* 8223FFF4h case  123:*/		regs.R3 = regs.R16;
		/* 8223FFF4h case  123:*/		return 0x8223FFF8;
		  /* 8223FFF8h */ case  124:  		/* mr R6, R21 */
		/* 8223FFF8h case  124:*/		regs.R6 = regs.R21;
		/* 8223FFF8h case  124:*/		return 0x8223FFFC;
		  /* 8223FFFCh */ case  125:  		/* li R5, 3 */
		/* 8223FFFCh case  125:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8223FFFCh case  125:*/		return 0x82240000;
		  /* 82240000h */ case  126:  		/* li R4, 1 */
		/* 82240000h case  126:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82240000h case  126:*/		return 0x82240004;
		  /* 82240004h */ case  127:  		/* lwz R11, <#[R11 + 88]> */
		/* 82240004h case  127:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82240004h case  127:*/		return 0x82240008;
		  /* 82240008h */ case  128:  		/* mtspr CTR, R11 */
		/* 82240008h case  128:*/		regs.CTR = regs.R11;
		/* 82240008h case  128:*/		return 0x8224000C;
		  /* 8224000Ch */ case  129:  		/* bcctrl 20, CR0_LT */
		/* 8224000Ch case  129:*/		if ( 1 ) { regs.LR = 0x82240010; return (uint32)regs.CTR; }
		/* 8224000Ch case  129:*/		return 0x82240010;
		  /* 82240010h */ case  130:  		/* lwz R11, <#[R16 + 228]> */
		/* 82240010h case  130:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x000000E4) );
		/* 82240010h case  130:*/		return 0x82240014;
		  /* 82240014h */ case  131:  		/* mr R4, R31 */
		/* 82240014h case  131:*/		regs.R4 = regs.R31;
		/* 82240014h case  131:*/		return 0x82240018;
		  /* 82240018h */ case  132:  		/* stb R18, <#[R16 + 153]> */
		/* 82240018h case  132:*/		cpu::mem::store8( regs, regs.R18, (uint32)(regs.R16 + 0x00000099) );
		/* 82240018h case  132:*/		return 0x8224001C;
		  /* 8224001Ch */ case  133:  		/* mr R5, R16 */
		/* 8224001Ch case  133:*/		regs.R5 = regs.R16;
		/* 8224001Ch case  133:*/		return 0x82240020;
		  /* 82240020h */ case  134:  		/* rlwinm R11, R11, 0, 30, 28 */
		/* 82240020h case  134:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R11,regs.R11);
		/* 82240020h case  134:*/		return 0x82240024;
		  /* 82240024h */ case  135:  		/* stb R19, <#[R16 + 159]> */
		/* 82240024h case  135:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R16 + 0x0000009F) );
		/* 82240024h case  135:*/		return 0x82240028;
		  /* 82240028h */ case  136:  		/* stw R11, <#[R16 + 228]> */
		/* 82240028h case  136:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x000000E4) );
		/* 82240028h case  136:*/		return 0x8224002C;
		  /* 8224002Ch */ case  137:  		/* lwz R3, <#[R31 + 948]> */
		/* 8224002Ch case  137:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000003B4) );
		/* 8224002Ch case  137:*/		return 0x82240030;
		  /* 82240030h */ case  138:  		/* bl 102384 */
		/* 82240030h case  138:*/		regs.LR = 0x82240034; return 0x82259020;
		/* 82240030h case  138:*/		return 0x82240034;
		  /* 82240034h */ case  139:  		/* li R3, 39 */
		/* 82240034h case  139:*/		cpu::op::li<0>(regs,&regs.R3,0x27);
		/* 82240034h case  139:*/		return 0x82240038;
		  /* 82240038h */ case  140:  		/* lwz R4, <#[R30]> */
		/* 82240038h case  140:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82240038h case  140:*/		return 0x8224003C;
		  /* 8224003Ch */ case  141:  		/* bl 89844 */
		/* 8224003Ch case  141:*/		regs.LR = 0x82240040; return 0x82255F30;
		/* 8224003Ch case  141:*/		return 0x82240040;
		  /* 82240040h */ case  142:  		/* lwz R11, <#[R31 + 80]> */
		/* 82240040h case  142:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 82240040h case  142:*/		return 0x82240044;
		  /* 82240044h */ case  143:  		/* stw R29, <#[R3 + 56]> */
		/* 82240044h case  143:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000038) );
		/* 82240044h case  143:*/		return 0x82240048;
		  /* 82240048h */ case  144:  		/* mr R6, R28 */
		/* 82240048h case  144:*/		regs.R6 = regs.R28;
		/* 82240048h case  144:*/		return 0x8224004C;
		  /* 8224004Ch */ case  145:  		/* li R5, 0 */
		/* 8224004Ch case  145:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8224004Ch case  145:*/		return 0x82240050;
		  /* 82240050h */ case  146:  		/* li R4, 0 */
		/* 82240050h case  146:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82240050h case  146:*/		return 0x82240054;
		  /* 82240054h */ case  147:  		/* mr R21, R3 */
		/* 82240054h case  147:*/		regs.R21 = regs.R3;
		/* 82240054h case  147:*/		return 0x82240058;
		  /* 82240058h */ case  148:  		/* stw R11, <#[R3 + 80]> */
		/* 82240058h case  148:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 82240058h case  148:*/		return 0x8224005C;
		  /* 8224005Ch */ case  149:  		/* lwz R11, <#[R3]> */
		/* 8224005Ch case  149:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8224005Ch case  149:*/		return 0x82240060;
		  /* 82240060h */ case  150:  		/* lwz R11, <#[R11 + 84]> */
		/* 82240060h case  150:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82240060h case  150:*/		return 0x82240064;
		  /* 82240064h */ case  151:  		/* mtspr CTR, R11 */
		/* 82240064h case  151:*/		regs.CTR = regs.R11;
		/* 82240064h case  151:*/		return 0x82240068;
		  /* 82240068h */ case  152:  		/* bcctrl 20, CR0_LT */
		/* 82240068h case  152:*/		if ( 1 ) { regs.LR = 0x8224006C; return (uint32)regs.CTR; }
		/* 82240068h case  152:*/		return 0x8224006C;
		  /* 8224006Ch */ case  153:  		/* lwz R11, <#[R21]> */
		/* 8224006Ch case  153:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 8224006Ch case  153:*/		return 0x82240070;
		  /* 82240070h */ case  154:  		/* mr R3, R21 */
		/* 82240070h case  154:*/		regs.R3 = regs.R21;
		/* 82240070h case  154:*/		return 0x82240074;
		  /* 82240074h */ case  155:  		/* li R6, 1 */
		/* 82240074h case  155:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82240074h case  155:*/		return 0x82240078;
		  /* 82240078h */ case  156:  		/* li R5, 1 */
		/* 82240078h case  156:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82240078h case  156:*/		return 0x8224007C;
		  /* 8224007Ch */ case  157:  		/* li R4, 0 */
		/* 8224007Ch case  157:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8224007Ch case  157:*/		return 0x82240080;
		  /* 82240080h */ case  158:  		/* lwz R11, <#[R11 + 84]> */
		/* 82240080h case  158:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82240080h case  158:*/		return 0x82240084;
		  /* 82240084h */ case  159:  		/* mtspr CTR, R11 */
		/* 82240084h case  159:*/		regs.CTR = regs.R11;
		/* 82240084h case  159:*/		return 0x82240088;
		  /* 82240088h */ case  160:  		/* bcctrl 20, CR0_LT */
		/* 82240088h case  160:*/		if ( 1 ) { regs.LR = 0x8224008C; return (uint32)regs.CTR; }
		/* 82240088h case  160:*/		return 0x8224008C;
		  /* 8224008Ch */ case  161:  		/* lwz R11, <#[R21]> */
		/* 8224008Ch case  161:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 8224008Ch case  161:*/		return 0x82240090;
		  /* 82240090h */ case  162:  		/* li R6, 1 */
		/* 82240090h case  162:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82240090h case  162:*/		return 0x82240094;
		  /* 82240094h */ case  163:  		/* li R5, 2 */
		/* 82240094h case  163:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82240094h case  163:*/		return 0x82240098;
		  /* 82240098h */ case  164:  		/* li R4, 0 */
		/* 82240098h case  164:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82240098h case  164:*/		return 0x8224009C;
		  /* 8224009Ch */ case  165:  		/* mr R3, R21 */
		/* 8224009Ch case  165:*/		regs.R3 = regs.R21;
		/* 8224009Ch case  165:*/		return 0x822400A0;
		  /* 822400A0h */ case  166:  		/* lwz R11, <#[R11 + 84]> */
		/* 822400A0h case  166:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 822400A0h case  166:*/		return 0x822400A4;
		  /* 822400A4h */ case  167:  		/* mtspr CTR, R11 */
		/* 822400A4h case  167:*/		regs.CTR = regs.R11;
		/* 822400A4h case  167:*/		return 0x822400A8;
		  /* 822400A8h */ case  168:  		/* bcctrl 20, CR0_LT */
		/* 822400A8h case  168:*/		if ( 1 ) { regs.LR = 0x822400AC; return (uint32)regs.CTR; }
		/* 822400A8h case  168:*/		return 0x822400AC;
		  /* 822400ACh */ case  169:  		/* mr R3, R21 */
		/* 822400ACh case  169:*/		regs.R3 = regs.R21;
		/* 822400ACh case  169:*/		return 0x822400B0;
		  /* 822400B0h */ case  170:  		/* lwz R11, <#[R21]> */
		/* 822400B0h case  170:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 822400B0h case  170:*/		return 0x822400B4;
		  /* 822400B4h */ case  171:  		/* mr R6, R25 */
		/* 822400B4h case  171:*/		regs.R6 = regs.R25;
		/* 822400B4h case  171:*/		return 0x822400B8;
		  /* 822400B8h */ case  172:  		/* li R5, 3 */
		/* 822400B8h case  172:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 822400B8h case  172:*/		return 0x822400BC;
		  /* 822400BCh */ case  173:  		/* li R4, 0 */
		/* 822400BCh case  173:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822400BCh case  173:*/		return 0x822400C0;
		  /* 822400C0h */ case  174:  		/* lwz R11, <#[R11 + 84]> */
		/* 822400C0h case  174:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 822400C0h case  174:*/		return 0x822400C4;
		  /* 822400C4h */ case  175:  		/* mtspr CTR, R11 */
		/* 822400C4h case  175:*/		regs.CTR = regs.R11;
		/* 822400C4h case  175:*/		return 0x822400C8;
		  /* 822400C8h */ case  176:  		/* bcctrl 20, CR0_LT */
		/* 822400C8h case  176:*/		if ( 1 ) { regs.LR = 0x822400CC; return (uint32)regs.CTR; }
		/* 822400C8h case  176:*/		return 0x822400CC;
		  /* 822400CCh */ case  177:  		/* mr R5, R23 */
		/* 822400CCh case  177:*/		regs.R5 = regs.R23;
		/* 822400CCh case  177:*/		return 0x822400D0;
		  /* 822400D0h */ case  178:  		/* mr R3, R21 */
		/* 822400D0h case  178:*/		regs.R3 = regs.R21;
		/* 822400D0h case  178:*/		return 0x822400D4;
		  /* 822400D4h */ case  179:  		/* li R4, 1 */
		/* 822400D4h case  179:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822400D4h case  179:*/		return 0x822400D8;
		  /* 822400D8h */ case  180:  		/* bl -41352 */
		/* 822400D8h case  180:*/		regs.LR = 0x822400DC; return 0x82235F50;
		/* 822400D8h case  180:*/		return 0x822400DC;
		  /* 822400DCh */ case  181:  		/* stb R19, <#[R21 + 159]> */
		/* 822400DCh case  181:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R21 + 0x0000009F) );
		/* 822400DCh case  181:*/		return 0x822400E0;
		  /* 822400E0h */ case  182:  		/* mr R5, R23 */
		/* 822400E0h case  182:*/		regs.R5 = regs.R23;
		/* 822400E0h case  182:*/		return 0x822400E4;
		  /* 822400E4h */ case  183:  		/* mr R3, R21 */
		/* 822400E4h case  183:*/		regs.R3 = regs.R21;
		/* 822400E4h case  183:*/		return 0x822400E8;
		  /* 822400E8h */ case  184:  		/* li R4, 2 */
		/* 822400E8h case  184:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 822400E8h case  184:*/		return 0x822400EC;
		  /* 822400ECh */ case  185:  		/* bl -41372 */
		/* 822400ECh case  185:*/		regs.LR = 0x822400F0; return 0x82235F50;
		/* 822400ECh case  185:*/		return 0x822400F0;
		  /* 822400F0h */ case  186:  		/* lwz R11, <#[R21 + 228]> */
		/* 822400F0h case  186:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x000000E4) );
		/* 822400F0h case  186:*/		return 0x822400F4;
		  /* 822400F4h */ case  187:  		/* stb R19, <#[R21 + 160]> */
		/* 822400F4h case  187:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R21 + 0x000000A0) );
		/* 822400F4h case  187:*/		return 0x822400F8;
		  /* 822400F8h */ case  188:  		/* mr R4, R31 */
		/* 822400F8h case  188:*/		regs.R4 = regs.R31;
		/* 822400F8h case  188:*/		return 0x822400FC;
		  /* 822400FCh */ case  189:  		/* ori R11, R11, 4 */
		/* 822400FCh case  189:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822400FCh case  189:*/		return 0x82240100;
		  /* 82240100h */ case  190:  		/* mr R5, R21 */
		/* 82240100h case  190:*/		regs.R5 = regs.R21;
		/* 82240100h case  190:*/		return 0x82240104;
		  /* 82240104h */ case  191:  		/* stw R11, <#[R21 + 228]> */
		/* 82240104h case  191:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x000000E4) );
		/* 82240104h case  191:*/		return 0x82240108;
		  /* 82240108h */ case  192:  		/* lwz R3, <#[R31 + 948]> */
		/* 82240108h case  192:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000003B4) );
		/* 82240108h case  192:*/		return 0x8224010C;
		  /* 8224010Ch */ case  193:  		/* bl 102164 */
		/* 8224010Ch case  193:*/		regs.LR = 0x82240110; return 0x82259020;
		/* 8224010Ch case  193:*/		return 0x82240110;
		  /* 82240110h */ case  194:  		/* li R3, 97 */
		/* 82240110h case  194:*/		cpu::op::li<0>(regs,&regs.R3,0x61);
		/* 82240110h case  194:*/		return 0x82240114;
		  /* 82240114h */ case  195:  		/* lwz R4, <#[R30]> */
		/* 82240114h case  195:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82240114h case  195:*/		return 0x82240118;
		  /* 82240118h */ case  196:  		/* bl 89624 */
		/* 82240118h case  196:*/		regs.LR = 0x8224011C; return 0x82255F30;
		/* 82240118h case  196:*/		return 0x8224011C;
		  /* 8224011Ch */ case  197:  		/* lwz R11, <#[R31 + 80]> */
		/* 8224011Ch case  197:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 8224011Ch case  197:*/		return 0x82240120;
		  /* 82240120h */ case  198:  		/* li R6, 1 */
		/* 82240120h case  198:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82240120h case  198:*/		return 0x82240124;
		  /* 82240124h */ case  199:  		/* stw R29, <#[R3 + 56]> */
		/* 82240124h case  199:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000038) );
		/* 82240124h case  199:*/		return 0x82240128;
		  /* 82240128h */ case  200:  		/* li R5, 0 */
		/* 82240128h case  200:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82240128h case  200:*/		return 0x8224012C;
		  /* 8224012Ch */ case  201:  		/* li R4, 0 */
		/* 8224012Ch case  201:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8224012Ch case  201:*/		return 0x82240130;
		  /* 82240130h */ case  202:  		/* mr R28, R3 */
		/* 82240130h case  202:*/		regs.R28 = regs.R3;
		/* 82240130h case  202:*/		return 0x82240134;
		  /* 82240134h */ case  203:  		/* stw R11, <#[R3 + 80]> */
		/* 82240134h case  203:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 82240134h case  203:*/		return 0x82240138;
		  /* 82240138h */ case  204:  		/* lwz R11, <#[R3]> */
		/* 82240138h case  204:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82240138h case  204:*/		return 0x8224013C;
		  /* 8224013Ch */ case  205:  		/* lwz R11, <#[R11 + 84]> */
		/* 8224013Ch case  205:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8224013Ch case  205:*/		return 0x82240140;
		  /* 82240140h */ case  206:  		/* mtspr CTR, R11 */
		/* 82240140h case  206:*/		regs.CTR = regs.R11;
		/* 82240140h case  206:*/		return 0x82240144;
		  /* 82240144h */ case  207:  		/* bcctrl 20, CR0_LT */
		/* 82240144h case  207:*/		if ( 1 ) { regs.LR = 0x82240148; return (uint32)regs.CTR; }
		/* 82240144h case  207:*/		return 0x82240148;
		  /* 82240148h */ case  208:  		/* lwz R11, <#[R28]> */
		/* 82240148h case  208:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82240148h case  208:*/		return 0x8224014C;
		  /* 8224014Ch */ case  209:  		/* mr R3, R28 */
		/* 8224014Ch case  209:*/		regs.R3 = regs.R28;
		/* 8224014Ch case  209:*/		return 0x82240150;
		  /* 82240150h */ case  210:  		/* li R6, 1 */
		/* 82240150h case  210:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82240150h case  210:*/		return 0x82240154;
		  /* 82240154h */ case  211:  		/* li R5, 1 */
		/* 82240154h case  211:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82240154h case  211:*/		return 0x82240158;
		  /* 82240158h */ case  212:  		/* li R4, 0 */
		/* 82240158h case  212:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82240158h case  212:*/		return 0x8224015C;
		  /* 8224015Ch */ case  213:  		/* lwz R11, <#[R11 + 84]> */
		/* 8224015Ch case  213:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8224015Ch case  213:*/		return 0x82240160;
		  /* 82240160h */ case  214:  		/* mtspr CTR, R11 */
		/* 82240160h case  214:*/		regs.CTR = regs.R11;
		/* 82240160h case  214:*/		return 0x82240164;
		  /* 82240164h */ case  215:  		/* bcctrl 20, CR0_LT */
		/* 82240164h case  215:*/		if ( 1 ) { regs.LR = 0x82240168; return (uint32)regs.CTR; }
		/* 82240164h case  215:*/		return 0x82240168;
		  /* 82240168h */ case  216:  		/* lwz R11, <#[R28]> */
		/* 82240168h case  216:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82240168h case  216:*/		return 0x8224016C;
		  /* 8224016Ch */ case  217:  		/* mr R3, R28 */
		/* 8224016Ch case  217:*/		regs.R3 = regs.R28;
		/* 8224016Ch case  217:*/		return 0x82240170;
		  /* 82240170h */ case  218:  		/* mr R6, R26 */
		/* 82240170h case  218:*/		regs.R6 = regs.R26;
		/* 82240170h case  218:*/		return 0x82240174;
		  /* 82240174h */ case  219:  		/* li R5, 2 */
		/* 82240174h case  219:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82240174h case  219:*/		return 0x82240178;
		  /* 82240178h */ case  220:  		/* li R4, 0 */
		/* 82240178h case  220:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82240178h case  220:*/		return 0x8224017C;
		  /* 8224017Ch */ case  221:  		/* lwz R11, <#[R11 + 84]> */
		/* 8224017Ch case  221:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8224017Ch case  221:*/		return 0x82240180;
		  /* 82240180h */ case  222:  		/* mtspr CTR, R11 */
		/* 82240180h case  222:*/		regs.CTR = regs.R11;
		/* 82240180h case  222:*/		return 0x82240184;
		  /* 82240184h */ case  223:  		/* bcctrl 20, CR0_LT */
		/* 82240184h case  223:*/		if ( 1 ) { regs.LR = 0x82240188; return (uint32)regs.CTR; }
		/* 82240184h case  223:*/		return 0x82240188;
		  /* 82240188h */ case  224:  		/* lwz R11, <#[R28]> */
		/* 82240188h case  224:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82240188h case  224:*/		return 0x8224018C;
		  /* 8224018Ch */ case  225:  		/* mr R3, R28 */
		/* 8224018Ch case  225:*/		regs.R3 = regs.R28;
		/* 8224018Ch case  225:*/		return 0x82240190;
		  /* 82240190h */ case  226:  		/* li R6, 1 */
		/* 82240190h case  226:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82240190h case  226:*/		return 0x82240194;
		  /* 82240194h */ case  227:  		/* li R5, 3 */
		/* 82240194h case  227:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82240194h case  227:*/		return 0x82240198;
		  /* 82240198h */ case  228:  		/* li R4, 0 */
		/* 82240198h case  228:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82240198h case  228:*/		return 0x8224019C;
		  /* 8224019Ch */ case  229:  		/* lwz R11, <#[R11 + 84]> */
		/* 8224019Ch case  229:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 8224019Ch case  229:*/		return 0x822401A0;
		  /* 822401A0h */ case  230:  		/* mtspr CTR, R11 */
		/* 822401A0h case  230:*/		regs.CTR = regs.R11;
		/* 822401A0h case  230:*/		return 0x822401A4;
		  /* 822401A4h */ case  231:  		/* bcctrl 20, CR0_LT */
		/* 822401A4h case  231:*/		if ( 1 ) { regs.LR = 0x822401A8; return (uint32)regs.CTR; }
		/* 822401A4h case  231:*/		return 0x822401A8;
		  /* 822401A8h */ case  232:  		/* mr R3, R28 */
		/* 822401A8h case  232:*/		regs.R3 = regs.R28;
		/* 822401A8h case  232:*/		return 0x822401AC;
		  /* 822401ACh */ case  233:  		/* mr R5, R23 */
		/* 822401ACh case  233:*/		regs.R5 = regs.R23;
		/* 822401ACh case  233:*/		return 0x822401B0;
		  /* 822401B0h */ case  234:  		/* li R4, 1 */
		/* 822401B0h case  234:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822401B0h case  234:*/		return 0x822401B4;
		  /* 822401B4h */ case  235:  		/* bl -41572 */
		/* 822401B4h case  235:*/		regs.LR = 0x822401B8; return 0x82235F50;
		/* 822401B4h case  235:*/		return 0x822401B8;
		  /* 822401B8h */ case  236:  		/* lwz R11, <#[R28]> */
		/* 822401B8h case  236:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 822401B8h case  236:*/		return 0x822401BC;
		  /* 822401BCh */ case  237:  		/* mr R6, R20 */
		/* 822401BCh case  237:*/		regs.R6 = regs.R20;
		/* 822401BCh case  237:*/		return 0x822401C0;
		  /* 822401C0h */ case  238:  		/* mr R3, R28 */
		/* 822401C0h case  238:*/		regs.R3 = regs.R28;
		/* 822401C0h case  238:*/		return 0x822401C4;
		  /* 822401C4h */ case  239:  		/* li R5, 0 */
		/* 822401C4h case  239:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822401C4h case  239:*/		return 0x822401C8;
		  /* 822401C8h */ case  240:  		/* li R4, 1 */
		/* 822401C8h case  240:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822401C8h case  240:*/		return 0x822401CC;
		  /* 822401CCh */ case  241:  		/* lwz R11, <#[R11 + 88]> */
		/* 822401CCh case  241:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 822401CCh case  241:*/		return 0x822401D0;
		  /* 822401D0h */ case  242:  		/* mtspr CTR, R11 */
		/* 822401D0h case  242:*/		regs.CTR = regs.R11;
		/* 822401D0h case  242:*/		return 0x822401D4;
		  /* 822401D4h */ case  243:  		/* bcctrl 20, CR0_LT */
		/* 822401D4h case  243:*/		if ( 1 ) { regs.LR = 0x822401D8; return (uint32)regs.CTR; }
		/* 822401D4h case  243:*/		return 0x822401D8;
		  /* 822401D8h */ case  244:  		/* lwz R11, <#[R28]> */
		/* 822401D8h case  244:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 822401D8h case  244:*/		return 0x822401DC;
		  /* 822401DCh */ case  245:  		/* mr R6, R20 */
		/* 822401DCh case  245:*/		regs.R6 = regs.R20;
		/* 822401DCh case  245:*/		return 0x822401E0;
		  /* 822401E0h */ case  246:  		/* mr R3, R28 */
		/* 822401E0h case  246:*/		regs.R3 = regs.R28;
		/* 822401E0h case  246:*/		return 0x822401E4;
		  /* 822401E4h */ case  247:  		/* li R5, 1 */
		/* 822401E4h case  247:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 822401E4h case  247:*/		return 0x822401E8;
		  /* 822401E8h */ case  248:  		/* li R4, 1 */
		/* 822401E8h case  248:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822401E8h case  248:*/		return 0x822401EC;
		  /* 822401ECh */ case  249:  		/* lwz R11, <#[R11 + 88]> */
		/* 822401ECh case  249:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 822401ECh case  249:*/		return 0x822401F0;
		  /* 822401F0h */ case  250:  		/* mtspr CTR, R11 */
		/* 822401F0h case  250:*/		regs.CTR = regs.R11;
		/* 822401F0h case  250:*/		return 0x822401F4;
		  /* 822401F4h */ case  251:  		/* bcctrl 20, CR0_LT */
		/* 822401F4h case  251:*/		if ( 1 ) { regs.LR = 0x822401F8; return (uint32)regs.CTR; }
		/* 822401F4h case  251:*/		return 0x822401F8;
		  /* 822401F8h */ case  252:  		/* lwz R11, <#[R28]> */
		/* 822401F8h case  252:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 822401F8h case  252:*/		return 0x822401FC;
		  /* 822401FCh */ case  253:  		/* mr R6, R20 */
		/* 822401FCh case  253:*/		regs.R6 = regs.R20;
		/* 822401FCh case  253:*/		return 0x82240200;
		  /* 82240200h */ case  254:  		/* mr R3, R28 */
		/* 82240200h case  254:*/		regs.R3 = regs.R28;
		/* 82240200h case  254:*/		return 0x82240204;
		  /* 82240204h */ case  255:  		/* li R5, 2 */
		/* 82240204h case  255:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82240204h case  255:*/		return 0x82240208;
		  /* 82240208h */ case  256:  		/* li R4, 1 */
		/* 82240208h case  256:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82240208h case  256:*/		return 0x8224020C;
		  /* 8224020Ch */ case  257:  		/* lwz R11, <#[R11 + 88]> */
		/* 8224020Ch case  257:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8224020Ch case  257:*/		return 0x82240210;
		  /* 82240210h */ case  258:  		/* mtspr CTR, R11 */
		/* 82240210h case  258:*/		regs.CTR = regs.R11;
		/* 82240210h case  258:*/		return 0x82240214;
		  /* 82240214h */ case  259:  		/* bcctrl 20, CR0_LT */
		/* 82240214h case  259:*/		if ( 1 ) { regs.LR = 0x82240218; return (uint32)regs.CTR; }
		/* 82240214h case  259:*/		return 0x82240218;
		  /* 82240218h */ case  260:  		/* lwz R11, <#[R28]> */
		/* 82240218h case  260:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82240218h case  260:*/		return 0x8224021C;
		  /* 8224021Ch */ case  261:  		/* mr R3, R28 */
		/* 8224021Ch case  261:*/		regs.R3 = regs.R28;
		/* 8224021Ch case  261:*/		return 0x82240220;
		  /* 82240220h */ case  262:  		/* mr R6, R20 */
		/* 82240220h case  262:*/		regs.R6 = regs.R20;
		/* 82240220h case  262:*/		return 0x82240224;
		  /* 82240224h */ case  263:  		/* li R5, 3 */
		/* 82240224h case  263:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82240224h case  263:*/		return 0x82240228;
		  /* 82240228h */ case  264:  		/* li R4, 1 */
		/* 82240228h case  264:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82240228h case  264:*/		return 0x8224022C;
		  /* 8224022Ch */ case  265:  		/* lwz R11, <#[R11 + 88]> */
		/* 8224022Ch case  265:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8224022Ch case  265:*/		return 0x82240230;
		  /* 82240230h */ case  266:  		/* mtspr CTR, R11 */
		/* 82240230h case  266:*/		regs.CTR = regs.R11;
		/* 82240230h case  266:*/		return 0x82240234;
		  /* 82240234h */ case  267:  		/* bcctrl 20, CR0_LT */
		/* 82240234h case  267:*/		if ( 1 ) { regs.LR = 0x82240238; return (uint32)regs.CTR; }
		/* 82240234h case  267:*/		return 0x82240238;
		  /* 82240238h */ case  268:  		/* stb R19, <#[R28 + 159]> */
		/* 82240238h case  268:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R28 + 0x0000009F) );
		/* 82240238h case  268:*/		return 0x8224023C;
		  /* 8224023Ch */ case  269:  		/* mr R3, R28 */
		/* 8224023Ch case  269:*/		regs.R3 = regs.R28;
		/* 8224023Ch case  269:*/		return 0x82240240;
		  /* 82240240h */ case  270:  		/* stb R18, <#[R28 + 153]> */
		/* 82240240h case  270:*/		cpu::mem::store8( regs, regs.R18, (uint32)(regs.R28 + 0x00000099) );
		/* 82240240h case  270:*/		return 0x82240244;
		  /* 82240244h */ case  271:  		/* mr R5, R23 */
		/* 82240244h case  271:*/		regs.R5 = regs.R23;
		/* 82240244h case  271:*/		return 0x82240248;
		  /* 82240248h */ case  272:  		/* li R4, 2 */
		/* 82240248h case  272:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82240248h case  272:*/		return 0x8224024C;
		  /* 8224024Ch */ case  273:  		/* bl -41724 */
		/* 8224024Ch case  273:*/		regs.LR = 0x82240250; return 0x82235F50;
		/* 8224024Ch case  273:*/		return 0x82240250;
		  /* 82240250h */ case  274:  		/* lwz R11, <#[R28]> */
		/* 82240250h case  274:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82240250h case  274:*/		return 0x82240254;
		  /* 82240254h */ case  275:  		/* mr R6, R22 */
		/* 82240254h case  275:*/		regs.R6 = regs.R22;
		/* 82240254h case  275:*/		return 0x82240258;
		  /* 82240258h */ case  276:  		/* mr R3, R28 */
		/* 82240258h case  276:*/		regs.R3 = regs.R28;
		/* 82240258h case  276:*/		return 0x8224025C;
		  /* 8224025Ch */ case  277:  		/* li R5, 0 */
		/* 8224025Ch case  277:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8224025Ch case  277:*/		return 0x82240260;
		  /* 82240260h */ case  278:  		/* li R4, 2 */
		/* 82240260h case  278:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82240260h case  278:*/		return 0x82240264;
		  /* 82240264h */ case  279:  		/* lwz R11, <#[R11 + 88]> */
		/* 82240264h case  279:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82240264h case  279:*/		return 0x82240268;
		  /* 82240268h */ case  280:  		/* mtspr CTR, R11 */
		/* 82240268h case  280:*/		regs.CTR = regs.R11;
		/* 82240268h case  280:*/		return 0x8224026C;
		  /* 8224026Ch */ case  281:  		/* bcctrl 20, CR0_LT */
		/* 8224026Ch case  281:*/		if ( 1 ) { regs.LR = 0x82240270; return (uint32)regs.CTR; }
		/* 8224026Ch case  281:*/		return 0x82240270;
		  /* 82240270h */ case  282:  		/* lwz R11, <#[R28]> */
		/* 82240270h case  282:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82240270h case  282:*/		return 0x82240274;
		  /* 82240274h */ case  283:  		/* mr R6, R22 */
		/* 82240274h case  283:*/		regs.R6 = regs.R22;
		/* 82240274h case  283:*/		return 0x82240278;
		  /* 82240278h */ case  284:  		/* mr R3, R28 */
		/* 82240278h case  284:*/		regs.R3 = regs.R28;
		/* 82240278h case  284:*/		return 0x8224027C;
		  /* 8224027Ch */ case  285:  		/* li R5, 1 */
		/* 8224027Ch case  285:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8224027Ch case  285:*/		return 0x82240280;
		  /* 82240280h */ case  286:  		/* li R4, 2 */
		/* 82240280h case  286:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82240280h case  286:*/		return 0x82240284;
		  /* 82240284h */ case  287:  		/* lwz R11, <#[R11 + 88]> */
		/* 82240284h case  287:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82240284h case  287:*/		return 0x82240288;
		  /* 82240288h */ case  288:  		/* mtspr CTR, R11 */
		/* 82240288h case  288:*/		regs.CTR = regs.R11;
		/* 82240288h case  288:*/		return 0x8224028C;
		  /* 8224028Ch */ case  289:  		/* bcctrl 20, CR0_LT */
		/* 8224028Ch case  289:*/		if ( 1 ) { regs.LR = 0x82240290; return (uint32)regs.CTR; }
		/* 8224028Ch case  289:*/		return 0x82240290;
		  /* 82240290h */ case  290:  		/* lwz R11, <#[R28]> */
		/* 82240290h case  290:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82240290h case  290:*/		return 0x82240294;
		  /* 82240294h */ case  291:  		/* mr R6, R22 */
		/* 82240294h case  291:*/		regs.R6 = regs.R22;
		/* 82240294h case  291:*/		return 0x82240298;
		  /* 82240298h */ case  292:  		/* mr R3, R28 */
		/* 82240298h case  292:*/		regs.R3 = regs.R28;
		/* 82240298h case  292:*/		return 0x8224029C;
		  /* 8224029Ch */ case  293:  		/* li R5, 2 */
		/* 8224029Ch case  293:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8224029Ch case  293:*/		return 0x822402A0;
		  /* 822402A0h */ case  294:  		/* li R4, 2 */
		/* 822402A0h case  294:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 822402A0h case  294:*/		return 0x822402A4;
		  /* 822402A4h */ case  295:  		/* lwz R11, <#[R11 + 88]> */
		/* 822402A4h case  295:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 822402A4h case  295:*/		return 0x822402A8;
		  /* 822402A8h */ case  296:  		/* mtspr CTR, R11 */
		/* 822402A8h case  296:*/		regs.CTR = regs.R11;
		/* 822402A8h case  296:*/		return 0x822402AC;
		  /* 822402ACh */ case  297:  		/* bcctrl 20, CR0_LT */
		/* 822402ACh case  297:*/		if ( 1 ) { regs.LR = 0x822402B0; return (uint32)regs.CTR; }
		/* 822402ACh case  297:*/		return 0x822402B0;
		  /* 822402B0h */ case  298:  		/* lwz R11, <#[R28]> */
		/* 822402B0h case  298:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 822402B0h case  298:*/		return 0x822402B4;
		  /* 822402B4h */ case  299:  		/* mr R3, R28 */
		/* 822402B4h case  299:*/		regs.R3 = regs.R28;
		/* 822402B4h case  299:*/		return 0x822402B8;
		  /* 822402B8h */ case  300:  		/* mr R6, R22 */
		/* 822402B8h case  300:*/		regs.R6 = regs.R22;
		/* 822402B8h case  300:*/		return 0x822402BC;
		  /* 822402BCh */ case  301:  		/* li R5, 3 */
		/* 822402BCh case  301:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 822402BCh case  301:*/		return 0x822402C0;
		  /* 822402C0h */ case  302:  		/* li R4, 2 */
		/* 822402C0h case  302:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 822402C0h case  302:*/		return 0x822402C4;
		  /* 822402C4h */ case  303:  		/* lwz R11, <#[R11 + 88]> */
		/* 822402C4h case  303:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 822402C4h case  303:*/		return 0x822402C8;
		  /* 822402C8h */ case  304:  		/* mtspr CTR, R11 */
		/* 822402C8h case  304:*/		regs.CTR = regs.R11;
		/* 822402C8h case  304:*/		return 0x822402CC;
		  /* 822402CCh */ case  305:  		/* bcctrl 20, CR0_LT */
		/* 822402CCh case  305:*/		if ( 1 ) { regs.LR = 0x822402D0; return (uint32)regs.CTR; }
		/* 822402CCh case  305:*/		return 0x822402D0;
		  /* 822402D0h */ case  306:  		/* lwz R11, <#[R28 + 228]> */
		/* 822402D0h case  306:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x000000E4) );
		/* 822402D0h case  306:*/		return 0x822402D4;
		  /* 822402D4h */ case  307:  		/* mr R4, R31 */
		/* 822402D4h case  307:*/		regs.R4 = regs.R31;
		/* 822402D4h case  307:*/		return 0x822402D8;
		  /* 822402D8h */ case  308:  		/* stb R19, <#[R28 + 160]> */
		/* 822402D8h case  308:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R28 + 0x000000A0) );
		/* 822402D8h case  308:*/		return 0x822402DC;
		  /* 822402DCh */ case  309:  		/* mr R5, R28 */
		/* 822402DCh case  309:*/		regs.R5 = regs.R28;
		/* 822402DCh case  309:*/		return 0x822402E0;
		  /* 822402E0h */ case  310:  		/* rlwinm R11, R11, 0, 30, 28 */
		/* 822402E0h case  310:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R11,regs.R11);
		/* 822402E0h case  310:*/		return 0x822402E4;
		  /* 822402E4h */ case  311:  		/* stb R18, <#[R28 + 154]> */
		/* 822402E4h case  311:*/		cpu::mem::store8( regs, regs.R18, (uint32)(regs.R28 + 0x0000009A) );
		/* 822402E4h case  311:*/		return 0x822402E8;
		  /* 822402E8h */ case  312:  		/* stw R11, <#[R28 + 228]> */
		/* 822402E8h case  312:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x000000E4) );
		/* 822402E8h case  312:*/		return 0x822402EC;
		  /* 822402ECh */ case  313:  		/* lwz R3, <#[R31 + 948]> */
		/* 822402ECh case  313:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000003B4) );
		/* 822402ECh case  313:*/		return 0x822402F0;
		  /* 822402F0h */ case  314:  		/* bl 101680 */
		/* 822402F0h case  314:*/		regs.LR = 0x822402F4; return 0x82259020;
		/* 822402F0h case  314:*/		return 0x822402F4;
		  /* 822402F4h */ case  315:  		/* li R3, 23 */
		/* 822402F4h case  315:*/		cpu::op::li<0>(regs,&regs.R3,0x17);
		/* 822402F4h case  315:*/		return 0x822402F8;
		  /* 822402F8h */ case  316:  		/* lwz R4, <#[R30]> */
		/* 822402F8h case  316:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 822402F8h case  316:*/		return 0x822402FC;
		  /* 822402FCh */ case  317:  		/* bl 89140 */
		/* 822402FCh case  317:*/		regs.LR = 0x82240300; return 0x82255F30;
		/* 822402FCh case  317:*/		return 0x82240300;
		  /* 82240300h */ case  318:  		/* lwz R11, <#[R31 + 80]> */
		/* 82240300h case  318:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 82240300h case  318:*/		return 0x82240304;
		  /* 82240304h */ case  319:  		/* li R6, 1 */
		/* 82240304h case  319:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82240304h case  319:*/		return 0x82240308;
		  /* 82240308h */ case  320:  		/* stw R29, <#[R3 + 56]> */
		/* 82240308h case  320:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000038) );
		/* 82240308h case  320:*/		return 0x8224030C;
		  /* 8224030Ch */ case  321:  		/* li R5, 0 */
		/* 8224030Ch case  321:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8224030Ch case  321:*/		return 0x82240310;
		  /* 82240310h */ case  322:  		/* lwz R10, <#[R3]> */
		/* 82240310h case  322:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82240310h case  322:*/		return 0x82240314;
		  /* 82240314h */ case  323:  		/* li R4, 0 */
		/* 82240314h case  323:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82240314h case  323:*/		return 0x82240318;
		  /* 82240318h */ case  324:  		/* mr R28, R3 */
		/* 82240318h case  324:*/		regs.R28 = regs.R3;
		/* 82240318h case  324:*/		return 0x8224031C;
		  /* 8224031Ch */ case  325:  		/* stw R11, <#[R3 + 80]> */
		/* 8224031Ch case  325:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 8224031Ch case  325:*/		return 0x82240320;
		  /* 82240320h */ case  326:  		/* lwz R11, <#[R10 + 84]> */
		/* 82240320h case  326:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000054) );
		/* 82240320h case  326:*/		return 0x82240324;
		  /* 82240324h */ case  327:  		/* mtspr CTR, R11 */
		/* 82240324h case  327:*/		regs.CTR = regs.R11;
		/* 82240324h case  327:*/		return 0x82240328;
		  /* 82240328h */ case  328:  		/* bcctrl 20, CR0_LT */
		/* 82240328h case  328:*/		if ( 1 ) { regs.LR = 0x8224032C; return (uint32)regs.CTR; }
		/* 82240328h case  328:*/		return 0x8224032C;
		  /* 8224032Ch */ case  329:  		/* mr R3, R28 */
		/* 8224032Ch case  329:*/		regs.R3 = regs.R28;
		/* 8224032Ch case  329:*/		return 0x82240330;
		  /* 82240330h */ case  330:  		/* mr R6, R27 */
		/* 82240330h case  330:*/		regs.R6 = regs.R27;
		/* 82240330h case  330:*/		return 0x82240334;
		  /* 82240334h */ case  331:  		/* li R5, 1 */
		/* 82240334h case  331:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82240334h case  331:*/		return 0x82240338;
		  /* 82240338h */ case  332:  		/* lwz R11, <#[R28]> */
		/* 82240338h case  332:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82240338h case  332:*/		return 0x8224033C;
		  /* 8224033Ch */ case  333:  		/* li R4, 0 */
		/* 8224033Ch case  333:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8224033Ch case  333:*/		return 0x82240340;
		  /* 82240340h */ case  334:  		/* lwz R11, <#[R11 + 84]> */
		/* 82240340h case  334:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82240340h case  334:*/		return 0x82240344;
		  /* 82240344h */ case  335:  		/* mtspr CTR, R11 */
		/* 82240344h case  335:*/		regs.CTR = regs.R11;
		/* 82240344h case  335:*/		return 0x82240348;
		  /* 82240348h */ case  336:  		/* bcctrl 20, CR0_LT */
		/* 82240348h case  336:*/		if ( 1 ) { regs.LR = 0x8224034C; return (uint32)regs.CTR; }
		/* 82240348h case  336:*/		return 0x8224034C;
		  /* 8224034Ch */ case  337:  		/* lwz R11, <#[R28]> */
		/* 8224034Ch case  337:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8224034Ch case  337:*/		return 0x82240350;
		  /* 82240350h */ case  338:  		/* mr R3, R28 */
		/* 82240350h case  338:*/		regs.R3 = regs.R28;
		/* 82240350h case  338:*/		return 0x82240354;
		  /* 82240354h */ case  339:  		/* li R6, 1 */
		/* 82240354h case  339:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82240354h case  339:*/		return 0x82240358;
		  /* 82240358h */ case  340:  		/* li R5, 2 */
		/* 82240358h case  340:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82240358h case  340:*/		return 0x8224035C;
		  /* 8224035Ch */ case  341:  		/* li R4, 0 */
		/* 8224035Ch case  341:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8224035Ch case  341:*/		return 0x82240360;
		  /* 82240360h */ case  342:  		/* lwz R11, <#[R11 + 84]> */
		/* 82240360h case  342:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82240360h case  342:*/		return 0x82240364;
		  /* 82240364h */ case  343:  		/* mtspr CTR, R11 */
		/* 82240364h case  343:*/		regs.CTR = regs.R11;
		/* 82240364h case  343:*/		return 0x82240368;
		  /* 82240368h */ case  344:  		/* bcctrl 20, CR0_LT */
		/* 82240368h case  344:*/		if ( 1 ) { regs.LR = 0x8224036C; return (uint32)regs.CTR; }
		/* 82240368h case  344:*/		return 0x8224036C;
		  /* 8224036Ch */ case  345:  		/* lwz R11, <#[R28]> */
		/* 8224036Ch case  345:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8224036Ch case  345:*/		return 0x82240370;
		  /* 82240370h */ case  346:  		/* mr R3, R28 */
		/* 82240370h case  346:*/		regs.R3 = regs.R28;
		/* 82240370h case  346:*/		return 0x82240374;
		  /* 82240374h */ case  347:  		/* li R6, 1 */
		/* 82240374h case  347:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82240374h case  347:*/		return 0x82240378;
		  /* 82240378h */ case  348:  		/* li R5, 3 */
		/* 82240378h case  348:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82240378h case  348:*/		return 0x8224037C;
		  /* 8224037Ch */ case  349:  		/* li R4, 0 */
		/* 8224037Ch case  349:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8224037Ch case  349:*/		return 0x82240380;
		  /* 82240380h */ case  350:  		/* lwz R11, <#[R11 + 84]> */
		/* 82240380h case  350:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82240380h case  350:*/		return 0x82240384;
		  /* 82240384h */ case  351:  		/* mtspr CTR, R11 */
		/* 82240384h case  351:*/		regs.CTR = regs.R11;
		/* 82240384h case  351:*/		return 0x82240388;
		  /* 82240388h */ case  352:  		/* bcctrl 20, CR0_LT */
		/* 82240388h case  352:*/		if ( 1 ) { regs.LR = 0x8224038C; return (uint32)regs.CTR; }
		/* 82240388h case  352:*/		return 0x8224038C;
		  /* 8224038Ch */ case  353:  		/* stb R24, <#[R28 + 164]> */
		/* 8224038Ch case  353:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R28 + 0x000000A4) );
		/* 8224038Ch case  353:*/		return 0x82240390;
		  /* 82240390h */ case  354:  		/* mr R3, R28 */
		/* 82240390h case  354:*/		regs.R3 = regs.R28;
		/* 82240390h case  354:*/		return 0x82240394;
		  /* 82240394h */ case  355:  		/* mr R5, R23 */
		/* 82240394h case  355:*/		regs.R5 = regs.R23;
		/* 82240394h case  355:*/		return 0x82240398;
		  /* 82240398h */ case  356:  		/* li R4, 1 */
		/* 82240398h case  356:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82240398h case  356:*/		return 0x8224039C;
		  /* 8224039Ch */ case  357:  		/* bl -42060 */
		/* 8224039Ch case  357:*/		regs.LR = 0x822403A0; return 0x82235F50;
		/* 8224039Ch case  357:*/		return 0x822403A0;
		  /* 822403A0h */ case  358:  		/* lwz R11, <#[R28]> */
		/* 822403A0h case  358:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 822403A0h case  358:*/		return 0x822403A4;
		  /* 822403A4h */ case  359:  		/* mr R6, R22 */
		/* 822403A4h case  359:*/		regs.R6 = regs.R22;
		/* 822403A4h case  359:*/		return 0x822403A8;
		  /* 822403A8h */ case  360:  		/* mr R3, R28 */
		/* 822403A8h case  360:*/		regs.R3 = regs.R28;
		/* 822403A8h case  360:*/		return 0x822403AC;
		  /* 822403ACh */ case  361:  		/* li R5, 0 */
		/* 822403ACh case  361:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822403ACh case  361:*/		return 0x822403B0;
		  /* 822403B0h */ case  362:  		/* li R4, 1 */
		/* 822403B0h case  362:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822403B0h case  362:*/		return 0x822403B4;
		  /* 822403B4h */ case  363:  		/* lwz R11, <#[R11 + 88]> */
		/* 822403B4h case  363:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 822403B4h case  363:*/		return 0x822403B8;
		  /* 822403B8h */ case  364:  		/* mtspr CTR, R11 */
		/* 822403B8h case  364:*/		regs.CTR = regs.R11;
		/* 822403B8h case  364:*/		return 0x822403BC;
		  /* 822403BCh */ case  365:  		/* bcctrl 20, CR0_LT */
		/* 822403BCh case  365:*/		if ( 1 ) { regs.LR = 0x822403C0; return (uint32)regs.CTR; }
		/* 822403BCh case  365:*/		return 0x822403C0;
		  /* 822403C0h */ case  366:  		/* lwz R11, <#[R28]> */
		/* 822403C0h case  366:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 822403C0h case  366:*/		return 0x822403C4;
		  /* 822403C4h */ case  367:  		/* mr R6, R22 */
		/* 822403C4h case  367:*/		regs.R6 = regs.R22;
		/* 822403C4h case  367:*/		return 0x822403C8;
		  /* 822403C8h */ case  368:  		/* mr R3, R28 */
		/* 822403C8h case  368:*/		regs.R3 = regs.R28;
		/* 822403C8h case  368:*/		return 0x822403CC;
		  /* 822403CCh */ case  369:  		/* li R5, 1 */
		/* 822403CCh case  369:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 822403CCh case  369:*/		return 0x822403D0;
		  /* 822403D0h */ case  370:  		/* li R4, 1 */
		/* 822403D0h case  370:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822403D0h case  370:*/		return 0x822403D4;
		  /* 822403D4h */ case  371:  		/* lwz R11, <#[R11 + 88]> */
		/* 822403D4h case  371:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 822403D4h case  371:*/		return 0x822403D8;
		  /* 822403D8h */ case  372:  		/* mtspr CTR, R11 */
		/* 822403D8h case  372:*/		regs.CTR = regs.R11;
		/* 822403D8h case  372:*/		return 0x822403DC;
		  /* 822403DCh */ case  373:  		/* bcctrl 20, CR0_LT */
		/* 822403DCh case  373:*/		if ( 1 ) { regs.LR = 0x822403E0; return (uint32)regs.CTR; }
		/* 822403DCh case  373:*/		return 0x822403E0;
		  /* 822403E0h */ case  374:  		/* lwz R11, <#[R28]> */
		/* 822403E0h case  374:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 822403E0h case  374:*/		return 0x822403E4;
		  /* 822403E4h */ case  375:  		/* mr R6, R22 */
		/* 822403E4h case  375:*/		regs.R6 = regs.R22;
		/* 822403E4h case  375:*/		return 0x822403E8;
		  /* 822403E8h */ case  376:  		/* mr R3, R28 */
		/* 822403E8h case  376:*/		regs.R3 = regs.R28;
		/* 822403E8h case  376:*/		return 0x822403EC;
		  /* 822403ECh */ case  377:  		/* li R5, 2 */
		/* 822403ECh case  377:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 822403ECh case  377:*/		return 0x822403F0;
		  /* 822403F0h */ case  378:  		/* li R4, 1 */
		/* 822403F0h case  378:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822403F0h case  378:*/		return 0x822403F4;
		  /* 822403F4h */ case  379:  		/* lwz R11, <#[R11 + 88]> */
		/* 822403F4h case  379:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 822403F4h case  379:*/		return 0x822403F8;
		  /* 822403F8h */ case  380:  		/* mtspr CTR, R11 */
		/* 822403F8h case  380:*/		regs.CTR = regs.R11;
		/* 822403F8h case  380:*/		return 0x822403FC;
		  /* 822403FCh */ case  381:  		/* bcctrl 20, CR0_LT */
		/* 822403FCh case  381:*/		if ( 1 ) { regs.LR = 0x82240400; return (uint32)regs.CTR; }
		/* 822403FCh case  381:*/		return 0x82240400;
		  /* 82240400h */ case  382:  		/* lwz R11, <#[R28]> */
		/* 82240400h case  382:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82240400h case  382:*/		return 0x82240404;
		  /* 82240404h */ case  383:  		/* mr R3, R28 */
		/* 82240404h case  383:*/		regs.R3 = regs.R28;
		/* 82240404h case  383:*/		return 0x82240408;
		  /* 82240408h */ case  384:  		/* mr R6, R22 */
		/* 82240408h case  384:*/		regs.R6 = regs.R22;
		/* 82240408h case  384:*/		return 0x8224040C;
		  /* 8224040Ch */ case  385:  		/* li R5, 3 */
		/* 8224040Ch case  385:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8224040Ch case  385:*/		return 0x82240410;
		  /* 82240410h */ case  386:  		/* li R4, 1 */
		/* 82240410h case  386:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82240410h case  386:*/		return 0x82240414;
		  /* 82240414h */ case  387:  		/* lwz R11, <#[R11 + 88]> */
		/* 82240414h case  387:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 82240414h case  387:*/		return 0x82240418;
		  /* 82240418h */ case  388:  		/* mtspr CTR, R11 */
		/* 82240418h case  388:*/		regs.CTR = regs.R11;
		/* 82240418h case  388:*/		return 0x8224041C;
		  /* 8224041Ch */ case  389:  		/* bcctrl 20, CR0_LT */
		/* 8224041Ch case  389:*/		if ( 1 ) { regs.LR = 0x82240420; return (uint32)regs.CTR; }
		/* 8224041Ch case  389:*/		return 0x82240420;
		  /* 82240420h */ case  390:  		/* stb R19, <#[R28 + 159]> */
		/* 82240420h case  390:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R28 + 0x0000009F) );
		/* 82240420h case  390:*/		return 0x82240424;
		  /* 82240424h */ case  391:  		/* mr R3, R28 */
		/* 82240424h case  391:*/		regs.R3 = regs.R28;
		/* 82240424h case  391:*/		return 0x82240428;
		  /* 82240428h */ case  392:  		/* stb R18, <#[R28 + 153]> */
		/* 82240428h case  392:*/		cpu::mem::store8( regs, regs.R18, (uint32)(regs.R28 + 0x00000099) );
		/* 82240428h case  392:*/		return 0x8224042C;
		  /* 8224042Ch */ case  393:  		/* mr R5, R21 */
		/* 8224042Ch case  393:*/		regs.R5 = regs.R21;
		/* 8224042Ch case  393:*/		return 0x82240430;
		  /* 82240430h */ case  394:  		/* li R4, 2 */
		/* 82240430h case  394:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82240430h case  394:*/		return 0x82240434;
		  /* 82240434h */ case  395:  		/* bl -42212 */
		/* 82240434h case  395:*/		regs.LR = 0x82240438; return 0x82235F50;
		/* 82240434h case  395:*/		return 0x82240438;
		  /* 82240438h */ case  396:  		/* lis R27, -32252 */
		/* 82240438h case  396:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8204);
		/* 82240438h case  396:*/		return 0x8224043C;
		  /* 8224043Ch */ case  397:  		/* mr R4, R31 */
		/* 8224043Ch case  397:*/		regs.R4 = regs.R31;
		/* 8224043Ch case  397:*/		return 0x82240440;
		  /* 82240440h */ case  398:  		/* addi R11, R27, 9932 */
		/* 82240440h case  398:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x26CC);
		/* 82240440h case  398:*/		return 0x82240444;
		  /* 82240444h */ case  399:  		/* mr R5, R28 */
		/* 82240444h case  399:*/		regs.R5 = regs.R28;
		/* 82240444h case  399:*/		return 0x82240448;
		  /* 82240448h */ case  400:  		/* lwz R11, <#[R11 - 4]> */
		/* 82240448h case  400:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 82240448h case  400:*/		return 0x8224044C;
		  /* 8224044Ch */ case  401:  		/* stw R11, <#[R28 + 136]> */
		/* 8224044Ch case  401:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000088) );
		/* 8224044Ch case  401:*/		return 0x82240450;
		  /* 82240450h */ case  402:  		/* lwz R11, <#[R28 + 228]> */
		/* 82240450h case  402:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x000000E4) );
		/* 82240450h case  402:*/		return 0x82240454;
		  /* 82240454h */ case  403:  		/* ori R11, R11, 4 */
		/* 82240454h case  403:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82240454h case  403:*/		return 0x82240458;
		  /* 82240458h */ case  404:  		/* stw R11, <#[R28 + 228]> */
		/* 82240458h case  404:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x000000E4) );
		/* 82240458h case  404:*/		return 0x8224045C;
		  /* 8224045Ch */ case  405:  		/* lwz R3, <#[R31 + 948]> */
		/* 8224045Ch case  405:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000003B4) );
		/* 8224045Ch case  405:*/		return 0x82240460;
		  /* 82240460h */ case  406:  		/* bl 101312 */
		/* 82240460h case  406:*/		regs.LR = 0x82240464; return 0x82259020;
		/* 82240460h case  406:*/		return 0x82240464;
		  /* 82240464h */ case  407:  		/* li R3, 55 */
		/* 82240464h case  407:*/		cpu::op::li<0>(regs,&regs.R3,0x37);
		/* 82240464h case  407:*/		return 0x82240468;
		  /* 82240468h */ case  408:  		/* lwz R4, <#[R30]> */
		/* 82240468h case  408:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82240468h case  408:*/		return 0x8224046C;
		  /* 8224046Ch */ case  409:  		/* bl 88772 */
		/* 8224046Ch case  409:*/		regs.LR = 0x82240470; return 0x82255F30;
		/* 8224046Ch case  409:*/		return 0x82240470;
		  /* 82240470h */ case  410:  		/* lwz R11, <#[R31 + 80]> */
		/* 82240470h case  410:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 82240470h case  410:*/		return 0x82240474;
		  /* 82240474h */ case  411:  		/* mr R30, R3 */
		/* 82240474h case  411:*/		regs.R30 = regs.R3;
		/* 82240474h case  411:*/		return 0x82240478;
		  /* 82240478h */ case  412:  		/* li R6, 1 */
		/* 82240478h case  412:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82240478h case  412:*/		return 0x8224047C;
		  /* 8224047Ch */ case  413:  		/* stw R11, <#[R3 + 80]> */
		/* 8224047Ch case  413:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 8224047Ch case  413:*/		return 0x82240480;
		  /* 82240480h */ case  414:  		/* li R5, 0 */
		/* 82240480h case  414:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82240480h case  414:*/		return 0x82240484;
		  /* 82240484h */ case  415:  		/* stw R29, <#[R3 + 56]> */
		/* 82240484h case  415:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000038) );
		/* 82240484h case  415:*/		return 0x82240488;
		  /* 82240488h */ case  416:  		/* li R4, 0 */
		/* 82240488h case  416:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82240488h case  416:*/		return 0x8224048C;
		  /* 8224048Ch */ case  417:  		/* lwz R11, <#[R3]> */
		/* 8224048Ch case  417:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8224048Ch case  417:*/		return 0x82240490;
		  /* 82240490h */ case  418:  		/* lwz R11, <#[R11 + 84]> */
		/* 82240490h case  418:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 82240490h case  418:*/		return 0x82240494;
		  /* 82240494h */ case  419:  		/* mtspr CTR, R11 */
		/* 82240494h case  419:*/		regs.CTR = regs.R11;
		/* 82240494h case  419:*/		return 0x82240498;
		  /* 82240498h */ case  420:  		/* bcctrl 20, CR0_LT */
		/* 82240498h case  420:*/		if ( 1 ) { regs.LR = 0x8224049C; return (uint32)regs.CTR; }
		/* 82240498h case  420:*/		return 0x8224049C;
		  /* 8224049Ch */ case  421:  		/* lwz R11, <#[R30]> */
		/* 8224049Ch case  421:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8224049Ch case  421:*/		return 0x822404A0;
		  /* 822404A0h */ case  422:  		/* mr R3, R30 */
		/* 822404A0h case  422:*/		regs.R3 = regs.R30;
		/* 822404A0h case  422:*/		return 0x822404A4;
		  /* 822404A4h */ case  423:  		/* li R6, 1 */
		/* 822404A4h case  423:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822404A4h case  423:*/		return 0x822404A8;
		  /* 822404A8h */ case  424:  		/* li R5, 1 */
		/* 822404A8h case  424:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 822404A8h case  424:*/		return 0x822404AC;
		  /* 822404ACh */ case  425:  		/* li R4, 0 */
		/* 822404ACh case  425:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822404ACh case  425:*/		return 0x822404B0;
		  /* 822404B0h */ case  426:  		/* lwz R11, <#[R11 + 84]> */
		/* 822404B0h case  426:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 822404B0h case  426:*/		return 0x822404B4;
		  /* 822404B4h */ case  427:  		/* mtspr CTR, R11 */
		/* 822404B4h case  427:*/		regs.CTR = regs.R11;
		/* 822404B4h case  427:*/		return 0x822404B8;
		  /* 822404B8h */ case  428:  		/* bcctrl 20, CR0_LT */
		/* 822404B8h case  428:*/		if ( 1 ) { regs.LR = 0x822404BC; return (uint32)regs.CTR; }
		/* 822404B8h case  428:*/		return 0x822404BC;
		  /* 822404BCh */ case  429:  		/* lwz R11, <#[R30]> */
		/* 822404BCh case  429:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822404BCh case  429:*/		return 0x822404C0;
		  /* 822404C0h */ case  430:  		/* mr R3, R30 */
		/* 822404C0h case  430:*/		regs.R3 = regs.R30;
		/* 822404C0h case  430:*/		return 0x822404C4;
		  /* 822404C4h */ case  431:  		/* mr R6, R26 */
		/* 822404C4h case  431:*/		regs.R6 = regs.R26;
		/* 822404C4h case  431:*/		return 0x822404C8;
		  /* 822404C8h */ case  432:  		/* li R5, 2 */
		/* 822404C8h case  432:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 822404C8h case  432:*/		return 0x822404CC;
		  /* 822404CCh */ case  433:  		/* li R4, 0 */
		/* 822404CCh case  433:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822404CCh case  433:*/		return 0x822404D0;
		  /* 822404D0h */ case  434:  		/* lwz R11, <#[R11 + 84]> */
		/* 822404D0h case  434:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 822404D0h case  434:*/		return 0x822404D4;
		  /* 822404D4h */ case  435:  		/* mtspr CTR, R11 */
		/* 822404D4h case  435:*/		regs.CTR = regs.R11;
		/* 822404D4h case  435:*/		return 0x822404D8;
		  /* 822404D8h */ case  436:  		/* bcctrl 20, CR0_LT */
		/* 822404D8h case  436:*/		if ( 1 ) { regs.LR = 0x822404DC; return (uint32)regs.CTR; }
		/* 822404D8h case  436:*/		return 0x822404DC;
		  /* 822404DCh */ case  437:  		/* lwz R11, <#[R30]> */
		/* 822404DCh case  437:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822404DCh case  437:*/		return 0x822404E0;
		  /* 822404E0h */ case  438:  		/* mr R3, R30 */
		/* 822404E0h case  438:*/		regs.R3 = regs.R30;
		/* 822404E0h case  438:*/		return 0x822404E4;
		  /* 822404E4h */ case  439:  		/* li R6, 1 */
		/* 822404E4h case  439:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822404E4h case  439:*/		return 0x822404E8;
		  /* 822404E8h */ case  440:  		/* li R5, 3 */
		/* 822404E8h case  440:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 822404E8h case  440:*/		return 0x822404EC;
		  /* 822404ECh */ case  441:  		/* li R4, 0 */
		/* 822404ECh case  441:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822404ECh case  441:*/		return 0x822404F0;
		  /* 822404F0h */ case  442:  		/* lwz R11, <#[R11 + 84]> */
		/* 822404F0h case  442:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 822404F0h case  442:*/		return 0x822404F4;
		  /* 822404F4h */ case  443:  		/* mtspr CTR, R11 */
		/* 822404F4h case  443:*/		regs.CTR = regs.R11;
		/* 822404F4h case  443:*/		return 0x822404F8;
		  /* 822404F8h */ case  444:  		/* bcctrl 20, CR0_LT */
		/* 822404F8h case  444:*/		if ( 1 ) { regs.LR = 0x822404FC; return (uint32)regs.CTR; }
		/* 822404F8h case  444:*/		return 0x822404FC;
		  /* 822404FCh */ case  445:  		/* stb R24, <#[R30 + 164]> */
		/* 822404FCh case  445:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R30 + 0x000000A4) );
		/* 822404FCh case  445:*/		return 0x82240500;
		  /* 82240500h */ case  446:  		/* mr R3, R30 */
		/* 82240500h case  446:*/		regs.R3 = regs.R30;
		/* 82240500h case  446:*/		return 0x82240504;
		  /* 82240504h */ case  447:  		/* mr R5, R16 */
		/* 82240504h case  447:*/		regs.R5 = regs.R16;
		/* 82240504h case  447:*/		return 0x82240508;
		  /* 82240508h */ case  448:  		/* li R4, 1 */
		/* 82240508h case  448:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82240508h case  448:*/		return 0x8224050C;
		  /* 8224050Ch */ case  449:  		/* bl -42428 */
		/* 8224050Ch case  449:*/		regs.LR = 0x82240510; return 0x82235F50;
		/* 8224050Ch case  449:*/		return 0x82240510;
		  /* 82240510h */ case  450:  		/* lwz R11, <#[R27 + 9932]> */
		/* 82240510h case  450:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000026CC) );
		/* 82240510h case  450:*/		return 0x82240514;
		  /* 82240514h */ case  451:  		/* mr R4, R31 */
		/* 82240514h case  451:*/		regs.R4 = regs.R31;
		/* 82240514h case  451:*/		return 0x82240518;
		  /* 82240518h */ case  452:  		/* mr R5, R30 */
		/* 82240518h case  452:*/		regs.R5 = regs.R30;
		/* 82240518h case  452:*/		return 0x8224051C;
		  /* 8224051Ch */ case  453:  		/* stw R11, <#[R30 + 132]> */
		/* 8224051Ch case  453:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000084) );
		/* 8224051Ch case  453:*/		return 0x82240520;
		  /* 82240520h */ case  454:  		/* lwz R11, <#[R30 + 228]> */
		/* 82240520h case  454:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000E4) );
		/* 82240520h case  454:*/		return 0x82240524;
		  /* 82240524h */ case  455:  		/* rlwinm R11, R11, 0, 30, 28 */
		/* 82240524h case  455:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R11,regs.R11);
		/* 82240524h case  455:*/		return 0x82240528;
		  /* 82240528h */ case  456:  		/* stw R11, <#[R30 + 228]> */
		/* 82240528h case  456:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000000E4) );
		/* 82240528h case  456:*/		return 0x8224052C;
		  /* 8224052Ch */ case  457:  		/* lwz R3, <#[R31 + 948]> */
		/* 8224052Ch case  457:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000003B4) );
		/* 8224052Ch case  457:*/		return 0x82240530;
		  /* 82240530h */ case  458:  		/* bl 101104 */
		/* 82240530h case  458:*/		regs.LR = 0x82240534; return 0x82259020;
		/* 82240530h case  458:*/		return 0x82240534;
		  /* 82240534h */ case  459:  		/* mr R3, R31 */
		/* 82240534h case  459:*/		regs.R3 = regs.R31;
		/* 82240534h case  459:*/		return 0x82240538;
		  /* 82240538h */ case  460:  		/* bl 78544 */
		/* 82240538h case  460:*/		regs.LR = 0x8224053C; return 0x82253808;
		/* 82240538h case  460:*/		return 0x8224053C;
		  /* 8224053Ch */ case  461:  		/* mr R3, R17 */
		/* 8224053Ch case  461:*/		regs.R3 = regs.R17;
		/* 8224053Ch case  461:*/		return 0x82240540;
		  /* 82240540h */ case  462:  		/* addi R1, R1, 224 */
		/* 82240540h case  462:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 82240540h case  462:*/		return 0x82240544;
		  /* 82240544h */ case  463:  		/* b -1766092 */
		/* 82240544h case  463:*/		return 0x82091278;
		/* 82240544h case  463:*/		return 0x82240548;
	}
	return 0x82240548;
} // Block from 8223FE08h-82240548h (464 instructions)

//////////////////////////////////////////////////////
// Block at 82240548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240548);
		  /* 82240548h */ case    0:  		/* mfspr R12, LR */
		/* 82240548h case    0:*/		regs.R12 = regs.LR;
		/* 82240548h case    0:*/		return 0x8224054C;
		  /* 8224054Ch */ case    1:  		/* bl -1766128 */
		/* 8224054Ch case    1:*/		regs.LR = 0x82240550; return 0x8209125C;
		/* 8224054Ch case    1:*/		return 0x82240550;
		  /* 82240550h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82240550h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82240550h case    2:*/		return 0x82240554;
		  /* 82240554h */ case    3:  		/* addi R11, R4, 58 */
		/* 82240554h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x3A);
		/* 82240554h case    3:*/		return 0x82240558;
		  /* 82240558h */ case    4:  		/* mr R30, R3 */
		/* 82240558h case    4:*/		regs.R30 = regs.R3;
		/* 82240558h case    4:*/		return 0x8224055C;
		  /* 8224055Ch */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8224055Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8224055Ch case    5:*/		return 0x82240560;
		  /* 82240560h */ case    6:  		/* mr R29, R4 */
		/* 82240560h case    6:*/		regs.R29 = regs.R4;
		/* 82240560h case    6:*/		return 0x82240564;
		  /* 82240564h */ case    7:  		/* lwzx R31, <#[R11 + R3]> */
		/* 82240564h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82240564h case    7:*/		return 0x82240568;
	}
	return 0x82240568;
} // Block from 82240548h-82240568h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82240568h
// Function '??0Assembler@XGRAPHICS@@QAA@PAVCFG@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240568);
		  /* 82240568h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82240568h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82240568h case    0:*/		return 0x8224056C;
		  /* 8224056Ch */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 8224056Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82240594;  }
		/* 8224056Ch case    1:*/		return 0x82240570;
		  /* 82240570h */ case    2:  		/* lis R11, -32252 */
		/* 82240570h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82240570h case    2:*/		return 0x82240574;
		  /* 82240574h */ case    3:  		/* lis R10, -32252 */
		/* 82240574h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82240574h case    3:*/		return 0x82240578;
		  /* 82240578h */ case    4:  		/* lis R9, -32253 */
		/* 82240578h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82240578h case    4:*/		return 0x8224057C;
		  /* 8224057Ch */ case    5:  		/* addi R6, R11, 10344 */
		/* 8224057Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2868);
		/* 8224057Ch case    5:*/		return 0x82240580;
		  /* 82240580h */ case    6:  		/* addi R5, R10, 10672 */
		/* 82240580h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x29B0);
		/* 82240580h case    6:*/		return 0x82240584;
		  /* 82240584h */ case    7:  		/* addi R4, R9, 27460 */
		/* 82240584h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82240584h case    7:*/		return 0x82240588;
		  /* 82240588h */ case    8:  		/* li R7, 2151 */
		/* 82240588h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x867);
		/* 82240588h case    8:*/		return 0x8224058C;
		  /* 8224058Ch */ case    9:  		/* li R3, 0 */
		/* 8224058Ch case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8224058Ch case    9:*/		return 0x82240590;
		  /* 82240590h */ case   10:  		/* bl -952712 */
		/* 82240590h case   10:*/		regs.LR = 0x82240594; return 0x82157C08;
		/* 82240590h case   10:*/		return 0x82240594;
	}
	return 0x82240594;
} // Block from 82240568h-82240594h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82240594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240594);
		  /* 82240594h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82240594h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240594h case    0:*/		return 0x82240598;
		  /* 82240598h */ case    1:  		/* mr R3, R31 */
		/* 82240598h case    1:*/		regs.R3 = regs.R31;
		/* 82240598h case    1:*/		return 0x8224059C;
		  /* 8224059Ch */ case    2:  		/* lwz R11, <#[R11 + 64]> */
		/* 8224059Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000040) );
		/* 8224059Ch case    2:*/		return 0x822405A0;
		  /* 822405A0h */ case    3:  		/* mtspr CTR, R11 */
		/* 822405A0h case    3:*/		regs.CTR = regs.R11;
		/* 822405A0h case    3:*/		return 0x822405A4;
		  /* 822405A4h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 822405A4h case    4:*/		if ( 1 ) { regs.LR = 0x822405A8; return (uint32)regs.CTR; }
		/* 822405A4h case    4:*/		return 0x822405A8;
		  /* 822405A8h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 822405A8h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 822405A8h case    5:*/		return 0x822405AC;
		  /* 822405ACh */ case    6:  		/* bc 12, CR0_EQ, 92 */
		/* 822405ACh case    6:*/		if ( regs.CR[0].eq ) { return 0x82240608;  }
		/* 822405ACh case    6:*/		return 0x822405B0;
		  /* 822405B0h */ case    7:  		/* lwz R11, <#[R31 + 80]> */
		/* 822405B0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 822405B0h case    7:*/		return 0x822405B4;
		  /* 822405B4h */ case    8:  		/* cmpwi CR6, R11, 11 */
		/* 822405B4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 822405B4h case    8:*/		return 0x822405B8;
		  /* 822405B8h */ case    9:  		/* bc 4, CR6_EQ, 80 */
		/* 822405B8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82240608;  }
		/* 822405B8h case    9:*/		return 0x822405BC;
		  /* 822405BCh */ case   10:  		/* addi R11, R29, 32 */
		/* 822405BCh case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x20);
		/* 822405BCh case   10:*/		return 0x822405C0;
		  /* 822405C0h */ case   11:  		/* lwz R8, <#[R31 + 944]> */
		/* 822405C0h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x000003B0) );
		/* 822405C0h case   11:*/		return 0x822405C4;
		  /* 822405C4h */ case   12:  		/* li R10, 4 */
		/* 822405C4h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 822405C4h case   12:*/		return 0x822405C8;
		  /* 822405C8h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 822405C8h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 822405C8h case   13:*/		return 0x822405CC;
		  /* 822405CCh */ case   14:  		/* li R9, 0 */
		/* 822405CCh case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 822405CCh case   14:*/		return 0x822405D0;
		  /* 822405D0h */ case   15:  		/* stw R8, <#[R1 + 84]> */
		/* 822405D0h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 822405D0h case   15:*/		return 0x822405D4;
		  /* 822405D4h */ case   16:  		/* mtspr CTR, R10 */
		/* 822405D4h case   16:*/		regs.CTR = regs.R10;
		/* 822405D4h case   16:*/		return 0x822405D8;
		  /* 822405D8h */ case   17:  		/* lwzx R10, <#[R11 + R30]> */
		/* 822405D8h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 822405D8h case   17:*/		return 0x822405DC;
		  /* 822405DCh */ case   18:  		/* stw R10, <#[R1 + 80]> */
		/* 822405DCh case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 822405DCh case   18:*/		return 0x822405E0;
		  /* 822405E0h */ case   19:  		/* addi R10, R1, 80 */
		/* 822405E0h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 822405E0h case   19:*/		return 0x822405E4;
		  /* 822405E4h */ case   20:  		/* addi R8, R1, 84 */
		/* 822405E4h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 822405E4h case   20:*/		return 0x822405E8;
		  /* 822405E8h */ case   21:  		/* addi R7, R1, 88 */
		/* 822405E8h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 822405E8h case   21:*/		return 0x822405EC;
		  /* 822405ECh */ case   22:  		/* lbzx R10, <#[R9 + R10]> */
		/* 822405ECh case   22:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 822405ECh case   22:*/		return 0x822405F0;
		  /* 822405F0h */ case   23:  		/* lbzx R10, <#[R10 + R8]> */
		/* 822405F0h case   23:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 822405F0h case   23:*/		return 0x822405F4;
		  /* 822405F4h */ case   24:  		/* stbx R10, <#[R9 + R7]> */
		/* 822405F4h case   24:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 822405F4h case   24:*/		return 0x822405F8;
		  /* 822405F8h */ case   25:  		/* addi R9, R9, 1 */
		/* 822405F8h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 822405F8h case   25:*/		return 0x822405FC;
		  /* 822405FCh */ case   26:  		/* bc 16, CR0_LT, -28 */
		/* 822405FCh case   26:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x822405E0;  }
		/* 822405FCh case   26:*/		return 0x82240600;
		  /* 82240600h */ case   27:  		/* lwz R10, <#[R1 + 88]> */
		/* 82240600h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 82240600h case   27:*/		return 0x82240604;
		  /* 82240604h */ case   28:  		/* stwx R10, <#[R11 + R30]> */
		/* 82240604h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82240604h case   28:*/		return 0x82240608;
	}
	return 0x82240608;
} // Block from 82240594h-82240608h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82240608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240608);
		  /* 82240608h */ case    0:  		/* addi R1, R1, 128 */
		/* 82240608h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82240608h case    0:*/		return 0x8224060C;
		  /* 8224060Ch */ case    1:  		/* b -1766240 */
		/* 8224060Ch case    1:*/		return 0x820912AC;
		/* 8224060Ch case    1:*/		return 0x82240610;
	}
	return 0x82240610;
} // Block from 82240608h-82240610h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82240610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240610);
		  /* 82240610h */ case    0:  		/* mfspr R12, LR */
		/* 82240610h case    0:*/		regs.R12 = regs.LR;
		/* 82240610h case    0:*/		return 0x82240614;
		  /* 82240614h */ case    1:  		/* bl -1766368 */
		/* 82240614h case    1:*/		regs.LR = 0x82240618; return 0x82091234;
		/* 82240614h case    1:*/		return 0x82240618;
		  /* 82240618h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82240618h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82240618h case    2:*/		return 0x8224061C;
		  /* 8224061Ch */ case    3:  		/* addi R11, R5, 58 */
		/* 8224061Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x3A);
		/* 8224061Ch case    3:*/		return 0x82240620;
		  /* 82240620h */ case    4:  		/* lis R10, -32252 */
		/* 82240620h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82240620h case    4:*/		return 0x82240624;
		  /* 82240624h */ case    5:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 82240624h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 82240624h case    5:*/		return 0x82240628;
		  /* 82240628h */ case    6:  		/* lis R11, -32253 */
		/* 82240628h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82240628h case    6:*/		return 0x8224062C;
		  /* 8224062Ch */ case    7:  		/* mr R25, R3 */
		/* 8224062Ch case    7:*/		regs.R25 = regs.R3;
		/* 8224062Ch case    7:*/		return 0x82240630;
		  /* 82240630h */ case    8:  		/* mr R31, R4 */
		/* 82240630h case    8:*/		regs.R31 = regs.R4;
		/* 82240630h case    8:*/		return 0x82240634;
		  /* 82240634h */ case    9:  		/* mr R20, R5 */
		/* 82240634h case    9:*/		regs.R20 = regs.R5;
		/* 82240634h case    9:*/		return 0x82240638;
		  /* 82240638h */ case   10:  		/* lwzx R23, <#[R9 + R3]> */
		/* 82240638h case   10:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82240638h case   10:*/		return 0x8224063C;
		  /* 8224063Ch */ case   11:  		/* mr R24, R6 */
		/* 8224063Ch case   11:*/		regs.R24 = regs.R6;
		/* 8224063Ch case   11:*/		return 0x82240640;
		  /* 82240640h */ case   12:  		/* addi R22, R11, 27460 */
		/* 82240640h case   12:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x6B44);
		/* 82240640h case   12:*/		return 0x82240644;
		  /* 82240644h */ case   13:  		/* addi R21, R10, 10344 */
		/* 82240644h case   13:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R10,0x2868);
		/* 82240644h case   13:*/		return 0x82240648;
		  /* 82240648h */ case   14:  		/* cmplwi CR6, R23, 0 */
		/* 82240648h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82240648h case   14:*/		return 0x8224064C;
		  /* 8224064Ch */ case   15:  		/* bc 4, CR6_EQ, 32 */
		/* 8224064Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x8224066C;  }
		/* 8224064Ch case   15:*/		return 0x82240650;
		  /* 82240650h */ case   16:  		/* lis R11, -32252 */
		/* 82240650h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82240650h case   16:*/		return 0x82240654;
		  /* 82240654h */ case   17:  		/* mr R6, R21 */
		/* 82240654h case   17:*/		regs.R6 = regs.R21;
		/* 82240654h case   17:*/		return 0x82240658;
		  /* 82240658h */ case   18:  		/* addi R5, R11, 10672 */
		/* 82240658h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x29B0);
		/* 82240658h case   18:*/		return 0x8224065C;
		  /* 8224065Ch */ case   19:  		/* mr R4, R22 */
		/* 8224065Ch case   19:*/		regs.R4 = regs.R22;
		/* 8224065Ch case   19:*/		return 0x82240660;
		  /* 82240660h */ case   20:  		/* li R7, 2188 */
		/* 82240660h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x88C);
		/* 82240660h case   20:*/		return 0x82240664;
		  /* 82240664h */ case   21:  		/* li R3, 0 */
		/* 82240664h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82240664h case   21:*/		return 0x82240668;
		  /* 82240668h */ case   22:  		/* bl -952928 */
		/* 82240668h case   22:*/		regs.LR = 0x8224066C; return 0x82157C08;
		/* 82240668h case   22:*/		return 0x8224066C;
	}
	return 0x8224066C;
} // Block from 82240610h-8224066Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8224066Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8224066C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8224066C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8224066C);
		  /* 8224066Ch */ case    0:  		/* lwz R11, <#[R25 + 952]> */
		/* 8224066Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x000003B8) );
		/* 8224066Ch case    0:*/		return 0x82240670;
		  /* 82240670h */ case    1:  		/* mr R4, R23 */
		/* 82240670h case    1:*/		regs.R4 = regs.R23;
		/* 82240670h case    1:*/		return 0x82240674;
		  /* 82240674h */ case    2:  		/* lwz R3, <#[R11 + 2736]> */
		/* 82240674h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 82240674h case    2:*/		return 0x82240678;
		  /* 82240678h */ case    3:  		/* bl 146800 */
		/* 82240678h case    3:*/		regs.LR = 0x8224067C; return 0x822643E8;
		/* 82240678h case    3:*/		return 0x8224067C;
		  /* 8224067Ch */ case    4:  		/* or. R29, R3, R3 */
		/* 8224067Ch case    4:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8224067Ch case    4:*/		return 0x82240680;
		  /* 82240680h */ case    5:  		/* bc 4, CR0_LT, 32 */
		/* 82240680h case    5:*/		if ( !regs.CR[0].lt ) { return 0x822406A0;  }
		/* 82240680h case    5:*/		return 0x82240684;
		  /* 82240684h */ case    6:  		/* lis R11, -32252 */
		/* 82240684h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82240684h case    6:*/		return 0x82240688;
		  /* 82240688h */ case    7:  		/* mr R6, R21 */
		/* 82240688h case    7:*/		regs.R6 = regs.R21;
		/* 82240688h case    7:*/		return 0x8224068C;
		  /* 8224068Ch */ case    8:  		/* addi R5, R11, 11092 */
		/* 8224068Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2B54);
		/* 8224068Ch case    8:*/		return 0x82240690;
		  /* 82240690h */ case    9:  		/* mr R4, R22 */
		/* 82240690h case    9:*/		regs.R4 = regs.R22;
		/* 82240690h case    9:*/		return 0x82240694;
		  /* 82240694h */ case   10:  		/* li R7, 2190 */
		/* 82240694h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x88E);
		/* 82240694h case   10:*/		return 0x82240698;
		  /* 82240698h */ case   11:  		/* li R3, 0 */
		/* 82240698h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82240698h case   11:*/		return 0x8224069C;
		  /* 8224069Ch */ case   12:  		/* bl -952980 */
		/* 8224069Ch case   12:*/		regs.LR = 0x822406A0; return 0x82157C08;
		/* 8224069Ch case   12:*/		return 0x822406A0;
	}
	return 0x822406A0;
} // Block from 8224066Ch-822406A0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 822406A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822406A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822406A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822406A0);
		  /* 822406A0h */ case    0:  		/* lis R11, -32251 */
		/* 822406A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8205);
		/* 822406A0h case    0:*/		return 0x822406A4;
		  /* 822406A4h */ case    1:  		/* lwz R10, <#[R23 + 80]> */
		/* 822406A4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000050) );
		/* 822406A4h case    1:*/		return 0x822406A8;
		  /* 822406A8h */ case    2:  		/* li R19, 1 */
		/* 822406A8h case    2:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 822406A8h case    2:*/		return 0x822406AC;
		  /* 822406ACh */ case    3:  		/* addi R11, R11, -19064 */
		/* 822406ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFB588);
		/* 822406ACh case    3:*/		return 0x822406B0;
		  /* 822406B0h */ case    4:  		/* mulli R10, R10, 12 */
		/* 822406B0h case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0xC);
		/* 822406B0h case    4:*/		return 0x822406B4;
		  /* 822406B4h */ case    5:  		/* addi R11, R11, 6 */
		/* 822406B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6);
		/* 822406B4h case    5:*/		return 0x822406B8;
		  /* 822406B8h */ case    6:  		/* lbzx R11, <#[R10 + R11]> */
		/* 822406B8h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 822406B8h case    6:*/		return 0x822406BC;
		  /* 822406BCh */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 822406BCh case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 822406BCh case    7:*/		return 0x822406C0;
		  /* 822406C0h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 822406C0h case    8:*/		if ( regs.CR[0].eq ) { return 0x822406D0;  }
		/* 822406C0h case    8:*/		return 0x822406C4;
		  /* 822406C4h */ case    9:  		/* cmplwi CR6, R11, 4 */
		/* 822406C4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 822406C4h case    9:*/		return 0x822406C8;
		  /* 822406C8h */ case   10:  		/* mr R11, R19 */
		/* 822406C8h case   10:*/		regs.R11 = regs.R19;
		/* 822406C8h case   10:*/		return 0x822406CC;
		  /* 822406CCh */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 822406CCh case   11:*/		if ( !regs.CR[6].gt ) { return 0x822406D4;  }
		/* 822406CCh case   11:*/		return 0x822406D0;
	}
	return 0x822406D0;
} // Block from 822406A0h-822406D0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822406D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822406D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822406D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822406D0);
		  /* 822406D0h */ case    0:  		/* li R11, 0 */
		/* 822406D0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 822406D0h case    0:*/		return 0x822406D4;
	}
	return 0x822406D4;
} // Block from 822406D0h-822406D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822406D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822406D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822406D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822406D4);
		  /* 822406D4h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 822406D4h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 822406D4h case    0:*/		return 0x822406D8;
		  /* 822406D8h */ case    1:  		/* mr R4, R20 */
		/* 822406D8h case    1:*/		regs.R4 = regs.R20;
		/* 822406D8h case    1:*/		return 0x822406DC;
		  /* 822406DCh */ case    2:  		/* cntlzw R11, R11 */
		/* 822406DCh case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 822406DCh case    2:*/		return 0x822406E0;
		  /* 822406E0h */ case    3:  		/* mr R3, R25 */
		/* 822406E0h case    3:*/		regs.R3 = regs.R25;
		/* 822406E0h case    3:*/		return 0x822406E4;
		  /* 822406E4h */ case    4:  		/* rlwinm R30, R11, 27, 31, 31 */
		/* 822406E4h case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R30,regs.R11);
		/* 822406E4h case    4:*/		return 0x822406E8;
		  /* 822406E8h */ case    5:  		/* bl 88824 */
		/* 822406E8h case    5:*/		regs.LR = 0x822406EC; return 0x822561E0;
		/* 822406E8h case    5:*/		return 0x822406EC;
		  /* 822406ECh */ case    6:  		/* addi R11, R20, 50 */
		/* 822406ECh case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0x32);
		/* 822406ECh case    6:*/		return 0x822406F0;
		  /* 822406F0h */ case    7:  		/* mr R28, R30 */
		/* 822406F0h case    7:*/		regs.R28 = regs.R30;
		/* 822406F0h case    7:*/		return 0x822406F4;
		  /* 822406F4h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 822406F4h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 822406F4h case    8:*/		return 0x822406F8;
		  /* 822406F8h */ case    9:  		/* cmplwi CR0, R30, 0 */
		/* 822406F8h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 822406F8h case    9:*/		return 0x822406FC;
		  /* 822406FCh */ case   10:  		/* mr R26, R3 */
		/* 822406FCh case   10:*/		regs.R26 = regs.R3;
		/* 822406FCh case   10:*/		return 0x82240700;
		  /* 82240700h */ case   11:  		/* lwzx R30, <#[R11 + R25]> */
		/* 82240700h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 82240700h case   11:*/		return 0x82240704;
		  /* 82240704h */ case   12:  		/* bc 12, CR0_EQ, 56 */
		/* 82240704h case   12:*/		if ( regs.CR[0].eq ) { return 0x8224073C;  }
		/* 82240704h case   12:*/		return 0x82240708;
		  /* 82240708h */ case   13:  		/* cmpwi CR6, R3, 1 */
		/* 82240708h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82240708h case   13:*/		return 0x8224070C;
		  /* 8224070Ch */ case   14:  		/* bc 4, CR6_EQ, 48 */
		/* 8224070Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x8224073C;  }
		/* 8224070Ch case   14:*/		return 0x82240710;
		  /* 82240710h */ case   15:  		/* lwz R11, <#[R25 + 952]> */
		/* 82240710h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x000003B8) );
		/* 82240710h case   15:*/		return 0x82240714;
		  /* 82240714h */ case   16:  		/* lwz R3, <#[R11 + 2736]> */
		/* 82240714h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 82240714h case   16:*/		return 0x82240718;
		  /* 82240718h */ case   17:  		/* bl -43616 */
		/* 82240718h case   17:*/		regs.LR = 0x8224071C; return 0x82235CB8;
		/* 82240718h case   17:*/		return 0x8224071C;
		  /* 8224071Ch */ case   18:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8224071Ch case   18:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8224071Ch case   18:*/		return 0x82240720;
		  /* 82240720h */ case   19:  		/* lwz R11, <#[R25 + 952]> */
		/* 82240720h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x000003B8) );
		/* 82240720h case   19:*/		return 0x82240724;
		  /* 82240724h */ case   20:  		/* lwz R11, <#[R11 + 2736]> */
		/* 82240724h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000AB0) );
		/* 82240724h case   20:*/		return 0x82240728;
		  /* 82240728h */ case   21:  		/* bc 12, CR0_EQ, 12 */
		/* 82240728h case   21:*/		if ( regs.CR[0].eq ) { return 0x82240734;  }
		/* 82240728h case   21:*/		return 0x8224072C;
		  /* 8224072Ch */ case   22:  		/* lwz R11, <#[R11 + 2112]> */
		/* 8224072Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000840) );
		/* 8224072Ch case   22:*/		return 0x82240730;
		  /* 82240730h */ case   23:  		/* b 8 */
		/* 82240730h case   23:*/		return 0x82240738;
		/* 82240730h case   23:*/		return 0x82240734;
	}
	return 0x82240734;
} // Block from 822406D4h-82240734h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82240734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240734);
		  /* 82240734h */ case    0:  		/* lwz R11, <#[R11 + 2132]> */
		/* 82240734h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000854) );
		/* 82240734h case    0:*/		return 0x82240738;
	}
	return 0x82240738;
} // Block from 82240734h-82240738h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82240738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240738);
		  /* 82240738h */ case    0:  		/* add R30, R11, R30 */
		/* 82240738h case    0:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 82240738h case    0:*/		return 0x8224073C;
	}
	return 0x8224073C;
} // Block from 82240738h-8224073Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8224073Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8224073C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8224073C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8224073C);
		  /* 8224073Ch */ case    0:  		/* lis R11, -32216 */
		/* 8224073Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8224073Ch case    0:*/		return 0x82240740;
		  /* 82240740h */ case    1:  		/* lwz R10, <#[R25 + 24]> */
		/* 82240740h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000018) );
		/* 82240740h case    1:*/		return 0x82240744;
		  /* 82240744h */ case    2:  		/* addi R27, R11, 17992 */
		/* 82240744h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x4648);
		/* 82240744h case    2:*/		return 0x82240748;
		  /* 82240748h */ case    3:  		/* mulli R11, R10, 52 */
		/* 82240748h case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R10,0x34);
		/* 82240748h case    3:*/		return 0x8224074C;
		  /* 8224074Ch */ case    4:  		/* lwzx R11, <#[R11 + R27]> */
		/* 8224074Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8224074Ch case    4:*/		return 0x82240750;
		  /* 82240750h */ case    5:  		/* rlwinm. R11, R11, 30, 31, 31 */
		/* 82240750h case    5:*/		cpu::op::rlwinm<1,30,31,31>(regs,&regs.R11,regs.R11);
		/* 82240750h case    5:*/		return 0x82240754;
		  /* 82240754h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 82240754h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82240754h case    6:*/		return 0x82240758;
	}
	return 0x82240758;
} // Block from 8224073Ch-82240758h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82240758h
// Function '?NeedAlloc@Assembler@XGRAPHICS@@AAA_NW4RegType@R400Tables@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240758);
		  /* 82240758h */ case    0:  		/* bc 4, CR0_EQ, 132 */
		/* 82240758h case    0:*/		if ( !regs.CR[0].eq ) { return 0x822407DC;  }
		/* 82240758h case    0:*/		return 0x8224075C;
		  /* 8224075Ch */ case    1:  		/* cmpwi CR6, R24, 1 */
		/* 8224075Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000001);
		/* 8224075Ch case    1:*/		return 0x82240760;
		  /* 82240760h */ case    2:  		/* bc 4, CR6_EQ, 60 */
		/* 82240760h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8224079C;  }
		/* 82240760h case    2:*/		return 0x82240764;
		  /* 82240764h */ case    3:  		/* rlwimi R11, R28, 31, 0, 0 */
		/* 82240764h case    3:*/		cpu::op::rlwimi<0,31,0,0>(regs,&regs.R11,regs.R28);
		/* 82240764h case    3:*/		return 0x82240768;
		  /* 82240768h */ case    4:  		/* cmpwi CR6, R26, 0 */
		/* 82240768h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82240768h case    4:*/		return 0x8224076C;
		  /* 8224076Ch */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 8224076Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8224076Ch case    5:*/		return 0x82240770;
		  /* 82240770h */ case    6:  		/* mr R11, R29 */
		/* 82240770h case    6:*/		regs.R11 = regs.R29;
		/* 82240770h case    6:*/		return 0x82240774;
		  /* 82240774h */ case    7:  		/* bc 12, CR6_EQ, 8 */
		/* 82240774h case    7:*/		if ( regs.CR[6].eq ) { return 0x8224077C;  }
		/* 82240774h case    7:*/		return 0x82240778;
		  /* 82240778h */ case    8:  		/* mr R11, R30 */
		/* 82240778h case    8:*/		regs.R11 = regs.R30;
		/* 82240778h case    8:*/		return 0x8224077C;
	}
	return 0x8224077C;
} // Block from 82240758h-8224077Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8224077Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8224077C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8224077C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8224077C);
		  /* 8224077Ch */ case    0:  		/* add R30, R20, R25 */
		/* 8224077Ch case    0:*/		cpu::op::add<0>(regs,&regs.R30,regs.R20,regs.R25);
		/* 8224077Ch case    0:*/		return 0x82240780;
		  /* 82240780h */ case    1:  		/* stb R11, <#[R31 + 9]> */
		/* 82240780h case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000009) );
		/* 82240780h case    1:*/		return 0x82240784;
		  /* 82240784h */ case    2:  		/* lbz R11, <#[R30 + 152]> */
		/* 82240784h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000098) );
		/* 82240784h case    2:*/		return 0x82240788;
		  /* 82240788h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 82240788h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82240788h case    3:*/		return 0x8224078C;
		  /* 8224078Ch */ case    4:  		/* bc 12, CR0_EQ, 136 */
		/* 8224078Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x82240814;  }
		/* 8224078Ch case    4:*/		return 0x82240790;
		  /* 82240790h */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 82240790h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82240790h case    5:*/		return 0x82240794;
		  /* 82240794h */ case    6:  		/* oris R11, R11, 1024 */
		/* 82240794h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 82240794h case    6:*/		return 0x82240798;
		  /* 82240798h */ case    7:  		/* b 120 */
		/* 82240798h case    7:*/		return 0x82240810;
		/* 82240798h case    7:*/		return 0x8224079C;
	}
	return 0x8224079C;
} // Block from 8224077Ch-8224079Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8224079Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8224079C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8224079C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8224079C);
		  /* 8224079Ch */ case    0:  		/* cmpwi CR6, R24, 2 */
		/* 8224079Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000002);
		/* 8224079Ch case    0:*/		return 0x822407A0;
		  /* 822407A0h */ case    1:  		/* bc 4, CR6_EQ, 60 */
		/* 822407A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x822407DC;  }
		/* 822407A0h case    1:*/		return 0x822407A4;
		  /* 822407A4h */ case    2:  		/* rlwimi R11, R28, 30, 1, 1 */
		/* 822407A4h case    2:*/		cpu::op::rlwimi<0,30,1,1>(regs,&regs.R11,regs.R28);
		/* 822407A4h case    2:*/		return 0x822407A8;
		  /* 822407A8h */ case    3:  		/* cmpwi CR6, R26, 0 */
		/* 822407A8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 822407A8h case    3:*/		return 0x822407AC;
		  /* 822407ACh */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 822407ACh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 822407ACh case    4:*/		return 0x822407B0;
		  /* 822407B0h */ case    5:  		/* mr R11, R29 */
		/* 822407B0h case    5:*/		regs.R11 = regs.R29;
		/* 822407B0h case    5:*/		return 0x822407B4;
		  /* 822407B4h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 822407B4h case    6:*/		if ( regs.CR[6].eq ) { return 0x822407BC;  }
		/* 822407B4h case    6:*/		return 0x822407B8;
		  /* 822407B8h */ case    7:  		/* mr R11, R30 */
		/* 822407B8h case    7:*/		regs.R11 = regs.R30;
		/* 822407B8h case    7:*/		return 0x822407BC;
	}
	return 0x822407BC;
} // Block from 8224079Ch-822407BCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 822407BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822407BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822407BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822407BC);
		  /* 822407BCh */ case    0:  		/* add R30, R20, R25 */
		/* 822407BCh case    0:*/		cpu::op::add<0>(regs,&regs.R30,regs.R20,regs.R25);
		/* 822407BCh case    0:*/		return 0x822407C0;
		  /* 822407C0h */ case    1:  		/* stb R11, <#[R31 + 10]> */
		/* 822407C0h case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x0000000A) );
		/* 822407C0h case    1:*/		return 0x822407C4;
		  /* 822407C4h */ case    2:  		/* lbz R11, <#[R30 + 152]> */
		/* 822407C4h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000098) );
		/* 822407C4h case    2:*/		return 0x822407C8;
		  /* 822407C8h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 822407C8h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 822407C8h case    3:*/		return 0x822407CC;
		  /* 822407CCh */ case    4:  		/* bc 12, CR0_EQ, 72 */
		/* 822407CCh case    4:*/		if ( regs.CR[0].eq ) { return 0x82240814;  }
		/* 822407CCh case    4:*/		return 0x822407D0;
		  /* 822407D0h */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 822407D0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 822407D0h case    5:*/		return 0x822407D4;
		  /* 822407D4h */ case    6:  		/* oris R11, R11, 512 */
		/* 822407D4h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 822407D4h case    6:*/		return 0x822407D8;
		  /* 822407D8h */ case    7:  		/* b 56 */
		/* 822407D8h case    7:*/		return 0x82240810;
		/* 822407D8h case    7:*/		return 0x822407DC;
	}
	return 0x822407DC;
} // Block from 822407BCh-822407DCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 822407DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822407DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822407DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822407DC);
		  /* 822407DCh */ case    0:  		/* rlwimi R11, R28, 29, 2, 2 */
		/* 822407DCh case    0:*/		cpu::op::rlwimi<0,29,2,2>(regs,&regs.R11,regs.R28);
		/* 822407DCh case    0:*/		return 0x822407E0;
		  /* 822407E0h */ case    1:  		/* cmpwi CR6, R26, 0 */
		/* 822407E0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 822407E0h case    1:*/		return 0x822407E4;
		  /* 822407E4h */ case    2:  		/* stw R11, <#[R31 + 8]> */
		/* 822407E4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 822407E4h case    2:*/		return 0x822407E8;
		  /* 822407E8h */ case    3:  		/* mr R11, R29 */
		/* 822407E8h case    3:*/		regs.R11 = regs.R29;
		/* 822407E8h case    3:*/		return 0x822407EC;
		  /* 822407ECh */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 822407ECh case    4:*/		if ( regs.CR[6].eq ) { return 0x822407F4;  }
		/* 822407ECh case    4:*/		return 0x822407F0;
		  /* 822407F0h */ case    5:  		/* mr R11, R30 */
		/* 822407F0h case    5:*/		regs.R11 = regs.R30;
		/* 822407F0h case    5:*/		return 0x822407F4;
	}
	return 0x822407F4;
} // Block from 822407DCh-822407F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822407F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822407F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822407F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822407F4);
		  /* 822407F4h */ case    0:  		/* stb R11, <#[R31 + 11]> */
		/* 822407F4h case    0:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x0000000B) );
		/* 822407F4h case    0:*/		return 0x822407F8;
		  /* 822407F8h */ case    1:  		/* add R30, R20, R25 */
		/* 822407F8h case    1:*/		cpu::op::add<0>(regs,&regs.R30,regs.R20,regs.R25);
		/* 822407F8h case    1:*/		return 0x822407FC;
		  /* 822407FCh */ case    2:  		/* lbz R11, <#[R30 + 152]> */
		/* 822407FCh case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000098) );
		/* 822407FCh case    2:*/		return 0x82240800;
		  /* 82240800h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 82240800h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82240800h case    3:*/		return 0x82240804;
		  /* 82240804h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 82240804h case    4:*/		if ( regs.CR[0].eq ) { return 0x82240814;  }
		/* 82240804h case    4:*/		return 0x82240808;
	}
	return 0x82240808;
} // Block from 822407F4h-82240808h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82240808h
// Function '?ReplaceLit@Assembler@XGRAPHICS@@AAAPAVIRInst@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240808);
		  /* 82240808h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82240808h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82240808h case    0:*/		return 0x8224080C;
		  /* 8224080Ch */ case    1:  		/* oris R11, R11, 256 */
		/* 8224080Ch case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 8224080Ch case    1:*/		return 0x82240810;
	}
	return 0x82240810;
} // Block from 82240808h-82240810h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82240810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240810);
		  /* 82240810h */ case    0:  		/* stw R11, <#[R31 + 4]> */
		/* 82240810h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82240810h case    0:*/		return 0x82240814;
	}
	return 0x82240814;
} // Block from 82240810h-82240814h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82240814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240814);
		  /* 82240814h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82240814h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82240814h case    0:*/		return 0x82240818;
		  /* 82240818h */ case    1:  		/* bc 12, CR6_EQ, 220 */
		/* 82240818h case    1:*/		if ( regs.CR[6].eq ) { return 0x822408F4;  }
		/* 82240818h case    1:*/		return 0x8224081C;
		  /* 8224081Ch */ case    2:  		/* cmpwi CR6, R26, 2 */
		/* 8224081Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000002);
		/* 8224081Ch case    2:*/		return 0x82240820;
		  /* 82240820h */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 82240820h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82240840;  }
		/* 82240820h case    3:*/		return 0x82240824;
		  /* 82240824h */ case    4:  		/* lis R11, -32255 */
		/* 82240824h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82240824h case    4:*/		return 0x82240828;
		  /* 82240828h */ case    5:  		/* mr R6, R21 */
		/* 82240828h case    5:*/		regs.R6 = regs.R21;
		/* 82240828h case    5:*/		return 0x8224082C;
		  /* 8224082Ch */ case    6:  		/* addi R5, R11, 5216 */
		/* 8224082Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1460);
		/* 8224082Ch case    6:*/		return 0x82240830;
		  /* 82240830h */ case    7:  		/* mr R4, R22 */
		/* 82240830h case    7:*/		regs.R4 = regs.R22;
		/* 82240830h case    7:*/		return 0x82240834;
		  /* 82240834h */ case    8:  		/* li R7, 2228 */
		/* 82240834h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x8B4);
		/* 82240834h case    8:*/		return 0x82240838;
		  /* 82240838h */ case    9:  		/* li R3, 0 */
		/* 82240838h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82240838h case    9:*/		return 0x8224083C;
		  /* 8224083Ch */ case   10:  		/* bl -953396 */
		/* 8224083Ch case   10:*/		regs.LR = 0x82240840; return 0x82157C08;
		/* 8224083Ch case   10:*/		return 0x82240840;
	}
	return 0x82240840;
} // Block from 82240814h-82240840h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82240840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240840);
		  /* 82240840h */ case    0:  		/* lwz R11, <#[R25 + 24]> */
		/* 82240840h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000018) );
		/* 82240840h case    0:*/		return 0x82240844;
		  /* 82240844h */ case    1:  		/* mulli R11, R11, 52 */
		/* 82240844h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x34);
		/* 82240844h case    1:*/		return 0x82240848;
		  /* 82240848h */ case    2:  		/* lwzx R11, <#[R11 + R27]> */
		/* 82240848h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82240848h case    2:*/		return 0x8224084C;
		  /* 8224084Ch */ case    3:  		/* rlwinm. R11, R11, 30, 31, 31 */
		/* 8224084Ch case    3:*/		cpu::op::rlwinm<1,30,31,31>(regs,&regs.R11,regs.R11);
		/* 8224084Ch case    3:*/		return 0x82240850;
		  /* 82240850h */ case    4:  		/* bc 4, CR0_EQ, 116 */
		/* 82240850h case    4:*/		if ( !regs.CR[0].eq ) { return 0x822408C4;  }
		/* 82240850h case    4:*/		return 0x82240854;
		  /* 82240854h */ case    5:  		/* cmpwi CR6, R24, 1 */
		/* 82240854h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000001);
		/* 82240854h case    5:*/		return 0x82240858;
		  /* 82240858h */ case    6:  		/* bc 4, CR6_EQ, 52 */
		/* 82240858h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8224088C;  }
		/* 82240858h case    6:*/		return 0x8224085C;
		  /* 8224085Ch */ case    7:  		/* cmpwi CR6, R26, 1 */
		/* 8224085Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 8224085Ch case    7:*/		return 0x82240860;
		  /* 82240860h */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 82240860h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82240870;  }
		/* 82240860h case    8:*/		return 0x82240864;
		  /* 82240864h */ case    9:  		/* lbz R11, <#[R31 + 9]> */
		/* 82240864h case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000009) );
		/* 82240864h case    9:*/		return 0x82240868;
		  /* 82240868h */ case   10:  		/* ori R11, R11, 64 */
		/* 82240868h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82240868h case   10:*/		return 0x8224086C;
		  /* 8224086Ch */ case   11:  		/* stb R11, <#[R31 + 9]> */
		/* 8224086Ch case   11:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000009) );
		/* 8224086Ch case   11:*/		return 0x82240870;
	}
	return 0x82240870;
} // Block from 82240840h-82240870h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82240870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240870);
		  /* 82240870h */ case    0:  		/* lbz R11, <#[R30 + 158]> */
		/* 82240870h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000009E) );
		/* 82240870h case    0:*/		return 0x82240874;
		  /* 82240874h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 82240874h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82240874h case    1:*/		return 0x82240878;
		  /* 82240878h */ case    2:  		/* bc 12, CR0_EQ, 760 */
		/* 82240878h case    2:*/		if ( regs.CR[0].eq ) { return 0x82240B70;  }
		/* 82240878h case    2:*/		return 0x8224087C;
		  /* 8224087Ch */ case    3:  		/* lbz R11, <#[R31 + 9]> */
		/* 8224087Ch case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000009) );
		/* 8224087Ch case    3:*/		return 0x82240880;
		  /* 82240880h */ case    4:  		/* ori R11, R11, 128 */
		/* 82240880h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x80);
		/* 82240880h case    4:*/		return 0x82240884;
		  /* 82240884h */ case    5:  		/* stb R11, <#[R31 + 9]> */
		/* 82240884h case    5:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000009) );
		/* 82240884h case    5:*/		return 0x82240888;
		  /* 82240888h */ case    6:  		/* b 744 */
		/* 82240888h case    6:*/		return 0x82240B70;
		/* 82240888h case    6:*/		return 0x8224088C;
	}
	return 0x8224088C;
} // Block from 82240870h-8224088Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8224088Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8224088C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8224088C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8224088C);
		  /* 8224088Ch */ case    0:  		/* cmpwi CR6, R24, 2 */
		/* 8224088Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000002);
		/* 8224088Ch case    0:*/		return 0x82240890;
		  /* 82240890h */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 82240890h case    1:*/		if ( !regs.CR[6].eq ) { return 0x822408C4;  }
		/* 82240890h case    1:*/		return 0x82240894;
		  /* 82240894h */ case    2:  		/* cmpwi CR6, R26, 1 */
		/* 82240894h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 82240894h case    2:*/		return 0x82240898;
		  /* 82240898h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82240898h case    3:*/		if ( !regs.CR[6].eq ) { return 0x822408A8;  }
		/* 82240898h case    3:*/		return 0x8224089C;
		  /* 8224089Ch */ case    4:  		/* lbz R11, <#[R31 + 10]> */
		/* 8224089Ch case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000A) );
		/* 8224089Ch case    4:*/		return 0x822408A0;
		  /* 822408A0h */ case    5:  		/* ori R11, R11, 64 */
		/* 822408A0h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 822408A0h case    5:*/		return 0x822408A4;
		  /* 822408A4h */ case    6:  		/* stb R11, <#[R31 + 10]> */
		/* 822408A4h case    6:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x0000000A) );
		/* 822408A4h case    6:*/		return 0x822408A8;
	}
	return 0x822408A8;
} // Block from 8224088Ch-822408A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822408A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822408A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822408A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822408A8);
		  /* 822408A8h */ case    0:  		/* lbz R11, <#[R30 + 158]> */
		/* 822408A8h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000009E) );
		/* 822408A8h case    0:*/		return 0x822408AC;
		  /* 822408ACh */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 822408ACh case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 822408ACh case    1:*/		return 0x822408B0;
		  /* 822408B0h */ case    2:  		/* bc 12, CR0_EQ, 704 */
		/* 822408B0h case    2:*/		if ( regs.CR[0].eq ) { return 0x82240B70;  }
		/* 822408B0h case    2:*/		return 0x822408B4;
		  /* 822408B4h */ case    3:  		/* lbz R11, <#[R31 + 10]> */
		/* 822408B4h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000A) );
		/* 822408B4h case    3:*/		return 0x822408B8;
		  /* 822408B8h */ case    4:  		/* ori R11, R11, 128 */
		/* 822408B8h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x80);
		/* 822408B8h case    4:*/		return 0x822408BC;
		  /* 822408BCh */ case    5:  		/* stb R11, <#[R31 + 10]> */
		/* 822408BCh case    5:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x0000000A) );
		/* 822408BCh case    5:*/		return 0x822408C0;
		  /* 822408C0h */ case    6:  		/* b 688 */
		/* 822408C0h case    6:*/		return 0x82240B70;
		/* 822408C0h case    6:*/		return 0x822408C4;
	}
	return 0x822408C4;
} // Block from 822408A8h-822408C4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822408C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822408C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822408C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822408C4);
		  /* 822408C4h */ case    0:  		/* cmpwi CR6, R26, 1 */
		/* 822408C4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 822408C4h case    0:*/		return 0x822408C8;
		  /* 822408C8h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 822408C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x822408D8;  }
		/* 822408C8h case    1:*/		return 0x822408CC;
		  /* 822408CCh */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 822408CCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 822408CCh case    2:*/		return 0x822408D0;
		  /* 822408D0h */ case    3:  		/* ori R11, R11, 64 */
		/* 822408D0h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 822408D0h case    3:*/		return 0x822408D4;
		  /* 822408D4h */ case    4:  		/* stb R11, <#[R31 + 11]> */
		/* 822408D4h case    4:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x0000000B) );
		/* 822408D4h case    4:*/		return 0x822408D8;
	}
	return 0x822408D8;
} // Block from 822408C4h-822408D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822408D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822408D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822408D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822408D8);
		  /* 822408D8h */ case    0:  		/* lbz R11, <#[R30 + 158]> */
		/* 822408D8h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000009E) );
		/* 822408D8h case    0:*/		return 0x822408DC;
		  /* 822408DCh */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 822408DCh case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 822408DCh case    1:*/		return 0x822408E0;
		  /* 822408E0h */ case    2:  		/* bc 12, CR0_EQ, 656 */
		/* 822408E0h case    2:*/		if ( regs.CR[0].eq ) { return 0x82240B70;  }
		/* 822408E0h case    2:*/		return 0x822408E4;
		  /* 822408E4h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 822408E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 822408E4h case    3:*/		return 0x822408E8;
		  /* 822408E8h */ case    4:  		/* rlwimi R11, R19, 7, 0, 24 */
		/* 822408E8h case    4:*/		cpu::op::rlwimi<0,7,0,24>(regs,&regs.R11,regs.R19);
		/* 822408E8h case    4:*/		return 0x822408EC;
		  /* 822408ECh */ case    5:  		/* stb R11, <#[R31 + 11]> */
		/* 822408ECh case    5:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x0000000B) );
		/* 822408ECh case    5:*/		return 0x822408F0;
		  /* 822408F0h */ case    6:  		/* b 640 */
		/* 822408F0h case    6:*/		return 0x82240B70;
		/* 822408F0h case    6:*/		return 0x822408F4;
	}
	return 0x822408F4;
} // Block from 822408D8h-822408F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822408F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822408F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822408F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822408F4);
		  /* 822408F4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 822408F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 822408F4h case    0:*/		return 0x822408F8;
		  /* 822408F8h */ case    1:  		/* rlwinm R10, R11, 2, 31, 31 */
		/* 822408F8h case    1:*/		cpu::op::rlwinm<0,2,31,31>(regs,&regs.R10,regs.R11);
		/* 822408F8h case    1:*/		return 0x822408FC;
		  /* 822408FCh */ case    2:  		/* rlwinm R9, R11, 3, 31, 31 */
		/* 822408FCh case    2:*/		cpu::op::rlwinm<0,3,31,31>(regs,&regs.R9,regs.R11);
		/* 822408FCh case    2:*/		return 0x82240900;
		  /* 82240900h */ case    3:  		/* subfic R10, R10, 3 */
		/* 82240900h case    3:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x3);
		/* 82240900h case    3:*/		return 0x82240904;
		  /* 82240904h */ case    4:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 82240904h case    4:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 82240904h case    4:*/		return 0x82240908;
		  /* 82240908h */ case    5:  		/* subf R10, R9, R10 */
		/* 82240908h case    5:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82240908h case    5:*/		return 0x8224090C;
		  /* 8224090Ch */ case    6:  		/* subf. R29, R11, R10 */
		/* 8224090Ch case    6:*/		cpu::op::subf<1>(regs,&regs.R29,regs.R11,regs.R10);
		/* 8224090Ch case    6:*/		return 0x82240910;
		  /* 82240910h */ case    7:  		/* bc 12, CR0_GT, 32 */
		/* 82240910h case    7:*/		if ( regs.CR[0].gt ) { return 0x82240930;  }
		/* 82240910h case    7:*/		return 0x82240914;
		  /* 82240914h */ case    8:  		/* lis R11, -32252 */
		/* 82240914h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82240914h case    8:*/		return 0x82240918;
		  /* 82240918h */ case    9:  		/* mr R6, R21 */
		/* 82240918h case    9:*/		regs.R6 = regs.R21;
		/* 82240918h case    9:*/		return 0x8224091C;
		  /* 8224091Ch */ case   10:  		/* addi R5, R11, 11076 */
		/* 8224091Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2B44);
		/* 8224091Ch case   10:*/		return 0x82240920;
		  /* 82240920h */ case   11:  		/* mr R4, R22 */
		/* 82240920h case   11:*/		regs.R4 = regs.R22;
		/* 82240920h case   11:*/		return 0x82240924;
		  /* 82240924h */ case   12:  		/* li R7, 2267 */
		/* 82240924h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x8DB);
		/* 82240924h case   12:*/		return 0x82240928;
		  /* 82240928h */ case   13:  		/* li R3, 0 */
		/* 82240928h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82240928h case   13:*/		return 0x8224092C;
		  /* 8224092Ch */ case   14:  		/* bl -953636 */
		/* 8224092Ch case   14:*/		regs.LR = 0x82240930; return 0x82157C08;
		/* 8224092Ch case   14:*/		return 0x82240930;
	}
	return 0x82240930;
} // Block from 822408F4h-82240930h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82240930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240930);
		  /* 82240930h */ case    0:  		/* lbz R11, <#[R30 + 158]> */
		/* 82240930h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000009E) );
		/* 82240930h case    0:*/		return 0x82240934;
		  /* 82240934h */ case    1:  		/* lis R30, 8192 */
		/* 82240934h case    1:*/		cpu::op::lis<0>(regs,&regs.R30,0x2000);
		/* 82240934h case    1:*/		return 0x82240938;
		  /* 82240938h */ case    2:  		/* cmplwi CR0, R11, 0 */
		/* 82240938h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82240938h case    2:*/		return 0x8224093C;
		  /* 8224093Ch */ case    3:  		/* bc 12, CR0_EQ, 68 */
		/* 8224093Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82240980;  }
		/* 8224093Ch case    3:*/		return 0x82240940;
		  /* 82240940h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 82240940h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240940h case    4:*/		return 0x82240944;
		  /* 82240944h */ case    5:  		/* cmpwi CR6, R29, 1 */
		/* 82240944h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000001);
		/* 82240944h case    5:*/		return 0x82240948;
		  /* 82240948h */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 82240948h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82240958;  }
		/* 82240948h case    6:*/		return 0x8224094C;
		  /* 8224094Ch */ case    7:  		/* ori R11, R11, 128 */
		/* 8224094Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x80);
		/* 8224094Ch case    7:*/		return 0x82240950;
		  /* 82240950h */ case    8:  		/* stw R11, <#[R31]> */
		/* 82240950h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240950h case    8:*/		return 0x82240954;
		  /* 82240954h */ case    9:  		/* b 164 */
		/* 82240954h case    9:*/		return 0x822409F8;
		/* 82240954h case    9:*/		return 0x82240958;
	}
	return 0x82240958;
} // Block from 82240930h-82240958h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82240958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240958);
		  /* 82240958h */ case    0:  		/* rlwinm R11, R11, 0, 24, 24 */
		/* 82240958h case    0:*/		cpu::op::rlwinm<0,0,24,24>(regs,&regs.R11,regs.R11);
		/* 82240958h case    0:*/		return 0x8224095C;
		  /* 8224095Ch */ case    1:  		/* cmplwi CR6, R11, 128 */
		/* 8224095Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 8224095Ch case    1:*/		return 0x82240960;
		  /* 82240960h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 82240960h case    2:*/		if ( regs.CR[6].eq ) { return 0x82240980;  }
		/* 82240960h case    2:*/		return 0x82240964;
		  /* 82240964h */ case    3:  		/* lis R11, -32252 */
		/* 82240964h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82240964h case    3:*/		return 0x82240968;
		  /* 82240968h */ case    4:  		/* mr R6, R21 */
		/* 82240968h case    4:*/		regs.R6 = regs.R21;
		/* 82240968h case    4:*/		return 0x8224096C;
		  /* 8224096Ch */ case    5:  		/* addi R5, R11, 11052 */
		/* 8224096Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2B2C);
		/* 8224096Ch case    5:*/		return 0x82240970;
		  /* 82240970h */ case    6:  		/* mr R4, R22 */
		/* 82240970h case    6:*/		regs.R4 = regs.R22;
		/* 82240970h case    6:*/		return 0x82240974;
		  /* 82240974h */ case    7:  		/* li R7, 2273 */
		/* 82240974h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x8E1);
		/* 82240974h case    7:*/		return 0x82240978;
		  /* 82240978h */ case    8:  		/* li R3, 0 */
		/* 82240978h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82240978h case    8:*/		return 0x8224097C;
		  /* 8224097Ch */ case    9:  		/* bl -953716 */
		/* 8224097Ch case    9:*/		regs.LR = 0x82240980; return 0x82157C08;
		/* 8224097Ch case    9:*/		return 0x82240980;
	}
	return 0x82240980;
} // Block from 82240958h-82240980h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82240980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240980);
		  /* 82240980h */ case    0:  		/* cmpwi CR6, R29, 1 */
		/* 82240980h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000001);
		/* 82240980h case    0:*/		return 0x82240984;
		  /* 82240984h */ case    1:  		/* bc 4, CR6_GT, 116 */
		/* 82240984h case    1:*/		if ( !regs.CR[6].gt ) { return 0x822409F8;  }
		/* 82240984h case    1:*/		return 0x82240988;
		  /* 82240988h */ case    2:  		/* lwz R11, <#[R23 + 80]> */
		/* 82240988h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000050) );
		/* 82240988h case    2:*/		return 0x8224098C;
		  /* 8224098Ch */ case    3:  		/* cmpwi CR6, R11, 11 */
		/* 8224098Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 8224098Ch case    3:*/		return 0x82240990;
		  /* 82240990h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 82240990h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82240990h case    4:*/		return 0x82240994;
		  /* 82240994h */ case    5:  		/* rlwinm R10, R11, 0, 2, 2 */
		/* 82240994h case    5:*/		cpu::op::rlwinm<0,0,2,2>(regs,&regs.R10,regs.R11);
		/* 82240994h case    5:*/		return 0x82240998;
		  /* 82240998h */ case    6:  		/* bc 4, CR6_EQ, 44 */
		/* 82240998h case    6:*/		if ( !regs.CR[6].eq ) { return 0x822409C4;  }
		/* 82240998h case    6:*/		return 0x8224099C;
		  /* 8224099Ch */ case    7:  		/* cmplw CR6, R10, R30 */
		/* 8224099Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 8224099Ch case    7:*/		return 0x822409A0;
		  /* 822409A0h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 822409A0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x822409B4;  }
		/* 822409A0h case    8:*/		return 0x822409A4;
		  /* 822409A4h */ case    9:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 822409A4h case    9:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 822409A4h case    9:*/		return 0x822409A8;
		  /* 822409A8h */ case   10:  		/* bc 4, CR0_EQ, 12 */
		/* 822409A8h case   10:*/		if ( !regs.CR[0].eq ) { return 0x822409B4;  }
		/* 822409A8h case   10:*/		return 0x822409AC;
		  /* 822409ACh */ case   11:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 822409ACh case   11:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 822409ACh case   11:*/		return 0x822409B0;
		  /* 822409B0h */ case   12:  		/* bc 12, CR0_EQ, 72 */
		/* 822409B0h case   12:*/		if ( regs.CR[0].eq ) { return 0x822409F8;  }
		/* 822409B0h case   12:*/		return 0x822409B4;
	}
	return 0x822409B4;
} // Block from 82240980h-822409B4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 822409B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822409B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822409B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822409B4);
		  /* 822409B4h */ case    0:  		/* lis R11, -32252 */
		/* 822409B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822409B4h case    0:*/		return 0x822409B8;
		  /* 822409B8h */ case    1:  		/* li R7, 2281 */
		/* 822409B8h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x8E9);
		/* 822409B8h case    1:*/		return 0x822409BC;
		  /* 822409BCh */ case    2:  		/* addi R5, R11, 10976 */
		/* 822409BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2AE0);
		/* 822409BCh case    2:*/		return 0x822409C0;
		  /* 822409C0h */ case    3:  		/* b 40 */
		/* 822409C0h case    3:*/		return 0x822409E8;
		/* 822409C0h case    3:*/		return 0x822409C4;
	}
	return 0x822409C4;
} // Block from 822409B4h-822409C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822409C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822409C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822409C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822409C4);
		  /* 822409C4h */ case    0:  		/* cmplw CR6, R10, R30 */
		/* 822409C4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 822409C4h case    0:*/		return 0x822409C8;
		  /* 822409C8h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 822409C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x822409F8;  }
		/* 822409C8h case    1:*/		return 0x822409CC;
		  /* 822409CCh */ case    2:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 822409CCh case    2:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 822409CCh case    2:*/		return 0x822409D0;
		  /* 822409D0h */ case    3:  		/* bc 4, CR0_EQ, 40 */
		/* 822409D0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x822409F8;  }
		/* 822409D0h case    3:*/		return 0x822409D4;
		  /* 822409D4h */ case    4:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 822409D4h case    4:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 822409D4h case    4:*/		return 0x822409D8;
		  /* 822409D8h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 822409D8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x822409F8;  }
		/* 822409D8h case    5:*/		return 0x822409DC;
		  /* 822409DCh */ case    6:  		/* lis R11, -32252 */
		/* 822409DCh case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822409DCh case    6:*/		return 0x822409E0;
		  /* 822409E0h */ case    7:  		/* li R7, 2285 */
		/* 822409E0h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x8ED);
		/* 822409E0h case    7:*/		return 0x822409E4;
		  /* 822409E4h */ case    8:  		/* addi R5, R11, 10896 */
		/* 822409E4h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2A90);
		/* 822409E4h case    8:*/		return 0x822409E8;
	}
	return 0x822409E8;
} // Block from 822409C4h-822409E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 822409E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822409E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822409E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822409E8);
		  /* 822409E8h */ case    0:  		/* mr R6, R21 */
		/* 822409E8h case    0:*/		regs.R6 = regs.R21;
		/* 822409E8h case    0:*/		return 0x822409EC;
		  /* 822409ECh */ case    1:  		/* mr R4, R22 */
		/* 822409ECh case    1:*/		regs.R4 = regs.R22;
		/* 822409ECh case    1:*/		return 0x822409F0;
		  /* 822409F0h */ case    2:  		/* li R3, 0 */
		/* 822409F0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822409F0h case    2:*/		return 0x822409F4;
		  /* 822409F4h */ case    3:  		/* bl -953836 */
		/* 822409F4h case    3:*/		regs.LR = 0x822409F8; return 0x82157C08;
		/* 822409F4h case    3:*/		return 0x822409F8;
	}
	return 0x822409F8;
} // Block from 822409E8h-822409F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822409F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822409F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822409F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822409F8);
		  /* 822409F8h */ case    0:  		/* cmpwi CR6, R26, 2 */
		/* 822409F8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000002);
		/* 822409F8h case    0:*/		return 0x822409FC;
		  /* 822409FCh */ case    1:  		/* bc 4, CR6_EQ, 132 */
		/* 822409FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82240A80;  }
		/* 822409FCh case    1:*/		return 0x82240A00;
		  /* 82240A00h */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 82240A00h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82240A00h case    2:*/		return 0x82240A04;
		  /* 82240A04h */ case    3:  		/* cmpwi CR6, R29, 1 */
		/* 82240A04h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000001);
		/* 82240A04h case    3:*/		return 0x82240A08;
		  /* 82240A08h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 82240A08h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82240A14;  }
		/* 82240A08h case    4:*/		return 0x82240A0C;
		  /* 82240A0Ch */ case    5:  		/* oris R11, R11, 40960 */
		/* 82240A0Ch case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xA000);
		/* 82240A0Ch case    5:*/		return 0x82240A10;
		  /* 82240A10h */ case    6:  		/* b 308 */
		/* 82240A10h case    6:*/		return 0x82240B44;
		/* 82240A10h case    6:*/		return 0x82240A14;
	}
	return 0x82240A14;
} // Block from 822409F8h-82240A14h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82240A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240A14);
		  /* 82240A14h */ case    0:  		/* cmpwi CR6, R29, 2 */
		/* 82240A14h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000002);
		/* 82240A14h case    0:*/		return 0x82240A18;
		  /* 82240A18h */ case    1:  		/* rlwinm R10, R11, 0, 2, 2 */
		/* 82240A18h case    1:*/		cpu::op::rlwinm<0,0,2,2>(regs,&regs.R10,regs.R11);
		/* 82240A18h case    1:*/		return 0x82240A1C;
		  /* 82240A1Ch */ case    2:  		/* bc 4, CR6_EQ, 60 */
		/* 82240A1Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82240A58;  }
		/* 82240A1Ch case    2:*/		return 0x82240A20;
		  /* 82240A20h */ case    3:  		/* cmplw CR6, R10, R30 */
		/* 82240A20h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 82240A20h case    3:*/		return 0x82240A24;
		  /* 82240A24h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 82240A24h case    4:*/		if ( regs.CR[6].eq ) { return 0x82240A4C;  }
		/* 82240A24h case    4:*/		return 0x82240A28;
		  /* 82240A28h */ case    5:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82240A28h case    5:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82240A28h case    5:*/		return 0x82240A2C;
		  /* 82240A2Ch */ case    6:  		/* bc 12, CR0_EQ, 32 */
		/* 82240A2Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x82240A4C;  }
		/* 82240A2Ch case    6:*/		return 0x82240A30;
		  /* 82240A30h */ case    7:  		/* lis R11, -32252 */
		/* 82240A30h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82240A30h case    7:*/		return 0x82240A34;
		  /* 82240A34h */ case    8:  		/* mr R6, R21 */
		/* 82240A34h case    8:*/		regs.R6 = regs.R21;
		/* 82240A34h case    8:*/		return 0x82240A38;
		  /* 82240A38h */ case    9:  		/* addi R5, R11, 10848 */
		/* 82240A38h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2A60);
		/* 82240A38h case    9:*/		return 0x82240A3C;
		  /* 82240A3Ch */ case   10:  		/* mr R4, R22 */
		/* 82240A3Ch case   10:*/		regs.R4 = regs.R22;
		/* 82240A3Ch case   10:*/		return 0x82240A40;
		  /* 82240A40h */ case   11:  		/* li R7, 2292 */
		/* 82240A40h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x8F4);
		/* 82240A40h case   11:*/		return 0x82240A44;
		  /* 82240A44h */ case   12:  		/* li R3, 0 */
		/* 82240A44h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82240A44h case   12:*/		return 0x82240A48;
		  /* 82240A48h */ case   13:  		/* bl -953920 */
		/* 82240A48h case   13:*/		regs.LR = 0x82240A4C; return 0x82157C08;
		/* 82240A48h case   13:*/		return 0x82240A4C;
	}
	return 0x82240A4C;
} // Block from 82240A14h-82240A4Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 82240A4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240A4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240A4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240A4C);
		  /* 82240A4Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82240A4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82240A4Ch case    0:*/		return 0x82240A50;
		  /* 82240A50h */ case    1:  		/* oris R11, R11, 24576 */
		/* 82240A50h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6000);
		/* 82240A50h case    1:*/		return 0x82240A54;
		  /* 82240A54h */ case    2:  		/* b 240 */
		/* 82240A54h case    2:*/		return 0x82240B44;
		/* 82240A54h case    2:*/		return 0x82240A58;
	}
	return 0x82240A58;
} // Block from 82240A4Ch-82240A58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82240A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240A58);
		  /* 82240A58h */ case    0:  		/* cmplw CR6, R10, R30 */
		/* 82240A58h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 82240A58h case    0:*/		return 0x82240A5C;
		  /* 82240A5Ch */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82240A5Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82240A70;  }
		/* 82240A5Ch case    1:*/		return 0x82240A60;
		  /* 82240A60h */ case    2:  		/* rlwinm R11, R11, 0, 1, 1 */
		/* 82240A60h case    2:*/		cpu::op::rlwinm<0,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82240A60h case    2:*/		return 0x82240A64;
		  /* 82240A64h */ case    3:  		/* lis R10, 16384 */
		/* 82240A64h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x4000);
		/* 82240A64h case    3:*/		return 0x82240A68;
		  /* 82240A68h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82240A68h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82240A68h case    4:*/		return 0x82240A6C;
		  /* 82240A6Ch */ case    5:  		/* bc 12, CR6_EQ, 260 */
		/* 82240A6Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82240B70;  }
		/* 82240A6Ch case    5:*/		return 0x82240A70;
	}
	return 0x82240A70;
} // Block from 82240A58h-82240A70h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82240A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240A70);
		  /* 82240A70h */ case    0:  		/* lis R11, -32252 */
		/* 82240A70h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82240A70h case    0:*/		return 0x82240A74;
		  /* 82240A74h */ case    1:  		/* li R7, 2296 */
		/* 82240A74h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x8F8);
		/* 82240A74h case    1:*/		return 0x82240A78;
		  /* 82240A78h */ case    2:  		/* addi R5, R11, 10800 */
		/* 82240A78h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2A30);
		/* 82240A78h case    2:*/		return 0x82240A7C;
		  /* 82240A7Ch */ case    3:  		/* b 228 */
		/* 82240A7Ch case    3:*/		return 0x82240B60;
		/* 82240A7Ch case    3:*/		return 0x82240A80;
	}
	return 0x82240A80;
} // Block from 82240A70h-82240A80h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82240A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240A80);
		  /* 82240A80h */ case    0:  		/* cmpwi CR6, R26, 1 */
		/* 82240A80h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 82240A80h case    0:*/		return 0x82240A84;
		  /* 82240A84h */ case    1:  		/* bc 4, CR6_EQ, 128 */
		/* 82240A84h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82240B04;  }
		/* 82240A84h case    1:*/		return 0x82240A88;
		  /* 82240A88h */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 82240A88h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82240A88h case    2:*/		return 0x82240A8C;
		  /* 82240A8Ch */ case    3:  		/* cmpwi CR6, R29, 1 */
		/* 82240A8Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000001);
		/* 82240A8Ch case    3:*/		return 0x82240A90;
		  /* 82240A90h */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 82240A90h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82240AA0;  }
		/* 82240A90h case    4:*/		return 0x82240A94;
		  /* 82240A94h */ case    5:  		/* rlwimi R11, R19, 31, 0, 0 */
		/* 82240A94h case    5:*/		cpu::op::rlwimi<0,31,0,0>(regs,&regs.R11,regs.R19);
		/* 82240A94h case    5:*/		return 0x82240A98;
		  /* 82240A98h */ case    6:  		/* rlwimi R11, R19, 31, 2, 2 */
		/* 82240A98h case    6:*/		cpu::op::rlwimi<0,31,2,2>(regs,&regs.R11,regs.R19);
		/* 82240A98h case    6:*/		return 0x82240A9C;
		  /* 82240A9Ch */ case    7:  		/* b 168 */
		/* 82240A9Ch case    7:*/		return 0x82240B44;
		/* 82240A9Ch case    7:*/		return 0x82240AA0;
	}
	return 0x82240AA0;
} // Block from 82240A80h-82240AA0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82240AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240AA0);
		  /* 82240AA0h */ case    0:  		/* cmpwi CR6, R29, 2 */
		/* 82240AA0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000002);
		/* 82240AA0h case    0:*/		return 0x82240AA4;
		  /* 82240AA4h */ case    1:  		/* rlwinm. R10, R11, 0, 2, 2 */
		/* 82240AA4h case    1:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R11);
		/* 82240AA4h case    1:*/		return 0x82240AA8;
		  /* 82240AA8h */ case    2:  		/* bc 4, CR6_EQ, 56 */
		/* 82240AA8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82240AE0;  }
		/* 82240AA8h case    2:*/		return 0x82240AAC;
		  /* 82240AACh */ case    3:  		/* bc 12, CR0_EQ, 40 */
		/* 82240AACh case    3:*/		if ( regs.CR[0].eq ) { return 0x82240AD4;  }
		/* 82240AACh case    3:*/		return 0x82240AB0;
		  /* 82240AB0h */ case    4:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82240AB0h case    4:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82240AB0h case    4:*/		return 0x82240AB4;
		  /* 82240AB4h */ case    5:  		/* bc 12, CR0_EQ, 32 */
		/* 82240AB4h case    5:*/		if ( regs.CR[0].eq ) { return 0x82240AD4;  }
		/* 82240AB4h case    5:*/		return 0x82240AB8;
		  /* 82240AB8h */ case    6:  		/* lis R11, -32252 */
		/* 82240AB8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82240AB8h case    6:*/		return 0x82240ABC;
		  /* 82240ABCh */ case    7:  		/* mr R6, R21 */
		/* 82240ABCh case    7:*/		regs.R6 = regs.R21;
		/* 82240ABCh case    7:*/		return 0x82240AC0;
		  /* 82240AC0h */ case    8:  		/* addi R5, R11, 10752 */
		/* 82240AC0h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x2A00);
		/* 82240AC0h case    8:*/		return 0x82240AC4;
		  /* 82240AC4h */ case    9:  		/* mr R4, R22 */
		/* 82240AC4h case    9:*/		regs.R4 = regs.R22;
		/* 82240AC4h case    9:*/		return 0x82240AC8;
		  /* 82240AC8h */ case   10:  		/* li R7, 2303 */
		/* 82240AC8h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x8FF);
		/* 82240AC8h case   10:*/		return 0x82240ACC;
		  /* 82240ACCh */ case   11:  		/* li R3, 0 */
		/* 82240ACCh case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82240ACCh case   11:*/		return 0x82240AD0;
		  /* 82240AD0h */ case   12:  		/* bl -954056 */
		/* 82240AD0h case   12:*/		regs.LR = 0x82240AD4; return 0x82157C08;
		/* 82240AD0h case   12:*/		return 0x82240AD4;
	}
	return 0x82240AD4;
} // Block from 82240AA0h-82240AD4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82240AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240AD4);
		  /* 82240AD4h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82240AD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82240AD4h case    0:*/		return 0x82240AD8;
		  /* 82240AD8h */ case    1:  		/* rlwimi R11, R19, 30, 1, 2 */
		/* 82240AD8h case    1:*/		cpu::op::rlwimi<0,30,1,2>(regs,&regs.R11,regs.R19);
		/* 82240AD8h case    1:*/		return 0x82240ADC;
		  /* 82240ADCh */ case    2:  		/* b 104 */
		/* 82240ADCh case    2:*/		return 0x82240B44;
		/* 82240ADCh case    2:*/		return 0x82240AE0;
	}
	return 0x82240AE0;
} // Block from 82240AD4h-82240AE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82240AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240AE0);
		  /* 82240AE0h */ case    0:  		/* bc 12, CR0_EQ, 144 */
		/* 82240AE0h case    0:*/		if ( regs.CR[0].eq ) { return 0x82240B70;  }
		/* 82240AE0h case    0:*/		return 0x82240AE4;
		  /* 82240AE4h */ case    1:  		/* rlwinm R11, R11, 0, 1, 1 */
		/* 82240AE4h case    1:*/		cpu::op::rlwinm<0,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82240AE4h case    1:*/		return 0x82240AE8;
		  /* 82240AE8h */ case    2:  		/* lis R10, 16384 */
		/* 82240AE8h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0x4000);
		/* 82240AE8h case    2:*/		return 0x82240AEC;
		  /* 82240AECh */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82240AECh case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82240AECh case    3:*/		return 0x82240AF0;
		  /* 82240AF0h */ case    4:  		/* bc 12, CR6_EQ, 128 */
		/* 82240AF0h case    4:*/		if ( regs.CR[6].eq ) { return 0x82240B70;  }
		/* 82240AF0h case    4:*/		return 0x82240AF4;
		  /* 82240AF4h */ case    5:  		/* lis R11, -32252 */
		/* 82240AF4h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82240AF4h case    5:*/		return 0x82240AF8;
		  /* 82240AF8h */ case    6:  		/* li R7, 2307 */
		/* 82240AF8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x903);
		/* 82240AF8h case    6:*/		return 0x82240AFC;
		  /* 82240AFCh */ case    7:  		/* addi R5, R11, 10704 */
		/* 82240AFCh case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x29D0);
		/* 82240AFCh case    7:*/		return 0x82240B00;
		  /* 82240B00h */ case    8:  		/* b 96 */
		/* 82240B00h case    8:*/		return 0x82240B60;
		/* 82240B00h case    8:*/		return 0x82240B04;
	}
	return 0x82240B04;
} // Block from 82240AE0h-82240B04h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82240B04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240B04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240B04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240B04);
		  /* 82240B04h */ case    0:  		/* lwz R11, <#[R23 + 80]> */
		/* 82240B04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000050) );
		/* 82240B04h case    0:*/		return 0x82240B08;
		  /* 82240B08h */ case    1:  		/* cmpwi CR6, R11, 11 */
		/* 82240B08h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 82240B08h case    1:*/		return 0x82240B0C;
		  /* 82240B0Ch */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 82240B0Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82240B24;  }
		/* 82240B0Ch case    2:*/		return 0x82240B10;
		  /* 82240B10h */ case    3:  		/* cmpwi CR6, R29, 1 */
		/* 82240B10h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000001);
		/* 82240B10h case    3:*/		return 0x82240B14;
		  /* 82240B14h */ case    4:  		/* bc 4, CR6_EQ, 92 */
		/* 82240B14h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82240B70;  }
		/* 82240B14h case    4:*/		return 0x82240B18;
		  /* 82240B18h */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 82240B18h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82240B18h case    5:*/		return 0x82240B1C;
		  /* 82240B1Ch */ case    6:  		/* rlwimi R11, R19, 29, 0, 2 */
		/* 82240B1Ch case    6:*/		cpu::op::rlwimi<0,29,0,2>(regs,&regs.R11,regs.R19);
		/* 82240B1Ch case    6:*/		return 0x82240B20;
		  /* 82240B20h */ case    7:  		/* b 36 */
		/* 82240B20h case    7:*/		return 0x82240B44;
		/* 82240B20h case    7:*/		return 0x82240B24;
	}
	return 0x82240B24;
} // Block from 82240B04h-82240B24h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82240B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240B24);
		  /* 82240B24h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82240B24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82240B24h case    0:*/		return 0x82240B28;
		  /* 82240B28h */ case    1:  		/* cmpwi CR6, R29, 1 */
		/* 82240B28h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000001);
		/* 82240B28h case    1:*/		return 0x82240B2C;
		  /* 82240B2Ch */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 82240B2Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82240B38;  }
		/* 82240B2Ch case    2:*/		return 0x82240B30;
		  /* 82240B30h */ case    3:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82240B30h case    3:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82240B30h case    3:*/		return 0x82240B34;
		  /* 82240B34h */ case    4:  		/* b 16 */
		/* 82240B34h case    4:*/		return 0x82240B44;
		/* 82240B34h case    4:*/		return 0x82240B38;
	}
	return 0x82240B38;
} // Block from 82240B24h-82240B38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82240B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240B38);
		  /* 82240B38h */ case    0:  		/* cmpwi CR6, R29, 2 */
		/* 82240B38h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000002);
		/* 82240B38h case    0:*/		return 0x82240B3C;
		  /* 82240B3Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82240B3Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82240B4C;  }
		/* 82240B3Ch case    1:*/		return 0x82240B40;
		  /* 82240B40h */ case    2:  		/* rlwinm R11, R11, 0, 2, 0 */
		/* 82240B40h case    2:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R11,regs.R11);
		/* 82240B40h case    2:*/		return 0x82240B44;
	}
	return 0x82240B44;
} // Block from 82240B38h-82240B44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82240B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240B44);
		  /* 82240B44h */ case    0:  		/* stw R11, <#[R31 + 4]> */
		/* 82240B44h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82240B44h case    0:*/		return 0x82240B48;
		  /* 82240B48h */ case    1:  		/* b 40 */
		/* 82240B48h case    1:*/		return 0x82240B70;
		/* 82240B48h case    1:*/		return 0x82240B4C;
	}
	return 0x82240B4C;
} // Block from 82240B44h-82240B4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82240B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240B4C);
		  /* 82240B4Ch */ case    0:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 82240B4Ch case    0:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82240B4Ch case    0:*/		return 0x82240B50;
		  /* 82240B50h */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 82240B50h case    1:*/		if ( regs.CR[0].eq ) { return 0x82240B70;  }
		/* 82240B50h case    1:*/		return 0x82240B54;
		  /* 82240B54h */ case    2:  		/* lis R11, -32252 */
		/* 82240B54h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82240B54h case    2:*/		return 0x82240B58;
		  /* 82240B58h */ case    3:  		/* li R7, 2325 */
		/* 82240B58h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x915);
		/* 82240B58h case    3:*/		return 0x82240B5C;
		  /* 82240B5Ch */ case    4:  		/* addi R5, R11, 10680 */
		/* 82240B5Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x29B8);
		/* 82240B5Ch case    4:*/		return 0x82240B60;
	}
	return 0x82240B60;
} // Block from 82240B4Ch-82240B60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82240B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240B60);
		  /* 82240B60h */ case    0:  		/* mr R6, R21 */
		/* 82240B60h case    0:*/		regs.R6 = regs.R21;
		/* 82240B60h case    0:*/		return 0x82240B64;
		  /* 82240B64h */ case    1:  		/* mr R4, R22 */
		/* 82240B64h case    1:*/		regs.R4 = regs.R22;
		/* 82240B64h case    1:*/		return 0x82240B68;
		  /* 82240B68h */ case    2:  		/* li R3, 0 */
		/* 82240B68h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82240B68h case    2:*/		return 0x82240B6C;
		  /* 82240B6Ch */ case    3:  		/* bl -954212 */
		/* 82240B6Ch case    3:*/		regs.LR = 0x82240B70; return 0x82157C08;
		/* 82240B6Ch case    3:*/		return 0x82240B70;
	}
	return 0x82240B70;
} // Block from 82240B60h-82240B70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82240B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240B70);
		  /* 82240B70h */ case    0:  		/* mr R4, R20 */
		/* 82240B70h case    0:*/		regs.R4 = regs.R20;
		/* 82240B70h case    0:*/		return 0x82240B74;
		  /* 82240B74h */ case    1:  		/* mr R3, R25 */
		/* 82240B74h case    1:*/		regs.R3 = regs.R25;
		/* 82240B74h case    1:*/		return 0x82240B78;
		  /* 82240B78h */ case    2:  		/* bl -1584 */
		/* 82240B78h case    2:*/		regs.LR = 0x82240B7C; return 0x82240548;
		/* 82240B78h case    2:*/		return 0x82240B7C;
		  /* 82240B7Ch */ case    3:  		/* addi R1, R1, 192 */
		/* 82240B7Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82240B7Ch case    3:*/		return 0x82240B80;
		  /* 82240B80h */ case    4:  		/* b -1767676 */
		/* 82240B80h case    4:*/		return 0x82091284;
		/* 82240B80h case    4:*/		return 0x82240B84;
		  /* 82240B84h */ case    5:  		/* nop */
		/* 82240B84h case    5:*/		cpu::op::nop();
		/* 82240B84h case    5:*/		return 0x82240B88;
	}
	return 0x82240B88;
} // Block from 82240B70h-82240B88h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82240B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240B88);
		  /* 82240B88h */ case    0:  		/* mfspr R12, LR */
		/* 82240B88h case    0:*/		regs.R12 = regs.LR;
		/* 82240B88h case    0:*/		return 0x82240B8C;
		  /* 82240B8Ch */ case    1:  		/* bl -1767768 */
		/* 82240B8Ch case    1:*/		regs.LR = 0x82240B90; return 0x82091234;
		/* 82240B8Ch case    1:*/		return 0x82240B90;
		  /* 82240B90h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 82240B90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82240B90h case    2:*/		return 0x82240B94;
		  /* 82240B94h */ case    3:  		/* lis R11, -32216 */
		/* 82240B94h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 82240B94h case    3:*/		return 0x82240B98;
		  /* 82240B98h */ case    4:  		/* lwz R10, <#[R3 + 24]> */
		/* 82240B98h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000018) );
		/* 82240B98h case    4:*/		return 0x82240B9C;
		  /* 82240B9Ch */ case    5:  		/* mr R30, R3 */
		/* 82240B9Ch case    5:*/		regs.R30 = regs.R3;
		/* 82240B9Ch case    5:*/		return 0x82240BA0;
		  /* 82240BA0h */ case    6:  		/* addi R20, R11, 17992 */
		/* 82240BA0h case    6:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R11,0x4648);
		/* 82240BA0h case    6:*/		return 0x82240BA4;
		  /* 82240BA4h */ case    7:  		/* mulli R11, R10, 52 */
		/* 82240BA4h case    7:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R10,0x34);
		/* 82240BA4h case    7:*/		return 0x82240BA8;
		  /* 82240BA8h */ case    8:  		/* lwz R10, <#[R4]> */
		/* 82240BA8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82240BA8h case    8:*/		return 0x82240BAC;
		  /* 82240BACh */ case    9:  		/* lwzx R11, <#[R11 + R20]> */
		/* 82240BACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 82240BACh case    9:*/		return 0x82240BB0;
		  /* 82240BB0h */ case   10:  		/* rlwinm. R11, R11, 30, 31, 31 */
		/* 82240BB0h case   10:*/		cpu::op::rlwinm<1,30,31,31>(regs,&regs.R11,regs.R11);
		/* 82240BB0h case   10:*/		return 0x82240BB4;
		  /* 82240BB4h */ case   11:  		/* lbz R11, <#[R3 + 164]> */
		/* 82240BB4h case   11:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000A4) );
		/* 82240BB4h case   11:*/		return 0x82240BB8;
		  /* 82240BB8h */ case   12:  		/* addic R9, R11, -1 */
		/* 82240BB8h case   12:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 82240BB8h case   12:*/		return 0x82240BBC;
		  /* 82240BBCh */ case   13:  		/* mr R31, R4 */
		/* 82240BBCh case   13:*/		regs.R31 = regs.R4;
		/* 82240BBCh case   13:*/		return 0x82240BC0;
		  /* 82240BC0h */ case   14:  		/* subfe R11, R9, R11 */
		/* 82240BC0h case   14:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82240BC0h case   14:*/		return 0x82240BC4;
		  /* 82240BC4h */ case   15:  		/* bc 12, CR0_EQ, 12 */
		/* 82240BC4h case   15:*/		if ( regs.CR[0].eq ) { return 0x82240BD0;  }
		/* 82240BC4h case   15:*/		return 0x82240BC8;
		  /* 82240BC8h */ case   16:  		/* rlwimi R10, R11, 25, 6, 6 */
		/* 82240BC8h case   16:*/		cpu::op::rlwimi<0,25,6,6>(regs,&regs.R10,regs.R11);
		/* 82240BC8h case   16:*/		return 0x82240BCC;
		  /* 82240BCCh */ case   17:  		/* b 8 */
		/* 82240BCCh case   17:*/		return 0x82240BD4;
		/* 82240BCCh case   17:*/		return 0x82240BD0;
	}
	return 0x82240BD0;
} // Block from 82240B88h-82240BD0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82240BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240BD0);
		  /* 82240BD0h */ case    0:  		/* rlwimi R10, R11, 24, 7, 7 */
		/* 82240BD0h case    0:*/		cpu::op::rlwimi<0,24,7,7>(regs,&regs.R10,regs.R11);
		/* 82240BD0h case    0:*/		return 0x82240BD4;
	}
	return 0x82240BD4;
} // Block from 82240BD0h-82240BD4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82240BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240BD4);
		  /* 82240BD4h */ case    0:  		/* stw R10, <#[R31]> */
		/* 82240BD4h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82240BD4h case    0:*/		return 0x82240BD8;
		  /* 82240BD8h */ case    1:  		/* lis R11, -32255 */
		/* 82240BD8h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82240BD8h case    1:*/		return 0x82240BDC;
		  /* 82240BDCh */ case    2:  		/* lwz R9, <#[R30 + 228]> */
		/* 82240BDCh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x000000E4) );
		/* 82240BDCh case    2:*/		return 0x82240BE0;
		  /* 82240BE0h */ case    3:  		/* rlwinm. R8, R9, 31, 31, 31 */
		/* 82240BE0h case    3:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R8,regs.R9);
		/* 82240BE0h case    3:*/		return 0x82240BE4;
		  /* 82240BE4h */ case    4:  		/* lis R10, -32253 */
		/* 82240BE4h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82240BE4h case    4:*/		return 0x82240BE8;
		  /* 82240BE8h */ case    5:  		/* lis R9, -32252 */
		/* 82240BE8h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82240BE8h case    5:*/		return 0x82240BEC;
		  /* 82240BECh */ case    6:  		/* li R23, 1 */
		/* 82240BECh case    6:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 82240BECh case    6:*/		return 0x82240BF0;
		  /* 82240BF0h */ case    7:  		/* addi R19, R11, 5216 */
		/* 82240BF0h case    7:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0x1460);
		/* 82240BF0h case    7:*/		return 0x82240BF4;
		  /* 82240BF4h */ case    8:  		/* addi R22, R10, 27460 */
		/* 82240BF4h case    8:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0x6B44);
		/* 82240BF4h case    8:*/		return 0x82240BF8;
		  /* 82240BF8h */ case    9:  		/* addi R21, R9, 10344 */
		/* 82240BF8h case    9:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R9,0x2868);
		/* 82240BF8h case    9:*/		return 0x82240BFC;
		  /* 82240BFCh */ case   10:  		/* bc 12, CR0_EQ, 316 */
		/* 82240BFCh case   10:*/		if ( regs.CR[0].eq ) { return 0x82240D38;  }
		/* 82240BFCh case   10:*/		return 0x82240C00;
		  /* 82240C00h */ case   11:  		/* lwz R11, <#[R31]> */
		/* 82240C00h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240C00h case   11:*/		return 0x82240C04;
		  /* 82240C04h */ case   12:  		/* lis R10, -32252 */
		/* 82240C04h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82240C04h case   12:*/		return 0x82240C08;
		  /* 82240C08h */ case   13:  		/* li R28, 0 */
		/* 82240C08h case   13:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82240C08h case   13:*/		return 0x82240C0C;
		  /* 82240C0Ch */ case   14:  		/* ori R11, R11, 32768 */
		/* 82240C0Ch case   14:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 82240C0Ch case   14:*/		return 0x82240C10;
		  /* 82240C10h */ case   15:  		/* li R27, 0 */
		/* 82240C10h case   15:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82240C10h case   15:*/		return 0x82240C14;
		  /* 82240C14h */ case   16:  		/* stw R11, <#[R31]> */
		/* 82240C14h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240C14h case   16:*/		return 0x82240C18;
		  /* 82240C18h */ case   17:  		/* lis R11, -32252 */
		/* 82240C18h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82240C18h case   17:*/		return 0x82240C1C;
		  /* 82240C1Ch */ case   18:  		/* li R29, 0 */
		/* 82240C1Ch case   18:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82240C1Ch case   18:*/		return 0x82240C20;
		  /* 82240C20h */ case   19:  		/* addi R24, R30, 128 */
		/* 82240C20h case   19:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R30,0x80);
		/* 82240C20h case   19:*/		return 0x82240C24;
		  /* 82240C24h */ case   20:  		/* addi R26, R11, 11104 */
		/* 82240C24h case   20:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x2B60);
		/* 82240C24h case   20:*/		return 0x82240C28;
		  /* 82240C28h */ case   21:  		/* addi R25, R10, 11124 */
		/* 82240C28h case   21:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0x2B74);
		/* 82240C28h case   21:*/		return 0x82240C2C;
		  /* 82240C2Ch */ case   22:  		/* lbzx R11, <#[R24 + R29]> */
		/* 82240C2Ch case   22:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R24 + regs.R29 + 0x00000000) );
		/* 82240C2Ch case   22:*/		return 0x82240C30;
		  /* 82240C30h */ case   23:  		/* cmplwi CR6, R11, 1 */
		/* 82240C30h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82240C30h case   23:*/		return 0x82240C34;
		  /* 82240C34h */ case   24:  		/* bc 12, CR6_LT, 180 */
		/* 82240C34h case   24:*/		if ( regs.CR[6].lt ) { return 0x82240CE8;  }
		/* 82240C34h case   24:*/		return 0x82240C38;
		  /* 82240C38h */ case   25:  		/* bc 12, CR6_EQ, 128 */
		/* 82240C38h case   25:*/		if ( regs.CR[6].eq ) { return 0x82240CB8;  }
		/* 82240C38h case   25:*/		return 0x82240C3C;
		  /* 82240C3Ch */ case   26:  		/* cmplwi CR6, R11, 3 */
		/* 82240C3Ch case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82240C3Ch case   26:*/		return 0x82240C40;
		  /* 82240C40h */ case   27:  		/* bc 12, CR6_LT, 72 */
		/* 82240C40h case   27:*/		if ( regs.CR[6].lt ) { return 0x82240C88;  }
		/* 82240C40h case   27:*/		return 0x82240C44;
		  /* 82240C44h */ case   28:  		/* bc 12, CR6_EQ, 32 */
		/* 82240C44h case   28:*/		if ( regs.CR[6].eq ) { return 0x82240C64;  }
		/* 82240C44h case   28:*/		return 0x82240C48;
		  /* 82240C48h */ case   29:  		/* mr R6, R21 */
		/* 82240C48h case   29:*/		regs.R6 = regs.R21;
		/* 82240C48h case   29:*/		return 0x82240C4C;
		  /* 82240C4Ch */ case   30:  		/* mr R5, R19 */
		/* 82240C4Ch case   30:*/		regs.R5 = regs.R19;
		/* 82240C4Ch case   30:*/		return 0x82240C50;
		  /* 82240C50h */ case   31:  		/* mr R4, R22 */
		/* 82240C50h case   31:*/		regs.R4 = regs.R22;
		/* 82240C50h case   31:*/		return 0x82240C54;
		  /* 82240C54h */ case   32:  		/* li R7, 2370 */
		/* 82240C54h case   32:*/		cpu::op::li<0>(regs,&regs.R7,0x942);
		/* 82240C54h case   32:*/		return 0x82240C58;
		  /* 82240C58h */ case   33:  		/* li R3, 0 */
		/* 82240C58h case   33:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82240C58h case   33:*/		return 0x82240C5C;
		  /* 82240C5Ch */ case   34:  		/* bl -954452 */
		/* 82240C5Ch case   34:*/		regs.LR = 0x82240C60; return 0x82157C08;
		/* 82240C5Ch case   34:*/		return 0x82240C60;
		  /* 82240C60h */ case   35:  		/* b 200 */
		/* 82240C60h case   35:*/		return 0x82240D28;
		/* 82240C60h case   35:*/		return 0x82240C64;
	}
	return 0x82240C64;
} // Block from 82240BD4h-82240C64h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82240C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240C64);
		  /* 82240C64h */ case    0:  		/* slw R11, R23, R29 */
		/* 82240C64h case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R23,regs.R29);
		/* 82240C64h case    0:*/		return 0x82240C68;
		  /* 82240C68h */ case    1:  		/* lwz R10, <#[R31]> */
		/* 82240C68h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82240C68h case    1:*/		return 0x82240C6C;
		  /* 82240C6Ch */ case    2:  		/* rlwinm R9, R11, 20, 0, 11 */
		/* 82240C6Ch case    2:*/		cpu::op::rlwinm<0,20,0,11>(regs,&regs.R9,regs.R11);
		/* 82240C6Ch case    2:*/		return 0x82240C70;
		  /* 82240C70h */ case    3:  		/* rlwinm R11, R11, 16, 0, 15 */
		/* 82240C70h case    3:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R11,regs.R11);
		/* 82240C70h case    3:*/		return 0x82240C74;
		  /* 82240C74h */ case    4:  		/* or R9, R9, R10 */
		/* 82240C74h case    4:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82240C74h case    4:*/		return 0x82240C78;
		  /* 82240C78h */ case    5:  		/* rlwimi R9, R10, 0, 12, 7 */
		/* 82240C78h case    5:*/		cpu::op::rlwimi<0,0,12,7>(regs,&regs.R9,regs.R10);
		/* 82240C78h case    5:*/		return 0x82240C7C;
		  /* 82240C7Ch */ case    6:  		/* or R11, R11, R9 */
		/* 82240C7Ch case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82240C7Ch case    6:*/		return 0x82240C80;
		  /* 82240C80h */ case    7:  		/* rlwimi R11, R9, 0, 16, 11 */
		/* 82240C80h case    7:*/		cpu::op::rlwimi<0,0,16,11>(regs,&regs.R11,regs.R9);
		/* 82240C80h case    7:*/		return 0x82240C84;
		  /* 82240C84h */ case    8:  		/* b 160 */
		/* 82240C84h case    8:*/		return 0x82240D24;
		/* 82240C84h case    8:*/		return 0x82240C88;
	}
	return 0x82240C88;
} // Block from 82240C64h-82240C88h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82240C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240C88);
		  /* 82240C88h */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 82240C88h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 82240C88h case    0:*/		return 0x82240C8C;
		  /* 82240C8Ch */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 82240C8Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82240CA8;  }
		/* 82240C8Ch case    1:*/		return 0x82240C90;
		  /* 82240C90h */ case    2:  		/* mr R6, R21 */
		/* 82240C90h case    2:*/		regs.R6 = regs.R21;
		/* 82240C90h case    2:*/		return 0x82240C94;
		  /* 82240C94h */ case    3:  		/* mr R5, R26 */
		/* 82240C94h case    3:*/		regs.R5 = regs.R26;
		/* 82240C94h case    3:*/		return 0x82240C98;
		  /* 82240C98h */ case    4:  		/* mr R4, R22 */
		/* 82240C98h case    4:*/		regs.R4 = regs.R22;
		/* 82240C98h case    4:*/		return 0x82240C9C;
		  /* 82240C9Ch */ case    5:  		/* li R7, 2361 */
		/* 82240C9Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x939);
		/* 82240C9Ch case    5:*/		return 0x82240CA0;
		  /* 82240CA0h */ case    6:  		/* li R3, 0 */
		/* 82240CA0h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82240CA0h case    6:*/		return 0x82240CA4;
		  /* 82240CA4h */ case    7:  		/* bl -954524 */
		/* 82240CA4h case    7:*/		regs.LR = 0x82240CA8; return 0x82157C08;
		/* 82240CA4h case    7:*/		return 0x82240CA8;
	}
	return 0x82240CA8;
} // Block from 82240C88h-82240CA8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82240CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240CA8);
		  /* 82240CA8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82240CA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240CA8h case    0:*/		return 0x82240CAC;
		  /* 82240CACh */ case    1:  		/* mr R27, R23 */
		/* 82240CACh case    1:*/		regs.R27 = regs.R23;
		/* 82240CACh case    1:*/		return 0x82240CB0;
		  /* 82240CB0h */ case    2:  		/* ori R11, R11, 16384 */
		/* 82240CB0h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 82240CB0h case    2:*/		return 0x82240CB4;
		  /* 82240CB4h */ case    3:  		/* b 112 */
		/* 82240CB4h case    3:*/		return 0x82240D24;
		/* 82240CB4h case    3:*/		return 0x82240CB8;
	}
	return 0x82240CB8;
} // Block from 82240CA8h-82240CB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82240CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240CB8);
		  /* 82240CB8h */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 82240CB8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 82240CB8h case    0:*/		return 0x82240CBC;
		  /* 82240CBCh */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 82240CBCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82240CD8;  }
		/* 82240CBCh case    1:*/		return 0x82240CC0;
		  /* 82240CC0h */ case    2:  		/* mr R6, R21 */
		/* 82240CC0h case    2:*/		regs.R6 = regs.R21;
		/* 82240CC0h case    2:*/		return 0x82240CC4;
		  /* 82240CC4h */ case    3:  		/* mr R5, R25 */
		/* 82240CC4h case    3:*/		regs.R5 = regs.R25;
		/* 82240CC4h case    3:*/		return 0x82240CC8;
		  /* 82240CC8h */ case    4:  		/* mr R4, R22 */
		/* 82240CC8h case    4:*/		regs.R4 = regs.R22;
		/* 82240CC8h case    4:*/		return 0x82240CCC;
		  /* 82240CCCh */ case    5:  		/* li R7, 2356 */
		/* 82240CCCh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x934);
		/* 82240CCCh case    5:*/		return 0x82240CD0;
		  /* 82240CD0h */ case    6:  		/* li R3, 0 */
		/* 82240CD0h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82240CD0h case    6:*/		return 0x82240CD4;
		  /* 82240CD4h */ case    7:  		/* bl -954572 */
		/* 82240CD4h case    7:*/		regs.LR = 0x82240CD8; return 0x82157C08;
		/* 82240CD4h case    7:*/		return 0x82240CD8;
	}
	return 0x82240CD8;
} // Block from 82240CB8h-82240CD8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82240CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240CD8);
		  /* 82240CD8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82240CD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240CD8h case    0:*/		return 0x82240CDC;
		  /* 82240CDCh */ case    1:  		/* mr R28, R23 */
		/* 82240CDCh case    1:*/		regs.R28 = regs.R23;
		/* 82240CDCh case    1:*/		return 0x82240CE0;
		  /* 82240CE0h */ case    2:  		/* rlwinm R11, R11, 0, 18, 16 */
		/* 82240CE0h case    2:*/		cpu::op::rlwinm<0,0,18,16>(regs,&regs.R11,regs.R11);
		/* 82240CE0h case    2:*/		return 0x82240CE4;
		  /* 82240CE4h */ case    3:  		/* b 64 */
		/* 82240CE4h case    3:*/		return 0x82240D24;
		/* 82240CE4h case    3:*/		return 0x82240CE8;
	}
	return 0x82240CE8;
} // Block from 82240CD8h-82240CE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82240CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240CE8);
		  /* 82240CE8h */ case    0:  		/* lwz R11, <#[R30 + 24]> */
		/* 82240CE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 82240CE8h case    0:*/		return 0x82240CEC;
		  /* 82240CECh */ case    1:  		/* lwz R10, <#[R31]> */
		/* 82240CECh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82240CECh case    1:*/		return 0x82240CF0;
		  /* 82240CF0h */ case    2:  		/* mulli R11, R11, 52 */
		/* 82240CF0h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x34);
		/* 82240CF0h case    2:*/		return 0x82240CF4;
		  /* 82240CF4h */ case    3:  		/* lwzx R11, <#[R11 + R20]> */
		/* 82240CF4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 82240CF4h case    3:*/		return 0x82240CF8;
		  /* 82240CF8h */ case    4:  		/* rlwinm. R11, R11, 30, 31, 31 */
		/* 82240CF8h case    4:*/		cpu::op::rlwinm<1,30,31,31>(regs,&regs.R11,regs.R11);
		/* 82240CF8h case    4:*/		return 0x82240CFC;
		  /* 82240CFCh */ case    5:  		/* slw R11, R23, R29 */
		/* 82240CFCh case    5:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R23,regs.R29);
		/* 82240CFCh case    5:*/		return 0x82240D00;
		  /* 82240D00h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 82240D00h case    6:*/		if ( regs.CR[0].eq ) { return 0x82240D18;  }
		/* 82240D00h case    6:*/		return 0x82240D04;
		  /* 82240D04h */ case    7:  		/* rlwinm R11, R11, 20, 0, 11 */
		/* 82240D04h case    7:*/		cpu::op::rlwinm<0,20,0,11>(regs,&regs.R11,regs.R11);
		/* 82240D04h case    7:*/		return 0x82240D08;
		  /* 82240D08h */ case    8:  		/* rlwinm R9, R10, 0, 0, 31 */
		/* 82240D08h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R10);
		/* 82240D08h case    8:*/		return 0x82240D0C;
		  /* 82240D0Ch */ case    9:  		/* or R11, R11, R10 */
		/* 82240D0Ch case    9:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82240D0Ch case    9:*/		return 0x82240D10;
		  /* 82240D10h */ case   10:  		/* rlwimi R11, R9, 0, 12, 7 */
		/* 82240D10h case   10:*/		cpu::op::rlwimi<0,0,12,7>(regs,&regs.R11,regs.R9);
		/* 82240D10h case   10:*/		return 0x82240D14;
		  /* 82240D14h */ case   11:  		/* b 16 */
		/* 82240D14h case   11:*/		return 0x82240D24;
		/* 82240D14h case   11:*/		return 0x82240D18;
	}
	return 0x82240D18;
} // Block from 82240CE8h-82240D18h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82240D18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240D18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240D18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240D18);
		  /* 82240D18h */ case    0:  		/* rlwinm R11, R11, 16, 0, 15 */
		/* 82240D18h case    0:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R11,regs.R11);
		/* 82240D18h case    0:*/		return 0x82240D1C;
		  /* 82240D1Ch */ case    1:  		/* or R11, R11, R10 */
		/* 82240D1Ch case    1:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82240D1Ch case    1:*/		return 0x82240D20;
		  /* 82240D20h */ case    2:  		/* rlwimi R11, R10, 0, 16, 11 */
		/* 82240D20h case    2:*/		cpu::op::rlwimi<0,0,16,11>(regs,&regs.R11,regs.R10);
		/* 82240D20h case    2:*/		return 0x82240D24;
	}
	return 0x82240D24;
} // Block from 82240D18h-82240D24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82240D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240D24);
		  /* 82240D24h */ case    0:  		/* stw R11, <#[R31]> */
		/* 82240D24h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240D24h case    0:*/		return 0x82240D28;
	}
	return 0x82240D28;
} // Block from 82240D24h-82240D28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82240D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240D28);
		  /* 82240D28h */ case    0:  		/* addi R29, R29, 1 */
		/* 82240D28h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82240D28h case    0:*/		return 0x82240D2C;
		  /* 82240D2Ch */ case    1:  		/* cmpwi CR6, R29, 4 */
		/* 82240D2Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 82240D2Ch case    1:*/		return 0x82240D30;
		  /* 82240D30h */ case    2:  		/* bc 12, CR6_LT, -260 */
		/* 82240D30h case    2:*/		if ( regs.CR[6].lt ) { return 0x82240C2C;  }
		/* 82240D30h case    2:*/		return 0x82240D34;
		  /* 82240D34h */ case    3:  		/* b 80 */
		/* 82240D34h case    3:*/		return 0x82240D84;
		/* 82240D34h case    3:*/		return 0x82240D38;
	}
	return 0x82240D38;
} // Block from 82240D28h-82240D38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82240D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240D38);
		  /* 82240D38h */ case    0:  		/* addi R11, R30, 128 */
		/* 82240D38h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x80);
		/* 82240D38h case    0:*/		return 0x82240D3C;
		  /* 82240D3Ch */ case    1:  		/* lwz R10, <#[R30 + 24]> */
		/* 82240D3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000018) );
		/* 82240D3Ch case    1:*/		return 0x82240D40;
		  /* 82240D40h */ case    2:  		/* mulli R10, R10, 52 */
		/* 82240D40h case    2:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x34);
		/* 82240D40h case    2:*/		return 0x82240D44;
		  /* 82240D44h */ case    3:  		/* lwbrx R11, <#[R11]> */
		/* 82240D44h case    3:*/		cpu::mem::lwbrx( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82240D44h case    3:*/		return 0x82240D48;
		  /* 82240D48h */ case    4:  		/* lwzx R10, <#[R10 + R20]> */
		/* 82240D48h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R20 + 0x00000000) );
		/* 82240D48h case    4:*/		return 0x82240D4C;
		  /* 82240D4Ch */ case    5:  		/* mr R9, R11 */
		/* 82240D4Ch case    5:*/		regs.R9 = regs.R11;
		/* 82240D4Ch case    5:*/		return 0x82240D50;
		  /* 82240D50h */ case    6:  		/* mr R8, R11 */
		/* 82240D50h case    6:*/		regs.R8 = regs.R11;
		/* 82240D50h case    6:*/		return 0x82240D54;
		  /* 82240D54h */ case    7:  		/* rlwimi R9, R11, 25, 14, 14 */
		/* 82240D54h case    7:*/		cpu::op::rlwimi<0,25,14,14>(regs,&regs.R9,regs.R11);
		/* 82240D54h case    7:*/		return 0x82240D58;
		  /* 82240D58h */ case    8:  		/* rlwinm. R10, R10, 30, 31, 31 */
		/* 82240D58h case    8:*/		cpu::op::rlwinm<1,30,31,31>(regs,&regs.R10,regs.R10);
		/* 82240D58h case    8:*/		return 0x82240D5C;
		  /* 82240D5Ch */ case    9:  		/* rlwimi R8, R9, 25, 21, 22 */
		/* 82240D5Ch case    9:*/		cpu::op::rlwimi<0,25,21,22>(regs,&regs.R8,regs.R9);
		/* 82240D5Ch case    9:*/		return 0x82240D60;
		  /* 82240D60h */ case   10:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 82240D60h case   10:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82240D60h case   10:*/		return 0x82240D64;
		  /* 82240D64h */ case   11:  		/* rlwinm R10, R8, 25, 28, 30 */
		/* 82240D64h case   11:*/		cpu::op::rlwinm<0,25,28,30>(regs,&regs.R10,regs.R8);
		/* 82240D64h case   11:*/		return 0x82240D68;
		  /* 82240D68h */ case   12:  		/* nor R11, R10, R11 */
		/* 82240D68h case   12:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82240D68h case   12:*/		return 0x82240D6C;
		  /* 82240D6Ch */ case   13:  		/* lwz R10, <#[R31]> */
		/* 82240D6Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82240D6Ch case   13:*/		return 0x82240D70;
		  /* 82240D70h */ case   14:  		/* bc 12, CR0_EQ, 12 */
		/* 82240D70h case   14:*/		if ( regs.CR[0].eq ) { return 0x82240D7C;  }
		/* 82240D70h case   14:*/		return 0x82240D74;
		  /* 82240D74h */ case   15:  		/* rlwimi R10, R11, 20, 8, 11 */
		/* 82240D74h case   15:*/		cpu::op::rlwimi<0,20,8,11>(regs,&regs.R10,regs.R11);
		/* 82240D74h case   15:*/		return 0x82240D78;
		  /* 82240D78h */ case   16:  		/* b 8 */
		/* 82240D78h case   16:*/		return 0x82240D80;
		/* 82240D78h case   16:*/		return 0x82240D7C;
	}
	return 0x82240D7C;
} // Block from 82240D38h-82240D7Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 82240D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240D7C);
		  /* 82240D7Ch */ case    0:  		/* rlwimi R10, R11, 16, 12, 15 */
		/* 82240D7Ch case    0:*/		cpu::op::rlwimi<0,16,12,15>(regs,&regs.R10,regs.R11);
		/* 82240D7Ch case    0:*/		return 0x82240D80;
	}
	return 0x82240D80;
} // Block from 82240D7Ch-82240D80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82240D80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240D80);
		  /* 82240D80h */ case    0:  		/* stw R10, <#[R31]> */
		/* 82240D80h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82240D80h case    0:*/		return 0x82240D84;
	}
	return 0x82240D84;
} // Block from 82240D80h-82240D84h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82240D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240D84);
		  /* 82240D84h */ case    0:  		/* lwz R4, <#[R30 + 952]> */
		/* 82240D84h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x000003B8) );
		/* 82240D84h case    0:*/		return 0x82240D88;
		  /* 82240D88h */ case    1:  		/* lwz R3, <#[R30 + 80]> */
		/* 82240D88h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000050) );
		/* 82240D88h case    1:*/		return 0x82240D8C;
		  /* 82240D8Ch */ case    2:  		/* bl 88996 */
		/* 82240D8Ch case    2:*/		regs.LR = 0x82240D90; return 0x82256930;
		/* 82240D8Ch case    2:*/		return 0x82240D90;
		  /* 82240D90h */ case    3:  		/* lwz R11, <#[R30 + 952]> */
		/* 82240D90h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000003B8) );
		/* 82240D90h case    3:*/		return 0x82240D94;
		  /* 82240D94h */ case    4:  		/* mr R4, R30 */
		/* 82240D94h case    4:*/		regs.R4 = regs.R30;
		/* 82240D94h case    4:*/		return 0x82240D98;
		  /* 82240D98h */ case    5:  		/* mr R29, R3 */
		/* 82240D98h case    5:*/		regs.R29 = regs.R3;
		/* 82240D98h case    5:*/		return 0x82240D9C;
		  /* 82240D9Ch */ case    6:  		/* lwz R3, <#[R11 + 2736]> */
		/* 82240D9Ch case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000AB0) );
		/* 82240D9Ch case    6:*/		return 0x82240DA0;
		  /* 82240DA0h */ case    7:  		/* bl 144968 */
		/* 82240DA0h case    7:*/		regs.LR = 0x82240DA4; return 0x822643E8;
		/* 82240DA0h case    7:*/		return 0x82240DA4;
		  /* 82240DA4h */ case    8:  		/* lwz R10, <#[R30 + 952]> */
		/* 82240DA4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000003B8) );
		/* 82240DA4h case    8:*/		return 0x82240DA8;
		  /* 82240DA8h */ case    9:  		/* mr R28, R3 */
		/* 82240DA8h case    9:*/		regs.R28 = regs.R3;
		/* 82240DA8h case    9:*/		return 0x82240DAC;
		  /* 82240DACh */ case   10:  		/* lwz R11, <#[R30 + 200]> */
		/* 82240DACh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000C8) );
		/* 82240DACh case   10:*/		return 0x82240DB0;
		  /* 82240DB0h */ case   11:  		/* cmpwi CR6, R29, 48 */
		/* 82240DB0h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000030);
		/* 82240DB0h case   11:*/		return 0x82240DB4;
		  /* 82240DB4h */ case   12:  		/* lwz R10, <#[R10 + 2736]> */
		/* 82240DB4h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000AB0) );
		/* 82240DB4h case   12:*/		return 0x82240DB8;
		  /* 82240DB8h */ case   13:  		/* lwz R10, <#[R10 + 2132]> */
		/* 82240DB8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000854) );
		/* 82240DB8h case   13:*/		return 0x82240DBC;
		  /* 82240DBCh */ case   14:  		/* add R27, R10, R11 */
		/* 82240DBCh case   14:*/		cpu::op::add<0>(regs,&regs.R27,regs.R10,regs.R11);
		/* 82240DBCh case   14:*/		return 0x82240DC0;
		  /* 82240DC0h */ case   15:  		/* bc 12, CR6_EQ, 144 */
		/* 82240DC0h case   15:*/		if ( regs.CR[6].eq ) { return 0x82240E50;  }
		/* 82240DC0h case   15:*/		return 0x82240DC4;
		  /* 82240DC4h */ case   16:  		/* cmpwi CR6, R29, 5 */
		/* 82240DC4h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000005);
		/* 82240DC4h case   16:*/		return 0x82240DC8;
		  /* 82240DC8h */ case   17:  		/* bc 4, CR6_EQ, 20 */
		/* 82240DC8h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82240DDC;  }
		/* 82240DC8h case   17:*/		return 0x82240DCC;
		  /* 82240DCCh */ case   18:  		/* lwz R11, <#[R31]> */
		/* 82240DCCh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240DCCh case   18:*/		return 0x82240DD0;
		  /* 82240DD0h */ case   19:  		/* li R10, 31 */
		/* 82240DD0h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x1F);
		/* 82240DD0h case   19:*/		return 0x82240DD4;
		  /* 82240DD4h */ case   20:  		/* rlwimi R11, R10, 1, 26, 31 */
		/* 82240DD4h case   20:*/		cpu::op::rlwimi<0,1,26,31>(regs,&regs.R11,regs.R10);
		/* 82240DD4h case   20:*/		return 0x82240DD8;
		  /* 82240DD8h */ case   21:  		/* b 256 */
		/* 82240DD8h case   21:*/		return 0x82240ED8;
		/* 82240DD8h case   21:*/		return 0x82240DDC;
	}
	return 0x82240DDC;
} // Block from 82240D84h-82240DDCh (22 instructions)

//////////////////////////////////////////////////////
// Block at 82240DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240DDC);
		  /* 82240DDCh */ case    0:  		/* cmpwi CR6, R29, 6 */
		/* 82240DDCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000006);
		/* 82240DDCh case    0:*/		return 0x82240DE0;
		  /* 82240DE0h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82240DE0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82240DF0;  }
		/* 82240DE0h case    1:*/		return 0x82240DE4;
		  /* 82240DE4h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82240DE4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240DE4h case    2:*/		return 0x82240DE8;
		  /* 82240DE8h */ case    3:  		/* ori R11, R11, 63 */
		/* 82240DE8h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3F);
		/* 82240DE8h case    3:*/		return 0x82240DEC;
		  /* 82240DECh */ case    4:  		/* b 236 */
		/* 82240DECh case    4:*/		return 0x82240ED8;
		/* 82240DECh case    4:*/		return 0x82240DF0;
	}
	return 0x82240DF0;
} // Block from 82240DDCh-82240DF0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82240DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240DF0);
		  /* 82240DF0h */ case    0:  		/* cmpwi CR6, R29, 7 */
		/* 82240DF0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000007);
		/* 82240DF0h case    0:*/		return 0x82240DF4;
		  /* 82240DF4h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82240DF4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82240E00;  }
		/* 82240DF4h case    1:*/		return 0x82240DF8;
		  /* 82240DF8h */ case    2:  		/* li R10, 61 */
		/* 82240DF8h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x3D);
		/* 82240DF8h case    2:*/		return 0x82240DFC;
		  /* 82240DFCh */ case    3:  		/* b 36 */
		/* 82240DFCh case    3:*/		return 0x82240E20;
		/* 82240DFCh case    3:*/		return 0x82240E00;
	}
	return 0x82240E00;
} // Block from 82240DF0h-82240E00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82240E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240E00);
		  /* 82240E00h */ case    0:  		/* cmpwi CR6, R29, 43 */
		/* 82240E00h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x0000002B);
		/* 82240E00h case    0:*/		return 0x82240E04;
		  /* 82240E04h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82240E04h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82240E14;  }
		/* 82240E04h case    1:*/		return 0x82240E08;
		  /* 82240E08h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82240E08h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240E08h case    2:*/		return 0x82240E0C;
		  /* 82240E0Ch */ case    3:  		/* rlwimi R11, R23, 5, 26, 31 */
		/* 82240E0Ch case    3:*/		cpu::op::rlwimi<0,5,26,31>(regs,&regs.R11,regs.R23);
		/* 82240E0Ch case    3:*/		return 0x82240E10;
		  /* 82240E10h */ case    4:  		/* b 200 */
		/* 82240E10h case    4:*/		return 0x82240ED8;
		/* 82240E10h case    4:*/		return 0x82240E14;
	}
	return 0x82240E14;
} // Block from 82240E00h-82240E14h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82240E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240E14);
		  /* 82240E14h */ case    0:  		/* cmpwi CR6, R29, 44 */
		/* 82240E14h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x0000002C);
		/* 82240E14h case    0:*/		return 0x82240E18;
		  /* 82240E18h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82240E18h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82240E2C;  }
		/* 82240E18h case    1:*/		return 0x82240E1C;
		  /* 82240E1Ch */ case    2:  		/* li R10, 33 */
		/* 82240E1Ch case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x21);
		/* 82240E1Ch case    2:*/		return 0x82240E20;
	}
	return 0x82240E20;
} // Block from 82240E14h-82240E20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82240E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240E20);
		  /* 82240E20h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82240E20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240E20h case    0:*/		return 0x82240E24;
		  /* 82240E24h */ case    1:  		/* rlwimi R11, R10, 0, 26, 31 */
		/* 82240E24h case    1:*/		cpu::op::rlwimi<0,0,26,31>(regs,&regs.R11,regs.R10);
		/* 82240E24h case    1:*/		return 0x82240E28;
		  /* 82240E28h */ case    2:  		/* b 176 */
		/* 82240E28h case    2:*/		return 0x82240ED8;
		/* 82240E28h case    2:*/		return 0x82240E2C;
	}
	return 0x82240E2C;
} // Block from 82240E20h-82240E2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82240E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240E2C);
		  /* 82240E2Ch */ case    0:  		/* li R4, 0 */
		/* 82240E2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82240E2Ch case    0:*/		return 0x82240E30;
		  /* 82240E30h */ case    1:  		/* mr R3, R30 */
		/* 82240E30h case    1:*/		regs.R3 = regs.R30;
		/* 82240E30h case    1:*/		return 0x82240E34;
		  /* 82240E34h */ case    2:  		/* bl 86956 */
		/* 82240E34h case    2:*/		regs.LR = 0x82240E38; return 0x822561E0;
		/* 82240E34h case    2:*/		return 0x82240E38;
		  /* 82240E38h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82240E38h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82240E38h case    3:*/		return 0x82240E3C;
		  /* 82240E3Ch */ case    4:  		/* bc 12, CR0_EQ, 124 */
		/* 82240E3Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x82240EB8;  }
		/* 82240E3Ch case    4:*/		return 0x82240E40;
		  /* 82240E40h */ case    5:  		/* cmpwi CR6, R3, 1 */
		/* 82240E40h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82240E40h case    5:*/		return 0x82240E44;
		  /* 82240E44h */ case    6:  		/* bc 12, CR6_EQ, 136 */
		/* 82240E44h case    6:*/		if ( regs.CR[6].eq ) { return 0x82240ECC;  }
		/* 82240E44h case    6:*/		return 0x82240E48;
		  /* 82240E48h */ case    7:  		/* li R7, 2426 */
		/* 82240E48h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x97A);
		/* 82240E48h case    7:*/		return 0x82240E4C;
		  /* 82240E4Ch */ case    8:  		/* b 152 */
		/* 82240E4Ch case    8:*/		return 0x82240EE4;
		/* 82240E4Ch case    8:*/		return 0x82240E50;
	}
	return 0x82240E50;
} // Block from 82240E2Ch-82240E50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82240E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240E50);
		  /* 82240E50h */ case    0:  		/* lwz R11, <#[R30 + 24]> */
		/* 82240E50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 82240E50h case    0:*/		return 0x82240E54;
		  /* 82240E54h */ case    1:  		/* li R4, 0 */
		/* 82240E54h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82240E54h case    1:*/		return 0x82240E58;
		  /* 82240E58h */ case    2:  		/* mr R3, R30 */
		/* 82240E58h case    2:*/		regs.R3 = regs.R30;
		/* 82240E58h case    2:*/		return 0x82240E5C;
		  /* 82240E5Ch */ case    3:  		/* mulli R11, R11, 52 */
		/* 82240E5Ch case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x34);
		/* 82240E5Ch case    3:*/		return 0x82240E60;
		  /* 82240E60h */ case    4:  		/* lwzx R11, <#[R11 + R20]> */
		/* 82240E60h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 82240E60h case    4:*/		return 0x82240E64;
		  /* 82240E64h */ case    5:  		/* rlwinm. R11, R11, 30, 31, 31 */
		/* 82240E64h case    5:*/		cpu::op::rlwinm<1,30,31,31>(regs,&regs.R11,regs.R11);
		/* 82240E64h case    5:*/		return 0x82240E68;
		  /* 82240E68h */ case    6:  		/* bc 12, CR0_EQ, 68 */
		/* 82240E68h case    6:*/		if ( regs.CR[0].eq ) { return 0x82240EAC;  }
		/* 82240E68h case    6:*/		return 0x82240E6C;
		  /* 82240E6Ch */ case    7:  		/* bl 86900 */
		/* 82240E6Ch case    7:*/		regs.LR = 0x82240E70; return 0x822561E0;
		/* 82240E6Ch case    7:*/		return 0x82240E70;
		  /* 82240E70h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82240E70h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82240E70h case    8:*/		return 0x82240E74;
		  /* 82240E74h */ case    9:  		/* bc 4, CR0_EQ, 16 */
		/* 82240E74h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82240E84;  }
		/* 82240E74h case    9:*/		return 0x82240E78;
		  /* 82240E78h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 82240E78h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240E78h case   10:*/		return 0x82240E7C;
		  /* 82240E7Ch */ case   11:  		/* rlwimi R11, R28, 8, 18, 23 */
		/* 82240E7Ch case   11:*/		cpu::op::rlwimi<0,8,18,23>(regs,&regs.R11,regs.R28);
		/* 82240E7Ch case   11:*/		return 0x82240E80;
		  /* 82240E80h */ case   12:  		/* b 88 */
		/* 82240E80h case   12:*/		return 0x82240ED8;
		/* 82240E80h case   12:*/		return 0x82240E84;
	}
	return 0x82240E84;
} // Block from 82240E50h-82240E84h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82240E84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240E84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240E84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240E84);
		  /* 82240E84h */ case    0:  		/* cmpwi CR6, R3, 1 */
		/* 82240E84h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82240E84h case    0:*/		return 0x82240E88;
		  /* 82240E88h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 82240E88h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82240EA4;  }
		/* 82240E88h case    1:*/		return 0x82240E8C;
		  /* 82240E8Ch */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82240E8Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82240E8Ch case    2:*/		return 0x82240E90;
		  /* 82240E90h */ case    3:  		/* li R10, 16384 */
		/* 82240E90h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x4000);
		/* 82240E90h case    3:*/		return 0x82240E94;
		  /* 82240E94h */ case    4:  		/* rlwinm R11, R11, 0, 24, 17 */
		/* 82240E94h case    4:*/		cpu::op::rlwinm<0,0,24,17>(regs,&regs.R11,regs.R11);
		/* 82240E94h case    4:*/		return 0x82240E98;
		  /* 82240E98h */ case    5:  		/* rlwimi R10, R27, 8, 18, 23 */
		/* 82240E98h case    5:*/		cpu::op::rlwimi<0,8,18,23>(regs,&regs.R10,regs.R27);
		/* 82240E98h case    5:*/		return 0x82240E9C;
		  /* 82240E9Ch */ case    6:  		/* or R11, R10, R11 */
		/* 82240E9Ch case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82240E9Ch case    6:*/		return 0x82240EA0;
		  /* 82240EA0h */ case    7:  		/* b 56 */
		/* 82240EA0h case    7:*/		return 0x82240ED8;
		/* 82240EA0h case    7:*/		return 0x82240EA4;
	}
	return 0x82240EA4;
} // Block from 82240E84h-82240EA4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82240EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240EA4);
		  /* 82240EA4h */ case    0:  		/* li R7, 2439 */
		/* 82240EA4h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x987);
		/* 82240EA4h case    0:*/		return 0x82240EA8;
		  /* 82240EA8h */ case    1:  		/* b 60 */
		/* 82240EA8h case    1:*/		return 0x82240EE4;
		/* 82240EA8h case    1:*/		return 0x82240EAC;
	}
	return 0x82240EAC;
} // Block from 82240EA4h-82240EACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82240EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82240EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82240EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82240EAC);
		  /* 82240EACh */ case    0:  		/* bl 86836 */
		/* 82240EACh case    0:*/		regs.LR = 0x82240EB0; return 0x822561E0;
		/* 82240EACh case    0:*/		return 0x82240EB0;
		  /* 82240EB0h */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 82240EB0h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82240EB0h case    1:*/		return 0x82240EB4;
		  /* 82240EB4h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 82240EB4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82240EC4;  }
		/* 82240EB4h case    2:*/		return 0x82240EB8;
	}
	return 0x82240EB8;
} // Block from 82240EACh-82240EB8h (3 instructions)

